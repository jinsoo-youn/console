"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EditColumn = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _reactCore = require("@patternfly/react-core");

var _reactIcons = require("@patternfly/react-icons");

var _inlineEdit = _interopRequireDefault(require("@patternfly/react-styles/css/components/InlineEdit/inline-edit"));

var _classnames = _interopRequireDefault(require("classnames"));

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var EditColumn = function EditColumn(_ref) {
  var _ref$onClick = _ref.onClick,
      _onClick = _ref$onClick === void 0 ? null : _ref$onClick,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      editing = _ref.editing,
      valid = _ref.valid,
      saveAriaLabel = _ref.saveAriaLabel,
      cancelAriaLabel = _ref.cancelAriaLabel,
      editAriaLabel = _ref.editAriaLabel,
      props = _objectWithoutProperties(_ref, ["onClick", "className", "editing", "valid", "saveAriaLabel", "cancelAriaLabel", "editAriaLabel"]);

  return React.createElement(React.Fragment, null, React.createElement("div", {
    className: (0, _classnames["default"])(_inlineEdit["default"].inlineEditGroup, _inlineEdit["default"].modifiers.iconGroup, 'pf-m-action-group')
  }, React.createElement("div", {
    className: (0, _classnames["default"])(_inlineEdit["default"].inlineEditAction)
  }, React.createElement(_reactCore.Button, _extends({
    "aria-label": saveAriaLabel
  }, props, {
    onClick: function onClick(e) {
      return _onClick(e, 'save');
    },
    variant: "plain"
  }), React.createElement(_reactIcons.CheckIcon, null))), React.createElement("div", {
    className: (0, _classnames["default"])(_inlineEdit["default"].inlineEditAction)
  }, React.createElement(_reactCore.Button, _extends({
    "aria-label": cancelAriaLabel
  }, props, {
    onClick: function onClick(e) {
      return _onClick(e, 'cancel');
    },
    variant: "plain"
  }), React.createElement(_reactIcons.TimesIcon, null)))), React.createElement("div", {
    className: (0, _classnames["default"])(_inlineEdit["default"].inlineEditAction, _inlineEdit["default"].modifiers.enableEditable)
  }, React.createElement(_reactCore.Button, _extends({
    "aria-label": editAriaLabel
  }, props, {
    onClick: function onClick(e) {
      return _onClick(e, 'edit');
    },
    variant: "plain"
  }), React.createElement(_reactIcons.PencilAltIcon, null))));
};

exports.EditColumn = EditColumn;
EditColumn.propTypes = {
  name: _propTypes["default"].string,
  className: _propTypes["default"].string,
  onClick: _propTypes["default"].any,
  editing: _propTypes["default"].bool,
  valid: _propTypes["default"].bool,
  saveAriaLabel: _propTypes["default"].string.isRequired,
  cancelAriaLabel: _propTypes["default"].string.isRequired,
  editAriaLabel: _propTypes["default"].string.isRequired
};
//# sourceMappingURL=EditColumn.js.map