"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = exports.FilterSidePanelCategory = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _classnames = _interopRequireDefault(require("classnames"));

var _Button = require("@patternfly/react-core/dist/js/components/Button");

var _form = _interopRequireDefault(require("@patternfly/react-styles/css/components/Form/form"));

var _reactStyles = require("@patternfly/react-styles");

var _util = require("../../helpers/util");

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; if (obj != null) { var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

var FilterSidePanelCategory = function FilterSidePanelCategory(_ref) {
  var _ref$children = _ref.children,
      children = _ref$children === void 0 ? null : _ref$children,
      _ref$className = _ref.className,
      className = _ref$className === void 0 ? '' : _ref$className,
      _ref$title = _ref.title,
      title = _ref$title === void 0 ? null : _ref$title,
      _ref$maxShowCount = _ref.maxShowCount,
      maxShowCount = _ref$maxShowCount === void 0 ? 5 : _ref$maxShowCount,
      _ref$leeway = _ref.leeway,
      leeway = _ref$leeway === void 0 ? 2 : _ref$leeway,
      _ref$showAll = _ref.showAll,
      showAll = _ref$showAll === void 0 ? false : _ref$showAll,
      _ref$onShowAllToggle = _ref.onShowAllToggle,
      onShowAllToggle = _ref$onShowAllToggle === void 0 ? function () {
    return null;
  } : _ref$onShowAllToggle,
      _ref$showText = _ref.showText,
      showText = _ref$showText === void 0 ? null : _ref$showText,
      _ref$hideText = _ref.hideText,
      hideText = _ref$hideText === void 0 ? null : _ref$hideText,
      props = _objectWithoutProperties(_ref, ["children", "className", "title", "maxShowCount", "leeway", "showAll", "onShowAllToggle", "showText", "hideText"]);

  var classes = (0, _classnames["default"])('filter-panel-pf-category', className);
  var childrenArray = (0, _util.childrenToArray)(children);
  var itemCount = childrenArray.length;
  var hiddenCount = itemCount - maxShowCount;
  var shownChildren;
  var showAllToggle = null;

  if (hiddenCount <= leeway || showAll) {
    shownChildren = children;

    if (hiddenCount > leeway) {
      showAllToggle = React.createElement(_Button.Button, {
        variant: "link",
        onClick: onShowAllToggle
      }, hideText || 'Show less');
    }
  } else {
    shownChildren = childrenArray.slice(0, maxShowCount);

    if (hiddenCount > leeway) {
      showAllToggle = React.createElement(_Button.Button, {
        variant: "link",
        onClick: onShowAllToggle
      }, showText || "Show ".concat(hiddenCount, " more"));
    }
  }

  return React.createElement("form", _extends({
    className: classes
  }, props), React.createElement("fieldset", {
    className: "".concat((0, _reactStyles.css)(_form["default"].formFieldset), " checkbox filter-panel-pf-category-items")
  }, title && React.createElement("legend", {
    className: "filter-panel-pf-category-title"
  }, title), shownChildren, showAllToggle));
};

exports.FilterSidePanelCategory = FilterSidePanelCategory;
FilterSidePanelCategory.propTypes = {
  children: _propTypes["default"].node,
  className: _propTypes["default"].string,
  title: _propTypes["default"].oneOfType([_propTypes["default"].string, _propTypes["default"].node]),
  maxShowCount: _propTypes["default"].number,
  leeway: _propTypes["default"].number,
  showAll: _propTypes["default"].bool,
  onShowAllToggle: _propTypes["default"].func,
  showText: _propTypes["default"].string,
  hideText: _propTypes["default"].string
};
var _default = FilterSidePanelCategory;
exports["default"] = _default;
//# sourceMappingURL=FilterSidePanelCategory.js.map