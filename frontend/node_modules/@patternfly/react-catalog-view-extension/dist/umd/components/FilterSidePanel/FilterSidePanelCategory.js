(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "prop-types", "react", "classnames", "@patternfly/react-core/dist/js/components/Button", "@patternfly/react-styles/css/components/Form/form", "@patternfly/react-styles", "../../helpers/util"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("prop-types"), require("react"), require("classnames"), require("@patternfly/react-core/dist/js/components/Button"), require("@patternfly/react-styles/css/components/Form/form"), require("@patternfly/react-styles"), require("../../helpers/util"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.propTypes, global.react, global.classnames, global.Button, global.form, global.reactStyles, global.util);
    global.undefined = mod.exports;
  }
})(this, function (exports, _propTypes, _react, _classnames, _Button, _form, _reactStyles, _util) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.FilterSidePanelCategory = undefined;

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var React = _interopRequireWildcard(_react);

  var _classnames2 = _interopRequireDefault(_classnames);

  var _form2 = _interopRequireDefault(_form);

  function _getRequireWildcardCache() {
    if (typeof WeakMap !== "function") return null;
    var cache = new WeakMap();

    _getRequireWildcardCache = function () {
      return cache;
    };

    return cache;
  }

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    }

    var cache = _getRequireWildcardCache();

    if (cache && cache.has(obj)) {
      return cache.get(obj);
    }

    var newObj = {};

    if (obj != null) {
      var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;

      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) {
          var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;

          if (desc && (desc.get || desc.set)) {
            Object.defineProperty(newObj, key, desc);
          } else {
            newObj[key] = obj[key];
          }
        }
      }
    }

    newObj.default = obj;

    if (cache) {
      cache.set(obj, newObj);
    }

    return newObj;
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _extends() {
    _extends = Object.assign || function (target) {
      for (var i = 1; i < arguments.length; i++) {
        var source = arguments[i];

        for (var key in source) {
          if (Object.prototype.hasOwnProperty.call(source, key)) {
            target[key] = source[key];
          }
        }
      }

      return target;
    };

    return _extends.apply(this, arguments);
  }

  function _objectWithoutProperties(source, excluded) {
    if (source == null) return {};

    var target = _objectWithoutPropertiesLoose(source, excluded);

    var key, i;

    if (Object.getOwnPropertySymbols) {
      var sourceSymbolKeys = Object.getOwnPropertySymbols(source);

      for (i = 0; i < sourceSymbolKeys.length; i++) {
        key = sourceSymbolKeys[i];
        if (excluded.indexOf(key) >= 0) continue;
        if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
        target[key] = source[key];
      }
    }

    return target;
  }

  function _objectWithoutPropertiesLoose(source, excluded) {
    if (source == null) return {};
    var target = {};
    var sourceKeys = Object.keys(source);
    var key, i;

    for (i = 0; i < sourceKeys.length; i++) {
      key = sourceKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      target[key] = source[key];
    }

    return target;
  }

  const FilterSidePanelCategory = exports.FilterSidePanelCategory = _ref => {
    let {
      children = null,
      className = '',
      title = null,
      maxShowCount = 5,
      leeway = 2,
      showAll = false,
      onShowAllToggle = () => null,
      showText = null,
      hideText = null
    } = _ref,
        props = _objectWithoutProperties(_ref, ["children", "className", "title", "maxShowCount", "leeway", "showAll", "onShowAllToggle", "showText", "hideText"]);

    const classes = (0, _classnames2.default)('filter-panel-pf-category', className);
    const childrenArray = (0, _util.childrenToArray)(children);
    const itemCount = childrenArray.length;
    const hiddenCount = itemCount - maxShowCount;
    let shownChildren;
    let showAllToggle = null;

    if (hiddenCount <= leeway || showAll) {
      shownChildren = children;

      if (hiddenCount > leeway) {
        showAllToggle = React.createElement(_Button.Button, {
          variant: "link",
          onClick: onShowAllToggle
        }, hideText || 'Show less');
      }
    } else {
      shownChildren = childrenArray.slice(0, maxShowCount);

      if (hiddenCount > leeway) {
        showAllToggle = React.createElement(_Button.Button, {
          variant: "link",
          onClick: onShowAllToggle
        }, showText || `Show ${hiddenCount} more`);
      }
    }

    return React.createElement("form", _extends({
      className: classes
    }, props), React.createElement("fieldset", {
      className: `${(0, _reactStyles.css)(_form2.default.formFieldset)} checkbox filter-panel-pf-category-items`
    }, title && React.createElement("legend", {
      className: "filter-panel-pf-category-title"
    }, title), shownChildren, showAllToggle));
  };

  FilterSidePanelCategory.propTypes = {
    children: _propTypes2.default.node,
    className: _propTypes2.default.string,
    title: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.node]),
    maxShowCount: _propTypes2.default.number,
    leeway: _propTypes2.default.number,
    showAll: _propTypes2.default.bool,
    onShowAllToggle: _propTypes2.default.func,
    showText: _propTypes2.default.string,
    hideText: _propTypes2.default.string
  };
  exports.default = FilterSidePanelCategory;
});
//# sourceMappingURL=FilterSidePanelCategory.js.map