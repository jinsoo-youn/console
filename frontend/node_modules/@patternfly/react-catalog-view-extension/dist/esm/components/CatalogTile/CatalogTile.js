import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as React from 'react';
import { Card } from '@patternfly/react-core/dist/js/components/Card/Card';
import { CardActions } from '@patternfly/react-core/dist/js/components/Card/CardActions';
import { CardHead } from '@patternfly/react-core/dist/js/components/Card/CardHead';
import { CardHeader } from '@patternfly/react-core/dist/js/components/Card/CardHeader';
import { CardBody } from '@patternfly/react-core/dist/js/components/Card/CardBody';
import { CardFooter } from '@patternfly/react-core/dist/js/components/Card/CardFooter';
import classNames from 'classnames';
export class CatalogTile extends React.Component {
  constructor(...args) {
    super(...args);

    _defineProperty(this, "handleClick", e => {
      const {
        onClick,
        href
      } = this.props;

      if (!href) {
        e.preventDefault();
      }

      if (onClick) {
        onClick(e);
      }
    });

    _defineProperty(this, "renderBadges", badges => {
      if (!badges || !badges.length) {
        return null;
      }

      return React.createElement("div", {
        className: "catalog-tile-pf-badge-container"
      }, badges.map((badge, index) => React.createElement("span", {
        key: `badge-${index}`
      }, badge)));
    });
  }

  render() {
    const _this$props = this.props,
          {
      id,
      className,
      featured,
      onClick,
      href,
      icon,
      iconImg,
      iconAlt,
      iconClass,
      badges,
      title,
      vendor,
      description,
      footer,
      // eslint-disable-next-line @typescript-eslint/no-unused-vars
      ref
    } = _this$props,
          props = _objectWithoutProperties(_this$props, ["id", "className", "featured", "onClick", "href", "icon", "iconImg", "iconAlt", "iconClass", "badges", "title", "vendor", "description", "footer", "ref"]);

    return React.createElement(Card, _extends({
      component: href || onClick ? 'a' : 'div',
      id: id,
      href: href || '#',
      className: classNames('catalog-tile-pf', {
        featured
      }, className),
      onClick: e => this.handleClick(e),
      isHoverable: true
    }, props), (badges.length > 0 || iconImg || iconClass || icon) && React.createElement(CardHead, null, iconImg && React.createElement("img", {
      className: "catalog-tile-pf-icon",
      src: iconImg,
      alt: iconAlt
    }), !iconImg && (iconClass || icon) && React.createElement("span", {
      className: `catalog-tile-pf-icon ${iconClass}`
    }, icon), badges.length > 0 && React.createElement(CardActions, null, this.renderBadges(badges))), React.createElement(CardHeader, {
      className: "catalog-tile-pf-header"
    }, React.createElement("div", {
      className: "catalog-tile-pf-title"
    }, title), vendor && React.createElement("div", {
      className: "catalog-tile-pf-subtitle"
    }, vendor)), description && React.createElement(CardBody, {
      className: "catalog-tile-pf-body"
    }, React.createElement("div", {
      className: "catalog-tile-pf-description"
    }, React.createElement("span", {
      className: classNames({
        'has-footer': footer
      })
    }, description))), footer && React.createElement(CardFooter, {
      className: "catalog-tile-pf-footer"
    }, footer));
  }

}

_defineProperty(CatalogTile, "propTypes", {
  id: _pt.any,
  className: _pt.string,
  featured: _pt.bool,
  onClick: _pt.func,
  href: _pt.string,
  iconImg: _pt.string,
  iconAlt: _pt.string,
  iconClass: _pt.string,
  icon: _pt.node,
  badges: _pt.arrayOf(_pt.node),
  title: _pt.oneOfType([_pt.string, _pt.node]).isRequired,
  vendor: _pt.oneOfType([_pt.string, _pt.node]),
  description: _pt.oneOfType([_pt.string, _pt.node]),
  footer: _pt.oneOfType([_pt.string, _pt.node])
});

_defineProperty(CatalogTile, "defaultProps", {
  id: null,
  className: '',
  featured: false,
  onClick: null,
  href: null,
  iconImg: null,
  iconAlt: '',
  iconClass: '',
  icon: null,
  badges: [],
  vendor: null,
  description: null,
  footer: null
});
//# sourceMappingURL=CatalogTile.js.map