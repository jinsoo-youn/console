import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import * as React from 'react';
import classNames from 'classnames';
import { Button } from '@patternfly/react-core/dist/js/components/Button';
import { default as formStyles } from '@patternfly/react-styles/css/components/Form/form';
import { css } from '@patternfly/react-styles';
import { childrenToArray } from '../../helpers/util';
export const FilterSidePanelCategory = (_ref) => {
  let {
    children = null,
    className = '',
    title = null,
    maxShowCount = 5,
    leeway = 2,
    showAll = false,
    onShowAllToggle = () => null,
    showText = null,
    hideText = null
  } = _ref,
      props = _objectWithoutProperties(_ref, ["children", "className", "title", "maxShowCount", "leeway", "showAll", "onShowAllToggle", "showText", "hideText"]);

  const classes = classNames('filter-panel-pf-category', className);
  const childrenArray = childrenToArray(children);
  const itemCount = childrenArray.length;
  const hiddenCount = itemCount - maxShowCount;
  let shownChildren;
  let showAllToggle = null;

  if (hiddenCount <= leeway || showAll) {
    shownChildren = children;

    if (hiddenCount > leeway) {
      showAllToggle = React.createElement(Button, {
        variant: "link",
        onClick: onShowAllToggle
      }, hideText || 'Show less');
    }
  } else {
    shownChildren = childrenArray.slice(0, maxShowCount);

    if (hiddenCount > leeway) {
      showAllToggle = React.createElement(Button, {
        variant: "link",
        onClick: onShowAllToggle
      }, showText || `Show ${hiddenCount} more`);
    }
  }

  return React.createElement("form", _extends({
    className: classes
  }, props), React.createElement("fieldset", {
    className: `${css(formStyles.formFieldset)} checkbox filter-panel-pf-category-items`
  }, title && React.createElement("legend", {
    className: "filter-panel-pf-category-title"
  }, title), shownChildren, showAllToggle));
};
FilterSidePanelCategory.propTypes = {
  children: _pt.node,
  className: _pt.string,
  title: _pt.oneOfType([_pt.string, _pt.node]),
  maxShowCount: _pt.number,
  leeway: _pt.number,
  showAll: _pt.bool,
  onShowAllToggle: _pt.func,
  showText: _pt.string,
  hideText: _pt.string
};
export default FilterSidePanelCategory;
//# sourceMappingURL=FilterSidePanelCategory.js.map