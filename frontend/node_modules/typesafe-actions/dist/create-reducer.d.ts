import { Reducer, Action, Types } from './type-helpers';
export declare type RootAction = Types extends {
    RootAction: infer T;
} ? T : any;
declare type CreateReducerChainApi<TState, TPrevNotHandledAction extends Action, TRootAction extends Action> = <TType extends TPrevNotHandledAction['type'], THandledTypeAction extends TPrevNotHandledAction extends Action<TType> ? TPrevNotHandledAction : never, TCreator extends (...args: any[]) => TPrevNotHandledAction, THandledCreatorAction extends TPrevNotHandledAction extends ReturnType<TCreator> ? TPrevNotHandledAction : never, THandledAction extends THandledTypeAction extends THandledCreatorAction ? THandledTypeAction : never>(singleOrMultipleCreatorsAndTypes: TType | TType[] | TCreator | TCreator[], reducer: (state: TState, action: THandledAction) => TState) => [Exclude<TPrevNotHandledAction, THandledTypeAction & THandledCreatorAction>] extends [never] ? Reducer<TState, TRootAction> & {
    handlers: Record<TRootAction['type'], (state: TState, action: TRootAction) => TState>;
} : Reducer<TState, TRootAction> & {
    handlers: Record<Exclude<TRootAction, Exclude<TPrevNotHandledAction, THandledTypeAction & THandledCreatorAction>>['type'], (state: TState, action: TRootAction) => TState>;
    handleAction: CreateReducerChainApi<TState, Exclude<TPrevNotHandledAction, THandledTypeAction & THandledCreatorAction>, TRootAction>;
};
declare type GetAction<TAction extends Action, TType extends TAction['type']> = TAction extends Action<TType> ? TAction : never;
declare type InitialHandler<TState, TRootAction extends Action> = {
    [P in TRootAction['type']]?: (state: TState, action: GetAction<TRootAction, P>) => TState;
};
export declare function createReducer<TState, TRootAction extends Action = RootAction>(initialState: TState, initialHandlers?: InitialHandler<TState, TRootAction>): Reducer<TState, TRootAction> & {
    handlers: {
        readonly [x: string]: ((state: TState, action: any) => TState) | undefined;
    };
    readonly handleAction: CreateReducerChainApi<TState, TRootAction, TRootAction>;
};
export {};
