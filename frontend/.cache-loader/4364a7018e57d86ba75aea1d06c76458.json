{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/install-plan.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/install-plan.tsx","mtime":1615298458700},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport { Map as ImmutableMap, Set as ImmutableSet, fromJS } from 'immutable';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport { Button } from '@patternfly/react-core';\nimport { MultiListPage, DetailsPage, Table, TableRow, TableData, } from '@console/internal/components/factory';\nimport { Conditions } from '@console/internal/components/conditions';\nimport { SectionHeading, MsgBox, ResourceLink, ResourceKebab, Kebab, ResourceIcon, navFactory, ResourceSummary, history, HintBlock, } from '@console/internal/components/utils';\nimport { referenceForModel, referenceForOwnerRef, k8sUpdate, apiVersionForReference, } from '@console/internal/module/k8s';\nimport { GreenCheckCircleIcon, Status } from '@console/shared';\nimport { SubscriptionModel, ClusterServiceVersionModel, InstallPlanModel, OperatorGroupModel, CatalogSourceModel, } from '../models';\nimport { InstallPlanApproval } from '../types';\nimport { requireOperatorGroup } from './operator-group';\nimport { installPlanPreviewModal } from './modals/installplan-preview-modal';\nimport { referenceForStepResource } from './index';\nconst tableColumnClasses = [\n    '',\n    '',\n    classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'),\n    classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n    classNames('pf-m-hidden', 'pf-m-visible-on-xl'),\n    Kebab.columnClass,\n];\nconst componentsTableColumnClasses = [\n    '',\n    '',\n    classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'),\n    classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n];\nexport const InstallPlanTableHeader = () => {\n    return [\n        {\n            title: 'Name',\n            sortField: 'metadata.name',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[0] },\n        },\n        {\n            title: 'Namespace',\n            sortField: 'metadata.namespace',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[1] },\n        },\n        {\n            title: 'Status',\n            sortField: 'status.phase',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[2] },\n        },\n        {\n            title: 'Components',\n            props: { className: tableColumnClasses[3] },\n        },\n        {\n            title: 'Subscriptions',\n            props: { className: tableColumnClasses[4] },\n        },\n        {\n            title: '',\n            props: { className: tableColumnClasses[5] },\n        },\n    ];\n};\nInstallPlanTableHeader.displayName = 'InstallPlanTableHeader';\nexport const InstallPlanTableRow = ({ obj, index, key, style }) => {\n    const phaseFor = (phase) => React.createElement(Status, { status: phase });\n    return (React.createElement(TableRow, { id: obj.metadata.uid, index: index, trKey: key, style: style },\n        React.createElement(TableData, { className: tableColumnClasses[0] },\n            React.createElement(ResourceLink, { kind: referenceForModel(InstallPlanModel), namespace: obj.metadata.namespace, name: obj.metadata.name, title: obj.metadata.uid })),\n        React.createElement(TableData, { className: tableColumnClasses[1] },\n            React.createElement(ResourceLink, { kind: \"Namespace\", name: obj.metadata.namespace, title: obj.metadata.namespace, displayName: obj.metadata.namespace })),\n        React.createElement(TableData, { className: tableColumnClasses[2] }, phaseFor(_.get(obj, 'status.phase') || 'Unknown')),\n        React.createElement(TableData, { className: tableColumnClasses[3] },\n            React.createElement(\"ul\", { className: \"list-unstyled\" }, obj.spec.clusterServiceVersionNames.map((csvName) => (React.createElement(\"li\", { key: csvName }, _.get(obj, 'status.phase') === 'Complete' ? (React.createElement(ResourceLink, { kind: referenceForModel(ClusterServiceVersionModel), name: csvName, namespace: obj.metadata.namespace, title: csvName })) : (React.createElement(React.Fragment, null,\n                React.createElement(ResourceIcon, { kind: referenceForModel(ClusterServiceVersionModel) }),\n                csvName))))))),\n        React.createElement(TableData, { className: tableColumnClasses[4] }, (obj.metadata.ownerReferences || [])\n            .filter((ref) => referenceForOwnerRef(ref) === referenceForModel(SubscriptionModel))\n            .map((ref) => (React.createElement(\"ul\", { key: ref.uid, className: \"list-unstyled\" },\n            React.createElement(\"li\", null,\n                React.createElement(ResourceLink, { kind: referenceForModel(SubscriptionModel), name: ref.name, namespace: obj.metadata.namespace, title: ref.uid }))))) || React.createElement(\"span\", { className: \"text-muted\" }, \"None\")),\n        React.createElement(TableData, { className: tableColumnClasses[5] },\n            React.createElement(ResourceKebab, { actions: Kebab.factory.common, kind: referenceForModel(InstallPlanModel), resource: obj }))));\n};\nexport const InstallPlansList = requireOperatorGroup((props) => {\n    const EmptyMsg = () => (React.createElement(MsgBox, { title: \"No Install Plans Found\", detail: \"Install Plans are created automatically by subscriptions or manually using the CLI.\" }));\n    return (React.createElement(Table, Object.assign({}, props, { \"aria-label\": \"Install Plans\", Header: InstallPlanTableHeader, Row: InstallPlanTableRow, EmptyMsg: EmptyMsg })));\n});\nconst getCatalogSources = (installPlan) => _.reduce(_.get(installPlan, 'status.plan') || [], (accumulator, { resource: { sourceName, sourceNamespace } }) => accumulator.add(fromJS({ sourceName, sourceNamespace })), ImmutableSet()).toJS();\nexport const InstallPlansPage = (props) => {\n    const namespace = _.get(props.match, 'params.ns');\n    return (React.createElement(MultiListPage, Object.assign({}, props, { namespace: namespace, resources: [\n            {\n                kind: referenceForModel(InstallPlanModel),\n                namespace,\n                namespaced: true,\n                prop: 'installPlan',\n            },\n            {\n                kind: referenceForModel(OperatorGroupModel),\n                namespace,\n                namespaced: true,\n                prop: 'operatorGroup',\n            },\n        ], flatten: (resources) => _.get(resources.installPlan, 'data', []), title: \"Install Plans\", showTitle: false, ListComponent: InstallPlansList })));\n};\nexport const InstallPlanDetails = ({ obj }) => {\n    var _a;\n    const needsApproval = obj.spec.approval === InstallPlanApproval.Manual && obj.spec.approved === false;\n    return (React.createElement(React.Fragment, null,\n        needsApproval && (React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(HintBlock, { title: \"Review Manual Install Plan\" },\n                React.createElement(\"p\", null, \"Inspect the requirements for the components specified in this install plan before approving.\"),\n                React.createElement(Link, { to: `/k8s/ns/${obj.metadata.namespace}/${referenceForModel(InstallPlanModel)}/${obj.metadata.name}/components` },\n                    React.createElement(Button, { variant: \"primary\" }, \"Preview Install Plan\"))))),\n        React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(SectionHeading, { text: \"Install Plan Details\" }),\n            React.createElement(\"div\", { className: \"co-m-pane__body-group\" },\n                React.createElement(\"div\", { className: \"row\" },\n                    React.createElement(\"div\", { className: \"col-sm-6\" },\n                        React.createElement(ResourceSummary, { resource: obj, showAnnotations: false })),\n                    React.createElement(\"div\", { className: \"col-sm-6\" },\n                        React.createElement(\"dl\", { className: \"co-m-pane__details\" },\n                            React.createElement(\"dt\", null, \"Status\"),\n                            React.createElement(\"dd\", null,\n                                React.createElement(Status, { status: _.get(obj.status, 'phase', 'Unknown') })),\n                            React.createElement(\"dt\", null, \"Components\"),\n                            (obj.spec.clusterServiceVersionNames || []).map((csvName) => (React.createElement(\"dd\", { key: csvName }, obj.status.phase === 'Complete' ? (React.createElement(ResourceLink, { kind: referenceForModel(ClusterServiceVersionModel), name: csvName, namespace: obj.metadata.namespace, title: csvName })) : (React.createElement(React.Fragment, null,\n                                React.createElement(ResourceIcon, { kind: referenceForModel(ClusterServiceVersionModel) }),\n                                csvName))))),\n                            React.createElement(\"dt\", null, \"Catalog Sources\"),\n                            getCatalogSources(obj).map(({ sourceName, sourceNamespace }) => (React.createElement(\"dd\", { key: `${sourceNamespace}-${sourceName}` },\n                                React.createElement(ResourceLink, { kind: referenceForModel(CatalogSourceModel), name: sourceName, namespace: sourceNamespace, title: sourceName }))))))))),\n        React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(SectionHeading, { text: \"Conditions\" }),\n            React.createElement(Conditions, { conditions: (_a = obj.status) === null || _a === void 0 ? void 0 : _a.conditions }))));\n};\nexport class InstallPlanPreview extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            needsApproval: this.props.obj.spec.approval === InstallPlanApproval.Manual &&\n                this.props.obj.spec.approved === false,\n        };\n    }\n    render() {\n        const { obj } = this.props;\n        const subscription = obj.metadata.ownerReferences.find((ref) => referenceForOwnerRef(ref) === referenceForModel(SubscriptionModel));\n        const plan = _.get(obj.status, 'plan') || [];\n        const stepsByCSV = plan\n            .reduce((acc, step) => acc.update(step.resolving, [], (steps) => steps.concat([step])), ImmutableMap())\n            .toArray();\n        const approve = () => k8sUpdate(InstallPlanModel, Object.assign(Object.assign({}, obj), { spec: Object.assign(Object.assign({}, obj.spec), { approved: true }) }))\n            .then(() => this.setState({ needsApproval: false }))\n            .catch((error) => this.setState({ error }));\n        const stepStatus = (status) => (React.createElement(React.Fragment, null,\n            status === 'Present' && React.createElement(GreenCheckCircleIcon, { className: \"co-icon-space-r\" }),\n            status === 'Created' && React.createElement(GreenCheckCircleIcon, { className: \"co-icon-space-r\" }),\n            status));\n        return plan.length > 0 ? (React.createElement(React.Fragment, null,\n            this.state.error && (React.createElement(\"div\", { className: \"co-clusterserviceversion-detail__error-box\" }, this.state.error)),\n            this.state.needsApproval && (React.createElement(\"div\", { className: \"co-m-pane__body\" },\n                React.createElement(HintBlock, { title: \"Review Manual Install Plan\" },\n                    React.createElement(\"p\", null, \"Once approved, the following resources will be created in order to satisfy the requirements for the components specified in the plan. Click the resource name to view the resource in detail.\"),\n                    React.createElement(\"div\", { className: \"pf-c-form\" },\n                        React.createElement(\"div\", { className: \"pf-c-form__actions\" },\n                            React.createElement(Button, { variant: \"primary\", isDisabled: !this.state.needsApproval, onClick: () => approve() }, this.state.needsApproval ? 'Approve' : 'Approved'),\n                            React.createElement(Button, { variant: \"secondary\", isDisabled: false, onClick: () => history.push(`/k8s/ns/${obj.metadata.namespace}/${referenceForModel(SubscriptionModel)}/${subscription.name}?showDelete=true`) }, \"Deny\")))))),\n            stepsByCSV.map((steps) => (React.createElement(\"div\", { key: steps[0].resolving, className: \"co-m-pane__body\" },\n                React.createElement(SectionHeading, { text: steps[0].resolving }),\n                React.createElement(\"div\", { className: \"co-table-container\" },\n                    React.createElement(\"table\", { className: \"pf-c-table pf-m-compact pf-m-border-rows\" },\n                        React.createElement(\"thead\", null,\n                            React.createElement(\"tr\", null,\n                                React.createElement(\"th\", { className: componentsTableColumnClasses[0] }, \"Name\"),\n                                React.createElement(\"th\", { className: componentsTableColumnClasses[1] }, \"Kind\"),\n                                React.createElement(\"th\", { className: componentsTableColumnClasses[2] }, \"Status\"),\n                                React.createElement(\"th\", { className: componentsTableColumnClasses[3] }, \"API Version\"))),\n                        React.createElement(\"tbody\", null, steps.map((step) => (React.createElement(\"tr\", { key: `${referenceForStepResource(step.resource)}-${step.resource.name}` },\n                            React.createElement(\"td\", { className: componentsTableColumnClasses[0] }, ['Present', 'Created'].includes(step.status) ? (React.createElement(ResourceLink, { kind: referenceForStepResource(step.resource), namespace: obj.metadata.namespace, name: step.resource.name, title: step.resource.name })) : (React.createElement(React.Fragment, null,\n                                React.createElement(ResourceIcon, { kind: referenceForStepResource(step.resource) }),\n                                React.createElement(Button, { type: \"button\", onClick: () => installPlanPreviewModal({ stepResource: step.resource }), variant: \"link\" }, step.resource.name)))),\n                            React.createElement(\"td\", { className: componentsTableColumnClasses[1] }, step.resource.kind),\n                            React.createElement(\"td\", { className: componentsTableColumnClasses[2] }, stepStatus(step.status)),\n                            React.createElement(\"td\", { className: componentsTableColumnClasses[3] }, apiVersionForReference(referenceForStepResource(step.resource)))))))))))))) : (React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(MsgBox, { title: \"No Components Resolved\", detail: \"This install plan has not been fully resolved yet.\" })));\n    }\n}\nexport const InstallPlanDetailsPage = (props) => (React.createElement(DetailsPage, Object.assign({}, props, { namespace: props.match.params.ns, kind: referenceForModel(InstallPlanModel), name: props.match.params.name, pages: [\n        navFactory.details(InstallPlanDetails),\n        navFactory.editYaml(),\n        { href: 'components', name: 'Components', component: InstallPlanPreview },\n    ], menuActions: [...Kebab.getExtensionsActionsForKind(InstallPlanModel), ...Kebab.factory.common] })));\nInstallPlansList.displayName = 'InstallPlansList';\nInstallPlansPage.displayName = 'InstallPlansPage';\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/install-plan.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/install-plan.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { match, Link } from 'react-router-dom';\nimport { Map as ImmutableMap, Set as ImmutableSet, fromJS } from 'immutable';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport { Button } from '@patternfly/react-core';\nimport {\n  MultiListPage,\n  DetailsPage,\n  Table,\n  TableRow,\n  TableData,\n  RowFunction,\n} from '@console/internal/components/factory';\nimport { Conditions } from '@console/internal/components/conditions';\nimport {\n  SectionHeading,\n  MsgBox,\n  ResourceLink,\n  ResourceKebab,\n  Kebab,\n  ResourceIcon,\n  navFactory,\n  ResourceSummary,\n  history,\n  HintBlock,\n} from '@console/internal/components/utils';\nimport {\n  K8sResourceKind,\n  referenceForModel,\n  referenceForOwnerRef,\n  k8sUpdate,\n  apiVersionForReference,\n} from '@console/internal/module/k8s';\nimport { GreenCheckCircleIcon, Status } from '@console/shared';\nimport {\n  SubscriptionModel,\n  ClusterServiceVersionModel,\n  InstallPlanModel,\n  OperatorGroupModel,\n  CatalogSourceModel,\n} from '../models';\nimport { InstallPlanKind, InstallPlanApproval, Step } from '../types';\nimport { requireOperatorGroup } from './operator-group';\nimport { installPlanPreviewModal } from './modals/installplan-preview-modal';\nimport { referenceForStepResource } from './index';\n\nconst tableColumnClasses = [\n  '',\n  '',\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'),\n  Kebab.columnClass,\n];\n\nconst componentsTableColumnClasses = [\n  '',\n  '',\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n];\n\nexport const InstallPlanTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Status',\n      sortField: 'status.phase',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Components',\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: 'Subscriptions',\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[5] },\n    },\n  ];\n};\nInstallPlanTableHeader.displayName = 'InstallPlanTableHeader';\n\nexport const InstallPlanTableRow: RowFunction<K8sResourceKind> = ({ obj, index, key, style }) => {\n  const phaseFor = (phase: InstallPlanKind['status']['phase']) => <Status status={phase} />;\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      {/* Name */}\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={referenceForModel(InstallPlanModel)}\n          namespace={obj.metadata.namespace}\n          name={obj.metadata.name}\n          title={obj.metadata.uid}\n        />\n      </TableData>\n\n      {/* Namespace */}\n      <TableData className={tableColumnClasses[1]}>\n        <ResourceLink\n          kind=\"Namespace\"\n          name={obj.metadata.namespace}\n          title={obj.metadata.namespace}\n          displayName={obj.metadata.namespace}\n        />\n      </TableData>\n\n      {/* Status */}\n      <TableData className={tableColumnClasses[2]}>\n        {phaseFor(_.get(obj, 'status.phase') || 'Unknown')}\n      </TableData>\n\n      {/* Components */}\n      <TableData className={tableColumnClasses[3]}>\n        <ul className=\"list-unstyled\">\n          {obj.spec.clusterServiceVersionNames.map((csvName) => (\n            <li key={csvName}>\n              {_.get(obj, 'status.phase') === 'Complete' ? (\n                <ResourceLink\n                  kind={referenceForModel(ClusterServiceVersionModel)}\n                  name={csvName}\n                  namespace={obj.metadata.namespace}\n                  title={csvName}\n                />\n              ) : (\n                <>\n                  <ResourceIcon kind={referenceForModel(ClusterServiceVersionModel)} />\n                  {csvName}\n                </>\n              )}\n            </li>\n          ))}\n        </ul>\n      </TableData>\n\n      {/* Subscriptions */}\n      <TableData className={tableColumnClasses[4]}>\n        {(obj.metadata.ownerReferences || [])\n          .filter((ref) => referenceForOwnerRef(ref) === referenceForModel(SubscriptionModel))\n          .map((ref) => (\n            <ul key={ref.uid} className=\"list-unstyled\">\n              <li>\n                <ResourceLink\n                  kind={referenceForModel(SubscriptionModel)}\n                  name={ref.name}\n                  namespace={obj.metadata.namespace}\n                  title={ref.uid}\n                />\n              </li>\n            </ul>\n          )) || <span className=\"text-muted\">None</span>}\n      </TableData>\n\n      {/* Kebab */}\n      <TableData className={tableColumnClasses[5]}>\n        <ResourceKebab\n          actions={Kebab.factory.common}\n          kind={referenceForModel(InstallPlanModel)}\n          resource={obj}\n        />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport const InstallPlansList = requireOperatorGroup((props: InstallPlansListProps) => {\n  const EmptyMsg = () => (\n    <MsgBox\n      title=\"No Install Plans Found\"\n      detail=\"Install Plans are created automatically by subscriptions or manually using the CLI.\"\n    />\n  );\n  return (\n    <Table\n      {...props}\n      aria-label=\"Install Plans\"\n      Header={InstallPlanTableHeader}\n      Row={InstallPlanTableRow}\n      EmptyMsg={EmptyMsg}\n    />\n  );\n});\n\nconst getCatalogSources = (\n  installPlan: InstallPlanKind,\n): { sourceName: string; sourceNamespace: string }[] =>\n  _.reduce(\n    _.get(installPlan, 'status.plan') || [],\n    (accumulator, { resource: { sourceName, sourceNamespace } }) =>\n      accumulator.add(fromJS({ sourceName, sourceNamespace })),\n    ImmutableSet(),\n  ).toJS();\n\nexport const InstallPlansPage: React.SFC<InstallPlansPageProps> = (props) => {\n  const namespace = _.get(props.match, 'params.ns');\n  return (\n    <MultiListPage\n      {...props}\n      namespace={namespace}\n      resources={[\n        {\n          kind: referenceForModel(InstallPlanModel),\n          namespace,\n          namespaced: true,\n          prop: 'installPlan',\n        },\n        {\n          kind: referenceForModel(OperatorGroupModel),\n          namespace,\n          namespaced: true,\n          prop: 'operatorGroup',\n        },\n      ]}\n      flatten={(resources) => _.get(resources.installPlan, 'data', [])}\n      title=\"Install Plans\"\n      showTitle={false}\n      ListComponent={InstallPlansList}\n    />\n  );\n};\n\nexport const InstallPlanDetails: React.SFC<InstallPlanDetailsProps> = ({ obj }) => {\n  const needsApproval =\n    obj.spec.approval === InstallPlanApproval.Manual && obj.spec.approved === false;\n\n  return (\n    <>\n      {needsApproval && (\n        <div className=\"co-m-pane__body\">\n          <HintBlock title=\"Review Manual Install Plan\">\n            <p>\n              Inspect the requirements for the components specified in this install plan before\n              approving.\n            </p>\n            <Link\n              to={`/k8s/ns/${obj.metadata.namespace}/${referenceForModel(InstallPlanModel)}/${\n                obj.metadata.name\n              }/components`}\n            >\n              <Button variant=\"primary\">Preview Install Plan</Button>\n            </Link>\n          </HintBlock>\n        </div>\n      )}\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Install Plan Details\" />\n        <div className=\"co-m-pane__body-group\">\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <ResourceSummary resource={obj} showAnnotations={false} />\n            </div>\n            <div className=\"col-sm-6\">\n              <dl className=\"co-m-pane__details\">\n                <dt>Status</dt>\n                <dd>\n                  <Status status={_.get(obj.status, 'phase', 'Unknown')} />\n                </dd>\n                <dt>Components</dt>\n                {(obj.spec.clusterServiceVersionNames || []).map((csvName) => (\n                  <dd key={csvName}>\n                    {obj.status.phase === 'Complete' ? (\n                      <ResourceLink\n                        kind={referenceForModel(ClusterServiceVersionModel)}\n                        name={csvName}\n                        namespace={obj.metadata.namespace}\n                        title={csvName}\n                      />\n                    ) : (\n                      <>\n                        <ResourceIcon kind={referenceForModel(ClusterServiceVersionModel)} />\n                        {csvName}\n                      </>\n                    )}\n                  </dd>\n                ))}\n                <dt>Catalog Sources</dt>\n                {getCatalogSources(obj).map(({ sourceName, sourceNamespace }) => (\n                  <dd key={`${sourceNamespace}-${sourceName}`}>\n                    <ResourceLink\n                      kind={referenceForModel(CatalogSourceModel)}\n                      name={sourceName}\n                      namespace={sourceNamespace}\n                      title={sourceName}\n                    />\n                  </dd>\n                ))}\n              </dl>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Conditions\" />\n        <Conditions conditions={obj.status?.conditions} />\n      </div>\n    </>\n  );\n};\n\nexport class InstallPlanPreview extends React.Component<\n  InstallPlanPreviewProps,\n  InstallPlanPreviewState\n> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      needsApproval:\n        this.props.obj.spec.approval === InstallPlanApproval.Manual &&\n        this.props.obj.spec.approved === false,\n    };\n  }\n\n  render() {\n    const { obj } = this.props;\n    const subscription = obj.metadata.ownerReferences.find(\n      (ref) => referenceForOwnerRef(ref) === referenceForModel(SubscriptionModel),\n    );\n\n    const plan = _.get(obj.status, 'plan') || [];\n    const stepsByCSV = plan\n      .reduce(\n        (acc, step) => acc.update(step.resolving, [], (steps) => steps.concat([step])),\n        ImmutableMap<string, Step[]>(),\n      )\n      .toArray();\n\n    const approve = () =>\n      k8sUpdate(InstallPlanModel, { ...obj, spec: { ...obj.spec, approved: true } })\n        .then(() => this.setState({ needsApproval: false }))\n        .catch((error) => this.setState({ error }));\n\n    const stepStatus = (status: Step['status']) => (\n      <>\n        {status === 'Present' && <GreenCheckCircleIcon className=\"co-icon-space-r\" />}\n        {status === 'Created' && <GreenCheckCircleIcon className=\"co-icon-space-r\" />}\n        {status}\n      </>\n    );\n\n    return plan.length > 0 ? (\n      <>\n        {this.state.error && (\n          <div className=\"co-clusterserviceversion-detail__error-box\">{this.state.error}</div>\n        )}\n        {this.state.needsApproval && (\n          <div className=\"co-m-pane__body\">\n            <HintBlock title=\"Review Manual Install Plan\">\n              <p>\n                Once approved, the following resources will be created in order to satisfy the\n                requirements for the components specified in the plan. Click the resource name to\n                view the resource in detail.\n              </p>\n              <div className=\"pf-c-form\">\n                <div className=\"pf-c-form__actions\">\n                  <Button\n                    variant=\"primary\"\n                    isDisabled={!this.state.needsApproval}\n                    onClick={() => approve()}\n                  >\n                    {this.state.needsApproval ? 'Approve' : 'Approved'}\n                  </Button>\n                  <Button\n                    variant=\"secondary\"\n                    isDisabled={false}\n                    onClick={() =>\n                      history.push(\n                        `/k8s/ns/${obj.metadata.namespace}/${referenceForModel(\n                          SubscriptionModel,\n                        )}/${subscription.name}?showDelete=true`,\n                      )\n                    }\n                  >\n                    Deny\n                  </Button>\n                </div>\n              </div>\n            </HintBlock>\n          </div>\n        )}\n        {stepsByCSV.map((steps) => (\n          <div key={steps[0].resolving} className=\"co-m-pane__body\">\n            <SectionHeading text={steps[0].resolving} />\n            <div className=\"co-table-container\">\n              <table className=\"pf-c-table pf-m-compact pf-m-border-rows\">\n                <thead>\n                  <tr>\n                    <th className={componentsTableColumnClasses[0]}>Name</th>\n                    <th className={componentsTableColumnClasses[1]}>Kind</th>\n                    <th className={componentsTableColumnClasses[2]}>Status</th>\n                    <th className={componentsTableColumnClasses[3]}>API Version</th>\n                  </tr>\n                </thead>\n                <tbody>\n                  {steps.map((step) => (\n                    <tr key={`${referenceForStepResource(step.resource)}-${step.resource.name}`}>\n                      <td className={componentsTableColumnClasses[0]}>\n                        {['Present', 'Created'].includes(step.status) ? (\n                          <ResourceLink\n                            kind={referenceForStepResource(step.resource)}\n                            namespace={obj.metadata.namespace}\n                            name={step.resource.name}\n                            title={step.resource.name}\n                          />\n                        ) : (\n                          <>\n                            <ResourceIcon kind={referenceForStepResource(step.resource)} />\n                            <Button\n                              type=\"button\"\n                              onClick={() =>\n                                installPlanPreviewModal({ stepResource: step.resource })\n                              }\n                              variant=\"link\"\n                            >\n                              {step.resource.name}\n                            </Button>\n                          </>\n                        )}\n                      </td>\n                      <td className={componentsTableColumnClasses[1]}>{step.resource.kind}</td>\n                      <td className={componentsTableColumnClasses[2]}>{stepStatus(step.status)}</td>\n                      <td className={componentsTableColumnClasses[3]}>\n                        {apiVersionForReference(referenceForStepResource(step.resource))}\n                      </td>\n                    </tr>\n                  ))}\n                </tbody>\n              </table>\n            </div>\n          </div>\n        ))}\n      </>\n    ) : (\n      <div className=\"co-m-pane__body\">\n        <MsgBox\n          title=\"No Components Resolved\"\n          detail=\"This install plan has not been fully resolved yet.\"\n        />\n      </div>\n    );\n  }\n}\n\nexport const InstallPlanDetailsPage: React.SFC<InstallPlanDetailsPageProps> = (props) => (\n  <DetailsPage\n    {...props}\n    namespace={props.match.params.ns}\n    kind={referenceForModel(InstallPlanModel)}\n    name={props.match.params.name}\n    pages={[\n      navFactory.details(InstallPlanDetails),\n      navFactory.editYaml(),\n      { href: 'components', name: 'Components', component: InstallPlanPreview },\n    ]}\n    menuActions={[...Kebab.getExtensionsActionsForKind(InstallPlanModel), ...Kebab.factory.common]}\n  />\n);\n\nexport type InstallPlansListProps = {};\n\nexport type InstallPlansPageProps = {\n  namespace?: string;\n  match?: match<{ ns?: string }>;\n};\n\nexport type InstallPlanDetailsProps = {\n  obj: InstallPlanKind;\n};\n\nexport type InstallPlanDetailsPageProps = {\n  match: match<{ ns: string; name: string }>;\n};\n\nexport type InstallPlanPreviewProps = {\n  obj: InstallPlanKind;\n};\n\nexport type InstallPlanPreviewState = {\n  needsApproval: boolean;\n  error?: string;\n};\n\nInstallPlansList.displayName = 'InstallPlansList';\nInstallPlansPage.displayName = 'InstallPlansPage';\n"]}]}