{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-builder/task-sidebar/TaskSidebarResource.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-builder/task-sidebar/TaskSidebarResource.tsx","mtime":1615298458620},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { FormGroup } from '@patternfly/react-core';\nimport { Dropdown } from '@console/internal/components/utils';\nimport { SidebarInputWrapper } from './temp-utils';\nconst TaskSidebarResource = (props) => {\n    const { availableResources, onChange, resource, taskResource } = props;\n    const dropdownResources = availableResources.filter(({ name, type }) => resource.type === type && !!name);\n    return (React.createElement(FormGroup, { fieldId: resource.name, label: resource.name, helperText: `Only showing resources for this type (${resource.type}).`, helperTextInvalid: dropdownResources.length === 0 ? `No resources available. Add pipeline resources.` : '', validated: dropdownResources.length > 0 ? 'default' : 'error', isRequired: !(resource === null || resource === void 0 ? void 0 : resource.optional) },\n        React.createElement(SidebarInputWrapper, null,\n            React.createElement(Dropdown, { title: `Select ${resource.type} resource...`, items: dropdownResources.reduce((acc, { name }) => (Object.assign(Object.assign({}, acc), { [name]: name })), {}), disabled: dropdownResources.length === 0, selectedKey: (taskResource === null || taskResource === void 0 ? void 0 : taskResource.resource) || '', dropDownClassName: \"dropdown--full-width\", onChange: (value) => {\n                    onChange(resource.name, dropdownResources.find(({ name }) => name === value));\n                } }))));\n};\nexport default TaskSidebarResource;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-builder/task-sidebar/TaskSidebarResource.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-builder/task-sidebar/TaskSidebarResource.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AACnD,OAAO,EAAE,QAAQ,EAAE,MAAM,oCAAoC,CAAC;AAM9D,OAAO,EAAE,mBAAmB,EAAE,MAAM,cAAc,CAAC;AASnD,MAAM,mBAAmB,GAAuC,CAAC,KAAK,EAAE,EAAE;IACxE,MAAM,EAAE,kBAAkB,EAAE,QAAQ,EAAE,QAAQ,EAAE,YAAY,EAAE,GAAG,KAAK,CAAC;IAEvE,MAAM,iBAAiB,GAAG,kBAAkB,CAAC,MAAM,CACjD,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,KAAK,IAAI,IAAI,CAAC,CAAC,IAAI,CACrD,CAAC;IAEF,OAAO,CACL,oBAAC,SAAS,IACR,OAAO,EAAE,QAAQ,CAAC,IAAI,EACtB,KAAK,EAAE,QAAQ,CAAC,IAAI,EACpB,UAAU,EAAE,yCAAyC,QAAQ,CAAC,IAAI,IAAI,EACtE,iBAAiB,EACf,iBAAiB,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,iDAAiD,CAAC,CAAC,CAAC,EAAE,EAEzF,SAAS,EAAE,iBAAiB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,EAC7D,UAAU,EAAE,EAAC,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,QAAQ,CAAA;QAE/B,oBAAC,mBAAmB;YAClB,oBAAC,QAAQ,IACP,KAAK,EAAE,UAAU,QAAQ,CAAC,IAAI,cAAc,EAC5C,KAAK,EAAE,iBAAiB,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,iCAAM,GAAG,KAAE,CAAC,IAAI,CAAC,EAAE,IAAI,IAAG,EAAE,EAAE,CAAC,EAClF,QAAQ,EAAE,iBAAiB,CAAC,MAAM,KAAK,CAAC,EACxC,WAAW,EAAE,CAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,QAAQ,KAAI,EAAE,EACzC,iBAAiB,EAAC,sBAAsB,EACxC,QAAQ,EAAE,CAAC,KAAa,EAAE,EAAE;oBAC1B,QAAQ,CACN,QAAQ,CAAC,IAAI,EACb,iBAAiB,CAAC,IAAI,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,IAAI,KAAK,KAAK,CAAC,CACrD,CAAC;gBACJ,CAAC,GACD,CACkB,CACZ,CACb,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,mBAAmB,CAAC","sourcesContent":["import * as React from 'react';\nimport { FormGroup } from '@patternfly/react-core';\nimport { Dropdown } from '@console/internal/components/utils';\nimport {\n  PipelineResource,\n  PipelineResourceTaskResource,\n  PipelineTaskResource,\n} from '../../../../utils/pipeline-augment';\nimport { SidebarInputWrapper } from './temp-utils';\n\ntype TaskSidebarResourceProps = {\n  availableResources: PipelineResource[];\n  onChange: (resourceName: string, resource: PipelineResource) => void;\n  resource: PipelineResourceTaskResource;\n  taskResource?: PipelineTaskResource;\n};\n\nconst TaskSidebarResource: React.FC<TaskSidebarResourceProps> = (props) => {\n  const { availableResources, onChange, resource, taskResource } = props;\n\n  const dropdownResources = availableResources.filter(\n    ({ name, type }) => resource.type === type && !!name,\n  );\n\n  return (\n    <FormGroup\n      fieldId={resource.name}\n      label={resource.name}\n      helperText={`Only showing resources for this type (${resource.type}).`}\n      helperTextInvalid={\n        dropdownResources.length === 0 ? `No resources available. Add pipeline resources.` : ''\n      }\n      validated={dropdownResources.length > 0 ? 'default' : 'error'}\n      isRequired={!resource?.optional}\n    >\n      <SidebarInputWrapper>\n        <Dropdown\n          title={`Select ${resource.type} resource...`}\n          items={dropdownResources.reduce((acc, { name }) => ({ ...acc, [name]: name }), {})}\n          disabled={dropdownResources.length === 0}\n          selectedKey={taskResource?.resource || ''}\n          dropDownClassName=\"dropdown--full-width\"\n          onChange={(value: string) => {\n            onChange(\n              resource.name,\n              dropdownResources.find(({ name }) => name === value),\n            );\n          }}\n        />\n      </SidebarInputWrapper>\n    </FormGroup>\n  );\n};\n\nexport default TaskSidebarResource;\n"]}]}