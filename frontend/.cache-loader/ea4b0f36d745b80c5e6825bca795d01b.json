{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/common/PipelineSecretSection.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/common/PipelineSecretSection.tsx","mtime":1616735742390},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { Formik, useField, useFormikContext } from 'formik';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { Button } from '@patternfly/react-core';\nimport { ExpandCollapse } from '@console/internal/components/utils';\nimport { SecretType } from '@console/internal/components/secrets/create-secret';\nimport { SecretModel } from '@console/internal/models';\nimport { k8sCreate } from '@console/internal/module/k8s';\nimport { associateServiceAccountToSecret, getSecretAnnotations, } from '../../../../utils/pipeline-utils';\nimport { SecretAnnotationId } from '../../const';\nimport { advancedSectionValidationSchema } from './validation-utils';\nimport SecretForm from './SecretForm';\nimport SecretsList from './SecretsList';\nimport './PipelineSecretSection.scss';\nconst initialValues = {\n    secretName: '',\n    annotations: { key: SecretAnnotationId.Image, value: '' },\n    type: SecretType.dockerconfigjson,\n    formData: {},\n};\nconst PipelineSecretSection = ({ namespace }) => {\n    const [secretOpenField] = useField('secretOpen');\n    const { setFieldValue } = useFormikContext();\n    const handleSubmit = (values, actions) => {\n        actions.setSubmitting(true);\n        const newSecret = {\n            apiVersion: SecretModel.apiVersion,\n            kind: SecretModel.kind,\n            metadata: {\n                name: values.secretName,\n                namespace,\n                annotations: getSecretAnnotations(values.annotations),\n            },\n            type: values.type,\n            stringData: values.formData,\n        };\n        k8sCreate(SecretModel, newSecret)\n            .then((resp) => {\n            actions.setSubmitting(false);\n            setFieldValue(secretOpenField.name, false);\n            associateServiceAccountToSecret(resp, namespace);\n        })\n            .catch((err) => {\n            actions.setSubmitting(false);\n            setFieldValue(secretOpenField.name, false);\n            actions.setStatus({ submitError: err.message });\n        });\n    };\n    const handleReset = (values, actions) => {\n        actions.resetForm({ values: initialValues, status: {} });\n        setFieldValue(secretOpenField.name, false);\n    };\n    return (React.createElement(ExpandCollapse, { textExpanded: \"Hide Credential Options\", textCollapsed: \"Show Credential Options\" },\n        React.createElement(\"div\", { className: \"odc-pipeline-secret-section\" },\n            React.createElement(\"p\", null, \"The following secrets are available for all pipelines in this namespace to authenticate to the specified git server or docker registry:\"),\n            React.createElement(\"div\", { className: \"odc-pipeline-secret-section__secrets\" },\n                React.createElement(SecretsList, { namespace: namespace }),\n                secretOpenField.value ? (React.createElement(\"div\", { className: \"odc-pipeline-secret-section__secret-form\" },\n                    React.createElement(Formik, { initialValues: initialValues, validationSchema: advancedSectionValidationSchema, onSubmit: handleSubmit, onReset: handleReset }, (props) => React.createElement(SecretForm, Object.assign({}, props))))) : (React.createElement(Button, { variant: \"link\", onClick: () => {\n                        setFieldValue(secretOpenField.name, true);\n                    }, className: \"odc-pipeline-secret-section__secret-action\", icon: React.createElement(PlusCircleIcon, null) }, \"Add Secret\"))))));\n};\nexport default PipelineSecretSection;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/common/PipelineSecretSection.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/common/PipelineSecretSection.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Formik, useField, useFormikContext, FormikValues } from 'formik';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { Button } from '@patternfly/react-core';\nimport { ExpandCollapse } from '@console/internal/components/utils';\nimport { SecretType } from '@console/internal/components/secrets/create-secret';\nimport { SecretModel } from '@console/internal/models';\nimport { k8sCreate } from '@console/internal/module/k8s';\nimport {\n  associateServiceAccountToSecret,\n  getSecretAnnotations,\n} from '../../../../utils/pipeline-utils';\nimport { SecretAnnotationId } from '../../const';\nimport { advancedSectionValidationSchema } from './validation-utils';\nimport SecretForm from './SecretForm';\nimport SecretsList from './SecretsList';\n\nimport './PipelineSecretSection.scss';\n\nconst initialValues = {\n  secretName: '',\n  annotations: { key: SecretAnnotationId.Image, value: '' },\n  type: SecretType.dockerconfigjson,\n  formData: {},\n};\n\ntype PipelineSecretSectionProps = {\n  namespace: string;\n};\n\nconst PipelineSecretSection: React.FC<PipelineSecretSectionProps> = ({ namespace }) => {\n  const [secretOpenField] = useField<boolean>('secretOpen');\n  const { setFieldValue } = useFormikContext<FormikValues>();\n\n  const handleSubmit = (values, actions) => {\n    actions.setSubmitting(true);\n    const newSecret = {\n      apiVersion: SecretModel.apiVersion,\n      kind: SecretModel.kind,\n      metadata: {\n        name: values.secretName,\n        namespace,\n        annotations: getSecretAnnotations(values.annotations),\n      },\n      type: values.type,\n      stringData: values.formData,\n    };\n    k8sCreate(SecretModel, newSecret)\n      .then((resp) => {\n        actions.setSubmitting(false);\n        setFieldValue(secretOpenField.name, false);\n        associateServiceAccountToSecret(resp, namespace);\n      })\n      .catch((err) => {\n        actions.setSubmitting(false);\n        setFieldValue(secretOpenField.name, false);\n        actions.setStatus({ submitError: err.message });\n      });\n  };\n\n  const handleReset = (values, actions) => {\n    actions.resetForm({ values: initialValues, status: {} });\n    setFieldValue(secretOpenField.name, false);\n  };\n\n  return (\n    <ExpandCollapse textExpanded=\"Hide Credential Options\" textCollapsed=\"Show Credential Options\">\n      <div className=\"odc-pipeline-secret-section\">\n        <p>\n          The following secrets are available for all pipelines in this namespace to authenticate to\n          the specified git server or docker registry:\n        </p>\n        <div className=\"odc-pipeline-secret-section__secrets\">\n          <SecretsList namespace={namespace} />\n          {secretOpenField.value ? (\n            <div className=\"odc-pipeline-secret-section__secret-form\">\n              <Formik\n                initialValues={initialValues}\n                validationSchema={advancedSectionValidationSchema}\n                onSubmit={handleSubmit}\n                onReset={handleReset}\n              >\n                {(props) => <SecretForm {...props} />}\n              </Formik>\n            </div>\n          ) : (\n            <Button\n              variant=\"link\"\n              onClick={() => {\n                setFieldValue(secretOpenField.name, true);\n              }}\n              className=\"odc-pipeline-secret-section__secret-action\"\n              icon={<PlusCircleIcon />}\n            >\n              Add Secret\n            </Button>\n          )}\n        </div>\n      </div>\n    </ExpandCollapse>\n  );\n};\n\nexport default PipelineSecretSection;\n"]}]}