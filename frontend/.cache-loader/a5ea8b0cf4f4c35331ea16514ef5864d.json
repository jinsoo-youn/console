{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/receiver-forms/email-receiver-form.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/receiver-forms/email-receiver-form.tsx","mtime":1615298458740},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["/* eslint-disable camelcase */\nimport * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { SectionHeading, ExpandCollapse } from '../../utils';\nimport { SaveAsDefaultCheckbox, SendResolvedAlertsCheckbox, } from './alert-manager-receiver-forms';\nconst SMTP_GLOBAL_FIELDS = [\n    'smtp_from',\n    'smtp_smarthost',\n    'smtp_hello',\n    'smtp_auth_username',\n    'smtp_auth_password',\n    'smtp_auth_identity',\n    'smtp_auth_secret',\n    'smtp_require_tls',\n];\nconst GLOBAL_FIELDS = [...SMTP_GLOBAL_FIELDS, 'email_send_resolved', 'email_html'];\nexport const Form = ({ globals, formValues, dispatchFormChange }) => {\n    // disable saveAsDefault if all SMTP form fields match global values\n    const disableSaveAsDefault = SMTP_GLOBAL_FIELDS.every((propName) => formValues[propName] === globals[propName]);\n    return (React.createElement(\"div\", { \"data-test-id\": \"email-receiver-form\" },\n        React.createElement(\"div\", { className: \"form-group\" },\n            React.createElement(\"label\", { className: \"control-label co-required\", htmlFor: \"email-to\" }, \"To Address\"),\n            React.createElement(\"input\", { className: \"pf-c-form-control\", type: \"text\", \"aria-describedby\": \"email-to-help\", id: \"email-to\", \"data-test-id\": \"email-to\", value: formValues.emailTo, onChange: (e) => dispatchFormChange({\n                    type: 'setFormValues',\n                    payload: { emailTo: e.target.value },\n                }) }),\n            React.createElement(\"div\", { className: \"help-block\", id: \"email-to-help\" }, \"The email address to send notifications to.\")),\n        React.createElement(\"div\", { className: \"form-group\" },\n            React.createElement(\"div\", { className: \"co-m-pane__body--section-heading\" },\n                React.createElement(\"div\", { className: \"row\" },\n                    React.createElement(\"div\", { className: \"col-sm-6\" },\n                        React.createElement(SectionHeading, { text: \"SMTP Configuration\" })),\n                    React.createElement(\"div\", { className: \"col-sm-6\" },\n                        React.createElement(SaveAsDefaultCheckbox, { formField: \"emailSaveAsDefault\", disabled: disableSaveAsDefault, label: \"Save as default SMTP configuration\", formValues: formValues, dispatchFormChange: dispatchFormChange, tooltip: \"Checking this box will write these values to the global section of the\\n                configuration file where they will become defaults for future email receivers.\" }))),\n                React.createElement(\"div\", { className: \"form-group\" },\n                    React.createElement(\"label\", { className: \"control-label co-required\", htmlFor: \"email-from\" }, \"From Address\"),\n                    React.createElement(\"input\", { className: \"pf-c-form-control\", type: \"text\", \"aria-describedby\": \"email-from-help\", id: \"email-from\", \"data-test-id\": \"email-from\", value: formValues.smtp_from, onChange: (e) => dispatchFormChange({\n                            type: 'setFormValues',\n                            payload: { smtp_from: e.target.value },\n                        }) }),\n                    React.createElement(\"div\", { className: \"help-block\", id: \"email-from-help\" }, \"The email address to send notifications from.\")),\n                React.createElement(\"div\", { className: \"row\" },\n                    React.createElement(\"div\", { className: \"col-sm-6\" },\n                        React.createElement(\"div\", { className: \"form-group\" },\n                            React.createElement(\"label\", { className: \"control-label co-required\", htmlFor: \"email-smarthost\" }, \"SMTP Smarthost\"),\n                            React.createElement(\"input\", { className: \"pf-c-form-control\", type: \"text\", \"aria-describedby\": \"email-smarthost-help\", id: \"email-smarthost\", \"data-test-id\": \"email-smarthost\", value: formValues.smtp_smarthost, onChange: (e) => dispatchFormChange({\n                                    type: 'setFormValues',\n                                    payload: { smtp_smarthost: e.target.value },\n                                }) }),\n                            React.createElement(\"div\", { className: \"help-block\", id: \"email-smarthost-help\" }, \"Smarthost used for sending emails, including port number.\"))),\n                    React.createElement(\"div\", { className: \"col-sm-6\" },\n                        React.createElement(\"div\", { className: \"form-group\" },\n                            React.createElement(\"label\", { className: \"control-label co-required\", htmlFor: \"email-hello\" }, \"SMTP Hello\"),\n                            React.createElement(\"input\", { className: \"pf-c-form-control\", type: \"text\", \"aria-describedby\": \"email-hello-help\", id: \"email-hello\", \"data-test-id\": \"email-hello\", value: formValues.smtp_hello, onChange: (e) => dispatchFormChange({\n                                    type: 'setFormValues',\n                                    payload: { smtp_hello: e.target.value },\n                                }) }),\n                            React.createElement(\"div\", { className: \"help-block\", id: \"email-hello-help\" }, \"The hostname to identify to the SMTP server.\")))),\n                React.createElement(\"div\", { className: \"row\" },\n                    React.createElement(\"div\", { className: \"col-sm-6\" },\n                        React.createElement(\"div\", { className: \"form-group\" },\n                            React.createElement(\"label\", { className: \"control-label\", htmlFor: \"email-auth-username\" }, \"Auth Username\"),\n                            React.createElement(\"input\", { className: \"pf-c-form-control\", type: \"text\", id: \"email-auth-username\", \"data-test-id\": \"email-auth-username\", value: formValues.smtp_auth_username, onChange: (e) => dispatchFormChange({\n                                    type: 'setFormValues',\n                                    payload: { smtp_auth_username: e.target.value },\n                                }) }))),\n                    React.createElement(\"div\", { className: \"col-sm-6\" },\n                        React.createElement(\"div\", { className: \"form-group\" },\n                            React.createElement(\"label\", { className: \"control-label\", htmlFor: \"email-auth-password\" }, \"Auth Password (Using LOGIN and PLAIN)\"),\n                            React.createElement(\"input\", { className: \"pf-c-form-control\", type: \"password\", id: \"email-auth-password\", \"data-test-id\": \"email-auth-password\", value: formValues.smtp_auth_password, onChange: (e) => dispatchFormChange({\n                                    type: 'setFormValues',\n                                    payload: { smtp_auth_password: e.target.value },\n                                }) })))),\n                React.createElement(\"div\", { className: \"row\" },\n                    React.createElement(\"div\", { className: \"col-sm-6\" },\n                        React.createElement(\"div\", { className: \"form-group\" },\n                            React.createElement(\"label\", { className: \"control-label\", htmlFor: \"email-auth-identity\" }, \"Auth Identity (Using PLAIN)\"),\n                            React.createElement(\"input\", { className: \"pf-c-form-control\", type: \"text\", id: \"email-auth-identity\", \"data-test-id\": \"email-auth-identity\", value: formValues.smtp_auth_identity, onChange: (e) => dispatchFormChange({\n                                    type: 'setFormValues',\n                                    payload: { smtp_auth_identity: e.target.value },\n                                }) }))),\n                    React.createElement(\"div\", { className: \"col-sm-6\" },\n                        React.createElement(\"div\", { className: \"form-group\" },\n                            React.createElement(\"label\", { className: \"control-label\", htmlFor: \"email-auth-secret\" }, \"Auth Secret (CRAM-MDS)\"),\n                            React.createElement(\"input\", { className: \"pf-c-form-control\", type: \"password\", id: \"email-auth-secret\", \"data-test-id\": \"email-auth-secret\", value: formValues.smtp_auth_secret, onChange: (e) => dispatchFormChange({\n                                    type: 'setFormValues',\n                                    payload: { smtp_auth_secret: e.target.value },\n                                }) })))),\n                React.createElement(\"div\", { className: \"checkbox\" },\n                    React.createElement(\"label\", { className: \"control-label\", htmlFor: \"email-require-tls\" },\n                        React.createElement(\"input\", { type: \"checkbox\", id: \"email-require-tls\", \"data-test-id\": \"email-require-tls\", onChange: (e) => dispatchFormChange({\n                                type: 'setFormValues',\n                                payload: {\n                                    smtp_require_tls: e.target.checked,\n                                },\n                            }), checked: formValues.smtp_require_tls, \"aria-checked\": formValues.smtp_require_tls }),\n                        \"Require TLS\")))),\n        React.createElement(\"div\", { className: \"form-group\" },\n            React.createElement(ExpandCollapse, { textCollapsed: \"Show advanced configuration\", textExpanded: \"Hide advanced configuration\" },\n                React.createElement(\"div\", { className: \"co-form-subsection\" },\n                    React.createElement(\"div\", { className: \"form-group\" },\n                        React.createElement(SendResolvedAlertsCheckbox, { formField: \"email_send_resolved\", formValues: formValues, dispatchFormChange: dispatchFormChange })),\n                    React.createElement(\"div\", { className: \"form-group\" },\n                        React.createElement(\"label\", { className: \"control-label co-required\", htmlFor: \"email-html\" }, \"Body of Email Notifications (HTML)\"),\n                        React.createElement(\"input\", { className: \"pf-c-form-control\", type: \"text\", \"aria-describedby\": \"html-help\", id: \"email-html\", \"data-test-id\": \"email-html\", value: formValues.email_html, onChange: (e) => dispatchFormChange({\n                                type: 'setFormValues',\n                                payload: { email_html: e.target.value },\n                            }) })))))));\n};\nconst getConfigFieldName = (fld) => fld.substring(fld.indexOf('_') + 1); //strip off leading 'email_' or 'smtp_' prefix\nexport const getInitialValues = (globals, receiverConfig) => {\n    const initValues = {\n        emailSaveAsDefault: false,\n        emailTo: receiverConfig === null || receiverConfig === void 0 ? void 0 : receiverConfig.to,\n    };\n    GLOBAL_FIELDS.forEach((fld) => {\n        initValues[fld] = _.get(receiverConfig, getConfigFieldName(fld), globals[fld]);\n    });\n    return initValues;\n};\nexport const isFormInvalid = (formValues) => {\n    return (!formValues.emailTo ||\n        !formValues.smtp_from ||\n        !formValues.smtp_smarthost ||\n        !formValues.smtp_hello);\n};\nexport const updateGlobals = (globals, formValues) => {\n    const updatedGlobals = {};\n    if (formValues.emailSaveAsDefault) {\n        SMTP_GLOBAL_FIELDS.forEach((propName) => {\n            const formValue = formValues[propName];\n            if (formValue !== undefined) {\n                _.set(updatedGlobals, propName, formValue);\n            }\n        });\n    }\n    return updatedGlobals;\n};\nexport const createReceiverConfig = (globals, formValues, receiverConfig) => {\n    _.set(receiverConfig, 'to', formValues.emailTo);\n    // Only save these props in receiverConfig if different from global\n    GLOBAL_FIELDS.forEach((fld) => {\n        const formValue = formValues[fld];\n        const configFieldName = getConfigFieldName(fld);\n        if (formValue !== globals[fld]) {\n            if (SMTP_GLOBAL_FIELDS.includes(fld) && formValues.emailSaveAsDefault) {\n                _.unset(receiverConfig, configFieldName); // saving as global so unset in config\n            }\n            else {\n                _.set(receiverConfig, configFieldName, formValue);\n            }\n        }\n        else {\n            _.unset(receiverConfig, configFieldName); // equals global, unset in config so global is used\n        }\n    });\n    return receiverConfig;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/receiver-forms/email-receiver-form.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/receiver-forms/email-receiver-form.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\nimport * as _ from 'lodash-es';\nimport * as React from 'react';\n\nimport { SectionHeading, ExpandCollapse } from '../../utils';\nimport {\n  SaveAsDefaultCheckbox,\n  SendResolvedAlertsCheckbox,\n  FormProps,\n} from './alert-manager-receiver-forms';\n\nconst SMTP_GLOBAL_FIELDS = [\n  'smtp_from',\n  'smtp_smarthost',\n  'smtp_hello',\n  'smtp_auth_username',\n  'smtp_auth_password',\n  'smtp_auth_identity',\n  'smtp_auth_secret',\n  'smtp_require_tls',\n];\nconst GLOBAL_FIELDS = [...SMTP_GLOBAL_FIELDS, 'email_send_resolved', 'email_html'];\n\nexport const Form: React.FC<FormProps> = ({ globals, formValues, dispatchFormChange }) => {\n  // disable saveAsDefault if all SMTP form fields match global values\n  const disableSaveAsDefault = SMTP_GLOBAL_FIELDS.every(\n    (propName) => formValues[propName] === globals[propName],\n  );\n\n  return (\n    <div data-test-id=\"email-receiver-form\">\n      <div className=\"form-group\">\n        <label className=\"control-label co-required\" htmlFor=\"email-to\">\n          To Address\n        </label>\n        <input\n          className=\"pf-c-form-control\"\n          type=\"text\"\n          aria-describedby=\"email-to-help\"\n          id=\"email-to\"\n          data-test-id=\"email-to\"\n          value={formValues.emailTo}\n          onChange={(e) =>\n            dispatchFormChange({\n              type: 'setFormValues',\n              payload: { emailTo: e.target.value },\n            })\n          }\n        />\n        <div className=\"help-block\" id=\"email-to-help\">\n          The email address to send notifications to.\n        </div>\n      </div>\n      <div className=\"form-group\">\n        <div className=\"co-m-pane__body--section-heading\">\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <SectionHeading text=\"SMTP Configuration\" />\n            </div>\n            <div className=\"col-sm-6\">\n              <SaveAsDefaultCheckbox\n                formField=\"emailSaveAsDefault\"\n                disabled={disableSaveAsDefault}\n                label=\"Save as default SMTP configuration\"\n                formValues={formValues}\n                dispatchFormChange={dispatchFormChange}\n                tooltip=\"Checking this box will write these values to the global section of the\n                configuration file where they will become defaults for future email receivers.\"\n              />\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label className=\"control-label co-required\" htmlFor=\"email-from\">\n              From Address\n            </label>\n            <input\n              className=\"pf-c-form-control\"\n              type=\"text\"\n              aria-describedby=\"email-from-help\"\n              id=\"email-from\"\n              data-test-id=\"email-from\"\n              value={formValues.smtp_from}\n              onChange={(e) =>\n                dispatchFormChange({\n                  type: 'setFormValues',\n                  payload: { smtp_from: e.target.value },\n                })\n              }\n            />\n            <div className=\"help-block\" id=\"email-from-help\">\n              The email address to send notifications from.\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <div className=\"form-group\">\n                <label className=\"control-label co-required\" htmlFor=\"email-smarthost\">\n                  SMTP Smarthost\n                </label>\n                <input\n                  className=\"pf-c-form-control\"\n                  type=\"text\"\n                  aria-describedby=\"email-smarthost-help\"\n                  id=\"email-smarthost\"\n                  data-test-id=\"email-smarthost\"\n                  value={formValues.smtp_smarthost}\n                  onChange={(e) =>\n                    dispatchFormChange({\n                      type: 'setFormValues',\n                      payload: { smtp_smarthost: e.target.value },\n                    })\n                  }\n                />\n                <div className=\"help-block\" id=\"email-smarthost-help\">\n                  Smarthost used for sending emails, including port number.\n                </div>\n              </div>\n            </div>\n            <div className=\"col-sm-6\">\n              <div className=\"form-group\">\n                <label className=\"control-label co-required\" htmlFor=\"email-hello\">\n                  SMTP Hello\n                </label>\n                <input\n                  className=\"pf-c-form-control\"\n                  type=\"text\"\n                  aria-describedby=\"email-hello-help\"\n                  id=\"email-hello\"\n                  data-test-id=\"email-hello\"\n                  value={formValues.smtp_hello}\n                  onChange={(e) =>\n                    dispatchFormChange({\n                      type: 'setFormValues',\n                      payload: { smtp_hello: e.target.value },\n                    })\n                  }\n                />\n                <div className=\"help-block\" id=\"email-hello-help\">\n                  The hostname to identify to the SMTP server.\n                </div>\n              </div>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <div className=\"form-group\">\n                <label className=\"control-label\" htmlFor=\"email-auth-username\">\n                  Auth Username\n                </label>\n                <input\n                  className=\"pf-c-form-control\"\n                  type=\"text\"\n                  id=\"email-auth-username\"\n                  data-test-id=\"email-auth-username\"\n                  value={formValues.smtp_auth_username}\n                  onChange={(e) =>\n                    dispatchFormChange({\n                      type: 'setFormValues',\n                      payload: { smtp_auth_username: e.target.value },\n                    })\n                  }\n                />\n              </div>\n            </div>\n            <div className=\"col-sm-6\">\n              <div className=\"form-group\">\n                <label className=\"control-label\" htmlFor=\"email-auth-password\">\n                  Auth Password (Using LOGIN and PLAIN)\n                </label>\n                <input\n                  className=\"pf-c-form-control\"\n                  type=\"password\"\n                  id=\"email-auth-password\"\n                  data-test-id=\"email-auth-password\"\n                  value={formValues.smtp_auth_password}\n                  onChange={(e) =>\n                    dispatchFormChange({\n                      type: 'setFormValues',\n                      payload: { smtp_auth_password: e.target.value },\n                    })\n                  }\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <div className=\"form-group\">\n                <label className=\"control-label\" htmlFor=\"email-auth-identity\">\n                  Auth Identity (Using PLAIN)\n                </label>\n                <input\n                  className=\"pf-c-form-control\"\n                  type=\"text\"\n                  id=\"email-auth-identity\"\n                  data-test-id=\"email-auth-identity\"\n                  value={formValues.smtp_auth_identity}\n                  onChange={(e) =>\n                    dispatchFormChange({\n                      type: 'setFormValues',\n                      payload: { smtp_auth_identity: e.target.value },\n                    })\n                  }\n                />\n              </div>\n            </div>\n            <div className=\"col-sm-6\">\n              <div className=\"form-group\">\n                <label className=\"control-label\" htmlFor=\"email-auth-secret\">\n                  Auth Secret (CRAM-MDS)\n                </label>\n                <input\n                  className=\"pf-c-form-control\"\n                  type=\"password\"\n                  id=\"email-auth-secret\"\n                  data-test-id=\"email-auth-secret\"\n                  value={formValues.smtp_auth_secret}\n                  onChange={(e) =>\n                    dispatchFormChange({\n                      type: 'setFormValues',\n                      payload: { smtp_auth_secret: e.target.value },\n                    })\n                  }\n                />\n              </div>\n            </div>\n          </div>\n          <div className=\"checkbox\">\n            <label className=\"control-label\" htmlFor=\"email-require-tls\">\n              <input\n                type=\"checkbox\"\n                id=\"email-require-tls\"\n                data-test-id=\"email-require-tls\"\n                onChange={(e) =>\n                  dispatchFormChange({\n                    type: 'setFormValues',\n                    payload: {\n                      smtp_require_tls: e.target.checked,\n                    },\n                  })\n                }\n                checked={formValues.smtp_require_tls}\n                aria-checked={formValues.smtp_require_tls}\n              />\n              Require TLS\n            </label>\n          </div>\n        </div>\n      </div>\n      <div className=\"form-group\">\n        <ExpandCollapse\n          textCollapsed=\"Show advanced configuration\"\n          textExpanded=\"Hide advanced configuration\"\n        >\n          <div className=\"co-form-subsection\">\n            <div className=\"form-group\">\n              <SendResolvedAlertsCheckbox\n                formField=\"email_send_resolved\"\n                formValues={formValues}\n                dispatchFormChange={dispatchFormChange}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label className=\"control-label co-required\" htmlFor=\"email-html\">\n                Body of Email Notifications (HTML)\n              </label>\n              <input\n                className=\"pf-c-form-control\"\n                type=\"text\"\n                aria-describedby=\"html-help\"\n                id=\"email-html\"\n                data-test-id=\"email-html\"\n                value={formValues.email_html}\n                onChange={(e) =>\n                  dispatchFormChange({\n                    type: 'setFormValues',\n                    payload: { email_html: e.target.value },\n                  })\n                }\n              />\n            </div>\n          </div>\n        </ExpandCollapse>\n      </div>\n    </div>\n  );\n};\n\nconst getConfigFieldName = (fld) => fld.substring(fld.indexOf('_') + 1); //strip off leading 'email_' or 'smtp_' prefix\n\nexport const getInitialValues = (globals, receiverConfig) => {\n  const initValues: any = {\n    emailSaveAsDefault: false,\n    emailTo: receiverConfig?.to,\n  };\n\n  GLOBAL_FIELDS.forEach((fld) => {\n    initValues[fld] = _.get(receiverConfig, getConfigFieldName(fld), globals[fld]);\n  });\n\n  return initValues;\n};\n\nexport const isFormInvalid = (formValues) => {\n  return (\n    !formValues.emailTo ||\n    !formValues.smtp_from ||\n    !formValues.smtp_smarthost ||\n    !formValues.smtp_hello\n  );\n};\n\nexport const updateGlobals = (globals, formValues) => {\n  const updatedGlobals = {};\n  if (formValues.emailSaveAsDefault) {\n    SMTP_GLOBAL_FIELDS.forEach((propName) => {\n      const formValue = formValues[propName];\n      if (formValue !== undefined) {\n        _.set(updatedGlobals, propName, formValue);\n      }\n    });\n  }\n  return updatedGlobals;\n};\n\nexport const createReceiverConfig = (globals, formValues, receiverConfig) => {\n  _.set(receiverConfig, 'to', formValues.emailTo);\n\n  // Only save these props in receiverConfig if different from global\n  GLOBAL_FIELDS.forEach((fld) => {\n    const formValue = formValues[fld];\n    const configFieldName = getConfigFieldName(fld);\n    if (formValue !== globals[fld]) {\n      if (SMTP_GLOBAL_FIELDS.includes(fld) && formValues.emailSaveAsDefault) {\n        _.unset(receiverConfig, configFieldName); // saving as global so unset in config\n      } else {\n        _.set(receiverConfig, configFieldName, formValue);\n      }\n    } else {\n      _.unset(receiverConfig, configFieldName); // equals global, unset in config so global is used\n    }\n  });\n\n  return receiverConfig;\n};\n"]}]}