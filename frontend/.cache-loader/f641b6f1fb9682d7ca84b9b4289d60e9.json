{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/components/baremetal-hosts/dashboard/UtilizationCard.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/components/baremetal-hosts/dashboard/UtilizationCard.tsx","mtime":1615298458670},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { Dropdown } from '@console/internal/components/utils/dropdown';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport UtilizationBody from '@console/shared/src/components/dashboard/utilization-card/UtilizationBody';\nimport { PodModel, ProjectModel } from '@console/internal/models';\nimport ConsumerPopover from '@console/shared/src/components/dashboard/utilization-card/TopConsumerPopover';\nimport { humanizeBinaryBytes, humanizeCpuCores, humanizeDecimalBytesPerSec, } from '@console/internal/components/utils';\nimport { getMachineNodeName } from '@console/shared';\nimport { ByteDataTypes } from '@console/shared/src/graph-helper/data-utils';\nimport { PrometheusUtilizationItem, PrometheusMultilineUtilizationItem, } from '@console/internal/components/dashboard/dashboards-page/cluster-dashboard/utilization-card';\nimport { useMetricDuration, Duration, } from '@console/shared/src/components/dashboard/duration-hook';\nimport { BareMetalHostDashboardContext } from './BareMetalHostDashboardContext';\nimport { getUtilizationQueries, HostQuery, getTopConsumerQueries, getMultilineUtilizationQueries, } from './queries';\nconst UtilizationCard = () => {\n    const [timestamps, setTimestamps] = React.useState();\n    const [duration, setDuration] = useMetricDuration();\n    const { machine } = React.useContext(BareMetalHostDashboardContext);\n    const nodeName = getMachineNodeName(machine);\n    const queries = React.useMemo(() => getUtilizationQueries(nodeName), [nodeName]);\n    const multilineQueries = React.useMemo(() => getMultilineUtilizationQueries(nodeName), [\n        nodeName,\n    ]);\n    const humanizePods = React.useCallback((v) => ({\n        string: `${v}`,\n        value: v,\n        unit: '',\n    }), []);\n    const cpuPopover = React.useCallback(({ current }) => {\n        const topConsumerQueries = getTopConsumerQueries(nodeName);\n        return (React.createElement(ConsumerPopover, { title: \"CPU\", current: current, humanize: humanizeCpuCores, consumers: [\n                {\n                    query: topConsumerQueries[HostQuery.PROJECTS_BY_CPU],\n                    model: ProjectModel,\n                    metric: 'namespace',\n                },\n                {\n                    query: topConsumerQueries[HostQuery.PODS_BY_CPU],\n                    model: PodModel,\n                    metric: 'pod',\n                },\n            ] }));\n    }, [nodeName]);\n    const memPopover = React.useCallback(({ current }) => {\n        const topConsumerQueries = getTopConsumerQueries(nodeName);\n        return (React.createElement(ConsumerPopover, { title: \"Memory\", current: current, humanize: humanizeBinaryBytes, consumers: [\n                {\n                    query: topConsumerQueries[HostQuery.PROJECTS_BY_MEMORY],\n                    model: ProjectModel,\n                    metric: 'namespace',\n                },\n                {\n                    query: topConsumerQueries[HostQuery.PODS_BY_MEMORY],\n                    model: PodModel,\n                    metric: 'pod',\n                },\n            ] }));\n    }, [nodeName]);\n    const storagePopover = React.useCallback(({ current }) => {\n        const topConsumerQueries = getTopConsumerQueries(nodeName);\n        return (React.createElement(ConsumerPopover, { title: \"Disk Usage\", current: current, humanize: humanizeBinaryBytes, consumers: [\n                {\n                    query: topConsumerQueries[HostQuery.PROJECTS_BY_STORAGE],\n                    model: ProjectModel,\n                    metric: 'namespace',\n                },\n                {\n                    query: topConsumerQueries[HostQuery.PODS_BY_STORAGE],\n                    model: PodModel,\n                    metric: 'pod',\n                },\n            ] }));\n    }, [nodeName]);\n    return (React.createElement(DashboardCard, null,\n        React.createElement(DashboardCardHeader, null,\n            React.createElement(DashboardCardTitle, null, \"Utilization\"),\n            React.createElement(Dropdown, { items: Duration, onChange: setDuration, selectedKey: duration, title: duration })),\n        React.createElement(UtilizationBody, { timestamps: timestamps },\n            React.createElement(PrometheusUtilizationItem, { title: \"CPU\", utilizationQuery: queries[HostQuery.CPU_UTILIZATION].utilization, humanizeValue: humanizeCpuCores, TopConsumerPopover: cpuPopover, duration: duration, setTimestamps: setTimestamps }),\n            React.createElement(PrometheusUtilizationItem, { title: \"Memory\", utilizationQuery: queries[HostQuery.MEMORY_UTILIZATION].utilization, totalQuery: queries[HostQuery.MEMORY_UTILIZATION].total, humanizeValue: humanizeBinaryBytes, byteDataType: ByteDataTypes.BinaryBytes, TopConsumerPopover: memPopover, duration: duration }),\n            React.createElement(PrometheusUtilizationItem, { title: \"Filesystem\", utilizationQuery: queries[HostQuery.STORAGE_UTILIZATION].utilization, totalQuery: queries[HostQuery.STORAGE_UTILIZATION].total, humanizeValue: humanizeBinaryBytes, byteDataType: ByteDataTypes.BinaryBytes, TopConsumerPopover: storagePopover, duration: duration }),\n            React.createElement(PrometheusMultilineUtilizationItem, { title: \"Network Transfer\", queries: multilineQueries[HostQuery.NETWORK_UTILIZATION], humanizeValue: humanizeDecimalBytesPerSec, duration: duration }),\n            React.createElement(PrometheusUtilizationItem, { title: \"Pod count\", utilizationQuery: queries[HostQuery.NUMBER_OF_PODS].utilization, humanizeValue: humanizePods, duration: duration }))));\n};\nexport default UtilizationCard;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/components/baremetal-hosts/dashboard/UtilizationCard.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/components/baremetal-hosts/dashboard/UtilizationCard.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Dropdown } from '@console/internal/components/utils/dropdown';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport UtilizationBody from '@console/shared/src/components/dashboard/utilization-card/UtilizationBody';\nimport { PodModel, ProjectModel } from '@console/internal/models';\nimport ConsumerPopover from '@console/shared/src/components/dashboard/utilization-card/TopConsumerPopover';\nimport {\n  humanizeBinaryBytes,\n  humanizeCpuCores,\n  humanizeDecimalBytesPerSec,\n} from '@console/internal/components/utils';\nimport { getMachineNodeName } from '@console/shared';\nimport { ByteDataTypes } from '@console/shared/src/graph-helper/data-utils';\nimport {\n  PrometheusUtilizationItem,\n  PrometheusMultilineUtilizationItem,\n} from '@console/internal/components/dashboard/dashboards-page/cluster-dashboard/utilization-card';\nimport {\n  useMetricDuration,\n  Duration,\n} from '@console/shared/src/components/dashboard/duration-hook';\nimport { BareMetalHostDashboardContext } from './BareMetalHostDashboardContext';\nimport {\n  getUtilizationQueries,\n  HostQuery,\n  getTopConsumerQueries,\n  getMultilineUtilizationQueries,\n} from './queries';\n\nconst UtilizationCard: React.FC = () => {\n  const [timestamps, setTimestamps] = React.useState<Date[]>();\n  const [duration, setDuration] = useMetricDuration();\n\n  const { machine } = React.useContext(BareMetalHostDashboardContext);\n  const nodeName = getMachineNodeName(machine);\n\n  const queries = React.useMemo(() => getUtilizationQueries(nodeName), [nodeName]);\n  const multilineQueries = React.useMemo(() => getMultilineUtilizationQueries(nodeName), [\n    nodeName,\n  ]);\n\n  const humanizePods = React.useCallback(\n    (v) => ({\n      string: `${v}`,\n      value: v as number,\n      unit: '',\n    }),\n    [],\n  );\n\n  const cpuPopover = React.useCallback(\n    ({ current }) => {\n      const topConsumerQueries = getTopConsumerQueries(nodeName);\n      return (\n        <ConsumerPopover\n          title=\"CPU\"\n          current={current}\n          humanize={humanizeCpuCores}\n          consumers={[\n            {\n              query: topConsumerQueries[HostQuery.PROJECTS_BY_CPU],\n              model: ProjectModel,\n              metric: 'namespace',\n            },\n            {\n              query: topConsumerQueries[HostQuery.PODS_BY_CPU],\n              model: PodModel,\n              metric: 'pod',\n            },\n          ]}\n        />\n      );\n    },\n    [nodeName],\n  );\n\n  const memPopover = React.useCallback(\n    ({ current }) => {\n      const topConsumerQueries = getTopConsumerQueries(nodeName);\n      return (\n        <ConsumerPopover\n          title=\"Memory\"\n          current={current}\n          humanize={humanizeBinaryBytes}\n          consumers={[\n            {\n              query: topConsumerQueries[HostQuery.PROJECTS_BY_MEMORY],\n              model: ProjectModel,\n              metric: 'namespace',\n            },\n            {\n              query: topConsumerQueries[HostQuery.PODS_BY_MEMORY],\n              model: PodModel,\n              metric: 'pod',\n            },\n          ]}\n        />\n      );\n    },\n    [nodeName],\n  );\n\n  const storagePopover = React.useCallback(\n    ({ current }) => {\n      const topConsumerQueries = getTopConsumerQueries(nodeName);\n      return (\n        <ConsumerPopover\n          title=\"Disk Usage\"\n          current={current}\n          humanize={humanizeBinaryBytes}\n          consumers={[\n            {\n              query: topConsumerQueries[HostQuery.PROJECTS_BY_STORAGE],\n              model: ProjectModel,\n              metric: 'namespace',\n            },\n            {\n              query: topConsumerQueries[HostQuery.PODS_BY_STORAGE],\n              model: PodModel,\n              metric: 'pod',\n            },\n          ]}\n        />\n      );\n    },\n    [nodeName],\n  );\n\n  return (\n    <DashboardCard>\n      <DashboardCardHeader>\n        <DashboardCardTitle>Utilization</DashboardCardTitle>\n        <Dropdown items={Duration} onChange={setDuration} selectedKey={duration} title={duration} />\n      </DashboardCardHeader>\n      <UtilizationBody timestamps={timestamps}>\n        <PrometheusUtilizationItem\n          title=\"CPU\"\n          utilizationQuery={queries[HostQuery.CPU_UTILIZATION].utilization}\n          humanizeValue={humanizeCpuCores}\n          TopConsumerPopover={cpuPopover}\n          duration={duration}\n          setTimestamps={setTimestamps}\n        />\n        <PrometheusUtilizationItem\n          title=\"Memory\"\n          utilizationQuery={queries[HostQuery.MEMORY_UTILIZATION].utilization}\n          totalQuery={queries[HostQuery.MEMORY_UTILIZATION].total}\n          humanizeValue={humanizeBinaryBytes}\n          byteDataType={ByteDataTypes.BinaryBytes}\n          TopConsumerPopover={memPopover}\n          duration={duration}\n        />\n        <PrometheusUtilizationItem\n          title=\"Filesystem\"\n          utilizationQuery={queries[HostQuery.STORAGE_UTILIZATION].utilization}\n          totalQuery={queries[HostQuery.STORAGE_UTILIZATION].total}\n          humanizeValue={humanizeBinaryBytes}\n          byteDataType={ByteDataTypes.BinaryBytes}\n          TopConsumerPopover={storagePopover}\n          duration={duration}\n        />\n        <PrometheusMultilineUtilizationItem\n          title=\"Network Transfer\"\n          queries={multilineQueries[HostQuery.NETWORK_UTILIZATION]}\n          humanizeValue={humanizeDecimalBytesPerSec}\n          duration={duration}\n        />\n        <PrometheusUtilizationItem\n          title=\"Pod count\"\n          utilizationQuery={queries[HostQuery.NUMBER_OF_PODS].utilization}\n          humanizeValue={humanizePods}\n          duration={duration}\n        />\n      </UtilizationBody>\n    </DashboardCard>\n  );\n};\n\nexport default UtilizationCard;\n"]}]}