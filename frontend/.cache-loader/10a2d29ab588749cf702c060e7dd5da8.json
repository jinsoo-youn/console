{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/utils/pipeline-plugin-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/utils/pipeline-plugin-utils.ts","mtime":1615298458640},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { PipelineRunModel, PipelineModel } from '../models';\n// label to get the pipelines\nexport const INSTANCE_LABEL = 'app.kubernetes.io/instance';\nexport const tknPipelineAndPipelineRunsResources = (namespace) => {\n    const resources = [\n        {\n            isList: true,\n            kind: referenceForModel(PipelineRunModel),\n            namespace,\n            prop: 'pipelineRuns',\n            optional: true,\n        },\n        {\n            isList: true,\n            kind: referenceForModel(PipelineModel),\n            namespace,\n            prop: 'pipelines',\n            optional: true,\n        },\n    ];\n    return resources;\n};\nconst byCreationTime = (left, right) => {\n    const leftCreationTime = new Date(_.get(left, ['metadata', 'creationTimestamp'], Date.now()));\n    const rightCreationTime = new Date(_.get(right, ['metadata', 'creationTimestamp'], Date.now()));\n    return rightCreationTime.getTime() - leftCreationTime.getTime();\n};\nconst getPipelineRunsForPipeline = (pipeline, props) => {\n    if (!props || !props.pipelineRuns)\n        return null;\n    const pipelineRunsData = props.pipelineRuns.data;\n    const PIPELINE_RUN_LABEL = 'tekton.dev/pipeline';\n    const pipelineName = pipeline.metadata.name;\n    return pipelineRunsData\n        .filter((pr) => {\n        return (pipelineName ===\n            (_.get(pr, ['spec', 'pipelineRef', 'name'], null) ||\n                _.get(pr, ['metadata', 'labels', PIPELINE_RUN_LABEL], null)));\n    })\n        .sort(byCreationTime);\n};\nexport const getPipelinesAndPipelineRunsForResource = (resource, props) => {\n    if (!_.has(props, ['pipelines', 'data']))\n        return null;\n    const pipelinesData = props.pipelines.data;\n    const resourceIntanceName = _.get(resource, ['metadata', 'labels', INSTANCE_LABEL], null);\n    if (!resourceIntanceName)\n        return null;\n    const resourcePipeline = pipelinesData.find((pl) => _.get(pl, ['metadata', 'labels', INSTANCE_LABEL], null) === resourceIntanceName);\n    if (!resourcePipeline)\n        return null;\n    return {\n        pipelines: [resourcePipeline],\n        pipelineRuns: getPipelineRunsForPipeline(resourcePipeline, props),\n    };\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/utils/pipeline-plugin-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/utils/pipeline-plugin-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { referenceForModel, K8sResourceKind } from '@console/internal/module/k8s';\nimport { FirehoseResource } from '@console/internal/components/utils';\nimport { PipelineRunModel, PipelineModel } from '../models';\nimport { Pipeline, PipelineRun } from './pipeline-augment';\n\n// label to get the pipelines\nexport const INSTANCE_LABEL = 'app.kubernetes.io/instance';\n\nexport const tknPipelineAndPipelineRunsResources = (namespace: string): FirehoseResource[] => {\n  const resources = [\n    {\n      isList: true,\n      kind: referenceForModel(PipelineRunModel),\n      namespace,\n      prop: 'pipelineRuns',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: referenceForModel(PipelineModel),\n      namespace,\n      prop: 'pipelines',\n      optional: true,\n    },\n  ];\n  return resources;\n};\n\ntype PipelineItem = {\n  pipelines: K8sResourceKind[];\n  pipelineRuns: K8sResourceKind[];\n};\n\nconst byCreationTime = (left: K8sResourceKind, right: K8sResourceKind): number => {\n  const leftCreationTime = new Date(_.get(left, ['metadata', 'creationTimestamp'], Date.now()));\n  const rightCreationTime = new Date(_.get(right, ['metadata', 'creationTimestamp'], Date.now()));\n  return rightCreationTime.getTime() - leftCreationTime.getTime();\n};\n\nconst getPipelineRunsForPipeline = (pipeline: Pipeline, props): PipelineRun[] => {\n  if (!props || !props.pipelineRuns) return null;\n  const pipelineRunsData = props.pipelineRuns.data;\n  const PIPELINE_RUN_LABEL = 'tekton.dev/pipeline';\n  const pipelineName = pipeline.metadata.name;\n  return pipelineRunsData\n    .filter((pr: PipelineRun) => {\n      return (\n        pipelineName ===\n        (_.get(pr, ['spec', 'pipelineRef', 'name'], null) ||\n          _.get(pr, ['metadata', 'labels', PIPELINE_RUN_LABEL], null))\n      );\n    })\n    .sort(byCreationTime);\n};\n\nexport const getPipelinesAndPipelineRunsForResource = (\n  resource: K8sResourceKind,\n  props,\n): PipelineItem => {\n  if (!_.has(props, ['pipelines', 'data'])) return null;\n  const pipelinesData = props.pipelines.data;\n  const resourceIntanceName = _.get(resource, ['metadata', 'labels', INSTANCE_LABEL], null);\n  if (!resourceIntanceName) return null;\n  const resourcePipeline = pipelinesData.find(\n    (pl) => _.get(pl, ['metadata', 'labels', INSTANCE_LABEL], null) === resourceIntanceName,\n  );\n  if (!resourcePipeline) return null;\n  return {\n    pipelines: [resourcePipeline],\n    pipelineRuns: getPipelineRunsForPipeline(resourcePipeline, props),\n  };\n};\n"]}]}