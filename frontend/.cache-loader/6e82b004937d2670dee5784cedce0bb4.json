{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/status/csv-status.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/status/csv-status.ts","mtime":1616735742450},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { getName } from '@console/shared/src/selectors/common';\nimport { SubscriptionState, ClusterServiceVersionPhase, ClusterServiceVersionStatus, } from '../types';\nconst pedingPhases = [\n    ClusterServiceVersionPhase.CSVPhasePending,\n    ClusterServiceVersionPhase.CSVPhaseInstalling,\n    ClusterServiceVersionPhase.CSVPhaseReplacing,\n    ClusterServiceVersionPhase.CSVPhaseDeleting,\n];\nexport const subscriptionForCSV = (subscriptions, csv) => _.find(subscriptions, {\n    metadata: {\n        namespace: _.get(csv, ['metadata', 'annotations', 'olm.operatorNamespace']),\n    },\n    status: {\n        installedCSV: getName(csv),\n    },\n}); // 'as any' to supress typescript error caused by lodash;\nexport const getCSVStatus = (csv) => {\n    const statusPhase = _.get(csv, 'status.phase', ClusterServiceVersionPhase.CSVPhaseUnknown);\n    let status;\n    if (pedingPhases.includes(statusPhase)) {\n        status = ClusterServiceVersionStatus.Pending;\n    }\n    else {\n        switch (statusPhase) {\n            case ClusterServiceVersionPhase.CSVPhaseSucceeded:\n                status = ClusterServiceVersionStatus.OK;\n                break;\n            case ClusterServiceVersionPhase.CSVPhaseFailed:\n                status = ClusterServiceVersionStatus.Failed;\n                break;\n            default:\n                return {\n                    status: ClusterServiceVersionStatus.Unknown,\n                    title: statusPhase,\n                };\n        }\n    }\n    return {\n        status,\n        title: statusPhase,\n    };\n};\nexport const getSubscriptionStatus = (subscription) => {\n    const state = _.get(subscription, 'status.state', SubscriptionState.SubscriptionStateNone);\n    let title;\n    switch (state) {\n        case SubscriptionState.SubscriptionStateUpgradeAvailable:\n            title = 'Upgrade available';\n            break;\n        case SubscriptionState.SubscriptionStateUpgradePending:\n            title = 'Upgrading';\n            break;\n        case SubscriptionState.SubscriptionStateAtLatest:\n            title = 'Up to date';\n            break;\n        default:\n            title = '';\n    }\n    return { status: state, title };\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/status/csv-status.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/status/csv-status.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,OAAO,EAAE,MAAM,sCAAsC,CAAC;AAC/D,OAAO,EAGL,iBAAiB,EACjB,0BAA0B,EAC1B,2BAA2B,GAC5B,MAAM,UAAU,CAAC;AAElB,MAAM,YAAY,GAAG;IACnB,0BAA0B,CAAC,eAAe;IAC1C,0BAA0B,CAAC,kBAAkB;IAC7C,0BAA0B,CAAC,iBAAiB;IAC5C,0BAA0B,CAAC,gBAAgB;CAC5C,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAChC,aAAiC,EACjC,GAA8B,EACZ,EAAE,CACpB,CAAC,CAAC,IAAI,CAAC,aAAa,EAAE;IACpB,QAAQ,EAAE;QACR,SAAS,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,UAAU,EAAE,aAAa,EAAE,uBAAuB,CAAC,CAAC;KAC5E;IACD,MAAM,EAAE;QACN,YAAY,EAAE,OAAO,CAAC,GAAG,CAAC;KAC3B;CACK,CAAC,CAAC,CAAC,yDAAyD;AAEtE,MAAM,CAAC,MAAM,YAAY,GAAG,CAC1B,GAA8B,EAC0B,EAAE;IAC1D,MAAM,WAAW,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,cAAc,EAAE,0BAA0B,CAAC,eAAe,CAAC,CAAC;IAC3F,IAAI,MAAmC,CAAC;IACxC,IAAI,YAAY,CAAC,QAAQ,CAAC,WAAW,CAAC,EAAE;QACtC,MAAM,GAAG,2BAA2B,CAAC,OAAO,CAAC;KAC9C;SAAM;QACL,QAAQ,WAAW,EAAE;YACnB,KAAK,0BAA0B,CAAC,iBAAiB;gBAC/C,MAAM,GAAG,2BAA2B,CAAC,EAAE,CAAC;gBACxC,MAAM;YACR,KAAK,0BAA0B,CAAC,cAAc;gBAC5C,MAAM,GAAG,2BAA2B,CAAC,MAAM,CAAC;gBAC5C,MAAM;YACR;gBACE,OAAO;oBACL,MAAM,EAAE,2BAA2B,CAAC,OAAO;oBAC3C,KAAK,EAAE,WAAW;iBACnB,CAAC;SACL;KACF;IACD,OAAO;QACL,MAAM;QACN,KAAK,EAAE,WAAW;KACnB,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAAG,CACnC,YAA8B,EACiB,EAAE;IACjD,MAAM,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,YAAY,EAAE,cAAc,EAAE,iBAAiB,CAAC,qBAAqB,CAAC,CAAC;IAC3F,IAAI,KAAa,CAAC;IAClB,QAAQ,KAAK,EAAE;QACb,KAAK,iBAAiB,CAAC,iCAAiC;YACtD,KAAK,GAAG,mBAAmB,CAAC;YAC5B,MAAM;QACR,KAAK,iBAAiB,CAAC,+BAA+B;YACpD,KAAK,GAAG,WAAW,CAAC;YACpB,MAAM;QACR,KAAK,iBAAiB,CAAC,yBAAyB;YAC9C,KAAK,GAAG,YAAY,CAAC;YACrB,MAAM;QACR;YACE,KAAK,GAAG,EAAE,CAAC;KACd;IACD,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;AAClC,CAAC,CAAC","sourcesContent":["import * as _ from 'lodash';\nimport { getName } from '@console/shared/src/selectors/common';\nimport {\n  ClusterServiceVersionKind,\n  SubscriptionKind,\n  SubscriptionState,\n  ClusterServiceVersionPhase,\n  ClusterServiceVersionStatus,\n} from '../types';\n\nconst pedingPhases = [\n  ClusterServiceVersionPhase.CSVPhasePending,\n  ClusterServiceVersionPhase.CSVPhaseInstalling,\n  ClusterServiceVersionPhase.CSVPhaseReplacing,\n  ClusterServiceVersionPhase.CSVPhaseDeleting,\n];\n\nexport const subscriptionForCSV = (\n  subscriptions: SubscriptionKind[],\n  csv: ClusterServiceVersionKind,\n): SubscriptionKind =>\n  _.find(subscriptions, {\n    metadata: {\n      namespace: _.get(csv, ['metadata', 'annotations', 'olm.operatorNamespace']),\n    },\n    status: {\n      installedCSV: getName(csv),\n    },\n  } as any); // 'as any' to supress typescript error caused by lodash;\n\nexport const getCSVStatus = (\n  csv: ClusterServiceVersionKind,\n): { status: ClusterServiceVersionStatus; title: string } => {\n  const statusPhase = _.get(csv, 'status.phase', ClusterServiceVersionPhase.CSVPhaseUnknown);\n  let status: ClusterServiceVersionStatus;\n  if (pedingPhases.includes(statusPhase)) {\n    status = ClusterServiceVersionStatus.Pending;\n  } else {\n    switch (statusPhase) {\n      case ClusterServiceVersionPhase.CSVPhaseSucceeded:\n        status = ClusterServiceVersionStatus.OK;\n        break;\n      case ClusterServiceVersionPhase.CSVPhaseFailed:\n        status = ClusterServiceVersionStatus.Failed;\n        break;\n      default:\n        return {\n          status: ClusterServiceVersionStatus.Unknown,\n          title: statusPhase,\n        };\n    }\n  }\n  return {\n    status,\n    title: statusPhase,\n  };\n};\n\nexport const getSubscriptionStatus = (\n  subscription: SubscriptionKind,\n): { status: SubscriptionState; title?: string } => {\n  const state = _.get(subscription, 'status.state', SubscriptionState.SubscriptionStateNone);\n  let title: string;\n  switch (state) {\n    case SubscriptionState.SubscriptionStateUpgradeAvailable:\n      title = 'Upgrade available';\n      break;\n    case SubscriptionState.SubscriptionStateUpgradePending:\n      title = 'Upgrading';\n      break;\n    case SubscriptionState.SubscriptionStateAtLatest:\n      title = 'Up to date';\n      break;\n    default:\n      title = '';\n  }\n  return { status: state, title };\n};\n"]}]}