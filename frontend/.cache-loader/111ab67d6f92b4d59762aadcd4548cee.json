{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/validations/vm/nic.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/validations/vm/nic.ts","mtime":1615298458670},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { asValidationObject, makeSentence, validateDNS1123SubdomainValue, ValidationErrorType, } from '@console/shared';\nimport { MAC_ADDRESS_INVALID_ERROR, NETWORK_REQUIRED, NIC_NAME_EXISTS } from '../strings';\nimport { isValidMAC } from './validations';\nexport const validateNicName = (name, usedInterfacesNames, { subject } = { subject: 'Name' }) => {\n    let validation = validateDNS1123SubdomainValue(name, { subject });\n    if (!validation && usedInterfacesNames && usedInterfacesNames.has(name)) {\n        validation = asValidationObject(NIC_NAME_EXISTS);\n    }\n    return validation;\n};\nexport const validateNetwork = (network) => {\n    if (!network.hasType()) {\n        return asValidationObject(NETWORK_REQUIRED, ValidationErrorType.TrivialError);\n    }\n    return null;\n};\nexport const validateMACAddress = (mac) => {\n    const isValid = !mac || isValidMAC(mac);\n    return isValid ? null : asValidationObject(makeSentence(MAC_ADDRESS_INVALID_ERROR));\n};\nexport const validateNIC = (interfaceWrapper, network, { usedInterfacesNames, acceptEmptyNetwork, }) => {\n    const validations = {\n        name: validateNicName(interfaceWrapper && interfaceWrapper.getName(), usedInterfacesNames),\n        macAddress: validateMACAddress(interfaceWrapper && interfaceWrapper.getMACAddress()),\n        network: validateNetwork(network),\n    };\n    let hasAllRequiredFilled = interfaceWrapper &&\n        interfaceWrapper.getName() &&\n        interfaceWrapper.getModel() &&\n        interfaceWrapper.hasType();\n    if (!acceptEmptyNetwork) {\n        hasAllRequiredFilled =\n            hasAllRequiredFilled && network && network.getReadableName() && network.hasType();\n    }\n    return {\n        validations,\n        hasAllRequiredFilled: !!hasAllRequiredFilled,\n        isValid: !!hasAllRequiredFilled &&\n            !Object.keys(validations)\n                .filter((key) => !(acceptEmptyNetwork && key === 'network'))\n                .find((key) => validations[key]),\n    };\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/validations/vm/nic.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/validations/vm/nic.ts"],"names":[],"mappings":"AAAA,OAAO,EACL,kBAAkB,EAClB,YAAY,EACZ,6BAA6B,EAC7B,mBAAmB,GAEpB,MAAM,iBAAiB,CAAC;AACzB,OAAO,EAAE,yBAAyB,EAAE,gBAAgB,EAAE,eAAe,EAAE,MAAM,YAAY,CAAC;AAG1F,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAG3C,MAAM,CAAC,MAAM,eAAe,GAAG,CAC7B,IAAY,EACZ,mBAAgC,EAChC,EAAE,OAAO,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,EAAE,EACf,EAAE;IACpB,IAAI,UAAU,GAAG,6BAA6B,CAAC,IAAI,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;IAElE,IAAI,CAAC,UAAU,IAAI,mBAAmB,IAAI,mBAAmB,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE;QACvE,UAAU,GAAG,kBAAkB,CAAC,eAAe,CAAC,CAAC;KAClD;IAED,OAAO,UAAU,CAAC;AACpB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,OAAuB,EAAoB,EAAE;IAC3E,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,EAAE;QACtB,OAAO,kBAAkB,CAAC,gBAAgB,EAAE,mBAAmB,CAAC,YAAY,CAAC,CAAC;KAC/E;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,GAAW,EAAoB,EAAE;IAClE,MAAM,OAAO,GAAG,CAAC,GAAG,IAAI,UAAU,CAAC,GAAG,CAAC,CAAC;IACxC,OAAO,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,kBAAkB,CAAC,YAAY,CAAC,yBAAyB,CAAC,CAAC,CAAC;AACtF,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAG,CACzB,gBAAyC,EACzC,OAAuB,EACvB,EACE,mBAAmB,EACnB,kBAAkB,GAInB,EAC6B,EAAE;IAChC,MAAM,WAAW,GAAG;QAClB,IAAI,EAAE,eAAe,CAAC,gBAAgB,IAAI,gBAAgB,CAAC,OAAO,EAAE,EAAE,mBAAmB,CAAC;QAC1F,UAAU,EAAE,kBAAkB,CAAC,gBAAgB,IAAI,gBAAgB,CAAC,aAAa,EAAE,CAAC;QACpF,OAAO,EAAE,eAAe,CAAC,OAAO,CAAC;KAClC,CAAC;IAEF,IAAI,oBAAoB,GACtB,gBAAgB;QAChB,gBAAgB,CAAC,OAAO,EAAE;QAC1B,gBAAgB,CAAC,QAAQ,EAAE;QAC3B,gBAAgB,CAAC,OAAO,EAAE,CAAC;IAE7B,IAAI,CAAC,kBAAkB,EAAE;QACvB,oBAAoB;YAClB,oBAAoB,IAAI,OAAO,IAAI,OAAO,CAAC,eAAe,EAAE,IAAI,OAAO,CAAC,OAAO,EAAE,CAAC;KACrF;IAED,OAAO;QACL,WAAW;QACX,oBAAoB,EAAE,CAAC,CAAC,oBAAoB;QAC5C,OAAO,EACL,CAAC,CAAC,oBAAoB;YACtB,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC;iBACtB,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,CAAC,kBAAkB,IAAI,GAAG,KAAK,SAAS,CAAC,CAAC;iBAC3D,IAAI,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;KACrC,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import {\n  asValidationObject,\n  makeSentence,\n  validateDNS1123SubdomainValue,\n  ValidationErrorType,\n  ValidationObject,\n} from '@console/shared';\nimport { MAC_ADDRESS_INVALID_ERROR, NETWORK_REQUIRED, NIC_NAME_EXISTS } from '../strings';\nimport { NetworkInterfaceWrapper } from '../../../k8s/wrapper/vm/network-interface-wrapper';\nimport { NetworkWrapper } from '../../../k8s/wrapper/vm/network-wrapper';\nimport { isValidMAC } from './validations';\nimport { UINetworkInterfaceValidation } from '../../../types/ui/nic';\n\nexport const validateNicName = (\n  name: string,\n  usedInterfacesNames: Set<string>,\n  { subject } = { subject: 'Name' },\n): ValidationObject => {\n  let validation = validateDNS1123SubdomainValue(name, { subject });\n\n  if (!validation && usedInterfacesNames && usedInterfacesNames.has(name)) {\n    validation = asValidationObject(NIC_NAME_EXISTS);\n  }\n\n  return validation;\n};\n\nexport const validateNetwork = (network: NetworkWrapper): ValidationObject => {\n  if (!network.hasType()) {\n    return asValidationObject(NETWORK_REQUIRED, ValidationErrorType.TrivialError);\n  }\n\n  return null;\n};\n\nexport const validateMACAddress = (mac: string): ValidationObject => {\n  const isValid = !mac || isValidMAC(mac);\n  return isValid ? null : asValidationObject(makeSentence(MAC_ADDRESS_INVALID_ERROR));\n};\n\nexport const validateNIC = (\n  interfaceWrapper: NetworkInterfaceWrapper,\n  network: NetworkWrapper,\n  {\n    usedInterfacesNames,\n    acceptEmptyNetwork,\n  }: {\n    usedInterfacesNames?: Set<string>;\n    acceptEmptyNetwork?: boolean; // do not use for strict validation\n  },\n): UINetworkInterfaceValidation => {\n  const validations = {\n    name: validateNicName(interfaceWrapper && interfaceWrapper.getName(), usedInterfacesNames),\n    macAddress: validateMACAddress(interfaceWrapper && interfaceWrapper.getMACAddress()),\n    network: validateNetwork(network),\n  };\n\n  let hasAllRequiredFilled =\n    interfaceWrapper &&\n    interfaceWrapper.getName() &&\n    interfaceWrapper.getModel() &&\n    interfaceWrapper.hasType();\n\n  if (!acceptEmptyNetwork) {\n    hasAllRequiredFilled =\n      hasAllRequiredFilled && network && network.getReadableName() && network.hasType();\n  }\n\n  return {\n    validations,\n    hasAllRequiredFilled: !!hasAllRequiredFilled,\n    isValid:\n      !!hasAllRequiredFilled &&\n      !Object.keys(validations)\n        .filter((key) => !(acceptEmptyNetwork && key === 'network'))\n        .find((key) => validations[key]),\n  };\n};\n"]}]}