{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/PipelineForm.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/PipelineForm.tsx","mtime":1615298458620},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Formik } from 'formik';\nimport { k8sUpdate } from '@console/internal/module/k8s';\nimport { PipelineModel } from '../../../models';\nconst PipelineForm = ({ PipelineFormComponent, formName, validationSchema, obj, }) => {\n    const initialValues = {\n        parameters: _.get(obj.spec, 'params', []),\n        resources: _.get(obj.spec, 'resources', []),\n    };\n    const handleSubmit = (values, actions) => {\n        actions.setSubmitting(true);\n        k8sUpdate(PipelineModel, Object.assign(Object.assign({}, obj), { spec: Object.assign(Object.assign({}, obj.spec), { params: values.parameters, resources: values.resources }) }), obj.metadata.namespace, obj.metadata.name)\n            .then((newObj) => {\n            actions.setSubmitting(false);\n            actions.resetForm({\n                values: {\n                    parameters: _.get(newObj.spec, 'params', []),\n                    resources: _.get(newObj.spec, 'resources', []),\n                },\n                status: { success: `Successfully updated the pipeline ${formName}.` },\n            });\n        })\n            .catch((err) => {\n            actions.setSubmitting(false);\n            actions.setStatus({ submitError: err.message });\n        });\n    };\n    const handleReset = (values, actions) => {\n        actions.resetForm({ status: {} });\n    };\n    return (React.createElement(\"div\", { className: \"co-m-pane__body\" },\n        React.createElement(Formik, { initialValues: initialValues, onSubmit: handleSubmit, onReset: handleReset, validationSchema: validationSchema, render: (props) => React.createElement(PipelineFormComponent, Object.assign({ namespace: obj.metadata.namespace }, props)) })));\n};\nexport default PipelineForm;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/PipelineForm.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/PipelineForm.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAChC,OAAO,EAAE,SAAS,EAAmB,MAAM,8BAA8B,CAAC;AAC1E,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAShD,MAAM,YAAY,GAAgC,CAAC,EACjD,qBAAqB,EACrB,QAAQ,EACR,gBAAgB,EAChB,GAAG,GACJ,EAAE,EAAE;IACH,MAAM,aAAa,GAAG;QACpB,UAAU,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,EAAE,EAAE,CAAC;QACzC,SAAS,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI,EAAE,WAAW,EAAE,EAAE,CAAC;KAC5C,CAAC;IAEF,MAAM,YAAY,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE;QACvC,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAE5B,SAAS,CACP,aAAa,kCACR,GAAG,KAAE,IAAI,kCAAO,GAAG,CAAC,IAAI,KAAE,MAAM,EAAE,MAAM,CAAC,UAAU,EAAE,SAAS,EAAE,MAAM,CAAC,SAAS,QACrF,GAAG,CAAC,QAAQ,CAAC,SAAS,EACtB,GAAG,CAAC,QAAQ,CAAC,IAAI,CAClB;aACE,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;YACf,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC7B,OAAO,CAAC,SAAS,CAAC;gBAChB,MAAM,EAAE;oBACN,UAAU,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,QAAQ,EAAE,EAAE,CAAC;oBAC5C,SAAS,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,EAAE,WAAW,EAAE,EAAE,CAAC;iBAC/C;gBACD,MAAM,EAAE,EAAE,OAAO,EAAE,qCAAqC,QAAQ,GAAG,EAAE;aACtE,CAAC,CAAC;QACL,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;YACb,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC7B,OAAO,CAAC,SAAS,CAAC,EAAE,WAAW,EAAE,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;IAEF,MAAM,WAAW,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE;QACtC,OAAO,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,CAAC;IACpC,CAAC,CAAC;IAEF,OAAO,CACL,6BAAK,SAAS,EAAC,iBAAiB;QAC9B,oBAAC,MAAM,IACL,aAAa,EAAE,aAAa,EAC5B,QAAQ,EAAE,YAAY,EACtB,OAAO,EAAE,WAAW,EACpB,gBAAgB,EAAE,gBAAgB,EAClC,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,oBAAC,qBAAqB,kBAAC,SAAS,EAAE,GAAG,CAAC,QAAQ,CAAC,SAAS,IAAM,KAAK,EAAI,GAC1F,CACE,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,YAAY,CAAC","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Formik } from 'formik';\nimport { k8sUpdate, K8sResourceKind } from '@console/internal/module/k8s';\nimport { PipelineModel } from '../../../models';\n\nexport interface PipelineFormProps {\n  PipelineFormComponent: React.ComponentType<any>;\n  formName: string;\n  validationSchema: any;\n  obj: K8sResourceKind;\n}\n\nconst PipelineForm: React.FC<PipelineFormProps> = ({\n  PipelineFormComponent,\n  formName,\n  validationSchema,\n  obj,\n}) => {\n  const initialValues = {\n    parameters: _.get(obj.spec, 'params', []),\n    resources: _.get(obj.spec, 'resources', []),\n  };\n\n  const handleSubmit = (values, actions) => {\n    actions.setSubmitting(true);\n\n    k8sUpdate(\n      PipelineModel,\n      { ...obj, spec: { ...obj.spec, params: values.parameters, resources: values.resources } },\n      obj.metadata.namespace,\n      obj.metadata.name,\n    )\n      .then((newObj) => {\n        actions.setSubmitting(false);\n        actions.resetForm({\n          values: {\n            parameters: _.get(newObj.spec, 'params', []),\n            resources: _.get(newObj.spec, 'resources', []),\n          },\n          status: { success: `Successfully updated the pipeline ${formName}.` },\n        });\n      })\n      .catch((err) => {\n        actions.setSubmitting(false);\n        actions.setStatus({ submitError: err.message });\n      });\n  };\n\n  const handleReset = (values, actions) => {\n    actions.resetForm({ status: {} });\n  };\n\n  return (\n    <div className=\"co-m-pane__body\">\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        onReset={handleReset}\n        validationSchema={validationSchema}\n        render={(props) => <PipelineFormComponent namespace={obj.metadata.namespace} {...props} />}\n      />\n    </div>\n  );\n};\n\nexport default PipelineForm;\n"]}]}