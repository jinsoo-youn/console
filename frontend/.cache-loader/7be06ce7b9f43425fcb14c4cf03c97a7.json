{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/utils/dropdown.jsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/utils/dropdown.jsx","mtime":1615298458730},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport * as PropTypes from 'prop-types';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport { ResourceName } from '../../utils/resource-icon';\nimport { useFormContext } from 'react-hook-form';\nconst DropDownRow = React.memo((props) => {\n    const { itemKey, content, onClick, hover, selected } = props;\n    return (React.createElement(\"li\", { key: itemKey },\n        React.createElement(\"button\", { className: classNames(\"pf-c-dropdown__menu-item\", { hover, focus: selected }), id: `${itemKey}-link`, \"data-test-id\": \"dropdown-menu\", \"data-test-dropdown-menu\": itemKey, onClick: (e) => onClick(itemKey, e) }, content)));\n});\nconst Dropdown_ = (props) => {\n    const { register, unregister, setValue, watch } = useFormContext();\n    const { name, ariaLabel, className, buttonClassName, menuClassName, dropDownClassName, titlePrefix, describedBy, disabled, required } = props;\n    const selectedKey = watch(name);\n    const [title, setTitle] = React.useState(_.get(props.items, selectedKey, props.title));\n    const [active, setActive] = React.useState(!!props.active);\n    const [items, setItems] = React.useState(Object.assign({}, props.items));\n    const [keyboardHoverKey, setKeyboardHoverKey] = React.useState(selectedKey);\n    const dropdownElement = React.useRef();\n    const dropdownList = React.useRef();\n    const onWindowClick = (event) => {\n        if (active) {\n            return;\n        }\n        const { current } = dropdownElement;\n        if (!current) {\n            return;\n        }\n        if (event.target === current || (current && current.contains(event.target))) {\n            return;\n        }\n        hide(event);\n    };\n    const onClick = (selected, e) => {\n        e.preventDefault();\n        e.stopPropagation();\n        setValue(name, selected);\n        const newTitle = items[selected];\n        setTitle(newTitle);\n        hide();\n    };\n    const toggle = (e) => {\n        e.preventDefault();\n        if (disabled) {\n            return;\n        }\n        if (active) {\n            hide(e);\n        }\n        else {\n            show();\n        }\n    };\n    const show = () => {\n        window.removeEventListener('click', onWindowClick);\n        window.addEventListener('click', onWindowClick);\n        setActive(true);\n    };\n    const hide = (e) => {\n        e && e.stopPropagation();\n        window.removeEventListener('click', onWindowClick);\n        setActive(false);\n    };\n    const onKeyDown = (e) => {\n        const { key } = e;\n        if (key === 'Escape') {\n            hide(e);\n            return;\n        }\n        if (key !== 'ArrowDown' && key !== 'ArrowUp' && key !== 'Enter') {\n            return;\n        }\n        if (key === 'Enter') {\n            if (active && items[keyboardHoverKey]) {\n                onClick(keyboardHoverKey, e);\n            }\n            return;\n        }\n        const keys = _.keys(items);\n        let index = _.indexOf(keys, keyboardHoverKey);\n        if (key === 'ArrowDown') {\n            index += 1;\n        }\n        else {\n            index -= 1;\n        }\n        // periodic boundaries\n        if (index >= keys.length) {\n            index = 0;\n        }\n        if (index < 0) {\n            index = keys.length - 1;\n        }\n        const newKey = keys[index];\n        setKeyboardHoverKey(newKey);\n        e.stopPropagation();\n    };\n    React.useEffect(() => {\n        register({ name }, { required });\n        return () => {\n            unregister(name);\n            window.removeEventListener('click', onWindowClick);\n        };\n    }, [name, register, unregister]);\n    const spacerBefore = props.spacerBefore || new Set();\n    const headerBefore = props.headerBefore || {};\n    const rows = [];\n    const addItem = (key, content) => {\n        const selected = key === selectedKey;\n        const hover = key === keyboardHoverKey;\n        const klass = classNames({ active: selected });\n        if (spacerBefore.has(key)) {\n            rows.push(React.createElement(\"li\", { key: `${key}-spacer` },\n                React.createElement(\"div\", { className: \"dropdown-menu__divider\" })));\n        }\n        if (_.has(headerBefore, key)) {\n            rows.push(React.createElement(\"li\", { key: `${key}-header` },\n                React.createElement(\"div\", { className: \"dropdown-menu__header\" }, headerBefore[key])));\n        }\n        rows.push(React.createElement(DropDownRow, { className: klass, key: key, itemKey: key, content: content, onClick: onClick, selected: selected, hover: hover }));\n    };\n    _.each(items, (v, k) => addItem(k, v));\n    return (React.createElement(\"div\", { className: className, ref: dropdownElement, style: props.style },\n        React.createElement(\"div\", { className: classNames({ 'dropdown pf-c-dropdown': true, 'pf-m-expanded': active }, dropDownClassName) },\n            React.createElement(\"button\", { \"aria-label\": ariaLabel, \"aria-haspopup\": \"true\", \"aria-expanded\": active, \"aria-describedby\": describedBy, className: classNames('pf-c-dropdown__toggle', buttonClassName), \"data-test-id\": \"dropdown-button\", onClick: toggle, onKeyDown: onKeyDown, type: \"button\", id: props.id, disabled: disabled },\n                React.createElement(\"span\", { className: \"pf-c-dropdown__toggle-text\" },\n                    titlePrefix && `${titlePrefix}: `,\n                    title),\n                React.createElement(CaretDownIcon, { className: \"pf-c-dropdown__toggle-icon\" })),\n            active && (React.createElement(\"ul\", { ref: dropdownList, className: classNames('pf-c-dropdown__menu', menuClassName) }, rows)))));\n};\nexport const Dropdown = React.memo(Dropdown_);\nDropdown.propTypes = {\n    actionItems: PropTypes.arrayOf(PropTypes.shape({\n        actionKey: PropTypes.string,\n        actionTitle: PropTypes.string,\n    })),\n    className: PropTypes.string,\n    dropDownClassName: PropTypes.string,\n    headerBefore: PropTypes.objectOf(PropTypes.string),\n    items: PropTypes.object.isRequired,\n    menuClassName: PropTypes.string,\n    buttonClassName: PropTypes.string,\n    spacerBefore: PropTypes.instanceOf(Set),\n    textFilter: PropTypes.string,\n    title: PropTypes.node,\n    disabled: PropTypes.bool,\n};\nconst containerLabel = (container) => (React.createElement(ResourceName, { name: container ? container.name : '', kind: \"Container\" }));\nconst getSpacer = (container) => {\n    const spacerBefore = new Set();\n    return container ? spacerBefore.add(container.name) : spacerBefore;\n};\nconst getHeaders = (container, initContainer) => {\n    return initContainer\n        ? {\n            [container.name]: 'Containers',\n            [initContainer.name]: 'Init Containers',\n        }\n        : {};\n};\nconst ContainerDropdown_ = (props) => {\n    const { name, containers, initContainers } = props;\n    if (_.isEmpty(containers) && _.isEmpty(initContainers)) {\n        return null;\n    }\n    const firstInitContainer = _.find(initContainers, { order: 0 });\n    const firstContainer = _.find(containers, { order: 0 });\n    const spacerBefore = getSpacer(firstInitContainer);\n    const headerBefore = getHeaders(firstContainer, firstInitContainer);\n    const dropdownItems = _.mapValues(_.merge(containers, initContainers), containerLabel);\n    const title = props.title || containerLabel(firstContainer);\n    return (React.createElement(Dropdown, { name: name, className: \"btn-group\", menuClassName: \"dropdown-menu--text-wrap\", headerBefore: headerBefore, items: dropdownItems, spacerBefore: spacerBefore, title: title }));\n};\nexport const ContainerDropdown = React.memo(ContainerDropdown_);\nContainerDropdown.propTypes = {\n    containers: PropTypes.oneOfType([PropTypes.object, PropTypes.array]).isRequired,\n    initContainers: PropTypes.object,\n};\nContainerDropdown.defaultProps = {\n    initContainers: {},\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/utils/dropdown.jsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/utils/dropdown.jsx"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport * as PropTypes from 'prop-types';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport { ResourceName } from '../../utils/resource-icon';\nimport { useFormContext } from 'react-hook-form';\n\nconst DropDownRow = React.memo((props) => {\n  const {\n    itemKey,\n    content,\n    onClick,\n    hover,\n    selected\n  } = props;\n\n  return (\n    <li key={itemKey}>\n      <button\n        className={classNames(\"pf-c-dropdown__menu-item\", {hover, focus: selected})}\n        id={`${itemKey}-link`}\n        data-test-id=\"dropdown-menu\"\n        data-test-dropdown-menu={itemKey}\n        onClick={(e) => onClick(itemKey, e)}\n      >\n        {content}\n      </button>\n    </li>\n  );\n});\n\nconst Dropdown_ = (props) => {\n  const { register, unregister, setValue, watch } = useFormContext();\n\n  const {\n    name,\n    ariaLabel,\n    className,\n    buttonClassName,\n    menuClassName,\n    dropDownClassName,\n    titlePrefix,\n    describedBy,\n    disabled,\n    required\n  } = props;\n\n  const selectedKey = watch(name);\n\n  const [title, setTitle] = React.useState(_.get(props.items, selectedKey, props.title));\n  const [active, setActive] = React.useState(!!props.active);\n  const [items, setItems] = React.useState(Object.assign({}, props.items));\n  const [keyboardHoverKey, setKeyboardHoverKey] = React.useState(selectedKey);\n\n\n  const dropdownElement = React.useRef();\n  const dropdownList = React.useRef();\n\n  const onWindowClick = (event) => {\n    if (active) {\n      return;\n    }\n\n    const { current } = dropdownElement;\n    if (!current) {\n      return;\n    }\n\n    if (event.target === current || (current && current.contains(event.target))) {\n      return;\n    }\n\n    hide(event);\n  };\n\n  const onClick = (selected, e) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    setValue(name, selected);\n\n    const newTitle = items[selected];\n    setTitle(newTitle);\n\n    hide();\n  };\n\n  const toggle = (e) => {\n    e.preventDefault();\n\n    if (disabled) {\n      return;\n    }\n\n    if (active) {\n      hide(e);\n    } else {\n      show();\n    }\n  };\n\n  const show = () => {\n    window.removeEventListener('click', onWindowClick);\n    window.addEventListener('click', onWindowClick);\n    setActive(true);\n  };\n\n  const hide = (e) => {\n    e && e.stopPropagation();\n    window.removeEventListener('click', onWindowClick);\n    setActive(false);\n  };\n\n  const onKeyDown = (e) => {\n    const { key } = e;\n    if (key === 'Escape') {\n      hide(e);\n      return;\n    }\n\n    if (key !== 'ArrowDown' && key !== 'ArrowUp' && key !== 'Enter') {\n      return;\n    }\n\n    if (key === 'Enter') {\n      if (active && items[keyboardHoverKey]) {\n        onClick(keyboardHoverKey, e);\n      }\n      return;\n    }\n\n    const keys = _.keys(items);\n\n    let index = _.indexOf(keys, keyboardHoverKey);\n\n    if (key === 'ArrowDown') {\n      index += 1;\n    } else {\n      index -= 1;\n    }\n\n    // periodic boundaries\n    if (index >= keys.length) {\n      index = 0;\n    }\n    if (index < 0) {\n      index = keys.length - 1;\n    }\n\n    const newKey = keys[index];\n    setKeyboardHoverKey(newKey);\n    e.stopPropagation();\n  }\n\n  React.useEffect(() => {\n    register({ name }, { required });\n\n    return () => {\n      unregister(name);\n      window.removeEventListener('click', onWindowClick);\n    }\n  }, [name, register, unregister]);\n\n  const spacerBefore = props.spacerBefore || new Set();\n  const headerBefore = props.headerBefore || {};\n  const rows = [];\n\n  const addItem = (key, content) => {\n    const selected = key === selectedKey;\n    const hover = key === keyboardHoverKey;\n    const klass = classNames({ active: selected });\n    if (spacerBefore.has(key)) {\n      rows.push(\n        <li key={`${key}-spacer`}>\n          <div className=\"dropdown-menu__divider\" />\n        </li>,\n      );\n    }\n\n    if (_.has(headerBefore, key)) {\n      rows.push(\n        <li key={`${key}-header`}>\n          <div className=\"dropdown-menu__header\">{headerBefore[key]}</div>\n        </li>,\n      );\n    }\n    rows.push(\n      <DropDownRow\n        className={klass}\n        key={key}\n        itemKey={key}\n        content={content}\n        onClick={onClick}\n        selected={selected}\n        hover={hover}\n      />,\n    );\n  };\n\n  _.each(items, (v, k) => addItem(k, v));\n\n  return (\n    <div className={className} ref={dropdownElement} style={props.style}>\n      <div\n        className={classNames(\n          { 'dropdown pf-c-dropdown': true, 'pf-m-expanded': active },\n          dropDownClassName,\n        )}\n      >\n        <button\n          aria-label={ariaLabel}\n          aria-haspopup=\"true\"\n          aria-expanded={active}\n          aria-describedby={describedBy}\n          className={classNames('pf-c-dropdown__toggle', buttonClassName)}\n          data-test-id=\"dropdown-button\"\n          onClick={toggle}\n          onKeyDown={onKeyDown}\n          type=\"button\"\n          id={props.id}\n          disabled={disabled}\n        >\n          <span className=\"pf-c-dropdown__toggle-text\">\n            {titlePrefix && `${titlePrefix}: `}\n            {title}\n          </span>\n          <CaretDownIcon className=\"pf-c-dropdown__toggle-icon\" />\n        </button>\n        {active && (\n          <ul\n            ref={dropdownList}\n            className={classNames('pf-c-dropdown__menu', menuClassName)}\n          >\n            {rows}\n          </ul>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport const Dropdown = React.memo(Dropdown_);\n\nDropdown.propTypes = {\n  actionItems: PropTypes.arrayOf(\n    PropTypes.shape({\n      actionKey: PropTypes.string,\n      actionTitle: PropTypes.string,\n    }),\n  ),\n  className: PropTypes.string,\n  dropDownClassName: PropTypes.string,\n  headerBefore: PropTypes.objectOf(PropTypes.string),\n  items: PropTypes.object.isRequired,\n  menuClassName: PropTypes.string,\n  buttonClassName: PropTypes.string,\n  spacerBefore: PropTypes.instanceOf(Set),\n  textFilter: PropTypes.string,\n  title: PropTypes.node,\n  disabled: PropTypes.bool,\n};\n\nconst containerLabel = (container) => (\n  <ResourceName name={container ? container.name : ''} kind=\"Container\" />\n);\n\nconst getSpacer = (container) => {\n  const spacerBefore = new Set();\n  return container ? spacerBefore.add(container.name) : spacerBefore;\n};\n\nconst getHeaders = (container, initContainer) => {\n  return initContainer\n    ? {\n      [container.name]: 'Containers',\n      [initContainer.name]: 'Init Containers',\n    }\n    : {};\n};\n\nconst ContainerDropdown_ = (props) => {\n  const { name, containers, initContainers } = props;\n  if (_.isEmpty(containers) && _.isEmpty(initContainers)) {\n    return null;\n  }\n  const firstInitContainer = _.find(initContainers, { order: 0 });\n  const firstContainer = _.find(containers, { order: 0 });\n  const spacerBefore = getSpacer(firstInitContainer);\n  const headerBefore = getHeaders(firstContainer, firstInitContainer);\n  const dropdownItems = _.mapValues(_.merge(containers, initContainers), containerLabel);\n  const title = props.title || containerLabel(firstContainer);\n  return (\n    <Dropdown\n      name={name}\n      className=\"btn-group\"\n      menuClassName=\"dropdown-menu--text-wrap\"\n      headerBefore={headerBefore}\n      items={dropdownItems}\n      spacerBefore={spacerBefore}\n      title={title}\n    />\n  );\n};\n\nexport const ContainerDropdown = React.memo(ContainerDropdown_);\n\nContainerDropdown.propTypes = {\n  containers: PropTypes.oneOfType([PropTypes.object, PropTypes.array]).isRequired,\n  initContainers: PropTypes.object,\n};\n\nContainerDropdown.defaultProps = {\n  initContainers: {},\n};"]}]}