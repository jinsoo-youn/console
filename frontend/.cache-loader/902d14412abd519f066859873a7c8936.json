{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/components/modals/StartNodeMaintenanceModal.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/components/modals/StartNodeMaintenanceModal.tsx","mtime":1616735742430},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { FormControl } from 'patternfly-react';\nimport { Alert } from '@patternfly/react-core';\nimport { withHandlePromise } from '@console/internal/components/utils';\nimport { ModalTitle, ModalBody, ModalSubmitFooter, createModalLauncher, } from '@console/internal/components/factory';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { CephClusterModel } from '@console/ceph-storage-plugin/src/models';\nimport { startNodeMaintenance } from '../../k8s/requests/node-maintenance';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nconst cephClusterResource = {\n    kind: referenceForModel(CephClusterModel),\n    namespaced: false,\n    isList: true,\n};\nconst StartNodeMaintenanceModal = withHandlePromise((props) => {\n    var _a;\n    const { nodeName, inProgress, errorMessage, handlePromise, close, cancel } = props;\n    const [reason, setReason] = React.useState('');\n    const submit = (event) => {\n        event.preventDefault();\n        const promise = startNodeMaintenance(nodeName, reason);\n        return handlePromise(promise).then(close);\n    };\n    const [cephClusters, loaded] = useK8sWatchResource(cephClusterResource);\n    const cephCluster = cephClusters === null || cephClusters === void 0 ? void 0 : cephClusters[0];\n    const cephClusterHealthy = !cephCluster || ((_a = cephCluster === null || cephCluster === void 0 ? void 0 : cephCluster.status) === null || _a === void 0 ? void 0 : _a.health) === 'OK';\n    const action = 'Start Maintenance';\n    return (React.createElement(\"form\", { onSubmit: submit, name: \"form\", className: \"modal-content\" },\n        React.createElement(ModalTitle, null, action),\n        React.createElement(ModalBody, null,\n            React.createElement(\"p\", null, \"All managed workloads will be moved off of this node. New workloads and data will not be added to this node until maintenance is stopped.\"),\n            React.createElement(\"p\", null,\n                \"If the node does not exit maintenance within \",\n                React.createElement(\"strong\", null, \"30 minutes\"),\n                \", the cluster will automatically rebuild the node's data using replicated copies\"),\n            React.createElement(\"div\", { className: \"form-group\" },\n                React.createElement(\"label\", { htmlFor: \"node-maintenance-reason\" }, \"Reason\"),\n                React.createElement(FormControl, { type: \"text\", id: \"node-maintenance-reason\", value: reason, onChange: (event) => setReason(event.target.value) })),\n            !cephClusterHealthy && (React.createElement(Alert, { variant: \"warning\", title: \"The Ceph storage cluster is not in a healthy state.\", isInline: true }, \"Maintenance should not be started until the health of the storage cluster is restored.\"))),\n        React.createElement(ModalSubmitFooter, { submitDisabled: !loaded, errorMessage: errorMessage, inProgress: inProgress, submitText: action, cancel: cancel })));\n});\nexport const startNodeMaintenanceModal = createModalLauncher(StartNodeMaintenanceModal);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/components/modals/StartNodeMaintenanceModal.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/components/modals/StartNodeMaintenanceModal.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAC/C,OAAO,EAAE,KAAK,EAAE,MAAM,wBAAwB,CAAC;AAC/C,OAAO,EAAE,iBAAiB,EAAsB,MAAM,oCAAoC,CAAC;AAC3F,OAAO,EACL,UAAU,EACV,SAAS,EACT,iBAAiB,EACjB,mBAAmB,GAEpB,MAAM,sCAAsC,CAAC;AAC9C,OAAO,EAAE,iBAAiB,EAAmB,MAAM,8BAA8B,CAAC;AAClF,OAAO,EAAE,gBAAgB,EAAE,MAAM,yCAAyC,CAAC;AAC3E,OAAO,EAAE,oBAAoB,EAAE,MAAM,qCAAqC,CAAC;AAC3E,OAAO,EAAE,mBAAmB,EAAE,MAAM,mDAAmD,CAAC;AAExF,MAAM,mBAAmB,GAAG;IAC1B,IAAI,EAAE,iBAAiB,CAAC,gBAAgB,CAAC;IACzC,UAAU,EAAE,KAAK;IACjB,MAAM,EAAE,IAAI;CACb,CAAC;AAOF,MAAM,yBAAyB,GAAG,iBAAiB,CAAiC,CAAC,KAAK,EAAE,EAAE;;IAC5F,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,YAAY,EAAE,aAAa,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,KAAK,CAAC;IAEnF,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAE/C,MAAM,MAAM,GAAG,CAAC,KAAK,EAAE,EAAE;QACvB,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,MAAM,OAAO,GAAG,oBAAoB,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QACvD,OAAO,aAAa,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5C,CAAC,CAAC;IAEF,MAAM,CAAC,YAAY,EAAE,MAAM,CAAC,GAAG,mBAAmB,CAAoB,mBAAmB,CAAC,CAAC;IAC3F,MAAM,WAAW,GAAG,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAG,CAAC,CAAC,CAAC;IACtC,MAAM,kBAAkB,GAAG,CAAC,WAAW,IAAI,OAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,MAAM,0CAAE,MAAM,MAAK,IAAI,CAAC;IAEhF,MAAM,MAAM,GAAG,mBAAmB,CAAC;IACnC,OAAO,CACL,8BAAM,QAAQ,EAAE,MAAM,EAAE,IAAI,EAAC,MAAM,EAAC,SAAS,EAAC,eAAe;QAC3D,oBAAC,UAAU,QAAE,MAAM,CAAc;QACjC,oBAAC,SAAS;YACR,2KAGI;YACJ;;gBAC+C,iDAA2B;mGAEtE;YACJ,6BAAK,SAAS,EAAC,YAAY;gBACzB,+BAAO,OAAO,EAAC,yBAAyB,aAAe;gBACvD,oBAAC,WAAW,IACV,IAAI,EAAC,MAAM,EACX,EAAE,EAAC,yBAAyB,EAC5B,KAAK,EAAE,MAAM,EACb,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,GAClD,CACE;YACL,CAAC,kBAAkB,IAAI,CACtB,oBAAC,KAAK,IACJ,OAAO,EAAC,SAAS,EACjB,KAAK,EAAC,qDAAqD,EAC3D,QAAQ,mGAGF,CACT,CACS;QACZ,oBAAC,iBAAiB,IAChB,cAAc,EAAE,CAAC,MAAM,EACvB,YAAY,EAAE,YAAY,EAC1B,UAAU,EAAE,UAAU,EACtB,UAAU,EAAE,MAAM,EAClB,MAAM,EAAE,MAAM,GACd,CACG,CACR,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,yBAAyB,GAAG,mBAAmB,CAAC,yBAAyB,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { FormControl } from 'patternfly-react';\nimport { Alert } from '@patternfly/react-core';\nimport { withHandlePromise, HandlePromiseProps } from '@console/internal/components/utils';\nimport {\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n  createModalLauncher,\n  ModalComponentProps,\n} from '@console/internal/components/factory';\nimport { referenceForModel, K8sResourceKind } from '@console/internal/module/k8s';\nimport { CephClusterModel } from '@console/ceph-storage-plugin/src/models';\nimport { startNodeMaintenance } from '../../k8s/requests/node-maintenance';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\n\nconst cephClusterResource = {\n  kind: referenceForModel(CephClusterModel),\n  namespaced: false,\n  isList: true,\n};\n\nexport type StartNodeMaintenanceModalProps = HandlePromiseProps &\n  ModalComponentProps & {\n    nodeName: string;\n  };\n\nconst StartNodeMaintenanceModal = withHandlePromise<StartNodeMaintenanceModalProps>((props) => {\n  const { nodeName, inProgress, errorMessage, handlePromise, close, cancel } = props;\n\n  const [reason, setReason] = React.useState('');\n\n  const submit = (event) => {\n    event.preventDefault();\n    const promise = startNodeMaintenance(nodeName, reason);\n    return handlePromise(promise).then(close);\n  };\n\n  const [cephClusters, loaded] = useK8sWatchResource<K8sResourceKind[]>(cephClusterResource);\n  const cephCluster = cephClusters?.[0];\n  const cephClusterHealthy = !cephCluster || cephCluster?.status?.health === 'OK';\n\n  const action = 'Start Maintenance';\n  return (\n    <form onSubmit={submit} name=\"form\" className=\"modal-content\">\n      <ModalTitle>{action}</ModalTitle>\n      <ModalBody>\n        <p>\n          All managed workloads will be moved off of this node. New workloads and data will not be\n          added to this node until maintenance is stopped.\n        </p>\n        <p>\n          If the node does not exit maintenance within <strong>30 minutes</strong>, the cluster will\n          automatically rebuild the node&apos;s data using replicated copies\n        </p>\n        <div className=\"form-group\">\n          <label htmlFor=\"node-maintenance-reason\">Reason</label>\n          <FormControl\n            type=\"text\"\n            id=\"node-maintenance-reason\"\n            value={reason}\n            onChange={(event) => setReason(event.target.value)}\n          />\n        </div>\n        {!cephClusterHealthy && (\n          <Alert\n            variant=\"warning\"\n            title=\"The Ceph storage cluster is not in a healthy state.\"\n            isInline\n          >\n            Maintenance should not be started until the health of the storage cluster is restored.\n          </Alert>\n        )}\n      </ModalBody>\n      <ModalSubmitFooter\n        submitDisabled={!loaded}\n        errorMessage={errorMessage}\n        inProgress={inProgress}\n        submitText={action}\n        cancel={cancel}\n      />\n    </form>\n  );\n});\n\nexport const startNodeMaintenanceModal = createModalLauncher(StartNodeMaintenanceModal);\n"]}]}