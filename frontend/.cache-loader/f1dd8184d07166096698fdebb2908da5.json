{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/behavior/useBendpoint.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/behavior/useBendpoint.tsx","mtime":1615298458710},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { action } from 'mobx';\nimport * as d3 from 'd3';\nimport { observer } from 'mobx-react';\nimport ElementContext from '../utils/ElementContext';\nimport { isEdge } from '../types';\nimport { useDndDrag } from './useDndDrag';\nexport const useBendpoint = (point, spec, props) => {\n    const element = React.useContext(ElementContext);\n    if (!isEdge(element)) {\n        throw new Error('useBendpoint must be used within the scope of an Edge');\n    }\n    const elementRef = React.useRef(element);\n    elementRef.current = element;\n    const pointRef = React.useRef(point);\n    pointRef.current = point;\n    const [connect, dragRef] = useDndDrag(React.useMemo(() => {\n        const sourceSpec = {\n            item: { type: '#useBendpoint#' },\n            begin: (monitor, p) => {\n                return spec && spec.begin ? spec.begin(monitor, p) : undefined;\n            },\n            drag: (event, monitor, p) => {\n                // assumes the edge is in absolute coordinate space\n                pointRef.current.translate(event.dx, event.dy);\n                elementRef.current.raise();\n                spec && spec.drag && spec.drag(event, monitor, p);\n            },\n            canDrag: spec ? spec.canDrag : undefined,\n            end: spec ? spec.end : undefined,\n            collect: spec ? spec.collect : undefined,\n        };\n        return sourceSpec;\n    }, [spec]), props);\n    // argh react events don't play nice with d3 pan zoom double click event\n    const ref = React.useCallback((node) => {\n        d3.select(node).on('click', action(() => {\n            if (d3.event.shiftKey) {\n                d3.event.stopPropagation();\n                elementRef.current.removeBendpoint(pointRef.current);\n            }\n        }));\n        dragRef(node);\n    }, [dragRef]);\n    return [connect, ref];\n};\nexport const WithBendpoint = (spec) => (WrappedComponent) => {\n    const Component = (props) => {\n        const [dragProps, bendpointRef] = useBendpoint(props.point, spec, props);\n        return React.createElement(WrappedComponent, Object.assign({}, props, { bendpointRef: bendpointRef }, dragProps));\n    };\n    return observer(Component);\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/behavior/useBendpoint.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/behavior/useBendpoint.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { action } from 'mobx';\nimport * as d3 from 'd3';\nimport { observer } from 'mobx-react';\nimport Point from '../geom/Point';\nimport ElementContext from '../utils/ElementContext';\nimport { isEdge } from '../types';\nimport {\n  ConnectDragSource,\n  DragSourceSpec,\n  DragObjectWithType,\n  DragSpecOperationType,\n  DragOperationWithType,\n} from './dnd-types';\nimport { useDndDrag, WithDndDragProps } from './useDndDrag';\n\nexport type WithBendpoint = {\n  sourceDragRef: ConnectDragSource;\n};\n\nexport const useBendpoint = <DropResult, CollectedProps, Props = {}>(\n  point: Point,\n  spec?: Omit<\n    DragSourceSpec<\n      DragObjectWithType,\n      DragSpecOperationType<DragOperationWithType>,\n      DropResult,\n      CollectedProps\n    >,\n    'type'\n  >,\n  props?: Props,\n): [CollectedProps, ConnectDragSource] => {\n  const element = React.useContext(ElementContext);\n  if (!isEdge(element)) {\n    throw new Error('useBendpoint must be used within the scope of an Edge');\n  }\n  const elementRef = React.useRef(element);\n  elementRef.current = element;\n  const pointRef = React.useRef(point);\n  pointRef.current = point;\n\n  const [connect, dragRef] = useDndDrag(\n    React.useMemo(() => {\n      const sourceSpec: DragSourceSpec<any, any, any, any, Props> = {\n        item: { type: '#useBendpoint#' },\n        begin: (monitor, p) => {\n          return spec && spec.begin ? spec.begin(monitor, p) : undefined;\n        },\n        drag: (event, monitor, p) => {\n          // assumes the edge is in absolute coordinate space\n          pointRef.current.translate(event.dx, event.dy);\n          elementRef.current.raise();\n          spec && spec.drag && spec.drag(event, monitor, p);\n        },\n        canDrag: spec ? spec.canDrag : undefined,\n        end: spec ? spec.end : undefined,\n        collect: spec ? spec.collect : undefined,\n      };\n      return sourceSpec;\n    }, [spec]),\n    props,\n  );\n\n  // argh react events don't play nice with d3 pan zoom double click event\n  const ref = React.useCallback(\n    (node) => {\n      d3.select(node).on(\n        'click',\n        action(() => {\n          if (d3.event.shiftKey) {\n            d3.event.stopPropagation();\n            elementRef.current.removeBendpoint(pointRef.current);\n          }\n        }),\n      );\n      dragRef(node);\n    },\n    [dragRef],\n  );\n  return [connect, ref];\n};\n\ntype HocProps = {\n  point: Point;\n};\n\nexport type WithBendpointProps = {\n  dragNodeRef: WithDndDragProps['dndDragRef'];\n};\n\nexport const WithBendpoint = <DropResult, CollectedProps, Props = {}>(\n  spec?: Omit<\n    DragSourceSpec<\n      DragObjectWithType,\n      DragSpecOperationType<DragOperationWithType>,\n      DropResult,\n      CollectedProps,\n      Props\n    >,\n    'type'\n  >,\n) => <P extends WithBendpointProps & CollectedProps & Props>(\n  WrappedComponent: React.ComponentType<P>,\n) => {\n  const Component: React.FC<Omit<P, keyof WithBendpointProps> & HocProps> = (props) => {\n    const [dragProps, bendpointRef] = useBendpoint(props.point, spec, props);\n    return <WrappedComponent {...(props as any)} bendpointRef={bendpointRef} {...dragProps} />;\n  };\n  return observer(Component);\n};\n"]}]}