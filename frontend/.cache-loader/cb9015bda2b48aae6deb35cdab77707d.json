{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/affinity-modal/helpers.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/affinity-modal/helpers.ts","mtime":1616735742420},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport * as classNames from 'classnames';\nimport { Kebab } from '@console/internal/components/utils';\nimport { getNodeAffinityRequiredTerms, getNodeAffinityPreferredTerms, getPodAffinityRequiredTerms, getPodAffinityPreferredTerms, } from '../../../../selectors/affinity/selectors';\nimport { AFFINITY_CONDITIONS } from '../shared/consts';\nexport const defaultNewAffinity = {\n    type: 'nodeAffinity',\n    condition: AFFINITY_CONDITIONS.required,\n    expressions: [{ id: 0, key: '', values: [], operator: 'In' }],\n    fields: [],\n    topologyKey: 'kubernetes.io/hostname',\n};\nexport const columnClasses = [\n    classNames('col-lg-2'),\n    classNames('col-lg-2'),\n    classNames('col-lg-2'),\n    classNames('col-lg-2'),\n    Kebab.columnClass,\n];\nconst setIDsToEntity = (entity) => entity === null || entity === void 0 ? void 0 : entity.map((elm, i) => (Object.assign(Object.assign({}, elm), { id: i })));\nconst flattenExpressions = (arr) => arr === null || arr === void 0 ? void 0 : arr.map((aff) => {\n    const affinityWithoutID = _.omit(aff, 'id');\n    return aff.operator === 'Exists' || aff.operator === 'DoesNotExist'\n        ? Object.assign(Object.assign({}, affinityWithoutID), { values: [] }) : affinityWithoutID;\n});\nconst getNodeAffinityRows = (nodeAffinity) => {\n    const requiredTerms = getNodeAffinityRequiredTerms(nodeAffinity) || [];\n    const preferredTerms = getNodeAffinityPreferredTerms(nodeAffinity) || [];\n    const required = requiredTerms.map(({ matchExpressions, matchFields }, i) => ({\n        id: `node-required-${i}`,\n        type: 'nodeAffinity',\n        condition: AFFINITY_CONDITIONS.required,\n        expressions: setIDsToEntity(matchExpressions),\n        fields: setIDsToEntity(matchFields),\n    }));\n    const preferred = preferredTerms.map(({ preference, weight }, i) => ({\n        id: `node-preferred-${i}`,\n        weight,\n        type: 'nodeAffinity',\n        condition: AFFINITY_CONDITIONS.preferred,\n        expressions: setIDsToEntity(preference.matchExpressions),\n        fields: setIDsToEntity(preference.matchFields),\n    }));\n    return [...required, ...preferred];\n};\nconst getPodLikeAffinityRows = (podLikeAffinity, isAnti = false) => {\n    const requiredTerms = getPodAffinityRequiredTerms(podLikeAffinity) || [];\n    const preferredTerms = getPodAffinityPreferredTerms(podLikeAffinity) || [];\n    const required = requiredTerms === null || requiredTerms === void 0 ? void 0 : requiredTerms.map((podAffinityTerm, i) => {\n        var _a;\n        return ({\n            id: isAnti ? `pod-anti-required-${i}` : `pod-required-${i}`,\n            type: isAnti ? 'podAntiAffinity' : 'podAffinity',\n            condition: AFFINITY_CONDITIONS.required,\n            expressions: setIDsToEntity((_a = podAffinityTerm === null || podAffinityTerm === void 0 ? void 0 : podAffinityTerm.labelSelector) === null || _a === void 0 ? void 0 : _a.matchExpressions),\n            namespaces: podAffinityTerm === null || podAffinityTerm === void 0 ? void 0 : podAffinityTerm.namespaces,\n            topologyKey: podAffinityTerm === null || podAffinityTerm === void 0 ? void 0 : podAffinityTerm.topologyKey,\n        });\n    });\n    const preferred = preferredTerms === null || preferredTerms === void 0 ? void 0 : preferredTerms.map(({ podAffinityTerm, weight }, i) => {\n        var _a;\n        return ({\n            id: isAnti ? `pod-anti-preferred-${i}` : `pod-preferred-${i}`,\n            type: isAnti ? 'podAntiAffinity' : 'podAffinity',\n            condition: AFFINITY_CONDITIONS.preferred,\n            weight,\n            expressions: setIDsToEntity((_a = podAffinityTerm === null || podAffinityTerm === void 0 ? void 0 : podAffinityTerm.labelSelector) === null || _a === void 0 ? void 0 : _a.matchExpressions),\n            namespaces: podAffinityTerm === null || podAffinityTerm === void 0 ? void 0 : podAffinityTerm.namespaces,\n            topologyKey: podAffinityTerm === null || podAffinityTerm === void 0 ? void 0 : podAffinityTerm.topologyKey,\n        });\n    });\n    return [...required, ...preferred];\n};\nexport const getRowsDataFromAffinity = (affinity) => [\n    ...getNodeAffinityRows(affinity === null || affinity === void 0 ? void 0 : affinity.nodeAffinity),\n    ...getPodLikeAffinityRows(affinity === null || affinity === void 0 ? void 0 : affinity.podAffinity),\n    ...getPodLikeAffinityRows(affinity === null || affinity === void 0 ? void 0 : affinity.podAntiAffinity, true),\n];\nconst getRequiredNodeTermFromRowData = ({ expressions, fields, }) => ({\n    matchExpressions: flattenExpressions(expressions),\n    matchFields: flattenExpressions(fields),\n});\nconst getPreferredNodeTermFromRowData = ({ weight, expressions, fields, }) => ({\n    weight,\n    preference: {\n        matchExpressions: flattenExpressions(expressions),\n        matchFields: flattenExpressions(fields),\n    },\n});\nconst getRequiredPodTermFromRowData = ({ expressions, topologyKey, }) => ({\n    labelSelector: {\n        matchExpressions: flattenExpressions(expressions),\n    },\n    topologyKey,\n});\nconst getPreferredPodTermFromRowData = ({ weight, expressions, topologyKey, }) => ({\n    weight,\n    podAffinityTerm: {\n        labelSelector: {\n            matchExpressions: flattenExpressions(expressions),\n        },\n        topologyKey,\n    },\n});\nexport const getAffinityFromRowsData = (affinityRows) => {\n    if (affinityRows.length === 0) {\n        return null;\n    }\n    const pickRows = (rowType, rowCondition, mapper) => affinityRows\n        .filter(({ type, condition }) => type === rowType && condition === rowCondition)\n        .map((rowData) => mapper(rowData));\n    const affinity = {\n        nodeAffinity: {\n            requiredDuringSchedulingIgnoredDuringExecution: {\n                nodeSelectorTerms: pickRows('nodeAffinity', AFFINITY_CONDITIONS.required, getRequiredNodeTermFromRowData),\n            },\n            preferredDuringSchedulingIgnoredDuringExecution: pickRows('nodeAffinity', AFFINITY_CONDITIONS.preferred, getPreferredNodeTermFromRowData),\n        },\n        podAffinity: {\n            requiredDuringSchedulingIgnoredDuringExecution: pickRows('podAffinity', AFFINITY_CONDITIONS.required, getRequiredPodTermFromRowData),\n            preferredDuringSchedulingIgnoredDuringExecution: pickRows('podAffinity', AFFINITY_CONDITIONS.preferred, getPreferredPodTermFromRowData),\n        },\n        podAntiAffinity: {\n            requiredDuringSchedulingIgnoredDuringExecution: pickRows('podAntiAffinity', AFFINITY_CONDITIONS.required, getRequiredPodTermFromRowData),\n            preferredDuringSchedulingIgnoredDuringExecution: pickRows('podAntiAffinity', AFFINITY_CONDITIONS.preferred, getPreferredPodTermFromRowData),\n        },\n    };\n    return affinity;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/affinity-modal/helpers.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/affinity-modal/helpers.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport * as classNames from 'classnames';\nimport { Kebab } from '@console/internal/components/utils';\nimport {\n  getNodeAffinityRequiredTerms,\n  getNodeAffinityPreferredTerms,\n  getPodAffinityRequiredTerms,\n  getPodAffinityPreferredTerms,\n} from '../../../../selectors/affinity/selectors';\nimport {\n  Affinity,\n  NodeAffinity,\n  PodAffinity,\n  PodAffinityTerm,\n  NodeAffinityTerm,\n  PreferredNodeAffinityTerm,\n  PreferredPodAffinityTerm,\n  AffinityRowData,\n  AffinityLabel,\n} from './types';\nimport { AFFINITY_CONDITIONS } from '../shared/consts';\n\nexport const defaultNewAffinity = {\n  type: 'nodeAffinity',\n  condition: AFFINITY_CONDITIONS.required,\n  expressions: [{ id: 0, key: '', values: [], operator: 'In' }],\n  fields: [],\n  topologyKey: 'kubernetes.io/hostname',\n} as AffinityRowData;\n\nexport const columnClasses = [\n  classNames('col-lg-2'),\n  classNames('col-lg-2'),\n  classNames('col-lg-2'),\n  classNames('col-lg-2'),\n  Kebab.columnClass,\n];\n\nconst setIDsToEntity = (entity: any[]) => entity?.map((elm, i) => ({ ...elm, id: i }));\nconst flattenExpressions = (arr: AffinityLabel[]) =>\n  arr?.map((aff) => {\n    const affinityWithoutID = _.omit(aff, 'id');\n\n    return aff.operator === 'Exists' || aff.operator === 'DoesNotExist'\n      ? { ...affinityWithoutID, values: [] }\n      : affinityWithoutID;\n  });\n\nconst getNodeAffinityRows = (nodeAffinity: NodeAffinity): AffinityRowData[] => {\n  const requiredTerms = getNodeAffinityRequiredTerms(nodeAffinity) || [];\n  const preferredTerms = getNodeAffinityPreferredTerms(nodeAffinity) || [];\n\n  const required = requiredTerms.map(({ matchExpressions, matchFields }, i) => ({\n    id: `node-required-${i}`,\n    type: 'nodeAffinity',\n    condition: AFFINITY_CONDITIONS.required,\n    expressions: setIDsToEntity(matchExpressions),\n    fields: setIDsToEntity(matchFields),\n  }));\n\n  const preferred = preferredTerms.map(({ preference, weight }, i) => ({\n    id: `node-preferred-${i}`,\n    weight,\n    type: 'nodeAffinity',\n    condition: AFFINITY_CONDITIONS.preferred,\n    expressions: setIDsToEntity(preference.matchExpressions),\n    fields: setIDsToEntity(preference.matchFields),\n  }));\n\n  return [...required, ...preferred] as AffinityRowData[];\n};\n\nconst getPodLikeAffinityRows = (\n  podLikeAffinity: PodAffinity,\n  isAnti: boolean = false,\n): AffinityRowData[] => {\n  const requiredTerms = getPodAffinityRequiredTerms(podLikeAffinity) || [];\n  const preferredTerms = getPodAffinityPreferredTerms(podLikeAffinity) || [];\n\n  const required = requiredTerms?.map((podAffinityTerm, i) => ({\n    id: isAnti ? `pod-anti-required-${i}` : `pod-required-${i}`,\n    type: isAnti ? 'podAntiAffinity' : 'podAffinity',\n    condition: AFFINITY_CONDITIONS.required,\n    expressions: setIDsToEntity(podAffinityTerm?.labelSelector?.matchExpressions),\n    namespaces: podAffinityTerm?.namespaces,\n    topologyKey: podAffinityTerm?.topologyKey,\n  }));\n\n  const preferred = preferredTerms?.map(({ podAffinityTerm, weight }, i) => ({\n    id: isAnti ? `pod-anti-preferred-${i}` : `pod-preferred-${i}`,\n    type: isAnti ? 'podAntiAffinity' : 'podAffinity',\n    condition: AFFINITY_CONDITIONS.preferred,\n    weight,\n    expressions: setIDsToEntity(podAffinityTerm?.labelSelector?.matchExpressions),\n    namespaces: podAffinityTerm?.namespaces,\n    topologyKey: podAffinityTerm?.topologyKey,\n  }));\n\n  return [...required, ...preferred] as AffinityRowData[];\n};\n\nexport const getRowsDataFromAffinity = (affinity: Affinity): AffinityRowData[] => [\n  ...getNodeAffinityRows(affinity?.nodeAffinity),\n  ...getPodLikeAffinityRows(affinity?.podAffinity),\n  ...getPodLikeAffinityRows(affinity?.podAntiAffinity, true),\n];\n\nconst getRequiredNodeTermFromRowData = ({\n  expressions,\n  fields,\n}: AffinityRowData): NodeAffinityTerm => ({\n  matchExpressions: flattenExpressions(expressions),\n  matchFields: flattenExpressions(fields),\n});\n\nconst getPreferredNodeTermFromRowData = ({\n  weight,\n  expressions,\n  fields,\n}: AffinityRowData): PreferredNodeAffinityTerm => ({\n  weight,\n  preference: {\n    matchExpressions: flattenExpressions(expressions),\n    matchFields: flattenExpressions(fields),\n  },\n});\n\nconst getRequiredPodTermFromRowData = ({\n  expressions,\n  topologyKey,\n}: AffinityRowData): PodAffinityTerm => ({\n  labelSelector: {\n    matchExpressions: flattenExpressions(expressions),\n  },\n  topologyKey,\n});\n\nconst getPreferredPodTermFromRowData = ({\n  weight,\n  expressions,\n  topologyKey,\n}: AffinityRowData): PreferredPodAffinityTerm => ({\n  weight,\n  podAffinityTerm: {\n    labelSelector: {\n      matchExpressions: flattenExpressions(expressions),\n    },\n    topologyKey,\n  },\n});\n\nexport const getAffinityFromRowsData = (affinityRows: AffinityRowData[]) => {\n  if (affinityRows.length === 0) {\n    return null;\n  }\n\n  const pickRows = (rowType, rowCondition, mapper) =>\n    affinityRows\n      .filter(({ type, condition }) => type === rowType && condition === rowCondition)\n      .map((rowData) => mapper(rowData));\n\n  const affinity = {\n    nodeAffinity: {\n      requiredDuringSchedulingIgnoredDuringExecution: {\n        nodeSelectorTerms: pickRows(\n          'nodeAffinity',\n          AFFINITY_CONDITIONS.required,\n          getRequiredNodeTermFromRowData,\n        ),\n      },\n      preferredDuringSchedulingIgnoredDuringExecution: pickRows(\n        'nodeAffinity',\n        AFFINITY_CONDITIONS.preferred,\n        getPreferredNodeTermFromRowData,\n      ),\n    },\n    podAffinity: {\n      requiredDuringSchedulingIgnoredDuringExecution: pickRows(\n        'podAffinity',\n        AFFINITY_CONDITIONS.required,\n        getRequiredPodTermFromRowData,\n      ),\n      preferredDuringSchedulingIgnoredDuringExecution: pickRows(\n        'podAffinity',\n        AFFINITY_CONDITIONS.preferred,\n        getPreferredPodTermFromRowData,\n      ),\n    },\n    podAntiAffinity: {\n      requiredDuringSchedulingIgnoredDuringExecution: pickRows(\n        'podAntiAffinity',\n        AFFINITY_CONDITIONS.required,\n        getRequiredPodTermFromRowData,\n      ),\n      preferredDuringSchedulingIgnoredDuringExecution: pickRows(\n        'podAntiAffinity',\n        AFFINITY_CONDITIONS.preferred,\n        getPreferredPodTermFromRowData,\n      ),\n    },\n  };\n\n  return affinity;\n};\n"]}]}