{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/components/modals/clone-pvc-modal/clone-pvc-modal.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/components/modals/clone-pvc-modal/clone-pvc-modal.tsx","mtime":1615298458590},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import './_clone-pvc-modal.scss';\nimport * as React from 'react';\nimport { Form, FormGroup, TextInput } from '@patternfly/react-core';\nimport { k8sCreate } from '@console/internal/module/k8s';\nimport { LoadingInline, ResourceIcon, humanizeBinaryBytes, withHandlePromise, } from '@console/internal/components/utils/index';\nimport { ModalBody, ModalSubmitFooter, ModalTitle, createModalLauncher, } from '@console/internal/components/factory';\nimport { PersistentVolumeClaimModel } from '@console/internal/models/index';\nimport { PrometheusEndpoint } from '@console/internal/components/graphs/helpers';\nimport { getInstantVectorStats } from '@console/internal/components/graphs/utils';\nimport { getPVCUsedCapacityQuery } from '../../../constants/queries';\nimport { usePrometheusPoll } from '@console/internal/components/graphs/prometheus-poll-hook';\nconst accessModeLabels = Object.freeze({\n    ReadWriteOnce: 'Single User (RWO)',\n    ReadWriteMany: 'Shared Access (RWX)',\n    ReadOnlyMany: 'Read Only (ROX)',\n});\nconst ClonePVCModal = withHandlePromise((props) => {\n    var _a;\n    const { close, cancel, resource, handlePromise, errorMessage, inProgress } = props;\n    const pvcName = resource.metadata.name;\n    const [clonePVCName, setClonePVCName] = React.useState(`${pvcName}-clone`);\n    const pvcUsedCapacityQuery = getPVCUsedCapacityQuery(pvcName);\n    const [response, error, loading] = usePrometheusPoll({\n        endpoint: PrometheusEndpoint.QUERY,\n        query: pvcUsedCapacityQuery,\n        namespace: resource.metadata.namespace,\n    });\n    const pvcUsedCapacityQueryResult = getInstantVectorStats(response, null, humanizeBinaryBytes);\n    const pvcUsedCapacity = ((_a = pvcUsedCapacityQueryResult === null || pvcUsedCapacityQueryResult === void 0 ? void 0 : pvcUsedCapacityQueryResult[0]) === null || _a === void 0 ? void 0 : _a.label) || 'No Data';\n    const submit = (event) => {\n        event.preventDefault();\n        const pvcCloneObj = {\n            apiVersion: PersistentVolumeClaimModel.apiVersion,\n            kind: PersistentVolumeClaimModel.kind,\n            metadata: {\n                name: clonePVCName,\n                namespace: resource.metadata.namespace,\n            },\n            spec: {\n                storageClassName: resource.spec.storageClassName,\n                dataSource: {\n                    name: pvcName,\n                    kind: PersistentVolumeClaimModel.kind,\n                    apiGroup: '',\n                },\n                accessModes: resource.spec.accessModes,\n                resources: resource.spec.resources,\n            },\n        };\n        return handlePromise(k8sCreate(PersistentVolumeClaimModel, pvcCloneObj)).then(close);\n    };\n    return (React.createElement(Form, { onSubmit: submit },\n        React.createElement(\"div\", { className: \"modal-content modal-content--no-inner-scroll\" },\n            React.createElement(ModalTitle, null, \"Clone\"),\n            React.createElement(ModalBody, null,\n                React.createElement(FormGroup, { label: \"Name\", isRequired: true, fieldId: \"ceph-clone-pvc-modal__name\" },\n                    React.createElement(TextInput, { isRequired: true, type: \"text\", name: \"ceph-clone-pvc-modal__name\", value: clonePVCName, onChange: setClonePVCName })),\n                React.createElement(\"div\", { className: \"ceph-clone-pvc-modal__details\" },\n                    React.createElement(\"p\", { className: \"text-muted\" }, \"PVC Details\"),\n                    React.createElement(\"div\", { className: \"ceph-clone-pvc-modal__details-section\" },\n                        React.createElement(\"div\", null,\n                            React.createElement(\"div\", null,\n                                React.createElement(\"p\", { className: \"ceph-clone-pvc-modal__pvc-details\" }, \"Namespace\"),\n                                React.createElement(\"p\", null,\n                                    React.createElement(ResourceIcon, { kind: \"Namespace\" }),\n                                    resource.metadata.namespace)),\n                            React.createElement(\"div\", null,\n                                React.createElement(\"p\", { className: \"ceph-clone-pvc-modal__pvc-details\" }, \"Storage Class\"),\n                                React.createElement(\"p\", null, resource.spec.storageClassName ? (React.createElement(React.Fragment, null,\n                                    React.createElement(ResourceIcon, { kind: \"StorageClass\" }),\n                                    resource.spec.storageClassName)) : ('None')))),\n                        React.createElement(\"div\", null,\n                            React.createElement(\"div\", null,\n                                React.createElement(\"p\", { className: \"ceph-clone-pvc-modal__pvc-details\" }, \"Requested Capacity\"),\n                                React.createElement(\"p\", null, resource.spec.resources.requests.storage)),\n                            React.createElement(\"div\", null,\n                                React.createElement(\"p\", { className: \"ceph-clone-pvc-modal__pvc-details\" }, \"Used Capacity\"),\n                                React.createElement(\"div\", null,\n                                    !loading && !error && pvcUsedCapacity,\n                                    loading && React.createElement(LoadingInline, null),\n                                    !loading && error && 'No Data'))),\n                        React.createElement(\"div\", null,\n                            React.createElement(\"div\", null,\n                                React.createElement(\"p\", { className: \"ceph-clone-pvc-modal__pvc-details\" }, \"Access Mode\"),\n                                React.createElement(\"p\", null, accessModeLabels[resource.spec.accessModes])),\n                            React.createElement(\"div\", null,\n                                React.createElement(\"p\", { className: \"ceph-clone-pvc-modal__pvc-details\" }, \"Volume Mode\"),\n                                React.createElement(\"p\", null, resource.spec.volumeMode)))))),\n            React.createElement(ModalSubmitFooter, { inProgress: inProgress, errorMessage: errorMessage, submitText: \"Clone\", cancel: cancel }))));\n});\nexport default createModalLauncher(ClonePVCModal);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/components/modals/clone-pvc-modal/clone-pvc-modal.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/components/modals/clone-pvc-modal/clone-pvc-modal.tsx"],"names":[],"mappings":"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","sourcesContent":["import './_clone-pvc-modal.scss';\n\nimport * as React from 'react';\n\nimport { Form, FormGroup, TextInput } from '@patternfly/react-core';\nimport { K8sResourceKind, k8sCreate } from '@console/internal/module/k8s';\nimport {\n  LoadingInline,\n  ResourceIcon,\n  humanizeBinaryBytes,\n  withHandlePromise,\n} from '@console/internal/components/utils/index';\nimport {\n  ModalBody,\n  ModalComponentProps,\n  ModalSubmitFooter,\n  ModalTitle,\n  createModalLauncher,\n} from '@console/internal/components/factory';\n\nimport { DataPoint } from '@console/internal/components/graphs/index';\nimport { HandlePromiseProps } from '@console/internal/components/utils/promise-component';\nimport { PersistentVolumeClaimModel } from '@console/internal/models/index';\nimport { PrometheusEndpoint } from '@console/internal/components/graphs/helpers';\nimport { getInstantVectorStats } from '@console/internal/components/graphs/utils';\nimport { getPVCUsedCapacityQuery } from '../../../constants/queries';\nimport { usePrometheusPoll } from '@console/internal/components/graphs/prometheus-poll-hook';\n\nconst accessModeLabels = Object.freeze({\n  ReadWriteOnce: 'Single User (RWO)',\n  ReadWriteMany: 'Shared Access (RWX)',\n  ReadOnlyMany: 'Read Only (ROX)',\n});\n\nconst ClonePVCModal = withHandlePromise((props: ClonePVCModalProps) => {\n  const { close, cancel, resource, handlePromise, errorMessage, inProgress } = props;\n  const pvcName: string = resource.metadata.name;\n  const [clonePVCName, setClonePVCName] = React.useState(`${pvcName}-clone`);\n\n  const pvcUsedCapacityQuery: string = getPVCUsedCapacityQuery(pvcName);\n\n  const [response, error, loading] = usePrometheusPoll({\n    endpoint: PrometheusEndpoint.QUERY,\n    query: pvcUsedCapacityQuery,\n    namespace: resource.metadata.namespace,\n  });\n\n  const pvcUsedCapacityQueryResult: DataPoint[] = getInstantVectorStats(\n    response,\n    null,\n    humanizeBinaryBytes,\n  );\n\n  const pvcUsedCapacity = pvcUsedCapacityQueryResult?.[0]?.label || 'No Data';\n\n  const submit = (event: React.FormEvent<EventTarget>) => {\n    event.preventDefault();\n\n    const pvcCloneObj = {\n      apiVersion: PersistentVolumeClaimModel.apiVersion,\n      kind: PersistentVolumeClaimModel.kind,\n      metadata: {\n        name: clonePVCName,\n        namespace: resource.metadata.namespace,\n      },\n      spec: {\n        storageClassName: resource.spec.storageClassName,\n        dataSource: {\n          name: pvcName,\n          kind: PersistentVolumeClaimModel.kind,\n          apiGroup: '',\n        },\n        accessModes: resource.spec.accessModes,\n        resources: resource.spec.resources,\n      },\n    };\n\n    return handlePromise(k8sCreate(PersistentVolumeClaimModel, pvcCloneObj)).then(close);\n  };\n\n  return (\n    <Form onSubmit={submit}>\n      <div className=\"modal-content modal-content--no-inner-scroll\">\n        <ModalTitle>Clone</ModalTitle>\n        <ModalBody>\n          <FormGroup label=\"Name\" isRequired fieldId=\"ceph-clone-pvc-modal__name\">\n            <TextInput\n              isRequired\n              type=\"text\"\n              name=\"ceph-clone-pvc-modal__name\"\n              value={clonePVCName}\n              onChange={setClonePVCName}\n            />\n          </FormGroup>\n          <div className=\"ceph-clone-pvc-modal__details\">\n            <p className=\"text-muted\">PVC Details</p>\n            <div className=\"ceph-clone-pvc-modal__details-section\">\n              <div>\n                <div>\n                  <p className=\"ceph-clone-pvc-modal__pvc-details\">Namespace</p>\n                  <p>\n                    <ResourceIcon kind=\"Namespace\" />\n                    {resource.metadata.namespace}\n                  </p>\n                </div>\n                <div>\n                  <p className=\"ceph-clone-pvc-modal__pvc-details\">Storage Class</p>\n                  <p>\n                    {resource.spec.storageClassName ? (\n                      <>\n                        <ResourceIcon kind=\"StorageClass\" />\n                        {resource.spec.storageClassName}\n                      </>\n                    ) : (\n                      'None'\n                    )}\n                  </p>\n                </div>\n              </div>\n              <div>\n                <div>\n                  <p className=\"ceph-clone-pvc-modal__pvc-details\">Requested Capacity</p>\n                  <p>{resource.spec.resources.requests.storage}</p>\n                </div>\n                <div>\n                  <p className=\"ceph-clone-pvc-modal__pvc-details\">Used Capacity</p>\n                  <div>\n                    {!loading && !error && pvcUsedCapacity}\n                    {loading && <LoadingInline />}\n                    {!loading && error && 'No Data'}\n                  </div>\n                </div>\n              </div>\n              <div>\n                <div>\n                  <p className=\"ceph-clone-pvc-modal__pvc-details\">Access Mode</p>\n                  <p>{accessModeLabels[resource.spec.accessModes]}</p>\n                </div>\n                <div>\n                  <p className=\"ceph-clone-pvc-modal__pvc-details\">Volume Mode</p>\n                  <p>{resource.spec.volumeMode}</p>\n                </div>\n              </div>\n            </div>\n          </div>\n        </ModalBody>\n        <ModalSubmitFooter\n          inProgress={inProgress}\n          errorMessage={errorMessage}\n          submitText=\"Clone\"\n          cancel={cancel}\n        />\n      </div>\n    </Form>\n  );\n});\n\nexport type ClonePVCModalProps = {\n  resource?: K8sResourceKind;\n} & HandlePromiseProps &\n  ModalComponentProps;\n\nexport default createModalLauncher(ClonePVCModal);\n"]}]}