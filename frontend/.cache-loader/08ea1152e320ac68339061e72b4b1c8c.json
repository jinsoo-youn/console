{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/expand-collapse.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/expand-collapse.tsx","mtime":1616735742480},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { Expandable } from '@patternfly/react-core';\nexport const ExpandCollapse = ({ textCollapsed, textExpanded, children, }) => {\n    const [isExpanded, toggleExpandCollapse] = React.useState(false);\n    return (React.createElement(Expandable, { toggleText: isExpanded ? textExpanded : textCollapsed, onToggle: () => toggleExpandCollapse(!isExpanded) }, children));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/expand-collapse.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/expand-collapse.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,UAAU,EAAE,MAAM,wBAAwB,CAAC;AAOpD,MAAM,CAAC,MAAM,cAAc,GAAkC,CAAC,EAC5D,aAAa,EACb,YAAY,EACZ,QAAQ,GACT,EAAE,EAAE;IACH,MAAM,CAAC,UAAU,EAAE,oBAAoB,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACjE,OAAO,CACL,oBAAC,UAAU,IACT,UAAU,EAAE,UAAU,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,aAAa,EACrD,QAAQ,EAAE,GAAG,EAAE,CAAC,oBAAoB,CAAC,CAAC,UAAU,CAAC,IAEhD,QAAQ,CACE,CACd,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { Expandable } from '@patternfly/react-core';\n\ninterface ExpandCollapseProps {\n  textExpanded: string;\n  textCollapsed: string;\n}\n\nexport const ExpandCollapse: React.FC<ExpandCollapseProps> = ({\n  textCollapsed,\n  textExpanded,\n  children,\n}) => {\n  const [isExpanded, toggleExpandCollapse] = React.useState(false);\n  return (\n    <Expandable\n      toggleText={isExpanded ? textExpanded : textCollapsed}\n      onToggle={() => toggleExpandCollapse(!isExpanded)}\n    >\n      {children}\n    </Expandable>\n  );\n};\n"]}]}