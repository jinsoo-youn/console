{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/dashboard/dashboards-page/cluster-dashboard/inventory-card.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/dashboard/dashboards-page/cluster-dashboard/inventory-card.tsx","mtime":1615793099690},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport { ResourceInventoryItem } from '@console/shared/src/components/dashboard/inventory-card/InventoryItem';\nimport { withDashboardResources } from '../../with-dashboard-resources';\nimport { referenceForModel } from '../../../../module/k8s';\nimport { AsyncComponent } from '../../../utils';\nimport { useExtensions, isDashboardsOverviewInventoryItem, isDashboardsOverviewInventoryItemReplacement } from '@console/plugin-sdk';\nimport { useK8sWatchResource, useK8sWatchResources } from '../../../utils/k8s-watch-hook';\nimport { useTranslation } from 'react-i18next';\nconst mergeItems = (items, replacements) => items.map(item => replacements.find(r => r.properties.model === item.properties.model) || item);\nconst getFirehoseResource = (model) => ({\n    isList: true,\n    kind: model.crd ? referenceForModel(model) : model.kind,\n    prop: 'resource',\n});\nconst ClusterInventoryItem = withDashboardResources(React.memo(({ model, mapper, useAbbr, additionalResources, expandedComponent }) => {\n    const mainResource = React.useMemo(() => getFirehoseResource(model), [model]);\n    const otherResources = React.useMemo(() => additionalResources || {}, [additionalResources]);\n    const [resourceData, resourceLoaded, resourceLoadError] = useK8sWatchResource(mainResource);\n    const resources = useK8sWatchResources(otherResources);\n    const additionalResourcesData = {};\n    let additionalResourcesLoaded = true;\n    let additionalResourcesLoadError = false;\n    if (additionalResources) {\n        additionalResourcesLoaded = Object.keys(additionalResources)\n            .filter(key => !additionalResources[key].optional)\n            .every(key => resources[key].loaded);\n        Object.keys(additionalResources).forEach(key => {\n            additionalResourcesData[key] = resources[key].data;\n        });\n        additionalResourcesLoadError = Object.keys(additionalResources)\n            .filter(key => !additionalResources[key].optional)\n            .some(key => !!resources[key].loadError);\n    }\n    const ExpandedComponent = React.useCallback(() => React.createElement(AsyncComponent, { loader: expandedComponent, resource: resourceData, additionalResources: additionalResourcesData }), [resourceData, additionalResourcesData, expandedComponent]);\n    return React.createElement(ResourceInventoryItem, { isLoading: !resourceLoaded || !additionalResourcesLoaded, error: !!resourceLoadError || additionalResourcesLoadError, kind: model, resources: resourceData, mapper: mapper, useAbbr: useAbbr, additionalResources: additionalResourcesData, ExpandedComponent: expandedComponent ? ExpandedComponent : null });\n}));\nexport const InventoryCard = () => {\n    const itemExtensions = useExtensions(isDashboardsOverviewInventoryItem);\n    const replacementExtensions = useExtensions(isDashboardsOverviewInventoryItemReplacement);\n    const mergedItems = React.useMemo(() => mergeItems(itemExtensions, replacementExtensions), [itemExtensions, replacementExtensions]);\n    const { t } = useTranslation();\n    return (React.createElement(DashboardCard, { \"data-test-id\": \"inventory-card\" },\n        React.createElement(DashboardCardHeader, null,\n            React.createElement(DashboardCardTitle, null, t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERINVENTORY_1'))),\n        React.createElement(DashboardCardBody, null, mergedItems.map(item => (React.createElement(ClusterInventoryItem, { key: item.properties.model.kind, model: item.properties.model, mapper: item.properties.mapper, additionalResources: item.properties.additionalResources, useAbbr: item.properties.useAbbr, expandedComponent: item.properties.expandedComponent }))))));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/dashboard/dashboards-page/cluster-dashboard/inventory-card.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/dashboard/dashboards-page/cluster-dashboard/inventory-card.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport { ResourceInventoryItem, StatusGroupMapper } from '@console/shared/src/components/dashboard/inventory-card/InventoryItem';\nimport { DashboardItemProps, withDashboardResources } from '../../with-dashboard-resources';\nimport { K8sKind, referenceForModel, K8sResourceCommon } from '../../../../module/k8s';\nimport { AsyncComponent } from '../../../utils';\nimport { useExtensions, DashboardsOverviewInventoryItem, DashboardsOverviewInventoryItemReplacement, isDashboardsOverviewInventoryItem, isDashboardsOverviewInventoryItemReplacement, LazyLoader } from '@console/plugin-sdk';\nimport { useK8sWatchResource, useK8sWatchResources, WatchK8sResources } from '../../../utils/k8s-watch-hook';\nimport { useTranslation } from 'react-i18next';\n\nconst mergeItems = (items: DashboardsOverviewInventoryItem[], replacements: DashboardsOverviewInventoryItemReplacement[]) => items.map(item => replacements.find(r => r.properties.model === item.properties.model) || item);\n\nconst getFirehoseResource = (model: K8sKind) => ({\n  isList: true,\n  kind: model.crd ? referenceForModel(model) : model.kind,\n  prop: 'resource',\n});\n\nconst ClusterInventoryItem = withDashboardResources<ClusterInventoryItemProps>(\n  React.memo(({ model, mapper, useAbbr, additionalResources, expandedComponent }: ClusterInventoryItemProps) => {\n    const mainResource = React.useMemo(() => getFirehoseResource(model), [model]);\n    const otherResources = React.useMemo(() => additionalResources || {}, [additionalResources]);\n    const [resourceData, resourceLoaded, resourceLoadError] = useK8sWatchResource<K8sResourceCommon[]>(mainResource);\n    const resources = useK8sWatchResources(otherResources);\n\n    const additionalResourcesData = {};\n    let additionalResourcesLoaded = true;\n    let additionalResourcesLoadError = false;\n    if (additionalResources) {\n      additionalResourcesLoaded = Object.keys(additionalResources)\n        .filter(key => !additionalResources[key].optional)\n        .every(key => resources[key].loaded);\n      Object.keys(additionalResources).forEach(key => {\n        additionalResourcesData[key] = resources[key].data;\n      });\n      additionalResourcesLoadError = Object.keys(additionalResources)\n        .filter(key => !additionalResources[key].optional)\n        .some(key => !!resources[key].loadError);\n    }\n\n    const ExpandedComponent = React.useCallback(() => <AsyncComponent loader={expandedComponent} resource={resourceData} additionalResources={additionalResourcesData} />, [resourceData, additionalResourcesData, expandedComponent]);\n\n    return <ResourceInventoryItem isLoading={!resourceLoaded || !additionalResourcesLoaded} error={!!resourceLoadError || additionalResourcesLoadError} kind={model} resources={resourceData} mapper={mapper} useAbbr={useAbbr} additionalResources={additionalResourcesData} ExpandedComponent={expandedComponent ? ExpandedComponent : null} />;\n  }),\n);\n\nexport const InventoryCard = () => {\n  const itemExtensions = useExtensions<DashboardsOverviewInventoryItem>(isDashboardsOverviewInventoryItem);\n\n  const replacementExtensions = useExtensions<DashboardsOverviewInventoryItemReplacement>(isDashboardsOverviewInventoryItemReplacement);\n\n  const mergedItems = React.useMemo(() => mergeItems(itemExtensions, replacementExtensions), [itemExtensions, replacementExtensions]);\n  const { t } = useTranslation();\n  return (\n    <DashboardCard data-test-id=\"inventory-card\">\n      <DashboardCardHeader>\n        <DashboardCardTitle>{t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERINVENTORY_1')}</DashboardCardTitle>\n      </DashboardCardHeader>\n      <DashboardCardBody>\n        {mergedItems.map(item => (\n          <ClusterInventoryItem key={item.properties.model.kind} model={item.properties.model} mapper={item.properties.mapper} additionalResources={item.properties.additionalResources} useAbbr={item.properties.useAbbr} expandedComponent={item.properties.expandedComponent} />\n        ))}\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n};\n\ntype ClusterInventoryItemProps = DashboardItemProps & {\n  model: K8sKind;\n  mapper?: StatusGroupMapper;\n  useAbbr?: boolean;\n  additionalResources?: WatchK8sResources<any>;\n  expandedComponent?: LazyLoader;\n};\n"]}]}