{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/breakdown-card/breakdown-chart.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/breakdown-card/breakdown-chart.tsx","mtime":1616735742360},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Chart, ChartAxis, ChartBar, ChartLabel, ChartLegend, ChartStack, ChartThemeColor, ChartTooltip, } from '@patternfly/react-charts';\nimport { Tooltip } from '@patternfly/react-core';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { resourcePathFromModel } from '@console/internal/components/utils';\nimport { CEPH_STORAGE_NAMESPACE } from '@console/ceph-storage-plugin/src/constants';\nimport { getBarRadius } from './utils';\nimport { OTHER, CLUSTERWIDE, BUCKETCLASSKIND } from './consts';\nimport './breakdown-card.scss';\nexport const LinkableLegend = React.memo((props) => {\n    const { metricModel, datum, ocsVersion } = props;\n    let href = resourcePathFromModel(metricModel, datum.link, datum.ns);\n    const customLegend = (React.createElement(Tooltip, { content: datum.link, enableFlip: true },\n        React.createElement(ChartLabel, Object.assign({}, props, { lineHeight: 1.2, style: [\n                Object.assign(Object.assign({}, datum.labels), { fontSize: 9 }),\n                { fill: 'black', fontSize: 8 },\n            ] }))));\n    if (datum.labelId === OTHER || datum.labelId === CLUSTERWIDE) {\n        return customLegend;\n    }\n    if (metricModel.kind === BUCKETCLASSKIND) {\n        if (ocsVersion) {\n            href = `/k8s/ns/${CEPH_STORAGE_NAMESPACE}/clusterserviceversions/${ocsVersion}/${referenceForModel(metricModel)}/${datum.link}`;\n        }\n        else {\n            return customLegend;\n        }\n    }\n    return (React.createElement(Link, { to: href, className: \"capacity-breakdown-card__legend-link\" }, customLegend));\n});\nexport const BreakdownChart = ({ data, legends, metricModel, ocsVersion, }) => (React.createElement(React.Fragment, null,\n    React.createElement(Chart, { legendPosition: \"bottom-left\", legendComponent: React.createElement(ChartLegend, { themeColor: ChartThemeColor.multiOrdered, data: legends, y: 40, labelComponent: React.createElement(LinkableLegend, { metricModel: metricModel, ocsVersion: ocsVersion }), orientation: \"horizontal\", symbolSpacer: 7, gutter: 10, height: 50, style: { labels: { fontSize: 8 } } }), height: 60, padding: {\n            bottom: 35,\n            top: 0,\n            right: 0,\n            left: 0,\n        } },\n        React.createElement(ChartAxis, { style: { axis: { stroke: 'none' }, ticks: { stroke: 'none' } }, tickFormat: () => '' }),\n        React.createElement(ChartStack, { horizontal: true }, data.map((d, index) => (React.createElement(ChartBar, { key: d.id, style: { data: { stroke: 'white', strokeWidth: 0.7, fill: d.fill } }, cornerRadius: getBarRadius(index, data.length), barWidth: 12, padding: 0, data: [d], labelComponent: React.createElement(ChartTooltip, { dx: 0, style: { fontSize: 8, padding: 5 } }) })))))));\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/breakdown-card/breakdown-chart.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/breakdown-card/breakdown-chart.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  Chart,\n  ChartAxis,\n  ChartBar,\n  ChartLabel,\n  ChartLegend,\n  ChartStack,\n  ChartThemeColor,\n  ChartTooltip,\n} from '@patternfly/react-charts';\nimport { Tooltip } from '@patternfly/react-core';\nimport { K8sKind, referenceForModel } from '@console/internal/module/k8s';\nimport { resourcePathFromModel } from '@console/internal/components/utils';\nimport { CEPH_STORAGE_NAMESPACE } from '@console/ceph-storage-plugin/src/constants';\nimport { getBarRadius, StackDataPoint } from './utils';\nimport { OTHER, CLUSTERWIDE, BUCKETCLASSKIND } from './consts';\nimport './breakdown-card.scss';\n\nexport const LinkableLegend: React.FC<LinkableLegendProps> = React.memo(\n  (props: LinkableLegendProps) => {\n    const { metricModel, datum, ocsVersion } = props;\n    let href: string = resourcePathFromModel(metricModel, datum.link, datum.ns);\n    const customLegend = (\n      <Tooltip content={datum.link} enableFlip>\n        <ChartLabel\n          {...props}\n          lineHeight={1.2}\n          style={[\n            { ...datum.labels, fontSize: 9 },\n            { fill: 'black', fontSize: 8 },\n          ]}\n        />\n      </Tooltip>\n    );\n    if (datum.labelId === OTHER || datum.labelId === CLUSTERWIDE) {\n      return customLegend;\n    }\n    if (metricModel.kind === BUCKETCLASSKIND) {\n      if (ocsVersion) {\n        href = `/k8s/ns/${CEPH_STORAGE_NAMESPACE}/clusterserviceversions/${ocsVersion}/${referenceForModel(\n          metricModel,\n        )}/${datum.link}`;\n      } else {\n        return customLegend;\n      }\n    }\n    return (\n      <Link to={href} className=\"capacity-breakdown-card__legend-link\">\n        {customLegend}\n      </Link>\n    );\n  },\n);\n\nexport const BreakdownChart: React.FC<BreakdownChartProps> = ({\n  data,\n  legends,\n  metricModel,\n  ocsVersion,\n}) => (\n  <>\n    <Chart\n      legendPosition=\"bottom-left\"\n      legendComponent={\n        <ChartLegend\n          themeColor={ChartThemeColor.multiOrdered}\n          data={legends}\n          y={40}\n          labelComponent={<LinkableLegend metricModel={metricModel} ocsVersion={ocsVersion} />}\n          orientation=\"horizontal\"\n          symbolSpacer={7}\n          gutter={10}\n          height={50}\n          style={{ labels: { fontSize: 8 } }}\n        />\n      }\n      height={60}\n      padding={{\n        bottom: 35,\n        top: 0,\n        right: 0,\n        left: 0,\n      }}\n    >\n      <ChartAxis\n        style={{ axis: { stroke: 'none' }, ticks: { stroke: 'none' } }}\n        tickFormat={() => ''}\n      />\n      <ChartStack horizontal>\n        {data.map((d: StackDataPoint, index) => (\n          <ChartBar\n            key={d.id}\n            style={{ data: { stroke: 'white', strokeWidth: 0.7, fill: d.fill } }}\n            cornerRadius={getBarRadius(index, data.length)}\n            barWidth={12}\n            padding={0}\n            data={[d]}\n            labelComponent={<ChartTooltip dx={0} style={{ fontSize: 8, padding: 5 }} />}\n          />\n        ))}\n      </ChartStack>\n    </Chart>\n  </>\n);\n\nexport type BreakdownChartProps = {\n  data: StackDataPoint[];\n  legends: any[];\n  metricModel: K8sKind;\n  ocsVersion?: string;\n};\n\nexport type LinkableLegendProps = {\n  metricModel: K8sKind;\n  datum?: {\n    [key: string]: any;\n  };\n  ocsVersion?: string;\n};\n"]}]}