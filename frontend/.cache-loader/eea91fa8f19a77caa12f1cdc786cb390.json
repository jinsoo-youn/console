{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/anchors/SVGAnchor.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/anchors/SVGAnchor.ts","mtime":1615298458710},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { observable } from 'mobx';\nimport Point from '../geom/Point';\nimport { getEllipseAnchorPoint, getPathAnchorPoint, getPolygonAnchorPoint, getRectAnchorPoint, } from '../utils/anchor-utils';\nimport AbstractAnchor from './AbstractAnchor';\nexport default class SVGAnchor extends AbstractAnchor {\n    setSVGElement(svgElement) {\n        this.svgElement = svgElement;\n    }\n    getCircleLocation(circle, reference) {\n        const center = new Point(circle.cx.baseVal.value, circle.cy.baseVal.value);\n        this.owner.translateToParent(center);\n        const diameter = circle.r.baseVal.value * 2 + this.offset * 2;\n        return getEllipseAnchorPoint(center, diameter, diameter, reference);\n    }\n    getEllipseLocation(ellipse, reference) {\n        const center = new Point(ellipse.cx.baseVal.value, ellipse.cy.baseVal.value);\n        this.owner.translateToParent(center);\n        const offset2x = this.offset * 2;\n        const width = ellipse.rx.baseVal.value * 2 + offset2x;\n        const height = ellipse.ry.baseVal.value * 2 + offset2x;\n        return getEllipseAnchorPoint(center, width, height, reference);\n    }\n    getRectLocation(rect, reference) {\n        const width = rect.width.baseVal.value;\n        const height = rect.height.baseVal.value;\n        const center = new Point(rect.x.baseVal.value + width / 2, rect.y.baseVal.value + height / 2);\n        this.owner.translateToParent(center);\n        const offset2x = this.offset * 2;\n        return getRectAnchorPoint(center, width + offset2x, height + offset2x, reference);\n    }\n    getPathLocation(path, reference) {\n        const translatedRef = reference.clone();\n        this.owner.translateFromParent(translatedRef);\n        const anchorPoint = getPathAnchorPoint(path, translatedRef);\n        this.owner.translateToParent(anchorPoint);\n        return anchorPoint;\n    }\n    getPolygonLocation(polygon, reference) {\n        const translatedRef = reference.clone();\n        this.owner.translateFromParent(translatedRef);\n        const anchorPoint = getPolygonAnchorPoint(polygon, translatedRef);\n        this.owner.translateToParent(anchorPoint);\n        return anchorPoint;\n    }\n    getLocation(reference) {\n        var _a;\n        if ((_a = this.svgElement) === null || _a === void 0 ? void 0 : _a.viewportElement) {\n            if (this.svgElement instanceof SVGCircleElement) {\n                return this.getCircleLocation(this.svgElement, reference);\n            }\n            if (this.svgElement instanceof SVGEllipseElement) {\n                return this.getEllipseLocation(this.svgElement, reference);\n            }\n            if (this.svgElement instanceof SVGRectElement) {\n                return this.getRectLocation(this.svgElement, reference);\n            }\n            if (this.svgElement instanceof SVGPathElement) {\n                return this.getPathLocation(this.svgElement, reference);\n            }\n            if (this.svgElement instanceof SVGPolygonElement) {\n                return this.getPolygonLocation(this.svgElement, reference);\n            }\n        }\n        return this.owner.getBounds().getCenter();\n    }\n    getReferencePoint() {\n        var _a;\n        if (((_a = this.svgElement) === null || _a === void 0 ? void 0 : _a.viewportElement) &&\n            (this.svgElement instanceof SVGCircleElement ||\n                this.svgElement instanceof SVGEllipseElement ||\n                this.svgElement instanceof SVGRectElement ||\n                this.svgElement instanceof SVGPathElement ||\n                this.svgElement instanceof SVGPolygonElement)) {\n            const bbox = this.svgElement.getBBox();\n            const ref = new Point(bbox.x + bbox.width / 2, bbox.y + bbox.height / 2);\n            // this touches the bounds for non-groups\n            this.owner.translateToParent(ref);\n            // touch the bounds to force a re-render in case this anchor is for a group\n            this.owner.getBounds();\n            return ref;\n        }\n        return super.getReferencePoint();\n    }\n}\n__decorate([\n    observable.ref\n], SVGAnchor.prototype, \"svgElement\", void 0);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/anchors/SVGAnchor.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/anchors/SVGAnchor.ts"],"names":[],"mappings":"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","sourcesContent":["import { observable } from 'mobx';\nimport Point from '../geom/Point';\nimport {\n  getEllipseAnchorPoint,\n  getPathAnchorPoint,\n  getPolygonAnchorPoint,\n  getRectAnchorPoint,\n} from '../utils/anchor-utils';\nimport AbstractAnchor from './AbstractAnchor';\n\nexport default class SVGAnchor extends AbstractAnchor {\n  @observable.ref\n  private svgElement?: SVGElement;\n\n  setSVGElement(svgElement: SVGElement) {\n    this.svgElement = svgElement;\n  }\n\n  private getCircleLocation(circle: SVGCircleElement, reference: Point): Point {\n    const center: Point = new Point(circle.cx.baseVal.value, circle.cy.baseVal.value);\n    this.owner.translateToParent(center);\n    const diameter = circle.r.baseVal.value * 2 + this.offset * 2;\n\n    return getEllipseAnchorPoint(center, diameter, diameter, reference);\n  }\n\n  private getEllipseLocation(ellipse: SVGEllipseElement, reference: Point): Point {\n    const center: Point = new Point(ellipse.cx.baseVal.value, ellipse.cy.baseVal.value);\n    this.owner.translateToParent(center);\n    const offset2x = this.offset * 2;\n    const width = ellipse.rx.baseVal.value * 2 + offset2x;\n    const height = ellipse.ry.baseVal.value * 2 + offset2x;\n\n    return getEllipseAnchorPoint(center, width, height, reference);\n  }\n\n  private getRectLocation(rect: SVGRectElement, reference: Point): Point {\n    const width = rect.width.baseVal.value;\n    const height = rect.height.baseVal.value;\n\n    const center: Point = new Point(\n      rect.x.baseVal.value + width / 2,\n      rect.y.baseVal.value + height / 2,\n    );\n    this.owner.translateToParent(center);\n\n    const offset2x = this.offset * 2;\n    return getRectAnchorPoint(center, width + offset2x, height + offset2x, reference);\n  }\n\n  private getPathLocation(path: SVGPathElement, reference: Point): Point {\n    const translatedRef = reference.clone();\n    this.owner.translateFromParent(translatedRef);\n    const anchorPoint = getPathAnchorPoint(path, translatedRef);\n    this.owner.translateToParent(anchorPoint);\n    return anchorPoint;\n  }\n\n  private getPolygonLocation(polygon: SVGPolygonElement, reference: Point): Point {\n    const translatedRef = reference.clone();\n    this.owner.translateFromParent(translatedRef);\n    const anchorPoint = getPolygonAnchorPoint(polygon, translatedRef);\n    this.owner.translateToParent(anchorPoint);\n    return anchorPoint;\n  }\n\n  getLocation(reference: Point): Point {\n    if (this.svgElement?.viewportElement) {\n      if (this.svgElement instanceof SVGCircleElement) {\n        return this.getCircleLocation(this.svgElement, reference);\n      }\n\n      if (this.svgElement instanceof SVGEllipseElement) {\n        return this.getEllipseLocation(this.svgElement, reference);\n      }\n\n      if (this.svgElement instanceof SVGRectElement) {\n        return this.getRectLocation(this.svgElement, reference);\n      }\n\n      if (this.svgElement instanceof SVGPathElement) {\n        return this.getPathLocation(this.svgElement, reference);\n      }\n\n      if (this.svgElement instanceof SVGPolygonElement) {\n        return this.getPolygonLocation(this.svgElement, reference);\n      }\n    }\n\n    return this.owner.getBounds().getCenter();\n  }\n\n  getReferencePoint(): Point {\n    if (\n      this.svgElement?.viewportElement &&\n      (this.svgElement instanceof SVGCircleElement ||\n        this.svgElement instanceof SVGEllipseElement ||\n        this.svgElement instanceof SVGRectElement ||\n        this.svgElement instanceof SVGPathElement ||\n        this.svgElement instanceof SVGPolygonElement)\n    ) {\n      const bbox = this.svgElement.getBBox();\n      const ref = new Point(bbox.x + bbox.width / 2, bbox.y + bbox.height / 2);\n\n      // this touches the bounds for non-groups\n      this.owner.translateToParent(ref);\n\n      // touch the bounds to force a re-render in case this anchor is for a group\n      this.owner.getBounds();\n\n      return ref;\n    }\n\n    return super.getReferencePoint();\n  }\n}\n"]}]}