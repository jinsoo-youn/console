{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/actions/k8s.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/actions/k8s.ts","mtime":1615298458720},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as _ from 'lodash-es';\nimport { action } from 'typesafe-actions';\nimport { cacheResources, getResources as getResources_, } from '../module/k8s/get-resources';\nimport { k8sList, k8sWatch, k8sGet } from '../module/k8s/resource';\nimport { makeReduxID } from '../components/utils/k8s-watcher';\nimport { APIServiceModel } from '../models';\nimport { coFetchJSON } from '../co-fetch';\nimport { referenceForModel } from '../module/k8s';\nexport var ActionType;\n(function (ActionType) {\n    ActionType[\"ReceivedResources\"] = \"resources\";\n    ActionType[\"GetResourcesInFlight\"] = \"getResourcesInFlight\";\n    ActionType[\"SetAPIGroups\"] = \"setAPIGroups\";\n    ActionType[\"StartWatchK8sObject\"] = \"startWatchK8sObject\";\n    ActionType[\"StartWatchK8sList\"] = \"startWatchK8sList\";\n    ActionType[\"StopWatchK8s\"] = \"stopWatchK8s\";\n    ActionType[\"ModifyObject\"] = \"modifyObject\";\n    ActionType[\"Loaded\"] = \"loaded\";\n    ActionType[\"Errored\"] = \"errored\";\n    ActionType[\"BulkAddToList\"] = \"bulkAddToList\";\n    ActionType[\"FilterList\"] = \"filterList\";\n    ActionType[\"UpdateListFromWS\"] = \"updateListFromWS\";\n})(ActionType || (ActionType = {}));\nconst WS = {};\nconst POLLs = {};\nconst REF_COUNTS = {};\nconst nop = () => { };\nconst paginationLimit = 250;\nconst apiGroups = 'apiGroups';\nexport const updateListFromWS = (id, k8sObjects) => action(ActionType.UpdateListFromWS, { id, k8sObjects });\nexport const bulkAddToList = (id, k8sObjects) => action(ActionType.BulkAddToList, { id, k8sObjects });\nexport const loaded = (id, k8sObjects) => action(ActionType.Loaded, { id, k8sObjects });\nexport const errored = (id, k8sObjects) => action(ActionType.Errored, { id, k8sObjects });\nexport const modifyObject = (id, k8sObjects) => action(ActionType.ModifyObject, { id, k8sObjects });\nexport const getResourcesInFlight = () => action(ActionType.GetResourcesInFlight);\nexport const receivedResources = (resources) => action(ActionType.ReceivedResources, { resources });\nexport const getResources = () => (dispatch) => {\n    dispatch(getResourcesInFlight());\n    getResources_()\n        .then((resources) => {\n        // Cache the resources whenever discovery completes to improve console load times.\n        cacheResources(resources);\n        dispatch(receivedResources(resources));\n    })\n        // eslint-disable-next-line no-console\n        .catch((err) => console.error(err));\n};\nexport const filterList = (id, name, value) => action(ActionType.FilterList, { id, name, value });\nexport const startWatchK8sObject = (id) => action(ActionType.StartWatchK8sObject, { id });\nexport const watchK8sObject = (id, name, namespace, query, k8sType) => (dispatch, getState) => {\n    if (id in REF_COUNTS) {\n        REF_COUNTS[id] += 1;\n        return nop;\n    }\n    dispatch(startWatchK8sObject(id));\n    REF_COUNTS[id] = 1;\n    if (query.name) {\n        query.fieldSelector = `metadata.name=${query.name}`;\n        delete query.name;\n    }\n    const poller = () => {\n        k8sGet(k8sType, name, namespace).then((o) => dispatch(modifyObject(id, o)), (e) => dispatch(errored(id, e)));\n    };\n    POLLs[id] = setInterval(poller, 30 * 1000);\n    poller();\n    if (!_.get(k8sType, 'verbs', ['watch']).includes('watch')) {\n        // eslint-disable-next-line no-console\n        console.warn(`${referenceForModel(k8sType)} does not support watching`);\n        return;\n    }\n    const { subprotocols } = getState().UI.get('impersonate', {});\n    WS[id] = k8sWatch(k8sType, Object.assign(Object.assign({}, query), { subprotocols })).onbulkmessage((events) => events.forEach((e) => dispatch(modifyObject(id, e.object))));\n};\nexport const stopWatchK8s = (id) => action(ActionType.StopWatchK8s, { id });\nexport const stopK8sWatch = (id) => (dispatch) => {\n    REF_COUNTS[id] -= 1;\n    if (REF_COUNTS[id] > 0) {\n        return nop;\n    }\n    const ws = WS[id];\n    if (ws) {\n        ws.destroy();\n        delete WS[id];\n    }\n    const poller = POLLs[id];\n    clearInterval(poller);\n    delete POLLs[id];\n    delete REF_COUNTS[id];\n    dispatch(stopWatchK8s(id));\n};\nexport const startWatchK8sList = (id, query) => action(ActionType.StartWatchK8sList, { id, query });\nexport const watchK8sList = (id, query, k8skind, extraAction) => (dispatch, getState) => {\n    // Only one watch per unique list ID\n    if (id in REF_COUNTS) {\n        REF_COUNTS[id] += 1;\n        return nop;\n    }\n    dispatch(startWatchK8sList(id, query));\n    REF_COUNTS[id] = 1;\n    const incrementallyLoad = (continueToken = '') => __awaiter(void 0, void 0, void 0, function* () {\n        // the list may not still be around...\n        if (!REF_COUNTS[id]) {\n            // let .then handle the cleanup\n            return;\n        }\n        const response = yield k8sList(k8skind, Object.assign(Object.assign({ limit: paginationLimit }, query), (continueToken ? { continue: continueToken } : {})), true);\n        if (!REF_COUNTS[id]) {\n            return;\n        }\n        if (!continueToken) {\n            [loaded, extraAction].forEach((f) => f && dispatch(f(id, response.items)));\n        }\n        else {\n            dispatch(bulkAddToList(id, response.items));\n        }\n        if (response.metadata.continue) {\n            return incrementallyLoad(response.metadata.continue);\n        }\n        return response.metadata.resourceVersion;\n    });\n    /**\n     * Incrementally fetch list (XHR) using k8s pagination then use its resourceVersion to\n     *  start listening on a WS (?resourceVersion=$resourceVersion)\n     *  start the process over when:\n     *   1. the WS closes abnormally\n     *   2. the WS can not establish a connection within $TIMEOUT\n     */\n    const pollAndWatch = () => __awaiter(void 0, void 0, void 0, function* () {\n        delete POLLs[id];\n        try {\n            const resourceVersion = yield incrementallyLoad();\n            // ensure this watch should still exist because pollAndWatch is recursiveish\n            if (!REF_COUNTS[id]) {\n                // eslint-disable-next-line no-console\n                console.log(`stopped watching ${id} before finishing incremental loading.`);\n                // call cleanup function out of abundance of caution...\n                dispatch(stopK8sWatch(id));\n                return;\n            }\n            if (WS[id]) {\n                // eslint-disable-next-line no-console\n                console.warn(`Attempted to create multiple websockets for ${id}.`);\n                return;\n            }\n            if (!_.get(k8skind, 'verbs', ['watch']).includes('watch')) {\n                // eslint-disable-next-line no-console\n                console.warn(`${referenceForModel(k8skind)} does not support watching`);\n                return;\n            }\n            const { subprotocols } = getState().UI.get('impersonate', {});\n            WS[id] = k8sWatch(k8skind, Object.assign(Object.assign({}, query), { resourceVersion }), { subprotocols, timeout: 60 * 1000 });\n        }\n        catch (e) {\n            if (!REF_COUNTS[id]) {\n                // eslint-disable-next-line no-console\n                console.log(`stopped watching ${id} before finishing incremental loading with error ${e}!`);\n                // call cleanup function out of abundance of caution...\n                dispatch(stopK8sWatch(id));\n                return;\n            }\n            dispatch(errored(id, e));\n            if (!POLLs[id]) {\n                POLLs[id] = setTimeout(pollAndWatch, 15 * 1000);\n            }\n            return;\n        }\n        WS[id]\n            .onclose((event) => {\n            // Close Frame Status Codes: https://tools.ietf.org/html/rfc6455#section-7.4.1\n            if (event.code !== 1006) {\n                return;\n            }\n            // eslint-disable-next-line no-console\n            console.log('WS closed abnormally - starting polling loop over!');\n            const ws = WS[id];\n            const timedOut = true;\n            ws && ws.destroy(timedOut);\n        })\n            .ondestroy((timedOut) => {\n            if (!timedOut) {\n                return;\n            }\n            // If the WS is unsucessful for timeout duration, assume it is less work\n            //  to update the entire list and then start the WS again\n            // eslint-disable-next-line no-console\n            console.log(`${id} timed out - restarting polling`);\n            delete WS[id];\n            if (POLLs[id]) {\n                return;\n            }\n            POLLs[id] = setTimeout(pollAndWatch, 15 * 1000);\n        })\n            .onbulkmessage((events) => [updateListFromWS, extraAction].forEach((f) => f && dispatch(f(id, events))));\n    });\n    pollAndWatch();\n};\nexport const setAPIGroups = (value) => action(ActionType.SetAPIGroups, { value });\nexport const watchAPIServices = () => (dispatch, getState) => {\n    if (getState().k8s.has('apiservices') || POLLs[apiGroups]) {\n        return;\n    }\n    dispatch({ type: ActionType.GetResourcesInFlight });\n    k8sList(APIServiceModel, {})\n        .then(() => dispatch(watchK8sList(makeReduxID(APIServiceModel, {}), {}, APIServiceModel, (id, events) => {\n        // Only re-run API discovery on added or removed API services. A\n        // misbehaving API service can trigger frequent watch updates,\n        // which could cause console to thrash.\n        return events.some(({ type }) => type !== 'MODIFIED') ? getResources() : _.noop;\n    })))\n        .catch(() => {\n        const poller = () => coFetchJSON('api/kubernetes/apis').then((d) => {\n            if (d.groups.length !== getState().k8s.getIn(['RESOURCES', apiGroups], 0)) {\n                dispatch(getResources());\n            }\n            dispatch(setAPIGroups(d.groups.length));\n        });\n        POLLs[apiGroups] = setInterval(poller, 30 * 1000);\n        poller();\n    });\n};\nconst k8sActions = {\n    updateListFromWS,\n    bulkAddToList,\n    loaded,\n    errored,\n    modifyObject,\n    getResourcesInFlight,\n    receivedResources,\n    filterList,\n    startWatchK8sObject,\n    startWatchK8sList,\n    stopWatchK8s,\n    setAPIGroups,\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/actions/k8s.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/actions/k8s.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\nimport { Dispatch } from 'react-redux';\nimport { ActionType as Action, action } from 'typesafe-actions';\n\nimport {\n  cacheResources,\n  getResources as getResources_,\n  DiscoveryResources,\n} from '../module/k8s/get-resources';\nimport { k8sList, k8sWatch, k8sGet } from '../module/k8s/resource';\nimport { makeReduxID } from '../components/utils/k8s-watcher';\nimport { APIServiceModel } from '../models';\nimport { coFetchJSON } from '../co-fetch';\nimport { referenceForModel, K8sResourceKind, K8sKind } from '../module/k8s';\n\nexport enum ActionType {\n  ReceivedResources = 'resources',\n  GetResourcesInFlight = 'getResourcesInFlight',\n  SetAPIGroups = 'setAPIGroups',\n\n  StartWatchK8sObject = 'startWatchK8sObject',\n  StartWatchK8sList = 'startWatchK8sList',\n  StopWatchK8s = 'stopWatchK8s',\n  ModifyObject = 'modifyObject',\n\n  Loaded = 'loaded',\n  Errored = 'errored',\n\n  BulkAddToList = 'bulkAddToList',\n  FilterList = 'filterList',\n  UpdateListFromWS = 'updateListFromWS',\n}\n\nconst WS = {} as { [id: string]: WebSocket & any };\nconst POLLs = {};\nconst REF_COUNTS = {};\n\nconst nop = () => { };\nconst paginationLimit = 250;\nconst apiGroups = 'apiGroups';\n\ntype K8sEvent = { type: 'ADDED' | 'DELETED' | 'MODIFIED'; object: K8sResourceKind };\n\nexport const updateListFromWS = (id: string, k8sObjects: K8sEvent[]) =>\n  action(ActionType.UpdateListFromWS, { id, k8sObjects });\nexport const bulkAddToList = (id: string, k8sObjects: K8sResourceKind[]) =>\n  action(ActionType.BulkAddToList, { id, k8sObjects });\nexport const loaded = (id: string, k8sObjects: K8sResourceKind | K8sResourceKind[]) =>\n  action(ActionType.Loaded, { id, k8sObjects });\nexport const errored = (id: string, k8sObjects: any) =>\n  action(ActionType.Errored, { id, k8sObjects });\nexport const modifyObject = (id: string, k8sObjects: K8sResourceKind) =>\n  action(ActionType.ModifyObject, { id, k8sObjects });\n\nexport const getResourcesInFlight = () => action(ActionType.GetResourcesInFlight);\nexport const receivedResources = (resources: DiscoveryResources) =>\n  action(ActionType.ReceivedResources, { resources });\n\nexport const getResources = () => (dispatch: Dispatch) => {\n  dispatch(getResourcesInFlight());\n  getResources_()\n    .then((resources) => {\n      // Cache the resources whenever discovery completes to improve console load times.\n      cacheResources(resources);\n      dispatch(receivedResources(resources));\n    })\n    // eslint-disable-next-line no-console\n    .catch((err) => console.error(err));\n};\n\nexport const filterList = (id: string, name: string, value: string) =>\n  action(ActionType.FilterList, { id, name, value });\n\nexport const startWatchK8sObject = (id: string) => action(ActionType.StartWatchK8sObject, { id });\n\nexport const watchK8sObject = (\n  id: string,\n  name: string,\n  namespace: string,\n  query: { [key: string]: string },\n  k8sType: K8sKind,\n) => (dispatch: Dispatch, getState) => {\n  if (id in REF_COUNTS) {\n    REF_COUNTS[id] += 1;\n    return nop;\n  }\n  dispatch(startWatchK8sObject(id));\n  REF_COUNTS[id] = 1;\n\n  if (query.name) {\n    query.fieldSelector = `metadata.name=${query.name}`;\n    delete query.name;\n  }\n\n  const poller = () => {\n    k8sGet(k8sType, name, namespace).then(\n      (o) => dispatch(modifyObject(id, o)),\n      (e) => dispatch(errored(id, e)),\n    );\n  };\n  POLLs[id] = setInterval(poller, 30 * 1000);\n  poller();\n\n  if (!_.get(k8sType, 'verbs', ['watch']).includes('watch')) {\n    // eslint-disable-next-line no-console\n    console.warn(`${referenceForModel(k8sType)} does not support watching`);\n    return;\n  }\n\n  const { subprotocols } = getState().UI.get('impersonate', {});\n\n  WS[id] = k8sWatch(k8sType, { ...query, subprotocols }).onbulkmessage((events) =>\n    events.forEach((e) => dispatch(modifyObject(id, e.object))),\n  );\n};\n\nexport const stopWatchK8s = (id: string) => action(ActionType.StopWatchK8s, { id });\n\nexport const stopK8sWatch = (id: string) => (dispatch: Dispatch) => {\n  REF_COUNTS[id] -= 1;\n  if (REF_COUNTS[id] > 0) {\n    return nop;\n  }\n\n  const ws = WS[id];\n  if (ws) {\n    ws.destroy();\n    delete WS[id];\n  }\n  const poller = POLLs[id];\n  clearInterval(poller);\n  delete POLLs[id];\n  delete REF_COUNTS[id];\n  dispatch(stopWatchK8s(id));\n};\n\nexport const startWatchK8sList = (id: string, query: { [key: string]: string }) =>\n  action(ActionType.StartWatchK8sList, { id, query });\n\nexport const watchK8sList = (\n  id: string,\n  query: { [key: string]: string },\n  k8skind: K8sKind,\n  extraAction?,\n  // listName?: string,\n) => (dispatch, getState) => {\n  // Only one watch per unique list ID\n  if (id in REF_COUNTS) {\n    REF_COUNTS[id] += 1;\n    return nop;\n  }\n\n  dispatch(startWatchK8sList(id, query));\n  REF_COUNTS[id] = 1;\n\n  const incrementallyLoad = async (continueToken = ''): Promise<string> => {\n    // the list may not still be around...\n    if (!REF_COUNTS[id]) {\n      // let .then handle the cleanup\n      return;\n    }\n\n    const response = await k8sList(\n      k8skind,\n      {\n        limit: paginationLimit,\n        ...query,\n        ...(continueToken ? { continue: continueToken } : {}),\n      },\n      true,\n      // {},\n      // listName\n    );\n\n    if (!REF_COUNTS[id]) {\n      return;\n    }\n\n    if (!continueToken) {\n      [loaded, extraAction].forEach((f) => f && dispatch(f(id, response.items)));\n    } else {\n      dispatch(bulkAddToList(id, response.items));\n    }\n\n    if (response.metadata.continue) {\n      return incrementallyLoad(response.metadata.continue);\n    }\n    return response.metadata.resourceVersion;\n  };\n  /**\n   * Incrementally fetch list (XHR) using k8s pagination then use its resourceVersion to\n   *  start listening on a WS (?resourceVersion=$resourceVersion)\n   *  start the process over when:\n   *   1. the WS closes abnormally\n   *   2. the WS can not establish a connection within $TIMEOUT\n   */\n  const pollAndWatch = async () => {\n    delete POLLs[id];\n\n    try {\n      const resourceVersion = await incrementallyLoad();\n      // ensure this watch should still exist because pollAndWatch is recursiveish\n      if (!REF_COUNTS[id]) {\n        // eslint-disable-next-line no-console\n        console.log(`stopped watching ${id} before finishing incremental loading.`);\n        // call cleanup function out of abundance of caution...\n        dispatch(stopK8sWatch(id));\n        return;\n      }\n\n      if (WS[id]) {\n        // eslint-disable-next-line no-console\n        console.warn(`Attempted to create multiple websockets for ${id}.`);\n        return;\n      }\n\n      if (!_.get(k8skind, 'verbs', ['watch']).includes('watch')) {\n        // eslint-disable-next-line no-console\n        console.warn(`${referenceForModel(k8skind)} does not support watching`);\n        return;\n      }\n\n      const { subprotocols } = getState().UI.get('impersonate', {});\n      WS[id] = k8sWatch(\n        k8skind,\n        { ...query, resourceVersion },\n        { subprotocols, timeout: 60 * 1000 },\n      );\n    } catch (e) {\n      if (!REF_COUNTS[id]) {\n        // eslint-disable-next-line no-console\n        console.log(`stopped watching ${id} before finishing incremental loading with error ${e}!`);\n        // call cleanup function out of abundance of caution...\n        dispatch(stopK8sWatch(id));\n        return;\n      }\n\n      dispatch(errored(id, e));\n\n      if (!POLLs[id]) {\n        POLLs[id] = setTimeout(pollAndWatch, 15 * 1000);\n      }\n      return;\n    }\n\n    WS[id]\n      .onclose((event) => {\n        // Close Frame Status Codes: https://tools.ietf.org/html/rfc6455#section-7.4.1\n        if (event.code !== 1006) {\n          return;\n        }\n        // eslint-disable-next-line no-console\n        console.log('WS closed abnormally - starting polling loop over!');\n        const ws = WS[id];\n        const timedOut = true;\n        ws && ws.destroy(timedOut);\n      })\n      .ondestroy((timedOut) => {\n        if (!timedOut) {\n          return;\n        }\n        // If the WS is unsucessful for timeout duration, assume it is less work\n        //  to update the entire list and then start the WS again\n\n        // eslint-disable-next-line no-console\n        console.log(`${id} timed out - restarting polling`);\n        delete WS[id];\n\n        if (POLLs[id]) {\n          return;\n        }\n\n        POLLs[id] = setTimeout(pollAndWatch, 15 * 1000);\n      })\n      .onbulkmessage((events) =>\n        [updateListFromWS, extraAction].forEach((f) => f && dispatch(f(id, events))),\n      );\n  };\n  pollAndWatch();\n};\n\nexport const setAPIGroups = (value: number) => action(ActionType.SetAPIGroups, { value });\n\nexport const watchAPIServices = () => (dispatch, getState) => {\n  if (getState().k8s.has('apiservices') || POLLs[apiGroups]) {\n    return;\n  }\n  dispatch({ type: ActionType.GetResourcesInFlight });\n\n  k8sList(APIServiceModel, {})\n    .then(() =>\n      dispatch(\n        watchK8sList(\n          makeReduxID(APIServiceModel, {}),\n          {},\n          APIServiceModel,\n          (id: string, events: K8sEvent[]) => {\n            // Only re-run API discovery on added or removed API services. A\n            // misbehaving API service can trigger frequent watch updates,\n            // which could cause console to thrash.\n            return events.some(({ type }) => type !== 'MODIFIED') ? getResources() : _.noop;\n          },\n        ),\n      ),\n    )\n    .catch(() => {\n      const poller = () =>\n        coFetchJSON('api/kubernetes/apis').then((d) => {\n          if (d.groups.length !== getState().k8s.getIn(['RESOURCES', apiGroups], 0)) {\n            dispatch(getResources());\n          }\n          dispatch(setAPIGroups(d.groups.length));\n        });\n\n      POLLs[apiGroups] = setInterval(poller, 30 * 1000);\n      poller();\n    });\n};\n\nconst k8sActions = {\n  updateListFromWS,\n  bulkAddToList,\n  loaded,\n  errored,\n  modifyObject,\n  getResourcesInFlight,\n  receivedResources,\n  filterList,\n  startWatchK8sObject,\n  startWatchK8sList,\n  stopWatchK8s,\n  setAPIGroups,\n};\n\nexport type K8sAction = Action<typeof k8sActions>;\n"]}]}