{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/environment.jsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/environment.jsx","mtime":1615701814890},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Alert, Button, ActionGroup, AlertActionCloseButton } from '@patternfly/react-core';\nimport * as classNames from 'classnames';\nimport { withTranslation } from 'react-i18next';\nimport { k8sPatch, k8sGet, referenceFor, referenceForOwnerRef } from '../module/k8s';\nimport { AsyncComponent, checkAccess, ContainerDropdown, EnvFromPair, EnvType, FieldLevelHelp, LoadingBox, LoadingInline, NameValueEditorPair, PromiseComponent, ResourceLink } from './utils';\nimport { ConfigMapModel, SecretModel } from '../models';\n/**\n * Set up an AsyncComponent to wrap the name-value-editor to allow on demand loading to reduce the\n * vendor footprint size.\n */\nconst NameValueEditorComponent = props => React.createElement(AsyncComponent, Object.assign({ loader: () => import('./utils/name-value-editor').then(c => c.NameValueEditor) }, props));\nconst EnvFromEditorComponent = props => React.createElement(AsyncComponent, Object.assign({ loader: () => import('./utils/name-value-editor').then(c => c.EnvFromEditor) }, props));\n/**\n * Set up initial value for the environment vars state. Use this in constructor or cancelChanges.\n *\n * Our return value here is an object in the form of:\n * {\n *   env: [[envname, value, id],[...]]\n *   envFrom: [[envFromprefix, resourceObject, id], [...]]\n * }\n *\n *\n * @param initialPairObjects\n * @returns {*}\n * @private\n */\nconst getPairsFromObject = (element = {}) => {\n    const returnedPairs = {};\n    if (_.isEmpty(element.env)) {\n        returnedPairs.env = [['', '', 0]];\n    }\n    else {\n        returnedPairs.env = _.map(element.env, (leafNode, i) => {\n            if (!_.has(leafNode, 'value') && !_.has(leafNode, 'valueFrom')) {\n                leafNode.value = '';\n            }\n            leafNode.ID = i;\n            return Object.values(leafNode);\n        });\n    }\n    if (_.isEmpty(element.envFrom)) {\n        const configMapSecretRef = { name: '', key: '' };\n        returnedPairs.envFrom = [['', { configMapSecretRef }, 0]];\n    }\n    else {\n        returnedPairs.envFrom = _.map(element.envFrom, (leafNode, i) => {\n            if (!_.has(leafNode, 'prefix')) {\n                leafNode.prefix = '';\n            }\n            leafNode.ID = i;\n            return [leafNode.prefix, _.pick(leafNode, ['configMapRef', 'secretRef']), leafNode.ID];\n        });\n    }\n    return returnedPairs;\n};\n/**\n * Get name/value pairs from an array or object source\n *\n * @param initialPairObjects\n * @returns {Array}\n */\nconst envVarsToArray = initialPairObjects => {\n    const cpOfInitialPairs = _.cloneDeep(initialPairObjects);\n    if (_.isArray(cpOfInitialPairs)) {\n        return _.map(cpOfInitialPairs, element => {\n            const { env, envFrom } = getPairsFromObject(element);\n            return [env, envFrom];\n        });\n    }\n    const { env, envFrom } = getPairsFromObject(cpOfInitialPairs);\n    return [[env, envFrom]];\n};\nconst getContainersObjectForDropdown = containerArray => {\n    return _.reduce(containerArray, (result, elem, order) => {\n        result[elem.name] = Object.assign(Object.assign({}, elem), { order });\n        return result;\n    }, {});\n};\nclass CurrentEnvVars {\n    constructor(data, isContainerArray, path) {\n        this.currentEnvVars = {};\n        this.state = { allowed: true };\n        if (!_.isEmpty(data) && arguments.length > 1) {\n            this.setResultObject(data, isContainerArray, path);\n        }\n        else {\n            this.setRawData(data);\n        }\n    }\n    setRawData(rawEnvData) {\n        this.rawEnvData = rawEnvData;\n        this.isContainerArray = _.isArray(rawEnvData.containers);\n        this.isCreate = _.isEmpty(rawEnvData);\n        this.hasInitContainers = !_.isUndefined(rawEnvData.initContainers);\n        if (this.isContainerArray || this.isCreate) {\n            this.currentEnvVars.containers = envVarsToArray(rawEnvData.containers);\n            this.currentEnvVars.initContainers = envVarsToArray(rawEnvData.initContainers);\n        }\n        else {\n            this.currentEnvVars.buildObject = envVarsToArray(rawEnvData);\n        }\n        return this;\n    }\n    /**\n     * Initialize CurrentEnvVars with result object after patch operation.\n     *\n     * If this is a containerArray its possible to have initContainers at a level above\n     * the current envPath, so when we setRawData, we want to drop right such that\n     * not only the containers can be initialized, but also initContainers. A build object\n     * only has env data in the base path.\n     *\n     * @param resultObject\n     * @param isContainerArray\n     * @param path\n     * @returns CurrentEnvVars\n     */\n    setResultObject(resultObject, isContainerArray, path) {\n        if (isContainerArray) {\n            return this.setRawData(_.get(resultObject, _.dropRight(path)));\n        }\n        return this.setRawData(_.get(resultObject, path));\n    }\n    getEnvVarByTypeAndIndex(type, index) {\n        return this.currentEnvVars[type][index];\n    }\n    setFormattedVars(containerType, index, environmentType, formattedPairs) {\n        this.currentEnvVars[containerType][index][environmentType] = formattedPairs;\n        return this;\n    }\n    /**\n     * Return array of patches for the save operation.\n     *\n     *\n     * @param envPath\n     * @returns {Array}\n     * @public\n     */\n    getPatches(envPath) {\n        if (this.isContainerArray) {\n            const envPathForIC = _.dropRight(envPath).concat('initContainers');\n            const op = 'add';\n            const containerEnvPatch = this.currentEnvVars.containers.map((finalPairsForContainer, i) => {\n                const path = `/${envPath.join('/')}/${i}/env`;\n                const value = this._envVarsToNameVal(finalPairsForContainer[EnvType.ENV]);\n                return { path, op, value };\n            });\n            const containerEnvFromPatch = this.currentEnvVars.containers.map((finalPairsForContainer, i) => {\n                const path = `/${envPath.join('/')}/${i}/envFrom`;\n                const value = this._envFromVarsToResourcePrefix(finalPairsForContainer[EnvType.ENV_FROM]);\n                return { path, op, value };\n            });\n            let patches = _.concat(containerEnvPatch, containerEnvFromPatch);\n            if (this.hasInitContainers) {\n                const envPatchForIC = this.currentEnvVars.initContainers.map((finalPairsForContainer, i) => {\n                    const path = `/${envPathForIC.join('/')}/${i}/env`;\n                    const value = this._envVarsToNameVal(finalPairsForContainer[EnvType.ENV]);\n                    return { path, op, value };\n                });\n                const envFromPatchForIC = this.currentEnvVars.initContainers.map((finalPairsForContainer, i) => {\n                    const path = `/${envPathForIC.join('/')}/${i}/envFrom`;\n                    const value = this._envFromVarsToResourcePrefix(finalPairsForContainer[EnvType.ENV_FROM]);\n                    return { path, op, value };\n                });\n                patches = _.concat(patches, envPatchForIC, envFromPatchForIC);\n            }\n            return patches;\n        }\n        return this.currentEnvVars.buildObject.map(finalPairsForContainer => {\n            const op = 'add';\n            const path = `/${envPath.join('/')}/env`;\n            const value = this._envVarsToNameVal(finalPairsForContainer[EnvType.ENV]);\n            return { path, op, value };\n        });\n    }\n    /**\n     * Return array of variables for the create operation.\n     *\n     * @returns {Array}\n     * @public\n     */\n    dispatchNewEnvironmentVariables() {\n        return this.isCreate ? this._envVarsToNameVal(this.currentEnvVars.containers[0][EnvType.ENV]) : null;\n    }\n    /**\n     * Return env var pairs in name value notation, and strip out any pairs that have empty NAME values.\n     *\n     *\n     * @param finalEnvPairs\n     * @returns {Array}\n     * @private\n     */\n    _envVarsToNameVal(finalEnvPairs) {\n        return _.filter(finalEnvPairs, finalEnvPair => finalEnvPair[NameValueEditorPair.Name]).map(finalPairForContainer => {\n            const name = finalPairForContainer[NameValueEditorPair.Name];\n            const value = finalPairForContainer[NameValueEditorPair.Value];\n            return _.isObject(value) ? { name, valueFrom: value } : { name, value };\n        });\n    }\n    /**\n     * Return env var pairs in envFrom (resource/prefix) notation, and strip out any pairs that have empty resource values.\n     *\n     *\n     * @param finalEnvPairs\n     * @returns {Array}\n     * @private\n     */\n    _envFromVarsToResourcePrefix(finalEnvPairs) {\n        return _.filter(finalEnvPairs, finalEnvPair => !_.isEmpty(finalEnvPair[EnvFromPair.Resource]) && !finalEnvPair[EnvFromPair.Resource].configMapSecretRef).map(finalPairForContainer => {\n            return _.assign({ prefix: finalPairForContainer[EnvFromPair.Prefix] }, finalPairForContainer[EnvFromPair.Resource]);\n        });\n    }\n}\n/** @type {(state: any, props: {obj?: object, rawEnvData?: any, readOnly: boolean, envPath: any, onChange?: (env: any) => void, addConfigMapSecret?: boolean, useLoadingInline?: boolean}) => {model: K8sKind}} */\nconst stateToProps = ({ k8s, UI }, { obj }) => ({\n    model: k8s.getIn(['RESOURCES', 'models', referenceFor(obj)]) || k8s.getIn(['RESOURCES', 'models', obj.kind]),\n    impersonate: UI.get('impersonate'),\n});\nclass EnvironmentPage_ extends PromiseComponent {\n    /**\n     * Set initial state and decide which kind of env we are setting up\n     *\n     * @param props\n     */\n    constructor(props) {\n        super(props);\n        this.dismissSuccess = () => {\n            this.setState({ success: null });\n        };\n        this.reload = this._reload.bind(this);\n        this.saveChanges = this._saveChanges.bind(this);\n        this.updateEnvVars = this._updateEnvVars.bind(this);\n        this.selectContainer = this._selectContainer.bind(this);\n        const currentEnvVars = new CurrentEnvVars(this.props.rawEnvData);\n        this.state = {\n            currentEnvVars,\n            success: null,\n            containerIndex: 0,\n            containerType: currentEnvVars.isContainerArray || currentEnvVars.isCreate ? 'containers' : 'buildObject',\n        };\n    }\n    componentDidMount() {\n        this._checkEditAccess();\n        const { addConfigMapSecret, readOnly } = this.props;\n        if (!addConfigMapSecret || readOnly) {\n            const configMaps = {}, secrets = {};\n            this.setState({ configMaps, secrets });\n            return;\n        }\n        const envNamespace = _.get(this.props, 'obj.metadata.namespace');\n        Promise.all([\n            k8sGet(ConfigMapModel, null, envNamespace).catch(err => {\n                if (err.response.status !== 403) {\n                    const errorMessage = err.message || 'Could not load config maps.';\n                    this.setState({ errorMessage });\n                }\n                return {\n                    configMaps: {},\n                };\n            }),\n            k8sGet(SecretModel, null, envNamespace).catch(err => {\n                if (err.response.status !== 403) {\n                    const errorMessage = err.message || 'Could not load secrets.';\n                    this.setState({ errorMessage });\n                }\n                return {\n                    secrets: {},\n                };\n            }),\n        ]).then(([configMaps, secrets]) => this.setState({ configMaps, secrets }));\n    }\n    componentDidUpdate(prevProps) {\n        const { obj, model, impersonate, readOnly, rawEnvData } = this.props;\n        const { dirty } = this.state;\n        if (!_.isEqual(rawEnvData, prevProps.rawEnvData)) {\n            this.setState(Object.assign(Object.assign({}, (!dirty && { currentEnvVars: new CurrentEnvVars(rawEnvData) })), { stale: dirty }));\n        }\n        if (_.get(prevProps.obj, 'metadata.uid') !== _.get(obj, 'metadata.uid') || _.get(prevProps.model, 'apiGroup') !== _.get(model, 'apiGroup') || _.get(prevProps.model, 'path') !== _.get(model, 'path') || prevProps.impersonate !== impersonate || prevProps.readOnly !== readOnly) {\n            this._checkEditAccess();\n        }\n    }\n    _checkEditAccess() {\n        const { obj, model, impersonate, readOnly } = this.props;\n        if (readOnly) {\n            return;\n        }\n        // Only check RBAC if editing an existing resource. The form will always\n        // be enabled when creating a new application (git import / deploy image).\n        if (_.isEmpty(obj) || !model) {\n            this.setState({ allowed: true });\n            return;\n        }\n        const { name, namespace } = obj.metadata;\n        const resourceAttributes = {\n            group: model.apiGroup,\n            resource: model.plural,\n            verb: 'patch',\n            name,\n            namespace,\n        };\n        checkAccess(resourceAttributes, impersonate).then(resp => this.setState({ allowed: resp.status.allowed }));\n    }\n    /**\n     * Callback for NVEditor update our state with new values\n     * @param env\n     * @param i\n     */\n    _updateEnvVars(env, i = 0, type = EnvType.ENV) {\n        const { onChange } = this.props;\n        const { currentEnvVars, containerType } = this.state;\n        const currentEnv = _.cloneDeep(currentEnvVars);\n        currentEnv.setFormattedVars(containerType, i, type, env.nameValuePairs);\n        this.setState({\n            currentEnvVars: currentEnv,\n            dirty: true,\n            success: null,\n        });\n        _.isFunction(onChange) && onChange(currentEnv.dispatchNewEnvironmentVariables());\n    }\n    /**\n     * Reset the page to initial state\n     * @private\n     */\n    _reload() {\n        const { rawEnvData } = this.props;\n        this.setState({\n            currentEnvVars: new CurrentEnvVars(rawEnvData),\n            dirty: false,\n            errorMessage: null,\n            stale: false,\n            success: null,\n        });\n    }\n    _selectContainer(containerName) {\n        const { rawEnvData } = this.props;\n        let containerIndex = _.findIndex(rawEnvData.containers, { name: containerName });\n        if (containerIndex !== -1) {\n            return this.setState({\n                containerIndex,\n                containerType: 'containers',\n            });\n        }\n        containerIndex = _.findIndex(rawEnvData.initContainers, { name: containerName });\n        if (containerIndex !== -1) {\n            return this.setState({\n                containerIndex,\n                containerType: 'initContainers',\n            });\n        }\n    }\n    /**\n     * Make it so. Patch the values for the env var changes made on the page.\n     * 1. Validate for dup keys\n     * 2. Throw out empty rows\n     * 3. Use add command if we are adding new env vars, and replace if we are modifying\n     * 4. Send the patch command down to REST, and update with response\n     *\n     * @param e\n     */\n    _saveChanges(e) {\n        const { envPath, obj, model } = this.props;\n        const { currentEnvVars } = this.state;\n        e.preventDefault();\n        const patches = currentEnvVars.getPatches(envPath);\n        const promise = k8sPatch(model, obj, patches);\n        this.handlePromise(promise).then(res => {\n            this.setState({\n                currentEnvVars: new CurrentEnvVars(res, currentEnvVars.isContainerArray, envPath),\n                dirty: false,\n                errorMessage: null,\n                stale: false,\n                success: 'Successfully updated the environment variables.',\n            });\n        });\n    }\n    render() {\n        const { errorMessage, success, inProgress, currentEnvVars, stale, configMaps, secrets, containerIndex, containerType, allowed } = this.state;\n        const { rawEnvData, obj, addConfigMapSecret, useLoadingInline, t } = this.props;\n        const readOnly = this.props.readOnly || !allowed;\n        if (!configMaps || !currentEnvVars || !secrets) {\n            if (useLoadingInline) {\n                return React.createElement(LoadingInline, null);\n            }\n            return React.createElement(LoadingBox, null);\n        }\n        const envVar = currentEnvVars.getEnvVarByTypeAndIndex(containerType, containerIndex);\n        const containerDropdown = currentEnvVars.isContainerArray ? React.createElement(ContainerDropdown, { currentKey: rawEnvData[containerType][containerIndex].name, containers: getContainersObjectForDropdown(rawEnvData.containers), initContainers: getContainersObjectForDropdown(rawEnvData.initContainers), onChange: this.selectContainer }) : null;\n        const owners = _.get(obj.metadata, 'ownerReferences', []).map((o, i) => React.createElement(ResourceLink, { key: i, kind: referenceForOwnerRef(o), name: o.name, namespace: obj.metadata.namespace, title: o.uid, inline: true }));\n        const containerVars = (React.createElement(React.Fragment, null,\n            readOnly && !_.isEmpty(owners) && (React.createElement(\"div\", { className: \"co-toolbar__group co-toolbar__group--left\" },\n                React.createElement(Alert, { isInline: true, className: \"co-alert col-md-11 col-xs-10\", variant: \"info\", title: t('COMMON:MSG_DETAILS_TABENVIRONMENT_1') },\n                    t('COMMON:MSG_DETAILS_TABENVIRONMENT_2'),\n                    \" \",\n                    owners.length > 1 ? React.createElement(React.Fragment, null,\n                        \"owners: \",\n                        owners) : owners))),\n            currentEnvVars.isContainerArray && (React.createElement(\"div\", { className: \"co-toolbar__group co-toolbar__group--left\" },\n                React.createElement(\"div\", { className: \"co-toolbar__item\" }, containerType === 'containers' ? t('COMMON:MSG_DETAILS_TABENVIRONMENT_3') : t('COMMON:MSG_DETAILS_TABENVIRONMENT_10')),\n                React.createElement(\"div\", { className: \"co-toolbar__item\" }, containerDropdown))),\n            React.createElement(\"div\", { className: classNames({ 'co-m-pane__body-group': !currentEnvVars.isCreate }) },\n                !currentEnvVars.isCreate && (React.createElement(\"h3\", { className: \"co-section-heading-tertiary\" },\n                    t('COMMON:MSG_DETAILS_TABENVIRONMENT_4'),\n                    !readOnly && (React.createElement(FieldLevelHelp, null,\n                        \"Define environment variables as key-value pairs to store configuration settings. You can enter text or add values from a ConfigMap or Secret. Drag and drop environment variables to change the order in which they are run. A variable can reference any other variables that come before it in the list, for example \",\n                        React.createElement(\"code\", null, \"FULLDOMAIN = $(SUBDOMAIN).example.com\"),\n                        \".\")))),\n                React.createElement(NameValueEditorComponent, { nameValueId: containerIndex, nameValuePairs: envVar[EnvType.ENV], updateParentData: this.updateEnvVars, addString: t('COMMON:MSG_DETAILS_TABENVIRONMENT_11'), addSecondString: t('COMMON:MSG_DETAILS_TABENVIRONMENT_12'), nameString: \"Name\", readOnly: readOnly, allowSorting: true, configMaps: configMaps, secrets: secrets, addConfigMapSecret: addConfigMapSecret })),\n            currentEnvVars.isContainerArray && (React.createElement(\"div\", { className: \"co-m-pane__body-group environment-buttons\" },\n                React.createElement(\"h3\", { className: \"co-section-heading-tertiary\" },\n                    t('COMMON:MSG_DETAILS_TABENVIRONMENT_7'),\n                    !readOnly && (React.createElement(FieldLevelHelp, null,\n                        \"Add new values by referencing an existing config map or secret. Drag and drop environment variables within this section to change the order in which they are run.\",\n                        React.createElement(\"br\", null),\n                        React.createElement(\"strong\", null, \"Note: \"),\n                        \"If identical values exist in both lists, the single value in the list above will take precedence.\"))),\n                React.createElement(EnvFromEditorComponent, { nameValueId: containerIndex, nameValuePairs: envVar[EnvType.ENV_FROM], updateParentData: this.updateEnvVars, readOnly: readOnly, configMaps: configMaps, secrets: secrets, addButtonLabel: t('COMMON:MSG_DETAILS_TABENVIRONMENT_13') })))));\n        return (React.createElement(\"div\", { className: classNames({ 'co-m-pane__body': !currentEnvVars.isCreate }) },\n            containerVars,\n            !currentEnvVars.isCreate && (React.createElement(\"div\", { className: \"co-m-pane__body-group\" },\n                React.createElement(\"div\", { className: \"pf-c-form environment-buttons\" },\n                    errorMessage && React.createElement(Alert, { isInline: true, className: \"co-alert\", variant: \"danger\", title: errorMessage }),\n                    stale && (React.createElement(Alert, { isInline: true, className: \"co-alert\", variant: \"info\", title: \"The information on this page is no longer current.\" }, \"Click Reload to update and lose edits, or Save Changes to overwrite.\")),\n                    success && React.createElement(Alert, { isInline: true, className: \"co-alert\", variant: \"success\", title: success, action: React.createElement(AlertActionCloseButton, { onClose: this.dismissSuccess }) }),\n                    !readOnly && (React.createElement(ActionGroup, null,\n                        React.createElement(Button, { isDisabled: inProgress, type: \"submit\", variant: \"primary\", onClick: this.saveChanges }, t('COMMON:MSG_COMMON_BUTTON_COMMIT_3')),\n                        React.createElement(Button, { isDisabled: inProgress, type: \"button\", variant: \"secondary\", onClick: this.reload }, t('COMMON:MSG_COMMON_BUTTON_ETC_13')))))))));\n    }\n}\nexport const EnvironmentPage = connect(stateToProps)(withTranslation()(EnvironmentPage_));\nEnvironmentPage_.propTypes = {\n    obj: PropTypes.object,\n    rawEnvData: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n    envPath: PropTypes.array.isRequired,\n    readOnly: PropTypes.bool.isRequired,\n    onChange: PropTypes.func,\n    addConfigMapSecret: PropTypes.bool,\n    useLoadingInline: PropTypes.bool,\n};\nEnvironmentPage_.defaultProps = {\n    obj: {},\n    rawEnvData: {},\n    addConfigMapSecret: true,\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/environment.jsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/environment.jsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { Alert, Button, ActionGroup, AlertActionCloseButton } from '@patternfly/react-core';\nimport * as classNames from 'classnames';\nimport { withTranslation } from 'react-i18next';\nimport { k8sPatch, k8sGet, referenceFor, referenceForOwnerRef } from '../module/k8s';\nimport { AsyncComponent, checkAccess, ContainerDropdown, EnvFromPair, EnvType, FieldLevelHelp, LoadingBox, LoadingInline, NameValueEditorPair, PromiseComponent, ResourceLink } from './utils';\nimport { ConfigMapModel, SecretModel } from '../models';\n\n/**\n * Set up an AsyncComponent to wrap the name-value-editor to allow on demand loading to reduce the\n * vendor footprint size.\n */\nconst NameValueEditorComponent = props => <AsyncComponent loader={() => import('./utils/name-value-editor').then(c => c.NameValueEditor)} {...props} />;\nconst EnvFromEditorComponent = props => <AsyncComponent loader={() => import('./utils/name-value-editor').then(c => c.EnvFromEditor)} {...props} />;\n\n/**\n * Set up initial value for the environment vars state. Use this in constructor or cancelChanges.\n *\n * Our return value here is an object in the form of:\n * {\n *   env: [[envname, value, id],[...]]\n *   envFrom: [[envFromprefix, resourceObject, id], [...]]\n * }\n *\n *\n * @param initialPairObjects\n * @returns {*}\n * @private\n */\nconst getPairsFromObject = (element = {}) => {\n  const returnedPairs = {};\n  if (_.isEmpty(element.env)) {\n    returnedPairs.env = [['', '', 0]];\n  } else {\n    returnedPairs.env = _.map(element.env, (leafNode, i) => {\n      if (!_.has(leafNode, 'value') && !_.has(leafNode, 'valueFrom')) {\n        leafNode.value = '';\n      }\n      leafNode.ID = i;\n      return Object.values(leafNode);\n    });\n  }\n  if (_.isEmpty(element.envFrom)) {\n    const configMapSecretRef = { name: '', key: '' };\n    returnedPairs.envFrom = [['', { configMapSecretRef }, 0]];\n  } else {\n    returnedPairs.envFrom = _.map(element.envFrom, (leafNode, i) => {\n      if (!_.has(leafNode, 'prefix')) {\n        leafNode.prefix = '';\n      }\n      leafNode.ID = i;\n      return [leafNode.prefix, _.pick(leafNode, ['configMapRef', 'secretRef']), leafNode.ID];\n    });\n  }\n  return returnedPairs;\n};\n\n/**\n * Get name/value pairs from an array or object source\n *\n * @param initialPairObjects\n * @returns {Array}\n */\nconst envVarsToArray = initialPairObjects => {\n  const cpOfInitialPairs = _.cloneDeep(initialPairObjects);\n  if (_.isArray(cpOfInitialPairs)) {\n    return _.map(cpOfInitialPairs, element => {\n      const { env, envFrom } = getPairsFromObject(element);\n      return [env, envFrom];\n    });\n  }\n  const { env, envFrom } = getPairsFromObject(cpOfInitialPairs);\n  return [[env, envFrom]];\n};\n\nconst getContainersObjectForDropdown = containerArray => {\n  return _.reduce(\n    containerArray,\n    (result, elem, order) => {\n      result[elem.name] = { ...elem, order };\n      return result;\n    },\n    {},\n  );\n};\n\nclass CurrentEnvVars {\n  constructor(data, isContainerArray, path) {\n    this.currentEnvVars = {};\n    this.state = { allowed: true };\n    if (!_.isEmpty(data) && arguments.length > 1) {\n      this.setResultObject(data, isContainerArray, path);\n    } else {\n      this.setRawData(data);\n    }\n  }\n\n  setRawData(rawEnvData) {\n    this.rawEnvData = rawEnvData;\n    this.isContainerArray = _.isArray(rawEnvData.containers);\n    this.isCreate = _.isEmpty(rawEnvData);\n    this.hasInitContainers = !_.isUndefined(rawEnvData.initContainers);\n\n    if (this.isContainerArray || this.isCreate) {\n      this.currentEnvVars.containers = envVarsToArray(rawEnvData.containers);\n      this.currentEnvVars.initContainers = envVarsToArray(rawEnvData.initContainers);\n    } else {\n      this.currentEnvVars.buildObject = envVarsToArray(rawEnvData);\n    }\n    return this;\n  }\n\n  /**\n   * Initialize CurrentEnvVars with result object after patch operation.\n   *\n   * If this is a containerArray its possible to have initContainers at a level above\n   * the current envPath, so when we setRawData, we want to drop right such that\n   * not only the containers can be initialized, but also initContainers. A build object\n   * only has env data in the base path.\n   *\n   * @param resultObject\n   * @param isContainerArray\n   * @param path\n   * @returns CurrentEnvVars\n   */\n  setResultObject(resultObject, isContainerArray, path) {\n    if (isContainerArray) {\n      return this.setRawData(_.get(resultObject, _.dropRight(path)));\n    }\n    return this.setRawData(_.get(resultObject, path));\n  }\n\n  getEnvVarByTypeAndIndex(type, index) {\n    return this.currentEnvVars[type][index];\n  }\n\n  setFormattedVars(containerType, index, environmentType, formattedPairs) {\n    this.currentEnvVars[containerType][index][environmentType] = formattedPairs;\n    return this;\n  }\n\n  /**\n   * Return array of patches for the save operation.\n   *\n   *\n   * @param envPath\n   * @returns {Array}\n   * @public\n   */\n  getPatches(envPath) {\n    if (this.isContainerArray) {\n      const envPathForIC = _.dropRight(envPath).concat('initContainers');\n      const op = 'add';\n\n      const containerEnvPatch = this.currentEnvVars.containers.map((finalPairsForContainer, i) => {\n        const path = `/${envPath.join('/')}/${i}/env`;\n        const value = this._envVarsToNameVal(finalPairsForContainer[EnvType.ENV]);\n        return { path, op, value };\n      });\n\n      const containerEnvFromPatch = this.currentEnvVars.containers.map((finalPairsForContainer, i) => {\n        const path = `/${envPath.join('/')}/${i}/envFrom`;\n        const value = this._envFromVarsToResourcePrefix(finalPairsForContainer[EnvType.ENV_FROM]);\n        return { path, op, value };\n      });\n\n      let patches = _.concat(containerEnvPatch, containerEnvFromPatch);\n\n      if (this.hasInitContainers) {\n        const envPatchForIC = this.currentEnvVars.initContainers.map((finalPairsForContainer, i) => {\n          const path = `/${envPathForIC.join('/')}/${i}/env`;\n          const value = this._envVarsToNameVal(finalPairsForContainer[EnvType.ENV]);\n          return { path, op, value };\n        });\n\n        const envFromPatchForIC = this.currentEnvVars.initContainers.map((finalPairsForContainer, i) => {\n          const path = `/${envPathForIC.join('/')}/${i}/envFrom`;\n          const value = this._envFromVarsToResourcePrefix(finalPairsForContainer[EnvType.ENV_FROM]);\n          return { path, op, value };\n        });\n\n        patches = _.concat(patches, envPatchForIC, envFromPatchForIC);\n      }\n      return patches;\n    }\n    return this.currentEnvVars.buildObject.map(finalPairsForContainer => {\n      const op = 'add';\n      const path = `/${envPath.join('/')}/env`;\n      const value = this._envVarsToNameVal(finalPairsForContainer[EnvType.ENV]);\n      return { path, op, value };\n    });\n  }\n\n  /**\n   * Return array of variables for the create operation.\n   *\n   * @returns {Array}\n   * @public\n   */\n  dispatchNewEnvironmentVariables() {\n    return this.isCreate ? this._envVarsToNameVal(this.currentEnvVars.containers[0][EnvType.ENV]) : null;\n  }\n\n  /**\n   * Return env var pairs in name value notation, and strip out any pairs that have empty NAME values.\n   *\n   *\n   * @param finalEnvPairs\n   * @returns {Array}\n   * @private\n   */\n  _envVarsToNameVal(finalEnvPairs) {\n    return _.filter(finalEnvPairs, finalEnvPair => finalEnvPair[NameValueEditorPair.Name]).map(finalPairForContainer => {\n      const name = finalPairForContainer[NameValueEditorPair.Name];\n      const value = finalPairForContainer[NameValueEditorPair.Value];\n      return _.isObject(value) ? { name, valueFrom: value } : { name, value };\n    });\n  }\n\n  /**\n   * Return env var pairs in envFrom (resource/prefix) notation, and strip out any pairs that have empty resource values.\n   *\n   *\n   * @param finalEnvPairs\n   * @returns {Array}\n   * @private\n   */\n  _envFromVarsToResourcePrefix(finalEnvPairs) {\n    return _.filter(finalEnvPairs, finalEnvPair => !_.isEmpty(finalEnvPair[EnvFromPair.Resource]) && !finalEnvPair[EnvFromPair.Resource].configMapSecretRef).map(finalPairForContainer => {\n      return _.assign({ prefix: finalPairForContainer[EnvFromPair.Prefix] }, finalPairForContainer[EnvFromPair.Resource]);\n    });\n  }\n}\n\n/** @type {(state: any, props: {obj?: object, rawEnvData?: any, readOnly: boolean, envPath: any, onChange?: (env: any) => void, addConfigMapSecret?: boolean, useLoadingInline?: boolean}) => {model: K8sKind}} */\nconst stateToProps = ({ k8s, UI }, { obj }) => ({\n  model: k8s.getIn(['RESOURCES', 'models', referenceFor(obj)]) || k8s.getIn(['RESOURCES', 'models', obj.kind]),\n  impersonate: UI.get('impersonate'),\n});\n\nclass EnvironmentPage_ extends PromiseComponent {\n  /**\n   * Set initial state and decide which kind of env we are setting up\n   *\n   * @param props\n   */\n  constructor(props) {\n    super(props);\n\n    this.reload = this._reload.bind(this);\n    this.saveChanges = this._saveChanges.bind(this);\n    this.updateEnvVars = this._updateEnvVars.bind(this);\n    this.selectContainer = this._selectContainer.bind(this);\n    const currentEnvVars = new CurrentEnvVars(this.props.rawEnvData);\n    this.state = {\n      currentEnvVars,\n      success: null,\n      containerIndex: 0,\n      containerType: currentEnvVars.isContainerArray || currentEnvVars.isCreate ? 'containers' : 'buildObject',\n    };\n  }\n\n  componentDidMount() {\n    this._checkEditAccess();\n    const { addConfigMapSecret, readOnly } = this.props;\n    if (!addConfigMapSecret || readOnly) {\n      const configMaps = {},\n        secrets = {};\n      this.setState({ configMaps, secrets });\n      return;\n    }\n    const envNamespace = _.get(this.props, 'obj.metadata.namespace');\n\n    Promise.all([\n      k8sGet(ConfigMapModel, null, envNamespace).catch(err => {\n        if (err.response.status !== 403) {\n          const errorMessage = err.message || 'Could not load config maps.';\n          this.setState({ errorMessage });\n        }\n        return {\n          configMaps: {},\n        };\n      }),\n      k8sGet(SecretModel, null, envNamespace).catch(err => {\n        if (err.response.status !== 403) {\n          const errorMessage = err.message || 'Could not load secrets.';\n          this.setState({ errorMessage });\n        }\n        return {\n          secrets: {},\n        };\n      }),\n    ]).then(([configMaps, secrets]) => this.setState({ configMaps, secrets }));\n  }\n\n  componentDidUpdate(prevProps) {\n    const { obj, model, impersonate, readOnly, rawEnvData } = this.props;\n    const { dirty } = this.state;\n\n    if (!_.isEqual(rawEnvData, prevProps.rawEnvData)) {\n      this.setState({\n        ...(!dirty && { currentEnvVars: new CurrentEnvVars(rawEnvData) }),\n        stale: dirty,\n      });\n    }\n\n    if (_.get(prevProps.obj, 'metadata.uid') !== _.get(obj, 'metadata.uid') || _.get(prevProps.model, 'apiGroup') !== _.get(model, 'apiGroup') || _.get(prevProps.model, 'path') !== _.get(model, 'path') || prevProps.impersonate !== impersonate || prevProps.readOnly !== readOnly) {\n      this._checkEditAccess();\n    }\n  }\n\n  _checkEditAccess() {\n    const { obj, model, impersonate, readOnly } = this.props;\n    if (readOnly) {\n      return;\n    }\n\n    // Only check RBAC if editing an existing resource. The form will always\n    // be enabled when creating a new application (git import / deploy image).\n    if (_.isEmpty(obj) || !model) {\n      this.setState({ allowed: true });\n      return;\n    }\n\n    const { name, namespace } = obj.metadata;\n    const resourceAttributes = {\n      group: model.apiGroup,\n      resource: model.plural,\n      verb: 'patch',\n      name,\n      namespace,\n    };\n    checkAccess(resourceAttributes, impersonate).then(resp => this.setState({ allowed: resp.status.allowed }));\n  }\n\n  /**\n   * Callback for NVEditor update our state with new values\n   * @param env\n   * @param i\n   */\n  _updateEnvVars(env, i = 0, type = EnvType.ENV) {\n    const { onChange } = this.props;\n    const { currentEnvVars, containerType } = this.state;\n    const currentEnv = _.cloneDeep(currentEnvVars);\n    currentEnv.setFormattedVars(containerType, i, type, env.nameValuePairs);\n    this.setState({\n      currentEnvVars: currentEnv,\n      dirty: true,\n      success: null,\n    });\n    _.isFunction(onChange) && onChange(currentEnv.dispatchNewEnvironmentVariables());\n  }\n\n  /**\n   * Reset the page to initial state\n   * @private\n   */\n  _reload() {\n    const { rawEnvData } = this.props;\n    this.setState({\n      currentEnvVars: new CurrentEnvVars(rawEnvData),\n      dirty: false,\n      errorMessage: null,\n      stale: false,\n      success: null,\n    });\n  }\n\n  _selectContainer(containerName) {\n    const { rawEnvData } = this.props;\n    let containerIndex = _.findIndex(rawEnvData.containers, { name: containerName });\n    if (containerIndex !== -1) {\n      return this.setState({\n        containerIndex,\n        containerType: 'containers',\n      });\n    }\n    containerIndex = _.findIndex(rawEnvData.initContainers, { name: containerName });\n    if (containerIndex !== -1) {\n      return this.setState({\n        containerIndex,\n        containerType: 'initContainers',\n      });\n    }\n  }\n\n  /**\n   * Make it so. Patch the values for the env var changes made on the page.\n   * 1. Validate for dup keys\n   * 2. Throw out empty rows\n   * 3. Use add command if we are adding new env vars, and replace if we are modifying\n   * 4. Send the patch command down to REST, and update with response\n   *\n   * @param e\n   */\n  _saveChanges(e) {\n    const { envPath, obj, model } = this.props;\n    const { currentEnvVars } = this.state;\n\n    e.preventDefault();\n\n    const patches = currentEnvVars.getPatches(envPath);\n    const promise = k8sPatch(model, obj, patches);\n    this.handlePromise(promise).then(res => {\n      this.setState({\n        currentEnvVars: new CurrentEnvVars(res, currentEnvVars.isContainerArray, envPath),\n        dirty: false,\n        errorMessage: null,\n        stale: false,\n        success: 'Successfully updated the environment variables.',\n      });\n    });\n  }\n\n  dismissSuccess = () => {\n    this.setState({ success: null });\n  };\n\n  render() {\n    const { errorMessage, success, inProgress, currentEnvVars, stale, configMaps, secrets, containerIndex, containerType, allowed } = this.state;\n    const { rawEnvData, obj, addConfigMapSecret, useLoadingInline, t } = this.props;\n    const readOnly = this.props.readOnly || !allowed;\n\n    if (!configMaps || !currentEnvVars || !secrets) {\n      if (useLoadingInline) {\n        return <LoadingInline />;\n      }\n      return <LoadingBox />;\n    }\n\n    const envVar = currentEnvVars.getEnvVarByTypeAndIndex(containerType, containerIndex);\n\n    const containerDropdown = currentEnvVars.isContainerArray ? <ContainerDropdown currentKey={rawEnvData[containerType][containerIndex].name} containers={getContainersObjectForDropdown(rawEnvData.containers)} initContainers={getContainersObjectForDropdown(rawEnvData.initContainers)} onChange={this.selectContainer} /> : null;\n\n    const owners = _.get(obj.metadata, 'ownerReferences', []).map((o, i) => <ResourceLink key={i} kind={referenceForOwnerRef(o)} name={o.name} namespace={obj.metadata.namespace} title={o.uid} inline />);\n    const containerVars = (\n      <>\n        {readOnly && !_.isEmpty(owners) && (\n          <div className=\"co-toolbar__group co-toolbar__group--left\">\n            <Alert isInline className=\"co-alert col-md-11 col-xs-10\" variant=\"info\" title={t('COMMON:MSG_DETAILS_TABENVIRONMENT_1')}>\n              {t('COMMON:MSG_DETAILS_TABENVIRONMENT_2')} {owners.length > 1 ? <>owners: {owners}</> : owners}\n            </Alert>\n          </div>\n        )}\n        {currentEnvVars.isContainerArray && (\n          <div className=\"co-toolbar__group co-toolbar__group--left\">\n            <div className=\"co-toolbar__item\">{containerType === 'containers' ? t('COMMON:MSG_DETAILS_TABENVIRONMENT_3') : t('COMMON:MSG_DETAILS_TABENVIRONMENT_10')}</div>\n            <div className=\"co-toolbar__item\">{containerDropdown}</div>\n          </div>\n        )}\n        <div className={classNames({ 'co-m-pane__body-group': !currentEnvVars.isCreate })}>\n          {!currentEnvVars.isCreate && (\n            <h3 className=\"co-section-heading-tertiary\">\n              {t('COMMON:MSG_DETAILS_TABENVIRONMENT_4')}\n              {!readOnly && (\n                <FieldLevelHelp>\n                  Define environment variables as key-value pairs to store configuration settings. You can enter text or add values from a ConfigMap or Secret. Drag and drop environment variables to change the order in which they are run. A variable can reference any other variables that come before it in the list, for example <code>FULLDOMAIN = $(SUBDOMAIN).example.com</code>.\n                </FieldLevelHelp>\n              )}\n            </h3>\n          )}\n          <NameValueEditorComponent nameValueId={containerIndex} nameValuePairs={envVar[EnvType.ENV]} updateParentData={this.updateEnvVars} addString={t('COMMON:MSG_DETAILS_TABENVIRONMENT_11')} addSecondString={t('COMMON:MSG_DETAILS_TABENVIRONMENT_12')} nameString=\"Name\" readOnly={readOnly} allowSorting={true} configMaps={configMaps} secrets={secrets} addConfigMapSecret={addConfigMapSecret} />\n        </div>\n        {currentEnvVars.isContainerArray && (\n          <div className=\"co-m-pane__body-group environment-buttons\">\n            <h3 className=\"co-section-heading-tertiary\">\n              {t('COMMON:MSG_DETAILS_TABENVIRONMENT_7')}\n              {!readOnly && (\n                <FieldLevelHelp>\n                  Add new values by referencing an existing config map or secret. Drag and drop environment variables within this section to change the order in which they are run.\n                  <br />\n                  <strong>Note: </strong>If identical values exist in both lists, the single value in the list above will take precedence.\n                </FieldLevelHelp>\n              )}\n            </h3>\n            <EnvFromEditorComponent nameValueId={containerIndex} nameValuePairs={envVar[EnvType.ENV_FROM]} updateParentData={this.updateEnvVars} readOnly={readOnly} configMaps={configMaps} secrets={secrets} addButtonLabel={t('COMMON:MSG_DETAILS_TABENVIRONMENT_13')} />\n          </div>\n        )}\n      </>\n    );\n\n    return (\n      <div className={classNames({ 'co-m-pane__body': !currentEnvVars.isCreate })}>\n        {containerVars}\n        {!currentEnvVars.isCreate && (\n          <div className=\"co-m-pane__body-group\">\n            <div className=\"pf-c-form environment-buttons\">\n              {errorMessage && <Alert isInline className=\"co-alert\" variant=\"danger\" title={errorMessage} />}\n              {stale && (\n                <Alert isInline className=\"co-alert\" variant=\"info\" title=\"The information on this page is no longer current.\">\n                  Click Reload to update and lose edits, or Save Changes to overwrite.\n                </Alert>\n              )}\n              {success && <Alert isInline className=\"co-alert\" variant=\"success\" title={success} action={<AlertActionCloseButton onClose={this.dismissSuccess} />} />}\n              {!readOnly && (\n                <ActionGroup>\n                  <Button isDisabled={inProgress} type=\"submit\" variant=\"primary\" onClick={this.saveChanges}>\n                    {t('COMMON:MSG_COMMON_BUTTON_COMMIT_3')}\n                  </Button>\n                  <Button isDisabled={inProgress} type=\"button\" variant=\"secondary\" onClick={this.reload}>\n                    {t('COMMON:MSG_COMMON_BUTTON_ETC_13')}\n                  </Button>\n                </ActionGroup>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport const EnvironmentPage = connect(stateToProps)(withTranslation()(EnvironmentPage_));\n\nEnvironmentPage_.propTypes = {\n  obj: PropTypes.object,\n  rawEnvData: PropTypes.oneOfType([PropTypes.object, PropTypes.array]),\n  envPath: PropTypes.array.isRequired,\n  readOnly: PropTypes.bool.isRequired,\n  onChange: PropTypes.func,\n  addConfigMapSecret: PropTypes.bool,\n  useLoadingInline: PropTypes.bool,\n};\nEnvironmentPage_.defaultProps = {\n  obj: {},\n  rawEnvData: {},\n  addConfigMapSecret: true,\n};\n"]}]}