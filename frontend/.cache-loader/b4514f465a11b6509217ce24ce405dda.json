{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/pipeline-details/WorkflowTemplateVisualization.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/pipeline-details/WorkflowTemplateVisualization.tsx","mtime":1617182414000},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { Alert } from '@patternfly/react-core';\nimport PipelineTopologyGraph from '../../pipeline-topology/PipelineTopologyGraph';\nimport { getTopologyNodesEdges } from '../../pipeline-topology/utils';\nimport { PipelineLayout, NodeType } from '../../pipeline-topology/const';\nimport './PipelineVisualization.scss';\nimport * as _ from 'lodash-es';\nexport const WorkflowTemplateVisualization = ({ workflowTemplate, workflow = undefined }) => {\n    var _a;\n    const obj = workflow || workflowTemplate;\n    const templates = _.get(obj, ['spec', 'templates']) || [];\n    let template = null;\n    let tasks = [];\n    for (let tmp of templates) {\n        if (tmp.hasOwnProperty('dag')) {\n            template = Object.assign(Object.assign({}, tmp), { type: 'dag' });\n        }\n        else if (tmp.hasOwnProperty('steps')) {\n            template = Object.assign(Object.assign({}, tmp), { type: 'step' });\n        }\n    }\n    if ((template === null || template === void 0 ? void 0 : template.type) === 'dag') {\n        tasks = _.get(template, ['dag', 'tasks']).map(item => {\n            return Object.assign({ name: item.name, runAfter: item.dependencies || [], taskRef: {\n                    kind: 'Task',\n                    name: item.name,\n                } }, item);\n        });\n    }\n    else if ((template === null || template === void 0 ? void 0 : template.type) === 'step') {\n        tasks = template.steps[0] ? template.steps\n            .map(item => item[0])\n            .map((item, idx, arr) => {\n            return Object.assign({ name: item.name, runAfter: idx ? [arr[idx - 1].name] : [], taskRef: {\n                    kind: 'Task',\n                    name: item.name,\n                } }, item);\n        }) : [];\n    }\n    else {\n        // 그래프로 표현할 항목이 없을 경우 템플릿을 노드 하나로 표현\n        tasks = templates.map((item) => {\n            return Object.assign({ name: item.name, isTemplate: true, runAfter: [], taskRef: {\n                    kind: 'Task',\n                    name: item.name,\n                } }, item);\n        });\n    }\n    obj.spec.tasks = tasks;\n    const { nodes, edges } = getTopologyNodesEdges(workflowTemplate, workflow);\n    nodes.forEach(node => node.type = NodeType.WORKFLOW_NODE);\n    if (nodes.length === 0 && edges.length === 0) {\n        // Nothing to render\n        // TODO: Confirm wording with UX; ODC-1860\n        return (React.createElement(Alert, { variant: \"info\", isInline: true, title: `This ${workflow ? 'Workflow' : 'Workflow Template'} has no step to visualize.` }));\n    }\n    return (React.createElement(\"div\", { className: \"odc-pipeline-visualization\" },\n        React.createElement(PipelineTopologyGraph, { id: ((_a = workflow === null || workflow === void 0 ? void 0 : workflow.metadata) === null || _a === void 0 ? void 0 : _a.name) || workflowTemplate.metadata.name, nodes: nodes, edges: edges, layout: PipelineLayout.DAGRE_VIEWER })));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/pipeline-details/WorkflowTemplateVisualization.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/pipeline-details/WorkflowTemplateVisualization.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Alert } from '@patternfly/react-core';\nimport PipelineTopologyGraph from '../../pipeline-topology/PipelineTopologyGraph';\nimport { getTopologyNodesEdges } from '../../pipeline-topology/utils';\nimport { PipelineLayout, NodeType } from '../../pipeline-topology/const';\n\nimport './PipelineVisualization.scss';\nimport * as _ from 'lodash-es';\n\ninterface WorkflowTemplateTopologyVisualizationProps {\n  workflowTemplate: any;\n  workflow?: any;\n}\n\nexport const WorkflowTemplateVisualization: React.FC<WorkflowTemplateTopologyVisualizationProps> = ({\n  workflowTemplate,\n  workflow = undefined\n}) => {\n  const obj = workflow || workflowTemplate;\n  const templates = _.get(obj, ['spec', 'templates']) || [];\n  let template = null;\n  let tasks = [];\n  for (let tmp of templates) {\n    if (tmp.hasOwnProperty('dag')) {\n      template = { ...tmp, type: 'dag' };\n    }\n    else if (tmp.hasOwnProperty('steps')) {\n      template = { ...tmp, type: 'step' };\n    }\n  }\n  if (template?.type === 'dag') {\n    tasks = _.get(template, ['dag', 'tasks']).map(item => {\n      return {\n        name: item.name,\n        runAfter: item.dependencies || [],\n        taskRef: {\n          kind: 'Task',\n          name: item.name,\n        },\n        ...item,\n      };\n    });\n  } else if (template?.type === 'step') {\n    tasks = template.steps[0] ? template.steps\n      .map(item => item[0])\n      .map((item, idx, arr) => {\n        return {\n          name: item.name,\n          runAfter: idx ? [arr[idx - 1].name] : [],\n          taskRef: {\n            kind: 'Task',\n            name: item.name,\n          },\n          ...item,\n        };\n      }) : [];\n  }\n  else {\n    // 그래프로 표현할 항목이 없을 경우 템플릿을 노드 하나로 표현\n    tasks = templates.map((item) => {\n      return {\n        name: item.name,\n        isTemplate: true,\n        runAfter: [],\n        taskRef: {\n          kind: 'Task',\n          name: item.name,\n        },\n        ...item,\n      };\n    });\n  }\n  obj.spec.tasks = tasks;\n  const { nodes, edges } = getTopologyNodesEdges(workflowTemplate, workflow);\n  nodes.forEach(node => node.type = NodeType.WORKFLOW_NODE);\n\n  if (nodes.length === 0 && edges.length === 0) {\n    // Nothing to render\n    // TODO: Confirm wording with UX; ODC-1860\n    return (\n      <Alert\n        variant=\"info\"\n        isInline\n        title={`This ${workflow ? 'Workflow' : 'Workflow Template'\n          } has no step to visualize.`}\n      />\n    );\n  }\n\n  return (\n    <div className=\"odc-pipeline-visualization\">\n      <PipelineTopologyGraph\n        id={workflow?.metadata?.name || workflowTemplate.metadata.name}\n        nodes={nodes}\n        edges={edges}\n        layout={PipelineLayout.DAGRE_VIEWER}\n      />\n    </div>\n  );\n};\n\n"]}]}