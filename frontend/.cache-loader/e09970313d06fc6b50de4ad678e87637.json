{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/data-transforms/transform-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/data-transforms/transform-utils.ts","mtime":1617154808370},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { referenceFor } from '@console/internal/module/k8s';\nimport { TransformResourceData, isKnativeServing } from '@console/shared';\nimport { getImageForIconClass } from '@console/internal/components/catalog/catalog-item-icon';\nimport { TYPE_EVENT_SOURCE, TYPE_KNATIVE_REVISION } from '@console/knative-plugin/src/topology/const';\nimport { edgesFromAnnotations, edgesFromServiceBinding } from '../../../utils/application-utils';\nimport { TYPE_APPLICATION_GROUP, TYPE_WORKLOAD, TYPE_CONNECTS_TO, TYPE_SERVICE_BINDING } from '../components/const';\nimport { getRoutesURL } from '../topology-utils';\nexport const dataObjectFromModel = (node) => {\n    return {\n        id: node.id,\n        name: node.name,\n        type: node.type,\n        resources: null,\n        operatorBackedService: false,\n        data: null,\n    };\n};\n/**\n * create instance of TransformResourceData, return object containing all methods\n */\nexport const createInstanceForResource = (resources, utils, installedOperators) => {\n    const transformResourceData = new TransformResourceData(resources, utils, installedOperators);\n    return {\n        deployments: transformResourceData.createDeploymentItems,\n        deploymentConfigs: transformResourceData.createDeploymentConfigItems,\n        daemonSets: transformResourceData.createDaemonSetItems,\n        statefulSets: transformResourceData.createStatefulSetItems,\n    };\n};\n/**\n * create all data that need to be shown on a topology data\n */\nexport const createTopologyNodeData = (dc, type, defaultIcon, operatorBackedService = false) => {\n    var _a, _b;\n    const { obj: deploymentConfig, current, previous, isRollingOut, buildConfigs, pipelines = [], pipelineRuns = [] } = dc;\n    const dcUID = _.get(deploymentConfig, 'metadata.uid');\n    const deploymentsLabels = _.get(deploymentConfig, 'metadata.labels', {});\n    const deploymentsAnnotations = _.get(deploymentConfig, 'metadata.annotations', {});\n    const builderImageIcon = getImageForIconClass(`icon-${deploymentsLabels['app.openshift.io/runtime']}`) || getImageForIconClass(`icon-${deploymentsLabels['app.kubernetes.io/name']}`);\n    return {\n        id: dcUID,\n        name: _.get(deploymentConfig, 'metadata.name') || deploymentsLabels['app.kubernetes.io/instance'],\n        type,\n        resources: Object.assign(Object.assign({}, dc), { isOperatorBackedService: operatorBackedService }),\n        pods: dc.pods,\n        operatorBackedService,\n        data: {\n            url: getRoutesURL(dc),\n            kind: referenceFor(deploymentConfig),\n            editURL: deploymentsAnnotations['app.openshift.io/edit-url'],\n            vcsURI: deploymentsAnnotations['app.openshift.io/vcs-uri'],\n            builderImage: builderImageIcon || defaultIcon,\n            isKnativeResource: type && (type === TYPE_EVENT_SOURCE || type === TYPE_KNATIVE_REVISION) ? true : isKnativeServing(deploymentConfig, 'metadata.labels'),\n            build: (_b = (_a = buildConfigs === null || buildConfigs === void 0 ? void 0 : buildConfigs[0]) === null || _a === void 0 ? void 0 : _a.builds) === null || _b === void 0 ? void 0 : _b[0],\n            connectedPipeline: {\n                pipeline: pipelines[0],\n                pipelineRuns,\n            },\n            donutStatus: {\n                pods: dc.pods,\n                current,\n                previous,\n                isRollingOut,\n                dc: deploymentConfig,\n            },\n        },\n    };\n};\n/**\n * create node data for graphs\n */\nexport const getTopologyNodeItem = (dc, type, children) => {\n    const uid = _.get(dc, ['metadata', 'uid']);\n    const name = _.get(dc, ['metadata', 'name']);\n    const label = _.get(dc, ['metadata', 'labels', 'app.openshift.io/instance']);\n    return Object.assign({ id: uid, type: type || TYPE_WORKLOAD, name: label || name }, (children && children.length && { children }));\n};\n/**\n * create edge data for graph\n */\nexport const getTopologyEdgeItems = (dc, resources, sbrs) => {\n    const annotations = _.get(dc, 'metadata.annotations');\n    const edges = [];\n    _.forEach(edgesFromAnnotations(annotations), (edge) => {\n        // handles multiple edges\n        const targetNode = _.get(_.find(resources, deployment => {\n            var _a, _b, _c, _d, _e;\n            let name;\n            if (typeof edge === 'string') {\n                name = (_c = (_b = (_a = deployment.metadata) === null || _a === void 0 ? void 0 : _a.labels) === null || _b === void 0 ? void 0 : _b['app.kubernetes.io/instance']) !== null && _c !== void 0 ? _c : (_d = deployment.metadata) === null || _d === void 0 ? void 0 : _d.name;\n                return name === edge;\n            }\n            name = (_e = deployment.metadata) === null || _e === void 0 ? void 0 : _e.name;\n            const { apiVersion: edgeApiVersion, kind: edgeKind, name: edgeName } = edge;\n            const { kind, apiVersion } = deployment;\n            let edgeExists = name === edgeName && kind === edgeKind;\n            if (apiVersion) {\n                edgeExists = edgeExists && apiVersion === edgeApiVersion;\n            }\n            return edgeExists;\n        }), ['metadata', 'uid']);\n        const uid = _.get(dc, ['metadata', 'uid']);\n        if (targetNode) {\n            edges.push({\n                id: `${uid}_${targetNode}`,\n                type: TYPE_CONNECTS_TO,\n                source: uid,\n                target: targetNode,\n            });\n        }\n    });\n    _.forEach(edgesFromServiceBinding(dc, sbrs), sbr => {\n        // look for multiple backing services first in `backingServiceSelectors`\n        // followed by a fallback to the single reference in `backingServiceSelector`\n        _.forEach(sbr.spec.backingServiceSelectors || [sbr.spec.backingServiceSelector], bss => {\n            var _a, _b;\n            if (bss) {\n                // handles multiple edges\n                const targetResource = resources.find(deployment => { var _a, _b, _c, _d, _e, _f; return ((_c = (_b = (_a = deployment === null || deployment === void 0 ? void 0 : deployment.metadata) === null || _a === void 0 ? void 0 : _a.ownerReferences) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.kind) === bss.kind && ((_f = (_e = (_d = deployment === null || deployment === void 0 ? void 0 : deployment.metadata) === null || _d === void 0 ? void 0 : _d.ownerReferences) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.name) === bss.resourceRef; });\n                const target = (_a = targetResource === null || targetResource === void 0 ? void 0 : targetResource.metadata) === null || _a === void 0 ? void 0 : _a.uid;\n                const source = (_b = dc === null || dc === void 0 ? void 0 : dc.metadata) === null || _b === void 0 ? void 0 : _b.uid;\n                if (source && target) {\n                    edges.push({\n                        id: `${source}_${target}`,\n                        type: TYPE_SERVICE_BINDING,\n                        source,\n                        target,\n                        data: { sbr },\n                    });\n                }\n            }\n        });\n    });\n    return edges;\n};\n/**\n * create groups data for graph\n */\nexport const getTopologyGroupItems = (dc) => {\n    const groupName = _.get(dc, ['metadata', 'labels', 'app.kubernetes.io/part-of']);\n    if (!groupName) {\n        return null;\n    }\n    return {\n        id: `group:${groupName}`,\n        type: TYPE_APPLICATION_GROUP,\n        name: groupName,\n        nodes: [_.get(dc, ['metadata', 'uid'])],\n    };\n};\nexport const mergeGroup = (newGroup, existingGroups) => {\n    if (!newGroup) {\n        return;\n    }\n    // find and add the groups\n    const existingGroup = existingGroups.find(g => g.id === newGroup.id);\n    if (!existingGroup) {\n        existingGroups.push(newGroup);\n    }\n    else {\n        newGroup.nodes.forEach(id => {\n            if (!existingGroup.nodes.includes(id)) {\n                existingGroup.nodes.push(id);\n            }\n        });\n    }\n};\nexport const mergeGroups = (newGroups, existingGroups) => {\n    if (!newGroups || !newGroups.length) {\n        return;\n    }\n    newGroups.forEach(newGroup => {\n        mergeGroup(newGroup, existingGroups);\n    });\n};\nexport const addToTopologyDataModel = (newModel, graphModel) => {\n    graphModel.graph.nodes.push(...newModel.graph.nodes);\n    graphModel.graph.edges.push(...newModel.graph.edges);\n    mergeGroups(newModel.graph.groups, graphModel.graph.groups);\n    graphModel.topology = Object.assign(Object.assign({}, graphModel.topology), newModel.topology);\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/data-transforms/transform-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/data-transforms/transform-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { K8sResourceKind, referenceFor } from '@console/internal/module/k8s';\nimport { TransformResourceData, isKnativeServing } from '@console/shared';\nimport { ClusterServiceVersionKind } from '@console/operator-lifecycle-manager';\nimport { getImageForIconClass } from '@console/internal/components/catalog/catalog-item-icon';\nimport { TYPE_EVENT_SOURCE, TYPE_KNATIVE_REVISION } from '@console/knative-plugin/src/topology/const';\nimport { edgesFromAnnotations, edgesFromServiceBinding } from '../../../utils/application-utils';\nimport { TopologyDataModel, TopologyDataResources, TopologyDataObject, Node, Edge, Group, TopologyOverviewItem, ConnectsToData } from '../topology-types';\nimport { TYPE_APPLICATION_GROUP, TYPE_WORKLOAD, TYPE_CONNECTS_TO, TYPE_SERVICE_BINDING } from '../components/const';\nimport { getRoutesURL } from '../topology-utils';\n\nexport const dataObjectFromModel = (node: Node | Group): TopologyDataObject => {\n  return {\n    id: node.id,\n    name: node.name,\n    type: node.type,\n    resources: null,\n    operatorBackedService: false,\n    data: null,\n  };\n};\n\n/**\n * create instance of TransformResourceData, return object containing all methods\n */\nexport const createInstanceForResource = (resources: TopologyDataResources, utils?: Function[], installedOperators?: ClusterServiceVersionKind[]) => {\n  const transformResourceData = new TransformResourceData(resources, utils, installedOperators);\n\n  return {\n    deployments: transformResourceData.createDeploymentItems,\n    deploymentConfigs: transformResourceData.createDeploymentConfigItems,\n    daemonSets: transformResourceData.createDaemonSetItems,\n    statefulSets: transformResourceData.createStatefulSetItems,\n  };\n};\n\n/**\n * create all data that need to be shown on a topology data\n */\nexport const createTopologyNodeData = (dc: TopologyOverviewItem, type: string, defaultIcon: string, operatorBackedService: boolean = false): TopologyDataObject => {\n  const { obj: deploymentConfig, current, previous, isRollingOut, buildConfigs, pipelines = [], pipelineRuns = [] } = dc;\n  const dcUID = _.get(deploymentConfig, 'metadata.uid');\n  const deploymentsLabels = _.get(deploymentConfig, 'metadata.labels', {});\n  const deploymentsAnnotations = _.get(deploymentConfig, 'metadata.annotations', {});\n\n  const builderImageIcon = getImageForIconClass(`icon-${deploymentsLabels['app.openshift.io/runtime']}`) || getImageForIconClass(`icon-${deploymentsLabels['app.kubernetes.io/name']}`);\n  return {\n    id: dcUID,\n    name: _.get(deploymentConfig, 'metadata.name') || deploymentsLabels['app.kubernetes.io/instance'],\n    type,\n    resources: { ...dc, isOperatorBackedService: operatorBackedService },\n    pods: dc.pods,\n    operatorBackedService,\n    data: {\n      url: getRoutesURL(dc),\n      kind: referenceFor(deploymentConfig),\n      editURL: deploymentsAnnotations['app.openshift.io/edit-url'],\n      vcsURI: deploymentsAnnotations['app.openshift.io/vcs-uri'],\n      builderImage: builderImageIcon || defaultIcon,\n      isKnativeResource: type && (type === TYPE_EVENT_SOURCE || type === TYPE_KNATIVE_REVISION) ? true : isKnativeServing(deploymentConfig, 'metadata.labels'),\n      build: buildConfigs?.[0]?.builds?.[0],\n      connectedPipeline: {\n        pipeline: pipelines[0],\n        pipelineRuns,\n      },\n      donutStatus: {\n        pods: dc.pods,\n        current,\n        previous,\n        isRollingOut,\n        dc: deploymentConfig,\n      },\n    },\n  };\n};\n\n/**\n * create node data for graphs\n */\nexport const getTopologyNodeItem = (dc: K8sResourceKind, type?: string, children?: string[]): Node => {\n  const uid = _.get(dc, ['metadata', 'uid']);\n  const name = _.get(dc, ['metadata', 'name']);\n  const label = _.get(dc, ['metadata', 'labels', 'app.openshift.io/instance']);\n\n  return {\n    id: uid,\n    type: type || TYPE_WORKLOAD,\n    name: label || name,\n    ...(children && children.length && { children }),\n  };\n};\n\n/**\n * create edge data for graph\n */\nexport const getTopologyEdgeItems = (dc: K8sResourceKind, resources: K8sResourceKind[], sbrs: K8sResourceKind[]): Edge[] => {\n  const annotations = _.get(dc, 'metadata.annotations');\n  const edges = [];\n\n  _.forEach(edgesFromAnnotations(annotations), (edge: string | ConnectsToData) => {\n    // handles multiple edges\n    const targetNode = _.get(\n      _.find(resources, deployment => {\n        let name;\n        if (typeof edge === 'string') {\n          name = deployment.metadata?.labels?.['app.kubernetes.io/instance'] ?? deployment.metadata?.name;\n          return name === edge;\n        }\n        name = deployment.metadata?.name;\n        const { apiVersion: edgeApiVersion, kind: edgeKind, name: edgeName } = edge;\n        const { kind, apiVersion } = deployment;\n        let edgeExists = name === edgeName && kind === edgeKind;\n        if (apiVersion) {\n          edgeExists = edgeExists && apiVersion === edgeApiVersion;\n        }\n        return edgeExists;\n      }),\n      ['metadata', 'uid'],\n    );\n    const uid = _.get(dc, ['metadata', 'uid']);\n    if (targetNode) {\n      edges.push({\n        id: `${uid}_${targetNode}`,\n        type: TYPE_CONNECTS_TO,\n        source: uid,\n        target: targetNode,\n      });\n    }\n  });\n\n  _.forEach(edgesFromServiceBinding(dc, sbrs), sbr => {\n    // look for multiple backing services first in `backingServiceSelectors`\n    // followed by a fallback to the single reference in `backingServiceSelector`\n    _.forEach(sbr.spec.backingServiceSelectors || [sbr.spec.backingServiceSelector], bss => {\n      if (bss) {\n        // handles multiple edges\n        const targetResource = resources.find(deployment => deployment?.metadata?.ownerReferences?.[0]?.kind === bss.kind && deployment?.metadata?.ownerReferences?.[0]?.name === bss.resourceRef);\n        const target = targetResource?.metadata?.uid;\n        const source = dc?.metadata?.uid;\n        if (source && target) {\n          edges.push({\n            id: `${source}_${target}`,\n            type: TYPE_SERVICE_BINDING,\n            source,\n            target,\n            data: { sbr },\n          });\n        }\n      }\n    });\n  });\n\n  return edges;\n};\n\n/**\n * create groups data for graph\n */\nexport const getTopologyGroupItems = (dc: K8sResourceKind): Group => {\n  const groupName = _.get(dc, ['metadata', 'labels', 'app.kubernetes.io/part-of']);\n  if (!groupName) {\n    return null;\n  }\n\n  return {\n    id: `group:${groupName}`,\n    type: TYPE_APPLICATION_GROUP,\n    name: groupName,\n    nodes: [_.get(dc, ['metadata', 'uid'])],\n  };\n};\n\nexport const mergeGroup = (newGroup: Group, existingGroups: Group[]): void => {\n  if (!newGroup) {\n    return;\n  }\n\n  // find and add the groups\n  const existingGroup = existingGroups.find(g => g.id === newGroup.id);\n  if (!existingGroup) {\n    existingGroups.push(newGroup);\n  } else {\n    newGroup.nodes.forEach(id => {\n      if (!existingGroup.nodes.includes(id)) {\n        existingGroup.nodes.push(id);\n      }\n    });\n  }\n};\n\nexport const mergeGroups = (newGroups: Group[], existingGroups: Group[]): void => {\n  if (!newGroups || !newGroups.length) {\n    return;\n  }\n  newGroups.forEach(newGroup => {\n    mergeGroup(newGroup, existingGroups);\n  });\n};\n\nexport const addToTopologyDataModel = (newModel: TopologyDataModel, graphModel: TopologyDataModel) => {\n  graphModel.graph.nodes.push(...newModel.graph.nodes);\n  graphModel.graph.edges.push(...newModel.graph.edges);\n  mergeGroups(newModel.graph.groups, graphModel.graph.groups);\n  graphModel.topology = {\n    ...graphModel.topology,\n    ...newModel.topology,\n  };\n};\n"]}]}