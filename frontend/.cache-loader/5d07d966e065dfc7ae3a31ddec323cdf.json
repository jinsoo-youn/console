{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-topology/WorkflowNode.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-topology/WorkflowNode.tsx","mtime":1617182414000},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { observer } from '../../../../../topology/src';\nimport { WorkflowVisualizationTask } from '../detail-page-tabs/pipeline-details/WorkflowVisualizationTask';\nimport { DROP_SHADOW_SPACING } from './const';\nconst WorkflowNode = ({ element }) => {\n    var _a, _b;\n    const { height, width } = element.getBounds();\n    const { pipeline, pipelineRun, task, selected } = element.getData();\n    if (!!pipelineRun) {\n        for (let node in pipelineRun.status.nodes) {\n            // step, dag 인 경우 displayName으로 node 참조. 템플릿 항목 자체를 노드로 사용하는 경우 templateName으로 node 참조\n            const nodeNameField = task.isTemplate ? 'templateName' : 'displayName';\n            if (pipelineRun.status.nodes[node][nodeNameField] === task.name) {\n                task.status = { reason: pipelineRun.status.nodes[node].phase };\n                break;\n            }\n        }\n    }\n    return (React.createElement(\"foreignObject\", { width: width, height: height + DROP_SHADOW_SPACING },\n        React.createElement(WorkflowVisualizationTask, { pipelineRunName: (_a = pipelineRun === null || pipelineRun === void 0 ? void 0 : pipelineRun.metadata) === null || _a === void 0 ? void 0 : _a.name, task: task, pipelineRunStatus: pipelineRun && pipelineRun.status.phase, namespace: (_b = pipeline === null || pipeline === void 0 ? void 0 : pipeline.metadata) === null || _b === void 0 ? void 0 : _b.namespace, disableTooltip: true, selected: selected })));\n};\nexport default observer(WorkflowNode);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-topology/WorkflowNode.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-topology/WorkflowNode.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,QAAQ,EAAmB,MAAM,6BAA6B,CAAC;AACxE,OAAO,EAAE,yBAAyB,EAAE,MAAM,gEAAgE,CAAC;AAC3G,OAAO,EAAE,mBAAmB,EAAE,MAAM,SAAS,CAAC;AAQ9C,MAAM,YAAY,GAA4B,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE;;IAC5D,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC;IAC9C,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,IAAI,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;IACpE,IAAI,CAAC,CAAC,WAAW,EAAE;QACjB,KAAK,IAAI,IAAI,IAAI,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE;YACzC,sFAAsF;YACtF,MAAM,aAAa,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,aAAa,CAAC;YACvE,IAAI,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,aAAa,CAAC,KAAK,IAAI,CAAC,IAAI,EAAE;gBAC/D,IAAI,CAAC,MAAM,GAAG,EAAE,MAAM,EAAE,WAAW,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,KAAK,EAAE,CAAA;gBAC9D,MAAM;aACP;SACF;KACF;IACD,OAAO,CACL,uCAAe,KAAK,EAAE,KAAK,EAAE,MAAM,EAAE,MAAM,GAAG,mBAAmB;QAC/D,oBAAC,yBAAyB,IACxB,eAAe,QAAE,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,QAAQ,0CAAE,IAAI,EAC5C,IAAI,EAAE,IAAI,EACV,iBAAiB,EAAE,WAAW,IAAI,WAAW,CAAC,MAAM,CAAC,KAAK,EAC1D,SAAS,QAAE,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,QAAQ,0CAAE,SAAS,EACxC,cAAc,EAAE,IAAI,EACpB,QAAQ,EAAE,QAAQ,GAClB,CACY,CACjB,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,QAAQ,CAAC,YAAY,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { observer, Node, NodeModel } from '../../../../../topology/src';\nimport { WorkflowVisualizationTask } from '../detail-page-tabs/pipeline-details/WorkflowVisualizationTask';\nimport { DROP_SHADOW_SPACING } from './const';\nimport { TaskNodeModelData } from './types';\n\ntype TaskNodeProps = {\n  element: Node<NodeModel, TaskNodeModelData>;\n  disableTooltip?: boolean;\n};\n\nconst WorkflowNode: React.FC<TaskNodeProps> = ({ element }) => {\n  const { height, width } = element.getBounds();\n  const { pipeline, pipelineRun, task, selected } = element.getData();\n  if (!!pipelineRun) {\n    for (let node in pipelineRun.status.nodes) {\n      // step, dag 인 경우 displayName으로 node 참조. 템플릿 항목 자체를 노드로 사용하는 경우 templateName으로 node 참조\n      const nodeNameField = task.isTemplate ? 'templateName' : 'displayName';\n      if (pipelineRun.status.nodes[node][nodeNameField] === task.name) {\n        task.status = { reason: pipelineRun.status.nodes[node].phase }\n        break;\n      }\n    }\n  }\n  return (\n    <foreignObject width={width} height={height + DROP_SHADOW_SPACING}>\n      <WorkflowVisualizationTask\n        pipelineRunName={pipelineRun?.metadata?.name}\n        task={task}\n        pipelineRunStatus={pipelineRun && pipelineRun.status.phase}\n        namespace={pipeline?.metadata?.namespace}\n        disableTooltip={true}\n        selected={selected}\n      />\n    </foreignObject>\n  );\n};\n\nexport default observer(WorkflowNode);\n"]}]}