{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/safe-fetch-hook.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/safe-fetch-hook.ts","mtime":1616735742480},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { useEffect, useRef } from 'react';\nimport { coFetchJSON } from '../../co-fetch';\nexport const useSafeFetch = () => {\n    const controller = useRef();\n    useEffect(() => {\n        controller.current = new AbortController();\n        return () => controller.current.abort();\n    }, []);\n    return (url) => coFetchJSON(url, 'get', { signal: controller.current.signal });\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/safe-fetch-hook.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/safe-fetch-hook.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AAC1C,OAAO,EAAE,WAAW,EAAE,MAAM,gBAAgB,CAAC;AAE7C,MAAM,CAAC,MAAM,YAAY,GAAG,GAAG,EAAE;IAC/B,MAAM,UAAU,GAAG,MAAM,EAAmB,CAAC;IAC7C,SAAS,CAAC,GAAG,EAAE;QACb,UAAU,CAAC,OAAO,GAAG,IAAI,eAAe,EAAE,CAAC;QAC3C,OAAO,GAAG,EAAE,CAAC,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;IAC1C,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC,WAAW,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,MAAM,EAAE,UAAU,CAAC,OAAO,CAAC,MAAqB,EAAE,CAAC,CAAC;AAChG,CAAC,CAAC","sourcesContent":["import { useEffect, useRef } from 'react';\nimport { coFetchJSON } from '../../co-fetch';\n\nexport const useSafeFetch = () => {\n  const controller = useRef<AbortController>();\n  useEffect(() => {\n    controller.current = new AbortController();\n    return () => controller.current.abort();\n  }, []);\n\n  return (url) => coFetchJSON(url, 'get', { signal: controller.current.signal as AbortSignal });\n};\n"]}]}