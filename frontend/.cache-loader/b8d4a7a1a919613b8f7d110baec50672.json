{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/selector.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/selector.ts","mtime":1615298458760},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { createEquals, requirementFromString, requirementToString } from './selector-requirement';\nconst isOldFormat = (selector) => !selector.matchLabels && !selector.matchExpressions;\nexport const fromRequirements = (requirements, options = {}) => {\n    options = options || {};\n    const selector = {\n        matchLabels: {},\n        matchExpressions: [],\n    };\n    if (options.undefinedWhenEmpty && requirements.length === 0) {\n        return;\n    }\n    requirements.forEach((r) => {\n        if (r.operator === 'Equals') {\n            selector.matchLabels[r.key] = r.values[0];\n        }\n        else {\n            selector.matchExpressions.push(r);\n        }\n    });\n    // old selector format?\n    if (options.basic) {\n        return selector.matchLabels;\n    }\n    return selector;\n};\nexport const split = (str) => (str.trim() ? str.split(/,(?![^(]*\\))/) : []); // [''] -> []\nexport const toRequirements = (selector = {}) => {\n    const requirements = [];\n    const matchLabels = isOldFormat(selector) ? selector : selector.matchLabels;\n    const matchExpressions = selector.matchExpressions;\n    Object.keys(matchLabels || {})\n        .sort()\n        .forEach(function (k) {\n        requirements.push(createEquals(k, matchLabels[k]));\n    });\n    (matchExpressions || []).forEach(function (me) {\n        requirements.push(me);\n    });\n    return requirements;\n};\nexport const selectorFromString = (str) => {\n    const requirements = split(str || '').map(requirementFromString);\n    return fromRequirements(requirements);\n};\nexport const selectorToString = (selector) => {\n    const requirements = toRequirements(selector);\n    return requirements.map(requirementToString).join(',');\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/selector.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/selector.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,qBAAqB,EAAE,mBAAmB,EAAE,MAAM,wBAAwB,CAAC;AAGlG,MAAM,WAAW,GAAG,CAAC,QAAgC,EAAE,EAAE,CACvD,CAAC,QAAQ,CAAC,WAAW,IAAI,CAAC,QAAQ,CAAC,gBAAgB,CAAC;AAItD,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,YAA+B,EAAE,UAAU,EAAa,EAAE,EAAE;IAC3F,OAAO,GAAG,OAAO,IAAI,EAAE,CAAC;IACxB,MAAM,QAAQ,GAAG;QACf,WAAW,EAAE,EAAE;QACf,gBAAgB,EAAE,EAAE;KACrB,CAAC;IAEF,IAAI,OAAO,CAAC,kBAAkB,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE;QAC3D,OAAO;KACR;IAED,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;QACzB,IAAI,CAAC,CAAC,QAAQ,KAAK,QAAQ,EAAE;YAC3B,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;SAC3C;aAAM;YACL,QAAQ,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;SACnC;IACH,CAAC,CAAC,CAAC;IAEH,uBAAuB;IACvB,IAAI,OAAO,CAAC,KAAK,EAAE;QACjB,OAAO,QAAQ,CAAC,WAAW,CAAC;KAC7B;IAED,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,KAAK,GAAG,CAAC,GAAW,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,aAAa;AAElG,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,WAAqB,EAAE,EAAE,EAAE;IACxD,MAAM,YAAY,GAAG,EAAE,CAAC;IACxB,MAAM,WAAW,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC;IAC5E,MAAM,gBAAgB,GAAG,QAAQ,CAAC,gBAAgB,CAAC;IAEnD,MAAM,CAAC,IAAI,CAAC,WAAW,IAAI,EAAE,CAAC;SAC3B,IAAI,EAAE;SACN,OAAO,CAAC,UAAS,CAAC;QACjB,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACrD,CAAC,CAAC,CAAC;IAEL,CAAC,gBAAgB,IAAI,EAAE,CAAC,CAAC,OAAO,CAAC,UAAS,EAAE;QAC1C,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IACxB,CAAC,CAAC,CAAC;IAEH,OAAO,YAAY,CAAC;AACtB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,GAAW,EAAE,EAAE;IAChD,MAAM,YAAY,GAAG,KAAK,CAAC,GAAG,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,qBAAqB,CAAsB,CAAC;IACtF,OAAO,gBAAgB,CAAC,YAAY,CAAC,CAAC;AACxC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,QAAkB,EAAE,EAAE;IACrD,MAAM,YAAY,GAAG,cAAc,CAAC,QAAQ,CAAC,CAAC;IAC9C,OAAO,YAAY,CAAC,GAAG,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AACzD,CAAC,CAAC","sourcesContent":["import { createEquals, requirementFromString, requirementToString } from './selector-requirement';\nimport { Selector, MatchExpression, MatchLabels } from './index';\n\nconst isOldFormat = (selector: Selector | MatchLabels) =>\n  !selector.matchLabels && !selector.matchExpressions;\n\ntype Options = { undefinedWhenEmpty?: boolean; basic?: boolean };\n\nexport const fromRequirements = (requirements: MatchExpression[], options = {} as Options) => {\n  options = options || {};\n  const selector = {\n    matchLabels: {},\n    matchExpressions: [],\n  };\n\n  if (options.undefinedWhenEmpty && requirements.length === 0) {\n    return;\n  }\n\n  requirements.forEach((r) => {\n    if (r.operator === 'Equals') {\n      selector.matchLabels[r.key] = r.values[0];\n    } else {\n      selector.matchExpressions.push(r);\n    }\n  });\n\n  // old selector format?\n  if (options.basic) {\n    return selector.matchLabels;\n  }\n\n  return selector;\n};\n\nexport const split = (str: string) => (str.trim() ? str.split(/,(?![^(]*\\))/) : []); // [''] -> []\n\nexport const toRequirements = (selector: Selector = {}) => {\n  const requirements = [];\n  const matchLabels = isOldFormat(selector) ? selector : selector.matchLabels;\n  const matchExpressions = selector.matchExpressions;\n\n  Object.keys(matchLabels || {})\n    .sort()\n    .forEach(function(k) {\n      requirements.push(createEquals(k, matchLabels[k]));\n    });\n\n  (matchExpressions || []).forEach(function(me) {\n    requirements.push(me);\n  });\n\n  return requirements;\n};\n\nexport const selectorFromString = (str: string) => {\n  const requirements = split(str || '').map(requirementFromString) as MatchExpression[];\n  return fromRequirements(requirements);\n};\n\nexport const selectorToString = (selector: Selector) => {\n  const requirements = toRequirements(selector);\n  return requirements.map(requirementToString).join(',');\n};\n"]}]}