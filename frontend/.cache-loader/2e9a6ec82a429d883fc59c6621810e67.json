{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/receiver-forms/webhook-receiver-form.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/receiver-forms/webhook-receiver-form.tsx","mtime":1615298458740},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["/* eslint-disable camelcase */\nimport * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { ExpandCollapse } from '../../utils';\nimport { SendResolvedAlertsCheckbox } from './alert-manager-receiver-forms';\nexport const Form = ({ formValues, dispatchFormChange }) => (React.createElement(\"div\", { \"data-test-id\": \"webhook-receiver-form\", className: \"form-group\" },\n    React.createElement(\"label\", { className: \"control-label co-required\", htmlFor: \"webhook-url\" }, \"URL\"),\n    React.createElement(\"input\", { className: \"pf-c-form-control\", type: \"text\", \"aria-describedby\": \"webhook-url-help\", id: \"webhook-url\", \"data-test-id\": \"webhook-url\", value: formValues.webhookUrl, onChange: (e) => dispatchFormChange({\n            type: 'setFormValues',\n            payload: { webhookUrl: e.target.value },\n        }) }),\n    React.createElement(\"div\", { className: \"help-block\", id: \"webhook-url-help\" }, \"The endpoint to send HTTP POST requests to.\"),\n    React.createElement(\"div\", { className: \"form-group\" },\n        React.createElement(ExpandCollapse, { textCollapsed: \"Show advanced configuration\", textExpanded: \"Hide advanced configuration\" },\n            React.createElement(\"div\", { className: \"co-form-subsection\" },\n                React.createElement(\"div\", { className: \"form-group\" },\n                    React.createElement(SendResolvedAlertsCheckbox, { formField: \"webhookSendResolved\", formValues: formValues, dispatchFormChange: dispatchFormChange })))))));\nexport const getInitialValues = (globals, receiverConfig) => {\n    return {\n        webhookUrl: (receiverConfig === null || receiverConfig === void 0 ? void 0 : receiverConfig.url) || '',\n        webhookSendResolved: _.get(receiverConfig, 'send_resolved', globals === null || globals === void 0 ? void 0 : globals.webhook_send_resolved),\n    };\n};\nexport const isFormInvalid = (formValues) => {\n    return !formValues.webhookUrl;\n};\nexport const updateGlobals = () => {\n    return {};\n};\nexport const createReceiverConfig = (globals, formValues, receiverConfig) => {\n    _.set(receiverConfig, 'url', formValues.webhookUrl);\n    if (formValues.webhookSendResolved !== globals.webhook_send_resolved) {\n        _.set(receiverConfig, 'send_resolved', formValues === null || formValues === void 0 ? void 0 : formValues.webhookSendResolved);\n    }\n    else {\n        _.unset(receiverConfig, 'send_resolved'); // equals global, unset in config so global is used\n    }\n    return receiverConfig;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/receiver-forms/webhook-receiver-form.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/receiver-forms/webhook-receiver-form.tsx"],"names":[],"mappings":"AAAA,8BAA8B;AAC9B,OAAO,KAAK,CAAC,MAAM,WAAW,CAAC;AAC/B,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAE,cAAc,EAAE,MAAM,aAAa,CAAC;AAC7C,OAAO,EAAE,0BAA0B,EAAa,MAAM,gCAAgC,CAAC;AAEvF,MAAM,CAAC,MAAM,IAAI,GAAwB,CAAC,EAAE,UAAU,EAAE,kBAAkB,EAAE,EAAE,EAAE,CAAC,CAC/E,6CAAkB,uBAAuB,EAAC,SAAS,EAAC,YAAY;IAC9D,+BAAO,SAAS,EAAC,2BAA2B,EAAC,OAAO,EAAC,aAAa,UAE1D;IACR,+BACE,SAAS,EAAC,mBAAmB,EAC7B,IAAI,EAAC,MAAM,sBACM,kBAAkB,EACnC,EAAE,EAAC,aAAa,kBACH,aAAa,EAC1B,KAAK,EAAE,UAAU,CAAC,UAAU,EAC5B,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE,CACd,kBAAkB,CAAC;YACjB,IAAI,EAAE,eAAe;YACrB,OAAO,EAAE,EAAE,UAAU,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE;SACxC,CAAC,GAEJ;IACF,6BAAK,SAAS,EAAC,YAAY,EAAC,EAAE,EAAC,kBAAkB,kDAE3C;IACN,6BAAK,SAAS,EAAC,YAAY;QACzB,oBAAC,cAAc,IACb,aAAa,EAAC,6BAA6B,EAC3C,YAAY,EAAC,6BAA6B;YAE1C,6BAAK,SAAS,EAAC,oBAAoB;gBACjC,6BAAK,SAAS,EAAC,YAAY;oBACzB,oBAAC,0BAA0B,IACzB,SAAS,EAAC,qBAAqB,EAC/B,UAAU,EAAE,UAAU,EACtB,kBAAkB,EAAE,kBAAkB,GACtC,CACE,CACF,CACS,CACb,CACF,CACP,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,OAAO,EAAE,cAAc,EAAE,EAAE;IAC1D,OAAO;QACL,UAAU,EAAE,CAAA,cAAc,aAAd,cAAc,uBAAd,cAAc,CAAE,GAAG,KAAI,EAAE;QACrC,mBAAmB,EAAE,CAAC,CAAC,GAAG,CAAC,cAAc,EAAE,eAAe,EAAE,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,qBAAqB,CAAC;KAC5F,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,UAAU,EAAE,EAAE;IAC1C,OAAO,CAAC,UAAU,CAAC,UAAU,CAAC;AAChC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAAG,GAAG,EAAE;IAChC,OAAO,EAAE,CAAC;AACZ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,OAAO,EAAE,UAAU,EAAE,cAAc,EAAE,EAAE;IAC1E,CAAC,CAAC,GAAG,CAAC,cAAc,EAAE,KAAK,EAAE,UAAU,CAAC,UAAU,CAAC,CAAC;IAEpD,IAAI,UAAU,CAAC,mBAAmB,KAAK,OAAO,CAAC,qBAAqB,EAAE;QACpE,CAAC,CAAC,GAAG,CAAC,cAAc,EAAE,eAAe,EAAE,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,mBAAmB,CAAC,CAAC;KACzE;SAAM;QACL,CAAC,CAAC,KAAK,CAAC,cAAc,EAAE,eAAe,CAAC,CAAC,CAAC,mDAAmD;KAC9F;IAED,OAAO,cAAc,CAAC;AACxB,CAAC,CAAC","sourcesContent":["/* eslint-disable camelcase */\nimport * as _ from 'lodash-es';\nimport * as React from 'react';\n\nimport { ExpandCollapse } from '../../utils';\nimport { SendResolvedAlertsCheckbox, FormProps } from './alert-manager-receiver-forms';\n\nexport const Form: React.FC<FormProps> = ({ formValues, dispatchFormChange }) => (\n  <div data-test-id=\"webhook-receiver-form\" className=\"form-group\">\n    <label className=\"control-label co-required\" htmlFor=\"webhook-url\">\n      URL\n    </label>\n    <input\n      className=\"pf-c-form-control\"\n      type=\"text\"\n      aria-describedby=\"webhook-url-help\"\n      id=\"webhook-url\"\n      data-test-id=\"webhook-url\"\n      value={formValues.webhookUrl}\n      onChange={(e) =>\n        dispatchFormChange({\n          type: 'setFormValues',\n          payload: { webhookUrl: e.target.value },\n        })\n      }\n    />\n    <div className=\"help-block\" id=\"webhook-url-help\">\n      The endpoint to send HTTP POST requests to.\n    </div>\n    <div className=\"form-group\">\n      <ExpandCollapse\n        textCollapsed=\"Show advanced configuration\"\n        textExpanded=\"Hide advanced configuration\"\n      >\n        <div className=\"co-form-subsection\">\n          <div className=\"form-group\">\n            <SendResolvedAlertsCheckbox\n              formField=\"webhookSendResolved\"\n              formValues={formValues}\n              dispatchFormChange={dispatchFormChange}\n            />\n          </div>\n        </div>\n      </ExpandCollapse>\n    </div>\n  </div>\n);\n\nexport const getInitialValues = (globals, receiverConfig) => {\n  return {\n    webhookUrl: receiverConfig?.url || '',\n    webhookSendResolved: _.get(receiverConfig, 'send_resolved', globals?.webhook_send_resolved),\n  };\n};\n\nexport const isFormInvalid = (formValues) => {\n  return !formValues.webhookUrl;\n};\n\nexport const updateGlobals = () => {\n  return {};\n};\n\nexport const createReceiverConfig = (globals, formValues, receiverConfig) => {\n  _.set(receiverConfig, 'url', formValues.webhookUrl);\n\n  if (formValues.webhookSendResolved !== globals.webhook_send_resolved) {\n    _.set(receiverConfig, 'send_resolved', formValues?.webhookSendResolved);\n  } else {\n    _.unset(receiverConfig, 'send_resolved'); // equals global, unset in config so global is used\n  }\n\n  return receiverConfig;\n};\n"]}]}