{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/health-checks/health-checks-probe-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/health-checks/health-checks-probe-utils.ts","mtime":1615298458610},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { HealthChecksProbeType, RequestType } from './health-checks-types';\nexport const getHealthChecksProbeConfig = (probe) => {\n    switch (probe) {\n        case HealthChecksProbeType.ReadinessProbe: {\n            return {\n                formTitle: 'Readiness Probe',\n                formSubtitle: \"A Readiness probe checks if the container is ready to handle requests. A failed readiness probe means that a container should not receive any traffic from a proxy, even if it's running.\",\n            };\n        }\n        case HealthChecksProbeType.LivenessProbe: {\n            return {\n                formTitle: 'Liveness Probe',\n                formSubtitle: 'A Liveness probe checks if the container is still running. If the liveness probe fails the container is killed.',\n            };\n        }\n        case HealthChecksProbeType.StartupProbe: {\n            return {\n                formTitle: 'Startup Probe',\n                formSubtitle: 'A Startup probe checks if the application within the container is started. If the startup probe fails the container is killed.',\n            };\n        }\n        default:\n            return undefined;\n    }\n};\nexport const healthChecksDefaultValues = {\n    showForm: false,\n    enabled: false,\n    modified: false,\n    data: {\n        failureThreshold: 3,\n        requestType: RequestType.HTTPGET,\n        httpGet: {\n            scheme: 'HTTP',\n            path: '/',\n            port: 8080,\n            httpHeaders: [],\n        },\n        tcpSocket: {\n            port: 8080,\n        },\n        exec: { command: [''] },\n        initialDelaySeconds: 0,\n        periodSeconds: 10,\n        timeoutSeconds: 1,\n        successThreshold: 1,\n    },\n};\nexport const healthChecksProbeInitialData = {\n    readinessProbe: healthChecksDefaultValues,\n    livenessProbe: healthChecksDefaultValues,\n    startupProbe: healthChecksDefaultValues,\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/health-checks/health-checks-probe-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/health-checks/health-checks-probe-utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,qBAAqB,EAAE,WAAW,EAAoB,MAAM,uBAAuB,CAAC;AAE7F,MAAM,CAAC,MAAM,0BAA0B,GAAG,CAAC,KAAa,EAAE,EAAE;IAC1D,QAAQ,KAAK,EAAE;QACb,KAAK,qBAAqB,CAAC,cAAc,CAAC,CAAC;YACzC,OAAO;gBACL,SAAS,EAAE,iBAAiB;gBAC5B,YAAY,EACV,2LAA2L;aAC9L,CAAC;SACH;QACD,KAAK,qBAAqB,CAAC,aAAa,CAAC,CAAC;YACxC,OAAO;gBACL,SAAS,EAAE,gBAAgB;gBAC3B,YAAY,EACV,iHAAiH;aACpH,CAAC;SACH;QACD,KAAK,qBAAqB,CAAC,YAAY,CAAC,CAAC;YACvC,OAAO;gBACL,SAAS,EAAE,eAAe;gBAC1B,YAAY,EACV,gIAAgI;aACnI,CAAC;SACH;QACD;YACE,OAAO,SAAS,CAAC;KACpB;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,yBAAyB,GAAqB;IACzD,QAAQ,EAAE,KAAK;IACf,OAAO,EAAE,KAAK;IACd,QAAQ,EAAE,KAAK;IACf,IAAI,EAAE;QACJ,gBAAgB,EAAE,CAAC;QACnB,WAAW,EAAE,WAAW,CAAC,OAAO;QAChC,OAAO,EAAE;YACP,MAAM,EAAE,MAAM;YACd,IAAI,EAAE,GAAG;YACT,IAAI,EAAE,IAAI;YACV,WAAW,EAAE,EAAE;SAChB;QACD,SAAS,EAAE;YACT,IAAI,EAAE,IAAI;SACX;QACD,IAAI,EAAE,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC,EAAE;QACvB,mBAAmB,EAAE,CAAC;QACtB,aAAa,EAAE,EAAE;QACjB,cAAc,EAAE,CAAC;QACjB,gBAAgB,EAAE,CAAC;KACpB;CACF,CAAC;AAEF,MAAM,CAAC,MAAM,4BAA4B,GAAG;IAC1C,cAAc,EAAE,yBAAyB;IACzC,aAAa,EAAE,yBAAyB;IACxC,YAAY,EAAE,yBAAyB;CACxC,CAAC","sourcesContent":["import { HealthChecksProbeType, RequestType, HealthCheckProbe } from './health-checks-types';\n\nexport const getHealthChecksProbeConfig = (probe: string) => {\n  switch (probe) {\n    case HealthChecksProbeType.ReadinessProbe: {\n      return {\n        formTitle: 'Readiness Probe',\n        formSubtitle:\n          \"A Readiness probe checks if the container is ready to handle requests. A failed readiness probe means that a container should not receive any traffic from a proxy, even if it's running.\",\n      };\n    }\n    case HealthChecksProbeType.LivenessProbe: {\n      return {\n        formTitle: 'Liveness Probe',\n        formSubtitle:\n          'A Liveness probe checks if the container is still running. If the liveness probe fails the container is killed.',\n      };\n    }\n    case HealthChecksProbeType.StartupProbe: {\n      return {\n        formTitle: 'Startup Probe',\n        formSubtitle:\n          'A Startup probe checks if the application within the container is started. If the startup probe fails the container is killed.',\n      };\n    }\n    default:\n      return undefined;\n  }\n};\n\nexport const healthChecksDefaultValues: HealthCheckProbe = {\n  showForm: false,\n  enabled: false,\n  modified: false,\n  data: {\n    failureThreshold: 3,\n    requestType: RequestType.HTTPGET,\n    httpGet: {\n      scheme: 'HTTP',\n      path: '/',\n      port: 8080,\n      httpHeaders: [],\n    },\n    tcpSocket: {\n      port: 8080,\n    },\n    exec: { command: [''] },\n    initialDelaySeconds: 0,\n    periodSeconds: 10,\n    timeoutSeconds: 1,\n    successThreshold: 1,\n  },\n};\n\nexport const healthChecksProbeInitialData = {\n  readinessProbe: healthChecksDefaultValues,\n  livenessProbe: healthChecksDefaultValues,\n  startupProbe: healthChecksDefaultValues,\n};\n"]}]}