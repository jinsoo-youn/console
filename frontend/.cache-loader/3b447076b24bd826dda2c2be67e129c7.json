{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/modals/subscription-channel-modal.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/modals/subscription-channel-modal.tsx","mtime":1615298458700},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter, } from '@console/internal/components/factory/modal';\nimport { PromiseComponent, ResourceLink } from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { RadioInput } from '@console/internal/components/radio';\nimport { SubscriptionModel, ClusterServiceVersionModel } from '../../models';\nconst getSelectedChannel = (props) => props.subscription.spec.channel || props.pkg.status.channels[0].name;\nexport class SubscriptionChannelModal extends PromiseComponent {\n    constructor(props) {\n        super(props);\n        this.props = props;\n        this.state.selectedChannel = getSelectedChannel(props);\n    }\n    submit(event) {\n        event.preventDefault();\n        const updatedSub = _.cloneDeep(this.props.subscription);\n        updatedSub.spec.channel = this.state.selectedChannel;\n        this.handlePromise(this.props.k8sUpdate(SubscriptionModel, updatedSub))\n            .then(() => this.props.close())\n            .catch((err) => this.setState({ errorMessage: err }));\n    }\n    render() {\n        return (React.createElement(\"form\", { onSubmit: this.submit.bind(this), name: \"form\", className: \"modal-content\" },\n            React.createElement(ModalTitle, { className: \"modal-header\" }, \"Change Subscription Update Channel\"),\n            React.createElement(ModalBody, null,\n                React.createElement(\"div\", { className: \"co-m-form-row\" },\n                    React.createElement(\"p\", null, \"Which channel is used to receive updates?\")),\n                React.createElement(\"div\", { className: \"co-m-form-row row\" }, this.props.pkg.status.channels.map((channel) => (React.createElement(\"div\", { key: channel.name, className: \"col-sm-12\" },\n                    React.createElement(RadioInput, { onChange: (e) => this.setState({ selectedChannel: e.target.value }), value: channel.name, checked: this.state.selectedChannel === channel.name, title: channel.name, subTitle: React.createElement(ResourceLink, { linkTo: false, name: channel.currentCSV, title: channel.currentCSV, kind: referenceForModel(ClusterServiceVersionModel) }) })))))),\n            React.createElement(ModalSubmitFooter, { inProgress: this.state.inProgress, errorMessage: this.state.errorMessage, cancel: () => this.props.cancel(), submitText: \"Save\", submitDisabled: this.state.selectedChannel === getSelectedChannel(this.props) })));\n    }\n}\nexport const createSubscriptionChannelModal = createModalLauncher(SubscriptionChannelModal);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/modals/subscription-channel-modal.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/modals/subscription-channel-modal.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory/modal';\nimport { PromiseComponent, ResourceLink } from '@console/internal/components/utils';\nimport { K8sKind, K8sResourceKind, referenceForModel } from '@console/internal/module/k8s';\nimport { RadioInput } from '@console/internal/components/radio';\nimport { SubscriptionKind, PackageManifestKind } from '../../types';\nimport { SubscriptionModel, ClusterServiceVersionModel } from '../../models';\n\nconst getSelectedChannel = (props: SubscriptionChannelModalProps) =>\n  props.subscription.spec.channel || props.pkg.status.channels[0].name;\n\nexport class SubscriptionChannelModal extends PromiseComponent<\n  SubscriptionChannelModalProps,\n  SubscriptionChannelModalState\n> {\n  public state: SubscriptionChannelModalState;\n\n  constructor(public props: SubscriptionChannelModalProps) {\n    super(props);\n\n    this.state.selectedChannel = getSelectedChannel(props);\n  }\n\n  private submit(event): void {\n    event.preventDefault();\n\n    const updatedSub = _.cloneDeep(this.props.subscription);\n    updatedSub.spec.channel = this.state.selectedChannel;\n    this.handlePromise(this.props.k8sUpdate(SubscriptionModel, updatedSub))\n      .then(() => this.props.close())\n      .catch((err) => this.setState({ errorMessage: err }));\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.submit.bind(this)} name=\"form\" className=\"modal-content\">\n        <ModalTitle className=\"modal-header\">Change Subscription Update Channel</ModalTitle>\n        <ModalBody>\n          <div className=\"co-m-form-row\">\n            <p>Which channel is used to receive updates?</p>\n          </div>\n          <div className=\"co-m-form-row row\">\n            {this.props.pkg.status.channels.map((channel) => (\n              <div key={channel.name} className=\"col-sm-12\">\n                <RadioInput\n                  onChange={(e) => this.setState({ selectedChannel: e.target.value })}\n                  value={channel.name}\n                  checked={this.state.selectedChannel === channel.name}\n                  title={channel.name}\n                  subTitle={\n                    <ResourceLink\n                      linkTo={false}\n                      name={channel.currentCSV}\n                      title={channel.currentCSV}\n                      kind={referenceForModel(ClusterServiceVersionModel)}\n                    />\n                  }\n                />\n              </div>\n            ))}\n          </div>\n        </ModalBody>\n        <ModalSubmitFooter\n          inProgress={this.state.inProgress}\n          errorMessage={this.state.errorMessage}\n          cancel={() => this.props.cancel()}\n          submitText=\"Save\"\n          submitDisabled={this.state.selectedChannel === getSelectedChannel(this.props)}\n        />\n      </form>\n    );\n  }\n}\n\nexport const createSubscriptionChannelModal = createModalLauncher<SubscriptionChannelModalProps>(\n  SubscriptionChannelModal,\n);\n\nexport type SubscriptionChannelModalProps = {\n  cancel?: () => void;\n  close?: () => void;\n  k8sUpdate: (kind: K8sKind, newObj: K8sResourceKind) => Promise<any>;\n  subscription: SubscriptionKind;\n  pkg: PackageManifestKind;\n};\n\nexport type SubscriptionChannelModalState = {\n  inProgress: boolean;\n  errorMessage: string;\n  selectedChannel: string;\n};\n"]}]}