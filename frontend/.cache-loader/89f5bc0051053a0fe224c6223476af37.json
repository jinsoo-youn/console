{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/error/error-boundary.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/error/error-boundary.tsx","mtime":1616735742370},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nconst DefaultFallback = () => React.createElement(\"div\", null);\nexport class ErrorBoundary extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            hasError: false,\n            error: {\n                message: '',\n                stack: '',\n                name: '',\n            },\n            errorInfo: {\n                componentStack: '',\n            },\n        };\n    }\n    componentDidCatch(error, errorInfo) {\n        this.setState({\n            hasError: true,\n            error,\n            errorInfo,\n        });\n        // Log the error so something shows up in the JS console when `DefaultFallback` is used.\n        // eslint-disable-next-line no-console\n        console.error(error);\n    }\n    render() {\n        const { hasError, error, errorInfo } = this.state;\n        const FallbackComponent = this.props.FallbackComponent || DefaultFallback;\n        return hasError ? (React.createElement(FallbackComponent, { title: error.name, componentStack: errorInfo.componentStack, errorMessage: error.message, stack: error.stack })) : (React.createElement(React.Fragment, null, this.props.children));\n    }\n}\nexport const withFallback = (Component, FallbackComponent) => (props) => (React.createElement(ErrorBoundary, { FallbackComponent: FallbackComponent },\n    React.createElement(Component, Object.assign({}, props))));\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/error/error-boundary.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/error/error-boundary.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,MAAM,eAAe,GAAa,GAAG,EAAE,CAAC,gCAAO,CAAC;AAEhD,MAAM,OAAO,aAAc,SAAQ,KAAK,CAAC,SAAiD;IACxF,YAAY,KAAK;QACf,KAAK,CAAC,KAAK,CAAC,CAAC;QACb,IAAI,CAAC,KAAK,GAAG;YACX,QAAQ,EAAE,KAAK;YACf,KAAK,EAAE;gBACL,OAAO,EAAE,EAAE;gBACX,KAAK,EAAE,EAAE;gBACT,IAAI,EAAE,EAAE;aACT;YACD,SAAS,EAAE;gBACT,cAAc,EAAE,EAAE;aACnB;SACF,CAAC;IACJ,CAAC;IAED,iBAAiB,CAAC,KAAK,EAAE,SAAS;QAChC,IAAI,CAAC,QAAQ,CAAC;YACZ,QAAQ,EAAE,IAAI;YACd,KAAK;YACL,SAAS;SACV,CAAC,CAAC;QACH,wFAAwF;QACxF,sCAAsC;QACtC,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACvB,CAAC;IAED,MAAM;QACJ,MAAM,EAAE,QAAQ,EAAE,KAAK,EAAE,SAAS,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAClD,MAAM,iBAAiB,GAAG,IAAI,CAAC,KAAK,CAAC,iBAAiB,IAAI,eAAe,CAAC;QAC1E,OAAO,QAAQ,CAAC,CAAC,CAAC,CAChB,oBAAC,iBAAiB,IAChB,KAAK,EAAE,KAAK,CAAC,IAAI,EACjB,cAAc,EAAE,SAAS,CAAC,cAAc,EACxC,YAAY,EAAE,KAAK,CAAC,OAAO,EAC3B,KAAK,EAAE,KAAK,CAAC,KAAK,GAClB,CACH,CAAC,CAAC,CAAC,CACF,0CAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAI,CAC3B,CAAC;IACJ,CAAC;CACF;AAED,MAAM,CAAC,MAAM,YAAY,GAAiB,CAAC,SAAS,EAAE,iBAAiB,EAAE,EAAE,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CACrF,oBAAC,aAAa,IAAC,iBAAiB,EAAE,iBAAiB;IACjD,oBAAC,SAAS,oBAAK,KAAK,EAAI,CACV,CACjB,CAAC","sourcesContent":["import * as React from 'react';\n\nconst DefaultFallback: React.FC = () => <div />;\n\nexport class ErrorBoundary extends React.Component<ErrorBoundaryProps, ErrorBoundaryState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      hasError: false,\n      error: {\n        message: '',\n        stack: '',\n        name: '',\n      },\n      errorInfo: {\n        componentStack: '',\n      },\n    };\n  }\n\n  componentDidCatch(error, errorInfo) {\n    this.setState({\n      hasError: true,\n      error,\n      errorInfo,\n    });\n    // Log the error so something shows up in the JS console when `DefaultFallback` is used.\n    // eslint-disable-next-line no-console\n    console.error(error);\n  }\n\n  render() {\n    const { hasError, error, errorInfo } = this.state;\n    const FallbackComponent = this.props.FallbackComponent || DefaultFallback;\n    return hasError ? (\n      <FallbackComponent\n        title={error.name}\n        componentStack={errorInfo.componentStack}\n        errorMessage={error.message}\n        stack={error.stack}\n      />\n    ) : (\n      <>{this.props.children}</>\n    );\n  }\n}\n\nexport const withFallback: WithFallback = (Component, FallbackComponent) => (props) => (\n  <ErrorBoundary FallbackComponent={FallbackComponent}>\n    <Component {...props} />\n  </ErrorBoundary>\n);\n\nexport type WithFallback = <P = {}>(\n  Component: React.ComponentType<P>,\n  FallbackComponent?: React.ComponentType<any>,\n) => React.ComponentType<P>;\n\nexport type ErrorBoundaryFallbackProps = {\n  errorMessage: string;\n  componentStack: string;\n  stack: string;\n  title: string;\n};\n\nexport type ErrorBoundaryProps = {\n  FallbackComponent?: React.ComponentType<ErrorBoundaryFallbackProps>;\n};\n\nexport type ErrorBoundaryState = {\n  hasError: boolean;\n  error: { message: string; stack: string; name: string };\n  errorInfo: { componentStack: string };\n};\n"]}]}