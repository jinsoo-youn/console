{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/import-validation-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/import-validation-utils.ts","mtime":1615298458620},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as yup from 'yup';\nimport * as _ from 'lodash';\nimport { GitTypes } from './import-types';\nimport { nameValidationSchema, projectNameValidationSchema, applicationNameValidationSchema, deploymentValidationSchema, serverlessValidationSchema, limitsValidationSchema, routeValidationSchema, imageValidationSchema, gitValidationSchema, dockerValidationSchema, buildValidationSchema, gitUrlRegex, resourcesValidationSchema, } from './validation-schema';\nimport { healthChecksProbesValidationSchema } from '../health-checks/health-checks-probe-validation-utils';\nexport const validationSchema = yup.object().shape({\n    name: nameValidationSchema,\n    project: projectNameValidationSchema,\n    application: applicationNameValidationSchema,\n    image: imageValidationSchema,\n    git: gitValidationSchema,\n    docker: dockerValidationSchema,\n    deployment: deploymentValidationSchema,\n    serverless: serverlessValidationSchema,\n    route: routeValidationSchema,\n    limits: limitsValidationSchema,\n    build: buildValidationSchema,\n    resources: resourcesValidationSchema,\n    healthChecks: healthChecksProbesValidationSchema,\n});\nconst hasDomain = (url, domain) => {\n    return url.includes(`https://${domain}/`) || url.includes(`@${domain}:`);\n};\nexport const detectGitType = (url) => {\n    if (!gitUrlRegex.test(url)) {\n        // Not a URL\n        return GitTypes.invalid;\n    }\n    if (hasDomain(url, 'github.com')) {\n        return GitTypes.github;\n    }\n    if (hasDomain(url, 'bitbucket.org')) {\n        return GitTypes.bitbucket;\n    }\n    if (hasDomain(url, 'gitlab.com')) {\n        return GitTypes.gitlab;\n    }\n    // Not a known URL\n    return GitTypes.unsure;\n};\nexport const detectGitRepoName = (url) => {\n    if (!gitUrlRegex.test(url)) {\n        return undefined;\n    }\n    return _.kebabCase(url.split('/').pop());\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/import-validation-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/import-validation-utils.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,GAAG,MAAM,KAAK,CAAC;AAC3B,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,QAAQ,EAAE,MAAM,gBAAgB,CAAC;AAC1C,OAAO,EACL,oBAAoB,EACpB,2BAA2B,EAC3B,+BAA+B,EAC/B,0BAA0B,EAC1B,0BAA0B,EAC1B,sBAAsB,EACtB,qBAAqB,EACrB,qBAAqB,EACrB,mBAAmB,EACnB,sBAAsB,EACtB,qBAAqB,EACrB,WAAW,EACX,yBAAyB,GAC1B,MAAM,qBAAqB,CAAC;AAC7B,OAAO,EAAE,kCAAkC,EAAE,MAAM,uDAAuD,CAAC;AAE3G,MAAM,CAAC,MAAM,gBAAgB,GAAG,GAAG,CAAC,MAAM,EAAE,CAAC,KAAK,CAAC;IACjD,IAAI,EAAE,oBAAoB;IAC1B,OAAO,EAAE,2BAA2B;IACpC,WAAW,EAAE,+BAA+B;IAC5C,KAAK,EAAE,qBAAqB;IAC5B,GAAG,EAAE,mBAAmB;IACxB,MAAM,EAAE,sBAAsB;IAC9B,UAAU,EAAE,0BAA0B;IACtC,UAAU,EAAE,0BAA0B;IACtC,KAAK,EAAE,qBAAqB;IAC5B,MAAM,EAAE,sBAAsB;IAC9B,KAAK,EAAE,qBAAqB;IAC5B,SAAS,EAAE,yBAAyB;IACpC,YAAY,EAAE,kCAAkC;CACjD,CAAC,CAAC;AAEH,MAAM,SAAS,GAAG,CAAC,GAAW,EAAE,MAAc,EAAW,EAAE;IACzD,OAAO,GAAG,CAAC,QAAQ,CAAC,WAAW,MAAM,GAAG,CAAC,IAAI,GAAG,CAAC,QAAQ,CAAC,IAAI,MAAM,GAAG,CAAC,CAAC;AAC3E,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,GAAW,EAAU,EAAE;IACnD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;QAC1B,YAAY;QACZ,OAAO,QAAQ,CAAC,OAAO,CAAC;KACzB;IACD,IAAI,SAAS,CAAC,GAAG,EAAE,YAAY,CAAC,EAAE;QAChC,OAAO,QAAQ,CAAC,MAAM,CAAC;KACxB;IACD,IAAI,SAAS,CAAC,GAAG,EAAE,eAAe,CAAC,EAAE;QACnC,OAAO,QAAQ,CAAC,SAAS,CAAC;KAC3B;IACD,IAAI,SAAS,CAAC,GAAG,EAAE,YAAY,CAAC,EAAE;QAChC,OAAO,QAAQ,CAAC,MAAM,CAAC;KACxB;IACD,kBAAkB;IAClB,OAAO,QAAQ,CAAC,MAAM,CAAC;AACzB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,GAAW,EAAsB,EAAE;IACnE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;QAC1B,OAAO,SAAS,CAAC;KAClB;IAED,OAAO,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,CAAC;AAC3C,CAAC,CAAC","sourcesContent":["import * as yup from 'yup';\nimport * as _ from 'lodash';\nimport { GitTypes } from './import-types';\nimport {\n  nameValidationSchema,\n  projectNameValidationSchema,\n  applicationNameValidationSchema,\n  deploymentValidationSchema,\n  serverlessValidationSchema,\n  limitsValidationSchema,\n  routeValidationSchema,\n  imageValidationSchema,\n  gitValidationSchema,\n  dockerValidationSchema,\n  buildValidationSchema,\n  gitUrlRegex,\n  resourcesValidationSchema,\n} from './validation-schema';\nimport { healthChecksProbesValidationSchema } from '../health-checks/health-checks-probe-validation-utils';\n\nexport const validationSchema = yup.object().shape({\n  name: nameValidationSchema,\n  project: projectNameValidationSchema,\n  application: applicationNameValidationSchema,\n  image: imageValidationSchema,\n  git: gitValidationSchema,\n  docker: dockerValidationSchema,\n  deployment: deploymentValidationSchema,\n  serverless: serverlessValidationSchema,\n  route: routeValidationSchema,\n  limits: limitsValidationSchema,\n  build: buildValidationSchema,\n  resources: resourcesValidationSchema,\n  healthChecks: healthChecksProbesValidationSchema,\n});\n\nconst hasDomain = (url: string, domain: string): boolean => {\n  return url.includes(`https://${domain}/`) || url.includes(`@${domain}:`);\n};\n\nexport const detectGitType = (url: string): string => {\n  if (!gitUrlRegex.test(url)) {\n    // Not a URL\n    return GitTypes.invalid;\n  }\n  if (hasDomain(url, 'github.com')) {\n    return GitTypes.github;\n  }\n  if (hasDomain(url, 'bitbucket.org')) {\n    return GitTypes.bitbucket;\n  }\n  if (hasDomain(url, 'gitlab.com')) {\n    return GitTypes.gitlab;\n  }\n  // Not a known URL\n  return GitTypes.unsure;\n};\n\nexport const detectGitRepoName = (url: string): string | undefined => {\n  if (!gitUrlRegex.test(url)) {\n    return undefined;\n  }\n\n  return _.kebabCase(url.split('/').pop());\n};\n"]}]}