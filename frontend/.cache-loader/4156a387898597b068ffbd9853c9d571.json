{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/index.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/index.tsx","mtime":1616735742450},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { referenceForGroupVersionKind, resourceURL, referenceFor, referenceForModel, } from '@console/internal/module/k8s';\nimport { PackageManifestModel } from '../models';\nimport * as operatorLogo from '../operator.svg';\nexport const visibilityLabel = 'olm-visibility';\nexport const providedAPIsFor = (csv) => _.get(csv, 'spec.customresourcedefinitions.owned', []).concat(_.get(csv, 'spec.apiservicedefinitions.owned', []));\nexport const referenceForProvidedAPI = (desc) => _.get(desc, 'group')\n    ? referenceForGroupVersionKind(desc.group)(desc.version)(desc.kind)\n    : referenceForGroupVersionKind(desc.name.slice(desc.name.indexOf('.') + 1))(desc.version)(desc.kind);\nexport const referenceForStepResource = (resource) => referenceForGroupVersionKind(resource.group || 'core')(resource.version)(resource.kind);\nexport const defaultChannelFor = (pkg) => { var _a, _b, _c; return pkg.status.defaultChannel || ((_c = (_b = (_a = pkg === null || pkg === void 0 ? void 0 : pkg.status) === null || _a === void 0 ? void 0 : _a.channels) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.name); };\nexport const installModesFor = (pkg) => (channel) => { var _a, _b; return ((_b = (_a = pkg.status.channels.find((ch) => ch.name === channel)) === null || _a === void 0 ? void 0 : _a.currentCSVDesc) === null || _b === void 0 ? void 0 : _b.installModes) || []; };\nexport const supportedInstallModesFor = (pkg) => (channel) => installModesFor(pkg)(channel).filter(({ supported }) => supported);\nexport const providedAPIsForChannel = (pkg) => (channel) => _.compact(_.flatten([\n    pkg.status.channels.find((ch) => ch.name === channel).currentCSVDesc.customresourcedefinitions\n        .owned,\n    pkg.status.channels.find((ch) => ch.name === channel).currentCSVDesc.apiservicedefinitions\n        .owned,\n]));\nexport const iconFor = (pkg) => {\n    var _a, _b, _c, _d, _e;\n    const defaultChannel = ((_a = pkg === null || pkg === void 0 ? void 0 : pkg.status) === null || _a === void 0 ? void 0 : _a.defaultChannel) ? (_b = pkg.status.channels) === null || _b === void 0 ? void 0 : _b.find((ch) => ch.name === pkg.status.defaultChannel) : (_d = (_c = pkg === null || pkg === void 0 ? void 0 : pkg.status) === null || _c === void 0 ? void 0 : _c.channels) === null || _d === void 0 ? void 0 : _d[0];\n    if (!defaultChannel) {\n        return null;\n    }\n    return resourceURL(PackageManifestModel, {\n        ns: (_e = pkg === null || pkg === void 0 ? void 0 : pkg.status) === null || _e === void 0 ? void 0 : _e.catalogSourceNamespace,\n        name: pkg.metadata.name,\n        path: 'icon',\n        queryParams: {\n            resourceVersion: [pkg.metadata.name, defaultChannel.name, defaultChannel.currentCSV].join('.'),\n        },\n    });\n};\nexport const ClusterServiceVersionLogo = (props) => {\n    const { icon, displayName, provider, version } = props;\n    const imgSrc = _.isString(icon)\n        ? icon\n        : _.isEmpty(icon)\n            ? operatorLogo\n            : `data:${icon.mediatype};base64,${icon.base64data}`;\n    return (React.createElement(\"div\", { className: \"co-clusterserviceversion-logo\" },\n        React.createElement(\"div\", { className: \"co-clusterserviceversion-logo__icon\" },\n            React.createElement(\"img\", { className: \"co-catalog-item-icon__img co-catalog-item-icon__img--large\", src: imgSrc, alt: \"\" })),\n        React.createElement(\"div\", { className: \"co-clusterserviceversion-logo__name\" },\n            React.createElement(\"h1\", { className: \"co-clusterserviceversion-logo__name__clusterserviceversion\" }, displayName),\n            provider && (React.createElement(\"span\", { className: \"co-clusterserviceversion-logo__name__provider text-muted\" }, `${version ||\n                ''} provided by ${_.get(provider, 'name', provider)}`)))));\n};\nexport const providedAPIForModel = (csv, model) => _.find(providedAPIsFor(csv), (crd) => referenceForProvidedAPI(crd) === referenceForModel(model));\nexport const parseALMExamples = (csv) => {\n    var _a, _b, _c;\n    try {\n        return JSON.parse((_c = (_b = (_a = csv === null || csv === void 0 ? void 0 : csv.metadata) === null || _a === void 0 ? void 0 : _a.annotations) === null || _b === void 0 ? void 0 : _b['alm-examples']) !== null && _c !== void 0 ? _c : '[]');\n    }\n    catch (e) {\n        // eslint-disable-next-line no-console\n        console.warn('Unable to parse ALM expamples\\n', e);\n        return [];\n    }\n};\nexport const exampleForModel = (csv, model) => _.defaultsDeep({}, {\n    kind: model.kind,\n    apiVersion: `${model.apiGroup}/${model.apiVersion}`,\n}, _.find(parseALMExamples(csv), (s) => referenceFor(s) === referenceForModel(model)));\nClusterServiceVersionLogo.displayName = 'ClusterServiceVersionLogo';\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/index.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport {\n  GroupVersionKind,\n  referenceForGroupVersionKind,\n  resourceURL,\n  referenceFor,\n  referenceForModel,\n  K8sKind,\n  K8sResourceKind,\n} from '@console/internal/module/k8s';\nimport { PackageManifestModel } from '../models';\nimport {\n  ClusterServiceVersionKind,\n  CRDDescription,\n  APIServiceDefinition,\n  PackageManifestKind,\n  StepResource,\n  ClusterServiceVersionIcon,\n  ProvidedAPI,\n} from '../types';\nimport * as operatorLogo from '../operator.svg';\n\nexport const visibilityLabel = 'olm-visibility';\n\ntype ProvidedAPIsFor = (csv: ClusterServiceVersionKind) => ProvidedAPI[];\nexport const providedAPIsFor: ProvidedAPIsFor = (csv) =>\n  _.get(csv, 'spec.customresourcedefinitions.owned', []).concat(\n    _.get(csv, 'spec.apiservicedefinitions.owned', []),\n  );\n\nexport const referenceForProvidedAPI = (\n  desc: CRDDescription | APIServiceDefinition,\n): GroupVersionKind =>\n  _.get(desc, 'group')\n    ? referenceForGroupVersionKind((desc as APIServiceDefinition).group)(desc.version)(desc.kind)\n    : referenceForGroupVersionKind((desc as CRDDescription).name.slice(desc.name.indexOf('.') + 1))(\n        desc.version,\n      )(desc.kind);\nexport const referenceForStepResource = (resource: StepResource): GroupVersionKind =>\n  referenceForGroupVersionKind(resource.group || 'core')(resource.version)(resource.kind);\n\nexport const defaultChannelFor = (pkg: PackageManifestKind) =>\n  pkg.status.defaultChannel || pkg?.status?.channels?.[0]?.name;\nexport const installModesFor = (pkg: PackageManifestKind) => (channel: string) =>\n  pkg.status.channels.find((ch) => ch.name === channel)?.currentCSVDesc?.installModes || [];\nexport const supportedInstallModesFor = (pkg: PackageManifestKind) => (channel: string) =>\n  installModesFor(pkg)(channel).filter(({ supported }) => supported);\nexport const providedAPIsForChannel = (pkg: PackageManifestKind) => (channel: string) =>\n  _.compact(\n    _.flatten([\n      pkg.status.channels.find((ch) => ch.name === channel).currentCSVDesc.customresourcedefinitions\n        .owned,\n      pkg.status.channels.find((ch) => ch.name === channel).currentCSVDesc.apiservicedefinitions\n        .owned,\n    ]),\n  );\n\nexport const iconFor = (pkg: PackageManifestKind) => {\n  const defaultChannel = pkg?.status?.defaultChannel\n    ? pkg.status.channels?.find((ch) => ch.name === pkg.status.defaultChannel)\n    : pkg?.status?.channels?.[0];\n  if (!defaultChannel) {\n    return null;\n  }\n\n  return resourceURL(PackageManifestModel, {\n    ns: pkg?.status?.catalogSourceNamespace,\n    name: pkg.metadata.name,\n    path: 'icon',\n    queryParams: {\n      resourceVersion: [pkg.metadata.name, defaultChannel.name, defaultChannel.currentCSV].join(\n        '.',\n      ),\n    },\n  });\n};\n\nexport const ClusterServiceVersionLogo: React.SFC<ClusterServiceVersionLogoProps> = (props) => {\n  const { icon, displayName, provider, version } = props;\n  const imgSrc: string = _.isString(icon)\n    ? icon\n    : _.isEmpty(icon)\n    ? operatorLogo\n    : `data:${icon.mediatype};base64,${icon.base64data}`;\n\n  return (\n    <div className=\"co-clusterserviceversion-logo\">\n      <div className=\"co-clusterserviceversion-logo__icon\">\n        <img\n          className=\"co-catalog-item-icon__img co-catalog-item-icon__img--large\"\n          src={imgSrc}\n          alt=\"\"\n        />\n      </div>\n      <div className=\"co-clusterserviceversion-logo__name\">\n        <h1 className=\"co-clusterserviceversion-logo__name__clusterserviceversion\">\n          {displayName}\n        </h1>\n        {provider && (\n          <span className=\"co-clusterserviceversion-logo__name__provider text-muted\">{`${version ||\n            ''} provided by ${_.get(provider, 'name', provider)}`}</span>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport const providedAPIForModel = (csv: ClusterServiceVersionKind, model: K8sKind): ProvidedAPI =>\n  _.find<ProvidedAPI>(\n    providedAPIsFor(csv),\n    (crd) => referenceForProvidedAPI(crd) === referenceForModel(model),\n  );\n\nexport const parseALMExamples = (csv: ClusterServiceVersionKind) => {\n  try {\n    return JSON.parse(csv?.metadata?.annotations?.['alm-examples'] ?? '[]');\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.warn('Unable to parse ALM expamples\\n', e);\n    return [];\n  }\n};\n\nexport const exampleForModel = (csv: ClusterServiceVersionKind, model: K8sKind) =>\n  _.defaultsDeep(\n    {},\n    {\n      kind: model.kind,\n      apiVersion: `${model.apiGroup}/${model.apiVersion}`,\n    },\n    _.find(\n      parseALMExamples(csv),\n      (s: K8sResourceKind) => referenceFor(s) === referenceForModel(model),\n    ),\n  );\n\nexport type ClusterServiceVersionLogoProps = {\n  displayName: string;\n  icon: ClusterServiceVersionIcon | string;\n  provider: { name: string } | string;\n  version?: string;\n};\n\nClusterServiceVersionLogo.displayName = 'ClusterServiceVersionLogo';\n"]}]}