{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/utils/traffic-splitting-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/utils/traffic-splitting-utils.ts","mtime":1616735742410},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { getKnativeServiceData } from '../topology/knative-topology-utils';\nimport { knativeServingResourcesRevision, knativeServingResourcesConfigurations, } from './get-knative-resources';\nexport const getRevisionItems = (revisions) => {\n    return revisions.reduce((acc, currValue) => {\n        acc[currValue.metadata.name] = currValue.metadata.name;\n        return acc;\n    }, {});\n};\nexport const constructObjForUpdate = (traffic, service) => {\n    const obj = _.omit(service, 'status');\n    return Object.assign(Object.assign({}, obj), { spec: Object.assign(Object.assign({}, obj.spec), { traffic }) });\n};\nexport const transformTrafficSplittingData = (obj, resources) => {\n    const { revisions } = getKnativeServiceData(obj, resources);\n    return revisions;\n};\nexport const knativeServingResourcesTrafficSplitting = (namespace) => [\n    ...knativeServingResourcesRevision(namespace),\n    ...knativeServingResourcesConfigurations(namespace),\n];\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/utils/traffic-splitting-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/utils/traffic-splitting-utils.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAG5B,OAAO,EAAE,qBAAqB,EAAE,MAAM,oCAAoC,CAAC;AAC3E,OAAO,EACL,+BAA+B,EAC/B,qCAAqC,GACtC,MAAM,yBAAyB,CAAC;AAIjC,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,SAA4B,EAAiB,EAAE;IAC9E,OAAO,SAAS,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,SAAS,EAAE,EAAE;QACzC,GAAG,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,SAAS,CAAC,QAAQ,CAAC,IAAI,CAAC;QACvD,OAAO,GAAG,CAAC;IACb,CAAC,EAAE,EAAmB,CAAC,CAAC;AAC1B,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,EAAE;IACxD,MAAM,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,QAAQ,CAAC,CAAC;IACtC,uCACK,GAAG,KACN,IAAI,kCAAO,GAAG,CAAC,IAAI,KAAE,OAAO,OAC5B;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,6BAA6B,GAAG,CAC3C,GAAoB,EACpB,SAAS,EACU,EAAE;IACrB,MAAM,EAAE,SAAS,EAAE,GAAG,qBAAqB,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;IAC5D,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,uCAAuC,GAAG,CAAC,SAAiB,EAAsB,EAAE,CAAC;IAChG,GAAG,+BAA+B,CAAC,SAAS,CAAC;IAC7C,GAAG,qCAAqC,CAAC,SAAS,CAAC;CACpD,CAAC","sourcesContent":["import * as _ from 'lodash';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { FirehoseResource } from '@console/internal/components/utils';\nimport { getKnativeServiceData } from '../topology/knative-topology-utils';\nimport {\n  knativeServingResourcesRevision,\n  knativeServingResourcesConfigurations,\n} from './get-knative-resources';\n\nexport type RevisionItems = { [name: string]: string };\n\nexport const getRevisionItems = (revisions: K8sResourceKind[]): RevisionItems => {\n  return revisions.reduce((acc, currValue) => {\n    acc[currValue.metadata.name] = currValue.metadata.name;\n    return acc;\n  }, {} as RevisionItems);\n};\n\nexport const constructObjForUpdate = (traffic, service) => {\n  const obj = _.omit(service, 'status');\n  return {\n    ...obj,\n    spec: { ...obj.spec, traffic },\n  };\n};\n\nexport const transformTrafficSplittingData = (\n  obj: K8sResourceKind,\n  resources,\n): K8sResourceKind[] => {\n  const { revisions } = getKnativeServiceData(obj, resources);\n  return revisions;\n};\n\nexport const knativeServingResourcesTrafficSplitting = (namespace: string): FirehoseResource[] => [\n  ...knativeServingResourcesRevision(namespace),\n  ...knativeServingResourcesConfigurations(namespace),\n];\n"]}]}