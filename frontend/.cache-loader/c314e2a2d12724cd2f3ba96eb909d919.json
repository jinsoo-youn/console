{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/Topology.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/Topology.tsx","mtime":1615298458630},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { action } from 'mobx';\nimport { connect } from 'react-redux';\nimport { Button, ToolbarItem, Tooltip } from '@patternfly/react-core';\nimport { TopologyIcon } from '@patternfly/react-icons';\nimport { TopologyView, TopologyControlBar, createTopologyControlButtons, defaultControlButtonsOptions, } from '@patternfly/react-topology';\nimport { Visualization, VisualizationSurface, isNode, isEdge, SELECTION_EVENT, GROUPS_LAYER, TOP_LAYER, BOTTOM_LAYER, DEFAULT_LAYER, } from '@console/topology';\nimport { getActiveApplication } from '@console/internal/reducers/ui';\nimport { selectOverviewDetailsTab } from '@console/internal/actions/ui';\nimport { getEventSourceStatus } from '@console/knative-plugin/src/topology/knative-topology-utils';\nimport { getQueryArgument, setQueryArgument, removeQueryArgument, } from '@console/internal/components/utils';\nimport KnativeComponentFactory from '@console/knative-plugin/src/topology/components/knativeComponentFactory';\nimport { KubevirtComponentFactory } from '@console/kubevirt-plugin/src/topology/components/kubevirtComponentFactory';\nimport { TYPE_VIRTUAL_MACHINE } from '@console/kubevirt-plugin/src/topology/components/const';\nimport TopologyVmPanel from '@console/kubevirt-plugin/src/topology/TopologyVmPanel';\nimport { useAddToProjectAccess } from '../../utils/useAddToProjectAccess';\nimport TopologySideBar from './TopologySideBar';\nimport { SHOW_GROUPING_HINT_EVENT, } from './topology-types';\nimport TopologyResourcePanel from './TopologyResourcePanel';\nimport TopologyApplicationPanel from './application-panel/TopologyApplicationPanel';\nimport ConnectedTopologyEdgePanel from './TopologyEdgePanel';\nimport { topologyModelFromDataModel } from './data-transforms/topology-model';\nimport { layoutFactory, COLA_LAYOUT, COLA_FORCE_LAYOUT } from './layouts/layoutFactory';\nimport { TYPE_APPLICATION_GROUP, ComponentFactory } from './components';\nimport TopologyFilterBar from './filters/TopologyFilterBar';\nimport { getTopologyFilters, getTopologySearchQuery, TOPOLOGY_SEARCH_FILTER_KEY, FILTER_ACTIVE_CLASS, } from './filters';\nimport TopologyHelmReleasePanel from './helm/TopologyHelmReleasePanel';\nimport { TYPE_HELM_RELEASE, TYPE_HELM_WORKLOAD } from './helm/components/const';\nimport { HelmComponentFactory } from './helm/components/helmComponentFactory';\nimport { TYPE_OPERATOR_BACKED_SERVICE } from './operators/components/const';\nimport { OperatorsComponentFactory } from './operators/components/operatorsComponentFactory';\nimport { getServiceBindingStatus } from './topology-utils';\nimport TopologyHelmWorkloadPanel from './helm/TopologyHelmWorkloadPanel';\nconst graphModel = {\n    graph: {\n        id: 'g1',\n        type: 'graph',\n        layout: COLA_LAYOUT,\n        layers: [BOTTOM_LAYER, GROUPS_LAYER, 'groups2', DEFAULT_LAYER, TOP_LAYER],\n    },\n};\nconst Topology = ({ data, filters, application, namespace, serviceBinding, eventSourceEnabled, onSelectTab, }) => {\n    const visRef = React.useRef(null);\n    const applicationRef = React.useRef(null);\n    const componentFactoryRef = React.useRef(null);\n    const knativeComponentFactoryRef = React.useRef(null);\n    const helmComponentFactoryRef = React.useRef(null);\n    const operatorsComponentFactoryRef = React.useRef(null);\n    const vmsComponentFactoryRef = React.useRef(null);\n    const [layout, setLayout] = React.useState(graphModel.graph.layout);\n    const [model, setModel] = React.useState();\n    const [graphData, setGraphData] = React.useState();\n    const [selectedIds, setSelectedIds] = React.useState([]);\n    const createResourceAccess = useAddToProjectAccess(namespace);\n    const [dragHint, setDragHint] = React.useState('');\n    if (!componentFactoryRef.current) {\n        componentFactoryRef.current = new ComponentFactory(serviceBinding);\n    }\n    if (!knativeComponentFactoryRef.current) {\n        knativeComponentFactoryRef.current = new KnativeComponentFactory(serviceBinding);\n    }\n    if (!helmComponentFactoryRef.current) {\n        helmComponentFactoryRef.current = new HelmComponentFactory(serviceBinding);\n    }\n    if (!operatorsComponentFactoryRef.current) {\n        operatorsComponentFactoryRef.current = new OperatorsComponentFactory(serviceBinding);\n    }\n    if (!vmsComponentFactoryRef.current) {\n        vmsComponentFactoryRef.current = new KubevirtComponentFactory(serviceBinding);\n    }\n    if (!visRef.current) {\n        visRef.current = new Visualization();\n        visRef.current.registerLayoutFactory(layoutFactory);\n        visRef.current.registerComponentFactory(componentFactoryRef.current.getFactory());\n        // TODO: Use Plugins\n        visRef.current.registerComponentFactory(knativeComponentFactoryRef.current.getFactory());\n        visRef.current.registerComponentFactory(helmComponentFactoryRef.current.getFactory());\n        visRef.current.registerComponentFactory(operatorsComponentFactoryRef.current.getFactory());\n        visRef.current.registerComponentFactory(vmsComponentFactoryRef.current.getFactory());\n        visRef.current.addEventListener(SELECTION_EVENT, (ids) => {\n            // set empty selection when selecting the graph\n            if (ids.length > 0 && ids[0] === graphModel.graph.id) {\n                setSelectedIds([]);\n                removeQueryArgument('selectId');\n            }\n            else {\n                setSelectedIds(ids);\n                ids.length > 0 ? setQueryArgument('selectId', ids[0]) : removeQueryArgument('selectId');\n            }\n        });\n        visRef.current.addEventListener(SHOW_GROUPING_HINT_EVENT, (element, hint) => {\n            setDragHint(hint);\n        });\n        visRef.current.fromModel(graphModel);\n    }\n    React.useEffect(() => {\n        const newGraphData = {\n            createResourceAccess,\n            namespace,\n            eventSourceEnabled,\n        };\n        visRef.current.getGraph().setData(newGraphData);\n        setGraphData(newGraphData);\n    }, [namespace, createResourceAccess, eventSourceEnabled]);\n    React.useEffect(() => {\n        const newModel = topologyModelFromDataModel(data, application, filters);\n        visRef.current.fromModel(newModel);\n        setModel(newModel);\n        if (selectedIds.length && !visRef.current.getElementById(selectedIds[0])) {\n            setSelectedIds([]);\n        }\n        else {\n            const selectId = getQueryArgument('selectId');\n            const selectTab = getQueryArgument('selectTab');\n            visRef.current.getElementById(selectId) && setSelectedIds([selectId]);\n            if (selectTab) {\n                onSelectTab(selectTab);\n                removeQueryArgument('selectTab');\n            }\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [data]);\n    React.useEffect(() => {\n        if (!applicationRef.current) {\n            applicationRef.current = application;\n            return;\n        }\n        if (application !== applicationRef.current) {\n            applicationRef.current = application;\n            visRef.current.getGraph().reset();\n            visRef.current.getGraph().layout();\n        }\n    }, [application]);\n    React.useEffect(() => {\n        let resizeTimeout = null;\n        if (selectedIds.length > 0) {\n            const selectedEntity = visRef.current.getElementById(selectedIds[0]);\n            if (selectedEntity) {\n                const visibleEntity = isNode(selectedEntity)\n                    ? selectedEntity\n                    : selectedEntity.getSource();\n                resizeTimeout = setTimeout(action(() => {\n                    visRef.current\n                        .getGraph()\n                        .panIntoView(visibleEntity, { offset: 20, minimumVisible: 40 });\n                    resizeTimeout = null;\n                }), 500);\n            }\n        }\n        return () => {\n            if (resizeTimeout) {\n                clearTimeout(resizeTimeout);\n            }\n        };\n    }, [selectedIds]);\n    React.useEffect(() => {\n        action(() => {\n            visRef.current.getGraph().setLayout(layout);\n        })();\n    }, [layout]);\n    const onSearchChange = (searchQuery) => {\n        if (searchQuery.length > 0) {\n            setQueryArgument(TOPOLOGY_SEARCH_FILTER_KEY, searchQuery);\n            document.body.classList.add(FILTER_ACTIVE_CLASS);\n        }\n        else {\n            removeQueryArgument(TOPOLOGY_SEARCH_FILTER_KEY);\n            document.body.classList.remove(FILTER_ACTIVE_CLASS);\n        }\n    };\n    React.useEffect(() => {\n        const searchQuery = getTopologySearchQuery();\n        searchQuery && onSearchChange(searchQuery);\n    }, []);\n    const onSidebarClose = () => {\n        setSelectedIds([]);\n        removeQueryArgument('selectId');\n    };\n    const renderControlBar = () => {\n        return (React.createElement(TopologyControlBar, { controlButtons: [\n                ...createTopologyControlButtons(Object.assign(Object.assign({}, defaultControlButtonsOptions), { zoomInCallback: action(() => {\n                        visRef.current.getGraph().scaleBy(4 / 3);\n                    }), zoomOutCallback: action(() => {\n                        visRef.current.getGraph().scaleBy(0.75);\n                    }), fitToScreenCallback: action(() => {\n                        visRef.current.getGraph().fit(80);\n                    }), resetViewCallback: action(() => {\n                        visRef.current.getGraph().reset();\n                        visRef.current.getGraph().layout();\n                    }), legend: false })),\n            ] },\n            React.createElement(\"div\", { className: \"odc-topology__layout-group\" },\n                React.createElement(Tooltip, { content: \"Layout 1\" },\n                    React.createElement(ToolbarItem, { className: \"odc-topology__layout-button\", tabIndex: -1 },\n                        React.createElement(Button, { className: classNames('pf-topology-control-bar__button', {\n                                'pf-m-active': layout === COLA_LAYOUT,\n                            }), variant: \"tertiary\", onClick: () => setLayout(COLA_LAYOUT) },\n                            React.createElement(TopologyIcon, { className: \"odc-topology__layout-button__icon\" }),\n                            \"1\",\n                            React.createElement(\"span\", { className: \"sr-only\" }, \"Layout 1\")))),\n                React.createElement(Tooltip, { content: \"Layout 2\" },\n                    React.createElement(ToolbarItem, { className: \"odc-topology__layout-button\", tabIndex: -1 },\n                        React.createElement(Button, { className: classNames('pf-topology-control-bar__button', {\n                                'pf-m-active': layout === COLA_FORCE_LAYOUT,\n                            }), variant: \"tertiary\", onClick: () => setLayout(COLA_FORCE_LAYOUT) },\n                            React.createElement(TopologyIcon, { className: \"odc-topology__layout-button__icon\" }),\n                            \"2\",\n                            React.createElement(\"span\", { className: \"sr-only\" }, \"Layout 2\")))))));\n    };\n    const selectedItemDetails = () => {\n        const selectedEntity = selectedIds[0] ? visRef.current.getElementById(selectedIds[0]) : null;\n        if (isNode(selectedEntity)) {\n            if (selectedEntity.getType() === TYPE_APPLICATION_GROUP) {\n                return (React.createElement(TopologyApplicationPanel, { graphData: graphData, application: {\n                        id: selectedEntity.getId(),\n                        name: selectedEntity.getLabel(),\n                        resources: selectedEntity.getData().groupResources,\n                    } }));\n            }\n            // TODO: Use Plugins\n            if (selectedEntity.getType() === TYPE_HELM_RELEASE) {\n                return React.createElement(TopologyHelmReleasePanel, { helmRelease: selectedEntity });\n            }\n            if (selectedEntity.getType() === TYPE_HELM_WORKLOAD) {\n                return React.createElement(TopologyHelmWorkloadPanel, { item: selectedEntity.getData() });\n            }\n            if (selectedEntity.getType() === TYPE_OPERATOR_BACKED_SERVICE) {\n                return null;\n            }\n            if (selectedEntity.getType() === TYPE_VIRTUAL_MACHINE) {\n                return React.createElement(TopologyVmPanel, { vmNode: selectedEntity });\n            }\n            return React.createElement(TopologyResourcePanel, { item: selectedEntity.getData() });\n        }\n        if (isEdge(selectedEntity)) {\n            return React.createElement(ConnectedTopologyEdgePanel, { edge: selectedEntity, data: data });\n        }\n        return null;\n    };\n    const renderSideBar = () => {\n        const selectedEntity = selectedIds.length === 0 ? null : visRef.current.getElementById(selectedIds[0]);\n        const details = selectedItemDetails();\n        if (!selectedEntity || !details) {\n            return null;\n        }\n        return (React.createElement(TopologySideBar, { show: !!selectedEntity && !!details, onClose: onSidebarClose }, selectedEntity && details));\n    };\n    if (!model) {\n        return null;\n    }\n    const sideBar = renderSideBar();\n    return (React.createElement(TopologyView, { viewToolbar: React.createElement(TopologyFilterBar, { visualization: visRef.current, onSearchChange: onSearchChange }), controlBar: renderControlBar(), sideBar: sideBar, sideBarOpen: !!sideBar },\n        React.createElement(VisualizationSurface, { visualization: visRef.current, state: { selectedIds } }),\n        dragHint && React.createElement(\"div\", { className: \"odc-topology__hint-container\" }, dragHint)));\n};\nconst TopologyStateToProps = (state) => {\n    return {\n        filters: getTopologyFilters(state),\n        application: getActiveApplication(state),\n        serviceBinding: getServiceBindingStatus(state),\n        eventSourceEnabled: getEventSourceStatus(state),\n    };\n};\nconst TopologyDispatchToProps = (dispatch) => ({\n    onSelectTab: (name) => dispatch(selectOverviewDetailsTab(name)),\n});\nexport default connect(TopologyStateToProps, TopologyDispatchToProps)(Topology);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/Topology.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/Topology.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { action } from 'mobx';\nimport { connect } from 'react-redux';\nimport { Button, ToolbarItem, Tooltip } from '@patternfly/react-core';\nimport { TopologyIcon } from '@patternfly/react-icons';\nimport {\n  TopologyView,\n  TopologyControlBar,\n  createTopologyControlButtons,\n  defaultControlButtonsOptions,\n} from '@patternfly/react-topology';\nimport {\n  Visualization,\n  VisualizationSurface,\n  isNode,\n  isEdge,\n  BaseEdge,\n  Model,\n  SELECTION_EVENT,\n  SelectionEventListener,\n  GROUPS_LAYER,\n  TOP_LAYER,\n  BOTTOM_LAYER,\n  DEFAULT_LAYER,\n} from '@console/topology';\nimport { RootState } from '@console/internal/redux';\nimport { getActiveApplication } from '@console/internal/reducers/ui';\nimport { selectOverviewDetailsTab } from '@console/internal/actions/ui';\nimport { getEventSourceStatus } from '@console/knative-plugin/src/topology/knative-topology-utils';\nimport {\n  getQueryArgument,\n  setQueryArgument,\n  removeQueryArgument,\n} from '@console/internal/components/utils';\nimport KnativeComponentFactory from '@console/knative-plugin/src/topology/components/knativeComponentFactory';\nimport { KubevirtComponentFactory } from '@console/kubevirt-plugin/src/topology/components/kubevirtComponentFactory';\nimport { TYPE_VIRTUAL_MACHINE } from '@console/kubevirt-plugin/src/topology/components/const';\nimport TopologyVmPanel from '@console/kubevirt-plugin/src/topology/TopologyVmPanel';\nimport { useAddToProjectAccess } from '../../utils/useAddToProjectAccess';\nimport TopologySideBar from './TopologySideBar';\nimport {\n  GraphData,\n  TopologyDataModel,\n  TopologyDataObject,\n  SHOW_GROUPING_HINT_EVENT,\n  ShowGroupingHintEventListener,\n} from './topology-types';\nimport TopologyResourcePanel from './TopologyResourcePanel';\nimport TopologyApplicationPanel from './application-panel/TopologyApplicationPanel';\nimport ConnectedTopologyEdgePanel from './TopologyEdgePanel';\nimport { topologyModelFromDataModel } from './data-transforms/topology-model';\nimport { layoutFactory, COLA_LAYOUT, COLA_FORCE_LAYOUT } from './layouts/layoutFactory';\nimport { TYPE_APPLICATION_GROUP, ComponentFactory } from './components';\nimport TopologyFilterBar from './filters/TopologyFilterBar';\nimport {\n  getTopologyFilters,\n  getTopologySearchQuery,\n  TopologyFilters,\n  TOPOLOGY_SEARCH_FILTER_KEY,\n  FILTER_ACTIVE_CLASS,\n} from './filters';\nimport TopologyHelmReleasePanel from './helm/TopologyHelmReleasePanel';\nimport { TYPE_HELM_RELEASE, TYPE_HELM_WORKLOAD } from './helm/components/const';\nimport { HelmComponentFactory } from './helm/components/helmComponentFactory';\nimport { TYPE_OPERATOR_BACKED_SERVICE } from './operators/components/const';\nimport { OperatorsComponentFactory } from './operators/components/operatorsComponentFactory';\nimport { getServiceBindingStatus } from './topology-utils';\nimport TopologyHelmWorkloadPanel from './helm/TopologyHelmWorkloadPanel';\n\ninterface StateProps {\n  filters: TopologyFilters;\n  application: string;\n  serviceBinding: boolean;\n  eventSourceEnabled: boolean;\n}\n\ninterface DispatchProps {\n  onSelectTab?: (name: string) => void;\n}\n\ninterface TopologyProps {\n  data: TopologyDataModel;\n  namespace: string;\n}\n\nconst graphModel: Model = {\n  graph: {\n    id: 'g1',\n    type: 'graph',\n    layout: COLA_LAYOUT,\n    layers: [BOTTOM_LAYER, GROUPS_LAYER, 'groups2', DEFAULT_LAYER, TOP_LAYER],\n  },\n};\n\ntype ComponentProps = TopologyProps & StateProps & DispatchProps;\n\nconst Topology: React.FC<ComponentProps> = ({\n  data,\n  filters,\n  application,\n  namespace,\n  serviceBinding,\n  eventSourceEnabled,\n  onSelectTab,\n}) => {\n  const visRef = React.useRef<Visualization | null>(null);\n  const applicationRef = React.useRef<string>(null);\n  const componentFactoryRef = React.useRef<ComponentFactory | null>(null);\n  const knativeComponentFactoryRef = React.useRef<KnativeComponentFactory | null>(null);\n  const helmComponentFactoryRef = React.useRef<HelmComponentFactory | null>(null);\n  const operatorsComponentFactoryRef = React.useRef<OperatorsComponentFactory | null>(null);\n  const vmsComponentFactoryRef = React.useRef<KubevirtComponentFactory | null>(null);\n  const [layout, setLayout] = React.useState<string>(graphModel.graph.layout);\n  const [model, setModel] = React.useState<Model>();\n  const [graphData, setGraphData] = React.useState<GraphData>();\n  const [selectedIds, setSelectedIds] = React.useState<string[]>([]);\n  const createResourceAccess: string[] = useAddToProjectAccess(namespace);\n  const [dragHint, setDragHint] = React.useState<string>('');\n\n  if (!componentFactoryRef.current) {\n    componentFactoryRef.current = new ComponentFactory(serviceBinding);\n  }\n  if (!knativeComponentFactoryRef.current) {\n    knativeComponentFactoryRef.current = new KnativeComponentFactory(serviceBinding);\n  }\n  if (!helmComponentFactoryRef.current) {\n    helmComponentFactoryRef.current = new HelmComponentFactory(serviceBinding);\n  }\n  if (!operatorsComponentFactoryRef.current) {\n    operatorsComponentFactoryRef.current = new OperatorsComponentFactory(serviceBinding);\n  }\n  if (!vmsComponentFactoryRef.current) {\n    vmsComponentFactoryRef.current = new KubevirtComponentFactory(serviceBinding);\n  }\n\n  if (!visRef.current) {\n    visRef.current = new Visualization();\n    visRef.current.registerLayoutFactory(layoutFactory);\n    visRef.current.registerComponentFactory(componentFactoryRef.current.getFactory());\n    // TODO: Use Plugins\n    visRef.current.registerComponentFactory(knativeComponentFactoryRef.current.getFactory());\n    visRef.current.registerComponentFactory(helmComponentFactoryRef.current.getFactory());\n    visRef.current.registerComponentFactory(operatorsComponentFactoryRef.current.getFactory());\n    visRef.current.registerComponentFactory(vmsComponentFactoryRef.current.getFactory());\n    visRef.current.addEventListener<SelectionEventListener>(SELECTION_EVENT, (ids: string[]) => {\n      // set empty selection when selecting the graph\n      if (ids.length > 0 && ids[0] === graphModel.graph.id) {\n        setSelectedIds([]);\n        removeQueryArgument('selectId');\n      } else {\n        setSelectedIds(ids);\n        ids.length > 0 ? setQueryArgument('selectId', ids[0]) : removeQueryArgument('selectId');\n      }\n    });\n    visRef.current.addEventListener<ShowGroupingHintEventListener>(\n      SHOW_GROUPING_HINT_EVENT,\n      (element, hint) => {\n        setDragHint(hint);\n      },\n    );\n    visRef.current.fromModel(graphModel);\n  }\n\n  React.useEffect(() => {\n    const newGraphData: GraphData = {\n      createResourceAccess,\n      namespace,\n      eventSourceEnabled,\n    };\n    visRef.current.getGraph().setData(newGraphData);\n    setGraphData(newGraphData);\n  }, [namespace, createResourceAccess, eventSourceEnabled]);\n\n  React.useEffect(() => {\n    const newModel = topologyModelFromDataModel(data, application, filters);\n    visRef.current.fromModel(newModel);\n    setModel(newModel);\n    if (selectedIds.length && !visRef.current.getElementById(selectedIds[0])) {\n      setSelectedIds([]);\n    } else {\n      const selectId = getQueryArgument('selectId');\n      const selectTab = getQueryArgument('selectTab');\n      visRef.current.getElementById(selectId) && setSelectedIds([selectId]);\n      if (selectTab) {\n        onSelectTab(selectTab);\n        removeQueryArgument('selectTab');\n      }\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [data]);\n\n  React.useEffect(() => {\n    if (!applicationRef.current) {\n      applicationRef.current = application;\n      return;\n    }\n    if (application !== applicationRef.current) {\n      applicationRef.current = application;\n      visRef.current.getGraph().reset();\n      visRef.current.getGraph().layout();\n    }\n  }, [application]);\n\n  React.useEffect(() => {\n    let resizeTimeout = null;\n    if (selectedIds.length > 0) {\n      const selectedEntity = visRef.current.getElementById(selectedIds[0]);\n      if (selectedEntity) {\n        const visibleEntity = isNode(selectedEntity)\n          ? selectedEntity\n          : (selectedEntity as BaseEdge).getSource();\n        resizeTimeout = setTimeout(\n          action(() => {\n            visRef.current\n              .getGraph()\n              .panIntoView(visibleEntity, { offset: 20, minimumVisible: 40 });\n            resizeTimeout = null;\n          }),\n          500,\n        );\n      }\n    }\n    return () => {\n      if (resizeTimeout) {\n        clearTimeout(resizeTimeout);\n      }\n    };\n  }, [selectedIds]);\n\n  React.useEffect(() => {\n    action(() => {\n      visRef.current.getGraph().setLayout(layout);\n    })();\n  }, [layout]);\n\n  const onSearchChange = (searchQuery) => {\n    if (searchQuery.length > 0) {\n      setQueryArgument(TOPOLOGY_SEARCH_FILTER_KEY, searchQuery);\n      document.body.classList.add(FILTER_ACTIVE_CLASS);\n    } else {\n      removeQueryArgument(TOPOLOGY_SEARCH_FILTER_KEY);\n      document.body.classList.remove(FILTER_ACTIVE_CLASS);\n    }\n  };\n\n  React.useEffect(() => {\n    const searchQuery = getTopologySearchQuery();\n    searchQuery && onSearchChange(searchQuery);\n  }, []);\n\n  const onSidebarClose = () => {\n    setSelectedIds([]);\n    removeQueryArgument('selectId');\n  };\n\n  const renderControlBar = () => {\n    return (\n      <TopologyControlBar\n        controlButtons={[\n          ...createTopologyControlButtons({\n            ...defaultControlButtonsOptions,\n            zoomInCallback: action(() => {\n              visRef.current.getGraph().scaleBy(4 / 3);\n            }),\n            zoomOutCallback: action(() => {\n              visRef.current.getGraph().scaleBy(0.75);\n            }),\n            fitToScreenCallback: action(() => {\n              visRef.current.getGraph().fit(80);\n            }),\n            resetViewCallback: action(() => {\n              visRef.current.getGraph().reset();\n              visRef.current.getGraph().layout();\n            }),\n            legend: false,\n          }),\n        ]}\n      >\n        <div className=\"odc-topology__layout-group\">\n          <Tooltip content=\"Layout 1\">\n            <ToolbarItem className=\"odc-topology__layout-button\" tabIndex={-1}>\n              <Button\n                className={classNames('pf-topology-control-bar__button', {\n                  'pf-m-active': layout === COLA_LAYOUT,\n                })}\n                variant=\"tertiary\"\n                onClick={() => setLayout(COLA_LAYOUT)}\n              >\n                <TopologyIcon className=\"odc-topology__layout-button__icon\" />1\n                <span className=\"sr-only\">Layout 1</span>\n              </Button>\n            </ToolbarItem>\n          </Tooltip>\n          <Tooltip content=\"Layout 2\">\n            <ToolbarItem className=\"odc-topology__layout-button\" tabIndex={-1}>\n              <Button\n                className={classNames('pf-topology-control-bar__button', {\n                  'pf-m-active': layout === COLA_FORCE_LAYOUT,\n                })}\n                variant=\"tertiary\"\n                onClick={() => setLayout(COLA_FORCE_LAYOUT)}\n              >\n                <TopologyIcon className=\"odc-topology__layout-button__icon\" />2\n                <span className=\"sr-only\">Layout 2</span>\n              </Button>\n            </ToolbarItem>\n          </Tooltip>\n        </div>\n      </TopologyControlBar>\n    );\n  };\n\n  const selectedItemDetails = () => {\n    const selectedEntity = selectedIds[0] ? visRef.current.getElementById(selectedIds[0]) : null;\n    if (isNode(selectedEntity)) {\n      if (selectedEntity.getType() === TYPE_APPLICATION_GROUP) {\n        return (\n          <TopologyApplicationPanel\n            graphData={graphData}\n            application={{\n              id: selectedEntity.getId(),\n              name: selectedEntity.getLabel(),\n              resources: selectedEntity.getData().groupResources,\n            }}\n          />\n        );\n      }\n      // TODO: Use Plugins\n      if (selectedEntity.getType() === TYPE_HELM_RELEASE) {\n        return <TopologyHelmReleasePanel helmRelease={selectedEntity} />;\n      }\n      if (selectedEntity.getType() === TYPE_HELM_WORKLOAD) {\n        return <TopologyHelmWorkloadPanel item={selectedEntity.getData() as TopologyDataObject} />;\n      }\n      if (selectedEntity.getType() === TYPE_OPERATOR_BACKED_SERVICE) {\n        return null;\n      }\n      if (selectedEntity.getType() === TYPE_VIRTUAL_MACHINE) {\n        return <TopologyVmPanel vmNode={selectedEntity} />;\n      }\n      return <TopologyResourcePanel item={selectedEntity.getData() as TopologyDataObject} />;\n    }\n\n    if (isEdge(selectedEntity)) {\n      return <ConnectedTopologyEdgePanel edge={selectedEntity as BaseEdge} data={data} />;\n    }\n    return null;\n  };\n\n  const renderSideBar = () => {\n    const selectedEntity =\n      selectedIds.length === 0 ? null : visRef.current.getElementById(selectedIds[0]);\n    const details = selectedItemDetails();\n    if (!selectedEntity || !details) {\n      return null;\n    }\n\n    return (\n      <TopologySideBar show={!!selectedEntity && !!details} onClose={onSidebarClose}>\n        {selectedEntity && details}\n      </TopologySideBar>\n    );\n  };\n\n  if (!model) {\n    return null;\n  }\n\n  const sideBar = renderSideBar();\n\n  return (\n    <TopologyView\n      viewToolbar={\n        <TopologyFilterBar visualization={visRef.current} onSearchChange={onSearchChange} />\n      }\n      controlBar={renderControlBar()}\n      sideBar={sideBar}\n      sideBarOpen={!!sideBar}\n    >\n      <VisualizationSurface visualization={visRef.current} state={{ selectedIds }} />\n      {dragHint && <div className=\"odc-topology__hint-container\">{dragHint}</div>}\n    </TopologyView>\n  );\n};\n\nconst TopologyStateToProps = (state: RootState): StateProps => {\n  return {\n    filters: getTopologyFilters(state),\n    application: getActiveApplication(state),\n    serviceBinding: getServiceBindingStatus(state),\n    eventSourceEnabled: getEventSourceStatus(state),\n  };\n};\n\nconst TopologyDispatchToProps = (dispatch): DispatchProps => ({\n  onSelectTab: (name) => dispatch(selectOverviewDetailsTab(name)),\n});\n\nexport default connect<StateProps, DispatchProps, TopologyProps>(\n  TopologyStateToProps,\n  TopologyDispatchToProps,\n)(Topology);\n"]}]}