{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/helm/helm-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/helm/helm-utils.ts","mtime":1615298458610},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as fuzzy from 'fuzzysearch';\nimport * as _ from 'lodash';\nimport { safeDump } from 'js-yaml';\nimport { coFetchJSON } from '@console/internal/co-fetch';\nimport { HelmReleaseStatus, HelmActionType, HelmActionOrigins, } from './helm-types';\nexport const HelmReleaseStatusLabels = {\n    [HelmReleaseStatus.Deployed]: 'Deployed',\n    [HelmReleaseStatus.Failed]: 'Failed',\n    [HelmReleaseStatus.Other]: 'Other',\n};\nexport const SelectedReleaseStatuses = [\n    HelmReleaseStatus.Deployed,\n    HelmReleaseStatus.Failed,\n    HelmReleaseStatus.Other,\n];\nexport const OtherReleaseStatuses = [\n    'unknown',\n    'uninstalled',\n    'superseded',\n    'uninstalling',\n    'pending-install',\n    'pending-upgrade',\n    'pending-rollback',\n];\nexport const releaseStatusReducer = (release) => {\n    if (OtherReleaseStatuses.includes(release.info.status)) {\n        return HelmReleaseStatus.Other;\n    }\n    return release.info.status;\n};\nexport const helmReleasesRowFilters = [\n    {\n        filterGroupName: 'Status',\n        type: 'helm-release-status',\n        reducer: releaseStatusReducer,\n        items: SelectedReleaseStatuses.map((status) => ({\n            id: status,\n            title: HelmReleaseStatusLabels[status],\n        })),\n    },\n];\nexport const filterHelmReleasesByStatus = (releases, filter) => {\n    return releases.filter((release) => {\n        return OtherReleaseStatuses.includes(release.info.status)\n            ? filter.includes(HelmReleaseStatus.Other)\n            : filter.includes(release.info.status);\n    });\n};\nexport const filterHelmReleasesByName = (releases, filter) => {\n    return releases.filter((release) => fuzzy(filter, release.name));\n};\nexport const fetchHelmReleases = (namespace, helmReleaseName) => {\n    const fetchString = `/api/helm/releases?ns=${namespace}${helmReleaseName ? `&name=${helmReleaseName}` : ''}`;\n    return coFetchJSON(fetchString);\n};\nexport const getChartURL = (helmChartData, chartVersion) => {\n    const chartData = _.find(helmChartData, (obj) => obj.version === chartVersion);\n    return chartData === null || chartData === void 0 ? void 0 : chartData.urls[0];\n};\nexport const getChartVersions = (chartEntries) => {\n    const chartVersions = _.reduce(chartEntries, (obj, chart) => {\n        obj[chart.version] = chart.version;\n        return obj;\n    }, {});\n    return chartVersions;\n};\nexport const getOriginRedirectURL = (actionOrigin, namespace, releaseName) => {\n    switch (actionOrigin) {\n        case HelmActionOrigins.topology:\n            return `/topology/ns/${namespace}/graph`;\n        case HelmActionOrigins.list:\n            return `/helm-releases/ns/${namespace}`;\n        case HelmActionOrigins.details:\n            return `/helm-releases/ns/${namespace}/release/${releaseName}`;\n        default:\n            return `/helm-releases/ns/${namespace}`;\n    }\n};\nexport const getHelmActionConfig = (helmAction, releaseName, namespace, actionOrigin, chartURL) => {\n    switch (helmAction) {\n        case HelmActionType.Install:\n            return {\n                title: 'Install Helm Chart',\n                subTitle: 'The helm chart will be installed using the YAML shown in the editor below.',\n                helmReleaseApi: `/api/helm/chart?url=${chartURL}`,\n                fetch: coFetchJSON.post,\n                redirectURL: getOriginRedirectURL(HelmActionOrigins.topology, namespace, releaseName),\n            };\n        case HelmActionType.Upgrade:\n            return {\n                title: 'Upgrade Helm Release',\n                subTitle: 'Upgrade by selecting a new chart version or manually changing the YAML shown in the editor below.',\n                helmReleaseApi: `/api/helm/release?ns=${namespace}&name=${releaseName}`,\n                fetch: coFetchJSON.put,\n                redirectURL: getOriginRedirectURL(actionOrigin, namespace, releaseName),\n            };\n        case HelmActionType.Rollback:\n            return {\n                title: 'Rollback Helm Release',\n                subTitle: ``,\n                helmReleaseApi: `/api/helm/release/history?ns=${namespace}&name=${releaseName}`,\n                fetch: coFetchJSON.patch,\n                redirectURL: getOriginRedirectURL(actionOrigin, namespace, releaseName),\n            };\n        default:\n            return undefined;\n    }\n};\nexport const flattenReleaseResources = (resources) => Object.keys(resources).reduce((acc, kind) => {\n    if (!_.isEmpty(resources[kind].data)) {\n        acc.push(resources[kind].data);\n    }\n    return acc;\n}, []);\nexport const getChartValuesYAML = (chart) => {\n    var _a;\n    const orderedValuesFile = (_a = chart === null || chart === void 0 ? void 0 : chart.files) === null || _a === void 0 ? void 0 : _a.find((file) => file.name === 'ordered-values.yaml');\n    const orderedValues = orderedValuesFile ? atob(orderedValuesFile.data) : '';\n    if (orderedValues)\n        return orderedValues;\n    return !_.isEmpty(chart === null || chart === void 0 ? void 0 : chart.values) ? safeDump(chart === null || chart === void 0 ? void 0 : chart.values) : '';\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/helm/helm-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/helm/helm-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as fuzzy from 'fuzzysearch';\nimport * as _ from 'lodash';\nimport { safeDump } from 'js-yaml';\nimport { coFetchJSON } from '@console/internal/co-fetch';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport {\n  HelmRelease,\n  HelmChart,\n  HelmReleaseStatus,\n  HelmChartMetaData,\n  HelmActionType,\n  HelmActionConfigType,\n  HelmActionOrigins,\n} from './helm-types';\nimport { RowFilter } from '@console/internal/components/filter-toolbar';\n\nexport const HelmReleaseStatusLabels = {\n  [HelmReleaseStatus.Deployed]: 'Deployed',\n  [HelmReleaseStatus.Failed]: 'Failed',\n  [HelmReleaseStatus.Other]: 'Other',\n};\n\nexport const SelectedReleaseStatuses = [\n  HelmReleaseStatus.Deployed,\n  HelmReleaseStatus.Failed,\n  HelmReleaseStatus.Other,\n];\n\nexport const OtherReleaseStatuses = [\n  'unknown',\n  'uninstalled',\n  'superseded',\n  'uninstalling',\n  'pending-install',\n  'pending-upgrade',\n  'pending-rollback',\n];\n\nexport const releaseStatusReducer = (release: HelmRelease) => {\n  if (OtherReleaseStatuses.includes(release.info.status)) {\n    return HelmReleaseStatus.Other;\n  }\n  return release.info.status;\n};\n\nexport const helmReleasesRowFilters: RowFilter[] = [\n  {\n    filterGroupName: 'Status',\n    type: 'helm-release-status',\n    reducer: releaseStatusReducer,\n    items: SelectedReleaseStatuses.map((status) => ({\n      id: status,\n      title: HelmReleaseStatusLabels[status],\n    })),\n  },\n];\n\nexport const filterHelmReleasesByStatus = (releases: HelmRelease[], filter: string | string[]) => {\n  return releases.filter((release: HelmRelease) => {\n    return OtherReleaseStatuses.includes(release.info.status)\n      ? filter.includes(HelmReleaseStatus.Other)\n      : filter.includes(release.info.status);\n  });\n};\n\nexport const filterHelmReleasesByName = (releases: HelmRelease[], filter: string) => {\n  return releases.filter((release: HelmRelease) => fuzzy(filter, release.name));\n};\n\nexport const fetchHelmReleases = (\n  namespace: string,\n  helmReleaseName?: string,\n): Promise<HelmRelease[]> => {\n  const fetchString = `/api/helm/releases?ns=${namespace}${\n    helmReleaseName ? `&name=${helmReleaseName}` : ''\n  }`;\n  return coFetchJSON(fetchString);\n};\n\nexport const getChartURL = (helmChartData: HelmChartMetaData[], chartVersion: string): string => {\n  const chartData: HelmChartMetaData = _.find(helmChartData, (obj) => obj.version === chartVersion);\n  return chartData?.urls[0];\n};\n\nexport const getChartVersions = (chartEntries: HelmChartMetaData[]) => {\n  const chartVersions = _.reduce(\n    chartEntries,\n    (obj, chart) => {\n      obj[chart.version] = chart.version;\n      return obj;\n    },\n    {},\n  );\n  return chartVersions;\n};\n\nexport const getOriginRedirectURL = (\n  actionOrigin: string,\n  namespace: string,\n  releaseName?: string,\n) => {\n  switch (actionOrigin) {\n    case HelmActionOrigins.topology:\n      return `/topology/ns/${namespace}/graph`;\n    case HelmActionOrigins.list:\n      return `/helm-releases/ns/${namespace}`;\n    case HelmActionOrigins.details:\n      return `/helm-releases/ns/${namespace}/release/${releaseName}`;\n    default:\n      return `/helm-releases/ns/${namespace}`;\n  }\n};\n\nexport const getHelmActionConfig = (\n  helmAction: HelmActionType,\n  releaseName: string,\n  namespace: string,\n  actionOrigin?: HelmActionOrigins,\n  chartURL?: string,\n): HelmActionConfigType | undefined => {\n  switch (helmAction) {\n    case HelmActionType.Install:\n      return {\n        title: 'Install Helm Chart',\n        subTitle: 'The helm chart will be installed using the YAML shown in the editor below.',\n        helmReleaseApi: `/api/helm/chart?url=${chartURL}`,\n        fetch: coFetchJSON.post,\n        redirectURL: getOriginRedirectURL(HelmActionOrigins.topology, namespace, releaseName),\n      };\n    case HelmActionType.Upgrade:\n      return {\n        title: 'Upgrade Helm Release',\n        subTitle:\n          'Upgrade by selecting a new chart version or manually changing the YAML shown in the editor below.',\n        helmReleaseApi: `/api/helm/release?ns=${namespace}&name=${releaseName}`,\n        fetch: coFetchJSON.put,\n        redirectURL: getOriginRedirectURL(actionOrigin, namespace, releaseName),\n      };\n\n    case HelmActionType.Rollback:\n      return {\n        title: 'Rollback Helm Release',\n        subTitle: ``,\n        helmReleaseApi: `/api/helm/release/history?ns=${namespace}&name=${releaseName}`,\n        fetch: coFetchJSON.patch,\n        redirectURL: getOriginRedirectURL(actionOrigin, namespace, releaseName),\n      };\n    default:\n      return undefined;\n  }\n};\n\nexport const flattenReleaseResources = (resources: { [kind: string]: { data: K8sResourceKind } }) =>\n  Object.keys(resources).reduce((acc, kind) => {\n    if (!_.isEmpty(resources[kind].data)) {\n      acc.push(resources[kind].data);\n    }\n    return acc;\n  }, []);\n\nexport const getChartValuesYAML = (chart: HelmChart): string => {\n  const orderedValuesFile = chart?.files?.find((file) => file.name === 'ordered-values.yaml');\n  const orderedValues = orderedValuesFile ? atob(orderedValuesFile.data) : '';\n\n  if (orderedValues) return orderedValues;\n\n  return !_.isEmpty(chart?.values) ? safeDump(chart?.values) : '';\n};\n"]}]}