{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/boot-order-modal/boot-order-modal.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/boot-order-modal/boot-order-modal.tsx","mtime":1616735742420},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport { Modal, Button, ButtonVariant } from '@patternfly/react-core';\nimport { createBasicLookup } from '@console/shared/src';\nimport { withHandlePromise } from '@console/internal/components/utils';\nimport { k8sPatch } from '@console/internal/module/k8s';\nimport { PatchBuilder } from '@console/shared/src/k8s';\nimport { getVMLikeModel, getDevices, getBootableDevices } from '../../../selectors/vm';\nimport { getVMLikePatches } from '../../../k8s/patches/vm-template';\nimport { BootOrder, deviceKey } from '../../boot-order';\nimport { DeviceType } from '../../../constants';\nimport { ModalFooter } from '../modal/modal-footer';\nimport './boot-order-modal.scss';\nconst modalTitle = 'Virtual machine boot order';\nconst BootOrderModalComponent = ({ vmLikeEntity, isOpen, setOpen, title = modalTitle, handlePromise, inProgress, errorMessage, }) => {\n    const [devices, setDevices] = React.useState(getBootableDevices(vmLikeEntity));\n    const [initialDeviceList, setInitialDeviceList] = React.useState(getBootableDevices(vmLikeEntity));\n    const [showUpdatedAlert, setUpdatedAlert] = React.useState(false);\n    const [showPatchError, setPatchError] = React.useState(false);\n    const onReload = React.useCallback(() => {\n        const updatedDevices = getBootableDevices(vmLikeEntity);\n        setInitialDeviceList(updatedDevices);\n        setDevices(updatedDevices);\n        setUpdatedAlert(false);\n        setPatchError(false);\n    }, [vmLikeEntity]); // eslint-disable-line react-hooks/exhaustive-deps\n    // Inform user on vmLikeEntity.\n    React.useEffect(() => {\n        if (!isOpen) {\n            return;\n        }\n        // Compare only bootOrder from initialDeviceList to current device list.\n        const devicesMap = createBasicLookup(getBootableDevices(vmLikeEntity), deviceKey);\n        const updated = initialDeviceList.length &&\n            initialDeviceList.some((d) => {\n                // Find the initial device in the updated list.\n                const device = devicesMap[deviceKey(d)];\n                // If a device bootOrder changed, or it was deleted, set alert.\n                return !device || device.value.bootOrder !== d.value.bootOrder;\n            });\n        setUpdatedAlert(updated);\n    }, [vmLikeEntity]); // eslint-disable-line react-hooks/exhaustive-deps\n    // Re-set device list on isOpen change to true.\n    React.useEffect(() => {\n        if (isOpen) {\n            onReload();\n        }\n    }, [isOpen]); // eslint-disable-line react-hooks/exhaustive-deps\n    // Send new bootOrder to k8s.\n    const onSubmit = (event) => __awaiter(void 0, void 0, void 0, function* () {\n        event.preventDefault();\n        // Copy only bootOrder from devices to current device list.\n        const currentDevices = _.cloneDeep(getDevices(vmLikeEntity));\n        const devicesMap = createBasicLookup(currentDevices, deviceKey);\n        devices.forEach((d) => {\n            // Find the device to update.\n            const device = devicesMap[deviceKey(d)];\n            // Update device bootOrder.\n            if (device && d.value.bootOrder) {\n                device.value.bootOrder = d.value.bootOrder;\n            }\n            if (device && device.value.bootOrder && !d.value.bootOrder) {\n                delete device.value.bootOrder;\n            }\n        });\n        // Filter disks and interfaces from devices list.\n        const disks = [\n            ...currentDevices\n                .filter((source) => source.type === DeviceType.DISK)\n                .map((source) => source.value),\n        ];\n        const interfaces = [\n            ...currentDevices\n                .filter((source) => source.type === DeviceType.NIC)\n                .map((source) => source.value),\n        ];\n        // Patch k8s.\n        const patches = [\n            new PatchBuilder('/spec/template/spec/domain/devices/disks').replace(disks).build(),\n            new PatchBuilder('/spec/template/spec/domain/devices/interfaces').replace(interfaces).build(),\n        ];\n        const promise = k8sPatch(getVMLikeModel(vmLikeEntity), vmLikeEntity, getVMLikePatches(vmLikeEntity, () => patches));\n        handlePromise(promise)\n            .then(() => setOpen(false))\n            .catch(() => setPatchError(true));\n    });\n    const footer = (React.createElement(ModalFooter, { errorMessage: showPatchError && errorMessage, inProgress: inProgress, onSubmit: onSubmit, onCancel: () => setOpen(false), submitButtonText: \"Save\", infoTitle: showUpdatedAlert && 'Boot order has been updated outside this flow.', infoMessage: React.createElement(React.Fragment, null,\n            \"Saving these changes will override any boot order previously saved.\",\n            React.createElement(\"br\", null),\n            \"To see the updated order\",\n            ' ',\n            React.createElement(Button, { variant: ButtonVariant.link, isInline: true, onClick: onReload }, \"reload the content\"),\n            \".\"), className: 'kubevirt-boot-order-modal__footer' }));\n    return (React.createElement(Modal, { title: title, isOpen: isOpen, isSmall: true, onClose: () => setOpen(false), footer: footer, showClose: false, isFooterLeftAligned: false },\n        React.createElement(BootOrder, { devices: devices, setDevices: setDevices })));\n};\nexport const BootOrderModal = withHandlePromise(BootOrderModalComponent);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/boot-order-modal/boot-order-modal.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/boot-order-modal/boot-order-modal.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,aAAa,EAAE,MAAM,wBAAwB,CAAC;AACtE,OAAO,EAAE,iBAAiB,EAAE,MAAM,qBAAqB,CAAC;AACxD,OAAO,EAAE,iBAAiB,EAAsB,MAAM,oCAAoC,CAAC;AAE3F,OAAO,EAAE,QAAQ,EAAE,MAAM,8BAA8B,CAAC;AACxD,OAAO,EAAE,YAAY,EAAE,MAAM,yBAAyB,CAAC;AAGvD,OAAO,EAAE,cAAc,EAAE,UAAU,EAAE,kBAAkB,EAAE,MAAM,uBAAuB,CAAC;AACvF,OAAO,EAAE,gBAAgB,EAAE,MAAM,kCAAkC,CAAC;AACpE,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AACxD,OAAO,EAAE,UAAU,EAAE,MAAM,oBAAoB,CAAC;AAChD,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AAEpD,OAAO,yBAAyB,CAAC;AAEjC,MAAM,UAAU,GAAG,4BAA4B,CAAC;AAEhD,MAAM,uBAAuB,GAAG,CAAC,EAC/B,YAAY,EACZ,MAAM,EACN,OAAO,EACP,KAAK,GAAG,UAAU,EAClB,aAAa,EACb,UAAU,EACV,YAAY,GACQ,EAAE,EAAE;IACxB,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,KAAK,CAAC,QAAQ,CAC1C,kBAAkB,CAAC,YAAY,CAAC,CACjC,CAAC;IACF,MAAM,CAAC,iBAAiB,EAAE,oBAAoB,CAAC,GAAG,KAAK,CAAC,QAAQ,CAC9D,kBAAkB,CAAC,YAAY,CAAC,CACjC,CAAC;IACF,MAAM,CAAC,gBAAgB,EAAE,eAAe,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAU,KAAK,CAAC,CAAC;IAC3E,MAAM,CAAC,cAAc,EAAE,aAAa,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAU,KAAK,CAAC,CAAC;IAEvE,MAAM,QAAQ,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE;QACtC,MAAM,cAAc,GAAG,kBAAkB,CAAC,YAAY,CAAC,CAAC;QAExD,oBAAoB,CAAC,cAAc,CAAC,CAAC;QACrC,UAAU,CAAC,cAAc,CAAC,CAAC;QAC3B,eAAe,CAAC,KAAK,CAAC,CAAC;QACvB,aAAa,CAAC,KAAK,CAAC,CAAC;IACvB,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,kDAAkD;IAEtE,+BAA+B;IAC/B,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,IAAI,CAAC,MAAM,EAAE;YACX,OAAO;SACR;QAED,wEAAwE;QACxE,MAAM,UAAU,GAAG,iBAAiB,CAAC,kBAAkB,CAAC,YAAY,CAAC,EAAE,SAAS,CAAC,CAAC;QAClF,MAAM,OAAO,GACX,iBAAiB,CAAC,MAAM;YACxB,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE;gBAC3B,+CAA+C;gBAC/C,MAAM,MAAM,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;gBAExC,+DAA+D;gBAC/D,OAAO,CAAC,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,SAAS,KAAK,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC;YACjE,CAAC,CAAC,CAAC;QAEL,eAAe,CAAC,OAAO,CAAC,CAAC;IAC3B,CAAC,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,kDAAkD;IAEtE,+CAA+C;IAC/C,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,IAAI,MAAM,EAAE;YACV,QAAQ,EAAE,CAAC;SACZ;IACH,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,kDAAkD;IAEhE,6BAA6B;IAC7B,MAAM,QAAQ,GAAG,CAAO,KAAK,EAAE,EAAE;QAC/B,KAAK,CAAC,cAAc,EAAE,CAAC;QAEvB,2DAA2D;QAC3D,MAAM,cAAc,GAAG,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC;QAC7D,MAAM,UAAU,GAAG,iBAAiB,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;QAChE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;YACpB,6BAA6B;YAC7B,MAAM,MAAM,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;YAExC,2BAA2B;YAC3B,IAAI,MAAM,IAAI,CAAC,CAAC,KAAK,CAAC,SAAS,EAAE;gBAC/B,MAAM,CAAC,KAAK,CAAC,SAAS,GAAG,CAAC,CAAC,KAAK,CAAC,SAAS,CAAC;aAC5C;YACD,IAAI,MAAM,IAAI,MAAM,CAAC,KAAK,CAAC,SAAS,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,SAAS,EAAE;gBAC1D,OAAO,MAAM,CAAC,KAAK,CAAC,SAAS,CAAC;aAC/B;QACH,CAAC,CAAC,CAAC;QAEH,iDAAiD;QACjD,MAAM,KAAK,GAAG;YACZ,GAAG,cAAc;iBACd,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,UAAU,CAAC,IAAI,CAAC;iBACnD,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC;SACjC,CAAC;QAEF,MAAM,UAAU,GAAG;YACjB,GAAG,cAAc;iBACd,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,UAAU,CAAC,GAAG,CAAC;iBAClD,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,KAAK,CAAC;SACjC,CAAC;QAEF,aAAa;QACb,MAAM,OAAO,GAAG;YACd,IAAI,YAAY,CAAC,0CAA0C,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE;YACnF,IAAI,YAAY,CAAC,+CAA+C,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,KAAK,EAAE;SAC9F,CAAC;QACF,MAAM,OAAO,GAAG,QAAQ,CACtB,cAAc,CAAC,YAAY,CAAC,EAC5B,YAAY,EACZ,gBAAgB,CAAC,YAAY,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,CAC9C,CAAC;QAEF,aAAa,CAAC,OAAO,CAAC;aACnB,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;aAC1B,KAAK,CAAC,GAAG,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;IACtC,CAAC,CAAA,CAAC;IAEF,MAAM,MAAM,GAAG,CACb,oBAAC,WAAW,IACV,YAAY,EAAE,cAAc,IAAI,YAAY,EAC5C,UAAU,EAAE,UAAU,EACtB,QAAQ,EAAE,QAAQ,EAClB,QAAQ,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,EAC9B,gBAAgB,EAAC,MAAM,EACvB,SAAS,EAAE,gBAAgB,IAAI,gDAAgD,EAC/E,WAAW,EACT;;YAEE,+BAAM;;YACmB,GAAG;YAC5B,oBAAC,MAAM,IAAC,OAAO,EAAE,aAAa,CAAC,IAAI,EAAE,QAAQ,QAAC,OAAO,EAAE,QAAQ,yBAEtD;gBAER,EAEL,SAAS,EAAE,mCAAmC,GAC9C,CACH,CAAC;IAEF,OAAO,CACL,oBAAC,KAAK,IACJ,KAAK,EAAE,KAAK,EACZ,MAAM,EAAE,MAAM,EACd,OAAO,QACP,OAAO,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,EAC7B,MAAM,EAAE,MAAM,EACd,SAAS,EAAE,KAAK,EAChB,mBAAmB,EAAE,KAAK;QAE1B,oBAAC,SAAS,IAAC,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,UAAU,GAAI,CACjD,CACT,CAAC;AACJ,CAAC,CAAC;AAUF,MAAM,CAAC,MAAM,cAAc,GAAG,iBAAiB,CAAC,uBAAuB,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Modal, Button, ButtonVariant } from '@patternfly/react-core';\nimport { createBasicLookup } from '@console/shared/src';\nimport { withHandlePromise, HandlePromiseProps } from '@console/internal/components/utils';\nimport { ModalComponentProps } from '@console/internal/components/factory';\nimport { k8sPatch } from '@console/internal/module/k8s';\nimport { PatchBuilder } from '@console/shared/src/k8s';\nimport { BootableDeviceType } from '../../../types';\nimport { VMLikeEntityKind } from '../../../types/vmLike';\nimport { getVMLikeModel, getDevices, getBootableDevices } from '../../../selectors/vm';\nimport { getVMLikePatches } from '../../../k8s/patches/vm-template';\nimport { BootOrder, deviceKey } from '../../boot-order';\nimport { DeviceType } from '../../../constants';\nimport { ModalFooter } from '../modal/modal-footer';\n\nimport './boot-order-modal.scss';\n\nconst modalTitle = 'Virtual machine boot order';\n\nconst BootOrderModalComponent = ({\n  vmLikeEntity,\n  isOpen,\n  setOpen,\n  title = modalTitle,\n  handlePromise,\n  inProgress,\n  errorMessage,\n}: BootOrderModalProps) => {\n  const [devices, setDevices] = React.useState<BootableDeviceType[]>(\n    getBootableDevices(vmLikeEntity),\n  );\n  const [initialDeviceList, setInitialDeviceList] = React.useState<BootableDeviceType[]>(\n    getBootableDevices(vmLikeEntity),\n  );\n  const [showUpdatedAlert, setUpdatedAlert] = React.useState<boolean>(false);\n  const [showPatchError, setPatchError] = React.useState<boolean>(false);\n\n  const onReload = React.useCallback(() => {\n    const updatedDevices = getBootableDevices(vmLikeEntity);\n\n    setInitialDeviceList(updatedDevices);\n    setDevices(updatedDevices);\n    setUpdatedAlert(false);\n    setPatchError(false);\n  }, [vmLikeEntity]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Inform user on vmLikeEntity.\n  React.useEffect(() => {\n    if (!isOpen) {\n      return;\n    }\n\n    // Compare only bootOrder from initialDeviceList to current device list.\n    const devicesMap = createBasicLookup(getBootableDevices(vmLikeEntity), deviceKey);\n    const updated =\n      initialDeviceList.length &&\n      initialDeviceList.some((d) => {\n        // Find the initial device in the updated list.\n        const device = devicesMap[deviceKey(d)];\n\n        // If a device bootOrder changed, or it was deleted, set alert.\n        return !device || device.value.bootOrder !== d.value.bootOrder;\n      });\n\n    setUpdatedAlert(updated);\n  }, [vmLikeEntity]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Re-set device list on isOpen change to true.\n  React.useEffect(() => {\n    if (isOpen) {\n      onReload();\n    }\n  }, [isOpen]); // eslint-disable-line react-hooks/exhaustive-deps\n\n  // Send new bootOrder to k8s.\n  const onSubmit = async (event) => {\n    event.preventDefault();\n\n    // Copy only bootOrder from devices to current device list.\n    const currentDevices = _.cloneDeep(getDevices(vmLikeEntity));\n    const devicesMap = createBasicLookup(currentDevices, deviceKey);\n    devices.forEach((d) => {\n      // Find the device to update.\n      const device = devicesMap[deviceKey(d)];\n\n      // Update device bootOrder.\n      if (device && d.value.bootOrder) {\n        device.value.bootOrder = d.value.bootOrder;\n      }\n      if (device && device.value.bootOrder && !d.value.bootOrder) {\n        delete device.value.bootOrder;\n      }\n    });\n\n    // Filter disks and interfaces from devices list.\n    const disks = [\n      ...currentDevices\n        .filter((source) => source.type === DeviceType.DISK)\n        .map((source) => source.value),\n    ];\n\n    const interfaces = [\n      ...currentDevices\n        .filter((source) => source.type === DeviceType.NIC)\n        .map((source) => source.value),\n    ];\n\n    // Patch k8s.\n    const patches = [\n      new PatchBuilder('/spec/template/spec/domain/devices/disks').replace(disks).build(),\n      new PatchBuilder('/spec/template/spec/domain/devices/interfaces').replace(interfaces).build(),\n    ];\n    const promise = k8sPatch(\n      getVMLikeModel(vmLikeEntity),\n      vmLikeEntity,\n      getVMLikePatches(vmLikeEntity, () => patches),\n    );\n\n    handlePromise(promise)\n      .then(() => setOpen(false))\n      .catch(() => setPatchError(true));\n  };\n\n  const footer = (\n    <ModalFooter\n      errorMessage={showPatchError && errorMessage}\n      inProgress={inProgress}\n      onSubmit={onSubmit}\n      onCancel={() => setOpen(false)}\n      submitButtonText=\"Save\"\n      infoTitle={showUpdatedAlert && 'Boot order has been updated outside this flow.'}\n      infoMessage={\n        <>\n          Saving these changes will override any boot order previously saved.\n          <br />\n          To see the updated order{' '}\n          <Button variant={ButtonVariant.link} isInline onClick={onReload}>\n            reload the content\n          </Button>\n          .\n        </>\n      }\n      className={'kubevirt-boot-order-modal__footer'}\n    />\n  );\n\n  return (\n    <Modal\n      title={title}\n      isOpen={isOpen}\n      isSmall\n      onClose={() => setOpen(false)}\n      footer={footer}\n      showClose={false}\n      isFooterLeftAligned={false}\n    >\n      <BootOrder devices={devices} setDevices={setDevices} />\n    </Modal>\n  );\n};\n\nexport type BootOrderModalProps = HandlePromiseProps &\n  ModalComponentProps & {\n    vmLikeEntity: VMLikeEntityKind;\n    title?: string;\n    isOpen: boolean;\n    setOpen: (isOpen: boolean) => void;\n  };\n\nexport const BootOrderModal = withHandlePromise(BootOrderModalComponent);\n"]}]}