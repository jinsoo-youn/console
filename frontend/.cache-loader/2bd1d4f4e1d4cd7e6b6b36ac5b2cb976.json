{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/components/layers/LayerContainer.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/components/layers/LayerContainer.tsx","mtime":1616735742460},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { observer } from 'mobx-react';\nimport ElementContext from '../../utils/ElementContext';\nimport { isNode } from '../../types';\nimport { ATTR_DATA_ID, ATTR_DATA_KIND, ATTR_DATA_TYPE } from '../../const';\nconst LayerContainer = ({ children }, ref) => {\n    // accumulate parent positions\n    const element = React.useContext(ElementContext);\n    let p = element;\n    let x = 0;\n    let y = 0;\n    while (isNode(p)) {\n        if (!p.isGroup() || p.isCollapsed()) {\n            const { x: px, y: py } = p.getPosition();\n            x += px;\n            y += py;\n        }\n        p = p.getParent();\n    }\n    const commonAttrs = {\n        [ATTR_DATA_ID]: element.getId(),\n        [ATTR_DATA_KIND]: element.getKind(),\n        [ATTR_DATA_TYPE]: element.getType(),\n    };\n    return (React.createElement(\"g\", Object.assign({ ref: ref, transform: `translate(${x}, ${y})` }, commonAttrs), children));\n};\nexport default observer(React.forwardRef(LayerContainer));\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/components/layers/LayerContainer.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/components/layers/LayerContainer.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AACtC,OAAO,cAAc,MAAM,4BAA4B,CAAC;AACxD,OAAO,EAAE,MAAM,EAAE,MAAM,aAAa,CAAC;AACrC,OAAO,EAAE,YAAY,EAAE,cAAc,EAAE,cAAc,EAAE,MAAM,aAAa,CAAC;AAM3E,MAAM,cAAc,GAAmE,CACrF,EAAE,QAAQ,EAAE,EACZ,GAAG,EACH,EAAE;IACF,8BAA8B;IAC9B,MAAM,OAAO,GAAG,KAAK,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;IACjD,IAAI,CAAC,GAAG,OAAO,CAAC;IAChB,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,IAAI,CAAC,GAAG,CAAC,CAAC;IACV,OAAO,MAAM,CAAC,CAAC,CAAC,EAAE;QAChB,IAAI,CAAC,CAAC,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC,WAAW,EAAE,EAAE;YACnC,MAAM,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC;YACzC,CAAC,IAAI,EAAE,CAAC;YACR,CAAC,IAAI,EAAE,CAAC;SACT;QACD,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC;KACnB;IACD,MAAM,WAAW,GAAG;QAClB,CAAC,YAAY,CAAC,EAAE,OAAO,CAAC,KAAK,EAAE;QAC/B,CAAC,cAAc,CAAC,EAAE,OAAO,CAAC,OAAO,EAAE;QACnC,CAAC,cAAc,CAAC,EAAE,OAAO,CAAC,OAAO,EAAE;KACpC,CAAC;IACF,OAAO,CACL,yCAAG,GAAG,EAAE,GAAG,EAAE,SAAS,EAAE,aAAa,CAAC,KAAK,CAAC,GAAG,IAAM,WAAW,GAC7D,QAAQ,CACP,CACL,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,QAAQ,CAAC,KAAK,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { observer } from 'mobx-react';\nimport ElementContext from '../../utils/ElementContext';\nimport { isNode } from '../../types';\nimport { ATTR_DATA_ID, ATTR_DATA_KIND, ATTR_DATA_TYPE } from '../../const';\n\ntype LayerContainerProps = {\n  children: React.ReactNode;\n};\n\nconst LayerContainer: React.RefForwardingComponent<SVGGElement, LayerContainerProps> = (\n  { children },\n  ref,\n) => {\n  // accumulate parent positions\n  const element = React.useContext(ElementContext);\n  let p = element;\n  let x = 0;\n  let y = 0;\n  while (isNode(p)) {\n    if (!p.isGroup() || p.isCollapsed()) {\n      const { x: px, y: py } = p.getPosition();\n      x += px;\n      y += py;\n    }\n    p = p.getParent();\n  }\n  const commonAttrs = {\n    [ATTR_DATA_ID]: element.getId(),\n    [ATTR_DATA_KIND]: element.getKind(),\n    [ATTR_DATA_TYPE]: element.getType(),\n  };\n  return (\n    <g ref={ref} transform={`translate(${x}, ${y})`} {...commonAttrs}>\n      {children}\n    </g>\n  );\n};\n\nexport default observer(React.forwardRef(LayerContainer));\n"]}]}