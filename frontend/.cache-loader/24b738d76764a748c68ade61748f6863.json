{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vmi/ip-address.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vmi/ip-address.ts","mtime":1615298458670},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { get, uniq, flatMap } from 'lodash';\nexport const getVmiIpAddresses = (vmi) => uniq(flatMap(\n// get IPs only for named interfaces because Windows reports IPs for other devices like Loopback Pseudo-Interface 1 etc.\nget(vmi, 'status.interfaces', []).filter((i) => !!i.name), (i) => {\n    const arr = [];\n    if (i.ipAddress) {\n        // the \"ipAddress\" is deprecated but still can contain useful value\n        arr.push(i.ipAddress.trim());\n    }\n    if (i.ipAddresses && Array.isArray(i.ipAddresses) && i.ipAddresses.length > 0) {\n        arr.push(...i.ipAddresses.map((ip) => ip.trim()));\n    }\n    return arr;\n}).filter((ip) => ip && ip.length > 0));\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vmi/ip-address.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vmi/ip-address.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,MAAM,QAAQ,CAAC;AAG5C,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,GAAY,EAAE,EAAE,CAChD,IAAI,CACF,OAAO;AACL,wHAAwH;AACxH,GAAG,CAAC,GAAG,EAAE,mBAAmB,EAAE,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EACzD,CAAC,CAAC,EAAE,EAAE;IACJ,MAAM,GAAG,GAAG,EAAE,CAAC;IACf,IAAI,CAAC,CAAC,SAAS,EAAE;QACf,mEAAmE;QACnE,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC;KAC9B;IACD,IAAI,CAAC,CAAC,WAAW,IAAI,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,EAAE;QAC7E,GAAG,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;KACnD;IACD,OAAO,GAAG,CAAC;AACb,CAAC,CACF,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,CACtC,CAAC","sourcesContent":["import { get, uniq, flatMap } from 'lodash';\nimport { VMIKind } from '../../types';\n\nexport const getVmiIpAddresses = (vmi: VMIKind) =>\n  uniq(\n    flatMap(\n      // get IPs only for named interfaces because Windows reports IPs for other devices like Loopback Pseudo-Interface 1 etc.\n      get(vmi, 'status.interfaces', []).filter((i) => !!i.name),\n      (i) => {\n        const arr = [];\n        if (i.ipAddress) {\n          // the \"ipAddress\" is deprecated but still can contain useful value\n          arr.push(i.ipAddress.trim());\n        }\n        if (i.ipAddresses && Array.isArray(i.ipAddresses) && i.ipAddresses.length > 0) {\n          arr.push(...i.ipAddresses.map((ip) => ip.trim()));\n        }\n        return arr;\n      },\n    ).filter((ip) => ip && ip.length > 0),\n  );\n"]}]}