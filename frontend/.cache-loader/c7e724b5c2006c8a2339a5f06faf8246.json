{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/triggers/resource-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/triggers/resource-utils.ts","mtime":1615298458620},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { getRandomChars } from '@console/shared';\nimport { apiVersionForModel } from '@console/internal/module/k8s';\nimport { RouteModel } from '@console/internal/models';\nimport { EventListenerModel, TriggerTemplateModel } from '../../../../models';\nimport { PIPELINE_SERVICE_ACCOUNT } from '../../const';\nexport const createTriggerTemplate = (pipelineRun, params) => {\n    return {\n        apiVersion: apiVersionForModel(TriggerTemplateModel),\n        kind: TriggerTemplateModel.kind,\n        metadata: {\n            name: `trigger-template-${pipelineRun.metadata.name}`,\n        },\n        spec: {\n            params,\n            resourcetemplates: [pipelineRun],\n        },\n    };\n};\nexport const createEventListener = (triggerBindings, triggerTemplate) => {\n    return {\n        apiVersion: apiVersionForModel(EventListenerModel),\n        kind: EventListenerModel.kind,\n        metadata: {\n            name: `event-listener-${getRandomChars()}`,\n        },\n        spec: {\n            serviceAccountName: PIPELINE_SERVICE_ACCOUNT,\n            triggers: [\n                {\n                    bindings: triggerBindings.map(({ kind, metadata: { name } }) => ({ kind, name })),\n                    template: { name: triggerTemplate.metadata.name },\n                },\n            ],\n        },\n    };\n};\nexport const createEventListenerRoute = (eventListener, generatedName, targetPort = 8080) => {\n    const eventListenerName = eventListener.metadata.name;\n    // Not ideal, but if all else fails, we can do our best guess\n    const referenceName = generatedName || `el-${eventListenerName}`;\n    return {\n        apiVersion: apiVersionForModel(RouteModel),\n        kind: RouteModel.kind,\n        metadata: {\n            name: referenceName,\n            labels: {\n                'app.kubernetes.io/managed-by': EventListenerModel.kind,\n                'app.kubernetes.io/part-of': 'Triggers',\n                eventlistener: eventListenerName,\n            },\n        },\n        spec: {\n            port: {\n                targetPort,\n            },\n            to: {\n                kind: 'Service',\n                name: referenceName,\n                weight: 100,\n            },\n        },\n    };\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/triggers/resource-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/triggers/resource-utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AACjD,OAAO,EAAE,kBAAkB,EAAa,MAAM,8BAA8B,CAAC;AAC7E,OAAO,EAAE,UAAU,EAAE,MAAM,0BAA0B,CAAC;AACtD,OAAO,EAAE,kBAAkB,EAAE,oBAAoB,EAAE,MAAM,oBAAoB,CAAC;AAE9E,OAAO,EAAE,wBAAwB,EAAE,MAAM,aAAa,CAAC;AAQvD,MAAM,CAAC,MAAM,qBAAqB,GAAG,CACnC,WAAwB,EACxB,MAAkC,EACb,EAAE;IACvB,OAAO;QACL,UAAU,EAAE,kBAAkB,CAAC,oBAAoB,CAAC;QACpD,IAAI,EAAE,oBAAoB,CAAC,IAAI;QAC/B,QAAQ,EAAE;YACR,IAAI,EAAE,oBAAoB,WAAW,CAAC,QAAQ,CAAC,IAAI,EAAE;SACtD;QACD,IAAI,EAAE;YACJ,MAAM;YACN,iBAAiB,EAAE,CAAC,WAAW,CAAC;SACjC;KACF,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,mBAAmB,GAAG,CACjC,eAAqC,EACrC,eAAoC,EACjB,EAAE;IACrB,OAAO;QACL,UAAU,EAAE,kBAAkB,CAAC,kBAAkB,CAAC;QAClD,IAAI,EAAE,kBAAkB,CAAC,IAAI;QAC7B,QAAQ,EAAE;YACR,IAAI,EAAE,kBAAkB,cAAc,EAAE,EAAE;SAC3C;QACD,IAAI,EAAE;YACJ,kBAAkB,EAAE,wBAAwB;YAC5C,QAAQ,EAAE;gBACR;oBACE,QAAQ,EAAE,eAAe,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,CAAC,CAAC;oBACjF,QAAQ,EAAE,EAAE,IAAI,EAAE,eAAe,CAAC,QAAQ,CAAC,IAAI,EAAE;iBAClD;aACF;SACF;KACF,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,wBAAwB,GAAG,CACtC,aAAgC,EAChC,aAAsB,EACtB,aAAqB,IAAI,EACd,EAAE;IACb,MAAM,iBAAiB,GAAG,aAAa,CAAC,QAAQ,CAAC,IAAI,CAAC;IACtD,6DAA6D;IAC7D,MAAM,aAAa,GAAG,aAAa,IAAI,MAAM,iBAAiB,EAAE,CAAC;IAEjE,OAAO;QACL,UAAU,EAAE,kBAAkB,CAAC,UAAU,CAAC;QAC1C,IAAI,EAAE,UAAU,CAAC,IAAI;QACrB,QAAQ,EAAE;YACR,IAAI,EAAE,aAAa;YACnB,MAAM,EAAE;gBACN,8BAA8B,EAAE,kBAAkB,CAAC,IAAI;gBACvD,2BAA2B,EAAE,UAAU;gBACvC,aAAa,EAAE,iBAAiB;aACjC;SACF;QACD,IAAI,EAAE;YACJ,IAAI,EAAE;gBACJ,UAAU;aACX;YACD,EAAE,EAAE;gBACF,IAAI,EAAE,SAAS;gBACf,IAAI,EAAE,aAAa;gBACnB,MAAM,EAAE,GAAG;aACZ;SACF;KACF,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { getRandomChars } from '@console/shared';\nimport { apiVersionForModel, RouteKind } from '@console/internal/module/k8s';\nimport { RouteModel } from '@console/internal/models';\nimport { EventListenerModel, TriggerTemplateModel } from '../../../../models';\nimport { PipelineRun } from '../../../../utils/pipeline-augment';\nimport { PIPELINE_SERVICE_ACCOUNT } from '../../const';\nimport {\n  TriggerBindingKind,\n  EventListenerKind,\n  TriggerTemplateKind,\n  TriggerTemplateKindParam,\n} from '../../resource-types';\n\nexport const createTriggerTemplate = (\n  pipelineRun: PipelineRun,\n  params: TriggerTemplateKindParam[],\n): TriggerTemplateKind => {\n  return {\n    apiVersion: apiVersionForModel(TriggerTemplateModel),\n    kind: TriggerTemplateModel.kind,\n    metadata: {\n      name: `trigger-template-${pipelineRun.metadata.name}`,\n    },\n    spec: {\n      params,\n      resourcetemplates: [pipelineRun],\n    },\n  };\n};\n\nexport const createEventListener = (\n  triggerBindings: TriggerBindingKind[],\n  triggerTemplate: TriggerTemplateKind,\n): EventListenerKind => {\n  return {\n    apiVersion: apiVersionForModel(EventListenerModel),\n    kind: EventListenerModel.kind,\n    metadata: {\n      name: `event-listener-${getRandomChars()}`,\n    },\n    spec: {\n      serviceAccountName: PIPELINE_SERVICE_ACCOUNT,\n      triggers: [\n        {\n          bindings: triggerBindings.map(({ kind, metadata: { name } }) => ({ kind, name })),\n          template: { name: triggerTemplate.metadata.name },\n        },\n      ],\n    },\n  };\n};\n\nexport const createEventListenerRoute = (\n  eventListener: EventListenerKind,\n  generatedName?: string,\n  targetPort: number = 8080,\n): RouteKind => {\n  const eventListenerName = eventListener.metadata.name;\n  // Not ideal, but if all else fails, we can do our best guess\n  const referenceName = generatedName || `el-${eventListenerName}`;\n\n  return {\n    apiVersion: apiVersionForModel(RouteModel),\n    kind: RouteModel.kind,\n    metadata: {\n      name: referenceName,\n      labels: {\n        'app.kubernetes.io/managed-by': EventListenerModel.kind,\n        'app.kubernetes.io/part-of': 'Triggers',\n        eventlistener: eventListenerName,\n      },\n    },\n    spec: {\n      port: {\n        targetPort,\n      },\n      to: {\n        kind: 'Service',\n        name: referenceName,\n        weight: 100,\n      },\n    },\n  };\n};\n"]}]}