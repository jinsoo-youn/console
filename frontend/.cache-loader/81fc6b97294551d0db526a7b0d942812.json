{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/nodes/build-decorators/BuildDecorator.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/nodes/build-decorators/BuildDecorator.tsx","mtime":1615298458630},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { Decorator } from '../Decorator';\nimport { getBuildDecoratorParts } from './build-decorator-utils';\nconst BuildDecorator = ({ workloadData, radius, x, y }) => {\n    const { decoratorIcon, linkRef, tooltipContent } = getBuildDecoratorParts(workloadData);\n    if (!decoratorIcon && !tooltipContent) {\n        return null;\n    }\n    let decoratorContent = (React.createElement(Decorator, { x: x, y: y, radius: radius },\n        React.createElement(\"g\", { transform: `translate(-${radius / 2}, -${radius / 2})` },\n            React.createElement(\"foreignObject\", { width: radius, height: radius, style: { fontSize: radius } }, decoratorIcon))));\n    if (linkRef) {\n        decoratorContent = (React.createElement(Link, { to: linkRef, className: \"odc-decorator__link\" }, decoratorContent));\n    }\n    return (React.createElement(Tooltip, { key: \"build\", content: tooltipContent, position: TooltipPosition.left }, decoratorContent));\n};\nexport default BuildDecorator;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/nodes/build-decorators/BuildDecorator.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/nodes/build-decorators/BuildDecorator.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,IAAI,EAAE,MAAM,kBAAkB,CAAC;AACxC,OAAO,EAAE,OAAO,EAAE,eAAe,EAAE,MAAM,wBAAwB,CAAC;AAElE,OAAO,EAAE,SAAS,EAAE,MAAM,cAAc,CAAC;AACzC,OAAO,EAAE,sBAAsB,EAAE,MAAM,yBAAyB,CAAC;AASjE,MAAM,cAAc,GAAkC,CAAC,EAAE,YAAY,EAAE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,EAAE,EAAE;IACvF,MAAM,EAAE,aAAa,EAAE,OAAO,EAAE,cAAc,EAAE,GAAG,sBAAsB,CAAC,YAAY,CAAC,CAAC;IAExF,IAAI,CAAC,aAAa,IAAI,CAAC,cAAc,EAAE;QACrC,OAAO,IAAI,CAAC;KACb;IAED,IAAI,gBAAgB,GAAG,CACrB,oBAAC,SAAS,IAAC,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,CAAC,EAAE,MAAM,EAAE,MAAM;QACnC,2BAAG,SAAS,EAAE,cAAc,MAAM,GAAG,CAAC,MAAM,MAAM,GAAG,CAAC,GAAG;YACvD,uCAAe,KAAK,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,QAAQ,EAAE,MAAM,EAAE,IACtE,aAAa,CACA,CACd,CACM,CACb,CAAC;IAEF,IAAI,OAAO,EAAE;QACX,gBAAgB,GAAG,CACjB,oBAAC,IAAI,IAAC,EAAE,EAAE,OAAO,EAAE,SAAS,EAAC,qBAAqB,IAC/C,gBAAgB,CACZ,CACR,CAAC;KACH;IAED,OAAO,CACL,oBAAC,OAAO,IAAC,GAAG,EAAC,OAAO,EAAC,OAAO,EAAE,cAAc,EAAE,QAAQ,EAAE,eAAe,CAAC,IAAI,IACzE,gBAAgB,CACT,CACX,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,cAAc,CAAC","sourcesContent":["import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { WorkloadData } from '../../../topology-types';\nimport { Decorator } from '../Decorator';\nimport { getBuildDecoratorParts } from './build-decorator-utils';\n\nexport interface BuildDecoratorProps {\n  workloadData: WorkloadData;\n  radius: number;\n  x: number;\n  y: number;\n}\n\nconst BuildDecorator: React.FC<BuildDecoratorProps> = ({ workloadData, radius, x, y }) => {\n  const { decoratorIcon, linkRef, tooltipContent } = getBuildDecoratorParts(workloadData);\n\n  if (!decoratorIcon && !tooltipContent) {\n    return null;\n  }\n\n  let decoratorContent = (\n    <Decorator x={x} y={y} radius={radius}>\n      <g transform={`translate(-${radius / 2}, -${radius / 2})`}>\n        <foreignObject width={radius} height={radius} style={{ fontSize: radius }}>\n          {decoratorIcon}\n        </foreignObject>\n      </g>\n    </Decorator>\n  );\n\n  if (linkRef) {\n    decoratorContent = (\n      <Link to={linkRef} className=\"odc-decorator__link\">\n        {decoratorContent}\n      </Link>\n    );\n  }\n\n  return (\n    <Tooltip key=\"build\" content={tooltipContent} position={TooltipPosition.left}>\n      {decoratorContent}\n    </Tooltip>\n  );\n};\n\nexport default BuildDecorator;\n"]}]}