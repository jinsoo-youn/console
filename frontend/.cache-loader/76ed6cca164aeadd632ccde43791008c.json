{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/components/VisualizationSurface.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/components/VisualizationSurface.tsx","mtime":1616735742460},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { action } from 'mobx';\nimport { observer } from 'mobx-react';\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore-next-line\nimport ReactMeasure from 'react-measure';\nimport ControllerContext from '../utils/ControllerContext';\nimport SVGDefsProvider from './defs/SVGDefsProvider';\nimport ElementWrapper from './ElementWrapper';\nimport Dimensions from '../geom/Dimensions';\nimport './VisualizationSurface.scss';\nfunction stopEvent(e) {\n    e.preventDefault();\n    e.stopPropagation();\n}\nconst VisualizationSurface = ({ visualization, state }) => {\n    React.useEffect(() => {\n        state && visualization.setState(state);\n    }, [visualization, state]);\n    const onMeasure = React.useMemo(() => _.debounce(action((contentRect) => {\n        visualization\n            .getGraph()\n            .setDimensions(new Dimensions(contentRect.client.width, contentRect.client.height));\n    }), 100, { leading: true, trailing: true }), [visualization]);\n    // dispose of onMeasure\n    React.useEffect(() => () => onMeasure.cancel(), [onMeasure]);\n    const graph = visualization.getGraph();\n    return (React.createElement(ControllerContext.Provider, { value: visualization },\n        React.createElement(ReactMeasure, { client: true, onResize: onMeasure }, ({ measureRef }) => (\n        // render an outer div because react-measure doesn't seem to fire events properly on svg resize\n        React.createElement(\"div\", { \"data-test-id\": \"topology\", className: \"topology-visualization-surface\", ref: measureRef },\n            React.createElement(\"svg\", { className: \"topology-visualization-surface__svg\", onContextMenu: stopEvent },\n                React.createElement(SVGDefsProvider, null,\n                    React.createElement(ElementWrapper, { element: graph }))))))));\n};\nexport default observer(VisualizationSurface);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/components/VisualizationSurface.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/components/VisualizationSurface.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAC9B,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AACtC,4DAA4D;AAC5D,uBAAuB;AACvB,OAAO,YAAY,MAAM,eAAe,CAAC;AACzC,OAAO,iBAAiB,MAAM,4BAA4B,CAAC;AAG3D,OAAO,eAAe,MAAM,wBAAwB,CAAC;AACrD,OAAO,cAAc,MAAM,kBAAkB,CAAC;AAC9C,OAAO,UAAU,MAAM,oBAAoB,CAAC;AAE5C,OAAO,6BAA6B,CAAC;AAOrC,SAAS,SAAS,CAAC,CAAmB;IACpC,CAAC,CAAC,cAAc,EAAE,CAAC;IACnB,CAAC,CAAC,eAAe,EAAE,CAAC;AACtB,CAAC;AAED,MAAM,oBAAoB,GAAwC,CAAC,EAAE,aAAa,EAAE,KAAK,EAAE,EAAE,EAAE;IAC7F,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,KAAK,IAAI,aAAa,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACzC,CAAC,EAAE,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC,CAAC;IAE3B,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,CAC7B,GAAG,EAAE,CACH,CAAC,CAAC,QAAQ,CACR,MAAM,CAAC,CAAC,WAA0D,EAAE,EAAE;QACpE,aAAa;aACV,QAAQ,EAAE;aACV,aAAa,CAAC,IAAI,UAAU,CAAC,WAAW,CAAC,MAAM,CAAC,KAAK,EAAE,WAAW,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;IACxF,CAAC,CAAC,EACF,GAAG,EACH,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,CAClC,EACH,CAAC,aAAa,CAAC,CAChB,CAAC;IAEF,uBAAuB;IACvB,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,SAAS,CAAC,MAAM,EAAE,EAAE,CAAC,SAAS,CAAC,CAAC,CAAC;IAE7D,MAAM,KAAK,GAAG,aAAa,CAAC,QAAQ,EAAE,CAAC;IAEvC,OAAO,CACL,oBAAC,iBAAiB,CAAC,QAAQ,IAAC,KAAK,EAAE,aAAa;QAC9C,oBAAC,YAAY,IAAC,MAAM,QAAC,QAAQ,EAAE,SAAS,IACrC,CAAC,EAAE,UAAU,EAAwC,EAAE,EAAE,CAAC;QACzD,+FAA+F;QAC/F,6CAAkB,UAAU,EAAC,SAAS,EAAC,gCAAgC,EAAC,GAAG,EAAE,UAAU;YACrF,6BAAK,SAAS,EAAC,qCAAqC,EAAC,aAAa,EAAE,SAAS;gBAC3E,oBAAC,eAAe;oBACd,oBAAC,cAAc,IAAC,OAAO,EAAE,KAAK,GAAI,CAClB,CACd,CACF,CACP,CACY,CACY,CAC9B,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,QAAQ,CAAC,oBAAoB,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { action } from 'mobx';\nimport { observer } from 'mobx-react';\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore-next-line\nimport ReactMeasure from 'react-measure';\nimport ControllerContext from '../utils/ControllerContext';\nimport { State } from '../types';\nimport Visualization from '../Visualization';\nimport SVGDefsProvider from './defs/SVGDefsProvider';\nimport ElementWrapper from './ElementWrapper';\nimport Dimensions from '../geom/Dimensions';\n\nimport './VisualizationSurface.scss';\n\ninterface VisualizationSurfaceProps {\n  visualization: Visualization;\n  state?: State;\n}\n\nfunction stopEvent(e: React.MouseEvent): void {\n  e.preventDefault();\n  e.stopPropagation();\n}\n\nconst VisualizationSurface: React.FC<VisualizationSurfaceProps> = ({ visualization, state }) => {\n  React.useEffect(() => {\n    state && visualization.setState(state);\n  }, [visualization, state]);\n\n  const onMeasure = React.useMemo(\n    () =>\n      _.debounce<any>(\n        action((contentRect: { client: { width: number; height: number } }) => {\n          visualization\n            .getGraph()\n            .setDimensions(new Dimensions(contentRect.client.width, contentRect.client.height));\n        }),\n        100,\n        { leading: true, trailing: true },\n      ),\n    [visualization],\n  );\n\n  // dispose of onMeasure\n  React.useEffect(() => () => onMeasure.cancel(), [onMeasure]);\n\n  const graph = visualization.getGraph();\n\n  return (\n    <ControllerContext.Provider value={visualization}>\n      <ReactMeasure client onResize={onMeasure}>\n        {({ measureRef }: { measureRef: React.LegacyRef<any> }) => (\n          // render an outer div because react-measure doesn't seem to fire events properly on svg resize\n          <div data-test-id=\"topology\" className=\"topology-visualization-surface\" ref={measureRef}>\n            <svg className=\"topology-visualization-surface__svg\" onContextMenu={stopEvent}>\n              <SVGDefsProvider>\n                <ElementWrapper element={graph} />\n              </SVGDefsProvider>\n            </svg>\n          </div>\n        )}\n      </ReactMeasure>\n    </ControllerContext.Provider>\n  );\n};\n\nexport default observer(VisualizationSurface);\n"]}]}