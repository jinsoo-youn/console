{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/form/size-unit-form-row.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/form/size-unit-form-row.tsx","mtime":1615298458660},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { FormSelect, FormSelectOption, Split, SplitItem } from '@patternfly/react-core';\nimport { prefixedID } from '../../utils';\nimport { getStringEnumValues } from '../../utils/types';\nimport { isValidationError } from '../../utils/validations/common';\nimport { FormRow } from './form-row';\nimport { Integer } from './integer/integer';\nimport { BinaryUnit, toIECUnit } from './size-unit-utils';\nimport './size-unit-form-row.scss';\nexport const SizeUnitFormRow = ({ title = 'Size', size, unit, units, validation, id, isRequired, isDisabled, onSizeChanged = () => undefined, onUnitChanged = () => undefined, }) => (React.createElement(FormRow, { key: \"size\", title: title, fieldId: prefixedID(id, 'size'), isRequired: isRequired, validation: validation },\n    React.createElement(Split, null,\n        React.createElement(SplitItem, { isFilled: true },\n            React.createElement(Integer, { isFullWidth: true, isValid: !isValidationError(validation), isDisabled: isDisabled, id: prefixedID(id, 'size'), value: size, isPositive: true, onChange: React.useCallback((v) => onSizeChanged(v), [onSizeChanged]), \"aria-label\": `${title} size` })),\n        React.createElement(SplitItem, null,\n            React.createElement(FormSelect, { className: \"kubevirt-size-unit-form-row__unit\", onChange: React.useCallback((u) => onUnitChanged(u), [onUnitChanged]), value: unit, id: prefixedID(id, 'unit'), isDisabled: isDisabled, \"aria-label\": `${title} unit` }, (units || getStringEnumValues(BinaryUnit)).map((u) => (React.createElement(FormSelectOption, { key: u, value: u, label: toIECUnit(u) }))))))));\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/form/size-unit-form-row.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/form/size-unit-form-row.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,UAAU,EAAE,gBAAgB,EAAE,KAAK,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AAExF,OAAO,EAAE,UAAU,EAAE,MAAM,aAAa,CAAC;AACzC,OAAO,EAAE,mBAAmB,EAAE,MAAM,mBAAmB,CAAC;AACxD,OAAO,EAAE,iBAAiB,EAAE,MAAM,gCAAgC,CAAC;AACnE,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AACrC,OAAO,EAAE,OAAO,EAAE,MAAM,mBAAmB,CAAC;AAC5C,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAC;AAE1D,OAAO,2BAA2B,CAAC;AAcnC,MAAM,CAAC,MAAM,eAAe,GAAmC,CAAC,EAC9D,KAAK,GAAG,MAAM,EACd,IAAI,EACJ,IAAI,EACJ,KAAK,EACL,UAAU,EACV,EAAE,EACF,UAAU,EACV,UAAU,EACV,aAAa,GAAG,GAAG,EAAE,CAAC,SAAS,EAC/B,aAAa,GAAG,GAAG,EAAE,CAAC,SAAS,GAChC,EAAE,EAAE,CAAC,CACJ,oBAAC,OAAO,IACN,GAAG,EAAC,MAAM,EACV,KAAK,EAAE,KAAK,EACZ,OAAO,EAAE,UAAU,CAAC,EAAE,EAAE,MAAM,CAAC,EAC/B,UAAU,EAAE,UAAU,EACtB,UAAU,EAAE,UAAU;IAEtB,oBAAC,KAAK;QACJ,oBAAC,SAAS,IAAC,QAAQ;YACjB,oBAAC,OAAO,IACN,WAAW,QACX,OAAO,EAAE,CAAC,iBAAiB,CAAC,UAAU,CAAC,EACvC,UAAU,EAAE,UAAU,EACtB,EAAE,EAAE,UAAU,CAAC,EAAE,EAAE,MAAM,CAAC,EAC1B,KAAK,EAAE,IAAI,EACX,UAAU,QACV,QAAQ,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,gBACzD,GAAG,KAAK,OAAO,GAC3B,CACQ;QACZ,oBAAC,SAAS;YACR,oBAAC,UAAU,IACT,SAAS,EAAC,mCAAmC,EAC7C,QAAQ,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,aAAa,CAAC,CAAe,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,EACnF,KAAK,EAAE,IAAI,EACX,EAAE,EAAE,UAAU,CAAC,EAAE,EAAE,MAAM,CAAC,EAC1B,UAAU,EAAE,UAAU,gBACV,GAAG,KAAK,OAAO,IAE1B,CAAC,KAAK,IAAI,mBAAmB,CAAa,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CACjE,oBAAC,gBAAgB,IAAC,GAAG,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC,CAAC,GAAI,CAC5D,CAAC,CACS,CACH,CACN,CACA,CACX,CAAC","sourcesContent":["import * as React from 'react';\nimport { FormSelect, FormSelectOption, Split, SplitItem } from '@patternfly/react-core';\nimport { ValidationObject } from '@console/shared';\nimport { prefixedID } from '../../utils';\nimport { getStringEnumValues } from '../../utils/types';\nimport { isValidationError } from '../../utils/validations/common';\nimport { FormRow } from './form-row';\nimport { Integer } from './integer/integer';\nimport { BinaryUnit, toIECUnit } from './size-unit-utils';\n\nimport './size-unit-form-row.scss';\n\ntype SizeUnitFormRowProps = {\n  size: string;\n  title?: string;\n  unit: BinaryUnit;\n  units?: BinaryUnit[];\n  validation?: ValidationObject;\n  id?: string;\n  isDisabled?: boolean;\n  isRequired?: boolean;\n  onSizeChanged?: (size: string) => void;\n  onUnitChanged?: (unit: BinaryUnit) => void;\n};\nexport const SizeUnitFormRow: React.FC<SizeUnitFormRowProps> = ({\n  title = 'Size',\n  size,\n  unit,\n  units,\n  validation,\n  id,\n  isRequired,\n  isDisabled,\n  onSizeChanged = () => undefined,\n  onUnitChanged = () => undefined,\n}) => (\n  <FormRow\n    key=\"size\"\n    title={title}\n    fieldId={prefixedID(id, 'size')}\n    isRequired={isRequired}\n    validation={validation}\n  >\n    <Split>\n      <SplitItem isFilled>\n        <Integer\n          isFullWidth\n          isValid={!isValidationError(validation)}\n          isDisabled={isDisabled}\n          id={prefixedID(id, 'size')}\n          value={size}\n          isPositive\n          onChange={React.useCallback((v) => onSizeChanged(v), [onSizeChanged])}\n          aria-label={`${title} size`}\n        />\n      </SplitItem>\n      <SplitItem>\n        <FormSelect\n          className=\"kubevirt-size-unit-form-row__unit\"\n          onChange={React.useCallback((u) => onUnitChanged(u as BinaryUnit), [onUnitChanged])}\n          value={unit}\n          id={prefixedID(id, 'unit')}\n          isDisabled={isDisabled}\n          aria-label={`${title} unit`}\n        >\n          {(units || getStringEnumValues<BinaryUnit>(BinaryUnit)).map((u) => (\n            <FormSelectOption key={u} value={u} label={toIECUnit(u)} />\n          ))}\n        </FormSelect>\n      </SplitItem>\n    </Split>\n  </FormRow>\n);\n"]}]}