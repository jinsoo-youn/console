{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/actions/dashboards.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/actions/dashboards.ts","mtime":1615298458710},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { action } from 'typesafe-actions';\nimport { coFetchJSON } from '../co-fetch';\nimport { k8sBasePath } from '../module/k8s/k8s';\nimport { isWatchActive, RESULTS_TYPE } from '../reducers/dashboards';\nimport { getPrometheusURL, PrometheusEndpoint } from '../components/graphs/helpers';\nexport var ActionType;\n(function (ActionType) {\n    ActionType[\"StopWatch\"] = \"stopWatch\";\n    ActionType[\"SetData\"] = \"setData\";\n    ActionType[\"ActivateWatch\"] = \"activateWatch\";\n    ActionType[\"UpdateWatchTimeout\"] = \"updateWatchTimeout\";\n    ActionType[\"UpdateWatchInFlight\"] = \"updateWatchInFlight\";\n    ActionType[\"SetError\"] = \"setError\";\n})(ActionType || (ActionType = {}));\nconst REFRESH_TIMEOUT = 5000;\nexport const stopWatch = (type, key) => action(ActionType.StopWatch, { type, key });\nexport const setData = (type, key, data) => action(ActionType.SetData, { type, key, data });\nexport const activateWatch = (type, key) => action(ActionType.ActivateWatch, { type, key });\nexport const updateWatchTimeout = (type, key, timeout) => action(ActionType.UpdateWatchTimeout, { type, key, timeout });\nexport const updateWatchInFlight = (type, key, inFlight) => action(ActionType.UpdateWatchInFlight, { type, key, inFlight });\nexport const setError = (type, key, error) => action(ActionType.SetError, { type, key, error });\nconst dashboardsActions = {\n    stopWatch,\n    setData,\n    activateWatch,\n    updateWatchTimeout,\n    updateWatchInFlight,\n    setError,\n};\nexport const getQueryKey = (query, timespan) => timespan ? `${query}@${timespan}` : query;\nexport const getPrometheusQueryResponse = (prometheusResults, query, timespan) => {\n    const queryKey = getQueryKey(query, timespan);\n    const data = prometheusResults.getIn([queryKey, 'data']);\n    const loadError = prometheusResults.getIn([queryKey, 'loadError']);\n    return [data, loadError];\n};\nconst fetchPeriodically = (dispatch, type, key, getURL, getState, fetch) => __awaiter(void 0, void 0, void 0, function* () {\n    if (!isWatchActive(getState().dashboards, type, key)) {\n        return;\n    }\n    try {\n        dispatch(updateWatchInFlight(type, key, true));\n        const data = yield fetch(getURL());\n        dispatch(setData(type, key, data));\n    }\n    catch (error) {\n        dispatch(setError(type, key, error));\n    }\n    finally {\n        dispatch(updateWatchInFlight(type, key, false));\n        const timeout = setTimeout(() => fetchPeriodically(dispatch, type, key, getURL, getState, fetch), REFRESH_TIMEOUT);\n        dispatch(updateWatchTimeout(type, key, timeout));\n    }\n});\nexport const watchPrometheusQuery = (query, namespace, timespan) => (dispatch, getState) => {\n    const queryKey = getQueryKey(query, timespan);\n    const isActive = isWatchActive(getState().dashboards, RESULTS_TYPE.PROMETHEUS, queryKey);\n    dispatch(activateWatch(RESULTS_TYPE.PROMETHEUS, queryKey));\n    if (!isActive) {\n        const prometheusBaseURL = namespace\n            ? window.SERVER_FLAGS.prometheusTenancyBaseURL\n            : window.SERVER_FLAGS.prometheusBaseURL;\n        if (!prometheusBaseURL) {\n            dispatch(setError(RESULTS_TYPE.PROMETHEUS, queryKey, new Error('Prometheus URL is not available')));\n        }\n        else {\n            const url = () => getPrometheusURL({\n                endpoint: timespan ? PrometheusEndpoint.QUERY_RANGE : PrometheusEndpoint.QUERY,\n                namespace,\n                query,\n                timespan,\n            });\n            fetchPeriodically(dispatch, RESULTS_TYPE.PROMETHEUS, queryKey, url, getState, coFetchJSON);\n        }\n    }\n};\nexport const watchURL = (url, fetch = coFetchJSON) => (dispatch, getState) => {\n    const isActive = isWatchActive(getState().dashboards, RESULTS_TYPE.URL, url);\n    dispatch(activateWatch(RESULTS_TYPE.URL, url));\n    if (!isActive) {\n        const k8sURL = () => `${k8sBasePath}/${url}`;\n        fetchPeriodically(dispatch, RESULTS_TYPE.URL, url, k8sURL, getState, fetch);\n    }\n};\nexport const stopWatchPrometheusQuery = (query, timespan) => stopWatch(RESULTS_TYPE.PROMETHEUS, getQueryKey(query, timespan));\nexport const stopWatchURL = (url) => stopWatch(RESULTS_TYPE.URL, url);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/actions/dashboards.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/actions/dashboards.ts"],"names":[],"mappings":"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","sourcesContent":["import { action, ActionType as Action } from 'typesafe-actions';\nimport { Dispatch } from 'react-redux';\n\nimport { coFetchJSON } from '../co-fetch';\nimport { k8sBasePath } from '../module/k8s/k8s';\nimport { isWatchActive, RESULTS_TYPE, RequestMap } from '../reducers/dashboards';\nimport { RootState } from '../redux';\nimport { getPrometheusURL, PrometheusEndpoint } from '../components/graphs/helpers';\nimport { PrometheusResponse } from '../components/graphs';\n\nexport enum ActionType {\n  StopWatch = 'stopWatch',\n  SetData = 'setData',\n  ActivateWatch = 'activateWatch',\n  UpdateWatchTimeout = 'updateWatchTimeout',\n  UpdateWatchInFlight = 'updateWatchInFlight',\n  SetError = 'setError',\n}\n\nconst REFRESH_TIMEOUT = 5000;\n\nexport const stopWatch = (type: RESULTS_TYPE, key: string) =>\n  action(ActionType.StopWatch, { type, key });\nexport const setData = (type: RESULTS_TYPE, key: string, data) =>\n  action(ActionType.SetData, { type, key, data });\nexport const activateWatch = (type: RESULTS_TYPE, key: string) =>\n  action(ActionType.ActivateWatch, { type, key });\nexport const updateWatchTimeout = (type: RESULTS_TYPE, key: string, timeout: NodeJS.Timer) =>\n  action(ActionType.UpdateWatchTimeout, { type, key, timeout });\nexport const updateWatchInFlight = (type: RESULTS_TYPE, key: string, inFlight: boolean) =>\n  action(ActionType.UpdateWatchInFlight, { type, key, inFlight });\nexport const setError = (type: RESULTS_TYPE, key: string, error) =>\n  action(ActionType.SetError, { type, key, error });\n\nconst dashboardsActions = {\n  stopWatch,\n  setData,\n  activateWatch,\n  updateWatchTimeout,\n  updateWatchInFlight,\n  setError,\n};\n\nexport const getQueryKey = (query: string, timespan?: number): string =>\n  timespan ? `${query}@${timespan}` : query;\n\nexport const getPrometheusQueryResponse = (\n  prometheusResults: RequestMap<PrometheusResponse>,\n  query: string,\n  timespan?: number,\n): [PrometheusResponse, any] => {\n  const queryKey = getQueryKey(query, timespan);\n  const data = prometheusResults.getIn([queryKey, 'data']);\n  const loadError = prometheusResults.getIn([queryKey, 'loadError']);\n  return [data, loadError];\n};\n\nconst fetchPeriodically: FetchPeriodically = async (\n  dispatch,\n  type,\n  key,\n  getURL,\n  getState,\n  fetch,\n) => {\n  if (!isWatchActive(getState().dashboards, type, key)) {\n    return;\n  }\n  try {\n    dispatch(updateWatchInFlight(type, key, true));\n    const data = await fetch(getURL());\n    dispatch(setData(type, key, data));\n  } catch (error) {\n    dispatch(setError(type, key, error));\n  } finally {\n    dispatch(updateWatchInFlight(type, key, false));\n    const timeout = setTimeout(\n      () => fetchPeriodically(dispatch, type, key, getURL, getState, fetch),\n      REFRESH_TIMEOUT,\n    );\n    dispatch(updateWatchTimeout(type, key, timeout));\n  }\n};\n\nexport const watchPrometheusQuery: WatchPrometheusQueryAction = (query, namespace, timespan) => (\n  dispatch,\n  getState,\n) => {\n  const queryKey = getQueryKey(query, timespan);\n  const isActive = isWatchActive(getState().dashboards, RESULTS_TYPE.PROMETHEUS, queryKey);\n  dispatch(activateWatch(RESULTS_TYPE.PROMETHEUS, queryKey));\n  if (!isActive) {\n    const prometheusBaseURL = namespace\n      ? window.SERVER_FLAGS.prometheusTenancyBaseURL\n      : window.SERVER_FLAGS.prometheusBaseURL;\n    if (!prometheusBaseURL) {\n      dispatch(\n        setError(RESULTS_TYPE.PROMETHEUS, queryKey, new Error('Prometheus URL is not available')),\n      );\n    } else {\n      const url = () =>\n        getPrometheusURL({\n          endpoint: timespan ? PrometheusEndpoint.QUERY_RANGE : PrometheusEndpoint.QUERY,\n          namespace,\n          query,\n          timespan,\n        });\n      fetchPeriodically(dispatch, RESULTS_TYPE.PROMETHEUS, queryKey, url, getState, coFetchJSON);\n    }\n  }\n};\n\nexport const watchURL: WatchURLAction = (url, fetch = coFetchJSON) => (dispatch, getState) => {\n  const isActive = isWatchActive(getState().dashboards, RESULTS_TYPE.URL, url);\n  dispatch(activateWatch(RESULTS_TYPE.URL, url));\n  if (!isActive) {\n    const k8sURL = () => `${k8sBasePath}/${url}`;\n    fetchPeriodically(dispatch, RESULTS_TYPE.URL, url, k8sURL, getState, fetch);\n  }\n};\n\nexport const stopWatchPrometheusQuery: StopWatchPrometheusAction = (query, timespan) =>\n  stopWatch(RESULTS_TYPE.PROMETHEUS, getQueryKey(query, timespan));\nexport const stopWatchURL = (url: string) => stopWatch(RESULTS_TYPE.URL, url);\n\ntype ThunkAction = (dispatch: Dispatch, getState: () => RootState) => void;\n\nexport type WatchURLAction = (url: string, fetch?: Fetch) => ThunkAction;\nexport type WatchPrometheusQueryAction = (\n  query: string,\n  namespace?: string,\n  timespan?: number,\n) => ThunkAction;\nexport type StopWatchURLAction = (url: string) => void;\nexport type StopWatchPrometheusAction = (query: string, timespan?: number) => void;\n\nexport type Fetch = (url: string) => Promise<any>;\n\ntype FetchPeriodically = (\n  dispatch: Dispatch,\n  type: RESULTS_TYPE,\n  key: string,\n  getURL: () => string,\n  getState: () => RootState,\n  fetch: Fetch,\n) => void;\n\nexport type DashboardsAction = Action<typeof dashboardsActions>;\n"]}]}