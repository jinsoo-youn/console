{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/utils/copy-to-clipboard.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/utils/copy-to-clipboard.tsx","mtime":1616735742470},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { CopyToClipboard as CTC } from 'react-copy-to-clipboard';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport { CopyIcon } from '@patternfly/react-icons';\nexport const CopyToClipboard = React.memo(props => {\n    const [copied, setCopied] = React.useState(false);\n    const tooltipText = copied ? 'Copied' : 'Copy to Clipboard';\n    const tooltipContent = [\n        React.createElement(\"span\", { className: \"co-nowrap\", key: \"nowrap\" }, tooltipText),\n    ];\n    // Default to value if no visible value was specified.\n    const visibleValue = _.isNil(props.visibleValue) ? props.value : props.visibleValue;\n    const border = props.isTable ? '0px' : '1px solid #ccc';\n    return (React.createElement(\"div\", { className: \"co-copy-to-clipboard\" },\n        React.createElement(\"pre\", { className: \"co-pre-wrap co-copy-to-clipboard__text\", style: { border: border } }, visibleValue),\n        React.createElement(Tooltip, { content: tooltipContent, trigger: \"click mouseenter focus\", exitDelay: 1250 },\n            React.createElement(CTC, { text: props.value, onCopy: () => setCopied(true) },\n                React.createElement(Button, { variant: \"plain\", onMouseEnter: () => setCopied(false), className: \"co-copy-to-clipboard__btn pf-c-clipboard-copy__group-copy\", type: \"button\" },\n                    React.createElement(CopyIcon, null),\n                    React.createElement(\"span\", { className: \"sr-only\" }, \"Copy to Clipboard\"))))));\n});\nCopyToClipboard.displayName = 'CopyToClipboard';\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/utils/copy-to-clipboard.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/utils/copy-to-clipboard.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,CAAC,MAAM,WAAW,CAAC;AAC/B,OAAO,EAAE,eAAe,IAAI,GAAG,EAAE,MAAM,yBAAyB,CAAC;AACjE,OAAO,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,wBAAwB,CAAC;AACzD,OAAO,EAAE,QAAQ,EAAE,MAAM,yBAAyB,CAAC;AAEnD,MAAM,CAAC,MAAM,eAAe,GAAmC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;IAChF,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAElD,MAAM,WAAW,GAAG,MAAM,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,mBAAmB,CAAC;IAC5D,MAAM,cAAc,GAAG;QACrB,8BAAM,SAAS,EAAC,WAAW,EAAC,GAAG,EAAC,QAAQ,IACrC,WAAW,CACP;KACR,CAAC;IAEF,sDAAsD;IACtD,MAAM,YAAY,GAAG,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,YAAY,CAAC;IACpF,MAAM,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,gBAAgB,CAAC;IAExD,OAAO,CACL,6BAAK,SAAS,EAAC,sBAAsB;QACnC,6BAAK,SAAS,EAAC,wCAAwC,EAAC,KAAK,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,IAC9E,YAAY,CACT;QACN,oBAAC,OAAO,IAAC,OAAO,EAAE,cAAc,EAAE,OAAO,EAAC,wBAAwB,EAAC,SAAS,EAAE,IAAI;YAChF,oBAAC,GAAG,IAAC,IAAI,EAAE,KAAK,CAAC,KAAK,EAAE,MAAM,EAAE,GAAG,EAAE,CAAC,SAAS,CAAC,IAAI,CAAC;gBACnD,oBAAC,MAAM,IAAC,OAAO,EAAC,OAAO,EAAC,YAAY,EAAE,GAAG,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,EAAE,SAAS,EAAC,2DAA2D,EAAC,IAAI,EAAC,QAAQ;oBAC/I,oBAAC,QAAQ,OAAG;oBACZ,8BAAM,SAAS,EAAC,SAAS,wBAAyB,CAC3C,CACL,CACE,CACN,CACP,CAAC;AACJ,CAAC,CAAC,CAAC;AAQH,eAAe,CAAC,WAAW,GAAG,iBAAiB,CAAC","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { CopyToClipboard as CTC } from 'react-copy-to-clipboard';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport { CopyIcon } from '@patternfly/react-icons';\n\nexport const CopyToClipboard: React.FC<CopyToClipboardProps> = React.memo(props => {\n  const [copied, setCopied] = React.useState(false);\n\n  const tooltipText = copied ? 'Copied' : 'Copy to Clipboard';\n  const tooltipContent = [\n    <span className=\"co-nowrap\" key=\"nowrap\">\n      {tooltipText}\n    </span>,\n  ];\n\n  // Default to value if no visible value was specified.\n  const visibleValue = _.isNil(props.visibleValue) ? props.value : props.visibleValue;\n  const border = props.isTable ? '0px' : '1px solid #ccc';\n\n  return (\n    <div className=\"co-copy-to-clipboard\">\n      <pre className=\"co-pre-wrap co-copy-to-clipboard__text\" style={{ border: border }}>\n        {visibleValue}\n      </pre>\n      <Tooltip content={tooltipContent} trigger=\"click mouseenter focus\" exitDelay={1250}>\n        <CTC text={props.value} onCopy={() => setCopied(true)}>\n          <Button variant=\"plain\" onMouseEnter={() => setCopied(false)} className=\"co-copy-to-clipboard__btn pf-c-clipboard-copy__group-copy\" type=\"button\">\n            <CopyIcon />\n            <span className=\"sr-only\">Copy to Clipboard</span>\n          </Button>\n        </CTC>\n      </Tooltip>\n    </div>\n  );\n});\n\nexport type CopyToClipboardProps = {\n  value: string;\n  visibleValue?: React.ReactNode;\n  isTable?: boolean;\n};\n\nCopyToClipboard.displayName = 'CopyToClipboard';\n"]}]}