{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/events.jsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/events.jsx","mtime":1616735742460},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport * as PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { Button, Chip, ChipGroup, ChipGroupToolbarItem } from '@patternfly/react-core';\nimport { CloseIcon } from '@patternfly/react-icons';\nimport { namespaceProptype } from '../propTypes';\nimport { ResourceListDropdown } from './resource-dropdown';\nimport { TextFilter } from './factory';\nimport { apiGroupForReference, isGroupVersionKind, kindForReference, referenceFor, watchURL } from '../module/k8s';\nimport { withStartGuide } from './start-guide';\nimport { WSFactory } from '../module/ws-factory';\nimport { EventModel, NodeModel } from '../models';\nimport { connectToFlags } from '../reducers/features';\nimport { FLAGS } from '@console/shared/src/constants';\nimport { Box, Dropdown, Loading, PageHeading, ResourceIcon, ResourceLink, resourcePathFromModel, Timestamp, TogglePlay } from './utils';\nimport { EventStreamList } from './utils/event-stream';\nimport { useTranslation, withTranslation } from 'react-i18next';\nconst maxMessages = 500;\nconst flushInterval = 500;\n// We have to check different properties depending on whether events were\n// created with the core/v1 events API or the new events.k8s.io API.\nconst getFirstTime = event => event.firstTimestamp || event.eventTime;\nexport const getLastTime = event => {\n    const lastObservedTime = event.series ? event.series.lastObservedTime : null;\n    return event.lastTimestamp || lastObservedTime || event.eventTime;\n};\nexport const sortEvents = events => {\n    return _.orderBy(events, [getLastTime, getFirstTime, 'name'], ['desc', 'desc', 'asc']);\n};\n// Predicate function to filter by event \"type\" (normal, warning, or all)\nexport const typeFilter = (eventType, event) => {\n    if (eventType === 'all') {\n        return true;\n    }\n    const { type = 'normal' } = event;\n    return type.toLowerCase() === eventType;\n};\nconst kindFilter = (reference, { involvedObject }) => {\n    if (reference === 'all') {\n        return true;\n    }\n    const kinds = reference.split(',');\n    return kinds.some(ref => {\n        if (!isGroupVersionKind(ref)) {\n            return involvedObject.kind === ref;\n        }\n        // Use `referenceFor` to resolve `apiVersion` when missing from `involvedObject`.\n        // We need `apiVersion` to get the group.\n        const involvedObjectRef = referenceFor(involvedObject);\n        if (!involvedObjectRef) {\n            return false;\n        }\n        // Only check the group and kind, not the API version, so that we catch\n        // events for the same resource under a different API version.\n        return involvedObject.kind === kindForReference(ref) && apiGroupForReference(involvedObjectRef) === apiGroupForReference(ref);\n    });\n};\nconst Inner = connectToFlags(FLAGS.CAN_LIST_NODE)(withTranslation()(class Inner extends React.PureComponent {\n    render() {\n        const { event, flags, t } = this.props;\n        const { involvedObject: obj, source, message, reason, series } = event;\n        const tooltipMsg = `${reason} (${obj.kind})`;\n        const isWarning = typeFilter('warning', event);\n        const firstTime = getFirstTime(event);\n        const lastTime = getLastTime(event);\n        const count = series ? series.count : event.count;\n        return (React.createElement(\"div\", { className: classNames('co-sysevent', { 'co-sysevent--warning': isWarning }) },\n            React.createElement(\"div\", { className: \"co-sysevent__icon-box\" },\n                React.createElement(\"i\", { className: \"co-sysevent-icon\", title: tooltipMsg }),\n                React.createElement(\"div\", { className: \"co-sysevent__icon-line\" })),\n            React.createElement(\"div\", { className: \"co-sysevent__box\", role: \"gridcell\" },\n                React.createElement(\"div\", { className: \"co-sysevent__header\" },\n                    React.createElement(\"div\", { className: \"co-sysevent__subheader\" },\n                        React.createElement(ResourceLink, { className: \"co-sysevent__resourcelink\", kind: referenceFor(obj), namespace: obj.namespace, name: obj.name }),\n                        obj.namespace && React.createElement(ResourceLink, { className: \"co-sysevent__resourcelink hidden-xs\", kind: \"Namespace\", name: obj.namespace }),\n                        lastTime && React.createElement(Timestamp, { className: \"co-sysevent__timestamp\", timestamp: lastTime })),\n                    React.createElement(\"div\", { className: \"co-sysevent__details\" },\n                        React.createElement(\"small\", { className: \"co-sysevent__source\" },\n                            t('SINGLE:MSG_EVENTS_MAIN_1', { something: source.component }),\n                            source.component === 'kubelet' && React.createElement(\"span\", null,\n                                \" on \",\n                                flags[FLAGS.CAN_LIST_NODE] ? React.createElement(Link, { to: resourcePathFromModel(NodeModel, source.host) }, source.host) : React.createElement(React.Fragment, null, source.host))),\n                        count > 1 && (React.createElement(\"small\", { className: \"co-sysevent__count text-secondary\" },\n                            count,\n                            \" times\",\n                            firstTime && (React.createElement(React.Fragment, null,\n                                ' ',\n                                \"in the last \",\n                                React.createElement(Timestamp, { timestamp: firstTime, simple: true, omitSuffix: true }))))))),\n                React.createElement(\"div\", { className: \"co-sysevent__message\" }, message))));\n    }\n}));\nclass _EventsList extends React.Component {\n    constructor(props) {\n        super(props);\n        this.toggleSelected = selection => {\n            if (this.state.selected.has('All') || selection === 'All') {\n                this.setState({ selected: new Set([selection]) });\n            }\n            else {\n                const updateItems = new Set(this.state.selected);\n                updateItems.has(selection) ? updateItems.delete(selection) : updateItems.add(selection);\n                this.setState({ selected: updateItems });\n            }\n        };\n        this.clearSelection = () => {\n            this.setState({ selected: new Set(['All']) });\n        };\n        this.state = {\n            type: 'all',\n            textFilter: '',\n            selected: new Set(['All']),\n        };\n    }\n    render() {\n        const { type, selected, textFilter } = this.state;\n        const { autoFocus = true, t } = this.props;\n        const eventTypes = { all: t('SINGLE:MSG_EVENTS_MAIN_TYPES_1'), normal: t('SINGLE:MSG_EVENTS_MAIN_TYPES_2'), warning: t('SINGLE:MSG_EVENTS_MAIN_TYPES_3') };\n        const selectedType = eventTypes[type];\n        return (React.createElement(React.Fragment, null,\n            React.createElement(PageHeading, { detail: true, title: this.props.title },\n                React.createElement(\"div\", { className: \"co-search-group\" },\n                    React.createElement(ResourceListDropdown, { onChange: this.toggleSelected, selected: Array.from(selected), showAll: true, clearSelection: this.clearSelection, className: \"co-search-group__resource\" }),\n                    React.createElement(Dropdown, { className: \"btn-group co-search-group__resource\", items: eventTypes, onChange: v => this.setState({ type: v }), selectedKey: type, title: selectedType }),\n                    React.createElement(TextFilter, { autoFocus: autoFocus, label: t('SINGLE:MSG_EVENTS_MAIN_PLACEHOLDER_1'), onChange: val => this.setState({ textFilter: val || '' }) })),\n                React.createElement(\"div\", { className: \"form-group\" },\n                    React.createElement(ChipGroup, { withToolbar: true, defaultIsOpen: false },\n                        React.createElement(ChipGroupToolbarItem, { key: \"resources-category\", categoryName: t('COMMON:MSG_COMMON_FILTER_1') },\n                            [...selected].map(chip => (React.createElement(Chip, { key: chip, onClick: () => this.toggleSelected(chip) },\n                                React.createElement(ResourceIcon, { kind: chip }),\n                                kindForReference(chip)))),\n                            selected.size > 0 && (React.createElement(React.Fragment, null,\n                                React.createElement(Button, { variant: \"plain\", \"aria-label\": \"Close\", onClick: this.clearSelection },\n                                    React.createElement(CloseIcon, null)))))))),\n            React.createElement(_EventStream, Object.assign({}, this.props, { key: [...selected].join(','), type: type, kind: selected.has('All') || selected.size === 0 ? 'all' : [...selected].join(','), mock: this.props.mock, textFilter: textFilter }))));\n    }\n}\nexport const EventsList = withTranslation()(_EventsList);\nexport const NoEvents = () => (React.createElement(Box, { className: \"co-sysevent-stream__status-box-empty\" },\n    React.createElement(\"div\", { className: \"text-center cos-status-box__detail\" }, \"No events in the past hour\")));\nexport const NoMatchingEvents = ({ allCount }) => {\n    const { t } = useTranslation();\n    return (React.createElement(Box, { className: \"co-sysevent-stream__status-box-empty\" },\n        React.createElement(\"div\", { className: \"cos-status-box__title\" }, t('SINGLE:MSG_EVENTS_MAIN_RESULT_2')),\n        React.createElement(\"div\", { className: \"text-center cos-status-box__detail\" },\n            allCount,\n            allCount >= maxMessages && '+',\n            \" \",\n            t('SINGLE:MSG_EVENTS_MAIN_RESULT_3', { 0: '' }))));\n};\nexport const ErrorLoadingEvents = () => {\n    const { t } = useTranslation();\n    return (React.createElement(Box, null,\n        React.createElement(\"div\", { className: \"cos-status-box__title cos-error-title\" }, t('SINGLE:MSG_EVENTS_MAIN_ERROR_3')),\n        React.createElement(\"div\", { className: \"cos-status-box__detail text-center\" }, t('SINGLE:MSG_EVENTS_MAIN_ERROR_4'))));\n};\nexport const EventStreamPage = withStartGuide((_a) => {\n    var { noProjectsAvailable } = _a, rest = __rest(_a, [\"noProjectsAvailable\"]);\n    const { t } = useTranslation();\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Helmet, null,\n            React.createElement(\"title\", null, t('COMMON:MSG_LNB_MENU_6'))),\n        React.createElement(EventsList, Object.assign({}, rest, { autoFocus: !noProjectsAvailable, mock: noProjectsAvailable, title: t('COMMON:MSG_LNB_MENU_6') }))));\n});\nclass _EventStream extends React.Component {\n    constructor(props) {\n        super(props);\n        this.messages = {};\n        this.state = {\n            active: true,\n            sortedMessages: [],\n            filteredEvents: [],\n            error: null,\n            loading: true,\n            oldestTimestamp: new Date(),\n        };\n        this.toggleStream = this.toggleStream_.bind(this);\n    }\n    wsInit(ns) {\n        const { fieldSelector, cluster } = this.props;\n        const params = { ns, cluster };\n        if (fieldSelector) {\n            params.queryParams = { fieldSelector: encodeURIComponent(fieldSelector) };\n        }\n        this.ws = new WSFactory(`${ns || 'all'}-sysevents`, {\n            host: 'auto',\n            reconnect: true,\n            path: watchURL(EventModel, params),\n            jsonParse: true,\n            bufferFlushInterval: flushInterval,\n            bufferMax: maxMessages,\n        })\n            .onbulkmessage(events => {\n            events.forEach(({ object, type }) => {\n                const uid = object.metadata.uid;\n                switch (type) {\n                    case 'ADDED':\n                    case 'MODIFIED':\n                        if (this.messages[uid] && this.messages[uid].count > object.count) {\n                            // We already have a more recent version of this message stored, so skip this one\n                            return;\n                        }\n                        this.messages[uid] = object;\n                        break;\n                    case 'DELETED':\n                        delete this.messages[uid];\n                        break;\n                    default:\n                        // eslint-disable-next-line no-console\n                        console.error(`UNHANDLED EVENT: ${type}`);\n                        return;\n                }\n            });\n            this.flushMessages();\n        })\n            .onopen(() => {\n            this.setState({ error: false, loading: false });\n        })\n            .onclose(evt => {\n            if (evt && evt.wasClean === false) {\n                this.setState({ error: evt.reason || 'Connection did not close cleanly.' });\n            }\n        })\n            .onerror(() => {\n            this.setState({ error: true });\n        });\n    }\n    componentDidMount() {\n        if (!this.props.mock) {\n            this.wsInit(this.props.namespace);\n        }\n    }\n    componentWillUnmount() {\n        this.ws && this.ws.destroy();\n    }\n    static filterEvents(messages, { kind, type, filter, textFilter }) {\n        // Don't use `fuzzy` because it results in some surprising matches in long event messages.\n        // Instead perform an exact substring match on each word in the text filter.\n        const words = _.uniq(_.toLower(textFilter).match(/\\S+/g)).sort((a, b) => {\n            // Sort the longest words first.\n            return b.length - a.length;\n        });\n        const textMatches = obj => {\n            if (_.isEmpty(words)) {\n                return true;\n            }\n            const name = _.get(obj, 'involvedObject.name', '');\n            const message = _.toLower(obj.message);\n            return _.every(words, word => name.indexOf(word) !== -1 || message.indexOf(word) !== -1);\n        };\n        const f = obj => {\n            if (type && !typeFilter(type, obj)) {\n                return false;\n            }\n            if (kind && !kindFilter(kind, obj)) {\n                return false;\n            }\n            if (filter && !filter.some(flt => flt(obj.involvedObject))) {\n                return false;\n            }\n            if (!textMatches(obj)) {\n                return false;\n            }\n            return true;\n        };\n        return _.filter(messages, f);\n    }\n    static getDerivedStateFromProps(nextProps, prevState) {\n        const { filter, kind, type, textFilter, loading } = prevState;\n        if (_.isEqual(filter, nextProps.filter) && kind === nextProps.kind && type === nextProps.type && textFilter === nextProps.textFilter) {\n            return {};\n        }\n        return {\n            active: !nextProps.mock,\n            loading: !nextProps.mock && loading,\n            // update the filteredEvents\n            filteredEvents: _EventStream.filterEvents(prevState.sortedMessages, nextProps),\n            // we need these for bookkeeping because getDerivedStateFromProps doesn't get prevProps\n            textFilter: nextProps.textFilter,\n            kind: nextProps.kind,\n            type: nextProps.type,\n            filter: nextProps.filter,\n        };\n    }\n    componentDidUpdate(prevProps) {\n        // If the namespace has changed, created a new WebSocket with the new namespace\n        if (prevProps.namespace !== this.props.namespace) {\n            this.ws && this.ws.destroy();\n            this.wsInit(this.props.namespace);\n        }\n    }\n    // Messages can come in extremely fast when the buffer flushes.\n    // Instead of calling setState() on every single message, let onmessage()\n    // update an instance variable, and throttle the actual UI update (see constructor)\n    flushMessages() {\n        const sorted = sortEvents(this.messages);\n        const oldestTimestamp = _.min([this.state.oldestTimestamp, getLastTime(new Date(_.last(sorted)))]);\n        sorted.splice(maxMessages);\n        this.setState({\n            oldestTimestamp,\n            sortedMessages: sorted,\n            filteredEvents: _EventStream.filterEvents(sorted, this.props),\n        });\n        // Shrink this.messages back to maxMessages messages, to stop it growing indefinitely\n        this.messages = _.keyBy(sorted, 'metadata.uid');\n    }\n    toggleStream_() {\n        this.setState({ active: !this.state.active }, () => {\n            if (this.state.active) {\n                this.ws && this.ws.unpause();\n            }\n            else {\n                this.ws && this.ws.pause();\n            }\n        });\n    }\n    render() {\n        const { mock, resourceEventStream, t } = this.props;\n        const { active, error, loading, filteredEvents, sortedMessages } = this.state;\n        const count = filteredEvents.length;\n        const allCount = sortedMessages.length;\n        const noEvents = allCount === 0 && this.ws && this.ws.bufferSize() === 0;\n        const noMatches = allCount > 0 && count === 0;\n        let sysEventStatus, statusBtnTxt;\n        if (noEvents || mock || (noMatches && resourceEventStream)) {\n            sysEventStatus = React.createElement(NoEvents, null);\n        }\n        if (noMatches && !resourceEventStream) {\n            sysEventStatus = React.createElement(NoMatchingEvents, null);\n        }\n        if (error) {\n            statusBtnTxt = React.createElement(\"span\", { className: \"co-sysevent-stream__connection-error\" },\n                \"Error connecting to event stream\",\n                _.isString(error) && `: ${error}`);\n            sysEventStatus = React.createElement(ErrorLoadingEvents, null);\n        }\n        else if (loading) {\n            statusBtnTxt = React.createElement(\"span\", null, t('SINGLE:MSG_EVENTS_MAIN_STATUS_1'));\n            sysEventStatus = React.createElement(Loading, null);\n        }\n        else if (active) {\n            statusBtnTxt = React.createElement(\"span\", null, t('SINGLE:MSG_EVENTS_MAIN_STATUS_1'));\n        }\n        else {\n            statusBtnTxt = React.createElement(\"span\", null, t('SINGLE:MSG_EVENTS_MAIN_STATUS_2'));\n        }\n        const klass = classNames('co-sysevent-stream__timeline', {\n            'co-sysevent-stream__timeline--empty': !allCount || !count,\n        });\n        // const messageCount = count < maxMessages ? `Showing ${pluralize(count, 'event')}` : `Showing ${count} of ${allCount}+ events`;\n        const messageCount = count < maxMessages ? t('SINGLE:MSG_EVENTS_MAIN_COUNT_1', { something: count }) : t('SINGLE:MSG_EVENTS_MAIN_2', { something1: count, something2: allCount });\n        return (React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(\"div\", { className: \"co-sysevent-stream\" },\n                React.createElement(\"div\", { className: \"co-sysevent-stream__status\" },\n                    React.createElement(\"div\", { className: \"co-sysevent-stream__timeline__btn-text\" }, statusBtnTxt),\n                    React.createElement(\"div\", { className: \"co-sysevent-stream__totals text-secondary\" }, messageCount)),\n                React.createElement(\"div\", { className: klass },\n                    React.createElement(TogglePlay, { active: active, onClick: this.toggleStream, className: \"co-sysevent-stream__timeline__btn\" }),\n                    React.createElement(\"div\", { className: \"co-sysevent-stream__timeline__end-message\" },\n                        \"There are no events before \",\n                        React.createElement(Timestamp, { timestamp: this.state.oldestTimestamp }))),\n                count > 0 && React.createElement(EventStreamList, { events: filteredEvents, EventComponent: Inner }),\n                sysEventStatus)));\n    }\n}\nconst EventStream = withTranslation()(_EventStream);\n_EventStream.defaultProps = {\n    type: 'all',\n    kind: 'all',\n    mock: false,\n};\n_EventStream.propTypes = {\n    type: PropTypes.string,\n    filter: PropTypes.array,\n    kind: PropTypes.string.isRequired,\n    mock: PropTypes.bool,\n    namespace: namespaceProptype,\n    showTitle: PropTypes.bool,\n    textFilter: PropTypes.string,\n};\nexport const ResourceEventStream = ({ obj: { kind, metadata: { name, namespace, uid }, }, }) => {\n    const { t } = useTranslation();\n    return React.createElement(_EventStream, { t: t, fieldSelector: `involvedObject.uid=${uid},involvedObject.name=${name},involvedObject.kind=${kind}`, namespace: namespace, cluster: kind === \"ClusterManager\" && name, resourceEventStream: true });\n};\nexport const ResourcesEventStream = ({ filters, namespace }) => {\n    const { t } = useTranslation();\n    return React.createElement(_EventStream, { filter: filters, resourceEventStream: true, namespace: namespace });\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/events.jsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/events.jsx"],"names":[],"mappings":";;;;;;;;;;;AAAA,OAAO,KAAK,CAAC,MAAM,WAAW,CAAC;AAC/B,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,UAAU,MAAM,YAAY,CAAC;AACzC,OAAO,KAAK,SAAS,MAAM,YAAY,CAAC;AACxC,OAAO,EAAE,IAAI,EAAE,MAAM,kBAAkB,CAAC;AACxC,OAAO,EAAE,MAAM,EAAE,MAAM,cAAc,CAAC;AACtC,OAAO,EAAE,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,oBAAoB,EAAE,MAAM,wBAAwB,CAAC;AACvF,OAAO,EAAE,SAAS,EAAE,MAAM,yBAAyB,CAAC;AAEpD,OAAO,EAAE,iBAAiB,EAAE,MAAM,cAAc,CAAC;AACjD,OAAO,EAAE,oBAAoB,EAAE,MAAM,qBAAqB,CAAC;AAC3D,OAAO,EAAE,UAAU,EAAE,MAAM,WAAW,CAAC;AACvC,OAAO,EAAE,oBAAoB,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,YAAY,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AACnH,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;AAC/C,OAAO,EAAE,SAAS,EAAE,MAAM,sBAAsB,CAAC;AACjD,OAAO,EAAE,UAAU,EAAE,SAAS,EAAE,MAAM,WAAW,CAAC;AAClD,OAAO,EAAE,cAAc,EAAE,MAAM,sBAAsB,CAAC;AACtD,OAAO,EAAE,KAAK,EAAE,MAAM,+BAA+B,CAAC;AACtD,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,OAAO,EAAE,WAAW,EAAa,YAAY,EAAE,YAAY,EAAE,qBAAqB,EAAE,SAAS,EAAE,UAAU,EAAE,MAAM,SAAS,CAAC;AACnJ,OAAO,EAAE,eAAe,EAAE,MAAM,sBAAsB,CAAC;AACvD,OAAO,EAAE,cAAc,EAAE,eAAe,EAAE,MAAM,eAAe,CAAC;AAEhE,MAAM,WAAW,GAAG,GAAG,CAAC;AACxB,MAAM,aAAa,GAAG,GAAG,CAAC;AAE1B,yEAAyE;AACzE,oEAAoE;AACpE,MAAM,YAAY,GAAG,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,cAAc,IAAI,KAAK,CAAC,SAAS,CAAC;AACtE,MAAM,CAAC,MAAM,WAAW,GAAG,KAAK,CAAC,EAAE;IACjC,MAAM,gBAAgB,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,gBAAgB,CAAC,CAAC,CAAC,IAAI,CAAC;IAC7E,OAAO,KAAK,CAAC,aAAa,IAAI,gBAAgB,IAAI,KAAK,CAAC,SAAS,CAAC;AACpE,CAAC,CAAC;AACF,MAAM,CAAC,MAAM,UAAU,GAAG,MAAM,CAAC,EAAE;IACjC,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,WAAW,EAAE,YAAY,EAAE,MAAM,CAAC,EAAE,CAAC,MAAM,EAAE,MAAM,EAAE,KAAK,CAAC,CAAC,CAAC;AACzF,CAAC,CAAC;AAEF,yEAAyE;AACzE,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,SAAS,EAAE,KAAK,EAAE,EAAE;IAC7C,IAAI,SAAS,KAAK,KAAK,EAAE;QACvB,OAAO,IAAI,CAAC;KACb;IACD,MAAM,EAAE,IAAI,GAAG,QAAQ,EAAE,GAAG,KAAK,CAAC;IAClC,OAAO,IAAI,CAAC,WAAW,EAAE,KAAK,SAAS,CAAC;AAC1C,CAAC,CAAC;AAEF,MAAM,UAAU,GAAG,CAAC,SAAS,EAAE,EAAE,cAAc,EAAE,EAAE,EAAE;IACnD,IAAI,SAAS,KAAK,KAAK,EAAE;QACvB,OAAO,IAAI,CAAC;KACb;IACD,MAAM,KAAK,GAAG,SAAS,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACnC,OAAO,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;QACtB,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,EAAE;YAC5B,OAAO,cAAc,CAAC,IAAI,KAAK,GAAG,CAAC;SACpC;QACD,iFAAiF;QACjF,yCAAyC;QACzC,MAAM,iBAAiB,GAAG,YAAY,CAAC,cAAc,CAAC,CAAC;QACvD,IAAI,CAAC,iBAAiB,EAAE;YACtB,OAAO,KAAK,CAAC;SACd;QACD,uEAAuE;QACvE,8DAA8D;QAC9D,OAAO,cAAc,CAAC,IAAI,KAAK,gBAAgB,CAAC,GAAG,CAAC,IAAI,oBAAoB,CAAC,iBAAiB,CAAC,KAAK,oBAAoB,CAAC,GAAG,CAAC,CAAC;IAChI,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC,aAAa,CAAC,CAC/C,eAAe,EAAE,CACf,MAAM,KAAM,SAAQ,KAAK,CAAC,aAAa;IACrC,MAAM;QACJ,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACvC,MAAM,EAAE,cAAc,EAAE,GAAG,EAAE,MAAM,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,GAAG,KAAK,CAAC;QACvE,MAAM,UAAU,GAAG,GAAG,MAAM,KAAK,GAAG,CAAC,IAAI,GAAG,CAAC;QAC7C,MAAM,SAAS,GAAG,UAAU,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;QAC/C,MAAM,SAAS,GAAG,YAAY,CAAC,KAAK,CAAC,CAAC;QACtC,MAAM,QAAQ,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC;QACpC,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC;QAClD,OAAO,CACL,6BAAK,SAAS,EAAE,UAAU,CAAC,aAAa,EAAE,EAAE,sBAAsB,EAAE,SAAS,EAAE,CAAC;YAC9E,6BAAK,SAAS,EAAC,uBAAuB;gBACpC,2BAAG,SAAS,EAAC,kBAAkB,EAAC,KAAK,EAAE,UAAU,GAAI;gBACrD,6BAAK,SAAS,EAAC,wBAAwB,GAAG,CACtC;YACN,6BAAK,SAAS,EAAC,kBAAkB,EAAC,IAAI,EAAC,UAAU;gBAC/C,6BAAK,SAAS,EAAC,qBAAqB;oBAClC,6BAAK,SAAS,EAAC,wBAAwB;wBACrC,oBAAC,YAAY,IAAC,SAAS,EAAC,2BAA2B,EAAC,IAAI,EAAE,YAAY,CAAC,GAAG,CAAC,EAAE,SAAS,EAAE,GAAG,CAAC,SAAS,EAAE,IAAI,EAAE,GAAG,CAAC,IAAI,GAAI;wBACxH,GAAG,CAAC,SAAS,IAAI,oBAAC,YAAY,IAAC,SAAS,EAAC,qCAAqC,EAAC,IAAI,EAAC,WAAW,EAAC,IAAI,EAAE,GAAG,CAAC,SAAS,GAAI;wBACvH,QAAQ,IAAI,oBAAC,SAAS,IAAC,SAAS,EAAC,wBAAwB,EAAC,SAAS,EAAE,QAAQ,GAAI,CAC9E;oBACN,6BAAK,SAAS,EAAC,sBAAsB;wBACnC,+BAAO,SAAS,EAAC,qBAAqB;4BACnC,CAAC,CAAC,0BAA0B,EAAE,EAAE,SAAS,EAAE,MAAM,CAAC,SAAS,EAAE,CAAC;4BAC9D,MAAM,CAAC,SAAS,KAAK,SAAS,IAAI;;gCAAW,KAAK,CAAC,KAAK,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,oBAAC,IAAI,IAAC,EAAE,EAAE,qBAAqB,CAAC,SAAS,EAAE,MAAM,CAAC,IAAI,CAAC,IAAG,MAAM,CAAC,IAAI,CAAQ,CAAC,CAAC,CAAC,0CAAG,MAAM,CAAC,IAAI,CAAI,CAAQ,CAC/K;wBACP,KAAK,GAAG,CAAC,IAAI,CACZ,+BAAO,SAAS,EAAC,mCAAmC;4BACjD,KAAK;;4BACL,SAAS,IAAI,CACZ;gCACG,GAAG;;gCACQ,oBAAC,SAAS,IAAC,SAAS,EAAE,SAAS,EAAE,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,GAAI,CAC9E,CACJ,CACK,CACT,CACG,CACF;gBAEN,6BAAK,SAAS,EAAC,sBAAsB,IAAE,OAAO,CAAO,CACjD,CACF,CACP,CAAC;IACJ,CAAC;CACF,CACF,CACF,CAAC;AAEF,MAAM,WAAY,SAAQ,KAAK,CAAC,SAAS;IACvC,YAAY,KAAK;QACf,KAAK,CAAC,KAAK,CAAC,CAAC;QAQf,mBAAc,GAAG,SAAS,CAAC,EAAE;YAC3B,IAAI,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,SAAS,KAAK,KAAK,EAAE;gBACzD,IAAI,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,IAAI,GAAG,CAAC,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC;aACnD;iBAAM;gBACL,MAAM,WAAW,GAAG,IAAI,GAAG,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;gBACjD,WAAW,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBACxF,IAAI,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAC,CAAC;aAC1C;QACH,CAAC,CAAC;QAEF,mBAAc,GAAG,GAAG,EAAE;YACpB,IAAI,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,IAAI,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;QAChD,CAAC,CAAC;QAnBA,IAAI,CAAC,KAAK,GAAG;YACX,IAAI,EAAE,KAAK;YACX,UAAU,EAAE,EAAE;YACd,QAAQ,EAAE,IAAI,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC;SAC3B,CAAC;IACJ,CAAC;IAgBD,MAAM;QACJ,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAClD,MAAM,EAAE,SAAS,GAAG,IAAI,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAE3C,MAAM,UAAU,GAAG,EAAE,GAAG,EAAE,CAAC,CAAC,gCAAgC,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,gCAAgC,CAAC,EAAE,OAAO,EAAE,CAAC,CAAC,gCAAgC,CAAC,EAAE,CAAC;QAC3J,MAAM,YAAY,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;QACtC,OAAO,CACL;YACE,oBAAC,WAAW,IAAC,MAAM,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,KAAK;gBAChD,6BAAK,SAAS,EAAC,iBAAiB;oBAC9B,oBAAC,oBAAoB,IAAC,QAAQ,EAAE,IAAI,CAAC,cAAc,EAAE,QAAQ,EAAE,KAAK,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,OAAO,QAAC,cAAc,EAAE,IAAI,CAAC,cAAc,EAAE,SAAS,EAAC,2BAA2B,GAAG;oBAC1K,oBAAC,QAAQ,IAAC,SAAS,EAAC,qCAAqC,EAAC,KAAK,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,KAAK,EAAE,YAAY,GAAI;oBAClK,oBAAC,UAAU,IAAC,SAAS,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC,sCAAsC,CAAC,EAAE,QAAQ,EAAE,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,UAAU,EAAE,GAAG,IAAI,EAAE,EAAE,CAAC,GAAI,CAC7I;gBACN,6BAAK,SAAS,EAAC,YAAY;oBACzB,oBAAC,SAAS,IAAC,WAAW,QAAC,aAAa,EAAE,KAAK;wBACzC,oBAAC,oBAAoB,IAAC,GAAG,EAAC,oBAAoB,EAAC,YAAY,EAAE,CAAC,CAAC,4BAA4B,CAAC;4BACzF,CAAC,GAAG,QAAQ,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CACzB,oBAAC,IAAI,IAAC,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC;gCACvD,oBAAC,YAAY,IAAC,IAAI,EAAE,IAAI,GAAI;gCAC3B,gBAAgB,CAAC,IAAI,CAAC,CAClB,CACR,CAAC;4BACD,QAAQ,CAAC,IAAI,GAAG,CAAC,IAAI,CACpB;gCACE,oBAAC,MAAM,IAAC,OAAO,EAAC,OAAO,gBAAY,OAAO,EAAC,OAAO,EAAE,IAAI,CAAC,cAAc;oCACrE,oBAAC,SAAS,OAAG,CACN,CACR,CACJ,CACoB,CACb,CACR,CACM;YACd,oBAAC,YAAY,oBAAK,IAAI,CAAC,KAAK,IAAE,GAAG,EAAE,CAAC,GAAG,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,QAAQ,CAAC,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,GAAG,QAAQ,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE,UAAU,EAAE,UAAU,IAAI,CAC5M,CACJ,CAAC;IACJ,CAAC;CACF;AAED,MAAM,CAAC,MAAM,UAAU,GAAG,eAAe,EAAE,CAAC,WAAW,CAAC,CAAC;AAEzD,MAAM,CAAC,MAAM,QAAQ,GAAG,GAAG,EAAE,CAAC,CAC5B,oBAAC,GAAG,IAAC,SAAS,EAAC,sCAAsC;IACnD,6BAAK,SAAS,EAAC,oCAAoC,iCAAiC,CAChF,CACP,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE;IAC/C,MAAM,EAAE,CAAC,EAAE,GAAG,cAAc,EAAE,CAAC;IAC/B,OAAO,CACL,oBAAC,GAAG,IAAC,SAAS,EAAC,sCAAsC;QACnD,6BAAK,SAAS,EAAC,uBAAuB,IAAE,CAAC,CAAC,iCAAiC,CAAC,CAAO;QACnF,6BAAK,SAAS,EAAC,oCAAoC;YAChD,QAAQ;YACR,QAAQ,IAAI,WAAW,IAAI,GAAG;;YAAG,CAAC,CAAC,iCAAiC,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC,CAC7E,CACF,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,GAAG,EAAE;IACrC,MAAM,EAAE,CAAC,EAAE,GAAG,cAAc,EAAE,CAAC;IAC/B,OAAO,CACL,oBAAC,GAAG;QACF,6BAAK,SAAS,EAAC,uCAAuC,IAAE,CAAC,CAAC,gCAAgC,CAAC,CAAO;QAClG,6BAAK,SAAS,EAAC,oCAAoC,IAAE,CAAC,CAAC,gCAAgC,CAAC,CAAO,CAC3F,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAG,cAAc,CAAC,CAAC,EAAgC,EAAE,EAAE;QAApC,EAAE,mBAAmB,OAAW,EAAT,0CAAO;IAC3E,MAAM,EAAE,CAAC,EAAE,GAAG,cAAc,EAAE,CAAC;IAC/B,OAAO,CACL;QACE,oBAAC,MAAM;YACL,mCAAQ,CAAC,CAAC,uBAAuB,CAAC,CAAS,CACpC;QACT,oBAAC,UAAU,oBAAK,IAAI,IAAE,SAAS,EAAE,CAAC,mBAAmB,EAAE,IAAI,EAAE,mBAAmB,EAAE,KAAK,EAAE,CAAC,CAAC,uBAAuB,CAAC,IAAI,CACtH,CACJ,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,MAAM,YAAa,SAAQ,KAAK,CAAC,SAAS;IACxC,YAAY,KAAK;QACf,KAAK,CAAC,KAAK,CAAC,CAAC;QACb,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;QACnB,IAAI,CAAC,KAAK,GAAG;YACX,MAAM,EAAE,IAAI;YACZ,cAAc,EAAE,EAAE;YAClB,cAAc,EAAE,EAAE;YAClB,KAAK,EAAE,IAAI;YACX,OAAO,EAAE,IAAI;YACb,eAAe,EAAE,IAAI,IAAI,EAAE;SAC5B,CAAC;QACF,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACpD,CAAC;IAED,MAAM,CAAC,EAAE;QACP,MAAM,EAAE,aAAa,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAC9C,MAAM,MAAM,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,CAAC;QAC/B,IAAI,aAAa,EAAE;YACjB,MAAM,CAAC,WAAW,GAAG,EAAE,aAAa,EAAE,kBAAkB,CAAC,aAAa,CAAC,EAAE,CAAC;SAC3E;QAED,IAAI,CAAC,EAAE,GAAG,IAAI,SAAS,CAAC,GAAG,EAAE,IAAI,KAAK,YAAY,EAAE;YAClD,IAAI,EAAE,MAAM;YACZ,SAAS,EAAE,IAAI;YACf,IAAI,EAAE,QAAQ,CAAC,UAAU,EAAE,MAAM,CAAC;YAClC,SAAS,EAAE,IAAI;YACf,mBAAmB,EAAE,aAAa;YAClC,SAAS,EAAE,WAAW;SACvB,CAAC;aACC,aAAa,CAAC,MAAM,CAAC,EAAE;YACtB,MAAM,CAAC,OAAO,CAAC,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE;gBAClC,MAAM,GAAG,GAAG,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC;gBAEhC,QAAQ,IAAI,EAAE;oBACZ,KAAK,OAAO,CAAC;oBACb,KAAK,UAAU;wBACb,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,KAAK,GAAG,MAAM,CAAC,KAAK,EAAE;4BACjE,iFAAiF;4BACjF,OAAO;yBACR;wBACD,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,MAAM,CAAC;wBAC5B,MAAM;oBACR,KAAK,SAAS;wBACZ,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;wBAC1B,MAAM;oBACR;wBACE,sCAAsC;wBACtC,OAAO,CAAC,KAAK,CAAC,oBAAoB,IAAI,EAAE,CAAC,CAAC;wBAC1C,OAAO;iBACV;YACH,CAAC,CAAC,CAAC;YACH,IAAI,CAAC,aAAa,EAAE,CAAC;QACvB,CAAC,CAAC;aACD,MAAM,CAAC,GAAG,EAAE;YACX,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;QAClD,CAAC,CAAC;aACD,OAAO,CAAC,GAAG,CAAC,EAAE;YACb,IAAI,GAAG,IAAI,GAAG,CAAC,QAAQ,KAAK,KAAK,EAAE;gBACjC,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,MAAM,IAAI,mCAAmC,EAAE,CAAC,CAAC;aAC7E;QACH,CAAC,CAAC;aACD,OAAO,CAAC,GAAG,EAAE;YACZ,IAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC;IACP,CAAC;IAED,iBAAiB;QACf,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,EAAE;YACpB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;SACnC;IACH,CAAC;IAED,oBAAoB;QAClB,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;IAC/B,CAAC;IAED,MAAM,CAAC,YAAY,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,UAAU,EAAE;QAC9D,0FAA0F;QAC1F,4EAA4E;QAC5E,MAAM,KAAK,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;YACtE,gCAAgC;YAChC,OAAO,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC;QAC7B,CAAC,CAAC,CAAC;QAEH,MAAM,WAAW,GAAG,GAAG,CAAC,EAAE;YACxB,IAAI,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;gBACpB,OAAO,IAAI,CAAC;aACb;YACD,MAAM,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,qBAAqB,EAAE,EAAE,CAAC,CAAC;YACnD,MAAM,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC;YACvC,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC3F,CAAC,CAAC;QAEF,MAAM,CAAC,GAAG,GAAG,CAAC,EAAE;YACd,IAAI,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE;gBAClC,OAAO,KAAK,CAAC;aACd;YACD,IAAI,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE;gBAClC,OAAO,KAAK,CAAC;aACd;YACD,IAAI,MAAM,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,EAAE;gBAC1D,OAAO,KAAK,CAAC;aACd;YACD,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAAE;gBACrB,OAAO,KAAK,CAAC;aACd;YACD,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;QAEF,OAAO,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,CAAC,CAAC;IAC/B,CAAC;IAED,MAAM,CAAC,wBAAwB,CAAC,SAAS,EAAE,SAAS;QAClD,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,GAAG,SAAS,CAAC;QAE9D,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,SAAS,CAAC,MAAM,CAAC,IAAI,IAAI,KAAK,SAAS,CAAC,IAAI,IAAI,IAAI,KAAK,SAAS,CAAC,IAAI,IAAI,UAAU,KAAK,SAAS,CAAC,UAAU,EAAE;YACpI,OAAO,EAAE,CAAC;SACX;QAED,OAAO;YACL,MAAM,EAAE,CAAC,SAAS,CAAC,IAAI;YACvB,OAAO,EAAE,CAAC,SAAS,CAAC,IAAI,IAAI,OAAO;YACnC,4BAA4B;YAC5B,cAAc,EAAE,YAAY,CAAC,YAAY,CAAC,SAAS,CAAC,cAAc,EAAE,SAAS,CAAC;YAC9E,uFAAuF;YACvF,UAAU,EAAE,SAAS,CAAC,UAAU;YAChC,IAAI,EAAE,SAAS,CAAC,IAAI;YACpB,IAAI,EAAE,SAAS,CAAC,IAAI;YACpB,MAAM,EAAE,SAAS,CAAC,MAAM;SACzB,CAAC;IACJ,CAAC;IAED,kBAAkB,CAAC,SAAS;QAC1B,+EAA+E;QAC/E,IAAI,SAAS,CAAC,SAAS,KAAK,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE;YAChD,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;YAC7B,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;SACnC;IACH,CAAC;IAED,+DAA+D;IAC/D,yEAAyE;IACzE,mFAAmF;IACnF,aAAa;QACX,MAAM,MAAM,GAAG,UAAU,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;QACzC,MAAM,eAAe,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,EAAE,WAAW,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACnG,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;QAC3B,IAAI,CAAC,QAAQ,CAAC;YACZ,eAAe;YACf,cAAc,EAAE,MAAM;YACtB,cAAc,EAAE,YAAY,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC;SAC9D,CAAC,CAAC;QAEH,qFAAqF;QACrF,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,KAAK,CAAC,MAAM,EAAE,cAAc,CAAC,CAAC;IAClD,CAAC;IAED,aAAa;QACX,IAAI,CAAC,QAAQ,CAAC,EAAE,MAAM,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,EAAE,GAAG,EAAE;YACjD,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;gBACrB,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,EAAE,CAAC,OAAO,EAAE,CAAC;aAC9B;iBAAM;gBACL,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,EAAE,CAAC,KAAK,EAAE,CAAC;aAC5B;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,MAAM;QACJ,MAAM,EAAE,IAAI,EAAE,mBAAmB,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACpD,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,OAAO,EAAE,cAAc,EAAE,cAAc,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAC9E,MAAM,KAAK,GAAG,cAAc,CAAC,MAAM,CAAC;QACpC,MAAM,QAAQ,GAAG,cAAc,CAAC,MAAM,CAAC;QACvC,MAAM,QAAQ,GAAG,QAAQ,KAAK,CAAC,IAAI,IAAI,CAAC,EAAE,IAAI,IAAI,CAAC,EAAE,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;QACzE,MAAM,SAAS,GAAG,QAAQ,GAAG,CAAC,IAAI,KAAK,KAAK,CAAC,CAAC;QAC9C,IAAI,cAAc,EAAE,YAAY,CAAC;QAEjC,IAAI,QAAQ,IAAI,IAAI,IAAI,CAAC,SAAS,IAAI,mBAAmB,CAAC,EAAE;YAC1D,cAAc,GAAG,oBAAC,QAAQ,OAAG,CAAC;SAC/B;QACD,IAAI,SAAS,IAAI,CAAC,mBAAmB,EAAE;YACrC,cAAc,GAAG,oBAAC,gBAAgB,OAAG,CAAC;SACvC;QAED,IAAI,KAAK,EAAE;YACT,YAAY,GAAG,8BAAM,SAAS,EAAC,sCAAsC;;gBAAkC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,KAAK,KAAK,EAAE,CAAQ,CAAC;YACjJ,cAAc,GAAG,oBAAC,kBAAkB,OAAG,CAAC;SACzC;aAAM,IAAI,OAAO,EAAE;YAClB,YAAY,GAAG,kCAAO,CAAC,CAAC,iCAAiC,CAAC,CAAQ,CAAC;YACnE,cAAc,GAAG,oBAAC,OAAO,OAAG,CAAC;SAC9B;aAAM,IAAI,MAAM,EAAE;YACjB,YAAY,GAAG,kCAAO,CAAC,CAAC,iCAAiC,CAAC,CAAQ,CAAC;SACpE;aAAM;YACL,YAAY,GAAG,kCAAO,CAAC,CAAC,iCAAiC,CAAC,CAAQ,CAAC;SACpE;QAED,MAAM,KAAK,GAAG,UAAU,CAAC,8BAA8B,EAAE;YACvD,qCAAqC,EAAE,CAAC,QAAQ,IAAI,CAAC,KAAK;SAC3D,CAAC,CAAC;QACH,iIAAiI;QACjI,MAAM,YAAY,GAAG,KAAK,GAAG,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,gCAAgC,EAAE,EAAE,SAAS,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,0BAA0B,EAAE,EAAE,UAAU,EAAE,KAAK,EAAE,UAAU,EAAE,QAAQ,EAAE,CAAC,CAAC;QAElL,OAAO,CACL,6BAAK,SAAS,EAAC,iBAAiB;YAC9B,6BAAK,SAAS,EAAC,oBAAoB;gBACjC,6BAAK,SAAS,EAAC,4BAA4B;oBACzC,6BAAK,SAAS,EAAC,wCAAwC,IAAE,YAAY,CAAO;oBAC5E,6BAAK,SAAS,EAAC,2CAA2C,IAAE,YAAY,CAAO,CAC3E;gBAEN,6BAAK,SAAS,EAAE,KAAK;oBACnB,oBAAC,UAAU,IAAC,MAAM,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,CAAC,YAAY,EAAE,SAAS,EAAC,mCAAmC,GAAG;oBACxG,6BAAK,SAAS,EAAC,2CAA2C;;wBAC7B,oBAAC,SAAS,IAAC,SAAS,EAAE,IAAI,CAAC,KAAK,CAAC,eAAe,GAAI,CAC3E,CACF;gBACL,KAAK,GAAG,CAAC,IAAI,oBAAC,eAAe,IAAC,MAAM,EAAE,cAAc,EAAE,cAAc,EAAE,KAAK,GAAI;gBAC/E,cAAc,CACX,CACF,CACP,CAAC;IACJ,CAAC;CACF;AAED,MAAM,WAAW,GAAG,eAAe,EAAE,CAAC,YAAY,CAAC,CAAC;AAEpD,YAAY,CAAC,YAAY,GAAG;IAC1B,IAAI,EAAE,KAAK;IACX,IAAI,EAAE,KAAK;IACX,IAAI,EAAE,KAAK;CACZ,CAAC;AAEF,YAAY,CAAC,SAAS,GAAG;IACvB,IAAI,EAAE,SAAS,CAAC,MAAM;IACtB,MAAM,EAAE,SAAS,CAAC,KAAK;IACvB,IAAI,EAAE,SAAS,CAAC,MAAM,CAAC,UAAU;IACjC,IAAI,EAAE,SAAS,CAAC,IAAI;IACpB,SAAS,EAAE,iBAAiB;IAC5B,SAAS,EAAE,SAAS,CAAC,IAAI;IACzB,UAAU,EAAE,SAAS,CAAC,MAAM;CAC7B,CAAC;AAEF,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,EAClC,GAAG,EAAE,EACH,IAAI,EACJ,QAAQ,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,GAAG,EAAE,GACnC,GACF,EAAE,EAAE;IACH,MAAM,EAAE,CAAC,EAAE,GAAG,cAAc,EAAE,CAAC;IAC/B,OAAO,oBAAC,YAAY,IAAC,CAAC,EAAE,CAAC,EAAE,aAAa,EAAE,sBAAsB,GAAG,wBAAwB,IAAI,wBAAwB,IAAI,EAAE,EAAE,SAAS,EAAE,SAAS,EAAE,OAAO,EAAE,IAAI,KAAK,gBAAgB,IAAI,IAAI,EAAE,mBAAmB,SAAG,CAAC;AAC1N,CAAC,CAAC;AACF,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,EAAE,OAAO,EAAE,SAAS,EAAE,EAAE,EAAE;IAC7D,MAAM,EAAE,CAAC,EAAE,GAAG,cAAc,EAAE,CAAC;IAC/B,OAAO,oBAAC,YAAY,IAAC,MAAM,EAAE,OAAO,EAAE,mBAAmB,QAAC,SAAS,EAAE,SAAS,GAAI,CAAC;AACrF,CAAC,CAAC","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport * as PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { Button, Chip, ChipGroup, ChipGroupToolbarItem } from '@patternfly/react-core';\nimport { CloseIcon } from '@patternfly/react-icons';\n\nimport { namespaceProptype } from '../propTypes';\nimport { ResourceListDropdown } from './resource-dropdown';\nimport { TextFilter } from './factory';\nimport { apiGroupForReference, isGroupVersionKind, kindForReference, referenceFor, watchURL } from '../module/k8s';\nimport { withStartGuide } from './start-guide';\nimport { WSFactory } from '../module/ws-factory';\nimport { EventModel, NodeModel } from '../models';\nimport { connectToFlags } from '../reducers/features';\nimport { FLAGS } from '@console/shared/src/constants';\nimport { Box, Dropdown, Loading, PageHeading, pluralize, ResourceIcon, ResourceLink, resourcePathFromModel, Timestamp, TogglePlay } from './utils';\nimport { EventStreamList } from './utils/event-stream';\nimport { useTranslation, withTranslation } from 'react-i18next';\n\nconst maxMessages = 500;\nconst flushInterval = 500;\n\n// We have to check different properties depending on whether events were\n// created with the core/v1 events API or the new events.k8s.io API.\nconst getFirstTime = event => event.firstTimestamp || event.eventTime;\nexport const getLastTime = event => {\n  const lastObservedTime = event.series ? event.series.lastObservedTime : null;\n  return event.lastTimestamp || lastObservedTime || event.eventTime;\n};\nexport const sortEvents = events => {\n  return _.orderBy(events, [getLastTime, getFirstTime, 'name'], ['desc', 'desc', 'asc']);\n};\n\n// Predicate function to filter by event \"type\" (normal, warning, or all)\nexport const typeFilter = (eventType, event) => {\n  if (eventType === 'all') {\n    return true;\n  }\n  const { type = 'normal' } = event;\n  return type.toLowerCase() === eventType;\n};\n\nconst kindFilter = (reference, { involvedObject }) => {\n  if (reference === 'all') {\n    return true;\n  }\n  const kinds = reference.split(',');\n  return kinds.some(ref => {\n    if (!isGroupVersionKind(ref)) {\n      return involvedObject.kind === ref;\n    }\n    // Use `referenceFor` to resolve `apiVersion` when missing from `involvedObject`.\n    // We need `apiVersion` to get the group.\n    const involvedObjectRef = referenceFor(involvedObject);\n    if (!involvedObjectRef) {\n      return false;\n    }\n    // Only check the group and kind, not the API version, so that we catch\n    // events for the same resource under a different API version.\n    return involvedObject.kind === kindForReference(ref) && apiGroupForReference(involvedObjectRef) === apiGroupForReference(ref);\n  });\n};\n\nconst Inner = connectToFlags(FLAGS.CAN_LIST_NODE)(\n  withTranslation()(\n    class Inner extends React.PureComponent {\n      render() {\n        const { event, flags, t } = this.props;\n        const { involvedObject: obj, source, message, reason, series } = event;\n        const tooltipMsg = `${reason} (${obj.kind})`;\n        const isWarning = typeFilter('warning', event);\n        const firstTime = getFirstTime(event);\n        const lastTime = getLastTime(event);\n        const count = series ? series.count : event.count;\n        return (\n          <div className={classNames('co-sysevent', { 'co-sysevent--warning': isWarning })}>\n            <div className=\"co-sysevent__icon-box\">\n              <i className=\"co-sysevent-icon\" title={tooltipMsg} />\n              <div className=\"co-sysevent__icon-line\" />\n            </div>\n            <div className=\"co-sysevent__box\" role=\"gridcell\">\n              <div className=\"co-sysevent__header\">\n                <div className=\"co-sysevent__subheader\">\n                  <ResourceLink className=\"co-sysevent__resourcelink\" kind={referenceFor(obj)} namespace={obj.namespace} name={obj.name} />\n                  {obj.namespace && <ResourceLink className=\"co-sysevent__resourcelink hidden-xs\" kind=\"Namespace\" name={obj.namespace} />}\n                  {lastTime && <Timestamp className=\"co-sysevent__timestamp\" timestamp={lastTime} />}\n                </div>\n                <div className=\"co-sysevent__details\">\n                  <small className=\"co-sysevent__source\">\n                    {t('SINGLE:MSG_EVENTS_MAIN_1', { something: source.component })}\n                    {source.component === 'kubelet' && <span> on {flags[FLAGS.CAN_LIST_NODE] ? <Link to={resourcePathFromModel(NodeModel, source.host)}>{source.host}</Link> : <>{source.host}</>}</span>}\n                  </small>\n                  {count > 1 && (\n                    <small className=\"co-sysevent__count text-secondary\">\n                      {count} times\n                      {firstTime && (\n                        <>\n                          {' '}\n                          in the last <Timestamp timestamp={firstTime} simple={true} omitSuffix={true} />\n                        </>\n                      )}\n                    </small>\n                  )}\n                </div>\n              </div>\n\n              <div className=\"co-sysevent__message\">{message}</div>\n            </div>\n          </div>\n        );\n      }\n    },\n  ),\n);\n\nclass _EventsList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      type: 'all',\n      textFilter: '',\n      selected: new Set(['All']),\n    };\n  }\n\n  toggleSelected = selection => {\n    if (this.state.selected.has('All') || selection === 'All') {\n      this.setState({ selected: new Set([selection]) });\n    } else {\n      const updateItems = new Set(this.state.selected);\n      updateItems.has(selection) ? updateItems.delete(selection) : updateItems.add(selection);\n      this.setState({ selected: updateItems });\n    }\n  };\n\n  clearSelection = () => {\n    this.setState({ selected: new Set(['All']) });\n  };\n\n  render() {\n    const { type, selected, textFilter } = this.state;\n    const { autoFocus = true, t } = this.props;\n\n    const eventTypes = { all: t('SINGLE:MSG_EVENTS_MAIN_TYPES_1'), normal: t('SINGLE:MSG_EVENTS_MAIN_TYPES_2'), warning: t('SINGLE:MSG_EVENTS_MAIN_TYPES_3') };\n    const selectedType = eventTypes[type];\n    return (\n      <>\n        <PageHeading detail={true} title={this.props.title}>\n          <div className=\"co-search-group\">\n            <ResourceListDropdown onChange={this.toggleSelected} selected={Array.from(selected)} showAll clearSelection={this.clearSelection} className=\"co-search-group__resource\" />\n            <Dropdown className=\"btn-group co-search-group__resource\" items={eventTypes} onChange={v => this.setState({ type: v })} selectedKey={type} title={selectedType} />\n            <TextFilter autoFocus={autoFocus} label={t('SINGLE:MSG_EVENTS_MAIN_PLACEHOLDER_1')} onChange={val => this.setState({ textFilter: val || '' })} />\n          </div>\n          <div className=\"form-group\">\n            <ChipGroup withToolbar defaultIsOpen={false}>\n              <ChipGroupToolbarItem key=\"resources-category\" categoryName={t('COMMON:MSG_COMMON_FILTER_1')}>\n                {[...selected].map(chip => (\n                  <Chip key={chip} onClick={() => this.toggleSelected(chip)}>\n                    <ResourceIcon kind={chip} />\n                    {kindForReference(chip)}\n                  </Chip>\n                ))}\n                {selected.size > 0 && (\n                  <>\n                    <Button variant=\"plain\" aria-label=\"Close\" onClick={this.clearSelection}>\n                      <CloseIcon />\n                    </Button>\n                  </>\n                )}\n              </ChipGroupToolbarItem>\n            </ChipGroup>\n          </div>\n        </PageHeading>\n        <_EventStream {...this.props} key={[...selected].join(',')} type={type} kind={selected.has('All') || selected.size === 0 ? 'all' : [...selected].join(',')} mock={this.props.mock} textFilter={textFilter} />\n      </>\n    );\n  }\n}\n\nexport const EventsList = withTranslation()(_EventsList);\n\nexport const NoEvents = () => (\n  <Box className=\"co-sysevent-stream__status-box-empty\">\n    <div className=\"text-center cos-status-box__detail\">No events in the past hour</div>\n  </Box>\n);\n\nexport const NoMatchingEvents = ({ allCount }) => {\n  const { t } = useTranslation();\n  return (\n    <Box className=\"co-sysevent-stream__status-box-empty\">\n      <div className=\"cos-status-box__title\">{t('SINGLE:MSG_EVENTS_MAIN_RESULT_2')}</div>\n      <div className=\"text-center cos-status-box__detail\">\n        {allCount}\n        {allCount >= maxMessages && '+'} {t('SINGLE:MSG_EVENTS_MAIN_RESULT_3', { 0: '' })}\n      </div>\n    </Box>\n  );\n};\n\nexport const ErrorLoadingEvents = () => {\n  const { t } = useTranslation();\n  return (\n    <Box>\n      <div className=\"cos-status-box__title cos-error-title\">{t('SINGLE:MSG_EVENTS_MAIN_ERROR_3')}</div>\n      <div className=\"cos-status-box__detail text-center\">{t('SINGLE:MSG_EVENTS_MAIN_ERROR_4')}</div>\n    </Box>\n  );\n};\n\nexport const EventStreamPage = withStartGuide(({ noProjectsAvailable, ...rest }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <Helmet>\n        <title>{t('COMMON:MSG_LNB_MENU_6')}</title>\n      </Helmet>\n      <EventsList {...rest} autoFocus={!noProjectsAvailable} mock={noProjectsAvailable} title={t('COMMON:MSG_LNB_MENU_6')} />\n    </>\n  );\n});\n\nclass _EventStream extends React.Component {\n  constructor(props) {\n    super(props);\n    this.messages = {};\n    this.state = {\n      active: true,\n      sortedMessages: [],\n      filteredEvents: [],\n      error: null,\n      loading: true,\n      oldestTimestamp: new Date(),\n    };\n    this.toggleStream = this.toggleStream_.bind(this);\n  }\n\n  wsInit(ns) {\n    const { fieldSelector, cluster } = this.props;\n    const params = { ns, cluster };\n    if (fieldSelector) {\n      params.queryParams = { fieldSelector: encodeURIComponent(fieldSelector) };\n    }\n\n    this.ws = new WSFactory(`${ns || 'all'}-sysevents`, {\n      host: 'auto',\n      reconnect: true,\n      path: watchURL(EventModel, params),\n      jsonParse: true,\n      bufferFlushInterval: flushInterval,\n      bufferMax: maxMessages,\n    })\n      .onbulkmessage(events => {\n        events.forEach(({ object, type }) => {\n          const uid = object.metadata.uid;\n\n          switch (type) {\n            case 'ADDED':\n            case 'MODIFIED':\n              if (this.messages[uid] && this.messages[uid].count > object.count) {\n                // We already have a more recent version of this message stored, so skip this one\n                return;\n              }\n              this.messages[uid] = object;\n              break;\n            case 'DELETED':\n              delete this.messages[uid];\n              break;\n            default:\n              // eslint-disable-next-line no-console\n              console.error(`UNHANDLED EVENT: ${type}`);\n              return;\n          }\n        });\n        this.flushMessages();\n      })\n      .onopen(() => {\n        this.setState({ error: false, loading: false });\n      })\n      .onclose(evt => {\n        if (evt && evt.wasClean === false) {\n          this.setState({ error: evt.reason || 'Connection did not close cleanly.' });\n        }\n      })\n      .onerror(() => {\n        this.setState({ error: true });\n      });\n  }\n\n  componentDidMount() {\n    if (!this.props.mock) {\n      this.wsInit(this.props.namespace);\n    }\n  }\n\n  componentWillUnmount() {\n    this.ws && this.ws.destroy();\n  }\n\n  static filterEvents(messages, { kind, type, filter, textFilter }) {\n    // Don't use `fuzzy` because it results in some surprising matches in long event messages.\n    // Instead perform an exact substring match on each word in the text filter.\n    const words = _.uniq(_.toLower(textFilter).match(/\\S+/g)).sort((a, b) => {\n      // Sort the longest words first.\n      return b.length - a.length;\n    });\n\n    const textMatches = obj => {\n      if (_.isEmpty(words)) {\n        return true;\n      }\n      const name = _.get(obj, 'involvedObject.name', '');\n      const message = _.toLower(obj.message);\n      return _.every(words, word => name.indexOf(word) !== -1 || message.indexOf(word) !== -1);\n    };\n\n    const f = obj => {\n      if (type && !typeFilter(type, obj)) {\n        return false;\n      }\n      if (kind && !kindFilter(kind, obj)) {\n        return false;\n      }\n      if (filter && !filter.some(flt => flt(obj.involvedObject))) {\n        return false;\n      }\n      if (!textMatches(obj)) {\n        return false;\n      }\n      return true;\n    };\n\n    return _.filter(messages, f);\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const { filter, kind, type, textFilter, loading } = prevState;\n\n    if (_.isEqual(filter, nextProps.filter) && kind === nextProps.kind && type === nextProps.type && textFilter === nextProps.textFilter) {\n      return {};\n    }\n\n    return {\n      active: !nextProps.mock,\n      loading: !nextProps.mock && loading,\n      // update the filteredEvents\n      filteredEvents: _EventStream.filterEvents(prevState.sortedMessages, nextProps),\n      // we need these for bookkeeping because getDerivedStateFromProps doesn't get prevProps\n      textFilter: nextProps.textFilter,\n      kind: nextProps.kind,\n      type: nextProps.type,\n      filter: nextProps.filter,\n    };\n  }\n\n  componentDidUpdate(prevProps) {\n    // If the namespace has changed, created a new WebSocket with the new namespace\n    if (prevProps.namespace !== this.props.namespace) {\n      this.ws && this.ws.destroy();\n      this.wsInit(this.props.namespace);\n    }\n  }\n\n  // Messages can come in extremely fast when the buffer flushes.\n  // Instead of calling setState() on every single message, let onmessage()\n  // update an instance variable, and throttle the actual UI update (see constructor)\n  flushMessages() {\n    const sorted = sortEvents(this.messages);\n    const oldestTimestamp = _.min([this.state.oldestTimestamp, getLastTime(new Date(_.last(sorted)))]);\n    sorted.splice(maxMessages);\n    this.setState({\n      oldestTimestamp,\n      sortedMessages: sorted,\n      filteredEvents: _EventStream.filterEvents(sorted, this.props),\n    });\n\n    // Shrink this.messages back to maxMessages messages, to stop it growing indefinitely\n    this.messages = _.keyBy(sorted, 'metadata.uid');\n  }\n\n  toggleStream_() {\n    this.setState({ active: !this.state.active }, () => {\n      if (this.state.active) {\n        this.ws && this.ws.unpause();\n      } else {\n        this.ws && this.ws.pause();\n      }\n    });\n  }\n\n  render() {\n    const { mock, resourceEventStream, t } = this.props;\n    const { active, error, loading, filteredEvents, sortedMessages } = this.state;\n    const count = filteredEvents.length;\n    const allCount = sortedMessages.length;\n    const noEvents = allCount === 0 && this.ws && this.ws.bufferSize() === 0;\n    const noMatches = allCount > 0 && count === 0;\n    let sysEventStatus, statusBtnTxt;\n\n    if (noEvents || mock || (noMatches && resourceEventStream)) {\n      sysEventStatus = <NoEvents />;\n    }\n    if (noMatches && !resourceEventStream) {\n      sysEventStatus = <NoMatchingEvents />;\n    }\n\n    if (error) {\n      statusBtnTxt = <span className=\"co-sysevent-stream__connection-error\">Error connecting to event stream{_.isString(error) && `: ${error}`}</span>;\n      sysEventStatus = <ErrorLoadingEvents />;\n    } else if (loading) {\n      statusBtnTxt = <span>{t('SINGLE:MSG_EVENTS_MAIN_STATUS_1')}</span>;\n      sysEventStatus = <Loading />;\n    } else if (active) {\n      statusBtnTxt = <span>{t('SINGLE:MSG_EVENTS_MAIN_STATUS_1')}</span>;\n    } else {\n      statusBtnTxt = <span>{t('SINGLE:MSG_EVENTS_MAIN_STATUS_2')}</span>;\n    }\n\n    const klass = classNames('co-sysevent-stream__timeline', {\n      'co-sysevent-stream__timeline--empty': !allCount || !count,\n    });\n    // const messageCount = count < maxMessages ? `Showing ${pluralize(count, 'event')}` : `Showing ${count} of ${allCount}+ events`;\n    const messageCount = count < maxMessages ? t('SINGLE:MSG_EVENTS_MAIN_COUNT_1', { something: count }) : t('SINGLE:MSG_EVENTS_MAIN_2', { something1: count, something2: allCount });\n\n    return (\n      <div className=\"co-m-pane__body\">\n        <div className=\"co-sysevent-stream\">\n          <div className=\"co-sysevent-stream__status\">\n            <div className=\"co-sysevent-stream__timeline__btn-text\">{statusBtnTxt}</div>\n            <div className=\"co-sysevent-stream__totals text-secondary\">{messageCount}</div>\n          </div>\n\n          <div className={klass}>\n            <TogglePlay active={active} onClick={this.toggleStream} className=\"co-sysevent-stream__timeline__btn\" />\n            <div className=\"co-sysevent-stream__timeline__end-message\">\n              There are no events before <Timestamp timestamp={this.state.oldestTimestamp} />\n            </div>\n          </div>\n          {count > 0 && <EventStreamList events={filteredEvents} EventComponent={Inner} />}\n          {sysEventStatus}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst EventStream = withTranslation()(_EventStream);\n\n_EventStream.defaultProps = {\n  type: 'all',\n  kind: 'all',\n  mock: false,\n};\n\n_EventStream.propTypes = {\n  type: PropTypes.string,\n  filter: PropTypes.array,\n  kind: PropTypes.string.isRequired,\n  mock: PropTypes.bool,\n  namespace: namespaceProptype,\n  showTitle: PropTypes.bool,\n  textFilter: PropTypes.string,\n};\n\nexport const ResourceEventStream = ({\n  obj: {\n    kind,\n    metadata: { name, namespace, uid },\n  },\n}) => {\n  const { t } = useTranslation();\n  return <_EventStream t={t} fieldSelector={`involvedObject.uid=${uid},involvedObject.name=${name},involvedObject.kind=${kind}`} namespace={namespace} cluster={kind === \"ClusterManager\" && name} resourceEventStream />;\n};\nexport const ResourcesEventStream = ({ filters, namespace }) => {\n  const { t } = useTranslation();\n  return <_EventStream filter={filters} resourceEventStream namespace={namespace} />;\n};\n"]}]}