{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/statuses/vm-import/vm-import-status.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/statuses/vm-import/vm-import-status.ts","mtime":1616735742430},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { getAnnotations } from '@console/shared/src/selectors/common'; // do not import just from shared - causes cycles\nimport { parseNumber } from '../../utils';\nimport { getStatusConditionOfType, getStatusConditions, isConditionStatusTrue, } from '../../selectors/selectors';\nimport { VirtualMachineImportConditionType } from './types';\nimport { VM_IMPORT_PROGRESS_ANNOTATION } from '../../constants/v2v-import/constants';\nimport { V2VVMImportStatus } from '../../constants/v2v-import/ovirt/v2v-vm-import-status';\nimport { IMPORTING_ERROR_OVIRT_MESSAGE, IMPORTING_OVIRT_MESSAGE } from '../../strings/vm/status';\nimport { VMStatus as VMStatusEnum } from '../../constants/vm/vm-status';\nconst isV2VVMImportConversion = (vmImport) => {\n    if (!vmImport) {\n        return null;\n    }\n    const statusConditions = getStatusConditions(vmImport);\n    if (_.isEmpty(statusConditions)) {\n        return {\n            status: V2VVMImportStatus.PENDING,\n        };\n    }\n    const failedFinalStateCondType = [\n        VirtualMachineImportConditionType.Succeeded,\n        VirtualMachineImportConditionType.MappingRulesVerified,\n        VirtualMachineImportConditionType.Valid,\n    ].find((type) => {\n        const condition = getStatusConditionOfType(vmImport, type);\n        return condition && !isConditionStatusTrue(condition);\n    });\n    if (failedFinalStateCondType) {\n        const failedCond = getStatusConditionOfType(vmImport, failedFinalStateCondType);\n        return {\n            status: V2VVMImportStatus.ERROR,\n            message: IMPORTING_ERROR_OVIRT_MESSAGE,\n            detailedMessage: failedCond && `${failedCond.reason}: ${failedCond.message}`,\n        };\n    }\n    const suceededCond = getStatusConditionOfType(vmImport, VirtualMachineImportConditionType.Succeeded);\n    if (suceededCond) {\n        // must be 'True' due to the check above\n        return {\n            status: V2VVMImportStatus.COMPLETE,\n            detailedMessage: `${suceededCond.reason}: ${suceededCond.message}`,\n        };\n    }\n    const progressingCondType = [\n        VirtualMachineImportConditionType.Processing,\n        VirtualMachineImportConditionType.Valid,\n        VirtualMachineImportConditionType.MappingRulesVerified,\n    ].find((type) => isConditionStatusTrue(getStatusConditionOfType(vmImport, type)));\n    const progressingCond = progressingCondType\n        ? getStatusConditionOfType(vmImport, progressingCondType)\n        : statusConditions[0];\n    const progress = parseNumber(getAnnotations(vmImport, {})[VM_IMPORT_PROGRESS_ANNOTATION], 0);\n    return {\n        status: V2VVMImportStatus.IN_PROGRESS,\n        message: IMPORTING_OVIRT_MESSAGE,\n        detailedMessage: progressingCond && `${progressingCond.reason}: ${progressingCond.message}`,\n        progress,\n    };\n};\nexport const getVMImportStatus = ({ vmImport }) => {\n    const bundle = isV2VVMImportConversion(vmImport) || {\n        status: V2VVMImportStatus.UNKNOWN,\n    };\n    bundle.vmImport = vmImport;\n    return bundle;\n};\nexport const getVMImportStatusAsVMStatus = ({ vmImport, }) => {\n    const vmImportStatusBundle = getVMImportStatus({ vmImport });\n    return Object.assign(Object.assign({}, vmImportStatusBundle), { vmImportStatus: vmImportStatusBundle.status, status: VMStatusEnum.fromV2VImportStatus(vmImportStatusBundle.status) || VMStatusEnum.UNKNOWN });\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/statuses/vm-import/vm-import-status.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/statuses/vm-import/vm-import-status.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { getAnnotations } from '@console/shared/src/selectors/common'; // do not import just from shared - causes cycles\nimport { K8sResourceCondition } from '@console/internal/module/k8s';\nimport { VMImportKind } from '../../types/vm-import/ovirt/vm-import';\nimport { parseNumber } from '../../utils';\nimport {\n  getStatusConditionOfType,\n  getStatusConditions,\n  isConditionStatusTrue,\n} from '../../selectors/selectors';\nimport { VirtualMachineImportConditionType, VMImportStatusBundle } from './types';\nimport { VM_IMPORT_PROGRESS_ANNOTATION } from '../../constants/v2v-import/constants';\nimport { V2VVMImportStatus } from '../../constants/v2v-import/ovirt/v2v-vm-import-status';\nimport { IMPORTING_ERROR_OVIRT_MESSAGE, IMPORTING_OVIRT_MESSAGE } from '../../strings/vm/status';\nimport { VMStatus as VMStatusEnum } from '../../constants/vm/vm-status';\nimport { VMStatusBundle } from '../vm/types';\n\nconst isV2VVMImportConversion = (vmImport?: VMImportKind): VMImportStatusBundle => {\n  if (!vmImport) {\n    return null;\n  }\n\n  const statusConditions = getStatusConditions(vmImport);\n\n  if (_.isEmpty(statusConditions)) {\n    return {\n      status: V2VVMImportStatus.PENDING,\n    };\n  }\n\n  const failedFinalStateCondType: VirtualMachineImportConditionType = [\n    VirtualMachineImportConditionType.Succeeded,\n    VirtualMachineImportConditionType.MappingRulesVerified,\n    VirtualMachineImportConditionType.Valid,\n  ].find((type) => {\n    const condition = getStatusConditionOfType(vmImport, type);\n    return condition && !isConditionStatusTrue(condition);\n  });\n\n  if (failedFinalStateCondType) {\n    const failedCond: K8sResourceCondition = getStatusConditionOfType(\n      vmImport,\n      failedFinalStateCondType,\n    );\n\n    return {\n      status: V2VVMImportStatus.ERROR,\n      message: IMPORTING_ERROR_OVIRT_MESSAGE,\n      detailedMessage: failedCond && `${failedCond.reason}: ${failedCond.message}`,\n    };\n  }\n\n  const suceededCond: K8sResourceCondition = getStatusConditionOfType(\n    vmImport,\n    VirtualMachineImportConditionType.Succeeded,\n  );\n\n  if (suceededCond) {\n    // must be 'True' due to the check above\n    return {\n      status: V2VVMImportStatus.COMPLETE,\n      detailedMessage: `${suceededCond.reason}: ${suceededCond.message}`,\n    };\n  }\n\n  const progressingCondType: VirtualMachineImportConditionType = [\n    VirtualMachineImportConditionType.Processing,\n    VirtualMachineImportConditionType.Valid,\n    VirtualMachineImportConditionType.MappingRulesVerified,\n  ].find((type) => isConditionStatusTrue(getStatusConditionOfType(vmImport, type)));\n\n  const progressingCond: K8sResourceCondition = progressingCondType\n    ? getStatusConditionOfType(vmImport, progressingCondType)\n    : statusConditions[0];\n\n  const progress = parseNumber(getAnnotations(vmImport, {})[VM_IMPORT_PROGRESS_ANNOTATION], 0);\n\n  return {\n    status: V2VVMImportStatus.IN_PROGRESS,\n    message: IMPORTING_OVIRT_MESSAGE,\n    detailedMessage: progressingCond && `${progressingCond.reason}: ${progressingCond.message}`,\n    progress,\n  };\n};\n\ntype Parameters = {\n  vmImport?: VMImportKind;\n};\n\nexport const getVMImportStatus = ({ vmImport }: Parameters): VMImportStatusBundle => {\n  const bundle = isV2VVMImportConversion(vmImport) || {\n    status: V2VVMImportStatus.UNKNOWN,\n  };\n  bundle.vmImport = vmImport;\n  return bundle;\n};\n\nexport const getVMImportStatusAsVMStatus = ({\n  vmImport,\n}: Parameters): VMStatusBundle & { vmImportStatus?: V2VVMImportStatus } => {\n  const vmImportStatusBundle = getVMImportStatus({ vmImport });\n  return {\n    ...vmImportStatusBundle,\n    vmImportStatus: vmImportStatusBundle.status,\n    status: VMStatusEnum.fromV2VImportStatus(vmImportStatusBundle.status) || VMStatusEnum.UNKNOWN, // no Completed status in VM list\n  };\n};\n"]}]}