{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/dropdown/ResourceDropdown.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/dropdown/ResourceDropdown.tsx","mtime":1616735742370},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport * as React from 'react';\nimport * as fuzzy from 'fuzzysearch';\nimport { Dropdown, LoadingInline, ResourceIcon, } from '@console/internal/components/utils';\nimport { referenceForModel, modelFor, referenceFor, } from '@console/internal/module/k8s';\nconst DropdownItem = ({ model, name }) => (React.createElement(\"span\", { className: \"co-resource-item\" },\n    React.createElement(\"span\", null,\n        React.createElement(ResourceIcon, { kind: referenceForModel(model) })),\n    React.createElement(\"span\", { className: \"co-truncate show co-nowrap small\" }, name)));\nclass ResourceDropdown extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getDropdownList = ({ loaded, actionItems, autoSelect, selectedKey, resources, resourceFilter, dataSelector, transformLabel, allSelectorItem, showBadge = false, appendItems, }, updateSelection) => {\n            const unsortedList = Object.assign({}, appendItems);\n            _.each(resources, ({ data, kind }) => {\n                _.reduce(data, (acc, resource) => {\n                    let dataValue;\n                    if (resourceFilter && resourceFilter(resource)) {\n                        dataValue = _.get(resource, dataSelector);\n                    }\n                    else if (!resourceFilter) {\n                        dataValue = _.get(resource, dataSelector);\n                    }\n                    if (dataValue) {\n                        if (showBadge) {\n                            const model = modelFor(referenceFor(resource)) || (kind && modelFor(kind));\n                            acc[dataValue] = model ? (React.createElement(DropdownItem, { key: resource.metadata.uid, model: model, name: dataValue })) : (dataValue);\n                        }\n                        else {\n                            acc[dataValue] = transformLabel ? transformLabel(resource) : dataValue;\n                        }\n                    }\n                    return acc;\n                }, unsortedList);\n            });\n            const sortedList = {};\n            if (allSelectorItem && !_.isEmpty(unsortedList)) {\n                sortedList[allSelectorItem.allSelectorKey] = allSelectorItem.allSelectorTitle;\n            }\n            _.keys(unsortedList)\n                .sort()\n                .forEach((key) => {\n                sortedList[key] = unsortedList[key];\n            });\n            if (updateSelection) {\n                let selectedItem = selectedKey;\n                if ((_.isEmpty(sortedList) || !sortedList[selectedKey]) &&\n                    allSelectorItem &&\n                    allSelectorItem.allSelectorKey !== selectedKey) {\n                    selectedItem = allSelectorItem.allSelectorKey;\n                }\n                else if (autoSelect && !selectedKey) {\n                    selectedItem =\n                        loaded && _.isEmpty(sortedList) && actionItems\n                            ? actionItems[0].actionKey\n                            : _.get(_.keys(sortedList), 0);\n                }\n                selectedItem && this.handleChange(selectedItem, sortedList);\n            }\n            return sortedList;\n        };\n        this.handleChange = (key, items) => {\n            const name = items[key];\n            const { actionItems, onChange, selectedKey } = this.props;\n            const selectedActionItem = actionItems && actionItems.find((ai) => key === ai.actionKey);\n            const title = selectedActionItem ? selectedActionItem.actionTitle : name;\n            if (title !== this.state.title) {\n                this.setState({ title });\n            }\n            if (key !== selectedKey) {\n                onChange && onChange(key, name, _.isEmpty(items));\n            }\n        };\n        this.onChange = (key) => {\n            this.handleChange(key, this.state.items);\n        };\n        this.state = {\n            items: this.props.loaded ? this.getDropdownList(props, false) : {},\n            title: this.props.loaded ? (React.createElement(\"span\", { className: \"btn-dropdown__item--placeholder\" }, this.props.placeholder)) : (React.createElement(LoadingInline, null)),\n        };\n    }\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        const { loaded, loadError, autoSelect, selectedKey, placeholder, onLoad, title, actionItems, } = nextProps;\n        if (!loaded) {\n            this.setState({ title: React.createElement(LoadingInline, null) });\n            return;\n        }\n        // If autoSelect is true only then have an item pre-selected based on selectedKey.\n        if (!autoSelect && (!this.props.loaded || !selectedKey)) {\n            this.setState({\n                title: React.createElement(\"span\", { className: \"btn-dropdown__item--placeholder\" }, placeholder),\n            });\n        }\n        if (loadError) {\n            this.setState({\n                title: React.createElement(\"span\", { className: \"cos-error-title\" },\n                    \"Error Loading - \",\n                    placeholder),\n            });\n        }\n        const resourceList = this.getDropdownList(Object.assign(Object.assign({}, this.props), nextProps), true);\n        // set placeholder as title if resourceList is empty no actionItems are there\n        if (loaded && _.isEmpty(resourceList) && !actionItems && placeholder && !title) {\n            this.setState({\n                title: React.createElement(\"span\", { className: \"btn-dropdown__item--placeholder\" }, placeholder),\n            });\n        }\n        this.setState({ items: resourceList });\n        if (nextProps.loaded && onLoad) {\n            onLoad(resourceList);\n        }\n    }\n    shouldComponentUpdate(nextProps, nextState) {\n        if (_.isEqual(this.state, nextState) && _.isEqual(this.props, nextProps)) {\n            return false;\n        }\n        return true;\n    }\n    render() {\n        return (React.createElement(Dropdown, { id: this.props.id, className: this.props.className, dropDownClassName: this.props.dropDownClassName, menuClassName: this.props.menuClassName, buttonClassName: this.props.buttonClassName, titlePrefix: this.props.titlePrefix, autocompleteFilter: this.props.autocompleteFilter || fuzzy, actionItems: this.props.actionItems, items: this.state.items, onChange: this.onChange, selectedKey: this.props.selectedKey, title: this.props.title || this.state.title, autocompletePlaceholder: this.props.placeholder, storageKey: this.props.storageKey, disabled: this.props.disabled }));\n    }\n}\nexport default ResourceDropdown;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/dropdown/ResourceDropdown.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/dropdown/ResourceDropdown.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport * as React from 'react';\nimport * as fuzzy from 'fuzzysearch';\nimport {\n  Dropdown,\n  FirehoseResult,\n  LoadingInline,\n  ResourceIcon,\n} from '@console/internal/components/utils';\nimport {\n  K8sResourceKind,\n  referenceForModel,\n  K8sKind,\n  modelFor,\n  referenceFor,\n} from '@console/internal/module/k8s';\n\ntype DropdownItemProps = {\n  model: K8sKind;\n  name: string;\n};\n\nconst DropdownItem: React.FC<DropdownItemProps> = ({ model, name }) => (\n  <span className=\"co-resource-item\">\n    <span>\n      <ResourceIcon kind={referenceForModel(model)} />\n    </span>\n    <span className=\"co-truncate show co-nowrap small\">{name}</span>\n  </span>\n);\n\ninterface State {\n  items: {};\n  title: React.ReactNode;\n}\n\nexport interface ResourceDropdownItems {\n  [key: string]: string | React.ReactElement;\n}\n\ninterface ResourceDropdownProps {\n  id?: string;\n  className?: string;\n  dropDownClassName?: string;\n  menuClassName?: string;\n  buttonClassName?: string;\n  title?: React.ReactNode;\n  titlePrefix?: string;\n  allApplicationsKey?: string;\n  storageKey?: string;\n  disabled?: boolean;\n  allSelectorItem?: {\n    allSelectorKey?: string;\n    allSelectorTitle?: string;\n  };\n  actionItems?: {\n    actionTitle: string;\n    actionKey: string;\n  }[];\n  dataSelector: string[] | number[] | symbol[];\n  transformLabel?: Function;\n  loaded?: boolean;\n  loadError?: string;\n  placeholder?: string;\n  resources?: FirehoseResult[];\n  selectedKey: string;\n  autoSelect?: boolean;\n  resourceFilter?: (resource: K8sResourceKind) => boolean;\n  onChange?: (key: string, name?: string | object, isListEmpty?: boolean) => void;\n  onLoad?: (items: ResourceDropdownItems) => void;\n  showBadge?: boolean;\n  autocompleteFilter?: (strText: string, item: object) => boolean;\n  appendItems?: ResourceDropdownItems;\n}\n\nclass ResourceDropdown extends React.Component<ResourceDropdownProps, State> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      items: this.props.loaded ? this.getDropdownList(props, false) : {},\n      title: this.props.loaded ? (\n        <span className=\"btn-dropdown__item--placeholder\">{this.props.placeholder}</span>\n      ) : (\n        <LoadingInline />\n      ),\n    };\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps: ResourceDropdownProps) {\n    const {\n      loaded,\n      loadError,\n      autoSelect,\n      selectedKey,\n      placeholder,\n      onLoad,\n      title,\n      actionItems,\n    } = nextProps;\n\n    if (!loaded) {\n      this.setState({ title: <LoadingInline /> });\n      return;\n    }\n\n    // If autoSelect is true only then have an item pre-selected based on selectedKey.\n    if (!autoSelect && (!this.props.loaded || !selectedKey)) {\n      this.setState({\n        title: <span className=\"btn-dropdown__item--placeholder\">{placeholder}</span>,\n      });\n    }\n\n    if (loadError) {\n      this.setState({\n        title: <span className=\"cos-error-title\">Error Loading - {placeholder}</span>,\n      });\n    }\n\n    const resourceList = this.getDropdownList({ ...this.props, ...nextProps }, true);\n    // set placeholder as title if resourceList is empty no actionItems are there\n    if (loaded && _.isEmpty(resourceList) && !actionItems && placeholder && !title) {\n      this.setState({\n        title: <span className=\"btn-dropdown__item--placeholder\">{placeholder}</span>,\n      });\n    }\n    this.setState({ items: resourceList });\n    if (nextProps.loaded && onLoad) {\n      onLoad(resourceList);\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (_.isEqual(this.state, nextState) && _.isEqual(this.props, nextProps)) {\n      return false;\n    }\n    return true;\n  }\n\n  private getDropdownList = (\n    {\n      loaded,\n      actionItems,\n      autoSelect,\n      selectedKey,\n      resources,\n      resourceFilter,\n      dataSelector,\n      transformLabel,\n      allSelectorItem,\n      showBadge = false,\n      appendItems,\n    }: ResourceDropdownProps,\n    updateSelection: boolean,\n  ) => {\n    const unsortedList = { ...appendItems };\n    _.each(resources, ({ data, kind }) => {\n      _.reduce(\n        data,\n        (acc, resource) => {\n          let dataValue;\n          if (resourceFilter && resourceFilter(resource)) {\n            dataValue = _.get(resource, dataSelector);\n          } else if (!resourceFilter) {\n            dataValue = _.get(resource, dataSelector);\n          }\n          if (dataValue) {\n            if (showBadge) {\n              const model = modelFor(referenceFor(resource)) || (kind && modelFor(kind));\n              acc[dataValue] = model ? (\n                <DropdownItem key={resource.metadata.uid} model={model} name={dataValue} />\n              ) : (\n                dataValue\n              );\n            } else {\n              acc[dataValue] = transformLabel ? transformLabel(resource) : dataValue;\n            }\n          }\n          return acc;\n        },\n        unsortedList,\n      );\n    });\n\n    const sortedList = {};\n\n    if (allSelectorItem && !_.isEmpty(unsortedList)) {\n      sortedList[allSelectorItem.allSelectorKey] = allSelectorItem.allSelectorTitle;\n    }\n\n    _.keys(unsortedList)\n      .sort()\n      .forEach((key) => {\n        sortedList[key] = unsortedList[key];\n      });\n\n    if (updateSelection) {\n      let selectedItem = selectedKey;\n      if (\n        (_.isEmpty(sortedList) || !sortedList[selectedKey]) &&\n        allSelectorItem &&\n        allSelectorItem.allSelectorKey !== selectedKey\n      ) {\n        selectedItem = allSelectorItem.allSelectorKey;\n      } else if (autoSelect && !selectedKey) {\n        selectedItem =\n          loaded && _.isEmpty(sortedList) && actionItems\n            ? actionItems[0].actionKey\n            : _.get(_.keys(sortedList), 0);\n      }\n      selectedItem && this.handleChange(selectedItem, sortedList);\n    }\n    return sortedList;\n  };\n\n  private handleChange = (key, items) => {\n    const name = items[key];\n    const { actionItems, onChange, selectedKey } = this.props;\n    const selectedActionItem = actionItems && actionItems.find((ai) => key === ai.actionKey);\n    const title = selectedActionItem ? selectedActionItem.actionTitle : name;\n    if (title !== this.state.title) {\n      this.setState({ title });\n    }\n    if (key !== selectedKey) {\n      onChange && onChange(key, name, _.isEmpty(items));\n    }\n  };\n\n  private onChange = (key: string) => {\n    this.handleChange(key, this.state.items);\n  };\n\n  render() {\n    return (\n      <Dropdown\n        id={this.props.id}\n        className={this.props.className}\n        dropDownClassName={this.props.dropDownClassName}\n        menuClassName={this.props.menuClassName}\n        buttonClassName={this.props.buttonClassName}\n        titlePrefix={this.props.titlePrefix}\n        autocompleteFilter={this.props.autocompleteFilter || fuzzy}\n        actionItems={this.props.actionItems}\n        items={this.state.items}\n        onChange={this.onChange}\n        selectedKey={this.props.selectedKey}\n        title={this.props.title || this.state.title}\n        autocompletePlaceholder={this.props.placeholder}\n        storageKey={this.props.storageKey}\n        disabled={this.props.disabled}\n      />\n    );\n  }\n}\n\nexport default ResourceDropdown;\n"]}]}