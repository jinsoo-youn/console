{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/requests/vm/actions.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/requests/vm/actions.ts","mtime":1615298458660},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { apiVersionForModel, k8sGet, k8sKill, k8sPatch, resourceURL, } from '@console/internal/module/k8s';\nimport { getName, getNamespace, getDeletetionTimestamp } from '@console/shared/src';\nimport { coFetch } from '@console/internal/co-fetch';\nimport { getPxeBootPatch } from '../../patches/vm/vm-boot-patches';\nimport { VirtualMachineImportModel, VirtualMachineModel } from '../../../models';\nimport { VMWrapper } from '../../wrapper/vm/vm-wrapper';\nimport { freeOwnedResources } from '../free-owned-resources';\nexport var VMActionType;\n(function (VMActionType) {\n    VMActionType[\"Start\"] = \"start\";\n    VMActionType[\"Stop\"] = \"stop\";\n    VMActionType[\"Restart\"] = \"restart\";\n})(VMActionType || (VMActionType = {}));\nconst VMActionRequest = (vm, action) => __awaiter(void 0, void 0, void 0, function* () {\n    const method = 'PUT';\n    let url = resourceURL(Object.assign(Object.assign({}, VirtualMachineModel), { apiGroup: `subresources.${VirtualMachineModel.apiGroup}` }), {\n        ns: getNamespace(vm),\n        name: getName(vm),\n    });\n    url = `${url}/${action}`;\n    const response = yield coFetch(url, { method });\n    const text = yield response.text();\n    return text;\n});\nexport const VMActionWithPXERequest = (vm, action) => __awaiter(void 0, void 0, void 0, function* () {\n    // handle PXE boot (kubevirt.ui/firstBoot annotation)\n    const pxePatch = getPxeBootPatch(vm);\n    if (pxePatch.length > 0) {\n        yield k8sPatch(VirtualMachineModel, vm, pxePatch);\n    }\n    return VMActionRequest(vm, action);\n});\nexport const startVM = (vm) => __awaiter(void 0, void 0, void 0, function* () { return VMActionWithPXERequest(vm, VMActionType.Start); });\nexport const stopVM = (vm) => __awaiter(void 0, void 0, void 0, function* () { return VMActionRequest(vm, VMActionType.Stop); });\nexport const restartVM = (vm) => __awaiter(void 0, void 0, void 0, function* () { return VMActionWithPXERequest(vm, VMActionType.Restart); });\nexport const deleteVM = (vm, { vmImport, deleteVMImport, ownedVolumeResources, deleteOwnedVolumeResources, }) => __awaiter(void 0, void 0, void 0, function* () {\n    if (ownedVolumeResources && !deleteOwnedVolumeResources) {\n        yield freeOwnedResources(ownedVolumeResources, {\n            name: getName(vm),\n            kind: VirtualMachineModel.kind,\n            apiVersion: apiVersionForModel(VirtualMachineModel),\n        }, false);\n    }\n    if (vmImport && deleteVMImport) {\n        yield k8sKill(VirtualMachineImportModel, vmImport);\n        if (new VMWrapper(vm).getVMImportOwnerReference()) {\n            try {\n                const deletingVM = yield k8sGet(VirtualMachineModel, getName(vm), getNamespace(vm));\n                if (deletingVM && !getDeletetionTimestamp(deletingVM)) {\n                    // just lost reference - kill again\n                    yield k8sKill(VirtualMachineModel, vm);\n                }\n            }\n            catch (ignored) {\n                // 404 expected\n            }\n        }\n        else {\n            yield k8sKill(VirtualMachineModel, vm);\n        }\n    }\n    else {\n        yield k8sKill(VirtualMachineModel, vm);\n    }\n});\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/requests/vm/actions.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/requests/vm/actions.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  apiVersionForModel,\n  k8sGet,\n  k8sKill,\n  k8sPatch,\n  resourceURL,\n} from '@console/internal/module/k8s';\nimport { getName, getNamespace, getDeletetionTimestamp } from '@console/shared/src';\nimport { coFetch } from '@console/internal/co-fetch';\nimport { getPxeBootPatch } from '../../patches/vm/vm-boot-patches';\nimport { VirtualMachineImportModel, VirtualMachineModel } from '../../../models';\nimport { VMKind } from '../../../types/vm';\nimport { VMWrapper } from '../../wrapper/vm/vm-wrapper';\nimport { freeOwnedResources } from '../free-owned-resources';\nimport { VMImportKind } from '../../../types/vm-import/ovirt/vm-import';\nimport { K8sResourceWithModel } from '../../../types/k8s-resource-with-model';\n\nexport enum VMActionType {\n  Start = 'start',\n  Stop = 'stop',\n  Restart = 'restart',\n}\n\nconst VMActionRequest = async (vm: VMKind, action: VMActionType) => {\n  const method = 'PUT';\n  let url = resourceURL(\n    { ...VirtualMachineModel, apiGroup: `subresources.${VirtualMachineModel.apiGroup}` },\n    {\n      ns: getNamespace(vm),\n      name: getName(vm),\n    },\n  );\n\n  url = `${url}/${action}`;\n\n  const response = await coFetch(url, { method });\n  const text = await response.text();\n\n  return text;\n};\n\nexport const VMActionWithPXERequest = async (vm: VMKind, action: VMActionType) => {\n  // handle PXE boot (kubevirt.ui/firstBoot annotation)\n  const pxePatch = getPxeBootPatch(vm);\n  if (pxePatch.length > 0) {\n    await k8sPatch(VirtualMachineModel, vm, pxePatch);\n  }\n  return VMActionRequest(vm, action);\n};\n\nexport const startVM = async (vm: VMKind) => VMActionWithPXERequest(vm, VMActionType.Start);\nexport const stopVM = async (vm: VMKind) => VMActionRequest(vm, VMActionType.Stop);\nexport const restartVM = async (vm: VMKind) => VMActionWithPXERequest(vm, VMActionType.Restart);\n\nexport const deleteVM = async (\n  vm: VMKind,\n  {\n    vmImport,\n    deleteVMImport,\n    ownedVolumeResources,\n    deleteOwnedVolumeResources,\n  }: {\n    vmImport: VMImportKind;\n    deleteVMImport: boolean;\n    ownedVolumeResources: K8sResourceWithModel[];\n    deleteOwnedVolumeResources: boolean;\n  },\n) => {\n  if (ownedVolumeResources && !deleteOwnedVolumeResources) {\n    await freeOwnedResources(\n      ownedVolumeResources,\n      {\n        name: getName(vm),\n        kind: VirtualMachineModel.kind,\n        apiVersion: apiVersionForModel(VirtualMachineModel),\n      } as any,\n      false,\n    );\n  }\n\n  if (vmImport && deleteVMImport) {\n    await k8sKill(VirtualMachineImportModel, vmImport);\n    if (new VMWrapper(vm).getVMImportOwnerReference()) {\n      try {\n        const deletingVM = await k8sGet(VirtualMachineModel, getName(vm), getNamespace(vm));\n        if (deletingVM && !getDeletetionTimestamp(deletingVM)) {\n          // just lost reference - kill again\n          await k8sKill(VirtualMachineModel, vm);\n        }\n      } catch (ignored) {\n        // 404 expected\n      }\n    } else {\n      await k8sKill(VirtualMachineModel, vm);\n    }\n  } else {\n    await k8sKill(VirtualMachineModel, vm);\n  }\n};\n"]}]}