{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/nodeContextMenu.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/nodeContextMenu.tsx","mtime":1617154808370},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { ContextMenuItem, ContextSubMenuItem } from '@console/topology';\nimport { history, KebabItem, kebabOptionsToMenu, isKebabSubMenu } from '@console/internal/components/utils';\nimport { workloadActions } from '../actions/workloadActions';\nimport { groupActions } from '../actions/groupActions';\nimport { nodeActions } from '../actions/nodeActions';\nimport { graphActions } from '../actions/graphActions';\nimport { regroupActions } from '../actions/regroupActions';\nconst onKebabOptionClick = (option) => {\n    if (option.callback) {\n        option.callback();\n    }\n    if (option.href) {\n        history.push(option.href);\n    }\n};\nexport const createMenuItems = (actions) => actions.map(option => isKebabSubMenu(option) ? (React.createElement(ContextSubMenuItem, { label: option.label, key: option.label }, createMenuItems(option.children))) : (React.createElement(ContextMenuItem, { key: option.label, component: React.createElement(KebabItem, { option: option, onClick: () => onKebabOptionClick(option) }) })));\nexport const workloadContextMenu = (element) => createMenuItems(kebabOptionsToMenu(workloadActions(element.getData())));\nexport const noRegroupWorkloadContextMenu = (element) => createMenuItems(kebabOptionsToMenu(workloadActions(element.getData(), false)));\nexport const groupContextMenu = (element, connectorSource) => {\n    const applicationData = {\n        id: element.getId(),\n        name: element.getLabel(),\n        resources: element.getData().groupResources,\n    };\n    const graphData = element.getGraph().getData();\n    return createMenuItems(kebabOptionsToMenu(groupActions(graphData, applicationData, connectorSource)));\n};\nexport const nodeContextMenu = (element) => createMenuItems(kebabOptionsToMenu(nodeActions(element.getData())));\nexport const graphContextMenu = (graph, connectorSource) => createMenuItems(kebabOptionsToMenu(graphActions(graph.getData(), connectorSource)));\nexport const regroupContextMenu = (element) => createMenuItems(kebabOptionsToMenu(regroupActions(element)));\nexport const regroupGroupContextMenu = (element) => createMenuItems(kebabOptionsToMenu(regroupActions(element, true)));\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/nodeContextMenu.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/nodeContextMenu.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { ContextMenuItem, ContextSubMenuItem, Node, Graph } from '@console/topology';\nimport { history, KebabItem, KebabOption, KebabMenuOption, kebabOptionsToMenu, isKebabSubMenu } from '@console/internal/components/utils';\nimport { workloadActions } from '../actions/workloadActions';\nimport { groupActions } from '../actions/groupActions';\nimport { nodeActions } from '../actions/nodeActions';\nimport { graphActions } from '../actions/graphActions';\nimport { TopologyApplicationObject } from '../topology-types';\nimport { regroupActions } from '../actions/regroupActions';\n\nconst onKebabOptionClick = (option: KebabOption) => {\n  if (option.callback) {\n    option.callback();\n  }\n  if (option.href) {\n    history.push(option.href);\n  }\n};\n\nexport const createMenuItems = (actions: KebabMenuOption[]) =>\n  actions.map(option =>\n    isKebabSubMenu(option) ? (\n      <ContextSubMenuItem label={option.label} key={option.label}>\n        {createMenuItems(option.children)}\n      </ContextSubMenuItem>\n    ) : (\n      <ContextMenuItem key={option.label} component={<KebabItem option={option} onClick={() => onKebabOptionClick(option)} />} />\n    ),\n  );\n\nexport const workloadContextMenu = (element: Node) => createMenuItems(kebabOptionsToMenu(workloadActions(element.getData())));\n\nexport const noRegroupWorkloadContextMenu = (element: Node) => createMenuItems(kebabOptionsToMenu(workloadActions(element.getData(), false)));\n\nexport const groupContextMenu = (element: Node, connectorSource?: Node) => {\n  const applicationData: TopologyApplicationObject = {\n    id: element.getId(),\n    name: element.getLabel(),\n    resources: element.getData().groupResources,\n  };\n\n  const graphData = element.getGraph().getData();\n  return createMenuItems(kebabOptionsToMenu(groupActions(graphData, applicationData, connectorSource)));\n};\nexport const nodeContextMenu = (element: Node) => createMenuItems(kebabOptionsToMenu(nodeActions(element.getData())));\n\nexport const graphContextMenu = (graph: Graph, connectorSource?: Node) => createMenuItems(kebabOptionsToMenu(graphActions(graph.getData(), connectorSource)));\n\nexport const regroupContextMenu = (element: Node) => createMenuItems(kebabOptionsToMenu(regroupActions(element)));\n\nexport const regroupGroupContextMenu = (element: Node) => createMenuItems(kebabOptionsToMenu(regroupActions(element, true)));\n"]}]}