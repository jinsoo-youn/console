{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/utils/useAddToProjectAccess.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/utils/useAddToProjectAccess.ts","mtime":1616735742400},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport { BuildConfigModel, DeploymentConfigModel, ImageStreamImportsModel, ImageStreamModel, RouteModel, SecretModel, ServiceModel, } from '@console/internal/models';\nimport { allCatalogImageResourceAccess, allImportResourceAccess } from '../actions/add-resources';\nconst resourceAttributes = (model, namespace) => {\n    return {\n        group: model.apiGroup || '',\n        resource: model.plural,\n        namespace,\n        verb: 'create',\n    };\n};\nexport const useAddToProjectAccess = (activeNamespace) => {\n    const [addAccess, setAddAccess] = React.useState([]);\n    const buildConfigsAccess = useAccessReview(resourceAttributes(BuildConfigModel, activeNamespace));\n    const imageStreamAccess = useAccessReview(resourceAttributes(ImageStreamModel, activeNamespace));\n    const deploymentConfigAccess = useAccessReview(resourceAttributes(DeploymentConfigModel, activeNamespace));\n    const imageStreamImportAccess = useAccessReview(resourceAttributes(ImageStreamImportsModel, activeNamespace));\n    const secretAccess = useAccessReview(resourceAttributes(SecretModel, activeNamespace));\n    const routeAccess = useAccessReview(resourceAttributes(RouteModel, activeNamespace));\n    const serviceAccess = useAccessReview(resourceAttributes(ServiceModel, activeNamespace));\n    React.useEffect(() => {\n        const createResourceAccess = [];\n        if (buildConfigsAccess &&\n            imageStreamAccess &&\n            deploymentConfigAccess &&\n            secretAccess &&\n            routeAccess &&\n            serviceAccess) {\n            createResourceAccess.push(allImportResourceAccess);\n            if (imageStreamImportAccess) {\n                createResourceAccess.push(allCatalogImageResourceAccess);\n            }\n        }\n        setAddAccess(createResourceAccess);\n    }, [\n        buildConfigsAccess,\n        deploymentConfigAccess,\n        imageStreamAccess,\n        imageStreamImportAccess,\n        routeAccess,\n        secretAccess,\n        serviceAccess,\n    ]);\n    return addAccess;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/utils/useAddToProjectAccess.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/utils/useAddToProjectAccess.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAE,eAAe,EAAE,MAAM,oCAAoC,CAAC;AACrE,OAAO,EACL,gBAAgB,EAChB,qBAAqB,EACrB,uBAAuB,EACvB,gBAAgB,EAChB,UAAU,EACV,WAAW,EACX,YAAY,GACb,MAAM,0BAA0B,CAAC;AAClC,OAAO,EAAE,6BAA6B,EAAE,uBAAuB,EAAE,MAAM,0BAA0B,CAAC;AAElG,MAAM,kBAAkB,GAAG,CAAC,KAAc,EAAE,SAAiB,EAAkC,EAAE;IAC/F,OAAO;QACL,KAAK,EAAE,KAAK,CAAC,QAAQ,IAAI,EAAE;QAC3B,QAAQ,EAAE,KAAK,CAAC,MAAM;QACtB,SAAS;QACT,IAAI,EAAE,QAAQ;KACf,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,eAAuB,EAAY,EAAE;IACzE,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAW,EAAE,CAAC,CAAC;IAE/D,MAAM,kBAAkB,GAAG,eAAe,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,eAAe,CAAC,CAAC,CAAC;IAClG,MAAM,iBAAiB,GAAG,eAAe,CAAC,kBAAkB,CAAC,gBAAgB,EAAE,eAAe,CAAC,CAAC,CAAC;IACjG,MAAM,sBAAsB,GAAG,eAAe,CAC5C,kBAAkB,CAAC,qBAAqB,EAAE,eAAe,CAAC,CAC3D,CAAC;IACF,MAAM,uBAAuB,GAAG,eAAe,CAC7C,kBAAkB,CAAC,uBAAuB,EAAE,eAAe,CAAC,CAC7D,CAAC;IACF,MAAM,YAAY,GAAG,eAAe,CAAC,kBAAkB,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC,CAAC;IACvF,MAAM,WAAW,GAAG,eAAe,CAAC,kBAAkB,CAAC,UAAU,EAAE,eAAe,CAAC,CAAC,CAAC;IACrF,MAAM,aAAa,GAAG,eAAe,CAAC,kBAAkB,CAAC,YAAY,EAAE,eAAe,CAAC,CAAC,CAAC;IAEzF,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,MAAM,oBAAoB,GAAa,EAAE,CAAC;QAC1C,IACE,kBAAkB;YAClB,iBAAiB;YACjB,sBAAsB;YACtB,YAAY;YACZ,WAAW;YACX,aAAa,EACb;YACA,oBAAoB,CAAC,IAAI,CAAC,uBAAuB,CAAC,CAAC;YACnD,IAAI,uBAAuB,EAAE;gBAC3B,oBAAoB,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;aAC1D;SACF;QACD,YAAY,CAAC,oBAAoB,CAAC,CAAC;IACrC,CAAC,EAAE;QACD,kBAAkB;QAClB,sBAAsB;QACtB,iBAAiB;QACjB,uBAAuB;QACvB,WAAW;QACX,YAAY;QACZ,aAAa;KACd,CAAC,CAAC;IAEH,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { AccessReviewResourceAttributes, K8sKind } from '@console/internal/module/k8s';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport {\n  BuildConfigModel,\n  DeploymentConfigModel,\n  ImageStreamImportsModel,\n  ImageStreamModel,\n  RouteModel,\n  SecretModel,\n  ServiceModel,\n} from '@console/internal/models';\nimport { allCatalogImageResourceAccess, allImportResourceAccess } from '../actions/add-resources';\n\nconst resourceAttributes = (model: K8sKind, namespace: string): AccessReviewResourceAttributes => {\n  return {\n    group: model.apiGroup || '',\n    resource: model.plural,\n    namespace,\n    verb: 'create',\n  };\n};\n\nexport const useAddToProjectAccess = (activeNamespace: string): string[] => {\n  const [addAccess, setAddAccess] = React.useState<string[]>([]);\n\n  const buildConfigsAccess = useAccessReview(resourceAttributes(BuildConfigModel, activeNamespace));\n  const imageStreamAccess = useAccessReview(resourceAttributes(ImageStreamModel, activeNamespace));\n  const deploymentConfigAccess = useAccessReview(\n    resourceAttributes(DeploymentConfigModel, activeNamespace),\n  );\n  const imageStreamImportAccess = useAccessReview(\n    resourceAttributes(ImageStreamImportsModel, activeNamespace),\n  );\n  const secretAccess = useAccessReview(resourceAttributes(SecretModel, activeNamespace));\n  const routeAccess = useAccessReview(resourceAttributes(RouteModel, activeNamespace));\n  const serviceAccess = useAccessReview(resourceAttributes(ServiceModel, activeNamespace));\n\n  React.useEffect(() => {\n    const createResourceAccess: string[] = [];\n    if (\n      buildConfigsAccess &&\n      imageStreamAccess &&\n      deploymentConfigAccess &&\n      secretAccess &&\n      routeAccess &&\n      serviceAccess\n    ) {\n      createResourceAccess.push(allImportResourceAccess);\n      if (imageStreamImportAccess) {\n        createResourceAccess.push(allCatalogImageResourceAccess);\n      }\n    }\n    setAddAccess(createResourceAccess);\n  }, [\n    buildConfigsAccess,\n    deploymentConfigAccess,\n    imageStreamAccess,\n    imageStreamImportAccess,\n    routeAccess,\n    secretAccess,\n    serviceAccess,\n  ]);\n\n  return addAccess;\n};\n"]}]}