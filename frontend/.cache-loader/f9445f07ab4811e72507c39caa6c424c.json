{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/hooks/scroll.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/hooks/scroll.ts","mtime":1616735742380},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nexport var ScrollDirection;\n(function (ScrollDirection) {\n    ScrollDirection[\"scrollingUp\"] = \"scrolling-up\";\n    ScrollDirection[\"scrollingDown\"] = \"scrolling-down\";\n    ScrollDirection[\"scrolledToBottom\"] = \"scrolled-to-bottom\";\n    ScrollDirection[\"scrolledToTop\"] = \"scrolled-to-top\";\n})(ScrollDirection || (ScrollDirection = {}));\nexport const getScrollDirection = (prevScrollTop, currentScrollTop, scrollHeight, clientHeight) => {\n    let direction;\n    if (scrollHeight - currentScrollTop === clientHeight) {\n        direction = ScrollDirection.scrolledToBottom;\n    }\n    else if (currentScrollTop === 0) {\n        direction = ScrollDirection.scrolledToTop;\n    }\n    else if (prevScrollTop > currentScrollTop) {\n        direction = ScrollDirection.scrollingUp;\n    }\n    else if (prevScrollTop < currentScrollTop) {\n        direction = ScrollDirection.scrollingDown;\n    }\n    return direction;\n};\nexport const useScrollDirection = () => {\n    const scrollPosition = React.useRef(null);\n    const [scrollDirection, setScrollDirection] = React.useState(null);\n    const handleScroll = React.useCallback((event) => {\n        const { scrollHeight, scrollTop, clientHeight } = event.target;\n        if (scrollPosition.current !== null) {\n            const direction = getScrollDirection(scrollPosition.current, scrollTop, scrollHeight, clientHeight);\n            if (direction && direction !== scrollDirection)\n                setScrollDirection(direction);\n        }\n        scrollPosition.current = scrollTop;\n    }, [scrollDirection]);\n    return [scrollDirection, handleScroll];\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/hooks/scroll.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/hooks/scroll.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,MAAM,CAAN,IAAY,eAKX;AALD,WAAY,eAAe;IACzB,+CAA4B,CAAA;IAC5B,mDAAgC,CAAA;IAChC,0DAAuC,CAAA;IACvC,oDAAiC,CAAA;AACnC,CAAC,EALW,eAAe,KAAf,eAAe,QAK1B;AAED,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAChC,aAAqB,EACrB,gBAAwB,EACxB,YAAoB,EACpB,YAAoB,EACpB,EAAE;IACF,IAAI,SAAS,CAAC;IACd,IAAI,YAAY,GAAG,gBAAgB,KAAK,YAAY,EAAE;QACpD,SAAS,GAAG,eAAe,CAAC,gBAAgB,CAAC;KAC9C;SAAM,IAAI,gBAAgB,KAAK,CAAC,EAAE;QACjC,SAAS,GAAG,eAAe,CAAC,aAAa,CAAC;KAC3C;SAAM,IAAI,aAAa,GAAG,gBAAgB,EAAE;QAC3C,SAAS,GAAG,eAAe,CAAC,WAAW,CAAC;KACzC;SAAM,IAAI,aAAa,GAAG,gBAAgB,EAAE;QAC3C,SAAS,GAAG,eAAe,CAAC,aAAa,CAAC;KAC3C;IACD,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,GAAuC,EAAE;IACzE,MAAM,cAAc,GAAG,KAAK,CAAC,MAAM,CAAS,IAAI,CAAC,CAAC;IAClD,MAAM,CAAC,eAAe,EAAE,kBAAkB,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAkB,IAAI,CAAC,CAAC;IACpF,MAAM,YAAY,GAAG,KAAK,CAAC,WAAW,CACpC,CAAC,KAAK,EAAE,EAAE;QACR,MAAM,EAAE,YAAY,EAAE,SAAS,EAAE,YAAY,EAAE,GAAG,KAAK,CAAC,MAAM,CAAC;QAC/D,IAAI,cAAc,CAAC,OAAO,KAAK,IAAI,EAAE;YACnC,MAAM,SAAS,GAAG,kBAAkB,CAClC,cAAc,CAAC,OAAO,EACtB,SAAS,EACT,YAAY,EACZ,YAAY,CACb,CAAC;YACF,IAAI,SAAS,IAAI,SAAS,KAAK,eAAe;gBAAE,kBAAkB,CAAC,SAAS,CAAC,CAAC;SAC/E;QACD,cAAc,CAAC,OAAO,GAAG,SAAS,CAAC;IACrC,CAAC,EACD,CAAC,eAAe,CAAC,CAClB,CAAC;IAEF,OAAO,CAAC,eAAe,EAAE,YAAY,CAAC,CAAC;AACzC,CAAC,CAAC","sourcesContent":["import * as React from 'react';\n\nexport enum ScrollDirection {\n  scrollingUp = 'scrolling-up',\n  scrollingDown = 'scrolling-down',\n  scrolledToBottom = 'scrolled-to-bottom',\n  scrolledToTop = 'scrolled-to-top',\n}\n\nexport const getScrollDirection = (\n  prevScrollTop: number,\n  currentScrollTop: number,\n  scrollHeight: number,\n  clientHeight: number,\n) => {\n  let direction;\n  if (scrollHeight - currentScrollTop === clientHeight) {\n    direction = ScrollDirection.scrolledToBottom;\n  } else if (currentScrollTop === 0) {\n    direction = ScrollDirection.scrolledToTop;\n  } else if (prevScrollTop > currentScrollTop) {\n    direction = ScrollDirection.scrollingUp;\n  } else if (prevScrollTop < currentScrollTop) {\n    direction = ScrollDirection.scrollingDown;\n  }\n  return direction;\n};\n\nexport const useScrollDirection = (): [ScrollDirection, (event) => void] => {\n  const scrollPosition = React.useRef<number>(null);\n  const [scrollDirection, setScrollDirection] = React.useState<ScrollDirection>(null);\n  const handleScroll = React.useCallback(\n    (event) => {\n      const { scrollHeight, scrollTop, clientHeight } = event.target;\n      if (scrollPosition.current !== null) {\n        const direction = getScrollDirection(\n          scrollPosition.current,\n          scrollTop,\n          scrollHeight,\n          clientHeight,\n        );\n        if (direction && direction !== scrollDirection) setScrollDirection(direction);\n      }\n      scrollPosition.current = scrollTop;\n    },\n    [scrollDirection],\n  );\n\n  return [scrollDirection, handleScroll];\n};\n"]}]}