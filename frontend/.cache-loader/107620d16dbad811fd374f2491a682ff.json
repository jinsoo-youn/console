{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/anchors/AbstractAnchor.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/anchors/AbstractAnchor.ts","mtime":1616735742450},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["export default class AbstractAnchor {\n    constructor(owner, offset = 0) {\n        this.owner = owner;\n        this.offset = offset;\n    }\n    getReferencePoint() {\n        return this.owner\n            .getBounds()\n            .getCenter()\n            .translate(this.offset, this.offset);\n    }\n}\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/anchors/AbstractAnchor.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/anchors/AbstractAnchor.ts"],"names":[],"mappings":"AAGA,MAAM,CAAC,OAAO,OAAgB,cAAc;IAQ1C,YAAY,KAAQ,EAAE,SAAiB,CAAC;QACtC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAID,iBAAiB;QACf,OAAO,IAAI,CAAC,KAAK;aACd,SAAS,EAAE;aACX,SAAS,EAAE;aACX,SAAS,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;IACzC,CAAC;CACF","sourcesContent":["import Point from '../geom/Point';\nimport { Anchor, Node } from '../types';\n\nexport default abstract class AbstractAnchor<E extends Node = Node> implements Anchor {\n  protected readonly owner: E;\n\n  // Consumption of the offset depends on the concrete anchor implementation but it is\n  // indended that the reference point is moved by the offset relative to the point location\n  // in the direction of the opposing reference point.\n  protected readonly offset: number;\n\n  constructor(owner: E, offset: number = 0) {\n    this.owner = owner;\n    this.offset = offset;\n  }\n\n  abstract getLocation(reference: Point): Point;\n\n  getReferencePoint(): Point {\n    return this.owner\n      .getBounds()\n      .getCenter()\n      .translate(this.offset, this.offset);\n  }\n}\n"]}]}