{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-plugin-sdk/src/typings/dashboards.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-plugin-sdk/src/typings/dashboards.ts","mtime":1615298458600},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["export const isDashboardsOverviewHealthURLSubsystem = (e) => e.type === 'Dashboards/Overview/Health/URL';\nexport const isDashboardsOverviewHealthPrometheusSubsystem = (e) => e.type === 'Dashboards/Overview/Health/Prometheus';\nexport const isDashboardsOverviewHealthResourceSubsystem = (e) => e.type === 'Dashboards/Overview/Health/Resource';\nexport const isDashboardsOverviewHealthOperator = (e) => e.type === 'Dashboards/Overview/Health/Operator';\nexport const isDashboardsOverviewHealthSubsystem = (e) => isDashboardsOverviewHealthURLSubsystem(e) ||\n    isDashboardsOverviewHealthPrometheusSubsystem(e) ||\n    isDashboardsOverviewHealthResourceSubsystem(e) ||\n    isDashboardsOverviewHealthOperator(e);\nexport const isDashboardsTab = (e) => e.type === 'Dashboards/Tab';\nexport const isDashboardsCard = (e) => e.type === 'Dashboards/Card';\nexport const isDashboardsOverviewUtilizationItem = (e) => e.type === 'Dashboards/Overview/Utilization/Item';\nexport const isDashboardsOverviewInventoryItem = (e) => e.type === 'Dashboards/Overview/Inventory/Item';\nexport const isDashboardsInventoryItemGroup = (e) => e.type === 'Dashboards/Inventory/Item/Group';\nexport const isDashboardsOverviewResourceActivity = (e) => e.type === 'Dashboards/Overview/Activity/Resource';\nexport const isDashboardsOverviewPrometheusActivity = (e) => e.type === 'Dashboards/Overview/Activity/Prometheus';\nexport const isProjectDashboardInventoryItem = (e) => e.type === 'Project/Dashboard/Inventory/Item';\nexport const isDashboardsOverviewInventoryItemReplacement = (e) => e.type === 'Dashboards/Overview/Inventory/Item/Replacement';\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-plugin-sdk/src/typings/dashboards.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-plugin-sdk/src/typings/dashboards.ts"],"names":[],"mappings":"AA0OA,MAAM,CAAC,MAAM,sCAAsC,GAAG,CACpD,CAAY,EAC+B,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,gCAAgC,CAAC;AAO5F,MAAM,CAAC,MAAM,6CAA6C,GAAG,CAC3D,CAAY,EACsC,EAAE,CACpD,CAAC,CAAC,IAAI,KAAK,uCAAuC,CAAC;AAQrD,MAAM,CAAC,MAAM,2CAA2C,GAAG,CACzD,CAAY,EACoC,EAAE,CAClD,CAAC,CAAC,IAAI,KAAK,qCAAqC,CAAC;AAOnD,MAAM,CAAC,MAAM,kCAAkC,GAAG,CAChD,CAAY,EAC2B,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,qCAAqC,CAAC;AAQ7F,MAAM,CAAC,MAAM,mCAAmC,GAAG,CACjD,CAAY,EAC4B,EAAE,CAC1C,sCAAsC,CAAC,CAAC,CAAC;IACzC,6CAA6C,CAAC,CAAC,CAAC;IAChD,2CAA2C,CAAC,CAAC,CAAC;IAC9C,kCAAkC,CAAC,CAAC,CAAC,CAAC;AAMxC,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,CAAY,EAAsB,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,gBAAgB,CAAC;AAMjG,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,CAAY,EAAuB,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,iBAAiB,CAAC;AAOpG,MAAM,CAAC,MAAM,mCAAmC,GAAG,CACjD,CAAY,EAC4B,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,sCAAsC,CAAC;AAO/F,MAAM,CAAC,MAAM,iCAAiC,GAAG,CAC/C,CAAY,EAC0B,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,oCAAoC,CAAC;AAO3F,MAAM,CAAC,MAAM,8BAA8B,GAAG,CAAC,CAAY,EAAqC,EAAE,CAChG,CAAC,CAAC,IAAI,KAAK,iCAAiC,CAAC;AAO/C,MAAM,CAAC,MAAM,oCAAoC,GAAG,CAClD,CAAY,EAC6B,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,uCAAuC,CAAC;AAOjG,MAAM,CAAC,MAAM,sCAAsC,GAAG,CACpD,CAAY,EAC+B,EAAE,CAC7C,CAAC,CAAC,IAAI,KAAK,yCAAyC,CAAC;AAOvD,MAAM,CAAC,MAAM,+BAA+B,GAAG,CAAC,CAAY,EAAsC,EAAE,CAClG,CAAC,CAAC,IAAI,KAAK,kCAAkC,CAAC;AAOhD,MAAM,CAAC,MAAM,4CAA4C,GAAG,CAC1D,CAAY,EACqC,EAAE,CACnD,CAAC,CAAC,IAAI,KAAK,gDAAgD,CAAC","sourcesContent":["import { HealthState } from '@console/shared/src/components/dashboard/status-card/states';\nimport { GridPosition } from '@console/shared/src/components/dashboard/DashboardGrid';\nimport {\n  FirehoseResource,\n  FirehoseResult,\n  FirehoseResourcesResult,\n} from '@console/internal/components/utils';\nimport { K8sKind, K8sResourceKind, K8sResourceCommon } from '@console/internal/module/k8s';\nimport {\n  StatusGroupMapper,\n  ExpandedComponentProps,\n} from '@console/shared/src/components/dashboard/inventory-card/InventoryItem';\nimport { PrometheusResponse } from '@console/internal/components/graphs';\nimport {\n  WatchK8sResources,\n  ResourcesObject,\n  WatchK8sResults,\n} from '@console/internal/components/utils/k8s-watch-hook';\nimport { Extension, LazyLoader } from './base';\n\nnamespace ExtensionProperties {\n  interface DashboardsOverviewHealthSubsystem {\n    /** The subsystem's display name */\n    title: string;\n  }\n\n  export interface DashboardsOverviewHealthURLSubsystem<R>\n    extends DashboardsOverviewHealthSubsystem {\n    /**\n     * The URL to fetch data from. It will be prefixed with base k8s URL.\n     * For example: `healthz` will result in `<k8sBasePath>/healthz`\n     */\n    url: string;\n\n    /**\n     * Custom function to fetch data from the URL.\n     * If none is specified, default one (`coFetchJson`) will be used.\n     * Response is then parsed by `healthHandler`.\n     */\n    fetch?: (url: string) => Promise<R>;\n\n    /** Additional resource which will be fetched and passed to healthHandler  */\n    additionalResource?: FirehoseResource;\n\n    /** Resolve the subsystem's health */\n    healthHandler: URLHealthHandler<R>;\n\n    /**\n     * Loader for popup content. If defined health item will be represented as link\n     * which opens popup with given content.\n     */\n    popupComponent?: LazyLoader<any>;\n\n    /**\n     * Popup title\n     */\n    popupTitle?: string;\n  }\n\n  export interface DashboardsOverviewHealthPrometheusSubsystem\n    extends DashboardsOverviewHealthSubsystem {\n    /** The Prometheus queries */\n    queries: string[];\n\n    /** Additional resource which will be fetched and passed to healthHandler  */\n    additionalResource?: FirehoseResource;\n\n    /** Resolve the subsystem's health */\n    healthHandler: PrometheusHealthHandler;\n\n    /**\n     * Loader for popup content. If defined health item will be represented as link\n     * which opens popup with given content.\n     */\n    popupComponent?: LazyLoader<PrometheusHealthPopupProps>;\n\n    /**\n     * Popup title\n     */\n    popupTitle?: string;\n\n    /**\n     * Cloud providers which for which the subsystem should be hidden.\n     */\n    disallowedProviders?: string[];\n  }\n\n  export interface DashboardsOverviewHealthResourceSubsystem<R extends ResourcesObject>\n    extends DashboardsOverviewHealthSubsystem {\n    /** Kubernetes resources which will be fetched and passed to healthHandler  */\n    resources: WatchK8sResources<R>;\n\n    /** Resolve the subsystem's health */\n    healthHandler: ResourceHealthHandler<R>;\n\n    /**\n     * Loader for popup content. If defined health item will be represented as link\n     * which opens popup with given content.\n     */\n    popupComponent?: LazyLoader<WatchK8sResults<R>>;\n\n    /**\n     * Popup title\n     */\n    popupTitle?: string;\n  }\n\n  export interface DashboardsOverviewHealthOperator<R extends K8sResourceCommon>\n    extends DashboardsOverviewHealthSubsystem {\n    /** Title of operators section in popup */\n    title: string;\n\n    /** Resources which will be fetched and passed to healthHandler */\n    resources: FirehoseResource[];\n\n    /** Resolve status for operators */\n    getOperatorsWithStatuses: GetOperatorsWithStatuses<R>;\n\n    /** Loader for popup row component */\n    operatorRowLoader: LazyLoader<OperatorRowProps<R>>;\n\n    /**\n     * Link to all resources page.\n     * If not provided then a list page of first resource from resources prop is used.\n     */\n    viewAllLink?: string;\n  }\n\n  export interface DashboardsTab {\n    /** The tab's ID which will be used as part of href within dashboards page */\n    id: string;\n\n    /** The tab title */\n    title: string;\n  }\n\n  export interface DashboardsCard {\n    /** The tab's ID where this card should be rendered */\n    tab: string;\n\n    /** The card position in the tab */\n    position: GridPosition;\n\n    /** Loader for the corresponding dashboard card component. */\n    loader: LazyLoader;\n\n    /** Card's vertical span in the column. Ignored for small screens, defaults to 12. */\n    span?: DashboardCardSpan;\n  }\n\n  export interface DashboardsOverviewInventoryItem {\n    /** The model for `resource` which will be fetched. The model is used for getting model's label or abbr. */\n    model: K8sKind;\n\n    /** Function which will map various statuses to groups. */\n    mapper?: StatusGroupMapper;\n\n    /** Additional resources which will be fetched and passed to `mapper` function. */\n    additionalResources?: WatchK8sResources<any>;\n\n    /** Defines whether model's label or abbr should be used when rendering the item. Defaults to false (label). */\n    useAbbr?: boolean;\n\n    /** Loader for the component which will be used when item is expanded. */\n    expandedComponent?: LazyLoader<ExpandedComponentProps>;\n  }\n\n  export interface DashboardsInventoryItemGroup {\n    /** The ID of status group. */\n    id: string;\n\n    /** React component representing status group icon. */\n    icon: React.ReactElement;\n  }\n\n  export interface DashboardsOverviewUtilizationItem {\n    /** The utilization item to be replaced */\n    id: string;\n\n    /** The Prometheus utilization query */\n    query: string;\n\n    /** The Prometheus total query */\n    totalQuery: string;\n  }\n\n  export interface DashboardsOverviewResourceActivity {\n    /** Resource to watch */\n    k8sResource: FirehoseResource & { isList: true };\n\n    /**\n     * Function which will determine if given resource represents the action.\n     * If the function is not defined, every resource represents activity.\n     */\n    isActivity?: (resource: K8sResourceKind) => boolean;\n\n    /** Timestamp for given action, which will be used for ordering */\n    getTimestamp?: (resource: K8sResourceKind) => Date;\n\n    /** Loader for corresponding action component */\n    loader: LazyLoader<K8sActivityProps>;\n  }\n\n  export interface DashboardsOverviewPrometheusActivity {\n    /** Queries to watch */\n    queries: string[];\n\n    /** Function which will determine if given query results represent the action */\n    isActivity: (results: PrometheusResponse[]) => boolean;\n\n    /** Loader for corresponding action component */\n    loader: LazyLoader<PrometheusActivityProps>;\n  }\n\n  export interface ProjectDashboardInventoryItem {\n    /** The K8s model which will be scoped to project, fetched and passed to `mapper` function. */\n    model: K8sKind;\n\n    /** Additional resources which will be fetched and passed to `mapper` function. */\n    additionalResources?: FirehoseResource[];\n\n    /** Defines whether model's label or abbr should be used when rendering the item. Defaults to false (label). */\n    useAbbr?: boolean;\n\n    /** Function which will map various statuses to groups. */\n    mapper: StatusGroupMapper;\n  }\n}\n\nexport interface DashboardsOverviewHealthURLSubsystem<R = any>\n  extends Extension<ExtensionProperties.DashboardsOverviewHealthURLSubsystem<R>> {\n  type: 'Dashboards/Overview/Health/URL';\n}\n\nexport const isDashboardsOverviewHealthURLSubsystem = (\n  e: Extension,\n): e is DashboardsOverviewHealthURLSubsystem => e.type === 'Dashboards/Overview/Health/URL';\n\nexport interface DashboardsOverviewHealthPrometheusSubsystem\n  extends Extension<ExtensionProperties.DashboardsOverviewHealthPrometheusSubsystem> {\n  type: 'Dashboards/Overview/Health/Prometheus';\n}\n\nexport const isDashboardsOverviewHealthPrometheusSubsystem = (\n  e: Extension,\n): e is DashboardsOverviewHealthPrometheusSubsystem =>\n  e.type === 'Dashboards/Overview/Health/Prometheus';\n\nexport interface DashboardsOverviewHealthResourceSubsystem<\n  R extends ResourcesObject = ResourcesObject\n> extends Extension<ExtensionProperties.DashboardsOverviewHealthResourceSubsystem<R>> {\n  type: 'Dashboards/Overview/Health/Resource';\n}\n\nexport const isDashboardsOverviewHealthResourceSubsystem = (\n  e: Extension,\n): e is DashboardsOverviewHealthResourceSubsystem =>\n  e.type === 'Dashboards/Overview/Health/Resource';\n\nexport interface DashboardsOverviewHealthOperator<R extends K8sResourceCommon = K8sResourceCommon>\n  extends Extension<ExtensionProperties.DashboardsOverviewHealthOperator<R>> {\n  type: 'Dashboards/Overview/Health/Operator';\n}\n\nexport const isDashboardsOverviewHealthOperator = (\n  e: Extension,\n): e is DashboardsOverviewHealthOperator => e.type === 'Dashboards/Overview/Health/Operator';\n\nexport type DashboardsOverviewHealthSubsystem =\n  | DashboardsOverviewHealthURLSubsystem\n  | DashboardsOverviewHealthPrometheusSubsystem\n  | DashboardsOverviewHealthResourceSubsystem\n  | DashboardsOverviewHealthOperator;\n\nexport const isDashboardsOverviewHealthSubsystem = (\n  e: Extension,\n): e is DashboardsOverviewHealthSubsystem =>\n  isDashboardsOverviewHealthURLSubsystem(e) ||\n  isDashboardsOverviewHealthPrometheusSubsystem(e) ||\n  isDashboardsOverviewHealthResourceSubsystem(e) ||\n  isDashboardsOverviewHealthOperator(e);\n\nexport interface DashboardsTab extends Extension<ExtensionProperties.DashboardsTab> {\n  type: 'Dashboards/Tab';\n}\n\nexport const isDashboardsTab = (e: Extension): e is DashboardsTab => e.type === 'Dashboards/Tab';\n\nexport interface DashboardsCard extends Extension<ExtensionProperties.DashboardsCard> {\n  type: 'Dashboards/Card';\n}\n\nexport const isDashboardsCard = (e: Extension): e is DashboardsCard => e.type === 'Dashboards/Card';\n\nexport interface DashboardsOverviewUtilizationItem\n  extends Extension<ExtensionProperties.DashboardsOverviewUtilizationItem> {\n  type: 'Dashboards/Overview/Utilization/Item';\n}\n\nexport const isDashboardsOverviewUtilizationItem = (\n  e: Extension,\n): e is DashboardsOverviewUtilizationItem => e.type === 'Dashboards/Overview/Utilization/Item';\n\nexport interface DashboardsOverviewInventoryItem\n  extends Extension<ExtensionProperties.DashboardsOverviewInventoryItem> {\n  type: 'Dashboards/Overview/Inventory/Item';\n}\n\nexport const isDashboardsOverviewInventoryItem = (\n  e: Extension,\n): e is DashboardsOverviewInventoryItem => e.type === 'Dashboards/Overview/Inventory/Item';\n\nexport interface DashboardsInventoryItemGroup\n  extends Extension<ExtensionProperties.DashboardsInventoryItemGroup> {\n  type: 'Dashboards/Inventory/Item/Group';\n}\n\nexport const isDashboardsInventoryItemGroup = (e: Extension): e is DashboardsInventoryItemGroup =>\n  e.type === 'Dashboards/Inventory/Item/Group';\n\nexport interface DashboardsOverviewResourceActivity\n  extends Extension<ExtensionProperties.DashboardsOverviewResourceActivity> {\n  type: 'Dashboards/Overview/Activity/Resource';\n}\n\nexport const isDashboardsOverviewResourceActivity = (\n  e: Extension,\n): e is DashboardsOverviewResourceActivity => e.type === 'Dashboards/Overview/Activity/Resource';\n\nexport interface DashboardsOverviewPrometheusActivity\n  extends Extension<ExtensionProperties.DashboardsOverviewPrometheusActivity> {\n  type: 'Dashboards/Overview/Activity/Prometheus';\n}\n\nexport const isDashboardsOverviewPrometheusActivity = (\n  e: Extension,\n): e is DashboardsOverviewPrometheusActivity =>\n  e.type === 'Dashboards/Overview/Activity/Prometheus';\n\nexport interface ProjectDashboardInventoryItem\n  extends Extension<ExtensionProperties.ProjectDashboardInventoryItem> {\n  type: 'Project/Dashboard/Inventory/Item';\n}\n\nexport const isProjectDashboardInventoryItem = (e: Extension): e is ProjectDashboardInventoryItem =>\n  e.type === 'Project/Dashboard/Inventory/Item';\n\nexport interface DashboardsOverviewInventoryItemReplacement\n  extends Extension<ExtensionProperties.DashboardsOverviewInventoryItem> {\n  type: 'Dashboards/Overview/Inventory/Item/Replacement';\n}\n\nexport const isDashboardsOverviewInventoryItemReplacement = (\n  e: Extension,\n): e is DashboardsOverviewInventoryItemReplacement =>\n  e.type === 'Dashboards/Overview/Inventory/Item/Replacement';\n\nexport type DashboardCardSpan = 4 | 6 | 12;\n\nexport type K8sActivityProps = {\n  resource: K8sResourceKind;\n};\n\nexport type PrometheusActivityProps = {\n  results: PrometheusResponse[];\n};\n\nexport type SubsystemHealth = {\n  message?: string;\n  state: HealthState;\n};\n\nexport type URLHealthHandler<R> = (\n  response: R,\n  error: any,\n  additionalResource?: FirehoseResult<K8sResourceKind | K8sResourceKind[]>,\n) => SubsystemHealth;\n\nexport type PrometheusHealthPopupProps = {\n  responses: { response: PrometheusResponse; error: any }[];\n  additionalResource?: FirehoseResult<K8sResourceKind | K8sResourceKind[]>;\n};\n\nexport type PrometheusHealthHandler = (\n  responses: { response: PrometheusResponse; error: any }[],\n  additionalResource?: FirehoseResult<K8sResourceKind | K8sResourceKind[]>,\n) => SubsystemHealth;\n\nexport type ResourceHealthHandler<R extends ResourcesObject> = (\n  resourcesResult: WatchK8sResults<R>,\n) => SubsystemHealth;\n\nexport type OperatorHealthHandler = (resources: FirehoseResourcesResult) => OperatorHealth;\n\nexport type OperatorHealth = {\n  health: HealthState;\n  count?: number;\n};\n\nexport type GetOperatorsWithStatuses<R extends K8sResourceCommon = K8sResourceCommon> = (\n  resources: FirehoseResourcesResult,\n) => OperatorStatusWithResources<R>[];\n\nexport type OperatorStatusWithResources<R extends K8sResourceCommon = K8sResourceCommon> = {\n  operators: R[];\n  status: OperatorStatusPriority;\n};\n\nexport type GetOperatorStatusPriority<R extends K8sResourceCommon = K8sResourceCommon> = (\n  operator: R,\n) => OperatorStatusPriority;\n\nexport type OperatorStatusPriority = {\n  title: string;\n  priority: number;\n  icon: React.ReactNode;\n  health: HealthState;\n};\n\nexport type OperatorRowProps<R extends K8sResourceCommon = K8sResourceCommon> = {\n  operatorStatus: OperatorStatusWithResources<R>;\n};\n"]}]}