{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/affinity-modal/components/affinity-edit/affinity-edit.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/affinity-modal/components/affinity-edit/affinity-edit.tsx","mtime":1615298458660},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Form, FormSelect, FormSelectOption, TextInput, Divider, Text, TextVariants, } from '@patternfly/react-core';\nimport { ModalBody } from '@console/internal/components/factory';\nimport { ValidationErrorType } from '@console/shared';\nimport { isLoaded } from '../../../../../../utils';\nimport { ModalFooter } from '../../../../modal/modal-footer';\nimport { AFFINITY_TYPE_LABLES, AFFINITY_CONDITIONS, AFFINITY_CONDITION_LABELS, } from '../../../shared/consts';\nimport { FormRow } from '../../../../../form/form-row';\nimport { isWeightValid, isTermsInvalid, getTopologyKeyValidation } from '../../validations';\nimport { useIDEntities } from '../../../../../../hooks/use-id-entities';\nimport { NodeChecker } from '../../../shared/NodeChecker/node-checker';\nimport { useNodeQualifier } from '../../../shared/hooks';\nimport { AffinityExpressionList } from '../affinity-expression-list/affinity-expression-list';\nimport './affinity-edit.scss';\nexport const AffinityEdit = ({ nodes, affinity, isDisabled, onAffinitySubmit, onCancel, }) => {\n    const [focusedAffinity, setFocusedAffinity] = React.useState(affinity);\n    const [affinityExpressions, , onExpressionAdd, onExpressionChange, onExpressionDelete, initialAffinityExpressionChanged,] = useIDEntities(affinity === null || affinity === void 0 ? void 0 : affinity.expressions);\n    const onLabelExpressionAdd = () => onExpressionAdd({ id: null, key: '', values: [], operator: 'In' });\n    const [affinityFields, , onFieldAdd, onFieldChange, onFieldDelete, initialAffinityFieldChanged,] = useIDEntities(affinity === null || affinity === void 0 ? void 0 : affinity.fields);\n    const initialAffinityChanged = initialAffinityFieldChanged || initialAffinityExpressionChanged;\n    const onLabelFieldAdd = () => onFieldAdd({ id: null, key: '', values: [], operator: 'In' });\n    const isNodeAffinity = focusedAffinity.type === 'nodeAffinity';\n    const { isTopologyDisabled, isTopologyInvalid, topologyValidationMessage, } = getTopologyKeyValidation(focusedAffinity);\n    React.useEffect(() => {\n        if (isTopologyDisabled && focusedAffinity.topologyKey !== 'kubernetes.io/hostname')\n            setFocusedAffinity(Object.assign(Object.assign({}, focusedAffinity), { topologyKey: 'kubernetes.io/hostname' }));\n    }, [focusedAffinity, isTopologyDisabled]);\n    const qualifiedExpressionNodes = useNodeQualifier(nodes, 'label', affinityExpressions);\n    const qualifiedFieldNodes = useNodeQualifier(nodes, 'field', affinityFields);\n    const getQualifiedNodes = () => {\n        if (affinityExpressions.length > 0 && affinityFields.length > 0) {\n            return _.intersection(qualifiedExpressionNodes, qualifiedFieldNodes);\n        }\n        if (affinityExpressions.length > 0) {\n            return qualifiedExpressionNodes;\n        }\n        if (affinityFields.length > 0) {\n            return qualifiedFieldNodes;\n        }\n        return [];\n    };\n    const isExpressionsInvalid = isTermsInvalid(affinityExpressions);\n    const isFieldsInvalid = isTermsInvalid(affinityFields);\n    const isWeightInvalid = !isWeightValid(focusedAffinity);\n    const isAffinityInvalid = (affinityExpressions.length === 0 && affinityFields.length === 0) ||\n        isWeightInvalid ||\n        isExpressionsInvalid ||\n        (isNodeAffinity && isFieldsInvalid) ||\n        (!isNodeAffinity && isTopologyInvalid);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(ModalBody, null,\n            React.createElement(\"div\", { className: \"scheduling-modals__desc-container\" },\n                React.createElement(Text, { className: \"scheduling-modals__desc\", component: TextVariants.small }, 'Define an affinity rule. This rule will be added to the list of affinity rules applied to this workload.')),\n            React.createElement(Form, null,\n                React.createElement(FormRow, { title: \"Type\", fieldId: 'affinity-type', isRequired: true },\n                    React.createElement(FormSelect, { onChange: (value) => setFocusedAffinity(Object.assign(Object.assign({}, focusedAffinity), { type: value })), value: focusedAffinity.type, id: 'affinity-type', isDisabled: isDisabled }, Object.keys(AFFINITY_TYPE_LABLES).map((affinityType) => {\n                        return (React.createElement(FormSelectOption, { key: affinityType, value: affinityType, label: AFFINITY_TYPE_LABLES[affinityType] }));\n                    }))),\n                React.createElement(FormRow, { title: \"Condition\", fieldId: 'affinity-condition', isRequired: true },\n                    React.createElement(FormSelect, { onChange: (value) => setFocusedAffinity(Object.assign(Object.assign({}, focusedAffinity), { condition: value })), value: focusedAffinity.condition, id: 'affinity-condition', isDisabled: isDisabled },\n                        React.createElement(FormSelectOption, { key: AFFINITY_CONDITIONS.preferred, value: AFFINITY_CONDITIONS.preferred, label: AFFINITY_CONDITION_LABELS[AFFINITY_CONDITIONS.preferred] }),\n                        React.createElement(FormSelectOption, { key: AFFINITY_CONDITIONS.required, value: AFFINITY_CONDITIONS.required, label: AFFINITY_CONDITION_LABELS[AFFINITY_CONDITIONS.required] }))),\n                (focusedAffinity === null || focusedAffinity === void 0 ? void 0 : focusedAffinity.condition) === AFFINITY_CONDITIONS.preferred && (React.createElement(FormRow, { title: \"Weight\", fieldId: 'weight', validationType: isWeightInvalid ? ValidationErrorType.Error : ValidationErrorType.Info, validationMessage: \"Weight must be a number between 1-100\", isRequired: true },\n                    React.createElement(TextInput, { key: \"weight\", isDisabled: isDisabled, id: 'weight', value: focusedAffinity.weight || '', onChange: (value) => setFocusedAffinity(Object.assign(Object.assign({}, focusedAffinity), { weight: parseInt(value, 10) })) }))),\n                !isNodeAffinity && (React.createElement(FormRow, { title: \"Topology Key\", fieldId: 'topology-key', validationType: isTopologyInvalid ? ValidationErrorType.Error : ValidationErrorType.Info, validationMessage: topologyValidationMessage },\n                    React.createElement(TextInput, { key: \"topology-key\", isDisabled: isDisabled || isTopologyDisabled, id: 'topology-key', value: focusedAffinity.topologyKey || '', onChange: (value) => setFocusedAffinity(Object.assign(Object.assign({}, focusedAffinity), { topologyKey: value })) }))),\n                React.createElement(Divider, { component: \"div\" }),\n                React.createElement(FormRow, { title: isNodeAffinity ? 'Node Labels' : 'Workload Labels', fieldId: 'expressions', validationType: isExpressionsInvalid && initialAffinityChanged && ValidationErrorType.Error, validationMessage: isExpressionsInvalid && initialAffinityChanged && isNodeAffinity\n                        ? 'Missing fields in node labels'\n                        : 'Missing fields in workload labels' },\n                    React.createElement(\"div\", { className: \"scheduling-modals__desc-container\" }, isNodeAffinity ? (React.createElement(React.Fragment, null,\n                        React.createElement(Text, { className: \"scheduling-modals__desc\", component: TextVariants.small }, 'Select nodes that must have all the following expressions.'),\n                        React.createElement(Text, { className: \"scheduling-modals__desc\", component: TextVariants.small }, 'Label selectors let you select Nodes based on the value of one or more labels.'),\n                        React.createElement(Text, { className: \"scheduling-modals__desc\", component: TextVariants.small }, 'A list of matching nodes will be provided on label input below.'))) : (React.createElement(React.Fragment, null,\n                        React.createElement(Text, { className: \"scheduling-modals__desc\", component: TextVariants.small }, 'Select workloads that must have all the following expressions.')))),\n                    React.createElement(AffinityExpressionList, { expressions: affinityExpressions, addRowText: \"Add Expression\", onAdd: onLabelExpressionAdd, onChange: onExpressionChange, onDelete: onExpressionDelete })),\n                isNodeAffinity && (React.createElement(React.Fragment, null,\n                    React.createElement(Divider, { component: \"div\" }),\n                    React.createElement(FormRow, { title: \"Node Fields\", fieldId: 'fields', validationType: isFieldsInvalid && initialAffinityChanged && ValidationErrorType.Error, validationMessage: isFieldsInvalid && initialAffinityChanged && 'Missing fields in node fields' },\n                        React.createElement(\"div\", { className: \"scheduling-modals__desc-container\" },\n                            React.createElement(React.Fragment, null,\n                                React.createElement(Text, { className: \"scheduling-modals__desc\", component: TextVariants.small }, 'Field selectors let you select Nodes based on the value of one or more resource fields.'),\n                                React.createElement(Text, { className: \"scheduling-modals__desc\", component: TextVariants.small }, 'Note that for Node field expressions, entering a full path is required in the Key field (e.g. `metadata.name: value`).'),\n                                React.createElement(Text, { className: \"scheduling-modals__desc\", component: TextVariants.small }, 'Some fields may not be supported.'))),\n                        React.createElement(AffinityExpressionList, { expressions: affinityFields, addRowText: \"Add Field\", onAdd: onLabelFieldAdd, onChange: onFieldChange, onDelete: onFieldDelete })),\n                    (affinityExpressions.length > 0 || affinityFields.length > 0) &&\n                        !isAffinityInvalid && React.createElement(NodeChecker, { qualifiedNodes: getQualifiedNodes() }))))),\n        React.createElement(ModalFooter, { id: \"affinity-edit\", className: \"kubevirt-affinity-edit__footer\", inProgress: !isLoaded(nodes), onSubmit: () => onAffinitySubmit(Object.assign(Object.assign({}, focusedAffinity), { expressions: affinityExpressions, fields: affinityFields })), onCancel: onCancel, submitButtonText: \"Save Affinity rule\", isDisabled: isAffinityInvalid })));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/affinity-modal/components/affinity-edit/affinity-edit.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/affinity-modal/components/affinity-edit/affinity-edit.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport {\n  Form,\n  FormSelect,\n  FormSelectOption,\n  TextInput,\n  Divider,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport { FirehoseResult } from '@console/internal/components/utils';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport { ModalBody } from '@console/internal/components/factory';\nimport { ValidationErrorType } from '@console/shared';\nimport { isLoaded } from '../../../../../../utils';\nimport { ModalFooter } from '../../../../modal/modal-footer';\nimport {\n  AFFINITY_TYPE_LABLES,\n  AFFINITY_CONDITIONS,\n  AFFINITY_CONDITION_LABELS,\n} from '../../../shared/consts';\nimport { FormRow } from '../../../../../form/form-row';\nimport { isWeightValid, isTermsInvalid, getTopologyKeyValidation } from '../../validations';\nimport { useIDEntities } from '../../../../../../hooks/use-id-entities';\nimport { NodeChecker } from '../../../shared/NodeChecker/node-checker';\nimport { useNodeQualifier } from '../../../shared/hooks';\nimport { AffinityLabel, AffinityRowData } from '../../types';\nimport { AffinityExpressionList } from '../affinity-expression-list/affinity-expression-list';\nimport './affinity-edit.scss';\n\nexport const AffinityEdit: React.FC<AffinityEditProps> = ({\n  nodes,\n  affinity,\n  isDisabled,\n  onAffinitySubmit,\n  onCancel,\n}) => {\n  const [focusedAffinity, setFocusedAffinity] = React.useState(affinity);\n\n  const [\n    affinityExpressions,\n    ,\n    onExpressionAdd,\n    onExpressionChange,\n    onExpressionDelete,\n    initialAffinityExpressionChanged,\n  ] = useIDEntities<AffinityLabel>(affinity?.expressions);\n\n  const onLabelExpressionAdd = () =>\n    onExpressionAdd({ id: null, key: '', values: [], operator: 'In' } as AffinityLabel);\n\n  const [\n    affinityFields,\n    ,\n    onFieldAdd,\n    onFieldChange,\n    onFieldDelete,\n    initialAffinityFieldChanged,\n  ] = useIDEntities<AffinityLabel>(affinity?.fields);\n\n  const initialAffinityChanged = initialAffinityFieldChanged || initialAffinityExpressionChanged;\n\n  const onLabelFieldAdd = () =>\n    onFieldAdd({ id: null, key: '', values: [], operator: 'In' } as AffinityLabel);\n\n  const isNodeAffinity = focusedAffinity.type === 'nodeAffinity';\n  const {\n    isTopologyDisabled,\n    isTopologyInvalid,\n    topologyValidationMessage,\n  } = getTopologyKeyValidation(focusedAffinity);\n\n  React.useEffect(() => {\n    if (isTopologyDisabled && focusedAffinity.topologyKey !== 'kubernetes.io/hostname')\n      setFocusedAffinity({ ...focusedAffinity, topologyKey: 'kubernetes.io/hostname' });\n  }, [focusedAffinity, isTopologyDisabled]);\n\n  const qualifiedExpressionNodes = useNodeQualifier(nodes, 'label', affinityExpressions);\n  const qualifiedFieldNodes = useNodeQualifier(nodes, 'field', affinityFields);\n\n  const getQualifiedNodes = () => {\n    if (affinityExpressions.length > 0 && affinityFields.length > 0) {\n      return _.intersection(qualifiedExpressionNodes, qualifiedFieldNodes);\n    }\n    if (affinityExpressions.length > 0) {\n      return qualifiedExpressionNodes;\n    }\n    if (affinityFields.length > 0) {\n      return qualifiedFieldNodes;\n    }\n    return [];\n  };\n\n  const isExpressionsInvalid = isTermsInvalid(affinityExpressions);\n  const isFieldsInvalid = isTermsInvalid(affinityFields);\n  const isWeightInvalid = !isWeightValid(focusedAffinity);\n\n  const isAffinityInvalid =\n    (affinityExpressions.length === 0 && affinityFields.length === 0) ||\n    isWeightInvalid ||\n    isExpressionsInvalid ||\n    (isNodeAffinity && isFieldsInvalid) ||\n    (!isNodeAffinity && isTopologyInvalid);\n\n  return (\n    <>\n      <ModalBody>\n        <div className=\"scheduling-modals__desc-container\">\n          <Text className=\"scheduling-modals__desc\" component={TextVariants.small}>\n            {\n              'Define an affinity rule. This rule will be added to the list of affinity rules applied to this workload.'\n            }\n          </Text>\n        </div>\n        <Form>\n          <FormRow title=\"Type\" fieldId={'affinity-type'} isRequired>\n            <FormSelect\n              onChange={(value) =>\n                setFocusedAffinity({\n                  ...focusedAffinity,\n                  type: value as AffinityRowData['type'],\n                })\n              }\n              value={focusedAffinity.type}\n              id={'affinity-type'}\n              isDisabled={isDisabled}\n            >\n              {Object.keys(AFFINITY_TYPE_LABLES).map((affinityType) => {\n                return (\n                  <FormSelectOption\n                    key={affinityType}\n                    value={affinityType}\n                    label={AFFINITY_TYPE_LABLES[affinityType]}\n                  />\n                );\n              })}\n            </FormSelect>\n          </FormRow>\n          <FormRow title=\"Condition\" fieldId={'affinity-condition'} isRequired>\n            <FormSelect\n              onChange={(value) =>\n                setFocusedAffinity({\n                  ...focusedAffinity,\n                  condition: value as AffinityRowData['condition'],\n                })\n              }\n              value={focusedAffinity.condition}\n              id={'affinity-condition'}\n              isDisabled={isDisabled}\n            >\n              <FormSelectOption\n                key={AFFINITY_CONDITIONS.preferred}\n                value={AFFINITY_CONDITIONS.preferred}\n                label={AFFINITY_CONDITION_LABELS[AFFINITY_CONDITIONS.preferred]}\n              />\n              <FormSelectOption\n                key={AFFINITY_CONDITIONS.required}\n                value={AFFINITY_CONDITIONS.required}\n                label={AFFINITY_CONDITION_LABELS[AFFINITY_CONDITIONS.required]}\n              />\n            </FormSelect>\n          </FormRow>\n          {focusedAffinity?.condition === AFFINITY_CONDITIONS.preferred && (\n            <FormRow\n              title=\"Weight\"\n              fieldId={'weight'}\n              validationType={\n                isWeightInvalid ? ValidationErrorType.Error : ValidationErrorType.Info\n              }\n              validationMessage=\"Weight must be a number between 1-100\"\n              isRequired\n            >\n              <TextInput\n                key=\"weight\"\n                isDisabled={isDisabled}\n                id={'weight'}\n                value={focusedAffinity.weight || ''}\n                onChange={(value) =>\n                  setFocusedAffinity({ ...focusedAffinity, weight: parseInt(value, 10) })\n                }\n              />\n            </FormRow>\n          )}\n          {!isNodeAffinity && (\n            <FormRow\n              title=\"Topology Key\"\n              fieldId={'topology-key'}\n              validationType={\n                isTopologyInvalid ? ValidationErrorType.Error : ValidationErrorType.Info\n              }\n              validationMessage={topologyValidationMessage}\n            >\n              <TextInput\n                key=\"topology-key\"\n                isDisabled={isDisabled || isTopologyDisabled}\n                id={'topology-key'}\n                value={focusedAffinity.topologyKey || ''}\n                onChange={(value) => setFocusedAffinity({ ...focusedAffinity, topologyKey: value })}\n              />\n            </FormRow>\n          )}\n          <Divider component=\"div\" />\n          <FormRow\n            title={isNodeAffinity ? 'Node Labels' : 'Workload Labels'}\n            fieldId={'expressions'}\n            validationType={\n              isExpressionsInvalid && initialAffinityChanged && ValidationErrorType.Error\n            }\n            validationMessage={\n              isExpressionsInvalid && initialAffinityChanged && isNodeAffinity\n                ? 'Missing fields in node labels'\n                : 'Missing fields in workload labels'\n            }\n          >\n            <div className=\"scheduling-modals__desc-container\">\n              {isNodeAffinity ? (\n                <>\n                  <Text className=\"scheduling-modals__desc\" component={TextVariants.small}>\n                    {'Select nodes that must have all the following expressions.'}\n                  </Text>\n                  <Text className=\"scheduling-modals__desc\" component={TextVariants.small}>\n                    {\n                      'Label selectors let you select Nodes based on the value of one or more labels.'\n                    }\n                  </Text>\n                  <Text className=\"scheduling-modals__desc\" component={TextVariants.small}>\n                    {'A list of matching nodes will be provided on label input below.'}\n                  </Text>\n                </>\n              ) : (\n                <>\n                  <Text className=\"scheduling-modals__desc\" component={TextVariants.small}>\n                    {'Select workloads that must have all the following expressions.'}\n                  </Text>\n                </>\n              )}\n            </div>\n            <AffinityExpressionList\n              expressions={affinityExpressions}\n              addRowText=\"Add Expression\"\n              onAdd={onLabelExpressionAdd}\n              onChange={onExpressionChange}\n              onDelete={onExpressionDelete}\n            />\n          </FormRow>\n          {isNodeAffinity && (\n            <>\n              <Divider component=\"div\" />\n              <FormRow\n                title=\"Node Fields\"\n                fieldId={'fields'}\n                validationType={\n                  isFieldsInvalid && initialAffinityChanged && ValidationErrorType.Error\n                }\n                validationMessage={\n                  isFieldsInvalid && initialAffinityChanged && 'Missing fields in node fields'\n                }\n              >\n                <div className=\"scheduling-modals__desc-container\">\n                  <>\n                    <Text className=\"scheduling-modals__desc\" component={TextVariants.small}>\n                      {\n                        'Field selectors let you select Nodes based on the value of one or more resource fields.'\n                      }\n                    </Text>\n                    <Text className=\"scheduling-modals__desc\" component={TextVariants.small}>\n                      {\n                        'Note that for Node field expressions, entering a full path is required in the Key field (e.g. `metadata.name: value`).'\n                      }\n                    </Text>\n                    <Text className=\"scheduling-modals__desc\" component={TextVariants.small}>\n                      {'Some fields may not be supported.'}\n                    </Text>\n                  </>\n                </div>\n                <AffinityExpressionList\n                  expressions={affinityFields}\n                  addRowText=\"Add Field\"\n                  onAdd={onLabelFieldAdd}\n                  onChange={onFieldChange}\n                  onDelete={onFieldDelete}\n                />\n              </FormRow>\n              {(affinityExpressions.length > 0 || affinityFields.length > 0) &&\n                !isAffinityInvalid && <NodeChecker qualifiedNodes={getQualifiedNodes()} />}\n            </>\n          )}\n        </Form>\n      </ModalBody>\n      <ModalFooter\n        id=\"affinity-edit\"\n        className=\"kubevirt-affinity-edit__footer\"\n        inProgress={!isLoaded(nodes)}\n        onSubmit={() =>\n          onAffinitySubmit({\n            ...focusedAffinity,\n            expressions: affinityExpressions,\n            fields: affinityFields,\n          })\n        }\n        onCancel={onCancel}\n        submitButtonText=\"Save Affinity rule\"\n        isDisabled={isAffinityInvalid}\n      />\n    </>\n  );\n};\n\ntype AffinityEditProps = {\n  nodes?: FirehoseResult<NodeKind[]>;\n  affinity: AffinityRowData;\n  isDisabled?: boolean;\n  onAffinitySubmit: (affinity: AffinityRowData) => void;\n  onCancel: (affinity: AffinityRowData) => void;\n};\n"]}]}