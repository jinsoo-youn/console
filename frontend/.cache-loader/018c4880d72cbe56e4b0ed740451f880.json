{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/pipeline-details/PipelineVisualizationStepList.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/pipeline-details/PipelineVisualizationStepList.tsx","mtime":1616735742390},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport classNames from 'classnames';\nimport { getRunStatusColor, runStatus } from '../../../../utils/pipeline-augment';\nimport { StatusIcon } from './StatusIcon';\nimport './PipelineVisualizationStepList.scss';\nconst TooltipColoredStatusIcon = ({ status }) => {\n    const size = 18;\n    const sharedProps = {\n        height: size,\n        width: size,\n    };\n    const icon = React.createElement(StatusIcon, Object.assign({ status: status }, sharedProps));\n    if (status === runStatus.Succeeded || status === runStatus.Failed) {\n        // Succeeded and Failed icons have transparent centers shapes - in tooltips, this becomes an undesired black\n        // This will simply wrap the icon and place a white backdrop\n        return (React.createElement(\"div\", { style: { color: getRunStatusColor(status).pftoken.value } },\n            React.createElement(\"svg\", Object.assign({}, sharedProps),\n                React.createElement(\"circle\", { className: \"odc-pipeline-vis-steps-list__icon-backdrop\", cx: size / 2, cy: size / 2, r: size / 2 - 1 }),\n                icon)));\n    }\n    return icon;\n};\nexport const PipelineVisualizationStepList = ({ isSpecOverview, taskName, steps, }) => (React.createElement(\"div\", { className: \"odc-pipeline-vis-steps-list\" },\n    React.createElement(\"div\", { className: \"odc-pipeline-vis-steps-list__task-name\" }, taskName),\n    steps.map(({ duration, name, runStatus: status }) => {\n        return (React.createElement(\"div\", { className: classNames('odc-pipeline-vis-steps-list__step', {\n                'odc-pipeline-vis-steps-list__step--task-run': !isSpecOverview,\n            }), key: name },\n            !isSpecOverview ? (React.createElement(\"div\", { className: \"odc-pipeline-vis-steps-list__icon\" },\n                React.createElement(TooltipColoredStatusIcon, { status: status }))) : (React.createElement(\"span\", { className: \"odc-pipeline-vis-steps-list__bullet\" }, \"\\u2022\")),\n            React.createElement(\"div\", { className: \"odc-pipeline-vis-steps-list__name\" }, name),\n            !isSpecOverview && (React.createElement(\"div\", { className: \"odc-pipeline-vis-steps-list__duration\" }, duration))));\n    })));\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/pipeline-details/PipelineVisualizationStepList.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/pipeline-details/PipelineVisualizationStepList.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,UAAU,MAAM,YAAY,CAAC;AACpC,OAAO,EAAE,iBAAiB,EAAE,SAAS,EAAE,MAAM,oCAAoC,CAAC;AAClF,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAG1C,OAAO,sCAAsC,CAAC;AAQ9C,MAAM,wBAAwB,GAAG,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE;IAC9C,MAAM,IAAI,GAAG,EAAE,CAAC;IAChB,MAAM,WAAW,GAAG;QAClB,MAAM,EAAE,IAAI;QACZ,KAAK,EAAE,IAAI;KACZ,CAAC;IAEF,MAAM,IAAI,GAAG,oBAAC,UAAU,kBAAC,MAAM,EAAE,MAAM,IAAM,WAAW,EAAI,CAAC;IAE7D,IAAI,MAAM,KAAK,SAAS,CAAC,SAAS,IAAI,MAAM,KAAK,SAAS,CAAC,MAAM,EAAE;QACjE,4GAA4G;QAC5G,4DAA4D;QAC5D,OAAO,CACL,6BAAK,KAAK,EAAE,EAAE,KAAK,EAAE,iBAAiB,CAAC,MAAM,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE;YAC5D,6CAAS,WAAW;gBAClB,gCACE,SAAS,EAAC,4CAA4C,EACtD,EAAE,EAAE,IAAI,GAAG,CAAC,EACZ,EAAE,EAAE,IAAI,GAAG,CAAC,EACZ,CAAC,EAAE,IAAI,GAAG,CAAC,GAAG,CAAC,GACf;gBACD,IAAI,CACD,CACF,CACP,CAAC;KACH;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,6BAA6B,GAAiD,CAAC,EAC1F,cAAc,EACd,QAAQ,EACR,KAAK,GACN,EAAE,EAAE,CAAC,CACJ,6BAAK,SAAS,EAAC,6BAA6B;IAC1C,6BAAK,SAAS,EAAC,wCAAwC,IAAE,QAAQ,CAAO;IACvE,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,QAAQ,EAAE,IAAI,EAAE,SAAS,EAAE,MAAM,EAAE,EAAE,EAAE;QACnD,OAAO,CACL,6BACE,SAAS,EAAE,UAAU,CAAC,mCAAmC,EAAE;gBACzD,6CAA6C,EAAE,CAAC,cAAc;aAC/D,CAAC,EACF,GAAG,EAAE,IAAI;YAER,CAAC,cAAc,CAAC,CAAC,CAAC,CACjB,6BAAK,SAAS,EAAC,mCAAmC;gBAChD,oBAAC,wBAAwB,IAAC,MAAM,EAAE,MAAM,GAAI,CACxC,CACP,CAAC,CAAC,CAAC,CACF,8BAAM,SAAS,EAAC,qCAAqC,aAAc,CACpE;YACD,6BAAK,SAAS,EAAC,mCAAmC,IAAE,IAAI,CAAO;YAC9D,CAAC,cAAc,IAAI,CAClB,6BAAK,SAAS,EAAC,uCAAuC,IAAE,QAAQ,CAAO,CACxE,CACG,CACP,CAAC;IACJ,CAAC,CAAC,CACE,CACP,CAAC","sourcesContent":["import * as React from 'react';\nimport classNames from 'classnames';\nimport { getRunStatusColor, runStatus } from '../../../../utils/pipeline-augment';\nimport { StatusIcon } from './StatusIcon';\nimport { StepStatus } from './pipeline-step-utils';\n\nimport './PipelineVisualizationStepList.scss';\n\nexport interface PipelineVisualizationStepListProps {\n  isSpecOverview: boolean;\n  taskName: string;\n  steps: StepStatus[];\n}\n\nconst TooltipColoredStatusIcon = ({ status }) => {\n  const size = 18;\n  const sharedProps = {\n    height: size,\n    width: size,\n  };\n\n  const icon = <StatusIcon status={status} {...sharedProps} />;\n\n  if (status === runStatus.Succeeded || status === runStatus.Failed) {\n    // Succeeded and Failed icons have transparent centers shapes - in tooltips, this becomes an undesired black\n    // This will simply wrap the icon and place a white backdrop\n    return (\n      <div style={{ color: getRunStatusColor(status).pftoken.value }}>\n        <svg {...sharedProps}>\n          <circle\n            className=\"odc-pipeline-vis-steps-list__icon-backdrop\"\n            cx={size / 2}\n            cy={size / 2}\n            r={size / 2 - 1}\n          />\n          {icon}\n        </svg>\n      </div>\n    );\n  }\n\n  return icon;\n};\n\nexport const PipelineVisualizationStepList: React.FC<PipelineVisualizationStepListProps> = ({\n  isSpecOverview,\n  taskName,\n  steps,\n}) => (\n  <div className=\"odc-pipeline-vis-steps-list\">\n    <div className=\"odc-pipeline-vis-steps-list__task-name\">{taskName}</div>\n    {steps.map(({ duration, name, runStatus: status }) => {\n      return (\n        <div\n          className={classNames('odc-pipeline-vis-steps-list__step', {\n            'odc-pipeline-vis-steps-list__step--task-run': !isSpecOverview,\n          })}\n          key={name}\n        >\n          {!isSpecOverview ? (\n            <div className=\"odc-pipeline-vis-steps-list__icon\">\n              <TooltipColoredStatusIcon status={status} />\n            </div>\n          ) : (\n            <span className=\"odc-pipeline-vis-steps-list__bullet\">&bull;</span>\n          )}\n          <div className=\"odc-pipeline-vis-steps-list__name\">{name}</div>\n          {!isSpecOverview && (\n            <div className=\"odc-pipeline-vis-steps-list__duration\">{duration}</div>\n          )}\n        </div>\n      );\n    })}\n  </div>\n);\n"]}]}