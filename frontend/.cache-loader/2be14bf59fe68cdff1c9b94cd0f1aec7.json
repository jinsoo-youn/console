{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/topology/components/knativeComponentUtils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/topology/components/knativeComponentUtils.ts","mtime":1616735742410},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { errorModal } from '@console/internal/components/modals';\nimport { CREATE_CONNECTOR_DROP_TYPE, CREATE_CONNECTOR_OPERATION, } from '@console/topology';\nimport { NODE_DRAG_TYPE, EDGE_DRAG_TYPE, } from '@console/dev-console/src/components/topology';\nimport { TYPE_EVENT_SOURCE_LINK, TYPE_KNATIVE_SERVICE } from '../const';\nimport { createSinkConnection } from '../knative-topology-utils';\nexport const MOVE_EV_SRC_CONNECTOR_OPERATION = 'moveeventsourceconnector';\nexport const nodesEdgeIsDragging = (monitor, props) => monitor.isDragging() &&\n    ((monitor.getOperation() === CREATE_CONNECTOR_OPERATION && monitor.getItem() === props.element) ||\n        (monitor.getOperation() === MOVE_EV_SRC_CONNECTOR_OPERATION &&\n            monitor.getItem().getSource()) === props.element);\nexport const canDropEventSourceSinkOnNode = (operation, edge, node) => edge.getSource() !== node &&\n    node.getType() === TYPE_KNATIVE_SERVICE &&\n    operation === MOVE_EV_SRC_CONNECTOR_OPERATION &&\n    !node.getTargetEdges().find((e) => e.getSource() === edge.getSource());\nexport const knativeServiceDropTargetSpec = {\n    accept: [EDGE_DRAG_TYPE],\n    canDrop: (item, monitor, props) => item.getType() === TYPE_EVENT_SOURCE_LINK && item.getSource() !== props.element,\n    collect: (monitor, props) => {\n        var _a;\n        return ({\n            canDrop: monitor.isDragging() && ((_a = monitor.getOperation()) === null || _a === void 0 ? void 0 : _a.type) === MOVE_EV_SRC_CONNECTOR_OPERATION,\n            dropTarget: monitor.isOver({ shallow: true }),\n            edgeDragging: nodesEdgeIsDragging(monitor, props),\n        });\n    },\n};\nexport const eventSourceLinkDragSourceSpec = () => ({\n    item: { type: EDGE_DRAG_TYPE },\n    operation: { type: MOVE_EV_SRC_CONNECTOR_OPERATION, edit: true },\n    begin: (monitor, props) => {\n        props.element.raise();\n        return props.element;\n    },\n    drag: (event, monitor, props) => {\n        props.element.setEndPoint(event.x, event.y);\n    },\n    end: (dropResult, monitor, props) => {\n        props.element.setEndPoint();\n        if (monitor.didDrop() &&\n            dropResult &&\n            canDropEventSourceSinkOnNode(monitor.getOperation().type, props.element, dropResult)) {\n            createSinkConnection(props.element.getSource(), dropResult).catch((error) => {\n                errorModal({\n                    title: 'Error moving event source sink',\n                    error: error.message,\n                    showIcon: true,\n                });\n            });\n        }\n    },\n    collect: (monitor) => ({\n        dragging: monitor.isDragging(),\n    }),\n});\nexport const eventSourceTargetSpec = {\n    accept: [NODE_DRAG_TYPE, EDGE_DRAG_TYPE, CREATE_CONNECTOR_DROP_TYPE],\n    canDrop: () => {\n        return false;\n    },\n    collect: (monitor, props) => ({\n        edgeDragging: nodesEdgeIsDragging(monitor, props),\n    }),\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/topology/components/knativeComponentUtils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/topology/components/knativeComponentUtils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,qCAAqC,CAAC;AACjE,OAAO,EAOL,0BAA0B,EAC1B,0BAA0B,GAE3B,MAAM,mBAAmB,CAAC;AAC3B,OAAO,EAEL,cAAc,EACd,cAAc,GAGf,MAAM,8CAA8C,CAAC;AACtD,OAAO,EAAE,sBAAsB,EAAE,oBAAoB,EAAE,MAAM,UAAU,CAAC;AACxE,OAAO,EAAE,oBAAoB,EAAE,MAAM,2BAA2B,CAAC;AAEjE,MAAM,CAAC,MAAM,+BAA+B,GAAG,0BAA0B,CAAC;AAE1E,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CACpD,OAAO,CAAC,UAAU,EAAE;IACpB,CAAC,CAAC,OAAO,CAAC,YAAY,EAAE,KAAK,0BAA0B,IAAI,OAAO,CAAC,OAAO,EAAE,KAAK,KAAK,CAAC,OAAO,CAAC;QAC7F,CAAC,OAAO,CAAC,YAAY,EAAE,KAAK,+BAA+B;YACzD,OAAO,CAAC,OAAO,EAAE,CAAC,SAAS,EAAE,CAAC,KAAK,KAAK,CAAC,OAAO,CAAC,CAAC;AAExD,MAAM,CAAC,MAAM,4BAA4B,GAAG,CAAC,SAAiB,EAAE,IAAU,EAAE,IAAU,EAAW,EAAE,CACjG,IAAI,CAAC,SAAS,EAAE,KAAK,IAAI;IACzB,IAAI,CAAC,OAAO,EAAE,KAAK,oBAAoB;IACvC,SAAS,KAAK,+BAA+B;IAC7C,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,SAAS,EAAE,KAAK,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;AAEzE,MAAM,CAAC,MAAM,4BAA4B,GAKrC;IACF,MAAM,EAAE,CAAC,cAAc,CAAC;IACxB,OAAO,EAAE,CAAC,IAAI,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,CAChC,IAAI,CAAC,OAAO,EAAE,KAAK,sBAAsB,IAAI,IAAI,CAAC,SAAS,EAAE,KAAK,KAAK,CAAC,OAAO;IACjF,OAAO,EAAE,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE;;QAAC,OAAA,CAAC;YAC5B,OAAO,EACL,OAAO,CAAC,UAAU,EAAE,IAAI,OAAA,OAAO,CAAC,YAAY,EAAE,0CAAE,IAAI,MAAK,+BAA+B;YAC1F,UAAU,EAAE,OAAO,CAAC,MAAM,CAAC,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;YAC7C,YAAY,EAAE,mBAAmB,CAAC,OAAO,EAAE,KAAK,CAAC;SAClD,CAAC,CAAA;KAAA;CACH,CAAC;AAEF,MAAM,CAAC,MAAM,6BAA6B,GAAG,GAM3C,EAAE,CAAC,CAAC;IACJ,IAAI,EAAE,EAAE,IAAI,EAAE,cAAc,EAAE;IAC9B,SAAS,EAAE,EAAE,IAAI,EAAE,+BAA+B,EAAE,IAAI,EAAE,IAAI,EAAE;IAChE,KAAK,EAAE,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE;QACxB,KAAK,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QACtB,OAAO,KAAK,CAAC,OAAO,CAAC;IACvB,CAAC;IACD,IAAI,EAAE,CAAC,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;QAC9B,KAAK,CAAC,OAAO,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;IAC9C,CAAC;IACD,GAAG,EAAE,CAAC,UAAU,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE;QAClC,KAAK,CAAC,OAAO,CAAC,WAAW,EAAE,CAAC;QAC5B,IACE,OAAO,CAAC,OAAO,EAAE;YACjB,UAAU;YACV,4BAA4B,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC,IAAI,EAAE,KAAK,CAAC,OAAO,EAAE,UAAU,CAAC,EACpF;YACA,oBAAoB,CAAC,KAAK,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE,UAAU,CAAC,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;gBAC1E,UAAU,CAAC;oBACT,KAAK,EAAE,gCAAgC;oBACvC,KAAK,EAAE,KAAK,CAAC,OAAO;oBACpB,QAAQ,EAAE,IAAI;iBACf,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;SACJ;IACH,CAAC;IACD,OAAO,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC;QACrB,QAAQ,EAAE,OAAO,CAAC,UAAU,EAAE;KAC/B,CAAC;CACH,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,qBAAqB,GAK9B;IACF,MAAM,EAAE,CAAC,cAAc,EAAE,cAAc,EAAE,0BAA0B,CAAC;IACpE,OAAO,EAAE,GAAG,EAAE;QACZ,OAAO,KAAK,CAAC;IACf,CAAC;IACD,OAAO,EAAE,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE,CAAC,CAAC;QAC5B,YAAY,EAAE,mBAAmB,CAAC,OAAO,EAAE,KAAK,CAAC;KAClD,CAAC;CACH,CAAC","sourcesContent":["import { errorModal } from '@console/internal/components/modals';\nimport {\n  GraphElement,\n  Edge,\n  Node,\n  DropTargetSpec,\n  DragSourceSpec,\n  DragObjectWithType,\n  CREATE_CONNECTOR_DROP_TYPE,\n  CREATE_CONNECTOR_OPERATION,\n  DragSpecOperationType,\n} from '@console/topology';\nimport {\n  NodeComponentProps,\n  NODE_DRAG_TYPE,\n  EDGE_DRAG_TYPE,\n  EdgeComponentProps,\n  EditableDragOperationType,\n} from '@console/dev-console/src/components/topology';\nimport { TYPE_EVENT_SOURCE_LINK, TYPE_KNATIVE_SERVICE } from '../const';\nimport { createSinkConnection } from '../knative-topology-utils';\n\nexport const MOVE_EV_SRC_CONNECTOR_OPERATION = 'moveeventsourceconnector';\n\nexport const nodesEdgeIsDragging = (monitor, props) =>\n  monitor.isDragging() &&\n  ((monitor.getOperation() === CREATE_CONNECTOR_OPERATION && monitor.getItem() === props.element) ||\n    (monitor.getOperation() === MOVE_EV_SRC_CONNECTOR_OPERATION &&\n      monitor.getItem().getSource()) === props.element);\n\nexport const canDropEventSourceSinkOnNode = (operation: string, edge: Edge, node: Node): boolean =>\n  edge.getSource() !== node &&\n  node.getType() === TYPE_KNATIVE_SERVICE &&\n  operation === MOVE_EV_SRC_CONNECTOR_OPERATION &&\n  !node.getTargetEdges().find((e) => e.getSource() === edge.getSource());\n\nexport const knativeServiceDropTargetSpec: DropTargetSpec<\n  Edge,\n  any,\n  { canDrop: boolean; dropTarget: boolean; edgeDragging: boolean },\n  NodeComponentProps\n> = {\n  accept: [EDGE_DRAG_TYPE],\n  canDrop: (item, monitor, props) =>\n    item.getType() === TYPE_EVENT_SOURCE_LINK && item.getSource() !== props.element,\n  collect: (monitor, props) => ({\n    canDrop:\n      monitor.isDragging() && monitor.getOperation()?.type === MOVE_EV_SRC_CONNECTOR_OPERATION,\n    dropTarget: monitor.isOver({ shallow: true }),\n    edgeDragging: nodesEdgeIsDragging(monitor, props),\n  }),\n};\n\nexport const eventSourceLinkDragSourceSpec = (): DragSourceSpec<\n  DragObjectWithType,\n  DragSpecOperationType<EditableDragOperationType>,\n  Node,\n  { dragging: boolean },\n  EdgeComponentProps\n> => ({\n  item: { type: EDGE_DRAG_TYPE },\n  operation: { type: MOVE_EV_SRC_CONNECTOR_OPERATION, edit: true },\n  begin: (monitor, props) => {\n    props.element.raise();\n    return props.element;\n  },\n  drag: (event, monitor, props) => {\n    props.element.setEndPoint(event.x, event.y);\n  },\n  end: (dropResult, monitor, props) => {\n    props.element.setEndPoint();\n    if (\n      monitor.didDrop() &&\n      dropResult &&\n      canDropEventSourceSinkOnNode(monitor.getOperation().type, props.element, dropResult)\n    ) {\n      createSinkConnection(props.element.getSource(), dropResult).catch((error) => {\n        errorModal({\n          title: 'Error moving event source sink',\n          error: error.message,\n          showIcon: true,\n        });\n      });\n    }\n  },\n  collect: (monitor) => ({\n    dragging: monitor.isDragging(),\n  }),\n});\n\nexport const eventSourceTargetSpec: DropTargetSpec<\n  GraphElement,\n  any,\n  {},\n  { element: GraphElement }\n> = {\n  accept: [NODE_DRAG_TYPE, EDGE_DRAG_TYPE, CREATE_CONNECTOR_DROP_TYPE],\n  canDrop: () => {\n    return false;\n  },\n  collect: (monitor, props) => ({\n    edgeDragging: nodesEdgeIsDragging(monitor, props),\n  }),\n};\n"]}]}