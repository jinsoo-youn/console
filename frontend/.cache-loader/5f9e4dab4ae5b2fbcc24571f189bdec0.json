{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/formik-fields/TextColumnField.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/formik-fields/TextColumnField.tsx","mtime":1615298458600},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { FieldArray, useField } from 'formik';\nimport { Flex, FlexItem, FlexModifiers, FormGroup, TextInputTypes, Button, ButtonVariant, ButtonType, } from '@patternfly/react-core';\nimport { MinusCircleIcon } from '@patternfly/react-icons';\nimport { InputField, useFormikValidationFix } from '@console/shared';\nimport MultiColumnFieldFooter from './multi-column-field/MultiColumnFieldFooter';\nimport { getFieldId } from './field-utils';\nconst TextColumnField = ({ required, name, label, addLabel, helpText, placeholder, isReadOnly, disableDeleteRow, }) => {\n    var _a;\n    const [field, { touched, error }] = useField(name);\n    useFormikValidationFix(field.value);\n    const rowValues = (_a = field.value) !== null && _a !== void 0 ? _a : [''];\n    const fieldId = getFieldId(name, 'single-column');\n    const isValid = !(touched && error);\n    return (React.createElement(FieldArray, { name: name, render: (arrayHelpers) => {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(FormGroup, { fieldId: fieldId, label: label, isValid: isValid, isRequired: required, helperText: helpText }, rowValues.map((v, idx) => {\n                    return (React.createElement(Flex, { key: `${idx.toString()}`, style: { marginBottom: 'var(--pf-global--spacer--sm)' } },\n                        React.createElement(FlexItem, { breakpointMods: [{ modifier: FlexModifiers.grow }] },\n                            React.createElement(InputField, { type: TextInputTypes.text, name: `${name}.${idx}`, placeholder: placeholder, isReadOnly: isReadOnly })),\n                        !isReadOnly && (React.createElement(FlexItem, null,\n                            React.createElement(Button, { \"aria-label\": \"Delete\", variant: ButtonVariant.plain, type: ButtonType.button, isInline: true, isDisabled: disableDeleteRow, onClick: () => {\n                                    arrayHelpers.remove(idx);\n                                } },\n                                React.createElement(MinusCircleIcon, null))))));\n                })),\n                !isReadOnly && (React.createElement(MultiColumnFieldFooter, { addLabel: addLabel, onAdd: () => {\n                        arrayHelpers.push('');\n                    } }))));\n        } }));\n};\nexport default TextColumnField;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/formik-fields/TextColumnField.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/formik-fields/TextColumnField.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAC9C,OAAO,EACL,IAAI,EACJ,QAAQ,EACR,aAAa,EACb,SAAS,EACT,cAAc,EACd,MAAM,EACN,aAAa,EACb,UAAU,GACX,MAAM,wBAAwB,CAAC;AAChC,OAAO,EAAE,eAAe,EAAE,MAAM,yBAAyB,CAAC;AAC1D,OAAO,EAAE,UAAU,EAAE,sBAAsB,EAAE,MAAM,iBAAiB,CAAC;AACrE,OAAO,sBAAsB,MAAM,6CAA6C,CAAC;AACjF,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAY3C,MAAM,eAAe,GAAmC,CAAC,EACvD,QAAQ,EACR,IAAI,EACJ,KAAK,EACL,QAAQ,EACR,QAAQ,EACR,WAAW,EACX,UAAU,EACV,gBAAgB,GACjB,EAAE,EAAE;;IACH,MAAM,CAAC,KAAK,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,GAAG,QAAQ,CAAW,IAAI,CAAC,CAAC;IAC7D,sBAAsB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IACpC,MAAM,SAAS,SAAG,KAAK,CAAC,KAAK,mCAAI,CAAC,EAAE,CAAC,CAAC;IACtC,MAAM,OAAO,GAAG,UAAU,CAAC,IAAI,EAAE,eAAe,CAAC,CAAC;IAClD,MAAM,OAAO,GAAG,CAAC,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;IACpC,OAAO,CACL,oBAAC,UAAU,IACT,IAAI,EAAE,IAAI,EACV,MAAM,EAAE,CAAC,YAAY,EAAE,EAAE;YACvB,OAAO,CACL;gBACE,oBAAC,SAAS,IACR,OAAO,EAAE,OAAO,EAChB,KAAK,EAAE,KAAK,EACZ,OAAO,EAAE,OAAO,EAChB,UAAU,EAAE,QAAQ,EACpB,UAAU,EAAE,QAAQ,IAEnB,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE;oBACxB,OAAO,CACL,oBAAC,IAAI,IACH,GAAG,EAAE,GAAG,GAAG,CAAC,QAAQ,EAAE,EAAE,EACxB,KAAK,EAAE,EAAE,YAAY,EAAE,8BAA8B,EAAE;wBAEvD,oBAAC,QAAQ,IAAC,cAAc,EAAE,CAAC,EAAE,QAAQ,EAAE,aAAa,CAAC,IAAI,EAAE,CAAC;4BAC1D,oBAAC,UAAU,IACT,IAAI,EAAE,cAAc,CAAC,IAAI,EACzB,IAAI,EAAE,GAAG,IAAI,IAAI,GAAG,EAAE,EACtB,WAAW,EAAE,WAAW,EACxB,UAAU,EAAE,UAAU,GACtB,CACO;wBACV,CAAC,UAAU,IAAI,CACd,oBAAC,QAAQ;4BACP,oBAAC,MAAM,kBACM,QAAQ,EACnB,OAAO,EAAE,aAAa,CAAC,KAAK,EAC5B,IAAI,EAAE,UAAU,CAAC,MAAM,EACvB,QAAQ,QACR,UAAU,EAAE,gBAAgB,EAC5B,OAAO,EAAE,GAAG,EAAE;oCACZ,YAAY,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;gCAC3B,CAAC;gCAED,oBAAC,eAAe,OAAG,CACZ,CACA,CACZ,CACI,CACR,CAAC;gBACJ,CAAC,CAAC,CACQ;gBACX,CAAC,UAAU,IAAI,CACd,oBAAC,sBAAsB,IACrB,QAAQ,EAAE,QAAQ,EAClB,KAAK,EAAE,GAAG,EAAE;wBACV,YAAY,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;oBACxB,CAAC,GACD,CACH,CACA,CACJ,CAAC;QACJ,CAAC,GACD,CACH,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,eAAe,CAAC","sourcesContent":["import * as React from 'react';\nimport { FieldArray, useField } from 'formik';\nimport {\n  Flex,\n  FlexItem,\n  FlexModifiers,\n  FormGroup,\n  TextInputTypes,\n  Button,\n  ButtonVariant,\n  ButtonType,\n} from '@patternfly/react-core';\nimport { MinusCircleIcon } from '@patternfly/react-icons';\nimport { InputField, useFormikValidationFix } from '@console/shared';\nimport MultiColumnFieldFooter from './multi-column-field/MultiColumnFieldFooter';\nimport { getFieldId } from './field-utils';\nimport { FieldProps } from './field-types';\n\nexport interface TextColumnFieldProps extends FieldProps {\n  required?: boolean;\n  name: string;\n  label: string;\n  addLabel: string;\n  tooltip?: string;\n  placeholder?: string;\n}\n\nconst TextColumnField: React.FC<TextColumnFieldProps> = ({\n  required,\n  name,\n  label,\n  addLabel,\n  helpText,\n  placeholder,\n  isReadOnly,\n  disableDeleteRow,\n}) => {\n  const [field, { touched, error }] = useField<string[]>(name);\n  useFormikValidationFix(field.value);\n  const rowValues = field.value ?? [''];\n  const fieldId = getFieldId(name, 'single-column');\n  const isValid = !(touched && error);\n  return (\n    <FieldArray\n      name={name}\n      render={(arrayHelpers) => {\n        return (\n          <>\n            <FormGroup\n              fieldId={fieldId}\n              label={label}\n              isValid={isValid}\n              isRequired={required}\n              helperText={helpText}\n            >\n              {rowValues.map((v, idx) => {\n                return (\n                  <Flex\n                    key={`${idx.toString()}`}\n                    style={{ marginBottom: 'var(--pf-global--spacer--sm)' }}\n                  >\n                    <FlexItem breakpointMods={[{ modifier: FlexModifiers.grow }]}>\n                      <InputField\n                        type={TextInputTypes.text}\n                        name={`${name}.${idx}`}\n                        placeholder={placeholder}\n                        isReadOnly={isReadOnly}\n                      />\n                    </FlexItem>\n                    {!isReadOnly && (\n                      <FlexItem>\n                        <Button\n                          aria-label=\"Delete\"\n                          variant={ButtonVariant.plain}\n                          type={ButtonType.button}\n                          isInline\n                          isDisabled={disableDeleteRow}\n                          onClick={() => {\n                            arrayHelpers.remove(idx);\n                          }}\n                        >\n                          <MinusCircleIcon />\n                        </Button>\n                      </FlexItem>\n                    )}\n                  </Flex>\n                );\n              })}\n            </FormGroup>\n            {!isReadOnly && (\n              <MultiColumnFieldFooter\n                addLabel={addLabel}\n                onAdd={() => {\n                  arrayHelpers.push('');\n                }}\n              />\n            )}\n          </>\n        );\n      }}\n    />\n  );\n};\n\nexport default TextColumnField;\n"]}]}