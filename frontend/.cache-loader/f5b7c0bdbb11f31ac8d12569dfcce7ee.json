{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/triggers/remove-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/triggers/remove-utils.ts","mtime":1615298458620},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { k8sKill, k8sList, k8sPatch } from '@console/internal/module/k8s';\nimport { EventListenerModel, TriggerTemplateModel } from '../../../../models';\nexport const removeTrigger = (values, pipeline) => __awaiter(void 0, void 0, void 0, function* () {\n    const ns = pipeline.metadata.namespace;\n    const selectedTriggerTemplate = values.selectedTrigger;\n    // Remove the selected TriggerTemplate\n    yield k8sKill(TriggerTemplateModel, {\n        metadata: { name: selectedTriggerTemplate, namespace: ns },\n    });\n    const triggerMatchesTriggerTemplate = ({ template: { name } }) => name === selectedTriggerTemplate;\n    // Get all the event listeners so we can update their references\n    const eventListeners = yield k8sList(EventListenerModel, { ns });\n    const matchingEventListeners = eventListeners.filter(({ spec: { triggers } }) => triggers.find(triggerMatchesTriggerTemplate));\n    const singleTriggers = ({ spec: { triggers } }) => triggers.length === 1;\n    // Delete all EventListeners that only had the one trigger\n    const deletableEventListeners = matchingEventListeners.filter(singleTriggers);\n    yield Promise.all(deletableEventListeners.map((eventListener) => k8sKill(EventListenerModel, eventListener)));\n    // Update all EventListeners that had more than one trigger\n    const updatableEventListeners = matchingEventListeners.filter((eventListener) => !singleTriggers(eventListener));\n    yield Promise.all(updatableEventListeners.map((eventListener) => k8sPatch(EventListenerModel, eventListener, [\n        {\n            opt: 'replace',\n            path: '/spec/triggers',\n            value: eventListener.spec.triggers.filter(triggerMatchesTriggerTemplate),\n        },\n    ])));\n    return Promise.resolve();\n});\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/triggers/remove-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/triggers/remove-utils.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,8BAA8B,CAAC;AAC1E,OAAO,EAAE,kBAAkB,EAAE,oBAAoB,EAAE,MAAM,oBAAoB,CAAC;AAK9E,MAAM,CAAC,MAAM,aAAa,GAAG,CAAO,MAA+B,EAAE,QAAkB,EAAE,EAAE;IACzF,MAAM,EAAE,GAAG,QAAQ,CAAC,QAAQ,CAAC,SAAS,CAAC;IACvC,MAAM,uBAAuB,GAAG,MAAM,CAAC,eAAe,CAAC;IAEvD,sCAAsC;IACtC,MAAM,OAAO,CAAC,oBAAoB,EAAE;QAClC,QAAQ,EAAE,EAAE,IAAI,EAAE,uBAAuB,EAAE,SAAS,EAAE,EAAE,EAAE;KAC3D,CAAC,CAAC;IAEH,MAAM,6BAA6B,GAAG,CAAC,EAAE,QAAQ,EAAE,EAAE,IAAI,EAAE,EAAE,EAAE,EAAE,CAC/D,IAAI,KAAK,uBAAuB,CAAC;IAEnC,gEAAgE;IAChE,MAAM,cAAc,GAAwB,MAAM,OAAO,CAAC,kBAAkB,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC;IACtF,MAAM,sBAAsB,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,EAAE,CAC9E,QAAQ,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAC7C,CAAC;IAEF,MAAM,cAAc,GAAG,CAAC,EAAE,IAAI,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,EAAE,CAAC,QAAQ,CAAC,MAAM,KAAK,CAAC,CAAC;IAEzE,0DAA0D;IAC1D,MAAM,uBAAuB,GAAwB,sBAAsB,CAAC,MAAM,CAChF,cAAc,CACf,CAAC;IACF,MAAM,OAAO,CAAC,GAAG,CACf,uBAAuB,CAAC,GAAG,CAAC,CAAC,aAAa,EAAE,EAAE,CAAC,OAAO,CAAC,kBAAkB,EAAE,aAAa,CAAC,CAAC,CAC3F,CAAC;IAEF,2DAA2D;IAC3D,MAAM,uBAAuB,GAAwB,sBAAsB,CAAC,MAAM,CAChF,CAAC,aAAa,EAAE,EAAE,CAAC,CAAC,cAAc,CAAC,aAAa,CAAC,CAClD,CAAC;IACF,MAAM,OAAO,CAAC,GAAG,CACf,uBAAuB,CAAC,GAAG,CAAC,CAAC,aAAa,EAAE,EAAE,CAC5C,QAAQ,CAAC,kBAAkB,EAAE,aAAa,EAAE;QAC1C;YACE,GAAG,EAAE,SAAS;YACd,IAAI,EAAE,gBAAgB;YACtB,KAAK,EAAE,aAAa,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,6BAA6B,CAAC;SACzE;KACF,CAAC,CACH,CACF,CAAC;IAEF,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;AAC3B,CAAC,CAAA,CAAC","sourcesContent":["import { k8sKill, k8sList, k8sPatch } from '@console/internal/module/k8s';\nimport { EventListenerModel, TriggerTemplateModel } from '../../../../models';\nimport { Pipeline } from '../../../../utils/pipeline-augment';\nimport { EventListenerKind } from '../../resource-types';\nimport { RemoveTriggerFormValues } from './types';\n\nexport const removeTrigger = async (values: RemoveTriggerFormValues, pipeline: Pipeline) => {\n  const ns = pipeline.metadata.namespace;\n  const selectedTriggerTemplate = values.selectedTrigger;\n\n  // Remove the selected TriggerTemplate\n  await k8sKill(TriggerTemplateModel, {\n    metadata: { name: selectedTriggerTemplate, namespace: ns },\n  });\n\n  const triggerMatchesTriggerTemplate = ({ template: { name } }) =>\n    name === selectedTriggerTemplate;\n\n  // Get all the event listeners so we can update their references\n  const eventListeners: EventListenerKind[] = await k8sList(EventListenerModel, { ns });\n  const matchingEventListeners = eventListeners.filter(({ spec: { triggers } }) =>\n    triggers.find(triggerMatchesTriggerTemplate),\n  );\n\n  const singleTriggers = ({ spec: { triggers } }) => triggers.length === 1;\n\n  // Delete all EventListeners that only had the one trigger\n  const deletableEventListeners: EventListenerKind[] = matchingEventListeners.filter(\n    singleTriggers,\n  );\n  await Promise.all(\n    deletableEventListeners.map((eventListener) => k8sKill(EventListenerModel, eventListener)),\n  );\n\n  // Update all EventListeners that had more than one trigger\n  const updatableEventListeners: EventListenerKind[] = matchingEventListeners.filter(\n    (eventListener) => !singleTriggers(eventListener),\n  );\n  await Promise.all(\n    updatableEventListeners.map((eventListener) =>\n      k8sPatch(EventListenerModel, eventListener, [\n        {\n          opt: 'replace',\n          path: '/spec/triggers',\n          value: eventListener.spec.triggers.filter(triggerMatchesTriggerTemplate),\n        },\n      ]),\n    ),\n  );\n\n  return Promise.resolve();\n};\n"]}]}