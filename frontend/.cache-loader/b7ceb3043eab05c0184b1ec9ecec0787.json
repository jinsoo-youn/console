{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/timestamp.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/timestamp.tsx","mtime":1615298458750},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Tooltip } from '@patternfly/react-core';\nimport * as classNames from 'classnames';\n// import { GlobeAmericasIcon } from '@patternfly/react-icons';\n// import * as dateTime from './datetime';\n// MEMO: hypercloud timestamp 기획 변경으로 기존 timestamp 부분 주석처리 해놓음\n// const monthAbbrs = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n// const timestampFor = (mdate: Date, now: Date, omitSuffix: boolean) => {\n//   if (!dateTime.isValid(mdate)) {\n//     return '-';\n//   }\n//   const timeDifference = now.getTime() - mdate.getTime();\n//   if (omitSuffix) {\n//     return dateTime.fromNow(mdate, undefined, { omitSuffix: true });\n//   }\n//   if (Math.sign(timeDifference) !== -1 && timeDifference < 630000) {\n//     // 10.5 minutes\n//     // Show a relative time if within 10.5 minutes in the past from the current time.\n//     return dateTime.fromNow(mdate);\n//   }\n//   let a = 'am';\n//   let hours = mdate.getHours();\n//   if (hours > 12) {\n//     hours -= 12;\n//     a = 'pm';\n//   }\n//   const minuteStr = mdate\n//     .getMinutes()\n//     .toString()\n//     .padStart(2, '00');\n//   let timeStr = `${hours}:${minuteStr} ${a}`;\n//   if (mdate.getFullYear() !== now.getFullYear()) {\n//     timeStr = `${mdate.getFullYear()} ${timeStr}`;\n//   }\n//   const monthStr = monthAbbrs[mdate.getMonth()];\n//   return `${monthStr} ${mdate.getDate()}, ${timeStr}`;\n// };\nconst nowStateToProps = ({ UI }) => ({ now: UI.get('lastTick') });\n// export const Timestamp = connect(nowStateToProps)((props: TimestampProps) => {\n//   // Check for null. If props.timestamp is null, it returns incorrect date and time of Wed Dec 31 1969 19:00:00 GMT-0500 (Eastern Standard Time)\n//   if (!props.timestamp) {\n//     return <div className=\"co-timestamp\">-</div>;\n//   }\n//   console.log('props.timestamp? ', props.timestamp);\n//   const mdate = props.isUnix ? new Date((props.timestamp as number) * 1000) : new Date(props.timestamp);\n//   console.log('mdate? ', mdate);\n//   const timestamp = timestampFor(mdate, new Date(props.now), props.omitSuffix);\n//   console.log('timestamp? ', timestamp);\n//   if (!dateTime.isValid(mdate)) {\n//     return <div className=\"co-timestamp\">-</div>;\n//   }\n//   if (props.simple) {\n//     return <>{timestamp}</>;\n//   }\n//   return (\n//     <div className={classNames('co-timestamp co-icon-and-text', props.className)}>\n//       <GlobeAmericasIcon className=\"co-icon-and-text__icon\" />\n//       <Tooltip\n//         content={[\n//           <span className=\"co-nowrap\" key=\"co-timestamp\">\n//             {mdate.toISOString()}\n//           </span>,\n//         ]}\n//       >\n//         <span>{timestamp}</span>\n//       </Tooltip>\n//     </div>\n//   );\n// });\nconst formatTimeZoneStamp = timestamp => {\n    var _a, _b;\n    const d = new Date(timestamp);\n    const date = d.toLocaleDateString();\n    const time = d.toTimeString().split(' ')[0];\n    if (!!date) {\n        if (date.indexOf('.') > -1) {\n            // MEMO: Date()가 YYYY. MM. DD로 들어오는 경우\n            const dateSplit = date.replace(/\\.\\s/g, '.').split('.');\n            const formattedDate = dateSplit[0] + '.' + (((_a = dateSplit[1]) === null || _a === void 0 ? void 0 : _a.length) === 1 ? '0' + dateSplit[1] : dateSplit[1]) + '.' + (((_b = dateSplit[2]) === null || _b === void 0 ? void 0 : _b.length) === 1 ? '0' + dateSplit[2] : dateSplit[2]);\n            return `${formattedDate} ${time}`;\n        }\n        else if (date.indexOf('/') > -1) {\n            // MEMO: Date()가 YYYY/MM/DD로 들어오는 경우\n            const formattedDate = date.replace(/\\//g, '.');\n            return `${formattedDate} ${time}`;\n        }\n        else {\n            // MEMO: Date()가 이상하게 들어오는 경우 그냥 보여줄 거\n            `${date} ${time}`;\n        }\n    }\n    else {\n        return timestamp;\n    }\n};\n// MEMO: timestamp값이 utc로 들어온다는 전제로 변환 구현\nconst formatUtcStamp = timestamp => {\n    if (typeof timestamp == 'object') {\n        const d = new Date(timestamp);\n        const isoTimestamp = d.toISOString();\n        return isoTimestamp\n            .replace('T', ' ')\n            .replace(/-/g, '.')\n            .replace('Z', ' (UTC)');\n    }\n    else if (typeof timestamp == 'string') {\n        const formattedStamp = timestamp\n            .replace('T', ' ')\n            .replace(/-/g, '.')\n            .replace('Z', ' (UTC)');\n        return formattedStamp;\n    }\n    else {\n        return '';\n    }\n};\nexport const Timestamp = connect(nowStateToProps)((props) => {\n    if (!props.timestamp) {\n        return React.createElement(\"div\", { className: \"co-timestamp\" }, \"-\");\n    }\n    const utcTimestamp = formatUtcStamp(props.timestamp);\n    const timestamp = formatTimeZoneStamp(props.timestamp);\n    return (React.createElement(\"div\", { className: classNames('co-timestamp co-icon-and-text', props.className) },\n        React.createElement(Tooltip, { content: [\n                React.createElement(\"span\", { className: \"co-nowrap\", key: \"co-timestamp\" }, utcTimestamp),\n            ] },\n            React.createElement(\"span\", null, timestamp))));\n});\nTimestamp.displayName = 'Timestamp';\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/timestamp.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/timestamp.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Tooltip } from '@patternfly/react-core';\nimport * as classNames from 'classnames';\n// import { GlobeAmericasIcon } from '@patternfly/react-icons';\n\n// import * as dateTime from './datetime';\n\n// MEMO: hypercloud timestamp 기획 변경으로 기존 timestamp 부분 주석처리 해놓음\n\n// const monthAbbrs = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\n// const timestampFor = (mdate: Date, now: Date, omitSuffix: boolean) => {\n//   if (!dateTime.isValid(mdate)) {\n//     return '-';\n//   }\n\n//   const timeDifference = now.getTime() - mdate.getTime();\n//   if (omitSuffix) {\n//     return dateTime.fromNow(mdate, undefined, { omitSuffix: true });\n//   }\n//   if (Math.sign(timeDifference) !== -1 && timeDifference < 630000) {\n//     // 10.5 minutes\n//     // Show a relative time if within 10.5 minutes in the past from the current time.\n//     return dateTime.fromNow(mdate);\n//   }\n\n//   let a = 'am';\n//   let hours = mdate.getHours();\n//   if (hours > 12) {\n//     hours -= 12;\n//     a = 'pm';\n//   }\n\n//   const minuteStr = mdate\n//     .getMinutes()\n//     .toString()\n//     .padStart(2, '00');\n//   let timeStr = `${hours}:${minuteStr} ${a}`;\n//   if (mdate.getFullYear() !== now.getFullYear()) {\n//     timeStr = `${mdate.getFullYear()} ${timeStr}`;\n//   }\n\n//   const monthStr = monthAbbrs[mdate.getMonth()];\n\n//   return `${monthStr} ${mdate.getDate()}, ${timeStr}`;\n// };\n\nconst nowStateToProps = ({ UI }) => ({ now: UI.get('lastTick') });\n\n// export const Timestamp = connect(nowStateToProps)((props: TimestampProps) => {\n//   // Check for null. If props.timestamp is null, it returns incorrect date and time of Wed Dec 31 1969 19:00:00 GMT-0500 (Eastern Standard Time)\n//   if (!props.timestamp) {\n//     return <div className=\"co-timestamp\">-</div>;\n//   }\n//   console.log('props.timestamp? ', props.timestamp);\n\n//   const mdate = props.isUnix ? new Date((props.timestamp as number) * 1000) : new Date(props.timestamp);\n//   console.log('mdate? ', mdate);\n\n//   const timestamp = timestampFor(mdate, new Date(props.now), props.omitSuffix);\n//   console.log('timestamp? ', timestamp);\n\n//   if (!dateTime.isValid(mdate)) {\n//     return <div className=\"co-timestamp\">-</div>;\n//   }\n\n//   if (props.simple) {\n//     return <>{timestamp}</>;\n//   }\n\n//   return (\n//     <div className={classNames('co-timestamp co-icon-and-text', props.className)}>\n//       <GlobeAmericasIcon className=\"co-icon-and-text__icon\" />\n//       <Tooltip\n//         content={[\n//           <span className=\"co-nowrap\" key=\"co-timestamp\">\n//             {mdate.toISOString()}\n//           </span>,\n//         ]}\n//       >\n//         <span>{timestamp}</span>\n//       </Tooltip>\n//     </div>\n//   );\n// });\n\nconst formatTimeZoneStamp = timestamp => {\n  const d = new Date(timestamp);\n  const date: any = d.toLocaleDateString();\n  const time: string = d.toTimeString().split(' ')[0];\n\n  if (!!date) {\n    if (date.indexOf('.') > -1) {\n      // MEMO: Date()가 YYYY. MM. DD로 들어오는 경우\n      const dateSplit = date.replace(/\\.\\s/g, '.').split('.');\n      const formattedDate = dateSplit[0] + '.' + (dateSplit[1]?.length === 1 ? '0' + dateSplit[1] : dateSplit[1]) + '.' + (dateSplit[2]?.length === 1 ? '0' + dateSplit[2] : dateSplit[2]);\n      return `${formattedDate} ${time}`;\n    } else if (date.indexOf('/') > -1) {\n      // MEMO: Date()가 YYYY/MM/DD로 들어오는 경우\n      const formattedDate = date.replace(/\\//g, '.');\n      return `${formattedDate} ${time}`;\n    } else {\n      // MEMO: Date()가 이상하게 들어오는 경우 그냥 보여줄 거\n      `${date} ${time}`;\n    }\n  } else {\n    return timestamp;\n  }\n};\n\n// MEMO: timestamp값이 utc로 들어온다는 전제로 변환 구현\nconst formatUtcStamp = timestamp => {\n  if (typeof timestamp == 'object') {\n    const d = new Date(timestamp);\n    const isoTimestamp: any = d.toISOString();\n    return isoTimestamp\n      .replace('T', ' ')\n      .replace(/-/g, '.')\n      .replace('Z', ' (UTC)');\n  } else if (typeof timestamp == 'string') {\n    const formattedStamp = timestamp\n      .replace('T', ' ')\n      .replace(/-/g, '.')\n      .replace('Z', ' (UTC)');\n    return formattedStamp;\n  } else {\n    return '';\n  }\n};\n\nexport const Timestamp = connect(nowStateToProps)((props: TimestampProps) => {\n  if (!props.timestamp) {\n    return <div className=\"co-timestamp\">-</div>;\n  }\n\n  const utcTimestamp = formatUtcStamp(props.timestamp);\n  const timestamp = formatTimeZoneStamp(props.timestamp);\n\n  return (\n    <div className={classNames('co-timestamp co-icon-and-text', props.className)}>\n      <Tooltip\n        content={[\n          <span className=\"co-nowrap\" key=\"co-timestamp\">\n            {utcTimestamp}\n          </span>,\n        ]}\n      >\n        <span>{timestamp}</span>\n      </Tooltip>\n    </div>\n  );\n});\n\nexport type TimestampProps = {\n  timestamp: string | number;\n  isUnix?: boolean;\n  now: number;\n  simple?: boolean;\n  omitSuffix?: boolean;\n  className?: string;\n};\n\nTimestamp.displayName = 'Timestamp';\n"]}]}