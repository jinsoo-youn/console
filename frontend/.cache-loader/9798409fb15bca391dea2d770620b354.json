{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/experiment.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/experiment.tsx","mtime":1617182414010},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport { DetailsPage, ListPage, Table, TableRow, TableData } from '../factory';\nimport { DetailsItem, Kebab, detailsPage, navFactory, ResourceKebab, ResourceLink, ResourceSummary, SectionHeading } from '../utils';\nimport { ExperimentModel } from '../../models';\nimport { ResourceLabel } from '../../models/hypercloud/resource-plural';\nexport const menuActions = [...Kebab.getExtensionsActionsForKind(ExperimentModel), ...Kebab.factory.common];\nconst kind = ExperimentModel.kind;\nconst tableColumnClasses = ['', '', classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), Kebab.columnClass];\nconst ExperimentTableHeader = (t) => {\n    return [\n        {\n            title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n            sortField: 'metadata.name',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[0] },\n        },\n        {\n            title: t('COMMON:MSG_MAIN_TABLEHEADER_2'),\n            sortField: 'metadata.namespace',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[1] },\n        },\n        {\n            title: '알고리즘 이름',\n            sortField: 'pec.algorithm.algorithmName',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[2] },\n        },\n        {\n            title: '트라이얼 개수',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[3] },\n        },\n        {\n            title: '최적화 상태',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[4] },\n        },\n        {\n            title: t('COMMON:MSG_MAIN_TABLEHEADER_3'),\n            transforms: [sortable],\n            props: { className: tableColumnClasses[5] },\n        },\n        {\n            title: '',\n            props: { className: tableColumnClasses[6] },\n        },\n    ];\n};\nExperimentTableHeader.displayName = 'ExperimentTableHeader';\nconst ExperimentTableRow = ({ obj: experiment, index, key, style }) => {\n    var _a, _b;\n    let experimentectiveMetricName = (_a = experiment.spec.experimentective) === null || _a === void 0 ? void 0 : _a.experimentectiveMetricName;\n    let currentOptimal = experimentectiveMetricName && experiment.status.currentOptimalTrial.observation.metrics ? experiment.status.currentOptimalTrial.observation.metrics.find(metric => metric.name === experimentectiveMetricName) : { value: 0 };\n    let optimal = currentOptimal.value + '/' + ((_b = experiment.spec.experimentective) === null || _b === void 0 ? void 0 : _b.goal);\n    return (React.createElement(TableRow, { id: experiment.metadata.uid, index: index, trKey: key, style: style },\n        React.createElement(TableData, { className: tableColumnClasses[0] },\n            React.createElement(ResourceLink, { kind: kind, name: experiment.metadata.name, namespace: experiment.metadata.namespace, title: experiment.metadata.uid })),\n        React.createElement(TableData, { className: classNames(tableColumnClasses[1], 'co-break-word') },\n            React.createElement(ResourceLink, { kind: \"Namespace\", name: experiment.metadata.namespace, title: experiment.metadata.namespace })),\n        React.createElement(TableData, { className: tableColumnClasses[2] }, experiment.spec.algorithm.algorithmName),\n        React.createElement(TableData, { className: tableColumnClasses[3] }, experiment.status.trials + '/' + experiment.spec.maxTrialCount),\n        React.createElement(TableData, { className: tableColumnClasses[4] }, optimal),\n        React.createElement(TableData, { className: tableColumnClasses[5] }, experiment.status.conditions.length ? experiment.status.conditions[experiment.status.conditions.length - 1].type : ''),\n        React.createElement(TableData, { className: tableColumnClasses[6] },\n            React.createElement(ResourceKebab, { actions: menuActions, kind: kind, resource: experiment }))));\n};\nexport const ExperimentDetailsList = ({ experiment }) => {\n    var _a;\n    let objectiveMetricName = experiment.spec.objective.objectiveMetricName;\n    const metrics = _.get(experiment, 'status.currentOptimalTrial.observation.metrics');\n    let currentOptimal = objectiveMetricName && Array.isArray(metrics) ? metrics.find(metric => metric.name === objectiveMetricName) : { value: 0 };\n    let optimal = currentOptimal.value + '/' + ((_a = experiment.spec.objective) === null || _a === void 0 ? void 0 : _a.goal);\n    const { t } = useTranslation();\n    return (React.createElement(\"dl\", { className: \"co-m-pane__details\" },\n        React.createElement(DetailsItem, { label: t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_45'), obj: experiment, path: \"status.conditions\" }, experiment.status.conditions.length ? experiment.status.conditions[experiment.status.conditions.length - 1].type : ''),\n        React.createElement(DetailsItem, { label: t('알고리즘 이름'), obj: experiment, path: \"spec.algorithm.algorithmName\" }, experiment.spec.algorithm.algorithmName),\n        React.createElement(DetailsItem, { label: t('트라이얼 개수'), obj: experiment, path: \"status.currentNumberScheduled\" }, experiment.status.trials + '/' + experiment.spec.maxTrialCount),\n        React.createElement(DetailsItem, { label: t('최적화 상태'), obj: experiment, path: \"status.desiredNumberScheduled\" }, optimal)));\n};\nconst ExperimentDetails = ({ obj: experiment }) => {\n    const { t } = useTranslation();\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(SectionHeading, { text: t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', { 0: ResourceLabel(experiment, t) }) }),\n            React.createElement(\"div\", { className: \"row\" },\n                React.createElement(\"div\", { className: \"col-lg-6\" },\n                    React.createElement(ResourceSummary, { resource: experiment })),\n                React.createElement(\"div\", { className: \"col-lg-6\" },\n                    React.createElement(ExperimentDetailsList, { experiment: experiment }))))));\n};\nconst { details, editYaml } = navFactory;\nexport const Experiments = props => {\n    const { t } = useTranslation();\n    return React.createElement(Table, Object.assign({}, props, { \"aria-label\": \"Experiments\", Header: ExperimentTableHeader.bind(null, t), Row: ExperimentTableRow, virtualize: true }));\n};\nexport const ExperimentsPage = props => React.createElement(ListPage, Object.assign({ canCreate: true, ListComponent: Experiments, kind: kind }, props));\nexport const ExperimentsDetailsPage = props => React.createElement(DetailsPage, Object.assign({}, props, { kind: kind, menuActions: menuActions, pages: [details(detailsPage(ExperimentDetails)), editYaml()] }));\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/experiment.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/experiment.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\n\nimport { K8sResourceKind } from '../../module/k8s';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from '../factory';\nimport { DetailsItem, Kebab, KebabAction, detailsPage, navFactory, ResourceKebab, ResourceLink, ResourceSummary, SectionHeading } from '../utils';\nimport { ExperimentModel } from '../../models';\nimport { ResourceLabel } from '../../models/hypercloud/resource-plural';\n\nexport const menuActions: KebabAction[] = [...Kebab.getExtensionsActionsForKind(ExperimentModel), ...Kebab.factory.common];\n\nconst kind = ExperimentModel.kind;\n\nconst tableColumnClasses = ['', '', classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), Kebab.columnClass];\n\nconst ExperimentTableHeader = (t?: TFunction) => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_2'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: '알고리즘 이름',\n      sortField: 'pec.algorithm.algorithmName',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: '트라이얼 개수',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: '최적화 상태',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_3'),\n      transforms: [sortable],\n      props: { className: tableColumnClasses[5] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[6] },\n    },\n  ];\n};\nExperimentTableHeader.displayName = 'ExperimentTableHeader';\n\nconst ExperimentTableRow: RowFunction<K8sResourceKind> = ({ obj: experiment, index, key, style }) => {\n  let experimentectiveMetricName = experiment.spec.experimentective?.experimentectiveMetricName;\n  let currentOptimal = experimentectiveMetricName && experiment.status.currentOptimalTrial.observation.metrics ? experiment.status.currentOptimalTrial.observation.metrics.find(metric => metric.name === experimentectiveMetricName) : { value: 0 };\n  let optimal = currentOptimal.value + '/' + experiment.spec.experimentective?.goal;\n  return (\n    <TableRow id={experiment.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={experiment.metadata.name} namespace={experiment.metadata.namespace} title={experiment.metadata.uid} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={experiment.metadata.namespace} title={experiment.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        {experiment.spec.algorithm.algorithmName}\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        {experiment.status.trials + '/' + experiment.spec.maxTrialCount}\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        {optimal}\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        {experiment.status.conditions.length ? experiment.status.conditions[experiment.status.conditions.length - 1].type : ''}\n      </TableData>\n      <TableData className={tableColumnClasses[6]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={experiment} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport const ExperimentDetailsList: React.FC<ExperimentDetailsListProps> = ({ experiment }) => {\n  let objectiveMetricName = experiment.spec.objective.objectiveMetricName;\n  const metrics = _.get(experiment, 'status.currentOptimalTrial.observation.metrics');\n  let currentOptimal = objectiveMetricName && Array.isArray(metrics) ? metrics.find(metric => metric.name === objectiveMetricName) : { value: 0 };\n  let optimal = currentOptimal.value + '/' + experiment.spec.objective?.goal;\n\n  const { t } = useTranslation();\n  return (\n    <dl className=\"co-m-pane__details\">\n      <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_45')} obj={experiment} path=\"status.conditions\">\n        {experiment.status.conditions.length ? experiment.status.conditions[experiment.status.conditions.length - 1].type : ''}\n      </DetailsItem>\n      <DetailsItem label={t('알고리즘 이름')} obj={experiment} path=\"spec.algorithm.algorithmName\">\n        {experiment.spec.algorithm.algorithmName}\n      </DetailsItem>\n      <DetailsItem label={t('트라이얼 개수')} obj={experiment} path=\"status.currentNumberScheduled\">\n        {experiment.status.trials + '/' + experiment.spec.maxTrialCount}\n      </DetailsItem>\n      <DetailsItem label={t('최적화 상태')} obj={experiment} path=\"status.desiredNumberScheduled\">\n        {optimal}\n      </DetailsItem>\n    </dl>\n  );\n}\n\nconst ExperimentDetails: React.FC<ExperimentDetailsProps> = ({ obj: experiment }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n      <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', { 0: ResourceLabel(experiment, t) })}/>\n        <div className=\"row\">\n          <div className=\"col-lg-6\">\n            <ResourceSummary resource={experiment} />\n          </div>\n          <div className=\"col-lg-6\">\n            <ExperimentDetailsList experiment={experiment} />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst { details, editYaml } = navFactory;\nexport const Experiments: React.FC = props => {\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"Experiments\" Header={ExperimentTableHeader.bind(null, t)} Row={ExperimentTableRow} virtualize />;\n}\n\nexport const ExperimentsPage: React.FC<ExperimentsPageProps> = props => <ListPage canCreate={true} ListComponent={Experiments} kind={kind} {...props} />;\n\nexport const ExperimentsDetailsPage: React.FC<ExperimentsDetailsPageProps> = props => <DetailsPage {...props} kind={kind} menuActions={menuActions} pages={[details(detailsPage(ExperimentDetails)), editYaml()]} />;\n\ntype ExperimentDetailsListProps = {\n  experiment: K8sResourceKind;\n};\n\ntype ExperimentDetailsProps = {\n  obj: K8sResourceKind;\n};\n\ntype ExperimentsPageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: any;\n};\n\ntype ExperimentsDetailsPageProps = {\n  match: any;\n};\n"]}]}