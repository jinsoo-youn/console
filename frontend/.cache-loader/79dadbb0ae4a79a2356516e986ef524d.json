{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/event-stream.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/event-stream.tsx","mtime":1616735742480},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { AutoSizer, List as VirtualList, WindowScroller, CellMeasurer, CellMeasurerCache, } from 'react-virtualized';\nimport { CSSTransition } from 'react-transition-group';\nimport classNames from 'classnames';\nimport { WithScrollContainer } from './dom-utils';\n// Keep track of seen events so we only animate new ones.\nconst seen = new Set();\nconst timeout = { enter: 150 };\nconst measurementCache = new CellMeasurerCache({\n    fixedWidth: true,\n});\nclass SysEvent extends React.Component {\n    shouldComponentUpdate(nextProps) {\n        if (this.props.event.lastTimestamp !== nextProps.event.lastTimestamp) {\n            // Timestamps can be modified because events can be combined.\n            return true;\n        }\n        if (_.isEqual(this.props.style, nextProps.style)) {\n            return false;\n        }\n        return true;\n    }\n    componentWillUnmount() {\n        // TODO (kans): this is not correct, but don't memory leak :-/\n        seen.delete(this.props.event.metadata.uid);\n    }\n    render() {\n        const { EventComponent, index, style, event, className } = this.props;\n        let shouldAnimate;\n        const key = event.metadata.uid;\n        // Only animate events if they're at the start of the list (first 6) and we haven't seen them before.\n        if (!seen.has(key) && index < 6) {\n            seen.add(key);\n            shouldAnimate = true;\n        }\n        return (React.createElement(\"div\", { className: classNames('co-sysevent--transition', className), style: style, role: \"row\" },\n            React.createElement(CSSTransition, { mountOnEnter: true, appear: shouldAnimate, in: true, exit: false, timeout: timeout, classNames: \"slide\" }, (status) => (React.createElement(\"div\", { className: `slide-${status}` },\n                React.createElement(EventComponent, { event: event }))))));\n    }\n}\nexport const EventStreamList = ({ events, className, EventComponent, }) => {\n    const [list, setList] = React.useState(null);\n    const onResize = React.useCallback(() => measurementCache.clearAll(), []);\n    React.useEffect(() => {\n        onResize();\n        list === null || list === void 0 ? void 0 : list.recomputeRowHeights();\n    }, [list, events, onResize]);\n    const rowRenderer = React.useCallback(({ index, style, key, parent }) => (React.createElement(CellMeasurer, { cache: measurementCache, columnIndex: 0, key: key, rowIndex: index, parent: parent }, ({ measure }) => (React.createElement(SysEvent, { className: className, event: events[index], EventComponent: EventComponent, onLoad: measure, onEntered: print, key: key, style: style, index: index })))), [events, className, EventComponent]);\n    const renderVirtualizedTable = (scrollContainer) => (React.createElement(WindowScroller, { scrollElement: scrollContainer }, ({ height, isScrolling, registerChild, onChildScroll, scrollTop }) => (React.createElement(AutoSizer, { disableHeight: true, onResize: onResize }, ({ width }) => (React.createElement(\"div\", { ref: registerChild },\n        React.createElement(VirtualList, { autoHeight: true, data: events, deferredMeasurementCache: measurementCache, height: height || 0, isScrolling: isScrolling, onScroll: onChildScroll, ref: setList, rowCount: events.length, rowHeight: measurementCache.rowHeight, rowRenderer: rowRenderer, scrollTop: scrollTop, tabIndex: null, width: width })))))));\n    return events.length > 0 && React.createElement(WithScrollContainer, null, renderVirtualizedTable);\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/event-stream.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/event-stream.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport {\n  AutoSizer,\n  List as VirtualList,\n  WindowScroller,\n  CellMeasurer,\n  CellMeasurerCache,\n} from 'react-virtualized';\nimport { CSSTransition } from 'react-transition-group';\nimport classNames from 'classnames';\n\nimport { EventKind } from '../../module/k8s';\nimport { WithScrollContainer } from './dom-utils';\n\n// Keep track of seen events so we only animate new ones.\nconst seen = new Set();\nconst timeout = { enter: 150 };\n\nconst measurementCache = new CellMeasurerCache({\n  fixedWidth: true,\n});\n\nclass SysEvent extends React.Component<SysEventProps> {\n  shouldComponentUpdate(nextProps: SysEventProps) {\n    if (this.props.event.lastTimestamp !== nextProps.event.lastTimestamp) {\n      // Timestamps can be modified because events can be combined.\n      return true;\n    }\n    if (_.isEqual(this.props.style, nextProps.style)) {\n      return false;\n    }\n    return true;\n  }\n\n  componentWillUnmount() {\n    // TODO (kans): this is not correct, but don't memory leak :-/\n    seen.delete(this.props.event.metadata.uid);\n  }\n\n  render() {\n    const { EventComponent, index, style, event, className } = this.props;\n\n    let shouldAnimate: boolean;\n    const key = event.metadata.uid;\n    // Only animate events if they're at the start of the list (first 6) and we haven't seen them before.\n    if (!seen.has(key) && index < 6) {\n      seen.add(key);\n      shouldAnimate = true;\n    }\n\n    return (\n      <div className={classNames('co-sysevent--transition', className)} style={style} role=\"row\">\n        <CSSTransition\n          mountOnEnter={true}\n          appear={shouldAnimate}\n          in\n          exit={false}\n          timeout={timeout}\n          classNames=\"slide\"\n        >\n          {(status) => (\n            <div className={`slide-${status}`}>\n              <EventComponent event={event} />\n            </div>\n          )}\n        </CSSTransition>\n      </div>\n    );\n  }\n}\n\nexport const EventStreamList: React.FC<EventStreamListProps> = ({\n  events,\n  className,\n  EventComponent,\n}) => {\n  const [list, setList] = React.useState(null);\n  const onResize = React.useCallback(() => measurementCache.clearAll(), []);\n  React.useEffect(() => {\n    onResize();\n    list?.recomputeRowHeights();\n  }, [list, events, onResize]);\n  const rowRenderer = React.useCallback(\n    ({ index, style, key, parent }) => (\n      <CellMeasurer\n        cache={measurementCache}\n        columnIndex={0}\n        key={key}\n        rowIndex={index}\n        parent={parent}\n      >\n        {({ measure }) => (\n          <SysEvent\n            className={className}\n            event={events[index]}\n            EventComponent={EventComponent}\n            onLoad={measure}\n            onEntered={print}\n            key={key}\n            style={style}\n            index={index}\n          />\n        )}\n      </CellMeasurer>\n    ),\n    [events, className, EventComponent],\n  );\n\n  const renderVirtualizedTable = (scrollContainer) => (\n    <WindowScroller scrollElement={scrollContainer}>\n      {({ height, isScrolling, registerChild, onChildScroll, scrollTop }) => (\n        <AutoSizer disableHeight onResize={onResize}>\n          {({ width }) => (\n            <div ref={registerChild}>\n              <VirtualList\n                autoHeight\n                data={events}\n                deferredMeasurementCache={measurementCache}\n                height={height || 0}\n                isScrolling={isScrolling}\n                onScroll={onChildScroll}\n                ref={setList}\n                rowCount={events.length}\n                rowHeight={measurementCache.rowHeight}\n                rowRenderer={rowRenderer}\n                scrollTop={scrollTop}\n                tabIndex={null}\n                width={width}\n              />\n            </div>\n          )}\n        </AutoSizer>\n      )}\n    </WindowScroller>\n  );\n\n  return events.length > 0 && <WithScrollContainer>{renderVirtualizedTable}</WithScrollContainer>;\n};\n\ntype EventStreamListProps = {\n  events: EventKind[];\n  EventComponent: React.ComponentType<EventComponentProps>;\n  className?: string;\n};\n\nexport type EventComponentProps = {\n  event: EventKind;\n};\n\ntype SysEventProps = {\n  EventComponent: React.ComponentType<EventComponentProps>;\n  event: EventKind;\n  onLoad: () => void;\n  onEntered: () => void;\n  style: React.CSSProperties;\n  index: number;\n  className?: string;\n};\n"]}]}