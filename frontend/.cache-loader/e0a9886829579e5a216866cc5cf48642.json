{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/notification-drawer.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/notification-drawer.tsx","mtime":1617163139970},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { NotificationDrawer, NotificationEntry, NotificationCategory, NotificationTypes } from '@console/patternfly';\nimport * as UIActions from '@console/internal/actions/ui';\nimport store from '@console/internal/redux';\nimport { alertURL } from '@console/internal/components/monitoring';\nimport { RedExclamationCircleIcon } from '@console/shared';\nimport { getAlertDescription, getAlertMessage, getAlertName, getAlertSeverity, getAlertTime, getAlerts } from '@console/shared/src/components/dashboard/status-card/alert-utils';\nimport { EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateSecondaryActions, EmptyStateVariant, Title } from '@patternfly/react-core';\nimport { coFetchJSON } from '../co-fetch';\nimport { referenceForModel } from '../module/k8s';\nimport { ClusterVersionModel } from '../models';\nimport { getSortedUpdates } from './modals/cluster-update-modal';\nimport { usePrevious } from '@console/metal3-plugin/src/hooks';\nimport { useK8sWatchResource } from './utils/k8s-watch-hook';\nimport { useTranslation } from 'react-i18next';\nconst criticalCompare = (a) => getAlertSeverity(a) === 'critical';\nconst otherAlertCompare = (a) => getAlertSeverity(a) !== 'critical';\nconst AlertErrorState = ({ errorText }) => {\n    const { t } = useTranslation();\n    return (React.createElement(EmptyState, { variant: EmptyStateVariant.full },\n        React.createElement(EmptyStateIcon, { className: \"co-status-card__alerts-icon\", icon: RedExclamationCircleIcon }),\n        React.createElement(Title, { headingLevel: \"h5\", size: \"lg\" }, t('SINGLE:MSG_OVERVIEW_MAIN_CARDSTATUS_ALERT_1')),\n        errorText && React.createElement(EmptyStateBody, null, errorText)));\n};\nconst AlertEmptyState = ({ drawerToggle }) => (React.createElement(EmptyState, { variant: EmptyStateVariant.full, className: \"co-status-card__alerts-msg\" },\n    React.createElement(Title, { headingLevel: \"h5\", size: \"lg\" }, \"No critical alerts\"),\n    React.createElement(EmptyStateBody, null, \"There are currently no critical alerts firing. There may be firing alerts of other severities or silenced critical alerts however.\"),\n    React.createElement(EmptyStateSecondaryActions, null,\n        React.createElement(Link, { to: \"/monitoring/alerts\", onClick: drawerToggle }, \"View all alerts\"))));\nexport const alertActions = new Map().set('AlertmanagerReceiversNotConfigured', {\n    text: 'Configure',\n    path: '/monitoring/alertmanagerconfig',\n});\nconst getAlertNotificationEntries = (isLoaded, alertData, toggleNotificationDrawer, isCritical) => isLoaded && !_.isEmpty(alertData)\n    ? alertData\n        .filter(a => (isCritical ? criticalCompare(a) : otherAlertCompare(a)))\n        .map((alert, i) => {\n        const action = alertActions.get(alert.rule.name);\n        return React.createElement(NotificationEntry, { key: `${i}_${alert.activeAt}`, description: getAlertDescription(alert) || getAlertMessage(alert), timestamp: getAlertTime(alert), type: NotificationTypes[getAlertSeverity(alert)], title: getAlertName(alert), toggleNotificationDrawer: toggleNotificationDrawer, targetPath: alertURL(alert, alert.rule.id), actionText: action === null || action === void 0 ? void 0 : action.text, actionPath: action === null || action === void 0 ? void 0 : action.path });\n    })\n    : [];\nconst getUpdateNotificationEntries = (isLoaded, updateData, toggleNotificationDrawer) => (isLoaded && !_.isEmpty(updateData) ? [React.createElement(NotificationEntry, { actionPath: \"/settings/cluster\", actionText: \"Update cluster\", key: \"cluster-udpate\", description: updateData[0].version || 'Unknown', type: NotificationTypes.update, title: \"Cluster update available\", toggleNotificationDrawer: toggleNotificationDrawer, targetPath: \"/settings/cluster\" })] : []);\nconst pollerTimeouts = {};\nconst pollers = {};\nconst cvResource = {\n    kind: referenceForModel(ClusterVersionModel),\n    namespaced: false,\n    name: 'version',\n    isList: false,\n    optional: true,\n};\nexport const refreshNotificationPollers = () => {\n    _.each(pollerTimeouts, clearTimeout);\n    _.invoke(pollers, 'silences');\n    _.invoke(pollers, 'notificationAlerts');\n};\nexport const ConnectedNotificationDrawer_ = ({ isDesktop, toggleNotificationDrawer, toggleNotificationsRead, isDrawerExpanded, onDrawerChange, notificationsRead, alerts, children }) => {\n    React.useEffect(() => {\n        const poll = (url, key, dataHandler) => {\n            store.dispatch(UIActions.monitoringLoading(key));\n            const notificationPoller = () => {\n                coFetchJSON(url)\n                    .then(response => dataHandler(response))\n                    .then(data => store.dispatch(UIActions.monitoringLoaded(key, data)))\n                    .catch(e => store.dispatch(UIActions.monitoringErrored(key, e)))\n                    .then(() => (pollerTimeouts[key] = setTimeout(notificationPoller, 15 * 1000)));\n            };\n            pollers[key] = notificationPoller;\n            notificationPoller();\n        };\n        const { alertManagerBaseURL, prometheusBaseURL } = window.SERVER_FLAGS;\n        if (prometheusBaseURL) {\n            poll(`${prometheusBaseURL}/api/v1/rules`, 'notificationAlerts', getAlerts);\n        }\n        else {\n            store.dispatch(UIActions.monitoringErrored('notificationAlerts', new Error('prometheusBaseURL not set')));\n        }\n        if (alertManagerBaseURL) {\n            poll(`${alertManagerBaseURL}/api/v1/silences`, 'silences', ({ data }) => {\n                // Set a name field on the Silence to make things easier\n                _.each(data, s => {\n                    s.name = _.get(_.find(s.matchers, { name: 'alertname' }), 'value');\n                    if (!s.name) {\n                        // No alertname, so fall back to displaying the other matchers\n                        s.name = s.matchers.map(m => `${m.name}${m.isRegex ? '=~' : '='}${m.value}`).join(', ');\n                    }\n                });\n                return data;\n            });\n        }\n        else {\n            store.dispatch(UIActions.monitoringErrored('silences', new Error('alertManagerBaseURL not set')));\n        }\n        return () => _.each(pollerTimeouts, clearTimeout);\n    }, []);\n    const [clusterVersionData, clusterVersionLoaded] = useK8sWatchResource(cvResource);\n    const updateData = getSortedUpdates(clusterVersionData);\n    const { data, loaded, loadError } = alerts || {};\n    const updateList = getUpdateNotificationEntries(clusterVersionLoaded, updateData, toggleNotificationDrawer);\n    const criticalAlertList = getAlertNotificationEntries(true, data, toggleNotificationDrawer, true);\n    const otherAlertList = getAlertNotificationEntries(loaded, data, toggleNotificationDrawer, false);\n    const [isAlertExpanded, toggleAlertExpanded] = React.useState(!_.isEmpty(criticalAlertList));\n    const [isNonCriticalAlertExpanded, toggleNonCriticalAlertExpanded] = React.useState(true);\n    const [isClusterUpdateExpanded, toggleClusterUpdateExpanded] = React.useState(true);\n    const prevDrawerToggleState = usePrevious(isDrawerExpanded);\n    const hasCriticalAlerts = criticalAlertList.length > 0;\n    const hasNonCriticalAlerts = otherAlertList.length > 0;\n    React.useEffect(() => {\n        if (hasCriticalAlerts && !prevDrawerToggleState && isDrawerExpanded) {\n            toggleAlertExpanded(true);\n        }\n        if (hasNonCriticalAlerts && !prevDrawerToggleState && isDrawerExpanded) {\n            toggleNonCriticalAlertExpanded(true);\n        }\n    }, [hasCriticalAlerts, hasNonCriticalAlerts, isAlertExpanded, isDrawerExpanded, prevDrawerToggleState]);\n    React.useEffect(() => {\n        onDrawerChange();\n    }, [isDrawerExpanded, onDrawerChange]);\n    const emptyState = !_.isEmpty(loadError) ? React.createElement(AlertErrorState, { errorText: loadError.message }) : React.createElement(AlertEmptyState, { drawerToggle: toggleNotificationDrawer });\n    const criticalAlerts = _.isEmpty(criticalAlertList) ? emptyState : criticalAlertList;\n    const criticalAlertCategory = (React.createElement(NotificationCategory, { key: \"critical-alerts\", isExpanded: isAlertExpanded, label: \"Critical Alerts\", count: criticalAlertList.length, onExpandContents: toggleAlertExpanded }, criticalAlerts));\n    const nonCriticalAlertCategory = !_.isEmpty(otherAlertList) ? (React.createElement(NotificationCategory, { key: \"other-alerts\", isExpanded: isNonCriticalAlertExpanded, label: \"Other Alerts\", count: otherAlertList.length, onExpandContents: toggleNonCriticalAlertExpanded }, otherAlertList)) : null;\n    const messageCategory = !_.isEmpty(updateList) ? (React.createElement(NotificationCategory, { key: \"messages\", isExpanded: isClusterUpdateExpanded, label: \"Messages\", count: updateList.length, onExpandContents: toggleClusterUpdateExpanded }, updateList)) : null;\n    if (_.isEmpty(data) && _.isEmpty(updateList) && !notificationsRead) {\n        toggleNotificationsRead();\n    }\n    else if ((!_.isEmpty(data) || !_.isEmpty(updateList)) && notificationsRead) {\n        toggleNotificationsRead();\n    }\n    return (React.createElement(NotificationDrawer, { className: \"co-notification-drawer\", isInline: isDesktop, isExpanded: isDrawerExpanded, notificationEntries: [criticalAlertCategory, nonCriticalAlertCategory, messageCategory] }, children));\n};\nconst notificationStateToProps = ({ UI }) => ({\n    isDrawerExpanded: !!UI.getIn(['notifications', 'isExpanded']),\n    notificationsRead: !!UI.getIn(['notifications', 'isRead']),\n    alerts: UI.getIn(['monitoring', 'notificationAlerts']),\n    silences: UI.getIn(['monitoring', 'silences']),\n});\nconst connectToNotifications = connect((state) => notificationStateToProps(state), {\n    toggleNotificationDrawer: UIActions.notificationDrawerToggleExpanded,\n    toggleNotificationsRead: UIActions.notificationDrawerToggleRead,\n});\nexport const ConnectedNotificationDrawer = connectToNotifications(ConnectedNotificationDrawer_);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/notification-drawer.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/notification-drawer.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { NotificationDrawer, NotificationEntry, NotificationCategory, NotificationTypes } from '@console/patternfly';\nimport * as UIActions from '@console/internal/actions/ui';\nimport store, { RootState } from '@console/internal/redux';\nimport { Alert, alertURL } from '@console/internal/components/monitoring';\nimport { NotificationAlerts } from '@console/internal/reducers/ui';\nimport { RedExclamationCircleIcon } from '@console/shared';\nimport { getAlertDescription, getAlertMessage, getAlertName, getAlertSeverity, getAlertTime, getAlerts } from '@console/shared/src/components/dashboard/status-card/alert-utils';\nimport { EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateSecondaryActions, EmptyStateVariant, Title } from '@patternfly/react-core';\n\nimport { coFetchJSON } from '../co-fetch';\nimport { ClusterUpdate, ClusterVersionKind, referenceForModel } from '../module/k8s';\nimport { ClusterVersionModel } from '../models';\nimport { getSortedUpdates } from './modals/cluster-update-modal';\nimport { usePrevious } from '@console/metal3-plugin/src/hooks';\nimport { useK8sWatchResource, WatchK8sResource } from './utils/k8s-watch-hook';\nimport { useTranslation } from 'react-i18next';\n\nconst criticalCompare = (a: Alert): boolean => getAlertSeverity(a) === 'critical';\nconst otherAlertCompare = (a: Alert): boolean => getAlertSeverity(a) !== 'critical';\n\nconst AlertErrorState: React.FC<AlertErrorProps> = ({ errorText }) => {\n  const { t } = useTranslation();\n  return (\n    <EmptyState variant={EmptyStateVariant.full}>\n      <EmptyStateIcon className=\"co-status-card__alerts-icon\" icon={RedExclamationCircleIcon} />\n      <Title headingLevel=\"h5\" size=\"lg\">\n        {t('SINGLE:MSG_OVERVIEW_MAIN_CARDSTATUS_ALERT_1')}\n      </Title>\n      {errorText && <EmptyStateBody>{errorText}</EmptyStateBody>}\n    </EmptyState>\n  );\n};\n\nconst AlertEmptyState: React.FC<AlertEmptyProps> = ({ drawerToggle }) => (\n  <EmptyState variant={EmptyStateVariant.full} className=\"co-status-card__alerts-msg\">\n    <Title headingLevel=\"h5\" size=\"lg\">\n      No critical alerts\n    </Title>\n    <EmptyStateBody>There are currently no critical alerts firing. There may be firing alerts of other severities or silenced critical alerts however.</EmptyStateBody>\n    <EmptyStateSecondaryActions>\n      <Link to=\"/monitoring/alerts\" onClick={drawerToggle}>\n        View all alerts\n      </Link>\n    </EmptyStateSecondaryActions>\n  </EmptyState>\n);\n\nexport const alertActions = new Map().set('AlertmanagerReceiversNotConfigured', {\n  text: 'Configure',\n  path: '/monitoring/alertmanagerconfig',\n});\n\nconst getAlertNotificationEntries = (isLoaded: boolean, alertData: Alert[], toggleNotificationDrawer: () => void, isCritical: boolean): React.ReactNode[] =>\n  isLoaded && !_.isEmpty(alertData)\n    ? alertData\n        .filter(a => (isCritical ? criticalCompare(a) : otherAlertCompare(a)))\n        .map((alert, i) => {\n          const action = alertActions.get(alert.rule.name);\n          return <NotificationEntry key={`${i}_${alert.activeAt}`} description={getAlertDescription(alert) || getAlertMessage(alert)} timestamp={getAlertTime(alert)} type={NotificationTypes[getAlertSeverity(alert)]} title={getAlertName(alert)} toggleNotificationDrawer={toggleNotificationDrawer} targetPath={alertURL(alert, alert.rule.id)} actionText={action?.text} actionPath={action?.path} />;\n        })\n    : [];\n\nconst getUpdateNotificationEntries = (isLoaded: boolean, updateData: ClusterUpdate[], toggleNotificationDrawer: () => void): React.ReactNode[] => (isLoaded && !_.isEmpty(updateData) ? [<NotificationEntry actionPath=\"/settings/cluster\" actionText=\"Update cluster\" key=\"cluster-udpate\" description={updateData[0].version || 'Unknown'} type={NotificationTypes.update} title=\"Cluster update available\" toggleNotificationDrawer={toggleNotificationDrawer} targetPath=\"/settings/cluster\" />] : []);\n\nconst pollerTimeouts = {};\nconst pollers = {};\nconst cvResource: WatchK8sResource = {\n  kind: referenceForModel(ClusterVersionModel),\n  namespaced: false,\n  name: 'version',\n  isList: false,\n  optional: true,\n};\n\nexport const refreshNotificationPollers = () => {\n  _.each(pollerTimeouts, clearTimeout);\n  _.invoke(pollers, 'silences');\n  _.invoke(pollers, 'notificationAlerts');\n};\n\nexport const ConnectedNotificationDrawer_: React.FC<ConnectedNotificationDrawerProps> = ({ isDesktop, toggleNotificationDrawer, toggleNotificationsRead, isDrawerExpanded, onDrawerChange, notificationsRead, alerts, children }) => {\n  React.useEffect(() => {\n    const poll: NotificationPoll = (url, key: 'notificationAlerts' | 'silences', dataHandler) => {\n      store.dispatch(UIActions.monitoringLoading(key));\n      const notificationPoller = (): void => {\n        coFetchJSON(url)\n          .then(response => dataHandler(response))\n          .then(data => store.dispatch(UIActions.monitoringLoaded(key, data)))\n          .catch(e => store.dispatch(UIActions.monitoringErrored(key, e)))\n          .then(() => (pollerTimeouts[key] = setTimeout(notificationPoller, 15 * 1000)));\n      };\n      pollers[key] = notificationPoller;\n      notificationPoller();\n    };\n    const { alertManagerBaseURL, prometheusBaseURL } = window.SERVER_FLAGS;\n\n    if (prometheusBaseURL) {\n      poll(`${prometheusBaseURL}/api/v1/rules`, 'notificationAlerts', getAlerts);\n    } else {\n      store.dispatch(UIActions.monitoringErrored('notificationAlerts', new Error('prometheusBaseURL not set')));\n    }\n\n    if (alertManagerBaseURL) {\n      poll(`${alertManagerBaseURL}/api/v1/silences`, 'silences', ({ data }) => {\n        // Set a name field on the Silence to make things easier\n        _.each(data, s => {\n          s.name = _.get(_.find(s.matchers, { name: 'alertname' }), 'value');\n          if (!s.name) {\n            // No alertname, so fall back to displaying the other matchers\n            s.name = s.matchers.map(m => `${m.name}${m.isRegex ? '=~' : '='}${m.value}`).join(', ');\n          }\n        });\n        return data;\n      });\n    } else {\n      store.dispatch(UIActions.monitoringErrored('silences', new Error('alertManagerBaseURL not set')));\n    }\n\n    return () => _.each(pollerTimeouts, clearTimeout);\n  }, []);\n  const [clusterVersionData, clusterVersionLoaded] = useK8sWatchResource<ClusterVersionKind>(cvResource);\n  const updateData: ClusterUpdate[] = getSortedUpdates(clusterVersionData);\n  const { data, loaded, loadError } = alerts || {};\n\n  const updateList: React.ReactNode[] = getUpdateNotificationEntries(clusterVersionLoaded, updateData, toggleNotificationDrawer);\n  const criticalAlertList: React.ReactNode[] = getAlertNotificationEntries(true, data, toggleNotificationDrawer, true);\n  const otherAlertList: React.ReactNode[] = getAlertNotificationEntries(loaded, data, toggleNotificationDrawer, false);\n  const [isAlertExpanded, toggleAlertExpanded] = React.useState<boolean>(!_.isEmpty(criticalAlertList));\n  const [isNonCriticalAlertExpanded, toggleNonCriticalAlertExpanded] = React.useState<boolean>(true);\n  const [isClusterUpdateExpanded, toggleClusterUpdateExpanded] = React.useState<boolean>(true);\n  const prevDrawerToggleState = usePrevious(isDrawerExpanded);\n\n  const hasCriticalAlerts = criticalAlertList.length > 0;\n  const hasNonCriticalAlerts = otherAlertList.length > 0;\n  React.useEffect(() => {\n    if (hasCriticalAlerts && !prevDrawerToggleState && isDrawerExpanded) {\n      toggleAlertExpanded(true);\n    }\n    if (hasNonCriticalAlerts && !prevDrawerToggleState && isDrawerExpanded) {\n      toggleNonCriticalAlertExpanded(true);\n    }\n  }, [hasCriticalAlerts, hasNonCriticalAlerts, isAlertExpanded, isDrawerExpanded, prevDrawerToggleState]);\n  React.useEffect(() => {\n    onDrawerChange();\n  }, [isDrawerExpanded, onDrawerChange]);\n\n  const emptyState = !_.isEmpty(loadError) ? <AlertErrorState errorText={loadError.message} /> : <AlertEmptyState drawerToggle={toggleNotificationDrawer} />;\n\n  const criticalAlerts = _.isEmpty(criticalAlertList) ? emptyState : criticalAlertList;\n  const criticalAlertCategory: React.ReactElement = (\n    <NotificationCategory key=\"critical-alerts\" isExpanded={isAlertExpanded} label=\"Critical Alerts\" count={criticalAlertList.length} onExpandContents={toggleAlertExpanded}>\n      {criticalAlerts}\n    </NotificationCategory>\n  );\n  const nonCriticalAlertCategory: React.ReactElement = !_.isEmpty(otherAlertList) ? (\n    <NotificationCategory key=\"other-alerts\" isExpanded={isNonCriticalAlertExpanded} label=\"Other Alerts\" count={otherAlertList.length} onExpandContents={toggleNonCriticalAlertExpanded}>\n      {otherAlertList}\n    </NotificationCategory>\n  ) : null;\n\n  const messageCategory: React.ReactElement = !_.isEmpty(updateList) ? (\n    <NotificationCategory key=\"messages\" isExpanded={isClusterUpdateExpanded} label=\"Messages\" count={updateList.length} onExpandContents={toggleClusterUpdateExpanded}>\n      {updateList}\n    </NotificationCategory>\n  ) : null;\n\n  if (_.isEmpty(data) && _.isEmpty(updateList) && !notificationsRead) {\n    toggleNotificationsRead();\n  } else if ((!_.isEmpty(data) || !_.isEmpty(updateList)) && notificationsRead) {\n    toggleNotificationsRead();\n  }\n\n  return (\n    <NotificationDrawer className=\"co-notification-drawer\" isInline={isDesktop} isExpanded={isDrawerExpanded} notificationEntries={[criticalAlertCategory, nonCriticalAlertCategory, messageCategory]}>\n      {children}\n    </NotificationDrawer>\n  );\n};\n\ntype NotificationPoll = (url: string, key: 'notificationAlerts' | 'silences', dataHandler: (data) => any) => void;\n\nexport type WithNotificationsProps = {\n  isDrawerExpanded: boolean;\n  notificationsRead: boolean;\n  alerts?: {\n    data: Alert[];\n    loaded: boolean;\n    loadError?: {\n      message?: string;\n    };\n  };\n  silences?: any;\n};\n\nexport type ConnectedNotificationDrawerProps = {\n  isDesktop: boolean;\n  toggleNotificationsRead: () => any;\n  toggleNotificationDrawer: () => any;\n  isDrawerExpanded: boolean;\n  notificationsRead: boolean;\n  onDrawerChange: () => void;\n  alerts: NotificationAlerts;\n};\n\nconst notificationStateToProps = ({ UI }: RootState): WithNotificationsProps => ({\n  isDrawerExpanded: !!UI.getIn(['notifications', 'isExpanded']),\n  notificationsRead: !!UI.getIn(['notifications', 'isRead']),\n  alerts: UI.getIn(['monitoring', 'notificationAlerts']),\n  silences: UI.getIn(['monitoring', 'silences']),\n});\n\ntype AlertErrorProps = {\n  errorText: string;\n};\n\ntype AlertEmptyProps = {\n  drawerToggle: (event: React.MouseEvent<HTMLElement>) => void;\n};\n\nconst connectToNotifications = connect((state: RootState) => notificationStateToProps(state), {\n  toggleNotificationDrawer: UIActions.notificationDrawerToggleExpanded,\n  toggleNotificationsRead: UIActions.notificationDrawerToggleRead,\n});\nexport const ConnectedNotificationDrawer = connectToNotifications(ConnectedNotificationDrawer_);\n"]}]}