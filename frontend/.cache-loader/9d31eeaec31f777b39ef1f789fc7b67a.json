{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/hooks/use-show-error-toggler.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/hooks/use-show-error-toggler.ts","mtime":1616735742420},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nexport const useShowErrorToggler = (initialShowError = false, initialIsValid = false, checkIsValid) => {\n    const [showError, setShowError] = React.useState(initialShowError);\n    const [prevIsValid, setPrevIsValid] = React.useState(initialIsValid);\n    const checkValidity = (isValid) => {\n        if (isValid !== prevIsValid) {\n            setPrevIsValid(isValid);\n            if (isValid) {\n                setShowError(false);\n            }\n        }\n    };\n    if (checkIsValid != null) {\n        checkValidity(checkIsValid);\n    }\n    return [showError, setShowError, checkValidity];\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/hooks/use-show-error-toggler.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/hooks/use-show-error-toggler.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,MAAM,CAAC,MAAM,mBAAmB,GAAG,CACjC,mBAA4B,KAAK,EACjC,iBAA0B,KAAK,EAC/B,YAAsB,EACtB,EAAE;IACF,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAU,gBAAgB,CAAC,CAAC;IAC5E,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAU,cAAc,CAAC,CAAC;IAE9E,MAAM,aAAa,GAAG,CAAC,OAAgB,EAAE,EAAE;QACzC,IAAI,OAAO,KAAK,WAAW,EAAE;YAC3B,cAAc,CAAC,OAAO,CAAC,CAAC;YACxB,IAAI,OAAO,EAAE;gBACX,YAAY,CAAC,KAAK,CAAC,CAAC;aACrB;SACF;IACH,CAAC,CAAC;IAEF,IAAI,YAAY,IAAI,IAAI,EAAE;QACxB,aAAa,CAAC,YAAY,CAAC,CAAC;KAC7B;IAED,OAAO,CAAC,SAAS,EAAE,YAAY,EAAE,aAAa,CAI7C,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import * as React from 'react';\n\nexport const useShowErrorToggler = (\n  initialShowError: boolean = false,\n  initialIsValid: boolean = false,\n  checkIsValid?: boolean,\n) => {\n  const [showError, setShowError] = React.useState<boolean>(initialShowError);\n  const [prevIsValid, setPrevIsValid] = React.useState<boolean>(initialIsValid);\n\n  const checkValidity = (isValid: boolean) => {\n    if (isValid !== prevIsValid) {\n      setPrevIsValid(isValid);\n      if (isValid) {\n        setShowError(false);\n      }\n    }\n  };\n\n  if (checkIsValid != null) {\n    checkValidity(checkIsValid);\n  }\n\n  return [showError, setShowError, checkValidity] as [\n    boolean,\n    React.Dispatch<React.SetStateAction<boolean>>,\n    (isValid: boolean) => void,\n  ];\n};\n"]}]}