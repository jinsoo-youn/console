{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/utils/useCallbackRef.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/utils/useCallbackRef.ts","mtime":1616735742460},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { useRef, useCallback } from 'react';\nexport default function useCallbackRef(rawCallback) {\n    const cleanupRef = useRef(null);\n    const callback = useCallback(((node) => {\n        if (cleanupRef.current) {\n            cleanupRef.current();\n            cleanupRef.current = null;\n        }\n        if (node) {\n            cleanupRef.current = rawCallback(node);\n        }\n    }), [rawCallback]);\n    return callback;\n}\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/utils/useCallbackRef.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/utils/useCallbackRef.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAE,WAAW,EAAE,MAAM,OAAO,CAAC;AAE5C,MAAM,CAAC,OAAO,UAAU,cAAc,CAAoC,WAAc;IACtF,MAAM,UAAU,GAAG,MAAM,CAAqB,IAAI,CAAC,CAAC;IACpD,MAAM,QAAQ,GAAG,WAAW,CAC1B,CAAC,CAAC,IAAI,EAAE,EAAE;QACR,IAAI,UAAU,CAAC,OAAO,EAAE;YACtB,UAAU,CAAC,OAAO,EAAE,CAAC;YACrB,UAAU,CAAC,OAAO,GAAG,IAAI,CAAC;SAC3B;QACD,IAAI,IAAI,EAAE;YACR,UAAU,CAAC,OAAO,GAAG,WAAW,CAAC,IAAI,CAAC,CAAC;SACxC;IACH,CAAC,CAAM,EACP,CAAC,WAAW,CAAC,CACd,CAAC;IAEF,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["import { useRef, useCallback } from 'react';\n\nexport default function useCallbackRef<T extends (...args: any[]) => any>(rawCallback: T) {\n  const cleanupRef = useRef<(() => any) | null>(null);\n  const callback = useCallback<T>(\n    ((node) => {\n      if (cleanupRef.current) {\n        cleanupRef.current();\n        cleanupRef.current = null;\n      }\n      if (node) {\n        cleanupRef.current = rawCallback(node);\n      }\n    }) as T,\n    [rawCallback],\n  );\n\n  return callback;\n}\n"]}]}