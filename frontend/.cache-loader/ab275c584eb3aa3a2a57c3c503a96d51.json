{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/pod/PodStatus.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/pod/PodStatus.tsx","mtime":1615298458600},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { ChartDonut } from '@patternfly/react-charts';\nimport { Tooltip } from '@patternfly/react-core';\nimport { calculateRadius, podStatus, getPodStatus } from '../../utils';\nimport { podColor, AllPodStatus } from '../../constants';\nimport './PodStatus.scss';\nconst ANIMATION_DURATION = 350;\nconst { podStatusInnerRadius, podStatusOuterRadius } = calculateRadius(130); // default value of size is 130\nconst podStatusIsNumeric = (podStatusValue) => {\n    return (podStatusValue !== AllPodStatus.ScaledTo0 &&\n        podStatusValue !== AllPodStatus.AutoScaledTo0 &&\n        podStatusValue !== AllPodStatus.Idle &&\n        podStatusValue !== AllPodStatus.ScalingUp);\n};\nclass PodStatus extends React.Component {\n    constructor(props) {\n        super(props);\n        this.doUpdate = () => {\n            // Animations complete, update to remove empty slices\n            this.forceUpdate();\n        };\n        this.state = {\n            vData: [],\n            updateOnEnd: false,\n        };\n    }\n    static getDerivedStateFromProps(nextProps, prevState) {\n        const { data } = nextProps;\n        if (prevState.updateOnEnd) {\n            // Animations complete, remove empty slices\n            return {\n                vData: _.filter(prevState.vData, (nextData) => nextData.y !== 0),\n                updateOnEnd: false,\n            };\n        }\n        const vData = podStatus.map((pod) => ({\n            x: pod,\n            y: _.sumBy(data, (d) => +(getPodStatus(d) === pod)) || 0,\n        }));\n        if (_.isEmpty(data)) {\n            _.update(vData, `[${_.findKey(vData, { x: AllPodStatus.ScaledTo0 })}]['y']`, () => 1);\n        }\n        // Determine if we have moved to just 1 data point left\n        const prevDataPoints = _.size(_.filter(prevState.vData, (nextData) => nextData.y !== 0));\n        const dataPoints = _.size(_.filter(vData, (nextData) => nextData.y !== 0));\n        return { vData, updateOnEnd: dataPoints === 1 && prevDataPoints > 1 };\n    }\n    render() {\n        const { innerRadius = podStatusInnerRadius, outerRadius = podStatusOuterRadius, x, y, size = 130, standalone = false, showTooltip = true, title = '', subTitle = '', titleComponent, subTitleComponent, } = this.props;\n        const { vData, updateOnEnd } = this.state;\n        const chartDonut = (React.createElement(ChartDonut, { animate: {\n                duration: ANIMATION_DURATION,\n                onEnd: updateOnEnd ? this.doUpdate : undefined,\n            }, standalone: standalone, innerRadius: innerRadius, radius: outerRadius, groupComponent: x && y ? React.createElement(\"g\", { transform: `translate(${x}, ${y})` }) : undefined, data: vData, height: size, width: size, title: title, titleComponent: titleComponent, subTitleComponent: subTitleComponent, subTitle: subTitle, allowTooltip: false, labels: () => null, \n            /*\n                // @ts-ignore */\n            padAngle: ({ datum }) => (datum.y > 0 ? 2 : 0), style: {\n                data: {\n                    fill: ({ datum }) => podColor[datum.x],\n                    stroke: ({ datum }) => !podStatusIsNumeric(datum.x) && datum.y > 0 ? '#BBBBBB' : 'none',\n                    strokeWidth: 1,\n                },\n            } }));\n        if (showTooltip) {\n            const tipContent = (React.createElement(\"div\", { className: \"odc-pod-status-tooltip\" }, vData.map((data) => {\n                return data.y > 0 ? (React.createElement(\"div\", { key: data.x, className: \"odc-pod-status-tooltip__content\" },\n                    React.createElement(\"span\", { className: \"odc-pod-status-tooltip__status-box\", style: { background: podColor[data.x] } }),\n                    podStatusIsNumeric(data.x) && (React.createElement(\"span\", { key: 3, className: \"odc-pod-status-tooltip__status-count\" }, `${Math.round(data.y)}`)),\n                    data.x)) : null;\n            })));\n            return React.createElement(Tooltip, { content: tipContent }, chartDonut);\n        }\n        return chartDonut;\n    }\n}\nexport default React.memo((props) => React.createElement(PodStatus, Object.assign({}, props)));\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/pod/PodStatus.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/pod/PodStatus.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { ChartDonut } from '@patternfly/react-charts';\nimport { Tooltip } from '@patternfly/react-core';\nimport { ExtPodKind } from '../../types';\nimport { calculateRadius, podStatus, getPodStatus } from '../../utils';\nimport { podColor, AllPodStatus } from '../../constants';\nimport './PodStatus.scss';\n\nconst ANIMATION_DURATION = 350;\n\ntype PodData = {\n  x: string;\n  y: number;\n};\n\ntype PodStatusProps = {\n  innerRadius?: number;\n  outerRadius?: number;\n  size?: number;\n  standalone?: boolean;\n  x?: number;\n  y?: number;\n  data: ExtPodKind[];\n  showTooltip?: boolean;\n  title?: string;\n  titleComponent?: React.ReactElement;\n  subTitle?: string;\n  subTitleComponent?: React.ReactElement;\n};\n\ntype PodStatusState = {\n  vData: PodData[];\n  updateOnEnd: boolean;\n  tipIndex?: number;\n};\n\nconst { podStatusInnerRadius, podStatusOuterRadius } = calculateRadius(130); // default value of size is 130\n\nconst podStatusIsNumeric = (podStatusValue: string) => {\n  return (\n    podStatusValue !== AllPodStatus.ScaledTo0 &&\n    podStatusValue !== AllPodStatus.AutoScaledTo0 &&\n    podStatusValue !== AllPodStatus.Idle &&\n    podStatusValue !== AllPodStatus.ScalingUp\n  );\n};\n\nclass PodStatus extends React.Component<PodStatusProps, PodStatusState> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      vData: [],\n      updateOnEnd: false,\n    };\n  }\n\n  static getDerivedStateFromProps(\n    nextProps: PodStatusProps,\n    prevState: PodStatusState,\n  ): PodStatusState {\n    const { data } = nextProps;\n\n    if (prevState.updateOnEnd) {\n      // Animations complete, remove empty slices\n      return {\n        vData: _.filter(prevState.vData, (nextData) => nextData.y !== 0),\n        updateOnEnd: false,\n      };\n    }\n\n    const vData: PodData[] = podStatus.map((pod) => ({\n      x: pod,\n      y: _.sumBy(data, (d) => +(getPodStatus(d) === pod)) || 0,\n    }));\n\n    if (_.isEmpty(data)) {\n      _.update(vData, `[${_.findKey(vData, { x: AllPodStatus.ScaledTo0 })}]['y']`, () => 1);\n    }\n\n    // Determine if we have moved to just 1 data point left\n    const prevDataPoints = _.size(_.filter(prevState.vData, (nextData) => nextData.y !== 0));\n    const dataPoints = _.size(_.filter(vData, (nextData) => nextData.y !== 0));\n    return { vData, updateOnEnd: dataPoints === 1 && prevDataPoints > 1 };\n  }\n\n  doUpdate = () => {\n    // Animations complete, update to remove empty slices\n    this.forceUpdate();\n  };\n\n  render() {\n    const {\n      innerRadius = podStatusInnerRadius,\n      outerRadius = podStatusOuterRadius,\n      x,\n      y,\n      size = 130,\n      standalone = false,\n      showTooltip = true,\n      title = '',\n      subTitle = '',\n      titleComponent,\n      subTitleComponent,\n    } = this.props;\n    const { vData, updateOnEnd } = this.state;\n\n    const chartDonut = (\n      <ChartDonut\n        animate={{\n          duration: ANIMATION_DURATION,\n          onEnd: updateOnEnd ? this.doUpdate : undefined,\n        }}\n        standalone={standalone}\n        innerRadius={innerRadius}\n        radius={outerRadius}\n        groupComponent={x && y ? <g transform={`translate(${x}, ${y})`} /> : undefined}\n        data={vData}\n        height={size}\n        width={size}\n        title={title}\n        titleComponent={titleComponent}\n        subTitleComponent={subTitleComponent}\n        subTitle={subTitle}\n        allowTooltip={false}\n        labels={() => null}\n        /*\n            // @ts-ignore */\n        padAngle={({ datum }) => (datum.y > 0 ? 2 : 0)}\n        style={{\n          data: {\n            fill: ({ datum }) => podColor[datum.x],\n            stroke: ({ datum }) =>\n              !podStatusIsNumeric(datum.x) && datum.y > 0 ? '#BBBBBB' : 'none',\n            strokeWidth: 1,\n          },\n        }}\n      />\n    );\n    if (showTooltip) {\n      const tipContent = (\n        <div className=\"odc-pod-status-tooltip\">\n          {vData.map((data) => {\n            return data.y > 0 ? (\n              <div key={data.x} className=\"odc-pod-status-tooltip__content\">\n                <span\n                  className=\"odc-pod-status-tooltip__status-box\"\n                  style={{ background: podColor[data.x] }}\n                />\n                {podStatusIsNumeric(data.x) && (\n                  <span key={3} className=\"odc-pod-status-tooltip__status-count\">\n                    {`${Math.round(data.y)}`}\n                  </span>\n                )}\n                {data.x}\n              </div>\n            ) : null;\n          })}\n        </div>\n      );\n      return <Tooltip content={tipContent}>{chartDonut}</Tooltip>;\n    }\n    return chartDonut;\n  }\n}\n\nexport default React.memo((props: PodStatusProps) => <PodStatus {...props} />);\n"]}]}