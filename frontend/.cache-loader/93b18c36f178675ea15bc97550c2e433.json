{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/health-checks/HealthChecksProbe.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/health-checks/HealthChecksProbe.tsx","mtime":1616735742380},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { useFormikContext } from 'formik';\nimport { PlusCircleIcon, MinusCircleIcon } from '@patternfly/react-icons';\nimport { GreenCheckCircleIcon } from '@console/shared';\nimport { Button, ButtonVariant } from '@patternfly/react-core';\nimport ProbeForm from './ProbeForm';\nimport { getHealthChecksProbeConfig, healthChecksDefaultValues } from './health-checks-probe-utils';\nimport './HealthChecksProbe.scss';\nconst HealthCheckProbe = ({ probeType }) => {\n    var _a;\n    const { values: { healthChecks }, setFieldValue, } = useFormikContext();\n    const [temporaryProbeData, setTemporaryProbeData] = React.useState();\n    const onEditProbe = () => {\n        setFieldValue(`healthChecks.${probeType}.showForm`, true);\n        setTemporaryProbeData(healthChecks === null || healthChecks === void 0 ? void 0 : healthChecks[probeType].data);\n    };\n    const handleDeleteProbe = () => {\n        var _a;\n        setFieldValue(`healthChecks.${probeType}`, healthChecksDefaultValues);\n        if ((_a = healthChecks === null || healthChecks === void 0 ? void 0 : healthChecks[probeType]) === null || _a === void 0 ? void 0 : _a.modified) {\n            setFieldValue(`healthChecks.${probeType}.modified`, false);\n        }\n        else {\n            setFieldValue(`healthChecks.${probeType}.modified`, true);\n        }\n    };\n    const handleReset = () => {\n        var _a;\n        if (!((_a = healthChecks === null || healthChecks === void 0 ? void 0 : healthChecks[probeType]) === null || _a === void 0 ? void 0 : _a.enabled)) {\n            setFieldValue(`healthChecks.${probeType}`, healthChecksDefaultValues);\n        }\n        else {\n            setFieldValue(`healthChecks.${probeType}.showForm`, false);\n            setFieldValue(`healthChecks.${probeType}.data`, temporaryProbeData);\n        }\n        setFieldValue(`healthChecks.${probeType}.modified`, false);\n    };\n    const handleSubmit = () => {\n        setFieldValue(`healthChecks.${probeType}.showForm`, false);\n        setFieldValue(`healthChecks.${probeType}.enabled`, true);\n        setFieldValue(`healthChecks.${probeType}.modified`, true);\n    };\n    const handleAddProbe = () => {\n        setFieldValue(`healthChecks.${probeType}.showForm`, true);\n    };\n    const renderProbe = () => {\n        var _a, _b;\n        if ((_a = healthChecks === null || healthChecks === void 0 ? void 0 : healthChecks[probeType]) === null || _a === void 0 ? void 0 : _a.showForm) {\n            return React.createElement(ProbeForm, { onSubmit: handleSubmit, onClose: handleReset, probeType: probeType });\n        }\n        if ((_b = healthChecks === null || healthChecks === void 0 ? void 0 : healthChecks[probeType]) === null || _b === void 0 ? void 0 : _b.enabled) {\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"span\", { className: \"odc-heath-check-probe__successText\" },\n                    React.createElement(GreenCheckCircleIcon, null),\n                    \" \",\n                    `${getHealthChecksProbeConfig(probeType).formTitle} Added`),\n                React.createElement(Button, { className: \"pf-m-plain--align-left\", variant: ButtonVariant.plain, onClick: handleDeleteProbe },\n                    React.createElement(MinusCircleIcon, null))));\n        }\n        return (React.createElement(Button, { className: \"pf-m-link--align-left\", variant: ButtonVariant.link, onClick: handleAddProbe, icon: React.createElement(PlusCircleIcon, null) }, `Add ${getHealthChecksProbeConfig(probeType).formTitle}`));\n    };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: \"co-section-heading-tertiary odc-heath-check-probe__formTitle\" },\n            getHealthChecksProbeConfig(probeType).formTitle,\n            ((_a = healthChecks === null || healthChecks === void 0 ? void 0 : healthChecks[probeType]) === null || _a === void 0 ? void 0 : _a.enabled) && (React.createElement(Button, { className: \"pf-m-link--align-left\", variant: ButtonVariant.link, onClick: onEditProbe },\n                \"\\u00A0\\u00A0\",\n                'Edit Probe'))),\n        React.createElement(\"div\", { className: \"pf-c-form__helper-text\" }, getHealthChecksProbeConfig(probeType).formSubtitle),\n        React.createElement(\"div\", { className: \"co-toolbar__group co-toolbar__group--left\" }, renderProbe())));\n};\nexport default HealthCheckProbe;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/health-checks/HealthChecksProbe.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/health-checks/HealthChecksProbe.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { PlusCircleIcon, MinusCircleIcon } from '@patternfly/react-icons';\nimport { GreenCheckCircleIcon } from '@console/shared';\nimport { Button, ButtonVariant } from '@patternfly/react-core';\nimport ProbeForm from './ProbeForm';\nimport { getHealthChecksProbeConfig, healthChecksDefaultValues } from './health-checks-probe-utils';\nimport { HealthCheckProbeData } from './health-checks-types';\nimport './HealthChecksProbe.scss';\n\ninterface HealthCheckProbeProps {\n  probeType: string;\n}\n\nconst HealthCheckProbe: React.FC<HealthCheckProbeProps> = ({ probeType }) => {\n  const {\n    values: { healthChecks },\n    setFieldValue,\n  } = useFormikContext<FormikValues>();\n  const [temporaryProbeData, setTemporaryProbeData] = React.useState<HealthCheckProbeData>();\n  const onEditProbe = () => {\n    setFieldValue(`healthChecks.${probeType}.showForm`, true);\n    setTemporaryProbeData(healthChecks?.[probeType].data);\n  };\n\n  const handleDeleteProbe = () => {\n    setFieldValue(`healthChecks.${probeType}`, healthChecksDefaultValues);\n    if (healthChecks?.[probeType]?.modified) {\n      setFieldValue(`healthChecks.${probeType}.modified`, false);\n    } else {\n      setFieldValue(`healthChecks.${probeType}.modified`, true);\n    }\n  };\n\n  const handleReset = () => {\n    if (!healthChecks?.[probeType]?.enabled) {\n      setFieldValue(`healthChecks.${probeType}`, healthChecksDefaultValues);\n    } else {\n      setFieldValue(`healthChecks.${probeType}.showForm`, false);\n      setFieldValue(`healthChecks.${probeType}.data`, temporaryProbeData);\n    }\n    setFieldValue(`healthChecks.${probeType}.modified`, false);\n  };\n\n  const handleSubmit = () => {\n    setFieldValue(`healthChecks.${probeType}.showForm`, false);\n    setFieldValue(`healthChecks.${probeType}.enabled`, true);\n    setFieldValue(`healthChecks.${probeType}.modified`, true);\n  };\n\n  const handleAddProbe = () => {\n    setFieldValue(`healthChecks.${probeType}.showForm`, true);\n  };\n\n  const renderProbe = () => {\n    if (healthChecks?.[probeType]?.showForm) {\n      return <ProbeForm onSubmit={handleSubmit} onClose={handleReset} probeType={probeType} />;\n    }\n    if (healthChecks?.[probeType]?.enabled) {\n      return (\n        <>\n          <span className=\"odc-heath-check-probe__successText\">\n            <GreenCheckCircleIcon /> {`${getHealthChecksProbeConfig(probeType).formTitle} Added`}\n          </span>\n          <Button\n            className=\"pf-m-plain--align-left\"\n            variant={ButtonVariant.plain}\n            onClick={handleDeleteProbe}\n          >\n            <MinusCircleIcon />\n          </Button>\n        </>\n      );\n    }\n    return (\n      <Button\n        className=\"pf-m-link--align-left\"\n        variant={ButtonVariant.link}\n        onClick={handleAddProbe}\n        icon={<PlusCircleIcon />}\n      >\n        {`Add ${getHealthChecksProbeConfig(probeType).formTitle}`}\n      </Button>\n    );\n  };\n\n  return (\n    <>\n      <div className=\"co-section-heading-tertiary odc-heath-check-probe__formTitle\">\n        {getHealthChecksProbeConfig(probeType).formTitle}\n        {healthChecks?.[probeType]?.enabled && (\n          <Button\n            className=\"pf-m-link--align-left\"\n            variant={ButtonVariant.link}\n            onClick={onEditProbe}\n          >\n            &nbsp;&nbsp;\n            {'Edit Probe'}\n          </Button>\n        )}\n      </div>\n      <div className=\"pf-c-form__helper-text\">\n        {getHealthChecksProbeConfig(probeType).formSubtitle}\n      </div>\n      <div className=\"co-toolbar__group co-toolbar__group--left\">{renderProbe()}</div>\n    </>\n  );\n};\n\nexport default HealthCheckProbe;\n"]}]}