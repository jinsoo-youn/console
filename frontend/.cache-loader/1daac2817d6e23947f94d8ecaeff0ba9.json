{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-resource/PipelineClusterOptions.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-resource/PipelineClusterOptions.tsx","mtime":1615298458620},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { InputField, DroppableFileInputField } from '@console/shared';\nconst PipelineClusterOptions = ({ prefixName }) => (React.createElement(React.Fragment, null,\n    React.createElement(InputField, { type: TextInputTypes.text, name: `${prefixName}.params.name`, label: \"Name\", helpText: \"Name of the cluster.\", required: true }),\n    React.createElement(InputField, { type: TextInputTypes.text, name: `${prefixName}.params.url`, label: \"URL\", helpText: \"Host URL of the master node.\", required: true }),\n    React.createElement(InputField, { type: TextInputTypes.text, name: `${prefixName}.params.username`, label: \"Username\", helpText: \"The user with access to the cluster.\", required: true }),\n    React.createElement(InputField, { type: TextInputTypes.password, name: `${prefixName}.params.password`, label: \"Password\", helpText: \"Please provide Password.\" }),\n    React.createElement(InputField, { type: TextInputTypes.text, name: `${prefixName}.params.insecure`, label: \"Insecure\", helpText: \"Indicate server should be accessed without verifying the TLS certificate.\" }),\n    React.createElement(DroppableFileInputField, { name: `${prefixName}.secrets.cadata`, label: \"Cadata\", helpText: \"The PEM format certificate. Upload file by dragging & dropping, selecting it, or pasting from the clipboard.\", required: true }),\n    React.createElement(DroppableFileInputField, { name: `${prefixName}.secrets.token`, label: \"Token\", helpText: \"Upload file by dragging & dropping, selecting it, or pasting from the clipboard.\", required: true })));\nexport default PipelineClusterOptions;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-resource/PipelineClusterOptions.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-resource/PipelineClusterOptions.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,cAAc,EAAE,MAAM,wBAAwB,CAAC;AACxD,OAAO,EAAE,UAAU,EAAE,uBAAuB,EAAE,MAAM,iBAAiB,CAAC;AAItE,MAAM,sBAAsB,GAA0C,CAAC,EAAE,UAAU,EAAE,EAAE,EAAE,CAAC,CACxF;IACE,oBAAC,UAAU,IACT,IAAI,EAAE,cAAc,CAAC,IAAI,EACzB,IAAI,EAAE,GAAG,UAAU,cAAc,EACjC,KAAK,EAAC,MAAM,EACZ,QAAQ,EAAC,sBAAsB,EAC/B,QAAQ,SACR;IACF,oBAAC,UAAU,IACT,IAAI,EAAE,cAAc,CAAC,IAAI,EACzB,IAAI,EAAE,GAAG,UAAU,aAAa,EAChC,KAAK,EAAC,KAAK,EACX,QAAQ,EAAC,8BAA8B,EACvC,QAAQ,SACR;IACF,oBAAC,UAAU,IACT,IAAI,EAAE,cAAc,CAAC,IAAI,EACzB,IAAI,EAAE,GAAG,UAAU,kBAAkB,EACrC,KAAK,EAAC,UAAU,EAChB,QAAQ,EAAC,sCAAsC,EAC/C,QAAQ,SACR;IACF,oBAAC,UAAU,IACT,IAAI,EAAE,cAAc,CAAC,QAAQ,EAC7B,IAAI,EAAE,GAAG,UAAU,kBAAkB,EACrC,KAAK,EAAC,UAAU,EAChB,QAAQ,EAAC,0BAA0B,GACnC;IACF,oBAAC,UAAU,IACT,IAAI,EAAE,cAAc,CAAC,IAAI,EACzB,IAAI,EAAE,GAAG,UAAU,kBAAkB,EACrC,KAAK,EAAC,UAAU,EAChB,QAAQ,EAAC,2EAA2E,GACpF;IACF,oBAAC,uBAAuB,IACtB,IAAI,EAAE,GAAG,UAAU,iBAAiB,EACpC,KAAK,EAAC,QAAQ,EACd,QAAQ,EAAC,8GAAkH,EAC3H,QAAQ,SACR;IACF,oBAAC,uBAAuB,IACtB,IAAI,EAAE,GAAG,UAAU,gBAAgB,EACnC,KAAK,EAAC,OAAO,EACb,QAAQ,EAAC,kFAAsF,EAC/F,QAAQ,SACR,CACD,CACJ,CAAC;AAEF,eAAe,sBAAsB,CAAC","sourcesContent":["import * as React from 'react';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { InputField, DroppableFileInputField } from '@console/shared';\n\ntype PipelineClusterOptionsProps = { prefixName: string };\n\nconst PipelineClusterOptions: React.FC<PipelineClusterOptionsProps> = ({ prefixName }) => (\n  <>\n    <InputField\n      type={TextInputTypes.text}\n      name={`${prefixName}.params.name`}\n      label=\"Name\"\n      helpText=\"Name of the cluster.\"\n      required\n    />\n    <InputField\n      type={TextInputTypes.text}\n      name={`${prefixName}.params.url`}\n      label=\"URL\"\n      helpText=\"Host URL of the master node.\"\n      required\n    />\n    <InputField\n      type={TextInputTypes.text}\n      name={`${prefixName}.params.username`}\n      label=\"Username\"\n      helpText=\"The user with access to the cluster.\"\n      required\n    />\n    <InputField\n      type={TextInputTypes.password}\n      name={`${prefixName}.params.password`}\n      label=\"Password\"\n      helpText=\"Please provide Password.\"\n    />\n    <InputField\n      type={TextInputTypes.text}\n      name={`${prefixName}.params.insecure`}\n      label=\"Insecure\"\n      helpText=\"Indicate server should be accessed without verifying the TLS certificate.\"\n    />\n    <DroppableFileInputField\n      name={`${prefixName}.secrets.cadata`}\n      label=\"Cadata\"\n      helpText=\"The PEM format certificate. Upload file by dragging &amp; dropping, selecting it, or pasting from the clipboard.\"\n      required\n    />\n    <DroppableFileInputField\n      name={`${prefixName}.secrets.token`}\n      label=\"Token\"\n      helpText=\"Upload file by dragging &amp; dropping, selecting it, or pasting from the clipboard.\"\n      required\n    />\n  </>\n);\n\nexport default PipelineClusterOptions;\n"]}]}