{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/form/taskruns/create-taskrun.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/form/taskruns/create-taskrun.tsx","mtime":1618309685320},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { useTranslation } from 'react-i18next';\nimport { WithCommonForm } from '../create-form';\nimport { Section } from '../../utils/section';\nimport { ListView } from '../../utils/list-view';\nimport { ResourceDropdown } from '../../utils/resource-dropdown';\nimport { k8sGet } from '../../../../module/k8s';\nimport { TaskModel, PipelineResourceModel, ServiceAccountModel, TaskRunModel } from '../../../../models';\nimport { Button } from '@patternfly/react-core';\nimport store from '../../../../redux';\nimport { getActiveNamespace } from '@console/internal/reducers/ui';\nconst defaultValues = {\n    metadata: {\n        name: 'example-name',\n    },\n};\nconst taskRunFormFactory = params => {\n    return WithCommonForm(CreateTaskRunComponent, params, defaultValues);\n};\nconst paramItemRenderer = (register, name, item, index, ListActions, ListDefaultIcons) => {\n    return (React.createElement(\"div\", { className: \"row\", key: item.id },\n        React.createElement(\"div\", { className: \"col-xs-4 pairs-list__value-field\" },\n            React.createElement(\"input\", { ref: register(), className: \"pf-c-form-control\", defaultValue: item.value, name: `${name}[${index}].value` })),\n        React.createElement(\"div\", { className: \"col-xs-1 pairs-list__action\" },\n            React.createElement(Button, { type: \"button\", \"data-test-id\": \"pairs-list__delete-btn\", className: \"pairs-list__span-btns\", onClick: () => {\n                    ListActions.remove(index);\n                }, variant: \"plain\" }, ListDefaultIcons.deleteIcon))));\n};\nconst CreateTaskRunComponent = props => {\n    const { t } = useTranslation();\n    const methods = useFormContext();\n    const [selectedTask, setSelectedTask] = useState('');\n    const [inputList, setInputList] = useState([]);\n    const [outputList, setOutputList] = useState([]);\n    const [paramList, setParamList] = useState([]);\n    const [workspaceList, setWorkspaceList] = useState([]);\n    const namespace = getActiveNamespace(store.getState());\n    const getTaskDetails = (selectedTaskName) => __awaiter(void 0, void 0, void 0, function* () {\n        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n        const task = yield k8sGet(TaskModel, selectedTaskName, getActiveNamespace(store.getState()));\n        const inputsData = (_c = (_b = (_a = task.spec) === null || _a === void 0 ? void 0 : _a.resources) === null || _b === void 0 ? void 0 : _b.inputs) === null || _c === void 0 ? void 0 : _c.map(input => {\n            return {\n                name: input.name,\n                required: !input.optional,\n                type: input.type,\n                description: input.description,\n            };\n        });\n        const outputsData = (_f = (_e = (_d = task.spec) === null || _d === void 0 ? void 0 : _d.resources) === null || _e === void 0 ? void 0 : _e.outputs) === null || _f === void 0 ? void 0 : _f.map(output => {\n            return {\n                name: output.name,\n                required: !output.optional,\n                type: output.type,\n                description: output.description,\n            };\n        });\n        setInputList(inputsData || []);\n        setOutputList(outputsData || []);\n        const paramValueListData = (_h = (_g = task.spec) === null || _g === void 0 ? void 0 : _g.params) === null || _h === void 0 ? void 0 : _h.map(param => {\n            if (param.type === 'array') {\n                const valueList = param.default.map(value => {\n                    return {\n                        value: value,\n                    };\n                });\n                return { value: valueList };\n            }\n            else {\n                return { value: param.default };\n            }\n        });\n        // MEMO : ListView의 value를 세팅해주는 방법이 reset이 최선일까..?\n        // MEMO : reset할 때 params 부분 이외에 다른 value들은 그대로 있게 하기 위해 이렇게 함.\n        const prevValues = methods.getValues();\n        methods.reset(Object.assign(Object.assign({}, prevValues), { params: paramValueListData }));\n        const paramsData = (_k = (_j = task.spec) === null || _j === void 0 ? void 0 : _j.params) === null || _k === void 0 ? void 0 : _k.map(param => {\n            return {\n                name: param.name,\n                value: param.default,\n                description: param.description,\n                type: param.type,\n                required: !!param.default,\n            };\n        });\n        setParamList(paramsData || []);\n        const workspacesData = (_m = (_l = task.spec) === null || _l === void 0 ? void 0 : _l.workspaces) === null || _m === void 0 ? void 0 : _m.map(workspace => {\n            return {\n                name: workspace.name,\n                description: workspace.description,\n            };\n        });\n        setWorkspaceList(workspacesData || []);\n    });\n    const inputs = inputList.map((item, index) => {\n        return (React.createElement(Section, { label: `${item.name} (${item.type})`, id: `input_${index}`, key: `input_${index}`, isRequired: item.required, description: item.description },\n            React.createElement(React.Fragment, null,\n                React.createElement(\"input\", { ref: methods.register, type: \"hidden\", id: `spec.resources.inputs[${index}].name`, name: `spec.resources.inputs[${index}].name`, value: item.name }),\n                React.createElement(ResourceDropdown, { name: `spec.resources.inputs[${index}].resourceRef.name`, placeholder: t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_8'), resources: [{ kind: PipelineResourceModel.kind, namespace: namespace, prop: 'pipelineresource' }], type: \"single\", useHookForm: true }))));\n    });\n    const outputs = outputList.map((item, index) => {\n        return (React.createElement(Section, { label: `${item.name} (${item.type})`, id: `output_${index}`, key: `output_${index}`, isRequired: item.required, description: item.description },\n            React.createElement(React.Fragment, null,\n                React.createElement(\"input\", { ref: methods.register, type: \"hidden\", id: `spec.resources.outputs[${index}].name`, name: `spec.resources.outputs[${index}].name`, value: item.name }),\n                React.createElement(ResourceDropdown, { name: `spec.resources.outputs[${index}].resourceRef.name`, placeholder: t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_8'), resources: [{ kind: PipelineResourceModel.kind, namespace: namespace, prop: 'pipelineresource' }], type: \"single\", useHookForm: true }))));\n    });\n    const params = paramList.map((item, index) => {\n        if (item.type === 'array') {\n            return (React.createElement(Section, { label: item.name, id: `${selectedTask}_param_${index}`, key: `${selectedTask}_param_${index}` },\n                React.createElement(React.Fragment, null,\n                    React.createElement(\"input\", { ref: methods.register, type: \"hidden\", id: `params[${index}].name`, name: `params[${index}].name`, value: item.name }),\n                    React.createElement(ListView, { name: `params[${index}].value`, methods: methods, addButtonText: \"\\uCD94\\uAC00\", headerFragment: React.createElement(React.Fragment, null), itemRenderer: paramItemRenderer, defaultItem: { value: '' } }))));\n        }\n        else {\n            return (React.createElement(Section, { label: item.name, id: `${selectedTask}_param_${index}`, key: `${selectedTask}_param_${index}` },\n                React.createElement(React.Fragment, null,\n                    React.createElement(\"input\", { ref: methods.register, type: \"hidden\", id: `params[${index}].name`, name: `params[${index}].name`, value: item.name }),\n                    React.createElement(\"input\", { ref: methods.register, className: \"pf-c-form-control\", id: `params[${index}].value`, name: `params[${index}].value`, defaultValue: item.value }))));\n        }\n    });\n    const workspaces = workspaceList.map((item, index) => {\n        return (React.createElement(Section, { label: item.name, description: item.description, key: index, id: `workspace_${index}_${item.name}` },\n            React.createElement(React.Fragment, null)));\n    });\n    const onTaskSelect = selectedTaskName => {\n        setSelectedTask(selectedTaskName);\n        getTaskDetails(selectedTaskName);\n    };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Section, { label: t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_5'), id: \"task\" },\n            React.createElement(ResourceDropdown, { name: \"spec.taskRef.name\", placeholder: t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_5'), resources: [{ kind: TaskModel.kind, namespace: namespace, prop: 'task' }], onChange: onTaskSelect, type: \"single\", useHookForm: true })),\n        React.createElement(Section, { label: t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_7'), id: \"inputresource\" },\n            React.createElement(\"div\", null, inputs)),\n        React.createElement(Section, { label: t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_9'), id: \"outputresource\" },\n            React.createElement(\"div\", null, outputs)),\n        React.createElement(Section, { label: t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_6'), id: \"taskparameter\" },\n            React.createElement(\"div\", null, params)),\n        React.createElement(Section, { label: \"\\uC6CC\\uD06C\\uC2A4\\uD398\\uC774\\uC2A4\", id: \"workspace\" },\n            React.createElement(\"div\", null, workspaces)),\n        React.createElement(Section, { label: t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_11'), id: \"timeout\", description: t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_13') },\n            React.createElement(\"div\", null,\n                React.createElement(\"input\", { ref: methods.register, className: \"pf-c-form-control\", id: \"time_input\", name: \"spec.timeout\", type: \"number\", placeholder: \"\\uC608: 60, 120, 30\" }),\n                \" \\uBD84\")),\n        React.createElement(Section, { label: t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_14'), id: \"serviceaccount\", description: t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_16'), isRequired: true },\n            React.createElement(ResourceDropdown, { name: \"spec.serviceAccountName\", placeholder: t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_15'), resources: [{ kind: ServiceAccountModel.kind, namespace: namespace, prop: 'serviceaccount' }], type: \"single\", useHookForm: true }))));\n};\nexport const CreateTaskRun = ({ match: { params }, kind }) => {\n    const formComponent = taskRunFormFactory(params);\n    const TaskRunFormComponent = formComponent;\n    return React.createElement(TaskRunFormComponent, { fixed: { apiVersion: `${TaskRunModel.apiGroup}/${TaskRunModel.apiVersion}`, kind, metadata: { namespace: params.ns } }, explanation: '', titleVerb: \"Create\", onSubmitCallback: onSubmitCallback, isCreate: true });\n};\nconst changeTimeoutFormat = timeout => {\n    timeout = Number(timeout);\n    if (timeout == 0) {\n        return 0;\n    }\n    if (timeout >= 60) {\n        return `${(timeout - (timeout % 60)) / 60}h${timeout % 60}m`;\n    }\n    else\n        return `${timeout}m`;\n};\nexport const onSubmitCallback = data => {\n    let params = _.cloneDeep(data.params);\n    const formattedTimeout = changeTimeoutFormat(data.spec.timeout);\n    delete data.params;\n    delete data.spec.timeout;\n    const prettyParams = params === null || params === void 0 ? void 0 : params.map(param => {\n        if (Array.isArray(param.value)) {\n            const valueList = param.value.map(obj => {\n                return obj.value;\n            });\n            return { name: param.name, value: valueList };\n        }\n        else {\n            return { name: param.name, value: param.value };\n        }\n    });\n    data = _.defaultsDeep(data, { kind: TaskRunModel.kind, spec: { params: prettyParams, timeout: formattedTimeout } });\n    // console.log('data? ', data);\n    return data;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/form/taskruns/create-taskrun.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/form/taskruns/create-taskrun.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { match as RMatch } from 'react-router';\nimport { useTranslation } from 'react-i18next';\nimport { WithCommonForm } from '../create-form';\nimport { Section } from '../../utils/section';\nimport { ListView } from '../../utils/list-view';\nimport { ResourceDropdown } from '../../utils/resource-dropdown';\nimport { k8sGet } from '../../../../module/k8s';\nimport { TaskModel, PipelineResourceModel, ServiceAccountModel, TaskRunModel } from '../../../../models';\nimport { Button } from '@patternfly/react-core';\nimport store from '../../../../redux';\nimport { getActiveNamespace } from '@console/internal/reducers/ui';\n\nconst defaultValues = {\n  metadata: {\n    name: 'example-name',\n  },\n};\n\nconst taskRunFormFactory = params => {\n  return WithCommonForm(CreateTaskRunComponent, params, defaultValues);\n};\n\nconst paramItemRenderer = (register, name, item, index, ListActions, ListDefaultIcons) => {\n  return (\n    <div className=\"row\" key={item.id}>\n      <div className=\"col-xs-4 pairs-list__value-field\">\n        <input ref={register()} className=\"pf-c-form-control\" defaultValue={item.value} name={`${name}[${index}].value`} />\n      </div>\n      <div className=\"col-xs-1 pairs-list__action\">\n        <Button\n          type=\"button\"\n          data-test-id=\"pairs-list__delete-btn\"\n          className=\"pairs-list__span-btns\"\n          onClick={() => {\n            ListActions.remove(index);\n          }}\n          variant=\"plain\"\n        >\n          {ListDefaultIcons.deleteIcon}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nconst CreateTaskRunComponent: React.FC<TaskRunFormProps> = props => {\n  const { t } = useTranslation();\n  const methods = useFormContext();\n  const [selectedTask, setSelectedTask] = useState('');\n  const [inputList, setInputList] = useState([]);\n  const [outputList, setOutputList] = useState([]);\n  const [paramList, setParamList] = useState([]);\n  const [workspaceList, setWorkspaceList] = useState([]);\n\n  const namespace = getActiveNamespace(store.getState());\n\n  const getTaskDetails = async selectedTaskName => {\n    const task = await k8sGet(TaskModel, selectedTaskName, getActiveNamespace(store.getState()));\n\n    const inputsData = task.spec?.resources?.inputs?.map(input => {\n      return {\n        name: input.name,\n        required: !input.optional,\n        type: input.type,\n        description: input.description,\n      };\n    });\n    const outputsData = task.spec?.resources?.outputs?.map(output => {\n      return {\n        name: output.name,\n        required: !output.optional,\n        type: output.type,\n        description: output.description,\n      };\n    });\n\n    setInputList(inputsData || []);\n    setOutputList(outputsData || []);\n\n    const paramValueListData = task.spec?.params?.map(param => {\n      if (param.type === 'array') {\n        const valueList = param.default.map(value => {\n          return {\n            value: value,\n          };\n        });\n        return { value: valueList };\n      } else {\n        return { value: param.default };\n      }\n    });\n\n    // MEMO : ListView의 value를 세팅해주는 방법이 reset이 최선일까..?\n    // MEMO : reset할 때 params 부분 이외에 다른 value들은 그대로 있게 하기 위해 이렇게 함.\n    const prevValues = methods.getValues();\n    methods.reset({ ...prevValues, params: paramValueListData });\n\n    const paramsData = task.spec?.params?.map(param => {\n      return {\n        name: param.name,\n        value: param.default,\n        description: param.description,\n        type: param.type,\n        required: !!param.default,\n      };\n    });\n\n    setParamList(paramsData || []);\n\n    const workspacesData = task.spec?.workspaces?.map(workspace => {\n      return {\n        name: workspace.name,\n        description: workspace.description,\n      };\n    });\n    setWorkspaceList(workspacesData || []);\n  };\n\n  const inputs = inputList.map((item, index) => {\n    return (\n      <Section label={`${item.name} (${item.type})`} id={`input_${index}`} key={`input_${index}`} isRequired={item.required} description={item.description}>\n        <>\n          <input ref={methods.register} type=\"hidden\" id={`spec.resources.inputs[${index}].name`} name={`spec.resources.inputs[${index}].name`} value={item.name} />\n          <ResourceDropdown name={`spec.resources.inputs[${index}].resourceRef.name`} placeholder={t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_8')} resources={[{ kind: PipelineResourceModel.kind, namespace: namespace, prop: 'pipelineresource' }]} type=\"single\" useHookForm />\n        </>\n      </Section>\n    );\n  });\n\n  const outputs = outputList.map((item, index) => {\n    return (\n      <Section label={`${item.name} (${item.type})`} id={`output_${index}`} key={`output_${index}`} isRequired={item.required} description={item.description}>\n        <>\n          <input ref={methods.register} type=\"hidden\" id={`spec.resources.outputs[${index}].name`} name={`spec.resources.outputs[${index}].name`} value={item.name} />\n          <ResourceDropdown name={`spec.resources.outputs[${index}].resourceRef.name`} placeholder={t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_8')} resources={[{ kind: PipelineResourceModel.kind, namespace: namespace, prop: 'pipelineresource' }]} type=\"single\" useHookForm />\n        </>\n      </Section>\n    );\n  });\n\n  const params = paramList.map((item, index) => {\n    if (item.type === 'array') {\n      return (\n        <Section label={item.name} id={`${selectedTask}_param_${index}`} key={`${selectedTask}_param_${index}`}>\n          <>\n            <input ref={methods.register} type=\"hidden\" id={`params[${index}].name`} name={`params[${index}].name`} value={item.name} />\n            <ListView name={`params[${index}].value`} methods={methods} addButtonText=\"추가\" headerFragment={<></>} itemRenderer={paramItemRenderer} defaultItem={{ value: '' }} />\n          </>\n        </Section>\n      );\n    } else {\n      return (\n        <Section label={item.name} id={`${selectedTask}_param_${index}`} key={`${selectedTask}_param_${index}`}>\n          <>\n            <input ref={methods.register} type=\"hidden\" id={`params[${index}].name`} name={`params[${index}].name`} value={item.name} />\n            <input ref={methods.register} className=\"pf-c-form-control\" id={`params[${index}].value`} name={`params[${index}].value`} defaultValue={item.value} />\n          </>\n        </Section>\n      );\n    }\n  });\n\n  const workspaces = workspaceList.map((item, index) => {\n    return (\n      <Section label={item.name} description={item.description} key={index} id={`workspace_${index}_${item.name}`}>\n        <></>\n      </Section>\n    );\n  });\n\n  const onTaskSelect = selectedTaskName => {\n    setSelectedTask(selectedTaskName);\n    getTaskDetails(selectedTaskName);\n  };\n\n  return (\n    <>\n      <Section label={t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_5')} id=\"task\">\n        <ResourceDropdown name=\"spec.taskRef.name\" placeholder={t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_5')} resources={[{ kind: TaskModel.kind, namespace: namespace, prop: 'task' }]} onChange={onTaskSelect} type=\"single\" useHookForm />\n      </Section>\n      <Section label={t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_7')} id=\"inputresource\">\n        <div>{inputs}</div>\n      </Section>\n      <Section label={t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_9')} id=\"outputresource\">\n        <div>{outputs}</div>\n      </Section>\n      <Section label={t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_6')} id=\"taskparameter\">\n        <div>{params}</div>\n      </Section>\n      <Section label=\"워크스페이스\" id=\"workspace\">\n        <div>{workspaces}</div>\n      </Section>\n      <Section label={t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_11')} id=\"timeout\" description={t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_13')}>\n        <div>\n          <input ref={methods.register} className=\"pf-c-form-control\" id=\"time_input\" name=\"spec.timeout\" type=\"number\" placeholder=\"예: 60, 120, 30\" /> 분\n        </div>\n      </Section>\n      <Section label={t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_14')} id=\"serviceaccount\" description={t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_16')} isRequired={true}>\n        <ResourceDropdown name=\"spec.serviceAccountName\" placeholder={t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_15')} resources={[{ kind: ServiceAccountModel.kind, namespace: namespace, prop: 'serviceaccount' }]} type=\"single\" useHookForm />\n      </Section>\n    </>\n  );\n};\n\nexport const CreateTaskRun: React.FC<CreateTaskRunProps> = ({ match: { params }, kind }) => {\n  const formComponent = taskRunFormFactory(params);\n  const TaskRunFormComponent = formComponent;\n\n  return <TaskRunFormComponent fixed={{ apiVersion: `${TaskRunModel.apiGroup}/${TaskRunModel.apiVersion}`, kind, metadata: { namespace: params.ns } }} explanation={''} titleVerb=\"Create\" onSubmitCallback={onSubmitCallback} isCreate={true} />;\n};\n\nconst changeTimeoutFormat = timeout => {\n  timeout = Number(timeout);\n  if (timeout == 0) {\n    return 0;\n  }\n  if (timeout >= 60) {\n    return `${(timeout - (timeout % 60)) / 60}h${timeout % 60}m`;\n  } else return `${timeout}m`;\n};\n\nexport const onSubmitCallback = data => {\n  let params = _.cloneDeep(data.params);\n  const formattedTimeout = changeTimeoutFormat(data.spec.timeout);\n  delete data.params;\n  delete data.spec.timeout;\n  const prettyParams = params?.map(param => {\n    if (Array.isArray(param.value)) {\n      const valueList = param.value.map(obj => {\n        return obj.value;\n      });\n      return { name: param.name, value: valueList };\n    } else {\n      return { name: param.name, value: param.value };\n    }\n  });\n  data = _.defaultsDeep(data, { kind: TaskRunModel.kind, spec: { params: prettyParams, timeout: formattedTimeout } });\n  // console.log('data? ', data);\n  return data;\n};\n\ntype CreateTaskRunProps = {\n  match: RMatch<{\n    ns?: string;\n  }>;\n  kind: string;\n  fixed: object;\n  explanation: string;\n  titleVerb: string;\n  saveButtonText?: string;\n  isCreate: boolean;\n};\n\ntype TaskRunFormProps = {};\n"]}]}