{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/helm/details/history/HelmReleaseHistory.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/helm/details/history/HelmReleaseHistory.tsx","mtime":1615298458610},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { useDeepCompareMemoize } from '@console/shared';\nimport { coFetchJSON } from '@console/internal/co-fetch';\nimport { StatusBox } from '@console/internal/components/utils';\nimport CustomResourceList from '../../../custom-resource-list/CustomResourceList';\nimport HelmReleaseHistoryRow from './HelmReleaseHistoryRow';\nimport HelmReleaseHistoryHeader from './HelmReleaseHistoryHeader';\nconst HelmReleaseHistory = ({ match, obj }) => {\n    const namespace = match.params.ns;\n    const helmReleaseName = match.params.name;\n    const [revisionsLoaded, setRevisionsLoaded] = React.useState(false);\n    const [loadError, setLoadError] = React.useState();\n    const [revisions, setRevisions] = React.useState([]);\n    const memoizedObj = useDeepCompareMemoize(obj);\n    React.useEffect(() => {\n        let destroyed = false;\n        coFetchJSON(`/api/helm/release/history?ns=${namespace}&name=${helmReleaseName}`)\n            .then((items) => {\n            if (!destroyed) {\n                setLoadError(null);\n                setRevisionsLoaded(true);\n                setRevisions(items);\n            }\n        })\n            .catch((err) => {\n            if (!destroyed) {\n                setRevisionsLoaded(true);\n                setLoadError(err.message || 'Unable to load Helm Release history');\n            }\n        });\n        return () => {\n            destroyed = true;\n        };\n    }, [helmReleaseName, namespace, memoizedObj]);\n    if (loadError) {\n        return React.createElement(StatusBox, { loaded: true, loadError: loadError, label: \"Helm Release history\" });\n    }\n    return (React.createElement(CustomResourceList, { resources: revisions, loaded: revisionsLoaded, sortBy: \"version\", sortOrder: SortByDirection.desc, resourceRow: HelmReleaseHistoryRow, resourceHeader: HelmReleaseHistoryHeader }));\n};\nexport default HelmReleaseHistory;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/helm/details/history/HelmReleaseHistory.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/helm/details/history/HelmReleaseHistory.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAE,eAAe,EAAE,MAAM,yBAAyB,CAAC;AAC1D,OAAO,EAAE,qBAAqB,EAAE,MAAM,iBAAiB,CAAC;AAExD,OAAO,EAAE,WAAW,EAAE,MAAM,4BAA4B,CAAC;AACzD,OAAO,EAAE,SAAS,EAAE,MAAM,oCAAoC,CAAC;AAC/D,OAAO,kBAAkB,MAAM,kDAAkD,CAAC;AAClF,OAAO,qBAAqB,MAAM,yBAAyB,CAAC;AAC5D,OAAO,wBAAwB,MAAM,4BAA4B,CAAC;AAUlE,MAAM,kBAAkB,GAAsC,CAAC,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE,EAAE;IAC/E,MAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC;IAClC,MAAM,eAAe,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC;IAC1C,MAAM,CAAC,eAAe,EAAE,kBAAkB,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAU,KAAK,CAAC,CAAC;IAC7E,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,KAAK,CAAC,QAAQ,EAAU,CAAC;IAC3D,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IACrD,MAAM,WAAW,GAAG,qBAAqB,CAAC,GAAG,CAAC,CAAC;IAE/C,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,IAAI,SAAS,GAAG,KAAK,CAAC;QACtB,WAAW,CAAC,gCAAgC,SAAS,SAAS,eAAe,EAAE,CAAC;aAC7E,IAAI,CAAC,CAAC,KAAK,EAAE,EAAE;YACd,IAAI,CAAC,SAAS,EAAE;gBACd,YAAY,CAAC,IAAI,CAAC,CAAC;gBACnB,kBAAkB,CAAC,IAAI,CAAC,CAAC;gBACzB,YAAY,CAAC,KAAK,CAAC,CAAC;aACrB;QACH,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;YACb,IAAI,CAAC,SAAS,EAAE;gBACd,kBAAkB,CAAC,IAAI,CAAC,CAAC;gBACzB,YAAY,CAAC,GAAG,CAAC,OAAO,IAAI,qCAAqC,CAAC,CAAC;aACpE;QACH,CAAC,CAAC,CAAC;QACL,OAAO,GAAG,EAAE;YACV,SAAS,GAAG,IAAI,CAAC;QACnB,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,eAAe,EAAE,SAAS,EAAE,WAAW,CAAC,CAAC,CAAC;IAE9C,IAAI,SAAS,EAAE;QACb,OAAO,oBAAC,SAAS,IAAC,MAAM,QAAC,SAAS,EAAE,SAAS,EAAE,KAAK,EAAC,sBAAsB,GAAG,CAAC;KAChF;IAED,OAAO,CACL,oBAAC,kBAAkB,IACjB,SAAS,EAAE,SAAS,EACpB,MAAM,EAAE,eAAe,EACvB,MAAM,EAAC,SAAS,EAChB,SAAS,EAAE,eAAe,CAAC,IAAI,EAC/B,WAAW,EAAE,qBAAqB,EAClC,cAAc,EAAE,wBAAwB,GACxC,CACH,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,kBAAkB,CAAC","sourcesContent":["import * as React from 'react';\nimport { match as RMatch } from 'react-router';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { useDeepCompareMemoize } from '@console/shared';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { coFetchJSON } from '@console/internal/co-fetch';\nimport { StatusBox } from '@console/internal/components/utils';\nimport CustomResourceList from '../../../custom-resource-list/CustomResourceList';\nimport HelmReleaseHistoryRow from './HelmReleaseHistoryRow';\nimport HelmReleaseHistoryHeader from './HelmReleaseHistoryHeader';\n\ninterface HelmReleaseHistoryProps {\n  match: RMatch<{\n    ns?: string;\n    name?: string;\n  }>;\n  obj: K8sResourceKind;\n}\n\nconst HelmReleaseHistory: React.FC<HelmReleaseHistoryProps> = ({ match, obj }) => {\n  const namespace = match.params.ns;\n  const helmReleaseName = match.params.name;\n  const [revisionsLoaded, setRevisionsLoaded] = React.useState<boolean>(false);\n  const [loadError, setLoadError] = React.useState<string>();\n  const [revisions, setRevisions] = React.useState([]);\n  const memoizedObj = useDeepCompareMemoize(obj);\n\n  React.useEffect(() => {\n    let destroyed = false;\n    coFetchJSON(`/api/helm/release/history?ns=${namespace}&name=${helmReleaseName}`)\n      .then((items) => {\n        if (!destroyed) {\n          setLoadError(null);\n          setRevisionsLoaded(true);\n          setRevisions(items);\n        }\n      })\n      .catch((err) => {\n        if (!destroyed) {\n          setRevisionsLoaded(true);\n          setLoadError(err.message || 'Unable to load Helm Release history');\n        }\n      });\n    return () => {\n      destroyed = true;\n    };\n  }, [helmReleaseName, namespace, memoizedObj]);\n\n  if (loadError) {\n    return <StatusBox loaded loadError={loadError} label=\"Helm Release history\" />;\n  }\n\n  return (\n    <CustomResourceList\n      resources={revisions}\n      loaded={revisionsLoaded}\n      sortBy=\"version\"\n      sortOrder={SortByDirection.desc}\n      resourceRow={HelmReleaseHistoryRow}\n      resourceHeader={HelmReleaseHistoryHeader}\n    />\n  );\n};\n\nexport default HelmReleaseHistory;\n"]}]}