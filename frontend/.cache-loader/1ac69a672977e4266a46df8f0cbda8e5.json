{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/selector-requirement.js","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/selector-requirement.js","mtime":1615298458760},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nconst toArray = (value) => (Array.isArray(value) ? value : [value]);\nexport const createEquals = (key, value) => ({\n    key,\n    operator: 'Equals',\n    values: [value],\n});\nexport const requirementFromString = (string) => {\n    string = string.trim();\n    // \"key\"\n    if (/^[0-9A-Za-z/\\-_.]+$/.test(string)) {\n        return {\n            key: string,\n            operator: 'Exists',\n            values: [],\n        };\n    }\n    // \"!key\"\n    if (/^!\\s*[0-9A-Za-z/\\-_.]+$/.test(string)) {\n        return {\n            key: string.split(/!\\s*/)[1],\n            operator: 'DoesNotExist',\n            values: [],\n        };\n    }\n    // \"key=value\" OR \"key==value\"\n    if (/^[0-9A-Za-z/\\-_.]+\\s*==?\\s*[0-9A-Za-z/\\-_.]+$/.test(string)) {\n        const parts = string.split(/\\s*==?\\s*/);\n        const key = parts[0];\n        const value = parts[1];\n        return createEquals(key, value);\n    }\n    // \"key!=value\"\n    if (/^[0-9A-Za-z/\\-_.]+\\s*!=\\s*[0-9A-Za-z/\\-_.]+$/.test(string)) {\n        return {\n            key: string.split(/\\s*!=\\s*/)[0],\n            operator: 'NotEquals',\n            values: [string.split(/\\s*!=\\s*/)[1]],\n        };\n    }\n    // \"key in (value1[,value2,...])\"\n    if (/^[0-9A-Za-z/\\-_.]+\\s+in\\s+\\([0-9A-Za-z/\\-_.,\\s]+\\)$/.test(string)) {\n        const parts = string.split(/\\s+in\\s+/);\n        const key = parts[0];\n        const values = parts[1]\n            .slice(1, -1)\n            .split(',')\n            .map(_.trim);\n        return {\n            key,\n            operator: 'In',\n            values,\n        };\n    }\n    // \"key notin (value1[,value2,...])\"\n    if (/^[0-9A-Za-z/\\-_.]+\\s+notin\\s+\\([0-9A-Za-z/\\-_.,\\s]+\\)$/.test(string)) {\n        const parts = string.split(/\\s+notin\\s+/);\n        const key = parts[0];\n        const values = parts[1]\n            .slice(1, -1)\n            .split(',')\n            .map(_.trim);\n        return {\n            key,\n            operator: 'NotIn',\n            values,\n        };\n    }\n    // \"key > value1\"\n    if (/^[0-9A-Za-z/\\-_.]+\\s+>\\s+[0-9.]+$/.test(string)) {\n        const parts = string.split(/\\s+>\\s+/);\n        const key = parts[0];\n        const value = parts[1];\n        return {\n            key,\n            operator: 'GreaterThan',\n            values: [value],\n        };\n    }\n    // \"key < value1\"\n    if (/^[0-9A-Za-z/\\-_.]+\\s+<\\s+[0-9.]+$/.test(string)) {\n        const parts = string.split(/\\s+<\\s+/);\n        const key = parts[0];\n        const value = parts[1];\n        return {\n            key,\n            operator: 'LessThan',\n            values: [value],\n        };\n    }\n    return; // falsy means parsing failure\n};\nexport const requirementToString = (requirement) => {\n    if (requirement.operator === 'Equals') {\n        return `${requirement.key}=${requirement.values[0]}`;\n    }\n    if (requirement.operator === 'NotEquals') {\n        return `${requirement.key}!=${requirement.values[0]}`;\n    }\n    if (requirement.operator === 'Exists') {\n        return requirement.key;\n    }\n    if (requirement.operator === 'DoesNotExist') {\n        return `!${requirement.key}`;\n    }\n    if (requirement.operator === 'In') {\n        return `${requirement.key} in (${toArray(requirement.values).join(',')})`;\n    }\n    if (requirement.operator === 'NotIn') {\n        return `${requirement.key} notin (${toArray(requirement.values).join(',')})`;\n    }\n    if (requirement.operator === 'GreaterThan') {\n        return `${requirement.key} > ${requirement.values[0]}`;\n    }\n    if (requirement.operator === 'LessThan') {\n        return `${requirement.key} < ${requirement.values[0]}`;\n    }\n    return; // falsy means malformed requirement\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/selector-requirement.js","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/selector-requirement.js"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\n\nconst toArray = (value) => (Array.isArray(value) ? value : [value]);\n\nexport const createEquals = (key, value) => ({\n  key,\n  operator: 'Equals',\n  values: [value],\n});\n\nexport const requirementFromString = (string) => {\n  string = string.trim();\n\n  // \"key\"\n  if (/^[0-9A-Za-z/\\-_.]+$/.test(string)) {\n    return {\n      key: string,\n      operator: 'Exists',\n      values: [],\n    };\n  }\n\n  // \"!key\"\n  if (/^!\\s*[0-9A-Za-z/\\-_.]+$/.test(string)) {\n    return {\n      key: string.split(/!\\s*/)[1],\n      operator: 'DoesNotExist',\n      values: [],\n    };\n  }\n\n  // \"key=value\" OR \"key==value\"\n  if (/^[0-9A-Za-z/\\-_.]+\\s*==?\\s*[0-9A-Za-z/\\-_.]+$/.test(string)) {\n    const parts = string.split(/\\s*==?\\s*/);\n    const key = parts[0];\n    const value = parts[1];\n    return createEquals(key, value);\n  }\n\n  // \"key!=value\"\n  if (/^[0-9A-Za-z/\\-_.]+\\s*!=\\s*[0-9A-Za-z/\\-_.]+$/.test(string)) {\n    return {\n      key: string.split(/\\s*!=\\s*/)[0],\n      operator: 'NotEquals',\n      values: [string.split(/\\s*!=\\s*/)[1]],\n    };\n  }\n\n  // \"key in (value1[,value2,...])\"\n  if (/^[0-9A-Za-z/\\-_.]+\\s+in\\s+\\([0-9A-Za-z/\\-_.,\\s]+\\)$/.test(string)) {\n    const parts = string.split(/\\s+in\\s+/);\n    const key = parts[0];\n    const values = parts[1]\n      .slice(1, -1)\n      .split(',')\n      .map(_.trim);\n\n    return {\n      key,\n      operator: 'In',\n      values,\n    };\n  }\n\n  // \"key notin (value1[,value2,...])\"\n  if (/^[0-9A-Za-z/\\-_.]+\\s+notin\\s+\\([0-9A-Za-z/\\-_.,\\s]+\\)$/.test(string)) {\n    const parts = string.split(/\\s+notin\\s+/);\n    const key = parts[0];\n    const values = parts[1]\n      .slice(1, -1)\n      .split(',')\n      .map(_.trim);\n\n    return {\n      key,\n      operator: 'NotIn',\n      values,\n    };\n  }\n\n  // \"key > value1\"\n  if (/^[0-9A-Za-z/\\-_.]+\\s+>\\s+[0-9.]+$/.test(string)) {\n    const parts = string.split(/\\s+>\\s+/);\n    const key = parts[0];\n    const value = parts[1];\n\n    return {\n      key,\n      operator: 'GreaterThan',\n      values: [value],\n    };\n  }\n\n  // \"key < value1\"\n  if (/^[0-9A-Za-z/\\-_.]+\\s+<\\s+[0-9.]+$/.test(string)) {\n    const parts = string.split(/\\s+<\\s+/);\n    const key = parts[0];\n    const value = parts[1];\n\n    return {\n      key,\n      operator: 'LessThan',\n      values: [value],\n    };\n  }\n\n  return; // falsy means parsing failure\n};\n\nexport const requirementToString = (requirement) => {\n  if (requirement.operator === 'Equals') {\n    return `${requirement.key}=${requirement.values[0]}`;\n  }\n\n  if (requirement.operator === 'NotEquals') {\n    return `${requirement.key}!=${requirement.values[0]}`;\n  }\n\n  if (requirement.operator === 'Exists') {\n    return requirement.key;\n  }\n\n  if (requirement.operator === 'DoesNotExist') {\n    return `!${requirement.key}`;\n  }\n\n  if (requirement.operator === 'In') {\n    return `${requirement.key} in (${toArray(requirement.values).join(',')})`;\n  }\n\n  if (requirement.operator === 'NotIn') {\n    return `${requirement.key} notin (${toArray(requirement.values).join(',')})`;\n  }\n\n  if (requirement.operator === 'GreaterThan') {\n    return `${requirement.key} > ${requirement.values[0]}`;\n  }\n\n  if (requirement.operator === 'LessThan') {\n    return `${requirement.key} < ${requirement.values[0]}`;\n  }\n\n  return; // falsy means malformed requirement\n};\n"]}]}