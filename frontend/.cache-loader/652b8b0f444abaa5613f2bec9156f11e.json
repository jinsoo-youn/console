{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/utils/pod-ring-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/utils/pod-ring-utils.ts","mtime":1616735742380},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { DeploymentConfigModel, DeploymentModel, DaemonSetModel, StatefulSetModel, ReplicationControllerModel, ReplicaSetModel, PodModel, } from '@console/internal/models';\nimport { ChartLabel } from '@patternfly/react-charts';\nimport { useSafetyFirst } from '@console/internal/components/safety-first';\nimport { checkPodEditAccess, getPodStatus } from './pod-utils';\nimport { RevisionModel } from '@console/knative-plugin';\nimport { getPodsForDeploymentConfigs, getPodsForDeployments, getPodsForStatefulSets, getPodsForDaemonSets, } from './resource-utils';\nimport { AllPodStatus } from '../constants';\nimport './pod-ring-text.scss';\nexport const podRingFirehoseProps = {\n    [PodModel.kind]: 'pods',\n    [ReplicaSetModel.kind]: 'replicaSets',\n    [ReplicationControllerModel.kind]: 'replicationControllers',\n    [DeploymentModel.kind]: 'deployments',\n    [DeploymentConfigModel.kind]: 'deploymentConfigs',\n    [StatefulSetModel.kind]: 'statefulSets',\n    [DaemonSetModel.kind]: 'daemonSets',\n};\nconst applyPods = (podsData, dc) => {\n    const { pods, current, previous, isRollingOut, obj: { metadata: { uid }, }, } = dc;\n    podsData[uid] = {\n        pods,\n        current,\n        previous,\n        isRollingOut,\n    };\n    return podsData;\n};\nconst pluralizeString = (count, singularString, expectedString) => count && count > 1 ? expectedString || `${singularString}s` : singularString;\nconst isPendingPods = (pods, currentPodCount, desiredPodCount) => {\n    var _a;\n    return ((pods === null || pods === void 0 ? void 0 : pods.length) === 1 && ((_a = pods[0].status) === null || _a === void 0 ? void 0 : _a.phase) === 'Pending') ||\n        (!currentPodCount && !!desiredPodCount);\n};\nexport const getFailedPods = (pods) => {\n    if (!(pods === null || pods === void 0 ? void 0 : pods.length)) {\n        return 0;\n    }\n    return pods.reduce((acc, currValue) => {\n        if ([AllPodStatus.CrashLoopBackOff, AllPodStatus.Failed].includes(getPodStatus(currValue))) {\n            return acc + 1;\n        }\n        return acc;\n    }, 0);\n};\nconst getTitleAndSubtitle = (isPending, currentPodCount, desiredPodCount) => {\n    let titlePhrase;\n    let subTitlePhrase = '';\n    let longSubtitle = false;\n    // handles the initial state when the first pod is coming up and the state for no pods(scaled to zero)\n    if (!currentPodCount) {\n        titlePhrase = isPending ? '0' : `Scaled to 0`;\n        if (desiredPodCount) {\n            subTitlePhrase = `scaling to ${desiredPodCount}`;\n            longSubtitle = true;\n        }\n    }\n    // handles the idle state or scaling to desired no. of pods\n    if (currentPodCount) {\n        titlePhrase = currentPodCount.toString();\n        if (currentPodCount === desiredPodCount) {\n            subTitlePhrase = pluralizeString(currentPodCount, 'pod');\n        }\n        else {\n            subTitlePhrase = `scaling to ${desiredPodCount}`;\n            longSubtitle = true;\n        }\n    }\n    return { title: titlePhrase, subTitle: subTitlePhrase, longSubtitle };\n};\nconst getTitleComponent = (longSubtitle = false, reversed = false) => React.createElement(ChartLabel, {\n    dy: longSubtitle ? -5 : 0,\n    style: { lineHeight: '11px' },\n    className: `pf-chart-donut-title ${reversed ? 'pod-ring__center-text--reversed' : 'pod-ring__center-text'}`,\n});\nexport const podRingLabel = (obj, ownerKind, pods) => {\n    var _a, _b, _c, _d, _e, _f, _g;\n    let currentPodCount;\n    let desiredPodCount;\n    let title;\n    let subTitle;\n    let isPending;\n    let titleData;\n    const failedPodCount = getFailedPods(pods);\n    switch (ownerKind) {\n        case DaemonSetModel.kind:\n            currentPodCount = (((_a = obj.status) === null || _a === void 0 ? void 0 : _a.currentNumberScheduled) || 0) + failedPodCount;\n            desiredPodCount = (_b = obj.status) === null || _b === void 0 ? void 0 : _b.desiredNumberScheduled;\n            desiredPodCount = (_c = obj.status) === null || _c === void 0 ? void 0 : _c.desiredNumberScheduled;\n            isPending = isPendingPods(pods, currentPodCount, desiredPodCount);\n            titleData = getTitleAndSubtitle(isPending, currentPodCount, desiredPodCount);\n            return {\n                title: titleData.title,\n                subTitle: titleData.subTitle,\n                titleComponent: getTitleComponent(titleData.longSubtitle),\n            };\n        case RevisionModel.kind:\n            currentPodCount = (((_d = obj.status) === null || _d === void 0 ? void 0 : _d.readyReplicas) || 0) + failedPodCount;\n            desiredPodCount = (_e = obj.spec) === null || _e === void 0 ? void 0 : _e.replicas;\n            isPending = isPendingPods(pods, currentPodCount, desiredPodCount);\n            if (!isPending && !desiredPodCount) {\n                title = 'Autoscaled';\n                subTitle = 'to 0';\n                return {\n                    title,\n                    subTitle,\n                    titleComponent: getTitleComponent(false, true),\n                };\n            }\n            if (isPending) {\n                title = '0';\n                subTitle = `scaling to ${desiredPodCount}`;\n            }\n            else {\n                title = currentPodCount;\n                subTitle = pluralizeString(currentPodCount, 'pod');\n            }\n            return {\n                title,\n                subTitle,\n                titleComponent: getTitleComponent(),\n            };\n        default:\n            currentPodCount = (((_f = obj.status) === null || _f === void 0 ? void 0 : _f.readyReplicas) || 0) + failedPodCount;\n            desiredPodCount = (_g = obj.spec) === null || _g === void 0 ? void 0 : _g.replicas;\n            isPending = isPendingPods(pods, currentPodCount, desiredPodCount);\n            titleData = getTitleAndSubtitle(isPending, currentPodCount, desiredPodCount);\n            return {\n                title: titleData.title,\n                subTitle: titleData.subTitle,\n                titleComponent: getTitleComponent(titleData.longSubtitle),\n            };\n    }\n};\nexport const usePodScalingAccessStatus = (obj, resourceKind, pods, enableScaling, impersonate) => {\n    const [editable, setEditable] = useSafetyFirst(false);\n    React.useEffect(() => {\n        checkPodEditAccess(obj, resourceKind, impersonate)\n            .then((resp) => setEditable(_.get(resp, 'status.allowed', false)))\n            .catch((error) => {\n            // console.log is used here instead of throw error\n            // throw error will break the thread and likely end-up in a white screen\n            // eslint-disable-next-line\n            console.log(error);\n            setEditable(false);\n        });\n    }, [pods, obj, resourceKind, impersonate, setEditable]);\n    const isKnativeRevision = obj.kind === 'Revision';\n    const isScalingAllowed = !isKnativeRevision && editable && enableScaling;\n    return isScalingAllowed;\n};\nexport const transformPodRingData = (resources, kind) => {\n    const targetResource = podRingFirehoseProps[kind];\n    if (!targetResource) {\n        throw new Error(`Invalid target resource: (${targetResource})`);\n    }\n    if (_.isEmpty(resources[targetResource].data)) {\n        return {};\n    }\n    const podsData = {};\n    const resourceData = resources[targetResource].data;\n    if (kind === DeploymentConfigModel.kind) {\n        return getPodsForDeploymentConfigs(resourceData, resources).reduce(applyPods, podsData);\n    }\n    if (kind === DeploymentModel.kind) {\n        return getPodsForDeployments(resourceData, resources).reduce(applyPods, podsData);\n    }\n    if (kind === StatefulSetModel.kind) {\n        return getPodsForStatefulSets(resourceData, resources).reduce(applyPods, podsData);\n    }\n    if (kind === DaemonSetModel.kind) {\n        return getPodsForDaemonSets(resourceData, resources).reduce(applyPods, podsData);\n    }\n    return podsData;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/utils/pod-ring-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/utils/pod-ring-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport {\n  DeploymentConfigModel,\n  DeploymentModel,\n  DaemonSetModel,\n  StatefulSetModel,\n  ReplicationControllerModel,\n  ReplicaSetModel,\n  PodModel,\n} from '@console/internal/models';\nimport { ChartLabel } from '@patternfly/react-charts';\nimport {\n  K8sResourceKind,\n  K8sKind,\n  SelfSubjectAccessReviewKind,\n} from '@console/internal/module/k8s';\nimport { useSafetyFirst } from '@console/internal/components/safety-first';\nimport { PodRCData, PodRingResources, PodRingData, ExtPodKind } from '../types';\nimport { checkPodEditAccess, getPodStatus } from './pod-utils';\nimport { RevisionModel } from '@console/knative-plugin';\nimport {\n  getPodsForDeploymentConfigs,\n  getPodsForDeployments,\n  getPodsForStatefulSets,\n  getPodsForDaemonSets,\n} from './resource-utils';\nimport { AllPodStatus } from '../constants';\n\nimport './pod-ring-text.scss';\n\ntype PodRingLabelType = {\n  subTitle: string;\n  title: string;\n  titleComponent: React.ReactElement;\n};\n\nexport const podRingFirehoseProps = {\n  [PodModel.kind]: 'pods',\n  [ReplicaSetModel.kind]: 'replicaSets',\n  [ReplicationControllerModel.kind]: 'replicationControllers',\n  [DeploymentModel.kind]: 'deployments',\n  [DeploymentConfigModel.kind]: 'deploymentConfigs',\n  [StatefulSetModel.kind]: 'statefulSets',\n  [DaemonSetModel.kind]: 'daemonSets',\n};\n\nconst applyPods = (podsData: PodRingData, dc: PodRCData) => {\n  const {\n    pods,\n    current,\n    previous,\n    isRollingOut,\n    obj: {\n      metadata: { uid },\n    },\n  } = dc;\n  podsData[uid] = {\n    pods,\n    current,\n    previous,\n    isRollingOut,\n  };\n  return podsData;\n};\n\nconst pluralizeString = (count: number, singularString: string, expectedString?: string) =>\n  count && count > 1 ? expectedString || `${singularString}s` : singularString;\n\nconst isPendingPods = (\n  pods: ExtPodKind[],\n  currentPodCount: number,\n  desiredPodCount: number,\n): boolean =>\n  (pods?.length === 1 && pods[0].status?.phase === 'Pending') ||\n  (!currentPodCount && !!desiredPodCount);\n\nexport const getFailedPods = (pods: ExtPodKind[]): number => {\n  if (!pods?.length) {\n    return 0;\n  }\n\n  return pods.reduce((acc, currValue) => {\n    if ([AllPodStatus.CrashLoopBackOff, AllPodStatus.Failed].includes(getPodStatus(currValue))) {\n      return acc + 1;\n    }\n    return acc;\n  }, 0);\n};\n\nconst getTitleAndSubtitle = (\n  isPending: boolean,\n  currentPodCount: number,\n  desiredPodCount: number,\n) => {\n  let titlePhrase;\n  let subTitlePhrase = '';\n  let longSubtitle = false;\n\n  // handles the initial state when the first pod is coming up and the state for no pods(scaled to zero)\n  if (!currentPodCount) {\n    titlePhrase = isPending ? '0' : `Scaled to 0`;\n    if (desiredPodCount) {\n      subTitlePhrase = `scaling to ${desiredPodCount}`;\n      longSubtitle = true;\n    }\n  }\n\n  // handles the idle state or scaling to desired no. of pods\n  if (currentPodCount) {\n    titlePhrase = currentPodCount.toString();\n    if (currentPodCount === desiredPodCount) {\n      subTitlePhrase = pluralizeString(currentPodCount, 'pod');\n    } else {\n      subTitlePhrase = `scaling to ${desiredPodCount}`;\n      longSubtitle = true;\n    }\n  }\n\n  return { title: titlePhrase, subTitle: subTitlePhrase, longSubtitle };\n};\n\nconst getTitleComponent = (longSubtitle: boolean = false, reversed: boolean = false) =>\n  React.createElement(ChartLabel, {\n    dy: longSubtitle ? -5 : 0,\n    style: { lineHeight: '11px' },\n    className: `pf-chart-donut-title ${\n      reversed ? 'pod-ring__center-text--reversed' : 'pod-ring__center-text'\n    }`,\n  });\n\nexport const podRingLabel = (\n  obj: K8sResourceKind,\n  ownerKind: string,\n  pods: ExtPodKind[],\n): PodRingLabelType => {\n  let currentPodCount;\n  let desiredPodCount;\n  let title;\n  let subTitle;\n  let isPending;\n  let titleData;\n  const failedPodCount = getFailedPods(pods);\n  switch (ownerKind) {\n    case DaemonSetModel.kind:\n      currentPodCount = (obj.status?.currentNumberScheduled || 0) + failedPodCount;\n      desiredPodCount = obj.status?.desiredNumberScheduled;\n      desiredPodCount = obj.status?.desiredNumberScheduled;\n      isPending = isPendingPods(pods, currentPodCount, desiredPodCount);\n      titleData = getTitleAndSubtitle(isPending, currentPodCount, desiredPodCount);\n      return {\n        title: titleData.title,\n        subTitle: titleData.subTitle,\n        titleComponent: getTitleComponent(titleData.longSubtitle),\n      };\n    case RevisionModel.kind:\n      currentPodCount = (obj.status?.readyReplicas || 0) + failedPodCount;\n      desiredPodCount = obj.spec?.replicas;\n      isPending = isPendingPods(pods, currentPodCount, desiredPodCount);\n      if (!isPending && !desiredPodCount) {\n        title = 'Autoscaled';\n        subTitle = 'to 0';\n        return {\n          title,\n          subTitle,\n          titleComponent: getTitleComponent(false, true),\n        };\n      }\n      if (isPending) {\n        title = '0';\n        subTitle = `scaling to ${desiredPodCount}`;\n      } else {\n        title = currentPodCount;\n        subTitle = pluralizeString(currentPodCount, 'pod');\n      }\n      return {\n        title,\n        subTitle,\n        titleComponent: getTitleComponent(),\n      };\n    default:\n      currentPodCount = (obj.status?.readyReplicas || 0) + failedPodCount;\n      desiredPodCount = obj.spec?.replicas;\n      isPending = isPendingPods(pods, currentPodCount, desiredPodCount);\n      titleData = getTitleAndSubtitle(isPending, currentPodCount, desiredPodCount);\n      return {\n        title: titleData.title,\n        subTitle: titleData.subTitle,\n        titleComponent: getTitleComponent(titleData.longSubtitle),\n      };\n  }\n};\n\nexport const usePodScalingAccessStatus = (\n  obj: K8sResourceKind,\n  resourceKind: K8sKind,\n  pods: ExtPodKind[],\n  enableScaling?: boolean,\n  impersonate?: string,\n) => {\n  const [editable, setEditable] = useSafetyFirst(false);\n  React.useEffect(() => {\n    checkPodEditAccess(obj, resourceKind, impersonate)\n      .then((resp: SelfSubjectAccessReviewKind) =>\n        setEditable(_.get(resp, 'status.allowed', false)),\n      )\n      .catch((error) => {\n        // console.log is used here instead of throw error\n        // throw error will break the thread and likely end-up in a white screen\n        // eslint-disable-next-line\n        console.log(error);\n        setEditable(false);\n      });\n  }, [pods, obj, resourceKind, impersonate, setEditable]);\n\n  const isKnativeRevision = obj.kind === 'Revision';\n  const isScalingAllowed = !isKnativeRevision && editable && enableScaling;\n  return isScalingAllowed;\n};\n\nexport const transformPodRingData = (resources: PodRingResources, kind: string): PodRingData => {\n  const targetResource = podRingFirehoseProps[kind];\n\n  if (!targetResource) {\n    throw new Error(`Invalid target resource: (${targetResource})`);\n  }\n  if (_.isEmpty(resources[targetResource].data)) {\n    return {};\n  }\n\n  const podsData: PodRingData = {};\n  const resourceData = resources[targetResource].data;\n\n  if (kind === DeploymentConfigModel.kind) {\n    return getPodsForDeploymentConfigs(resourceData, resources).reduce(applyPods, podsData);\n  }\n\n  if (kind === DeploymentModel.kind) {\n    return getPodsForDeployments(resourceData, resources).reduce(applyPods, podsData);\n  }\n\n  if (kind === StatefulSetModel.kind) {\n    return getPodsForStatefulSets(resourceData, resources).reduce(applyPods, podsData);\n  }\n\n  if (kind === DaemonSetModel.kind) {\n    return getPodsForDaemonSets(resourceData, resources).reduce(applyPods, podsData);\n  }\n\n  return podsData;\n};\n"]}]}