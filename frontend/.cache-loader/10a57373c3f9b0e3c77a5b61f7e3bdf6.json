{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/service-account.jsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/service-account.jsx","mtime":1617163139970},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { safeDump } from 'js-yaml';\nimport { Base64 } from 'js-base64';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { DetailsPage, ListPage, Table, TableRow, TableData } from './factory';\nimport { Kebab, SectionHeading, navFactory, ResourceKebab, ResourceLink, ResourceSummary, Timestamp } from './utils';\nimport { k8sList } from '../module/k8s';\nimport { SecretModel, ServiceAccountModel } from '../models';\nimport { SecretsPage } from './secret';\nimport { saveAs } from 'file-saver';\nimport { errorModal } from './modals';\nimport { useTranslation } from 'react-i18next';\nconst KubeConfigify = (t, kind, sa) => {\n    return {\n        label: t('COMMON:MSG_MAIN_ACTIONBUTTON_36'),\n        weight: 200,\n        callback: () => {\n            const name = sa.metadata.name;\n            const namespace = sa.metadata.namespace;\n            k8sList(SecretModel, { ns: namespace })\n                .then(secrets => {\n                const server = window.SERVER_FLAGS.kubeAPIServerURL;\n                const url = new URL(server);\n                const clusterName = url.host.replace(/\\./g, '-');\n                // Find the secret that is the service account token.\n                const saSecretsByName = _.keyBy(sa.secrets, 'name');\n                const secret = _.find(secrets, s => saSecretsByName[s.metadata.name] && s.type === 'kubernetes.io/service-account-token');\n                if (!secret) {\n                    errorModal({ error: 'Unable to get service account token.' });\n                    return;\n                }\n                const token = Base64.decode(secret.data.token);\n                const cert = secret.data['ca.crt'];\n                const config = {\n                    apiVersion: 'v1',\n                    clusters: [\n                        {\n                            cluster: {\n                                'certificate-authority-data': cert,\n                                server,\n                            },\n                            name: clusterName,\n                        },\n                    ],\n                    contexts: [\n                        {\n                            context: {\n                                cluster: clusterName,\n                                namespace,\n                                user: name,\n                            },\n                            name,\n                        },\n                    ],\n                    'current-context': name,\n                    kind: 'Config',\n                    preferences: {},\n                    users: [\n                        {\n                            name,\n                            user: {\n                                token,\n                            },\n                        },\n                    ],\n                };\n                const dump = safeDump(config);\n                const blob = new Blob([dump], { type: 'text/yaml;charset=utf-8' });\n                saveAs(blob, `kube-config-sa-${name}-${clusterName}`);\n            })\n                .catch(err => {\n                const error = err.message;\n                errorModal({ error });\n            });\n        },\n        accessReview: {\n            group: SecretModel.apiGroup,\n            resource: SecretModel.plural,\n            namespace: sa.metadata.namespace,\n            verb: 'list',\n        },\n    };\n};\nconst { common } = Kebab.factory;\nconst kind = 'ServiceAccount';\nconst tableColumnClasses = [classNames('col-sm-4', 'col-xs-6'), classNames('col-sm-4', 'col-xs-6'), classNames('col-md-2', 'hidden-sm', 'hidden-xs'), classNames('col-sm-2', 'hidden-xs'), Kebab.columnClass];\nconst ServiceAccountTableHeader = t => {\n    return [\n        {\n            title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n            sortField: 'metadata.name',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[0] },\n        },\n        {\n            title: t('COMMON:MSG_MAIN_TABLEHEADER_2'),\n            sortField: 'metadata.namespace',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[1] },\n        },\n        {\n            title: t('COMMON:MSG_MAIN_TABLEHEADER_34'),\n            sortField: 'secrets',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[2] },\n        },\n        {\n            title: t('COMMON:MSG_MAIN_TABLEHEADER_12'),\n            sortField: 'metadata.creationTimestamp',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[3] },\n        },\n        {\n            title: '',\n            props: { className: tableColumnClasses[4] },\n        },\n    ];\n};\nServiceAccountTableHeader.displayName = 'ServiceAccountTableHeader';\nconst ServiceAccountTableRow = (t, { obj: serviceaccount, index, key, style }) => {\n    const { metadata: { name, namespace, uid, creationTimestamp }, secrets, } = serviceaccount;\n    const menuActions = [KubeConfigify.bind(null, t), ...Kebab.getExtensionsActionsForKind(ServiceAccountModel), ...common];\n    return (React.createElement(TableRow, { id: serviceaccount.metadata.uid, index: index, trKey: key, style: style },\n        React.createElement(TableData, { className: tableColumnClasses[0] },\n            React.createElement(ResourceLink, { kind: kind, name: name, namespace: namespace, title: uid })),\n        React.createElement(TableData, { className: classNames(tableColumnClasses[1], 'co-break-word') },\n            React.createElement(ResourceLink, { kind: \"Namespace\", name: namespace, title: namespace }),\n            \" \"),\n        React.createElement(TableData, { className: tableColumnClasses[2] }, secrets ? secrets.length : 0),\n        React.createElement(TableData, { className: tableColumnClasses[3] },\n            React.createElement(Timestamp, { timestamp: creationTimestamp })),\n        React.createElement(TableData, { className: tableColumnClasses[4] },\n            React.createElement(ResourceKebab, { actions: menuActions, kind: kind, resource: serviceaccount }))));\n};\nconst Details = ({ obj: serviceaccount }) => {\n    const { t } = useTranslation();\n    const { metadata: { namespace }, secrets, } = serviceaccount;\n    const filters = { selector: { field: 'metadata.name', values: new Set(_.map(secrets, 'name')) } };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(SectionHeading, { text: t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', { 0: t('COMMON:MSG_LNB_MENU_74') }) }),\n            React.createElement(ResourceSummary, { resource: serviceaccount })),\n        React.createElement(\"div\", { className: \"co-m-pane__body co-m-pane__body--section-heading\" },\n            React.createElement(SectionHeading, { text: t('COMMON:MSG_LNB_MENU_26') })),\n        React.createElement(SecretsPage, { kind: \"Secret\", canCreate: false, namespace: namespace, filters: filters, autoFocus: false, showTitle: false })));\n};\nconst ServiceAccountsDetailsPage = props => {\n    const { t } = useTranslation();\n    const menuActions = [KubeConfigify.bind(null, t), ...Kebab.getExtensionsActionsForKind(ServiceAccountModel), ...common];\n    return React.createElement(DetailsPage, Object.assign({}, props, { menuActions: menuActions, pages: [navFactory.details(Details), navFactory.editYaml()] }));\n};\nconst ServiceAccountsList = props => {\n    const { t } = useTranslation();\n    return React.createElement(Table, Object.assign({}, props, { \"aria-label\": \"Service Accounts\", Header: ServiceAccountTableHeader.bind(null, t), Row: ServiceAccountTableRow.bind(null, t), virtualize: true }));\n};\nconst ServiceAccountsPage = props => {\n    const { t } = useTranslation();\n    return React.createElement(ListPage, Object.assign({ title: t('COMMON:MSG_LNB_MENU_74'), ListComponent: ServiceAccountsList }, props, { canCreate: true }));\n};\nexport { ServiceAccountsList, ServiceAccountsPage, ServiceAccountsDetailsPage };\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/service-account.jsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/service-account.jsx"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { safeDump } from 'js-yaml';\nimport { Base64 } from 'js-base64';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { DetailsPage, ListPage, Table, TableRow, TableData } from './factory';\nimport { Kebab, SectionHeading, navFactory, ResourceKebab, ResourceLink, ResourceSummary, Timestamp } from './utils';\nimport { k8sList } from '../module/k8s';\nimport { SecretModel, ServiceAccountModel } from '../models';\nimport { SecretsPage } from './secret';\nimport { saveAs } from 'file-saver';\nimport { errorModal } from './modals';\nimport { useTranslation } from 'react-i18next';\n\nconst KubeConfigify = (t, kind, sa) => {\n  return {\n    label: t('COMMON:MSG_MAIN_ACTIONBUTTON_36'),\n    weight: 200,\n    callback: () => {\n      const name = sa.metadata.name;\n      const namespace = sa.metadata.namespace;\n\n      k8sList(SecretModel, { ns: namespace })\n        .then(secrets => {\n          const server = window.SERVER_FLAGS.kubeAPIServerURL;\n          const url = new URL(server);\n          const clusterName = url.host.replace(/\\./g, '-');\n\n          // Find the secret that is the service account token.\n          const saSecretsByName = _.keyBy(sa.secrets, 'name');\n          const secret = _.find(secrets, s => saSecretsByName[s.metadata.name] && s.type === 'kubernetes.io/service-account-token');\n          if (!secret) {\n            errorModal({ error: 'Unable to get service account token.' });\n            return;\n          }\n          const token = Base64.decode(secret.data.token);\n          const cert = secret.data['ca.crt'];\n\n          const config = {\n            apiVersion: 'v1',\n            clusters: [\n              {\n                cluster: {\n                  'certificate-authority-data': cert,\n                  server,\n                },\n                name: clusterName,\n              },\n            ],\n            contexts: [\n              {\n                context: {\n                  cluster: clusterName,\n                  namespace,\n                  user: name,\n                },\n                name,\n              },\n            ],\n            'current-context': name,\n            kind: 'Config',\n            preferences: {},\n            users: [\n              {\n                name,\n                user: {\n                  token,\n                },\n              },\n            ],\n          };\n          const dump = safeDump(config);\n          const blob = new Blob([dump], { type: 'text/yaml;charset=utf-8' });\n          saveAs(blob, `kube-config-sa-${name}-${clusterName}`);\n        })\n        .catch(err => {\n          const error = err.message;\n          errorModal({ error });\n        });\n    },\n    accessReview: {\n      group: SecretModel.apiGroup,\n      resource: SecretModel.plural,\n      namespace: sa.metadata.namespace,\n      verb: 'list',\n    },\n  };\n};\nconst { common } = Kebab.factory;\n\nconst kind = 'ServiceAccount';\n\nconst tableColumnClasses = [classNames('col-sm-4', 'col-xs-6'), classNames('col-sm-4', 'col-xs-6'), classNames('col-md-2', 'hidden-sm', 'hidden-xs'), classNames('col-sm-2', 'hidden-xs'), Kebab.columnClass];\n\nconst ServiceAccountTableHeader = t => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_2'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_34'),\n      sortField: 'secrets',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_12'),\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[4] },\n    },\n  ];\n};\nServiceAccountTableHeader.displayName = 'ServiceAccountTableHeader';\n\nconst ServiceAccountTableRow = (t, { obj: serviceaccount, index, key, style }) => {\n  const {\n    metadata: { name, namespace, uid, creationTimestamp },\n    secrets,\n  } = serviceaccount;\n  const menuActions = [KubeConfigify.bind(null, t), ...Kebab.getExtensionsActionsForKind(ServiceAccountModel), ...common];\n  return (\n    <TableRow id={serviceaccount.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={name} namespace={namespace} title={uid} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={namespace} title={namespace} /> {}\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>{secrets ? secrets.length : 0}</TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <Timestamp timestamp={creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={serviceaccount} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst Details = ({ obj: serviceaccount }) => {\n  const { t } = useTranslation();\n  const {\n    metadata: { namespace },\n    secrets,\n  } = serviceaccount;\n  const filters = { selector: { field: 'metadata.name', values: new Set(_.map(secrets, 'name')) } };\n\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', { 0: t('COMMON:MSG_LNB_MENU_74') })} />\n        <ResourceSummary resource={serviceaccount} />\n      </div>\n      <div className=\"co-m-pane__body co-m-pane__body--section-heading\">\n        <SectionHeading text={t('COMMON:MSG_LNB_MENU_26')} />\n      </div>\n      <SecretsPage kind=\"Secret\" canCreate={false} namespace={namespace} filters={filters} autoFocus={false} showTitle={false} />\n    </>\n  );\n};\n\nconst ServiceAccountsDetailsPage = props => {\n  const { t } = useTranslation();\n  const menuActions = [KubeConfigify.bind(null, t), ...Kebab.getExtensionsActionsForKind(ServiceAccountModel), ...common];\n  return <DetailsPage {...props} menuActions={menuActions} pages={[navFactory.details(Details), navFactory.editYaml()]} />;\n};\nconst ServiceAccountsList = props => {\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"Service Accounts\" Header={ServiceAccountTableHeader.bind(null, t)} Row={ServiceAccountTableRow.bind(null, t)} virtualize />;\n};\nconst ServiceAccountsPage = props => {\n  const { t } = useTranslation();\n  return <ListPage title={t('COMMON:MSG_LNB_MENU_74')} ListComponent={ServiceAccountsList} {...props} canCreate={true} />;\n};\nexport { ServiceAccountsList, ServiceAccountsPage, ServiceAccountsDetailsPage };\n"]}]}