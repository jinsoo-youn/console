{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/dashboard/utilization-card/prometheus-hook.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/dashboard/utilization-card/prometheus-hook.ts","mtime":1616735742370},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore: FIXME missing exports due to out-of-sync @types/react-redux version\nimport { useSelector, useDispatch } from 'react-redux';\nimport { watchPrometheusQuery, stopWatchPrometheusQuery, } from '@console/internal/actions/dashboards';\nimport { RESULTS_TYPE } from '@console/internal/reducers/dashboards';\nimport { getInstantVectorStats } from '@console/internal/components/graphs/utils';\nexport const usePrometheusQuery = (query, humanize) => {\n    const dispatch = useDispatch();\n    React.useEffect(() => {\n        dispatch(watchPrometheusQuery(query));\n        return () => {\n            dispatch(stopWatchPrometheusQuery(query));\n        };\n    }, [dispatch, query]);\n    const queryResult = useSelector(({ dashboards }) => dashboards.getIn([RESULTS_TYPE.PROMETHEUS, query]));\n    const results = React.useMemo(() => {\n        var _a;\n        if (!queryResult || !queryResult.get('data')) {\n            return [{}, null, null];\n        }\n        const value = (_a = getInstantVectorStats(queryResult.get('data'))[0]) === null || _a === void 0 ? void 0 : _a.y;\n        return [humanize(value), queryResult.get('loadError'), value];\n    }, [queryResult, humanize]);\n    return results;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/dashboard/utilization-card/prometheus-hook.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/dashboard/utilization-card/prometheus-hook.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,4DAA4D;AAC5D,kFAAkF;AAClF,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;AAEvD,OAAO,EACL,oBAAoB,EACpB,wBAAwB,GACzB,MAAM,sCAAsC,CAAC;AAE9C,OAAO,EAAE,YAAY,EAAE,MAAM,uCAAuC,CAAC;AACrE,OAAO,EAAE,qBAAqB,EAAE,MAAM,2CAA2C,CAAC;AAGlF,MAAM,CAAC,MAAM,kBAAkB,GAAuB,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE;IACxE,MAAM,QAAQ,GAAG,WAAW,EAAE,CAAC;IAC/B,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,QAAQ,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC,CAAC;QACtC,OAAO,GAAG,EAAE;YACV,QAAQ,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC,CAAC;QAC5C,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,CAAC;IAEtB,MAAM,WAAW,GAAG,WAAW,CAAuC,CAAC,EAAE,UAAU,EAAE,EAAE,EAAE,CACvF,UAAU,CAAC,KAAK,CAAC,CAAC,YAAY,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,CACnD,CAAC;IACF,MAAM,OAAO,GAAG,KAAK,CAAC,OAAO,CAAgC,GAAG,EAAE;;QAChE,IAAI,CAAC,WAAW,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YAC5C,OAAO,CAAC,EAAE,EAAE,IAAI,EAAE,IAAI,CAAkC,CAAC;SAC1D;QACD,MAAM,KAAK,SAAG,qBAAqB,CAAC,WAAW,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,0CAAE,CAAC,CAAC;QACnE,OAAO,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,WAAW,CAAC,GAAG,CAAC,WAAW,CAAC,EAAE,KAAK,CAAC,CAAC;IAChE,CAAC,EAAE,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC,CAAC;IAE5B,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC","sourcesContent":["import * as React from 'react';\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore: FIXME missing exports due to out-of-sync @types/react-redux version\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Map as ImmutableMap } from 'immutable';\nimport {\n  watchPrometheusQuery,\n  stopWatchPrometheusQuery,\n} from '@console/internal/actions/dashboards';\nimport { RootState } from '@console/internal/redux';\nimport { RESULTS_TYPE } from '@console/internal/reducers/dashboards';\nimport { getInstantVectorStats } from '@console/internal/components/graphs/utils';\nimport { Humanize, HumanizeResult } from '@console/internal/components/utils/types';\n\nexport const usePrometheusQuery: UsePrometheusQuery = (query, humanize) => {\n  const dispatch = useDispatch();\n  React.useEffect(() => {\n    dispatch(watchPrometheusQuery(query));\n    return () => {\n      dispatch(stopWatchPrometheusQuery(query));\n    };\n  }, [dispatch, query]);\n\n  const queryResult = useSelector<RootState, ImmutableMap<string, any>>(({ dashboards }) =>\n    dashboards.getIn([RESULTS_TYPE.PROMETHEUS, query]),\n  );\n  const results = React.useMemo<[HumanizeResult, any, number]>(() => {\n    if (!queryResult || !queryResult.get('data')) {\n      return [{}, null, null] as [HumanizeResult, any, number];\n    }\n    const value = getInstantVectorStats(queryResult.get('data'))[0]?.y;\n    return [humanize(value), queryResult.get('loadError'), value];\n  }, [queryResult, humanize]);\n\n  return results;\n};\n\ntype UsePrometheusQuery = (query: string, humanize: Humanize) => [HumanizeResult, any, number];\n"]}]}