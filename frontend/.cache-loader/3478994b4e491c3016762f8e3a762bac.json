{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm/disk-wrapper.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm/disk-wrapper.ts","mtime":1615298458670},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { ObjectWithTypePropertyWrapper } from '../common/object-with-type-property-wrapper';\nimport { DiskType, DiskBus } from '../../../constants/vm/storage';\nexport class DiskWrapper extends ObjectWithTypePropertyWrapper {\n    constructor(disk, copy = false) {\n        super(disk, copy, DiskType);\n        this.getName = () => this.get('name');\n        this.getDiskBus = () => DiskBus.fromString(this.getIn([this.getTypeValue(), 'bus']));\n        this.getReadableDiskBus = () => {\n            const diskBus = this.getDiskBus();\n            return diskBus && diskBus.toString();\n        };\n        this.getBootOrder = () => this.get('bootOrder');\n        this.isFirstBootableDevice = () => this.getBootOrder() === 1;\n        this.hasBootOrder = () => this.getBootOrder() != null;\n    }\n    init({ name, bootOrder }) {\n        if (name !== undefined) {\n            this.data.name = name;\n        }\n        if (bootOrder !== undefined) {\n            this.data.bootOrder = bootOrder;\n        }\n        return this;\n    }\n    sanitize(type, { bus }) {\n        switch (type) {\n            case DiskType.FLOPPY:\n                return {};\n            default:\n                return {\n                    bus: _.isString(bus) ? bus : bus === null || bus === void 0 ? void 0 : bus.getValue(),\n                };\n        }\n    }\n}\n/**\n * @deprecated FIXME deprecate initializeFromSimpleData in favor of init\n */\nDiskWrapper.initializeFromSimpleData = ({ name, type, bus, bootOrder, }) => new DiskWrapper({\n    name,\n    bootOrder,\n}).setType(type, { bus: bus === null || bus === void 0 ? void 0 : bus.getValue() });\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm/disk-wrapper.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm/disk-wrapper.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,6BAA6B,EAAE,MAAM,6CAA6C,CAAC;AAE5F,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,+BAA+B,CAAC;AAMlE,MAAM,OAAO,WAAY,SAAQ,6BAKhC;IAoBC,YAAY,IAA2B,EAAE,IAAI,GAAG,KAAK;QACnD,KAAK,CAAC,IAAI,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC;QAa9B,YAAO,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;QAEjC,eAAU,GAAG,GAAY,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;QAEzF,uBAAkB,GAAG,GAAG,EAAE;YACxB,MAAM,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;YAClC,OAAO,OAAO,IAAI,OAAO,CAAC,QAAQ,EAAE,CAAC;QACvC,CAAC,CAAC;QAEF,iBAAY,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QAE3C,0BAAqB,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;QAExD,iBAAY,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,IAAI,CAAC;IAzBjD,CAAC;IAED,IAAI,CAAC,EAAE,IAAI,EAAE,SAAS,EAAyC;QAC7D,IAAI,IAAI,KAAK,SAAS,EAAE;YACtB,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SACvB;QACD,IAAI,SAAS,KAAK,SAAS,EAAE;YAC3B,IAAI,CAAC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;SACjC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAiBS,QAAQ,CAAC,IAAc,EAAE,EAAE,GAAG,EAAoB;QAC1D,QAAQ,IAAI,EAAE;YACZ,KAAK,QAAQ,CAAC,MAAM;gBAClB,OAAO,EAAE,CAAC;YACZ;gBACE,OAAO;oBACL,GAAG,EAAE,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,QAAQ,EAAE;iBAC7C,CAAC;SACL;IACH,CAAC;;AAzDD;;GAEG;AACI,oCAAwB,GAAG,CAAC,EACjC,IAAI,EACJ,IAAI,EACJ,GAAG,EACH,SAAS,GAMV,EAAE,EAAE,CACH,IAAI,WAAW,CAAC;IACd,IAAI;IACJ,SAAS;CACV,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,EAAE,GAAG,EAAE,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,QAAQ,EAAE,EAAE,CAAC,CAAC","sourcesContent":["import * as _ from 'lodash';\nimport { ObjectWithTypePropertyWrapper } from '../common/object-with-type-property-wrapper';\nimport { V1Disk } from '../../../types/vm/disk/V1Disk';\nimport { DiskType, DiskBus } from '../../../constants/vm/storage';\n\ntype CombinedTypeData = {\n  bus?: string | DiskBus;\n};\n\nexport class DiskWrapper extends ObjectWithTypePropertyWrapper<\n  V1Disk,\n  DiskType,\n  CombinedTypeData,\n  DiskWrapper\n> {\n  /**\n   * @deprecated FIXME deprecate initializeFromSimpleData in favor of init\n   */\n  static initializeFromSimpleData = ({\n    name,\n    type,\n    bus,\n    bootOrder,\n  }: {\n    name?: string;\n    type?: DiskType;\n    bus?: DiskBus;\n    bootOrder?: number;\n  }) =>\n    new DiskWrapper({\n      name,\n      bootOrder,\n    }).setType(type, { bus: bus?.getValue() });\n\n  constructor(disk?: V1Disk | DiskWrapper, copy = false) {\n    super(disk, copy, DiskType);\n  }\n\n  init({ name, bootOrder }: { name?: string; bootOrder?: number }) {\n    if (name !== undefined) {\n      this.data.name = name;\n    }\n    if (bootOrder !== undefined) {\n      this.data.bootOrder = bootOrder;\n    }\n    return this;\n  }\n\n  getName = () => this.get('name');\n\n  getDiskBus = (): DiskBus => DiskBus.fromString(this.getIn([this.getTypeValue(), 'bus']));\n\n  getReadableDiskBus = () => {\n    const diskBus = this.getDiskBus();\n    return diskBus && diskBus.toString();\n  };\n\n  getBootOrder = () => this.get('bootOrder');\n\n  isFirstBootableDevice = () => this.getBootOrder() === 1;\n\n  hasBootOrder = () => this.getBootOrder() != null;\n\n  protected sanitize(type: DiskType, { bus }: CombinedTypeData) {\n    switch (type) {\n      case DiskType.FLOPPY:\n        return {};\n      default:\n        return {\n          bus: _.isString(bus) ? bus : bus?.getValue(),\n        };\n    }\n  }\n}\n"]}]}