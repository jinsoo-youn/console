{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/module/ws-factory.js","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/module/ws-factory.js","mtime":1616735742510},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["/**\n * @fileOverview\n * WebSocket factory and utility wrapper.\n *\n */\n/* eslint-disable no-console */\nimport { getAccessToken } from '../hypercloud/auth';\nfunction createURL(host, path) {\n    let url;\n    if (host === 'auto') {\n        if (location.protocol === 'https:') {\n            url = 'wss://';\n        }\n        else {\n            url = 'ws://';\n        }\n        url += location.host;\n    }\n    else {\n        url = host;\n    }\n    if (path) {\n        if (!!getAccessToken()) {\n            if (path.indexOf('?') !== -1) {\n                url += path + '&token=' + getAccessToken();\n            }\n            else {\n                url += path + '?token=' + getAccessToken();\n            }\n        }\n        else {\n            url += path;\n        }\n        // url += path;\n    }\n    return url;\n}\nexport function WSFactory(id, options) {\n    this.id = id;\n    this.options = options;\n    this.bufferMax = options.bufferMax || 0;\n    this.url = createURL(options.host, options.path);\n    this._paused = false;\n    this._handlers = {\n        open: [],\n        close: [],\n        error: [],\n        message: [],\n        destroy: [],\n        // psuedo event :-/\n        bulkmessage: [],\n    };\n    this._connect();\n    if (this.bufferMax) {\n        this.flushCanceler = setInterval(this.flushMessageBuffer.bind(this), this.options.bufferFlushInterval || 500);\n    }\n}\nWSFactory.prototype._reconnect = function () {\n    if (this._connectionAttempt || this._state === 'destroyed') {\n        return;\n    }\n    let delay = 1000;\n    const attempt = () => {\n        if (!this.options.reconnect || this._state === 'open') {\n            clearTimeout(this._connectionAttempt);\n            this._connectionAttempt = null;\n            return;\n        }\n        if (this.options.timeout && delay > this.options.timeout) {\n            clearTimeout(this._connectionAttempt);\n            this._connectionAttempt = null;\n            this.destroy(true);\n            return;\n        }\n        this._connect();\n        delay = Math.round(Math.min(1.5 * delay, 60000));\n        this._connectionAttempt = setTimeout(attempt, delay);\n        console.log(`attempting reconnect in ${delay / 1000} seconds...`);\n    };\n    this._connectionAttempt = setTimeout(attempt, delay);\n};\nWSFactory.prototype._connect = function () {\n    const that = this;\n    this._state = 'init';\n    this._messageBuffer = [];\n    try {\n        this.ws = new WebSocket(this.url, this.options.subprotocols);\n    }\n    catch (e) {\n        console.error('Error creating websocket:', e);\n        this._reconnect();\n        return;\n    }\n    this.ws.onopen = function () {\n        console.log(`websocket open: ${that.id}`);\n        that._state = 'open';\n        that._triggerEvent('open');\n        if (that._connectionAttempt) {\n            clearTimeout(that._connectionAttempt);\n            that._connectionAttempt = null;\n        }\n    };\n    this.ws.onclose = function (evt) {\n        console.log(`websocket closed: ${that.id}`, evt);\n        that._state = 'closed';\n        that._triggerEvent('close', evt);\n        that._reconnect();\n    };\n    this.ws.onerror = function (evt) {\n        console.log(`websocket error: ${that.id}`);\n        that._state = 'error';\n        that._triggerEvent('error', evt);\n    };\n    this.ws.onmessage = function (evt) {\n        const msg = that.options && that.options.jsonParse ? JSON.parse(evt.data) : evt.data;\n        // In some browsers, onmessage can fire after onclose/error. Don't update state to be incorrect.\n        if (that._state !== 'destroyed' && that._state !== 'closed') {\n            that._state = 'open';\n        }\n        that._triggerEvent('message', msg);\n    };\n};\nWSFactory.prototype._registerHandler = function (type, fn) {\n    if (this._state === 'destroyed') {\n        return;\n    }\n    this._handlers[type].push(fn);\n};\n// Invoke all registered handler callbacks for a given event type.\nWSFactory.prototype._invokeHandlers = function (type, data) {\n    const handlers = this._handlers[type];\n    if (!handlers) {\n        return;\n    }\n    handlers.forEach(function (h) {\n        try {\n            h(data);\n        }\n        catch (e) {\n            console.error(e);\n        }\n    });\n};\n// Triggers event to be buffered or invoked depending on config.\nWSFactory.prototype._triggerEvent = function (type, event) {\n    if (this._state === 'destroyed') {\n        return;\n    }\n    // Only buffer \"message\" events, so \"error\" and \"close\" etc can pass thru.\n    if (this.bufferMax && type === 'message') {\n        this._messageBuffer.push(event);\n        if (this._messageBuffer.length > this.bufferMax) {\n            this._messageBuffer.shift();\n        }\n        return;\n    }\n    this._invokeHandlers(type, event);\n};\nWSFactory.prototype.onmessage = function (fn) {\n    this._registerHandler('message', fn);\n    return this;\n};\nWSFactory.prototype.onbulkmessage = function (fn) {\n    this._registerHandler('bulkmessage', fn);\n    return this;\n};\nWSFactory.prototype.onerror = function (fn) {\n    this._registerHandler('error', fn);\n    return this;\n};\nWSFactory.prototype.onopen = function (fn) {\n    this._registerHandler('open', fn);\n    return this;\n};\nWSFactory.prototype.onclose = function (fn) {\n    this._registerHandler('close', fn);\n    return this;\n};\nWSFactory.prototype.ondestroy = function (fn) {\n    this._registerHandler('destroy', fn);\n    return this;\n};\nWSFactory.prototype.flushMessageBuffer = function () {\n    if (this._paused) {\n        return;\n    }\n    if (!this._messageBuffer.length) {\n        return;\n    }\n    if (this._handlers.bulkmessage.length) {\n        this._invokeHandlers('bulkmessage', this._messageBuffer);\n    }\n    else {\n        this._messageBuffer.forEach(e => this._invokeHandlers('message', e));\n    }\n    this._messageBuffer = [];\n};\n// Pausing prevents any buffer flushing until unpaused.\nWSFactory.prototype.pause = function () {\n    this._paused = true;\n};\nWSFactory.prototype.unpause = function () {\n    this._paused = false;\n    this.flushMessageBuffer();\n};\nWSFactory.prototype.isPaused = function () {\n    return this._paused;\n};\nWSFactory.prototype.state = function () {\n    return this._state;\n};\nWSFactory.prototype.bufferSize = function () {\n    return this._messageBuffer.length;\n};\nWSFactory.prototype.destroy = function (timedout) {\n    console.log(`destroying websocket: ${this.id}`);\n    if (this._state === 'destroyed') {\n        return;\n    }\n    try {\n        this.ws.close();\n    }\n    catch (e) {\n        console.error(e);\n    }\n    clearInterval(this.flushCanceler);\n    clearTimeout(this._connectionAttempt);\n    if (this.ws) {\n        this.ws.onopen = null;\n        this.ws.onclose = null;\n        this.ws.onerror = null;\n        this.ws.onmessage = null;\n        delete this.ws;\n    }\n    try {\n        this._triggerEvent('destroy', timedout);\n    }\n    catch (e) {\n        console.error(e);\n    }\n    this._state = 'destroyed';\n    delete this.options;\n    this._messageBuffer = [];\n};\nWSFactory.prototype.send = function (data) {\n    this.ws && this.ws.send(data);\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/module/ws-factory.js","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/module/ws-factory.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * @fileOverview\n * WebSocket factory and utility wrapper.\n *\n */\n/* eslint-disable no-console */\nimport { getAccessToken } from '../hypercloud/auth';\n\nfunction createURL(host, path) {\n  let url;\n\n  if (host === 'auto') {\n    if (location.protocol === 'https:') {\n      url = 'wss://';\n    } else {\n      url = 'ws://';\n    }\n    url += location.host;\n  } else {\n    url = host;\n  }\n\n  if (path) {\n    if (!!getAccessToken()) {\n      if (path.indexOf('?') !== -1) {\n        url += path + '&token=' + getAccessToken();\n      } else {\n        url += path + '?token=' + getAccessToken();\n      }\n    } else {\n      url += path;\n    }\n    // url += path;\n  }\n\n  return url;\n}\n\nexport function WSFactory(id, options) {\n  this.id = id;\n  this.options = options;\n  this.bufferMax = options.bufferMax || 0;\n  this.url = createURL(options.host, options.path);\n  this._paused = false;\n  this._handlers = {\n    open: [],\n    close: [],\n    error: [],\n    message: [],\n    destroy: [],\n    // psuedo event :-/\n    bulkmessage: [],\n  };\n\n  this._connect();\n\n  if (this.bufferMax) {\n    this.flushCanceler = setInterval(this.flushMessageBuffer.bind(this), this.options.bufferFlushInterval || 500);\n  }\n}\n\nWSFactory.prototype._reconnect = function() {\n  if (this._connectionAttempt || this._state === 'destroyed') {\n    return;\n  }\n\n  let delay = 1000;\n\n  const attempt = () => {\n    if (!this.options.reconnect || this._state === 'open') {\n      clearTimeout(this._connectionAttempt);\n      this._connectionAttempt = null;\n      return;\n    }\n    if (this.options.timeout && delay > this.options.timeout) {\n      clearTimeout(this._connectionAttempt);\n      this._connectionAttempt = null;\n      this.destroy(true);\n      return;\n    }\n\n    this._connect();\n    delay = Math.round(Math.min(1.5 * delay, 60000));\n    this._connectionAttempt = setTimeout(attempt, delay);\n    console.log(`attempting reconnect in ${delay / 1000} seconds...`);\n  };\n\n  this._connectionAttempt = setTimeout(attempt, delay);\n};\n\nWSFactory.prototype._connect = function() {\n  const that = this;\n  this._state = 'init';\n  this._messageBuffer = [];\n  try {\n    this.ws = new WebSocket(this.url, this.options.subprotocols);\n  } catch (e) {\n    console.error('Error creating websocket:', e);\n    this._reconnect();\n    return;\n  }\n\n  this.ws.onopen = function() {\n    console.log(`websocket open: ${that.id}`);\n    that._state = 'open';\n    that._triggerEvent('open');\n    if (that._connectionAttempt) {\n      clearTimeout(that._connectionAttempt);\n      that._connectionAttempt = null;\n    }\n  };\n  this.ws.onclose = function(evt) {\n    console.log(`websocket closed: ${that.id}`, evt);\n    that._state = 'closed';\n    that._triggerEvent('close', evt);\n    that._reconnect();\n  };\n  this.ws.onerror = function(evt) {\n    console.log(`websocket error: ${that.id}`);\n    that._state = 'error';\n    that._triggerEvent('error', evt);\n  };\n  this.ws.onmessage = function(evt) {\n    const msg = that.options && that.options.jsonParse ? JSON.parse(evt.data) : evt.data;\n    // In some browsers, onmessage can fire after onclose/error. Don't update state to be incorrect.\n    if (that._state !== 'destroyed' && that._state !== 'closed') {\n      that._state = 'open';\n    }\n    that._triggerEvent('message', msg);\n  };\n};\n\nWSFactory.prototype._registerHandler = function(type, fn) {\n  if (this._state === 'destroyed') {\n    return;\n  }\n  this._handlers[type].push(fn);\n};\n\n// Invoke all registered handler callbacks for a given event type.\nWSFactory.prototype._invokeHandlers = function(type, data) {\n  const handlers = this._handlers[type];\n  if (!handlers) {\n    return;\n  }\n  handlers.forEach(function(h) {\n    try {\n      h(data);\n    } catch (e) {\n      console.error(e);\n    }\n  });\n};\n\n// Triggers event to be buffered or invoked depending on config.\nWSFactory.prototype._triggerEvent = function(type, event) {\n  if (this._state === 'destroyed') {\n    return;\n  }\n\n  // Only buffer \"message\" events, so \"error\" and \"close\" etc can pass thru.\n  if (this.bufferMax && type === 'message') {\n    this._messageBuffer.push(event);\n\n    if (this._messageBuffer.length > this.bufferMax) {\n      this._messageBuffer.shift();\n    }\n\n    return;\n  }\n\n  this._invokeHandlers(type, event);\n};\n\nWSFactory.prototype.onmessage = function(fn) {\n  this._registerHandler('message', fn);\n  return this;\n};\n\nWSFactory.prototype.onbulkmessage = function(fn) {\n  this._registerHandler('bulkmessage', fn);\n  return this;\n};\n\nWSFactory.prototype.onerror = function(fn) {\n  this._registerHandler('error', fn);\n  return this;\n};\n\nWSFactory.prototype.onopen = function(fn) {\n  this._registerHandler('open', fn);\n  return this;\n};\n\nWSFactory.prototype.onclose = function(fn) {\n  this._registerHandler('close', fn);\n  return this;\n};\n\nWSFactory.prototype.ondestroy = function(fn) {\n  this._registerHandler('destroy', fn);\n  return this;\n};\n\nWSFactory.prototype.flushMessageBuffer = function() {\n  if (this._paused) {\n    return;\n  }\n\n  if (!this._messageBuffer.length) {\n    return;\n  }\n\n  if (this._handlers.bulkmessage.length) {\n    this._invokeHandlers('bulkmessage', this._messageBuffer);\n  } else {\n    this._messageBuffer.forEach(e => this._invokeHandlers('message', e));\n  }\n\n  this._messageBuffer = [];\n};\n\n// Pausing prevents any buffer flushing until unpaused.\nWSFactory.prototype.pause = function() {\n  this._paused = true;\n};\n\nWSFactory.prototype.unpause = function() {\n  this._paused = false;\n  this.flushMessageBuffer();\n};\n\nWSFactory.prototype.isPaused = function() {\n  return this._paused;\n};\n\nWSFactory.prototype.state = function() {\n  return this._state;\n};\n\nWSFactory.prototype.bufferSize = function() {\n  return this._messageBuffer.length;\n};\n\nWSFactory.prototype.destroy = function(timedout) {\n  console.log(`destroying websocket: ${this.id}`);\n  if (this._state === 'destroyed') {\n    return;\n  }\n\n  try {\n    this.ws.close();\n  } catch (e) {\n    console.error(e);\n  }\n\n  clearInterval(this.flushCanceler);\n  clearTimeout(this._connectionAttempt);\n\n  if (this.ws) {\n    this.ws.onopen = null;\n    this.ws.onclose = null;\n    this.ws.onerror = null;\n    this.ws.onmessage = null;\n    delete this.ws;\n  }\n\n  try {\n    this._triggerEvent('destroy', timedout);\n  } catch (e) {\n    console.error(e);\n  }\n\n  this._state = 'destroyed';\n\n  delete this.options;\n  this._messageBuffer = [];\n};\n\nWSFactory.prototype.send = function(data) {\n  this.ws && this.ws.send(data);\n};\n"]}]}