{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/builder/BuilderImageSelector.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/builder/BuilderImageSelector.tsx","mtime":1616735742380},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useFormikContext } from 'formik';\nimport { LoadingInline } from '@console/internal/components/utils';\nimport { FormGroup, Alert } from '@patternfly/react-core';\nimport { StarIcon } from '@patternfly/react-icons';\nimport { getFieldId, ItemSelectorField } from '@console/shared';\nconst BuilderImageSelector = ({ loadingImageStream, builderImages, }) => {\n    const { values, setFieldValue, setFieldTouched } = useFormikContext();\n    const { selected, recommended, isRecommending, couldNotRecommend } = values.image;\n    React.useEffect(() => {\n        if (selected) {\n            setFieldValue('image.tag', _.get(builderImages, `${selected}.recentTag.name`, ''));\n            setFieldTouched('image.tag', true);\n        }\n    }, [selected, setFieldValue, setFieldTouched, builderImages]);\n    const fieldId = getFieldId('image.name', 'selector');\n    if (_.keys(builderImages).length === 1) {\n        return (React.createElement(ItemSelectorField, { itemList: builderImages, name: \"image.selected\", loadingItems: loadingImageStream, recommended: recommended }));\n    }\n    return (React.createElement(FormGroup, { fieldId: fieldId, label: \"Builder Image\" },\n        isRecommending && (React.createElement(React.Fragment, null,\n            React.createElement(LoadingInline, null),\n            \" Detecting recommended builder images...\")),\n        recommended && builderImages.hasOwnProperty(recommended) && (React.createElement(React.Fragment, null,\n            React.createElement(Alert, { variant: \"success\", title: \"Builder image(s) detected.\", isInline: true },\n                \"Recommended builder images are represented by\",\n                ' ',\n                React.createElement(StarIcon, { style: { color: 'var(--pf-global--primary-color--100)' } }),\n                \" icon.\"),\n            React.createElement(\"br\", null))),\n        (couldNotRecommend || (recommended && !builderImages.hasOwnProperty(recommended))) && (React.createElement(React.Fragment, null,\n            React.createElement(Alert, { variant: \"warning\", title: \"Unable to detect the builder image.\", isInline: true }, \"Select the most appropriate one from the list to continue.\"),\n            React.createElement(\"br\", null))),\n        React.createElement(ItemSelectorField, { itemList: builderImages, name: \"image.selected\", loadingItems: loadingImageStream, recommended: values.image.recommended })));\n};\nexport default BuilderImageSelector;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/builder/BuilderImageSelector.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/builder/BuilderImageSelector.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,gBAAgB,EAAgB,MAAM,QAAQ,CAAC;AACxD,OAAO,EAAE,aAAa,EAAE,MAAM,oCAAoC,CAAC;AACnE,OAAO,EAAE,SAAS,EAAE,KAAK,EAAE,MAAM,wBAAwB,CAAC;AAC1D,OAAO,EAAE,QAAQ,EAAE,MAAM,yBAAyB,CAAC;AACnD,OAAO,EAAE,UAAU,EAAE,iBAAiB,EAAE,MAAM,iBAAiB,CAAC;AAQhE,MAAM,oBAAoB,GAAwC,CAAC,EACjE,kBAAkB,EAClB,aAAa,GACd,EAAE,EAAE;IACH,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,eAAe,EAAE,GAAG,gBAAgB,EAAgB,CAAC;IACpF,MAAM,EAAE,QAAQ,EAAE,WAAW,EAAE,cAAc,EAAE,iBAAiB,EAAE,GAAG,MAAM,CAAC,KAAK,CAAC;IAElF,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,IAAI,QAAQ,EAAE;YACZ,aAAa,CAAC,WAAW,EAAE,CAAC,CAAC,GAAG,CAAC,aAAa,EAAE,GAAG,QAAQ,iBAAiB,EAAE,EAAE,CAAC,CAAC,CAAC;YACnF,eAAe,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC;SACpC;IACH,CAAC,EAAE,CAAC,QAAQ,EAAE,aAAa,EAAE,eAAe,EAAE,aAAa,CAAC,CAAC,CAAC;IAE9D,MAAM,OAAO,GAAG,UAAU,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC;IAErD,IAAI,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,MAAM,KAAK,CAAC,EAAE;QACtC,OAAO,CACL,oBAAC,iBAAiB,IAChB,QAAQ,EAAE,aAAa,EACvB,IAAI,EAAC,gBAAgB,EACrB,YAAY,EAAE,kBAAkB,EAChC,WAAW,EAAE,WAAW,GACxB,CACH,CAAC;KACH;IAED,OAAO,CACL,oBAAC,SAAS,IAAC,OAAO,EAAE,OAAO,EAAE,KAAK,EAAC,eAAe;QAC/C,cAAc,IAAI,CACjB;YACE,oBAAC,aAAa,OAAG;uDAChB,CACJ;QACA,WAAW,IAAI,aAAa,CAAC,cAAc,CAAC,WAAW,CAAC,IAAI,CAC3D;YACE,oBAAC,KAAK,IAAC,OAAO,EAAC,SAAS,EAAC,KAAK,EAAC,4BAA4B,EAAC,QAAQ;;gBACpB,GAAG;gBACjD,oBAAC,QAAQ,IAAC,KAAK,EAAE,EAAE,KAAK,EAAE,sCAAsC,EAAE,GAAI;yBAChE;YACR,+BAAM,CACL,CACJ;QACA,CAAC,iBAAiB,IAAI,CAAC,WAAW,IAAI,CAAC,aAAa,CAAC,cAAc,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,CACrF;YACE,oBAAC,KAAK,IAAC,OAAO,EAAC,SAAS,EAAC,KAAK,EAAC,qCAAqC,EAAC,QAAQ,uEAErE;YACR,+BAAM,CACL,CACJ;QACD,oBAAC,iBAAiB,IAChB,QAAQ,EAAE,aAAa,EACvB,IAAI,EAAC,gBAAgB,EACrB,YAAY,EAAE,kBAAkB,EAChC,WAAW,EAAE,MAAM,CAAC,KAAK,CAAC,WAAW,GACrC,CACQ,CACb,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,oBAAoB,CAAC","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { LoadingInline } from '@console/internal/components/utils';\nimport { FormGroup, Alert } from '@patternfly/react-core';\nimport { StarIcon } from '@patternfly/react-icons';\nimport { getFieldId, ItemSelectorField } from '@console/shared';\nimport { NormalizedBuilderImages } from '../../../utils/imagestream-utils';\n\nexport interface BuilderImageSelectorProps {\n  loadingImageStream: boolean;\n  builderImages: NormalizedBuilderImages;\n}\n\nconst BuilderImageSelector: React.FC<BuilderImageSelectorProps> = ({\n  loadingImageStream,\n  builderImages,\n}) => {\n  const { values, setFieldValue, setFieldTouched } = useFormikContext<FormikValues>();\n  const { selected, recommended, isRecommending, couldNotRecommend } = values.image;\n\n  React.useEffect(() => {\n    if (selected) {\n      setFieldValue('image.tag', _.get(builderImages, `${selected}.recentTag.name`, ''));\n      setFieldTouched('image.tag', true);\n    }\n  }, [selected, setFieldValue, setFieldTouched, builderImages]);\n\n  const fieldId = getFieldId('image.name', 'selector');\n\n  if (_.keys(builderImages).length === 1) {\n    return (\n      <ItemSelectorField\n        itemList={builderImages}\n        name=\"image.selected\"\n        loadingItems={loadingImageStream}\n        recommended={recommended}\n      />\n    );\n  }\n\n  return (\n    <FormGroup fieldId={fieldId} label=\"Builder Image\">\n      {isRecommending && (\n        <>\n          <LoadingInline /> Detecting recommended builder images...\n        </>\n      )}\n      {recommended && builderImages.hasOwnProperty(recommended) && (\n        <>\n          <Alert variant=\"success\" title=\"Builder image(s) detected.\" isInline>\n            Recommended builder images are represented by{' '}\n            <StarIcon style={{ color: 'var(--pf-global--primary-color--100)' }} /> icon.\n          </Alert>\n          <br />\n        </>\n      )}\n      {(couldNotRecommend || (recommended && !builderImages.hasOwnProperty(recommended))) && (\n        <>\n          <Alert variant=\"warning\" title=\"Unable to detect the builder image.\" isInline>\n            Select the most appropriate one from the list to continue.\n          </Alert>\n          <br />\n        </>\n      )}\n      <ItemSelectorField\n        itemList={builderImages}\n        name=\"image.selected\"\n        loadingItems={loadingImageStream}\n        recommended={values.image.recommended}\n      />\n    </FormGroup>\n  );\n};\n\nexport default BuilderImageSelector;\n"]}]}