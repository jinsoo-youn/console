{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/utils/triggers.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/utils/triggers.ts","mtime":1616735742390},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { flatten, mapValues } from 'lodash';\nimport { RouteModel } from '@console/internal/models';\nimport { getRouteWebURL } from '@console/internal/components/routes';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { useK8sGet } from '@console/internal/components/utils/k8s-get-hook';\nimport { useK8sWatchResource, useK8sWatchResources, } from '@console/internal/components/utils/k8s-watch-hook';\nimport { EventListenerModel, PipelineRunModel, TriggerTemplateModel } from '../../../models';\nimport { getResourceModelFromBindingKind } from '../../../utils/pipeline-augment';\nconst getResourceName = (resource) => resource.metadata.name;\nconst getEventListenerTemplateNames = (el) => el.spec.triggers.map((elTrigger) => elTrigger.template.name);\nconst getEventListenerGeneratedName = (eventListener) => { var _a; return (_a = eventListener.status) === null || _a === void 0 ? void 0 : _a.configuration.generatedName; };\nconst useEventListenerRoutes = (namespace, eventListenerResources) => {\n    const memoResources = React.useMemo(() => {\n        return (eventListenerResources || []).map(getEventListenerGeneratedName).reduce((acc, generatedName) => (Object.assign(Object.assign({}, acc), { [generatedName]: {\n                kind: RouteModel.kind,\n                name: generatedName,\n                namespace,\n                optional: true,\n            } })), {});\n    }, [namespace, eventListenerResources]);\n    const results = useK8sWatchResources(memoResources);\n    return mapValues(results, (result) => result.data);\n};\nconst useAllEventListeners = (namespace) => {\n    const eventListenerResource = React.useMemo(() => ({\n        kind: referenceForModel(EventListenerModel),\n        isList: true,\n        namespace,\n    }), [namespace]);\n    const [resources, eventListenerLoaded] = useK8sWatchResource(eventListenerResource);\n    return eventListenerLoaded ? resources : null;\n};\nexport const usePipelineTriggerTemplateNames = (pipelineName, namespace) => {\n    const eventListenerResources = useAllEventListeners(namespace);\n    const triggerTemplateResources = React.useMemo(() => {\n        if (!eventListenerResources) {\n            return {};\n        }\n        return flatten(eventListenerResources.map(getEventListenerTemplateNames)).reduce((resourceMap, triggerTemplateName) => (Object.assign(Object.assign({}, resourceMap), { [triggerTemplateName]: {\n                kind: referenceForModel(TriggerTemplateModel),\n                name: triggerTemplateName,\n                namespace,\n                optional: true,\n            } })), {});\n    }, [namespace, eventListenerResources]);\n    const triggerTemplates = useK8sWatchResources(triggerTemplateResources);\n    const routes = useEventListenerRoutes(namespace, eventListenerResources);\n    const triggerTemplateResults = Object.values(triggerTemplates);\n    const countExpected = Object.keys(triggerTemplateResources).length;\n    const countLoaded = triggerTemplateResults.filter(({ loaded }) => loaded).length;\n    const countErrored = triggerTemplateResults.filter(({ loadError }) => !!loadError).length;\n    if (countLoaded === 0 || countLoaded !== countExpected - countErrored) {\n        return null;\n    }\n    const matchingTriggerTemplateNames = triggerTemplateResults\n        .filter((resourceWatch) => resourceWatch.loaded)\n        .map((resourceWatch) => resourceWatch.data)\n        .filter((triggerTemplate) => {\n        var _a, _b, _c, _d;\n        const plr = (_b = (_a = triggerTemplate === null || triggerTemplate === void 0 ? void 0 : triggerTemplate.spec) === null || _a === void 0 ? void 0 : _a.resourcetemplates) === null || _b === void 0 ? void 0 : _b.find(({ kind }) => kind === PipelineRunModel.kind);\n        return ((_d = (_c = plr === null || plr === void 0 ? void 0 : plr.spec) === null || _c === void 0 ? void 0 : _c.pipelineRef) === null || _d === void 0 ? void 0 : _d.name) === pipelineName;\n    })\n        .map(getResourceName);\n    return (eventListenerResources || []).reduce((acc, ev) => {\n        const eventListenerTemplateNames = getEventListenerTemplateNames(ev);\n        const generatedRouteName = getEventListenerGeneratedName(ev);\n        const triggerTemplateName = matchingTriggerTemplateNames.find((name) => eventListenerTemplateNames.includes(name));\n        const route = routes[generatedRouteName];\n        if (!triggerTemplateName) {\n            return acc;\n        }\n        let routeURL = null;\n        try {\n            if (route) {\n                routeURL = getRouteWebURL(route);\n            }\n        }\n        catch (e) {\n            // swallow errors, we don't care if we can't create a good route right now\n        }\n        return [...acc, { routeURL, triggerTemplateName }];\n    }, []);\n};\nexport const useEventListenerTriggerTemplateNames = (eventListener) => {\n    const { metadata: { namespace }, } = eventListener;\n    const [route, routeLoaded] = useK8sGet(RouteModel, getEventListenerGeneratedName(eventListener), namespace);\n    return eventListener.spec.triggers.reduce((acc, trigger) => {\n        var _a;\n        return [\n            ...acc,\n            {\n                routeURL: route && ((_a = route === null || route === void 0 ? void 0 : route.status) === null || _a === void 0 ? void 0 : _a.ingress) && routeLoaded ? getRouteWebURL(route) : null,\n                triggerTemplateName: trigger.template.name,\n            },\n        ];\n    }, []);\n};\nexport const getEventListenerTriggerBindingNames = (eventListener) => {\n    return eventListener.spec.triggers.reduce((acc, trigger) => [\n        ...acc,\n        ...trigger.bindings.map((binding) => ({\n            model: getResourceModelFromBindingKind(binding.kind),\n            name: binding.name,\n        })),\n    ], []);\n};\nexport const getTriggerTemplatePipelineName = (triggerTemplate) => {\n    var _a;\n    return (((_a = triggerTemplate.spec.resourcetemplates.find(({ kind }) => kind === PipelineRunModel.kind)) === null || _a === void 0 ? void 0 : _a.spec.pipelineRef.name) || '');\n};\nexport const useTriggerTemplateEventListenerNames = (triggerTemplate) => {\n    const eventListenerResources = useAllEventListeners(triggerTemplate.metadata.namespace) || [];\n    return eventListenerResources\n        .filter((eventListener) => eventListener.spec.triggers.find(({ template: { name } }) => name === getResourceName(triggerTemplate)))\n        .map(getResourceName);\n};\nexport const useTriggerBindingEventListenerNames = (triggerBinding) => {\n    const eventListenerResources = useAllEventListeners(triggerBinding.metadata.namespace) || [];\n    return eventListenerResources\n        .filter((eventListener) => eventListener.spec.triggers.find(({ bindings }) => bindings.find(({ kind, name }) => getResourceName(triggerBinding) === name &&\n        getResourceModelFromBindingKind(kind).kind === triggerBinding.kind)))\n        .map(getResourceName);\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/utils/triggers.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/utils/triggers.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { flatten, mapValues } from 'lodash';\nimport { RouteModel } from '@console/internal/models';\nimport { getRouteWebURL } from '@console/internal/components/routes';\nimport { K8sResourceCommon, referenceForModel, RouteKind } from '@console/internal/module/k8s';\nimport { useK8sGet } from '@console/internal/components/utils/k8s-get-hook';\nimport {\n  useK8sWatchResource,\n  useK8sWatchResources,\n  WatchK8sResource,\n  WatchK8sResources,\n  WatchK8sResults,\n  WatchK8sResultsObject,\n} from '@console/internal/components/utils/k8s-watch-hook';\nimport { EventListenerModel, PipelineRunModel, TriggerTemplateModel } from '../../../models';\nimport { getResourceModelFromBindingKind, PipelineRun } from '../../../utils/pipeline-augment';\nimport {\n  EventListenerKind,\n  EventListenerKindTrigger,\n  TriggerBindingKind,\n  TriggerTemplateKind,\n} from '../resource-types';\nimport { ResourceModelLink } from '../resource-overview/DynamicResourceLinkList';\n\ntype RouteMap = { [generatedName: string]: RouteKind };\ntype TriggerTemplateMapping = { [key: string]: TriggerTemplateKind };\n\nconst getResourceName = (resource: K8sResourceCommon): string => resource.metadata.name;\nconst getEventListenerTemplateNames = (el: EventListenerKind): string[] =>\n  el.spec.triggers.map((elTrigger: EventListenerKindTrigger) => elTrigger.template.name);\nconst getEventListenerGeneratedName = (eventListener: EventListenerKind) =>\n  eventListener.status?.configuration.generatedName;\n\nconst useEventListenerRoutes = (\n  namespace: string,\n  eventListenerResources: EventListenerKind[],\n): RouteMap => {\n  const memoResources: WatchK8sResources<RouteMap> = React.useMemo(() => {\n    return (eventListenerResources || []).map(getEventListenerGeneratedName).reduce(\n      (acc, generatedName) => ({\n        ...acc,\n        [generatedName]: {\n          kind: RouteModel.kind,\n          name: generatedName,\n          namespace,\n          optional: true,\n        } as WatchK8sResource,\n      }),\n      {},\n    );\n  }, [namespace, eventListenerResources]);\n\n  const results: WatchK8sResults<RouteMap> = useK8sWatchResources<RouteMap>(memoResources);\n\n  return mapValues(results, (result: WatchK8sResultsObject<RouteKind>) => result.data);\n};\n\nconst useAllEventListeners = (namespace: string) => {\n  const eventListenerResource: WatchK8sResource = React.useMemo(\n    () => ({\n      kind: referenceForModel(EventListenerModel),\n      isList: true,\n      namespace,\n    }),\n    [namespace],\n  );\n  const [resources, eventListenerLoaded] = useK8sWatchResource<EventListenerKind[]>(\n    eventListenerResource,\n  );\n\n  return eventListenerLoaded ? resources : null;\n};\n\nexport type RouteTemplate = {\n  routeURL: string | null;\n  triggerTemplateName: string;\n};\n\nexport const usePipelineTriggerTemplateNames = (\n  pipelineName: string,\n  namespace: string,\n): RouteTemplate[] | null => {\n  const eventListenerResources = useAllEventListeners(namespace);\n  const triggerTemplateResources: WatchK8sResources<TriggerTemplateMapping> = React.useMemo(() => {\n    if (!eventListenerResources) {\n      return {};\n    }\n    return flatten(eventListenerResources.map(getEventListenerTemplateNames)).reduce(\n      (resourceMap, triggerTemplateName: string) => ({\n        ...resourceMap,\n        [triggerTemplateName]: {\n          kind: referenceForModel(TriggerTemplateModel),\n          name: triggerTemplateName,\n          namespace,\n          optional: true,\n        },\n      }),\n      {},\n    );\n  }, [namespace, eventListenerResources]);\n  const triggerTemplates: WatchK8sResults<TriggerTemplateMapping> = useK8sWatchResources(\n    triggerTemplateResources,\n  );\n  const routes: RouteMap = useEventListenerRoutes(namespace, eventListenerResources);\n\n  const triggerTemplateResults: WatchK8sResultsObject<TriggerTemplateKind>[] = Object.values(\n    triggerTemplates,\n  );\n  const countExpected = Object.keys(triggerTemplateResources).length;\n  const countLoaded = triggerTemplateResults.filter(({ loaded }) => loaded).length;\n  const countErrored = triggerTemplateResults.filter(({ loadError }) => !!loadError).length;\n  if (countLoaded === 0 || countLoaded !== countExpected - countErrored) {\n    return null;\n  }\n  const matchingTriggerTemplateNames: string[] = triggerTemplateResults\n    .filter((resourceWatch) => resourceWatch.loaded)\n    .map((resourceWatch) => resourceWatch.data)\n    .filter((triggerTemplate: TriggerTemplateKind) => {\n      const plr: PipelineRun = triggerTemplate?.spec?.resourcetemplates?.find(\n        ({ kind }) => kind === PipelineRunModel.kind,\n      );\n      return plr?.spec?.pipelineRef?.name === pipelineName;\n    })\n    .map(getResourceName);\n\n  return (eventListenerResources || []).reduce((acc, ev: EventListenerKind) => {\n    const eventListenerTemplateNames = getEventListenerTemplateNames(ev);\n    const generatedRouteName = getEventListenerGeneratedName(ev);\n\n    const triggerTemplateName = matchingTriggerTemplateNames.find((name) =>\n      eventListenerTemplateNames.includes(name),\n    );\n    const route: RouteKind = routes[generatedRouteName];\n\n    if (!triggerTemplateName) {\n      return acc;\n    }\n\n    let routeURL = null;\n    try {\n      if (route) {\n        routeURL = getRouteWebURL(route);\n      }\n    } catch (e) {\n      // swallow errors, we don't care if we can't create a good route right now\n    }\n\n    return [...acc, { routeURL, triggerTemplateName }];\n  }, []);\n};\n\nexport const useEventListenerTriggerTemplateNames = (\n  eventListener: EventListenerKind,\n): RouteTemplate[] | null => {\n  const {\n    metadata: { namespace },\n  } = eventListener;\n\n  const [route, routeLoaded] = useK8sGet<RouteKind>(\n    RouteModel,\n    getEventListenerGeneratedName(eventListener),\n    namespace,\n  );\n  return eventListener.spec.triggers.reduce(\n    (acc, trigger) => [\n      ...acc,\n      {\n        routeURL: route && route?.status?.ingress && routeLoaded ? getRouteWebURL(route) : null,\n        triggerTemplateName: trigger.template.name,\n      },\n    ],\n    [],\n  );\n};\n\nexport const getEventListenerTriggerBindingNames = (\n  eventListener: EventListenerKind,\n): ResourceModelLink[] => {\n  return eventListener.spec.triggers.reduce(\n    (acc, trigger) => [\n      ...acc,\n      ...trigger.bindings.map((binding) => ({\n        model: getResourceModelFromBindingKind(binding.kind),\n        name: binding.name,\n      })),\n    ],\n    [] as ResourceModelLink[],\n  );\n};\n\nexport const getTriggerTemplatePipelineName = (triggerTemplate: TriggerTemplateKind): string => {\n  return (\n    triggerTemplate.spec.resourcetemplates.find(({ kind }) => kind === PipelineRunModel.kind)?.spec\n      .pipelineRef.name || ''\n  );\n};\n\nexport const useTriggerTemplateEventListenerNames = (triggerTemplate: TriggerTemplateKind) => {\n  const eventListenerResources = useAllEventListeners(triggerTemplate.metadata.namespace) || [];\n\n  return eventListenerResources\n    .filter((eventListener: EventListenerKind) =>\n      eventListener.spec.triggers.find(\n        ({ template: { name } }) => name === getResourceName(triggerTemplate),\n      ),\n    )\n    .map(getResourceName);\n};\n\nexport const useTriggerBindingEventListenerNames = (triggerBinding: TriggerBindingKind) => {\n  const eventListenerResources = useAllEventListeners(triggerBinding.metadata.namespace) || [];\n  return eventListenerResources\n    .filter((eventListener: EventListenerKind) =>\n      eventListener.spec.triggers.find(({ bindings }) =>\n        bindings.find(\n          ({ kind, name }) =>\n            getResourceName(triggerBinding) === name &&\n            getResourceModelFromBindingKind(kind).kind === triggerBinding.kind,\n        ),\n      ),\n    )\n    .map(getResourceName);\n};\n"]}]}