{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/helm/components/HelmReleaseNode.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/helm/components/HelmReleaseNode.tsx","mtime":1616735742400},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { useAnchor, RectAnchor, useHover, createSvgIdUrl, useDragNode, observer, useCombineRefs, } from '@console/topology';\nimport { NodeShadows, NODE_SHADOW_FILTER_ID_HOVER, NODE_SHADOW_FILTER_ID, } from '../../components/NodeShadows';\nimport { useSearchFilter } from '../../filters/useSearchFilter';\nimport { GroupNode } from '../../components/groups/GroupNode';\nimport { nodeDragSourceSpec } from '../../components/componentUtils';\nimport { TYPE_HELM_RELEASE } from './const';\nconst HelmReleaseNode = ({ element, editAccess, selected, onSelect, onContextMenu, contextMenuOpen, dndDropRef, }) => {\n    useAnchor(React.useCallback((node) => new RectAnchor(node, 1.5), []));\n    const [hover, hoverRef] = useHover();\n    const [{ dragging }, dragNodeRef] = useDragNode(nodeDragSourceSpec(TYPE_HELM_RELEASE, false), {\n        element,\n    });\n    const refs = useCombineRefs(dragNodeRef, dndDropRef, hoverRef);\n    const [filtered] = useSearchFilter(element.getLabel());\n    const { width, height } = element.getDimensions();\n    return (React.createElement(\"g\", { ref: refs, onClick: onSelect, onContextMenu: editAccess ? onContextMenu : null, className: classNames('odc-helm-release', {\n            'is-dragging': dragging,\n            'is-selected': selected,\n            'is-filtered': filtered,\n        }) },\n        React.createElement(NodeShadows, null),\n        React.createElement(\"rect\", { filter: createSvgIdUrl(hover || contextMenuOpen || dragging\n                ? NODE_SHADOW_FILTER_ID_HOVER\n                : NODE_SHADOW_FILTER_ID), className: \"odc-helm-release__bg\", x: 0, y: 0, width: width, height: height, rx: \"5\", ry: \"5\" }),\n        React.createElement(GroupNode, { kind: \"HelmRelease\", element: element, typeIconClass: \"icon-helm\", groupResources: element.getData().groupResources })));\n};\nexport default observer(HelmReleaseNode);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/helm/components/HelmReleaseNode.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/helm/components/HelmReleaseNode.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,UAAU,MAAM,YAAY,CAAC;AACzC,OAAO,EACL,SAAS,EACT,UAAU,EACV,QAAQ,EAER,cAAc,EACd,WAAW,EAIX,QAAQ,EACR,cAAc,GACf,MAAM,mBAAmB,CAAC;AAC3B,OAAO,EACL,WAAW,EACX,2BAA2B,EAC3B,qBAAqB,GACtB,MAAM,8BAA8B,CAAC;AACtC,OAAO,EAAE,eAAe,EAAE,MAAM,+BAA+B,CAAC;AAChE,OAAO,EAAE,SAAS,EAAE,MAAM,mCAAmC,CAAC;AAC9D,OAAO,EAAE,kBAAkB,EAAE,MAAM,iCAAiC,CAAC;AACrE,OAAO,EAAE,iBAAiB,EAAE,MAAM,SAAS,CAAC;AAS5C,MAAM,eAAe,GAAmC,CAAC,EACvD,OAAO,EACP,UAAU,EACV,QAAQ,EACR,QAAQ,EACR,aAAa,EACb,eAAe,EACf,UAAU,GACX,EAAE,EAAE;IACH,SAAS,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC,IAAU,EAAE,EAAE,CAAC,IAAI,UAAU,CAAC,IAAI,EAAE,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;IAC5E,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,EAAE,CAAC;IACrC,MAAM,CAAC,EAAE,QAAQ,EAAE,EAAE,WAAW,CAAC,GAAG,WAAW,CAAC,kBAAkB,CAAC,iBAAiB,EAAE,KAAK,CAAC,EAAE;QAC5F,OAAO;KACR,CAAC,CAAC;IACH,MAAM,IAAI,GAAG,cAAc,CAAiB,WAAW,EAAE,UAAU,EAAE,QAAQ,CAAC,CAAC;IAC/E,MAAM,CAAC,QAAQ,CAAC,GAAG,eAAe,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,CAAC;IACvD,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC,aAAa,EAAE,CAAC;IAElD,OAAO,CACL,2BACE,GAAG,EAAE,IAAI,EACT,OAAO,EAAE,QAAQ,EACjB,aAAa,EAAE,UAAU,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,EAChD,SAAS,EAAE,UAAU,CAAC,kBAAkB,EAAE;YACxC,aAAa,EAAE,QAAQ;YACvB,aAAa,EAAE,QAAQ;YACvB,aAAa,EAAE,QAAQ;SACxB,CAAC;QAEF,oBAAC,WAAW,OAAG;QACf,8BACE,MAAM,EAAE,cAAc,CACpB,KAAK,IAAI,eAAe,IAAI,QAAQ;gBAClC,CAAC,CAAC,2BAA2B;gBAC7B,CAAC,CAAC,qBAAqB,CAC1B,EACD,SAAS,EAAC,sBAAsB,EAChC,CAAC,EAAE,CAAC,EACJ,CAAC,EAAE,CAAC,EACJ,KAAK,EAAE,KAAK,EACZ,MAAM,EAAE,MAAM,EACd,EAAE,EAAC,GAAG,EACN,EAAE,EAAC,GAAG,GACN;QACF,oBAAC,SAAS,IACR,IAAI,EAAC,aAAa,EAClB,OAAO,EAAE,OAAO,EAChB,aAAa,EAAC,WAAW,EACzB,cAAc,EAAE,OAAO,CAAC,OAAO,EAAE,CAAC,cAAc,GAChD,CACA,CACL,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,QAAQ,CAAC,eAAe,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport {\n  useAnchor,\n  RectAnchor,\n  useHover,\n  Node,\n  createSvgIdUrl,\n  useDragNode,\n  WithSelectionProps,\n  WithDndDropProps,\n  WithContextMenuProps,\n  observer,\n  useCombineRefs,\n} from '@console/topology';\nimport {\n  NodeShadows,\n  NODE_SHADOW_FILTER_ID_HOVER,\n  NODE_SHADOW_FILTER_ID,\n} from '../../components/NodeShadows';\nimport { useSearchFilter } from '../../filters/useSearchFilter';\nimport { GroupNode } from '../../components/groups/GroupNode';\nimport { nodeDragSourceSpec } from '../../components/componentUtils';\nimport { TYPE_HELM_RELEASE } from './const';\n\nexport type HelmReleaseNodeProps = {\n  element: Node;\n  editAccess: boolean;\n} & WithSelectionProps &\n  WithContextMenuProps &\n  WithDndDropProps;\n\nconst HelmReleaseNode: React.FC<HelmReleaseNodeProps> = ({\n  element,\n  editAccess,\n  selected,\n  onSelect,\n  onContextMenu,\n  contextMenuOpen,\n  dndDropRef,\n}) => {\n  useAnchor(React.useCallback((node: Node) => new RectAnchor(node, 1.5), []));\n  const [hover, hoverRef] = useHover();\n  const [{ dragging }, dragNodeRef] = useDragNode(nodeDragSourceSpec(TYPE_HELM_RELEASE, false), {\n    element,\n  });\n  const refs = useCombineRefs<SVGRectElement>(dragNodeRef, dndDropRef, hoverRef);\n  const [filtered] = useSearchFilter(element.getLabel());\n  const { width, height } = element.getDimensions();\n\n  return (\n    <g\n      ref={refs}\n      onClick={onSelect}\n      onContextMenu={editAccess ? onContextMenu : null}\n      className={classNames('odc-helm-release', {\n        'is-dragging': dragging,\n        'is-selected': selected,\n        'is-filtered': filtered,\n      })}\n    >\n      <NodeShadows />\n      <rect\n        filter={createSvgIdUrl(\n          hover || contextMenuOpen || dragging\n            ? NODE_SHADOW_FILTER_ID_HOVER\n            : NODE_SHADOW_FILTER_ID,\n        )}\n        className=\"odc-helm-release__bg\"\n        x={0}\n        y={0}\n        width={width}\n        height={height}\n        rx=\"5\"\n        ry=\"5\"\n      />\n      <GroupNode\n        kind=\"HelmRelease\"\n        element={element}\n        typeIconClass=\"icon-helm\"\n        groupResources={element.getData().groupResources}\n      />\n    </g>\n  );\n};\n\nexport default observer(HelmReleaseNode);\n"]}]}