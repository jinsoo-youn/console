{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/alert-manager.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/alert-manager.tsx","mtime":1616735742460},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { Button } from '@patternfly/react-core';\nimport { PencilAltIcon } from '@patternfly/react-icons';\nimport { referenceForModel } from '../module/k8s';\nimport { ListPage, DetailsPage, Table, TableRow, TableData } from './factory';\nimport { SectionHeading, LabelList, navFactory, ResourceLink, Selector, pluralize } from './utils';\nimport { configureReplicaCountModal } from './modals';\nimport { AlertmanagerModel } from '../models';\nconst Details = (props) => {\n    const alertManager = props.obj;\n    const { metadata, spec } = alertManager;\n    const openReplicaCountModal = (event) => {\n        event.preventDefault();\n        event.target.blur();\n        configureReplicaCountModal({ resourceKind: AlertmanagerModel, resource: alertManager });\n    };\n    return (React.createElement(\"div\", null,\n        React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(SectionHeading, { text: \"Alert Manager Details\" }),\n            React.createElement(\"div\", { className: \"row\" },\n                React.createElement(\"div\", { className: \"col-sm-6 col-xs-12\" },\n                    React.createElement(\"dl\", { className: \"co-m-pane__details\" },\n                        React.createElement(\"dt\", null, \"Name\"),\n                        React.createElement(\"dd\", null, metadata.name),\n                        React.createElement(\"dt\", null, \"Labels\"),\n                        React.createElement(\"dd\", null,\n                            React.createElement(LabelList, { kind: \"Alertmanager\", labels: metadata.labels })),\n                        spec.nodeSelector && React.createElement(\"dt\", null, \"Alert Manager Node Selector\"),\n                        spec.nodeSelector && (React.createElement(\"dd\", null,\n                            React.createElement(Selector, { selector: spec.nodeSelector, kind: \"Node\" }))))),\n                React.createElement(\"div\", { className: \"col-sm-6 col-xs-12\" },\n                    React.createElement(\"dl\", { className: \"co-m-pane__details\" },\n                        React.createElement(\"dt\", null, \"Version\"),\n                        React.createElement(\"dd\", null, spec.version),\n                        React.createElement(\"dt\", null, \"Replicas\"),\n                        React.createElement(\"dd\", null,\n                            React.createElement(Button, { variant: \"link\", type: \"button\", isInline: true, onClick: openReplicaCountModal },\n                                pluralize(spec.replicas, 'pod'),\n                                React.createElement(PencilAltIcon, { className: \"co-icon-space-l pf-c-button-icon--plain\" })))))))));\n};\nconst { details, editYaml } = navFactory;\nexport const AlertManagersDetailsPage = (props) => (React.createElement(DetailsPage, Object.assign({}, props, { pages: [details(Details), editYaml()] })));\nconst tableColumnClasses = [\n    classNames('col-md-2', 'col-sm-3', 'col-xs-6'),\n    classNames('col-md-2', 'col-sm-3', 'col-xs-6'),\n    classNames('col-md-3', 'col-sm-3', 'hidden-xs'),\n    classNames('col-md-2', 'hidden-sm', 'hidden-xs'),\n    classNames('col-md-3', 'col-sm-3', 'hidden-xs'),\n];\nconst AlertManagerTableRow = ({ obj: alertManager, index, key, style, }) => {\n    const { metadata, spec } = alertManager;\n    return (React.createElement(TableRow, { id: alertManager.metadata.uid, index: index, trKey: key, style: style },\n        React.createElement(TableData, { className: tableColumnClasses[0] },\n            React.createElement(ResourceLink, { kind: referenceForModel(AlertmanagerModel), name: metadata.name, namespace: metadata.namespace, title: metadata.uid })),\n        React.createElement(TableData, { className: tableColumnClasses[1] },\n            React.createElement(ResourceLink, { kind: \"Namespace\", name: metadata.namespace, title: metadata.namespace })),\n        React.createElement(TableData, { className: tableColumnClasses[2] },\n            React.createElement(LabelList, { kind: AlertmanagerModel.kind, labels: metadata.labels })),\n        React.createElement(TableData, { className: tableColumnClasses[3] }, spec.version),\n        React.createElement(TableData, { className: tableColumnClasses[4] },\n            React.createElement(Selector, { selector: spec.nodeSelector, kind: \"Node\" }))));\n};\nconst AlertManagerTableHeader = () => {\n    return [\n        {\n            title: 'Name',\n            sortField: 'metadata.name',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[0] },\n        },\n        {\n            title: 'Namespace',\n            sortField: 'metadata.namespace',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[1] },\n        },\n        {\n            title: 'Labels',\n            sortField: 'metadata.labels',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[2] },\n        },\n        {\n            title: 'Version',\n            sortField: 'spec.version',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[3] },\n        },\n        {\n            title: 'Node Selector',\n            sortField: 'spec.nodeSelector',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[4] },\n        },\n    ];\n};\nAlertManagerTableHeader.displayName = 'AlertManagerTableHeader';\nconst AlertManagersList = (props) => (React.createElement(Table, Object.assign({}, props, { \"aria-label\": \"Alert Managers\", Header: AlertManagerTableHeader, Row: AlertManagerTableRow, virtualize: true })));\nexport const AlertManagersPage = (props) => (React.createElement(ListPage, Object.assign({}, props, { ListComponent: AlertManagersList, canCreate: false, kind: referenceForModel(AlertmanagerModel) })));\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/alert-manager.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/alert-manager.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { Button } from '@patternfly/react-core';\nimport { PencilAltIcon } from '@patternfly/react-icons';\n\nimport { referenceForModel, K8sResourceKind } from '../module/k8s';\nimport { ListPage, DetailsPage, Table, TableRow, TableData, RowFunction } from './factory';\nimport { SectionHeading, LabelList, navFactory, ResourceLink, Selector, pluralize } from './utils';\nimport { configureReplicaCountModal } from './modals';\nimport { AlertmanagerModel } from '../models';\n\nconst Details: React.SFC<DetailsProps> = (props) => {\n  const alertManager = props.obj;\n  const { metadata, spec } = alertManager;\n\n  const openReplicaCountModal = (event) => {\n    event.preventDefault();\n    event.target.blur();\n    configureReplicaCountModal({ resourceKind: AlertmanagerModel, resource: alertManager });\n  };\n\n  return (\n    <div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Alert Manager Details\" />\n        <div className=\"row\">\n          <div className=\"col-sm-6 col-xs-12\">\n            <dl className=\"co-m-pane__details\">\n              <dt>Name</dt>\n              <dd>{metadata.name}</dd>\n              <dt>Labels</dt>\n              <dd>\n                <LabelList kind=\"Alertmanager\" labels={metadata.labels} />\n              </dd>\n              {spec.nodeSelector && <dt>Alert Manager Node Selector</dt>}\n              {spec.nodeSelector && (\n                <dd>\n                  <Selector selector={spec.nodeSelector} kind=\"Node\" />\n                </dd>\n              )}\n            </dl>\n          </div>\n          <div className=\"col-sm-6 col-xs-12\">\n            <dl className=\"co-m-pane__details\">\n              <dt>Version</dt>\n              <dd>{spec.version}</dd>\n              <dt>Replicas</dt>\n              <dd>\n                <Button variant=\"link\" type=\"button\" isInline onClick={openReplicaCountModal}>\n                  {pluralize(spec.replicas, 'pod')}\n                  <PencilAltIcon className=\"co-icon-space-l pf-c-button-icon--plain\" />\n                </Button>\n              </dd>\n            </dl>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst { details, editYaml } = navFactory;\n\nexport const AlertManagersDetailsPage = (props) => (\n  <DetailsPage {...props} pages={[details(Details), editYaml()]} />\n);\n\nconst tableColumnClasses = [\n  classNames('col-md-2', 'col-sm-3', 'col-xs-6'),\n  classNames('col-md-2', 'col-sm-3', 'col-xs-6'),\n  classNames('col-md-3', 'col-sm-3', 'hidden-xs'),\n  classNames('col-md-2', 'hidden-sm', 'hidden-xs'),\n  classNames('col-md-3', 'col-sm-3', 'hidden-xs'),\n];\n\nconst AlertManagerTableRow: RowFunction<K8sResourceKind> = ({\n  obj: alertManager,\n  index,\n  key,\n  style,\n}) => {\n  const { metadata, spec } = alertManager;\n  return (\n    <TableRow id={alertManager.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={referenceForModel(AlertmanagerModel)}\n          name={metadata.name}\n          namespace={metadata.namespace}\n          title={metadata.uid}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[1]}>\n        <ResourceLink kind=\"Namespace\" name={metadata.namespace} title={metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <LabelList kind={AlertmanagerModel.kind} labels={metadata.labels} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>{spec.version}</TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <Selector selector={spec.nodeSelector} kind=\"Node\" />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst AlertManagerTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Labels',\n      sortField: 'metadata.labels',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Version',\n      sortField: 'spec.version',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: 'Node Selector',\n      sortField: 'spec.nodeSelector',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n  ];\n};\nAlertManagerTableHeader.displayName = 'AlertManagerTableHeader';\n\nconst AlertManagersList = (props) => (\n  <Table\n    {...props}\n    aria-label=\"Alert Managers\"\n    Header={AlertManagerTableHeader}\n    Row={AlertManagerTableRow}\n    virtualize\n  />\n);\n\nexport const AlertManagersPage = (props) => (\n  <ListPage\n    {...props}\n    ListComponent={AlertManagersList}\n    canCreate={false}\n    kind={referenceForModel(AlertmanagerModel)}\n  />\n);\n\ntype DetailsProps = {\n  obj: K8sResourceKind;\n};\n"]}]}