{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/utils/create-knative-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/utils/create-knative-utils.ts","mtime":1616735742410},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { ImagePullPolicy } from '@console/internal/module/k8s';\nimport { getAppLabels, mergeData } from '@console/dev-console/src/utils/resource-label-utils';\nimport { getProbesData } from '@console/dev-console/src/components/health-checks/create-health-checks-probe-utils';\nimport { ServiceModel } from '../models';\nexport const getKnativeServiceDepResource = (formData, imageStreamUrl, imageStreamName, imageStreamTag, imageNamespace, annotations, originalKnativeService) => {\n    const { name, application: { name: applicationName }, project: { name: namespace }, serverless: { scaling }, limits, route: { unknownTargetPort, create, targetPort }, labels, image: { tag: imageTag }, deployment: { env, triggers: { image: imagePolicy }, }, healthChecks, resources, } = formData;\n    const contTargetPort = targetPort\n        ? parseInt(targetPort.split('-')[0], 10)\n        : parseInt(unknownTargetPort, 10);\n    const imgPullPolicy = imagePolicy ? ImagePullPolicy.Always : ImagePullPolicy.IfNotPresent;\n    const { concurrencylimit, concurrencytarget, minpods, maxpods } = scaling;\n    const { cpu: { request: cpuRequest, requestUnit: cpuRequestUnit, limit: cpuLimit, limitUnit: cpuLimitUnit, }, memory: { request: memoryRequest, requestUnit: memoryRequestUnit, limit: memoryLimit, limitUnit: memoryLimitUnit, }, } = limits;\n    const defaultLabel = getAppLabels(name, applicationName, imageStreamName, imageStreamTag || imageTag, imageNamespace);\n    delete defaultLabel.app;\n    const newKnativeDeployResource = {\n        kind: ServiceModel.kind,\n        apiVersion: `${ServiceModel.apiGroup}/${ServiceModel.apiVersion}`,\n        metadata: {\n            name,\n            namespace,\n            labels: Object.assign(Object.assign(Object.assign({}, defaultLabel), labels), (!create && { 'serving.knative.dev/visibility': `cluster-local` })),\n            annotations,\n        },\n        spec: {\n            template: {\n                metadata: {\n                    labels: Object.assign(Object.assign({}, defaultLabel), labels),\n                    annotations: Object.assign(Object.assign(Object.assign(Object.assign({}, (concurrencytarget && {\n                        'autoscaling.knative.dev/target': `${concurrencytarget}`,\n                    })), (minpods && { 'autoscaling.knative.dev/minScale': `${minpods}` })), (maxpods && { 'autoscaling.knative.dev/maxScale': `${maxpods}` })), annotations),\n                },\n                spec: Object.assign(Object.assign({}, (concurrencylimit && { containerConcurrency: concurrencylimit })), { containers: [\n                        Object.assign(Object.assign(Object.assign({ image: `${imageStreamUrl}` }, (contTargetPort && {\n                            ports: [\n                                {\n                                    containerPort: contTargetPort,\n                                },\n                            ],\n                        })), { imagePullPolicy: imgPullPolicy, env, resources: Object.assign(Object.assign({}, ((cpuLimit || memoryLimit) && {\n                                limits: Object.assign(Object.assign({}, (cpuLimit && { cpu: `${cpuLimit}${cpuLimitUnit}` })), (memoryLimit && { memory: `${memoryLimit}${memoryLimitUnit}` })),\n                            })), ((cpuRequest || memoryRequest) && {\n                                requests: Object.assign(Object.assign({}, (cpuRequest && { cpu: `${cpuRequest}${cpuRequestUnit}` })), (memoryRequest && { memory: `${memoryRequest}${memoryRequestUnit}` })),\n                            })) }), getProbesData(healthChecks, resources)),\n                    ] }),\n            },\n        },\n    };\n    let knativeServiceUpdated = {};\n    if (!_.isEmpty(originalKnativeService)) {\n        knativeServiceUpdated = _.omit(originalKnativeService, [\n            'status',\n            'spec.template.metadata.name',\n        ]);\n    }\n    const knativeDeployResource = mergeData(knativeServiceUpdated || {}, newKnativeDeployResource);\n    return knativeDeployResource;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/utils/create-knative-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/utils/create-knative-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { K8sResourceKind, ImagePullPolicy } from '@console/internal/module/k8s';\nimport { getAppLabels, mergeData } from '@console/dev-console/src/utils/resource-label-utils';\nimport { getProbesData } from '@console/dev-console/src/components/health-checks/create-health-checks-probe-utils';\nimport {\n  DeployImageFormData,\n  GitImportFormData,\n} from '@console/dev-console/src/components/import/import-types';\nimport { ServiceModel } from '../models';\n\nexport const getKnativeServiceDepResource = (\n  formData: GitImportFormData | DeployImageFormData,\n  imageStreamUrl: string,\n  imageStreamName?: string,\n  imageStreamTag?: string,\n  imageNamespace?: string,\n  annotations?: { [name: string]: string },\n  originalKnativeService?: K8sResourceKind,\n): K8sResourceKind => {\n  const {\n    name,\n    application: { name: applicationName },\n    project: { name: namespace },\n    serverless: { scaling },\n    limits,\n    route: { unknownTargetPort, create, targetPort },\n    labels,\n    image: { tag: imageTag },\n    deployment: {\n      env,\n      triggers: { image: imagePolicy },\n    },\n    healthChecks,\n    resources,\n  } = formData;\n  const contTargetPort = targetPort\n    ? parseInt(targetPort.split('-')[0], 10)\n    : parseInt(unknownTargetPort, 10);\n  const imgPullPolicy = imagePolicy ? ImagePullPolicy.Always : ImagePullPolicy.IfNotPresent;\n  const { concurrencylimit, concurrencytarget, minpods, maxpods } = scaling;\n  const {\n    cpu: {\n      request: cpuRequest,\n      requestUnit: cpuRequestUnit,\n      limit: cpuLimit,\n      limitUnit: cpuLimitUnit,\n    },\n    memory: {\n      request: memoryRequest,\n      requestUnit: memoryRequestUnit,\n      limit: memoryLimit,\n      limitUnit: memoryLimitUnit,\n    },\n  } = limits;\n  const defaultLabel = getAppLabels(\n    name,\n    applicationName,\n    imageStreamName,\n    imageStreamTag || imageTag,\n    imageNamespace,\n  );\n  delete defaultLabel.app;\n  const newKnativeDeployResource: K8sResourceKind = {\n    kind: ServiceModel.kind,\n    apiVersion: `${ServiceModel.apiGroup}/${ServiceModel.apiVersion}`,\n    metadata: {\n      name,\n      namespace,\n      labels: {\n        ...defaultLabel,\n        ...labels,\n        ...(!create && { 'serving.knative.dev/visibility': `cluster-local` }),\n      },\n      annotations,\n    },\n    spec: {\n      template: {\n        metadata: {\n          labels: {\n            ...defaultLabel,\n            ...labels,\n          },\n          annotations: {\n            ...(concurrencytarget && {\n              'autoscaling.knative.dev/target': `${concurrencytarget}`,\n            }),\n            ...(minpods && { 'autoscaling.knative.dev/minScale': `${minpods}` }),\n            ...(maxpods && { 'autoscaling.knative.dev/maxScale': `${maxpods}` }),\n            ...annotations,\n          },\n        },\n        spec: {\n          ...(concurrencylimit && { containerConcurrency: concurrencylimit }),\n          containers: [\n            {\n              image: `${imageStreamUrl}`,\n              ...(contTargetPort && {\n                ports: [\n                  {\n                    containerPort: contTargetPort,\n                  },\n                ],\n              }),\n              imagePullPolicy: imgPullPolicy,\n              env,\n              resources: {\n                ...((cpuLimit || memoryLimit) && {\n                  limits: {\n                    ...(cpuLimit && { cpu: `${cpuLimit}${cpuLimitUnit}` }),\n                    ...(memoryLimit && { memory: `${memoryLimit}${memoryLimitUnit}` }),\n                  },\n                }),\n                ...((cpuRequest || memoryRequest) && {\n                  requests: {\n                    ...(cpuRequest && { cpu: `${cpuRequest}${cpuRequestUnit}` }),\n                    ...(memoryRequest && { memory: `${memoryRequest}${memoryRequestUnit}` }),\n                  },\n                }),\n              },\n              ...getProbesData(healthChecks, resources),\n            },\n          ],\n        },\n      },\n    },\n  };\n  let knativeServiceUpdated = {};\n  if (!_.isEmpty(originalKnativeService)) {\n    knativeServiceUpdated = _.omit(originalKnativeService, [\n      'status',\n      'spec.template.metadata.name',\n    ]);\n  }\n  const knativeDeployResource = mergeData(knativeServiceUpdated || {}, newKnativeDeployResource);\n\n  return knativeDeployResource;\n};\n"]}]}