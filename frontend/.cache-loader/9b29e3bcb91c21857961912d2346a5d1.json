{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/graphs/utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/graphs/utils.ts","mtime":1616735742470},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nexport const getRangeVectorStats = (response) => {\n    const values = _.get(response, 'data.result[0].values');\n    return _.map(values, (value) => ({\n        x: new Date(value[0] * 1000),\n        y: parseFloat(value[1]),\n    }));\n};\nexport const getInstantVectorStats = (response, metric, humanize) => {\n    const results = _.get(response, 'data.result', []);\n    return results.map((r) => {\n        const y = parseFloat(_.get(r, 'value[1]'));\n        return {\n            label: humanize ? humanize(y).string : null,\n            x: _.get(r, ['metric', metric], ''),\n            y,\n            metric: r.metric,\n        };\n    });\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/graphs/utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/graphs/utils.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAM,WAAW,CAAC;AAK/B,MAAM,CAAC,MAAM,mBAAmB,GAAmB,CAAC,QAAQ,EAAE,EAAE;IAC9D,MAAM,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,uBAAuB,CAAC,CAAC;IACxD,OAAO,CAAC,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAC/B,CAAC,EAAE,IAAI,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC;QAC5B,CAAC,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;KACxB,CAAC,CAAC,CAAC;AACN,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAAqB,CAAC,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE;IACpF,MAAM,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC,QAAQ,EAAE,aAAa,EAAE,EAAE,CAAC,CAAC;IACnD,OAAO,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE;QACvB,MAAM,CAAC,GAAG,UAAU,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC;QAC3C,OAAO;YACL,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI;YAC3C,CAAC,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,CAAC,QAAQ,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC;YACnC,CAAC;YACD,MAAM,EAAE,CAAC,CAAC,MAAM;SACjB,CAAC;IACJ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import * as _ from 'lodash-es';\n\nimport { PrometheusResponse, DataPoint } from '.';\nimport { Humanize } from '../utils';\n\nexport const getRangeVectorStats: GetStats<Date> = (response) => {\n  const values = _.get(response, 'data.result[0].values');\n  return _.map(values, (value) => ({\n    x: new Date(value[0] * 1000),\n    y: parseFloat(value[1]),\n  }));\n};\n\nexport const getInstantVectorStats: GetStats<number> = (response, metric, humanize) => {\n  const results = _.get(response, 'data.result', []);\n  return results.map((r) => {\n    const y = parseFloat(_.get(r, 'value[1]'));\n    return {\n      label: humanize ? humanize(y).string : null,\n      x: _.get(r, ['metric', metric], ''),\n      y,\n      metric: r.metric,\n    };\n  });\n};\n\nexport type GetStats<X = Date | number | string> = {\n  (response: PrometheusResponse, metric?: string, humanize?: Humanize): DataPoint<X>[];\n};\n"]}]}