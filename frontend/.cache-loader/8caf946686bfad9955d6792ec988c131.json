{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/container.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/container.ts","mtime":1615298458760},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nconst PullPolicy = {\n    Always: {\n        id: 'Always',\n        label: 'Always Pull',\n        description: 'Pull down a new copy of the container image whenever a new pod is created.',\n        default: true,\n    },\n    IfNotPresent: {\n        id: 'IfNotPresent',\n        label: 'Pull If Needed',\n        description: 'If the container isn’t available locally, pull it down.',\n    },\n    Never: {\n        id: 'Never',\n        label: 'Never Pull',\n        description: \"Don't pull down a container image. \" +\n            \"If the correct container image doesn't exist locally, the pod will fail to start correctly.\",\n    },\n};\n// Parses the state from k8s container info field of a pod.\n// Returned object will always have a 'label' property,\n// but existence of other properties vary depending on the state.\nexport const getContainerState = (containerStatus) => {\n    const state = {\n        label: 'Unknown',\n    };\n    if (!containerStatus || !containerStatus.state) {\n        return state;\n    }\n    const keys = Object.keys(containerStatus.state);\n    if (_.isEmpty(keys)) {\n        return state;\n    }\n    const stateKey = keys[0];\n    _.assign(state, containerStatus.state[stateKey]);\n    state.label = _.startCase(stateKey);\n    state.value = stateKey;\n    return state;\n};\nexport const getContainerStatus = (pod, containerName) => {\n    const statuses = _.get(pod, 'status.containerStatuses');\n    const initStatuses = _.get(pod, 'status.initContainerStatuses');\n    const identity = (s) => s.name === containerName;\n    return _.find(statuses, identity) || _.find(initStatuses, identity);\n};\nconst getPullPolicy = (container) => _.find(PullPolicy, { id: _.get(container, 'imagePullPolicy') });\nexport const getPullPolicyLabel = (container) => _.get(getPullPolicy(container), 'label', '');\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/container.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/container.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAM,WAAW,CAAC;AAI/B,MAAM,UAAU,GAAG;IACjB,MAAM,EAAE;QACN,EAAE,EAAE,QAAQ;QACZ,KAAK,EAAE,aAAa;QACpB,WAAW,EAAE,4EAA4E;QACzF,OAAO,EAAE,IAAI;KACd;IACD,YAAY,EAAE;QACZ,EAAE,EAAE,cAAc;QAClB,KAAK,EAAE,gBAAgB;QACvB,WAAW,EAAE,yDAAyD;KACvE;IACD,KAAK,EAAE;QACL,EAAE,EAAE,OAAO;QACX,KAAK,EAAE,YAAY;QACnB,WAAW,EACT,qCAAqC;YACrC,6FAA6F;KAChG;CACF,CAAC;AAEF,2DAA2D;AAC3D,uDAAuD;AACvD,iEAAiE;AACjE,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,eAAgC,EAAO,EAAE;IACzE,MAAM,KAAK,GAAQ;QACjB,KAAK,EAAE,SAAS;KACjB,CAAC;IACF,IAAI,CAAC,eAAe,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE;QAC9C,OAAO,KAAK,CAAC;KACd;IAED,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;IAChD,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE;QACnB,OAAO,KAAK,CAAC;KACd;IAED,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,CAAC;IACzB,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,eAAe,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;IACjD,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IACpC,KAAK,CAAC,KAAK,GAAG,QAAQ,CAAC;IACvB,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,GAAY,EAAE,aAAqB,EAAmB,EAAE;IACzF,MAAM,QAAQ,GAAsB,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,0BAA0B,CAAC,CAAC;IAC3E,MAAM,YAAY,GAAsB,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,8BAA8B,CAAC,CAAC;IACnF,MAAM,QAAQ,GAAG,CAAC,CAAkB,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,aAAa,CAAC;IAClE,OAAO,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,QAAQ,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE,QAAQ,CAAC,CAAC;AACtE,CAAC,CAAC;AAEF,MAAM,aAAa,GAAG,CAAC,SAAwB,EAAE,EAAE,CACjD,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,GAAG,CAAC,SAAS,EAAE,iBAAiB,CAAC,EAAE,CAAC,CAAC;AAElE,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,SAAwB,EAAU,EAAE,CACrE,CAAC,CAAC,GAAG,CAAC,aAAa,CAAC,SAAS,CAAC,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC","sourcesContent":["import * as _ from 'lodash-es';\n\nimport { ContainerSpec, ContainerStatus, PodKind } from './';\n\nconst PullPolicy = {\n  Always: {\n    id: 'Always',\n    label: 'Always Pull',\n    description: 'Pull down a new copy of the container image whenever a new pod is created.',\n    default: true,\n  },\n  IfNotPresent: {\n    id: 'IfNotPresent',\n    label: 'Pull If Needed',\n    description: 'If the container isn’t available locally, pull it down.',\n  },\n  Never: {\n    id: 'Never',\n    label: 'Never Pull',\n    description:\n      \"Don't pull down a container image. \" +\n      \"If the correct container image doesn't exist locally, the pod will fail to start correctly.\",\n  },\n};\n\n// Parses the state from k8s container info field of a pod.\n// Returned object will always have a 'label' property,\n// but existence of other properties vary depending on the state.\nexport const getContainerState = (containerStatus: ContainerStatus): any => {\n  const state: any = {\n    label: 'Unknown',\n  };\n  if (!containerStatus || !containerStatus.state) {\n    return state;\n  }\n\n  const keys = Object.keys(containerStatus.state);\n  if (_.isEmpty(keys)) {\n    return state;\n  }\n\n  const stateKey = keys[0];\n  _.assign(state, containerStatus.state[stateKey]);\n  state.label = _.startCase(stateKey);\n  state.value = stateKey;\n  return state;\n};\n\nexport const getContainerStatus = (pod: PodKind, containerName: string): ContainerStatus => {\n  const statuses: ContainerStatus[] = _.get(pod, 'status.containerStatuses');\n  const initStatuses: ContainerStatus[] = _.get(pod, 'status.initContainerStatuses');\n  const identity = (s: ContainerStatus) => s.name === containerName;\n  return _.find(statuses, identity) || _.find(initStatuses, identity);\n};\n\nconst getPullPolicy = (container: ContainerSpec) =>\n  _.find(PullPolicy, { id: _.get(container, 'imagePullPolicy') });\n\nexport const getPullPolicyLabel = (container: ContainerSpec): string =>\n  _.get(getPullPolicy(container), 'label', '');\n"]}]}