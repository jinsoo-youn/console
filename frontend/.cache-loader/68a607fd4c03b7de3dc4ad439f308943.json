{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/line-buffer.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/line-buffer.ts","mtime":1616735742480},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["export const LINE_PATTERN = /^.*(\\n|$)/gm;\nexport class LineBuffer {\n    constructor(maxSize) {\n        this._maxSize = maxSize;\n        this._buffer = [];\n        this._tail = '';\n    }\n    ingest(text) {\n        const lines = text.match(LINE_PATTERN);\n        let lineCount = 0;\n        lines.forEach((line) => {\n            const next = `${this._tail}${line}`;\n            if (/\\n$/.test(line)) {\n                if (this._buffer.length === this._maxSize) {\n                    this._buffer.shift();\n                }\n                this._buffer.push(next);\n                lineCount++;\n                this._tail = '';\n            }\n            else {\n                this._tail = next;\n            }\n        });\n        return lineCount;\n    }\n    clear() {\n        this._buffer = [];\n    }\n    getLines() {\n        return this._buffer;\n    }\n    getBlob(options) {\n        return new Blob([this._buffer.join('')], options);\n    }\n    length() {\n        return this._buffer.length;\n    }\n}\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/line-buffer.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/line-buffer.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,MAAM,YAAY,GAAG,aAAa,CAAC;AAE1C,MAAM,OAAO,UAAU;IAKrB,YAAY,OAAO;QACjB,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;IAClB,CAAC;IAED,MAAM,CAAC,IAAI;QACT,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC;QACvC,IAAI,SAAS,GAAG,CAAC,CAAC;QAClB,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,EAAE,EAAE;YACrB,MAAM,IAAI,GAAG,GAAG,IAAI,CAAC,KAAK,GAAG,IAAI,EAAE,CAAC;YACpC,IAAI,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE;gBACpB,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,KAAK,IAAI,CAAC,QAAQ,EAAE;oBACzC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;iBACtB;gBACD,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACxB,SAAS,EAAE,CAAC;gBACZ,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;aACjB;iBAAM;gBACL,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;aACnB;QACH,CAAC,CAAC,CAAC;QACH,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,KAAK;QACH,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;IACpB,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAED,OAAO,CAAC,OAAO;QACb,OAAO,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;IACpD,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;IAC7B,CAAC;CACF","sourcesContent":["export const LINE_PATTERN = /^.*(\\n|$)/gm;\n\nexport class LineBuffer {\n  private _maxSize: number;\n  private _buffer: string[];\n  private _tail: string;\n\n  constructor(maxSize) {\n    this._maxSize = maxSize;\n    this._buffer = [];\n    this._tail = '';\n  }\n\n  ingest(text): number {\n    const lines = text.match(LINE_PATTERN);\n    let lineCount = 0;\n    lines.forEach((line) => {\n      const next = `${this._tail}${line}`;\n      if (/\\n$/.test(line)) {\n        if (this._buffer.length === this._maxSize) {\n          this._buffer.shift();\n        }\n        this._buffer.push(next);\n        lineCount++;\n        this._tail = '';\n      } else {\n        this._tail = next;\n      }\n    });\n    return lineCount;\n  }\n\n  clear(): void {\n    this._buffer = [];\n  }\n\n  getLines(): string[] {\n    return this._buffer;\n  }\n\n  getBlob(options): Blob {\n    return new Blob([this._buffer.join('')], options);\n  }\n\n  length(): number {\n    return this._buffer.length;\n  }\n}\n"]}]}