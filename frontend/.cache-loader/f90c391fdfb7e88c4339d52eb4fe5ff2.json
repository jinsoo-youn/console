{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-topology/TaskListNode.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-topology/TaskListNode.tsx","mtime":1616735742390},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as FocusTrap from 'focus-trap-react';\nimport { Button, Flex, FlexItem, FlexModifiers } from '@patternfly/react-core';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport Popper from '@console/shared/src/components/popper/Popper';\nimport { KebabItem } from '@console/internal/components/utils';\nimport { observer } from '@console/topology';\nimport './TaskListNode.scss';\nconst taskToOption = (task, callback) => {\n    const { metadata: { name }, } = task;\n    return {\n        label: name,\n        callback: () => {\n            callback(task);\n        },\n    };\n};\nconst TaskListNode = ({ element, unselectedText }) => {\n    const triggerRef = React.useRef(null);\n    const [isMenuOpen, setMenuOpen] = React.useState(false);\n    const { height, width } = element.getBounds();\n    const { clusterTaskList, namespaceTaskList, onNewTask, onRemoveTask } = element.getData();\n    const options = [\n        ...namespaceTaskList.map((task) => taskToOption(task, onNewTask)),\n        ...clusterTaskList.map((task) => taskToOption(task, onNewTask)),\n    ];\n    return (React.createElement(\"foreignObject\", { width: width, height: height, className: \"odc-task-list-node\" },\n        React.createElement(\"div\", { className: \"odc-task-list-node__trigger-background\", ref: triggerRef },\n            React.createElement(Button, { className: \"odc-task-list-node__trigger\", isDisabled: options.length === 0, onClick: () => {\n                    setMenuOpen(!isMenuOpen);\n                }, variant: \"control\" }, options.length === 0 ? ('No Tasks') : (React.createElement(Flex, { breakpointMods: [\n                    { modifier: FlexModifiers.nowrap },\n                    { modifier: FlexModifiers['space-items-none'] },\n                ] },\n                React.createElement(FlexItem, { className: \"odc-task-list-node__label\", breakpointMods: [{ modifier: FlexModifiers.grow }] }, unselectedText || 'Select task'),\n                React.createElement(FlexItem, null,\n                    React.createElement(CaretDownIcon, null)))))),\n        React.createElement(Popper, { open: isMenuOpen, placement: \"bottom-start\", closeOnEsc: true, closeOnOutsideClick: true, onRequestClose: (e) => {\n                var _a;\n                if (!e || !((_a = triggerRef === null || triggerRef === void 0 ? void 0 : triggerRef.current) === null || _a === void 0 ? void 0 : _a.contains(e.target))) {\n                    setMenuOpen(false);\n                }\n            }, reference: () => triggerRef.current },\n            React.createElement(FocusTrap, { focusTrapOptions: { clickOutsideDeactivates: true, returnFocusOnDeactivate: false } },\n                React.createElement(\"div\", { className: \"pf-c-dropdown pf-m-expanded\" },\n                    React.createElement(\"ul\", { className: \"pf-c-dropdown__menu pf-m-align-right oc-kebab__popper-items odc-task-list-node__list-items\" },\n                        options.map((option) => (React.createElement(\"li\", { key: option.label },\n                            React.createElement(KebabItem, { option: option, onClick: () => {\n                                    option.callback && option.callback();\n                                } })))),\n                        onRemoveTask && (React.createElement(React.Fragment, null,\n                            React.createElement(\"li\", null,\n                                React.createElement(\"hr\", { className: \"odc-task-list-node__divider\" })),\n                            React.createElement(\"li\", null,\n                                React.createElement(KebabItem, { option: { label: 'Delete Task', callback: onRemoveTask }, onClick: onRemoveTask }))))))))));\n};\nexport default observer(TaskListNode);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-topology/TaskListNode.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-topology/TaskListNode.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as FocusTrap from 'focus-trap-react';\nimport { Button, Flex, FlexItem, FlexModifiers } from '@patternfly/react-core';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport Popper from '@console/shared/src/components/popper/Popper';\nimport { KebabItem, KebabOption } from '@console/internal/components/utils';\nimport { observer, Node, NodeModel } from '@console/topology';\nimport { PipelineResourceTask } from '../../../utils/pipeline-augment';\nimport { NewTaskNodeCallback, TaskListNodeModelData } from './types';\n\nimport './TaskListNode.scss';\n\nconst taskToOption = (task: PipelineResourceTask, callback: NewTaskNodeCallback): KebabOption => {\n  const {\n    metadata: { name },\n  } = task;\n\n  return {\n    label: name,\n    callback: () => {\n      callback(task);\n    },\n  };\n};\n\ntype TaskListNodeProps = {\n  element: Node<NodeModel, TaskListNodeModelData>;\n  unselectedText?: string;\n};\n\nconst TaskListNode: React.FC<TaskListNodeProps> = ({ element, unselectedText }) => {\n  const triggerRef = React.useRef(null);\n  const [isMenuOpen, setMenuOpen] = React.useState(false);\n  const { height, width } = element.getBounds();\n  const { clusterTaskList, namespaceTaskList, onNewTask, onRemoveTask } = element.getData();\n\n  const options = [\n    ...namespaceTaskList.map((task) => taskToOption(task, onNewTask)),\n    ...clusterTaskList.map((task) => taskToOption(task, onNewTask)),\n  ];\n\n  return (\n    <foreignObject width={width} height={height} className=\"odc-task-list-node\">\n      <div className=\"odc-task-list-node__trigger-background\" ref={triggerRef}>\n        <Button\n          className=\"odc-task-list-node__trigger\"\n          isDisabled={options.length === 0}\n          onClick={() => {\n            setMenuOpen(!isMenuOpen);\n          }}\n          variant=\"control\"\n        >\n          {options.length === 0 ? (\n            'No Tasks'\n          ) : (\n            <Flex\n              breakpointMods={[\n                { modifier: FlexModifiers.nowrap },\n                { modifier: FlexModifiers['space-items-none'] },\n              ]}\n            >\n              <FlexItem\n                className=\"odc-task-list-node__label\"\n                breakpointMods={[{ modifier: FlexModifiers.grow }]}\n              >\n                {unselectedText || 'Select task'}\n              </FlexItem>\n              <FlexItem>\n                <CaretDownIcon />\n              </FlexItem>\n            </Flex>\n          )}\n        </Button>\n      </div>\n      <Popper\n        open={isMenuOpen}\n        placement=\"bottom-start\"\n        closeOnEsc\n        closeOnOutsideClick\n        onRequestClose={(e) => {\n          if (!e || !triggerRef?.current?.contains(e.target as Element)) {\n            setMenuOpen(false);\n          }\n        }}\n        reference={() => triggerRef.current}\n      >\n        <FocusTrap\n          focusTrapOptions={{ clickOutsideDeactivates: true, returnFocusOnDeactivate: false }}\n        >\n          <div className=\"pf-c-dropdown pf-m-expanded\">\n            <ul className=\"pf-c-dropdown__menu pf-m-align-right oc-kebab__popper-items odc-task-list-node__list-items\">\n              {options.map((option) => (\n                <li key={option.label}>\n                  <KebabItem\n                    option={option}\n                    onClick={() => {\n                      option.callback && option.callback();\n                    }}\n                  />\n                </li>\n              ))}\n              {onRemoveTask && (\n                <>\n                  <li>\n                    <hr className=\"odc-task-list-node__divider\" />\n                  </li>\n                  <li>\n                    <KebabItem\n                      option={{ label: 'Delete Task', callback: onRemoveTask }}\n                      onClick={onRemoveTask}\n                    />\n                  </li>\n                </>\n              )}\n            </ul>\n          </div>\n        </FocusTrap>\n      </Popper>\n    </foreignObject>\n  );\n};\n\nexport default observer(TaskListNode);\n"]}]}