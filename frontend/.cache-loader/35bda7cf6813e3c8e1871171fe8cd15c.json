{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/constants/vm/storage/disk-type.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/constants/vm/storage/disk-type.ts","mtime":1616735742420},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["/* eslint-disable lines-between-class-members */\nimport * as _ from 'lodash';\nimport { ObjectEnum } from '../../object-enum';\nimport { DiskBus } from './disk-bus';\nexport class DiskType extends ObjectEnum {\n    constructor(value, label, supportedDiskBuses) {\n        super(value);\n        this.isBusSupported = (bus) => this.supportedDiskBuses.has(bus);\n        this.label = label || _.capitalize(value);\n        this.supportedDiskBuses = new Set(supportedDiskBuses || DiskBus.getAll());\n    }\n    // Overide ObjectEnum's default toString method.\n    toString() {\n        return this.label;\n    }\n}\nDiskType.DISK = new DiskType('disk');\nDiskType.CDROM = new DiskType('cdrom', 'CD-ROM', DiskBus.getAll().filter((bus) => bus !== DiskBus.VIRTIO));\nDiskType.FLOPPY = new DiskType('floppy');\nDiskType.LUN = new DiskType('lun', 'LUN');\nDiskType.ALL = Object.freeze(ObjectEnum.getAllClassEnumProperties(DiskType));\nDiskType.stringMapper = DiskType.ALL.reduce((accumulator, diskType) => (Object.assign(Object.assign({}, accumulator), { [diskType.value]: diskType })), {});\nDiskType.getAll = () => DiskType.ALL;\nDiskType.fromString = (model) => DiskType.stringMapper[model];\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/constants/vm/storage/disk-type.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/constants/vm/storage/disk-type.ts"],"names":[],"mappings":"AAAA,gDAAgD;AAChD,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,UAAU,EAAE,MAAM,mBAAmB,CAAC;AAC/C,OAAO,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AAErC,MAAM,OAAO,QAAS,SAAQ,UAAkB;IAa9C,YAAsB,KAAa,EAAE,KAAc,EAAE,kBAA8B;QACjF,KAAK,CAAC,KAAK,CAAC,CAAC;QAqBf,mBAAc,GAAG,CAAC,GAAY,EAAE,EAAE,CAAC,IAAI,CAAC,kBAAkB,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;QApBlE,IAAI,CAAC,KAAK,GAAG,KAAK,IAAI,CAAC,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;QAC1C,IAAI,CAAC,kBAAkB,GAAG,IAAI,GAAG,CAAU,kBAAkB,IAAI,OAAO,CAAC,MAAM,EAAE,CAAC,CAAC;IACrF,CAAC;IAoBD,gDAAgD;IAChD,QAAQ;QACN,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;;AAvCe,aAAI,GAAG,IAAI,QAAQ,CAAC,MAAM,CAAC,CAAC;AAC5B,cAAK,GAAG,IAAI,QAAQ,CAClC,OAAO,EACP,QAAQ,EACR,OAAO,CAAC,MAAM,EAAE,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,KAAK,OAAO,CAAC,MAAM,CAAC,CACzD,CAAC;AACc,eAAM,GAAG,IAAI,QAAQ,CAAC,QAAQ,CAAC,CAAC;AAChC,YAAG,GAAG,IAAI,QAAQ,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;AAWzB,YAAG,GAAG,MAAM,CAAC,MAAM,CACzC,UAAU,CAAC,yBAAyB,CAAW,QAAQ,CAAC,CACzD,CAAC;AAEsB,qBAAY,GAAG,QAAQ,CAAC,GAAG,CAAC,MAAM,CACxD,CAAC,WAAW,EAAE,QAAkB,EAAE,EAAE,CAAC,iCAChC,WAAW,KACd,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,QAAQ,IAC1B,EACF,EAAE,CACH,CAAC;AAEK,eAAM,GAAG,GAAG,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC;AAE5B,mBAAU,GAAG,CAAC,KAAa,EAAY,EAAE,CAAC,QAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC","sourcesContent":["/* eslint-disable lines-between-class-members */\nimport * as _ from 'lodash';\nimport { ObjectEnum } from '../../object-enum';\nimport { DiskBus } from './disk-bus';\n\nexport class DiskType extends ObjectEnum<string> {\n  static readonly DISK = new DiskType('disk');\n  static readonly CDROM = new DiskType(\n    'cdrom',\n    'CD-ROM',\n    DiskBus.getAll().filter((bus) => bus !== DiskBus.VIRTIO), // kubevirt removed support for virtIO\n  );\n  static readonly FLOPPY = new DiskType('floppy');\n  static readonly LUN = new DiskType('lun', 'LUN');\n\n  private readonly label: string;\n  private readonly supportedDiskBuses: Set<DiskBus>;\n\n  protected constructor(value: string, label?: string, supportedDiskBuses?: DiskBus[]) {\n    super(value);\n    this.label = label || _.capitalize(value);\n    this.supportedDiskBuses = new Set<DiskBus>(supportedDiskBuses || DiskBus.getAll());\n  }\n\n  private static readonly ALL = Object.freeze(\n    ObjectEnum.getAllClassEnumProperties<DiskType>(DiskType),\n  );\n\n  private static readonly stringMapper = DiskType.ALL.reduce(\n    (accumulator, diskType: DiskType) => ({\n      ...accumulator,\n      [diskType.value]: diskType,\n    }),\n    {},\n  );\n\n  static getAll = () => DiskType.ALL;\n\n  static fromString = (model: string): DiskType => DiskType.stringMapper[model];\n\n  isBusSupported = (bus: DiskBus) => this.supportedDiskBuses.has(bus);\n\n  // Overide ObjectEnum's default toString method.\n  toString() {\n    return this.label;\n  }\n}\n"]}]}