{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/dashboards/table.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/dashboards/table.tsx","mtime":1615298458740},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { sortable, Table as PFTable, TableBody, TableGridBreakpoint, TableHeader, TableVariant, } from '@patternfly/react-table';\nimport ErrorAlert from '@console/shared/src/components/alerts/error';\nimport { formatNumber } from './format';\nimport { getPrometheusURL, PrometheusEndpoint } from '../../graphs/helpers';\nimport { EmptyBox, usePoll, useSafeFetch } from '../../utils';\nimport { TablePagination } from '../metrics';\n// Get the columns from the panel styles. Filters out hidden columns and orders\n// them so the label columns are displayed first.\nconst getColumns = (styles) => {\n    const labelColumns = [];\n    const valueColumns = [];\n    styles.forEach((col) => {\n        // Remove hidden or regex columns.\n        if (col.type === 'hidden' || col.pattern.startsWith('/') || !col.alias) {\n            return;\n        }\n        if (col.pattern.startsWith('Value #')) {\n            valueColumns.push(col);\n        }\n        else {\n            labelColumns.push(Object.assign(Object.assign({}, col), { className: 'monitoring-dashboards__label-column-header' }));\n        }\n    });\n    // Show non-value columns first.\n    return [...labelColumns, ...valueColumns];\n};\nconst paginationOptions = [5, 10, 20, 50, 100].map((n) => ({\n    title: n.toString(),\n    value: n,\n}));\nconst Table = ({ panel, pollInterval, queries }) => {\n    const [error, setError] = React.useState();\n    const [isLoading, setLoading] = React.useState(true);\n    const [data, setData] = React.useState();\n    const [page, setPage] = React.useState(1);\n    const [perPage, setPerPage] = React.useState(5);\n    const [sortBy, setSortBy] = React.useState({ index: 0, direction: 'asc' });\n    const onSort = (e, index, direction) => setSortBy({ index, direction });\n    const safeFetch = React.useCallback(useSafeFetch(), []);\n    const tick = () => {\n        Promise.all(queries.map((q) => safeFetch(getPrometheusURL({ endpoint: PrometheusEndpoint.QUERY, query: q }))))\n            .then((responses) => {\n            setError(undefined);\n            setLoading(false);\n            // Note: This makes the following assumptions about the data:\n            // 1. The transform is `table`\n            // 2. The value will be an instance vector (single value).\n            // 3. The time column is hidden.\n            // The Grafana implementation is much more involved. See\n            //   https://grafana.com/docs/grafana/latest/features/panels/table_panel/#merge-multiple-queries-per-table\n            setData(responses.reduce((acc, response, i) => {\n                const id = panel.targets[i].refId;\n                response.data.result.forEach(({ metric, value }) => {\n                    const label = _.first(Object.keys(metric));\n                    const tag = metric[label];\n                    if (!acc[tag]) {\n                        acc[tag] = Object.assign({}, metric);\n                    }\n                    acc[tag][`Value #${id}`] = value[1] || '';\n                });\n                return acc;\n            }, {}));\n        })\n            .catch((err) => {\n            if (err.name !== 'AbortError') {\n                setError(_.get(err, 'json.error', err.message));\n                setLoading(false);\n                setData(undefined);\n            }\n        });\n    };\n    usePoll(tick, pollInterval, queries);\n    if (isLoading) {\n        return React.createElement(\"div\", { className: \"loading-skeleton--table\" });\n    }\n    if (error) {\n        return React.createElement(ErrorAlert, { message: error });\n    }\n    if (_.isEmpty(data)) {\n        return React.createElement(EmptyBox, { label: \"Data\" });\n    }\n    const columns = getColumns(panel.styles);\n    // Sort the data.\n    const sort = (row) => {\n        const { pattern, type } = columns[sortBy.index];\n        const val = row[pattern];\n        if (type !== 'number') {\n            return val;\n        }\n        if (_.isNil(val)) {\n            return Number.MIN_VALUE;\n        }\n        const num = Number(val);\n        // Some columns styles claim to be numbers, but have string data. Still sort those as strings.\n        return _.isFinite(num) ? num : val;\n    };\n    const sortedData = _.orderBy(data, [sort], [sortBy.direction]);\n    const visibleData = sortedData.slice((page - 1) * perPage, page * perPage);\n    // Format the table rows.\n    const rows = visibleData.map((values) => {\n        return columns.reduce((acc, { type, decimals = 2, pattern, unit = '' }) => {\n            const value = values[pattern];\n            switch (type) {\n                case 'number':\n                    acc.push(formatNumber(value, decimals, unit));\n                    break;\n                default:\n                    acc.push(value || '-');\n            }\n            return acc;\n        }, []);\n    });\n    const headers = columns.map(({ alias: title, className }) => (Object.assign({ title, transforms: [sortable] }, (className ? { props: { className } } : {}))));\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: \"monitoring-dashboards__table-container\" },\n            React.createElement(PFTable, { \"aria-label\": \"query results table\", cells: headers, className: \"monitoring-dashboards__table\", gridBreakPoint: TableGridBreakpoint.none, onSort: onSort, rows: rows, sortBy: sortBy, variant: TableVariant.compact },\n                React.createElement(TableHeader, null),\n                React.createElement(TableBody, null))),\n        React.createElement(TablePagination, { itemCount: sortedData.length, paginationOptions: paginationOptions, page: page, perPage: perPage, setPage: setPage, setPerPage: setPerPage })));\n};\nexport default Table;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/dashboards/table.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/dashboards/table.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport {\n  ISortBy,\n  sortable,\n  Table as PFTable,\n  TableBody,\n  TableGridBreakpoint,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\n\nimport ErrorAlert from '@console/shared/src/components/alerts/error';\n\nimport { formatNumber } from './format';\nimport { ColumnStyle, Panel } from './types';\nimport { PrometheusResponse } from '../../graphs';\nimport { getPrometheusURL, PrometheusEndpoint } from '../../graphs/helpers';\nimport { EmptyBox, usePoll, useSafeFetch } from '../../utils';\nimport { TablePagination } from '../metrics';\n\ntype AugmentedColumnStyle = ColumnStyle & {\n  className?: string;\n};\n\n// Get the columns from the panel styles. Filters out hidden columns and orders\n// them so the label columns are displayed first.\nconst getColumns = (styles: ColumnStyle[]): AugmentedColumnStyle[] => {\n  const labelColumns = [];\n  const valueColumns = [];\n  styles.forEach((col: ColumnStyle) => {\n    // Remove hidden or regex columns.\n    if (col.type === 'hidden' || col.pattern.startsWith('/') || !col.alias) {\n      return;\n    }\n\n    if (col.pattern.startsWith('Value #')) {\n      valueColumns.push(col);\n    } else {\n      labelColumns.push({\n        ...col,\n        className: 'monitoring-dashboards__label-column-header',\n      });\n    }\n  });\n\n  // Show non-value columns first.\n  return [...labelColumns, ...valueColumns];\n};\n\nconst paginationOptions = [5, 10, 20, 50, 100].map((n) => ({\n  title: n.toString(),\n  value: n,\n}));\n\nconst Table: React.FC<Props> = ({ panel, pollInterval, queries }) => {\n  const [error, setError] = React.useState();\n  const [isLoading, setLoading] = React.useState(true);\n  const [data, setData] = React.useState();\n  const [page, setPage] = React.useState(1);\n  const [perPage, setPerPage] = React.useState(5);\n  const [sortBy, setSortBy] = React.useState<ISortBy>({ index: 0, direction: 'asc' });\n  const onSort = (e, index: ISortBy['index'], direction: ISortBy['direction']) =>\n    setSortBy({ index, direction });\n  const safeFetch = React.useCallback(useSafeFetch(), []);\n\n  const tick = () => {\n    Promise.all(\n      queries.map((q) =>\n        safeFetch(getPrometheusURL({ endpoint: PrometheusEndpoint.QUERY, query: q })),\n      ),\n    )\n      .then((responses: PrometheusResponse[]) => {\n        setError(undefined);\n        setLoading(false);\n        // Note: This makes the following assumptions about the data:\n        // 1. The transform is `table`\n        // 2. The value will be an instance vector (single value).\n        // 3. The time column is hidden.\n        // The Grafana implementation is much more involved. See\n        //   https://grafana.com/docs/grafana/latest/features/panels/table_panel/#merge-multiple-queries-per-table\n        setData(\n          responses.reduce((acc, response, i: number) => {\n            const id = panel.targets[i].refId;\n            response.data.result.forEach(({ metric, value }) => {\n              const label = _.first(Object.keys(metric));\n              const tag = metric[label];\n              if (!acc[tag]) {\n                acc[tag] = { ...metric };\n              }\n              acc[tag][`Value #${id}`] = value[1] || '';\n            });\n            return acc;\n          }, {} as any),\n        );\n      })\n      .catch((err) => {\n        if (err.name !== 'AbortError') {\n          setError(_.get(err, 'json.error', err.message));\n          setLoading(false);\n          setData(undefined);\n        }\n      });\n  };\n\n  usePoll(tick, pollInterval, queries);\n  if (isLoading) {\n    return <div className=\"loading-skeleton--table\" />;\n  }\n  if (error) {\n    return <ErrorAlert message={error} />;\n  }\n  if (_.isEmpty(data)) {\n    return <EmptyBox label=\"Data\" />;\n  }\n\n  const columns: AugmentedColumnStyle[] = getColumns(panel.styles);\n\n  // Sort the data.\n  const sort = (row) => {\n    const { pattern, type } = columns[sortBy.index];\n    const val = row[pattern];\n    if (type !== 'number') {\n      return val;\n    }\n    if (_.isNil(val)) {\n      return Number.MIN_VALUE;\n    }\n    const num = Number(val);\n    // Some columns styles claim to be numbers, but have string data. Still sort those as strings.\n    return _.isFinite(num) ? num : val;\n  };\n  const sortedData = _.orderBy(data, [sort], [sortBy.direction]);\n  const visibleData = sortedData.slice((page - 1) * perPage, page * perPage);\n\n  // Format the table rows.\n  const rows: string[][] = visibleData.map((values: { [key: string]: string }) => {\n    return columns.reduce((acc: string[], { type, decimals = 2, pattern, unit = '' }) => {\n      const value = values[pattern];\n      switch (type) {\n        case 'number':\n          acc.push(formatNumber(value, decimals, unit));\n          break;\n        default:\n          acc.push(value || '-');\n      }\n      return acc;\n    }, []);\n  });\n\n  const headers = columns.map(({ alias: title, className }) => ({\n    title,\n    transforms: [sortable],\n    ...(className ? { props: { className } } : {}),\n  }));\n\n  return (\n    <>\n      <div className=\"monitoring-dashboards__table-container\">\n        <PFTable\n          aria-label=\"query results table\"\n          cells={headers}\n          className=\"monitoring-dashboards__table\"\n          gridBreakPoint={TableGridBreakpoint.none}\n          onSort={onSort}\n          rows={rows}\n          sortBy={sortBy}\n          variant={TableVariant.compact}\n        >\n          <TableHeader />\n          <TableBody />\n        </PFTable>\n      </div>\n      <TablePagination\n        itemCount={sortedData.length}\n        paginationOptions={paginationOptions}\n        page={page}\n        perPage={perPage}\n        setPage={setPage}\n        setPerPage={setPerPage}\n      />\n    </>\n  );\n};\n\ntype Props = {\n  panel: Panel;\n  pollInterval: number;\n  queries: string[];\n};\n\nexport default Table;\n"]}]}