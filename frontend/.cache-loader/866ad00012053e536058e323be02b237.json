{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/formik-fields/ResourceLimitField.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/formik-fields/ResourceLimitField.tsx","mtime":1616735742370},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport { useField, useFormikContext } from 'formik';\nimport { RequestSizeInput } from '@console/internal/components/utils';\nimport { FormGroup } from '@patternfly/react-core';\nimport { getFieldId } from './field-utils';\nimport { useFormikValidationFix } from '../../hooks';\nconst ResourceLimitField = (_a) => {\n    var { label, unitName, unitOptions, defaultUnitSize, helpText } = _a, props = __rest(_a, [\"label\", \"unitName\", \"unitOptions\", \"defaultUnitSize\", \"helpText\"]);\n    const [field, { touched, error }] = useField(props.name);\n    const { setFieldValue, setFieldTouched } = useFormikContext();\n    const fieldId = getFieldId(props.name, 'resource-limit');\n    const isValid = !(touched && error);\n    const errorMessage = !isValid ? error : '';\n    useFormikValidationFix(field.value);\n    return (React.createElement(FormGroup, { fieldId: fieldId, label: label, helperText: helpText, helperTextInvalid: errorMessage, isValid: isValid, isRequired: props.required },\n        React.createElement(RequestSizeInput, Object.assign({}, props, { onChange: (val) => {\n                setFieldValue(props.name, val.value);\n                setFieldTouched(props.name, true);\n                setFieldValue(unitName, val.unit);\n            }, dropdownUnits: unitOptions, defaultRequestSizeUnit: defaultUnitSize, defaultRequestSizeValue: field.value, describedBy: `${fieldId}-helper` }))));\n};\nexport default ResourceLimitField;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/formik-fields/ResourceLimitField.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/formik-fields/ResourceLimitField.tsx"],"names":[],"mappings":";;;;;;;;;;;AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,QAAQ,EAAE,gBAAgB,EAAgB,MAAM,QAAQ,CAAC;AAClE,OAAO,EAAE,gBAAgB,EAAE,MAAM,oCAAoC,CAAC;AACtE,OAAO,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AAEnD,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,sBAAsB,EAAE,MAAM,aAAa,CAAC;AAErD,MAAM,kBAAkB,GAAsC,CAAC,EAO9D,EAAE,EAAE;QAP0D,EAC7D,KAAK,EACL,QAAQ,EACR,WAAW,EACX,eAAe,EACf,QAAQ,OAET,EADC,uFAAQ;IAER,MAAM,CAAC,KAAK,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IACzD,MAAM,EAAE,aAAa,EAAE,eAAe,EAAE,GAAG,gBAAgB,EAAgB,CAAC;IAC5E,MAAM,OAAO,GAAG,UAAU,CAAC,KAAK,CAAC,IAAI,EAAE,gBAAgB,CAAC,CAAC;IACzD,MAAM,OAAO,GAAG,CAAC,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;IACpC,MAAM,YAAY,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;IAE3C,sBAAsB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAEpC,OAAO,CACL,oBAAC,SAAS,IACR,OAAO,EAAE,OAAO,EAChB,KAAK,EAAE,KAAK,EACZ,UAAU,EAAE,QAAQ,EACpB,iBAAiB,EAAE,YAAY,EAC/B,OAAO,EAAE,OAAO,EAChB,UAAU,EAAE,KAAK,CAAC,QAAQ;QAE1B,oBAAC,gBAAgB,oBACX,KAAK,IACT,QAAQ,EAAE,CAAC,GAAG,EAAE,EAAE;gBAChB,aAAa,CAAC,KAAK,CAAC,IAAI,EAAE,GAAG,CAAC,KAAK,CAAC,CAAC;gBACrC,eAAe,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;gBAClC,aAAa,CAAC,QAAQ,EAAE,GAAG,CAAC,IAAI,CAAC,CAAC;YACpC,CAAC,EACD,aAAa,EAAE,WAAW,EAC1B,sBAAsB,EAAE,eAAe,EACvC,uBAAuB,EAAE,KAAK,CAAC,KAAK,EACpC,WAAW,EAAE,GAAG,OAAO,SAAS,IAChC,CACQ,CACb,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,kBAAkB,CAAC","sourcesContent":["import * as React from 'react';\nimport { useField, useFormikContext, FormikValues } from 'formik';\nimport { RequestSizeInput } from '@console/internal/components/utils';\nimport { FormGroup } from '@patternfly/react-core';\nimport { ResourceLimitFieldProps } from './field-types';\nimport { getFieldId } from './field-utils';\nimport { useFormikValidationFix } from '../../hooks';\n\nconst ResourceLimitField: React.FC<ResourceLimitFieldProps> = ({\n  label,\n  unitName,\n  unitOptions,\n  defaultUnitSize,\n  helpText,\n  ...props\n}) => {\n  const [field, { touched, error }] = useField(props.name);\n  const { setFieldValue, setFieldTouched } = useFormikContext<FormikValues>();\n  const fieldId = getFieldId(props.name, 'resource-limit');\n  const isValid = !(touched && error);\n  const errorMessage = !isValid ? error : '';\n\n  useFormikValidationFix(field.value);\n\n  return (\n    <FormGroup\n      fieldId={fieldId}\n      label={label}\n      helperText={helpText}\n      helperTextInvalid={errorMessage}\n      isValid={isValid}\n      isRequired={props.required}\n    >\n      <RequestSizeInput\n        {...props}\n        onChange={(val) => {\n          setFieldValue(props.name, val.value);\n          setFieldTouched(props.name, true);\n          setFieldValue(unitName, val.unit);\n        }}\n        dropdownUnits={unitOptions}\n        defaultRequestSizeUnit={defaultUnitSize}\n        defaultRequestSizeValue={field.value}\n        describedBy={`${fieldId}-helper`}\n      />\n    </FormGroup>\n  );\n};\n\nexport default ResourceLimitField;\n"]}]}