{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/formik-fields/item-selector-field/ItemSelectorField.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/formik-fields/item-selector-field/ItemSelectorField.tsx","mtime":1615298458600},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useField, useFormikContext } from 'formik';\nimport { LoadingInline } from '@console/internal/components/utils';\nimport { FormGroup } from '@patternfly/react-core';\nimport { getFieldId } from '@console/shared';\nimport SelectorCard from './SelectorCard';\nimport './ItemSelectorField.scss';\nconst ItemSelectorField = ({ itemList, name, loadingItems, recommended, onSelect, label, autoSelect, }) => {\n    const [selected, { error: selectedError, touched: selectedTouched }] = useField(name);\n    const { setFieldValue, setFieldTouched, validateForm } = useFormikContext();\n    const itemCount = _.keys(itemList).length;\n    const handleItemChange = React.useCallback((item) => {\n        setFieldValue(name, item);\n        setFieldTouched(name, true);\n        validateForm();\n        onSelect && onSelect(item);\n    }, [name, setFieldValue, setFieldTouched, validateForm, onSelect]);\n    React.useEffect(() => {\n        var _a;\n        if (!selected.value && itemCount === 1) {\n            const image = _.find(itemList);\n            handleItemChange(image.name);\n        }\n        if (!selected.value && recommended) {\n            handleItemChange(recommended);\n            setFieldTouched(name, false);\n        }\n        if (!selected.value && autoSelect && !_.isEmpty(itemList)) {\n            const image = _.get(_.keys(itemList), 0);\n            handleItemChange((_a = itemList[image]) === null || _a === void 0 ? void 0 : _a.name);\n        }\n    }, [\n        autoSelect,\n        itemCount,\n        itemList,\n        handleItemChange,\n        selected.value,\n        recommended,\n        name,\n        setFieldTouched,\n    ]);\n    if (itemCount === 1) {\n        return null;\n    }\n    const fieldId = getFieldId(name, 'itemselector');\n    const isValid = !(selectedTouched && selectedError);\n    const errorMessage = !isValid ? selectedError : '';\n    return (React.createElement(FormGroup, { fieldId: fieldId, helperTextInvalid: errorMessage, isValid: isValid, label: label, isRequired: true }, loadingItems ? (React.createElement(LoadingInline, null)) : (React.createElement(\"div\", { id: \"item-selector-field\", className: \"odc-item-selector-field\" }, _.values(itemList).map((item) => (React.createElement(SelectorCard, { key: item.name, title: item.title, iconUrl: item.iconUrl, name: item.name, displayName: item.displayName, selected: selected.value === item.name, recommended: recommended === item.name, onChange: handleItemChange })))))));\n};\nexport default ItemSelectorField;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/formik-fields/item-selector-field/ItemSelectorField.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/formik-fields/item-selector-field/ItemSelectorField.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useField, useFormikContext, FormikValues } from 'formik';\nimport { LoadingInline } from '@console/internal/components/utils';\nimport { FormGroup } from '@patternfly/react-core';\nimport { getFieldId } from '@console/shared';\nimport SelectorCard from './SelectorCard';\nimport './ItemSelectorField.scss';\n\ninterface Item {\n  name: string;\n  title: string;\n  displayName?: string;\n  iconUrl?: string;\n}\n\ninterface NormalizedItem {\n  [item: string]: Item;\n}\n\ninterface ItemSelectorFieldProps {\n  itemList: NormalizedItem;\n  name: string;\n  loadingItems?: boolean;\n  recommended?: string;\n  label?: string;\n  autoSelect?: boolean;\n  onSelect?: (name: string) => void;\n}\n\nconst ItemSelectorField: React.FC<ItemSelectorFieldProps> = ({\n  itemList,\n  name,\n  loadingItems,\n  recommended,\n  onSelect,\n  label,\n  autoSelect,\n}) => {\n  const [selected, { error: selectedError, touched: selectedTouched }] = useField(name);\n  const { setFieldValue, setFieldTouched, validateForm } = useFormikContext<FormikValues>();\n  const itemCount = _.keys(itemList).length;\n\n  const handleItemChange = React.useCallback(\n    (item: string) => {\n      setFieldValue(name, item);\n      setFieldTouched(name, true);\n      validateForm();\n      onSelect && onSelect(item);\n    },\n    [name, setFieldValue, setFieldTouched, validateForm, onSelect],\n  );\n\n  React.useEffect(() => {\n    if (!selected.value && itemCount === 1) {\n      const image = _.find(itemList);\n      handleItemChange(image.name);\n    }\n    if (!selected.value && recommended) {\n      handleItemChange(recommended);\n      setFieldTouched(name, false);\n    }\n    if (!selected.value && autoSelect && !_.isEmpty(itemList)) {\n      const image = _.get(_.keys(itemList), 0);\n      handleItemChange(itemList[image]?.name);\n    }\n  }, [\n    autoSelect,\n    itemCount,\n    itemList,\n    handleItemChange,\n    selected.value,\n    recommended,\n    name,\n    setFieldTouched,\n  ]);\n\n  if (itemCount === 1) {\n    return null;\n  }\n\n  const fieldId = getFieldId(name, 'itemselector');\n  const isValid = !(selectedTouched && selectedError);\n  const errorMessage = !isValid ? selectedError : '';\n\n  return (\n    <FormGroup\n      fieldId={fieldId}\n      helperTextInvalid={errorMessage}\n      isValid={isValid}\n      label={label}\n      isRequired\n    >\n      {loadingItems ? (\n        <LoadingInline />\n      ) : (\n        <div id=\"item-selector-field\" className=\"odc-item-selector-field\">\n          {_.values(itemList).map((item) => (\n            <SelectorCard\n              key={item.name}\n              title={item.title}\n              iconUrl={item.iconUrl}\n              name={item.name}\n              displayName={item.displayName}\n              selected={selected.value === item.name}\n              recommended={recommended === item.name}\n              onChange={handleItemChange}\n            />\n          ))}\n        </div>\n      )}\n    </FormGroup>\n  );\n};\n\nexport default ItemSelectorField;\n"]}]}