{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/cluster-settings.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/cluster-settings.ts","mtime":1616735742510},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport * as semver from 'semver';\nimport { ClusterVersionModel } from '../../models';\nimport { referenceForModel } from './k8s';\nimport { ClusterVersionConditionType, K8sResourceConditionStatus, } from '.';\nexport var ClusterUpdateStatus;\n(function (ClusterUpdateStatus) {\n    ClusterUpdateStatus[\"UpToDate\"] = \"Up to Date\";\n    ClusterUpdateStatus[\"UpdatesAvailable\"] = \"Updates Available\";\n    ClusterUpdateStatus[\"Updating\"] = \"Updating\";\n    ClusterUpdateStatus[\"Failing\"] = \"Failing\";\n    ClusterUpdateStatus[\"ErrorRetrieving\"] = \"Error Retrieving\";\n    ClusterUpdateStatus[\"Invalid\"] = \"Invalid Cluster Version\";\n})(ClusterUpdateStatus || (ClusterUpdateStatus = {}));\nexport const clusterVersionReference = referenceForModel(ClusterVersionModel);\nexport const getAvailableClusterUpdates = (cv) => {\n    return _.get(cv, 'status.availableUpdates', []);\n};\nexport const getAvailableClusterChannels = () => ({\n    'stable-4.5': 'stable-4.5',\n    'fast-4.5': 'fast-4.5',\n    'candidate-4.5': 'candidate-4.5',\n});\nexport const getDesiredClusterVersion = (cv) => {\n    return _.get(cv, 'status.desired.version');\n};\nexport const getClusterVersionChannel = (cv) => cv && cv.spec ? cv.spec.channel : undefined;\nexport const getLastCompletedUpdate = (cv) => {\n    const history = _.get(cv, 'status.history', []);\n    const lastCompleted = history.find((update) => update.state === 'Completed');\n    return lastCompleted && lastCompleted.version;\n};\nexport const getClusterVersionCondition = (cv, type, status = undefined) => {\n    const conditions = _.get(cv, 'status.conditions');\n    if (status) {\n        return _.find(conditions, { type, status });\n    }\n    return _.find(conditions, { type });\n};\nexport const isProgressing = (cv) => {\n    return !_.isEmpty(getClusterVersionCondition(cv, ClusterVersionConditionType.Progressing, K8sResourceConditionStatus.True));\n};\nexport const invalid = (cv) => {\n    return !_.isEmpty(getClusterVersionCondition(cv, ClusterVersionConditionType.Invalid, K8sResourceConditionStatus.True));\n};\nexport const failedToRetrieveUpdates = (cv) => {\n    return !_.isEmpty(getClusterVersionCondition(cv, ClusterVersionConditionType.RetrievedUpdates, K8sResourceConditionStatus.False));\n};\nexport const updateFailing = (cv) => {\n    return !_.isEmpty(getClusterVersionCondition(cv, ClusterVersionConditionType.Failing, K8sResourceConditionStatus.True));\n};\nexport const hasAvailableUpdates = (cv) => {\n    return !_.isEmpty(getAvailableClusterUpdates(cv));\n};\nexport const getClusterUpdateStatus = (cv) => {\n    if (invalid(cv)) {\n        return ClusterUpdateStatus.Invalid;\n    }\n    if (updateFailing(cv)) {\n        return ClusterUpdateStatus.Failing;\n    }\n    if (isProgressing(cv)) {\n        return ClusterUpdateStatus.Updating;\n    }\n    if (failedToRetrieveUpdates(cv)) {\n        return ClusterUpdateStatus.ErrorRetrieving;\n    }\n    return hasAvailableUpdates(cv)\n        ? ClusterUpdateStatus.UpdatesAvailable\n        : ClusterUpdateStatus.UpToDate;\n};\nexport const getK8sGitVersion = (k8sVersionResponse) => _.get(k8sVersionResponse, 'gitVersion');\nexport const getOpenShiftVersion = (cv) => {\n    const lastUpdate = _.get(cv, 'status.history[0]');\n    if (!lastUpdate) {\n        return null;\n    }\n    return lastUpdate.state === 'Partial' ? `Updating to ${lastUpdate.version}` : lastUpdate.version;\n};\nconst getCurrentVersion = (cv) => {\n    return _.get(cv, 'status.history[0].version') || _.get(cv, 'spec.desiredUpdate.version');\n};\nexport const getReportBugLink = (cv) => {\n    const version = getCurrentVersion(cv);\n    const parsed = semver.parse(version);\n    if (!parsed) {\n        return null;\n    }\n    // Show a Bugzilla link for prerelease versions and a support case link for supported versions.\n    const { major, minor, prerelease } = parsed;\n    const bugzillaVersion = major === 4 && minor <= 3 ? `${major}.${minor}.0` : `${major}.${minor}`;\n    const environment = encodeURIComponent(`Version: ${version}\nCluster ID: ${cv.spec.clusterID}\nBrowser: ${window.navigator.userAgent}\n`);\n    return _.isEmpty(prerelease)\n        ? {\n            label: 'Open Support Case with Red Hat',\n            href: `https://access.redhat.com/support/cases/#/case/new?product=OpenShift%20Container%20Platform&version=${major}.${minor}&clusterId=${cv.spec.clusterID}`,\n        }\n        : {\n            label: 'Report Bug to Red Hat',\n            href: `https://bugzilla.redhat.com/enter_bug.cgi?product=OpenShift%20Container%20Platform&version=${bugzillaVersion}&cf_environment=${environment}`,\n        };\n};\n// example link: https://access.redhat.com/downloads/content/290/ver=4.1/rhel---7/4.1.13/x86_64/product-errata\nexport const getErrataLink = (cv) => {\n    const version = getCurrentVersion(cv);\n    const parsed = semver.parse(version);\n    if (!parsed) {\n        return null;\n    }\n    const { major, minor, patch, prerelease } = parsed;\n    if (major !== 4 || !_.isEmpty(prerelease)) {\n        return null;\n    }\n    // TODO: Determine architecture instead of assuming x86_64.\n    return `https://access.redhat.com/downloads/content/290/ver=${major}.${minor}/rhel---7/${major}.${minor}.${patch}/x86_64/product-errata`;\n};\nexport const getClusterName = () => window.SERVER_FLAGS.kubeAPIServerURL || null;\nexport const getClusterID = (cv) => _.get(cv, 'spec.clusterID');\nexport const getOCMLink = (clusterID) => `https://cloud.redhat.com/openshift/details/${clusterID}`;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/cluster-settings.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/cluster-settings.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\nimport * as semver from 'semver';\n\nimport { ClusterVersionModel } from '../../models';\nimport { referenceForModel } from './k8s';\nimport {\n  ClusterVersionKind,\n  ClusterUpdate,\n  ClusterVersionConditionType,\n  K8sResourceConditionStatus,\n  ClusterVersionCondition,\n  UpdateHistory,\n} from '.';\n\nexport enum ClusterUpdateStatus {\n  UpToDate = 'Up to Date',\n  UpdatesAvailable = 'Updates Available',\n  Updating = 'Updating',\n  Failing = 'Failing',\n  ErrorRetrieving = 'Error Retrieving',\n  Invalid = 'Invalid Cluster Version',\n}\n\nexport const clusterVersionReference = referenceForModel(ClusterVersionModel);\n\nexport const getAvailableClusterUpdates = (cv: ClusterVersionKind): ClusterUpdate[] => {\n  return _.get(cv, 'status.availableUpdates', []);\n};\n\nexport const getAvailableClusterChannels = () => ({\n  'stable-4.5': 'stable-4.5',\n  'fast-4.5': 'fast-4.5',\n  'candidate-4.5': 'candidate-4.5',\n});\n\nexport const getDesiredClusterVersion = (cv: ClusterVersionKind): string => {\n  return _.get(cv, 'status.desired.version');\n};\n\nexport const getClusterVersionChannel = (cv: ClusterVersionKind): string =>\n  cv && cv.spec ? cv.spec.channel : undefined;\n\nexport const getLastCompletedUpdate = (cv: ClusterVersionKind): string => {\n  const history: UpdateHistory[] = _.get(cv, 'status.history', []);\n  const lastCompleted: UpdateHistory = history.find((update) => update.state === 'Completed');\n  return lastCompleted && lastCompleted.version;\n};\n\nexport const getClusterVersionCondition = (\n  cv: ClusterVersionKind,\n  type: ClusterVersionConditionType,\n  status: K8sResourceConditionStatus = undefined,\n): ClusterVersionCondition => {\n  const conditions: ClusterVersionCondition[] = _.get(cv, 'status.conditions');\n  if (status) {\n    return _.find(conditions, { type, status });\n  }\n  return _.find(conditions, { type });\n};\n\nexport const isProgressing = (cv: ClusterVersionKind): boolean => {\n  return !_.isEmpty(\n    getClusterVersionCondition(\n      cv,\n      ClusterVersionConditionType.Progressing,\n      K8sResourceConditionStatus.True,\n    ),\n  );\n};\n\nexport const invalid = (cv: ClusterVersionKind): boolean => {\n  return !_.isEmpty(\n    getClusterVersionCondition(\n      cv,\n      ClusterVersionConditionType.Invalid,\n      K8sResourceConditionStatus.True,\n    ),\n  );\n};\n\nexport const failedToRetrieveUpdates = (cv: ClusterVersionKind): boolean => {\n  return !_.isEmpty(\n    getClusterVersionCondition(\n      cv,\n      ClusterVersionConditionType.RetrievedUpdates,\n      K8sResourceConditionStatus.False,\n    ),\n  );\n};\n\nexport const updateFailing = (cv: ClusterVersionKind): boolean => {\n  return !_.isEmpty(\n    getClusterVersionCondition(\n      cv,\n      ClusterVersionConditionType.Failing,\n      K8sResourceConditionStatus.True,\n    ),\n  );\n};\n\nexport const hasAvailableUpdates = (cv: ClusterVersionKind): boolean => {\n  return !_.isEmpty(getAvailableClusterUpdates(cv));\n};\n\nexport const getClusterUpdateStatus = (cv: ClusterVersionKind): ClusterUpdateStatus => {\n  if (invalid(cv)) {\n    return ClusterUpdateStatus.Invalid;\n  }\n\n  if (updateFailing(cv)) {\n    return ClusterUpdateStatus.Failing;\n  }\n\n  if (isProgressing(cv)) {\n    return ClusterUpdateStatus.Updating;\n  }\n\n  if (failedToRetrieveUpdates(cv)) {\n    return ClusterUpdateStatus.ErrorRetrieving;\n  }\n\n  return hasAvailableUpdates(cv)\n    ? ClusterUpdateStatus.UpdatesAvailable\n    : ClusterUpdateStatus.UpToDate;\n};\n\nexport const getK8sGitVersion = (k8sVersionResponse): string =>\n  _.get(k8sVersionResponse, 'gitVersion');\n\nexport const getOpenShiftVersion = (cv: ClusterVersionKind): string => {\n  const lastUpdate: UpdateHistory = _.get(cv, 'status.history[0]');\n  if (!lastUpdate) {\n    return null;\n  }\n  return lastUpdate.state === 'Partial' ? `Updating to ${lastUpdate.version}` : lastUpdate.version;\n};\n\ntype ParsedVersion = {\n  major: number;\n  minor: number;\n  patch: number;\n  prerelease: string[];\n};\n\nconst getCurrentVersion = (cv: ClusterVersionKind): string => {\n  return _.get(cv, 'status.history[0].version') || _.get(cv, 'spec.desiredUpdate.version');\n};\n\nexport const getReportBugLink = (cv: ClusterVersionKind): { label: string; href: string } => {\n  const version: string = getCurrentVersion(cv);\n  const parsed: ParsedVersion = semver.parse(version);\n  if (!parsed) {\n    return null;\n  }\n\n  // Show a Bugzilla link for prerelease versions and a support case link for supported versions.\n  const { major, minor, prerelease } = parsed;\n  const bugzillaVersion = major === 4 && minor <= 3 ? `${major}.${minor}.0` : `${major}.${minor}`;\n  const environment = encodeURIComponent(`Version: ${version}\nCluster ID: ${cv.spec.clusterID}\nBrowser: ${window.navigator.userAgent}\n`);\n  return _.isEmpty(prerelease)\n    ? {\n        label: 'Open Support Case with Red Hat',\n        href: `https://access.redhat.com/support/cases/#/case/new?product=OpenShift%20Container%20Platform&version=${major}.${minor}&clusterId=${cv.spec.clusterID}`,\n      }\n    : {\n        label: 'Report Bug to Red Hat',\n        href: `https://bugzilla.redhat.com/enter_bug.cgi?product=OpenShift%20Container%20Platform&version=${bugzillaVersion}&cf_environment=${environment}`,\n      };\n};\n\n// example link: https://access.redhat.com/downloads/content/290/ver=4.1/rhel---7/4.1.13/x86_64/product-errata\nexport const getErrataLink = (cv: ClusterVersionKind): string => {\n  const version: string = getCurrentVersion(cv);\n  const parsed: ParsedVersion = semver.parse(version);\n  if (!parsed) {\n    return null;\n  }\n\n  const { major, minor, patch, prerelease } = parsed;\n  if (major !== 4 || !_.isEmpty(prerelease)) {\n    return null;\n  }\n\n  // TODO: Determine architecture instead of assuming x86_64.\n  return `https://access.redhat.com/downloads/content/290/ver=${major}.${minor}/rhel---7/${major}.${minor}.${patch}/x86_64/product-errata`;\n};\n\nexport const getClusterName = (): string => window.SERVER_FLAGS.kubeAPIServerURL || null;\n\nexport const getClusterID = (cv: ClusterVersionKind): string => _.get(cv, 'spec.clusterID');\n\nexport const getOCMLink = (clusterID: string): string =>\n  `https://cloud.redhat.com/openshift/details/${clusterID}`;\n"]}]}