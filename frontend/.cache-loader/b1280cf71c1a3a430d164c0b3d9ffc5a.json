{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/cloud-shell/CloudShellTerminal.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/cloud-shell/CloudShellTerminal.tsx","mtime":1615298458590},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { StatusBox, LoadError } from '@console/internal/components/utils/status-box';\nimport CloudshellExec from './CloudShellExec';\nimport TerminalLoadingBox from './TerminalLoadingBox';\nimport { initTerminal, getCloudShellNamespace, setCloudShellNamespace, } from './cloud-shell-utils';\nimport CloudShellSetup from './setup/CloudShellSetup';\nimport useCloudShellWorkspace from './useCloudShellWorkspace';\nimport './CloudShellTerminal.scss';\nconst CloudShellTerminal = ({ user, onCancel }) => {\n    var _a, _b, _c, _d;\n    const [namespace, setNamespace] = React.useState(getCloudShellNamespace());\n    const [initData, setInitData] = React.useState();\n    const [initError, setInitError] = React.useState();\n    const [workspace, loaded, loadError] = useCloudShellWorkspace(user, namespace);\n    const workspacePhase = (_a = workspace === null || workspace === void 0 ? void 0 : workspace.status) === null || _a === void 0 ? void 0 : _a.phase;\n    const workspaceName = (_b = workspace === null || workspace === void 0 ? void 0 : workspace.metadata) === null || _b === void 0 ? void 0 : _b.name;\n    const workspaceNamespace = (_c = workspace === null || workspace === void 0 ? void 0 : workspace.metadata) === null || _c === void 0 ? void 0 : _c.namespace;\n    const username = (_d = user === null || user === void 0 ? void 0 : user.metadata) === null || _d === void 0 ? void 0 : _d.name;\n    // save the namespace once the workspace has loaded\n    React.useEffect(() => {\n        if (loaded && !loadError) {\n            // workspace may be undefined which is ok\n            setCloudShellNamespace(workspaceNamespace);\n        }\n    }, [loaded, loadError, workspaceNamespace]);\n    // clear the init data and error if the workspace changes\n    React.useEffect(() => {\n        setInitData(undefined);\n        setInitError(undefined);\n    }, [username, workspaceName, workspaceNamespace]);\n    // initialize the terminal once it is Running\n    React.useEffect(() => {\n        let unmounted = false;\n        if (workspacePhase === 'Running') {\n            initTerminal(username, workspaceName, workspaceNamespace)\n                .then((res) => {\n                if (!unmounted)\n                    setInitData(res);\n            })\n                .catch((e) => {\n                var _a, _b, _c;\n                if (!unmounted) {\n                    const defaultError = 'Failed to connect to your OpenShift command line terminal';\n                    if ((_c = (_b = (_a = e === null || e === void 0 ? void 0 : e.response) === null || _a === void 0 ? void 0 : _a.headers) === null || _b === void 0 ? void 0 : _b.get('Content-Type')) === null || _c === void 0 ? void 0 : _c.startsWith('text/plain')) {\n                        // eslint-disable-next-line promise/no-nesting\n                        e.response\n                            .text()\n                            .then((text) => {\n                            setInitError(text);\n                        })\n                            .catch(() => {\n                            setInitError(defaultError);\n                        });\n                    }\n                    else {\n                        setInitError(defaultError);\n                    }\n                }\n            });\n        }\n        return () => {\n            unmounted = true;\n        };\n    }, [username, workspaceName, workspaceNamespace, workspacePhase]);\n    // failed to load the workspace\n    if (loadError) {\n        return (React.createElement(StatusBox, { loaded: loaded, loadError: loadError, label: \"OpenShift command line terminal\" }));\n    }\n    // failed to init the terminal\n    if (initError) {\n        return React.createElement(LoadError, { message: initError, label: \"OpenShift command line terminal\" });\n    }\n    // loading the workspace resource\n    if (!loaded) {\n        return React.createElement(TerminalLoadingBox, { message: \"\" });\n    }\n    // waiting for the workspace to start and initialize the terminal\n    if (workspaceName && !initData) {\n        return (React.createElement(\"div\", { className: \"co-cloudshell-terminal__container\" },\n            React.createElement(TerminalLoadingBox, null)));\n    }\n    if (initData && workspaceNamespace) {\n        return (React.createElement(\"div\", { className: \"co-cloudshell-terminal__container\" },\n            React.createElement(CloudshellExec, { workspaceName: workspaceName, namespace: workspaceNamespace, container: initData.container, podname: initData.pod, shcommand: initData.cmd || [] })));\n    }\n    // show the form to let the user create a new workspace\n    return (React.createElement(CloudShellSetup, { onCancel: onCancel, onSubmit: (ns) => {\n            setCloudShellNamespace(ns);\n            setNamespace(ns);\n        } }));\n};\n// For testing\nexport const InternalCloudShellTerminal = CloudShellTerminal;\nconst stateToProps = (state) => ({\n    user: state.UI.get('user'),\n});\nexport default connect(stateToProps)(CloudShellTerminal);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/cloud-shell/CloudShellTerminal.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/cloud-shell/CloudShellTerminal.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { RootState } from '@console/internal/redux';\nimport { StatusBox, LoadError } from '@console/internal/components/utils/status-box';\nimport { UserKind } from '@console/internal/module/k8s';\nimport CloudshellExec from './CloudShellExec';\nimport TerminalLoadingBox from './TerminalLoadingBox';\nimport {\n  TerminalInitData,\n  initTerminal,\n  getCloudShellNamespace,\n  setCloudShellNamespace,\n} from './cloud-shell-utils';\nimport CloudShellSetup from './setup/CloudShellSetup';\nimport useCloudShellWorkspace from './useCloudShellWorkspace';\n\nimport './CloudShellTerminal.scss';\n\ntype StateProps = {\n  user: UserKind;\n};\n\ntype Props = {\n  onCancel?: () => void;\n};\n\ntype CloudShellTerminalProps = StateProps & Props;\n\nconst CloudShellTerminal: React.FC<CloudShellTerminalProps> = ({ user, onCancel }) => {\n  const [namespace, setNamespace] = React.useState(getCloudShellNamespace());\n  const [initData, setInitData] = React.useState<TerminalInitData>();\n  const [initError, setInitError] = React.useState<string>();\n\n  const [workspace, loaded, loadError] = useCloudShellWorkspace(user, namespace);\n\n  const workspacePhase = workspace?.status?.phase;\n  const workspaceName = workspace?.metadata?.name;\n  const workspaceNamespace = workspace?.metadata?.namespace;\n\n  const username = user?.metadata?.name;\n\n  // save the namespace once the workspace has loaded\n  React.useEffect(() => {\n    if (loaded && !loadError) {\n      // workspace may be undefined which is ok\n      setCloudShellNamespace(workspaceNamespace);\n    }\n  }, [loaded, loadError, workspaceNamespace]);\n\n  // clear the init data and error if the workspace changes\n  React.useEffect(() => {\n    setInitData(undefined);\n    setInitError(undefined);\n  }, [username, workspaceName, workspaceNamespace]);\n\n  // initialize the terminal once it is Running\n  React.useEffect(() => {\n    let unmounted = false;\n\n    if (workspacePhase === 'Running') {\n      initTerminal(username, workspaceName, workspaceNamespace)\n        .then((res: TerminalInitData) => {\n          if (!unmounted) setInitData(res);\n        })\n        .catch((e) => {\n          if (!unmounted) {\n            const defaultError = 'Failed to connect to your OpenShift command line terminal';\n            if (e?.response?.headers?.get('Content-Type')?.startsWith('text/plain')) {\n              // eslint-disable-next-line promise/no-nesting\n              e.response\n                .text()\n                .then((text) => {\n                  setInitError(text);\n                })\n                .catch(() => {\n                  setInitError(defaultError);\n                });\n            } else {\n              setInitError(defaultError);\n            }\n          }\n        });\n    }\n\n    return () => {\n      unmounted = true;\n    };\n  }, [username, workspaceName, workspaceNamespace, workspacePhase]);\n\n  // failed to load the workspace\n  if (loadError) {\n    return (\n      <StatusBox loaded={loaded} loadError={loadError} label=\"OpenShift command line terminal\" />\n    );\n  }\n\n  // failed to init the terminal\n  if (initError) {\n    return <LoadError message={initError} label=\"OpenShift command line terminal\" />;\n  }\n\n  // loading the workspace resource\n  if (!loaded) {\n    return <TerminalLoadingBox message=\"\" />;\n  }\n\n  // waiting for the workspace to start and initialize the terminal\n  if (workspaceName && !initData) {\n    return (\n      <div className=\"co-cloudshell-terminal__container\">\n        <TerminalLoadingBox />\n      </div>\n    );\n  }\n\n  if (initData && workspaceNamespace) {\n    return (\n      <div className=\"co-cloudshell-terminal__container\">\n        <CloudshellExec\n          workspaceName={workspaceName}\n          namespace={workspaceNamespace}\n          container={initData.container}\n          podname={initData.pod}\n          shcommand={initData.cmd || []}\n        />\n      </div>\n    );\n  }\n\n  // show the form to let the user create a new workspace\n  return (\n    <CloudShellSetup\n      onCancel={onCancel}\n      onSubmit={(ns: string) => {\n        setCloudShellNamespace(ns);\n        setNamespace(ns);\n      }}\n    />\n  );\n};\n\n// For testing\nexport const InternalCloudShellTerminal = CloudShellTerminal;\n\nconst stateToProps = (state: RootState): StateProps => ({\n  user: state.UI.get('user'),\n});\n\nexport default connect(stateToProps)(CloudShellTerminal);\n"]}]}