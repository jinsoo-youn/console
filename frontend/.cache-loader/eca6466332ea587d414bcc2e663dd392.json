{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/topology/components/anchors/RevisionTrafficTargetAnchor.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/topology/components/anchors/RevisionTrafficTargetAnchor.ts","mtime":1615298458640},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { AbstractAnchor, getEllipseAnchorPoint, Point } from '@console/topology';\nexport default class RevisionTrafficTargetAnchor extends AbstractAnchor {\n    constructor(node, radius) {\n        super(node);\n        this.radius = radius;\n        // TODO align sizing with WorkloadNode\n        this.radiusOffset = radius * 0.7;\n    }\n    getLocation(reference) {\n        const bounds = this.owner.getBounds();\n        if (this.radius) {\n            // location is edge of decorator\n            const center = new Point(bounds.right() - this.radiusOffset, bounds.y + this.radiusOffset);\n            const size = this.radius * 2;\n            return getEllipseAnchorPoint(center, size, size, reference);\n        }\n        // location is edge of outer node\n        return getEllipseAnchorPoint(bounds.getCenter(), bounds.width, bounds.height, reference);\n    }\n    getReferencePoint() {\n        const bounds = this.owner.getBounds();\n        if (this.radius) {\n            // reference point is center of decorator\n            return new Point(bounds.right() - this.radiusOffset, bounds.y + this.radiusOffset);\n        }\n        // reference point is center of node\n        return bounds.getCenter();\n    }\n}\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/topology/components/anchors/RevisionTrafficTargetAnchor.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/topology/components/anchors/RevisionTrafficTargetAnchor.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,qBAAqB,EAAQ,KAAK,EAAE,MAAM,mBAAmB,CAAC;AAEvF,MAAM,CAAC,OAAO,OAAO,2BAA4B,SAAQ,cAAc;IAKrE,YAAY,IAAU,EAAE,MAAc;QACpC,KAAK,CAAC,IAAI,CAAC,CAAC;QACZ,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;QACrB,sCAAsC;QACtC,IAAI,CAAC,YAAY,GAAG,MAAM,GAAG,GAAG,CAAC;IACnC,CAAC;IAED,WAAW,CAAC,SAAgB;QAC1B,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;QACtC,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,gCAAgC;YAChC,MAAM,MAAM,GAAG,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC;YAC3F,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;YAC7B,OAAO,qBAAqB,CAAC,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;SAC7D;QAED,iCAAiC;QACjC,OAAO,qBAAqB,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,MAAM,CAAC,KAAK,EAAE,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,CAAC;IAC3F,CAAC;IAED,iBAAiB;QACf,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;QACtC,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,yCAAyC;YACzC,OAAO,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,IAAI,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC,GAAG,IAAI,CAAC,YAAY,CAAC,CAAC;SACpF;QACD,oCAAoC;QACpC,OAAO,MAAM,CAAC,SAAS,EAAE,CAAC;IAC5B,CAAC;CACF","sourcesContent":["import { AbstractAnchor, getEllipseAnchorPoint, Node, Point } from '@console/topology';\n\nexport default class RevisionTrafficTargetAnchor extends AbstractAnchor {\n  private radius: number;\n\n  private radiusOffset: number;\n\n  constructor(node: Node, radius: number) {\n    super(node);\n    this.radius = radius;\n    // TODO align sizing with WorkloadNode\n    this.radiusOffset = radius * 0.7;\n  }\n\n  getLocation(reference: Point): Point {\n    const bounds = this.owner.getBounds();\n    if (this.radius) {\n      // location is edge of decorator\n      const center = new Point(bounds.right() - this.radiusOffset, bounds.y + this.radiusOffset);\n      const size = this.radius * 2;\n      return getEllipseAnchorPoint(center, size, size, reference);\n    }\n\n    // location is edge of outer node\n    return getEllipseAnchorPoint(bounds.getCenter(), bounds.width, bounds.height, reference);\n  }\n\n  getReferencePoint(): Point {\n    const bounds = this.owner.getBounds();\n    if (this.radius) {\n      // reference point is center of decorator\n      return new Point(bounds.right() - this.radiusOffset, bounds.y + this.radiusOffset);\n    }\n    // reference point is center of node\n    return bounds.getCenter();\n  }\n}\n"]}]}