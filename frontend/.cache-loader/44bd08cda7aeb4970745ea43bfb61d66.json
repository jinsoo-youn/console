{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/monitoring/metrics/MetricsQueryInput.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/monitoring/metrics/MetricsQueryInput.tsx","mtime":1615298458620},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\n// FIXME upgrading redux types is causing many errors at this time\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as fuzzy from 'fuzzysearch';\nimport { Button } from '@patternfly/react-core';\nimport { Dropdown, removeQueryArgument, useSafeFetch } from '@console/internal/components/utils';\nimport { queryBrowserRunQueries, queryBrowserPatchQuery, queryBrowserSetMetrics, } from '@console/internal/actions/ui';\nimport { getActiveNamespace } from '@console/internal/reducers/ui';\nimport { QueryInput } from '@console/internal/components/monitoring/metrics';\nimport { getPrometheusURL, PrometheusEndpoint } from '@console/internal/components/graphs/helpers';\nimport { PROMETHEUS_BASE_PATH } from '@console/internal/components/graphs';\nimport { metricsQuery, getTopMetricsQueries } from '../queries';\nimport './MetricsQueryInput.scss';\nconst ADD_NEW_QUERY = '#ADD_NEW_QUERY#';\nconst CUSTOM_QUERY = 'Custom Query';\nconst MetricsQueryInput = ({ query }) => {\n    const items = metricsQuery;\n    const autocompleteFilter = (strText, item) => fuzzy(strText, item);\n    const defaultActionItem = [\n        {\n            actionTitle: CUSTOM_QUERY,\n            actionKey: ADD_NEW_QUERY,\n        },\n    ];\n    const namespace = useSelector((state) => getActiveNamespace(state));\n    const queries = useSelector((state) => state.UI.getIn(['queryBrowser', 'queries', 0]).toJS());\n    const dispatch = useDispatch();\n    const [title, setTitle] = React.useState('Select Query');\n    const [selectedKey, setSelectedKey] = React.useState('');\n    const [metric, setMetric] = React.useState('');\n    const [showPromQl, setShowPromQl] = React.useState(false);\n    const [isPromQlDisabled, setIsPromQlDisabled] = React.useState(false);\n    const safeFetch = React.useCallback(useSafeFetch(), []);\n    React.useEffect(() => {\n        const runQueries = () => dispatch(queryBrowserRunQueries());\n        const patchQuery = (v) => dispatch(queryBrowserPatchQuery(0, v));\n        if (metric) {\n            const queryMetrics = getTopMetricsQueries(namespace)[metric];\n            patchQuery({ text: queryMetrics || '' });\n            runQueries();\n        }\n    }, [dispatch, metric, namespace]);\n    React.useEffect(() => {\n        const q = queries === null || queries === void 0 ? void 0 : queries.query;\n        const text = queries === null || queries === void 0 ? void 0 : queries.text;\n        if (text && text.localeCompare(q) !== 0) {\n            setTitle(CUSTOM_QUERY);\n            setIsPromQlDisabled(true);\n            if (query) {\n                removeQueryArgument('query0');\n            }\n        }\n    }, [query, queries]);\n    React.useEffect(() => {\n        if (query) {\n            const topMetricsQueries = getTopMetricsQueries(namespace);\n            const selectedQuery = _.findKey(topMetricsQueries, (topQuery) => topQuery === query);\n            const sKey = _.findKey(items, (item) => item === selectedQuery);\n            setMetric(selectedQuery);\n            selectedQuery ? setSelectedKey(sKey) : setTitle(CUSTOM_QUERY);\n        }\n    }, [query, namespace, items]);\n    React.useEffect(() => {\n        const setMetrics = (metrics) => dispatch(queryBrowserSetMetrics(metrics));\n        const url = namespace\n            ? getPrometheusURL({\n                endpoint: PrometheusEndpoint.QUERY,\n                namespace,\n                query: `count({namespace=\"${namespace}\"}) by (__name__)`,\n            })\n            : `${PROMETHEUS_BASE_PATH}/${PrometheusEndpoint.LABEL}/__name__/values`;\n        safeFetch(url)\n            .then((response) => {\n            const metrics = namespace\n                ? _.map(_.get(response, 'data.result'), 'metric.__name__').sort()\n                : _.get(response, 'data');\n            setMetrics(metrics);\n        })\n            .catch(() => { });\n    }, [namespace, safeFetch, dispatch]);\n    const onChange = (selectedValue) => {\n        setMetric(metricsQuery[selectedValue]);\n        if (selectedValue && selectedValue === ADD_NEW_QUERY) {\n            setTitle(CUSTOM_QUERY);\n            setIsPromQlDisabled(true);\n            setShowPromQl(true);\n        }\n        else {\n            setTitle(metricsQuery[selectedValue]);\n            setIsPromQlDisabled(false);\n        }\n        if (query) {\n            removeQueryArgument('query0');\n        }\n    };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: \"row\" },\n            React.createElement(\"div\", { className: \"col-xs-8 col-md-6\" },\n                React.createElement(Dropdown, { autocompleteFilter: autocompleteFilter, items: items || {}, selectedKey: selectedKey, actionItems: defaultActionItem, dropDownClassName: \"odc-metrics-query-input dropdown--full-width\", menuClassName: \"odc-metrics-query-input__menu dropdown-menu--text-wrap\", onChange: onChange, title: title })),\n            React.createElement(\"div\", { className: \"col-xs-4 col-md-6\" },\n                React.createElement(Button, { variant: \"link\", type: \"button\", isDisabled: isPromQlDisabled, onClick: () => setShowPromQl(!showPromQl) }, showPromQl ? 'Hide PromQL' : 'Show PromQL'))),\n        showPromQl && (React.createElement(\"div\", { className: \"row\" },\n            React.createElement(\"div\", { className: \"col-xs-12\" },\n                React.createElement(QueryInput, { index: 0, namespace: namespace }))))));\n};\nexport default MetricsQueryInput;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/monitoring/metrics/MetricsQueryInput.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/monitoring/metrics/MetricsQueryInput.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\n// FIXME upgrading redux types is causing many errors at this time\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as fuzzy from 'fuzzysearch';\nimport { RootState } from '@console/internal/redux';\nimport { Button } from '@patternfly/react-core';\nimport { Dropdown, removeQueryArgument, useSafeFetch } from '@console/internal/components/utils';\nimport {\n  queryBrowserRunQueries,\n  queryBrowserPatchQuery,\n  queryBrowserSetMetrics,\n} from '@console/internal/actions/ui';\nimport { getActiveNamespace } from '@console/internal/reducers/ui';\nimport { QueryInput } from '@console/internal/components/monitoring/metrics';\nimport { QueryObj } from '@console/internal/components/monitoring/query-browser';\nimport { getPrometheusURL, PrometheusEndpoint } from '@console/internal/components/graphs/helpers';\nimport { PROMETHEUS_BASE_PATH } from '@console/internal/components/graphs';\nimport { metricsQuery, getTopMetricsQueries } from '../queries';\nimport './MetricsQueryInput.scss';\n\nconst ADD_NEW_QUERY = '#ADD_NEW_QUERY#';\nconst CUSTOM_QUERY = 'Custom Query';\n\ntype MetricsQueryInputProps = {\n  query?: string;\n};\n\nconst MetricsQueryInput: React.FC<MetricsQueryInputProps> = ({ query }) => {\n  const items = metricsQuery;\n  const autocompleteFilter = (strText, item) => fuzzy(strText, item);\n  const defaultActionItem = [\n    {\n      actionTitle: CUSTOM_QUERY,\n      actionKey: ADD_NEW_QUERY,\n    },\n  ];\n\n  const namespace = useSelector((state: RootState) => getActiveNamespace(state));\n  const queries = useSelector((state: RootState) =>\n    state.UI.getIn(['queryBrowser', 'queries', 0]).toJS(),\n  );\n  const dispatch = useDispatch();\n  const [title, setTitle] = React.useState('Select Query');\n  const [selectedKey, setSelectedKey] = React.useState('');\n  const [metric, setMetric] = React.useState('');\n  const [showPromQl, setShowPromQl] = React.useState(false);\n  const [isPromQlDisabled, setIsPromQlDisabled] = React.useState(false);\n  const safeFetch = React.useCallback(useSafeFetch(), []);\n  React.useEffect(() => {\n    const runQueries = () => dispatch(queryBrowserRunQueries());\n    const patchQuery = (v: QueryObj) => dispatch(queryBrowserPatchQuery(0, v));\n    if (metric) {\n      const queryMetrics = getTopMetricsQueries(namespace)[metric];\n      patchQuery({ text: queryMetrics || '' });\n      runQueries();\n    }\n  }, [dispatch, metric, namespace]);\n\n  React.useEffect(() => {\n    const q = queries?.query;\n    const text = queries?.text;\n    if (text && text.localeCompare(q) !== 0) {\n      setTitle(CUSTOM_QUERY);\n      setIsPromQlDisabled(true);\n      if (query) {\n        removeQueryArgument('query0');\n      }\n    }\n  }, [query, queries]);\n\n  React.useEffect(() => {\n    if (query) {\n      const topMetricsQueries = getTopMetricsQueries(namespace);\n      const selectedQuery = _.findKey(topMetricsQueries, (topQuery) => topQuery === query);\n      const sKey = _.findKey(items, (item) => item === selectedQuery);\n      setMetric(selectedQuery);\n      selectedQuery ? setSelectedKey(sKey) : setTitle(CUSTOM_QUERY);\n    }\n  }, [query, namespace, items]);\n\n  React.useEffect(() => {\n    const setMetrics = (metrics: string[]) => dispatch(queryBrowserSetMetrics(metrics));\n    const url = namespace\n      ? getPrometheusURL({\n          endpoint: PrometheusEndpoint.QUERY,\n          namespace,\n          query: `count({namespace=\"${namespace}\"}) by (__name__)`,\n        })\n      : `${PROMETHEUS_BASE_PATH}/${PrometheusEndpoint.LABEL}/__name__/values`;\n    safeFetch(url)\n      .then((response) => {\n        const metrics = namespace\n          ? _.map(_.get(response, 'data.result'), 'metric.__name__').sort()\n          : _.get(response, 'data');\n        setMetrics(metrics);\n      })\n      .catch(() => {});\n  }, [namespace, safeFetch, dispatch]);\n\n  const onChange = (selectedValue: string) => {\n    setMetric(metricsQuery[selectedValue]);\n    if (selectedValue && selectedValue === ADD_NEW_QUERY) {\n      setTitle(CUSTOM_QUERY);\n      setIsPromQlDisabled(true);\n      setShowPromQl(true);\n    } else {\n      setTitle(metricsQuery[selectedValue]);\n      setIsPromQlDisabled(false);\n    }\n    if (query) {\n      removeQueryArgument('query0');\n    }\n  };\n\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-xs-8 col-md-6\">\n          <Dropdown\n            autocompleteFilter={autocompleteFilter}\n            items={items || {}}\n            selectedKey={selectedKey}\n            actionItems={defaultActionItem}\n            dropDownClassName=\"odc-metrics-query-input dropdown--full-width\"\n            menuClassName=\"odc-metrics-query-input__menu dropdown-menu--text-wrap\"\n            onChange={onChange}\n            title={title}\n          />\n        </div>\n        <div className=\"col-xs-4 col-md-6\">\n          <Button\n            variant=\"link\"\n            type=\"button\"\n            isDisabled={isPromQlDisabled}\n            onClick={() => setShowPromQl(!showPromQl)}\n          >\n            {showPromQl ? 'Hide PromQL' : 'Show PromQL'}\n          </Button>\n        </div>\n      </div>\n      {showPromQl && (\n        <div className=\"row\">\n          <div className=\"col-xs-12\">\n            <QueryInput index={0} namespace={namespace} />\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default MetricsQueryInput;\n"]}]}