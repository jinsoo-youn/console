{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-builder/PipelineBuilderForm.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-builder/PipelineBuilderForm.tsx","mtime":1616973267240},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Form, Stack, StackItem, TextInputTypes } from '@patternfly/react-core';\nimport { InputField, FormFooter } from '@console/shared';\nimport { PipelineParameters, PipelineResources } from '../detail-page-tabs';\nimport { UpdateOperationType } from './const';\nimport { useResourceValidation } from './hooks';\nimport { removeTaskModal } from './modals';\nimport PipelineBuilderHeader from './PipelineBuilderHeader';\nimport PipelineBuilderVisualization from './PipelineBuilderVisualization';\nimport Sidebar from './task-sidebar/Sidebar';\nimport TaskSidebar from './task-sidebar/TaskSidebar';\nimport { applyChange } from './update-utils';\nimport './PipelineBuilderForm.scss';\nconst PipelineBuilderForm = (props) => {\n    var _a;\n    const [selectedTask, setSelectedTask] = React.useState(null);\n    const selectedTaskRef = React.useRef(null);\n    selectedTaskRef.current = selectedTask;\n    const { existingPipeline, status, isSubmitting, dirty, handleReset, handleSubmit, errors, namespace, setFieldValue, setStatus, values, } = props;\n    const statusRef = React.useRef(status);\n    statusRef.current = status;\n    const updateErrors = React.useCallback((taskErrors) => {\n        var _a;\n        if (taskErrors) {\n            setStatus(Object.assign(Object.assign({}, statusRef.current), { tasks: _.omitBy(_.merge({}, (_a = statusRef.current) === null || _a === void 0 ? void 0 : _a.tasks, taskErrors), (v) => !v) }));\n        }\n    }, [setStatus]);\n    useResourceValidation(values.tasks, values.resources, updateErrors);\n    const updateTasks = (changes) => {\n        const { tasks, listTasks, errors: taskErrors } = changes;\n        setFieldValue('tasks', tasks);\n        setFieldValue('listTasks', listTasks);\n        updateErrors(taskErrors);\n    };\n    const selectedId = (_a = values.tasks[selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.taskIndex]) === null || _a === void 0 ? void 0 : _a.name;\n    const selectedIds = selectedId ? [selectedId] : [];\n    const taskGroup = {\n        tasks: values.tasks,\n        listTasks: values.listTasks,\n        highlightedIds: selectedIds,\n    };\n    const closeSidebarAndHandleReset = React.useCallback(() => {\n        setSelectedTask(null);\n        selectedTaskRef.current = null;\n        handleReset();\n    }, [handleReset]);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Stack, { className: \"odc-pipeline-builder-form\" },\n            React.createElement(StackItem, null,\n                React.createElement(PipelineBuilderHeader, { existingPipeline: existingPipeline, namespace: namespace })),\n            React.createElement(StackItem, { isFilled: true, className: \"odc-pipeline-builder-form__content\" },\n                React.createElement(Form, { className: \"odc-pipeline-builder-form__grid\", onSubmit: handleSubmit },\n                    React.createElement(\"div\", { className: \"odc-pipeline-builder-form__short-section\" },\n                        React.createElement(InputField, { label: \"Name\", name: \"name\", type: TextInputTypes.text, isDisabled: !!existingPipeline, required: true })),\n                    React.createElement(\"div\", null,\n                        React.createElement(\"h2\", null, \"Parameters\"),\n                        React.createElement(PipelineParameters, { addLabel: \"Add Parameters\", fieldName: \"params\" })),\n                    React.createElement(\"div\", null,\n                        React.createElement(\"h2\", null, \"Resources\"),\n                        React.createElement(PipelineResources, { addLabel: \"Add Resources\", fieldName: \"resources\" })),\n                    React.createElement(\"div\", null,\n                        React.createElement(\"h2\", null, \"Tasks\"),\n                        React.createElement(PipelineBuilderVisualization, { namespace: namespace, tasksInError: (status === null || status === void 0 ? void 0 : status.tasks) || {}, onTaskSelection: (task, resource) => {\n                                setSelectedTask({\n                                    taskIndex: values.tasks.findIndex(({ name }) => name === task.name),\n                                    resource,\n                                });\n                            }, onUpdateTasks: (updatedTaskGroup, op) => updateTasks(applyChange(updatedTaskGroup, op)), taskGroup: taskGroup }),\n                        React.createElement(\"p\", { className: \"help-block\" }, \"\\uB178\\uB4DC \\uAC04 \\uC21C\\uCC28 \\uD639\\uC740 \\uBCD1\\uB82C \\uBC30\\uCE58\\uB97C \\uD1B5\\uD574 \\uC5F0\\uACB0\\uD558\\uC5EC \\uD30C\\uC774\\uD504\\uB77C\\uC778\\uC744 \\uC0DD\\uC131\\uD560 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\")),\n                    React.createElement(FormFooter, { handleReset: closeSidebarAndHandleReset, errorMessage: status === null || status === void 0 ? void 0 : status.submitError, isSubmitting: isSubmitting, submitLabel: existingPipeline ? 'Save' : 'Create', disableSubmit: !dirty ||\n                            !_.isEmpty(errors) ||\n                            !_.isEmpty(status === null || status === void 0 ? void 0 : status.tasks) ||\n                            values.tasks.length === 0, resetLabel: \"Cancel\", sticky: true })))),\n        React.createElement(Sidebar, { open: !!selectedTask, onRequestClose: () => {\n                var _a;\n                if ((selectedTask === null || selectedTask === void 0 ? void 0 : selectedTask.taskIndex) === ((_a = selectedTaskRef.current) === null || _a === void 0 ? void 0 : _a.taskIndex)) {\n                    setSelectedTask(null);\n                }\n            } }, () => (React.createElement(\"div\", { className: \"pf-c-form\" },\n            React.createElement(TaskSidebar\n            // Intentional remount when selection changes\n            , { \n                // Intentional remount when selection changes\n                key: selectedTask.taskIndex, resourceList: values.resources || [], errorMap: (status === null || status === void 0 ? void 0 : status.tasks) || {}, onUpdateTask: (data) => {\n                    updateTasks(applyChange(taskGroup, { type: UpdateOperationType.UPDATE_TASK, data }));\n                }, onRemoveTask: (taskName) => {\n                    removeTaskModal(taskName, () => {\n                        setSelectedTask(null);\n                        updateTasks(applyChange(taskGroup, {\n                            type: UpdateOperationType.REMOVE_TASK,\n                            data: { taskName },\n                        }));\n                    });\n                }, selectedPipelineTaskIndex: selectedTask.taskIndex, taskResource: selectedTask.resource }))))));\n};\nexport default PipelineBuilderForm;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-builder/PipelineBuilderForm.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-builder/PipelineBuilderForm.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { FormikProps, FormikValues } from 'formik';\nimport { Form, Stack, StackItem, TextInputTypes } from '@patternfly/react-core';\nimport { InputField, FormFooter } from '@console/shared';\nimport { Pipeline } from '../../../utils/pipeline-augment';\nimport { PipelineParameters, PipelineResources } from '../detail-page-tabs';\nimport { UpdateOperationType } from './const';\nimport { useResourceValidation } from './hooks';\nimport { removeTaskModal } from './modals';\nimport PipelineBuilderHeader from './PipelineBuilderHeader';\nimport PipelineBuilderVisualization from './PipelineBuilderVisualization';\nimport Sidebar from './task-sidebar/Sidebar';\nimport TaskSidebar from './task-sidebar/TaskSidebar';\nimport {\n  CleanupResults,\n  PipelineBuilderTaskGroup,\n  SelectedBuilderTask,\n  UpdateErrors,\n  UpdateOperationUpdateTaskData,\n} from './types';\nimport { applyChange } from './update-utils';\n\nimport './PipelineBuilderForm.scss';\n\ntype PipelineBuilderFormProps = FormikProps<FormikValues> & {\n  existingPipeline: Pipeline;\n  namespace: string;\n};\n\nconst PipelineBuilderForm: React.FC<PipelineBuilderFormProps> = (props) => {\n  const [selectedTask, setSelectedTask] = React.useState<SelectedBuilderTask>(null);\n  const selectedTaskRef = React.useRef<SelectedBuilderTask>(null);\n  selectedTaskRef.current = selectedTask;\n\n  const {\n    existingPipeline,\n    status,\n    isSubmitting,\n    dirty,\n    handleReset,\n    handleSubmit,\n    errors,\n    namespace,\n    setFieldValue,\n    setStatus,\n    values,\n  } = props;\n  const statusRef = React.useRef(status);\n  statusRef.current = status;\n\n  const updateErrors: UpdateErrors = React.useCallback(\n    (taskErrors) => {\n      if (taskErrors) {\n        setStatus({\n          ...statusRef.current,\n          tasks: _.omitBy(_.merge({}, statusRef.current?.tasks, taskErrors), (v) => !v),\n        });\n      }\n    },\n    [setStatus],\n  );\n\n  useResourceValidation(values.tasks, values.resources, updateErrors);\n\n  const updateTasks = (changes: CleanupResults): void => {\n    const { tasks, listTasks, errors: taskErrors } = changes;\n\n    setFieldValue('tasks', tasks);\n    setFieldValue('listTasks', listTasks);\n    updateErrors(taskErrors);\n  };\n\n  const selectedId = values.tasks[selectedTask?.taskIndex]?.name;\n  const selectedIds = selectedId ? [selectedId] : [];\n\n  const taskGroup: PipelineBuilderTaskGroup = {\n    tasks: values.tasks,\n    listTasks: values.listTasks,\n    highlightedIds: selectedIds,\n  };\n\n  const closeSidebarAndHandleReset = React.useCallback(() => {\n    setSelectedTask(null);\n    selectedTaskRef.current = null;\n    handleReset();\n  }, [handleReset]);\n\n  return (\n    <>\n      <Stack className=\"odc-pipeline-builder-form\">\n        <StackItem>\n          <PipelineBuilderHeader existingPipeline={existingPipeline} namespace={namespace} />\n        </StackItem>\n        <StackItem isFilled className=\"odc-pipeline-builder-form__content\">\n          <Form className=\"odc-pipeline-builder-form__grid\" onSubmit={handleSubmit}>\n            <div className=\"odc-pipeline-builder-form__short-section\">\n              <InputField\n                label=\"Name\"\n                name=\"name\"\n                type={TextInputTypes.text}\n                isDisabled={!!existingPipeline}\n                required\n              />\n            </div>\n\n            <div>\n              <h2>Parameters</h2>\n              <PipelineParameters addLabel=\"Add Parameters\" fieldName=\"params\" />\n            </div>\n\n            <div>\n              <h2>Resources</h2>\n              <PipelineResources addLabel=\"Add Resources\" fieldName=\"resources\" />\n            </div>\n\n            <div>\n              <h2>Tasks</h2>\n              <PipelineBuilderVisualization\n                namespace={namespace}\n                tasksInError={status?.tasks || {}}\n                onTaskSelection={(task, resource) => {\n                  setSelectedTask({\n                    taskIndex: values.tasks.findIndex(({ name }) => name === task.name),\n                    resource,\n                  });\n                }}\n                onUpdateTasks={(updatedTaskGroup, op) =>\n                  updateTasks(applyChange(updatedTaskGroup, op))\n                }\n                taskGroup={taskGroup}\n              />\n              <p className=\"help-block\">\n                노드 간 순차 혹은 병렬 배치를 통해 연결하여 파이프라인을 생성할 수 있습니다.\n              </p>\n            </div>\n\n            <FormFooter\n              handleReset={closeSidebarAndHandleReset}\n              errorMessage={status?.submitError}\n              isSubmitting={isSubmitting}\n              submitLabel={existingPipeline ? 'Save' : 'Create'}\n              disableSubmit={\n                !dirty ||\n                !_.isEmpty(errors) ||\n                !_.isEmpty(status?.tasks) ||\n                values.tasks.length === 0\n              }\n              resetLabel=\"Cancel\"\n              sticky\n            />\n          </Form>\n        </StackItem>\n      </Stack>\n      <Sidebar\n        open={!!selectedTask}\n        onRequestClose={() => {\n          if (selectedTask?.taskIndex === selectedTaskRef.current?.taskIndex) {\n            setSelectedTask(null);\n          }\n        }}\n      >\n        {() => (\n          <div className=\"pf-c-form\">\n            <TaskSidebar\n              // Intentional remount when selection changes\n              key={selectedTask.taskIndex}\n              resourceList={values.resources || []}\n              errorMap={status?.tasks || {}}\n              onUpdateTask={(data: UpdateOperationUpdateTaskData) => {\n                updateTasks(\n                  applyChange(taskGroup, { type: UpdateOperationType.UPDATE_TASK, data }),\n                );\n              }}\n              onRemoveTask={(taskName) => {\n                removeTaskModal(taskName, () => {\n                  setSelectedTask(null);\n                  updateTasks(\n                    applyChange(taskGroup, {\n                      type: UpdateOperationType.REMOVE_TASK,\n                      data: { taskName },\n                    }),\n                  );\n                });\n              }}\n              selectedPipelineTaskIndex={selectedTask.taskIndex}\n              taskResource={selectedTask.resource}\n            />\n          </div>\n        )}\n      </Sidebar>\n    </>\n  );\n};\n\nexport default PipelineBuilderForm;\n"]}]}