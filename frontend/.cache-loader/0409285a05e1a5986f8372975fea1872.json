{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/terminal.jsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/terminal.jsx","mtime":1616735742480},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Terminal as XTerminal } from 'xterm';\nimport * as fit from 'xterm/lib/addons/fit/fit';\nimport * as full from 'xterm/lib/addons/fullscreen/fullscreen';\nimport { CompressIcon } from '@patternfly/react-icons';\nimport { Button } from '@patternfly/react-core';\nXTerminal.applyAddon(fit);\nXTerminal.applyAddon(full);\nexport class Terminal extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { height: 0, width: 0 };\n        this.innerRef = React.createRef();\n        this.outerRef = React.createRef();\n        this.isFullscreen = false;\n        this.onResize = () => this.onResize_();\n        this.onDataReceived = (data) => this.terminal && this.terminal.write(data);\n        this.terminal = new XTerminal(Object.assign({}, this.props.options));\n        this.terminal.on('data', this.props.onData);\n    }\n    reset() {\n        const terminal = this.terminal;\n        if (!terminal) {\n            return;\n        }\n        terminal.reset();\n        terminal.clear();\n        terminal.setOption('disableStdin', false);\n    }\n    focus() {\n        this.terminal && this.terminal.focus();\n    }\n    enableiOSFix() {\n        document.getElementsByClassName('pf-c-page__main')[0].classList.add('default-overflow');\n        document.getElementById('content-scrollable').classList.add('default-overflow');\n    }\n    disableiOSFix() {\n        document.getElementsByClassName('pf-c-page__main')[0].classList.remove('default-overflow');\n        document.getElementById('content-scrollable').classList.remove('default-overflow');\n    }\n    setFullscreen(fullscreen) {\n        this.terminal.toggleFullScreen(fullscreen);\n        this.isFullscreen = fullscreen;\n        this.focus();\n        this.onResize();\n        // fix iOS bug where masthead overlays fullscreen terminal\n        // see https://bugs.webkit.org/show_bug.cgi?id=160953\n        fullscreen ? this.enableiOSFix() : this.disableiOSFix();\n    }\n    onConnectionClosed(reason) {\n        const terminal = this.terminal;\n        if (!terminal) {\n            return;\n        }\n        this.setFullscreen(false);\n        terminal.write(`\\x1b[31m${reason || 'disconnected'}\\x1b[m\\r\\n`);\n        terminal.cursorHidden = true;\n        terminal.setOption('disableStdin', true);\n        terminal.refresh(terminal.y, terminal.y);\n    }\n    componentDidMount() {\n        this.terminal.open(this.innerRef.current);\n        this.focus();\n        this.onResize();\n        window.addEventListener('resize', this.onResize);\n    }\n    componentWillUnmount() {\n        this.terminal && this.terminal.destroy();\n        window.removeEventListener('resize', this.onResize);\n    }\n    onResize_() {\n        const node = this.outerRef.current;\n        if (!node) {\n            return;\n        }\n        const pageRect = document.getElementsByClassName('pf-c-page')[0].getBoundingClientRect();\n        const bodyRect = document.body.getBoundingClientRect();\n        const nodeRect = node.getBoundingClientRect();\n        const { padding } = this.props;\n        // This assumes we want to fill everything below and to the right.  In full-screen, fill entire viewport\n        const height = Math.floor(pageRect.bottom - (this.isFullscreen ? 0 : nodeRect.top) - padding);\n        const width = Math.floor(bodyRect.width - (this.isFullscreen ? 0 : nodeRect.left) - (this.isFullscreen ? 10 : padding));\n        if (height === this.state.height && width === this.state.width) {\n            return;\n        }\n        // rerender with correct dimensions\n        this.setState({ height, width }, () => {\n            const terminal = this.terminal;\n            if (!terminal) {\n                return;\n            }\n            // tell the terminal to resize itself\n            terminal.fit();\n            // update the pty\n            this.props.onResize(terminal.rows, terminal.cols);\n        });\n    }\n    render() {\n        return (React.createElement(\"div\", { ref: this.outerRef, style: this.state, className: this.props.className },\n            React.createElement(\"div\", { ref: this.innerRef, className: \"console\" }, this.isFullscreen && (React.createElement(Button, { className: \"console-collapse-link\", onClick: () => this.setFullscreen(false), variant: \"link\" },\n                React.createElement(CompressIcon, { className: \"co-icon-space-r\" }),\n                \"Collapse\")))));\n    }\n}\nTerminal.propTypes = {\n    onData: PropTypes.func.isRequired,\n    onResize: PropTypes.func.isRequired,\n    padding: PropTypes.number,\n    options: PropTypes.object,\n};\nTerminal.defaultProps = {\n    padding: 30,\n    options: {\n        fontFamily: 'monospace',\n        fontSize: 16,\n        cursorBlink: false,\n        cols: 80,\n        rows: 25,\n    },\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/terminal.jsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/terminal.jsx"],"names":[],"mappings":"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","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Terminal as XTerminal } from 'xterm';\nimport * as fit from 'xterm/lib/addons/fit/fit';\nimport * as full from 'xterm/lib/addons/fullscreen/fullscreen';\nimport { CompressIcon } from '@patternfly/react-icons';\nimport { Button } from '@patternfly/react-core';\n\nXTerminal.applyAddon(fit);\nXTerminal.applyAddon(full);\n\nexport class Terminal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { height: 0, width: 0 };\n    this.innerRef = React.createRef();\n    this.outerRef = React.createRef();\n    this.isFullscreen = false;\n    this.onResize = () => this.onResize_();\n    this.onDataReceived = (data) => this.terminal && this.terminal.write(data);\n\n    this.terminal = new XTerminal(Object.assign({}, this.props.options));\n    this.terminal.on('data', this.props.onData);\n  }\n\n  reset() {\n    const terminal = this.terminal;\n    if (!terminal) {\n      return;\n    }\n    terminal.reset();\n    terminal.clear();\n    terminal.setOption('disableStdin', false);\n  }\n\n  focus() {\n    this.terminal && this.terminal.focus();\n  }\n\n  enableiOSFix() {\n    document.getElementsByClassName('pf-c-page__main')[0].classList.add('default-overflow');\n    document.getElementById('content-scrollable').classList.add('default-overflow');\n  }\n\n  disableiOSFix() {\n    document.getElementsByClassName('pf-c-page__main')[0].classList.remove('default-overflow');\n    document.getElementById('content-scrollable').classList.remove('default-overflow');\n  }\n\n  setFullscreen(fullscreen) {\n    this.terminal.toggleFullScreen(fullscreen);\n    this.isFullscreen = fullscreen;\n    this.focus();\n    this.onResize();\n    // fix iOS bug where masthead overlays fullscreen terminal\n    // see https://bugs.webkit.org/show_bug.cgi?id=160953\n    fullscreen ? this.enableiOSFix() : this.disableiOSFix();\n  }\n\n  onConnectionClosed(reason) {\n    const terminal = this.terminal;\n    if (!terminal) {\n      return;\n    }\n    this.setFullscreen(false);\n    terminal.write(`\\x1b[31m${reason || 'disconnected'}\\x1b[m\\r\\n`);\n    terminal.cursorHidden = true;\n    terminal.setOption('disableStdin', true);\n    terminal.refresh(terminal.y, terminal.y);\n  }\n\n  componentDidMount() {\n    this.terminal.open(this.innerRef.current);\n    this.focus();\n    this.onResize();\n    window.addEventListener('resize', this.onResize);\n  }\n\n  componentWillUnmount() {\n    this.terminal && this.terminal.destroy();\n    window.removeEventListener('resize', this.onResize);\n  }\n\n  onResize_() {\n    const node = this.outerRef.current;\n\n    if (!node) {\n      return;\n    }\n\n    const pageRect = document.getElementsByClassName('pf-c-page')[0].getBoundingClientRect();\n    const bodyRect = document.body.getBoundingClientRect();\n    const nodeRect = node.getBoundingClientRect();\n\n    const { padding } = this.props;\n\n    // This assumes we want to fill everything below and to the right.  In full-screen, fill entire viewport\n    const height = Math.floor(pageRect.bottom - (this.isFullscreen ? 0 : nodeRect.top) - padding);\n    const width = Math.floor(\n      bodyRect.width - (this.isFullscreen ? 0 : nodeRect.left) - (this.isFullscreen ? 10 : padding),\n    );\n\n    if (height === this.state.height && width === this.state.width) {\n      return;\n    }\n\n    // rerender with correct dimensions\n    this.setState({ height, width }, () => {\n      const terminal = this.terminal;\n      if (!terminal) {\n        return;\n      }\n      // tell the terminal to resize itself\n      terminal.fit();\n      // update the pty\n      this.props.onResize(terminal.rows, terminal.cols);\n    });\n  }\n\n  render() {\n    return (\n      <div ref={this.outerRef} style={this.state} className={this.props.className}>\n        <div ref={this.innerRef} className=\"console\">\n          {this.isFullscreen && (\n            <Button\n              className=\"console-collapse-link\"\n              onClick={() => this.setFullscreen(false)}\n              variant=\"link\"\n            >\n              <CompressIcon className=\"co-icon-space-r\" />\n              Collapse\n            </Button>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nTerminal.propTypes = {\n  onData: PropTypes.func.isRequired,\n  onResize: PropTypes.func.isRequired,\n  padding: PropTypes.number,\n  options: PropTypes.object,\n};\n\nTerminal.defaultProps = {\n  padding: 30,\n  options: {\n    fontFamily: 'monospace',\n    fontSize: 16,\n    cursorBlink: false,\n    cols: 80,\n    rows: 25,\n  },\n};\n"]}]}