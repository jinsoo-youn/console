{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/alert-manager-yaml-editor.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/alert-manager-yaml-editor.tsx","mtime":1615298458740},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Helmet } from 'react-helmet';\nimport { Alert } from '@patternfly/react-core';\nimport { safeLoad } from 'js-yaml';\nimport { AsyncComponent, StatusBox } from '../utils';\nimport { patchAlertmanagerConfig, getAlertmanagerYAML } from './alert-manager-utils';\nconst EditAlertmanagerYAML = (props) => (React.createElement(AsyncComponent, Object.assign({}, props, { loader: () => import('../edit-yaml').then((c) => c.EditYAML), create: false, genericYAML: true })));\nconst AlertmanagerYAMLEditor = ({ obj }) => {\n    const secret = obj;\n    const [errorMsg, setErrorMsg] = React.useState();\n    const [loadErrorMsg, setloadErrorMsg] = React.useState();\n    const [successMsg, setSuccessMsg] = React.useState();\n    const save = (yaml) => {\n        if (_.isEmpty(yaml)) {\n            setErrorMsg('Alertmanager configuration cannot be empty.');\n            setSuccessMsg('');\n            return;\n        }\n        try {\n            safeLoad(yaml);\n        }\n        catch (e) {\n            setErrorMsg(`Error parsing Alertmanager YAML: ${e}`);\n            setSuccessMsg('');\n            return;\n        }\n        patchAlertmanagerConfig(secret, yaml).then((newSecret) => {\n            setSuccessMsg(`${newSecret.metadata.name} has been updated to version ${newSecret.metadata.resourceVersion}`);\n            setErrorMsg('');\n        }, (err) => {\n            setErrorMsg(err.message);\n            setSuccessMsg('');\n        });\n    };\n    if (loadErrorMsg) {\n        return (React.createElement(Alert, { isInline: true, className: \"co-alert co-alert--scrollable\", variant: \"danger\", title: \"An error occurred\" },\n            React.createElement(\"div\", { className: \"co-pre-line\" }, loadErrorMsg)));\n    }\n    const alertmanagerYAML = getAlertmanagerYAML(secret, setloadErrorMsg);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: \"co-m-nav-title\" },\n            React.createElement(\"p\", { className: \"help-block\" }, \"Update this YAML to configure Routes, Receivers, Groupings and other Alertmanager settings.\")),\n        React.createElement(EditAlertmanagerYAML, { onSave: save, obj: alertmanagerYAML },\n            errorMsg && (React.createElement(Alert, { isInline: true, className: \"co-alert co-alert--scrollable\", variant: \"danger\", title: \"An error occurred\" },\n                React.createElement(\"div\", { className: \"co-pre-line\" }, errorMsg))),\n            successMsg && React.createElement(Alert, { isInline: true, className: \"co-alert\", variant: \"success\", title: successMsg }))));\n};\nexport const AlertmanagerYAMLEditorWrapper = React.memo((_a) => {\n    var { obj } = _a, props = __rest(_a, [\"obj\"]);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Helmet, null,\n            React.createElement(\"title\", null, \"Alerting\")),\n        React.createElement(StatusBox, Object.assign({}, obj),\n            React.createElement(AlertmanagerYAMLEditor, Object.assign({}, props, { obj: obj.data })))));\n});\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/alert-manager-yaml-editor.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/alert-manager-yaml-editor.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Helmet } from 'react-helmet';\nimport { Alert } from '@patternfly/react-core';\nimport { safeLoad } from 'js-yaml';\n\nimport { K8sResourceKind } from '../../module/k8s';\nimport { AsyncComponent, StatusBox } from '../utils';\nimport { patchAlertmanagerConfig, getAlertmanagerYAML } from './alert-manager-utils';\n\nconst EditAlertmanagerYAML = (props) => (\n  <AsyncComponent\n    {...props}\n    loader={() => import('../edit-yaml').then((c) => c.EditYAML)}\n    create={false}\n    genericYAML\n  />\n);\n\nconst AlertmanagerYAMLEditor: React.FC<AlertmanagerYAMLEditorProps> = ({ obj }) => {\n  const secret: K8sResourceKind = obj;\n  const [errorMsg, setErrorMsg] = React.useState<string>();\n  const [loadErrorMsg, setloadErrorMsg] = React.useState<string>();\n  const [successMsg, setSuccessMsg] = React.useState<string>();\n\n  const save = (yaml: string) => {\n    if (_.isEmpty(yaml)) {\n      setErrorMsg('Alertmanager configuration cannot be empty.');\n      setSuccessMsg('');\n      return;\n    }\n    try {\n      safeLoad(yaml);\n    } catch (e) {\n      setErrorMsg(`Error parsing Alertmanager YAML: ${e}`);\n      setSuccessMsg('');\n      return;\n    }\n    patchAlertmanagerConfig(secret, yaml).then(\n      (newSecret) => {\n        setSuccessMsg(\n          `${newSecret.metadata.name} has been updated to version ${newSecret.metadata.resourceVersion}`,\n        );\n        setErrorMsg('');\n      },\n      (err) => {\n        setErrorMsg(err.message);\n        setSuccessMsg('');\n      },\n    );\n  };\n\n  if (loadErrorMsg) {\n    return (\n      <Alert\n        isInline\n        className=\"co-alert co-alert--scrollable\"\n        variant=\"danger\"\n        title=\"An error occurred\"\n      >\n        <div className=\"co-pre-line\">{loadErrorMsg}</div>\n      </Alert>\n    );\n  }\n\n  const alertmanagerYAML = getAlertmanagerYAML(secret, setloadErrorMsg);\n\n  return (\n    <>\n      <div className=\"co-m-nav-title\">\n        <p className=\"help-block\">\n          Update this YAML to configure Routes, Receivers, Groupings and other Alertmanager\n          settings.\n        </p>\n      </div>\n      <EditAlertmanagerYAML onSave={save} obj={alertmanagerYAML}>\n        {errorMsg && (\n          <Alert\n            isInline\n            className=\"co-alert co-alert--scrollable\"\n            variant=\"danger\"\n            title=\"An error occurred\"\n          >\n            <div className=\"co-pre-line\">{errorMsg}</div>\n          </Alert>\n        )}\n        {successMsg && <Alert isInline className=\"co-alert\" variant=\"success\" title={successMsg} />}\n      </EditAlertmanagerYAML>\n    </>\n  );\n};\n\nexport const AlertmanagerYAMLEditorWrapper: React.FC<AlertmanagerYAMLEditorWrapperProps> = React.memo(\n  ({ obj, ...props }) => {\n    return (\n      <>\n        <Helmet>\n          <title>Alerting</title>\n        </Helmet>\n        <StatusBox {...obj}>\n          <AlertmanagerYAMLEditor {...props} obj={obj.data} />\n        </StatusBox>\n      </>\n    );\n  },\n);\n\ntype AlertmanagerYAMLEditorWrapperProps = {\n  obj?: {\n    data?: K8sResourceKind;\n    [key: string]: any;\n  };\n};\n\ntype AlertmanagerYAMLEditorProps = {\n  obj?: K8sResourceKind;\n  onCancel?: () => void;\n};\n"]}]}