{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/components/baremetal-hosts/BareMetalHostsPage.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/components/baremetal-hosts/BareMetalHostsPage.tsx","mtime":1615298458670},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { getName, createLookup, getNodeMachineName } from '@console/shared';\nimport { MachineModel, MachineSetModel, NodeModel } from '@console/internal/models';\nimport { MultiListPage } from '@console/internal/components/factory';\nimport { referenceForModel, } from '@console/internal/module/k8s';\nimport { useFlag } from '@console/shared/src/hooks/flag';\nimport { BareMetalHostModel, NodeMaintenanceModel } from '../../models';\nimport { getHostMachine, getNodeMaintenanceNodeName } from '../../selectors';\nimport { getHostStatus } from '../../status/host-status';\nimport { getMachineMachineSetOwner } from '../../selectors/machine';\nimport { hostStatusFilter } from './table-filters';\nimport BareMetalHostsTable from './BareMetalHostsTable';\nimport { NODE_MAINTENANCE_FLAG } from '../../features';\nconst flattenResources = (resources) => {\n    // TODO(jtomasek): Remove loaded check once ListPageWrapper_ is updated to call flatten only\n    // when resources are loaded\n    const loaded = _.every(resources, (resource) => resource.optional ? resource.loaded || !_.isEmpty(resource.loadError) : resource.loaded);\n    const { hosts: { data: hostsData }, machines: { data: machinesData }, machineSets, nodes, nodeMaintenances, } = resources;\n    if (loaded) {\n        const maintenancesByNodeName = createLookup(nodeMaintenances, getNodeMaintenanceNodeName);\n        const nodesByMachineName = createLookup(nodes, getNodeMachineName);\n        const machineSetByUID = createLookup(machineSets);\n        return hostsData.map((host) => {\n            // TODO(jtomasek): replace this with createLookup once there is metal3.io/BareMetalHost annotation\n            // on machines\n            const machine = getHostMachine(host, machinesData);\n            const node = nodesByMachineName[getName(machine)];\n            const nodeMaintenance = maintenancesByNodeName[getName(node)];\n            const machineOwner = getMachineMachineSetOwner(machine);\n            const machineSet = machineOwner && machineSetByUID[machineOwner.uid];\n            const status = getHostStatus({ host, machine, node, nodeMaintenance });\n            // TODO(jtomasek): metadata.name is needed to make 'name' textFilter work.\n            // Remove it when it is possible to pass custom textFilter as a function\n            return {\n                metadata: { name: getName(host) },\n                host,\n                machine,\n                node,\n                nodeMaintenance,\n                machineSet,\n                status,\n            };\n        });\n    }\n    return [];\n};\nconst getCreateProps = ({ namespace }) => {\n    const items = {\n        dialog: 'New with Dialog',\n        yaml: 'New from YAML',\n    };\n    return {\n        items,\n        createLink: (itemName) => {\n            const base = `/k8s/ns/${namespace || 'default'}/${referenceForModel(BareMetalHostModel)}`;\n            switch (itemName) {\n                case 'dialog':\n                    return `${base}/~new/form`;\n                case 'yaml':\n                default:\n                    return `${base}/~new`;\n            }\n        },\n    };\n};\nconst BareMetalHostsPage = (props) => {\n    const hasNodeMaintenanceCapability = useFlag(NODE_MAINTENANCE_FLAG);\n    const { namespace } = props;\n    const resources = [\n        {\n            kind: referenceForModel(BareMetalHostModel),\n            namespaced: true,\n            prop: 'hosts',\n        },\n        {\n            kind: referenceForModel(MachineModel),\n            namespaced: true,\n            prop: 'machines',\n        },\n        {\n            kind: referenceForModel(MachineSetModel),\n            namespaced: true,\n            isList: true,\n            prop: 'machineSets',\n        },\n        {\n            kind: NodeModel.kind,\n            namespaced: false,\n            prop: 'nodes',\n        },\n    ];\n    if (hasNodeMaintenanceCapability) {\n        resources.push({\n            kind: referenceForModel(NodeMaintenanceModel),\n            namespaced: false,\n            isList: true,\n            prop: 'nodeMaintenances',\n            optional: true,\n        });\n    }\n    return (React.createElement(MultiListPage, Object.assign({}, props, { canCreate: true, rowFilters: [hostStatusFilter], createProps: getCreateProps({ namespace }), createButtonText: \"Add Host\", namespace: namespace, resources: resources, flatten: flattenResources, ListComponent: BareMetalHostsTable, title: \"Bare Metal Hosts\" })));\n};\nexport default BareMetalHostsPage;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/components/baremetal-hosts/BareMetalHostsPage.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/components/baremetal-hosts/BareMetalHostsPage.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { getName, createLookup, getNodeMachineName } from '@console/shared';\nimport { MachineModel, MachineSetModel, NodeModel } from '@console/internal/models';\nimport { MultiListPage } from '@console/internal/components/factory';\nimport { FirehoseResource, FirehoseResult } from '@console/internal/components/utils';\nimport {\n  MachineKind,\n  MachineSetKind,\n  NodeKind,\n  referenceForModel,\n} from '@console/internal/module/k8s';\nimport { useFlag } from '@console/shared/src/hooks/flag';\nimport { BareMetalHostModel, NodeMaintenanceModel } from '../../models';\nimport { getHostMachine, getNodeMaintenanceNodeName } from '../../selectors';\nimport { getHostStatus } from '../../status/host-status';\nimport { BareMetalHostBundle } from '../types';\nimport { BareMetalHostKind } from '../../types';\nimport { getMachineMachineSetOwner } from '../../selectors/machine';\nimport { hostStatusFilter } from './table-filters';\nimport BareMetalHostsTable from './BareMetalHostsTable';\nimport { NODE_MAINTENANCE_FLAG } from '../../features';\n\ntype Resources = {\n  hosts: FirehoseResult<BareMetalHostKind[]>;\n  machines: FirehoseResult<MachineKind[]>;\n  machineSets: FirehoseResult<MachineSetKind[]>;\n  nodes: FirehoseResult<NodeKind[]>;\n  nodeMaintenances: FirehoseResult;\n};\n\nconst flattenResources = (resources: Resources) => {\n  // TODO(jtomasek): Remove loaded check once ListPageWrapper_ is updated to call flatten only\n  // when resources are loaded\n  const loaded = _.every(resources, (resource) =>\n    resource.optional ? resource.loaded || !_.isEmpty(resource.loadError) : resource.loaded,\n  );\n  const {\n    hosts: { data: hostsData },\n    machines: { data: machinesData },\n    machineSets,\n    nodes,\n    nodeMaintenances,\n  } = resources;\n\n  if (loaded) {\n    const maintenancesByNodeName = createLookup(nodeMaintenances, getNodeMaintenanceNodeName);\n    const nodesByMachineName = createLookup(nodes, getNodeMachineName);\n    const machineSetByUID = createLookup(machineSets);\n\n    return hostsData.map(\n      (host): BareMetalHostBundle => {\n        // TODO(jtomasek): replace this with createLookup once there is metal3.io/BareMetalHost annotation\n        // on machines\n        const machine = getHostMachine(host, machinesData);\n        const node = nodesByMachineName[getName(machine)];\n        const nodeMaintenance = maintenancesByNodeName[getName(node)];\n        const machineOwner = getMachineMachineSetOwner(machine);\n        const machineSet = machineOwner && machineSetByUID[machineOwner.uid];\n\n        const status = getHostStatus({ host, machine, node, nodeMaintenance });\n        // TODO(jtomasek): metadata.name is needed to make 'name' textFilter work.\n        // Remove it when it is possible to pass custom textFilter as a function\n        return {\n          metadata: { name: getName(host) },\n          host,\n          machine,\n          node,\n          nodeMaintenance,\n          machineSet,\n          status,\n        };\n      },\n    );\n  }\n  return [];\n};\n\ntype BareMetalHostsPageProps = {\n  namespace: string;\n};\n\nconst getCreateProps = ({ namespace }: { namespace: string }) => {\n  const items: any = {\n    dialog: 'New with Dialog',\n    yaml: 'New from YAML',\n  };\n\n  return {\n    items,\n    createLink: (itemName) => {\n      const base = `/k8s/ns/${namespace || 'default'}/${referenceForModel(BareMetalHostModel)}`;\n\n      switch (itemName) {\n        case 'dialog':\n          return `${base}/~new/form`;\n        case 'yaml':\n        default:\n          return `${base}/~new`;\n      }\n    },\n  };\n};\n\nconst BareMetalHostsPage: React.FC<BareMetalHostsPageProps> = (props) => {\n  const hasNodeMaintenanceCapability = useFlag(NODE_MAINTENANCE_FLAG);\n  const { namespace } = props;\n  const resources: FirehoseResource[] = [\n    {\n      kind: referenceForModel(BareMetalHostModel),\n      namespaced: true,\n      prop: 'hosts',\n    },\n    {\n      kind: referenceForModel(MachineModel),\n      namespaced: true,\n      prop: 'machines',\n    },\n    {\n      kind: referenceForModel(MachineSetModel),\n      namespaced: true,\n      isList: true,\n      prop: 'machineSets',\n    },\n    {\n      kind: NodeModel.kind,\n      namespaced: false,\n      prop: 'nodes',\n    },\n  ];\n\n  if (hasNodeMaintenanceCapability) {\n    resources.push({\n      kind: referenceForModel(NodeMaintenanceModel),\n      namespaced: false,\n      isList: true,\n      prop: 'nodeMaintenances',\n      optional: true,\n    });\n  }\n\n  return (\n    <MultiListPage\n      {...props}\n      canCreate\n      rowFilters={[hostStatusFilter]}\n      createProps={getCreateProps({ namespace })}\n      createButtonText=\"Add Host\"\n      namespace={namespace}\n      resources={resources}\n      flatten={flattenResources}\n      ListComponent={BareMetalHostsTable}\n      title=\"Bare Metal Hosts\"\n    />\n  );\n};\n\nexport default BareMetalHostsPage;\n"]}]}