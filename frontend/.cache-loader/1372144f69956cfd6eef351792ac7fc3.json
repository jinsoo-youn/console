{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/inventory-card.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/inventory-card.tsx","mtime":1615298458590},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport { withDashboardResources, } from '@console/internal/components/dashboard/with-dashboard-resources';\nimport { getNodeStatusGroups, getPVCStatusGroups, getPVStatusGroups, } from '@console/shared/src/components/dashboard/inventory-card/utils';\nimport { NodeModel, PersistentVolumeClaimModel, PersistentVolumeModel, StorageClassModel, } from '@console/internal/models';\nimport { ResourceInventoryItem } from '@console/shared/src/components/dashboard/inventory-card/InventoryItem';\nimport { getCephNodes, getCephPVs, getCephPVCs, getCephSC, cephStorageLabel, } from '../../../selectors';\nconst k8sResources = [\n    {\n        isList: true,\n        kind: PersistentVolumeModel.kind,\n        prop: 'pvs',\n    },\n    {\n        isList: true,\n        kind: NodeModel.kind,\n        prop: 'nodes',\n    },\n    {\n        isList: true,\n        kind: PersistentVolumeClaimModel.kind,\n        prop: 'pvcs',\n    },\n    {\n        isList: true,\n        kind: StorageClassModel.kind,\n        prop: 'sc',\n    },\n];\nconst InventoryCard = ({ watchK8sResource, stopWatchK8sResource, resources, }) => {\n    React.useEffect(() => {\n        k8sResources.forEach((r) => watchK8sResource(r));\n        return () => {\n            k8sResources.forEach((r) => stopWatchK8sResource(r));\n        };\n    }, [watchK8sResource, stopWatchK8sResource]);\n    const nodesLoaded = _.get(resources.nodes, 'loaded');\n    const nodesLoadError = _.get(resources.nodes, 'loadError');\n    const nodesData = _.get(resources.nodes, 'data', []);\n    const pvcsLoaded = _.get(resources.pvcs, 'loaded');\n    const pvcsLoadError = _.get(resources.pvcs, 'loadError');\n    const pvcsData = _.get(resources.pvcs, 'data', []);\n    const pvsLoaded = _.get(resources.pvs, 'loaded');\n    const pvsLoadError = _.get(resources.pvs, 'loadError');\n    const pvsData = _.get(resources.pvs, 'data', []);\n    const scData = _.get(resources.sc, 'data', []);\n    const filteredCephSC = getCephSC(scData);\n    const filteredSCNames = filteredCephSC.map((sc) => _.get(sc, 'metadata.name'));\n    const ocsNodesHref = `/search?kind=${NodeModel.kind}&q=${cephStorageLabel}`;\n    return (React.createElement(DashboardCard, null,\n        React.createElement(DashboardCardHeader, null,\n            React.createElement(DashboardCardTitle, null, \"Inventory\")),\n        React.createElement(DashboardCardBody, null,\n            React.createElement(ResourceInventoryItem, { isLoading: !nodesLoaded, error: !!nodesLoadError, kind: NodeModel, resources: getCephNodes(nodesData), mapper: getNodeStatusGroups, basePath: ocsNodesHref }),\n            React.createElement(ResourceInventoryItem, { isLoading: !pvcsLoaded, error: !!pvcsLoadError, kind: PersistentVolumeClaimModel, useAbbr: true, resources: getCephPVCs(filteredSCNames, pvcsData, pvsData), mapper: getPVCStatusGroups, showLink: false }),\n            React.createElement(ResourceInventoryItem, { isLoading: !pvsLoaded, error: !!pvsLoadError, kind: PersistentVolumeModel, useAbbr: true, resources: getCephPVs(pvsData), mapper: getPVStatusGroups, showLink: false }))));\n};\nexport default withDashboardResources(InventoryCard);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/inventory-card.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/inventory-card.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport {\n  DashboardItemProps,\n  withDashboardResources,\n} from '@console/internal/components/dashboard/with-dashboard-resources';\nimport { FirehoseResource } from '@console/internal/components/utils';\nimport {\n  getNodeStatusGroups,\n  getPVCStatusGroups,\n  getPVStatusGroups,\n} from '@console/shared/src/components/dashboard/inventory-card/utils';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport {\n  NodeModel,\n  PersistentVolumeClaimModel,\n  PersistentVolumeModel,\n  StorageClassModel,\n} from '@console/internal/models';\nimport { ResourceInventoryItem } from '@console/shared/src/components/dashboard/inventory-card/InventoryItem';\nimport {\n  getCephNodes,\n  getCephPVs,\n  getCephPVCs,\n  getCephSC,\n  cephStorageLabel,\n} from '../../../selectors';\n\nconst k8sResources: FirehoseResource[] = [\n  {\n    isList: true,\n    kind: PersistentVolumeModel.kind,\n    prop: 'pvs',\n  },\n  {\n    isList: true,\n    kind: NodeModel.kind,\n    prop: 'nodes',\n  },\n  {\n    isList: true,\n    kind: PersistentVolumeClaimModel.kind,\n    prop: 'pvcs',\n  },\n  {\n    isList: true,\n    kind: StorageClassModel.kind,\n    prop: 'sc',\n  },\n];\n\nconst InventoryCard: React.FC<DashboardItemProps> = ({\n  watchK8sResource,\n  stopWatchK8sResource,\n  resources,\n}) => {\n  React.useEffect(() => {\n    k8sResources.forEach((r) => watchK8sResource(r));\n    return () => {\n      k8sResources.forEach((r) => stopWatchK8sResource(r));\n    };\n  }, [watchK8sResource, stopWatchK8sResource]);\n\n  const nodesLoaded = _.get(resources.nodes, 'loaded');\n  const nodesLoadError = _.get(resources.nodes, 'loadError');\n  const nodesData = _.get(resources.nodes, 'data', []) as K8sResourceKind[];\n\n  const pvcsLoaded = _.get(resources.pvcs, 'loaded');\n  const pvcsLoadError = _.get(resources.pvcs, 'loadError');\n  const pvcsData = _.get(resources.pvcs, 'data', []) as K8sResourceKind[];\n\n  const pvsLoaded = _.get(resources.pvs, 'loaded');\n  const pvsLoadError = _.get(resources.pvs, 'loadError');\n  const pvsData = _.get(resources.pvs, 'data', []) as K8sResourceKind[];\n\n  const scData = _.get(resources.sc, 'data', []) as K8sResourceKind[];\n  const filteredCephSC = getCephSC(scData);\n  const filteredSCNames = filteredCephSC.map((sc) => _.get(sc, 'metadata.name'));\n  const ocsNodesHref = `/search?kind=${NodeModel.kind}&q=${cephStorageLabel}`;\n\n  return (\n    <DashboardCard>\n      <DashboardCardHeader>\n        <DashboardCardTitle>Inventory</DashboardCardTitle>\n      </DashboardCardHeader>\n      <DashboardCardBody>\n        <ResourceInventoryItem\n          isLoading={!nodesLoaded}\n          error={!!nodesLoadError}\n          kind={NodeModel}\n          resources={getCephNodes(nodesData)}\n          mapper={getNodeStatusGroups}\n          basePath={ocsNodesHref}\n        />\n        <ResourceInventoryItem\n          isLoading={!pvcsLoaded}\n          error={!!pvcsLoadError}\n          kind={PersistentVolumeClaimModel}\n          useAbbr\n          resources={getCephPVCs(filteredSCNames, pvcsData, pvsData)}\n          mapper={getPVCStatusGroups}\n          showLink={false}\n        />\n        <ResourceInventoryItem\n          isLoading={!pvsLoaded}\n          error={!!pvsLoadError}\n          kind={PersistentVolumeModel}\n          useAbbr\n          resources={getCephPVs(pvsData)}\n          mapper={getPVStatusGroups}\n          showLink={false}\n        />\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n};\n\nexport default withDashboardResources(InventoryCard);\n"]}]}