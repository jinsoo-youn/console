{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/dashboard/utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/dashboard/utils.ts","mtime":1616735742440},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { HealthState, healthPriority, } from '@console/shared/src/components/dashboard/status-card/states';\nimport { getOperatorsStatus } from '@console/shared/src/components/dashboard/status-card/state-utils';\nimport { getSubscriptionStatus, getCSVStatus, subscriptionForCSV } from '../../status/csv-status';\nimport { SubscriptionState, ClusterServiceVersionStatus, } from '../../types';\nconst getOperatorStatus = (subscriptionStatus, csvStatus) => {\n    let operatorHealth;\n    switch (csvStatus.status) {\n        case ClusterServiceVersionStatus.Failed:\n            operatorHealth = HealthState.ERROR;\n            break;\n        case ClusterServiceVersionStatus.Pending:\n            operatorHealth = HealthState.PROGRESS;\n            break;\n        case ClusterServiceVersionStatus.Unknown:\n            operatorHealth = HealthState.UNKNOWN;\n            break;\n        default:\n            operatorHealth = HealthState.OK;\n    }\n    if (operatorHealth !== HealthState.ERROR &&\n        subscriptionStatus.status === SubscriptionState.SubscriptionStateUpgradePending) {\n        return Object.assign(Object.assign({}, healthPriority[HealthState.UPDATING]), { title: subscriptionStatus.title });\n    }\n    return Object.assign(Object.assign({}, healthPriority[operatorHealth]), { title: csvStatus.title });\n};\nconst getCSVPriorityStatus = (csv, subscriptions) => {\n    const subscriptionStatus = getSubscriptionStatus(subscriptionForCSV(subscriptions, csv));\n    const csvStatus = getCSVStatus(csv);\n    return getOperatorStatus(subscriptionStatus, csvStatus);\n};\nexport const getClusterServiceVersionsWithStatuses = (resources) => {\n    const grouppedOperators = _.groupBy(resources.clusterServiceVersions.data, (o) => o.metadata.name);\n    return _.values(grouppedOperators).map((operators) => getOperatorsStatus(operators, (csv) => getCSVPriorityStatus(csv, resources.subscriptions.data)));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/dashboard/utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/dashboard/utils.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,EACL,WAAW,EACX,cAAc,GACf,MAAM,6DAA6D,CAAC;AAErE,OAAO,EAAE,kBAAkB,EAAE,MAAM,kEAAkE,CAAC;AACtG,OAAO,EAAE,qBAAqB,EAAE,YAAY,EAAE,kBAAkB,EAAE,MAAM,yBAAyB,CAAC;AAClG,OAAO,EAGL,iBAAiB,EACjB,2BAA2B,GAC5B,MAAM,aAAa,CAAC;AAErB,MAAM,iBAAiB,GAAG,CACxB,kBAAiE,EACjE,SAAkE,EAC1C,EAAE;IAC1B,IAAI,cAA2B,CAAC;IAChC,QAAQ,SAAS,CAAC,MAAM,EAAE;QACxB,KAAK,2BAA2B,CAAC,MAAM;YACrC,cAAc,GAAG,WAAW,CAAC,KAAK,CAAC;YACnC,MAAM;QACR,KAAK,2BAA2B,CAAC,OAAO;YACtC,cAAc,GAAG,WAAW,CAAC,QAAQ,CAAC;YACtC,MAAM;QACR,KAAK,2BAA2B,CAAC,OAAO;YACtC,cAAc,GAAG,WAAW,CAAC,OAAO,CAAC;YACrC,MAAM;QACR;YACE,cAAc,GAAG,WAAW,CAAC,EAAE,CAAC;KACnC;IACD,IACE,cAAc,KAAK,WAAW,CAAC,KAAK;QACpC,kBAAkB,CAAC,MAAM,KAAK,iBAAiB,CAAC,+BAA+B,EAC/E;QACA,uCACK,cAAc,CAAC,WAAW,CAAC,QAAQ,CAAC,KACvC,KAAK,EAAE,kBAAkB,CAAC,KAAK,IAC/B;KACH;IACD,uCACK,cAAc,CAAC,cAAc,CAAC,KACjC,KAAK,EAAE,SAAS,CAAC,KAAK,IACtB;AACJ,CAAC,CAAC;AAEF,MAAM,oBAAoB,GAAG,CAC3B,GAA8B,EAC9B,aAAiC,EACT,EAAE;IAC1B,MAAM,kBAAkB,GAAG,qBAAqB,CAAC,kBAAkB,CAAC,aAAa,EAAE,GAAG,CAAC,CAAC,CAAC;IACzF,MAAM,SAAS,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC;IACpC,OAAO,iBAAiB,CAAC,kBAAkB,EAAE,SAAS,CAAC,CAAC;AAC1D,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,qCAAqC,GAAwD,CACxG,SAAS,EACT,EAAE;IACF,MAAM,iBAAiB,GAAG,CAAC,CAAC,OAAO,CACjC,SAAS,CAAC,sBAAsB,CAAC,IAAmC,EACpE,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,CACvB,CAAC;IACF,OAAO,CAAC,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,EAAE,CACnD,kBAAkB,CAA4B,SAAS,EAAE,CAAC,GAAG,EAAE,EAAE,CAC/D,oBAAoB,CAAC,GAAG,EAAE,SAAS,CAAC,aAAa,CAAC,IAA0B,CAAC,CAC9E,CACF,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import * as _ from 'lodash';\nimport {\n  HealthState,\n  healthPriority,\n} from '@console/shared/src/components/dashboard/status-card/states';\nimport { OperatorStatusPriority, GetOperatorsWithStatuses } from '@console/plugin-sdk';\nimport { getOperatorsStatus } from '@console/shared/src/components/dashboard/status-card/state-utils';\nimport { getSubscriptionStatus, getCSVStatus, subscriptionForCSV } from '../../status/csv-status';\nimport {\n  ClusterServiceVersionKind,\n  SubscriptionKind,\n  SubscriptionState,\n  ClusterServiceVersionStatus,\n} from '../../types';\n\nconst getOperatorStatus = (\n  subscriptionStatus: { status: SubscriptionState; title?: string },\n  csvStatus: { status: ClusterServiceVersionStatus; title?: string },\n): OperatorStatusPriority => {\n  let operatorHealth: HealthState;\n  switch (csvStatus.status) {\n    case ClusterServiceVersionStatus.Failed:\n      operatorHealth = HealthState.ERROR;\n      break;\n    case ClusterServiceVersionStatus.Pending:\n      operatorHealth = HealthState.PROGRESS;\n      break;\n    case ClusterServiceVersionStatus.Unknown:\n      operatorHealth = HealthState.UNKNOWN;\n      break;\n    default:\n      operatorHealth = HealthState.OK;\n  }\n  if (\n    operatorHealth !== HealthState.ERROR &&\n    subscriptionStatus.status === SubscriptionState.SubscriptionStateUpgradePending\n  ) {\n    return {\n      ...healthPriority[HealthState.UPDATING],\n      title: subscriptionStatus.title,\n    };\n  }\n  return {\n    ...healthPriority[operatorHealth],\n    title: csvStatus.title,\n  };\n};\n\nconst getCSVPriorityStatus = (\n  csv: ClusterServiceVersionKind,\n  subscriptions: SubscriptionKind[],\n): OperatorStatusPriority => {\n  const subscriptionStatus = getSubscriptionStatus(subscriptionForCSV(subscriptions, csv));\n  const csvStatus = getCSVStatus(csv);\n  return getOperatorStatus(subscriptionStatus, csvStatus);\n};\n\nexport const getClusterServiceVersionsWithStatuses: GetOperatorsWithStatuses<ClusterServiceVersionKind> = (\n  resources,\n) => {\n  const grouppedOperators = _.groupBy(\n    resources.clusterServiceVersions.data as ClusterServiceVersionKind[],\n    (o) => o.metadata.name,\n  );\n  return _.values(grouppedOperators).map((operators) =>\n    getOperatorsStatus<ClusterServiceVersionKind>(operators, (csv) =>\n      getCSVPriorityStatus(csv, resources.subscriptions.data as SubscriptionKind[]),\n    ),\n  );\n};\n"]}]}