{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm/cloud-init-data-helper.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm/cloud-init-data-helper.tsx","mtime":1616735742430},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { safeLoad, safeDump } from 'js-yaml';\nconst safeAtob = (value) => {\n    try {\n        return atob(value);\n    }\n    catch (ignored) {\n        return '';\n    }\n};\nexport var CloudInitDataFormKeys;\n(function (CloudInitDataFormKeys) {\n    CloudInitDataFormKeys[\"NAME\"] = \"name\";\n    CloudInitDataFormKeys[\"HOSTNAME\"] = \"hostname\";\n    CloudInitDataFormKeys[\"SSH_AUTHORIZED_KEYS\"] = \"ssh_authorized_keys\";\n})(CloudInitDataFormKeys || (CloudInitDataFormKeys = {}));\nexport const CLOUD_CONFIG_HEADER = '#cloud-config';\nexport const formAllowedKeys = new Set([\n    CloudInitDataFormKeys.NAME,\n    CloudInitDataFormKeys.HOSTNAME,\n    CloudInitDataFormKeys.SSH_AUTHORIZED_KEYS,\n]);\nexport class CloudInitDataHelper {\n    constructor(cloudInitNoCloud) {\n        this.cloudConfigData = null;\n        this.otherFormatData = null;\n        this.isEmpty = () => !this.otherFormatData && _.isEmpty(this.cloudConfigData);\n        this.includesOnlyFormValues = () => this.cloudConfigData\n            ? Object.keys(this.cloudConfigData).every((key) => formAllowedKeys.has(key))\n            : !this.otherFormatData;\n        this.areAllFormValuesEmpty = () => this.isEmpty() ||\n            (this.includesOnlyFormValues() &&\n                !Object.keys(this.cloudConfigData).find((key) => this.has(key) && key !== CloudInitDataFormKeys.NAME));\n        this.getUserData = () => {\n            if (this.cloudConfigData) {\n                const resultData = safeDump(this.cloudConfigData);\n                return this.header ? `${this.header}\\n${resultData}` : resultData;\n            }\n            return this.otherFormatData;\n        };\n        this.get = (key) => this.cloudConfigData && this.cloudConfigData[key];\n        this.has = (key) => !!this.get(key);\n        this.set = (key, value) => {\n            if (key && !this.otherFormatData) {\n                if (!this.cloudConfigData) {\n                    this.cloudConfigData = {};\n                }\n                if (value === undefined) {\n                    delete this.cloudConfigData[key];\n                }\n                else {\n                    this.cloudConfigData[key] = value;\n                }\n            }\n        };\n        this.makeFormCompliant = () => {\n            this.header = CLOUD_CONFIG_HEADER;\n            this.otherFormatData = undefined;\n            if (!this.cloudConfigData) {\n                this.cloudConfigData = {};\n            }\n            Object.keys(this.cloudConfigData).forEach((key) => {\n                if (!formAllowedKeys.has(key)) {\n                    delete this.cloudConfigData[key];\n                }\n            });\n            if (!this.cloudConfigData[CloudInitDataFormKeys.NAME]) {\n                this.cloudConfigData[CloudInitDataFormKeys.NAME] = 'default'; // root account might not be enabled\n            }\n        };\n        this.asCloudInitNoCloudSource = () => CloudInitDataHelper.toCloudInitNoCloudSource(this.getUserData(), this.base64);\n        const [userData, isBase64] = CloudInitDataHelper.getUserData(cloudInitNoCloud);\n        this.base64 = isBase64;\n        const firstLineSepIndex = userData ? userData.indexOf('\\n') : -1;\n        const header = firstLineSepIndex === -1 ? undefined : userData.substring(0, firstLineSepIndex);\n        const rest = firstLineSepIndex === -1 ? undefined : userData.substring(firstLineSepIndex + 1);\n        if (_.trimEnd(header) === CLOUD_CONFIG_HEADER) {\n            try {\n                this.cloudConfigData = safeLoad(rest);\n                this.header = header;\n            }\n            catch (e) {\n                this.otherFormatData = userData;\n            }\n        }\n        else {\n            this.otherFormatData = userData;\n        }\n    }\n}\nCloudInitDataHelper.getUserData = (cloudInitNoCloud) => {\n    const isBase64 = _.has(cloudInitNoCloud, 'userDataBase64');\n    const userData = isBase64\n        ? safeAtob(cloudInitNoCloud && cloudInitNoCloud.userDataBase64)\n        : cloudInitNoCloud && cloudInitNoCloud.userData;\n    return [userData, isBase64];\n};\nCloudInitDataHelper.toCloudInitNoCloudSource = (userData, isBase64) => {\n    if (isBase64) {\n        return { userDataBase64: btoa(userData) };\n    }\n    return { userData };\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm/cloud-init-data-helper.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm/cloud-init-data-helper.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { safeLoad, safeDump } from 'js-yaml';\nimport { V1CloudInitNoCloudSource } from '../../../types/vm/disk/V1CloudInitNoCloudSource';\n\nconst safeAtob = (value: string) => {\n  try {\n    return atob(value);\n  } catch (ignored) {\n    return '';\n  }\n};\n\nexport enum CloudInitDataFormKeys {\n  NAME = 'name',\n  HOSTNAME = 'hostname',\n  SSH_AUTHORIZED_KEYS = 'ssh_authorized_keys',\n}\nexport const CLOUD_CONFIG_HEADER = '#cloud-config';\n\nexport const formAllowedKeys = new Set([\n  CloudInitDataFormKeys.NAME,\n  CloudInitDataFormKeys.HOSTNAME,\n  CloudInitDataFormKeys.SSH_AUTHORIZED_KEYS,\n]);\n\nexport class CloudInitDataHelper {\n  static getUserData = (cloudInitNoCloud?: V1CloudInitNoCloudSource) => {\n    const isBase64 = _.has(cloudInitNoCloud, 'userDataBase64');\n    const userData = isBase64\n      ? safeAtob(cloudInitNoCloud && cloudInitNoCloud.userDataBase64)\n      : cloudInitNoCloud && cloudInitNoCloud.userData;\n    return [userData, isBase64] as [string, boolean];\n  };\n\n  static toCloudInitNoCloudSource = (\n    userData: string,\n    isBase64: boolean,\n  ): V1CloudInitNoCloudSource => {\n    if (isBase64) {\n      return { userDataBase64: btoa(userData) };\n    }\n    return { userData };\n  };\n\n  private header: string;\n\n  private base64: boolean;\n\n  private cloudConfigData: any = null;\n\n  private otherFormatData: any = null;\n\n  constructor(cloudInitNoCloud?: V1CloudInitNoCloudSource) {\n    const [userData, isBase64] = CloudInitDataHelper.getUserData(cloudInitNoCloud);\n    this.base64 = isBase64;\n\n    const firstLineSepIndex = userData ? userData.indexOf('\\n') : -1;\n    const header = firstLineSepIndex === -1 ? undefined : userData.substring(0, firstLineSepIndex);\n    const rest = firstLineSepIndex === -1 ? undefined : userData.substring(firstLineSepIndex + 1);\n\n    if (_.trimEnd(header) === CLOUD_CONFIG_HEADER) {\n      try {\n        this.cloudConfigData = safeLoad(rest);\n        this.header = header;\n      } catch (e) {\n        this.otherFormatData = userData;\n      }\n    } else {\n      this.otherFormatData = userData;\n    }\n  }\n\n  isEmpty = () => !this.otherFormatData && _.isEmpty(this.cloudConfigData);\n\n  includesOnlyFormValues = () =>\n    this.cloudConfigData\n      ? Object.keys(this.cloudConfigData).every((key) => formAllowedKeys.has(key as any))\n      : !this.otherFormatData;\n\n  areAllFormValuesEmpty = () =>\n    this.isEmpty() ||\n    (this.includesOnlyFormValues() &&\n      !Object.keys(this.cloudConfigData).find(\n        (key) => this.has(key) && key !== CloudInitDataFormKeys.NAME,\n      ));\n\n  getUserData = () => {\n    if (this.cloudConfigData) {\n      const resultData = safeDump(this.cloudConfigData);\n      return this.header ? `${this.header}\\n${resultData}` : resultData;\n    }\n    return this.otherFormatData;\n  };\n\n  get = (key: string) => this.cloudConfigData && this.cloudConfigData[key];\n\n  has = (key: string) => !!this.get(key);\n\n  set = (key: string, value: string) => {\n    if (key && !this.otherFormatData) {\n      if (!this.cloudConfigData) {\n        this.cloudConfigData = {};\n      }\n      if (value === undefined) {\n        delete this.cloudConfigData[key];\n      } else {\n        this.cloudConfigData[key] = value;\n      }\n    }\n  };\n\n  makeFormCompliant = () => {\n    this.header = CLOUD_CONFIG_HEADER;\n    this.otherFormatData = undefined;\n    if (!this.cloudConfigData) {\n      this.cloudConfigData = {};\n    }\n    Object.keys(this.cloudConfigData).forEach((key) => {\n      if (!formAllowedKeys.has(key as any)) {\n        delete this.cloudConfigData[key];\n      }\n    });\n    if (!this.cloudConfigData[CloudInitDataFormKeys.NAME]) {\n      this.cloudConfigData[CloudInitDataFormKeys.NAME] = 'default'; // root account might not be enabled\n    }\n  };\n\n  asCloudInitNoCloudSource = () =>\n    CloudInitDataHelper.toCloudInitNoCloudSource(this.getUserData(), this.base64);\n}\n"]}]}