{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/health-checks/create-health-checks-probe-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/health-checks/create-health-checks-probe-utils.ts","mtime":1616735742380},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { RequestType, HealthChecksProbeType } from './health-checks-types';\nimport { Resources } from '../import/import-types';\nimport { healthChecksDefaultValues } from './health-checks-probe-utils';\nexport const constructProbeData = (data, resourceType) => {\n    var _a, _b;\n    const probeData = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, (data.failureThreshold && { failureThreshold: data.failureThreshold })), (data.successThreshold && { successThreshold: data.successThreshold })), (data.requestType === RequestType.ContainerCommand && {\n        exec: data.exec,\n    })), (data.requestType === RequestType.HTTPGET && {\n        httpGet: Object.assign(Object.assign(Object.assign({}, data[data.requestType]), (((_b = (_a = data[data.requestType]) === null || _a === void 0 ? void 0 : _a.scheme) === null || _b === void 0 ? void 0 : _b[0]) === 'HTTPS' && {\n            scheme: data[data.requestType].scheme[0],\n        })), { port: resourceType === Resources.KnativeService ? 0 : _.toInteger(data.httpGet.port) }),\n    })), (data.requestType === RequestType.TCPSocket && {\n        tcpSocket: {\n            port: resourceType === Resources.KnativeService ? 0 : _.toInteger(data.tcpSocket.port),\n        },\n    })), (data.initialDelaySeconds && {\n        initialDelaySeconds: data.initialDelaySeconds,\n    })), (data.periodSeconds && { periodSeconds: data.periodSeconds })), (data.timeoutSeconds && { timeoutSeconds: data.timeoutSeconds }));\n    return probeData;\n};\nexport const getRequestType = (data) => {\n    if (_.has(data, RequestType.HTTPGET))\n        return RequestType.HTTPGET;\n    if (_.has(data, RequestType.TCPSocket))\n        return RequestType.TCPSocket;\n    if (_.has(data, 'exec.command'))\n        return RequestType.ContainerCommand;\n    return '';\n};\nexport const getHealthChecksData = (resource, containerIndex = 0) => {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o;\n    const containers = (_d = (_c = (_b = (_a = resource === null || resource === void 0 ? void 0 : resource.spec) === null || _a === void 0 ? void 0 : _a.template) === null || _b === void 0 ? void 0 : _b.spec) === null || _c === void 0 ? void 0 : _c.containers) !== null && _d !== void 0 ? _d : [];\n    const readinessProbe = (_f = (_e = containers === null || containers === void 0 ? void 0 : containers[containerIndex]) === null || _e === void 0 ? void 0 : _e[HealthChecksProbeType.ReadinessProbe]) !== null && _f !== void 0 ? _f : {};\n    const livenessProbe = (_h = (_g = containers === null || containers === void 0 ? void 0 : containers[containerIndex]) === null || _g === void 0 ? void 0 : _g[HealthChecksProbeType.LivenessProbe]) !== null && _h !== void 0 ? _h : {};\n    const startupProbe = (_k = (_j = containers === null || containers === void 0 ? void 0 : containers[containerIndex]) === null || _j === void 0 ? void 0 : _j[HealthChecksProbeType.StartupProbe]) !== null && _k !== void 0 ? _k : {};\n    const healthChecks = {\n        readinessProbe: {\n            showForm: false,\n            modified: false,\n            enabled: !_.isEmpty(readinessProbe),\n            data: !_.isEmpty(readinessProbe)\n                ? Object.assign(Object.assign(Object.assign({}, readinessProbe), { requestType: getRequestType(readinessProbe) }), (((_l = readinessProbe.httpGet) === null || _l === void 0 ? void 0 : _l.scheme) === 'HTTPS' && {\n                    httpGet: Object.assign(Object.assign({}, readinessProbe.httpGet), { scheme: ['HTTPS'] }),\n                })) : healthChecksDefaultValues.data,\n        },\n        livenessProbe: {\n            showForm: false,\n            modified: false,\n            enabled: !_.isEmpty(livenessProbe),\n            data: !_.isEmpty(livenessProbe)\n                ? Object.assign(Object.assign(Object.assign({}, livenessProbe), { requestType: getRequestType(livenessProbe) }), (((_m = livenessProbe.httpGet) === null || _m === void 0 ? void 0 : _m.scheme) === 'HTTPS' && {\n                    httpGet: Object.assign(Object.assign({}, livenessProbe.httpGet), { scheme: ['HTTPS'] }),\n                })) : healthChecksDefaultValues.data,\n        },\n        startupProbe: {\n            showForm: false,\n            modified: false,\n            enabled: !_.isEmpty(startupProbe),\n            data: !_.isEmpty(startupProbe)\n                ? Object.assign(Object.assign(Object.assign({}, startupProbe), { requestType: getRequestType(startupProbe) }), (((_o = startupProbe.httpGet) === null || _o === void 0 ? void 0 : _o.scheme) === 'HTTPS' && {\n                    httpGet: Object.assign(Object.assign({}, startupProbe.httpGet), { scheme: ['HTTPS'] }),\n                })) : healthChecksDefaultValues.data,\n        },\n    };\n    return healthChecks;\n};\nexport const getProbesData = (healthChecks, resourceType) => {\n    const { readinessProbe, livenessProbe, startupProbe } = healthChecks;\n    return Object.assign(Object.assign(Object.assign({}, (readinessProbe.enabled\n        ? { readinessProbe: constructProbeData(readinessProbe.data, resourceType) }\n        : {})), (livenessProbe.enabled\n        ? { livenessProbe: constructProbeData(livenessProbe.data, resourceType) }\n        : {})), (resourceType !== Resources.KnativeService && (startupProbe === null || startupProbe === void 0 ? void 0 : startupProbe.enabled)\n        ? { startupProbe: constructProbeData(startupProbe.data) }\n        : {}));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/health-checks/create-health-checks-probe-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/health-checks/create-health-checks-probe-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { HealthCheckProbeData, RequestType, HealthChecksProbeType } from './health-checks-types';\nimport { Resources, HealthChecksData } from '../import/import-types';\nimport { healthChecksDefaultValues } from './health-checks-probe-utils';\n\nexport const constructProbeData = (data: HealthCheckProbeData, resourceType?: Resources) => {\n  const probeData = {\n    ...(data.failureThreshold && { failureThreshold: data.failureThreshold }),\n    ...(data.successThreshold && { successThreshold: data.successThreshold }),\n    ...(data.requestType === RequestType.ContainerCommand && {\n      exec: data.exec,\n    }),\n    ...(data.requestType === RequestType.HTTPGET && {\n      httpGet: {\n        ...data[data.requestType],\n        ...(data[data.requestType]?.scheme?.[0] === 'HTTPS' && {\n          scheme: data[data.requestType].scheme[0],\n        }),\n        port: resourceType === Resources.KnativeService ? 0 : _.toInteger(data.httpGet.port),\n      },\n    }),\n    ...(data.requestType === RequestType.TCPSocket && {\n      tcpSocket: {\n        port: resourceType === Resources.KnativeService ? 0 : _.toInteger(data.tcpSocket.port),\n      },\n    }),\n    ...(data.initialDelaySeconds && {\n      initialDelaySeconds: data.initialDelaySeconds,\n    }),\n    ...(data.periodSeconds && { periodSeconds: data.periodSeconds }),\n    ...(data.timeoutSeconds && { timeoutSeconds: data.timeoutSeconds }),\n  };\n  return probeData;\n};\n\nexport const getRequestType = (data: HealthCheckProbeData) => {\n  if (_.has(data, RequestType.HTTPGET)) return RequestType.HTTPGET;\n  if (_.has(data, RequestType.TCPSocket)) return RequestType.TCPSocket;\n  if (_.has(data, 'exec.command')) return RequestType.ContainerCommand;\n  return '';\n};\n\nexport const getHealthChecksData = (\n  resource: K8sResourceKind,\n  containerIndex: number = 0,\n): HealthChecksData => {\n  const containers = resource?.spec?.template?.spec?.containers ?? [];\n  const readinessProbe = containers?.[containerIndex]?.[HealthChecksProbeType.ReadinessProbe] ?? {};\n  const livenessProbe = containers?.[containerIndex]?.[HealthChecksProbeType.LivenessProbe] ?? {};\n  const startupProbe = containers?.[containerIndex]?.[HealthChecksProbeType.StartupProbe] ?? {};\n  const healthChecks = {\n    readinessProbe: {\n      showForm: false,\n      modified: false,\n      enabled: !_.isEmpty(readinessProbe),\n      data: !_.isEmpty(readinessProbe)\n        ? {\n            ...readinessProbe,\n            requestType: getRequestType(readinessProbe),\n            ...(readinessProbe.httpGet?.scheme === 'HTTPS' && {\n              httpGet: { ...readinessProbe.httpGet, scheme: ['HTTPS'] },\n            }),\n          }\n        : healthChecksDefaultValues.data,\n    },\n    livenessProbe: {\n      showForm: false,\n      modified: false,\n      enabled: !_.isEmpty(livenessProbe),\n      data: !_.isEmpty(livenessProbe)\n        ? {\n            ...livenessProbe,\n            requestType: getRequestType(livenessProbe),\n            ...(livenessProbe.httpGet?.scheme === 'HTTPS' && {\n              httpGet: { ...livenessProbe.httpGet, scheme: ['HTTPS'] },\n            }),\n          }\n        : healthChecksDefaultValues.data,\n    },\n    startupProbe: {\n      showForm: false,\n      modified: false,\n      enabled: !_.isEmpty(startupProbe),\n      data: !_.isEmpty(startupProbe)\n        ? {\n            ...startupProbe,\n            requestType: getRequestType(startupProbe),\n            ...(startupProbe.httpGet?.scheme === 'HTTPS' && {\n              httpGet: { ...startupProbe.httpGet, scheme: ['HTTPS'] },\n            }),\n          }\n        : healthChecksDefaultValues.data,\n    },\n  };\n  return healthChecks;\n};\n\nexport const getProbesData = (healthChecks: HealthChecksData, resourceType?: Resources) => {\n  const { readinessProbe, livenessProbe, startupProbe } = healthChecks;\n  return {\n    ...(readinessProbe.enabled\n      ? { readinessProbe: constructProbeData(readinessProbe.data, resourceType) }\n      : {}),\n    ...(livenessProbe.enabled\n      ? { livenessProbe: constructProbeData(livenessProbe.data, resourceType) }\n      : {}),\n    ...(resourceType !== Resources.KnativeService && startupProbe?.enabled\n      ? { startupProbe: constructProbeData(startupProbe.data) }\n      : {}),\n  };\n};\n"]}]}