{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/catalog/catalog-items.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/catalog/catalog-items.tsx","mtime":1615298458720},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Link } from 'react-router-dom';\nimport * as catalogImg from '../../imgs/logos/catalog-icon.svg';\nimport { Badge, Modal } from '@patternfly/react-core';\nimport { CatalogItemHeader, CatalogTile, CatalogTileBadge, } from '@patternfly/react-catalog-view-extension';\nimport { DEV_CATALOG_FILTER_KEY as filterKey } from '@console/shared';\nimport { history } from '../utils/router';\nimport { normalizeIconClass } from './catalog-item-icon';\nimport { CatalogTileDetails } from './catalog-item-details';\nimport { TileViewPage } from '../utils/tile-view-page';\nexport const catalogCategories = {\n    languages: {\n        id: 'languages',\n        label: 'Languages',\n        field: 'tags',\n        subcategories: {\n            java: { id: 'java', label: 'Java', values: ['java'] },\n            javascript: {\n                id: 'javascript',\n                label: 'JavaScript',\n                field: 'tags',\n                values: ['javascript', 'nodejs', 'js'],\n            },\n            dotnet: { id: 'dotnet', label: '.NET', field: 'tags', values: ['dotnet'] },\n            perl: { id: 'perl', label: 'Perl', field: 'tags', values: ['perl'] },\n            ruby: { id: 'ruby', label: 'Ruby', field: 'tags', values: ['ruby'] },\n            php: { id: 'php', label: 'PHP', field: 'tags', values: ['php'] },\n            python: { id: 'python', label: 'Python', field: 'tags', values: ['python'] },\n            golang: { id: 'golang', label: 'Go', field: 'tags', values: ['golang', 'go'] },\n        },\n    },\n    databases: {\n        id: 'databases',\n        label: 'Databases',\n        field: 'tags',\n        subcategories: {\n            mongodb: { id: 'mongodb', label: 'Mongo', field: 'tags', values: ['mongodb'] },\n            mysql: { id: 'mysql', label: 'MySQL', field: 'tags', values: ['mysql'] },\n            postgresql: { id: 'postgresql', label: 'Postgres', field: 'tags', values: ['postgresql'] },\n            mariadb: { id: 'mariadb', label: 'MariaDB', field: 'tags', values: ['mariadb'] },\n        },\n    },\n    middleware: {\n        id: 'middleware',\n        label: 'Middleware',\n        field: 'tags',\n        subcategories: {\n            integration: {\n                id: 'integration',\n                label: 'Integration',\n                field: 'tags',\n                values: ['amq', 'fuse', 'jboss-fuse', 'sso', '3scale'],\n            },\n            processAutomation: {\n                id: 'processAutomation',\n                label: 'Process Automation',\n                field: 'tags',\n                values: ['decisionserver', 'processserver'],\n            },\n            analyticsData: {\n                id: 'analyticsData',\n                label: 'Analytics & Data',\n                field: 'tags',\n                values: ['datagrid', 'datavirt'],\n            },\n            runtimes: {\n                id: 'runtimes',\n                label: 'Runtimes & Frameworks',\n                field: 'tags',\n                values: ['eap', 'httpd', 'tomcat'],\n            },\n        },\n    },\n    cicd: {\n        id: 'cicd',\n        label: 'CI/CD',\n        field: 'tags',\n        subcategories: {\n            jenkins: { id: 'jenkins', label: 'Jenkins', field: 'tags', values: ['jenkins'] },\n            pipelines: { id: 'pipelines', label: 'Pipelines', field: 'tags', values: ['pipelines'] },\n        },\n    },\n    virtualization: {\n        id: 'virtualization',\n        label: 'Virtualization',\n        field: 'tags',\n        subcategories: {\n            vms: { id: 'vms', label: 'Virtual Machines', field: 'tags', values: ['virtualmachine'] },\n        },\n    },\n};\nconst pageDescription = 'Add shared apps, services, or source-to-image builders to your project from the Developer ' +\n    'Catalog. Cluster admins can install additional apps which will show up here automatically.';\n// Filter property white list\nconst filterGroups = ['kind'];\n// initialFilters cannot be typed as it has multiple usages\nconst getAvailableFilters = (initialFilters) => {\n    const filters = _.cloneDeep(initialFilters);\n    filters.kind = {\n        ClusterServiceVersion: {\n            label: 'Operator Backed',\n            value: 'InstalledOperator',\n            active: true,\n        },\n        HelmChart: {\n            label: 'Helm Charts',\n            value: 'HelmChart',\n            active: false,\n        },\n        ImageStream: {\n            label: 'Builder Image',\n            value: 'ImageStream',\n            active: false,\n        },\n        Template: {\n            label: 'Template',\n            value: 'Template',\n            active: false,\n        },\n        ClusterServiceClass: {\n            label: 'Service Class',\n            value: 'ClusterServiceClass',\n            active: false,\n        },\n    };\n    return filters;\n};\nconst filterPreference = ['kind'];\nconst filterGroupNameMap = {\n    kind: 'Type',\n};\nconst GroupByTypes = {\n    Operator: 'Operator',\n    None: 'None',\n};\nconst keywordCompare = (filterString, item) => {\n    if (!filterString) {\n        return true;\n    }\n    if (!item) {\n        return false;\n    }\n    return (item.tileName.toLowerCase().includes(filterString) ||\n        (item.tileDescription && item.tileDescription.toLowerCase().includes(filterString)) ||\n        (item.tags && item.tags.includes(filterString)));\n};\nconst setURLParams = (params) => {\n    const url = new URL(window.location.href);\n    const searchParams = `?${params.toString()}${url.hash}`;\n    history.replace(`${url.pathname}${searchParams}`);\n};\nconst sortByOperators = (items) => {\n    const sortedItemsByOperators = {};\n    _.forEach(Object.keys(items).sort(), (key) => (sortedItemsByOperators[key] = items[key]));\n    return sortedItemsByOperators;\n};\nexport const groupItems = (items, groupBy) => {\n    if (groupBy === GroupByTypes.Operator) {\n        const installedOperators = _.filter(items, (item) => item.kind === 'InstalledOperator');\n        const nonOperators = _.filter(items, (item) => item.kind !== 'InstalledOperator');\n        let groupedOperators = _.groupBy(installedOperators, (item) => item.obj.csv.spec.displayName);\n        groupedOperators = sortByOperators(groupedOperators);\n        const groupAllItems = Object.assign(Object.assign({}, groupedOperators), { 'Non Operators': nonOperators });\n        return groupAllItems;\n    }\n    return items;\n};\nexport class CatalogTileViewPage extends React.Component {\n    constructor(props) {\n        super(props);\n        this.openOverlay = (detailsItem) => {\n            const params = new URLSearchParams(window.location.search);\n            params.set('details-item', _.get(detailsItem, 'obj.metadata.uid'));\n            setURLParams(params);\n            this.setState({ detailsItem });\n        };\n        this.closeOverlay = () => {\n            const params = new URLSearchParams(window.location.search);\n            params.delete('details-item');\n            setURLParams(params);\n            this.setState({ detailsItem: null });\n        };\n        this.renderTile = (item) => {\n            if (!item) {\n                return null;\n            }\n            const { obj, tileName, tileProvider, tileDescription, kind } = item;\n            const uid = obj.metadata.uid;\n            const vendor = tileProvider ? `provided by ${tileProvider}` : null;\n            const { kind: filters } = getAvailableFilters({ kind });\n            const filter = _.find(filters, ['value', kind]);\n            return (React.createElement(CatalogTile, Object.assign({ className: \"co-catalog-tile\", key: uid, onClick: () => this.openOverlay(item), title: tileName, badges: [\n                    React.createElement(CatalogTileBadge, { key: \"type\" },\n                        React.createElement(Badge, { isRead: true }, filter.label)),\n                ] }, this.getIconProps(item), { vendor: vendor, description: tileDescription, \"data-test\": `${kind}-${obj.metadata.name}` })));\n        };\n        this.renderModal = (detailsItem) => {\n            if (!detailsItem) {\n                return null;\n            }\n            return (React.createElement(Modal, { className: \"co-catalog-page__overlay co-catalog-page__overlay--right\", header: React.createElement(React.Fragment, null,\n                    React.createElement(CatalogItemHeader, Object.assign({ title: detailsItem.tileName, vendor: detailsItem.tileProvider ? `Provided by ${detailsItem.tileProvider}` : null }, this.getIconProps(detailsItem))),\n                    React.createElement(\"div\", { className: \"co-catalog-page__overlay-actions\" },\n                        React.createElement(Link, { className: \"pf-c-button pf-m-primary co-catalog-page__overlay-action\", to: detailsItem.href, role: \"button\", title: detailsItem.createLabel, onClick: this.closeOverlay }, detailsItem.createLabel))), isOpen: !!detailsItem, onClose: this.closeOverlay, title: detailsItem.tileName },\n                React.createElement(CatalogTileDetails, { item: detailsItem, closeOverlay: this.closeOverlay })));\n        };\n        this.getIconProps = (item) => {\n            const { tileImgUrl, tileIconClass } = item;\n            if (tileImgUrl) {\n                return { iconImg: tileImgUrl, iconClass: null };\n            }\n            else if (tileIconClass) {\n                return { iconImg: null, iconClass: normalizeIconClass(tileIconClass) };\n            }\n            return { iconImg: catalogImg, iconClass: null };\n        };\n        this.state = { detailsItem: null };\n    }\n    componentDidMount() {\n        const { items } = this.props;\n        const searchParams = new URLSearchParams(window.location.search);\n        const detailsItemID = searchParams.get('details-item');\n        const detailsItem = detailsItemID && _.find(items, (item) => detailsItemID === _.get(item, 'obj.metadata.uid'));\n        this.setState({ detailsItem });\n    }\n    render() {\n        const { items } = this.props;\n        const { detailsItem } = this.state;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(TileViewPage, { items: items, itemsSorter: (itemsToSort) => _.sortBy(itemsToSort, ({ tileName }) => tileName.toLowerCase()), getAvailableCategories: () => catalogCategories, \n                // TODO(alecmerdler): Dynamic filters for each Operator and its provided APIs\n                getAvailableFilters: getAvailableFilters, filterGroups: filterGroups, storeFilterKey: filterKey, filterGroupNameMap: filterGroupNameMap, keywordCompare: keywordCompare, filterRetentionPreference: filterPreference, renderTile: this.renderTile, pageDescription: pageDescription, emptyStateInfo: \"No developer catalog items are being shown due to the filters being applied.\", groupItems: groupItems, groupByTypes: GroupByTypes }),\n            this.renderModal(detailsItem)));\n    }\n}\nCatalogTileViewPage.displayName = `CatalogTileViewPage`;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/catalog/catalog-items.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/catalog/catalog-items.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Link } from 'react-router-dom';\nimport * as catalogImg from '../../imgs/logos/catalog-icon.svg';\nimport { Badge, Modal } from '@patternfly/react-core';\nimport {\n  CatalogItemHeader,\n  CatalogTile,\n  CatalogTileBadge,\n} from '@patternfly/react-catalog-view-extension';\n\nimport { DEV_CATALOG_FILTER_KEY as filterKey } from '@console/shared';\nimport { history } from '../utils/router';\nimport { normalizeIconClass } from './catalog-item-icon';\nimport { CatalogTileDetails } from './catalog-item-details';\nimport { TileViewPage } from '../utils/tile-view-page';\n\ntype Metadata = { uid?: string; name?: string; namespace?: string };\n\nexport type Item = {\n  obj?: {\n    metadata?: Metadata;\n    csv?: { kind?: string; spec: { displayName: string }; metadata?: Metadata };\n  };\n  createLabel: string;\n  href: string;\n  kind?: string;\n  tileName?: string;\n  tileImgUrl?: string;\n  tileIconClass?: string;\n  tileProvider?: string;\n  tileDescription?: string;\n  tags?: string[];\n  longDescription?: string;\n  documentationUrl?: string;\n  supportUrl?: string;\n  markdownDescription?: () => Promise<string>;\n  customProperties?: React.ReactElement;\n};\n\nexport type CatalogTileViewPageProps = {\n  items: Item[];\n};\nexport type CatalogTileViewPageState = {\n  detailsItem: Item;\n};\n\nexport type FilterItem = {\n  label: string;\n  value: string;\n  active: boolean;\n};\n\ntype TypeFilters = {\n  ClusterServiceVersion: FilterItem;\n  HelmChart: FilterItem;\n  ImageStream: FilterItem;\n  Template: FilterItem;\n  ClusterServiceClass: FilterItem;\n};\n\ntype CapabilityFilters = {\n  BasicInstall: FilterItem;\n  SeamlessUpgrades: FilterItem;\n  FullLifecycle: FilterItem;\n  DeepInsights: FilterItem;\n  AutoPilot: FilterItem;\n};\n\ntype PageFilters = {\n  kind: TypeFilters;\n  capabilityLevel: CapabilityFilters;\n};\n\nexport const catalogCategories: Record<\n  string,\n  Record<string, string | Record<string, string | Record<string, any>>>\n> = {\n  languages: {\n    id: 'languages',\n    label: 'Languages',\n    field: 'tags',\n    subcategories: {\n      java: { id: 'java', label: 'Java', values: ['java'] },\n      javascript: {\n        id: 'javascript',\n        label: 'JavaScript',\n        field: 'tags',\n        values: ['javascript', 'nodejs', 'js'],\n      },\n      dotnet: { id: 'dotnet', label: '.NET', field: 'tags', values: ['dotnet'] },\n      perl: { id: 'perl', label: 'Perl', field: 'tags', values: ['perl'] },\n      ruby: { id: 'ruby', label: 'Ruby', field: 'tags', values: ['ruby'] },\n      php: { id: 'php', label: 'PHP', field: 'tags', values: ['php'] },\n      python: { id: 'python', label: 'Python', field: 'tags', values: ['python'] },\n      golang: { id: 'golang', label: 'Go', field: 'tags', values: ['golang', 'go'] },\n    },\n  },\n  databases: {\n    id: 'databases',\n    label: 'Databases',\n    field: 'tags',\n    subcategories: {\n      mongodb: { id: 'mongodb', label: 'Mongo', field: 'tags', values: ['mongodb'] },\n      mysql: { id: 'mysql', label: 'MySQL', field: 'tags', values: ['mysql'] },\n      postgresql: { id: 'postgresql', label: 'Postgres', field: 'tags', values: ['postgresql'] },\n      mariadb: { id: 'mariadb', label: 'MariaDB', field: 'tags', values: ['mariadb'] },\n    },\n  },\n  middleware: {\n    id: 'middleware',\n    label: 'Middleware',\n    field: 'tags',\n    subcategories: {\n      integration: {\n        id: 'integration',\n        label: 'Integration',\n        field: 'tags',\n        values: ['amq', 'fuse', 'jboss-fuse', 'sso', '3scale'],\n      },\n      processAutomation: {\n        id: 'processAutomation',\n        label: 'Process Automation',\n        field: 'tags',\n        values: ['decisionserver', 'processserver'],\n      },\n      analyticsData: {\n        id: 'analyticsData',\n        label: 'Analytics & Data',\n        field: 'tags',\n        values: ['datagrid', 'datavirt'],\n      },\n      runtimes: {\n        id: 'runtimes',\n        label: 'Runtimes & Frameworks',\n        field: 'tags',\n        values: ['eap', 'httpd', 'tomcat'],\n      },\n    },\n  },\n  cicd: {\n    id: 'cicd',\n    label: 'CI/CD',\n    field: 'tags',\n    subcategories: {\n      jenkins: { id: 'jenkins', label: 'Jenkins', field: 'tags', values: ['jenkins'] },\n      pipelines: { id: 'pipelines', label: 'Pipelines', field: 'tags', values: ['pipelines'] },\n    },\n  },\n  virtualization: {\n    id: 'virtualization',\n    label: 'Virtualization',\n    field: 'tags',\n    subcategories: {\n      vms: { id: 'vms', label: 'Virtual Machines', field: 'tags', values: ['virtualmachine'] },\n    },\n  },\n};\n\nconst pageDescription =\n  'Add shared apps, services, or source-to-image builders to your project from the Developer ' +\n  'Catalog. Cluster admins can install additional apps which will show up here automatically.';\n\n// Filter property white list\nconst filterGroups = ['kind'];\n\n// initialFilters cannot be typed as it has multiple usages\nconst getAvailableFilters = (initialFilters): PageFilters => {\n  const filters: PageFilters = _.cloneDeep(initialFilters);\n  filters.kind = {\n    ClusterServiceVersion: {\n      label: 'Operator Backed',\n      value: 'InstalledOperator',\n      active: true,\n    },\n    HelmChart: {\n      label: 'Helm Charts',\n      value: 'HelmChart',\n      active: false,\n    },\n    ImageStream: {\n      label: 'Builder Image',\n      value: 'ImageStream',\n      active: false,\n    },\n    Template: {\n      label: 'Template',\n      value: 'Template',\n      active: false,\n    },\n    ClusterServiceClass: {\n      label: 'Service Class',\n      value: 'ClusterServiceClass',\n      active: false,\n    },\n  };\n\n  return filters;\n};\n\nconst filterPreference = ['kind'];\nconst filterGroupNameMap: Record<string, string> = {\n  kind: 'Type',\n};\n\nconst GroupByTypes: Record<string, string> = {\n  Operator: 'Operator',\n  None: 'None',\n};\n\nconst keywordCompare = (filterString: string, item: Item): boolean => {\n  if (!filterString) {\n    return true;\n  }\n  if (!item) {\n    return false;\n  }\n\n  return (\n    item.tileName.toLowerCase().includes(filterString) ||\n    (item.tileDescription && item.tileDescription.toLowerCase().includes(filterString)) ||\n    (item.tags && item.tags.includes(filterString))\n  );\n};\n\nconst setURLParams = (params): void => {\n  const url = new URL(window.location.href);\n  const searchParams = `?${params.toString()}${url.hash}`;\n\n  history.replace(`${url.pathname}${searchParams}`);\n};\n\nconst sortByOperators = (items: Record<string, Item[]>): Record<string, Item[]> => {\n  const sortedItemsByOperators = {};\n  _.forEach(Object.keys(items).sort(), (key) => (sortedItemsByOperators[key] = items[key]));\n  return sortedItemsByOperators;\n};\n\nexport const groupItems = (items: Item[], groupBy: string): Item[] | Record<string, Item[]> => {\n  if (groupBy === GroupByTypes.Operator) {\n    const installedOperators = _.filter(items, (item) => item.kind === 'InstalledOperator');\n    const nonOperators = _.filter(items, (item) => item.kind !== 'InstalledOperator');\n    let groupedOperators = _.groupBy(installedOperators, (item) => item.obj.csv.spec.displayName);\n    groupedOperators = sortByOperators(groupedOperators);\n    const groupAllItems = { ...groupedOperators, 'Non Operators': nonOperators };\n    return groupAllItems;\n  }\n  return items;\n};\n\nexport class CatalogTileViewPage extends React.Component<\n  CatalogTileViewPageProps,\n  CatalogTileViewPageState\n> {\n  static displayName = `CatalogTileViewPage`;\n\n  constructor(props) {\n    super(props);\n\n    this.state = { detailsItem: null };\n  }\n\n  componentDidMount() {\n    const { items } = this.props;\n    const searchParams = new URLSearchParams(window.location.search);\n    const detailsItemID = searchParams.get('details-item');\n    const detailsItem =\n      detailsItemID && _.find(items, (item) => detailsItemID === _.get(item, 'obj.metadata.uid'));\n    this.setState({ detailsItem });\n  }\n\n  openOverlay = (detailsItem: Item): void => {\n    const params = new URLSearchParams(window.location.search);\n    params.set('details-item', _.get(detailsItem, 'obj.metadata.uid'));\n    setURLParams(params);\n\n    this.setState({ detailsItem });\n  };\n\n  closeOverlay = (): void => {\n    const params = new URLSearchParams(window.location.search);\n    params.delete('details-item');\n    setURLParams(params);\n\n    this.setState({ detailsItem: null });\n  };\n\n  render() {\n    const { items } = this.props;\n    const { detailsItem } = this.state;\n    return (\n      <>\n        <TileViewPage\n          items={items}\n          itemsSorter={(itemsToSort) =>\n            _.sortBy(itemsToSort, ({ tileName }) => tileName.toLowerCase())\n          }\n          getAvailableCategories={() => catalogCategories}\n          // TODO(alecmerdler): Dynamic filters for each Operator and its provided APIs\n          getAvailableFilters={getAvailableFilters}\n          filterGroups={filterGroups}\n          storeFilterKey={filterKey}\n          filterGroupNameMap={filterGroupNameMap}\n          keywordCompare={keywordCompare}\n          filterRetentionPreference={filterPreference}\n          renderTile={this.renderTile}\n          pageDescription={pageDescription}\n          emptyStateInfo=\"No developer catalog items are being shown due to the filters being applied.\"\n          groupItems={groupItems}\n          groupByTypes={GroupByTypes}\n        />\n        {this.renderModal(detailsItem)}\n      </>\n    );\n  }\n\n  renderTile = (item: Item): React.ReactElement => {\n    if (!item) {\n      return null;\n    }\n    const { obj, tileName, tileProvider, tileDescription, kind } = item;\n    const uid = obj.metadata.uid;\n    const vendor = tileProvider ? `provided by ${tileProvider}` : null;\n    const { kind: filters } = getAvailableFilters({ kind });\n    const filter = _.find(filters, ['value', kind]);\n    return (\n      <CatalogTile\n        className=\"co-catalog-tile\"\n        key={uid}\n        onClick={() => this.openOverlay(item)}\n        title={tileName}\n        badges={[\n          <CatalogTileBadge key=\"type\">\n            <Badge isRead>{filter.label}</Badge>\n          </CatalogTileBadge>,\n        ]}\n        {...this.getIconProps(item)}\n        vendor={vendor}\n        description={tileDescription}\n        data-test={`${kind}-${obj.metadata.name}`}\n      />\n    );\n  };\n\n  renderModal = (detailsItem: Item) => {\n    if (!detailsItem) {\n      return null;\n    }\n    return (\n      <Modal\n        className=\"co-catalog-page__overlay co-catalog-page__overlay--right\"\n        header={\n          <>\n            <CatalogItemHeader\n              title={detailsItem.tileName}\n              vendor={detailsItem.tileProvider ? `Provided by ${detailsItem.tileProvider}` : null}\n              {...this.getIconProps(detailsItem)}\n            />\n            <div className=\"co-catalog-page__overlay-actions\">\n              <Link\n                className=\"pf-c-button pf-m-primary co-catalog-page__overlay-action\"\n                to={detailsItem.href}\n                role=\"button\"\n                title={detailsItem.createLabel}\n                onClick={this.closeOverlay}\n              >\n                {detailsItem.createLabel}\n              </Link>\n            </div>\n          </>\n        }\n        isOpen={!!detailsItem}\n        onClose={this.closeOverlay}\n        title={detailsItem.tileName}\n      >\n        <CatalogTileDetails item={detailsItem} closeOverlay={this.closeOverlay} />\n      </Modal>\n    );\n  };\n\n  getIconProps = (item: Item) => {\n    const { tileImgUrl, tileIconClass } = item;\n    if (tileImgUrl) {\n      return { iconImg: tileImgUrl, iconClass: null };\n    } else if (tileIconClass) {\n      return { iconImg: null, iconClass: normalizeIconClass(tileIconClass) };\n    }\n    return { iconImg: catalogImg, iconClass: null };\n  };\n}\n"]}]}