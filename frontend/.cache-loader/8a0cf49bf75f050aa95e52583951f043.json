{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/dashboard/dashboards-page/cluster-dashboard/activity-card.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/dashboard/dashboards-page/cluster-dashboard/activity-card.tsx","mtime":1616735742460},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { connect } from 'react-redux';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardLink from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardLink';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport { withDashboardResources } from '../../with-dashboard-resources';\nimport { EventModel } from '../../../../models';\nimport ActivityBody, { RecentEventsBody, OngoingActivityBody } from '@console/shared/src/components/dashboard/activity-card/ActivityBody';\nimport { useExtensions, isDashboardsOverviewResourceActivity, isDashboardsOverviewPrometheusActivity } from '@console/plugin-sdk';\nimport { uniqueResource } from './utils';\nimport { useTranslation } from 'react-i18next';\nconst eventsResource = { isList: true, kind: EventModel.kind, prop: 'events' };\nconst viewEvents = '/k8s/all-namespaces/events';\nconst RecentEvent = withDashboardResources(({ watchK8sResource, stopWatchK8sResource, resources }) => {\n    React.useEffect(() => {\n        watchK8sResource(eventsResource);\n        return () => {\n            stopWatchK8sResource(eventsResource);\n        };\n    }, [watchK8sResource, stopWatchK8sResource]);\n    return React.createElement(RecentEventsBody, { events: resources.events, moreLink: viewEvents });\n});\nconst mapStateToProps = ({ k8s }) => ({\n    models: k8s.getIn(['RESOURCES', 'models']),\n});\nconst OngoingActivity = connect(mapStateToProps)(withDashboardResources(({ watchK8sResource, stopWatchK8sResource, resources, watchPrometheus, stopWatchPrometheusQuery, prometheusResults, models }) => {\n    const resourceActivityExtensions = useExtensions(isDashboardsOverviewResourceActivity);\n    const resourceActivities = React.useMemo(() => resourceActivityExtensions.filter(e => !!models.get(e.properties.k8sResource.kind)), [resourceActivityExtensions, models]);\n    const prometheusActivities = useExtensions(isDashboardsOverviewPrometheusActivity);\n    React.useEffect(() => {\n        resourceActivities.forEach((a, index) => {\n            watchK8sResource(uniqueResource(a.properties.k8sResource, index));\n        });\n        prometheusActivities.forEach(a => a.properties.queries.forEach(q => watchPrometheus(q)));\n        return () => {\n            resourceActivities.forEach((a, index) => {\n                stopWatchK8sResource(uniqueResource(a.properties.k8sResource, index));\n            });\n            prometheusActivities.forEach(a => a.properties.queries.forEach(stopWatchPrometheusQuery));\n        };\n    }, [watchK8sResource, stopWatchK8sResource, watchPrometheus, stopWatchPrometheusQuery, resourceActivities, prometheusActivities]);\n    const allResourceActivities = React.useMemo(() => _.flatten(resourceActivities.map((a, index) => {\n        const k8sResources = _.get(resources, [uniqueResource(a.properties.k8sResource, index).prop, 'data'], []);\n        return k8sResources\n            .filter(r => (a.properties.isActivity ? a.properties.isActivity(r) : true))\n            .map(r => ({\n            resource: r,\n            timestamp: a.properties.getTimestamp ? a.properties.getTimestamp(r) : null,\n            loader: a.properties.loader,\n        }));\n    })), [resourceActivities, resources]);\n    const allPrometheusActivities = React.useMemo(() => prometheusActivities\n        .filter(a => {\n        const queryResults = a.properties.queries.map(q => prometheusResults.getIn([q, 'data']));\n        return a.properties.isActivity(queryResults);\n    })\n        .map(a => {\n        const queryResults = a.properties.queries.map(q => prometheusResults.getIn([q, 'data']));\n        return {\n            loader: a.properties.loader,\n            results: queryResults,\n        };\n    }), [prometheusActivities, prometheusResults]);\n    const resourcesLoaded = React.useMemo(() => resourceActivities.every((a, index) => {\n        var _a, _b;\n        const uniqueProp = uniqueResource(a.properties.k8sResource, index).prop;\n        return ((_a = resources[uniqueProp]) === null || _a === void 0 ? void 0 : _a.loaded) || ((_b = resources[uniqueProp]) === null || _b === void 0 ? void 0 : _b.loadError);\n    }), [resourceActivities, resources]);\n    const queriesLoaded = React.useMemo(() => prometheusActivities.every(a => a.properties.queries.every(q => prometheusResults.getIn([q, 'data']) || prometheusResults.getIn([q, 'loadError']))), [prometheusActivities, prometheusResults]);\n    return React.createElement(OngoingActivityBody, { loaded: resourcesLoaded && queriesLoaded, resourceActivities: allResourceActivities, prometheusActivities: allPrometheusActivities });\n}));\nexport const ActivityCard = React.memo(() => {\n    const { t } = useTranslation();\n    return (React.createElement(DashboardCard, { gradient: true, \"data-test-id\": \"activity-card\" },\n        React.createElement(DashboardCardHeader, null,\n            React.createElement(DashboardCardTitle, null, t('SINGLE:MSG_OVERVIEW_MAIN_CARDACTIVITY_TITLE_1')),\n            React.createElement(DashboardCardLink, { to: viewEvents }, t('SINGLE:MSG_OVERVIEW_MAIN_CARDACTIVITY_ALL_1'))),\n        React.createElement(DashboardCardBody, null,\n            React.createElement(ActivityBody, { className: \"co-overview-dashboard__activity-body\" },\n                React.createElement(OngoingActivity, null),\n                React.createElement(RecentEvent, null)))));\n});\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/dashboard/dashboards-page/cluster-dashboard/activity-card.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/dashboard/dashboards-page/cluster-dashboard/activity-card.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Map as ImmutableMap } from 'immutable';\nimport { connect } from 'react-redux';\n\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardLink from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardLink';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport { DashboardItemProps, withDashboardResources } from '../../with-dashboard-resources';\nimport { EventModel } from '../../../../models';\nimport { FirehoseResource, FirehoseResult } from '../../../utils';\nimport { EventKind, K8sKind } from '../../../../module/k8s';\nimport ActivityBody, { RecentEventsBody, OngoingActivityBody } from '@console/shared/src/components/dashboard/activity-card/ActivityBody';\nimport { useExtensions, DashboardsOverviewResourceActivity, DashboardsOverviewPrometheusActivity, isDashboardsOverviewResourceActivity, isDashboardsOverviewPrometheusActivity } from '@console/plugin-sdk';\nimport { uniqueResource } from './utils';\nimport { PrometheusResponse } from '../../../graphs';\nimport { useTranslation } from 'react-i18next';\n\nconst eventsResource: FirehoseResource = { isList: true, kind: EventModel.kind, prop: 'events' };\nconst viewEvents = '/k8s/all-namespaces/events';\n\nconst RecentEvent = withDashboardResources(({ watchK8sResource, stopWatchK8sResource, resources }) => {\n  React.useEffect(() => {\n    watchK8sResource(eventsResource);\n    return () => {\n      stopWatchK8sResource(eventsResource);\n    };\n  }, [watchK8sResource, stopWatchK8sResource]);\n  return <RecentEventsBody events={resources.events as FirehoseResult<EventKind[]>} moreLink={viewEvents} />;\n});\n\nconst mapStateToProps = ({ k8s }) => ({\n  models: k8s.getIn(['RESOURCES', 'models']),\n});\n\nconst OngoingActivity = connect(mapStateToProps)(\n  withDashboardResources(({ watchK8sResource, stopWatchK8sResource, resources, watchPrometheus, stopWatchPrometheusQuery, prometheusResults, models }: DashboardItemProps & OngoingActivityProps) => {\n    const resourceActivityExtensions = useExtensions<DashboardsOverviewResourceActivity>(isDashboardsOverviewResourceActivity);\n\n    const resourceActivities = React.useMemo(() => resourceActivityExtensions.filter(e => !!models.get(e.properties.k8sResource.kind)), [resourceActivityExtensions, models]);\n\n    const prometheusActivities = useExtensions<DashboardsOverviewPrometheusActivity>(isDashboardsOverviewPrometheusActivity);\n\n    React.useEffect(() => {\n      resourceActivities.forEach((a, index) => {\n        watchK8sResource(uniqueResource(a.properties.k8sResource, index));\n      });\n      prometheusActivities.forEach(a => a.properties.queries.forEach(q => watchPrometheus(q)));\n      return () => {\n        resourceActivities.forEach((a, index) => {\n          stopWatchK8sResource(uniqueResource(a.properties.k8sResource, index));\n        });\n        prometheusActivities.forEach(a => a.properties.queries.forEach(stopWatchPrometheusQuery));\n      };\n    }, [watchK8sResource, stopWatchK8sResource, watchPrometheus, stopWatchPrometheusQuery, resourceActivities, prometheusActivities]);\n\n    const allResourceActivities = React.useMemo(\n      () =>\n        _.flatten(\n          resourceActivities.map((a, index) => {\n            const k8sResources = _.get(resources, [uniqueResource(a.properties.k8sResource, index).prop, 'data'], []) as FirehoseResult['data'];\n            return k8sResources\n              .filter(r => (a.properties.isActivity ? a.properties.isActivity(r) : true))\n              .map(r => ({\n                resource: r,\n                timestamp: a.properties.getTimestamp ? a.properties.getTimestamp(r) : null,\n                loader: a.properties.loader,\n              }));\n          }),\n        ),\n      [resourceActivities, resources],\n    );\n\n    const allPrometheusActivities = React.useMemo(\n      () =>\n        prometheusActivities\n          .filter(a => {\n            const queryResults = a.properties.queries.map(q => prometheusResults.getIn([q, 'data']) as PrometheusResponse);\n            return a.properties.isActivity(queryResults);\n          })\n          .map(a => {\n            const queryResults = a.properties.queries.map(q => prometheusResults.getIn([q, 'data']) as PrometheusResponse);\n            return {\n              loader: a.properties.loader,\n              results: queryResults,\n            };\n          }),\n      [prometheusActivities, prometheusResults],\n    );\n\n    const resourcesLoaded = React.useMemo(\n      () =>\n        resourceActivities.every((a, index) => {\n          const uniqueProp = uniqueResource(a.properties.k8sResource, index).prop;\n          return resources[uniqueProp]?.loaded || resources[uniqueProp]?.loadError;\n        }),\n      [resourceActivities, resources],\n    );\n\n    const queriesLoaded = React.useMemo(() => prometheusActivities.every(a => a.properties.queries.every(q => prometheusResults.getIn([q, 'data']) || prometheusResults.getIn([q, 'loadError']))), [prometheusActivities, prometheusResults]);\n\n    return <OngoingActivityBody loaded={resourcesLoaded && queriesLoaded} resourceActivities={allResourceActivities} prometheusActivities={allPrometheusActivities} />;\n  }),\n);\n\nexport const ActivityCard: React.FC<{}> = React.memo(() => {\n  const { t } = useTranslation();\n  return (\n    <DashboardCard gradient data-test-id=\"activity-card\">\n      <DashboardCardHeader>\n        <DashboardCardTitle>{t('SINGLE:MSG_OVERVIEW_MAIN_CARDACTIVITY_TITLE_1')}</DashboardCardTitle>\n        <DashboardCardLink to={viewEvents}>{t('SINGLE:MSG_OVERVIEW_MAIN_CARDACTIVITY_ALL_1')}</DashboardCardLink>\n      </DashboardCardHeader>\n      <DashboardCardBody>\n        <ActivityBody className=\"co-overview-dashboard__activity-body\">\n          <OngoingActivity />\n          <RecentEvent />\n        </ActivityBody>\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n});\n\ntype OngoingActivityProps = {\n  models: ImmutableMap<string, K8sKind>;\n};\n"]}]}