{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/hooks/storage-class-config-map.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/hooks/storage-class-config-map.ts","mtime":1615298458660},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { k8sGet } from '@console/internal/module/k8s';\nimport * as React from 'react';\nimport { STORAGE_CLASS_CONFIG_MAP_NAME, STORAGE_CLASS_CONFIG_MAP_NAMESPACES, } from '../constants/sc';\nimport { ConfigMapModel } from '@console/internal/models';\nimport { joinGrammaticallyListOfItems } from '@console/shared/src';\nexport const useStorageClassConfigMap = () => {\n    const [storageClassConfigMap, setStorageClassConfigMap] = React.useState(undefined);\n    const [error, setError] = React.useState(undefined);\n    React.useEffect(() => {\n        const controller = new AbortController();\n        const fetchData = () => __awaiter(void 0, void 0, void 0, function* () {\n            for (const namespace of STORAGE_CLASS_CONFIG_MAP_NAMESPACES) {\n                try {\n                    // eslint-disable-next-line no-await-in-loop\n                    const configMap = yield k8sGet(ConfigMapModel, STORAGE_CLASS_CONFIG_MAP_NAME, namespace, {\n                        signal: controller.signal,\n                    });\n                    if (configMap && !controller.signal.aborted) {\n                        setStorageClassConfigMap(configMap);\n                        return;\n                    }\n                }\n                catch (e) {\n                    if (controller.signal.aborted) {\n                        return;\n                    }\n                }\n            }\n            if (!controller.signal.aborted) {\n                setStorageClassConfigMap(null);\n                const err = `Could not load storage class config map in following namespaces: ${joinGrammaticallyListOfItems(STORAGE_CLASS_CONFIG_MAP_NAMESPACES, 'or')}`;\n                setError(err);\n                // eslint-disable-next-line no-console\n                console.warn(err);\n            }\n        });\n        fetchData();\n        return () => controller.abort();\n    }, []);\n    const isLoaded = storageClassConfigMap !== undefined;\n    return React.useMemo(() => [storageClassConfigMap, isLoaded, error], [\n        storageClassConfigMap,\n        isLoaded,\n        error,\n    ]);\n};\nexport const useStorageClassConfigMapWrapped = () => {\n    const [data, loaded, loadError] = useStorageClassConfigMap();\n    return React.useMemo(() => ({\n        loaded,\n        loadError,\n        data,\n    }), [data, loaded, loadError]);\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/hooks/storage-class-config-map.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/hooks/storage-class-config-map.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAiB,MAAM,EAAE,MAAM,8BAA8B,CAAC;AACrE,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EACL,6BAA6B,EAC7B,mCAAmC,GACpC,MAAM,iBAAiB,CAAC;AACzB,OAAO,EAAE,cAAc,EAAE,MAAM,0BAA0B,CAAC;AAC1D,OAAO,EAAE,4BAA4B,EAAE,MAAM,qBAAqB,CAAC;AAKnE,MAAM,CAAC,MAAM,wBAAwB,GAAG,GAAuB,EAAE;IAC/D,MAAM,CAAC,qBAAqB,EAAE,wBAAwB,CAAC,GAAG,KAAK,CAAC,QAAQ,CACtE,SAAS,CACV,CAAC;IACF,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAS,SAAS,CAAC,CAAC;IAE5D,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,MAAM,UAAU,GAAG,IAAI,eAAe,EAAE,CAAC;QAEzC,MAAM,SAAS,GAAG,GAAS,EAAE;YAC3B,KAAK,MAAM,SAAS,IAAI,mCAAmC,EAAE;gBAC3D,IAAI;oBACF,4CAA4C;oBAC5C,MAAM,SAAS,GAAG,MAAM,MAAM,CAAC,cAAc,EAAE,6BAA6B,EAAE,SAAS,EAAE;wBACvF,MAAM,EAAE,UAAU,CAAC,MAAM;qBAC1B,CAAC,CAAC;oBACH,IAAI,SAAS,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,EAAE;wBAC3C,wBAAwB,CAAC,SAAS,CAAC,CAAC;wBACpC,OAAO;qBACR;iBACF;gBAAC,OAAO,CAAC,EAAE;oBACV,IAAI,UAAU,CAAC,MAAM,CAAC,OAAO,EAAE;wBAC7B,OAAO;qBACR;iBACF;aACF;YAED,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,OAAO,EAAE;gBAC9B,wBAAwB,CAAC,IAAI,CAAC,CAAC;gBAC/B,MAAM,GAAG,GAAG,oEAAoE,4BAA4B,CAC1G,mCAAmC,EACnC,IAAI,CACL,EAAE,CAAC;gBACJ,QAAQ,CAAC,GAAG,CAAC,CAAC;gBACd,sCAAsC;gBACtC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACnB;QACH,CAAC,CAAA,CAAC;QAEF,SAAS,EAAE,CAAC;QACZ,OAAO,GAAG,EAAE,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC;IAClC,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,QAAQ,GAAG,qBAAqB,KAAK,SAAS,CAAC;IAErD,OAAO,KAAK,CAAC,OAAO,CAAqB,GAAG,EAAE,CAAC,CAAC,qBAAqB,EAAE,QAAQ,EAAE,KAAK,CAAC,EAAE;QACvF,qBAAqB;QACrB,QAAQ;QACR,KAAK;KACN,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,+BAA+B,GAAG,GAAkC,EAAE;IACjF,MAAM,CAAC,IAAI,EAAE,MAAM,EAAE,SAAS,CAAC,GAAG,wBAAwB,EAAE,CAAC;IAC7D,OAAO,KAAK,CAAC,OAAO,CAClB,GAAG,EAAE,CAAC,CAAC;QACL,MAAM;QACN,SAAS;QACT,IAAI;KACL,CAAC,EACF,CAAC,IAAI,EAAE,MAAM,EAAE,SAAS,CAAC,CAC1B,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { ConfigMapKind, k8sGet } from '@console/internal/module/k8s';\nimport * as React from 'react';\nimport {\n  STORAGE_CLASS_CONFIG_MAP_NAME,\n  STORAGE_CLASS_CONFIG_MAP_NAMESPACES,\n} from '../constants/sc';\nimport { ConfigMapModel } from '@console/internal/models';\nimport { joinGrammaticallyListOfItems } from '@console/shared/src';\nimport { FirehoseResult } from '@console/internal/components/utils';\n\ntype UseConfigMapResult = [ConfigMapKind, boolean, string];\n\nexport const useStorageClassConfigMap = (): UseConfigMapResult => {\n  const [storageClassConfigMap, setStorageClassConfigMap] = React.useState<ConfigMapKind>(\n    undefined,\n  );\n  const [error, setError] = React.useState<string>(undefined);\n\n  React.useEffect(() => {\n    const controller = new AbortController();\n\n    const fetchData = async () => {\n      for (const namespace of STORAGE_CLASS_CONFIG_MAP_NAMESPACES) {\n        try {\n          // eslint-disable-next-line no-await-in-loop\n          const configMap = await k8sGet(ConfigMapModel, STORAGE_CLASS_CONFIG_MAP_NAME, namespace, {\n            signal: controller.signal,\n          });\n          if (configMap && !controller.signal.aborted) {\n            setStorageClassConfigMap(configMap);\n            return;\n          }\n        } catch (e) {\n          if (controller.signal.aborted) {\n            return;\n          }\n        }\n      }\n\n      if (!controller.signal.aborted) {\n        setStorageClassConfigMap(null);\n        const err = `Could not load storage class config map in following namespaces: ${joinGrammaticallyListOfItems(\n          STORAGE_CLASS_CONFIG_MAP_NAMESPACES,\n          'or',\n        )}`;\n        setError(err);\n        // eslint-disable-next-line no-console\n        console.warn(err);\n      }\n    };\n\n    fetchData();\n    return () => controller.abort();\n  }, []);\n\n  const isLoaded = storageClassConfigMap !== undefined;\n\n  return React.useMemo<UseConfigMapResult>(() => [storageClassConfigMap, isLoaded, error], [\n    storageClassConfigMap,\n    isLoaded,\n    error,\n  ]);\n};\n\nexport const useStorageClassConfigMapWrapped = (): FirehoseResult<ConfigMapKind> => {\n  const [data, loaded, loadError] = useStorageClassConfigMap();\n  return React.useMemo<FirehoseResult<ConfigMapKind>>(\n    () => ({\n      loaded,\n      loadError,\n      data,\n    }),\n    [data, loaded, loadError],\n  );\n};\n"]}]}