{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/button-bar.jsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/button-bar.jsx","mtime":1616735742480},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport * as PropTypes from 'prop-types';\nimport { Alert } from '@patternfly/react-core';\nimport { LoadingInline } from './status-box';\nconst injectDisabled = (children, disabled) => {\n    return React.Children.map(children, (c) => {\n        if (!_.isObject(c) || c.type !== 'button') {\n            return c;\n        }\n        return React.cloneElement(c, { disabled: c.props.disabled || disabled });\n    });\n};\nconst ErrorMessage = ({ message }) => (React.createElement(Alert, { isInline: true, className: \"co-alert co-alert--scrollable\", variant: \"danger\", title: \"An error occurred\" },\n    React.createElement(\"div\", { className: \"co-pre-line\" }, message)));\nconst InfoMessage = ({ message }) => (React.createElement(Alert, { isInline: true, className: \"co-alert\", variant: \"info\", title: message }));\nconst SuccessMessage = ({ message }) => (React.createElement(Alert, { isInline: true, className: \"co-alert\", variant: \"success\", title: message }));\n// NOTE: DO NOT use <a> elements within a ButtonBar.\n// They don't support the disabled attribute, and therefore\n// can't be disabled during a pending promise/request.\n/** @type {React.SFC<{children: any, className?: string, errorMessage?: string, infoMessage?: string, successMessage?: string, inProgress: boolean}}>} */\nexport const ButtonBar = ({ children, className, errorMessage, infoMessage, successMessage, inProgress, }) => {\n    return (React.createElement(\"div\", { className: classNames(className, 'co-m-btn-bar') },\n        successMessage && React.createElement(SuccessMessage, { message: successMessage }),\n        errorMessage && React.createElement(ErrorMessage, { message: errorMessage }),\n        injectDisabled(children, inProgress),\n        inProgress && React.createElement(LoadingInline, null),\n        infoMessage && React.createElement(InfoMessage, { message: infoMessage })));\n};\nButtonBar.propTypes = {\n    children: PropTypes.node.isRequired,\n    successMessage: PropTypes.string,\n    errorMessage: PropTypes.string,\n    infoMessage: PropTypes.string,\n    inProgress: PropTypes.bool.isRequired,\n    className: PropTypes.string,\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/button-bar.jsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/button-bar.jsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAM,WAAW,CAAC;AAC/B,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,UAAU,MAAM,YAAY,CAAC;AACzC,OAAO,KAAK,SAAS,MAAM,YAAY,CAAC;AACxC,OAAO,EAAE,KAAK,EAAE,MAAM,wBAAwB,CAAC;AAE/C,OAAO,EAAE,aAAa,EAAE,MAAM,cAAc,CAAC;AAE7C,MAAM,cAAc,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,EAAE;IAC5C,OAAO,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE;QACxC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,KAAK,QAAQ,EAAE;YACzC,OAAO,CAAC,CAAC;SACV;QAED,OAAO,KAAK,CAAC,YAAY,CAAC,CAAC,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,IAAI,QAAQ,EAAE,CAAC,CAAC;IAC3E,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,YAAY,GAAG,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,CACpC,oBAAC,KAAK,IACJ,QAAQ,QACR,SAAS,EAAC,+BAA+B,EACzC,OAAO,EAAC,QAAQ,EAChB,KAAK,EAAC,mBAAmB;IAEzB,6BAAK,SAAS,EAAC,aAAa,IAAE,OAAO,CAAO,CACtC,CACT,CAAC;AACF,MAAM,WAAW,GAAG,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,CACnC,oBAAC,KAAK,IAAC,QAAQ,QAAC,SAAS,EAAC,UAAU,EAAC,OAAO,EAAC,MAAM,EAAC,KAAK,EAAE,OAAO,GAAI,CACvE,CAAC;AACF,MAAM,cAAc,GAAG,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,CACtC,oBAAC,KAAK,IAAC,QAAQ,QAAC,SAAS,EAAC,UAAU,EAAC,OAAO,EAAC,SAAS,EAAC,KAAK,EAAE,OAAO,GAAI,CAC1E,CAAC;AAEF,oDAAoD;AACpD,2DAA2D;AAC3D,sDAAsD;AACtD,yJAAyJ;AACzJ,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,EACxB,QAAQ,EACR,SAAS,EACT,YAAY,EACZ,WAAW,EACX,cAAc,EACd,UAAU,GACX,EAAE,EAAE;IACH,OAAO,CACL,6BAAK,SAAS,EAAE,UAAU,CAAC,SAAS,EAAE,cAAc,CAAC;QAClD,cAAc,IAAI,oBAAC,cAAc,IAAC,OAAO,EAAE,cAAc,GAAI;QAC7D,YAAY,IAAI,oBAAC,YAAY,IAAC,OAAO,EAAE,YAAY,GAAI;QACvD,cAAc,CAAC,QAAQ,EAAE,UAAU,CAAC;QACpC,UAAU,IAAI,oBAAC,aAAa,OAAG;QAC/B,WAAW,IAAI,oBAAC,WAAW,IAAC,OAAO,EAAE,WAAW,GAAI,CACjD,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,SAAS,CAAC,SAAS,GAAG;IACpB,QAAQ,EAAE,SAAS,CAAC,IAAI,CAAC,UAAU;IACnC,cAAc,EAAE,SAAS,CAAC,MAAM;IAChC,YAAY,EAAE,SAAS,CAAC,MAAM;IAC9B,WAAW,EAAE,SAAS,CAAC,MAAM;IAC7B,UAAU,EAAE,SAAS,CAAC,IAAI,CAAC,UAAU;IACrC,SAAS,EAAE,SAAS,CAAC,MAAM;CAC5B,CAAC","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport * as PropTypes from 'prop-types';\nimport { Alert } from '@patternfly/react-core';\n\nimport { LoadingInline } from './status-box';\n\nconst injectDisabled = (children, disabled) => {\n  return React.Children.map(children, (c) => {\n    if (!_.isObject(c) || c.type !== 'button') {\n      return c;\n    }\n\n    return React.cloneElement(c, { disabled: c.props.disabled || disabled });\n  });\n};\n\nconst ErrorMessage = ({ message }) => (\n  <Alert\n    isInline\n    className=\"co-alert co-alert--scrollable\"\n    variant=\"danger\"\n    title=\"An error occurred\"\n  >\n    <div className=\"co-pre-line\">{message}</div>\n  </Alert>\n);\nconst InfoMessage = ({ message }) => (\n  <Alert isInline className=\"co-alert\" variant=\"info\" title={message} />\n);\nconst SuccessMessage = ({ message }) => (\n  <Alert isInline className=\"co-alert\" variant=\"success\" title={message} />\n);\n\n// NOTE: DO NOT use <a> elements within a ButtonBar.\n// They don't support the disabled attribute, and therefore\n// can't be disabled during a pending promise/request.\n/** @type {React.SFC<{children: any, className?: string, errorMessage?: string, infoMessage?: string, successMessage?: string, inProgress: boolean}}>} */\nexport const ButtonBar = ({\n  children,\n  className,\n  errorMessage,\n  infoMessage,\n  successMessage,\n  inProgress,\n}) => {\n  return (\n    <div className={classNames(className, 'co-m-btn-bar')}>\n      {successMessage && <SuccessMessage message={successMessage} />}\n      {errorMessage && <ErrorMessage message={errorMessage} />}\n      {injectDisabled(children, inProgress)}\n      {inProgress && <LoadingInline />}\n      {infoMessage && <InfoMessage message={infoMessage} />}\n    </div>\n  );\n};\n\nButtonBar.propTypes = {\n  children: PropTypes.node.isRequired,\n  successMessage: PropTypes.string,\n  errorMessage: PropTypes.string,\n  infoMessage: PropTypes.string,\n  inProgress: PropTypes.bool.isRequired,\n  className: PropTypes.string,\n};\n"]}]}