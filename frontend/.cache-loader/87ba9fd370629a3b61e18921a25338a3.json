{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/common/PiplelineWorkspacesSection.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/common/PiplelineWorkspacesSection.tsx","mtime":1615298458620},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { useFormikContext, useField } from 'formik';\nimport { SecretModel, ConfigMapModel } from '@console/internal/models';\nimport { DropdownField } from '@console/shared';\nimport FormSection from '../../../import/section/FormSection';\nimport { VolumeTypes } from '../../const';\nimport PVCDropdown from './PVCDropdown';\nimport MultipleResourceKeySelector from './MultipleResourceKeySelector';\nconst getVolumeTypeFields = (volumeType, index) => {\n    switch (VolumeTypes[volumeType]) {\n        case VolumeTypes.Secret: {\n            return (React.createElement(MultipleResourceKeySelector, { resourceNameField: `workspaces.${index}.data.secret.secretName`, resourceKeysField: `workspaces.${index}.data.secret.items`, label: \"Secret\", resourceModel: SecretModel, required: true }));\n        }\n        case VolumeTypes.ConfigMap: {\n            return (React.createElement(MultipleResourceKeySelector, { resourceNameField: `workspaces.${index}.data.configMap.name`, resourceKeysField: `workspaces.${index}.data.configMap.items`, label: \"Config Map\", resourceModel: ConfigMapModel, required: true }));\n        }\n        case VolumeTypes.PVC: {\n            return React.createElement(PVCDropdown, { name: `workspaces.${index}.data.persistentVolumeClaim.claimName` });\n        }\n        default:\n            return null;\n    }\n};\nconst PipelineWorkspacesSection = () => {\n    const { setFieldValue } = useFormikContext();\n    const [{ value: workspaces }] = useField('workspaces');\n    return (workspaces.length > 0 && (React.createElement(FormSection, { title: \"Workspaces\", fullWidth: true }, workspaces.map((workspace, index) => (React.createElement(\"div\", { className: \"form-group\", key: workspace.name },\n        React.createElement(DropdownField, { name: `workspaces.${index}.type`, label: workspace.name, items: VolumeTypes, onChange: () => setFieldValue(`workspaces.${index}.data`, {}), fullWidth: true, required: true }),\n        getVolumeTypeFields(workspace.type, index)))))));\n};\nexport default PipelineWorkspacesSection;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/common/PiplelineWorkspacesSection.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/common/PiplelineWorkspacesSection.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,gBAAgB,EAAgB,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAClE,OAAO,EAAE,WAAW,EAAE,cAAc,EAAE,MAAM,0BAA0B,CAAC;AACvE,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAEhD,OAAO,WAAW,MAAM,qCAAqC,CAAC;AAC9D,OAAO,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;AAC1C,OAAO,WAAW,MAAM,eAAe,CAAC;AACxC,OAAO,2BAA2B,MAAM,+BAA+B,CAAC;AAExE,MAAM,mBAAmB,GAAG,CAAC,UAAuB,EAAE,KAAa,EAAE,EAAE;IACrE,QAAQ,WAAW,CAAC,UAAU,CAAC,EAAE;QAC/B,KAAK,WAAW,CAAC,MAAM,CAAC,CAAC;YACvB,OAAO,CACL,oBAAC,2BAA2B,IAC1B,iBAAiB,EAAE,cAAc,KAAK,yBAAyB,EAC/D,iBAAiB,EAAE,cAAc,KAAK,oBAAoB,EAC1D,KAAK,EAAC,QAAQ,EACd,aAAa,EAAE,WAAW,EAC1B,QAAQ,SACR,CACH,CAAC;SACH;QACD,KAAK,WAAW,CAAC,SAAS,CAAC,CAAC;YAC1B,OAAO,CACL,oBAAC,2BAA2B,IAC1B,iBAAiB,EAAE,cAAc,KAAK,sBAAsB,EAC5D,iBAAiB,EAAE,cAAc,KAAK,uBAAuB,EAC7D,KAAK,EAAC,YAAY,EAClB,aAAa,EAAE,cAAc,EAC7B,QAAQ,SACR,CACH,CAAC;SACH;QACD,KAAK,WAAW,CAAC,GAAG,CAAC,CAAC;YACpB,OAAO,oBAAC,WAAW,IAAC,IAAI,EAAE,cAAc,KAAK,uCAAuC,GAAI,CAAC;SAC1F;QACD;YACE,OAAO,IAAI,CAAC;KACf;AACH,CAAC,CAAC;AAEF,MAAM,yBAAyB,GAAa,GAAG,EAAE;IAC/C,MAAM,EAAE,aAAa,EAAE,GAAG,gBAAgB,EAAgB,CAAC;IAC3D,MAAM,CAAC,EAAE,KAAK,EAAE,UAAU,EAAE,CAAC,GAAG,QAAQ,CAAsB,YAAY,CAAC,CAAC;IAC5E,OAAO,CACL,UAAU,CAAC,MAAM,GAAG,CAAC,IAAI,CACvB,oBAAC,WAAW,IAAC,KAAK,EAAC,YAAY,EAAC,SAAS,UACtC,UAAU,CAAC,GAAG,CAAC,CAAC,SAAS,EAAE,KAAK,EAAE,EAAE,CAAC,CACpC,6BAAK,SAAS,EAAC,YAAY,EAAC,GAAG,EAAE,SAAS,CAAC,IAAI;QAC7C,oBAAC,aAAa,IACZ,IAAI,EAAE,cAAc,KAAK,OAAO,EAChC,KAAK,EAAE,SAAS,CAAC,IAAI,EACrB,KAAK,EAAE,WAAW,EAClB,QAAQ,EAAE,GAAG,EAAE,CAAC,aAAa,CAAC,cAAc,KAAK,OAAO,EAAE,EAAE,CAAC,EAC7D,SAAS,QACT,QAAQ,SACR;QACD,mBAAmB,CAAC,SAAS,CAAC,IAAmB,EAAE,KAAK,CAAC,CACtD,CACP,CAAC,CACU,CACf,CACF,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,yBAAyB,CAAC","sourcesContent":["import * as React from 'react';\nimport { useFormikContext, FormikValues, useField } from 'formik';\nimport { SecretModel, ConfigMapModel } from '@console/internal/models';\nimport { DropdownField } from '@console/shared';\nimport { PipelineWorkspace } from '../../../../utils/pipeline-augment';\nimport FormSection from '../../../import/section/FormSection';\nimport { VolumeTypes } from '../../const';\nimport PVCDropdown from './PVCDropdown';\nimport MultipleResourceKeySelector from './MultipleResourceKeySelector';\n\nconst getVolumeTypeFields = (volumeType: VolumeTypes, index: number) => {\n  switch (VolumeTypes[volumeType]) {\n    case VolumeTypes.Secret: {\n      return (\n        <MultipleResourceKeySelector\n          resourceNameField={`workspaces.${index}.data.secret.secretName`}\n          resourceKeysField={`workspaces.${index}.data.secret.items`}\n          label=\"Secret\"\n          resourceModel={SecretModel}\n          required\n        />\n      );\n    }\n    case VolumeTypes.ConfigMap: {\n      return (\n        <MultipleResourceKeySelector\n          resourceNameField={`workspaces.${index}.data.configMap.name`}\n          resourceKeysField={`workspaces.${index}.data.configMap.items`}\n          label=\"Config Map\"\n          resourceModel={ConfigMapModel}\n          required\n        />\n      );\n    }\n    case VolumeTypes.PVC: {\n      return <PVCDropdown name={`workspaces.${index}.data.persistentVolumeClaim.claimName`} />;\n    }\n    default:\n      return null;\n  }\n};\n\nconst PipelineWorkspacesSection: React.FC = () => {\n  const { setFieldValue } = useFormikContext<FormikValues>();\n  const [{ value: workspaces }] = useField<PipelineWorkspace[]>('workspaces');\n  return (\n    workspaces.length > 0 && (\n      <FormSection title=\"Workspaces\" fullWidth>\n        {workspaces.map((workspace, index) => (\n          <div className=\"form-group\" key={workspace.name}>\n            <DropdownField\n              name={`workspaces.${index}.type`}\n              label={workspace.name}\n              items={VolumeTypes}\n              onChange={() => setFieldValue(`workspaces.${index}.data`, {})}\n              fullWidth\n              required\n            />\n            {getVolumeTypeFields(workspace.type as VolumeTypes, index)}\n          </div>\n        ))}\n      </FormSection>\n    )\n  );\n};\n\nexport default PipelineWorkspacesSection;\n"]}]}