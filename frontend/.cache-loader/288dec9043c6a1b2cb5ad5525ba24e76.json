{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/DeployImage.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/DeployImage.tsx","mtime":1616735742380},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { Formik } from 'formik';\nimport { connect } from 'react-redux';\nimport { ALL_APPLICATIONS_KEY } from '@console/shared';\nimport { history } from '@console/internal/components/utils';\nimport { getActiveApplication } from '@console/internal/reducers/ui';\nimport { doContextualBinding, sanitizeApplicationValue } from '../../utils/application-utils';\nimport { ALLOW_SERVICE_BINDING } from '../../const';\nimport { Resources } from './import-types';\nimport { createOrUpdateDeployImageResources } from './deployImage-submit-utils';\nimport { deployValidationSchema } from './deployImage-validation-utils';\nimport DeployImageForm from './DeployImageForm';\nimport { healthChecksProbeInitialData } from '../health-checks/health-checks-probe-utils';\nconst DeployImage = ({ namespace, projects, activeApplication, contextualSource, serviceBindingAvailable, }) => {\n    const initialValues = {\n        project: {\n            name: namespace || '',\n            displayName: '',\n            description: '',\n        },\n        application: {\n            initial: sanitizeApplicationValue(activeApplication),\n            name: sanitizeApplicationValue(activeApplication),\n            selectedKey: activeApplication,\n        },\n        name: '',\n        searchTerm: '',\n        registry: 'external',\n        imageStream: {\n            image: '',\n            tag: '',\n            namespace: namespace || '',\n            grantAccess: true,\n        },\n        isi: {\n            name: '',\n            image: {},\n            tag: '',\n            status: { metadata: {}, status: '' },\n            ports: [],\n        },\n        image: {\n            name: '',\n            image: {},\n            tag: '',\n            status: { metadata: {}, status: '' },\n            ports: [],\n        },\n        isSearchingForImage: false,\n        serverless: {\n            scaling: {\n                minpods: 0,\n                maxpods: '',\n                concurrencytarget: '',\n                concurrencylimit: '',\n            },\n        },\n        route: {\n            disable: false,\n            create: true,\n            targetPort: '',\n            unknownTargetPort: '',\n            defaultUnknownPort: 8080,\n            path: '',\n            hostname: '',\n            secure: false,\n            tls: {\n                termination: '',\n                insecureEdgeTerminationPolicy: '',\n                caCertificate: '',\n                certificate: '',\n                destinationCACertificate: '',\n                privateKey: '',\n            },\n        },\n        resources: Resources.Kubernetes,\n        resourceTypesNotValid: contextualSource ? [Resources.KnativeService] : [],\n        build: {\n            env: [],\n            triggers: {\n                webhook: true,\n                image: true,\n                config: true,\n            },\n            strategy: 'Source',\n        },\n        deployment: {\n            env: [],\n            triggers: {\n                image: true,\n                config: true,\n            },\n            replicas: 1,\n        },\n        labels: {},\n        env: {},\n        limits: {\n            cpu: {\n                request: '',\n                requestUnit: 'm',\n                defaultRequestUnit: 'm',\n                limit: '',\n                limitUnit: 'm',\n                defaultLimitUnit: 'm',\n            },\n            memory: {\n                request: '',\n                requestUnit: 'Mi',\n                defaultRequestUnit: 'Mi',\n                limit: '',\n                limitUnit: 'Mi',\n                defaultLimitUnit: 'Mi',\n            },\n        },\n        healthChecks: healthChecksProbeInitialData,\n    };\n    const handleSubmit = (values, actions) => {\n        const { project: { name: projectName }, } = values;\n        const resourceActions = createOrUpdateDeployImageResources(values, true).then(() => {\n            const requests = createOrUpdateDeployImageResources(values);\n            return requests;\n        });\n        if (contextualSource) {\n            resourceActions\n                .then((resources) => doContextualBinding(resources, contextualSource, serviceBindingAvailable))\n                .catch(() => { });\n        }\n        resourceActions\n            .then(() => {\n            actions.setSubmitting(false);\n            history.push(`/topology/ns/${projectName}`);\n        })\n            .catch((err) => {\n            actions.setSubmitting(false);\n            actions.setStatus({ submitError: err.message });\n        });\n    };\n    return (React.createElement(Formik, { initialValues: initialValues, onSubmit: handleSubmit, onReset: history.goBack, validationSchema: deployValidationSchema, render: (props) => React.createElement(DeployImageForm, Object.assign({}, props, { projects: projects })) }));\n};\nconst mapStateToProps = (state, ownProps) => {\n    const activeApplication = ownProps.forApplication || getActiveApplication(state);\n    return {\n        activeApplication: activeApplication !== ALL_APPLICATIONS_KEY ? activeApplication : '',\n        serviceBindingAvailable: state.FLAGS.get(ALLOW_SERVICE_BINDING),\n    };\n};\nexport default connect(mapStateToProps)(DeployImage);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/DeployImage.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/DeployImage.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Formik } from 'formik';\nimport { connect } from 'react-redux';\nimport { ALL_APPLICATIONS_KEY } from '@console/shared';\nimport { history } from '@console/internal/components/utils';\nimport { getActiveApplication } from '@console/internal/reducers/ui';\nimport { RootState } from '@console/internal/redux';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { doContextualBinding, sanitizeApplicationValue } from '../../utils/application-utils';\nimport { ALLOW_SERVICE_BINDING } from '../../const';\nimport { DeployImageFormData, FirehoseList, Resources } from './import-types';\nimport { createOrUpdateDeployImageResources } from './deployImage-submit-utils';\nimport { deployValidationSchema } from './deployImage-validation-utils';\nimport DeployImageForm from './DeployImageForm';\nimport { healthChecksProbeInitialData } from '../health-checks/health-checks-probe-utils';\n\nexport interface DeployImageProps {\n  namespace: string;\n  projects?: FirehoseList;\n  contextualSource?: string;\n}\n\ninterface StateProps {\n  activeApplication: string;\n  serviceBindingAvailable: boolean;\n}\n\ntype Props = DeployImageProps & StateProps;\n\nconst DeployImage: React.FC<Props> = ({\n  namespace,\n  projects,\n  activeApplication,\n  contextualSource,\n  serviceBindingAvailable,\n}) => {\n  const initialValues: DeployImageFormData = {\n    project: {\n      name: namespace || '',\n      displayName: '',\n      description: '',\n    },\n    application: {\n      initial: sanitizeApplicationValue(activeApplication),\n      name: sanitizeApplicationValue(activeApplication),\n      selectedKey: activeApplication,\n    },\n    name: '',\n    searchTerm: '',\n    registry: 'external',\n    imageStream: {\n      image: '',\n      tag: '',\n      namespace: namespace || '',\n      grantAccess: true,\n    },\n    isi: {\n      name: '',\n      image: {},\n      tag: '',\n      status: { metadata: {}, status: '' },\n      ports: [],\n    },\n    image: {\n      name: '',\n      image: {},\n      tag: '',\n      status: { metadata: {}, status: '' },\n      ports: [],\n    },\n    isSearchingForImage: false,\n    serverless: {\n      scaling: {\n        minpods: 0,\n        maxpods: '',\n        concurrencytarget: '',\n        concurrencylimit: '',\n      },\n    },\n    route: {\n      disable: false,\n      create: true,\n      targetPort: '',\n      unknownTargetPort: '',\n      defaultUnknownPort: 8080,\n      path: '',\n      hostname: '',\n      secure: false,\n      tls: {\n        termination: '',\n        insecureEdgeTerminationPolicy: '',\n        caCertificate: '',\n        certificate: '',\n        destinationCACertificate: '',\n        privateKey: '',\n      },\n    },\n    resources: Resources.Kubernetes,\n    resourceTypesNotValid: contextualSource ? [Resources.KnativeService] : [],\n    build: {\n      env: [],\n      triggers: {\n        webhook: true,\n        image: true,\n        config: true,\n      },\n      strategy: 'Source',\n    },\n    deployment: {\n      env: [],\n      triggers: {\n        image: true,\n        config: true,\n      },\n      replicas: 1,\n    },\n    labels: {},\n    env: {},\n    limits: {\n      cpu: {\n        request: '',\n        requestUnit: 'm',\n        defaultRequestUnit: 'm',\n        limit: '',\n        limitUnit: 'm',\n        defaultLimitUnit: 'm',\n      },\n      memory: {\n        request: '',\n        requestUnit: 'Mi',\n        defaultRequestUnit: 'Mi',\n        limit: '',\n        limitUnit: 'Mi',\n        defaultLimitUnit: 'Mi',\n      },\n    },\n    healthChecks: healthChecksProbeInitialData,\n  };\n\n  const handleSubmit = (values, actions) => {\n    const {\n      project: { name: projectName },\n    } = values;\n\n    const resourceActions: Promise<K8sResourceKind[]> = createOrUpdateDeployImageResources(\n      values,\n      true,\n    ).then(() => {\n      const requests: Promise<K8sResourceKind[]> = createOrUpdateDeployImageResources(values);\n      return requests;\n    });\n\n    if (contextualSource) {\n      resourceActions\n        .then((resources) =>\n          doContextualBinding(resources, contextualSource, serviceBindingAvailable),\n        )\n        .catch(() => {});\n    }\n\n    resourceActions\n      .then(() => {\n        actions.setSubmitting(false);\n        history.push(`/topology/ns/${projectName}`);\n      })\n      .catch((err) => {\n        actions.setSubmitting(false);\n        actions.setStatus({ submitError: err.message });\n      });\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      onReset={history.goBack}\n      validationSchema={deployValidationSchema}\n      render={(props) => <DeployImageForm {...props} projects={projects} />}\n    />\n  );\n};\n\ninterface OwnProps extends DeployImageProps {\n  forApplication?: string;\n}\nconst mapStateToProps = (state: RootState, ownProps: OwnProps): StateProps => {\n  const activeApplication = ownProps.forApplication || getActiveApplication(state);\n  return {\n    activeApplication: activeApplication !== ALL_APPLICATIONS_KEY ? activeApplication : '',\n    serviceBindingAvailable: state.FLAGS.get(ALLOW_SERVICE_BINDING),\n  };\n};\n\nexport default connect(mapStateToProps)(DeployImage);\n"]}]}