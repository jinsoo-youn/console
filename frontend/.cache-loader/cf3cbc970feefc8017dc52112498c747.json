{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vm/selectors.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vm/selectors.ts","mtime":1615298458670},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { getName } from '@console/shared/src/selectors/common';\nimport { createBasicLookup } from '@console/shared/src/utils/utils';\nimport { TEMPLATE_FLAVOR_LABEL, TEMPLATE_OS_LABEL, TEMPLATE_OS_NAME_ANNOTATION, TEMPLATE_WORKLOAD_LABEL, } from '../../constants/vm';\nimport { findKeySuffixValue, getSimpleName, getValueByPrefix } from '../utils';\nimport { getAnnotations, getLabels } from '../selectors';\nimport { NetworkWrapper } from '../../k8s/wrapper/vm/network-wrapper';\nimport { getDataVolumeStorageClassName, getDataVolumeStorageSize } from '../dv/selectors';\nimport { getVolumeCloudInitNoCloud, getVolumeContainerImage, getVolumePersistentVolumeClaimName, } from './volume';\nimport { getVMIDisks } from '../vmi/basic';\nimport { VirtualMachineModel } from '../../models';\nimport { RunStrategy, StateChangeRequest } from '../../constants/vm/vm';\nexport const getMemory = (vm) => _.get(vm, 'spec.template.spec.domain.resources.requests.memory');\nexport const getCPU = (vm) => _.get(vm, 'spec.template.spec.domain.cpu');\nexport const getResourcesRequestsCPUCount = (vm) => { var _a, _b, _c, _d, _e, _f; return (_f = (_e = (_d = (_c = (_b = (_a = vm === null || vm === void 0 ? void 0 : vm.spec) === null || _a === void 0 ? void 0 : _a.template) === null || _b === void 0 ? void 0 : _b.spec) === null || _c === void 0 ? void 0 : _c.domain) === null || _d === void 0 ? void 0 : _d.resources) === null || _e === void 0 ? void 0 : _e.requests) === null || _f === void 0 ? void 0 : _f.cpu; };\nexport const getResourcesLimitsCPUCount = (vm) => { var _a, _b, _c, _d, _e, _f; return (_f = (_e = (_d = (_c = (_b = (_a = vm === null || vm === void 0 ? void 0 : vm.spec) === null || _a === void 0 ? void 0 : _a.template) === null || _b === void 0 ? void 0 : _b.spec) === null || _c === void 0 ? void 0 : _c.domain) === null || _d === void 0 ? void 0 : _d.resources) === null || _e === void 0 ? void 0 : _e.limits) === null || _f === void 0 ? void 0 : _f.cpu; };\nexport const isDedicatedCPUPlacement = (vm) => _.get(vm, 'spec.template.spec.domain.cpu.dedicatedCpuPlacement');\nexport const getDisks = (vm, defaultValue = []) => _.get(vm, 'spec.template.spec.domain.devices.disks') == null\n    ? defaultValue\n    : vm.spec.template.spec.domain.devices.disks;\nexport const getInterfaces = (vm, defaultValue = []) => _.get(vm, 'spec.template.spec.domain.devices.interfaces') == null\n    ? defaultValue\n    : vm.spec.template.spec.domain.devices.interfaces;\nexport const getNetworks = (vm, defaultValue = []) => _.get(vm, 'spec.template.spec.networks') == null ? defaultValue : vm.spec.template.spec.networks;\nexport const getVolumes = (vm, defaultValue = []) => _.get(vm, 'spec.template.spec.volumes') == null ? defaultValue : vm.spec.template.spec.volumes;\nexport const getDataVolumeTemplates = (vm, defaultValue = []) => _.get(vm, 'spec.dataVolumeTemplates') == null ? defaultValue : vm.spec.dataVolumeTemplates;\nexport const getConfigMapVolumes = (vm, defaultValue = []) => getVolumes(vm, defaultValue).filter((vol) => Object.keys(vol).includes('configMap'));\nexport const getSecretVolumes = (vm, defaultValue = []) => getVolumes(vm, defaultValue).filter((vol) => Object.keys(vol).includes('secret'));\nexport const getServiceAccountVolumes = (vm, defaultValue = []) => getVolumes(vm, defaultValue).filter((vol) => Object.keys(vol).includes('serviceAccount'));\nexport const getEnvDiskVolumes = (vm, defaultValue = []) => [\n    ...getConfigMapVolumes(vm, defaultValue),\n    ...getSecretVolumes(vm, defaultValue),\n    ...getServiceAccountVolumes(vm, defaultValue),\n];\nexport const getConfigMapDisks = (vm, defaultValue = []) => getDisks(vm, defaultValue).filter((disk) => !!getConfigMapVolumes(vm).find((vol) => vol.name === disk.name));\nexport const getSecretDisks = (vm, defaultValue = []) => getDisks(vm, defaultValue).filter((disk) => !!getSecretVolumes(vm).find((vol) => vol.name === disk.name));\nexport const getServiceAccountDisks = (vm, defaultValue = []) => getDisks(vm, defaultValue).filter((disk) => !!getServiceAccountVolumes(vm).find((vol) => vol.name === disk.name));\nexport const getEnvDisks = (vm, defaultValue = []) => [\n    ...getConfigMapDisks(vm, defaultValue),\n    ...getSecretDisks(vm, defaultValue),\n    ...getServiceAccountDisks(vm, defaultValue),\n];\nexport const getBootableDisks = (vm, defaultValue = []) => getDisks(vm, defaultValue).filter((disk) => !getEnvDisks(vm).find((envDisk) => envDisk.name === disk.name));\nexport const getNonBootableDisks = (vm, defaultValue = []) => getDisks(vm, defaultValue).filter((disk) => getEnvDisks(vm).find((envDisk) => envDisk.name === disk.name));\nexport const getOperatingSystem = (vmLike) => findKeySuffixValue(getLabels(vmLike), TEMPLATE_OS_LABEL);\nexport const getOperatingSystemName = (vmLike) => getValueByPrefix(getAnnotations(vmLike), `${TEMPLATE_OS_NAME_ANNOTATION}/${getOperatingSystem(vmLike)}`);\nexport const getWorkloadProfile = (vm) => findKeySuffixValue(getLabels(vm), TEMPLATE_WORKLOAD_LABEL);\nexport const getFlavor = (vmLike) => findKeySuffixValue(getLabels(vmLike), TEMPLATE_FLAVOR_LABEL);\nexport const isVMReady = (vm) => { var _a; return !!((_a = vm === null || vm === void 0 ? void 0 : vm.status) === null || _a === void 0 ? void 0 : _a.ready); };\nexport const isVMCreated = (vm) => { var _a; return !!((_a = vm === null || vm === void 0 ? void 0 : vm.status) === null || _a === void 0 ? void 0 : _a.created); };\nexport const isVMExpectedRunning = (vm) => {\n    var _a;\n    if (!(vm === null || vm === void 0 ? void 0 : vm.spec)) {\n        return false;\n    }\n    const { running, runStrategy } = vm.spec;\n    if (running != null) {\n        return running;\n    }\n    if (runStrategy != null) {\n        let changeRequests;\n        switch (runStrategy) {\n            case RunStrategy.Halted:\n                return false;\n            case RunStrategy.Always:\n            case RunStrategy.RerunOnFailure:\n                return true;\n            case RunStrategy.Manual:\n            default:\n                changeRequests = new Set((((_a = vm.status) === null || _a === void 0 ? void 0 : _a.stateChangeRequests) || []).map((chRequest) => chRequest === null || chRequest === void 0 ? void 0 : chRequest.action));\n                if (changeRequests.has(StateChangeRequest.Stop)) {\n                    return false;\n                }\n                if (changeRequests.has(StateChangeRequest.Start)) {\n                    return true;\n                }\n                return isVMCreated(vm); // if there is no change request we can assume created is representing running (current and expected)\n        }\n    }\n    return false;\n};\nexport const isVMRunningOrExpectedRunning = (vm) => {\n    return isVMCreated(vm) || isVMExpectedRunning(vm);\n};\nexport const getUsedNetworks = (vm) => {\n    const interfaces = getInterfaces(vm);\n    const networkLookup = createBasicLookup(getNetworks(vm), getSimpleName);\n    return interfaces\n        .map((i) => new NetworkWrapper(networkLookup[i.name]))\n        .filter((i) => i.getType());\n};\nexport const getCloudInitVolume = (vm) => {\n    const cloudInitVolume = getVolumes(vm).find(getVolumeCloudInitNoCloud);\n    if (cloudInitVolume) {\n        // make sure volume is used by disk\n        const disks = getDisks(vm);\n        if (disks.find((disk) => disk.name === cloudInitVolume.name)) {\n            return cloudInitVolume;\n        }\n    }\n    return null;\n};\nexport const hasAutoAttachPodInterface = (vm, defaultValue = false) => _.get(vm, 'spec.template.spec.domain.devices.autoattachPodInterface', defaultValue);\nexport const getCDRoms = (vm) => vm.kind === VirtualMachineModel.kind\n    ? getDisks(vm).filter((device) => !!device.cdrom)\n    : getVMIDisks(vm).filter((device) => !!device.cdrom);\nexport const getContainerImageByDisk = (vm, name) => getVolumeContainerImage(getVolumes(vm).find((vol) => name === vol.name));\nexport const getPVCSourceByDisk = (vm, diskName) => getVolumePersistentVolumeClaimName(getVolumes(vm).find((vol) => vol.name === diskName));\nexport const getURLSourceByDisk = (vm, name) => {\n    const dvTemplate = getDataVolumeTemplates(vm).find((vol) => getName(vol).includes(name));\n    return (dvTemplate &&\n        dvTemplate.spec &&\n        dvTemplate.spec.source &&\n        dvTemplate.spec.source.http &&\n        dvTemplate.spec.source.http.url);\n};\nexport const getStorageSizeByDisk = (vm, diskName) => getDataVolumeStorageSize(getDataVolumeTemplates(vm).find((vol) => getName(vol).includes(diskName)));\nexport const getStorageClassNameByDisk = (vm, diskName) => getDataVolumeStorageClassName(getDataVolumeTemplates(vm).find((vol) => getName(vol).includes(diskName)));\nexport const getNodeSelector = (vm) => { var _a, _b, _c; return (_c = (_b = (_a = vm === null || vm === void 0 ? void 0 : vm.spec) === null || _a === void 0 ? void 0 : _a.template) === null || _b === void 0 ? void 0 : _b.spec) === null || _c === void 0 ? void 0 : _c.nodeSelector; };\nexport const getTolerations = (vm) => { var _a, _b, _c; return (_c = (_b = (_a = vm === null || vm === void 0 ? void 0 : vm.spec) === null || _a === void 0 ? void 0 : _a.template) === null || _b === void 0 ? void 0 : _b.spec) === null || _c === void 0 ? void 0 : _c.tolerations; };\nexport const getAffinity = (vm) => { var _a, _b, _c; return (_c = (_b = (_a = vm === null || vm === void 0 ? void 0 : vm.spec) === null || _a === void 0 ? void 0 : _a.template) === null || _b === void 0 ? void 0 : _b.spec) === null || _c === void 0 ? void 0 : _c.affinity; };\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vm/selectors.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vm/selectors.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { getName } from '@console/shared/src/selectors/common';\nimport { createBasicLookup } from '@console/shared/src/utils/utils';\nimport {\n  TEMPLATE_FLAVOR_LABEL,\n  TEMPLATE_OS_LABEL,\n  TEMPLATE_OS_NAME_ANNOTATION,\n  TEMPLATE_WORKLOAD_LABEL,\n} from '../../constants/vm';\nimport { CPURaw, V1Network, V1NetworkInterface, VMIKind, VMKind } from '../../types';\nimport { findKeySuffixValue, getSimpleName, getValueByPrefix } from '../utils';\nimport { getAnnotations, getLabels } from '../selectors';\nimport { NetworkWrapper } from '../../k8s/wrapper/vm/network-wrapper';\nimport { getDataVolumeStorageClassName, getDataVolumeStorageSize } from '../dv/selectors';\nimport { V1Disk } from '../../types/vm/disk/V1Disk';\nimport {\n  getVolumeCloudInitNoCloud,\n  getVolumeContainerImage,\n  getVolumePersistentVolumeClaimName,\n} from './volume';\nimport { getVMIDisks } from '../vmi/basic';\nimport { VirtualMachineModel } from '../../models';\nimport { V1Volume } from '../../types/vm/disk/V1Volume';\nimport { VMGenericLikeEntityKind, VMILikeEntityKind } from '../../types/vmLike';\nimport { RunStrategy, StateChangeRequest } from '../../constants/vm/vm';\n\nexport const getMemory = (vm: VMKind) =>\n  _.get(vm, 'spec.template.spec.domain.resources.requests.memory');\nexport const getCPU = (vm: VMKind): CPURaw => _.get(vm, 'spec.template.spec.domain.cpu');\nexport const getResourcesRequestsCPUCount = (vm: VMKind): string =>\n  vm?.spec?.template?.spec?.domain?.resources?.requests?.cpu;\nexport const getResourcesLimitsCPUCount = (vm: VMKind): string =>\n  vm?.spec?.template?.spec?.domain?.resources?.limits?.cpu;\nexport const isDedicatedCPUPlacement = (vm: VMKind) =>\n  _.get(vm, 'spec.template.spec.domain.cpu.dedicatedCpuPlacement');\nexport const getDisks = (vm: VMKind, defaultValue: V1Disk[] = []): V1Disk[] =>\n  _.get(vm, 'spec.template.spec.domain.devices.disks') == null\n    ? defaultValue\n    : vm.spec.template.spec.domain.devices.disks;\n\nexport const getInterfaces = (\n  vm: VMKind,\n  defaultValue: V1NetworkInterface[] = [],\n): V1NetworkInterface[] =>\n  _.get(vm, 'spec.template.spec.domain.devices.interfaces') == null\n    ? defaultValue\n    : vm.spec.template.spec.domain.devices.interfaces;\n\nexport const getNetworks = (vm: VMKind, defaultValue: V1Network[] = []): V1Network[] =>\n  _.get(vm, 'spec.template.spec.networks') == null ? defaultValue : vm.spec.template.spec.networks;\nexport const getVolumes = (vm: VMKind, defaultValue: V1Volume[] = []): V1Volume[] =>\n  _.get(vm, 'spec.template.spec.volumes') == null ? defaultValue : vm.spec.template.spec.volumes;\nexport const getDataVolumeTemplates = (vm: VMKind, defaultValue = []) =>\n  _.get(vm, 'spec.dataVolumeTemplates') == null ? defaultValue : vm.spec.dataVolumeTemplates;\n\nexport const getConfigMapVolumes = (vm: VMKind, defaultValue: V1Volume[] = []): V1Volume[] =>\n  getVolumes(vm, defaultValue).filter((vol) => Object.keys(vol).includes('configMap'));\n\nexport const getSecretVolumes = (vm: VMKind, defaultValue: V1Volume[] = []): V1Volume[] =>\n  getVolumes(vm, defaultValue).filter((vol) => Object.keys(vol).includes('secret'));\n\nexport const getServiceAccountVolumes = (vm: VMKind, defaultValue: V1Volume[] = []): V1Volume[] =>\n  getVolumes(vm, defaultValue).filter((vol) => Object.keys(vol).includes('serviceAccount'));\n\nexport const getEnvDiskVolumes = (vm: VMKind, defaultValue: V1Volume[] = []): V1Volume[] => [\n  ...getConfigMapVolumes(vm, defaultValue),\n  ...getSecretVolumes(vm, defaultValue),\n  ...getServiceAccountVolumes(vm, defaultValue),\n];\n\nexport const getConfigMapDisks = (vm: VMKind, defaultValue: V1Disk[] = []): V1Disk[] =>\n  getDisks(vm, defaultValue).filter(\n    (disk) => !!getConfigMapVolumes(vm).find((vol) => vol.name === disk.name),\n  );\n\nexport const getSecretDisks = (vm: VMKind, defaultValue: V1Disk[] = []): V1Disk[] =>\n  getDisks(vm, defaultValue).filter(\n    (disk) => !!getSecretVolumes(vm).find((vol) => vol.name === disk.name),\n  );\n\nexport const getServiceAccountDisks = (vm: VMKind, defaultValue: V1Disk[] = []): V1Disk[] =>\n  getDisks(vm, defaultValue).filter(\n    (disk) => !!getServiceAccountVolumes(vm).find((vol) => vol.name === disk.name),\n  );\n\nexport const getEnvDisks = (vm: VMKind, defaultValue: V1Disk[] = []): V1Disk[] => [\n  ...getConfigMapDisks(vm, defaultValue),\n  ...getSecretDisks(vm, defaultValue),\n  ...getServiceAccountDisks(vm, defaultValue),\n];\n\nexport const getBootableDisks = (vm: VMKind, defaultValue: V1Disk[] = []): V1Disk[] =>\n  getDisks(vm, defaultValue).filter(\n    (disk) => !getEnvDisks(vm).find((envDisk) => envDisk.name === disk.name),\n  );\n\nexport const getNonBootableDisks = (vm: VMKind, defaultValue: V1Disk[] = []): V1Disk[] =>\n  getDisks(vm, defaultValue).filter((disk) =>\n    getEnvDisks(vm).find((envDisk) => envDisk.name === disk.name),\n  );\n\nexport const getOperatingSystem = (vmLike: VMGenericLikeEntityKind): string =>\n  findKeySuffixValue(getLabels(vmLike), TEMPLATE_OS_LABEL);\nexport const getOperatingSystemName = (vmLike: VMGenericLikeEntityKind) =>\n  getValueByPrefix(\n    getAnnotations(vmLike),\n    `${TEMPLATE_OS_NAME_ANNOTATION}/${getOperatingSystem(vmLike)}`,\n  );\n\nexport const getWorkloadProfile = (vm: VMGenericLikeEntityKind) =>\n  findKeySuffixValue(getLabels(vm), TEMPLATE_WORKLOAD_LABEL);\nexport const getFlavor = (vmLike: VMGenericLikeEntityKind) =>\n  findKeySuffixValue(getLabels(vmLike), TEMPLATE_FLAVOR_LABEL);\n\nexport const isVMReady = (vm: VMKind) => !!vm?.status?.ready;\n\nexport const isVMCreated = (vm: VMKind) => !!vm?.status?.created;\n\nexport const isVMExpectedRunning = (vm: VMKind) => {\n  if (!vm?.spec) {\n    return false;\n  }\n  const { running, runStrategy } = vm.spec;\n\n  if (running != null) {\n    return running;\n  }\n\n  if (runStrategy != null) {\n    let changeRequests;\n    switch (runStrategy as RunStrategy) {\n      case RunStrategy.Halted:\n        return false;\n      case RunStrategy.Always:\n      case RunStrategy.RerunOnFailure:\n        return true;\n      case RunStrategy.Manual:\n      default:\n        changeRequests = new Set(\n          (vm.status?.stateChangeRequests || []).map((chRequest) => chRequest?.action),\n        );\n\n        if (changeRequests.has(StateChangeRequest.Stop)) {\n          return false;\n        }\n        if (changeRequests.has(StateChangeRequest.Start)) {\n          return true;\n        }\n\n        return isVMCreated(vm); // if there is no change request we can assume created is representing running (current and expected)\n    }\n  }\n  return false;\n};\n\nexport const isVMRunningOrExpectedRunning = (vm: VMKind) => {\n  return isVMCreated(vm) || isVMExpectedRunning(vm);\n};\n\nexport const getUsedNetworks = (vm: VMKind): NetworkWrapper[] => {\n  const interfaces = getInterfaces(vm);\n  const networkLookup = createBasicLookup<any>(getNetworks(vm), getSimpleName);\n\n  return interfaces\n    .map((i) => new NetworkWrapper(networkLookup[i.name]))\n    .filter((i) => i.getType());\n};\n\nexport const getCloudInitVolume = (vm: VMKind) => {\n  const cloudInitVolume = getVolumes(vm).find(getVolumeCloudInitNoCloud);\n\n  if (cloudInitVolume) {\n    // make sure volume is used by disk\n    const disks = getDisks(vm);\n    if (disks.find((disk) => disk.name === cloudInitVolume.name)) {\n      return cloudInitVolume;\n    }\n  }\n  return null;\n};\n\nexport const hasAutoAttachPodInterface = (vm: VMKind, defaultValue = false) =>\n  _.get(vm, 'spec.template.spec.domain.devices.autoattachPodInterface', defaultValue);\n\nexport const getCDRoms = (vm: VMILikeEntityKind) =>\n  vm.kind === VirtualMachineModel.kind\n    ? getDisks(vm as VMKind).filter((device) => !!device.cdrom)\n    : getVMIDisks(vm as VMIKind).filter((device) => !!device.cdrom);\n\nexport const getContainerImageByDisk = (vm: VMKind, name: string) =>\n  getVolumeContainerImage(getVolumes(vm).find((vol) => name === vol.name));\n\nexport const getPVCSourceByDisk = (vm: VMKind, diskName: string) =>\n  getVolumePersistentVolumeClaimName(getVolumes(vm).find((vol) => vol.name === diskName));\n\nexport const getURLSourceByDisk = (vm: VMKind, name: string) => {\n  const dvTemplate = getDataVolumeTemplates(vm).find((vol) => getName(vol).includes(name));\n  return (\n    dvTemplate &&\n    dvTemplate.spec &&\n    dvTemplate.spec.source &&\n    dvTemplate.spec.source.http &&\n    dvTemplate.spec.source.http.url\n  );\n};\n\nexport const getStorageSizeByDisk = (vm: VMKind, diskName: string) =>\n  getDataVolumeStorageSize(\n    getDataVolumeTemplates(vm).find((vol) => getName(vol).includes(diskName)),\n  );\n\nexport const getStorageClassNameByDisk = (vm: VMKind, diskName: string) =>\n  getDataVolumeStorageClassName(\n    getDataVolumeTemplates(vm).find((vol) => getName(vol).includes(diskName)),\n  );\n\nexport const getNodeSelector = (vm: VMKind) => vm?.spec?.template?.spec?.nodeSelector;\n\nexport const getTolerations = (vm: VMKind) => vm?.spec?.template?.spec?.tolerations;\n\nexport const getAffinity = (vm: VMKind) => vm?.spec?.template?.spec?.affinity;\n"]}]}