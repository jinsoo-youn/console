{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/topology/kubevirt-data-transformer.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/topology/kubevirt-data-transformer.ts","mtime":1616735742430},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { apiVersionForModel, referenceFor } from '@console/internal/module/k8s';\nimport { getRoutesForServices, getBuildConfigsForResource, getReplicationControllersForResource, getServicesForResource, } from '@console/shared';\nimport { getImageForIconClass } from '@console/internal/components/catalog/catalog-item-icon';\nimport { getRoutesURL, addToTopologyDataModel, getTopologyEdgeItems, getTopologyGroupItems, getTopologyNodeItem, mergeGroup, } from '@console/dev-console/src/components/topology';\nimport { VirtualMachineModel } from '../models';\nimport { TYPE_VIRTUAL_MACHINE } from './components/const';\nimport { findVMIPod } from '../selectors/pod/selectors';\nimport { getVMStatus } from '../statuses/vm/vm-status';\nexport const kubevirtAllowedResources = ['virtualmachines'];\nexport const getOperatingSystemImage = (vm, templates) => {\n    var _a, _b;\n    const templateName = (_b = (_a = vm.metadata) === null || _a === void 0 ? void 0 : _a.labels) === null || _b === void 0 ? void 0 : _b['vm.kubevirt.io/template'];\n    const template = templateName && templates.find((t) => t.metadata.name === templateName);\n    if (!template) {\n        return '';\n    }\n    return getImageForIconClass(template.metadata.annotations.iconClass);\n};\nexport const createVMOverviewItem = (vm, vmi, resources) => {\n    const obj = Object.assign(Object.assign({}, vm), { apiVersion: apiVersionForModel(VirtualMachineModel), kind: VirtualMachineModel.kind });\n    const { visibleReplicationControllers } = getReplicationControllersForResource(obj, resources);\n    const [current, previous] = visibleReplicationControllers;\n    const buildConfigs = getBuildConfigsForResource(obj, resources);\n    const services = getServicesForResource(obj, resources);\n    const routes = getRoutesForServices(services, resources);\n    const laucherPod = findVMIPod(vmi, resources.pods.data);\n    const pods = laucherPod ? [laucherPod] : [];\n    return {\n        buildConfigs,\n        current,\n        obj,\n        previous,\n        pods,\n        routes,\n        services,\n        isMonitorable: false,\n        isOperatorBackedService: false,\n    };\n};\nexport const createVMOverviewItems = (resources) => {\n    var _a;\n    if (!((_a = resources.virtualmachines) === null || _a === void 0 ? void 0 : _a.data.length)) {\n        return [];\n    }\n    return resources.virtualmachines.data.map((vm) => {\n        const { name } = vm.metadata;\n        const vmis = resources.virtualmachineinstances.data;\n        const vmi = vmis.find((instance) => instance.metadata.name === name);\n        return createVMOverviewItem(vm, vmi, resources);\n    });\n};\nconst createTopologyVMNodeData = (vmOverview, resources) => {\n    var _a, _b, _c, _d, _e;\n    const vm = vmOverview.obj;\n    const { uid, name, labels } = vm.metadata;\n    const vmis = (_a = resources.virtualmachineinstances) === null || _a === void 0 ? void 0 : _a.data;\n    const vmi = vmis.find((instance) => instance.metadata.name === name);\n    const pods = (_b = resources.pods) === null || _b === void 0 ? void 0 : _b.data;\n    const migrations = (_c = resources.migrations) === null || _c === void 0 ? void 0 : _c.data;\n    const dataVolumes = (_d = resources.dataVolumes) === null || _d === void 0 ? void 0 : _d.data;\n    const vmImports = (_e = resources.vmImports) === null || _e === void 0 ? void 0 : _e.data;\n    const vmStatusBundle = getVMStatus({\n        vm,\n        vmi,\n        pods,\n        migrations,\n        dataVolumes,\n        vmImports,\n    });\n    return {\n        id: uid,\n        name: name || labels['app.kubernetes.io/instance'],\n        type: TYPE_VIRTUAL_MACHINE,\n        resources: vmOverview,\n        operatorBackedService: false,\n        data: {\n            url: getRoutesURL(vmOverview),\n            kind: referenceFor(vm),\n            vmi,\n            vmStatusBundle,\n            osImage: getOperatingSystemImage(vm, resources.virtualmachinetemplates.data),\n        },\n    };\n};\nexport const getKubevirtTopologyDataModel = (resources, allResources, installedOperators, utils, transformBy, serviceBindingRequests) => {\n    var _a;\n    const vmsDataModel = {\n        graph: { nodes: [], edges: [], groups: [] },\n        topology: {},\n    };\n    const vmsResources = [];\n    if ((_a = resources.virtualmachines) === null || _a === void 0 ? void 0 : _a.data.length) {\n        const typedDataModel = {\n            graph: { nodes: [], edges: [], groups: [] },\n            topology: {},\n        };\n        const vmOverviewItems = createVMOverviewItems(resources);\n        vmOverviewItems.forEach((vmOverview) => {\n            const vm = vmOverview.obj;\n            const { uid } = vm.metadata;\n            vmsResources.push(uid);\n            typedDataModel.topology[uid] = createTopologyVMNodeData(vmOverview, resources);\n            typedDataModel.graph.nodes.push(getTopologyNodeItem(vm, TYPE_VIRTUAL_MACHINE));\n            typedDataModel.graph.edges.push(...getTopologyEdgeItems(vm, allResources, serviceBindingRequests));\n            mergeGroup(getTopologyGroupItems(vm), typedDataModel.graph.groups);\n        });\n        addToTopologyDataModel(typedDataModel, vmsDataModel);\n    }\n    return vmsDataModel;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/topology/kubevirt-data-transformer.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/topology/kubevirt-data-transformer.ts"],"names":[],"mappings":"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","sourcesContent":["import { apiVersionForModel, K8sResourceKind, referenceFor } from '@console/internal/module/k8s';\nimport {\n  OverviewItem,\n  getRoutesForServices,\n  getBuildConfigsForResource,\n  getReplicationControllersForResource,\n  getServicesForResource,\n} from '@console/shared';\nimport { getImageForIconClass } from '@console/internal/components/catalog/catalog-item-icon';\nimport {\n  TopologyDataModel,\n  TopologyDataObject,\n  TopologyDataResources,\n  getRoutesURL,\n  addToTopologyDataModel,\n  getTopologyEdgeItems,\n  getTopologyGroupItems,\n  getTopologyNodeItem,\n  mergeGroup,\n} from '@console/dev-console/src/components/topology';\nimport { VMIKind, VMKind } from '../types';\nimport { VirtualMachineModel } from '../models';\nimport { TYPE_VIRTUAL_MACHINE } from './components/const';\nimport { findVMIPod } from '../selectors/pod/selectors';\nimport { getVMStatus } from '../statuses/vm/vm-status';\nimport { V1alpha1DataVolume } from '../types/vm/disk/V1alpha1DataVolume';\nimport { VMImportKind } from '../types/vm-import/ovirt/vm-import';\nimport { VMNodeData } from './types';\n\nexport const kubevirtAllowedResources = ['virtualmachines'];\n\nexport const getOperatingSystemImage = (vm: VMKind, templates: K8sResourceKind[]): string => {\n  const templateName = vm.metadata?.labels?.['vm.kubevirt.io/template'];\n  const template = templateName && templates.find((t) => t.metadata.name === templateName);\n  if (!template) {\n    return '';\n  }\n\n  return getImageForIconClass(template.metadata.annotations.iconClass);\n};\n\nexport const createVMOverviewItem = (vm: VMKind, vmi: VMIKind, resources: any): OverviewItem => {\n  const obj: K8sResourceKind = {\n    ...vm,\n    apiVersion: apiVersionForModel(VirtualMachineModel),\n    kind: VirtualMachineModel.kind,\n  };\n  const { visibleReplicationControllers } = getReplicationControllersForResource(obj, resources);\n  const [current, previous] = visibleReplicationControllers;\n  const buildConfigs = getBuildConfigsForResource(obj, resources);\n  const services = getServicesForResource(obj, resources);\n  const routes = getRoutesForServices(services, resources);\n  const laucherPod = findVMIPod(vmi, resources.pods.data);\n  const pods = laucherPod ? [laucherPod] : [];\n  return {\n    buildConfigs,\n    current,\n    obj,\n    previous,\n    pods,\n    routes,\n    services,\n    isMonitorable: false,\n    isOperatorBackedService: false,\n  };\n};\n\nexport const createVMOverviewItems = (resources: any): OverviewItem[] => {\n  if (!resources.virtualmachines?.data.length) {\n    return [];\n  }\n\n  return resources.virtualmachines.data.map((vm: any) => {\n    const { name } = vm.metadata;\n    const vmis = resources.virtualmachineinstances.data;\n    const vmi = vmis.find((instance) => instance.metadata.name === name) as VMIKind;\n\n    return createVMOverviewItem(vm, vmi, resources);\n  });\n};\n\nconst createTopologyVMNodeData = (\n  vmOverview: OverviewItem,\n  resources: TopologyDataResources,\n): TopologyDataObject<VMNodeData> => {\n  const vm = vmOverview.obj as VMKind;\n  const { uid, name, labels } = vm.metadata;\n  const vmis = resources.virtualmachineinstances?.data;\n  const vmi = vmis.find((instance) => instance.metadata.name === name) as VMIKind;\n  const pods = resources.pods?.data;\n  const migrations = resources.migrations?.data;\n  const dataVolumes = resources.dataVolumes?.data as V1alpha1DataVolume[];\n  const vmImports = resources.vmImports?.data as VMImportKind[];\n\n  const vmStatusBundle = getVMStatus({\n    vm,\n    vmi,\n    pods,\n    migrations,\n    dataVolumes,\n    vmImports,\n  });\n\n  return {\n    id: uid,\n    name: name || labels['app.kubernetes.io/instance'],\n    type: TYPE_VIRTUAL_MACHINE,\n    resources: vmOverview,\n    operatorBackedService: false,\n    data: {\n      url: getRoutesURL(vmOverview),\n      kind: referenceFor(vm),\n      vmi,\n      vmStatusBundle,\n      osImage: getOperatingSystemImage(vm as VMKind, resources.virtualmachinetemplates.data),\n    },\n  };\n};\n\nexport const getKubevirtTopologyDataModel = (\n  resources: TopologyDataResources,\n  allResources: K8sResourceKind[],\n  installedOperators,\n  utils: Function[],\n  transformBy: string[],\n  serviceBindingRequests: K8sResourceKind[],\n): TopologyDataModel => {\n  const vmsDataModel: TopologyDataModel = {\n    graph: { nodes: [], edges: [], groups: [] },\n    topology: {},\n  };\n  const vmsResources = [];\n\n  if (resources.virtualmachines?.data.length) {\n    const typedDataModel: TopologyDataModel = {\n      graph: { nodes: [], edges: [], groups: [] },\n      topology: {},\n    };\n\n    const vmOverviewItems = createVMOverviewItems(resources);\n    vmOverviewItems.forEach((vmOverview: OverviewItem) => {\n      const vm = vmOverview.obj;\n      const { uid } = vm.metadata;\n      vmsResources.push(uid);\n      typedDataModel.topology[uid] = createTopologyVMNodeData(vmOverview, resources);\n      typedDataModel.graph.nodes.push(getTopologyNodeItem(vm, TYPE_VIRTUAL_MACHINE));\n      typedDataModel.graph.edges.push(\n        ...getTopologyEdgeItems(vm, allResources, serviceBindingRequests),\n      );\n      mergeGroup(getTopologyGroupItems(vm), typedDataModel.graph.groups);\n    });\n\n    addToTopologyDataModel(typedDataModel, vmsDataModel);\n  }\n\n  return vmsDataModel;\n};\n"]}]}