{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/topology/data-transformer.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/topology/data-transformer.ts","mtime":1615298458640},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { getOperatorBackedServiceKindMap } from '@console/shared';\nimport { addToTopologyDataModel, } from '@console/dev-console/src/components/topology';\nimport { getDynamicEventSourcesModelRefs } from '../utils/fetch-dynamic-eventsources-utils';\nimport { NodeType, transformKnNodeData } from './knative-topology-utils';\n/**\n * Filter out deployments not created via revisions/eventsources\n */\nexport const filterNonKnativeDeployments = (resources, eventSources) => {\n    const KNATIVE_CONFIGURATION = 'serving.knative.dev/configuration';\n    const isEventSourceKind = (uid) => uid && !!(eventSources === null || eventSources === void 0 ? void 0 : eventSources.find((eventSource) => { var _a; return ((_a = eventSource.metadata) === null || _a === void 0 ? void 0 : _a.uid) === uid; }));\n    return _.filter(resources, (d) => {\n        var _a, _b;\n        return (!_.get(d, ['metadata', 'labels', KNATIVE_CONFIGURATION], false) &&\n            !isEventSourceKind((_b = (_a = d.metadata) === null || _a === void 0 ? void 0 : _a.ownerReferences) === null || _b === void 0 ? void 0 : _b[0].uid));\n    });\n};\nconst addKnativeTopologyData = (topologyDataModel, knativeResources, allResources, type, resources, operatorBackedServiceKindMap, utils) => {\n    if (!(knativeResources === null || knativeResources === void 0 ? void 0 : knativeResources.length)) {\n        return;\n    }\n    const knativeResourceDataModel = transformKnNodeData(knativeResources, type, resources, allResources, operatorBackedServiceKindMap, utils);\n    addToTopologyDataModel(knativeResourceDataModel, topologyDataModel);\n};\nconst getKnativeEventSources = (resources) => {\n    const evenSourceProps = getDynamicEventSourcesModelRefs();\n    return evenSourceProps.reduce((acc, currProp) => {\n        var _a, _b;\n        const currPropResource = (_b = (_a = resources[currProp]) === null || _a === void 0 ? void 0 : _a.data) !== null && _b !== void 0 ? _b : [];\n        return [...acc, ...currPropResource];\n    }, []);\n};\nexport const getKnativeTopologyDataModel = (resources, allResources, installedOperators, utils) => {\n    const knativeTopologyDataModel = {\n        graph: { nodes: [], edges: [], groups: [] },\n        topology: {},\n    };\n    const operatorBackedServiceKindMap = getOperatorBackedServiceKindMap(installedOperators);\n    const knSvcResources = _.get(resources, ['ksservices', 'data'], []);\n    const knEventSources = getKnativeEventSources(resources);\n    const knRevResources = _.get(resources, ['revisions', 'data'], []);\n    addKnativeTopologyData(knativeTopologyDataModel, knSvcResources, allResources, NodeType.KnService, resources, operatorBackedServiceKindMap, utils);\n    addKnativeTopologyData(knativeTopologyDataModel, knEventSources, allResources, NodeType.EventSource, resources, operatorBackedServiceKindMap, utils);\n    addKnativeTopologyData(knativeTopologyDataModel, knRevResources, allResources, NodeType.Revision, resources, operatorBackedServiceKindMap, utils);\n    const deploymentResources = _.get(resources, ['deployments', 'data'], []);\n    resources.deployments.data = filterNonKnativeDeployments(deploymentResources, knEventSources);\n    return knativeTopologyDataModel;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/topology/data-transformer.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/topology/data-transformer.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { getOperatorBackedServiceKindMap, OperatorBackedServiceKindMap } from '@console/shared';\nimport { DeploymentKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport { ClusterServiceVersionKind } from '@console/operator-lifecycle-manager';\nimport {\n  TopologyDataModel,\n  TopologyDataResources,\n  addToTopologyDataModel,\n} from '@console/dev-console/src/components/topology';\nimport { getDynamicEventSourcesModelRefs } from '../utils/fetch-dynamic-eventsources-utils';\nimport { NodeType, transformKnNodeData } from './knative-topology-utils';\n\n/**\n * Filter out deployments not created via revisions/eventsources\n */\nexport const filterNonKnativeDeployments = (\n  resources: DeploymentKind[],\n  eventSources?: K8sResourceKind[],\n): DeploymentKind[] => {\n  const KNATIVE_CONFIGURATION = 'serving.knative.dev/configuration';\n  const isEventSourceKind = (uid: string): boolean =>\n    uid && !!eventSources?.find((eventSource) => eventSource.metadata?.uid === uid);\n  return _.filter(resources, (d) => {\n    return (\n      !_.get(d, ['metadata', 'labels', KNATIVE_CONFIGURATION], false) &&\n      !isEventSourceKind(d.metadata?.ownerReferences?.[0].uid)\n    );\n  });\n};\n\nconst addKnativeTopologyData = (\n  topologyDataModel: TopologyDataModel,\n  knativeResources: K8sResourceKind[],\n  allResources: K8sResourceKind[],\n  type: string,\n  resources: TopologyDataResources,\n  operatorBackedServiceKindMap: OperatorBackedServiceKindMap,\n  utils: Function[],\n) => {\n  if (!knativeResources?.length) {\n    return;\n  }\n\n  const knativeResourceDataModel = transformKnNodeData(\n    knativeResources,\n    type,\n    resources,\n    allResources,\n    operatorBackedServiceKindMap,\n    utils,\n  );\n\n  addToTopologyDataModel(knativeResourceDataModel, topologyDataModel);\n};\n\nconst getKnativeEventSources = (resources: TopologyDataResources): K8sResourceKind[] => {\n  const evenSourceProps = getDynamicEventSourcesModelRefs();\n  return evenSourceProps.reduce((acc, currProp) => {\n    const currPropResource = resources[currProp]?.data ?? [];\n    return [...acc, ...currPropResource];\n  }, []);\n};\n\nexport const getKnativeTopologyDataModel = (\n  resources: TopologyDataResources,\n  allResources: K8sResourceKind[],\n  installedOperators: ClusterServiceVersionKind[],\n  utils?: Function[],\n): TopologyDataModel => {\n  const knativeTopologyDataModel = {\n    graph: { nodes: [], edges: [], groups: [] },\n    topology: {},\n  };\n  const operatorBackedServiceKindMap = getOperatorBackedServiceKindMap(installedOperators);\n  const knSvcResources: K8sResourceKind[] = _.get(resources, ['ksservices', 'data'], []);\n  const knEventSources: K8sResourceKind[] = getKnativeEventSources(resources);\n  const knRevResources: K8sResourceKind[] = _.get(resources, ['revisions', 'data'], []);\n\n  addKnativeTopologyData(\n    knativeTopologyDataModel,\n    knSvcResources,\n    allResources,\n    NodeType.KnService,\n    resources,\n    operatorBackedServiceKindMap,\n    utils,\n  );\n  addKnativeTopologyData(\n    knativeTopologyDataModel,\n    knEventSources,\n    allResources,\n    NodeType.EventSource,\n    resources,\n    operatorBackedServiceKindMap,\n    utils,\n  );\n  addKnativeTopologyData(\n    knativeTopologyDataModel,\n    knRevResources,\n    allResources,\n    NodeType.Revision,\n    resources,\n    operatorBackedServiceKindMap,\n    utils,\n  );\n\n  const deploymentResources: DeploymentKind[] = _.get(resources, ['deployments', 'data'], []);\n  resources.deployments.data = filterNonKnativeDeployments(deploymentResources, knEventSources);\n\n  return knativeTopologyDataModel;\n};\n"]}]}