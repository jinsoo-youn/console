{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/cloud-shell/cloud-shell-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/cloud-shell/cloud-shell-utils.ts","mtime":1616735742370},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { k8sPatch } from '@console/internal/module/k8s';\nimport { STORAGE_PREFIX, getRandomChars } from '@console/shared';\nimport { coFetchJSON, coFetch } from '@console/internal/co-fetch';\nimport { WorkspaceModel } from '../../models';\nconst CLOUD_SHELL_NAMESPACE = `${STORAGE_PREFIX}/command-line-terminal-namespace`;\nexport const CLOUD_SHELL_LABEL = 'console.openshift.io/terminal';\nexport const CLOUD_SHELL_CREATOR_LABEL = 'controller.devfile.io/creator';\nexport const CLOUD_SHELL_RESTRICTED_ANNOTATION = 'controller.devfile.io/restricted-access';\nexport const createCloudShellResourceName = () => `terminal-${getRandomChars(6)}`;\nexport const newCloudShellWorkSpace = (name, namespace) => ({\n    apiVersion: 'workspace.devfile.io/v1alpha1',\n    kind: 'DevWorkspace',\n    metadata: {\n        name,\n        namespace,\n        labels: {\n            [CLOUD_SHELL_LABEL]: 'true',\n        },\n        annotations: {\n            [CLOUD_SHELL_RESTRICTED_ANNOTATION]: 'true',\n        },\n    },\n    spec: {\n        started: true,\n        routingClass: 'web-terminal',\n        template: {\n            components: [\n                {\n                    plugin: {\n                        name: 'web-terminal',\n                        id: 'redhat-developer/web-terminal/4.5.0',\n                    },\n                },\n            ],\n        },\n    },\n});\nexport const startWorkspace = (workspace) => {\n    return k8sPatch(WorkspaceModel, workspace, [\n        {\n            path: '/spec/started',\n            op: 'replace',\n            value: true,\n        },\n    ]);\n};\nexport const initTerminal = (username, workspaceName, workspaceNamespace) => {\n    const url = `/api/terminal/proxy/${workspaceNamespace}/${workspaceName}/exec/init`;\n    const payload = {\n        kubeconfig: {\n            username,\n            namespace: workspaceNamespace,\n        },\n    };\n    return coFetchJSON.post(url, payload);\n};\nexport const sendActivityTick = (workspaceName, namespace) => {\n    coFetch(`/api/terminal/proxy/${namespace}/${workspaceName}/activity/tick`, { method: 'POST' });\n};\nexport const checkTerminalAvailable = () => coFetch('/api/terminal/available');\nexport const getCloudShellNamespace = () => localStorage.getItem(CLOUD_SHELL_NAMESPACE);\nexport const setCloudShellNamespace = (namespace) => {\n    if (!namespace) {\n        localStorage.removeItem(CLOUD_SHELL_NAMESPACE);\n    }\n    else {\n        localStorage.setItem(CLOUD_SHELL_NAMESPACE, namespace);\n    }\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/cloud-shell/cloud-shell-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/cloud-shell/cloud-shell-utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAmB,QAAQ,EAAE,MAAM,8BAA8B,CAAC;AACzE,OAAO,EAAE,cAAc,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AACjE,OAAO,EAAE,WAAW,EAAE,OAAO,EAAE,MAAM,4BAA4B,CAAC;AAClE,OAAO,EAAE,cAAc,EAAE,MAAM,cAAc,CAAC;AAE9C,MAAM,qBAAqB,GAAG,GAAG,cAAc,kCAAkC,CAAC;AA2BlF,MAAM,CAAC,MAAM,iBAAiB,GAAG,+BAA+B,CAAC;AACjE,MAAM,CAAC,MAAM,yBAAyB,GAAG,+BAA+B,CAAC;AACzE,MAAM,CAAC,MAAM,iCAAiC,GAAG,yCAAyC,CAAC;AAE3F,MAAM,CAAC,MAAM,4BAA4B,GAAG,GAAG,EAAE,CAAC,YAAY,cAAc,CAAC,CAAC,CAAC,EAAE,CAAC;AAElF,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,IAAY,EAAE,SAAiB,EAAsB,EAAE,CAAC,CAAC;IAC9F,UAAU,EAAE,+BAA+B;IAC3C,IAAI,EAAE,cAAc;IACpB,QAAQ,EAAE;QACR,IAAI;QACJ,SAAS;QACT,MAAM,EAAE;YACN,CAAC,iBAAiB,CAAC,EAAE,MAAM;SAC5B;QACD,WAAW,EAAE;YACX,CAAC,iCAAiC,CAAC,EAAE,MAAM;SAC5C;KACF;IACD,IAAI,EAAE;QACJ,OAAO,EAAE,IAAI;QACb,YAAY,EAAE,cAAc;QAC5B,QAAQ,EAAE;YACR,UAAU,EAAE;gBACV;oBACE,MAAM,EAAE;wBACN,IAAI,EAAE,cAAc;wBACpB,EAAE,EAAE,qCAAqC;qBAC1C;iBACF;aACF;SACF;KACF;CACF,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,SAA6B,EAAE,EAAE;IAC9D,OAAO,QAAQ,CAAC,cAAc,EAAE,SAAS,EAAE;QACzC;YACE,IAAI,EAAE,eAAe;YACrB,EAAE,EAAE,SAAS;YACb,KAAK,EAAE,IAAI;SACZ;KACF,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,YAAY,GAAG,CAC1B,QAAgB,EAChB,aAAqB,EACrB,kBAA0B,EACC,EAAE;IAC7B,MAAM,GAAG,GAAG,uBAAuB,kBAAkB,IAAI,aAAa,YAAY,CAAC;IACnF,MAAM,OAAO,GAAG;QACd,UAAU,EAAE;YACV,QAAQ;YACR,SAAS,EAAE,kBAAkB;SAC9B;KACF,CAAC;IACF,OAAO,WAAW,CAAC,IAAI,CAAC,GAAG,EAAE,OAAO,CAAC,CAAC;AACxC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,aAAqB,EAAE,SAAiB,EAAQ,EAAE;IACjF,OAAO,CAAC,uBAAuB,SAAS,IAAI,aAAa,gBAAgB,EAAE,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;AACjG,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,sBAAsB,GAAG,GAAG,EAAE,CAAC,OAAO,CAAC,yBAAyB,CAAC,CAAC;AAE/E,MAAM,CAAC,MAAM,sBAAsB,GAAG,GAAG,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;AACxF,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,SAAiB,EAAE,EAAE;IAC1D,IAAI,CAAC,SAAS,EAAE;QACd,YAAY,CAAC,UAAU,CAAC,qBAAqB,CAAC,CAAC;KAChD;SAAM;QACL,YAAY,CAAC,OAAO,CAAC,qBAAqB,EAAE,SAAS,CAAC,CAAC;KACxD;AACH,CAAC,CAAC","sourcesContent":["import { K8sResourceKind, k8sPatch } from '@console/internal/module/k8s';\nimport { STORAGE_PREFIX, getRandomChars } from '@console/shared';\nimport { coFetchJSON, coFetch } from '@console/internal/co-fetch';\nimport { WorkspaceModel } from '../../models';\n\nconst CLOUD_SHELL_NAMESPACE = `${STORAGE_PREFIX}/command-line-terminal-namespace`;\n\ntype DevWorkspaceTemplateSpec = {\n  components: Component[];\n};\n\ntype Component = {\n  plugin: {\n    name?: string;\n    id: string;\n  };\n};\n\nexport type CloudShellResource = K8sResourceKind & {\n  status?: {\n    phase: string;\n    ideUrl: string;\n  };\n  spec?: {\n    started?: boolean;\n    routingClass?: string;\n    template?: DevWorkspaceTemplateSpec;\n  };\n};\n\nexport type TerminalInitData = { pod: string; container: string; cmd: string[] };\n\nexport const CLOUD_SHELL_LABEL = 'console.openshift.io/terminal';\nexport const CLOUD_SHELL_CREATOR_LABEL = 'controller.devfile.io/creator';\nexport const CLOUD_SHELL_RESTRICTED_ANNOTATION = 'controller.devfile.io/restricted-access';\n\nexport const createCloudShellResourceName = () => `terminal-${getRandomChars(6)}`;\n\nexport const newCloudShellWorkSpace = (name: string, namespace: string): CloudShellResource => ({\n  apiVersion: 'workspace.devfile.io/v1alpha1',\n  kind: 'DevWorkspace',\n  metadata: {\n    name,\n    namespace,\n    labels: {\n      [CLOUD_SHELL_LABEL]: 'true',\n    },\n    annotations: {\n      [CLOUD_SHELL_RESTRICTED_ANNOTATION]: 'true',\n    },\n  },\n  spec: {\n    started: true,\n    routingClass: 'web-terminal',\n    template: {\n      components: [\n        {\n          plugin: {\n            name: 'web-terminal',\n            id: 'redhat-developer/web-terminal/4.5.0',\n          },\n        },\n      ],\n    },\n  },\n});\n\nexport const startWorkspace = (workspace: CloudShellResource) => {\n  return k8sPatch(WorkspaceModel, workspace, [\n    {\n      path: '/spec/started',\n      op: 'replace',\n      value: true,\n    },\n  ]);\n};\n\nexport const initTerminal = (\n  username: string,\n  workspaceName: string,\n  workspaceNamespace: string,\n): Promise<TerminalInitData> => {\n  const url = `/api/terminal/proxy/${workspaceNamespace}/${workspaceName}/exec/init`;\n  const payload = {\n    kubeconfig: {\n      username,\n      namespace: workspaceNamespace,\n    },\n  };\n  return coFetchJSON.post(url, payload);\n};\n\nexport const sendActivityTick = (workspaceName: string, namespace: string): void => {\n  coFetch(`/api/terminal/proxy/${namespace}/${workspaceName}/activity/tick`, { method: 'POST' });\n};\n\nexport const checkTerminalAvailable = () => coFetch('/api/terminal/available');\n\nexport const getCloudShellNamespace = () => localStorage.getItem(CLOUD_SHELL_NAMESPACE);\nexport const setCloudShellNamespace = (namespace: string) => {\n  if (!namespace) {\n    localStorage.removeItem(CLOUD_SHELL_NAMESPACE);\n  } else {\n    localStorage.setItem(CLOUD_SHELL_NAMESPACE, namespace);\n  }\n};\n"]}]}