{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/resource-icon.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/resource-icon.tsx","mtime":1615298458750},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport * as _ from 'lodash-es';\nimport { modelFor } from '../../module/k8s/k8s-models';\nimport { kindToAbbr } from '../../module/k8s/get-resources';\nconst MEMO = {};\nexport const ResourceIcon = ({ className, kind }) => {\n    // if no kind, return null so an empty icon isn't rendered\n    if (!kind) {\n        return null;\n    }\n    const memoKey = className ? `${kind}/${className}` : kind;\n    if (MEMO[memoKey]) {\n        return MEMO[memoKey];\n    }\n    const kindObj = modelFor(kind);\n    const kindStr = _.get(kindObj, 'kind', kind);\n    const backgroundColor = _.get(kindObj, 'color', undefined);\n    const klass = classNames(`co-m-resource-icon co-m-resource-${kindStr.toLowerCase()}`, className);\n    const iconLabel = (kindObj && kindObj.abbr) || kindToAbbr(kindStr);\n    const rendered = (React.createElement(React.Fragment, null,\n        React.createElement(\"span\", { className: \"sr-only\" }, kindStr),\n        React.createElement(\"span\", { className: klass, title: kindStr, style: { backgroundColor } }, iconLabel)));\n    if (kindObj) {\n        MEMO[memoKey] = rendered;\n    }\n    return rendered;\n};\nexport const ResourceName = (props) => (React.createElement(\"span\", { className: \"co-resource-item\" },\n    React.createElement(ResourceIcon, { kind: props.kind }),\n    ' ',\n    React.createElement(\"span\", { className: \"co-resource-item__resource-name\" }, props.name)));\nResourceName.displayName = 'ResourceName';\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/resource-icon.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/resource-icon.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,UAAU,MAAM,YAAY,CAAC;AACzC,OAAO,KAAK,CAAC,MAAM,WAAW,CAAC;AAG/B,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AACvD,OAAO,EAAE,UAAU,EAAE,MAAM,gCAAgC,CAAC;AAE5D,MAAM,IAAI,GAAG,EAAE,CAAC;AAEhB,MAAM,CAAC,MAAM,YAAY,GAAiC,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,EAAE,EAAE;IAChF,0DAA0D;IAC1D,IAAI,CAAC,IAAI,EAAE;QACT,OAAO,IAAI,CAAC;KACb;IACD,MAAM,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI,IAAI,SAAS,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IAC1D,IAAI,IAAI,CAAC,OAAO,CAAC,EAAE;QACjB,OAAO,IAAI,CAAC,OAAO,CAAC,CAAC;KACtB;IACD,MAAM,OAAO,GAAG,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC/B,MAAM,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;IAC7C,MAAM,eAAe,GAAG,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;IAC3D,MAAM,KAAK,GAAG,UAAU,CAAC,oCAAoC,OAAO,CAAC,WAAW,EAAE,EAAE,EAAE,SAAS,CAAC,CAAC;IACjG,MAAM,SAAS,GAAG,CAAC,OAAO,IAAI,OAAO,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,OAAO,CAAC,CAAC;IAEnE,MAAM,QAAQ,GAAG,CACf;QACE,8BAAM,SAAS,EAAC,SAAS,IAAE,OAAO,CAAQ;QAC1C,8BAAM,SAAS,EAAE,KAAK,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,eAAe,EAAE,IAC/D,SAAS,CACL,CACN,CACJ,CAAC;IACF,IAAI,OAAO,EAAE;QACX,IAAI,CAAC,OAAO,CAAC,GAAG,QAAQ,CAAC;KAC1B;IAED,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC;AAYF,MAAM,CAAC,MAAM,YAAY,GAAiC,CAAC,KAAK,EAAE,EAAE,CAAC,CACnE,8BAAM,SAAS,EAAC,kBAAkB;IAChC,oBAAC,YAAY,IAAC,IAAI,EAAE,KAAK,CAAC,IAAI,GAAI;IAAC,GAAG;IACtC,8BAAM,SAAS,EAAC,iCAAiC,IAAE,KAAK,CAAC,IAAI,CAAQ,CAChE,CACR,CAAC;AAEF,YAAY,CAAC,WAAW,GAAG,cAAc,CAAC","sourcesContent":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport * as _ from 'lodash-es';\n\nimport { K8sResourceKindReference } from '../../module/k8s';\nimport { modelFor } from '../../module/k8s/k8s-models';\nimport { kindToAbbr } from '../../module/k8s/get-resources';\n\nconst MEMO = {};\n\nexport const ResourceIcon: React.SFC<ResourceIconProps> = ({ className, kind }) => {\n  // if no kind, return null so an empty icon isn't rendered\n  if (!kind) {\n    return null;\n  }\n  const memoKey = className ? `${kind}/${className}` : kind;\n  if (MEMO[memoKey]) {\n    return MEMO[memoKey];\n  }\n  const kindObj = modelFor(kind);\n  const kindStr = _.get(kindObj, 'kind', kind);\n  const backgroundColor = _.get(kindObj, 'color', undefined);\n  const klass = classNames(`co-m-resource-icon co-m-resource-${kindStr.toLowerCase()}`, className);\n  const iconLabel = (kindObj && kindObj.abbr) || kindToAbbr(kindStr);\n\n  const rendered = (\n    <>\n      <span className=\"sr-only\">{kindStr}</span>\n      <span className={klass} title={kindStr} style={{ backgroundColor }}>\n        {iconLabel}\n      </span>\n    </>\n  );\n  if (kindObj) {\n    MEMO[memoKey] = rendered;\n  }\n\n  return rendered;\n};\n\nexport type ResourceIconProps = {\n  className?: string;\n  kind: K8sResourceKindReference;\n};\n\nexport type ResourceNameProps = {\n  kind: K8sResourceKindReference;\n  name: string;\n};\n\nexport const ResourceName: React.SFC<ResourceNameProps> = (props) => (\n  <span className=\"co-resource-item\">\n    <ResourceIcon kind={props.kind} />{' '}\n    <span className=\"co-resource-item__resource-name\">{props.name}</span>\n  </span>\n);\n\nResourceName.displayName = 'ResourceName';\n"]}]}