{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vm/cpu.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vm/cpu.ts","mtime":1616735742430},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["export const DEFAULT_CPU = { sockets: 1, cores: 1, threads: 1 };\nexport const parseCPU = (sourceCPURaw, defaultValue) => {\n    if (!sourceCPURaw) {\n        return defaultValue;\n    }\n    if (typeof sourceCPURaw === 'string') {\n        return { sockets: 1, cores: parseInt(sourceCPURaw, 10), threads: 1 };\n    }\n    return {\n        sockets: parseInt(sourceCPURaw.sockets, 10) || 1,\n        cores: parseInt(sourceCPURaw.cores, 10) || 1,\n        threads: parseInt(sourceCPURaw.threads, 10) || 1,\n    };\n};\nexport const vCPUCount = (sourceCPURaw) => {\n    const cpu = parseCPU(sourceCPURaw, DEFAULT_CPU);\n    return cpu.sockets * cpu.cores * cpu.threads;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vm/cpu.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vm/cpu.ts"],"names":[],"mappings":"AAEA,MAAM,CAAC,MAAM,WAAW,GAAQ,EAAE,OAAO,EAAE,CAAC,EAAE,KAAK,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC;AAErE,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,YAAoB,EAAE,YAAkB,EAAO,EAAE;IACxE,IAAI,CAAC,YAAY,EAAE;QACjB,OAAO,YAAY,CAAC;KACrB;IAED,IAAI,OAAO,YAAY,KAAK,QAAQ,EAAE;QACpC,OAAO,EAAE,OAAO,EAAE,CAAC,EAAE,KAAK,EAAE,QAAQ,CAAC,YAAsB,EAAE,EAAE,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,CAAC;KAChF;IAED,OAAO;QACL,OAAO,EAAE,QAAQ,CAAC,YAAY,CAAC,OAAO,EAAE,EAAE,CAAC,IAAI,CAAC;QAChD,KAAK,EAAE,QAAQ,CAAC,YAAY,CAAC,KAAK,EAAE,EAAE,CAAC,IAAI,CAAC;QAC5C,OAAO,EAAE,QAAQ,CAAC,YAAY,CAAC,OAAO,EAAE,EAAE,CAAC,IAAI,CAAC;KACjD,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,SAAS,GAAG,CAAC,YAAoB,EAAU,EAAE;IACxD,MAAM,GAAG,GAAG,QAAQ,CAAC,YAAY,EAAE,WAAW,CAAC,CAAC;IAChD,OAAO,GAAG,CAAC,OAAO,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,OAAO,CAAC;AAC/C,CAAC,CAAC","sourcesContent":["import { CPURaw, CPU } from '../../types';\n\nexport const DEFAULT_CPU: CPU = { sockets: 1, cores: 1, threads: 1 };\n\nexport const parseCPU = (sourceCPURaw: CPURaw, defaultValue?: CPU): CPU => {\n  if (!sourceCPURaw) {\n    return defaultValue;\n  }\n\n  if (typeof sourceCPURaw === 'string') {\n    return { sockets: 1, cores: parseInt(sourceCPURaw as string, 10), threads: 1 };\n  }\n\n  return {\n    sockets: parseInt(sourceCPURaw.sockets, 10) || 1,\n    cores: parseInt(sourceCPURaw.cores, 10) || 1,\n    threads: parseInt(sourceCPURaw.threads, 10) || 1,\n  };\n};\n\nexport const vCPUCount = (sourceCPURaw: CPURaw): number => {\n  const cpu = parseCPU(sourceCPURaw, DEFAULT_CPU);\n  return cpu.sockets * cpu.cores * cpu.threads;\n};\n"]}]}