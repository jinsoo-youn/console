{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/pipeline/PipelineTemplate.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/pipeline/PipelineTemplate.tsx","mtime":1615298458620},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as React from 'react';\nimport { LoadingInline } from '@console/internal/components/utils';\nimport { k8sList } from '@console/internal/module/k8s';\nimport { useFormikContext } from 'formik';\nimport { Alert, Expandable } from '@patternfly/react-core';\nimport { CheckboxField } from '@console/shared';\nimport { CLUSTER_PIPELINE_NS } from '../../../const';\nimport { PipelineModel } from '../../../models';\nimport PipelineVisualization from '../../pipelines/detail-page-tabs/pipeline-details/PipelineVisualization';\nimport { ReadableResourcesNames } from '../import-types';\nconst MISSING_DOCKERFILE_LABEL_TEXT = 'The pipeline template for Dockerfiles is not available at this time.';\nconst labelType = 'pipeline.openshift.io/type';\nconst labelRuntime = 'pipeline.openshift.io/runtime';\nconst labelDocker = 'pipeline.openshift.io/strategy';\nconst getAlertText = (isDockerStrategy, builderImage, resourceType) => {\n    if (isDockerStrategy)\n        return MISSING_DOCKERFILE_LABEL_TEXT;\n    return `There are no pipeline templates available for ${builderImage} and ${resourceType} combination.`;\n};\nconst PipelineTemplate = ({ builderImages }) => {\n    var _a;\n    const [noTemplateForRuntime, setNoTemplateForRuntime] = React.useState(false);\n    const [isExpanded, setIsExpanded] = React.useState(false);\n    const pipelineStorageRef = React.useRef({});\n    const { values: { pipeline, image, build, resources }, setFieldValue, } = useFormikContext();\n    const isDockerStrategy = build.strategy === 'Docker';\n    React.useEffect(() => {\n        let ignore = false;\n        const builderPipelineLabel = { [labelRuntime]: image.selected };\n        const dockerPipelineLabel = { [labelDocker]: 'docker' };\n        const labelSelector = isDockerStrategy ? dockerPipelineLabel : builderPipelineLabel;\n        const fetchPipelineTemplate = () => __awaiter(void 0, void 0, void 0, function* () {\n            let fetchedPipelines = null;\n            if (!pipelineStorageRef.current[image.selected]) {\n                fetchedPipelines = (yield k8sList(PipelineModel, {\n                    ns: CLUSTER_PIPELINE_NS,\n                    labelSelector,\n                }));\n            }\n            if (ignore)\n                return;\n            if (fetchedPipelines) {\n                pipelineStorageRef.current[image.selected] = fetchedPipelines;\n            }\n            const imagePipelines = pipelineStorageRef.current[image.selected] || [];\n            const resourceSpecificPipeline = imagePipelines.find((pl) => { var _a, _b; return ((_b = (_a = pl.metadata) === null || _a === void 0 ? void 0 : _a.labels) === null || _b === void 0 ? void 0 : _b[labelType]) === resources; });\n            const pipelineTemplate = resourceSpecificPipeline || imagePipelines.find((pl) => { var _a, _b; return !((_b = (_a = pl.metadata) === null || _a === void 0 ? void 0 : _a.labels) === null || _b === void 0 ? void 0 : _b[labelType]); });\n            if (pipelineTemplate) {\n                setFieldValue('pipeline.template', pipelineTemplate);\n                setNoTemplateForRuntime(false);\n            }\n            else {\n                setFieldValue('pipeline.template', null);\n                setNoTemplateForRuntime(true);\n            }\n        });\n        fetchPipelineTemplate();\n        return () => {\n            ignore = true;\n        };\n    }, [resources, image.selected, isDockerStrategy, setFieldValue]);\n    if (noTemplateForRuntime) {\n        const builderImageTitle = ((_a = builderImages === null || builderImages === void 0 ? void 0 : builderImages[image.selected]) === null || _a === void 0 ? void 0 : _a.title) || 'this builder image';\n        const resourceName = ReadableResourcesNames[resources];\n        return (React.createElement(Alert, { isInline: true, variant: \"info\", title: getAlertText(isDockerStrategy, builderImageTitle, resourceName) }));\n    }\n    return pipeline.template ? (React.createElement(React.Fragment, null,\n        React.createElement(CheckboxField, { label: \"Add pipeline\", name: \"pipeline.enabled\" }),\n        React.createElement(Expandable, { toggleText: `${isExpanded ? 'Hide' : 'Show'} pipeline visualization`, isExpanded: isExpanded, onToggle: () => setIsExpanded(!isExpanded) }, isExpanded && React.createElement(PipelineVisualization, { pipeline: pipeline.template })))) : (React.createElement(LoadingInline, null));\n};\nexport default PipelineTemplate;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/pipeline/PipelineTemplate.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/pipeline/PipelineTemplate.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { LoadingInline } from '@console/internal/components/utils';\nimport { k8sList } from '@console/internal/module/k8s';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { Alert, Expandable } from '@patternfly/react-core';\nimport { CheckboxField } from '@console/shared';\nimport { CLUSTER_PIPELINE_NS } from '../../../const';\nimport { PipelineModel } from '../../../models';\nimport PipelineVisualization from '../../pipelines/detail-page-tabs/pipeline-details/PipelineVisualization';\nimport { Pipeline } from '../../../utils/pipeline-augment';\nimport { NormalizedBuilderImages } from '../../../utils/imagestream-utils';\nimport { ReadableResourcesNames } from '../import-types';\n\nconst MISSING_DOCKERFILE_LABEL_TEXT =\n  'The pipeline template for Dockerfiles is not available at this time.';\n\nconst labelType = 'pipeline.openshift.io/type';\nconst labelRuntime = 'pipeline.openshift.io/runtime';\nconst labelDocker = 'pipeline.openshift.io/strategy';\n\nconst getAlertText = (\n  isDockerStrategy: boolean,\n  builderImage: string,\n  resourceType: string,\n): string => {\n  if (isDockerStrategy) return MISSING_DOCKERFILE_LABEL_TEXT;\n\n  return `There are no pipeline templates available for ${builderImage} and ${resourceType} combination.`;\n};\n\ntype PipelineTemplateProps = {\n  builderImages: NormalizedBuilderImages;\n};\n\nconst PipelineTemplate: React.FC<PipelineTemplateProps> = ({ builderImages }) => {\n  const [noTemplateForRuntime, setNoTemplateForRuntime] = React.useState(false);\n  const [isExpanded, setIsExpanded] = React.useState(false);\n  const pipelineStorageRef = React.useRef<{ [image: string]: Pipeline[] }>({});\n\n  const {\n    values: { pipeline, image, build, resources },\n    setFieldValue,\n  } = useFormikContext<FormikValues>();\n\n  const isDockerStrategy = build.strategy === 'Docker';\n\n  React.useEffect(() => {\n    let ignore = false;\n\n    const builderPipelineLabel = { [labelRuntime]: image.selected };\n    const dockerPipelineLabel = { [labelDocker]: 'docker' };\n\n    const labelSelector = isDockerStrategy ? dockerPipelineLabel : builderPipelineLabel;\n\n    const fetchPipelineTemplate = async () => {\n      let fetchedPipelines: Pipeline[] = null;\n      if (!pipelineStorageRef.current[image.selected]) {\n        fetchedPipelines = (await k8sList(PipelineModel, {\n          ns: CLUSTER_PIPELINE_NS,\n          labelSelector,\n        })) as Pipeline[];\n      }\n\n      if (ignore) return;\n\n      if (fetchedPipelines) {\n        pipelineStorageRef.current[image.selected] = fetchedPipelines;\n      }\n\n      const imagePipelines: Pipeline[] = pipelineStorageRef.current[image.selected] || [];\n      const resourceSpecificPipeline = imagePipelines.find(\n        (pl) => pl.metadata?.labels?.[labelType] === resources,\n      );\n      const pipelineTemplate =\n        resourceSpecificPipeline || imagePipelines.find((pl) => !pl.metadata?.labels?.[labelType]);\n\n      if (pipelineTemplate) {\n        setFieldValue('pipeline.template', pipelineTemplate);\n        setNoTemplateForRuntime(false);\n      } else {\n        setFieldValue('pipeline.template', null);\n        setNoTemplateForRuntime(true);\n      }\n    };\n\n    fetchPipelineTemplate();\n\n    return () => {\n      ignore = true;\n    };\n  }, [resources, image.selected, isDockerStrategy, setFieldValue]);\n\n  if (noTemplateForRuntime) {\n    const builderImageTitle = builderImages?.[image.selected]?.title || 'this builder image';\n    const resourceName = ReadableResourcesNames[resources];\n    return (\n      <Alert\n        isInline\n        variant=\"info\"\n        title={getAlertText(isDockerStrategy, builderImageTitle, resourceName)}\n      />\n    );\n  }\n\n  return pipeline.template ? (\n    <>\n      <CheckboxField label=\"Add pipeline\" name=\"pipeline.enabled\" />\n      <Expandable\n        toggleText={`${isExpanded ? 'Hide' : 'Show'} pipeline visualization`}\n        isExpanded={isExpanded}\n        onToggle={() => setIsExpanded(!isExpanded)}\n      >\n        {isExpanded && <PipelineVisualization pipeline={pipeline.template} />}\n      </Expandable>\n    </>\n  ) : (\n    <LoadingInline />\n  );\n};\n\nexport default PipelineTemplate;\n"]}]}