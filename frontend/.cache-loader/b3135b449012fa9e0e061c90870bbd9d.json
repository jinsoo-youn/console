{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/synced-editor/index.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/synced-editor/index.tsx","mtime":1615298458600},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { EditorType, EditorToggle } from './editor-toggle';\nimport { safeJSToYAML, asyncYAMLToJS } from '../../utils/yaml';\nimport { Alert, Button } from '@patternfly/react-core';\nconst YAML_KEY_ORDER = ['apiVerion', 'kind', 'metadata', 'spec', 'status'];\nexport const YAML_TO_JS_OPTIONS = {\n    skipInvalid: true,\n    sortKeys: (a, b) => _.indexOf(YAML_KEY_ORDER, a) - _.indexOf(YAML_KEY_ORDER, b),\n};\n// Provides toggling and syncing between a form and yaml editor. The formData state is the source\n// of truth. Both the form editor and the yaml editor update the formData state. Here's the basic logic of this component:\n// In the form view:\n//   - formData is both rendered and updated by the form component\n//   - on toggle to YAML editor, yaml is parsed from current formData state.\n// In the YAML view:\n//   - on each yaml change, attempt to parse yaml to js:\n//       - If it fails, nothing happens. formData remains unchanged.\n//       - If successful, formData is updated to resulting js\n//   - on toggle to form view, no action needs to be taken to sync because formData has remained up to date with each yaml change\n//\n//  This means that when switching from YAML to Form, you can lose changes if the YAML editor contains unparsable YAML\n//  TODO Add an extra step when switching from yaml to form to warn user if they are about to lose changes.\nexport const SyncedEditor = ({ context = {}, FormEditor, initialType = EditorType.Form, initialData = {}, onChangeEditorType = _.noop, onChange = _.noop, prune, YAMLEditor, }) => {\n    const { formContext, yamlContext } = context;\n    const [formData, setFormData] = React.useState(initialData);\n    const [yaml, setYAML] = React.useState(safeJSToYAML(initialData));\n    const [type, setType] = React.useState(initialType);\n    const [safeToSwitch, setSafeToSwitch] = React.useState(true);\n    const [yamlWarning, setYAMLWarning] = React.useState(false);\n    const handleFormDataChange = (newFormData = {}) => {\n        if (!_.isEqual(newFormData, formData)) {\n            setFormData(newFormData);\n            onChange(newFormData);\n        }\n    };\n    const handleYAMLChange = (newYAML = '') => {\n        asyncYAMLToJS(newYAML)\n            .then((js) => {\n            setSafeToSwitch(true);\n            handleFormDataChange(js);\n        })\n            .catch(() => setSafeToSwitch(false));\n    };\n    const changeEditorType = (newType) => {\n        setType(newType);\n        onChangeEditorType(newType);\n    };\n    const handleToggleToForm = () => {\n        if (safeToSwitch) {\n            changeEditorType(EditorType.Form);\n        }\n        else {\n            setYAMLWarning(true);\n        }\n    };\n    const handleToggleToYAML = () => {\n        var _a;\n        setYAML(safeJSToYAML((_a = prune === null || prune === void 0 ? void 0 : prune(formData)) !== null && _a !== void 0 ? _a : formData, yaml, YAML_TO_JS_OPTIONS));\n        changeEditorType(EditorType.YAML);\n    };\n    const onClickYAMLWarningConfirm = () => {\n        setSafeToSwitch(true);\n        setYAMLWarning(false);\n        changeEditorType(EditorType.Form);\n    };\n    const onClickYAMLWarningCancel = () => {\n        setYAMLWarning(false);\n    };\n    const onChangeType = (newType) => {\n        switch (newType) {\n            case EditorType.YAML:\n                handleToggleToYAML();\n                break;\n            case EditorType.Form:\n                handleToggleToForm();\n                break;\n            default:\n                break;\n        }\n    };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(EditorToggle, { value: type, onChange: onChangeType }),\n        yamlWarning && (React.createElement(Alert, { className: \"co-synced-editor__yaml-warning\", variant: \"danger\", isInline: true, title: \"Invalid YAML cannot be persisted\" },\n            React.createElement(\"p\", null, \"Switching to Form View will delete any invalid YAML.\"),\n            React.createElement(Button, { variant: \"danger\", onClick: onClickYAMLWarningConfirm }, \"Switch and Delete\"),\n            \"\\u00A0\",\n            React.createElement(Button, { variant: \"secondary\", onClick: onClickYAMLWarningCancel }, \"Cancel\"))),\n        type === EditorType.Form ? (React.createElement(FormEditor, Object.assign({ formData: formData, onChange: handleFormDataChange, prune: prune }, formContext))) : (React.createElement(YAMLEditor, Object.assign({ initialYAML: yaml, onChange: handleYAMLChange }, yamlContext)))));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/synced-editor/index.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/synced-editor/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { EditorType, EditorToggle } from './editor-toggle';\nimport { safeJSToYAML, asyncYAMLToJS } from '../../utils/yaml';\nimport { Alert, Button } from '@patternfly/react-core';\n\nconst YAML_KEY_ORDER = ['apiVerion', 'kind', 'metadata', 'spec', 'status'];\nexport const YAML_TO_JS_OPTIONS = {\n  skipInvalid: true,\n  sortKeys: (a, b) => _.indexOf(YAML_KEY_ORDER, a) - _.indexOf(YAML_KEY_ORDER, b),\n};\n\n// Provides toggling and syncing between a form and yaml editor. The formData state is the source\n// of truth. Both the form editor and the yaml editor update the formData state. Here's the basic logic of this component:\n// In the form view:\n//   - formData is both rendered and updated by the form component\n//   - on toggle to YAML editor, yaml is parsed from current formData state.\n// In the YAML view:\n//   - on each yaml change, attempt to parse yaml to js:\n//       - If it fails, nothing happens. formData remains unchanged.\n//       - If successful, formData is updated to resulting js\n//   - on toggle to form view, no action needs to be taken to sync because formData has remained up to date with each yaml change\n//\n//  This means that when switching from YAML to Form, you can lose changes if the YAML editor contains unparsable YAML\n//  TODO Add an extra step when switching from yaml to form to warn user if they are about to lose changes.\nexport const SyncedEditor: React.FC<SyncedEditorProps> = ({\n  context = {},\n  FormEditor,\n  initialType = EditorType.Form,\n  initialData = {},\n  onChangeEditorType = _.noop,\n  onChange = _.noop,\n  prune,\n  YAMLEditor,\n}) => {\n  const { formContext, yamlContext } = context;\n  const [formData, setFormData] = React.useState<K8sResourceKind>(initialData);\n  const [yaml, setYAML] = React.useState(safeJSToYAML(initialData));\n  const [type, setType] = React.useState<EditorType>(initialType);\n  const [safeToSwitch, setSafeToSwitch] = React.useState<boolean>(true);\n  const [yamlWarning, setYAMLWarning] = React.useState<boolean>(false);\n\n  const handleFormDataChange = (newFormData: K8sResourceKind = {}) => {\n    if (!_.isEqual(newFormData, formData)) {\n      setFormData(newFormData);\n      onChange(newFormData);\n    }\n  };\n\n  const handleYAMLChange = (newYAML: string = '') => {\n    asyncYAMLToJS(newYAML)\n      .then((js) => {\n        setSafeToSwitch(true);\n        handleFormDataChange(js);\n      })\n      .catch(() => setSafeToSwitch(false));\n  };\n\n  const changeEditorType = (newType: EditorType): void => {\n    setType(newType);\n    onChangeEditorType(newType);\n  };\n\n  const handleToggleToForm = () => {\n    if (safeToSwitch) {\n      changeEditorType(EditorType.Form);\n    } else {\n      setYAMLWarning(true);\n    }\n  };\n\n  const handleToggleToYAML = () => {\n    setYAML(safeJSToYAML(prune?.(formData) ?? formData, yaml, YAML_TO_JS_OPTIONS));\n    changeEditorType(EditorType.YAML);\n  };\n\n  const onClickYAMLWarningConfirm = () => {\n    setSafeToSwitch(true);\n    setYAMLWarning(false);\n    changeEditorType(EditorType.Form);\n  };\n\n  const onClickYAMLWarningCancel = () => {\n    setYAMLWarning(false);\n  };\n\n  const onChangeType = (newType) => {\n    switch (newType) {\n      case EditorType.YAML:\n        handleToggleToYAML();\n        break;\n      case EditorType.Form:\n        handleToggleToForm();\n        break;\n      default:\n        break;\n    }\n  };\n\n  return (\n    <>\n      <EditorToggle value={type} onChange={onChangeType} />\n      {yamlWarning && (\n        <Alert\n          className=\"co-synced-editor__yaml-warning\"\n          variant=\"danger\"\n          isInline\n          title=\"Invalid YAML cannot be persisted\"\n        >\n          <p>Switching to Form View will delete any invalid YAML.</p>\n          <Button variant=\"danger\" onClick={onClickYAMLWarningConfirm}>\n            Switch and Delete\n          </Button>\n          &nbsp;\n          <Button variant=\"secondary\" onClick={onClickYAMLWarningCancel}>\n            Cancel\n          </Button>\n        </Alert>\n      )}\n      {type === EditorType.Form ? (\n        <FormEditor\n          formData={formData}\n          onChange={handleFormDataChange}\n          prune={prune}\n          {...formContext}\n        />\n      ) : (\n        <YAMLEditor initialYAML={yaml} onChange={handleYAMLChange} {...yamlContext} />\n      )}\n    </>\n  );\n};\n\ntype SyncedEditorProps = {\n  context: {\n    formContext: { [key: string]: any };\n    yamlContext: { [key: string]: any };\n  };\n  FormEditor: React.FC<any>;\n  initialType?: EditorType;\n  initialData?: K8sResourceKind;\n  onChangeEditorType?: (newType: EditorType) => void;\n  onChange?: (data: K8sResourceKind) => void;\n  prune?: (data: any) => any;\n  YAMLEditor: React.FC<any>;\n};\n"]}]}