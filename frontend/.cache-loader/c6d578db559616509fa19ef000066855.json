{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-builder/task-sidebar/TaskSidebarName.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-builder/task-sidebar/TaskSidebarName.tsx","mtime":1615298458620},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { FormGroup, TextInput, TextInputTypes } from '@patternfly/react-core';\nimport { SidebarInputWrapper } from './temp-utils';\nconst VALID_NAME = /^([a-z]([-a-z0-9]*[a-z0-9])?)*$/;\nconst INVALID_ERROR_MESSAGE = 'Name must consist of lower-case letters, numbers and hyphens. It must start with a letter and end with a letter or number.';\nconst getError = (value) => {\n    let error = null;\n    if (value === '') {\n        error = 'Required';\n    }\n    else if (!VALID_NAME.test(value)) {\n        error = INVALID_ERROR_MESSAGE;\n    }\n    return error;\n};\nconst TaskSidebarName = (props) => {\n    const { initialName, onChange, taskName } = props;\n    const [interimName, setInterimName] = React.useState(initialName);\n    const [error, setError] = React.useState(null);\n    const isValid = !error;\n    return (React.createElement(FormGroup, { fieldId: \"task-name\", label: \"Display Name\", helperTextInvalid: error, isValid: isValid, isRequired: true },\n        React.createElement(SidebarInputWrapper, null,\n            React.createElement(TextInput, { id: \"task-name\", isValid: isValid, isRequired: true, onChange: (value) => {\n                    setInterimName(value);\n                    setError(getError(value));\n                }, onBlur: () => {\n                    if (isValid) {\n                        onChange(interimName);\n                    }\n                }, placeholder: taskName, type: TextInputTypes.text, value: interimName }))));\n};\nexport default TaskSidebarName;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-builder/task-sidebar/TaskSidebarName.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-builder/task-sidebar/TaskSidebarName.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,cAAc,EAAE,MAAM,wBAAwB,CAAC;AAC9E,OAAO,EAAE,mBAAmB,EAAE,MAAM,cAAc,CAAC;AAQnD,MAAM,UAAU,GAAG,iCAAiC,CAAC;AACrD,MAAM,qBAAqB,GACzB,4HAA4H,CAAC;AAE/H,MAAM,QAAQ,GAAG,CAAC,KAAa,EAAiB,EAAE;IAChD,IAAI,KAAK,GAAG,IAAI,CAAC;IACjB,IAAI,KAAK,KAAK,EAAE,EAAE;QAChB,KAAK,GAAG,UAAU,CAAC;KACpB;SAAM,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;QAClC,KAAK,GAAG,qBAAqB,CAAC;KAC/B;IACD,OAAO,KAAK,CAAC;AACf,CAAC,CAAC;AAEF,MAAM,eAAe,GAAmC,CAAC,KAAK,EAAE,EAAE;IAChE,MAAM,EAAE,WAAW,EAAE,QAAQ,EAAE,QAAQ,EAAE,GAAG,KAAK,CAAC;IAClD,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;IAClE,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC/C,MAAM,OAAO,GAAG,CAAC,KAAK,CAAC;IAEvB,OAAO,CACL,oBAAC,SAAS,IACR,OAAO,EAAC,WAAW,EACnB,KAAK,EAAC,cAAc,EACpB,iBAAiB,EAAE,KAAK,EACxB,OAAO,EAAE,OAAO,EAChB,UAAU;QAEV,oBAAC,mBAAmB;YAClB,oBAAC,SAAS,IACR,EAAE,EAAC,WAAW,EACd,OAAO,EAAE,OAAO,EAChB,UAAU,QACV,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE;oBAClB,cAAc,CAAC,KAAK,CAAC,CAAC;oBACtB,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;gBAC5B,CAAC,EACD,MAAM,EAAE,GAAG,EAAE;oBACX,IAAI,OAAO,EAAE;wBACX,QAAQ,CAAC,WAAW,CAAC,CAAC;qBACvB;gBACH,CAAC,EACD,WAAW,EAAE,QAAQ,EACrB,IAAI,EAAE,cAAc,CAAC,IAAI,EACzB,KAAK,EAAE,WAAW,GAClB,CACkB,CACZ,CACb,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,eAAe,CAAC","sourcesContent":["import * as React from 'react';\nimport { FormGroup, TextInput, TextInputTypes } from '@patternfly/react-core';\nimport { SidebarInputWrapper } from './temp-utils';\n\ntype TaskSidebarNameProps = {\n  initialName: string;\n  onChange: (newName: string) => void;\n  taskName: string;\n};\n\nconst VALID_NAME = /^([a-z]([-a-z0-9]*[a-z0-9])?)*$/;\nconst INVALID_ERROR_MESSAGE =\n  'Name must consist of lower-case letters, numbers and hyphens. It must start with a letter and end with a letter or number.';\n\nconst getError = (value: string): string | null => {\n  let error = null;\n  if (value === '') {\n    error = 'Required';\n  } else if (!VALID_NAME.test(value)) {\n    error = INVALID_ERROR_MESSAGE;\n  }\n  return error;\n};\n\nconst TaskSidebarName: React.FC<TaskSidebarNameProps> = (props) => {\n  const { initialName, onChange, taskName } = props;\n  const [interimName, setInterimName] = React.useState(initialName);\n  const [error, setError] = React.useState(null);\n  const isValid = !error;\n\n  return (\n    <FormGroup\n      fieldId=\"task-name\"\n      label=\"Display Name\"\n      helperTextInvalid={error}\n      isValid={isValid}\n      isRequired\n    >\n      <SidebarInputWrapper>\n        <TextInput\n          id=\"task-name\"\n          isValid={isValid}\n          isRequired\n          onChange={(value) => {\n            setInterimName(value);\n            setError(getError(value));\n          }}\n          onBlur={() => {\n            if (isValid) {\n              onChange(interimName);\n            }\n          }}\n          placeholder={taskName}\n          type={TextInputTypes.text}\n          value={interimName}\n        />\n      </SidebarInputWrapper>\n    </FormGroup>\n  );\n};\n\nexport default TaskSidebarName;\n"]}]}