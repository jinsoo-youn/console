{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-builder/task-sidebar/TaskSidebar.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-builder/task-sidebar/TaskSidebar.tsx","mtime":1616735742390},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { useField } from 'formik';\nimport { ActionsMenu, ResourceIcon } from '@console/internal/components/utils';\nimport { referenceFor } from '@console/internal/module/k8s';\nimport { getResourceModelFromTaskKind, } from '../../../../utils/pipeline-augment';\nimport { getTaskParameters, getTaskResources } from '../../resource-utils';\nimport { TaskErrorType } from '../const';\nimport TaskSidebarParam from './TaskSidebarParam';\nimport TaskSidebarResource from './TaskSidebarResource';\nimport TaskSidebarName from './TaskSidebarName';\nimport './TaskSidebar.scss';\nconst TaskSidebar = (props) => {\n    const { errorMap, onRemoveTask, onUpdateTask, resourceList, selectedPipelineTaskIndex, taskResource, } = props;\n    const formikTaskReference = `tasks.${selectedPipelineTaskIndex}`;\n    const [taskField] = useField(formikTaskReference);\n    const updateTask = (newData) => {\n        onUpdateTask(Object.assign({ thisPipelineTask: taskField.value, taskResource }, newData));\n    };\n    const thisTaskError = errorMap[taskField.value.name];\n    const params = getTaskParameters(taskResource);\n    const resources = getTaskResources(taskResource);\n    const inputResources = resources.inputs;\n    const outputResources = resources.outputs;\n    const renderResource = (type) => (resource) => {\n        var _a, _b;\n        const taskResources = ((_b = (_a = taskField.value) === null || _a === void 0 ? void 0 : _a.resources) === null || _b === void 0 ? void 0 : _b[type]) || [];\n        const thisResource = taskResources.find((taskFieldResource) => taskFieldResource.name === resource.name);\n        return (React.createElement(\"div\", { key: resource.name, className: \"odc-task-sidebar__resource\" },\n            React.createElement(TaskSidebarResource, { availableResources: resourceList, onChange: (resourceName, selectedResource) => {\n                    updateTask({\n                        resources: {\n                            resourceTarget: type,\n                            selectedPipelineResource: selectedResource,\n                            taskResourceName: resourceName,\n                        },\n                    });\n                }, taskResource: thisResource, resource: resource })));\n    };\n    return (React.createElement(\"div\", { className: \"odc-task-sidebar\" },\n        React.createElement(\"div\", { className: \"odc-task-sidebar__header\" },\n            React.createElement(\"h1\", { className: \"co-m-pane__heading\" },\n                React.createElement(\"div\", { className: \"co-m-pane__name co-resource-item\" },\n                    React.createElement(ResourceIcon, { className: \"co-m-resource-icon--lg\", kind: referenceFor(getResourceModelFromTaskKind(taskResource.kind)) }),\n                    taskResource.metadata.name),\n                React.createElement(\"div\", { className: \"co-actions\" },\n                    React.createElement(ActionsMenu, { actions: [\n                            {\n                                label: 'Remove Task',\n                                callback: () => onRemoveTask(taskField.value.name),\n                            },\n                        ] })))),\n        React.createElement(\"hr\", null),\n        React.createElement(\"div\", { className: \"odc-task-sidebar__content\" },\n            React.createElement(TaskSidebarName, { initialName: taskField.value.name, taskName: taskResource.metadata.name, onChange: (newName) => updateTask({ newName }) }),\n            params && (React.createElement(React.Fragment, null,\n                React.createElement(\"h2\", null, \"Parameters\"),\n                params.map((param) => {\n                    var _a;\n                    const taskParams = ((_a = taskField.value) === null || _a === void 0 ? void 0 : _a.params) || [];\n                    const thisParam = taskParams.find((taskFieldParam) => taskFieldParam.name === param.name);\n                    return (React.createElement(\"div\", { key: param.name, className: \"odc-task-sidebar__param\" },\n                        React.createElement(TaskSidebarParam, { hasParamError: !!(thisTaskError === null || thisTaskError === void 0 ? void 0 : thisTaskError.includes(TaskErrorType.MISSING_REQUIRED_PARAMS)), resourceParam: param, taskParam: thisParam, onChange: (value) => {\n                                updateTask({\n                                    params: {\n                                        newValue: value,\n                                        taskParamName: param.name,\n                                    },\n                                });\n                            } })));\n                }))),\n            inputResources && (React.createElement(React.Fragment, null,\n                React.createElement(\"h2\", null, \"Input Resources\"),\n                inputResources.map(renderResource('inputs')))),\n            outputResources && (React.createElement(React.Fragment, null,\n                React.createElement(\"h2\", null, \"Output Resources\"),\n                outputResources.map(renderResource('outputs')))))));\n};\nexport default TaskSidebar;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-builder/task-sidebar/TaskSidebar.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-builder/task-sidebar/TaskSidebar.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAClC,OAAO,EAAE,WAAW,EAAE,YAAY,EAAE,MAAM,oCAAoC,CAAC;AAC/E,OAAO,EAAE,YAAY,EAAE,MAAM,8BAA8B,CAAC;AAC5D,OAAO,EACL,4BAA4B,GAO7B,MAAM,oCAAoC,CAAC;AAC5C,OAAO,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,MAAM,sBAAsB,CAAC;AAE3E,OAAO,EAAE,aAAa,EAAE,MAAM,UAAU,CAAC;AACzC,OAAO,gBAAgB,MAAM,oBAAoB,CAAC;AAClD,OAAO,mBAAmB,MAAM,uBAAuB,CAAC;AACxD,OAAO,eAAe,MAAM,mBAAmB,CAAC;AAEhD,OAAO,oBAAoB,CAAC;AAW5B,MAAM,WAAW,GAA+B,CAAC,KAAK,EAAE,EAAE;IACxD,MAAM,EACJ,QAAQ,EACR,YAAY,EACZ,YAAY,EACZ,YAAY,EACZ,yBAAyB,EACzB,YAAY,GACb,GAAG,KAAK,CAAC;IACV,MAAM,mBAAmB,GAAG,SAAS,yBAAyB,EAAE,CAAC;IACjE,MAAM,CAAC,SAAS,CAAC,GAAG,QAAQ,CAAe,mBAAmB,CAAC,CAAC;IAEhE,MAAM,UAAU,GAAG,CAAC,OAA+C,EAAE,EAAE;QACrE,YAAY,iBAAG,gBAAgB,EAAE,SAAS,CAAC,KAAK,EAAE,YAAY,IAAK,OAAO,EAAG,CAAC;IAChF,CAAC,CAAC;IAEF,MAAM,aAAa,GAAG,QAAQ,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAErD,MAAM,MAAM,GAAG,iBAAiB,CAAC,YAAY,CAAC,CAAC;IAC/C,MAAM,SAAS,GAAG,gBAAgB,CAAC,YAAY,CAAC,CAAC;IACjD,MAAM,cAAc,GAAG,SAAS,CAAC,MAAM,CAAC;IACxC,MAAM,eAAe,GAAG,SAAS,CAAC,OAAO,CAAC;IAE1C,MAAM,cAAc,GAAG,CAAC,IAAoB,EAAE,EAAE,CAAC,CAAC,QAAsC,EAAE,EAAE;;QAC1F,MAAM,aAAa,GAA2B,aAAA,SAAS,CAAC,KAAK,0CAAE,SAAS,0CAAG,IAAI,MAAK,EAAE,CAAC;QACvF,MAAM,YAAY,GAAG,aAAa,CAAC,IAAI,CACrC,CAAC,iBAAiB,EAAE,EAAE,CAAC,iBAAiB,CAAC,IAAI,KAAK,QAAQ,CAAC,IAAI,CAChE,CAAC;QAEF,OAAO,CACL,6BAAK,GAAG,EAAE,QAAQ,CAAC,IAAI,EAAE,SAAS,EAAC,4BAA4B;YAC7D,oBAAC,mBAAmB,IAClB,kBAAkB,EAAE,YAAY,EAChC,QAAQ,EAAE,CAAC,YAAY,EAAE,gBAAgB,EAAE,EAAE;oBAC3C,UAAU,CAAC;wBACT,SAAS,EAAE;4BACT,cAAc,EAAE,IAAI;4BACpB,wBAAwB,EAAE,gBAAgB;4BAC1C,gBAAgB,EAAE,YAAY;yBAC/B;qBACF,CAAC,CAAC;gBACL,CAAC,EACD,YAAY,EAAE,YAAY,EAC1B,QAAQ,EAAE,QAAQ,GAClB,CACE,CACP,CAAC;IACJ,CAAC,CAAC;IAEF,OAAO,CACL,6BAAK,SAAS,EAAC,kBAAkB;QAC/B,6BAAK,SAAS,EAAC,0BAA0B;YACvC,4BAAI,SAAS,EAAC,oBAAoB;gBAChC,6BAAK,SAAS,EAAC,kCAAkC;oBAC/C,oBAAC,YAAY,IACX,SAAS,EAAC,wBAAwB,EAClC,IAAI,EAAE,YAAY,CAAC,4BAA4B,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,GACnE;oBACD,YAAY,CAAC,QAAQ,CAAC,IAAI,CACvB;gBACN,6BAAK,SAAS,EAAC,YAAY;oBACzB,oBAAC,WAAW,IACV,OAAO,EAAE;4BACP;gCACE,KAAK,EAAE,aAAa;gCACpB,QAAQ,EAAE,GAAG,EAAE,CAAC,YAAY,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC;6BACnD;yBACF,GACD,CACE,CACH,CACD;QACN,+BAAM;QAEN,6BAAK,SAAS,EAAC,2BAA2B;YACxC,oBAAC,eAAe,IACd,WAAW,EAAE,SAAS,CAAC,KAAK,CAAC,IAAI,EACjC,QAAQ,EAAE,YAAY,CAAC,QAAQ,CAAC,IAAI,EACpC,QAAQ,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,UAAU,CAAC,EAAE,OAAO,EAAE,CAAC,GAC9C;YAED,MAAM,IAAI,CACT;gBACE,6CAAmB;gBAClB,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;;oBACpB,MAAM,UAAU,GAAwB,OAAA,SAAS,CAAC,KAAK,0CAAE,MAAM,KAAI,EAAE,CAAC;oBACtE,MAAM,SAAS,GAAG,UAAU,CAAC,IAAI,CAC/B,CAAC,cAAc,EAAE,EAAE,CAAC,cAAc,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,CACvD,CAAC;oBACF,OAAO,CACL,6BAAK,GAAG,EAAE,KAAK,CAAC,IAAI,EAAE,SAAS,EAAC,yBAAyB;wBACvD,oBAAC,gBAAgB,IACf,aAAa,EAAE,CAAC,EAAC,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,QAAQ,CAAC,aAAa,CAAC,uBAAuB,EAAC,EAC/E,aAAa,EAAE,KAAK,EACpB,SAAS,EAAE,SAAS,EACpB,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE;gCAClB,UAAU,CAAC;oCACT,MAAM,EAAE;wCACN,QAAQ,EAAE,KAAK;wCACf,aAAa,EAAE,KAAK,CAAC,IAAI;qCAC1B;iCACF,CAAC,CAAC;4BACL,CAAC,GACD,CACE,CACP,CAAC;gBACJ,CAAC,CAAC,CACD,CACJ;YAEA,cAAc,IAAI,CACjB;gBACE,kDAAwB;gBACvB,cAAc,CAAC,GAAG,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAC5C,CACJ;YACA,eAAe,IAAI,CAClB;gBACE,mDAAyB;gBACxB,eAAe,CAAC,GAAG,CAAC,cAAc,CAAC,SAAS,CAAC,CAAC,CAC9C,CACJ,CACG,CACF,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,WAAW,CAAC","sourcesContent":["import * as React from 'react';\nimport { useField } from 'formik';\nimport { ActionsMenu, ResourceIcon } from '@console/internal/components/utils';\nimport { referenceFor } from '@console/internal/module/k8s';\nimport {\n  getResourceModelFromTaskKind,\n  PipelineResource,\n  PipelineResourceTask,\n  PipelineResourceTaskResource,\n  PipelineTask,\n  PipelineTaskParam,\n  PipelineTaskResource,\n} from '../../../../utils/pipeline-augment';\nimport { getTaskParameters, getTaskResources } from '../../resource-utils';\nimport { ResourceTarget, TaskErrorMap, UpdateOperationUpdateTaskData } from '../types';\nimport { TaskErrorType } from '../const';\nimport TaskSidebarParam from './TaskSidebarParam';\nimport TaskSidebarResource from './TaskSidebarResource';\nimport TaskSidebarName from './TaskSidebarName';\n\nimport './TaskSidebar.scss';\n\ntype TaskSidebarProps = {\n  errorMap: TaskErrorMap;\n  onRemoveTask: (taskName: string) => void;\n  onUpdateTask: (data: UpdateOperationUpdateTaskData) => void;\n  resourceList: PipelineResource[];\n  selectedPipelineTaskIndex: number;\n  taskResource: PipelineResourceTask;\n};\n\nconst TaskSidebar: React.FC<TaskSidebarProps> = (props) => {\n  const {\n    errorMap,\n    onRemoveTask,\n    onUpdateTask,\n    resourceList,\n    selectedPipelineTaskIndex,\n    taskResource,\n  } = props;\n  const formikTaskReference = `tasks.${selectedPipelineTaskIndex}`;\n  const [taskField] = useField<PipelineTask>(formikTaskReference);\n\n  const updateTask = (newData: Partial<UpdateOperationUpdateTaskData>) => {\n    onUpdateTask({ thisPipelineTask: taskField.value, taskResource, ...newData });\n  };\n\n  const thisTaskError = errorMap[taskField.value.name];\n\n  const params = getTaskParameters(taskResource);\n  const resources = getTaskResources(taskResource);\n  const inputResources = resources.inputs;\n  const outputResources = resources.outputs;\n\n  const renderResource = (type: ResourceTarget) => (resource: PipelineResourceTaskResource) => {\n    const taskResources: PipelineTaskResource[] = taskField.value?.resources?.[type] || [];\n    const thisResource = taskResources.find(\n      (taskFieldResource) => taskFieldResource.name === resource.name,\n    );\n\n    return (\n      <div key={resource.name} className=\"odc-task-sidebar__resource\">\n        <TaskSidebarResource\n          availableResources={resourceList}\n          onChange={(resourceName, selectedResource) => {\n            updateTask({\n              resources: {\n                resourceTarget: type,\n                selectedPipelineResource: selectedResource,\n                taskResourceName: resourceName,\n              },\n            });\n          }}\n          taskResource={thisResource}\n          resource={resource}\n        />\n      </div>\n    );\n  };\n\n  return (\n    <div className=\"odc-task-sidebar\">\n      <div className=\"odc-task-sidebar__header\">\n        <h1 className=\"co-m-pane__heading\">\n          <div className=\"co-m-pane__name co-resource-item\">\n            <ResourceIcon\n              className=\"co-m-resource-icon--lg\"\n              kind={referenceFor(getResourceModelFromTaskKind(taskResource.kind))}\n            />\n            {taskResource.metadata.name}\n          </div>\n          <div className=\"co-actions\">\n            <ActionsMenu\n              actions={[\n                {\n                  label: 'Remove Task',\n                  callback: () => onRemoveTask(taskField.value.name),\n                },\n              ]}\n            />\n          </div>\n        </h1>\n      </div>\n      <hr />\n\n      <div className=\"odc-task-sidebar__content\">\n        <TaskSidebarName\n          initialName={taskField.value.name}\n          taskName={taskResource.metadata.name}\n          onChange={(newName) => updateTask({ newName })}\n        />\n\n        {params && (\n          <>\n            <h2>Parameters</h2>\n            {params.map((param) => {\n              const taskParams: PipelineTaskParam[] = taskField.value?.params || [];\n              const thisParam = taskParams.find(\n                (taskFieldParam) => taskFieldParam.name === param.name,\n              );\n              return (\n                <div key={param.name} className=\"odc-task-sidebar__param\">\n                  <TaskSidebarParam\n                    hasParamError={!!thisTaskError?.includes(TaskErrorType.MISSING_REQUIRED_PARAMS)}\n                    resourceParam={param}\n                    taskParam={thisParam}\n                    onChange={(value) => {\n                      updateTask({\n                        params: {\n                          newValue: value,\n                          taskParamName: param.name,\n                        },\n                      });\n                    }}\n                  />\n                </div>\n              );\n            })}\n          </>\n        )}\n\n        {inputResources && (\n          <>\n            <h2>Input Resources</h2>\n            {inputResources.map(renderResource('inputs'))}\n          </>\n        )}\n        {outputResources && (\n          <>\n            <h2>Output Resources</h2>\n            {outputResources.map(renderResource('outputs'))}\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default TaskSidebar;\n"]}]}