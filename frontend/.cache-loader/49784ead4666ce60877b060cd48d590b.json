{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/dashboard/inventory-card/utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/dashboard/inventory-card/utils.ts","mtime":1616735742370},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { podPhaseFilterReducer } from '@console/internal/module/k8s';\nimport { nodeStatus } from '@console/app/src/status/node';\nimport { InventoryStatusGroup } from './status-group';\nconst POD_PHASE_GROUP_MAPPING = {\n    [InventoryStatusGroup.NOT_MAPPED]: ['Running', 'Succeeded'],\n    [InventoryStatusGroup.ERROR]: ['CrashLoopBackOff', 'Failed'],\n    [InventoryStatusGroup.PROGRESS]: ['Terminating', 'Pending'],\n    [InventoryStatusGroup.WARN]: ['Unknown'],\n};\nconst PVC_STATUS_GROUP_MAPPING = {\n    [InventoryStatusGroup.NOT_MAPPED]: ['Bound'],\n    [InventoryStatusGroup.ERROR]: ['Lost'],\n    [InventoryStatusGroup.PROGRESS]: ['Pending'],\n};\nconst PV_STATUS_GROUP_MAPPING = {\n    [InventoryStatusGroup.NOT_MAPPED]: ['Available', 'Bound'],\n    [InventoryStatusGroup.PROGRESS]: ['Released'],\n    [InventoryStatusGroup.ERROR]: ['Failed'],\n};\nconst NODE_STATUS_GROUP_MAPPING = {\n    [InventoryStatusGroup.NOT_MAPPED]: ['Ready'],\n    [InventoryStatusGroup.PROGRESS]: ['Not Ready'],\n};\nexport const getStatusGroups = (resources, mapping, mapper, filterType) => {\n    const groups = {\n        [InventoryStatusGroup.UNKNOWN]: {\n            statusIDs: [],\n            count: 0,\n        },\n    };\n    Object.keys(mapping).forEach((key) => {\n        groups[key] = {\n            statusIDs: [...mapping[key]],\n            count: 0,\n            filterType,\n        };\n    });\n    resources.forEach((resource) => {\n        const status = mapper(resource);\n        const group = Object.keys(mapping).find((key) => mapping[key].includes(status)) ||\n            InventoryStatusGroup.UNKNOWN;\n        groups[group].count++;\n    });\n    return groups;\n};\nexport const getPodStatusGroups = (resources) => getStatusGroups(resources, POD_PHASE_GROUP_MAPPING, podPhaseFilterReducer, 'pod-status');\nexport const getNodeStatusGroups = (resources) => getStatusGroups(resources, NODE_STATUS_GROUP_MAPPING, nodeStatus, 'node-status');\nexport const getPVCStatusGroups = (resources) => getStatusGroups(resources, PVC_STATUS_GROUP_MAPPING, (pvc) => pvc.status.phase, 'pvc-status');\nexport const getPVStatusGroups = (resources) => getStatusGroups(resources, PV_STATUS_GROUP_MAPPING, (pv) => pv.status.phase, 'pv-status');\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/dashboard/inventory-card/utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/dashboard/inventory-card/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { podPhaseFilterReducer } from '@console/internal/module/k8s';\nimport { nodeStatus } from '@console/app/src/status/node';\nimport { StatusGroupMapper } from './InventoryItem';\nimport { InventoryStatusGroup } from './status-group';\n\nconst POD_PHASE_GROUP_MAPPING = {\n  [InventoryStatusGroup.NOT_MAPPED]: ['Running', 'Succeeded'],\n  [InventoryStatusGroup.ERROR]: ['CrashLoopBackOff', 'Failed'],\n  [InventoryStatusGroup.PROGRESS]: ['Terminating', 'Pending'],\n  [InventoryStatusGroup.WARN]: ['Unknown'],\n};\n\nconst PVC_STATUS_GROUP_MAPPING = {\n  [InventoryStatusGroup.NOT_MAPPED]: ['Bound'],\n  [InventoryStatusGroup.ERROR]: ['Lost'],\n  [InventoryStatusGroup.PROGRESS]: ['Pending'],\n};\n\nconst PV_STATUS_GROUP_MAPPING = {\n  [InventoryStatusGroup.NOT_MAPPED]: ['Available', 'Bound'],\n  [InventoryStatusGroup.PROGRESS]: ['Released'],\n  [InventoryStatusGroup.ERROR]: ['Failed'],\n};\n\nconst NODE_STATUS_GROUP_MAPPING = {\n  [InventoryStatusGroup.NOT_MAPPED]: ['Ready'],\n  [InventoryStatusGroup.PROGRESS]: ['Not Ready'],\n};\n\nexport const getStatusGroups = (resources, mapping, mapper, filterType) => {\n  const groups = {\n    [InventoryStatusGroup.UNKNOWN]: {\n      statusIDs: [],\n      count: 0,\n    },\n  };\n  Object.keys(mapping).forEach((key) => {\n    groups[key] = {\n      statusIDs: [...mapping[key]],\n      count: 0,\n      filterType,\n    };\n  });\n\n  resources.forEach((resource) => {\n    const status = mapper(resource);\n    const group =\n      Object.keys(mapping).find((key) => mapping[key].includes(status)) ||\n      InventoryStatusGroup.UNKNOWN;\n    groups[group].count++;\n  });\n\n  return groups;\n};\n\nexport const getPodStatusGroups: StatusGroupMapper = (resources) =>\n  getStatusGroups(resources, POD_PHASE_GROUP_MAPPING, podPhaseFilterReducer, 'pod-status');\nexport const getNodeStatusGroups: StatusGroupMapper = (resources) =>\n  getStatusGroups(resources, NODE_STATUS_GROUP_MAPPING, nodeStatus, 'node-status');\nexport const getPVCStatusGroups: StatusGroupMapper = (resources) =>\n  getStatusGroups(resources, PVC_STATUS_GROUP_MAPPING, (pvc) => pvc.status.phase, 'pvc-status');\nexport const getPVStatusGroups: StatusGroupMapper = (resources) =>\n  getStatusGroups(resources, PV_STATUS_GROUP_MAPPING, (pv) => pv.status.phase, 'pv-status');\n"]}]}