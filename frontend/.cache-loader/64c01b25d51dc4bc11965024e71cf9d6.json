{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/actions/edgeActions.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/actions/edgeActions.ts","mtime":1615298458630},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { modelFor, referenceFor } from '@console/internal/module/k8s';\nimport { asAccessReview } from '@console/internal/components/utils';\nimport { TYPE_EVENT_SOURCE, TYPE_EVENT_SOURCE_LINK, TYPE_KNATIVE_REVISION, TYPE_KNATIVE_SERVICE, TYPE_REVISION_TRAFFIC, } from '@console/knative-plugin/src/topology/const';\nimport { getTopologyResourceObject } from '../topology-utils';\nimport { removeConnection } from '../components/removeConnection';\nimport { TYPE_CONNECTS_TO, TYPE_SERVICE_BINDING, TYPE_TRAFFIC_CONNECTOR, } from '../components/const';\nimport { moveConnectionModal } from '../components/MoveConnectionModal';\nconst moveConnection = (edge, availableTargets) => {\n    const resourceObj = getTopologyResourceObject(edge.getSource().getData());\n    const resourceModel = modelFor(referenceFor(resourceObj));\n    return {\n        label: 'Move Connector',\n        callback: () => {\n            moveConnectionModal({ edge, availableTargets });\n        },\n        isDisabled: availableTargets.length <= 1,\n        accessReview: asAccessReview(resourceModel, resourceObj, 'delete'),\n    };\n};\nconst deleteConnection = (edge) => {\n    const resourceObj = getTopologyResourceObject(edge.getSource().getData());\n    const resourceModel = modelFor(referenceFor(resourceObj));\n    return {\n        label: 'Delete Connector',\n        callback: () => {\n            removeConnection(edge);\n        },\n        accessReview: asAccessReview(resourceModel, resourceObj, 'delete'),\n    };\n};\nexport const edgeActions = (edge, nodes) => {\n    const actions = [];\n    const currentTargets = edge\n        .getSource()\n        .getSourceEdges()\n        .map((e) => e.getTarget().getId());\n    const availableTargets = nodes\n        .filter((n) => {\n        if (n.getId() === edge.getSource().getId()) {\n            return false;\n        }\n        if (n.getId() !== edge.getTarget().getId() && currentTargets.includes(n.getId())) {\n            return false;\n        }\n        if (n.getType() === TYPE_EVENT_SOURCE) {\n            return false;\n        }\n        switch (edge.getType()) {\n            case TYPE_CONNECTS_TO:\n                return n.getType() !== TYPE_KNATIVE_REVISION && n.getType() !== TYPE_KNATIVE_SERVICE;\n            case TYPE_SERVICE_BINDING:\n                return false;\n            case TYPE_EVENT_SOURCE_LINK:\n                return n.getType() === TYPE_KNATIVE_SERVICE;\n            case TYPE_REVISION_TRAFFIC:\n                return false;\n            case TYPE_TRAFFIC_CONNECTOR:\n                return false;\n            default:\n                return true;\n        }\n    })\n        .sort((n1, n2) => n1.getLabel().localeCompare(n2.getLabel()));\n    actions.push(moveConnection(edge, availableTargets));\n    switch (edge.getType()) {\n        case TYPE_CONNECTS_TO:\n        case TYPE_SERVICE_BINDING:\n            actions.push(deleteConnection(edge));\n            break;\n        default:\n            break;\n    }\n    return actions;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/actions/edgeActions.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/actions/edgeActions.ts"],"names":[],"mappings":"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","sourcesContent":["import { KebabOption } from '@console/internal/components/utils/kebab';\nimport { modelFor, referenceFor } from '@console/internal/module/k8s';\nimport { asAccessReview } from '@console/internal/components/utils';\nimport { Edge, Node } from '@console/topology';\nimport {\n  TYPE_EVENT_SOURCE,\n  TYPE_EVENT_SOURCE_LINK,\n  TYPE_KNATIVE_REVISION,\n  TYPE_KNATIVE_SERVICE,\n  TYPE_REVISION_TRAFFIC,\n} from '@console/knative-plugin/src/topology/const';\nimport { getTopologyResourceObject } from '../topology-utils';\nimport { removeConnection } from '../components/removeConnection';\nimport {\n  TYPE_CONNECTS_TO,\n  TYPE_SERVICE_BINDING,\n  TYPE_TRAFFIC_CONNECTOR,\n} from '../components/const';\nimport { moveConnectionModal } from '../components/MoveConnectionModal';\n\nconst moveConnection = (edge: Edge, availableTargets: Node[]) => {\n  const resourceObj = getTopologyResourceObject(edge.getSource().getData());\n  const resourceModel = modelFor(referenceFor(resourceObj));\n\n  return {\n    label: 'Move Connector',\n    callback: () => {\n      moveConnectionModal({ edge, availableTargets });\n    },\n    isDisabled: availableTargets.length <= 1,\n    accessReview: asAccessReview(resourceModel, resourceObj, 'delete'),\n  };\n};\n\nconst deleteConnection = (edge: Edge) => {\n  const resourceObj = getTopologyResourceObject(edge.getSource().getData());\n  const resourceModel = modelFor(referenceFor(resourceObj));\n  return {\n    label: 'Delete Connector',\n    callback: () => {\n      removeConnection(edge);\n    },\n    accessReview: asAccessReview(resourceModel, resourceObj, 'delete'),\n  };\n};\n\nexport const edgeActions = (edge: Edge, nodes: Node[]): KebabOption[] => {\n  const actions: KebabOption[] = [];\n  const currentTargets = edge\n    .getSource()\n    .getSourceEdges()\n    .map((e) => e.getTarget().getId());\n\n  const availableTargets = nodes\n    .filter((n) => {\n      if (n.getId() === edge.getSource().getId()) {\n        return false;\n      }\n      if (n.getId() !== edge.getTarget().getId() && currentTargets.includes(n.getId())) {\n        return false;\n      }\n      if (n.getType() === TYPE_EVENT_SOURCE) {\n        return false;\n      }\n      switch (edge.getType()) {\n        case TYPE_CONNECTS_TO:\n          return n.getType() !== TYPE_KNATIVE_REVISION && n.getType() !== TYPE_KNATIVE_SERVICE;\n        case TYPE_SERVICE_BINDING:\n          return false;\n        case TYPE_EVENT_SOURCE_LINK:\n          return n.getType() === TYPE_KNATIVE_SERVICE;\n        case TYPE_REVISION_TRAFFIC:\n          return false;\n        case TYPE_TRAFFIC_CONNECTOR:\n          return false;\n        default:\n          return true;\n      }\n    })\n    .sort((n1, n2) => n1.getLabel().localeCompare(n2.getLabel()));\n\n  actions.push(moveConnection(edge, availableTargets));\n\n  switch (edge.getType()) {\n    case TYPE_CONNECTS_TO:\n    case TYPE_SERVICE_BINDING:\n      actions.push(deleteConnection(edge));\n      break;\n    default:\n      break;\n  }\n\n  return actions;\n};\n"]}]}