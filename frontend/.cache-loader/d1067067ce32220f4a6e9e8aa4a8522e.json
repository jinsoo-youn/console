{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/modals/cluster-channel-modal.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/modals/cluster-channel-modal.tsx","mtime":1615298458740},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { ClusterVersionModel } from '../../models';\nimport { Dropdown, PromiseComponent } from '../utils';\nimport { createModalLauncher, ModalBody, ModalSubmitFooter, ModalTitle, } from '../factory/modal';\nimport { getAvailableClusterChannels, k8sPatch } from '../../module/k8s';\nclass ClusterChannelModal extends PromiseComponent {\n    constructor(props) {\n        super(props);\n        this.props = props;\n        this._submit = (e) => {\n            e.preventDefault();\n            const { cv } = this.props;\n            const { selectedChannel } = this.state;\n            const patch = [{ op: 'add', path: '/spec/channel', value: selectedChannel }];\n            this.handlePromise(k8sPatch(ClusterVersionModel, cv, patch)).then(this.props.close);\n        };\n        this._cancel = () => {\n            this.props.close();\n        };\n        this._change = (selectedChannel) => {\n            this.setState({ selectedChannel });\n        };\n        this.state.selectedChannel = _.get(props.cv, 'spec.channel');\n    }\n    render() {\n        const { cv } = this.props;\n        const availableChannels = getAvailableClusterChannels();\n        return (React.createElement(\"form\", { onSubmit: this._submit, name: \"form\", className: \"modal-content modal-content--no-inner-scroll\" },\n            React.createElement(ModalTitle, null, \"Update Channel\"),\n            React.createElement(ModalBody, null,\n                React.createElement(\"p\", null, \"Select a channel that reflects your desired version. Critical security updates will be delivered to any vulnerable channels.\"),\n                React.createElement(\"div\", { className: \"form-group\" },\n                    React.createElement(\"label\", { htmlFor: \"channel_dropdown\" }, \"Select Channel\"),\n                    React.createElement(Dropdown, { className: \"cluster-channel-modal__dropdown\", id: \"channel_dropdown\", items: availableChannels, onChange: this._change, selectedKey: cv.spec.channel, title: \"Select Channel\" }))),\n            React.createElement(ModalSubmitFooter, { errorMessage: this.state.errorMessage, inProgress: this.state.inProgress, submitText: \"Save\", cancel: this._cancel })));\n    }\n}\nexport const clusterChannelModal = createModalLauncher(ClusterChannelModal);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/modals/cluster-channel-modal.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/modals/cluster-channel-modal.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,CAAC,MAAM,WAAW,CAAC;AAE/B,OAAO,EAAE,mBAAmB,EAAE,MAAM,cAAc,CAAC;AACnD,OAAO,EAAE,QAAQ,EAAE,gBAAgB,EAAE,MAAM,UAAU,CAAC;AACtD,OAAO,EACL,mBAAmB,EACnB,SAAS,EAET,iBAAiB,EACjB,UAAU,GACX,MAAM,kBAAkB,CAAC;AAC1B,OAAO,EAAE,2BAA2B,EAAE,QAAQ,EAAmB,MAAM,kBAAkB,CAAC;AAE1F,MAAM,mBAAoB,SAAQ,gBAGjC;IAGC,YAAmB,KAA+B;QAChD,KAAK,CAAC,KAAK,CAAC,CAAC;QADI,UAAK,GAAL,KAAK,CAA0B;QAKlD,YAAO,GAAG,CAAC,CAAC,EAAE,EAAE;YACd,CAAC,CAAC,cAAc,EAAE,CAAC;YACnB,MAAM,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;YAC1B,MAAM,EAAE,eAAe,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;YACvC,MAAM,KAAK,GAAG,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,eAAe,EAAE,KAAK,EAAE,eAAe,EAAE,CAAC,CAAC;YAC7E,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,mBAAmB,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;QACtF,CAAC,CAAC;QAEF,YAAO,GAAG,GAAG,EAAE;YACb,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;QACrB,CAAC,CAAC;QAEF,YAAO,GAAG,CAAC,eAAe,EAAE,EAAE;YAC5B,IAAI,CAAC,QAAQ,CAAC,EAAE,eAAe,EAAE,CAAC,CAAC;QACrC,CAAC,CAAC;QAjBA,IAAI,CAAC,KAAK,CAAC,eAAe,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,EAAE,cAAc,CAAC,CAAC;IAC/D,CAAC;IAkBD,MAAM;QACJ,MAAM,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAC1B,MAAM,iBAAiB,GAAG,2BAA2B,EAAE,CAAC;QACxD,OAAO,CACL,8BACE,QAAQ,EAAE,IAAI,CAAC,OAAO,EACtB,IAAI,EAAC,MAAM,EACX,SAAS,EAAC,8CAA8C;YAExD,oBAAC,UAAU,yBAA4B;YACvC,oBAAC,SAAS;gBACR,8JAGI;gBACJ,6BAAK,SAAS,EAAC,YAAY;oBACzB,+BAAO,OAAO,EAAC,kBAAkB,qBAAuB;oBACxD,oBAAC,QAAQ,IACP,SAAS,EAAC,iCAAiC,EAC3C,EAAE,EAAC,kBAAkB,EACrB,KAAK,EAAE,iBAAiB,EACxB,QAAQ,EAAE,IAAI,CAAC,OAAO,EACtB,WAAW,EAAE,EAAE,CAAC,IAAI,CAAC,OAAO,EAC5B,KAAK,EAAC,gBAAgB,GACtB,CACE,CACI;YACZ,oBAAC,iBAAiB,IAChB,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY,EACrC,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,EACjC,UAAU,EAAC,MAAM,EACjB,MAAM,EAAE,IAAI,CAAC,OAAO,GACpB,CACG,CACR,CAAC;IACJ,CAAC;CACF;AAED,MAAM,CAAC,MAAM,mBAAmB,GAAG,mBAAmB,CAAC,mBAAmB,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\n\nimport { ClusterVersionModel } from '../../models';\nimport { Dropdown, PromiseComponent } from '../utils';\nimport {\n  createModalLauncher,\n  ModalBody,\n  ModalComponentProps,\n  ModalSubmitFooter,\n  ModalTitle,\n} from '../factory/modal';\nimport { getAvailableClusterChannels, k8sPatch, K8sResourceKind } from '../../module/k8s';\n\nclass ClusterChannelModal extends PromiseComponent<\n  ClusterChannelModalProps,\n  ClusterChannelModalState\n> {\n  readonly state: ClusterChannelModalState;\n\n  constructor(public props: ClusterChannelModalProps) {\n    super(props);\n    this.state.selectedChannel = _.get(props.cv, 'spec.channel');\n  }\n\n  _submit = (e) => {\n    e.preventDefault();\n    const { cv } = this.props;\n    const { selectedChannel } = this.state;\n    const patch = [{ op: 'add', path: '/spec/channel', value: selectedChannel }];\n    this.handlePromise(k8sPatch(ClusterVersionModel, cv, patch)).then(this.props.close);\n  };\n\n  _cancel = () => {\n    this.props.close();\n  };\n\n  _change = (selectedChannel) => {\n    this.setState({ selectedChannel });\n  };\n\n  render() {\n    const { cv } = this.props;\n    const availableChannels = getAvailableClusterChannels();\n    return (\n      <form\n        onSubmit={this._submit}\n        name=\"form\"\n        className=\"modal-content modal-content--no-inner-scroll\"\n      >\n        <ModalTitle>Update Channel</ModalTitle>\n        <ModalBody>\n          <p>\n            Select a channel that reflects your desired version. Critical security updates will be\n            delivered to any vulnerable channels.\n          </p>\n          <div className=\"form-group\">\n            <label htmlFor=\"channel_dropdown\">Select Channel</label>\n            <Dropdown\n              className=\"cluster-channel-modal__dropdown\"\n              id=\"channel_dropdown\"\n              items={availableChannels}\n              onChange={this._change}\n              selectedKey={cv.spec.channel}\n              title=\"Select Channel\"\n            />\n          </div>\n        </ModalBody>\n        <ModalSubmitFooter\n          errorMessage={this.state.errorMessage}\n          inProgress={this.state.inProgress}\n          submitText=\"Save\"\n          cancel={this._cancel}\n        />\n      </form>\n    );\n  }\n}\n\nexport const clusterChannelModal = createModalLauncher(ClusterChannelModal);\n\ntype ClusterChannelModalProps = {\n  cv: K8sResourceKind;\n} & ModalComponentProps;\n\ntype ClusterChannelModalState = {\n  selectedChannel: string;\n  inProgress: boolean;\n  errorMessage: string;\n};\n"]}]}