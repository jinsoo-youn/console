{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/nav/cluster-dropdown.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/nav/cluster-dropdown.tsx","mtime":1615298458730},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Dropdown, DropdownItem, DropdownToggle, Title } from '@patternfly/react-core';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport { LoadingInline } from '@console/internal/components/utils';\nimport { featureReducerName } from '../../../reducers/features';\nimport { getActiveCluster } from '../../../reducers/ui';\nimport * as UIActions from '../../../actions/ui';\nimport { coFetchJSON } from '../../../co-fetch';\nimport { getId, getUserGroup } from '../../../hypercloud/auth';\nconst ClusterDropdown_ = ({ setActiveCluster, onClusterSelected, activeCluster, }) => {\n    const [isClusterDropdownOpen, setClusterDropdownOpen] = React.useState(false);\n    const [clusters, setClusters] = React.useState([]);\n    const toggleClusterOpen = React.useCallback(() => {\n        setClusterDropdownOpen(!isClusterDropdownOpen);\n    }, [isClusterDropdownOpen]);\n    const onClusterSelect = React.useCallback((event, cluster) => {\n        event.preventDefault();\n        if (cluster.name !== activeCluster) {\n            setActiveCluster(cluster.name);\n            window.location.reload();\n            // TODO: rerendering 고도화...\n        }\n        setClusterDropdownOpen(false);\n        onClusterSelected && onClusterSelected();\n    }, [activeCluster, onClusterSelected, setActiveCluster]);\n    const renderClusterToggle = React.useCallback((name) => {\n        var _a, _b;\n        return name ? (React.createElement(DropdownToggle, { isOpen: isClusterDropdownOpen, onToggle: toggleClusterOpen, iconComponent: CaretDownIcon, \"data-test-id\": \"perspective-switcher-toggle\" },\n            React.createElement(Title, { size: \"md\" }, (_b = (_a = clusters.find(cl => cl.name === name)) === null || _a === void 0 ? void 0 : _a.displayName) !== null && _b !== void 0 ? _b : name))) : React.createElement(LoadingInline, null);\n    }, [isClusterDropdownOpen, toggleClusterOpen, clusters]);\n    const getClusterItems = React.useCallback((clusters) => {\n        let clusterItmes = [];\n        clusters.forEach((nextCluster) => (clusterItmes.push(React.createElement(DropdownItem, { key: nextCluster.name, onClick: (event) => onClusterSelect(event, nextCluster), isHovered: (nextCluster.name) === activeCluster, component: \"button\" },\n            React.createElement(Title, { size: \"md\" }, nextCluster.displayName)))));\n        return clusterItmes;\n    }, [activeCluster, onClusterSelect]);\n    React.useEffect(() => {\n        if (clusters.length == 0 || isClusterDropdownOpen) {\n            coFetchJSON(`/api/multi-hypercloud/cluster?accessOnly=true&userId=${getId()}${getUserGroup()}`, 'GET')\n                .then((result) => result.items)\n                .then((res) => {\n                var _a;\n                const clusterList = res.reduce((list, cluster) => {\n                    if (cluster.status.ready) {\n                        list.push({ displayName: cluster.fakeMetadata.fakename, name: cluster.metadata.name });\n                    }\n                    return list;\n                }, []);\n                setClusters(clusterList);\n                const hasCluster = activeCluster && clusterList.find(cl => cl.name === activeCluster);\n                if (!hasCluster) {\n                    setActiveCluster((_a = clusterList[0]) === null || _a === void 0 ? void 0 : _a.name);\n                }\n            });\n        }\n    }, [isClusterDropdownOpen]);\n    return (React.createElement(Dropdown, { isOpen: isClusterDropdownOpen, toggle: renderClusterToggle(activeCluster), dropdownItems: getClusterItems(clusters), \"data-test-id\": \"perspective-switcher-menu\" }));\n};\nconst mapStateToProps = (state) => ({\n    activeCluster: getActiveCluster(state),\n});\nexport default connect(mapStateToProps, { setActiveCluster: UIActions.setActiveCluster }, null, {\n    areStatesEqual: (next, prev) => next[featureReducerName] === prev[featureReducerName] &&\n        getActiveCluster(next) === getActiveCluster(prev),\n})(ClusterDropdown_);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/nav/cluster-dropdown.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/nav/cluster-dropdown.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Dropdown, DropdownItem, DropdownToggle, Title } from '@patternfly/react-core';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport { LoadingInline } from '@console/internal/components/utils';\nimport { RootState } from '../../../redux';\nimport { featureReducerName } from '../../../reducers/features';\nimport { getActiveCluster } from '../../../reducers/ui';\nimport * as UIActions from '../../../actions/ui';\nimport { coFetchJSON } from '../../../co-fetch';\nimport { getId, getUserGroup } from '../../../hypercloud/auth';\n\ntype clusterItemProps = {\n    displayName: string;\n    name: string;\n}\n\ntype StateProps = {\n    activeCluster: string;\n    setActiveCluster?: (name: string) => void;\n};\n\nexport type ClusterDropdownProps = {\n    onClusterSelected: () => void;\n};\n\nconst ClusterDropdown_: React.FC<ClusterDropdownProps & StateProps> = ({\n    setActiveCluster,\n    onClusterSelected,\n    activeCluster,\n}) => {\n    const [isClusterDropdownOpen, setClusterDropdownOpen] = React.useState(false);\n    const [clusters, setClusters] = React.useState([]);\n\n    const toggleClusterOpen = React.useCallback(() => {\n        setClusterDropdownOpen(!isClusterDropdownOpen);\n    }, [isClusterDropdownOpen]);\n\n    const onClusterSelect = React.useCallback(\n        (event: React.MouseEvent<HTMLLinkElement>, cluster): void => {\n            event.preventDefault();\n\n            if (cluster.name !== activeCluster) {\n                setActiveCluster(cluster.name);\n                window.location.reload()\n                // TODO: rerendering 고도화...\n            }\n\n            setClusterDropdownOpen(false);\n            onClusterSelected && onClusterSelected();\n        },\n        [activeCluster, onClusterSelected, setActiveCluster],\n    );\n\n    const renderClusterToggle = React.useCallback(\n        (name: string) => name ? (\n            <DropdownToggle\n                isOpen={isClusterDropdownOpen}\n                onToggle={toggleClusterOpen}\n                iconComponent={CaretDownIcon}\n                data-test-id=\"perspective-switcher-toggle\"\n            >\n                <Title size=\"md\">\n                    {clusters.find(cl => cl.name === name)?.displayName ?? name}\n                </Title>\n            </DropdownToggle>) : <LoadingInline />\n        ,\n        [isClusterDropdownOpen, toggleClusterOpen, clusters],\n    );\n\n    const getClusterItems = React.useCallback(\n        (clusters) => {\n            let clusterItmes = [];\n            clusters.forEach((nextCluster) => (\n                clusterItmes.push(\n                    <DropdownItem\n                        key={nextCluster.name}\n                        onClick={(event: React.MouseEvent<HTMLLinkElement>) =>\n                            onClusterSelect(event, nextCluster)\n                        }\n                        isHovered={(nextCluster.name) === activeCluster}\n                        component=\"button\"\n                    >\n                        <Title size=\"md\">\n                            {nextCluster.displayName}\n                        </Title>\n                    </DropdownItem>\n                )\n            ));\n            return clusterItmes;\n        },\n        [activeCluster, onClusterSelect],\n    );\n\n    React.useEffect(() => {\n        if (clusters.length == 0 || isClusterDropdownOpen) {\n            coFetchJSON(`/api/multi-hypercloud/cluster?accessOnly=true&userId=${getId()}${getUserGroup()}`, 'GET')\n            .then((result) => result.items)\n            .then((res) => {\n                const clusterList: clusterItemProps[] = res.reduce((list, cluster)=> {\n                    if(cluster.status.ready) {\n                        list.push({displayName: cluster.fakeMetadata.fakename, name: cluster.metadata.name});\n                    }\n                    return list;\n                }, []);\n              \n                setClusters(clusterList);\n\n                const hasCluster = activeCluster && clusterList.find(cl => cl.name === activeCluster);\n\n                if (!hasCluster) {\n                    setActiveCluster(clusterList[0]?.name);\n                }\n\n            });\n        }\n    }, [isClusterDropdownOpen]);\n\n    return (\n        <Dropdown\n            isOpen={isClusterDropdownOpen}\n            toggle={renderClusterToggle(activeCluster)}\n            dropdownItems={getClusterItems(clusters)}\n            data-test-id=\"perspective-switcher-menu\"\n        />\n    );\n};\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n    activeCluster: getActiveCluster(state),\n});\n\nexport default connect<StateProps, {}, ClusterDropdownProps, RootState>(\n    mapStateToProps,\n    { setActiveCluster: UIActions.setActiveCluster },\n    null,\n    {\n        areStatesEqual: (next, prev) =>\n            next[featureReducerName] === prev[featureReducerName] &&\n            getActiveCluster(next) === getActiveCluster(prev),\n    },\n)(ClusterDropdown_);\n"]}]}