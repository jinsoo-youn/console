{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/file-input.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/file-input.tsx","mtime":1616735742480},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { NativeTypes } from 'react-dnd-html5-backend';\nimport { DropTarget } from 'react-dnd';\nimport withDragDropContext from './drag-drop-context';\n// Maximal file size, in bytes, that user can upload\nconst maxFileUploadSize = 4000000;\nconst fileSizeErrorMsg = 'Maximum file size exceeded. File limit is 4MB.';\nexport class FileInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onDataChange = this.onDataChange.bind(this);\n        this.onFileUpload = this.onFileUpload.bind(this);\n    }\n    onDataChange(event) {\n        this.props.onChange({\n            fileData: event.target.value,\n        });\n    }\n    readFile(file) {\n        if (file.size > maxFileUploadSize) {\n            this.props.onChange({\n                errorMessage: fileSizeErrorMsg,\n            });\n            return;\n        }\n        const reader = new FileReader();\n        reader.onload = () => {\n            const input = reader.result;\n            this.props.onChange({\n                fileData: input,\n                fileName: file.name,\n            });\n        };\n        reader.readAsText(file, 'UTF-8');\n    }\n    onFileUpload(event) {\n        this.readFile(event.target.files[0]);\n    }\n    render() {\n        const { connectDropTarget, errorMessage, hideContents, isOver, canDrop, id, isRequired, } = this.props;\n        const klass = classNames('co-file-dropzone-container', {\n            'co-file-dropzone--drop-over': isOver,\n        });\n        return connectDropTarget(React.createElement(\"div\", { className: \"co-file-dropzone\" },\n            canDrop && (React.createElement(\"div\", { className: klass },\n                React.createElement(\"p\", { className: \"co-file-dropzone__drop-text\" }, \"Drop file here\"))),\n            React.createElement(\"div\", { className: \"form-group\" },\n                React.createElement(\"label\", { className: classNames('control-label', { 'co-required': isRequired }), htmlFor: id }, this.props.label),\n                React.createElement(\"div\", { className: \"modal-body__field\" },\n                    React.createElement(\"div\", { className: \"pf-c-input-group\" },\n                        React.createElement(\"input\", { type: \"text\", className: \"pf-c-form-control\", value: this.props.inputFileName, \"aria-describedby\": `${id}-help`, readOnly: true, disabled: true }),\n                        React.createElement(\"span\", { className: \"pf-c-button pf-m-tertiary co-btn-file\" },\n                            React.createElement(\"input\", { type: \"file\", onChange: this.onFileUpload }),\n                            \"Browse\\u2026\")),\n                    React.createElement(\"p\", { className: \"help-block\", id: `${id}-help` }, this.props.inputFieldHelpText),\n                    !hideContents && (React.createElement(\"textarea\", { \"data-test-id\": this.props['data-test-id'] ? this.props['data-test-id'] : 'file-input-textarea', className: \"pf-c-form-control co-file-dropzone__textarea\", onChange: this.onDataChange, value: this.props.inputFileData, \"aria-describedby\": `${id}-textarea-help`, required: isRequired })),\n                    React.createElement(\"p\", { className: \"help-block\", id: `${id}-textarea-help` }, this.props.textareaFieldHelpText),\n                    errorMessage && React.createElement(\"div\", { className: \"text-danger\" }, errorMessage)))));\n    }\n}\nconst boxTarget = {\n    drop(props, monitor) {\n        if (props.onDrop && monitor.isOver()) {\n            props.onDrop(props, monitor);\n        }\n    },\n};\nconst FileInputComponent = DropTarget(NativeTypes.FILE, boxTarget, (connect, monitor) => ({\n    connectDropTarget: connect.dropTarget(),\n    isOver: monitor.isOver(),\n    canDrop: monitor.canDrop(),\n}))(FileInput);\nexport const DroppableFileInput = withDragDropContext(class DroppableFileInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            inputFileName: '',\n            inputFileData: this.props.inputFileData || '',\n        };\n        this.handleFileDrop = this.handleFileDrop.bind(this);\n        this.onDataChange = this.onDataChange.bind(this);\n    }\n    handleFileDrop(item, monitor) {\n        if (!monitor) {\n            return;\n        }\n        const file = monitor.getItem().files[0];\n        if (file.size > maxFileUploadSize) {\n            this.setState({\n                errorMessage: fileSizeErrorMsg,\n                inputFileName: '',\n                inputFileData: '',\n            });\n            return;\n        }\n        const reader = new FileReader();\n        reader.onload = () => {\n            const input = reader.result; // Note(Yaacov): we use reader.readAsText\n            this.setState({\n                inputFileName: file.name,\n                inputFileData: input,\n                errorMessage: '',\n            }, () => this.props.onChange(input));\n        };\n        reader.readAsText(file, 'UTF-8');\n    }\n    onDataChange(data) {\n        const { fileData, fileName, errorMessage } = data;\n        this.setState({\n            inputFileData: fileData || '',\n            inputFileName: fileName || '',\n            errorMessage: errorMessage || '',\n        }, () => this.props.onChange(this.state.inputFileData));\n    }\n    render() {\n        return (React.createElement(FileInputComponent, Object.assign({}, this.props, { errorMessage: this.state.errorMessage, onDrop: this.handleFileDrop, onChange: this.onDataChange, inputFileData: this.state.inputFileData, inputFileName: this.state.inputFileName })));\n    }\n});\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/file-input.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/file-input.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,UAAU,MAAM,YAAY,CAAC;AACzC,OAAO,EAAE,WAAW,EAAE,MAAM,yBAAyB,CAAC;AACtD,OAAO,EAAE,UAAU,EAAE,MAAM,WAAW,CAAC;AAGvC,OAAO,mBAAmB,MAAM,qBAAqB,CAAC;AAEtD,oDAAoD;AACpD,MAAM,iBAAiB,GAAG,OAAO,CAAC;AAClC,MAAM,gBAAgB,GAAG,gDAAgD,CAAC;AAE1E,MAAM,OAAO,SAAU,SAAQ,KAAK,CAAC,SAAyC;IAC5E,YAAY,KAAK;QACf,KAAK,CAAC,KAAK,CAAC,CAAC;QACb,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnD,CAAC;IACD,YAAY,CAAC,KAAK;QAChB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;YAClB,QAAQ,EAAE,KAAK,CAAC,MAAM,CAAC,KAAK;SAC7B,CAAC,CAAC;IACL,CAAC;IACD,QAAQ,CAAC,IAAI;QACX,IAAI,IAAI,CAAC,IAAI,GAAG,iBAAiB,EAAE;YACjC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;gBAClB,YAAY,EAAE,gBAAgB;aAC/B,CAAC,CAAC;YACH,OAAO;SACR;QACD,MAAM,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;QAChC,MAAM,CAAC,MAAM,GAAG,GAAG,EAAE;YACnB,MAAM,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC;YAC5B,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC;gBAClB,QAAQ,EAAE,KAAK;gBACf,QAAQ,EAAE,IAAI,CAAC,IAAI;aACpB,CAAC,CAAC;QACL,CAAC,CAAC;QACF,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACnC,CAAC;IACD,YAAY,CAAC,KAAK;QAChB,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;IACvC,CAAC;IACD,MAAM;QACJ,MAAM,EACJ,iBAAiB,EACjB,YAAY,EACZ,YAAY,EACZ,MAAM,EACN,OAAO,EACP,EAAE,EACF,UAAU,GACX,GAAG,IAAI,CAAC,KAAK,CAAC;QACf,MAAM,KAAK,GAAG,UAAU,CAAC,4BAA4B,EAAE;YACrD,6BAA6B,EAAE,MAAM;SACtC,CAAC,CAAC;QACH,OAAO,iBAAiB,CACtB,6BAAK,SAAS,EAAC,kBAAkB;YAC9B,OAAO,IAAI,CACV,6BAAK,SAAS,EAAE,KAAK;gBACnB,2BAAG,SAAS,EAAC,6BAA6B,qBAAmB,CACzD,CACP;YAED,6BAAK,SAAS,EAAC,YAAY;gBACzB,+BACE,SAAS,EAAE,UAAU,CAAC,eAAe,EAAE,EAAE,aAAa,EAAE,UAAU,EAAE,CAAC,EACrE,OAAO,EAAE,EAAE,IAEV,IAAI,CAAC,KAAK,CAAC,KAAK,CACX;gBACR,6BAAK,SAAS,EAAC,mBAAmB;oBAChC,6BAAK,SAAS,EAAC,kBAAkB;wBAC/B,+BACE,IAAI,EAAC,MAAM,EACX,SAAS,EAAC,mBAAmB,EAC7B,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,sBACb,GAAG,EAAE,OAAO,EAC9B,QAAQ,QACR,QAAQ,SACR;wBACF,8BAAM,SAAS,EAAC,uCAAuC;4BACrD,+BAAO,IAAI,EAAC,MAAM,EAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,GAAI;2CAE7C,CACH;oBACN,2BAAG,SAAS,EAAC,YAAY,EAAC,EAAE,EAAE,GAAG,EAAE,OAAO,IACvC,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAC5B;oBACH,CAAC,YAAY,IAAI,CAChB,kDAEI,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,qBAAqB,EAEjF,SAAS,EAAC,8CAA8C,EACxD,QAAQ,EAAE,IAAI,CAAC,YAAY,EAC3B,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,sBACb,GAAG,EAAE,gBAAgB,EACvC,QAAQ,EAAE,UAAU,GACpB,CACH;oBACD,2BAAG,SAAS,EAAC,YAAY,EAAC,EAAE,EAAE,GAAG,EAAE,gBAAgB,IAChD,IAAI,CAAC,KAAK,CAAC,qBAAqB,CAC/B;oBACH,YAAY,IAAI,6BAAK,SAAS,EAAC,aAAa,IAAE,YAAY,CAAO,CAC9D,CACF,CACF,CACP,CAAC;IACJ,CAAC;CACF;AAED,MAAM,SAAS,GAAG;IAChB,IAAI,CAAC,KAAqB,EAAE,OAA0B;QACpD,IAAI,KAAK,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,EAAE,EAAE;YACpC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;SAC9B;IACH,CAAC;CACF,CAAC;AAEF,MAAM,kBAAkB,GAAG,UAAU,CAAC,WAAW,CAAC,IAAI,EAAE,SAAS,EAAE,CAAC,OAAO,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC;IACxF,iBAAiB,EAAE,OAAO,CAAC,UAAU,EAAE;IACvC,MAAM,EAAE,OAAO,CAAC,MAAM,EAAE;IACxB,OAAO,EAAE,OAAO,CAAC,OAAO,EAAE;CAC3B,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;AAEf,MAAM,CAAC,MAAM,kBAAkB,GAAG,mBAAmB,CACnD,MAAM,kBAAmB,SAAQ,KAAK,CAAC,SAGtC;IACC,YAAY,KAAK;QACf,KAAK,CAAC,KAAK,CAAC,CAAC;QACb,IAAI,CAAC,KAAK,GAAG;YACX,aAAa,EAAE,EAAE;YACjB,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,IAAI,EAAE;SAC9C,CAAC;QACF,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACnD,CAAC;IACD,cAAc,CAAC,IAAS,EAAE,OAA0B;QAClD,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO;SACR;QACD,MAAM,IAAI,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QACxC,IAAI,IAAI,CAAC,IAAI,GAAG,iBAAiB,EAAE;YACjC,IAAI,CAAC,QAAQ,CAAC;gBACZ,YAAY,EAAE,gBAAgB;gBAC9B,aAAa,EAAE,EAAE;gBACjB,aAAa,EAAE,EAAE;aAClB,CAAC,CAAC;YACH,OAAO;SACR;QACD,MAAM,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;QAChC,MAAM,CAAC,MAAM,GAAG,GAAG,EAAE;YACnB,MAAM,KAAK,GAAG,MAAM,CAAC,MAAgB,CAAC,CAAC,yCAAyC;YAChF,IAAI,CAAC,QAAQ,CACX;gBACE,aAAa,EAAE,IAAI,CAAC,IAAI;gBACxB,aAAa,EAAE,KAAK;gBACpB,YAAY,EAAE,EAAE;aACjB,EACD,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CACjC,CAAC;QACJ,CAAC,CAAC;QACF,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IACnC,CAAC;IACD,YAAY,CAAC,IAAI;QACf,MAAM,EAAE,QAAQ,EAAE,QAAQ,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC;QAClD,IAAI,CAAC,QAAQ,CACX;YACE,aAAa,EAAE,QAAQ,IAAI,EAAE;YAC7B,aAAa,EAAE,QAAQ,IAAI,EAAE;YAC7B,YAAY,EAAE,YAAY,IAAI,EAAE;SACjC,EACD,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,CACpD,CAAC;IACJ,CAAC;IACD,MAAM;QACJ,OAAO,CACL,oBAAC,kBAAkB,oBACb,IAAI,CAAC,KAAK,IACd,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY,EACrC,MAAM,EAAE,IAAI,CAAC,cAAc,EAC3B,QAAQ,EAAE,IAAI,CAAC,YAAY,EAC3B,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,EACvC,aAAa,EAAE,IAAI,CAAC,KAAK,CAAC,aAAa,IACvC,CACH,CAAC;IACJ,CAAC;CACF,CACF,CAAC","sourcesContent":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { NativeTypes } from 'react-dnd-html5-backend';\nimport { DropTarget } from 'react-dnd';\nimport { ConnectDropTarget, DropTargetMonitor } from 'react-dnd/lib/interfaces';\n\nimport withDragDropContext from './drag-drop-context';\n\n// Maximal file size, in bytes, that user can upload\nconst maxFileUploadSize = 4000000;\nconst fileSizeErrorMsg = 'Maximum file size exceeded. File limit is 4MB.';\n\nexport class FileInput extends React.Component<FileInputProps, FileInputState> {\n  constructor(props) {\n    super(props);\n    this.onDataChange = this.onDataChange.bind(this);\n    this.onFileUpload = this.onFileUpload.bind(this);\n  }\n  onDataChange(event) {\n    this.props.onChange({\n      fileData: event.target.value,\n    });\n  }\n  readFile(file) {\n    if (file.size > maxFileUploadSize) {\n      this.props.onChange({\n        errorMessage: fileSizeErrorMsg,\n      });\n      return;\n    }\n    const reader = new FileReader();\n    reader.onload = () => {\n      const input = reader.result;\n      this.props.onChange({\n        fileData: input,\n        fileName: file.name,\n      });\n    };\n    reader.readAsText(file, 'UTF-8');\n  }\n  onFileUpload(event) {\n    this.readFile(event.target.files[0]);\n  }\n  render() {\n    const {\n      connectDropTarget,\n      errorMessage,\n      hideContents,\n      isOver,\n      canDrop,\n      id,\n      isRequired,\n    } = this.props;\n    const klass = classNames('co-file-dropzone-container', {\n      'co-file-dropzone--drop-over': isOver,\n    });\n    return connectDropTarget(\n      <div className=\"co-file-dropzone\">\n        {canDrop && (\n          <div className={klass}>\n            <p className=\"co-file-dropzone__drop-text\">Drop file here</p>\n          </div>\n        )}\n\n        <div className=\"form-group\">\n          <label\n            className={classNames('control-label', { 'co-required': isRequired })}\n            htmlFor={id}\n          >\n            {this.props.label}\n          </label>\n          <div className=\"modal-body__field\">\n            <div className=\"pf-c-input-group\">\n              <input\n                type=\"text\"\n                className=\"pf-c-form-control\"\n                value={this.props.inputFileName}\n                aria-describedby={`${id}-help`}\n                readOnly\n                disabled\n              />\n              <span className=\"pf-c-button pf-m-tertiary co-btn-file\">\n                <input type=\"file\" onChange={this.onFileUpload} />\n                Browse&hellip;\n              </span>\n            </div>\n            <p className=\"help-block\" id={`${id}-help`}>\n              {this.props.inputFieldHelpText}\n            </p>\n            {!hideContents && (\n              <textarea\n                data-test-id={\n                  this.props['data-test-id'] ? this.props['data-test-id'] : 'file-input-textarea'\n                }\n                className=\"pf-c-form-control co-file-dropzone__textarea\"\n                onChange={this.onDataChange}\n                value={this.props.inputFileData}\n                aria-describedby={`${id}-textarea-help`}\n                required={isRequired}\n              />\n            )}\n            <p className=\"help-block\" id={`${id}-textarea-help`}>\n              {this.props.textareaFieldHelpText}\n            </p>\n            {errorMessage && <div className=\"text-danger\">{errorMessage}</div>}\n          </div>\n        </div>\n      </div>,\n    );\n  }\n}\n\nconst boxTarget = {\n  drop(props: FileInputProps, monitor: DropTargetMonitor) {\n    if (props.onDrop && monitor.isOver()) {\n      props.onDrop(props, monitor);\n    }\n  },\n};\n\nconst FileInputComponent = DropTarget(NativeTypes.FILE, boxTarget, (connect, monitor) => ({\n  connectDropTarget: connect.dropTarget(),\n  isOver: monitor.isOver(),\n  canDrop: monitor.canDrop(),\n}))(FileInput);\n\nexport const DroppableFileInput = withDragDropContext(\n  class DroppableFileInput extends React.Component<\n    DroppableFileInputProps,\n    DroppableFileInputState\n  > {\n    constructor(props) {\n      super(props);\n      this.state = {\n        inputFileName: '',\n        inputFileData: this.props.inputFileData || '',\n      };\n      this.handleFileDrop = this.handleFileDrop.bind(this);\n      this.onDataChange = this.onDataChange.bind(this);\n    }\n    handleFileDrop(item: any, monitor: DropTargetMonitor) {\n      if (!monitor) {\n        return;\n      }\n      const file = monitor.getItem().files[0];\n      if (file.size > maxFileUploadSize) {\n        this.setState({\n          errorMessage: fileSizeErrorMsg,\n          inputFileName: '',\n          inputFileData: '',\n        });\n        return;\n      }\n      const reader = new FileReader();\n      reader.onload = () => {\n        const input = reader.result as string; // Note(Yaacov): we use reader.readAsText\n        this.setState(\n          {\n            inputFileName: file.name,\n            inputFileData: input,\n            errorMessage: '',\n          },\n          () => this.props.onChange(input),\n        );\n      };\n      reader.readAsText(file, 'UTF-8');\n    }\n    onDataChange(data) {\n      const { fileData, fileName, errorMessage } = data;\n      this.setState(\n        {\n          inputFileData: fileData || '',\n          inputFileName: fileName || '',\n          errorMessage: errorMessage || '',\n        },\n        () => this.props.onChange(this.state.inputFileData),\n      );\n    }\n    render() {\n      return (\n        <FileInputComponent\n          {...this.props}\n          errorMessage={this.state.errorMessage}\n          onDrop={this.handleFileDrop}\n          onChange={this.onDataChange}\n          inputFileData={this.state.inputFileData}\n          inputFileName={this.state.inputFileName}\n        />\n      );\n    }\n  },\n);\n\nexport type DroppableFileInputProps = {\n  inputFileData: string;\n  onChange: Function;\n  label: string;\n  id: string;\n  inputFieldHelpText: string;\n  textareaFieldHelpText: string;\n  isRequired: boolean;\n  hideContents?: boolean;\n};\n\nexport type DroppableFileInputState = {\n  inputFileData: string;\n  inputFileName: string;\n  errorMessage?: any;\n};\n\nexport type FileInputState = {\n  inputFileData: string;\n  inputFileName: string;\n};\n\nexport type FileInputProps = {\n  errorMessage: string;\n  connectDropTarget?: ConnectDropTarget;\n  isOver?: boolean;\n  canDrop?: boolean;\n  onDrop: (props: FileInputProps, monitor: DropTargetMonitor) => void;\n  inputFileData: string;\n  inputFileName: string;\n  onChange: Function;\n  label: string;\n  id: string;\n  inputFieldHelpText: string;\n  textareaFieldHelpText: string;\n  isRequired: boolean;\n  hideContents?: boolean;\n};\n"]}]}