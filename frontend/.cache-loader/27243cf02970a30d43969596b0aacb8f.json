{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/boot-order/boot-order.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/boot-order/boot-order.tsx","mtime":1616735742410},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Text, TextVariants } from '@patternfly/react-core';\nimport { DNDDataList, DNDDataListItem } from '../dnd-list';\nimport { BootOrderEmpty } from './boot-order-empty';\nimport { AddDevice } from './add-device';\nimport { addItemMessage, addItemDisabledMessage, bootOrderEmptyMessage, bootOrderEmptyTitle, deviceKey, deviceLabel, bootOrderAriaLabel, } from './constants';\nimport './boot-order.scss';\nexport const BootOrder = ({ devices, setDevices }) => {\n    const sources = _.sortBy(devices.filter((device) => device.value.bootOrder), 'value.bootOrder');\n    const options = devices.filter((device) => !device.value.bootOrder);\n    const [isEditMode, setEditMode] = React.useState(false);\n    // Relax bootOrder and use setDevice to update the parent componenet.\n    const updateDevices = (newDevices) => {\n        _.filter(newDevices, (device) => device.value.bootOrder).forEach((source, i) => {\n            source.value.bootOrder = i + 1;\n        });\n        setDevices(newDevices);\n        setEditMode(false);\n    };\n    // Remove a bootOrder from a device by index.\n    const onDelete = (index) => {\n        const newDevices = _.cloneDeep(devices);\n        const key = deviceKey(sources[index]);\n        delete newDevices.find((device) => deviceKey(device) === key).value.bootOrder;\n        updateDevices(newDevices);\n    };\n    // Move a source from one index to another.\n    const onMove = (index, toIndex) => {\n        const unMovedSources = [...sources.slice(0, index), ...sources.slice(index + 1)];\n        // Create an ordered copy of the sources.\n        const newSources = _.cloneDeep([\n            ...unMovedSources.slice(0, toIndex),\n            sources[index],\n            ...unMovedSources.slice(toIndex),\n        ]);\n        updateDevices([...newSources, ...options]);\n    };\n    // Add a bootOrder to a device by key, item key is \"<type>->name>\".\n    const onAdd = (key) => {\n        const newOptions = _.cloneDeep(options);\n        newOptions.find((option) => deviceKey(option) === key).value.bootOrder = sources.length + 1;\n        updateDevices([...sources, ...newOptions]);\n    };\n    const showEmpty = sources.length === 0 && !isEditMode;\n    const dataListID = 'VMBootOrderList';\n    return (React.createElement(React.Fragment, null, showEmpty ? (React.createElement(BootOrderEmpty, { title: bootOrderEmptyTitle, message: bootOrderEmptyMessage, addItemMessage: addItemMessage, addItemDisabledMessage: addItemDisabledMessage, addItemIsDisabled: options.length === 0, onClick: () => {\n            setEditMode(true);\n        } })) : (React.createElement(React.Fragment, null,\n        React.createElement(DNDDataList, { id: dataListID, \"aria-label\": bootOrderAriaLabel }, sources.map((source, index) => (React.createElement(DNDDataListItem, { index: index, onDelete: onDelete, onMove: onMove, \"aria-labelledby\": `device-${deviceKey(source)}`, key: `device-${deviceKey(source)}`, className: \"kubevirt-boot-order__data-list-item\" },\n            React.createElement(Text, { id: `device-${deviceKey(source)}`, component: TextVariants.p }, deviceLabel(source)))))),\n        React.createElement(AddDevice, { devices: devices, onAdd: onAdd, isEditMode: isEditMode, setEditMode: setEditMode })))));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/boot-order/boot-order.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/boot-order/boot-order.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Text, TextVariants } from '@patternfly/react-core';\nimport { DNDDataList, DNDDataListItem } from '../dnd-list';\nimport { BootableDeviceType } from '../../types';\nimport { BootOrderEmpty } from './boot-order-empty';\nimport { AddDevice } from './add-device';\nimport {\n  addItemMessage,\n  addItemDisabledMessage,\n  bootOrderEmptyMessage,\n  bootOrderEmptyTitle,\n  deviceKey,\n  deviceLabel,\n  bootOrderAriaLabel,\n} from './constants';\n\nimport './boot-order.scss';\n\nexport const BootOrder = ({ devices, setDevices }: BootOrderProps) => {\n  const sources = _.sortBy(\n    devices.filter((device) => device.value.bootOrder),\n    'value.bootOrder',\n  );\n  const options = devices.filter((device) => !device.value.bootOrder);\n  const [isEditMode, setEditMode] = React.useState<boolean>(false);\n\n  // Relax bootOrder and use setDevice to update the parent componenet.\n  const updateDevices = (newDevices: BootableDeviceType[]): void => {\n    _.filter(newDevices, (device) => device.value.bootOrder).forEach((source, i) => {\n      source.value.bootOrder = i + 1;\n    });\n\n    setDevices(newDevices);\n    setEditMode(false);\n  };\n\n  // Remove a bootOrder from a device by index.\n  const onDelete = (index: number) => {\n    const newDevices = _.cloneDeep(devices);\n\n    const key = deviceKey(sources[index]);\n    delete newDevices.find((device) => deviceKey(device) === key).value.bootOrder;\n\n    updateDevices(newDevices);\n  };\n\n  // Move a source from one index to another.\n  const onMove = (index: number, toIndex: number) => {\n    const unMovedSources = [...sources.slice(0, index), ...sources.slice(index + 1)];\n\n    // Create an ordered copy of the sources.\n    const newSources = _.cloneDeep([\n      ...unMovedSources.slice(0, toIndex),\n      sources[index],\n      ...unMovedSources.slice(toIndex),\n    ]);\n\n    updateDevices([...newSources, ...options]);\n  };\n\n  // Add a bootOrder to a device by key, item key is \"<type>->name>\".\n  const onAdd = (key: string): void => {\n    const newOptions = _.cloneDeep(options);\n    newOptions.find((option) => deviceKey(option) === key).value.bootOrder = sources.length + 1;\n\n    updateDevices([...sources, ...newOptions]);\n  };\n\n  const showEmpty = sources.length === 0 && !isEditMode;\n  const dataListID = 'VMBootOrderList';\n\n  return (\n    <>\n      {showEmpty ? (\n        <BootOrderEmpty\n          title={bootOrderEmptyTitle}\n          message={bootOrderEmptyMessage}\n          addItemMessage={addItemMessage}\n          addItemDisabledMessage={addItemDisabledMessage}\n          addItemIsDisabled={options.length === 0}\n          onClick={() => {\n            setEditMode(true);\n          }}\n        />\n      ) : (\n        <>\n          <DNDDataList id={dataListID} aria-label={bootOrderAriaLabel}>\n            {sources.map((source, index) => (\n              <DNDDataListItem\n                index={index}\n                onDelete={onDelete}\n                onMove={onMove}\n                aria-labelledby={`device-${deviceKey(source)}`}\n                key={`device-${deviceKey(source)}`}\n                className=\"kubevirt-boot-order__data-list-item\"\n              >\n                <Text id={`device-${deviceKey(source)}`} component={TextVariants.p}>\n                  {deviceLabel(source)}\n                </Text>\n              </DNDDataListItem>\n            ))}\n          </DNDDataList>\n          <AddDevice\n            devices={devices}\n            onAdd={onAdd}\n            isEditMode={isEditMode}\n            setEditMode={setEditMode}\n          />\n        </>\n      )}\n    </>\n  );\n};\n\nexport type BootOrderProps = {\n  devices: BootableDeviceType[];\n  setDevices: (devices: BootableDeviceType[]) => void;\n};\n"]}]}