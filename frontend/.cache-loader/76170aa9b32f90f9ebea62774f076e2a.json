{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-topology/TaskEdge.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-topology/TaskEdge.tsx","mtime":1615298458620},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { integralShapePath } from './draw-utils';\nconst TaskEdge = ({ element }) => {\n    const startPoint = element.getStartPoint();\n    const endPoint = element.getEndPoint();\n    const sourceNode = element.getSource();\n    const targetNode = element.getTarget();\n    return (React.createElement(\"path\", { d: integralShapePath(startPoint.clone().translate(sourceNode.getBounds().width / 2 - 1, 0), endPoint.clone().translate(-targetNode.getBounds().width / 2, 0)), stroke: \"var(--pf-global--BorderColor--light-100)\", fill: \"none\", transform: \"translate(0.5,0.5)\" }));\n};\nexport default TaskEdge;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-topology/TaskEdge.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-topology/TaskEdge.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAE,iBAAiB,EAAE,MAAM,cAAc,CAAC;AAEjD,MAAM,QAAQ,GAAgC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE;IAC5D,MAAM,UAAU,GAAU,OAAO,CAAC,aAAa,EAAE,CAAC;IAClD,MAAM,QAAQ,GAAU,OAAO,CAAC,WAAW,EAAE,CAAC;IAC9C,MAAM,UAAU,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC;IACvC,MAAM,UAAU,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC;IAEvC,OAAO,CACL,8BACE,CAAC,EAAE,iBAAiB,CAClB,UAAU,CAAC,KAAK,EAAE,CAAC,SAAS,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC,KAAK,GAAG,CAAC,GAAG,CAAC,EAAE,CAAC,CAAC,EACrE,QAAQ,CAAC,KAAK,EAAE,CAAC,SAAS,CAAC,CAAC,UAAU,CAAC,SAAS,EAAE,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,CAAC,CACjE,EACD,MAAM,EAAC,0CAA0C,EACjD,IAAI,EAAC,MAAM,EACX,SAAS,EAAC,oBAAoB,GAC9B,CACH,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,QAAQ,CAAC","sourcesContent":["import * as React from 'react';\nimport { Edge, Point } from '@console/topology';\nimport { integralShapePath } from './draw-utils';\n\nconst TaskEdge: React.FC<{ element: Edge }> = ({ element }) => {\n  const startPoint: Point = element.getStartPoint();\n  const endPoint: Point = element.getEndPoint();\n  const sourceNode = element.getSource();\n  const targetNode = element.getTarget();\n\n  return (\n    <path\n      d={integralShapePath(\n        startPoint.clone().translate(sourceNode.getBounds().width / 2 - 1, 0),\n        endPoint.clone().translate(-targetNode.getBounds().width / 2, 0),\n      )}\n      stroke=\"var(--pf-global--BorderColor--light-100)\"\n      fill=\"none\"\n      transform=\"translate(0.5,0.5)\"\n    />\n  );\n};\n\nexport default TaskEdge;\n"]}]}