{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/types.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/types.ts","mtime":1615298458710},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["export var AppCatalog;\n(function (AppCatalog) {\n    AppCatalog[\"rhOperators\"] = \"rh-operators\";\n})(AppCatalog || (AppCatalog = {}));\nexport var ClusterServiceVersionPhase;\n(function (ClusterServiceVersionPhase) {\n    ClusterServiceVersionPhase[\"CSVPhaseNone\"] = \"\";\n    ClusterServiceVersionPhase[\"CSVPhasePending\"] = \"Pending\";\n    ClusterServiceVersionPhase[\"CSVPhaseInstallReady\"] = \"InstallReady\";\n    ClusterServiceVersionPhase[\"CSVPhaseInstalling\"] = \"Installing\";\n    ClusterServiceVersionPhase[\"CSVPhaseSucceeded\"] = \"Succeeded\";\n    ClusterServiceVersionPhase[\"CSVPhaseFailed\"] = \"Failed\";\n    ClusterServiceVersionPhase[\"CSVPhaseUnknown\"] = \"Unknown\";\n    ClusterServiceVersionPhase[\"CSVPhaseReplacing\"] = \"Replacing\";\n    ClusterServiceVersionPhase[\"CSVPhaseDeleting\"] = \"Deleting\";\n})(ClusterServiceVersionPhase || (ClusterServiceVersionPhase = {}));\nexport var CSVConditionReason;\n(function (CSVConditionReason) {\n    CSVConditionReason[\"CSVReasonRequirementsUnknown\"] = \"RequirementsUnknown\";\n    CSVConditionReason[\"CSVReasonRequirementsNotMet\"] = \"RequirementsNotMet\";\n    CSVConditionReason[\"CSVReasonRequirementsMet\"] = \"AllRequirementsMet\";\n    CSVConditionReason[\"CSVReasonOwnerConflict\"] = \"OwnerConflict\";\n    CSVConditionReason[\"CSVReasonComponentFailed\"] = \"InstallComponentFailed\";\n    CSVConditionReason[\"CSVReasonInvalidStrategy\"] = \"InvalidInstallStrategy\";\n    CSVConditionReason[\"CSVReasonWaiting\"] = \"InstallWaiting\";\n    CSVConditionReason[\"CSVReasonInstallSuccessful\"] = \"InstallSucceeded\";\n    CSVConditionReason[\"CSVReasonInstallCheckFailed\"] = \"InstallCheckFailed\";\n    CSVConditionReason[\"CSVReasonComponentUnhealthy\"] = \"ComponentUnhealthy\";\n    CSVConditionReason[\"CSVReasonBeingReplaced\"] = \"BeingReplaced\";\n    CSVConditionReason[\"CSVReasonReplaced\"] = \"Replaced\";\n    CSVConditionReason[\"CSVReasonCopied\"] = \"Copied\";\n})(CSVConditionReason || (CSVConditionReason = {}));\nexport var InstallPlanApproval;\n(function (InstallPlanApproval) {\n    InstallPlanApproval[\"Automatic\"] = \"Automatic\";\n    InstallPlanApproval[\"Manual\"] = \"Manual\";\n})(InstallPlanApproval || (InstallPlanApproval = {}));\nexport var InstallModeType;\n(function (InstallModeType) {\n    InstallModeType[\"InstallModeTypeOwnNamespace\"] = \"OwnNamespace\";\n    InstallModeType[\"InstallModeTypeSingleNamespace\"] = \"SingleNamespace\";\n    InstallModeType[\"InstallModeTypeMultiNamespace\"] = \"MultiNamespace\";\n    InstallModeType[\"InstallModeTypeAllNamespaces\"] = \"AllNamespaces\";\n})(InstallModeType || (InstallModeType = {}));\nexport var SubscriptionState;\n(function (SubscriptionState) {\n    SubscriptionState[\"SubscriptionStateNone\"] = \"\";\n    SubscriptionState[\"SubscriptionStateFailed\"] = \"UpgradeFailed\";\n    SubscriptionState[\"SubscriptionStateUpgradeAvailable\"] = \"UpgradeAvailable\";\n    SubscriptionState[\"SubscriptionStateUpgradePending\"] = \"UpgradePending\";\n    SubscriptionState[\"SubscriptionStateAtLatest\"] = \"AtLatestKnown\";\n})(SubscriptionState || (SubscriptionState = {}));\nexport var ClusterServiceVersionStatus;\n(function (ClusterServiceVersionStatus) {\n    ClusterServiceVersionStatus[\"Failed\"] = \"Failed\";\n    ClusterServiceVersionStatus[\"OK\"] = \"OK\";\n    ClusterServiceVersionStatus[\"Pending\"] = \"Pending\";\n    ClusterServiceVersionStatus[\"Unknown\"] = \"Unknown\";\n})(ClusterServiceVersionStatus || (ClusterServiceVersionStatus = {}));\nexport var InstallPlanPhase;\n(function (InstallPlanPhase) {\n    InstallPlanPhase[\"InstallPlanPhaseNone\"] = \"\";\n    InstallPlanPhase[\"InstallPlanPhasePlanning\"] = \"Planning\";\n    InstallPlanPhase[\"InstallPlanPhaseRequiresApproval\"] = \"RequiresApproval\";\n    InstallPlanPhase[\"InstallPlanPhaseInstalling\"] = \"Installing\";\n    InstallPlanPhase[\"InstallPlanPhaseComplete\"] = \"Complete\";\n    InstallPlanPhase[\"InstallPlanPhaseFailed\"] = \"Failed\";\n})(InstallPlanPhase || (InstallPlanPhase = {}));\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/types.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/types.ts"],"names":[],"mappings":"AASA,MAAM,CAAN,IAAY,UAEX;AAFD,WAAY,UAAU;IACpB,0CAA4B,CAAA;AAC9B,CAAC,EAFW,UAAU,KAAV,UAAU,QAErB;AAED,MAAM,CAAN,IAAY,0BAUX;AAVD,WAAY,0BAA0B;IACpC,+CAAiB,CAAA;IACjB,yDAA2B,CAAA;IAC3B,mEAAqC,CAAA;IACrC,+DAAiC,CAAA;IACjC,6DAA+B,CAAA;IAC/B,uDAAyB,CAAA;IACzB,yDAA2B,CAAA;IAC3B,6DAA+B,CAAA;IAC/B,2DAA6B,CAAA;AAC/B,CAAC,EAVW,0BAA0B,KAA1B,0BAA0B,QAUrC;AAED,MAAM,CAAN,IAAY,kBAcX;AAdD,WAAY,kBAAkB;IAC5B,0EAAoD,CAAA;IACpD,wEAAkD,CAAA;IAClD,qEAA+C,CAAA;IAC/C,8DAAwC,CAAA;IACxC,yEAAmD,CAAA;IACnD,yEAAmD,CAAA;IACnD,yDAAmC,CAAA;IACnC,qEAA+C,CAAA;IAC/C,wEAAkD,CAAA;IAClD,wEAAkD,CAAA;IAClD,8DAAwC,CAAA;IACxC,oDAA8B,CAAA;IAC9B,gDAA0B,CAAA;AAC5B,CAAC,EAdW,kBAAkB,KAAlB,kBAAkB,QAc7B;AAED,MAAM,CAAN,IAAY,mBAGX;AAHD,WAAY,mBAAmB;IAC7B,8CAAuB,CAAA;IACvB,wCAAiB,CAAA;AACnB,CAAC,EAHW,mBAAmB,KAAnB,mBAAmB,QAG9B;AAED,MAAM,CAAN,IAAY,eAKX;AALD,WAAY,eAAe;IACzB,+DAA4C,CAAA;IAC5C,qEAAkD,CAAA;IAClD,mEAAgD,CAAA;IAChD,iEAA8C,CAAA;AAChD,CAAC,EALW,eAAe,KAAf,eAAe,QAK1B;AAED,MAAM,CAAN,IAAY,iBAMX;AAND,WAAY,iBAAiB;IAC3B,+CAA0B,CAAA;IAC1B,8DAAyC,CAAA;IACzC,2EAAsD,CAAA;IACtD,uEAAkD,CAAA;IAClD,gEAA2C,CAAA;AAC7C,CAAC,EANW,iBAAiB,KAAjB,iBAAiB,QAM5B;AAED,MAAM,CAAN,IAAY,2BAKX;AALD,WAAY,2BAA2B;IACrC,gDAAiB,CAAA;IACjB,wCAAS,CAAA;IACT,kDAAmB,CAAA;IACnB,kDAAmB,CAAA;AACrB,CAAC,EALW,2BAA2B,KAA3B,2BAA2B,QAKtC;AA6FD,MAAM,CAAN,IAAY,gBAOX;AAPD,WAAY,gBAAgB;IAC1B,6CAAyB,CAAA;IACzB,yDAAqC,CAAA;IACrC,yEAAqD,CAAA;IACrD,6DAAyC,CAAA;IACzC,yDAAqC,CAAA;IACrC,qDAAiC,CAAA;AACnC,CAAC,EAPW,gBAAgB,KAAhB,gBAAgB,QAO3B","sourcesContent":["import {\n  K8sResourceCommon,\n  K8sResourceCondition,\n  K8sResourceKind,\n  OwnerReference,\n  Selector,\n} from '@console/internal/module/k8s';\nimport { Descriptor } from './components/descriptors/types';\n\nexport enum AppCatalog {\n  rhOperators = 'rh-operators',\n}\n\nexport enum ClusterServiceVersionPhase {\n  CSVPhaseNone = '',\n  CSVPhasePending = 'Pending',\n  CSVPhaseInstallReady = 'InstallReady',\n  CSVPhaseInstalling = 'Installing',\n  CSVPhaseSucceeded = 'Succeeded',\n  CSVPhaseFailed = 'Failed',\n  CSVPhaseUnknown = 'Unknown',\n  CSVPhaseReplacing = 'Replacing',\n  CSVPhaseDeleting = 'Deleting',\n}\n\nexport enum CSVConditionReason {\n  CSVReasonRequirementsUnknown = 'RequirementsUnknown',\n  CSVReasonRequirementsNotMet = 'RequirementsNotMet',\n  CSVReasonRequirementsMet = 'AllRequirementsMet',\n  CSVReasonOwnerConflict = 'OwnerConflict',\n  CSVReasonComponentFailed = 'InstallComponentFailed',\n  CSVReasonInvalidStrategy = 'InvalidInstallStrategy',\n  CSVReasonWaiting = 'InstallWaiting',\n  CSVReasonInstallSuccessful = 'InstallSucceeded',\n  CSVReasonInstallCheckFailed = 'InstallCheckFailed',\n  CSVReasonComponentUnhealthy = 'ComponentUnhealthy',\n  CSVReasonBeingReplaced = 'BeingReplaced',\n  CSVReasonReplaced = 'Replaced',\n  CSVReasonCopied = 'Copied',\n}\n\nexport enum InstallPlanApproval {\n  Automatic = 'Automatic',\n  Manual = 'Manual',\n}\n\nexport enum InstallModeType {\n  InstallModeTypeOwnNamespace = 'OwnNamespace',\n  InstallModeTypeSingleNamespace = 'SingleNamespace',\n  InstallModeTypeMultiNamespace = 'MultiNamespace',\n  InstallModeTypeAllNamespaces = 'AllNamespaces',\n}\n\nexport enum SubscriptionState {\n  SubscriptionStateNone = '',\n  SubscriptionStateFailed = 'UpgradeFailed',\n  SubscriptionStateUpgradeAvailable = 'UpgradeAvailable',\n  SubscriptionStateUpgradePending = 'UpgradePending',\n  SubscriptionStateAtLatest = 'AtLatestKnown',\n}\n\nexport enum ClusterServiceVersionStatus {\n  Failed = 'Failed',\n  OK = 'OK',\n  Pending = 'Pending',\n  Unknown = 'Unknown',\n}\n\nexport type CRDDescription = {\n  name: string;\n  version: string;\n  kind: string;\n  displayName: string;\n  description?: string;\n  specDescriptors?: Descriptor[];\n  statusDescriptors?: Descriptor[];\n  resources?: {\n    name?: string;\n    version: string;\n    kind: string;\n  }[];\n};\n\nexport type APIServiceDefinition = {\n  name: string;\n  group: string;\n  version: string;\n  kind: string;\n  deploymentName: string;\n  containerPort: number;\n  displayName: string;\n  description?: string;\n  specDescriptors?: Descriptor[];\n  statusDescriptors?: Descriptor[];\n  resources?: {\n    name?: string;\n    version: string;\n    kind: string;\n  }[];\n};\n\nexport type ProvidedAPI = CRDDescription | APIServiceDefinition;\n\nexport type RequirementStatus = {\n  group: string;\n  version: string;\n  kind: string;\n  name: string;\n  status: string;\n  uuid?: string;\n};\n\nexport type ClusterServiceVersionIcon = { base64data: string; mediatype: string };\n\nexport type ClusterServiceVersionKind = {\n  apiVersion: 'operators.coreos.com/v1alpha1';\n  kind: 'ClusterServiceVersion';\n  spec: {\n    install: {\n      strategy: 'Deployment';\n      spec: {\n        permissions: {\n          serviceAccountName: string;\n          rules: { apiGroups: string[]; resources: string[]; verbs: string[] }[];\n        }[];\n        deployments: { name: string; spec: any }[];\n      };\n    };\n    customresourcedefinitions?: { owned?: CRDDescription[]; required?: CRDDescription[] };\n    apiservicedefinitions?: { owned?: APIServiceDefinition[]; required?: APIServiceDefinition[] };\n    replaces?: string;\n    installModes: { type: InstallModeType; supported: boolean }[];\n    displayName?: string;\n    description?: string;\n    provider?: { name: string };\n    version?: string;\n    icon?: ClusterServiceVersionIcon[];\n  };\n  status?: {\n    phase: ClusterServiceVersionPhase;\n    reason: CSVConditionReason;\n    requirementStatus?: RequirementStatus[];\n  };\n} & K8sResourceKind;\n\nexport type StepResource = {\n  group: string;\n  version: string;\n  kind: string;\n  name: string;\n  manifest?: string;\n};\n\nexport type Step = {\n  resolving: string;\n  resource: StepResource;\n  status: 'Unknown' | 'NotPresent' | 'Present' | 'Created';\n};\n\nexport enum InstallPlanPhase {\n  InstallPlanPhaseNone = '',\n  InstallPlanPhasePlanning = 'Planning',\n  InstallPlanPhaseRequiresApproval = 'RequiresApproval',\n  InstallPlanPhaseInstalling = 'Installing',\n  InstallPlanPhaseComplete = 'Complete',\n  InstallPlanPhaseFailed = 'Failed',\n}\n\nexport type InstallPlanKind = {\n  spec: {\n    clusterServiceVersionNames: string[];\n    approval: InstallPlanApproval;\n    approved?: boolean;\n  };\n  status?: {\n    phase: InstallPlanPhase;\n    catalogSources: string[];\n    plan: Step[];\n    conditions?: K8sResourceCondition[];\n  };\n} & K8sResourceCommon;\n\nexport type SubscriptionKind = {\n  apiVersion: 'operators.coreos.com/v1alpha1';\n  kind: 'Subscription';\n  spec: {\n    source: string;\n    name: string;\n    channel?: string;\n    startingCSV?: string;\n    sourceNamespace?: string;\n    installPlanApproval?: InstallPlanApproval;\n  };\n  status?: {\n    installedCSV?: string;\n    installplan?: OwnerReference;\n    state?: SubscriptionState;\n  };\n} & K8sResourceKind;\n\nexport type CatalogSourceKind = {\n  apiVersion: 'operators.coreos.com/v1alpha1';\n  kind: 'CatalogSource';\n  spec: {\n    name: string;\n    sourceType: 'internal' | 'grpc' | 'configMap';\n    configMap?: string;\n    secrets?: string[];\n    displayName?: string;\n    description?: string;\n    publisher?: string;\n    icon?: { mediatype: string; data: string };\n  };\n} & K8sResourceKind;\n\nexport type PackageManifestKind = {\n  apiVersion: 'packages.operators.coreos.com/v1';\n  kind: 'PackageManifest';\n  spec: {};\n  status: {\n    catalogSource: string;\n    catalogSourceNamespace: string;\n    catalogSourceDisplayName: string;\n    catalogSourcePublisher: string;\n    provider: {\n      name: string;\n    };\n    packageName: string;\n    channels: {\n      name: string;\n      currentCSV: string;\n      currentCSVDesc: {\n        annotations?: any;\n        description?: string;\n        displayName: string;\n        icon: { mediatype: string; base64data: string }[];\n        version: string;\n        provider: {\n          name: string;\n        };\n        installModes: { type: InstallModeType; supported: boolean }[];\n        customresourcedefinitions?: { owned?: CRDDescription[]; required?: CRDDescription[] };\n        apiservicedefinitions?: {\n          owned?: APIServiceDefinition[];\n          required?: APIServiceDefinition[];\n        };\n      };\n    }[];\n    defaultChannel: string;\n  };\n} & K8sResourceKind;\n\nexport type OperatorGroupKind = {\n  apiVersion: 'operators.coreos.com/v1';\n  kind: 'OperatorGroup';\n  spec?: {\n    selector?: Selector;\n    targetNamespaces?: string[];\n    serviceAccount?: K8sResourceKind;\n  };\n  status?: {\n    namespaces?: string[];\n    lastUpdated: string;\n  };\n} & K8sResourceKind;\n"]}]}