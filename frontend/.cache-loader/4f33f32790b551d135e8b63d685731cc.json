{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vmi/basic.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vmi/basic.ts","mtime":1616735742430},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nexport const getVMIDisks = (vmi, defaultValue = []) => vmi && vmi.spec && vmi.spec.domain && vmi.spec.domain.devices && vmi.spec.domain.devices.disks\n    ? vmi.spec.domain.devices.disks\n    : defaultValue;\nexport const getVMINetworks = (vmi, defaultValue = []) => vmi && vmi.spec && vmi.spec.networks ? vmi.spec.networks : defaultValue;\nexport const getVMIVolumes = (vmi, defaultValue = []) => vmi && vmi.spec && vmi.spec.volumes ? vmi.spec.volumes : defaultValue;\nexport const getVMIInterfaces = (vmi, defaultValue = []) => _.has(vmi, 'spec.domain.devices.interfaces') ? vmi.spec.domain.devices.interfaces : defaultValue;\nexport const getVMIConditionsByType = (vmi, condType) => {\n    const conditions = vmi && vmi.status && vmi.status.conditions;\n    return (conditions || []).filter((cond) => cond.type === condType);\n};\nexport const isVMIRunning = (vmi) => vmi && vmi.status && vmi.status.phase === 'Running';\nexport const getVMIAvailableStatusInterfaces = (vmi) => (vmi && vmi.status && vmi.status.interfaces) || [];\nexport const getVMINodeName = (vmi) => vmi && vmi.status && vmi.status.nodeName;\nexport const isVMIPaused = (vmi) => getVMIConditionsByType(vmi, 'Paused').length > 0;\nexport const getVMINodeSelector = (vmi) => { var _a; return (_a = vmi === null || vmi === void 0 ? void 0 : vmi.spec) === null || _a === void 0 ? void 0 : _a.nodeSelector; };\nexport const getVMITolerations = (vmi) => { var _a; return (_a = vmi === null || vmi === void 0 ? void 0 : vmi.spec) === null || _a === void 0 ? void 0 : _a.tolerations; };\nexport const getVMIAffinity = (vmi) => { var _a; return (_a = vmi === null || vmi === void 0 ? void 0 : vmi.spec) === null || _a === void 0 ? void 0 : _a.affinity; };\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vmi/basic.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vmi/basic.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { V1Network, V1NetworkInterface, VMIKind } from '../../types';\nimport { V1Disk } from '../../types/vm/disk/V1Disk';\nimport { V1Volume } from '../../types/vm/disk/V1Volume';\n\nexport const getVMIDisks = (vmi: VMIKind, defaultValue: V1Disk[] = []): V1Disk[] =>\n  vmi && vmi.spec && vmi.spec.domain && vmi.spec.domain.devices && vmi.spec.domain.devices.disks\n    ? vmi.spec.domain.devices.disks\n    : defaultValue;\n\nexport const getVMINetworks = (vmi: VMIKind, defaultValue: V1Network[] = []): V1Network[] =>\n  vmi && vmi.spec && vmi.spec.networks ? vmi.spec.networks : defaultValue;\n\nexport const getVMIVolumes = (vmi: VMIKind, defaultValue: V1Volume[] = []): V1Volume[] =>\n  vmi && vmi.spec && vmi.spec.volumes ? vmi.spec.volumes : defaultValue;\n\nexport const getVMIInterfaces = (\n  vmi: VMIKind,\n  defaultValue: V1NetworkInterface[] = [],\n): V1NetworkInterface[] =>\n  _.has(vmi, 'spec.domain.devices.interfaces') ? vmi.spec.domain.devices.interfaces : defaultValue;\n\nexport const getVMIConditionsByType = (\n  vmi: VMIKind,\n  condType: string,\n): VMIKind['status']['conditions'] => {\n  const conditions = vmi && vmi.status && vmi.status.conditions;\n  return (conditions || []).filter((cond) => cond.type === condType);\n};\n\nexport const isVMIRunning = (vmi: VMIKind) => vmi && vmi.status && vmi.status.phase === 'Running';\n\nexport const getVMIAvailableStatusInterfaces = (vmi: VMIKind) =>\n  (vmi && vmi.status && vmi.status.interfaces) || [];\n\nexport const getVMINodeName = (vmi: VMIKind) => vmi && vmi.status && vmi.status.nodeName;\n\nexport const isVMIPaused = (vmi: VMIKind): boolean =>\n  getVMIConditionsByType(vmi, 'Paused').length > 0;\n\nexport const getVMINodeSelector = (vmi: VMIKind) => vmi?.spec?.nodeSelector;\n\nexport const getVMITolerations = (vmi: VMIKind) => vmi?.spec?.tolerations;\n\nexport const getVMIAffinity = (vmi: VMIKind) => vmi?.spec?.affinity;\n"]}]}