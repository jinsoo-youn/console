{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/helm/form/HelmChartVersionDropdown.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/helm/form/HelmChartVersionDropdown.tsx","mtime":1616735742380},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport { safeLoad } from 'js-yaml';\nimport { useFormikContext } from 'formik';\nimport { GridItem } from '@patternfly/react-core';\nimport { coFetchJSON, coFetch } from '@console/internal/co-fetch';\nimport { DropdownField } from '@console/shared';\nimport { getChartURL, getChartVersions, getChartValuesYAML } from '../helm-utils';\nconst HelmChartVersionDropdown = ({ chartVersion, chartName, }) => {\n    const { setFieldValue } = useFormikContext();\n    const [helmChartVersions, setHelmChartVersions] = React.useState({});\n    const [helmChartEntries, setHelmChartEntries] = React.useState([]);\n    React.useEffect(() => {\n        let ignore = false;\n        const fetchChartVersions = () => __awaiter(void 0, void 0, void 0, function* () {\n            let json;\n            try {\n                const response = yield coFetch('/api/helm/charts/index.yaml');\n                const yaml = yield response.text();\n                json = safeLoad(yaml);\n            }\n            catch (_a) {\n                if (ignore)\n                    return;\n            }\n            if (ignore)\n                return;\n            setHelmChartEntries(_.get(json, ['entries', chartName]));\n            setHelmChartVersions(getChartVersions(_.get(json, ['entries', chartName])));\n        });\n        fetchChartVersions();\n        return () => {\n            ignore = true;\n        };\n    }, [chartName]);\n    const onChartVersionChange = (value) => {\n        if (chartVersion === value)\n            return;\n        const chartURL = getChartURL(helmChartEntries, value);\n        setFieldValue('chartVersion', value);\n        setFieldValue('helmChartURL', chartURL);\n        coFetchJSON(`/api/helm/chart?url=${chartURL}`)\n            .then((res) => {\n            const chartValues = getChartValuesYAML(res);\n            setFieldValue('chartValuesYAML', chartValues);\n        })\n            .catch((err) => {\n            // eslint-disable-next-line no-console\n            console.error(err);\n        });\n    };\n    return (React.createElement(GridItem, { span: 6 },\n        React.createElement(DropdownField, { name: \"chartVersion\", label: \"Chart Version\", items: helmChartVersions, helpText: 'Select the version to upgrade to.', disabled: _.isEmpty(helmChartVersions), title: chartVersion, onChange: onChartVersionChange, required: true, fullWidth: true })));\n};\nexport default HelmChartVersionDropdown;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/helm/form/HelmChartVersionDropdown.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/helm/form/HelmChartVersionDropdown.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { safeLoad } from 'js-yaml';\nimport { FormikValues, useFormikContext } from 'formik';\nimport { GridItem } from '@patternfly/react-core';\nimport { coFetchJSON, coFetch } from '@console/internal/co-fetch';\nimport { DropdownField } from '@console/shared';\nimport { HelmChartMetaData, HelmRelease, HelmChart } from '../helm-types';\nimport { getChartURL, getChartVersions, getChartValuesYAML } from '../helm-utils';\n\nexport type HelmChartVersionDropdownProps = {\n  chartVersion: string;\n  chartName: string;\n};\n\nconst HelmChartVersionDropdown: React.FunctionComponent<HelmChartVersionDropdownProps> = ({\n  chartVersion,\n  chartName,\n}) => {\n  const { setFieldValue } = useFormikContext<FormikValues>();\n  const [helmChartVersions, setHelmChartVersions] = React.useState({});\n  const [helmChartEntries, setHelmChartEntries] = React.useState<HelmChartMetaData[]>([]);\n\n  React.useEffect(() => {\n    let ignore = false;\n\n    const fetchChartVersions = async () => {\n      let json: HelmRelease;\n\n      try {\n        const response = await coFetch('/api/helm/charts/index.yaml');\n        const yaml = await response.text();\n        json = safeLoad(yaml);\n      } catch {\n        if (ignore) return;\n      }\n      if (ignore) return;\n      setHelmChartEntries(_.get(json, ['entries', chartName]));\n      setHelmChartVersions(getChartVersions(_.get(json, ['entries', chartName])));\n    };\n    fetchChartVersions();\n    return () => {\n      ignore = true;\n    };\n  }, [chartName]);\n\n  const onChartVersionChange = (value: string) => {\n    if (chartVersion === value) return;\n\n    const chartURL = getChartURL(helmChartEntries, value);\n\n    setFieldValue('chartVersion', value);\n    setFieldValue('helmChartURL', chartURL);\n\n    coFetchJSON(`/api/helm/chart?url=${chartURL}`)\n      .then((res: HelmChart) => {\n        const chartValues = getChartValuesYAML(res);\n        setFieldValue('chartValuesYAML', chartValues);\n      })\n      .catch((err) => {\n        // eslint-disable-next-line no-console\n        console.error(err);\n      });\n  };\n\n  return (\n    <GridItem span={6}>\n      <DropdownField\n        name=\"chartVersion\"\n        label=\"Chart Version\"\n        items={helmChartVersions}\n        helpText={'Select the version to upgrade to.'}\n        disabled={_.isEmpty(helmChartVersions)}\n        title={chartVersion}\n        onChange={onChartVersionChange}\n        required\n        fullWidth\n      />\n    </GridItem>\n  );\n};\n\nexport default HelmChartVersionDropdown;\n"]}]}