{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-builder/PipelineBuilderPage.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-builder/PipelineBuilderPage.tsx","mtime":1616973267240},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Formik } from 'formik';\nimport { history } from '@console/internal/components/utils';\nimport { k8sCreate, k8sUpdate } from '@console/internal/module/k8s';\nimport { PipelineModel } from '../../../models';\nimport PipelineBuilderForm from './PipelineBuilderForm';\nimport { convertBuilderFormToPipeline, convertPipelineToBuilderForm, getPipelineURL, } from './utils';\nimport { validationSchema } from './validation-utils';\nimport './PipelineBuilderPage.scss';\nconst PipelineBuilderPage = (props) => {\n    const { existingPipeline, match: { params: { ns }, }, } = props;\n    const initialValues = Object.assign({ name: 'new-pipeline', params: [], resources: [], tasks: [], listTasks: [] }, (convertPipelineToBuilderForm(existingPipeline) || {}));\n    const handleSubmit = (values, actions) => {\n        let resourceCall;\n        if (existingPipeline) {\n            resourceCall = k8sUpdate(PipelineModel, convertBuilderFormToPipeline(values, ns, existingPipeline), ns, existingPipeline.metadata.name);\n        }\n        else {\n            resourceCall = k8sCreate(PipelineModel, convertBuilderFormToPipeline(values, ns));\n        }\n        return resourceCall\n            .then(() => {\n            actions.setSubmitting(false);\n            history.push(`${getPipelineURL(ns)}/${values.name}`);\n        })\n            .catch((e) => {\n            actions.setStatus({ submitError: e.message });\n        });\n    };\n    return (React.createElement(\"div\", { className: \"odc-pipeline-builder-page\" },\n        React.createElement(Helmet, null,\n            React.createElement(\"title\", null, \"Create Pipeline\")),\n        React.createElement(Formik, { initialValues: initialValues, onSubmit: handleSubmit, onReset: history.goBack, validationSchema: validationSchema, render: (formikProps) => (React.createElement(PipelineBuilderForm, Object.assign({}, formikProps, { namespace: ns, existingPipeline: existingPipeline }))) })));\n};\nexport default PipelineBuilderPage;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-builder/PipelineBuilderPage.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-builder/PipelineBuilderPage.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAE,MAAM,EAAE,MAAM,cAAc,CAAC;AACtC,OAAO,EAAE,MAAM,EAAa,MAAM,QAAQ,CAAC;AAC3C,OAAO,EAAE,OAAO,EAAE,MAAM,oCAAoC,CAAC;AAC7D,OAAO,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,8BAA8B,CAAC;AACpE,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAEhD,OAAO,mBAAmB,MAAM,uBAAuB,CAAC;AAExD,OAAO,EACL,4BAA4B,EAC5B,4BAA4B,EAC5B,cAAc,GACf,MAAM,SAAS,CAAC;AACjB,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AAEtD,OAAO,4BAA4B,CAAC;AAMpC,MAAM,mBAAmB,GAAuC,CAAC,KAAK,EAAE,EAAE;IACxE,MAAM,EACJ,gBAAgB,EAChB,KAAK,EAAE,EACL,MAAM,EAAE,EAAE,EAAE,EAAE,GACf,GACF,GAAG,KAAK,CAAC;IAEV,MAAM,aAAa,mBACjB,IAAI,EAAE,cAAc,EACpB,MAAM,EAAE,EAAE,EACV,SAAS,EAAE,EAAE,EACb,KAAK,EAAE,EAAE,EACT,SAAS,EAAE,EAAE,IACV,CAAC,4BAA4B,CAAC,gBAAgB,CAAC,IAAI,EAAE,CAAC,CAC1D,CAAC;IAEF,MAAM,YAAY,GAAG,CACnB,MAAmC,EACnC,OAAkD,EAClD,EAAE;QACF,IAAI,YAAY,CAAC;QACjB,IAAI,gBAAgB,EAAE;YACpB,YAAY,GAAG,SAAS,CACtB,aAAa,EACb,4BAA4B,CAAC,MAAM,EAAE,EAAE,EAAE,gBAAgB,CAAC,EAC1D,EAAE,EACF,gBAAgB,CAAC,QAAQ,CAAC,IAAI,CAC/B,CAAC;SACH;aAAM;YACL,YAAY,GAAG,SAAS,CAAC,aAAa,EAAE,4BAA4B,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC;SACnF;QAED,OAAO,YAAY;aAChB,IAAI,CAAC,GAAG,EAAE;YACT,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC7B,OAAO,CAAC,IAAI,CAAC,GAAG,cAAc,CAAC,EAAE,CAAC,IAAI,MAAM,CAAC,IAAI,EAAE,CAAC,CAAC;QACvD,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE;YACX,OAAO,CAAC,SAAS,CAAC,EAAE,WAAW,EAAE,CAAC,CAAC,OAAO,EAAE,CAAC,CAAC;QAChD,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;IAEF,OAAO,CACL,6BAAK,SAAS,EAAC,2BAA2B;QACxC,oBAAC,MAAM;YACL,qDAA8B,CACvB;QACT,oBAAC,MAAM,IACL,aAAa,EAAE,aAAa,EAC5B,QAAQ,EAAE,YAAY,EACtB,OAAO,EAAE,OAAO,CAAC,MAAM,EACvB,gBAAgB,EAAE,gBAAgB,EAClC,MAAM,EAAE,CAAC,WAAW,EAAE,EAAE,CAAC,CACvB,oBAAC,mBAAmB,oBACd,WAAW,IACf,SAAS,EAAE,EAAE,EACb,gBAAgB,EAAE,gBAAgB,IAClC,CACH,GACD,CACE,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,mBAAmB,CAAC","sourcesContent":["import * as React from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { Formik, FormikBag } from 'formik';\nimport { history } from '@console/internal/components/utils';\nimport { k8sCreate, k8sUpdate } from '@console/internal/module/k8s';\nimport { PipelineModel } from '../../../models';\nimport { Pipeline } from '../../../utils/pipeline-augment';\nimport PipelineBuilderForm from './PipelineBuilderForm';\nimport { PipelineBuilderFormValues, PipelineBuilderFormikValues } from './types';\nimport {\n  convertBuilderFormToPipeline,\n  convertPipelineToBuilderForm,\n  getPipelineURL,\n} from './utils';\nimport { validationSchema } from './validation-utils';\n\nimport './PipelineBuilderPage.scss';\n\ntype PipelineBuilderPageProps = RouteComponentProps<{ ns?: string }> & {\n  existingPipeline?: Pipeline;\n};\n\nconst PipelineBuilderPage: React.FC<PipelineBuilderPageProps> = (props) => {\n  const {\n    existingPipeline,\n    match: {\n      params: { ns },\n    },\n  } = props;\n\n  const initialValues: PipelineBuilderFormValues = {\n    name: 'new-pipeline',\n    params: [],\n    resources: [],\n    tasks: [],\n    listTasks: [],\n    ...(convertPipelineToBuilderForm(existingPipeline) || {}),\n  };\n\n  const handleSubmit = (\n    values: PipelineBuilderFormikValues,\n    actions: FormikBag<any, PipelineBuilderFormValues>,\n  ) => {\n    let resourceCall;\n    if (existingPipeline) {\n      resourceCall = k8sUpdate(\n        PipelineModel,\n        convertBuilderFormToPipeline(values, ns, existingPipeline),\n        ns,\n        existingPipeline.metadata.name,\n      );\n    } else {\n      resourceCall = k8sCreate(PipelineModel, convertBuilderFormToPipeline(values, ns));\n    }\n\n    return resourceCall\n      .then(() => {\n        actions.setSubmitting(false);\n        history.push(`${getPipelineURL(ns)}/${values.name}`);\n      })\n      .catch((e) => {\n        actions.setStatus({ submitError: e.message });\n      });\n  };\n\n  return (\n    <div className=\"odc-pipeline-builder-page\">\n      <Helmet>\n        <title>Create Pipeline</title>\n      </Helmet>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        onReset={history.goBack}\n        validationSchema={validationSchema}\n        render={(formikProps) => (\n          <PipelineBuilderForm\n            {...formikProps}\n            namespace={ns}\n            existingPipeline={existingPipeline}\n          />\n        )}\n      />\n    </div>\n  );\n};\n\nexport default PipelineBuilderPage;\n"]}]}