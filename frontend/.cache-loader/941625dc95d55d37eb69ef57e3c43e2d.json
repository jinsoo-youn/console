{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/operator-group.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/operator-group.tsx","mtime":1616735742450},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport { MsgBox } from '@console/internal/components/utils/status-box';\nimport { referenceForModel, referenceForGroupVersionKind, } from '@console/internal/module/k8s';\nimport { AsyncComponent } from '@console/internal/components/utils/async';\nimport { getActiveNamespace } from '@console/internal/actions/ui';\nimport { OperatorGroupModel } from '../models';\nimport { InstallModeType } from '../types';\nexport const targetNamespacesFor = (obj) => _.get(obj, ['metadata', 'annotations', 'olm.targetNamespaces']);\nexport const operatorNamespaceFor = (obj) => _.get(obj, ['metadata', 'annotations', 'olm.operatorNamespace']);\nexport const operatorGroupFor = (obj) => _.get(obj, ['metadata', 'annotations', 'olm.operatorGroup']);\nexport const NoOperatorGroupMsg = () => (React.createElement(MsgBox, { title: \"Namespace Not Enabled\", detail: React.createElement(\"p\", null,\n        \"The Operator Lifecycle Manager will not watch this namespace because it is not configured with an OperatorGroup.\",\n        ' ',\n        React.createElement(Link, { to: `/ns/${getActiveNamespace()}/${referenceForModel(OperatorGroupModel)}/~new` }, \"Create one here.\")) }));\nexport const OperatorGroupSelector = (props) => (React.createElement(AsyncComponent, { loader: () => import('@console/internal/components/utils/list-dropdown').then((m) => m.ListDropdown), onChange: props.onChange ||\n        function () {\n            return null;\n        }, desc: \"Operator Groups\", placeholder: \"Select Operator Group\", selectedKeyKind: referenceForModel(OperatorGroupModel), dataFilter: props.dataFilter, resources: [\n        {\n            kind: referenceForModel(OperatorGroupModel),\n            fieldSelector: `metadata.name!=${props.excludeName}`,\n        },\n    ] }));\nexport const requireOperatorGroup = (Component) => {\n    var _a;\n    return _a = class RequireOperatorGroup extends React.Component {\n            render() {\n                const namespaceEnabled = !_.get(this.props.operatorGroup, 'loaded') || !_.isEmpty(this.props.operatorGroup.data);\n                return namespaceEnabled ? React.createElement(Component, Object.assign({}, this.props)) : React.createElement(NoOperatorGroupMsg, null);\n            }\n        },\n        _a.WrappedComponent = Component,\n        _a;\n};\n/**\n * Logic consistent with https://github.com/operator-framework/operator-lifecycle-manager/blob/4ef074e4207f5518d95ddf8c378036dfc4270dda/pkg/api/apis/operators/v1alpha1/clusterserviceversion.go#L165.\n */\nexport const supports = (set) => (obj) => {\n    const namespaces = _.get(obj.status, 'namespaces') || [];\n    const supportedModes = set.filter(({ supported }) => supported).map(({ type }) => type);\n    if (namespaces.length === 0) {\n        return false;\n    }\n    if (namespaces.length === 1) {\n        if (namespaces[0] === obj.metadata.namespace) {\n            return supportedModes.includes(InstallModeType.InstallModeTypeOwnNamespace);\n        }\n        if (namespaces[0] === '') {\n            return supportedModes.includes(InstallModeType.InstallModeTypeAllNamespaces);\n        }\n        return supportedModes.includes(InstallModeType.InstallModeTypeSingleNamespace);\n    }\n    if (namespaces.length > 1 &&\n        !supportedModes.includes(InstallModeType.InstallModeTypeMultiNamespace)) {\n        return false;\n    }\n    if (namespaces.length > 1) {\n        if (namespaces.includes(obj.metadata.namespace) &&\n            !supportedModes.includes(InstallModeType.InstallModeTypeOwnNamespace)) {\n            return false;\n        }\n        if (namespaces.includes('')) {\n            return false;\n        }\n    }\n    return true;\n};\nexport const isGlobal = (obj) => supports([{ type: InstallModeType.InstallModeTypeAllNamespaces, supported: true }])(obj);\nexport const isSingle = (obj) => supports([{ type: InstallModeType.InstallModeTypeSingleNamespace, supported: true }])(obj);\n/**\n * Determines if a given Operator package has a `Subscription` that makes it available in the given namespace.\n * Finds any `Subscriptions` for the given package, matches them to their `OperatorGroup`, and checks if the `OperatorGroup` is targeting the given namespace or if it is global.\n */\nexport const subscriptionFor = (allSubscriptions = []) => (allGroups = []) => (pkgName) => (ns = '') => {\n    return allSubscriptions\n        .filter((sub) => sub.spec.name === pkgName)\n        .find((sub) => allGroups.some((og) => og.metadata.namespace === sub.metadata.namespace &&\n        (isGlobal(og) || _.get(og.status, 'namespaces', []).includes(ns))));\n};\nexport const installedFor = (allSubscriptions = []) => (allGroups = []) => (pkgName) => (ns = '') => {\n    return !_.isNil(subscriptionFor(allSubscriptions)(allGroups)(pkgName)(ns));\n};\nexport const providedAPIsFor = (og) => _.get(og.metadata.annotations, 'olm.providedAPIs', '')\n    .split(',')\n    .map((api) => ({\n    group: api\n        .split('.')\n        .slice(2)\n        .join('.'),\n    version: api.split('.')[1],\n    kind: api.split('.')[0],\n}))\n    .map(({ group, version, kind }) => referenceForGroupVersionKind(group)(version)(kind));\nNoOperatorGroupMsg.displayName = 'NoOperatorGroupMsg';\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/operator-group.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/operator-group.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport { MsgBox } from '@console/internal/components/utils/status-box';\nimport {\n  K8sResourceKind,\n  GroupVersionKind,\n  referenceForModel,\n  referenceForGroupVersionKind,\n} from '@console/internal/module/k8s';\nimport { AsyncComponent } from '@console/internal/components/utils/async';\nimport { getActiveNamespace } from '@console/internal/actions/ui';\nimport { OperatorGroupModel } from '../models';\nimport { OperatorGroupKind, SubscriptionKind, InstallModeType } from '../types';\n\nexport const targetNamespacesFor = (obj: K8sResourceKind) =>\n  _.get(obj, ['metadata', 'annotations', 'olm.targetNamespaces']);\nexport const operatorNamespaceFor = (obj: K8sResourceKind) =>\n  _.get(obj, ['metadata', 'annotations', 'olm.operatorNamespace']);\nexport const operatorGroupFor = (obj: K8sResourceKind) =>\n  _.get(obj, ['metadata', 'annotations', 'olm.operatorGroup']);\n\nexport const NoOperatorGroupMsg: React.SFC = () => (\n  <MsgBox\n    title=\"Namespace Not Enabled\"\n    detail={\n      <p>\n        The Operator Lifecycle Manager will not watch this namespace because it is not configured\n        with an OperatorGroup.{' '}\n        <Link to={`/ns/${getActiveNamespace()}/${referenceForModel(OperatorGroupModel)}/~new`}>\n          Create one here.\n        </Link>\n      </p>\n    }\n  />\n);\n\ntype RequireOperatorGroupProps = {\n  operatorGroup: { loaded: boolean; data?: OperatorGroupKind[] };\n};\n\nexport const OperatorGroupSelector: React.SFC<OperatorGroupSelectorProps> = (props) => (\n  <AsyncComponent\n    loader={() =>\n      import('@console/internal/components/utils/list-dropdown').then((m) => m.ListDropdown)\n    }\n    onChange={\n      props.onChange ||\n      function() {\n        return null;\n      }\n    }\n    desc=\"Operator Groups\"\n    placeholder=\"Select Operator Group\"\n    selectedKeyKind={referenceForModel(OperatorGroupModel)}\n    dataFilter={props.dataFilter}\n    resources={[\n      {\n        kind: referenceForModel(OperatorGroupModel),\n        fieldSelector: `metadata.name!=${props.excludeName}`,\n      },\n    ]}\n  />\n);\n\nexport const requireOperatorGroup = <P extends RequireOperatorGroupProps>(\n  Component: React.ComponentType<P>,\n) => {\n  return class RequireOperatorGroup extends React.Component<P> {\n    static WrappedComponent = Component;\n\n    render() {\n      const namespaceEnabled =\n        !_.get(this.props.operatorGroup, 'loaded') || !_.isEmpty(this.props.operatorGroup.data);\n\n      return namespaceEnabled ? <Component {...this.props} /> : <NoOperatorGroupMsg />;\n    }\n  } as React.ComponentClass<P> & { WrappedComponent: React.ComponentType<P> };\n};\n\nexport type InstallModeSet = { type: InstallModeType; supported: boolean }[];\n\n/**\n * Logic consistent with https://github.com/operator-framework/operator-lifecycle-manager/blob/4ef074e4207f5518d95ddf8c378036dfc4270dda/pkg/api/apis/operators/v1alpha1/clusterserviceversion.go#L165.\n */\nexport const supports = (set: InstallModeSet) => (obj: OperatorGroupKind) => {\n  const namespaces = _.get(obj.status, 'namespaces') || [];\n  const supportedModes = set.filter(({ supported }) => supported).map(({ type }) => type);\n\n  if (namespaces.length === 0) {\n    return false;\n  }\n  if (namespaces.length === 1) {\n    if (namespaces[0] === obj.metadata.namespace) {\n      return supportedModes.includes(InstallModeType.InstallModeTypeOwnNamespace);\n    }\n    if (namespaces[0] === '') {\n      return supportedModes.includes(InstallModeType.InstallModeTypeAllNamespaces);\n    }\n    return supportedModes.includes(InstallModeType.InstallModeTypeSingleNamespace);\n  }\n  if (\n    namespaces.length > 1 &&\n    !supportedModes.includes(InstallModeType.InstallModeTypeMultiNamespace)\n  ) {\n    return false;\n  }\n  if (namespaces.length > 1) {\n    if (\n      namespaces.includes(obj.metadata.namespace) &&\n      !supportedModes.includes(InstallModeType.InstallModeTypeOwnNamespace)\n    ) {\n      return false;\n    }\n    if (namespaces.includes('')) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\nexport const isGlobal = (obj: OperatorGroupKind) =>\n  supports([{ type: InstallModeType.InstallModeTypeAllNamespaces, supported: true }])(obj);\nexport const isSingle = (obj: OperatorGroupKind) =>\n  supports([{ type: InstallModeType.InstallModeTypeSingleNamespace, supported: true }])(obj);\n\n/**\n * Determines if a given Operator package has a `Subscription` that makes it available in the given namespace.\n * Finds any `Subscriptions` for the given package, matches them to their `OperatorGroup`, and checks if the `OperatorGroup` is targeting the given namespace or if it is global.\n */\nexport const subscriptionFor = (allSubscriptions: SubscriptionKind[] = []) => (\n  allGroups: OperatorGroupKind[] = [],\n) => (pkgName: string) => (ns = '') => {\n  return allSubscriptions\n    .filter((sub) => sub.spec.name === pkgName)\n    .find((sub) =>\n      allGroups.some(\n        (og) =>\n          og.metadata.namespace === sub.metadata.namespace &&\n          (isGlobal(og) || _.get(og.status, 'namespaces', [] as string[]).includes(ns)),\n      ),\n    );\n};\n\nexport const installedFor = (allSubscriptions: SubscriptionKind[] = []) => (\n  allGroups: OperatorGroupKind[] = [],\n) => (pkgName: string) => (ns = '') => {\n  return !_.isNil(subscriptionFor(allSubscriptions)(allGroups)(pkgName)(ns));\n};\n\nexport const providedAPIsFor = (og: OperatorGroupKind) =>\n  _.get(og.metadata.annotations, 'olm.providedAPIs', '')\n    .split(',')\n    .map((api) => ({\n      group: api\n        .split('.')\n        .slice(2)\n        .join('.'),\n      version: api.split('.')[1],\n      kind: api.split('.')[0],\n    }))\n    .map(({ group, version, kind }) => referenceForGroupVersionKind(group)(version)(kind));\n\nexport type OperatorGroupSelectorProps = {\n  onChange?: (name: string, kind: GroupVersionKind) => void;\n  excludeName?: string;\n  dataFilter?: (obj: OperatorGroupKind) => boolean;\n};\n\nNoOperatorGroupMsg.displayName = 'NoOperatorGroupMsg';\n"]}]}