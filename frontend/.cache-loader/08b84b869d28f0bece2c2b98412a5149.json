{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/topology-types.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/topology-types.ts","mtime":1615298458630},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["export var GraphElementType;\n(function (GraphElementType) {\n    GraphElementType[\"node\"] = \"node\";\n    GraphElementType[\"edge\"] = \"edge\";\n    GraphElementType[\"group\"] = \"group\";\n})(GraphElementType || (GraphElementType = {}));\nexport const SHOW_GROUPING_HINT_EVENT = 'show-regroup-hint';\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/topology-types.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/topology-types.ts"],"names":[],"mappings":"AA2IA,MAAM,CAAN,IAAY,gBAIX;AAJD,WAAY,gBAAgB;IAC1B,iCAAa,CAAA;IACb,iCAAa,CAAA;IACb,mCAAe,CAAA;AACjB,CAAC,EAJW,gBAAgB,KAAhB,gBAAgB,QAI3B;AAqHD,MAAM,CAAC,MAAM,wBAAwB,GAAG,mBAAmB,CAAC","sourcesContent":["import { ComponentType } from 'react';\nimport { FirehoseResult, KebabOption } from '@console/internal/components/utils';\nimport { ExtPodKind, OverviewItem, PodControllerOverviewItem } from '@console/shared';\nimport { DeploymentKind, K8sResourceKind, PodKind, EventKind } from '@console/internal/module/k8s';\nimport { Pipeline, PipelineRun } from '../../utils/pipeline-augment';\nimport { Node as TopologyNode, EventListener } from '@console/topology/src/types';\n\nexport type Point = [number, number];\n\nexport interface TopologyDataResources {\n  replicationControllers: FirehoseResult;\n  pods: FirehoseResult<PodKind[]>;\n  deploymentConfigs: FirehoseResult;\n  services: FirehoseResult;\n  routes: FirehoseResult;\n  deployments: FirehoseResult<DeploymentKind[]>;\n  replicaSets: FirehoseResult;\n  buildConfigs: FirehoseResult;\n  builds: FirehoseResult;\n  daemonSets?: FirehoseResult;\n  secrets?: FirehoseResult;\n  ksroutes?: FirehoseResult;\n  configurations?: FirehoseResult;\n  revisions?: FirehoseResult;\n  ksservices?: FirehoseResult;\n  statefulSets?: FirehoseResult;\n  pipelines?: FirehoseResult;\n  pipelineRuns?: FirehoseResult;\n  eventSourceCronjob?: FirehoseResult;\n  eventSourceContainers?: FirehoseResult;\n  eventSourceApiserver?: FirehoseResult;\n  eventSourceCamel?: FirehoseResult;\n  eventSourceKafka?: FirehoseResult;\n  eventSourceSinkbinding?: FirehoseResult;\n  clusterServiceVersions?: FirehoseResult;\n  events?: FirehoseResult<EventKind[]>;\n  // TODO: Plugin?\n  serviceBindingRequests?: FirehoseResult;\n  virtualmachines?: FirehoseResult;\n  virtualmachineinstances?: FirehoseResult;\n  virtualmachinetemplates?: FirehoseResult;\n  migrations?: FirehoseResult;\n  dataVolumes?: FirehoseResult;\n  vmImports?: FirehoseResult;\n}\n\nexport interface Node {\n  id: string;\n  type?: string;\n  name?: string;\n  children?: string[];\n  data?: {};\n}\n\nexport interface Edge {\n  id?: string;\n  type?: string;\n  source: string;\n  target: string;\n  data?: { [key: string]: any };\n}\n\nexport interface Group {\n  id?: string;\n  type?: string;\n  name: string;\n  nodes: string[];\n}\n\nexport interface GraphModel {\n  nodes: Node[];\n  edges: Edge[];\n  groups: Group[];\n}\n\nexport interface TopologyDataMap {\n  [id: string]: TopologyDataObject;\n}\n\nexport interface TopologyDataModel {\n  graph: GraphModel;\n  topology: TopologyDataMap;\n}\n\nexport type TopologyOverviewItem = OverviewItem & {\n  pipelines?: Pipeline[];\n  pipelineRuns?: PipelineRun[];\n};\n\nexport interface TopologyDataObject<D = {}> {\n  id: string;\n  name: string;\n  type: string;\n  resources: OverviewItem;\n  pods?: ExtPodKind[];\n  data: D;\n  operatorBackedService: boolean;\n  groupResources?: TopologyDataObject[];\n}\n\nexport interface TopologyApplicationObject {\n  id: string;\n  name: string;\n  resources: TopologyDataObject[];\n}\n\nexport interface ConnectedWorkloadPipeline {\n  pipeline: Pipeline;\n  pipelineRuns: PipelineRun[];\n}\n\nexport interface WorkloadData {\n  url?: string;\n  editURL?: string;\n  vcsURI?: string;\n  builderImage?: string;\n  kind?: string;\n  isKnativeResource?: boolean;\n  build: K8sResourceKind;\n  donutStatus: DonutStatusData;\n  connectedPipeline: ConnectedWorkloadPipeline;\n}\n\nexport interface DonutStatusData {\n  pods: ExtPodKind[];\n  current: PodControllerOverviewItem;\n  previous: PodControllerOverviewItem;\n  dc: K8sResourceKind;\n  isRollingOut: boolean;\n}\n\nexport interface GraphApi {\n  zoomIn(): void;\n  zoomOut(): void;\n  zoomReset(): void;\n  zoomFit(): void;\n  resetLayout(): void;\n}\n\nexport enum GraphElementType {\n  node = 'node',\n  edge = 'edge',\n  group = 'group',\n}\n\nexport interface Selectable {\n  selected?: boolean;\n  onSelect?(): void;\n}\n\nexport interface GroupElementInterface {\n  isPointInGroup: (p: Point) => boolean;\n}\n\nexport type ViewNode = {\n  id: string;\n  type?: string;\n  x: number;\n  y: number;\n  size: number;\n  name: string;\n  fx?: number;\n  fy?: number;\n};\n\nexport type ViewEdge = {\n  id: string;\n  type?: string;\n  nodeSize: number;\n  source: ViewNode;\n  target: ViewNode;\n};\n\nexport type ViewGroup = {\n  id: string;\n  type?: string;\n  name: string;\n  nodes: ViewNode[];\n  element?: GroupElementInterface;\n};\n\nexport type NodeProps<D = {}> = ViewNode &\n  Selectable & {\n    data?: TopologyDataObject<D>;\n    dragActive?: boolean;\n    isDragging?: boolean;\n    isTarget?: boolean;\n    onHover?(hovered: boolean): void;\n  };\n\nexport type DragConnectionProps = NodeProps & {\n  dragX: number;\n  dragY: number;\n  isDragging?: boolean;\n  onHover?(hovered: boolean): void;\n};\n\nexport type EdgeProps<D = {}> = ViewEdge & {\n  data?: TopologyDataObject<D>;\n  dragActive?: boolean;\n  isDragging?: boolean;\n  targetArrowRef?(ref: SVGPathElement): void;\n  onRemove?: () => void;\n};\n\nexport type GroupProps = ViewGroup &\n  Selectable & {\n    dragActive?: boolean;\n    dropSource?: boolean;\n    dropTarget?: boolean;\n    groupRef(element: GroupElementInterface): void;\n  };\n\nexport type TrafficData = {\n  nodes: KialiNode[];\n  edges: KialiEdge[];\n};\n\nexport type KialiNode = {\n  data: {\n    id: string;\n    nodeType: string;\n    namespace: string;\n    workload: string;\n    app: string;\n    version?: string;\n    destServices?: { [key: string]: any }[];\n    traffic?: { [key: string]: any }[];\n  };\n};\n\nexport type KialiEdge = {\n  data: {\n    id: string;\n    source: string;\n    target: string;\n    traffic: { [key: string]: any };\n  };\n};\n\nexport type ConnectsToData = { apiVersion: string; kind: string; name: string };\n\nexport type NodeProvider = (type: string) => ComponentType<NodeProps>;\n\nexport type EdgeProvider = (type: string) => ComponentType<EdgeProps>;\n\nexport type GroupProvider = (type: string) => ComponentType<GroupProps>;\n\nexport type ActionProvider = (type: GraphElementType, id: string) => KebabOption[];\n\nexport type ContextMenuProvider = {\n  open: (type: GraphElementType, id: string, eventX: number, eventY: number) => boolean;\n};\n\nexport type GraphData = {\n  namespace: string;\n  createResourceAccess: string[];\n  eventSourceEnabled: boolean;\n};\n\nexport const SHOW_GROUPING_HINT_EVENT = 'show-regroup-hint';\nexport type ShowGroupingHintEventListener = EventListener<[TopologyNode, string]>;\n"]}]}