{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/helm/HelmReleaseRollbackPage.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/helm/HelmReleaseRollbackPage.tsx","mtime":1615298458610},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as React from 'react';\nimport Helmet from 'react-helmet';\nimport { Formik } from 'formik';\nimport { PageBody } from '@console/shared';\nimport { coFetchJSON } from '@console/internal/co-fetch';\nimport { PageHeading, history, getQueryArgument } from '@console/internal/components/utils';\nimport { HelmActionType } from './helm-types';\nimport { getHelmActionConfig } from './helm-utils';\nimport NamespacedPage, { NamespacedPageVariants } from '../NamespacedPage';\nimport HelmReleaseRollbackForm from './form/HelmReleaseRollbackForm';\nconst HelmReleaseRollbackPage = ({ match }) => {\n    const { releaseName, ns: namespace } = match.params;\n    const actionOrigin = getQueryArgument('actionOrigin');\n    const [releaseHistory, setReleaseHistory] = React.useState(null);\n    const config = React.useMemo(() => getHelmActionConfig(HelmActionType.Rollback, releaseName, namespace, actionOrigin), [actionOrigin, namespace, releaseName]);\n    React.useEffect(() => {\n        let ignore = false;\n        const fetchReleaseHistory = () => __awaiter(void 0, void 0, void 0, function* () {\n            let res;\n            try {\n                res = yield coFetchJSON(config.helmReleaseApi);\n            }\n            catch (_a) { } // eslint-disable-line no-empty\n            if (ignore)\n                return;\n            (res === null || res === void 0 ? void 0 : res.length) > 0 && setReleaseHistory(res);\n        });\n        fetchReleaseHistory();\n        return () => {\n            ignore = true;\n        };\n    }, [config.helmReleaseApi]);\n    const initialValues = {\n        revision: -1,\n    };\n    const handleSubmit = (values, actions) => {\n        actions.setStatus({ isSubmitting: true });\n        const payload = {\n            namespace,\n            name: releaseName,\n            version: values.revision,\n        };\n        config\n            .fetch('/api/helm/release', payload, null, -1)\n            .then(() => {\n            actions.setStatus({ isSubmitting: false });\n            history.push(config.redirectURL);\n        })\n            .catch((err) => {\n            actions.setSubmitting(false);\n            actions.setStatus({ submitError: err.message });\n        });\n    };\n    return (React.createElement(NamespacedPage, { variant: NamespacedPageVariants.light, disabled: true, hideApplications: true },\n        React.createElement(Helmet, null,\n            React.createElement(\"title\", null, config.title)),\n        React.createElement(PageHeading, { title: config.title },\n            \"Select the version to rollback \",\n            React.createElement(\"strong\", null, releaseName),\n            \" to, from the table below:\"),\n        React.createElement(PageBody, null,\n            React.createElement(Formik, { initialValues: initialValues, onSubmit: handleSubmit, onReset: history.goBack }, (props) => React.createElement(HelmReleaseRollbackForm, Object.assign({}, props, { releaseHistory: releaseHistory }))))));\n};\nexport default HelmReleaseRollbackPage;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/helm/HelmReleaseRollbackPage.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/helm/HelmReleaseRollbackPage.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport Helmet from 'react-helmet';\nimport { Formik } from 'formik';\nimport { RouteComponentProps } from 'react-router';\nimport { PageBody } from '@console/shared';\nimport { coFetchJSON } from '@console/internal/co-fetch';\nimport { PageHeading, history, getQueryArgument } from '@console/internal/components/utils';\n\nimport { HelmRelease, HelmActionType, HelmActionOrigins } from './helm-types';\nimport { getHelmActionConfig } from './helm-utils';\nimport NamespacedPage, { NamespacedPageVariants } from '../NamespacedPage';\nimport HelmReleaseRollbackForm from './form/HelmReleaseRollbackForm';\n\ntype HelmReleaseRollbackPageProps = RouteComponentProps<{\n  ns?: string;\n  releaseName?: string;\n}>;\n\ntype HelmRollbackFormData = {\n  revision: number;\n};\n\nconst HelmReleaseRollbackPage: React.FC<HelmReleaseRollbackPageProps> = ({ match }) => {\n  const { releaseName, ns: namespace } = match.params;\n  const actionOrigin = getQueryArgument('actionOrigin') as HelmActionOrigins;\n  const [releaseHistory, setReleaseHistory] = React.useState<HelmRelease[]>(null);\n\n  const config = React.useMemo(\n    () => getHelmActionConfig(HelmActionType.Rollback, releaseName, namespace, actionOrigin),\n    [actionOrigin, namespace, releaseName],\n  );\n\n  React.useEffect(() => {\n    let ignore = false;\n\n    const fetchReleaseHistory = async () => {\n      let res: HelmRelease[];\n      try {\n        res = await coFetchJSON(config.helmReleaseApi);\n      } catch {} // eslint-disable-line no-empty\n      if (ignore) return;\n\n      res?.length > 0 && setReleaseHistory(res);\n    };\n\n    fetchReleaseHistory();\n\n    return () => {\n      ignore = true;\n    };\n  }, [config.helmReleaseApi]);\n\n  const initialValues: HelmRollbackFormData = {\n    revision: -1,\n  };\n\n  const handleSubmit = (values, actions) => {\n    actions.setStatus({ isSubmitting: true });\n    const payload = {\n      namespace,\n      name: releaseName,\n      version: values.revision,\n    };\n\n    config\n      .fetch('/api/helm/release', payload, null, -1)\n      .then(() => {\n        actions.setStatus({ isSubmitting: false });\n        history.push(config.redirectURL);\n      })\n      .catch((err) => {\n        actions.setSubmitting(false);\n        actions.setStatus({ submitError: err.message });\n      });\n  };\n\n  return (\n    <NamespacedPage variant={NamespacedPageVariants.light} disabled hideApplications>\n      <Helmet>\n        <title>{config.title}</title>\n      </Helmet>\n      <PageHeading title={config.title}>\n        Select the version to rollback <strong>{releaseName}</strong> to, from the table below:\n      </PageHeading>\n      <PageBody>\n        <Formik initialValues={initialValues} onSubmit={handleSubmit} onReset={history.goBack}>\n          {(props) => <HelmReleaseRollbackForm {...props} releaseHistory={releaseHistory} />}\n        </Formik>\n      </PageBody>\n    </NamespacedPage>\n  );\n};\n\nexport default HelmReleaseRollbackPage;\n"]}]}