{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/hooks/use-collision-checker.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/hooks/use-collision-checker.ts","mtime":1615298458660},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["/* eslint-disable react-hooks/exhaustive-deps */\nimport * as React from 'react';\nexport const useCollisionChecker = (entity, isEqual) => {\n    const [initialEntity, setInitialEntity] = React.useState(entity);\n    const [showCollisionAlert, setCollisionAlert] = React.useState(false);\n    const onReload = React.useCallback(() => {\n        setInitialEntity(entity);\n        setCollisionAlert(false);\n    }, [entity]);\n    React.useEffect(() => {\n        if (!isEqual(initialEntity, entity)) {\n            setCollisionAlert(true);\n        }\n    }, [initialEntity, entity]);\n    return [showCollisionAlert, onReload];\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/hooks/use-collision-checker.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/hooks/use-collision-checker.ts"],"names":[],"mappings":"AAAA,gDAAgD;AAChD,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,MAAM,CAAC,MAAM,mBAAmB,GAAG,CACjC,MAAS,EACT,OAAqD,EAC1B,EAAE;IAC7B,MAAM,CAAC,aAAa,EAAE,gBAAgB,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAI,MAAM,CAAC,CAAC;IACpE,MAAM,CAAC,kBAAkB,EAAE,iBAAiB,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAU,KAAK,CAAC,CAAC;IAE/E,MAAM,QAAQ,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE;QACtC,gBAAgB,CAAC,MAAM,CAAC,CAAC;QACzB,iBAAiB,CAAC,KAAK,CAAC,CAAC;IAC3B,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;IAEb,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,IAAI,CAAC,OAAO,CAAC,aAAa,EAAE,MAAM,CAAC,EAAE;YACnC,iBAAiB,CAAC,IAAI,CAAC,CAAC;SACzB;IACH,CAAC,EAAE,CAAC,aAAa,EAAE,MAAM,CAAC,CAAC,CAAC;IAE5B,OAAO,CAAC,kBAAkB,EAAE,QAAQ,CAAC,CAAC;AACxC,CAAC,CAAC","sourcesContent":["/* eslint-disable react-hooks/exhaustive-deps */\nimport * as React from 'react';\n\nexport const useCollisionChecker = <T>(\n  entity: T,\n  isEqual: (outdatedEntity: T, newEntity: T) => boolean,\n): useCollisionCheckerValues => {\n  const [initialEntity, setInitialEntity] = React.useState<T>(entity);\n  const [showCollisionAlert, setCollisionAlert] = React.useState<boolean>(false);\n\n  const onReload = React.useCallback(() => {\n    setInitialEntity(entity);\n    setCollisionAlert(false);\n  }, [entity]);\n\n  React.useEffect(() => {\n    if (!isEqual(initialEntity, entity)) {\n      setCollisionAlert(true);\n    }\n  }, [initialEntity, entity]);\n\n  return [showCollisionAlert, onReload];\n};\n\ntype useCollisionCheckerValues = [\n  boolean, // showCollisionAlert\n  () => void, // onReload\n];\n"]}]}