{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/types.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/types.ts","mtime":1615298458710},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["export var AnchorEnd;\n(function (AnchorEnd) {\n    AnchorEnd[AnchorEnd[\"target\"] = 0] = \"target\";\n    AnchorEnd[AnchorEnd[\"source\"] = 1] = \"source\";\n    AnchorEnd[AnchorEnd[\"both\"] = 2] = \"both\";\n})(AnchorEnd || (AnchorEnd = {}));\nexport var NodeShape;\n(function (NodeShape) {\n    NodeShape[NodeShape[\"circle\"] = 0] = \"circle\";\n    NodeShape[NodeShape[\"rect\"] = 1] = \"rect\";\n})(NodeShape || (NodeShape = {}));\nexport var ModelKind;\n(function (ModelKind) {\n    ModelKind[\"graph\"] = \"graph\";\n    ModelKind[\"node\"] = \"node\";\n    ModelKind[\"edge\"] = \"edge\";\n})(ModelKind || (ModelKind = {}));\nexport const isGraph = (element) => {\n    return element && element.getKind() === ModelKind.graph;\n};\nexport const isNode = (element) => {\n    return element && element.getKind() === ModelKind.node;\n};\nexport const isEdge = (element) => {\n    return element && element.getKind() === ModelKind.edge;\n};\nexport const ADD_CHILD_EVENT = 'element-add-child';\nexport const ELEMENT_VISIBILITY_CHANGE_EVENT = 'element-visibility-change';\nexport const REMOVE_CHILD_EVENT = 'element-remove-child';\nexport const NODE_COLLAPSE_CHANGE_EVENT = 'node-collapse-change';\nexport const GRAPH_LAYOUT_END_EVENT = 'graph-layout-end';\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/types.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/types.ts"],"names":[],"mappings":"AAoBA,MAAM,CAAN,IAAY,SAIX;AAJD,WAAY,SAAS;IACnB,6CAAM,CAAA;IACN,6CAAM,CAAA;IACN,yCAAI,CAAA;AACN,CAAC,EAJW,SAAS,KAAT,SAAS,QAIpB;AAMD,MAAM,CAAN,IAAY,SAGX;AAHD,WAAY,SAAS;IACnB,6CAAM,CAAA;IACN,yCAAI,CAAA;AACN,CAAC,EAHW,SAAS,KAAT,SAAS,QAGpB;AAED,MAAM,CAAN,IAAY,SAIX;AAJD,WAAY,SAAS;IACnB,4BAAe,CAAA;IACf,0BAAa,CAAA;IACb,0BAAa,CAAA;AACf,CAAC,EAJW,SAAS,KAAT,SAAS,QAIpB;AA+ID,MAAM,CAAC,MAAM,OAAO,GAAG,CAAC,OAAqB,EAAoB,EAAE;IACjE,OAAO,OAAO,IAAI,OAAO,CAAC,OAAO,EAAE,KAAK,SAAS,CAAC,KAAK,CAAC;AAC1D,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,MAAM,GAAG,CAAC,OAAqB,EAAmB,EAAE;IAC/D,OAAO,OAAO,IAAI,OAAO,CAAC,OAAO,EAAE,KAAK,SAAS,CAAC,IAAI,CAAC;AACzD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,MAAM,GAAG,CAAC,OAAqB,EAAmB,EAAE;IAC/D,OAAO,OAAO,IAAI,OAAO,CAAC,OAAO,EAAE,KAAK,SAAS,CAAC,IAAI,CAAC;AACzD,CAAC,CAAC;AAmDF,MAAM,CAAC,MAAM,eAAe,GAAG,mBAAmB,CAAC;AACnD,MAAM,CAAC,MAAM,+BAA+B,GAAG,2BAA2B,CAAC;AAC3E,MAAM,CAAC,MAAM,kBAAkB,GAAG,sBAAsB,CAAC;AACzD,MAAM,CAAC,MAAM,0BAA0B,GAAG,sBAAsB,CAAC;AACjE,MAAM,CAAC,MAAM,sBAAsB,GAAG,kBAAkB,CAAC","sourcesContent":["import { ComponentType } from 'react';\nimport Point from './geom/Point';\nimport Dimensions from './geom/Dimensions';\nimport Rect from './geom/Rect';\nimport { Padding, Translatable } from './geom/types';\n\n// x, y\nexport type PointTuple = [number, number];\n\nexport interface Layout {\n  layout(): void;\n  destroy(): void;\n}\n\nexport type Model = {\n  graph?: GraphModel;\n  nodes?: NodeModel[];\n  edges?: EdgeModel[];\n};\n\nexport enum AnchorEnd {\n  target,\n  source,\n  both,\n}\n\nexport type NodeStyle = {\n  padding?: Padding;\n};\n\nexport enum NodeShape {\n  circle,\n  rect,\n}\n\nexport enum ModelKind {\n  graph = 'graph',\n  node = 'node',\n  edge = 'edge',\n}\n\nexport interface ElementModel {\n  id: string;\n  type: string;\n  label?: string;\n  visible?: boolean;\n  children?: string[];\n  data?: any;\n  style?: { [key: string]: any };\n}\n\nexport interface NodeModel extends ElementModel {\n  x?: number;\n  y?: number;\n  width?: number;\n  height?: number;\n  group?: boolean;\n  shape?: NodeShape;\n  collapsed?: boolean;\n}\n\nexport interface EdgeModel extends ElementModel {\n  source?: string;\n  target?: string;\n  bendpoints?: PointTuple[];\n}\n\n// Scale extent: [min scale, max scale]\nexport type ScaleExtent = [number, number];\n\nexport interface GraphModel extends ElementModel {\n  layout?: string;\n  x?: number;\n  y?: number;\n  scale?: number;\n  scaleExtent?: ScaleExtent;\n  maxScale?: number;\n  layers?: string[];\n}\n\nexport interface Anchor {\n  getLocation(reference: Point): Point;\n  getReferencePoint(): Point;\n}\n\nexport interface GraphElement<E extends ElementModel = ElementModel, D = any> extends WithState {\n  destroy(): void;\n  getKind(): ModelKind;\n  getLabel(): string;\n  setLabel(label: string): void;\n  getOrderKey(): number[];\n  getController(): Controller;\n  setController(controller?: Controller): void;\n  getGraph(): Graph;\n  getParent(): GraphElement;\n  hasParent(): boolean;\n  setParent(parent: GraphElement | undefined): void;\n  getId(): string;\n  setId(id: string): void;\n  getType(): string;\n  setType(type: string): void;\n  setVisible(visible: boolean): void;\n  isVisible(): boolean;\n  getData(): D | undefined;\n  setData(data: D | undefined): void;\n  getChildren(): GraphElement[];\n  insertChild(child: GraphElement, index: number): void;\n  appendChild(child: GraphElement): void;\n  removeChild(child: GraphElement): void;\n  remove(): void;\n  setModel(model: E): void;\n  raise(): void;\n  getStyle<T extends {}>(): T;\n  translateToAbsolute(t: Translatable): void;\n  translateFromAbsolute(t: Translatable): void;\n  translateToParent(t: Translatable): void;\n  translateFromParent(t: Translatable): void;\n}\n\nexport interface Node<E extends NodeModel = NodeModel, D = any> extends GraphElement<E, D> {\n  getAnchor(end: AnchorEnd, type?: string): Anchor;\n  setAnchor(anchor: Anchor, end?: AnchorEnd, type?: string): void;\n  getNodes(): Node[];\n  // TODO return an immutable bounds, position, dimensions?\n  getBounds(): Rect;\n  setBounds(bounds: Rect): void;\n  getPosition(): Point;\n  setPosition(location: Point): void;\n  getDimensions(): Dimensions;\n  setDimensions(dimensions: Dimensions): void;\n  isGroup(): boolean;\n  setGroup(group: boolean): void;\n  isCollapsed(): boolean;\n  setCollapsed(collapsed: boolean): void;\n  getNodeShape(): NodeShape;\n  setNodeShape(shape: NodeShape): void;\n  getSourceEdges(): Edge[];\n  getTargetEdges(): Edge[];\n}\n\nexport interface Edge<E extends EdgeModel = EdgeModel, D = any> extends GraphElement<E, D> {\n  getSource(): Node;\n  setSource(source: Node): void;\n  getTarget(): Node;\n  setTarget(target: Node): void;\n  getSourceAnchorNode(): Node;\n  getTargetAnchorNode(): Node;\n  getStartPoint(): Point;\n  setStartPoint(x?: number, y?: number): void;\n  getEndPoint(): Point;\n  setEndPoint(x?: number, y?: number): void;\n  getBendpoints(): Point[];\n  setBendpoints(points: Point[]): void;\n  removeBendpoint(point: Point | number): void;\n}\n\nexport interface Graph<E extends GraphModel = GraphModel, D = any> extends GraphElement<E, D> {\n  getNodes(): Node[];\n  getEdges(): Edge[];\n  getBounds(): Rect;\n  setBounds(bounds: Rect): void;\n  getPosition(): Point;\n  setPosition(location: Point): void;\n  getDimensions(): Dimensions;\n  setDimensions(dimensions: Dimensions): void;\n  getScaleExtent(): ScaleExtent;\n  setScaleExtent(scaleExtent: ScaleExtent): void;\n  getScale(): number;\n  setScale(scale: number): void;\n  getLayout(): string | undefined;\n  setLayout(type: string | undefined): void;\n  layout(): void;\n  getLayers(): string[];\n  setLayers(layers: string[]): void;\n\n  // viewport operations\n  reset(): void;\n  scaleBy(scale: number, location?: Point): void;\n  fit(padding?: number): void;\n  panIntoView(element: Node, options?: { offset?: number; minimumVisible?: number }): void;\n}\n\nexport const isGraph = (element: GraphElement): element is Graph => {\n  return element && element.getKind() === ModelKind.graph;\n};\n\nexport const isNode = (element: GraphElement): element is Node => {\n  return element && element.getKind() === ModelKind.node;\n};\n\nexport const isEdge = (element: GraphElement): element is Edge => {\n  return element && element.getKind() === ModelKind.edge;\n};\n\nexport type EventListener<Args extends any[] = any[]> = (...args: Args) => void;\n\nexport type State = { [key: string]: any };\n\nexport interface WithState {\n  getState<S extends {} = {}>(): S;\n  setState(state: State): void;\n}\n\nexport type LayoutFactory = (type: string, graph: Graph) => Layout | undefined;\n\nexport type ComponentFactory = (\n  kind: ModelKind,\n  type: string,\n) => ComponentType<{ element: GraphElement }> | undefined;\n\nexport type ElementFactory = (kind: ModelKind, type: string) => GraphElement | undefined;\n\nexport interface Controller extends WithState {\n  getStore<S extends {} = {}>(): S;\n  fromModel(model: Model): void;\n  getGraph(): Graph;\n  setGraph(graph: Graph): void;\n  getLayout(type: string | undefined): Layout | undefined;\n  getElementById(id: string): GraphElement | undefined;\n  getNodeById(id: string): Node | undefined;\n  getEdgeById(id: string): Edge | undefined;\n  addElement(element: GraphElement): void;\n  removeElement(element: GraphElement): void;\n  getComponent(kind: ModelKind, type: string): ComponentType<{ element: GraphElement }>;\n  registerLayoutFactory(factory: LayoutFactory): void;\n  registerComponentFactory(factory: ComponentFactory): void;\n  registerElementFactory(factory: ElementFactory): void;\n  addEventListener<L extends EventListener = EventListener>(type: string, listener: L): Controller;\n  removeEventListener(type: string, listener: EventListener): Controller;\n  fireEvent(type: string, ...args: any): void;\n  getElements(): GraphElement[];\n}\n\nexport type ElementEvent = { target: GraphElement };\nexport type ElementVisibilityChangeEvent = ElementEvent & { visible: boolean };\n\nexport type ElementChildEventListener = EventListener<[ElementEvent & { child: GraphElement }]>;\nexport type ElementVisibilityChangeEventListener = EventListener<[ElementVisibilityChangeEvent]>;\n\nexport type NodeCollapseChangeEventListener = EventListener<[{ node: Node }]>;\n\nexport type GraphLayoutEndEventListener = EventListener<[{ graph: Graph }]>;\n\nexport const ADD_CHILD_EVENT = 'element-add-child';\nexport const ELEMENT_VISIBILITY_CHANGE_EVENT = 'element-visibility-change';\nexport const REMOVE_CHILD_EVENT = 'element-remove-child';\nexport const NODE_COLLAPSE_CHANGE_EVENT = 'node-collapse-change';\nexport const GRAPH_LAYOUT_END_EVENT = 'graph-layout-end';\n"]}]}