{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/form/tasks/step-modal.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/form/tasks/step-modal.tsx","mtime":1618309685320},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { Section } from '../../utils/section';\nimport { RadioGroup } from '../../utils/radio';\n// import { ResourceListDropdown } from './utils/resource-list-dropdown';\nimport { Dropdown } from '../../utils/dropdown';\nimport { TextInput } from '../../utils/text-input';\nimport { ListView } from '../../utils/list-view';\nimport { useWatch } from 'react-hook-form';\nimport { Button } from '@patternfly/react-core';\nexport const StepModal = ({ methods, step }) => {\n    const ImageRadioList = [\n        // RadioGroup 컴포넌트에 넣어줄 items\n        {\n            title: 'Image Registry',\n            value: 'registry',\n        },\n        {\n            title: '직접 입력',\n            value: 'manual',\n        },\n    ];\n    let volumeItems = {};\n    // volume 있는지 여부\n    let isVolumeExist = () => {\n        let volumeList = methods.getValues('volume');\n        if ((volumeList === null || volumeList === void 0 ? void 0 : volumeList.length) > 0) {\n            volumeList.forEach(cur => {\n                volumeItems[cur.name] = cur.name;\n            });\n            return true;\n        }\n        return false;\n    };\n    const parameterListHeaderFragment = React.createElement(React.Fragment, null);\n    const parameterListItemRenderer = (register, name, item, index, ListActions, ListDefaultIcons) => (React.createElement(\"div\", { className: \"row\", key: item.id },\n        React.createElement(\"div\", { className: \"col-xs-11 pairs-list__value-field\" },\n            React.createElement(TextInput, { id: `parameterList${index}.parameter`, inputClassName: \"col-md-12\", methods: methods, placeholder: '-c' })),\n        React.createElement(\"div\", { className: \"col-xs-1 pairs-list__action\" },\n            React.createElement(Button, { type: \"button\", \"data-test-id\": \"pairs-list__delete-btn\", className: \"pairs-list__span-btns\", onClick: () => {\n                    ListActions.remove(index);\n                }, variant: \"plain\" }, ListDefaultIcons.deleteIcon))));\n    const envListHeaderFragment = React.createElement(React.Fragment, null);\n    const envListItemRenderer = (register, name, item, index, ListActions, ListDefaultIcons) => (React.createElement(\"div\", { className: \"row\", key: item.id },\n        React.createElement(\"div\", { className: \"col-xs-11 pairs-list__value-field\", style: { display: 'flex' } },\n            React.createElement(TextInput, { id: `envList${index}.envKey`, inputClassName: \"col-md-6\", methods: methods, placeholder: '키' }),\n            React.createElement(\"span\", { style: { margin: '0 5px' } }, \"=\"),\n            React.createElement(TextInput, { id: `envList${index}.envValue`, inputClassName: \"col-md-6\", methods: methods, placeholder: '값' })),\n        React.createElement(\"div\", { className: \"col-xs-1 pairs-list__action\" },\n            React.createElement(Button, { type: \"button\", \"data-test-id\": \"pairs-list__delete-btn\", className: \"pairs-list__span-btns\", onClick: () => {\n                    ListActions.remove(index);\n                }, variant: \"plain\" }, ListDefaultIcons.deleteIcon))));\n    let template;\n    // modify 기능 용\n    let target = document.getElementById('step-list');\n    let modalType = target && [...target.childNodes].some(cur => cur['dataset']['modify'] === 'true') ? 'modify' : 'add';\n    if (modalType === 'modify') {\n        let list = target.childNodes;\n        list.forEach((cur, idx) => {\n            if (cur['dataset']['modify'] === 'true') {\n                template = step[idx];\n            }\n        });\n    }\n    // radio toggle용\n    const imageToggle = useWatch({\n        control: methods.control,\n        name: 'image-toggle',\n        defaultValue: template ? template.type : 'registry',\n    });\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Section, { label: \"Name\", id: \"step-name\", isRequired: true },\n            React.createElement(TextInput, { id: \"name\", inputClassName: \"col-md-12\", methods: methods, defaultValue: modalType === 'modify' ? template.name : '' })),\n        React.createElement(Section, { label: \"\\uC774\\uBBF8\\uC9C0\", id: \"step-image-toggle\" },\n            React.createElement(RadioGroup, { methods: methods, name: \"image-toggle\" // 서버에 보낼 데이터에서의 path (필수)\n                , items: ImageRadioList, inline: true })),\n        imageToggle === 'registry' && React.createElement(\"p\", null, \"\\uB808\\uC9C0\\uC2A4\\uD2B8\\uB9AC\"),\n        imageToggle === 'manual' && (React.createElement(React.Fragment, null,\n            React.createElement(Section, { label: \"\", id: \"step-manual-image\" },\n                React.createElement(TextInput, { id: \"manualImage\", inputClassName: \"col-md-12\", methods: methods, defaultValue: modalType === 'modify' ? template.manualImage : '' })),\n            React.createElement(Section, { label: \"\\uCEE4\\uB9E8\\uB4DC\", id: \"step-manual-command\" },\n                React.createElement(TextInput, { id: \"manualCommand\", inputClassName: \"col-md-12\", methods: methods, defaultValue: modalType === 'modify' ? template.manualCommand : '' })))),\n        React.createElement(Section, { label: \"\\uC778\\uC218\", id: \"step-parameter\" },\n            React.createElement(ListView, { name: \"parameterList\", methods: methods, addButtonText: \"\\uCD94\\uAC00\", headerFragment: parameterListHeaderFragment, itemRenderer: parameterListItemRenderer, defaultItem: { parameter: '' } })),\n        React.createElement(Section, { label: \"\\uD658\\uACBD \\uBCC0\\uC218\", id: \"step-parameter\" },\n            React.createElement(ListView, { name: \"envList\", methods: methods, addButtonText: \"\\uCD94\\uAC00\", headerFragment: envListHeaderFragment, itemRenderer: envListItemRenderer, defaultItem: { envKey: '', envValue: '' } })),\n        React.createElement(Section, { label: \"\\uB9C8\\uC6B4\\uD2B8 \\uACBD\\uB85C\", id: \"step-mountPath\" }, !isVolumeExist() ? ('마운트할 볼륨을 먼저 추가해 주세요.') : (React.createElement(React.Fragment, null,\n            React.createElement(Dropdown, { name: \"selectedVolume\", className: \"btn-group\", title: \"\\uBCFC\\uB968 \\uC120\\uD0DD\" // 드롭다운 title 지정\n                , methods: methods, items: volumeItems, style: { display: 'block' }, buttonClassName: \"dropdown-btn col-md-12\" // 선택된 아이템 보여주는 button (title) 부분 className\n                , itemClassName: \"dropdown-item\" // 드롭다운 아이템 리스트 전체의 className - 각 row를 의미하는 것은 아님\n             }),\n            React.createElement(TextInput, { id: \"mountPath\", inputClassName: \"col-md-12\", methods: methods, placeholder: \"\\uB9C8\\uC6B4\\uD2B8 \\uACBD\\uB85C\\uB97C \\uC785\\uB825\\uD574 \\uC8FC\\uC138\\uC694.\", defaultValue: modalType === 'modify' ? template.mountPath : '' }))))));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/form/tasks/step-modal.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/form/tasks/step-modal.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Section } from '../../utils/section';\nimport { RadioGroup } from '../../utils/radio';\n// import { ResourceListDropdown } from './utils/resource-list-dropdown';\nimport { Dropdown } from '../../utils/dropdown';\nimport { TextInput } from '../../utils/text-input';\nimport { ListView } from '../../utils/list-view';\nimport { useWatch } from 'react-hook-form';\nimport { Button } from '@patternfly/react-core';\n\nexport const StepModal: React.FC<StepModalProps> = ({ methods, step }) => {\n  const ImageRadioList = [\n    // RadioGroup 컴포넌트에 넣어줄 items\n    {\n      title: 'Image Registry',\n      value: 'registry',\n    },\n    {\n      title: '직접 입력',\n      value: 'manual',\n    },\n  ];\n\n  let volumeItems = {};\n  // volume 있는지 여부\n  let isVolumeExist = () => {\n    let volumeList = methods.getValues('volume');\n    if (volumeList?.length > 0) {\n      volumeList.forEach(cur => {\n        volumeItems[cur.name] = cur.name;\n      });\n      return true;\n    }\n    return false;\n  };\n\n  const parameterListHeaderFragment = <></>;\n  const parameterListItemRenderer = (register, name, item, index, ListActions, ListDefaultIcons) => (\n    <div className=\"row\" key={item.id}>\n      <div className=\"col-xs-11 pairs-list__value-field\">\n        <TextInput id={`parameterList${index}.parameter`} inputClassName=\"col-md-12\" methods={methods} placeholder={'-c'} />\n      </div>\n      <div className=\"col-xs-1 pairs-list__action\">\n        <Button\n          type=\"button\"\n          data-test-id=\"pairs-list__delete-btn\"\n          className=\"pairs-list__span-btns\"\n          onClick={() => {\n            ListActions.remove(index);\n          }}\n          variant=\"plain\"\n        >\n          {ListDefaultIcons.deleteIcon}\n        </Button>\n      </div>\n    </div>\n  );\n  const envListHeaderFragment = <></>;\n  const envListItemRenderer = (register, name, item, index, ListActions, ListDefaultIcons) => (\n    <div className=\"row\" key={item.id}>\n      <div className=\"col-xs-11 pairs-list__value-field\" style={{ display: 'flex' }}>\n        <TextInput id={`envList${index}.envKey`} inputClassName=\"col-md-6\" methods={methods} placeholder={'키'} />\n        <span style={{ margin: '0 5px' }}>=</span>\n        <TextInput id={`envList${index}.envValue`} inputClassName=\"col-md-6\" methods={methods} placeholder={'값'} />\n      </div>\n      <div className=\"col-xs-1 pairs-list__action\">\n        <Button\n          type=\"button\"\n          data-test-id=\"pairs-list__delete-btn\"\n          className=\"pairs-list__span-btns\"\n          onClick={() => {\n            ListActions.remove(index);\n          }}\n          variant=\"plain\"\n        >\n          {ListDefaultIcons.deleteIcon}\n        </Button>\n      </div>\n    </div>\n  );\n\n  let template;\n\n  // modify 기능 용\n  let target = document.getElementById('step-list');\n  let modalType = target && [...target.childNodes].some(cur => cur['dataset']['modify'] === 'true') ? 'modify' : 'add';\n  if (modalType === 'modify') {\n    let list = target.childNodes;\n    list.forEach((cur, idx) => {\n      if (cur['dataset']['modify'] === 'true') {\n        template = step[idx];\n      }\n    });\n  }\n\n  // radio toggle용\n  const imageToggle = useWatch({\n    control: methods.control,\n    name: 'image-toggle',\n    defaultValue: template ? template.type : 'registry',\n  });\n\n  return (\n    <>\n      <Section label=\"Name\" id=\"step-name\" isRequired={true}>\n        <TextInput id=\"name\" inputClassName=\"col-md-12\" methods={methods} defaultValue={modalType === 'modify' ? template.name : ''} />\n      </Section>\n      <Section label=\"이미지\" id=\"step-image-toggle\">\n        <RadioGroup\n          methods={methods}\n          name=\"image-toggle\" // 서버에 보낼 데이터에서의 path (필수)\n          items={ImageRadioList} // [{title: '', value: ''}] (필수)\n          inline={true} // inline속성 먹일거면 true, 아니면 빼면 됨 (선택)\n        />\n      </Section>\n      {imageToggle === 'registry' && <p>레지스트리</p>}\n      {imageToggle === 'manual' && (\n        <>\n          <Section label=\"\" id=\"step-manual-image\">\n            <TextInput id=\"manualImage\" inputClassName=\"col-md-12\" methods={methods} defaultValue={modalType === 'modify' ? template.manualImage : ''} />\n          </Section>\n          <Section label=\"커맨드\" id=\"step-manual-command\">\n            <TextInput id=\"manualCommand\" inputClassName=\"col-md-12\" methods={methods} defaultValue={modalType === 'modify' ? template.manualCommand : ''} />\n          </Section>\n        </>\n      )}\n      <Section label=\"인수\" id=\"step-parameter\">\n        <ListView name=\"parameterList\" methods={methods} addButtonText=\"추가\" headerFragment={parameterListHeaderFragment} itemRenderer={parameterListItemRenderer} defaultItem={{ parameter: '' }} />\n      </Section>\n      <Section label=\"환경 변수\" id=\"step-parameter\">\n        <ListView name=\"envList\" methods={methods} addButtonText=\"추가\" headerFragment={envListHeaderFragment} itemRenderer={envListItemRenderer} defaultItem={{ envKey: '', envValue: '' }} />\n      </Section>\n      <Section label=\"마운트 경로\" id=\"step-mountPath\">\n        {!isVolumeExist() ? (\n          '마운트할 볼륨을 먼저 추가해 주세요.'\n        ) : (\n          <>\n            <Dropdown\n              name=\"selectedVolume\"\n              className=\"btn-group\"\n              title=\"볼륨 선택\" // 드롭다운 title 지정\n              methods={methods}\n              items={volumeItems} // (필수)\n              style={{ display: 'block' }}\n              buttonClassName=\"dropdown-btn col-md-12\" // 선택된 아이템 보여주는 button (title) 부분 className\n              itemClassName=\"dropdown-item\" // 드롭다운 아이템 리스트 전체의 className - 각 row를 의미하는 것은 아님\n            />\n            <TextInput id=\"mountPath\" inputClassName=\"col-md-12\" methods={methods} placeholder=\"마운트 경로를 입력해 주세요.\" defaultValue={modalType === 'modify' ? template.mountPath : ''} />\n          </>\n        )}\n      </Section>\n      {/* <Section id=\"resourcelistdropdown\" label=\"Resource List Dropdown\">\n        <ResourceListDropdown\n          resourceList={ClusterResourceList} // 필수\n          selected={[...selectedClusterItems]} // 필수\n          onChange={updateSelectedClusterItems} // 필수\n          showAll={false}\n          title=\"select Resources\" // 드롭다운 title 지정\n          autocompletePlaceholder=\"search by name\"\n          type=\"single\" // type: single / multiple\n        />\n      </Section> */}\n      {/* <Section label=\"Type\" id=\"step-type\" isRequired={true}>\n        <Dropdown\n          name=\"type\"\n          className=\"btn-group\"\n          title=\"타입 선택\" // 드롭다운 title 지정\n          methods={methods}\n          items={typeItems} // (필수)\n          style={{ display: 'block' }}\n          buttonClassName=\"dropdown-btn col-md-12\" // 선택된 아이템 보여주는 button (title) 부분 className\n          itemClassName=\"dropdown-item\" // 드롭다운 아이템 리스트 전체의 className - 각 row를 의미하는 것은 아님\n        />\n      </Section> */}\n    </>\n  );\n};\n\ntype StepModalProps = {\n  methods: any;\n  step: any;\n};\n"]}]}