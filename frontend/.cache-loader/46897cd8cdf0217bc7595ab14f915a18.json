{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-builder/PipelineBuilderVisualization.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-builder/PipelineBuilderVisualization.tsx","mtime":1615298458620},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { Alert } from '@patternfly/react-core';\nimport { LoadingBox } from '@console/internal/components/utils';\nimport { PipelineLayout } from '../pipeline-topology/const';\nimport PipelineTopologyGraph from '../pipeline-topology/PipelineTopologyGraph';\nimport { getEdgesFromNodes } from '../pipeline-topology/utils';\nimport { useNodes } from './hooks';\nconst PipelineBuilderVisualization = ({ namespace, onTaskSelection, onUpdateTasks, taskGroup, tasksInError, }) => {\n    const { tasksLoaded, tasksCount, nodes, loadingTasksError } = useNodes(namespace, onTaskSelection, onUpdateTasks, taskGroup, tasksInError);\n    if (loadingTasksError) {\n        return (React.createElement(Alert, { variant: \"danger\", isInline: true, title: \"Error loading the tasks.\" }, loadingTasksError));\n    }\n    if (!tasksLoaded) {\n        return React.createElement(LoadingBox, null);\n    }\n    if (tasksCount === 0 && taskGroup.tasks.length === 0) {\n        // No tasks, nothing we can do here...\n        return React.createElement(Alert, { variant: \"danger\", isInline: true, title: \"Unable to locate any tasks.\" });\n    }\n    return (React.createElement(PipelineTopologyGraph\n    // TODO: fix this; the graph layout isn't properly laying out nodes\n    , { \n        // TODO: fix this; the graph layout isn't properly laying out nodes\n        key: nodes.map((n) => n.id).join('-'), id: \"pipeline-builder\", fluid: true, nodes: nodes, edges: getEdgesFromNodes(nodes), layout: PipelineLayout.DAGRE_BUILDER }));\n};\nexport default PipelineBuilderVisualization;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-builder/PipelineBuilderVisualization.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-builder/PipelineBuilderVisualization.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,KAAK,EAAE,MAAM,wBAAwB,CAAC;AAC/C,OAAO,EAAE,UAAU,EAAE,MAAM,oCAAoC,CAAC;AAChE,OAAO,EAAE,cAAc,EAAE,MAAM,4BAA4B,CAAC;AAC5D,OAAO,qBAAqB,MAAM,4CAA4C,CAAC;AAC/E,OAAO,EAAE,iBAAiB,EAAE,MAAM,4BAA4B,CAAC;AAC/D,OAAO,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAC;AAgBnC,MAAM,4BAA4B,GAAgD,CAAC,EACjF,SAAS,EACT,eAAe,EACf,aAAa,EACb,SAAS,EACT,YAAY,GACb,EAAE,EAAE;IACH,MAAM,EAAE,WAAW,EAAE,UAAU,EAAE,KAAK,EAAE,iBAAiB,EAAE,GAAG,QAAQ,CACpE,SAAS,EACT,eAAe,EACf,aAAa,EACb,SAAS,EACT,YAAY,CACb,CAAC;IAEF,IAAI,iBAAiB,EAAE;QACrB,OAAO,CACL,oBAAC,KAAK,IAAC,OAAO,EAAC,QAAQ,EAAC,QAAQ,QAAC,KAAK,EAAC,0BAA0B,IAC9D,iBAAiB,CACZ,CACT,CAAC;KACH;IACD,IAAI,CAAC,WAAW,EAAE;QAChB,OAAO,oBAAC,UAAU,OAAG,CAAC;KACvB;IACD,IAAI,UAAU,KAAK,CAAC,IAAI,SAAS,CAAC,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;QACpD,sCAAsC;QACtC,OAAO,oBAAC,KAAK,IAAC,OAAO,EAAC,QAAQ,EAAC,QAAQ,QAAC,KAAK,EAAC,6BAA6B,GAAG,CAAC;KAChF;IAED,OAAO,CACL,oBAAC,qBAAqB;IACpB,mEAAmE;;QAAnE,mEAAmE;QACnE,GAAG,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EACrC,EAAE,EAAC,kBAAkB,EACrB,KAAK,QACL,KAAK,EAAE,KAAK,EACZ,KAAK,EAAE,iBAAiB,CAAC,KAAK,CAAC,EAC/B,MAAM,EAAE,cAAc,CAAC,aAAa,GACpC,CACH,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,4BAA4B,CAAC","sourcesContent":["import * as React from 'react';\nimport { Alert } from '@patternfly/react-core';\nimport { LoadingBox } from '@console/internal/components/utils';\nimport { PipelineLayout } from '../pipeline-topology/const';\nimport PipelineTopologyGraph from '../pipeline-topology/PipelineTopologyGraph';\nimport { getEdgesFromNodes } from '../pipeline-topology/utils';\nimport { useNodes } from './hooks';\nimport {\n  PipelineBuilderTaskGroup,\n  SelectTaskCallback,\n  TaskErrorMap,\n  UpdateTasksCallback,\n} from './types';\n\ntype PipelineBuilderVisualizationProps = {\n  namespace: string;\n  onTaskSelection: SelectTaskCallback;\n  onUpdateTasks: UpdateTasksCallback;\n  taskGroup: PipelineBuilderTaskGroup;\n  tasksInError: TaskErrorMap;\n};\n\nconst PipelineBuilderVisualization: React.FC<PipelineBuilderVisualizationProps> = ({\n  namespace,\n  onTaskSelection,\n  onUpdateTasks,\n  taskGroup,\n  tasksInError,\n}) => {\n  const { tasksLoaded, tasksCount, nodes, loadingTasksError } = useNodes(\n    namespace,\n    onTaskSelection,\n    onUpdateTasks,\n    taskGroup,\n    tasksInError,\n  );\n\n  if (loadingTasksError) {\n    return (\n      <Alert variant=\"danger\" isInline title=\"Error loading the tasks.\">\n        {loadingTasksError}\n      </Alert>\n    );\n  }\n  if (!tasksLoaded) {\n    return <LoadingBox />;\n  }\n  if (tasksCount === 0 && taskGroup.tasks.length === 0) {\n    // No tasks, nothing we can do here...\n    return <Alert variant=\"danger\" isInline title=\"Unable to locate any tasks.\" />;\n  }\n\n  return (\n    <PipelineTopologyGraph\n      // TODO: fix this; the graph layout isn't properly laying out nodes\n      key={nodes.map((n) => n.id).join('-')}\n      id=\"pipeline-builder\"\n      fluid\n      nodes={nodes}\n      edges={getEdgesFromNodes(nodes)}\n      layout={PipelineLayout.DAGRE_BUILDER}\n    />\n  );\n};\n\nexport default PipelineBuilderVisualization;\n"]}]}