{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/formik-fields/BaseInputField.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/formik-fields/BaseInputField.tsx","mtime":1616735742370},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport { useField } from 'formik';\nimport { FormGroup, ValidatedOptions } from '@patternfly/react-core';\nimport { getFieldId } from './field-utils';\nconst BaseInputField = (_a) => {\n    var { label, helpText, required, children, name, onChange, helpTextInvalid, validated } = _a, props = __rest(_a, [\"label\", \"helpText\", \"required\", \"children\", \"name\", \"onChange\", \"helpTextInvalid\", \"validated\"]);\n    const [field, { touched, error }] = useField({ name, type: 'input' });\n    const fieldId = getFieldId(name, 'input');\n    const isValid = !(touched && error);\n    const errorMessage = !isValid ? error : '';\n    return (React.createElement(FormGroup, { fieldId: fieldId, label: label, helperText: helpText, helperTextInvalid: errorMessage || helpTextInvalid, validated: !isValid ? ValidatedOptions.error : validated, isRequired: required }, children(Object.assign(Object.assign(Object.assign({}, field), props), { value: field.value || '', id: fieldId, label, validated: !isValid ? ValidatedOptions.error : validated, 'aria-describedby': `${fieldId}-helper`, onChange: (value, event) => {\n            field.onChange(event);\n            onChange && onChange(event);\n        } }))));\n};\nexport default BaseInputField;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/formik-fields/BaseInputField.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/formik-fields/BaseInputField.tsx"],"names":[],"mappings":";;;;;;;;;;;AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAClC,OAAO,EAAE,SAAS,EAAE,gBAAgB,EAAE,MAAM,wBAAwB,CAAC;AAErE,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAE3C,MAAM,cAAc,GAEf,CAAC,EAUL,EAAE,EAAE;QAVC,EACJ,KAAK,EACL,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,IAAI,EACJ,QAAQ,EACR,eAAe,EACf,SAAS,OAEV,EADC,qHAAQ;IAER,MAAM,CAAC,KAAK,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,GAAG,QAAQ,CAAC,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC,CAAC;IACtE,MAAM,OAAO,GAAG,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;IAC1C,MAAM,OAAO,GAAG,CAAC,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;IACpC,MAAM,YAAY,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;IAC3C,OAAO,CACL,oBAAC,SAAS,IACR,OAAO,EAAE,OAAO,EAChB,KAAK,EAAE,KAAK,EACZ,UAAU,EAAE,QAAQ,EACpB,iBAAiB,EAAE,YAAY,IAAI,eAAe,EAClD,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,EACxD,UAAU,EAAE,QAAQ,IAEnB,QAAQ,+CACJ,KAAK,GACL,KAAK,KACR,KAAK,EAAE,KAAK,CAAC,KAAK,IAAI,EAAE,EACxB,EAAE,EAAE,OAAO,EACX,KAAK,EACL,SAAS,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,EACxD,kBAAkB,EAAE,GAAG,OAAO,SAAS,EACvC,QAAQ,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;YACzB,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YACtB,QAAQ,IAAI,QAAQ,CAAC,KAAK,CAAC,CAAC;QAC9B,CAAC,IACD,CACQ,CACb,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,cAAc,CAAC","sourcesContent":["import * as React from 'react';\nimport { useField } from 'formik';\nimport { FormGroup, ValidatedOptions } from '@patternfly/react-core';\nimport { BaseInputFieldProps } from './field-types';\nimport { getFieldId } from './field-utils';\n\nconst BaseInputField: React.FC<BaseInputFieldProps & {\n  children: (props) => React.ReactNode;\n}> = ({\n  label,\n  helpText,\n  required,\n  children,\n  name,\n  onChange,\n  helpTextInvalid,\n  validated,\n  ...props\n}) => {\n  const [field, { touched, error }] = useField({ name, type: 'input' });\n  const fieldId = getFieldId(name, 'input');\n  const isValid = !(touched && error);\n  const errorMessage = !isValid ? error : '';\n  return (\n    <FormGroup\n      fieldId={fieldId}\n      label={label}\n      helperText={helpText}\n      helperTextInvalid={errorMessage || helpTextInvalid}\n      validated={!isValid ? ValidatedOptions.error : validated}\n      isRequired={required}\n    >\n      {children({\n        ...field,\n        ...props,\n        value: field.value || '',\n        id: fieldId,\n        label,\n        validated: !isValid ? ValidatedOptions.error : validated,\n        'aria-describedby': `${fieldId}-helper`,\n        onChange: (value, event) => {\n          field.onChange(event);\n          onChange && onChange(event);\n        },\n      })}\n    </FormGroup>\n  );\n};\n\nexport default BaseInputField;\n"]}]}