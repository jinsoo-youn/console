{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/constants/vm/network/network-type.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/constants/vm/network/network-type.ts","mtime":1615298458660},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["/* eslint-disable lines-between-class-members */\nimport { ObjectEnum } from '../../object-enum';\nimport { NetworkInterfaceType } from './network-interface-type';\nexport class NetworkType extends ObjectEnum {\n    constructor(value, defaultInterfaceType, allowedInterfaceTypes, isSupported = true) {\n        super(value);\n        this.getDefaultInterfaceType = () => this.defaultInterfaceType;\n        this.getAllowedInterfaceTypes = () => this.allowedInterfaceTypes;\n        this.allowsInterfaceType = (interfaceType) => this.allowedInterfaceTypesSet.has(interfaceType);\n        this.isSupported = () => this.supported;\n        this.defaultInterfaceType = defaultInterfaceType;\n        this.allowedInterfaceTypes = Object.freeze(allowedInterfaceTypes);\n        this.allowedInterfaceTypesSet = new Set(allowedInterfaceTypes);\n        this.supported = isSupported;\n    }\n}\nNetworkType.MULTUS = new NetworkType('multus', NetworkInterfaceType.BRIDGE, [\n    NetworkInterfaceType.BRIDGE,\n    NetworkInterfaceType.SRIOV,\n]);\nNetworkType.POD = new NetworkType('pod', NetworkInterfaceType.MASQUERADE, [\n    NetworkInterfaceType.MASQUERADE,\n    NetworkInterfaceType.BRIDGE,\n    NetworkInterfaceType.SRIOV,\n]);\nNetworkType.GENIE = new NetworkType('genie', NetworkInterfaceType.BRIDGE, [NetworkInterfaceType.BRIDGE], false); // not possible to select in NIC modal\nNetworkType.ALL = Object.freeze(ObjectEnum.getAllClassEnumProperties(NetworkType));\nNetworkType.stringMapper = NetworkType.ALL.reduce((accumulator, networkType) => (Object.assign(Object.assign({}, accumulator), { [networkType.value]: networkType })), {});\nNetworkType.getAll = () => NetworkType.ALL;\nNetworkType.fromString = (model) => NetworkType.stringMapper[model];\nNetworkType.getSupportedAllowedInterfaceTypesInternal = () => {\n    const allowedSupportedInterfaceTypes = new Set();\n    NetworkType.ALL.filter((network) => network.isSupported()).forEach((network) => network\n        .getAllowedInterfaceTypes()\n        .forEach((iType) => allowedSupportedInterfaceTypes.add(iType)));\n    // preserve order\n    return NetworkInterfaceType.getAll().filter((interfaceType) => allowedSupportedInterfaceTypes.has(interfaceType));\n};\nNetworkType.ALLOWED_SUPPORTED_INTERFACES = Object.freeze(NetworkType.getSupportedAllowedInterfaceTypesInternal());\nNetworkType.getSupportedAllowedInterfaceTypes = () => NetworkType.ALLOWED_SUPPORTED_INTERFACES;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/constants/vm/network/network-type.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/constants/vm/network/network-type.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable lines-between-class-members */\nimport { ObjectEnum } from '../../object-enum';\nimport { NetworkInterfaceType } from './network-interface-type';\n\nexport class NetworkType extends ObjectEnum<string> {\n  static readonly MULTUS = new NetworkType('multus', NetworkInterfaceType.BRIDGE, [\n    NetworkInterfaceType.BRIDGE,\n    NetworkInterfaceType.SRIOV,\n  ]);\n  static readonly POD = new NetworkType('pod', NetworkInterfaceType.MASQUERADE, [\n    NetworkInterfaceType.MASQUERADE,\n    NetworkInterfaceType.BRIDGE,\n    NetworkInterfaceType.SRIOV,\n  ]);\n  static readonly GENIE = new NetworkType(\n    'genie',\n    NetworkInterfaceType.BRIDGE,\n    [NetworkInterfaceType.BRIDGE],\n    false,\n  ); // not possible to select in NIC modal\n\n  private static ALL = Object.freeze(\n    ObjectEnum.getAllClassEnumProperties<NetworkType>(NetworkType),\n  );\n\n  private static stringMapper = NetworkType.ALL.reduce(\n    (accumulator, networkType: NetworkType) => ({\n      ...accumulator,\n      [networkType.value]: networkType,\n    }),\n    {},\n  );\n\n  static getAll = () => NetworkType.ALL;\n\n  static fromString = (model: string): NetworkType => NetworkType.stringMapper[model];\n\n  private readonly defaultInterfaceType: NetworkInterfaceType;\n  private readonly allowedInterfaceTypes: Readonly<NetworkInterfaceType[]>;\n  private readonly allowedInterfaceTypesSet: Set<NetworkInterfaceType>;\n  private readonly supported: boolean;\n\n  private constructor(\n    value?: string,\n    defaultInterfaceType?: NetworkInterfaceType,\n    allowedInterfaceTypes?: NetworkInterfaceType[],\n    isSupported = true,\n  ) {\n    super(value);\n    this.defaultInterfaceType = defaultInterfaceType;\n    this.allowedInterfaceTypes = Object.freeze(allowedInterfaceTypes);\n    this.allowedInterfaceTypesSet = new Set(allowedInterfaceTypes);\n    this.supported = isSupported;\n  }\n\n  getDefaultInterfaceType = () => this.defaultInterfaceType;\n  getAllowedInterfaceTypes = () => this.allowedInterfaceTypes;\n  allowsInterfaceType = (interfaceType: NetworkInterfaceType) =>\n    this.allowedInterfaceTypesSet.has(interfaceType);\n\n  isSupported = () => this.supported;\n\n  private static getSupportedAllowedInterfaceTypesInternal = () => {\n    const allowedSupportedInterfaceTypes = new Set();\n\n    NetworkType.ALL.filter((network) => network.isSupported()).forEach((network) =>\n      network\n        .getAllowedInterfaceTypes()\n        .forEach((iType) => allowedSupportedInterfaceTypes.add(iType)),\n    );\n\n    // preserve order\n    return NetworkInterfaceType.getAll().filter((interfaceType) =>\n      allowedSupportedInterfaceTypes.has(interfaceType),\n    );\n  };\n\n  private static ALLOWED_SUPPORTED_INTERFACES = Object.freeze(\n    NetworkType.getSupportedAllowedInterfaceTypesInternal(),\n  );\n\n  static getSupportedAllowedInterfaceTypes = () => NetworkType.ALLOWED_SUPPORTED_INTERFACES;\n}\n"]}]}