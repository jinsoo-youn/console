{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/immutable.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/immutable.ts","mtime":1615298458670},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { List } from 'immutable';\n// ATTENTION: please do not add any new imports here\n//   - it can easily cause cyclic dependencies\nexport const concatImmutableLists = (...args) => args.filter((list) => list).reduce((acc, nextArray) => acc.concat(nextArray), List());\nexport const iFirehoseResultToJS = (immutableValue, isList = true) => {\n    if (!immutableValue) {\n        return {};\n    }\n    const data = immutableValue.get('data');\n    return {\n        data: data && isList ? data.toArray().map((p) => p.toJSON()) : data.toJS(),\n        loadError: immutableValue.get('loadError'),\n        loaded: immutableValue.get('loaded'),\n    };\n};\nexport const immutableListToShallowJS = (list, defaultValue = []) => list ? list.toArray().map((p) => p.toJSON()) : defaultValue;\nexport const immutableListToJS = (list, defaultValue = []) => list ? list.toArray().map((p) => p.toJS()) : defaultValue;\nexport const hasTruthyValue = (obj) => !!(obj && !!obj.find((value) => value));\nexport const iGet = (obj, key, defaultValue = undefined) => obj ? obj.get(key, defaultValue) : defaultValue;\nexport const toShallowJS = (obj, defaultValue = undefined, discardEmpty = false) => {\n    if (discardEmpty && _.isEmpty(obj)) {\n        return defaultValue;\n    }\n    return obj && obj.isEmpty && !obj.isEmpty() ? obj.toJSON() : defaultValue;\n};\nexport const toJS = (obj, defaultValue = undefined) => (obj ? obj.toJS() : defaultValue);\nexport const iGetIn = (obj, path, defaultValue = undefined) => obj && obj.getIn ? obj.getIn(path, defaultValue) : defaultValue;\nexport const ihasIn = (obj, path) => obj && obj.hasIn(path);\nexport const iGetIsLoaded = (result) => iGet(result, 'loaded', false);\nexport const iGetLoadedData = (result, defaultValue = undefined) => iGetIsLoaded(result) && !iGet(result, 'loadError') ? iGet(result, 'data') : defaultValue;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/immutable.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/immutable.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { List } from 'immutable';\n\n// ATTENTION: please do not add any new imports here\n//   - it can easily cause cyclic dependencies\n\nexport const concatImmutableLists = (...args): List<any> =>\n  args.filter((list) => list).reduce((acc, nextArray) => acc.concat(nextArray), List());\n\nexport const iFirehoseResultToJS = (immutableValue, isList = true) => {\n  if (!immutableValue) {\n    return {};\n  }\n\n  const data = immutableValue.get('data');\n\n  return {\n    data: data && isList ? data.toArray().map((p) => p.toJSON()) : data.toJS(),\n    loadError: immutableValue.get('loadError'),\n    loaded: immutableValue.get('loaded'),\n  };\n};\n\nexport const immutableListToShallowJS = <A = any>(list, defaultValue: A[] = []): A[] =>\n  list ? list.toArray().map((p) => p.toJSON()) : defaultValue;\n\nexport const immutableListToJS = <A = any>(list, defaultValue: A[] = []): A[] =>\n  list ? list.toArray().map((p) => p.toJS()) : defaultValue;\n\nexport const hasTruthyValue = (obj) => !!(obj && !!obj.find((value) => value));\n\nexport const iGet = (obj, key: string, defaultValue = undefined) =>\n  obj ? obj.get(key, defaultValue) : defaultValue;\n\nexport const toShallowJS = (obj, defaultValue = undefined, discardEmpty: boolean = false) => {\n  if (discardEmpty && _.isEmpty(obj)) {\n    return defaultValue;\n  }\n  return obj && obj.isEmpty && !obj.isEmpty() ? obj.toJSON() : defaultValue;\n};\n\nexport const toJS = (obj, defaultValue = undefined) => (obj ? obj.toJS() : defaultValue);\n\nexport const iGetIn = (obj, path: string[], defaultValue = undefined) =>\n  obj && obj.getIn ? obj.getIn(path, defaultValue) : defaultValue;\n\nexport const ihasIn = (obj, path: string[]) => obj && obj.hasIn(path);\n\nexport const iGetIsLoaded = (result): boolean => iGet(result, 'loaded', false);\n\nexport const iGetLoadedData = (result, defaultValue = undefined) =>\n  iGetIsLoaded(result) && !iGet(result, 'loadError') ? iGet(result, 'data') : defaultValue;\n"]}]}