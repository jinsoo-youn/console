{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/nodes/NodesPage.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/nodes/NodesPage.tsx","mtime":1615298458600},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { connect } from 'react-redux';\nimport * as _ from 'lodash';\nimport { sortable } from '@patternfly/react-table';\nimport { getName, getUID, getNodeRole } from '@console/shared';\nimport { NodeModel } from '@console/internal/models';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { Table, TableRow, TableData, ListPage, } from '@console/internal/components/factory';\nimport { Kebab, ResourceKebab, ResourceLink, Timestamp, humanizeBinaryBytes, formatCores, } from '@console/internal/components/utils';\nimport { setNodeMetrics } from '@console/internal/actions/ui';\nimport { PROMETHEUS_BASE_PATH } from '@console/internal/components/graphs';\nimport { coFetchJSON } from '@console/internal/co-fetch';\nimport { getPrometheusURL, PrometheusEndpoint } from '@console/internal/components/graphs/helpers';\nimport { nodeStatus } from '../../status/node';\nimport NodeRoles from './NodeRoles';\nimport { menuActions } from './menu-actions';\nimport NodeStatus from './NodeStatus';\nconst tableColumnClasses = [\n    '',\n    '',\n    '',\n    classNames('pf-m-hidden', 'pf-m-visible-on-xl'),\n    classNames('pf-m-hidden', 'pf-m-visible-on-xl'),\n    classNames('pf-m-hidden', 'pf-m-visible-on-xl'),\n    classNames('pf-m-hidden', 'pf-m-visible-on-xl'),\n    classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n    Kebab.columnClass,\n];\nconst NodeTableHeader = () => {\n    return [\n        {\n            title: 'Name',\n            sortField: 'metadata.name',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[0] },\n        },\n        {\n            title: 'Status',\n            sortFunc: 'nodeReadiness',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[1] },\n        },\n        {\n            title: 'Role',\n            sortFunc: 'nodeRoles',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[2] },\n        },\n        {\n            title: 'Pods',\n            sortFunc: 'nodePods',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[3] },\n        },\n        {\n            title: 'Memory',\n            sortFunc: 'nodeMemory',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[4] },\n        },\n        {\n            title: 'CPU',\n            sortFunc: 'nodeCPU',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[5] },\n        },\n        {\n            title: 'Filesystem',\n            sortFunc: 'nodeFS',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[6] },\n        },\n        {\n            title: 'Created',\n            sortField: 'metadata.creationTimestamp',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[7] },\n        },\n        {\n            title: '',\n            props: { className: tableColumnClasses[8] },\n        },\n    ];\n};\nNodeTableHeader.displayName = 'NodeTableHeader';\nconst mapStateToProps = ({ UI }) => ({\n    metrics: UI.getIn(['metrics', 'node']),\n});\nconst NodesTableRow = connect(mapStateToProps)(({ obj: node, index, rowKey, style, metrics, }) => {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const nodeName = getName(node);\n    const nodeUID = getUID(node);\n    const usedMem = (_a = metrics === null || metrics === void 0 ? void 0 : metrics.usedMemory) === null || _a === void 0 ? void 0 : _a[nodeName];\n    const totalMem = (_b = metrics === null || metrics === void 0 ? void 0 : metrics.totalMemory) === null || _b === void 0 ? void 0 : _b[nodeName];\n    const memory = Number.isFinite(usedMem) && Number.isFinite(totalMem)\n        ? `${humanizeBinaryBytes(usedMem).string} / ${humanizeBinaryBytes(totalMem).string}`\n        : '-';\n    const cores = (_c = metrics === null || metrics === void 0 ? void 0 : metrics.cpu) === null || _c === void 0 ? void 0 : _c[nodeName];\n    const usedStrg = (_d = metrics === null || metrics === void 0 ? void 0 : metrics.usedStorage) === null || _d === void 0 ? void 0 : _d[nodeName];\n    const totalStrg = (_e = metrics === null || metrics === void 0 ? void 0 : metrics.totalStorage) === null || _e === void 0 ? void 0 : _e[nodeName];\n    const storage = Number.isFinite(usedStrg) && Number.isFinite(totalStrg)\n        ? `${humanizeBinaryBytes(usedStrg).string} / ${humanizeBinaryBytes(totalStrg).string}`\n        : '-';\n    const pods = (_g = (_f = metrics === null || metrics === void 0 ? void 0 : metrics.pods) === null || _f === void 0 ? void 0 : _f[nodeName]) !== null && _g !== void 0 ? _g : '-';\n    return (React.createElement(TableRow, { id: nodeUID, index: index, trKey: rowKey, style: style },\n        React.createElement(TableData, { className: tableColumnClasses[0] },\n            React.createElement(ResourceLink, { kind: referenceForModel(NodeModel), name: nodeName, title: nodeUID })),\n        React.createElement(TableData, { className: tableColumnClasses[1] },\n            React.createElement(NodeStatus, { node: node, showPopovers: true })),\n        React.createElement(TableData, { className: tableColumnClasses[2] },\n            React.createElement(NodeRoles, { node: node })),\n        React.createElement(TableData, { className: tableColumnClasses[3] }, pods),\n        React.createElement(TableData, { className: tableColumnClasses[4] }, memory),\n        React.createElement(TableData, { className: tableColumnClasses[5] }, cores ? `${formatCores(cores)} cores` : '-'),\n        React.createElement(TableData, { className: tableColumnClasses[6] }, storage),\n        React.createElement(TableData, { className: tableColumnClasses[7] },\n            React.createElement(Timestamp, { timestamp: node.metadata.creationTimestamp })),\n        React.createElement(TableData, { className: tableColumnClasses[8] },\n            React.createElement(ResourceKebab, { actions: menuActions, kind: referenceForModel(NodeModel), resource: node }))));\n});\nNodesTableRow.displayName = 'NodesTableRow';\nconst NodesTable = React.memo((props) => {\n    const Row = React.useCallback((rowArgs) => (React.createElement(NodesTableRow, { obj: rowArgs.obj, index: rowArgs.index, rowKey: rowArgs.key, style: rowArgs.style })), []);\n    return React.createElement(Table, Object.assign({}, props, { \"aria-label\": \"Nodes\", Header: NodeTableHeader, Row: Row, virtualize: true }));\n});\nconst filters = [\n    {\n        filterGroupName: 'Status',\n        type: 'node-status',\n        reducer: nodeStatus,\n        items: [\n            { id: 'Ready', title: 'Ready' },\n            { id: 'Not Ready', title: 'Not Ready' },\n        ],\n    },\n    {\n        filterGroupName: 'Role',\n        type: 'node-role',\n        reducer: getNodeRole,\n        items: [\n            {\n                id: 'master',\n                title: 'Master',\n            },\n            {\n                id: 'worker',\n                title: 'Worker',\n            },\n        ],\n    },\n];\nconst fetchNodeMetrics = () => {\n    const metrics = [\n        {\n            key: 'usedMemory',\n            query: 'sum by (instance) (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes)',\n        },\n        {\n            key: 'totalMemory',\n            query: 'sum by (instance) (node_memory_MemTotal_bytes)',\n        },\n        {\n            key: 'usedStorage',\n            query: 'sum by (instance) (node_filesystem_size_bytes - node_filesystem_free_bytes)',\n        },\n        {\n            key: 'totalStorage',\n            query: 'sum by (instance) (node_filesystem_size_bytes)',\n        },\n        {\n            key: 'cpu',\n            query: 'sum by(instance) (instance:node_cpu:rate:sum)',\n        },\n        {\n            key: 'pods',\n            query: 'sum by(node)(kubelet_running_pod_count)',\n        },\n    ];\n    const promises = metrics.map(({ key, query }) => {\n        const url = getPrometheusURL({ endpoint: PrometheusEndpoint.QUERY, query });\n        return coFetchJSON(url).then(({ data: { result } }) => {\n            return result.reduce((acc, data) => {\n                const value = Number(data.value[1]);\n                return _.set(acc, [key, data.metric.instance || data.metric.node], value);\n            }, {});\n        });\n    });\n    return Promise.all(promises).then((data) => _.assign({}, ...data));\n};\nconst mapDispatchToProps = (dispatch) => ({\n    setNodeMetrics: (metrics) => dispatch(setNodeMetrics(metrics)),\n});\nconst showMetrics = PROMETHEUS_BASE_PATH && window.innerWidth > 1200;\nconst NodesPage = connect(null, mapDispatchToProps)((props) => {\n    const { setNodeMetrics: setMetrics } = props;\n    React.useEffect(() => {\n        const updateMetrics = () => fetchNodeMetrics()\n            .then(setMetrics)\n            .catch((e) => {\n            // eslint-disable-next-line no-console\n            console.error('Error fetching node metrics: ', e);\n        });\n        updateMetrics();\n        if (showMetrics) {\n            const id = setInterval(updateMetrics, 30 * 1000);\n            return () => clearInterval(id);\n        }\n        return () => { };\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    return React.createElement(ListPage, Object.assign({}, props, { kind: \"Node\", ListComponent: NodesTable, rowFilters: filters }));\n});\nexport default NodesPage;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/nodes/NodesPage.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/nodes/NodesPage.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { connect } from 'react-redux';\nimport * as _ from 'lodash';\nimport { sortable } from '@patternfly/react-table';\nimport { getName, getUID, getNodeRole } from '@console/shared';\nimport { NodeModel } from '@console/internal/models';\nimport { NodeKind, referenceForModel } from '@console/internal/module/k8s';\nimport {\n  Table,\n  TableRow,\n  TableData,\n  ListPage,\n  RowFunctionArgs,\n} from '@console/internal/components/factory';\nimport {\n  Kebab,\n  ResourceKebab,\n  ResourceLink,\n  Timestamp,\n  humanizeBinaryBytes,\n  formatCores,\n} from '@console/internal/components/utils';\nimport { NodeMetrics, setNodeMetrics } from '@console/internal/actions/ui';\nimport { PROMETHEUS_BASE_PATH } from '@console/internal/components/graphs';\nimport { coFetchJSON } from '@console/internal/co-fetch';\nimport { getPrometheusURL, PrometheusEndpoint } from '@console/internal/components/graphs/helpers';\nimport { nodeStatus } from '../../status/node';\nimport NodeRoles from './NodeRoles';\nimport { menuActions } from './menu-actions';\nimport NodeStatus from './NodeStatus';\n\nconst tableColumnClasses = [\n  '',\n  '',\n  '',\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n  Kebab.columnClass,\n];\n\nconst NodeTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Status',\n      sortFunc: 'nodeReadiness',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Role',\n      sortFunc: 'nodeRoles',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Pods',\n      sortFunc: 'nodePods',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: 'Memory',\n      sortFunc: 'nodeMemory',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: 'CPU',\n      sortFunc: 'nodeCPU',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[5] },\n    },\n    {\n      title: 'Filesystem',\n      sortFunc: 'nodeFS',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[6] },\n    },\n    {\n      title: 'Created',\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[7] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[8] },\n    },\n  ];\n};\nNodeTableHeader.displayName = 'NodeTableHeader';\n\nconst mapStateToProps = ({ UI }) => ({\n  metrics: UI.getIn(['metrics', 'node']),\n});\n\ntype NodesRowMapFromStateProps = {\n  metrics: NodeMetrics;\n};\n\nconst NodesTableRow = connect<NodesRowMapFromStateProps, null, NodesTableRowProps>(mapStateToProps)(\n  ({\n    obj: node,\n    index,\n    rowKey,\n    style,\n    metrics,\n  }: NodesTableRowProps & NodesRowMapFromStateProps) => {\n    const nodeName = getName(node);\n    const nodeUID = getUID(node);\n    const usedMem = metrics?.usedMemory?.[nodeName];\n    const totalMem = metrics?.totalMemory?.[nodeName];\n    const memory =\n      Number.isFinite(usedMem) && Number.isFinite(totalMem)\n        ? `${humanizeBinaryBytes(usedMem).string} / ${humanizeBinaryBytes(totalMem).string}`\n        : '-';\n    const cores = metrics?.cpu?.[nodeName];\n    const usedStrg = metrics?.usedStorage?.[nodeName];\n    const totalStrg = metrics?.totalStorage?.[nodeName];\n    const storage =\n      Number.isFinite(usedStrg) && Number.isFinite(totalStrg)\n        ? `${humanizeBinaryBytes(usedStrg).string} / ${humanizeBinaryBytes(totalStrg).string}`\n        : '-';\n    const pods = metrics?.pods?.[nodeName] ?? '-';\n    return (\n      <TableRow id={nodeUID} index={index} trKey={rowKey} style={style}>\n        <TableData className={tableColumnClasses[0]}>\n          <ResourceLink kind={referenceForModel(NodeModel)} name={nodeName} title={nodeUID} />\n        </TableData>\n        <TableData className={tableColumnClasses[1]}>\n          <NodeStatus node={node} showPopovers />\n        </TableData>\n        <TableData className={tableColumnClasses[2]}>\n          <NodeRoles node={node} />\n        </TableData>\n        <TableData className={tableColumnClasses[3]}>{pods}</TableData>\n        <TableData className={tableColumnClasses[4]}>{memory}</TableData>\n        <TableData className={tableColumnClasses[5]}>\n          {cores ? `${formatCores(cores)} cores` : '-'}\n        </TableData>\n        <TableData className={tableColumnClasses[6]}>{storage}</TableData>\n        <TableData className={tableColumnClasses[7]}>\n          <Timestamp timestamp={node.metadata.creationTimestamp} />\n        </TableData>\n        <TableData className={tableColumnClasses[8]}>\n          <ResourceKebab\n            actions={menuActions}\n            kind={referenceForModel(NodeModel)}\n            resource={node}\n          />\n        </TableData>\n      </TableRow>\n    );\n  },\n);\nNodesTableRow.displayName = 'NodesTableRow';\n\ntype NodesTableRowProps = {\n  obj: NodeKind;\n  index: number;\n  rowKey: string;\n  style: object;\n};\n\nconst NodesTable: React.FC<NodesTableProps> = React.memo((props) => {\n  const Row = React.useCallback(\n    (rowArgs: RowFunctionArgs<NodeKind>) => (\n      <NodesTableRow\n        obj={rowArgs.obj}\n        index={rowArgs.index}\n        rowKey={rowArgs.key}\n        style={rowArgs.style}\n      />\n    ),\n    [],\n  );\n  return <Table {...props} aria-label=\"Nodes\" Header={NodeTableHeader} Row={Row} virtualize />;\n});\n\ntype NodesTableProps = React.ComponentProps<typeof Table> & {\n  data: NodeKind[];\n};\n\nconst filters = [\n  {\n    filterGroupName: 'Status',\n    type: 'node-status',\n    reducer: nodeStatus,\n    items: [\n      { id: 'Ready', title: 'Ready' },\n      { id: 'Not Ready', title: 'Not Ready' },\n    ],\n  },\n  {\n    filterGroupName: 'Role',\n    type: 'node-role',\n    reducer: getNodeRole,\n    items: [\n      {\n        id: 'master',\n        title: 'Master',\n      },\n      {\n        id: 'worker',\n        title: 'Worker',\n      },\n    ],\n  },\n];\n\nconst fetchNodeMetrics = (): Promise<NodeMetrics> => {\n  const metrics = [\n    {\n      key: 'usedMemory',\n      query: 'sum by (instance) (node_memory_MemTotal_bytes - node_memory_MemAvailable_bytes)',\n    },\n    {\n      key: 'totalMemory',\n      query: 'sum by (instance) (node_memory_MemTotal_bytes)',\n    },\n    {\n      key: 'usedStorage',\n      query: 'sum by (instance) (node_filesystem_size_bytes - node_filesystem_free_bytes)',\n    },\n    {\n      key: 'totalStorage',\n      query: 'sum by (instance) (node_filesystem_size_bytes)',\n    },\n    {\n      key: 'cpu',\n      query: 'sum by(instance) (instance:node_cpu:rate:sum)',\n    },\n    {\n      key: 'pods',\n      query: 'sum by(node)(kubelet_running_pod_count)',\n    },\n  ];\n  const promises = metrics.map(({ key, query }) => {\n    const url = getPrometheusURL({ endpoint: PrometheusEndpoint.QUERY, query });\n    return coFetchJSON(url).then(({ data: { result } }) => {\n      return result.reduce((acc, data) => {\n        const value = Number(data.value[1]);\n        return _.set(acc, [key, data.metric.instance || data.metric.node], value);\n      }, {});\n    });\n  });\n  return Promise.all(promises).then((data: any[]) => _.assign({}, ...data));\n};\n\nconst mapDispatchToProps = (dispatch): MapDispatchToProps => ({\n  setNodeMetrics: (metrics) => dispatch(setNodeMetrics(metrics)),\n});\n\nconst showMetrics = PROMETHEUS_BASE_PATH && window.innerWidth > 1200;\n\nconst NodesPage = connect<{}, MapDispatchToProps>(\n  null,\n  mapDispatchToProps,\n)((props: MapDispatchToProps) => {\n  const { setNodeMetrics: setMetrics } = props;\n\n  React.useEffect(() => {\n    const updateMetrics = () =>\n      fetchNodeMetrics()\n        .then(setMetrics)\n        .catch((e) => {\n          // eslint-disable-next-line no-console\n          console.error('Error fetching node metrics: ', e);\n        });\n    updateMetrics();\n    if (showMetrics) {\n      const id = setInterval(updateMetrics, 30 * 1000);\n      return () => clearInterval(id);\n    }\n    return () => {};\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  return <ListPage {...props} kind=\"Node\" ListComponent={NodesTable} rowFilters={filters} />;\n});\n\ntype MapDispatchToProps = {\n  setNodeMetrics: (metrics) => void;\n};\n\nexport default NodesPage;\n"]}]}