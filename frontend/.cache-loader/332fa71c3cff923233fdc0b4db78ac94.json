{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/dashboard/project-dashboard/utilization-card.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/dashboard/project-dashboard/utilization-card.tsx","mtime":1615298458730},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport UtilizationBody from '@console/shared/src/components/dashboard/utilization-card/UtilizationBody';\nimport { getName } from '@console/shared';\nimport ConsumerPopover from '@console/shared/src/components/dashboard/utilization-card/TopConsumerPopover';\nimport { PopoverPosition } from '@patternfly/react-core';\nimport { ByteDataTypes } from '@console/shared/src/graph-helper/data-utils';\nimport { Dropdown } from '../../utils/dropdown';\nimport { humanizeBinaryBytes, humanizeCpuCores, humanizeDecimalBytesPerSec, humanizeNumber, } from '../../utils';\nimport { ProjectDashboardContext } from './project-dashboard-context';\nimport { PodModel } from '../../../models';\nimport { useMetricDuration, Duration, } from '@console/shared/src/components/dashboard/duration-hook';\nimport { getUtilizationQueries, ProjectQueries, getTopConsumerQueries, getMultilineQueries, } from './queries';\nimport { PrometheusUtilizationItem, PrometheusMultilineUtilizationItem, } from '../dashboards-page/cluster-dashboard/utilization-card';\nexport const UtilizationCard = () => {\n    const [timestamps, setTimestamps] = React.useState();\n    const [duration, setDuration] = useMetricDuration();\n    const { obj } = React.useContext(ProjectDashboardContext);\n    const projectName = getName(obj);\n    const queries = React.useMemo(() => getUtilizationQueries(projectName), [projectName]);\n    const multilineQueries = React.useMemo(() => getMultilineQueries(projectName), [projectName]);\n    const cpuPopover = React.useCallback(React.memo(({ current }) => (React.createElement(ConsumerPopover, { title: \"CPU\", current: current, consumers: [\n            {\n                query: getTopConsumerQueries(projectName)[ProjectQueries.PODS_BY_CPU],\n                model: PodModel,\n                metric: 'pod',\n            },\n        ], humanize: humanizeCpuCores, namespace: projectName, position: PopoverPosition.top }))), [projectName]);\n    const memPopover = React.useCallback(React.memo(({ current }) => (React.createElement(ConsumerPopover, { title: \"Memory\", current: current, consumers: [\n            {\n                query: getTopConsumerQueries(projectName)[ProjectQueries.PODS_BY_MEMORY],\n                model: PodModel,\n                metric: 'pod',\n            },\n        ], humanize: humanizeBinaryBytes, namespace: projectName, position: PopoverPosition.top }))), [projectName]);\n    const filesystemPopover = React.useCallback(React.memo(({ current }) => (React.createElement(ConsumerPopover, { title: \"Filesystem\", current: current, consumers: [\n            {\n                query: getTopConsumerQueries(projectName)[ProjectQueries.PODS_BY_FILESYSTEM],\n                model: PodModel,\n                metric: 'pod',\n            },\n        ], humanize: humanizeBinaryBytes, namespace: projectName, position: PopoverPosition.top }))), [projectName]);\n    const networkPopoverIn = React.useCallback(React.memo(({ current }) => (React.createElement(ConsumerPopover, { title: \"Network In\", current: current, consumers: [\n            {\n                query: getTopConsumerQueries(projectName)[ProjectQueries.PODS_BY_NETWORK_IN],\n                model: PodModel,\n                metric: 'pod',\n            },\n        ], humanize: humanizeDecimalBytesPerSec, namespace: projectName, position: PopoverPosition.top }))), [projectName]);\n    const networkPopoverOut = React.useCallback(React.memo(({ current }) => (React.createElement(ConsumerPopover, { title: \"Network Out\", current: current, consumers: [\n            {\n                query: getTopConsumerQueries(projectName)[ProjectQueries.PODS_BY_NETWORK_OUT],\n                model: PodModel,\n                metric: 'pod',\n            },\n        ], humanize: humanizeDecimalBytesPerSec, namespace: projectName, position: PopoverPosition.top }))), [projectName]);\n    const networkPopovers = React.useMemo(() => [networkPopoverIn, networkPopoverOut], [\n        networkPopoverIn,\n        networkPopoverOut,\n    ]);\n    return (React.createElement(DashboardCard, { \"data-test-id\": \"utilization-card\" },\n        React.createElement(DashboardCardHeader, null,\n            React.createElement(DashboardCardTitle, null, \"Utilization\"),\n            React.createElement(Dropdown, { items: Duration, onChange: setDuration, selectedKey: duration, title: duration })),\n        React.createElement(UtilizationBody, { timestamps: timestamps },\n            React.createElement(PrometheusUtilizationItem, { title: \"CPU\", humanizeValue: humanizeCpuCores, utilizationQuery: queries[ProjectQueries.CPU_USAGE], TopConsumerPopover: cpuPopover, duration: duration, setTimestamps: setTimestamps, namespace: projectName }),\n            React.createElement(PrometheusUtilizationItem, { title: \"Memory\", humanizeValue: humanizeBinaryBytes, utilizationQuery: queries[ProjectQueries.MEMORY_USAGE], byteDataType: ByteDataTypes.BinaryBytes, TopConsumerPopover: memPopover, duration: duration, namespace: projectName }),\n            React.createElement(PrometheusUtilizationItem, { title: \"Filesystem\", humanizeValue: humanizeBinaryBytes, utilizationQuery: queries[ProjectQueries.FILESYSTEM_USAGE], byteDataType: ByteDataTypes.BinaryBytes, TopConsumerPopover: filesystemPopover, duration: duration, namespace: projectName }),\n            React.createElement(PrometheusMultilineUtilizationItem, { title: \"Network Transfer\", humanizeValue: humanizeDecimalBytesPerSec, queries: multilineQueries[ProjectQueries.NETWORK_UTILIZATION], TopConsumerPopovers: networkPopovers, duration: duration, namespace: projectName }),\n            React.createElement(PrometheusUtilizationItem, { title: \"Pod count\", humanizeValue: humanizeNumber, utilizationQuery: queries[ProjectQueries.POD_COUNT], duration: duration, namespace: projectName }))));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/dashboard/project-dashboard/utilization-card.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/dashboard/project-dashboard/utilization-card.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport UtilizationBody from '@console/shared/src/components/dashboard/utilization-card/UtilizationBody';\nimport { TopConsumerPopoverProp } from '@console/shared/src/components/dashboard/utilization-card/UtilizationItem';\nimport { getName } from '@console/shared';\nimport ConsumerPopover from '@console/shared/src/components/dashboard/utilization-card/TopConsumerPopover';\nimport { PopoverPosition } from '@patternfly/react-core';\nimport { ByteDataTypes } from '@console/shared/src/graph-helper/data-utils';\nimport { Dropdown } from '../../utils/dropdown';\nimport {\n  humanizeBinaryBytes,\n  humanizeCpuCores,\n  humanizeDecimalBytesPerSec,\n  humanizeNumber,\n} from '../../utils';\nimport { ProjectDashboardContext } from './project-dashboard-context';\nimport { PodModel } from '../../../models';\nimport {\n  useMetricDuration,\n  Duration,\n} from '@console/shared/src/components/dashboard/duration-hook';\nimport {\n  getUtilizationQueries,\n  ProjectQueries,\n  getTopConsumerQueries,\n  getMultilineQueries,\n} from './queries';\nimport {\n  PrometheusUtilizationItem,\n  PrometheusMultilineUtilizationItem,\n} from '../dashboards-page/cluster-dashboard/utilization-card';\n\nexport const UtilizationCard: React.FC = () => {\n  const [timestamps, setTimestamps] = React.useState<Date[]>();\n  const [duration, setDuration] = useMetricDuration();\n  const { obj } = React.useContext(ProjectDashboardContext);\n  const projectName = getName(obj);\n  const queries = React.useMemo(() => getUtilizationQueries(projectName), [projectName]);\n  const multilineQueries = React.useMemo(() => getMultilineQueries(projectName), [projectName]);\n\n  const cpuPopover = React.useCallback(\n    React.memo<TopConsumerPopoverProp>(({ current }) => (\n      <ConsumerPopover\n        title=\"CPU\"\n        current={current}\n        consumers={[\n          {\n            query: getTopConsumerQueries(projectName)[ProjectQueries.PODS_BY_CPU],\n            model: PodModel,\n            metric: 'pod',\n          },\n        ]}\n        humanize={humanizeCpuCores}\n        namespace={projectName}\n        position={PopoverPosition.top}\n      />\n    )),\n    [projectName],\n  );\n\n  const memPopover = React.useCallback(\n    React.memo<TopConsumerPopoverProp>(({ current }) => (\n      <ConsumerPopover\n        title=\"Memory\"\n        current={current}\n        consumers={[\n          {\n            query: getTopConsumerQueries(projectName)[ProjectQueries.PODS_BY_MEMORY],\n            model: PodModel,\n            metric: 'pod',\n          },\n        ]}\n        humanize={humanizeBinaryBytes}\n        namespace={projectName}\n        position={PopoverPosition.top}\n      />\n    )),\n    [projectName],\n  );\n\n  const filesystemPopover = React.useCallback(\n    React.memo<TopConsumerPopoverProp>(({ current }) => (\n      <ConsumerPopover\n        title=\"Filesystem\"\n        current={current}\n        consumers={[\n          {\n            query: getTopConsumerQueries(projectName)[ProjectQueries.PODS_BY_FILESYSTEM],\n            model: PodModel,\n            metric: 'pod',\n          },\n        ]}\n        humanize={humanizeBinaryBytes}\n        namespace={projectName}\n        position={PopoverPosition.top}\n      />\n    )),\n    [projectName],\n  );\n\n  const networkPopoverIn = React.useCallback(\n    React.memo<TopConsumerPopoverProp>(({ current }) => (\n      <ConsumerPopover\n        title=\"Network In\"\n        current={current}\n        consumers={[\n          {\n            query: getTopConsumerQueries(projectName)[ProjectQueries.PODS_BY_NETWORK_IN],\n            model: PodModel,\n            metric: 'pod',\n          },\n        ]}\n        humanize={humanizeDecimalBytesPerSec}\n        namespace={projectName}\n        position={PopoverPosition.top}\n      />\n    )),\n    [projectName],\n  );\n\n  const networkPopoverOut = React.useCallback(\n    React.memo<TopConsumerPopoverProp>(({ current }) => (\n      <ConsumerPopover\n        title=\"Network Out\"\n        current={current}\n        consumers={[\n          {\n            query: getTopConsumerQueries(projectName)[ProjectQueries.PODS_BY_NETWORK_OUT],\n            model: PodModel,\n            metric: 'pod',\n          },\n        ]}\n        humanize={humanizeDecimalBytesPerSec}\n        namespace={projectName}\n        position={PopoverPosition.top}\n      />\n    )),\n    [projectName],\n  );\n\n  const networkPopovers = React.useMemo(() => [networkPopoverIn, networkPopoverOut], [\n    networkPopoverIn,\n    networkPopoverOut,\n  ]);\n\n  return (\n    <DashboardCard data-test-id=\"utilization-card\">\n      <DashboardCardHeader>\n        <DashboardCardTitle>Utilization</DashboardCardTitle>\n        <Dropdown items={Duration} onChange={setDuration} selectedKey={duration} title={duration} />\n      </DashboardCardHeader>\n      <UtilizationBody timestamps={timestamps}>\n        <PrometheusUtilizationItem\n          title=\"CPU\"\n          humanizeValue={humanizeCpuCores}\n          utilizationQuery={queries[ProjectQueries.CPU_USAGE]}\n          TopConsumerPopover={cpuPopover}\n          duration={duration}\n          setTimestamps={setTimestamps}\n          namespace={projectName}\n        />\n        <PrometheusUtilizationItem\n          title=\"Memory\"\n          humanizeValue={humanizeBinaryBytes}\n          utilizationQuery={queries[ProjectQueries.MEMORY_USAGE]}\n          byteDataType={ByteDataTypes.BinaryBytes}\n          TopConsumerPopover={memPopover}\n          duration={duration}\n          namespace={projectName}\n        />\n        <PrometheusUtilizationItem\n          title=\"Filesystem\"\n          humanizeValue={humanizeBinaryBytes}\n          utilizationQuery={queries[ProjectQueries.FILESYSTEM_USAGE]}\n          byteDataType={ByteDataTypes.BinaryBytes}\n          TopConsumerPopover={filesystemPopover}\n          duration={duration}\n          namespace={projectName}\n        />\n        <PrometheusMultilineUtilizationItem\n          title=\"Network Transfer\"\n          humanizeValue={humanizeDecimalBytesPerSec}\n          queries={multilineQueries[ProjectQueries.NETWORK_UTILIZATION]}\n          TopConsumerPopovers={networkPopovers}\n          duration={duration}\n          namespace={projectName}\n        />\n        <PrometheusUtilizationItem\n          title=\"Pod count\"\n          humanizeValue={humanizeNumber}\n          utilizationQuery={queries[ProjectQueries.POD_COUNT]}\n          duration={duration}\n          namespace={projectName}\n        />\n      </UtilizationBody>\n    </DashboardCard>\n  );\n};\n"]}]}