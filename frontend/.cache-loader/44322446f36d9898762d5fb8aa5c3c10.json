{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/components/baremetal-hosts/dashboard/utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/components/baremetal-hosts/dashboard/utils.ts","mtime":1615298458670},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { InventoryStatusGroup } from '@console/shared/src/components/dashboard/inventory-card/status-group';\nimport { getName } from '@console/shared/src/selectors/common';\nimport { getNodeMachineName } from '@console/shared/src/selectors/node';\nimport { createBasicLookup } from '@console/shared/src/utils/utils';\nimport { getHostStatus } from '../../../status/host-status';\nimport { HOST_ERROR_STATES, HOST_PROGRESS_STATES, HOST_SUCCESS_STATES } from '../../../constants';\nimport { getHostMachine, getNodeMaintenanceNodeName } from '../../../selectors';\nimport { getHostFilterStatus } from '../table-filters';\nconst BMH_STATUS_GROUP_MAPPER = {\n    [InventoryStatusGroup.NOT_MAPPED]: HOST_SUCCESS_STATES,\n    [InventoryStatusGroup.PROGRESS]: HOST_PROGRESS_STATES,\n    [InventoryStatusGroup.ERROR]: HOST_ERROR_STATES,\n    'node-maintenance': ['maintenance'],\n};\nexport const getBMHStatusGroups = (hosts, { machines, nodes, maintenances }) => {\n    const groups = {\n        [InventoryStatusGroup.NOT_MAPPED]: {\n            statusIDs: ['ready', 'provisioned'],\n            count: 0,\n            filterType: 'host-status',\n        },\n        [InventoryStatusGroup.ERROR]: {\n            statusIDs: ['error'],\n            count: 0,\n            filterType: 'host-status',\n        },\n        [InventoryStatusGroup.PROGRESS]: {\n            statusIDs: ['registering', 'provisioning'],\n            count: 0,\n            filterType: 'host-status',\n        },\n        [InventoryStatusGroup.UNKNOWN]: {\n            statusIDs: ['other'],\n            count: 0,\n            filterType: 'host-status',\n        },\n        'node-maintenance': {\n            statusIDs: ['maintenance'],\n            count: 0,\n            filterType: 'host-status',\n        },\n    };\n    const maintenancesByNodeName = createBasicLookup(maintenances, getNodeMaintenanceNodeName);\n    const nodesByMachineName = createBasicLookup(nodes, getNodeMachineName);\n    hosts.forEach((host) => {\n        // TODO(jtomasek): replace this with createLookup once there is metal3.io/BareMetalHost annotation\n        // on machines\n        const machine = getHostMachine(host, machines);\n        const node = nodesByMachineName[getName(machine)];\n        const nodeMaintenance = maintenancesByNodeName[getName(node)];\n        const bareMetalHostStatus = getHostStatus({ host, nodeMaintenance });\n        const status = getHostFilterStatus({\n            machine,\n            node,\n            host,\n            nodeMaintenance,\n            status: bareMetalHostStatus,\n        });\n        const group = Object.keys(BMH_STATUS_GROUP_MAPPER).find((key) => BMH_STATUS_GROUP_MAPPER[key].includes(status)) || InventoryStatusGroup.NOT_MAPPED;\n        groups[group].count++;\n    });\n    return groups;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/components/baremetal-hosts/dashboard/utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/components/baremetal-hosts/dashboard/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { StatusGroupMapper } from '@console/shared/src/components/dashboard/inventory-card/InventoryItem';\nimport { InventoryStatusGroup } from '@console/shared/src/components/dashboard/inventory-card/status-group';\nimport { MachineKind, NodeKind } from '@console/internal/module/k8s';\nimport { getName } from '@console/shared/src/selectors/common';\nimport { getNodeMachineName } from '@console/shared/src/selectors/node';\nimport { createBasicLookup } from '@console/shared/src/utils/utils';\nimport { getHostStatus } from '../../../status/host-status';\nimport { HOST_ERROR_STATES, HOST_PROGRESS_STATES, HOST_SUCCESS_STATES } from '../../../constants';\nimport { getHostMachine, getNodeMaintenanceNodeName } from '../../../selectors';\nimport { getHostFilterStatus } from '../table-filters';\nimport { BareMetalHostKind } from '../../../types';\n\nconst BMH_STATUS_GROUP_MAPPER = {\n  [InventoryStatusGroup.NOT_MAPPED]: HOST_SUCCESS_STATES,\n  [InventoryStatusGroup.PROGRESS]: HOST_PROGRESS_STATES,\n  [InventoryStatusGroup.ERROR]: HOST_ERROR_STATES,\n  'node-maintenance': ['maintenance'],\n};\n\nexport const getBMHStatusGroups: StatusGroupMapper = (\n  hosts: BareMetalHostKind[],\n  { machines, nodes, maintenances },\n) => {\n  const groups = {\n    [InventoryStatusGroup.NOT_MAPPED]: {\n      statusIDs: ['ready', 'provisioned'],\n      count: 0,\n      filterType: 'host-status',\n    },\n    [InventoryStatusGroup.ERROR]: {\n      statusIDs: ['error'],\n      count: 0,\n      filterType: 'host-status',\n    },\n    [InventoryStatusGroup.PROGRESS]: {\n      statusIDs: ['registering', 'provisioning'],\n      count: 0,\n      filterType: 'host-status',\n    },\n    [InventoryStatusGroup.UNKNOWN]: {\n      statusIDs: ['other'],\n      count: 0,\n      filterType: 'host-status',\n    },\n    'node-maintenance': {\n      statusIDs: ['maintenance'],\n      count: 0,\n      filterType: 'host-status',\n    },\n  };\n\n  const maintenancesByNodeName = createBasicLookup(maintenances, getNodeMaintenanceNodeName);\n  const nodesByMachineName = createBasicLookup(nodes, getNodeMachineName);\n\n  hosts.forEach((host) => {\n    // TODO(jtomasek): replace this with createLookup once there is metal3.io/BareMetalHost annotation\n    // on machines\n    const machine = getHostMachine(host, machines as MachineKind[]);\n    const node = nodesByMachineName[getName(machine)] as NodeKind;\n    const nodeMaintenance = maintenancesByNodeName[getName(node)];\n    const bareMetalHostStatus = getHostStatus({ host, nodeMaintenance });\n\n    const status = getHostFilterStatus({\n      machine,\n      node,\n      host,\n      nodeMaintenance,\n      status: bareMetalHostStatus,\n    });\n    const group =\n      Object.keys(BMH_STATUS_GROUP_MAPPER).find((key) =>\n        BMH_STATUS_GROUP_MAPPER[key].includes(status),\n      ) || InventoryStatusGroup.NOT_MAPPED;\n    groups[group].count++;\n  });\n\n  return groups;\n};\n"]}]}