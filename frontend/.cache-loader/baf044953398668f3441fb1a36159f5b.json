{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/actions/ui.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/actions/ui.ts","mtime":1616735742460},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Base64 } from 'js-base64';\nimport { action } from 'typesafe-actions';\nimport * as _ from 'lodash-es';\n// FIXME(alecmerdler): Do not `import store`\nimport store from '../redux';\nimport { history } from '../components/utils/router';\nimport { ALL_NAMESPACES_KEY, LAST_NAMESPACE_NAME_LOCAL_STORAGE_KEY, LAST_PERSPECTIVE_LOCAL_STORAGE_KEY, LAST_CLUSTER_LOCAL_STORAGE_KEY, } from '@console/shared/src/constants';\nimport { allModels } from '../module/k8s/k8s-models';\nimport { detectFeatures, clearSSARFlags } from './features';\nimport { setClusterID, setCreateProjectMessage, setUser, setConsoleLinks } from './common';\nexport var ActionType;\n(function (ActionType) {\n    ActionType[\"DismissOverviewDetails\"] = \"dismissOverviewDetails\";\n    ActionType[\"SelectOverviewDetailsTab\"] = \"selectOverviewDetailsTab\";\n    ActionType[\"SelectOverviewItem\"] = \"selectOverviewItem\";\n    ActionType[\"SetActiveApplication\"] = \"setActiveApplication\";\n    ActionType[\"SetActiveNamespace\"] = \"setActiveNamespace\";\n    ActionType[\"SetActivePerspective\"] = \"setActivePerspective\";\n    ActionType[\"SetCreateProjectMessage\"] = \"setCreateProjectMessage\";\n    ActionType[\"SetCurrentLocation\"] = \"setCurrentLocation\";\n    ActionType[\"MonitoringDashboardsClearVariables\"] = \"monitoringDashboardsClearVariables\";\n    ActionType[\"MonitoringDashboardsPatchVariable\"] = \"monitoringDashboardsPatchVariable\";\n    ActionType[\"MonitoringDashboardsPatchAllVariables\"] = \"monitoringDashboardsPatchAllVariables\";\n    ActionType[\"MonitoringDashboardsSetPollInterval\"] = \"monitoringDashboardsSetPollInterval\";\n    ActionType[\"MonitoringDashboardsSetTimespan\"] = \"monitoringDashboardsSetTimespan\";\n    ActionType[\"MonitoringDashboardsVariableOptionsLoaded\"] = \"monitoringDashboardsVariableOptionsLoaded\";\n    ActionType[\"MonitoringSetRules\"] = \"monitoringSetRules\";\n    ActionType[\"SetMonitoringData\"] = \"setMonitoringData\";\n    ActionType[\"ToggleMonitoringGraphs\"] = \"monitoringToggleGraphs\";\n    ActionType[\"NotificationDrawerToggleExpanded\"] = \"notificationDrawerExpanded\";\n    ActionType[\"NotificationDrawerToggleRead\"] = \"notificationDrawerRead\";\n    ActionType[\"QueryBrowserAddQuery\"] = \"queryBrowserAddQuery\";\n    ActionType[\"QueryBrowserDeleteAllQueries\"] = \"queryBrowserDeleteAllQueries\";\n    ActionType[\"QueryBrowserDeleteQuery\"] = \"queryBrowserDeleteQuery\";\n    ActionType[\"QueryBrowserDismissNamespaceAlert\"] = \"queryBrowserDismissNamespaceAlert\";\n    ActionType[\"QueryBrowserInsertText\"] = \"queryBrowserInsertText\";\n    ActionType[\"QueryBrowserPatchQuery\"] = \"queryBrowserPatchQuery\";\n    ActionType[\"QueryBrowserRunQueries\"] = \"queryBrowserRunQueries\";\n    ActionType[\"QueryBrowserSetAllExpanded\"] = \"queryBrowserSetAllExpanded\";\n    ActionType[\"QueryBrowserSetMetrics\"] = \"queryBrowserSetMetrics\";\n    ActionType[\"QueryBrowserToggleIsEnabled\"] = \"queryBrowserToggleIsEnabled\";\n    ActionType[\"QueryBrowserToggleSeries\"] = \"queryBrowserToggleSeries\";\n    ActionType[\"SetClusterID\"] = \"setClusterID\";\n    ActionType[\"SetUser\"] = \"setUser\";\n    ActionType[\"SortList\"] = \"sortList\";\n    ActionType[\"BeginImpersonate\"] = \"beginImpersonate\";\n    ActionType[\"EndImpersonate\"] = \"endImpersonate\";\n    ActionType[\"UpdateOverviewMetrics\"] = \"updateOverviewMetrics\";\n    ActionType[\"UpdateOverviewResources\"] = \"updateOverviewResources\";\n    ActionType[\"UpdateOverviewSelectedGroup\"] = \"updateOverviewSelectedGroup\";\n    ActionType[\"UpdateOverviewLabels\"] = \"updateOverviewLabels\";\n    ActionType[\"UpdateOverviewFilterValue\"] = \"updateOverviewFilterValue\";\n    ActionType[\"UpdateTimestamps\"] = \"updateTimestamps\";\n    ActionType[\"SetConsoleLinks\"] = \"setConsoleLinks\";\n    ActionType[\"SetPodMetrics\"] = \"setPodMetrics\";\n    ActionType[\"SetNamespaceMetrics\"] = \"setNamespaceMetrics\";\n    ActionType[\"SetNodeMetrics\"] = \"setNodeMetrics\";\n    ActionType[\"SetPinnedResources\"] = \"setPinnedResources\";\n    ActionType[\"SetActiveCluster\"] = \"setActiveCluster\";\n})(ActionType || (ActionType = {}));\n// URL routes that can be namespaced\nexport const namespacedResources = new Set();\nallModels().forEach((v, k) => {\n    if (!v.namespaced) {\n        return;\n    }\n    if (v.crd) {\n        namespacedResources.add(k);\n    }\n    if (!v.crd || v.legacyPluralURL) {\n        namespacedResources.add(v.plural);\n    }\n});\nexport const getActiveNamespace = () => store.getState().UI.get('activeNamespace');\nexport const getNamespaceMetric = (ns, metric) => {\n    const metrics = store.getState().UI.getIn(['metrics', 'namespace']);\n    return _.get(metrics, [metric, ns.metadata.name], 0);\n};\nexport const getPodMetric = (pod, metric) => {\n    var _a, _b, _c;\n    const metrics = store.getState().UI.getIn(['metrics', 'pod']);\n    return (_c = (_b = (_a = metrics === null || metrics === void 0 ? void 0 : metrics[metric]) === null || _a === void 0 ? void 0 : _a[pod.metadata.namespace]) === null || _b === void 0 ? void 0 : _b[pod.metadata.name]) !== null && _c !== void 0 ? _c : 0;\n};\nexport const getNodeMetric = (node, metric) => {\n    var _a, _b;\n    const metrics = store.getState().UI.getIn(['metrics', 'node']);\n    return (_b = (_a = metrics === null || metrics === void 0 ? void 0 : metrics[metric]) === null || _a === void 0 ? void 0 : _a[node.metadata.name]) !== null && _b !== void 0 ? _b : 0;\n};\nexport const formatNamespaceRoute = (activeNamespace, originalPath, location) => {\n    let path = originalPath.substr(window.SERVER_FLAGS.basePath.length);\n    let parts = path.split('/').filter((p) => p);\n    const prefix = parts.shift();\n    let previousNS;\n    if (parts[0] === 'all-namespaces') {\n        parts.shift();\n        previousNS = ALL_NAMESPACES_KEY;\n    }\n    else if (parts[0] === 'ns') {\n        parts.shift();\n        previousNS = parts.shift();\n    }\n    if (!previousNS) {\n        return originalPath;\n    }\n    if ((previousNS !== activeNamespace &&\n        (parts[1] !== 'new' || activeNamespace !== ALL_NAMESPACES_KEY)) ||\n        (activeNamespace === ALL_NAMESPACES_KEY && parts[1] === 'new')) {\n        // a given resource will not exist when we switch namespaces, so pop off the tail end\n        parts = parts.slice(0, 1);\n    }\n    const namespacePrefix = activeNamespace === ALL_NAMESPACES_KEY ? 'all-namespaces' : `ns/${activeNamespace}`;\n    path = `/${prefix}/${namespacePrefix}`;\n    if (parts.length) {\n        path += `/${parts.join('/')}`;\n    }\n    if (location) {\n        path += `${location.search}${location.hash}`;\n    }\n    return path;\n};\nexport const setCurrentLocation = (location) => action(ActionType.SetCurrentLocation, { location });\nexport const setActiveApplication = (application) => {\n    return action(ActionType.SetActiveApplication, { application });\n};\nexport const setActiveNamespace = (namespace = '') => {\n    namespace = namespace.trim();\n    // make it noop when new active namespace is the same\n    // otherwise users will get page refresh and cry about\n    // broken direct links and bookmarks\n    if (namespace !== getActiveNamespace()) {\n        const oldPath = window.location.pathname;\n        const newPath = formatNamespaceRoute(namespace, oldPath, window.location);\n        if (newPath !== oldPath) {\n            history.pushPath(newPath);\n        }\n        // remember the most recently-viewed project, which is automatically\n        // selected when returning to the console\n        localStorage.setItem(LAST_NAMESPACE_NAME_LOCAL_STORAGE_KEY, namespace);\n    }\n    return action(ActionType.SetActiveNamespace, { namespace });\n};\nexport const getActivePerspective = () => store.getState().UI.get('activePerspective');\nexport const setActivePerspective = (perspective) => {\n    // remember the most recently-viewed perspective, which is automatically\n    // selected when returning to the console\n    localStorage.setItem(LAST_PERSPECTIVE_LOCAL_STORAGE_KEY, perspective);\n    return action(ActionType.SetActivePerspective, { perspective });\n};\nexport const getActiveCluster = () => store.getState().UI.get('activeCluster');\nexport const setActiveCluster = (cluster) => {\n    localStorage.setItem(LAST_CLUSTER_LOCAL_STORAGE_KEY, cluster);\n    return action(ActionType.SetActiveCluster, { cluster });\n};\nexport const setPinnedResources = (resources) => {\n    return action(ActionType.SetPinnedResources, { resources });\n};\nexport const beginImpersonate = (kind, name, subprotocols) => action(ActionType.BeginImpersonate, { kind, name, subprotocols });\nexport const endImpersonate = () => action(ActionType.EndImpersonate);\nexport const startImpersonate = (kind, name) => (dispatch, getState) => __awaiter(void 0, void 0, void 0, function* () {\n    let textEncoder;\n    try {\n        textEncoder = new TextEncoder();\n    }\n    catch (e) {\n        // eslint-disable-next-line no-console\n        console.info('Browser lacks TextEncoder. Falling back to polyfill.', e);\n    }\n    if (!textEncoder) {\n        textEncoder = yield import('text-encoding').then((module) => new module.TextEncoder('utf-8'));\n    }\n    const imp = getState().UI.get('impersonate', {});\n    if ((imp.name && imp.name !== name) || (imp.kin && imp.kind !== kind)) {\n        // eslint-disable-next-line no-console\n        console.warn(`Impersonate race detected: ${name} vs ${imp.name} / ${kind} ${imp.kind}`);\n        return;\n    }\n    /**\n     * Subprotocols are comma-separated, so commas aren't allowed. Also \"=\"\n     * and \"/\" aren't allowed, so base64 but replace illegal chars.\n     */\n    let encodedName = textEncoder.encode(name);\n    encodedName = Base64.encode(String.fromCharCode.apply(String, encodedName));\n    encodedName = encodedName.replace(/=/g, '_').replace(/\\//g, '-');\n    let subprotocols;\n    if (kind === 'User') {\n        subprotocols = [`Impersonate-User.${encodedName}`];\n    }\n    if (kind === 'Group') {\n        subprotocols = [`Impersonate-Group.${encodedName}`];\n    }\n    dispatch(beginImpersonate(kind, name, subprotocols));\n    dispatch(clearSSARFlags());\n    dispatch(detectFeatures());\n    history.push(window.SERVER_FLAGS.basePath);\n});\nexport const stopImpersonate = () => (dispatch) => {\n    dispatch(endImpersonate());\n    dispatch(clearSSARFlags());\n    dispatch(detectFeatures());\n    history.push(window.SERVER_FLAGS.basePath);\n};\nexport const sortList = (listId, field, func, orderBy, column) => {\n    const url = new URL(window.location.href);\n    const sp = new URLSearchParams(window.location.search);\n    sp.set('orderBy', orderBy);\n    sp.set('sortBy', column);\n    history.replace(`${url.pathname}?${sp.toString()}${url.hash}`);\n    return action(ActionType.SortList, { listId, field, func, orderBy });\n};\nexport const selectOverviewItem = (uid) => action(ActionType.SelectOverviewItem, { uid });\nexport const selectOverviewDetailsTab = (tab) => action(ActionType.SelectOverviewDetailsTab, { tab });\nexport const updateOverviewMetrics = (metrics) => action(ActionType.UpdateOverviewMetrics, { metrics });\nexport const updateOverviewResources = (resources) => action(ActionType.UpdateOverviewResources, { resources });\nexport const updateTimestamps = (lastTick) => action(ActionType.UpdateTimestamps, { lastTick });\nexport const dismissOverviewDetails = () => action(ActionType.DismissOverviewDetails);\nexport const updateOverviewSelectedGroup = (group) => action(ActionType.UpdateOverviewSelectedGroup, { group });\nexport const updateOverviewLabels = (labels) => action(ActionType.UpdateOverviewLabels, { labels });\nexport const updateOverviewFilterValue = (value) => action(ActionType.UpdateOverviewFilterValue, { value });\nexport const monitoringDashboardsClearVariables = () => action(ActionType.MonitoringDashboardsClearVariables);\nexport const monitoringDashboardsPatchVariable = (key, patch) => action(ActionType.MonitoringDashboardsPatchVariable, { key, patch });\nexport const monitoringDashboardsPatchAllVariables = (variables) => action(ActionType.MonitoringDashboardsPatchAllVariables, { variables });\nexport const monitoringDashboardsSetPollInterval = (pollInterval) => action(ActionType.MonitoringDashboardsSetPollInterval, { pollInterval });\nexport const monitoringDashboardsSetTimespan = (timespan) => action(ActionType.MonitoringDashboardsSetTimespan, { timespan });\nexport const monitoringDashboardsVariableOptionsLoaded = (key, newOptions) => action(ActionType.MonitoringDashboardsVariableOptionsLoaded, { key, newOptions });\nexport const monitoringLoading = (key) => action(ActionType.SetMonitoringData, {\n    key,\n    data: { loaded: false, loadError: null, data: null },\n});\nexport const monitoringLoaded = (key, data) => action(ActionType.SetMonitoringData, { key, data: { loaded: true, loadError: null, data } });\nexport const monitoringErrored = (key, loadError) => action(ActionType.SetMonitoringData, { key, data: { loaded: true, loadError, data: null } });\nexport const monitoringSetRules = (rules) => action(ActionType.MonitoringSetRules, { rules });\nexport const monitoringToggleGraphs = () => action(ActionType.ToggleMonitoringGraphs);\nexport const notificationDrawerToggleExpanded = () => action(ActionType.NotificationDrawerToggleExpanded);\nexport const notificationDrawerToggleRead = () => action(ActionType.NotificationDrawerToggleRead);\nexport const queryBrowserAddQuery = () => action(ActionType.QueryBrowserAddQuery);\nexport const queryBrowserDeleteAllQueries = () => action(ActionType.QueryBrowserDeleteAllQueries);\nexport const queryBrowserDismissNamespaceAlert = () => action(ActionType.QueryBrowserDismissNamespaceAlert);\nexport const queryBrowserDeleteQuery = (index) => action(ActionType.QueryBrowserDeleteQuery, { index });\nexport const queryBrowserInsertText = (index, newText, replaceFrom, replaceTo) => {\n    return action(ActionType.QueryBrowserInsertText, { index, newText, replaceFrom, replaceTo });\n};\nexport const queryBrowserPatchQuery = (index, patch) => {\n    return action(ActionType.QueryBrowserPatchQuery, { index, patch });\n};\nexport const queryBrowserRunQueries = () => action(ActionType.QueryBrowserRunQueries);\nexport const queryBrowserSetAllExpanded = (isExpanded) => {\n    return action(ActionType.QueryBrowserSetAllExpanded, { isExpanded });\n};\nexport const queryBrowserSetMetrics = (metrics) => action(ActionType.QueryBrowserSetMetrics, { metrics });\nexport const queryBrowserToggleIsEnabled = (index) => action(ActionType.QueryBrowserToggleIsEnabled, { index });\nexport const queryBrowserToggleSeries = (index, labels) => {\n    return action(ActionType.QueryBrowserToggleSeries, { index, labels });\n};\nexport const setPodMetrics = (podMetrics) => action(ActionType.SetPodMetrics, { podMetrics });\nexport const setNamespaceMetrics = (namespaceMetrics) => action(ActionType.SetNamespaceMetrics, { namespaceMetrics });\nexport const setNodeMetrics = (nodeMetrics) => action(ActionType.SetNodeMetrics, { nodeMetrics });\n// TODO(alecmerdler): Implement all actions using `typesafe-actions` and add them to this export\nconst uiActions = {\n    setCurrentLocation,\n    setActiveApplication,\n    setActiveNamespace,\n    setActivePerspective,\n    beginImpersonate,\n    endImpersonate,\n    sortList,\n    setCreateProjectMessage,\n    setClusterID,\n    setUser,\n    selectOverviewItem,\n    selectOverviewDetailsTab,\n    updateOverviewMetrics,\n    updateOverviewResources,\n    updateTimestamps,\n    dismissOverviewDetails,\n    updateOverviewSelectedGroup,\n    updateOverviewLabels,\n    updateOverviewFilterValue,\n    monitoringDashboardsClearVariables,\n    monitoringDashboardsPatchVariable,\n    monitoringDashboardsPatchAllVariables,\n    monitoringDashboardsSetPollInterval,\n    monitoringDashboardsSetTimespan,\n    monitoringDashboardsVariableOptionsLoaded,\n    monitoringLoading,\n    monitoringLoaded,\n    monitoringErrored,\n    monitoringSetRules,\n    monitoringToggleGraphs,\n    queryBrowserAddQuery,\n    queryBrowserDeleteAllQueries,\n    queryBrowserDeleteQuery,\n    queryBrowserDismissNamespaceAlert,\n    queryBrowserInsertText,\n    queryBrowserPatchQuery,\n    queryBrowserRunQueries,\n    queryBrowserSetAllExpanded,\n    queryBrowserSetMetrics,\n    queryBrowserToggleIsEnabled,\n    queryBrowserToggleSeries,\n    setConsoleLinks,\n    setPodMetrics,\n    setNamespaceMetrics,\n    setNodeMetrics,\n    notificationDrawerToggleExpanded,\n    notificationDrawerToggleRead,\n    setPinnedResources,\n    setActiveCluster,\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/actions/ui.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/actions/ui.ts"],"names":[],"mappings":"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","sourcesContent":["import { Base64 } from 'js-base64';\nimport { action, ActionType as Action } from 'typesafe-actions';\nimport * as _ from 'lodash-es';\n\n// FIXME(alecmerdler): Do not `import store`\nimport store from '../redux';\nimport { history } from '../components/utils/router';\nimport { OverviewItem } from '@console/shared';\nimport {\n  ALL_NAMESPACES_KEY,\n  LAST_NAMESPACE_NAME_LOCAL_STORAGE_KEY,\n  LAST_PERSPECTIVE_LOCAL_STORAGE_KEY,\n  LAST_CLUSTER_LOCAL_STORAGE_KEY,\n} from '@console/shared/src/constants';\nimport { K8sResourceKind, PodKind, NodeKind } from '../module/k8s';\nimport { allModels } from '../module/k8s/k8s-models';\nimport { detectFeatures, clearSSARFlags } from './features';\nimport { OverviewSpecialGroup } from '../components/overview/constants';\nimport { setClusterID, setCreateProjectMessage, setUser, setConsoleLinks } from './common';\n\nexport enum ActionType {\n  DismissOverviewDetails = 'dismissOverviewDetails',\n  SelectOverviewDetailsTab = 'selectOverviewDetailsTab',\n  SelectOverviewItem = 'selectOverviewItem',\n  SetActiveApplication = 'setActiveApplication',\n  SetActiveNamespace = 'setActiveNamespace',\n  SetActivePerspective = 'setActivePerspective',\n  SetCreateProjectMessage = 'setCreateProjectMessage',\n  SetCurrentLocation = 'setCurrentLocation',\n  MonitoringDashboardsClearVariables = 'monitoringDashboardsClearVariables',\n  MonitoringDashboardsPatchVariable = 'monitoringDashboardsPatchVariable',\n  MonitoringDashboardsPatchAllVariables = 'monitoringDashboardsPatchAllVariables',\n  MonitoringDashboardsSetPollInterval = 'monitoringDashboardsSetPollInterval',\n  MonitoringDashboardsSetTimespan = 'monitoringDashboardsSetTimespan',\n  MonitoringDashboardsVariableOptionsLoaded = 'monitoringDashboardsVariableOptionsLoaded',\n  MonitoringSetRules = 'monitoringSetRules',\n  SetMonitoringData = 'setMonitoringData',\n  ToggleMonitoringGraphs = 'monitoringToggleGraphs',\n  NotificationDrawerToggleExpanded = 'notificationDrawerExpanded',\n  NotificationDrawerToggleRead = 'notificationDrawerRead',\n  QueryBrowserAddQuery = 'queryBrowserAddQuery',\n  QueryBrowserDeleteAllQueries = 'queryBrowserDeleteAllQueries',\n  QueryBrowserDeleteQuery = 'queryBrowserDeleteQuery',\n  QueryBrowserDismissNamespaceAlert = 'queryBrowserDismissNamespaceAlert',\n  QueryBrowserInsertText = 'queryBrowserInsertText',\n  QueryBrowserPatchQuery = 'queryBrowserPatchQuery',\n  QueryBrowserRunQueries = 'queryBrowserRunQueries',\n  QueryBrowserSetAllExpanded = 'queryBrowserSetAllExpanded',\n  QueryBrowserSetMetrics = 'queryBrowserSetMetrics',\n  QueryBrowserToggleIsEnabled = 'queryBrowserToggleIsEnabled',\n  QueryBrowserToggleSeries = 'queryBrowserToggleSeries',\n  SetClusterID = 'setClusterID',\n  SetUser = 'setUser',\n  SortList = 'sortList',\n  BeginImpersonate = 'beginImpersonate',\n  EndImpersonate = 'endImpersonate',\n  UpdateOverviewMetrics = 'updateOverviewMetrics',\n  UpdateOverviewResources = 'updateOverviewResources',\n  UpdateOverviewSelectedGroup = 'updateOverviewSelectedGroup',\n  UpdateOverviewLabels = 'updateOverviewLabels',\n  UpdateOverviewFilterValue = 'updateOverviewFilterValue',\n  UpdateTimestamps = 'updateTimestamps',\n  SetConsoleLinks = 'setConsoleLinks',\n  SetPodMetrics = 'setPodMetrics',\n  SetNamespaceMetrics = 'setNamespaceMetrics',\n  SetNodeMetrics = 'setNodeMetrics',\n  SetPinnedResources = 'setPinnedResources',\n  SetActiveCluster = \"setActiveCluster\",\n}\n\ntype MetricValuesByName = {\n  [name: string]: number;\n};\n\nexport type NamespaceMetrics = {\n  cpu: MetricValuesByName;\n  memory: MetricValuesByName;\n};\n\ntype MetricValuesByNamespace = {\n  [namespace: string]: MetricValuesByName;\n};\n\nexport type PodMetrics = {\n  cpu: MetricValuesByNamespace;\n  memory: MetricValuesByNamespace;\n};\n\nexport type NodeMetrics = {\n  cpu: MetricValuesByName;\n  pods: MetricValuesByName;\n  usedMemory: MetricValuesByName;\n  totalMemory: MetricValuesByName;\n  usedStorage: MetricValuesByName;\n  totalStorage: MetricValuesByName;\n};\n\n// URL routes that can be namespaced\nexport const namespacedResources = new Set();\n\nallModels().forEach((v, k) => {\n  if (!v.namespaced) {\n    return;\n  }\n  if (v.crd) {\n    namespacedResources.add(k);\n  }\n  if (!v.crd || v.legacyPluralURL) {\n    namespacedResources.add(v.plural);\n  }\n});\n\nexport const getActiveNamespace = (): string => store.getState().UI.get('activeNamespace');\n\nexport const getNamespaceMetric = (ns: K8sResourceKind, metric: string): number => {\n  const metrics = store.getState().UI.getIn(['metrics', 'namespace']);\n  return _.get(metrics, [metric, ns.metadata.name], 0);\n};\n\nexport const getPodMetric = (pod: PodKind, metric: string): number => {\n  const metrics = store.getState().UI.getIn(['metrics', 'pod']);\n  return metrics?.[metric]?.[pod.metadata.namespace]?.[pod.metadata.name] ?? 0;\n};\n\nexport const getNodeMetric = (node: NodeKind, metric: string): number => {\n  const metrics = store.getState().UI.getIn(['metrics', 'node']);\n  return metrics?.[metric]?.[node.metadata.name] ?? 0;\n};\n\nexport const formatNamespaceRoute = (activeNamespace, originalPath, location?) => {\n  let path = originalPath.substr(window.SERVER_FLAGS.basePath.length);\n\n  let parts = path.split('/').filter((p) => p);\n  const prefix = parts.shift();\n\n  let previousNS;\n  if (parts[0] === 'all-namespaces') {\n    parts.shift();\n    previousNS = ALL_NAMESPACES_KEY;\n  } else if (parts[0] === 'ns') {\n    parts.shift();\n    previousNS = parts.shift();\n  }\n\n  if (!previousNS) {\n    return originalPath;\n  }\n\n  if (\n    (previousNS !== activeNamespace &&\n      (parts[1] !== 'new' || activeNamespace !== ALL_NAMESPACES_KEY)) ||\n    (activeNamespace === ALL_NAMESPACES_KEY && parts[1] === 'new')\n  ) {\n    // a given resource will not exist when we switch namespaces, so pop off the tail end\n    parts = parts.slice(0, 1);\n  }\n\n  const namespacePrefix =\n    activeNamespace === ALL_NAMESPACES_KEY ? 'all-namespaces' : `ns/${activeNamespace}`;\n\n  path = `/${prefix}/${namespacePrefix}`;\n  if (parts.length) {\n    path += `/${parts.join('/')}`;\n  }\n\n  if (location) {\n    path += `${location.search}${location.hash}`;\n  }\n\n  return path;\n};\n\nexport const setCurrentLocation = (location: string) =>\n  action(ActionType.SetCurrentLocation, { location });\n\nexport const setActiveApplication = (application: string) => {\n  return action(ActionType.SetActiveApplication, { application });\n};\n\nexport const setActiveNamespace = (namespace: string = '') => {\n  namespace = namespace.trim();\n  // make it noop when new active namespace is the same\n  // otherwise users will get page refresh and cry about\n  // broken direct links and bookmarks\n  if (namespace !== getActiveNamespace()) {\n    const oldPath = window.location.pathname;\n    const newPath = formatNamespaceRoute(namespace, oldPath, window.location);\n    if (newPath !== oldPath) {\n      history.pushPath(newPath);\n    }\n    // remember the most recently-viewed project, which is automatically\n    // selected when returning to the console\n    localStorage.setItem(LAST_NAMESPACE_NAME_LOCAL_STORAGE_KEY, namespace);\n  }\n\n  return action(ActionType.SetActiveNamespace, { namespace });\n};\n\nexport const getActivePerspective = (): string => store.getState().UI.get('activePerspective');\n\nexport const setActivePerspective = (perspective: string) => {\n  // remember the most recently-viewed perspective, which is automatically\n  // selected when returning to the console\n  localStorage.setItem(LAST_PERSPECTIVE_LOCAL_STORAGE_KEY, perspective);\n  return action(ActionType.SetActivePerspective, { perspective });\n};\n\nexport const getActiveCluster = (): string => store.getState().UI.get('activeCluster');\n\nexport const setActiveCluster = (cluster: string) => {\n  localStorage.setItem(LAST_CLUSTER_LOCAL_STORAGE_KEY, cluster);\n\n  return action(ActionType.SetActiveCluster, { cluster });\n};\n\nexport const setPinnedResources = (resources: string[]) => {\n  return action(ActionType.SetPinnedResources, { resources });\n};\n\nexport const beginImpersonate = (kind: string, name: string, subprotocols: string[]) =>\n  action(ActionType.BeginImpersonate, { kind, name, subprotocols });\nexport const endImpersonate = () => action(ActionType.EndImpersonate);\nexport const startImpersonate = (kind: string, name: string) => async (dispatch, getState) => {\n  let textEncoder;\n  try {\n    textEncoder = new TextEncoder();\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.info('Browser lacks TextEncoder. Falling back to polyfill.', e);\n  }\n\n  if (!textEncoder) {\n    textEncoder = await import('text-encoding').then((module) => new module.TextEncoder('utf-8'));\n  }\n\n  const imp = getState().UI.get('impersonate', {});\n  if ((imp.name && imp.name !== name) || (imp.kin && imp.kind !== kind)) {\n    // eslint-disable-next-line no-console\n    console.warn(`Impersonate race detected: ${name} vs ${imp.name} / ${kind} ${imp.kind}`);\n    return;\n  }\n\n  /**\n   * Subprotocols are comma-separated, so commas aren't allowed. Also \"=\"\n   * and \"/\" aren't allowed, so base64 but replace illegal chars.\n   */\n  let encodedName = textEncoder.encode(name);\n  encodedName = Base64.encode(String.fromCharCode.apply(String, encodedName));\n  encodedName = encodedName.replace(/=/g, '_').replace(/\\//g, '-');\n\n  let subprotocols;\n  if (kind === 'User') {\n    subprotocols = [`Impersonate-User.${encodedName}`];\n  }\n  if (kind === 'Group') {\n    subprotocols = [`Impersonate-Group.${encodedName}`];\n  }\n\n  dispatch(beginImpersonate(kind, name, subprotocols));\n  dispatch(clearSSARFlags());\n  dispatch(detectFeatures());\n  history.push(window.SERVER_FLAGS.basePath);\n};\nexport const stopImpersonate = () => (dispatch) => {\n  dispatch(endImpersonate());\n  dispatch(clearSSARFlags());\n  dispatch(detectFeatures());\n  history.push(window.SERVER_FLAGS.basePath);\n};\nexport const sortList = (\n  listId: string,\n  field: string,\n  func: string,\n  orderBy: string,\n  column: string,\n) => {\n  const url = new URL(window.location.href);\n  const sp = new URLSearchParams(window.location.search);\n  sp.set('orderBy', orderBy);\n  sp.set('sortBy', column);\n  history.replace(`${url.pathname}?${sp.toString()}${url.hash}`);\n\n  return action(ActionType.SortList, { listId, field, func, orderBy });\n};\nexport const selectOverviewItem = (uid: string) => action(ActionType.SelectOverviewItem, { uid });\nexport const selectOverviewDetailsTab = (tab: string) =>\n  action(ActionType.SelectOverviewDetailsTab, { tab });\nexport const updateOverviewMetrics = (metrics: any) =>\n  action(ActionType.UpdateOverviewMetrics, { metrics });\nexport const updateOverviewResources = (resources: OverviewItem[]) =>\n  action(ActionType.UpdateOverviewResources, { resources });\nexport const updateTimestamps = (lastTick: number) =>\n  action(ActionType.UpdateTimestamps, { lastTick });\nexport const dismissOverviewDetails = () => action(ActionType.DismissOverviewDetails);\nexport const updateOverviewSelectedGroup = (group: OverviewSpecialGroup | string) =>\n  action(ActionType.UpdateOverviewSelectedGroup, { group });\nexport const updateOverviewLabels = (labels: string[]) =>\n  action(ActionType.UpdateOverviewLabels, { labels });\nexport const updateOverviewFilterValue = (value: string) =>\n  action(ActionType.UpdateOverviewFilterValue, { value });\nexport const monitoringDashboardsClearVariables = () =>\n  action(ActionType.MonitoringDashboardsClearVariables);\nexport const monitoringDashboardsPatchVariable = (key: string, patch: any) =>\n  action(ActionType.MonitoringDashboardsPatchVariable, { key, patch });\nexport const monitoringDashboardsPatchAllVariables = (variables: any) =>\n  action(ActionType.MonitoringDashboardsPatchAllVariables, { variables });\nexport const monitoringDashboardsSetPollInterval = (pollInterval: number) =>\n  action(ActionType.MonitoringDashboardsSetPollInterval, { pollInterval });\nexport const monitoringDashboardsSetTimespan = (timespan: number) =>\n  action(ActionType.MonitoringDashboardsSetTimespan, { timespan });\nexport const monitoringDashboardsVariableOptionsLoaded = (key: string, newOptions: string[]) =>\n  action(ActionType.MonitoringDashboardsVariableOptionsLoaded, { key, newOptions });\nexport const monitoringLoading = (key: 'alerts' | 'silences' | 'notificationAlerts') =>\n  action(ActionType.SetMonitoringData, {\n    key,\n    data: { loaded: false, loadError: null, data: null },\n  });\nexport const monitoringLoaded = (key: 'alerts' | 'silences' | 'notificationAlerts', data: any) =>\n  action(ActionType.SetMonitoringData, { key, data: { loaded: true, loadError: null, data } });\nexport const monitoringErrored = (\n  key: 'alerts' | 'silences' | 'notificationAlerts',\n  loadError: any,\n) => action(ActionType.SetMonitoringData, { key, data: { loaded: true, loadError, data: null } });\nexport const monitoringSetRules = (rules: any) => action(ActionType.MonitoringSetRules, { rules });\nexport const monitoringToggleGraphs = () => action(ActionType.ToggleMonitoringGraphs);\nexport const notificationDrawerToggleExpanded = () =>\n  action(ActionType.NotificationDrawerToggleExpanded);\nexport const notificationDrawerToggleRead = () => action(ActionType.NotificationDrawerToggleRead);\nexport const queryBrowserAddQuery = () => action(ActionType.QueryBrowserAddQuery);\nexport const queryBrowserDeleteAllQueries = () => action(ActionType.QueryBrowserDeleteAllQueries);\nexport const queryBrowserDismissNamespaceAlert = () =>\n  action(ActionType.QueryBrowserDismissNamespaceAlert);\nexport const queryBrowserDeleteQuery = (index: number) =>\n  action(ActionType.QueryBrowserDeleteQuery, { index });\nexport const queryBrowserInsertText = (\n  index: number,\n  newText: string,\n  replaceFrom: number,\n  replaceTo: number,\n) => {\n  return action(ActionType.QueryBrowserInsertText, { index, newText, replaceFrom, replaceTo });\n};\nexport const queryBrowserPatchQuery = (index: number, patch: { [key: string]: unknown }) => {\n  return action(ActionType.QueryBrowserPatchQuery, { index, patch });\n};\nexport const queryBrowserRunQueries = () => action(ActionType.QueryBrowserRunQueries);\nexport const queryBrowserSetAllExpanded = (isExpanded: boolean) => {\n  return action(ActionType.QueryBrowserSetAllExpanded, { isExpanded });\n};\nexport const queryBrowserSetMetrics = (metrics: string[]) =>\n  action(ActionType.QueryBrowserSetMetrics, { metrics });\nexport const queryBrowserToggleIsEnabled = (index: number) =>\n  action(ActionType.QueryBrowserToggleIsEnabled, { index });\nexport const queryBrowserToggleSeries = (index: number, labels: { [key: string]: unknown }) => {\n  return action(ActionType.QueryBrowserToggleSeries, { index, labels });\n};\nexport const setPodMetrics = (podMetrics: PodMetrics) =>\n  action(ActionType.SetPodMetrics, { podMetrics });\nexport const setNamespaceMetrics = (namespaceMetrics: NamespaceMetrics) =>\n  action(ActionType.SetNamespaceMetrics, { namespaceMetrics });\nexport const setNodeMetrics = (nodeMetrics: NodeMetrics) =>\n  action(ActionType.SetNodeMetrics, { nodeMetrics });\n\n// TODO(alecmerdler): Implement all actions using `typesafe-actions` and add them to this export\nconst uiActions = {\n  setCurrentLocation,\n  setActiveApplication,\n  setActiveNamespace,\n  setActivePerspective,\n  beginImpersonate,\n  endImpersonate,\n  sortList,\n  setCreateProjectMessage,\n  setClusterID,\n  setUser,\n  selectOverviewItem,\n  selectOverviewDetailsTab,\n  updateOverviewMetrics,\n  updateOverviewResources,\n  updateTimestamps,\n  dismissOverviewDetails,\n  updateOverviewSelectedGroup,\n  updateOverviewLabels,\n  updateOverviewFilterValue,\n  monitoringDashboardsClearVariables,\n  monitoringDashboardsPatchVariable,\n  monitoringDashboardsPatchAllVariables,\n  monitoringDashboardsSetPollInterval,\n  monitoringDashboardsSetTimespan,\n  monitoringDashboardsVariableOptionsLoaded,\n  monitoringLoading,\n  monitoringLoaded,\n  monitoringErrored,\n  monitoringSetRules,\n  monitoringToggleGraphs,\n  queryBrowserAddQuery,\n  queryBrowserDeleteAllQueries,\n  queryBrowserDeleteQuery,\n  queryBrowserDismissNamespaceAlert,\n  queryBrowserInsertText,\n  queryBrowserPatchQuery,\n  queryBrowserRunQueries,\n  queryBrowserSetAllExpanded,\n  queryBrowserSetMetrics,\n  queryBrowserToggleIsEnabled,\n  queryBrowserToggleSeries,\n  setConsoleLinks,\n  setPodMetrics,\n  setNamespaceMetrics,\n  setNodeMetrics,\n  notificationDrawerToggleExpanded,\n  notificationDrawerToggleRead,\n  setPinnedResources,\n  setActiveCluster,\n};\n\nexport type UIAction = Action<typeof uiActions>;\n"]}]}