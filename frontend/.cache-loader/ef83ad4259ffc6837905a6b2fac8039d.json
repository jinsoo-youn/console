{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/cloud-shell/setup/NamespaceSection.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/cloud-shell/setup/NamespaceSection.tsx","mtime":1615298458600},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useFormikContext, useField } from 'formik';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { ProjectModel } from '@console/internal/models';\nimport { InputField, ResourceDropdownField, useFormikValidationFix, FLAGS } from '@console/shared';\nimport { CREATE_NAMESPACE_KEY } from './cloud-shell-setup-utils';\nimport { connectToFlags } from '@console/internal/reducers/features';\nconst NamespaceSection = ({ flags }) => {\n    const canCreate = flags[FLAGS.CAN_CREATE_PROJECT];\n    const [namespace] = useField('namespace');\n    const { setFieldValue, setFieldTouched } = useFormikContext();\n    useFormikValidationFix(namespace.value);\n    const onDropdownChange = React.useCallback((key) => {\n        setFieldTouched('namespace', true);\n        setFieldValue('namespace', key);\n    }, [setFieldValue, setFieldTouched]);\n    const handleOnLoad = (projectList) => {\n        const noProjects = _.isEmpty(projectList);\n        if (noProjects || !projectList[namespace.value]) {\n            if (canCreate && namespace.value !== CREATE_NAMESPACE_KEY) {\n                setFieldValue('namespace', CREATE_NAMESPACE_KEY);\n            }\n            if (!canCreate && namespace.value) {\n                setFieldValue('namespace', undefined);\n            }\n        }\n    };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(ResourceDropdownField, { name: \"namespace\", label: \"Project\", placeholder: \"Select Project\", fullWidth: true, required: true, selectedKey: namespace.value, resources: [\n                {\n                    isList: true,\n                    kind: ProjectModel.kind,\n                    prop: ProjectModel.id,\n                },\n            ], dataSelector: ['metadata', 'name'], onChange: onDropdownChange, actionItems: canCreate\n                ? [\n                    {\n                        actionTitle: 'Create Project',\n                        actionKey: CREATE_NAMESPACE_KEY,\n                    },\n                ]\n                : undefined, onLoad: handleOnLoad, helpText: \"This project will be used to initialize your command line terminal\" }),\n        namespace.value === CREATE_NAMESPACE_KEY && (React.createElement(InputField, { type: TextInputTypes.text, required: true, name: \"newNamespace\", label: \"Project Name\" }))));\n};\n// exposed for testing\nexport const InternalNamespaceSection = NamespaceSection;\nexport default connectToFlags(FLAGS.CAN_CREATE_PROJECT)(NamespaceSection);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/cloud-shell/setup/NamespaceSection.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/cloud-shell/setup/NamespaceSection.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useFormikContext, FormikValues, useField } from 'formik';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { ProjectModel } from '@console/internal/models';\nimport { InputField, ResourceDropdownField, useFormikValidationFix, FLAGS } from '@console/shared';\nimport { CREATE_NAMESPACE_KEY } from './cloud-shell-setup-utils';\nimport { connectToFlags, WithFlagsProps } from '@console/internal/reducers/features';\n\ntype NamespaceSectionProps = WithFlagsProps;\n\nconst NamespaceSection: React.FC<NamespaceSectionProps> = ({ flags }) => {\n  const canCreate = flags[FLAGS.CAN_CREATE_PROJECT];\n  const [namespace] = useField('namespace');\n  const { setFieldValue, setFieldTouched } = useFormikContext<FormikValues>();\n\n  useFormikValidationFix(namespace.value);\n\n  const onDropdownChange = React.useCallback(\n    (key: string) => {\n      setFieldTouched('namespace', true);\n      setFieldValue('namespace', key);\n    },\n    [setFieldValue, setFieldTouched],\n  );\n\n  const handleOnLoad = (projectList: { [key: string]: string }) => {\n    const noProjects = _.isEmpty(projectList);\n    if (noProjects || !projectList[namespace.value]) {\n      if (canCreate && namespace.value !== CREATE_NAMESPACE_KEY) {\n        setFieldValue('namespace', CREATE_NAMESPACE_KEY);\n      }\n      if (!canCreate && namespace.value) {\n        setFieldValue('namespace', undefined);\n      }\n    }\n  };\n\n  return (\n    <>\n      <ResourceDropdownField\n        name=\"namespace\"\n        label=\"Project\"\n        placeholder=\"Select Project\"\n        fullWidth\n        required\n        selectedKey={namespace.value}\n        resources={[\n          {\n            isList: true,\n            kind: ProjectModel.kind,\n            prop: ProjectModel.id,\n          },\n        ]}\n        dataSelector={['metadata', 'name']}\n        onChange={onDropdownChange}\n        actionItems={\n          canCreate\n            ? [\n                {\n                  actionTitle: 'Create Project',\n                  actionKey: CREATE_NAMESPACE_KEY,\n                },\n              ]\n            : undefined\n        }\n        onLoad={handleOnLoad}\n        helpText=\"This project will be used to initialize your command line terminal\"\n      />\n      {namespace.value === CREATE_NAMESPACE_KEY && (\n        <InputField type={TextInputTypes.text} required name=\"newNamespace\" label=\"Project Name\" />\n      )}\n    </>\n  );\n};\n\n// exposed for testing\nexport const InternalNamespaceSection = NamespaceSection;\n\nexport default connectToFlags(FLAGS.CAN_CREATE_PROJECT)(NamespaceSection);\n"]}]}