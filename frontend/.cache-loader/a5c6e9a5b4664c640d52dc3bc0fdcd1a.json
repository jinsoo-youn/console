{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/event-sources/ApiServerSection.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/event-sources/ApiServerSection.tsx","mtime":1616735742400},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useFormikContext } from 'formik';\nimport { FormGroup } from '@patternfly/react-core';\nimport { AsyncComponent } from '@console/internal/components/utils/async';\nimport { DropdownField, getFieldId } from '@console/shared';\nimport FormSection from '@console/dev-console/src/components/import/section/FormSection';\nimport ServiceAccountDropdown from '../../dropdowns/ServiceAccountDropdown';\nconst ApiServerSection = () => {\n    var _a, _b;\n    const { values, setFieldValue } = useFormikContext();\n    const initVal = ((_b = (_a = values === null || values === void 0 ? void 0 : values.data) === null || _a === void 0 ? void 0 : _a.apiserversource) === null || _b === void 0 ? void 0 : _b.resources) || [];\n    const initialValueResources = !_.isEmpty(initVal)\n        ? initVal.map((val) => _.values(val))\n        : [['', '']];\n    const [nameValue, setNameValue] = React.useState(initialValueResources);\n    const handleNameValuePairs = React.useCallback(({ nameValuePairs }) => {\n        const updatedNameValuePairs = _.compact(nameValuePairs.map(([name, value]) => {\n            if (value.length) {\n                return { apiVersion: name, kind: value };\n            }\n            return null;\n        }));\n        setNameValue(nameValuePairs);\n        setFieldValue('data.apiserversource.resources', updatedNameValuePairs);\n    }, [setFieldValue]);\n    const modeItems = {\n        Ref: 'Ref',\n        Resource: 'Resource',\n    };\n    const fieldId = getFieldId(values.type, 'res-input');\n    return (React.createElement(FormSection, { title: \"ApiServerSource\", extraMargin: true },\n        React.createElement(FormGroup, { fieldId: fieldId, label: \"Resource\", helperText: \"The list of resources to watch\", isRequired: true },\n            React.createElement(AsyncComponent, { loader: () => import('@console/internal/components/utils/name-value-editor').then((c) => c.NameValueEditor), nameValuePairs: nameValue, valueString: \"kind\", nameString: \"apiVersion\", addString: \"Add Resource\", readOnly: false, allowSorting: false, updateParentData: handleNameValuePairs })),\n        React.createElement(DropdownField, { name: \"data.apiserversource.mode\", label: \"Mode\", items: modeItems, title: modeItems.Ref, helpText: \"The mode the receive adapter controller runs under\", fullWidth: true }),\n        React.createElement(ServiceAccountDropdown, { name: \"data.apiserversource.serviceAccountName\" })));\n};\nexport default ApiServerSection;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/event-sources/ApiServerSection.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/event-sources/ApiServerSection.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { FormGroup } from '@patternfly/react-core';\nimport { AsyncComponent } from '@console/internal/components/utils/async';\nimport { DropdownField, getFieldId } from '@console/shared';\nimport FormSection from '@console/dev-console/src/components/import/section/FormSection';\nimport ServiceAccountDropdown from '../../dropdowns/ServiceAccountDropdown';\n\nconst ApiServerSection: React.FC = () => {\n  const { values, setFieldValue } = useFormikContext<FormikValues>();\n  const initVal = values?.data?.apiserversource?.resources || [];\n  const initialValueResources = !_.isEmpty(initVal)\n    ? initVal.map((val) => _.values(val))\n    : [['', '']];\n  const [nameValue, setNameValue] = React.useState(initialValueResources);\n  const handleNameValuePairs = React.useCallback(\n    ({ nameValuePairs }) => {\n      const updatedNameValuePairs = _.compact(\n        nameValuePairs.map(([name, value]) => {\n          if (value.length) {\n            return { apiVersion: name, kind: value };\n          }\n          return null;\n        }),\n      );\n      setNameValue(nameValuePairs);\n      setFieldValue('data.apiserversource.resources', updatedNameValuePairs);\n    },\n    [setFieldValue],\n  );\n  const modeItems = {\n    Ref: 'Ref',\n    Resource: 'Resource',\n  };\n  const fieldId = getFieldId(values.type, 'res-input');\n  return (\n    <FormSection title=\"ApiServerSource\" extraMargin>\n      <FormGroup\n        fieldId={fieldId}\n        label=\"Resource\"\n        helperText=\"The list of resources to watch\"\n        isRequired\n      >\n        <AsyncComponent\n          loader={() =>\n            import('@console/internal/components/utils/name-value-editor').then(\n              (c) => c.NameValueEditor,\n            )\n          }\n          nameValuePairs={nameValue}\n          valueString=\"kind\"\n          nameString=\"apiVersion\"\n          addString=\"Add Resource\"\n          readOnly={false}\n          allowSorting={false}\n          updateParentData={handleNameValuePairs}\n        />\n      </FormGroup>\n      <DropdownField\n        name=\"data.apiserversource.mode\"\n        label=\"Mode\"\n        items={modeItems}\n        title={modeItems.Ref}\n        helpText=\"The mode the receive adapter controller runs under\"\n        fullWidth\n      />\n      <ServiceAccountDropdown name=\"data.apiserversource.serviceAccountName\" />\n    </FormSection>\n  );\n};\n\nexport default ApiServerSection;\n"]}]}