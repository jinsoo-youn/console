{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/constants/vm/storage/volume-type.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/constants/vm/storage/volume-type.ts","mtime":1615298458660},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["/* eslint-disable lines-between-class-members */\nimport { ObjectEnum } from '../../object-enum';\nexport class VolumeType extends ObjectEnum {\n}\nVolumeType.CLOUD_INIT_CONFIG_DRIVE = new VolumeType('cloudInitConfigDrive');\nVolumeType.CLOUD_INIT_NO_CLOUD = new VolumeType('cloudInitNoCloud');\nVolumeType.CONFIG_MAP = new VolumeType('configMap');\nVolumeType.CONTAINER_DISK = new VolumeType('containerDisk');\nVolumeType.DATA_VOLUME = new VolumeType('dataVolume');\nVolumeType.EMPTY_DISK = new VolumeType('emptyDisk');\nVolumeType.EPHEMERAL = new VolumeType('ephemeral');\nVolumeType.PERSISTENT_VOLUME_CLAIM = new VolumeType('persistentVolumeClaim');\nVolumeType.SECRET = new VolumeType('secret');\nVolumeType.SERVICE_ACCOUNT = new VolumeType('serviceAccount');\nVolumeType.ALL = Object.freeze(ObjectEnum.getAllClassEnumProperties(VolumeType));\nVolumeType.stringMapper = VolumeType.ALL.reduce((accumulator, volumeType) => (Object.assign(Object.assign({}, accumulator), { [volumeType.value]: volumeType })), {});\nVolumeType.getAll = () => VolumeType.ALL;\nVolumeType.fromString = (model) => VolumeType.stringMapper[model];\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/constants/vm/storage/volume-type.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/constants/vm/storage/volume-type.ts"],"names":[],"mappings":"AAAA,gDAAgD;AAChD,OAAO,EAAE,UAAU,EAAE,MAAM,mBAAmB,CAAC;AAE/C,MAAM,OAAO,UAAW,SAAQ,UAAkB;;AAChC,kCAAuB,GAAG,IAAI,UAAU,CAAC,sBAAsB,CAAC,CAAC;AACjE,8BAAmB,GAAG,IAAI,UAAU,CAAC,kBAAkB,CAAC,CAAC;AACzD,qBAAU,GAAG,IAAI,UAAU,CAAC,WAAW,CAAC,CAAC;AACzC,yBAAc,GAAG,IAAI,UAAU,CAAC,eAAe,CAAC,CAAC;AACjD,sBAAW,GAAG,IAAI,UAAU,CAAC,YAAY,CAAC,CAAC;AAC3C,qBAAU,GAAG,IAAI,UAAU,CAAC,WAAW,CAAC,CAAC;AACzC,oBAAS,GAAG,IAAI,UAAU,CAAC,WAAW,CAAC,CAAC;AACxC,kCAAuB,GAAG,IAAI,UAAU,CAAC,uBAAuB,CAAC,CAAC;AAClE,iBAAM,GAAG,IAAI,UAAU,CAAC,QAAQ,CAAC,CAAC;AAClC,0BAAe,GAAG,IAAI,UAAU,CAAC,gBAAgB,CAAC,CAAC;AAE3C,cAAG,GAAG,MAAM,CAAC,MAAM,CACzC,UAAU,CAAC,yBAAyB,CAAa,UAAU,CAAC,CAC7D,CAAC;AAEsB,uBAAY,GAAG,UAAU,CAAC,GAAG,CAAC,MAAM,CAC1D,CAAC,WAAW,EAAE,UAAsB,EAAE,EAAE,CAAC,iCACpC,WAAW,KACd,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE,UAAU,IAC9B,EACF,EAAE,CACH,CAAC;AAEK,iBAAM,GAAG,GAAG,EAAE,CAAC,UAAU,CAAC,GAAG,CAAC;AAE9B,qBAAU,GAAG,CAAC,KAAa,EAAc,EAAE,CAAC,UAAU,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC","sourcesContent":["/* eslint-disable lines-between-class-members */\nimport { ObjectEnum } from '../../object-enum';\n\nexport class VolumeType extends ObjectEnum<string> {\n  static readonly CLOUD_INIT_CONFIG_DRIVE = new VolumeType('cloudInitConfigDrive');\n  static readonly CLOUD_INIT_NO_CLOUD = new VolumeType('cloudInitNoCloud');\n  static readonly CONFIG_MAP = new VolumeType('configMap');\n  static readonly CONTAINER_DISK = new VolumeType('containerDisk');\n  static readonly DATA_VOLUME = new VolumeType('dataVolume');\n  static readonly EMPTY_DISK = new VolumeType('emptyDisk');\n  static readonly EPHEMERAL = new VolumeType('ephemeral');\n  static readonly PERSISTENT_VOLUME_CLAIM = new VolumeType('persistentVolumeClaim');\n  static readonly SECRET = new VolumeType('secret');\n  static readonly SERVICE_ACCOUNT = new VolumeType('serviceAccount');\n\n  private static readonly ALL = Object.freeze(\n    ObjectEnum.getAllClassEnumProperties<VolumeType>(VolumeType),\n  );\n\n  private static readonly stringMapper = VolumeType.ALL.reduce(\n    (accumulator, volumeType: VolumeType) => ({\n      ...accumulator,\n      [volumeType.value]: volumeType,\n    }),\n    {},\n  );\n\n  static getAll = () => VolumeType.ALL;\n\n  static fromString = (model: string): VolumeType => VolumeType.stringMapper[model];\n}\n"]}]}