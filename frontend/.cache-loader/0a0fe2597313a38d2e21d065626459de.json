{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/dropdown/ApplicationSelector.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/dropdown/ApplicationSelector.tsx","mtime":1615298458610},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { ALL_NAMESPACES_KEY, ALL_APPLICATIONS_KEY, APPLICATION_LOCAL_STORAGE_KEY, } from '@console/shared';\nimport { setActiveApplication } from '@console/internal/actions/ui';\nimport { getActiveNamespace, getActiveApplication } from '@console/internal/reducers/ui';\nimport ApplicationDropdown from './ApplicationDropdown';\nconst ApplicationSelector = ({ namespace, application, onChange, disabled }) => {\n    if (namespace === ALL_NAMESPACES_KEY)\n        return null;\n    const allApplicationsTitle = 'all applications';\n    const title = application === ALL_APPLICATIONS_KEY ? allApplicationsTitle : application;\n    const onApplicationChange = (newApplication, key) => {\n        key === ALL_APPLICATIONS_KEY ? onChange(key) : onChange(newApplication);\n    };\n    return (React.createElement(ApplicationDropdown, { className: \"co-namespace-selector\", menuClassName: \"co-namespace-selector__menu\", buttonClassName: \"pf-m-plain\", namespace: namespace, title: title && React.createElement(\"span\", { className: \"btn-link__title\" }, title), titlePrefix: \"Application\", allSelectorItem: {\n            allSelectorKey: ALL_APPLICATIONS_KEY,\n            allSelectorTitle: allApplicationsTitle,\n        }, selectedKey: application || ALL_APPLICATIONS_KEY, onChange: onApplicationChange, storageKey: APPLICATION_LOCAL_STORAGE_KEY, disabled: disabled }));\n};\nconst mapStateToProps = (state) => ({\n    namespace: getActiveNamespace(state),\n    application: getActiveApplication(state),\n});\nconst mapDispatchToProps = (dispatch) => ({\n    onChange: (app) => {\n        dispatch(setActiveApplication(app));\n    },\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(ApplicationSelector);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/dropdown/ApplicationSelector.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/dropdown/ApplicationSelector.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,OAAO,EAAY,MAAM,aAAa,CAAC;AAChD,OAAO,EACL,kBAAkB,EAClB,oBAAoB,EACpB,6BAA6B,GAC9B,MAAM,iBAAiB,CAAC;AACzB,OAAO,EAAE,oBAAoB,EAAE,MAAM,8BAA8B,CAAC;AAEpE,OAAO,EAAE,kBAAkB,EAAE,oBAAoB,EAAE,MAAM,+BAA+B,CAAC;AACzF,OAAO,mBAAmB,MAAM,uBAAuB,CAAC;AAiBxD,MAAM,mBAAmB,GAAoB,CAAC,EAAE,SAAS,EAAE,WAAW,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE,EAAE;IAC9F,IAAI,SAAS,KAAK,kBAAkB;QAAE,OAAO,IAAI,CAAC;IAElD,MAAM,oBAAoB,GAAG,kBAAkB,CAAC;IAChD,MAAM,KAAK,GAAW,WAAW,KAAK,oBAAoB,CAAC,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,WAAW,CAAC;IAEhG,MAAM,mBAAmB,GAAG,CAAC,cAAsB,EAAE,GAAW,EAAE,EAAE;QAClE,GAAG,KAAK,oBAAoB,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAC,CAAC;IAC1E,CAAC,CAAC;IAEF,OAAO,CACL,oBAAC,mBAAmB,IAClB,SAAS,EAAC,uBAAuB,EACjC,aAAa,EAAC,6BAA6B,EAC3C,eAAe,EAAC,YAAY,EAC5B,SAAS,EAAE,SAAS,EACpB,KAAK,EAAE,KAAK,IAAI,8BAAM,SAAS,EAAC,iBAAiB,IAAE,KAAK,CAAQ,EAChE,WAAW,EAAC,aAAa,EACzB,eAAe,EAAE;YACf,cAAc,EAAE,oBAAoB;YACpC,gBAAgB,EAAE,oBAAoB;SACvC,EACD,WAAW,EAAE,WAAW,IAAI,oBAAoB,EAChD,QAAQ,EAAE,mBAAmB,EAC7B,UAAU,EAAE,6BAA6B,EACzC,QAAQ,EAAE,QAAQ,GAClB,CACH,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,eAAe,GAAG,CAAC,KAAgB,EAAc,EAAE,CAAC,CAAC;IACzD,SAAS,EAAE,kBAAkB,CAAC,KAAK,CAAC;IACpC,WAAW,EAAE,oBAAoB,CAAC,KAAK,CAAC;CACzC,CAAC,CAAC;AAEH,MAAM,kBAAkB,GAAG,CAAC,QAAkB,EAAiB,EAAE,CAAC,CAAC;IACjE,QAAQ,EAAE,CAAC,GAAW,EAAE,EAAE;QACxB,QAAQ,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC,CAAC;IACtC,CAAC;CACF,CAAC,CAAC;AAEH,eAAe,OAAO,CACpB,eAAe,EACf,kBAAkB,CACnB,CAAC,mBAAmB,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { connect, Dispatch } from 'react-redux';\nimport {\n  ALL_NAMESPACES_KEY,\n  ALL_APPLICATIONS_KEY,\n  APPLICATION_LOCAL_STORAGE_KEY,\n} from '@console/shared';\nimport { setActiveApplication } from '@console/internal/actions/ui';\nimport { RootState } from '@console/internal/redux';\nimport { getActiveNamespace, getActiveApplication } from '@console/internal/reducers/ui';\nimport ApplicationDropdown from './ApplicationDropdown';\n\nexport interface ApplicationSelectorProps {\n  disabled?: boolean;\n}\n\ninterface StateProps {\n  namespace: string;\n  application: string;\n}\n\ninterface DispatchProps {\n  onChange: (name: string) => void;\n}\n\ntype Props = ApplicationSelectorProps & StateProps & DispatchProps;\n\nconst ApplicationSelector: React.FC<Props> = ({ namespace, application, onChange, disabled }) => {\n  if (namespace === ALL_NAMESPACES_KEY) return null;\n\n  const allApplicationsTitle = 'all applications';\n  const title: string = application === ALL_APPLICATIONS_KEY ? allApplicationsTitle : application;\n\n  const onApplicationChange = (newApplication: string, key: string) => {\n    key === ALL_APPLICATIONS_KEY ? onChange(key) : onChange(newApplication);\n  };\n\n  return (\n    <ApplicationDropdown\n      className=\"co-namespace-selector\"\n      menuClassName=\"co-namespace-selector__menu\"\n      buttonClassName=\"pf-m-plain\"\n      namespace={namespace}\n      title={title && <span className=\"btn-link__title\">{title}</span>}\n      titlePrefix=\"Application\"\n      allSelectorItem={{\n        allSelectorKey: ALL_APPLICATIONS_KEY,\n        allSelectorTitle: allApplicationsTitle,\n      }}\n      selectedKey={application || ALL_APPLICATIONS_KEY}\n      onChange={onApplicationChange}\n      storageKey={APPLICATION_LOCAL_STORAGE_KEY}\n      disabled={disabled}\n    />\n  );\n};\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  namespace: getActiveNamespace(state),\n  application: getActiveApplication(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => ({\n  onChange: (app: string) => {\n    dispatch(setActiveApplication(app));\n  },\n});\n\nexport default connect<StateProps, DispatchProps, ApplicationSelectorProps>(\n  mapStateToProps,\n  mapDispatchToProps,\n)(ApplicationSelector);\n"]}]}