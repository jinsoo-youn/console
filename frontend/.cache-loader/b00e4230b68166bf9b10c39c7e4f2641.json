{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/alert-manager-config.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/alert-manager-config.tsx","mtime":1615298458740},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/* eslint-disable camelcase */\nimport * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as fuzzy from 'fuzzysearch';\nimport { Link } from 'react-router-dom';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { Alert, Button, EmptyState, EmptyStateBody, EmptyStateVariant, Title, } from '@patternfly/react-core';\nimport { history, Kebab, MsgBox, SectionHeading, StatusBox } from '../utils';\nimport { confirmModal, createAlertRoutingModal } from '../modals';\nimport { Table, TableData, TableRow, TextFilter } from '../factory';\nimport { getAlertmanagerConfig, patchAlertmanagerConfig, receiverTypes, } from './alert-manager-utils';\nimport { Helmet } from 'react-helmet';\nimport { PencilAltIcon } from '@patternfly/react-icons';\nlet secret = null; // alertmanager-main Secret which holds alertmanager configuration yaml\nlet config = null; // alertmanager configuration yaml as object\nexport var InitialReceivers;\n(function (InitialReceivers) {\n    InitialReceivers[\"Critical\"] = \"Critical\";\n    InitialReceivers[\"Default\"] = \"Default\";\n    InitialReceivers[\"Watchdog\"] = \"Watchdog\";\n})(InitialReceivers || (InitialReceivers = {}));\nconst AlertRouting = () => {\n    const groupBy = _.get(config, ['route', 'group_by'], []);\n    return (React.createElement(\"div\", { className: \"co-m-pane__body\" },\n        React.createElement(SectionHeading, { text: \"Alert Routing\" },\n            React.createElement(Button, { className: \"co-alert-manager-config__edit-alert-routing-btn\", onClick: () => createAlertRoutingModal({ config, secret }), variant: \"secondary\" }, \"Edit\")),\n        React.createElement(\"div\", { className: \"row\" },\n            React.createElement(\"div\", { className: \"col-sm-6\" },\n                React.createElement(\"dl\", { className: \"co-m-pane__details\" },\n                    React.createElement(\"dt\", null, \"Group By\"),\n                    React.createElement(\"dd\", { \"data-test-id\": \"group_by_value\" }, _.isEmpty(groupBy) ? '-' : _.join(groupBy, ', ')),\n                    React.createElement(\"dt\", null, \"Group Wait\"),\n                    React.createElement(\"dd\", { \"data-test-id\": \"group_wait_value\" }, _.get(config, ['route', 'group_wait'], '-')))),\n            React.createElement(\"div\", { className: \"col-sm-6\" },\n                React.createElement(\"dl\", { className: \"co-m-pane__details\" },\n                    React.createElement(\"dt\", null, \"Group Interval\"),\n                    React.createElement(\"dd\", { \"data-test-id\": \"group_interval_value\" }, _.get(config, ['route', 'group_interval'], '-')),\n                    React.createElement(\"dt\", null, \"Repeat Interval\"),\n                    React.createElement(\"dd\", { \"data-test-id\": \"repeat_interval_value\" }, _.get(config, ['route', 'repeat_interval'], '-')))))));\n};\nconst tableColumnClasses = [\n    classNames('col-lg-3', 'col-md-3', 'col-sm-6', 'col-xs-6'),\n    classNames('col-lg-3', 'col-md-3', 'hidden-sm', 'hidden-xs', 'text-center', ''),\n    classNames('col-lg-6', 'col-md-6', 'col-sm-6', 'col-xs-6'),\n    Kebab.columnClass,\n];\nconst ReceiverTableHeader = () => {\n    return [\n        {\n            title: 'Name',\n            sortField: 'name',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[0] },\n        },\n        {\n            title: 'Integration Type',\n            props: { className: tableColumnClasses[1] },\n        },\n        {\n            title: 'Routing Labels',\n            props: { className: tableColumnClasses[2] },\n        },\n        {\n            title: '',\n            props: { className: tableColumnClasses[3] },\n        },\n    ];\n};\nReceiverTableHeader.displayName = 'ReceiverTableHeader';\nconst getIntegrationTypes = (receiver) => {\n    /* Given receiver = {\n         \"name\": \"team-X-pager\",\n         \"email_configs\": [...],\n         \"pagerduty_configs\": [...]\n       };\n       returns ['email_configs', 'pagerduty_configs']\n    */\n    return _.filter(_.keys(receiver), (v) => _.endsWith(v, '_configs'));\n};\n/**\n * Recursive function which transverses routes and sub-routes to get labels for each receiver.\n * Each entry is a set of labels used to route alerts to a receiver\n *\n * Ex: returns\n * [{\n *   \"receiver\": \"team-Y-pager\",\n *   \"labels\": {\n *     \"service\": \"database\",\n *     \"owner\": \"team-Y\"\n *   }\n * },\n * {\n *   \"receiver\": \"team-Y-pager\",\n *   \"labels\": {\n *     \"service\": \"files\",\n *     \"severity\": \"critical\"\n *   }\n * }]\n}*/\nconst getRoutingLabelsByReceivers = (routes, parentLabels) => {\n    let results = [];\n    let labels = {};\n    for (const obj of routes) {\n        labels = _.merge({}, parentLabels, obj.match, obj.match_re);\n        results.push({ receiver: obj.receiver, labels });\n        if (obj.routes) {\n            results = results.concat(getRoutingLabelsByReceivers(obj.routes, labels));\n        }\n    }\n    return results;\n};\n/**\n * Is receiver used in a top-level route that has no sub routes, or\n * is receiver not in any route (no routing labels)?\n */\nconst hasSimpleRoute = (receiver, receiverRoutingLabels) => {\n    const routes = _.get(config, ['route', 'routes']);\n    return (_.filter(routes, (route) => {\n        return route.receiver === receiver.name && _.isUndefined(route.routes);\n    }).length > 0 || _.isEmpty(receiverRoutingLabels));\n};\n/**\n * Does receiver contains a single known receiver type (ex: pagerduty_config), which has a single config.\n * No receiver type specified is valid, as well as a single receiver type with no config\n */\nconst hasSimpleReceiver = (receiver, receiverIntegrationTypes) => {\n    if (receiverIntegrationTypes.length === 0) {\n        return true;\n    }\n    else if (receiverIntegrationTypes.length === 1) {\n        const receiverConfig = receiverIntegrationTypes[0]; // ex: 'pagerduty_configs'\n        const numConfigs = _.get(receiver, receiverConfig).length; // 'pagerduty_configs' is array and may have multiple sets of properties\n        return _.hasIn(receiverTypes, receiverConfig) && numConfigs <= 1; // known receiver type and a single set of props\n    }\n    return false;\n};\nconst numberOfIncompleteReceivers = () => {\n    const { route, receivers } = config;\n    const { receiver: defaultReceiverName } = route;\n    // if no receivers or default receiver, then no longer initial setup, hide info alerts\n    if (!receivers || !defaultReceiverName) {\n        return 0;\n    }\n    const defaultReceiver = receivers.filter((receiver) => receiver.name === defaultReceiverName);\n    const criticalReceiver = receivers.filter((receiver) => receiver.name === InitialReceivers.Critical);\n    const numIncompleteReceivers = !_.isEmpty(defaultReceiver) && _.isEmpty(getIntegrationTypes(defaultReceiver[0])) ? 1 : 0;\n    return !_.isEmpty(criticalReceiver) && _.isEmpty(getIntegrationTypes(criticalReceiver[0]))\n        ? numIncompleteReceivers + 1\n        : numIncompleteReceivers;\n};\n// Puts sets of key=value pairs into single comma delimited label\nconst RoutingLabel = ({ labels }) => {\n    let count = 0;\n    const list = _.map(labels, (value, key) => {\n        count++;\n        return key === 'default' ? (React.createElement(\"span\", { key: \"default\", className: \"co-m-label__value\" }, \"All (default receiver)\")) : (React.createElement(React.Fragment, { key: `label-${key}-${value}` },\n            React.createElement(\"span\", { className: \"co-m-label__key\" }, key),\n            React.createElement(\"span\", { className: \"co-m-label__eq\" }, \"=\"),\n            React.createElement(\"span\", { className: \"co-m-label__value\" }, value),\n            count < _.size(labels) && React.createElement(React.Fragment, null, \",\\u00A0\")));\n    });\n    return (React.createElement(\"div\", null,\n        React.createElement(\"div\", { className: \"co-m-label co-m-label--expand\" }, list)));\n};\nconst deleteReceiver = (receiverName) => {\n    // remove any routes which use receiverToDelete\n    _.update(config, 'route.routes', (routes) => {\n        _.remove(routes, (route) => route.receiver === receiverName);\n        return routes;\n    });\n    // delete receiver\n    _.update(config, 'receivers', (receivers) => {\n        _.remove(receivers, (receiver) => receiver.name === receiverName);\n        return receivers;\n    });\n    return patchAlertmanagerConfig(secret, config).then(() => {\n        history.push('/monitoring/alertmanagerconfig');\n    });\n};\nconst receiverMenuItems = (receiverName, canDelete, canUseEditForm) => [\n    {\n        label: `Edit ${canUseEditForm ? 'Receiver' : 'YAML'}`,\n        callback: () => {\n            const targetUrl = canUseEditForm\n                ? `/monitoring/alertmanagerconfig/receivers/${receiverName}/edit`\n                : `/monitoring/alertmanageryaml`;\n            return history.push(targetUrl);\n        },\n    },\n    {\n        label: 'Delete Receiver',\n        isDisabled: !canDelete,\n        tooltip: !canDelete\n            ? 'Cannot delete the default receiver, or a receiver which has a sub-route'\n            : '',\n        callback: () => confirmModal({\n            title: 'Delete Receiver',\n            message: `Are you sure you want to delete receiver '${receiverName}' ?`,\n            btnText: 'Delete Receiver',\n            executeFn: () => deleteReceiver(receiverName),\n        }),\n    },\n];\nconst ReceiverTableRow = ({ obj: receiver, index, key, style, customData }) => {\n    const { routingLabelsByReceivers, defaultReceiverName } = customData;\n    // filter to routing labels belonging to current Receiver\n    const receiverRoutingLabels = _.filter(routingLabelsByReceivers, { receiver: receiver.name });\n    const receiverIntegrationTypes = getIntegrationTypes(receiver);\n    const integrationTypesLabel = _.join(_.map(receiverIntegrationTypes, (type) => type.substr(0, type.indexOf('_configs'))), ', ');\n    const isDefaultReceiver = receiver.name === defaultReceiverName;\n    const receiverHasSimpleRoute = hasSimpleRoute(receiver, receiverRoutingLabels);\n    // Receiver form can only handle simple configurations. Can edit via form if receiver\n    // has a simple route and receiver\n    const canUseEditForm = receiverHasSimpleRoute && hasSimpleReceiver(receiver, receiverIntegrationTypes);\n    // Receivers can be deleted if it has a simple route and not the default receiver\n    const canDelete = !isDefaultReceiver && receiverHasSimpleRoute;\n    return (React.createElement(TableRow, { id: index, index: index, trKey: key, style: style },\n        React.createElement(TableData, { className: tableColumnClasses[0] }, receiver.name),\n        React.createElement(TableData, { className: tableColumnClasses[1] }, (receiver.name === InitialReceivers.Critical ||\n            receiver.name === InitialReceivers.Default) &&\n            !integrationTypesLabel ? (React.createElement(Link, { to: `/monitoring/alertmanagerconfig/receivers/${receiver.name}/edit` },\n            React.createElement(PencilAltIcon, { className: \"co-icon-space-r pf-c-button-icon--plain\" }),\n            \"Configure\")) : (integrationTypesLabel)),\n        React.createElement(TableData, { className: tableColumnClasses[2] },\n            isDefaultReceiver && React.createElement(RoutingLabel, { labels: { default: 'all' } }),\n            _.map(receiverRoutingLabels, (route, i) => {\n                return !_.isEmpty(route.labels) ? React.createElement(RoutingLabel, { key: i, labels: route.labels }) : null;\n            })),\n        React.createElement(TableData, { className: tableColumnClasses[3] },\n            React.createElement(Kebab, { options: receiverMenuItems(receiver.name, canDelete, canUseEditForm) }))));\n};\nconst ReceiversTable = (props) => {\n    const { filterValue } = props;\n    const { route } = config;\n    const { receiver: defaultReceiverName, routes } = route;\n    const routingLabelsByReceivers = _.isEmpty(routes) ? [] : getRoutingLabelsByReceivers(routes, {});\n    const EmptyMsg = () => React.createElement(MsgBox, { title: `No Receivers match filter '${filterValue}'` });\n    return (React.createElement(Table, Object.assign({}, props, { \"aria-label\": \"Receivers\", customData: { routingLabelsByReceivers, defaultReceiverName }, EmptyMsg: EmptyMsg, Header: ReceiverTableHeader, Row: ReceiverTableRow, loaded: true, defaultSortField: \"name\", virtualize: true })));\n};\nReceiversTable.displayName = 'ReceiversTable';\nconst ReceiversEmptyState = () => (React.createElement(EmptyState, { variant: EmptyStateVariant.full },\n    React.createElement(Title, { size: \"lg\" }, \"No Receivers Found\"),\n    React.createElement(EmptyStateBody, null, \"Create a receiver to get OpenShift alerts through other services such as email or a chat platform. The first receiver you create will become the default receiver and will automatically receive all alerts from this cluster. Subsequent receivers can have specific sets of alerts routed to them.\")));\nconst Receivers = () => {\n    const [receiverFilter, setReceiverFilter] = React.useState('');\n    let receivers = _.get(config, 'receivers', []);\n    if (receiverFilter) {\n        const filterStr = _.toLower(receiverFilter);\n        receivers = receivers.filter((receiver) => fuzzy(filterStr, _.toLower(receiver.name)));\n    }\n    const numOfIncompleteReceivers = numberOfIncompleteReceivers();\n    return (React.createElement(\"div\", { className: \"co-m-pane__body\" },\n        React.createElement(SectionHeading, { text: \"Receivers\" }),\n        React.createElement(\"div\", { className: \"co-m-pane__filter-bar co-m-pane__filter-bar--alt\" },\n            React.createElement(\"div\", { className: \"co-m-pane__filter-bar-group\" },\n                React.createElement(Link, { className: \"co-m-primary-action\", to: \"/monitoring/alertmanagerconfig/receivers/~new\" },\n                    React.createElement(Button, { variant: \"primary\", \"data-test-id\": \"create-receiver\" }, \"Create Receiver\"))),\n            React.createElement(\"div\", { className: \"co-m-pane__filter-bar-group co-m-pane__filter-bar-group--filter\" },\n                React.createElement(TextFilter, { defaultValue: \"\", label: \"Receivers by Name\", onChange: (val) => setReceiverFilter(val) }))),\n        numOfIncompleteReceivers > 0 && (React.createElement(Alert, { isInline: true, className: \"co-alert co-alert--scrollable\", variant: \"info\", title: `Incomplete Alert Receiver${numOfIncompleteReceivers > 1 ? 's' : ''}` },\n            React.createElement(\"div\", { className: \"co-pre-line\" },\n                \"Configure \",\n                numOfIncompleteReceivers === 1 ? 'this receiver' : 'these receivers',\n                \" to ensure that you learn about important issues with your cluster.\"))),\n        _.isEmpty(receivers) && !receiverFilter ? (React.createElement(ReceiversEmptyState, null)) : (React.createElement(ReceiversTable, { filterValue: receiverFilter, data: receivers }))));\n};\nconst AlertmanagerConfiguration = ({ obj }) => {\n    const [errorMsg, setErrorMsg] = React.useState('');\n    secret = obj; // alertmanager-main Secret which holds encoded alertmanager configuration yaml\n    if (!errorMsg) {\n        config = getAlertmanagerConfig(secret, setErrorMsg);\n    }\n    if (errorMsg) {\n        return (React.createElement(Alert, { isInline: true, className: \"co-alert co-alert--scrollable\", variant: \"danger\", title: \"An error occurred\" },\n            React.createElement(\"div\", { className: \"co-pre-line\" }, errorMsg)));\n    }\n    return (React.createElement(React.Fragment, null,\n        React.createElement(AlertRouting, null),\n        React.createElement(Receivers, null)));\n};\nexport const AlertmanagerConfigWrapper = React.memo((_a) => {\n    var { obj } = _a, props = __rest(_a, [\"obj\"]);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Helmet, null,\n            React.createElement(\"title\", null, \"Alerting\")),\n        React.createElement(StatusBox, Object.assign({}, obj),\n            React.createElement(AlertmanagerConfiguration, Object.assign({}, props, { obj: obj.data })))));\n});\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/alert-manager-config.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/alert-manager-config.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\nimport * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as fuzzy from 'fuzzysearch';\nimport { Link } from 'react-router-dom';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport {\n  Alert,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateVariant,\n  Title,\n} from '@patternfly/react-core';\n\nimport { K8sResourceKind } from '../../module/k8s';\nimport { history, Kebab, MsgBox, SectionHeading, StatusBox } from '../utils';\nimport { confirmModal, createAlertRoutingModal } from '../modals';\nimport { Table, TableData, TableRow, TextFilter, RowFunction } from '../factory';\nimport {\n  getAlertmanagerConfig,\n  patchAlertmanagerConfig,\n  receiverTypes,\n} from './alert-manager-utils';\nimport { Helmet } from 'react-helmet';\nimport { PencilAltIcon } from '@patternfly/react-icons';\n\nlet secret: K8sResourceKind = null; // alertmanager-main Secret which holds alertmanager configuration yaml\nlet config: AlertmanagerConfig = null; // alertmanager configuration yaml as object\n\nexport enum InitialReceivers {\n  Critical = 'Critical',\n  Default = 'Default',\n  Watchdog = 'Watchdog',\n}\n\nconst AlertRouting = () => {\n  const groupBy = _.get(config, ['route', 'group_by'], []);\n  return (\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text=\"Alert Routing\">\n        <Button\n          className=\"co-alert-manager-config__edit-alert-routing-btn\"\n          onClick={() => createAlertRoutingModal({ config, secret })}\n          variant=\"secondary\"\n        >\n          Edit\n        </Button>\n      </SectionHeading>\n      <div className=\"row\">\n        <div className=\"col-sm-6\">\n          <dl className=\"co-m-pane__details\">\n            <dt>Group By</dt>\n            <dd data-test-id=\"group_by_value\">\n              {_.isEmpty(groupBy) ? '-' : _.join(groupBy, ', ')}\n            </dd>\n            <dt>Group Wait</dt>\n            <dd data-test-id=\"group_wait_value\">{_.get(config, ['route', 'group_wait'], '-')}</dd>\n          </dl>\n        </div>\n        <div className=\"col-sm-6\">\n          <dl className=\"co-m-pane__details\">\n            <dt>Group Interval</dt>\n            <dd data-test-id=\"group_interval_value\">\n              {_.get(config, ['route', 'group_interval'], '-')}\n            </dd>\n            <dt>Repeat Interval</dt>\n            <dd data-test-id=\"repeat_interval_value\">\n              {_.get(config, ['route', 'repeat_interval'], '-')}\n            </dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst tableColumnClasses = [\n  classNames('col-lg-3', 'col-md-3', 'col-sm-6', 'col-xs-6'),\n  classNames('col-lg-3', 'col-md-3', 'hidden-sm', 'hidden-xs', 'text-center', ''),\n  classNames('col-lg-6', 'col-md-6', 'col-sm-6', 'col-xs-6'),\n  Kebab.columnClass,\n];\n\nconst ReceiverTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Integration Type',\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Routing Labels',\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[3] },\n    },\n  ];\n};\nReceiverTableHeader.displayName = 'ReceiverTableHeader';\n\nconst getIntegrationTypes = (receiver: AlertmanagerReceiver): string[] => {\n  /* Given receiver = {\n       \"name\": \"team-X-pager\",\n       \"email_configs\": [...],\n       \"pagerduty_configs\": [...]\n     };\n     returns ['email_configs', 'pagerduty_configs']\n  */\n  return _.filter(_.keys(receiver), (v) => _.endsWith(v, '_configs'));\n};\n\n/**\n * Recursive function which transverses routes and sub-routes to get labels for each receiver.\n * Each entry is a set of labels used to route alerts to a receiver\n *\n * Ex: returns\n * [{\n *   \"receiver\": \"team-Y-pager\",\n *   \"labels\": {\n *     \"service\": \"database\",\n *     \"owner\": \"team-Y\"\n *   }\n * },\n * {\n *   \"receiver\": \"team-Y-pager\",\n *   \"labels\": {\n *     \"service\": \"files\",\n *     \"severity\": \"critical\"\n *   }\n * }]\n}*/\nconst getRoutingLabelsByReceivers = (routes, parentLabels): RoutingLabelsByReceivers[] => {\n  let results: RoutingLabelsByReceivers[] = [];\n  let labels = {};\n  for (const obj of routes) {\n    labels = _.merge({}, parentLabels, obj.match, obj.match_re);\n    results.push({ receiver: obj.receiver, labels });\n    if (obj.routes) {\n      results = results.concat(getRoutingLabelsByReceivers(obj.routes, labels));\n    }\n  }\n  return results;\n};\n\n/**\n * Is receiver used in a top-level route that has no sub routes, or\n * is receiver not in any route (no routing labels)?\n */\nconst hasSimpleRoute = (\n  receiver: AlertmanagerReceiver,\n  receiverRoutingLabels: RoutingLabelsByReceivers[],\n): boolean => {\n  const routes = _.get(config, ['route', 'routes']);\n  return (\n    _.filter(routes, (route) => {\n      return route.receiver === receiver.name && _.isUndefined(route.routes);\n    }).length > 0 || _.isEmpty(receiverRoutingLabels)\n  );\n};\n\n/**\n * Does receiver contains a single known receiver type (ex: pagerduty_config), which has a single config.\n * No receiver type specified is valid, as well as a single receiver type with no config\n */\nconst hasSimpleReceiver = (\n  receiver: AlertmanagerReceiver,\n  receiverIntegrationTypes: string[],\n): boolean => {\n  if (receiverIntegrationTypes.length === 0) {\n    return true;\n  } else if (receiverIntegrationTypes.length === 1) {\n    const receiverConfig = receiverIntegrationTypes[0]; // ex: 'pagerduty_configs'\n    const numConfigs = _.get(receiver, receiverConfig).length; // 'pagerduty_configs' is array and may have multiple sets of properties\n    return _.hasIn(receiverTypes, receiverConfig) && numConfigs <= 1; // known receiver type and a single set of props\n  }\n  return false;\n};\n\nconst numberOfIncompleteReceivers = (): number => {\n  const { route, receivers } = config;\n  const { receiver: defaultReceiverName } = route;\n\n  // if no receivers or default receiver, then no longer initial setup, hide info alerts\n  if (!receivers || !defaultReceiverName) {\n    return 0;\n  }\n  const defaultReceiver = receivers.filter((receiver) => receiver.name === defaultReceiverName);\n  const criticalReceiver = receivers.filter(\n    (receiver) => receiver.name === InitialReceivers.Critical,\n  );\n\n  const numIncompleteReceivers =\n    !_.isEmpty(defaultReceiver) && _.isEmpty(getIntegrationTypes(defaultReceiver[0])) ? 1 : 0;\n\n  return !_.isEmpty(criticalReceiver) && _.isEmpty(getIntegrationTypes(criticalReceiver[0]))\n    ? numIncompleteReceivers + 1\n    : numIncompleteReceivers;\n};\n\n// Puts sets of key=value pairs into single comma delimited label\nconst RoutingLabel: React.FC<RoutingLabelProps> = ({ labels }) => {\n  let count = 0;\n  const list = _.map(labels, (value, key) => {\n    count++;\n    return key === 'default' ? (\n      <span key=\"default\" className=\"co-m-label__value\">\n        All (default receiver)\n      </span>\n    ) : (\n      <React.Fragment key={`label-${key}-${value}`}>\n        <span className=\"co-m-label__key\">{key}</span>\n        <span className=\"co-m-label__eq\">=</span>\n        <span className=\"co-m-label__value\">{value}</span>\n        {count < _.size(labels) && <>,&nbsp;</>}\n      </React.Fragment>\n    );\n  });\n  return (\n    <div>\n      <div className=\"co-m-label co-m-label--expand\">{list}</div>\n    </div>\n  );\n};\n\nconst deleteReceiver = (receiverName: string) => {\n  // remove any routes which use receiverToDelete\n  _.update(config, 'route.routes', (routes) => {\n    _.remove(routes, (route: AlertmanagerRoute) => route.receiver === receiverName);\n    return routes;\n  });\n  // delete receiver\n  _.update(config, 'receivers', (receivers) => {\n    _.remove(receivers, (receiver: AlertmanagerReceiver) => receiver.name === receiverName);\n    return receivers;\n  });\n  return patchAlertmanagerConfig(secret, config).then(() => {\n    history.push('/monitoring/alertmanagerconfig');\n  });\n};\n\nconst receiverMenuItems = (receiverName: string, canDelete: boolean, canUseEditForm: boolean) => [\n  {\n    label: `Edit ${canUseEditForm ? 'Receiver' : 'YAML'}`,\n    callback: () => {\n      const targetUrl = canUseEditForm\n        ? `/monitoring/alertmanagerconfig/receivers/${receiverName}/edit`\n        : `/monitoring/alertmanageryaml`;\n      return history.push(targetUrl);\n    },\n  },\n  {\n    label: 'Delete Receiver',\n    isDisabled: !canDelete,\n    tooltip: !canDelete\n      ? 'Cannot delete the default receiver, or a receiver which has a sub-route'\n      : '',\n    callback: () =>\n      confirmModal({\n        title: 'Delete Receiver',\n        message: `Are you sure you want to delete receiver '${receiverName}' ?`,\n        btnText: 'Delete Receiver',\n        executeFn: () => deleteReceiver(receiverName),\n      }),\n  },\n];\n\nconst ReceiverTableRow: RowFunction<\n  AlertmanagerReceiver,\n  {\n    routingLabelsByReceivers: RoutingLabelsByReceivers[];\n    defaultReceiverName: string;\n  }\n> = ({ obj: receiver, index, key, style, customData }) => {\n  const { routingLabelsByReceivers, defaultReceiverName } = customData;\n  // filter to routing labels belonging to current Receiver\n  const receiverRoutingLabels = _.filter(routingLabelsByReceivers, { receiver: receiver.name });\n  const receiverIntegrationTypes = getIntegrationTypes(receiver);\n  const integrationTypesLabel = _.join(\n    _.map(receiverIntegrationTypes, (type) => type.substr(0, type.indexOf('_configs'))),\n    ', ',\n  );\n  const isDefaultReceiver = receiver.name === defaultReceiverName;\n  const receiverHasSimpleRoute = hasSimpleRoute(receiver, receiverRoutingLabels);\n\n  // Receiver form can only handle simple configurations. Can edit via form if receiver\n  // has a simple route and receiver\n  const canUseEditForm =\n    receiverHasSimpleRoute && hasSimpleReceiver(receiver, receiverIntegrationTypes);\n\n  // Receivers can be deleted if it has a simple route and not the default receiver\n  const canDelete = !isDefaultReceiver && receiverHasSimpleRoute;\n\n  return (\n    <TableRow id={index} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>{receiver.name}</TableData>\n      <TableData className={tableColumnClasses[1]}>\n        {(receiver.name === InitialReceivers.Critical ||\n          receiver.name === InitialReceivers.Default) &&\n        !integrationTypesLabel ? (\n          <Link to={`/monitoring/alertmanagerconfig/receivers/${receiver.name}/edit`}>\n            <PencilAltIcon className=\"co-icon-space-r pf-c-button-icon--plain\" />\n            Configure\n          </Link>\n        ) : (\n          integrationTypesLabel\n        )}\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        {isDefaultReceiver && <RoutingLabel labels={{ default: 'all' }} />}\n        {_.map(receiverRoutingLabels, (route, i) => {\n          return !_.isEmpty(route.labels) ? <RoutingLabel key={i} labels={route.labels} /> : null;\n        })}\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <Kebab options={receiverMenuItems(receiver.name, canDelete, canUseEditForm)} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst ReceiversTable: React.FC<ReceiverTableProps> = (props) => {\n  const { filterValue } = props;\n  const { route } = config;\n  const { receiver: defaultReceiverName, routes } = route;\n\n  const routingLabelsByReceivers = _.isEmpty(routes) ? [] : getRoutingLabelsByReceivers(routes, {});\n  const EmptyMsg = () => <MsgBox title={`No Receivers match filter '${filterValue}'`} />;\n  return (\n    <Table\n      {...props}\n      aria-label=\"Receivers\"\n      customData={{ routingLabelsByReceivers, defaultReceiverName }}\n      EmptyMsg={EmptyMsg}\n      Header={ReceiverTableHeader}\n      Row={ReceiverTableRow}\n      loaded={true}\n      defaultSortField=\"name\"\n      virtualize\n    />\n  );\n};\nReceiversTable.displayName = 'ReceiversTable';\n\nconst ReceiversEmptyState: React.FC = () => (\n  <EmptyState variant={EmptyStateVariant.full}>\n    <Title size=\"lg\">No Receivers Found</Title>\n    <EmptyStateBody>\n      Create a receiver to get OpenShift alerts through other services such as email or a chat\n      platform. The first receiver you create will become the default receiver and will\n      automatically receive all alerts from this cluster. Subsequent receivers can have specific\n      sets of alerts routed to them.\n    </EmptyStateBody>\n  </EmptyState>\n);\n\nconst Receivers = () => {\n  const [receiverFilter, setReceiverFilter] = React.useState('');\n  let receivers = _.get(config, 'receivers', []);\n  if (receiverFilter) {\n    const filterStr = _.toLower(receiverFilter);\n    receivers = receivers.filter((receiver) => fuzzy(filterStr, _.toLower(receiver.name)));\n  }\n\n  const numOfIncompleteReceivers = numberOfIncompleteReceivers();\n  return (\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text=\"Receivers\" />\n      <div className=\"co-m-pane__filter-bar co-m-pane__filter-bar--alt\">\n        <div className=\"co-m-pane__filter-bar-group\">\n          <Link className=\"co-m-primary-action\" to=\"/monitoring/alertmanagerconfig/receivers/~new\">\n            <Button variant=\"primary\" data-test-id=\"create-receiver\">\n              Create Receiver\n            </Button>\n          </Link>\n        </div>\n        <div className=\"co-m-pane__filter-bar-group co-m-pane__filter-bar-group--filter\">\n          <TextFilter\n            defaultValue=\"\"\n            label=\"Receivers by Name\"\n            onChange={(val) => setReceiverFilter(val)}\n          />\n        </div>\n      </div>\n      {numOfIncompleteReceivers > 0 && (\n        <Alert\n          isInline\n          className=\"co-alert co-alert--scrollable\"\n          variant=\"info\"\n          title={`Incomplete Alert Receiver${numOfIncompleteReceivers > 1 ? 's' : ''}`}\n        >\n          <div className=\"co-pre-line\">\n            Configure {numOfIncompleteReceivers === 1 ? 'this receiver' : 'these receivers'} to\n            ensure that you learn about important issues with your cluster.\n          </div>\n        </Alert>\n      )}\n      {_.isEmpty(receivers) && !receiverFilter ? (\n        <ReceiversEmptyState />\n      ) : (\n        <ReceiversTable filterValue={receiverFilter} data={receivers} />\n      )}\n    </div>\n  );\n};\n\nconst AlertmanagerConfiguration: React.FC<AlertmanagerConfigurationProps> = ({ obj }) => {\n  const [errorMsg, setErrorMsg] = React.useState('');\n  secret = obj; // alertmanager-main Secret which holds encoded alertmanager configuration yaml\n  if (!errorMsg) {\n    config = getAlertmanagerConfig(secret, setErrorMsg);\n  }\n\n  if (errorMsg) {\n    return (\n      <Alert\n        isInline\n        className=\"co-alert co-alert--scrollable\"\n        variant=\"danger\"\n        title=\"An error occurred\"\n      >\n        <div className=\"co-pre-line\">{errorMsg}</div>\n      </Alert>\n    );\n  }\n\n  return (\n    <>\n      <AlertRouting />\n      <Receivers />\n    </>\n  );\n};\n\nexport const AlertmanagerConfigWrapper: React.FC<AlertmanagerConfigWrapperProps> = React.memo(\n  ({ obj, ...props }) => {\n    return (\n      <>\n        <Helmet>\n          <title>Alerting</title>\n        </Helmet>\n        <StatusBox {...obj}>\n          <AlertmanagerConfiguration {...props} obj={obj.data} />\n        </StatusBox>\n      </>\n    );\n  },\n);\n\ntype AlertmanagerConfigWrapperProps = {\n  obj?: {\n    data?: K8sResourceKind;\n    [key: string]: any;\n  };\n};\n\ntype AlertmanagerConfigurationProps = {\n  obj?: K8sResourceKind;\n  onCancel?: () => void;\n};\ntype labels = {\n  [key: string]: string;\n};\n\nexport type AlertmanagerRoute = {\n  receiver?: string;\n  groupBy?: { [key: string]: string };\n  groupWait?: string;\n  groupInterval?: string;\n  repeatInterval?: string;\n  match?: labels[];\n  match_re?: labels[];\n  routes?: AlertmanagerRoute[];\n};\n\ntype RoutingLabelsByReceivers = {\n  receiver: string;\n  labels: { [key: string]: string };\n};\n\ntype WebhookConfig = {\n  url: string;\n};\n\ntype PagerDutyConfig = {\n  routingKey?: string;\n  serviceKey?: string;\n};\n\nexport type AlertmanagerReceiver = {\n  name: string;\n  webhookConfigs?: WebhookConfig[];\n  pagerdutyConfigs?: PagerDutyConfig[];\n};\n\nexport type AlertmanagerConfig = {\n  global: { [key: string]: string };\n  route: AlertmanagerRoute;\n  receivers: AlertmanagerReceiver[];\n};\n\ntype ReceiverTableProps = {\n  data: AlertmanagerReceiver[];\n  filterValue?: string;\n};\n\ntype RoutingLabelProps = {\n  labels: { [key: string]: string };\n};\n"]}]}