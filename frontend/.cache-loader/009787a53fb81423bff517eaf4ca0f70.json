{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/cluster-settings/keystone-idp-form.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/cluster-settings/keystone-idp-form.tsx","mtime":1616735742460},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport * as _ from 'lodash-es';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { SecretModel, ConfigMapModel } from '../../models';\nimport { k8sCreate } from '../../module/k8s';\nimport { ButtonBar, PromiseComponent, history, AsyncComponent } from '../utils';\nimport { addIDP, getOAuthResource, redirectToOAuthPage, mockNames } from './';\nimport { IDPNameInput } from './idp-name-input';\nimport { IDPCAFileInput } from './idp-cafile-input';\nexport const DroppableFileInput = (props) => (React.createElement(AsyncComponent, Object.assign({ loader: () => import('../utils/file-input').then((c) => c.DroppableFileInput) }, props)));\nexport class AddKeystonePage extends PromiseComponent {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            name: 'keystone',\n            domainName: '',\n            url: '',\n            caFileContent: '',\n            certFileContent: '',\n            keyFileContent: '',\n            inProgress: false,\n            errorMessage: '',\n        };\n        this.submit = (e) => {\n            e.preventDefault();\n            if (_.isEmpty(this.state.keyFileContent) !== _.isEmpty(this.state.certFileContent)) {\n                this.setState({\n                    errorMessage: 'Values for Certificate and Key should both be either excluded or provided.',\n                });\n                return;\n            }\n            // Clear any previous errors.\n            this.setState({ errorMessage: '' });\n            this.getOAuthResource().then((oauth) => {\n                const mockSecret = this.state.certFileContent ? mockNames.secret : '';\n                const mockCA = this.state.caFileContent ? mockNames.ca : '';\n                this.addKeystoneIDP(oauth, mockSecret, mockCA, true)\n                    .then(() => {\n                    const promises = [this.createTLSSecret(), this.createCAConfigMap()];\n                    Promise.all(promises)\n                        .then(([tlsSecret, configMap]) => {\n                        const caName = configMap ? configMap.metadata.name : '';\n                        const secretName = tlsSecret ? tlsSecret.metadata.name : '';\n                        return this.addKeystoneIDP(oauth, secretName, caName);\n                    })\n                        .then(redirectToOAuthPage);\n                })\n                    .catch((err) => {\n                    this.setState({ errorMessage: err });\n                });\n            });\n        };\n        this.nameChanged = (event) => {\n            this.setState({ name: event.currentTarget.value });\n        };\n        this.domainNameChanged = (event) => {\n            this.setState({ domainName: event.currentTarget.value });\n        };\n        this.urlChanged = (event) => {\n            this.setState({ url: event.currentTarget.value });\n        };\n        this.caFileChanged = (caFileContent) => {\n            this.setState({ caFileContent });\n        };\n        this.certFileChanged = (certFileContent) => {\n            this.setState({ certFileContent });\n        };\n        this.keyFileChanged = (keyFileContent) => {\n            this.setState({ keyFileContent });\n        };\n    }\n    getOAuthResource() {\n        return this.handlePromise(getOAuthResource());\n    }\n    createTLSSecret() {\n        const { certFileContent, keyFileContent } = this.state;\n        if (!certFileContent) {\n            return Promise.resolve(null);\n        }\n        const secret = {\n            apiVersion: 'v1',\n            kind: 'Secret',\n            metadata: {\n                generateName: 'keystone-tls-',\n                namespace: 'openshift-config',\n            },\n            stringData: {\n                'tls.crt': certFileContent,\n                'tls.key': keyFileContent,\n            },\n        };\n        return this.handlePromise(k8sCreate(SecretModel, secret));\n    }\n    createCAConfigMap() {\n        const { caFileContent } = this.state;\n        if (!caFileContent) {\n            return Promise.resolve(null);\n        }\n        const ca = {\n            apiVersion: 'v1',\n            kind: 'ConfigMap',\n            metadata: {\n                generateName: 'keystone-ca-',\n                namespace: 'openshift-config',\n            },\n            data: {\n                'ca.crt': caFileContent,\n            },\n        };\n        return this.handlePromise(k8sCreate(ConfigMapModel, ca));\n    }\n    addKeystoneIDP(oauth, secretName, caName, dryRun) {\n        const { name, domainName, url } = this.state;\n        const idp = {\n            name,\n            type: 'Keystone',\n            mappingMethod: 'claim',\n            keystone: {\n                domainName,\n                url,\n            },\n        };\n        if (caName) {\n            idp.keystone.ca = {\n                name: caName,\n            };\n        }\n        if (secretName) {\n            idp.keystone.tlsClientCert = {\n                name: secretName,\n            };\n            idp.keystone.tlsClientKey = {\n                name: secretName,\n            };\n        }\n        return this.handlePromise(addIDP(oauth, idp, dryRun));\n    }\n    render() {\n        const { name, domainName, url, caFileContent, certFileContent, keyFileContent } = this.state;\n        const title = 'Add Identity Provider: Keystone Authentication';\n        return (React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(Helmet, null,\n                React.createElement(\"title\", null, title)),\n            React.createElement(\"form\", { onSubmit: this.submit, name: \"form\", className: \"co-m-pane__body-group co-m-pane__form\" },\n                React.createElement(\"h1\", { className: \"co-m-pane__heading\" }, title),\n                React.createElement(\"p\", { className: \"co-m-pane__explanation\" }, \"Adding Keystone enables shared authentication with an OpenStack server configured to store users in an internal Keystone database.\"),\n                React.createElement(IDPNameInput, { value: name, onChange: this.nameChanged }),\n                React.createElement(\"div\", { className: \"form-group\" },\n                    React.createElement(\"label\", { className: \"control-label co-required\", htmlFor: \"domain-name\" }, \"Domain Name\"),\n                    React.createElement(\"input\", { className: \"pf-c-form-control\", type: \"text\", onChange: this.domainNameChanged, value: domainName, id: \"domain-name\", required: true })),\n                React.createElement(\"div\", { className: \"form-group\" },\n                    React.createElement(\"label\", { className: \"control-label co-required\", htmlFor: \"url\" }, \"URL\"),\n                    React.createElement(\"input\", { className: \"pf-c-form-control\", type: \"url\", onChange: this.urlChanged, value: url, id: \"url\", \"aria-describedby\": \"idp-url-help\", required: true }),\n                    React.createElement(\"p\", { className: \"help-block\", id: \"idp-url-help\" }, \"The remote URL to connect to.\")),\n                React.createElement(IDPCAFileInput, { value: caFileContent, onChange: this.caFileChanged }),\n                React.createElement(\"div\", { className: \"form-group\" },\n                    React.createElement(DroppableFileInput, { onChange: this.certFileChanged, inputFileData: certFileContent, id: \"cert-file-input\", label: \"Certificate\", hideContents: true, inputFieldHelpText: \"PEM-encoded TLS client certificate to present when connecting to the server.\" })),\n                React.createElement(\"div\", { className: \"form-group\" },\n                    React.createElement(DroppableFileInput, { onChange: this.keyFileChanged, inputFileData: keyFileContent, id: \"key-file-input\", label: \"Key\", hideContents: true, inputFieldHelpText: \"PEM-encoded TLS private key for the client certificate. Required if Certificate is specified.\" })),\n                React.createElement(ButtonBar, { errorMessage: this.state.errorMessage, inProgress: this.state.inProgress },\n                    React.createElement(ActionGroup, { className: \"pf-c-form\" },\n                        React.createElement(Button, { type: \"submit\", variant: \"primary\", \"data-test-id\": \"add-idp\" }, \"Add\"),\n                        React.createElement(Button, { type: \"button\", variant: \"secondary\", onClick: history.goBack }, \"Cancel\"))))));\n    }\n}\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/cluster-settings/keystone-idp-form.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/cluster-settings/keystone-idp-form.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport * as _ from 'lodash-es';\nimport { ActionGroup, Button } from '@patternfly/react-core';\n\nimport { SecretModel, ConfigMapModel } from '../../models';\nimport { IdentityProvider, k8sCreate, K8sResourceKind, OAuthKind } from '../../module/k8s';\nimport { ButtonBar, PromiseComponent, history, AsyncComponent } from '../utils';\nimport { addIDP, getOAuthResource, redirectToOAuthPage, mockNames } from './';\nimport { IDPNameInput } from './idp-name-input';\nimport { IDPCAFileInput } from './idp-cafile-input';\n\nexport const DroppableFileInput = (props: any) => (\n  <AsyncComponent\n    loader={() => import('../utils/file-input').then((c) => c.DroppableFileInput)}\n    {...props}\n  />\n);\n\nexport class AddKeystonePage extends PromiseComponent<{}, AddKeystonePageState> {\n  readonly state: AddKeystonePageState = {\n    name: 'keystone',\n    domainName: '',\n    url: '',\n    caFileContent: '',\n    certFileContent: '',\n    keyFileContent: '',\n    inProgress: false,\n    errorMessage: '',\n  };\n\n  getOAuthResource(): Promise<OAuthKind> {\n    return this.handlePromise(getOAuthResource());\n  }\n\n  createTLSSecret(): Promise<K8sResourceKind> {\n    const { certFileContent, keyFileContent } = this.state;\n    if (!certFileContent) {\n      return Promise.resolve(null);\n    }\n\n    const secret = {\n      apiVersion: 'v1',\n      kind: 'Secret',\n      metadata: {\n        generateName: 'keystone-tls-',\n        namespace: 'openshift-config',\n      },\n      stringData: {\n        'tls.crt': certFileContent,\n        'tls.key': keyFileContent,\n      },\n    };\n\n    return this.handlePromise(k8sCreate(SecretModel, secret));\n  }\n\n  createCAConfigMap(): Promise<K8sResourceKind> {\n    const { caFileContent } = this.state;\n    if (!caFileContent) {\n      return Promise.resolve(null);\n    }\n\n    const ca = {\n      apiVersion: 'v1',\n      kind: 'ConfigMap',\n      metadata: {\n        generateName: 'keystone-ca-',\n        namespace: 'openshift-config',\n      },\n      data: {\n        'ca.crt': caFileContent,\n      },\n    };\n\n    return this.handlePromise(k8sCreate(ConfigMapModel, ca));\n  }\n\n  addKeystoneIDP(\n    oauth: OAuthKind,\n    secretName: string,\n    caName: string,\n    dryRun?: boolean,\n  ): Promise<K8sResourceKind> {\n    const { name, domainName, url } = this.state;\n    const idp: IdentityProvider = {\n      name,\n      type: 'Keystone',\n      mappingMethod: 'claim',\n      keystone: {\n        domainName,\n        url,\n      },\n    };\n\n    if (caName) {\n      idp.keystone.ca = {\n        name: caName,\n      };\n    }\n\n    if (secretName) {\n      idp.keystone.tlsClientCert = {\n        name: secretName,\n      };\n      idp.keystone.tlsClientKey = {\n        name: secretName,\n      };\n    }\n\n    return this.handlePromise(addIDP(oauth, idp, dryRun));\n  }\n\n  submit: React.FormEventHandler<HTMLFormElement> = (e) => {\n    e.preventDefault();\n    if (_.isEmpty(this.state.keyFileContent) !== _.isEmpty(this.state.certFileContent)) {\n      this.setState({\n        errorMessage: 'Values for Certificate and Key should both be either excluded or provided.',\n      });\n      return;\n    }\n    // Clear any previous errors.\n    this.setState({ errorMessage: '' });\n    this.getOAuthResource().then((oauth: OAuthKind) => {\n      const mockSecret = this.state.certFileContent ? mockNames.secret : '';\n      const mockCA = this.state.caFileContent ? mockNames.ca : '';\n      this.addKeystoneIDP(oauth, mockSecret, mockCA, true)\n        .then(() => {\n          const promises = [this.createTLSSecret(), this.createCAConfigMap()];\n\n          Promise.all(promises)\n            .then(([tlsSecret, configMap]) => {\n              const caName = configMap ? configMap.metadata.name : '';\n              const secretName = tlsSecret ? tlsSecret.metadata.name : '';\n              return this.addKeystoneIDP(oauth, secretName, caName);\n            })\n            .then(redirectToOAuthPage);\n        })\n        .catch((err) => {\n          this.setState({ errorMessage: err });\n        });\n    });\n  };\n\n  nameChanged: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    this.setState({ name: event.currentTarget.value });\n  };\n\n  domainNameChanged: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    this.setState({ domainName: event.currentTarget.value });\n  };\n\n  urlChanged: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    this.setState({ url: event.currentTarget.value });\n  };\n\n  caFileChanged = (caFileContent: string) => {\n    this.setState({ caFileContent });\n  };\n\n  certFileChanged = (certFileContent: string) => {\n    this.setState({ certFileContent });\n  };\n\n  keyFileChanged = (keyFileContent: string) => {\n    this.setState({ keyFileContent });\n  };\n\n  render() {\n    const { name, domainName, url, caFileContent, certFileContent, keyFileContent } = this.state;\n    const title = 'Add Identity Provider: Keystone Authentication';\n    return (\n      <div className=\"co-m-pane__body\">\n        <Helmet>\n          <title>{title}</title>\n        </Helmet>\n        <form onSubmit={this.submit} name=\"form\" className=\"co-m-pane__body-group co-m-pane__form\">\n          <h1 className=\"co-m-pane__heading\">{title}</h1>\n          <p className=\"co-m-pane__explanation\">\n            Adding Keystone enables shared authentication with an OpenStack server configured to\n            store users in an internal Keystone database.\n          </p>\n          <IDPNameInput value={name} onChange={this.nameChanged} />\n          <div className=\"form-group\">\n            <label className=\"control-label co-required\" htmlFor=\"domain-name\">\n              Domain Name\n            </label>\n            <input\n              className=\"pf-c-form-control\"\n              type=\"text\"\n              onChange={this.domainNameChanged}\n              value={domainName}\n              id=\"domain-name\"\n              required\n            />\n          </div>\n          <div className=\"form-group\">\n            <label className=\"control-label co-required\" htmlFor=\"url\">\n              URL\n            </label>\n            <input\n              className=\"pf-c-form-control\"\n              type=\"url\"\n              onChange={this.urlChanged}\n              value={url}\n              id=\"url\"\n              aria-describedby=\"idp-url-help\"\n              required\n            />\n            <p className=\"help-block\" id=\"idp-url-help\">\n              The remote URL to connect to.\n            </p>\n          </div>\n          <IDPCAFileInput value={caFileContent} onChange={this.caFileChanged} />\n          <div className=\"form-group\">\n            <DroppableFileInput\n              onChange={this.certFileChanged}\n              inputFileData={certFileContent}\n              id=\"cert-file-input\"\n              label=\"Certificate\"\n              hideContents\n              inputFieldHelpText=\"PEM-encoded TLS client certificate to present when connecting to the server.\"\n            />\n          </div>\n          <div className=\"form-group\">\n            <DroppableFileInput\n              onChange={this.keyFileChanged}\n              inputFileData={keyFileContent}\n              id=\"key-file-input\"\n              label=\"Key\"\n              hideContents\n              inputFieldHelpText=\"PEM-encoded TLS private key for the client certificate. Required if Certificate is specified.\"\n            />\n          </div>\n          <ButtonBar errorMessage={this.state.errorMessage} inProgress={this.state.inProgress}>\n            <ActionGroup className=\"pf-c-form\">\n              <Button type=\"submit\" variant=\"primary\" data-test-id=\"add-idp\">\n                Add\n              </Button>\n              <Button type=\"button\" variant=\"secondary\" onClick={history.goBack}>\n                Cancel\n              </Button>\n            </ActionGroup>\n          </ButtonBar>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport type AddKeystonePageState = {\n  name: string;\n  domainName: string;\n  url: string;\n  caFileContent: string;\n  certFileContent: string;\n  keyFileContent: string;\n  inProgress: boolean;\n  errorMessage: string;\n};\n"]}]}