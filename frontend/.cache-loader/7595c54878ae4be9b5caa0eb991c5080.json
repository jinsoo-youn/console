{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelineruns/logs/MultiStreamLogs.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelineruns/logs/MultiStreamLogs.tsx","mtime":1616735742390},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { saveAs } from 'file-saver';\nimport { Button, Flex, FlexItem, FlexModifiers } from '@patternfly/react-core';\nimport { DownloadIcon, CompressIcon, ExpandIcon } from '@patternfly/react-icons';\nimport { LoadingInline, LOG_SOURCE_WAITING } from '@console/internal/components/utils';\nimport { errorModal } from '@console/internal/components/modals/error-modal';\nimport { useFullscreen, useScrollDirection, ScrollDirection } from '@console/shared';\nimport { containerToLogSourceStatus } from '../../../utils/pipeline-utils';\nimport { getRenderContainers } from './logs-utils';\nimport Logs from './Logs';\nimport './MultiStreamLogs.scss';\nexport const MultiStreamLogs = ({ resource, taskName, downloadAllLabel, onDownloadAll, }) => {\n    var _a, _b;\n    const scrollPane = React.useRef();\n    const completedRef = React.useRef([]);\n    const [renderToCount, setRenderToCount] = React.useState(0);\n    const [isFullscreen, fullscreenRef, fullscreenToggle] = useFullscreen();\n    const [scrollDirection, handleScrollCallback] = useScrollDirection();\n    const [autoScroll, setAutoScroll] = React.useState(true);\n    const { containers, stillFetching } = getRenderContainers(resource);\n    const [downloadAllStatus, setDownloadAllStatus] = React.useState(false);\n    const dataRef = React.useRef(null);\n    dataRef.current = containers;\n    const handleComplete = React.useCallback((containerName) => {\n        const index = dataRef.current.findIndex(({ name }) => name === containerName);\n        completedRef.current[index] = true;\n        const newRenderTo = dataRef.current.findIndex((c, i) => completedRef.current[i] !== true);\n        if (newRenderTo === -1) {\n            setRenderToCount(dataRef.current.length);\n        }\n        else {\n            setRenderToCount(newRenderTo);\n        }\n    }, []);\n    React.useEffect(() => {\n        if (!scrollDirection)\n            return;\n        if (scrollDirection === ScrollDirection.scrollingUp && autoScroll === true) {\n            setAutoScroll(false);\n        }\n        if (scrollDirection === ScrollDirection.scrolledToBottom && autoScroll === false) {\n            setAutoScroll(true);\n        }\n    }, [autoScroll, scrollDirection]);\n    const startDownloadAll = () => {\n        setDownloadAllStatus(true);\n        onDownloadAll()\n            .then(() => {\n            setDownloadAllStatus(false);\n        })\n            .catch((err) => {\n            setDownloadAllStatus(false);\n            const error = err.message || 'Error downloading logs.';\n            errorModal({ error });\n        });\n    };\n    const downloadLogs = () => {\n        if (!scrollPane.current)\n            return;\n        const logString = scrollPane.current.innerText;\n        const blob = new Blob([logString], {\n            type: 'text/plain;charset=utf-8',\n        });\n        saveAs(blob, `${taskName}.log`);\n    };\n    const containerStatus = (_b = (_a = resource.status) === null || _a === void 0 ? void 0 : _a.containerStatuses) !== null && _b !== void 0 ? _b : [];\n    const divider = React.createElement(FlexItem, { className: \"odc-multi-stream-logs__divider\" }, \"|\");\n    return (React.createElement(\"div\", { ref: fullscreenRef, className: \"odc-multi-stream-logs\" },\n        React.createElement(Flex, { className: classNames({\n                'odc-multi-stream-logs--fullscreen': isFullscreen,\n            }) },\n            React.createElement(FlexItem, { className: \"odc-multi-stream-logs__button\", breakpointMods: [{ modifier: FlexModifiers['align-right'] }] },\n                React.createElement(Button, { variant: \"link\", onClick: downloadLogs, isInline: true },\n                    React.createElement(DownloadIcon, { className: \"odc-multi-stream-logs__icon\" }),\n                    \"Download\")),\n            divider,\n            onDownloadAll && (React.createElement(React.Fragment, null,\n                React.createElement(FlexItem, { className: \"odc-multi-stream-logs__button\" },\n                    React.createElement(Button, { variant: \"link\", onClick: startDownloadAll, isDisabled: downloadAllStatus, isInline: true },\n                        React.createElement(DownloadIcon, { className: \"odc-multi-stream-logs__icon\" }),\n                        downloadAllLabel || 'Download All',\n                        downloadAllStatus && React.createElement(LoadingInline, null))),\n                divider)),\n            fullscreenToggle && (React.createElement(FlexItem, { className: \"odc-multi-stream-logs__button\" },\n                React.createElement(Button, { variant: \"link\", onClick: fullscreenToggle, isInline: true }, isFullscreen ? (React.createElement(React.Fragment, null,\n                    React.createElement(CompressIcon, { className: \"odc-multi-stream-logs__icon\" }),\n                    \"Collapse\")) : (React.createElement(React.Fragment, null,\n                    React.createElement(ExpandIcon, { className: \"odc-multi-stream-logs__icon\" }),\n                    \"Expand\")))))),\n        React.createElement(\"div\", { className: \"odc-multi-stream-logs__taskName\" },\n            taskName,\n            stillFetching && (React.createElement(\"span\", { className: \"odc-multi-stream-logs__taskName__loading-indicator\" },\n                React.createElement(LoadingInline, null)))),\n        React.createElement(\"div\", { className: \"odc-multi-stream-logs__container\", \"data-test-id\": \"logs-task-container\" },\n            React.createElement(\"div\", { className: \"odc-multi-stream-logs__container__logs\", ref: scrollPane, onScroll: handleScrollCallback }, containers.map((container, idx) => {\n                const resourceStatus = containerToLogSourceStatus(containerStatus[idx]);\n                return (resourceStatus !== LOG_SOURCE_WAITING && (React.createElement(Logs, { key: container.name, resource: resource, container: container, resourceStatus: resourceStatus, onComplete: handleComplete, render: renderToCount >= idx, autoScroll: autoScroll })));\n            })))));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelineruns/logs/MultiStreamLogs.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelineruns/logs/MultiStreamLogs.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { saveAs } from 'file-saver';\nimport { Button, Flex, FlexItem, FlexModifiers } from '@patternfly/react-core';\nimport { DownloadIcon, CompressIcon, ExpandIcon } from '@patternfly/react-icons';\nimport { ContainerStatus, PodKind, ContainerSpec } from '@console/internal/module/k8s';\nimport { LoadingInline, LOG_SOURCE_WAITING } from '@console/internal/components/utils';\nimport { errorModal } from '@console/internal/components/modals/error-modal';\nimport { useFullscreen, useScrollDirection, ScrollDirection } from '@console/shared';\nimport { containerToLogSourceStatus } from '../../../utils/pipeline-utils';\nimport { getRenderContainers } from './logs-utils';\nimport Logs from './Logs';\nimport './MultiStreamLogs.scss';\n\ntype MultiStreamLogsProps = {\n  resource: PodKind;\n  taskName: string;\n  downloadAllLabel?: string;\n  onDownloadAll?: () => Promise<Error>;\n};\n\nexport const MultiStreamLogs: React.FC<MultiStreamLogsProps> = ({\n  resource,\n  taskName,\n  downloadAllLabel,\n  onDownloadAll,\n}) => {\n  const scrollPane = React.useRef<HTMLDivElement>();\n  const completedRef = React.useRef<boolean[]>([]);\n  const [renderToCount, setRenderToCount] = React.useState(0);\n  const [isFullscreen, fullscreenRef, fullscreenToggle] = useFullscreen<HTMLDivElement>();\n  const [scrollDirection, handleScrollCallback] = useScrollDirection();\n  const [autoScroll, setAutoScroll] = React.useState(true);\n  const { containers, stillFetching } = getRenderContainers(resource);\n  const [downloadAllStatus, setDownloadAllStatus] = React.useState(false);\n  const dataRef = React.useRef<ContainerSpec[]>(null);\n  dataRef.current = containers;\n\n  const handleComplete = React.useCallback((containerName) => {\n    const index = dataRef.current.findIndex(({ name }) => name === containerName);\n    completedRef.current[index] = true;\n    const newRenderTo = dataRef.current.findIndex((c, i) => completedRef.current[i] !== true);\n    if (newRenderTo === -1) {\n      setRenderToCount(dataRef.current.length);\n    } else {\n      setRenderToCount(newRenderTo);\n    }\n  }, []);\n\n  React.useEffect(() => {\n    if (!scrollDirection) return;\n    if (scrollDirection === ScrollDirection.scrollingUp && autoScroll === true) {\n      setAutoScroll(false);\n    }\n    if (scrollDirection === ScrollDirection.scrolledToBottom && autoScroll === false) {\n      setAutoScroll(true);\n    }\n  }, [autoScroll, scrollDirection]);\n  const startDownloadAll = () => {\n    setDownloadAllStatus(true);\n    onDownloadAll()\n      .then(() => {\n        setDownloadAllStatus(false);\n      })\n      .catch((err: Error) => {\n        setDownloadAllStatus(false);\n        const error = err.message || 'Error downloading logs.';\n        errorModal({ error });\n      });\n  };\n  const downloadLogs = () => {\n    if (!scrollPane.current) return;\n    const logString = scrollPane.current.innerText;\n    const blob = new Blob([logString], {\n      type: 'text/plain;charset=utf-8',\n    });\n    saveAs(blob, `${taskName}.log`);\n  };\n\n  const containerStatus: ContainerStatus[] = resource.status?.containerStatuses ?? [];\n  const divider = <FlexItem className=\"odc-multi-stream-logs__divider\">|</FlexItem>;\n  return (\n    <div ref={fullscreenRef} className=\"odc-multi-stream-logs\">\n      <Flex\n        className={classNames({\n          'odc-multi-stream-logs--fullscreen': isFullscreen,\n        })}\n      >\n        <FlexItem\n          className=\"odc-multi-stream-logs__button\"\n          breakpointMods={[{ modifier: FlexModifiers['align-right'] }]}\n        >\n          <Button variant=\"link\" onClick={downloadLogs} isInline>\n            <DownloadIcon className=\"odc-multi-stream-logs__icon\" />\n            Download\n          </Button>\n        </FlexItem>\n        {divider}\n        {onDownloadAll && (\n          <>\n            <FlexItem className=\"odc-multi-stream-logs__button\">\n              <Button\n                variant=\"link\"\n                onClick={startDownloadAll}\n                isDisabled={downloadAllStatus}\n                isInline\n              >\n                <DownloadIcon className=\"odc-multi-stream-logs__icon\" />\n                {downloadAllLabel || 'Download All'}\n                {downloadAllStatus && <LoadingInline />}\n              </Button>\n            </FlexItem>\n            {divider}\n          </>\n        )}\n        {fullscreenToggle && (\n          <FlexItem className=\"odc-multi-stream-logs__button\">\n            <Button variant=\"link\" onClick={fullscreenToggle} isInline>\n              {isFullscreen ? (\n                <>\n                  <CompressIcon className=\"odc-multi-stream-logs__icon\" />\n                  Collapse\n                </>\n              ) : (\n                <>\n                  <ExpandIcon className=\"odc-multi-stream-logs__icon\" />\n                  Expand\n                </>\n              )}\n            </Button>\n          </FlexItem>\n        )}\n      </Flex>\n      <div className=\"odc-multi-stream-logs__taskName\">\n        {taskName}\n        {stillFetching && (\n          <span className=\"odc-multi-stream-logs__taskName__loading-indicator\">\n            <LoadingInline />\n          </span>\n        )}\n      </div>\n      <div className=\"odc-multi-stream-logs__container\" data-test-id=\"logs-task-container\">\n        <div\n          className=\"odc-multi-stream-logs__container__logs\"\n          ref={scrollPane}\n          onScroll={handleScrollCallback}\n        >\n          {containers.map((container, idx) => {\n            const resourceStatus = containerToLogSourceStatus(containerStatus[idx]);\n            return (\n              resourceStatus !== LOG_SOURCE_WAITING && (\n                <Logs\n                  key={container.name}\n                  resource={resource}\n                  container={container}\n                  resourceStatus={resourceStatus}\n                  onComplete={handleComplete}\n                  render={renderToCount >= idx}\n                  autoScroll={autoScroll}\n                />\n              )\n            );\n          })}\n        </div>\n      </div>\n    </div>\n  );\n};\n"]}]}