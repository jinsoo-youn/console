{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/cloud-shell/CloudShellMastheadButton.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/cloud-shell/CloudShellMastheadButton.tsx","mtime":1615298458590},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { TerminalIcon } from '@patternfly/react-icons';\nimport { isCloudShellExpanded } from '../../redux/reducers/cloud-shell-reducer';\nimport { Button, ToolbarItem, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { connectToFlags } from '@console/internal/reducers/features';\nimport { FLAG_DEVWORKSPACE } from '../../consts';\nimport { toggleCloudShellExpanded } from '../../redux/actions/cloud-shell-actions';\nimport cloudShellConfirmationModal from './cloudShellConfirmationModal';\nimport { checkTerminalAvailable } from './cloud-shell-utils';\nconst ClouldShellMastheadButton = ({ flags, onClick, open }) => {\n    const [terminalAvailable, setTerminalAvailable] = React.useState(false);\n    const flagEnabled = flags[FLAG_DEVWORKSPACE];\n    React.useEffect(() => {\n        let mounted = true;\n        if (flagEnabled) {\n            checkTerminalAvailable()\n                .then(() => {\n                if (mounted) {\n                    setTerminalAvailable(true);\n                }\n            })\n                .catch(() => {\n                if (mounted) {\n                    setTerminalAvailable(false);\n                }\n            });\n        }\n        else {\n            setTerminalAvailable(false);\n        }\n        return () => {\n            mounted = false;\n        };\n    }, [flagEnabled]);\n    if (!flagEnabled || !terminalAvailable) {\n        return null;\n    }\n    const toggleTerminal = () => {\n        if (open) {\n            return cloudShellConfirmationModal(onClick);\n        }\n        return onClick();\n    };\n    return (React.createElement(ToolbarItem, null,\n        React.createElement(Tooltip, { content: open ? 'Close command line terminal' : 'Open command line terminal', position: TooltipPosition.bottom },\n            React.createElement(Button, { variant: \"plain\", \"aria-label\": \"Command line terminal\", onClick: toggleTerminal, className: open ? 'pf-m-selected' : undefined },\n                React.createElement(TerminalIcon, { className: \"co-masthead-icon\" })))));\n};\nconst cloudShellStateToProps = (state) => ({\n    open: isCloudShellExpanded(state),\n});\nconst cloudShellPropsToState = (dispatch) => ({\n    onClick: () => dispatch(toggleCloudShellExpanded()),\n});\nexport default connect(cloudShellStateToProps, cloudShellPropsToState)(connectToFlags(FLAG_DEVWORKSPACE)(ClouldShellMastheadButton));\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/cloud-shell/CloudShellMastheadButton.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/cloud-shell/CloudShellMastheadButton.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { RootState } from '@console/internal/redux';\nimport { TerminalIcon } from '@patternfly/react-icons';\nimport { isCloudShellExpanded } from '../../redux/reducers/cloud-shell-reducer';\nimport { Button, ToolbarItem, Tooltip, TooltipPosition } from '@patternfly/react-core';\nimport { connectToFlags, WithFlagsProps } from '@console/internal/reducers/features';\nimport { FLAG_DEVWORKSPACE } from '../../consts';\nimport { toggleCloudShellExpanded } from '../../redux/actions/cloud-shell-actions';\nimport cloudShellConfirmationModal from './cloudShellConfirmationModal';\nimport { checkTerminalAvailable } from './cloud-shell-utils';\n\ntype DispatchProps = {\n  onClick: () => void;\n};\n\ntype StateProps = {\n  open?: boolean;\n};\n\ntype Props = WithFlagsProps & StateProps & DispatchProps;\n\nconst ClouldShellMastheadButton: React.FC<Props> = ({ flags, onClick, open }) => {\n  const [terminalAvailable, setTerminalAvailable] = React.useState(false);\n  const flagEnabled = flags[FLAG_DEVWORKSPACE];\n  React.useEffect(() => {\n    let mounted = true;\n    if (flagEnabled) {\n      checkTerminalAvailable()\n        .then(() => {\n          if (mounted) {\n            setTerminalAvailable(true);\n          }\n        })\n        .catch(() => {\n          if (mounted) {\n            setTerminalAvailable(false);\n          }\n        });\n    } else {\n      setTerminalAvailable(false);\n    }\n    return () => {\n      mounted = false;\n    };\n  }, [flagEnabled]);\n\n  if (!flagEnabled || !terminalAvailable) {\n    return null;\n  }\n\n  const toggleTerminal = () => {\n    if (open) {\n      return cloudShellConfirmationModal(onClick);\n    }\n    return onClick();\n  };\n\n  return (\n    <ToolbarItem>\n      <Tooltip\n        content={open ? 'Close command line terminal' : 'Open command line terminal'}\n        position={TooltipPosition.bottom}\n      >\n        <Button\n          variant=\"plain\"\n          aria-label=\"Command line terminal\"\n          onClick={toggleTerminal}\n          className={open ? 'pf-m-selected' : undefined}\n        >\n          <TerminalIcon className=\"co-masthead-icon\" />\n        </Button>\n      </Tooltip>\n    </ToolbarItem>\n  );\n};\n\nconst cloudShellStateToProps = (state: RootState): StateProps => ({\n  open: isCloudShellExpanded(state),\n});\n\nconst cloudShellPropsToState = (dispatch: Dispatch): DispatchProps => ({\n  onClick: () => dispatch(toggleCloudShellExpanded()),\n});\n\nexport default connect<StateProps, DispatchProps>(\n  cloudShellStateToProps,\n  cloudShellPropsToState,\n)(connectToFlags(FLAG_DEVWORKSPACE)(ClouldShellMastheadButton));\n"]}]}