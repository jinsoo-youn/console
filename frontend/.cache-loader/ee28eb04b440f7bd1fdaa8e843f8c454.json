{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/health-checks/health-checks-probe-validation-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/health-checks/health-checks-probe-validation-utils.ts","mtime":1616735742380},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as yup from 'yup';\nconst pathRegex = /^\\/.*$/;\nexport const MAX_INT32 = 2147483647;\nexport const healthChecksValidationSchema = yup.object().shape({\n    containerName: yup.string(),\n    showForm: yup.boolean(),\n    enabled: yup.boolean(),\n    modified: yup.boolean(),\n    data: yup.object().when('showForm', {\n        is: true,\n        then: yup.object().shape({\n            periodSeconds: yup\n                .number()\n                .integer('Value must be an integer.')\n                .min(1, 'Period must be greater than or equal to 1.')\n                .max(MAX_INT32, 'Value is larger than maximum value allowed.'),\n            initialDelaySeconds: yup\n                .number()\n                .integer('Value must be an integer.')\n                .min(0, 'Initial Delay must be greater than or equal to 0.')\n                .max(MAX_INT32, 'Value is larger than maximum value allowed.'),\n            failureThreshold: yup\n                .number()\n                .integer('Value must be an integer.')\n                .min(1, 'Failure Threshold must be greater than or equal to 1.'),\n            timeoutSeconds: yup\n                .number()\n                .integer('Value must be an integer.')\n                .min(1, 'Timeout must be greater than or equal to 1.')\n                .max(MAX_INT32, 'Value is larger than maximum value allowed.'),\n            successThreshold: yup\n                .number()\n                .integer('Value must be an integer.')\n                .min(1, 'Success Threshold must be greater than or equal to 1.')\n                .max(MAX_INT32, 'Value is larger than maximum value allowed.'),\n            requestType: yup.string(),\n            httpGet: yup.object().when('requestType', {\n                is: 'httpGet',\n                then: yup.object({\n                    path: yup\n                        .string()\n                        .matches(pathRegex, { message: 'Path must start with /.', excludeEmptyString: true }),\n                    port: yup.number().required('Required'),\n                }),\n            }),\n            tcpSocket: yup.object().when('requestType', {\n                is: 'tcpSocket',\n                then: yup.object({\n                    port: yup.number().required('Required'),\n                }),\n            }),\n            exec: yup.object().when('requestType', {\n                is: 'command',\n                then: yup.object({\n                    command: yup.array().of(yup.string().required('Required')),\n                }),\n            }),\n        }),\n    }),\n});\nexport const healthChecksProbesValidationSchema = yup.object().shape({\n    readinessProbe: healthChecksValidationSchema,\n    livenessProbe: healthChecksValidationSchema,\n    startupProbe: healthChecksValidationSchema,\n});\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/health-checks/health-checks-probe-validation-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/health-checks/health-checks-probe-validation-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as yup from 'yup';\n\nconst pathRegex = /^\\/.*$/;\n\nexport const MAX_INT32 = 2147483647;\n\nexport const healthChecksValidationSchema = yup.object().shape({\n  containerName: yup.string(),\n  showForm: yup.boolean(),\n  enabled: yup.boolean(),\n  modified: yup.boolean(),\n  data: yup.object().when('showForm', {\n    is: true,\n    then: yup.object().shape({\n      periodSeconds: yup\n        .number()\n        .integer('Value must be an integer.')\n        .min(1, 'Period must be greater than or equal to 1.')\n        .max(MAX_INT32, 'Value is larger than maximum value allowed.'),\n      initialDelaySeconds: yup\n        .number()\n        .integer('Value must be an integer.')\n        .min(0, 'Initial Delay must be greater than or equal to 0.')\n        .max(MAX_INT32, 'Value is larger than maximum value allowed.'),\n      failureThreshold: yup\n        .number()\n        .integer('Value must be an integer.')\n        .min(1, 'Failure Threshold must be greater than or equal to 1.'),\n      timeoutSeconds: yup\n        .number()\n        .integer('Value must be an integer.')\n        .min(1, 'Timeout must be greater than or equal to 1.')\n        .max(MAX_INT32, 'Value is larger than maximum value allowed.'),\n      successThreshold: yup\n        .number()\n        .integer('Value must be an integer.')\n        .min(1, 'Success Threshold must be greater than or equal to 1.')\n        .max(MAX_INT32, 'Value is larger than maximum value allowed.'),\n      requestType: yup.string(),\n      httpGet: yup.object().when('requestType', {\n        is: 'httpGet',\n        then: yup.object({\n          path: yup\n            .string()\n            .matches(pathRegex, { message: 'Path must start with /.', excludeEmptyString: true }),\n          port: yup.number().required('Required'),\n        }),\n      }),\n      tcpSocket: yup.object().when('requestType', {\n        is: 'tcpSocket',\n        then: yup.object({\n          port: yup.number().required('Required'),\n        }),\n      }),\n      exec: yup.object().when('requestType', {\n        is: 'command',\n        then: yup.object({\n          command: yup.array().of(yup.string().required('Required')),\n        }),\n      }),\n    }),\n  }),\n});\n\nexport const healthChecksProbesValidationSchema = yup.object().shape({\n  readinessProbe: healthChecksValidationSchema,\n  livenessProbe: healthChecksValidationSchema,\n  startupProbe: healthChecksValidationSchema,\n});\n"]}]}