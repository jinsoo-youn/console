{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/graph-helper/data-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/graph-helper/data-utils.ts","mtime":1616735742380},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { getType } from '@console/internal/components/utils/units';\nconst log = (x, y) => {\n    return Math.log(y) / Math.log(x);\n};\n// Get the larget unit seen in the dataframe within the supported range\nconst bestUnit = (dataPoints, type) => {\n    const flattenDataPoints = dataPoints.reduce((acc, arr) => acc.concat(arr), []);\n    const bestLevel = flattenDataPoints.reduce((maxUnit, point) => {\n        const index = Math.floor(log(_.get(type, 'divisor', 1024), point.y));\n        const unitIndex = index >= type.units.length ? type.units.length - 1 : index;\n        return maxUnit < unitIndex ? unitIndex : maxUnit;\n    }, -1);\n    return _.get(type, ['units', bestLevel]);\n};\n// Array based procssor\nexport const processFrame = (dataPoints, typeName) => {\n    const type = getType(typeName);\n    let unit = null;\n    if (dataPoints && dataPoints[0]) {\n        // Get the appropriate unit and convert the dataset to that level\n        unit = bestUnit(dataPoints, type);\n        const frameLevel = type.units.indexOf(unit);\n        dataPoints.forEach((arr) => arr.forEach((point) => {\n            point.y /= type.divisor ** frameLevel;\n        }));\n    }\n    return { processedData: dataPoints, unit };\n};\nexport var ByteDataTypes;\n(function (ByteDataTypes) {\n    ByteDataTypes[\"BinaryBytes\"] = \"binaryBytes\";\n    ByteDataTypes[\"BinaryBytesWithoutB\"] = \"binaryBytesWithoutB\";\n    ByteDataTypes[\"DecimalBytes\"] = \"decimalBytes\";\n    ByteDataTypes[\"DecimalBytesWithoutB\"] = \"decimalBytesWithoutB\";\n})(ByteDataTypes || (ByteDataTypes = {}));\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/graph-helper/data-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/graph-helper/data-utils.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAE5B,OAAO,EAAE,OAAO,EAAE,MAAM,0CAA0C,CAAC;AAEnE,MAAM,GAAG,GAAG,CAAC,CAAS,EAAE,CAAS,EAAE,EAAE;IACnC,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;AACnC,CAAC,CAAC;AAEF,uEAAuE;AACvE,MAAM,QAAQ,GAAG,CAAC,UAAyB,EAAE,IAAI,EAAE,EAAE;IACnD,MAAM,iBAAiB,GAAG,UAAU,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC;IAE/E,MAAM,SAAS,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,KAAK,EAAE,EAAE;QAC5D,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,SAAS,EAAE,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;QACrE,MAAM,SAAS,GAAG,KAAK,IAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;QAC7E,OAAO,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC;IACnD,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;IACP,OAAO,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC;AAEF,uBAAuB;AACvB,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,UAAyB,EAAE,QAAgB,EAAsB,EAAE;IAC9F,MAAM,IAAI,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAC;IAC/B,IAAI,IAAI,GAAG,IAAI,CAAC;IAChB,IAAI,UAAU,IAAI,UAAU,CAAC,CAAC,CAAC,EAAE;QAC/B,iEAAiE;QACjE,IAAI,GAAG,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;QAClC,MAAM,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC5C,UAAU,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE,CACzB,GAAG,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE;YACpB,KAAK,CAAC,CAAC,IAAI,IAAI,CAAC,OAAO,IAAI,UAAU,CAAC;QACxC,CAAC,CAAC,CACH,CAAC;KACH;IACD,OAAO,EAAE,aAAa,EAAE,UAAU,EAAE,IAAI,EAAE,CAAC;AAC7C,CAAC,CAAC;AAOF,MAAM,CAAN,IAAY,aAKX;AALD,WAAY,aAAa;IACvB,4CAA2B,CAAA;IAC3B,4DAA2C,CAAA;IAC3C,8CAA6B,CAAA;IAC7B,8DAA6C,CAAA;AAC/C,CAAC,EALW,aAAa,KAAb,aAAa,QAKxB","sourcesContent":["import * as _ from 'lodash';\nimport { DataPoint } from '@console/internal/components/graphs';\nimport { getType } from '@console/internal/components/utils/units';\n\nconst log = (x: number, y: number) => {\n  return Math.log(y) / Math.log(x);\n};\n\n// Get the larget unit seen in the dataframe within the supported range\nconst bestUnit = (dataPoints: DataPoint[][], type) => {\n  const flattenDataPoints = dataPoints.reduce((acc, arr) => acc.concat(arr), []);\n\n  const bestLevel = flattenDataPoints.reduce((maxUnit, point) => {\n    const index = Math.floor(log(_.get(type, 'divisor', 1024), point.y));\n    const unitIndex = index >= type.units.length ? type.units.length - 1 : index;\n    return maxUnit < unitIndex ? unitIndex : maxUnit;\n  }, -1);\n  return _.get(type, ['units', bestLevel]);\n};\n\n// Array based procssor\nexport const processFrame = (dataPoints: DataPoint[][], typeName: string): ProcessFrameResult => {\n  const type = getType(typeName);\n  let unit = null;\n  if (dataPoints && dataPoints[0]) {\n    // Get the appropriate unit and convert the dataset to that level\n    unit = bestUnit(dataPoints, type);\n    const frameLevel = type.units.indexOf(unit);\n    dataPoints.forEach((arr) =>\n      arr.forEach((point) => {\n        point.y /= type.divisor ** frameLevel;\n      }),\n    );\n  }\n  return { processedData: dataPoints, unit };\n};\n\nexport type ProcessFrameResult = {\n  processedData: DataPoint[][];\n  unit: string;\n};\n\nexport enum ByteDataTypes {\n  BinaryBytes = 'binaryBytes',\n  BinaryBytesWithoutB = 'binaryBytesWithoutB',\n  DecimalBytes = 'decimalBytes',\n  DecimalBytesWithoutB = 'decimalBytesWithoutB',\n}\n"]}]}