{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/event-sources/ContainerSourceSection.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/event-sources/ContainerSourceSection.tsx","mtime":1616735742400},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useFormikContext } from 'formik';\nimport { TextInputTypes, FormGroup } from '@patternfly/react-core';\nimport { InputField, TextColumnField } from '@console/shared';\nimport { AsyncComponent } from '@console/internal/components/utils';\nimport FormSection from '@console/dev-console/src/components/import/section/FormSection';\nimport { getSuggestedName } from '@console/dev-console/src/utils/imagestream-utils';\nconst containerPaths = {\n    Image: 'data.containersource.template.spec.containers[0].image',\n    Name: 'data.containersource.template.spec.containers[0].name',\n    Env: 'data.containersource.template.spec.containers[0].env',\n    Args: 'data.containersource.template.spec.containers[0].args',\n};\nconst ContainerSourceSection = () => {\n    const { values, setFieldValue } = useFormikContext();\n    const { data: { containersource: { template: { spec: { containers: [{ env: envs, args }], }, }, }, }, } = values;\n    const initialEnvValues = !_.isEmpty(envs) ? _.map(envs, (env) => _.values(env)) : [['', '']];\n    const [nameValue, setNameValue] = React.useState(initialEnvValues);\n    const handleNameValuePairs = React.useCallback(({ nameValuePairs }) => {\n        const updatedNameValuePairs = _.compact(nameValuePairs.map(([name, value]) => (value.length ? { name, value } : null)));\n        setNameValue(nameValuePairs);\n        setFieldValue(containerPaths.Env, updatedNameValuePairs);\n    }, [setFieldValue]);\n    return (React.createElement(FormSection, { title: \"ContainerSource\", extraMargin: true },\n        React.createElement(\"h3\", { className: \"co-section-heading-tertiary\" }, \"Container\"),\n        React.createElement(InputField, { \"data-test-id\": \"container-image-field\", type: TextInputTypes.text, name: containerPaths.Image, label: \"Image\", helpText: \"The image to run inside of the container\", required: true, onChange: (e) => {\n                setFieldValue(containerPaths.Name, getSuggestedName(e.target.value));\n            } }),\n        React.createElement(InputField, { \"data-test-id\": \"container-name-field\", type: TextInputTypes.text, name: containerPaths.Name, label: \"Name\", helpText: \"The name of the image\" }),\n        React.createElement(TextColumnField, { \"data-test-id\": \"container-arg-field\", name: containerPaths.Args, label: \"Arguments\", addLabel: \"Add args\", placeholder: \"argument\", helpText: \"Arguments passed to the container\", disableDeleteRow: (args === null || args === void 0 ? void 0 : args.length) === 1 }),\n        React.createElement(FormGroup, { fieldId: \"containersource-env\", label: \"Environment variables\", helperText: \"The list of variables to set in the container\" },\n            React.createElement(AsyncComponent, { loader: () => import('@console/internal/components/utils/name-value-editor').then((c) => c.NameValueEditor), \"data-test-id\": \"container-env-field\", nameValuePairs: nameValue, valueString: \"Value\", nameString: \"Name\", readOnly: false, allowSorting: false, updateParentData: handleNameValuePairs }))));\n};\nexport default ContainerSourceSection;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/event-sources/ContainerSourceSection.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/event-sources/ContainerSourceSection.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { TextInputTypes, FormGroup } from '@patternfly/react-core';\nimport { InputField, TextColumnField } from '@console/shared';\nimport { AsyncComponent } from '@console/internal/components/utils';\nimport FormSection from '@console/dev-console/src/components/import/section/FormSection';\nimport { getSuggestedName } from '@console/dev-console/src/utils/imagestream-utils';\n\nconst containerPaths = {\n  Image: 'data.containersource.template.spec.containers[0].image',\n  Name: 'data.containersource.template.spec.containers[0].name',\n  Env: 'data.containersource.template.spec.containers[0].env',\n  Args: 'data.containersource.template.spec.containers[0].args',\n};\n\nconst ContainerSourceSection: React.FC = () => {\n  const { values, setFieldValue } = useFormikContext<FormikValues>();\n  const {\n    data: {\n      containersource: {\n        template: {\n          spec: {\n            containers: [{ env: envs, args }],\n          },\n        },\n      },\n    },\n  } = values;\n  const initialEnvValues = !_.isEmpty(envs) ? _.map(envs, (env) => _.values(env)) : [['', '']];\n  const [nameValue, setNameValue] = React.useState(initialEnvValues);\n  const handleNameValuePairs = React.useCallback(\n    ({ nameValuePairs }) => {\n      const updatedNameValuePairs = _.compact(\n        nameValuePairs.map(([name, value]) => (value.length ? { name, value } : null)),\n      );\n      setNameValue(nameValuePairs);\n      setFieldValue(containerPaths.Env, updatedNameValuePairs);\n    },\n    [setFieldValue],\n  );\n  return (\n    <FormSection title=\"ContainerSource\" extraMargin>\n      <h3 className=\"co-section-heading-tertiary\">Container</h3>\n      <InputField\n        data-test-id=\"container-image-field\"\n        type={TextInputTypes.text}\n        name={containerPaths.Image}\n        label=\"Image\"\n        helpText=\"The image to run inside of the container\"\n        required\n        onChange={(e) => {\n          setFieldValue(containerPaths.Name, getSuggestedName(e.target.value));\n        }}\n      />\n      <InputField\n        data-test-id=\"container-name-field\"\n        type={TextInputTypes.text}\n        name={containerPaths.Name}\n        label=\"Name\"\n        helpText=\"The name of the image\"\n      />\n      <TextColumnField\n        data-test-id=\"container-arg-field\"\n        name={containerPaths.Args}\n        label=\"Arguments\"\n        addLabel=\"Add args\"\n        placeholder=\"argument\"\n        helpText=\"Arguments passed to the container\"\n        disableDeleteRow={args?.length === 1}\n      />\n      <FormGroup\n        fieldId=\"containersource-env\"\n        label=\"Environment variables\"\n        helperText=\"The list of variables to set in the container\"\n      >\n        <AsyncComponent\n          loader={() =>\n            import('@console/internal/components/utils/name-value-editor').then(\n              (c) => c.NameValueEditor,\n            )\n          }\n          data-test-id=\"container-env-field\"\n          nameValuePairs={nameValue}\n          valueString=\"Value\"\n          nameString=\"Name\"\n          readOnly={false}\n          allowSorting={false}\n          updateParentData={handleNameValuePairs}\n        />\n      </FormGroup>\n    </FormSection>\n  );\n};\n\nexport default ContainerSourceSection;\n"]}]}