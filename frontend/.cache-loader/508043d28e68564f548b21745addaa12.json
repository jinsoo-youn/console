{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/plugin.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/plugin.tsx","mtime":1615298458670},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport * as virtualMachineIcon from './images/virtual-machine.svg';\nimport { TemplateModel, PodModel } from '@console/internal/models';\nimport { getName } from '@console/shared/src/selectors/common';\nimport * as models from './models';\nimport { VMTemplateYAMLTemplates, VirtualMachineYAMLTemplates } from './models/templates';\nimport { getKubevirtHealthState } from './components/dashboards-page/overview-dashboard/health';\nimport { getVMStatusGroups, VMOffGroupIcon, } from './components/dashboards-page/overview-dashboard/inventory';\nimport kubevirtReducer from './redux';\nimport { accessReviewImportVM } from './utils/accessReview-v2v';\nimport { diskImportKindMapping } from './components/dashboards-page/overview-dashboard/utils';\nimport './style.scss';\nexport const FLAG_KUBEVIRT = 'KUBEVIRT';\nconst virtualMachineConfigurations = (namespace) => {\n    const virtualMachineResource = [\n        {\n            isList: true,\n            kind: models.VirtualMachineModel.kind,\n            namespace,\n            prop: 'virtualmachines',\n            optional: true,\n        },\n        {\n            isList: true,\n            kind: models.VirtualMachineInstanceModel.kind,\n            namespace,\n            prop: 'virtualmachineinstances',\n            optional: true,\n        },\n        {\n            isList: true,\n            kind: TemplateModel.kind,\n            prop: 'virtualmachinetemplates',\n            selector: {\n                matchLabels: { 'template.kubevirt.io/type': 'base' },\n            },\n            optional: true,\n        },\n        {\n            isList: true,\n            kind: models.VirtualMachineInstanceMigrationModel.kind,\n            namespace,\n            prop: 'migrations',\n            optional: true,\n        },\n        {\n            isList: true,\n            optional: true,\n            kind: models.DataVolumeModel.kind,\n            prop: 'dataVolumes',\n        },\n        {\n            isList: true,\n            optional: true,\n            kind: models.VirtualMachineImportModel.kind,\n            prop: 'vmImports',\n        },\n    ];\n    return virtualMachineResource;\n};\nconst plugin = [\n    {\n        type: 'ModelDefinition',\n        properties: {\n            models: _.values(models),\n        },\n    },\n    {\n        type: 'FeatureFlag/Model',\n        properties: {\n            model: models.VirtualMachineModel,\n            flag: FLAG_KUBEVIRT,\n        },\n    },\n    {\n        type: 'Overview/CRD',\n        properties: {\n            resources: virtualMachineConfigurations,\n            required: FLAG_KUBEVIRT,\n            utils: () => null,\n        },\n    },\n    {\n        type: 'NavItem/ResourceNS',\n        properties: {\n            section: 'Workloads',\n            componentProps: {\n                name: 'Virtualization',\n                resource: 'virtualization',\n            },\n            mergeBefore: 'Deployments',\n        },\n        flags: {\n            required: [FLAG_KUBEVIRT],\n        },\n    },\n    {\n        type: 'YAMLTemplate',\n        properties: {\n            model: models.VirtualMachineModel,\n            template: VirtualMachineYAMLTemplates.getIn(['default']),\n        },\n    },\n    {\n        type: 'YAMLTemplate',\n        properties: {\n            model: TemplateModel,\n            template: VMTemplateYAMLTemplates.getIn(['vm-template']),\n            templateName: 'vm-template',\n        },\n    },\n    // {\n    //   type: 'Page/Route',\n    //   properties: {\n    //     exact: true,\n    //     path: ['/k8s/ns/:ns/virtualization/~new'],\n    //     loader: () =>\n    //       import('./components/vms/vm-create-yaml' /* webpackChunkName: \"kubevirt\" */).then(\n    //         (m) => m.VMCreateYAML,\n    //       ),\n    //     required: FLAG_KUBEVIRT,\n    //   },\n    // },\n    // {\n    //   type: 'Page/Route',\n    //   properties: {\n    //     exact: true,\n    //     path: ['/k8s/ns/:ns/virtualization/~new-wizard'],\n    //     loader: () =>\n    //       import(\n    //         './components/create-vm-wizard' /* webpackChunkName: \"kubevirt-create-vm-wizard\" */\n    //       ).then((m) => m.CreateVMWizardPage),\n    //     required: FLAG_KUBEVIRT,\n    //   },\n    // },\n    // {\n    //   type: 'Page/Route',\n    //   properties: {\n    //     path: '/k8s/ns/:ns/virtualmachines/:name',\n    //     loader: () =>\n    //       import('./components/vms/vm-details-page' /* webpackChunkName: \"kubevirt\" */).then(\n    //         (m) => m.VirtualMachinesDetailsPage,\n    //       ),\n    //   },\n    // },\n    // {\n    //   type: 'Page/Route',\n    //   properties: {\n    //     path: '/k8s/ns/:ns/virtualmachineinstances/:name',\n    //     loader: () =>\n    //       import('./components/vms/vmi-details-page' /* webpackChunkName: \"kubevirt\" */).then(\n    //         (m) => m.VirtualMachinesInstanceDetailsPage,\n    //       ),\n    //   },\n    // },\n    // {\n    //   type: 'Page/Route',\n    //   properties: {\n    //     path: ['/k8s/ns/:ns/virtualization', '/k8s/all-namespaces/virtualization'],\n    //     loader: () =>\n    //       import('./components/vms/virtualization' /* webpackChunkName: \"kubevirt\" */).then(\n    //         (m) => m.VirtualizationPage,\n    //       ),\n    //     required: FLAG_KUBEVIRT,\n    //   },\n    // },\n    // {\n    //   type: 'Page/Route',\n    //   properties: {\n    //     exact: true,\n    //     path: ['/k8s/ns/:ns/virtualmachines', '/k8s/all-namespaces/virtualmachines'],\n    //     loader: () =>\n    //       import('./components/vms/virtualization' /* webpackChunkName: \"kubevirt\" */).then(\n    //         (m) => m.RedirectToVirtualizationPage,\n    //       ),\n    //     required: FLAG_KUBEVIRT,\n    //   },\n    // },\n    // {\n    //   type: 'Page/Route',\n    //   properties: {\n    //     exact: true,\n    //     path: ['/k8s/ns/:ns/vmtemplates', '/k8s/all-namespaces/vmtemplates'],\n    //     loader: () =>\n    //       import('./components/vms/virtualization' /* webpackChunkName: \"kubevirt\" */).then(\n    //         (m) => m.RedirectToVirtualizationTemplatePage,\n    //       ),\n    //     required: FLAG_KUBEVIRT,\n    //   },\n    // },\n    // {\n    //   type: 'Page/Route',\n    //   properties: {\n    //     path: '/k8s/ns/:ns/vmtemplates/:name',\n    //     loader: () =>\n    //       import(\n    //         './components/vm-templates/vm-template-details-page' /* webpackChunkName: \"kubevirt\" */\n    //       ).then((m) => m.VMTemplateDetailsPage),\n    //     required: FLAG_KUBEVIRT,\n    //   },\n    // },\n    // {\n    //   type: 'Page/Route',\n    //   properties: {\n    //     exact: true,\n    //     path: ['/k8s/ns/:ns/vmtemplates', '/k8s/all-namespaces/vmtemplates'],\n    //     loader: () =>\n    //       import('./components/vm-templates/vm-template' /* webpackChunkName: \"kubevirt\" */).then(\n    //         (m) => m.VirtualMachineTemplatesPage,\n    //       ),\n    //     required: FLAG_KUBEVIRT,\n    //   },\n    // },\n    {\n        type: 'Dashboards/Overview/Health/URL',\n        properties: {\n            title: 'Virtualization',\n            url: `apis/subresources.${models.VirtualMachineModel.apiGroup}/${models.VirtualMachineModel.apiVersion}/healthz`,\n            healthHandler: getKubevirtHealthState,\n        },\n        flags: {\n            required: [FLAG_KUBEVIRT],\n        },\n    },\n    {\n        type: 'Dashboards/Overview/Inventory/Item',\n        properties: {\n            additionalResources: {\n                vmis: {\n                    isList: true,\n                    kind: models.VirtualMachineInstanceModel.kind,\n                },\n                pods: {\n                    isList: true,\n                    kind: PodModel.kind,\n                },\n                migrations: {\n                    isList: true,\n                    kind: models.VirtualMachineInstanceMigrationModel.kind,\n                },\n                dataVolumes: {\n                    kind: models.DataVolumeModel.kind,\n                    isList: true,\n                    optional: true,\n                },\n                vmImports: {\n                    isList: true,\n                    kind: models.VirtualMachineImportModel.kind,\n                    optional: true,\n                },\n            },\n            model: models.VirtualMachineModel,\n            mapper: getVMStatusGroups,\n            useAbbr: true,\n        },\n        flags: {\n            required: [FLAG_KUBEVIRT],\n        },\n    },\n    {\n        type: 'Dashboards/Inventory/Item/Group',\n        properties: {\n            id: 'vm-off',\n            icon: React.createElement(VMOffGroupIcon, null),\n        },\n        flags: {\n            required: [FLAG_KUBEVIRT],\n        },\n    },\n    {\n        type: 'Dashboards/Storage/Capacity/Dropdown/Item',\n        properties: {\n            metric: 'VMs vs Pods',\n            queries: [\n                'sum((kube_persistentvolumeclaim_resource_requests_storage_bytes * on (namespace,persistentvolumeclaim) group_right() kube_pod_spec_volumes_persistentvolumeclaims_info{pod=~\"virt-launcher-.*\"}) * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"}))',\n                'sum((kube_persistentvolumeclaim_resource_requests_storage_bytes * on (namespace,persistentvolumeclaim) group_right() kube_pod_spec_volumes_persistentvolumeclaims_info{pod !~\"virt-launcher-.*\"}) * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"}))',\n            ],\n            required: FLAG_KUBEVIRT,\n        },\n    },\n    {\n        type: 'ReduxReducer',\n        properties: {\n            namespace: 'kubevirt',\n            reducer: kubevirtReducer,\n            required: FLAG_KUBEVIRT,\n        },\n    },\n    {\n        type: 'Project/Dashboard/Inventory/Item',\n        properties: {\n            additionalResources: [\n                {\n                    isList: true,\n                    kind: models.VirtualMachineInstanceModel.kind,\n                    prop: 'vmis',\n                },\n                {\n                    isList: true,\n                    kind: PodModel.kind,\n                    prop: 'pods',\n                },\n                {\n                    isList: true,\n                    kind: models.VirtualMachineInstanceMigrationModel.kind,\n                    prop: 'migrations',\n                },\n                {\n                    isList: true,\n                    optional: true,\n                    kind: models.DataVolumeModel.kind,\n                    prop: 'dataVolumes',\n                },\n                {\n                    isList: true,\n                    optional: true,\n                    kind: models.VirtualMachineImportModel.kind,\n                    prop: 'vmImports',\n                },\n            ],\n            model: models.VirtualMachineModel,\n            mapper: getVMStatusGroups,\n            useAbbr: true,\n        },\n        flags: {\n            required: [FLAG_KUBEVIRT],\n        },\n    },\n    {\n        type: 'Dashboards/Overview/Activity/Resource',\n        properties: {\n            k8sResource: {\n                isList: true,\n                kind: models.DataVolumeModel.kind,\n                prop: 'dvs',\n            },\n            isActivity: (resource) => {\n                var _a, _b, _c, _d;\n                return ((_a = resource === null || resource === void 0 ? void 0 : resource.status) === null || _a === void 0 ? void 0 : _a.phase) === 'ImportInProgress' &&\n                    Object.keys(diskImportKindMapping).includes((_d = (_c = (_b = resource === null || resource === void 0 ? void 0 : resource.metadata) === null || _b === void 0 ? void 0 : _b.ownerReferences) === null || _c === void 0 ? void 0 : _c[0]) === null || _d === void 0 ? void 0 : _d.kind);\n            },\n            getTimestamp: (resource) => new Date(resource.metadata.creationTimestamp),\n            loader: () => import('./components/dashboards-page/overview-dashboard/activity' /* webpackChunkName: \"kubevirt-activity\" */).then((m) => m.DiskImportActivity),\n        },\n        flags: {\n            required: [FLAG_KUBEVIRT],\n        },\n    },\n    {\n        type: 'Dashboards/Overview/Activity/Resource',\n        properties: {\n            k8sResource: {\n                isList: true,\n                kind: PodModel.kind,\n                prop: 'pods',\n            },\n            isActivity: (resource) => getName(resource).startsWith('kubevirt-v2v-conversion'),\n            getTimestamp: (resource) => new Date(resource.metadata.creationTimestamp),\n            loader: () => import('./components/dashboards-page/overview-dashboard/activity' /* webpackChunkName: \"kubevirt-activity\" */).then((m) => m.V2VImportActivity),\n        },\n        flags: {\n            required: [FLAG_KUBEVIRT],\n        },\n    },\n    {\n        type: 'AddAction',\n        flags: {\n            required: [FLAG_KUBEVIRT],\n        },\n        properties: {\n            id: 'import-via-v2v',\n            url: '/k8s/ns/:namespace/virtualization/~new-wizard?mode=import',\n            label: 'Import Virtual Machine',\n            description: 'Import a virtual machine from external hypervisor',\n            icon: virtualMachineIcon,\n            accessReview: accessReviewImportVM,\n        },\n    },\n];\nexport default plugin;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/plugin.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/plugin.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport * as virtualMachineIcon from './images/virtual-machine.svg';\nimport {\n  Plugin,\n  ResourceNSNavItem,\n  OverviewCRD,\n  ResourceListPage,\n  ResourceDetailsPage,\n  ModelFeatureFlag,\n  YAMLTemplate,\n  ModelDefinition,\n  RoutePage,\n  DashboardsOverviewHealthURLSubsystem,\n  DashboardsOverviewInventoryItem,\n  DashboardsInventoryItemGroup,\n  ReduxReducer,\n  ProjectDashboardInventoryItem,\n  DashboardsOverviewResourceActivity,\n} from '@console/plugin-sdk';\nimport { DashboardsStorageCapacityDropdownItem } from '@console/ceph-storage-plugin';\nimport { TemplateModel, PodModel } from '@console/internal/models';\nimport { getName } from '@console/shared/src/selectors/common';\nimport { AddAction } from '@console/dev-console/src/extensions/add-actions';\nimport { FirehoseResource } from '@console/internal/components/utils';\nimport * as models from './models';\nimport { VMTemplateYAMLTemplates, VirtualMachineYAMLTemplates } from './models/templates';\nimport { getKubevirtHealthState } from './components/dashboards-page/overview-dashboard/health';\nimport {\n  getVMStatusGroups,\n  VMOffGroupIcon,\n} from './components/dashboards-page/overview-dashboard/inventory';\nimport kubevirtReducer from './redux';\nimport { accessReviewImportVM } from './utils/accessReview-v2v';\nimport { diskImportKindMapping } from './components/dashboards-page/overview-dashboard/utils';\n\nimport './style.scss';\n\ntype ConsumedExtensions =\n  | ResourceNSNavItem\n  | OverviewCRD\n  | ResourceListPage\n  | ResourceDetailsPage\n  | ModelFeatureFlag\n  | YAMLTemplate\n  | ModelDefinition\n  | RoutePage\n  | DashboardsOverviewHealthURLSubsystem\n  | DashboardsOverviewInventoryItem\n  | DashboardsInventoryItemGroup\n  | DashboardsStorageCapacityDropdownItem\n  | ReduxReducer\n  | ProjectDashboardInventoryItem\n  | DashboardsOverviewResourceActivity\n  | AddAction;\n\nexport const FLAG_KUBEVIRT = 'KUBEVIRT';\n\nconst virtualMachineConfigurations = (namespace: string): FirehoseResource[] => {\n  const virtualMachineResource = [\n    {\n      isList: true,\n      kind: models.VirtualMachineModel.kind,\n      namespace,\n      prop: 'virtualmachines',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: models.VirtualMachineInstanceModel.kind,\n      namespace,\n      prop: 'virtualmachineinstances',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: TemplateModel.kind,\n      prop: 'virtualmachinetemplates',\n      selector: {\n        matchLabels: { 'template.kubevirt.io/type': 'base' },\n      },\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: models.VirtualMachineInstanceMigrationModel.kind,\n      namespace,\n      prop: 'migrations',\n      optional: true,\n    },\n    {\n      isList: true,\n      optional: true,\n      kind: models.DataVolumeModel.kind,\n      prop: 'dataVolumes',\n    },\n    {\n      isList: true,\n      optional: true,\n      kind: models.VirtualMachineImportModel.kind,\n      prop: 'vmImports',\n    },\n  ];\n  return virtualMachineResource;\n};\n\nconst plugin: Plugin<ConsumedExtensions> = [\n  {\n    type: 'ModelDefinition',\n    properties: {\n      models: _.values(models),\n    },\n  },\n  {\n    type: 'FeatureFlag/Model',\n    properties: {\n      model: models.VirtualMachineModel,\n      flag: FLAG_KUBEVIRT,\n    },\n  },\n  {\n    type: 'Overview/CRD',\n    properties: {\n      resources: virtualMachineConfigurations,\n      required: FLAG_KUBEVIRT,\n      utils: () => null,\n    },\n  },\n  {\n    type: 'NavItem/ResourceNS',\n    properties: {\n      section: 'Workloads',\n      componentProps: {\n        name: 'Virtualization',\n        resource: 'virtualization',\n      },\n      mergeBefore: 'Deployments',\n    },\n    flags: {\n      required: [FLAG_KUBEVIRT],\n    },\n  },\n  {\n    type: 'YAMLTemplate',\n    properties: {\n      model: models.VirtualMachineModel,\n      template: VirtualMachineYAMLTemplates.getIn(['default']),\n    },\n  },\n  {\n    type: 'YAMLTemplate',\n    properties: {\n      model: TemplateModel,\n      template: VMTemplateYAMLTemplates.getIn(['vm-template']),\n      templateName: 'vm-template',\n    },\n  },\n  // {\n  //   type: 'Page/Route',\n  //   properties: {\n  //     exact: true,\n  //     path: ['/k8s/ns/:ns/virtualization/~new'],\n  //     loader: () =>\n  //       import('./components/vms/vm-create-yaml' /* webpackChunkName: \"kubevirt\" */).then(\n  //         (m) => m.VMCreateYAML,\n  //       ),\n  //     required: FLAG_KUBEVIRT,\n  //   },\n  // },\n  // {\n  //   type: 'Page/Route',\n  //   properties: {\n  //     exact: true,\n  //     path: ['/k8s/ns/:ns/virtualization/~new-wizard'],\n  //     loader: () =>\n  //       import(\n  //         './components/create-vm-wizard' /* webpackChunkName: \"kubevirt-create-vm-wizard\" */\n  //       ).then((m) => m.CreateVMWizardPage),\n  //     required: FLAG_KUBEVIRT,\n  //   },\n  // },\n  // {\n  //   type: 'Page/Route',\n  //   properties: {\n  //     path: '/k8s/ns/:ns/virtualmachines/:name',\n  //     loader: () =>\n  //       import('./components/vms/vm-details-page' /* webpackChunkName: \"kubevirt\" */).then(\n  //         (m) => m.VirtualMachinesDetailsPage,\n  //       ),\n  //   },\n  // },\n  // {\n  //   type: 'Page/Route',\n  //   properties: {\n  //     path: '/k8s/ns/:ns/virtualmachineinstances/:name',\n  //     loader: () =>\n  //       import('./components/vms/vmi-details-page' /* webpackChunkName: \"kubevirt\" */).then(\n  //         (m) => m.VirtualMachinesInstanceDetailsPage,\n  //       ),\n  //   },\n  // },\n  // {\n  //   type: 'Page/Route',\n  //   properties: {\n  //     path: ['/k8s/ns/:ns/virtualization', '/k8s/all-namespaces/virtualization'],\n  //     loader: () =>\n  //       import('./components/vms/virtualization' /* webpackChunkName: \"kubevirt\" */).then(\n  //         (m) => m.VirtualizationPage,\n  //       ),\n  //     required: FLAG_KUBEVIRT,\n  //   },\n  // },\n  // {\n  //   type: 'Page/Route',\n  //   properties: {\n  //     exact: true,\n  //     path: ['/k8s/ns/:ns/virtualmachines', '/k8s/all-namespaces/virtualmachines'],\n  //     loader: () =>\n  //       import('./components/vms/virtualization' /* webpackChunkName: \"kubevirt\" */).then(\n  //         (m) => m.RedirectToVirtualizationPage,\n  //       ),\n  //     required: FLAG_KUBEVIRT,\n  //   },\n  // },\n  // {\n  //   type: 'Page/Route',\n  //   properties: {\n  //     exact: true,\n  //     path: ['/k8s/ns/:ns/vmtemplates', '/k8s/all-namespaces/vmtemplates'],\n  //     loader: () =>\n  //       import('./components/vms/virtualization' /* webpackChunkName: \"kubevirt\" */).then(\n  //         (m) => m.RedirectToVirtualizationTemplatePage,\n  //       ),\n  //     required: FLAG_KUBEVIRT,\n  //   },\n  // },\n  // {\n  //   type: 'Page/Route',\n  //   properties: {\n  //     path: '/k8s/ns/:ns/vmtemplates/:name',\n  //     loader: () =>\n  //       import(\n  //         './components/vm-templates/vm-template-details-page' /* webpackChunkName: \"kubevirt\" */\n  //       ).then((m) => m.VMTemplateDetailsPage),\n  //     required: FLAG_KUBEVIRT,\n  //   },\n  // },\n  // {\n  //   type: 'Page/Route',\n  //   properties: {\n  //     exact: true,\n  //     path: ['/k8s/ns/:ns/vmtemplates', '/k8s/all-namespaces/vmtemplates'],\n  //     loader: () =>\n  //       import('./components/vm-templates/vm-template' /* webpackChunkName: \"kubevirt\" */).then(\n  //         (m) => m.VirtualMachineTemplatesPage,\n  //       ),\n  //     required: FLAG_KUBEVIRT,\n  //   },\n  // },\n  {\n    type: 'Dashboards/Overview/Health/URL',\n    properties: {\n      title: 'Virtualization',\n      url: `apis/subresources.${models.VirtualMachineModel.apiGroup}/${models.VirtualMachineModel.apiVersion}/healthz`,\n      healthHandler: getKubevirtHealthState,\n    },\n    flags: {\n      required: [FLAG_KUBEVIRT],\n    },\n  },\n  {\n    type: 'Dashboards/Overview/Inventory/Item',\n    properties: {\n      additionalResources: {\n        vmis: {\n          isList: true,\n          kind: models.VirtualMachineInstanceModel.kind,\n        },\n        pods: {\n          isList: true,\n          kind: PodModel.kind,\n        },\n        migrations: {\n          isList: true,\n          kind: models.VirtualMachineInstanceMigrationModel.kind,\n        },\n        dataVolumes: {\n          kind: models.DataVolumeModel.kind,\n          isList: true,\n          optional: true,\n        },\n        vmImports: {\n          isList: true,\n          kind: models.VirtualMachineImportModel.kind,\n          optional: true,\n        },\n      },\n      model: models.VirtualMachineModel,\n      mapper: getVMStatusGroups,\n      useAbbr: true,\n    },\n    flags: {\n      required: [FLAG_KUBEVIRT],\n    },\n  },\n  {\n    type: 'Dashboards/Inventory/Item/Group',\n    properties: {\n      id: 'vm-off',\n      icon: <VMOffGroupIcon />,\n    },\n    flags: {\n      required: [FLAG_KUBEVIRT],\n    },\n  },\n  {\n    type: 'Dashboards/Storage/Capacity/Dropdown/Item',\n    properties: {\n      metric: 'VMs vs Pods',\n      queries: [\n        'sum((kube_persistentvolumeclaim_resource_requests_storage_bytes * on (namespace,persistentvolumeclaim) group_right() kube_pod_spec_volumes_persistentvolumeclaims_info{pod=~\"virt-launcher-.*\"}) * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"}))',\n        'sum((kube_persistentvolumeclaim_resource_requests_storage_bytes * on (namespace,persistentvolumeclaim) group_right() kube_pod_spec_volumes_persistentvolumeclaims_info{pod !~\"virt-launcher-.*\"}) * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"}))',\n      ],\n      required: FLAG_KUBEVIRT,\n    },\n  },\n  {\n    type: 'ReduxReducer',\n    properties: {\n      namespace: 'kubevirt',\n      reducer: kubevirtReducer,\n      required: FLAG_KUBEVIRT,\n    },\n  },\n  {\n    type: 'Project/Dashboard/Inventory/Item',\n    properties: {\n      additionalResources: [\n        {\n          isList: true,\n          kind: models.VirtualMachineInstanceModel.kind,\n          prop: 'vmis',\n        },\n        {\n          isList: true,\n          kind: PodModel.kind,\n          prop: 'pods',\n        },\n        {\n          isList: true,\n          kind: models.VirtualMachineInstanceMigrationModel.kind,\n          prop: 'migrations',\n        },\n        {\n          isList: true,\n          optional: true,\n          kind: models.DataVolumeModel.kind,\n          prop: 'dataVolumes',\n        },\n        {\n          isList: true,\n          optional: true,\n          kind: models.VirtualMachineImportModel.kind,\n          prop: 'vmImports',\n        },\n      ],\n      model: models.VirtualMachineModel,\n      mapper: getVMStatusGroups,\n      useAbbr: true,\n    },\n    flags: {\n      required: [FLAG_KUBEVIRT],\n    },\n  },\n  {\n    type: 'Dashboards/Overview/Activity/Resource',\n    properties: {\n      k8sResource: {\n        isList: true,\n        kind: models.DataVolumeModel.kind,\n        prop: 'dvs',\n      },\n      isActivity: (resource) =>\n        resource?.status?.phase === 'ImportInProgress' &&\n        Object.keys(diskImportKindMapping).includes(resource?.metadata?.ownerReferences?.[0]?.kind),\n      getTimestamp: (resource) => new Date(resource.metadata.creationTimestamp),\n      loader: () =>\n        import(\n          './components/dashboards-page/overview-dashboard/activity' /* webpackChunkName: \"kubevirt-activity\" */\n        ).then((m) => m.DiskImportActivity),\n    },\n    flags: {\n      required: [FLAG_KUBEVIRT],\n    },\n  },\n  {\n    type: 'Dashboards/Overview/Activity/Resource',\n    properties: {\n      k8sResource: {\n        isList: true,\n        kind: PodModel.kind,\n        prop: 'pods',\n      },\n      isActivity: (resource) => getName(resource).startsWith('kubevirt-v2v-conversion'),\n      getTimestamp: (resource) => new Date(resource.metadata.creationTimestamp),\n      loader: () =>\n        import(\n          './components/dashboards-page/overview-dashboard/activity' /* webpackChunkName: \"kubevirt-activity\" */\n        ).then((m) => m.V2VImportActivity),\n    },\n    flags: {\n      required: [FLAG_KUBEVIRT],\n    },\n  },\n  {\n    type: 'AddAction',\n    flags: {\n      required: [FLAG_KUBEVIRT],\n    },\n    properties: {\n      id: 'import-via-v2v',\n      url: '/k8s/ns/:namespace/virtualization/~new-wizard?mode=import',\n      label: 'Import Virtual Machine',\n      description: 'Import a virtual machine from external hypervisor',\n      icon: virtualMachineIcon,\n      accessReview: accessReviewImportVM,\n    },\n  },\n];\n\nexport default plugin;\n"]}]}