{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/import-submit-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/import-submit-utils.ts","mtime":1616735742380},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as _ from 'lodash';\nimport { ImageStreamModel, BuildConfigModel, DeploymentModel, DeploymentConfigModel, ProjectRequestModel, SecretModel, ServiceModel, RouteModel, } from '@console/internal/models';\nimport { k8sCreate, k8sUpdate } from '@console/internal/module/k8s';\nimport { ServiceModel as KnServiceModel } from '@console/knative-plugin';\nimport { getKnativeServiceDepResource } from '@console/knative-plugin/src/utils/create-knative-utils';\nimport { SecretType } from '@console/internal/components/secrets/create-secret';\nimport * as plugins from '@console/internal/plugins';\nimport { history } from '@console/internal/components/utils';\nimport { getRandomChars } from '@console/shared/src/utils';\nimport { getAppLabels, getPodLabels, getGitAnnotations, getCommonAnnotations, getTriggerAnnotation, mergeData, } from '../../utils/resource-label-utils';\nimport { createService, createRoute, dryRunOpt } from '../../utils/shared-submit-utils';\nimport { getProbesData } from '../health-checks/create-health-checks-probe-utils';\nimport { GitTypes, GitReadableTypes, Resources, } from './import-types';\nimport { createPipelineForImportFlow } from './pipeline/pipeline-template-utils';\nexport const generateSecret = () => {\n    // http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n    const s4 = () => Math.floor((1 + Math.random()) * 0x10000)\n        .toString(16)\n        .substring(1);\n    return s4() + s4() + s4() + s4();\n};\nexport const createProject = (projectData) => {\n    const project = {\n        metadata: {\n            name: projectData.name,\n        },\n        displayName: projectData.displayName,\n        description: projectData.description,\n    };\n    return k8sCreate(ProjectRequestModel, project);\n};\nexport const createOrUpdateImageStream = (formData, imageStreamData, dryRun, appResources, verb = 'create', generatedImageStreamName = '') => {\n    var _a;\n    const imageStreamList = (_a = appResources === null || appResources === void 0 ? void 0 : appResources.imageStream) === null || _a === void 0 ? void 0 : _a.data;\n    const imageStreamFilterData = _.orderBy(imageStreamList, ['metadata.resourceVersion'], ['desc']);\n    const originalImageStream = (imageStreamFilterData.length && imageStreamFilterData[0]) || {};\n    const { name, project: { name: namespace }, application: { name: application }, labels: userLabels, git: { url: repository, ref }, image: { tag }, } = formData;\n    const imageStreamName = imageStreamData && imageStreamData.metadata.name;\n    const defaultLabels = getAppLabels(name, application, imageStreamName, tag);\n    const defaultAnnotations = Object.assign(Object.assign({}, getGitAnnotations(repository, ref)), getCommonAnnotations());\n    const newImageStream = {\n        apiVersion: 'image.openshift.io/v1',\n        kind: 'ImageStream',\n        metadata: {\n            name: `${generatedImageStreamName || name}`,\n            namespace,\n            labels: Object.assign(Object.assign({}, defaultLabels), userLabels),\n            annotations: defaultAnnotations,\n        },\n    };\n    const imageStream = mergeData(originalImageStream, newImageStream);\n    return verb === 'update'\n        ? k8sUpdate(ImageStreamModel, imageStream)\n        : k8sCreate(ImageStreamModel, newImageStream, dryRun ? dryRunOpt : {});\n};\nexport const createWebhookSecret = (formData, secretType, dryRun) => {\n    const { name, project: { name: namespace }, } = formData;\n    const webhookSecret = {\n        apiVersion: 'v1',\n        data: {},\n        kind: 'Secret',\n        metadata: {\n            name: `${name}-${secretType}-webhook-secret`,\n            namespace,\n        },\n        stringData: { WebHookSecretKey: generateSecret() },\n        type: SecretType.opaque,\n    };\n    return k8sCreate(SecretModel, webhookSecret, dryRun ? dryRunOpt : {});\n};\nexport const createOrUpdateBuildConfig = (formData, imageStream, dryRun, originalBuildConfig, verb = 'create', generatedImageStreamName = '') => {\n    const { name, project: { name: namespace }, application: { name: application }, git: { url: repository, type: gitType, ref = 'master', dir: contextDir, secret: secretName }, docker: { dockerfilePath }, image: { tag: selectedTag }, build: { env, triggers, strategy: buildStrategy }, labels: userLabels, } = formData;\n    const imageStreamName = imageStream && imageStream.metadata.name;\n    const imageStreamNamespace = imageStream && imageStream.metadata.namespace;\n    const defaultLabels = getAppLabels(name, application, imageStreamName, selectedTag);\n    const defaultAnnotations = Object.assign(Object.assign({}, getGitAnnotations(repository, ref)), getCommonAnnotations());\n    let buildStrategyData;\n    switch (buildStrategy) {\n        case 'Docker':\n            buildStrategyData = {\n                dockerStrategy: { env, dockerfilePath },\n            };\n            break;\n        default:\n            buildStrategyData = {\n                sourceStrategy: {\n                    env,\n                    from: {\n                        kind: 'ImageStreamTag',\n                        name: `${imageStreamName}:${selectedTag}`,\n                        namespace: imageStreamNamespace,\n                    },\n                },\n            };\n            break;\n    }\n    const webhookTriggerData = {\n        type: GitReadableTypes[gitType],\n        [gitType]: {\n            secretReference: { name: `${name}-${gitType}-webhook-secret` },\n        },\n    };\n    const newBuildConfig = {\n        apiVersion: 'build.openshift.io/v1',\n        kind: 'BuildConfig',\n        metadata: {\n            name,\n            namespace,\n            labels: Object.assign(Object.assign({}, defaultLabels), userLabels),\n            annotations: defaultAnnotations,\n        },\n        spec: {\n            output: {\n                to: {\n                    kind: 'ImageStreamTag',\n                    name: `${generatedImageStreamName || name}:latest`,\n                },\n            },\n            source: Object.assign({ contextDir, git: {\n                    uri: repository,\n                    ref,\n                    type: 'Git',\n                } }, (secretName ? { sourceSecret: { name: secretName } } : {})),\n            strategy: Object.assign({ type: buildStrategy }, buildStrategyData),\n            triggers: [\n                {\n                    type: 'Generic',\n                    generic: {\n                        secretReference: { name: `${name}-generic-webhook-secret` },\n                    },\n                },\n                ...(triggers.webhook && gitType !== GitTypes.unsure ? [webhookTriggerData] : []),\n                ...(triggers.image ? [{ type: 'ImageChange', imageChange: {} }] : []),\n                ...(triggers.config ? [{ type: 'ConfigChange' }] : []),\n            ],\n        },\n    };\n    const buildConfig = mergeData(originalBuildConfig, newBuildConfig);\n    return verb === 'update'\n        ? k8sUpdate(BuildConfigModel, buildConfig)\n        : k8sCreate(BuildConfigModel, buildConfig, dryRun ? dryRunOpt : {});\n};\nexport const createOrUpdateDeployment = (formData, imageStream, dryRun, originalDeployment, verb = 'create') => {\n    const { name, project: { name: namespace }, application: { name: application }, image: { ports, tag }, deployment: { env, replicas, triggers: { image: imageChange }, }, labels: userLabels, limits: { cpu, memory }, git: { url: repository, ref }, healthChecks, } = formData;\n    const imageStreamName = imageStream && imageStream.metadata.name;\n    const defaultLabels = getAppLabels(name, application, imageStreamName, tag);\n    const annotations = Object.assign(Object.assign(Object.assign(Object.assign({}, getGitAnnotations(repository, ref)), getCommonAnnotations()), { 'alpha.image.policy.openshift.io/resolve-names': '*' }), getTriggerAnnotation(name, namespace, imageChange));\n    const podLabels = getPodLabels(name);\n    const newDeployment = {\n        apiVersion: 'apps/v1',\n        kind: 'Deployment',\n        metadata: {\n            name,\n            namespace,\n            labels: Object.assign(Object.assign({}, defaultLabels), userLabels),\n            annotations,\n        },\n        spec: {\n            selector: {\n                matchLabels: {\n                    app: name,\n                },\n            },\n            replicas,\n            template: {\n                metadata: {\n                    labels: Object.assign(Object.assign({}, userLabels), podLabels),\n                },\n                spec: {\n                    containers: [\n                        Object.assign({ name, image: `${name}:latest`, ports,\n                            env, resources: Object.assign(Object.assign({}, ((cpu.limit || memory.limit) && {\n                                limits: Object.assign(Object.assign({}, (cpu.limit && { cpu: `${cpu.limit}${cpu.limitUnit}` })), (memory.limit && { memory: `${memory.limit}${memory.limitUnit}` })),\n                            })), ((cpu.request || memory.request) && {\n                                requests: Object.assign(Object.assign({}, (cpu.request && { cpu: `${cpu.request}${cpu.requestUnit}` })), (memory.request && { memory: `${memory.request}${memory.requestUnit}` })),\n                            })) }, getProbesData(healthChecks)),\n                    ],\n                },\n            },\n        },\n    };\n    const deployment = mergeData(originalDeployment, newDeployment);\n    return verb === 'update'\n        ? k8sUpdate(DeploymentModel, deployment)\n        : k8sCreate(DeploymentModel, deployment, dryRun ? dryRunOpt : {});\n};\nexport const createOrUpdateDeploymentConfig = (formData, imageStream, dryRun, originalDeploymentConfig, verb = 'create') => {\n    const { name, project: { name: namespace }, application: { name: application }, image: { ports, tag }, deployment: { env, replicas, triggers }, labels: userLabels, limits: { cpu, memory }, git: { url: repository, ref }, healthChecks, } = formData;\n    const imageStreamName = imageStream && imageStream.metadata.name;\n    const defaultLabels = getAppLabels(name, application, imageStreamName, tag);\n    const defaultAnnotations = Object.assign(Object.assign({}, getGitAnnotations(repository, ref)), getCommonAnnotations());\n    const podLabels = getPodLabels(name);\n    const newDeploymentConfig = {\n        apiVersion: 'apps.openshift.io/v1',\n        kind: 'DeploymentConfig',\n        metadata: {\n            name,\n            namespace,\n            labels: Object.assign(Object.assign({}, defaultLabels), userLabels),\n            annotations: defaultAnnotations,\n        },\n        spec: {\n            selector: podLabels,\n            replicas,\n            template: {\n                metadata: {\n                    labels: Object.assign(Object.assign({}, userLabels), podLabels),\n                },\n                spec: {\n                    containers: [\n                        Object.assign({ name, image: `${name}:latest`, ports,\n                            env, resources: Object.assign(Object.assign({}, ((cpu.limit || memory.limit) && {\n                                limits: Object.assign(Object.assign({}, (cpu.limit && { cpu: `${cpu.limit}${cpu.limitUnit}` })), (memory.limit && { memory: `${memory.limit}${memory.limitUnit}` })),\n                            })), ((cpu.request || memory.request) && {\n                                requests: Object.assign(Object.assign({}, (cpu.request && { cpu: `${cpu.request}${cpu.requestUnit}` })), (memory.request && { memory: `${memory.request}${memory.requestUnit}` })),\n                            })) }, getProbesData(healthChecks)),\n                    ],\n                },\n            },\n            triggers: [\n                {\n                    type: 'ImageChange',\n                    imageChangeParams: {\n                        automatic: triggers.image,\n                        containerNames: [name],\n                        from: {\n                            kind: 'ImageStreamTag',\n                            name: `${name}:latest`,\n                        },\n                    },\n                },\n                ...(triggers.config ? [{ type: 'ConfigChange' }] : []),\n            ],\n        },\n    };\n    const deploymentConfig = mergeData(originalDeploymentConfig, newDeploymentConfig);\n    return verb === 'update'\n        ? k8sUpdate(DeploymentConfigModel, deploymentConfig)\n        : k8sCreate(DeploymentConfigModel, deploymentConfig, dryRun ? dryRunOpt : {});\n};\nexport const createOrUpdateResources = (formData, imageStream, createNewProject, dryRun = false, verb = 'create', appResources) => __awaiter(void 0, void 0, void 0, function* () {\n    var _a, _b, _c, _d;\n    const { name, project: { name: namespace }, route: { create: canCreateRoute, disable }, image: { ports }, build: { strategy: buildStrategy, triggers: { webhook: webhookTrigger }, }, deployment: { triggers: { image: imageChange }, }, git: { url: repository, type: gitType, ref }, pipeline, resources, } = formData;\n    const imageStreamName = _.get(imageStream, 'metadata.name');\n    createNewProject && (yield createProject(formData.project));\n    const requests = [];\n    let generatedImageStreamName = '';\n    const imageStreamList = (_a = appResources === null || appResources === void 0 ? void 0 : appResources.imageStream) === null || _a === void 0 ? void 0 : _a.data;\n    if (resources === Resources.KnativeService &&\n        imageStreamList &&\n        imageStreamList.length &&\n        verb === 'update') {\n        generatedImageStreamName = `${name}-${getRandomChars()}`;\n    }\n    requests.push(createOrUpdateImageStream(formData, imageStream, dryRun, appResources, generatedImageStreamName ? 'create' : verb, generatedImageStreamName), createOrUpdateBuildConfig(formData, imageStream, dryRun, _.get(appResources, 'buildConfig.data'), verb, generatedImageStreamName));\n    verb === 'create' && requests.push(createWebhookSecret(formData, 'generic', dryRun));\n    const defaultAnnotations = getGitAnnotations(repository, ref);\n    if (pipeline.enabled && pipeline.template && !dryRun) {\n        requests.push(createPipelineForImportFlow(formData));\n    }\n    if (formData.resources === Resources.KnativeService) {\n        // knative service doesn't have dry run capability so returning the promises.\n        if (dryRun) {\n            return Promise.all(requests);\n        }\n        const [imageStreamResponse] = yield Promise.all(requests);\n        const imageStreamURL = imageStreamResponse.status.dockerImageRepository;\n        const originalAnnotations = ((_d = (_c = (_b = appResources === null || appResources === void 0 ? void 0 : appResources.editAppResource) === null || _b === void 0 ? void 0 : _b.data) === null || _c === void 0 ? void 0 : _c.metadata) === null || _d === void 0 ? void 0 : _d.annotations) || {};\n        const triggerAnnotations = getTriggerAnnotation(generatedImageStreamName || name, namespace, imageChange);\n        const annotations = Object.assign(Object.assign(Object.assign({}, originalAnnotations), defaultAnnotations), triggerAnnotations);\n        const knDeploymentResource = getKnativeServiceDepResource(formData, imageStreamURL, imageStreamName, undefined, undefined, annotations, _.get(appResources, 'editAppResource.data'));\n        return Promise.all([\n            verb === 'update'\n                ? k8sUpdate(KnServiceModel, knDeploymentResource)\n                : k8sCreate(KnServiceModel, knDeploymentResource),\n        ]);\n    }\n    if (formData.resources === Resources.Kubernetes) {\n        requests.push(createOrUpdateDeployment(formData, imageStream, dryRun, _.get(appResources, 'editAppResource.data'), verb));\n    }\n    else if (formData.resources === Resources.OpenShift) {\n        requests.push(createOrUpdateDeploymentConfig(formData, imageStream, dryRun, _.get(appResources, 'editAppResource.data'), verb));\n    }\n    if (!_.isEmpty(ports) || buildStrategy === 'Docker') {\n        const originalService = _.get(appResources, 'service.data');\n        const service = createService(formData, imageStream, originalService);\n        requests.push(verb === 'update'\n            ? k8sUpdate(ServiceModel, service)\n            : k8sCreate(ServiceModel, service, dryRun ? dryRunOpt : {}));\n        const originalRoute = _.get(appResources, 'route.data');\n        const route = createRoute(formData, imageStream, originalRoute);\n        if (verb === 'update' && disable) {\n            requests.push(k8sUpdate(RouteModel, route, namespace, name));\n        }\n        else if (canCreateRoute) {\n            requests.push(k8sCreate(RouteModel, route, dryRun ? dryRunOpt : {}));\n        }\n    }\n    if (webhookTrigger && verb === 'create') {\n        requests.push(createWebhookSecret(formData, gitType, dryRun));\n    }\n    return Promise.all(requests);\n});\nexport const handleRedirect = (project, perspective) => {\n    const perspectiveData = plugins.registry\n        .getPerspectives()\n        .find((item) => item.properties.id === perspective);\n    const redirectURL = perspectiveData.properties.getImportRedirectURL(project);\n    history.push(redirectURL);\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/import-submit-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/import-submit-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport {\n  ImageStreamModel,\n  BuildConfigModel,\n  DeploymentModel,\n  DeploymentConfigModel,\n  ProjectRequestModel,\n  SecretModel,\n  ServiceModel,\n  RouteModel,\n} from '@console/internal/models';\nimport { k8sCreate, K8sResourceKind, k8sUpdate, K8sVerb } from '@console/internal/module/k8s';\nimport { ServiceModel as KnServiceModel } from '@console/knative-plugin';\nimport { getKnativeServiceDepResource } from '@console/knative-plugin/src/utils/create-knative-utils';\nimport { SecretType } from '@console/internal/components/secrets/create-secret';\nimport * as plugins from '@console/internal/plugins';\nimport { history } from '@console/internal/components/utils';\nimport { getRandomChars } from '@console/shared/src/utils';\nimport {\n  getAppLabels,\n  getPodLabels,\n  getGitAnnotations,\n  getCommonAnnotations,\n  getTriggerAnnotation,\n  mergeData,\n} from '../../utils/resource-label-utils';\nimport { createService, createRoute, dryRunOpt } from '../../utils/shared-submit-utils';\nimport { getProbesData } from '../health-checks/create-health-checks-probe-utils';\nimport { AppResources } from '../edit-application/edit-application-types';\nimport {\n  GitImportFormData,\n  ProjectData,\n  GitTypes,\n  GitReadableTypes,\n  Resources,\n} from './import-types';\nimport { createPipelineForImportFlow } from './pipeline/pipeline-template-utils';\n\nexport const generateSecret = () => {\n  // http://stackoverflow.com/questions/105034/create-guid-uuid-in-javascript\n  const s4 = () =>\n    Math.floor((1 + Math.random()) * 0x10000)\n      .toString(16)\n      .substring(1);\n  return s4() + s4() + s4() + s4();\n};\n\nexport const createProject = (projectData: ProjectData): Promise<K8sResourceKind> => {\n  const project = {\n    metadata: {\n      name: projectData.name,\n    },\n    displayName: projectData.displayName,\n    description: projectData.description,\n  };\n\n  return k8sCreate(ProjectRequestModel, project);\n};\n\nexport const createOrUpdateImageStream = (\n  formData: GitImportFormData,\n  imageStreamData: K8sResourceKind,\n  dryRun: boolean,\n  appResources: AppResources,\n  verb: K8sVerb = 'create',\n  generatedImageStreamName: string = '',\n): Promise<K8sResourceKind> => {\n  const imageStreamList = appResources?.imageStream?.data;\n  const imageStreamFilterData = _.orderBy(imageStreamList, ['metadata.resourceVersion'], ['desc']);\n  const originalImageStream = (imageStreamFilterData.length && imageStreamFilterData[0]) || {};\n  const {\n    name,\n    project: { name: namespace },\n    application: { name: application },\n    labels: userLabels,\n    git: { url: repository, ref },\n    image: { tag },\n  } = formData;\n  const imageStreamName = imageStreamData && imageStreamData.metadata.name;\n  const defaultLabels = getAppLabels(name, application, imageStreamName, tag);\n  const defaultAnnotations = { ...getGitAnnotations(repository, ref), ...getCommonAnnotations() };\n  const newImageStream = {\n    apiVersion: 'image.openshift.io/v1',\n    kind: 'ImageStream',\n    metadata: {\n      name: `${generatedImageStreamName || name}`,\n      namespace,\n      labels: { ...defaultLabels, ...userLabels },\n      annotations: defaultAnnotations,\n    },\n  };\n  const imageStream = mergeData(originalImageStream, newImageStream);\n  return verb === 'update'\n    ? k8sUpdate(ImageStreamModel, imageStream)\n    : k8sCreate(ImageStreamModel, newImageStream, dryRun ? dryRunOpt : {});\n};\n\nexport const createWebhookSecret = (\n  formData: GitImportFormData,\n  secretType: string,\n  dryRun: boolean,\n): Promise<K8sResourceKind> => {\n  const {\n    name,\n    project: { name: namespace },\n  } = formData;\n\n  const webhookSecret = {\n    apiVersion: 'v1',\n    data: {},\n    kind: 'Secret',\n    metadata: {\n      name: `${name}-${secretType}-webhook-secret`,\n      namespace,\n    },\n    stringData: { WebHookSecretKey: generateSecret() },\n    type: SecretType.opaque,\n  };\n\n  return k8sCreate(SecretModel, webhookSecret, dryRun ? dryRunOpt : {});\n};\n\nexport const createOrUpdateBuildConfig = (\n  formData: GitImportFormData,\n  imageStream: K8sResourceKind,\n  dryRun: boolean,\n  originalBuildConfig?: K8sResourceKind,\n  verb: K8sVerb = 'create',\n  generatedImageStreamName: string = '',\n): Promise<K8sResourceKind> => {\n  const {\n    name,\n    project: { name: namespace },\n    application: { name: application },\n    git: { url: repository, type: gitType, ref = 'master', dir: contextDir, secret: secretName },\n    docker: { dockerfilePath },\n    image: { tag: selectedTag },\n    build: { env, triggers, strategy: buildStrategy },\n    labels: userLabels,\n  } = formData;\n\n  const imageStreamName = imageStream && imageStream.metadata.name;\n  const imageStreamNamespace = imageStream && imageStream.metadata.namespace;\n\n  const defaultLabels = getAppLabels(name, application, imageStreamName, selectedTag);\n  const defaultAnnotations = { ...getGitAnnotations(repository, ref), ...getCommonAnnotations() };\n  let buildStrategyData;\n\n  switch (buildStrategy) {\n    case 'Docker':\n      buildStrategyData = {\n        dockerStrategy: { env, dockerfilePath },\n      };\n      break;\n    default:\n      buildStrategyData = {\n        sourceStrategy: {\n          env,\n          from: {\n            kind: 'ImageStreamTag',\n            name: `${imageStreamName}:${selectedTag}`,\n            namespace: imageStreamNamespace,\n          },\n        },\n      };\n      break;\n  }\n\n  const webhookTriggerData = {\n    type: GitReadableTypes[gitType],\n    [gitType]: {\n      secretReference: { name: `${name}-${gitType}-webhook-secret` },\n    },\n  };\n\n  const newBuildConfig = {\n    apiVersion: 'build.openshift.io/v1',\n    kind: 'BuildConfig',\n    metadata: {\n      name,\n      namespace,\n      labels: { ...defaultLabels, ...userLabels },\n      annotations: defaultAnnotations,\n    },\n    spec: {\n      output: {\n        to: {\n          kind: 'ImageStreamTag',\n          name: `${generatedImageStreamName || name}:latest`,\n        },\n      },\n      source: {\n        contextDir,\n        git: {\n          uri: repository,\n          ref,\n          type: 'Git',\n        },\n        ...(secretName ? { sourceSecret: { name: secretName } } : {}),\n      },\n      strategy: {\n        type: buildStrategy,\n        ...buildStrategyData,\n      },\n      triggers: [\n        {\n          type: 'Generic',\n          generic: {\n            secretReference: { name: `${name}-generic-webhook-secret` },\n          },\n        },\n        ...(triggers.webhook && gitType !== GitTypes.unsure ? [webhookTriggerData] : []),\n        ...(triggers.image ? [{ type: 'ImageChange', imageChange: {} }] : []),\n        ...(triggers.config ? [{ type: 'ConfigChange' }] : []),\n      ],\n    },\n  };\n\n  const buildConfig = mergeData(originalBuildConfig, newBuildConfig);\n\n  return verb === 'update'\n    ? k8sUpdate(BuildConfigModel, buildConfig)\n    : k8sCreate(BuildConfigModel, buildConfig, dryRun ? dryRunOpt : {});\n};\n\nexport const createOrUpdateDeployment = (\n  formData: GitImportFormData,\n  imageStream: K8sResourceKind,\n  dryRun: boolean,\n  originalDeployment?: K8sResourceKind,\n  verb: K8sVerb = 'create',\n): Promise<K8sResourceKind> => {\n  const {\n    name,\n    project: { name: namespace },\n    application: { name: application },\n    image: { ports, tag },\n    deployment: {\n      env,\n      replicas,\n      triggers: { image: imageChange },\n    },\n    labels: userLabels,\n    limits: { cpu, memory },\n    git: { url: repository, ref },\n    healthChecks,\n  } = formData;\n\n  const imageStreamName = imageStream && imageStream.metadata.name;\n  const defaultLabels = getAppLabels(name, application, imageStreamName, tag);\n  const annotations = {\n    ...getGitAnnotations(repository, ref),\n    ...getCommonAnnotations(),\n    'alpha.image.policy.openshift.io/resolve-names': '*',\n    ...getTriggerAnnotation(name, namespace, imageChange),\n  };\n  const podLabels = getPodLabels(name);\n\n  const newDeployment = {\n    apiVersion: 'apps/v1',\n    kind: 'Deployment',\n    metadata: {\n      name,\n      namespace,\n      labels: { ...defaultLabels, ...userLabels },\n      annotations,\n    },\n    spec: {\n      selector: {\n        matchLabels: {\n          app: name,\n        },\n      },\n      replicas,\n      template: {\n        metadata: {\n          labels: { ...userLabels, ...podLabels },\n        },\n        spec: {\n          containers: [\n            {\n              name,\n              image: `${name}:latest`,\n              ports,\n              env,\n              resources: {\n                ...((cpu.limit || memory.limit) && {\n                  limits: {\n                    ...(cpu.limit && { cpu: `${cpu.limit}${cpu.limitUnit}` }),\n                    ...(memory.limit && { memory: `${memory.limit}${memory.limitUnit}` }),\n                  },\n                }),\n                ...((cpu.request || memory.request) && {\n                  requests: {\n                    ...(cpu.request && { cpu: `${cpu.request}${cpu.requestUnit}` }),\n                    ...(memory.request && { memory: `${memory.request}${memory.requestUnit}` }),\n                  },\n                }),\n              },\n              ...getProbesData(healthChecks),\n            },\n          ],\n        },\n      },\n    },\n  };\n  const deployment = mergeData(originalDeployment, newDeployment);\n\n  return verb === 'update'\n    ? k8sUpdate(DeploymentModel, deployment)\n    : k8sCreate(DeploymentModel, deployment, dryRun ? dryRunOpt : {});\n};\n\nexport const createOrUpdateDeploymentConfig = (\n  formData: GitImportFormData,\n  imageStream: K8sResourceKind,\n  dryRun: boolean,\n  originalDeploymentConfig?: K8sResourceKind,\n  verb: K8sVerb = 'create',\n): Promise<K8sResourceKind> => {\n  const {\n    name,\n    project: { name: namespace },\n    application: { name: application },\n    image: { ports, tag },\n    deployment: { env, replicas, triggers },\n    labels: userLabels,\n    limits: { cpu, memory },\n    git: { url: repository, ref },\n    healthChecks,\n  } = formData;\n\n  const imageStreamName = imageStream && imageStream.metadata.name;\n  const defaultLabels = getAppLabels(name, application, imageStreamName, tag);\n  const defaultAnnotations = { ...getGitAnnotations(repository, ref), ...getCommonAnnotations() };\n  const podLabels = getPodLabels(name);\n\n  const newDeploymentConfig = {\n    apiVersion: 'apps.openshift.io/v1',\n    kind: 'DeploymentConfig',\n    metadata: {\n      name,\n      namespace,\n      labels: { ...defaultLabels, ...userLabels },\n      annotations: defaultAnnotations,\n    },\n    spec: {\n      selector: podLabels,\n      replicas,\n      template: {\n        metadata: {\n          labels: { ...userLabels, ...podLabels },\n        },\n        spec: {\n          containers: [\n            {\n              name,\n              image: `${name}:latest`,\n              ports,\n              env,\n              resources: {\n                ...((cpu.limit || memory.limit) && {\n                  limits: {\n                    ...(cpu.limit && { cpu: `${cpu.limit}${cpu.limitUnit}` }),\n                    ...(memory.limit && { memory: `${memory.limit}${memory.limitUnit}` }),\n                  },\n                }),\n                ...((cpu.request || memory.request) && {\n                  requests: {\n                    ...(cpu.request && { cpu: `${cpu.request}${cpu.requestUnit}` }),\n                    ...(memory.request && { memory: `${memory.request}${memory.requestUnit}` }),\n                  },\n                }),\n              },\n              ...getProbesData(healthChecks),\n            },\n          ],\n        },\n      },\n      triggers: [\n        {\n          type: 'ImageChange',\n          imageChangeParams: {\n            automatic: triggers.image,\n            containerNames: [name],\n            from: {\n              kind: 'ImageStreamTag',\n              name: `${name}:latest`,\n            },\n          },\n        },\n        ...(triggers.config ? [{ type: 'ConfigChange' }] : []),\n      ],\n    },\n  };\n  const deploymentConfig = mergeData(originalDeploymentConfig, newDeploymentConfig);\n\n  return verb === 'update'\n    ? k8sUpdate(DeploymentConfigModel, deploymentConfig)\n    : k8sCreate(DeploymentConfigModel, deploymentConfig, dryRun ? dryRunOpt : {});\n};\n\nexport const createOrUpdateResources = async (\n  formData: GitImportFormData,\n  imageStream: K8sResourceKind,\n  createNewProject?: boolean,\n  dryRun: boolean = false,\n  verb: K8sVerb = 'create',\n  appResources?: AppResources,\n): Promise<K8sResourceKind[]> => {\n  const {\n    name,\n    project: { name: namespace },\n    route: { create: canCreateRoute, disable },\n    image: { ports },\n    build: {\n      strategy: buildStrategy,\n      triggers: { webhook: webhookTrigger },\n    },\n    deployment: {\n      triggers: { image: imageChange },\n    },\n    git: { url: repository, type: gitType, ref },\n    pipeline,\n    resources,\n  } = formData;\n  const imageStreamName = _.get(imageStream, 'metadata.name');\n\n  createNewProject && (await createProject(formData.project));\n\n  const requests: Promise<K8sResourceKind>[] = [];\n  let generatedImageStreamName: string = '';\n  const imageStreamList = appResources?.imageStream?.data;\n  if (\n    resources === Resources.KnativeService &&\n    imageStreamList &&\n    imageStreamList.length &&\n    verb === 'update'\n  ) {\n    generatedImageStreamName = `${name}-${getRandomChars()}`;\n  }\n  requests.push(\n    createOrUpdateImageStream(\n      formData,\n      imageStream,\n      dryRun,\n      appResources,\n      generatedImageStreamName ? 'create' : verb,\n      generatedImageStreamName,\n    ),\n    createOrUpdateBuildConfig(\n      formData,\n      imageStream,\n      dryRun,\n      _.get(appResources, 'buildConfig.data'),\n      verb,\n      generatedImageStreamName,\n    ),\n  );\n\n  verb === 'create' && requests.push(createWebhookSecret(formData, 'generic', dryRun));\n\n  const defaultAnnotations = getGitAnnotations(repository, ref);\n\n  if (pipeline.enabled && pipeline.template && !dryRun) {\n    requests.push(createPipelineForImportFlow(formData));\n  }\n\n  if (formData.resources === Resources.KnativeService) {\n    // knative service doesn't have dry run capability so returning the promises.\n    if (dryRun) {\n      return Promise.all(requests);\n    }\n    const [imageStreamResponse] = await Promise.all(requests);\n    const imageStreamURL = imageStreamResponse.status.dockerImageRepository;\n\n    const originalAnnotations = appResources?.editAppResource?.data?.metadata?.annotations || {};\n    const triggerAnnotations = getTriggerAnnotation(\n      generatedImageStreamName || name,\n      namespace,\n      imageChange,\n    );\n    const annotations = {\n      ...originalAnnotations,\n      ...defaultAnnotations,\n      ...triggerAnnotations,\n    };\n    const knDeploymentResource = getKnativeServiceDepResource(\n      formData,\n      imageStreamURL,\n      imageStreamName,\n      undefined,\n      undefined,\n      annotations,\n      _.get(appResources, 'editAppResource.data'),\n    );\n    return Promise.all([\n      verb === 'update'\n        ? k8sUpdate(KnServiceModel, knDeploymentResource)\n        : k8sCreate(KnServiceModel, knDeploymentResource),\n    ]);\n  }\n\n  if (formData.resources === Resources.Kubernetes) {\n    requests.push(\n      createOrUpdateDeployment(\n        formData,\n        imageStream,\n        dryRun,\n        _.get(appResources, 'editAppResource.data'),\n        verb,\n      ),\n    );\n  } else if (formData.resources === Resources.OpenShift) {\n    requests.push(\n      createOrUpdateDeploymentConfig(\n        formData,\n        imageStream,\n        dryRun,\n        _.get(appResources, 'editAppResource.data'),\n        verb,\n      ),\n    );\n  }\n\n  if (!_.isEmpty(ports) || buildStrategy === 'Docker') {\n    const originalService = _.get(appResources, 'service.data');\n    const service = createService(formData, imageStream, originalService);\n    requests.push(\n      verb === 'update'\n        ? k8sUpdate(ServiceModel, service)\n        : k8sCreate(ServiceModel, service, dryRun ? dryRunOpt : {}),\n    );\n    const originalRoute = _.get(appResources, 'route.data');\n    const route = createRoute(formData, imageStream, originalRoute);\n    if (verb === 'update' && disable) {\n      requests.push(k8sUpdate(RouteModel, route, namespace, name));\n    } else if (canCreateRoute) {\n      requests.push(k8sCreate(RouteModel, route, dryRun ? dryRunOpt : {}));\n    }\n  }\n\n  if (webhookTrigger && verb === 'create') {\n    requests.push(createWebhookSecret(formData, gitType, dryRun));\n  }\n\n  return Promise.all(requests);\n};\n\nexport const handleRedirect = (project: string, perspective: string) => {\n  const perspectiveData = plugins.registry\n    .getPerspectives()\n    .find((item) => item.properties.id === perspective);\n  const redirectURL = perspectiveData.properties.getImportRedirectURL(project);\n  history.push(redirectURL);\n};\n"]}]}