{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/droppable-edit-yaml.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/droppable-edit-yaml.tsx","mtime":1615298458730},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import withDragDropContext from './utils/drag-drop-context';\nimport * as React from 'react';\nimport { EditYAML } from './edit-yaml';\nimport { NativeTypes } from 'react-dnd-html5-backend';\nimport { DropTarget } from 'react-dnd';\n// Maximal file size, in bytes, that user can upload\nconst maxFileUploadSize = 4000000;\nconst fileSizeErrorMsg = 'Maximum file size exceeded. File limit is 4MB.';\nconst fileTypeErrorMsg = 'Binary file detected. Edit text based YAML files only.';\nconst boxTarget = {\n    drop(props, monitor) {\n        if (props.onDrop && monitor.isOver()) {\n            props.onDrop(props, monitor);\n        }\n    },\n};\nconst EditYAMLComponent = DropTarget(NativeTypes.FILE, boxTarget, (connectObj, monitor) => ({\n    connectDropTarget: connectObj.dropTarget(),\n    isOver: monitor.isOver(),\n    canDrop: monitor.canDrop(),\n}))(EditYAML);\nexport const DroppableEditYAML = withDragDropContext(class DroppableEditYAML extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            fileUpload: '',\n            error: '',\n        };\n        this.handleFileDrop = this.handleFileDrop.bind(this);\n    }\n    containsNonPrintableCharacters(value) {\n        if (!value) {\n            return false;\n        }\n        // eslint-disable-next-line no-control-regex\n        return /[\\x00-\\x09\\x0E-\\x1F]/.test(value);\n    }\n    handleFileDrop(item, monitor) {\n        if (!monitor) {\n            return;\n        }\n        const [file] = monitor.getItem().files;\n        // If unsupported file type is dropped into drop zone, file will be undefined\n        if (!file) {\n            return;\n        }\n        // limit size size uploading to 1 mb\n        if (file.size <= maxFileUploadSize) {\n            const reader = new FileReader();\n            reader.onload = () => {\n                const input = reader.result;\n                if (this.containsNonPrintableCharacters(input)) {\n                    this.setState({\n                        error: fileTypeErrorMsg,\n                    });\n                }\n                else {\n                    this.setState({\n                        fileUpload: input,\n                        error: '',\n                    });\n                }\n            };\n            reader.readAsText(file, 'UTF-8');\n        }\n        else {\n            this.setState({\n                error: fileSizeErrorMsg,\n            });\n        }\n    }\n    render() {\n        const { obj } = this.props;\n        const { fileUpload, error } = this.state;\n        return (React.createElement(EditYAMLComponent, Object.assign({}, this.props, { obj: obj, fileUpload: fileUpload, error: error, onDrop: this.handleFileDrop })));\n    }\n});\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/droppable-edit-yaml.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/droppable-edit-yaml.tsx"],"names":[],"mappings":"AAAA,OAAO,mBAAmB,MAAM,2BAA2B,CAAC;AAC5D,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAE,QAAQ,EAAE,MAAM,aAAa,CAAC;AACvC,OAAO,EAAE,WAAW,EAAE,MAAM,yBAAyB,CAAC;AACtD,OAAO,EAAE,UAAU,EAAE,MAAM,WAAW,CAAC;AAGvC,oDAAoD;AACpD,MAAM,iBAAiB,GAAG,OAAO,CAAC;AAClC,MAAM,gBAAgB,GAAG,gDAAgD,CAAC;AAC1E,MAAM,gBAAgB,GAAG,wDAAwD,CAAC;AAElF,MAAM,SAAS,GAAG;IAChB,IAAI,CAAC,KAAK,EAAE,OAAO;QACjB,IAAI,KAAK,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,EAAE,EAAE;YACpC,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;SAC9B;IACH,CAAC;CACF,CAAC;AAEF,MAAM,iBAAiB,GAAG,UAAU,CAAC,WAAW,CAAC,IAAI,EAAE,SAAS,EAAE,CAAC,UAAU,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC;IAC1F,iBAAiB,EAAE,UAAU,CAAC,UAAU,EAAE;IAC1C,MAAM,EAAE,OAAO,CAAC,MAAM,EAAE;IACxB,OAAO,EAAE,OAAO,CAAC,OAAO,EAAE;CAC3B,CAAC,CAAC,CAAC,QAAmC,CAAC,CAAC;AAEzC,MAAM,CAAC,MAAM,iBAAiB,GAAG,mBAAmB,CAClD,MAAM,iBAAkB,SAAQ,KAAK,CAAC,SAAyD;IAC7F,YAAY,KAAK;QACf,KAAK,CAAC,KAAK,CAAC,CAAC;QACb,IAAI,CAAC,KAAK,GAAG;YACX,UAAU,EAAE,EAAE;YACd,KAAK,EAAE,EAAE;SACV,CAAC;QACF,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACvD,CAAC;IAED,8BAA8B,CAAC,KAAa;QAC1C,IAAI,CAAC,KAAK,EAAE;YACV,OAAO,KAAK,CAAC;SACd;QACD,4CAA4C;QAC5C,OAAO,sBAAsB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IAC5C,CAAC;IAED,cAAc,CAAC,IAAI,EAAE,OAAO;QAC1B,IAAI,CAAC,OAAO,EAAE;YACZ,OAAO;SACR;QACD,MAAM,CAAC,IAAI,CAAC,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC,KAAK,CAAC;QAEvC,6EAA6E;QAC7E,IAAI,CAAC,IAAI,EAAE;YACT,OAAO;SACR;QAED,oCAAoC;QACpC,IAAI,IAAI,CAAC,IAAI,IAAI,iBAAiB,EAAE;YAClC,MAAM,MAAM,GAAG,IAAI,UAAU,EAAE,CAAC;YAChC,MAAM,CAAC,MAAM,GAAG,GAAG,EAAE;gBACnB,MAAM,KAAK,GAAG,MAAM,CAAC,MAAgB,CAAC;gBACtC,IAAI,IAAI,CAAC,8BAA8B,CAAC,KAAK,CAAC,EAAE;oBAC9C,IAAI,CAAC,QAAQ,CAAC;wBACZ,KAAK,EAAE,gBAAgB;qBACxB,CAAC,CAAC;iBACJ;qBAAM;oBACL,IAAI,CAAC,QAAQ,CAAC;wBACZ,UAAU,EAAE,KAAK;wBACjB,KAAK,EAAE,EAAE;qBACV,CAAC,CAAC;iBACJ;YACH,CAAC,CAAC;YACF,MAAM,CAAC,UAAU,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;SAClC;aAAM;YACL,IAAI,CAAC,QAAQ,CAAC;gBACZ,KAAK,EAAE,gBAAgB;aACxB,CAAC,CAAC;SACJ;IACH,CAAC;IAED,MAAM;QACJ,MAAM,EAAE,GAAG,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAC3B,MAAM,EAAE,UAAU,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACzC,OAAO,CACL,oBAAC,iBAAiB,oBACZ,IAAI,CAAC,KAAK,IACd,GAAG,EAAE,GAAG,EACR,UAAU,EAAE,UAAU,EACtB,KAAK,EAAE,KAAK,EACZ,MAAM,EAAE,IAAI,CAAC,cAAc,IAC3B,CACH,CAAC;IACJ,CAAC;CACF,CACF,CAAC","sourcesContent":["import withDragDropContext from './utils/drag-drop-context';\nimport * as React from 'react';\n\nimport { EditYAML } from './edit-yaml';\nimport { NativeTypes } from 'react-dnd-html5-backend';\nimport { DropTarget } from 'react-dnd';\nimport { DropTargetMonitor } from 'react-dnd/lib/interfaces';\n\n// Maximal file size, in bytes, that user can upload\nconst maxFileUploadSize = 4000000;\nconst fileSizeErrorMsg = 'Maximum file size exceeded. File limit is 4MB.';\nconst fileTypeErrorMsg = 'Binary file detected. Edit text based YAML files only.';\n\nconst boxTarget = {\n  drop(props, monitor) {\n    if (props.onDrop && monitor.isOver()) {\n      props.onDrop(props, monitor);\n    }\n  },\n};\n\nconst EditYAMLComponent = DropTarget(NativeTypes.FILE, boxTarget, (connectObj, monitor) => ({\n  connectDropTarget: connectObj.dropTarget(),\n  isOver: monitor.isOver(),\n  canDrop: monitor.canDrop(),\n}))(EditYAML as React.FC<EditYAMLProps>);\n\nexport const DroppableEditYAML = withDragDropContext<DroppableEditYAMLProps>(\n  class DroppableEditYAML extends React.Component<DroppableEditYAMLProps, DroppableEditYAMLState> {\n    constructor(props) {\n      super(props);\n      this.state = {\n        fileUpload: '',\n        error: '',\n      };\n      this.handleFileDrop = this.handleFileDrop.bind(this);\n    }\n\n    containsNonPrintableCharacters(value: string) {\n      if (!value) {\n        return false;\n      }\n      // eslint-disable-next-line no-control-regex\n      return /[\\x00-\\x09\\x0E-\\x1F]/.test(value);\n    }\n\n    handleFileDrop(item, monitor) {\n      if (!monitor) {\n        return;\n      }\n      const [file] = monitor.getItem().files;\n\n      // If unsupported file type is dropped into drop zone, file will be undefined\n      if (!file) {\n        return;\n      }\n\n      // limit size size uploading to 1 mb\n      if (file.size <= maxFileUploadSize) {\n        const reader = new FileReader();\n        reader.onload = () => {\n          const input = reader.result as string;\n          if (this.containsNonPrintableCharacters(input)) {\n            this.setState({\n              error: fileTypeErrorMsg,\n            });\n          } else {\n            this.setState({\n              fileUpload: input,\n              error: '',\n            });\n          }\n        };\n        reader.readAsText(file, 'UTF-8');\n      } else {\n        this.setState({\n          error: fileSizeErrorMsg,\n        });\n      }\n    }\n\n    render() {\n      const { obj } = this.props;\n      const { fileUpload, error } = this.state;\n      return (\n        <EditYAMLComponent\n          {...this.props}\n          obj={obj}\n          fileUpload={fileUpload}\n          error={error}\n          onDrop={this.handleFileDrop}\n        />\n      );\n    }\n  },\n);\n\ntype EditYAMLProps = {\n  obj: string;\n  fileUpload: string;\n  error: string;\n  onDrop: (item: any, monitor: DropTargetMonitor) => void;\n};\n\nexport type DroppableEditYAMLProps = {\n  obj: string;\n};\n\nexport type DroppableEditYAMLState = {\n  fileUpload: string;\n  error: string;\n};\n"]}]}