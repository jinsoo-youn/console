{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/network-attachment-definition-plugin/src/components/network-attachment-definitions/NetworkAttachmentDefinitionsForm.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/network-attachment-definition-plugin/src/components/network-attachment-definitions/NetworkAttachmentDefinitionsForm.tsx","mtime":1615298458680},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport * as _ from 'lodash';\nimport { Form, FormControl, FormGroup, HelpBlock } from 'patternfly-react';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { referenceForModel, k8sCreate } from '@console/internal/module/k8s';\nimport { ButtonBar, Dropdown, Firehose, history, resourcePathFromModel, } from '@console/internal/components/utils';\nimport { validateDNS1123SubdomainValue, ValidationErrorType } from '@console/shared';\nimport { HyperConvergedModel, NetworkAttachmentDefinitionModel, SriovNetworkNodePolicyModel, } from '../..';\nimport { networkTypeParams, networkTypes } from '../../constants';\nimport NetworkTypeOptions from './NetworkTypeOptions';\nconst buildConfig = (name, networkType, typeParamsData) => {\n    const config = {\n        name,\n        type: networkType,\n        cniVersion: '0.3.1',\n    };\n    let ipam = {};\n    try {\n        ipam = JSON.parse(_.get(typeParamsData, 'ipam.value', {}));\n    }\n    catch (e) {\n        console.error(e); // eslint-disable-line no-console\n    }\n    if (networkType === 'cnv-bridge') {\n        // cnv-bridge should not define type on root\n        delete config.type;\n        const vlan = _.get(typeParamsData, 'vlanTagNum.value', '');\n        config.plugins = [\n            {\n                type: 'cnv-bridge',\n                bridge: _.get(typeParamsData, 'bridge.value', ''),\n                vlan: _.isEmpty(vlan) ? undefined : vlan,\n                ipam,\n            },\n            { type: 'cnv-tuning' },\n        ];\n    }\n    else if (networkType === 'sriov') {\n        config.ipam = ipam;\n    }\n    return config;\n};\nconst getResourceName = (networkType, typeParamsData) => {\n    return networkType === 'cnv-bridge'\n        ? `bridge.network.kubevirt.io/${_.get(typeParamsData, 'bridge.value', '')}`\n        : `openshift.io/${_.get(typeParamsData, 'resourceName.value', '')}`;\n};\nconst createNetAttachDef = (e, description, name, networkType, typeParamsData, namespace, setError, setLoading) => {\n    e.preventDefault();\n    setLoading(true);\n    setError(null);\n    const config = JSON.stringify(buildConfig(name, networkType, typeParamsData));\n    const annotations = {\n        'k8s.v1.cni.cncf.io/resourceName': getResourceName(networkType, typeParamsData),\n    };\n    if (description !== '') {\n        annotations.description = description;\n    }\n    const newNetAttachDef = {\n        apiVersion: `${NetworkAttachmentDefinitionModel.apiGroup}/${NetworkAttachmentDefinitionModel.apiVersion}`,\n        kind: NetworkAttachmentDefinitionModel.kind,\n        metadata: {\n            name,\n            namespace,\n            annotations: {\n                'k8s.v1.cni.cncf.io/resourceName': getResourceName(networkType, typeParamsData),\n                description: _.isEmpty(description) ? undefined : description,\n            },\n        },\n        spec: {\n            config,\n        },\n    };\n    k8sCreate(NetworkAttachmentDefinitionModel, newNetAttachDef)\n        .then(() => {\n        setLoading(false);\n        history.push(resourcePathFromModel(NetworkAttachmentDefinitionModel, name, namespace));\n    })\n        .catch((err) => {\n        setError(err);\n        setLoading(false);\n        console.error(err); // eslint-disable-line no-console\n    });\n};\nconst handleNameChange = (enteredName, fieldErrors, setName, setFieldErrors) => {\n    const fieldErrorsUpdate = Object.assign({}, fieldErrors);\n    delete fieldErrorsUpdate.nameValidationMsg;\n    const nameValidation = validateDNS1123SubdomainValue(enteredName);\n    if (_.get(nameValidation, 'type', null) === ValidationErrorType.Error) {\n        fieldErrorsUpdate.nameValidationMsg = nameValidation.message;\n    }\n    setName(enteredName);\n    setFieldErrors(fieldErrorsUpdate);\n};\nconst getNetworkTypes = (hasSriovNetNodePolicyCRD, hasHyperConvergedCRD) => {\n    const types = _.clone(networkTypes);\n    if (!hasSriovNetNodePolicyCRD) {\n        delete types.sriov;\n    }\n    if (!hasHyperConvergedCRD) {\n        delete types['cnv-bridge'];\n    }\n    return types;\n};\nconst allTypeParamFieldsValid = (typeParamsData) => {\n    return !_.some(typeParamsData, ({ validationMsg }) => validationMsg !== null);\n};\nconst allRequiredFieldsFilled = (name, networkType, typeParamsData) => {\n    if (_.isEmpty(name) || networkType === null) {\n        return false;\n    }\n    const allParamsForType = _.get(networkTypeParams, [networkType]);\n    const requiredKeys = _.keys(allParamsForType).filter((key) => _.get(allParamsForType, [key, 'required'], false));\n    return _.every(requiredKeys, (key) => {\n        const value = _.get(typeParamsData, [key, 'value']);\n        return !_.isEmpty(value);\n    });\n};\nconst validateForm = (fieldErrors, name, networkType, typeParamsData, setError) => {\n    setError(null);\n    const nameIsValid = _.get(fieldErrors, 'nameValidationMsg', '') === '';\n    return (nameIsValid &&\n        allRequiredFieldsFilled(name, networkType, typeParamsData) &&\n        allTypeParamFieldsValid(typeParamsData));\n};\nconst NetworkAttachmentDefinitionFormBase = (props) => {\n    const { loaded, match, resources, hasSriovNetNodePolicyCRD, hasHyperConvergedCRD } = props;\n    const namespace = _.get(match, 'params.ns', 'default');\n    const sriovNetNodePoliciesData = _.get(resources, 'sriovnetworknodepolicies.data', []);\n    const [loading, setLoading] = React.useState(hasSriovNetNodePolicyCRD && !loaded);\n    const [name, setName] = React.useState('');\n    const [description, setDescription] = React.useState('');\n    const [networkType, setNetworkType] = React.useState(null);\n    const [typeParamsData, setTypeParamsData] = React.useState({});\n    const [error, setError] = React.useState(null);\n    const [fieldErrors, setFieldErrors] = React.useState({});\n    const networkTypeDropdownItems = getNetworkTypes(hasSriovNetNodePolicyCRD, hasHyperConvergedCRD);\n    const formIsValid = React.useMemo(() => validateForm(fieldErrors, name, networkType, typeParamsData, setError), [fieldErrors, name, networkType, typeParamsData]);\n    React.useEffect(() => setLoading(hasSriovNetNodePolicyCRD && !loaded), [\n        hasSriovNetNodePolicyCRD,\n        resources,\n        loaded,\n    ]);\n    return (React.createElement(\"div\", { className: \"co-m-pane__body co-m-pane__form\" },\n        React.createElement(\"h1\", { className: \"co-m-pane__heading co-m-pane__heading--baseline\" },\n            React.createElement(\"div\", { className: \"co-m-pane__name\" }, \"Create Network Attachment Definition\"),\n            React.createElement(\"div\", { className: \"co-m-pane__heading-link\" },\n                React.createElement(Link, { to: `/k8s/ns/${namespace}/${referenceForModel(NetworkAttachmentDefinitionModel)}/~new`, id: \"yaml-link\", replace: true }, \"Edit YAML\"))),\n        React.createElement(Form, null,\n            React.createElement(FormGroup, { fieldId: \"basic-settings-name\", validationState: fieldErrors.nameValidationMsg ? 'error' : null },\n                React.createElement(\"label\", { className: \"control-label co-required\", htmlFor: \"network-attachment-definition-name\" }, \"Name\"),\n                React.createElement(FormControl, { type: \"text\", bsClass: \"pf-c-form-control\", placeholder: name, id: \"network-attachment-definition-name\", onChange: (e) => handleNameChange(e.target.value, fieldErrors, setName, setFieldErrors), value: name }),\n                React.createElement(HelpBlock, null, fieldErrors.nameValidationMsg || null)),\n            React.createElement(FormGroup, { fieldId: \"basic-settings-description\" },\n                React.createElement(\"label\", { htmlFor: \"network-attachment-definition-description\" }, \"Description\"),\n                React.createElement(FormControl, { type: \"text\", bsClass: \"pf-c-form-control\", id: \"network-attachment-definition-description\", onChange: (e) => setDescription(e.target.value), value: description })),\n            React.createElement(FormGroup, { fieldId: \"basic-settings-network-type\" },\n                React.createElement(\"label\", { className: \"control-label co-required\", htmlFor: \"network-type\" }, \"Network Type\"),\n                React.createElement(Dropdown, { id: \"network-type\", title: \"Network Type\", items: networkTypeDropdownItems, dropDownClassName: \"dropdown--full-width\", selectedKey: networkType, onChange: (e) => setNetworkType(e), disabled: _.isEmpty(networkTypeDropdownItems) })),\n            React.createElement(\"div\", { className: \"co-form-subsection\" },\n                React.createElement(NetworkTypeOptions, { networkType: networkType, setTypeParamsData: setTypeParamsData, sriovNetNodePoliciesData: sriovNetNodePoliciesData, typeParamsData: typeParamsData })),\n            React.createElement(ButtonBar, { errorMessage: error ? error.message : '', inProgress: loading },\n                React.createElement(ActionGroup, { className: \"pf-c-form\" },\n                    React.createElement(Button, { id: \"save-changes\", isDisabled: !formIsValid, onClick: (e) => createNetAttachDef(e, description, name, networkType, typeParamsData, namespace, setError, setLoading), type: \"submit\", variant: \"primary\" }, \"Create\"),\n                    React.createElement(Button, { id: \"cancel\", onClick: history.goBack, type: \"button\", variant: \"secondary\" }, \"Cancel\"))))));\n};\nconst mapStateToProps = ({ k8s }) => {\n    const kindsInFlight = k8s.getIn(['RESOURCES', 'inFlight']);\n    const k8sModels = k8s.getIn(['RESOURCES', 'models']);\n    return {\n        // FIXME: These should be feature flags.\n        // TODO: Change back when ready to add back SR-IOV support\n        // hasSriovNetNodePolicyCRD:\n        //   !kindsInFlight && !!k8sModels.get(referenceForModel(SriovNetworkNodePolicyModel)),\n        hasSriovNetNodePolicyCRD: false,\n        hasHyperConvergedCRD: !kindsInFlight && !!k8sModels.get(referenceForModel(HyperConvergedModel)),\n    };\n};\nconst networkAttachmentDefinitionFormResources = [\n    {\n        model: SriovNetworkNodePolicyModel,\n        kind: referenceForModel(SriovNetworkNodePolicyModel),\n        isList: true,\n        prop: 'sriovnetworknodepolicies',\n        optional: true,\n    },\n];\nexport default connect(mapStateToProps)((props) => {\n    const { hasSriovNetNodePolicyCRD } = props;\n    const resources = hasSriovNetNodePolicyCRD ? networkAttachmentDefinitionFormResources : [];\n    return (React.createElement(Firehose, { resources: resources },\n        React.createElement(NetworkAttachmentDefinitionFormBase, Object.assign({}, props))));\n});\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/network-attachment-definition-plugin/src/components/network-attachment-definitions/NetworkAttachmentDefinitionsForm.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/network-attachment-definition-plugin/src/components/network-attachment-definitions/NetworkAttachmentDefinitionsForm.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport * as _ from 'lodash';\nimport { Form, FormControl, FormGroup, HelpBlock } from 'patternfly-react';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { referenceForModel, k8sCreate } from '@console/internal/module/k8s';\nimport {\n  ButtonBar,\n  Dropdown,\n  Firehose,\n  history,\n  resourcePathFromModel,\n} from '@console/internal/components/utils';\nimport { validateDNS1123SubdomainValue, ValidationErrorType } from '@console/shared';\nimport {\n  HyperConvergedModel,\n  NetworkAttachmentDefinitionModel,\n  SriovNetworkNodePolicyModel,\n} from '../..';\nimport {\n  NetworkAttachmentDefinitionAnnotations,\n  NetworkAttachmentDefinitionConfig,\n  TypeParamsData,\n} from '../../types';\nimport { networkTypeParams, networkTypes } from '../../constants';\nimport NetworkTypeOptions from './NetworkTypeOptions';\n\nconst buildConfig = (name, networkType, typeParamsData): NetworkAttachmentDefinitionConfig => {\n  const config: NetworkAttachmentDefinitionConfig = {\n    name,\n    type: networkType,\n    cniVersion: '0.3.1',\n  };\n\n  let ipam = {};\n  try {\n    ipam = JSON.parse(_.get(typeParamsData, 'ipam.value', {}));\n  } catch (e) {\n    console.error(e); // eslint-disable-line no-console\n  }\n\n  if (networkType === 'cnv-bridge') {\n    // cnv-bridge should not define type on root\n    delete config.type;\n\n    const vlan = _.get(typeParamsData, 'vlanTagNum.value', '');\n    config.plugins = [\n      {\n        type: 'cnv-bridge',\n        bridge: _.get(typeParamsData, 'bridge.value', ''),\n        vlan: _.isEmpty(vlan) ? undefined : vlan,\n        ipam,\n      },\n      { type: 'cnv-tuning' },\n    ];\n  } else if (networkType === 'sriov') {\n    config.ipam = ipam;\n  }\n\n  return config;\n};\n\nconst getResourceName = (networkType, typeParamsData): string => {\n  return networkType === 'cnv-bridge'\n    ? `bridge.network.kubevirt.io/${_.get(typeParamsData, 'bridge.value', '')}`\n    : `openshift.io/${_.get(typeParamsData, 'resourceName.value', '')}`;\n};\n\nconst createNetAttachDef = (\n  e: React.FormEvent<EventTarget>,\n  description,\n  name,\n  networkType,\n  typeParamsData,\n  namespace,\n  setError,\n  setLoading,\n) => {\n  e.preventDefault();\n\n  setLoading(true);\n  setError(null);\n\n  const config = JSON.stringify(buildConfig(name, networkType, typeParamsData));\n\n  const annotations: NetworkAttachmentDefinitionAnnotations = {\n    'k8s.v1.cni.cncf.io/resourceName': getResourceName(networkType, typeParamsData),\n  };\n  if (description !== '') {\n    annotations.description = description;\n  }\n\n  const newNetAttachDef = {\n    apiVersion: `${NetworkAttachmentDefinitionModel.apiGroup}/${NetworkAttachmentDefinitionModel.apiVersion}`,\n    kind: NetworkAttachmentDefinitionModel.kind,\n    metadata: {\n      name,\n      namespace,\n      annotations: {\n        'k8s.v1.cni.cncf.io/resourceName': getResourceName(networkType, typeParamsData),\n        description: _.isEmpty(description) ? undefined : description,\n      },\n    },\n    spec: {\n      config,\n    },\n  };\n\n  k8sCreate(NetworkAttachmentDefinitionModel, newNetAttachDef)\n    .then(() => {\n      setLoading(false);\n      history.push(resourcePathFromModel(NetworkAttachmentDefinitionModel, name, namespace));\n    })\n    .catch((err) => {\n      setError(err);\n      setLoading(false);\n      console.error(err); // eslint-disable-line no-console\n    });\n};\n\nconst handleNameChange = (enteredName, fieldErrors, setName, setFieldErrors) => {\n  const fieldErrorsUpdate = { ...fieldErrors };\n  delete fieldErrorsUpdate.nameValidationMsg;\n\n  const nameValidation = validateDNS1123SubdomainValue(enteredName);\n  if (_.get(nameValidation, 'type', null) === ValidationErrorType.Error) {\n    fieldErrorsUpdate.nameValidationMsg = nameValidation.message;\n  }\n\n  setName(enteredName);\n  setFieldErrors(fieldErrorsUpdate);\n};\n\nconst getNetworkTypes = (hasSriovNetNodePolicyCRD, hasHyperConvergedCRD) => {\n  const types = _.clone(networkTypes);\n  if (!hasSriovNetNodePolicyCRD) {\n    delete types.sriov;\n  }\n\n  if (!hasHyperConvergedCRD) {\n    delete types['cnv-bridge'];\n  }\n\n  return types;\n};\n\nconst allTypeParamFieldsValid = (typeParamsData) => {\n  return !_.some(typeParamsData, ({ validationMsg }) => validationMsg !== null);\n};\n\nconst allRequiredFieldsFilled = (name, networkType, typeParamsData): boolean => {\n  if (_.isEmpty(name) || networkType === null) {\n    return false;\n  }\n\n  const allParamsForType = _.get(networkTypeParams, [networkType]);\n  const requiredKeys = _.keys(allParamsForType).filter((key) =>\n    _.get(allParamsForType, [key, 'required'], false),\n  );\n\n  return _.every(requiredKeys, (key) => {\n    const value = _.get(typeParamsData, [key, 'value']);\n    return !_.isEmpty(value);\n  });\n};\n\nconst validateForm = (fieldErrors, name, networkType, typeParamsData, setError) => {\n  setError(null);\n  const nameIsValid = _.get(fieldErrors, 'nameValidationMsg', '') === '';\n\n  return (\n    nameIsValid &&\n    allRequiredFieldsFilled(name, networkType, typeParamsData) &&\n    allTypeParamFieldsValid(typeParamsData)\n  );\n};\n\nconst NetworkAttachmentDefinitionFormBase = (props) => {\n  const { loaded, match, resources, hasSriovNetNodePolicyCRD, hasHyperConvergedCRD } = props;\n  const namespace = _.get(match, 'params.ns', 'default');\n  const sriovNetNodePoliciesData = _.get(resources, 'sriovnetworknodepolicies.data', []);\n\n  const [loading, setLoading] = React.useState(hasSriovNetNodePolicyCRD && !loaded);\n  const [name, setName] = React.useState('');\n  const [description, setDescription] = React.useState('');\n  const [networkType, setNetworkType] = React.useState(null);\n  const [typeParamsData, setTypeParamsData] = React.useState<TypeParamsData>({});\n  const [error, setError] = React.useState(null);\n  const [fieldErrors, setFieldErrors] = React.useState<FieldErrors>({});\n\n  const networkTypeDropdownItems = getNetworkTypes(hasSriovNetNodePolicyCRD, hasHyperConvergedCRD);\n\n  const formIsValid = React.useMemo(\n    () => validateForm(fieldErrors, name, networkType, typeParamsData, setError),\n    [fieldErrors, name, networkType, typeParamsData],\n  );\n\n  React.useEffect(() => setLoading(hasSriovNetNodePolicyCRD && !loaded), [\n    hasSriovNetNodePolicyCRD,\n    resources,\n    loaded,\n  ]);\n\n  return (\n    <div className=\"co-m-pane__body co-m-pane__form\">\n      <h1 className=\"co-m-pane__heading co-m-pane__heading--baseline\">\n        <div className=\"co-m-pane__name\">Create Network Attachment Definition</div>\n        <div className=\"co-m-pane__heading-link\">\n          <Link\n            to={`/k8s/ns/${namespace}/${referenceForModel(NetworkAttachmentDefinitionModel)}/~new`}\n            id=\"yaml-link\"\n            replace\n          >\n            Edit YAML\n          </Link>\n        </div>\n      </h1>\n      <Form>\n        <FormGroup\n          fieldId=\"basic-settings-name\"\n          validationState={fieldErrors.nameValidationMsg ? 'error' : null}\n        >\n          <label className=\"control-label co-required\" htmlFor=\"network-attachment-definition-name\">\n            Name\n          </label>\n          <FormControl\n            type=\"text\"\n            bsClass=\"pf-c-form-control\"\n            placeholder={name}\n            id=\"network-attachment-definition-name\"\n            onChange={(e) => handleNameChange(e.target.value, fieldErrors, setName, setFieldErrors)}\n            value={name}\n          />\n          <HelpBlock>{fieldErrors.nameValidationMsg || null}</HelpBlock>\n        </FormGroup>\n\n        <FormGroup fieldId=\"basic-settings-description\">\n          <label htmlFor=\"network-attachment-definition-description\">Description</label>\n          <FormControl\n            type=\"text\"\n            bsClass=\"pf-c-form-control\"\n            id=\"network-attachment-definition-description\"\n            onChange={(e) => setDescription(e.target.value)}\n            value={description}\n          />\n        </FormGroup>\n\n        <FormGroup fieldId=\"basic-settings-network-type\">\n          <label className=\"control-label co-required\" htmlFor=\"network-type\">\n            Network Type\n          </label>\n          <Dropdown\n            id=\"network-type\"\n            title=\"Network Type\"\n            items={networkTypeDropdownItems}\n            dropDownClassName=\"dropdown--full-width\"\n            selectedKey={networkType}\n            onChange={(e) => setNetworkType(e)}\n            disabled={_.isEmpty(networkTypeDropdownItems)}\n          />\n        </FormGroup>\n\n        <div className=\"co-form-subsection\">\n          <NetworkTypeOptions\n            networkType={networkType}\n            setTypeParamsData={setTypeParamsData}\n            sriovNetNodePoliciesData={sriovNetNodePoliciesData}\n            typeParamsData={typeParamsData}\n          />\n        </div>\n\n        <ButtonBar errorMessage={error ? error.message : ''} inProgress={loading}>\n          <ActionGroup className=\"pf-c-form\">\n            <Button\n              id=\"save-changes\"\n              isDisabled={!formIsValid}\n              onClick={(e) =>\n                createNetAttachDef(\n                  e,\n                  description,\n                  name,\n                  networkType,\n                  typeParamsData,\n                  namespace,\n                  setError,\n                  setLoading,\n                )\n              }\n              type=\"submit\"\n              variant=\"primary\"\n            >\n              Create\n            </Button>\n            <Button id=\"cancel\" onClick={history.goBack} type=\"button\" variant=\"secondary\">\n              Cancel\n            </Button>\n          </ActionGroup>\n        </ButtonBar>\n      </Form>\n    </div>\n  );\n};\n\nconst mapStateToProps = ({ k8s }) => {\n  const kindsInFlight = k8s.getIn(['RESOURCES', 'inFlight']);\n  const k8sModels = k8s.getIn(['RESOURCES', 'models']);\n\n  return {\n    // FIXME: These should be feature flags.\n    // TODO: Change back when ready to add back SR-IOV support\n    // hasSriovNetNodePolicyCRD:\n    //   !kindsInFlight && !!k8sModels.get(referenceForModel(SriovNetworkNodePolicyModel)),\n    hasSriovNetNodePolicyCRD: false,\n    hasHyperConvergedCRD: !kindsInFlight && !!k8sModels.get(referenceForModel(HyperConvergedModel)),\n  };\n};\n\nconst networkAttachmentDefinitionFormResources = [\n  {\n    model: SriovNetworkNodePolicyModel,\n    kind: referenceForModel(SriovNetworkNodePolicyModel),\n    isList: true,\n    prop: 'sriovnetworknodepolicies',\n    optional: true,\n  },\n];\n\nexport default connect(mapStateToProps)((props) => {\n  const { hasSriovNetNodePolicyCRD } = props;\n  const resources = hasSriovNetNodePolicyCRD ? networkAttachmentDefinitionFormResources : [];\n  return (\n    <Firehose resources={resources}>\n      <NetworkAttachmentDefinitionFormBase {...props} />\n    </Firehose>\n  );\n});\n\ntype FieldErrors = {\n  nameValidationMsg?: string;\n};\n"]}]}