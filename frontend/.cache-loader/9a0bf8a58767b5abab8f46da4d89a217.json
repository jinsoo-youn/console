{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/SecretKeySelector.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/SecretKeySelector.tsx","mtime":1616735742400},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { useFormikContext, useField } from 'formik';\nimport { connect } from 'react-redux';\nimport { k8sGet } from '@console/internal/module/k8s';\nimport { SecretModel } from '@console/internal/models';\nimport { errorModal } from '@console/internal/components/modals/error-modal';\nimport { FormGroup } from '@patternfly/react-core';\nimport { ValueFromPair } from '@console/internal/components/utils/value-from-pair';\nimport { getFieldId, useFormikValidationFix } from '@console/shared';\nimport { getActiveNamespace } from '@console/internal/reducers/ui';\nconst SecretKeySelector = ({ name, label, namespace, }) => {\n    const { setFieldValue, setFieldTouched } = useFormikContext();\n    const [field, { touched, error }] = useField(name);\n    const [secrets, setSecrets] = React.useState({});\n    const fieldId = getFieldId(name, 'secret-key-input');\n    const isValid = !(touched && error);\n    const getErrorMessage = (err) => {\n        let errMsg = '';\n        if (typeof err === 'string') {\n            errMsg = err;\n        }\n        else {\n            errMsg = (err === null || err === void 0 ? void 0 : err.name) || (err === null || err === void 0 ? void 0 : err.key);\n        }\n        return errMsg;\n    };\n    const errorMessage = !isValid ? getErrorMessage(error) : '';\n    useFormikValidationFix(field.value);\n    React.useEffect(() => {\n        k8sGet(SecretModel, null, namespace)\n            .then((nsSecrets) => {\n            setSecrets(nsSecrets);\n        })\n            .catch((err) => {\n            var _a;\n            if (((_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status) !== 403) {\n                errorModal({ error: err === null || err === void 0 ? void 0 : err.message });\n            }\n        });\n    }, [namespace]);\n    return (React.createElement(FormGroup, { fieldId: fieldId, label: label, helperTextInvalid: errorMessage, isValid: isValid, isRequired: true },\n        React.createElement(ValueFromPair, { pair: { secretKeyRef: field.value }, secrets: secrets, configMaps: {}, onChange: (val) => {\n                setFieldValue(name, val.target.value.secretKeyRef);\n                setFieldTouched(name, true);\n            } })));\n};\nconst mapStateToProps = (state) => ({\n    namespace: getActiveNamespace(state),\n});\nexport default connect(mapStateToProps)(SecretKeySelector);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/SecretKeySelector.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/SecretKeySelector.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useFormikContext, FormikValues, useField } from 'formik';\nimport { connect } from 'react-redux';\nimport { k8sGet } from '@console/internal/module/k8s';\nimport { SecretModel } from '@console/internal/models';\nimport { errorModal } from '@console/internal/components/modals/error-modal';\nimport { FormGroup } from '@patternfly/react-core';\nimport { ValueFromPair } from '@console/internal/components/utils/value-from-pair';\nimport { getFieldId, useFormikValidationFix } from '@console/shared';\nimport { getActiveNamespace } from '@console/internal/reducers/ui';\nimport { RootState } from '@console/internal/redux';\n\ninterface SecretKeySelectorProps {\n  name: string;\n  label: string;\n}\n\ninterface StateProps {\n  namespace: string;\n}\n\nconst SecretKeySelector: React.FC<SecretKeySelectorProps & StateProps> = ({\n  name,\n  label,\n  namespace,\n}) => {\n  const { setFieldValue, setFieldTouched } = useFormikContext<FormikValues>();\n  const [field, { touched, error }] = useField(name);\n  const [secrets, setSecrets] = React.useState({});\n  const fieldId = getFieldId(name, 'secret-key-input');\n  const isValid = !(touched && error);\n\n  const getErrorMessage = (err: string | { name?: string; key?: string }): string => {\n    let errMsg = '';\n    if (typeof err === 'string') {\n      errMsg = err;\n    } else {\n      errMsg = err?.name || err?.key;\n    }\n    return errMsg;\n  };\n  const errorMessage = !isValid ? getErrorMessage(error) : '';\n\n  useFormikValidationFix(field.value);\n\n  React.useEffect(() => {\n    k8sGet(SecretModel, null, namespace)\n      .then((nsSecrets) => {\n        setSecrets(nsSecrets);\n      })\n      .catch((err) => {\n        if (err?.response?.status !== 403) {\n          errorModal({ error: err?.message });\n        }\n      });\n  }, [namespace]);\n\n  return (\n    <FormGroup\n      fieldId={fieldId}\n      label={label}\n      helperTextInvalid={errorMessage}\n      isValid={isValid}\n      isRequired\n    >\n      <ValueFromPair\n        pair={{ secretKeyRef: field.value }}\n        secrets={secrets}\n        configMaps={{}}\n        onChange={(val) => {\n          setFieldValue(name, val.target.value.secretKeyRef);\n          setFieldTouched(name, true);\n        }}\n      />\n    </FormGroup>\n  );\n};\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  namespace: getActiveNamespace(state),\n});\n\nexport default connect<StateProps, null, SecretKeySelectorProps>(mapStateToProps)(\n  SecretKeySelector,\n);\n"]}]}