{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/pipelines/modals/utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/pipelines/modals/utils.ts","mtime":1616735742470},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { getRandomChars } from '@console/shared';\nimport { PipelineRunModel } from '../../../../models';\nimport { getPipelineRunParams, getPipelineRunWorkspaces } from '../../utils/pipeline-utils';\nimport { CREATE_PIPELINE_RESOURCE, initialResourceFormValues } from './const';\n/**\n * Migrates a PipelineRun from one version to another to support auto-upgrades with old (and invalid) PipelineRuns.\n *\n * Note: Each check within this method should be driven by the apiVersion number if the API is properly up-versioned\n * for these breaking changes. (should be done moving from 0.10.x forward)\n */\nexport const migratePipelineRun = (pipelineRun) => {\n    let newPipelineRun = pipelineRun;\n    const serviceAccountPath = 'spec.serviceAccount';\n    if (_.has(newPipelineRun, serviceAccountPath)) {\n        // .spec.serviceAccount was removed for .spec.serviceAccountName in 0.9.x\n        // Note: apiVersion was not updated for this change and thus we cannot gate this change behind a version number\n        const serviceAccountName = _.get(newPipelineRun, serviceAccountPath);\n        newPipelineRun = _.omit(newPipelineRun, [serviceAccountPath]);\n        newPipelineRun = _.merge(newPipelineRun, {\n            spec: {\n                serviceAccountName,\n            },\n        });\n    }\n    return newPipelineRun;\n};\nexport const getPipelineRunData = (pipeline = null, latestRun) => {\n    var _a, _b;\n    if (!pipeline && !latestRun) {\n        // eslint-disable-next-line no-console\n        console.error('Missing parameters, unable to create new PipelineRun');\n        return null;\n    }\n    const pipelineName = pipeline ? pipeline.metadata.name : latestRun.spec.pipelineRef.name;\n    const resources = latestRun === null || latestRun === void 0 ? void 0 : latestRun.spec.resources;\n    const workspaces = latestRun === null || latestRun === void 0 ? void 0 : latestRun.spec.workspaces;\n    const latestRunParams = latestRun === null || latestRun === void 0 ? void 0 : latestRun.spec.params;\n    const pipelineParams = pipeline === null || pipeline === void 0 ? void 0 : pipeline.spec.params;\n    const params = latestRunParams || getPipelineRunParams(pipelineParams);\n    const newPipelineRun = {\n        apiVersion: pipeline ? pipeline.apiVersion : latestRun.apiVersion,\n        kind: PipelineRunModel.kind,\n        metadata: {\n            name: `${pipelineName}-${getRandomChars(6)}`,\n            namespace: pipeline ? pipeline.metadata.namespace : latestRun.metadata.namespace,\n            labels: _.merge({}, (_a = pipeline === null || pipeline === void 0 ? void 0 : pipeline.metadata) === null || _a === void 0 ? void 0 : _a.labels, (_b = latestRun === null || latestRun === void 0 ? void 0 : latestRun.metadata) === null || _b === void 0 ? void 0 : _b.labels, {\n                'tekton.dev/pipeline': pipelineName,\n            }),\n        },\n        spec: Object.assign(Object.assign(Object.assign(Object.assign({}, ((latestRun === null || latestRun === void 0 ? void 0 : latestRun.spec) || {})), { pipelineRef: {\n                name: pipelineName,\n            }, resources }), (params && { params })), { workspaces, status: null }),\n    };\n    return migratePipelineRun(newPipelineRun);\n};\nexport const convertPipelineToModalData = (pipeline, alwaysCreateResources = false) => {\n    const { metadata: { namespace }, spec: { params, resources }, } = pipeline;\n    return {\n        namespace,\n        parameters: params || [],\n        resources: (resources || []).map((resource) => ({\n            name: resource.name,\n            selection: alwaysCreateResources ? CREATE_PIPELINE_RESOURCE : null,\n            data: Object.assign(Object.assign({}, initialResourceFormValues[resource.type]), { type: resource.type }),\n        })),\n    };\n};\nexport const convertMapToNameValueArray = (map) => {\n    return Object.keys(map).map((name) => {\n        const value = map[name];\n        return { name, value };\n    });\n};\nconst convertResources = (resource) => {\n    if (resource.selection === CREATE_PIPELINE_RESOURCE) {\n        return {\n            name: resource.name,\n            resourceSpec: {\n                params: convertMapToNameValueArray(resource.data.params),\n                type: resource.data.type,\n            },\n        };\n    }\n    return {\n        name: resource.name,\n        resourceRef: {\n            name: resource.selection,\n        },\n    };\n};\nexport const getPipelineRunFromForm = (pipeline, formValues, labels) => {\n    const { parameters, resources, workspaces } = formValues;\n    const pipelineRunData = {\n        metadata: {\n            labels,\n        },\n        spec: {\n            pipelineRef: {\n                name: pipeline.metadata.name,\n            },\n            params: getPipelineRunParams(parameters),\n            resources: resources.map(convertResources),\n            workspaces: getPipelineRunWorkspaces(workspaces),\n        },\n    };\n    return getPipelineRunData(pipeline, pipelineRunData);\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/pipelines/modals/utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/pipelines/modals/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { getRandomChars } from '@console/shared';\nimport {\n  Pipeline,\n  PipelineResource,\n  PipelineRun,\n  PipelineRunInlineResource,\n  PipelineRunInlineResourceParam,\n  PipelineRunReferenceResource,\n  PipelineRunResource,\n} from '../../utils/pipeline-augment';\nimport { PipelineRunModel } from '../../../../models';\nimport { getPipelineRunParams, getPipelineRunWorkspaces } from '../../utils/pipeline-utils';\nimport { CREATE_PIPELINE_RESOURCE, initialResourceFormValues } from './const';\nimport { CommonPipelineModalFormikValues, PipelineModalFormResource } from './types';\n\n/**\n * Migrates a PipelineRun from one version to another to support auto-upgrades with old (and invalid) PipelineRuns.\n *\n * Note: Each check within this method should be driven by the apiVersion number if the API is properly up-versioned\n * for these breaking changes. (should be done moving from 0.10.x forward)\n */\nexport const migratePipelineRun = (pipelineRun: PipelineRun): PipelineRun => {\n  let newPipelineRun = pipelineRun;\n\n  const serviceAccountPath = 'spec.serviceAccount';\n  if (_.has(newPipelineRun, serviceAccountPath)) {\n    // .spec.serviceAccount was removed for .spec.serviceAccountName in 0.9.x\n    // Note: apiVersion was not updated for this change and thus we cannot gate this change behind a version number\n    const serviceAccountName = _.get(newPipelineRun, serviceAccountPath);\n    newPipelineRun = _.omit(newPipelineRun, [serviceAccountPath]);\n    newPipelineRun = _.merge(newPipelineRun, {\n      spec: {\n        serviceAccountName,\n      },\n    });\n  }\n\n  return newPipelineRun;\n};\n\nexport const getPipelineRunData = (\n  pipeline: Pipeline = null,\n  latestRun?: PipelineRun,\n): PipelineRun => {\n  if (!pipeline && !latestRun) {\n    // eslint-disable-next-line no-console\n    console.error('Missing parameters, unable to create new PipelineRun');\n    return null;\n  }\n\n  const pipelineName = pipeline ? pipeline.metadata.name : latestRun.spec.pipelineRef.name;\n\n  const resources = latestRun?.spec.resources;\n  const workspaces = latestRun?.spec.workspaces;\n\n  const latestRunParams = latestRun?.spec.params;\n  const pipelineParams = pipeline?.spec.params;\n  const params = latestRunParams || getPipelineRunParams(pipelineParams);\n\n  const newPipelineRun = {\n    apiVersion: pipeline ? pipeline.apiVersion : latestRun.apiVersion,\n    kind: PipelineRunModel.kind,\n    metadata: {\n      name: `${pipelineName}-${getRandomChars(6)}`,\n      namespace: pipeline ? pipeline.metadata.namespace : latestRun.metadata.namespace,\n      labels: _.merge({}, pipeline?.metadata?.labels, latestRun?.metadata?.labels, {\n        'tekton.dev/pipeline': pipelineName,\n      }),\n    },\n    spec: {\n      ...(latestRun?.spec || {}),\n      pipelineRef: {\n        name: pipelineName,\n      },\n      resources,\n      ...(params && { params }),\n      workspaces,\n      status: null,\n    },\n  };\n  return migratePipelineRun(newPipelineRun);\n};\n\nexport const convertPipelineToModalData = (\n  pipeline: Pipeline,\n  alwaysCreateResources: boolean = false,\n): CommonPipelineModalFormikValues => {\n  const {\n    metadata: { namespace },\n    spec: { params, resources },\n  } = pipeline;\n\n  return {\n    namespace,\n    parameters: params || [],\n    resources: (resources || []).map((resource: PipelineResource) => ({\n      name: resource.name,\n      selection: alwaysCreateResources ? CREATE_PIPELINE_RESOURCE : null,\n      data: {\n        ...initialResourceFormValues[resource.type],\n        type: resource.type,\n      },\n    })),\n  };\n};\n\nexport const convertMapToNameValueArray = (map: {\n  [key: string]: any;\n}): PipelineRunInlineResourceParam[] => {\n  return Object.keys(map).map((name) => {\n    const value = map[name];\n    return { name, value };\n  });\n};\n\nconst convertResources = (resource: PipelineModalFormResource): PipelineRunResource => {\n  if (resource.selection === CREATE_PIPELINE_RESOURCE) {\n    return {\n      name: resource.name,\n      resourceSpec: {\n        params: convertMapToNameValueArray(resource.data.params),\n        type: resource.data.type,\n      },\n    } as PipelineRunInlineResource;\n  }\n\n  return {\n    name: resource.name,\n    resourceRef: {\n      name: resource.selection,\n    },\n  } as PipelineRunReferenceResource;\n};\n\nexport const getPipelineRunFromForm = (\n  pipeline: Pipeline,\n  formValues: CommonPipelineModalFormikValues,\n  labels?: { [key: string]: string },\n) => {\n  const { parameters, resources, workspaces } = formValues;\n\n  const pipelineRunData: PipelineRun = {\n    metadata: {\n      labels,\n    },\n    spec: {\n      pipelineRef: {\n        name: pipeline.metadata.name,\n      },\n      params: getPipelineRunParams(parameters),\n      resources: resources.map(convertResources),\n      workspaces: getPipelineRunWorkspaces(workspaces),\n    },\n  };\n  return getPipelineRunData(pipeline, pipelineRunData);\n};\n"]}]}