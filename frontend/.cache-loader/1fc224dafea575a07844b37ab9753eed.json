{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/storage/create-pvc.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/storage/create-pvc.tsx","mtime":1615298458750},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Link } from 'react-router-dom';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { isCephProvisioner, isObjectSC } from '@console/shared/src/utils';\nimport { k8sCreate, referenceFor } from '../../module/k8s';\nimport { AsyncComponent, ButtonBar, RequestSizeInput, history, resourceObjPath } from '../utils';\nimport { StorageClassDropdown } from '../utils/storage-class-dropdown';\nimport { RadioInput } from '../radio';\nimport { Checkbox } from '../checkbox';\nimport { PersistentVolumeClaimModel } from '../../models';\nconst NameValueEditorComponent = (props) => (React.createElement(AsyncComponent, Object.assign({ loader: () => import('../utils/name-value-editor').then((c) => c.NameValueEditor) }, props)));\nconst cephRBDProvisionerSuffix = 'rbd.csi.ceph.com';\n//See https://kubernetes.io/docs/concepts/storage/persistent-volumes/#types-of-persistent-volumes for more details\nconst provisionerAccessModeMapping = {\n    'kubernetes.io/no-provisioner': ['ReadWriteOnce'],\n    'kubernetes.io/aws-ebs': ['ReadWriteOnce'],\n    'kubernetes.io/gce-pd': ['ReadWriteOnce', 'ReadOnlyMany'],\n    'kubernetes.io/glusterfs': ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'],\n    'kubernetes.io/cinder': ['ReadWriteOnce'],\n    'kubernetes.io/azure-file': ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'],\n    'kubernetes.io/azure-disk': ['ReadWriteOnce'],\n    'kubernetes.io/quobyte': ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'],\n    'kubernetes.io/rbd': ['ReadWriteOnce', 'ReadOnlyMany'],\n    'kubernetes.io/vsphere-volume': ['ReadWriteOnce', 'ReadWriteMany'],\n    'kubernetes.io/portworx-volume': ['ReadWriteOnce', 'ReadWriteMany'],\n    'kubernetes.io/scaleio': ['ReadWriteOnce', 'ReadOnlyMany'],\n    'kubernetes.io/storageos': ['ReadWriteOnce'],\n};\n// This form is done a little odd since it is used in both its own page and as\n// a sub form inside the attach storage page.\nexport const CreatePVCForm = (props) => {\n    const [accessModeHelp, setAccessModeHelp] = React.useState('Permissions to the mounted drive.');\n    const [allowedAccessModes, setAllowedAccessModes] = React.useState([\n        'ReadWriteOnce',\n        'ReadWriteMany',\n        'ReadOnlyMany',\n    ]);\n    const [storageClass, setStorageClass] = React.useState('');\n    const [pvcName, setPvcName] = React.useState('');\n    const [accessMode, setAccessMode] = React.useState('ReadWriteOnce');\n    const [requestSizeValue, setRequestSizeValue] = React.useState('');\n    const [requestSizeUnit, setRequestSizeUnit] = React.useState('Gi');\n    const [useSelector, setUseSelector] = React.useState(false);\n    const [nameValuePairs, setNameValuePairs] = React.useState([['', '']]);\n    const [storageProvisioner, setStorageProvisioner] = React.useState('');\n    const accessModeRadios = [\n        {\n            value: 'ReadWriteOnce',\n            title: 'Single User (RWO)',\n        },\n        {\n            value: 'ReadWriteMany',\n            title: 'Shared Access (RWX)',\n        },\n        {\n            value: 'ReadOnlyMany',\n            title: 'Read Only (ROX)',\n        },\n    ];\n    const dropdownUnits = {\n        Mi: 'MiB',\n        Gi: 'GiB',\n        Ti: 'TiB',\n    };\n    const { namespace, onChange } = props;\n    React.useEffect(() => {\n        const getSelector = () => {\n            if (!useSelector) {\n                return null;\n            }\n            const matchLabels = _.reduce(nameValuePairs, (acc, [key, value]) => {\n                return key ? Object.assign(Object.assign({}, acc), { [key]: value }) : acc;\n            }, {});\n            return _.isEmpty(matchLabels) ? null : { matchLabels };\n        };\n        const updatePVC = () => {\n            const obj = {\n                apiVersion: 'v1',\n                kind: 'PersistentVolumeClaim',\n                metadata: {\n                    name: pvcName,\n                    namespace,\n                },\n                spec: {\n                    accessModes: [accessMode],\n                    resources: {\n                        requests: {\n                            storage: `${requestSizeValue}${requestSizeUnit}`,\n                        },\n                    },\n                },\n            };\n            // Add the selector only if specified.\n            const selector = getSelector();\n            if (selector) {\n                obj.spec.selector = selector;\n            }\n            if (storageClass) {\n                obj.spec.storageClassName = storageClass;\n                // should set block only for RBD + RWX\n                if (_.endsWith(storageProvisioner, cephRBDProvisionerSuffix) &&\n                    accessMode === 'ReadWriteMany') {\n                    obj.spec.volumeMode = 'Block';\n                }\n            }\n            return obj;\n        };\n        onChange(updatePVC);\n    }, [\n        accessMode,\n        namespace,\n        nameValuePairs,\n        pvcName,\n        onChange,\n        storageClass,\n        requestSizeValue,\n        requestSizeUnit,\n        useSelector,\n        storageProvisioner,\n    ]);\n    const handleNameValuePairs = ({ nameValuePairs: updatedNameValuePairs }) => {\n        setNameValuePairs(updatedNameValuePairs);\n    };\n    const getAccessModeForProvisioner = (provisioner) => {\n        return provisioner && isCephProvisioner(provisioner)\n            ? ['ReadWriteOnce', 'ReadWriteMany']\n            : ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'];\n    };\n    const handleStorageClass = (updatedStorageClass) => {\n        var _a;\n        const provisioner = (updatedStorageClass === null || updatedStorageClass === void 0 ? void 0 : updatedStorageClass.provisioner) || '';\n        //if the provisioner is unknown or no storage class selected, user should be able to set any access mode\n        const modes = provisionerAccessModeMapping[provisioner]\n            ? provisionerAccessModeMapping[provisioner]\n            : getAccessModeForProvisioner(provisioner);\n        //setting message to display for various modes when a storage class of a know provisioner is selected\n        const displayMessage = provisionerAccessModeMapping[provisioner] || isCephProvisioner(provisioner)\n            ? 'Access mode is set by storage class and cannot be changed.'\n            : 'Permissions to the mounted drive.';\n        setAccessMode('ReadWriteOnce');\n        setAccessModeHelp(displayMessage);\n        //setting accessMode to default with the change to Storage Class selection\n        setAllowedAccessModes(modes);\n        setStorageClass((_a = updatedStorageClass === null || updatedStorageClass === void 0 ? void 0 : updatedStorageClass.metadata) === null || _a === void 0 ? void 0 : _a.name);\n        setStorageProvisioner(provisioner);\n    };\n    const handleRequestSizeInputChange = (obj) => {\n        setRequestSizeValue(obj.value);\n        setRequestSizeUnit(obj.unit);\n    };\n    const handleUseSelector = (event) => {\n        setUseSelector(event.currentTarget.checked);\n    };\n    const handlePvcName = (event) => {\n        setPvcName(event.currentTarget.value);\n    };\n    const handleAccessMode = (event) => {\n        setAccessMode(event.currentTarget.value);\n    };\n    const onlyPvcSCs = React.useCallback((sc) => !isObjectSC(sc), []);\n    return (React.createElement(\"div\", null,\n        React.createElement(\"div\", { className: \"form-group\" },\n            React.createElement(StorageClassDropdown, { onChange: handleStorageClass, id: \"storageclass-dropdown\", describedBy: \"storageclass-dropdown-help\", required: false, name: \"storageClass\", filter: onlyPvcSCs })),\n        React.createElement(\"label\", { className: \"control-label co-required\", htmlFor: \"pvc-name\" }, \"Persistent Volume Claim Name\"),\n        React.createElement(\"div\", { className: \"form-group\" },\n            React.createElement(\"input\", { className: \"pf-c-form-control\", type: \"text\", onChange: handlePvcName, placeholder: \"my-storage-claim\", \"aria-describedby\": \"pvc-name-help\", id: \"pvc-name\", name: \"pvcName\", required: true }),\n            React.createElement(\"p\", { className: \"help-block\", id: \"pvc-name-help\" }, \"A unique name for the storage claim within the project.\")),\n        React.createElement(\"label\", { className: \"control-label co-required\", htmlFor: \"access-mode\" }, \"Access Mode\"),\n        React.createElement(\"div\", { className: \"form-group\" },\n            accessModeRadios.map((radio) => {\n                let radioObj = null;\n                const disabled = !allowedAccessModes.includes(radio.value);\n                allowedAccessModes.forEach((mode) => {\n                    const checked = !disabled ? radio.value === accessMode : radio.value === mode;\n                    radioObj = (React.createElement(RadioInput, Object.assign({}, radio, { key: radio.value, onChange: handleAccessMode, inline: true, disabled: disabled, checked: checked, \"aria-describedby\": \"access-mode-help\", name: \"accessMode\" })));\n                });\n                return radioObj;\n            }),\n            React.createElement(\"p\", { className: \"help-block\", id: \"access-mode-help\" }, accessModeHelp)),\n        React.createElement(\"label\", { className: \"control-label co-required\", htmlFor: \"request-size-input\" }, \"Size\"),\n        React.createElement(RequestSizeInput, { name: \"requestSize\", required: true, onChange: handleRequestSizeInputChange, defaultRequestSizeUnit: requestSizeUnit, defaultRequestSizeValue: requestSizeValue, dropdownUnits: dropdownUnits, describedBy: \"request-size-help\", inputID: \"request-size-input\" }),\n        React.createElement(\"p\", { className: \"help-block\", id: \"request-size-help\" }, \"Desired storage capacity.\"),\n        React.createElement(Checkbox, { label: \"Use label selectors to request storage\", onChange: handleUseSelector, checked: useSelector, name: \"showLabelSelector\" }),\n        React.createElement(\"div\", { className: \"form-group\" },\n            useSelector && (React.createElement(NameValueEditorComponent, { nameValuePairs: nameValuePairs, valueString: \"Selector\", nameString: \"Label\", addString: \"Add Value\", readOnly: false, allowSorting: false, updateParentData: handleNameValuePairs })),\n            React.createElement(\"p\", { className: \"help-block\", id: \"label-selector-help\" }, \"Use label selectors to define how storage is created.\"))));\n};\nexport const CreatePVCPage = (props) => {\n    const [error, setError] = React.useState('');\n    const [inProgress, setInProgress] = React.useState(false);\n    const [pvcObj, setPvcObj] = React.useState(null);\n    const title = 'Create Persistent Volume Claim';\n    const { namespace } = props;\n    const save = (e) => {\n        e.preventDefault();\n        setInProgress(true);\n        k8sCreate(PersistentVolumeClaimModel, pvcObj).then((resource) => {\n            setInProgress(false);\n            history.push(resourceObjPath(resource, referenceFor(resource)));\n        }, ({ message }) => {\n            setError(message || 'Could not create persistent volume claim.');\n            setInProgress(false);\n        });\n    };\n    return (React.createElement(\"div\", { className: \"co-m-pane__body co-m-pane__form\" },\n        React.createElement(Helmet, null,\n            React.createElement(\"title\", null, title)),\n        React.createElement(\"h1\", { className: \"co-m-pane__heading co-m-pane__heading--baseline\" },\n            React.createElement(\"div\", { className: \"co-m-pane__name\" }, title),\n            React.createElement(\"div\", { className: \"co-m-pane__heading-link\" },\n                React.createElement(Link, { to: `/k8s/ns/${namespace}/persistentvolumeclaims/~new`, id: \"yaml-link\", replace: true }, \"Edit YAML\"))),\n        React.createElement(\"form\", { className: \"co-m-pane__body-group\", onSubmit: save },\n            React.createElement(CreatePVCForm, { onChange: setPvcObj, namespace: namespace }),\n            React.createElement(ButtonBar, { errorMessage: error, inProgress: inProgress },\n                React.createElement(ActionGroup, { className: \"pf-c-form\" },\n                    React.createElement(Button, { id: \"save-changes\", type: \"submit\", variant: \"primary\" }, \"Create\"),\n                    React.createElement(Button, { onClick: history.goBack, type: \"button\", variant: \"secondary\" }, \"Cancel\"))))));\n};\nexport const CreatePVC = ({ match: { params } }) => {\n    return React.createElement(CreatePVCPage, { namespace: params.ns });\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/storage/create-pvc.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/storage/create-pvc.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Link } from 'react-router-dom';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { isCephProvisioner, isObjectSC } from '@console/shared/src/utils';\nimport { k8sCreate, K8sResourceKind, referenceFor } from '../../module/k8s';\nimport { AsyncComponent, ButtonBar, RequestSizeInput, history, resourceObjPath } from '../utils';\nimport { StorageClassDropdown } from '../utils/storage-class-dropdown';\nimport { RadioInput } from '../radio';\nimport { Checkbox } from '../checkbox';\nimport { PersistentVolumeClaimModel } from '../../models';\nimport { StorageClass } from '../storage-class-form';\n\nconst NameValueEditorComponent = (props) => (\n  <AsyncComponent\n    loader={() => import('../utils/name-value-editor').then((c) => c.NameValueEditor)}\n    {...props}\n  />\n);\n\nconst cephRBDProvisionerSuffix = 'rbd.csi.ceph.com';\n\n//See https://kubernetes.io/docs/concepts/storage/persistent-volumes/#types-of-persistent-volumes for more details\nconst provisionerAccessModeMapping = {\n  'kubernetes.io/no-provisioner': ['ReadWriteOnce'],\n  'kubernetes.io/aws-ebs': ['ReadWriteOnce'],\n  'kubernetes.io/gce-pd': ['ReadWriteOnce', 'ReadOnlyMany'],\n  'kubernetes.io/glusterfs': ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'],\n  'kubernetes.io/cinder': ['ReadWriteOnce'],\n  'kubernetes.io/azure-file': ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'],\n  'kubernetes.io/azure-disk': ['ReadWriteOnce'],\n  'kubernetes.io/quobyte': ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'],\n  'kubernetes.io/rbd': ['ReadWriteOnce', 'ReadOnlyMany'],\n  'kubernetes.io/vsphere-volume': ['ReadWriteOnce', 'ReadWriteMany'],\n  'kubernetes.io/portworx-volume': ['ReadWriteOnce', 'ReadWriteMany'],\n  'kubernetes.io/scaleio': ['ReadWriteOnce', 'ReadOnlyMany'],\n  'kubernetes.io/storageos': ['ReadWriteOnce'],\n};\n\n// This form is done a little odd since it is used in both its own page and as\n// a sub form inside the attach storage page.\nexport const CreatePVCForm: React.FC<CreatePVCFormProps> = (props) => {\n  const [accessModeHelp, setAccessModeHelp] = React.useState('Permissions to the mounted drive.');\n  const [allowedAccessModes, setAllowedAccessModes] = React.useState([\n    'ReadWriteOnce',\n    'ReadWriteMany',\n    'ReadOnlyMany',\n  ]);\n  const [storageClass, setStorageClass] = React.useState('');\n  const [pvcName, setPvcName] = React.useState('');\n  const [accessMode, setAccessMode] = React.useState('ReadWriteOnce');\n  const [requestSizeValue, setRequestSizeValue] = React.useState('');\n  const [requestSizeUnit, setRequestSizeUnit] = React.useState('Gi');\n  const [useSelector, setUseSelector] = React.useState(false);\n  const [nameValuePairs, setNameValuePairs] = React.useState([['', '']]);\n  const [storageProvisioner, setStorageProvisioner] = React.useState('');\n  const accessModeRadios = [\n    {\n      value: 'ReadWriteOnce',\n      title: 'Single User (RWO)',\n    },\n    {\n      value: 'ReadWriteMany',\n      title: 'Shared Access (RWX)',\n    },\n    {\n      value: 'ReadOnlyMany',\n      title: 'Read Only (ROX)',\n    },\n  ];\n  const dropdownUnits = {\n    Mi: 'MiB',\n    Gi: 'GiB',\n    Ti: 'TiB',\n  };\n  const { namespace, onChange } = props;\n\n  React.useEffect(() => {\n    const getSelector = () => {\n      if (!useSelector) {\n        return null;\n      }\n\n      const matchLabels = _.reduce(\n        nameValuePairs,\n        (acc, [key, value]) => {\n          return key ? { ...acc, [key]: value } : acc;\n        },\n        {},\n      );\n\n      return _.isEmpty(matchLabels) ? null : { matchLabels };\n    };\n    const updatePVC = (): K8sResourceKind => {\n      const obj: K8sResourceKind = {\n        apiVersion: 'v1',\n        kind: 'PersistentVolumeClaim',\n        metadata: {\n          name: pvcName,\n          namespace,\n        },\n        spec: {\n          accessModes: [accessMode],\n          resources: {\n            requests: {\n              storage: `${requestSizeValue}${requestSizeUnit}`,\n            },\n          },\n        },\n      };\n\n      // Add the selector only if specified.\n      const selector = getSelector();\n      if (selector) {\n        obj.spec.selector = selector;\n      }\n\n      if (storageClass) {\n        obj.spec.storageClassName = storageClass;\n\n        // should set block only for RBD + RWX\n        if (\n          _.endsWith(storageProvisioner, cephRBDProvisionerSuffix) &&\n          accessMode === 'ReadWriteMany'\n        ) {\n          obj.spec.volumeMode = 'Block';\n        }\n      }\n\n      return obj;\n    };\n    onChange(updatePVC);\n  }, [\n    accessMode,\n    namespace,\n    nameValuePairs,\n    pvcName,\n    onChange,\n    storageClass,\n    requestSizeValue,\n    requestSizeUnit,\n    useSelector,\n    storageProvisioner,\n  ]);\n\n  const handleNameValuePairs = ({ nameValuePairs: updatedNameValuePairs }) => {\n    setNameValuePairs(updatedNameValuePairs);\n  };\n\n  const getAccessModeForProvisioner = (provisioner: string) => {\n    return provisioner && isCephProvisioner(provisioner)\n      ? ['ReadWriteOnce', 'ReadWriteMany']\n      : ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'];\n  };\n\n  const handleStorageClass = (updatedStorageClass) => {\n    const provisioner: string = updatedStorageClass?.provisioner || '';\n    //if the provisioner is unknown or no storage class selected, user should be able to set any access mode\n    const modes = provisionerAccessModeMapping[provisioner]\n      ? provisionerAccessModeMapping[provisioner]\n      : getAccessModeForProvisioner(provisioner);\n    //setting message to display for various modes when a storage class of a know provisioner is selected\n    const displayMessage =\n      provisionerAccessModeMapping[provisioner] || isCephProvisioner(provisioner)\n        ? 'Access mode is set by storage class and cannot be changed.'\n        : 'Permissions to the mounted drive.';\n    setAccessMode('ReadWriteOnce');\n    setAccessModeHelp(displayMessage);\n    //setting accessMode to default with the change to Storage Class selection\n    setAllowedAccessModes(modes);\n    setStorageClass(updatedStorageClass?.metadata?.name);\n    setStorageProvisioner(provisioner);\n  };\n\n  const handleRequestSizeInputChange = (obj) => {\n    setRequestSizeValue(obj.value);\n    setRequestSizeUnit(obj.unit);\n  };\n\n  const handleUseSelector: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    setUseSelector(event.currentTarget.checked);\n  };\n\n  const handlePvcName: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    setPvcName(event.currentTarget.value);\n  };\n\n  const handleAccessMode: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    setAccessMode(event.currentTarget.value);\n  };\n\n  const onlyPvcSCs = React.useCallback((sc: StorageClass) => !isObjectSC(sc), []);\n\n  return (\n    <div>\n      <div className=\"form-group\">\n        <StorageClassDropdown\n          onChange={handleStorageClass}\n          id=\"storageclass-dropdown\"\n          describedBy=\"storageclass-dropdown-help\"\n          required={false}\n          name=\"storageClass\"\n          filter={onlyPvcSCs}\n        />\n      </div>\n      <label className=\"control-label co-required\" htmlFor=\"pvc-name\">\n        Persistent Volume Claim Name\n      </label>\n      <div className=\"form-group\">\n        <input\n          className=\"pf-c-form-control\"\n          type=\"text\"\n          onChange={handlePvcName}\n          placeholder=\"my-storage-claim\"\n          aria-describedby=\"pvc-name-help\"\n          id=\"pvc-name\"\n          name=\"pvcName\"\n          required\n        />\n        <p className=\"help-block\" id=\"pvc-name-help\">\n          A unique name for the storage claim within the project.\n        </p>\n      </div>\n      <label className=\"control-label co-required\" htmlFor=\"access-mode\">\n        Access Mode\n      </label>\n      <div className=\"form-group\">\n        {accessModeRadios.map((radio) => {\n          let radioObj = null;\n          const disabled = !allowedAccessModes.includes(radio.value);\n\n          allowedAccessModes.forEach((mode) => {\n            const checked = !disabled ? radio.value === accessMode : radio.value === mode;\n            radioObj = (\n              <RadioInput\n                {...radio}\n                key={radio.value}\n                onChange={handleAccessMode}\n                inline={true}\n                disabled={disabled}\n                checked={checked}\n                aria-describedby=\"access-mode-help\"\n                name=\"accessMode\"\n              />\n            );\n          });\n\n          return radioObj;\n        })}\n        <p className=\"help-block\" id=\"access-mode-help\">\n          {accessModeHelp}\n        </p>\n      </div>\n      <label className=\"control-label co-required\" htmlFor=\"request-size-input\">\n        Size\n      </label>\n      <RequestSizeInput\n        name=\"requestSize\"\n        required\n        onChange={handleRequestSizeInputChange}\n        defaultRequestSizeUnit={requestSizeUnit}\n        defaultRequestSizeValue={requestSizeValue}\n        dropdownUnits={dropdownUnits}\n        describedBy=\"request-size-help\"\n        inputID=\"request-size-input\"\n      />\n      <p className=\"help-block\" id=\"request-size-help\">\n        Desired storage capacity.\n      </p>\n      <Checkbox\n        label=\"Use label selectors to request storage\"\n        onChange={handleUseSelector}\n        checked={useSelector}\n        name=\"showLabelSelector\"\n      />\n      <div className=\"form-group\">\n        {useSelector && (\n          <NameValueEditorComponent\n            nameValuePairs={nameValuePairs}\n            valueString=\"Selector\"\n            nameString=\"Label\"\n            addString=\"Add Value\"\n            readOnly={false}\n            allowSorting={false}\n            updateParentData={handleNameValuePairs}\n          />\n        )}\n        <p className=\"help-block\" id=\"label-selector-help\">\n          Use label selectors to define how storage is created.\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport const CreatePVCPage: React.FC<CreatePVCPageProps> = (props) => {\n  const [error, setError] = React.useState('');\n  const [inProgress, setInProgress] = React.useState(false);\n  const [pvcObj, setPvcObj] = React.useState(null);\n  const title = 'Create Persistent Volume Claim';\n  const { namespace } = props;\n\n  const save = (e: React.FormEvent<EventTarget>) => {\n    e.preventDefault();\n    setInProgress(true);\n    k8sCreate(PersistentVolumeClaimModel, pvcObj).then(\n      (resource) => {\n        setInProgress(false);\n        history.push(resourceObjPath(resource, referenceFor(resource)));\n      },\n      ({ message }: { message: string }) => {\n        setError(message || 'Could not create persistent volume claim.');\n        setInProgress(false);\n      },\n    );\n  };\n\n  return (\n    <div className=\"co-m-pane__body co-m-pane__form\">\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <h1 className=\"co-m-pane__heading co-m-pane__heading--baseline\">\n        <div className=\"co-m-pane__name\">{title}</div>\n        <div className=\"co-m-pane__heading-link\">\n          <Link to={`/k8s/ns/${namespace}/persistentvolumeclaims/~new`} id=\"yaml-link\" replace>\n            Edit YAML\n          </Link>\n        </div>\n      </h1>\n      <form className=\"co-m-pane__body-group\" onSubmit={save}>\n        <CreatePVCForm onChange={setPvcObj} namespace={namespace} />\n        <ButtonBar errorMessage={error} inProgress={inProgress}>\n          <ActionGroup className=\"pf-c-form\">\n            <Button id=\"save-changes\" type=\"submit\" variant=\"primary\">\n              Create\n            </Button>\n            <Button onClick={history.goBack} type=\"button\" variant=\"secondary\">\n              Cancel\n            </Button>\n          </ActionGroup>\n        </ButtonBar>\n      </form>\n    </div>\n  );\n};\n\nexport const CreatePVC = ({ match: { params } }) => {\n  return <CreatePVCPage namespace={params.ns} />;\n};\n\nexport type CreatePVCFormProps = {\n  namespace: string;\n  onChange: (K8sResourceKind) => void;\n};\n\nexport type CreatePVCPageProps = {\n  namespace: string;\n};\n"]}]}