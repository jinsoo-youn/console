{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/event-sources/SinkBindingSection.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/event-sources/SinkBindingSection.tsx","mtime":1615298458640},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useFormikContext } from 'formik';\nimport { TextInputTypes, FormGroup } from '@patternfly/react-core';\nimport { InputField, getFieldId } from '@console/shared';\nimport { AsyncComponent } from '@console/internal/components/utils/async';\nimport FormSection from '@console/dev-console/src/components/import/section/FormSection';\nconst SinkBindingSection = () => {\n    var _a, _b, _c, _d;\n    const { values, setFieldValue } = useFormikContext();\n    const initVal = ((_d = (_c = (_b = (_a = values === null || values === void 0 ? void 0 : values.data) === null || _a === void 0 ? void 0 : _a.sinkbinding) === null || _b === void 0 ? void 0 : _b.subject) === null || _c === void 0 ? void 0 : _c.selector) === null || _d === void 0 ? void 0 : _d.matchLabels) || {};\n    const initialValueResources = !_.isEmpty(initVal)\n        ? _.map(initVal, (key, val) => [val, key])\n        : [['', '']];\n    const [nameValue, setNameValue] = React.useState(initialValueResources);\n    const handleNameValuePairs = React.useCallback(({ nameValuePairs }) => {\n        let updatedNameValuePairs = {};\n        _.forEach(nameValuePairs, ([name, value]) => {\n            if (value.length) {\n                updatedNameValuePairs = Object.assign(Object.assign({}, updatedNameValuePairs), { [name]: value });\n                return updatedNameValuePairs;\n            }\n            return updatedNameValuePairs;\n        });\n        setNameValue(nameValuePairs);\n        setFieldValue('data.sinkbinding.subject.selector.matchLabels', updatedNameValuePairs);\n    }, [setFieldValue]);\n    const fieldId = getFieldId(values.type, 'subject-matchLabels');\n    return (React.createElement(FormSection, { title: \"SinkBinding\", extraMargin: true },\n        React.createElement(\"h3\", { className: \"co-section-heading-tertiary\" }, \"Subject\"),\n        React.createElement(InputField, { \"data-test-id\": \"sinkbinding-apiversion-field\", type: TextInputTypes.text, name: \"data.sinkbinding.subject.apiVersion\", label: \"apiVersion\", required: true }),\n        React.createElement(InputField, { \"data-test-id\": \"sinkbinding-kind-field\", type: TextInputTypes.text, name: \"data.sinkbinding.subject.kind\", label: \"Kind\", required: true }),\n        React.createElement(FormGroup, { fieldId: fieldId, label: \"Match Labels\" },\n            React.createElement(AsyncComponent, { loader: () => import('@console/internal/components/utils/name-value-editor').then((c) => c.NameValueEditor), nameValuePairs: nameValue, valueString: \"Value\", nameString: \"Name\", addString: \"Add Values\", readOnly: false, allowSorting: false, updateParentData: handleNameValuePairs }))));\n};\nexport default SinkBindingSection;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/event-sources/SinkBindingSection.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/event-sources/SinkBindingSection.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { TextInputTypes, FormGroup } from '@patternfly/react-core';\nimport { InputField, getFieldId } from '@console/shared';\nimport { AsyncComponent } from '@console/internal/components/utils/async';\nimport FormSection from '@console/dev-console/src/components/import/section/FormSection';\n\nconst SinkBindingSection: React.FC = () => {\n  const { values, setFieldValue } = useFormikContext<FormikValues>();\n  const initVal = values?.data?.sinkbinding?.subject?.selector?.matchLabels || {};\n  const initialValueResources = !_.isEmpty(initVal)\n    ? _.map(initVal, (key, val) => [val, key])\n    : [['', '']];\n  const [nameValue, setNameValue] = React.useState(initialValueResources);\n  const handleNameValuePairs = React.useCallback(\n    ({ nameValuePairs }) => {\n      let updatedNameValuePairs = {};\n      _.forEach(nameValuePairs, ([name, value]) => {\n        if (value.length) {\n          updatedNameValuePairs = { ...updatedNameValuePairs, [name]: value };\n          return updatedNameValuePairs;\n        }\n        return updatedNameValuePairs;\n      });\n      setNameValue(nameValuePairs);\n      setFieldValue('data.sinkbinding.subject.selector.matchLabels', updatedNameValuePairs);\n    },\n    [setFieldValue],\n  );\n  const fieldId = getFieldId(values.type, 'subject-matchLabels');\n  return (\n    <FormSection title=\"SinkBinding\" extraMargin>\n      <h3 className=\"co-section-heading-tertiary\">Subject</h3>\n      <InputField\n        data-test-id=\"sinkbinding-apiversion-field\"\n        type={TextInputTypes.text}\n        name=\"data.sinkbinding.subject.apiVersion\"\n        label=\"apiVersion\"\n        required\n      />\n      <InputField\n        data-test-id=\"sinkbinding-kind-field\"\n        type={TextInputTypes.text}\n        name=\"data.sinkbinding.subject.kind\"\n        label=\"Kind\"\n        required\n      />\n      <FormGroup fieldId={fieldId} label=\"Match Labels\">\n        <AsyncComponent\n          loader={() =>\n            import('@console/internal/components/utils/name-value-editor').then(\n              (c) => c.NameValueEditor,\n            )\n          }\n          nameValuePairs={nameValue}\n          valueString=\"Value\"\n          nameString=\"Name\"\n          addString=\"Add Values\"\n          readOnly={false}\n          allowSorting={false}\n          updateParentData={handleNameValuePairs}\n        />\n      </FormGroup>\n    </FormSection>\n  );\n};\n\nexport default SinkBindingSection;\n"]}]}