{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/edges/BaseEdge.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/edges/BaseEdge.tsx","mtime":1617154808370},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { referenceFor, modelFor } from '@console/internal/module/k8s';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport { Layer, observer, useHover, useSelection } from '@console/topology';\nimport { getTopologyResourceObject } from '../../topology-utils';\nimport './BaseEdge.scss';\nconst ObservedBaseEdge = ({ element, dragging, onShowRemoveConnector, onHideRemoveConnector, children, className }) => {\n    const [hover, hoverRef] = useHover();\n    const [selected, onSelect] = useSelection(false, true);\n    const startPoint = element.getStartPoint();\n    const endPoint = element.getEndPoint();\n    const resourceObj = getTopologyResourceObject(element.getSource().getData());\n    const resourceModel = resourceObj && modelFor(referenceFor(resourceObj));\n    const editAccess = useAccessReview({\n        group: resourceModel === null || resourceModel === void 0 ? void 0 : resourceModel.apiGroup,\n        verb: 'patch',\n        resource: resourceModel === null || resourceModel === void 0 ? void 0 : resourceModel.plural,\n        name: resourceObj === null || resourceObj === void 0 ? void 0 : resourceObj.metadata.name,\n        namespace: resourceObj === null || resourceObj === void 0 ? void 0 : resourceObj.metadata.namespace,\n    });\n    React.useLayoutEffect(() => {\n        if (editAccess) {\n            if (hover && !dragging) {\n                onShowRemoveConnector && onShowRemoveConnector();\n            }\n            else {\n                onHideRemoveConnector && onHideRemoveConnector();\n            }\n        }\n    }, [hover, dragging, onShowRemoveConnector, onHideRemoveConnector, editAccess]);\n    return (React.createElement(Layer, { id: dragging || hover ? 'top' : undefined },\n        React.createElement(\"g\", { ref: hoverRef, \"data-test-id\": \"edge-handler\", className: classNames(className, 'odc-base-edge', {\n                'is-dragging': dragging,\n                'is-hover': hover,\n                'is-selected': selected,\n            }), onClick: onSelect },\n            React.createElement(\"line\", { x1: startPoint.x, y1: startPoint.y, x2: endPoint.x, y2: endPoint.y, strokeWidth: 10, stroke: \"transparent\" }),\n            React.createElement(\"line\", { className: \"odc-base-edge__link\", x1: startPoint.x, y1: startPoint.y, x2: endPoint.x, y2: endPoint.y }),\n            children)));\n};\nconst BaseEdge = observer(ObservedBaseEdge);\nexport { BaseEdge };\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/edges/BaseEdge.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/edges/BaseEdge.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { referenceFor, modelFor } from '@console/internal/module/k8s';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport { Layer, Edge, WithRemoveConnectorProps, observer, useHover, useSelection } from '@console/topology';\nimport { getTopologyResourceObject } from '../../topology-utils';\nimport './BaseEdge.scss';\n\ntype BaseEdgeProps = {\n  element: Edge;\n  dragging?: boolean;\n  className?: string;\n} & WithRemoveConnectorProps;\n\nconst ObservedBaseEdge: React.FC<BaseEdgeProps> = ({ element, dragging, onShowRemoveConnector, onHideRemoveConnector, children, className }) => {\n  const [hover, hoverRef] = useHover();\n  const [selected, onSelect] = useSelection(false, true);\n  const startPoint = element.getStartPoint();\n  const endPoint = element.getEndPoint();\n  const resourceObj = getTopologyResourceObject(element.getSource().getData());\n  const resourceModel = resourceObj && modelFor(referenceFor(resourceObj));\n\n  const editAccess = useAccessReview({\n    group: resourceModel?.apiGroup,\n    verb: 'patch',\n    resource: resourceModel?.plural,\n    name: resourceObj?.metadata.name,\n    namespace: resourceObj?.metadata.namespace,\n  });\n\n  React.useLayoutEffect(() => {\n    if (editAccess) {\n      if (hover && !dragging) {\n        onShowRemoveConnector && onShowRemoveConnector();\n      } else {\n        onHideRemoveConnector && onHideRemoveConnector();\n      }\n    }\n  }, [hover, dragging, onShowRemoveConnector, onHideRemoveConnector, editAccess]);\n\n  return (\n    <Layer id={dragging || hover ? 'top' : undefined}>\n      <g\n        ref={hoverRef}\n        data-test-id=\"edge-handler\"\n        className={classNames(className, 'odc-base-edge', {\n          'is-dragging': dragging,\n          'is-hover': hover,\n          'is-selected': selected,\n        })}\n        onClick={onSelect}\n      >\n        <line x1={startPoint.x} y1={startPoint.y} x2={endPoint.x} y2={endPoint.y} strokeWidth={10} stroke=\"transparent\" />\n        <line className=\"odc-base-edge__link\" x1={startPoint.x} y1={startPoint.y} x2={endPoint.x} y2={endPoint.y} />\n        {children}\n      </g>\n    </Layer>\n  );\n};\n\nconst BaseEdge = observer(ObservedBaseEdge);\nexport { BaseEdge };\n"]}]}