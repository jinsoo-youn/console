{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/cluster-settings/cluster-settings.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/cluster-settings/cluster-settings.tsx","mtime":1615298458720},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Helmet } from 'react-helmet';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\nimport { AddCircleOIcon, ArrowCircleUpIcon, SyncAltIcon, PencilAltIcon, } from '@patternfly/react-icons';\nimport { ClusterOperatorPage } from './cluster-operator';\nimport { clusterChannelModal, clusterUpdateModal, errorModal } from '../modals';\nimport { GlobalConfigPage } from './global-config';\nimport { ClusterAutoscalerModel, ClusterVersionModel } from '../../models';\nimport { ClusterUpdateStatus, ClusterVersionConditionType, clusterVersionReference, getAvailableClusterUpdates, getClusterID, getClusterUpdateStatus, getClusterVersionCondition, getDesiredClusterVersion, getErrataLink, getLastCompletedUpdate, getOCMLink, k8sPatch, K8sResourceConditionStatus, referenceForModel, } from '../../module/k8s';\nimport { EmptyBox, ExternalLink, Firehose, HorizontalNav, ResourceLink, resourcePathFromModel, SectionHeading, Timestamp, truncateMiddle, } from '../utils';\nimport { GreenCheckCircleIcon, RedExclamationCircleIcon, YellowExclamationTriangleIcon, } from '@console/shared';\nconst cancelUpdate = (cv) => {\n    k8sPatch(ClusterVersionModel, cv, [{ path: '/spec/desiredUpdate', op: 'remove' }]).catch((err) => {\n        const error = err.message;\n        errorModal({ error });\n    });\n};\nexport const clusterAutoscalerReference = referenceForModel(ClusterAutoscalerModel);\nexport const CurrentChannel = ({ cv }) => (React.createElement(Button, { type: \"button\", isInline: true, \"data-test-id\": \"current-channel-update-link\", onClick: () => clusterChannelModal({ cv }), variant: \"link\" },\n    cv.spec.channel || '-',\n    React.createElement(PencilAltIcon, { className: \"co-icon-space-l pf-c-button-icon--plain\" })));\nconst InvalidMessage = ({ cv }) => (React.createElement(React.Fragment, null,\n    React.createElement(\"div\", null,\n        React.createElement(RedExclamationCircleIcon, null),\n        \" Invalid cluster version\"),\n    React.createElement(Button, { onClick: () => cancelUpdate(cv), variant: \"primary\" }, \"Cancel update\")));\nconst UpdatesAvailableMessage = ({ cv }) => (React.createElement(React.Fragment, null,\n    React.createElement(\"div\", { className: \"co-update-status\" },\n        React.createElement(ArrowCircleUpIcon, { className: \"update-pending\" }),\n        \" Update available\"),\n    React.createElement(\"div\", null,\n        React.createElement(Button, { onClick: () => clusterUpdateModal({ cv }), variant: \"primary\" }, \"Update now\"))));\nconst UpdatingMessage = ({ cv }) => {\n    const updatingCondition = getClusterVersionCondition(cv, ClusterVersionConditionType.Progressing, K8sResourceConditionStatus.True);\n    return (React.createElement(React.Fragment, null,\n        updatingCondition.message && (React.createElement(\"div\", null,\n            React.createElement(SyncAltIcon, { className: \"fa-spin\" }),\n            \" \",\n            updatingCondition.message)),\n        React.createElement(Link, { to: \"/settings/cluster/clusteroperators\" }, \"View details\")));\n};\nconst ErrorRetrievingMessage = ({ cv }) => {\n    const retrievedUpdatesCondition = getClusterVersionCondition(cv, ClusterVersionConditionType.RetrievedUpdates, K8sResourceConditionStatus.False);\n    return retrievedUpdatesCondition.reason === 'NoChannel' ? (React.createElement(\"span\", { className: \"text-muted\" }, \"No update channel selected\")) : (React.createElement(Tooltip, { content: truncateMiddle(retrievedUpdatesCondition.message, { length: 256 }) },\n        React.createElement(\"span\", null,\n            React.createElement(RedExclamationCircleIcon, null),\n            ' ',\n            retrievedUpdatesCondition.reason === 'VersionNotFound'\n                ? 'Version not found'\n                : 'Error retrieving')));\n};\nconst FailingMessage = ({ cv }) => {\n    const failingCondition = getClusterVersionCondition(cv, ClusterVersionConditionType.Failing, K8sResourceConditionStatus.True);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", null,\n            React.createElement(Tooltip, { content: truncateMiddle(failingCondition.message, { length: 256 }) },\n                React.createElement(\"span\", null,\n                    React.createElement(RedExclamationCircleIcon, null),\n                    \" Failing\"))),\n        React.createElement(Link, { to: \"/settings/cluster/clusteroperators\" }, \"View details\")));\n};\nconst UpToDateMessage = () => (React.createElement(\"span\", null,\n    React.createElement(GreenCheckCircleIcon, null),\n    \" Up to date\"));\nexport const UpdateStatus = ({ cv }) => {\n    const status = getClusterUpdateStatus(cv);\n    switch (status) {\n        case ClusterUpdateStatus.Invalid:\n            return React.createElement(InvalidMessage, { cv: cv });\n        case ClusterUpdateStatus.UpdatesAvailable:\n            return React.createElement(UpdatesAvailableMessage, { cv: cv });\n        case ClusterUpdateStatus.Updating:\n            return React.createElement(UpdatingMessage, { cv: cv });\n        case ClusterUpdateStatus.ErrorRetrieving:\n            return React.createElement(ErrorRetrievingMessage, { cv: cv });\n        case ClusterUpdateStatus.Failing:\n            return React.createElement(FailingMessage, { cv: cv });\n        default:\n            return React.createElement(UpToDateMessage, null);\n    }\n};\nexport const CurrentVersion = ({ cv }) => {\n    const desiredVersion = getDesiredClusterVersion(cv);\n    const lastVersion = getLastCompletedUpdate(cv);\n    const status = getClusterUpdateStatus(cv);\n    if (status === ClusterUpdateStatus.UpToDate || status === ClusterUpdateStatus.UpdatesAvailable) {\n        return desiredVersion ? (React.createElement(\"span\", { className: \"co-select-to-copy\" }, desiredVersion)) : (React.createElement(React.Fragment, null,\n            React.createElement(YellowExclamationTriangleIcon, null),\n            \"\\u00A0Unknown\"));\n    }\n    return lastVersion ? React.createElement(\"span\", { className: \"co-select-to-copy\" }, lastVersion) : React.createElement(React.Fragment, null, \"None\");\n};\nexport const UpdateLink = ({ cv }) => {\n    const status = getClusterUpdateStatus(cv);\n    const updatesAvailable = !_.isEmpty(getAvailableClusterUpdates(cv));\n    return (React.createElement(React.Fragment, null, updatesAvailable &&\n        (status === ClusterUpdateStatus.ErrorRetrieving ||\n            status === ClusterUpdateStatus.Failing ||\n            status === ClusterUpdateStatus.Updating) ? (React.createElement(Button, { variant: \"link\", type: \"button\", onClick: () => clusterUpdateModal({ cv }) }, \"Update to another version\")) : null));\n};\nexport const CurrentVersionHeader = ({ cv }) => {\n    const status = getClusterUpdateStatus(cv);\n    return (React.createElement(React.Fragment, null, status === ClusterUpdateStatus.UpToDate || status === ClusterUpdateStatus.UpdatesAvailable\n        ? 'Current Version'\n        : 'Last Completed Version'));\n};\nexport const ClusterVersionDetailsTable = ({ obj: cv, autoscalers, }) => {\n    const { history = [] } = cv.status;\n    const clusterID = getClusterID(cv);\n    const errataLink = getErrataLink(cv);\n    const desiredImage = _.get(cv, 'status.desired.image') || '';\n    // Split image on `@` to emphasize the digest.\n    const imageParts = desiredImage.split('@');\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(\"div\", { className: \"co-m-pane__body-group\" },\n                React.createElement(\"div\", { className: \"co-detail-table co-detail-table--lg\" },\n                    React.createElement(\"div\", { className: \"co-detail-table__row row\" },\n                        React.createElement(\"div\", { className: \"co-detail-table__section col-sm-4 col-md-3\" },\n                            React.createElement(\"dl\", { className: \"co-m-pane__details\" },\n                                React.createElement(\"dt\", { className: \"co-detail-table__section-header\" }, \"Channel\"),\n                                React.createElement(\"dd\", null,\n                                    React.createElement(CurrentChannel, { cv: cv })))),\n                        React.createElement(\"div\", { className: \"co-detail-table__section col-sm-4 col-md-4\" },\n                            React.createElement(\"dl\", { className: \"co-m-pane__details\" },\n                                React.createElement(\"dt\", { className: \"co-detail-table__section-header\" },\n                                    React.createElement(CurrentVersionHeader, { cv: cv })),\n                                React.createElement(\"dd\", null,\n                                    React.createElement(\"div\", null,\n                                        React.createElement(CurrentVersion, { cv: cv })),\n                                    React.createElement(UpdateLink, { cv: cv })))),\n                        React.createElement(\"div\", { className: \"co-detail-table__section col-sm-4 col-md-4\" },\n                            React.createElement(\"dl\", { className: \"co-m-pane__details\" },\n                                React.createElement(\"dt\", { className: \"co-detail-table__section-header\" }, \"Update Status\"),\n                                React.createElement(\"dd\", null,\n                                    React.createElement(UpdateStatus, { cv: cv }))))))),\n            React.createElement(\"div\", { className: \"co-m-pane__body-group\" },\n                window.SERVER_FLAGS.branding !== 'okd' && window.SERVER_FLAGS.branding !== 'azure' && (React.createElement(\"p\", { className: \"co-m-pane__explanation\" },\n                    \"View this cluster and manage subscription settings in\",\n                    ' ',\n                    React.createElement(ExternalLink, { text: \"OpenShift Cluster Manager\", href: getOCMLink(clusterID) }),\n                    \".\")),\n                React.createElement(\"dl\", { className: \"co-m-pane__details\" },\n                    React.createElement(\"dt\", null, \"Cluster ID\"),\n                    React.createElement(\"dd\", { className: \"co-break-all co-select-to-copy\", \"data-test-id\": \"cv-details-table-cid\" }, clusterID),\n                    React.createElement(\"dt\", null, \"Desired Release Image\"),\n                    React.createElement(\"dd\", { className: \"co-break-all co-select-to-copy\", \"data-test-id\": \"cv-details-table-image\" }, imageParts.length === 2 ? (React.createElement(React.Fragment, null,\n                        React.createElement(\"span\", { className: \"text-muted\" },\n                            imageParts[0],\n                            \"@\"),\n                        imageParts[1])) : (desiredImage || '-')),\n                    React.createElement(\"dt\", null, \"Cluster Version Configuration\"),\n                    React.createElement(\"dd\", null,\n                        React.createElement(ResourceLink, { kind: referenceForModel(ClusterVersionModel), name: cv.metadata.name })),\n                    React.createElement(\"dt\", null, \"Cluster Autoscaler\"),\n                    React.createElement(\"dd\", null, _.isEmpty(autoscalers) ? (React.createElement(Link, { to: `${resourcePathFromModel(ClusterAutoscalerModel)}/~new` },\n                        React.createElement(AddCircleOIcon, { className: \"co-icon-space-r\" }),\n                        \"Create Autoscaler\")) : (autoscalers.map((autoscaler) => (React.createElement(\"div\", { key: autoscaler.metadata.uid },\n                        React.createElement(ResourceLink, { kind: clusterAutoscalerReference, name: autoscaler.metadata.name }))))))))),\n        React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(SectionHeading, { text: \"Update History\" }, errataLink && (React.createElement(\"small\", null,\n                React.createElement(ExternalLink, { text: \"View errata\", href: errataLink })))),\n            _.isEmpty(history) ? (React.createElement(EmptyBox, { label: \"History\" })) : (React.createElement(\"div\", { className: \"co-table-container\" },\n                React.createElement(\"table\", { className: \"table\" },\n                    React.createElement(\"thead\", null,\n                        React.createElement(\"tr\", null,\n                            React.createElement(\"th\", null, \"Version\"),\n                            React.createElement(\"th\", null, \"State\"),\n                            React.createElement(\"th\", null, \"Started\"),\n                            React.createElement(\"th\", null, \"Completed\"))),\n                    React.createElement(\"tbody\", null, _.map(history, (update, i) => (React.createElement(\"tr\", { key: i },\n                        React.createElement(\"td\", { className: \"co-break-all co-select-to-copy\", \"data-test-id\": \"cv-details-table-version\" }, update.version || '-'),\n                        React.createElement(\"td\", { \"data-test-id\": \"cv-details-table-state\" }, update.state || '-'),\n                        React.createElement(\"td\", null,\n                            React.createElement(Timestamp, { timestamp: update.startedTime })),\n                        React.createElement(\"td\", null, update.completionTime ? (React.createElement(Timestamp, { timestamp: update.completionTime })) : ('-'))))))))))));\n};\nexport const ClusterOperatorTabPage = ({ obj: cv }) => (React.createElement(ClusterOperatorPage, { cv: cv, autoFocus: false, showTitle: false }));\nconst pages = [\n    {\n        href: '',\n        name: 'Details',\n        component: ClusterVersionDetailsTable,\n    },\n    {\n        href: 'clusteroperators',\n        name: 'Cluster Operators',\n        component: ClusterOperatorTabPage,\n    },\n    {\n        href: 'globalconfig',\n        name: 'Global Configuration',\n        component: GlobalConfigPage,\n    },\n];\nexport const ClusterSettingsPage = ({ match }) => {\n    const title = 'Cluster Settings';\n    const resources = [\n        { kind: clusterVersionReference, name: 'version', isList: false, prop: 'obj' },\n        { kind: clusterAutoscalerReference, isList: true, prop: 'autoscalers', optional: true },\n    ];\n    const resourceKeys = _.map(resources, 'prop');\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Helmet, null,\n            React.createElement(\"title\", null, title)),\n        React.createElement(\"div\", { className: \"co-m-nav-title\" },\n            React.createElement(\"h1\", { className: \"co-m-pane__heading\", \"data-test-id\": \"cluster-settings-page-heading\" }, title)),\n        React.createElement(Firehose, { resources: resources },\n            React.createElement(HorizontalNav, { pages: pages, match: match, resourceKeys: resourceKeys }))));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/cluster-settings/cluster-settings.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/cluster-settings/cluster-settings.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Helmet } from 'react-helmet';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\n\nimport {\n  AddCircleOIcon,\n  ArrowCircleUpIcon,\n  SyncAltIcon,\n  PencilAltIcon,\n} from '@patternfly/react-icons';\n\nimport { ClusterOperatorPage } from './cluster-operator';\nimport { clusterChannelModal, clusterUpdateModal, errorModal } from '../modals';\nimport { GlobalConfigPage } from './global-config';\nimport { ClusterAutoscalerModel, ClusterVersionModel } from '../../models';\nimport {\n  ClusterUpdateStatus,\n  ClusterVersionConditionType,\n  ClusterVersionKind,\n  clusterVersionReference,\n  getAvailableClusterUpdates,\n  getClusterID,\n  getClusterUpdateStatus,\n  getClusterVersionCondition,\n  getDesiredClusterVersion,\n  getErrataLink,\n  getLastCompletedUpdate,\n  getOCMLink,\n  k8sPatch,\n  K8sResourceConditionStatus,\n  K8sResourceKind,\n  referenceForModel,\n} from '../../module/k8s';\nimport {\n  EmptyBox,\n  ExternalLink,\n  Firehose,\n  HorizontalNav,\n  ResourceLink,\n  resourcePathFromModel,\n  SectionHeading,\n  Timestamp,\n  truncateMiddle,\n} from '../utils';\nimport {\n  GreenCheckCircleIcon,\n  RedExclamationCircleIcon,\n  YellowExclamationTriangleIcon,\n} from '@console/shared';\n\nconst cancelUpdate = (cv: ClusterVersionKind) => {\n  k8sPatch(ClusterVersionModel, cv, [{ path: '/spec/desiredUpdate', op: 'remove' }]).catch(\n    (err) => {\n      const error = err.message;\n      errorModal({ error });\n    },\n  );\n};\n\nexport const clusterAutoscalerReference = referenceForModel(ClusterAutoscalerModel);\n\nexport const CurrentChannel: React.SFC<CurrentChannelProps> = ({ cv }) => (\n  <Button\n    type=\"button\"\n    isInline\n    data-test-id=\"current-channel-update-link\"\n    onClick={() => clusterChannelModal({ cv })}\n    variant=\"link\"\n  >\n    {cv.spec.channel || '-'}\n    <PencilAltIcon className=\"co-icon-space-l pf-c-button-icon--plain\" />\n  </Button>\n);\n\nconst InvalidMessage: React.SFC<CVStatusMessageProps> = ({ cv }) => (\n  <>\n    <div>\n      <RedExclamationCircleIcon /> Invalid cluster version\n    </div>\n    <Button onClick={() => cancelUpdate(cv)} variant=\"primary\">\n      Cancel update\n    </Button>\n  </>\n);\n\nconst UpdatesAvailableMessage: React.SFC<CVStatusMessageProps> = ({ cv }) => (\n  <>\n    <div className=\"co-update-status\">\n      <ArrowCircleUpIcon className=\"update-pending\" /> Update available\n    </div>\n    <div>\n      <Button onClick={() => clusterUpdateModal({ cv })} variant=\"primary\">\n        Update now\n      </Button>\n    </div>\n  </>\n);\n\nconst UpdatingMessage: React.SFC<CVStatusMessageProps> = ({ cv }) => {\n  const updatingCondition = getClusterVersionCondition(\n    cv,\n    ClusterVersionConditionType.Progressing,\n    K8sResourceConditionStatus.True,\n  );\n  return (\n    <>\n      {updatingCondition.message && (\n        <div>\n          <SyncAltIcon className=\"fa-spin\" /> {updatingCondition.message}\n        </div>\n      )}\n      <Link to=\"/settings/cluster/clusteroperators\">View details</Link>\n    </>\n  );\n};\n\nconst ErrorRetrievingMessage: React.SFC<CVStatusMessageProps> = ({ cv }) => {\n  const retrievedUpdatesCondition = getClusterVersionCondition(\n    cv,\n    ClusterVersionConditionType.RetrievedUpdates,\n    K8sResourceConditionStatus.False,\n  );\n  return retrievedUpdatesCondition.reason === 'NoChannel' ? (\n    <span className=\"text-muted\">No update channel selected</span>\n  ) : (\n    <Tooltip content={truncateMiddle(retrievedUpdatesCondition.message, { length: 256 })}>\n      <span>\n        <RedExclamationCircleIcon />{' '}\n        {retrievedUpdatesCondition.reason === 'VersionNotFound'\n          ? 'Version not found'\n          : 'Error retrieving'}\n      </span>\n    </Tooltip>\n  );\n};\n\nconst FailingMessage: React.SFC<CVStatusMessageProps> = ({ cv }) => {\n  const failingCondition = getClusterVersionCondition(\n    cv,\n    ClusterVersionConditionType.Failing,\n    K8sResourceConditionStatus.True,\n  );\n  return (\n    <>\n      <div>\n        <Tooltip content={truncateMiddle(failingCondition.message, { length: 256 })}>\n          <span>\n            <RedExclamationCircleIcon /> Failing\n          </span>\n        </Tooltip>\n      </div>\n      <Link to=\"/settings/cluster/clusteroperators\">View details</Link>\n    </>\n  );\n};\n\nconst UpToDateMessage: React.SFC<{}> = () => (\n  <span>\n    <GreenCheckCircleIcon /> Up to date\n  </span>\n);\n\nexport const UpdateStatus: React.SFC<UpdateStatusProps> = ({ cv }) => {\n  const status = getClusterUpdateStatus(cv);\n  switch (status) {\n    case ClusterUpdateStatus.Invalid:\n      return <InvalidMessage cv={cv} />;\n    case ClusterUpdateStatus.UpdatesAvailable:\n      return <UpdatesAvailableMessage cv={cv} />;\n    case ClusterUpdateStatus.Updating:\n      return <UpdatingMessage cv={cv} />;\n    case ClusterUpdateStatus.ErrorRetrieving:\n      return <ErrorRetrievingMessage cv={cv} />;\n    case ClusterUpdateStatus.Failing:\n      return <FailingMessage cv={cv} />;\n    default:\n      return <UpToDateMessage />;\n  }\n};\n\nexport const CurrentVersion: React.SFC<CurrentVersionProps> = ({ cv }) => {\n  const desiredVersion = getDesiredClusterVersion(cv);\n  const lastVersion = getLastCompletedUpdate(cv);\n  const status = getClusterUpdateStatus(cv);\n\n  if (status === ClusterUpdateStatus.UpToDate || status === ClusterUpdateStatus.UpdatesAvailable) {\n    return desiredVersion ? (\n      <span className=\"co-select-to-copy\">{desiredVersion}</span>\n    ) : (\n      <>\n        <YellowExclamationTriangleIcon />\n        &nbsp;Unknown\n      </>\n    );\n  }\n\n  return lastVersion ? <span className=\"co-select-to-copy\">{lastVersion}</span> : <>None</>;\n};\n\nexport const UpdateLink: React.SFC<CurrentVersionProps> = ({ cv }) => {\n  const status = getClusterUpdateStatus(cv);\n  const updatesAvailable = !_.isEmpty(getAvailableClusterUpdates(cv));\n  return (\n    <>\n      {updatesAvailable &&\n      (status === ClusterUpdateStatus.ErrorRetrieving ||\n        status === ClusterUpdateStatus.Failing ||\n        status === ClusterUpdateStatus.Updating) ? (\n        <Button variant=\"link\" type=\"button\" onClick={() => clusterUpdateModal({ cv })}>\n          Update to another version\n        </Button>\n      ) : null}\n    </>\n  );\n};\n\nexport const CurrentVersionHeader: React.SFC<CurrentVersionProps> = ({ cv }) => {\n  const status = getClusterUpdateStatus(cv);\n  return (\n    <>\n      {status === ClusterUpdateStatus.UpToDate || status === ClusterUpdateStatus.UpdatesAvailable\n        ? 'Current Version'\n        : 'Last Completed Version'}\n    </>\n  );\n};\n\nexport const ClusterVersionDetailsTable: React.SFC<ClusterVersionDetailsTableProps> = ({\n  obj: cv,\n  autoscalers,\n}) => {\n  const { history = [] } = cv.status;\n  const clusterID = getClusterID(cv);\n  const errataLink = getErrataLink(cv);\n  const desiredImage: string = _.get(cv, 'status.desired.image') || '';\n  // Split image on `@` to emphasize the digest.\n  const imageParts = desiredImage.split('@');\n\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <div className=\"co-m-pane__body-group\">\n          <div className=\"co-detail-table co-detail-table--lg\">\n            <div className=\"co-detail-table__row row\">\n              <div className=\"co-detail-table__section col-sm-4 col-md-3\">\n                <dl className=\"co-m-pane__details\">\n                  <dt className=\"co-detail-table__section-header\">Channel</dt>\n                  <dd>\n                    <CurrentChannel cv={cv} />\n                  </dd>\n                </dl>\n              </div>\n              <div className=\"co-detail-table__section col-sm-4 col-md-4\">\n                <dl className=\"co-m-pane__details\">\n                  <dt className=\"co-detail-table__section-header\">\n                    <CurrentVersionHeader cv={cv} />\n                  </dt>\n                  <dd>\n                    <div>\n                      <CurrentVersion cv={cv} />\n                    </div>\n                    <UpdateLink cv={cv} />\n                  </dd>\n                </dl>\n              </div>\n              <div className=\"co-detail-table__section col-sm-4 col-md-4\">\n                <dl className=\"co-m-pane__details\">\n                  <dt className=\"co-detail-table__section-header\">Update Status</dt>\n                  <dd>\n                    <UpdateStatus cv={cv} />\n                  </dd>\n                </dl>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"co-m-pane__body-group\">\n          {window.SERVER_FLAGS.branding !== 'okd' && window.SERVER_FLAGS.branding !== 'azure' && (\n            <p className=\"co-m-pane__explanation\">\n              View this cluster and manage subscription settings in{' '}\n              <ExternalLink text=\"OpenShift Cluster Manager\" href={getOCMLink(clusterID)} />.\n            </p>\n          )}\n          <dl className=\"co-m-pane__details\">\n            <dt>Cluster ID</dt>\n            <dd className=\"co-break-all co-select-to-copy\" data-test-id=\"cv-details-table-cid\">\n              {clusterID}\n            </dd>\n            <dt>Desired Release Image</dt>\n            <dd className=\"co-break-all co-select-to-copy\" data-test-id=\"cv-details-table-image\">\n              {imageParts.length === 2 ? (\n                <>\n                  <span className=\"text-muted\">{imageParts[0]}@</span>\n                  {imageParts[1]}\n                </>\n              ) : (\n                desiredImage || '-'\n              )}\n            </dd>\n            <dt>Cluster Version Configuration</dt>\n            <dd>\n              <ResourceLink kind={referenceForModel(ClusterVersionModel)} name={cv.metadata.name} />\n            </dd>\n            <dt>Cluster Autoscaler</dt>\n            <dd>\n              {_.isEmpty(autoscalers) ? (\n                <Link to={`${resourcePathFromModel(ClusterAutoscalerModel)}/~new`}>\n                  <AddCircleOIcon className=\"co-icon-space-r\" />\n                  Create Autoscaler\n                </Link>\n              ) : (\n                autoscalers.map((autoscaler) => (\n                  <div key={autoscaler.metadata.uid}>\n                    <ResourceLink\n                      kind={clusterAutoscalerReference}\n                      name={autoscaler.metadata.name}\n                    />\n                  </div>\n                ))\n              )}\n            </dd>\n          </dl>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Update History\">\n          {errataLink && (\n            <small>\n              <ExternalLink text=\"View errata\" href={errataLink} />\n            </small>\n          )}\n        </SectionHeading>\n        {_.isEmpty(history) ? (\n          <EmptyBox label=\"History\" />\n        ) : (\n          <div className=\"co-table-container\">\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th>Version</th>\n                  <th>State</th>\n                  <th>Started</th>\n                  <th>Completed</th>\n                </tr>\n              </thead>\n              <tbody>\n                {_.map(history, (update, i) => (\n                  <tr key={i}>\n                    <td\n                      className=\"co-break-all co-select-to-copy\"\n                      data-test-id=\"cv-details-table-version\"\n                    >\n                      {update.version || '-'}\n                    </td>\n                    <td data-test-id=\"cv-details-table-state\">{update.state || '-'}</td>\n                    <td>\n                      <Timestamp timestamp={update.startedTime} />\n                    </td>\n                    <td>\n                      {update.completionTime ? (\n                        <Timestamp timestamp={update.completionTime} />\n                      ) : (\n                        '-'\n                      )}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport const ClusterOperatorTabPage: React.SFC<ClusterOperatorTabPageProps> = ({ obj: cv }) => (\n  <ClusterOperatorPage cv={cv} autoFocus={false} showTitle={false} />\n);\n\nconst pages = [\n  {\n    href: '',\n    name: 'Details',\n    component: ClusterVersionDetailsTable,\n  },\n  {\n    href: 'clusteroperators',\n    name: 'Cluster Operators',\n    component: ClusterOperatorTabPage,\n  },\n  {\n    href: 'globalconfig',\n    name: 'Global Configuration',\n    component: GlobalConfigPage,\n  },\n];\n\nexport const ClusterSettingsPage: React.SFC<ClusterSettingsPageProps> = ({ match }) => {\n  const title = 'Cluster Settings';\n  const resources = [\n    { kind: clusterVersionReference, name: 'version', isList: false, prop: 'obj' },\n    { kind: clusterAutoscalerReference, isList: true, prop: 'autoscalers', optional: true },\n  ];\n  const resourceKeys = _.map(resources, 'prop');\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <div className=\"co-m-nav-title\">\n        <h1 className=\"co-m-pane__heading\" data-test-id=\"cluster-settings-page-heading\">\n          {title}\n        </h1>\n      </div>\n      <Firehose resources={resources}>\n        <HorizontalNav pages={pages} match={match} resourceKeys={resourceKeys} />\n      </Firehose>\n    </>\n  );\n};\n\ntype UpdateStatusProps = {\n  cv: ClusterVersionKind;\n};\n\ntype CVStatusMessageProps = {\n  cv: ClusterVersionKind;\n};\n\ntype CurrentChannelProps = {\n  cv: K8sResourceKind;\n};\n\ntype CurrentVersionProps = {\n  cv: ClusterVersionKind;\n};\n\ntype ClusterVersionDetailsTableProps = {\n  obj: ClusterVersionKind;\n  autoscalers: K8sResourceKind[];\n};\n\ntype ClusterSettingsPageProps = {\n  match: any;\n};\n\ntype ClusterOperatorTabPageProps = {\n  obj: ClusterVersionKind;\n};\n"]}]}