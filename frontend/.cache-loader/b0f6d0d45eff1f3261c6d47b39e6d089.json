{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/resource-link.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/resource-link.tsx","mtime":1616735742480},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport * as classNames from 'classnames';\nimport { FLAGS } from '@console/shared/src/constants';\nimport { ResourceIcon } from './resource-icon';\nimport { modelFor, referenceForModel, } from '../../module/k8s';\nimport { connectToModel } from '../../kinds';\nimport { connectToFlags } from '../../reducers/features';\nconst unknownKinds = new Set();\nexport const resourcePathFromModel = (model, name, namespace) => {\n    const { plural, namespaced, crd } = model;\n    let url = '/k8s/';\n    if (!namespaced) {\n        url += 'cluster/';\n    }\n    if (namespaced) {\n        url += namespace ? `ns/${namespace}/` : 'all-namespaces/';\n    }\n    if (crd) {\n        url += referenceForModel(model);\n    }\n    else if (plural) {\n        url += plural;\n    }\n    if (name) {\n        // Some resources have a name that needs to be encoded. For instance,\n        // Users can have special characters in the name like `#`.\n        url += `/${encodeURIComponent(name)}`;\n    }\n    return url;\n};\nexport const resourceListPathFromModel = (model, namespace) => resourcePathFromModel(model, null, namespace);\n/**\n * NOTE: This will not work for runtime-defined resources. Use a `connect`-ed component like `ResourceLink` instead.\n */\nexport const resourcePath = (kind, name, namespace) => {\n    const model = modelFor(kind);\n    if (!model) {\n        if (!unknownKinds.has(kind)) {\n            unknownKinds.add(kind);\n            // eslint-disable-next-line no-console\n            console.error(`resourcePath: no model for \"${kind}\"`);\n        }\n        return;\n    }\n    return resourcePathFromModel(model, name, namespace);\n};\nexport const resourceObjPath = (obj, kind) => resourcePath(kind, _.get(obj, 'metadata.name'), _.get(obj, 'metadata.namespace'));\nexport const ResourceLink = connectToModel(({ className, displayName, inline = false, kind, linkTo = true, name, namespace, hideIcon, title, children, }) => {\n    if (!kind) {\n        return null;\n    }\n    const path = resourcePath(kind, name, namespace);\n    const value = displayName ? displayName : name;\n    const classes = classNames('co-resource-item', className, {\n        'co-resource-item--inline': inline,\n    });\n    return (React.createElement(\"span\", { className: classes },\n        !hideIcon && React.createElement(ResourceIcon, { kind: kind }),\n        path && linkTo ? (React.createElement(Link, { to: path, title: title, className: \"co-resource-item__resource-name\", \"data-test-id\": value }, value)) : (React.createElement(\"span\", { className: \"co-resource-item__resource-name\", \"data-test-id\": value }, value)),\n        children));\n});\nconst NodeLink_ = (props) => {\n    const { name, flags } = props;\n    if (!name) {\n        return React.createElement(React.Fragment, null, \"-\");\n    }\n    return flags[FLAGS.CAN_LIST_NODE] ? (React.createElement(ResourceLink, { kind: \"Node\", name: name, title: name })) : (React.createElement(\"span\", { className: \"co-break-word\" }, name));\n};\nexport const NodeLink = connectToFlags(FLAGS.CAN_LIST_NODE)(NodeLink_);\nResourceLink.displayName = 'ResourceLink';\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/resource-link.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/resource-link.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport * as classNames from 'classnames';\n\nimport { FLAGS } from '@console/shared/src/constants';\nimport { ResourceIcon } from './resource-icon';\nimport {\n  modelFor,\n  referenceForModel,\n  K8sKind,\n  K8sResourceKindReference,\n  K8sResourceKind,\n} from '../../module/k8s';\nimport { connectToModel } from '../../kinds';\nimport { connectToFlags, FlagsObject } from '../../reducers/features';\n\nconst unknownKinds = new Set();\n\nexport const resourcePathFromModel = (model: K8sKind, name?: string, namespace?: string) => {\n  const { plural, namespaced, crd } = model;\n\n  let url = '/k8s/';\n\n  if (!namespaced) {\n    url += 'cluster/';\n  }\n\n  if (namespaced) {\n    url += namespace ? `ns/${namespace}/` : 'all-namespaces/';\n  }\n\n  if (crd) {\n    url += referenceForModel(model);\n  } else if (plural) {\n    url += plural;\n  }\n\n  if (name) {\n    // Some resources have a name that needs to be encoded. For instance,\n    // Users can have special characters in the name like `#`.\n    url += `/${encodeURIComponent(name)}`;\n  }\n\n  return url;\n};\n\nexport const resourceListPathFromModel = (model: K8sKind, namespace: string) =>\n  resourcePathFromModel(model, null, namespace);\n\n/**\n * NOTE: This will not work for runtime-defined resources. Use a `connect`-ed component like `ResourceLink` instead.\n */\nexport const resourcePath = (kind: K8sResourceKindReference, name?: string, namespace?: string) => {\n  const model = modelFor(kind);\n  if (!model) {\n    if (!unknownKinds.has(kind)) {\n      unknownKinds.add(kind);\n      // eslint-disable-next-line no-console\n      console.error(`resourcePath: no model for \"${kind}\"`);\n    }\n    return;\n  }\n\n  return resourcePathFromModel(model, name, namespace);\n};\n\nexport const resourceObjPath = (obj: K8sResourceKind, kind: K8sResourceKindReference) =>\n  resourcePath(kind, _.get(obj, 'metadata.name'), _.get(obj, 'metadata.namespace'));\n\nexport const ResourceLink = connectToModel(\n  ({\n    className,\n    displayName,\n    inline = false,\n    kind,\n    linkTo = true,\n    name,\n    namespace,\n    hideIcon,\n    title,\n    children,\n  }) => {\n    if (!kind) {\n      return null;\n    }\n    const path = resourcePath(kind, name, namespace);\n    const value = displayName ? displayName : name;\n    const classes = classNames('co-resource-item', className, {\n      'co-resource-item--inline': inline,\n    });\n\n    return (\n      <span className={classes}>\n        {!hideIcon && <ResourceIcon kind={kind} />}\n        {path && linkTo ? (\n          <Link\n            to={path}\n            title={title}\n            className=\"co-resource-item__resource-name\"\n            data-test-id={value}\n          >\n            {value}\n          </Link>\n        ) : (\n          <span className=\"co-resource-item__resource-name\" data-test-id={value}>\n            {value}\n          </span>\n        )}\n        {children}\n      </span>\n    );\n  },\n);\n\nconst NodeLink_: React.FC<NodeLinkProps> = (props) => {\n  const { name, flags } = props;\n  if (!name) {\n    return <>-</>;\n  }\n  return flags[FLAGS.CAN_LIST_NODE] ? (\n    <ResourceLink kind=\"Node\" name={name} title={name} />\n  ) : (\n    <span className=\"co-break-word\">{name}</span>\n  );\n};\n\nexport const NodeLink = connectToFlags<NodeLinkProps>(FLAGS.CAN_LIST_NODE)(NodeLink_);\n\ntype NodeLinkProps = {\n  name: string;\n  flags: FlagsObject;\n};\n\nResourceLink.displayName = 'ResourceLink';\n"]}]}