{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/git-service/src/services/base-service.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/git-service/src/services/base-service.ts","mtime":1616735742400},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { detectBuildTypes, isModernWebApp } from '../utils';\nexport class BaseService {\n    constructor(gitsource) {\n        this.gitsource = gitsource;\n    }\n    /**\n     * Detect build types for given gitsource, It runs regular expressions on file list\n     * and returns list of build types matched.\n     */\n    detectBuildTypes() {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                const fileList = yield this.getRepoFileList();\n                const buildTypes = detectBuildTypes(fileList.files);\n                if (fileList.files.includes('package.json')) {\n                    const packageJsonContent = yield this.getPackageJsonContent();\n                    if (isModernWebApp(packageJsonContent)) {\n                        return buildTypes.sort((a, b) => {\n                            if (b.buildType === 'modern-webapp')\n                                return 1;\n                            if (a.buildType === 'modern-webapp')\n                                return -1;\n                            return 0;\n                        });\n                    }\n                }\n                return buildTypes;\n            }\n            catch (e) {\n                return [];\n            }\n        });\n    }\n}\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/git-service/src/services/base-service.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/git-service/src/services/base-service.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,gBAAgB,EAAE,cAAc,EAAE,MAAM,UAAU,CAAC;AAU5D,MAAM,OAAgB,WAAW;IAG/B,YAAY,SAAoB;QAC9B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;IAC7B,CAAC;IA+CD;;;OAGG;IACG,gBAAgB;;YACpB,IAAI;gBACF,MAAM,QAAQ,GAAG,MAAM,IAAI,CAAC,eAAe,EAAE,CAAC;gBAC9C,MAAM,UAAU,GAAG,gBAAgB,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;gBACpD,IAAI,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,cAAc,CAAC,EAAE;oBAC3C,MAAM,kBAAkB,GAAG,MAAM,IAAI,CAAC,qBAAqB,EAAE,CAAC;oBAC9D,IAAI,cAAc,CAAC,kBAAkB,CAAC,EAAE;wBACtC,OAAO,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;4BAC9B,IAAI,CAAC,CAAC,SAAS,KAAK,eAAe;gCAAE,OAAO,CAAC,CAAC;4BAC9C,IAAI,CAAC,CAAC,SAAS,KAAK,eAAe;gCAAE,OAAO,CAAC,CAAC,CAAC;4BAC/C,OAAO,CAAC,CAAC;wBACX,CAAC,CAAC,CAAC;qBACJ;iBACF;gBACD,OAAO,UAAU,CAAC;aACnB;YAAC,OAAO,CAAC,EAAE;gBACV,OAAO,EAAE,CAAC;aACX;QACH,CAAC;KAAA;CACF","sourcesContent":["import { detectBuildTypes, isModernWebApp } from '../utils';\nimport {\n  BranchList,\n  BuildType,\n  GitSource,\n  RepoFileList,\n  RepoLanguageList,\n  RepoMetadata,\n} from '../types';\n\nexport abstract class BaseService {\n  protected gitsource: GitSource;\n\n  constructor(gitsource: GitSource) {\n    this.gitsource = gitsource;\n  }\n\n  /**\n   * Fetch metadata of the repository.\n   */\n  protected abstract getRepoMetadata(): RepoMetadata;\n\n  /**\n   * Get the auth providor for the git service.\n   */\n  protected abstract getAuthProvider(): any;\n\n  /**\n   * Returns if repo reachable or not along with the api response.\n   */\n  abstract async isRepoReachable(): Promise<boolean>;\n\n  /**\n   * Returns list of branches for given gitsource.\n   */\n  abstract async getRepoBranchList(): Promise<BranchList>;\n\n  /**\n   * Returns source code tree for given gitsource\n   */\n  abstract async getRepoFileList(): Promise<RepoFileList>;\n\n  /**\n   * Returns list of detected languages.\n   */\n  abstract async getRepoLanguageList(): Promise<RepoLanguageList>;\n\n  /**\n   * Check if Dockerfile present in the repo.\n   */\n  abstract async isDockerfilePresent(): Promise<boolean>;\n\n  /**\n   * Checks if dockerfile exist in the repo and returns dockerfile content\n   */\n  abstract async getDockerfileContent(): Promise<string>;\n\n  /**\n   * Checks if package.json exist in the repo and returns content of the file.\n   */\n  abstract async getPackageJsonContent(): Promise<string>;\n\n  /**\n   * Detect build types for given gitsource, It runs regular expressions on file list\n   * and returns list of build types matched.\n   */\n  async detectBuildTypes(): Promise<BuildType[]> {\n    try {\n      const fileList = await this.getRepoFileList();\n      const buildTypes = detectBuildTypes(fileList.files);\n      if (fileList.files.includes('package.json')) {\n        const packageJsonContent = await this.getPackageJsonContent();\n        if (isModernWebApp(packageJsonContent)) {\n          return buildTypes.sort((a, b) => {\n            if (b.buildType === 'modern-webapp') return 1;\n            if (a.buildType === 'modern-webapp') return -1;\n            return 0;\n          });\n        }\n      }\n      return buildTypes;\n    } catch (e) {\n      return [];\n    }\n  }\n}\n"]}]}