{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/dashboard/dashboards-page/cluster-dashboard/details-card.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/dashboard/dashboards-page/cluster-dashboard/details-card.tsx","mtime":1615793099690},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\nimport { ArrowCircleUpIcon, InProgressIcon } from '@patternfly/react-icons';\nimport { FLAGS, getInfrastructureAPIURL, getInfrastructurePlatform } from '@console/shared';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport DetailsBody from '@console/shared/src/components/dashboard/details-card/DetailsBody';\nimport DetailItem from '@console/shared/src/components/dashboard/details-card/DetailItem';\nimport { withDashboardResources } from '../../with-dashboard-resources';\nimport { ClusterVersionModel } from '../../../../models';\nimport { referenceForModel, getOpenShiftVersion, getK8sGitVersion, getClusterID, getDesiredClusterVersion, getLastCompletedUpdate, getClusterUpdateStatus, getClusterVersionChannel, ClusterUpdateStatus, getOCMLink } from '../../../../module/k8s';\nimport { flagPending, featureReducerName } from '../../../../reducers/features';\nimport { ExternalLink } from '../../../utils';\nimport { clusterUpdateModal } from '../../../modals';\nimport { Link } from 'react-router-dom';\nimport { useK8sWatchResource } from '../../../utils/k8s-watch-hook';\nimport { ClusterDashboardContext } from './context';\nimport { getAccessToken } from '../../../../hypercloud/auth';\nimport { getActivePerspective, getActiveCluster } from '../../../../actions/ui';\nimport { useTranslation } from 'react-i18next';\nconst ClusterVersion = ({ cv }) => {\n    const desiredVersion = getDesiredClusterVersion(cv);\n    const lastVersion = getLastCompletedUpdate(cv);\n    const status = getClusterUpdateStatus(cv);\n    switch (status) {\n        case ClusterUpdateStatus.Updating:\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"span\", { className: \"co-select-to-copy\" }, desiredVersion),\n                React.createElement(\"div\", null,\n                    React.createElement(Link, { to: \"/settings/cluster/\" },\n                        React.createElement(InProgressIcon, { className: \"co-icon-and-text__icon\" }),\n                        \"Updating\"))));\n        case ClusterUpdateStatus.UpdatesAvailable:\n            return (React.createElement(React.Fragment, null,\n                React.createElement(\"span\", { className: \"co-select-to-copy\" }, desiredVersion),\n                React.createElement(\"div\", null,\n                    React.createElement(Button, { variant: \"link\", className: \"btn-link--no-btn-default-values\", onClick: () => clusterUpdateModal({ cv }), icon: React.createElement(ArrowCircleUpIcon, null), isInline: true }, \"Update\"))));\n        default:\n            return lastVersion ? React.createElement(\"span\", { className: \"co-select-to-copy\" }, lastVersion) : React.createElement(\"span\", { className: \"text-secondary\" }, \"Not available\");\n    }\n};\nconst clusterVersionResource = {\n    kind: referenceForModel(ClusterVersionModel),\n    namespaced: false,\n    name: 'version',\n    isList: false,\n};\nconst mapStateToProps = (state) => ({\n    openshiftFlag: state[featureReducerName].get(FLAGS.OPENSHIFT),\n});\nexport const DetailsCard_ = connect(mapStateToProps)(({ watchK8sResource, stopWatchK8sResource, openshiftFlag }) => {\n    const { infrastructure, infrastructureLoaded, infrastructureError } = React.useContext(ClusterDashboardContext);\n    const [k8sVersion, setK8sVersion] = React.useState();\n    const [k8sVersionError, setK8sVersionError] = React.useState();\n    const { t } = useTranslation();\n    const [clusterVersionData, clusterVersionLoaded, clusterVersionError] = useK8sWatchResource(clusterVersionResource);\n    React.useEffect(() => {\n        if (flagPending(openshiftFlag)) {\n            return;\n        }\n        const fetchK8sVersion = () => __awaiter(void 0, void 0, void 0, function* () {\n            let url;\n            let headers;\n            if (getActivePerspective() === 'master') {\n                url = 'api/kubernetes/version';\n            }\n            else {\n                url = `api/${getActiveCluster()}/version`;\n                headers = new Headers();\n                headers.append('Authorization', `Bearer ${getAccessToken()}`);\n            }\n            try {\n                let version = yield (yield fetch(url)).json();\n                setK8sVersion(version);\n            }\n            catch (error) {\n                setK8sVersionError(error);\n            }\n        });\n        fetchK8sVersion();\n    }, [openshiftFlag, watchK8sResource, stopWatchK8sResource]);\n    const clusterId = getClusterID(clusterVersionData);\n    const openShiftVersion = getOpenShiftVersion(clusterVersionData);\n    const cvChannel = getClusterVersionChannel(clusterVersionData);\n    const infrastructurePlatform = getInfrastructurePlatform(infrastructure);\n    const infrastuctureApiUrl = getInfrastructureAPIURL(infrastructure);\n    const k8sGitVersion = getK8sGitVersion(k8sVersion);\n    return (React.createElement(DashboardCard, { \"data-test-id\": \"details-card\" },\n        React.createElement(DashboardCardHeader, null,\n            React.createElement(DashboardCardTitle, null, t('COMMON:MSG_DETAILS_TAB_1'))),\n        React.createElement(DashboardCardBody, { isLoading: flagPending(openshiftFlag) },\n            React.createElement(DetailsBody, null, openshiftFlag ? (React.createElement(React.Fragment, null,\n                React.createElement(DetailItem, { title: \"Cluster API address\", isLoading: !infrastructureLoaded, error: !!infrastructureError || (infrastructure && !infrastuctureApiUrl), valueClassName: \"co-select-to-copy\" }, infrastuctureApiUrl),\n                React.createElement(DetailItem, { title: \"Cluster ID\", error: !!clusterVersionError || (clusterVersionLoaded && !clusterId), isLoading: !clusterVersionLoaded },\n                    React.createElement(\"div\", { className: \"co-select-to-copy\" }, clusterId),\n                    window.SERVER_FLAGS.branding !== 'okd' && window.SERVER_FLAGS.branding !== 'azure' && React.createElement(ExternalLink, { text: \"OpenShift Cluster Manager\", href: getOCMLink(clusterId) })),\n                React.createElement(DetailItem, { title: \"Provider\", error: !!infrastructureError || (infrastructure && !infrastructurePlatform), isLoading: !infrastructureLoaded, valueClassName: \"co-select-to-copy\" }, infrastructurePlatform),\n                React.createElement(DetailItem, { title: \"OpenShift version\", error: !!clusterVersionError || (clusterVersionLoaded && !openShiftVersion), isLoading: !clusterVersionLoaded },\n                    React.createElement(ClusterVersion, { cv: clusterVersionData })),\n                React.createElement(DetailItem, { title: \"Update channel\", isLoading: !clusterVersionLoaded && !clusterVersionError, error: !!clusterVersionError || (clusterVersionLoaded && !cvChannel), valueClassName: \"co-select-to-copy\" }, cvChannel))) : (React.createElement(DetailItem, { key: \"kubernetes\", title: t('SINGLE:MSG_OVERVIEW_MAIN_CARDDETAILS_1'), error: !!k8sVersionError || (k8sVersion && !k8sGitVersion), isLoading: !k8sVersion, valueClassName: \"co-select-to-copy\" }, k8sGitVersion))))));\n});\nexport const DetailsCard = withDashboardResources(DetailsCard_);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/dashboard/dashboards-page/cluster-dashboard/details-card.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/dashboard/dashboards-page/cluster-dashboard/details-card.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AACtC,OAAO,EAAE,MAAM,EAAE,MAAM,wBAAwB,CAAC;AAChD,OAAO,EAAE,iBAAiB,EAAE,cAAc,EAAE,MAAM,yBAAyB,CAAC;AAC5E,OAAO,EAAE,KAAK,EAAE,uBAAuB,EAAE,yBAAyB,EAAE,MAAM,iBAAiB,CAAC;AAC5F,OAAO,aAAa,MAAM,uEAAuE,CAAC;AAClG,OAAO,iBAAiB,MAAM,2EAA2E,CAAC;AAC1G,OAAO,mBAAmB,MAAM,6EAA6E,CAAC;AAC9G,OAAO,kBAAkB,MAAM,4EAA4E,CAAC;AAC5G,OAAO,WAAW,MAAM,mEAAmE,CAAC;AAC5F,OAAO,UAAU,MAAM,kEAAkE,CAAC;AAC1F,OAAO,EAAsB,sBAAsB,EAAE,MAAM,gCAAgC,CAAC;AAC5F,OAAO,EAAE,mBAAmB,EAAE,MAAM,oBAAoB,CAAC;AACzD,OAAO,EAAE,iBAAiB,EAAE,mBAAmB,EAAE,gBAAgB,EAAsB,YAAY,EAAE,wBAAwB,EAAE,sBAAsB,EAAE,sBAAsB,EAAE,wBAAwB,EAAE,mBAAmB,EAAE,UAAU,EAAE,MAAM,wBAAwB,CAAC;AACzQ,OAAO,EAAE,WAAW,EAAE,kBAAkB,EAAE,MAAM,+BAA+B,CAAC;AAChF,OAAO,EAAE,YAAY,EAAE,MAAM,gBAAgB,CAAC;AAE9C,OAAO,EAAE,kBAAkB,EAAE,MAAM,iBAAiB,CAAC;AACrD,OAAO,EAAE,IAAI,EAAE,MAAM,kBAAkB,CAAC;AACxC,OAAO,EAAE,mBAAmB,EAAoB,MAAM,+BAA+B,CAAC;AACtF,OAAO,EAAE,uBAAuB,EAAE,MAAM,WAAW,CAAC;AACpD,OAAO,EAAE,cAAc,EAAE,MAAM,6BAA6B,CAAC;AAC7D,OAAO,EAAE,oBAAoB,EAAE,gBAAgB,EAAE,MAAM,wBAAwB,CAAC;AAChF,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;AAE/C,MAAM,cAAc,GAAkC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE;IAC/D,MAAM,cAAc,GAAG,wBAAwB,CAAC,EAAE,CAAC,CAAC;IACpD,MAAM,WAAW,GAAG,sBAAsB,CAAC,EAAE,CAAC,CAAC;IAC/C,MAAM,MAAM,GAAG,sBAAsB,CAAC,EAAE,CAAC,CAAC;IAE1C,QAAQ,MAAM,EAAE;QACd,KAAK,mBAAmB,CAAC,QAAQ;YAC/B,OAAO,CACL;gBACE,8BAAM,SAAS,EAAC,mBAAmB,IAAE,cAAc,CAAQ;gBAC3D;oBACE,oBAAC,IAAI,IAAC,EAAE,EAAC,oBAAoB;wBAC3B,oBAAC,cAAc,IAAC,SAAS,EAAC,wBAAwB,GAAG;mCAEhD,CACH,CACL,CACJ,CAAC;QACJ,KAAK,mBAAmB,CAAC,gBAAgB;YACvC,OAAO,CACL;gBACE,8BAAM,SAAS,EAAC,mBAAmB,IAAE,cAAc,CAAQ;gBAC3D;oBACE,oBAAC,MAAM,IAAC,OAAO,EAAC,MAAM,EAAC,SAAS,EAAC,iCAAiC,EAAC,OAAO,EAAE,GAAG,EAAE,CAAC,kBAAkB,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,IAAI,EAAE,oBAAC,iBAAiB,OAAG,EAAE,QAAQ,mBAE1I,CACL,CACL,CACJ,CAAC;QACJ;YACE,OAAO,WAAW,CAAC,CAAC,CAAC,8BAAM,SAAS,EAAC,mBAAmB,IAAE,WAAW,CAAQ,CAAC,CAAC,CAAC,8BAAM,SAAS,EAAC,gBAAgB,oBAAqB,CAAC;KACzI;AACH,CAAC,CAAC;AAEF,MAAM,sBAAsB,GAAqB;IAC/C,IAAI,EAAE,iBAAiB,CAAC,mBAAmB,CAAC;IAC5C,UAAU,EAAE,KAAK;IACjB,IAAI,EAAE,SAAS;IACf,MAAM,EAAE,KAAK;CACd,CAAC;AAEF,MAAM,eAAe,GAAG,CAAC,KAAgB,EAAE,EAAE,CAAC,CAAC;IAC7C,aAAa,EAAE,KAAK,CAAC,kBAAkB,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,SAAS,CAAC;CAC9D,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,YAAY,GAAG,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,gBAAgB,EAAE,oBAAoB,EAAE,aAAa,EAAoB,EAAE,EAAE;IACnI,MAAM,EAAE,cAAc,EAAE,oBAAoB,EAAE,mBAAmB,EAAE,GAAG,KAAK,CAAC,UAAU,CAAC,uBAAuB,CAAC,CAAC;IAChH,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,KAAK,CAAC,QAAQ,EAAY,CAAC;IAC/D,MAAM,CAAC,eAAe,EAAE,kBAAkB,CAAC,GAAG,KAAK,CAAC,QAAQ,EAAE,CAAC;IAC/D,MAAM,EAAE,CAAC,EAAE,GAAG,cAAc,EAAE,CAAC;IAC/B,MAAM,CAAC,kBAAkB,EAAE,oBAAoB,EAAE,mBAAmB,CAAC,GAAG,mBAAmB,CAAqB,sBAAsB,CAAC,CAAC;IACxI,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,IAAI,WAAW,CAAC,aAAa,CAAC,EAAE;YAC9B,OAAO;SACR;QACD,MAAM,eAAe,GAAG,GAAS,EAAE;YACjC,IAAI,GAAG,CAAC;YACR,IAAI,OAAO,CAAC;YACZ,IAAI,oBAAoB,EAAE,KAAK,QAAQ,EAAE;gBACvC,GAAG,GAAG,wBAAwB,CAAC;aAChC;iBAAM;gBACL,GAAG,GAAG,OAAO,gBAAgB,EAAE,UAAU,CAAC;gBAC1C,OAAO,GAAG,IAAI,OAAO,EAAE,CAAC;gBACxB,OAAO,CAAC,MAAM,CAAC,eAAe,EAAE,UAAU,cAAc,EAAE,EAAE,CAAC,CAAC;aAC/D;YACD,IAAI;gBACF,IAAI,OAAO,GAAG,MAAM,CAAC,MAAM,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;gBAC9C,aAAa,CAAC,OAAO,CAAC,CAAC;aACxB;YAAC,OAAO,KAAK,EAAE;gBACd,kBAAkB,CAAC,KAAK,CAAC,CAAC;aAC3B;QACH,CAAC,CAAA,CAAC;QACF,eAAe,EAAE,CAAC;IACpB,CAAC,EAAE,CAAC,aAAa,EAAE,gBAAgB,EAAE,oBAAoB,CAAC,CAAC,CAAC;IAE5D,MAAM,SAAS,GAAG,YAAY,CAAC,kBAAkB,CAAC,CAAC;IACnD,MAAM,gBAAgB,GAAG,mBAAmB,CAAC,kBAAkB,CAAC,CAAC;IACjE,MAAM,SAAS,GAAG,wBAAwB,CAAC,kBAAkB,CAAC,CAAC;IAE/D,MAAM,sBAAsB,GAAG,yBAAyB,CAAC,cAAc,CAAC,CAAC;IACzE,MAAM,mBAAmB,GAAG,uBAAuB,CAAC,cAAc,CAAC,CAAC;IAEpE,MAAM,aAAa,GAAG,gBAAgB,CAAC,UAAU,CAAC,CAAC;IAEnD,OAAO,CACL,oBAAC,aAAa,oBAAc,cAAc;QACxC,oBAAC,mBAAmB;YAClB,oBAAC,kBAAkB,QAAE,CAAC,CAAC,0BAA0B,CAAC,CAAsB,CAEpD;QACtB,oBAAC,iBAAiB,IAAC,SAAS,EAAE,WAAW,CAAC,aAAa,CAAC;YACtD,oBAAC,WAAW,QACT,aAAa,CAAC,CAAC,CAAC,CACf;gBACE,oBAAC,UAAU,IAAC,KAAK,EAAC,qBAAqB,EAAC,SAAS,EAAE,CAAC,oBAAoB,EAAE,KAAK,EAAE,CAAC,CAAC,mBAAmB,IAAI,CAAC,cAAc,IAAI,CAAC,mBAAmB,CAAC,EAAE,cAAc,EAAC,mBAAmB,IACnL,mBAAmB,CACT;gBACb,oBAAC,UAAU,IAAC,KAAK,EAAC,YAAY,EAAC,KAAK,EAAE,CAAC,CAAC,mBAAmB,IAAI,CAAC,oBAAoB,IAAI,CAAC,SAAS,CAAC,EAAE,SAAS,EAAE,CAAC,oBAAoB;oBACnI,6BAAK,SAAS,EAAC,mBAAmB,IAAE,SAAS,CAAO;oBACnD,MAAM,CAAC,YAAY,CAAC,QAAQ,KAAK,KAAK,IAAI,MAAM,CAAC,YAAY,CAAC,QAAQ,KAAK,OAAO,IAAI,oBAAC,YAAY,IAAC,IAAI,EAAC,2BAA2B,EAAC,IAAI,EAAE,UAAU,CAAC,SAAS,CAAC,GAAI,CAC1J;gBACb,oBAAC,UAAU,IAAC,KAAK,EAAC,UAAU,EAAC,KAAK,EAAE,CAAC,CAAC,mBAAmB,IAAI,CAAC,cAAc,IAAI,CAAC,sBAAsB,CAAC,EAAE,SAAS,EAAE,CAAC,oBAAoB,EAAE,cAAc,EAAC,mBAAmB,IAC3K,sBAAsB,CACZ;gBACb,oBAAC,UAAU,IAAC,KAAK,EAAC,mBAAmB,EAAC,KAAK,EAAE,CAAC,CAAC,mBAAmB,IAAI,CAAC,oBAAoB,IAAI,CAAC,gBAAgB,CAAC,EAAE,SAAS,EAAE,CAAC,oBAAoB;oBACjJ,oBAAC,cAAc,IAAC,EAAE,EAAE,kBAAkB,GAAI,CAC/B;gBACb,oBAAC,UAAU,IAAC,KAAK,EAAC,gBAAgB,EAAC,SAAS,EAAE,CAAC,oBAAoB,IAAI,CAAC,mBAAmB,EAAE,KAAK,EAAE,CAAC,CAAC,mBAAmB,IAAI,CAAC,oBAAoB,IAAI,CAAC,SAAS,CAAC,EAAE,cAAc,EAAC,mBAAmB,IAClM,SAAS,CACC,CACZ,CACJ,CAAC,CAAC,CAAC,CACF,oBAAC,UAAU,IAAC,GAAG,EAAC,YAAY,EAAC,KAAK,EAAE,CAAC,CAAC,wCAAwC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,eAAe,IAAI,CAAC,UAAU,IAAI,CAAC,aAAa,CAAC,EAAE,SAAS,EAAE,CAAC,UAAU,EAAE,cAAc,EAAC,mBAAmB,IACpM,aAAa,CACH,CACd,CACW,CACI,CACN,CACjB,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,WAAW,GAAG,sBAAsB,CAAC,YAAY,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\nimport { ArrowCircleUpIcon, InProgressIcon } from '@patternfly/react-icons';\nimport { FLAGS, getInfrastructureAPIURL, getInfrastructurePlatform } from '@console/shared';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport DetailsBody from '@console/shared/src/components/dashboard/details-card/DetailsBody';\nimport DetailItem from '@console/shared/src/components/dashboard/details-card/DetailItem';\nimport { DashboardItemProps, withDashboardResources } from '../../with-dashboard-resources';\nimport { ClusterVersionModel } from '../../../../models';\nimport { referenceForModel, getOpenShiftVersion, getK8sGitVersion, ClusterVersionKind, getClusterID, getDesiredClusterVersion, getLastCompletedUpdate, getClusterUpdateStatus, getClusterVersionChannel, ClusterUpdateStatus, getOCMLink } from '../../../../module/k8s';\nimport { flagPending, featureReducerName } from '../../../../reducers/features';\nimport { ExternalLink } from '../../../utils';\nimport { RootState } from '../../../../redux';\nimport { clusterUpdateModal } from '../../../modals';\nimport { Link } from 'react-router-dom';\nimport { useK8sWatchResource, WatchK8sResource } from '../../../utils/k8s-watch-hook';\nimport { ClusterDashboardContext } from './context';\nimport { getAccessToken } from '../../../../hypercloud/auth';\nimport { getActivePerspective, getActiveCluster } from '../../../../actions/ui';\nimport { useTranslation } from 'react-i18next';\n\nconst ClusterVersion: React.FC<ClusterVersionProps> = ({ cv }) => {\n  const desiredVersion = getDesiredClusterVersion(cv);\n  const lastVersion = getLastCompletedUpdate(cv);\n  const status = getClusterUpdateStatus(cv);\n\n  switch (status) {\n    case ClusterUpdateStatus.Updating:\n      return (\n        <>\n          <span className=\"co-select-to-copy\">{desiredVersion}</span>\n          <div>\n            <Link to=\"/settings/cluster/\">\n              <InProgressIcon className=\"co-icon-and-text__icon\" />\n              Updating\n            </Link>\n          </div>\n        </>\n      );\n    case ClusterUpdateStatus.UpdatesAvailable:\n      return (\n        <>\n          <span className=\"co-select-to-copy\">{desiredVersion}</span>\n          <div>\n            <Button variant=\"link\" className=\"btn-link--no-btn-default-values\" onClick={() => clusterUpdateModal({ cv })} icon={<ArrowCircleUpIcon />} isInline>\n              Update\n            </Button>\n          </div>\n        </>\n      );\n    default:\n      return lastVersion ? <span className=\"co-select-to-copy\">{lastVersion}</span> : <span className=\"text-secondary\">Not available</span>;\n  }\n};\n\nconst clusterVersionResource: WatchK8sResource = {\n  kind: referenceForModel(ClusterVersionModel),\n  namespaced: false,\n  name: 'version',\n  isList: false,\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  openshiftFlag: state[featureReducerName].get(FLAGS.OPENSHIFT),\n});\n\nexport const DetailsCard_ = connect(mapStateToProps)(({ watchK8sResource, stopWatchK8sResource, openshiftFlag }: DetailsCardProps) => {\n  const { infrastructure, infrastructureLoaded, infrastructureError } = React.useContext(ClusterDashboardContext);\n  const [k8sVersion, setK8sVersion] = React.useState<Response>();\n  const [k8sVersionError, setK8sVersionError] = React.useState();\n  const { t } = useTranslation();\n  const [clusterVersionData, clusterVersionLoaded, clusterVersionError] = useK8sWatchResource<ClusterVersionKind>(clusterVersionResource);\n  React.useEffect(() => {\n    if (flagPending(openshiftFlag)) {\n      return;\n    }\n    const fetchK8sVersion = async () => {\n      let url;\n      let headers;\n      if (getActivePerspective() === 'master') {\n        url = 'api/kubernetes/version';\n      } else {\n        url = `api/${getActiveCluster()}/version`;\n        headers = new Headers();\n        headers.append('Authorization', `Bearer ${getAccessToken()}`);\n      }\n      try {\n        let version = await (await fetch(url)).json();\n        setK8sVersion(version);\n      } catch (error) {\n        setK8sVersionError(error);\n      }\n    };\n    fetchK8sVersion();\n  }, [openshiftFlag, watchK8sResource, stopWatchK8sResource]);\n\n  const clusterId = getClusterID(clusterVersionData);\n  const openShiftVersion = getOpenShiftVersion(clusterVersionData);\n  const cvChannel = getClusterVersionChannel(clusterVersionData);\n\n  const infrastructurePlatform = getInfrastructurePlatform(infrastructure);\n  const infrastuctureApiUrl = getInfrastructureAPIURL(infrastructure);\n\n  const k8sGitVersion = getK8sGitVersion(k8sVersion);\n\n  return (\n    <DashboardCard data-test-id=\"details-card\">\n      <DashboardCardHeader>\n        <DashboardCardTitle>{t('COMMON:MSG_DETAILS_TAB_1')}</DashboardCardTitle>\n        {/* <DashboardCardLink to=\"/settings/cluster/\">View settings</DashboardCardLink> */}\n      </DashboardCardHeader>\n      <DashboardCardBody isLoading={flagPending(openshiftFlag)}>\n        <DetailsBody>\n          {openshiftFlag ? (\n            <>\n              <DetailItem title=\"Cluster API address\" isLoading={!infrastructureLoaded} error={!!infrastructureError || (infrastructure && !infrastuctureApiUrl)} valueClassName=\"co-select-to-copy\">\n                {infrastuctureApiUrl}\n              </DetailItem>\n              <DetailItem title=\"Cluster ID\" error={!!clusterVersionError || (clusterVersionLoaded && !clusterId)} isLoading={!clusterVersionLoaded}>\n                <div className=\"co-select-to-copy\">{clusterId}</div>\n                {window.SERVER_FLAGS.branding !== 'okd' && window.SERVER_FLAGS.branding !== 'azure' && <ExternalLink text=\"OpenShift Cluster Manager\" href={getOCMLink(clusterId)} />}\n              </DetailItem>\n              <DetailItem title=\"Provider\" error={!!infrastructureError || (infrastructure && !infrastructurePlatform)} isLoading={!infrastructureLoaded} valueClassName=\"co-select-to-copy\">\n                {infrastructurePlatform}\n              </DetailItem>\n              <DetailItem title=\"OpenShift version\" error={!!clusterVersionError || (clusterVersionLoaded && !openShiftVersion)} isLoading={!clusterVersionLoaded}>\n                <ClusterVersion cv={clusterVersionData} />\n              </DetailItem>\n              <DetailItem title=\"Update channel\" isLoading={!clusterVersionLoaded && !clusterVersionError} error={!!clusterVersionError || (clusterVersionLoaded && !cvChannel)} valueClassName=\"co-select-to-copy\">\n                {cvChannel}\n              </DetailItem>\n            </>\n          ) : (\n            <DetailItem key=\"kubernetes\" title={t('SINGLE:MSG_OVERVIEW_MAIN_CARDDETAILS_1')} error={!!k8sVersionError || (k8sVersion && !k8sGitVersion)} isLoading={!k8sVersion} valueClassName=\"co-select-to-copy\">\n              {k8sGitVersion}\n            </DetailItem>\n          )}\n        </DetailsBody>\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n});\n\nexport const DetailsCard = withDashboardResources(DetailsCard_);\n\ntype DetailsCardProps = DashboardItemProps & {\n  openshiftFlag: boolean;\n};\n\ntype ClusterVersionProps = {\n  cv: ClusterVersionKind;\n};\n"]}]}