{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/components/baremetal-nodes/BareMetalNodesPage.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/components/baremetal-nodes/BareMetalNodesPage.tsx","mtime":1615793099690},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport Helmet from 'react-helmet';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { MachineModel, NodeModel } from '@console/internal/models';\nimport { createLookup, getName, getMachineNodeName } from '@console/shared';\nimport { MultiListPage } from '@console/internal/components/factory';\nimport { useFlag } from '@console/shared/src/hooks/flag';\nimport { getNodeMaintenanceNodeName, getHostMachineName } from '../../selectors';\nimport { NodeMaintenanceModel, BareMetalHostModel } from '../../models';\nimport { bareMetalNodeStatus } from '../../status/baremetal-node-status';\nimport BareMetalNodesTable from './BareMetalNodesTable';\nimport { bareMetalNodeStatusFilter } from './table-filters';\nimport { NODE_MAINTENANCE_FLAG } from '../../features';\nimport { ResourceLabelPlural } from '@console/internal/models/hypercloud/resource-plural';\nimport { useTranslation } from 'react-i18next';\nconst flattenResources = resources => {\n    // TODO(jtomasek): Remove loaded check once ListPageWrapper_ is updated to call flatten only\n    // when resources are loaded\n    const loaded = _.every(resources, resource => resource.loaded || (resource.optional && !_.isEmpty(resource.loadError)));\n    const { hosts, machines, nodes: { data: nodesData }, nodeMaintenances, } = resources;\n    if (!loaded)\n        return [];\n    const maintenancesByNodeName = createLookup(nodeMaintenances, getNodeMaintenanceNodeName);\n    const hostsByMachineName = createLookup(hosts, getHostMachineName);\n    const machinesByNodeName = createLookup(machines, getMachineNodeName);\n    return nodesData.map((node) => {\n        const nodeName = getName(node);\n        const machine = machinesByNodeName[nodeName];\n        const host = hostsByMachineName[getName(machine)];\n        const nodeMaintenance = maintenancesByNodeName[nodeName];\n        const status = bareMetalNodeStatus({ node, nodeMaintenance });\n        // TODO(jtomasek): metadata.name is needed to make 'name' textFilter work.\n        // Remove it when it is possible to pass custom textFilter as a function\n        return { metadata: { name: nodeName }, host, machine, node, nodeMaintenance, status };\n    });\n};\nconst BareMetalNodesPage = props => {\n    const hasNodeMaintenanceCapability = useFlag(NODE_MAINTENANCE_FLAG);\n    const resources = [\n        {\n            kind: referenceForModel(BareMetalHostModel),\n            namespaced: true,\n            prop: 'hosts',\n        },\n        {\n            kind: referenceForModel(MachineModel),\n            namespaced: true,\n            prop: 'machines',\n        },\n        {\n            kind: NodeModel.kind,\n            namespaced: false,\n            prop: 'nodes',\n        },\n    ];\n    if (hasNodeMaintenanceCapability) {\n        resources.push({\n            kind: referenceForModel(NodeMaintenanceModel),\n            namespaced: false,\n            prop: 'nodeMaintenances',\n            optional: true,\n        });\n    }\n    const { t } = useTranslation();\n    return (React.createElement(\"div\", { className: \"co-m-list\" },\n        React.createElement(Helmet, null,\n            React.createElement(\"title\", null, ResourceLabelPlural(NodeModel, t))),\n        React.createElement(MultiListPage, Object.assign({}, props, { rowFilters: [bareMetalNodeStatusFilter], createButtonText: \"Add Host\", resources: resources, flatten: flattenResources, ListComponent: BareMetalNodesTable, title: ResourceLabelPlural(NodeModel, t) }))));\n};\nexport default BareMetalNodesPage;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/components/baremetal-nodes/BareMetalNodesPage.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/components/baremetal-nodes/BareMetalNodesPage.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport Helmet from 'react-helmet';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { FirehoseResource } from '@console/internal/components/utils';\nimport { MachineModel, NodeModel } from '@console/internal/models';\nimport { createLookup, getName, getMachineNodeName } from '@console/shared';\nimport { MultiListPage } from '@console/internal/components/factory';\nimport { useFlag } from '@console/shared/src/hooks/flag';\nimport { getNodeMaintenanceNodeName, getHostMachineName } from '../../selectors';\nimport { BareMetalNodeBundle } from '../types';\nimport { NodeMaintenanceModel, BareMetalHostModel } from '../../models';\nimport { bareMetalNodeStatus } from '../../status/baremetal-node-status';\nimport BareMetalNodesTable from './BareMetalNodesTable';\nimport { bareMetalNodeStatusFilter } from './table-filters';\nimport { NODE_MAINTENANCE_FLAG } from '../../features';\nimport { ResourceLabelPlural } from '@console/internal/models/hypercloud/resource-plural';\nimport { useTranslation } from 'react-i18next';\n\nconst flattenResources = resources => {\n  // TODO(jtomasek): Remove loaded check once ListPageWrapper_ is updated to call flatten only\n  // when resources are loaded\n  const loaded = _.every(resources, resource => resource.loaded || (resource.optional && !_.isEmpty(resource.loadError)));\n  const {\n    hosts,\n    machines,\n    nodes: { data: nodesData },\n    nodeMaintenances,\n  } = resources;\n\n  if (!loaded) return [];\n\n  const maintenancesByNodeName = createLookup(nodeMaintenances, getNodeMaintenanceNodeName);\n  const hostsByMachineName = createLookup(hosts, getHostMachineName);\n  const machinesByNodeName = createLookup(machines, getMachineNodeName);\n\n  return nodesData.map(\n    (node): BareMetalNodeBundle => {\n      const nodeName = getName(node);\n      const machine = machinesByNodeName[nodeName];\n      const host = hostsByMachineName[getName(machine)];\n      const nodeMaintenance = maintenancesByNodeName[nodeName];\n      const status = bareMetalNodeStatus({ node, nodeMaintenance });\n      // TODO(jtomasek): metadata.name is needed to make 'name' textFilter work.\n      // Remove it when it is possible to pass custom textFilter as a function\n      return { metadata: { name: nodeName }, host, machine, node, nodeMaintenance, status };\n    },\n  );\n};\n\nconst BareMetalNodesPage: React.FC = props => {\n  const hasNodeMaintenanceCapability = useFlag(NODE_MAINTENANCE_FLAG);\n  const resources: FirehoseResource[] = [\n    {\n      kind: referenceForModel(BareMetalHostModel),\n      namespaced: true,\n      prop: 'hosts',\n    },\n    {\n      kind: referenceForModel(MachineModel),\n      namespaced: true,\n      prop: 'machines',\n    },\n    {\n      kind: NodeModel.kind,\n      namespaced: false,\n      prop: 'nodes',\n    },\n  ];\n\n  if (hasNodeMaintenanceCapability) {\n    resources.push({\n      kind: referenceForModel(NodeMaintenanceModel),\n      namespaced: false,\n      prop: 'nodeMaintenances',\n      optional: true,\n    });\n  }\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"co-m-list\">\n      <Helmet>\n        <title>{ResourceLabelPlural(NodeModel, t)}</title>\n      </Helmet>\n      <MultiListPage {...props} rowFilters={[bareMetalNodeStatusFilter]} createButtonText=\"Add Host\" resources={resources} flatten={flattenResources} ListComponent={BareMetalNodesTable} title={ResourceLabelPlural(NodeModel, t)} />\n    </div>\n  );\n};\n\nexport default BareMetalNodesPage;\n"]}]}