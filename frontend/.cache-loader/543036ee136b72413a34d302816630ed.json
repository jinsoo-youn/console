{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/selectors/index.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/selectors/index.ts","mtime":1616735742370},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { convertToBaseValue } from '@console/internal/components/utils';\nimport { cephStorageProvisioners } from '@console/shared/src/utils';\nimport { OCS_OPERATOR } from '../constants';\nexport const cephStorageLabel = 'cluster.ocs.openshift.io/openshift-storage';\nvar status;\n(function (status) {\n    status[\"BOUND\"] = \"Bound\";\n    status[\"AVAILABLE\"] = \"Available\";\n})(status || (status = {}));\nexport const filterCephAlerts = (alerts) => alerts.filter((alert) => _.get(alert, 'annotations.storage_type') === 'ceph');\nexport const getCephPVs = (pvsData = []) => pvsData.filter((pv) => {\n    return cephStorageProvisioners.some((provisioner) => _.get(pv, 'metadata.annotations[\"pv.kubernetes.io/provisioned-by\"]', '').includes(provisioner));\n});\nconst getPVStorageClass = (pv) => _.get(pv, 'spec.storageClassName');\nconst getStorageClassName = (pvc) => _.get(pvc, ['metadata', 'annotations', 'volume.beta.kubernetes.io/storage-class']) ||\n    _.get(pvc, 'spec.storageClassName');\nconst isBound = (pvc) => pvc.status.phase === status.BOUND;\nexport const getCephPVCs = (cephSCNames = [], pvcsData = [], pvsData = []) => {\n    const cephPVs = getCephPVs(pvsData);\n    const cephSCNameSet = new Set([...cephSCNames, ...cephPVs.map(getPVStorageClass)]);\n    const cephBoundPVCUIDSet = new Set(_.map(cephPVs, 'spec.claimRef.uid'));\n    // If the PVC is bound use claim uid(links PVC to PV) else storage class to verify it's provisioned by ceph.\n    return pvcsData.filter((pvc) => isBound(pvc)\n        ? cephBoundPVCUIDSet.has(pvc.metadata.uid)\n        : cephSCNameSet.has(getStorageClassName(pvc)));\n};\nexport const getCephNodes = (nodesData = []) => nodesData.filter((node) => _.keys(_.get(node, 'metadata.labels')).includes(cephStorageLabel));\nexport const getCephSC = (scData) => scData.filter((sc) => {\n    return cephStorageProvisioners.some((provisioner) => _.get(sc, 'provisioner', '').includes(provisioner));\n});\nexport const getOCSVersion = (items) => {\n    const itemsData = _.get(items, 'data');\n    const operator = _.find(itemsData, (item) => _.get(item, 'spec.name') === OCS_OPERATOR);\n    return _.get(operator, 'status.installedCSV');\n};\nexport const calcPVsCapacity = (pvs) => pvs.reduce((sum, pv) => {\n    const storage = Number(convertToBaseValue(pv.spec.capacity.storage));\n    return sum + storage;\n}, 0);\nexport const getSCAvailablePVs = (pvsData, sc) => pvsData.filter((pv) => getPVStorageClass(pv) === sc && pv.status.phase === status.AVAILABLE);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/selectors/index.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/selectors/index.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { Alert } from '@console/internal/components/monitoring';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { FirehoseResult, convertToBaseValue } from '@console/internal/components/utils';\nimport { cephStorageProvisioners } from '@console/shared/src/utils';\nimport { OCS_OPERATOR } from '../constants';\n\nexport const cephStorageLabel = 'cluster.ocs.openshift.io/openshift-storage';\n\nconst enum status {\n  BOUND = 'Bound',\n  AVAILABLE = 'Available',\n}\nexport const filterCephAlerts = (alerts: Alert[]): Alert[] =>\n  alerts.filter((alert) => _.get(alert, 'annotations.storage_type') === 'ceph');\n\nexport const getCephPVs = (pvsData: K8sResourceKind[] = []): K8sResourceKind[] =>\n  pvsData.filter((pv) => {\n    return cephStorageProvisioners.some((provisioner: string) =>\n      _.get(pv, 'metadata.annotations[\"pv.kubernetes.io/provisioned-by\"]', '').includes(\n        provisioner,\n      ),\n    );\n  });\n\nconst getPVStorageClass = (pv: K8sResourceKind) => _.get(pv, 'spec.storageClassName');\nconst getStorageClassName = (pvc: K8sResourceKind) =>\n  _.get(pvc, ['metadata', 'annotations', 'volume.beta.kubernetes.io/storage-class']) ||\n  _.get(pvc, 'spec.storageClassName');\nconst isBound = (pvc: K8sResourceKind) => pvc.status.phase === status.BOUND;\n\nexport const getCephPVCs = (\n  cephSCNames: string[] = [],\n  pvcsData: K8sResourceKind[] = [],\n  pvsData: K8sResourceKind[] = [],\n): K8sResourceKind[] => {\n  const cephPVs = getCephPVs(pvsData);\n  const cephSCNameSet = new Set<string>([...cephSCNames, ...cephPVs.map(getPVStorageClass)]);\n  const cephBoundPVCUIDSet = new Set<string>(_.map(cephPVs, 'spec.claimRef.uid'));\n  // If the PVC is bound use claim uid(links PVC to PV) else storage class to verify it's provisioned by ceph.\n  return pvcsData.filter((pvc: K8sResourceKind) =>\n    isBound(pvc)\n      ? cephBoundPVCUIDSet.has(pvc.metadata.uid)\n      : cephSCNameSet.has(getStorageClassName(pvc)),\n  );\n};\n\nexport const getCephNodes = (nodesData: K8sResourceKind[] = []): K8sResourceKind[] =>\n  nodesData.filter((node) => _.keys(_.get(node, 'metadata.labels')).includes(cephStorageLabel));\n\nexport const getCephSC = (scData: K8sResourceKind[]): K8sResourceKind[] =>\n  scData.filter((sc) => {\n    return cephStorageProvisioners.some((provisioner: string) =>\n      _.get(sc, 'provisioner', '').includes(provisioner),\n    );\n  });\n\nexport const getOCSVersion = (items: FirehoseResult): string => {\n  const itemsData: K8sResourceKind[] = _.get(items, 'data');\n  const operator: K8sResourceKind = _.find(\n    itemsData,\n    (item) => _.get(item, 'spec.name') === OCS_OPERATOR,\n  );\n  return _.get(operator, 'status.installedCSV');\n};\n\nexport const calcPVsCapacity = (pvs: K8sResourceKind[]): number =>\n  pvs.reduce((sum, pv) => {\n    const storage = Number(convertToBaseValue(pv.spec.capacity.storage));\n    return sum + storage;\n  }, 0);\n\nexport const getSCAvailablePVs = (pvsData: K8sResourceKind[], sc: string): K8sResourceKind[] =>\n  pvsData.filter((pv) => getPVStorageClass(pv) === sc && pv.status.phase === status.AVAILABLE);\n"]}]}