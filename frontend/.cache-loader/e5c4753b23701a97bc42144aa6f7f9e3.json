{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/form/tasks/input-resource-modal.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/form/tasks/input-resource-modal.tsx","mtime":1617758738850},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { Section } from '../../utils/section';\nimport { Dropdown } from '../../utils/dropdown';\nimport { TextInput } from '../../utils/text-input';\nexport const InputResourceModal = ({ methods, inputResource }) => {\n    const typeItems = {\n        Git: 'Git',\n        Image: 'Image',\n    };\n    let target = document.getElementById('input-resource-list');\n    let modalType = target && [...target.childNodes].some(cur => cur['dataset']['modify'] === 'true') ? 'modify' : 'add';\n    let template;\n    if (modalType === 'modify') {\n        let list = target.childNodes;\n        list.forEach((cur, idx) => {\n            if (cur['dataset']['modify'] === 'true') {\n                template = inputResource[idx];\n            }\n        });\n    }\n    const [option, setOption] = React.useState(template === null || template === void 0 ? void 0 : template.option);\n    console.log(inputResource);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Section, { label: \"Name\", id: \"inputresource_name\", isRequired: true },\n            React.createElement(TextInput, { id: \"name\", inputClassName: \"col-md-12\", methods: methods, defaultValue: modalType === 'modify' ? template.name : '' })),\n        React.createElement(Section, { label: \"Type\", id: \"inputresource-type\", isRequired: true },\n            React.createElement(Dropdown, { name: \"type\", className: \"btn-group\", title: \"\\uD0C0\\uC785 \\uC120\\uD0DD\" // 드롭다운 title 지정\n                , methods: methods, items: typeItems, style: { display: 'block' }, buttonClassName: \"dropdown-btn col-md-12\" // 선택된 아이템 보여주는 button (title) 부분 className\n                , itemClassName: \"dropdown-item\" // 드롭다운 아이템 리스트 전체의 className - 각 row를 의미하는 것은 아님\n             })),\n        React.createElement(Section, { label: \"Resource Path\", id: \"inputresource_path\" },\n            React.createElement(TextInput, { id: \"path\", inputClassName: \"col-md-12\", methods: methods, defaultValue: modalType === 'modify' ? template.path : '' })),\n        React.createElement(\"label\", null,\n            React.createElement(\"input\", { name: \"option\", type: \"checkbox\", ref: methods.register(), checked: option, onClick: () => {\n                    setOption(!option);\n                } }),\n            \"\\uC774 \\uB9AC\\uC18C\\uC2A4\\uB97C \\uC120\\uD0DD \\uD56D\\uBAA9\\uC73C\\uB85C \\uC81C\\uACF5\\uD569\\uB2C8\\uB2E4.\"),\n        React.createElement(\"p\", null, \"\\uC120\\uD0DD \\uD56D\\uBAA9\\uC73C\\uB85C \\uC81C\\uACF5\\uD560 \\uACBD\\uC6B0, \\uD0DC\\uC2A4\\uD06C \\uB7F0 \\uB610\\uB294 \\uD30C\\uC774\\uD504\\uB77C\\uC778 \\uBA54\\uB274\\uC5D0\\uC11C \\uD30C\\uC774\\uD504\\uB77C\\uC778 \\uB9AC\\uC18C\\uC2A4\\uB97C \\uD544\\uC694\\uC5D0 \\uB530\\uB77C \\uD560\\uB2F9\\uD560 \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4.\")));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/form/tasks/input-resource-modal.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/form/tasks/input-resource-modal.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Section } from '../../utils/section';\nimport { Dropdown } from '../../utils/dropdown';\nimport { TextInput } from '../../utils/text-input';\n\nexport const InputResourceModal: React.FC<InputResourceModalProps> = ({ methods, inputResource }) => {\n  const typeItems = {\n    Git: 'Git',\n    Image: 'Image',\n  };\n  let target = document.getElementById('input-resource-list');\n  let modalType = target && [...target.childNodes].some(cur => cur['dataset']['modify'] === 'true') ? 'modify' : 'add';\n  let template;\n  if (modalType === 'modify') {\n    let list = target.childNodes;\n    list.forEach((cur, idx) => {\n      if (cur['dataset']['modify'] === 'true') {\n        template = inputResource[idx];\n      }\n    });\n  }\n  const [option, setOption] = React.useState(template?.option);\n\n  console.log(inputResource);\n\n  return (\n    <>\n      <Section label=\"Name\" id=\"inputresource_name\" isRequired={true}>\n        <TextInput id=\"name\" inputClassName=\"col-md-12\" methods={methods} defaultValue={modalType === 'modify' ? template.name : ''} />\n      </Section>\n      <Section label=\"Type\" id=\"inputresource-type\" isRequired={true}>\n        <Dropdown\n          name=\"type\"\n          className=\"btn-group\"\n          title=\"타입 선택\" // 드롭다운 title 지정\n          methods={methods}\n          items={typeItems} // (필수)\n          style={{ display: 'block' }}\n          buttonClassName=\"dropdown-btn col-md-12\" // 선택된 아이템 보여주는 button (title) 부분 className\n          itemClassName=\"dropdown-item\" // 드롭다운 아이템 리스트 전체의 className - 각 row를 의미하는 것은 아님\n        />\n      </Section>\n      <Section label=\"Resource Path\" id=\"inputresource_path\">\n        <TextInput id=\"path\" inputClassName=\"col-md-12\" methods={methods} defaultValue={modalType === 'modify' ? template.path : ''} />\n      </Section>\n      <label>\n        <input\n          name=\"option\"\n          type=\"checkbox\"\n          ref={methods.register()}\n          checked={option}\n          onClick={() => {\n            setOption(!option);\n          }}\n        />\n        이 리소스를 선택 항목으로 제공합니다.\n      </label>\n      <p>선택 항목으로 제공할 경우, 태스크 런 또는 파이프라인 메뉴에서 파이프라인 리소스를 필요에 따라 할당할 수 있습니다.</p>\n    </>\n  );\n};\n\ntype InputResourceModalProps = {\n  methods: any;\n  inputResource: any;\n};\n"]}]}