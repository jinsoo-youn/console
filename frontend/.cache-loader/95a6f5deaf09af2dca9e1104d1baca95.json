{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/truncate-middle.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/truncate-middle.ts","mtime":1616735742490},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["const DEFAULT_OPTIONS = {\n    length: 20,\n    truncateEnd: false,\n    omission: '\\u2026',\n    minTruncateChars: 3,\n};\n// Truncates a string down to `maxLength` characters when the length\n// is greater than the `maxLength` + `minTruncateChars` values.\n// By default the middle is truncated, set the options.truncateEnd to true to truncate at the end.\n// Truncated text is replaced with the provided omission option (ellipsis character by default);\nexport const truncateMiddle = (text, options = {}) => {\n    const { length, truncateEnd, omission, minTruncateChars } = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);\n    if (!text) {\n        return text;\n    }\n    // Do not truncate less than the minimum truncate characters\n    if (text.length <= length + minTruncateChars) {\n        return text;\n    }\n    if (length <= omission.length) {\n        return omission;\n    }\n    if (truncateEnd) {\n        return `${text.substr(0, length - 1)}${omission}`;\n    }\n    const startLength = Math.ceil((length - omission.length) / 2);\n    const endLength = length - startLength - omission.length;\n    const startFragment = text.substr(0, startLength);\n    const endFragment = text.substr(text.length - endLength);\n    return `${startFragment}${omission}${endFragment}`;\n};\nexport const shouldTruncate = (text, options = {}) => {\n    const { length, minTruncateChars } = Object.assign(Object.assign({}, DEFAULT_OPTIONS), options);\n    return text.length > length + minTruncateChars;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/truncate-middle.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/truncate-middle.ts"],"names":[],"mappings":"AAOA,MAAM,eAAe,GAAoB;IACvC,MAAM,EAAE,EAAE;IACV,WAAW,EAAE,KAAK;IAClB,QAAQ,EAAE,QAAQ;IAClB,gBAAgB,EAAE,CAAC;CACpB,CAAC;AAEF,oEAAoE;AACpE,+DAA+D;AAC/D,kGAAkG;AAClG,gGAAgG;AAChG,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,IAAY,EAAE,UAA2B,EAAE,EAAU,EAAE;IACpF,MAAM,EAAE,MAAM,EAAE,WAAW,EAAE,QAAQ,EAAE,gBAAgB,EAAE,mCAAQ,eAAe,GAAK,OAAO,CAAE,CAAC;IAC/F,IAAI,CAAC,IAAI,EAAE;QACT,OAAO,IAAI,CAAC;KACb;IAED,4DAA4D;IAC5D,IAAI,IAAI,CAAC,MAAM,IAAI,MAAM,GAAG,gBAAgB,EAAE;QAC5C,OAAO,IAAI,CAAC;KACb;IAED,IAAI,MAAM,IAAI,QAAQ,CAAC,MAAM,EAAE;QAC7B,OAAO,QAAQ,CAAC;KACjB;IAED,IAAI,WAAW,EAAE;QACf,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,GAAG,CAAC,CAAC,GAAG,QAAQ,EAAE,CAAC;KACnD;IAED,MAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,CAAC,MAAM,GAAG,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;IAC9D,MAAM,SAAS,GAAG,MAAM,GAAG,WAAW,GAAG,QAAQ,CAAC,MAAM,CAAC;IACzD,MAAM,aAAa,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC;IAClD,MAAM,WAAW,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,GAAG,SAAS,CAAC,CAAC;IACzD,OAAO,GAAG,aAAa,GAAG,QAAQ,GAAG,WAAW,EAAE,CAAC;AACrD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,IAAI,EAAE,UAA2B,EAAE,EAAW,EAAE;IAC7E,MAAM,EAAE,MAAM,EAAE,gBAAgB,EAAE,mCAAQ,eAAe,GAAK,OAAO,CAAE,CAAC;IAExE,OAAO,IAAI,CAAC,MAAM,GAAG,MAAM,GAAG,gBAAgB,CAAC;AACjD,CAAC,CAAC","sourcesContent":["export type TruncateOptions = {\n  length?: number; // Length to truncate text to\n  truncateEnd?: boolean; // Flag to alternatively truncate at the end\n  omission?: string; // Truncation text used to denote the truncation (ellipsis)\n  minTruncateChars?: number; // Minimum number of characters to truncate\n};\n\nconst DEFAULT_OPTIONS: TruncateOptions = {\n  length: 20,\n  truncateEnd: false,\n  omission: '\\u2026', // ellipsis character\n  minTruncateChars: 3,\n};\n\n// Truncates a string down to `maxLength` characters when the length\n// is greater than the `maxLength` + `minTruncateChars` values.\n// By default the middle is truncated, set the options.truncateEnd to true to truncate at the end.\n// Truncated text is replaced with the provided omission option (ellipsis character by default);\nexport const truncateMiddle = (text: string, options: TruncateOptions = {}): string => {\n  const { length, truncateEnd, omission, minTruncateChars } = { ...DEFAULT_OPTIONS, ...options };\n  if (!text) {\n    return text;\n  }\n\n  // Do not truncate less than the minimum truncate characters\n  if (text.length <= length + minTruncateChars) {\n    return text;\n  }\n\n  if (length <= omission.length) {\n    return omission;\n  }\n\n  if (truncateEnd) {\n    return `${text.substr(0, length - 1)}${omission}`;\n  }\n\n  const startLength = Math.ceil((length - omission.length) / 2);\n  const endLength = length - startLength - omission.length;\n  const startFragment = text.substr(0, startLength);\n  const endFragment = text.substr(text.length - endLength);\n  return `${startFragment}${omission}${endFragment}`;\n};\n\nexport const shouldTruncate = (text, options: TruncateOptions = {}): boolean => {\n  const { length, minTruncateChars } = { ...DEFAULT_OPTIONS, ...options };\n\n  return text.length > length + minTruncateChars;\n};\n"]}]}