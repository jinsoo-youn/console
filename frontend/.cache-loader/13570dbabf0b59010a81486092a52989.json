{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/local-storage-operator-plugin/src/components/local-volume-set/nodes-selection-list.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/local-storage-operator-plugin/src/components/local-volume-set/nodes-selection-list.tsx","mtime":1616735742430},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Text, pluralize } from '@patternfly/react-core';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { Table } from '@console/internal/components/factory';\nimport { ResourceLink, humanizeBinaryBytes, convertToBaseValue, } from '@console/internal/components/utils';\nimport { getUID, getName, getNodeCPUCapacity, getNodeAllocatableMemory } from '@console/shared';\nimport { getSelectedNodeUIDs } from './utils';\nimport './node-selection-list.scss';\nconst tableColumnClasses = [\n    classNames('pf-u-w-30-on-sm'),\n    classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-10-on-sm'),\n    classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-20-on-sm'),\n    classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-20-on-sm'),\n    classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-20-on-sm'),\n];\nconst setTableHeader = () => {\n    return [\n        {\n            title: 'Name',\n            sortField: 'metadata.name',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[0] },\n        },\n        {\n            title: 'CPU',\n            props: { className: tableColumnClasses[1] },\n        },\n        {\n            title: 'Memory',\n            props: { className: tableColumnClasses[2] },\n        },\n        {\n            title: 'Location',\n            props: { className: tableColumnClasses[3] },\n        },\n        {\n            title: 'Taints',\n            props: { className: tableColumnClasses[3] },\n        },\n    ];\n};\nconst stateShouldUpdate = (rowUIDMap, rows) => {\n    /* On initial render rows will be empty */\n    if (_.isEmpty(rows))\n        return true;\n    return Object.keys(rowUIDMap).some((uid) => { var _a, _b; return ((_a = rows === null || rows === void 0 ? void 0 : rows[uid]) === null || _a === void 0 ? void 0 : _a.selected) !== ((_b = rowUIDMap === null || rowUIDMap === void 0 ? void 0 : rowUIDMap[uid]) === null || _b === void 0 ? void 0 : _b.selected); });\n};\nconst createNodeUIDMap = (nodes) => nodes.reduce((nodeUIDMap, node) => {\n    const uid = getUID(node);\n    nodeUIDMap[uid] = node;\n    return nodeUIDMap;\n}, {});\nconst createRowUIDMap = (nodeUIDMap, rows) => Object.keys(nodeUIDMap).reduce((rowUIDMap, uid) => {\n    var _a, _b, _c, _d, _e, _f, _g;\n    const node = nodeUIDMap[uid];\n    const nodeName = getName(node);\n    const nodeLocation = (_b = (_a = node.metadata.labels) === null || _a === void 0 ? void 0 : _a['failure-domain.beta.kubernetes.io/zone']) !== null && _b !== void 0 ? _b : '-';\n    const nodeCpuCapacity = getNodeCPUCapacity(node);\n    const nodeAllocatableMemory = getNodeAllocatableMemory(node);\n    const nodeTaints = (_e = (_d = (_c = node.spec) === null || _c === void 0 ? void 0 : _c.taints) === null || _d === void 0 ? void 0 : _d.length) !== null && _e !== void 0 ? _e : 0;\n    const cells = [\n        {\n            title: React.createElement(ResourceLink, { kind: \"Node\", name: nodeName, title: uid }),\n        },\n        {\n            title: nodeCpuCapacity || '-',\n        },\n        {\n            title: humanizeBinaryBytes(convertToBaseValue(nodeAllocatableMemory)).string || '-',\n        },\n        {\n            title: nodeLocation || '-',\n        },\n        {\n            title: pluralize(nodeTaints, 'taint'),\n        },\n    ];\n    rowUIDMap[uid] = {\n        cells,\n        selected: (_g = (_f = rows === null || rows === void 0 ? void 0 : rows[uid]) === null || _f === void 0 ? void 0 : _f.selected) !== null && _g !== void 0 ? _g : false,\n        props: {\n            data: nodeUIDMap[uid],\n            uid,\n        },\n    };\n    return rowUIDMap;\n}, {});\nconst setTableRows = ({ componentProps, customData }) => {\n    const { data: filteredData } = componentProps;\n    const { rows, setRows, allSelected, setAllSelected } = customData;\n    const nodeUIDMap = createNodeUIDMap(filteredData);\n    const rowUIDMap = createRowUIDMap(nodeUIDMap, rows);\n    const tableRows = Object.values(rowUIDMap);\n    if (allSelected !== null) {\n        /* Selecting and deselecting visible table rows */\n        Object.keys(rowUIDMap).forEach((uid) => (rowUIDMap[uid].selected = allSelected));\n        setRows(Object.assign(Object.assign({}, rows), rowUIDMap));\n        setAllSelected(null);\n    }\n    else if (!_.isEmpty(rowUIDMap) && stateShouldUpdate(rowUIDMap, rows)) {\n        setRows(Object.assign(Object.assign({}, rows), rowUIDMap));\n    }\n    return tableRows;\n};\nexport const NodesSelectionList = (props) => {\n    const { rows, setRows, setAllSelected } = props.customData;\n    const onSelectTableRows = (_event, isSelected, rowId, rowData) => {\n        const updatedRows = Object.assign({}, rows);\n        if (rowId === -1) {\n            setAllSelected(isSelected);\n        }\n        else {\n            const { uid } = rowData.props;\n            updatedRows[uid].selected = isSelected;\n            setRows(Object.assign({}, updatedRows));\n        }\n    };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: \"lso-node-selection-table__table--scroll\" },\n            React.createElement(Table, Object.assign({}, props, { \"aria-label\": \"Select nodes for creating volume filter\", \"data-test-id\": \"create-lvs-form-node-selection-table\", Header: setTableHeader, Rows: setTableRows, onSelect: onSelectTableRows, customData: props.customData, virtualize: false }))),\n        React.createElement(Text, { \"data-test-id\": \"create-lvs-form-selected-nodes\", component: \"h6\" },\n            pluralize(getSelectedNodeUIDs(rows).length, 'node'),\n            \" selected\")));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/local-storage-operator-plugin/src/components/local-volume-set/nodes-selection-list.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/local-storage-operator-plugin/src/components/local-volume-set/nodes-selection-list.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Text, pluralize } from '@patternfly/react-core';\nimport * as classNames from 'classnames';\nimport { sortable, OnSelect } from '@patternfly/react-table';\nimport { Table } from '@console/internal/components/factory';\nimport {\n  ResourceLink,\n  humanizeBinaryBytes,\n  convertToBaseValue,\n} from '@console/internal/components/utils';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport { getUID, getName, getNodeCPUCapacity, getNodeAllocatableMemory } from '@console/shared';\nimport { NodeTableRow, RowUIDMap } from './types';\nimport { getSelectedNodeUIDs } from './utils';\nimport './node-selection-list.scss';\n\nconst tableColumnClasses = [\n  classNames('pf-u-w-30-on-sm'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-10-on-sm'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-20-on-sm'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-20-on-sm'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-20-on-sm'),\n];\n\nconst setTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'CPU',\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Memory',\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Location',\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: 'Taints',\n      props: { className: tableColumnClasses[3] },\n    },\n  ];\n};\n\nconst stateShouldUpdate = (rowUIDMap: RowUIDMap, rows: RowUIDMap): boolean => {\n  /* On initial render rows will be empty */\n  if (_.isEmpty(rows)) return true;\n  return Object.keys(rowUIDMap).some((uid) => rows?.[uid]?.selected !== rowUIDMap?.[uid]?.selected);\n};\n\nconst createNodeUIDMap = (nodes: NodeKind[]): NodeUIDMap =>\n  nodes.reduce((nodeUIDMap: NodeUIDMap, node: NodeKind) => {\n    const uid = getUID(node);\n    nodeUIDMap[uid] = node;\n    return nodeUIDMap;\n  }, {});\n\nconst createRowUIDMap = (nodeUIDMap: NodeUIDMap, rows: RowUIDMap): RowUIDMap =>\n  Object.keys(nodeUIDMap).reduce((rowUIDMap, uid: string) => {\n    const node = nodeUIDMap[uid];\n    const nodeName = getName(node);\n    const nodeLocation = node.metadata.labels?.['failure-domain.beta.kubernetes.io/zone'] ?? '-';\n    const nodeCpuCapacity = getNodeCPUCapacity(node);\n    const nodeAllocatableMemory = getNodeAllocatableMemory(node);\n    const nodeTaints = node.spec?.taints?.length ?? 0;\n    const cells = [\n      {\n        title: <ResourceLink kind=\"Node\" name={nodeName} title={uid} />,\n      },\n      {\n        title: nodeCpuCapacity || '-',\n      },\n      {\n        title: humanizeBinaryBytes(convertToBaseValue(nodeAllocatableMemory)).string || '-',\n      },\n      {\n        title: nodeLocation || '-',\n      },\n      {\n        title: pluralize(nodeTaints, 'taint'),\n      },\n    ];\n    rowUIDMap[uid] = {\n      cells,\n      selected: rows?.[uid]?.selected ?? false,\n      props: {\n        data: nodeUIDMap[uid],\n        uid,\n      },\n    };\n    return rowUIDMap;\n  }, {});\n\nconst setTableRows: SetTableRows = ({ componentProps, customData }) => {\n  const { data: filteredData } = componentProps;\n  const { rows, setRows, allSelected, setAllSelected } = customData;\n\n  const nodeUIDMap = createNodeUIDMap(filteredData);\n  const rowUIDMap = createRowUIDMap(nodeUIDMap, rows);\n  const tableRows = Object.values(rowUIDMap);\n\n  if (allSelected !== null) {\n    /* Selecting and deselecting visible table rows */\n    Object.keys(rowUIDMap).forEach((uid) => (rowUIDMap[uid].selected = allSelected));\n    setRows({ ...rows, ...rowUIDMap });\n    setAllSelected(null);\n  } else if (!_.isEmpty(rowUIDMap) && stateShouldUpdate(rowUIDMap, rows)) {\n    setRows({ ...rows, ...rowUIDMap });\n  }\n  return tableRows;\n};\n\nexport const NodesSelectionList: React.FC<NodesSelectionListProps> = (props) => {\n  const { rows, setRows, setAllSelected } = props.customData;\n\n  const onSelectTableRows: OnSelect = (_event, isSelected, rowId, rowData) => {\n    const updatedRows: RowUIDMap = { ...rows };\n    if (rowId === -1) {\n      setAllSelected(isSelected);\n    } else {\n      const { uid } = rowData.props;\n      updatedRows[uid].selected = isSelected;\n      setRows({ ...updatedRows });\n    }\n  };\n\n  return (\n    <>\n      <div className=\"lso-node-selection-table__table--scroll\">\n        <Table\n          {...props}\n          aria-label=\"Select nodes for creating volume filter\"\n          data-test-id=\"create-lvs-form-node-selection-table\"\n          Header={setTableHeader}\n          Rows={setTableRows}\n          onSelect={onSelectTableRows}\n          customData={props.customData}\n          virtualize={false}\n        />\n      </div>\n      <Text data-test-id=\"create-lvs-form-selected-nodes\" component=\"h6\">\n        {pluralize(getSelectedNodeUIDs(rows).length, 'node')} selected\n      </Text>\n    </>\n  );\n};\n\ntype NodesSelectionListProps = {\n  data: NodeKind[];\n  customData: {\n    allSelected: boolean;\n    rows: RowUIDMap;\n    setAllSelected: React.Dispatch<React.SetStateAction<boolean>>;\n    setRows: React.Dispatch<React.SetStateAction<RowUIDMap>>;\n  };\n};\n\ntype SetTableRows = (props: {\n  componentProps: { data: NodeKind[] };\n  customData: NodesSelectionListProps['customData'];\n}) => NodeTableRow[];\n\ntype NodeUIDMap = {\n  [key: string]: NodeKind;\n};\n"]}]}