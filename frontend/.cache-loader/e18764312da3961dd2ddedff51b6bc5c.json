{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/cloud-provider.js","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/cloud-provider.js","mtime":1615298458750},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["export const cloudProviderID = (node) => {\n    return node.spec.providerID ? node.spec.providerID.split('://')[0] : '';\n};\nexport const cloudProviderNames = (providerNames) => {\n    if (providerNames.length) {\n        const displayNames = providerNames.length === 1 ? providerNames[0] : `Hybrid (${providerNames.join(' , ')})`;\n        return displayNames.replace(/aws/i, 'Amazon Web Services');\n    }\n    return '';\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/cloud-provider.js","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/cloud-provider.js"],"names":[],"mappings":"AAAA,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,IAAI,EAAE,EAAE;IACtC,OAAO,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;AAC1E,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,aAAa,EAAE,EAAE;IAClD,IAAI,aAAa,CAAC,MAAM,EAAE;QACxB,MAAM,YAAY,GAChB,aAAa,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;QAC1F,OAAO,YAAY,CAAC,OAAO,CAAC,MAAM,EAAE,qBAAqB,CAAC,CAAC;KAC5D;IACD,OAAO,EAAE,CAAC;AACZ,CAAC,CAAC","sourcesContent":["export const cloudProviderID = (node) => {\n  return node.spec.providerID ? node.spec.providerID.split('://')[0] : '';\n};\n\nexport const cloudProviderNames = (providerNames) => {\n  if (providerNames.length) {\n    const displayNames =\n      providerNames.length === 1 ? providerNames[0] : `Hybrid (${providerNames.join(' , ')})`;\n    return displayNames.replace(/aws/i, 'Amazon Web Services');\n  }\n  return '';\n};\n"]}]}