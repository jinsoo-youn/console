{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/health-checks/HealthChecksAlert.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/health-checks/HealthChecksAlert.tsx","mtime":1615298458600},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport { Alert, AlertActionCloseButton } from '@patternfly/react-core';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport { ServiceModel as KnativeServiceModel } from '@console/knative-plugin';\nimport { referenceForModel, referenceFor, modelFor, } from '@console/internal/module/k8s';\nimport { DeploymentConfigModel, DeploymentModel, DaemonSetModel, StatefulSetModel, } from '@console/internal/models';\nimport { STORAGE_PREFIX } from '../../constants';\nimport './HealthChecksAlert.scss';\nconst HIDE_HEALTH_CHECK_ALERT_FOR = `${STORAGE_PREFIX}/hide-health-check-alert-for`;\nconst addHealthChecksRefs = [\n    referenceForModel(DeploymentConfigModel),\n    referenceForModel(DeploymentModel),\n    referenceForModel(DaemonSetModel),\n    referenceForModel(StatefulSetModel),\n    referenceForModel(KnativeServiceModel),\n];\nconst HealthChecksAlert = ({ resource }) => {\n    var _a, _b, _c;\n    const { kind, metadata: { name, namespace, uid }, } = resource;\n    const [hideHealthCheckAlertFor, setHideHealthCheckAlertFor] = React.useState([]);\n    const kindForCRDResource = referenceFor(resource);\n    const resourceModel = modelFor(kindForCRDResource);\n    const resourceKind = resourceModel.crd ? kindForCRDResource : kind;\n    const canAddHealthChecks = useAccessReview({\n        group: resourceModel.apiGroup,\n        resource: resourceModel.plural,\n        namespace,\n        name,\n        verb: 'update',\n    });\n    React.useEffect(() => {\n        setHideHealthCheckAlertFor(JSON.parse(localStorage.getItem(HIDE_HEALTH_CHECK_ALERT_FOR)) || []);\n    }, []);\n    if (!_.includes(addHealthChecksRefs, referenceFor(resource))) {\n        return null;\n    }\n    const containers = (_c = (_b = (_a = resource === null || resource === void 0 ? void 0 : resource.spec) === null || _a === void 0 ? void 0 : _a.template) === null || _b === void 0 ? void 0 : _b.spec) === null || _c === void 0 ? void 0 : _c.containers;\n    const containersName = containers === null || containers === void 0 ? void 0 : containers.map((container) => container.name);\n    const healthCheckAdded = _.every(containers, (container) => container.readinessProbe || container.livenessProbe || container.startupProbe);\n    const handleAlertAction = () => {\n        const hideHealthCheckAlert = [...hideHealthCheckAlertFor, uid];\n        setHideHealthCheckAlertFor(hideHealthCheckAlert);\n        localStorage.setItem(HIDE_HEALTH_CHECK_ALERT_FOR, JSON.stringify(hideHealthCheckAlert));\n    };\n    const showAlert = !healthCheckAdded && !_.includes(hideHealthCheckAlertFor, uid) && canAddHealthChecks;\n    const addHealthChecksLink = `/k8s/ns/${namespace}/${resourceKind}/${name}/containers/${containersName[0]}/health-checks`;\n    return (React.createElement(React.Fragment, null, showAlert ? (React.createElement(\"div\", { className: \"ocs-health-checks-alert\" },\n        React.createElement(Alert, { variant: \"default\", title: \"Health Checks\", action: React.createElement(AlertActionCloseButton, { onClose: handleAlertAction }), isInline: true },\n            _.size(containersName) > 1\n                ? 'Not all containers'\n                : `Container ${_.map(containersName)} does not`,\n            ' ',\n            \"have health checks to ensure your application is running correctly.\",\n            ' ',\n            React.createElement(Link, { to: addHealthChecksLink }, \"Add Health Checks\")))) : null));\n};\nexport default HealthChecksAlert;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/health-checks/HealthChecksAlert.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/health-checks/HealthChecksAlert.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport { Alert, AlertActionCloseButton } from '@patternfly/react-core';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport { ServiceModel as KnativeServiceModel } from '@console/knative-plugin';\nimport {\n  K8sResourceKind,\n  referenceForModel,\n  referenceFor,\n  modelFor,\n} from '@console/internal/module/k8s';\nimport {\n  DeploymentConfigModel,\n  DeploymentModel,\n  DaemonSetModel,\n  StatefulSetModel,\n} from '@console/internal/models';\nimport { STORAGE_PREFIX } from '../../constants';\nimport './HealthChecksAlert.scss';\n\ntype HealthChecksAlertProps = {\n  resource: K8sResourceKind;\n};\n\nconst HIDE_HEALTH_CHECK_ALERT_FOR = `${STORAGE_PREFIX}/hide-health-check-alert-for`;\n\nconst addHealthChecksRefs = [\n  referenceForModel(DeploymentConfigModel),\n  referenceForModel(DeploymentModel),\n  referenceForModel(DaemonSetModel),\n  referenceForModel(StatefulSetModel),\n  referenceForModel(KnativeServiceModel),\n];\n\nconst HealthChecksAlert: React.FC<HealthChecksAlertProps> = ({ resource }) => {\n  const {\n    kind,\n    metadata: { name, namespace, uid },\n  } = resource;\n  const [hideHealthCheckAlertFor, setHideHealthCheckAlertFor] = React.useState([]);\n  const kindForCRDResource = referenceFor(resource);\n  const resourceModel = modelFor(kindForCRDResource);\n  const resourceKind = resourceModel.crd ? kindForCRDResource : kind;\n\n  const canAddHealthChecks = useAccessReview({\n    group: resourceModel.apiGroup,\n    resource: resourceModel.plural,\n    namespace,\n    name,\n    verb: 'update',\n  });\n\n  React.useEffect(() => {\n    setHideHealthCheckAlertFor(JSON.parse(localStorage.getItem(HIDE_HEALTH_CHECK_ALERT_FOR)) || []);\n  }, []);\n\n  if (!_.includes(addHealthChecksRefs, referenceFor(resource))) {\n    return null;\n  }\n\n  const containers = resource?.spec?.template?.spec?.containers;\n  const containersName = containers?.map((container) => container.name);\n  const healthCheckAdded = _.every(\n    containers,\n    (container) => container.readinessProbe || container.livenessProbe || container.startupProbe,\n  );\n\n  const handleAlertAction = () => {\n    const hideHealthCheckAlert = [...hideHealthCheckAlertFor, uid];\n    setHideHealthCheckAlertFor(hideHealthCheckAlert);\n    localStorage.setItem(HIDE_HEALTH_CHECK_ALERT_FOR, JSON.stringify(hideHealthCheckAlert));\n  };\n\n  const showAlert =\n    !healthCheckAdded && !_.includes(hideHealthCheckAlertFor, uid) && canAddHealthChecks;\n\n  const addHealthChecksLink = `/k8s/ns/${namespace}/${resourceKind}/${name}/containers/${containersName[0]}/health-checks`;\n\n  return (\n    <>\n      {showAlert ? (\n        <div className=\"ocs-health-checks-alert\">\n          <Alert\n            variant=\"default\"\n            title=\"Health Checks\"\n            action={<AlertActionCloseButton onClose={handleAlertAction} />}\n            isInline\n          >\n            {_.size(containersName) > 1\n              ? 'Not all containers'\n              : `Container ${_.map(containersName)} does not`}{' '}\n            have health checks to ensure your application is running correctly.{' '}\n            <Link to={addHealthChecksLink}>Add Health Checks</Link>\n          </Alert>\n        </div>\n      ) : null}\n    </>\n  );\n};\n\nexport default HealthChecksAlert;\n"]}]}