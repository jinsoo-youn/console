{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/health-checks/ProbeForm.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/health-checks/ProbeForm.tsx","mtime":1616735742380},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useFormikContext } from 'formik';\nimport { TextInputTypes, InputGroupText } from '@patternfly/react-core';\nimport { InputGroupField, InputField, DropdownField, ActionGroupWithIcons } from '@console/shared';\nimport { HTTPRequestTypeForm, TCPRequestTypeForm, CommandRequestTypeForm, } from './RequestTypeForms';\nimport { RequestType } from './health-checks-types';\nimport FormSection from '../import/section/FormSection';\nimport './ProbeForm.scss';\nconst getRequestTypeForm = (value, probeType) => {\n    switch (value) {\n        case RequestType.HTTPGET:\n            return React.createElement(HTTPRequestTypeForm, { probeType: probeType });\n        case RequestType.ContainerCommand:\n            return React.createElement(CommandRequestTypeForm, { probeType: probeType });\n        case RequestType.TCPSocket:\n            return React.createElement(TCPRequestTypeForm, { probeType: probeType });\n        default:\n            return null;\n    }\n};\nvar RequestTypeOptions;\n(function (RequestTypeOptions) {\n    RequestTypeOptions[\"httpGet\"] = \"HTTP GET\";\n    RequestTypeOptions[\"command\"] = \"Container Command\";\n    RequestTypeOptions[\"tcpSocket\"] = \"TCP Socket\";\n})(RequestTypeOptions || (RequestTypeOptions = {}));\nconst ProbeForm = ({ onSubmit, onClose, probeType }) => {\n    var _a, _b, _c;\n    const { values: { healthChecks }, errors, } = useFormikContext();\n    return (React.createElement(\"div\", { className: \"odc-heath-check-probe-form\" },\n        React.createElement(FormSection, null,\n            React.createElement(DropdownField, { name: `healthChecks.${probeType}.data.requestType`, label: \"Type\", items: RequestTypeOptions, title: RequestType.HTTPGET, fullWidth: true }),\n            getRequestTypeForm((_b = (_a = healthChecks === null || healthChecks === void 0 ? void 0 : healthChecks[probeType]) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.requestType, probeType),\n            React.createElement(InputField, { type: TextInputTypes.number, name: `healthChecks.${probeType}.data.failureThreshold`, label: \"Failure Threshold\", style: { maxWidth: '100%' }, helpText: \"How many times the probe will try starting or restarting before giving up.\" }),\n            React.createElement(InputField, { type: TextInputTypes.number, name: `healthChecks.${probeType}.data.successThreshold`, label: \"Success Threshold\", style: { maxWidth: '100%' }, helpText: \"How many consecutive successes for the probe to be considered successful after having failed.\" }),\n            React.createElement(InputGroupField, { type: TextInputTypes.number, name: `healthChecks.${probeType}.data.initialDelaySeconds`, label: \"Initial Delay\", helpText: \"How long to wait after the container starts before checking it's health.\", afterInput: React.createElement(InputGroupText, null, 'seconds'), style: { maxWidth: '100%' } }),\n            React.createElement(InputGroupField, { type: TextInputTypes.number, name: `healthChecks.${probeType}.data.periodSeconds`, label: \"Period\", helpText: \"How often to perform the probe.\", afterInput: React.createElement(InputGroupText, null, 'seconds'), style: { maxWidth: '100%' } }),\n            React.createElement(InputGroupField, { type: TextInputTypes.number, name: `healthChecks.${probeType}.data.timeoutSeconds`, label: \"Timeout\", helpText: \"How long to wait for the probe to finish, if the time is exceeded, the probe is considered failed.\", afterInput: React.createElement(InputGroupText, null, 'seconds'), style: { maxWidth: '100%' } })),\n        React.createElement(ActionGroupWithIcons, { onSubmit: onSubmit, onClose: onClose, isDisabled: !_.isEmpty((_c = errors === null || errors === void 0 ? void 0 : errors.healthChecks) === null || _c === void 0 ? void 0 : _c[probeType]) })));\n};\nexport default ProbeForm;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/health-checks/ProbeForm.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/health-checks/ProbeForm.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { FormikValues, useFormikContext } from 'formik';\nimport { TextInputTypes, InputGroupText } from '@patternfly/react-core';\nimport { InputGroupField, InputField, DropdownField, ActionGroupWithIcons } from '@console/shared';\nimport {\n  HTTPRequestTypeForm,\n  TCPRequestTypeForm,\n  CommandRequestTypeForm,\n} from './RequestTypeForms';\nimport { RequestType } from './health-checks-types';\nimport FormSection from '../import/section/FormSection';\nimport './ProbeForm.scss';\n\nconst getRequestTypeForm = (value: string, probeType: string) => {\n  switch (value) {\n    case RequestType.HTTPGET:\n      return <HTTPRequestTypeForm probeType={probeType} />;\n    case RequestType.ContainerCommand:\n      return <CommandRequestTypeForm probeType={probeType} />;\n    case RequestType.TCPSocket:\n      return <TCPRequestTypeForm probeType={probeType} />;\n    default:\n      return null;\n  }\n};\n\ninterface ProbeFormProps {\n  onSubmit: () => void;\n  onClose: () => void;\n  probeType: string;\n}\n\nenum RequestTypeOptions {\n  httpGet = 'HTTP GET',\n  command = 'Container Command',\n  tcpSocket = 'TCP Socket',\n}\n\nconst ProbeForm: React.FC<ProbeFormProps> = ({ onSubmit, onClose, probeType }) => {\n  const {\n    values: { healthChecks },\n    errors,\n  } = useFormikContext<FormikValues>();\n\n  return (\n    <div className=\"odc-heath-check-probe-form\">\n      <FormSection>\n        <DropdownField\n          name={`healthChecks.${probeType}.data.requestType`}\n          label=\"Type\"\n          items={RequestTypeOptions}\n          title={RequestType.HTTPGET}\n          fullWidth\n        />\n        {getRequestTypeForm(healthChecks?.[probeType]?.data?.requestType, probeType)}\n        <InputField\n          type={TextInputTypes.number}\n          name={`healthChecks.${probeType}.data.failureThreshold`}\n          label=\"Failure Threshold\"\n          style={{ maxWidth: '100%' }}\n          helpText=\"How many times the probe will try starting or restarting before giving up.\"\n        />\n        <InputField\n          type={TextInputTypes.number}\n          name={`healthChecks.${probeType}.data.successThreshold`}\n          label=\"Success Threshold\"\n          style={{ maxWidth: '100%' }}\n          helpText=\"How many consecutive successes for the probe to be considered successful after having failed.\"\n        />\n        <InputGroupField\n          type={TextInputTypes.number}\n          name={`healthChecks.${probeType}.data.initialDelaySeconds`}\n          label=\"Initial Delay\"\n          helpText=\"How long to wait after the container starts before checking it's health.\"\n          afterInput={<InputGroupText>{'seconds'}</InputGroupText>}\n          style={{ maxWidth: '100%' }}\n        />\n        <InputGroupField\n          type={TextInputTypes.number}\n          name={`healthChecks.${probeType}.data.periodSeconds`}\n          label=\"Period\"\n          helpText=\"How often to perform the probe.\"\n          afterInput={<InputGroupText>{'seconds'}</InputGroupText>}\n          style={{ maxWidth: '100%' }}\n        />\n        <InputGroupField\n          type={TextInputTypes.number}\n          name={`healthChecks.${probeType}.data.timeoutSeconds`}\n          label=\"Timeout\"\n          helpText=\"How long to wait for the probe to finish, if the time is exceeded, the probe is considered failed.\"\n          afterInput={<InputGroupText>{'seconds'}</InputGroupText>}\n          style={{ maxWidth: '100%' }}\n        />\n      </FormSection>\n      <ActionGroupWithIcons\n        onSubmit={onSubmit}\n        onClose={onClose}\n        isDisabled={!_.isEmpty(errors?.healthChecks?.[probeType])}\n      />\n    </div>\n  );\n};\n\nexport default ProbeForm;\n"]}]}