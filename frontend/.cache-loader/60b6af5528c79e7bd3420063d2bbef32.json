{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/geom/Rect.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/geom/Rect.ts","mtime":1615298458710},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import Point from './Point';\nexport default class Rect {\n    constructor(x = 0, y = 0, width = 0, height = 0) {\n        this.width = 0;\n        this.height = 0;\n        this.x = 0;\n        this.y = 0;\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n    }\n    static singleUse(x = 0, y = 0, width = 0, height = 0) {\n        Rect.SINGLETON.x = x;\n        Rect.SINGLETON.y = y;\n        Rect.SINGLETON.width = width;\n        Rect.SINGLETON.height = height;\n        return Rect.SINGLETON;\n    }\n    static fromRect(rect) {\n        return new Rect(rect.x, rect.y, rect.width, rect.height);\n    }\n    isEmpty() {\n        return this.width <= 0 || this.height <= 0;\n    }\n    setLocation(x, y) {\n        this.x = x;\n        this.y = y;\n        return this;\n    }\n    setSize(w, h) {\n        this.width = w;\n        this.height = h;\n        return this;\n    }\n    getCenter() {\n        return new Point(this.x + this.width / 2, this.y + this.height / 2);\n    }\n    setCenter(x, y) {\n        this.x = x - this.width / 2;\n        this.y = y - this.height / 2;\n        return this;\n    }\n    translate(dx, dy) {\n        this.x += dx;\n        this.y += dy;\n        return this;\n    }\n    scale(scaleX, scaleY) {\n        const sy = scaleY != null ? scaleY : scaleX;\n        const xx = this.x;\n        const yy = this.y;\n        this.x *= scaleX;\n        this.y *= sy;\n        this.width = (xx + this.width) * scaleX - this.x;\n        this.height = (yy + this.height) * sy - this.y;\n        return this;\n    }\n    resize(dw, dh) {\n        this.width += dw;\n        this.height += dh;\n        return this;\n    }\n    bottom() {\n        return this.y + this.height;\n    }\n    right() {\n        return this.x + this.width;\n    }\n    union({ x, y, width, height }) {\n        const right = Math.max(this.x + this.width, x + width);\n        const bottom = Math.max(this.y + this.height, y + height);\n        this.x = Math.min(this.x, x);\n        this.y = Math.min(this.y, y);\n        this.width = right - this.x;\n        this.height = bottom - this.y;\n        return this;\n    }\n    expand(h, v) {\n        this.y -= v;\n        this.height += v * 2;\n        this.x -= h;\n        this.width += h * 2;\n        return this;\n    }\n    //\n    // Padding Format:  [all], [vertical, horizontal], [top, horizontal, bottom], [top, right, bottom, left]\n    //\n    padding(padding) {\n        if (padding) {\n            if (typeof padding === 'number') {\n                this.expand(padding, padding);\n            }\n            else if (padding.length === 1) {\n                this.expand(padding[0], padding[0]);\n            }\n            else if (padding.length === 2) {\n                this.expand(padding[1], padding[0]);\n            }\n            else if (padding.length === 3) {\n                this.y -= padding[0];\n                this.height += padding[0] + padding[2];\n                this.width += padding[1];\n            }\n            else if (padding.length === 4) {\n                this.y -= padding[0];\n                this.height += padding[0] + padding[2];\n                this.x -= padding[1];\n                this.width += padding[1] + padding[3];\n            }\n        }\n        return this;\n    }\n    setBounds(x, y, width, height) {\n        this.x = x;\n        this.y = y;\n        this.width = width;\n        this.height = height;\n        return this;\n    }\n    clone() {\n        return Rect.fromRect(this);\n    }\n    equals(r) {\n        return r.x === this.x && r.y === this.y && r.width === this.width && r.height === this.height;\n    }\n}\nRect.EMPTY = new Rect();\nRect.SINGLETON = new Rect();\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/geom/Rect.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/geom/Rect.ts"],"names":[],"mappings":"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","sourcesContent":["import { Padding, Translatable, IRect } from './types';\nimport Point from './Point';\n\nexport default class Rect implements Translatable, IRect {\n  static readonly EMPTY = new Rect();\n\n  width: number = 0;\n\n  height: number = 0;\n\n  x: number = 0;\n\n  y: number = 0;\n\n  private static SINGLETON = new Rect();\n\n  static singleUse(x: number = 0, y: number = 0, width: number = 0, height: number = 0) {\n    Rect.SINGLETON.x = x;\n    Rect.SINGLETON.y = y;\n    Rect.SINGLETON.width = width;\n    Rect.SINGLETON.height = height;\n    return Rect.SINGLETON;\n  }\n\n  static fromRect(rect: IRect): Rect {\n    return new Rect(rect.x, rect.y, rect.width, rect.height);\n  }\n\n  constructor(x: number = 0, y: number = 0, width: number = 0, height: number = 0) {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n  }\n\n  isEmpty(): boolean {\n    return this.width <= 0 || this.height <= 0;\n  }\n\n  setLocation(x: number, y: number): Rect {\n    this.x = x;\n    this.y = y;\n    return this;\n  }\n\n  setSize(w: number, h: number): Rect {\n    this.width = w;\n    this.height = h;\n    return this;\n  }\n\n  getCenter(): Point {\n    return new Point(this.x + this.width / 2, this.y + this.height / 2);\n  }\n\n  setCenter(x: number, y: number): Rect {\n    this.x = x - this.width / 2;\n    this.y = y - this.height / 2;\n    return this;\n  }\n\n  translate(dx: number, dy: number): Rect {\n    this.x += dx;\n    this.y += dy;\n    return this;\n  }\n\n  scale(scaleX: number, scaleY?: number): Rect {\n    const sy = scaleY != null ? scaleY : scaleX;\n    const xx = this.x;\n    const yy = this.y;\n    this.x *= scaleX;\n    this.y *= sy;\n    this.width = (xx + this.width) * scaleX - this.x;\n    this.height = (yy + this.height) * sy - this.y;\n    return this;\n  }\n\n  resize(dw: number, dh: number): Rect {\n    this.width += dw;\n    this.height += dh;\n    return this;\n  }\n\n  bottom(): number {\n    return this.y + this.height;\n  }\n\n  right(): number {\n    return this.x + this.width;\n  }\n\n  union({ x, y, width, height }: Rect): Rect {\n    const right = Math.max(this.x + this.width, x + width);\n    const bottom = Math.max(this.y + this.height, y + height);\n    this.x = Math.min(this.x, x);\n    this.y = Math.min(this.y, y);\n    this.width = right - this.x;\n    this.height = bottom - this.y;\n    return this;\n  }\n\n  expand(h: number, v: number): Rect {\n    this.y -= v;\n    this.height += v * 2;\n    this.x -= h;\n    this.width += h * 2;\n    return this;\n  }\n\n  //\n  // Padding Format:  [all], [vertical, horizontal], [top, horizontal, bottom], [top, right, bottom, left]\n  //\n  padding(padding?: Padding): Rect {\n    if (padding) {\n      if (typeof padding === 'number') {\n        this.expand(padding, padding);\n      } else if (padding.length === 1) {\n        this.expand(padding[0], padding[0]);\n      } else if (padding.length === 2) {\n        this.expand(padding[1], padding[0]);\n      } else if (padding.length === 3) {\n        this.y -= padding[0];\n        this.height += padding[0] + padding[2];\n        this.width += padding[1];\n      } else if (padding.length === 4) {\n        this.y -= padding[0];\n        this.height += padding[0] + padding[2];\n        this.x -= padding[1];\n        this.width += padding[1] + padding[3];\n      }\n    }\n    return this;\n  }\n\n  setBounds(x: number, y: number, width: number, height: number): Rect {\n    this.x = x;\n    this.y = y;\n    this.width = width;\n    this.height = height;\n    return this;\n  }\n\n  clone(): Rect {\n    return Rect.fromRect(this);\n  }\n\n  equals(r: IRect) {\n    return r.x === this.x && r.y === this.y && r.width === this.width && r.height === this.height;\n  }\n}\n"]}]}