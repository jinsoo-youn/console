{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/pipelineruns/linked-pipeline-run-task-status.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/pipelineruns/linked-pipeline-run-task-status.tsx","mtime":1616735742470},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { resourcePathFromModel } from '@console/internal/components/utils';\nimport { PipelineRunModel } from '../../../models';\nimport { PipelineTaskStatus } from './pipeline-task-status';\n/**\n * Will attempt to render a link to the log file associated with the pipelineRun if it has the data.\n * If it does not, it'll just render the pipeline status.\n */\nconst LinkedPipelineRunTaskStatus = ({ pipeline, pipelineRun, }) => {\n    var _a, _b, _c;\n    const pipelineStatus = (React.createElement(PipelineTaskStatus, { key: (_a = pipelineRun.metadata) === null || _a === void 0 ? void 0 : _a.name, pipeline: pipeline, pipelinerun: pipelineRun }));\n    if (((_b = pipelineRun.metadata) === null || _b === void 0 ? void 0 : _b.name) && ((_c = pipelineRun.metadata) === null || _c === void 0 ? void 0 : _c.namespace)) {\n        return (React.createElement(Link, { to: `${resourcePathFromModel(PipelineRunModel, pipelineRun.metadata.name, pipelineRun.metadata.namespace)}/logs` }, pipelineStatus));\n    }\n    return pipelineStatus;\n};\nexport default LinkedPipelineRunTaskStatus;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/pipelineruns/linked-pipeline-run-task-status.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/pipelineruns/linked-pipeline-run-task-status.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,IAAI,EAAE,MAAM,kBAAkB,CAAC;AACxC,OAAO,EAAE,qBAAqB,EAAE,MAAM,oCAAoC,CAAC;AAE3E,OAAO,EAAE,gBAAgB,EAAE,MAAM,iBAAiB,CAAC;AACnD,OAAO,EAAE,kBAAkB,EAAE,MAAM,wBAAwB,CAAC;AAO5D;;;GAGG;AACH,MAAM,2BAA2B,GAA+C,CAAC,EAC/E,QAAQ,EACR,WAAW,GACZ,EAAE,EAAE;;IACH,MAAM,cAAc,GAAG,CACrB,oBAAC,kBAAkB,IACjB,GAAG,QAAE,WAAW,CAAC,QAAQ,0CAAE,IAAI,EAC/B,QAAQ,EAAE,QAAQ,EAClB,WAAW,EAAE,WAAW,GACxB,CACH,CAAC;IAEF,IAAI,OAAA,WAAW,CAAC,QAAQ,0CAAE,IAAI,YAAI,WAAW,CAAC,QAAQ,0CAAE,SAAS,CAAA,EAAE;QACjE,OAAO,CACL,oBAAC,IAAI,IACH,EAAE,EAAE,GAAG,qBAAqB,CAC1B,gBAAgB,EAChB,WAAW,CAAC,QAAQ,CAAC,IAAI,EACzB,WAAW,CAAC,QAAQ,CAAC,SAAS,CAC/B,OAAO,IAEP,cAAc,CACV,CACR,CAAC;KACH;IAED,OAAO,cAAc,CAAC;AACxB,CAAC,CAAC;AAEF,eAAe,2BAA2B,CAAC","sourcesContent":["import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { resourcePathFromModel } from '@console/internal/components/utils';\nimport { Pipeline, PipelineRun } from '../utils/pipeline-augment';\nimport { PipelineRunModel } from '../../../models';\nimport { PipelineTaskStatus } from './pipeline-task-status';\n\nexport interface LinkedPipelineRunTaskStatusProps {\n  pipeline?: Pipeline;\n  pipelineRun: PipelineRun;\n}\n\n/**\n * Will attempt to render a link to the log file associated with the pipelineRun if it has the data.\n * If it does not, it'll just render the pipeline status.\n */\nconst LinkedPipelineRunTaskStatus: React.FC<LinkedPipelineRunTaskStatusProps> = ({\n  pipeline,\n  pipelineRun,\n}) => {\n  const pipelineStatus = (\n    <PipelineTaskStatus\n      key={pipelineRun.metadata?.name}\n      pipeline={pipeline}\n      pipelinerun={pipelineRun}\n    />\n  );\n\n  if (pipelineRun.metadata?.name && pipelineRun.metadata?.namespace) {\n    return (\n      <Link\n        to={`${resourcePathFromModel(\n          PipelineRunModel,\n          pipelineRun.metadata.name,\n          pipelineRun.metadata.namespace,\n        )}/logs`}\n      >\n        {pipelineStatus}\n      </Link>\n    );\n  }\n\n  return pipelineStatus;\n};\n\nexport default LinkedPipelineRunTaskStatus;\n"]}]}