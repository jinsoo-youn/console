{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/noobaa-storage-plugin/src/components/resource-providers-card/resource-providers-card.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/noobaa-storage-plugin/src/components/resource-providers-card/resource-providers-card.tsx","mtime":1615298458680},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport { FieldLevelHelp } from '@console/internal/components/utils/index';\nimport { withDashboardResources, } from '@console/internal/components/dashboard/with-dashboard-resources';\nimport { getMetric } from '../../utils';\nimport { ResourceProvidersBody } from './resource-providers-card-body';\nimport { ResourceProvidersItem } from './resource-providers-card-item';\nimport './resource-providers-card.scss';\nconst RESOURCE_PROVIDERS_QUERY = {\n    PROVIDERS_TYPES: ' NooBaa_cloud_types',\n    UNHEALTHY_PROVIDERS_TYPES: 'NooBaa_unhealthy_cloud_types',\n    RESOURCES_LINK_QUERY: 'NooBaa_system_links',\n};\nconst getProviderType = (provider) => _.get(provider, 'metric.type', null);\nconst getProviderCount = (provider) => Number(_.get(provider, 'value[1]', null));\nconst filterProviders = (allProviders) => {\n    return _.keys(allProviders).filter((provider) => allProviders[provider] > 0);\n};\nconst createProvidersList = (data) => {\n    const providers = _.get(data, 'data.result', null);\n    const providersList = {};\n    if (_.isNil(providers))\n        return {};\n    providers.forEach((provider) => {\n        providersList[getProviderType(provider)] = getProviderCount(provider);\n    });\n    return providersList;\n};\nconst ResourceProviders = ({ watchPrometheus, stopWatchPrometheusQuery, prometheusResults, }) => {\n    React.useEffect(() => {\n        watchPrometheus(RESOURCE_PROVIDERS_QUERY.PROVIDERS_TYPES);\n        watchPrometheus(RESOURCE_PROVIDERS_QUERY.UNHEALTHY_PROVIDERS_TYPES);\n        return () => {\n            stopWatchPrometheusQuery(RESOURCE_PROVIDERS_QUERY.PROVIDERS_TYPES);\n            stopWatchPrometheusQuery(RESOURCE_PROVIDERS_QUERY.UNHEALTHY_PROVIDERS_TYPES);\n        };\n    }, [watchPrometheus, stopWatchPrometheusQuery]);\n    const providersTypesQueryResult = prometheusResults.getIn([\n        RESOURCE_PROVIDERS_QUERY.PROVIDERS_TYPES,\n        'data',\n    ]);\n    const providersTypesQueryResultError = prometheusResults.getIn([\n        RESOURCE_PROVIDERS_QUERY.PROVIDERS_TYPES,\n        'loadError',\n    ]);\n    const unhealthyProvidersTypesQueryResult = prometheusResults.getIn([\n        RESOURCE_PROVIDERS_QUERY.UNHEALTHY_PROVIDERS_TYPES,\n        'data',\n    ]);\n    const unhealthyProvidersTypesQueryResultError = prometheusResults.getIn([\n        RESOURCE_PROVIDERS_QUERY.UNHEALTHY_PROVIDERS_TYPES,\n        'loadError',\n    ]);\n    const resourcesLinksResponse = prometheusResults.getIn([\n        RESOURCE_PROVIDERS_QUERY.RESOURCES_LINK_QUERY,\n        'data',\n    ]);\n    const resourcesLinksResponseError = prometheusResults.getIn([\n        RESOURCE_PROVIDERS_QUERY.RESOURCES_LINK_QUERY,\n        'loadError',\n    ]);\n    const error = !!providersTypesQueryResultError ||\n        !!unhealthyProvidersTypesQueryResultError ||\n        !!resourcesLinksResponseError;\n    const noobaaResourcesLink = getMetric(resourcesLinksResponse, 'resources');\n    const allProviders = createProvidersList(providersTypesQueryResult);\n    const unhealthyProviders = createProvidersList(unhealthyProvidersTypesQueryResult);\n    const providerTypes = filterProviders(allProviders);\n    return (React.createElement(DashboardCard, null,\n        React.createElement(DashboardCardHeader, null,\n            React.createElement(DashboardCardTitle, null, \"Resource Providers\"),\n            React.createElement(FieldLevelHelp, null, \"A list of all MCG (Multi-cloud gateway) resources that are currently in use. Those resources are used to store data according to the buckets policies and can be a cloud-based resource or a bare metal resource.\")),\n        React.createElement(DashboardCardBody, null,\n            React.createElement(ResourceProvidersBody, { isLoading: !error && !(providersTypesQueryResult && unhealthyProvidersTypesQueryResult), hasProviders: !_.isEmpty(allProviders), error: error }, providerTypes.map((provider) => (React.createElement(ResourceProvidersItem, { count: allProviders[provider], key: provider, link: noobaaResourcesLink, title: provider, unhealthyProviders: unhealthyProviders })))))));\n};\nexport const ResourceProvidersCard = withDashboardResources(ResourceProviders);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/noobaa-storage-plugin/src/components/resource-providers-card/resource-providers-card.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/noobaa-storage-plugin/src/components/resource-providers-card/resource-providers-card.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport { FieldLevelHelp } from '@console/internal/components/utils/index';\nimport {\n  DashboardItemProps,\n  withDashboardResources,\n} from '@console/internal/components/dashboard/with-dashboard-resources';\nimport { PrometheusResponse } from '@console/internal/components/graphs';\nimport { getMetric } from '../../utils';\nimport { ResourceProvidersBody } from './resource-providers-card-body';\nimport { ResourceProvidersItem, ProviderType } from './resource-providers-card-item';\nimport './resource-providers-card.scss';\n\nconst RESOURCE_PROVIDERS_QUERY = {\n  PROVIDERS_TYPES: ' NooBaa_cloud_types',\n  UNHEALTHY_PROVIDERS_TYPES: 'NooBaa_unhealthy_cloud_types',\n  RESOURCES_LINK_QUERY: 'NooBaa_system_links',\n};\n\nconst getProviderType = (provider: ProviderPrometheusData): string =>\n  _.get(provider, 'metric.type', null);\nconst getProviderCount = (provider: ProviderPrometheusData): number =>\n  Number(_.get(provider, 'value[1]', null));\n\nconst filterProviders = (allProviders: ProviderType): string[] => {\n  return _.keys(allProviders).filter((provider) => allProviders[provider] > 0);\n};\n\nconst createProvidersList = (data: PrometheusResponse): ProviderType => {\n  const providers = _.get(data, 'data.result', null);\n  const providersList: ProviderType = {};\n  if (_.isNil(providers)) return {};\n  providers.forEach((provider) => {\n    providersList[getProviderType(provider)] = getProviderCount(provider);\n  });\n  return providersList;\n};\n\nconst ResourceProviders: React.FC<DashboardItemProps> = ({\n  watchPrometheus,\n  stopWatchPrometheusQuery,\n  prometheusResults,\n}) => {\n  React.useEffect(() => {\n    watchPrometheus(RESOURCE_PROVIDERS_QUERY.PROVIDERS_TYPES);\n    watchPrometheus(RESOURCE_PROVIDERS_QUERY.UNHEALTHY_PROVIDERS_TYPES);\n    return () => {\n      stopWatchPrometheusQuery(RESOURCE_PROVIDERS_QUERY.PROVIDERS_TYPES);\n      stopWatchPrometheusQuery(RESOURCE_PROVIDERS_QUERY.UNHEALTHY_PROVIDERS_TYPES);\n    };\n  }, [watchPrometheus, stopWatchPrometheusQuery]);\n\n  const providersTypesQueryResult = prometheusResults.getIn([\n    RESOURCE_PROVIDERS_QUERY.PROVIDERS_TYPES,\n    'data',\n  ]) as PrometheusResponse;\n  const providersTypesQueryResultError = prometheusResults.getIn([\n    RESOURCE_PROVIDERS_QUERY.PROVIDERS_TYPES,\n    'loadError',\n  ]);\n\n  const unhealthyProvidersTypesQueryResult = prometheusResults.getIn([\n    RESOURCE_PROVIDERS_QUERY.UNHEALTHY_PROVIDERS_TYPES,\n    'data',\n  ]) as PrometheusResponse;\n  const unhealthyProvidersTypesQueryResultError = prometheusResults.getIn([\n    RESOURCE_PROVIDERS_QUERY.UNHEALTHY_PROVIDERS_TYPES,\n    'loadError',\n  ]);\n\n  const resourcesLinksResponse = prometheusResults.getIn([\n    RESOURCE_PROVIDERS_QUERY.RESOURCES_LINK_QUERY,\n    'data',\n  ]) as PrometheusResponse;\n  const resourcesLinksResponseError = prometheusResults.getIn([\n    RESOURCE_PROVIDERS_QUERY.RESOURCES_LINK_QUERY,\n    'loadError',\n  ]);\n\n  const error =\n    !!providersTypesQueryResultError ||\n    !!unhealthyProvidersTypesQueryResultError ||\n    !!resourcesLinksResponseError;\n\n  const noobaaResourcesLink = getMetric(resourcesLinksResponse, 'resources');\n\n  const allProviders = createProvidersList(providersTypesQueryResult);\n  const unhealthyProviders = createProvidersList(unhealthyProvidersTypesQueryResult);\n\n  const providerTypes = filterProviders(allProviders);\n\n  return (\n    <DashboardCard>\n      <DashboardCardHeader>\n        <DashboardCardTitle>Resource Providers</DashboardCardTitle>\n        <FieldLevelHelp>\n          A list of all MCG (Multi-cloud gateway) resources that are currently in use. Those\n          resources are used to store data according to the buckets policies and can be a\n          cloud-based resource or a bare metal resource.\n        </FieldLevelHelp>\n      </DashboardCardHeader>\n      <DashboardCardBody>\n        <ResourceProvidersBody\n          isLoading={!error && !(providersTypesQueryResult && unhealthyProvidersTypesQueryResult)}\n          hasProviders={!_.isEmpty(allProviders)}\n          error={error}\n        >\n          {providerTypes.map((provider) => (\n            <ResourceProvidersItem\n              count={allProviders[provider]}\n              key={provider}\n              link={noobaaResourcesLink}\n              title={provider}\n              unhealthyProviders={unhealthyProviders}\n            />\n          ))}\n        </ResourceProvidersBody>\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n};\n\ntype ProviderPrometheusData = {\n  metric: { [key: string]: any };\n  value?: [number, string | number];\n};\n\nexport const ResourceProvidersCard = withDashboardResources(ResourceProviders);\n"]}]}