{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/pipeline-details/WorkflowVisualizationTask.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/pipeline-details/WorkflowVisualizationTask.tsx","mtime":1617182414000},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as cx from 'classnames';\nimport { Firehose, } from '../../../../../../../public/components/utils';\nimport { ClusterTaskModel } from '../../../../../../../public/models';\nimport { ColoredStatusIconWorkFlow } from './StatusIcon';\nimport './WorkflowVisualizationTask.scss';\nexport const WorkflowVisualizationTask = ({ pipelineRunName, task, namespace, pipelineRunStatus, disableTooltip, selected, }) => {\n    const taskStatus = task.status;\n    const taskComponent = (React.createElement(TaskComponent, { pipelineRunName: pipelineRunName, name: task.name || '', namespace: namespace, status: taskStatus, isPipelineRun: !!pipelineRunStatus, disableTooltip: disableTooltip, selected: selected }));\n    if (disableTooltip) {\n        return taskComponent;\n    }\n    let resources;\n    if (task.taskRef.kind === ClusterTaskModel.kind) {\n        resources = [\n            {\n                // kind: referenceForModel(ClusterTaskModel),\n                kind: 'ClusterTask',\n                name: task.taskRef.name,\n                prop: 'task'\n            }\n        ];\n    }\n    else {\n        resources = [\n            {\n                // kind: referenceForModel(TaskModel),\n                kind: 'Task',\n                name: task.taskRef.name,\n                namespace,\n                prop: 'task'\n            }\n        ];\n    }\n    return React.createElement(Firehose, { resources: resources }, taskComponent);\n};\nconst TaskComponent = ({ pipelineRunName, namespace, task, status, name, isPipelineRun, disableTooltip, selected, }) => {\n    const showStatusState = isPipelineRun && !!status && !!status.reason;\n    const visualName = name;\n    let taskPill = (React.createElement(\"div\", { className: cx('odc-pipeline-vis-task__content', {\n            'is-selected': selected\n        }) },\n        React.createElement(\"div\", { className: cx('odc-pipeline-vis-task__title-wrapper', {\n                'is-text-center': !isPipelineRun\n            }) },\n            React.createElement(\"div\", { className: \"odc-pipeline-vis-task__title\" }, visualName)),\n        isPipelineRun && (React.createElement(\"div\", { className: \"odc-pipeline-vis-task__status\" }, showStatusState && (React.createElement(ColoredStatusIconWorkFlow, { status: status.reason, height: 18, width: 18 }))))));\n    const visTask = (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: \"odc-pipeline-vis-task__connector\" }),\n        taskPill));\n    return (React.createElement(\"div\", { className: \"odc-pipeline-vis-task\" }, visTask));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/pipeline-details/WorkflowVisualizationTask.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/pipeline-details/WorkflowVisualizationTask.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,KAAK,EAAE,MAAM,YAAY,CAAC;AAIjC,OAAO,EACL,QAAQ,GACT,MAAM,8CAA8C,CAAC;AACtD,OAAO,EACL,gBAAgB,EACjB,MAAM,oCAAoC,CAAC;AAC5C,OAAO,EAAE,yBAAyB,EAAE,MAAM,cAAc,CAAC;AAIzD,OAAO,kCAAkC,CAAC;AAkC1C,MAAM,CAAC,MAAM,yBAAyB,GAA4C,CAAC,EACjF,eAAe,EACf,IAAI,EACJ,SAAS,EACT,iBAAiB,EACjB,cAAc,EACd,QAAQ,GACT,EAAE,EAAE;IACH,MAAM,UAAU,GAAG,IAAI,CAAC,MAAM,CAAC;IAC/B,MAAM,aAAa,GAAG,CACpB,oBAAC,aAAa,IACZ,eAAe,EAAE,eAAe,EAChC,IAAI,EAAE,IAAI,CAAC,IAAI,IAAI,EAAE,EACrB,SAAS,EAAE,SAAS,EACpB,MAAM,EAAE,UAAU,EAClB,aAAa,EAAE,CAAC,CAAC,iBAAiB,EAClC,cAAc,EAAE,cAAc,EAC9B,QAAQ,EAAE,QAAQ,GAClB,CACH,CAAC;IAEF,IAAI,cAAc,EAAE;QAClB,OAAO,aAAa,CAAC;KACtB;IAED,IAAI,SAAS,CAAC;IACd,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,KAAK,gBAAgB,CAAC,IAAI,EAAE;QAC/C,SAAS,GAAG;YACV;gBACE,6CAA6C;gBAC7C,IAAI,EAAE,aAAa;gBACnB,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI;gBACvB,IAAI,EAAE,MAAM;aACb;SACF,CAAC;KACH;SAAM;QACL,SAAS,GAAG;YACV;gBACE,sCAAsC;gBACtC,IAAI,EAAE,MAAM;gBACZ,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI;gBACvB,SAAS;gBACT,IAAI,EAAE,MAAM;aACb;SACF,CAAC;KACH;IACD,OAAO,oBAAC,QAAQ,IAAC,SAAS,EAAE,SAAS,IAAG,aAAa,CAAY,CAAC;AACpE,CAAC,CAAC;AACF,MAAM,aAAa,GAAwB,CAAC,EAC1C,eAAe,EACf,SAAS,EACT,IAAI,EACJ,MAAM,EACN,IAAI,EACJ,aAAa,EACb,cAAc,EACd,QAAQ,GACT,EAAE,EAAE;IACH,MAAM,eAAe,GAAY,aAAa,IAAI,CAAC,CAAC,MAAM,IAAI,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC;IAC9E,MAAM,UAAU,GAAG,IAAI,CAAC;IAExB,IAAI,QAAQ,GAAG,CACb,6BACE,SAAS,EAAE,EAAE,CAAC,gCAAgC,EAAE;YAC9C,aAAa,EAAE,QAAQ;SACxB,CAAC;QAEF,6BACE,SAAS,EAAE,EAAE,CAAC,sCAAsC,EAAE;gBACpD,gBAAgB,EAAE,CAAC,aAAa;aACjC,CAAC;YAEF,6BAAK,SAAS,EAAC,8BAA8B,IAAE,UAAU,CAAO,CAC5D;QACL,aAAa,IAAI,CAChB,6BAAK,SAAS,EAAC,+BAA+B,IAC3C,eAAe,IAAI,CAClB,oBAAC,yBAAyB,IAAC,MAAM,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE,GAAI,CAC5E,CACG,CACP,CACG,CACP,CAAC;IAEF,MAAM,OAAO,GAAG,CACd;QACE,6BAAK,SAAS,EAAC,kCAAkC,GAAG;QACnD,QAAQ,CACR,CACJ,CAAC;IACF,OAAO,CACL,6BAAK,SAAS,EAAC,uBAAuB,IACnC,OAAO,CACJ,CACP,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport * as cx from 'classnames';\nimport {\n  K8sResourceKind,\n} from '../../../../../../../public/module/k8s';\nimport {\n  Firehose,\n} from '../../../../../../../public/components/utils';\nimport {\n  ClusterTaskModel\n} from '../../../../../../../public/models';\nimport { ColoredStatusIconWorkFlow } from './StatusIcon';\nimport {\n  TaskStatus\n} from './pipeline-step-utils';\nimport './WorkflowVisualizationTask.scss';\n\ninterface TaskProps {\n  pipelineRunName?: string;\n  name: string;\n  loaded?: boolean;\n  task?: {\n    data: K8sResourceKind;\n    loaded: boolean;\n  };\n  status?: TaskStatus;\n  namespace: string;\n  isPipelineRun: boolean;\n  disableTooltip?: boolean;\n  selected?: boolean;\n}\n\ninterface WorkflowVisualizationTaskProp {\n  pipelineRunName?: string;\n  namespace: string;\n  task: {\n    name?: string;\n    taskRef: {\n      name: string;\n      kind?: string;\n    };\n    status?: TaskStatus;\n  };\n  taskRun?: string;\n  pipelineRunStatus?: string;\n  disableTooltip?: boolean;\n  selected?: boolean;\n}\n\nexport const WorkflowVisualizationTask: React.FC<WorkflowVisualizationTaskProp> = ({\n  pipelineRunName,\n  task,\n  namespace,\n  pipelineRunStatus,\n  disableTooltip,\n  selected,\n}) => {\n  const taskStatus = task.status;\n  const taskComponent = (\n    <TaskComponent\n      pipelineRunName={pipelineRunName}\n      name={task.name || ''}\n      namespace={namespace}\n      status={taskStatus}\n      isPipelineRun={!!pipelineRunStatus}\n      disableTooltip={disableTooltip}\n      selected={selected}\n    />\n  );\n\n  if (disableTooltip) {\n    return taskComponent;\n  }\n\n  let resources;\n  if (task.taskRef.kind === ClusterTaskModel.kind) {\n    resources = [\n      {\n        // kind: referenceForModel(ClusterTaskModel),\n        kind: 'ClusterTask',\n        name: task.taskRef.name,\n        prop: 'task'\n      }\n    ];\n  } else {\n    resources = [\n      {\n        // kind: referenceForModel(TaskModel),\n        kind: 'Task',\n        name: task.taskRef.name,\n        namespace,\n        prop: 'task'\n      }\n    ];\n  }\n  return <Firehose resources={resources}>{taskComponent}</Firehose>;\n};\nconst TaskComponent: React.FC<TaskProps> = ({\n  pipelineRunName,\n  namespace,\n  task,\n  status,\n  name,\n  isPipelineRun,\n  disableTooltip,\n  selected,\n}) => {\n  const showStatusState: boolean = isPipelineRun && !!status && !!status.reason;\n  const visualName = name;\n\n  let taskPill = (\n    <div\n      className={cx('odc-pipeline-vis-task__content', {\n        'is-selected': selected\n      })}\n    >\n      <div\n        className={cx('odc-pipeline-vis-task__title-wrapper', {\n          'is-text-center': !isPipelineRun\n        })}\n      >\n        <div className=\"odc-pipeline-vis-task__title\">{visualName}</div>\n      </div>\n      {isPipelineRun && (\n        <div className=\"odc-pipeline-vis-task__status\">\n          {showStatusState && (\n            <ColoredStatusIconWorkFlow status={status.reason} height={18} width={18} />\n          )}\n        </div>\n      )}\n    </div>\n  );\n\n  const visTask = (\n    <>\n      <div className=\"odc-pipeline-vis-task__connector\" />\n      {taskPill}\n    </>\n  );\n  return (\n    <div className=\"odc-pipeline-vis-task\">\n      {visTask}\n    </div>\n  );\n};\n"]}]}