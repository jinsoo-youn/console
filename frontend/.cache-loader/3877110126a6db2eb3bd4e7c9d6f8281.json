{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/builds.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/builds.ts","mtime":1615298458760},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport { BuildModel, BuildConfigModel } from '../../models';\nimport { k8sCreate } from './';\nimport { formatDuration } from '../../components/utils/datetime';\nconst BUILD_NUMBER_ANNOTATION = 'openshift.io/build.number';\nexport var BuildPhase;\n(function (BuildPhase) {\n    BuildPhase[\"Cancelled\"] = \"Cancelled\";\n    BuildPhase[\"Complete\"] = \"Complete\";\n    BuildPhase[\"Error\"] = \"Error\";\n    BuildPhase[\"Failed\"] = \"Failed\";\n    BuildPhase[\"New\"] = \"New\";\n    BuildPhase[\"Pending\"] = \"Pending\";\n    BuildPhase[\"Running\"] = \"Running\";\n})(BuildPhase || (BuildPhase = {}));\nconst createBuildRequest = (obj, model, subresource) => {\n    const req = {\n        kind: 'BuildRequest',\n        apiVersion: 'build.openshift.io/v1',\n        metadata: _.pick(obj.metadata, ['name', 'namespace']),\n    };\n    const opts = {\n        name: obj.metadata.name,\n        path: subresource,\n    };\n    return k8sCreate(model, req, opts);\n};\nexport const startBuild = (buildConfig) => {\n    return createBuildRequest(buildConfig, BuildConfigModel, 'instantiate');\n};\nexport const cloneBuild = (build) => {\n    return createBuildRequest(build, BuildModel, 'clone');\n};\nexport const isFinished = (build) => !!_.get(build, 'status.completionTimestamp');\n// Formats duration for finished builds.\nexport const formatBuildDuration = (build) => {\n    if (!isFinished(build)) {\n        return '';\n    }\n    const duration = _.get(build, 'status.duration');\n    if (!_.isFinite(duration)) {\n        return '';\n    }\n    // Duration in the build is returned as nanoseconds. Convert to milliseconds.\n    const ms = Math.floor(duration / 1000 / 1000);\n    return formatDuration(ms);\n};\nexport const getBuildNumber = (build) => {\n    const buildNumber = _.get(build, ['metadata', 'annotations', BUILD_NUMBER_ANNOTATION]);\n    return !!buildNumber && parseInt(buildNumber, 10);\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/builds.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/builds.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAM,WAAW,CAAC;AAE/B,OAAO,EAAE,UAAU,EAAE,gBAAgB,EAAE,MAAM,cAAc,CAAC;AAC5D,OAAO,EAAE,SAAS,EAAE,MAAM,IAAI,CAAC;AAC/B,OAAO,EAAE,cAAc,EAAE,MAAM,iCAAiC,CAAC;AAEjE,MAAM,uBAAuB,GAAG,2BAA2B,CAAC;AAE5D,MAAM,CAAN,IAAY,UAQX;AARD,WAAY,UAAU;IACpB,qCAAuB,CAAA;IACvB,mCAAqB,CAAA;IACrB,6BAAe,CAAA;IACf,+BAAiB,CAAA;IACjB,yBAAW,CAAA;IACX,iCAAmB,CAAA;IACnB,iCAAmB,CAAA;AACrB,CAAC,EARW,UAAU,KAAV,UAAU,QAQrB;AAED,MAAM,kBAAkB,GAAG,CAAC,GAAG,EAAE,KAAK,EAAE,WAAW,EAAE,EAAE;IACrD,MAAM,GAAG,GAAG;QACV,IAAI,EAAE,cAAc;QACpB,UAAU,EAAE,uBAAuB;QACnC,QAAQ,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC;KACtD,CAAC;IACF,MAAM,IAAI,GAAG;QACX,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,IAAI;QACvB,IAAI,EAAE,WAAW;KAClB,CAAC;IACF,OAAO,SAAS,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;AACrC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,WAAW,EAAE,EAAE;IACxC,OAAO,kBAAkB,CAAC,WAAW,EAAE,gBAAgB,EAAE,aAAa,CAAC,CAAC;AAC1E,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,KAAK,EAAE,EAAE;IAClC,OAAO,kBAAkB,CAAC,KAAK,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;AACxD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,4BAA4B,CAAC,CAAC;AAElF,wCAAwC;AACxC,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,KAAK,EAAE,EAAE;IAC3C,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,EAAE;QACtB,OAAO,EAAE,CAAC;KACX;IAED,MAAM,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,iBAAiB,CAAC,CAAC;IACjD,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;QACzB,OAAO,EAAE,CAAC;KACX;IAED,6EAA6E;IAC7E,MAAM,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,GAAG,IAAI,CAAC,CAAC;IAC9C,OAAO,cAAc,CAAC,EAAE,CAAC,CAAC;AAC5B,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,KAAK,EAAE,EAAE;IACtC,MAAM,WAAW,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,UAAU,EAAE,aAAa,EAAE,uBAAuB,CAAC,CAAC,CAAC;IACvF,OAAO,CAAC,CAAC,WAAW,IAAI,QAAQ,CAAC,WAAW,EAAE,EAAE,CAAC,CAAC;AACpD,CAAC,CAAC","sourcesContent":["import * as _ from 'lodash-es';\n\nimport { BuildModel, BuildConfigModel } from '../../models';\nimport { k8sCreate } from './';\nimport { formatDuration } from '../../components/utils/datetime';\n\nconst BUILD_NUMBER_ANNOTATION = 'openshift.io/build.number';\n\nexport enum BuildPhase {\n  Cancelled = 'Cancelled',\n  Complete = 'Complete',\n  Error = 'Error',\n  Failed = 'Failed',\n  New = 'New',\n  Pending = 'Pending',\n  Running = 'Running',\n}\n\nconst createBuildRequest = (obj, model, subresource) => {\n  const req = {\n    kind: 'BuildRequest',\n    apiVersion: 'build.openshift.io/v1',\n    metadata: _.pick(obj.metadata, ['name', 'namespace']),\n  };\n  const opts = {\n    name: obj.metadata.name,\n    path: subresource,\n  };\n  return k8sCreate(model, req, opts);\n};\n\nexport const startBuild = (buildConfig) => {\n  return createBuildRequest(buildConfig, BuildConfigModel, 'instantiate');\n};\n\nexport const cloneBuild = (build) => {\n  return createBuildRequest(build, BuildModel, 'clone');\n};\n\nexport const isFinished = (build) => !!_.get(build, 'status.completionTimestamp');\n\n// Formats duration for finished builds.\nexport const formatBuildDuration = (build) => {\n  if (!isFinished(build)) {\n    return '';\n  }\n\n  const duration = _.get(build, 'status.duration');\n  if (!_.isFinite(duration)) {\n    return '';\n  }\n\n  // Duration in the build is returned as nanoseconds. Convert to milliseconds.\n  const ms = Math.floor(duration / 1000 / 1000);\n  return formatDuration(ms);\n};\n\nexport const getBuildNumber = (build) => {\n  const buildNumber = _.get(build, ['metadata', 'annotations', BUILD_NUMBER_ANNOTATION]);\n  return !!buildNumber && parseInt(buildNumber, 10);\n};\n"]}]}