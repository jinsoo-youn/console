{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/pipelineruns/task-status-tooltip.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/pipelineruns/task-status-tooltip.tsx","mtime":1615298458730},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { runStatus, getRunStatusColor } from '../utils/pipeline-augment';\nimport './task-status-tooltip.scss';\nconst TaskStatusToolTip = ({ taskStatus }) => {\n    return (React.createElement(\"div\", { className: \"odc-task-status-tooltip\" }, Object.keys(runStatus).map((status) => {\n        const { message, pftoken } = getRunStatusColor(status);\n        return taskStatus[status] ? (React.createElement(React.Fragment, { key: status },\n            React.createElement(\"div\", { className: \"odc-task-status-tooltip__legend\", style: { background: pftoken.value } }),\n            React.createElement(\"div\", null, status === runStatus.PipelineNotStarted || status === runStatus.FailedToStart\n                ? message\n                : `${taskStatus[status]} ${message}`))) : null;\n    })));\n};\nexport default TaskStatusToolTip;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/pipelineruns/task-status-tooltip.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/pipelineruns/task-status-tooltip.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAc,SAAS,EAAE,iBAAiB,EAAE,MAAM,2BAA2B,CAAC;AACrF,OAAO,4BAA4B,CAAC;AAMpC,MAAM,iBAAiB,GAAqC,CAAC,EAAE,UAAU,EAAE,EAAE,EAAE;IAC7E,OAAO,CACL,6BAAK,SAAS,EAAC,yBAAyB,IACrC,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;QACrC,MAAM,EAAE,OAAO,EAAE,OAAO,EAAE,GAAG,iBAAiB,CAAC,MAAM,CAAC,CAAC;QACvD,OAAO,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAC1B,oBAAC,KAAK,CAAC,QAAQ,IAAC,GAAG,EAAE,MAAM;YACzB,6BACE,SAAS,EAAC,iCAAiC,EAC3C,KAAK,EAAE,EAAE,UAAU,EAAE,OAAO,CAAC,KAAK,EAAE,GACpC;YACF,iCACG,MAAM,KAAK,SAAS,CAAC,kBAAkB,IAAI,MAAM,KAAK,SAAS,CAAC,aAAa;gBAC5E,CAAC,CAAC,OAAO;gBACT,CAAC,CAAC,GAAG,UAAU,CAAC,MAAM,CAAC,IAAI,OAAO,EAAE,CAClC,CACS,CAClB,CAAC,CAAC,CAAC,IAAI,CAAC;IACX,CAAC,CAAC,CACE,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,iBAAiB,CAAC","sourcesContent":["import * as React from 'react';\nimport { TaskStatus, runStatus, getRunStatusColor } from '../utils/pipeline-augment';\nimport './task-status-tooltip.scss';\n\ninterface TaskStatusToolTipProps {\n  taskStatus: TaskStatus;\n}\n\nconst TaskStatusToolTip: React.FC<TaskStatusToolTipProps> = ({ taskStatus }) => {\n  return (\n    <div className=\"odc-task-status-tooltip\">\n      {Object.keys(runStatus).map((status) => {\n        const { message, pftoken } = getRunStatusColor(status);\n        return taskStatus[status] ? (\n          <React.Fragment key={status}>\n            <div\n              className=\"odc-task-status-tooltip__legend\"\n              style={{ background: pftoken.value }}\n            />\n            <div>\n              {status === runStatus.PipelineNotStarted || status === runStatus.FailedToStart\n                ? message\n                : `${taskStatus[status]} ${message}`}\n            </div>\n          </React.Fragment>\n        ) : null;\n      })}\n    </div>\n  );\n};\n\nexport default TaskStatusToolTip;\n"]}]}