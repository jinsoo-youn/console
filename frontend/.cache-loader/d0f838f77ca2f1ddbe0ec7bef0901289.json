{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm/network-wrapper.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm/network-wrapper.ts","mtime":1616735742430},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { NetworkType, POD_NETWORK } from '../../../constants';\nimport { ObjectWithTypePropertyWrapper } from '../common/object-with-type-property-wrapper';\nexport class NetworkWrapper extends ObjectWithTypePropertyWrapper {\n    constructor(network, copy = false) {\n        super(network, copy, NetworkType);\n        this.getName = () => { var _a; return (_a = this.data) === null || _a === void 0 ? void 0 : _a.name; };\n        this.getMultusNetworkName = () => { var _a, _b; return (_b = (_a = this.data) === null || _a === void 0 ? void 0 : _a.multus) === null || _b === void 0 ? void 0 : _b.networkName; };\n        this.isPodNetwork = () => this.getType() === NetworkType.POD;\n        this.getReadableName = () => {\n            switch (this.getType()) {\n                case NetworkType.MULTUS:\n                    return this.getMultusNetworkName();\n                case NetworkType.POD:\n                    return POD_NETWORK;\n                default:\n                    return null;\n            }\n        };\n    }\n    init({ name }) {\n        if (name !== undefined) {\n            this.data.name = name;\n        }\n        return this;\n    }\n    sanitize(type, { networkName }) {\n        switch (type) {\n            case NetworkType.MULTUS:\n                return { networkName };\n            default:\n                return {};\n        }\n    }\n}\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm/network-wrapper.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm/network-wrapper.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,WAAW,EAAE,WAAW,EAAE,MAAM,oBAAoB,CAAC;AAE9D,OAAO,EAAE,6BAA6B,EAAE,MAAM,6CAA6C,CAAC;AAM5F,MAAM,OAAO,cAAe,SAAQ,6BAKnC;IACC,YAAY,OAAoC,EAAE,IAAI,GAAG,KAAK;QAC5D,KAAK,CAAC,OAAO,EAAE,IAAI,EAAE,WAAW,CAAC,CAAC;QAUpC,YAAO,GAAG,GAAG,EAAE,wBAAC,IAAI,CAAC,IAAI,0CAAE,IAAI,GAAA,CAAC;QAEhC,yBAAoB,GAAG,GAAG,EAAE,kCAAC,IAAI,CAAC,IAAI,0CAAE,MAAM,0CAAE,WAAW,GAAA,CAAC;QAE5D,iBAAY,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,WAAW,CAAC,GAAG,CAAC;QAExD,oBAAe,GAAG,GAAG,EAAE;YACrB,QAAQ,IAAI,CAAC,OAAO,EAAE,EAAE;gBACtB,KAAK,WAAW,CAAC,MAAM;oBACrB,OAAO,IAAI,CAAC,oBAAoB,EAAE,CAAC;gBACrC,KAAK,WAAW,CAAC,GAAG;oBAClB,OAAO,WAAW,CAAC;gBACrB;oBACE,OAAO,IAAI,CAAC;aACf;QACH,CAAC,CAAC;IAxBF,CAAC;IAED,IAAI,CAAC,EAAE,IAAI,EAAqB;QAC9B,IAAI,IAAI,KAAK,SAAS,EAAE;YACtB,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SACvB;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAmBS,QAAQ,CAAC,IAAiB,EAAE,EAAE,WAAW,EAAoB;QACrE,QAAQ,IAAI,EAAE;YACZ,KAAK,WAAW,CAAC,MAAM;gBACrB,OAAO,EAAE,WAAW,EAAE,CAAC;YACzB;gBACE,OAAO,EAAE,CAAC;SACb;IACH,CAAC;CACF","sourcesContent":["import { NetworkType, POD_NETWORK } from '../../../constants';\nimport { V1Network } from '../../../types/vm';\nimport { ObjectWithTypePropertyWrapper } from '../common/object-with-type-property-wrapper';\n\ntype CombinedTypeData = {\n  networkName?: string;\n};\n\nexport class NetworkWrapper extends ObjectWithTypePropertyWrapper<\n  V1Network,\n  NetworkType,\n  CombinedTypeData,\n  NetworkWrapper\n> {\n  constructor(network?: V1Network | NetworkWrapper, copy = false) {\n    super(network, copy, NetworkType);\n  }\n\n  init({ name }: { name?: string }) {\n    if (name !== undefined) {\n      this.data.name = name;\n    }\n    return this;\n  }\n\n  getName = () => this.data?.name;\n\n  getMultusNetworkName = () => this.data?.multus?.networkName;\n\n  isPodNetwork = () => this.getType() === NetworkType.POD;\n\n  getReadableName = () => {\n    switch (this.getType()) {\n      case NetworkType.MULTUS:\n        return this.getMultusNetworkName();\n      case NetworkType.POD:\n        return POD_NETWORK;\n      default:\n        return null;\n    }\n  };\n\n  protected sanitize(type: NetworkType, { networkName }: CombinedTypeData) {\n    switch (type) {\n      case NetworkType.MULTUS:\n        return { networkName };\n      default:\n        return {};\n    }\n  }\n}\n"]}]}