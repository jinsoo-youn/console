{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/shared/hooks.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/shared/hooks.ts","mtime":1615298458660},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { getLabels, getNodeTaints } from '@console/shared';\nimport { getLoadedData, isLoaded } from '../../../../utils';\nconst withOperatorPredicate = (store, label) => {\n    const { key, value, values, operator } = label;\n    const hasMultiple = !!values;\n    switch (operator) {\n        case 'Exists':\n            return _.has(store, key);\n        case 'DoesNotExist':\n            return !_.has(store, key);\n        case 'In':\n            return !hasMultiple\n                ? _.get(store, key) === value\n                : values.some((singleValue) => _.get(store, key) === singleValue);\n        case 'NotIn':\n            return !hasMultiple\n                ? _.get(store, key) === value\n                : values.every((singleValue) => _.get(store, key) !== singleValue);\n        default:\n            return value ? _.get(store, key) === value : _.has(store, key);\n    }\n};\nexport const useNodeQualifier = (nodes, constraintType, constraints) => {\n    const loadedNodes = getLoadedData(nodes, []);\n    const isNodesLoaded = isLoaded(nodes);\n    const [qualifiedNodes, setQualifiedNodes] = React.useState([]);\n    React.useEffect(() => {\n        const filteredConstraints = constraints.filter(({ key }) => !!key);\n        if (!_.isEmpty(filteredConstraints) && isNodesLoaded) {\n            const filteredNodes = [];\n            loadedNodes.forEach((node) => {\n                if (constraintType === 'label') {\n                    const nodeLabels = getLabels(node);\n                    if (nodeLabels &&\n                        filteredConstraints.every((label) => withOperatorPredicate(nodeLabels, label))) {\n                        filteredNodes.push(node);\n                    }\n                }\n                if (constraintType === 'field' &&\n                    filteredConstraints.every((field) => withOperatorPredicate(node, field))) {\n                    filteredNodes.push(node);\n                }\n                if (constraintType === 'taint') {\n                    const nodeTaints = getNodeTaints(node);\n                    if (nodeTaints &&\n                        filteredConstraints.every(({ key, value, effect }) => nodeTaints.some((taint) => taint.key === key && (!value || taint.value === value) && taint.effect === effect))) {\n                        filteredNodes.push(node);\n                    }\n                }\n            });\n            setQualifiedNodes(filteredNodes);\n        }\n    }, [constraintType, constraints, loadedNodes, isNodesLoaded]);\n    return qualifiedNodes;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/shared/hooks.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/shared/hooks.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { FirehoseResult } from '@console/internal/components/utils';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport { getLabels, getNodeTaints } from '@console/shared';\nimport { getLoadedData, isLoaded } from '../../../../utils';\nimport { IDLabel } from '../../../LabelsList/types';\n\nconst withOperatorPredicate = <T extends IDLabel = IDLabel>(store: any, label: T) => {\n  const { key, value, values, operator } = label;\n  const hasMultiple = !!values;\n\n  switch (operator) {\n    case 'Exists':\n      return _.has(store, key);\n    case 'DoesNotExist':\n      return !_.has(store, key);\n    case 'In':\n      return !hasMultiple\n        ? _.get(store, key) === value\n        : values.some((singleValue) => _.get(store, key) === singleValue);\n    case 'NotIn':\n      return !hasMultiple\n        ? _.get(store, key) === value\n        : values.every((singleValue) => _.get(store, key) !== singleValue);\n    default:\n      return value ? _.get(store, key) === value : _.has(store, key);\n  }\n};\n\nexport const useNodeQualifier = <T extends IDLabel = IDLabel>(\n  nodes: FirehoseResult<NodeKind[]>,\n  constraintType: NodeQualifierPropertyType,\n  constraints: T[],\n): NodeKind[] => {\n  const loadedNodes = getLoadedData(nodes, []);\n  const isNodesLoaded = isLoaded(nodes);\n\n  const [qualifiedNodes, setQualifiedNodes] = React.useState([]);\n\n  React.useEffect(() => {\n    const filteredConstraints = constraints.filter(({ key }) => !!key);\n    if (!_.isEmpty(filteredConstraints) && isNodesLoaded) {\n      const filteredNodes = [];\n      loadedNodes.forEach((node) => {\n        if (constraintType === 'label') {\n          const nodeLabels = getLabels(node);\n          if (\n            nodeLabels &&\n            filteredConstraints.every((label) => withOperatorPredicate<T>(nodeLabels, label))\n          ) {\n            filteredNodes.push(node);\n          }\n        }\n        if (\n          constraintType === 'field' &&\n          filteredConstraints.every((field) => withOperatorPredicate<T>(node, field))\n        ) {\n          filteredNodes.push(node);\n        }\n\n        if (constraintType === 'taint') {\n          const nodeTaints = getNodeTaints(node);\n          if (\n            nodeTaints &&\n            filteredConstraints.every(({ key, value, effect }) =>\n              nodeTaints.some(\n                (taint) =>\n                  taint.key === key && (!value || taint.value === value) && taint.effect === effect,\n              ),\n            )\n          ) {\n            filteredNodes.push(node);\n          }\n        }\n      });\n      setQualifiedNodes(filteredNodes);\n    }\n  }, [constraintType, constraints, loadedNodes, isNodesLoaded]);\n\n  return qualifiedNodes;\n};\n\nexport type NodeQualifierPropertyType = 'label' | 'taint' | 'field';\n"]}]}