{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/actions/features.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/actions/features.ts","mtime":1615298458720},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport { action } from 'typesafe-actions';\nimport { FLAGS } from '@console/shared/src/constants/common';\nimport { GroupModel, SelfSubjectAccessReviewModel, UserModel } from '../models';\nimport { k8sBasePath, k8sCreate } from '../module/k8s';\nimport { coFetchJSON } from '../co-fetch';\nimport { MonitoringRoutes } from '../reducers/monitoring';\nimport { setMonitoringURL } from './monitoring';\nimport * as plugins from '../plugins';\nimport { setClusterID, setCreateProjectMessage, setUser, setConsoleLinks } from './common';\nexport var ActionType;\n(function (ActionType) {\n    ActionType[\"SetFlag\"] = \"setFlag\";\n    ActionType[\"ClearSSARFlags\"] = \"clearSSARFlags\";\n})(ActionType || (ActionType = {}));\nexport const defaults = _.mapValues(FLAGS, (flag) => flag === FLAGS.AUTH_ENABLED ? !window.SERVER_FLAGS.authDisabled : undefined);\nexport const setFlag = (flag, value) => action(ActionType.SetFlag, { flag, value });\nconst retryFlagDetection = (dispatch, cb) => {\n    setTimeout(() => cb(dispatch), 15000);\n};\nexport const handleError = (res, flag, dispatch, cb) => {\n    const status = _.get(res, 'response.status');\n    if (_.includes([403, 502], status)) {\n        dispatch(setFlag(flag, undefined));\n    }\n    if (!_.includes([401, 403, 500], status)) {\n        retryFlagDetection(dispatch, cb);\n    }\n};\nconst projectListPath = `${k8sBasePath}/apis/project.openshift.io/v1/projects?limit=1`;\nconst detectShowOpenShiftStartGuide = (dispatch, canListNS = false) => {\n    // Skip the project check if we know the user can list all namespaces. This\n    // avoids potentially listing thousands of projects more than once (projects\n    // dropdown and flag check). Even though we only ask for one project, the\n    // projects API currently doesn't support paging.\n    //\n    // TODO: Consider adding a global watch for projects / namespaces, which\n    // could remove the need for this flag entirely. It would also prevent us\n    // from re-listing projects when switching from a namespace-scoped resource\n    // to a cluster-scoped resource and back.\n    if (canListNS) {\n        dispatch(setFlag(FLAGS.SHOW_OPENSHIFT_START_GUIDE, false));\n        return;\n    }\n    coFetchJSON(projectListPath).then((res) => dispatch(setFlag(FLAGS.SHOW_OPENSHIFT_START_GUIDE, _.isEmpty(res.items))), (err) => _.get(err, 'response.status') === 404\n        ? dispatch(setFlag(FLAGS.SHOW_OPENSHIFT_START_GUIDE, false))\n        : handleError(err, FLAGS.SHOW_OPENSHIFT_START_GUIDE, dispatch, detectShowOpenShiftStartGuide));\n};\n// Check the user's access to some resources.\nconst ssarChecks = [\n    {\n        flag: FLAGS.CAN_GET_NS,\n        resourceAttributes: { resource: 'namespaces', verb: 'get' },\n    },\n    {\n        flag: FLAGS.CAN_LIST_NS,\n        resourceAttributes: { resource: 'namespaces', verb: 'list' },\n        after: detectShowOpenShiftStartGuide,\n    },\n    {\n        flag: FLAGS.CAN_LIST_NODE,\n        resourceAttributes: { resource: 'nodes', verb: 'list' },\n    },\n    {\n        flag: FLAGS.CAN_LIST_PV,\n        resourceAttributes: { resource: 'persistentvolumes', verb: 'list' },\n    },\n    {\n        flag: FLAGS.CAN_LIST_USERS,\n        resourceAttributes: {\n            group: UserModel.apiGroup,\n            resource: UserModel.plural,\n            verb: 'list',\n        },\n    },\n    {\n        flag: FLAGS.CAN_LIST_GROUPS,\n        resourceAttributes: {\n            group: GroupModel.apiGroup,\n            resource: GroupModel.plural,\n            verb: 'list',\n        },\n    },\n    {\n        flag: FLAGS.CAN_LIST_CRD,\n        resourceAttributes: {\n            group: 'apiextensions.k8s.io',\n            resource: 'customresourcedefinitions',\n            verb: 'list',\n        },\n    },\n    {\n        // TODO: Move into OLM plugin\n        flag: FLAGS.CAN_LIST_OPERATOR_GROUP,\n        resourceAttributes: {\n            group: 'operators.coreos.com',\n            resource: 'operatorgroups',\n            verb: 'list',\n        },\n    },\n    {\n        // TODO: Move into OLM plugin\n        flag: FLAGS.CAN_LIST_PACKAGE_MANIFEST,\n        resourceAttributes: {\n            group: 'packages.operators.coreos.com',\n            resource: 'packagemanifests',\n            verb: 'list',\n        },\n    },\n    {\n        flag: FLAGS.CAN_LIST_CHARGEBACK_REPORTS,\n        resourceAttributes: {\n            group: 'metering.openshift.io',\n            resource: 'reports',\n            namespace: 'openshift-metering',\n            verb: 'list',\n        },\n    },\n];\nexport const clearSSARFlags = () => action(ActionType.ClearSSARFlags, {\n    flags: ssarChecks.map((check) => check.flag),\n});\nconst featureActions = { setFlag };\nconst clearFlags = { clearSSARFlags };\nconst openshiftPath = `${k8sBasePath}/apis/apps.openshift.io/v1`;\nconst detectOpenShift = (dispatch) => coFetchJSON(openshiftPath).then((res) => dispatch(setFlag(FLAGS.OPENSHIFT, _.size(res.resources) > 0)), (err) => _.get(err, 'response.status') === 404\n    ? dispatch(setFlag(FLAGS.OPENSHIFT, false))\n    : handleError(err, FLAGS.OPENSHIFT, dispatch, detectOpenShift));\nconst clusterVersionPath = `${k8sBasePath}/apis/config.openshift.io/v1/clusterversions/version`;\nconst detectClusterVersion = (dispatch) => coFetchJSON(clusterVersionPath).then((clusterVersion) => {\n    const hasClusterVersion = !_.isEmpty(clusterVersion);\n    dispatch(setFlag(FLAGS.CLUSTER_VERSION, hasClusterVersion));\n    dispatch(setClusterID(clusterVersion.spec.clusterID));\n}, (err) => {\n    if (_.includes([403, 404], _.get(err, 'response.status'))) {\n        dispatch(setFlag(FLAGS.CLUSTER_VERSION, false));\n    }\n    else {\n        handleError(err, FLAGS.CLUSTER_VERSION, dispatch, detectClusterVersion);\n    }\n});\nconst projectRequestPath = `${k8sBasePath}/apis/project.openshift.io/v1/projectrequests`;\nconst detectCanCreateProject = (dispatch) => coFetchJSON(projectRequestPath).then((res) => dispatch(setFlag(FLAGS.CAN_CREATE_PROJECT, res.status === 'Success')), (err) => {\n    const status = _.get(err, 'response.status');\n    if (status === 403) {\n        dispatch(setFlag(FLAGS.CAN_CREATE_PROJECT, false));\n        dispatch(setCreateProjectMessage(_.get(err, 'json.details.causes[0].message')));\n    }\n    else if (!_.includes([400, 404, 500], status)) {\n        retryFlagDetection(dispatch, detectCanCreateProject);\n    }\n});\nconst loggingConfigMapPath = `${k8sBasePath}/api/v1/namespaces/openshift-logging/configmaps/sharing-config`;\nconst detectLoggingURL = (dispatch) => coFetchJSON(loggingConfigMapPath).then((res) => {\n    const { kibanaAppURL } = res.data;\n    if (!_.isEmpty(kibanaAppURL)) {\n        dispatch(setMonitoringURL(MonitoringRoutes.Kibana, kibanaAppURL));\n    }\n}, (err) => {\n    if (!_.includes([401, 403, 404, 500], _.get(err, 'response.status'))) {\n        setTimeout(() => detectLoggingURL(dispatch), 15000);\n    }\n});\nconst detectUser = (dispatch) => coFetchJSON('api/kubernetes/apis/user.openshift.io/v1/users/~').then((user) => {\n    dispatch(setUser(user));\n}, (err) => {\n    if (!_.includes([401, 403, 404, 500], _.get(err, 'response.status'))) {\n        setTimeout(() => detectUser(dispatch), 15000);\n    }\n});\nconst detectConsoleLinks = (dispatch) => coFetchJSON('api/kubernetes/apis/console.openshift.io/v1/consolelinks').then((consoleLinks) => {\n    dispatch(setConsoleLinks(_.get(consoleLinks, 'items')));\n}, (err) => {\n    if (!_.includes([401, 403, 404, 500], _.get(err, 'response.status'))) {\n        setTimeout(() => detectConsoleLinks(dispatch), 15000);\n    }\n});\nconst ssarCheckActions = ssarChecks.map(({ flag, resourceAttributes, after }) => {\n    const req = {\n        spec: { resourceAttributes },\n    };\n    const fn = (dispatch) => {\n        return k8sCreate(SelfSubjectAccessReviewModel, req).then((res) => {\n            const allowed = res.status.allowed;\n            dispatch(setFlag(flag, allowed));\n            if (after) {\n                after(dispatch, allowed);\n            }\n        }, (err) => handleError(err, flag, dispatch, fn));\n    };\n    return fn;\n});\nexport const detectFeatures = () => (dispatch) => [\n    detectOpenShift,\n    detectCanCreateProject,\n    detectClusterVersion,\n    detectUser,\n    detectLoggingURL,\n    detectConsoleLinks,\n    ...ssarCheckActions,\n    ...plugins.registry.getCustomFeatureFlags().map((ff) => ff.properties.detect),\n].forEach((detect) => detect(dispatch));\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/actions/features.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/actions/features.ts"],"names":[],"mappings":"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","sourcesContent":["import { Dispatch } from 'react-redux';\nimport * as _ from 'lodash-es';\nimport { ActionType as Action, action } from 'typesafe-actions';\nimport { FLAGS } from '@console/shared/src/constants/common';\nimport { GroupModel, SelfSubjectAccessReviewModel, UserModel } from '../models';\nimport { k8sBasePath, ClusterVersionKind, k8sCreate } from '../module/k8s';\nimport { receivedResources } from './k8s';\nimport { coFetchJSON } from '../co-fetch';\nimport { MonitoringRoutes } from '../reducers/monitoring';\nimport { setMonitoringURL } from './monitoring';\nimport * as plugins from '../plugins';\nimport { setClusterID, setCreateProjectMessage, setUser, setConsoleLinks } from './common';\n\nexport enum ActionType {\n  SetFlag = 'setFlag',\n  ClearSSARFlags = 'clearSSARFlags',\n}\n\nexport const defaults = _.mapValues(FLAGS, (flag) =>\n  flag === FLAGS.AUTH_ENABLED ? !window.SERVER_FLAGS.authDisabled : undefined,\n);\n\nexport const setFlag = (flag: FLAGS | string, value: boolean) =>\n  action(ActionType.SetFlag, { flag, value });\n\nconst retryFlagDetection = (dispatch, cb) => {\n  setTimeout(() => cb(dispatch), 15000);\n};\n\nexport const handleError = (res, flag, dispatch, cb) => {\n  const status = _.get(res, 'response.status');\n  if (_.includes([403, 502], status)) {\n    dispatch(setFlag(flag, undefined));\n  }\n  if (!_.includes([401, 403, 500], status)) {\n    retryFlagDetection(dispatch, cb);\n  }\n};\n\nconst projectListPath = `${k8sBasePath}/apis/project.openshift.io/v1/projects?limit=1`;\nconst detectShowOpenShiftStartGuide = (dispatch, canListNS: boolean = false) => {\n  // Skip the project check if we know the user can list all namespaces. This\n  // avoids potentially listing thousands of projects more than once (projects\n  // dropdown and flag check). Even though we only ask for one project, the\n  // projects API currently doesn't support paging.\n  //\n  // TODO: Consider adding a global watch for projects / namespaces, which\n  // could remove the need for this flag entirely. It would also prevent us\n  // from re-listing projects when switching from a namespace-scoped resource\n  // to a cluster-scoped resource and back.\n  if (canListNS) {\n    dispatch(setFlag(FLAGS.SHOW_OPENSHIFT_START_GUIDE, false));\n    return;\n  }\n\n  coFetchJSON(projectListPath).then(\n    (res) => dispatch(setFlag(FLAGS.SHOW_OPENSHIFT_START_GUIDE, _.isEmpty(res.items))),\n    (err) =>\n      _.get(err, 'response.status') === 404\n        ? dispatch(setFlag(FLAGS.SHOW_OPENSHIFT_START_GUIDE, false))\n        : handleError(\n            err,\n            FLAGS.SHOW_OPENSHIFT_START_GUIDE,\n            dispatch,\n            detectShowOpenShiftStartGuide,\n          ),\n  );\n};\n\n// Check the user's access to some resources.\nconst ssarChecks = [\n  {\n    flag: FLAGS.CAN_GET_NS,\n    resourceAttributes: { resource: 'namespaces', verb: 'get' },\n  },\n  {\n    flag: FLAGS.CAN_LIST_NS,\n    resourceAttributes: { resource: 'namespaces', verb: 'list' },\n    after: detectShowOpenShiftStartGuide,\n  },\n  {\n    flag: FLAGS.CAN_LIST_NODE,\n    resourceAttributes: { resource: 'nodes', verb: 'list' },\n  },\n  {\n    flag: FLAGS.CAN_LIST_PV,\n    resourceAttributes: { resource: 'persistentvolumes', verb: 'list' },\n  },\n  {\n    flag: FLAGS.CAN_LIST_USERS,\n    resourceAttributes: {\n      group: UserModel.apiGroup,\n      resource: UserModel.plural,\n      verb: 'list',\n    },\n  },\n  {\n    flag: FLAGS.CAN_LIST_GROUPS,\n    resourceAttributes: {\n      group: GroupModel.apiGroup,\n      resource: GroupModel.plural,\n      verb: 'list',\n    },\n  },\n  {\n    flag: FLAGS.CAN_LIST_CRD,\n    resourceAttributes: {\n      group: 'apiextensions.k8s.io',\n      resource: 'customresourcedefinitions',\n      verb: 'list',\n    },\n  },\n  {\n    // TODO: Move into OLM plugin\n    flag: FLAGS.CAN_LIST_OPERATOR_GROUP,\n    resourceAttributes: {\n      group: 'operators.coreos.com',\n      resource: 'operatorgroups',\n      verb: 'list',\n    },\n  },\n  {\n    // TODO: Move into OLM plugin\n    flag: FLAGS.CAN_LIST_PACKAGE_MANIFEST,\n    resourceAttributes: {\n      group: 'packages.operators.coreos.com',\n      resource: 'packagemanifests',\n      verb: 'list',\n    },\n  },\n  {\n    flag: FLAGS.CAN_LIST_CHARGEBACK_REPORTS,\n    resourceAttributes: {\n      group: 'metering.openshift.io',\n      resource: 'reports',\n      namespace: 'openshift-metering',\n      verb: 'list',\n    },\n  },\n];\n\nexport const clearSSARFlags = () =>\n  action(ActionType.ClearSSARFlags, {\n    flags: ssarChecks.map((check) => check.flag),\n  });\n\nconst featureActions = { setFlag };\nconst clearFlags = { clearSSARFlags };\n\nexport type FeatureAction = Action<\n  typeof featureActions | typeof receivedResources | typeof clearFlags\n>;\n\nconst openshiftPath = `${k8sBasePath}/apis/apps.openshift.io/v1`;\nconst detectOpenShift = (dispatch) =>\n  coFetchJSON(openshiftPath).then(\n    (res) => dispatch(setFlag(FLAGS.OPENSHIFT, _.size(res.resources) > 0)),\n    (err) =>\n      _.get(err, 'response.status') === 404\n        ? dispatch(setFlag(FLAGS.OPENSHIFT, false))\n        : handleError(err, FLAGS.OPENSHIFT, dispatch, detectOpenShift),\n  );\n\nconst clusterVersionPath = `${k8sBasePath}/apis/config.openshift.io/v1/clusterversions/version`;\nconst detectClusterVersion = (dispatch) =>\n  coFetchJSON(clusterVersionPath).then(\n    (clusterVersion: ClusterVersionKind) => {\n      const hasClusterVersion = !_.isEmpty(clusterVersion);\n      dispatch(setFlag(FLAGS.CLUSTER_VERSION, hasClusterVersion));\n      dispatch(setClusterID(clusterVersion.spec.clusterID));\n    },\n    (err) => {\n      if (_.includes([403, 404], _.get(err, 'response.status'))) {\n        dispatch(setFlag(FLAGS.CLUSTER_VERSION, false));\n      } else {\n        handleError(err, FLAGS.CLUSTER_VERSION, dispatch, detectClusterVersion);\n      }\n    },\n  );\n\nconst projectRequestPath = `${k8sBasePath}/apis/project.openshift.io/v1/projectrequests`;\nconst detectCanCreateProject = (dispatch) =>\n  coFetchJSON(projectRequestPath).then(\n    (res) => dispatch(setFlag(FLAGS.CAN_CREATE_PROJECT, res.status === 'Success')),\n    (err) => {\n      const status = _.get(err, 'response.status');\n      if (status === 403) {\n        dispatch(setFlag(FLAGS.CAN_CREATE_PROJECT, false));\n        dispatch(setCreateProjectMessage(_.get(err, 'json.details.causes[0].message')));\n      } else if (!_.includes([400, 404, 500], status)) {\n        retryFlagDetection(dispatch, detectCanCreateProject);\n      }\n    },\n  );\n\nconst loggingConfigMapPath = `${k8sBasePath}/api/v1/namespaces/openshift-logging/configmaps/sharing-config`;\nconst detectLoggingURL = (dispatch) =>\n  coFetchJSON(loggingConfigMapPath).then(\n    (res) => {\n      const { kibanaAppURL } = res.data;\n      if (!_.isEmpty(kibanaAppURL)) {\n        dispatch(setMonitoringURL(MonitoringRoutes.Kibana, kibanaAppURL));\n      }\n    },\n    (err) => {\n      if (!_.includes([401, 403, 404, 500], _.get(err, 'response.status'))) {\n        setTimeout(() => detectLoggingURL(dispatch), 15000);\n      }\n    },\n  );\n\nconst detectUser = (dispatch) =>\n  coFetchJSON('api/kubernetes/apis/user.openshift.io/v1/users/~').then(\n    (user) => {\n      dispatch(setUser(user));\n    },\n    (err) => {\n      if (!_.includes([401, 403, 404, 500], _.get(err, 'response.status'))) {\n        setTimeout(() => detectUser(dispatch), 15000);\n      }\n    },\n  );\n\nconst detectConsoleLinks = (dispatch) =>\n  coFetchJSON('api/kubernetes/apis/console.openshift.io/v1/consolelinks').then(\n    (consoleLinks) => {\n      dispatch(setConsoleLinks(_.get(consoleLinks, 'items')));\n    },\n    (err) => {\n      if (!_.includes([401, 403, 404, 500], _.get(err, 'response.status'))) {\n        setTimeout(() => detectConsoleLinks(dispatch), 15000);\n      }\n    },\n  );\n\nconst ssarCheckActions = ssarChecks.map(({ flag, resourceAttributes, after }) => {\n  const req = {\n    spec: { resourceAttributes },\n  };\n  const fn = (dispatch) => {\n    return k8sCreate(SelfSubjectAccessReviewModel, req).then(\n      (res) => {\n        const allowed: boolean = res.status.allowed;\n        dispatch(setFlag(flag, allowed));\n        if (after) {\n          after(dispatch, allowed);\n        }\n      },\n      (err) => handleError(err, flag, dispatch, fn),\n    );\n  };\n  return fn;\n});\n\nexport const detectFeatures = () => (dispatch: Dispatch) =>\n  [\n    detectOpenShift,\n    detectCanCreateProject,\n    detectClusterVersion,\n    detectUser,\n    detectLoggingURL,\n    detectConsoleLinks,\n    ...ssarCheckActions,\n    ...plugins.registry.getCustomFeatureFlags().map((ff) => ff.properties.detect),\n  ].forEach((detect) => detect(dispatch));\n"]}]}