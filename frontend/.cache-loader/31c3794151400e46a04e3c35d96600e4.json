{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/dashboard/dashboards-page/cluster-dashboard/health-item.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/dashboard/dashboards-page/cluster-dashboard/health-item.tsx","mtime":1616735742460},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport HealthItem from '@console/shared/src/components/dashboard/status-card/HealthItem';\nimport { OperatorsSection } from '@console/shared/src/components/dashboard/status-card/OperatorStatusBody';\nimport { getOperatorsHealthState, getMostImportantStatuses } from '@console/shared/src/components/dashboard/status-card/state-utils';\nimport { HealthState } from '@console/shared/src/components/dashboard/status-card/states';\nimport { AsyncComponent, resourcePath } from '../../../utils';\nimport { useK8sWatchResources } from '../../../utils/k8s-watch-hook';\nimport { withDashboardResources } from '../../with-dashboard-resources';\nimport { uniqueResource } from './utils';\nimport { getPrometheusQueryResponse } from '../../../../actions/dashboards';\nimport { useTranslation } from 'react-i18next';\nexport const OperatorsPopup = ({ resources, operatorExtensions }) => {\n    const { t } = useTranslation();\n    const sections = operatorExtensions\n        .map((o, index) => {\n        const operatorResources = o.properties.resources.reduce((acc, r) => {\n            acc[r.prop] = resources[uniqueResource(r, index).prop];\n            return acc;\n        }, {});\n        return React.createElement(OperatorsSection, { key: o.properties.title, resources: operatorResources, getOperatorsWithStatuses: o.properties.getOperatorsWithStatuses, title: o.properties.title, linkTo: o.properties.viewAllLink || resourcePath(o.properties.resources[0].kind), rowLoader: o.properties.operatorRowLoader });\n    })\n        .reverse();\n    return (React.createElement(React.Fragment, null,\n        t('SINGLE:MSG_OVERVIEW_MAIN_POPOVEROPERATOR_DESCRIPTION_1'),\n        sections));\n};\nexport const OperatorHealthItem = withDashboardResources(({ resources, watchK8sResource, stopWatchK8sResource, operatorExtensions }) => {\n    React.useEffect(() => {\n        operatorExtensions.forEach((o, index) => o.properties.resources.forEach(r => watchK8sResource(uniqueResource(r, index))));\n        return () => {\n            operatorExtensions.forEach((o, index) => o.properties.resources.forEach(r => stopWatchK8sResource(uniqueResource(r, index))));\n        };\n    }, [watchK8sResource, stopWatchK8sResource, operatorExtensions]);\n    const { t } = useTranslation();\n    const healthStatuses = operatorExtensions.map((o, index) => {\n        const operatorResources = o.properties.resources.reduce((acc, r) => {\n            acc[r.prop] = resources[uniqueResource(r, index).prop] || {};\n            return acc;\n        }, {});\n        if (Object.keys(operatorResources).some(resource => operatorResources[resource].loadError)) {\n            return { health: HealthState.NOT_AVAILABLE };\n        }\n        if (Object.keys(operatorResources).some(resource => !operatorResources[resource].loaded)) {\n            return { health: HealthState.LOADING };\n        }\n        const operatorStatuses = o.properties.getOperatorsWithStatuses(operatorResources);\n        const importantStatuses = getMostImportantStatuses(operatorStatuses);\n        return {\n            health: importantStatuses[0].status.health,\n            count: importantStatuses.length,\n        };\n    });\n    const operatorsHealth = getOperatorsHealthState(healthStatuses);\n    return (React.createElement(HealthItem, { title: t('SINGLE:MSG_OVERVIEW_MAIN_CARDSTATUS_OPERATORS_1'), state: operatorsHealth.health, details: operatorsHealth.detailMessage, popupTitle: t('SINGLE:MSG_OVERVIEW_MAIN_POPOVEROPERATOR_TITLE_1') },\n        React.createElement(OperatorsPopup, { resources: resources, operatorExtensions: operatorExtensions })));\n});\nexport const URLHealthItem = withDashboardResources(({ watchURL, stopWatchURL, urlResults, resources, watchK8sResource, stopWatchK8sResource, subsystem, models }) => {\n    const { t } = useTranslation();\n    const modelExists = subsystem.additionalResource && !!models.get(subsystem.additionalResource.kind);\n    React.useEffect(() => {\n        watchURL(subsystem.url, subsystem.fetch);\n        if (modelExists) {\n            watchK8sResource(subsystem.additionalResource);\n        }\n        return () => {\n            stopWatchURL(subsystem.url);\n            if (modelExists) {\n                stopWatchK8sResource(subsystem.additionalResource);\n            }\n        };\n    }, [watchURL, stopWatchURL, watchK8sResource, stopWatchK8sResource, subsystem, modelExists]);\n    const healthResult = urlResults.getIn([subsystem.url, 'data']);\n    const healthResultError = urlResults.getIn([subsystem.url, 'loadError']);\n    const k8sResult = subsystem.additionalResource ? resources[subsystem.additionalResource.prop] : null;\n    const healthState = subsystem.healthHandler(healthResult, healthResultError, k8sResult);\n    if (subsystem.title === 'Cluster') {\n        subsystem.title = t('SINGLE:MSG_OVERVIEW_MAIN_TABCLUSTER_1');\n    }\n    return (React.createElement(HealthItem, { title: subsystem.title, state: healthState.state, details: healthState.message, popupTitle: subsystem.popupTitle }, subsystem.popupComponent && React.createElement(AsyncComponent, { loader: subsystem.popupComponent, healthResult: healthResult, healthResultError: healthResultError, k8sResult: k8sResult })));\n});\nexport const PrometheusHealthItem = withDashboardResources(({ watchK8sResource, stopWatchK8sResource, resources, watchPrometheus, stopWatchPrometheusQuery, prometheusResults, subsystem, models }) => {\n    const modelExists = subsystem.additionalResource && !!models.get(subsystem.additionalResource.kind);\n    React.useEffect(() => {\n        subsystem.queries.forEach(q => watchPrometheus(q));\n        if (modelExists) {\n            watchK8sResource(subsystem.additionalResource);\n        }\n        return () => {\n            subsystem.queries.forEach(q => stopWatchPrometheusQuery(q));\n            if (modelExists) {\n                stopWatchK8sResource(subsystem.additionalResource);\n            }\n        };\n    }, [watchK8sResource, stopWatchK8sResource, watchPrometheus, stopWatchPrometheusQuery, subsystem, modelExists]);\n    const queryResults = React.useMemo(() => subsystem.queries.map(q => {\n        const [response, error] = getPrometheusQueryResponse(prometheusResults, q);\n        return {\n            response,\n            error,\n        };\n    }), [prometheusResults, subsystem.queries]);\n    const k8sResult = subsystem.additionalResource ? resources[subsystem.additionalResource.prop] : null;\n    const healthState = subsystem.healthHandler(queryResults, k8sResult);\n    return (React.createElement(HealthItem, { title: subsystem.title, state: healthState.state, details: healthState.message, popupTitle: subsystem.popupTitle }, subsystem.popupComponent && React.createElement(AsyncComponent, { loader: subsystem.popupComponent, responses: queryResults, k8sResult: k8sResult })));\n});\nexport const ResourceHealthItem = ({ subsystem }) => {\n    const { title, resources, healthHandler, popupComponent, popupTitle } = subsystem;\n    const resourcesResult = useK8sWatchResources(resources);\n    const healthState = healthHandler(resourcesResult);\n    return (React.createElement(HealthItem, { title: title, state: healthState.state, details: healthState.message, popupTitle: popupTitle }, popupComponent && React.createElement(AsyncComponent, Object.assign({ loader: popupComponent }, resourcesResult))));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/dashboard/dashboards-page/cluster-dashboard/health-item.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/dashboard/dashboards-page/cluster-dashboard/health-item.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Map as ImmutableMap } from 'immutable';\nimport { DashboardsOverviewHealthOperator, DashboardsOverviewHealthURLSubsystem, DashboardsOverviewHealthPrometheusSubsystem, DashboardsOverviewHealthResourceSubsystem } from '@console/plugin-sdk';\nimport HealthItem from '@console/shared/src/components/dashboard/status-card/HealthItem';\nimport { OperatorsSection } from '@console/shared/src/components/dashboard/status-card/OperatorStatusBody';\nimport { getOperatorsHealthState, getMostImportantStatuses } from '@console/shared/src/components/dashboard/status-card/state-utils';\nimport { HealthState } from '@console/shared/src/components/dashboard/status-card/states';\nimport { K8sKind } from '../../../../module/k8s';\nimport { FirehoseResourcesResult, AsyncComponent, resourcePath } from '../../../utils';\nimport { useK8sWatchResources } from '../../../utils/k8s-watch-hook';\nimport { withDashboardResources, DashboardItemProps } from '../../with-dashboard-resources';\nimport { uniqueResource } from './utils';\nimport { getPrometheusQueryResponse } from '../../../../actions/dashboards';\nimport { useTranslation } from 'react-i18next';\n\nexport const OperatorsPopup: React.FC<OperatorsPopupProps> = ({ resources, operatorExtensions }) => {\n  const { t } = useTranslation();\n  const sections = operatorExtensions\n    .map((o, index) => {\n      const operatorResources = o.properties.resources.reduce((acc, r) => {\n        acc[r.prop] = resources[uniqueResource(r, index).prop];\n        return acc;\n      }, {});\n      return <OperatorsSection key={o.properties.title} resources={operatorResources} getOperatorsWithStatuses={o.properties.getOperatorsWithStatuses} title={o.properties.title} linkTo={o.properties.viewAllLink || resourcePath(o.properties.resources[0].kind)} rowLoader={o.properties.operatorRowLoader} />;\n    })\n    .reverse();\n  return (\n    <>\n      {t('SINGLE:MSG_OVERVIEW_MAIN_POPOVEROPERATOR_DESCRIPTION_1')}\n      {sections}\n    </>\n  );\n};\n\nexport const OperatorHealthItem = withDashboardResources<OperatorHealthItemProps>(({ resources, watchK8sResource, stopWatchK8sResource, operatorExtensions }) => {\n  React.useEffect(() => {\n    operatorExtensions.forEach((o, index) => o.properties.resources.forEach(r => watchK8sResource(uniqueResource(r, index))));\n    return () => {\n      operatorExtensions.forEach((o, index) => o.properties.resources.forEach(r => stopWatchK8sResource(uniqueResource(r, index))));\n    };\n  }, [watchK8sResource, stopWatchK8sResource, operatorExtensions]);\n  const { t } = useTranslation();\n  const healthStatuses = operatorExtensions.map((o, index) => {\n    const operatorResources = o.properties.resources.reduce((acc, r) => {\n      acc[r.prop] = resources[uniqueResource(r, index).prop] || {};\n      return acc;\n    }, {});\n    if (Object.keys(operatorResources).some(resource => operatorResources[resource].loadError)) {\n      return { health: HealthState.NOT_AVAILABLE };\n    }\n    if (Object.keys(operatorResources).some(resource => !operatorResources[resource].loaded)) {\n      return { health: HealthState.LOADING };\n    }\n    const operatorStatuses = o.properties.getOperatorsWithStatuses(operatorResources);\n    const importantStatuses = getMostImportantStatuses(operatorStatuses);\n    return {\n      health: importantStatuses[0].status.health,\n      count: importantStatuses.length,\n    };\n  });\n\n  const operatorsHealth = getOperatorsHealthState(healthStatuses);\n\n  return (\n    <HealthItem title={t('SINGLE:MSG_OVERVIEW_MAIN_CARDSTATUS_OPERATORS_1')} state={operatorsHealth.health} details={operatorsHealth.detailMessage} popupTitle={t('SINGLE:MSG_OVERVIEW_MAIN_POPOVEROPERATOR_TITLE_1')}>\n      <OperatorsPopup resources={resources} operatorExtensions={operatorExtensions} />\n    </HealthItem>\n  );\n});\n\nexport const URLHealthItem = withDashboardResources<URLHealthItemProps>(({ watchURL, stopWatchURL, urlResults, resources, watchK8sResource, stopWatchK8sResource, subsystem, models }) => {\n  const { t } = useTranslation();\n  const modelExists = subsystem.additionalResource && !!models.get(subsystem.additionalResource.kind);\n  React.useEffect(() => {\n    watchURL(subsystem.url, subsystem.fetch);\n    if (modelExists) {\n      watchK8sResource(subsystem.additionalResource);\n    }\n    return () => {\n      stopWatchURL(subsystem.url);\n      if (modelExists) {\n        stopWatchK8sResource(subsystem.additionalResource);\n      }\n    };\n  }, [watchURL, stopWatchURL, watchK8sResource, stopWatchK8sResource, subsystem, modelExists]);\n\n  const healthResult = urlResults.getIn([subsystem.url, 'data']);\n  const healthResultError = urlResults.getIn([subsystem.url, 'loadError']);\n\n  const k8sResult = subsystem.additionalResource ? resources[subsystem.additionalResource.prop] : null;\n  const healthState = subsystem.healthHandler(healthResult, healthResultError, k8sResult);\n\n  if (subsystem.title === 'Cluster') {\n    subsystem.title = t('SINGLE:MSG_OVERVIEW_MAIN_TABCLUSTER_1');\n  }\n\n  return (\n    <HealthItem title={subsystem.title} state={healthState.state} details={healthState.message} popupTitle={subsystem.popupTitle}>\n      {subsystem.popupComponent && <AsyncComponent loader={subsystem.popupComponent} healthResult={healthResult} healthResultError={healthResultError} k8sResult={k8sResult} />}\n    </HealthItem>\n  );\n});\n\nexport const PrometheusHealthItem = withDashboardResources<PrometheusHealthItemProps>(({ watchK8sResource, stopWatchK8sResource, resources, watchPrometheus, stopWatchPrometheusQuery, prometheusResults, subsystem, models }) => {\n  const modelExists = subsystem.additionalResource && !!models.get(subsystem.additionalResource.kind);\n  React.useEffect(() => {\n    subsystem.queries.forEach(q => watchPrometheus(q));\n    if (modelExists) {\n      watchK8sResource(subsystem.additionalResource);\n    }\n    return () => {\n      subsystem.queries.forEach(q => stopWatchPrometheusQuery(q));\n      if (modelExists) {\n        stopWatchK8sResource(subsystem.additionalResource);\n      }\n    };\n  }, [watchK8sResource, stopWatchK8sResource, watchPrometheus, stopWatchPrometheusQuery, subsystem, modelExists]);\n\n  const queryResults = React.useMemo(\n    () =>\n      subsystem.queries.map(q => {\n        const [response, error] = getPrometheusQueryResponse(prometheusResults, q);\n        return {\n          response,\n          error,\n        };\n      }),\n    [prometheusResults, subsystem.queries],\n  );\n  const k8sResult = subsystem.additionalResource ? resources[subsystem.additionalResource.prop] : null;\n  const healthState = subsystem.healthHandler(queryResults, k8sResult);\n\n  return (\n    <HealthItem title={subsystem.title} state={healthState.state} details={healthState.message} popupTitle={subsystem.popupTitle}>\n      {subsystem.popupComponent && <AsyncComponent loader={subsystem.popupComponent} responses={queryResults} k8sResult={k8sResult} />}\n    </HealthItem>\n  );\n});\n\nexport const ResourceHealthItem: React.FC<ResourceHealthItemProps> = ({ subsystem }) => {\n  const { title, resources, healthHandler, popupComponent, popupTitle } = subsystem;\n  const resourcesResult = useK8sWatchResources(resources);\n\n  const healthState = healthHandler(resourcesResult);\n\n  return (\n    <HealthItem title={title} state={healthState.state} details={healthState.message} popupTitle={popupTitle}>\n      {popupComponent && <AsyncComponent loader={popupComponent} {...resourcesResult} />}\n    </HealthItem>\n  );\n};\n\ntype OperatorHealthItemProps = DashboardItemProps & {\n  operatorExtensions: DashboardsOverviewHealthOperator[];\n};\n\ntype URLHealthItemProps = DashboardItemProps & {\n  subsystem: DashboardsOverviewHealthURLSubsystem<any>['properties'];\n  models: ImmutableMap<string, K8sKind>;\n};\n\ntype PrometheusHealthItemProps = DashboardItemProps & {\n  subsystem: DashboardsOverviewHealthPrometheusSubsystem['properties'];\n  models: ImmutableMap<string, K8sKind>;\n};\n\ntype ResourceHealthItemProps = {\n  subsystem: DashboardsOverviewHealthResourceSubsystem['properties'];\n};\n\ntype OperatorsPopupProps = {\n  resources: FirehoseResourcesResult;\n  operatorExtensions: DashboardsOverviewHealthOperator[];\n};\n"]}]}