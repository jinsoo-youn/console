{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/hooks/document-listener.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/hooks/document-listener.ts","mtime":1616735742380},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { isModalOpen } from '@console/internal/components/modals';\nimport { KEYBOARD_SHORTCUTS } from '../constants/common';\n/**\n * Use this hook for components that require visibility only\n * when the user is actively interacting with the document.\n */\nexport var KeyEventModes;\n(function (KeyEventModes) {\n    KeyEventModes[\"HIDE\"] = \"HIDE\";\n    KeyEventModes[\"FOCUS\"] = \"FOCUS\";\n})(KeyEventModes || (KeyEventModes = {}));\nconst textInputKeyHandler = {\n    [KEYBOARD_SHORTCUTS.blurFilterInput]: KeyEventModes.HIDE,\n    [KEYBOARD_SHORTCUTS.focusFilterInput]: KeyEventModes.FOCUS,\n};\nexport const useDocumentListener = (keyEventMap = textInputKeyHandler) => {\n    const [visible, setVisible] = React.useState(true);\n    const ref = React.useRef(null);\n    const handleEvent = (e) => {\n        var _a;\n        if (!((_a = ref === null || ref === void 0 ? void 0 : ref.current) === null || _a === void 0 ? void 0 : _a.contains(e.target))) {\n            setVisible(false);\n        }\n    };\n    const handleKeyEvents = (e) => {\n        // Don't steal focus from a modal open on top of the page.\n        if (isModalOpen()) {\n            return;\n        }\n        const { nodeName } = e.target;\n        switch (keyEventMap[e.key]) {\n            case KeyEventModes.HIDE:\n                setVisible(false);\n                ref.current.blur();\n                break;\n            case KeyEventModes.FOCUS:\n                if (document.activeElement !== ref.current &&\n                    // Don't steal focus if the user types the focus shortcut in another text input.\n                    nodeName !== 'INPUT' &&\n                    nodeName !== 'TEXTAREA') {\n                    ref.current.focus();\n                    e.preventDefault();\n                }\n                break;\n            default:\n                break;\n        }\n    };\n    React.useEffect(() => {\n        document.addEventListener('click', handleEvent, true);\n        document.addEventListener('keydown', handleKeyEvents, true);\n        return () => {\n            document.removeEventListener('click', handleEvent, true);\n            document.removeEventListener('keydown', handleKeyEvents, true);\n        };\n    });\n    return { visible, setVisible, ref };\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/hooks/document-listener.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/hooks/document-listener.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,WAAW,EAAE,MAAM,qCAAqC,CAAC;AAClE,OAAO,EAAE,kBAAkB,EAAE,MAAM,qBAAqB,CAAC;AAEzD;;;GAGG;AAEH,MAAM,CAAN,IAAY,aAGX;AAHD,WAAY,aAAa;IACvB,8BAAa,CAAA;IACb,gCAAe,CAAA;AACjB,CAAC,EAHW,aAAa,KAAb,aAAa,QAGxB;AAED,MAAM,mBAAmB,GAAG;IAC1B,CAAC,kBAAkB,CAAC,eAAe,CAAC,EAAE,aAAa,CAAC,IAAI;IACxD,CAAC,kBAAkB,CAAC,gBAAgB,CAAC,EAAE,aAAa,CAAC,KAAK;CAC3D,CAAC;AAEF,MAAM,CAAC,MAAM,mBAAmB,GAAG,CACjC,cAA2B,mBAAmB,EAC9C,EAAE;IACF,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IACnD,MAAM,GAAG,GAAG,KAAK,CAAC,MAAM,CAAI,IAAI,CAAC,CAAC;IAElC,MAAM,WAAW,GAAG,CAAC,CAAC,EAAE,EAAE;;QACxB,IAAI,QAAC,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,OAAO,0CAAE,QAAQ,CAAC,CAAC,CAAC,MAAM,EAAC,EAAE;YACrC,UAAU,CAAC,KAAK,CAAC,CAAC;SACnB;IACH,CAAC,CAAC;IAEF,MAAM,eAAe,GAAG,CAAC,CAAC,EAAE,EAAE;QAC5B,0DAA0D;QAC1D,IAAI,WAAW,EAAE,EAAE;YACjB,OAAO;SACR;QACD,MAAM,EAAE,QAAQ,EAAE,GAAG,CAAC,CAAC,MAAM,CAAC;QAC9B,QAAQ,WAAW,CAAC,CAAC,CAAC,GAAG,CAAC,EAAE;YAC1B,KAAK,aAAa,CAAC,IAAI;gBACrB,UAAU,CAAC,KAAK,CAAC,CAAC;gBAClB,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC;gBACnB,MAAM;YACR,KAAK,aAAa,CAAC,KAAK;gBACtB,IACE,QAAQ,CAAC,aAAa,KAAK,GAAG,CAAC,OAAO;oBACtC,gFAAgF;oBAChF,QAAQ,KAAK,OAAO;oBACpB,QAAQ,KAAK,UAAU,EACvB;oBACA,GAAG,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;oBACpB,CAAC,CAAC,cAAc,EAAE,CAAC;iBACpB;gBACD,MAAM;YACR;gBACE,MAAM;SACT;IACH,CAAC,CAAC;IAEF,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,QAAQ,CAAC,gBAAgB,CAAC,OAAO,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;QACtD,QAAQ,CAAC,gBAAgB,CAAC,SAAS,EAAE,eAAe,EAAE,IAAI,CAAC,CAAC;QAC5D,OAAO,GAAG,EAAE;YACV,QAAQ,CAAC,mBAAmB,CAAC,OAAO,EAAE,WAAW,EAAE,IAAI,CAAC,CAAC;YACzD,QAAQ,CAAC,mBAAmB,CAAC,SAAS,EAAE,eAAe,EAAE,IAAI,CAAC,CAAC;QACjE,CAAC,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,OAAO,EAAE,OAAO,EAAE,UAAU,EAAE,GAAG,EAAE,CAAC;AACtC,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { isModalOpen } from '@console/internal/components/modals';\nimport { KEYBOARD_SHORTCUTS } from '../constants/common';\n\n/**\n * Use this hook for components that require visibility only\n * when the user is actively interacting with the document.\n */\n\nexport enum KeyEventModes {\n  HIDE = 'HIDE',\n  FOCUS = 'FOCUS',\n}\n\nconst textInputKeyHandler = {\n  [KEYBOARD_SHORTCUTS.blurFilterInput]: KeyEventModes.HIDE,\n  [KEYBOARD_SHORTCUTS.focusFilterInput]: KeyEventModes.FOCUS,\n};\n\nexport const useDocumentListener = <T extends HTMLElement>(\n  keyEventMap: KeyEventMap = textInputKeyHandler,\n) => {\n  const [visible, setVisible] = React.useState(true);\n  const ref = React.useRef<T>(null);\n\n  const handleEvent = (e) => {\n    if (!ref?.current?.contains(e.target)) {\n      setVisible(false);\n    }\n  };\n\n  const handleKeyEvents = (e) => {\n    // Don't steal focus from a modal open on top of the page.\n    if (isModalOpen()) {\n      return;\n    }\n    const { nodeName } = e.target;\n    switch (keyEventMap[e.key]) {\n      case KeyEventModes.HIDE:\n        setVisible(false);\n        ref.current.blur();\n        break;\n      case KeyEventModes.FOCUS:\n        if (\n          document.activeElement !== ref.current &&\n          // Don't steal focus if the user types the focus shortcut in another text input.\n          nodeName !== 'INPUT' &&\n          nodeName !== 'TEXTAREA'\n        ) {\n          ref.current.focus();\n          e.preventDefault();\n        }\n        break;\n      default:\n        break;\n    }\n  };\n\n  React.useEffect(() => {\n    document.addEventListener('click', handleEvent, true);\n    document.addEventListener('keydown', handleKeyEvents, true);\n    return () => {\n      document.removeEventListener('click', handleEvent, true);\n      document.removeEventListener('keydown', handleKeyEvents, true);\n    };\n  });\n\n  return { visible, setVisible, ref };\n};\n\nexport type KeyEventMap = {\n  [key: string]: KeyEventModes;\n};\n"]}]}