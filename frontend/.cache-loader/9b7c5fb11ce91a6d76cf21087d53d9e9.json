{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/log-window.jsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/log-window.jsx","mtime":1616735742480},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { pluralize } from './';\nimport { STREAM_EOF, STREAM_PAUSED, STREAM_ACTIVE } from './resource-log';\nimport { OutlinedPlayCircleIcon } from '@patternfly/react-icons';\nimport { Button } from '@patternfly/react-core';\n// Subtracted from log window height to prevent scroll bar from appearing when resume button is shown.\n// Added fullscreen fudge factor to account for fullscreen taking log contents outside of .co-m-pane__body div\nconst FUDGE_FACTOR = 105;\nconst FULLSCREEN_FUDGE_FACTOR = 57;\nexport class LogWindow extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this._unpause = this._unpause.bind(this);\n        this._handleScroll = _.throttle(this._handleScroll.bind(this), 100);\n        this._handleResize = _.debounce(this._handleResize.bind(this), 50);\n        this._setScrollPane = (element) => (this.scrollPane = element);\n        this._setLogContents = (element) => (this.logContents = element);\n        this.state = {\n            content: '',\n            height: '',\n        };\n        this.prevScrollLeft = null;\n    }\n    static getDerivedStateFromProps(nextProps) {\n        if (nextProps.status !== STREAM_PAUSED) {\n            return {\n                content: nextProps.lines.join(''),\n            };\n        }\n        return null;\n    }\n    componentDidMount() {\n        this.scrollPane.addEventListener('scroll', this._handleScroll, { passive: true });\n        window.addEventListener('resize', this._handleResize, { passive: true });\n        this._handleResize();\n    }\n    componentDidUpdate(prevProps) {\n        if (prevProps.status !== this.props.status ||\n            prevProps.lines.length ||\n            this.props.lines.length) {\n            this._scrollToBottom();\n        }\n    }\n    componentWillUnmount() {\n        this.scrollPane.removeEventListener('scroll', this._handleScroll, { passive: true });\n        window.removeEventListener('resize', this._handleResize, { passive: true });\n    }\n    _handleScroll() {\n        const scrollLeftChanged = this.prevScrollLeft !== this.scrollPane.scrollLeft;\n        // Stream is finished, take no action on scroll\n        if (this.props.status === STREAM_EOF) {\n            return;\n        }\n        // If horizontal scrolling, take no action\n        if (scrollLeftChanged) {\n            this.prevScrollLeft = this.scrollPane.scrollLeft;\n            return;\n        }\n        // 1px fudge for fractional heights\n        const scrollTarget = this.scrollPane.scrollHeight - (this.scrollPane.clientHeight + 1);\n        if (this.scrollPane.scrollTop < scrollTarget) {\n            if (this.props.status !== STREAM_PAUSED) {\n                this.props.updateStatus(STREAM_PAUSED);\n            }\n        }\n        else {\n            this.props.updateStatus(STREAM_ACTIVE);\n        }\n    }\n    _handleResize() {\n        if (!this.scrollPane) {\n            return;\n        }\n        const targetHeight = Math.floor(window.innerHeight -\n            this.scrollPane.getBoundingClientRect().top -\n            (this.props.isFullscreen ? FULLSCREEN_FUDGE_FACTOR : FUDGE_FACTOR));\n        this.prevScrollLeft = this.scrollPane.scrollLeft;\n        this.setState({\n            height: targetHeight,\n        });\n    }\n    _scrollToBottom() {\n        if (this.props.status === STREAM_ACTIVE) {\n            // Async because scrollHeight depends on the size of the rendered pane\n            setTimeout(() => {\n                if (this.scrollPane && this.props.status === STREAM_ACTIVE) {\n                    this.scrollPane.scrollTop = this.scrollPane.scrollHeight;\n                }\n            }, 0);\n        }\n    }\n    _unpause() {\n        this.props.updateStatus(STREAM_ACTIVE);\n    }\n    render() {\n        const { bufferFull, lines, linesBehind, status } = this.props;\n        const { content, height } = this.state;\n        // TODO maybe move these variables into state so they are only updated on changes\n        const totalLineCount = pluralize(lines.length, 'line');\n        const linesBehindCount = pluralize(linesBehind, 'new line');\n        const headerText = bufferFull ? `last ${totalLineCount}` : totalLineCount;\n        const resumeText = linesBehind > 0 ? ` Resume stream and show ${linesBehindCount}` : ' Resume stream';\n        return (React.createElement(\"div\", { className: \"log-window\" },\n            React.createElement(\"div\", { className: \"log-window__header\" }, headerText),\n            React.createElement(\"div\", { className: \"log-window__body\" },\n                React.createElement(\"div\", { className: \"log-window__scroll-pane\", ref: this._setScrollPane },\n                    React.createElement(\"div\", { className: \"log-window__contents\", ref: this._setLogContents, style: { height } },\n                        React.createElement(\"div\", { className: \"log-window__contents__text\" }, content)))),\n            status === STREAM_PAUSED && (React.createElement(Button, { onClick: this._unpause, isBlock: true },\n                React.createElement(OutlinedPlayCircleIcon, null),\n                resumeText))));\n    }\n}\nLogWindow.propTypes = {\n    bufferFull: PropTypes.bool.isRequired,\n    lines: PropTypes.array.isRequired,\n    linesBehind: PropTypes.number.isRequired,\n    status: PropTypes.string.isRequired,\n    updateStatus: PropTypes.func.isRequired,\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/log-window.jsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/log-window.jsx"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { pluralize } from './';\nimport { STREAM_EOF, STREAM_PAUSED, STREAM_ACTIVE } from './resource-log';\nimport { OutlinedPlayCircleIcon } from '@patternfly/react-icons';\nimport { Button } from '@patternfly/react-core';\n\n// Subtracted from log window height to prevent scroll bar from appearing when resume button is shown.\n// Added fullscreen fudge factor to account for fullscreen taking log contents outside of .co-m-pane__body div\nconst FUDGE_FACTOR = 105;\nconst FULLSCREEN_FUDGE_FACTOR = 57;\n\nexport class LogWindow extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this._unpause = this._unpause.bind(this);\n    this._handleScroll = _.throttle(this._handleScroll.bind(this), 100);\n    this._handleResize = _.debounce(this._handleResize.bind(this), 50);\n    this._setScrollPane = (element) => (this.scrollPane = element);\n    this._setLogContents = (element) => (this.logContents = element);\n    this.state = {\n      content: '',\n      height: '',\n    };\n    this.prevScrollLeft = null;\n  }\n\n  static getDerivedStateFromProps(nextProps) {\n    if (nextProps.status !== STREAM_PAUSED) {\n      return {\n        content: nextProps.lines.join(''),\n      };\n    }\n    return null;\n  }\n\n  componentDidMount() {\n    this.scrollPane.addEventListener('scroll', this._handleScroll, { passive: true });\n    window.addEventListener('resize', this._handleResize, { passive: true });\n    this._handleResize();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      prevProps.status !== this.props.status ||\n      prevProps.lines.length ||\n      this.props.lines.length\n    ) {\n      this._scrollToBottom();\n    }\n  }\n\n  componentWillUnmount() {\n    this.scrollPane.removeEventListener('scroll', this._handleScroll, { passive: true });\n    window.removeEventListener('resize', this._handleResize, { passive: true });\n  }\n\n  _handleScroll() {\n    const scrollLeftChanged = this.prevScrollLeft !== this.scrollPane.scrollLeft;\n\n    // Stream is finished, take no action on scroll\n    if (this.props.status === STREAM_EOF) {\n      return;\n    }\n\n    // If horizontal scrolling, take no action\n    if (scrollLeftChanged) {\n      this.prevScrollLeft = this.scrollPane.scrollLeft;\n      return;\n    }\n\n    // 1px fudge for fractional heights\n    const scrollTarget = this.scrollPane.scrollHeight - (this.scrollPane.clientHeight + 1);\n    if (this.scrollPane.scrollTop < scrollTarget) {\n      if (this.props.status !== STREAM_PAUSED) {\n        this.props.updateStatus(STREAM_PAUSED);\n      }\n    } else {\n      this.props.updateStatus(STREAM_ACTIVE);\n    }\n  }\n\n  _handleResize() {\n    if (!this.scrollPane) {\n      return;\n    }\n\n    const targetHeight = Math.floor(\n      window.innerHeight -\n        this.scrollPane.getBoundingClientRect().top -\n        (this.props.isFullscreen ? FULLSCREEN_FUDGE_FACTOR : FUDGE_FACTOR),\n    );\n    this.prevScrollLeft = this.scrollPane.scrollLeft;\n    this.setState({\n      height: targetHeight,\n    });\n  }\n\n  _scrollToBottom() {\n    if (this.props.status === STREAM_ACTIVE) {\n      // Async because scrollHeight depends on the size of the rendered pane\n      setTimeout(() => {\n        if (this.scrollPane && this.props.status === STREAM_ACTIVE) {\n          this.scrollPane.scrollTop = this.scrollPane.scrollHeight;\n        }\n      }, 0);\n    }\n  }\n\n  _unpause() {\n    this.props.updateStatus(STREAM_ACTIVE);\n  }\n\n  render() {\n    const { bufferFull, lines, linesBehind, status } = this.props;\n    const { content, height } = this.state;\n\n    // TODO maybe move these variables into state so they are only updated on changes\n    const totalLineCount = pluralize(lines.length, 'line');\n    const linesBehindCount = pluralize(linesBehind, 'new line');\n    const headerText = bufferFull ? `last ${totalLineCount}` : totalLineCount;\n    const resumeText =\n      linesBehind > 0 ? ` Resume stream and show ${linesBehindCount}` : ' Resume stream';\n\n    return (\n      <div className=\"log-window\">\n        <div className=\"log-window__header\">{headerText}</div>\n        <div className=\"log-window__body\">\n          <div className=\"log-window__scroll-pane\" ref={this._setScrollPane}>\n            <div className=\"log-window__contents\" ref={this._setLogContents} style={{ height }}>\n              <div className=\"log-window__contents__text\">{content}</div>\n            </div>\n          </div>\n        </div>\n        {status === STREAM_PAUSED && (\n          <Button onClick={this._unpause} isBlock>\n            <OutlinedPlayCircleIcon />\n            {resumeText}\n          </Button>\n        )}\n      </div>\n    );\n  }\n}\n\nLogWindow.propTypes = {\n  bufferFull: PropTypes.bool.isRequired,\n  lines: PropTypes.array.isRequired,\n  linesBehind: PropTypes.number.isRequired,\n  status: PropTypes.string.isRequired,\n  updateStatus: PropTypes.func.isRequired,\n};\n"]}]}