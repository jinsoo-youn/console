{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/components/baremetal-hosts/dashboard/queries.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/components/baremetal-hosts/dashboard/queries.ts","mtime":1615298458670},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nexport var HostQuery;\n(function (HostQuery) {\n    HostQuery[\"CPU_UTILIZATION\"] = \"CPU_UTILIZATION\";\n    HostQuery[\"MEMORY_UTILIZATION\"] = \"MEMORY_UTILIZATION\";\n    HostQuery[\"MEMORY_TOTAL\"] = \"MEMORY_TOTAL\";\n    HostQuery[\"STORAGE_UTILIZATION\"] = \"STORAGE_UTILIZATION\";\n    HostQuery[\"STORAGE_TOTAL\"] = \"STORAGE_TOTAL\";\n    HostQuery[\"NETWORK_IN_UTILIZATION\"] = \"NETWORK_IN_UTILIZATION\";\n    HostQuery[\"NETWORK_OUT_UTILIZATION\"] = \"NETWORK_OUT_UTILIZATION\";\n    HostQuery[\"NETWORK_UTILIZATION\"] = \"NETWORK_UTILIZATION\";\n    HostQuery[\"NUMBER_OF_PODS\"] = \"NUMBER_OF_PODS\";\n    HostQuery[\"NUMBER_OF_FANS\"] = \"NUMBER_OF_FANS\";\n    HostQuery[\"NUMBER_OF_PSUS\"] = \"NUMBER_OF_PSUS\";\n    // popover queries\n    HostQuery[\"PODS_BY_CPU\"] = \"PODS_BY_CPU\";\n    HostQuery[\"PODS_BY_MEMORY\"] = \"PODS_BY_MEMORY\";\n    HostQuery[\"PODS_BY_STORAGE\"] = \"PODS_BY_STORAGE\";\n    HostQuery[\"PROJECTS_BY_CPU\"] = \"PROJECTS_BY_CPU\";\n    HostQuery[\"PROJECTS_BY_MEMORY\"] = \"PROJECTS_BY_MEMORY\";\n    HostQuery[\"PROJECTS_BY_STORAGE\"] = \"PROJECTS_BY_STORAGE\";\n})(HostQuery || (HostQuery = {}));\nconst nodeQueriesByNodeName = {\n    [HostQuery.CPU_UTILIZATION]: _.template(`instance:node_cpu:rate:sum{instance=~'<%= node %>'}`),\n    [HostQuery.MEMORY_UTILIZATION]: _.template(`node_memory_Active_bytes{instance=~'<%= node %>'}`),\n    [HostQuery.MEMORY_TOTAL]: _.template(`node_memory_MemTotal_bytes{instance=~'<%= node %>'}`),\n    [HostQuery.STORAGE_UTILIZATION]: _.template(`instance:node_filesystem_usage:sum{instance=~'<%= node %>'}`),\n    [HostQuery.STORAGE_TOTAL]: _.template(`sum(node_filesystem_size_bytes{instance=~'<%= node %>'})`),\n    [HostQuery.NETWORK_IN_UTILIZATION]: _.template(`instance:node_network_receive_bytes:rate:sum{instance=~'<%= node %>'}`),\n    [HostQuery.NETWORK_OUT_UTILIZATION]: _.template(`instance:node_network_transmit_bytes:rate:sum{instance=~'<%= node %>'}`),\n    [HostQuery.NUMBER_OF_PODS]: _.template(`kubelet_running_pod_count{node='<%= node %>'}`),\n    [HostQuery.PODS_BY_CPU]: _.template(`topk(25, sort_desc(sum(rate(container_cpu_usage_seconds_total{node=\"<%= node %>\",container_name=\"\",pod!=\"\"}[5m])) BY (pod, namespace)))`),\n    [HostQuery.PROJECTS_BY_CPU]: _.template(`topk(25, sort_desc(sum(rate(container_cpu_usage_seconds_total{node=\"<%= node %>\",container_name=\"\",pod!=\"\"}[5m])) BY (namespace)))`),\n    [HostQuery.PODS_BY_MEMORY]: _.template(`topk(25, sort_desc(sum(container_memory_working_set_bytes{node=\"<%= node %>\",container=\"\",pod!=\"\"}) BY (pod, namespace)))`),\n    [HostQuery.PROJECTS_BY_MEMORY]: _.template(`topk(25, sort_desc(sum(container_memory_working_set_bytes{node=\"<%= node %>\",container=\"\",pod!=\"\"}) BY (namespace)))`),\n    [HostQuery.PODS_BY_STORAGE]: _.template(`topk(25, sort_desc(avg by (pod, namespace)(irate(container_fs_io_time_seconds_total{node=\"<%= node %>\",container=\"POD\", pod!=\"\"}[1m]))))`),\n    [HostQuery.PROJECTS_BY_STORAGE]: _.template(`topk(25, sort_desc(avg by (namespace)(irate(container_fs_io_time_seconds_total{node=\"<%= node %>\",container=\"POD\", pod!=\"\"}[1m]))))`),\n};\n// TODO(jtomasek): enable and use these once ironic-exporter is available\n// const nodeQueriesByHostName = {\n//   [HostQuery.NUMBER_OF_FANS]: _.template(`baremetal_fan_rpm`),\n//   [HostQuery.NUMBER_OF_PSUS]: _.template(`baremetal_current`),\n// };\nconst getQuery = (node, query) => query({ node });\nexport const getUtilizationQueries = (nodeName) => ({\n    [HostQuery.CPU_UTILIZATION]: {\n        utilization: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.CPU_UTILIZATION]),\n    },\n    [HostQuery.MEMORY_UTILIZATION]: {\n        utilization: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.MEMORY_UTILIZATION]),\n        total: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.MEMORY_TOTAL]),\n    },\n    [HostQuery.STORAGE_UTILIZATION]: {\n        utilization: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.STORAGE_UTILIZATION]),\n        total: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.STORAGE_TOTAL]),\n    },\n    [HostQuery.NUMBER_OF_PODS]: {\n        utilization: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.NUMBER_OF_PODS]),\n    },\n});\nexport const getMultilineUtilizationQueries = (nodeName) => ({\n    [HostQuery.NETWORK_UTILIZATION]: [\n        {\n            query: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.NETWORK_IN_UTILIZATION]),\n            desc: 'In',\n        },\n        {\n            query: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.NETWORK_OUT_UTILIZATION]),\n            desc: 'Out',\n        },\n    ],\n});\nexport const getHostQueryResultError = (result) => _.get(result, 'status', '') !== 'success';\nexport const getTopConsumerQueries = (nodeName) => ({\n    [HostQuery.PODS_BY_CPU]: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.PODS_BY_CPU]),\n    [HostQuery.PROJECTS_BY_CPU]: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.PROJECTS_BY_CPU]),\n    [HostQuery.PODS_BY_MEMORY]: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.PODS_BY_MEMORY]),\n    [HostQuery.PROJECTS_BY_MEMORY]: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.PROJECTS_BY_MEMORY]),\n    [HostQuery.PODS_BY_STORAGE]: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.PODS_BY_STORAGE]),\n    [HostQuery.PROJECTS_BY_STORAGE]: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.PROJECTS_BY_STORAGE]),\n});\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/components/baremetal-hosts/dashboard/queries.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/components/baremetal-hosts/dashboard/queries.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { PrometheusResponse } from '@console/internal/components/graphs';\n\nexport enum HostQuery {\n  CPU_UTILIZATION = 'CPU_UTILIZATION',\n  MEMORY_UTILIZATION = 'MEMORY_UTILIZATION',\n  MEMORY_TOTAL = 'MEMORY_TOTAL',\n  STORAGE_UTILIZATION = 'STORAGE_UTILIZATION',\n  STORAGE_TOTAL = 'STORAGE_TOTAL',\n  NETWORK_IN_UTILIZATION = 'NETWORK_IN_UTILIZATION',\n  NETWORK_OUT_UTILIZATION = 'NETWORK_OUT_UTILIZATION',\n  NETWORK_UTILIZATION = 'NETWORK_UTILIZATION',\n  NUMBER_OF_PODS = 'NUMBER_OF_PODS',\n  NUMBER_OF_FANS = 'NUMBER_OF_FANS',\n  NUMBER_OF_PSUS = 'NUMBER_OF_PSUS',\n\n  // popover queries\n  PODS_BY_CPU = 'PODS_BY_CPU',\n  PODS_BY_MEMORY = 'PODS_BY_MEMORY',\n  PODS_BY_STORAGE = 'PODS_BY_STORAGE',\n  PROJECTS_BY_CPU = 'PROJECTS_BY_CPU',\n  PROJECTS_BY_MEMORY = 'PROJECTS_BY_MEMORY',\n  PROJECTS_BY_STORAGE = 'PROJECTS_BY_STORAGE',\n}\n\nconst nodeQueriesByNodeName = {\n  [HostQuery.CPU_UTILIZATION]: _.template(`instance:node_cpu:rate:sum{instance=~'<%= node %>'}`),\n  [HostQuery.MEMORY_UTILIZATION]: _.template(`node_memory_Active_bytes{instance=~'<%= node %>'}`),\n  [HostQuery.MEMORY_TOTAL]: _.template(`node_memory_MemTotal_bytes{instance=~'<%= node %>'}`),\n  [HostQuery.STORAGE_UTILIZATION]: _.template(\n    `instance:node_filesystem_usage:sum{instance=~'<%= node %>'}`,\n  ),\n  [HostQuery.STORAGE_TOTAL]: _.template(`sum(node_filesystem_size_bytes{instance=~'<%= node %>'})`),\n  [HostQuery.NETWORK_IN_UTILIZATION]: _.template(\n    `instance:node_network_receive_bytes:rate:sum{instance=~'<%= node %>'}`,\n  ),\n  [HostQuery.NETWORK_OUT_UTILIZATION]: _.template(\n    `instance:node_network_transmit_bytes:rate:sum{instance=~'<%= node %>'}`,\n  ),\n  [HostQuery.NUMBER_OF_PODS]: _.template(`kubelet_running_pod_count{node='<%= node %>'}`),\n  [HostQuery.PODS_BY_CPU]: _.template(\n    `topk(25, sort_desc(sum(rate(container_cpu_usage_seconds_total{node=\"<%= node %>\",container_name=\"\",pod!=\"\"}[5m])) BY (pod, namespace)))`,\n  ),\n  [HostQuery.PROJECTS_BY_CPU]: _.template(\n    `topk(25, sort_desc(sum(rate(container_cpu_usage_seconds_total{node=\"<%= node %>\",container_name=\"\",pod!=\"\"}[5m])) BY (namespace)))`,\n  ),\n  [HostQuery.PODS_BY_MEMORY]: _.template(\n    `topk(25, sort_desc(sum(container_memory_working_set_bytes{node=\"<%= node %>\",container=\"\",pod!=\"\"}) BY (pod, namespace)))`,\n  ),\n  [HostQuery.PROJECTS_BY_MEMORY]: _.template(\n    `topk(25, sort_desc(sum(container_memory_working_set_bytes{node=\"<%= node %>\",container=\"\",pod!=\"\"}) BY (namespace)))`,\n  ),\n  [HostQuery.PODS_BY_STORAGE]: _.template(\n    `topk(25, sort_desc(avg by (pod, namespace)(irate(container_fs_io_time_seconds_total{node=\"<%= node %>\",container=\"POD\", pod!=\"\"}[1m]))))`,\n  ),\n  [HostQuery.PROJECTS_BY_STORAGE]: _.template(\n    `topk(25, sort_desc(avg by (namespace)(irate(container_fs_io_time_seconds_total{node=\"<%= node %>\",container=\"POD\", pod!=\"\"}[1m]))))`,\n  ),\n};\n\n// TODO(jtomasek): enable and use these once ironic-exporter is available\n// const nodeQueriesByHostName = {\n//   [HostQuery.NUMBER_OF_FANS]: _.template(`baremetal_fan_rpm`),\n//   [HostQuery.NUMBER_OF_PSUS]: _.template(`baremetal_current`),\n// };\n\nconst getQuery = (node: string, query: _.TemplateExecutor): string => query({ node });\n\nexport const getUtilizationQueries = (nodeName: string): HostUtilizationQueryType => ({\n  [HostQuery.CPU_UTILIZATION]: {\n    utilization: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.CPU_UTILIZATION]),\n  },\n  [HostQuery.MEMORY_UTILIZATION]: {\n    utilization: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.MEMORY_UTILIZATION]),\n    total: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.MEMORY_TOTAL]),\n  },\n  [HostQuery.STORAGE_UTILIZATION]: {\n    utilization: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.STORAGE_UTILIZATION]),\n    total: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.STORAGE_TOTAL]),\n  },\n  [HostQuery.NUMBER_OF_PODS]: {\n    utilization: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.NUMBER_OF_PODS]),\n  },\n});\n\nexport const getMultilineUtilizationQueries = (nodeName: string) => ({\n  [HostQuery.NETWORK_UTILIZATION]: [\n    {\n      query: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.NETWORK_IN_UTILIZATION]),\n      desc: 'In',\n    },\n    {\n      query: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.NETWORK_OUT_UTILIZATION]),\n      desc: 'Out',\n    },\n  ],\n});\n\ntype HostQueryType = {\n  [key: string]: string;\n};\n\ntype HostUtilizationQueryType = {\n  [key: string]: { utilization: string; total?: string };\n};\n\nexport const getHostQueryResultError = (result: PrometheusResponse): boolean =>\n  _.get(result, 'status', '') !== 'success';\n\nexport const getTopConsumerQueries = (nodeName: string): HostQueryType => ({\n  [HostQuery.PODS_BY_CPU]: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.PODS_BY_CPU]),\n  [HostQuery.PROJECTS_BY_CPU]: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.PROJECTS_BY_CPU]),\n  [HostQuery.PODS_BY_MEMORY]: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.PODS_BY_MEMORY]),\n  [HostQuery.PROJECTS_BY_MEMORY]: getQuery(\n    nodeName,\n    nodeQueriesByNodeName[HostQuery.PROJECTS_BY_MEMORY],\n  ),\n  [HostQuery.PODS_BY_STORAGE]: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.PODS_BY_STORAGE]),\n  [HostQuery.PROJECTS_BY_STORAGE]: getQuery(\n    nodeName,\n    nodeQueriesByNodeName[HostQuery.PROJECTS_BY_STORAGE],\n  ),\n});\n"]}]}