{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/TopologyPage.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/TopologyPage.tsx","mtime":1615298458630},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { matchPath, Link, Redirect } from 'react-router-dom';\nimport { Tooltip, Popover, Button } from '@patternfly/react-core';\nimport { ListIcon, TopologyIcon, QuestionCircleIcon } from '@patternfly/react-icons';\nimport { StatusBox, Firehose, HintBlock, AsyncComponent, removeQueryArgument, } from '@console/internal/components/utils';\nimport EmptyState from '../EmptyState';\nimport NamespacedPage, { NamespacedPageVariants } from '../NamespacedPage';\nimport ProjectsExistWrapper from '../ProjectsExistWrapper';\nimport ProjectListPage from '../projects/ProjectListPage';\nimport ConnectedTopologyDataController from './TopologyDataController';\nimport Topology from './Topology';\nimport TopologyShortcuts from './TopologyShortcuts';\nimport { LAST_TOPOLOGY_VIEW_LOCAL_STORAGE_KEY } from './components/const';\nimport './TopologyPage.scss';\nimport { TOPOLOGY_SEARCH_FILTER_KEY } from './filters';\nconst setTopologyActiveView = (id) => {\n    localStorage.setItem(LAST_TOPOLOGY_VIEW_LOCAL_STORAGE_KEY, id);\n};\nconst getTopologyActiveView = () => {\n    return localStorage.getItem(LAST_TOPOLOGY_VIEW_LOCAL_STORAGE_KEY);\n};\nconst EmptyMsg = () => (React.createElement(EmptyState, { title: \"Topology\", hintBlock: React.createElement(HintBlock, { title: \"No workloads found\" },\n        React.createElement(\"p\", null, \"To add content to your project, create an application, component or service using one of these options.\")) }));\nexport function renderTopology({ loaded, loadError, data, namespace }) {\n    return (React.createElement(StatusBox, { data: data ? data.graph.nodes : null, label: \"Topology\", loaded: loaded, loadError: loadError, EmptyMsg: EmptyMsg },\n        React.createElement(\"div\", { className: \"odc-topology\" },\n            React.createElement(Topology, { data: data, namespace: namespace }))));\n}\nexport const TopologyPage = ({ match }) => {\n    const namespace = match.params.name;\n    const showListView = !!matchPath(match.path, {\n        path: '*/list',\n        exact: true,\n    });\n    const showGraphView = !!matchPath(match.path, {\n        path: '*/graph',\n        exact: true,\n    });\n    const handleNamespaceChange = (ns) => {\n        if (ns !== namespace) {\n            removeQueryArgument(TOPOLOGY_SEARCH_FILTER_KEY);\n        }\n    };\n    React.useEffect(() => setTopologyActiveView(showListView && !showGraphView ? 'list' : 'graph'), [\n        showListView,\n        showGraphView,\n    ]);\n    if (!showGraphView && !showListView) {\n        return (React.createElement(Redirect, { to: `/topology/${namespace ? `ns/${namespace}` : 'all-namespaces'}/${getTopologyActiveView() === 'list' ? 'list' : 'graph'}` }));\n    }\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Helmet, null,\n            React.createElement(\"title\", null, \"Topology\")),\n        React.createElement(NamespacedPage, { variant: showListView ? NamespacedPageVariants.light : NamespacedPageVariants.default, hideApplications: showListView, onNamespaceChange: handleNamespaceChange, toolbar: React.createElement(React.Fragment, null,\n                !showListView && namespace && (React.createElement(Popover, { \"aria-label\": \"Shortcuts\", bodyContent: TopologyShortcuts, position: \"left\", maxWidth: \"100vw\" },\n                    React.createElement(Button, { type: \"button\", variant: \"link\", className: \"odc-topology__shortcuts-button\", icon: React.createElement(QuestionCircleIcon, null), \"data-test-id\": \"topology-view-shortcuts\" }, \"View shortcuts\"))),\n                React.createElement(Tooltip, { position: \"left\", content: showListView ? 'Topology View' : 'List View' },\n                    React.createElement(Link, { className: \"pf-c-button pf-m-plain\", to: `/topology/${namespace ? `ns/${namespace}` : 'all-namespaces'}${showListView ? '/graph' : '/list'}` }, showListView ? React.createElement(TopologyIcon, { size: \"md\" }) : React.createElement(ListIcon, { size: \"md\" })))) },\n            React.createElement(Firehose, { resources: [{ kind: 'Project', prop: 'projects', isList: true }] },\n                React.createElement(ProjectsExistWrapper, { title: \"Topology\" }, namespace ? (showListView ? (React.createElement(AsyncComponent, { mock: false, match: match, title: \"\", EmptyMsg: EmptyMsg, emptyBodyClass: \"odc-namespaced-page__content\", loader: () => import('@console/internal/components/overview' /* webpackChunkName: \"topology-overview\" */).then((m) => m.Overview) })) : (React.createElement(ConnectedTopologyDataController, { match: match, render: renderTopology }))) : (React.createElement(ProjectListPage, { title: \"Topology\" }, \"Select a project to view the topology\")))))));\n};\nexport default TopologyPage;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/TopologyPage.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/TopologyPage.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { matchPath, match as RMatch, Link, Redirect } from 'react-router-dom';\nimport { Tooltip, Popover, Button } from '@patternfly/react-core';\nimport { ListIcon, TopologyIcon, QuestionCircleIcon } from '@patternfly/react-icons';\nimport {\n  StatusBox,\n  Firehose,\n  HintBlock,\n  AsyncComponent,\n  removeQueryArgument,\n} from '@console/internal/components/utils';\n\nimport EmptyState from '../EmptyState';\nimport NamespacedPage, { NamespacedPageVariants } from '../NamespacedPage';\nimport ProjectsExistWrapper from '../ProjectsExistWrapper';\nimport ProjectListPage from '../projects/ProjectListPage';\nimport ConnectedTopologyDataController, { RenderProps } from './TopologyDataController';\nimport Topology from './Topology';\nimport TopologyShortcuts from './TopologyShortcuts';\nimport { LAST_TOPOLOGY_VIEW_LOCAL_STORAGE_KEY } from './components/const';\n\nimport './TopologyPage.scss';\nimport { TOPOLOGY_SEARCH_FILTER_KEY } from './filters';\n\nexport interface TopologyPageProps {\n  match: RMatch<{\n    name?: string;\n  }>;\n}\n\nconst setTopologyActiveView = (id: string) => {\n  localStorage.setItem(LAST_TOPOLOGY_VIEW_LOCAL_STORAGE_KEY, id);\n};\n\nconst getTopologyActiveView = () => {\n  return localStorage.getItem(LAST_TOPOLOGY_VIEW_LOCAL_STORAGE_KEY);\n};\n\nconst EmptyMsg = () => (\n  <EmptyState\n    title=\"Topology\"\n    hintBlock={\n      <HintBlock title=\"No workloads found\">\n        <p>\n          To add content to your project, create an application, component or service using one of\n          these options.\n        </p>\n      </HintBlock>\n    }\n  />\n);\n\nexport function renderTopology({ loaded, loadError, data, namespace }: RenderProps) {\n  return (\n    <StatusBox\n      data={data ? data.graph.nodes : null}\n      label=\"Topology\"\n      loaded={loaded}\n      loadError={loadError}\n      EmptyMsg={EmptyMsg}\n    >\n      <div className=\"odc-topology\">\n        <Topology data={data} namespace={namespace} />\n      </div>\n    </StatusBox>\n  );\n}\n\nexport const TopologyPage: React.FC<TopologyPageProps> = ({ match }) => {\n  const namespace = match.params.name;\n  const showListView = !!matchPath(match.path, {\n    path: '*/list',\n    exact: true,\n  });\n  const showGraphView = !!matchPath(match.path, {\n    path: '*/graph',\n    exact: true,\n  });\n\n  const handleNamespaceChange = (ns: string) => {\n    if (ns !== namespace) {\n      removeQueryArgument(TOPOLOGY_SEARCH_FILTER_KEY);\n    }\n  };\n\n  React.useEffect(() => setTopologyActiveView(showListView && !showGraphView ? 'list' : 'graph'), [\n    showListView,\n    showGraphView,\n  ]);\n\n  if (!showGraphView && !showListView) {\n    return (\n      <Redirect\n        to={`/topology/${namespace ? `ns/${namespace}` : 'all-namespaces'}/${\n          getTopologyActiveView() === 'list' ? 'list' : 'graph'\n        }`}\n      />\n    );\n  }\n\n  return (\n    <>\n      <Helmet>\n        <title>Topology</title>\n      </Helmet>\n      <NamespacedPage\n        variant={showListView ? NamespacedPageVariants.light : NamespacedPageVariants.default}\n        hideApplications={showListView}\n        onNamespaceChange={handleNamespaceChange}\n        toolbar={\n          <>\n            {!showListView && namespace && (\n              <Popover\n                aria-label=\"Shortcuts\"\n                bodyContent={TopologyShortcuts}\n                position=\"left\"\n                maxWidth=\"100vw\"\n              >\n                <Button\n                  type=\"button\"\n                  variant=\"link\"\n                  className=\"odc-topology__shortcuts-button\"\n                  icon={<QuestionCircleIcon />}\n                  data-test-id=\"topology-view-shortcuts\"\n                >\n                  View shortcuts\n                </Button>\n              </Popover>\n            )}\n            <Tooltip position=\"left\" content={showListView ? 'Topology View' : 'List View'}>\n              <Link\n                className=\"pf-c-button pf-m-plain\"\n                to={`/topology/${namespace ? `ns/${namespace}` : 'all-namespaces'}${\n                  showListView ? '/graph' : '/list'\n                }`}\n              >\n                {showListView ? <TopologyIcon size=\"md\" /> : <ListIcon size=\"md\" />}\n              </Link>\n            </Tooltip>\n          </>\n        }\n      >\n        <Firehose resources={[{ kind: 'Project', prop: 'projects', isList: true }]}>\n          <ProjectsExistWrapper title=\"Topology\">\n            {namespace ? (\n              showListView ? (\n                <AsyncComponent\n                  mock={false}\n                  match={match}\n                  title=\"\"\n                  EmptyMsg={EmptyMsg}\n                  emptyBodyClass=\"odc-namespaced-page__content\"\n                  loader={() =>\n                    import(\n                      '@console/internal/components/overview' /* webpackChunkName: \"topology-overview\" */\n                    ).then((m) => m.Overview)\n                  }\n                />\n              ) : (\n                <ConnectedTopologyDataController match={match} render={renderTopology} />\n              )\n            ) : (\n              <ProjectListPage title=\"Topology\">\n                Select a project to view the topology\n              </ProjectListPage>\n            )}\n          </ProjectsExistWrapper>\n        </Firehose>\n      </NamespacedPage>\n    </>\n  );\n};\n\nexport default TopologyPage;\n"]}]}