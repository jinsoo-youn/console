{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/validations/template/template-validations.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/validations/template/template-validations.ts","mtime":1615298458670},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["/* eslint-disable lines-between-class-members */\nimport * as _ from 'lodash';\nimport { ValidationErrorType } from '@console/shared/src';\nimport { ObjectEnum, DiskBus, DiskType } from '../../../constants';\nimport { IntervalValidationResult, MemoryIntervalValidationResult, } from './interval-validation-result';\nimport { DiskBusValidationResult } from './disk-bus-validation-result';\nimport { isSetEqual } from '../../common';\nexport class ValidationJSONPath extends ObjectEnum {\n}\nValidationJSONPath.CPU = new ValidationJSONPath('jsonpath::.spec.domain.cpu.cores');\nValidationJSONPath.MEMORY = new ValidationJSONPath('jsonpath::.spec.domain.resources.requests.memory');\nValidationJSONPath.DISK_BUS = new ValidationJSONPath('jsonpath::.spec.domain.devices.disks[*].disk.bus');\nValidationJSONPath.CD_BUS = new ValidationJSONPath('jsonpath::.spec.domain.devices.disks[*].cdrom.bus');\nValidationJSONPath.getDiskBusPath = (diskType) => diskType === DiskType.CDROM ? ValidationJSONPath.CD_BUS : ValidationJSONPath.DISK_BUS;\nexport class TemplateValidations {\n    constructor(validations = []) {\n        this.validateMemory = (value) => {\n            const result = this.validateMemoryByType(value, ValidationErrorType.Error);\n            if (!result.isValid) {\n                return result;\n            }\n            return this.validateMemoryByType(value, ValidationErrorType.Warn);\n        };\n        this.getAllowedBuses = (diskType, validationErrorType = ValidationErrorType.Error) => {\n            const finalDiskType = diskType || DiskType.DISK;\n            let allowedBuses = this.getAllowedEnumValues(ValidationJSONPath.getDiskBusPath(finalDiskType), validationErrorType).map(DiskBus.fromString);\n            if (allowedBuses.length === 0) {\n                allowedBuses = DiskBus.getAll();\n            }\n            return new Set(allowedBuses.filter((bus) => finalDiskType.isBusSupported(bus)));\n        };\n        this.getRecommendedBuses = (diskType) => {\n            const allowedBuses = this.getAllowedBuses(diskType);\n            const recommendedBuses = [\n                ...this.getAllowedBuses(diskType, ValidationErrorType.Warn),\n            ].filter((b) => allowedBuses.has(b));\n            return recommendedBuses.length === 0 ? allowedBuses : new Set(recommendedBuses);\n        };\n        this.areBusesEqual = (otherTempValidations) => {\n            if (!otherTempValidations) {\n                return false;\n            }\n            if (this === otherTempValidations) {\n                return true;\n            }\n            // Check if two sets of bus validations are the same - if the allowed and recommended buses are the same\n            const allowedBuses = this.getAllowedBuses(DiskType.DISK);\n            const otherAllowedBuses = otherTempValidations.getAllowedBuses(DiskType.DISK);\n            if (!isSetEqual(allowedBuses, otherAllowedBuses)) {\n                return false;\n            }\n            const recommendedBuses = this.getRecommendedBuses(DiskType.DISK);\n            const otherRecommendedBuses = otherTempValidations.getRecommendedBuses(DiskType.DISK);\n            if (!isSetEqual(recommendedBuses, otherRecommendedBuses)) {\n                return false;\n            }\n            const allowedCDBuses = this.getAllowedBuses(DiskType.CDROM);\n            const otherAllowedCDBuses = otherTempValidations.getAllowedBuses(DiskType.CDROM);\n            if (!isSetEqual(allowedCDBuses, otherAllowedCDBuses)) {\n                return false;\n            }\n            const recommendedCDBuses = this.getRecommendedBuses(DiskType.CDROM);\n            const otherRecommendedCDBuses = otherTempValidations.getRecommendedBuses(DiskType.CDROM);\n            if (!isSetEqual(recommendedCDBuses, otherRecommendedCDBuses)) {\n                return false;\n            }\n            return true;\n        };\n        this.validateBus = (diskType, diskBus, validationErrorType = ValidationErrorType.Error) => {\n            const allowedBuses = this.getAllowedBuses(diskType);\n            if (allowedBuses.has(diskBus)) {\n                const recommededBuses = this.getRecommendedBuses(diskType);\n                return new DiskBusValidationResult({\n                    allowedBuses: recommededBuses,\n                    type: ValidationErrorType.Warn,\n                    isValid: recommededBuses.has(diskBus),\n                });\n            }\n            return new DiskBusValidationResult({\n                allowedBuses,\n                type: validationErrorType,\n                isValid: allowedBuses.has(diskBus),\n            });\n        };\n        this.getDefaultBus = (diskType = DiskType.DISK, defaultBus) => {\n            let resolvedDefaultBus = defaultBus;\n            if (!resolvedDefaultBus) {\n                resolvedDefaultBus = diskType === DiskType.CDROM ? DiskBus.SATA : DiskBus.VIRTIO;\n            }\n            if (!diskType.isBusSupported(resolvedDefaultBus)) {\n                resolvedDefaultBus = undefined;\n                // eslint-disable-next-line no-console\n                console.error(`${resolvedDefaultBus} is not a supported disk bus for ${diskType} disks`);\n            }\n            const allowedBuses = this.getAllowedBuses(diskType);\n            if (allowedBuses.size === 0) {\n                return resolvedDefaultBus;\n            }\n            const recommendedBuses = this.getRecommendedBuses(diskType);\n            if (resolvedDefaultBus && recommendedBuses.has(resolvedDefaultBus)) {\n                return resolvedDefaultBus;\n            }\n            if (recommendedBuses.size > 0) {\n                return [...recommendedBuses][0];\n            }\n            return resolvedDefaultBus && allowedBuses.has(resolvedDefaultBus)\n                ? resolvedDefaultBus\n                : [...allowedBuses][0];\n        };\n        this.validateMemoryByType = (value, type) => new MemoryIntervalValidationResult(this.validateInterval(value, ValidationJSONPath.MEMORY, {\n            defaultMin: 0,\n            isDefaultMinInclusive: false,\n            type,\n        }));\n        this.validateInterval = (value, jsonPath, { isDefaultMinInclusive = true, isDefaultMaxInclusive = true, defaultMin = Number.NEGATIVE_INFINITY, defaultMax = Number.POSITIVE_INFINITY, type = ValidationErrorType.Error, }) => {\n            const relevantValidations = this.getRelevantValidations(jsonPath, type);\n            // combine validations for single template and make them strict (all integer validations must pass)\n            const { min, max, isMinInclusive, isMaxInclusive } = relevantValidations.reduce(({ min: oldMin, max: oldMax, isMinInclusive: oldIsMinInclusive, isMaxInclusive: oldIsMaxInclusive, }, validation) => {\n                let newMin = oldMin;\n                let newMax = oldMax;\n                let newIsMinInclusive = oldIsMinInclusive;\n                let newIsMaxInclusive = oldIsMaxInclusive;\n                if ('min' in validation && validation.min >= oldMin) {\n                    newMin = validation.min;\n                    newIsMinInclusive = true;\n                }\n                if ('max' in validation && validation.max <= oldMax) {\n                    newMax = validation.max;\n                    newIsMaxInclusive = true;\n                }\n                return {\n                    min: newMin,\n                    max: newMax,\n                    isMinInclusive: newIsMinInclusive,\n                    isMaxInclusive: newIsMaxInclusive,\n                };\n            }, {\n                min: defaultMin,\n                max: defaultMax,\n                isMinInclusive: isDefaultMinInclusive,\n                isMaxInclusive: isDefaultMaxInclusive,\n            });\n            const isValid = (isMinInclusive ? min <= value : min < value) &&\n                (isMaxInclusive ? value <= max : value < max);\n            return new IntervalValidationResult({\n                type,\n                isValid,\n                min,\n                max,\n                isMinInclusive,\n                isMaxInclusive,\n            });\n        };\n        // Empty array means all values are allowed\n        this.getAllowedEnumValues = (jsonPath, type) => {\n            const relevantValidations = this.getRelevantValidations(jsonPath, type);\n            return relevantValidations.reduce((result, validation) => result.concat(validation.values), []);\n        };\n        this.getRelevantValidations = (jsonPath, type) => {\n            return this.validations.filter((validation) => validation.path.includes(jsonPath.getValue()) &&\n                (type === ValidationErrorType.Warn) === !!validation.justWarning);\n        };\n        this.validations = _.compact(validations);\n    }\n}\nTemplateValidations.areBusesEqual = (a, b) => \n// eslint-disable-next-line eqeqeq\na == b || !!(a === null || a === void 0 ? void 0 : a.areBusesEqual(b)); // check if both null first\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/validations/template/template-validations.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/validations/template/template-validations.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable lines-between-class-members */\nimport * as _ from 'lodash';\nimport { ValidationErrorType } from '@console/shared/src';\nimport { ObjectEnum, DiskBus, DiskType } from '../../../constants';\nimport { CommonTemplatesValidation } from '../../../types/template';\nimport {\n  IntervalValidationResult,\n  MemoryIntervalValidationResult,\n} from './interval-validation-result';\nimport { DiskBusValidationResult } from './disk-bus-validation-result';\nimport { isSetEqual } from '../../common';\n\nexport class ValidationJSONPath extends ObjectEnum<string> {\n  static readonly CPU = new ValidationJSONPath('jsonpath::.spec.domain.cpu.cores');\n  static readonly MEMORY = new ValidationJSONPath(\n    'jsonpath::.spec.domain.resources.requests.memory',\n  );\n  static readonly DISK_BUS = new ValidationJSONPath(\n    'jsonpath::.spec.domain.devices.disks[*].disk.bus',\n  );\n  static readonly CD_BUS = new ValidationJSONPath(\n    'jsonpath::.spec.domain.devices.disks[*].cdrom.bus',\n  );\n\n  static getDiskBusPath = (diskType: DiskType) =>\n    diskType === DiskType.CDROM ? ValidationJSONPath.CD_BUS : ValidationJSONPath.DISK_BUS;\n}\n\nexport class TemplateValidations {\n  public static areBusesEqual = (a: TemplateValidations, b: TemplateValidations) =>\n    // eslint-disable-next-line eqeqeq\n    a == b || !!a?.areBusesEqual(b); // check if both null first\n\n  private validations: CommonTemplatesValidation[];\n\n  constructor(validations: CommonTemplatesValidation[] = []) {\n    this.validations = _.compact(validations);\n  }\n\n  validateMemory = (value: number): IntervalValidationResult => {\n    const result = this.validateMemoryByType(value, ValidationErrorType.Error);\n    if (!result.isValid) {\n      return result;\n    }\n\n    return this.validateMemoryByType(value, ValidationErrorType.Warn);\n  };\n\n  getAllowedBuses = (\n    diskType: DiskType,\n    validationErrorType: ValidationErrorType = ValidationErrorType.Error,\n  ): Set<DiskBus> => {\n    const finalDiskType = diskType || DiskType.DISK;\n\n    let allowedBuses: readonly DiskBus[] = this.getAllowedEnumValues(\n      ValidationJSONPath.getDiskBusPath(finalDiskType),\n      validationErrorType,\n    ).map(DiskBus.fromString);\n\n    if (allowedBuses.length === 0) {\n      allowedBuses = DiskBus.getAll();\n    }\n\n    return new Set(allowedBuses.filter((bus) => finalDiskType.isBusSupported(bus)));\n  };\n\n  getRecommendedBuses = (diskType: DiskType): Set<DiskBus> => {\n    const allowedBuses = this.getAllowedBuses(diskType);\n    const recommendedBuses = [\n      ...this.getAllowedBuses(diskType, ValidationErrorType.Warn),\n    ].filter((b) => allowedBuses.has(b));\n    return recommendedBuses.length === 0 ? allowedBuses : new Set(recommendedBuses);\n  };\n\n  areBusesEqual = (otherTempValidations: TemplateValidations): boolean => {\n    if (!otherTempValidations) {\n      return false;\n    }\n\n    if (this === otherTempValidations) {\n      return true;\n    }\n\n    // Check if two sets of bus validations are the same - if the allowed and recommended buses are the same\n    const allowedBuses = this.getAllowedBuses(DiskType.DISK);\n    const otherAllowedBuses = otherTempValidations.getAllowedBuses(DiskType.DISK);\n    if (!isSetEqual(allowedBuses, otherAllowedBuses)) {\n      return false;\n    }\n\n    const recommendedBuses = this.getRecommendedBuses(DiskType.DISK);\n    const otherRecommendedBuses = otherTempValidations.getRecommendedBuses(DiskType.DISK);\n    if (!isSetEqual(recommendedBuses, otherRecommendedBuses)) {\n      return false;\n    }\n\n    const allowedCDBuses = this.getAllowedBuses(DiskType.CDROM);\n    const otherAllowedCDBuses = otherTempValidations.getAllowedBuses(DiskType.CDROM);\n    if (!isSetEqual(allowedCDBuses, otherAllowedCDBuses)) {\n      return false;\n    }\n\n    const recommendedCDBuses = this.getRecommendedBuses(DiskType.CDROM);\n    const otherRecommendedCDBuses = otherTempValidations.getRecommendedBuses(DiskType.CDROM);\n    if (!isSetEqual(recommendedCDBuses, otherRecommendedCDBuses)) {\n      return false;\n    }\n\n    return true;\n  };\n\n  validateBus = (\n    diskType: DiskType,\n    diskBus: DiskBus,\n    validationErrorType: ValidationErrorType = ValidationErrorType.Error,\n  ): DiskBusValidationResult => {\n    const allowedBuses = this.getAllowedBuses(diskType);\n    if (allowedBuses.has(diskBus)) {\n      const recommededBuses = this.getRecommendedBuses(diskType);\n      return new DiskBusValidationResult({\n        allowedBuses: recommededBuses,\n        type: ValidationErrorType.Warn,\n        isValid: recommededBuses.has(diskBus),\n      });\n    }\n\n    return new DiskBusValidationResult({\n      allowedBuses,\n      type: validationErrorType,\n      isValid: allowedBuses.has(diskBus),\n    });\n  };\n\n  getDefaultBus = (diskType: DiskType = DiskType.DISK, defaultBus?: DiskBus): DiskBus => {\n    let resolvedDefaultBus = defaultBus;\n\n    if (!resolvedDefaultBus) {\n      resolvedDefaultBus = diskType === DiskType.CDROM ? DiskBus.SATA : DiskBus.VIRTIO;\n    }\n\n    if (!diskType.isBusSupported(resolvedDefaultBus)) {\n      resolvedDefaultBus = undefined;\n      // eslint-disable-next-line no-console\n      console.error(`${resolvedDefaultBus} is not a supported disk bus for ${diskType} disks`);\n    }\n\n    const allowedBuses = this.getAllowedBuses(diskType);\n\n    if (allowedBuses.size === 0) {\n      return resolvedDefaultBus;\n    }\n\n    const recommendedBuses = this.getRecommendedBuses(diskType);\n\n    if (resolvedDefaultBus && recommendedBuses.has(resolvedDefaultBus)) {\n      return resolvedDefaultBus;\n    }\n\n    if (recommendedBuses.size > 0) {\n      return [...recommendedBuses][0];\n    }\n\n    return resolvedDefaultBus && allowedBuses.has(resolvedDefaultBus)\n      ? resolvedDefaultBus\n      : [...allowedBuses][0];\n  };\n\n  private validateMemoryByType = (\n    value: number,\n    type: ValidationErrorType,\n  ): IntervalValidationResult =>\n    new MemoryIntervalValidationResult(\n      this.validateInterval(value, ValidationJSONPath.MEMORY, {\n        defaultMin: 0,\n        isDefaultMinInclusive: false,\n        type,\n      }),\n    );\n\n  private validateInterval = (\n    value: number,\n    jsonPath: ValidationJSONPath,\n    {\n      isDefaultMinInclusive = true,\n      isDefaultMaxInclusive = true,\n      defaultMin = Number.NEGATIVE_INFINITY,\n      defaultMax = Number.POSITIVE_INFINITY,\n      type = ValidationErrorType.Error,\n    },\n  ): IntervalValidationResult => {\n    const relevantValidations = this.getRelevantValidations(jsonPath, type);\n\n    // combine validations for single template and make them strict (all integer validations must pass)\n    const { min, max, isMinInclusive, isMaxInclusive } = relevantValidations.reduce(\n      (\n        {\n          min: oldMin,\n          max: oldMax,\n          isMinInclusive: oldIsMinInclusive,\n          isMaxInclusive: oldIsMaxInclusive,\n        },\n        validation,\n      ) => {\n        let newMin = oldMin;\n        let newMax = oldMax;\n        let newIsMinInclusive = oldIsMinInclusive;\n        let newIsMaxInclusive = oldIsMaxInclusive;\n\n        if ('min' in validation && validation.min >= oldMin) {\n          newMin = validation.min;\n          newIsMinInclusive = true;\n        }\n        if ('max' in validation && validation.max <= oldMax) {\n          newMax = validation.max;\n          newIsMaxInclusive = true;\n        }\n        return {\n          min: newMin,\n          max: newMax,\n          isMinInclusive: newIsMinInclusive,\n          isMaxInclusive: newIsMaxInclusive,\n        };\n      },\n      {\n        min: defaultMin,\n        max: defaultMax,\n        isMinInclusive: isDefaultMinInclusive,\n        isMaxInclusive: isDefaultMaxInclusive,\n      },\n    );\n\n    const isValid =\n      (isMinInclusive ? min <= value : min < value) &&\n      (isMaxInclusive ? value <= max : value < max);\n\n    return new IntervalValidationResult({\n      type,\n      isValid,\n      min,\n      max,\n      isMinInclusive,\n      isMaxInclusive,\n    });\n  };\n\n  // Empty array means all values are allowed\n  private getAllowedEnumValues = (\n    jsonPath: ValidationJSONPath,\n    type: ValidationErrorType,\n  ): string[] => {\n    const relevantValidations = this.getRelevantValidations(jsonPath, type);\n\n    return relevantValidations.reduce(\n      (result: string[], validation: CommonTemplatesValidation) => result.concat(validation.values),\n      [],\n    );\n  };\n\n  private getRelevantValidations = (jsonPath: ValidationJSONPath, type: ValidationErrorType) => {\n    return this.validations.filter(\n      (validation: CommonTemplatesValidation) =>\n        validation.path.includes(jsonPath.getValue()) &&\n        (type === ValidationErrorType.Warn) === !!validation.justWarning,\n    );\n  };\n}\n"]}]}