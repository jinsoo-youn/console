{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/subscription.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/subscription.tsx","mtime":1615298458700},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport { Alert, Button } from '@patternfly/react-core';\nimport { InProgressIcon, PencilAltIcon } from '@patternfly/react-icons';\nimport { DetailsPage, MultiListPage, Table, TableRow, TableData, } from '@console/internal/components/factory';\nimport { MsgBox, ResourceLink, ResourceKebab, navFactory, Kebab, ResourceSummary, LoadingInline, SectionHeading, } from '@console/internal/components/utils';\nimport { removeQueryArgument } from '@console/internal/components/utils/router';\nimport { referenceForModel, k8sGet, k8sPatch, k8sKill, k8sUpdate, } from '@console/internal/module/k8s';\nimport { YellowExclamationTriangleIcon, GreenCheckCircleIcon, getNamespace, getName, WarningStatus, } from '@console/shared';\nimport { SubscriptionModel, ClusterServiceVersionModel, CatalogSourceModel, InstallPlanModel, PackageManifestModel, OperatorGroupModel, } from '../models';\nimport { SubscriptionState, InstallPlanPhase, } from '../types';\nimport { requireOperatorGroup } from './operator-group';\nimport { createUninstallOperatorModal } from './modals/uninstall-operator-modal';\nimport { createSubscriptionChannelModal } from './modals/subscription-channel-modal';\nimport { createInstallPlanApprovalModal } from './modals/installplan-approval-modal';\nexport const catalogSourceForSubscription = (catalogSources = [], subscription) => _.find(catalogSources, {\n    metadata: {\n        name: _.get(subscription, 'spec.source'),\n        namespace: _.get(subscription, 'spec.sourceNamespace'),\n    },\n});\nexport const installedCSVForSubscription = (clusterServiceVersions = [], subscription) => _.find(clusterServiceVersions, {\n    metadata: {\n        name: _.get(subscription, 'status.installedCSV'),\n    },\n});\nexport const packageForSubscription = (packageManifests = [], subscription) => _.find(packageManifests, {\n    metadata: {\n        name: _.get(subscription, 'spec.name'),\n    },\n    status: {\n        packageName: _.get(subscription, 'spec.name'),\n        catalogSource: _.get(subscription, 'spec.source'),\n        catalogSourceNamespace: _.get(subscription, 'spec.sourceNamespace'),\n    },\n});\nexport const installPlanForSubscription = (installPlans = [], subscription) => _.find(installPlans, {\n    metadata: {\n        name: _.get(subscription, 'status.installplan.name'),\n    },\n});\nconst tableColumnClasses = [\n    classNames('col-md-3', 'col-sm-4', 'col-xs-6'),\n    classNames('col-md-3', 'col-sm-4', 'col-xs-6'),\n    classNames('col-lg-2', 'col-md-3', 'col-sm-4', 'hidden-xs'),\n    classNames('col-lg-2', 'col-md-3', 'hidden-sm', 'hidden-xs'),\n    classNames('col-lg-2', 'hidden-md', 'hidden-sm', 'hidden-xs'),\n    Kebab.columnClass,\n];\nexport const SubscriptionTableHeader = () => {\n    return [\n        {\n            title: 'Name',\n            sortField: 'metadata.name',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[0] },\n        },\n        {\n            title: 'Namespace',\n            sortField: 'metadata.namespace',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[1] },\n        },\n        {\n            title: 'Status',\n            props: { className: tableColumnClasses[2] },\n        },\n        {\n            title: 'Channel',\n            props: { className: tableColumnClasses[3] },\n        },\n        {\n            title: 'Approval Strategy',\n            props: { className: tableColumnClasses[4] },\n        },\n        {\n            title: '',\n            props: { className: tableColumnClasses[5] },\n        },\n    ];\n};\nSubscriptionTableHeader.displayName = 'SubscriptionTableHeader';\nconst subscriptionState = (state) => {\n    switch (state) {\n        case SubscriptionState.SubscriptionStateUpgradeAvailable:\n            return (React.createElement(\"span\", null,\n                React.createElement(YellowExclamationTriangleIcon, null),\n                \" Upgrade available\"));\n        case SubscriptionState.SubscriptionStateUpgradePending:\n            return (React.createElement(\"span\", null,\n                React.createElement(InProgressIcon, { className: \"text-primary\" }),\n                \" Upgrading\"));\n        case SubscriptionState.SubscriptionStateAtLatest:\n            return (React.createElement(\"span\", null,\n                React.createElement(GreenCheckCircleIcon, null),\n                \" Up to date\"));\n        default:\n            return (React.createElement(\"span\", { className: _.isEmpty(state) ? 'text-muted' : '' }, state || 'Unknown failure'));\n    }\n};\nconst menuActions = [\n    Kebab.factory.Edit,\n    (kind, obj) => ({\n        label: 'Remove Subscription',\n        callback: () => createUninstallOperatorModal({ k8sKill, k8sGet, k8sPatch, subscription: obj }),\n        accessReview: {\n            group: kind.apiGroup,\n            resource: kind.plural,\n            name: obj.metadata.name,\n            namespace: obj.metadata.namespace,\n            verb: 'delete',\n        },\n    }),\n    (kind, obj) => {\n        const installedCSV = _.get(obj, 'status.installedCSV');\n        return {\n            label: `View ${ClusterServiceVersionModel.kind}...`,\n            href: `/k8s/ns/${obj.metadata.namespace}/${ClusterServiceVersionModel.plural}/${installedCSV}`,\n            hidden: !installedCSV,\n        };\n    },\n];\nexport const SubscriptionTableRow = ({ obj, index, key, style }) => {\n    return (React.createElement(TableRow, { id: obj.metadata.uid, index: index, trKey: key, style: style },\n        React.createElement(TableData, { className: tableColumnClasses[0] },\n            React.createElement(ResourceLink, { kind: referenceForModel(SubscriptionModel), name: obj.metadata.name, namespace: obj.metadata.namespace, title: obj.metadata.name })),\n        React.createElement(TableData, { className: tableColumnClasses[1] },\n            React.createElement(ResourceLink, { kind: \"Namespace\", name: obj.metadata.namespace, title: obj.metadata.namespace, displayName: obj.metadata.namespace })),\n        React.createElement(TableData, { className: tableColumnClasses[2] }, subscriptionState(_.get(obj.status, 'state'))),\n        React.createElement(TableData, { className: classNames(tableColumnClasses[3], 'co-truncate', 'co-select-to-copy') }, obj.spec.channel || 'default'),\n        React.createElement(TableData, { className: tableColumnClasses[4] }, obj.spec.installPlanApproval || 'Automatic'),\n        React.createElement(TableData, { className: tableColumnClasses[5] },\n            React.createElement(ResourceKebab, { actions: menuActions, kind: referenceForModel(SubscriptionModel), resource: obj }))));\n};\nexport const SubscriptionsList = requireOperatorGroup((props) => (React.createElement(Table, Object.assign({}, props, { \"aria-label\": \"Operator Subscriptions\", Header: SubscriptionTableHeader, Row: SubscriptionTableRow, EmptyMsg: () => (React.createElement(MsgBox, { title: \"No Subscriptions Found\", detail: \"Each namespace can subscribe to a single channel of a package for automatic updates.\" })), virtualize: true }))));\nexport const SubscriptionsPage = (props) => {\n    return (React.createElement(MultiListPage, Object.assign({}, props, { resources: [\n            {\n                kind: referenceForModel(SubscriptionModel),\n                namespace: props.namespace,\n                namespaced: true,\n                prop: 'subscription',\n            },\n            {\n                kind: referenceForModel(OperatorGroupModel),\n                namespace: props.namespace,\n                namespaced: true,\n                prop: 'operatorGroup',\n            },\n        ], flatten: (resources) => _.get(resources.subscription, 'data', []), title: \"Subscriptions\", canCreate: true, createProps: { to: '/operatorhub' }, createButtonText: \"Create Subscription\", ListComponent: SubscriptionsList, filterLabel: \"Subscriptions by package\" })));\n};\nexport const SubscriptionDetails = ({ catalogSources = [], clusterServiceVersions = [], installPlans = [], obj, packageManifests = [], }) => {\n    var _a, _b, _c;\n    const catalogSource = catalogSourceForSubscription(catalogSources, obj);\n    const installedCSV = installedCSVForSubscription(clusterServiceVersions, obj);\n    const installPlan = installPlanForSubscription(installPlans, obj);\n    const installStatusPhase = (_a = installPlan === null || installPlan === void 0 ? void 0 : installPlan.status) === null || _a === void 0 ? void 0 : _a.phase;\n    const installFailedCondition = (_c = (_b = installPlan === null || installPlan === void 0 ? void 0 : installPlan.status) === null || _b === void 0 ? void 0 : _b.conditions) === null || _c === void 0 ? void 0 : _c.find(({ type, status }) => type === 'Installed' && status === 'False');\n    const installFailedMessage = (installFailedCondition === null || installFailedCondition === void 0 ? void 0 : installFailedCondition.message) || (installFailedCondition === null || installFailedCondition === void 0 ? void 0 : installFailedCondition.reason) || 'Install plan failed';\n    const pkg = packageForSubscription(packageManifests, obj);\n    if (new URLSearchParams(window.location.search).has('showDelete')) {\n        createUninstallOperatorModal({ k8sKill, k8sGet, k8sPatch, subscription: obj })\n            .result.then(() => removeQueryArgument('showDelete'))\n            .catch(_.noop);\n    }\n    return (React.createElement(\"div\", { className: \"co-m-pane__body\" },\n        !catalogSource && (React.createElement(Alert, { isInline: true, className: \"co-alert\", variant: \"warning\", title: \"Catalog Source Removed\" }, \"The catalog source for this operator has been removed. The catalog source must be added back in order for this operator to receive any updates.\")),\n        installStatusPhase === InstallPlanPhase.InstallPlanPhaseFailed && (React.createElement(Alert, { isInline: true, className: \"co-alert co-alert--scrollable\", variant: \"danger\", title: installStatusPhase }, installFailedMessage)),\n        React.createElement(SectionHeading, { text: \"Subscription Details\" }),\n        React.createElement(\"div\", { className: \"co-m-pane__body-group\" },\n            React.createElement(SubscriptionUpdates, { catalogSource: catalogSource, pkg: pkg, obj: obj, installedCSV: installedCSV, installPlan: installPlan })),\n        React.createElement(\"div\", { className: \"co-m-pane__body-group\" },\n            React.createElement(\"div\", { className: \"row\" },\n                React.createElement(\"div\", { className: \"col-sm-6\" },\n                    React.createElement(ResourceSummary, { resource: obj, showAnnotations: false })),\n                React.createElement(\"div\", { className: \"col-sm-6\" },\n                    React.createElement(\"dl\", { className: \"co-m-pane__details\" },\n                        React.createElement(\"dt\", null, \"Installed Version\"),\n                        React.createElement(\"dd\", null, installedCSV ? (React.createElement(ResourceLink, { kind: referenceForModel(ClusterServiceVersionModel), name: getName(installedCSV), namespace: getNamespace(installedCSV), title: getName(installedCSV) })) : ('None')),\n                        React.createElement(\"dt\", null, \"Starting Version\"),\n                        React.createElement(\"dd\", null, obj.spec.startingCSV || 'None'),\n                        React.createElement(\"dt\", null, \"Catalog Source\"),\n                        React.createElement(\"dd\", null, catalogSource ? (React.createElement(ResourceLink, { kind: referenceForModel(CatalogSourceModel), name: getName(catalogSource), namespace: getNamespace(catalogSource), title: getName(catalogSource) })) : ('None')),\n                        React.createElement(\"dt\", null, \"Install Plan\"),\n                        React.createElement(\"dd\", null, installPlan ? (React.createElement(ResourceLink, { kind: referenceForModel(InstallPlanModel), name: getName(installPlan), namespace: getNamespace(installPlan), title: getName(installPlan) })) : ('None'))))))));\n};\nexport class SubscriptionUpdates extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            waitingForUpdate: false,\n            installPlanApproval: _.get(props.obj, 'spec.installPlanApproval'),\n            channel: _.get(props.obj, 'spec.channel'),\n        };\n    }\n    static getDerivedStateFromProps(nextProps, prevState) {\n        const stillWaiting = prevState.waitingForUpdate &&\n            _.get(nextProps, 'obj.spec.channel') === prevState.channel &&\n            _.get(nextProps, 'obj.spec.installPlanApproval') === prevState.installPlanApproval;\n        return stillWaiting\n            ? null\n            : {\n                waitingForUpdate: false,\n                channel: _.get(nextProps, 'obj.spec.channel'),\n                installPlanApproval: _.get(nextProps, 'obj.spec.installPlanApproval'),\n            };\n    }\n    render() {\n        const { catalogSource, installedCSV, obj, pkg } = this.props;\n        const k8sUpdateAndWait = (...args) => k8sUpdate(...args).then(() => this.setState({ waitingForUpdate: true }));\n        const channelModal = () => createSubscriptionChannelModal({ subscription: obj, pkg, k8sUpdate: k8sUpdateAndWait });\n        const approvalModal = () => createInstallPlanApprovalModal({ obj, k8sUpdate: k8sUpdateAndWait });\n        const installPlanPhase = (installPlan) => {\n            switch (_.get(installPlan, 'status.phase')) {\n                case InstallPlanPhase.InstallPlanPhaseRequiresApproval:\n                    return '1 requires approval';\n                case InstallPlanPhase.InstallPlanPhaseFailed:\n                    return '1 failed';\n                default:\n                    return '1 installing';\n            }\n        };\n        return (React.createElement(\"div\", { className: \"co-detail-table\" },\n            React.createElement(\"div\", { className: \"co-detail-table__row row\" },\n                React.createElement(\"div\", { className: \"co-detail-table__section col-sm-3\" },\n                    React.createElement(\"dl\", { className: \"co-m-pane__details\" },\n                        React.createElement(\"dt\", { className: \"co-detail-table__section-header\" }, \"Channel\"),\n                        React.createElement(\"dd\", null, this.state.waitingForUpdate ? (React.createElement(LoadingInline, null)) : (React.createElement(Button, { type: \"button\", isInline: true, onClick: channelModal, variant: \"link\", isDisabled: !pkg },\n                            obj.spec.channel || 'default',\n                            pkg && React.createElement(PencilAltIcon, { className: \"co-icon-space-l pf-c-button-icon--plain\" })))))),\n                React.createElement(\"div\", { className: \"co-detail-table__section col-sm-3\" },\n                    React.createElement(\"dl\", { className: \"co-m-pane__details\" },\n                        React.createElement(\"dt\", { className: \"co-detail-table__section-header\" }, \"Approval\"),\n                        React.createElement(\"dd\", null, this.state.waitingForUpdate ? (React.createElement(LoadingInline, null)) : (React.createElement(Button, { type: \"button\", isInline: true, onClick: approvalModal, variant: \"link\" },\n                            obj.spec.installPlanApproval || 'Automatic',\n                            React.createElement(PencilAltIcon, { className: \"co-icon-space-l pf-c-button-icon--plain\" })))))),\n                React.createElement(\"div\", { className: \"co-detail-table__section co-detail-table__section--last col-sm-6\" },\n                    React.createElement(\"dl\", { className: \"co-m-pane__details\" },\n                        React.createElement(\"dt\", { className: \"co-detail-table__section-header\" }, \"Upgrade Status\"),\n                        catalogSource ? (React.createElement(\"dd\", null, subscriptionState(_.get(obj.status, 'state')))) : (React.createElement(\"dd\", null,\n                            React.createElement(WarningStatus, { title: \"Cannot update\" }),\n                            React.createElement(\"span\", { className: \"text-muted\" }, \"Catalog source was removed\")))),\n                    catalogSource && (React.createElement(React.Fragment, null,\n                        React.createElement(\"div\", { className: \"co-detail-table__bracket\" }),\n                        React.createElement(\"div\", { className: \"co-detail-table__breakdown\" },\n                            _.get(obj.status, 'installedCSV') && installedCSV ? (React.createElement(Link, { to: `/k8s/ns/${obj.metadata.namespace}/${referenceForModel(ClusterServiceVersionModel)}/${_.get(obj.status, 'installedCSV')}` }, \"1 installed\")) : (React.createElement(\"span\", null, \"0 installed\")),\n                            _.get(obj.status, 'state') ===\n                                SubscriptionState.SubscriptionStateUpgradePending &&\n                                _.get(obj.status, 'installplan') &&\n                                this.props.installPlan ? (React.createElement(Link, { to: `/k8s/ns/${obj.metadata.namespace}/${referenceForModel(InstallPlanModel)}/${_.get(obj.status, 'installplan.name')}` },\n                                React.createElement(\"span\", null, installPlanPhase(this.props.installPlan)))) : (React.createElement(\"span\", null, \"0 installing\")))))))));\n    }\n}\nexport const SubscriptionDetailsPage = (props) => (React.createElement(DetailsPage, Object.assign({}, props, { namespace: props.match.params.ns, kind: referenceForModel(SubscriptionModel), name: props.match.params.name, pages: [navFactory.details(SubscriptionDetails), navFactory.editYaml()], resources: [\n        {\n            kind: referenceForModel(PackageManifestModel),\n            isList: true,\n            namespace: props.namespace,\n            prop: 'packageManifests',\n        },\n        {\n            kind: referenceForModel(InstallPlanModel),\n            isList: true,\n            namespace: props.namespace,\n            prop: 'installPlans',\n        },\n        {\n            kind: referenceForModel(ClusterServiceVersionModel),\n            namespace: props.namespace,\n            isList: true,\n            prop: 'clusterServiceVersions',\n        },\n        {\n            kind: referenceForModel(CatalogSourceModel),\n            isList: true,\n            prop: 'catalogSources',\n        },\n    ], menuActions: menuActions })));\nSubscriptionsList.displayName = 'SubscriptionsList';\nSubscriptionsPage.displayName = 'SubscriptionsPage';\nSubscriptionDetails.displayName = 'SubscriptionDetails';\nSubscriptionDetailsPage.displayName = 'SubscriptionDetailsPage';\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/subscription.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/subscription.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { match, Link } from 'react-router-dom';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport { Alert, Button } from '@patternfly/react-core';\nimport { InProgressIcon, PencilAltIcon } from '@patternfly/react-icons';\nimport {\n  DetailsPage,\n  MultiListPage,\n  Table,\n  TableRow,\n  TableData,\n  RowFunction,\n} from '@console/internal/components/factory';\nimport {\n  MsgBox,\n  ResourceLink,\n  ResourceKebab,\n  navFactory,\n  Kebab,\n  ResourceSummary,\n  LoadingInline,\n  SectionHeading,\n} from '@console/internal/components/utils';\nimport { removeQueryArgument } from '@console/internal/components/utils/router';\nimport {\n  referenceForModel,\n  k8sGet,\n  k8sPatch,\n  k8sKill,\n  k8sUpdate,\n  K8sResourceKind,\n} from '@console/internal/module/k8s';\nimport {\n  YellowExclamationTriangleIcon,\n  GreenCheckCircleIcon,\n  getNamespace,\n  getName,\n  WarningStatus,\n} from '@console/shared';\nimport {\n  SubscriptionModel,\n  ClusterServiceVersionModel,\n  CatalogSourceModel,\n  InstallPlanModel,\n  PackageManifestModel,\n  OperatorGroupModel,\n} from '../models';\nimport {\n  SubscriptionKind,\n  SubscriptionState,\n  PackageManifestKind,\n  InstallPlanApproval,\n  ClusterServiceVersionKind,\n  OperatorGroupKind,\n  InstallPlanKind,\n  InstallPlanPhase,\n  CatalogSourceKind,\n} from '../types';\nimport { requireOperatorGroup } from './operator-group';\nimport { createUninstallOperatorModal } from './modals/uninstall-operator-modal';\nimport { createSubscriptionChannelModal } from './modals/subscription-channel-modal';\nimport { createInstallPlanApprovalModal } from './modals/installplan-approval-modal';\n\nexport const catalogSourceForSubscription = (\n  catalogSources: CatalogSourceKind[] = [],\n  subscription: SubscriptionKind,\n): CatalogSourceKind =>\n  _.find(catalogSources, {\n    metadata: {\n      name: _.get(subscription, 'spec.source'),\n      namespace: _.get(subscription, 'spec.sourceNamespace'),\n    },\n  });\n\nexport const installedCSVForSubscription = (\n  clusterServiceVersions: ClusterServiceVersionKind[] = [],\n  subscription: SubscriptionKind,\n): ClusterServiceVersionKind =>\n  _.find(clusterServiceVersions, {\n    metadata: {\n      name: _.get(subscription, 'status.installedCSV'),\n    },\n  });\n\nexport const packageForSubscription = (\n  packageManifests: PackageManifestKind[] = [],\n  subscription: SubscriptionKind,\n): PackageManifestKind =>\n  _.find(packageManifests, {\n    metadata: {\n      name: _.get(subscription, 'spec.name'),\n    },\n    status: {\n      packageName: _.get(subscription, 'spec.name'),\n      catalogSource: _.get(subscription, 'spec.source'),\n      catalogSourceNamespace: _.get(subscription, 'spec.sourceNamespace'),\n    },\n  });\n\nexport const installPlanForSubscription = (\n  installPlans: InstallPlanKind[] = [],\n  subscription: SubscriptionKind,\n): InstallPlanKind =>\n  _.find(installPlans, {\n    metadata: {\n      name: _.get(subscription, 'status.installplan.name'),\n    },\n  });\n\nconst tableColumnClasses = [\n  classNames('col-md-3', 'col-sm-4', 'col-xs-6'),\n  classNames('col-md-3', 'col-sm-4', 'col-xs-6'),\n  classNames('col-lg-2', 'col-md-3', 'col-sm-4', 'hidden-xs'),\n  classNames('col-lg-2', 'col-md-3', 'hidden-sm', 'hidden-xs'),\n  classNames('col-lg-2', 'hidden-md', 'hidden-sm', 'hidden-xs'),\n  Kebab.columnClass,\n];\n\nexport const SubscriptionTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Status',\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Channel',\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: 'Approval Strategy',\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[5] },\n    },\n  ];\n};\nSubscriptionTableHeader.displayName = 'SubscriptionTableHeader';\n\nconst subscriptionState = (state: SubscriptionState) => {\n  switch (state) {\n    case SubscriptionState.SubscriptionStateUpgradeAvailable:\n      return (\n        <span>\n          <YellowExclamationTriangleIcon /> Upgrade available\n        </span>\n      );\n    case SubscriptionState.SubscriptionStateUpgradePending:\n      return (\n        <span>\n          <InProgressIcon className=\"text-primary\" /> Upgrading\n        </span>\n      );\n    case SubscriptionState.SubscriptionStateAtLatest:\n      return (\n        <span>\n          <GreenCheckCircleIcon /> Up to date\n        </span>\n      );\n    default:\n      return (\n        <span className={_.isEmpty(state) ? 'text-muted' : ''}>{state || 'Unknown failure'}</span>\n      );\n  }\n};\n\nconst menuActions = [\n  Kebab.factory.Edit,\n  (kind, obj) => ({\n    label: 'Remove Subscription',\n    callback: () => createUninstallOperatorModal({ k8sKill, k8sGet, k8sPatch, subscription: obj }),\n    accessReview: {\n      group: kind.apiGroup,\n      resource: kind.plural,\n      name: obj.metadata.name,\n      namespace: obj.metadata.namespace,\n      verb: 'delete',\n    },\n  }),\n  (kind, obj) => {\n    const installedCSV = _.get(obj, 'status.installedCSV');\n    return {\n      label: `View ${ClusterServiceVersionModel.kind}...`,\n      href: `/k8s/ns/${obj.metadata.namespace}/${ClusterServiceVersionModel.plural}/${installedCSV}`,\n      hidden: !installedCSV,\n    };\n  },\n];\n\nexport const SubscriptionTableRow: RowFunction<K8sResourceKind> = ({ obj, index, key, style }) => {\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={referenceForModel(SubscriptionModel)}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n          title={obj.metadata.name}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[1]}>\n        <ResourceLink\n          kind=\"Namespace\"\n          name={obj.metadata.namespace}\n          title={obj.metadata.namespace}\n          displayName={obj.metadata.namespace}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        {subscriptionState(_.get(obj.status, 'state'))}\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[3], 'co-truncate', 'co-select-to-copy')}>\n        {obj.spec.channel || 'default'}\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        {obj.spec.installPlanApproval || 'Automatic'}\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <ResourceKebab\n          actions={menuActions}\n          kind={referenceForModel(SubscriptionModel)}\n          resource={obj}\n        />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport const SubscriptionsList = requireOperatorGroup((props: SubscriptionsListProps) => (\n  <Table\n    {...props}\n    aria-label=\"Operator Subscriptions\"\n    Header={SubscriptionTableHeader}\n    Row={SubscriptionTableRow}\n    EmptyMsg={() => (\n      <MsgBox\n        title=\"No Subscriptions Found\"\n        detail=\"Each namespace can subscribe to a single channel of a package for automatic updates.\"\n      />\n    )}\n    virtualize\n  />\n));\n\nexport const SubscriptionsPage: React.SFC<SubscriptionsPageProps> = (props) => {\n  return (\n    <MultiListPage\n      {...props}\n      resources={[\n        {\n          kind: referenceForModel(SubscriptionModel),\n          namespace: props.namespace,\n          namespaced: true,\n          prop: 'subscription',\n        },\n        {\n          kind: referenceForModel(OperatorGroupModel),\n          namespace: props.namespace,\n          namespaced: true,\n          prop: 'operatorGroup',\n        },\n      ]}\n      flatten={(resources) => _.get(resources.subscription, 'data', [])}\n      title=\"Subscriptions\"\n      canCreate\n      createProps={{ to: '/operatorhub' }}\n      createButtonText=\"Create Subscription\"\n      ListComponent={SubscriptionsList}\n      filterLabel=\"Subscriptions by package\"\n    />\n  );\n};\n\nexport const SubscriptionDetails: React.FC<SubscriptionDetailsProps> = ({\n  catalogSources = [],\n  clusterServiceVersions = [],\n  installPlans = [],\n  obj,\n  packageManifests = [],\n}) => {\n  const catalogSource = catalogSourceForSubscription(catalogSources, obj);\n  const installedCSV = installedCSVForSubscription(clusterServiceVersions, obj);\n  const installPlan = installPlanForSubscription(installPlans, obj);\n  const installStatusPhase = installPlan?.status?.phase;\n  const installFailedCondition = installPlan?.status?.conditions?.find(\n    ({ type, status }) => type === 'Installed' && status === 'False',\n  );\n  const installFailedMessage =\n    installFailedCondition?.message || installFailedCondition?.reason || 'Install plan failed';\n\n  const pkg = packageForSubscription(packageManifests, obj);\n  if (new URLSearchParams(window.location.search).has('showDelete')) {\n    createUninstallOperatorModal({ k8sKill, k8sGet, k8sPatch, subscription: obj })\n      .result.then(() => removeQueryArgument('showDelete'))\n      .catch(_.noop);\n  }\n\n  return (\n    <div className=\"co-m-pane__body\">\n      {!catalogSource && (\n        <Alert isInline className=\"co-alert\" variant=\"warning\" title=\"Catalog Source Removed\">\n          The catalog source for this operator has been removed. The catalog source must be added\n          back in order for this operator to receive any updates.\n        </Alert>\n      )}\n      {installStatusPhase === InstallPlanPhase.InstallPlanPhaseFailed && (\n        <Alert\n          isInline\n          className=\"co-alert co-alert--scrollable\"\n          variant=\"danger\"\n          title={installStatusPhase}\n        >\n          {installFailedMessage}\n        </Alert>\n      )}\n      <SectionHeading text=\"Subscription Details\" />\n      <div className=\"co-m-pane__body-group\">\n        <SubscriptionUpdates\n          catalogSource={catalogSource}\n          pkg={pkg}\n          obj={obj}\n          installedCSV={installedCSV}\n          installPlan={installPlan}\n        />\n      </div>\n      <div className=\"co-m-pane__body-group\">\n        <div className=\"row\">\n          <div className=\"col-sm-6\">\n            <ResourceSummary resource={obj} showAnnotations={false} />\n          </div>\n          <div className=\"col-sm-6\">\n            <dl className=\"co-m-pane__details\">\n              <dt>Installed Version</dt>\n              <dd>\n                {installedCSV ? (\n                  <ResourceLink\n                    kind={referenceForModel(ClusterServiceVersionModel)}\n                    name={getName(installedCSV)}\n                    namespace={getNamespace(installedCSV)}\n                    title={getName(installedCSV)}\n                  />\n                ) : (\n                  'None'\n                )}\n              </dd>\n              <dt>Starting Version</dt>\n              <dd>{obj.spec.startingCSV || 'None'}</dd>\n              <dt>Catalog Source</dt>\n              <dd>\n                {catalogSource ? (\n                  <ResourceLink\n                    kind={referenceForModel(CatalogSourceModel)}\n                    name={getName(catalogSource)}\n                    namespace={getNamespace(catalogSource)}\n                    title={getName(catalogSource)}\n                  />\n                ) : (\n                  'None'\n                )}\n              </dd>\n              <dt>Install Plan</dt>\n              <dd>\n                {installPlan ? (\n                  <ResourceLink\n                    kind={referenceForModel(InstallPlanModel)}\n                    name={getName(installPlan)}\n                    namespace={getNamespace(installPlan)}\n                    title={getName(installPlan)}\n                  />\n                ) : (\n                  'None'\n                )}\n              </dd>\n            </dl>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport class SubscriptionUpdates extends React.Component<\n  SubscriptionUpdatesProps,\n  SubscriptionUpdatesState\n> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      waitingForUpdate: false,\n      installPlanApproval: _.get(props.obj, 'spec.installPlanApproval'),\n      channel: _.get(props.obj, 'spec.channel'),\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    const stillWaiting =\n      prevState.waitingForUpdate &&\n      _.get(nextProps, 'obj.spec.channel') === prevState.channel &&\n      _.get(nextProps, 'obj.spec.installPlanApproval') === prevState.installPlanApproval;\n\n    return stillWaiting\n      ? null\n      : {\n          waitingForUpdate: false,\n          channel: _.get(nextProps, 'obj.spec.channel'),\n          installPlanApproval: _.get(nextProps, 'obj.spec.installPlanApproval'),\n        };\n  }\n\n  render() {\n    const { catalogSource, installedCSV, obj, pkg } = this.props;\n\n    const k8sUpdateAndWait = (...args) =>\n      k8sUpdate(...args).then(() => this.setState({ waitingForUpdate: true }));\n    const channelModal = () =>\n      createSubscriptionChannelModal({ subscription: obj, pkg, k8sUpdate: k8sUpdateAndWait });\n    const approvalModal = () =>\n      createInstallPlanApprovalModal({ obj, k8sUpdate: k8sUpdateAndWait });\n    const installPlanPhase = (installPlan: InstallPlanKind) => {\n      switch (_.get(installPlan, 'status.phase') as InstallPlanPhase) {\n        case InstallPlanPhase.InstallPlanPhaseRequiresApproval:\n          return '1 requires approval';\n        case InstallPlanPhase.InstallPlanPhaseFailed:\n          return '1 failed';\n        default:\n          return '1 installing';\n      }\n    };\n\n    return (\n      <div className=\"co-detail-table\">\n        <div className=\"co-detail-table__row row\">\n          <div className=\"co-detail-table__section col-sm-3\">\n            <dl className=\"co-m-pane__details\">\n              <dt className=\"co-detail-table__section-header\">Channel</dt>\n              <dd>\n                {this.state.waitingForUpdate ? (\n                  <LoadingInline />\n                ) : (\n                  <Button\n                    type=\"button\"\n                    isInline\n                    onClick={channelModal}\n                    variant=\"link\"\n                    isDisabled={!pkg}\n                  >\n                    {obj.spec.channel || 'default'}\n                    {pkg && <PencilAltIcon className=\"co-icon-space-l pf-c-button-icon--plain\" />}\n                  </Button>\n                )}\n              </dd>\n            </dl>\n          </div>\n          <div className=\"co-detail-table__section col-sm-3\">\n            <dl className=\"co-m-pane__details\">\n              <dt className=\"co-detail-table__section-header\">Approval</dt>\n              <dd>\n                {this.state.waitingForUpdate ? (\n                  <LoadingInline />\n                ) : (\n                  <Button type=\"button\" isInline onClick={approvalModal} variant=\"link\">\n                    {obj.spec.installPlanApproval || 'Automatic'}\n                    <PencilAltIcon className=\"co-icon-space-l pf-c-button-icon--plain\" />\n                  </Button>\n                )}\n              </dd>\n            </dl>\n          </div>\n          <div className=\"co-detail-table__section co-detail-table__section--last col-sm-6\">\n            <dl className=\"co-m-pane__details\">\n              <dt className=\"co-detail-table__section-header\">Upgrade Status</dt>\n              {catalogSource ? (\n                <dd>{subscriptionState(_.get(obj.status, 'state'))}</dd>\n              ) : (\n                <dd>\n                  <WarningStatus title=\"Cannot update\" />\n                  <span className=\"text-muted\">Catalog source was removed</span>\n                </dd>\n              )}\n            </dl>\n            {catalogSource && (\n              <>\n                <div className=\"co-detail-table__bracket\" />\n                <div className=\"co-detail-table__breakdown\">\n                  {_.get(obj.status, 'installedCSV') && installedCSV ? (\n                    <Link\n                      to={`/k8s/ns/${obj.metadata.namespace}/${referenceForModel(\n                        ClusterServiceVersionModel,\n                      )}/${_.get(obj.status, 'installedCSV')}`}\n                    >\n                      1 installed\n                    </Link>\n                  ) : (\n                    <span>0 installed</span>\n                  )}\n                  {_.get(obj.status, 'state') ===\n                    SubscriptionState.SubscriptionStateUpgradePending &&\n                  _.get(obj.status, 'installplan') &&\n                  this.props.installPlan ? (\n                    <Link\n                      to={`/k8s/ns/${obj.metadata.namespace}/${referenceForModel(\n                        InstallPlanModel,\n                      )}/${_.get(obj.status, 'installplan.name')}`}\n                    >\n                      <span>{installPlanPhase(this.props.installPlan)}</span>\n                    </Link>\n                  ) : (\n                    <span>0 installing</span>\n                  )}\n                </div>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport const SubscriptionDetailsPage: React.SFC<SubscriptionDetailsPageProps> = (props) => (\n  <DetailsPage\n    {...props}\n    namespace={props.match.params.ns}\n    kind={referenceForModel(SubscriptionModel)}\n    name={props.match.params.name}\n    pages={[navFactory.details(SubscriptionDetails), navFactory.editYaml()]}\n    resources={[\n      {\n        kind: referenceForModel(PackageManifestModel),\n        isList: true,\n        namespace: props.namespace,\n        prop: 'packageManifests',\n      },\n      {\n        kind: referenceForModel(InstallPlanModel),\n        isList: true,\n        namespace: props.namespace,\n        prop: 'installPlans',\n      },\n      {\n        kind: referenceForModel(ClusterServiceVersionModel),\n        namespace: props.namespace,\n        isList: true,\n        prop: 'clusterServiceVersions',\n      },\n      {\n        kind: referenceForModel(CatalogSourceModel),\n        isList: true,\n        prop: 'catalogSources',\n      },\n    ]}\n    menuActions={menuActions}\n  />\n);\n\nexport type SubscriptionsPageProps = {\n  namespace?: string;\n  match?: match<{ ns?: string }>;\n};\n\nexport type SubscriptionsListProps = {\n  loaded: boolean;\n  loadError?: string;\n  data: SubscriptionKind[];\n  operatorGroup: { loaded: boolean; data?: OperatorGroupKind[] };\n};\n\nexport type SubscriptionUpdatesProps = {\n  catalogSource: CatalogSourceKind;\n  obj: SubscriptionKind;\n  pkg: PackageManifestKind;\n  installedCSV?: ClusterServiceVersionKind;\n  installPlan?: InstallPlanKind;\n};\n\nexport type SubscriptionUpdatesState = {\n  waitingForUpdate: boolean;\n  channel: string;\n  installPlanApproval: InstallPlanApproval;\n};\n\nexport type SubscriptionDetailsProps = {\n  catalogSources?: CatalogSourceKind[];\n  clusterServiceVersions?: ClusterServiceVersionKind[];\n  installPlans?: InstallPlanKind[];\n  obj: SubscriptionKind;\n  packageManifests: PackageManifestKind[];\n};\n\nexport type SubscriptionDetailsPageProps = {\n  match: match<{ ns: string; name: string }>;\n  namespace: string;\n};\n\nSubscriptionsList.displayName = 'SubscriptionsList';\nSubscriptionsPage.displayName = 'SubscriptionsPage';\nSubscriptionDetails.displayName = 'SubscriptionDetails';\nSubscriptionDetailsPage.displayName = 'SubscriptionDetailsPage';\n"]}]}