{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/overview/RevisionsOverviewList.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/overview/RevisionsOverviewList.tsx","mtime":1615298458640},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Button } from '@patternfly/react-core';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { SidebarSectionHeading, useAccessReview } from '@console/internal/components/utils';\nimport { setTrafficDistributionModal } from '../modals';\nimport { ServiceModel, RevisionModel } from '../../models';\nimport RevisionsOverviewListItem from './RevisionsOverviewListItem';\nimport './RevisionsOverviewList.scss';\nimport { Link } from 'react-router-dom';\nconst MAX_REVISIONS = 3;\nconst RevisionsOverviewList = ({ revisions, service }) => {\n    var _a, _b, _c;\n    const canSetTrafficDistribution = useAccessReview({\n        group: ServiceModel.apiGroup,\n        resource: ServiceModel.plural,\n        namespace: service.metadata.namespace,\n        verb: 'update',\n    });\n    const namespace = (_a = service.metadata) === null || _a === void 0 ? void 0 : _a.namespace;\n    const traffic = (_b = service.status) === null || _b === void 0 ? void 0 : _b.traffic;\n    const name = (_c = service.metadata) === null || _c === void 0 ? void 0 : _c.name;\n    const filteredRevisions = () => {\n        if (!revisions || !revisions.length) {\n            return [];\n        }\n        const [revWithTraffic, revWithoutTraffic] = _.partition(revisions, (element) => {\n            var _a;\n            return traffic ? _.find(traffic, { revisionName: (_a = element.metadata) === null || _a === void 0 ? void 0 : _a.name }) : false;\n        }).map((element) => _.sortBy(element, ['metadata.creationTimestamp']));\n        return revWithTraffic.length < MAX_REVISIONS\n            ? _.concat(revWithTraffic, revWithoutTraffic.slice(0, MAX_REVISIONS - revWithTraffic.length))\n            : revWithTraffic;\n    };\n    const getRevisionsLink = () => {\n        const url = `/search/ns/${namespace}`;\n        const searchQuery = `serving.knative.dev/service=${name}`;\n        const params = new URLSearchParams();\n        params.append('kind', referenceForModel(RevisionModel));\n        params.append('q', searchQuery);\n        return `${url}?${params.toString()}`;\n    };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(SidebarSectionHeading, { text: \"Revisions\", className: \"revision-overview-list\" },\n            (revisions === null || revisions === void 0 ? void 0 : revisions.length) > MAX_REVISIONS && (React.createElement(Link, { className: \"sidebar__section-view-all\", to: getRevisionsLink() }, `View all (${revisions.length})`)),\n            canSetTrafficDistribution && (React.createElement(Button, { variant: \"secondary\", onClick: () => setTrafficDistributionModal({ obj: service }), isDisabled: !(revisions && revisions.length) }, \"Set Traffic Distribution\"))),\n        _.isEmpty(revisions) ? (React.createElement(\"span\", { className: \"text-muted\" }, \"No Revisions found for this resource.\")) : (React.createElement(\"ul\", { className: \"list-group\" }, _.map(filteredRevisions(), (revision) => (React.createElement(RevisionsOverviewListItem, { key: revision.metadata.uid, revision: revision, service: service })))))));\n};\nexport default RevisionsOverviewList;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/overview/RevisionsOverviewList.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/overview/RevisionsOverviewList.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,MAAM,EAAE,MAAM,wBAAwB,CAAC;AAChD,OAAO,EAAmB,iBAAiB,EAAE,MAAM,8BAA8B,CAAC;AAClF,OAAO,EAAE,qBAAqB,EAAE,eAAe,EAAE,MAAM,oCAAoC,CAAC;AAC5F,OAAO,EAAE,2BAA2B,EAAE,MAAM,WAAW,CAAC;AACxD,OAAO,EAAE,YAAY,EAAE,aAAa,EAAE,MAAM,cAAc,CAAC;AAC3D,OAAO,yBAAyB,MAAM,6BAA6B,CAAC;AACpE,OAAO,8BAA8B,CAAC;AACtC,OAAO,EAAE,IAAI,EAAE,MAAM,kBAAkB,CAAC;AAOxC,MAAM,aAAa,GAAW,CAAC,CAAC;AAEhC,MAAM,qBAAqB,GAAyC,CAAC,EAAE,SAAS,EAAE,OAAO,EAAE,EAAE,EAAE;;IAC7F,MAAM,yBAAyB,GAAG,eAAe,CAAC;QAChD,KAAK,EAAE,YAAY,CAAC,QAAQ;QAC5B,QAAQ,EAAE,YAAY,CAAC,MAAM;QAC7B,SAAS,EAAE,OAAO,CAAC,QAAQ,CAAC,SAAS;QACrC,IAAI,EAAE,QAAQ;KACf,CAAC,CAAC;IAEH,MAAM,SAAS,SAAG,OAAO,CAAC,QAAQ,0CAAE,SAAS,CAAC;IAC9C,MAAM,OAAO,SAAG,OAAO,CAAC,MAAM,0CAAE,OAAO,CAAC;IACxC,MAAM,IAAI,SAAG,OAAO,CAAC,QAAQ,0CAAE,IAAI,CAAC;IAEpC,MAAM,iBAAiB,GAAG,GAAsB,EAAE;QAChD,IAAI,CAAC,SAAS,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE;YACnC,OAAO,EAAE,CAAC;SACX;QACD,MAAM,CAAC,cAAc,EAAE,iBAAiB,CAAC,GAAG,CAAC,CAAC,SAAS,CAAC,SAAS,EAAE,CAAC,OAAO,EAAE,EAAE;;YAC7E,OAAO,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,YAAY,QAAE,OAAO,CAAC,QAAQ,0CAAE,IAAI,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;QACrF,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,4BAA4B,CAAC,CAAC,CAAC,CAAC;QACvE,OAAO,cAAc,CAAC,MAAM,GAAG,aAAa;YAC1C,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,cAAc,EAAE,iBAAiB,CAAC,KAAK,CAAC,CAAC,EAAE,aAAa,GAAG,cAAc,CAAC,MAAM,CAAC,CAAC;YAC7F,CAAC,CAAC,cAAc,CAAC;IACrB,CAAC,CAAC;IAEF,MAAM,gBAAgB,GAAG,GAAG,EAAE;QAC5B,MAAM,GAAG,GAAG,cAAc,SAAS,EAAE,CAAC;QACtC,MAAM,WAAW,GAAG,+BAA+B,IAAI,EAAE,CAAC;QAC1D,MAAM,MAAM,GAAG,IAAI,eAAe,EAAE,CAAC;QACrC,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE,iBAAiB,CAAC,aAAa,CAAC,CAAC,CAAC;QACxD,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC;QAChC,OAAO,GAAG,GAAG,IAAI,MAAM,CAAC,QAAQ,EAAE,EAAE,CAAC;IACvC,CAAC,CAAC;IAEF,OAAO,CACL;QACE,oBAAC,qBAAqB,IAAC,IAAI,EAAC,WAAW,EAAC,SAAS,EAAC,wBAAwB;YACvE,CAAA,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,MAAM,IAAG,aAAa,IAAI,CACpC,oBAAC,IAAI,IAAC,SAAS,EAAC,2BAA2B,EAAC,EAAE,EAAE,gBAAgB,EAAE,IAC/D,aAAa,SAAS,CAAC,MAAM,GAAG,CAC5B,CACR;YAEA,yBAAyB,IAAI,CAC5B,oBAAC,MAAM,IACL,OAAO,EAAC,WAAW,EACnB,OAAO,EAAE,GAAG,EAAE,CAAC,2BAA2B,CAAC,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC,EAC5D,UAAU,EAAE,CAAC,CAAC,SAAS,IAAI,SAAS,CAAC,MAAM,CAAC,+BAGrC,CACV,CACqB;QACvB,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CACtB,8BAAM,SAAS,EAAC,YAAY,4CAA6C,CAC1E,CAAC,CAAC,CAAC,CACF,4BAAI,SAAS,EAAC,YAAY,IACvB,CAAC,CAAC,GAAG,CAAC,iBAAiB,EAAE,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,CACxC,oBAAC,yBAAyB,IACxB,GAAG,EAAE,QAAQ,CAAC,QAAQ,CAAC,GAAG,EAC1B,QAAQ,EAAE,QAAQ,EAClB,OAAO,EAAE,OAAO,GAChB,CACH,CAAC,CACC,CACN,CACA,CACJ,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,qBAAqB,CAAC","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Button } from '@patternfly/react-core';\nimport { K8sResourceKind, referenceForModel } from '@console/internal/module/k8s';\nimport { SidebarSectionHeading, useAccessReview } from '@console/internal/components/utils';\nimport { setTrafficDistributionModal } from '../modals';\nimport { ServiceModel, RevisionModel } from '../../models';\nimport RevisionsOverviewListItem from './RevisionsOverviewListItem';\nimport './RevisionsOverviewList.scss';\nimport { Link } from 'react-router-dom';\n\nexport type RevisionsOverviewListProps = {\n  revisions: K8sResourceKind[];\n  service: K8sResourceKind;\n};\n\nconst MAX_REVISIONS: number = 3;\n\nconst RevisionsOverviewList: React.FC<RevisionsOverviewListProps> = ({ revisions, service }) => {\n  const canSetTrafficDistribution = useAccessReview({\n    group: ServiceModel.apiGroup,\n    resource: ServiceModel.plural,\n    namespace: service.metadata.namespace,\n    verb: 'update',\n  });\n\n  const namespace = service.metadata?.namespace;\n  const traffic = service.status?.traffic;\n  const name = service.metadata?.name;\n\n  const filteredRevisions = (): K8sResourceKind[] => {\n    if (!revisions || !revisions.length) {\n      return [];\n    }\n    const [revWithTraffic, revWithoutTraffic] = _.partition(revisions, (element) => {\n      return traffic ? _.find(traffic, { revisionName: element.metadata?.name }) : false;\n    }).map((element) => _.sortBy(element, ['metadata.creationTimestamp']));\n    return revWithTraffic.length < MAX_REVISIONS\n      ? _.concat(revWithTraffic, revWithoutTraffic.slice(0, MAX_REVISIONS - revWithTraffic.length))\n      : revWithTraffic;\n  };\n\n  const getRevisionsLink = () => {\n    const url = `/search/ns/${namespace}`;\n    const searchQuery = `serving.knative.dev/service=${name}`;\n    const params = new URLSearchParams();\n    params.append('kind', referenceForModel(RevisionModel));\n    params.append('q', searchQuery);\n    return `${url}?${params.toString()}`;\n  };\n\n  return (\n    <>\n      <SidebarSectionHeading text=\"Revisions\" className=\"revision-overview-list\">\n        {revisions?.length > MAX_REVISIONS && (\n          <Link className=\"sidebar__section-view-all\" to={getRevisionsLink()}>\n            {`View all (${revisions.length})`}\n          </Link>\n        )}\n\n        {canSetTrafficDistribution && (\n          <Button\n            variant=\"secondary\"\n            onClick={() => setTrafficDistributionModal({ obj: service })}\n            isDisabled={!(revisions && revisions.length)}\n          >\n            Set Traffic Distribution\n          </Button>\n        )}\n      </SidebarSectionHeading>\n      {_.isEmpty(revisions) ? (\n        <span className=\"text-muted\">No Revisions found for this resource.</span>\n      ) : (\n        <ul className=\"list-group\">\n          {_.map(filteredRevisions(), (revision) => (\n            <RevisionsOverviewListItem\n              key={revision.metadata.uid}\n              revision={revision}\n              service={service}\n            />\n          ))}\n        </ul>\n      )}\n    </>\n  );\n};\n\nexport default RevisionsOverviewList;\n"]}]}