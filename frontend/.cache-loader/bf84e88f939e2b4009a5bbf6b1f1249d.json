{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/patches/vm/vm-patches.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/patches/vm/vm-patches.ts","mtime":1615298458660},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { getAnnotations, getDescription } from '../../../selectors/selectors';\nimport { getFlavor, getCPU, getMemory, parseCPU, DEFAULT_CPU } from '../../../selectors/vm';\nimport { isTemplate, isVM } from '../../../selectors/check-type';\nimport { TEMPLATE_FLAVOR_LABEL, TEMPLATE_VM_SIZE_LABEL } from '../../../constants';\nimport { getVMLikePatches } from '../vm-template';\nimport { selectVM } from '../../../selectors/vm-template/basic';\nimport { PatchBuilder } from '@console/shared/src/k8s';\nimport { getLabels } from '@console/shared/src';\nimport { isCustomFlavor } from '../../../selectors/vm-like/flavor';\nconst getDomainPatches = (vm) => {\n    let patch = null;\n    if (!_.has(vm, 'spec')) {\n        patch = {\n            op: 'add',\n            path: '/spec',\n            value: {\n                template: {\n                    spec: {\n                        domain: {},\n                    },\n                },\n            },\n        };\n    }\n    else if (!_.has(vm.spec, 'template')) {\n        patch = {\n            op: 'add',\n            path: '/spec/template',\n            value: {\n                spec: {\n                    domain: {},\n                },\n            },\n        };\n    }\n    else if (!_.has(vm.spec.template, 'spec')) {\n        patch = {\n            op: 'add',\n            path: '/spec/template/spec',\n            value: {\n                domain: {},\n            },\n        };\n    }\n    else if (!_.has(vm.spec.template.spec, 'domain')) {\n        patch = {\n            op: 'add',\n            path: '/spec/template/spec/domain',\n            value: {},\n        };\n    }\n    return patch ? [patch] : [];\n};\nconst getUpdateFlavorPatchesImpl = (vmLike, oldFlavor, newFlavor) => {\n    const path = isVM(vmLike) || isTemplate(vmLike) ? '/metadata/labels' : '/spec/template/metadata/labels'; // or VMITemplate\n    const patches = [];\n    // also remove old unused Custom labels\n    if (isCustomFlavor(newFlavor) || oldFlavor !== newFlavor) {\n        const labels = getLabels(vmLike);\n        const flavorLabel = Object.keys(labels || {}).find((key) => key.startsWith(TEMPLATE_FLAVOR_LABEL));\n        if (flavorLabel) {\n            patches.push(new PatchBuilder(path).setObjectRemove(flavorLabel, labels).build());\n        }\n        if (!isCustomFlavor(newFlavor)) {\n            patches.push(new PatchBuilder(path)\n                .setObjectUpdate(`${TEMPLATE_FLAVOR_LABEL}/${newFlavor}`, 'true', labels)\n                .build());\n        }\n    }\n    return patches;\n};\nconst getMemoryPatch = (vm, memory) => {\n    if (!_.has(vm.spec, 'template.spec.domain.resources')) {\n        return {\n            op: 'add',\n            path: '/spec/template/spec/domain/resources',\n            value: {\n                requests: {\n                    memory,\n                },\n            },\n        };\n    }\n    if (!_.has(vm.spec, 'template.spec.domain.resources.requests')) {\n        return {\n            op: 'add',\n            path: '/spec/template/spec/domain/resources/requests',\n            value: {\n                memory,\n            },\n        };\n    }\n    return {\n        op: _.has(vm.spec, 'template.spec.domain.resources.requests.memory') ? 'replace' : 'add',\n        path: '/spec/template/spec/domain/resources/requests/memory',\n        value: memory,\n    };\n};\nconst getUpdateCpuMemoryPatch = (vm, cpu, memory) => {\n    const patches = [];\n    const oldCPU = getCPU(vm);\n    const vmMemory = getMemory(vm);\n    patches.push(new PatchBuilder('/spec/template/spec/domain/cpu')\n        .setObjectUpdate('sockets', cpu === null || cpu === void 0 ? void 0 : cpu.sockets, oldCPU)\n        .build());\n    patches.push(new PatchBuilder('/spec/template/spec/domain/cpu')\n        .setObjectUpdate('threads', cpu === null || cpu === void 0 ? void 0 : cpu.threads, oldCPU || {}) // created by the patch before\n        .build());\n    patches.push(new PatchBuilder('/spec/template/spec/domain/cpu')\n        .setObjectUpdate('cores', cpu === null || cpu === void 0 ? void 0 : cpu.cores, oldCPU || {})\n        .build());\n    if (memory !== vmMemory) {\n        patches.push(getMemoryPatch(vm, memory));\n    }\n    return patches.length > 0 ? [...getDomainPatches(vm), ...patches] : patches;\n};\nexport const getUpdateDescriptionPatches = (vmLikeEntity, description) => {\n    const patches = [];\n    const oldDescription = getDescription(vmLikeEntity);\n    const annotations = getAnnotations(vmLikeEntity, null);\n    if (description !== oldDescription) {\n        if (!description && oldDescription) {\n            patches.push({\n                op: 'remove',\n                path: '/metadata/annotations/description',\n            });\n        }\n        else if (!annotations) {\n            patches.push({\n                op: 'add',\n                path: '/metadata/annotations',\n                value: {\n                    description,\n                },\n            });\n        }\n        else {\n            patches.push({\n                op: oldDescription ? 'replace' : 'add',\n                path: '/metadata/annotations/description',\n                value: description,\n            });\n        }\n    }\n    return patches;\n};\nconst getSizeLabelPatch = (flavor, vmi) => {\n    const patches = [];\n    if (isCustomFlavor(flavor)) {\n        patches.push(new PatchBuilder('/spec/template/metadata/labels')\n            .setObjectRemove(TEMPLATE_VM_SIZE_LABEL, getLabels(vmi))\n            .build());\n    }\n    else {\n        patches.push(new PatchBuilder('/spec/template/metadata/labels')\n            .setObjectUpdate(TEMPLATE_VM_SIZE_LABEL, flavor, getLabels(vmi))\n            .build());\n    }\n    return patches;\n};\nexport const getUpdateFlavorPatches = (vmLike, template, flavor, cpu, mem) => {\n    const oldFlavor = getFlavor(vmLike);\n    let customCpu = {\n        sockets: 1,\n        cores: cpu,\n        threads: 1,\n    };\n    let customMem = mem;\n    if (!isCustomFlavor(flavor)) {\n        const templateVm = selectVM(template);\n        customCpu = parseCPU(getCPU(templateVm), DEFAULT_CPU);\n        customMem = getMemory(templateVm);\n    }\n    return [\n        ...getUpdateFlavorPatchesImpl(vmLike, oldFlavor, flavor),\n        ...getVMLikePatches(vmLike, (vm) => {\n            var _a;\n            const vmi = (_a = vm.spec) === null || _a === void 0 ? void 0 : _a.template;\n            const additionalPatches = [\n                ...getSizeLabelPatch(flavor, vmi),\n                ...getUpdateCpuMemoryPatch(vm, customCpu, customMem),\n            ];\n            if (isVM(vmLike)) {\n                additionalPatches.push(...getUpdateFlavorPatchesImpl(vmi, oldFlavor, flavor));\n            }\n            return additionalPatches;\n        }),\n    ];\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/patches/vm/vm-patches.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/patches/vm/vm-patches.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { Patch, TemplateKind } from '@console/internal/module/k8s';\nimport { VMGenericLikeEntityKind, VMLikeEntityKind } from '../../../types/vmLike';\nimport { getAnnotations, getDescription } from '../../../selectors/selectors';\nimport { getFlavor, getCPU, getMemory, parseCPU, DEFAULT_CPU } from '../../../selectors/vm';\nimport { isTemplate, isVM } from '../../../selectors/check-type';\nimport { TEMPLATE_FLAVOR_LABEL, TEMPLATE_VM_SIZE_LABEL } from '../../../constants';\nimport { getVMLikePatches } from '../vm-template';\nimport { selectVM } from '../../../selectors/vm-template/basic';\nimport { CPU, VMITemplate, VMKind } from '../../../types/vm';\nimport { PatchBuilder } from '@console/shared/src/k8s';\nimport { getLabels } from '@console/shared/src';\nimport { isCustomFlavor } from '../../../selectors/vm-like/flavor';\n\nconst getDomainPatches = (vm: VMKind): Patch[] => {\n  let patch: Patch = null;\n  if (!_.has(vm, 'spec')) {\n    patch = {\n      op: 'add',\n      path: '/spec',\n      value: {\n        template: {\n          spec: {\n            domain: {},\n          },\n        },\n      },\n    };\n  } else if (!_.has(vm.spec, 'template')) {\n    patch = {\n      op: 'add',\n      path: '/spec/template',\n      value: {\n        spec: {\n          domain: {},\n        },\n      },\n    };\n  } else if (!_.has(vm.spec.template, 'spec')) {\n    patch = {\n      op: 'add',\n      path: '/spec/template/spec',\n      value: {\n        domain: {},\n      },\n    };\n  } else if (!_.has(vm.spec.template.spec, 'domain')) {\n    patch = {\n      op: 'add',\n      path: '/spec/template/spec/domain',\n      value: {},\n    };\n  }\n  return patch ? [patch] : [];\n};\n\nconst getUpdateFlavorPatchesImpl = (\n  vmLike: VMLikeEntityKind | VMITemplate,\n  oldFlavor,\n  newFlavor: string,\n): Patch[] => {\n  const path =\n    isVM(vmLike) || isTemplate(vmLike) ? '/metadata/labels' : '/spec/template/metadata/labels'; // or VMITemplate\n\n  const patches = [];\n  // also remove old unused Custom labels\n  if (isCustomFlavor(newFlavor) || oldFlavor !== newFlavor) {\n    const labels = getLabels(vmLike);\n    const flavorLabel = Object.keys(labels || {}).find((key) =>\n      key.startsWith(TEMPLATE_FLAVOR_LABEL),\n    );\n    if (flavorLabel) {\n      patches.push(new PatchBuilder(path).setObjectRemove(flavorLabel, labels).build());\n    }\n    if (!isCustomFlavor(newFlavor)) {\n      patches.push(\n        new PatchBuilder(path)\n          .setObjectUpdate(`${TEMPLATE_FLAVOR_LABEL}/${newFlavor}`, 'true', labels)\n          .build(),\n      );\n    }\n  }\n  return patches;\n};\n\nconst getMemoryPatch = (vm: VMKind, memory: string): Patch => {\n  if (!_.has(vm.spec, 'template.spec.domain.resources')) {\n    return {\n      op: 'add',\n      path: '/spec/template/spec/domain/resources',\n      value: {\n        requests: {\n          memory,\n        },\n      },\n    };\n  }\n  if (!_.has(vm.spec, 'template.spec.domain.resources.requests')) {\n    return {\n      op: 'add',\n      path: '/spec/template/spec/domain/resources/requests',\n      value: {\n        memory,\n      },\n    };\n  }\n  return {\n    op: _.has(vm.spec, 'template.spec.domain.resources.requests.memory') ? 'replace' : 'add',\n    path: '/spec/template/spec/domain/resources/requests/memory',\n    value: memory,\n  };\n};\n\nconst getUpdateCpuMemoryPatch = (vm: VMKind, cpu: CPU, memory: string): Patch[] => {\n  const patches = [];\n  const oldCPU = getCPU(vm);\n  const vmMemory = getMemory(vm);\n\n  patches.push(\n    new PatchBuilder('/spec/template/spec/domain/cpu')\n      .setObjectUpdate('sockets', cpu?.sockets, oldCPU)\n      .build(),\n  );\n  patches.push(\n    new PatchBuilder('/spec/template/spec/domain/cpu')\n      .setObjectUpdate('threads', cpu?.threads, oldCPU || {}) // created by the patch before\n      .build(),\n  );\n  patches.push(\n    new PatchBuilder('/spec/template/spec/domain/cpu')\n      .setObjectUpdate('cores', cpu?.cores, oldCPU || {})\n      .build(),\n  );\n\n  if (memory !== vmMemory) {\n    patches.push(getMemoryPatch(vm, memory));\n  }\n\n  return patches.length > 0 ? [...getDomainPatches(vm), ...patches] : patches;\n};\n\nexport const getUpdateDescriptionPatches = (\n  vmLikeEntity: VMGenericLikeEntityKind,\n  description: string,\n): Patch[] => {\n  const patches = [];\n  const oldDescription = getDescription(vmLikeEntity);\n  const annotations = getAnnotations(vmLikeEntity, null);\n\n  if (description !== oldDescription) {\n    if (!description && oldDescription) {\n      patches.push({\n        op: 'remove',\n        path: '/metadata/annotations/description',\n      });\n    } else if (!annotations) {\n      patches.push({\n        op: 'add',\n        path: '/metadata/annotations',\n        value: {\n          description,\n        },\n      });\n    } else {\n      patches.push({\n        op: oldDescription ? 'replace' : 'add',\n        path: '/metadata/annotations/description',\n        value: description,\n      });\n    }\n  }\n  return patches;\n};\n\nconst getSizeLabelPatch = (flavor: string, vmi: VMITemplate): Patch[] => {\n  const patches = [];\n\n  if (isCustomFlavor(flavor)) {\n    patches.push(\n      new PatchBuilder('/spec/template/metadata/labels')\n        .setObjectRemove(TEMPLATE_VM_SIZE_LABEL, getLabels(vmi))\n        .build(),\n    );\n  } else {\n    patches.push(\n      new PatchBuilder('/spec/template/metadata/labels')\n        .setObjectUpdate(TEMPLATE_VM_SIZE_LABEL, flavor, getLabels(vmi))\n        .build(),\n    );\n  }\n\n  return patches;\n};\n\nexport const getUpdateFlavorPatches = (\n  vmLike: VMLikeEntityKind,\n  template: TemplateKind,\n  flavor: string,\n  cpu?: number,\n  mem?: string,\n): Patch[] => {\n  const oldFlavor = getFlavor(vmLike);\n  let customCpu = {\n    sockets: 1,\n    cores: cpu,\n    threads: 1,\n  };\n  let customMem = mem;\n  if (!isCustomFlavor(flavor)) {\n    const templateVm = selectVM(template);\n    customCpu = parseCPU(getCPU(templateVm), DEFAULT_CPU);\n    customMem = getMemory(templateVm);\n  }\n\n  return [\n    ...getUpdateFlavorPatchesImpl(vmLike, oldFlavor, flavor),\n    ...getVMLikePatches(vmLike, (vm: VMKind) => {\n      const vmi = vm.spec?.template;\n      const additionalPatches = [\n        ...getSizeLabelPatch(flavor, vmi),\n        ...getUpdateCpuMemoryPatch(vm, customCpu, customMem),\n      ];\n\n      if (isVM(vmLike)) {\n        additionalPatches.push(...getUpdateFlavorPatchesImpl(vmi, oldFlavor, flavor));\n      }\n      return additionalPatches;\n    }),\n  ];\n};\n"]}]}