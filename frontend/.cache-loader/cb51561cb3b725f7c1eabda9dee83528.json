{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/nodes/build-decorators/build-decorator-utils.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/nodes/build-decorators/build-decorator-utils.tsx","mtime":1616735742390},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { Status } from '@console/shared';\nimport { resourcePathFromModel } from '@console/internal/components/utils';\nimport { BuildModel } from '@console/internal/models';\nimport { PipelineRunModel } from '../../../../../models';\nimport { constructCurrentPipeline } from '../../../../../utils/pipeline-utils';\nimport PipelineBuildDecoratorTooltip from './PipelineBuildDecoratorTooltip';\nexport const getBuildDecoratorParts = (workloadData) => {\n    const { build, connectedPipeline } = workloadData;\n    let tooltipContent = null;\n    let decoratorIcon = null;\n    let linkRef = null;\n    let currentPipelineStatus = null;\n    if (connectedPipeline) {\n        const { pipelineRuns, pipeline } = connectedPipeline;\n        currentPipelineStatus = constructCurrentPipeline(pipeline, pipelineRuns);\n    }\n    if (currentPipelineStatus) {\n        const { currentPipeline, status } = currentPipelineStatus;\n        tooltipContent = React.createElement(PipelineBuildDecoratorTooltip, { pipeline: currentPipeline, status: status });\n        decoratorIcon = React.createElement(Status, { status: status, iconOnly: true, noTooltip: true });\n        linkRef = `${resourcePathFromModel(PipelineRunModel, currentPipeline.latestRun.metadata.name, currentPipeline.latestRun.metadata.namespace)}/logs`;\n    }\n    else if (build) {\n        tooltipContent = `Build ${build.status && build.status.phase}`;\n        decoratorIcon = React.createElement(Status, { status: build.status.phase, iconOnly: true, noTooltip: true });\n        linkRef = `${resourcePathFromModel(BuildModel, build.metadata.name, build.metadata.namespace)}/logs`;\n    }\n    return {\n        tooltipContent,\n        decoratorIcon,\n        linkRef,\n    };\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/nodes/build-decorators/build-decorator-utils.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/nodes/build-decorators/build-decorator-utils.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,MAAM,EAAE,MAAM,iBAAiB,CAAC;AACzC,OAAO,EAAE,qBAAqB,EAAE,MAAM,oCAAoC,CAAC;AAC3E,OAAO,EAAE,UAAU,EAAE,MAAM,0BAA0B,CAAC;AACtD,OAAO,EAAE,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;AACzD,OAAO,EAAE,wBAAwB,EAAE,MAAM,qCAAqC,CAAC;AAE/E,OAAO,6BAA6B,MAAM,iCAAiC,CAAC;AAQ5E,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,YAA0B,EAAsB,EAAE;IACvF,MAAM,EAAE,KAAK,EAAE,iBAAiB,EAAE,GAAG,YAAY,CAAC;IAElD,IAAI,cAAc,GAAG,IAAI,CAAC;IAC1B,IAAI,aAAa,GAAG,IAAI,CAAC;IACzB,IAAI,OAAO,GAAG,IAAI,CAAC;IAEnB,IAAI,qBAAqB,GAAG,IAAI,CAAC;IACjC,IAAI,iBAAiB,EAAE;QACrB,MAAM,EAAE,YAAY,EAAE,QAAQ,EAAE,GAAG,iBAAiB,CAAC;QACrD,qBAAqB,GAAG,wBAAwB,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;KAC1E;IAED,IAAI,qBAAqB,EAAE;QACzB,MAAM,EAAE,eAAe,EAAE,MAAM,EAAE,GAAG,qBAAqB,CAAC;QAC1D,cAAc,GAAG,oBAAC,6BAA6B,IAAC,QAAQ,EAAE,eAAe,EAAE,MAAM,EAAE,MAAM,GAAI,CAAC;QAC9F,aAAa,GAAG,oBAAC,MAAM,IAAC,MAAM,EAAE,MAAM,EAAE,QAAQ,QAAC,SAAS,SAAG,CAAC;QAC9D,OAAO,GAAG,GAAG,qBAAqB,CAChC,gBAAgB,EAChB,eAAe,CAAC,SAAS,CAAC,QAAQ,CAAC,IAAI,EACvC,eAAe,CAAC,SAAS,CAAC,QAAQ,CAAC,SAAS,CAC7C,OAAO,CAAC;KACV;SAAM,IAAI,KAAK,EAAE;QAChB,cAAc,GAAG,SAAS,KAAK,CAAC,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;QAC/D,aAAa,GAAG,oBAAC,MAAM,IAAC,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,QAAQ,QAAC,SAAS,SAAG,CAAC;QAC1E,OAAO,GAAG,GAAG,qBAAqB,CAChC,UAAU,EACV,KAAK,CAAC,QAAQ,CAAC,IAAI,EACnB,KAAK,CAAC,QAAQ,CAAC,SAAS,CACzB,OAAO,CAAC;KACV;IAED,OAAO;QACL,cAAc;QACd,aAAa;QACb,OAAO;KACR,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { Status } from '@console/shared';\nimport { resourcePathFromModel } from '@console/internal/components/utils';\nimport { BuildModel } from '@console/internal/models';\nimport { PipelineRunModel } from '../../../../../models';\nimport { constructCurrentPipeline } from '../../../../../utils/pipeline-utils';\nimport { WorkloadData } from '../../../topology-types';\nimport PipelineBuildDecoratorTooltip from './PipelineBuildDecoratorTooltip';\n\ntype BuildDecoratorData = {\n  decoratorIcon: React.ReactElement;\n  linkRef?: string;\n  tooltipContent: React.ReactElement;\n};\n\nexport const getBuildDecoratorParts = (workloadData: WorkloadData): BuildDecoratorData => {\n  const { build, connectedPipeline } = workloadData;\n\n  let tooltipContent = null;\n  let decoratorIcon = null;\n  let linkRef = null;\n\n  let currentPipelineStatus = null;\n  if (connectedPipeline) {\n    const { pipelineRuns, pipeline } = connectedPipeline;\n    currentPipelineStatus = constructCurrentPipeline(pipeline, pipelineRuns);\n  }\n\n  if (currentPipelineStatus) {\n    const { currentPipeline, status } = currentPipelineStatus;\n    tooltipContent = <PipelineBuildDecoratorTooltip pipeline={currentPipeline} status={status} />;\n    decoratorIcon = <Status status={status} iconOnly noTooltip />;\n    linkRef = `${resourcePathFromModel(\n      PipelineRunModel,\n      currentPipeline.latestRun.metadata.name,\n      currentPipeline.latestRun.metadata.namespace,\n    )}/logs`;\n  } else if (build) {\n    tooltipContent = `Build ${build.status && build.status.phase}`;\n    decoratorIcon = <Status status={build.status.phase} iconOnly noTooltip />;\n    linkRef = `${resourcePathFromModel(\n      BuildModel,\n      build.metadata.name,\n      build.metadata.namespace,\n    )}/logs`;\n  }\n\n  return {\n    tooltipContent,\n    decoratorIcon,\n    linkRef,\n  };\n};\n"]}]}