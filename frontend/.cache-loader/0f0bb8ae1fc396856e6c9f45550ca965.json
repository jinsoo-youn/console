{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/validations/template/interval-validation-result.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/validations/template/interval-validation-result.ts","mtime":1615298458670},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["/* eslint-disable lines-between-class-members */\nimport { ValidationErrorType } from '@console/shared/src';\nimport { humanizeBinaryBytes } from '@console/internal/components/utils';\nexport class IntervalValidationResult {\n    constructor({ type, isValid, min, max, isMinInclusive, isMaxInclusive, }) {\n        this.getErrorMessage = () => (this.isValid ? null : 'Interval is not valid');\n        this.type = type;\n        this.isValid = isValid;\n        this.min = min;\n        this.max = max;\n        this.isMinInclusive = isMinInclusive;\n        this.isMaxInclusive = isMaxInclusive;\n    }\n}\nexport class MemoryIntervalValidationResult extends IntervalValidationResult {\n    constructor() {\n        super(...arguments);\n        this.getErrorMessage = () => {\n            const verb = this.type === ValidationErrorType.Warn ? 'should' : 'must';\n            if (!this.isValid) {\n                if (this.min !== 0 && Number.isFinite(this.min) && Number.isFinite(this.max)) {\n                    return `Memory ${verb} be between ${humanizeBinaryBytes(this.min).string} and ${humanizeBinaryBytes(this.max).string}`;\n                }\n                if (Number.isFinite(this.max)) {\n                    return `Memory ${verb} be ${this.isMaxInclusive ? 'at most' : 'below'} ${humanizeBinaryBytes(this.max).string}`;\n                }\n                return `Memory ${verb} be ${this.isMinInclusive ? 'at least' : 'above'} ${humanizeBinaryBytes(this.min).string}`;\n            }\n            return null;\n        };\n    }\n}\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/validations/template/interval-validation-result.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/validations/template/interval-validation-result.ts"],"names":[],"mappings":"AAAA,gDAAgD;AAChD,OAAO,EAAE,mBAAmB,EAAE,MAAM,qBAAqB,CAAC;AAC1D,OAAO,EAAE,mBAAmB,EAAE,MAAM,oCAAoC,CAAC;AAGzE,MAAM,OAAO,wBAAwB;IAQnC,YAAY,EACV,IAAI,EACJ,OAAO,EACP,GAAG,EACH,GAAG,EACH,cAAc,EACd,cAAc,GAIf;QASM,oBAAe,GAAG,GAAG,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,uBAAuB,CAAC,CAAC;QAR7E,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;QACjB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;QACf,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;QACrC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;IACvC,CAAC;CAGF;AAED,MAAM,OAAO,8BAA+B,SAAQ,wBAAwB;IAA5E;;QACS,oBAAe,GAAG,GAAG,EAAE;YAC5B,MAAM,IAAI,GAAG,IAAI,CAAC,IAAI,KAAK,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC;YAExE,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;gBACjB,IAAI,IAAI,CAAC,GAAG,KAAK,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;oBAC5E,OAAO,UAAU,IAAI,eAAe,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAAM,QACtE,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAChC,EAAE,CAAC;iBACJ;gBACD,IAAI,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE;oBAC7B,OAAO,UAAU,IAAI,OAAO,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,OAAO,IACnE,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAChC,EAAE,CAAC;iBACJ;gBACD,OAAO,UAAU,IAAI,OAAO,IAAI,CAAC,cAAc,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,OAAO,IACpE,mBAAmB,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,MAChC,EAAE,CAAC;aACJ;YACD,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;IACJ,CAAC;CAAA","sourcesContent":["/* eslint-disable lines-between-class-members */\nimport { ValidationErrorType } from '@console/shared/src';\nimport { humanizeBinaryBytes } from '@console/internal/components/utils';\nimport { Interval } from './types';\n\nexport class IntervalValidationResult implements Interval {\n  type: ValidationErrorType;\n  isValid: boolean;\n  min?: number;\n  max?: number;\n  isMinInclusive?: boolean;\n  isMaxInclusive?: boolean;\n\n  constructor({\n    type,\n    isValid,\n    min,\n    max,\n    isMinInclusive,\n    isMaxInclusive,\n  }: Interval & {\n    isValid: boolean;\n    type: ValidationErrorType;\n  }) {\n    this.type = type;\n    this.isValid = isValid;\n    this.min = min;\n    this.max = max;\n    this.isMinInclusive = isMinInclusive;\n    this.isMaxInclusive = isMaxInclusive;\n  }\n\n  public getErrorMessage = () => (this.isValid ? null : 'Interval is not valid');\n}\n\nexport class MemoryIntervalValidationResult extends IntervalValidationResult {\n  public getErrorMessage = () => {\n    const verb = this.type === ValidationErrorType.Warn ? 'should' : 'must';\n\n    if (!this.isValid) {\n      if (this.min !== 0 && Number.isFinite(this.min) && Number.isFinite(this.max)) {\n        return `Memory ${verb} be between ${humanizeBinaryBytes(this.min).string} and ${\n          humanizeBinaryBytes(this.max).string\n        }`;\n      }\n      if (Number.isFinite(this.max)) {\n        return `Memory ${verb} be ${this.isMaxInclusive ? 'at most' : 'below'} ${\n          humanizeBinaryBytes(this.max).string\n        }`;\n      }\n      return `Memory ${verb} be ${this.isMinInclusive ? 'at least' : 'above'} ${\n        humanizeBinaryBytes(this.min).string\n      }`;\n    }\n    return null;\n  };\n}\n"]}]}