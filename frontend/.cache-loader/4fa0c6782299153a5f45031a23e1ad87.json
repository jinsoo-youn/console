{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vm/devices.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vm/devices.ts","mtime":1616735742430},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { DiskWrapper } from '../../k8s/wrapper/vm/disk-wrapper';\nimport { DeviceType } from '../../constants';\nimport { getBootableDisks, getInterfaces, getDisks } from './selectors';\nimport { asVM } from './vmlike';\nexport const getBootDeviceIndex = (devices, bootOrder) => devices.findIndex((device) => device.bootOrder === bootOrder);\nexport const getDeviceBootOrder = (device, defaultValue) => device && device.bootOrder === undefined ? defaultValue : device.bootOrder;\nexport const transformDevices = (disks = [], nics = []) => {\n    const transformedDisks = disks.map((disk) => ({\n        type: DeviceType.DISK,\n        typeLabel: new DiskWrapper(disk).getType().toString(),\n        value: disk,\n    }));\n    const transformedNics = nics.map((nic) => ({\n        type: DeviceType.NIC,\n        typeLabel: 'NIC',\n        value: nic,\n    }));\n    return [...transformedDisks, ...transformedNics];\n};\nexport const getDevices = (vmLikeEntity) => {\n    const vm = asVM(vmLikeEntity);\n    return transformDevices(getDisks(vm), getInterfaces(vm));\n};\nexport const getBootableDevices = (vmLikeEntity) => {\n    const vm = asVM(vmLikeEntity);\n    return transformDevices(getBootableDisks(vm), getInterfaces(vm));\n};\nexport const getSelectedBootableDevices = (vm) => {\n    const devices = getBootableDevices(vm).filter((device) => device.value.bootOrder);\n    return [...devices];\n};\nexport const getBootableDevicesInOrder = (vm) => _.sortBy(getSelectedBootableDevices(vm), 'value.bootOrder');\nexport const getNonBootableDevices = (vm) => {\n    const devices = getBootableDevices(vm).filter((device) => !device.value.bootOrder);\n    return [...devices];\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vm/devices.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vm/devices.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { BootableDeviceType, V1NetworkInterface } from '../../types';\nimport { DiskWrapper } from '../../k8s/wrapper/vm/disk-wrapper';\nimport { DeviceType } from '../../constants';\nimport { getBootableDisks, getInterfaces, getDisks } from './selectors';\nimport { asVM } from './vmlike';\nimport { VMLikeEntityKind } from '../../types/vmLike';\nimport { V1Disk } from '../../types/vm/disk/V1Disk';\n\nexport const getBootDeviceIndex = (devices, bootOrder) =>\n  devices.findIndex((device) => device.bootOrder === bootOrder);\n\nexport const getDeviceBootOrder = (device, defaultValue?): number =>\n  device && device.bootOrder === undefined ? defaultValue : device.bootOrder;\n\nexport const transformDevices = (\n  disks: V1Disk[] = [],\n  nics: V1NetworkInterface[] = [],\n): BootableDeviceType[] => {\n  const transformedDisks = disks.map((disk) => ({\n    type: DeviceType.DISK,\n    typeLabel: new DiskWrapper(disk).getType().toString(),\n    value: disk,\n  }));\n  const transformedNics = nics.map((nic) => ({\n    type: DeviceType.NIC,\n    typeLabel: 'NIC',\n    value: nic,\n  }));\n\n  return [...transformedDisks, ...transformedNics];\n};\n\nexport const getDevices = (vmLikeEntity: VMLikeEntityKind): BootableDeviceType[] => {\n  const vm = asVM(vmLikeEntity);\n  return transformDevices(getDisks(vm), getInterfaces(vm));\n};\n\nexport const getBootableDevices = (vmLikeEntity: VMLikeEntityKind): BootableDeviceType[] => {\n  const vm = asVM(vmLikeEntity);\n  return transformDevices(getBootableDisks(vm), getInterfaces(vm));\n};\n\nexport const getSelectedBootableDevices = (vm: VMLikeEntityKind): BootableDeviceType[] => {\n  const devices = getBootableDevices(vm).filter((device) => device.value.bootOrder);\n  return [...devices];\n};\n\nexport const getBootableDevicesInOrder = (vm: VMLikeEntityKind): BootableDeviceType[] =>\n  _.sortBy(getSelectedBootableDevices(vm), 'value.bootOrder');\n\nexport const getNonBootableDevices = (vm: VMLikeEntityKind): BootableDeviceType[] => {\n  const devices = getBootableDevices(vm).filter((device) => !device.value.bootOrder);\n  return [...devices];\n};\n"]}]}