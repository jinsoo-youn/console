{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/poll-hook.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/poll-hook.ts","mtime":1615298458750},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { useEffect, useRef } from 'react';\n// Slightly modified from Dan Abramov's blog post about using React hooks for polling\n// https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nexport const usePoll = (callback, delay, ...dependencies) => {\n    const savedCallback = useRef(null);\n    // Remember the latest callback.\n    useEffect(() => {\n        savedCallback.current = callback;\n    }, [callback]);\n    // Set up the interval.\n    useEffect(() => {\n        const tick = () => savedCallback.current();\n        tick(); // Run first tick immediately.\n        if (delay) {\n            // Only start interval if a delay is provided.\n            const id = setInterval(tick, delay);\n            return () => clearInterval(id);\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [delay, ...dependencies]);\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/poll-hook.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/poll-hook.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,OAAO,CAAC;AAE1C,qFAAqF;AACrF,0EAA0E;AAC1E,MAAM,CAAC,MAAM,OAAO,GAAG,CAAC,QAAQ,EAAE,KAAK,EAAE,GAAG,YAAY,EAAE,EAAE;IAC1D,MAAM,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,CAAC;IAEnC,gCAAgC;IAChC,SAAS,CAAC,GAAG,EAAE;QACb,aAAa,CAAC,OAAO,GAAG,QAAQ,CAAC;IACnC,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;IAEf,uBAAuB;IACvB,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,IAAI,GAAG,GAAG,EAAE,CAAC,aAAa,CAAC,OAAO,EAAE,CAAC;QAE3C,IAAI,EAAE,CAAC,CAAC,8BAA8B;QAEtC,IAAI,KAAK,EAAE;YACT,8CAA8C;YAC9C,MAAM,EAAE,GAAG,WAAW,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;YACpC,OAAO,GAAG,EAAE,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;SAChC;QACD,uDAAuD;IACzD,CAAC,EAAE,CAAC,KAAK,EAAE,GAAG,YAAY,CAAC,CAAC,CAAC;AAC/B,CAAC,CAAC","sourcesContent":["import { useEffect, useRef } from 'react';\n\n// Slightly modified from Dan Abramov's blog post about using React hooks for polling\n// https://overreacted.io/making-setinterval-declarative-with-react-hooks/\nexport const usePoll = (callback, delay, ...dependencies) => {\n  const savedCallback = useRef(null);\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    const tick = () => savedCallback.current();\n\n    tick(); // Run first tick immediately.\n\n    if (delay) {\n      // Only start interval if a delay is provided.\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [delay, ...dependencies]);\n};\n"]}]}