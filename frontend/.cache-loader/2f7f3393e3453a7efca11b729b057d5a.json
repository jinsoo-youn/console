{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/utils/add-resources-menu-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/utils/add-resources-menu-utils.ts","mtime":1616735742400},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { referenceFor } from '@console/internal/module/k8s';\nimport { ImportOptions } from '../components/import/import-types';\nimport { QUERY_PROPERTIES, UNASSIGNED_KEY } from '../const';\nconst PART_OF = 'app.kubernetes.io/part-of';\nexport const getAddPageUrl = (obj, namespace, type, hasApplication, contextSource) => {\n    var _a, _b, _c;\n    let pageUrl = '';\n    const params = new URLSearchParams();\n    const appGroup = ((_b = (_a = obj === null || obj === void 0 ? void 0 : obj.metadata) === null || _a === void 0 ? void 0 : _a.labels) === null || _b === void 0 ? void 0 : _b[PART_OF]) || '';\n    const ns = namespace || ((_c = obj === null || obj === void 0 ? void 0 : obj.metadata) === null || _c === void 0 ? void 0 : _c.namespace);\n    switch (type) {\n        case ImportOptions.GIT:\n            pageUrl = `/import/ns/${ns}`;\n            params.append('importType', 'git');\n            break;\n        case ImportOptions.CONTAINER:\n            pageUrl = `/deploy-image/ns/${ns}`;\n            break;\n        case ImportOptions.CATALOG:\n            pageUrl = `/catalog/ns/${ns}`;\n            break;\n        case ImportOptions.DOCKERFILE:\n            pageUrl = `/import/ns/${ns}`;\n            params.append('importType', 'docker');\n            break;\n        case ImportOptions.DATABASE:\n            pageUrl = `/catalog/ns/${ns}`;\n            params.append('category', 'databases');\n            break;\n        case ImportOptions.EVENTSOURCE:\n            pageUrl = `/event-source/ns/${ns}`;\n            break;\n        default:\n            throw new Error('Invalid Import option provided');\n    }\n    if (hasApplication && appGroup) {\n        params.append(QUERY_PROPERTIES.APPLICATION, appGroup);\n    }\n    else {\n        params.append(QUERY_PROPERTIES.APPLICATION, UNASSIGNED_KEY);\n    }\n    if (contextSource) {\n        params.append(QUERY_PROPERTIES.CONTEXT_SOURCE, contextSource);\n    }\n    return `${pageUrl}?${params.toString()}`;\n};\nexport const getMenuPath = (hasApplication, connectorSourceContext) => (connectorSourceContext === null || connectorSourceContext === void 0 ? void 0 : connectorSourceContext.length) ? null : hasApplication ? 'Add to Application' : 'Add to Project';\nexport const createKebabAction = (label, icon, importType, checkAccess) => (obj, namespace, hasApplication, connectorSourceObj, accessData) => {\n    var _a;\n    if (checkAccess && !accessData.includes(checkAccess)) {\n        return null;\n    }\n    const connectorSourceContext = (connectorSourceObj === null || connectorSourceObj === void 0 ? void 0 : connectorSourceObj.metadata) ? `${referenceFor(connectorSourceObj)}/${(_a = connectorSourceObj === null || connectorSourceObj === void 0 ? void 0 : connectorSourceObj.metadata) === null || _a === void 0 ? void 0 : _a.name}`\n        : null;\n    return {\n        label,\n        icon,\n        path: getMenuPath(hasApplication, connectorSourceContext),\n        href: getAddPageUrl(obj, namespace, importType, hasApplication, connectorSourceContext),\n    };\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/utils/add-resources-menu-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/utils/add-resources-menu-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { K8sResourceKind, referenceFor } from '@console/internal/module/k8s';\nimport { KebabOption } from '@console/internal/components/utils';\nimport { ImportOptions } from '../components/import/import-types';\nimport { QUERY_PROPERTIES, UNASSIGNED_KEY } from '../const';\n\nconst PART_OF = 'app.kubernetes.io/part-of';\n\nexport const getAddPageUrl = (\n  obj: K8sResourceKind,\n  namespace: string,\n  type: string,\n  hasApplication: boolean,\n  contextSource?: string,\n): string => {\n  let pageUrl = '';\n  const params = new URLSearchParams();\n  const appGroup = obj?.metadata?.labels?.[PART_OF] || '';\n  const ns = namespace || obj?.metadata?.namespace;\n  switch (type) {\n    case ImportOptions.GIT:\n      pageUrl = `/import/ns/${ns}`;\n      params.append('importType', 'git');\n      break;\n    case ImportOptions.CONTAINER:\n      pageUrl = `/deploy-image/ns/${ns}`;\n      break;\n    case ImportOptions.CATALOG:\n      pageUrl = `/catalog/ns/${ns}`;\n      break;\n    case ImportOptions.DOCKERFILE:\n      pageUrl = `/import/ns/${ns}`;\n      params.append('importType', 'docker');\n      break;\n    case ImportOptions.DATABASE:\n      pageUrl = `/catalog/ns/${ns}`;\n      params.append('category', 'databases');\n      break;\n    case ImportOptions.EVENTSOURCE:\n      pageUrl = `/event-source/ns/${ns}`;\n      break;\n    default:\n      throw new Error('Invalid Import option provided');\n  }\n  if (hasApplication && appGroup) {\n    params.append(QUERY_PROPERTIES.APPLICATION, appGroup);\n  } else {\n    params.append(QUERY_PROPERTIES.APPLICATION, UNASSIGNED_KEY);\n  }\n  if (contextSource) {\n    params.append(QUERY_PROPERTIES.CONTEXT_SOURCE, contextSource);\n  }\n  return `${pageUrl}?${params.toString()}`;\n};\n\nexport const getMenuPath = (hasApplication: boolean, connectorSourceContext?: string): string =>\n  connectorSourceContext?.length ? null : hasApplication ? 'Add to Application' : 'Add to Project';\n\ntype KebabFactory = (\n  label: string,\n  icon: React.ReactNode,\n  importType: ImportOptions,\n  checkAccess?: string,\n) => KebabAction;\n\nexport type KebabAction = (\n  obj?: K8sResourceKind,\n  namespace?: string,\n  hasApplication?: boolean,\n  connectorSourceObj?: K8sResourceKind,\n  accessData?: string[],\n) => KebabOption;\n\nexport const createKebabAction: KebabFactory = (label, icon, importType, checkAccess) => (\n  obj: K8sResourceKind,\n  namespace: string,\n  hasApplication: boolean,\n  connectorSourceObj: K8sResourceKind,\n  accessData: string[],\n) => {\n  if (checkAccess && !accessData.includes(checkAccess)) {\n    return null;\n  }\n  const connectorSourceContext: string = connectorSourceObj?.metadata\n    ? `${referenceFor(connectorSourceObj)}/${connectorSourceObj?.metadata?.name}`\n    : null;\n\n  return {\n    label,\n    icon,\n    path: getMenuPath(hasApplication, connectorSourceContext),\n    href: getAddPageUrl(obj, namespace, importType, hasApplication, connectorSourceContext),\n  };\n};\n"]}]}