{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/breakdown-card/breakdown-body.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/breakdown-card/breakdown-body.tsx","mtime":1615298458590},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport { addAvailable, getLegends } from './utils';\nimport { BreakdownChart } from './breakdown-chart';\nimport { BreakdownChartLoading } from './breakdown-loading';\nimport { TotalCapacityBody } from './breakdown-capacity';\nexport const BreakdownCardBody = ({ top5MetricsStats, metricTotal, capacityUsed, capacityAvailable, metricModel, humanize, isLoading, hasLoadError, ocsVersion = '', }) => {\n    if (isLoading && !hasLoadError) {\n        return React.createElement(BreakdownChartLoading, null);\n    }\n    if (!capacityUsed || !top5MetricsStats.length || hasLoadError) {\n        return React.createElement(\"div\", { className: \"text-secondary\" }, \"Not available\");\n    }\n    if (capacityUsed === '0') {\n        return React.createElement(\"div\", { className: \"text-secondary\" }, \"Not enough usage data\");\n    }\n    const usedCapacity = `${humanize(capacityUsed).string} used`;\n    const availableCapacity = `${humanize(capacityAvailable).string} available`;\n    const chartData = addAvailable(top5MetricsStats, capacityAvailable, metricTotal, humanize);\n    const legends = getLegends(chartData);\n    // Removes Legend for available\n    if (capacityAvailable) {\n        legends.pop();\n    }\n    return (React.createElement(Grid, null,\n        React.createElement(GridItem, { span: 4 },\n            React.createElement(TotalCapacityBody, { value: usedCapacity })),\n        React.createElement(GridItem, { span: 4 }),\n        React.createElement(GridItem, { span: 4 }, capacityAvailable && (React.createElement(TotalCapacityBody, { value: availableCapacity, className: \"capacity-breakdown-card__available-body text-secondary\" }))),\n        React.createElement(GridItem, { span: 12 },\n            React.createElement(BreakdownChart, { data: chartData, legends: legends, metricModel: metricModel, ocsVersion: ocsVersion }))));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/breakdown-card/breakdown-body.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/breakdown-card/breakdown-body.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAGxD,OAAO,EAAE,YAAY,EAAkB,UAAU,EAAE,MAAM,SAAS,CAAC;AACnE,OAAO,EAAE,cAAc,EAAE,MAAM,mBAAmB,CAAC;AACnD,OAAO,EAAE,qBAAqB,EAAE,MAAM,qBAAqB,CAAC;AAC5D,OAAO,EAAE,iBAAiB,EAAE,MAAM,sBAAsB,CAAC;AAEzD,MAAM,CAAC,MAAM,iBAAiB,GAAiC,CAAC,EAC9D,gBAAgB,EAChB,WAAW,EACX,YAAY,EACZ,iBAAiB,EACjB,WAAW,EACX,QAAQ,EACR,SAAS,EACT,YAAY,EACZ,UAAU,GAAG,EAAE,GAChB,EAAE,EAAE;IACH,IAAI,SAAS,IAAI,CAAC,YAAY,EAAE;QAC9B,OAAO,oBAAC,qBAAqB,OAAG,CAAC;KAClC;IACD,IAAI,CAAC,YAAY,IAAI,CAAC,gBAAgB,CAAC,MAAM,IAAI,YAAY,EAAE;QAC7D,OAAO,6BAAK,SAAS,EAAC,gBAAgB,oBAAoB,CAAC;KAC5D;IACD,IAAI,YAAY,KAAK,GAAG,EAAE;QACxB,OAAO,6BAAK,SAAS,EAAC,gBAAgB,4BAA4B,CAAC;KACpE;IAED,MAAM,YAAY,GAAG,GAAG,QAAQ,CAAC,YAAY,CAAC,CAAC,MAAM,OAAO,CAAC;IAC7D,MAAM,iBAAiB,GAAG,GAAG,QAAQ,CAAC,iBAAiB,CAAC,CAAC,MAAM,YAAY,CAAC;IAE5E,MAAM,SAAS,GAAG,YAAY,CAAC,gBAAgB,EAAE,iBAAiB,EAAE,WAAW,EAAE,QAAQ,CAAC,CAAC;IAE3F,MAAM,OAAO,GAAG,UAAU,CAAC,SAAS,CAAC,CAAC;IAEtC,+BAA+B;IAC/B,IAAI,iBAAiB,EAAE;QACrB,OAAO,CAAC,GAAG,EAAE,CAAC;KACf;IAED,OAAO,CACL,oBAAC,IAAI;QACH,oBAAC,QAAQ,IAAC,IAAI,EAAE,CAAC;YACf,oBAAC,iBAAiB,IAAC,KAAK,EAAE,YAAY,GAAI,CACjC;QACX,oBAAC,QAAQ,IAAC,IAAI,EAAE,CAAC,GAAI;QACrB,oBAAC,QAAQ,IAAC,IAAI,EAAE,CAAC,IACd,iBAAiB,IAAI,CACpB,oBAAC,iBAAiB,IAChB,KAAK,EAAE,iBAAiB,EACxB,SAAS,EAAC,wDAAwD,GAClE,CACH,CACQ;QACX,oBAAC,QAAQ,IAAC,IAAI,EAAE,EAAE;YAChB,oBAAC,cAAc,IACb,IAAI,EAAE,SAAS,EACf,OAAO,EAAE,OAAO,EAChB,WAAW,EAAE,WAAW,EACxB,UAAU,EAAE,UAAU,GACtB,CACO,CACN,CACR,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport { Humanize } from '@console/internal/components/utils';\nimport { K8sKind } from '@console/internal/module/k8s';\nimport { addAvailable, StackDataPoint, getLegends } from './utils';\nimport { BreakdownChart } from './breakdown-chart';\nimport { BreakdownChartLoading } from './breakdown-loading';\nimport { TotalCapacityBody } from './breakdown-capacity';\n\nexport const BreakdownCardBody: React.FC<BreakdownBodyProps> = ({\n  top5MetricsStats,\n  metricTotal,\n  capacityUsed,\n  capacityAvailable,\n  metricModel,\n  humanize,\n  isLoading,\n  hasLoadError,\n  ocsVersion = '',\n}) => {\n  if (isLoading && !hasLoadError) {\n    return <BreakdownChartLoading />;\n  }\n  if (!capacityUsed || !top5MetricsStats.length || hasLoadError) {\n    return <div className=\"text-secondary\">Not available</div>;\n  }\n  if (capacityUsed === '0') {\n    return <div className=\"text-secondary\">Not enough usage data</div>;\n  }\n\n  const usedCapacity = `${humanize(capacityUsed).string} used`;\n  const availableCapacity = `${humanize(capacityAvailable).string} available`;\n\n  const chartData = addAvailable(top5MetricsStats, capacityAvailable, metricTotal, humanize);\n\n  const legends = getLegends(chartData);\n\n  // Removes Legend for available\n  if (capacityAvailable) {\n    legends.pop();\n  }\n\n  return (\n    <Grid>\n      <GridItem span={4}>\n        <TotalCapacityBody value={usedCapacity} />\n      </GridItem>\n      <GridItem span={4} />\n      <GridItem span={4}>\n        {capacityAvailable && (\n          <TotalCapacityBody\n            value={availableCapacity}\n            className=\"capacity-breakdown-card__available-body text-secondary\"\n          />\n        )}\n      </GridItem>\n      <GridItem span={12}>\n        <BreakdownChart\n          data={chartData}\n          legends={legends}\n          metricModel={metricModel}\n          ocsVersion={ocsVersion}\n        />\n      </GridItem>\n    </Grid>\n  );\n};\n\nexport type BreakdownBodyProps = {\n  isLoading: boolean;\n  hasLoadError: boolean;\n  metricTotal: string;\n  top5MetricsStats: StackDataPoint[];\n  capacityUsed: string;\n  capacityAvailable?: string;\n  metricModel: K8sKind;\n  humanize: Humanize;\n  ocsVersion?: string;\n};\n"]}]}