{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/value-from-pair.jsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/value-from-pair.jsx","mtime":1615298458750},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash-es';\nimport * as fuzzy from 'fuzzysearch';\nimport { Dropdown, ResourceName } from './';\n// https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.10/#envvarsource-v1-core\n//   valueFrom:\n//     fieldRef:\n//       fieldPath: spec.nodeName\n//   valueFrom:\n//     secretKeyRef:\n//       name: mysecret\n//       key: username\n//   valueFrom:\n//     configMapKeyRef:\n//       name: tectonic-config\n//       key: consoleBaseAddress\n//   valueFrom:\n//     resourceFieldRef:\n//       containerName: test-container\n//       resource: requests.cpu\n//       divisor: 1 // 1 is default\nconst getSpacer = (configMap, secret) => {\n    const spacerBefore = new Set();\n    return _.isEmpty(configMap) || _.isEmpty(secret) ? spacerBefore : spacerBefore.add(secret);\n};\nconst getHeaders = (configMap, secret, serviceAccount) => {\n    const headers = {};\n    if (configMap && !_.isEmpty(configMap)) {\n        headers[configMap] = 'Config Maps';\n    }\n    if (secret && !_.isEmpty(secret)) {\n        headers[secret] = 'Secrets';\n    }\n    if (serviceAccount && !_.isEmpty(serviceAccount)) {\n        headers[serviceAccount] = 'Service Accounts';\n    }\n    return headers;\n};\nconst getKeys = (keyMap) => {\n    const itemKeys = {};\n    _.mapKeys(keyMap, (value, key) => (itemKeys[key] = key));\n    return itemKeys;\n};\nexport const NameKeyDropdownPair = ({ name, key, configMaps, secrets, serviceAccounts, onChange, kind, nameTitle, placeholderString, isKeyRef = true, }) => {\n    let itemKeys = {};\n    let refProperty;\n    const cmItems = {};\n    const secretItems = {};\n    const saItems = {};\n    const nameAutocompleteFilter = (text, item) => fuzzy(text, item.props.name);\n    const keyAutocompleteFilter = (text, item) => fuzzy(text, item);\n    const keyTitle = _.isEmpty(key) ? 'Select a key' : key;\n    const cmRefProperty = isKeyRef ? 'configMapKeyRef' : 'configMapRef';\n    const secretRefProperty = isKeyRef ? 'secretKeyRef' : 'secretRef';\n    const serviceAccountRefProperty = isKeyRef ? 'serviceAccountKeyRef' : 'serviceAccountRef';\n    _.each(configMaps.items, (v) => {\n        cmItems[`${v.metadata.name}:${cmRefProperty}`] = (React.createElement(ResourceName, { kind: \"ConfigMap\", name: v.metadata.name }));\n        if (kind === 'ConfigMap' && _.isEqual(v.metadata.name, name)) {\n            refProperty = cmRefProperty;\n            itemKeys = getKeys(v.data);\n        }\n    });\n    _.each(secrets.items, (v) => {\n        secretItems[`${v.metadata.name}:${secretRefProperty}`] = (React.createElement(ResourceName, { kind: \"Secret\", name: v.metadata.name }));\n        if (kind === 'Secret' && _.isEqual(v.metadata.name, name)) {\n            refProperty = secretRefProperty;\n            itemKeys = getKeys(v.data);\n        }\n    });\n    serviceAccounts &&\n        _.each(serviceAccounts.items, (v) => {\n            saItems[`${v.metadata.name}:${serviceAccountRefProperty}`] = (React.createElement(ResourceName, { kind: \"ServiceAccount\", name: v.metadata.name }));\n            if (kind === 'ServiceAccount' && _.isEqual(v.metadata.name, name)) {\n                refProperty = serviceAccountRefProperty;\n                itemKeys = getKeys(v.data);\n            }\n        });\n    const firstConfigMap = _.isEmpty(cmItems) ? {} : Object.keys(cmItems)[0];\n    const firstSecret = _.isEmpty(secretItems) ? {} : Object.keys(secretItems)[0];\n    const firstServiceAccount = saItems && !_.isEmpty(saItems) ? Object.keys(saItems)[0] : {};\n    const headerBefore = getHeaders(firstConfigMap, firstSecret, firstServiceAccount);\n    const spacerBefore = getSpacer(firstConfigMap, firstSecret);\n    const items = _.assign({}, cmItems, secretItems, saItems);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Dropdown, { menuClassName: \"value-from__menu dropdown-menu--text-wrap\", className: \"value-from\", autocompleteFilter: nameAutocompleteFilter, autocompletePlaceholder: placeholderString, items: items, selectedKey: name, title: nameTitle, headerBefore: headerBefore, spacerBefore: spacerBefore, onChange: (val) => {\n                const keyValuePair = _.split(val, ':');\n                onChange({\n                    [keyValuePair[1]]: isKeyRef\n                        ? { name: keyValuePair[0], key: '' }\n                        : { name: keyValuePair[0] },\n                });\n            } }),\n        isKeyRef && (React.createElement(Dropdown, { menuClassName: \"value-from__menu dropdown-menu--text-wrap\", className: \"value-from value-from--key\", autocompleteFilter: keyAutocompleteFilter, autocompletePlaceholder: \"Key\", items: itemKeys, selectedKey: key, title: keyTitle, onChange: (val) => onChange({ [refProperty]: { name, key: val } }) }))));\n};\nconst FieldRef = ({ data: { fieldPath } }) => (React.createElement(React.Fragment, null,\n    React.createElement(\"div\", { className: \"pairs-list__value-ro-field\" },\n        React.createElement(\"input\", { type: \"text\", className: \"pf-c-form-control\", value: \"FieldRef\", disabled: true })),\n    React.createElement(\"div\", { className: \"pairs-list__value-ro-field\" },\n        React.createElement(\"input\", { type: \"text\", className: \"pf-c-form-control\", value: fieldPath, disabled: true }))));\nconst ConfigMapSecretKeyRef = ({ data: { name, key }, configMaps, secrets, serviceAccounts, onChange, disabled, kind, }) => {\n    const placeholderString = 'Config Map or Secret';\n    const nameTitle = _.isEmpty(name) ? ('Select a resource') : (React.createElement(ResourceName, { kind: kind, name: name }));\n    if (disabled) {\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: \"pairs-list__value-ro-field\" },\n                React.createElement(\"input\", { type: \"text\", className: \"pf-c-form-control\", value: `${name} - ${kind}`, disabled: true })),\n            React.createElement(\"div\", { className: \"pairs-list__value-ro-field\" },\n                React.createElement(\"input\", { type: \"text\", className: \"pf-c-form-control\", value: key, disabled: true }))));\n    }\n    return NameKeyDropdownPair({\n        name,\n        key,\n        configMaps,\n        secrets,\n        serviceAccounts,\n        onChange,\n        kind,\n        nameTitle,\n        placeholderString,\n    });\n};\nconst ConfigMapSecretRef = ({ data: { name, key }, configMaps, secrets, serviceAccounts, onChange, disabled, kind, }) => {\n    const placeholderString = 'Config Map or Secret';\n    const nameTitle = _.isEmpty(name) ? ('Select a resource') : (React.createElement(ResourceName, { kind: kind, name: name }));\n    const isKeyRef = false;\n    const nameString = _.isEmpty(name) ? '' : `${name} - ${kind}`;\n    if (disabled) {\n        return (React.createElement(\"div\", { className: \"pairs-list__value-ro-field\" },\n            React.createElement(\"input\", { type: \"text\", className: \"pf-c-form-control\", value: nameString, disabled: true, placeholder: \"config map/secret\" })));\n    }\n    return NameKeyDropdownPair({\n        name,\n        key,\n        configMaps,\n        secrets,\n        serviceAccounts,\n        onChange,\n        kind,\n        nameTitle,\n        placeholderString,\n        isKeyRef,\n    });\n};\nconst ResourceFieldRef = ({ data: { containerName, resource } }) => (React.createElement(React.Fragment, null,\n    React.createElement(\"div\", { className: \"pairs-list__value-ro-field\" },\n        React.createElement(\"input\", { type: \"text\", className: \"pf-c-form-control value-from\", value: `${containerName} - Resource Field`, disabled: true })),\n    React.createElement(\"div\", { className: \"pairs-list__value-ro-field\" },\n        React.createElement(\"input\", { type: \"text\", className: \"pf-c-form-control value-from\", value: resource, disabled: true }))));\nconst keyStringToComponent = {\n    fieldRef: {\n        component: FieldRef,\n    },\n    secretKeyRef: {\n        component: ConfigMapSecretKeyRef,\n        kind: 'Secret',\n    },\n    configMapKeyRef: {\n        component: ConfigMapSecretKeyRef,\n        kind: 'ConfigMap',\n    },\n    configMapSecretKeyRef: {\n        component: ConfigMapSecretKeyRef,\n    },\n    resourceFieldRef: {\n        component: ResourceFieldRef,\n    },\n    configMapRef: {\n        component: ConfigMapSecretRef,\n        kind: 'ConfigMap',\n    },\n    secretRef: {\n        component: ConfigMapSecretRef,\n        kind: 'Secret',\n    },\n    serviceAccountRef: {\n        component: ConfigMapSecretRef,\n        kind: 'ServiceAccount',\n    },\n    configMapSecretRef: {\n        component: ConfigMapSecretRef,\n    },\n};\nexport class ValueFromPair extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.onChangeVal = (...args) => this._onChangeVal(...args);\n    }\n    _onChangeVal(value) {\n        const { onChange } = this.props;\n        const e = { target: { value } };\n        return onChange(e);\n    }\n    render() {\n        const { pair, configMaps, secrets, serviceAccounts, disabled } = this.props;\n        const valueFromKey = Object.keys(this.props.pair)[0];\n        const componentInfo = keyStringToComponent[valueFromKey];\n        const Component = componentInfo.component;\n        return (React.createElement(Component, { data: pair[valueFromKey], configMaps: configMaps, secrets: secrets, serviceAccounts: serviceAccounts, kind: componentInfo.kind, onChange: this.onChangeVal, disabled: disabled }));\n    }\n}\nValueFromPair.propTypes = {\n    pair: PropTypes.object.isRequired,\n    configMaps: PropTypes.object,\n    secrets: PropTypes.object,\n    onChange: PropTypes.func,\n    disabled: PropTypes.bool,\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/value-from-pair.jsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/value-from-pair.jsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,SAAS,MAAM,YAAY,CAAC;AACxC,OAAO,KAAK,CAAC,MAAM,WAAW,CAAC;AAC/B,OAAO,KAAK,KAAK,MAAM,aAAa,CAAC;AAErC,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE,MAAM,IAAI,CAAC;AAE5C,4FAA4F;AAC5F,eAAe;AACf,gBAAgB;AAChB,iCAAiC;AAEjC,eAAe;AACf,oBAAoB;AACpB,uBAAuB;AACvB,sBAAsB;AAEtB,eAAe;AACf,uBAAuB;AACvB,8BAA8B;AAC9B,gCAAgC;AAEhC,eAAe;AACf,wBAAwB;AACxB,sCAAsC;AACtC,+BAA+B;AAC/B,mCAAmC;AAEnC,MAAM,SAAS,GAAG,CAAC,SAAS,EAAE,MAAM,EAAE,EAAE;IACtC,MAAM,YAAY,GAAG,IAAI,GAAG,EAAE,CAAC;IAC/B,OAAO,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC;AAC7F,CAAC,CAAC;AAEF,MAAM,UAAU,GAAG,CAAC,SAAS,EAAE,MAAM,EAAE,cAAc,EAAE,EAAE;IACvD,MAAM,OAAO,GAAG,EAAE,CAAC;IACnB,IAAI,SAAS,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;QACtC,OAAO,CAAC,SAAS,CAAC,GAAG,aAAa,CAAC;KACpC;IACD,IAAI,MAAM,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;QAChC,OAAO,CAAC,MAAM,CAAC,GAAG,SAAS,CAAC;KAC7B;IACD,IAAI,cAAc,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,cAAc,CAAC,EAAE;QAChD,OAAO,CAAC,cAAc,CAAC,GAAG,kBAAkB,CAAC;KAC9C;IAED,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAEF,MAAM,OAAO,GAAG,CAAC,MAAM,EAAE,EAAE;IACzB,MAAM,QAAQ,GAAG,EAAE,CAAC;IACpB,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,GAAG,CAAC,CAAC,CAAC;IACzD,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,EAClC,IAAI,EACJ,GAAG,EACH,UAAU,EACV,OAAO,EACP,eAAe,EACf,QAAQ,EACR,IAAI,EACJ,SAAS,EACT,iBAAiB,EACjB,QAAQ,GAAG,IAAI,GAChB,EAAE,EAAE;IACH,IAAI,QAAQ,GAAG,EAAE,CAAC;IAClB,IAAI,WAAW,CAAC;IAChB,MAAM,OAAO,GAAG,EAAE,CAAC;IACnB,MAAM,WAAW,GAAG,EAAE,CAAC;IACvB,MAAM,OAAO,GAAG,EAAE,CAAC;IACnB,MAAM,sBAAsB,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;IAC5E,MAAM,qBAAqB,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAAC,KAAK,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAChE,MAAM,QAAQ,GAAG,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,GAAG,CAAC;IACvD,MAAM,aAAa,GAAG,QAAQ,CAAC,CAAC,CAAC,iBAAiB,CAAC,CAAC,CAAC,cAAc,CAAC;IACpE,MAAM,iBAAiB,GAAG,QAAQ,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,WAAW,CAAC;IAClE,MAAM,yBAAyB,GAAG,QAAQ,CAAC,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC,mBAAmB,CAAC;IAE1F,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE;QAC7B,OAAO,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,IAAI,aAAa,EAAE,CAAC,GAAG,CAC/C,oBAAC,YAAY,IAAC,IAAI,EAAC,WAAW,EAAC,IAAI,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,GAAI,CACzD,CAAC;QACF,IAAI,IAAI,KAAK,WAAW,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE;YAC5D,WAAW,GAAG,aAAa,CAAC;YAC5B,QAAQ,GAAG,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;SAC5B;IACH,CAAC,CAAC,CAAC;IACH,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE;QAC1B,WAAW,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,IAAI,iBAAiB,EAAE,CAAC,GAAG,CACvD,oBAAC,YAAY,IAAC,IAAI,EAAC,QAAQ,EAAC,IAAI,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,GAAI,CACtD,CAAC;QACF,IAAI,IAAI,KAAK,QAAQ,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE;YACzD,WAAW,GAAG,iBAAiB,CAAC;YAChC,QAAQ,GAAG,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;SAC5B;IACH,CAAC,CAAC,CAAC;IACH,eAAe;QACb,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,CAAC,CAAC,EAAE,EAAE;YAClC,OAAO,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,IAAI,IAAI,yBAAyB,EAAE,CAAC,GAAG,CAC3D,oBAAC,YAAY,IAAC,IAAI,EAAC,gBAAgB,EAAC,IAAI,EAAE,CAAC,CAAC,QAAQ,CAAC,IAAI,GAAI,CAC9D,CAAC;YACF,IAAI,IAAI,KAAK,gBAAgB,IAAI,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE;gBACjE,WAAW,GAAG,yBAAyB,CAAC;gBACxC,QAAQ,GAAG,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;aAC5B;QACH,CAAC,CAAC,CAAC;IAEL,MAAM,cAAc,GAAG,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC;IACzE,MAAM,WAAW,GAAG,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;IAC9E,MAAM,mBAAmB,GAAG,OAAO,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAC1F,MAAM,YAAY,GAAG,UAAU,CAAC,cAAc,EAAE,WAAW,EAAE,mBAAmB,CAAC,CAAC;IAClF,MAAM,YAAY,GAAG,SAAS,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC;IAC5D,MAAM,KAAK,GAAG,CAAC,CAAC,MAAM,CAAC,EAAE,EAAE,OAAO,EAAE,WAAW,EAAE,OAAO,CAAC,CAAC;IAC1D,OAAO,CACL;QACE,oBAAC,QAAQ,IACP,aAAa,EAAC,2CAA2C,EACzD,SAAS,EAAC,YAAY,EACtB,kBAAkB,EAAE,sBAAsB,EAC1C,uBAAuB,EAAE,iBAAiB,EAC1C,KAAK,EAAE,KAAK,EACZ,WAAW,EAAE,IAAI,EACjB,KAAK,EAAE,SAAS,EAChB,YAAY,EAAE,YAAY,EAC1B,YAAY,EAAE,YAAY,EAC1B,QAAQ,EAAE,CAAC,GAAG,EAAE,EAAE;gBAChB,MAAM,YAAY,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;gBACvC,QAAQ,CAAC;oBACP,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,QAAQ;wBACzB,CAAC,CAAC,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE;wBACpC,CAAC,CAAC,EAAE,IAAI,EAAE,YAAY,CAAC,CAAC,CAAC,EAAE;iBAC9B,CAAC,CAAC;YACL,CAAC,GACD;QACD,QAAQ,IAAI,CACX,oBAAC,QAAQ,IACP,aAAa,EAAC,2CAA2C,EACzD,SAAS,EAAC,4BAA4B,EACtC,kBAAkB,EAAE,qBAAqB,EACzC,uBAAuB,EAAC,KAAK,EAC7B,KAAK,EAAE,QAAQ,EACf,WAAW,EAAE,GAAG,EAChB,KAAK,EAAE,QAAQ,EACf,QAAQ,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,QAAQ,CAAC,EAAE,CAAC,WAAW,CAAC,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,EAAE,CAAC,GAClE,CACH,CACA,CACJ,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,QAAQ,GAAG,CAAC,EAAE,IAAI,EAAE,EAAE,SAAS,EAAE,EAAE,EAAE,EAAE,CAAC,CAC5C;IACE,6BAAK,SAAS,EAAC,4BAA4B;QACzC,+BAAO,IAAI,EAAC,MAAM,EAAC,SAAS,EAAC,mBAAmB,EAAC,KAAK,EAAC,UAAU,EAAC,QAAQ,SAAG,CACzE;IACN,6BAAK,SAAS,EAAC,4BAA4B;QACzC,+BAAO,IAAI,EAAC,MAAM,EAAC,SAAS,EAAC,mBAAmB,EAAC,KAAK,EAAE,SAAS,EAAE,QAAQ,SAAG,CAC1E,CACL,CACJ,CAAC;AAEF,MAAM,qBAAqB,GAAG,CAAC,EAC7B,IAAI,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,EACnB,UAAU,EACV,OAAO,EACP,eAAe,EACf,QAAQ,EACR,QAAQ,EACR,IAAI,GACL,EAAE,EAAE;IACH,MAAM,iBAAiB,GAAG,sBAAsB,CAAC;IACjD,MAAM,SAAS,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAClC,mBAAmB,CACpB,CAAC,CAAC,CAAC,CACF,oBAAC,YAAY,IAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,GAAI,CACzC,CAAC;IAEF,IAAI,QAAQ,EAAE;QACZ,OAAO,CACL;YACE,6BAAK,SAAS,EAAC,4BAA4B;gBACzC,+BAAO,IAAI,EAAC,MAAM,EAAC,SAAS,EAAC,mBAAmB,EAAC,KAAK,EAAE,GAAG,IAAI,MAAM,IAAI,EAAE,EAAE,QAAQ,SAAG,CACpF;YACN,6BAAK,SAAS,EAAC,4BAA4B;gBACzC,+BAAO,IAAI,EAAC,MAAM,EAAC,SAAS,EAAC,mBAAmB,EAAC,KAAK,EAAE,GAAG,EAAE,QAAQ,SAAG,CACpE,CACL,CACJ,CAAC;KACH;IACD,OAAO,mBAAmB,CAAC;QACzB,IAAI;QACJ,GAAG;QACH,UAAU;QACV,OAAO;QACP,eAAe;QACf,QAAQ;QACR,IAAI;QACJ,SAAS;QACT,iBAAiB;KAClB,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,kBAAkB,GAAG,CAAC,EAC1B,IAAI,EAAE,EAAE,IAAI,EAAE,GAAG,EAAE,EACnB,UAAU,EACV,OAAO,EACP,eAAe,EACf,QAAQ,EACR,QAAQ,EACR,IAAI,GACL,EAAE,EAAE;IACH,MAAM,iBAAiB,GAAG,sBAAsB,CAAC;IACjD,MAAM,SAAS,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAClC,mBAAmB,CACpB,CAAC,CAAC,CAAC,CACF,oBAAC,YAAY,IAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,GAAI,CACzC,CAAC;IACF,MAAM,QAAQ,GAAG,KAAK,CAAC;IACvB,MAAM,UAAU,GAAG,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,EAAE,CAAC;IAE9D,IAAI,QAAQ,EAAE;QACZ,OAAO,CACL,6BAAK,SAAS,EAAC,4BAA4B;YACzC,+BACE,IAAI,EAAC,MAAM,EACX,SAAS,EAAC,mBAAmB,EAC7B,KAAK,EAAE,UAAU,EACjB,QAAQ,QACR,WAAW,EAAC,mBAAmB,GAC/B,CACE,CACP,CAAC;KACH;IACD,OAAO,mBAAmB,CAAC;QACzB,IAAI;QACJ,GAAG;QACH,UAAU;QACV,OAAO;QACP,eAAe;QACf,QAAQ;QACR,IAAI;QACJ,SAAS;QACT,iBAAiB;QACjB,QAAQ;KACT,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,gBAAgB,GAAG,CAAC,EAAE,IAAI,EAAE,EAAE,aAAa,EAAE,QAAQ,EAAE,EAAE,EAAE,EAAE,CAAC,CAClE;IACE,6BAAK,SAAS,EAAC,4BAA4B;QACzC,+BACE,IAAI,EAAC,MAAM,EACX,SAAS,EAAC,8BAA8B,EACxC,KAAK,EAAE,GAAG,aAAa,mBAAmB,EAC1C,QAAQ,SACR,CACE;IACN,6BAAK,SAAS,EAAC,4BAA4B;QACzC,+BAAO,IAAI,EAAC,MAAM,EAAC,SAAS,EAAC,8BAA8B,EAAC,KAAK,EAAE,QAAQ,EAAE,QAAQ,SAAG,CACpF,CACL,CACJ,CAAC;AAEF,MAAM,oBAAoB,GAAG;IAC3B,QAAQ,EAAE;QACR,SAAS,EAAE,QAAQ;KACpB;IACD,YAAY,EAAE;QACZ,SAAS,EAAE,qBAAqB;QAChC,IAAI,EAAE,QAAQ;KACf;IACD,eAAe,EAAE;QACf,SAAS,EAAE,qBAAqB;QAChC,IAAI,EAAE,WAAW;KAClB;IACD,qBAAqB,EAAE;QACrB,SAAS,EAAE,qBAAqB;KACjC;IACD,gBAAgB,EAAE;QAChB,SAAS,EAAE,gBAAgB;KAC5B;IACD,YAAY,EAAE;QACZ,SAAS,EAAE,kBAAkB;QAC7B,IAAI,EAAE,WAAW;KAClB;IACD,SAAS,EAAE;QACT,SAAS,EAAE,kBAAkB;QAC7B,IAAI,EAAE,QAAQ;KACf;IACD,iBAAiB,EAAE;QACjB,SAAS,EAAE,kBAAkB;QAC7B,IAAI,EAAE,gBAAgB;KACvB;IACD,kBAAkB,EAAE;QAClB,SAAS,EAAE,kBAAkB;KAC9B;CACF,CAAC;AAEF,MAAM,OAAO,aAAc,SAAQ,KAAK,CAAC,aAAa;IACpD,YAAY,KAAK;QACf,KAAK,CAAC,KAAK,CAAC,CAAC;QAEb,IAAI,CAAC,WAAW,GAAG,CAAC,GAAG,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,YAAY,CAAC,GAAG,IAAI,CAAC,CAAC;IAC7D,CAAC;IAED,YAAY,CAAC,KAAK;QAChB,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAChC,MAAM,CAAC,GAAG,EAAE,MAAM,EAAE,EAAE,KAAK,EAAE,EAAE,CAAC;QAChC,OAAO,QAAQ,CAAC,CAAC,CAAC,CAAC;IACrB,CAAC;IAED,MAAM;QACJ,MAAM,EAAE,IAAI,EAAE,UAAU,EAAE,OAAO,EAAE,eAAe,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAC5E,MAAM,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QACrD,MAAM,aAAa,GAAG,oBAAoB,CAAC,YAAY,CAAC,CAAC;QACzD,MAAM,SAAS,GAAG,aAAa,CAAC,SAAS,CAAC;QAE1C,OAAO,CACL,oBAAC,SAAS,IACR,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,EACxB,UAAU,EAAE,UAAU,EACtB,OAAO,EAAE,OAAO,EAChB,eAAe,EAAE,eAAe,EAChC,IAAI,EAAE,aAAa,CAAC,IAAI,EACxB,QAAQ,EAAE,IAAI,CAAC,WAAW,EAC1B,QAAQ,EAAE,QAAQ,GAClB,CACH,CAAC;IACJ,CAAC;CACF;AACD,aAAa,CAAC,SAAS,GAAG;IACxB,IAAI,EAAE,SAAS,CAAC,MAAM,CAAC,UAAU;IACjC,UAAU,EAAE,SAAS,CAAC,MAAM;IAC5B,OAAO,EAAE,SAAS,CAAC,MAAM;IACzB,QAAQ,EAAE,SAAS,CAAC,IAAI;IACxB,QAAQ,EAAE,SAAS,CAAC,IAAI;CACzB,CAAC","sourcesContent":["import * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as _ from 'lodash-es';\nimport * as fuzzy from 'fuzzysearch';\n\nimport { Dropdown, ResourceName } from './';\n\n// https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.10/#envvarsource-v1-core\n//   valueFrom:\n//     fieldRef:\n//       fieldPath: spec.nodeName\n\n//   valueFrom:\n//     secretKeyRef:\n//       name: mysecret\n//       key: username\n\n//   valueFrom:\n//     configMapKeyRef:\n//       name: tectonic-config\n//       key: consoleBaseAddress\n\n//   valueFrom:\n//     resourceFieldRef:\n//       containerName: test-container\n//       resource: requests.cpu\n//       divisor: 1 // 1 is default\n\nconst getSpacer = (configMap, secret) => {\n  const spacerBefore = new Set();\n  return _.isEmpty(configMap) || _.isEmpty(secret) ? spacerBefore : spacerBefore.add(secret);\n};\n\nconst getHeaders = (configMap, secret, serviceAccount) => {\n  const headers = {};\n  if (configMap && !_.isEmpty(configMap)) {\n    headers[configMap] = 'Config Maps';\n  }\n  if (secret && !_.isEmpty(secret)) {\n    headers[secret] = 'Secrets';\n  }\n  if (serviceAccount && !_.isEmpty(serviceAccount)) {\n    headers[serviceAccount] = 'Service Accounts';\n  }\n\n  return headers;\n};\n\nconst getKeys = (keyMap) => {\n  const itemKeys = {};\n  _.mapKeys(keyMap, (value, key) => (itemKeys[key] = key));\n  return itemKeys;\n};\n\nexport const NameKeyDropdownPair = ({\n  name,\n  key,\n  configMaps,\n  secrets,\n  serviceAccounts,\n  onChange,\n  kind,\n  nameTitle,\n  placeholderString,\n  isKeyRef = true,\n}) => {\n  let itemKeys = {};\n  let refProperty;\n  const cmItems = {};\n  const secretItems = {};\n  const saItems = {};\n  const nameAutocompleteFilter = (text, item) => fuzzy(text, item.props.name);\n  const keyAutocompleteFilter = (text, item) => fuzzy(text, item);\n  const keyTitle = _.isEmpty(key) ? 'Select a key' : key;\n  const cmRefProperty = isKeyRef ? 'configMapKeyRef' : 'configMapRef';\n  const secretRefProperty = isKeyRef ? 'secretKeyRef' : 'secretRef';\n  const serviceAccountRefProperty = isKeyRef ? 'serviceAccountKeyRef' : 'serviceAccountRef';\n\n  _.each(configMaps.items, (v) => {\n    cmItems[`${v.metadata.name}:${cmRefProperty}`] = (\n      <ResourceName kind=\"ConfigMap\" name={v.metadata.name} />\n    );\n    if (kind === 'ConfigMap' && _.isEqual(v.metadata.name, name)) {\n      refProperty = cmRefProperty;\n      itemKeys = getKeys(v.data);\n    }\n  });\n  _.each(secrets.items, (v) => {\n    secretItems[`${v.metadata.name}:${secretRefProperty}`] = (\n      <ResourceName kind=\"Secret\" name={v.metadata.name} />\n    );\n    if (kind === 'Secret' && _.isEqual(v.metadata.name, name)) {\n      refProperty = secretRefProperty;\n      itemKeys = getKeys(v.data);\n    }\n  });\n  serviceAccounts &&\n    _.each(serviceAccounts.items, (v) => {\n      saItems[`${v.metadata.name}:${serviceAccountRefProperty}`] = (\n        <ResourceName kind=\"ServiceAccount\" name={v.metadata.name} />\n      );\n      if (kind === 'ServiceAccount' && _.isEqual(v.metadata.name, name)) {\n        refProperty = serviceAccountRefProperty;\n        itemKeys = getKeys(v.data);\n      }\n    });\n\n  const firstConfigMap = _.isEmpty(cmItems) ? {} : Object.keys(cmItems)[0];\n  const firstSecret = _.isEmpty(secretItems) ? {} : Object.keys(secretItems)[0];\n  const firstServiceAccount = saItems && !_.isEmpty(saItems) ? Object.keys(saItems)[0] : {};\n  const headerBefore = getHeaders(firstConfigMap, firstSecret, firstServiceAccount);\n  const spacerBefore = getSpacer(firstConfigMap, firstSecret);\n  const items = _.assign({}, cmItems, secretItems, saItems);\n  return (\n    <>\n      <Dropdown\n        menuClassName=\"value-from__menu dropdown-menu--text-wrap\"\n        className=\"value-from\"\n        autocompleteFilter={nameAutocompleteFilter}\n        autocompletePlaceholder={placeholderString}\n        items={items}\n        selectedKey={name}\n        title={nameTitle}\n        headerBefore={headerBefore}\n        spacerBefore={spacerBefore}\n        onChange={(val) => {\n          const keyValuePair = _.split(val, ':');\n          onChange({\n            [keyValuePair[1]]: isKeyRef\n              ? { name: keyValuePair[0], key: '' }\n              : { name: keyValuePair[0] },\n          });\n        }}\n      />\n      {isKeyRef && (\n        <Dropdown\n          menuClassName=\"value-from__menu dropdown-menu--text-wrap\"\n          className=\"value-from value-from--key\"\n          autocompleteFilter={keyAutocompleteFilter}\n          autocompletePlaceholder=\"Key\"\n          items={itemKeys}\n          selectedKey={key}\n          title={keyTitle}\n          onChange={(val) => onChange({ [refProperty]: { name, key: val } })}\n        />\n      )}\n    </>\n  );\n};\n\nconst FieldRef = ({ data: { fieldPath } }) => (\n  <>\n    <div className=\"pairs-list__value-ro-field\">\n      <input type=\"text\" className=\"pf-c-form-control\" value=\"FieldRef\" disabled />\n    </div>\n    <div className=\"pairs-list__value-ro-field\">\n      <input type=\"text\" className=\"pf-c-form-control\" value={fieldPath} disabled />\n    </div>\n  </>\n);\n\nconst ConfigMapSecretKeyRef = ({\n  data: { name, key },\n  configMaps,\n  secrets,\n  serviceAccounts,\n  onChange,\n  disabled,\n  kind,\n}) => {\n  const placeholderString = 'Config Map or Secret';\n  const nameTitle = _.isEmpty(name) ? (\n    'Select a resource'\n  ) : (\n    <ResourceName kind={kind} name={name} />\n  );\n\n  if (disabled) {\n    return (\n      <>\n        <div className=\"pairs-list__value-ro-field\">\n          <input type=\"text\" className=\"pf-c-form-control\" value={`${name} - ${kind}`} disabled />\n        </div>\n        <div className=\"pairs-list__value-ro-field\">\n          <input type=\"text\" className=\"pf-c-form-control\" value={key} disabled />\n        </div>\n      </>\n    );\n  }\n  return NameKeyDropdownPair({\n    name,\n    key,\n    configMaps,\n    secrets,\n    serviceAccounts,\n    onChange,\n    kind,\n    nameTitle,\n    placeholderString,\n  });\n};\n\nconst ConfigMapSecretRef = ({\n  data: { name, key },\n  configMaps,\n  secrets,\n  serviceAccounts,\n  onChange,\n  disabled,\n  kind,\n}) => {\n  const placeholderString = 'Config Map or Secret';\n  const nameTitle = _.isEmpty(name) ? (\n    'Select a resource'\n  ) : (\n    <ResourceName kind={kind} name={name} />\n  );\n  const isKeyRef = false;\n  const nameString = _.isEmpty(name) ? '' : `${name} - ${kind}`;\n\n  if (disabled) {\n    return (\n      <div className=\"pairs-list__value-ro-field\">\n        <input\n          type=\"text\"\n          className=\"pf-c-form-control\"\n          value={nameString}\n          disabled\n          placeholder=\"config map/secret\"\n        />\n      </div>\n    );\n  }\n  return NameKeyDropdownPair({\n    name,\n    key,\n    configMaps,\n    secrets,\n    serviceAccounts,\n    onChange,\n    kind,\n    nameTitle,\n    placeholderString,\n    isKeyRef,\n  });\n};\n\nconst ResourceFieldRef = ({ data: { containerName, resource } }) => (\n  <>\n    <div className=\"pairs-list__value-ro-field\">\n      <input\n        type=\"text\"\n        className=\"pf-c-form-control value-from\"\n        value={`${containerName} - Resource Field`}\n        disabled\n      />\n    </div>\n    <div className=\"pairs-list__value-ro-field\">\n      <input type=\"text\" className=\"pf-c-form-control value-from\" value={resource} disabled />\n    </div>\n  </>\n);\n\nconst keyStringToComponent = {\n  fieldRef: {\n    component: FieldRef,\n  },\n  secretKeyRef: {\n    component: ConfigMapSecretKeyRef,\n    kind: 'Secret',\n  },\n  configMapKeyRef: {\n    component: ConfigMapSecretKeyRef,\n    kind: 'ConfigMap',\n  },\n  configMapSecretKeyRef: {\n    component: ConfigMapSecretKeyRef,\n  },\n  resourceFieldRef: {\n    component: ResourceFieldRef,\n  },\n  configMapRef: {\n    component: ConfigMapSecretRef,\n    kind: 'ConfigMap',\n  },\n  secretRef: {\n    component: ConfigMapSecretRef,\n    kind: 'Secret',\n  },\n  serviceAccountRef: {\n    component: ConfigMapSecretRef,\n    kind: 'ServiceAccount',\n  },\n  configMapSecretRef: {\n    component: ConfigMapSecretRef,\n  },\n};\n\nexport class ValueFromPair extends React.PureComponent {\n  constructor(props) {\n    super(props);\n\n    this.onChangeVal = (...args) => this._onChangeVal(...args);\n  }\n\n  _onChangeVal(value) {\n    const { onChange } = this.props;\n    const e = { target: { value } };\n    return onChange(e);\n  }\n\n  render() {\n    const { pair, configMaps, secrets, serviceAccounts, disabled } = this.props;\n    const valueFromKey = Object.keys(this.props.pair)[0];\n    const componentInfo = keyStringToComponent[valueFromKey];\n    const Component = componentInfo.component;\n\n    return (\n      <Component\n        data={pair[valueFromKey]}\n        configMaps={configMaps}\n        secrets={secrets}\n        serviceAccounts={serviceAccounts}\n        kind={componentInfo.kind}\n        onChange={this.onChangeVal}\n        disabled={disabled}\n      />\n    );\n  }\n}\nValueFromPair.propTypes = {\n  pair: PropTypes.object.isRequired,\n  configMaps: PropTypes.object,\n  secrets: PropTypes.object,\n  onChange: PropTypes.func,\n  disabled: PropTypes.bool,\n};\n"]}]}