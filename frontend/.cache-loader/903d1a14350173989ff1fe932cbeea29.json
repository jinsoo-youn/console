{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/receiver-forms/slack-receiver-form.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/receiver-forms/slack-receiver-form.tsx","mtime":1616735742480},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["/* eslint-disable camelcase */\nimport * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { RadioInput } from '../../radio';\nimport { ExpandCollapse, ExternalLink } from '../../utils';\nimport { SaveAsDefaultCheckbox, SendResolvedAlertsCheckbox, } from './alert-manager-receiver-forms';\nconst GLOBAL_FIELDS = [\n    'slack_api_url',\n    'slack_send_resolved',\n    'slack_username',\n    'slack_icon_emoji',\n    'slack_icon_url',\n    'slack_link_names',\n];\nexport const Form = ({ globals, formValues, dispatchFormChange }) => {\n    return (React.createElement(\"div\", { \"data-test-id\": \"slack-receiver-form\" },\n        React.createElement(\"div\", { className: \"form-group\" },\n            React.createElement(\"label\", { \"data-test-id\": \"api-url-label\", className: \"control-label co-required\", htmlFor: \"slack-api-url\" }, \"Slack API URL\"),\n            React.createElement(\"div\", { className: \"row\" },\n                React.createElement(\"div\", { className: \"col-sm-7\" },\n                    React.createElement(\"input\", { className: \"pf-c-form-control\", type: \"text\", id: \"slack-api-url\", \"aria-describedby\": \"slack-api-url-help\", \"data-test-id\": \"slack-api-url\", value: formValues.slack_api_url, onChange: (e) => dispatchFormChange({\n                            type: 'setFormValues',\n                            payload: { slack_api_url: e.target.value },\n                        }) })),\n                React.createElement(\"div\", { className: \"col-sm-5\" },\n                    React.createElement(SaveAsDefaultCheckbox, { formField: \"slackSaveAsDefault\", disabled: formValues.slack_api_url === (globals === null || globals === void 0 ? void 0 : globals.slack_api_url), label: \"Save as default Slack API URL\", formValues: formValues, dispatchFormChange: dispatchFormChange, tooltip: \"Checking this box will write the API URL to the global section of the\\n                configuration file where it will become the default API URL for future Slack receivers.\" }))),\n            React.createElement(\"div\", { className: \"help-block\", id: \"slack-api-url-help\" }, \"The URL of the Slack Webhook.\")),\n        React.createElement(\"div\", { className: \"form-group\" },\n            React.createElement(\"label\", { className: \"control-label co-required\", htmlFor: \"slack-channel\" }, \"Channel\"),\n            React.createElement(\"input\", { className: \"pf-c-form-control\", type: \"text\", id: \"slack-channel\", \"aria-describedby\": \"slack-channel-help\", \"data-test-id\": \"slack-channel\", value: formValues.slackChannel, onChange: (e) => dispatchFormChange({\n                    type: 'setFormValues',\n                    payload: { slackChannel: e.target.value },\n                }) }),\n            React.createElement(\"div\", { className: \"help-block\", id: \"slack-channel-help\" }, \"The Slack channel or user to send notifications to.\")),\n        React.createElement(\"div\", { className: \"form-group\" },\n            React.createElement(ExpandCollapse, { textCollapsed: \"Show advanced configuration\", textExpanded: \"Hide advanced configuration\" },\n                React.createElement(\"div\", { className: \"co-form-subsection\" },\n                    React.createElement(\"div\", { className: \"form-group\" },\n                        React.createElement(SendResolvedAlertsCheckbox, { formField: \"slack_send_resolved\", formValues: formValues, dispatchFormChange: dispatchFormChange })),\n                    React.createElement(\"div\", { className: \"form-group\" },\n                        React.createElement(\"label\", { className: \"control-label\", htmlFor: \"slack-icon-type\" },\n                            \"Icon \\u00A0\",\n                            React.createElement(RadioInput, { title: \"URL\", name: \"slackIconType\", id: \"slack-icon-type\", value: \"url\", onChange: (e) => dispatchFormChange({\n                                    type: 'setFormValues',\n                                    payload: { slackIconType: e.target.value },\n                                }), checked: formValues.slackIconType === 'url', inline: true }),\n                            React.createElement(RadioInput, { title: \"Emoji\", name: \"slackIconType\", value: \"emoji\", \"data-test-id\": \"slack-icon-type-emoji\", onChange: (e) => dispatchFormChange({\n                                    type: 'setFormValues',\n                                    payload: { slackIconType: e.target.value },\n                                }), checked: formValues.slackIconType === 'emoji', inline: true })),\n                        formValues.slackIconType === 'url' && (React.createElement(React.Fragment, null,\n                            React.createElement(\"input\", { className: \"pf-c-form-control\", type: \"text\", \"aria-describedby\": \"slack-icon-url-help\", \"aria-label\": \"The URL of the icon.\", \"data-test-id\": \"slack-icon-url\", value: formValues.slack_icon_url, onChange: (e) => dispatchFormChange({\n                                    type: 'setFormValues',\n                                    payload: { slack_icon_url: e.target.value },\n                                }) }),\n                            React.createElement(\"div\", { className: \"help-block\", id: \"slack-icon-url-help\" }, \"The URL of the icon.\"))),\n                        formValues.slackIconType === 'emoji' && (React.createElement(React.Fragment, null,\n                            React.createElement(\"input\", { className: \"pf-c-form-control\", type: \"text\", \"aria-describedby\": \"slack-icon-emoji-help\", \"aria-label\": \"An emoji code to use in place of the default icon.\", name: \"slackIconEmoji\", \"data-test-id\": \"slack-icon-emoji\", value: formValues.slack_icon_emoji, onChange: (e) => dispatchFormChange({\n                                    type: 'setFormValues',\n                                    payload: { slack_icon_emoji: e.target.value },\n                                }) }),\n                            React.createElement(\"div\", { className: \"help-block\", id: \"slack-icon-emoji-help\" },\n                                \"An\",\n                                ' ',\n                                React.createElement(ExternalLink, { href: \"https://www.webfx.com/tools/emoji-cheat-sheet/\", text: \"emoji code\" }),\n                                ' ',\n                                \"to use in place of the default icon.\")))),\n                    React.createElement(\"div\", { className: \"form-group\" },\n                        React.createElement(\"label\", { className: \"control-label\", htmlFor: \"slack-username\" }, \"Username\"),\n                        React.createElement(\"input\", { className: \"pf-c-form-control\", type: \"text\", \"aria-describedby\": \"slack-username-help\", id: \"slack-username\", \"data-test-id\": \"slack-username\", value: formValues.slack_username, onChange: (e) => dispatchFormChange({\n                                type: 'setFormValues',\n                                payload: { slack_username: e.target.value },\n                            }) }),\n                        React.createElement(\"div\", { className: \"help-block\", id: \"slack-username-help\" }, \"The displayed username.\")),\n                    React.createElement(\"div\", { className: \"form-group\" },\n                        React.createElement(\"div\", { className: \"checkbox\" },\n                            React.createElement(\"label\", { className: \"control-label\", htmlFor: \"slack-link-names\" },\n                                React.createElement(\"input\", { type: \"checkbox\", id: \"slack-link-names\", \"data-test-id\": \"slack-link-names\", \"aria-describedby\": \"slack-link-names-help\", onChange: (e) => dispatchFormChange({\n                                        type: 'setFormValues',\n                                        payload: { slack_link_names: e.target.checked },\n                                    }), checked: formValues.slack_link_names }),\n                                \"Link Names\")),\n                        React.createElement(\"div\", { className: \"help-block\", id: \"slack-link-names-help\" }, \"Find and link channel names and usernames.\")))))));\n};\nexport const getInitialValues = (globals, receiverConfig) => {\n    const initValues = {\n        slackSaveAsDefault: false,\n        slackChannel: _.get(receiverConfig, 'channel'),\n    };\n    initValues.slackIconType = _.has(receiverConfig, 'icon_emoji') ? 'emoji' : 'url';\n    GLOBAL_FIELDS.forEach((fld) => {\n        const configFieldName = fld.substring(fld.indexOf('_') + 1); //strip off leading 'slack_' prefix\n        initValues[fld] = _.get(receiverConfig, configFieldName, globals[fld]);\n    });\n    return initValues;\n};\nexport const isFormInvalid = (formValues) => {\n    return !formValues.slack_api_url || !formValues.slackChannel;\n};\nexport const updateGlobals = (globals, formValues) => {\n    const updatedGlobals = {};\n    if (formValues.slackSaveAsDefault && formValues.slack_api_url) {\n        _.set(updatedGlobals, 'slack_api_url', formValues.slack_api_url);\n    }\n    return updatedGlobals;\n};\nexport const createReceiverConfig = (globals, formValues, receiverConfig) => {\n    _.set(receiverConfig, 'channel', formValues.slackChannel);\n    // Only save these props in receiverConfig if different from global\n    GLOBAL_FIELDS.forEach((fld) => {\n        const formValue = formValues[fld];\n        const configFieldName = fld.substring(fld.indexOf('_') + 1); //strip off leading 'slack_' prefix\n        if (formValue !== globals[fld]) {\n            if (fld === 'slack_api_url' && formValues.slackSaveAsDefault) {\n                _.unset(receiverConfig, 'api_url'); // saving as global so unset in config\n            }\n            else {\n                _.set(receiverConfig, configFieldName, formValue);\n            }\n        }\n        else {\n            _.unset(receiverConfig, configFieldName); // equals global, unset in config so global is used\n        }\n    });\n    _.unset(receiverConfig, formValues.slackIconType === 'url' ? 'icon_emoji' : 'icon_url');\n    return receiverConfig;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/receiver-forms/slack-receiver-form.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/receiver-forms/slack-receiver-form.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\nimport * as _ from 'lodash-es';\nimport * as React from 'react';\n\nimport { RadioInput } from '../../radio';\nimport { ExpandCollapse, ExternalLink } from '../../utils';\nimport {\n  SaveAsDefaultCheckbox,\n  SendResolvedAlertsCheckbox,\n  FormProps,\n} from './alert-manager-receiver-forms';\n\nconst GLOBAL_FIELDS = [\n  'slack_api_url',\n  'slack_send_resolved',\n  'slack_username',\n  'slack_icon_emoji',\n  'slack_icon_url',\n  'slack_link_names',\n];\n\nexport const Form: React.FC<FormProps> = ({ globals, formValues, dispatchFormChange }) => {\n  return (\n    <div data-test-id=\"slack-receiver-form\">\n      <div className=\"form-group\">\n        <label\n          data-test-id=\"api-url-label\"\n          className=\"control-label co-required\"\n          htmlFor=\"slack-api-url\"\n        >\n          Slack API URL\n        </label>\n        <div className=\"row\">\n          <div className=\"col-sm-7\">\n            <input\n              className=\"pf-c-form-control\"\n              type=\"text\"\n              id=\"slack-api-url\"\n              aria-describedby=\"slack-api-url-help\"\n              data-test-id=\"slack-api-url\"\n              value={formValues.slack_api_url}\n              onChange={(e) =>\n                dispatchFormChange({\n                  type: 'setFormValues',\n                  payload: { slack_api_url: e.target.value },\n                })\n              }\n            />\n          </div>\n          <div className=\"col-sm-5\">\n            <SaveAsDefaultCheckbox\n              formField=\"slackSaveAsDefault\"\n              disabled={formValues.slack_api_url === globals?.slack_api_url}\n              label=\"Save as default Slack API URL\"\n              formValues={formValues}\n              dispatchFormChange={dispatchFormChange}\n              tooltip=\"Checking this box will write the API URL to the global section of the\n                configuration file where it will become the default API URL for future Slack receivers.\"\n            />\n          </div>\n        </div>\n        <div className=\"help-block\" id=\"slack-api-url-help\">\n          The URL of the Slack Webhook.\n        </div>\n      </div>\n      <div className=\"form-group\">\n        <label className=\"control-label co-required\" htmlFor=\"slack-channel\">\n          Channel\n        </label>\n        <input\n          className=\"pf-c-form-control\"\n          type=\"text\"\n          id=\"slack-channel\"\n          aria-describedby=\"slack-channel-help\"\n          data-test-id=\"slack-channel\"\n          value={formValues.slackChannel}\n          onChange={(e) =>\n            dispatchFormChange({\n              type: 'setFormValues',\n              payload: { slackChannel: e.target.value },\n            })\n          }\n        />\n        <div className=\"help-block\" id=\"slack-channel-help\">\n          The Slack channel or user to send notifications to.\n        </div>\n      </div>\n      <div className=\"form-group\">\n        <ExpandCollapse\n          textCollapsed=\"Show advanced configuration\"\n          textExpanded=\"Hide advanced configuration\"\n        >\n          <div className=\"co-form-subsection\">\n            <div className=\"form-group\">\n              <SendResolvedAlertsCheckbox\n                formField=\"slack_send_resolved\"\n                formValues={formValues}\n                dispatchFormChange={dispatchFormChange}\n              />\n            </div>\n            <div className=\"form-group\">\n              <label className=\"control-label\" htmlFor=\"slack-icon-type\">\n                Icon &nbsp;\n                <RadioInput\n                  title=\"URL\"\n                  name=\"slackIconType\"\n                  id=\"slack-icon-type\"\n                  value=\"url\"\n                  onChange={(e) =>\n                    dispatchFormChange({\n                      type: 'setFormValues',\n                      payload: { slackIconType: e.target.value },\n                    })\n                  }\n                  checked={formValues.slackIconType === 'url'}\n                  inline\n                />\n                <RadioInput\n                  title=\"Emoji\"\n                  name=\"slackIconType\"\n                  value=\"emoji\"\n                  data-test-id=\"slack-icon-type-emoji\"\n                  onChange={(e) =>\n                    dispatchFormChange({\n                      type: 'setFormValues',\n                      payload: { slackIconType: e.target.value },\n                    })\n                  }\n                  checked={formValues.slackIconType === 'emoji'}\n                  inline\n                />\n              </label>\n              {formValues.slackIconType === 'url' && (\n                <>\n                  <input\n                    className=\"pf-c-form-control\"\n                    type=\"text\"\n                    aria-describedby=\"slack-icon-url-help\"\n                    aria-label=\"The URL of the icon.\"\n                    data-test-id=\"slack-icon-url\"\n                    value={formValues.slack_icon_url}\n                    onChange={(e) =>\n                      dispatchFormChange({\n                        type: 'setFormValues',\n                        payload: { slack_icon_url: e.target.value },\n                      })\n                    }\n                  />\n                  <div className=\"help-block\" id=\"slack-icon-url-help\">\n                    The URL of the icon.\n                  </div>\n                </>\n              )}\n              {formValues.slackIconType === 'emoji' && (\n                <>\n                  <input\n                    className=\"pf-c-form-control\"\n                    type=\"text\"\n                    aria-describedby=\"slack-icon-emoji-help\"\n                    aria-label=\"An emoji code to use in place of the default icon.\"\n                    name=\"slackIconEmoji\"\n                    data-test-id=\"slack-icon-emoji\"\n                    value={formValues.slack_icon_emoji}\n                    onChange={(e) =>\n                      dispatchFormChange({\n                        type: 'setFormValues',\n                        payload: { slack_icon_emoji: e.target.value },\n                      })\n                    }\n                  />\n                  <div className=\"help-block\" id=\"slack-icon-emoji-help\">\n                    An{' '}\n                    <ExternalLink\n                      href=\"https://www.webfx.com/tools/emoji-cheat-sheet/\"\n                      text=\"emoji code\"\n                    />{' '}\n                    to use in place of the default icon.\n                  </div>\n                </>\n              )}\n            </div>\n            <div className=\"form-group\">\n              <label className=\"control-label\" htmlFor=\"slack-username\">\n                Username\n              </label>\n              <input\n                className=\"pf-c-form-control\"\n                type=\"text\"\n                aria-describedby=\"slack-username-help\"\n                id=\"slack-username\"\n                data-test-id=\"slack-username\"\n                value={formValues.slack_username}\n                onChange={(e) =>\n                  dispatchFormChange({\n                    type: 'setFormValues',\n                    payload: { slack_username: e.target.value },\n                  })\n                }\n              />\n              <div className=\"help-block\" id=\"slack-username-help\">\n                The displayed username.\n              </div>\n            </div>\n            <div className=\"form-group\">\n              <div className=\"checkbox\">\n                <label className=\"control-label\" htmlFor=\"slack-link-names\">\n                  <input\n                    type=\"checkbox\"\n                    id=\"slack-link-names\"\n                    data-test-id=\"slack-link-names\"\n                    aria-describedby=\"slack-link-names-help\"\n                    onChange={(e) =>\n                      dispatchFormChange({\n                        type: 'setFormValues',\n                        payload: { slack_link_names: e.target.checked },\n                      })\n                    }\n                    checked={formValues.slack_link_names}\n                  />\n                  Link Names\n                </label>\n              </div>\n              <div className=\"help-block\" id=\"slack-link-names-help\">\n                Find and link channel names and usernames.\n              </div>\n            </div>\n          </div>\n        </ExpandCollapse>\n      </div>\n    </div>\n  );\n};\n\nexport const getInitialValues = (globals, receiverConfig) => {\n  const initValues: any = {\n    slackSaveAsDefault: false,\n    slackChannel: _.get(receiverConfig, 'channel'),\n  };\n\n  initValues.slackIconType = _.has(receiverConfig, 'icon_emoji') ? 'emoji' : 'url';\n\n  GLOBAL_FIELDS.forEach((fld) => {\n    const configFieldName = fld.substring(fld.indexOf('_') + 1); //strip off leading 'slack_' prefix\n    initValues[fld] = _.get(receiverConfig, configFieldName, globals[fld]);\n  });\n\n  return initValues;\n};\n\nexport const isFormInvalid = (formValues): boolean => {\n  return !formValues.slack_api_url || !formValues.slackChannel;\n};\n\nexport const updateGlobals = (globals, formValues) => {\n  const updatedGlobals = {};\n  if (formValues.slackSaveAsDefault && formValues.slack_api_url) {\n    _.set(updatedGlobals, 'slack_api_url', formValues.slack_api_url);\n  }\n  return updatedGlobals;\n};\n\nexport const createReceiverConfig = (globals, formValues, receiverConfig) => {\n  _.set(receiverConfig, 'channel', formValues.slackChannel);\n\n  // Only save these props in receiverConfig if different from global\n  GLOBAL_FIELDS.forEach((fld) => {\n    const formValue = formValues[fld];\n    const configFieldName = fld.substring(fld.indexOf('_') + 1); //strip off leading 'slack_' prefix\n    if (formValue !== globals[fld]) {\n      if (fld === 'slack_api_url' && formValues.slackSaveAsDefault) {\n        _.unset(receiverConfig, 'api_url'); // saving as global so unset in config\n      } else {\n        _.set(receiverConfig, configFieldName, formValue);\n      }\n    } else {\n      _.unset(receiverConfig, configFieldName); // equals global, unset in config so global is used\n    }\n  });\n\n  _.unset(receiverConfig, formValues.slackIconType === 'url' ? 'icon_emoji' : 'icon_url');\n\n  return receiverConfig;\n};\n"]}]}