{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/resource-dropdown.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/resource-dropdown.tsx","mtime":1615298458740},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { connect } from 'react-redux';\nimport { OrderedMap, Set as ImmutableSet } from 'immutable';\nimport * as classNames from 'classnames';\nimport * as fuzzy from 'fuzzysearch';\nimport { Dropdown, ResourceIcon } from './utils';\nimport { apiVersionForReference, modelFor, referenceForModel } from '../module/k8s';\nimport { Badge, Checkbox } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n// Blacklist known duplicate resources.\nconst blacklistGroups = ImmutableSet([\n    // Prefer rbac.authorization.k8s.io/v1, which has the same resources.\n    'authorization.openshift.io',\n]);\nconst blacklistResources = ImmutableSet([\n    // Prefer core/v1\n    'events.k8s.io/v1beta1.Event',\n]);\nconst DropdownItem = ({ model, showGroup, checked }) => (React.createElement(React.Fragment, null,\n    React.createElement(\"span\", { className: 'co-resource-item' },\n        React.createElement(Checkbox, { tabIndex: -1, id: `${model.apiGroup}:${model.apiVersion}:${model.kind}`, checked: checked }),\n        React.createElement(\"span\", { className: \"co-resource-icon--fixed-width\" },\n            React.createElement(ResourceIcon, { kind: referenceForModel(model) })),\n        React.createElement(\"span\", { className: \"co-resource-item__resource-name\" },\n            React.createElement(\"span\", null,\n                model.kind,\n                model.badge && React.createElement(\"span\", { className: \"co-resource-item__tech-dev-preview\" }, model.badge)),\n            showGroup && (React.createElement(\"span\", { className: \"co-resource-item__resource-api text-muted co-truncate show co-nowrap small\" },\n                model.apiGroup || 'core',\n                \"/\",\n                model.apiVersion))))));\nconst DropdownResourceItem = ({ name, checked, kind }) => (React.createElement(React.Fragment, null,\n    React.createElement(\"span\", { className: 'co-resource-item' },\n        React.createElement(Checkbox, { tabIndex: -1, id: name, checked: checked }),\n        React.createElement(\"span\", { className: \"co-resource-icon--fixed-width\" },\n            React.createElement(ResourceIcon, { kind: kind })),\n        React.createElement(\"span\", { className: \"co-resource-item__resource-name\" },\n            React.createElement(\"span\", null, name)))));\nconst ResourceListDropdown_ = props => {\n    const { selected, onChange, allModels, showAll, className, preferredVersions, type } = props;\n    const { t } = useTranslation();\n    const resources = allModels\n        .filter(({ apiGroup, apiVersion, kind, verbs }) => {\n        // Remove blacklisted items.\n        if (blacklistGroups.has(apiGroup) || blacklistResources.has(`${apiGroup}/${apiVersion}.${kind}`)) {\n            return false;\n        }\n        // Only show resources that can be listed.\n        if (!_.isEmpty(verbs) && !_.includes(verbs, 'list')) {\n            return false;\n        }\n        // Only show preferred version for resources in the same API group.\n        const preferred = (m) => preferredVersions.some(v => v.groupVersion === apiVersionForReference(referenceForModel(m)));\n        const sameGroupKind = (m) => m.kind === kind && m.apiGroup === apiGroup && m.apiVersion !== apiVersion;\n        return !allModels.find(m => sameGroupKind(m) && preferred(m));\n    })\n        .toOrderedMap()\n        .sortBy(({ kind, apiGroup }) => `${kind} ${apiGroup}`);\n    // Track duplicate names so we know when to show the group.\n    const kinds = resources.groupBy(m => m.kind);\n    const isDup = kind => kinds.get(kind).size > 1;\n    const isKindSelected = (kind) => {\n        return _.includes(selected, kind);\n    };\n    // Create dropdown items for each resource.\n    const items = resources.map(model => React.createElement(DropdownItem, { key: referenceForModel(model), model: model, showGroup: isDup(model.kind), checked: isKindSelected(referenceForModel(model)) }));\n    // Add an \"All\" item to the top if `showAll`.\n    const allItems = (showAll\n        ? OrderedMap({\n            All: (React.createElement(React.Fragment, null,\n                React.createElement(\"span\", { className: \"co-resource-item\" },\n                    React.createElement(Checkbox, { id: \"all-resources\", isChecked: isKindSelected('All') }),\n                    React.createElement(\"span\", { className: \"co-resource-icon--fixed-width\" },\n                        React.createElement(ResourceIcon, { kind: \"All\" })),\n                    React.createElement(\"span\", { className: \"co-resource-item__resource-name\" }, \"All Resources\")))),\n        }).concat(items)\n        : items).toJS();\n    const autocompleteFilter = (text, item) => {\n        const { model } = item.props;\n        if (!model) {\n            return false;\n        }\n        return fuzzy(_.toLower(text), _.toLower(model.kind));\n    };\n    const handleSelected = (value) => {\n        value === 'All' ? onChange('All') : onChange(referenceForModel(modelFor(value)));\n    };\n    return (React.createElement(Dropdown, { menuClassName: \"dropdown-menu--text-wrap\", className: classNames('co-type-selector', className), items: allItems, title: React.createElement(\"div\", { key: \"title-resource\" },\n            t('COMMON:MSG_COMMON_FILTER_1'),\n            \" \",\n            React.createElement(Badge, { isRead: true }, selected.length === 1 && selected[0] === 'All' ? 'All' : selected.length)), onChange: handleSelected, autocompleteFilter: autocompleteFilter, autocompletePlaceholder: t('COMMON:MSG_COMMON_FILTER_2'), type: type }));\n};\nconst resourceListDropdownStateToProps = ({ k8s }) => ({\n    allModels: k8s.getIn(['RESOURCES', 'models']),\n    preferredVersions: k8s.getIn(['RESOURCES', 'preferredVersions']),\n});\nexport const ResourceListDropdown = connect(resourceListDropdownStateToProps)(ResourceListDropdown_);\nexport const RegistryListDropdown_ = props => {\n    const { selected, onChange, /*setAllData, */ allData, showAll, className, type } = props;\n    const getName = map => {\n        return map.get('metadata').get('name');\n    };\n    const resources = [];\n    for (let item of Array.from(allData)) {\n        resources.push(getName(item[1]));\n    }\n    const isResourceSelected = (resource) => {\n        return _.includes(selected, resource);\n    };\n    const items = allData.map(resource => React.createElement(DropdownResourceItem, { key: getName(resource), name: getName(resource), checked: isResourceSelected(getName(resource)), kind: \"Registry\" }));\n    const allItems = (showAll\n        ? OrderedMap({\n            All: (React.createElement(React.Fragment, null,\n                React.createElement(\"span\", { className: \"co-resource-item\" },\n                    React.createElement(Checkbox, { id: \"all-resources\", isChecked: isResourceSelected('All') }),\n                    React.createElement(\"span\", { className: \"co-resource-icon--fixed-width\" },\n                        React.createElement(ResourceIcon, { kind: \"All\" })),\n                    React.createElement(\"span\", { className: \"co-resource-item__resource-name\" }, \"All Registries\")))),\n        }).concat(items)\n        : items).toJS();\n    const autocompleteFilter = (text, item) => {\n        const { model } = item.props;\n        if (!model) {\n            return false;\n        }\n        return fuzzy(_.toLower(text), _.toLower(model.kind));\n    };\n    const handleSelected = (value) => {\n        if (value === 'All') {\n            onChange('All');\n            // setAllData(resources);\n        }\n        else {\n            onChange(value.split(')-')[1]);\n        }\n    };\n    return (React.createElement(Dropdown, { menuClassName: \"dropdown-menu--text-wrap\", className: classNames('co-type-selector', className), items: allItems, title: React.createElement(\"div\", { key: \"title-resource\" },\n            \"Registries \",\n            React.createElement(Badge, { isRead: true }, selected.length === 1 && selected[0] === 'All' ? 'All' : selected.length)), onChange: handleSelected, autocompleteFilter: autocompleteFilter, autocompletePlaceholder: \"Select Registry\", type: type }));\n};\nconst registryListDropdownStateToProps = ({ k8s, UI }) => {\n    let namespace = UI.getIn(['activeNamespace']);\n    let registryKey = 'tmax.io~v1~Registry';\n    if (namespace !== '#ALL_NS#') {\n        registryKey += `---{\"ns\":\"${namespace}\"}`;\n    }\n    return {\n        allData: k8s.getIn([registryKey, 'data']),\n    };\n};\nexport const RegistryListDropdown = connect(registryListDropdownStateToProps)(RegistryListDropdown_);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/resource-dropdown.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/resource-dropdown.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { connect } from 'react-redux';\nimport { Map as ImmutableMap, OrderedMap, Set as ImmutableSet } from 'immutable';\nimport * as classNames from 'classnames';\nimport * as fuzzy from 'fuzzysearch';\n\nimport { Dropdown, ResourceIcon } from './utils';\nimport { apiVersionForReference, K8sKind, K8sResourceKindReference, modelFor, referenceForModel } from '../module/k8s';\nimport { Badge, Checkbox } from '@patternfly/react-core';\nimport { useTranslation } from 'react-i18next';\n\n// Blacklist known duplicate resources.\nconst blacklistGroups = ImmutableSet([\n  // Prefer rbac.authorization.k8s.io/v1, which has the same resources.\n  'authorization.openshift.io',\n]);\n\nconst blacklistResources = ImmutableSet([\n  // Prefer core/v1\n  'events.k8s.io/v1beta1.Event',\n]);\n\nconst DropdownItem: React.SFC<DropdownItemProps> = ({ model, showGroup, checked }) => (\n  <>\n    <span className={'co-resource-item'}>\n      <Checkbox tabIndex={-1} id={`${model.apiGroup}:${model.apiVersion}:${model.kind}`} checked={checked} />\n      <span className=\"co-resource-icon--fixed-width\">\n        <ResourceIcon kind={referenceForModel(model)} />\n      </span>\n      <span className=\"co-resource-item__resource-name\">\n        <span>\n          {model.kind}\n          {model.badge && <span className=\"co-resource-item__tech-dev-preview\">{model.badge}</span>}\n        </span>\n        {showGroup && (\n          <span className=\"co-resource-item__resource-api text-muted co-truncate show co-nowrap small\">\n            {model.apiGroup || 'core'}/{model.apiVersion}\n          </span>\n        )}\n      </span>\n    </span>\n  </>\n);\n\nconst DropdownResourceItem: React.SFC<DropdownResourceItemProps> = ({ name, checked, kind }) => (\n  <>\n    <span className={'co-resource-item'}>\n      <Checkbox tabIndex={-1} id={name} checked={checked} />\n      <span className=\"co-resource-icon--fixed-width\">\n        <ResourceIcon kind={kind} />\n      </span>\n      <span className=\"co-resource-item__resource-name\">\n        <span>{name}</span>\n      </span>\n    </span>\n  </>\n);\n\nconst ResourceListDropdown_: React.SFC<ResourceListDropdownProps> = props => {\n  const { selected, onChange, allModels, showAll, className, preferredVersions, type } = props;\n  const { t } = useTranslation();\n\n  const resources = allModels\n    .filter(({ apiGroup, apiVersion, kind, verbs }) => {\n      // Remove blacklisted items.\n      if (blacklistGroups.has(apiGroup) || blacklistResources.has(`${apiGroup}/${apiVersion}.${kind}`)) {\n        return false;\n      }\n\n      // Only show resources that can be listed.\n      if (!_.isEmpty(verbs) && !_.includes(verbs, 'list')) {\n        return false;\n      }\n\n      // Only show preferred version for resources in the same API group.\n      const preferred = (m: K8sKind) => preferredVersions.some(v => v.groupVersion === apiVersionForReference(referenceForModel(m)));\n      const sameGroupKind = (m: K8sKind) => m.kind === kind && m.apiGroup === apiGroup && m.apiVersion !== apiVersion;\n\n      return !allModels.find(m => sameGroupKind(m) && preferred(m));\n    })\n    .toOrderedMap()\n    .sortBy(({ kind, apiGroup }) => `${kind} ${apiGroup}`);\n\n  // Track duplicate names so we know when to show the group.\n  const kinds = resources.groupBy(m => m.kind);\n  const isDup = kind => kinds.get(kind).size > 1;\n\n  const isKindSelected = (kind: string) => {\n    return _.includes(selected, kind);\n  };\n  // Create dropdown items for each resource.\n  const items = resources.map(model => <DropdownItem key={referenceForModel(model)} model={model} showGroup={isDup(model.kind)} checked={isKindSelected(referenceForModel(model))} />) as OrderedMap<string, JSX.Element>;\n  // Add an \"All\" item to the top if `showAll`.\n  const allItems = (showAll\n    ? OrderedMap({\n        All: (\n          <>\n            <span className=\"co-resource-item\">\n              <Checkbox id=\"all-resources\" isChecked={isKindSelected('All')} />\n              <span className=\"co-resource-icon--fixed-width\">\n                <ResourceIcon kind=\"All\" />\n              </span>\n              <span className=\"co-resource-item__resource-name\">All Resources</span>\n            </span>\n          </>\n        ),\n      }).concat(items)\n    : items\n  ).toJS() as { [s: string]: JSX.Element };\n\n  const autocompleteFilter = (text, item) => {\n    const { model } = item.props;\n    if (!model) {\n      return false;\n    }\n\n    return fuzzy(_.toLower(text), _.toLower(model.kind));\n  };\n\n  const handleSelected = (value: string) => {\n    value === 'All' ? onChange('All') : onChange(referenceForModel(modelFor(value)));\n  };\n\n  return (\n    <Dropdown\n      menuClassName=\"dropdown-menu--text-wrap\"\n      className={classNames('co-type-selector', className)}\n      items={allItems}\n      title={\n        <div key=\"title-resource\">\n          {t('COMMON:MSG_COMMON_FILTER_1')} <Badge isRead>{selected.length === 1 && selected[0] === 'All' ? 'All' : selected.length}</Badge>\n        </div>\n      }\n      onChange={handleSelected}\n      autocompleteFilter={autocompleteFilter}\n      autocompletePlaceholder={t('COMMON:MSG_COMMON_FILTER_2')}\n      type={type}\n    />\n  );\n};\n\nconst resourceListDropdownStateToProps = ({ k8s }) => ({\n  allModels: k8s.getIn(['RESOURCES', 'models']),\n  preferredVersions: k8s.getIn(['RESOURCES', 'preferredVersions']),\n});\n\nexport const ResourceListDropdown = connect(resourceListDropdownStateToProps)(ResourceListDropdown_);\n\nexport const RegistryListDropdown_: React.SFC<RegistryListDropdownProps> = props => {\n  const { selected, onChange, /*setAllData, */ allData, showAll, className, type } = props;\n\n  const getName = map => {\n    return map.get('metadata').get('name');\n  };\n\n  const resources = [];\n  for (let item of Array.from(allData)) {\n    resources.push(getName(item[1]));\n  }\n\n  const isResourceSelected = (resource: string) => {\n    return _.includes(selected, resource);\n  };\n\n  const items = allData.map(resource => <DropdownResourceItem key={getName(resource)} name={getName(resource)} checked={isResourceSelected(getName(resource))} kind=\"Registry\" />) as OrderedMap<string, JSX.Element>;\n\n  const allItems = (showAll\n    ? OrderedMap({\n        All: (\n          <>\n            <span className=\"co-resource-item\">\n              <Checkbox id=\"all-resources\" isChecked={isResourceSelected('All')} />\n              <span className=\"co-resource-icon--fixed-width\">\n                <ResourceIcon kind=\"All\" />\n              </span>\n              <span className=\"co-resource-item__resource-name\">All Registries</span>\n            </span>\n          </>\n        ),\n      }).concat(items)\n    : items\n  ).toJS() as { [s: string]: JSX.Element };\n\n  const autocompleteFilter = (text, item) => {\n    const { model } = item.props;\n    if (!model) {\n      return false;\n    }\n\n    return fuzzy(_.toLower(text), _.toLower(model.kind));\n  };\n\n  const handleSelected = (value: string) => {\n    if (value === 'All') {\n      onChange('All');\n      // setAllData(resources);\n    } else {\n      onChange(value.split(')-')[1]);\n    }\n  };\n\n  return (\n    <Dropdown\n      menuClassName=\"dropdown-menu--text-wrap\"\n      className={classNames('co-type-selector', className)}\n      items={allItems}\n      title={\n        <div key=\"title-resource\">\n          Registries <Badge isRead>{selected.length === 1 && selected[0] === 'All' ? 'All' : selected.length}</Badge>\n        </div>\n      }\n      onChange={handleSelected}\n      autocompleteFilter={autocompleteFilter}\n      autocompletePlaceholder=\"Select Registry\"\n      type={type}\n    />\n  );\n};\n\nconst registryListDropdownStateToProps = ({ k8s, UI }) => {\n  let namespace = UI.getIn(['activeNamespace']);\n  let registryKey = 'tmax.io~v1~Registry';\n  if (namespace !== '#ALL_NS#') {\n    registryKey += `---{\"ns\":\"${namespace}\"}`;\n  }\n  return {\n    allData: k8s.getIn([registryKey, 'data']),\n  };\n};\n\nexport const RegistryListDropdown = connect(registryListDropdownStateToProps)(RegistryListDropdown_);\n\nexport type RegistryListDropdownProps = {\n  selected: K8sResourceKindReference[];\n  onChange: (value: string) => void;\n  setAllData: (allData: string[]) => void;\n  allData: any;\n  className?: string;\n  id?: string;\n  showAll?: boolean;\n  type?: string;\n};\n\nexport type ResourceListDropdownProps = {\n  selected: K8sResourceKindReference[];\n  onChange: (value: string) => void;\n  allModels: ImmutableMap<K8sResourceKindReference, K8sKind>;\n  preferredVersions: { groupVersion: string; version: string }[];\n  className?: string;\n  id?: string;\n  showAll?: boolean;\n  type?: string;\n};\n\ntype DropdownItemProps = {\n  model: K8sKind;\n  showGroup?: boolean;\n  checked?: boolean;\n};\n\ntype DropdownResourceItemProps = {\n  name: string;\n  checked?: boolean;\n  kind: string;\n};\n"]}]}