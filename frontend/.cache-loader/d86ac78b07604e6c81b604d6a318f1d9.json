{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/swagger.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/swagger.ts","mtime":1616735742510},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as _ from 'lodash-es';\nimport { STORAGE_PREFIX } from '@console/shared/src/constants';\nimport { coFetchJSON } from '../../co-fetch';\nimport { referenceForModel } from './';\nconst SWAGGER_LOCAL_STORAGE_KEY = `${STORAGE_PREFIX}/swagger-definitions`;\nexport const getDefinitionKey = _.memoize((model, definitions) => {\n    return _.findKey(definitions, (def) => {\n        return _.some(def['x-kubernetes-group-version-kind'], ({ group, version, kind }) => {\n            return ((model.apiGroup || '') === (group || '') &&\n                model.apiVersion === version &&\n                model.kind === kind);\n        });\n    });\n}, referenceForModel);\n// Cache parsed swagger to avoid reparsing the JSON each call.\nlet swagger;\nexport const getStoredSwagger = () => {\n    if (swagger) {\n        return swagger;\n    }\n    const json = window.localStorage.getItem(SWAGGER_LOCAL_STORAGE_KEY);\n    if (!json) {\n        return null;\n    }\n    try {\n        swagger = JSON.parse(json);\n        return swagger;\n    }\n    catch (e) {\n        // eslint-disable-next-line no-console\n        console.error('Could not parse swagger JSON.', e);\n        return null;\n    }\n};\nconst storeSwagger = (definitions) => {\n    // Only store definitions to reduce the document size.\n    const json = JSON.stringify(definitions);\n    window.localStorage.setItem(SWAGGER_LOCAL_STORAGE_KEY, json);\n    swagger = definitions;\n};\nexport const fetchSwagger = () => __awaiter(void 0, void 0, void 0, function* () {\n    try {\n        const response = yield coFetchJSON('api/kubernetes/openapi/v2');\n        if (!response.definitions) {\n            // eslint-disable-next-line no-console\n            console.error('Definitions missing in OpenAPI response.');\n            return null;\n        }\n        storeSwagger(response.definitions);\n        return response.definitions;\n    }\n    catch (e) {\n        // eslint-disable-next-line no-console\n        console.error('Could not get OpenAPI definitions', e);\n        return null;\n    }\n});\nexport const definitionFor = _.memoize((model) => {\n    const allDefinitions = getStoredSwagger();\n    if (!allDefinitions) {\n        return null;\n    }\n    const key = getDefinitionKey(model, allDefinitions);\n    return _.get(allDefinitions, key);\n}, referenceForModel);\nconst getRef = (definition) => {\n    const ref = definition.$ref || _.get(definition, 'items.$ref');\n    const re = /^#\\/definitions\\//;\n    // Only follow JSON pointers, not external URI references.\n    return ref && re.test(ref) ? ref.replace(re, '') : null;\n};\n// Get the path in the swagger document to additional property details.\n// This can be\n// - A reference to another top-level definition\n// - Inline property declartions\n// - Inline property declartions for array items\nexport const getSwaggerPath = (allProperties, currentPath, name, followRef) => {\n    const nextPath = [...currentPath, 'properties', name];\n    const definition = _.get(allProperties, nextPath);\n    if (!definition) {\n        return null;\n    }\n    const ref = getRef(definition);\n    return followRef && ref ? [ref] : nextPath;\n};\nconst findDefinition = (kindObj, propertyPath) => {\n    const allDefinitions = getStoredSwagger();\n    if (!allDefinitions) {\n        return null;\n    }\n    const rootPath = getDefinitionKey(kindObj, allDefinitions);\n    const path = propertyPath.reduce((currentPath, nextProperty, i) => {\n        if (!currentPath) {\n            return null;\n        }\n        // Don't follow the last reference since the description is not as good.\n        const followRef = i !== propertyPath.length - 1;\n        return getSwaggerPath(allDefinitions, currentPath, nextProperty, followRef);\n    }, [rootPath]);\n    return path ? _.get(allDefinitions, path) : null;\n};\nexport const getPropertyDescription = (kindObj, propertyPath) => {\n    const path = _.toPath(propertyPath);\n    const definition = findDefinition(kindObj, path);\n    return definition ? definition.description : null;\n};\nexport const getResourceDescription = _.memoize((kindObj) => {\n    const allDefinitions = getStoredSwagger();\n    if (!allDefinitions) {\n        return null;\n    }\n    const key = getDefinitionKey(kindObj, allDefinitions);\n    return _.get(allDefinitions, [key, 'description']);\n}, referenceForModel);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/swagger.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/swagger.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\n\nimport { STORAGE_PREFIX } from '@console/shared/src/constants';\nimport { coFetchJSON } from '../../co-fetch';\nimport { K8sKind, referenceForModel } from './';\n\nconst SWAGGER_LOCAL_STORAGE_KEY = `${STORAGE_PREFIX}/swagger-definitions`;\n\nexport const getDefinitionKey = _.memoize(\n  (model: K8sKind, definitions: SwaggerDefinitions): string => {\n    return _.findKey(definitions, (def: SwaggerDefinition) => {\n      return _.some(def['x-kubernetes-group-version-kind'], ({ group, version, kind }) => {\n        return (\n          (model.apiGroup || '') === (group || '') &&\n          model.apiVersion === version &&\n          model.kind === kind\n        );\n      });\n    });\n  },\n  referenceForModel,\n);\n\n// Cache parsed swagger to avoid reparsing the JSON each call.\nlet swagger: SwaggerDefinitions;\nexport const getStoredSwagger = (): SwaggerDefinitions => {\n  if (swagger) {\n    return swagger;\n  }\n  const json = window.localStorage.getItem(SWAGGER_LOCAL_STORAGE_KEY);\n  if (!json) {\n    return null;\n  }\n  try {\n    swagger = JSON.parse(json);\n    return swagger;\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error('Could not parse swagger JSON.', e);\n    return null;\n  }\n};\n\nconst storeSwagger = (definitions: SwaggerDefinitions) => {\n  // Only store definitions to reduce the document size.\n  const json = JSON.stringify(definitions);\n  window.localStorage.setItem(SWAGGER_LOCAL_STORAGE_KEY, json);\n  swagger = definitions;\n};\n\nexport const fetchSwagger = async (): Promise<SwaggerDefinitions> => {\n  try {\n    const response: SwaggerAPISpec = await coFetchJSON('api/kubernetes/openapi/v2');\n    if (!response.definitions) {\n      // eslint-disable-next-line no-console\n      console.error('Definitions missing in OpenAPI response.');\n      return null;\n    }\n    storeSwagger(response.definitions);\n    return response.definitions;\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error('Could not get OpenAPI definitions', e);\n    return null;\n  }\n};\n\nexport const definitionFor = _.memoize((model: K8sKind): SwaggerDefinition => {\n  const allDefinitions: SwaggerDefinitions = getStoredSwagger();\n  if (!allDefinitions) {\n    return null;\n  }\n  const key = getDefinitionKey(model, allDefinitions);\n  return _.get(allDefinitions, key);\n}, referenceForModel);\n\nconst getRef = (definition: SwaggerDefinition): string => {\n  const ref = definition.$ref || _.get(definition, 'items.$ref');\n  const re = /^#\\/definitions\\//;\n  // Only follow JSON pointers, not external URI references.\n  return ref && re.test(ref) ? ref.replace(re, '') : null;\n};\n\n// Get the path in the swagger document to additional property details.\n// This can be\n// - A reference to another top-level definition\n// - Inline property declartions\n// - Inline property declartions for array items\nexport const getSwaggerPath = (\n  allProperties: SwaggerDefinitions,\n  currentPath: string[],\n  name: string,\n  followRef: boolean,\n): string[] => {\n  const nextPath = [...currentPath, 'properties', name];\n  const definition = _.get(allProperties, nextPath) as SwaggerDefinition;\n  if (!definition) {\n    return null;\n  }\n  const ref = getRef(definition);\n  return followRef && ref ? [ref] : nextPath;\n};\n\nconst findDefinition = (kindObj: K8sKind, propertyPath: string[]): SwaggerDefinition => {\n  const allDefinitions: SwaggerDefinitions = getStoredSwagger();\n  if (!allDefinitions) {\n    return null;\n  }\n\n  const rootPath = getDefinitionKey(kindObj, allDefinitions);\n  const path = propertyPath.reduce(\n    (currentPath: string[], nextProperty: string, i: number): string[] => {\n      if (!currentPath) {\n        return null;\n      }\n      // Don't follow the last reference since the description is not as good.\n      const followRef = i !== propertyPath.length - 1;\n      return getSwaggerPath(allDefinitions, currentPath, nextProperty, followRef);\n    },\n    [rootPath],\n  );\n\n  return path ? (_.get(allDefinitions, path) as SwaggerDefinition) : null;\n};\n\nexport const getPropertyDescription = (\n  kindObj: K8sKind,\n  propertyPath: string | string[],\n): string => {\n  const path: string[] = _.toPath(propertyPath);\n  const definition = findDefinition(kindObj, path);\n  return definition ? definition.description : null;\n};\n\nexport const getResourceDescription = _.memoize((kindObj: K8sKind): string => {\n  const allDefinitions: SwaggerDefinitions = getStoredSwagger();\n  if (!allDefinitions) {\n    return null;\n  }\n  const key = getDefinitionKey(kindObj, allDefinitions);\n  return _.get(allDefinitions, [key, 'description']);\n}, referenceForModel);\n\nexport type SwaggerDefinition = {\n  description?: string;\n  type?: string;\n  enum?: string[];\n  $ref?: string;\n  items?: SwaggerDefinition;\n  required?: string[];\n  properties?: {\n    [prop: string]: SwaggerDefinition;\n  };\n};\n\nexport type SwaggerDefinitions = {\n  [name: string]: SwaggerDefinition;\n};\n\nexport type SwaggerAPISpec = {\n  swagger: string;\n  info: { title: string; version: string };\n  paths: { [path: string]: any };\n  definitions: SwaggerDefinitions;\n};\n"]}]}