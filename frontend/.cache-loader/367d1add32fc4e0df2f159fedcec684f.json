{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/row-filter.jsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/row-filter.jsx","mtime":1615298458740},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport * as classNames from 'classnames';\nimport { Button } from '@patternfly/react-core';\nimport { filterList } from '../actions/k8s';\nimport { getQueryArgument, setQueryArgument } from './utils';\nexport const CheckBox = ({ title, active, number, toggle }) => {\n    const klass = classNames('row-filter__box', {\n        'row-filter__box--active': active,\n        'row-filter__box--empty': !number,\n    });\n    return (React.createElement(\"a\", { href: \"#\", onClick: toggle, className: klass },\n        React.createElement(\"span\", { className: \"row-filter__number-bubble\" }, number),\n        title));\n};\nexport const CheckBoxControls = ({ allSelected, itemCount, selectedCount, onSelectAll, children, }) => (React.createElement(\"div\", { className: \"row\" },\n    React.createElement(\"div\", { className: \"col-xs-12\" },\n        React.createElement(\"div\", { className: \"row-filter\" },\n            children,\n            React.createElement(\"div\", { className: \"co-m-row-filter__controls\" },\n                React.createElement(Button, { className: \"co-m-row-filter__selector\", disabled: allSelected, type: \"button\", onClick: onSelectAll, variant: \"link\" }, \"Select all filters\"),\n                React.createElement(\"span\", { className: \"co-m-row-filter__items\" },\n                    itemCount === selectedCount ? (itemCount) : (React.createElement(React.Fragment, null,\n                        selectedCount,\n                        \" of \",\n                        itemCount)),\n                    ' ',\n                    \"Item\",\n                    itemCount !== 1 && 's'))))));\nexport const storagePrefix = 'rowFilter-';\nclass CheckBoxes_ extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = { selected: [] };\n        this.selectAll = this.selectAll.bind(this);\n        this.toggle = this.toggle.bind(this);\n    }\n    get storageKey() {\n        return `${storagePrefix}${this.props.type}`;\n    }\n    componentDidMount() {\n        let selected;\n        try {\n            selected = getQueryArgument(this.storageKey).split(',');\n        }\n        catch (ignored) {\n            // ignore\n        }\n        if (_.isEmpty(selected) || !_.isArray(selected)) {\n            selected = this.props.selected || [];\n        }\n        const allSelected = _.isEmpty(_.xor(selected, _.map(this.props.items, 'id')));\n        this.setState({ allSelected, selected }, () => this.applyFilter());\n    }\n    componentDidUpdate(prevProps) {\n        if (!_.isEqual(this.props.items, prevProps.items) ||\n            !_.isEqual(this.props.reduxIDs, prevProps.reduxIDs)) {\n            this.applyFilter();\n        }\n    }\n    applyFilter() {\n        var _a, _b;\n        const all = _.map(this.props.items, 'id');\n        const recognized = _.intersection(this.state.selected, all);\n        if (!_.isEmpty(recognized)) {\n            (_b = (_a = this.props).onFilterChange) === null || _b === void 0 ? void 0 : _b.call(_a, recognized);\n            this.props.reduxIDs.forEach((id) => this.props.filterList(id, this.props.type, { selected: new Set(recognized), all }));\n        }\n    }\n    setQueryParameters(selected) {\n        // Ensure something is always active\n        if (!_.isEmpty(selected)) {\n            try {\n                const recognized = _.filter(selected, (id) => _.find(this.props.items, { id }));\n                setQueryArgument(this.storageKey, recognized.join(','));\n            }\n            catch (ignored) {\n                // ignore\n            }\n            const allSelected = _.isEmpty(_.xor(selected, _.map(this.props.items, 'id')));\n            this.setState({ allSelected, selected }, () => this.applyFilter());\n        }\n    }\n    toggle(event, itemId) {\n        event.preventDefault();\n        const selected = _.xor(this.state.selected, [itemId]);\n        this.setQueryParameters(selected);\n    }\n    selectAll() {\n        const selected = _.map(this.props.items, 'id');\n        this.setQueryParameters(selected);\n    }\n    render() {\n        const { items, itemCount } = this.props;\n        const { selected } = this.state;\n        const allSelected = _.every(items, ({ id }) => _.includes(selected, id));\n        const selectedCount = _.reduce(selected, (count, id) => count + (this.props.numbers[id] || 0), 0);\n        return (React.createElement(CheckBoxControls, { allSelected: allSelected, itemCount: itemCount, selectedCount: selectedCount, onSelectAll: this.selectAll }, _.map(items, ({ id, title }) => (React.createElement(CheckBox, { key: id, title: title, number: this.props.numbers[id] || 0, active: _.includes(selected, id), toggle: (event) => this.toggle(event, id) })))));\n    }\n}\n/** @type {React.SFC<{items: Array, itemCount: number, numbers: any, reduxIDs: Array, selected?: Array, type: string, onFilterChange?: (filter: string[]) => void}>} */\nexport const CheckBoxes = connect(null, { filterList })(CheckBoxes_);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/row-filter.jsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/row-filter.jsx"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport * as classNames from 'classnames';\nimport { Button } from '@patternfly/react-core';\n\nimport { filterList } from '../actions/k8s';\nimport { getQueryArgument, setQueryArgument } from './utils';\n\nexport const CheckBox = ({ title, active, number, toggle }) => {\n  const klass = classNames('row-filter__box', {\n    'row-filter__box--active': active,\n    'row-filter__box--empty': !number,\n  });\n\n  return (\n    <a href=\"#\" onClick={toggle} className={klass}>\n      <span className=\"row-filter__number-bubble\">{number}</span>\n      {title}\n    </a>\n  );\n};\n\nexport const CheckBoxControls = ({\n  allSelected,\n  itemCount,\n  selectedCount,\n  onSelectAll,\n  children,\n}) => (\n  <div className=\"row\">\n    <div className=\"col-xs-12\">\n      <div className=\"row-filter\">\n        {children}\n        <div className=\"co-m-row-filter__controls\">\n          <Button\n            className=\"co-m-row-filter__selector\"\n            disabled={allSelected}\n            type=\"button\"\n            onClick={onSelectAll}\n            variant=\"link\"\n          >\n            Select all filters\n          </Button>\n          <span className=\"co-m-row-filter__items\">\n            {itemCount === selectedCount ? (\n              itemCount\n            ) : (\n              <>\n                {selectedCount} of {itemCount}\n              </>\n            )}{' '}\n            Item{itemCount !== 1 && 's'}\n          </span>\n        </div>\n      </div>\n    </div>\n  </div>\n);\n\nexport const storagePrefix = 'rowFilter-';\n\nclass CheckBoxes_ extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { selected: [] };\n    this.selectAll = this.selectAll.bind(this);\n    this.toggle = this.toggle.bind(this);\n  }\n\n  get storageKey() {\n    return `${storagePrefix}${this.props.type}`;\n  }\n\n  componentDidMount() {\n    let selected;\n    try {\n      selected = getQueryArgument(this.storageKey).split(',');\n    } catch (ignored) {\n      // ignore\n    }\n\n    if (_.isEmpty(selected) || !_.isArray(selected)) {\n      selected = this.props.selected || [];\n    }\n\n    const allSelected = _.isEmpty(_.xor(selected, _.map(this.props.items, 'id')));\n\n    this.setState({ allSelected, selected }, () => this.applyFilter());\n  }\n\n  componentDidUpdate(prevProps) {\n    if (\n      !_.isEqual(this.props.items, prevProps.items) ||\n      !_.isEqual(this.props.reduxIDs, prevProps.reduxIDs)\n    ) {\n      this.applyFilter();\n    }\n  }\n\n  applyFilter() {\n    const all = _.map(this.props.items, 'id');\n    const recognized = _.intersection(this.state.selected, all);\n    if (!_.isEmpty(recognized)) {\n      this.props.onFilterChange?.(recognized);\n      this.props.reduxIDs.forEach((id) =>\n        this.props.filterList(id, this.props.type, { selected: new Set(recognized), all }),\n      );\n    }\n  }\n\n  setQueryParameters(selected) {\n    // Ensure something is always active\n    if (!_.isEmpty(selected)) {\n      try {\n        const recognized = _.filter(selected, (id) => _.find(this.props.items, { id }));\n        setQueryArgument(this.storageKey, recognized.join(','));\n      } catch (ignored) {\n        // ignore\n      }\n      const allSelected = _.isEmpty(_.xor(selected, _.map(this.props.items, 'id')));\n      this.setState({ allSelected, selected }, () => this.applyFilter());\n    }\n  }\n\n  toggle(event, itemId) {\n    event.preventDefault();\n    const selected = _.xor(this.state.selected, [itemId]);\n    this.setQueryParameters(selected);\n  }\n\n  selectAll() {\n    const selected = _.map(this.props.items, 'id');\n    this.setQueryParameters(selected);\n  }\n\n  render() {\n    const { items, itemCount } = this.props;\n    const { selected } = this.state;\n    const allSelected = _.every(items, ({ id }) => _.includes(selected, id));\n    const selectedCount = _.reduce(\n      selected,\n      (count, id) => count + (this.props.numbers[id] || 0),\n      0,\n    );\n    return (\n      <CheckBoxControls\n        allSelected={allSelected}\n        itemCount={itemCount}\n        selectedCount={selectedCount}\n        onSelectAll={this.selectAll}\n      >\n        {_.map(items, ({ id, title }) => (\n          <CheckBox\n            key={id}\n            title={title}\n            number={this.props.numbers[id] || 0}\n            active={_.includes(selected, id)}\n            toggle={(event) => this.toggle(event, id)}\n          />\n        ))}\n      </CheckBoxControls>\n    );\n  }\n}\n\n/** @type {React.SFC<{items: Array, itemCount: number, numbers: any, reduxIDs: Array, selected?: Array, type: string, onFilterChange?: (filter: string[]) => void}>} */\nexport const CheckBoxes = connect(null, { filterList })(CheckBoxes_);\n"]}]}