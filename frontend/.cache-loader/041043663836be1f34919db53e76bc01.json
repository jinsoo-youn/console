{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm/vm-wrapper.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm/vm-wrapper.ts","mtime":1615298458670},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["/* eslint-disable lines-between-class-members */\nimport * as _ from 'lodash';\nimport { getLabels } from '@console/shared/src/selectors/common';\nimport { compareOwnerReference } from '@console/shared/src/utils/owner-references';\nimport { K8sResourceWrapper } from '../common/k8s-resource-wrapper';\nimport { getDataVolumeTemplates, getDisks, getInterfaces, getNetworks, getVolumes, isDedicatedCPUPlacement, getNodeSelector, getTolerations, getAffinity, } from '../../../selectors/vm/selectors';\nimport { transformDevices } from '../../../selectors/vm';\nimport { findKeySuffixValue } from '../../../selectors/utils';\nimport { TEMPLATE_FLAVOR_LABEL, TEMPLATE_OS_LABEL, TEMPLATE_WORKLOAD_LABEL, VolumeType, } from '../../../constants/vm';\nimport { VolumeWrapper } from './volume-wrapper';\nimport { VirtualMachineImportModel, VirtualMachineModel } from '../../../models';\nimport { buildOwnerReferenceForModel } from '../../../utils';\nexport class VMWrapper extends K8sResourceWrapper {\n    constructor(vm, copy = false) {\n        super(VirtualMachineModel, vm, copy);\n        this.hasTemplateLabel = (label) => _.has(this.getTemplateLabels(null), label);\n        this.getOperatingSystem = () => findKeySuffixValue(this.getLabels(), TEMPLATE_OS_LABEL);\n        this.getWorkloadProfile = () => findKeySuffixValue(this.getLabels(), TEMPLATE_WORKLOAD_LABEL);\n        this.getFlavor = () => findKeySuffixValue(this.getLabels(), TEMPLATE_FLAVOR_LABEL);\n        this.getMemory = () => { var _a, _b, _c, _d, _e, _f, _g; return (_g = (_f = (_e = (_d = (_c = (_b = (_a = this.data) === null || _a === void 0 ? void 0 : _a.spec) === null || _b === void 0 ? void 0 : _b.template) === null || _c === void 0 ? void 0 : _c.spec) === null || _d === void 0 ? void 0 : _d.domain) === null || _e === void 0 ? void 0 : _e.resources) === null || _f === void 0 ? void 0 : _f.requests) === null || _g === void 0 ? void 0 : _g.memory; };\n        this.getCPU = () => { var _a, _b, _c, _d, _e; return (_e = (_d = (_c = (_b = (_a = this.data) === null || _a === void 0 ? void 0 : _a.spec) === null || _b === void 0 ? void 0 : _b.template) === null || _c === void 0 ? void 0 : _c.spec) === null || _d === void 0 ? void 0 : _d.domain) === null || _e === void 0 ? void 0 : _e.cpu; };\n        this.getTemplateLabels = (defaultValue = {}) => getLabels(_.get(this.data, 'spec.template'), defaultValue);\n        this.getDataVolumeTemplates = (defaultValue = []) => getDataVolumeTemplates(this.data, defaultValue);\n        this.getNetworkInterfaces = (defaultValue = []) => getInterfaces(this.data, defaultValue);\n        this.getDisks = (defaultValue = []) => getDisks(this.data, defaultValue);\n        this.getCDROMs = () => this.getDisks().filter((device) => !!device.cdrom);\n        this.getNetworks = (defaultValue = []) => getNetworks(this.data, defaultValue);\n        this.getVolumes = (defaultValue = []) => getVolumes(this.data, defaultValue);\n        this.getLabeledDevices = () => transformDevices(this.getDisks(), this.getNetworkInterfaces());\n        this.getNodeSelector = () => getNodeSelector(this.data);\n        this.getTolerations = () => getTolerations(this.data);\n        this.getConfigMaps = () => this.getVolumes().filter((vol) => Object.keys(vol).includes('configMap'));\n        this.getSecrets = () => this.getVolumes().filter((vol) => Object.keys(vol).includes('secret'));\n        this.getServiceAccounts = () => this.getVolumes().filter((vol) => Object.keys(vol).includes('serviceAccount'));\n        this.getDiskSerial = (diskName) => {\n            const disk = this.getDisks().find((d) => d.name === diskName);\n            return disk && Object.keys(disk).includes('serial') && disk.serial;\n        };\n        this.getAffinity = () => getAffinity(this.data);\n        this.isDedicatedCPUPlacement = () => isDedicatedCPUPlacement(this.data);\n        this.getVMImportOwnerReference = () => {\n            return (this.getOwnerReferences() || []).find((reference) => compareOwnerReference(reference, buildOwnerReferenceForModel(VirtualMachineImportModel), true));\n        };\n        this.addTemplateLabel = (key, value) => {\n            if (key) {\n                this.ensurePath('spec.template.metadata.labels');\n                this.data.spec.template.metadata.labels[key] = value;\n            }\n            return this;\n        };\n        this.addTemplateAnnotation = (key, value) => {\n            if (key) {\n                this.ensurePath('spec.template.metadata.annotations');\n                this.data.spec.template.metadata.annotations[key] = value;\n            }\n            return this;\n        };\n        this.setMemory = (value, suffix) => {\n            this.ensurePath('spec.template.spec.domain.resources.requests');\n            this.data.spec.template.spec.domain.resources.requests.memory = suffix\n                ? `${value}${suffix}`\n                : value;\n            return this;\n        };\n        this.setCPU = (cpu) => {\n            var _a, _b, _c, _d;\n            if (cpu) {\n                this.ensurePath('spec.template.spec.domain.cpu', {});\n                const { sockets, cores, threads } = cpu;\n                const vmCPU = this.data.spec.template.spec.domain.cpu;\n                vmCPU.sockets = sockets === undefined ? vmCPU.sockets : sockets;\n                vmCPU.cores = cores === undefined ? vmCPU.cores : cores;\n                vmCPU.threads = threads === undefined ? vmCPU.threads : threads;\n            }\n            else if ((_d = (_c = (_b = (_a = this.data) === null || _a === void 0 ? void 0 : _a.spec) === null || _b === void 0 ? void 0 : _b.template) === null || _c === void 0 ? void 0 : _c.spec) === null || _d === void 0 ? void 0 : _d.domain) {\n                delete this.data.spec.template.spec.domain.cpu;\n            }\n            return this;\n        };\n        this.setRunning = (isRunning) => {\n            this.ensurePath('spec');\n            this.data.spec.running = !!isRunning;\n            return this;\n        };\n        this.setNetworkInterfaces = (networks) => {\n            this.ensurePath('spec.template.spec.domain.devices');\n            this.data.spec.template.spec.domain.devices.interfaces = _.compact(networks);\n            this.ensureNetworksConsistency();\n            return this;\n        };\n        this.setWizardNetworks = (networks) => {\n            this.ensurePath('spec.template.spec.domain.devices');\n            this.data.spec.template.spec.domain.devices.interfaces = _.compact(networks.map((network) => network.networkInterface));\n            this.data.spec.template.spec.networks = _.compact(networks.map((network) => network.network));\n            this.ensureNetworksConsistency();\n            return this;\n        };\n        this.prependStorage = ({ disk, volume, dataVolume, }) => {\n            this.ensureStorages();\n            this.getDisks().unshift(disk);\n            this.getVolumes().unshift(volume);\n            if (dataVolume) {\n                this.getDataVolumeTemplates().unshift(dataVolume);\n            }\n            this.ensureStorageConsistency();\n            return this;\n        };\n        this.removeStorage = (diskName) => {\n            this.ensurePath('spec.template.spec.domain.devices', {});\n            this.data.spec.template.spec.domain.devices.disks = this.getDisks().filter((disk) => disk.name !== diskName);\n            const volumeWrapper = new VolumeWrapper(this.getVolumes().find((volume) => volume.name === diskName));\n            this.data.spec.template.spec.volumes = this.getVolumes().filter((volume) => volume.name !== diskName);\n            if (volumeWrapper.getType() === VolumeType.DATA_VOLUME) {\n                this.data.spec.dataVolumeTemplates = this.getDataVolumeTemplates().filter((dataVolume) => dataVolume.name !== volumeWrapper.getDataVolumeName());\n            }\n            this.ensureStorageConsistency();\n            return this;\n        };\n        this.setWizardStorages = (storages) => {\n            this.ensurePath('spec.template.spec.domain.devices');\n            this.data.spec.template.spec.domain.devices.disks = _.compact(storages.map((storage) => storage.disk));\n            this.data.spec.template.spec.volumes = _.compact(storages.map((storage) => storage.volume));\n            this.data.spec.dataVolumeTemplates = _.compact(storages.map((storage) => storage.dataVolume));\n            this.ensureStorageConsistency();\n            return this;\n        };\n        this.setAutoAttachPodInterface = (autoAttach) => {\n            this.ensurePath('spec.template.spec.domain.devices');\n            this.data.spec.template.spec.domain.devices.autoattachPodInterface = autoAttach;\n            return this;\n        };\n        this.setHostname = (hostname) => {\n            this.ensurePath('spec.template.spec');\n            this.data.spec.template.spec.hostname = hostname;\n            return this;\n        };\n        this.ensureDataVolumeTemplates = () => this.ensurePath('spec.dataVolumeTemplates', []);\n        this.ensureStorages = () => {\n            this.ensurePath('spec.template.spec.domain.devices.disks', []);\n            this.ensurePath('spec.template.spec.volumes', []);\n            this.ensurePath('spec.dataVolumeTemplates', []);\n        };\n        this.ensureNetworksConsistency = () => {\n            this.clearIfEmpty('spec.template.spec.domain.devices.interfaces');\n            this.clearIfEmpty('spec.template.spec.networks');\n        };\n        this.ensureStorageConsistency = () => {\n            this.clearIfEmpty('spec.template.spec.domain.devices.disks');\n            this.clearIfEmpty('spec.template.spec.volumes');\n            this.clearIfEmpty('spec.dataVolumeTemplates');\n        };\n    }\n}\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm/vm-wrapper.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm/vm-wrapper.ts"],"names":[],"mappings":"AAAA,gDAAgD;AAChD,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,SAAS,EAAE,MAAM,sCAAsC,CAAC;AACjE,OAAO,EAAE,qBAAqB,EAAE,MAAM,4CAA4C,CAAC;AACnF,OAAO,EAAE,kBAAkB,EAAE,MAAM,gCAAgC,CAAC;AAEpE,OAAO,EACL,sBAAsB,EACtB,QAAQ,EACR,aAAa,EACb,WAAW,EACX,UAAU,EACV,uBAAuB,EACvB,eAAe,EACf,cAAc,EACd,WAAW,GACZ,MAAM,iCAAiC,CAAC;AAGzC,OAAO,EAAE,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;AACzD,OAAO,EAAE,kBAAkB,EAAE,MAAM,0BAA0B,CAAC;AAC9D,OAAO,EACL,qBAAqB,EACrB,iBAAiB,EACjB,uBAAuB,EACvB,UAAU,GACX,MAAM,uBAAuB,CAAC;AAC/B,OAAO,EAAE,aAAa,EAAE,MAAM,kBAAkB,CAAC;AAIjD,OAAO,EAAE,yBAAyB,EAAE,mBAAmB,EAAE,MAAM,iBAAiB,CAAC;AACjF,OAAO,EAAE,2BAA2B,EAAE,MAAM,gBAAgB,CAAC;AAE7D,MAAM,OAAO,SAAU,SAAQ,kBAAqC;IAClE,YAAY,EAA6B,EAAE,IAAI,GAAG,KAAK;QACrD,KAAK,CAAC,mBAAmB,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC;QAGvC,qBAAgB,GAAG,CAAC,KAAa,EAAE,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,CAAC;QAEjF,uBAAkB,GAAG,GAAG,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,iBAAiB,CAAC,CAAC;QACnF,uBAAkB,GAAG,GAAG,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,uBAAuB,CAAC,CAAC;QACzF,cAAS,GAAG,GAAG,EAAE,CAAC,kBAAkB,CAAC,IAAI,CAAC,SAAS,EAAE,EAAE,qBAAqB,CAAC,CAAC;QAE9E,cAAS,GAAG,GAAG,EAAE,oFAAC,IAAI,CAAC,IAAI,0CAAE,IAAI,0CAAE,QAAQ,0CAAE,IAAI,0CAAE,MAAM,0CAAE,SAAS,0CAAE,QAAQ,0CAAE,MAAM,GAAA,CAAC;QACvF,WAAM,GAAG,GAAW,EAAE,gEAAC,IAAI,CAAC,IAAI,0CAAE,IAAI,0CAAE,QAAQ,0CAAE,IAAI,0CAAE,MAAM,0CAAE,GAAG,GAAA,CAAC;QAEpE,sBAAiB,GAAG,CAAC,YAAY,GAAG,EAAE,EAAE,EAAE,CACxC,SAAS,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,EAAE,eAAe,CAAC,EAAE,YAAY,CAAC,CAAC;QAE7D,2BAAsB,GAAG,CAAC,YAAY,GAAG,EAAE,EAAE,EAAE,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;QAEhG,yBAAoB,GAAG,CAAC,YAAY,GAAG,EAAE,EAAE,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;QAErF,aAAQ,GAAG,CAAC,YAAY,GAAG,EAAE,EAAE,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;QACpE,cAAS,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;QAErE,gBAAW,GAAG,CAAC,YAAY,GAAG,EAAE,EAAE,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;QAE1E,eAAU,GAAG,CAAC,YAAY,GAAG,EAAE,EAAE,EAAE,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,EAAE,YAAY,CAAC,CAAC;QAExE,sBAAiB,GAAG,GAAG,EAAE,CAAC,gBAAgB,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC;QAEzF,oBAAe,GAAG,GAAG,EAAE,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEnD,mBAAc,GAAG,GAAG,EAAE,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEjD,kBAAa,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC;QAEhG,eAAU,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,CAAC;QAE1F,uBAAkB,GAAG,GAAG,EAAE,CACxB,IAAI,CAAC,UAAU,EAAE,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,QAAQ,CAAC,gBAAgB,CAAC,CAAC,CAAC;QAEjF,kBAAa,GAAG,CAAC,QAAQ,EAAE,EAAE;YAC3B,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC;YAC9D,OAAO,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC;QACrE,CAAC,CAAC;QAEF,gBAAW,GAAG,GAAG,EAAE,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAE3C,4BAAuB,GAAG,GAAG,EAAE,CAAC,uBAAuB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAEnE,8BAAyB,GAAG,GAAG,EAAE;YAC/B,OAAO,CAAC,IAAI,CAAC,kBAAkB,EAAE,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,EAAE,CAC1D,qBAAqB,CACnB,SAAS,EACT,2BAA2B,CAAC,yBAAyB,CAAC,EACtD,IAAI,CACL,CACF,CAAC;QACJ,CAAC,CAAC;QAEF,qBAAgB,GAAG,CAAC,GAAW,EAAE,KAAa,EAAE,EAAE;YAChD,IAAI,GAAG,EAAE;gBACP,IAAI,CAAC,UAAU,CAAC,+BAA+B,CAAC,CAAC;gBACjD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;aACtD;YACD,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;QAEF,0BAAqB,GAAG,CAAC,GAAW,EAAE,KAAa,EAAE,EAAE;YACrD,IAAI,GAAG,EAAE;gBACP,IAAI,CAAC,UAAU,CAAC,oCAAoC,CAAC,CAAC;gBACtD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,WAAW,CAAC,GAAG,CAAC,GAAG,KAAK,CAAC;aAC3D;YACD,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;QAEF,cAAS,GAAG,CAAC,KAAa,EAAE,MAAe,EAAE,EAAE;YAC7C,IAAI,CAAC,UAAU,CAAC,8CAA8C,CAAC,CAAC;YAChE,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,QAAQ,CAAC,MAAM,GAAG,MAAM;gBACpE,CAAC,CAAC,GAAG,KAAK,GAAG,MAAM,EAAE;gBACrB,CAAC,CAAC,KAAK,CAAC;YACV,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;QAEF,WAAM,GAAG,CAAC,GAAwD,EAAE,EAAE;;YACpE,IAAI,GAAG,EAAE;gBACP,IAAI,CAAC,UAAU,CAAC,+BAA+B,EAAE,EAAE,CAAC,CAAC;gBACrD,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,GAAG,GAAG,CAAC;gBACxC,MAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;gBACtD,KAAK,CAAC,OAAO,GAAG,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC;gBAChE,KAAK,CAAC,KAAK,GAAG,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC;gBACxD,KAAK,CAAC,OAAO,GAAG,OAAO,KAAK,SAAS,CAAC,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC;aACjE;iBAAM,4BAAI,IAAI,CAAC,IAAI,0CAAE,IAAI,0CAAE,QAAQ,0CAAE,IAAI,0CAAE,MAAM,EAAE;gBAClD,OAAO,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC;aAChD;YACD,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;QAEF,eAAU,GAAG,CAAC,SAAmB,EAAE,EAAE;YACnC,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC;YACxB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,SAAS,CAAC;YACrC,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;QAEF,yBAAoB,GAAG,CAAC,QAA8B,EAAE,EAAE;YACxD,IAAI,CAAC,UAAU,CAAC,mCAAmC,CAAC,CAAC;YACrD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;YAC7E,IAAI,CAAC,yBAAyB,EAAE,CAAC;YACjC,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;QAEF,sBAAiB,GAAG,CAAC,QAA2B,EAAE,EAAE;YAClD,IAAI,CAAC,UAAU,CAAC,mCAAmC,CAAC,CAAC;YACrD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,UAAU,GAAG,CAAC,CAAC,OAAO,CAChE,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,gBAAgB,CAAC,CACpD,CAAC;YACF,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC;YAE9F,IAAI,CAAC,yBAAyB,EAAE,CAAC;YACjC,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;QAEF,mBAAc,GAAG,CAAC,EAChB,IAAI,EACJ,MAAM,EACN,UAAU,GAKX,EAAE,EAAE;YACH,IAAI,CAAC,cAAc,EAAE,CAAC;YACtB,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;YAC9B,IAAI,CAAC,UAAU,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;YAClC,IAAI,UAAU,EAAE;gBACd,IAAI,CAAC,sBAAsB,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;aACnD;YACD,IAAI,CAAC,wBAAwB,EAAE,CAAC;YAChC,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;QAEF,kBAAa,GAAG,CAAC,QAAgB,EAAE,EAAE;YACnC,IAAI,CAAC,UAAU,CAAC,mCAAmC,EAAE,EAAE,CAAC,CAAC;YACzD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,CACxE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,IAAI,KAAK,QAAQ,CACjC,CAAC;YACF,MAAM,aAAa,GAAG,IAAI,aAAa,CACrC,IAAI,CAAC,UAAU,EAAE,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,QAAQ,CAAC,CAC7D,CAAC;YACF,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC,MAAM,CAC7D,CAAC,MAAM,EAAE,EAAE,CAAC,MAAM,CAAC,IAAI,KAAK,QAAQ,CACrC,CAAC;YAEF,IAAI,aAAa,CAAC,OAAO,EAAE,KAAK,UAAU,CAAC,WAAW,EAAE;gBACtD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC,MAAM,CACvE,CAAC,UAAU,EAAE,EAAE,CAAC,UAAU,CAAC,IAAI,KAAK,aAAa,CAAC,iBAAiB,EAAE,CACtE,CAAC;aACH;YAED,IAAI,CAAC,wBAAwB,EAAE,CAAC;YAChC,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;QAEF,sBAAiB,GAAG,CAAC,QAA2B,EAAE,EAAE;YAClD,IAAI,CAAC,UAAU,CAAC,mCAAmC,CAAC,CAAC;YACrD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,OAAO,CAC3D,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CACxC,CAAC;YACF,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;YAC5F,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,EAAE,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;YAE9F,IAAI,CAAC,wBAAwB,EAAE,CAAC;YAChC,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;QAEF,8BAAyB,GAAG,CAAC,UAAmB,EAAE,EAAE;YAClD,IAAI,CAAC,UAAU,CAAC,mCAAmC,CAAC,CAAC;YACrD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,sBAAsB,GAAG,UAAU,CAAC;YAChF,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;QAEF,gBAAW,GAAG,CAAC,QAAgB,EAAE,EAAE;YACjC,IAAI,CAAC,UAAU,CAAC,oBAAoB,CAAC,CAAC;YACtC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;YACjD,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;QAEF,8BAAyB,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,0BAA0B,EAAE,EAAE,CAAC,CAAC;QAE1E,mBAAc,GAAG,GAAG,EAAE;YAC5B,IAAI,CAAC,UAAU,CAAC,yCAAyC,EAAE,EAAE,CAAC,CAAC;YAC/D,IAAI,CAAC,UAAU,CAAC,4BAA4B,EAAE,EAAE,CAAC,CAAC;YAClD,IAAI,CAAC,UAAU,CAAC,0BAA0B,EAAE,EAAE,CAAC,CAAC;QAClD,CAAC,CAAC;QAEM,8BAAyB,GAAG,GAAG,EAAE;YACvC,IAAI,CAAC,YAAY,CAAC,8CAA8C,CAAC,CAAC;YAClE,IAAI,CAAC,YAAY,CAAC,6BAA6B,CAAC,CAAC;QACnD,CAAC,CAAC;QAEM,6BAAwB,GAAG,GAAG,EAAE;YACtC,IAAI,CAAC,YAAY,CAAC,yCAAyC,CAAC,CAAC;YAC7D,IAAI,CAAC,YAAY,CAAC,4BAA4B,CAAC,CAAC;YAChD,IAAI,CAAC,YAAY,CAAC,0BAA0B,CAAC,CAAC;QAChD,CAAC,CAAC;IAzMF,CAAC;CA0MF","sourcesContent":["/* eslint-disable lines-between-class-members */\nimport * as _ from 'lodash';\nimport { getLabels } from '@console/shared/src/selectors/common';\nimport { compareOwnerReference } from '@console/shared/src/utils/owner-references';\nimport { K8sResourceWrapper } from '../common/k8s-resource-wrapper';\nimport { CPURaw, V1NetworkInterface, VMKind } from '../../../types/vm';\nimport {\n  getDataVolumeTemplates,\n  getDisks,\n  getInterfaces,\n  getNetworks,\n  getVolumes,\n  isDedicatedCPUPlacement,\n  getNodeSelector,\n  getTolerations,\n  getAffinity,\n} from '../../../selectors/vm/selectors';\nimport { VMWizardNetwork, VMWizardStorage } from '../../../components/create-vm-wizard/types';\nimport { VMILikeMethods } from './types';\nimport { transformDevices } from '../../../selectors/vm';\nimport { findKeySuffixValue } from '../../../selectors/utils';\nimport {\n  TEMPLATE_FLAVOR_LABEL,\n  TEMPLATE_OS_LABEL,\n  TEMPLATE_WORKLOAD_LABEL,\n  VolumeType,\n} from '../../../constants/vm';\nimport { VolumeWrapper } from './volume-wrapper';\nimport { V1Disk } from '../../../types/vm/disk/V1Disk';\nimport { V1Volume } from '../../../types/vm/disk/V1Volume';\nimport { V1alpha1DataVolume } from '../../../types/vm/disk/V1alpha1DataVolume';\nimport { VirtualMachineImportModel, VirtualMachineModel } from '../../../models';\nimport { buildOwnerReferenceForModel } from '../../../utils';\n\nexport class VMWrapper extends K8sResourceWrapper<VMKind, VMWrapper> implements VMILikeMethods {\n  constructor(vm?: VMKind | VMWrapper | any, copy = false) {\n    super(VirtualMachineModel, vm, copy);\n  }\n\n  hasTemplateLabel = (label: string) => _.has(this.getTemplateLabels(null), label);\n\n  getOperatingSystem = () => findKeySuffixValue(this.getLabels(), TEMPLATE_OS_LABEL);\n  getWorkloadProfile = () => findKeySuffixValue(this.getLabels(), TEMPLATE_WORKLOAD_LABEL);\n  getFlavor = () => findKeySuffixValue(this.getLabels(), TEMPLATE_FLAVOR_LABEL);\n\n  getMemory = () => this.data?.spec?.template?.spec?.domain?.resources?.requests?.memory;\n  getCPU = (): CPURaw => this.data?.spec?.template?.spec?.domain?.cpu;\n\n  getTemplateLabels = (defaultValue = {}) =>\n    getLabels(_.get(this.data, 'spec.template'), defaultValue);\n\n  getDataVolumeTemplates = (defaultValue = []) => getDataVolumeTemplates(this.data, defaultValue);\n\n  getNetworkInterfaces = (defaultValue = []) => getInterfaces(this.data, defaultValue);\n\n  getDisks = (defaultValue = []) => getDisks(this.data, defaultValue);\n  getCDROMs = () => this.getDisks().filter((device) => !!device.cdrom);\n\n  getNetworks = (defaultValue = []) => getNetworks(this.data, defaultValue);\n\n  getVolumes = (defaultValue = []) => getVolumes(this.data, defaultValue);\n\n  getLabeledDevices = () => transformDevices(this.getDisks(), this.getNetworkInterfaces());\n\n  getNodeSelector = () => getNodeSelector(this.data);\n\n  getTolerations = () => getTolerations(this.data);\n\n  getConfigMaps = () => this.getVolumes().filter((vol) => Object.keys(vol).includes('configMap'));\n\n  getSecrets = () => this.getVolumes().filter((vol) => Object.keys(vol).includes('secret'));\n\n  getServiceAccounts = () =>\n    this.getVolumes().filter((vol) => Object.keys(vol).includes('serviceAccount'));\n\n  getDiskSerial = (diskName) => {\n    const disk = this.getDisks().find((d) => d.name === diskName);\n    return disk && Object.keys(disk).includes('serial') && disk.serial;\n  };\n\n  getAffinity = () => getAffinity(this.data);\n\n  isDedicatedCPUPlacement = () => isDedicatedCPUPlacement(this.data);\n\n  getVMImportOwnerReference = () => {\n    return (this.getOwnerReferences() || []).find((reference) =>\n      compareOwnerReference(\n        reference,\n        buildOwnerReferenceForModel(VirtualMachineImportModel),\n        true,\n      ),\n    );\n  };\n\n  addTemplateLabel = (key: string, value: string) => {\n    if (key) {\n      this.ensurePath('spec.template.metadata.labels');\n      this.data.spec.template.metadata.labels[key] = value;\n    }\n    return this;\n  };\n\n  addTemplateAnnotation = (key: string, value: string) => {\n    if (key) {\n      this.ensurePath('spec.template.metadata.annotations');\n      this.data.spec.template.metadata.annotations[key] = value;\n    }\n    return this;\n  };\n\n  setMemory = (value: string, suffix?: string) => {\n    this.ensurePath('spec.template.spec.domain.resources.requests');\n    this.data.spec.template.spec.domain.resources.requests.memory = suffix\n      ? `${value}${suffix}`\n      : value;\n    return this;\n  };\n\n  setCPU = (cpu: { sockets: number; cores: number; threads: number }) => {\n    if (cpu) {\n      this.ensurePath('spec.template.spec.domain.cpu', {});\n      const { sockets, cores, threads } = cpu;\n      const vmCPU = this.data.spec.template.spec.domain.cpu;\n      vmCPU.sockets = sockets === undefined ? vmCPU.sockets : sockets;\n      vmCPU.cores = cores === undefined ? vmCPU.cores : cores;\n      vmCPU.threads = threads === undefined ? vmCPU.threads : threads;\n    } else if (this.data?.spec?.template?.spec?.domain) {\n      delete this.data.spec.template.spec.domain.cpu;\n    }\n    return this;\n  };\n\n  setRunning = (isRunning?: boolean) => {\n    this.ensurePath('spec');\n    this.data.spec.running = !!isRunning;\n    return this;\n  };\n\n  setNetworkInterfaces = (networks: V1NetworkInterface[]) => {\n    this.ensurePath('spec.template.spec.domain.devices');\n    this.data.spec.template.spec.domain.devices.interfaces = _.compact(networks);\n    this.ensureNetworksConsistency();\n    return this;\n  };\n\n  setWizardNetworks = (networks: VMWizardNetwork[]) => {\n    this.ensurePath('spec.template.spec.domain.devices');\n    this.data.spec.template.spec.domain.devices.interfaces = _.compact(\n      networks.map((network) => network.networkInterface),\n    );\n    this.data.spec.template.spec.networks = _.compact(networks.map((network) => network.network));\n\n    this.ensureNetworksConsistency();\n    return this;\n  };\n\n  prependStorage = ({\n    disk,\n    volume,\n    dataVolume,\n  }: {\n    disk: V1Disk;\n    volume: V1Volume;\n    dataVolume?: V1alpha1DataVolume;\n  }) => {\n    this.ensureStorages();\n    this.getDisks().unshift(disk);\n    this.getVolumes().unshift(volume);\n    if (dataVolume) {\n      this.getDataVolumeTemplates().unshift(dataVolume);\n    }\n    this.ensureStorageConsistency();\n    return this;\n  };\n\n  removeStorage = (diskName: string) => {\n    this.ensurePath('spec.template.spec.domain.devices', {});\n    this.data.spec.template.spec.domain.devices.disks = this.getDisks().filter(\n      (disk) => disk.name !== diskName,\n    );\n    const volumeWrapper = new VolumeWrapper(\n      this.getVolumes().find((volume) => volume.name === diskName),\n    );\n    this.data.spec.template.spec.volumes = this.getVolumes().filter(\n      (volume) => volume.name !== diskName,\n    );\n\n    if (volumeWrapper.getType() === VolumeType.DATA_VOLUME) {\n      this.data.spec.dataVolumeTemplates = this.getDataVolumeTemplates().filter(\n        (dataVolume) => dataVolume.name !== volumeWrapper.getDataVolumeName(),\n      );\n    }\n\n    this.ensureStorageConsistency();\n    return this;\n  };\n\n  setWizardStorages = (storages: VMWizardStorage[]) => {\n    this.ensurePath('spec.template.spec.domain.devices');\n    this.data.spec.template.spec.domain.devices.disks = _.compact(\n      storages.map((storage) => storage.disk),\n    );\n    this.data.spec.template.spec.volumes = _.compact(storages.map((storage) => storage.volume));\n    this.data.spec.dataVolumeTemplates = _.compact(storages.map((storage) => storage.dataVolume));\n\n    this.ensureStorageConsistency();\n    return this;\n  };\n\n  setAutoAttachPodInterface = (autoAttach: boolean) => {\n    this.ensurePath('spec.template.spec.domain.devices');\n    this.data.spec.template.spec.domain.devices.autoattachPodInterface = autoAttach;\n    return this;\n  };\n\n  setHostname = (hostname: string) => {\n    this.ensurePath('spec.template.spec');\n    this.data.spec.template.spec.hostname = hostname;\n    return this;\n  };\n\n  ensureDataVolumeTemplates = () => this.ensurePath('spec.dataVolumeTemplates', []);\n\n  private ensureStorages = () => {\n    this.ensurePath('spec.template.spec.domain.devices.disks', []);\n    this.ensurePath('spec.template.spec.volumes', []);\n    this.ensurePath('spec.dataVolumeTemplates', []);\n  };\n\n  private ensureNetworksConsistency = () => {\n    this.clearIfEmpty('spec.template.spec.domain.devices.interfaces');\n    this.clearIfEmpty('spec.template.spec.networks');\n  };\n\n  private ensureStorageConsistency = () => {\n    this.clearIfEmpty('spec.template.spec.domain.devices.disks');\n    this.clearIfEmpty('spec.template.spec.volumes');\n    this.clearIfEmpty('spec.dataVolumeTemplates');\n  };\n}\n"]}]}