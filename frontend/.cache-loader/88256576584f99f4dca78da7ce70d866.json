{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/replication-controller.jsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/replication-controller.jsx","mtime":1616735742480},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { sortable } from '@patternfly/react-table';\nimport { Status } from '@console/shared';\nimport { ResourceEventStream } from './events';\nimport { DetailsPage, ListPage, Table, TableData, TableRow } from './factory';\nimport { replicaSetMenuActions } from './replicaset';\nimport { ContainerTable, navFactory, SectionHeading, ResourceSummary, ResourcePodCount, AsyncComponent, Kebab, ResourceLink, resourcePath, ResourceKebab, asAccessReview, OwnerReferences, Timestamp, PodsComponent, } from './utils';\nimport { VolumesTable } from './volumes-table';\nimport { confirmModal } from './modals';\nimport { k8sPatch } from '../module/k8s';\nconst Details = ({ obj: replicationController }) => {\n    const revision = _.get(replicationController, [\n        'metadata',\n        'annotations',\n        'openshift.io/deployment-config.latest-version',\n    ]);\n    const phase = _.get(replicationController, [\n        'metadata',\n        'annotations',\n        'openshift.io/deployment.phase',\n    ]);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(SectionHeading, { text: \"Replication Controller Details\" }),\n            React.createElement(\"div\", { className: \"row\" },\n                React.createElement(\"div\", { className: \"col-md-6\" },\n                    React.createElement(ResourceSummary, { resource: replicationController, showPodSelector: true, showNodeSelector: true, showTolerations: true }, revision && (React.createElement(React.Fragment, null,\n                        React.createElement(\"dt\", null, \"Deployment Revision\"),\n                        React.createElement(\"dd\", null, revision))))),\n                React.createElement(\"div\", { className: \"col-md-6\" },\n                    phase && (React.createElement(React.Fragment, null,\n                        React.createElement(\"dt\", null, \"Phase\"),\n                        React.createElement(\"dd\", null,\n                            React.createElement(Status, { status: phase })))),\n                    React.createElement(ResourcePodCount, { resource: replicationController })))),\n        React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(SectionHeading, { text: \"Containers\" }),\n            React.createElement(ContainerTable, { containers: replicationController.spec.template.spec.containers })),\n        React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(VolumesTable, { resource: replicationController, heading: \"Volumes\" }))));\n};\nconst EnvironmentPage = (props) => (React.createElement(AsyncComponent, Object.assign({ loader: () => import('./environment.jsx').then((c) => c.EnvironmentPage) }, props)));\nconst envPath = ['spec', 'template', 'spec', 'containers'];\nconst environmentComponent = (props) => (React.createElement(EnvironmentPage, { obj: props.obj, rawEnvData: props.obj.spec.template.spec, envPath: envPath, readOnly: false }));\nconst { details, editYaml, pods, envEditor, events } = navFactory;\nconst CancelAction = (kind, obj) => ({\n    label: 'Cancel Rollout',\n    hidden: !_.includes(['New', 'Pending', 'Running'], _.get(obj, ['metadata', 'annotations', 'openshift.io/deployment.phase'])),\n    callback: () => confirmModal({\n        title: 'Cancel Rollout',\n        message: 'Are you sure you want to cancel this rollout?',\n        btnText: 'Yes, cancel',\n        cancelText: \"No, don't cancel\",\n        executeFn: () => k8sPatch(kind, obj, [\n            {\n                op: 'add',\n                path: '/metadata/annotations/openshift.io~1deployment.cancelled',\n                value: 'true',\n            },\n            {\n                op: 'add',\n                path: '/metadata/annotations/openshift.io~1deployment.status-reason',\n                value: 'cancelled by the user',\n            },\n        ]),\n    }),\n    accessReview: asAccessReview(kind, obj, 'patch'),\n});\nconst ReplicationControllerPods = (props) => (React.createElement(PodsComponent, Object.assign({}, props, { customData: { showNodes: true } })));\nconst menuActions = [CancelAction, ...replicaSetMenuActions];\nexport const ReplicationControllersDetailsPage = (props) => (React.createElement(DetailsPage, Object.assign({}, props, { getResourceStatus: (resource) => _.get(resource, ['metadata', 'annotations', 'openshift.io/deployment.phase'], null), menuActions: menuActions, pages: [\n        details(Details),\n        editYaml(),\n        pods(ReplicationControllerPods),\n        envEditor(environmentComponent),\n        events(ResourceEventStream),\n    ] })));\nconst kind = 'ReplicationController';\nconst tableColumnClasses = [\n    classNames('col-lg-2', 'col-md-2', 'col-sm-4', 'col-xs-6'),\n    classNames('col-lg-2', 'col-md-2', 'col-sm-4', 'col-xs-6'),\n    classNames('col-lg-2', 'col-md-2', 'col-sm-4', 'hidden-xs'),\n    classNames('col-lg-2', 'col-md-2', 'hidden-sm', 'hidden-xs'),\n    classNames('col-lg-2', 'col-md-2', 'hidden-sm', 'hidden-xs'),\n    classNames('col-lg-2', 'hidden-md', 'hidden-sm', 'hidden-xs'),\n    Kebab.columnClass,\n];\nconst ReplicationControllerTableRow = ({ obj, index, key, style }) => {\n    const phase = _.get(obj, ['metadata', 'annotations', 'openshift.io/deployment.phase']);\n    return (React.createElement(TableRow, { id: obj.metadata.uid, index: index, trKey: key, style: style },\n        React.createElement(TableData, { className: tableColumnClasses[0] },\n            React.createElement(ResourceLink, { kind: kind, name: obj.metadata.name, namespace: obj.metadata.namespace, title: obj.metadata.uid })),\n        React.createElement(TableData, { className: classNames(tableColumnClasses[1], 'co-break-word') },\n            React.createElement(ResourceLink, { kind: \"Namespace\", name: obj.metadata.namespace, title: obj.metadata.namespace })),\n        React.createElement(TableData, { className: tableColumnClasses[2] },\n            React.createElement(Link, { to: `${resourcePath(kind, obj.metadata.name, obj.metadata.namespace)}/pods`, title: \"pods\" },\n                obj.status.replicas || 0,\n                \" of \",\n                obj.spec.replicas,\n                \" pods\")),\n        React.createElement(TableData, { className: tableColumnClasses[3] },\n            React.createElement(Status, { status: phase })),\n        React.createElement(TableData, { className: tableColumnClasses[4] },\n            React.createElement(OwnerReferences, { resource: obj })),\n        React.createElement(TableData, { className: tableColumnClasses[5] },\n            React.createElement(Timestamp, { timestamp: obj.metadata.creationTimestamp })),\n        React.createElement(TableData, { className: tableColumnClasses[6] },\n            React.createElement(ResourceKebab, { actions: menuActions, kind: kind, resource: obj }))));\n};\nconst ReplicationControllerTableHeader = () => {\n    return [\n        {\n            title: 'Name',\n            sortField: 'metadata.name',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[0] },\n        },\n        {\n            title: 'Namespace',\n            sortField: 'metadata.namespace',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[1] },\n        },\n        {\n            title: 'Status',\n            sortFunc: 'numReplicas',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[2] },\n        },\n        {\n            title: 'Phase',\n            sortField: 'metadata.annotations[\"openshift.io/deployment.phase\"]',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[3] },\n        },\n        {\n            title: 'Owner',\n            sortField: 'metadata.ownerReferences[0].name',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[4] },\n        },\n        {\n            title: 'Created',\n            sortField: 'metadata.creationTimestamp',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[5] },\n        },\n        {\n            title: '',\n            props: { className: tableColumnClasses[6] },\n        },\n    ];\n};\nReplicationControllerTableHeader.displayName = 'ReplicationControllerTableHeader';\nexport const ReplicationControllersList = (props) => (React.createElement(Table, Object.assign({}, props, { \"aria-label\": \"Replication Controllers\", Header: ReplicationControllerTableHeader, Row: ReplicationControllerTableRow, virtualize: true })));\nexport const ReplicationControllersPage = (props) => {\n    const { canCreate = true } = props;\n    return (React.createElement(ListPage, Object.assign({ canCreate: canCreate, kind: \"ReplicationController\", ListComponent: ReplicationControllersList }, props)));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/replication-controller.jsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/replication-controller.jsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\n\nimport { Link } from 'react-router-dom';\nimport { sortable } from '@patternfly/react-table';\nimport { Status } from '@console/shared';\nimport { ResourceEventStream } from './events';\nimport { DetailsPage, ListPage, Table, TableData, TableRow } from './factory';\nimport { replicaSetMenuActions } from './replicaset';\nimport {\n  ContainerTable,\n  navFactory,\n  SectionHeading,\n  ResourceSummary,\n  ResourcePodCount,\n  AsyncComponent,\n  Kebab,\n  ResourceLink,\n  resourcePath,\n  ResourceKebab,\n  asAccessReview,\n  OwnerReferences,\n  Timestamp,\n  PodsComponent,\n} from './utils';\n\nimport { VolumesTable } from './volumes-table';\nimport { confirmModal } from './modals';\nimport { k8sPatch } from '../module/k8s';\n\nconst Details = ({ obj: replicationController }) => {\n  const revision = _.get(replicationController, [\n    'metadata',\n    'annotations',\n    'openshift.io/deployment-config.latest-version',\n  ]);\n  const phase = _.get(replicationController, [\n    'metadata',\n    'annotations',\n    'openshift.io/deployment.phase',\n  ]);\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Replication Controller Details\" />\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <ResourceSummary\n              resource={replicationController}\n              showPodSelector\n              showNodeSelector\n              showTolerations\n            >\n              {revision && (\n                <>\n                  <dt>Deployment Revision</dt>\n                  <dd>{revision}</dd>\n                </>\n              )}\n            </ResourceSummary>\n          </div>\n          <div className=\"col-md-6\">\n            {phase && (\n              <>\n                <dt>Phase</dt>\n                <dd>\n                  <Status status={phase} />\n                </dd>\n              </>\n            )}\n            <ResourcePodCount resource={replicationController} />\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Containers\" />\n        <ContainerTable containers={replicationController.spec.template.spec.containers} />\n      </div>\n      <div className=\"co-m-pane__body\">\n        <VolumesTable resource={replicationController} heading=\"Volumes\" />\n      </div>\n    </>\n  );\n};\n\nconst EnvironmentPage = (props) => (\n  <AsyncComponent\n    loader={() => import('./environment.jsx').then((c) => c.EnvironmentPage)}\n    {...props}\n  />\n);\n\nconst envPath = ['spec', 'template', 'spec', 'containers'];\nconst environmentComponent = (props) => (\n  <EnvironmentPage\n    obj={props.obj}\n    rawEnvData={props.obj.spec.template.spec}\n    envPath={envPath}\n    readOnly={false}\n  />\n);\n\nconst { details, editYaml, pods, envEditor, events } = navFactory;\n\nconst CancelAction = (kind, obj) => ({\n  label: 'Cancel Rollout',\n  hidden: !_.includes(\n    ['New', 'Pending', 'Running'],\n    _.get(obj, ['metadata', 'annotations', 'openshift.io/deployment.phase']),\n  ),\n  callback: () =>\n    confirmModal({\n      title: 'Cancel Rollout',\n      message: 'Are you sure you want to cancel this rollout?',\n      btnText: 'Yes, cancel',\n      cancelText: \"No, don't cancel\",\n      executeFn: () =>\n        k8sPatch(kind, obj, [\n          {\n            op: 'add',\n            path: '/metadata/annotations/openshift.io~1deployment.cancelled',\n            value: 'true',\n          },\n          {\n            op: 'add',\n            path: '/metadata/annotations/openshift.io~1deployment.status-reason',\n            value: 'cancelled by the user',\n          },\n        ]),\n    }),\n  accessReview: asAccessReview(kind, obj, 'patch'),\n});\n\nconst ReplicationControllerPods = (props) => (\n  <PodsComponent {...props} customData={{ showNodes: true }} />\n);\n\nconst menuActions = [CancelAction, ...replicaSetMenuActions];\n\nexport const ReplicationControllersDetailsPage = (props) => (\n  <DetailsPage\n    {...props}\n    getResourceStatus={(resource) =>\n      _.get(resource, ['metadata', 'annotations', 'openshift.io/deployment.phase'], null)\n    }\n    menuActions={menuActions}\n    pages={[\n      details(Details),\n      editYaml(),\n      pods(ReplicationControllerPods),\n      envEditor(environmentComponent),\n      events(ResourceEventStream),\n    ]}\n  />\n);\n\nconst kind = 'ReplicationController';\n\nconst tableColumnClasses = [\n  classNames('col-lg-2', 'col-md-2', 'col-sm-4', 'col-xs-6'),\n  classNames('col-lg-2', 'col-md-2', 'col-sm-4', 'col-xs-6'),\n  classNames('col-lg-2', 'col-md-2', 'col-sm-4', 'hidden-xs'),\n  classNames('col-lg-2', 'col-md-2', 'hidden-sm', 'hidden-xs'),\n  classNames('col-lg-2', 'col-md-2', 'hidden-sm', 'hidden-xs'),\n  classNames('col-lg-2', 'hidden-md', 'hidden-sm', 'hidden-xs'),\n  Kebab.columnClass,\n];\n\nconst ReplicationControllerTableRow = ({ obj, index, key, style }) => {\n  const phase = _.get(obj, ['metadata', 'annotations', 'openshift.io/deployment.phase']);\n\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={kind}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n          title={obj.metadata.uid}\n        />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink\n          kind=\"Namespace\"\n          name={obj.metadata.namespace}\n          title={obj.metadata.namespace}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Link\n          to={`${resourcePath(kind, obj.metadata.name, obj.metadata.namespace)}/pods`}\n          title=\"pods\"\n        >\n          {obj.status.replicas || 0} of {obj.spec.replicas} pods\n        </Link>\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <Status status={phase} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <OwnerReferences resource={obj} />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <Timestamp timestamp={obj.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[6]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={obj} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst ReplicationControllerTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Status',\n      sortFunc: 'numReplicas',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Phase',\n      sortField: 'metadata.annotations[\"openshift.io/deployment.phase\"]',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: 'Owner',\n      sortField: 'metadata.ownerReferences[0].name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: 'Created',\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[5] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[6] },\n    },\n  ];\n};\nReplicationControllerTableHeader.displayName = 'ReplicationControllerTableHeader';\n\nexport const ReplicationControllersList = (props) => (\n  <Table\n    {...props}\n    aria-label=\"Replication Controllers\"\n    Header={ReplicationControllerTableHeader}\n    Row={ReplicationControllerTableRow}\n    virtualize\n  />\n);\n\nexport const ReplicationControllersPage = (props) => {\n  const { canCreate = true } = props;\n  return (\n    <ListPage\n      canCreate={canCreate}\n      kind=\"ReplicationController\"\n      ListComponent={ReplicationControllersList}\n      {...props}\n    />\n  );\n};\n"]}]}