{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/service-catalog.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/service-catalog.ts","mtime":1616735742510},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nexport const serviceClassDisplayName = (serviceClass) => _.get(serviceClass, 'spec.externalMetadata.displayName') ||\n    _.get(serviceClass, 'spec.externalName');\nexport const servicePlanDisplayName = (servicePlan) => _.get(servicePlan, 'spec.externalMetadata.displayName') ||\n    _.get(servicePlan, 'spec.externalName');\nexport const planExternalName = (serviceInstance) => _.get(serviceInstance, 'spec.clusterServicePlanExternalName') ||\n    _.get(serviceInstance, 'spec.servicePlanExternalName');\nconst statusCondition = (obj, type) => {\n    return _.find(_.get(obj, 'status.conditions'), { type });\n};\nconst isStatusReady = (obj) => {\n    return _.get(statusCondition(obj, 'Ready'), 'status') === 'True';\n};\nexport const serviceCatalogStatus = (obj) => {\n    const conditions = _.get(obj, 'status.conditions');\n    const statusError = _.find(conditions, { type: 'Failed', status: 'True' });\n    if (statusError) {\n        return 'Failed';\n    }\n    if (isStatusReady(obj)) {\n        return 'Ready';\n    }\n    return 'Not Ready';\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/service-catalog.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/service-catalog.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAM,WAAW,CAAC;AAI/B,MAAM,CAAC,MAAM,uBAAuB,GAAG,CAAC,YAA6B,EAAU,EAAE,CAC/E,CAAC,CAAC,GAAG,CAAC,YAAY,EAAE,mCAAmC,CAAC;IACxD,CAAC,CAAC,GAAG,CAAC,YAAY,EAAE,mBAAmB,CAAC,CAAC;AAE3C,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,WAA4B,EAAU,EAAE,CAC7E,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,mCAAmC,CAAC;IACvD,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,mBAAmB,CAAC,CAAC;AAE1C,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,eAAgC,EAAU,EAAE,CAC3E,CAAC,CAAC,GAAG,CAAC,eAAe,EAAE,qCAAqC,CAAC;IAC7D,CAAC,CAAC,GAAG,CAAC,eAAe,EAAE,8BAA8B,CAAC,CAAC;AAEzD,MAAM,eAAe,GAAG,CAAC,GAAoB,EAAE,IAAY,EAAE,EAAE;IAC7D,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,mBAAmB,CAAC,EAAE,EAAE,IAAI,EAAE,CAAC,CAAC;AAC3D,CAAC,CAAC;AAEF,MAAM,aAAa,GAAG,CAAC,GAAoB,EAAE,EAAE;IAC7C,OAAO,CAAC,CAAC,GAAG,CAAC,eAAe,CAAC,GAAG,EAAE,OAAO,CAAC,EAAE,QAAQ,CAAC,KAAK,MAAM,CAAC;AACnE,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,GAAoB,EAAE,EAAE;IAC3D,MAAM,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,GAAG,EAAE,mBAAmB,CAAC,CAAC;IACnD,MAAM,WAAW,GAAG,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,EAAE,MAAM,EAAE,CAAC,CAAC;IAE3E,IAAI,WAAW,EAAE;QACf,OAAO,QAAQ,CAAC;KACjB;IAED,IAAI,aAAa,CAAC,GAAG,CAAC,EAAE;QACtB,OAAO,OAAO,CAAC;KAChB;IAED,OAAO,WAAW,CAAC;AACrB,CAAC,CAAC","sourcesContent":["import * as _ from 'lodash-es';\n\nimport { K8sResourceKind } from '../../module/k8s';\n\nexport const serviceClassDisplayName = (serviceClass: K8sResourceKind): string =>\n  _.get(serviceClass, 'spec.externalMetadata.displayName') ||\n  _.get(serviceClass, 'spec.externalName');\n\nexport const servicePlanDisplayName = (servicePlan: K8sResourceKind): string =>\n  _.get(servicePlan, 'spec.externalMetadata.displayName') ||\n  _.get(servicePlan, 'spec.externalName');\n\nexport const planExternalName = (serviceInstance: K8sResourceKind): string =>\n  _.get(serviceInstance, 'spec.clusterServicePlanExternalName') ||\n  _.get(serviceInstance, 'spec.servicePlanExternalName');\n\nconst statusCondition = (obj: K8sResourceKind, type: string) => {\n  return _.find(_.get(obj, 'status.conditions'), { type });\n};\n\nconst isStatusReady = (obj: K8sResourceKind) => {\n  return _.get(statusCondition(obj, 'Ready'), 'status') === 'True';\n};\n\nexport const serviceCatalogStatus = (obj: K8sResourceKind) => {\n  const conditions = _.get(obj, 'status.conditions');\n  const statusError = _.find(conditions, { type: 'Failed', status: 'True' });\n\n  if (statusError) {\n    return 'Failed';\n  }\n\n  if (isStatusReady(obj)) {\n    return 'Ready';\n  }\n\n  return 'Not Ready';\n};\n"]}]}