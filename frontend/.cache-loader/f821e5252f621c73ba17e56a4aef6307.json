{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/behavior/usePanZoom.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/behavior/usePanZoom.tsx","mtime":1615298458710},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as d3 from 'd3';\nimport { observer } from 'mobx-react';\nimport { action, autorun } from 'mobx';\nimport ElementContext from '../utils/ElementContext';\nimport useCallbackRef from '../utils/useCallbackRef';\nimport Point from '../geom/Point';\nimport { isGraph, ModelKind } from '../types';\nimport { ATTR_DATA_KIND } from '../const';\n// Used to send events prevented by d3.zoom to the document allowing modals, dropdowns, etc, to close\nconst propagatePanZoomMouseEvent = (e) => {\n    document.dispatchEvent(new MouseEvent(e.type, e));\n};\nexport const usePanZoom = () => {\n    const element = React.useContext(ElementContext);\n    if (!isGraph(element)) {\n        throw new Error('usePanZoom must be used within the scope of a Graph');\n    }\n    const elementRef = React.useRef(element);\n    elementRef.current = element;\n    return useCallbackRef((node) => {\n        let disposeListener;\n        if (node) {\n            // TODO fix any type\n            const $svg = d3.select(node.ownerSVGElement);\n            if (node && node.ownerSVGElement) {\n                node.ownerSVGElement.addEventListener('mousedown', propagatePanZoomMouseEvent);\n                node.ownerSVGElement.addEventListener('click', propagatePanZoomMouseEvent);\n            }\n            const zoom = d3\n                .zoom()\n                .scaleExtent(elementRef.current.getScaleExtent())\n                .on('zoom', action(() => {\n                elementRef.current.setPosition(new Point(d3.event.transform.x, d3.event.transform.y));\n                elementRef.current.setScale(d3.event.transform.k);\n            }))\n                .filter(() => {\n                if (d3.event.ctrlKey || d3.event.button) {\n                    return false;\n                }\n                // only allow zoom from double clicking the graph directly\n                if (d3.event.type === 'dblclick') {\n                    // check if target is not within a node or edge\n                    const svg = node.ownerSVGElement;\n                    let p = d3.event.target;\n                    while (p && p !== svg) {\n                        if (p instanceof Element) {\n                            const kind = p.getAttribute(ATTR_DATA_KIND);\n                            if (kind) {\n                                if (kind !== ModelKind.graph) {\n                                    return false;\n                                }\n                                break;\n                            }\n                        }\n                        p = p.parentNode;\n                    }\n                }\n                return true;\n            });\n            zoom($svg);\n            // Update the d3 transform whenever the scale or bounds change.\n            // This is kinda hacky because when d3 has already made the most recent transform update,\n            // we listen for the model change, due to the above, only to update the d3 transform again.\n            disposeListener = autorun(() => {\n                const scale = elementRef.current.getScale();\n                const scaleExtent = elementRef.current.getScaleExtent();\n                // update the min scaling value such that the user can zoom out to the new scale in case\n                // it is smaller than the default zoom out scale\n                zoom.scaleExtent([Math.min(scale, scaleExtent[0]), scaleExtent[1]]);\n                const b = elementRef.current.getBounds();\n                // update d3 zoom data directly\n                // eslint-disable-next-line no-underscore-dangle\n                Object.assign($svg.node().__zoom, {\n                    k: scale,\n                    x: b.x,\n                    y: b.y,\n                });\n            });\n            // disable double click zoom\n            // $svg.on('dblclick.zoom', null);\n        }\n        return () => {\n            disposeListener && disposeListener();\n            if (node) {\n                // remove all zoom listeners\n                d3.select(node.ownerSVGElement).on('.zoom', null);\n                if (node.ownerSVGElement) {\n                    node.ownerSVGElement.removeEventListener('mousedown', propagatePanZoomMouseEvent);\n                    node.ownerSVGElement.removeEventListener('click', propagatePanZoomMouseEvent);\n                }\n            }\n        };\n    });\n};\nexport const withPanZoom = () => (WrappedComponent) => {\n    const Component = (props) => {\n        const panZoomRef = usePanZoom();\n        return React.createElement(WrappedComponent, Object.assign({}, props, { panZoomRef: panZoomRef }));\n    };\n    return observer(Component);\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/behavior/usePanZoom.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/behavior/usePanZoom.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as d3 from 'd3';\nimport { observer } from 'mobx-react';\nimport { action, autorun, IReactionDisposer } from 'mobx';\nimport ElementContext from '../utils/ElementContext';\nimport useCallbackRef from '../utils/useCallbackRef';\nimport Point from '../geom/Point';\nimport { Graph, isGraph, ModelKind } from '../types';\nimport { ATTR_DATA_KIND } from '../const';\n\nexport type PanZoomRef = (node: SVGGElement | null) => void;\n\n// Used to send events prevented by d3.zoom to the document allowing modals, dropdowns, etc, to close\nconst propagatePanZoomMouseEvent = (e: Event): void => {\n  document.dispatchEvent(new MouseEvent(e.type, e));\n};\n\nexport const usePanZoom = (): PanZoomRef => {\n  const element = React.useContext(ElementContext);\n  if (!isGraph(element)) {\n    throw new Error('usePanZoom must be used within the scope of a Graph');\n  }\n  const elementRef = React.useRef<Graph>(element);\n  elementRef.current = element;\n\n  return useCallbackRef<PanZoomRef>((node: SVGGElement | null) => {\n    let disposeListener: IReactionDisposer | undefined;\n    if (node) {\n      // TODO fix any type\n      const $svg = d3.select(node.ownerSVGElement) as any;\n      if (node && node.ownerSVGElement) {\n        node.ownerSVGElement.addEventListener('mousedown', propagatePanZoomMouseEvent);\n        node.ownerSVGElement.addEventListener('click', propagatePanZoomMouseEvent);\n      }\n      const zoom = d3\n        .zoom()\n        .scaleExtent(elementRef.current.getScaleExtent())\n        .on(\n          'zoom',\n          action(() => {\n            elementRef.current.setPosition(new Point(d3.event.transform.x, d3.event.transform.y));\n            elementRef.current.setScale(d3.event.transform.k);\n          }),\n        )\n        .filter(() => {\n          if (d3.event.ctrlKey || d3.event.button) {\n            return false;\n          }\n          // only allow zoom from double clicking the graph directly\n          if (d3.event.type === 'dblclick') {\n            // check if target is not within a node or edge\n            const svg = node.ownerSVGElement;\n            let p: Node | null = d3.event.target;\n            while (p && p !== svg) {\n              if (p instanceof Element) {\n                const kind = p.getAttribute(ATTR_DATA_KIND);\n                if (kind) {\n                  if (kind !== ModelKind.graph) {\n                    return false;\n                  }\n                  break;\n                }\n              }\n              p = p.parentNode;\n            }\n          }\n          return true;\n        });\n      zoom($svg);\n\n      // Update the d3 transform whenever the scale or bounds change.\n      // This is kinda hacky because when d3 has already made the most recent transform update,\n      // we listen for the model change, due to the above, only to update the d3 transform again.\n      disposeListener = autorun(() => {\n        const scale = elementRef.current.getScale();\n        const scaleExtent = elementRef.current.getScaleExtent();\n\n        // update the min scaling value such that the user can zoom out to the new scale in case\n        // it is smaller than the default zoom out scale\n        zoom.scaleExtent([Math.min(scale, scaleExtent[0]), scaleExtent[1]]);\n        const b = elementRef.current.getBounds();\n\n        // update d3 zoom data directly\n        // eslint-disable-next-line no-underscore-dangle\n        Object.assign($svg.node().__zoom, {\n          k: scale,\n          x: b.x,\n          y: b.y,\n        });\n      });\n\n      // disable double click zoom\n      // $svg.on('dblclick.zoom', null);\n    }\n    return () => {\n      disposeListener && disposeListener();\n      if (node) {\n        // remove all zoom listeners\n        d3.select(node.ownerSVGElement).on('.zoom', null);\n        if (node.ownerSVGElement) {\n          node.ownerSVGElement.removeEventListener('mousedown', propagatePanZoomMouseEvent);\n          node.ownerSVGElement.removeEventListener('click', propagatePanZoomMouseEvent);\n        }\n      }\n    };\n  });\n};\n\nexport type WithPanZoomProps = {\n  panZoomRef: PanZoomRef;\n};\n\nexport const withPanZoom = () => <P extends WithPanZoomProps>(\n  WrappedComponent: React.ComponentType<P>,\n) => {\n  const Component: React.FC<Omit<P, keyof WithPanZoomProps>> = (props) => {\n    const panZoomRef = usePanZoom();\n    return <WrappedComponent {...(props as any)} panZoomRef={panZoomRef} />;\n  };\n  return observer(Component);\n};\n"]}]}