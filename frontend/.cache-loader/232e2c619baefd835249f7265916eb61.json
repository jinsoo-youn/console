{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/node-selector-modal/node-selector-modal.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/node-selector-modal/node-selector-modal.tsx","mtime":1616735742420},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport { ModalTitle, ModalBody } from '@console/internal/components/factory';\nimport { Button, ButtonVariant } from '@patternfly/react-core';\nimport { withHandlePromise, } from '@console/internal/components/utils';\nimport { k8sPatch } from '@console/internal/module/k8s';\nimport { NodeModel } from '@console/internal/models';\nimport { isLoaded, getLoadedData, getLoadError } from '../../../../utils';\nimport { ModalFooter } from '../../modal/modal-footer';\nimport { getVMLikeModel } from '../../../../selectors/vm';\nimport { getVMLikeNodeSelector } from '../../../../selectors/vm-like/selectors';\nimport { getNodeSelectorPatches } from '../../../../k8s/patches/vm/vm-scheduling-patches';\nimport { NodeChecker } from '../shared/NodeChecker/node-checker';\nimport { useNodeQualifier } from '../shared/hooks';\nimport { LabelsList } from '../../../LabelsList/labels-list';\nimport { LabelRow } from '../../../LabelsList/LabelRow/label-row';\nimport { NODE_SELECTOR_MODAL_TITLE } from '../shared/consts';\nimport { nodeSelectorToIDLabels } from './helpers';\nimport { useIDEntities } from '../../../../hooks/use-id-entities';\nimport { useCollisionChecker } from '../../../../hooks/use-collision-checker';\nimport { NodeSelectorHeader } from './node-selector-header';\nexport const NSModal = withHandlePromise(({ nodes, close, handlePromise, inProgress, errorMessage, vmLikeEntity, vmLikeEntityLoading, }) => {\n    const vmLikeFinal = getLoadedData(vmLikeEntityLoading, vmLikeEntity);\n    const loadError = getLoadError(nodes, NodeModel);\n    const [selectorLabels, setSelectorLabels, onLabelAdd, onLabelChange, onLabelDelete,] = useIDEntities(nodeSelectorToIDLabels(getVMLikeNodeSelector(vmLikeEntity)));\n    const qualifiedNodes = useNodeQualifier(nodes, 'label', selectorLabels);\n    const [showCollisionAlert, reload] = useCollisionChecker(vmLikeFinal, (oldVM, newVM) => _.isEqual(getVMLikeNodeSelector(oldVM), getVMLikeNodeSelector(newVM)));\n    const onSelectorLabelAdd = () => onLabelAdd({ id: null, key: '', value: '' });\n    const onReload = () => {\n        reload();\n        setSelectorLabels(nodeSelectorToIDLabels(getVMLikeNodeSelector(vmLikeFinal)));\n    };\n    const onSubmit = () => __awaiter(void 0, void 0, void 0, function* () {\n        const k8sSelector = selectorLabels.reduce((acc, { key, value }) => {\n            acc[key] = value;\n            return acc;\n        }, {});\n        if (!_.isEqual(getVMLikeNodeSelector(vmLikeFinal), k8sSelector)) {\n            // eslint-disable-next-line promise/catch-or-return\n            handlePromise(k8sPatch(getVMLikeModel(vmLikeFinal), vmLikeFinal, yield getNodeSelectorPatches(vmLikeFinal, k8sSelector))).then(close);\n        }\n        else {\n            close();\n        }\n    });\n    return (React.createElement(\"div\", { className: \"modal-content\" },\n        React.createElement(ModalTitle, null, NODE_SELECTOR_MODAL_TITLE),\n        React.createElement(ModalBody, null,\n            React.createElement(LabelsList, { isEmpty: selectorLabels.length === 0, kind: \"Node\", onLabelAdd: onSelectorLabelAdd }, selectorLabels.length > 0 && (React.createElement(React.Fragment, null,\n                React.createElement(NodeSelectorHeader, { key: \"label-title-row\" }),\n                selectorLabels.map((label) => (React.createElement(LabelRow, { key: label.id, label: label, onChange: onLabelChange, onDelete: onLabelDelete })))))),\n            React.createElement(NodeChecker, { qualifiedNodes: qualifiedNodes })),\n        React.createElement(ModalFooter, { id: \"node-selector\", errorMessage: errorMessage, inProgress: !isLoaded(nodes) || inProgress, isSimpleError: !!loadError, onSubmit: onSubmit, onCancel: close, submitButtonText: \"Save\", infoTitle: showCollisionAlert && 'Node Selector has been updated outside this flow.', infoMessage: React.createElement(React.Fragment, null,\n                \"Saving these changes will override any Node Selector previously saved.\",\n                React.createElement(\"br\", null),\n                React.createElement(Button, { variant: ButtonVariant.link, isInline: true, onClick: onReload }, \"Reload Node Selector\"),\n                \".\") })));\n});\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/node-selector-modal/node-selector-modal.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/node-selector-modal/node-selector-modal.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { ModalTitle, ModalBody, ModalComponentProps } from '@console/internal/components/factory';\nimport { Button, ButtonVariant } from '@patternfly/react-core';\nimport {\n  FirehoseResult,\n  withHandlePromise,\n  HandlePromiseProps,\n} from '@console/internal/components/utils';\nimport { k8sPatch, NodeKind } from '@console/internal/module/k8s';\nimport { NodeModel } from '@console/internal/models';\nimport { isLoaded, getLoadedData, getLoadError } from '../../../../utils';\nimport { ModalFooter } from '../../modal/modal-footer';\nimport { VMLikeEntityKind } from '../../../../types/vmLike';\nimport { getVMLikeModel } from '../../../../selectors/vm';\nimport { getVMLikeNodeSelector } from '../../../../selectors/vm-like/selectors';\nimport { getNodeSelectorPatches } from '../../../../k8s/patches/vm/vm-scheduling-patches';\nimport { NodeChecker } from '../shared/NodeChecker/node-checker';\nimport { useNodeQualifier } from '../shared/hooks';\nimport { LabelsList } from '../../../LabelsList/labels-list';\nimport { LabelRow } from '../../../LabelsList/LabelRow/label-row';\nimport { NODE_SELECTOR_MODAL_TITLE } from '../shared/consts';\nimport { nodeSelectorToIDLabels } from './helpers';\nimport { useIDEntities } from '../../../../hooks/use-id-entities';\nimport { IDLabel } from '../../../LabelsList/types';\nimport { useCollisionChecker } from '../../../../hooks/use-collision-checker';\nimport { NodeSelectorHeader } from './node-selector-header';\n\nexport const NSModal = withHandlePromise(\n  ({\n    nodes,\n    close,\n    handlePromise,\n    inProgress,\n    errorMessage,\n    vmLikeEntity,\n    vmLikeEntityLoading,\n  }: NSModalProps) => {\n    const vmLikeFinal = getLoadedData(vmLikeEntityLoading, vmLikeEntity);\n    const loadError = getLoadError(nodes, NodeModel);\n\n    const [\n      selectorLabels,\n      setSelectorLabels,\n      onLabelAdd,\n      onLabelChange,\n      onLabelDelete,\n    ] = useIDEntities<IDLabel>(nodeSelectorToIDLabels(getVMLikeNodeSelector(vmLikeEntity)));\n\n    const qualifiedNodes = useNodeQualifier(nodes, 'label', selectorLabels);\n    const [showCollisionAlert, reload] = useCollisionChecker<VMLikeEntityKind>(\n      vmLikeFinal,\n      (oldVM: VMLikeEntityKind, newVM: VMLikeEntityKind) =>\n        _.isEqual(getVMLikeNodeSelector(oldVM), getVMLikeNodeSelector(newVM)),\n    );\n\n    const onSelectorLabelAdd = () => onLabelAdd({ id: null, key: '', value: '' } as IDLabel);\n\n    const onReload = () => {\n      reload();\n      setSelectorLabels(nodeSelectorToIDLabels(getVMLikeNodeSelector(vmLikeFinal)));\n    };\n\n    const onSubmit = async () => {\n      const k8sSelector = selectorLabels.reduce((acc, { key, value }) => {\n        acc[key] = value;\n        return acc;\n      }, {});\n\n      if (!_.isEqual(getVMLikeNodeSelector(vmLikeFinal), k8sSelector)) {\n        // eslint-disable-next-line promise/catch-or-return\n        handlePromise(\n          k8sPatch(\n            getVMLikeModel(vmLikeFinal),\n            vmLikeFinal,\n            await getNodeSelectorPatches(vmLikeFinal, k8sSelector),\n          ),\n        ).then(close);\n      } else {\n        close();\n      }\n    };\n\n    return (\n      <div className=\"modal-content\">\n        <ModalTitle>{NODE_SELECTOR_MODAL_TITLE}</ModalTitle>\n        <ModalBody>\n          <LabelsList\n            isEmpty={selectorLabels.length === 0}\n            kind=\"Node\"\n            onLabelAdd={onSelectorLabelAdd}\n          >\n            {selectorLabels.length > 0 && (\n              <>\n                <NodeSelectorHeader key=\"label-title-row\" />\n                {selectorLabels.map((label) => (\n                  <LabelRow\n                    key={label.id}\n                    label={label}\n                    onChange={onLabelChange}\n                    onDelete={onLabelDelete}\n                  />\n                ))}\n              </>\n            )}\n          </LabelsList>\n          <NodeChecker qualifiedNodes={qualifiedNodes} />\n        </ModalBody>\n        <ModalFooter\n          id=\"node-selector\"\n          errorMessage={errorMessage}\n          inProgress={!isLoaded(nodes) || inProgress}\n          isSimpleError={!!loadError}\n          onSubmit={onSubmit}\n          onCancel={close}\n          submitButtonText=\"Save\"\n          infoTitle={showCollisionAlert && 'Node Selector has been updated outside this flow.'}\n          infoMessage={\n            <>\n              Saving these changes will override any Node Selector previously saved.\n              <br />\n              <Button variant={ButtonVariant.link} isInline onClick={onReload}>\n                Reload Node Selector\n              </Button>\n              .\n            </>\n          }\n        />\n      </div>\n    );\n  },\n);\n\ntype NSModalProps = HandlePromiseProps &\n  ModalComponentProps & {\n    vmLikeEntity: VMLikeEntityKind;\n    nodes?: FirehoseResult<NodeKind[]>;\n    inProgress: boolean;\n    vmLikeEntityLoading?: FirehoseResult<VMLikeEntityKind>;\n    errorMessage: string;\n  };\n"]}]}