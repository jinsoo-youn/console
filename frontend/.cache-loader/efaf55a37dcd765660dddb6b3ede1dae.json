{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/resource-log.jsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/resource-log.jsx","mtime":1615298458750},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { Base64 } from 'js-base64';\nimport { saveAs } from 'file-saver';\nimport { Alert, AlertActionLink, Button } from '@patternfly/react-core';\nimport * as _ from 'lodash-es';\nimport { CompressIcon, ExpandIcon, DownloadIcon } from '@patternfly/react-icons';\nimport * as classNames from 'classnames';\nimport { FLAGS } from '@console/shared/src/constants';\nimport { LoadingInline, LogWindow, TogglePlay, ExternalLink } from './';\nimport { modelFor, resourceURL } from '../../module/k8s';\nimport { WSFactory } from '../../module/ws-factory';\nimport { LineBuffer } from './line-buffer';\nimport * as screenfull from 'screenfull';\nimport { k8sGet, k8sList } from '@console/internal/module/k8s';\nimport { ConsoleExternalLogLinkModel, ProjectModel } from '@console/internal/models';\nimport { connectToFlags } from '../../reducers/features';\nexport const STREAM_EOF = 'eof';\nexport const STREAM_LOADING = 'loading';\nexport const STREAM_PAUSED = 'paused';\nexport const STREAM_ACTIVE = 'streaming';\nexport const LOG_SOURCE_RESTARTING = 'restarting';\nexport const LOG_SOURCE_RUNNING = 'running';\nexport const LOG_SOURCE_TERMINATED = 'terminated';\nexport const LOG_SOURCE_WAITING = 'waiting';\n// Messages to display for corresponding log status\nconst streamStatusMessages = {\n    [STREAM_EOF]: 'Log stream ended.',\n    [STREAM_LOADING]: 'Loading log...',\n    [STREAM_PAUSED]: 'Log stream paused.',\n    [STREAM_ACTIVE]: 'Log streaming...',\n};\nconst replaceVariables = (template, values) => {\n    return _.reduce(values, (result, value, name) => {\n        // Replace all occurrences of template expressions like \"${name}\" with the URL-encoded value.\n        // eslint-disable-next-line prefer-template\n        const pattern = _.escapeRegExp('${' + name + '}');\n        return result.replace(new RegExp(pattern, 'g'), encodeURIComponent(value));\n    }, template);\n};\n// Component for log stream controls\nexport const LogControls = ({ dropdown, onDownload, toggleFullscreen, isFullscreen, status, toggleStreaming, resource, containerName, podLogLinks, namespaceUID, }) => {\n    return (React.createElement(\"div\", { className: \"co-toolbar\" },\n        React.createElement(\"div\", { className: \"co-toolbar__group co-toolbar__group--left\" },\n            React.createElement(\"div\", { className: \"co-toolbar__item\" },\n                status === STREAM_LOADING && (React.createElement(React.Fragment, null,\n                    React.createElement(LoadingInline, null),\n                    \"\\u00A0\")),\n                [STREAM_ACTIVE, STREAM_PAUSED].includes(status) && (React.createElement(TogglePlay, { active: status === STREAM_ACTIVE, onClick: toggleStreaming })),\n                streamStatusMessages[status]),\n            dropdown && React.createElement(\"div\", { className: \"co-toolbar__item\" }, dropdown)),\n        React.createElement(\"div\", { className: \"co-toolbar__group co-toolbar__group--right\" },\n            !_.isEmpty(podLogLinks) &&\n                _.map(_.sortBy(podLogLinks, 'metadata.name'), (link) => {\n                    const namespace = resource.metadata.namespace;\n                    const namespaceFilter = link.spec.namespaceFilter;\n                    if (namespaceFilter) {\n                        try {\n                            const namespaceRegExp = new RegExp(namespaceFilter, 'g');\n                            if (namespace.search(namespaceRegExp)) {\n                                return null;\n                            }\n                        }\n                        catch (e) {\n                            // eslint-disable-next-line no-console\n                            console.warn('invalid log link regex', namespaceFilter, e);\n                            return null;\n                        }\n                    }\n                    const url = replaceVariables(link.spec.hrefTemplate, {\n                        resourceName: resource.metadata.name,\n                        resourceUID: resource.metadata.uid,\n                        containerName,\n                        resourceNamespace: namespace,\n                        resourceNamespaceUID: namespaceUID,\n                        podLabels: JSON.stringify(resource.metadata.labels),\n                    });\n                    return (React.createElement(React.Fragment, { key: link.metadata.uid },\n                        React.createElement(ExternalLink, { href: url, text: link.spec.text, dataTestID: link.metadata.name }),\n                        React.createElement(\"span\", { \"aria-hidden\": \"true\", className: \"co-action-divider hidden-xs\" }, \"|\")));\n                }),\n            React.createElement(Button, { variant: \"link\", isInline: true, onClick: onDownload },\n                React.createElement(DownloadIcon, { className: \"co-icon-space-r\" }),\n                \"Download\"),\n            screenfull.enabled && (React.createElement(React.Fragment, null,\n                React.createElement(\"span\", { \"aria-hidden\": \"true\", className: \"co-action-divider hidden-xs\" }, \"|\"),\n                React.createElement(Button, { variant: \"link\", isInline: true, onClick: toggleFullscreen }, isFullscreen ? (React.createElement(React.Fragment, null,\n                    React.createElement(CompressIcon, { className: \"co-icon-space-r\" }),\n                    \"Collapse\")) : (React.createElement(React.Fragment, null,\n                    React.createElement(ExpandIcon, { className: \"co-icon-space-r\" }),\n                    \"Expand\"))))))));\n};\nLogControls.propTypes = {\n    isFullscreen: PropTypes.bool.isRequired,\n    dropdown: PropTypes.node,\n    status: PropTypes.string,\n    resource: PropTypes.object,\n    containerName: PropTypes.string,\n    podLogLinks: PropTypes.arrayOf(PropTypes.object),\n    namespaceUID: PropTypes.string,\n    toggleStreaming: PropTypes.func,\n    onDownload: PropTypes.func.isRequired,\n    toggleFullscreen: PropTypes.func.isRequired,\n};\n// Resource agnostic log component\nclass ResourceLog_ extends React.Component {\n    constructor(props) {\n        super(props);\n        this._buffer = new LineBuffer(props.bufferSize);\n        this._download = this._download.bind(this);\n        this._toggleFullscreen = this._toggleFullscreen.bind(this);\n        this._onClose = this._onClose.bind(this);\n        this._onError = this._onError.bind(this);\n        this._onMessage = this._onMessage.bind(this);\n        this._onOpen = this._onOpen.bind(this);\n        this._restartStream = this._restartStream.bind(this);\n        this._toggleStreaming = this._toggleStreaming.bind(this);\n        this._updateStatus = this._updateStatus.bind(this);\n        this._resourceLogRef = React.createRef();\n        this.state = {\n            error: false,\n            lines: [],\n            linesBehind: 0,\n            resourceStatus: LOG_SOURCE_WAITING,\n            stale: false,\n            status: STREAM_LOADING,\n            isFullscreen: false,\n            namespaceUID: '',\n        };\n    }\n    static getDerivedStateFromProps(nextProps, prevState) {\n        if (nextProps.resourceStatus !== prevState.resourcStatus) {\n            const newState = {};\n            newState.resourceStatus = nextProps.resourceStatus;\n            // Container changed from non-running to running state, so currently displayed logs are stale\n            if (prevState.resourceStatus === LOG_SOURCE_RESTARTING &&\n                newState.resourceStatus !== LOG_SOURCE_RESTARTING) {\n                newState.stale = true;\n            }\n            return newState;\n        }\n        return null;\n    }\n    fetchLogLinks() {\n        const promises = [\n            k8sList(ConsoleExternalLogLinkModel),\n            k8sGet(ProjectModel, this.props.resource.metadata.namespace),\n        ];\n        Promise.all(promises)\n            .then(([podLogLinks, project]) => {\n            // Project UID and namespace UID are the same value. Use the projects\n            // API since normal OpenShift users can list projects.\n            this.setState({ podLogLinks, namespaceUID: project.metadata.uid });\n        })\n            .catch((e) => this.setState({ error: e }));\n    }\n    componentDidMount() {\n        if (this.props.flags.CONSOLE_EXTERNAL_LOG_LINK && this.props.resource.kind === 'Pod') {\n            this.fetchLogLinks();\n        }\n        this._wsInit(this.props);\n        if (screenfull.enabled) {\n            screenfull.on('change', () => {\n                this.setState({ isFullscreen: screenfull.isFullscreen });\n            });\n            screenfull.on('error', () => {\n                this.setState({ isFullscreen: false });\n            });\n        }\n    }\n    componentDidUpdate(prevProps, prevState) {\n        const containerChanged = prevProps.containerName !== this.props.containerName;\n        const resourceStarted = prevState.resourceStatus === LOG_SOURCE_WAITING &&\n            this.state.resourceStatus !== LOG_SOURCE_WAITING;\n        // Container changed or transitioned out of waiting state\n        if (containerChanged || resourceStarted) {\n            this._restartStream();\n        }\n    }\n    componentWillUnmount() {\n        this._wsDestroy();\n        if (screenfull.enabled) {\n            screenfull.off('change');\n            screenfull.off('error');\n        }\n    }\n    // Download currently displayed log content\n    _download() {\n        const { resource, containerName } = this.props;\n        const blob = this._buffer.getBlob({ type: 'text/plain;charset=utf-8' });\n        let filename = resource.metadata.name;\n        if (containerName) {\n            filename = `${filename}-${containerName}`;\n        }\n        saveAs(blob, `${filename}.log`);\n    }\n    // Handler for websocket onclose event\n    _onClose() {\n        this.setState({ status: STREAM_EOF });\n    }\n    // Handler for websocket onerror event\n    _onError() {\n        this.setState({\n            error: true,\n        });\n    }\n    // Handler for websocket onmessage event\n    _onMessage(msg) {\n        const { linesBehind, status } = this.state;\n        if (msg) {\n            const text = Base64.decode(msg);\n            const linesAdded = this._buffer.ingest(text);\n            this.setState({\n                linesBehind: status === STREAM_PAUSED ? linesBehind + linesAdded : linesBehind,\n                lines: this._buffer.getLines(),\n            });\n        }\n    }\n    // Handler for websocket onopen event\n    _onOpen() {\n        this._buffer.clear();\n        this._updateStatus(STREAM_ACTIVE);\n    }\n    // Destroy and reinitialize websocket connection\n    _restartStream() {\n        this.setState({\n            error: false,\n            lines: [],\n            linesBehind: 0,\n            stale: false,\n            status: STREAM_LOADING,\n        }, () => {\n            this._wsDestroy();\n            this._wsInit(this.props);\n        });\n    }\n    // Toggle currently displayed log content to/from fullscreen\n    _toggleFullscreen() {\n        const logConsole = this._resourceLogRef.current;\n        if (!logConsole) {\n            return;\n        }\n        if (screenfull.enabled) {\n            screenfull.toggle(logConsole);\n        }\n    }\n    // Toggle streaming/paused status\n    _toggleStreaming() {\n        const newStatus = this.state.status === STREAM_ACTIVE ? STREAM_PAUSED : STREAM_ACTIVE;\n        this._updateStatus(newStatus);\n    }\n    // Updates log status\n    _updateStatus(newStatus) {\n        const { status } = this.state;\n        const newState = { status: newStatus };\n        // Reset linesBehind when transitioning out of paused state\n        if (status !== STREAM_ACTIVE && newStatus === STREAM_ACTIVE) {\n            newState.linesBehind = 0;\n        }\n        this.setState(newState);\n    }\n    // Destroy websocket\n    _wsDestroy() {\n        this.ws && this.ws.destroy();\n    }\n    // Initialize websocket connection and wire up handlers\n    _wsInit({ resource, containerName, bufferSize }) {\n        if ([LOG_SOURCE_RUNNING, LOG_SOURCE_TERMINATED, LOG_SOURCE_RESTARTING].includes(this.state.resourceStatus)) {\n            const urlOpts = {\n                ns: resource.metadata.namespace,\n                name: resource.metadata.name,\n                path: 'log',\n                queryParams: {\n                    container: containerName || '',\n                    follow: 'true',\n                    tailLines: bufferSize,\n                },\n            };\n            const watchURL = resourceURL(modelFor(resource.kind), urlOpts);\n            const wsOpts = {\n                host: 'auto',\n                path: watchURL,\n                subprotocols: ['base64.binary.k8s.io'],\n            };\n            this.ws = new WSFactory(watchURL, wsOpts)\n                .onclose(this._onClose)\n                .onerror(this._onError)\n                .onmessage(this._onMessage)\n                .onopen(this._onOpen);\n        }\n    }\n    render() {\n        const { resource, containerName, dropdown, bufferSize } = this.props;\n        const { error, lines, linesBehind, stale, status, isFullscreen, podLogLinks, namespaceUID, } = this.state;\n        const bufferFull = lines.length === bufferSize;\n        return (React.createElement(React.Fragment, null,\n            error && (React.createElement(Alert, { isInline: true, className: \"co-alert\", variant: \"danger\", title: \"An error occurred while retrieving the requested logs.\", action: React.createElement(AlertActionLink, { onClick: this._restartStream }, \"Retry\") })),\n            stale && (React.createElement(Alert, { isInline: true, className: \"co-alert\", variant: \"info\", title: `The logs for this ${resource.kind} may be stale.`, action: React.createElement(AlertActionLink, { onClick: this._restartStream }, \"Refresh\") })),\n            React.createElement(\"div\", { ref: this._resourceLogRef, className: classNames('resource-log', { 'resource-log--fullscreen': isFullscreen }) },\n                React.createElement(LogControls, { dropdown: dropdown, isFullscreen: isFullscreen, onDownload: this._download, status: status, toggleFullscreen: this._toggleFullscreen, toggleStreaming: this._toggleStreaming, resource: resource, containerName: containerName, podLogLinks: podLogLinks, namespaceUID: namespaceUID }),\n                React.createElement(LogWindow, { lines: lines, linesBehind: linesBehind, bufferFull: bufferFull, isFullscreen: isFullscreen, status: status, updateStatus: this._updateStatus }))));\n    }\n}\n/** @type {React.FC<{bufferSize?: number, containerName?: string, dropdown?: React.ReactNode, resource: any, resourceStatus: string}}>} */\nexport const ResourceLog = connectToFlags(FLAGS.CONSOLE_EXTERNAL_LOG_LINK)(ResourceLog_);\nResourceLog.defaultProps = {\n    bufferSize: 1000,\n};\nResourceLog.propTypes = {\n    bufferSize: PropTypes.number.isRequired,\n    containerName: PropTypes.string,\n    dropdown: PropTypes.element,\n    resource: PropTypes.object.isRequired,\n    resourceStatus: PropTypes.string.isRequired,\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/resource-log.jsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/resource-log.jsx"],"names":[],"mappings":"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","sourcesContent":["import * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { Base64 } from 'js-base64';\nimport { saveAs } from 'file-saver';\nimport { Alert, AlertActionLink, Button } from '@patternfly/react-core';\nimport * as _ from 'lodash-es';\nimport { CompressIcon, ExpandIcon, DownloadIcon } from '@patternfly/react-icons';\nimport * as classNames from 'classnames';\nimport { FLAGS } from '@console/shared/src/constants';\nimport { LoadingInline, LogWindow, TogglePlay, ExternalLink } from './';\nimport { modelFor, resourceURL } from '../../module/k8s';\nimport { WSFactory } from '../../module/ws-factory';\nimport { LineBuffer } from './line-buffer';\nimport * as screenfull from 'screenfull';\nimport { k8sGet, k8sList } from '@console/internal/module/k8s';\nimport { ConsoleExternalLogLinkModel, ProjectModel } from '@console/internal/models';\nimport { connectToFlags } from '../../reducers/features';\n\nexport const STREAM_EOF = 'eof';\nexport const STREAM_LOADING = 'loading';\nexport const STREAM_PAUSED = 'paused';\nexport const STREAM_ACTIVE = 'streaming';\n\nexport const LOG_SOURCE_RESTARTING = 'restarting';\nexport const LOG_SOURCE_RUNNING = 'running';\nexport const LOG_SOURCE_TERMINATED = 'terminated';\nexport const LOG_SOURCE_WAITING = 'waiting';\n\n// Messages to display for corresponding log status\nconst streamStatusMessages = {\n  [STREAM_EOF]: 'Log stream ended.',\n  [STREAM_LOADING]: 'Loading log...',\n  [STREAM_PAUSED]: 'Log stream paused.',\n  [STREAM_ACTIVE]: 'Log streaming...',\n};\n\nconst replaceVariables = (template, values) => {\n  return _.reduce(\n    values,\n    (result, value, name) => {\n      // Replace all occurrences of template expressions like \"${name}\" with the URL-encoded value.\n      // eslint-disable-next-line prefer-template\n      const pattern = _.escapeRegExp('${' + name + '}');\n      return result.replace(new RegExp(pattern, 'g'), encodeURIComponent(value));\n    },\n    template,\n  );\n};\n\n// Component for log stream controls\nexport const LogControls = ({\n  dropdown,\n  onDownload,\n  toggleFullscreen,\n  isFullscreen,\n  status,\n  toggleStreaming,\n  resource,\n  containerName,\n  podLogLinks,\n  namespaceUID,\n}) => {\n  return (\n    <div className=\"co-toolbar\">\n      <div className=\"co-toolbar__group co-toolbar__group--left\">\n        <div className=\"co-toolbar__item\">\n          {status === STREAM_LOADING && (\n            <>\n              <LoadingInline />\n              &nbsp;\n            </>\n          )}\n          {[STREAM_ACTIVE, STREAM_PAUSED].includes(status) && (\n            <TogglePlay active={status === STREAM_ACTIVE} onClick={toggleStreaming} />\n          )}\n          {streamStatusMessages[status]}\n        </div>\n        {dropdown && <div className=\"co-toolbar__item\">{dropdown}</div>}\n      </div>\n      <div className=\"co-toolbar__group co-toolbar__group--right\">\n        {!_.isEmpty(podLogLinks) &&\n          _.map(_.sortBy(podLogLinks, 'metadata.name'), (link) => {\n            const namespace = resource.metadata.namespace;\n            const namespaceFilter = link.spec.namespaceFilter;\n            if (namespaceFilter) {\n              try {\n                const namespaceRegExp = new RegExp(namespaceFilter, 'g');\n                if (namespace.search(namespaceRegExp)) {\n                  return null;\n                }\n              } catch (e) {\n                // eslint-disable-next-line no-console\n                console.warn('invalid log link regex', namespaceFilter, e);\n                return null;\n              }\n            }\n            const url = replaceVariables(link.spec.hrefTemplate, {\n              resourceName: resource.metadata.name,\n              resourceUID: resource.metadata.uid,\n              containerName,\n              resourceNamespace: namespace,\n              resourceNamespaceUID: namespaceUID,\n              podLabels: JSON.stringify(resource.metadata.labels),\n            });\n            return (\n              <React.Fragment key={link.metadata.uid}>\n                <ExternalLink href={url} text={link.spec.text} dataTestID={link.metadata.name} />\n                <span aria-hidden=\"true\" className=\"co-action-divider hidden-xs\">\n                  |\n                </span>\n              </React.Fragment>\n            );\n          })}\n        <Button variant=\"link\" isInline onClick={onDownload}>\n          <DownloadIcon className=\"co-icon-space-r\" />\n          Download\n        </Button>\n        {screenfull.enabled && (\n          <>\n            <span aria-hidden=\"true\" className=\"co-action-divider hidden-xs\">\n              |\n            </span>\n            <Button variant=\"link\" isInline onClick={toggleFullscreen}>\n              {isFullscreen ? (\n                <>\n                  <CompressIcon className=\"co-icon-space-r\" />\n                  Collapse\n                </>\n              ) : (\n                <>\n                  <ExpandIcon className=\"co-icon-space-r\" />\n                  Expand\n                </>\n              )}\n            </Button>\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nLogControls.propTypes = {\n  isFullscreen: PropTypes.bool.isRequired,\n  dropdown: PropTypes.node,\n  status: PropTypes.string,\n  resource: PropTypes.object,\n  containerName: PropTypes.string,\n  podLogLinks: PropTypes.arrayOf(PropTypes.object), // k8sResourceKind\n  namespaceUID: PropTypes.string,\n  toggleStreaming: PropTypes.func,\n  onDownload: PropTypes.func.isRequired,\n  toggleFullscreen: PropTypes.func.isRequired,\n};\n\n// Resource agnostic log component\nclass ResourceLog_ extends React.Component {\n  constructor(props) {\n    super(props);\n    this._buffer = new LineBuffer(props.bufferSize);\n    this._download = this._download.bind(this);\n    this._toggleFullscreen = this._toggleFullscreen.bind(this);\n    this._onClose = this._onClose.bind(this);\n    this._onError = this._onError.bind(this);\n    this._onMessage = this._onMessage.bind(this);\n    this._onOpen = this._onOpen.bind(this);\n    this._restartStream = this._restartStream.bind(this);\n    this._toggleStreaming = this._toggleStreaming.bind(this);\n    this._updateStatus = this._updateStatus.bind(this);\n    this._resourceLogRef = React.createRef();\n    this.state = {\n      error: false,\n      lines: [],\n      linesBehind: 0,\n      resourceStatus: LOG_SOURCE_WAITING,\n      stale: false,\n      status: STREAM_LOADING,\n      isFullscreen: false,\n      namespaceUID: '',\n    };\n  }\n\n  static getDerivedStateFromProps(nextProps, prevState) {\n    if (nextProps.resourceStatus !== prevState.resourcStatus) {\n      const newState = {};\n      newState.resourceStatus = nextProps.resourceStatus;\n      // Container changed from non-running to running state, so currently displayed logs are stale\n      if (\n        prevState.resourceStatus === LOG_SOURCE_RESTARTING &&\n        newState.resourceStatus !== LOG_SOURCE_RESTARTING\n      ) {\n        newState.stale = true;\n      }\n      return newState;\n    }\n    return null;\n  }\n\n  fetchLogLinks() {\n    const promises = [\n      k8sList(ConsoleExternalLogLinkModel),\n      k8sGet(ProjectModel, this.props.resource.metadata.namespace),\n    ];\n    Promise.all(promises)\n      .then(([podLogLinks, project]) => {\n        // Project UID and namespace UID are the same value. Use the projects\n        // API since normal OpenShift users can list projects.\n        this.setState({ podLogLinks, namespaceUID: project.metadata.uid });\n      })\n      .catch((e) => this.setState({ error: e }));\n  }\n\n  componentDidMount() {\n    if (this.props.flags.CONSOLE_EXTERNAL_LOG_LINK && this.props.resource.kind === 'Pod') {\n      this.fetchLogLinks();\n    }\n    this._wsInit(this.props);\n    if (screenfull.enabled) {\n      screenfull.on('change', () => {\n        this.setState({ isFullscreen: screenfull.isFullscreen });\n      });\n      screenfull.on('error', () => {\n        this.setState({ isFullscreen: false });\n      });\n    }\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    const containerChanged = prevProps.containerName !== this.props.containerName;\n    const resourceStarted =\n      prevState.resourceStatus === LOG_SOURCE_WAITING &&\n      this.state.resourceStatus !== LOG_SOURCE_WAITING;\n\n    // Container changed or transitioned out of waiting state\n    if (containerChanged || resourceStarted) {\n      this._restartStream();\n    }\n  }\n\n  componentWillUnmount() {\n    this._wsDestroy();\n    if (screenfull.enabled) {\n      screenfull.off('change');\n      screenfull.off('error');\n    }\n  }\n\n  // Download currently displayed log content\n  _download() {\n    const { resource, containerName } = this.props;\n    const blob = this._buffer.getBlob({ type: 'text/plain;charset=utf-8' });\n    let filename = resource.metadata.name;\n    if (containerName) {\n      filename = `${filename}-${containerName}`;\n    }\n    saveAs(blob, `${filename}.log`);\n  }\n\n  // Handler for websocket onclose event\n  _onClose() {\n    this.setState({ status: STREAM_EOF });\n  }\n\n  // Handler for websocket onerror event\n  _onError() {\n    this.setState({\n      error: true,\n    });\n  }\n\n  // Handler for websocket onmessage event\n  _onMessage(msg) {\n    const { linesBehind, status } = this.state;\n    if (msg) {\n      const text = Base64.decode(msg);\n      const linesAdded = this._buffer.ingest(text);\n      this.setState({\n        linesBehind: status === STREAM_PAUSED ? linesBehind + linesAdded : linesBehind,\n        lines: this._buffer.getLines(),\n      });\n    }\n  }\n\n  // Handler for websocket onopen event\n  _onOpen() {\n    this._buffer.clear();\n    this._updateStatus(STREAM_ACTIVE);\n  }\n\n  // Destroy and reinitialize websocket connection\n  _restartStream() {\n    this.setState(\n      {\n        error: false,\n        lines: [],\n        linesBehind: 0,\n        stale: false,\n        status: STREAM_LOADING,\n      },\n      () => {\n        this._wsDestroy();\n        this._wsInit(this.props);\n      },\n    );\n  }\n\n  // Toggle currently displayed log content to/from fullscreen\n  _toggleFullscreen() {\n    const logConsole = this._resourceLogRef.current;\n    if (!logConsole) {\n      return;\n    }\n\n    if (screenfull.enabled) {\n      screenfull.toggle(logConsole);\n    }\n  }\n\n  // Toggle streaming/paused status\n  _toggleStreaming() {\n    const newStatus = this.state.status === STREAM_ACTIVE ? STREAM_PAUSED : STREAM_ACTIVE;\n    this._updateStatus(newStatus);\n  }\n\n  // Updates log status\n  _updateStatus(newStatus) {\n    const { status } = this.state;\n    const newState = { status: newStatus };\n\n    // Reset linesBehind when transitioning out of paused state\n    if (status !== STREAM_ACTIVE && newStatus === STREAM_ACTIVE) {\n      newState.linesBehind = 0;\n    }\n    this.setState(newState);\n  }\n\n  // Destroy websocket\n  _wsDestroy() {\n    this.ws && this.ws.destroy();\n  }\n\n  // Initialize websocket connection and wire up handlers\n  _wsInit({ resource, containerName, bufferSize }) {\n    if (\n      [LOG_SOURCE_RUNNING, LOG_SOURCE_TERMINATED, LOG_SOURCE_RESTARTING].includes(\n        this.state.resourceStatus,\n      )\n    ) {\n      const urlOpts = {\n        ns: resource.metadata.namespace,\n        name: resource.metadata.name,\n        path: 'log',\n        queryParams: {\n          container: containerName || '',\n          follow: 'true',\n          tailLines: bufferSize,\n        },\n      };\n      const watchURL = resourceURL(modelFor(resource.kind), urlOpts);\n      const wsOpts = {\n        host: 'auto',\n        path: watchURL,\n        subprotocols: ['base64.binary.k8s.io'],\n      };\n\n      this.ws = new WSFactory(watchURL, wsOpts)\n        .onclose(this._onClose)\n        .onerror(this._onError)\n        .onmessage(this._onMessage)\n        .onopen(this._onOpen);\n    }\n  }\n\n  render() {\n    const { resource, containerName, dropdown, bufferSize } = this.props;\n    const {\n      error,\n      lines,\n      linesBehind,\n      stale,\n      status,\n      isFullscreen,\n      podLogLinks,\n      namespaceUID,\n    } = this.state;\n    const bufferFull = lines.length === bufferSize;\n\n    return (\n      <>\n        {error && (\n          <Alert\n            isInline\n            className=\"co-alert\"\n            variant=\"danger\"\n            title=\"An error occurred while retrieving the requested logs.\"\n            action={<AlertActionLink onClick={this._restartStream}>Retry</AlertActionLink>}\n          />\n        )}\n        {stale && (\n          <Alert\n            isInline\n            className=\"co-alert\"\n            variant=\"info\"\n            title={`The logs for this ${resource.kind} may be stale.`}\n            action={<AlertActionLink onClick={this._restartStream}>Refresh</AlertActionLink>}\n          />\n        )}\n        <div\n          ref={this._resourceLogRef}\n          className={classNames('resource-log', { 'resource-log--fullscreen': isFullscreen })}\n        >\n          <LogControls\n            dropdown={dropdown}\n            isFullscreen={isFullscreen}\n            onDownload={this._download}\n            status={status}\n            toggleFullscreen={this._toggleFullscreen}\n            toggleStreaming={this._toggleStreaming}\n            resource={resource}\n            containerName={containerName}\n            podLogLinks={podLogLinks}\n            namespaceUID={namespaceUID}\n          />\n          <LogWindow\n            lines={lines}\n            linesBehind={linesBehind}\n            bufferFull={bufferFull}\n            isFullscreen={isFullscreen}\n            status={status}\n            updateStatus={this._updateStatus}\n          />\n        </div>\n      </>\n    );\n  }\n}\n\n/** @type {React.FC<{bufferSize?: number, containerName?: string, dropdown?: React.ReactNode, resource: any, resourceStatus: string}}>} */\nexport const ResourceLog = connectToFlags(FLAGS.CONSOLE_EXTERNAL_LOG_LINK)(ResourceLog_);\n\nResourceLog.defaultProps = {\n  bufferSize: 1000,\n};\n\nResourceLog.propTypes = {\n  bufferSize: PropTypes.number.isRequired,\n  containerName: PropTypes.string,\n  dropdown: PropTypes.element,\n  resource: PropTypes.object.isRequired,\n  resourceStatus: PropTypes.string.isRequired,\n};\n"]}]}