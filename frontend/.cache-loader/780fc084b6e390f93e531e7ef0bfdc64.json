{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/noobaa-storage-plugin/src/components/status-card/statuses.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/noobaa-storage-plugin/src/components/status-card/statuses.tsx","mtime":1615298458680},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { HealthState } from '@console/shared/src/components/dashboard/status-card/states';\nimport { getGaugeValue } from '../../utils';\nconst NooBaaStatus = [\n    {\n        state: HealthState.ERROR,\n        message: 'MCG is not running',\n    },\n    {\n        state: HealthState.ERROR,\n        message: 'All resources are unhealthy',\n    },\n    {\n        state: HealthState.WARNING,\n        message: 'Object Bucket has an issue',\n    },\n    {\n        state: HealthState.ERROR,\n        message: 'Many buckets have issues',\n    },\n    {\n        state: HealthState.WARNING,\n        message: 'Some buckets have issues',\n    },\n];\nexport const getNooBaaState = (prometheusResponses = [], hasLoadError, isLoading, k8sResponse) => {\n    const [buckets, unhealthyBuckets, pools, unhealthyPools] = prometheusResponses.map((r) => getGaugeValue(r));\n    const noobaaPhase = _.get(k8sResponse, 'data[0].status.phase');\n    const unhealthyBucketsRatio = unhealthyBuckets / buckets;\n    const noData = !(buckets && unhealthyBuckets && pools && unhealthyPools && noobaaPhase);\n    if (hasLoadError) {\n        return { state: HealthState.UNKNOWN };\n    }\n    if (noData) {\n        return { state: HealthState.NOT_AVAILABLE };\n    }\n    if (isLoading) {\n        return { state: HealthState.LOADING };\n    }\n    if (noobaaPhase !== 'Ready') {\n        return NooBaaStatus[0];\n    }\n    if (Number(pools) === Number(unhealthyPools)) {\n        return NooBaaStatus[1];\n    }\n    if (Number(unhealthyBuckets) === 1) {\n        return NooBaaStatus[2];\n    }\n    if (unhealthyBucketsRatio >= 0.5) {\n        return NooBaaStatus[3];\n    }\n    if (unhealthyBucketsRatio >= 0.3) {\n        return NooBaaStatus[4];\n    }\n    return { state: HealthState.OK };\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/noobaa-storage-plugin/src/components/status-card/statuses.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/noobaa-storage-plugin/src/components/status-card/statuses.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,WAAW,EAAE,MAAM,6DAA6D,CAAC;AAG1F,OAAO,EAAE,aAAa,EAAE,MAAM,aAAa,CAAC;AAE5C,MAAM,YAAY,GAAG;IACnB;QACE,KAAK,EAAE,WAAW,CAAC,KAAK;QACxB,OAAO,EAAE,oBAAoB;KAC9B;IACD;QACE,KAAK,EAAE,WAAW,CAAC,KAAK;QACxB,OAAO,EAAE,6BAA6B;KACvC;IACD;QACE,KAAK,EAAE,WAAW,CAAC,OAAO;QAC1B,OAAO,EAAE,4BAA4B;KACtC;IACD;QACE,KAAK,EAAE,WAAW,CAAC,KAAK;QACxB,OAAO,EAAE,0BAA0B;KACpC;IACD;QACE,KAAK,EAAE,WAAW,CAAC,OAAO;QAC1B,OAAO,EAAE,0BAA0B;KACpC;CACF,CAAC;AAEF,MAAM,CAAC,MAAM,cAAc,GAA2B,CACpD,mBAAmB,GAAG,EAAE,EACxB,YAAY,EACZ,SAAS,EACT,WAAW,EACX,EAAE;IACF,MAAM,CAAC,OAAO,EAAE,gBAAgB,EAAE,KAAK,EAAE,cAAc,CAAC,GAAG,mBAAmB,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CACvF,aAAa,CAAC,CAAC,CAAC,CACjB,CAAC;IACF,MAAM,WAAW,GAAG,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,sBAAsB,CAAC,CAAC;IAC/D,MAAM,qBAAqB,GAAG,gBAAgB,GAAG,OAAO,CAAC;IACzD,MAAM,MAAM,GAAG,CAAC,CAAC,OAAO,IAAI,gBAAgB,IAAI,KAAK,IAAI,cAAc,IAAI,WAAW,CAAC,CAAC;IAExF,IAAI,YAAY,EAAE;QAChB,OAAO,EAAE,KAAK,EAAE,WAAW,CAAC,OAAO,EAAE,CAAC;KACvC;IACD,IAAI,MAAM,EAAE;QACV,OAAO,EAAE,KAAK,EAAE,WAAW,CAAC,aAAa,EAAE,CAAC;KAC7C;IACD,IAAI,SAAS,EAAE;QACb,OAAO,EAAE,KAAK,EAAE,WAAW,CAAC,OAAO,EAAE,CAAC;KACvC;IACD,IAAI,WAAW,KAAK,OAAO,EAAE;QAC3B,OAAO,YAAY,CAAC,CAAC,CAAC,CAAC;KACxB;IACD,IAAI,MAAM,CAAC,KAAK,CAAC,KAAK,MAAM,CAAC,cAAc,CAAC,EAAE;QAC5C,OAAO,YAAY,CAAC,CAAC,CAAC,CAAC;KACxB;IACD,IAAI,MAAM,CAAC,gBAAgB,CAAC,KAAK,CAAC,EAAE;QAClC,OAAO,YAAY,CAAC,CAAC,CAAC,CAAC;KACxB;IACD,IAAI,qBAAqB,IAAI,GAAG,EAAE;QAChC,OAAO,YAAY,CAAC,CAAC,CAAC,CAAC;KACxB;IACD,IAAI,qBAAqB,IAAI,GAAG,EAAE;QAChC,OAAO,YAAY,CAAC,CAAC,CAAC,CAAC;KACxB;IACD,OAAO,EAAE,KAAK,EAAE,WAAW,CAAC,EAAE,EAAE,CAAC;AACnC,CAAC,CAAC","sourcesContent":["import * as _ from 'lodash';\nimport { HealthState } from '@console/shared/src/components/dashboard/status-card/states';\nimport { PrometheusResponse } from '@console/internal/components/graphs';\nimport { FirehoseResult } from '@console/internal/components/utils';\nimport { getGaugeValue } from '../../utils';\n\nconst NooBaaStatus = [\n  {\n    state: HealthState.ERROR,\n    message: 'MCG is not running',\n  },\n  {\n    state: HealthState.ERROR,\n    message: 'All resources are unhealthy',\n  },\n  {\n    state: HealthState.WARNING,\n    message: 'Object Bucket has an issue',\n  },\n  {\n    state: HealthState.ERROR,\n    message: 'Many buckets have issues',\n  },\n  {\n    state: HealthState.WARNING,\n    message: 'Some buckets have issues',\n  },\n];\n\nexport const getNooBaaState: GetObjectServiceStatus = (\n  prometheusResponses = [],\n  hasLoadError,\n  isLoading,\n  k8sResponse,\n) => {\n  const [buckets, unhealthyBuckets, pools, unhealthyPools] = prometheusResponses.map((r) =>\n    getGaugeValue(r),\n  );\n  const noobaaPhase = _.get(k8sResponse, 'data[0].status.phase');\n  const unhealthyBucketsRatio = unhealthyBuckets / buckets;\n  const noData = !(buckets && unhealthyBuckets && pools && unhealthyPools && noobaaPhase);\n\n  if (hasLoadError) {\n    return { state: HealthState.UNKNOWN };\n  }\n  if (noData) {\n    return { state: HealthState.NOT_AVAILABLE };\n  }\n  if (isLoading) {\n    return { state: HealthState.LOADING };\n  }\n  if (noobaaPhase !== 'Ready') {\n    return NooBaaStatus[0];\n  }\n  if (Number(pools) === Number(unhealthyPools)) {\n    return NooBaaStatus[1];\n  }\n  if (Number(unhealthyBuckets) === 1) {\n    return NooBaaStatus[2];\n  }\n  if (unhealthyBucketsRatio >= 0.5) {\n    return NooBaaStatus[3];\n  }\n  if (unhealthyBucketsRatio >= 0.3) {\n    return NooBaaStatus[4];\n  }\n  return { state: HealthState.OK };\n};\n\nexport type ObjectServiceState = { state: HealthState; message?: string };\n\ntype GetObjectServiceStatus = (\n  prometheusResponses: PrometheusResponse[],\n  hasLoadError: boolean,\n  isLoading: boolean,\n  k8sResponse?: FirehoseResult,\n) => ObjectServiceState;\n"]}]}