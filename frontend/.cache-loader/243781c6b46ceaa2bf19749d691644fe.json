{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/pipelineruns/pipeline-bars.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/pipelineruns/pipeline-bars.tsx","mtime":1616735742470},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport HorizontalStackedBars from '../utils/horizontal-stacked-bars';\nimport { getTaskStatus, runStatus, getRunStatusColor, } from '../utils/pipeline-augment';\nimport TaskStatusToolTip from './task-status-tooltip';\nexport const PipelineBars = ({ pipelinerun, pipeline }) => {\n    const taskStatus = getTaskStatus(pipelinerun, pipeline === null || pipeline === void 0 ? void 0 : pipeline.data);\n    return (React.createElement(Tooltip, { content: React.createElement(TaskStatusToolTip, { taskStatus: taskStatus }) },\n        React.createElement(HorizontalStackedBars, { height: \"1em\", inline: true, values: Object.keys(runStatus).map((status) => ({\n                color: getRunStatusColor(runStatus[status]).pftoken.value,\n                name: status,\n                size: taskStatus[runStatus[status]],\n            })) })));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/pipelineruns/pipeline-bars.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/pipelineruns/pipeline-bars.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,OAAO,EAAE,MAAM,wBAAwB,CAAC;AACjD,OAAO,qBAAqB,MAAM,kCAAkC,CAAC;AACrE,OAAO,EACL,aAAa,EACb,SAAS,EACT,iBAAiB,GAGlB,MAAM,2BAA2B,CAAC;AACnC,OAAO,iBAAiB,MAAM,uBAAuB,CAAC;AAOtD,MAAM,CAAC,MAAM,YAAY,GAA+B,CAAC,EAAE,WAAW,EAAE,QAAQ,EAAE,EAAE,EAAE;IACpF,MAAM,UAAU,GAAG,aAAa,CAAC,WAAW,EAAE,QAAQ,aAAR,QAAQ,uBAAR,QAAQ,CAAE,IAAI,CAAC,CAAC;IAE9D,OAAO,CACL,oBAAC,OAAO,IAAC,OAAO,EAAE,oBAAC,iBAAiB,IAAC,UAAU,EAAE,UAAU,GAAI;QAC7D,oBAAC,qBAAqB,IACpB,MAAM,EAAC,KAAK,EACZ,MAAM,QACN,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;gBAC9C,KAAK,EAAE,iBAAiB,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK;gBACzD,IAAI,EAAE,MAAM;gBACZ,IAAI,EAAE,UAAU,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC;aACpC,CAAC,CAAC,GACH,CACM,CACX,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport HorizontalStackedBars from '../utils/horizontal-stacked-bars';\nimport {\n  getTaskStatus,\n  runStatus,\n  getRunStatusColor,\n  Pipeline,\n  PipelineRun,\n} from '../utils/pipeline-augment';\nimport TaskStatusToolTip from './task-status-tooltip';\n\nexport interface PipelineBarProps {\n  pipelinerun: PipelineRun;\n  pipeline?: { data: Pipeline };\n}\n\nexport const PipelineBars: React.FC<PipelineBarProps> = ({ pipelinerun, pipeline }) => {\n  const taskStatus = getTaskStatus(pipelinerun, pipeline?.data);\n\n  return (\n    <Tooltip content={<TaskStatusToolTip taskStatus={taskStatus} />}>\n      <HorizontalStackedBars\n        height=\"1em\"\n        inline\n        values={Object.keys(runStatus).map((status) => ({\n          color: getRunStatusColor(runStatus[status]).pftoken.value,\n          name: status,\n          size: taskStatus[runStatus[status]],\n        }))}\n      />\n    </Tooltip>\n  );\n};\n"]}]}