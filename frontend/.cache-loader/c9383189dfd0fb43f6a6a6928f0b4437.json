{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/tile-view-page.jsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/tile-view-page.jsx","mtime":1615298458750},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as PropTypes from 'prop-types';\nimport { FilterSidePanel, FilterSidePanelCategory, FilterSidePanelCategoryItem, VerticalTabs, VerticalTabsTab, } from '@patternfly/react-catalog-view-extension';\nimport { FormControl } from 'patternfly-react';\nimport { Button, EmptyState, EmptyStateBody, EmptyStateSecondaryActions, EmptyStateVariant, Gallery, GalleryItem, Title, } from '@patternfly/react-core';\nimport { history } from './router';\nimport { isModalOpen } from '../modals';\nimport { Dropdown } from '../utils';\nexport const FilterTypes = {\n    category: 'category',\n    keyword: 'keyword',\n};\nconst filterSubcategories = (category, item) => {\n    if (!category.subcategories) {\n        if (!category.values) {\n            return [];\n        }\n        let values = _.get(item, category.field);\n        if (!Array.isArray(values)) {\n            values = [values];\n        }\n        const intersection = [category.values, values].reduce((a, b) => a.filter((c) => b.includes(c)));\n        if (!_.isEmpty(intersection)) {\n            return [category];\n        }\n        return [];\n    }\n    const matchedSubcategories = [];\n    _.forOwn(category.subcategories, (subCategory) => {\n        let values = _.get(item, category.field);\n        if (!Array.isArray(values)) {\n            values = [values];\n        }\n        const valuesIntersection = [subCategory.values, values].reduce((a, b) => a.filter((c) => b.includes(c)));\n        if (!_.isEmpty(valuesIntersection)) {\n            matchedSubcategories.push(subCategory, ...filterSubcategories(subCategory, item));\n        }\n    });\n    return matchedSubcategories;\n};\n// categorize item under sub and main categories\nconst addItem = (item, category, subcategory = null) => {\n    // Add the item to the category\n    if (!category.items) {\n        category.items = [item];\n    }\n    else if (!category.items.includes(item)) {\n        category.items = category.items.concat(item);\n    }\n    // Add the item to the subcategory\n    if (subcategory) {\n        if (!subcategory.items) {\n            subcategory.items = [item];\n        }\n        else if (!subcategory.items.includes(item)) {\n            subcategory.items = subcategory.items.concat(item);\n        }\n    }\n};\nconst isCategoryEmpty = ({ items }) => _.isEmpty(items);\nconst pruneCategoriesWithNoItems = (categories) => {\n    if (!categories) {\n        return;\n    }\n    _.forOwn(categories, (category, key) => {\n        if (isCategoryEmpty(category)) {\n            delete categories[key];\n        }\n        else {\n            pruneCategoriesWithNoItems(category.subcategories);\n        }\n    });\n};\nconst processSubCategories = (category, itemsSorter) => {\n    _.forOwn(category.subcategories, (subcategory) => {\n        if (subcategory.items) {\n            subcategory.numItems = _.size(subcategory.items);\n            subcategory.items = itemsSorter(subcategory.items);\n            processSubCategories(subcategory, itemsSorter);\n        }\n        if (category.subcategories) {\n            _.each(category.items, (item) => {\n                const included = _.find(_.keys(category.subcategories), (subcat) => _.includes(category.subcategories[subcat].items, item));\n                if (!included) {\n                    let otherCategory = _.get(category.subcategories, 'other');\n                    if (!otherCategory) {\n                        otherCategory = { id: `${category.id}-other`, label: 'Other', items: [] };\n                        category.subcategories.other = otherCategory;\n                    }\n                    otherCategory.items.push(item);\n                }\n            });\n        }\n    });\n};\n// calculate numItems per Category and subcategories, sort items\nconst processCategories = (categories, itemsSorter) => {\n    _.forOwn(categories, (category) => {\n        if (category.items) {\n            category.numItems = _.size(category.items);\n            category.items = itemsSorter(category.items);\n            processSubCategories(category, itemsSorter);\n        }\n    });\n};\nconst categorize = (items, categories) => {\n    // Categorize each item\n    _.each(items, (item) => {\n        let itemCategorized = false;\n        _.each(categories, (category) => {\n            const matchedSubcategories = filterSubcategories(category, item);\n            _.each(matchedSubcategories, (subcategory) => {\n                addItem(item, category, subcategory); // add to subcategory & main category\n                itemCategorized = true;\n            });\n        });\n        if (!itemCategorized) {\n            addItem(item, categories.other); // add to Other category\n        }\n    });\n    categories.all.numItems = _.size(items);\n    categories.all.items = items;\n};\n/**\n * Creates an items array under each category and subcategory.  If no match, categorizes item\n * under 'Other' main category.\n * (exported for test purposes)\n */\nexport const categorizeItems = (items, itemsSorter, initCategories) => {\n    const allCategory = { id: 'all', label: 'All Items' };\n    const otherCategory = { id: 'other', label: 'Other' };\n    const categories = Object.assign(Object.assign({ all: allCategory }, _.cloneDeep(initCategories)), { other: otherCategory });\n    categorize(items, categories);\n    pruneCategoriesWithNoItems(categories);\n    processCategories(categories, itemsSorter);\n    return categories;\n};\nconst clearItemsFromCategories = (categories) => {\n    _.forOwn(categories, (category) => {\n        category.numItems = 0;\n        category.items = [];\n        clearItemsFromCategories(category.subcategories);\n    });\n};\nconst filterByKeyword = (items, filters, compFunction) => {\n    const { keyword } = filters;\n    if (!keyword || !keyword.active) {\n        return items;\n    }\n    const filterString = keyword.value.toLowerCase();\n    return _.filter(items, (item) => compFunction(filterString, item));\n};\nconst filterByGroup = (items, filters) => {\n    // Filter items by each filter group\n    return _.reduce(filters, (filtered, group, key) => {\n        if (key === FilterTypes.keyword) {\n            return filtered;\n        }\n        // Only apply active filters\n        const activeFilters = _.filter(group, 'active');\n        if (activeFilters.length) {\n            const values = _.reduce(activeFilters, (filterValues, filter) => {\n                filterValues.push(filter.value, ..._.get(filter, 'synonyms', []));\n                return filterValues;\n            }, []);\n            filtered[key] = _.filter(items, (item) => {\n                if (Array.isArray(item[key])) {\n                    return item[key].some((f) => values.includes(f));\n                }\n                return values.includes(item[key]);\n            });\n        }\n        return filtered;\n    }, {});\n};\nconst filterItems = (items, filters, keywordCompare) => {\n    if (_.isEmpty(filters)) {\n        return items;\n    }\n    // Filter items by keyword first\n    const filteredByKeyword = filterByKeyword(items, filters, keywordCompare);\n    // Apply each filter property individually. Example:\n    //  filteredByGroup = {\n    //    provider: [/*array of items filtered by provider*/],\n    //    healthIndex: [/*array of items filtered by healthIndex*/],\n    //  };\n    const filteredByGroup = filterByGroup(filteredByKeyword, filters);\n    // Intersection of individually applied filters is all filters\n    // In the case no filters are active, returns items filteredByKeyword\n    return [..._.values(filteredByGroup), filteredByKeyword].reduce((a, b) => a.filter((c) => b.includes(c)));\n};\nconst recategorizeItems = (items, itemsSorter, filters, keywordCompare, categories) => {\n    const filteredItems = filterItems(items, filters, keywordCompare);\n    const newCategories = _.cloneDeep(categories);\n    clearItemsFromCategories(newCategories);\n    categorize(filteredItems, newCategories);\n    processCategories(newCategories, itemsSorter);\n    return newCategories;\n};\nconst isActiveTab = (activeId, category) => {\n    return _.has(category.subcategories, activeId);\n};\nconst hasActiveDescendant = (activeId, category) => {\n    if (_.has(category.subcategories, activeId)) {\n        return true;\n    }\n    return _.some(category.subcategories, (subcategory) => hasActiveDescendant(activeId, subcategory));\n};\nconst findActiveCategory = (activeId, categories) => {\n    let activeCategory = null;\n    _.forOwn(categories, (category) => {\n        if (activeCategory) {\n            return;\n        }\n        if (category.id === activeId) {\n            activeCategory = category;\n        }\n        else {\n            activeCategory = findActiveCategory(activeId, category.subcategories);\n        }\n    });\n    return activeCategory;\n};\nconst determineAvailableFilters = (initialFilters, items, filterGroups) => {\n    const filters = _.cloneDeep(initialFilters);\n    _.each(filterGroups, (field) => {\n        _.each(items, (item) => {\n            const value = item[field];\n            if (value) {\n                _.set(filters, [field, value], {\n                    label: value,\n                    value,\n                    active: false,\n                });\n            }\n        });\n    });\n    return filters;\n};\nconst getActiveFilters = (keywordFilter, groupFilters, activeFilters, categoryFilter = null, storeFilterKey = null, filterRetentionPreference = null) => {\n    activeFilters.keyword.value = keywordFilter || '';\n    activeFilters.keyword.active = !!keywordFilter;\n    const userFilters = storeFilterKey ? localStorage.getItem(storeFilterKey) : null;\n    if (userFilters) {\n        try {\n            const lastFilters = JSON.parse(userFilters);\n            if (lastFilters) {\n                if (filterRetentionPreference) {\n                    _.each(filterRetentionPreference, (filterGroup) => {\n                        if (!groupFilters || !groupFilters[filterGroup]) {\n                            if (lastFilters[filterGroup]) {\n                                activeFilters[filterGroup] = lastFilters[filterGroup];\n                            }\n                        }\n                    });\n                }\n            }\n        }\n        catch (e) {\n            // eslint-disable-next-line no-console\n            console.error('Failed parsing user filter settings.');\n        }\n    }\n    if (categoryFilter) {\n        // removing default and localstore filters if category filters are present over URL\n        _.each(_.keys(activeFilters.kind), (key) => _.set(activeFilters, ['kind', key, 'active'], false));\n    }\n    _.forOwn(groupFilters, (filterValues, filterType) => {\n        // removing default and localstore filters if Filters are present over URL\n        _.each(_.keys(activeFilters[filterType]), (key) => _.set(activeFilters, [filterType, key, 'active'], false));\n        _.each(filterValues, (filterValue) => {\n            _.set(activeFilters, [filterType, filterValue, 'active'], true);\n        });\n    });\n    return activeFilters;\n};\nexport const updateActiveFilters = (activeFilters, filterType, id, value) => {\n    if (filterType === FilterTypes.keyword) {\n        _.set(activeFilters, 'keyword.value', value);\n        _.set(activeFilters, 'keyword.active', !!value);\n    }\n    else {\n        _.set(activeFilters, [filterType, id, 'active'], value);\n    }\n    return activeFilters;\n};\nconst clearActiveFilters = (activeFilters, filterGroups) => {\n    // Clear the keyword filter\n    _.set(activeFilters, 'keyword.value', '');\n    _.set(activeFilters, 'keyword.active', false);\n    // Clear the group filters\n    _.each(filterGroups, (field) => {\n        _.each(_.keys(activeFilters[field]), (key) => _.set(activeFilters, [field, key, 'active'], false));\n    });\n    return activeFilters;\n};\nconst getFilterGroupCounts = (items, itemsSorter, filterGroups, selectedCategoryId, filters, categories, keywordCompare) => {\n    // Filter only by keyword\n    const filteredItems = filterByKeyword(items, filters, keywordCompare);\n    const categoriesForCounts = recategorizeItems(filteredItems, itemsSorter, [], keywordCompare, categories);\n    const activeCategory = findActiveCategory(selectedCategoryId, categoriesForCounts);\n    const activeItems = activeCategory ? activeCategory.items : [];\n    const newFilterCounts = {};\n    _.each(filterGroups, (filterGroup) => {\n        _.each(_.keys(filters[filterGroup]), (key) => {\n            const filterValues = [\n                _.get(filters, [filterGroup, key, 'value']),\n                ..._.get(filters, [filterGroup, key, 'synonyms'], []),\n            ];\n            const matchedItems = _.filter(activeItems, (item) => {\n                if (Array.isArray(item[filterGroup])) {\n                    return item[filterGroup].some((f) => filterValues.includes(f));\n                }\n                return filterValues.includes(item[filterGroup]);\n            });\n            _.set(newFilterCounts, [filterGroup, key], _.size(matchedItems));\n        });\n    });\n    return newFilterCounts;\n};\nconst setURLParams = (params) => {\n    const location = window.location;\n    const url = new URL(location);\n    const searchParams = `?${params.toString()}${url.hash}`;\n    history.replace(`${url.pathname}${searchParams}`);\n};\nexport const updateURLParams = (paramName, value) => {\n    const params = new URLSearchParams(window.location.search);\n    if (value) {\n        params.set(paramName, Array.isArray(value) ? JSON.stringify(value) : value);\n    }\n    else {\n        params.delete(paramName);\n    }\n    setURLParams(params);\n};\nconst clearFilterURLParams = (selectedCategoryId) => {\n    const params = new URLSearchParams();\n    if (selectedCategoryId) {\n        params.set(FilterTypes.category, selectedCategoryId);\n    }\n    setURLParams(params);\n};\nconst getActiveValuesFromURL = (availableFilters, filterGroups, groupByTypes, storeFilterKey, filterRetentionPreference) => {\n    const searchParams = new URLSearchParams(window.location.search);\n    const categoryParam = searchParams.get(FilterTypes.category);\n    const keywordFilter = searchParams.get(FilterTypes.keyword);\n    const selectedCategoryId = categoryParam || 'all';\n    let groupBy = '';\n    if (groupByTypes) {\n        groupBy = searchParams.get('groupBy') || groupByTypes.None;\n    }\n    const groupFilters = {};\n    _.each(filterGroups, (filterGroup) => {\n        const groupFilterParam = searchParams.get(filterGroup);\n        if (!groupFilterParam) {\n            return;\n        }\n        try {\n            _.set(groupFilters, filterGroup, JSON.parse(groupFilterParam));\n        }\n        catch (e) {\n            // eslint-disable-next-line no-console\n            console.warn('could not update filters from url params: could not parse search params', e);\n        }\n    });\n    const activeFilters = getActiveFilters(keywordFilter, groupFilters, availableFilters, categoryParam, storeFilterKey, filterRetentionPreference);\n    return { selectedCategoryId, activeFilters, groupBy };\n};\nexport const getFilterSearchParam = (groupFilter) => {\n    const activeValues = _.reduce(_.keys(groupFilter), (result, typeKey) => {\n        return groupFilter[typeKey].active ? result.concat(typeKey) : result;\n    }, []);\n    return _.isEmpty(activeValues) ? '' : JSON.stringify(activeValues);\n};\nconst defaultFilters = {\n    keyword: {\n        value: '',\n        active: false,\n    },\n};\nexport class TileViewPage extends React.Component {\n    constructor(props) {\n        super(props);\n        const { items, itemsSorter, getAvailableCategories, groupByTypes } = this.props;\n        const categories = getAvailableCategories(items);\n        this.state = {\n            categories: categorizeItems(items, itemsSorter, categories),\n            selectedCategoryId: 'all',\n            activeFilters: defaultFilters,\n            filterCounts: null,\n            filterGroupsShowAll: {},\n            groupBy: groupByTypes ? groupByTypes.None : '',\n        };\n        this.onUpdateFilters = this.onUpdateFilters.bind(this);\n        this.onFilterChange = this.onFilterChange.bind(this);\n        this.renderFilterGroup = this.renderFilterGroup.bind(this);\n        this.onShowAllToggle = this.onShowAllToggle.bind(this);\n        this.onGroupChange = this.onGroupChange.bind(this);\n    }\n    componentDidMount() {\n        const { items, filterGroups, getAvailableFilters, groupByTypes, storeFilterKey, filterRetentionPreference, } = this.props;\n        const { categories } = this.state;\n        const availableFilters = getAvailableFilters(defaultFilters, items, filterGroups);\n        const activeValues = getActiveValuesFromURL(availableFilters, filterGroups, groupByTypes, storeFilterKey, filterRetentionPreference);\n        this.setState(Object.assign(Object.assign({}, this.getUpdatedState(categories, activeValues.selectedCategoryId, activeValues.activeFilters)), { groupBy: activeValues.groupBy }));\n        this.filterByKeywordInput.focus({ preventScroll: true });\n    }\n    componentWillUnmount() {\n        this.unmounted = true;\n    }\n    componentDidUpdate(prevProps) {\n        const { activeFilters, selectedCategoryId, groupBy } = this.state;\n        const { items, itemsSorter, filterGroups, getAvailableCategories, getAvailableFilters, } = this.props;\n        if (!_.isEqual(items, prevProps.items)) {\n            const availableFilters = getAvailableFilters(defaultFilters, items, filterGroups);\n            const availableCategories = getAvailableCategories(items);\n            const categories = categorizeItems(items, itemsSorter, availableCategories);\n            const newActiveFilters = _.reduce(availableFilters, (updatedFilters, filterGroup, filterGroupName) => {\n                if (filterGroupName === FilterTypes.keyword) {\n                    updatedFilters.keyword = activeFilters.keyword;\n                    return updatedFilters;\n                }\n                _.each(filterGroup, (filterItem, filterItemName) => {\n                    updatedFilters[filterGroupName][filterItemName].active = _.get(activeFilters, [filterGroupName, filterItemName, 'active'], false);\n                });\n                return updatedFilters;\n            }, availableFilters);\n            this.updateMountedState(Object.assign(Object.assign({}, this.getUpdatedState(categories, selectedCategoryId, newActiveFilters)), { groupBy }));\n        }\n    }\n    getUpdatedState(categories, selectedCategoryId, activeFilters) {\n        const { items, itemsSorter, keywordCompare, filterGroups } = this.props;\n        if (!items) {\n            return;\n        }\n        const newCategories = recategorizeItems(items, itemsSorter, activeFilters, keywordCompare, categories);\n        return {\n            activeFilters,\n            selectedCategoryId,\n            categories: newCategories,\n            filterCounts: getFilterGroupCounts(items, itemsSorter, filterGroups, selectedCategoryId, activeFilters, newCategories, keywordCompare),\n        };\n    }\n    // This function is necessary due to calls to history.replace un-mounting the component before returning\n    updateMountedState(newState) {\n        if (!this.unmounted) {\n            this.setState(newState);\n        }\n    }\n    storeFilters(filters) {\n        if (this.props.storeFilterKey && this.props.filterRetentionPreference) {\n            const storeFilters = {};\n            _.each(this.props.filterRetentionPreference, (filterGroup) => {\n                if (filters[filterGroup]) {\n                    storeFilters[filterGroup] = filters[filterGroup];\n                }\n            });\n            localStorage.setItem(this.props.storeFilterKey, JSON.stringify(storeFilters));\n        }\n    }\n    clearFilters() {\n        const { filterGroups } = this.props;\n        const { activeFilters, categories, selectedCategoryId } = this.state;\n        clearFilterURLParams(selectedCategoryId);\n        const clearedFilters = clearActiveFilters(activeFilters, filterGroups);\n        this.updateMountedState(this.getUpdatedState(categories, selectedCategoryId, clearedFilters));\n        // Don't take focus if a modal was opened while the page was loading.\n        if (!isModalOpen()) {\n            this.filterByKeywordInput.focus({ preventScroll: true });\n        }\n        this.storeFilters(clearedFilters);\n    }\n    selectCategory(categoryId) {\n        const { activeFilters, categories } = this.state;\n        updateURLParams(FilterTypes.category, categoryId);\n        this.updateMountedState(this.getUpdatedState(categories, categoryId, activeFilters));\n    }\n    onUpdateFilters(updatedFilters) {\n        const { selectedCategoryId, categories } = this.state;\n        this.updateMountedState(this.getUpdatedState(categories, selectedCategoryId, updatedFilters));\n    }\n    onFilterChange(filterType, id, value) {\n        const { activeFilters, selectedCategoryId, categories } = this.state;\n        if (filterType === FilterTypes.keyword) {\n            updateURLParams(FilterTypes.keyword, `${value}`);\n        }\n        else {\n            const groupFilter = _.cloneDeep(activeFilters[filterType]);\n            _.set(groupFilter, [id, 'active'], value);\n            updateURLParams(filterType, getFilterSearchParam(groupFilter));\n        }\n        const updatedFilters = updateActiveFilters(activeFilters, filterType, id, value);\n        this.updateMountedState(this.getUpdatedState(categories, selectedCategoryId, updatedFilters));\n        this.storeFilters(updatedFilters);\n    }\n    onKeywordChange(value) {\n        this.onFilterChange('keyword', null, value);\n    }\n    onShowAllToggle(groupName) {\n        const { filterGroupsShowAll } = this.state;\n        const updatedShow = _.clone(filterGroupsShowAll);\n        _.set(updatedShow, groupName, !_.get(filterGroupsShowAll, groupName, false));\n        this.setState({ filterGroupsShowAll: updatedShow });\n    }\n    onGroupChange(value) {\n        const { groupByTypes } = this.props;\n        updateURLParams('groupBy', value === groupByTypes.None ? `` : `${value}`);\n        this.updateMountedState({ groupBy: value });\n    }\n    renderTabs(category, selectedCategoryId) {\n        const { id, label, subcategories, numItems } = category;\n        const active = id === selectedCategoryId;\n        const shown = id === 'all';\n        const tabClasses = `text-capitalize${!numItems ? ' co-catalog-tab__empty' : ''}`;\n        return (React.createElement(VerticalTabsTab, { key: id, title: label, active: active, className: tabClasses, onActivate: () => this.selectCategory(id), hasActiveDescendant: hasActiveDescendant(selectedCategoryId, category), shown: shown }, subcategories && (React.createElement(VerticalTabs, { restrictTabs: true, activeTab: isActiveTab(selectedCategoryId, category) }, _.map(subcategories, (subcategory) => this.renderTabs(subcategory, selectedCategoryId))))));\n    }\n    renderCategoryTabs(selectedCategoryId) {\n        const { categories } = this.state;\n        const activeTab = _.has(categories, selectedCategoryId);\n        return (React.createElement(VerticalTabs, { restrictTabs: true, activeTab: activeTab, shown: \"true\" }, _.map(categories, (category) => this.renderTabs(category, selectedCategoryId))));\n    }\n    renderFilterGroup(filterGroup, groupName, activeFilters, filterCounts, onFilterChange, \n    // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n    onUpdateFilters) {\n        const { filterGroupNameMap } = this.props;\n        const { filterGroupsShowAll } = this.state;\n        return (React.createElement(FilterSidePanelCategory, { key: groupName, title: filterGroupNameMap[groupName] || groupName, onShowAllToggle: () => this.onShowAllToggle(groupName), showAll: _.get(filterGroupsShowAll, groupName, false), \"data-test-group-name\": groupName }, _.map(filterGroup, (filter, filterName) => {\n            const { label, active } = filter;\n            return (React.createElement(FilterSidePanelCategoryItem, { key: filterName, count: _.get(filterCounts, [groupName, filterName], 0), checked: active, onClick: (e) => onFilterChange(groupName, filterName, e.target.checked), title: label, \"data-test\": `${groupName}-${_.kebabCase(filterName)}` }, label));\n        })));\n    }\n    renderSidePanel() {\n        let { renderFilterGroup } = this.props;\n        const { activeFilters, filterCounts } = this.state;\n        renderFilterGroup = renderFilterGroup || this.renderFilterGroup;\n        return (React.createElement(FilterSidePanel, null, _.map(activeFilters, (filterGroup, groupName) => {\n            if (groupName === FilterTypes.keyword) {\n                return;\n            }\n            return renderFilterGroup(filterGroup, groupName, activeFilters, filterCounts, this.onFilterChange, this.onUpdateFilters);\n        })));\n    }\n    renderEmptyState() {\n        const { emptyStateTitle, emptyStateInfo } = this.props;\n        return (React.createElement(EmptyState, { variant: EmptyStateVariant.full },\n            React.createElement(Title, { headingLevel: \"h2\", size: \"lg\" }, emptyStateTitle),\n            React.createElement(EmptyStateBody, null, emptyStateInfo),\n            React.createElement(EmptyStateSecondaryActions, null,\n                React.createElement(Button, { variant: \"link\", onClick: () => this.clearFilters(), \"data-test-id\": \"catalog-clear-filters\" }, \"Clear All Filters\"))));\n    }\n    renderItems(items, renderTile) {\n        return (React.createElement(Gallery, { gutter: \"sm\", className: \"co-catalog-tile-view\" }, _.map(items, (item) => (React.createElement(GalleryItem, { key: item.uid ? `gallery-${item.uid}` : `gallery-${item.obj.metadata.uid}` }, renderTile(item))))));\n    }\n    renderGroupedItems(items, groupBy, renderTile, groupItems) {\n        const groupedItems = groupItems(items, groupBy);\n        return _.map(groupedItems, (value, key) => value.length > 0 && (React.createElement(\"div\", { key: key, className: \"co-catalog-page__grouped-items\" },\n            React.createElement(Title, { className: \"co-catalog-page__group-title\", headingLevel: \"h2\", size: \"lg\" },\n                key,\n                \" (\",\n                _.size(value),\n                \")\"),\n            this.renderItems(value, renderTile))));\n    }\n    render() {\n        const { renderTile, groupItems, groupByTypes } = this.props;\n        const { activeFilters, selectedCategoryId, categories, groupBy } = this.state;\n        let activeCategory = findActiveCategory(selectedCategoryId, categories);\n        if (!activeCategory) {\n            activeCategory = findActiveCategory('all', categories);\n        }\n        return (React.createElement(\"div\", { className: \"co-catalog-page\" },\n            React.createElement(\"div\", { className: \"co-catalog-page__tabs\" },\n                this.renderCategoryTabs(activeCategory.id),\n                this.renderSidePanel()),\n            React.createElement(\"div\", { className: \"co-catalog-page__content\" },\n                React.createElement(\"div\", { className: \"co-catalog-page__header\" },\n                    React.createElement(\"div\", { className: \"co-catalog-page__heading text-capitalize\" }, activeCategory.label),\n                    React.createElement(\"div\", { className: \"co-catalog-page__filter\" },\n                        React.createElement(\"div\", null,\n                            React.createElement(FormControl, { className: \"co-catalog-page__input\", type: \"text\", inputRef: (ref) => (this.filterByKeywordInput = ref), placeholder: \"Filter by keyword...\", bsClass: \"pf-c-form-control\", value: activeFilters.keyword.value, onChange: (e) => this.onKeywordChange(e.target.value), \"aria-label\": \"Filter by keyword...\" }),\n                            groupItems && (React.createElement(Dropdown, { className: \"co-catalog-page__btn-group__group-by\", menuClassName: \"dropdown-menu--text-wrap\", items: groupByTypes, onChange: (e) => this.onGroupChange(e), titlePrefix: \"Group By\", title: groupBy }))),\n                        React.createElement(\"div\", { className: \"co-catalog-page__num-items\" },\n                            activeCategory.numItems,\n                            \" items\"))),\n                activeCategory.numItems > 0 && (React.createElement(\"div\", { className: \"co-catalog-page__grid\" }, groupItems && groupBy !== groupByTypes.None\n                    ? this.renderGroupedItems(activeCategory.items, groupBy, renderTile, groupItems)\n                    : this.renderItems(activeCategory.items, renderTile))),\n                activeCategory.numItems === 0 && this.renderEmptyState())));\n    }\n}\nTileViewPage.displayName = 'TileViewPage';\nTileViewPage.propTypes = {\n    items: PropTypes.array,\n    itemsSorter: PropTypes.func.isRequired,\n    storeFilterKey: PropTypes.string,\n    getAvailableCategories: PropTypes.func.isRequired,\n    getAvailableFilters: PropTypes.func,\n    filterRetentionPreference: PropTypes.array,\n    filterGroups: PropTypes.array.isRequired,\n    filterGroupNameMap: PropTypes.object,\n    renderFilterGroup: PropTypes.func,\n    keywordCompare: PropTypes.func.isRequired,\n    renderTile: PropTypes.func.isRequired,\n    emptyStateTitle: PropTypes.string,\n    emptyStateInfo: PropTypes.string,\n    groupItems: PropTypes.func,\n    groupByTypes: PropTypes.object,\n};\nTileViewPage.defaultProps = {\n    items: null,\n    getAvailableFilters: determineAvailableFilters,\n    filterGroupNameMap: {},\n    renderFilterGroup: null,\n    emptyStateTitle: 'No Results Match the Filter Criteria',\n    emptyStateInfo: 'No items are being shown due to the filters being applied.',\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/tile-view-page.jsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/tile-view-page.jsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,CAAC,MAAM,WAAW,CAAC;AAC/B,OAAO,KAAK,SAAS,MAAM,YAAY,CAAC;AACxC,OAAO,EACL,eAAe,EACf,uBAAuB,EACvB,2BAA2B,EAC3B,YAAY,EACZ,eAAe,GAChB,MAAM,0CAA0C,CAAC;AAClD,OAAO,EAAE,WAAW,EAAE,MAAM,kBAAkB,CAAC;AAC/C,OAAO,EACL,MAAM,EACN,UAAU,EACV,cAAc,EACd,0BAA0B,EAC1B,iBAAiB,EACjB,OAAO,EACP,WAAW,EACX,KAAK,GACN,MAAM,wBAAwB,CAAC;AAEhC,OAAO,EAAE,OAAO,EAAE,MAAM,UAAU,CAAC;AACnC,OAAO,EAAE,WAAW,EAAE,MAAM,WAAW,CAAC;AACxC,OAAO,EAAE,QAAQ,EAAE,MAAM,UAAU,CAAC;AAEpC,MAAM,CAAC,MAAM,WAAW,GAAG;IACzB,QAAQ,EAAE,UAAU;IACpB,OAAO,EAAE,SAAS;CACnB,CAAC;AAEF,MAAM,mBAAmB,GAAG,CAAC,QAAQ,EAAE,IAAI,EAAE,EAAE;IAC7C,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE;QAC3B,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE;YACpB,OAAO,EAAE,CAAC;SACX;QAED,IAAI,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;QACzC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YAC1B,MAAM,GAAG,CAAC,MAAM,CAAC,CAAC;SACnB;QAED,MAAM,YAAY,GAAG,CAAC,QAAQ,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QAChG,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE;YAC5B,OAAO,CAAC,QAAQ,CAAC,CAAC;SACnB;QAED,OAAO,EAAE,CAAC;KACX;IAED,MAAM,oBAAoB,GAAG,EAAE,CAAC;IAChC,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC,WAAW,EAAE,EAAE;QAC/C,IAAI,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAC;QAEzC,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YAC1B,MAAM,GAAG,CAAC,MAAM,CAAC,CAAC;SACnB;QAED,MAAM,kBAAkB,GAAG,CAAC,WAAW,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CACtE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAC/B,CAAC;QACF,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,kBAAkB,CAAC,EAAE;YAClC,oBAAoB,CAAC,IAAI,CAAC,WAAW,EAAE,GAAG,mBAAmB,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,CAAC;SACnF;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,oBAAoB,CAAC;AAC9B,CAAC,CAAC;AAEF,gDAAgD;AAChD,MAAM,OAAO,GAAG,CAAC,IAAI,EAAE,QAAQ,EAAE,WAAW,GAAG,IAAI,EAAE,EAAE;IACrD,+BAA+B;IAC/B,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE;QACnB,QAAQ,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,CAAC;KACzB;SAAM,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;QACzC,QAAQ,CAAC,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;KAC9C;IAED,kCAAkC;IAClC,IAAI,WAAW,EAAE;QACf,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE;YACtB,WAAW,CAAC,KAAK,GAAG,CAAC,IAAI,CAAC,CAAC;SAC5B;aAAM,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,EAAE;YAC5C,WAAW,CAAC,KAAK,GAAG,WAAW,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;SACpD;KACF;AACH,CAAC,CAAC;AAEF,MAAM,eAAe,GAAG,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;AAExD,MAAM,0BAA0B,GAAG,CAAC,UAAU,EAAE,EAAE;IAChD,IAAI,CAAC,UAAU,EAAE;QACf,OAAO;KACR;IAED,CAAC,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,QAAQ,EAAE,GAAG,EAAE,EAAE;QACrC,IAAI,eAAe,CAAC,QAAQ,CAAC,EAAE;YAC7B,OAAO,UAAU,CAAC,GAAG,CAAC,CAAC;SACxB;aAAM;YACL,0BAA0B,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;SACpD;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,oBAAoB,GAAG,CAAC,QAAQ,EAAE,WAAW,EAAE,EAAE;IACrD,CAAC,CAAC,MAAM,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC,WAAW,EAAE,EAAE;QAC/C,IAAI,WAAW,CAAC,KAAK,EAAE;YACrB,WAAW,CAAC,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YACjD,WAAW,CAAC,KAAK,GAAG,WAAW,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;YACnD,oBAAoB,CAAC,WAAW,EAAE,WAAW,CAAC,CAAC;SAChD;QACD,IAAI,QAAQ,CAAC,aAAa,EAAE;YAC1B,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,EAAE;gBAC9B,MAAM,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,EAAE,CAAC,MAAM,EAAE,EAAE,CACjE,CAAC,CAAC,QAAQ,CAAC,QAAQ,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,IAAI,CAAC,CACvD,CAAC;gBACF,IAAI,CAAC,QAAQ,EAAE;oBACb,IAAI,aAAa,GAAG,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,aAAa,EAAE,OAAO,CAAC,CAAC;oBAC3D,IAAI,CAAC,aAAa,EAAE;wBAClB,aAAa,GAAG,EAAE,EAAE,EAAE,GAAG,QAAQ,CAAC,EAAE,QAAQ,EAAE,KAAK,EAAE,OAAO,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC;wBAC1E,QAAQ,CAAC,aAAa,CAAC,KAAK,GAAG,aAAa,CAAC;qBAC9C;oBACD,aAAa,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBAChC;YACH,CAAC,CAAC,CAAC;SACJ;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,gEAAgE;AAChE,MAAM,iBAAiB,GAAG,CAAC,UAAU,EAAE,WAAW,EAAE,EAAE;IACpD,CAAC,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,QAAQ,EAAE,EAAE;QAChC,IAAI,QAAQ,CAAC,KAAK,EAAE;YAClB,QAAQ,CAAC,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAC3C,QAAQ,CAAC,KAAK,GAAG,WAAW,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;YAC7C,oBAAoB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;SAC7C;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,UAAU,GAAG,CAAC,KAAK,EAAE,UAAU,EAAE,EAAE;IACvC,uBAAuB;IACvB,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,EAAE;QACrB,IAAI,eAAe,GAAG,KAAK,CAAC;QAE5B,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,QAAQ,EAAE,EAAE;YAC9B,MAAM,oBAAoB,GAAG,mBAAmB,CAAC,QAAQ,EAAE,IAAI,CAAC,CAAC;YACjE,CAAC,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,WAAW,EAAE,EAAE;gBAC3C,OAAO,CAAC,IAAI,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC,CAAC,qCAAqC;gBAC3E,eAAe,GAAG,IAAI,CAAC;YACzB,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,eAAe,EAAE;YACpB,OAAO,CAAC,IAAI,EAAE,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,wBAAwB;SAC1D;IACH,CAAC,CAAC,CAAC;IAEH,UAAU,CAAC,GAAG,CAAC,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;IACxC,UAAU,CAAC,GAAG,CAAC,KAAK,GAAG,KAAK,CAAC;AAC/B,CAAC,CAAC;AAEF;;;;GAIG;AACH,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,KAAK,EAAE,WAAW,EAAE,cAAc,EAAE,EAAE;IACpE,MAAM,WAAW,GAAG,EAAE,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,WAAW,EAAE,CAAC;IACtD,MAAM,aAAa,GAAG,EAAE,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,OAAO,EAAE,CAAC;IAEtD,MAAM,UAAU,iCACd,GAAG,EAAE,WAAW,IACb,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,KAC9B,KAAK,EAAE,aAAa,GACrB,CAAC;IAEF,UAAU,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;IAC9B,0BAA0B,CAAC,UAAU,CAAC,CAAC;IACvC,iBAAiB,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC;IAE3C,OAAO,UAAU,CAAC;AACpB,CAAC,CAAC;AAEF,MAAM,wBAAwB,GAAG,CAAC,UAAU,EAAE,EAAE;IAC9C,CAAC,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,QAAQ,EAAE,EAAE;QAChC,QAAQ,CAAC,QAAQ,GAAG,CAAC,CAAC;QACtB,QAAQ,CAAC,KAAK,GAAG,EAAE,CAAC;QACpB,wBAAwB,CAAC,QAAQ,CAAC,aAAa,CAAC,CAAC;IACnD,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,eAAe,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,YAAY,EAAE,EAAE;IACvD,MAAM,EAAE,OAAO,EAAE,GAAG,OAAO,CAAC;IAC5B,IAAI,CAAC,OAAO,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;QAC/B,OAAO,KAAK,CAAC;KACd;IAED,MAAM,YAAY,GAAG,OAAO,CAAC,KAAK,CAAC,WAAW,EAAE,CAAC;IACjD,OAAO,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,YAAY,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC;AACrE,CAAC,CAAC;AAEF,MAAM,aAAa,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,EAAE;IACvC,oCAAoC;IACpC,OAAO,CAAC,CAAC,MAAM,CACb,OAAO,EACP,CAAC,QAAQ,EAAE,KAAK,EAAE,GAAG,EAAE,EAAE;QACvB,IAAI,GAAG,KAAK,WAAW,CAAC,OAAO,EAAE;YAC/B,OAAO,QAAQ,CAAC;SACjB;QACD,4BAA4B;QAC5B,MAAM,aAAa,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;QAChD,IAAI,aAAa,CAAC,MAAM,EAAE;YACxB,MAAM,MAAM,GAAG,CAAC,CAAC,MAAM,CACrB,aAAa,EACb,CAAC,YAAY,EAAE,MAAM,EAAE,EAAE;gBACvB,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,EAAE,UAAU,EAAE,EAAE,CAAC,CAAC,CAAC;gBAClE,OAAO,YAAY,CAAC;YACtB,CAAC,EACD,EAAE,CACH,CAAC;YAEF,QAAQ,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,EAAE;gBACvC,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,EAAE;oBAC5B,OAAO,IAAI,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;iBAClD;gBACD,OAAO,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;YACpC,CAAC,CAAC,CAAC;SACJ;QAED,OAAO,QAAQ,CAAC;IAClB,CAAC,EACD,EAAE,CACH,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,WAAW,GAAG,CAAC,KAAK,EAAE,OAAO,EAAE,cAAc,EAAE,EAAE;IACrD,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;QACtB,OAAO,KAAK,CAAC;KACd;IAED,gCAAgC;IAChC,MAAM,iBAAiB,GAAG,eAAe,CAAC,KAAK,EAAE,OAAO,EAAE,cAAc,CAAC,CAAC;IAE1E,oDAAoD;IACpD,uBAAuB;IACvB,0DAA0D;IAC1D,gEAAgE;IAChE,MAAM;IACN,MAAM,eAAe,GAAG,aAAa,CAAC,iBAAiB,EAAE,OAAO,CAAC,CAAC;IAElE,8DAA8D;IAC9D,qEAAqE;IACrE,OAAO,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,EAAE,iBAAiB,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CACvE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAC/B,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,iBAAiB,GAAG,CAAC,KAAK,EAAE,WAAW,EAAE,OAAO,EAAE,cAAc,EAAE,UAAU,EAAE,EAAE;IACpF,MAAM,aAAa,GAAG,WAAW,CAAC,KAAK,EAAE,OAAO,EAAE,cAAc,CAAC,CAAC;IAElE,MAAM,aAAa,GAAG,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;IAC9C,wBAAwB,CAAC,aAAa,CAAC,CAAC;IAExC,UAAU,CAAC,aAAa,EAAE,aAAa,CAAC,CAAC;IACzC,iBAAiB,CAAC,aAAa,EAAE,WAAW,CAAC,CAAC;IAE9C,OAAO,aAAa,CAAC;AACvB,CAAC,CAAC;AAEF,MAAM,WAAW,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,EAAE;IACzC,OAAO,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,aAAa,EAAE,QAAQ,CAAC,CAAC;AACjD,CAAC,CAAC;AAEF,MAAM,mBAAmB,GAAG,CAAC,QAAQ,EAAE,QAAQ,EAAE,EAAE;IACjD,IAAI,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,aAAa,EAAE,QAAQ,CAAC,EAAE;QAC3C,OAAO,IAAI,CAAC;KACb;IAED,OAAO,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,aAAa,EAAE,CAAC,WAAW,EAAE,EAAE,CACpD,mBAAmB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAC3C,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,kBAAkB,GAAG,CAAC,QAAQ,EAAE,UAAU,EAAE,EAAE;IAClD,IAAI,cAAc,GAAG,IAAI,CAAC;IAC1B,CAAC,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,QAAQ,EAAE,EAAE;QAChC,IAAI,cAAc,EAAE;YAClB,OAAO;SACR;QAED,IAAI,QAAQ,CAAC,EAAE,KAAK,QAAQ,EAAE;YAC5B,cAAc,GAAG,QAAQ,CAAC;SAC3B;aAAM;YACL,cAAc,GAAG,kBAAkB,CAAC,QAAQ,EAAE,QAAQ,CAAC,aAAa,CAAC,CAAC;SACvE;IACH,CAAC,CAAC,CAAC;IACH,OAAO,cAAc,CAAC;AACxB,CAAC,CAAC;AAEF,MAAM,yBAAyB,GAAG,CAAC,cAAc,EAAE,KAAK,EAAE,YAAY,EAAE,EAAE;IACxE,MAAM,OAAO,GAAG,CAAC,CAAC,SAAS,CAAC,cAAc,CAAC,CAAC;IAE5C,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,KAAK,EAAE,EAAE;QAC7B,CAAC,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,EAAE;YACrB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC;YAC1B,IAAI,KAAK,EAAE;gBACT,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE;oBAC7B,KAAK,EAAE,KAAK;oBACZ,KAAK;oBACL,MAAM,EAAE,KAAK;iBACd,CAAC,CAAC;aACJ;QACH,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC;AAEF,MAAM,gBAAgB,GAAG,CACvB,aAAa,EACb,YAAY,EACZ,aAAa,EACb,cAAc,GAAG,IAAI,EACrB,cAAc,GAAG,IAAI,EACrB,yBAAyB,GAAG,IAAI,EAChC,EAAE;IACF,aAAa,CAAC,OAAO,CAAC,KAAK,GAAG,aAAa,IAAI,EAAE,CAAC;IAClD,aAAa,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,aAAa,CAAC;IAE/C,MAAM,WAAW,GAAG,cAAc,CAAC,CAAC,CAAC,YAAY,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IACjF,IAAI,WAAW,EAAE;QACf,IAAI;YACF,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAC;YAC5C,IAAI,WAAW,EAAE;gBACf,IAAI,yBAAyB,EAAE;oBAC7B,CAAC,CAAC,IAAI,CAAC,yBAAyB,EAAE,CAAC,WAAW,EAAE,EAAE;wBAChD,IAAI,CAAC,YAAY,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,EAAE;4BAC/C,IAAI,WAAW,CAAC,WAAW,CAAC,EAAE;gCAC5B,aAAa,CAAC,WAAW,CAAC,GAAG,WAAW,CAAC,WAAW,CAAC,CAAC;6BACvD;yBACF;oBACH,CAAC,CAAC,CAAC;iBACJ;aACF;SACF;QAAC,OAAO,CAAC,EAAE;YACV,sCAAsC;YACtC,OAAO,CAAC,KAAK,CAAC,sCAAsC,CAAC,CAAC;SACvD;KACF;IAED,IAAI,cAAc,EAAE;QAClB,mFAAmF;QACnF,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CACzC,CAAC,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE,QAAQ,CAAC,EAAE,KAAK,CAAC,CACrD,CAAC;KACH;IAED,CAAC,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC,YAAY,EAAE,UAAU,EAAE,EAAE;QAClD,0EAA0E;QAC1E,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAChD,CAAC,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC,UAAU,EAAE,GAAG,EAAE,QAAQ,CAAC,EAAE,KAAK,CAAC,CACzD,CAAC;QACF,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,WAAW,EAAE,EAAE;YACnC,CAAC,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC,UAAU,EAAE,WAAW,EAAE,QAAQ,CAAC,EAAE,IAAI,CAAC,CAAC;QAClE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,OAAO,aAAa,CAAC;AACvB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,aAAa,EAAE,UAAU,EAAE,EAAE,EAAE,KAAK,EAAE,EAAE;IAC1E,IAAI,UAAU,KAAK,WAAW,CAAC,OAAO,EAAE;QACtC,CAAC,CAAC,GAAG,CAAC,aAAa,EAAE,eAAe,EAAE,KAAK,CAAC,CAAC;QAC7C,CAAC,CAAC,GAAG,CAAC,aAAa,EAAE,gBAAgB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;KACjD;SAAM;QACL,CAAC,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC,UAAU,EAAE,EAAE,EAAE,QAAQ,CAAC,EAAE,KAAK,CAAC,CAAC;KACzD;IAED,OAAO,aAAa,CAAC;AACvB,CAAC,CAAC;AAEF,MAAM,kBAAkB,GAAG,CAAC,aAAa,EAAE,YAAY,EAAE,EAAE;IACzD,2BAA2B;IAC3B,CAAC,CAAC,GAAG,CAAC,aAAa,EAAE,eAAe,EAAE,EAAE,CAAC,CAAC;IAC1C,CAAC,CAAC,GAAG,CAAC,aAAa,EAAE,gBAAgB,EAAE,KAAK,CAAC,CAAC;IAE9C,0BAA0B;IAC1B,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,KAAK,EAAE,EAAE;QAC7B,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE,CAC3C,CAAC,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,QAAQ,CAAC,EAAE,KAAK,CAAC,CACpD,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,OAAO,aAAa,CAAC;AACvB,CAAC,CAAC;AAEF,MAAM,oBAAoB,GAAG,CAC3B,KAAK,EACL,WAAW,EACX,YAAY,EACZ,kBAAkB,EAClB,OAAO,EACP,UAAU,EACV,cAAc,EACd,EAAE;IACF,yBAAyB;IACzB,MAAM,aAAa,GAAG,eAAe,CAAC,KAAK,EAAE,OAAO,EAAE,cAAc,CAAC,CAAC;IAEtE,MAAM,mBAAmB,GAAG,iBAAiB,CAC3C,aAAa,EACb,WAAW,EACX,EAAE,EACF,cAAc,EACd,UAAU,CACX,CAAC;IAEF,MAAM,cAAc,GAAG,kBAAkB,CAAC,kBAAkB,EAAE,mBAAmB,CAAC,CAAC;IACnF,MAAM,WAAW,GAAG,cAAc,CAAC,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;IAC/D,MAAM,eAAe,GAAG,EAAE,CAAC;IAE3B,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,WAAW,EAAE,EAAE;QACnC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,EAAE,CAAC,GAAG,EAAE,EAAE;YAC3C,MAAM,YAAY,GAAG;gBACnB,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE,OAAO,CAAC,CAAC;gBAC3C,GAAG,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,WAAW,EAAE,GAAG,EAAE,UAAU,CAAC,EAAE,EAAE,CAAC;aACtD,CAAC;YAEF,MAAM,YAAY,GAAG,CAAC,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,EAAE;gBAClD,IAAI,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,EAAE;oBACpC,OAAO,IAAI,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;iBAChE;gBAED,OAAO,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;YAClD,CAAC,CAAC,CAAC;YAEH,CAAC,CAAC,GAAG,CAAC,eAAe,EAAE,CAAC,WAAW,EAAE,GAAG,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;QACnE,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,OAAO,eAAe,CAAC;AACzB,CAAC,CAAC;AAEF,MAAM,YAAY,GAAG,CAAC,MAAM,EAAE,EAAE;IAC9B,MAAM,QAAQ,GAAG,MAAM,CAAC,QAAQ,CAAC;IACjC,MAAM,GAAG,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC;IAC9B,MAAM,YAAY,GAAG,IAAI,MAAM,CAAC,QAAQ,EAAE,GAAG,GAAG,CAAC,IAAI,EAAE,CAAC;IAExD,OAAO,CAAC,OAAO,CAAC,GAAG,GAAG,CAAC,QAAQ,GAAG,YAAY,EAAE,CAAC,CAAC;AACpD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,SAAS,EAAE,KAAK,EAAE,EAAE;IAClD,MAAM,MAAM,GAAG,IAAI,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IAE3D,IAAI,KAAK,EAAE;QACT,MAAM,CAAC,GAAG,CAAC,SAAS,EAAE,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;KAC7E;SAAM;QACL,MAAM,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;KAC1B;IACD,YAAY,CAAC,MAAM,CAAC,CAAC;AACvB,CAAC,CAAC;AAEF,MAAM,oBAAoB,GAAG,CAAC,kBAAkB,EAAE,EAAE;IAClD,MAAM,MAAM,GAAG,IAAI,eAAe,EAAE,CAAC;IAErC,IAAI,kBAAkB,EAAE;QACtB,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAC;KACtD;IAED,YAAY,CAAC,MAAM,CAAC,CAAC;AACvB,CAAC,CAAC;AAEF,MAAM,sBAAsB,GAAG,CAC7B,gBAAgB,EAChB,YAAY,EACZ,YAAY,EACZ,cAAc,EACd,yBAAyB,EACzB,EAAE;IACF,MAAM,YAAY,GAAG,IAAI,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;IACjE,MAAM,aAAa,GAAG,YAAY,CAAC,GAAG,CAAC,WAAW,CAAC,QAAQ,CAAC,CAAC;IAC7D,MAAM,aAAa,GAAG,YAAY,CAAC,GAAG,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;IAC5D,MAAM,kBAAkB,GAAG,aAAa,IAAI,KAAK,CAAC;IAClD,IAAI,OAAO,GAAG,EAAE,CAAC;IACjB,IAAI,YAAY,EAAE;QAChB,OAAO,GAAG,YAAY,CAAC,GAAG,CAAC,SAAS,CAAC,IAAI,YAAY,CAAC,IAAI,CAAC;KAC5D;IACD,MAAM,YAAY,GAAG,EAAE,CAAC;IAExB,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,WAAW,EAAE,EAAE;QACnC,MAAM,gBAAgB,GAAG,YAAY,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;QACvD,IAAI,CAAC,gBAAgB,EAAE;YACrB,OAAO;SACR;QAED,IAAI;YACF,CAAC,CAAC,GAAG,CAAC,YAAY,EAAE,WAAW,EAAE,IAAI,CAAC,KAAK,CAAC,gBAAgB,CAAC,CAAC,CAAC;SAChE;QAAC,OAAO,CAAC,EAAE;YACV,sCAAsC;YACtC,OAAO,CAAC,IAAI,CAAC,yEAAyE,EAAE,CAAC,CAAC,CAAC;SAC5F;IACH,CAAC,CAAC,CAAC;IAEH,MAAM,aAAa,GAAG,gBAAgB,CACpC,aAAa,EACb,YAAY,EACZ,gBAAgB,EAChB,aAAa,EACb,cAAc,EACd,yBAAyB,CAC1B,CAAC;IAEF,OAAO,EAAE,kBAAkB,EAAE,aAAa,EAAE,OAAO,EAAE,CAAC;AACxD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,WAAW,EAAE,EAAE;IAClD,MAAM,YAAY,GAAG,CAAC,CAAC,MAAM,CAC3B,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,EACnB,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE;QAClB,OAAO,WAAW,CAAC,OAAO,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;IACvE,CAAC,EACD,EAAE,CACH,CAAC;IAEF,OAAO,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC;AACrE,CAAC,CAAC;AAEF,MAAM,cAAc,GAAG;IACrB,OAAO,EAAE;QACP,KAAK,EAAE,EAAE;QACT,MAAM,EAAE,KAAK;KACd;CACF,CAAC;AAEF,MAAM,OAAO,YAAa,SAAQ,KAAK,CAAC,SAAS;IAC/C,YAAY,KAAK;QACf,KAAK,CAAC,KAAK,CAAC,CAAC;QACb,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,sBAAsB,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAChF,MAAM,UAAU,GAAG,sBAAsB,CAAC,KAAK,CAAC,CAAC;QAEjD,IAAI,CAAC,KAAK,GAAG;YACX,UAAU,EAAE,eAAe,CAAC,KAAK,EAAE,WAAW,EAAE,UAAU,CAAC;YAC3D,kBAAkB,EAAE,KAAK;YACzB,aAAa,EAAE,cAAc;YAC7B,YAAY,EAAE,IAAI;YAClB,mBAAmB,EAAE,EAAE;YACvB,OAAO,EAAE,YAAY,CAAC,CAAC,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;SAC/C,CAAC;QAEF,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvD,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrD,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3D,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACvD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrD,CAAC;IAED,iBAAiB;QACf,MAAM,EACJ,KAAK,EACL,YAAY,EACZ,mBAAmB,EACnB,YAAY,EACZ,cAAc,EACd,yBAAyB,GAC1B,GAAG,IAAI,CAAC,KAAK,CAAC;QACf,MAAM,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAClC,MAAM,gBAAgB,GAAG,mBAAmB,CAAC,cAAc,EAAE,KAAK,EAAE,YAAY,CAAC,CAAC;QAClF,MAAM,YAAY,GAAG,sBAAsB,CACzC,gBAAgB,EAChB,YAAY,EACZ,YAAY,EACZ,cAAc,EACd,yBAAyB,CAC1B,CAAC;QAEF,IAAI,CAAC,QAAQ,iCACR,IAAI,CAAC,eAAe,CACrB,UAAU,EACV,YAAY,CAAC,kBAAkB,EAC/B,YAAY,CAAC,aAAa,CAC3B,KACD,OAAO,EAAE,YAAY,CAAC,OAAO,IAC7B,CAAC;QACH,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC;IAC3D,CAAC;IAED,oBAAoB;QAClB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;IACxB,CAAC;IAED,kBAAkB,CAAC,SAAS;QAC1B,MAAM,EAAE,aAAa,EAAE,kBAAkB,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAClE,MAAM,EACJ,KAAK,EACL,WAAW,EACX,YAAY,EACZ,sBAAsB,EACtB,mBAAmB,GACpB,GAAG,IAAI,CAAC,KAAK,CAAC;QAEf,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,EAAE,SAAS,CAAC,KAAK,CAAC,EAAE;YACtC,MAAM,gBAAgB,GAAG,mBAAmB,CAAC,cAAc,EAAE,KAAK,EAAE,YAAY,CAAC,CAAC;YAClF,MAAM,mBAAmB,GAAG,sBAAsB,CAAC,KAAK,CAAC,CAAC;YAC1D,MAAM,UAAU,GAAG,eAAe,CAAC,KAAK,EAAE,WAAW,EAAE,mBAAmB,CAAC,CAAC;YAE5E,MAAM,gBAAgB,GAAG,CAAC,CAAC,MAAM,CAC/B,gBAAgB,EAChB,CAAC,cAAc,EAAE,WAAW,EAAE,eAAe,EAAE,EAAE;gBAC/C,IAAI,eAAe,KAAK,WAAW,CAAC,OAAO,EAAE;oBAC3C,cAAc,CAAC,OAAO,GAAG,aAAa,CAAC,OAAO,CAAC;oBAC/C,OAAO,cAAc,CAAC;iBACvB;gBACD,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,UAAU,EAAE,cAAc,EAAE,EAAE;oBACjD,cAAc,CAAC,eAAe,CAAC,CAAC,cAAc,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,GAAG,CAC5D,aAAa,EACb,CAAC,eAAe,EAAE,cAAc,EAAE,QAAQ,CAAC,EAC3C,KAAK,CACN,CAAC;gBACJ,CAAC,CAAC,CAAC;gBAEH,OAAO,cAAc,CAAC;YACxB,CAAC,EACD,gBAAgB,CACjB,CAAC;YAEF,IAAI,CAAC,kBAAkB,iCAClB,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,kBAAkB,EAAE,gBAAgB,CAAC,KACzE,OAAO,IACP,CAAC;SACJ;IACH,CAAC;IAED,eAAe,CAAC,UAAU,EAAE,kBAAkB,EAAE,aAAa;QAC3D,MAAM,EAAE,KAAK,EAAE,WAAW,EAAE,cAAc,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAExE,IAAI,CAAC,KAAK,EAAE;YACV,OAAO;SACR;QAED,MAAM,aAAa,GAAG,iBAAiB,CACrC,KAAK,EACL,WAAW,EACX,aAAa,EACb,cAAc,EACd,UAAU,CACX,CAAC;QAEF,OAAO;YACL,aAAa;YACb,kBAAkB;YAClB,UAAU,EAAE,aAAa;YACzB,YAAY,EAAE,oBAAoB,CAChC,KAAK,EACL,WAAW,EACX,YAAY,EACZ,kBAAkB,EAClB,aAAa,EACb,aAAa,EACb,cAAc,CACf;SACF,CAAC;IACJ,CAAC;IAED,wGAAwG;IACxG,kBAAkB,CAAC,QAAQ;QACzB,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;SACzB;IACH,CAAC;IAED,YAAY,CAAC,OAAO;QAClB,IAAI,IAAI,CAAC,KAAK,CAAC,cAAc,IAAI,IAAI,CAAC,KAAK,CAAC,yBAAyB,EAAE;YACrE,MAAM,YAAY,GAAG,EAAE,CAAC;YACxB,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,yBAAyB,EAAE,CAAC,WAAW,EAAE,EAAE;gBAC3D,IAAI,OAAO,CAAC,WAAW,CAAC,EAAE;oBACxB,YAAY,CAAC,WAAW,CAAC,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC;iBAClD;YACH,CAAC,CAAC,CAAC;YACH,YAAY,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,CAAC,CAAC;SAC/E;IACH,CAAC;IAED,YAAY;QACV,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACpC,MAAM,EAAE,aAAa,EAAE,UAAU,EAAE,kBAAkB,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAErE,oBAAoB,CAAC,kBAAkB,CAAC,CAAC;QAEzC,MAAM,cAAc,GAAG,kBAAkB,CAAC,aAAa,EAAE,YAAY,CAAC,CAAC;QAEvE,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,kBAAkB,EAAE,cAAc,CAAC,CAAC,CAAC;QAE9F,qEAAqE;QACrE,IAAI,CAAC,WAAW,EAAE,EAAE;YAClB,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,EAAE,aAAa,EAAE,IAAI,EAAE,CAAC,CAAC;SAC1D;QAED,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;IACpC,CAAC;IAED,cAAc,CAAC,UAAU;QACvB,MAAM,EAAE,aAAa,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAEjD,eAAe,CAAC,WAAW,CAAC,QAAQ,EAAE,UAAU,CAAC,CAAC;QAClD,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,UAAU,EAAE,aAAa,CAAC,CAAC,CAAC;IACvF,CAAC;IAED,eAAe,CAAC,cAAc;QAC5B,MAAM,EAAE,kBAAkB,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACtD,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,kBAAkB,EAAE,cAAc,CAAC,CAAC,CAAC;IAChG,CAAC;IAED,cAAc,CAAC,UAAU,EAAE,EAAE,EAAE,KAAK;QAClC,MAAM,EAAE,aAAa,EAAE,kBAAkB,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAErE,IAAI,UAAU,KAAK,WAAW,CAAC,OAAO,EAAE;YACtC,eAAe,CAAC,WAAW,CAAC,OAAO,EAAE,GAAG,KAAK,EAAE,CAAC,CAAC;SAClD;aAAM;YACL,MAAM,WAAW,GAAG,CAAC,CAAC,SAAS,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC;YAC3D,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,EAAE,EAAE,QAAQ,CAAC,EAAE,KAAK,CAAC,CAAC;YAC1C,eAAe,CAAC,UAAU,EAAE,oBAAoB,CAAC,WAAW,CAAC,CAAC,CAAC;SAChE;QAED,MAAM,cAAc,GAAG,mBAAmB,CAAC,aAAa,EAAE,UAAU,EAAE,EAAE,EAAE,KAAK,CAAC,CAAC;QAEjF,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,eAAe,CAAC,UAAU,EAAE,kBAAkB,EAAE,cAAc,CAAC,CAAC,CAAC;QAE9F,IAAI,CAAC,YAAY,CAAC,cAAc,CAAC,CAAC;IACpC,CAAC;IAED,eAAe,CAAC,KAAK;QACnB,IAAI,CAAC,cAAc,CAAC,SAAS,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC;IAC9C,CAAC;IAED,eAAe,CAAC,SAAS;QACvB,MAAM,EAAE,mBAAmB,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAC3C,MAAM,WAAW,GAAG,CAAC,CAAC,KAAK,CAAC,mBAAmB,CAAC,CAAC;QACjD,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,mBAAmB,EAAE,SAAS,EAAE,KAAK,CAAC,CAAC,CAAC;QAC7E,IAAI,CAAC,QAAQ,CAAC,EAAE,mBAAmB,EAAE,WAAW,EAAE,CAAC,CAAC;IACtD,CAAC;IAED,aAAa,CAAC,KAAK;QACjB,MAAM,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACpC,eAAe,CAAC,SAAS,EAAE,KAAK,KAAK,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,KAAK,EAAE,CAAC,CAAC;QAC1E,IAAI,CAAC,kBAAkB,CAAC,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,CAAC;IAC9C,CAAC;IAED,UAAU,CAAC,QAAQ,EAAE,kBAAkB;QACrC,MAAM,EAAE,EAAE,EAAE,KAAK,EAAE,aAAa,EAAE,QAAQ,EAAE,GAAG,QAAQ,CAAC;QACxD,MAAM,MAAM,GAAG,EAAE,KAAK,kBAAkB,CAAC;QACzC,MAAM,KAAK,GAAG,EAAE,KAAK,KAAK,CAAC;QAE3B,MAAM,UAAU,GAAG,kBAAkB,CAAC,QAAQ,CAAC,CAAC,CAAC,wBAAwB,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC;QACjF,OAAO,CACL,oBAAC,eAAe,IACd,GAAG,EAAE,EAAE,EACP,KAAK,EAAE,KAAK,EACZ,MAAM,EAAE,MAAM,EACd,SAAS,EAAE,UAAU,EACrB,UAAU,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,EACzC,mBAAmB,EAAE,mBAAmB,CAAC,kBAAkB,EAAE,QAAQ,CAAC,EACtE,KAAK,EAAE,KAAK,IAEX,aAAa,IAAI,CAChB,oBAAC,YAAY,IAAC,YAAY,QAAC,SAAS,EAAE,WAAW,CAAC,kBAAkB,EAAE,QAAQ,CAAC,IAC5E,CAAC,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC,WAAW,EAAE,EAAE,CACpC,IAAI,CAAC,UAAU,CAAC,WAAW,EAAE,kBAAkB,CAAC,CACjD,CACY,CAChB,CACe,CACnB,CAAC;IACJ,CAAC;IAED,kBAAkB,CAAC,kBAAkB;QACnC,MAAM,EAAE,UAAU,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAClC,MAAM,SAAS,GAAG,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,kBAAkB,CAAC,CAAC;QAExD,OAAO,CACL,oBAAC,YAAY,IAAC,YAAY,QAAC,SAAS,EAAE,SAAS,EAAE,KAAK,EAAC,MAAM,IAC1D,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,EAAE,kBAAkB,CAAC,CAAC,CAClE,CAChB,CAAC;IACJ,CAAC;IAED,iBAAiB,CACf,WAAW,EACX,SAAS,EACT,aAAa,EACb,YAAY,EACZ,cAAc;IACd,6EAA6E;IAC7E,eAAe;QAEf,MAAM,EAAE,kBAAkB,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAC1C,MAAM,EAAE,mBAAmB,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAE3C,OAAO,CACL,oBAAC,uBAAuB,IACtB,GAAG,EAAE,SAAS,EACd,KAAK,EAAE,kBAAkB,CAAC,SAAS,CAAC,IAAI,SAAS,EACjD,eAAe,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,SAAS,CAAC,EACtD,OAAO,EAAE,CAAC,CAAC,GAAG,CAAC,mBAAmB,EAAE,SAAS,EAAE,KAAK,CAAC,0BAC/B,SAAS,IAE9B,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,MAAM,EAAE,UAAU,EAAE,EAAE;YACzC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC;YACjC,OAAO,CACL,oBAAC,2BAA2B,IAC1B,GAAG,EAAE,UAAU,EACf,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC,SAAS,EAAE,UAAU,CAAC,EAAE,CAAC,CAAC,EACtD,OAAO,EAAE,MAAM,EACf,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,cAAc,CAAC,SAAS,EAAE,UAAU,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,EACvE,KAAK,EAAE,KAAK,eACD,GAAG,SAAS,IAAI,CAAC,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,IAEnD,KAAK,CACsB,CAC/B,CAAC;QACJ,CAAC,CAAC,CACsB,CAC3B,CAAC;IACJ,CAAC;IAED,eAAe;QACb,IAAI,EAAE,iBAAiB,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACvC,MAAM,EAAE,aAAa,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAEnD,iBAAiB,GAAG,iBAAiB,IAAI,IAAI,CAAC,iBAAiB,CAAC;QAEhE,OAAO,CACL,oBAAC,eAAe,QACb,CAAC,CAAC,GAAG,CAAC,aAAa,EAAE,CAAC,WAAW,EAAE,SAAS,EAAE,EAAE;YAC/C,IAAI,SAAS,KAAK,WAAW,CAAC,OAAO,EAAE;gBACrC,OAAO;aACR;YACD,OAAO,iBAAiB,CACtB,WAAW,EACX,SAAS,EACT,aAAa,EACb,YAAY,EACZ,IAAI,CAAC,cAAc,EACnB,IAAI,CAAC,eAAe,CACrB,CAAC;QACJ,CAAC,CAAC,CACc,CACnB,CAAC;IACJ,CAAC;IAED,gBAAgB;QACd,MAAM,EAAE,eAAe,EAAE,cAAc,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACvD,OAAO,CACL,oBAAC,UAAU,IAAC,OAAO,EAAE,iBAAiB,CAAC,IAAI;YACzC,oBAAC,KAAK,IAAC,YAAY,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI,IAC/B,eAAe,CACV;YACR,oBAAC,cAAc,QAAE,cAAc,CAAkB;YACjD,oBAAC,0BAA0B;gBACzB,oBAAC,MAAM,IACL,OAAO,EAAC,MAAM,EACd,OAAO,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,YAAY,EAAE,kBACrB,uBAAuB,wBAG7B,CACkB,CAClB,CACd,CAAC;IACJ,CAAC;IAED,WAAW,CAAC,KAAK,EAAE,UAAU;QAC3B,OAAO,CACL,oBAAC,OAAO,IAAC,MAAM,EAAC,IAAI,EAAC,SAAS,EAAC,sBAAsB,IAClD,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,CACtB,oBAAC,WAAW,IAAC,GAAG,EAAE,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,WAAW,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,WAAW,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE,IACpF,UAAU,CAAC,IAAI,CAAC,CACL,CACf,CAAC,CACM,CACX,CAAC;IACJ,CAAC;IAED,kBAAkB,CAAC,KAAK,EAAE,OAAO,EAAE,UAAU,EAAE,UAAU;QACvD,MAAM,YAAY,GAAG,UAAU,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;QAChD,OAAO,CAAC,CAAC,GAAG,CACV,YAAY,EACZ,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE,CACb,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,CAClB,6BAAK,GAAG,EAAE,GAAG,EAAE,SAAS,EAAC,gCAAgC;YACvD,oBAAC,KAAK,IAAC,SAAS,EAAC,8BAA8B,EAAC,YAAY,EAAC,IAAI,EAAC,IAAI,EAAC,IAAI;gBACxE,GAAG;;gBAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC;oBACf;YACP,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,UAAU,CAAC,CAChC,CACP,CACJ,CAAC;IACJ,CAAC;IAED,MAAM;QACJ,MAAM,EAAE,UAAU,EAAE,UAAU,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAC5D,MAAM,EAAE,aAAa,EAAE,kBAAkB,EAAE,UAAU,EAAE,OAAO,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAC9E,IAAI,cAAc,GAAG,kBAAkB,CAAC,kBAAkB,EAAE,UAAU,CAAC,CAAC;QACxE,IAAI,CAAC,cAAc,EAAE;YACnB,cAAc,GAAG,kBAAkB,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;SACxD;QAED,OAAO,CACL,6BAAK,SAAS,EAAC,iBAAiB;YAC9B,6BAAK,SAAS,EAAC,uBAAuB;gBACnC,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,EAAE,CAAC;gBAC1C,IAAI,CAAC,eAAe,EAAE,CACnB;YACN,6BAAK,SAAS,EAAC,0BAA0B;gBACvC,6BAAK,SAAS,EAAC,yBAAyB;oBACtC,6BAAK,SAAS,EAAC,0CAA0C,IAAE,cAAc,CAAC,KAAK,CAAO;oBACtF,6BAAK,SAAS,EAAC,yBAAyB;wBACtC;4BACE,oBAAC,WAAW,IACV,SAAS,EAAC,wBAAwB,EAClC,IAAI,EAAC,MAAM,EACX,QAAQ,EAAE,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC,IAAI,CAAC,oBAAoB,GAAG,GAAG,CAAC,EACpD,WAAW,EAAC,sBAAsB,EAClC,OAAO,EAAC,mBAAmB,EAC3B,KAAK,EAAE,aAAa,CAAC,OAAO,CAAC,KAAK,EAClC,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,gBAC1C,sBAAsB,GACjC;4BACD,UAAU,IAAI,CACb,oBAAC,QAAQ,IACP,SAAS,EAAC,sCAAsC,EAChD,aAAa,EAAC,0BAA0B,EACxC,KAAK,EAAE,YAAY,EACnB,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC,CAAC,EACtC,WAAW,EAAC,UAAU,EACtB,KAAK,EAAE,OAAO,GACd,CACH,CACG;wBACN,6BAAK,SAAS,EAAC,4BAA4B;4BAAE,cAAc,CAAC,QAAQ;qCAAa,CAC7E,CACF;gBAEL,cAAc,CAAC,QAAQ,GAAG,CAAC,IAAI,CAC9B,6BAAK,SAAS,EAAC,uBAAuB,IACnC,UAAU,IAAI,OAAO,KAAK,YAAY,CAAC,IAAI;oBAC1C,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,cAAc,CAAC,KAAK,EAAE,OAAO,EAAE,UAAU,EAAE,UAAU,CAAC;oBAChF,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,cAAc,CAAC,KAAK,EAAE,UAAU,CAAC,CAClD,CACP;gBACA,cAAc,CAAC,QAAQ,KAAK,CAAC,IAAI,IAAI,CAAC,gBAAgB,EAAE,CACrD,CACF,CACP,CAAC;IACJ,CAAC;CACF;AAED,YAAY,CAAC,WAAW,GAAG,cAAc,CAAC;AAE1C,YAAY,CAAC,SAAS,GAAG;IACvB,KAAK,EAAE,SAAS,CAAC,KAAK;IACtB,WAAW,EAAE,SAAS,CAAC,IAAI,CAAC,UAAU;IACtC,cAAc,EAAE,SAAS,CAAC,MAAM;IAChC,sBAAsB,EAAE,SAAS,CAAC,IAAI,CAAC,UAAU;IACjD,mBAAmB,EAAE,SAAS,CAAC,IAAI;IACnC,yBAAyB,EAAE,SAAS,CAAC,KAAK;IAC1C,YAAY,EAAE,SAAS,CAAC,KAAK,CAAC,UAAU;IACxC,kBAAkB,EAAE,SAAS,CAAC,MAAM;IACpC,iBAAiB,EAAE,SAAS,CAAC,IAAI;IACjC,cAAc,EAAE,SAAS,CAAC,IAAI,CAAC,UAAU;IACzC,UAAU,EAAE,SAAS,CAAC,IAAI,CAAC,UAAU;IACrC,eAAe,EAAE,SAAS,CAAC,MAAM;IACjC,cAAc,EAAE,SAAS,CAAC,MAAM;IAChC,UAAU,EAAE,SAAS,CAAC,IAAI;IAC1B,YAAY,EAAE,SAAS,CAAC,MAAM;CAC/B,CAAC;AAEF,YAAY,CAAC,YAAY,GAAG;IAC1B,KAAK,EAAE,IAAI;IACX,mBAAmB,EAAE,yBAAyB;IAC9C,kBAAkB,EAAE,EAAE;IACtB,iBAAiB,EAAE,IAAI;IACvB,eAAe,EAAE,sCAAsC;IACvD,cAAc,EAAE,4DAA4D;CAC7E,CAAC","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as PropTypes from 'prop-types';\nimport {\n  FilterSidePanel,\n  FilterSidePanelCategory,\n  FilterSidePanelCategoryItem,\n  VerticalTabs,\n  VerticalTabsTab,\n} from '@patternfly/react-catalog-view-extension';\nimport { FormControl } from 'patternfly-react';\nimport {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateSecondaryActions,\n  EmptyStateVariant,\n  Gallery,\n  GalleryItem,\n  Title,\n} from '@patternfly/react-core';\n\nimport { history } from './router';\nimport { isModalOpen } from '../modals';\nimport { Dropdown } from '../utils';\n\nexport const FilterTypes = {\n  category: 'category',\n  keyword: 'keyword',\n};\n\nconst filterSubcategories = (category, item) => {\n  if (!category.subcategories) {\n    if (!category.values) {\n      return [];\n    }\n\n    let values = _.get(item, category.field);\n    if (!Array.isArray(values)) {\n      values = [values];\n    }\n\n    const intersection = [category.values, values].reduce((a, b) => a.filter((c) => b.includes(c)));\n    if (!_.isEmpty(intersection)) {\n      return [category];\n    }\n\n    return [];\n  }\n\n  const matchedSubcategories = [];\n  _.forOwn(category.subcategories, (subCategory) => {\n    let values = _.get(item, category.field);\n\n    if (!Array.isArray(values)) {\n      values = [values];\n    }\n\n    const valuesIntersection = [subCategory.values, values].reduce((a, b) =>\n      a.filter((c) => b.includes(c)),\n    );\n    if (!_.isEmpty(valuesIntersection)) {\n      matchedSubcategories.push(subCategory, ...filterSubcategories(subCategory, item));\n    }\n  });\n\n  return matchedSubcategories;\n};\n\n// categorize item under sub and main categories\nconst addItem = (item, category, subcategory = null) => {\n  // Add the item to the category\n  if (!category.items) {\n    category.items = [item];\n  } else if (!category.items.includes(item)) {\n    category.items = category.items.concat(item);\n  }\n\n  // Add the item to the subcategory\n  if (subcategory) {\n    if (!subcategory.items) {\n      subcategory.items = [item];\n    } else if (!subcategory.items.includes(item)) {\n      subcategory.items = subcategory.items.concat(item);\n    }\n  }\n};\n\nconst isCategoryEmpty = ({ items }) => _.isEmpty(items);\n\nconst pruneCategoriesWithNoItems = (categories) => {\n  if (!categories) {\n    return;\n  }\n\n  _.forOwn(categories, (category, key) => {\n    if (isCategoryEmpty(category)) {\n      delete categories[key];\n    } else {\n      pruneCategoriesWithNoItems(category.subcategories);\n    }\n  });\n};\n\nconst processSubCategories = (category, itemsSorter) => {\n  _.forOwn(category.subcategories, (subcategory) => {\n    if (subcategory.items) {\n      subcategory.numItems = _.size(subcategory.items);\n      subcategory.items = itemsSorter(subcategory.items);\n      processSubCategories(subcategory, itemsSorter);\n    }\n    if (category.subcategories) {\n      _.each(category.items, (item) => {\n        const included = _.find(_.keys(category.subcategories), (subcat) =>\n          _.includes(category.subcategories[subcat].items, item),\n        );\n        if (!included) {\n          let otherCategory = _.get(category.subcategories, 'other');\n          if (!otherCategory) {\n            otherCategory = { id: `${category.id}-other`, label: 'Other', items: [] };\n            category.subcategories.other = otherCategory;\n          }\n          otherCategory.items.push(item);\n        }\n      });\n    }\n  });\n};\n\n// calculate numItems per Category and subcategories, sort items\nconst processCategories = (categories, itemsSorter) => {\n  _.forOwn(categories, (category) => {\n    if (category.items) {\n      category.numItems = _.size(category.items);\n      category.items = itemsSorter(category.items);\n      processSubCategories(category, itemsSorter);\n    }\n  });\n};\n\nconst categorize = (items, categories) => {\n  // Categorize each item\n  _.each(items, (item) => {\n    let itemCategorized = false;\n\n    _.each(categories, (category) => {\n      const matchedSubcategories = filterSubcategories(category, item);\n      _.each(matchedSubcategories, (subcategory) => {\n        addItem(item, category, subcategory); // add to subcategory & main category\n        itemCategorized = true;\n      });\n    });\n    if (!itemCategorized) {\n      addItem(item, categories.other); // add to Other category\n    }\n  });\n\n  categories.all.numItems = _.size(items);\n  categories.all.items = items;\n};\n\n/**\n * Creates an items array under each category and subcategory.  If no match, categorizes item\n * under 'Other' main category.\n * (exported for test purposes)\n */\nexport const categorizeItems = (items, itemsSorter, initCategories) => {\n  const allCategory = { id: 'all', label: 'All Items' };\n  const otherCategory = { id: 'other', label: 'Other' };\n\n  const categories = {\n    all: allCategory,\n    ..._.cloneDeep(initCategories),\n    other: otherCategory,\n  };\n\n  categorize(items, categories);\n  pruneCategoriesWithNoItems(categories);\n  processCategories(categories, itemsSorter);\n\n  return categories;\n};\n\nconst clearItemsFromCategories = (categories) => {\n  _.forOwn(categories, (category) => {\n    category.numItems = 0;\n    category.items = [];\n    clearItemsFromCategories(category.subcategories);\n  });\n};\n\nconst filterByKeyword = (items, filters, compFunction) => {\n  const { keyword } = filters;\n  if (!keyword || !keyword.active) {\n    return items;\n  }\n\n  const filterString = keyword.value.toLowerCase();\n  return _.filter(items, (item) => compFunction(filterString, item));\n};\n\nconst filterByGroup = (items, filters) => {\n  // Filter items by each filter group\n  return _.reduce(\n    filters,\n    (filtered, group, key) => {\n      if (key === FilterTypes.keyword) {\n        return filtered;\n      }\n      // Only apply active filters\n      const activeFilters = _.filter(group, 'active');\n      if (activeFilters.length) {\n        const values = _.reduce(\n          activeFilters,\n          (filterValues, filter) => {\n            filterValues.push(filter.value, ..._.get(filter, 'synonyms', []));\n            return filterValues;\n          },\n          [],\n        );\n\n        filtered[key] = _.filter(items, (item) => {\n          if (Array.isArray(item[key])) {\n            return item[key].some((f) => values.includes(f));\n          }\n          return values.includes(item[key]);\n        });\n      }\n\n      return filtered;\n    },\n    {},\n  );\n};\n\nconst filterItems = (items, filters, keywordCompare) => {\n  if (_.isEmpty(filters)) {\n    return items;\n  }\n\n  // Filter items by keyword first\n  const filteredByKeyword = filterByKeyword(items, filters, keywordCompare);\n\n  // Apply each filter property individually. Example:\n  //  filteredByGroup = {\n  //    provider: [/*array of items filtered by provider*/],\n  //    healthIndex: [/*array of items filtered by healthIndex*/],\n  //  };\n  const filteredByGroup = filterByGroup(filteredByKeyword, filters);\n\n  // Intersection of individually applied filters is all filters\n  // In the case no filters are active, returns items filteredByKeyword\n  return [..._.values(filteredByGroup), filteredByKeyword].reduce((a, b) =>\n    a.filter((c) => b.includes(c)),\n  );\n};\n\nconst recategorizeItems = (items, itemsSorter, filters, keywordCompare, categories) => {\n  const filteredItems = filterItems(items, filters, keywordCompare);\n\n  const newCategories = _.cloneDeep(categories);\n  clearItemsFromCategories(newCategories);\n\n  categorize(filteredItems, newCategories);\n  processCategories(newCategories, itemsSorter);\n\n  return newCategories;\n};\n\nconst isActiveTab = (activeId, category) => {\n  return _.has(category.subcategories, activeId);\n};\n\nconst hasActiveDescendant = (activeId, category) => {\n  if (_.has(category.subcategories, activeId)) {\n    return true;\n  }\n\n  return _.some(category.subcategories, (subcategory) =>\n    hasActiveDescendant(activeId, subcategory),\n  );\n};\n\nconst findActiveCategory = (activeId, categories) => {\n  let activeCategory = null;\n  _.forOwn(categories, (category) => {\n    if (activeCategory) {\n      return;\n    }\n\n    if (category.id === activeId) {\n      activeCategory = category;\n    } else {\n      activeCategory = findActiveCategory(activeId, category.subcategories);\n    }\n  });\n  return activeCategory;\n};\n\nconst determineAvailableFilters = (initialFilters, items, filterGroups) => {\n  const filters = _.cloneDeep(initialFilters);\n\n  _.each(filterGroups, (field) => {\n    _.each(items, (item) => {\n      const value = item[field];\n      if (value) {\n        _.set(filters, [field, value], {\n          label: value,\n          value,\n          active: false,\n        });\n      }\n    });\n  });\n\n  return filters;\n};\n\nconst getActiveFilters = (\n  keywordFilter,\n  groupFilters,\n  activeFilters,\n  categoryFilter = null,\n  storeFilterKey = null,\n  filterRetentionPreference = null,\n) => {\n  activeFilters.keyword.value = keywordFilter || '';\n  activeFilters.keyword.active = !!keywordFilter;\n\n  const userFilters = storeFilterKey ? localStorage.getItem(storeFilterKey) : null;\n  if (userFilters) {\n    try {\n      const lastFilters = JSON.parse(userFilters);\n      if (lastFilters) {\n        if (filterRetentionPreference) {\n          _.each(filterRetentionPreference, (filterGroup) => {\n            if (!groupFilters || !groupFilters[filterGroup]) {\n              if (lastFilters[filterGroup]) {\n                activeFilters[filterGroup] = lastFilters[filterGroup];\n              }\n            }\n          });\n        }\n      }\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error('Failed parsing user filter settings.');\n    }\n  }\n\n  if (categoryFilter) {\n    // removing default and localstore filters if category filters are present over URL\n    _.each(_.keys(activeFilters.kind), (key) =>\n      _.set(activeFilters, ['kind', key, 'active'], false),\n    );\n  }\n\n  _.forOwn(groupFilters, (filterValues, filterType) => {\n    // removing default and localstore filters if Filters are present over URL\n    _.each(_.keys(activeFilters[filterType]), (key) =>\n      _.set(activeFilters, [filterType, key, 'active'], false),\n    );\n    _.each(filterValues, (filterValue) => {\n      _.set(activeFilters, [filterType, filterValue, 'active'], true);\n    });\n  });\n\n  return activeFilters;\n};\n\nexport const updateActiveFilters = (activeFilters, filterType, id, value) => {\n  if (filterType === FilterTypes.keyword) {\n    _.set(activeFilters, 'keyword.value', value);\n    _.set(activeFilters, 'keyword.active', !!value);\n  } else {\n    _.set(activeFilters, [filterType, id, 'active'], value);\n  }\n\n  return activeFilters;\n};\n\nconst clearActiveFilters = (activeFilters, filterGroups) => {\n  // Clear the keyword filter\n  _.set(activeFilters, 'keyword.value', '');\n  _.set(activeFilters, 'keyword.active', false);\n\n  // Clear the group filters\n  _.each(filterGroups, (field) => {\n    _.each(_.keys(activeFilters[field]), (key) =>\n      _.set(activeFilters, [field, key, 'active'], false),\n    );\n  });\n\n  return activeFilters;\n};\n\nconst getFilterGroupCounts = (\n  items,\n  itemsSorter,\n  filterGroups,\n  selectedCategoryId,\n  filters,\n  categories,\n  keywordCompare,\n) => {\n  // Filter only by keyword\n  const filteredItems = filterByKeyword(items, filters, keywordCompare);\n\n  const categoriesForCounts = recategorizeItems(\n    filteredItems,\n    itemsSorter,\n    [],\n    keywordCompare,\n    categories,\n  );\n\n  const activeCategory = findActiveCategory(selectedCategoryId, categoriesForCounts);\n  const activeItems = activeCategory ? activeCategory.items : [];\n  const newFilterCounts = {};\n\n  _.each(filterGroups, (filterGroup) => {\n    _.each(_.keys(filters[filterGroup]), (key) => {\n      const filterValues = [\n        _.get(filters, [filterGroup, key, 'value']),\n        ..._.get(filters, [filterGroup, key, 'synonyms'], []),\n      ];\n\n      const matchedItems = _.filter(activeItems, (item) => {\n        if (Array.isArray(item[filterGroup])) {\n          return item[filterGroup].some((f) => filterValues.includes(f));\n        }\n\n        return filterValues.includes(item[filterGroup]);\n      });\n\n      _.set(newFilterCounts, [filterGroup, key], _.size(matchedItems));\n    });\n  });\n\n  return newFilterCounts;\n};\n\nconst setURLParams = (params) => {\n  const location = window.location;\n  const url = new URL(location);\n  const searchParams = `?${params.toString()}${url.hash}`;\n\n  history.replace(`${url.pathname}${searchParams}`);\n};\n\nexport const updateURLParams = (paramName, value) => {\n  const params = new URLSearchParams(window.location.search);\n\n  if (value) {\n    params.set(paramName, Array.isArray(value) ? JSON.stringify(value) : value);\n  } else {\n    params.delete(paramName);\n  }\n  setURLParams(params);\n};\n\nconst clearFilterURLParams = (selectedCategoryId) => {\n  const params = new URLSearchParams();\n\n  if (selectedCategoryId) {\n    params.set(FilterTypes.category, selectedCategoryId);\n  }\n\n  setURLParams(params);\n};\n\nconst getActiveValuesFromURL = (\n  availableFilters,\n  filterGroups,\n  groupByTypes,\n  storeFilterKey,\n  filterRetentionPreference,\n) => {\n  const searchParams = new URLSearchParams(window.location.search);\n  const categoryParam = searchParams.get(FilterTypes.category);\n  const keywordFilter = searchParams.get(FilterTypes.keyword);\n  const selectedCategoryId = categoryParam || 'all';\n  let groupBy = '';\n  if (groupByTypes) {\n    groupBy = searchParams.get('groupBy') || groupByTypes.None;\n  }\n  const groupFilters = {};\n\n  _.each(filterGroups, (filterGroup) => {\n    const groupFilterParam = searchParams.get(filterGroup);\n    if (!groupFilterParam) {\n      return;\n    }\n\n    try {\n      _.set(groupFilters, filterGroup, JSON.parse(groupFilterParam));\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.warn('could not update filters from url params: could not parse search params', e);\n    }\n  });\n\n  const activeFilters = getActiveFilters(\n    keywordFilter,\n    groupFilters,\n    availableFilters,\n    categoryParam,\n    storeFilterKey,\n    filterRetentionPreference,\n  );\n\n  return { selectedCategoryId, activeFilters, groupBy };\n};\n\nexport const getFilterSearchParam = (groupFilter) => {\n  const activeValues = _.reduce(\n    _.keys(groupFilter),\n    (result, typeKey) => {\n      return groupFilter[typeKey].active ? result.concat(typeKey) : result;\n    },\n    [],\n  );\n\n  return _.isEmpty(activeValues) ? '' : JSON.stringify(activeValues);\n};\n\nconst defaultFilters = {\n  keyword: {\n    value: '',\n    active: false,\n  },\n};\n\nexport class TileViewPage extends React.Component {\n  constructor(props) {\n    super(props);\n    const { items, itemsSorter, getAvailableCategories, groupByTypes } = this.props;\n    const categories = getAvailableCategories(items);\n\n    this.state = {\n      categories: categorizeItems(items, itemsSorter, categories),\n      selectedCategoryId: 'all',\n      activeFilters: defaultFilters,\n      filterCounts: null,\n      filterGroupsShowAll: {},\n      groupBy: groupByTypes ? groupByTypes.None : '',\n    };\n\n    this.onUpdateFilters = this.onUpdateFilters.bind(this);\n    this.onFilterChange = this.onFilterChange.bind(this);\n    this.renderFilterGroup = this.renderFilterGroup.bind(this);\n    this.onShowAllToggle = this.onShowAllToggle.bind(this);\n    this.onGroupChange = this.onGroupChange.bind(this);\n  }\n\n  componentDidMount() {\n    const {\n      items,\n      filterGroups,\n      getAvailableFilters,\n      groupByTypes,\n      storeFilterKey,\n      filterRetentionPreference,\n    } = this.props;\n    const { categories } = this.state;\n    const availableFilters = getAvailableFilters(defaultFilters, items, filterGroups);\n    const activeValues = getActiveValuesFromURL(\n      availableFilters,\n      filterGroups,\n      groupByTypes,\n      storeFilterKey,\n      filterRetentionPreference,\n    );\n\n    this.setState({\n      ...this.getUpdatedState(\n        categories,\n        activeValues.selectedCategoryId,\n        activeValues.activeFilters,\n      ),\n      groupBy: activeValues.groupBy,\n    });\n    this.filterByKeywordInput.focus({ preventScroll: true });\n  }\n\n  componentWillUnmount() {\n    this.unmounted = true;\n  }\n\n  componentDidUpdate(prevProps) {\n    const { activeFilters, selectedCategoryId, groupBy } = this.state;\n    const {\n      items,\n      itemsSorter,\n      filterGroups,\n      getAvailableCategories,\n      getAvailableFilters,\n    } = this.props;\n\n    if (!_.isEqual(items, prevProps.items)) {\n      const availableFilters = getAvailableFilters(defaultFilters, items, filterGroups);\n      const availableCategories = getAvailableCategories(items);\n      const categories = categorizeItems(items, itemsSorter, availableCategories);\n\n      const newActiveFilters = _.reduce(\n        availableFilters,\n        (updatedFilters, filterGroup, filterGroupName) => {\n          if (filterGroupName === FilterTypes.keyword) {\n            updatedFilters.keyword = activeFilters.keyword;\n            return updatedFilters;\n          }\n          _.each(filterGroup, (filterItem, filterItemName) => {\n            updatedFilters[filterGroupName][filterItemName].active = _.get(\n              activeFilters,\n              [filterGroupName, filterItemName, 'active'],\n              false,\n            );\n          });\n\n          return updatedFilters;\n        },\n        availableFilters,\n      );\n\n      this.updateMountedState({\n        ...this.getUpdatedState(categories, selectedCategoryId, newActiveFilters),\n        groupBy,\n      });\n    }\n  }\n\n  getUpdatedState(categories, selectedCategoryId, activeFilters) {\n    const { items, itemsSorter, keywordCompare, filterGroups } = this.props;\n\n    if (!items) {\n      return;\n    }\n\n    const newCategories = recategorizeItems(\n      items,\n      itemsSorter,\n      activeFilters,\n      keywordCompare,\n      categories,\n    );\n\n    return {\n      activeFilters,\n      selectedCategoryId,\n      categories: newCategories,\n      filterCounts: getFilterGroupCounts(\n        items,\n        itemsSorter,\n        filterGroups,\n        selectedCategoryId,\n        activeFilters,\n        newCategories,\n        keywordCompare,\n      ),\n    };\n  }\n\n  // This function is necessary due to calls to history.replace un-mounting the component before returning\n  updateMountedState(newState) {\n    if (!this.unmounted) {\n      this.setState(newState);\n    }\n  }\n\n  storeFilters(filters) {\n    if (this.props.storeFilterKey && this.props.filterRetentionPreference) {\n      const storeFilters = {};\n      _.each(this.props.filterRetentionPreference, (filterGroup) => {\n        if (filters[filterGroup]) {\n          storeFilters[filterGroup] = filters[filterGroup];\n        }\n      });\n      localStorage.setItem(this.props.storeFilterKey, JSON.stringify(storeFilters));\n    }\n  }\n\n  clearFilters() {\n    const { filterGroups } = this.props;\n    const { activeFilters, categories, selectedCategoryId } = this.state;\n\n    clearFilterURLParams(selectedCategoryId);\n\n    const clearedFilters = clearActiveFilters(activeFilters, filterGroups);\n\n    this.updateMountedState(this.getUpdatedState(categories, selectedCategoryId, clearedFilters));\n\n    // Don't take focus if a modal was opened while the page was loading.\n    if (!isModalOpen()) {\n      this.filterByKeywordInput.focus({ preventScroll: true });\n    }\n\n    this.storeFilters(clearedFilters);\n  }\n\n  selectCategory(categoryId) {\n    const { activeFilters, categories } = this.state;\n\n    updateURLParams(FilterTypes.category, categoryId);\n    this.updateMountedState(this.getUpdatedState(categories, categoryId, activeFilters));\n  }\n\n  onUpdateFilters(updatedFilters) {\n    const { selectedCategoryId, categories } = this.state;\n    this.updateMountedState(this.getUpdatedState(categories, selectedCategoryId, updatedFilters));\n  }\n\n  onFilterChange(filterType, id, value) {\n    const { activeFilters, selectedCategoryId, categories } = this.state;\n\n    if (filterType === FilterTypes.keyword) {\n      updateURLParams(FilterTypes.keyword, `${value}`);\n    } else {\n      const groupFilter = _.cloneDeep(activeFilters[filterType]);\n      _.set(groupFilter, [id, 'active'], value);\n      updateURLParams(filterType, getFilterSearchParam(groupFilter));\n    }\n\n    const updatedFilters = updateActiveFilters(activeFilters, filterType, id, value);\n\n    this.updateMountedState(this.getUpdatedState(categories, selectedCategoryId, updatedFilters));\n\n    this.storeFilters(updatedFilters);\n  }\n\n  onKeywordChange(value) {\n    this.onFilterChange('keyword', null, value);\n  }\n\n  onShowAllToggle(groupName) {\n    const { filterGroupsShowAll } = this.state;\n    const updatedShow = _.clone(filterGroupsShowAll);\n    _.set(updatedShow, groupName, !_.get(filterGroupsShowAll, groupName, false));\n    this.setState({ filterGroupsShowAll: updatedShow });\n  }\n\n  onGroupChange(value) {\n    const { groupByTypes } = this.props;\n    updateURLParams('groupBy', value === groupByTypes.None ? `` : `${value}`);\n    this.updateMountedState({ groupBy: value });\n  }\n\n  renderTabs(category, selectedCategoryId) {\n    const { id, label, subcategories, numItems } = category;\n    const active = id === selectedCategoryId;\n    const shown = id === 'all';\n\n    const tabClasses = `text-capitalize${!numItems ? ' co-catalog-tab__empty' : ''}`;\n    return (\n      <VerticalTabsTab\n        key={id}\n        title={label}\n        active={active}\n        className={tabClasses}\n        onActivate={() => this.selectCategory(id)}\n        hasActiveDescendant={hasActiveDescendant(selectedCategoryId, category)}\n        shown={shown}\n      >\n        {subcategories && (\n          <VerticalTabs restrictTabs activeTab={isActiveTab(selectedCategoryId, category)}>\n            {_.map(subcategories, (subcategory) =>\n              this.renderTabs(subcategory, selectedCategoryId),\n            )}\n          </VerticalTabs>\n        )}\n      </VerticalTabsTab>\n    );\n  }\n\n  renderCategoryTabs(selectedCategoryId) {\n    const { categories } = this.state;\n    const activeTab = _.has(categories, selectedCategoryId);\n\n    return (\n      <VerticalTabs restrictTabs activeTab={activeTab} shown=\"true\">\n        {_.map(categories, (category) => this.renderTabs(category, selectedCategoryId))}\n      </VerticalTabs>\n    );\n  }\n\n  renderFilterGroup(\n    filterGroup,\n    groupName,\n    activeFilters,\n    filterCounts,\n    onFilterChange,\n    // eslint-disable-next-line @typescript-eslint/no-unused-vars, no-unused-vars\n    onUpdateFilters,\n  ) {\n    const { filterGroupNameMap } = this.props;\n    const { filterGroupsShowAll } = this.state;\n\n    return (\n      <FilterSidePanelCategory\n        key={groupName}\n        title={filterGroupNameMap[groupName] || groupName}\n        onShowAllToggle={() => this.onShowAllToggle(groupName)}\n        showAll={_.get(filterGroupsShowAll, groupName, false)}\n        data-test-group-name={groupName}\n      >\n        {_.map(filterGroup, (filter, filterName) => {\n          const { label, active } = filter;\n          return (\n            <FilterSidePanelCategoryItem\n              key={filterName}\n              count={_.get(filterCounts, [groupName, filterName], 0)}\n              checked={active}\n              onClick={(e) => onFilterChange(groupName, filterName, e.target.checked)}\n              title={label}\n              data-test={`${groupName}-${_.kebabCase(filterName)}`}\n            >\n              {label}\n            </FilterSidePanelCategoryItem>\n          );\n        })}\n      </FilterSidePanelCategory>\n    );\n  }\n\n  renderSidePanel() {\n    let { renderFilterGroup } = this.props;\n    const { activeFilters, filterCounts } = this.state;\n\n    renderFilterGroup = renderFilterGroup || this.renderFilterGroup;\n\n    return (\n      <FilterSidePanel>\n        {_.map(activeFilters, (filterGroup, groupName) => {\n          if (groupName === FilterTypes.keyword) {\n            return;\n          }\n          return renderFilterGroup(\n            filterGroup,\n            groupName,\n            activeFilters,\n            filterCounts,\n            this.onFilterChange,\n            this.onUpdateFilters,\n          );\n        })}\n      </FilterSidePanel>\n    );\n  }\n\n  renderEmptyState() {\n    const { emptyStateTitle, emptyStateInfo } = this.props;\n    return (\n      <EmptyState variant={EmptyStateVariant.full}>\n        <Title headingLevel=\"h2\" size=\"lg\">\n          {emptyStateTitle}\n        </Title>\n        <EmptyStateBody>{emptyStateInfo}</EmptyStateBody>\n        <EmptyStateSecondaryActions>\n          <Button\n            variant=\"link\"\n            onClick={() => this.clearFilters()}\n            data-test-id=\"catalog-clear-filters\"\n          >\n            Clear All Filters\n          </Button>\n        </EmptyStateSecondaryActions>\n      </EmptyState>\n    );\n  }\n\n  renderItems(items, renderTile) {\n    return (\n      <Gallery gutter=\"sm\" className=\"co-catalog-tile-view\">\n        {_.map(items, (item) => (\n          <GalleryItem key={item.uid ? `gallery-${item.uid}` : `gallery-${item.obj.metadata.uid}`}>\n            {renderTile(item)}\n          </GalleryItem>\n        ))}\n      </Gallery>\n    );\n  }\n\n  renderGroupedItems(items, groupBy, renderTile, groupItems) {\n    const groupedItems = groupItems(items, groupBy);\n    return _.map(\n      groupedItems,\n      (value, key) =>\n        value.length > 0 && (\n          <div key={key} className=\"co-catalog-page__grouped-items\">\n            <Title className=\"co-catalog-page__group-title\" headingLevel=\"h2\" size=\"lg\">\n              {key} ({_.size(value)})\n            </Title>\n            {this.renderItems(value, renderTile)}\n          </div>\n        ),\n    );\n  }\n\n  render() {\n    const { renderTile, groupItems, groupByTypes } = this.props;\n    const { activeFilters, selectedCategoryId, categories, groupBy } = this.state;\n    let activeCategory = findActiveCategory(selectedCategoryId, categories);\n    if (!activeCategory) {\n      activeCategory = findActiveCategory('all', categories);\n    }\n\n    return (\n      <div className=\"co-catalog-page\">\n        <div className=\"co-catalog-page__tabs\">\n          {this.renderCategoryTabs(activeCategory.id)}\n          {this.renderSidePanel()}\n        </div>\n        <div className=\"co-catalog-page__content\">\n          <div className=\"co-catalog-page__header\">\n            <div className=\"co-catalog-page__heading text-capitalize\">{activeCategory.label}</div>\n            <div className=\"co-catalog-page__filter\">\n              <div>\n                <FormControl\n                  className=\"co-catalog-page__input\"\n                  type=\"text\"\n                  inputRef={(ref) => (this.filterByKeywordInput = ref)}\n                  placeholder=\"Filter by keyword...\"\n                  bsClass=\"pf-c-form-control\"\n                  value={activeFilters.keyword.value}\n                  onChange={(e) => this.onKeywordChange(e.target.value)}\n                  aria-label=\"Filter by keyword...\"\n                />\n                {groupItems && (\n                  <Dropdown\n                    className=\"co-catalog-page__btn-group__group-by\"\n                    menuClassName=\"dropdown-menu--text-wrap\"\n                    items={groupByTypes}\n                    onChange={(e) => this.onGroupChange(e)}\n                    titlePrefix=\"Group By\"\n                    title={groupBy}\n                  />\n                )}\n              </div>\n              <div className=\"co-catalog-page__num-items\">{activeCategory.numItems} items</div>\n            </div>\n          </div>\n\n          {activeCategory.numItems > 0 && (\n            <div className=\"co-catalog-page__grid\">\n              {groupItems && groupBy !== groupByTypes.None\n                ? this.renderGroupedItems(activeCategory.items, groupBy, renderTile, groupItems)\n                : this.renderItems(activeCategory.items, renderTile)}\n            </div>\n          )}\n          {activeCategory.numItems === 0 && this.renderEmptyState()}\n        </div>\n      </div>\n    );\n  }\n}\n\nTileViewPage.displayName = 'TileViewPage';\n\nTileViewPage.propTypes = {\n  items: PropTypes.array,\n  itemsSorter: PropTypes.func.isRequired,\n  storeFilterKey: PropTypes.string,\n  getAvailableCategories: PropTypes.func.isRequired,\n  getAvailableFilters: PropTypes.func,\n  filterRetentionPreference: PropTypes.array,\n  filterGroups: PropTypes.array.isRequired,\n  filterGroupNameMap: PropTypes.object,\n  renderFilterGroup: PropTypes.func,\n  keywordCompare: PropTypes.func.isRequired,\n  renderTile: PropTypes.func.isRequired,\n  emptyStateTitle: PropTypes.string,\n  emptyStateInfo: PropTypes.string,\n  groupItems: PropTypes.func,\n  groupByTypes: PropTypes.object,\n};\n\nTileViewPage.defaultProps = {\n  items: null,\n  getAvailableFilters: determineAvailableFilters,\n  filterGroupNameMap: {},\n  renderFilterGroup: null,\n  emptyStateTitle: 'No Results Match the Filter Criteria',\n  emptyStateInfo: 'No items are being shown due to the filters being applied.',\n};\n"]}]}