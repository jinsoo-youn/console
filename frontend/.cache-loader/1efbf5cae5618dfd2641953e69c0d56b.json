{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/common/PipelineResourceDropdown.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/common/PipelineResourceDropdown.tsx","mtime":1616735742390},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useField, useFormikContext } from 'formik';\nimport { Select, SelectOption } from '@patternfly/react-core';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { useK8sWatchResource, } from '@console/internal/components/utils/k8s-watch-hook';\nimport { LoadingInline } from '@console/internal/components/utils';\nimport { PipelineResourceModel } from '../../../../models';\nimport { CREATE_PIPELINE_RESOURCE } from './const';\nimport './PipelineResourceDropdown.scss';\nconst PipelineResourceDropdown = (props) => {\n    const { autoSelect, filterType, name, namespace, selectedKey } = props;\n    const [isExpanded, setExpanded] = React.useState(false);\n    const { setFieldValue, setFieldTouched } = useFormikContext();\n    const [, { touched }] = useField(name);\n    const resourceDefinition = React.useMemo(() => ({\n        isList: true,\n        namespace,\n        kind: referenceForModel(PipelineResourceModel),\n    }), [namespace]);\n    const [resources, loaded, error] = useK8sWatchResource(resourceDefinition);\n    const availableResources = resources.filter((resource) => resource.spec.type === filterType);\n    const canAutoSelect = autoSelect && !touched && loaded && !error;\n    React.useEffect(() => {\n        if (canAutoSelect) {\n            if (availableResources.length === 0) {\n                setFieldValue(name, CREATE_PIPELINE_RESOURCE);\n            }\n            else {\n                setFieldValue(name, availableResources[0].metadata.name);\n            }\n            setFieldTouched(name);\n        }\n    }, [canAutoSelect, name, availableResources, setFieldTouched, setFieldValue]);\n    const options = [\n        { label: 'Create Pipeline Resource', value: CREATE_PIPELINE_RESOURCE },\n        ...availableResources.map((resource) => {\n            var _a;\n            const resourceName = resource.metadata.name;\n            const url = ((_a = _.find(resource.spec.params, ['name', 'url'])) === null || _a === void 0 ? void 0 : _a.value) || '';\n            const label = url.trim().length > 0 ? `${url} (${resourceName})` : resourceName;\n            return { label, value: resourceName };\n        }),\n    ];\n    return (React.createElement(Select, { className: \"odc-pipeline-resource-dropdown\", selections: selectedKey, isExpanded: isExpanded, onToggle: () => setExpanded(!isExpanded), onSelect: (e, value) => {\n            setFieldValue(name, value);\n            setExpanded(false);\n        }, placeholderText: !loaded ? React.createElement(LoadingInline, null) : 'Select Pipeline Resource', isDisabled: loaded && availableResources.length === 0 }, options.map(({ label, value }) => (React.createElement(SelectOption, { key: value, value: value }, label)))));\n};\nexport default PipelineResourceDropdown;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/common/PipelineResourceDropdown.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/common/PipelineResourceDropdown.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { FormikValues, useField, useFormikContext } from 'formik';\nimport { Select, SelectOption } from '@patternfly/react-core';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport {\n  useK8sWatchResource,\n  WatchK8sResource,\n} from '@console/internal/components/utils/k8s-watch-hook';\nimport { LoadingInline } from '@console/internal/components/utils';\nimport { PipelineResourceModel } from '../../../../models';\nimport { PipelineResourceKind } from '../../../../utils/pipeline-augment';\nimport { CREATE_PIPELINE_RESOURCE } from './const';\n\nimport './PipelineResourceDropdown.scss';\n\ntype PipelineResourceDropdownProps = {\n  autoSelect?: boolean;\n  filterType: string;\n  name: string;\n  namespace: string;\n  selectedKey: string;\n};\n\nconst PipelineResourceDropdown: React.FC<PipelineResourceDropdownProps> = (props) => {\n  const { autoSelect, filterType, name, namespace, selectedKey } = props;\n\n  const [isExpanded, setExpanded] = React.useState(false);\n  const { setFieldValue, setFieldTouched } = useFormikContext<FormikValues>();\n  const [, { touched }] = useField(name);\n\n  const resourceDefinition: WatchK8sResource = React.useMemo(\n    () => ({\n      isList: true,\n      namespace,\n      kind: referenceForModel(PipelineResourceModel),\n    }),\n    [namespace],\n  );\n  const [resources, loaded, error] = useK8sWatchResource<PipelineResourceKind[]>(\n    resourceDefinition,\n  );\n\n  const availableResources: PipelineResourceKind[] = resources.filter(\n    (resource) => resource.spec.type === filterType,\n  );\n\n  const canAutoSelect = autoSelect && !touched && loaded && !error;\n  React.useEffect(() => {\n    if (canAutoSelect) {\n      if (availableResources.length === 0) {\n        setFieldValue(name, CREATE_PIPELINE_RESOURCE);\n      } else {\n        setFieldValue(name, availableResources[0].metadata.name);\n      }\n      setFieldTouched(name);\n    }\n  }, [canAutoSelect, name, availableResources, setFieldTouched, setFieldValue]);\n\n  const options = [\n    { label: 'Create Pipeline Resource', value: CREATE_PIPELINE_RESOURCE },\n    ...availableResources.map((resource) => {\n      const resourceName = resource.metadata.name;\n      const url = _.find(resource.spec.params, ['name', 'url'])?.value || '';\n      const label = url.trim().length > 0 ? `${url} (${resourceName})` : resourceName;\n\n      return { label, value: resourceName };\n    }),\n  ];\n\n  return (\n    <Select\n      className=\"odc-pipeline-resource-dropdown\"\n      selections={selectedKey}\n      isExpanded={isExpanded}\n      onToggle={() => setExpanded(!isExpanded)}\n      onSelect={(e, value) => {\n        setFieldValue(name, value);\n        setExpanded(false);\n      }}\n      placeholderText={!loaded ? <LoadingInline /> : 'Select Pipeline Resource'}\n      isDisabled={loaded && availableResources.length === 0}\n    >\n      {options.map(({ label, value }) => (\n        <SelectOption key={value} value={value}>\n          {label}\n        </SelectOption>\n      ))}\n    </Select>\n  );\n};\n\nexport default PipelineResourceDropdown;\n"]}]}