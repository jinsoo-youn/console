{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vm-template/advanced.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vm-template/advanced.ts","mtime":1615298458670},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { CloudInitDataHelper, CloudInitDataFormKeys, } from '../../k8s/wrapper/vm/cloud-init-data-helper';\nimport { getAnnotation, getAnnotations, getLabels } from '../selectors';\nimport { TEMPLATE_FLAVOR_LABEL, TEMPLATE_OS_LABEL, TEMPLATE_OS_NAME_ANNOTATION, TEMPLATE_TYPE_LABEL, TEMPLATE_TYPE_VM, TEMPLATE_WORKLOAD_LABEL, } from '../../constants/vm';\nimport { getCloudInitVolume } from '../vm/selectors';\nimport { VolumeWrapper } from '../../k8s/wrapper/vm/volume-wrapper';\nimport { selectVM } from './basic';\nimport { removeOSDups } from '../../utils/sort';\nexport const getTemplatesWithLabels = (templates, labels) => {\n    const requiredLabels = labels.filter((label) => label);\n    return templates.filter((template) => {\n        const templateLabels = new Set(Object.keys(getLabels(template, {})));\n        const missingLabel = requiredLabels.find((requiredLabel) => !templateLabels.has(requiredLabel));\n        return !missingLabel;\n    });\n};\nexport const getTemplatesOfLabelType = (templates, type) => (templates || []).filter((template) => _.get(template, ['metadata', 'labels', TEMPLATE_TYPE_LABEL]) === type);\nexport const getUserTemplate = (templates, userTemplateName) => {\n    const userTemplates = getTemplatesOfLabelType(templates, TEMPLATE_TYPE_VM);\n    return userTemplates.find((template) => template.metadata.name === userTemplateName);\n};\nexport const getTemplatesLabelValues = (templates, label) => {\n    const labelValues = [];\n    (templates || []).forEach((template) => {\n        const labels = Object.keys(getLabels(template, {})).filter((l) => l.startsWith(label));\n        labels.forEach((l) => {\n            const labelParts = l.split('/');\n            if (labelParts.length > 1) {\n                const labelName = labelParts[labelParts.length - 1];\n                if (labelValues.indexOf(labelName) === -1) {\n                    labelValues.push(labelName);\n                }\n            }\n        });\n    });\n    return labelValues;\n};\nexport const getTemplateFlavors = (templates) => getTemplatesLabelValues(templates, TEMPLATE_FLAVOR_LABEL);\nexport const getTemplateHostname = (template) => {\n    const vm = selectVM(template);\n    const YAMLHostname = _.get(vm, 'spec.template.spec') && vm.spec.template.spec.hostname;\n    if (YAMLHostname) {\n        return YAMLHostname;\n    }\n    const cloudInitVolume = getCloudInitVolume(vm);\n    const data = new VolumeWrapper(cloudInitVolume).getCloudInitNoCloud();\n    const cloudInitHelper = new CloudInitDataHelper(data);\n    return cloudInitHelper.get(CloudInitDataFormKeys.HOSTNAME);\n};\nexport const getTemplateOperatingSystems = (templates) => {\n    const osIds = getTemplatesLabelValues(templates, TEMPLATE_OS_LABEL);\n    return removeOSDups(osIds.map((osId) => {\n        const nameAnnotation = `${TEMPLATE_OS_NAME_ANNOTATION}/${osId}`;\n        const template = templates.find((t) => !!Object.keys(getAnnotations(t, {})).find((annotation) => annotation === nameAnnotation));\n        return {\n            id: osId,\n            name: getAnnotation(template, nameAnnotation),\n        };\n    }));\n};\nexport const getTemplateWorkloadProfiles = (templates) => getTemplatesLabelValues(templates, TEMPLATE_WORKLOAD_LABEL);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vm-template/advanced.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vm-template/advanced.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { TemplateKind } from '@console/internal/module/k8s';\nimport {\n  CloudInitDataHelper,\n  CloudInitDataFormKeys,\n} from '../../k8s/wrapper/vm/cloud-init-data-helper';\nimport { getAnnotation, getAnnotations, getLabels } from '../selectors';\nimport {\n  TEMPLATE_FLAVOR_LABEL,\n  TEMPLATE_OS_LABEL,\n  TEMPLATE_OS_NAME_ANNOTATION,\n  TEMPLATE_TYPE_LABEL,\n  TEMPLATE_TYPE_VM,\n  TEMPLATE_WORKLOAD_LABEL,\n} from '../../constants/vm';\nimport { getCloudInitVolume } from '../vm/selectors';\nimport { VolumeWrapper } from '../../k8s/wrapper/vm/volume-wrapper';\nimport { selectVM } from './basic';\nimport { removeOSDups } from '../../utils/sort';\n\nexport const getTemplatesWithLabels = (templates: TemplateKind[], labels: string[]) => {\n  const requiredLabels = labels.filter((label) => label);\n  return templates.filter((template) => {\n    const templateLabels = new Set(Object.keys(getLabels(template, {})));\n    const missingLabel = requiredLabels.find((requiredLabel) => !templateLabels.has(requiredLabel));\n    return !missingLabel;\n  });\n};\n\nexport const getTemplatesOfLabelType = (templates: TemplateKind[], type: string) =>\n  (templates || []).filter(\n    (template) => _.get(template, ['metadata', 'labels', TEMPLATE_TYPE_LABEL]) === type,\n  );\n\nexport const getUserTemplate = (templates: TemplateKind[], userTemplateName: string) => {\n  const userTemplates = getTemplatesOfLabelType(templates, TEMPLATE_TYPE_VM);\n  return userTemplates.find((template) => template.metadata.name === userTemplateName);\n};\n\nexport const getTemplatesLabelValues = (templates: TemplateKind[], label: string): string[] => {\n  const labelValues = [];\n  (templates || []).forEach((template) => {\n    const labels = Object.keys(getLabels(template, {})).filter((l) => l.startsWith(label));\n    labels.forEach((l) => {\n      const labelParts = l.split('/');\n      if (labelParts.length > 1) {\n        const labelName = labelParts[labelParts.length - 1];\n        if (labelValues.indexOf(labelName) === -1) {\n          labelValues.push(labelName);\n        }\n      }\n    });\n  });\n  return labelValues;\n};\n\nexport const getTemplateFlavors = (templates: TemplateKind[]) =>\n  getTemplatesLabelValues(templates, TEMPLATE_FLAVOR_LABEL);\n\nexport const getTemplateHostname = (template: TemplateKind) => {\n  const vm = selectVM(template);\n  const YAMLHostname = _.get(vm, 'spec.template.spec') && vm.spec.template.spec.hostname;\n  if (YAMLHostname) {\n    return YAMLHostname;\n  }\n\n  const cloudInitVolume = getCloudInitVolume(vm);\n  const data = new VolumeWrapper(cloudInitVolume).getCloudInitNoCloud();\n  const cloudInitHelper = new CloudInitDataHelper(data);\n  return cloudInitHelper.get(CloudInitDataFormKeys.HOSTNAME);\n};\n\nexport const getTemplateOperatingSystems = (templates: TemplateKind[]) => {\n  const osIds = getTemplatesLabelValues(templates, TEMPLATE_OS_LABEL);\n  return removeOSDups(\n    osIds.map((osId) => {\n      const nameAnnotation = `${TEMPLATE_OS_NAME_ANNOTATION}/${osId}`;\n      const template = templates.find(\n        (t) =>\n          !!Object.keys(getAnnotations(t, {})).find((annotation) => annotation === nameAnnotation),\n      );\n      return {\n        id: osId,\n        name: getAnnotation(template, nameAnnotation),\n      };\n    }),\n  );\n};\n\nexport const getTemplateWorkloadProfiles = (templates: TemplateKind[]) =>\n  getTemplatesLabelValues(templates, TEMPLATE_WORKLOAD_LABEL);\n"]}]}