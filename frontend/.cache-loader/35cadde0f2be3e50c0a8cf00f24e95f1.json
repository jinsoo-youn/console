{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm/persistent-volume-claim-wrapper.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm/persistent-volume-claim-wrapper.ts","mtime":1616735742430},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { getPvcAccessModes, getPvcStorageClassName, getPvcStorageSize, getPvcVolumeMode, } from '../../../selectors/pvc/selectors';\nimport { BinaryUnit, stringValueUnitSplit, toIECUnit, } from '../../../components/form/size-unit-utils';\nimport { K8sResourceWrapper } from '../common/k8s-resource-wrapper';\nimport { PersistentVolumeClaimModel } from '@console/internal/models';\nimport { AccessMode, VolumeMode } from '../../../constants/vm/storage';\nexport class PersistentVolumeClaimWrapper extends K8sResourceWrapper {\n    constructor(persistentVolumeClaim, copy = false) {\n        super(PersistentVolumeClaimModel, persistentVolumeClaim, copy);\n        this.getStorageClassName = () => getPvcStorageClassName(this.data);\n        this.getSize = () => {\n            const parts = stringValueUnitSplit(getPvcStorageSize(this.data) || '');\n            return {\n                value: parts[0],\n                unit: parts[1],\n            };\n        };\n        this.getReadabableSize = () => {\n            const { value, unit } = this.getSize();\n            return `${value} ${toIECUnit(unit) || BinaryUnit.B}`;\n        };\n        this.hasSize = () => this.getSize().value > 0;\n        this.getAccessModes = () => getPvcAccessModes(this.data);\n        this.getVolumeMode = () => getPvcVolumeMode(this.data);\n        this.getVolumeModeEnum = () => VolumeMode.fromString(this.getVolumeMode());\n        this.getAccessModesEnum = () => {\n            const accessModes = this.getAccessModes();\n            return accessModes ? accessModes.map((mode) => AccessMode.fromString(mode)) : accessModes;\n        };\n        this.setSize = (value, unit = 'Gi') => {\n            this.ensurePath('spec.resources.requests');\n            this.data.spec.resources.requests.storage = `${value}${unit}`;\n            return this;\n        };\n        this.setStorageClassName = (storageClassName) => {\n            this.ensurePath('spec');\n            this.data.spec.storageClassName = storageClassName;\n            return this;\n        };\n        this.setAccessModes = (accessModes) => {\n            this.ensurePath('spec');\n            this.data.spec.accessModes =\n                accessModes && accessModes.map((a) => a === null || a === void 0 ? void 0 : a.getValue()).filter((a) => a); // allow null and undefined\n            return this;\n        };\n        this.setVolumeMode = (volumeMode) => {\n            this.ensurePath('spec');\n            this.data.spec.volumeMode = volumeMode && volumeMode.getValue(); // allow null and undefined\n            return this;\n        };\n    }\n    init(data) {\n        super.init(data);\n        const { size, unit, storageClassName } = data || {};\n        if (size != null && unit) {\n            this.setSize(size, unit);\n        }\n        if (storageClassName !== undefined) {\n            this.setStorageClassName(storageClassName);\n        }\n        return this;\n    }\n    mergeWith(...pvcWrappers) {\n        super.mergeWith(...pvcWrappers);\n        this.clearIfEmpty('spec.storageClassName');\n        this.clearIfEmpty('spec.accessModes');\n        this.clearIfEmpty('spec.volumeMode');\n        const accessModes = this.getAccessModesEnum();\n        if ((accessModes === null || accessModes === void 0 ? void 0 : accessModes.length) > 1) {\n            // API currently allows only one mode\n            this.setAccessModes([accessModes[0]]);\n        }\n        return this;\n    }\n}\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm/persistent-volume-claim-wrapper.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm/persistent-volume-claim-wrapper.ts"],"names":[],"mappings":"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","sourcesContent":["import { V1PersistentVolumeClaim } from '../../../types/vm/disk/V1PersistentVolumeClaim';\nimport {\n  getPvcAccessModes,\n  getPvcStorageClassName,\n  getPvcStorageSize,\n  getPvcVolumeMode,\n} from '../../../selectors/pvc/selectors';\nimport {\n  BinaryUnit,\n  stringValueUnitSplit,\n  toIECUnit,\n} from '../../../components/form/size-unit-utils';\nimport { K8sResourceWrapper } from '../common/k8s-resource-wrapper';\nimport { PersistentVolumeClaimModel } from '@console/internal/models';\nimport { K8sInitAddon } from '../common/util/k8s-mixin';\nimport { AccessMode, VolumeMode } from '../../../constants/vm/storage';\n\nexport class PersistentVolumeClaimWrapper extends K8sResourceWrapper<\n  V1PersistentVolumeClaim,\n  PersistentVolumeClaimWrapper\n> {\n  constructor(\n    persistentVolumeClaim?: V1PersistentVolumeClaim | PersistentVolumeClaimWrapper | any,\n    copy = false,\n  ) {\n    super(PersistentVolumeClaimModel, persistentVolumeClaim, copy);\n  }\n\n  init(data: K8sInitAddon & { size?: string | number; unit?: string; storageClassName?: string }) {\n    super.init(data);\n    const { size, unit, storageClassName } = data || {};\n    if (size != null && unit) {\n      this.setSize(size, unit);\n    }\n    if (storageClassName !== undefined) {\n      this.setStorageClassName(storageClassName);\n    }\n\n    return this;\n  }\n\n  getStorageClassName = () => getPvcStorageClassName(this.data as any);\n\n  getSize = (): { value: number; unit: string } => {\n    const parts = stringValueUnitSplit(getPvcStorageSize(this.data as any) || '');\n    return {\n      value: parts[0],\n      unit: parts[1],\n    };\n  };\n\n  getReadabableSize = () => {\n    const { value, unit } = this.getSize();\n    return `${value} ${toIECUnit(unit) || BinaryUnit.B}`;\n  };\n\n  hasSize = () => this.getSize().value > 0;\n\n  getAccessModes = () => getPvcAccessModes(this.data);\n\n  getVolumeMode = () => getPvcVolumeMode(this.data);\n\n  getVolumeModeEnum = () => VolumeMode.fromString(this.getVolumeMode());\n\n  getAccessModesEnum = () => {\n    const accessModes = this.getAccessModes();\n    return accessModes ? accessModes.map((mode) => AccessMode.fromString(mode)) : accessModes;\n  };\n\n  setSize = (value: string | number, unit = 'Gi') => {\n    this.ensurePath('spec.resources.requests');\n    (this.data.spec.resources.requests as any).storage = `${value}${unit}`;\n    return this;\n  };\n\n  setStorageClassName = (storageClassName: string) => {\n    this.ensurePath('spec');\n    this.data.spec.storageClassName = storageClassName;\n    return this;\n  };\n\n  setAccessModes = (accessModes: AccessMode[]) => {\n    this.ensurePath('spec');\n    this.data.spec.accessModes =\n      accessModes && accessModes.map((a) => a?.getValue()).filter((a) => a); // allow null and undefined\n    return this;\n  };\n\n  setVolumeMode = (volumeMode: VolumeMode) => {\n    this.ensurePath('spec');\n    this.data.spec.volumeMode = volumeMode && volumeMode.getValue(); // allow null and undefined\n    return this;\n  };\n\n  mergeWith(...pvcWrappers: PersistentVolumeClaimWrapper[]) {\n    super.mergeWith(...pvcWrappers);\n    this.clearIfEmpty('spec.storageClassName');\n    this.clearIfEmpty('spec.accessModes');\n    this.clearIfEmpty('spec.volumeMode');\n    const accessModes = this.getAccessModesEnum();\n    if (accessModes?.length > 1) {\n      // API currently allows only one mode\n      this.setAccessModes([accessModes[0]]);\n    }\n    return this;\n  }\n}\n"]}]}