{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/pod/PodRingDataController.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/pod/PodRingDataController.tsx","mtime":1615298458600},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { Firehose } from '@console/internal/components/utils';\nimport { transformPodRingData, podRingFirehoseProps } from '../../utils';\nimport { DaemonSetModel, PodModel, ReplicaSetModel, ReplicationControllerModel, DeploymentModel, DeploymentConfigModel, StatefulSetModel, } from '@console/internal/models';\nconst Controller = React.memo(({ resources, render, loaded, loadError, kind }) => {\n    return render({\n        loaded,\n        loadError,\n        data: loaded ? transformPodRingData(resources, kind) : null,\n    });\n});\nconst PodRingController = ({ namespace, kind, render }) => {\n    const resources = [\n        {\n            isList: true,\n            kind: PodModel.kind,\n            namespace,\n            prop: podRingFirehoseProps[PodModel.kind],\n        },\n        {\n            isList: true,\n            kind: ReplicaSetModel.kind,\n            namespace,\n            prop: podRingFirehoseProps[ReplicaSetModel.kind],\n        },\n        {\n            isList: true,\n            kind: ReplicationControllerModel.kind,\n            namespace,\n            prop: podRingFirehoseProps[ReplicationControllerModel.kind],\n        },\n    ];\n    switch (kind) {\n        case DeploymentModel.kind:\n            resources.push({\n                isList: true,\n                kind,\n                namespace,\n                prop: podRingFirehoseProps[kind],\n            });\n            break;\n        case DeploymentConfigModel.kind:\n            resources.push({\n                isList: true,\n                kind,\n                namespace,\n                prop: podRingFirehoseProps[kind],\n            });\n            break;\n        case StatefulSetModel.kind:\n            resources.push({\n                isList: true,\n                kind,\n                namespace,\n                prop: podRingFirehoseProps[kind],\n            });\n            break;\n        case DaemonSetModel.kind:\n            resources.push({\n                isList: true,\n                kind,\n                namespace,\n                prop: podRingFirehoseProps[kind],\n            });\n            break;\n        default:\n            break;\n    }\n    return (React.createElement(Firehose, { resources: resources },\n        React.createElement(Controller, { render: render, kind: kind })));\n};\nexport default React.memo(PodRingController);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/pod/PodRingDataController.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/pod/PodRingDataController.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,QAAQ,EAAoB,MAAM,oCAAoC,CAAC;AAEhF,OAAO,EAAE,oBAAoB,EAAE,oBAAoB,EAAE,MAAM,aAAa,CAAC;AACzE,OAAO,EACL,cAAc,EACd,QAAQ,EACR,eAAe,EACf,0BAA0B,EAC1B,eAAe,EACf,qBAAqB,EACrB,gBAAgB,GACjB,MAAM,0BAA0B,CAAC;AAsBlC,MAAM,UAAU,GAA8B,KAAK,CAAC,IAAI,CACtD,CAAC,EAAE,SAAS,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,EAAE,EAAE;IACjD,OAAO,MAAM,CAAC;QACZ,MAAM;QACN,SAAS;QACT,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC,oBAAoB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI;KAC5D,CAAC,CAAC;AACL,CAAC,CACF,CAAC;AAEF,MAAM,iBAAiB,GAAyC,CAAC,EAAE,SAAS,EAAE,IAAI,EAAE,MAAM,EAAE,EAAE,EAAE;IAC9F,MAAM,SAAS,GAAuB;QACpC;YACE,MAAM,EAAE,IAAI;YACZ,IAAI,EAAE,QAAQ,CAAC,IAAI;YACnB,SAAS;YACT,IAAI,EAAE,oBAAoB,CAAC,QAAQ,CAAC,IAAI,CAAC;SAC1C;QACD;YACE,MAAM,EAAE,IAAI;YACZ,IAAI,EAAE,eAAe,CAAC,IAAI;YAC1B,SAAS;YACT,IAAI,EAAE,oBAAoB,CAAC,eAAe,CAAC,IAAI,CAAC;SACjD;QACD;YACE,MAAM,EAAE,IAAI;YACZ,IAAI,EAAE,0BAA0B,CAAC,IAAI;YACrC,SAAS;YACT,IAAI,EAAE,oBAAoB,CAAC,0BAA0B,CAAC,IAAI,CAAC;SAC5D;KACF,CAAC;IAEF,QAAQ,IAAI,EAAE;QACZ,KAAK,eAAe,CAAC,IAAI;YACvB,SAAS,CAAC,IAAI,CAAC;gBACb,MAAM,EAAE,IAAI;gBACZ,IAAI;gBACJ,SAAS;gBACT,IAAI,EAAE,oBAAoB,CAAC,IAAI,CAAC;aACjC,CAAC,CAAC;YACH,MAAM;QACR,KAAK,qBAAqB,CAAC,IAAI;YAC7B,SAAS,CAAC,IAAI,CAAC;gBACb,MAAM,EAAE,IAAI;gBACZ,IAAI;gBACJ,SAAS;gBACT,IAAI,EAAE,oBAAoB,CAAC,IAAI,CAAC;aACjC,CAAC,CAAC;YACH,MAAM;QACR,KAAK,gBAAgB,CAAC,IAAI;YACxB,SAAS,CAAC,IAAI,CAAC;gBACb,MAAM,EAAE,IAAI;gBACZ,IAAI;gBACJ,SAAS;gBACT,IAAI,EAAE,oBAAoB,CAAC,IAAI,CAAC;aACjC,CAAC,CAAC;YACH,MAAM;QACR,KAAK,cAAc,CAAC,IAAI;YACtB,SAAS,CAAC,IAAI,CAAC;gBACb,MAAM,EAAE,IAAI;gBACZ,IAAI;gBACJ,SAAS;gBACT,IAAI,EAAE,oBAAoB,CAAC,IAAI,CAAC;aACjC,CAAC,CAAC;YACH,MAAM;QACR;YACE,MAAM;KACT;IAED,OAAO,CACL,oBAAC,QAAQ,IAAC,SAAS,EAAE,SAAS;QAC5B,oBAAC,UAAU,IAAC,MAAM,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,GAAI,CACjC,CACZ,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { Firehose, FirehoseResource } from '@console/internal/components/utils';\nimport { PodRingResources, PodRingData } from '../../types';\nimport { transformPodRingData, podRingFirehoseProps } from '../../utils';\nimport {\n  DaemonSetModel,\n  PodModel,\n  ReplicaSetModel,\n  ReplicationControllerModel,\n  DeploymentModel,\n  DeploymentConfigModel,\n  StatefulSetModel,\n} from '@console/internal/models';\n\ninterface RenderPropsType {\n  loaded: boolean;\n  loadError: any;\n  data: PodRingData;\n}\n\ninterface ControllerProps {\n  loaded?: boolean;\n  loadError?: any;\n  resources?: PodRingResources;\n  kind: string;\n  render(RenderProps: RenderPropsType): React.ReactElement;\n}\n\ninterface PodRingDataControllerProps {\n  namespace: string;\n  kind: string;\n  render(RenderProps: RenderPropsType): React.ReactElement;\n}\n\nconst Controller: React.FC<ControllerProps> = React.memo(\n  ({ resources, render, loaded, loadError, kind }) => {\n    return render({\n      loaded,\n      loadError,\n      data: loaded ? transformPodRingData(resources, kind) : null,\n    });\n  },\n);\n\nconst PodRingController: React.FC<PodRingDataControllerProps> = ({ namespace, kind, render }) => {\n  const resources: FirehoseResource[] = [\n    {\n      isList: true,\n      kind: PodModel.kind,\n      namespace,\n      prop: podRingFirehoseProps[PodModel.kind],\n    },\n    {\n      isList: true,\n      kind: ReplicaSetModel.kind,\n      namespace,\n      prop: podRingFirehoseProps[ReplicaSetModel.kind],\n    },\n    {\n      isList: true,\n      kind: ReplicationControllerModel.kind,\n      namespace,\n      prop: podRingFirehoseProps[ReplicationControllerModel.kind],\n    },\n  ];\n\n  switch (kind) {\n    case DeploymentModel.kind:\n      resources.push({\n        isList: true,\n        kind,\n        namespace,\n        prop: podRingFirehoseProps[kind],\n      });\n      break;\n    case DeploymentConfigModel.kind:\n      resources.push({\n        isList: true,\n        kind,\n        namespace,\n        prop: podRingFirehoseProps[kind],\n      });\n      break;\n    case StatefulSetModel.kind:\n      resources.push({\n        isList: true,\n        kind,\n        namespace,\n        prop: podRingFirehoseProps[kind],\n      });\n      break;\n    case DaemonSetModel.kind:\n      resources.push({\n        isList: true,\n        kind,\n        namespace,\n        prop: podRingFirehoseProps[kind],\n      });\n      break;\n    default:\n      break;\n  }\n\n  return (\n    <Firehose resources={resources}>\n      <Controller render={render} kind={kind} />\n    </Firehose>\n  );\n};\n\nexport default React.memo(PodRingController);\n"]}]}