{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/cluster-settings/index.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/cluster-settings/index.ts","mtime":1616735742460},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport { OAuthModel } from '../../models';\nimport { k8sGet, k8sPatch } from '../../module/k8s';\nimport { history, resourcePathFromModel } from '../utils';\nimport { dryRunOpt } from '@console/dev-console/src/utils/shared-submit-utils';\n// The name of the cluster-scoped OAuth configuration resource.\nconst OAUTH_RESOURCE_NAME = 'cluster';\nexport const getOAuthResource = () => k8sGet(OAuthModel, OAUTH_RESOURCE_NAME);\nexport const addIDP = (oauth, idp, dryRun) => {\n    const patch = _.isEmpty(oauth.spec.identityProviders)\n        ? { op: 'add', path: '/spec/identityProviders', value: [idp] }\n        : { op: 'add', path: '/spec/identityProviders/-', value: idp };\n    return k8sPatch(OAuthModel, oauth, [patch], dryRun ? dryRunOpt : {});\n};\nexport const redirectToOAuthPage = () => {\n    const path = resourcePathFromModel(OAuthModel, OAUTH_RESOURCE_NAME);\n    history.push(path);\n};\nexport const mockNames = {\n    secret: 'secret-name',\n    ca: 'ca-name',\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/cluster-settings/index.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/cluster-settings/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAM,WAAW,CAAC;AAE/B,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAC1C,OAAO,EAAoB,MAAM,EAAE,QAAQ,EAAa,MAAM,kBAAkB,CAAC;AACjF,OAAO,EAAE,OAAO,EAAE,qBAAqB,EAAE,MAAM,UAAU,CAAC;AAC1D,OAAO,EAAE,SAAS,EAAE,MAAM,oDAAoD,CAAC;AAE/E,+DAA+D;AAC/D,MAAM,mBAAmB,GAAG,SAAS,CAAC;AAEtC,MAAM,CAAC,MAAM,gBAAgB,GAAG,GAAuB,EAAE,CAAC,MAAM,CAAC,UAAU,EAAE,mBAAmB,CAAC,CAAC;AAElG,MAAM,CAAC,MAAM,MAAM,GAAG,CACpB,KAAgB,EAChB,GAAqB,EACrB,MAAgB,EACI,EAAE;IACtB,MAAM,KAAK,GAAG,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,iBAAiB,CAAC;QACnD,CAAC,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,yBAAyB,EAAE,KAAK,EAAE,CAAC,GAAG,CAAC,EAAE;QAC9D,CAAC,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,2BAA2B,EAAE,KAAK,EAAE,GAAG,EAAE,CAAC;IACjE,OAAO,QAAQ,CAAC,UAAU,EAAE,KAAK,EAAE,CAAC,KAAK,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;AACvE,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,mBAAmB,GAAG,GAAG,EAAE;IACtC,MAAM,IAAI,GAAG,qBAAqB,CAAC,UAAU,EAAE,mBAAmB,CAAC,CAAC;IACpE,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;AACrB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,SAAS,GAAG;IACvB,MAAM,EAAE,aAAa;IACrB,EAAE,EAAE,SAAS;CACd,CAAC","sourcesContent":["import * as _ from 'lodash-es';\n\nimport { OAuthModel } from '../../models';\nimport { IdentityProvider, k8sGet, k8sPatch, OAuthKind } from '../../module/k8s';\nimport { history, resourcePathFromModel } from '../utils';\nimport { dryRunOpt } from '@console/dev-console/src/utils/shared-submit-utils';\n\n// The name of the cluster-scoped OAuth configuration resource.\nconst OAUTH_RESOURCE_NAME = 'cluster';\n\nexport const getOAuthResource = (): Promise<OAuthKind> => k8sGet(OAuthModel, OAUTH_RESOURCE_NAME);\n\nexport const addIDP = (\n  oauth: OAuthKind,\n  idp: IdentityProvider,\n  dryRun?: boolean,\n): Promise<OAuthKind> => {\n  const patch = _.isEmpty(oauth.spec.identityProviders)\n    ? { op: 'add', path: '/spec/identityProviders', value: [idp] }\n    : { op: 'add', path: '/spec/identityProviders/-', value: idp };\n  return k8sPatch(OAuthModel, oauth, [patch], dryRun ? dryRunOpt : {});\n};\n\nexport const redirectToOAuthPage = () => {\n  const path = resourcePathFromModel(OAuthModel, OAUTH_RESOURCE_NAME);\n  history.push(path);\n};\n\nexport const mockNames = {\n  secret: 'secret-name',\n  ca: 'ca-name',\n};\n"]}]}