{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/Visualization.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/Visualization.ts","mtime":1615298458710},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { action, observable } from 'mobx';\nimport * as _ from 'lodash';\nimport { isEdge, isNode, ModelKind, isGraph, } from './types';\nimport defaultElementFactory from './elements/defaultElementFactory';\nimport Stateful from './utils/Stateful';\nexport default class Visualization extends Stateful {\n    constructor() {\n        super(...arguments);\n        this.elements = {};\n        this.layoutFactories = [];\n        this.componentFactories = [];\n        this.elementFactories = [defaultElementFactory];\n        this.eventListeners = {};\n        this.store = {};\n    }\n    getStore() {\n        return this.store;\n    }\n    fromModel(model) {\n        const oldGraph = this.graph;\n        // create elements\n        if (model.graph) {\n            this.graph = this.createElement(ModelKind.graph, model.graph);\n        }\n        const validIds = [];\n        const idToElement = {};\n        model.nodes &&\n            model.nodes.forEach((n) => {\n                idToElement[n.id] = n;\n                this.createElement(ModelKind.node, n);\n                validIds.push(n.id);\n            });\n        model.edges &&\n            model.edges.forEach((e) => {\n                idToElement[e.id] = e;\n                this.createElement(ModelKind.edge, e);\n                validIds.push(e.id);\n            });\n        // merge data\n        if (model.graph && this.graph) {\n            this.graph.setModel(model.graph);\n        }\n        const processed = {};\n        // process bottom up\n        const processElement = (element) => {\n            if (element.children) {\n                element.children.forEach((id) => processElement(idToElement[id]));\n            }\n            if (!processed[element.id]) {\n                processed[element.id] = true;\n                this.elements[element.id].setModel(element);\n            }\n        };\n        model.nodes && model.nodes.forEach(processElement);\n        model.edges && model.edges.forEach(processElement);\n        // remove all stale elements\n        _.forIn(this.elements, (element) => {\n            if (!isGraph(element) && !validIds.includes(element.getId())) {\n                this.removeElement(element);\n            }\n        });\n        if (oldGraph && oldGraph !== this.graph) {\n            this.removeElement(oldGraph);\n        }\n        if (this.graph) {\n            this.parentOrphansToGraph(this.graph);\n        }\n    }\n    getGraph() {\n        if (!this.graph) {\n            throw new Error('Graph has not been set.');\n        }\n        return this.graph;\n    }\n    setGraph(graph) {\n        if (this.graph !== graph) {\n            if (this.graph) {\n                this.graph.setController(undefined);\n            }\n            this.graph = graph;\n            graph.setController(this);\n            // TODO clean up and populate registries\n        }\n    }\n    getElements() {\n        return _.values(this.elements);\n    }\n    addElement(element) {\n        if (this.elements[element.getId()]) {\n            throw new Error(`Duplicate element for ID '${element.getId()}`);\n        }\n        element.setController(this);\n        this.elements[element.getId()] = element;\n    }\n    removeElement(element) {\n        if (this.elements[element.getId()]) {\n            element.remove();\n            // unparent all of the element's children such that they can be reparented\n            element\n                .getChildren()\n                .slice()\n                .forEach((child) => child.remove());\n            element.destroy();\n            element.setController(undefined);\n            delete this.elements[element.getId()];\n        }\n    }\n    getElementById(id) {\n        return this.elements[id];\n    }\n    getNodeById(id) {\n        const node = this.elements[id];\n        if (node && isNode(node)) {\n            return node;\n        }\n        return undefined;\n    }\n    getEdgeById(id) {\n        const edge = this.elements[id];\n        if (edge && isEdge(edge)) {\n            return edge;\n        }\n        return undefined;\n    }\n    getComponent(kind, type) {\n        for (const factory of this.componentFactories) {\n            const component = factory(kind, type);\n            if (component) {\n                return component;\n            }\n        }\n        throw new Error(`Could not find component for: Kind '${kind}', Type '${type}'`);\n    }\n    registerLayoutFactory(factory) {\n        this.layoutFactories.unshift(factory);\n    }\n    getLayout(type) {\n        for (const factory of this.layoutFactories) {\n            const layout = factory(type, this.getGraph());\n            if (layout) {\n                return layout;\n            }\n        }\n        throw new Error(`Could not find layout for type: ${type}`);\n    }\n    registerComponentFactory(factory) {\n        this.componentFactories.unshift(factory);\n    }\n    registerElementFactory(factory) {\n        this.elementFactories.unshift(factory);\n    }\n    addEventListener(type, listener) {\n        if (!this.eventListeners[type]) {\n            this.eventListeners[type] = [listener];\n        }\n        else {\n            this.eventListeners[type].push(listener);\n        }\n        return this;\n    }\n    removeEventListener(type, listener) {\n        if (!this.eventListeners[type]) {\n            return this;\n        }\n        const listeners = this.eventListeners[type];\n        const l = [];\n        for (let i = 0, { length } = listeners; i < length; i++) {\n            if (listeners[i] !== listener) {\n                l.push(listeners[i]);\n            }\n        }\n        if (l.length) {\n            this.eventListeners[type] = l;\n        }\n        else {\n            delete this.eventListeners[type];\n        }\n        return this;\n    }\n    fireEvent(type, ...args) {\n        const listeners = this.eventListeners[type];\n        if (listeners) {\n            for (let i = 0, { length } = listeners; i < length; i++) {\n                listeners[i](...args);\n            }\n        }\n    }\n    createElement(kind, elementModel) {\n        const existingElement = this.elements[elementModel.id];\n        if (existingElement) {\n            return existingElement;\n        }\n        for (const factory of this.elementFactories) {\n            const element = factory(kind, elementModel.type);\n            if (element) {\n                this.initElement(element, elementModel);\n                // cast to return type\n                return element;\n            }\n        }\n        throw new Error(`Could not create element for: ${JSON.stringify(elementModel)}`);\n    }\n    initElement(element, model) {\n        // set require fields\n        element.setId(model.id);\n        element.setType(model.type);\n        element.setController(this);\n        this.addElement(element);\n    }\n    parentOrphansToGraph(graph) {\n        this.getElements().forEach((element) => {\n            if (element !== this.graph && !element.hasParent()) {\n                graph.appendChild(element);\n            }\n        });\n    }\n}\n__decorate([\n    observable.shallow\n], Visualization.prototype, \"elements\", void 0);\n__decorate([\n    observable.ref\n], Visualization.prototype, \"graph\", void 0);\n__decorate([\n    observable.shallow\n], Visualization.prototype, \"store\", void 0);\n__decorate([\n    action\n], Visualization.prototype, \"fromModel\", null);\n__decorate([\n    action\n], Visualization.prototype, \"setGraph\", null);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/Visualization.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/Visualization.ts"],"names":[],"mappings":";;;;;;AACA,OAAO,EAAE,MAAM,EAAE,UAAU,EAAE,MAAM,MAAM,CAAC;AAC1C,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,EASL,MAAM,EACN,MAAM,EAGN,SAAS,EAGT,OAAO,GACR,MAAM,SAAS,CAAC;AACjB,OAAO,qBAAqB,MAAM,kCAAkC,CAAC;AACrE,OAAO,QAAQ,MAAM,kBAAkB,CAAC;AAExC,MAAM,CAAC,OAAO,OAAO,aAAc,SAAQ,QAAQ;IAAnD;;QAEE,aAAQ,GAAmC,EAAE,CAAC;QAKtC,oBAAe,GAAoB,EAAE,CAAC;QAEtC,uBAAkB,GAAuB,EAAE,CAAC;QAE5C,qBAAgB,GAAqB,CAAC,qBAAqB,CAAC,CAAC;QAE7D,mBAAc,GAAwC,EAAE,CAAC;QAGhD,UAAK,GAAG,EAAE,CAAC;IA0O9B,CAAC;IAxOC,QAAQ;QACN,OAAO,IAAI,CAAC,KAAU,CAAC;IACzB,CAAC;IAGD,SAAS,CAAC,KAAY;QACpB,MAAM,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC;QAE5B,kBAAkB;QAClB,IAAI,KAAK,CAAC,KAAK,EAAE;YACf,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,aAAa,CAAQ,SAAS,CAAC,KAAK,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;SACtE;QACD,MAAM,QAAQ,GAAa,EAAE,CAAC;QAE9B,MAAM,WAAW,GAAmC,EAAE,CAAC;QAEvD,KAAK,CAAC,KAAK;YACT,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;gBACxB,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACtB,IAAI,CAAC,aAAa,CAAO,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gBAC5C,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YACtB,CAAC,CAAC,CAAC;QAEL,KAAK,CAAC,KAAK;YACT,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE;gBACxB,WAAW,CAAC,CAAC,CAAC,EAAE,CAAC,GAAG,CAAC,CAAC;gBACtB,IAAI,CAAC,aAAa,CAAO,SAAS,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;gBAC5C,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;YACtB,CAAC,CAAC,CAAC;QAEL,aAAa;QACb,IAAI,KAAK,CAAC,KAAK,IAAI,IAAI,CAAC,KAAK,EAAE;YAC7B,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SAClC;QAED,MAAM,SAAS,GAA8B,EAAE,CAAC;QAEhD,oBAAoB;QACpB,MAAM,cAAc,GAAG,CAAC,OAAqB,EAAQ,EAAE;YACrD,IAAI,OAAO,CAAC,QAAQ,EAAE;gBACpB,OAAO,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,cAAc,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;aACnE;YACD,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,EAAE;gBAC1B,SAAS,CAAC,OAAO,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC;gBAC7B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;aAC7C;QACH,CAAC,CAAC;QAEF,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QACnD,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC;QAEnD,4BAA4B;QAC5B,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,OAAO,EAAE,EAAE;YACjC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,EAAE;gBAC5D,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;aAC7B;QACH,CAAC,CAAC,CAAC;QAEH,IAAI,QAAQ,IAAI,QAAQ,KAAK,IAAI,CAAC,KAAK,EAAE;YACvC,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;SAC9B;QAED,IAAI,IAAI,CAAC,KAAK,EAAE;YACd,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SACvC;IACH,CAAC;IAED,QAAQ;QACN,IAAI,CAAC,IAAI,CAAC,KAAK,EAAE;YACf,MAAM,IAAI,KAAK,CAAC,yBAAyB,CAAC,CAAC;SAC5C;QACD,OAAO,IAAI,CAAC,KAAK,CAAC;IACpB,CAAC;IAGD,QAAQ,CAAC,KAAY;QACnB,IAAI,IAAI,CAAC,KAAK,KAAK,KAAK,EAAE;YACxB,IAAI,IAAI,CAAC,KAAK,EAAE;gBACd,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;aACrC;YACD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;YACnB,KAAK,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YAC1B,wCAAwC;SACzC;IACH,CAAC;IAED,WAAW;QACT,OAAO,CAAC,CAAC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACjC,CAAC;IAED,UAAU,CAAC,OAAqB;QAC9B,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,EAAE;YAClC,MAAM,IAAI,KAAK,CAAC,6BAA6B,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;SACjE;QACD,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC5B,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,GAAG,OAAO,CAAC;IAC3C,CAAC;IAED,aAAa,CAAC,OAAqB;QACjC,IAAI,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,EAAE;YAClC,OAAO,CAAC,MAAM,EAAE,CAAC;YACjB,0EAA0E;YAC1E,OAAO;iBACJ,WAAW,EAAE;iBACb,KAAK,EAAE;iBACP,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,MAAM,EAAE,CAAC,CAAC;YACtC,OAAO,CAAC,OAAO,EAAE,CAAC;YAClB,OAAO,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;YACjC,OAAO,IAAI,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;SACvC;IACH,CAAC;IAED,cAAc,CAAC,EAAU;QACvB,OAAO,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAC3B,CAAC;IAED,WAAW,CAAC,EAAU;QACpB,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC/B,IAAI,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,EAAE;YACxB,OAAO,IAAI,CAAC;SACb;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,WAAW,CAAC,EAAU;QACpB,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC/B,IAAI,IAAI,IAAI,MAAM,CAAC,IAAI,CAAC,EAAE;YACxB,OAAO,IAAI,CAAC;SACb;QACD,OAAO,SAAS,CAAC;IACnB,CAAC;IAED,YAAY,CAAC,IAAe,EAAE,IAAY;QACxC,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,kBAAkB,EAAE;YAC7C,MAAM,SAAS,GAAG,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;YACtC,IAAI,SAAS,EAAE;gBACb,OAAO,SAAS,CAAC;aAClB;SACF;QACD,MAAM,IAAI,KAAK,CAAC,uCAAuC,IAAI,YAAY,IAAI,GAAG,CAAC,CAAC;IAClF,CAAC;IAED,qBAAqB,CAAC,OAAsB;QAC1C,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IACxC,CAAC;IAED,SAAS,CAAC,IAAY;QACpB,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,eAAe,EAAE;YAC1C,MAAM,MAAM,GAAG,OAAO,CAAC,IAAI,EAAE,IAAI,CAAC,QAAQ,EAAE,CAAC,CAAC;YAC9C,IAAI,MAAM,EAAE;gBACV,OAAO,MAAM,CAAC;aACf;SACF;QACD,MAAM,IAAI,KAAK,CAAC,mCAAmC,IAAI,EAAE,CAAC,CAAC;IAC7D,CAAC;IAED,wBAAwB,CAAC,OAAyB;QAChD,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAC3C,CAAC;IAED,sBAAsB,CAAC,OAAuB;QAC5C,IAAI,CAAC,gBAAgB,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IACzC,CAAC;IAED,gBAAgB,CAA0C,IAAY,EAAE,QAAW;QACjF,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;YAC9B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;SACxC;aAAM;YACL,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAC1C;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,mBAAmB,CAAC,IAAY,EAAE,QAAuB;QACvD,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,EAAE;YAC9B,OAAO,IAAI,CAAC;SACb;QACD,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC5C,MAAM,CAAC,GAAoB,EAAE,CAAC;QAC9B,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,MAAM,EAAE,GAAG,SAAS,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;YACvD,IAAI,SAAS,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;gBAC7B,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;aACtB;SACF;QACD,IAAI,CAAC,CAAC,MAAM,EAAE;YACZ,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;SAC/B;aAAM;YACL,OAAO,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;SAClC;QACD,OAAO,IAAI,CAAC;IACd,CAAC;IAED,SAAS,CAAC,IAAY,EAAE,GAAG,IAAS;QAClC,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;QAC5C,IAAI,SAAS,EAAE;YACb,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,MAAM,EAAE,GAAG,SAAS,EAAE,CAAC,GAAG,MAAM,EAAE,CAAC,EAAE,EAAE;gBACvD,SAAS,CAAC,CAAC,CAAC,CAAC,GAAG,IAAI,CAAC,CAAC;aACvB;SACF;IACH,CAAC;IAEO,aAAa,CAAyB,IAAe,EAAE,YAA0B;QACvF,MAAM,eAAe,GAAG,IAAI,CAAC,QAAQ,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;QACvD,IAAI,eAAe,EAAE;YACnB,OAAO,eAAoB,CAAC;SAC7B;QACD,KAAK,MAAM,OAAO,IAAI,IAAI,CAAC,gBAAgB,EAAE;YAC3C,MAAM,OAAO,GAAG,OAAO,CAAC,IAAI,EAAE,YAAY,CAAC,IAAI,CAAC,CAAC;YACjD,IAAI,OAAO,EAAE;gBACX,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,YAAY,CAAC,CAAC;gBACxC,sBAAsB;gBACtB,OAAO,OAAY,CAAC;aACrB;SACF;QACD,MAAM,IAAI,KAAK,CAAC,iCAAiC,IAAI,CAAC,SAAS,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC;IACnF,CAAC;IAEO,WAAW,CAAC,OAAqB,EAAE,KAAmB;QAC5D,qBAAqB;QACrB,OAAO,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QACxB,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QAC5B,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC5B,IAAI,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IAC3B,CAAC;IAEO,oBAAoB,CAAC,KAAY;QACvC,IAAI,CAAC,WAAW,EAAE,CAAC,OAAO,CAAC,CAAC,OAAqB,EAAE,EAAE;YACnD,IAAI,OAAO,KAAK,IAAI,CAAC,KAAK,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE;gBAClD,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,CAAC;aAC5B;QACH,CAAC,CAAC,CAAC;IACL,CAAC;CACF;AAxPC;IADC,UAAU,CAAC,OAAO;+CAC2B;AAG9C;IADC,UAAU,CAAC,GAAG;4CACO;AAWtB;IADC,UAAU,CAAC,OAAO;4CACS;AAO5B;IADC,MAAM;8CA6DN;AAUD;IADC,MAAM;6CAUN","sourcesContent":["import { ComponentType } from 'react';\nimport { action, observable } from 'mobx';\nimport * as _ from 'lodash';\nimport {\n  Controller,\n  Graph,\n  Edge,\n  Node,\n  ComponentFactory,\n  GraphElement,\n  ElementFactory,\n  ElementModel,\n  isEdge,\n  isNode,\n  Model,\n  EventListener,\n  ModelKind,\n  LayoutFactory,\n  Layout,\n  isGraph,\n} from './types';\nimport defaultElementFactory from './elements/defaultElementFactory';\nimport Stateful from './utils/Stateful';\n\nexport default class Visualization extends Stateful implements Controller {\n  @observable.shallow\n  elements: { [id: string]: GraphElement } = {};\n\n  @observable.ref\n  private graph?: Graph;\n\n  private layoutFactories: LayoutFactory[] = [];\n\n  private componentFactories: ComponentFactory[] = [];\n\n  private elementFactories: ElementFactory[] = [defaultElementFactory];\n\n  private eventListeners: { [type: string]: EventListener[] } = {};\n\n  @observable.shallow\n  private readonly store = {};\n\n  getStore<S = {}>(): S {\n    return this.store as S;\n  }\n\n  @action\n  fromModel(model: Model): void {\n    const oldGraph = this.graph;\n\n    // create elements\n    if (model.graph) {\n      this.graph = this.createElement<Graph>(ModelKind.graph, model.graph);\n    }\n    const validIds: string[] = [];\n\n    const idToElement: { [id: string]: ElementModel } = {};\n\n    model.nodes &&\n      model.nodes.forEach((n) => {\n        idToElement[n.id] = n;\n        this.createElement<Node>(ModelKind.node, n);\n        validIds.push(n.id);\n      });\n\n    model.edges &&\n      model.edges.forEach((e) => {\n        idToElement[e.id] = e;\n        this.createElement<Edge>(ModelKind.edge, e);\n        validIds.push(e.id);\n      });\n\n    // merge data\n    if (model.graph && this.graph) {\n      this.graph.setModel(model.graph);\n    }\n\n    const processed: { [id: string]: boolean } = {};\n\n    // process bottom up\n    const processElement = (element: ElementModel): void => {\n      if (element.children) {\n        element.children.forEach((id) => processElement(idToElement[id]));\n      }\n      if (!processed[element.id]) {\n        processed[element.id] = true;\n        this.elements[element.id].setModel(element);\n      }\n    };\n\n    model.nodes && model.nodes.forEach(processElement);\n    model.edges && model.edges.forEach(processElement);\n\n    // remove all stale elements\n    _.forIn(this.elements, (element) => {\n      if (!isGraph(element) && !validIds.includes(element.getId())) {\n        this.removeElement(element);\n      }\n    });\n\n    if (oldGraph && oldGraph !== this.graph) {\n      this.removeElement(oldGraph);\n    }\n\n    if (this.graph) {\n      this.parentOrphansToGraph(this.graph);\n    }\n  }\n\n  getGraph(): Graph {\n    if (!this.graph) {\n      throw new Error('Graph has not been set.');\n    }\n    return this.graph;\n  }\n\n  @action\n  setGraph(graph: Graph) {\n    if (this.graph !== graph) {\n      if (this.graph) {\n        this.graph.setController(undefined);\n      }\n      this.graph = graph;\n      graph.setController(this);\n      // TODO clean up and populate registries\n    }\n  }\n\n  getElements(): GraphElement[] {\n    return _.values(this.elements);\n  }\n\n  addElement(element: GraphElement): void {\n    if (this.elements[element.getId()]) {\n      throw new Error(`Duplicate element for ID '${element.getId()}`);\n    }\n    element.setController(this);\n    this.elements[element.getId()] = element;\n  }\n\n  removeElement(element: GraphElement): void {\n    if (this.elements[element.getId()]) {\n      element.remove();\n      // unparent all of the element's children such that they can be reparented\n      element\n        .getChildren()\n        .slice()\n        .forEach((child) => child.remove());\n      element.destroy();\n      element.setController(undefined);\n      delete this.elements[element.getId()];\n    }\n  }\n\n  getElementById(id: string): GraphElement | undefined {\n    return this.elements[id];\n  }\n\n  getNodeById(id: string): Node | undefined {\n    const node = this.elements[id];\n    if (node && isNode(node)) {\n      return node;\n    }\n    return undefined;\n  }\n\n  getEdgeById(id: string): Edge | undefined {\n    const edge = this.elements[id];\n    if (edge && isEdge(edge)) {\n      return edge;\n    }\n    return undefined;\n  }\n\n  getComponent(kind: ModelKind, type: string): ComponentType<{ element: GraphElement }> {\n    for (const factory of this.componentFactories) {\n      const component = factory(kind, type);\n      if (component) {\n        return component;\n      }\n    }\n    throw new Error(`Could not find component for: Kind '${kind}', Type '${type}'`);\n  }\n\n  registerLayoutFactory(factory: LayoutFactory) {\n    this.layoutFactories.unshift(factory);\n  }\n\n  getLayout(type: string): Layout | undefined {\n    for (const factory of this.layoutFactories) {\n      const layout = factory(type, this.getGraph());\n      if (layout) {\n        return layout;\n      }\n    }\n    throw new Error(`Could not find layout for type: ${type}`);\n  }\n\n  registerComponentFactory(factory: ComponentFactory) {\n    this.componentFactories.unshift(factory);\n  }\n\n  registerElementFactory(factory: ElementFactory): void {\n    this.elementFactories.unshift(factory);\n  }\n\n  addEventListener<L extends EventListener = EventListener>(type: string, listener: L): Controller {\n    if (!this.eventListeners[type]) {\n      this.eventListeners[type] = [listener];\n    } else {\n      this.eventListeners[type].push(listener);\n    }\n    return this;\n  }\n\n  removeEventListener(type: string, listener: EventListener): Controller {\n    if (!this.eventListeners[type]) {\n      return this;\n    }\n    const listeners = this.eventListeners[type];\n    const l: EventListener[] = [];\n    for (let i = 0, { length } = listeners; i < length; i++) {\n      if (listeners[i] !== listener) {\n        l.push(listeners[i]);\n      }\n    }\n    if (l.length) {\n      this.eventListeners[type] = l;\n    } else {\n      delete this.eventListeners[type];\n    }\n    return this;\n  }\n\n  fireEvent(type: string, ...args: any): void {\n    const listeners = this.eventListeners[type];\n    if (listeners) {\n      for (let i = 0, { length } = listeners; i < length; i++) {\n        listeners[i](...args);\n      }\n    }\n  }\n\n  private createElement<E extends GraphElement>(kind: ModelKind, elementModel: ElementModel): E {\n    const existingElement = this.elements[elementModel.id];\n    if (existingElement) {\n      return existingElement as E;\n    }\n    for (const factory of this.elementFactories) {\n      const element = factory(kind, elementModel.type);\n      if (element) {\n        this.initElement(element, elementModel);\n        // cast to return type\n        return element as E;\n      }\n    }\n    throw new Error(`Could not create element for: ${JSON.stringify(elementModel)}`);\n  }\n\n  private initElement(element: GraphElement, model: ElementModel): void {\n    // set require fields\n    element.setId(model.id);\n    element.setType(model.type);\n    element.setController(this);\n    this.addElement(element);\n  }\n\n  private parentOrphansToGraph(graph: Graph): void {\n    this.getElements().forEach((element: GraphElement) => {\n      if (element !== this.graph && !element.hasParent()) {\n        graph.appendChild(element);\n      }\n    });\n  }\n}\n"]}]}