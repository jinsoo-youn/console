{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/masthead-toolbar.jsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/masthead-toolbar.jsx","mtime":1615793099700},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { connect } from 'react-redux';\nimport { BellIcon, EllipsisVIcon, ClockIcon, GlobeAmericasIcon, AngleDownIcon } from '@patternfly/react-icons';\nimport { ApplicationLauncher, ApplicationLauncherGroup, ApplicationLauncherItem, ApplicationLauncherSeparator, NotificationBadge, Toolbar, ToolbarGroup, ToolbarItem, Badge } from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\nimport { FLAGS, YellowExclamationTriangleIcon } from '@console/shared';\nimport { formatNamespacedRouteForResource } from '@console/shared/src/utils';\nimport CloudShellMastheadButton from '@console/app/src/components/cloud-shell/CloudShellMastheadButton';\nimport * as UIActions from '../actions/ui';\nimport { connectToFlags, featureReducerName } from '../reducers/features';\nimport { authSvc } from '../module/auth';\nimport { getOCMLink } from '../module/k8s';\nimport { Firehose } from './utils';\nimport { openshiftHelpBase } from './utils/documentation';\nimport { AboutModal } from './about-modal';\nimport { clusterVersionReference, getReportBugLink } from '../module/k8s/cluster-settings';\nimport * as redhatLogoImg from '../imgs/logos/redhat.svg';\nimport { ExpTimer } from './hypercloud/exp-timer';\nimport { setAccessToken } from '../hypercloud/auth';\nimport { withTranslation } from 'react-i18next';\nimport i18n from 'i18next';\nconst SystemStatusButton = ({ statuspageData, className }) => !_.isEmpty(_.get(statuspageData, 'incidents')) ? (React.createElement(ToolbarItem, { className: className },\n    React.createElement(\"a\", { className: \"pf-c-button pf-m-plain\", \"aria-label\": \"System Status\", href: statuspageData.page.url, target: \"_blank\", rel: \"noopener noreferrer\" },\n        React.createElement(YellowExclamationTriangleIcon, { className: \"co-masthead-icon\" })))) : null;\nclass MastheadToolbarContents_ extends React.Component {\n    constructor(props) {\n        super(props);\n        this._launchActions = () => {\n            const { clusterID, consoleLinks } = this.props;\n            const launcherItems = this._getAdditionalLinks(consoleLinks, 'ApplicationMenu');\n            const sections = [];\n            if (clusterID && window.SERVER_FLAGS.branding !== 'okd' && window.SERVER_FLAGS.branding !== 'azure') {\n                sections.push({\n                    name: 'Red Hat Applications',\n                    isSection: true,\n                    actions: [\n                        {\n                            label: 'OpenShift Cluster Manager',\n                            externalLink: true,\n                            href: getOCMLink(clusterID),\n                            image: React.createElement(\"img\", { src: redhatLogoImg, alt: \"\" }),\n                        },\n                    ],\n                });\n            }\n            _.each(launcherItems, item => {\n                const sectionName = _.get(item, 'spec.applicationMenu.section', '');\n                if (!_.find(sections, { name: sectionName })) {\n                    sections.push({ name: sectionName, isSection: true, actions: [] });\n                }\n            });\n            const sortedSections = _.sortBy(sections, [this._sectionSort, 'name']);\n            _.each(sortedSections, section => {\n                const sectionItems = this._getSectionLauncherItems(launcherItems, section.name);\n                _.each(sectionItems, item => {\n                    section.actions.push({\n                        label: _.get(item, 'spec.text'),\n                        externalLink: true,\n                        href: _.get(item, 'spec.href'),\n                        image: React.createElement(\"img\", { src: _.get(item, 'spec.applicationMenu.imageURL'), alt: \"\" }),\n                    });\n                });\n            });\n            return sections;\n        };\n        this._externalProps = action => (action.externalLink ? { isExternal: true, target: '_blank', rel: 'noopener noreferrer' } : {});\n        this._tokenRefresh = () => {\n            const { keycloak } = this.props;\n            const curTime = new Date();\n            const tokenExpTime = new Date((keycloak.idTokenParsed.exp + keycloak.timeSkew) * 1000);\n            const logoutTime = (tokenExpTime.getTime() - curTime.getTime()) / 1000;\n            keycloak\n                .updateToken(Math.ceil(logoutTime))\n                .then(refreshed => {\n                console.log('refreshed', refreshed);\n                if (refreshed) {\n                    // TODO: 토큰 설정\n                    setAccessToken(keycloak.idToken);\n                    this.timerRef.tokRefresh();\n                }\n                else {\n                    // expired time > 60\n                    console.log('Token is still valid');\n                }\n            })\n                .catch(() => {\n                // refresh token 없음\n                console.log('Failed to refresh the token, or the session has expired');\n            });\n        };\n        this.timerRef = null;\n        this.state = {\n            isApplicationLauncherDropdownOpen: false,\n            isUserDropdownOpen: false,\n            isLanguageDropdownOpen: false,\n            isKebabDropdownOpen: false,\n            statuspageData: null,\n            isKubeAdmin: false,\n            showAboutModal: false,\n        };\n        this._getStatuspageData = this._getStatuspageData.bind(this);\n        this._getImportYAMLPath = this._getImportYAMLPath.bind(this);\n        this._updateUser = this._updateUser.bind(this);\n        this._onUserDropdownToggle = this._onUserDropdownToggle.bind(this);\n        this._onUserDropdownSelect = this._onUserDropdownSelect.bind(this);\n        this._onLanguageDropdownToggle = this._onLanguageDropdownToggle.bind(this);\n        this._onLanguageDropdownSelect = this._onLanguageDropdownSelect.bind(this);\n        this._onKebabDropdownToggle = this._onKebabDropdownToggle.bind(this);\n        this._onKebabDropdownSelect = this._onKebabDropdownSelect.bind(this);\n        this._renderMenu = this._renderMenu.bind(this);\n        this._renderLanguageMenu = this._renderLanguageMenu.bind(this);\n        this._onApplicationLauncherDropdownSelect = this._onApplicationLauncherDropdownSelect.bind(this);\n        this._onApplicationLauncherDropdownToggle = this._onApplicationLauncherDropdownToggle.bind(this);\n        this._onHelpDropdownSelect = this._onHelpDropdownSelect.bind(this);\n        this._onHelpDropdownToggle = this._onHelpDropdownToggle.bind(this);\n        this._onAboutModal = this._onAboutModal.bind(this);\n        this._closeAboutModal = this._closeAboutModal.bind(this);\n        this._tokenRefresh = this._tokenRefresh.bind(this);\n    }\n    _getStatuspageData(statuspageID) {\n        fetch(`https://${statuspageID}.statuspage.io/api/v2/summary.json`, {\n            headers: { Accept: 'application/json' },\n        })\n            .then(response => response.json())\n            .then(statuspageData => this.setState({ statuspageData }));\n    }\n    _getImportYAMLPath() {\n        return formatNamespacedRouteForResource('import', this.props.activeNamespace);\n    }\n    _updateUser() {\n        const { flags, user } = this.props;\n        if (!flags[FLAGS.OPENSHIFT]) {\n            this.setState({ username: authSvc.name() });\n        }\n        this.setState({\n            username: _.get(user, 'fullName') || _.get(user, 'metadata.name', ''),\n            isKubeAdmin: _.get(user, 'metadata.name') === 'kube:admin',\n        });\n    }\n    _onUserDropdownToggle(isUserDropdownOpen) {\n        this.setState({\n            isUserDropdownOpen,\n        });\n    }\n    _onUserDropdownSelect() {\n        this.setState({\n            isUserDropdownOpen: !this.state.isUserDropdownOpen,\n        });\n    }\n    _onLanguageDropdownToggle(isLanguageDropdownOpen) {\n        this.setState({\n            isLanguageDropdownOpen,\n        });\n    }\n    _onLanguageDropdownSelect() {\n        this.setState({\n            isLanguageDropdownOpen: !this.state.isLanguageDropdownOpen,\n        });\n    }\n    _onKebabDropdownToggle(isKebabDropdownOpen) {\n        this.setState({\n            isKebabDropdownOpen,\n        });\n    }\n    _onKebabDropdownSelect() {\n        this.setState({\n            isKebabDropdownOpen: !this.state.isKebabDropdownOpen,\n        });\n    }\n    _onApplicationLauncherDropdownSelect() {\n        this.setState({\n            isApplicationLauncherDropdownOpen: !this.state.isApplicationLauncherDropdownOpen,\n        });\n    }\n    _onApplicationLauncherDropdownToggle(isApplicationLauncherDropdownOpen) {\n        this.setState({\n            isApplicationLauncherDropdownOpen,\n        });\n    }\n    _onHelpDropdownSelect() {\n        this.setState({\n            isHelpDropdownOpen: !this.state.isHelpDropdownOpen,\n        });\n    }\n    _onHelpDropdownToggle(isHelpDropdownOpen) {\n        this.setState({\n            isHelpDropdownOpen,\n        });\n    }\n    _onAboutModal(e) {\n        e.preventDefault();\n        this.setState({ showAboutModal: true });\n    }\n    _closeAboutModal() {\n        this.setState({ showAboutModal: false });\n    }\n    _getAdditionalLinks(links, type) {\n        return _.sortBy(_.filter(links, link => link.spec.location === type), 'spec.text');\n    }\n    _getSectionLauncherItems(launcherItems, sectionName) {\n        return _.sortBy(_.filter(launcherItems, link => _.get(link, 'spec.applicationMenu.section', '') === sectionName), 'spec.text');\n    }\n    _sectionSort(section) {\n        switch (section.name) {\n            case 'Red Hat Applications':\n                return 0;\n            case 'Third Party Applications':\n                return 1;\n            case 'Customer Applications':\n                return 2;\n            case '':\n                return 9; // Items w/o sections go last\n            default:\n                return 3; // Custom groups come after well-known groups\n        }\n    }\n    _helpActions(additionalHelpActions) {\n        const { flags, cv } = this.props;\n        const helpActions = [];\n        const reportBugLink = cv && cv.data ? getReportBugLink(cv.data) : null;\n        helpActions.push({\n            name: '',\n            isSection: true,\n            actions: [\n                {\n                    label: 'Documentation',\n                    externalLink: true,\n                    href: openshiftHelpBase,\n                },\n                ...(flags[FLAGS.CONSOLE_CLI_DOWNLOAD]\n                    ? [\n                        {\n                            component: React.createElement(Link, { to: \"/command-line-tools\" }, \"Command Line Tools\"),\n                        },\n                    ]\n                    : []),\n                ...(reportBugLink\n                    ? [\n                        {\n                            label: reportBugLink.label,\n                            externalLink: true,\n                            href: reportBugLink.href,\n                        },\n                    ]\n                    : []),\n                {\n                    label: 'About',\n                    callback: this._onAboutModal,\n                    component: 'button',\n                },\n            ],\n        });\n        if (!_.isEmpty(additionalHelpActions.actions)) {\n            helpActions.push(additionalHelpActions);\n        }\n        return helpActions;\n    }\n    _getAdditionalActions(links) {\n        const actions = _.map(links, link => {\n            return {\n                label: link.spec.text,\n                externalLink: true,\n                href: link.spec.href,\n            };\n        });\n        return {\n            name: '',\n            isSection: true,\n            actions,\n        };\n    }\n    _renderApplicationItems(actions) {\n        return _.map(actions, (action, groupIndex) => {\n            if (action.isSection) {\n                return (React.createElement(ApplicationLauncherGroup, { key: groupIndex, label: action.name },\n                    React.createElement(React.Fragment, null,\n                        _.map(action.actions, (sectionAction, itemIndex) => {\n                            return (React.createElement(ApplicationLauncherItem, Object.assign({ key: itemIndex, icon: sectionAction.image, href: sectionAction.href || '#', onClick: sectionAction.callback, component: sectionAction.component }, this._externalProps(sectionAction)), sectionAction.label));\n                        }),\n                        groupIndex < actions.length - 1 && React.createElement(ApplicationLauncherSeparator, { key: `separator-${groupIndex}` }))));\n            }\n            return (React.createElement(ApplicationLauncherGroup, { key: groupIndex },\n                React.createElement(React.Fragment, null,\n                    React.createElement(ApplicationLauncherItem, Object.assign({ key: action.label, icon: action.image, href: action.href || '#', onClick: action.callback, component: action.component }, this._externalProps(action)), action.label),\n                    groupIndex < actions.length - 1 && React.createElement(ApplicationLauncherSeparator, { key: `separator-${groupIndex}` }))));\n        });\n    }\n    _renderMenu(mobile) {\n        const { flags, consoleLinks, keycloak, t } = this.props;\n        const username = !!keycloak.idTokenParsed.preferred_username ? keycloak.idTokenParsed.preferred_username : keycloak.idTokenParsed.email;\n        const { isUserDropdownOpen, isKebabDropdownOpen } = this.state;\n        const additionalUserActions = this._getAdditionalActions(this._getAdditionalLinks(consoleLinks, 'UserMenu'));\n        const helpActions = this._helpActions(this._getAdditionalActions(this._getAdditionalLinks(consoleLinks, 'HelpMenu')));\n        const launchActions = this._launchActions();\n        const actions = [];\n        const userActions = [];\n        const openAccountConsole = e => {\n            e.preventDefault();\n            window.open(keycloak.createAccountUrl());\n        };\n        const logout = e => {\n            e.preventDefault();\n            keycloak.logout();\n        };\n        userActions.push({\n            label: t('COMMON:MSG_GNB_ACCOUNT_1'),\n            callback: openAccountConsole,\n            component: 'button',\n        });\n        userActions.push({\n            label: t('COMMON:MSG_GNB_ACCOUNT_2'),\n            callback: logout,\n            component: 'button',\n        });\n        actions.push({\n            name: '',\n            isSection: true,\n            actions: userActions,\n        });\n        if (!_.isEmpty(additionalUserActions.actions)) {\n            actions.unshift(additionalUserActions);\n        }\n        if (mobile) {\n            actions.unshift(...helpActions);\n            // actions.unshift({\n            //   name: '',\n            //   isSection: true,\n            //   actions: [\n            //     {\n            //       component: <Link to={this._getImportYAMLPath()}>Import YAML</Link>,\n            //     },\n            //   ],\n            // });\n            if (!_.isEmpty(launchActions)) {\n                actions.unshift(...launchActions);\n            }\n            return React.createElement(ApplicationLauncher, { \"aria-label\": \"Utility menu\", className: \"co-app-launcher\", onSelect: this._onKebabDropdownSelect, onToggle: this._onKebabDropdownToggle, isOpen: isKebabDropdownOpen, items: this._renderApplicationItems(actions), position: \"right\", toggleIcon: React.createElement(EllipsisVIcon, null), isGrouped: true });\n        }\n        if (_.isEmpty(actions)) {\n            return React.createElement(\"div\", { className: \"co-username\" }, username);\n        }\n        const userToggle = (React.createElement(\"span\", { className: \"pf-c-dropdown__toggle\" },\n            React.createElement(\"span\", { className: \"co-username\" }, username),\n            React.createElement(AngleDownIcon, { className: \"pf-c-dropdown__toggle-icon\" })));\n        return React.createElement(ApplicationLauncher, { \"aria-label\": \"User menu\", \"data-test\": \"user-dropdown\", className: \"co-app-launcher co-user-menu\", onSelect: this._onUserDropdownSelect, onToggle: this._onUserDropdownToggle, isOpen: isUserDropdownOpen, items: this._renderApplicationItems(actions), position: \"right\", toggleIcon: userToggle, isGrouped: true });\n    }\n    _renderLanguageMenu(mobile) {\n        const { flags, consoleLinks, keycloak, t } = this.props;\n        const { isLanguageDropdownOpen } = this.state;\n        const actions = [];\n        const i18nActions = [];\n        const enChange = e => {\n            e.preventDefault();\n            i18n.changeLanguage('en');\n            window.localStorage.setItem('i18nextLng', 'en');\n        };\n        const koChange = e => {\n            e.preventDefault();\n            i18n.changeLanguage('ko');\n            window.localStorage.setItem('i18nextLng', 'ko');\n        };\n        i18nActions.push({\n            label: t('COMMON:MSG_GNB_LANGUAGE_2'),\n            callback: enChange,\n            component: 'button',\n        });\n        i18nActions.push({\n            label: t('COMMON:MSG_GNB_LANGUAGE_1'),\n            callback: koChange,\n            component: 'button',\n        });\n        actions.push({\n            name: '',\n            isSection: true,\n            actions: i18nActions,\n        });\n        if (mobile) {\n            actions.unshift({\n                name: '',\n                isSection: true,\n                actions: [],\n            });\n            return React.createElement(ApplicationLauncher, { \"aria-label\": \"Utility menu\", className: \"co-app-launcher\", onSelect: this._onKebabDropdownSelect, onToggle: this._onKebabDropdownToggle, isOpen: isKebabDropdownOpen, items: this._renderApplicationItems(actions), position: \"right\", toggleIcon: React.createElement(EllipsisVIcon, null), isGrouped: true });\n        }\n        if (_.isEmpty(actions)) {\n            return React.createElement(\"div\", { className: \"co-username\" });\n        }\n        const languageToggle = (React.createElement(\"span\", { className: \"pf-c-dropdown__toggle\" },\n            React.createElement(GlobeAmericasIcon, null),\n            React.createElement(\"span\", { className: \"co-username\" }, \"Language\"),\n            React.createElement(AngleDownIcon, { className: \"pf-c-dropdown__toggle-icon\" })));\n        return React.createElement(ApplicationLauncher, { \"aria-label\": \"Language menu\", \"data-test\": \"language-dropdown\", className: \"co-app-launcher co-user-menu\", onSelect: this._onLanguageDropdownSelect, onToggle: this._onLanguageDropdownToggle, isOpen: isLanguageDropdownOpen, items: this._renderApplicationItems(actions), position: \"right\", toggleIcon: languageToggle, isGrouped: true });\n    }\n    render() {\n        const { isApplicationLauncherDropdownOpen, isHelpDropdownOpen, showAboutModal, statuspageData } = this.state;\n        const { consoleLinks, drawerToggle, notificationsRead, canAccessNS, keycloak, t } = this.props;\n        const launchActions = this._launchActions();\n        // TODO: notificatoin 기능 완료 되면 추가하기.\n        const alertAccess = false; //canAccessNS && !!window.SERVER_FLAGS.prometheusBaseURL;\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Toolbar, null,\n                React.createElement(ToolbarGroup, { className: \"hidden-xs\" },\n                    React.createElement(ToolbarItem, null,\n                        React.createElement(ClockIcon, null)),\n                    React.createElement(ToolbarItem, null,\n                        React.createElement(ExpTimer, { ref: input => {\n                                this.timerRef = input;\n                            }, logout: keycloak.logout, tokenRefresh: this._tokenRefresh, keycloak: keycloak })),\n                    React.createElement(ToolbarItem, null,\n                        React.createElement(Badge, { key: 1, onClick: () => {\n                                this._tokenRefresh();\n                            } }, t('COMMON:MSG_GNB_SESSION_1'))),\n                    React.createElement(SystemStatusButton, { statuspageData: statuspageData }),\n                    !_.isEmpty(launchActions) && (React.createElement(ToolbarItem, null,\n                        React.createElement(ApplicationLauncher, { className: \"co-app-launcher\", \"data-test-id\": \"application-launcher\", onSelect: this._onApplicationLauncherDropdownSelect, onToggle: this._onApplicationLauncherDropdownToggle, isOpen: isApplicationLauncherDropdownOpen, items: this._renderApplicationItems(this._launchActions()), position: \"right\", isGrouped: true }))),\n                    React.createElement(ToolbarItem, null,\n                        React.createElement(\"div\", { className: \"co-masthead__line\" })),\n                    React.createElement(ToolbarItem, { className: \"hidden-xs\" }, this._renderLanguageMenu(false)),\n                    React.createElement(ToolbarItem, null,\n                        React.createElement(\"div\", { className: \"co-masthead__line\" })),\n                    ' ',\n                    alertAccess && (React.createElement(ToolbarItem, null,\n                        React.createElement(NotificationBadge, { \"aria-label\": \"Notification Drawer\", onClick: drawerToggle, isRead: notificationsRead },\n                            React.createElement(BellIcon, null)))),\n                    React.createElement(CloudShellMastheadButton, null)),\n                React.createElement(ToolbarGroup, null,\n                    // 기능 추가되면 완성하기\n                    alertAccess && !notificationsRead && (React.createElement(ToolbarItem, { className: \"visible-xs-block\" },\n                        React.createElement(NotificationBadge, { \"aria-label\": \"Notification Drawer\", onClick: drawerToggle, isRead: notificationsRead },\n                            React.createElement(BellIcon, null)))),\n                    React.createElement(SystemStatusButton, { statuspageData: statuspageData, className: \"visible-xs-block\" }),\n                    React.createElement(ToolbarItem, { className: \"visible-xs-block\" }, this._renderMenu(true)),\n                    React.createElement(ToolbarItem, { className: \"hidden-xs\" }, this._renderMenu(false)))),\n            React.createElement(AboutModal, { isOpen: showAboutModal, closeAboutModal: this._closeAboutModal })));\n    }\n}\nconst mastheadToolbarStateToProps = state => ({\n    activeNamespace: state.UI.get('activeNamespace'),\n    clusterID: state.UI.get('clusterID'),\n    user: state.UI.get('user'),\n    consoleLinks: state.UI.get('consoleLinks'),\n    notificationsRead: !!state.UI.getIn(['notifications', 'isRead']),\n    canAccessNS: !!state[featureReducerName].get(FLAGS.CAN_GET_NS),\n});\nconst MastheadToolbarContents = connect(mastheadToolbarStateToProps, {\n    drawerToggle: UIActions.notificationDrawerToggleExpanded,\n})(connectToFlags(FLAGS.AUTH_ENABLED, FLAGS.CONSOLE_CLI_DOWNLOAD, FLAGS.OPENSHIFT)(withTranslation()(MastheadToolbarContents_)));\nexport const MastheadToolbar = connectToFlags(FLAGS.CLUSTER_VERSION)(({ flags, keycloak }) => {\n    const resources = flags[FLAGS.CLUSTER_VERSION]\n        ? [\n            {\n                kind: clusterVersionReference,\n                name: 'version',\n                isList: false,\n                prop: 'cv',\n            },\n        ]\n        : [];\n    return (React.createElement(Firehose, { resources: resources },\n        React.createElement(MastheadToolbarContents, { keycloak: keycloak })));\n});\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/masthead-toolbar.jsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/masthead-toolbar.jsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,CAAC,MAAM,WAAW,CAAC;AAC/B,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AACtC,OAAO,EAAE,QAAQ,EAAE,aAAa,EAAsC,SAAS,EAAE,iBAAiB,EAAE,aAAa,EAAE,MAAM,yBAAyB,CAAC;AACnJ,OAAO,EAAE,mBAAmB,EAAE,wBAAwB,EAAE,uBAAuB,EAAE,4BAA4B,EAAE,iBAAiB,EAAE,OAAO,EAAE,YAAY,EAAE,WAAW,EAAoC,KAAK,EAAE,MAAM,wBAAwB,CAAC;AAC9O,OAAO,EAAE,IAAI,EAAE,MAAM,kBAAkB,CAAC;AACxC,OAAO,EAAE,KAAK,EAAE,6BAA6B,EAAE,MAAM,iBAAiB,CAAC;AACvE,OAAO,EAAE,gCAAgC,EAAE,MAAM,2BAA2B,CAAC;AAC7E,OAAO,wBAAwB,MAAM,kEAAkE,CAAC;AACxG,OAAO,KAAK,SAAS,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,cAAc,EAAe,kBAAkB,EAAE,MAAM,sBAAsB,CAAC;AACvF,OAAO,EAAE,OAAO,EAAE,MAAM,gBAAgB,CAAC;AACzC,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAC;AACnC,OAAO,EAAE,iBAAiB,EAAE,MAAM,uBAAuB,CAAC;AAC1D,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAC3C,OAAO,EAAE,uBAAuB,EAAE,gBAAgB,EAAE,MAAM,gCAAgC,CAAC;AAC3F,OAAO,KAAK,aAAa,MAAM,0BAA0B,CAAC;AAC1D,OAAO,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAClD,OAAO,EAAE,cAAc,EAAE,MAAM,oBAAoB,CAAC;AACpD,OAAO,EAAE,eAAe,EAAE,MAAM,eAAe,CAAC;AAChD,OAAO,IAAI,MAAM,SAAS,CAAC;AAE3B,MAAM,kBAAkB,GAAG,CAAC,EAAE,cAAc,EAAE,SAAS,EAAE,EAAE,EAAE,CAC3D,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,cAAc,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAC/C,oBAAC,WAAW,IAAC,SAAS,EAAE,SAAS;IAC/B,2BAAG,SAAS,EAAC,wBAAwB,gBAAY,eAAe,EAAC,IAAI,EAAE,cAAc,CAAC,IAAI,CAAC,GAAG,EAAE,MAAM,EAAC,QAAQ,EAAC,GAAG,EAAC,qBAAqB;QACvI,oBAAC,6BAA6B,IAAC,SAAS,EAAC,kBAAkB,GAAG,CAC5D,CACQ,CACf,CAAC,CAAC,CAAC,IAAI,CAAC;AAEX,MAAM,wBAAyB,SAAQ,KAAK,CAAC,SAAS;IACpD,YAAY,KAAK;QACf,KAAK,CAAC,KAAK,CAAC,CAAC;QAyJf,mBAAc,GAAG,GAAG,EAAE;YACpB,MAAM,EAAE,SAAS,EAAE,YAAY,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;YAC/C,MAAM,aAAa,GAAG,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,iBAAiB,CAAC,CAAC;YAEhF,MAAM,QAAQ,GAAG,EAAE,CAAC;YACpB,IAAI,SAAS,IAAI,MAAM,CAAC,YAAY,CAAC,QAAQ,KAAK,KAAK,IAAI,MAAM,CAAC,YAAY,CAAC,QAAQ,KAAK,OAAO,EAAE;gBACnG,QAAQ,CAAC,IAAI,CAAC;oBACZ,IAAI,EAAE,sBAAsB;oBAC5B,SAAS,EAAE,IAAI;oBACf,OAAO,EAAE;wBACP;4BACE,KAAK,EAAE,2BAA2B;4BAClC,YAAY,EAAE,IAAI;4BAClB,IAAI,EAAE,UAAU,CAAC,SAAS,CAAC;4BAC3B,KAAK,EAAE,6BAAK,GAAG,EAAE,aAAa,EAAE,GAAG,EAAC,EAAE,GAAG;yBAC1C;qBACF;iBACF,CAAC,CAAC;aACJ;YAED,CAAC,CAAC,IAAI,CAAC,aAAa,EAAE,IAAI,CAAC,EAAE;gBAC3B,MAAM,WAAW,GAAG,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,8BAA8B,EAAE,EAAE,CAAC,CAAC;gBACpE,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,CAAC,EAAE;oBAC5C,QAAQ,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,WAAW,EAAE,SAAS,EAAE,IAAI,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,CAAC;iBACpE;YACH,CAAC,CAAC,CAAC;YAEH,MAAM,cAAc,GAAG,CAAC,CAAC,MAAM,CAAC,QAAQ,EAAE,CAAC,IAAI,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC,CAAC;YAEvE,CAAC,CAAC,IAAI,CAAC,cAAc,EAAE,OAAO,CAAC,EAAE;gBAC/B,MAAM,YAAY,GAAG,IAAI,CAAC,wBAAwB,CAAC,aAAa,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC;gBAChF,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE,IAAI,CAAC,EAAE;oBAC1B,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC;wBACnB,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,WAAW,CAAC;wBAC/B,YAAY,EAAE,IAAI;wBAClB,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,WAAW,CAAC;wBAC9B,KAAK,EAAE,6BAAK,GAAG,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,+BAA+B,CAAC,EAAE,GAAG,EAAC,EAAE,GAAG;qBACzE,CAAC,CAAC;gBACL,CAAC,CAAC,CAAC;YACL,CAAC,CAAC,CAAC;YAEH,OAAO,QAAQ,CAAC;QAClB,CAAC,CAAC;QA+DF,mBAAc,GAAG,MAAM,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,EAAE,UAAU,EAAE,IAAI,EAAE,MAAM,EAAE,QAAQ,EAAE,GAAG,EAAE,qBAAqB,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;QA6K3H,kBAAa,GAAG,GAAG,EAAE;YACnB,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;YAChC,MAAM,OAAO,GAAG,IAAI,IAAI,EAAE,CAAC;YAC3B,MAAM,YAAY,GAAG,IAAI,IAAI,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,GAAG,GAAG,QAAQ,CAAC,QAAQ,CAAC,GAAG,IAAI,CAAC,CAAC;YACvF,MAAM,UAAU,GAAG,CAAC,YAAY,CAAC,OAAO,EAAE,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC,GAAG,IAAI,CAAC;YACvE,QAAQ;iBACL,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;iBAClC,IAAI,CAAC,SAAS,CAAC,EAAE;gBAChB,OAAO,CAAC,GAAG,CAAC,WAAW,EAAE,SAAS,CAAC,CAAC;gBACpC,IAAI,SAAS,EAAE;oBACb,cAAc;oBACd,cAAc,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;oBACjC,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,CAAC;iBAC5B;qBAAM;oBACL,oBAAoB;oBACpB,OAAO,CAAC,GAAG,CAAC,sBAAsB,CAAC,CAAC;iBACrC;YACH,CAAC,CAAC;iBACD,KAAK,CAAC,GAAG,EAAE;gBACV,mBAAmB;gBACnB,OAAO,CAAC,GAAG,CAAC,yDAAyD,CAAC,CAAC;YACzE,CAAC,CAAC,CAAC;QACP,CAAC,CAAC;QApcA,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,KAAK,GAAG;YACX,iCAAiC,EAAE,KAAK;YACxC,kBAAkB,EAAE,KAAK;YACzB,sBAAsB,EAAE,KAAK;YAC7B,mBAAmB,EAAE,KAAK;YAC1B,cAAc,EAAE,IAAI;YACpB,WAAW,EAAE,KAAK;YAClB,cAAc,EAAE,KAAK;SACtB,CAAC;QAEF,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7D,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC,kBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC7D,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/C,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnE,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnE,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3E,IAAI,CAAC,yBAAyB,GAAG,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC3E,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrE,IAAI,CAAC,sBAAsB,GAAG,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACrE,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/C,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAC/D,IAAI,CAAC,oCAAoC,GAAG,IAAI,CAAC,oCAAoC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjG,IAAI,CAAC,oCAAoC,GAAG,IAAI,CAAC,oCAAoC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACjG,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnE,IAAI,CAAC,qBAAqB,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnE,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACnD,IAAI,CAAC,gBAAgB,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACzD,IAAI,CAAC,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACrD,CAAC;IAED,kBAAkB,CAAC,YAAY;QAC7B,KAAK,CAAC,WAAW,YAAY,oCAAoC,EAAE;YACjE,OAAO,EAAE,EAAE,MAAM,EAAE,kBAAkB,EAAE;SACxC,CAAC;aACC,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,IAAI,EAAE,CAAC;aACjC,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,cAAc,EAAE,CAAC,CAAC,CAAC;IAC/D,CAAC;IAED,kBAAkB;QAChB,OAAO,gCAAgC,CAAC,QAAQ,EAAE,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC;IAChF,CAAC;IAED,WAAW;QACT,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACnC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,EAAE;YAC3B,IAAI,CAAC,QAAQ,CAAC,EAAE,QAAQ,EAAE,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;SAC7C;QACD,IAAI,CAAC,QAAQ,CAAC;YACZ,QAAQ,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,UAAU,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,eAAe,EAAE,EAAE,CAAC;YACrE,WAAW,EAAE,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,eAAe,CAAC,KAAK,YAAY;SAC3D,CAAC,CAAC;IACL,CAAC;IAED,qBAAqB,CAAC,kBAAkB;QACtC,IAAI,CAAC,QAAQ,CAAC;YACZ,kBAAkB;SACnB,CAAC,CAAC;IACL,CAAC;IAED,qBAAqB;QACnB,IAAI,CAAC,QAAQ,CAAC;YACZ,kBAAkB,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,kBAAkB;SACnD,CAAC,CAAC;IACL,CAAC;IAED,yBAAyB,CAAC,sBAAsB;QAC9C,IAAI,CAAC,QAAQ,CAAC;YACZ,sBAAsB;SACvB,CAAC,CAAC;IACL,CAAC;IAED,yBAAyB;QACvB,IAAI,CAAC,QAAQ,CAAC;YACZ,sBAAsB,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,sBAAsB;SAC3D,CAAC,CAAC;IACL,CAAC;IAED,sBAAsB,CAAC,mBAAmB;QACxC,IAAI,CAAC,QAAQ,CAAC;YACZ,mBAAmB;SACpB,CAAC,CAAC;IACL,CAAC;IAED,sBAAsB;QACpB,IAAI,CAAC,QAAQ,CAAC;YACZ,mBAAmB,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,mBAAmB;SACrD,CAAC,CAAC;IACL,CAAC;IAED,oCAAoC;QAClC,IAAI,CAAC,QAAQ,CAAC;YACZ,iCAAiC,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,iCAAiC;SACjF,CAAC,CAAC;IACL,CAAC;IAED,oCAAoC,CAAC,iCAAiC;QACpE,IAAI,CAAC,QAAQ,CAAC;YACZ,iCAAiC;SAClC,CAAC,CAAC;IACL,CAAC;IAED,qBAAqB;QACnB,IAAI,CAAC,QAAQ,CAAC;YACZ,kBAAkB,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,kBAAkB;SACnD,CAAC,CAAC;IACL,CAAC;IAED,qBAAqB,CAAC,kBAAkB;QACtC,IAAI,CAAC,QAAQ,CAAC;YACZ,kBAAkB;SACnB,CAAC,CAAC;IACL,CAAC;IAED,aAAa,CAAC,CAAC;QACb,CAAC,CAAC,cAAc,EAAE,CAAC;QACnB,IAAI,CAAC,QAAQ,CAAC,EAAE,cAAc,EAAE,IAAI,EAAE,CAAC,CAAC;IAC1C,CAAC;IAED,gBAAgB;QACd,IAAI,CAAC,QAAQ,CAAC,EAAE,cAAc,EAAE,KAAK,EAAE,CAAC,CAAC;IAC3C,CAAC;IAED,mBAAmB,CAAC,KAAK,EAAE,IAAI;QAC7B,OAAO,CAAC,CAAC,MAAM,CACb,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,KAAK,IAAI,CAAC,EACpD,WAAW,CACZ,CAAC;IACJ,CAAC;IAED,wBAAwB,CAAC,aAAa,EAAE,WAAW;QACjD,OAAO,CAAC,CAAC,MAAM,CACb,CAAC,CAAC,MAAM,CAAC,aAAa,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,IAAI,EAAE,8BAA8B,EAAE,EAAE,CAAC,KAAK,WAAW,CAAC,EAChG,WAAW,CACZ,CAAC;IACJ,CAAC;IAED,YAAY,CAAC,OAAO;QAClB,QAAQ,OAAO,CAAC,IAAI,EAAE;YACpB,KAAK,sBAAsB;gBACzB,OAAO,CAAC,CAAC;YACX,KAAK,0BAA0B;gBAC7B,OAAO,CAAC,CAAC;YACX,KAAK,uBAAuB;gBAC1B,OAAO,CAAC,CAAC;YACX,KAAK,EAAE;gBACL,OAAO,CAAC,CAAC,CAAC,6BAA6B;YACzC;gBACE,OAAO,CAAC,CAAC,CAAC,6CAA6C;SAC1D;IACH,CAAC;IA8CD,YAAY,CAAC,qBAAqB;QAChC,MAAM,EAAE,KAAK,EAAE,EAAE,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACjC,MAAM,WAAW,GAAG,EAAE,CAAC;QACvB,MAAM,aAAa,GAAG,EAAE,IAAI,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,gBAAgB,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;QAEvE,WAAW,CAAC,IAAI,CAAC;YACf,IAAI,EAAE,EAAE;YACR,SAAS,EAAE,IAAI;YACf,OAAO,EAAE;gBACP;oBACE,KAAK,EAAE,eAAe;oBACtB,YAAY,EAAE,IAAI;oBAClB,IAAI,EAAE,iBAAiB;iBACxB;gBACD,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC,oBAAoB,CAAC;oBACnC,CAAC,CAAC;wBACE;4BACE,SAAS,EAAE,oBAAC,IAAI,IAAC,EAAE,EAAC,qBAAqB,yBAA0B;yBACpE;qBACF;oBACH,CAAC,CAAC,EAAE,CAAC;gBACP,GAAG,CAAC,aAAa;oBACf,CAAC,CAAC;wBACE;4BACE,KAAK,EAAE,aAAa,CAAC,KAAK;4BAC1B,YAAY,EAAE,IAAI;4BAClB,IAAI,EAAE,aAAa,CAAC,IAAI;yBACzB;qBACF;oBACH,CAAC,CAAC,EAAE,CAAC;gBACP;oBACE,KAAK,EAAE,OAAO;oBACd,QAAQ,EAAE,IAAI,CAAC,aAAa;oBAC5B,SAAS,EAAE,QAAQ;iBACpB;aACF;SACF,CAAC,CAAC;QAEH,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,qBAAqB,CAAC,OAAO,CAAC,EAAE;YAC7C,WAAW,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;SACzC;QAED,OAAO,WAAW,CAAC;IACrB,CAAC;IAED,qBAAqB,CAAC,KAAK;QACzB,MAAM,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,IAAI,CAAC,EAAE;YAClC,OAAO;gBACL,KAAK,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI;gBACrB,YAAY,EAAE,IAAI;gBAClB,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,IAAI;aACrB,CAAC;QACJ,CAAC,CAAC,CAAC;QAEH,OAAO;YACL,IAAI,EAAE,EAAE;YACR,SAAS,EAAE,IAAI;YACf,OAAO;SACR,CAAC;IACJ,CAAC;IAID,uBAAuB,CAAC,OAAO;QAC7B,OAAO,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE,UAAU,EAAE,EAAE;YAC3C,IAAI,MAAM,CAAC,SAAS,EAAE;gBACpB,OAAO,CACL,oBAAC,wBAAwB,IAAC,GAAG,EAAE,UAAU,EAAE,KAAK,EAAE,MAAM,CAAC,IAAI;oBAC3D;wBACG,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC,aAAa,EAAE,SAAS,EAAE,EAAE;4BAClD,OAAO,CACL,oBAAC,uBAAuB,kBAAC,GAAG,EAAE,SAAS,EAAE,IAAI,EAAE,aAAa,CAAC,KAAK,EAAE,IAAI,EAAE,aAAa,CAAC,IAAI,IAAI,GAAG,EAAE,OAAO,EAAE,aAAa,CAAC,QAAQ,EAAE,SAAS,EAAE,aAAa,CAAC,SAAS,IAAM,IAAI,CAAC,cAAc,CAAC,aAAa,CAAC,GAC7M,aAAa,CAAC,KAAK,CACI,CAC3B,CAAC;wBACJ,CAAC,CAAC;wBACD,UAAU,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC,IAAI,oBAAC,4BAA4B,IAAC,GAAG,EAAE,aAAa,UAAU,EAAE,GAAI,CACnG,CACsB,CAC5B,CAAC;aACH;YAED,OAAO,CACL,oBAAC,wBAAwB,IAAC,GAAG,EAAE,UAAU;gBACvC;oBACE,oBAAC,uBAAuB,kBAAC,GAAG,EAAE,MAAM,CAAC,KAAK,EAAE,IAAI,EAAE,MAAM,CAAC,KAAK,EAAE,IAAI,EAAE,MAAM,CAAC,IAAI,IAAI,GAAG,EAAE,OAAO,EAAE,MAAM,CAAC,QAAQ,EAAE,SAAS,EAAE,MAAM,CAAC,SAAS,IAAM,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,GAC7K,MAAM,CAAC,KAAK,CACW;oBACzB,UAAU,GAAG,OAAO,CAAC,MAAM,GAAG,CAAC,IAAI,oBAAC,4BAA4B,IAAC,GAAG,EAAE,aAAa,UAAU,EAAE,GAAI,CACnG,CACsB,CAC5B,CAAC;QACJ,CAAC,CAAC,CAAC;IACL,CAAC;IAED,WAAW,CAAC,MAAM;QAChB,MAAM,EAAE,KAAK,EAAE,YAAY,EAAE,QAAQ,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACxD,MAAM,QAAQ,GAAG,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,kBAAkB,CAAC,CAAC,CAAC,QAAQ,CAAC,aAAa,CAAC,KAAK,CAAC;QACxI,MAAM,EAAE,kBAAkB,EAAE,mBAAmB,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAC/D,MAAM,qBAAqB,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC,CAAC;QAC7G,MAAM,WAAW,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;QACtH,MAAM,aAAa,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QAE5C,MAAM,OAAO,GAAG,EAAE,CAAC;QACnB,MAAM,WAAW,GAAG,EAAE,CAAC;QAEvB,MAAM,kBAAkB,GAAG,CAAC,CAAC,EAAE;YAC7B,CAAC,CAAC,cAAc,EAAE,CAAC;YACnB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,gBAAgB,EAAE,CAAC,CAAC;QAC3C,CAAC,CAAC;QAEF,MAAM,MAAM,GAAG,CAAC,CAAC,EAAE;YACjB,CAAC,CAAC,cAAc,EAAE,CAAC;YAEnB,QAAQ,CAAC,MAAM,EAAE,CAAC;QACpB,CAAC,CAAC;QAEF,WAAW,CAAC,IAAI,CAAC;YACf,KAAK,EAAE,CAAC,CAAC,0BAA0B,CAAC;YACpC,QAAQ,EAAE,kBAAkB;YAC5B,SAAS,EAAE,QAAQ;SACpB,CAAC,CAAC;QAEH,WAAW,CAAC,IAAI,CAAC;YACf,KAAK,EAAE,CAAC,CAAC,0BAA0B,CAAC;YACpC,QAAQ,EAAE,MAAM;YAChB,SAAS,EAAE,QAAQ;SACpB,CAAC,CAAC;QAEH,OAAO,CAAC,IAAI,CAAC;YACX,IAAI,EAAE,EAAE;YACR,SAAS,EAAE,IAAI;YACf,OAAO,EAAE,WAAW;SACrB,CAAC,CAAC;QAEH,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,qBAAqB,CAAC,OAAO,CAAC,EAAE;YAC7C,OAAO,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;SACxC;QAED,IAAI,MAAM,EAAE;YACV,OAAO,CAAC,OAAO,CAAC,GAAG,WAAW,CAAC,CAAC;YAEhC,oBAAoB;YACpB,cAAc;YACd,qBAAqB;YACrB,eAAe;YACf,QAAQ;YACR,4EAA4E;YAC5E,SAAS;YACT,OAAO;YACP,MAAM;YAEN,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;gBAC7B,OAAO,CAAC,OAAO,CAAC,GAAG,aAAa,CAAC,CAAC;aACnC;YAED,OAAO,oBAAC,mBAAmB,kBAAY,cAAc,EAAC,SAAS,EAAC,iBAAiB,EAAC,QAAQ,EAAE,IAAI,CAAC,sBAAsB,EAAE,QAAQ,EAAE,IAAI,CAAC,sBAAsB,EAAE,MAAM,EAAE,mBAAmB,EAAE,KAAK,EAAE,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAC,OAAO,EAAC,UAAU,EAAE,oBAAC,aAAa,OAAG,EAAE,SAAS,SAAG,CAAC;SACzS;QAED,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YACtB,OAAO,6BAAK,SAAS,EAAC,aAAa,IAAE,QAAQ,CAAO,CAAC;SACtD;QAED,MAAM,UAAU,GAAG,CACjB,8BAAM,SAAS,EAAC,uBAAuB;YACrC,8BAAM,SAAS,EAAC,aAAa,IAAE,QAAQ,CAAQ;YAC/C,oBAAC,aAAa,IAAC,SAAS,EAAC,4BAA4B,GAAG,CACnD,CACR,CAAC;QAEF,OAAO,oBAAC,mBAAmB,kBAAY,WAAW,eAAW,eAAe,EAAC,SAAS,EAAC,8BAA8B,EAAC,QAAQ,EAAE,IAAI,CAAC,qBAAqB,EAAE,QAAQ,EAAE,IAAI,CAAC,qBAAqB,EAAE,MAAM,EAAE,kBAAkB,EAAE,KAAK,EAAE,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAC,OAAO,EAAC,UAAU,EAAE,UAAU,EAAE,SAAS,SAAG,CAAC;IACpU,CAAC;IACD,mBAAmB,CAAC,MAAM;QACxB,MAAM,EAAE,KAAK,EAAE,YAAY,EAAE,QAAQ,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QACxD,MAAM,EAAE,sBAAsB,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAE9C,MAAM,OAAO,GAAG,EAAE,CAAC;QACnB,MAAM,WAAW,GAAG,EAAE,CAAC;QAEvB,MAAM,QAAQ,GAAG,CAAC,CAAC,EAAE;YACnB,CAAC,CAAC,cAAc,EAAE,CAAC;YACnB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;YAC1B,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;QAClD,CAAC,CAAC;QACF,MAAM,QAAQ,GAAG,CAAC,CAAC,EAAE;YACnB,CAAC,CAAC,cAAc,EAAE,CAAC;YACnB,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;YAC1B,MAAM,CAAC,YAAY,CAAC,OAAO,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC;QAClD,CAAC,CAAC;QAEF,WAAW,CAAC,IAAI,CAAC;YACf,KAAK,EAAE,CAAC,CAAC,2BAA2B,CAAC;YACrC,QAAQ,EAAE,QAAQ;YAClB,SAAS,EAAE,QAAQ;SACpB,CAAC,CAAC;QAEH,WAAW,CAAC,IAAI,CAAC;YACf,KAAK,EAAE,CAAC,CAAC,2BAA2B,CAAC;YACrC,QAAQ,EAAE,QAAQ;YAClB,SAAS,EAAE,QAAQ;SACpB,CAAC,CAAC;QAEH,OAAO,CAAC,IAAI,CAAC;YACX,IAAI,EAAE,EAAE;YACR,SAAS,EAAE,IAAI;YACf,OAAO,EAAE,WAAW;SACrB,CAAC,CAAC;QAEH,IAAI,MAAM,EAAE;YACV,OAAO,CAAC,OAAO,CAAC;gBACd,IAAI,EAAE,EAAE;gBACR,SAAS,EAAE,IAAI;gBACf,OAAO,EAAE,EAAE;aACZ,CAAC,CAAC;YAEH,OAAO,oBAAC,mBAAmB,kBAAY,cAAc,EAAC,SAAS,EAAC,iBAAiB,EAAC,QAAQ,EAAE,IAAI,CAAC,sBAAsB,EAAE,QAAQ,EAAE,IAAI,CAAC,sBAAsB,EAAE,MAAM,EAAE,mBAAmB,EAAE,KAAK,EAAE,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAC,OAAO,EAAC,UAAU,EAAE,oBAAC,aAAa,OAAG,EAAE,SAAS,SAAG,CAAC;SACzS;QAED,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE;YACtB,OAAO,6BAAK,SAAS,EAAC,aAAa,GAAO,CAAC;SAC5C;QAED,MAAM,cAAc,GAAG,CACrB,8BAAM,SAAS,EAAC,uBAAuB;YAErC,oBAAC,iBAAiB,OAAG;YACrB,8BAAM,SAAS,EAAC,aAAa,eAAgB;YAC7C,oBAAC,aAAa,IAAC,SAAS,EAAC,4BAA4B,GAAG,CACnD,CACR,CAAC;QAEF,OAAO,oBAAC,mBAAmB,kBAAY,eAAe,eAAW,mBAAmB,EAAC,SAAS,EAAC,8BAA8B,EAAC,QAAQ,EAAE,IAAI,CAAC,yBAAyB,EAAE,QAAQ,EAAE,IAAI,CAAC,yBAAyB,EAAE,MAAM,EAAE,sBAAsB,EAAE,KAAK,EAAE,IAAI,CAAC,uBAAuB,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAC,OAAO,EAAC,UAAU,EAAE,cAAc,EAAE,SAAS,SAAG,CAAC;IAC5V,CAAC;IA0BD,MAAM;QACJ,MAAM,EAAE,iCAAiC,EAAE,kBAAkB,EAAE,cAAc,EAAE,cAAc,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAC7G,MAAM,EAAE,YAAY,EAAE,YAAY,EAAE,iBAAiB,EAAE,WAAW,EAAE,QAAQ,EAAE,CAAC,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAC/F,MAAM,aAAa,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;QAC5C,oCAAoC;QACpC,MAAM,WAAW,GAAG,KAAK,CAAC,CAAC,yDAAyD;QACpF,OAAO,CACL;YACE,oBAAC,OAAO;gBACN,oBAAC,YAAY,IAAC,SAAS,EAAC,WAAW;oBACjC,oBAAC,WAAW;wBACV,oBAAC,SAAS,OAAG,CACD;oBACd,oBAAC,WAAW;wBACV,oBAAC,QAAQ,IACP,GAAG,EAAE,KAAK,CAAC,EAAE;gCACX,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;4BACxB,CAAC,EACD,MAAM,EAAE,QAAQ,CAAC,MAAM,EACvB,YAAY,EAAE,IAAI,CAAC,aAAa,EAChC,QAAQ,EAAE,QAAQ,GAClB,CACU;oBACd,oBAAC,WAAW;wBACV,oBAAC,KAAK,IACJ,GAAG,EAAE,CAAC,EACN,OAAO,EAAE,GAAG,EAAE;gCACZ,IAAI,CAAC,aAAa,EAAE,CAAC;4BACvB,CAAC,IAEA,CAAC,CAAC,0BAA0B,CAAC,CACxB,CACI;oBAEd,oBAAC,kBAAkB,IAAC,cAAc,EAAE,cAAc,GAAI;oBAErD,CAAC,CAAC,CAAC,OAAO,CAAC,aAAa,CAAC,IAAI,CAC5B,oBAAC,WAAW;wBACV,oBAAC,mBAAmB,IAAC,SAAS,EAAC,iBAAiB,kBAAc,sBAAsB,EAAC,QAAQ,EAAE,IAAI,CAAC,oCAAoC,EAAE,QAAQ,EAAE,IAAI,CAAC,oCAAoC,EAAE,MAAM,EAAE,iCAAiC,EAAE,KAAK,EAAE,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,EAAE,QAAQ,EAAC,OAAO,EAAC,SAAS,SAAG,CACvT,CACf;oBACD,oBAAC,WAAW;wBACV,6BAAK,SAAS,EAAC,mBAAmB,GAAO,CAC7B;oBAEd,oBAAC,WAAW,IAAC,SAAS,EAAC,WAAW,IAAE,IAAI,CAAC,mBAAmB,CAAC,KAAK,CAAC,CAAe;oBAClF,oBAAC,WAAW;wBACV,6BAAK,SAAS,EAAC,mBAAmB,GAAO,CAC7B;oBAAC,GAAG;oBAElB,WAAW,IAAI,CACb,oBAAC,WAAW;wBACV,oBAAC,iBAAiB,kBAAY,qBAAqB,EAAC,OAAO,EAAE,YAAY,EAAE,MAAM,EAAE,iBAAiB;4BAClG,oBAAC,QAAQ,OAAG,CACM,CACR,CACf;oBAQD,oBAAC,wBAAwB,OAAG,CAKf;gBACf,oBAAC,YAAY;oBAEX,eAAe;oBACf,WAAW,IAAI,CAAC,iBAAiB,IAAI,CACnC,oBAAC,WAAW,IAAC,SAAS,EAAC,kBAAkB;wBACvC,oBAAC,iBAAiB,kBAAY,qBAAqB,EAAC,OAAO,EAAE,YAAY,EAAE,MAAM,EAAE,iBAAiB;4BAClG,oBAAC,QAAQ,OAAG,CACM,CACR,CACf;oBAED,oBAAC,kBAAkB,IAAC,cAAc,EAAE,cAAc,EAAE,SAAS,EAAC,kBAAkB,GAAG;oBAEnF,oBAAC,WAAW,IAAC,SAAS,EAAC,kBAAkB,IAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,CAAe;oBAChF,oBAAC,WAAW,IAAC,SAAS,EAAC,WAAW,IAAE,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAe,CAC7D,CACP;YACV,oBAAC,UAAU,IAAC,MAAM,EAAE,cAAc,EAAE,eAAe,EAAE,IAAI,CAAC,gBAAgB,GAAI,CAC7E,CACJ,CAAC;IACJ,CAAC;CACF;AAED,MAAM,2BAA2B,GAAG,KAAK,CAAC,EAAE,CAAC,CAAC;IAC5C,eAAe,EAAE,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,iBAAiB,CAAC;IAChD,SAAS,EAAE,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,WAAW,CAAC;IACpC,IAAI,EAAE,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC;IAC1B,YAAY,EAAE,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,cAAc,CAAC;IAC1C,iBAAiB,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,eAAe,EAAE,QAAQ,CAAC,CAAC;IAChE,WAAW,EAAE,CAAC,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,UAAU,CAAC;CAC/D,CAAC,CAAC;AAEH,MAAM,uBAAuB,GAAG,OAAO,CAAC,2BAA2B,EAAE;IACnE,YAAY,EAAE,SAAS,CAAC,gCAAgC;CACzD,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,YAAY,EAAE,KAAK,CAAC,oBAAoB,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC,eAAe,EAAE,CAAC,wBAAwB,CAAC,CAAC,CAAC,CAAC;AAEjI,MAAM,CAAC,MAAM,eAAe,GAAG,cAAc,CAAC,KAAK,CAAC,eAAe,CAAC,CAAC,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,EAAE,EAAE;IAC3F,MAAM,SAAS,GAAG,KAAK,CAAC,KAAK,CAAC,eAAe,CAAC;QAC5C,CAAC,CAAC;YACE;gBACE,IAAI,EAAE,uBAAuB;gBAC7B,IAAI,EAAE,SAAS;gBACf,MAAM,EAAE,KAAK;gBACb,IAAI,EAAE,IAAI;aACX;SACF;QACH,CAAC,CAAC,EAAE,CAAC;IACP,OAAO,CACL,oBAAC,QAAQ,IAAC,SAAS,EAAE,SAAS;QAC5B,oBAAC,uBAAuB,IAAC,QAAQ,EAAE,QAAQ,GAAI,CACtC,CACZ,CAAC;AACJ,CAAC,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { connect } from 'react-redux';\nimport { BellIcon, EllipsisVIcon, PlusCircleIcon, QuestionCircleIcon, ClockIcon, GlobeAmericasIcon, AngleDownIcon } from '@patternfly/react-icons';\nimport { ApplicationLauncher, ApplicationLauncherGroup, ApplicationLauncherItem, ApplicationLauncherSeparator, NotificationBadge, Toolbar, ToolbarGroup, ToolbarItem, TooltipPosition, Tooltip, Button, Badge } from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\nimport { FLAGS, YellowExclamationTriangleIcon } from '@console/shared';\nimport { formatNamespacedRouteForResource } from '@console/shared/src/utils';\nimport CloudShellMastheadButton from '@console/app/src/components/cloud-shell/CloudShellMastheadButton';\nimport * as UIActions from '../actions/ui';\nimport { connectToFlags, flagPending, featureReducerName } from '../reducers/features';\nimport { authSvc } from '../module/auth';\nimport { getOCMLink } from '../module/k8s';\nimport { Firehose } from './utils';\nimport { openshiftHelpBase } from './utils/documentation';\nimport { AboutModal } from './about-modal';\nimport { clusterVersionReference, getReportBugLink } from '../module/k8s/cluster-settings';\nimport * as redhatLogoImg from '../imgs/logos/redhat.svg';\nimport { ExpTimer } from './hypercloud/exp-timer';\nimport { setAccessToken } from '../hypercloud/auth';\nimport { withTranslation } from 'react-i18next';\nimport i18n from 'i18next';\n\nconst SystemStatusButton = ({ statuspageData, className }) =>\n  !_.isEmpty(_.get(statuspageData, 'incidents')) ? (\n    <ToolbarItem className={className}>\n      <a className=\"pf-c-button pf-m-plain\" aria-label=\"System Status\" href={statuspageData.page.url} target=\"_blank\" rel=\"noopener noreferrer\">\n        <YellowExclamationTriangleIcon className=\"co-masthead-icon\" />\n      </a>\n    </ToolbarItem>\n  ) : null;\n\nclass MastheadToolbarContents_ extends React.Component {\n  constructor(props) {\n    super(props);\n    this.timerRef = null;\n    this.state = {\n      isApplicationLauncherDropdownOpen: false,\n      isUserDropdownOpen: false,\n      isLanguageDropdownOpen: false,\n      isKebabDropdownOpen: false,\n      statuspageData: null,\n      isKubeAdmin: false,\n      showAboutModal: false,\n    };\n\n    this._getStatuspageData = this._getStatuspageData.bind(this);\n    this._getImportYAMLPath = this._getImportYAMLPath.bind(this);\n    this._updateUser = this._updateUser.bind(this);\n    this._onUserDropdownToggle = this._onUserDropdownToggle.bind(this);\n    this._onUserDropdownSelect = this._onUserDropdownSelect.bind(this);\n    this._onLanguageDropdownToggle = this._onLanguageDropdownToggle.bind(this);\n    this._onLanguageDropdownSelect = this._onLanguageDropdownSelect.bind(this);\n    this._onKebabDropdownToggle = this._onKebabDropdownToggle.bind(this);\n    this._onKebabDropdownSelect = this._onKebabDropdownSelect.bind(this);\n    this._renderMenu = this._renderMenu.bind(this);\n    this._renderLanguageMenu = this._renderLanguageMenu.bind(this);\n    this._onApplicationLauncherDropdownSelect = this._onApplicationLauncherDropdownSelect.bind(this);\n    this._onApplicationLauncherDropdownToggle = this._onApplicationLauncherDropdownToggle.bind(this);\n    this._onHelpDropdownSelect = this._onHelpDropdownSelect.bind(this);\n    this._onHelpDropdownToggle = this._onHelpDropdownToggle.bind(this);\n    this._onAboutModal = this._onAboutModal.bind(this);\n    this._closeAboutModal = this._closeAboutModal.bind(this);\n    this._tokenRefresh = this._tokenRefresh.bind(this);\n  }\n\n  _getStatuspageData(statuspageID) {\n    fetch(`https://${statuspageID}.statuspage.io/api/v2/summary.json`, {\n      headers: { Accept: 'application/json' },\n    })\n      .then(response => response.json())\n      .then(statuspageData => this.setState({ statuspageData }));\n  }\n\n  _getImportYAMLPath() {\n    return formatNamespacedRouteForResource('import', this.props.activeNamespace);\n  }\n\n  _updateUser() {\n    const { flags, user } = this.props;\n    if (!flags[FLAGS.OPENSHIFT]) {\n      this.setState({ username: authSvc.name() });\n    }\n    this.setState({\n      username: _.get(user, 'fullName') || _.get(user, 'metadata.name', ''),\n      isKubeAdmin: _.get(user, 'metadata.name') === 'kube:admin',\n    });\n  }\n\n  _onUserDropdownToggle(isUserDropdownOpen) {\n    this.setState({\n      isUserDropdownOpen,\n    });\n  }\n\n  _onUserDropdownSelect() {\n    this.setState({\n      isUserDropdownOpen: !this.state.isUserDropdownOpen,\n    });\n  }\n\n  _onLanguageDropdownToggle(isLanguageDropdownOpen) {\n    this.setState({\n      isLanguageDropdownOpen,\n    });\n  }\n\n  _onLanguageDropdownSelect() {\n    this.setState({\n      isLanguageDropdownOpen: !this.state.isLanguageDropdownOpen,\n    });\n  }\n\n  _onKebabDropdownToggle(isKebabDropdownOpen) {\n    this.setState({\n      isKebabDropdownOpen,\n    });\n  }\n\n  _onKebabDropdownSelect() {\n    this.setState({\n      isKebabDropdownOpen: !this.state.isKebabDropdownOpen,\n    });\n  }\n\n  _onApplicationLauncherDropdownSelect() {\n    this.setState({\n      isApplicationLauncherDropdownOpen: !this.state.isApplicationLauncherDropdownOpen,\n    });\n  }\n\n  _onApplicationLauncherDropdownToggle(isApplicationLauncherDropdownOpen) {\n    this.setState({\n      isApplicationLauncherDropdownOpen,\n    });\n  }\n\n  _onHelpDropdownSelect() {\n    this.setState({\n      isHelpDropdownOpen: !this.state.isHelpDropdownOpen,\n    });\n  }\n\n  _onHelpDropdownToggle(isHelpDropdownOpen) {\n    this.setState({\n      isHelpDropdownOpen,\n    });\n  }\n\n  _onAboutModal(e) {\n    e.preventDefault();\n    this.setState({ showAboutModal: true });\n  }\n\n  _closeAboutModal() {\n    this.setState({ showAboutModal: false });\n  }\n\n  _getAdditionalLinks(links, type) {\n    return _.sortBy(\n      _.filter(links, link => link.spec.location === type),\n      'spec.text',\n    );\n  }\n\n  _getSectionLauncherItems(launcherItems, sectionName) {\n    return _.sortBy(\n      _.filter(launcherItems, link => _.get(link, 'spec.applicationMenu.section', '') === sectionName),\n      'spec.text',\n    );\n  }\n\n  _sectionSort(section) {\n    switch (section.name) {\n      case 'Red Hat Applications':\n        return 0;\n      case 'Third Party Applications':\n        return 1;\n      case 'Customer Applications':\n        return 2;\n      case '':\n        return 9; // Items w/o sections go last\n      default:\n        return 3; // Custom groups come after well-known groups\n    }\n  }\n\n  _launchActions = () => {\n    const { clusterID, consoleLinks } = this.props;\n    const launcherItems = this._getAdditionalLinks(consoleLinks, 'ApplicationMenu');\n\n    const sections = [];\n    if (clusterID && window.SERVER_FLAGS.branding !== 'okd' && window.SERVER_FLAGS.branding !== 'azure') {\n      sections.push({\n        name: 'Red Hat Applications',\n        isSection: true,\n        actions: [\n          {\n            label: 'OpenShift Cluster Manager',\n            externalLink: true,\n            href: getOCMLink(clusterID),\n            image: <img src={redhatLogoImg} alt=\"\" />,\n          },\n        ],\n      });\n    }\n\n    _.each(launcherItems, item => {\n      const sectionName = _.get(item, 'spec.applicationMenu.section', '');\n      if (!_.find(sections, { name: sectionName })) {\n        sections.push({ name: sectionName, isSection: true, actions: [] });\n      }\n    });\n\n    const sortedSections = _.sortBy(sections, [this._sectionSort, 'name']);\n\n    _.each(sortedSections, section => {\n      const sectionItems = this._getSectionLauncherItems(launcherItems, section.name);\n      _.each(sectionItems, item => {\n        section.actions.push({\n          label: _.get(item, 'spec.text'),\n          externalLink: true,\n          href: _.get(item, 'spec.href'),\n          image: <img src={_.get(item, 'spec.applicationMenu.imageURL')} alt=\"\" />,\n        });\n      });\n    });\n\n    return sections;\n  };\n\n  _helpActions(additionalHelpActions) {\n    const { flags, cv } = this.props;\n    const helpActions = [];\n    const reportBugLink = cv && cv.data ? getReportBugLink(cv.data) : null;\n\n    helpActions.push({\n      name: '',\n      isSection: true,\n      actions: [\n        {\n          label: 'Documentation',\n          externalLink: true,\n          href: openshiftHelpBase,\n        },\n        ...(flags[FLAGS.CONSOLE_CLI_DOWNLOAD]\n          ? [\n              {\n                component: <Link to=\"/command-line-tools\">Command Line Tools</Link>,\n              },\n            ]\n          : []),\n        ...(reportBugLink\n          ? [\n              {\n                label: reportBugLink.label,\n                externalLink: true,\n                href: reportBugLink.href,\n              },\n            ]\n          : []),\n        {\n          label: 'About',\n          callback: this._onAboutModal,\n          component: 'button',\n        },\n      ],\n    });\n\n    if (!_.isEmpty(additionalHelpActions.actions)) {\n      helpActions.push(additionalHelpActions);\n    }\n\n    return helpActions;\n  }\n\n  _getAdditionalActions(links) {\n    const actions = _.map(links, link => {\n      return {\n        label: link.spec.text,\n        externalLink: true,\n        href: link.spec.href,\n      };\n    });\n\n    return {\n      name: '',\n      isSection: true,\n      actions,\n    };\n  }\n\n  _externalProps = action => (action.externalLink ? { isExternal: true, target: '_blank', rel: 'noopener noreferrer' } : {});\n\n  _renderApplicationItems(actions) {\n    return _.map(actions, (action, groupIndex) => {\n      if (action.isSection) {\n        return (\n          <ApplicationLauncherGroup key={groupIndex} label={action.name}>\n            <>\n              {_.map(action.actions, (sectionAction, itemIndex) => {\n                return (\n                  <ApplicationLauncherItem key={itemIndex} icon={sectionAction.image} href={sectionAction.href || '#'} onClick={sectionAction.callback} component={sectionAction.component} {...this._externalProps(sectionAction)}>\n                    {sectionAction.label}\n                  </ApplicationLauncherItem>\n                );\n              })}\n              {groupIndex < actions.length - 1 && <ApplicationLauncherSeparator key={`separator-${groupIndex}`} />}\n            </>\n          </ApplicationLauncherGroup>\n        );\n      }\n\n      return (\n        <ApplicationLauncherGroup key={groupIndex}>\n          <>\n            <ApplicationLauncherItem key={action.label} icon={action.image} href={action.href || '#'} onClick={action.callback} component={action.component} {...this._externalProps(action)}>\n              {action.label}\n            </ApplicationLauncherItem>\n            {groupIndex < actions.length - 1 && <ApplicationLauncherSeparator key={`separator-${groupIndex}`} />}\n          </>\n        </ApplicationLauncherGroup>\n      );\n    });\n  }\n\n  _renderMenu(mobile) {\n    const { flags, consoleLinks, keycloak, t } = this.props;\n    const username = !!keycloak.idTokenParsed.preferred_username ? keycloak.idTokenParsed.preferred_username : keycloak.idTokenParsed.email;\n    const { isUserDropdownOpen, isKebabDropdownOpen } = this.state;\n    const additionalUserActions = this._getAdditionalActions(this._getAdditionalLinks(consoleLinks, 'UserMenu'));\n    const helpActions = this._helpActions(this._getAdditionalActions(this._getAdditionalLinks(consoleLinks, 'HelpMenu')));\n    const launchActions = this._launchActions();\n\n    const actions = [];\n    const userActions = [];\n\n    const openAccountConsole = e => {\n      e.preventDefault();\n      window.open(keycloak.createAccountUrl());\n    };\n\n    const logout = e => {\n      e.preventDefault();\n\n      keycloak.logout();\n    };\n\n    userActions.push({\n      label: t('COMMON:MSG_GNB_ACCOUNT_1'),\n      callback: openAccountConsole,\n      component: 'button',\n    });\n\n    userActions.push({\n      label: t('COMMON:MSG_GNB_ACCOUNT_2'),\n      callback: logout,\n      component: 'button',\n    });\n\n    actions.push({\n      name: '',\n      isSection: true,\n      actions: userActions,\n    });\n\n    if (!_.isEmpty(additionalUserActions.actions)) {\n      actions.unshift(additionalUserActions);\n    }\n\n    if (mobile) {\n      actions.unshift(...helpActions);\n\n      // actions.unshift({\n      //   name: '',\n      //   isSection: true,\n      //   actions: [\n      //     {\n      //       component: <Link to={this._getImportYAMLPath()}>Import YAML</Link>,\n      //     },\n      //   ],\n      // });\n\n      if (!_.isEmpty(launchActions)) {\n        actions.unshift(...launchActions);\n      }\n\n      return <ApplicationLauncher aria-label=\"Utility menu\" className=\"co-app-launcher\" onSelect={this._onKebabDropdownSelect} onToggle={this._onKebabDropdownToggle} isOpen={isKebabDropdownOpen} items={this._renderApplicationItems(actions)} position=\"right\" toggleIcon={<EllipsisVIcon />} isGrouped />;\n    }\n\n    if (_.isEmpty(actions)) {\n      return <div className=\"co-username\">{username}</div>;\n    }\n\n    const userToggle = (\n      <span className=\"pf-c-dropdown__toggle\">\n        <span className=\"co-username\">{username}</span>\n        <AngleDownIcon className=\"pf-c-dropdown__toggle-icon\" />\n      </span>\n    );\n\n    return <ApplicationLauncher aria-label=\"User menu\" data-test=\"user-dropdown\" className=\"co-app-launcher co-user-menu\" onSelect={this._onUserDropdownSelect} onToggle={this._onUserDropdownToggle} isOpen={isUserDropdownOpen} items={this._renderApplicationItems(actions)} position=\"right\" toggleIcon={userToggle} isGrouped />;\n  }\n  _renderLanguageMenu(mobile) {\n    const { flags, consoleLinks, keycloak, t } = this.props;\n    const { isLanguageDropdownOpen } = this.state;\n\n    const actions = [];\n    const i18nActions = [];\n\n    const enChange = e => {\n      e.preventDefault();\n      i18n.changeLanguage('en');\n      window.localStorage.setItem('i18nextLng', 'en');\n    };\n    const koChange = e => {\n      e.preventDefault();\n      i18n.changeLanguage('ko');\n      window.localStorage.setItem('i18nextLng', 'ko');\n    };\n\n    i18nActions.push({\n      label: t('COMMON:MSG_GNB_LANGUAGE_2'),\n      callback: enChange,\n      component: 'button',\n    });\n\n    i18nActions.push({\n      label: t('COMMON:MSG_GNB_LANGUAGE_1'),\n      callback: koChange,\n      component: 'button',\n    });\n\n    actions.push({\n      name: '',\n      isSection: true,\n      actions: i18nActions,\n    });\n\n    if (mobile) {\n      actions.unshift({\n        name: '',\n        isSection: true,\n        actions: [],\n      });\n\n      return <ApplicationLauncher aria-label=\"Utility menu\" className=\"co-app-launcher\" onSelect={this._onKebabDropdownSelect} onToggle={this._onKebabDropdownToggle} isOpen={isKebabDropdownOpen} items={this._renderApplicationItems(actions)} position=\"right\" toggleIcon={<EllipsisVIcon />} isGrouped />;\n    }\n\n    if (_.isEmpty(actions)) {\n      return <div className=\"co-username\"></div>;\n    }\n\n    const languageToggle = (\n      <span className=\"pf-c-dropdown__toggle\">\n        {/* i18n 키값 요청 후 적용하기 - 현재 선택된 언어를 표현하는 키값 - 한국어, 영어 */}\n        <GlobeAmericasIcon />\n        <span className=\"co-username\">Language</span>\n        <AngleDownIcon className=\"pf-c-dropdown__toggle-icon\" />\n      </span>\n    );\n\n    return <ApplicationLauncher aria-label=\"Language menu\" data-test=\"language-dropdown\" className=\"co-app-launcher co-user-menu\" onSelect={this._onLanguageDropdownSelect} onToggle={this._onLanguageDropdownToggle} isOpen={isLanguageDropdownOpen} items={this._renderApplicationItems(actions)} position=\"right\" toggleIcon={languageToggle} isGrouped />;\n  }\n\n  _tokenRefresh = () => {\n    const { keycloak } = this.props;\n    const curTime = new Date();\n    const tokenExpTime = new Date((keycloak.idTokenParsed.exp + keycloak.timeSkew) * 1000);\n    const logoutTime = (tokenExpTime.getTime() - curTime.getTime()) / 1000;\n    keycloak\n      .updateToken(Math.ceil(logoutTime))\n      .then(refreshed => {\n        console.log('refreshed', refreshed);\n        if (refreshed) {\n          // TODO: 토큰 설정\n          setAccessToken(keycloak.idToken);\n          this.timerRef.tokRefresh();\n        } else {\n          // expired time > 60\n          console.log('Token is still valid');\n        }\n      })\n      .catch(() => {\n        // refresh token 없음\n        console.log('Failed to refresh the token, or the session has expired');\n      });\n  };\n\n  render() {\n    const { isApplicationLauncherDropdownOpen, isHelpDropdownOpen, showAboutModal, statuspageData } = this.state;\n    const { consoleLinks, drawerToggle, notificationsRead, canAccessNS, keycloak, t } = this.props;\n    const launchActions = this._launchActions();\n    // TODO: notificatoin 기능 완료 되면 추가하기.\n    const alertAccess = false; //canAccessNS && !!window.SERVER_FLAGS.prometheusBaseURL;\n    return (\n      <>\n        <Toolbar>\n          <ToolbarGroup className=\"hidden-xs\">\n            <ToolbarItem>\n              <ClockIcon />\n            </ToolbarItem>\n            <ToolbarItem>\n              <ExpTimer\n                ref={input => {\n                  this.timerRef = input;\n                }}\n                logout={keycloak.logout}\n                tokenRefresh={this._tokenRefresh}\n                keycloak={keycloak}\n              />\n            </ToolbarItem>\n            <ToolbarItem>\n              <Badge\n                key={1}\n                onClick={() => {\n                  this._tokenRefresh();\n                }}\n              >\n                {t('COMMON:MSG_GNB_SESSION_1')}\n              </Badge>\n            </ToolbarItem>\n            {/* desktop -- (system status button) */}\n            <SystemStatusButton statuspageData={statuspageData} />\n            {/* desktop -- (application launcher dropdown), import yaml, help dropdown [documentation, about] */}\n            {!_.isEmpty(launchActions) && (\n              <ToolbarItem>\n                <ApplicationLauncher className=\"co-app-launcher\" data-test-id=\"application-launcher\" onSelect={this._onApplicationLauncherDropdownSelect} onToggle={this._onApplicationLauncherDropdownToggle} isOpen={isApplicationLauncherDropdownOpen} items={this._renderApplicationItems(this._launchActions())} position=\"right\" isGrouped />\n              </ToolbarItem>\n            )}\n            <ToolbarItem>\n              <div className=\"co-masthead__line\"></div>\n            </ToolbarItem>\n            {/* desktop -- (user dropdown [logout]) */}\n            <ToolbarItem className=\"hidden-xs\">{this._renderLanguageMenu(false)}</ToolbarItem>\n            <ToolbarItem>\n              <div className=\"co-masthead__line\"></div>\n            </ToolbarItem>{' '}\n            {/* desktop -- (notification drawer button) */\n            alertAccess && (\n              <ToolbarItem>\n                <NotificationBadge aria-label=\"Notification Drawer\" onClick={drawerToggle} isRead={notificationsRead}>\n                  <BellIcon />\n                </NotificationBadge>\n              </ToolbarItem>\n            )}\n            {/* <ToolbarItem>\n              <Tooltip content=\"Import YAML\" position={TooltipPosition.bottom}>\n                <Link to={this._getImportYAMLPath()} className=\"pf-c-button pf-m-plain\" aria-label=\"Import YAML\">\n                  <PlusCircleIcon className=\"co-masthead-icon\" />\n                </Link>\n              </Tooltip>\n            </ToolbarItem> */}\n            <CloudShellMastheadButton />\n            {/* TODO: 매뉴얼 완료 후 매뉴얼로 이동하는 링크 추가하기 */}\n            {/* <ToolbarItem className=\"co-masthead-icon__button\">\n              <QuestionCircleIcon />\n            </ToolbarItem> */}\n          </ToolbarGroup>\n          <ToolbarGroup>\n            {/* mobile -- (notification drawer button) */\n            // 기능 추가되면 완성하기\n            alertAccess && !notificationsRead && (\n              <ToolbarItem className=\"visible-xs-block\">\n                <NotificationBadge aria-label=\"Notification Drawer\" onClick={drawerToggle} isRead={notificationsRead}>\n                  <BellIcon />\n                </NotificationBadge>\n              </ToolbarItem>\n            )}\n            {/* mobile -- (system status button) */}\n            <SystemStatusButton statuspageData={statuspageData} className=\"visible-xs-block\" />\n            {/* mobile -- kebab dropdown [(application launcher |) import yaml | documentation, about (| logout)] */}\n            <ToolbarItem className=\"visible-xs-block\">{this._renderMenu(true)}</ToolbarItem>\n            <ToolbarItem className=\"hidden-xs\">{this._renderMenu(false)}</ToolbarItem>\n          </ToolbarGroup>\n        </Toolbar>\n        <AboutModal isOpen={showAboutModal} closeAboutModal={this._closeAboutModal} />\n      </>\n    );\n  }\n}\n\nconst mastheadToolbarStateToProps = state => ({\n  activeNamespace: state.UI.get('activeNamespace'),\n  clusterID: state.UI.get('clusterID'),\n  user: state.UI.get('user'),\n  consoleLinks: state.UI.get('consoleLinks'),\n  notificationsRead: !!state.UI.getIn(['notifications', 'isRead']),\n  canAccessNS: !!state[featureReducerName].get(FLAGS.CAN_GET_NS),\n});\n\nconst MastheadToolbarContents = connect(mastheadToolbarStateToProps, {\n  drawerToggle: UIActions.notificationDrawerToggleExpanded,\n})(connectToFlags(FLAGS.AUTH_ENABLED, FLAGS.CONSOLE_CLI_DOWNLOAD, FLAGS.OPENSHIFT)(withTranslation()(MastheadToolbarContents_)));\n\nexport const MastheadToolbar = connectToFlags(FLAGS.CLUSTER_VERSION)(({ flags, keycloak }) => {\n  const resources = flags[FLAGS.CLUSTER_VERSION]\n    ? [\n        {\n          kind: clusterVersionReference,\n          name: 'version',\n          isList: false,\n          prop: 'cv',\n        },\n      ]\n    : [];\n  return (\n    <Firehose resources={resources}>\n      <MastheadToolbarContents keycloak={keycloak} />\n    </Firehose>\n  );\n});\n"]}]}