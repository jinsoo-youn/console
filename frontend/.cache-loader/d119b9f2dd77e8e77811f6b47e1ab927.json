{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/behavior/useSelection.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/behavior/useSelection.tsx","mtime":1615298458710},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { action, computed } from 'mobx';\nimport { observer } from 'mobx-react';\nimport ElementContext from '../utils/ElementContext';\nexport const SELECTION_EVENT = 'selection';\nexport const useSelection = (multi = false, controlled = false) => {\n    const element = React.useContext(ElementContext);\n    const elementRef = React.useRef(element);\n    elementRef.current = element;\n    const selected = React.useMemo(() => computed(() => {\n        const { selectedIds } = element.getController().getState();\n        return !!selectedIds && selectedIds.includes(element.getId());\n    }), [element]);\n    const onSelect = React.useCallback(action((e) => {\n        e.stopPropagation();\n        const id = elementRef.current.getId();\n        const state = elementRef.current.getController().getState();\n        const idx = state.selectedIds ? state.selectedIds.indexOf(id) : -1;\n        let selectedIds;\n        let raise = false;\n        if (multi && (e.ctrlKey || e.metaKey)) {\n            if (!state.selectedIds) {\n                raise = true;\n                selectedIds = [id];\n            }\n            else {\n                selectedIds = [...state.selectedIds];\n                if (idx === -1) {\n                    raise = true;\n                    selectedIds.push(id);\n                }\n                else {\n                    selectedIds.splice(idx, 1);\n                }\n            }\n        }\n        else if (idx === -1 || multi) {\n            raise = true;\n            selectedIds = [id];\n        }\n        else {\n            selectedIds = [];\n        }\n        if (!controlled) {\n            state.selectedIds = selectedIds;\n        }\n        elementRef.current.getController().fireEvent(SELECTION_EVENT, selectedIds);\n        if (raise) {\n            elementRef.current.raise();\n        }\n    }), []);\n    return [selected.get(), onSelect];\n};\nexport const withSelection = (multi = false, controlled = false) => (WrappedComponent) => {\n    const Component = (props) => {\n        const [selected, onSelect] = useSelection(multi, controlled);\n        return React.createElement(WrappedComponent, Object.assign({}, props, { selected: selected, onSelect: onSelect }));\n    };\n    return observer(Component);\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/behavior/useSelection.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/behavior/useSelection.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,MAAM,EAAE,QAAQ,EAAE,MAAM,MAAM,CAAC;AACxC,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AAEtC,OAAO,cAAc,MAAM,yBAAyB,CAAC;AAErD,MAAM,CAAC,MAAM,eAAe,GAAG,WAAW,CAAC;AAU3C,MAAM,CAAC,MAAM,YAAY,GAAG,CAC1B,QAAiB,KAAK,EACtB,aAAsB,KAAK,EACN,EAAE;IACvB,MAAM,OAAO,GAAG,KAAK,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;IACjD,MAAM,UAAU,GAAG,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;IACzC,UAAU,CAAC,OAAO,GAAG,OAAO,CAAC;IAE7B,MAAM,QAAQ,GAAG,KAAK,CAAC,OAAO,CAC5B,GAAG,EAAE,CACH,QAAQ,CAAC,GAAG,EAAE;QACZ,MAAM,EAAE,WAAW,EAAE,GAAG,OAAO,CAAC,aAAa,EAAE,CAAC,QAAQ,EAAyB,CAAC;QAClF,OAAO,CAAC,CAAC,WAAW,IAAI,WAAW,CAAC,QAAQ,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;IAChE,CAAC,CAAC,EACJ,CAAC,OAAO,CAAC,CACV,CAAC;IAEF,MAAM,QAAQ,GAAG,KAAK,CAAC,WAAW,CAChC,MAAM,CAAC,CAAC,CAAmB,EAAQ,EAAE;QACnC,CAAC,CAAC,eAAe,EAAE,CAAC;QACpB,MAAM,EAAE,GAAG,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;QACtC,MAAM,KAAK,GAAG,UAAU,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,QAAQ,EAAyB,CAAC;QACnF,MAAM,GAAG,GAAG,KAAK,CAAC,WAAW,CAAC,CAAC,CAAC,KAAK,CAAC,WAAW,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACnE,IAAI,WAAqB,CAAC;QAC1B,IAAI,KAAK,GAAG,KAAK,CAAC;QAClB,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,OAAO,CAAC,EAAE;YACrC,IAAI,CAAC,KAAK,CAAC,WAAW,EAAE;gBACtB,KAAK,GAAG,IAAI,CAAC;gBACb,WAAW,GAAG,CAAC,EAAE,CAAC,CAAC;aACpB;iBAAM;gBACL,WAAW,GAAG,CAAC,GAAG,KAAK,CAAC,WAAW,CAAC,CAAC;gBACrC,IAAI,GAAG,KAAK,CAAC,CAAC,EAAE;oBACd,KAAK,GAAG,IAAI,CAAC;oBACb,WAAW,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;iBACtB;qBAAM;oBACL,WAAW,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;iBAC5B;aACF;SACF;aAAM,IAAI,GAAG,KAAK,CAAC,CAAC,IAAI,KAAK,EAAE;YAC9B,KAAK,GAAG,IAAI,CAAC;YACb,WAAW,GAAG,CAAC,EAAE,CAAC,CAAC;SACpB;aAAM;YACL,WAAW,GAAG,EAAE,CAAC;SAClB;QACD,IAAI,CAAC,UAAU,EAAE;YACf,KAAK,CAAC,WAAW,GAAG,WAAW,CAAC;SACjC;QACD,UAAU,CAAC,OAAO,CAAC,aAAa,EAAE,CAAC,SAAS,CAAC,eAAe,EAAE,WAAW,CAAC,CAAC;QAC3E,IAAI,KAAK,EAAE;YACT,UAAU,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC;SAC5B;IACH,CAAC,CAAC,EACF,EAAE,CACH,CAAC;IACF,OAAO,CAAC,QAAQ,CAAC,GAAG,EAAE,EAAE,QAAQ,CAAC,CAAC;AACpC,CAAC,CAAC;AAOF,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,QAAiB,KAAK,EAAE,aAAsB,KAAK,EAAE,EAAE,CAAC,CAGpF,gBAAwC,EACxC,EAAE;IACF,MAAM,SAAS,GAAgD,CAAC,KAAK,EAAE,EAAE;QACvE,MAAM,CAAC,QAAQ,EAAE,QAAQ,CAAC,GAAG,YAAY,CAAC,KAAK,EAAE,UAAU,CAAC,CAAC;QAC7D,OAAO,oBAAC,gBAAgB,oBAAM,KAAa,IAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,IAAI,CAAC;IAC1F,CAAC,CAAC;IACF,OAAO,QAAQ,CAAC,SAAS,CAAC,CAAC;AAC7B,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { action, computed } from 'mobx';\nimport { observer } from 'mobx-react';\nimport { EventListener } from '../types';\nimport ElementContext from '../utils/ElementContext';\n\nexport const SELECTION_EVENT = 'selection';\n\nexport type SelectionEventListener = EventListener<[string[]]>;\n\ntype SelectionHandlerState = {\n  selectedIds?: string[];\n};\n\nexport type OnSelect = (e: React.MouseEvent) => void;\n\nexport const useSelection = (\n  multi: boolean = false,\n  controlled: boolean = false,\n): [boolean, OnSelect] => {\n  const element = React.useContext(ElementContext);\n  const elementRef = React.useRef(element);\n  elementRef.current = element;\n\n  const selected = React.useMemo(\n    () =>\n      computed(() => {\n        const { selectedIds } = element.getController().getState<SelectionHandlerState>();\n        return !!selectedIds && selectedIds.includes(element.getId());\n      }),\n    [element],\n  );\n\n  const onSelect = React.useCallback(\n    action((e: React.MouseEvent): void => {\n      e.stopPropagation();\n      const id = elementRef.current.getId();\n      const state = elementRef.current.getController().getState<SelectionHandlerState>();\n      const idx = state.selectedIds ? state.selectedIds.indexOf(id) : -1;\n      let selectedIds: string[];\n      let raise = false;\n      if (multi && (e.ctrlKey || e.metaKey)) {\n        if (!state.selectedIds) {\n          raise = true;\n          selectedIds = [id];\n        } else {\n          selectedIds = [...state.selectedIds];\n          if (idx === -1) {\n            raise = true;\n            selectedIds.push(id);\n          } else {\n            selectedIds.splice(idx, 1);\n          }\n        }\n      } else if (idx === -1 || multi) {\n        raise = true;\n        selectedIds = [id];\n      } else {\n        selectedIds = [];\n      }\n      if (!controlled) {\n        state.selectedIds = selectedIds;\n      }\n      elementRef.current.getController().fireEvent(SELECTION_EVENT, selectedIds);\n      if (raise) {\n        elementRef.current.raise();\n      }\n    }),\n    [],\n  );\n  return [selected.get(), onSelect];\n};\n\nexport type WithSelectionProps = {\n  selected: boolean;\n  onSelect: OnSelect;\n};\n\nexport const withSelection = (multi: boolean = false, controlled: boolean = false) => <\n  P extends WithSelectionProps\n>(\n  WrappedComponent: React.ComponentType<P>,\n) => {\n  const Component: React.FC<Omit<P, keyof WithSelectionProps>> = (props) => {\n    const [selected, onSelect] = useSelection(multi, controlled);\n    return <WrappedComponent {...(props as any)} selected={selected} onSelect={onSelect} />;\n  };\n  return observer(Component);\n};\n"]}]}