{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/operand/utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/operand/utils.ts","mtime":1617154808370},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport * as Immutable from 'immutable';\nimport { SpecCapability } from '../descriptors/types';\nimport { modelFor } from '@console/internal/module/k8s';\nimport { capabilityFieldMap, capabilityWidgetMap } from '../descriptors/spec/spec-descriptor-input';\nimport { HIDDEN_UI_SCHEMA, REGEXP_K8S_RESOURCE_SUFFIX, REGEXP_SELECT_OPTION, REGEXP_FIELD_DEPENDENCY_PATH_VALUE, SORT_WEIGHT_SCALE_1, SORT_WEIGHT_SCALE_2, SORT_WEIGHT_SCALE_3 } from './const';\nimport { SchemaType } from '@console/shared/src/components/dynamic-form';\nimport { getSchemaType } from 'react-jsonschema-form/lib/utils';\nimport { getSchemaErrors } from '@console/shared/src/components/dynamic-form/utils';\nimport { isArray } from 'lodash';\n// Transform a path string from a descriptor to a JSON schema path array\nexport const descriptorPathToUISchemaPath = (path) => {\n    var _a;\n    return ((_a = _.toPath(path)) !== null && _a !== void 0 ? _a : []).map(subPath => {\n        return /^\\d+$/.test(subPath) ? 'items' : subPath;\n    });\n};\n// Determine if a given path is defined on a JSONSchema\nexport const jsonSchemaHas = (jsonSchema, schemaPath) => {\n    var _a, _b;\n    const [next, ...rest] = schemaPath;\n    const nextSchema = (_a = jsonSchema === null || jsonSchema === void 0 ? void 0 : jsonSchema[next]) !== null && _a !== void 0 ? _a : (_b = jsonSchema === null || jsonSchema === void 0 ? void 0 : jsonSchema.properties) === null || _b === void 0 ? void 0 : _b[next];\n    if (rest.length && !!nextSchema) {\n        return jsonSchemaHas(nextSchema, rest);\n    }\n    return !!nextSchema;\n};\n// Applies a hidden widget and label configuration to every property of the given schema.\n// This is useful for whitelisting only a few schema properties when all properties are not known.\nexport const hideAllExistingProperties = (schema) => {\n    return _.reduce(schema === null || schema === void 0 ? void 0 : schema.properties, (acc, _unused, propertyName) => (Object.assign(Object.assign({}, acc), { [propertyName]: HIDDEN_UI_SCHEMA })), {});\n};\n// Determine if a schema will produce an empty form field.\nexport const hasNoFields = (jsonSchema = {}) => {\n    var _a;\n    // If schema is empty or has unsupported properties, it will not render any fields on the form\n    if (getSchemaErrors(jsonSchema).length > 0) {\n        return true;\n    }\n    const type = (_a = getSchemaType(jsonSchema)) !== null && _a !== void 0 ? _a : '';\n    const handleArray = () => {\n        return hasNoFields(jsonSchema.items);\n    };\n    const handleObject = () => {\n        return _.every(jsonSchema === null || jsonSchema === void 0 ? void 0 : jsonSchema.properties, hasNoFields) && !(jsonSchema === null || jsonSchema === void 0 ? void 0 : jsonSchema.additionalProperties);\n        //  && hasNoFields(jsonSchema?.additionalProperties as JSONSchema6);\n    };\n    switch (type) {\n        case SchemaType.array:\n            return handleArray();\n        case SchemaType.object:\n            return handleObject();\n        // case '':\n        //   return true; // type이 없는 parameter에 경우 form editor 안그리는 로직 있던 거 제거\n        default:\n            return false;\n    }\n};\n// Map json schema to default ui schema\nexport const getDefaultUISchema = (jsonSchema, jsonSchemaName) => {\n    const type = getSchemaType(jsonSchema !== null && jsonSchema !== void 0 ? jsonSchema : {});\n    if (hasNoFields(jsonSchema)) {\n        return HIDDEN_UI_SCHEMA;\n    }\n    if (!!(jsonSchema === null || jsonSchema === void 0 ? void 0 : jsonSchema.additionalProperties)) {\n        if (jsonSchemaName.toLowerCase().indexOf('label') >= 0 || jsonSchemaName.toLowerCase().indexOf('annotation') >= 0 || jsonSchemaName.toLowerCase().indexOf('selector') >= 0) {\n            return {\n                'ui:field': 'LabelsField',\n            };\n        }\n        return {\n            'ui:field': 'AdditionalPropertyField',\n        };\n    }\n    else if ((jsonSchema === null || jsonSchema === void 0 ? void 0 : jsonSchema['x-kubernetes-int-or-string']) || (jsonSchema === null || jsonSchema === void 0 ? void 0 : jsonSchema['anyOf'])) {\n        if (isArray(jsonSchema.anyOf) &&\n            jsonSchema.anyOf.every(cur => {\n                if (isArray(cur === null || cur === void 0 ? void 0 : cur['type'])) {\n                    return cur['type'][0] === 'string' || cur['type'][0] === 'number' || cur['type'][0] === 'null' || cur['type'][0] === 'integer';\n                }\n                else if (cur === null || cur === void 0 ? void 0 : cur['type']) {\n                    return cur['type'] === 'string' || cur['type'] === 'number' || cur['type'] === 'null' || cur['type'] === 'integer';\n                }\n            })) {\n            jsonSchema === null || jsonSchema === void 0 ? true : delete jsonSchema.anyOf;\n            jsonSchema.type = 'string';\n        }\n        jsonSchema === null || jsonSchema === void 0 ? true : delete jsonSchema.anyOf;\n    }\n    else if (jsonSchema === null || jsonSchema === void 0 ? void 0 : jsonSchema['oneOf']) {\n        if (isArray(jsonSchema.oneOf) &&\n            jsonSchema.oneOf.every(cur => {\n                if (isArray(cur === null || cur === void 0 ? void 0 : cur['type'])) {\n                    return cur['type'][0] === 'string' || cur['type'][0] === 'number' || cur['type'][0] === 'null' || cur['type'][0] === 'integer';\n                }\n                else if (cur === null || cur === void 0 ? void 0 : cur['type']) {\n                    return cur['type'] === 'string' || cur['type'] === 'number' || cur['type'] === 'null' || cur['type'] === 'integer';\n                }\n            })) {\n            jsonSchema === null || jsonSchema === void 0 ? true : delete jsonSchema.oneOf;\n            jsonSchema.type = 'string';\n        }\n        jsonSchema === null || jsonSchema === void 0 ? true : delete jsonSchema.oneOf;\n    }\n    else if (jsonSchema === null || jsonSchema === void 0 ? void 0 : jsonSchema['allOf']) {\n        if (isArray(jsonSchema.allOf) &&\n            jsonSchema.allOf.every(cur => {\n                if (isArray(cur === null || cur === void 0 ? void 0 : cur['type'])) {\n                    return cur['type'][0] === 'string' || cur['type'][0] === 'number' || cur['type'][0] === 'null' || cur['type'][0] === 'integer';\n                }\n                else if (cur === null || cur === void 0 ? void 0 : cur['type']) {\n                    return cur['type'] === 'string' || cur['type'] === 'number' || cur['type'] === 'null' || cur['type'] === 'integer';\n                }\n            })) {\n            jsonSchema === null || jsonSchema === void 0 ? true : delete jsonSchema.allOf;\n            jsonSchema.type = 'string';\n        }\n        jsonSchema === null || jsonSchema === void 0 ? true : delete jsonSchema.allOf;\n    }\n    const handleArray = () => {\n        const itemsUISchema = getDefaultUISchema(jsonSchema.items, '');\n        return !_.isEmpty(itemsUISchema) ? { items: itemsUISchema } : {};\n    };\n    const handleObject = () => {\n        return _.reduce(jsonSchema.properties, (uiSchemaAccumulator, property, name) => {\n            const propertyUISchema = getDefaultUISchema(property, name);\n            return _.isEmpty(propertyUISchema)\n                ? uiSchemaAccumulator\n                : Object.assign(Object.assign({}, (uiSchemaAccumulator !== null && uiSchemaAccumulator !== void 0 ? uiSchemaAccumulator : {})), { [name]: propertyUISchema });\n        }, {});\n    };\n    switch (type) {\n        case SchemaType.array:\n            return handleArray();\n        case SchemaType.object:\n            return handleObject();\n        default:\n            return {};\n    }\n};\nconst k8sResourceCapabilityToUISchema = (capability) => {\n    var _a;\n    const [, groupVersionKind] = (_a = capability.match(REGEXP_K8S_RESOURCE_SUFFIX)) !== null && _a !== void 0 ? _a : [];\n    const model = groupVersionKind && modelFor(groupVersionKind);\n    if (model) {\n        return {\n            'ui:widget': 'K8sResourceWidget',\n            'ui:options': { model, groupVersionKind },\n        };\n    }\n    return {};\n};\nconst fieldDependencyCapabilityToUISchema = (capability) => {\n    var _a;\n    const [, path, value] = (_a = capability.match(REGEXP_FIELD_DEPENDENCY_PATH_VALUE)) !== null && _a !== void 0 ? _a : [];\n    if (!!path && !!value) {\n        return { 'ui:dependency': { path: descriptorPathToUISchemaPath(path), value } };\n    }\n    return {};\n};\nconst selectCapabilitiesToUISchema = (capabilities) => {\n    const items = capabilities.reduce((optionAccumulator, capability) => {\n        var _a;\n        const [, option] = (_a = capability.match(REGEXP_SELECT_OPTION)) !== null && _a !== void 0 ? _a : [];\n        return Object.assign(Object.assign({}, optionAccumulator), (option && { [option]: option }));\n    }, {});\n    if (!_.isEmpty(items)) {\n        return {\n            'ui:field': 'DropdownField',\n            'ui:items': items,\n        };\n    }\n    return {};\n};\n// Given an array of SpecCapabilities, return the appropriate corresponding UISchema\nexport const capabilitiesToUISchema = (capabilities = []) => {\n    if (!(capabilities === null || capabilities === void 0 ? void 0 : capabilities.length)) {\n        return {};\n    }\n    const k8sResourceCapability = _.find(capabilities, capability => capability.startsWith(SpecCapability.k8sResourcePrefix));\n    if (k8sResourceCapability) {\n        return k8sResourceCapabilityToUISchema(k8sResourceCapability);\n    }\n    const fieldDependencyCapability = _.find(capabilities, capability => capability.startsWith(SpecCapability.fieldDependency));\n    if (fieldDependencyCapability) {\n        return fieldDependencyCapabilityToUISchema(fieldDependencyCapability);\n    }\n    const hasSelectOptions = _.some(capabilities, capability => capability.startsWith(SpecCapability.select));\n    if (hasSelectOptions) {\n        return selectCapabilitiesToUISchema(capabilities);\n    }\n    const field = _.reduce(capabilities, (fieldAccumulator, capability) => {\n        return fieldAccumulator !== null && fieldAccumulator !== void 0 ? fieldAccumulator : capabilityFieldMap.get(capability);\n    }, undefined);\n    const widget = _.reduce(capabilities, (widgetAccumulator, capability) => {\n        return widgetAccumulator !== null && widgetAccumulator !== void 0 ? widgetAccumulator : capabilityWidgetMap.get(capability);\n    }, undefined);\n    return Object.assign(Object.assign({}, (field && { 'ui:field': field })), (widget && { 'ui:widget': widget }));\n};\n// Given a JSONSchema and associated uiSchema, create the appropriat ui schema order property for the jsonSchema.\n// Orders properties according to the following rules:\n//  - required properties with an associated ui schema come first,\n//  - required properties without an associated ui schema next,\n//  - optional fields with an associated ui schema next,\n//  - all other properties\nexport const getJSONSchemaOrder = (jsonSchema, uiSchema) => {\n    const type = getSchemaType(jsonSchema !== null && jsonSchema !== void 0 ? jsonSchema : {});\n    const handleArray = () => {\n        const descendantOrder = getJSONSchemaOrder(jsonSchema === null || jsonSchema === void 0 ? void 0 : jsonSchema.items, uiSchema === null || uiSchema === void 0 ? void 0 : uiSchema.items);\n        return !_.isEmpty(descendantOrder) ? { items: descendantOrder } : {};\n    };\n    const handleObject = () => {\n        var _a, _b;\n        const propertyNames = _.keys((_a = jsonSchema === null || jsonSchema === void 0 ? void 0 : jsonSchema.properties) !== null && _a !== void 0 ? _a : {});\n        if (_.isEmpty(propertyNames)) {\n            return {};\n        }\n        // Map control fields to an array so that  an index can be used to apply a modifier to sort weigths of dependent fields\n        const controlProperties = _.reduce(uiSchema, (controlPropertyAccumulator, { 'ui:dependency': dependency }) => {\n            var _a;\n            const control = _.last((_a = dependency === null || dependency === void 0 ? void 0 : dependency.path) !== null && _a !== void 0 ? _a : []);\n            return !control ? controlPropertyAccumulator : [...controlPropertyAccumulator, control];\n        }, []);\n        /**\n         * Give a property name a sort wieght based on whether it has a descriptor (uiSchema has property), is required, or is a control\n         * field for a property with a field dependency. A lower weight means higher sort order. Fields are weighted according to the following criteria:\n         *  - Required fields with descriptor - 0 to 999\n         *  - Required fields without descriptor 1000 to 1999\n         *  - Optional fields with descriptor 2000 to 2999\n         *  - Control fields that don't fit any above - 3000 to 3999\n         *  - All other fields - Infinity\n         *\n         * Within each of the above criteria, fields are further weighted based on field dependency:\n         *   - Fields without dependency - base weight\n         *   - Control field - base weight  + (nth control field) * 100\n         *   - Dependent field - corresponding control field weight + 10\n         *\n         * These weight numbers are arbitrary, but spaced far enough apart to leave room for multiple levels of sorting.\n         */\n        const getSortWeight = (property) => {\n            var _a, _b, _c, _d;\n            // This property's control field, if it exists\n            const control = _.last((_c = (_b = (_a = uiSchema === null || uiSchema === void 0 ? void 0 : uiSchema[property]) === null || _a === void 0 ? void 0 : _a['ui:dependency']) === null || _b === void 0 ? void 0 : _b.path) !== null && _c !== void 0 ? _c : []);\n            // A small offset that is added to the base weight so that control fields get sorted last within\n            // their appropriate group\n            const controlOffset = (controlProperties.indexOf(property) + 1) * SORT_WEIGHT_SCALE_2;\n            // If this property is a dependent, it's weight is based on it's control property\n            if (control) {\n                return getSortWeight(control) + controlOffset + SORT_WEIGHT_SCALE_1;\n            }\n            const isRequired = ((_d = jsonSchema === null || jsonSchema === void 0 ? void 0 : jsonSchema.required) !== null && _d !== void 0 ? _d : []).includes(property);\n            const hasDescriptor = uiSchema === null || uiSchema === void 0 ? void 0 : uiSchema[property];\n            // Required fields with a desriptor are sorted first (lowest weight).\n            if (isRequired && hasDescriptor) {\n                return SORT_WEIGHT_SCALE_3 + controlOffset;\n            }\n            // Fields that are required, but have no descriptors get sorted next\n            if (isRequired) {\n                return SORT_WEIGHT_SCALE_3 * 2 + controlOffset;\n            }\n            // Optional fields with descriptors get sorted next\n            if (hasDescriptor) {\n                return SORT_WEIGHT_SCALE_3 * 3 + controlOffset;\n            }\n            // Control fields that don't fit into any of the above criteria come next\n            if (controlOffset > 0) {\n                return SORT_WEIGHT_SCALE_3 * 4 + controlOffset;\n            }\n            // All other fields are sorted in the order in which they are encountered\n            // in the schema\n            return Infinity;\n        };\n        const uiOrder = Immutable.Set(propertyNames)\n            .sortBy(getSortWeight)\n            .toJS();\n        return Object.assign(Object.assign({}, (uiOrder.length > 1 && { 'ui:order': uiOrder })), _.reduce((_b = jsonSchema === null || jsonSchema === void 0 ? void 0 : jsonSchema.properties) !== null && _b !== void 0 ? _b : {}, (orderAccumulator, property, propertyName) => {\n            const descendantOrder = getJSONSchemaOrder(property, uiSchema === null || uiSchema === void 0 ? void 0 : uiSchema[propertyName]);\n            if (_.isEmpty(descendantOrder)) {\n                return orderAccumulator;\n            }\n            return Object.assign(Object.assign({}, orderAccumulator), { [propertyName]: descendantOrder });\n        }, {}));\n    };\n    switch (type) {\n        case SchemaType.array:\n            return handleArray();\n        case SchemaType.object:\n            return handleObject();\n        default:\n            return {};\n    }\n};\n// Map a set of spec descriptors to a ui schema\nexport const descriptorsToUISchema = (descriptors, jsonSchema) => {\n    const uiSchemaFromDescriptors = _.reduce(descriptors, (uiSchemaAccumulator, { path, description, displayName, 'x-descriptors': capabilities = [] }) => {\n        const uiSchemaPath = descriptorPathToUISchemaPath(path);\n        if (!jsonSchemaHas(jsonSchema, uiSchemaPath)) {\n            // eslint-disable-next-line no-console\n            console.warn('SpecDescriptor path references a non-existent schema property:', path);\n            return uiSchemaAccumulator;\n        }\n        const isAdvanced = _.includes(capabilities, SpecCapability.advanced);\n        const capabilitiesUISchema = capabilitiesToUISchema(_.without(capabilities, SpecCapability.advanced));\n        return uiSchemaAccumulator.withMutations(mutable => {\n            var _a;\n            if (isAdvanced) {\n                const advancedPropertyName = _.last(uiSchemaPath);\n                const pathToAdvanced = [...uiSchemaPath.slice(0, uiSchemaPath.length - 1), 'ui:advanced'];\n                const currentAdvanced = (_a = mutable.getIn(pathToAdvanced)) !== null && _a !== void 0 ? _a : Immutable.List();\n                mutable.setIn(pathToAdvanced, currentAdvanced.push(advancedPropertyName));\n            }\n            mutable.setIn(uiSchemaPath, Immutable.Map(Object.assign(Object.assign(Object.assign({}, (description && { 'ui:description': description })), (displayName && { 'ui:title': displayName })), capabilitiesUISchema)));\n        });\n    }, Immutable.Map()).toJS();\n    // return _.merge(uiSchemaFromDescriptors, getJSONSchemaOrder(jsonSchema, uiSchemaFromDescriptors)); // schema 우선순위 정렬 로직\n    return _.merge(jsonSchema, uiSchemaFromDescriptors);\n};\n// Use jsonSchema, descriptors, and some defaults to generate a uiSchema\nexport const getUISchema = (jsonSchema, providedAPI) => {\n    var _a, _b;\n    return _.defaultsDeep({\n        metadata: Object.assign(Object.assign({}, hideAllExistingProperties((_a = jsonSchema === null || jsonSchema === void 0 ? void 0 : jsonSchema.properties) === null || _a === void 0 ? void 0 : _a.metadata)), { name: {\n                'ui:title': 'Name',\n                'ui:widget': 'TextWidget',\n            }, labels: {\n                'ui:title': 'Labels',\n                'ui:field': 'LabelsField',\n            }, 'ui:options': {\n                label: false,\n            }, 'ui:order': ['name', 'labels', '*'] }),\n        spec: Object.assign(Object.assign({}, descriptorsToUISchema(providedAPI === null || providedAPI === void 0 ? void 0 : providedAPI.specDescriptors, (_b = jsonSchema === null || jsonSchema === void 0 ? void 0 : jsonSchema.properties) === null || _b === void 0 ? void 0 : _b.spec)), { 'ui:options': {\n                label: false,\n            } }),\n        'ui:order': ['metadata', 'spec', '*'],\n    }, getDefaultUISchema(jsonSchema, ''));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/operand/utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/operand/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport * as Immutable from 'immutable';\nimport { JSONSchema6 } from 'json-schema';\nimport { SpecCapability, Descriptor } from '../descriptors/types';\nimport { modelFor } from '@console/internal/module/k8s';\nimport { capabilityFieldMap, capabilityWidgetMap } from '../descriptors/spec/spec-descriptor-input';\nimport { HIDDEN_UI_SCHEMA, REGEXP_K8S_RESOURCE_SUFFIX, REGEXP_SELECT_OPTION, REGEXP_FIELD_DEPENDENCY_PATH_VALUE, SORT_WEIGHT_SCALE_1, SORT_WEIGHT_SCALE_2, SORT_WEIGHT_SCALE_3 } from './const';\nimport { UiSchema } from 'react-jsonschema-form';\nimport { SchemaType } from '@console/shared/src/components/dynamic-form';\nimport { getSchemaType } from 'react-jsonschema-form/lib/utils';\nimport { getSchemaErrors } from '@console/shared/src/components/dynamic-form/utils';\nimport { isArray } from 'lodash';\n\n// Transform a path string from a descriptor to a JSON schema path array\nexport const descriptorPathToUISchemaPath = (path: string): string[] =>\n  (_.toPath(path) ?? []).map(subPath => {\n    return /^\\d+$/.test(subPath) ? 'items' : subPath;\n  });\n\n// Determine if a given path is defined on a JSONSchema\nexport const jsonSchemaHas = (jsonSchema: JSONSchema6, schemaPath: string[]): boolean => {\n  const [next, ...rest] = schemaPath;\n  const nextSchema = jsonSchema?.[next] ?? jsonSchema?.properties?.[next];\n  if (rest.length && !!nextSchema) {\n    return jsonSchemaHas(nextSchema, rest);\n  }\n  return !!nextSchema;\n};\n\n// Applies a hidden widget and label configuration to every property of the given schema.\n// This is useful for whitelisting only a few schema properties when all properties are not known.\nexport const hideAllExistingProperties = (schema: JSONSchema6) => {\n  return _.reduce(\n    schema?.properties,\n    (acc, _unused, propertyName) => ({\n      ...acc,\n      [propertyName]: HIDDEN_UI_SCHEMA,\n    }),\n    {},\n  );\n};\n\n// Determine if a schema will produce an empty form field.\nexport const hasNoFields = (jsonSchema: JSONSchema6 = {}): boolean => {\n  // If schema is empty or has unsupported properties, it will not render any fields on the form\n  if (getSchemaErrors(jsonSchema).length > 0) {\n    return true;\n  }\n\n  const type = getSchemaType(jsonSchema) ?? '';\n  const handleArray = () => {\n    return hasNoFields(jsonSchema.items as JSONSchema6);\n  };\n  const handleObject = () => {\n    return _.every(jsonSchema?.properties, hasNoFields) && !jsonSchema?.additionalProperties;\n    //  && hasNoFields(jsonSchema?.additionalProperties as JSONSchema6);\n  };\n\n  switch (type) {\n    case SchemaType.array:\n      return handleArray();\n    case SchemaType.object:\n      return handleObject();\n    // case '':\n    //   return true; // type이 없는 parameter에 경우 form editor 안그리는 로직 있던 거 제거\n    default:\n      return false;\n  }\n};\n\n// Map json schema to default ui schema\nexport const getDefaultUISchema = (jsonSchema: JSONSchema6, jsonSchemaName: string): UiSchema => {\n  const type = getSchemaType(jsonSchema ?? {});\n  if (hasNoFields(jsonSchema)) {\n    return HIDDEN_UI_SCHEMA;\n  }\n  if (!!jsonSchema?.additionalProperties) {\n    if (jsonSchemaName.toLowerCase().indexOf('label') >= 0 || jsonSchemaName.toLowerCase().indexOf('annotation') >= 0 || jsonSchemaName.toLowerCase().indexOf('selector') >= 0) {\n      return {\n        'ui:field': 'LabelsField',\n      };\n    }\n    return {\n      'ui:field': 'AdditionalPropertyField',\n    };\n  } else if (jsonSchema?.['x-kubernetes-int-or-string'] || jsonSchema?.['anyOf']) {\n    if (\n      isArray(jsonSchema.anyOf) &&\n      jsonSchema.anyOf.every(cur => {\n        if (isArray(cur?.['type'])) {\n          return cur['type'][0] === 'string' || cur['type'][0] === 'number' || cur['type'][0] === 'null' || cur['type'][0] === 'integer';\n        } else if (cur?.['type']) {\n          return cur['type'] === 'string' || cur['type'] === 'number' || cur['type'] === 'null' || cur['type'] === 'integer';\n        }\n      })\n    ) {\n      delete jsonSchema?.anyOf;\n      jsonSchema.type = 'string';\n    }\n    delete jsonSchema?.anyOf;\n  } else if (jsonSchema?.['oneOf']) {\n    if (\n      isArray(jsonSchema.oneOf) &&\n      jsonSchema.oneOf.every(cur => {\n        if (isArray(cur?.['type'])) {\n          return cur['type'][0] === 'string' || cur['type'][0] === 'number' || cur['type'][0] === 'null' || cur['type'][0] === 'integer';\n        } else if (cur?.['type']) {\n          return cur['type'] === 'string' || cur['type'] === 'number' || cur['type'] === 'null' || cur['type'] === 'integer';\n        }\n      })\n    ) {\n      delete jsonSchema?.oneOf;\n      jsonSchema.type = 'string';\n    }\n    delete jsonSchema?.oneOf;\n  } else if (jsonSchema?.['allOf']) {\n    if (\n      isArray(jsonSchema.allOf) &&\n      jsonSchema.allOf.every(cur => {\n        if (isArray(cur?.['type'])) {\n          return cur['type'][0] === 'string' || cur['type'][0] === 'number' || cur['type'][0] === 'null' || cur['type'][0] === 'integer';\n        } else if (cur?.['type']) {\n          return cur['type'] === 'string' || cur['type'] === 'number' || cur['type'] === 'null' || cur['type'] === 'integer';\n        }\n      })\n    ) {\n      delete jsonSchema?.allOf;\n      jsonSchema.type = 'string';\n    }\n    delete jsonSchema?.allOf;\n  }\n\n  const handleArray = () => {\n    const itemsUISchema = getDefaultUISchema(jsonSchema.items as JSONSchema6, '');\n    return !_.isEmpty(itemsUISchema) ? { items: itemsUISchema } : {};\n  };\n\n  const handleObject = () => {\n    return _.reduce(\n      jsonSchema.properties,\n      (uiSchemaAccumulator: UiSchema, property: JSONSchema6, name: string) => {\n        const propertyUISchema = getDefaultUISchema(property, name);\n        return _.isEmpty(propertyUISchema)\n          ? uiSchemaAccumulator\n          : {\n              ...(uiSchemaAccumulator ?? {}),\n              [name]: propertyUISchema,\n            };\n      },\n      {},\n    );\n  };\n  switch (type) {\n    case SchemaType.array:\n      return handleArray();\n    case SchemaType.object:\n      return handleObject();\n    default:\n      return {};\n  }\n};\n\nconst k8sResourceCapabilityToUISchema = (capability: SpecCapability): UiSchema => {\n  const [, groupVersionKind] = capability.match(REGEXP_K8S_RESOURCE_SUFFIX) ?? [];\n  const model = groupVersionKind && modelFor(groupVersionKind);\n  if (model) {\n    return {\n      'ui:widget': 'K8sResourceWidget',\n      'ui:options': { model, groupVersionKind },\n    };\n  }\n  return {};\n};\n\nconst fieldDependencyCapabilityToUISchema = (capability: SpecCapability): UiSchema => {\n  const [, path, value] = capability.match(REGEXP_FIELD_DEPENDENCY_PATH_VALUE) ?? [];\n  if (!!path && !!value) {\n    return { 'ui:dependency': { path: descriptorPathToUISchemaPath(path), value } };\n  }\n  return {};\n};\n\nconst selectCapabilitiesToUISchema = (capabilities: SpecCapability[]): UiSchema => {\n  const items = capabilities.reduce((optionAccumulator, capability) => {\n    const [, option] = capability.match(REGEXP_SELECT_OPTION) ?? [];\n    return {\n      ...optionAccumulator,\n      ...(option && { [option]: option }),\n    };\n  }, {});\n\n  if (!_.isEmpty(items)) {\n    return {\n      'ui:field': 'DropdownField',\n      'ui:items': items,\n    };\n  }\n\n  return {};\n};\n\n// Given an array of SpecCapabilities, return the appropriate corresponding UISchema\nexport const capabilitiesToUISchema = (capabilities: SpecCapability[] = []) => {\n  if (!capabilities?.length) {\n    return {};\n  }\n\n  const k8sResourceCapability = _.find(capabilities, capability => capability.startsWith(SpecCapability.k8sResourcePrefix));\n  if (k8sResourceCapability) {\n    return k8sResourceCapabilityToUISchema(k8sResourceCapability);\n  }\n\n  const fieldDependencyCapability = _.find(capabilities, capability => capability.startsWith(SpecCapability.fieldDependency));\n  if (fieldDependencyCapability) {\n    return fieldDependencyCapabilityToUISchema(fieldDependencyCapability);\n  }\n\n  const hasSelectOptions = _.some(capabilities, capability => capability.startsWith(SpecCapability.select));\n  if (hasSelectOptions) {\n    return selectCapabilitiesToUISchema(capabilities);\n  }\n\n  const field = _.reduce(\n    capabilities,\n    (fieldAccumulator, capability) => {\n      return fieldAccumulator ?? capabilityFieldMap.get(capability);\n    },\n    undefined,\n  );\n\n  const widget = _.reduce(\n    capabilities,\n    (widgetAccumulator, capability) => {\n      return widgetAccumulator ?? capabilityWidgetMap.get(capability);\n    },\n    undefined,\n  );\n\n  return {\n    ...(field && { 'ui:field': field }),\n    ...(widget && { 'ui:widget': widget }),\n  };\n};\n\n// Given a JSONSchema and associated uiSchema, create the appropriat ui schema order property for the jsonSchema.\n// Orders properties according to the following rules:\n//  - required properties with an associated ui schema come first,\n//  - required properties without an associated ui schema next,\n//  - optional fields with an associated ui schema next,\n//  - all other properties\nexport const getJSONSchemaOrder = (jsonSchema, uiSchema) => {\n  const type = getSchemaType(jsonSchema ?? {});\n  const handleArray = () => {\n    const descendantOrder = getJSONSchemaOrder(jsonSchema?.items as JSONSchema6, uiSchema?.items);\n    return !_.isEmpty(descendantOrder) ? { items: descendantOrder } : {};\n  };\n\n  const handleObject = () => {\n    const propertyNames = _.keys(jsonSchema?.properties ?? {});\n    if (_.isEmpty(propertyNames)) {\n      return {};\n    }\n\n    // Map control fields to an array so that  an index can be used to apply a modifier to sort weigths of dependent fields\n    const controlProperties = _.reduce(\n      uiSchema,\n      (controlPropertyAccumulator, { 'ui:dependency': dependency }) => {\n        const control = _.last(dependency?.path ?? []);\n        return !control ? controlPropertyAccumulator : [...controlPropertyAccumulator, control];\n      },\n      [],\n    );\n\n    /**\n     * Give a property name a sort wieght based on whether it has a descriptor (uiSchema has property), is required, or is a control\n     * field for a property with a field dependency. A lower weight means higher sort order. Fields are weighted according to the following criteria:\n     *  - Required fields with descriptor - 0 to 999\n     *  - Required fields without descriptor 1000 to 1999\n     *  - Optional fields with descriptor 2000 to 2999\n     *  - Control fields that don't fit any above - 3000 to 3999\n     *  - All other fields - Infinity\n     *\n     * Within each of the above criteria, fields are further weighted based on field dependency:\n     *   - Fields without dependency - base weight\n     *   - Control field - base weight  + (nth control field) * 100\n     *   - Dependent field - corresponding control field weight + 10\n     *\n     * These weight numbers are arbitrary, but spaced far enough apart to leave room for multiple levels of sorting.\n     */\n    const getSortWeight = (property: string): number => {\n      // This property's control field, if it exists\n      const control = _.last<string>(uiSchema?.[property]?.['ui:dependency']?.path ?? []);\n\n      // A small offset that is added to the base weight so that control fields get sorted last within\n      // their appropriate group\n      const controlOffset = (controlProperties.indexOf(property) + 1) * SORT_WEIGHT_SCALE_2;\n\n      // If this property is a dependent, it's weight is based on it's control property\n      if (control) {\n        return getSortWeight(control) + controlOffset + SORT_WEIGHT_SCALE_1;\n      }\n\n      const isRequired = (jsonSchema?.required ?? []).includes(property);\n      const hasDescriptor = uiSchema?.[property];\n\n      // Required fields with a desriptor are sorted first (lowest weight).\n      if (isRequired && hasDescriptor) {\n        return SORT_WEIGHT_SCALE_3 + controlOffset;\n      }\n\n      // Fields that are required, but have no descriptors get sorted next\n      if (isRequired) {\n        return SORT_WEIGHT_SCALE_3 * 2 + controlOffset;\n      }\n\n      // Optional fields with descriptors get sorted next\n      if (hasDescriptor) {\n        return SORT_WEIGHT_SCALE_3 * 3 + controlOffset;\n      }\n\n      // Control fields that don't fit into any of the above criteria come next\n      if (controlOffset > 0) {\n        return SORT_WEIGHT_SCALE_3 * 4 + controlOffset;\n      }\n\n      // All other fields are sorted in the order in which they are encountered\n      // in the schema\n      return Infinity;\n    };\n\n    const uiOrder = Immutable.Set(propertyNames)\n      .sortBy(getSortWeight)\n      .toJS();\n\n    return {\n      ...(uiOrder.length > 1 && { 'ui:order': uiOrder }),\n      ..._.reduce(\n        jsonSchema?.properties ?? {},\n        (orderAccumulator, property, propertyName) => {\n          const descendantOrder = getJSONSchemaOrder(property, uiSchema?.[propertyName]);\n          if (_.isEmpty(descendantOrder)) {\n            return orderAccumulator;\n          }\n          return {\n            ...orderAccumulator,\n            [propertyName]: descendantOrder,\n          };\n        },\n        {},\n      ),\n    };\n  };\n\n  switch (type) {\n    case SchemaType.array:\n      return handleArray();\n    case SchemaType.object:\n      return handleObject();\n    default:\n      return {};\n  }\n};\n\n// Map a set of spec descriptors to a ui schema\nexport const descriptorsToUISchema = (descriptors: Descriptor<SpecCapability>[], jsonSchema: JSONSchema6) => {\n  const uiSchemaFromDescriptors = _.reduce(\n    descriptors,\n    (uiSchemaAccumulator, { path, description, displayName, 'x-descriptors': capabilities = [] }) => {\n      const uiSchemaPath = descriptorPathToUISchemaPath(path);\n      if (!jsonSchemaHas(jsonSchema, uiSchemaPath)) {\n        // eslint-disable-next-line no-console\n        console.warn('SpecDescriptor path references a non-existent schema property:', path);\n        return uiSchemaAccumulator;\n      }\n      const isAdvanced = _.includes(capabilities, SpecCapability.advanced);\n      const capabilitiesUISchema = capabilitiesToUISchema(_.without(capabilities, SpecCapability.advanced));\n      return uiSchemaAccumulator.withMutations(mutable => {\n        if (isAdvanced) {\n          const advancedPropertyName = _.last(uiSchemaPath);\n          const pathToAdvanced = [...uiSchemaPath.slice(0, uiSchemaPath.length - 1), 'ui:advanced'];\n          const currentAdvanced = mutable.getIn(pathToAdvanced) ?? Immutable.List();\n          mutable.setIn(pathToAdvanced, currentAdvanced.push(advancedPropertyName));\n        }\n\n        mutable.setIn(\n          uiSchemaPath,\n          Immutable.Map({\n            ...(description && { 'ui:description': description }),\n            ...(displayName && { 'ui:title': displayName }),\n            ...capabilitiesUISchema,\n          }),\n        );\n      });\n    },\n    Immutable.Map(),\n  ).toJS();\n  // return _.merge(uiSchemaFromDescriptors, getJSONSchemaOrder(jsonSchema, uiSchemaFromDescriptors)); // schema 우선순위 정렬 로직\n  return _.merge(jsonSchema, uiSchemaFromDescriptors);\n};\n\n// Use jsonSchema, descriptors, and some defaults to generate a uiSchema\nexport const getUISchema = (jsonSchema, providedAPI) => {\n  return _.defaultsDeep(\n    {\n      metadata: {\n        ...hideAllExistingProperties(jsonSchema?.properties?.metadata as JSONSchema6),\n        name: {\n          'ui:title': 'Name',\n          'ui:widget': 'TextWidget',\n        },\n        labels: {\n          'ui:title': 'Labels',\n          'ui:field': 'LabelsField',\n        },\n        'ui:options': {\n          label: false,\n        },\n        'ui:order': ['name', 'labels', '*'],\n      },\n      spec: {\n        ...descriptorsToUISchema(providedAPI?.specDescriptors, jsonSchema?.properties?.spec),\n        'ui:options': {\n          label: false,\n        },\n      },\n      'ui:order': ['metadata', 'spec', '*'],\n    },\n    getDefaultUISchema(jsonSchema, ''),\n  );\n};\n"]}]}