{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/formik-fields/ToggleableFieldBase.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/formik-fields/ToggleableFieldBase.tsx","mtime":1616735742370},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport { useField } from 'formik';\nimport { FormGroup } from '@patternfly/react-core';\nimport { getFieldId } from './field-utils';\nconst ToggleableFieldBase = (_a) => {\n    var { label, formLabel, helpText, required, children, value, name } = _a, props = __rest(_a, [\"label\", \"formLabel\", \"helpText\", \"required\", \"children\", \"value\", \"name\"]);\n    const [field, { touched, error }] = useField({ value, name, type: 'checkbox' });\n    const fieldId = getFieldId(name, 'checkbox');\n    const isValid = !(touched && error);\n    const errorMessage = !isValid ? error : '';\n    return (React.createElement(FormGroup, { fieldId: fieldId, label: formLabel, helperText: helpText, helperTextInvalid: errorMessage, isValid: isValid, isRequired: required }, children(Object.assign(Object.assign(Object.assign({}, field), props), { value: field.value, id: fieldId, label, isChecked: field.checked, isValid, 'aria-describedby': `${fieldId}-helper`, onChange: (val, event) => field.onChange(event) }))));\n};\nexport default ToggleableFieldBase;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/formik-fields/ToggleableFieldBase.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/formik-fields/ToggleableFieldBase.tsx"],"names":[],"mappings":";;;;;;;;;;;AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAClC,OAAO,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AAEnD,OAAO,EAAE,UAAU,EAAE,MAAM,eAAe,CAAC;AAM3C,MAAM,mBAAmB,GAAuC,CAAC,EAShE,EAAE,EAAE;QAT4D,EAC/D,KAAK,EACL,SAAS,EACT,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,KAAK,EACL,IAAI,OAEL,EADC,+FAAQ;IAER,MAAM,CAAC,KAAK,EAAE,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC,GAAG,QAAQ,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,UAAU,EAAE,CAAC,CAAC;IAChF,MAAM,OAAO,GAAG,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC;IAC7C,MAAM,OAAO,GAAG,CAAC,CAAC,OAAO,IAAI,KAAK,CAAC,CAAC;IACpC,MAAM,YAAY,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC;IAC3C,OAAO,CACL,oBAAC,SAAS,IACR,OAAO,EAAE,OAAO,EAChB,KAAK,EAAE,SAAS,EAChB,UAAU,EAAE,QAAQ,EACpB,iBAAiB,EAAE,YAAY,EAC/B,OAAO,EAAE,OAAO,EAChB,UAAU,EAAE,QAAQ,IAEnB,QAAQ,+CACJ,KAAK,GACL,KAAK,KACR,KAAK,EAAE,KAAK,CAAC,KAAK,EAClB,EAAE,EAAE,OAAO,EACX,KAAK,EACL,SAAS,EAAE,KAAK,CAAC,OAAO,EACxB,OAAO,EACP,kBAAkB,EAAE,GAAG,OAAO,SAAS,EACvC,QAAQ,EAAE,CAAC,GAAG,EAAE,KAAK,EAAE,EAAE,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,IAC/C,CACQ,CACb,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,mBAAmB,CAAC","sourcesContent":["import * as React from 'react';\nimport { useField } from 'formik';\nimport { FormGroup } from '@patternfly/react-core';\nimport { CheckboxFieldProps } from './field-types';\nimport { getFieldId } from './field-utils';\n\ntype ToggleableFieldBaseProps = CheckboxFieldProps & {\n  children: (props) => React.ReactNode;\n};\n\nconst ToggleableFieldBase: React.FC<ToggleableFieldBaseProps> = ({\n  label,\n  formLabel,\n  helpText,\n  required,\n  children,\n  value,\n  name,\n  ...props\n}) => {\n  const [field, { touched, error }] = useField({ value, name, type: 'checkbox' });\n  const fieldId = getFieldId(name, 'checkbox');\n  const isValid = !(touched && error);\n  const errorMessage = !isValid ? error : '';\n  return (\n    <FormGroup\n      fieldId={fieldId}\n      label={formLabel}\n      helperText={helpText}\n      helperTextInvalid={errorMessage}\n      isValid={isValid}\n      isRequired={required}\n    >\n      {children({\n        ...field,\n        ...props,\n        value: field.value,\n        id: fieldId,\n        label,\n        isChecked: field.checked,\n        isValid,\n        'aria-describedby': `${fieldId}-helper`,\n        onChange: (val, event) => field.onChange(event),\n      })}\n    </FormGroup>\n  );\n};\n\nexport default ToggleableFieldBase;\n"]}]}