{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/routes.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/routes.tsx","mtime":1615298458740},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { Button, Popover } from '@patternfly/react-core';\nimport { sortable } from '@patternfly/react-table';\nimport { EyeIcon, EyeSlashIcon, QuestionCircleIcon } from '@patternfly/react-icons';\nimport { Status } from '@console/shared';\nimport { DetailsPage, ListPage, Table, TableRow, TableData } from './factory';\nimport { CopyToClipboard, DetailsItem, ExternalLink, Kebab, ResourceKebab, ResourceLink, ResourceSummary, SectionHeading, detailsPage, navFactory, } from './utils';\nimport { MaskedData } from './configmap-and-secret-data';\nimport { RouteModel } from '../models';\nimport { Conditions } from './conditions';\nimport { RouteCharts } from './routes/route-charts';\nconst RoutesReference = 'Route';\nconst menuActions = [...Kebab.getExtensionsActionsForKind(RouteModel), ...Kebab.factory.common];\nconst getRouteHost = (route, onlyAdmitted) => {\n    let oldestAdmittedIngress;\n    let oldestTransitionTime;\n    _.each(route.status.ingress, (ingress) => {\n        const admittedCondition = _.find(ingress.conditions, { type: 'Admitted', status: 'True' });\n        if (admittedCondition &&\n            (!oldestTransitionTime || oldestTransitionTime > admittedCondition.lastTransitionTime)) {\n            oldestAdmittedIngress = ingress;\n            oldestTransitionTime = admittedCondition.lastTransitionTime;\n        }\n    });\n    if (oldestAdmittedIngress) {\n        return oldestAdmittedIngress.host;\n    }\n    return onlyAdmitted ? null : route.spec.host;\n};\nconst isWebRoute = (route) => {\n    return !!getRouteHost(route, true) && _.get(route, 'spec.wildcardPolicy') !== 'Subdomain';\n};\nexport const getRouteWebURL = (route) => {\n    const scheme = _.get(route, 'spec.tls.termination') ? 'https' : 'http';\n    let url = `${scheme}://${getRouteHost(route, false)}`;\n    if (route.spec.path) {\n        url += route.spec.path;\n    }\n    return url;\n};\nconst getSubdomain = (route) => {\n    const hostname = _.get(route, 'spec.host', '');\n    return hostname.replace(/^[a-z0-9]([-a-z0-9]*[a-z0-9])\\./, '');\n};\nconst getRouteLabel = (route) => {\n    if (isWebRoute(route)) {\n        return getRouteWebURL(route);\n    }\n    let label = getRouteHost(route, false);\n    if (!label) {\n        return '<unknown host>';\n    }\n    if (_.get(route, 'spec.wildcardPolicy') === 'Subdomain') {\n        label = `*.${getSubdomain(route)}`;\n    }\n    if (route.spec.path) {\n        label += route.spec.path;\n    }\n    return label;\n};\nexport const RouteLocation = ({ obj }) => (React.createElement(\"div\", null, isWebRoute(obj) ? (React.createElement(ExternalLink, { href: getRouteWebURL(obj), additionalClassName: \"co-external-link--block\", text: getRouteLabel(obj) })) : (getRouteLabel(obj))));\nRouteLocation.displayName = 'RouteLocation';\nexport const routeStatus = (route) => {\n    let atLeastOneAdmitted = false;\n    if (!route.status || !route.status.ingress) {\n        return 'Pending';\n    }\n    _.each(route.status.ingress, (ingress) => {\n        const isAdmitted = _.some(ingress.conditions, { type: 'Admitted', status: 'True' });\n        if (isAdmitted) {\n            atLeastOneAdmitted = true;\n        }\n    });\n    return atLeastOneAdmitted ? 'Accepted' : 'Rejected';\n};\nexport const RouteStatus = ({ obj: route }) => {\n    const status = routeStatus(route);\n    return React.createElement(Status, { status: status });\n};\nRouteStatus.displayName = 'RouteStatus';\nconst tableColumnClasses = [\n    '',\n    '',\n    classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'),\n    classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n    classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n    Kebab.columnClass,\n];\nconst kind = 'Route';\nconst RouteTableHeader = () => {\n    return [\n        {\n            title: 'Name',\n            sortField: 'metadata.name',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[0] },\n        },\n        {\n            title: 'Namespace',\n            sortField: 'metadata.namespace',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[1] },\n        },\n        {\n            title: 'Status',\n            props: { className: tableColumnClasses[2] },\n        },\n        {\n            title: 'Location',\n            sortField: 'spec.host',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[3] },\n        },\n        {\n            title: 'Service',\n            sortField: 'spec.to.name',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[4] },\n        },\n        {\n            title: '',\n            props: { className: tableColumnClasses[5] },\n        },\n    ];\n};\nRouteTableHeader.displayName = 'RouteTableHeader';\nconst RouteTableRow = ({ obj: route, index, key, style }) => {\n    return (React.createElement(TableRow, { id: route.metadata.uid, index: index, trKey: key, style: style },\n        React.createElement(TableData, { className: tableColumnClasses[0] },\n            React.createElement(ResourceLink, { kind: kind, name: route.metadata.name, namespace: route.metadata.namespace, title: route.metadata.uid })),\n        React.createElement(TableData, { className: classNames(tableColumnClasses[1], 'co-break-word') },\n            React.createElement(ResourceLink, { kind: \"Namespace\", name: route.metadata.namespace, title: route.metadata.namespace })),\n        React.createElement(TableData, { className: tableColumnClasses[2] },\n            React.createElement(RouteStatus, { obj: route })),\n        React.createElement(TableData, { className: classNames(tableColumnClasses[3], 'co-break-word') },\n            React.createElement(RouteLocation, { obj: route })),\n        React.createElement(TableData, { className: tableColumnClasses[4] },\n            React.createElement(ResourceLink, { kind: \"Service\", name: route.spec.to.name, namespace: route.metadata.namespace, title: route.spec.to.name })),\n        React.createElement(TableData, { className: tableColumnClasses[5] },\n            React.createElement(ResourceKebab, { actions: menuActions, kind: kind, resource: route }))));\n};\nconst TLSSettings = ({ route }) => {\n    const [showKey, setShowKey] = React.useState(false);\n    const { tls } = route.spec;\n    if (!tls) {\n        return React.createElement(React.Fragment, null, \"TLS is not enabled.\");\n    }\n    const visibleKeyValue = showKey ? tls.key : React.createElement(MaskedData, null);\n    return (React.createElement(\"dl\", null,\n        React.createElement(DetailsItem, { label: \"Termination Type\", obj: route, path: \"spec.tls.termination\" }),\n        React.createElement(DetailsItem, { label: \"Insecure Traffic\", obj: route, path: \"spec.tls.insecureEdgeTerminationPolicy\" }),\n        React.createElement(DetailsItem, { label: \"Certificate\", obj: route, path: \"spec.tls.certificate\" }, tls.certificate ? React.createElement(CopyToClipboard, { value: tls.certificate }) : '-'),\n        React.createElement(\"dt\", { className: \"co-m-route-tls-reveal__title\" },\n            \"Key\",\n            ' ',\n            tls.key && (React.createElement(Button, { className: \"pf-m-link--align-left\", type: \"button\", onClick: () => setShowKey(!showKey), variant: \"link\" }, showKey ? (React.createElement(React.Fragment, null,\n                React.createElement(EyeSlashIcon, { className: \"co-icon-space-r\" }),\n                \"Hide\")) : (React.createElement(React.Fragment, null,\n                React.createElement(EyeIcon, { className: \"co-icon-space-r\" }),\n                \"Reveal\"))))),\n        React.createElement(\"dd\", null, tls.key ? React.createElement(CopyToClipboard, { value: tls.key, visibleValue: visibleKeyValue }) : '-'),\n        React.createElement(DetailsItem, { label: \"CA Certificate\", obj: route, path: \"spec.tls.caCertificate\" }, tls.certificate ? React.createElement(CopyToClipboard, { value: tls.caCertificate }) : '-'),\n        tls.termination === 'reencrypt' && (React.createElement(DetailsItem, { label: \"Destination CA Certificate\", obj: route, path: \"spec.tls.destinationCACertificate\" }, tls.destinationCACertificate ? (React.createElement(CopyToClipboard, { value: tls.destinationCACertificate })) : ('-')))));\n};\nconst calcTrafficPercentage = (weight, route) => {\n    if (!weight) {\n        return '-';\n    }\n    const totalWeight = _.reduce(route.spec.alternateBackends, (result, alternate) => {\n        return (result += alternate.weight);\n    }, route.spec.to.weight);\n    const percentage = (weight / totalWeight) * 100;\n    return `${percentage.toFixed(1)}%`;\n};\nconst getIngressStatusForHost = (hostname, ingresses) => {\n    return _.find(ingresses, { host: hostname });\n};\nconst showCustomRouteHelp = (ingress, annotations) => {\n    if (!ingress || !_.some(ingress.conditions, { type: 'Admitted', status: 'True' })) {\n        return false;\n    }\n    if (_.get(annotations, 'openshift.io/host.generated') === 'true') {\n        return false;\n    }\n    if (!ingress.host || !ingress.routerCanonicalHostname) {\n        return false;\n    }\n    return true;\n};\nconst RouteTargetRow = ({ route, target }) => (React.createElement(\"tr\", null,\n    React.createElement(\"td\", null,\n        React.createElement(ResourceLink, { kind: target.kind, name: target.name, namespace: route.metadata.namespace, title: target.name })),\n    React.createElement(\"td\", null, target.weight),\n    React.createElement(\"td\", null, calcTrafficPercentage(target.weight, route))));\nconst CustomRouteHelp = ({ host, routerCanonicalHostname }) => (React.createElement(Popover, { headerContent: React.createElement(React.Fragment, null, \"Custom Route\"), bodyContent: React.createElement(\"div\", null,\n        React.createElement(\"p\", null,\n            \"To use a custom route, you must update your DNS provider by creating a canonical name (CNAME) record. Your CNAME record should point to your custom domain\",\n            ' ',\n            React.createElement(\"strong\", null, host),\n            \", to the OpenShift canonical router hostname,\",\n            ' ',\n            React.createElement(\"strong\", null, routerCanonicalHostname),\n            \", as the alias.\")) },\n    React.createElement(Button, { className: \"pf-m-link--align-left\", type: \"button\", variant: \"link\" },\n        React.createElement(QuestionCircleIcon, null),\n        \" Do you need to set up custom DNS?\")));\nconst RouteIngressStatus = ({ route }) => (React.createElement(React.Fragment, null, _.map(route.status.ingress, (ingress) => (React.createElement(\"div\", { key: ingress.routerName, className: \"co-m-route-ingress-status\" },\n    React.createElement(SectionHeading, { text: `Router: ${ingress.routerName}` }),\n    React.createElement(\"dl\", null,\n        React.createElement(DetailsItem, { label: \"Host\", obj: route, path: \"status.ingress.host\" }, ingress.host),\n        React.createElement(DetailsItem, { label: \"Wildcard Policy\", obj: route, path: \"status.ingress.wildcardPolicy\" }, ingress.wildcardPolicy),\n        React.createElement(DetailsItem, { label: \"Router Canonical Hostname\", obj: route, path: \"status.ingress.routerCanonicalHostname\" },\n            ingress.routerCanonicalHostname || '-',\n            showCustomRouteHelp(ingress, route.metadata.annotations) && (React.createElement(CustomRouteHelp, { host: ingress.host, routerCanonicalHostname: ingress.routerCanonicalHostname })))),\n    React.createElement(\"h3\", { className: \"co-section-heading-secondary\" }, \"Conditions\"),\n    React.createElement(Conditions, { conditions: ingress.conditions }))))));\nconst RouteDetails = ({ obj: route }) => {\n    const primaryIngressStatus = getIngressStatusForHost(route.spec.host, route.status.ingress);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(SectionHeading, { text: \"Route Details\" }),\n            React.createElement(RouteCharts, { namespace: route.metadata.namespace, route: route.metadata.name }),\n            React.createElement(\"div\", { className: \"row\" },\n                React.createElement(\"div\", { className: \"col-sm-6\" },\n                    React.createElement(ResourceSummary, { resource: route },\n                        React.createElement(DetailsItem, { label: route.spec.to.kind, obj: route, path: \"spec.to.name\" },\n                            React.createElement(ResourceLink, { kind: route.spec.to.kind, name: route.spec.to.name, namespace: route.metadata.namespace, title: route.spec.to.name })),\n                        React.createElement(DetailsItem, { label: \"Target Port\", obj: route, path: \"spec.port.targetPort\" }))),\n                React.createElement(\"div\", { className: \"col-sm-6\" },\n                    React.createElement(\"dl\", { className: \"co-m-pane__details\" },\n                        React.createElement(\"dt\", null, \"Location\"),\n                        React.createElement(\"dd\", null,\n                            React.createElement(RouteLocation, { obj: route })),\n                        React.createElement(\"dt\", null, \"Status\"),\n                        React.createElement(\"dd\", null,\n                            React.createElement(RouteStatus, { obj: route })),\n                        React.createElement(DetailsItem, { label: \"Host\", obj: route, path: \"spec.host\" }),\n                        React.createElement(DetailsItem, { label: \"Path\", obj: route, path: \"spec.path\" }),\n                        primaryIngressStatus && (React.createElement(DetailsItem, { label: \"Router Canonical Hostname\", obj: route, path: \"status.ingress.routerCanonicalHostname\" }, primaryIngressStatus.routerCanonicalHostname || '-')),\n                        showCustomRouteHelp(primaryIngressStatus, route.metadata.annotations) && (React.createElement(\"dd\", null,\n                            React.createElement(CustomRouteHelp, { host: primaryIngressStatus.host, routerCanonicalHostname: primaryIngressStatus.routerCanonicalHostname }))))))),\n        React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(SectionHeading, { text: \"TLS Settings\" }),\n            React.createElement(TLSSettings, { route: route })),\n        !_.isEmpty(route.spec.alternateBackends) && (React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(SectionHeading, { text: \"Traffic\" }),\n            React.createElement(\"p\", { className: \"co-m-pane__explanation\" }, \"This route splits traffic across multiple services.\"),\n            React.createElement(\"div\", { className: \"co-table-container\" },\n                React.createElement(\"table\", { className: \"table\" },\n                    React.createElement(\"thead\", null,\n                        React.createElement(\"tr\", null,\n                            React.createElement(\"th\", null, \"Service\"),\n                            React.createElement(\"th\", null, \"Weight\"),\n                            React.createElement(\"th\", null, \"Percent\"))),\n                    React.createElement(\"tbody\", null,\n                        React.createElement(RouteTargetRow, { route: route, target: route.spec.to }),\n                        _.map(route.spec.alternateBackends, (alternate, i) => (React.createElement(RouteTargetRow, { key: i, route: route, target: alternate })))))))),\n        _.isEmpty(route.status.ingress) ? (React.createElement(\"div\", { className: \"cos-status-box\" },\n            React.createElement(\"div\", { className: \"text-center\" }, \"No Route Status\"))) : (React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(RouteIngressStatus, { route: route })))));\n};\nexport const RoutesDetailsPage = (props) => (React.createElement(DetailsPage, Object.assign({}, props, { getResourceStatus: routeStatus, kind: RoutesReference, menuActions: menuActions, pages: [navFactory.details(detailsPage(RouteDetails)), navFactory.editYaml()] })));\nexport const RoutesList = (props) => (React.createElement(Table, Object.assign({}, props, { \"aria-label\": \"Routes\", Header: RouteTableHeader, Row: RouteTableRow, virtualize: true })));\nconst filters = [\n    {\n        filterGroupName: 'Status',\n        type: 'route-status',\n        reducer: routeStatus,\n        items: [\n            { id: 'Accepted', title: 'Accepted' },\n            { id: 'Rejected', title: 'Rejected' },\n            { id: 'Pending', title: 'Pending' },\n        ],\n    },\n];\nexport const RoutesPage = (props) => {\n    const createProps = {\n        to: `/k8s/ns/${props.namespace || 'default'}/routes/~new/form`,\n    };\n    return (React.createElement(ListPage, Object.assign({ ListComponent: RoutesList, kind: RoutesReference, canCreate: true, createProps: createProps, rowFilters: filters }, props)));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/routes.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/routes.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { Button, Popover } from '@patternfly/react-core';\nimport { sortable } from '@patternfly/react-table';\nimport { EyeIcon, EyeSlashIcon, QuestionCircleIcon } from '@patternfly/react-icons';\n\nimport { Status } from '@console/shared';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from './factory';\nimport {\n  CopyToClipboard,\n  DetailsItem,\n  ExternalLink,\n  Kebab,\n  ResourceKebab,\n  ResourceLink,\n  ResourceSummary,\n  SectionHeading,\n  detailsPage,\n  navFactory,\n} from './utils';\nimport { MaskedData } from './configmap-and-secret-data';\nimport {\n  K8sResourceKindReference,\n  RouteKind,\n  RouteIngress,\n  RouteTarget,\n  K8sResourceCondition,\n} from '../module/k8s';\nimport { RouteModel } from '../models';\nimport { Conditions } from './conditions';\nimport { RouteCharts } from './routes/route-charts';\n\nconst RoutesReference: K8sResourceKindReference = 'Route';\nconst menuActions = [...Kebab.getExtensionsActionsForKind(RouteModel), ...Kebab.factory.common];\n\nexport type IngressStatusProps = {\n  host: string;\n  routerName: string;\n  conditions: K8sResourceCondition[];\n  wildcardPolicy: string;\n  routerCanonicalHostname: string;\n};\n\nconst getRouteHost = (route: RouteKind, onlyAdmitted: boolean): string => {\n  let oldestAdmittedIngress: RouteIngress;\n  let oldestTransitionTime: string;\n  _.each(route.status.ingress, (ingress) => {\n    const admittedCondition = _.find(ingress.conditions, { type: 'Admitted', status: 'True' });\n    if (\n      admittedCondition &&\n      (!oldestTransitionTime || oldestTransitionTime > admittedCondition.lastTransitionTime)\n    ) {\n      oldestAdmittedIngress = ingress;\n      oldestTransitionTime = admittedCondition.lastTransitionTime;\n    }\n  });\n\n  if (oldestAdmittedIngress) {\n    return oldestAdmittedIngress.host;\n  }\n\n  return onlyAdmitted ? null : route.spec.host;\n};\n\nconst isWebRoute = (route: RouteKind): boolean => {\n  return !!getRouteHost(route, true) && _.get(route, 'spec.wildcardPolicy') !== 'Subdomain';\n};\n\nexport const getRouteWebURL = (route: RouteKind): string => {\n  const scheme = _.get(route, 'spec.tls.termination') ? 'https' : 'http';\n  let url = `${scheme}://${getRouteHost(route, false)}`;\n  if (route.spec.path) {\n    url += route.spec.path;\n  }\n  return url;\n};\n\nconst getSubdomain = (route: RouteKind): string => {\n  const hostname = _.get(route, 'spec.host', '');\n  return hostname.replace(/^[a-z0-9]([-a-z0-9]*[a-z0-9])\\./, '');\n};\n\nconst getRouteLabel = (route: RouteKind): string => {\n  if (isWebRoute(route)) {\n    return getRouteWebURL(route);\n  }\n\n  let label = getRouteHost(route, false);\n  if (!label) {\n    return '<unknown host>';\n  }\n\n  if (_.get(route, 'spec.wildcardPolicy') === 'Subdomain') {\n    label = `*.${getSubdomain(route)}`;\n  }\n\n  if (route.spec.path) {\n    label += route.spec.path;\n  }\n  return label;\n};\n\nexport const RouteLocation: React.FC<RouteHostnameProps> = ({ obj }) => (\n  <div>\n    {isWebRoute(obj) ? (\n      <ExternalLink\n        href={getRouteWebURL(obj)}\n        additionalClassName=\"co-external-link--block\"\n        text={getRouteLabel(obj)}\n      />\n    ) : (\n      getRouteLabel(obj)\n    )}\n  </div>\n);\nRouteLocation.displayName = 'RouteLocation';\n\nexport const routeStatus = (route: RouteKind): string => {\n  let atLeastOneAdmitted: boolean = false;\n\n  if (!route.status || !route.status.ingress) {\n    return 'Pending';\n  }\n\n  _.each(route.status.ingress, (ingress) => {\n    const isAdmitted = _.some(ingress.conditions, { type: 'Admitted', status: 'True' });\n    if (isAdmitted) {\n      atLeastOneAdmitted = true;\n    }\n  });\n\n  return atLeastOneAdmitted ? 'Accepted' : 'Rejected';\n};\n\nexport const RouteStatus: React.FC<RouteStatusProps> = ({ obj: route }) => {\n  const status: string = routeStatus(route);\n  return <Status status={status} />;\n};\nRouteStatus.displayName = 'RouteStatus';\n\nconst tableColumnClasses = [\n  '',\n  '',\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n  Kebab.columnClass,\n];\n\nconst kind = 'Route';\n\nconst RouteTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Status',\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Location',\n      sortField: 'spec.host',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: 'Service',\n      sortField: 'spec.to.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[5] },\n    },\n  ];\n};\nRouteTableHeader.displayName = 'RouteTableHeader';\n\nconst RouteTableRow: RowFunction<RouteKind> = ({ obj: route, index, key, style }) => {\n  return (\n    <TableRow id={route.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={kind}\n          name={route.metadata.name}\n          namespace={route.metadata.namespace}\n          title={route.metadata.uid}\n        />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink\n          kind=\"Namespace\"\n          name={route.metadata.namespace}\n          title={route.metadata.namespace}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <RouteStatus obj={route} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[3], 'co-break-word')}>\n        <RouteLocation obj={route} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <ResourceLink\n          kind=\"Service\"\n          name={route.spec.to.name}\n          namespace={route.metadata.namespace}\n          title={route.spec.to.name}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={route} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst TLSSettings: React.FC<TLSSettingsProps> = ({ route }) => {\n  const [showKey, setShowKey] = React.useState(false);\n  const { tls } = route.spec;\n  if (!tls) {\n    return <>TLS is not enabled.</>;\n  }\n\n  const visibleKeyValue = showKey ? tls.key : <MaskedData />;\n  return (\n    <dl>\n      <DetailsItem label=\"Termination Type\" obj={route} path=\"spec.tls.termination\" />\n      <DetailsItem\n        label=\"Insecure Traffic\"\n        obj={route}\n        path=\"spec.tls.insecureEdgeTerminationPolicy\"\n      />\n      <DetailsItem label=\"Certificate\" obj={route} path=\"spec.tls.certificate\">\n        {tls.certificate ? <CopyToClipboard value={tls.certificate} /> : '-'}\n      </DetailsItem>\n      <dt className=\"co-m-route-tls-reveal__title\">\n        Key{' '}\n        {tls.key && (\n          <Button\n            className=\"pf-m-link--align-left\"\n            type=\"button\"\n            onClick={() => setShowKey(!showKey)}\n            variant=\"link\"\n          >\n            {showKey ? (\n              <>\n                <EyeSlashIcon className=\"co-icon-space-r\" />\n                Hide\n              </>\n            ) : (\n              <>\n                <EyeIcon className=\"co-icon-space-r\" />\n                Reveal\n              </>\n            )}\n          </Button>\n        )}\n      </dt>\n      <dd>{tls.key ? <CopyToClipboard value={tls.key} visibleValue={visibleKeyValue} /> : '-'}</dd>\n      <DetailsItem label=\"CA Certificate\" obj={route} path=\"spec.tls.caCertificate\">\n        {tls.certificate ? <CopyToClipboard value={tls.caCertificate} /> : '-'}\n      </DetailsItem>\n      {tls.termination === 'reencrypt' && (\n        <DetailsItem\n          label=\"Destination CA Certificate\"\n          obj={route}\n          path=\"spec.tls.destinationCACertificate\"\n        >\n          {tls.destinationCACertificate ? (\n            <CopyToClipboard value={tls.destinationCACertificate} />\n          ) : (\n            '-'\n          )}\n        </DetailsItem>\n      )}\n    </dl>\n  );\n};\n\nconst calcTrafficPercentage = (weight: number, route: any) => {\n  if (!weight) {\n    return '-';\n  }\n\n  const totalWeight = _.reduce(\n    route.spec.alternateBackends,\n    (result, alternate) => {\n      return (result += alternate.weight);\n    },\n    route.spec.to.weight,\n  );\n\n  const percentage = (weight / totalWeight) * 100;\n\n  return `${percentage.toFixed(1)}%`;\n};\n\nconst getIngressStatusForHost = (\n  hostname: string,\n  ingresses: RouteIngress[],\n): IngressStatusProps => {\n  return _.find(ingresses, { host: hostname }) as IngressStatusProps;\n};\n\nconst showCustomRouteHelp = (\n  ingress: RouteIngress,\n  annotations: RouteKind['metadata']['annotations'],\n) => {\n  if (!ingress || !_.some(ingress.conditions, { type: 'Admitted', status: 'True' })) {\n    return false;\n  }\n\n  if (_.get(annotations, 'openshift.io/host.generated') === 'true') {\n    return false;\n  }\n\n  if (!ingress.host || !ingress.routerCanonicalHostname) {\n    return false;\n  }\n\n  return true;\n};\n\nconst RouteTargetRow: React.FC<RouteTargetRowProps> = ({ route, target }) => (\n  <tr>\n    <td>\n      <ResourceLink\n        kind={target.kind}\n        name={target.name}\n        namespace={route.metadata.namespace}\n        title={target.name}\n      />\n    </td>\n    <td>{target.weight}</td>\n    <td>{calcTrafficPercentage(target.weight, route)}</td>\n  </tr>\n);\n\nconst CustomRouteHelp: React.FC<CustomRouteHelpProps> = ({ host, routerCanonicalHostname }) => (\n  <Popover\n    headerContent={<>Custom Route</>}\n    bodyContent={\n      <div>\n        <p>\n          To use a custom route, you must update your DNS provider by creating a canonical name\n          (CNAME) record. Your CNAME record should point to your custom domain{' '}\n          <strong>{host}</strong>, to the OpenShift canonical router hostname,{' '}\n          <strong>{routerCanonicalHostname}</strong>, as the alias.\n        </p>\n      </div>\n    }\n  >\n    <Button className=\"pf-m-link--align-left\" type=\"button\" variant=\"link\">\n      <QuestionCircleIcon /> Do you need to set up custom DNS?\n    </Button>\n  </Popover>\n);\n\nconst RouteIngressStatus: React.FC<RouteIngressStatusProps> = ({ route }) => (\n  <>\n    {_.map(route.status.ingress, (ingress: RouteIngress) => (\n      <div key={ingress.routerName} className=\"co-m-route-ingress-status\">\n        <SectionHeading text={`Router: ${ingress.routerName}`} />\n        <dl>\n          <DetailsItem label=\"Host\" obj={route} path=\"status.ingress.host\">\n            {ingress.host}\n          </DetailsItem>\n          <DetailsItem label=\"Wildcard Policy\" obj={route} path=\"status.ingress.wildcardPolicy\">\n            {ingress.wildcardPolicy}\n          </DetailsItem>\n          <DetailsItem\n            label=\"Router Canonical Hostname\"\n            obj={route}\n            path=\"status.ingress.routerCanonicalHostname\"\n          >\n            {ingress.routerCanonicalHostname || '-'}\n            {showCustomRouteHelp(ingress, route.metadata.annotations) && (\n              <CustomRouteHelp\n                host={ingress.host}\n                routerCanonicalHostname={ingress.routerCanonicalHostname}\n              />\n            )}\n          </DetailsItem>\n        </dl>\n        <h3 className=\"co-section-heading-secondary\">Conditions</h3>\n        <Conditions conditions={ingress.conditions} />\n      </div>\n    ))}\n  </>\n);\n\nconst RouteDetails: React.FC<RoutesDetailsProps> = ({ obj: route }) => {\n  const primaryIngressStatus: IngressStatusProps = getIngressStatusForHost(\n    route.spec.host,\n    route.status.ingress,\n  );\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Route Details\" />\n        <RouteCharts namespace={route.metadata.namespace} route={route.metadata.name} />\n        <div className=\"row\">\n          <div className=\"col-sm-6\">\n            <ResourceSummary resource={route}>\n              <DetailsItem label={route.spec.to.kind} obj={route} path=\"spec.to.name\">\n                <ResourceLink\n                  kind={route.spec.to.kind}\n                  name={route.spec.to.name}\n                  namespace={route.metadata.namespace}\n                  title={route.spec.to.name}\n                />\n              </DetailsItem>\n              <DetailsItem label=\"Target Port\" obj={route} path=\"spec.port.targetPort\" />\n            </ResourceSummary>\n          </div>\n          <div className=\"col-sm-6\">\n            <dl className=\"co-m-pane__details\">\n              <dt>Location</dt>\n              <dd>\n                <RouteLocation obj={route} />\n              </dd>\n              <dt>Status</dt>\n              <dd>\n                <RouteStatus obj={route} />\n              </dd>\n              <DetailsItem label=\"Host\" obj={route} path=\"spec.host\" />\n              <DetailsItem label=\"Path\" obj={route} path=\"spec.path\" />\n              {primaryIngressStatus && (\n                <DetailsItem\n                  label=\"Router Canonical Hostname\"\n                  obj={route}\n                  path=\"status.ingress.routerCanonicalHostname\"\n                >\n                  {primaryIngressStatus.routerCanonicalHostname || '-'}\n                </DetailsItem>\n              )}\n              {showCustomRouteHelp(primaryIngressStatus, route.metadata.annotations) && (\n                <dd>\n                  <CustomRouteHelp\n                    host={primaryIngressStatus.host}\n                    routerCanonicalHostname={primaryIngressStatus.routerCanonicalHostname}\n                  />\n                </dd>\n              )}\n            </dl>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"TLS Settings\" />\n        <TLSSettings route={route} />\n      </div>\n      {!_.isEmpty(route.spec.alternateBackends) && (\n        <div className=\"co-m-pane__body\">\n          <SectionHeading text=\"Traffic\" />\n          <p className=\"co-m-pane__explanation\">\n            This route splits traffic across multiple services.\n          </p>\n          <div className=\"co-table-container\">\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th>Service</th>\n                  <th>Weight</th>\n                  <th>Percent</th>\n                </tr>\n              </thead>\n              <tbody>\n                <RouteTargetRow route={route} target={route.spec.to} />\n                {_.map(route.spec.alternateBackends, (alternate, i) => (\n                  <RouteTargetRow key={i} route={route} target={alternate} />\n                ))}\n              </tbody>\n            </table>\n          </div>\n        </div>\n      )}\n      {_.isEmpty(route.status.ingress) ? (\n        <div className=\"cos-status-box\">\n          <div className=\"text-center\">No Route Status</div>\n        </div>\n      ) : (\n        <div className=\"co-m-pane__body\">\n          <RouteIngressStatus route={route} />\n        </div>\n      )}\n    </>\n  );\n};\n\nexport const RoutesDetailsPage: React.FC<RoutesDetailsPageProps> = (props) => (\n  <DetailsPage\n    {...props}\n    getResourceStatus={routeStatus}\n    kind={RoutesReference}\n    menuActions={menuActions}\n    pages={[navFactory.details(detailsPage(RouteDetails)), navFactory.editYaml()]}\n  />\n);\nexport const RoutesList: React.FC = (props) => (\n  <Table {...props} aria-label=\"Routes\" Header={RouteTableHeader} Row={RouteTableRow} virtualize />\n);\n\nconst filters = [\n  {\n    filterGroupName: 'Status',\n    type: 'route-status',\n    reducer: routeStatus,\n    items: [\n      { id: 'Accepted', title: 'Accepted' },\n      { id: 'Rejected', title: 'Rejected' },\n      { id: 'Pending', title: 'Pending' },\n    ],\n  },\n];\n\nexport const RoutesPage: React.FC<RoutesPageProps> = (props) => {\n  const createProps = {\n    to: `/k8s/ns/${props.namespace || 'default'}/routes/~new/form`,\n  };\n\n  return (\n    <ListPage\n      ListComponent={RoutesList}\n      kind={RoutesReference}\n      canCreate={true}\n      createProps={createProps}\n      rowFilters={filters}\n      {...props}\n    />\n  );\n};\n\nexport type RouteHostnameProps = {\n  obj: RouteKind;\n};\n\nexport type RouteStatusProps = {\n  obj: RouteKind;\n};\n\nexport type RouteTargetRowProps = {\n  route: RouteKind;\n  target: RouteTarget;\n};\n\nexport type TLSSettingsProps = {\n  route: RouteKind;\n};\n\nexport type RouteHeaderProps = {\n  obj: RouteKind;\n};\n\nexport type RoutesPageProps = {\n  obj: RouteKind;\n  namespace: string;\n};\n\nexport type RoutesDetailsProps = {\n  obj: RouteKind;\n};\n\nexport type RoutesDetailsPageProps = {\n  match: any;\n};\n\nexport type RouteIngressStatusProps = {\n  route: RouteKind;\n};\n\nexport type CustomRouteHelpProps = {\n  host: string;\n  routerCanonicalHostname: string;\n};\n"]}]}