{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/sink-source/SinkSource.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/sink-source/SinkSource.tsx","mtime":1616735742410},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { Formik } from 'formik';\nimport { k8sUpdate, referenceFor, modelFor } from '@console/internal/module/k8s';\nimport SinkSourceModal from './SinkSourceModal';\nconst SinkSource = ({ source, cancel, close }) => {\n    const { metadata: { namespace, name }, spec: { sink: { ref: { name: sinkName, apiVersion, kind }, }, }, } = source;\n    const initialValues = {\n        sink: {\n            ref: {\n                apiVersion: apiVersion || '',\n                kind: kind || '',\n                name: sinkName || '',\n            },\n        },\n    };\n    const handleSubmit = (values, action) => {\n        var _a, _b;\n        const updatePayload = Object.assign(Object.assign({}, source), (sinkName !== ((_b = (_a = values === null || values === void 0 ? void 0 : values.sink) === null || _a === void 0 ? void 0 : _a.ref) === null || _b === void 0 ? void 0 : _b.name) && { spec: Object.assign(Object.assign({}, source.spec), values) }));\n        k8sUpdate(modelFor(referenceFor(source)), updatePayload)\n            .then(() => {\n            action.setSubmitting(false);\n            action.setStatus({ error: '' });\n            close();\n        })\n            .catch((err) => {\n            action.setStatus({ error: err.message || 'An error occurred. Please try again' });\n        });\n    };\n    return (React.createElement(Formik, { initialValues: initialValues, onSubmit: handleSubmit, onReset: cancel, initialStatus: { error: '' } }, (props) => (React.createElement(SinkSourceModal, Object.assign({}, props, { namespace: namespace, resourceName: name, cancel: cancel })))));\n};\nexport default SinkSource;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/sink-source/SinkSource.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/sink-source/SinkSource.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,MAAM,EAA+B,MAAM,QAAQ,CAAC;AAC7D,OAAO,EAAmB,SAAS,EAAE,YAAY,EAAE,QAAQ,EAAE,MAAM,8BAA8B,CAAC;AAClG,OAAO,eAAe,MAAM,mBAAmB,CAAC;AAQhD,MAAM,UAAU,GAA8B,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,KAAK,EAAE,EAAE,EAAE;IAC1E,MAAM,EACJ,QAAQ,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,EAC7B,IAAI,EAAE,EACJ,IAAI,EAAE,EACJ,GAAG,EAAE,EAAE,IAAI,EAAE,QAAQ,EAAE,UAAU,EAAE,IAAI,EAAE,GAC1C,GACF,GACF,GAAG,MAAM,CAAC;IAEX,MAAM,aAAa,GAAG;QACpB,IAAI,EAAE;YACJ,GAAG,EAAE;gBACH,UAAU,EAAE,UAAU,IAAI,EAAE;gBAC5B,IAAI,EAAE,IAAI,IAAI,EAAE;gBAChB,IAAI,EAAE,QAAQ,IAAI,EAAE;aACrB;SACF;KACF,CAAC;IACF,MAAM,YAAY,GAAG,CAAC,MAAoB,EAAE,MAAmC,EAAE,EAAE;;QACjF,MAAM,aAAa,mCACd,MAAM,GACN,CAAC,QAAQ,kBAAK,MAAM,aAAN,MAAM,uBAAN,MAAM,CAAE,IAAI,0CAAE,GAAG,0CAAE,IAAI,CAAA,IAAI,EAAE,IAAI,kCAAO,MAAM,CAAC,IAAI,GAAK,MAAM,CAAE,EAAE,CAAC,CACrF,CAAC;QACF,SAAS,CAAC,QAAQ,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,EAAE,aAAa,CAAC;aACrD,IAAI,CAAC,GAAG,EAAE;YACT,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC5B,MAAM,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;YAChC,KAAK,EAAE,CAAC;QACV,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;YACb,MAAM,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,OAAO,IAAI,qCAAqC,EAAE,CAAC,CAAC;QACpF,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;IAEF,OAAO,CACL,oBAAC,MAAM,IACL,aAAa,EAAE,aAAa,EAC5B,QAAQ,EAAE,YAAY,EACtB,OAAO,EAAE,MAAM,EACf,aAAa,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,IAE3B,CAAC,KAAK,EAAE,EAAE,CAAC,CACV,oBAAC,eAAe,oBAAK,KAAK,IAAE,SAAS,EAAE,SAAS,EAAE,YAAY,EAAE,IAAI,EAAE,MAAM,EAAE,MAAM,IAAI,CACzF,CACM,CACV,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,UAAU,CAAC","sourcesContent":["import * as React from 'react';\nimport { Formik, FormikValues, FormikHelpers } from 'formik';\nimport { K8sResourceKind, k8sUpdate, referenceFor, modelFor } from '@console/internal/module/k8s';\nimport SinkSourceModal from './SinkSourceModal';\n\nexport interface SinkSourceProps {\n  source: K8sResourceKind;\n  cancel?: () => void;\n  close?: () => void;\n}\n\nconst SinkSource: React.FC<SinkSourceProps> = ({ source, cancel, close }) => {\n  const {\n    metadata: { namespace, name },\n    spec: {\n      sink: {\n        ref: { name: sinkName, apiVersion, kind },\n      },\n    },\n  } = source;\n\n  const initialValues = {\n    sink: {\n      ref: {\n        apiVersion: apiVersion || '',\n        kind: kind || '',\n        name: sinkName || '',\n      },\n    },\n  };\n  const handleSubmit = (values: FormikValues, action: FormikHelpers<FormikValues>) => {\n    const updatePayload = {\n      ...source,\n      ...(sinkName !== values?.sink?.ref?.name && { spec: { ...source.spec, ...values } }),\n    };\n    k8sUpdate(modelFor(referenceFor(source)), updatePayload)\n      .then(() => {\n        action.setSubmitting(false);\n        action.setStatus({ error: '' });\n        close();\n      })\n      .catch((err) => {\n        action.setStatus({ error: err.message || 'An error occurred. Please try again' });\n      });\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      onReset={cancel}\n      initialStatus={{ error: '' }}\n    >\n      {(props) => (\n        <SinkSourceModal {...props} namespace={namespace} resourceName={name} cancel={cancel} />\n      )}\n    </Formik>\n  );\n};\n\nexport default SinkSource;\n"]}]}