{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/pipeline/PipelineSection.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/pipeline/PipelineSection.tsx","mtime":1616735742380},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { connectToFlags } from '@console/internal/reducers/features';\nimport { Alert, Split, SplitItem } from '@patternfly/react-core';\nimport { getActiveNamespace } from '@console/internal/actions/ui';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport { TechPreviewBadge } from '@console/shared';\nimport { useFormikContext } from 'formik';\nimport { PipelineModel, PipelineResourceModel } from '../../../models';\nimport { FLAG_OPENSHIFT_PIPELINE, CLUSTER_PIPELINE_NS } from '../../../const';\nimport FormSection from '../section/FormSection';\nimport PipelineTemplate from './PipelineTemplate';\nconst usePipelineAccessReview = () => {\n    const canListPipelines = useAccessReview({\n        group: PipelineModel.apiGroup,\n        resource: PipelineModel.plural,\n        namespace: CLUSTER_PIPELINE_NS,\n        verb: 'list',\n    });\n    const canCreatePipelines = useAccessReview({\n        group: PipelineModel.apiGroup,\n        resource: PipelineModel.plural,\n        namespace: getActiveNamespace(),\n        verb: 'create',\n    });\n    const canCreatePipelineResource = useAccessReview({\n        group: PipelineResourceModel.apiGroup,\n        resource: PipelineResourceModel.plural,\n        namespace: getActiveNamespace(),\n        verb: 'create',\n    });\n    return canListPipelines && canCreatePipelines && canCreatePipelineResource;\n};\nconst PipelineSection = ({ flags, builderImages }) => {\n    const { values } = useFormikContext();\n    const hasCreatePipelineAccess = usePipelineAccessReview();\n    if (flags[FLAG_OPENSHIFT_PIPELINE] && hasCreatePipelineAccess) {\n        const title = (React.createElement(Split, { gutter: \"md\" },\n            React.createElement(SplitItem, { className: \"odc-form-section__heading\" }, \"Pipelines\"),\n            React.createElement(SplitItem, null,\n                React.createElement(TechPreviewBadge, null))));\n        return (React.createElement(FormSection, { title: title }, values.image.selected || values.build.strategy === 'Docker' ? (React.createElement(PipelineTemplate, { builderImages: builderImages })) : (React.createElement(Alert, { isInline: true, variant: \"info\", title: \"Select a builder image and resource to see if there is a pipeline template available for this runtime.\" }))));\n    }\n    return null;\n};\nexport default connectToFlags(FLAG_OPENSHIFT_PIPELINE)(PipelineSection);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/pipeline/PipelineSection.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/pipeline/PipelineSection.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,cAAc,EAAe,MAAM,qCAAqC,CAAC;AAClF,OAAO,EAAE,KAAK,EAAE,KAAK,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AACjE,OAAO,EAAE,kBAAkB,EAAE,MAAM,8BAA8B,CAAC;AAClE,OAAO,EAAE,eAAe,EAAE,MAAM,oCAAoC,CAAC;AACrE,OAAO,EAAE,gBAAgB,EAAE,MAAM,iBAAiB,CAAC;AACnD,OAAO,EAAE,gBAAgB,EAAgB,MAAM,QAAQ,CAAC;AACxD,OAAO,EAAE,aAAa,EAAE,qBAAqB,EAAE,MAAM,iBAAiB,CAAC;AACvE,OAAO,EAAE,uBAAuB,EAAE,mBAAmB,EAAE,MAAM,gBAAgB,CAAC;AAE9E,OAAO,WAAW,MAAM,wBAAwB,CAAC;AACjD,OAAO,gBAAgB,MAAM,oBAAoB,CAAC;AAOlD,MAAM,uBAAuB,GAAG,GAAY,EAAE;IAC5C,MAAM,gBAAgB,GAAG,eAAe,CAAC;QACvC,KAAK,EAAE,aAAa,CAAC,QAAQ;QAC7B,QAAQ,EAAE,aAAa,CAAC,MAAM;QAC9B,SAAS,EAAE,mBAAmB;QAC9B,IAAI,EAAE,MAAM;KACb,CAAC,CAAC;IAEH,MAAM,kBAAkB,GAAG,eAAe,CAAC;QACzC,KAAK,EAAE,aAAa,CAAC,QAAQ;QAC7B,QAAQ,EAAE,aAAa,CAAC,MAAM;QAC9B,SAAS,EAAE,kBAAkB,EAAE;QAC/B,IAAI,EAAE,QAAQ;KACf,CAAC,CAAC;IAEH,MAAM,yBAAyB,GAAG,eAAe,CAAC;QAChD,KAAK,EAAE,qBAAqB,CAAC,QAAQ;QACrC,QAAQ,EAAE,qBAAqB,CAAC,MAAM;QACtC,SAAS,EAAE,kBAAkB,EAAE;QAC/B,IAAI,EAAE,QAAQ;KACf,CAAC,CAAC;IAEH,OAAO,gBAAgB,IAAI,kBAAkB,IAAI,yBAAyB,CAAC;AAC7E,CAAC,CAAC;AAEF,MAAM,eAAe,GAAmC,CAAC,EAAE,KAAK,EAAE,aAAa,EAAE,EAAE,EAAE;IACnF,MAAM,EAAE,MAAM,EAAE,GAAG,gBAAgB,EAAgB,CAAC;IAEpD,MAAM,uBAAuB,GAAG,uBAAuB,EAAE,CAAC;IAE1D,IAAI,KAAK,CAAC,uBAAuB,CAAC,IAAI,uBAAuB,EAAE;QAC7D,MAAM,KAAK,GAAG,CACZ,oBAAC,KAAK,IAAC,MAAM,EAAC,IAAI;YAChB,oBAAC,SAAS,IAAC,SAAS,EAAC,2BAA2B,gBAAsB;YACtE,oBAAC,SAAS;gBACR,oBAAC,gBAAgB,OAAG,CACV,CACN,CACT,CAAC;QACF,OAAO,CACL,oBAAC,WAAW,IAAC,KAAK,EAAE,KAAK,IACtB,MAAM,CAAC,KAAK,CAAC,QAAQ,IAAI,MAAM,CAAC,KAAK,CAAC,QAAQ,KAAK,QAAQ,CAAC,CAAC,CAAC,CAC7D,oBAAC,gBAAgB,IAAC,aAAa,EAAE,aAAa,GAAI,CACnD,CAAC,CAAC,CAAC,CACF,oBAAC,KAAK,IACJ,QAAQ,QACR,OAAO,EAAC,MAAM,EACd,KAAK,EAAC,wGAAwG,GAC9G,CACH,CACW,CACf,CAAC;KACH;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,eAAe,cAAc,CAAuB,uBAAuB,CAAC,CAAC,eAAe,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { connectToFlags, FlagsObject } from '@console/internal/reducers/features';\nimport { Alert, Split, SplitItem } from '@patternfly/react-core';\nimport { getActiveNamespace } from '@console/internal/actions/ui';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport { TechPreviewBadge } from '@console/shared';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { PipelineModel, PipelineResourceModel } from '../../../models';\nimport { FLAG_OPENSHIFT_PIPELINE, CLUSTER_PIPELINE_NS } from '../../../const';\nimport { NormalizedBuilderImages } from '../../../utils/imagestream-utils';\nimport FormSection from '../section/FormSection';\nimport PipelineTemplate from './PipelineTemplate';\n\ntype PipelineSectionProps = {\n  flags: FlagsObject;\n  builderImages: NormalizedBuilderImages;\n};\n\nconst usePipelineAccessReview = (): boolean => {\n  const canListPipelines = useAccessReview({\n    group: PipelineModel.apiGroup,\n    resource: PipelineModel.plural,\n    namespace: CLUSTER_PIPELINE_NS,\n    verb: 'list',\n  });\n\n  const canCreatePipelines = useAccessReview({\n    group: PipelineModel.apiGroup,\n    resource: PipelineModel.plural,\n    namespace: getActiveNamespace(),\n    verb: 'create',\n  });\n\n  const canCreatePipelineResource = useAccessReview({\n    group: PipelineResourceModel.apiGroup,\n    resource: PipelineResourceModel.plural,\n    namespace: getActiveNamespace(),\n    verb: 'create',\n  });\n\n  return canListPipelines && canCreatePipelines && canCreatePipelineResource;\n};\n\nconst PipelineSection: React.FC<PipelineSectionProps> = ({ flags, builderImages }) => {\n  const { values } = useFormikContext<FormikValues>();\n\n  const hasCreatePipelineAccess = usePipelineAccessReview();\n\n  if (flags[FLAG_OPENSHIFT_PIPELINE] && hasCreatePipelineAccess) {\n    const title = (\n      <Split gutter=\"md\">\n        <SplitItem className=\"odc-form-section__heading\">Pipelines</SplitItem>\n        <SplitItem>\n          <TechPreviewBadge />\n        </SplitItem>\n      </Split>\n    );\n    return (\n      <FormSection title={title}>\n        {values.image.selected || values.build.strategy === 'Docker' ? (\n          <PipelineTemplate builderImages={builderImages} />\n        ) : (\n          <Alert\n            isInline\n            variant=\"info\"\n            title=\"Select a builder image and resource to see if there is a pipeline template available for this runtime.\"\n          />\n        )}\n      </FormSection>\n    );\n  }\n\n  return null;\n};\n\nexport default connectToFlags<PipelineSectionProps>(FLAG_OPENSHIFT_PIPELINE)(PipelineSection);\n"]}]}