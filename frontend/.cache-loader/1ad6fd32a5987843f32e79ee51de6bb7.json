{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/shared/NodeChecker/node-checker.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/shared/NodeChecker/node-checker.tsx","mtime":1616735742420},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { Alert, Popover, PopoverPosition, Text, TextVariants, Button, } from '@patternfly/react-core';\nimport { ResourceLink, ExternalLink, resourcePath, pluralize, } from '@console/internal/components/utils';\nimport { getName } from '@console/shared';\nimport { SCHEDULING_NODES_MATCH_TEXT, SCHEDULING_NO_NODES_MATCH_TEXT, SCHEDULING_NODES_MATCH_BUTTON_TEXT, SCHEDULING_NO_NODES_MATCH_BUTTON_TEXT, } from '../consts';\nimport './node-checker.scss';\nexport const NodeChecker = ({ qualifiedNodes, wariningTitle, warningMessage, }) => {\n    const size = qualifiedNodes.length;\n    const buttonText = pluralize(size, 'Node');\n    return (React.createElement(Alert, { className: \"kv-node-checker\", variant: size > 0 ? 'success' : 'warning', isInline: true, title: size > 0\n            ? SCHEDULING_NODES_MATCH_TEXT(size)\n            : wariningTitle || SCHEDULING_NO_NODES_MATCH_TEXT },\n        React.createElement(Popover, { headerContent: React.createElement(\"div\", null,\n                buttonText,\n                \" found\"), position: PopoverPosition.right, className: \"kv-node-checker__popover\", bodyContent: qualifiedNodes.map((node) => (React.createElement(ExternalLink, { key: getName(node), href: resourcePath('Node', getName(node)), text: React.createElement(ResourceLink, { linkTo: false, kind: \"Node\", name: getName(node) }) }))) },\n            React.createElement(Button, { isInline: true, isDisabled: size === 0, variant: \"link\" },\n                React.createElement(Text, { component: TextVariants.h4 }, size > 0\n                    ? SCHEDULING_NODES_MATCH_BUTTON_TEXT(size)\n                    : warningMessage || SCHEDULING_NO_NODES_MATCH_BUTTON_TEXT)))));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/shared/NodeChecker/node-checker.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/shared/NodeChecker/node-checker.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EACL,KAAK,EACL,OAAO,EACP,eAAe,EACf,IAAI,EACJ,YAAY,EACZ,MAAM,GACP,MAAM,wBAAwB,CAAC;AAChC,OAAO,EACL,YAAY,EACZ,YAAY,EACZ,YAAY,EACZ,SAAS,GACV,MAAM,oCAAoC,CAAC;AAE5C,OAAO,EAAE,OAAO,EAAE,MAAM,iBAAiB,CAAC;AAC1C,OAAO,EACL,2BAA2B,EAC3B,8BAA8B,EAC9B,kCAAkC,EAClC,qCAAqC,GACtC,MAAM,WAAW,CAAC;AACnB,OAAO,qBAAqB,CAAC;AAE7B,MAAM,CAAC,MAAM,WAAW,GAA+B,CAAC,EACtD,cAAc,EACd,aAAa,EACb,cAAc,GACf,EAAE,EAAE;IACH,MAAM,IAAI,GAAG,cAAc,CAAC,MAAM,CAAC;IACnC,MAAM,UAAU,GAAG,SAAS,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;IAC3C,OAAO,CACL,oBAAC,KAAK,IACJ,SAAS,EAAC,iBAAiB,EAC3B,OAAO,EAAE,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,SAAS,EACzC,QAAQ,QACR,KAAK,EACH,IAAI,GAAG,CAAC;YACN,CAAC,CAAC,2BAA2B,CAAC,IAAI,CAAC;YACnC,CAAC,CAAC,aAAa,IAAI,8BAA8B;QAGrD,oBAAC,OAAO,IACN,aAAa,EAAE;gBAAM,UAAU;yBAAa,EAC5C,QAAQ,EAAE,eAAe,CAAC,KAAK,EAC/B,SAAS,EAAC,0BAA0B,EACpC,WAAW,EAAE,cAAc,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CACxC,oBAAC,YAAY,IACX,GAAG,EAAE,OAAO,CAAC,IAAI,CAAC,EAClB,IAAI,EAAE,YAAY,CAAC,MAAM,EAAE,OAAO,CAAC,IAAI,CAAC,CAAC,EACzC,IAAI,EAAE,oBAAC,YAAY,IAAC,MAAM,EAAE,KAAK,EAAE,IAAI,EAAC,MAAM,EAAC,IAAI,EAAE,OAAO,CAAC,IAAI,CAAC,GAAI,GACtE,CACH,CAAC;YAEF,oBAAC,MAAM,IAAC,QAAQ,QAAC,UAAU,EAAE,IAAI,KAAK,CAAC,EAAE,OAAO,EAAC,MAAM;gBACrD,oBAAC,IAAI,IAAC,SAAS,EAAE,YAAY,CAAC,EAAE,IAC7B,IAAI,GAAG,CAAC;oBACP,CAAC,CAAC,kCAAkC,CAAC,IAAI,CAAC;oBAC1C,CAAC,CAAC,cAAc,IAAI,qCAAqC,CACtD,CACA,CACD,CACJ,CACT,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport {\n  Alert,\n  Popover,\n  PopoverPosition,\n  Text,\n  TextVariants,\n  Button,\n} from '@patternfly/react-core';\nimport {\n  ResourceLink,\n  ExternalLink,\n  resourcePath,\n  pluralize,\n} from '@console/internal/components/utils';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport { getName } from '@console/shared';\nimport {\n  SCHEDULING_NODES_MATCH_TEXT,\n  SCHEDULING_NO_NODES_MATCH_TEXT,\n  SCHEDULING_NODES_MATCH_BUTTON_TEXT,\n  SCHEDULING_NO_NODES_MATCH_BUTTON_TEXT,\n} from '../consts';\nimport './node-checker.scss';\n\nexport const NodeChecker: React.FC<NodeCheckerProps> = ({\n  qualifiedNodes,\n  wariningTitle,\n  warningMessage,\n}) => {\n  const size = qualifiedNodes.length;\n  const buttonText = pluralize(size, 'Node');\n  return (\n    <Alert\n      className=\"kv-node-checker\"\n      variant={size > 0 ? 'success' : 'warning'}\n      isInline\n      title={\n        size > 0\n          ? SCHEDULING_NODES_MATCH_TEXT(size)\n          : wariningTitle || SCHEDULING_NO_NODES_MATCH_TEXT\n      }\n    >\n      <Popover\n        headerContent={<div>{buttonText} found</div>}\n        position={PopoverPosition.right}\n        className=\"kv-node-checker__popover\"\n        bodyContent={qualifiedNodes.map((node) => (\n          <ExternalLink\n            key={getName(node)}\n            href={resourcePath('Node', getName(node))}\n            text={<ResourceLink linkTo={false} kind=\"Node\" name={getName(node)} />}\n          />\n        ))}\n      >\n        <Button isInline isDisabled={size === 0} variant=\"link\">\n          <Text component={TextVariants.h4}>\n            {size > 0\n              ? SCHEDULING_NODES_MATCH_BUTTON_TEXT(size)\n              : warningMessage || SCHEDULING_NO_NODES_MATCH_BUTTON_TEXT}\n          </Text>\n        </Button>\n      </Popover>\n    </Alert>\n  );\n};\n\ntype NodeCheckerProps = {\n  qualifiedNodes: NodeKind[];\n  wariningTitle?: string;\n  warningMessage?: string;\n};\n"]}]}