{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/image-search/ImageStreamDropdown.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/image-search/ImageStreamDropdown.tsx","mtime":1615298458620},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useFormikContext } from 'formik';\nimport { ResourceDropdownField } from '@console/shared';\nimport { getImageStreamResource } from '../../../utils/imagestream-utils';\nimport { ImageStreamActions } from '../import-types';\nimport { ImageStreamContext } from './ImageStreamContext';\nconst ImageStreamDropdown = () => {\n    const imgCollection = {};\n    const { values: { imageStream }, setFieldValue, initialValues, } = useFormikContext();\n    const { state, dispatch, hasImageStreams, setHasImageStreams } = React.useContext(ImageStreamContext);\n    const { accessLoading, loading, hasCreateAccess } = state;\n    const isNamespaceSelected = imageStream.namespace !== '' && !accessLoading;\n    const isStreamsAvailable = isNamespaceSelected && hasImageStreams && !loading;\n    const collectImageStreams = (namespace, resource) => {\n        if (!imgCollection[namespace]) {\n            imgCollection[namespace] = {};\n        }\n        imgCollection[namespace][resource.metadata.name] = resource;\n    };\n    const getTitle = () => {\n        return loading && !isStreamsAvailable\n            ? ''\n            : !isStreamsAvailable || !hasCreateAccess\n                ? 'No Image Stream'\n                : 'Select Image Stream';\n    };\n    const onDropdownChange = React.useCallback((img) => {\n        setFieldValue('imageStream.tag', initialValues.imageStream.tag);\n        setFieldValue('isi', initialValues.isi);\n        const image = _.get(imgCollection, [imageStream.namespace, img], {});\n        dispatch({ type: ImageStreamActions.setSelectedImageStream, value: image });\n    }, [\n        setFieldValue,\n        initialValues.imageStream.tag,\n        initialValues.isi,\n        imgCollection,\n        imageStream.namespace,\n        dispatch,\n    ]);\n    const onLoad = (imgstreams) => {\n        const imageStreamAvailable = !_.isEmpty(imgstreams);\n        setHasImageStreams(imageStreamAvailable);\n        loading &&\n            isNamespaceSelected &&\n            dispatch({ type: ImageStreamActions.setLoading, value: false });\n    };\n    const resourceFilter = (resource) => {\n        const { metadata: { namespace }, } = resource;\n        collectImageStreams(namespace, resource);\n        return namespace === imageStream.namespace;\n    };\n    React.useEffect(() => {\n        imageStream.image && onDropdownChange(imageStream.image);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [imageStream.image, isStreamsAvailable]);\n    React.useEffect(() => {\n        if (initialValues.imageStream.image !== imageStream.image) {\n            initialValues.imageStream.tag = '';\n        }\n    }, [imageStream.image, initialValues.imageStream.image, initialValues.imageStream.tag]);\n    return (React.createElement(ResourceDropdownField, { name: \"imageStream.image\", label: \"ImageStreams\", resources: getImageStreamResource(imageStream.namespace), dataSelector: ['metadata', 'name'], key: imageStream.namespace, fullWidth: true, required: true, title: imageStream.image || getTitle(), disabled: !hasCreateAccess || !isStreamsAvailable, onChange: onDropdownChange, onLoad: onLoad, resourceFilter: resourceFilter }));\n};\nexport default ImageStreamDropdown;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/image-search/ImageStreamDropdown.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/image-search/ImageStreamDropdown.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { ResourceDropdownField } from '@console/shared';\nimport { getImageStreamResource } from '../../../utils/imagestream-utils';\nimport { ImageStreamActions } from '../import-types';\nimport { ImageStreamContext } from './ImageStreamContext';\n\nconst ImageStreamDropdown: React.FC = () => {\n  const imgCollection = {};\n\n  const {\n    values: { imageStream },\n    setFieldValue,\n    initialValues,\n  } = useFormikContext<FormikValues>();\n  const { state, dispatch, hasImageStreams, setHasImageStreams } = React.useContext(\n    ImageStreamContext,\n  );\n  const { accessLoading, loading, hasCreateAccess } = state;\n  const isNamespaceSelected = imageStream.namespace !== '' && !accessLoading;\n  const isStreamsAvailable = isNamespaceSelected && hasImageStreams && !loading;\n  const collectImageStreams = (namespace: string, resource: K8sResourceKind): void => {\n    if (!imgCollection[namespace]) {\n      imgCollection[namespace] = {};\n    }\n    imgCollection[namespace][resource.metadata.name] = resource;\n  };\n  const getTitle = () => {\n    return loading && !isStreamsAvailable\n      ? ''\n      : !isStreamsAvailable || !hasCreateAccess\n      ? 'No Image Stream'\n      : 'Select Image Stream';\n  };\n\n  const onDropdownChange = React.useCallback(\n    (img: string) => {\n      setFieldValue('imageStream.tag', initialValues.imageStream.tag);\n      setFieldValue('isi', initialValues.isi);\n      const image = _.get(imgCollection, [imageStream.namespace, img], {});\n      dispatch({ type: ImageStreamActions.setSelectedImageStream, value: image });\n    },\n    [\n      setFieldValue,\n      initialValues.imageStream.tag,\n      initialValues.isi,\n      imgCollection,\n      imageStream.namespace,\n      dispatch,\n    ],\n  );\n  const onLoad = (imgstreams) => {\n    const imageStreamAvailable = !_.isEmpty(imgstreams);\n    setHasImageStreams(imageStreamAvailable);\n    loading &&\n      isNamespaceSelected &&\n      dispatch({ type: ImageStreamActions.setLoading, value: false });\n  };\n  const resourceFilter = (resource: K8sResourceKind) => {\n    const {\n      metadata: { namespace },\n    } = resource;\n    collectImageStreams(namespace, resource);\n    return namespace === imageStream.namespace;\n  };\n\n  React.useEffect(() => {\n    imageStream.image && onDropdownChange(imageStream.image);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [imageStream.image, isStreamsAvailable]);\n\n  React.useEffect(() => {\n    if (initialValues.imageStream.image !== imageStream.image) {\n      initialValues.imageStream.tag = '';\n    }\n  }, [imageStream.image, initialValues.imageStream.image, initialValues.imageStream.tag]);\n\n  return (\n    <ResourceDropdownField\n      name=\"imageStream.image\"\n      label=\"ImageStreams\"\n      resources={getImageStreamResource(imageStream.namespace)}\n      dataSelector={['metadata', 'name']}\n      key={imageStream.namespace}\n      fullWidth\n      required\n      title={imageStream.image || getTitle()}\n      disabled={!hasCreateAccess || !isStreamsAvailable}\n      onChange={onDropdownChange}\n      onLoad={onLoad}\n      resourceFilter={resourceFilter}\n    />\n  );\n};\n\nexport default ImageStreamDropdown;\n"]}]}