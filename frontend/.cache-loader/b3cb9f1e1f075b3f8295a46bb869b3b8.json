{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelineruns/detail-page-tabs/PipelineRunLogs.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelineruns/detail-page-tabs/PipelineRunLogs.tsx","mtime":1615298458620},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport { Nav, NavItem, NavList } from '@patternfly/react-core';\nimport { StatusIcon } from '@console/shared';\nimport { Firehose, resourcePathFromModel } from '@console/internal/components/utils';\nimport { pipelineRunFilterReducer } from '../../../utils/pipeline-filter-reducer';\nimport { PipelineRunModel } from '../../../../../../../frontend/public/models/index';\nimport LogsWrapperComponent from '../logs/LogsWrapperComponent';\nimport { getDownloadAllLogsCallback } from '../logs/logs-utils';\nimport './PipelineRunLogs.scss';\nclass PipelineRunLogs extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getActiveTaskRun = (taskRuns, activeTask) => activeTask\n            ? taskRuns.find((taskRun) => taskRun.includes(activeTask))\n            : taskRuns[taskRuns.length - 1];\n        this.getSortedTaskRun = (taskRunFromYaml) => {\n            const taskRuns = Object.keys(taskRunFromYaml).sort((a, b) => {\n                var _a, _b;\n                if (_.get(taskRunFromYaml, [a, 'status', 'completionTime'], false)) {\n                    return taskRunFromYaml[b].status.completionTime &&\n                        new Date(taskRunFromYaml[a].status.completionTime) >\n                            new Date(taskRunFromYaml[b].status.completionTime)\n                        ? 1\n                        : -1;\n                }\n                return taskRunFromYaml[b].status.completionTime ||\n                    new Date((_a = taskRunFromYaml[a].status) === null || _a === void 0 ? void 0 : _a.startTime) >\n                        new Date((_b = taskRunFromYaml[b].status) === null || _b === void 0 ? void 0 : _b.startTime)\n                    ? 1\n                    : -1;\n            });\n            return taskRuns;\n        };\n        this.onNavSelect = (item) => {\n            this.setState({\n                activeItem: item.itemId,\n                navUntouched: false,\n            });\n        };\n        this.state = { activeItem: null, navUntouched: true };\n    }\n    componentDidMount() {\n        const { obj, activeTask } = this.props;\n        const taskRunFromYaml = _.merge(_.get(obj, ['status', 'taskRuns'], {}), _.get(obj, ['status', 'runs'], {}));\n        const taskRuns = this.getSortedTaskRun(taskRunFromYaml);\n        const activeItem = this.getActiveTaskRun(taskRuns, activeTask);\n        this.setState({ activeItem });\n    }\n    UNSAFE_componentWillReceiveProps(nextProps) {\n        if (this.props.obj !== nextProps.obj) {\n            const { obj, activeTask } = this.props;\n            const taskRunFromYaml = _.merge(_.get(obj, ['status', 'taskRuns'], {}), _.get(obj, ['status', 'runs'], {}));\n            const taskRuns = this.getSortedTaskRun(taskRunFromYaml);\n            const activeItem = this.getActiveTaskRun(taskRuns, activeTask);\n            this.state.navUntouched && this.setState({ activeItem });\n        }\n    }\n    render() {\n        var _a, _b;\n        const { obj } = this.props;\n        const { activeItem } = this.state;\n        const taskRunFromYaml = _.merge(_.get(obj, ['status', 'taskRuns'], {}), _.get(obj, ['status', 'runs'], {}));\n        const taskRuns = this.getSortedTaskRun(taskRunFromYaml);\n        const taskCount = taskRuns.length;\n        const downloadAllCallback = taskCount > 1\n            ? getDownloadAllLogsCallback(taskRuns, taskRunFromYaml, (_a = obj.metadata) === null || _a === void 0 ? void 0 : _a.namespace, (_b = obj.metadata) === null || _b === void 0 ? void 0 : _b.name)\n            : undefined;\n        const resources = taskCount > 0 && [\n            {\n                name: _.get(taskRunFromYaml[activeItem], ['status', 'podName'], ''),\n                kind: 'Pod',\n                namespace: obj.metadata.namespace,\n                prop: `obj`,\n                isList: false,\n            },\n        ];\n        const path = `${resourcePathFromModel(PipelineRunModel, obj.metadata.name, obj.metadata.namespace)}/logs/`;\n        return (React.createElement(\"div\", { className: \"odc-pipeline-run-logs\" },\n            React.createElement(\"div\", { className: \"odc-pipeline-run-logs__tasklist\", \"data-test-id\": \"logs-tasklist\" }, taskCount > 0 ? (React.createElement(Nav, { onSelect: this.onNavSelect },\n                React.createElement(NavList, { className: \"odc-pipeline-run-logs__nav\" }, taskRuns.map((task) => {\n                    return (React.createElement(NavItem, { key: task, itemId: task, isActive: activeItem === task, className: \"odc-pipeline-run-logs__navitem\" },\n                        React.createElement(Link, { to: path + _.get(taskRunFromYaml, [task, `pipelineTaskName`], '-') },\n                            React.createElement(StatusIcon, { status: pipelineRunFilterReducer(_.merge(_.get(obj, ['status', 'taskRuns'], {}), _.get(obj, ['status', 'runs'], {}))) }),\n                            React.createElement(\"span\", { className: \"odc-pipeline-run-logs__namespan\" }, _.get(taskRunFromYaml, [task, `pipelineTaskName`], '-')))));\n                })))) : (React.createElement(\"div\", { className: \"odc-pipeline-run-logs__nav\" }, \"No Task Runs Found\"))),\n            React.createElement(\"div\", { className: \"odc-pipeline-run-logs__container\" }, activeItem && resources[0].name ? (React.createElement(Firehose, { key: activeItem, resources: resources },\n                React.createElement(LogsWrapperComponent, { taskName: _.get(taskRunFromYaml, [activeItem, 'pipelineTaskName'], '-'), downloadAllLabel: \"Download All Task Logs\", onDownloadAll: downloadAllCallback }))) : (React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { className: \"odc-pipeline-run-logs__taskName\" }, _.get(taskRunFromYaml, [activeItem, 'pipelineTaskName'], '-')),\n                React.createElement(\"div\", { className: \"odc-pipeline-run-logs__log\" },\n                    React.createElement(\"span\", { className: \"odc-pipeline-run-logs__message\" }, \"No Logs Found\")))))));\n    }\n}\nexport const PipelineRunLogsWithActiveTask = ({ obj, params, }) => {\n    const activeTask = _.get(params, 'match.params.name');\n    return React.createElement(PipelineRunLogs, { obj: obj, activeTask: activeTask });\n};\nexport default PipelineRunLogs;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelineruns/detail-page-tabs/PipelineRunLogs.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelineruns/detail-page-tabs/PipelineRunLogs.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { RouteComponentProps } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport { Nav, NavItem, NavList } from '@patternfly/react-core';\nimport { StatusIcon } from '@console/shared';\nimport { Firehose, resourcePathFromModel } from '@console/internal/components/utils';\nimport { pipelineRunFilterReducer } from '../../../utils/pipeline-filter-reducer';\nimport { PipelineRun } from '../../../utils/pipeline-augment';\nimport { PipelineRunModel } from '../../../../../../../frontend/public/models/index';\nimport LogsWrapperComponent from '../logs/LogsWrapperComponent';\nimport { getDownloadAllLogsCallback } from '../logs/logs-utils';\nimport './PipelineRunLogs.scss';\n\ninterface PipelineRunLogsProps {\n  obj: PipelineRun;\n  activeTask?: string;\n}\ninterface PipelineRunLogsState {\n  activeItem: string;\n  navUntouched: boolean;\n}\nclass PipelineRunLogs extends React.Component<PipelineRunLogsProps, PipelineRunLogsState> {\n  constructor(props) {\n    super(props);\n    this.state = { activeItem: null, navUntouched: true };\n  }\n\n  componentDidMount() {\n    const { obj, activeTask } = this.props;\n    const taskRunFromYaml = _.merge(_.get(obj, ['status', 'taskRuns'], {}), _.get(obj, ['status', 'runs'], {}));\n    const taskRuns = this.getSortedTaskRun(taskRunFromYaml);\n    const activeItem = this.getActiveTaskRun(taskRuns, activeTask);\n    this.setState({ activeItem });\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    if (this.props.obj !== nextProps.obj) {\n      const { obj, activeTask } = this.props;\n      const taskRunFromYaml = _.merge(_.get(obj, ['status', 'taskRuns'], {}), _.get(obj, ['status', 'runs'], {}));\n      const taskRuns = this.getSortedTaskRun(taskRunFromYaml);\n      const activeItem = this.getActiveTaskRun(taskRuns, activeTask);\n      this.state.navUntouched && this.setState({ activeItem });\n    }\n  }\n\n  getActiveTaskRun = (taskRuns: string[], activeTask: string): string =>\n    activeTask\n      ? taskRuns.find((taskRun) => taskRun.includes(activeTask))\n      : taskRuns[taskRuns.length - 1];\n\n  getSortedTaskRun = (taskRunFromYaml) => {\n    const taskRuns = Object.keys(taskRunFromYaml).sort((a, b) => {\n      if (_.get(taskRunFromYaml, [a, 'status', 'completionTime'], false)) {\n        return taskRunFromYaml[b].status.completionTime &&\n          new Date(taskRunFromYaml[a].status.completionTime) >\n            new Date(taskRunFromYaml[b].status.completionTime)\n          ? 1\n          : -1;\n      }\n      return taskRunFromYaml[b].status.completionTime ||\n        new Date(taskRunFromYaml[a].status?.startTime) >\n          new Date(taskRunFromYaml[b].status?.startTime)\n        ? 1\n        : -1;\n    });\n    return taskRuns;\n  };\n\n  onNavSelect = (item) => {\n    this.setState({\n      activeItem: item.itemId,\n      navUntouched: false,\n    });\n  };\n\n  render() {\n    const { obj } = this.props;\n    const { activeItem } = this.state;\n    const taskRunFromYaml = _.merge(_.get(obj, ['status', 'taskRuns'], {}), _.get(obj, ['status', 'runs'], {}));\n    const taskRuns = this.getSortedTaskRun(taskRunFromYaml);\n\n    const taskCount = taskRuns.length;\n    const downloadAllCallback =\n      taskCount > 1\n        ? getDownloadAllLogsCallback(\n            taskRuns,\n            taskRunFromYaml,\n            obj.metadata?.namespace,\n            obj.metadata?.name,\n          )\n        : undefined;\n    const resources = taskCount > 0 && [\n      {\n        name: _.get(taskRunFromYaml[activeItem], ['status', 'podName'], ''),\n        kind: 'Pod',\n        namespace: obj.metadata.namespace,\n        prop: `obj`,\n        isList: false,\n      },\n    ];\n    const path = `${resourcePathFromModel(\n      PipelineRunModel,\n      obj.metadata.name,\n      obj.metadata.namespace,\n    )}/logs/`;\n    return (\n      <div className=\"odc-pipeline-run-logs\">\n        <div className=\"odc-pipeline-run-logs__tasklist\" data-test-id=\"logs-tasklist\">\n          {taskCount > 0 ? (\n            <Nav onSelect={this.onNavSelect}>\n              <NavList className=\"odc-pipeline-run-logs__nav\">\n                {taskRuns.map((task) => {\n                  return (\n                    <NavItem\n                      key={task}\n                      itemId={task}\n                      isActive={activeItem === task}\n                      className=\"odc-pipeline-run-logs__navitem\"\n                    >\n                      <Link to={path + _.get(taskRunFromYaml, [task, `pipelineTaskName`], '-')}>\n                        <StatusIcon\n                          status={pipelineRunFilterReducer(\n                            _.merge(_.get(obj, ['status', 'taskRuns'], {}), _.get(obj, ['status', 'runs'], {})),\n                          )}\n                        />\n                        <span className=\"odc-pipeline-run-logs__namespan\">\n                          {_.get(taskRunFromYaml, [task, `pipelineTaskName`], '-')}\n                        </span>\n                      </Link>\n                    </NavItem>\n                  );\n                })}\n              </NavList>\n            </Nav>\n          ) : (\n            <div className=\"odc-pipeline-run-logs__nav\">No Task Runs Found</div>\n          )}\n        </div>\n        <div className=\"odc-pipeline-run-logs__container\">\n          {activeItem && resources[0].name ? (\n            <Firehose key={activeItem} resources={resources}>\n              <LogsWrapperComponent\n                taskName={_.get(taskRunFromYaml, [activeItem, 'pipelineTaskName'], '-')}\n                downloadAllLabel=\"Download All Task Logs\"\n                onDownloadAll={downloadAllCallback}\n              />\n            </Firehose>\n          ) : (\n            <>\n              <div className=\"odc-pipeline-run-logs__taskName\">\n                {_.get(taskRunFromYaml, [activeItem, 'pipelineTaskName'], '-')}\n              </div>\n              <div className=\"odc-pipeline-run-logs__log\">\n                <span className=\"odc-pipeline-run-logs__message\">No Logs Found</span>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\ntype PipelineRunLogsWithActiveTaskProps = {\n  obj: PipelineRun;\n  params?: RouteComponentProps;\n};\n\nexport const PipelineRunLogsWithActiveTask: React.FC<PipelineRunLogsWithActiveTaskProps> = ({\n  obj,\n  params,\n}) => {\n  const activeTask = _.get(params, 'match.params.name');\n  return <PipelineRunLogs obj={obj} activeTask={activeTask} />;\n};\n\nexport default PipelineRunLogs;\n"]}]}