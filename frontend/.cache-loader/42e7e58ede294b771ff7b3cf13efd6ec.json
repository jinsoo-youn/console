{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/dashboards-page/overview-dashboard/inventory.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/dashboards-page/overview-dashboard/inventory.tsx","mtime":1616735742420},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport * as React from 'react';\nimport { OffIcon } from '@patternfly/react-icons';\nimport { getNamespace } from '@console/shared/src/selectors/common';\nimport { createBasicLookup } from '@console/shared/src/utils/utils';\nimport { InventoryStatusGroup } from '@console/shared/src/components/dashboard/inventory-card/status-group';\nimport { getVMStatus } from '../../../statuses/vm/vm-status';\nimport { VMStatusSimpleLabel } from '../../../constants/vm/vm-status';\nimport { StatusSimpleLabel } from '../../../constants/status-constants';\nimport { VMImportWrappper } from '../../../k8s/wrapper/vm-import/vm-import-wrapper';\nimport { getVMImportStatus } from '../../../statuses/vm-import/vm-import-status';\nimport { isVM, isVMImport } from '../../../selectors/check-type';\nimport { getBasicID } from '../../../utils';\nimport './inventory.scss';\nexport const getVMStatusGroups = (vms, { vmis, pods, migrations, dataVolumes, vmImports, }) => {\n    const groups = {\n        [InventoryStatusGroup.NOT_MAPPED]: {\n            statusIDs: [VMStatusSimpleLabel.Running],\n            count: 0,\n            filterType: 'vm-status',\n        },\n        [InventoryStatusGroup.PROGRESS]: {\n            statusIDs: [\n                StatusSimpleLabel.Importing,\n                VMStatusSimpleLabel.Starting,\n                VMStatusSimpleLabel.Migrating,\n                VMStatusSimpleLabel.Stopping,\n                StatusSimpleLabel.Pending,\n            ],\n            count: 0,\n            filterType: 'vm-status',\n        },\n        [InventoryStatusGroup.ERROR]: {\n            statusIDs: [StatusSimpleLabel.Error],\n            count: 0,\n            filterType: 'vm-status',\n        },\n        [InventoryStatusGroup.WARN]: {\n            statusIDs: [VMStatusSimpleLabel.Paused],\n            count: 0,\n            filterType: 'vm-status',\n        },\n        [InventoryStatusGroup.UNKNOWN]: {\n            statusIDs: [StatusSimpleLabel.Other],\n            count: 0,\n            filterType: 'vm-status',\n        },\n        'vm-off': {\n            statusIDs: [VMStatusSimpleLabel.Off],\n            count: 0,\n            filterType: 'vm-status',\n        },\n    };\n    const vmisLookup = createBasicLookup(vmis, getBasicID);\n    const virtualMachines = _.unionBy(\n    // order of arrays designates the priority\n    vms, vmis, vmImports, (entity) => isVMImport(entity)\n        ? `${getNamespace(entity)}-${new VMImportWrappper(entity).getResolvedVMTargetName()}`\n        : getBasicID(entity));\n    virtualMachines\n        .map((obj) => {\n        if (isVMImport(obj)) {\n            const statusBundle = getVMImportStatus({\n                vmImport: obj,\n            });\n            if (statusBundle.status.isCompleted()) {\n                return null;\n            }\n            return statusBundle.status.getSimpleLabel();\n        }\n        const lookupID = getBasicID(obj);\n        let vm = null;\n        let vmi;\n        if (isVM(obj)) {\n            vm = obj;\n            vmi = vmisLookup[lookupID];\n        }\n        else {\n            vmi = obj;\n        }\n        return getVMStatus({\n            vm,\n            vmi,\n            pods,\n            migrations,\n            dataVolumes,\n            vmImports,\n        }).status.getSimpleLabel();\n    })\n        .filter((simpleStatus) => simpleStatus)\n        .forEach((simpleStatus) => {\n        const group = Object.keys(groups).find((key) => groups[key].statusIDs.includes(simpleStatus)) ||\n            InventoryStatusGroup.UNKNOWN;\n        groups[group].count++;\n    });\n    return groups;\n};\nexport const VMOffGroupIcon = () => (React.createElement(OffIcon, { className: \"kubevirt-inventory-card__status-icon--off\" }));\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/dashboards-page/overview-dashboard/inventory.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/dashboards-page/overview-dashboard/inventory.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport * as React from 'react';\nimport { OffIcon } from '@patternfly/react-icons';\nimport { getNamespace } from '@console/shared/src/selectors/common';\nimport { createBasicLookup } from '@console/shared/src/utils/utils';\nimport { K8sResourceKind, PodKind } from '@console/internal/module/k8s';\nimport { StatusGroupMapper } from '@console/shared/src/components/dashboard/inventory-card/InventoryItem';\nimport { InventoryStatusGroup } from '@console/shared/src/components/dashboard/inventory-card/status-group';\nimport { getVMStatus } from '../../../statuses/vm/vm-status';\nimport { VMImportKind } from '../../../types/vm-import/ovirt/vm-import';\nimport { VMIKind, VMKind } from '../../../types';\nimport { VMStatusSimpleLabel } from '../../../constants/vm/vm-status';\nimport { StatusSimpleLabel } from '../../../constants/status-constants';\nimport { VMImportWrappper } from '../../../k8s/wrapper/vm-import/vm-import-wrapper';\nimport { getVMImportStatus } from '../../../statuses/vm-import/vm-import-status';\nimport { V1alpha1DataVolume } from '../../../types/vm/disk/V1alpha1DataVolume';\nimport { isVM, isVMImport } from '../../../selectors/check-type';\nimport { getBasicID } from '../../../utils';\n\nimport './inventory.scss';\n\nexport const getVMStatusGroups: StatusGroupMapper = (\n  vms,\n  {\n    vmis,\n    pods,\n    migrations,\n    dataVolumes,\n    vmImports,\n  }: {\n    vmis?: VMIKind[];\n    pods?: PodKind[];\n    dataVolumes?: V1alpha1DataVolume[];\n    migrations?: K8sResourceKind[];\n    vmImports?: VMImportKind[];\n  },\n) => {\n  const groups = {\n    [InventoryStatusGroup.NOT_MAPPED]: {\n      statusIDs: [VMStatusSimpleLabel.Running],\n      count: 0,\n      filterType: 'vm-status',\n    },\n    [InventoryStatusGroup.PROGRESS]: {\n      statusIDs: [\n        StatusSimpleLabel.Importing,\n        VMStatusSimpleLabel.Starting,\n        VMStatusSimpleLabel.Migrating,\n        VMStatusSimpleLabel.Stopping,\n        StatusSimpleLabel.Pending,\n      ],\n      count: 0,\n      filterType: 'vm-status',\n    },\n    [InventoryStatusGroup.ERROR]: {\n      statusIDs: [StatusSimpleLabel.Error],\n      count: 0,\n      filterType: 'vm-status',\n    },\n    [InventoryStatusGroup.WARN]: {\n      statusIDs: [VMStatusSimpleLabel.Paused],\n      count: 0,\n      filterType: 'vm-status',\n    },\n    [InventoryStatusGroup.UNKNOWN]: {\n      statusIDs: [StatusSimpleLabel.Other],\n      count: 0,\n      filterType: 'vm-status',\n    },\n    'vm-off': {\n      statusIDs: [VMStatusSimpleLabel.Off],\n      count: 0,\n      filterType: 'vm-status',\n    },\n  };\n\n  const vmisLookup = createBasicLookup<VMIKind>(vmis, getBasicID);\n\n  const virtualMachines = _.unionBy(\n    // order of arrays designates the priority\n    vms,\n    vmis,\n    vmImports,\n    (entity: VMKind | VMIKind | VMImportKind) =>\n      isVMImport(entity)\n        ? `${getNamespace(entity)}-${new VMImportWrappper(entity).getResolvedVMTargetName()}`\n        : getBasicID(entity),\n  );\n\n  virtualMachines\n    .map((obj: VMKind | VMIKind | VMImportKind) => {\n      if (isVMImport(obj)) {\n        const statusBundle = getVMImportStatus({\n          vmImport: obj,\n        });\n        if (statusBundle.status.isCompleted()) {\n          return null;\n        }\n        return statusBundle.status.getSimpleLabel();\n      }\n      const lookupID = getBasicID(obj);\n      let vm = null;\n      let vmi;\n\n      if (isVM(obj)) {\n        vm = obj;\n        vmi = vmisLookup[lookupID];\n      } else {\n        vmi = obj;\n      }\n      return getVMStatus({\n        vm,\n        vmi,\n        pods,\n        migrations,\n        dataVolumes,\n        vmImports,\n      }).status.getSimpleLabel();\n    })\n    .filter((simpleStatus) => simpleStatus)\n    .forEach((simpleStatus) => {\n      const group =\n        Object.keys(groups).find((key) => groups[key].statusIDs.includes(simpleStatus)) ||\n        InventoryStatusGroup.UNKNOWN;\n      groups[group].count++;\n    });\n\n  return groups;\n};\n\nexport const VMOffGroupIcon: React.FC<{}> = () => (\n  <OffIcon className=\"kubevirt-inventory-card__status-icon--off\" />\n);\n"]}]}