{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-plugin-sdk/src/store.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-plugin-sdk/src/store.ts","mtime":1615298458600},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { ExtensionRegistry } from './registry';\nexport const sanitizeExtension = (e) => {\n    e.flags = e.flags || {};\n    e.flags.required = _.uniq(e.flags.required || []);\n    e.flags.disallowed = _.uniq(e.flags.disallowed || []);\n    return e;\n};\nexport const augmentExtension = (e, p) => {\n    return Object.assign(e, { plugin: p.name });\n};\nexport const isExtensionInUse = (e, flags) => e.flags.required.every((f) => flags[f] === true) &&\n    e.flags.disallowed.every((f) => flags[f] === false);\nexport const getGatingFlagNames = (extensions) => _.uniq([\n    ..._.flatMap(extensions.map((e) => e.flags.required)),\n    ..._.flatMap(extensions.map((e) => e.flags.disallowed)),\n]);\n/**\n * Provides access to Console plugin data.\n *\n * In development, this object is exposed as `window.pluginStore` for easier debugging.\n *\n * _For now, the runtime list of extensions is assumed to be immutable._\n */\nexport class PluginStore {\n    constructor(plugins) {\n        this.extensions = _.flatMap(plugins.map((p) => p.extensions.map((e) => Object.freeze(augmentExtension(sanitizeExtension(Object.assign({}, e)), p)))));\n        this.registry = new ExtensionRegistry(plugins);\n    }\n    getAllExtensions() {\n        return this.extensions;\n    }\n}\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-plugin-sdk/src/store.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-plugin-sdk/src/store.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAE5B,OAAO,EAAE,iBAAiB,EAAE,MAAM,YAAY,CAAC;AAE/C,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,CAAY,EAAa,EAAE;IAC3D,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,IAAI,EAAE,CAAC;IACxB,CAAC,CAAC,KAAK,CAAC,QAAQ,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,IAAI,EAAE,CAAC,CAAC;IAClD,CAAC,CAAC,KAAK,CAAC,UAAU,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,IAAI,EAAE,CAAC,CAAC;IACtD,OAAO,CAAC,CAAC;AACX,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,CAAY,EAAE,CAAe,EAAyB,EAAE;IACvF,OAAO,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;AAC9C,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,CAAY,EAAE,KAAkB,EAAW,EAAE,CAC5E,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC;IAChD,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC;AAEtD,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,UAAuB,EAAY,EAAE,CACtE,CAAC,CAAC,IAAI,CAAC;IACL,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC;IACrD,GAAG,CAAC,CAAC,OAAO,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC;CACxD,CAAC,CAAC;AAEL;;;;;;GAMG;AACH,MAAM,OAAO,WAAW;IAKtB,YAAmB,OAAuB;QACxC,IAAI,CAAC,UAAU,GAAG,CAAC,CAAC,OAAO,CACzB,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAChB,CAAC,CAAC,UAAU,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC,iBAAiB,mBAAM,CAAC,EAAG,EAAE,CAAC,CAAC,CAAC,CAAC,CACzF,CACF,CAAC;QACF,IAAI,CAAC,QAAQ,GAAG,IAAI,iBAAiB,CAAC,OAAO,CAAC,CAAC;IACjD,CAAC;IAEM,gBAAgB;QACrB,OAAO,IAAI,CAAC,UAAU,CAAC;IACzB,CAAC;CACF","sourcesContent":["import * as _ from 'lodash';\nimport { Extension, ExtensionWithMetadata, ActivePlugin } from './typings';\nimport { ExtensionRegistry } from './registry';\n\nexport const sanitizeExtension = (e: Extension): Extension => {\n  e.flags = e.flags || {};\n  e.flags.required = _.uniq(e.flags.required || []);\n  e.flags.disallowed = _.uniq(e.flags.disallowed || []);\n  return e;\n};\n\nexport const augmentExtension = (e: Extension, p: ActivePlugin): ExtensionWithMetadata => {\n  return Object.assign(e, { plugin: p.name });\n};\n\nexport const isExtensionInUse = (e: Extension, flags: FlagsObject): boolean =>\n  e.flags.required.every((f) => flags[f] === true) &&\n  e.flags.disallowed.every((f) => flags[f] === false);\n\nexport const getGatingFlagNames = (extensions: Extension[]): string[] =>\n  _.uniq([\n    ..._.flatMap(extensions.map((e) => e.flags.required)),\n    ..._.flatMap(extensions.map((e) => e.flags.disallowed)),\n  ]);\n\n/**\n * Provides access to Console plugin data.\n *\n * In development, this object is exposed as `window.pluginStore` for easier debugging.\n *\n * _For now, the runtime list of extensions is assumed to be immutable._\n */\nexport class PluginStore {\n  private readonly extensions: ExtensionWithMetadata[];\n\n  public readonly registry: ExtensionRegistry; // TODO(vojtech): legacy, remove\n\n  public constructor(plugins: ActivePlugin[]) {\n    this.extensions = _.flatMap(\n      plugins.map((p) =>\n        p.extensions.map((e) => Object.freeze(augmentExtension(sanitizeExtension({ ...e }), p))),\n      ),\n    );\n    this.registry = new ExtensionRegistry(plugins);\n  }\n\n  public getAllExtensions(): readonly Extension[] {\n    return this.extensions;\n  }\n}\n\ntype FlagsObject = { [key: string]: boolean };\n"]}]}