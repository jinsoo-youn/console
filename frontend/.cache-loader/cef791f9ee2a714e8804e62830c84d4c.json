{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/cloud-shell/Terminal.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/cloud-shell/Terminal.tsx","mtime":1615298458590},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { Terminal as XTerminal } from 'xterm';\nimport { fit } from 'xterm/lib/addons/fit/fit';\nimport './Terminal.scss';\nconst terminalOptions = {\n    fontFamily: 'monospace',\n    fontSize: 16,\n    cursorBlink: false,\n    cols: 80,\n    rows: 25,\n};\nconst Terminal = React.forwardRef(({ onData }, ref) => {\n    const terminal = React.useRef();\n    const terminalRef = React.useRef();\n    React.useEffect(() => {\n        const term = new XTerminal(terminalOptions);\n        term.open(terminalRef.current);\n        term.focus();\n        const resizeObserver = new ResizeObserver(() => {\n            window.requestAnimationFrame(() => fit(term));\n        });\n        resizeObserver.observe(terminalRef.current);\n        if (terminal.current !== term) {\n            terminal.current && terminal.current.destroy();\n            terminal.current = term;\n        }\n        return () => {\n            term.destroy();\n            resizeObserver.disconnect();\n        };\n    }, []);\n    React.useEffect(() => {\n        const term = terminal.current;\n        term.on('data', onData);\n        return () => {\n            term.off('data', onData);\n        };\n    }, [onData]);\n    React.useImperativeHandle(ref, () => ({\n        focus: () => {\n            terminal.current && terminal.current.focus();\n        },\n        reset: () => {\n            if (!terminal.current)\n                return;\n            terminal.current.reset();\n            terminal.current.clear();\n            terminal.current.setOption('disableStdin', false);\n        },\n        onDataReceived: (data) => {\n            terminal.current && terminal.current.write(data);\n        },\n        onConnectionClosed: (msg) => {\n            if (!terminal.current)\n                return;\n            terminal.current.write(`\\x1b[31m${msg || 'disconnected'}\\x1b[m\\r\\n`);\n            terminal.current.setOption('disableStdin', true);\n        },\n    }));\n    return React.createElement(\"div\", { className: \"co-terminal\", ref: terminalRef });\n});\nexport default Terminal;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/cloud-shell/Terminal.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/cloud-shell/Terminal.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Terminal as XTerminal, ITerminalOptions } from 'xterm';\nimport { fit } from 'xterm/lib/addons/fit/fit';\n\nimport './Terminal.scss';\n\nconst terminalOptions: ITerminalOptions = {\n  fontFamily: 'monospace',\n  fontSize: 16,\n  cursorBlink: false,\n  cols: 80,\n  rows: 25,\n};\n\ntype TerminalProps = {\n  onData: (data: string) => void;\n};\n\nexport type ImperativeTerminalType = {\n  focus: () => void;\n  reset: () => void;\n  onDataReceived: (data) => void;\n  onConnectionClosed: (msg: string) => void;\n};\n\nconst Terminal = React.forwardRef<ImperativeTerminalType, TerminalProps>(({ onData }, ref) => {\n  const terminal = React.useRef<XTerminal>();\n  const terminalRef = React.useRef<HTMLDivElement>();\n\n  React.useEffect(() => {\n    const term: XTerminal = new XTerminal(terminalOptions);\n    term.open(terminalRef.current);\n    term.focus();\n\n    const resizeObserver: ResizeObserver = new ResizeObserver(() => {\n      window.requestAnimationFrame(() => fit(term));\n    });\n\n    resizeObserver.observe(terminalRef.current);\n\n    if (terminal.current !== term) {\n      terminal.current && terminal.current.destroy();\n      terminal.current = term;\n    }\n\n    return () => {\n      term.destroy();\n      resizeObserver.disconnect();\n    };\n  }, []);\n\n  React.useEffect(() => {\n    const term = terminal.current;\n    term.on('data', onData);\n\n    return () => {\n      term.off('data', onData);\n    };\n  }, [onData]);\n\n  React.useImperativeHandle(ref, () => ({\n    focus: () => {\n      terminal.current && terminal.current.focus();\n    },\n    reset: () => {\n      if (!terminal.current) return;\n      terminal.current.reset();\n      terminal.current.clear();\n      terminal.current.setOption('disableStdin', false);\n    },\n    onDataReceived: (data) => {\n      terminal.current && terminal.current.write(data);\n    },\n    onConnectionClosed: (msg) => {\n      if (!terminal.current) return;\n      terminal.current.write(`\\x1b[31m${msg || 'disconnected'}\\x1b[m\\r\\n`);\n      terminal.current.setOption('disableStdin', true);\n    },\n  }));\n\n  return <div className=\"co-terminal\" ref={terminalRef} />;\n});\n\nexport default Terminal;\n"]}]}