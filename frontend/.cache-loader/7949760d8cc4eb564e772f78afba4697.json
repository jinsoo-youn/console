{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/utils/resource-overview-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/utils/resource-overview-utils.ts","mtime":1616735742410},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { referenceFor, referenceForModel } from '@console/internal/module/k8s';\nimport { ServiceModel as knServiceModel, RevisionModel } from '../models';\n/**\n * Return the knative routes list items.\n * @param route\n * @param resource | resource can be a knative service or revision;\n */\nexport const getKnativeRoutesLinks = (route, resource) => {\n    var _a;\n    if (!route.status) {\n        return [];\n    }\n    const { metadata: { name, namespace }, status: { url = '', traffic: trafficData = [{ revisionName: resource.metadata.name, url: (_a = route === null || route === void 0 ? void 0 : route.status) === null || _a === void 0 ? void 0 : _a.url }], }, } = route;\n    const filterTrafficBasedOnResource = (tr) => referenceFor(resource) === referenceForModel(knServiceModel) ||\n        (referenceFor(resource) === referenceForModel(RevisionModel) &&\n            tr.revisionName === resource.metadata.name);\n    return trafficData\n        .filter(filterTrafficBasedOnResource)\n        .map((traffic, index) => ({\n        uid: `${traffic.revisionName}-${(traffic === null || traffic === void 0 ? void 0 : traffic.tag) ? traffic === null || traffic === void 0 ? void 0 : traffic.tag : 'tag'}-${index}`,\n        url: (traffic === null || traffic === void 0 ? void 0 : traffic.url) || url,\n        percent: traffic.percent ? `${traffic.percent}%` : '',\n        name,\n        namespace,\n    }));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/utils/resource-overview-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/utils/resource-overview-utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAmB,YAAY,EAAE,iBAAiB,EAAE,MAAM,8BAA8B,CAAC;AAChG,OAAO,EAAE,YAAY,IAAI,cAAc,EAAE,aAAa,EAAE,MAAM,WAAW,CAAC;AAE1E;;;;GAIG;AACH,MAAM,CAAC,MAAM,qBAAqB,GAAG,CACnC,KAAsB,EACtB,QAAyB,EACC,EAAE;;IAC5B,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE;QACjB,OAAO,EAAE,CAAC;KACX;IACD,MAAM,EACJ,QAAQ,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,EAC7B,MAAM,EAAE,EACN,GAAG,GAAG,EAAE,EACR,OAAO,EAAE,WAAW,GAAG,CAAC,EAAE,YAAY,EAAE,QAAQ,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAG,QAAE,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,MAAM,0CAAE,GAAG,EAAE,CAAC,GAC3F,GACF,GAAG,KAAK,CAAC;IACV,MAAM,4BAA4B,GAAG,CAAC,EAAW,EAAE,EAAE,CACnD,YAAY,CAAC,QAAQ,CAAC,KAAK,iBAAiB,CAAC,cAAc,CAAC;QAC5D,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,iBAAiB,CAAC,aAAa,CAAC;YAC1D,EAAE,CAAC,YAAY,KAAK,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAChD,OAAO,WAAW;SACf,MAAM,CAAC,4BAA4B,CAAC;SACpC,GAAG,CAAC,CAAC,OAAgB,EAAE,KAAa,EAAE,EAAE,CAAC,CAAC;QACzC,GAAG,EAAE,GAAG,OAAO,CAAC,YAAY,IAAI,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,GAAG,EAAC,CAAC,CAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,GAAG,CAAC,CAAC,CAAC,KAAK,IAAI,KAAK,EAAE;QAC9E,GAAG,EAAE,CAAA,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,GAAG,KAAI,GAAG;QACxB,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,GAAG,OAAO,CAAC,OAAO,GAAG,CAAC,CAAC,CAAC,EAAE;QACrD,IAAI;QACJ,SAAS;KACV,CAAC,CAAC,CAAC;AACR,CAAC,CAAC","sourcesContent":["import { K8sResourceKind, referenceFor, referenceForModel } from '@console/internal/module/k8s';\nimport { ServiceModel as knServiceModel, RevisionModel } from '../models';\nimport { Traffic, RoutesOverviewListItem } from '../types';\n/**\n * Return the knative routes list items.\n * @param route\n * @param resource | resource can be a knative service or revision;\n */\nexport const getKnativeRoutesLinks = (\n  route: K8sResourceKind,\n  resource: K8sResourceKind,\n): RoutesOverviewListItem[] => {\n  if (!route.status) {\n    return [];\n  }\n  const {\n    metadata: { name, namespace },\n    status: {\n      url = '',\n      traffic: trafficData = [{ revisionName: resource.metadata.name, url: route?.status?.url }],\n    },\n  } = route;\n  const filterTrafficBasedOnResource = (tr: Traffic) =>\n    referenceFor(resource) === referenceForModel(knServiceModel) ||\n    (referenceFor(resource) === referenceForModel(RevisionModel) &&\n      tr.revisionName === resource.metadata.name);\n  return trafficData\n    .filter(filterTrafficBasedOnResource)\n    .map((traffic: Traffic, index: number) => ({\n      uid: `${traffic.revisionName}-${traffic?.tag ? traffic?.tag : 'tag'}-${index}`,\n      url: traffic?.url || url,\n      percent: traffic.percent ? `${traffic.percent}%` : '',\n      name,\n      namespace,\n    }));\n};\n"]}]}