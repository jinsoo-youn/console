{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/MoveConnectionModal.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/MoveConnectionModal.tsx","mtime":1615298458630},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Title, Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport { Formik } from 'formik';\nimport { PromiseComponent, ResourceIcon } from '@console/internal/components/utils';\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter, } from '@console/internal/components/factory/modal';\nimport FormSection from '../../import/section/FormSection';\nimport { TYPE_EVENT_SOURCE_LINK } from '@console/knative-plugin/src/topology/const';\nimport { createSinkConnection } from '@console/knative-plugin/src/topology/knative-topology-utils';\nimport { getServiceBindingStatus } from '../topology-utils';\nimport { TYPE_CONNECTS_TO, TYPE_SERVICE_BINDING } from './const';\nimport { createConnection } from './createConnection';\nconst nodeItem = (node) => {\n    var _a;\n    return (React.createElement(\"span\", null,\n        React.createElement(\"span\", { className: \"co-icon-space-r\" },\n            React.createElement(ResourceIcon, { kind: (_a = node.getData().data) === null || _a === void 0 ? void 0 : _a.kind })),\n        node.getLabel()));\n};\nconst MoveConnectionForm = ({ handleSubmit, isSubmitting, cancel, values, edge, availableTargets, status, }) => {\n    const [isOpen, setOpen] = React.useState(false);\n    const isDirty = values.target.getId() !== edge.getTarget().getId();\n    const onToggle = () => {\n        setOpen(!isOpen);\n    };\n    const dropDownNodeItem = (node) => {\n        return (React.createElement(DropdownItem, { key: node.getId(), component: \"button\", onClick: () => {\n                values.target = node;\n                setOpen(false);\n            } }, nodeItem(node)));\n    };\n    return (React.createElement(\"form\", { onSubmit: handleSubmit, className: \"modal-content modal-content--no-inner-scroll\" },\n        React.createElement(ModalTitle, null, \"Move Connector\"),\n        React.createElement(ModalBody, null,\n            React.createElement(Title, { size: \"sm\", className: \"co-m-form-row\" },\n                \"Connect\",\n                React.createElement(\"strong\", null, ` ${edge.getSource().getLabel()} `),\n                \"to\"),\n            React.createElement(FormSection, { fullWidth: true },\n                React.createElement(FormGroup, { fieldId: \"target-node\", label: \"Target\" },\n                    React.createElement(Dropdown, { id: \"target-node-dropdown\", className: \"dropdown--full-width\", toggle: React.createElement(DropdownToggle, { id: \"toggle-id\", onToggle: onToggle, iconComponent: CaretDownIcon }, nodeItem(values.target)), isOpen: isOpen, dropdownItems: availableTargets.map(dropDownNodeItem) })))),\n        React.createElement(ModalSubmitFooter, { submitText: \"Move\", submitDisabled: !isDirty, cancel: cancel, inProgress: isSubmitting, errorMessage: status && status.submitError })));\n};\nclass MoveConnectionModal extends PromiseComponent {\n    constructor() {\n        super(...arguments);\n        this.onSubmit = (newTarget) => {\n            const { edge, serviceBinding } = this.props;\n            switch (edge.getType()) {\n                case TYPE_CONNECTS_TO:\n                    return createConnection(edge.getSource(), newTarget, edge.getTarget(), serviceBinding);\n                case TYPE_SERVICE_BINDING:\n                    return createConnection(edge.getSource(), newTarget, edge.getTarget(), serviceBinding);\n                case TYPE_EVENT_SOURCE_LINK:\n                    return createSinkConnection(edge.getSource(), newTarget);\n                default:\n                    return Promise.reject(new Error(`Unable to move connector of type ${edge.getType()}.`));\n            }\n        };\n        this.handleSubmit = (values, actions) => {\n            actions.setSubmitting(true);\n            const { close } = this.props;\n            this.handlePromise(this.onSubmit(values.target))\n                .then(() => {\n                actions.setSubmitting(false);\n                close();\n            })\n                .catch((err) => {\n                actions.setSubmitting(false);\n                actions.setStatus({ submitError: err });\n            });\n        };\n    }\n    render() {\n        const { edge } = this.props;\n        const initialValues = {\n            target: edge.getTarget(),\n        };\n        return (React.createElement(Formik, { initialValues: initialValues, onSubmit: this.handleSubmit, render: (formProps) => React.createElement(MoveConnectionForm, Object.assign({}, formProps, this.props)) }));\n    }\n}\nconst mapStateToProps = (state) => {\n    return {\n        serviceBinding: getServiceBindingStatus(state),\n    };\n};\nconst ConnectedMoveConnectionModal = connect(mapStateToProps)(MoveConnectionModal);\nexport const moveConnectionModal = createModalLauncher((props) => (React.createElement(ConnectedMoveConnectionModal, Object.assign({}, props))));\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/MoveConnectionModal.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/MoveConnectionModal.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { FormGroup, Title, Dropdown, DropdownItem, DropdownToggle } from '@patternfly/react-core';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport { Formik, FormikProps, FormikValues } from 'formik';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { PromiseComponent, ResourceIcon } from '@console/internal/components/utils';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory/modal';\nimport { Edge, Node } from '@console/topology';\nimport FormSection from '../../import/section/FormSection';\nimport { TYPE_EVENT_SOURCE_LINK } from '@console/knative-plugin/src/topology/const';\nimport { createSinkConnection } from '@console/knative-plugin/src/topology/knative-topology-utils';\nimport { RootState } from '@console/internal/redux';\nimport { getServiceBindingStatus } from '../topology-utils';\nimport { TYPE_CONNECTS_TO, TYPE_SERVICE_BINDING } from './const';\nimport { createConnection } from './createConnection';\n\ninterface StateProps {\n  serviceBinding: boolean;\n}\ntype MoveConnectionModalProps = {\n  edge: Edge;\n  availableTargets: Node[];\n  cancel?: () => void;\n  close?: () => void;\n};\n\ntype MoveConnectionModalState = {\n  inProgress: boolean;\n  errorMessage: string;\n};\n\nconst nodeItem = (node: Node) => (\n  <span>\n    <span className=\"co-icon-space-r\">\n      <ResourceIcon kind={node.getData().data?.kind} />\n    </span>\n    {node.getLabel()}\n  </span>\n);\n\nconst MoveConnectionForm: React.FC<FormikProps<FormikValues> & MoveConnectionModalProps> = ({\n  handleSubmit,\n  isSubmitting,\n  cancel,\n  values,\n  edge,\n  availableTargets,\n  status,\n}) => {\n  const [isOpen, setOpen] = React.useState<boolean>(false);\n  const isDirty = values.target.getId() !== edge.getTarget().getId();\n\n  const onToggle = () => {\n    setOpen(!isOpen);\n  };\n\n  const dropDownNodeItem = (node: Node) => {\n    return (\n      <DropdownItem\n        key={node.getId()}\n        component=\"button\"\n        onClick={() => {\n          values.target = node;\n          setOpen(false);\n        }}\n      >\n        {nodeItem(node)}\n      </DropdownItem>\n    );\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"modal-content modal-content--no-inner-scroll\">\n      <ModalTitle>Move Connector</ModalTitle>\n      <ModalBody>\n        <Title size=\"sm\" className=\"co-m-form-row\">\n          Connect\n          <strong>{` ${edge.getSource().getLabel()} `}</strong>\n          to\n        </Title>\n        <FormSection fullWidth>\n          <FormGroup fieldId=\"target-node\" label=\"Target\">\n            <Dropdown\n              id=\"target-node-dropdown\"\n              className=\"dropdown--full-width\"\n              toggle={\n                <DropdownToggle id=\"toggle-id\" onToggle={onToggle} iconComponent={CaretDownIcon}>\n                  {nodeItem(values.target)}\n                </DropdownToggle>\n              }\n              isOpen={isOpen}\n              dropdownItems={availableTargets.map(dropDownNodeItem)}\n            />\n          </FormGroup>\n        </FormSection>\n      </ModalBody>\n      <ModalSubmitFooter\n        submitText=\"Move\"\n        submitDisabled={!isDirty}\n        cancel={cancel}\n        inProgress={isSubmitting}\n        errorMessage={status && status.submitError}\n      />\n    </form>\n  );\n};\n\nclass MoveConnectionModal extends PromiseComponent<\n  MoveConnectionModalProps & StateProps,\n  MoveConnectionModalState\n> {\n  private onSubmit = (newTarget: Node): Promise<K8sResourceKind[] | K8sResourceKind> => {\n    const { edge, serviceBinding } = this.props;\n    switch (edge.getType()) {\n      case TYPE_CONNECTS_TO:\n        return createConnection(edge.getSource(), newTarget, edge.getTarget(), serviceBinding);\n      case TYPE_SERVICE_BINDING:\n        return createConnection(edge.getSource(), newTarget, edge.getTarget(), serviceBinding);\n      case TYPE_EVENT_SOURCE_LINK:\n        return createSinkConnection(edge.getSource(), newTarget);\n      default:\n        return Promise.reject(new Error(`Unable to move connector of type ${edge.getType()}.`));\n    }\n  };\n\n  private handleSubmit = (values, actions) => {\n    actions.setSubmitting(true);\n    const { close } = this.props;\n    this.handlePromise(this.onSubmit(values.target))\n      .then(() => {\n        actions.setSubmitting(false);\n        close();\n      })\n      .catch((err) => {\n        actions.setSubmitting(false);\n        actions.setStatus({ submitError: err });\n      });\n  };\n\n  render() {\n    const { edge } = this.props;\n    const initialValues = {\n      target: edge.getTarget(),\n    };\n    return (\n      <Formik\n        initialValues={initialValues}\n        onSubmit={this.handleSubmit}\n        render={(formProps) => <MoveConnectionForm {...formProps} {...this.props} />}\n      />\n    );\n  }\n}\n\nconst mapStateToProps = (state: RootState): StateProps => {\n  return {\n    serviceBinding: getServiceBindingStatus(state),\n  };\n};\n\nconst ConnectedMoveConnectionModal = connect(mapStateToProps)(MoveConnectionModal);\n\nexport const moveConnectionModal = createModalLauncher((props: MoveConnectionModalProps) => (\n  <ConnectedMoveConnectionModal {...props} />\n));\n"]}]}