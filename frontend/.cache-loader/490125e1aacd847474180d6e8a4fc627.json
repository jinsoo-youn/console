{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/local-storage-operator-plugin/src/components/local-volume-set/types.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/local-storage-operator-plugin/src/components/local-volume-set/types.ts","mtime":1615298458670},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["export var DiskType;\n(function (DiskType) {\n    DiskType[\"SSD\"] = \"SSD\";\n    DiskType[\"HDD\"] = \"HDD\";\n})(DiskType || (DiskType = {}));\nexport var DeviceType;\n(function (DeviceType) {\n    DeviceType[\"RawDisk\"] = \"RawDisk\";\n    DeviceType[\"Partition\"] = \"Partition\";\n})(DeviceType || (DeviceType = {}));\nexport var DeviceMechanicalProperty;\n(function (DeviceMechanicalProperty) {\n    DeviceMechanicalProperty[\"SSD\"] = \"Rotational\";\n    DeviceMechanicalProperty[\"HDD\"] = \"NonRotational\";\n})(DeviceMechanicalProperty || (DeviceMechanicalProperty = {}));\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/local-storage-operator-plugin/src/components/local-volume-set/types.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/local-storage-operator-plugin/src/components/local-volume-set/types.ts"],"names":[],"mappings":"AAgBA,MAAM,CAAN,IAAY,QAGX;AAHD,WAAY,QAAQ;IAClB,uBAAW,CAAA;IACX,uBAAW,CAAA;AACb,CAAC,EAHW,QAAQ,KAAR,QAAQ,QAGnB;AAED,MAAM,CAAN,IAAY,UAGX;AAHD,WAAY,UAAU;IACpB,iCAAmB,CAAA;IACnB,qCAAuB,CAAA;AACzB,CAAC,EAHW,UAAU,KAAV,UAAU,QAGrB;AAED,MAAM,CAAN,IAAY,wBAGX;AAHD,WAAY,wBAAwB;IAClC,8CAAkB,CAAA;IAClB,iDAAqB,CAAA;AACvB,CAAC,EAHW,wBAAwB,KAAxB,wBAAwB,QAGnC","sourcesContent":["import { IRow } from '@patternfly/react-table';\nimport { NodeKind, K8sResourceCommon } from '@console/internal/module/k8s';\n\nexport type NodeTableRow = {\n  cells: IRow['cells'];\n  selected: IRow['selected'];\n  props: {\n    data: NodeKind;\n    uid: string;\n  };\n};\n\nexport type RowUIDMap = {\n  [key: string]: NodeTableRow;\n};\n\nexport enum DiskType {\n  SSD = 'SSD',\n  HDD = 'HDD',\n}\n\nexport enum DeviceType {\n  RawDisk = 'RawDisk',\n  Partition = 'Partition',\n}\n\nexport enum DeviceMechanicalProperty {\n  SSD = 'Rotational',\n  HDD = 'NonRotational',\n}\n\nexport type LocalVolumeSetKind = K8sResourceCommon & {\n  spec: {\n    storageClassName: string;\n    volumeMode: string;\n    deviceInclusionSpec: {\n      deviceTypes: DeviceType[];\n      deviceMechanicalProperty: DeviceMechanicalProperty[];\n      minSize?: number;\n      maxSize?: number;\n    };\n    nodeSelector?: {\n      nodeSelectorTerms: [\n        {\n          matchExpressions: [{ key: string; operator: string; values: string[] }];\n        },\n      ];\n    };\n    maxDeviceCount?: number;\n  };\n};\n"]}]}