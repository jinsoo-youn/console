{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/network-attachment-definition-plugin/src/components/network-attachment-definitions/NetworkTypeOptions.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/network-attachment-definition-plugin/src/components/network-attachment-definitions/NetworkTypeOptions.tsx","mtime":1616735742440},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport * as _ from 'lodash';\nimport { FormControl, FormGroup, HelpBlock } from 'patternfly-react';\nimport { Dropdown } from '@console/internal/components/utils';\nimport { ELEMENT_TYPES, networkTypeParams } from '../../constants';\nconst handleTypeParamChange = (paramKey, event, elemType, networkType, setTypeParamsData, typeParamsData) => {\n    const paramsUpdate = Object.assign({}, typeParamsData);\n    if (elemType === ELEMENT_TYPES.CHECKBOX) {\n        paramsUpdate[paramKey] = { value: event.target.checked };\n    }\n    else if (event.target) {\n        paramsUpdate[paramKey] = { value: event.target.value };\n    }\n    else {\n        paramsUpdate[paramKey] = { value: event };\n    }\n    _.forOwn(paramsUpdate, (value, key) => {\n        if (key === paramKey) {\n            const validation = _.get(networkTypeParams[networkType], [key, 'validation'], null);\n            paramsUpdate[key].validationMsg = validation ? validation(paramsUpdate) : null;\n        }\n    });\n    setTypeParamsData(paramsUpdate);\n};\nconst getSriovNetNodePolicyResourceNames = (sriovNetNodePoliciesData) => {\n    const resourceNames = {};\n    sriovNetNodePoliciesData.forEach((policy) => {\n        const resourceName = _.get(policy, 'spec.resourceName', '');\n        if (resourceName !== '') {\n            resourceNames[resourceName] = resourceName;\n        }\n    });\n    return resourceNames;\n};\nexport default (props) => {\n    const { networkType, setTypeParamsData, sriovNetNodePoliciesData, typeParamsData } = props;\n    const params = networkType && networkTypeParams[networkType];\n    if (_.isEmpty(params)) {\n        return null;\n    }\n    if (networkType === 'sriov') {\n        params.resourceName.values = getSriovNetNodePolicyResourceNames(sriovNetNodePoliciesData);\n    }\n    const dynamicContent = _.map(params, (parameter, key) => {\n        const validationMsg = _.get(typeParamsData, [key, 'validationMsg'], null);\n        const elemType = _.get(parameter, 'type');\n        let children;\n        switch (elemType) {\n            case ELEMENT_TYPES.TEXTAREA:\n                children = (React.createElement(React.Fragment, null,\n                    React.createElement(\"label\", { className: classNames('control-label', {\n                            'co-required': parameter.required,\n                        }) }, _.get(parameter, 'name', key)),\n                    React.createElement(FormControl, { componentClass: ELEMENT_TYPES.TEXTAREA, bsClass: \"pf-c-form-control\", value: _.get(typeParamsData, `${key}.value`, ''), onChange: (event) => handleTypeParamChange(key, event, ELEMENT_TYPES.TEXTAREA, networkType, setTypeParamsData, typeParamsData) }),\n                    React.createElement(HelpBlock, null, validationMsg || null)));\n                break;\n            case ELEMENT_TYPES.CHECKBOX:\n                children = (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { className: \"checkbox\" },\n                        React.createElement(\"label\", null,\n                            React.createElement(\"input\", { type: \"checkbox\", className: \"create-storage-class-form__checkbox\", onChange: (event) => handleTypeParamChange(key, event, ELEMENT_TYPES.CHECKBOX, networkType, setTypeParamsData, typeParamsData), checked: _.get(typeParamsData, `${key}.value`, false), id: `network-type-params-${key}-checkbox` }),\n                            _.get(parameter, 'name', key))),\n                    React.createElement(HelpBlock, null, validationMsg || null)));\n                break;\n            case ELEMENT_TYPES.DROPDOWN:\n                children = (React.createElement(React.Fragment, null,\n                    React.createElement(\"label\", { className: classNames('control-label', { 'co-required': parameter.required }) }, _.get(parameter, 'name', key)),\n                    React.createElement(Dropdown, { title: parameter.hintText, items: parameter.values, dropDownClassName: \"dropdown--full-width\", selectedKey: _.get(typeParamsData, `${key}.value`), onChange: (event) => handleTypeParamChange(key, event, ELEMENT_TYPES.DROPDOWN, networkType, setTypeParamsData, typeParamsData) }),\n                    React.createElement(HelpBlock, null, validationMsg || null)));\n                break;\n            case ELEMENT_TYPES.TEXT:\n            default:\n                children = (React.createElement(React.Fragment, null,\n                    React.createElement(\"label\", { className: classNames('control-label', {\n                            'co-required': parameter.required,\n                        }) }, _.get(parameter, 'name', key)),\n                    React.createElement(FormControl, { type: \"text\", bsClass: \"pf-c-form-control\", value: _.get(typeParamsData, `${key}.value`, ''), onChange: (event) => handleTypeParamChange(key, event, ELEMENT_TYPES.TEXT, networkType, setTypeParamsData, typeParamsData) }),\n                    React.createElement(HelpBlock, null, validationMsg || null)));\n        }\n        return (React.createElement(FormGroup, { key: key, controlId: `network-type-parameters-${key}`, validationState: _.get(typeParamsData, `${key}.validationMsg`, null) ? 'error' : null }, children));\n    });\n    return React.createElement(React.Fragment, null, dynamicContent);\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/network-attachment-definition-plugin/src/components/network-attachment-definitions/NetworkTypeOptions.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/network-attachment-definition-plugin/src/components/network-attachment-definitions/NetworkTypeOptions.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,UAAU,MAAM,YAAY,CAAC;AACzC,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,SAAS,EAAE,MAAM,kBAAkB,CAAC;AACrE,OAAO,EAAE,QAAQ,EAAE,MAAM,oCAAoC,CAAC;AAC9D,OAAO,EAAE,aAAa,EAAE,iBAAiB,EAAqB,MAAM,iBAAiB,CAAC;AAEtF,MAAM,qBAAqB,GAAG,CAC5B,QAAQ,EACR,KAAK,EACL,QAAQ,EACR,WAAW,EACX,iBAAiB,EACjB,cAAc,EACd,EAAE;IACF,MAAM,YAAY,qBAAQ,cAAc,CAAE,CAAC;IAE3C,IAAI,QAAQ,KAAK,aAAa,CAAC,QAAQ,EAAE;QACvC,YAAY,CAAC,QAAQ,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;KAC1D;SAAM,IAAI,KAAK,CAAC,MAAM,EAAE;QACvB,YAAY,CAAC,QAAQ,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;KACxD;SAAM;QACL,YAAY,CAAC,QAAQ,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;KAC3C;IAED,CAAC,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;QACpC,IAAI,GAAG,KAAK,QAAQ,EAAE;YACpB,MAAM,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,iBAAiB,CAAC,WAAW,CAAC,EAAE,CAAC,GAAG,EAAE,YAAY,CAAC,EAAE,IAAI,CAAC,CAAC;YAEpF,YAAY,CAAC,GAAG,CAAC,CAAC,aAAa,GAAG,UAAU,CAAC,CAAC,CAAC,UAAU,CAAC,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;SAChF;IACH,CAAC,CAAC,CAAC;IAEH,iBAAiB,CAAC,YAAY,CAAC,CAAC;AAClC,CAAC,CAAC;AAEF,MAAM,kCAAkC,GAAG,CAAC,wBAAwB,EAAE,EAAE;IACtE,MAAM,aAAa,GAAG,EAAE,CAAC;IAEzB,wBAAwB,CAAC,OAAO,CAAC,CAAC,MAAM,EAAE,EAAE;QAC1C,MAAM,YAAY,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,EAAE,mBAAmB,EAAE,EAAE,CAAC,CAAC;QAC5D,IAAI,YAAY,KAAK,EAAE,EAAE;YACvB,aAAa,CAAC,YAAY,CAAC,GAAG,YAAY,CAAC;SAC5C;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,aAAa,CAAC;AACvB,CAAC,CAAC;AAEF,eAAe,CAAC,KAAK,EAAE,EAAE;IACvB,MAAM,EAAE,WAAW,EAAE,iBAAiB,EAAE,wBAAwB,EAAE,cAAc,EAAE,GAAG,KAAK,CAAC;IAC3F,MAAM,MAAM,GAAsB,WAAW,IAAI,iBAAiB,CAAC,WAAW,CAAC,CAAC;IAEhF,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;QACrB,OAAO,IAAI,CAAC;KACb;IAED,IAAI,WAAW,KAAK,OAAO,EAAE;QAC3B,MAAM,CAAC,YAAY,CAAC,MAAM,GAAG,kCAAkC,CAAC,wBAAwB,CAAC,CAAC;KAC3F;IAED,MAAM,cAAc,GAAG,CAAC,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,SAAS,EAAE,GAAG,EAAE,EAAE;QACtD,MAAM,aAAa,GAAG,CAAC,CAAC,GAAG,CAAC,cAAc,EAAE,CAAC,GAAG,EAAE,eAAe,CAAC,EAAE,IAAI,CAAC,CAAC;QAC1E,MAAM,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,CAAC,CAAC;QAE1C,IAAI,QAAQ,CAAC;QACb,QAAQ,QAAQ,EAAE;YAChB,KAAK,aAAa,CAAC,QAAQ;gBACzB,QAAQ,GAAG,CACT;oBACE,+BACE,SAAS,EAAE,UAAU,CAAC,eAAe,EAAE;4BACrC,aAAa,EAAE,SAAS,CAAC,QAAQ;yBAClC,CAAC,IAED,CAAC,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,EAAE,GAAG,CAAC,CACxB;oBACR,oBAAC,WAAW,IACV,cAAc,EAAE,aAAa,CAAC,QAAQ,EACtC,OAAO,EAAC,mBAAmB,EAC3B,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,cAAc,EAAE,GAAG,GAAG,QAAQ,EAAE,EAAE,CAAC,EAChD,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE,CAClB,qBAAqB,CACnB,GAAG,EACH,KAAK,EACL,aAAa,CAAC,QAAQ,EACtB,WAAW,EACX,iBAAiB,EACjB,cAAc,CACf,GAEH;oBACF,oBAAC,SAAS,QAAE,aAAa,IAAI,IAAI,CAAa,CAC7C,CACJ,CAAC;gBACF,MAAM;YACR,KAAK,aAAa,CAAC,QAAQ;gBACzB,QAAQ,GAAG,CACT;oBACE,6BAAK,SAAS,EAAC,UAAU;wBACvB;4BACE,+BACE,IAAI,EAAC,UAAU,EACf,SAAS,EAAC,qCAAqC,EAC/C,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE,CAClB,qBAAqB,CACnB,GAAG,EACH,KAAK,EACL,aAAa,CAAC,QAAQ,EACtB,WAAW,EACX,iBAAiB,EACjB,cAAc,CACf,EAEH,OAAO,EAAE,CAAC,CAAC,GAAG,CAAC,cAAc,EAAE,GAAG,GAAG,QAAQ,EAAE,KAAK,CAAC,EACrD,EAAE,EAAE,uBAAuB,GAAG,WAAW,GACzC;4BACD,CAAC,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,EAAE,GAAG,CAAC,CACxB,CACJ;oBACN,oBAAC,SAAS,QAAE,aAAa,IAAI,IAAI,CAAa,CAC7C,CACJ,CAAC;gBACF,MAAM;YACR,KAAK,aAAa,CAAC,QAAQ;gBACzB,QAAQ,GAAG,CACT;oBACE,+BAAO,SAAS,EAAE,UAAU,CAAC,eAAe,EAAE,EAAE,aAAa,EAAE,SAAS,CAAC,QAAQ,EAAE,CAAC,IACjF,CAAC,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,EAAE,GAAG,CAAC,CACxB;oBACR,oBAAC,QAAQ,IACP,KAAK,EAAE,SAAS,CAAC,QAAQ,EACzB,KAAK,EAAE,SAAS,CAAC,MAAM,EACvB,iBAAiB,EAAC,sBAAsB,EACxC,WAAW,EAAE,CAAC,CAAC,GAAG,CAAC,cAAc,EAAE,GAAG,GAAG,QAAQ,CAAC,EAClD,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE,CAClB,qBAAqB,CACnB,GAAG,EACH,KAAK,EACL,aAAa,CAAC,QAAQ,EACtB,WAAW,EACX,iBAAiB,EACjB,cAAc,CACf,GAEH;oBACF,oBAAC,SAAS,QAAE,aAAa,IAAI,IAAI,CAAa,CAC7C,CACJ,CAAC;gBACF,MAAM;YACR,KAAK,aAAa,CAAC,IAAI,CAAC;YACxB;gBACE,QAAQ,GAAG,CACT;oBACE,+BACE,SAAS,EAAE,UAAU,CAAC,eAAe,EAAE;4BACrC,aAAa,EAAE,SAAS,CAAC,QAAQ;yBAClC,CAAC,IAED,CAAC,CAAC,GAAG,CAAC,SAAS,EAAE,MAAM,EAAE,GAAG,CAAC,CACxB;oBACR,oBAAC,WAAW,IACV,IAAI,EAAC,MAAM,EACX,OAAO,EAAC,mBAAmB,EAC3B,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,cAAc,EAAE,GAAG,GAAG,QAAQ,EAAE,EAAE,CAAC,EAChD,QAAQ,EAAE,CAAC,KAAK,EAAE,EAAE,CAClB,qBAAqB,CACnB,GAAG,EACH,KAAK,EACL,aAAa,CAAC,IAAI,EAClB,WAAW,EACX,iBAAiB,EACjB,cAAc,CACf,GAEH;oBACF,oBAAC,SAAS,QAAE,aAAa,IAAI,IAAI,CAAa,CAC7C,CACJ,CAAC;SACL;QAED,OAAO,CACL,oBAAC,SAAS,IACR,GAAG,EAAE,GAAG,EACR,SAAS,EAAE,2BAA2B,GAAG,EAAE,EAC3C,eAAe,EAAE,CAAC,CAAC,GAAG,CAAC,cAAc,EAAE,GAAG,GAAG,gBAAgB,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,IAEpF,QAAQ,CACC,CACb,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,OAAO,0CAAG,cAAc,CAAI,CAAC;AAC/B,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport * as _ from 'lodash';\nimport { FormControl, FormGroup, HelpBlock } from 'patternfly-react';\nimport { Dropdown } from '@console/internal/components/utils';\nimport { ELEMENT_TYPES, networkTypeParams, NetworkTypeParams } from '../../constants';\n\nconst handleTypeParamChange = (\n  paramKey,\n  event,\n  elemType,\n  networkType,\n  setTypeParamsData,\n  typeParamsData,\n) => {\n  const paramsUpdate = { ...typeParamsData };\n\n  if (elemType === ELEMENT_TYPES.CHECKBOX) {\n    paramsUpdate[paramKey] = { value: event.target.checked };\n  } else if (event.target) {\n    paramsUpdate[paramKey] = { value: event.target.value };\n  } else {\n    paramsUpdate[paramKey] = { value: event };\n  }\n\n  _.forOwn(paramsUpdate, (value, key) => {\n    if (key === paramKey) {\n      const validation = _.get(networkTypeParams[networkType], [key, 'validation'], null);\n\n      paramsUpdate[key].validationMsg = validation ? validation(paramsUpdate) : null;\n    }\n  });\n\n  setTypeParamsData(paramsUpdate);\n};\n\nconst getSriovNetNodePolicyResourceNames = (sriovNetNodePoliciesData) => {\n  const resourceNames = {};\n\n  sriovNetNodePoliciesData.forEach((policy) => {\n    const resourceName = _.get(policy, 'spec.resourceName', '');\n    if (resourceName !== '') {\n      resourceNames[resourceName] = resourceName;\n    }\n  });\n\n  return resourceNames;\n};\n\nexport default (props) => {\n  const { networkType, setTypeParamsData, sriovNetNodePoliciesData, typeParamsData } = props;\n  const params: NetworkTypeParams = networkType && networkTypeParams[networkType];\n\n  if (_.isEmpty(params)) {\n    return null;\n  }\n\n  if (networkType === 'sriov') {\n    params.resourceName.values = getSriovNetNodePolicyResourceNames(sriovNetNodePoliciesData);\n  }\n\n  const dynamicContent = _.map(params, (parameter, key) => {\n    const validationMsg = _.get(typeParamsData, [key, 'validationMsg'], null);\n    const elemType = _.get(parameter, 'type');\n\n    let children;\n    switch (elemType) {\n      case ELEMENT_TYPES.TEXTAREA:\n        children = (\n          <>\n            <label\n              className={classNames('control-label', {\n                'co-required': parameter.required,\n              })}\n            >\n              {_.get(parameter, 'name', key)}\n            </label>\n            <FormControl\n              componentClass={ELEMENT_TYPES.TEXTAREA}\n              bsClass=\"pf-c-form-control\"\n              value={_.get(typeParamsData, `${key}.value`, '')}\n              onChange={(event) =>\n                handleTypeParamChange(\n                  key,\n                  event,\n                  ELEMENT_TYPES.TEXTAREA,\n                  networkType,\n                  setTypeParamsData,\n                  typeParamsData,\n                )\n              }\n            />\n            <HelpBlock>{validationMsg || null}</HelpBlock>\n          </>\n        );\n        break;\n      case ELEMENT_TYPES.CHECKBOX:\n        children = (\n          <>\n            <div className=\"checkbox\">\n              <label>\n                <input\n                  type=\"checkbox\"\n                  className=\"create-storage-class-form__checkbox\"\n                  onChange={(event) =>\n                    handleTypeParamChange(\n                      key,\n                      event,\n                      ELEMENT_TYPES.CHECKBOX,\n                      networkType,\n                      setTypeParamsData,\n                      typeParamsData,\n                    )\n                  }\n                  checked={_.get(typeParamsData, `${key}.value`, false)}\n                  id={`network-type-params-${key}-checkbox`}\n                />\n                {_.get(parameter, 'name', key)}\n              </label>\n            </div>\n            <HelpBlock>{validationMsg || null}</HelpBlock>\n          </>\n        );\n        break;\n      case ELEMENT_TYPES.DROPDOWN:\n        children = (\n          <>\n            <label className={classNames('control-label', { 'co-required': parameter.required })}>\n              {_.get(parameter, 'name', key)}\n            </label>\n            <Dropdown\n              title={parameter.hintText}\n              items={parameter.values}\n              dropDownClassName=\"dropdown--full-width\"\n              selectedKey={_.get(typeParamsData, `${key}.value`)}\n              onChange={(event) =>\n                handleTypeParamChange(\n                  key,\n                  event,\n                  ELEMENT_TYPES.DROPDOWN,\n                  networkType,\n                  setTypeParamsData,\n                  typeParamsData,\n                )\n              }\n            />\n            <HelpBlock>{validationMsg || null}</HelpBlock>\n          </>\n        );\n        break;\n      case ELEMENT_TYPES.TEXT:\n      default:\n        children = (\n          <>\n            <label\n              className={classNames('control-label', {\n                'co-required': parameter.required,\n              })}\n            >\n              {_.get(parameter, 'name', key)}\n            </label>\n            <FormControl\n              type=\"text\"\n              bsClass=\"pf-c-form-control\"\n              value={_.get(typeParamsData, `${key}.value`, '')}\n              onChange={(event) =>\n                handleTypeParamChange(\n                  key,\n                  event,\n                  ELEMENT_TYPES.TEXT,\n                  networkType,\n                  setTypeParamsData,\n                  typeParamsData,\n                )\n              }\n            />\n            <HelpBlock>{validationMsg || null}</HelpBlock>\n          </>\n        );\n    }\n\n    return (\n      <FormGroup\n        key={key}\n        controlId={`network-type-parameters-${key}`}\n        validationState={_.get(typeParamsData, `${key}.validationMsg`, null) ? 'error' : null}\n      >\n        {children}\n      </FormGroup>\n    );\n  });\n\n  return <>{dynamicContent}</>;\n};\n"]}]}