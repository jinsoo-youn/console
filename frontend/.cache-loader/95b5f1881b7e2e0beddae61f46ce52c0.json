{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/dashboards-page/status.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/dashboards-page/status.ts","mtime":1615298458600},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as _ from 'lodash';\nimport { HealthState, healthPriority, } from '@console/shared/src/components/dashboard/status-card/states';\nimport { coFetch } from '@console/internal/co-fetch';\nimport { ClusterUpdateStatus, getClusterUpdateStatus, getClusterOperatorStatus, OperatorStatus, } from '@console/internal/module/k8s';\nimport { humanizePercentage } from '@console/internal/components/utils/units';\nimport { getOperatorsStatus } from '@console/shared/src/components/dashboard/status-card/state-utils';\nimport { pluralize } from '@patternfly/react-core';\nexport const fetchK8sHealth = (url) => __awaiter(void 0, void 0, void 0, function* () {\n    const response = yield coFetch(url);\n    return response.text();\n});\nexport const getK8sHealthState = (k8sHealth, error, resource) => {\n    if (error) {\n        return { state: HealthState.NOT_AVAILABLE };\n    }\n    if (!k8sHealth) {\n        return { state: HealthState.LOADING };\n    }\n    if (getClusterUpdateStatus(_.get(resource, 'data')) ===\n        ClusterUpdateStatus.Updating) {\n        return { state: HealthState.UPDATING, message: 'Updating' };\n    }\n    return { state: k8sHealth === 'ok' ? HealthState.OK : HealthState.ERROR };\n};\nexport const getControlPlaneComponentHealth = (response, error) => {\n    var _a, _b, _c, _d;\n    if (error) {\n        return {\n            state: HealthState.NOT_AVAILABLE,\n            message: healthPriority[HealthState.NOT_AVAILABLE].message,\n        };\n    }\n    if (!response) {\n        return { state: HealthState.LOADING };\n    }\n    const value = (_d = (_c = (_b = (_a = response.data) === null || _a === void 0 ? void 0 : _a.result) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.value) === null || _d === void 0 ? void 0 : _d[1];\n    if (_.isNil(value)) {\n        return { state: HealthState.UNKNOWN, message: healthPriority[HealthState.UNKNOWN].message };\n    }\n    const perc = humanizePercentage(value);\n    if (perc.value > 90) {\n        return { state: HealthState.OK, message: perc.string };\n    }\n    if (perc.value > 70) {\n        return { state: HealthState.WARNING, message: perc.string };\n    }\n    return { state: HealthState.ERROR, message: perc.string };\n};\nconst getWorstStatus = (componentsHealth) => {\n    const withPriority = componentsHealth.map((h) => healthPriority[h.state]);\n    const mostImportantState = Math.max(...withPriority.map(({ priority }) => priority));\n    const worstStatuses = withPriority.filter(({ priority }) => priority === mostImportantState);\n    return {\n        state: worstStatuses[0].health,\n        message: worstStatuses[0].message,\n        count: worstStatuses.length,\n    };\n};\nexport const getControlPlaneHealth = (responses) => {\n    const componentsHealth = responses.map(({ response, error }) => getControlPlaneComponentHealth(response, error));\n    if (componentsHealth.some((c) => c.state === HealthState.LOADING)) {\n        return { state: HealthState.LOADING };\n    }\n    const worstStatus = getWorstStatus(componentsHealth);\n    return {\n        state: worstStatus.state,\n        message: worstStatus.message\n            ? worstStatus.count === 4\n                ? worstStatus.message\n                : `${pluralize(worstStatus.count, 'component')} ${worstStatus.message.toLowerCase()}`\n            : null,\n    };\n};\nexport const getClusterOperatorStatusPriority = (co) => {\n    const status = getClusterOperatorStatus(co);\n    if (status === OperatorStatus.Degraded) {\n        return Object.assign(Object.assign({}, healthPriority[HealthState.WARNING]), { title: status });\n    }\n    if (status === OperatorStatus.Unknown) {\n        return Object.assign(Object.assign({}, healthPriority[HealthState.UNKNOWN]), { title: status });\n    }\n    if (status === OperatorStatus.Updating) {\n        return Object.assign(Object.assign({}, healthPriority[HealthState.UPDATING]), { title: status });\n    }\n    return Object.assign(Object.assign({}, healthPriority[HealthState.OK]), { title: status });\n};\nexport const getClusterOperatorHealthStatus = (resources) => {\n    return resources.clusterOperators.data.map((co) => getOperatorsStatus([co], getClusterOperatorStatusPriority));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/dashboards-page/status.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/dashboards-page/status.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport {\n  PrometheusHealthHandler,\n  URLHealthHandler,\n  SubsystemHealth,\n  GetOperatorsWithStatuses,\n  GetOperatorStatusPriority,\n} from '@console/plugin-sdk';\nimport {\n  HealthState,\n  healthPriority,\n} from '@console/shared/src/components/dashboard/status-card/states';\nimport { coFetch } from '@console/internal/co-fetch';\nimport {\n  ClusterVersionKind,\n  ClusterUpdateStatus,\n  getClusterUpdateStatus,\n  getClusterOperatorStatus,\n  OperatorStatus,\n  ClusterOperator,\n} from '@console/internal/module/k8s';\nimport { PrometheusResponse } from '@console/internal/components/graphs';\nimport { humanizePercentage } from '@console/internal/components/utils/units';\nimport { getOperatorsStatus } from '@console/shared/src/components/dashboard/status-card/state-utils';\nimport { pluralize } from '@patternfly/react-core';\n\nexport const fetchK8sHealth = async (url: string) => {\n  const response = await coFetch(url);\n  return response.text();\n};\n\nexport const getK8sHealthState: URLHealthHandler<string> = (k8sHealth, error, resource) => {\n  if (error) {\n    return { state: HealthState.NOT_AVAILABLE };\n  }\n  if (!k8sHealth) {\n    return { state: HealthState.LOADING };\n  }\n  if (\n    getClusterUpdateStatus(_.get(resource, 'data') as ClusterVersionKind) ===\n    ClusterUpdateStatus.Updating\n  ) {\n    return { state: HealthState.UPDATING, message: 'Updating' };\n  }\n  return { state: k8sHealth === 'ok' ? HealthState.OK : HealthState.ERROR };\n};\n\nexport const getControlPlaneComponentHealth = (\n  response: PrometheusResponse,\n  error,\n): SubsystemHealth => {\n  if (error) {\n    return {\n      state: HealthState.NOT_AVAILABLE,\n      message: healthPriority[HealthState.NOT_AVAILABLE].message,\n    };\n  }\n  if (!response) {\n    return { state: HealthState.LOADING };\n  }\n  const value = response.data?.result?.[0]?.value?.[1];\n  if (_.isNil(value)) {\n    return { state: HealthState.UNKNOWN, message: healthPriority[HealthState.UNKNOWN].message };\n  }\n  const perc = humanizePercentage(value);\n  if (perc.value > 90) {\n    return { state: HealthState.OK, message: perc.string };\n  }\n  if (perc.value > 70) {\n    return { state: HealthState.WARNING, message: perc.string };\n  }\n  return { state: HealthState.ERROR, message: perc.string };\n};\n\nconst getWorstStatus = (\n  componentsHealth: SubsystemHealth[],\n): { state: HealthState; message: string; count: number } => {\n  const withPriority = componentsHealth.map((h) => healthPriority[h.state]);\n  const mostImportantState = Math.max(...withPriority.map(({ priority }) => priority));\n  const worstStatuses = withPriority.filter(({ priority }) => priority === mostImportantState);\n  return {\n    state: worstStatuses[0].health,\n    message: worstStatuses[0].message,\n    count: worstStatuses.length,\n  };\n};\n\nexport const getControlPlaneHealth: PrometheusHealthHandler = (responses) => {\n  const componentsHealth = responses.map(({ response, error }) =>\n    getControlPlaneComponentHealth(response, error),\n  );\n  if (componentsHealth.some((c) => c.state === HealthState.LOADING)) {\n    return { state: HealthState.LOADING };\n  }\n  const worstStatus = getWorstStatus(componentsHealth);\n\n  return {\n    state: worstStatus.state,\n    message: worstStatus.message\n      ? worstStatus.count === 4\n        ? worstStatus.message\n        : `${pluralize(worstStatus.count, 'component')} ${worstStatus.message.toLowerCase()}`\n      : null,\n  };\n};\n\nexport const getClusterOperatorStatusPriority: GetOperatorStatusPriority<ClusterOperator> = (\n  co,\n) => {\n  const status = getClusterOperatorStatus(co);\n  if (status === OperatorStatus.Degraded) {\n    return { ...healthPriority[HealthState.WARNING], title: status };\n  }\n  if (status === OperatorStatus.Unknown) {\n    return { ...healthPriority[HealthState.UNKNOWN], title: status };\n  }\n  if (status === OperatorStatus.Updating) {\n    return { ...healthPriority[HealthState.UPDATING], title: status };\n  }\n  return { ...healthPriority[HealthState.OK], title: status };\n};\n\nexport const getClusterOperatorHealthStatus: GetOperatorsWithStatuses<ClusterOperator> = (\n  resources,\n) => {\n  return (resources.clusterOperators.data as ClusterOperator[]).map((co) =>\n    getOperatorsStatus<ClusterOperator>([co], getClusterOperatorStatusPriority),\n  );\n};\n"]}]}