{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/affinity-modal/affinity-modal.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/affinity-modal/affinity-modal.tsx","mtime":1616735742420},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport { withHandlePromise, } from '@console/internal/components/utils';\nimport { Button, ButtonVariant, Split, SplitItem, Text, TextVariants, EmptyState, EmptyStateVariant, Title, EmptyStateBody, } from '@patternfly/react-core';\nimport { ModalTitle, ModalBody } from '@console/internal/components/factory';\nimport { NodeModel } from '@console/internal/models';\nimport { k8sPatch } from '@console/internal/module/k8s';\nimport { getVMLikeModel } from '../../../../selectors/vm';\nimport { getVMLikeAffinity } from '../../../../selectors/vm-like/selectors';\nimport { getLoadedData, isLoaded, getLoadError } from '../../../../utils';\nimport { useCollisionChecker } from '../../../../hooks/use-collision-checker';\nimport { ModalFooter } from '../../modal/modal-footer';\nimport { AFFINITY_MODAL_TITLE, AFFINITY_CREATE, AFFINITY_EDITING } from '../shared/consts';\nimport { AffinityTable } from './components/affinity-table/affinity-table';\nimport { AffinityRow } from './components/affinity-table/affinity-row';\nimport { AffinityEdit } from './components/affinity-edit/affinity-edit';\nimport { getRowsDataFromAffinity, getAffinityFromRowsData, defaultNewAffinity, columnClasses, } from './helpers';\nimport { getAffinityPatch } from '../../../../k8s/patches/vm/vm-scheduling-patches';\nimport '../shared/scheduling-modals.scss';\nexport const AffinityModal = withHandlePromise(({ vmLikeEntity, vmLikeEntityLoading, nodes, close, handlePromise, inProgress, errorMessage, }) => {\n    const vmLikeFinal = getLoadedData(vmLikeEntityLoading, vmLikeEntity);\n    const loadError = getLoadError(nodes, NodeModel);\n    const currentAffinity = getVMLikeAffinity(vmLikeFinal);\n    const [affinities, setAffinities] = React.useState(getRowsDataFromAffinity(currentAffinity));\n    const [focusedAffinity, setFocusedAffinity] = React.useState(defaultNewAffinity);\n    const [isEditing, setIsEditing] = React.useState(false);\n    const [isCreating, setIsCreating] = React.useState(false);\n    const [showCollisionAlert, reload] = useCollisionChecker(vmLikeFinal, (oldVM, newVM) => _.isEqual(getVMLikeAffinity(oldVM), getVMLikeAffinity(newVM)));\n    const onReload = () => {\n        reload();\n        setAffinities(getRowsDataFromAffinity(currentAffinity));\n        setIsCreating(false);\n    };\n    const onAffinityAdd = (affinity) => {\n        setAffinities([...affinities, affinity]);\n        setIsEditing(false);\n        setIsCreating(false);\n    };\n    const onAffinityChange = (updatedAffinity) => {\n        setAffinities(affinities.map((affinity) => {\n            if (affinity.id === updatedAffinity.id)\n                return Object.assign(Object.assign({}, affinity), updatedAffinity);\n            return affinity;\n        }));\n        setIsEditing(false);\n    };\n    const onAffinityClickAdd = () => {\n        setIsEditing(true);\n        setIsCreating(true);\n        setFocusedAffinity(defaultNewAffinity);\n    };\n    const onAffinityClickEdit = (affinity) => {\n        setFocusedAffinity(affinity);\n        setIsEditing(true);\n    };\n    const onAffinityDelete = (affinity) => setAffinities(affinities.filter(({ id }) => id !== affinity.id));\n    const submit = () => __awaiter(void 0, void 0, void 0, function* () {\n        if (!_.isEqual(affinities, getRowsDataFromAffinity(currentAffinity))) {\n            // eslint-disable-next-line promise/catch-or-return\n            handlePromise(k8sPatch(getVMLikeModel(vmLikeFinal), vmLikeFinal, yield getAffinityPatch(vmLikeFinal, getAffinityFromRowsData(affinities)))).then(close);\n        }\n        else {\n            close();\n        }\n    });\n    const onCancel = () => {\n        if (isEditing) {\n            setIsEditing(false);\n            setIsCreating(false);\n        }\n        else {\n            close();\n        }\n    };\n    const modalTitle = !isEditing\n        ? AFFINITY_MODAL_TITLE\n        : isCreating\n            ? AFFINITY_CREATE\n            : AFFINITY_EDITING;\n    return (React.createElement(\"div\", { className: \"modal-content\" },\n        React.createElement(Split, null,\n            React.createElement(SplitItem, null,\n                React.createElement(ModalTitle, null, modalTitle)),\n            React.createElement(SplitItem, { isFilled: true }),\n            React.createElement(SplitItem, { className: \"scheduling-modals__add-btn\" }, !isEditing && affinities.length > 0 && (React.createElement(Button, { onClick: () => onAffinityClickAdd(), variant: \"secondary\" }, \"Add Affinity rule\")))),\n        isEditing ? (React.createElement(AffinityEdit, { nodes: nodes, affinity: focusedAffinity, onAffinitySubmit: isCreating ? onAffinityAdd : onAffinityChange, onCancel: onCancel })) : (React.createElement(React.Fragment, null,\n            React.createElement(ModalBody, null,\n                affinities.length > 0 && (React.createElement(\"div\", { className: \"scheduling-modals__desc-container\" },\n                    React.createElement(Text, { className: \"scheduling-modals__desc\", component: TextVariants.small }, 'Set scheduling requirements and affect the ranking of the nodes candidate for scheduling.'),\n                    React.createElement(Text, { className: \"scheduling-modals__desc\", component: TextVariants.small }, \"Rules with 'Preferred' condition will stack with an 'AND' relation between them.\"),\n                    React.createElement(Text, { className: \"scheduling-modals__desc\", component: TextVariants.small }, \"Rules with 'Required' condition will stack with an 'OR' relation between them.\"))),\n                affinities.length > 0 ? (React.createElement(AffinityTable, { columnClasses: columnClasses, data: affinities, customData: {\n                        isDisabled: false,\n                        vmLikeFinal,\n                        onEdit: onAffinityClickEdit,\n                        onDelete: onAffinityDelete,\n                    }, row: AffinityRow })) : (React.createElement(EmptyState, { variant: EmptyStateVariant.full },\n                    React.createElement(Title, { headingLevel: \"h5\", size: \"lg\" }, \"No Affinity rules found\"),\n                    React.createElement(EmptyStateBody, null,\n                        React.createElement(\"div\", { className: \"scheduling-modals__desc-container\" },\n                            React.createElement(Text, { className: \"scheduling-modals__desc\", component: TextVariants.small }, 'Set scheduling requirements and affect the ranking of the nodes candidate for scheduling.'),\n                            React.createElement(Text, { className: \"scheduling-modals__desc\", component: TextVariants.small }, \"Rules with 'Preferred' condition will stack with an 'AND' relation between them.\"),\n                            React.createElement(Text, { className: \"scheduling-modals__desc\", component: TextVariants.small }, \"Rules with 'Required' condition will stack with an 'OR' relation between them.\"))),\n                    React.createElement(Button, { variant: \"secondary\", onClick: () => onAffinityClickAdd() }, \"Add Affinity rule\")))),\n            React.createElement(ModalFooter, { id: \"affinity\", className: \"kubevirt-affinity__footer\", errorMessage: errorMessage, inProgress: !isLoaded(nodes) || inProgress, isSimpleError: !!loadError, onSubmit: submit, onCancel: onCancel, submitButtonText: 'Save', infoTitle: showCollisionAlert && 'Affinity has been updated outside this flow.', infoMessage: React.createElement(React.Fragment, null,\n                    \"Saving these changes will override any Affinity previously saved.\",\n                    React.createElement(\"br\", null),\n                    React.createElement(Button, { variant: ButtonVariant.link, isInline: true, onClick: onReload }, \"Reload Affinity\"),\n                    \".\") })))));\n});\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/affinity-modal/affinity-modal.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/affinity-modal/affinity-modal.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport {\n  withHandlePromise,\n  HandlePromiseProps,\n  FirehoseResult,\n} from '@console/internal/components/utils';\nimport {\n  Button,\n  ButtonVariant,\n  Split,\n  SplitItem,\n  Text,\n  TextVariants,\n  EmptyState,\n  EmptyStateVariant,\n  Title,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { ModalTitle, ModalBody, ModalComponentProps } from '@console/internal/components/factory';\nimport { NodeModel } from '@console/internal/models';\nimport { NodeKind, k8sPatch } from '@console/internal/module/k8s';\nimport { VMLikeEntityKind } from '../../../../types/vmLike';\nimport { getVMLikeModel } from '../../../../selectors/vm';\nimport { getVMLikeAffinity } from '../../../../selectors/vm-like/selectors';\nimport { getLoadedData, isLoaded, getLoadError } from '../../../../utils';\nimport { useCollisionChecker } from '../../../../hooks/use-collision-checker';\nimport { ModalFooter } from '../../modal/modal-footer';\nimport { AFFINITY_MODAL_TITLE, AFFINITY_CREATE, AFFINITY_EDITING } from '../shared/consts';\nimport { AffinityTable } from './components/affinity-table/affinity-table';\nimport { AffinityRow } from './components/affinity-table/affinity-row';\nimport { AffinityEdit } from './components/affinity-edit/affinity-edit';\nimport { AffinityRowData } from './types';\nimport {\n  getRowsDataFromAffinity,\n  getAffinityFromRowsData,\n  defaultNewAffinity,\n  columnClasses,\n} from './helpers';\nimport { getAffinityPatch } from '../../../../k8s/patches/vm/vm-scheduling-patches';\n\nimport '../shared/scheduling-modals.scss';\n\nexport const AffinityModal = withHandlePromise<AffinityModalProps>(\n  ({\n    vmLikeEntity,\n    vmLikeEntityLoading,\n    nodes,\n    close,\n    handlePromise,\n    inProgress,\n    errorMessage,\n  }) => {\n    const vmLikeFinal = getLoadedData(vmLikeEntityLoading, vmLikeEntity);\n    const loadError = getLoadError(nodes, NodeModel);\n    const currentAffinity = getVMLikeAffinity(vmLikeFinal);\n\n    const [affinities, setAffinities] = React.useState<AffinityRowData[]>(\n      getRowsDataFromAffinity(currentAffinity),\n    );\n    const [focusedAffinity, setFocusedAffinity] = React.useState<AffinityRowData>(\n      defaultNewAffinity,\n    );\n\n    const [isEditing, setIsEditing] = React.useState(false);\n    const [isCreating, setIsCreating] = React.useState(false);\n    const [showCollisionAlert, reload] = useCollisionChecker<VMLikeEntityKind>(\n      vmLikeFinal,\n      (oldVM: VMLikeEntityKind, newVM: VMLikeEntityKind) =>\n        _.isEqual(getVMLikeAffinity(oldVM), getVMLikeAffinity(newVM)),\n    );\n\n    const onReload = () => {\n      reload();\n      setAffinities(getRowsDataFromAffinity(currentAffinity));\n      setIsCreating(false);\n    };\n\n    const onAffinityAdd = (affinity: AffinityRowData) => {\n      setAffinities([...affinities, affinity]);\n      setIsEditing(false);\n      setIsCreating(false);\n    };\n\n    const onAffinityChange = (updatedAffinity: AffinityRowData) => {\n      setAffinities(\n        affinities.map((affinity) => {\n          if (affinity.id === updatedAffinity.id) return { ...affinity, ...updatedAffinity };\n          return affinity;\n        }),\n      );\n      setIsEditing(false);\n    };\n\n    const onAffinityClickAdd = () => {\n      setIsEditing(true);\n      setIsCreating(true);\n      setFocusedAffinity(defaultNewAffinity);\n    };\n\n    const onAffinityClickEdit = (affinity: AffinityRowData) => {\n      setFocusedAffinity(affinity);\n      setIsEditing(true);\n    };\n\n    const onAffinityDelete = (affinity: AffinityRowData) =>\n      setAffinities(affinities.filter(({ id }) => id !== affinity.id));\n\n    const submit = async () => {\n      if (!_.isEqual(affinities, getRowsDataFromAffinity(currentAffinity))) {\n        // eslint-disable-next-line promise/catch-or-return\n        handlePromise(\n          k8sPatch(\n            getVMLikeModel(vmLikeFinal),\n            vmLikeFinal,\n            await getAffinityPatch(vmLikeFinal, getAffinityFromRowsData(affinities)),\n          ),\n        ).then(close);\n      } else {\n        close();\n      }\n    };\n\n    const onCancel = () => {\n      if (isEditing) {\n        setIsEditing(false);\n        setIsCreating(false);\n      } else {\n        close();\n      }\n    };\n\n    const modalTitle = !isEditing\n      ? AFFINITY_MODAL_TITLE\n      : isCreating\n      ? AFFINITY_CREATE\n      : AFFINITY_EDITING;\n\n    return (\n      <div className=\"modal-content\">\n        <Split>\n          <SplitItem>\n            <ModalTitle>{modalTitle}</ModalTitle>\n          </SplitItem>\n          <SplitItem isFilled />\n          <SplitItem className=\"scheduling-modals__add-btn\">\n            {!isEditing && affinities.length > 0 && (\n              <Button onClick={() => onAffinityClickAdd()} variant=\"secondary\">\n                Add Affinity rule\n              </Button>\n            )}\n          </SplitItem>\n        </Split>\n        {isEditing ? (\n          <AffinityEdit\n            nodes={nodes}\n            affinity={focusedAffinity}\n            onAffinitySubmit={isCreating ? onAffinityAdd : onAffinityChange}\n            onCancel={onCancel}\n          />\n        ) : (\n          <>\n            <ModalBody>\n              {affinities.length > 0 && (\n                <div className=\"scheduling-modals__desc-container\">\n                  <Text className=\"scheduling-modals__desc\" component={TextVariants.small}>\n                    {\n                      'Set scheduling requirements and affect the ranking of the nodes candidate for scheduling.'\n                    }\n                  </Text>\n                  <Text className=\"scheduling-modals__desc\" component={TextVariants.small}>\n                    {\n                      \"Rules with 'Preferred' condition will stack with an 'AND' relation between them.\"\n                    }\n                  </Text>\n\n                  <Text className=\"scheduling-modals__desc\" component={TextVariants.small}>\n                    {\n                      \"Rules with 'Required' condition will stack with an 'OR' relation between them.\"\n                    }\n                  </Text>\n                </div>\n              )}\n              {affinities.length > 0 ? (\n                <AffinityTable\n                  columnClasses={columnClasses}\n                  data={affinities}\n                  customData={{\n                    isDisabled: false,\n                    vmLikeFinal,\n                    onEdit: onAffinityClickEdit,\n                    onDelete: onAffinityDelete,\n                  }}\n                  row={AffinityRow}\n                />\n              ) : (\n                <EmptyState variant={EmptyStateVariant.full}>\n                  <Title headingLevel=\"h5\" size=\"lg\">\n                    No Affinity rules found\n                  </Title>\n                  <EmptyStateBody>\n                    <div className=\"scheduling-modals__desc-container\">\n                      <Text className=\"scheduling-modals__desc\" component={TextVariants.small}>\n                        {\n                          'Set scheduling requirements and affect the ranking of the nodes candidate for scheduling.'\n                        }\n                      </Text>\n                      <Text className=\"scheduling-modals__desc\" component={TextVariants.small}>\n                        {\n                          \"Rules with 'Preferred' condition will stack with an 'AND' relation between them.\"\n                        }\n                      </Text>\n\n                      <Text className=\"scheduling-modals__desc\" component={TextVariants.small}>\n                        {\n                          \"Rules with 'Required' condition will stack with an 'OR' relation between them.\"\n                        }\n                      </Text>\n                    </div>\n                  </EmptyStateBody>\n                  <Button variant=\"secondary\" onClick={() => onAffinityClickAdd()}>\n                    Add Affinity rule\n                  </Button>\n                </EmptyState>\n              )}\n            </ModalBody>\n            <ModalFooter\n              id=\"affinity\"\n              className=\"kubevirt-affinity__footer\"\n              errorMessage={errorMessage}\n              inProgress={!isLoaded(nodes) || inProgress}\n              isSimpleError={!!loadError}\n              onSubmit={submit}\n              onCancel={onCancel}\n              submitButtonText={'Save'}\n              infoTitle={showCollisionAlert && 'Affinity has been updated outside this flow.'}\n              infoMessage={\n                <>\n                  Saving these changes will override any Affinity previously saved.\n                  <br />\n                  <Button variant={ButtonVariant.link} isInline onClick={onReload}>\n                    Reload Affinity\n                  </Button>\n                  .\n                </>\n              }\n            />\n          </>\n        )}\n      </div>\n    );\n  },\n);\n\ntype AffinityModalProps = HandlePromiseProps &\n  ModalComponentProps & {\n    vmLikeEntity: VMLikeEntityKind;\n    nodes?: FirehoseResult<NodeKind[]>;\n    vmLikeEntityLoading?: FirehoseResult<VMLikeEntityKind>;\n  };\n"]}]}