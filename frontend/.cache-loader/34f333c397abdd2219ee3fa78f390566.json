{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/geom/Dimensions.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/geom/Dimensions.ts","mtime":1615298458710},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["export default class Dimensions {\n    constructor(width = 0, height = 0) {\n        this.width = 0;\n        this.height = 0;\n        this.width = width;\n        this.height = height;\n    }\n    static singleUse(width = 0, height = 0) {\n        Dimensions.SINGLETON.width = width;\n        Dimensions.SINGLETON.height = height;\n        return Dimensions.SINGLETON;\n    }\n    static fromDimensions(dimension) {\n        return new Dimensions(dimension.width, dimension.height);\n    }\n    isEmpty() {\n        return this.width <= 0 || this.height <= 0;\n    }\n    setSize(w, h) {\n        this.width = w;\n        this.height = h;\n        return this;\n    }\n    scale(scaleX, scaleY) {\n        const sy = scaleY != null ? scaleY : scaleX;\n        this.width *= scaleX;\n        this.height *= sy;\n        return this;\n    }\n    resize(dw, dh) {\n        this.width += dw;\n        this.height += dh;\n        return this;\n    }\n    expand(h, v) {\n        this.height += v * 2;\n        this.width += h * 2;\n        return this;\n    }\n    clone() {\n        return Dimensions.fromDimensions(this);\n    }\n    equals(r) {\n        return r.width === this.width && r.height === this.height;\n    }\n}\nDimensions.EMPTY = new Dimensions();\nDimensions.SINGLETON = new Dimensions();\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/geom/Dimensions.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/geom/Dimensions.ts"],"names":[],"mappings":"AAEA,MAAM,CAAC,OAAO,OAAO,UAAU;IAmB7B,YAAY,QAAgB,CAAC,EAAE,SAAiB,CAAC;QAhBjD,UAAK,GAAW,CAAC,CAAC;QAElB,WAAM,GAAW,CAAC,CAAC;QAejB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAbD,MAAM,CAAC,SAAS,CAAC,QAAgB,CAAC,EAAE,SAAiB,CAAC;QACpD,UAAU,CAAC,SAAS,CAAC,KAAK,GAAG,KAAK,CAAC;QACnC,UAAU,CAAC,SAAS,CAAC,MAAM,GAAG,MAAM,CAAC;QACrC,OAAO,UAAU,CAAC,SAAS,CAAC;IAC9B,CAAC;IAED,MAAM,CAAC,cAAc,CAAC,SAAsB;QAC1C,OAAO,IAAI,UAAU,CAAC,SAAS,CAAC,KAAK,EAAE,SAAS,CAAC,MAAM,CAAC,CAAC;IAC3D,CAAC;IAOD,OAAO;QACL,OAAO,IAAI,CAAC,KAAK,IAAI,CAAC,IAAI,IAAI,CAAC,MAAM,IAAI,CAAC,CAAC;IAC7C,CAAC;IAED,OAAO,CAAC,CAAS,EAAE,CAAS;QAC1B,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;QACf,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QAChB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK,CAAC,MAAc,EAAE,MAAe;QACnC,MAAM,EAAE,GAAG,MAAM,IAAI,IAAI,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,MAAM,CAAC;QAC5C,IAAI,CAAC,KAAK,IAAI,MAAM,CAAC;QACrB,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC;QAClB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,CAAC,EAAU,EAAE,EAAU;QAC3B,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC;QACjB,IAAI,CAAC,MAAM,IAAI,EAAE,CAAC;QAClB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,MAAM,CAAC,CAAS,EAAE,CAAS;QACzB,IAAI,CAAC,MAAM,IAAI,CAAC,GAAG,CAAC,CAAC;QACrB,IAAI,CAAC,KAAK,IAAI,CAAC,GAAG,CAAC,CAAC;QACpB,OAAO,IAAI,CAAC;IACd,CAAC;IAED,KAAK;QACH,OAAO,UAAU,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;IACzC,CAAC;IAED,MAAM,CAAC,CAAc;QACnB,OAAO,CAAC,CAAC,KAAK,KAAK,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,MAAM,KAAK,IAAI,CAAC,MAAM,CAAC;IAC5D,CAAC;;AA1De,gBAAK,GAAG,IAAI,UAAU,EAAE,CAAC;AAM1B,oBAAS,GAAG,IAAI,UAAU,EAAE,CAAC","sourcesContent":["import { IDimensions } from './types';\n\nexport default class Dimensions implements IDimensions {\n  static readonly EMPTY = new Dimensions();\n\n  width: number = 0;\n\n  height: number = 0;\n\n  private static SINGLETON = new Dimensions();\n\n  static singleUse(width: number = 0, height: number = 0) {\n    Dimensions.SINGLETON.width = width;\n    Dimensions.SINGLETON.height = height;\n    return Dimensions.SINGLETON;\n  }\n\n  static fromDimensions(dimension: IDimensions): Dimensions {\n    return new Dimensions(dimension.width, dimension.height);\n  }\n\n  constructor(width: number = 0, height: number = 0) {\n    this.width = width;\n    this.height = height;\n  }\n\n  isEmpty(): boolean {\n    return this.width <= 0 || this.height <= 0;\n  }\n\n  setSize(w: number, h: number): Dimensions {\n    this.width = w;\n    this.height = h;\n    return this;\n  }\n\n  scale(scaleX: number, scaleY?: number): Dimensions {\n    const sy = scaleY != null ? scaleY : scaleX;\n    this.width *= scaleX;\n    this.height *= sy;\n    return this;\n  }\n\n  resize(dw: number, dh: number): Dimensions {\n    this.width += dw;\n    this.height += dh;\n    return this;\n  }\n\n  expand(h: number, v: number): Dimensions {\n    this.height += v * 2;\n    this.width += h * 2;\n    return this;\n  }\n\n  clone(): Dimensions {\n    return Dimensions.fromDimensions(this);\n  }\n\n  equals(r: IDimensions) {\n    return r.width === this.width && r.height === this.height;\n  }\n}\n"]}]}