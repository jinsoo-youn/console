{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/utils/validation/validation.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/utils/validation/validation.ts","mtime":1616735742380},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { addMissingSubject, joinGrammaticallyListOfItems, makeSentence } from '../grammar';\nimport { ValidationErrorType } from './types';\nimport { DNS1123_END_ERROR, DNS1123_START_END_ERROR, DNS1123_START_ERROR, DNS1123_TOO_LONG_ERROR, EMPTY_ERROR, } from './strings';\nconst alphanumericRegex = '[a-zA-Z0-9]';\nconst alphanumericRegexWithDash = '[-a-zA-Z0-9]';\nconst DNS1123_MAX_LENGTH = 253;\nconst DNS_1123_OFFENDING_CHARACTERS = {\n    ',': 'comma',\n    \"'\": 'apostrophe',\n    _: 'underscore',\n};\nexport const asValidationObject = (message, type = ValidationErrorType.Error) => ({\n    message,\n    type,\n});\nexport const validateEmptyValue = (value, { subject } = { subject: 'Value' }) => {\n    if (!value) {\n        return asValidationObject(addMissingSubject(makeSentence(EMPTY_ERROR, false), subject), ValidationErrorType.TrivialError);\n    }\n    return null;\n};\n// DNS-1123 subdomain\nexport const validateDNS1123SubdomainValue = (value, { subject } = { subject: 'Name' }) => {\n    const emptyError = validateEmptyValue(value, { subject });\n    if (emptyError) {\n        return emptyError;\n    }\n    const forbiddenCharacters = new Set();\n    const validationSentences = [];\n    if (value.length > DNS1123_MAX_LENGTH) {\n        validationSentences.push(DNS1123_TOO_LONG_ERROR);\n    }\n    const startsWithAlphaNumeric = value.charAt(0).match(alphanumericRegex);\n    const endsWithAlphaNumeric = value.charAt(value.length - 1).match(alphanumericRegex);\n    if (!startsWithAlphaNumeric && !endsWithAlphaNumeric) {\n        validationSentences.push(DNS1123_START_END_ERROR);\n    }\n    else if (!startsWithAlphaNumeric) {\n        validationSentences.push(DNS1123_START_ERROR);\n    }\n    else if (!endsWithAlphaNumeric) {\n        validationSentences.push(DNS1123_END_ERROR);\n    }\n    for (const c of value) {\n        if (c.toLowerCase() !== c) {\n            forbiddenCharacters.add('uppercase');\n        }\n        if (!c.match(alphanumericRegexWithDash)) {\n            let offender;\n            if (c.match('\\\\s')) {\n                offender = 'whitespace';\n            }\n            else {\n                offender = DNS_1123_OFFENDING_CHARACTERS[c] || `'${c}'`;\n            }\n            forbiddenCharacters.add(offender);\n        }\n    }\n    let result = null;\n    if (validationSentences.length > 0) {\n        result = makeSentence(joinGrammaticallyListOfItems(validationSentences), false);\n    }\n    if (forbiddenCharacters.size > 0) {\n        const forbiddenChars = joinGrammaticallyListOfItems([...forbiddenCharacters].sort((a, b) => b.length - a.length));\n        const forbiddenCharsSentence = makeSentence(`${forbiddenChars} characters are not allowed`);\n        result = result ? `${result} ${forbiddenCharsSentence}` : forbiddenCharsSentence;\n    }\n    return (result && asValidationObject(addMissingSubject(result, subject), ValidationErrorType.Error));\n};\nexport const alignWithDNS1123 = (str) => {\n    if (!str) {\n        return '';\n    }\n    const chars = str\n        .toLowerCase()\n        .replace(/\\./g, '-')\n        .split('');\n    const firstValidCharIndex = chars.findIndex((c) => c.match(alphanumericRegex));\n    const lastValidCharIndex = _.findLastIndex(chars, (c) => c.match(alphanumericRegex));\n    if (firstValidCharIndex < 0) {\n        return '';\n    }\n    let result = chars\n        .slice(firstValidCharIndex, lastValidCharIndex + 1)\n        .filter((c) => c.match(alphanumericRegexWithDash));\n    if (result.length > DNS1123_MAX_LENGTH) {\n        result = result.slice(0, DNS1123_MAX_LENGTH);\n    }\n    return result.join('');\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/utils/validation/validation.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/utils/validation/validation.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { addMissingSubject, joinGrammaticallyListOfItems, makeSentence } from '../grammar';\nimport { ValidationErrorType, ValidationObject } from './types';\nimport {\n  DNS1123_END_ERROR,\n  DNS1123_START_END_ERROR,\n  DNS1123_START_ERROR,\n  DNS1123_TOO_LONG_ERROR,\n  EMPTY_ERROR,\n} from './strings';\n\nconst alphanumericRegex = '[a-zA-Z0-9]';\nconst alphanumericRegexWithDash = '[-a-zA-Z0-9]';\n\nconst DNS1123_MAX_LENGTH = 253;\n\nconst DNS_1123_OFFENDING_CHARACTERS = {\n  ',': 'comma',\n  \"'\": 'apostrophe', // eslint-disable-line quotes\n  _: 'underscore',\n};\n\nexport const asValidationObject = (\n  message: string,\n  type: ValidationErrorType = ValidationErrorType.Error,\n): ValidationObject => ({\n  message,\n  type,\n});\n\nexport const validateEmptyValue = (\n  value: string,\n  { subject } = { subject: 'Value' },\n): ValidationObject => {\n  if (!value) {\n    return asValidationObject(\n      addMissingSubject(makeSentence(EMPTY_ERROR, false), subject),\n      ValidationErrorType.TrivialError,\n    );\n  }\n  return null;\n};\n\n// DNS-1123 subdomain\nexport const validateDNS1123SubdomainValue = (\n  value: string,\n  { subject } = { subject: 'Name' },\n): ValidationObject => {\n  const emptyError = validateEmptyValue(value, { subject });\n  if (emptyError) {\n    return emptyError;\n  }\n\n  const forbiddenCharacters = new Set<string>();\n  const validationSentences = [];\n\n  if (value.length > DNS1123_MAX_LENGTH) {\n    validationSentences.push(DNS1123_TOO_LONG_ERROR);\n  }\n\n  const startsWithAlphaNumeric = value.charAt(0).match(alphanumericRegex);\n  const endsWithAlphaNumeric = value.charAt(value.length - 1).match(alphanumericRegex);\n\n  if (!startsWithAlphaNumeric && !endsWithAlphaNumeric) {\n    validationSentences.push(DNS1123_START_END_ERROR);\n  } else if (!startsWithAlphaNumeric) {\n    validationSentences.push(DNS1123_START_ERROR);\n  } else if (!endsWithAlphaNumeric) {\n    validationSentences.push(DNS1123_END_ERROR);\n  }\n\n  for (const c of value) {\n    if (c.toLowerCase() !== c) {\n      forbiddenCharacters.add('uppercase');\n    }\n\n    if (!c.match(alphanumericRegexWithDash)) {\n      let offender;\n      if (c.match('\\\\s')) {\n        offender = 'whitespace';\n      } else {\n        offender = DNS_1123_OFFENDING_CHARACTERS[c] || `'${c}'`;\n      }\n\n      forbiddenCharacters.add(offender);\n    }\n  }\n\n  let result = null;\n\n  if (validationSentences.length > 0) {\n    result = makeSentence(joinGrammaticallyListOfItems(validationSentences), false);\n  }\n\n  if (forbiddenCharacters.size > 0) {\n    const forbiddenChars = joinGrammaticallyListOfItems(\n      [...forbiddenCharacters].sort((a, b) => b.length - a.length),\n    );\n    const forbiddenCharsSentence = makeSentence(`${forbiddenChars} characters are not allowed`);\n    result = result ? `${result} ${forbiddenCharsSentence}` : forbiddenCharsSentence;\n  }\n\n  return (\n    result && asValidationObject(addMissingSubject(result, subject), ValidationErrorType.Error)\n  );\n};\n\nexport const alignWithDNS1123 = (str) => {\n  if (!str) {\n    return '';\n  }\n\n  const chars = str\n    .toLowerCase()\n    .replace(/\\./g, '-')\n    .split('');\n\n  const firstValidCharIndex = chars.findIndex((c) => c.match(alphanumericRegex));\n  const lastValidCharIndex = _.findLastIndex(chars, (c: string) => c.match(alphanumericRegex));\n\n  if (firstValidCharIndex < 0) {\n    return '';\n  }\n\n  let result = chars\n    .slice(firstValidCharIndex, lastValidCharIndex + 1)\n    .filter((c) => c.match(alphanumericRegexWithDash));\n\n  if (result.length > DNS1123_MAX_LENGTH) {\n    result = result.slice(0, DNS1123_MAX_LENGTH);\n  }\n\n  return result.join('');\n};\n"]}]}