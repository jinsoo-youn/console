{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/edges/ConnectsTo.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/edges/ConnectsTo.tsx","mtime":1617154808370},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { observer, EdgeConnectorArrow } from '@console/topology';\nimport { modelFor, referenceFor } from '@console/internal/module/k8s';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport { getTopologyResourceObject } from '../../topology-utils';\nimport { BaseEdge } from './BaseEdge';\nimport './ConnectsTo.scss';\nconst ObservedConnectsTo = (_a) => {\n    var { element, targetDragRef, children } = _a, others = __rest(_a, [\"element\", \"targetDragRef\", \"children\"]);\n    const childEdges = element.getChildren();\n    const sourceData = (childEdges === null || childEdges === void 0 ? void 0 : childEdges.length) > 0 ? childEdges[0].getSource().getData() : element.getSource().getData();\n    const resourceObj = getTopologyResourceObject(sourceData);\n    const resourceModel = modelFor(referenceFor(resourceObj));\n    const editAccess = useAccessReview({\n        group: resourceModel.apiGroup,\n        verb: 'patch',\n        resource: resourceModel.plural,\n        name: resourceObj.metadata.name,\n        namespace: resourceObj.metadata.namespace,\n    });\n    const edgeClasses = classNames('odc-connects-to', { 'odc-m-editable': editAccess });\n    return (React.createElement(BaseEdge, Object.assign({ className: edgeClasses, element: element }, others),\n        React.createElement(EdgeConnectorArrow, { dragRef: editAccess ? targetDragRef : undefined, edge: element }),\n        children));\n};\nconst ConnectsTo = observer(ObservedConnectsTo);\nexport { ConnectsTo };\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/edges/ConnectsTo.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/edges/ConnectsTo.tsx"],"names":[],"mappings":";;;;;;;;;;;AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,UAAU,MAAM,YAAY,CAAC;AACzC,OAAO,EAA4E,QAAQ,EAAE,kBAAkB,EAAE,MAAM,mBAAmB,CAAC;AAC3I,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE,MAAM,8BAA8B,CAAC;AACtE,OAAO,EAAE,eAAe,EAAE,MAAM,oCAAoC,CAAC;AACrE,OAAO,EAAE,yBAAyB,EAAE,MAAM,sBAAsB,CAAC;AACjE,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AACtC,OAAO,mBAAmB,CAAC;AAS3B,MAAM,kBAAkB,GAA8B,CAAC,EAA+C,EAAE,EAAE;QAAnD,EAAE,OAAO,EAAE,aAAa,EAAE,QAAQ,OAAa,EAAX,6DAAS;IAClG,MAAM,UAAU,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;IACzC,MAAM,UAAU,GAAG,CAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,MAAM,IAAG,CAAC,CAAC,CAAC,CAAE,UAAU,CAAC,CAAC,CAAU,CAAC,SAAS,EAAE,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,OAAO,EAAE,CAAC;IAC1H,MAAM,WAAW,GAAG,yBAAyB,CAAC,UAAU,CAAC,CAAC;IAC1D,MAAM,aAAa,GAAG,QAAQ,CAAC,YAAY,CAAC,WAAW,CAAC,CAAC,CAAC;IAC1D,MAAM,UAAU,GAAG,eAAe,CAAC;QACjC,KAAK,EAAE,aAAa,CAAC,QAAQ;QAC7B,IAAI,EAAE,OAAO;QACb,QAAQ,EAAE,aAAa,CAAC,MAAM;QAC9B,IAAI,EAAE,WAAW,CAAC,QAAQ,CAAC,IAAI;QAC/B,SAAS,EAAE,WAAW,CAAC,QAAQ,CAAC,SAAS;KAC1C,CAAC,CAAC;IACH,MAAM,WAAW,GAAG,UAAU,CAAC,iBAAiB,EAAE,EAAE,gBAAgB,EAAE,UAAU,EAAE,CAAC,CAAC;IAEpF,OAAO,CACL,oBAAC,QAAQ,kBAAC,SAAS,EAAE,WAAW,EAAE,OAAO,EAAE,OAAO,IAAM,MAAM;QAC5D,oBAAC,kBAAkB,IAAC,OAAO,EAAE,UAAU,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,SAAS,EAAE,IAAI,EAAE,OAAO,GAAI;QACrF,QAAQ,CACA,CACZ,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,UAAU,GAAG,QAAQ,CAAC,kBAAkB,CAAC,CAAC;AAChD,OAAO,EAAE,UAAU,EAAE,CAAC","sourcesContent":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { WithSourceDragProps, WithTargetDragProps, WithRemoveConnectorProps, Edge, observer, EdgeConnectorArrow } from '@console/topology';\nimport { modelFor, referenceFor } from '@console/internal/module/k8s';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport { getTopologyResourceObject } from '../../topology-utils';\nimport { BaseEdge } from './BaseEdge';\nimport './ConnectsTo.scss';\n\ntype ConnectsToProps = {\n  element: Edge;\n  dragging?: boolean;\n} & WithSourceDragProps &\n  WithTargetDragProps &\n  WithRemoveConnectorProps;\n\nconst ObservedConnectsTo: React.FC<ConnectsToProps> = ({ element, targetDragRef, children, ...others }) => {\n  const childEdges = element.getChildren();\n  const sourceData = childEdges?.length > 0 ? (childEdges[0] as Edge).getSource().getData() : element.getSource().getData();\n  const resourceObj = getTopologyResourceObject(sourceData);\n  const resourceModel = modelFor(referenceFor(resourceObj));\n  const editAccess = useAccessReview({\n    group: resourceModel.apiGroup,\n    verb: 'patch',\n    resource: resourceModel.plural,\n    name: resourceObj.metadata.name,\n    namespace: resourceObj.metadata.namespace,\n  });\n  const edgeClasses = classNames('odc-connects-to', { 'odc-m-editable': editAccess });\n\n  return (\n    <BaseEdge className={edgeClasses} element={element} {...others}>\n      <EdgeConnectorArrow dragRef={editAccess ? targetDragRef : undefined} edge={element} />\n      {children}\n    </BaseEdge>\n  );\n};\n\nconst ConnectsTo = observer(ObservedConnectsTo);\nexport { ConnectsTo };\n"]}]}