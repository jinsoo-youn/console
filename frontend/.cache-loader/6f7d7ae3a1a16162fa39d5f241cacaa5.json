{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/image-stream-tag.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/image-stream-tag.tsx","mtime":1615298458740},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { ImageStreamTagModel } from '../models';\nimport { DetailsPage } from './factory';\nimport { Kebab, SectionHeading, navFactory, ResourceSummary } from './utils';\nimport { humanizeBinaryBytes } from './utils/units';\nimport { ExampleDockerCommandPopover } from './image-stream';\nimport { ImageStreamTimeline } from './image-stream-timeline';\nconst ImageStreamTagsReference = 'ImageStreamTag';\nconst ImageStreamsReference = 'ImageStream';\nconst { common } = Kebab.factory;\nconst menuActions = [...Kebab.getExtensionsActionsForKind(ImageStreamTagModel), ...common];\n// Splits a name/value pair separated by an `=`\nconst splitEnv = (nameValue) => {\n    // Use this method instead of `String.split()` so we only split on the first `=`.\n    const i = nameValue.indexOf('=');\n    if (i === -1) {\n        return {\n            name: nameValue,\n            value: '',\n        };\n    }\n    return {\n        name: nameValue.substring(0, i),\n        value: nameValue.substring(i + 1),\n    };\n};\nexport const ImageStreamTagsDetails = ({ obj: imageStreamTag, imageStream, }) => {\n    const config = _.get(imageStreamTag, 'image.dockerImageMetadata.Config', {});\n    const labels = config.Labels || {};\n    // Convert to an array of objects with name and value properties, then sort the array for display.\n    const labelsArray = _.map(labels, (value, name) => ({ name, value }));\n    const sortedLabels = _.sortBy(labelsArray, 'name');\n    const entrypoint = (config.Entrypoint || []).join(' ');\n    const cmd = (config.Cmd || []).join(' ');\n    const exposedPorts = _.keys(config.ExposedPorts).join(', ');\n    const size = _.get(imageStreamTag, 'image.dockerImageMetadata.Size');\n    const humanizedSize = _.isFinite(size) && humanizeBinaryBytes(size).string;\n    const architecture = _.get(imageStreamTag, 'image.dockerImageMetadata.Architecture');\n    const tagName = _.get(imageStreamTag, 'tag.name');\n    return (React.createElement(\"div\", { className: \"co-m-pane__body\" },\n        React.createElement(\"div\", { className: \"co-m-pane__body-group\" },\n            React.createElement(\"div\", { className: \"row\" },\n                React.createElement(\"div\", { className: \"col-md-6 col-sm-12\" },\n                    React.createElement(SectionHeading, { text: \"Image Details\" }),\n                    React.createElement(ResourceSummary, { resource: imageStreamTag },\n                        labels.name && React.createElement(\"dt\", null, \"Image Name\"),\n                        labels.name && React.createElement(\"dd\", null, labels.name),\n                        labels.summary && React.createElement(\"dt\", null, \"Summary\"),\n                        labels.summary && React.createElement(\"dd\", null, labels.summary),\n                        humanizedSize && React.createElement(\"dt\", null, \"Size\"),\n                        humanizedSize && React.createElement(\"dd\", null, humanizedSize)),\n                    React.createElement(ExampleDockerCommandPopover, { imageStream: imageStream, tag: tagName })),\n                React.createElement(\"div\", { className: \"col-md-6 col-sm-12\" },\n                    React.createElement(SectionHeading, { text: \"Configuration\" }),\n                    React.createElement(\"dl\", { className: \"co-m-pane__details\" },\n                        entrypoint && React.createElement(\"dt\", null, \"Entrypoint\"),\n                        entrypoint && React.createElement(\"dd\", { className: \"co-break-word\" }, entrypoint),\n                        cmd && React.createElement(\"dt\", null, \"Command\"),\n                        cmd && React.createElement(\"dd\", { className: \"co-break-word\" }, cmd),\n                        config.WorkingDir && React.createElement(\"dt\", null, \"Working Dir\"),\n                        config.WorkingDir && React.createElement(\"dd\", { className: \"co-break-all\" }, config.WorkingDir),\n                        exposedPorts && React.createElement(\"dt\", null, \"Exposed Ports\"),\n                        exposedPorts && React.createElement(\"dd\", { className: \"co-break-word\" }, exposedPorts),\n                        config.User && React.createElement(\"dt\", null, \"User\"),\n                        config.User && React.createElement(\"dd\", null, config.User),\n                        architecture && React.createElement(\"dt\", null, \"Architecture\"),\n                        architecture && React.createElement(\"dd\", null, architecture))))),\n        React.createElement(\"div\", { className: \"co-m-pane__body-group\" },\n            React.createElement(SectionHeading, { text: \"Image Labels\" }),\n            _.isEmpty(sortedLabels) ? (React.createElement(\"span\", { className: \"text-muted\" }, \"No labels\")) : (React.createElement(\"div\", { className: \"co-table-container\" },\n                React.createElement(\"table\", { className: \"table\" },\n                    React.createElement(\"thead\", null,\n                        React.createElement(\"tr\", null,\n                            React.createElement(\"th\", null, \"Name\"),\n                            React.createElement(\"th\", null, \"Value\"))),\n                    React.createElement(\"tbody\", null, _.map(sortedLabels, ({ name, value }) => (React.createElement(\"tr\", { key: name },\n                        React.createElement(\"td\", null, name),\n                        React.createElement(\"td\", null, value))))))))),\n        React.createElement(\"div\", { className: \"co-m-pane__body-group\" },\n            React.createElement(SectionHeading, { text: \"Environment Variables\" }),\n            _.isEmpty(config.Env) ? (React.createElement(\"span\", { className: \"text-muted\" }, \"No environment variables\")) : (React.createElement(\"div\", { className: \"co-table-container\" },\n                React.createElement(\"table\", { className: \"table\" },\n                    React.createElement(\"thead\", null,\n                        React.createElement(\"tr\", null,\n                            React.createElement(\"th\", null, \"Name\"),\n                            React.createElement(\"th\", null, \"Value\"))),\n                    React.createElement(\"tbody\", null, _.map(config.Env, (nameValueStr, i) => {\n                        const pair = splitEnv(nameValueStr);\n                        return (React.createElement(\"tr\", { key: i },\n                            React.createElement(\"td\", null, pair.name),\n                            React.createElement(\"td\", null, pair.value)));\n                    }))))))));\n};\nconst parseName = (nameAndTag) => {\n    return nameAndTag.split(':')[0];\n};\nconst getImageStreamNameAndTag = (imageStreamTag) => {\n    const imageStreamTagName = _.get(imageStreamTag, 'metadata.name') || '';\n    const [imageStreamName, tag] = imageStreamTagName.split(':');\n    return { imageStreamName, tag };\n};\nconst ImageStreamTagHistory = ({ obj: imageStreamTag, imageStream, }) => {\n    const { tag } = getImageStreamNameAndTag(imageStreamTag);\n    const imageStreamStatusTags = _.filter(_.get(imageStream, 'status.tags'), (i) => i.tag === tag);\n    return (React.createElement(ImageStreamTimeline, { imageStreamTags: imageStreamStatusTags, imageStreamName: imageStream.metadata.name, imageStreamNamespace: imageStream.metadata.namespace }));\n};\nImageStreamTagHistory.displayName = 'ImageStreamTagHistory';\nconst pages = [\n    navFactory.details(ImageStreamTagsDetails),\n    navFactory.editYaml(),\n    navFactory.history(ImageStreamTagHistory),\n];\nexport const ImageStreamTagsDetailsPage = (props) => (React.createElement(DetailsPage, Object.assign({}, props, { breadcrumbsFor: (obj) => {\n        const { imageStreamName } = getImageStreamNameAndTag(obj);\n        return [\n            { name: 'Image Streams', path: `/k8s/ns/${props.match.params.ns}/imagestreams` },\n            {\n                name: imageStreamName,\n                path: `/k8s/ns/${props.match.params.ns}/imagestreams/${imageStreamName}`,\n            },\n            {\n                name: 'Image Stream Tag Details',\n                path: props.match.url,\n            },\n        ];\n    }, kind: ImageStreamTagsReference, menuActions: menuActions, resources: [\n        {\n            kind: ImageStreamsReference,\n            name: parseName(props.name),\n            namespace: props.namespace,\n            isList: false,\n            prop: 'imageStream',\n        },\n    ], pages: pages })));\nImageStreamTagsDetailsPage.displayName = 'ImageStreamTagsDetailsPage';\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/image-stream-tag.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/image-stream-tag.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\n\nimport { K8sResourceKind, K8sResourceKindReference } from '../module/k8s';\nimport { ImageStreamTagModel } from '../models';\nimport { DetailsPage } from './factory';\nimport { Kebab, SectionHeading, navFactory, ResourceSummary } from './utils';\nimport { humanizeBinaryBytes } from './utils/units';\nimport { ExampleDockerCommandPopover } from './image-stream';\nimport { ImageStreamTimeline } from './image-stream-timeline';\n\nconst ImageStreamTagsReference: K8sResourceKindReference = 'ImageStreamTag';\nconst ImageStreamsReference: K8sResourceKindReference = 'ImageStream';\n\nconst { common } = Kebab.factory;\nconst menuActions = [...Kebab.getExtensionsActionsForKind(ImageStreamTagModel), ...common];\n\n// Splits a name/value pair separated by an `=`\nconst splitEnv = (nameValue: string) => {\n  // Use this method instead of `String.split()` so we only split on the first `=`.\n  const i = nameValue.indexOf('=');\n  if (i === -1) {\n    return {\n      name: nameValue,\n      value: '',\n    };\n  }\n\n  return {\n    name: nameValue.substring(0, i),\n    value: nameValue.substring(i + 1),\n  };\n};\n\nexport const ImageStreamTagsDetails: React.SFC<ImageStreamTagsDetailsProps> = ({\n  obj: imageStreamTag,\n  imageStream,\n}) => {\n  const config = _.get(imageStreamTag, 'image.dockerImageMetadata.Config', {});\n  const labels = config.Labels || {};\n  // Convert to an array of objects with name and value properties, then sort the array for display.\n  const labelsArray = _.map(labels, (value, name) => ({ name, value }));\n  const sortedLabels = _.sortBy(labelsArray, 'name');\n  const entrypoint = (config.Entrypoint || []).join(' ');\n  const cmd = (config.Cmd || []).join(' ');\n  const exposedPorts = _.keys(config.ExposedPorts).join(', ');\n  const size = _.get(imageStreamTag, 'image.dockerImageMetadata.Size');\n  const humanizedSize = _.isFinite(size) && humanizeBinaryBytes(size).string;\n  const architecture = _.get(imageStreamTag, 'image.dockerImageMetadata.Architecture');\n  const tagName = _.get(imageStreamTag, 'tag.name');\n\n  return (\n    <div className=\"co-m-pane__body\">\n      <div className=\"co-m-pane__body-group\">\n        <div className=\"row\">\n          <div className=\"col-md-6 col-sm-12\">\n            <SectionHeading text=\"Image Details\" />\n            <ResourceSummary resource={imageStreamTag}>\n              {labels.name && <dt>Image Name</dt>}\n              {labels.name && <dd>{labels.name}</dd>}\n              {labels.summary && <dt>Summary</dt>}\n              {labels.summary && <dd>{labels.summary}</dd>}\n              {humanizedSize && <dt>Size</dt>}\n              {humanizedSize && <dd>{humanizedSize}</dd>}\n            </ResourceSummary>\n            <ExampleDockerCommandPopover imageStream={imageStream} tag={tagName} />\n          </div>\n          <div className=\"col-md-6 col-sm-12\">\n            <SectionHeading text=\"Configuration\" />\n            <dl className=\"co-m-pane__details\">\n              {entrypoint && <dt>Entrypoint</dt>}\n              {entrypoint && <dd className=\"co-break-word\">{entrypoint}</dd>}\n              {cmd && <dt>Command</dt>}\n              {cmd && <dd className=\"co-break-word\">{cmd}</dd>}\n              {config.WorkingDir && <dt>Working Dir</dt>}\n              {config.WorkingDir && <dd className=\"co-break-all\">{config.WorkingDir}</dd>}\n              {exposedPorts && <dt>Exposed Ports</dt>}\n              {exposedPorts && <dd className=\"co-break-word\">{exposedPorts}</dd>}\n              {config.User && <dt>User</dt>}\n              {config.User && <dd>{config.User}</dd>}\n              {architecture && <dt>Architecture</dt>}\n              {architecture && <dd>{architecture}</dd>}\n            </dl>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body-group\">\n        <SectionHeading text=\"Image Labels\" />\n        {_.isEmpty(sortedLabels) ? (\n          <span className=\"text-muted\">No labels</span>\n        ) : (\n          <div className=\"co-table-container\">\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Value</th>\n                </tr>\n              </thead>\n              <tbody>\n                {_.map(sortedLabels, ({ name, value }) => (\n                  <tr key={name}>\n                    <td>{name}</td>\n                    <td>{value}</td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </div>\n      <div className=\"co-m-pane__body-group\">\n        <SectionHeading text=\"Environment Variables\" />\n        {_.isEmpty(config.Env) ? (\n          <span className=\"text-muted\">No environment variables</span>\n        ) : (\n          <div className=\"co-table-container\">\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th>Name</th>\n                  <th>Value</th>\n                </tr>\n              </thead>\n              <tbody>\n                {_.map(config.Env, (nameValueStr, i) => {\n                  const pair = splitEnv(nameValueStr);\n                  return (\n                    <tr key={i}>\n                      <td>{pair.name}</td>\n                      <td>{pair.value}</td>\n                    </tr>\n                  );\n                })}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst parseName = (nameAndTag: string): string => {\n  return nameAndTag.split(':')[0];\n};\n\nconst getImageStreamNameAndTag = (imageStreamTag: K8sResourceKind) => {\n  const imageStreamTagName: string = _.get(imageStreamTag, 'metadata.name') || '';\n  const [imageStreamName, tag] = imageStreamTagName.split(':');\n  return { imageStreamName, tag };\n};\n\nconst ImageStreamTagHistory: React.FC<ImageStreamTagHistoryProps> = ({\n  obj: imageStreamTag,\n  imageStream,\n}) => {\n  const { tag } = getImageStreamNameAndTag(imageStreamTag);\n  const imageStreamStatusTags = _.filter(_.get(imageStream, 'status.tags'), (i) => i.tag === tag);\n  return (\n    <ImageStreamTimeline\n      imageStreamTags={imageStreamStatusTags}\n      imageStreamName={imageStream.metadata.name}\n      imageStreamNamespace={imageStream.metadata.namespace}\n    />\n  );\n};\nImageStreamTagHistory.displayName = 'ImageStreamTagHistory';\n\nconst pages = [\n  navFactory.details(ImageStreamTagsDetails),\n  navFactory.editYaml(),\n  navFactory.history(ImageStreamTagHistory),\n];\nexport const ImageStreamTagsDetailsPage: React.SFC<ImageStreamTagsDetailsPageProps> = (props) => (\n  <DetailsPage\n    {...props}\n    breadcrumbsFor={(obj) => {\n      const { imageStreamName } = getImageStreamNameAndTag(obj);\n      return [\n        { name: 'Image Streams', path: `/k8s/ns/${props.match.params.ns}/imagestreams` },\n        {\n          name: imageStreamName,\n          path: `/k8s/ns/${props.match.params.ns}/imagestreams/${imageStreamName}`,\n        },\n        {\n          name: 'Image Stream Tag Details',\n          path: props.match.url,\n        },\n      ];\n    }}\n    kind={ImageStreamTagsReference}\n    menuActions={menuActions}\n    resources={[\n      {\n        kind: ImageStreamsReference,\n        name: parseName(props.name),\n        namespace: props.namespace,\n        isList: false,\n        prop: 'imageStream',\n      },\n    ]}\n    pages={pages}\n  />\n);\nImageStreamTagsDetailsPage.displayName = 'ImageStreamTagsDetailsPage';\n\ntype ImageStreamTagHistoryProps = {\n  imageStream: K8sResourceKind;\n  obj: K8sResourceKind;\n};\n\nexport type ImageStreamTagsDetailsProps = {\n  obj: K8sResourceKind;\n  imageStream: K8sResourceKind;\n};\n\nexport type ImageStreamTagsDetailsPageProps = {\n  match: any;\n  namespace: string;\n  name: string;\n};\n"]}]}