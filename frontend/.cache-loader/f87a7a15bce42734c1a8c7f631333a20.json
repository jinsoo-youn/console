{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/health-checks/health-checks-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/health-checks/health-checks-utils.ts","mtime":1615298458610},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { getProbesData } from './create-health-checks-probe-utils';\nimport { getResourcesType } from '../edit-application/edit-application-utils';\nimport { HealthChecksProbeType } from './health-checks-types';\nexport const updateHealthChecksProbe = (values, resource, container) => {\n    const { healthChecks: { readinessProbe, livenessProbe, startupProbe }, containerName, healthChecks, } = values;\n    const updatedResource = _.cloneDeep(resource);\n    const containerIndex = _.findIndex(updatedResource.spec.template.spec.containers, [\n        'name',\n        containerName,\n    ]);\n    updatedResource.spec.template.spec.containers[containerIndex] = Object.assign(Object.assign({}, container), getProbesData(healthChecks, getResourcesType(resource)));\n    if (!readinessProbe.enabled) {\n        updatedResource.spec.template.spec.containers[containerIndex] = _.omit(updatedResource.spec.template.spec.containers[containerIndex], `${HealthChecksProbeType.ReadinessProbe}`);\n    }\n    if (!livenessProbe.enabled) {\n        updatedResource.spec.template.spec.containers[containerIndex] = _.omit(updatedResource.spec.template.spec.containers[containerIndex], `${HealthChecksProbeType.LivenessProbe}`);\n    }\n    if (!startupProbe.enabled) {\n        updatedResource.spec.template.spec.containers[containerIndex] = _.omit(updatedResource.spec.template.spec.containers[containerIndex], `${HealthChecksProbeType.StartupProbe}`);\n    }\n    return updatedResource;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/health-checks/health-checks-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/health-checks/health-checks-utils.ts"],"names":[],"mappings":"AACA,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,aAAa,EAAE,MAAM,oCAAoC,CAAC;AACnE,OAAO,EAAE,gBAAgB,EAAE,MAAM,4CAA4C,CAAC;AAC9E,OAAO,EAAE,qBAAqB,EAAE,MAAM,uBAAuB,CAAC;AAE9D,MAAM,CAAC,MAAM,uBAAuB,GAAG,CACrC,MAAM,EACN,QAAyB,EACzB,SAAwB,EACP,EAAE;IACnB,MAAM,EACJ,YAAY,EAAE,EAAE,cAAc,EAAE,aAAa,EAAE,YAAY,EAAE,EAC7D,aAAa,EACb,YAAY,GACb,GAAG,MAAM,CAAC;IACX,MAAM,eAAe,GAAG,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,CAAC;IAC9C,MAAM,cAAc,GAAG,CAAC,CAAC,SAAS,CAAC,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE;QAChF,MAAM;QACN,aAAa;KACd,CAAC,CAAC;IACH,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,mCACxD,SAAS,GACT,aAAa,CAAC,YAAY,EAAE,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAC3D,CAAC;IAEF,IAAI,CAAC,cAAc,CAAC,OAAO,EAAE;QAC3B,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,IAAI,CACpE,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,EAC7D,GAAG,qBAAqB,CAAC,cAAc,EAAE,CAC1C,CAAC;KACH;IAED,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE;QAC1B,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,IAAI,CACpE,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,EAC7D,GAAG,qBAAqB,CAAC,aAAa,EAAE,CACzC,CAAC;KACH;IAED,IAAI,CAAC,YAAY,CAAC,OAAO,EAAE;QACzB,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,GAAG,CAAC,CAAC,IAAI,CACpE,eAAe,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,cAAc,CAAC,EAC7D,GAAG,qBAAqB,CAAC,YAAY,EAAE,CACxC,CAAC;KACH;IAED,OAAO,eAAe,CAAC;AACzB,CAAC,CAAC","sourcesContent":["import { K8sResourceKind, ContainerSpec } from '@console/internal/module/k8s';\nimport * as _ from 'lodash';\nimport { getProbesData } from './create-health-checks-probe-utils';\nimport { getResourcesType } from '../edit-application/edit-application-utils';\nimport { HealthChecksProbeType } from './health-checks-types';\n\nexport const updateHealthChecksProbe = (\n  values,\n  resource: K8sResourceKind,\n  container: ContainerSpec,\n): K8sResourceKind => {\n  const {\n    healthChecks: { readinessProbe, livenessProbe, startupProbe },\n    containerName,\n    healthChecks,\n  } = values;\n  const updatedResource = _.cloneDeep(resource);\n  const containerIndex = _.findIndex(updatedResource.spec.template.spec.containers, [\n    'name',\n    containerName,\n  ]);\n  updatedResource.spec.template.spec.containers[containerIndex] = {\n    ...container,\n    ...getProbesData(healthChecks, getResourcesType(resource)),\n  };\n\n  if (!readinessProbe.enabled) {\n    updatedResource.spec.template.spec.containers[containerIndex] = _.omit(\n      updatedResource.spec.template.spec.containers[containerIndex],\n      `${HealthChecksProbeType.ReadinessProbe}`,\n    );\n  }\n\n  if (!livenessProbe.enabled) {\n    updatedResource.spec.template.spec.containers[containerIndex] = _.omit(\n      updatedResource.spec.template.spec.containers[containerIndex],\n      `${HealthChecksProbeType.LivenessProbe}`,\n    );\n  }\n\n  if (!startupProbe.enabled) {\n    updatedResource.spec.template.spec.containers[containerIndex] = _.omit(\n      updatedResource.spec.template.spec.containers[containerIndex],\n      `${HealthChecksProbeType.StartupProbe}`,\n    );\n  }\n\n  return updatedResource;\n};\n"]}]}