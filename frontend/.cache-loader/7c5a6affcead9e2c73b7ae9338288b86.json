{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/disk-modal/storage-ui-source.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/disk-modal/storage-ui-source.ts","mtime":1616735742420},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["/* eslint-disable lines-between-class-members */\nimport { ObjectEnum, VolumeType } from '../../../constants';\nimport { DataVolumeSourceType, DiskType } from '../../../constants/vm/storage';\nimport { getStringEnumValues } from '../../../utils/types';\nimport { BinaryUnit } from '../../form/size-unit-utils';\nexport class StorageUISource extends ObjectEnum {\n    constructor(value, volumeType, dataVolumeSourceType, hasNewPVC = false) {\n        super(value);\n        this.getVolumeType = () => this.volumeType;\n        this.getDataVolumeSourceType = () => this.dataVolumeSourceType;\n        this.getAllowedUnits = () => this === StorageUISource.IMPORT_DISK\n            ? getStringEnumValues(BinaryUnit)\n            : [BinaryUnit.Mi, BinaryUnit.Gi, BinaryUnit.Ti];\n        this.requiresPVC = () => this === StorageUISource.ATTACH_DISK || this === StorageUISource.ATTACH_CLONED_DISK;\n        this.requiresNewPVC = () => this.hasNewPVC;\n        this.requiresContainerImage = () => this === StorageUISource.CONTAINER;\n        this.requiresURL = () => this === StorageUISource.URL;\n        this.requiresSize = () => this.requiresDatavolume() || this.hasNewPVC;\n        this.requiresStorageClass = () => this.requiresDatavolume() || this.hasNewPVC;\n        this.requiresVolumeType = () => !!this.volumeType;\n        this.requiresDatavolume = () => !!this.dataVolumeSourceType;\n        this.requiresNamespace = () => this === StorageUISource.ATTACH_CLONED_DISK;\n        this.requiresAccessModes = () => this !== StorageUISource.ATTACH_DISK &&\n            this !== StorageUISource.CONTAINER &&\n            this !== StorageUISource.OTHER;\n        this.requiresVolumeMode = () => this !== StorageUISource.ATTACH_DISK &&\n            this !== StorageUISource.CONTAINER &&\n            this !== StorageUISource.OTHER;\n        this.requiresVolumeModeOrAccessModes = () => this.requiresAccessModes() || this.requiresVolumeMode();\n        this.isNameEditingSupported = (diskType) => diskType !== DiskType.CDROM;\n        this.isSizeEditingSupported = (size) => size === 0 || this !== StorageUISource.IMPORT_DISK; // if imported disk has 0 size, leave the user to decide\n        this.isPlainDataVolume = (isCreateTemplate) => isCreateTemplate && this === StorageUISource.URL;\n        this.hasDynamicSize = () => this === StorageUISource.CONTAINER;\n        this.canBeChangedToThisSource = (diskType) => {\n            if (diskType === DiskType.CDROM) {\n                return (this === StorageUISource.ATTACH_DISK ||\n                    this === StorageUISource.URL ||\n                    this === StorageUISource.CONTAINER);\n            }\n            return this !== StorageUISource.IMPORT_DISK && this !== StorageUISource.OTHER;\n        };\n        this.volumeType = volumeType;\n        this.dataVolumeSourceType = dataVolumeSourceType;\n        this.hasNewPVC = hasNewPVC;\n    }\n}\nStorageUISource.BLANK = new StorageUISource('Blank', VolumeType.DATA_VOLUME, DataVolumeSourceType.BLANK);\nStorageUISource.URL = new StorageUISource('URL', VolumeType.DATA_VOLUME, DataVolumeSourceType.HTTP);\nStorageUISource.CONTAINER = new StorageUISource('Container', VolumeType.CONTAINER_DISK);\nStorageUISource.ATTACH_CLONED_DISK = new StorageUISource('Attach Cloned Disk', VolumeType.DATA_VOLUME, DataVolumeSourceType.PVC);\nStorageUISource.ATTACH_DISK = new StorageUISource('Attach Disk', VolumeType.PERSISTENT_VOLUME_CLAIM, undefined);\nStorageUISource.IMPORT_DISK = new StorageUISource('Import Disk', VolumeType.PERSISTENT_VOLUME_CLAIM, undefined, true);\nStorageUISource.OTHER = new StorageUISource('Other');\nStorageUISource.ALL = Object.freeze(ObjectEnum.getAllClassEnumProperties(StorageUISource));\nStorageUISource.stringMapper = StorageUISource.ALL.reduce((accumulator, volumeType) => (Object.assign(Object.assign({}, accumulator), { [volumeType.value]: volumeType })), {});\nStorageUISource.getAll = () => StorageUISource.ALL;\nStorageUISource.fromString = (model) => StorageUISource.stringMapper[model];\nStorageUISource.fromTypes = (volumeType, dataVolumeSourceType, hasNewPVC = false) => StorageUISource.ALL.find((storageUIType) => storageUIType !== StorageUISource.OTHER &&\n    storageUIType.volumeType == volumeType && // eslint-disable-line eqeqeq\n    storageUIType.dataVolumeSourceType == dataVolumeSourceType && // eslint-disable-line eqeqeq\n    storageUIType.hasNewPVC == hasNewPVC) || StorageUISource.OTHER;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/disk-modal/storage-ui-source.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/disk-modal/storage-ui-source.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable lines-between-class-members */\n\nimport { ObjectEnum, VolumeType } from '../../../constants';\nimport { DataVolumeSourceType, DiskType } from '../../../constants/vm/storage';\nimport { getStringEnumValues } from '../../../utils/types';\nimport { BinaryUnit } from '../../form/size-unit-utils';\n\nexport class StorageUISource extends ObjectEnum<string> {\n  static readonly BLANK = new StorageUISource(\n    'Blank',\n    VolumeType.DATA_VOLUME,\n    DataVolumeSourceType.BLANK,\n  );\n  static readonly URL = new StorageUISource(\n    'URL',\n    VolumeType.DATA_VOLUME,\n    DataVolumeSourceType.HTTP,\n  );\n  static readonly CONTAINER = new StorageUISource('Container', VolumeType.CONTAINER_DISK);\n  static readonly ATTACH_CLONED_DISK = new StorageUISource(\n    'Attach Cloned Disk',\n    VolumeType.DATA_VOLUME,\n    DataVolumeSourceType.PVC,\n  );\n  static readonly ATTACH_DISK = new StorageUISource(\n    'Attach Disk',\n    VolumeType.PERSISTENT_VOLUME_CLAIM,\n    undefined,\n  );\n  static readonly IMPORT_DISK = new StorageUISource(\n    'Import Disk',\n    VolumeType.PERSISTENT_VOLUME_CLAIM,\n    undefined,\n    true,\n  );\n\n  static readonly OTHER = new StorageUISource('Other');\n\n  private readonly volumeType: VolumeType;\n  private readonly dataVolumeSourceType: DataVolumeSourceType;\n  private readonly hasNewPVC: boolean;\n\n  private static readonly ALL = Object.freeze(\n    ObjectEnum.getAllClassEnumProperties<StorageUISource>(StorageUISource),\n  );\n\n  private static readonly stringMapper = StorageUISource.ALL.reduce(\n    (accumulator, volumeType: StorageUISource) => ({\n      ...accumulator,\n      [volumeType.value]: volumeType,\n    }),\n    {},\n  );\n\n  protected constructor(\n    value: string,\n    volumeType?: VolumeType,\n    dataVolumeSourceType?: DataVolumeSourceType,\n    hasNewPVC: boolean = false,\n  ) {\n    super(value);\n    this.volumeType = volumeType;\n    this.dataVolumeSourceType = dataVolumeSourceType;\n    this.hasNewPVC = hasNewPVC;\n  }\n\n  static getAll = () => StorageUISource.ALL;\n\n  static fromString = (model: string): StorageUISource => StorageUISource.stringMapper[model];\n\n  static fromTypes = (\n    volumeType: VolumeType,\n    dataVolumeSourceType?: DataVolumeSourceType,\n    hasNewPVC: boolean = false,\n  ) =>\n    StorageUISource.ALL.find(\n      (storageUIType) =>\n        storageUIType !== StorageUISource.OTHER &&\n        storageUIType.volumeType == volumeType && // eslint-disable-line eqeqeq\n        storageUIType.dataVolumeSourceType == dataVolumeSourceType && // eslint-disable-line eqeqeq\n        storageUIType.hasNewPVC == hasNewPVC, // eslint-disable-line eqeqeq\n    ) || StorageUISource.OTHER;\n\n  getVolumeType = () => this.volumeType;\n\n  getDataVolumeSourceType = () => this.dataVolumeSourceType;\n\n  getAllowedUnits = () =>\n    this === StorageUISource.IMPORT_DISK\n      ? getStringEnumValues<BinaryUnit>(BinaryUnit)\n      : [BinaryUnit.Mi, BinaryUnit.Gi, BinaryUnit.Ti];\n\n  requiresPVC = () =>\n    this === StorageUISource.ATTACH_DISK || this === StorageUISource.ATTACH_CLONED_DISK;\n\n  requiresNewPVC = () => this.hasNewPVC;\n\n  requiresContainerImage = () => this === StorageUISource.CONTAINER;\n\n  requiresURL = () => this === StorageUISource.URL;\n\n  requiresSize = () => this.requiresDatavolume() || this.hasNewPVC;\n\n  requiresStorageClass = () => this.requiresDatavolume() || this.hasNewPVC;\n\n  requiresVolumeType = () => !!this.volumeType;\n\n  requiresDatavolume = () => !!this.dataVolumeSourceType;\n\n  requiresNamespace = () => this === StorageUISource.ATTACH_CLONED_DISK;\n\n  requiresAccessModes = () =>\n    this !== StorageUISource.ATTACH_DISK &&\n    this !== StorageUISource.CONTAINER &&\n    this !== StorageUISource.OTHER;\n\n  requiresVolumeMode = () =>\n    this !== StorageUISource.ATTACH_DISK &&\n    this !== StorageUISource.CONTAINER &&\n    this !== StorageUISource.OTHER;\n\n  requiresVolumeModeOrAccessModes = () => this.requiresAccessModes() || this.requiresVolumeMode();\n\n  isNameEditingSupported = (diskType: DiskType) => diskType !== DiskType.CDROM;\n\n  isSizeEditingSupported = (size: number) => size === 0 || this !== StorageUISource.IMPORT_DISK; // if imported disk has 0 size, leave the user to decide\n\n  isPlainDataVolume = (isCreateTemplate: boolean) =>\n    isCreateTemplate && this === StorageUISource.URL;\n\n  hasDynamicSize = () => this === StorageUISource.CONTAINER;\n\n  canBeChangedToThisSource = (diskType: DiskType) => {\n    if (diskType === DiskType.CDROM) {\n      return (\n        this === StorageUISource.ATTACH_DISK ||\n        this === StorageUISource.URL ||\n        this === StorageUISource.CONTAINER\n      );\n    }\n    return this !== StorageUISource.IMPORT_DISK && this !== StorageUISource.OTHER;\n  };\n}\n"]}]}