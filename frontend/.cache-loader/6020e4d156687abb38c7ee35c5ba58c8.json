{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/machine.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/machine.tsx","mtime":1615298458740},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport { getMachineAddresses, getMachineInstanceType, getMachineNodeName, getMachineRegion, getMachineRole, getMachineZone, Status, getMachinePhase, } from '@console/shared';\nimport { MachineModel } from '../models';\nimport { referenceForModel } from '../module/k8s';\nimport { Conditions } from './conditions';\nimport NodeIPList from '@console/app/src/components/nodes/NodeIPList';\nimport { DetailsPage, ListPage, Table, TableRow, TableData } from './factory';\nimport { DetailsItem, Kebab, NodeLink, ResourceKebab, ResourceLink, ResourceSummary, SectionHeading, navFactory, } from './utils';\nimport { ResourceEventStream } from './events';\nconst { common } = Kebab.factory;\nconst menuActions = [...Kebab.getExtensionsActionsForKind(MachineModel), ...common];\nexport const machineReference = referenceForModel(MachineModel);\nconst tableColumnClasses = [\n    '',\n    '',\n    classNames('pf-m-hidden', 'pf-m-visible-on-sm'),\n    classNames('pf-m-hidden', 'pf-m-visible-on-md'),\n    classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n    classNames('pf-m-hidden', 'pf-m-visible-on-xl'),\n    classNames('pf-m-hidden', 'pf-m-visible-on-xl'),\n    Kebab.columnClass,\n];\nconst MachineTableHeader = () => {\n    return [\n        {\n            title: 'Name',\n            sortField: 'metadata.name',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[0] },\n        },\n        {\n            title: 'Namespace',\n            sortField: 'metadata.namespace',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[1] },\n        },\n        {\n            title: 'Node',\n            sortField: 'status.nodeRef.name',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[2] },\n        },\n        {\n            title: 'Phase',\n            sortFunc: 'machinePhase',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[3] },\n        },\n        {\n            title: 'Provider State',\n            sortField: 'status.providerStatus.instanceState',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[4] },\n        },\n        {\n            title: 'Region',\n            sortField: \"metadata.labels['machine.openshift.io/region']\",\n            transforms: [sortable],\n            props: { className: tableColumnClasses[5] },\n        },\n        {\n            title: 'Availability Zone',\n            sortField: \"metadata.labels['machine.openshift.io/zone']\",\n            transforms: [sortable],\n            props: { className: tableColumnClasses[6] },\n        },\n        {\n            title: '',\n            props: { className: tableColumnClasses[7] },\n        },\n    ];\n};\nMachineTableHeader.displayName = 'MachineTableHeader';\nconst getMachineProviderState = (obj) => { var _a, _b; return (_b = (_a = obj === null || obj === void 0 ? void 0 : obj.status) === null || _a === void 0 ? void 0 : _a.providerStatus) === null || _b === void 0 ? void 0 : _b.instanceState; };\nconst MachineTableRow = ({ obj, index, key, style }) => {\n    const nodeName = getMachineNodeName(obj);\n    const region = getMachineRegion(obj);\n    const zone = getMachineZone(obj);\n    const providerState = getMachineProviderState(obj);\n    return (React.createElement(TableRow, { id: obj.metadata.uid, index: index, trKey: key, style: style },\n        React.createElement(TableData, { className: classNames(tableColumnClasses[0], 'co-break-word') },\n            React.createElement(ResourceLink, { kind: machineReference, name: obj.metadata.name, namespace: obj.metadata.namespace, title: obj.metadata.name })),\n        React.createElement(TableData, { className: classNames(tableColumnClasses[1], 'co-break-word') },\n            React.createElement(ResourceLink, { kind: \"Namespace\", name: obj.metadata.namespace })),\n        React.createElement(TableData, { className: tableColumnClasses[2] }, nodeName ? React.createElement(NodeLink, { name: nodeName }) : '-'),\n        React.createElement(TableData, { className: tableColumnClasses[3] },\n            React.createElement(Status, { status: getMachinePhase(obj) })),\n        React.createElement(TableData, { className: tableColumnClasses[4] }, providerState !== null && providerState !== void 0 ? providerState : '-'),\n        React.createElement(TableData, { className: tableColumnClasses[5] }, region || '-'),\n        React.createElement(TableData, { className: tableColumnClasses[6] }, zone || '-'),\n        React.createElement(TableData, { className: tableColumnClasses[7] },\n            React.createElement(ResourceKebab, { actions: menuActions, kind: machineReference, resource: obj }))));\n};\nconst MachineDetails = ({ obj }) => {\n    var _a, _b;\n    const nodeName = getMachineNodeName(obj);\n    const machineRole = getMachineRole(obj);\n    const instanceType = getMachineInstanceType(obj);\n    const region = getMachineRegion(obj);\n    const zone = getMachineZone(obj);\n    const providerState = getMachineProviderState(obj);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(SectionHeading, { text: \"Machine Details\" }),\n            React.createElement(\"div\", { className: \"co-m-pane__body-group\" },\n                React.createElement(\"div\", { className: \"row\" },\n                    React.createElement(\"div\", { className: \"col-sm-6\" },\n                        React.createElement(ResourceSummary, { resource: obj })),\n                    React.createElement(\"div\", { className: \"col-sm-6\" },\n                        React.createElement(\"dl\", { className: \"co-m-pane__details\" },\n                            React.createElement(DetailsItem, { label: \"Phase\", obj: obj, path: \"status.phase\" },\n                                React.createElement(Status, { status: getMachinePhase(obj) })),\n                            React.createElement(DetailsItem, { label: \"Provider State\", obj: obj, path: \"status.providerStatus.instanceState\" }, providerState),\n                            nodeName && (React.createElement(React.Fragment, null,\n                                React.createElement(\"dt\", null, \"Node\"),\n                                React.createElement(\"dd\", null,\n                                    React.createElement(NodeLink, { name: nodeName })))),\n                            machineRole && (React.createElement(React.Fragment, null,\n                                React.createElement(\"dt\", null, \"Machine Role\"),\n                                React.createElement(\"dd\", null, machineRole))),\n                            instanceType && (React.createElement(React.Fragment, null,\n                                React.createElement(\"dt\", null, \"Instance Type\"),\n                                React.createElement(\"dd\", null, instanceType))),\n                            region && (React.createElement(React.Fragment, null,\n                                React.createElement(\"dt\", null, \"Region\"),\n                                React.createElement(\"dd\", null, region))),\n                            zone && (React.createElement(React.Fragment, null,\n                                React.createElement(\"dt\", null, \"Availability Zone\"),\n                                React.createElement(\"dd\", null, zone))),\n                            React.createElement(\"dt\", null, \"Machine Addresses\"),\n                            React.createElement(\"dd\", null,\n                                React.createElement(NodeIPList, { ips: getMachineAddresses(obj), expand: true }))))))),\n        React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(SectionHeading, { text: \"Conditions\" }),\n            React.createElement(Conditions, { conditions: (_b = (_a = obj.status) === null || _a === void 0 ? void 0 : _a.providerStatus) === null || _b === void 0 ? void 0 : _b.conditions }))));\n};\nexport const MachineList = (props) => (React.createElement(Table, Object.assign({}, props, { \"aria-label\": \"Machines\", Header: MachineTableHeader, Row: MachineTableRow, virtualize: true })));\nexport const MachinePage = (props) => (React.createElement(ListPage, Object.assign({}, props, { ListComponent: MachineList, kind: machineReference, textFilter: \"machine\", filterLabel: \"by machine or node name\", canCreate: true })));\nexport const MachineDetailsPage = (props) => (React.createElement(DetailsPage, Object.assign({}, props, { kind: machineReference, menuActions: menuActions, pages: [\n        navFactory.details(MachineDetails),\n        navFactory.editYaml(),\n        navFactory.events(ResourceEventStream),\n    ], getResourceStatus: getMachinePhase })));\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/machine.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/machine.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport {\n  getMachineAddresses,\n  getMachineInstanceType,\n  getMachineNodeName,\n  getMachineRegion,\n  getMachineRole,\n  getMachineZone,\n  Status,\n  getMachinePhase,\n} from '@console/shared';\nimport { MachineModel } from '../models';\nimport { MachineKind, referenceForModel } from '../module/k8s';\nimport { Conditions } from './conditions';\nimport NodeIPList from '@console/app/src/components/nodes/NodeIPList';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from './factory';\nimport {\n  DetailsItem,\n  Kebab,\n  NodeLink,\n  ResourceKebab,\n  ResourceLink,\n  ResourceSummary,\n  SectionHeading,\n  navFactory,\n} from './utils';\nimport { ResourceEventStream } from './events';\n\nconst { common } = Kebab.factory;\nconst menuActions = [...Kebab.getExtensionsActionsForKind(MachineModel), ...common];\nexport const machineReference = referenceForModel(MachineModel);\n\nconst tableColumnClasses = [\n  '',\n  '',\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-md'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'),\n  Kebab.columnClass,\n];\n\nconst MachineTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Node',\n      sortField: 'status.nodeRef.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Phase',\n      sortFunc: 'machinePhase',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: 'Provider State',\n      sortField: 'status.providerStatus.instanceState',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: 'Region',\n      sortField: \"metadata.labels['machine.openshift.io/region']\",\n      transforms: [sortable],\n      props: { className: tableColumnClasses[5] },\n    },\n    {\n      title: 'Availability Zone',\n      sortField: \"metadata.labels['machine.openshift.io/zone']\",\n      transforms: [sortable],\n      props: { className: tableColumnClasses[6] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[7] },\n    },\n  ];\n};\nMachineTableHeader.displayName = 'MachineTableHeader';\n\nconst getMachineProviderState = (obj: MachineKind): string =>\n  obj?.status?.providerStatus?.instanceState;\n\nconst MachineTableRow: RowFunction<MachineKind> = ({ obj, index, key, style }) => {\n  const nodeName = getMachineNodeName(obj);\n  const region = getMachineRegion(obj);\n  const zone = getMachineZone(obj);\n  const providerState = getMachineProviderState(obj);\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={classNames(tableColumnClasses[0], 'co-break-word')}>\n        <ResourceLink\n          kind={machineReference}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n          title={obj.metadata.name}\n        />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        {nodeName ? <NodeLink name={nodeName} /> : '-'}\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <Status status={getMachinePhase(obj)} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>{providerState ?? '-'}</TableData>\n      <TableData className={tableColumnClasses[5]}>{region || '-'}</TableData>\n      <TableData className={tableColumnClasses[6]}>{zone || '-'}</TableData>\n      <TableData className={tableColumnClasses[7]}>\n        <ResourceKebab actions={menuActions} kind={machineReference} resource={obj} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst MachineDetails: React.SFC<MachineDetailsProps> = ({ obj }: { obj: MachineKind }) => {\n  const nodeName = getMachineNodeName(obj);\n  const machineRole = getMachineRole(obj);\n  const instanceType = getMachineInstanceType(obj);\n  const region = getMachineRegion(obj);\n  const zone = getMachineZone(obj);\n  const providerState = getMachineProviderState(obj);\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Machine Details\" />\n        <div className=\"co-m-pane__body-group\">\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <ResourceSummary resource={obj} />\n            </div>\n            <div className=\"col-sm-6\">\n              <dl className=\"co-m-pane__details\">\n                <DetailsItem label=\"Phase\" obj={obj} path=\"status.phase\">\n                  <Status status={getMachinePhase(obj)} />\n                </DetailsItem>\n                <DetailsItem\n                  label=\"Provider State\"\n                  obj={obj}\n                  path=\"status.providerStatus.instanceState\"\n                >\n                  {providerState}\n                </DetailsItem>\n                {nodeName && (\n                  <>\n                    <dt>Node</dt>\n                    <dd>\n                      <NodeLink name={nodeName} />\n                    </dd>\n                  </>\n                )}\n                {machineRole && (\n                  <>\n                    <dt>Machine Role</dt>\n                    <dd>{machineRole}</dd>\n                  </>\n                )}\n                {instanceType && (\n                  <>\n                    <dt>Instance Type</dt>\n                    <dd>{instanceType}</dd>\n                  </>\n                )}\n                {region && (\n                  <>\n                    <dt>Region</dt>\n                    <dd>{region}</dd>\n                  </>\n                )}\n                {zone && (\n                  <>\n                    <dt>Availability Zone</dt>\n                    <dd>{zone}</dd>\n                  </>\n                )}\n                <dt>Machine Addresses</dt>\n                <dd>\n                  <NodeIPList ips={getMachineAddresses(obj)} expand />\n                </dd>\n              </dl>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Conditions\" />\n        <Conditions conditions={obj.status?.providerStatus?.conditions} />\n      </div>\n    </>\n  );\n};\n\nexport const MachineList: React.SFC = (props) => (\n  <Table\n    {...props}\n    aria-label=\"Machines\"\n    Header={MachineTableHeader}\n    Row={MachineTableRow}\n    virtualize\n  />\n);\n\nexport const MachinePage: React.SFC<MachinePageProps> = (props) => (\n  <ListPage\n    {...props}\n    ListComponent={MachineList}\n    kind={machineReference}\n    textFilter=\"machine\"\n    filterLabel=\"by machine or node name\"\n    canCreate\n  />\n);\n\nexport const MachineDetailsPage: React.SFC<MachineDetailsPageProps> = (props) => (\n  <DetailsPage\n    {...props}\n    kind={machineReference}\n    menuActions={menuActions}\n    pages={[\n      navFactory.details(MachineDetails),\n      navFactory.editYaml(),\n      navFactory.events(ResourceEventStream),\n    ]}\n    getResourceStatus={getMachinePhase}\n  />\n);\n\nexport type MachineDetailsProps = {\n  obj: MachineKind;\n};\n\nexport type MachinePageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: any;\n};\n\nexport type MachineDetailsPageProps = {\n  match: any;\n};\n"]}]}