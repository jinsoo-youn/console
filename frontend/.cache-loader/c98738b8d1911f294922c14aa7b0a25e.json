{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/reducers/monitoring.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/reducers/monitoring.ts","mtime":1615298458760},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { connect } from 'react-redux';\nimport { Map as ImmutableMap } from 'immutable';\nimport * as _ from 'lodash-es';\nimport { ActionType } from '../actions/monitoring';\nexport var AlertSeverity;\n(function (AlertSeverity) {\n    AlertSeverity[\"Critical\"] = \"critical\";\n    AlertSeverity[\"Info\"] = \"info\";\n    AlertSeverity[\"None\"] = \"none\";\n    AlertSeverity[\"Warning\"] = \"warning\";\n})(AlertSeverity || (AlertSeverity = {}));\nexport var AlertStates;\n(function (AlertStates) {\n    AlertStates[\"Firing\"] = \"firing\";\n    AlertStates[\"Pending\"] = \"pending\";\n    AlertStates[\"Silenced\"] = \"silenced\";\n})(AlertStates || (AlertStates = {}));\nexport var SilenceStates;\n(function (SilenceStates) {\n    SilenceStates[\"Active\"] = \"active\";\n    SilenceStates[\"Expired\"] = \"expired\";\n    SilenceStates[\"Pending\"] = \"pending\";\n})(SilenceStates || (SilenceStates = {}));\nexport var MonitoringRoutes;\n(function (MonitoringRoutes) {\n    MonitoringRoutes[\"Kibana\"] = \"kibana\";\n})(MonitoringRoutes || (MonitoringRoutes = {}));\nconst DEFAULTS = _.mapValues(MonitoringRoutes, undefined);\nexport const monitoringReducerName = 'monitoringURLs';\nexport const monitoringReducer = (state, action) => {\n    if (!state) {\n        return ImmutableMap(DEFAULTS);\n    }\n    switch (action.type) {\n        case ActionType.SetMonitoringURL:\n            return state.merge({ [action.payload.name]: action.payload.url });\n        default:\n            return state;\n    }\n};\nconst stateToProps = (desiredURLs, state) => {\n    const urls = desiredURLs.reduce((previous, next) => (Object.assign(Object.assign({}, previous), { [next]: state[monitoringReducerName].get(next) })), {});\n    return { urls };\n};\nexport const connectToURLs = (...urls) => connect((state) => stateToProps(urls, state));\nexport const alertState = (a) => a === null || a === void 0 ? void 0 : a.state;\nexport const silenceState = (s) => { var _a; return (_a = s === null || s === void 0 ? void 0 : s.status) === null || _a === void 0 ? void 0 : _a.state; };\nexport const alertingRuleIsActive = (rule) => (rule.state === 'inactive' ? 'false' : 'true');\nexport const alertDescription = (alert) => { var _a, _b, _c; return ((_a = alert.annotations) === null || _a === void 0 ? void 0 : _a.description) || ((_b = alert.annotations) === null || _b === void 0 ? void 0 : _b.message) || ((_c = alert.labels) === null || _c === void 0 ? void 0 : _c.alertname); };\n// Sort alerts and silences by their state (sort first by the state itself, then by the timestamp relevant to the state)\nexport const alertStateOrder = (alert) => [\n    [AlertStates.Firing, AlertStates.Silenced, AlertStates.Pending].indexOf(alertState(alert)),\n    alertState(alert) === AlertStates.Silenced\n        ? _.max(_.map(alert.silencedBy, 'endsAt'))\n        : _.get(alert, 'activeAt'),\n];\nexport const silenceFiringAlertsOrder = (silence) => {\n    const severityCounts = _.countBy(silence.firingAlerts, 'labels.severity');\n    return [\n        severityCounts[AlertSeverity.Critical],\n        severityCounts[AlertSeverity.Warning],\n        silence.firingAlerts.length,\n    ];\n};\nexport const silenceStateOrder = (silence) => [\n    [SilenceStates.Active, SilenceStates.Pending, SilenceStates.Expired].indexOf(silenceState(silence)),\n    _.get(silence, silenceState(silence) === SilenceStates.Pending ? 'startsAt' : 'endsAt'),\n];\n// Determine if an Alert is silenced by a Silence (if all of the Silence's matchers match one of the Alert's labels)\nexport const isSilenced = (alert, silence) => [AlertStates.Firing, AlertStates.Silenced].includes(alert.state) &&\n    _.every(silence.matchers, (m) => {\n        const alertValue = _.get(alert.labels, m.name);\n        return (alertValue !== undefined &&\n            (m.isRegex ? new RegExp(`^${m.value}$`).test(alertValue) : alertValue === m.value));\n    });\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/reducers/monitoring.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/reducers/monitoring.ts"],"names":[],"mappings":"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","sourcesContent":["import { connect } from 'react-redux';\nimport { Map as ImmutableMap } from 'immutable';\nimport * as _ from 'lodash-es';\n\nimport { MonitoringAction, ActionType } from '../actions/monitoring';\n\nexport const enum AlertSeverity {\n  Critical = 'critical',\n  Info = 'info',\n  None = 'none',\n  Warning = 'warning',\n}\n\nexport const enum AlertStates {\n  Firing = 'firing',\n  Pending = 'pending',\n  Silenced = 'silenced',\n}\n\nexport const enum SilenceStates {\n  Active = 'active',\n  Expired = 'expired',\n  Pending = 'pending',\n}\n\nexport enum MonitoringRoutes {\n  Kibana = 'kibana',\n}\n\nconst DEFAULTS = _.mapValues(MonitoringRoutes, undefined);\n\nexport type MonitoringState = ImmutableMap<string, any>;\n\nexport const monitoringReducerName = 'monitoringURLs';\nexport const monitoringReducer = (\n  state: MonitoringState,\n  action: MonitoringAction,\n): MonitoringState => {\n  if (!state) {\n    return ImmutableMap(DEFAULTS);\n  }\n\n  switch (action.type) {\n    case ActionType.SetMonitoringURL:\n      return state.merge({ [action.payload.name]: action.payload.url });\n\n    default:\n      return state;\n  }\n};\n\nconst stateToProps = (desiredURLs: string[], state) => {\n  const urls = desiredURLs.reduce(\n    (previous, next) => ({ ...previous, [next]: state[monitoringReducerName].get(next) }),\n    {},\n  );\n  return { urls };\n};\n\nexport const connectToURLs = (...urls) => connect((state) => stateToProps(urls, state));\n\nexport const alertState = (a) => a?.state;\nexport const silenceState = (s) => s?.status?.state;\n\nexport const alertingRuleIsActive = (rule) => (rule.state === 'inactive' ? 'false' : 'true');\n\nexport const alertDescription = (alert) =>\n  alert.annotations?.description || alert.annotations?.message || alert.labels?.alertname;\n\n// Sort alerts and silences by their state (sort first by the state itself, then by the timestamp relevant to the state)\nexport const alertStateOrder = (alert) => [\n  [AlertStates.Firing, AlertStates.Silenced, AlertStates.Pending].indexOf(alertState(alert)),\n  alertState(alert) === AlertStates.Silenced\n    ? _.max(_.map(alert.silencedBy, 'endsAt'))\n    : _.get(alert, 'activeAt'),\n];\n\nexport const silenceFiringAlertsOrder = (silence) => {\n  const severityCounts = _.countBy(silence.firingAlerts, 'labels.severity');\n  return [\n    severityCounts[AlertSeverity.Critical],\n    severityCounts[AlertSeverity.Warning],\n    silence.firingAlerts.length,\n  ];\n};\n\nexport const silenceStateOrder = (silence) => [\n  [SilenceStates.Active, SilenceStates.Pending, SilenceStates.Expired].indexOf(\n    silenceState(silence),\n  ),\n  _.get(silence, silenceState(silence) === SilenceStates.Pending ? 'startsAt' : 'endsAt'),\n];\n\n// Determine if an Alert is silenced by a Silence (if all of the Silence's matchers match one of the Alert's labels)\nexport const isSilenced = (alert, silence) =>\n  [AlertStates.Firing, AlertStates.Silenced].includes(alert.state) &&\n  _.every(silence.matchers, (m) => {\n    const alertValue = _.get(alert.labels, m.name);\n    return (\n      alertValue !== undefined &&\n      (m.isRegex ? new RegExp(`^${m.value}$`).test(alertValue) : alertValue === m.value)\n    );\n  });\n"]}]}