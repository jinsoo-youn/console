{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/project-access/ProjectAccess.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/project-access/ProjectAccess.tsx","mtime":1616735742390},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Formik } from 'formik';\nimport { Link } from 'react-router-dom';\nimport { LoadingBox, PageHeading, ExternalLink, StatusBox, } from '@console/internal/components/utils';\nimport { getActiveNamespace } from '@console/internal/actions/ui';\nimport { RoleBindingModel, RoleModel } from '@console/internal/models';\nimport { filterRoleBindings, getUserRoleBindings } from './project-access-form-utils';\nimport { getRolesWithNameChange, sendRoleBindingRequest, getNewRoles, getRemovedRoles, } from './project-access-form-submit-utils';\nimport { validationSchema } from './project-access-form-validation-utils';\nimport ProjectAccessForm from './ProjectAccessForm';\nimport { Verb, Roles, roleBinding } from './project-access-form-utils-types';\nconst ProjectAccess = ({ formName, namespace, roleBindings }) => {\n    if (!roleBindings.loaded && _.isEmpty(roleBindings.loadError)) {\n        return React.createElement(LoadingBox, null);\n    }\n    const filteredRoleBindings = filterRoleBindings(roleBindings, Roles);\n    const userRoleBindings = getUserRoleBindings(filteredRoleBindings);\n    const initialValues = {\n        projectAccess: roleBindings.loaded && userRoleBindings,\n    };\n    const handleSubmit = (values, actions) => {\n        let newRoles = getNewRoles(initialValues.projectAccess, values.projectAccess);\n        let removeRoles = getRemovedRoles(initialValues.projectAccess, values.projectAccess);\n        const updateRoles = getRolesWithNameChange(newRoles, removeRoles);\n        if (!_.isEmpty(updateRoles)) {\n            newRoles = _.filter(newRoles, (o1) => !updateRoles.find((o2) => o1.roleBindingName === o2.roleBindingName));\n            removeRoles = _.filter(removeRoles, (o1) => !updateRoles.find((o2) => o1.roleBindingName === o2.roleBindingName));\n        }\n        const roleBindingRequests = [];\n        roleBinding.metadata.namespace = namespace;\n        actions.setSubmitting(true);\n        if (!_.isEmpty(updateRoles)) {\n            roleBindingRequests.push(...sendRoleBindingRequest(Verb.Patch, updateRoles, roleBinding));\n        }\n        if (!_.isEmpty(removeRoles)) {\n            roleBindingRequests.push(...sendRoleBindingRequest(Verb.Remove, removeRoles, roleBinding));\n        }\n        if (!_.isEmpty(newRoles)) {\n            roleBindingRequests.push(...sendRoleBindingRequest(Verb.Create, newRoles, roleBinding));\n        }\n        Promise.all(roleBindingRequests)\n            .then(() => {\n            actions.setSubmitting(false);\n            actions.resetForm({\n                values: {\n                    projectAccess: values.projectAccess,\n                },\n                status: { success: `Successfully updated the ${formName}.` },\n            });\n        })\n            .catch((err) => {\n            actions.setSubmitting(false);\n            actions.setStatus({ submitError: err.message });\n        });\n    };\n    const handleReset = (values, actions) => {\n        actions.resetForm({ status: { success: null } });\n    };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(PageHeading, null,\n            \"Project Access allows you to add or remove a user's access to the project. More advanced management of role-based access control appear in\",\n            ' ',\n            React.createElement(Link, { to: `/k8s/ns/${getActiveNamespace()}/${RoleModel.plural}` }, \"Roles\"),\n            \" and\",\n            ' ',\n            React.createElement(Link, { to: `/k8s/ns/${getActiveNamespace()}/${RoleBindingModel.plural}` }, \"Role Bindings\"),\n            \". For more information, see the\",\n            ' ',\n            React.createElement(ExternalLink, { href: \"https://docs.openshift.com/container-platform/4.1/authentication/using-rbac.html\", text: \"role-based access control documentation\" }),\n            ' ',\n            \".\"),\n        React.createElement(\"div\", { className: \"co-m-pane__body\" }, roleBindings.loadError ? (React.createElement(StatusBox, { loaded: roleBindings.loaded, loadError: roleBindings.loadError })) : (React.createElement(Formik, { initialValues: initialValues, onSubmit: handleSubmit, onReset: handleReset, validationSchema: validationSchema, render: (props) => React.createElement(ProjectAccessForm, Object.assign({}, props)) })))));\n};\nexport default ProjectAccess;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/project-access/ProjectAccess.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/project-access/ProjectAccess.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAChC,OAAO,EAAE,IAAI,EAAE,MAAM,kBAAkB,CAAC;AACxC,OAAO,EACL,UAAU,EACV,WAAW,EACX,YAAY,EACZ,SAAS,GACV,MAAM,oCAAoC,CAAC;AAC5C,OAAO,EAAE,kBAAkB,EAAE,MAAM,8BAA8B,CAAC;AAClE,OAAO,EAAE,gBAAgB,EAAE,SAAS,EAAE,MAAM,0BAA0B,CAAC;AACvE,OAAO,EAAE,kBAAkB,EAAE,mBAAmB,EAAE,MAAM,6BAA6B,CAAC;AACtF,OAAO,EACL,sBAAsB,EACtB,sBAAsB,EACtB,WAAW,EACX,eAAe,GAChB,MAAM,oCAAoC,CAAC;AAC5C,OAAO,EAAE,gBAAgB,EAAE,MAAM,wCAAwC,CAAC;AAC1E,OAAO,iBAAiB,MAAM,qBAAqB,CAAC;AACpD,OAAO,EAAE,IAAI,EAAmB,KAAK,EAAE,WAAW,EAAE,MAAM,mCAAmC,CAAC;AAQ9F,MAAM,aAAa,GAAiC,CAAC,EAAE,QAAQ,EAAE,SAAS,EAAE,YAAY,EAAE,EAAE,EAAE;IAC5F,IAAI,CAAC,YAAY,CAAC,MAAM,IAAI,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,SAAS,CAAC,EAAE;QAC7D,OAAO,oBAAC,UAAU,OAAG,CAAC;KACvB;IAED,MAAM,oBAAoB,GAAG,kBAAkB,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;IAErE,MAAM,gBAAgB,GAAsB,mBAAmB,CAAC,oBAAoB,CAAC,CAAC;IAEtF,MAAM,aAAa,GAAG;QACpB,aAAa,EAAE,YAAY,CAAC,MAAM,IAAI,gBAAgB;KACvD,CAAC;IAEF,MAAM,YAAY,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE;QACvC,IAAI,QAAQ,GAAG,WAAW,CAAC,aAAa,CAAC,aAAa,EAAE,MAAM,CAAC,aAAa,CAAC,CAAC;QAC9E,IAAI,WAAW,GAAG,eAAe,CAAC,aAAa,CAAC,aAAa,EAAE,MAAM,CAAC,aAAa,CAAC,CAAC;QACrF,MAAM,WAAW,GAAG,sBAAsB,CAAC,QAAQ,EAAE,WAAW,CAAC,CAAC;QAElE,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;YAC3B,QAAQ,GAAG,CAAC,CAAC,MAAM,CACjB,QAAQ,EACR,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,eAAe,KAAK,EAAE,CAAC,eAAe,CAAC,CAC7E,CAAC;YACF,WAAW,GAAG,CAAC,CAAC,MAAM,CACpB,WAAW,EACX,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,eAAe,KAAK,EAAE,CAAC,eAAe,CAAC,CAC7E,CAAC;SACH;QAED,MAAM,mBAAmB,GAAG,EAAE,CAAC;QAC/B,WAAW,CAAC,QAAQ,CAAC,SAAS,GAAG,SAAS,CAAC;QAE3C,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC5B,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;YAC3B,mBAAmB,CAAC,IAAI,CAAC,GAAG,sBAAsB,CAAC,IAAI,CAAC,KAAK,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC,CAAC;SAC3F;QACD,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;YAC3B,mBAAmB,CAAC,IAAI,CAAC,GAAG,sBAAsB,CAAC,IAAI,CAAC,MAAM,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC,CAAC;SAC5F;QACD,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;YACxB,mBAAmB,CAAC,IAAI,CAAC,GAAG,sBAAsB,CAAC,IAAI,CAAC,MAAM,EAAE,QAAQ,EAAE,WAAW,CAAC,CAAC,CAAC;SACzF;QAED,OAAO,CAAC,GAAG,CAAC,mBAAmB,CAAC;aAC7B,IAAI,CAAC,GAAG,EAAE;YACT,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC7B,OAAO,CAAC,SAAS,CAAC;gBAChB,MAAM,EAAE;oBACN,aAAa,EAAE,MAAM,CAAC,aAAa;iBACpC;gBACD,MAAM,EAAE,EAAE,OAAO,EAAE,4BAA4B,QAAQ,GAAG,EAAE;aAC7D,CAAC,CAAC;QACL,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;YACb,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC7B,OAAO,CAAC,SAAS,CAAC,EAAE,WAAW,EAAE,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;IAEF,MAAM,WAAW,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE;QACtC,OAAO,CAAC,SAAS,CAAC,EAAE,MAAM,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,EAAE,CAAC,CAAC;IACnD,CAAC,CAAC;IAEF,OAAO,CACL;QACE,oBAAC,WAAW;;YAEiD,GAAG;YAC9D,oBAAC,IAAI,IAAC,EAAE,EAAE,WAAW,kBAAkB,EAAE,IAAI,SAAS,CAAC,MAAM,EAAE,YAAc;;YAAK,GAAG;YACrF,oBAAC,IAAI,IAAC,EAAE,EAAE,WAAW,kBAAkB,EAAE,IAAI,gBAAgB,CAAC,MAAM,EAAE,oBAAsB;;YAC5D,GAAG;YACnC,oBAAC,YAAY,IACX,IAAI,EAAC,kFAAkF,EACvF,IAAI,EAAC,yCAAyC,GAC9C;YAAC,GAAG;gBAEM;QACd,6BAAK,SAAS,EAAC,iBAAiB,IAC7B,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,CACxB,oBAAC,SAAS,IAAC,MAAM,EAAE,YAAY,CAAC,MAAM,EAAE,SAAS,EAAE,YAAY,CAAC,SAAS,GAAI,CAC9E,CAAC,CAAC,CAAC,CACF,oBAAC,MAAM,IACL,aAAa,EAAE,aAAa,EAC5B,QAAQ,EAAE,YAAY,EACtB,OAAO,EAAE,WAAW,EACpB,gBAAgB,EAAE,gBAAgB,EAClC,MAAM,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,oBAAC,iBAAiB,oBAAK,KAAK,EAAI,GACnD,CACH,CACG,CACL,CACJ,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,aAAa,CAAC","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Formik } from 'formik';\nimport { Link } from 'react-router-dom';\nimport {\n  LoadingBox,\n  PageHeading,\n  ExternalLink,\n  StatusBox,\n} from '@console/internal/components/utils';\nimport { getActiveNamespace } from '@console/internal/actions/ui';\nimport { RoleBindingModel, RoleModel } from '@console/internal/models';\nimport { filterRoleBindings, getUserRoleBindings } from './project-access-form-utils';\nimport {\n  getRolesWithNameChange,\n  sendRoleBindingRequest,\n  getNewRoles,\n  getRemovedRoles,\n} from './project-access-form-submit-utils';\nimport { validationSchema } from './project-access-form-validation-utils';\nimport ProjectAccessForm from './ProjectAccessForm';\nimport { Verb, UserRoleBinding, Roles, roleBinding } from './project-access-form-utils-types';\n\nexport interface ProjectAccessProps {\n  formName: string;\n  namespace: string;\n  roleBindings?: { data: []; loaded: boolean; loadError: {} };\n}\n\nconst ProjectAccess: React.FC<ProjectAccessProps> = ({ formName, namespace, roleBindings }) => {\n  if (!roleBindings.loaded && _.isEmpty(roleBindings.loadError)) {\n    return <LoadingBox />;\n  }\n\n  const filteredRoleBindings = filterRoleBindings(roleBindings, Roles);\n\n  const userRoleBindings: UserRoleBinding[] = getUserRoleBindings(filteredRoleBindings);\n\n  const initialValues = {\n    projectAccess: roleBindings.loaded && userRoleBindings,\n  };\n\n  const handleSubmit = (values, actions) => {\n    let newRoles = getNewRoles(initialValues.projectAccess, values.projectAccess);\n    let removeRoles = getRemovedRoles(initialValues.projectAccess, values.projectAccess);\n    const updateRoles = getRolesWithNameChange(newRoles, removeRoles);\n\n    if (!_.isEmpty(updateRoles)) {\n      newRoles = _.filter(\n        newRoles,\n        (o1) => !updateRoles.find((o2) => o1.roleBindingName === o2.roleBindingName),\n      );\n      removeRoles = _.filter(\n        removeRoles,\n        (o1) => !updateRoles.find((o2) => o1.roleBindingName === o2.roleBindingName),\n      );\n    }\n\n    const roleBindingRequests = [];\n    roleBinding.metadata.namespace = namespace;\n\n    actions.setSubmitting(true);\n    if (!_.isEmpty(updateRoles)) {\n      roleBindingRequests.push(...sendRoleBindingRequest(Verb.Patch, updateRoles, roleBinding));\n    }\n    if (!_.isEmpty(removeRoles)) {\n      roleBindingRequests.push(...sendRoleBindingRequest(Verb.Remove, removeRoles, roleBinding));\n    }\n    if (!_.isEmpty(newRoles)) {\n      roleBindingRequests.push(...sendRoleBindingRequest(Verb.Create, newRoles, roleBinding));\n    }\n\n    Promise.all(roleBindingRequests)\n      .then(() => {\n        actions.setSubmitting(false);\n        actions.resetForm({\n          values: {\n            projectAccess: values.projectAccess,\n          },\n          status: { success: `Successfully updated the ${formName}.` },\n        });\n      })\n      .catch((err) => {\n        actions.setSubmitting(false);\n        actions.setStatus({ submitError: err.message });\n      });\n  };\n\n  const handleReset = (values, actions) => {\n    actions.resetForm({ status: { success: null } });\n  };\n\n  return (\n    <>\n      <PageHeading>\n        Project Access allows you to add or remove a user&apos;s access to the project. More\n        advanced management of role-based access control appear in{' '}\n        <Link to={`/k8s/ns/${getActiveNamespace()}/${RoleModel.plural}`}>Roles</Link> and{' '}\n        <Link to={`/k8s/ns/${getActiveNamespace()}/${RoleBindingModel.plural}`}>Role Bindings</Link>\n        . For more information, see the{' '}\n        <ExternalLink\n          href=\"https://docs.openshift.com/container-platform/4.1/authentication/using-rbac.html\"\n          text=\"role-based access control documentation\"\n        />{' '}\n        .\n      </PageHeading>\n      <div className=\"co-m-pane__body\">\n        {roleBindings.loadError ? (\n          <StatusBox loaded={roleBindings.loaded} loadError={roleBindings.loadError} />\n        ) : (\n          <Formik\n            initialValues={initialValues}\n            onSubmit={handleSubmit}\n            onReset={handleReset}\n            validationSchema={validationSchema}\n            render={(props) => <ProjectAccessForm {...props} />}\n          />\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default ProjectAccess;\n"]}]}