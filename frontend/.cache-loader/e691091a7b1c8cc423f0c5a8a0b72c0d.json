{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/modals/installplan-approval-modal.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/modals/installplan-approval-modal.tsx","mtime":1615298458700},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter, } from '@console/internal/components/factory/modal';\nimport { PromiseComponent } from '@console/internal/components/utils';\nimport { modelFor, referenceFor, referenceForModel, } from '@console/internal/module/k8s';\nimport { RadioInput } from '@console/internal/components/radio';\nimport { InstallPlanApproval } from '../../types';\nimport { SubscriptionModel, InstallPlanModel } from '../../models';\nconst getApprovalStrategy = (props) => (referenceFor(props.obj) === referenceForModel(SubscriptionModel) &&\n    _.get(props.obj, 'spec.installPlanApproval')) ||\n    (referenceFor(props.obj) === referenceForModel(InstallPlanModel) &&\n        _.get(props.obj, 'spec.approval')) ||\n    InstallPlanApproval.Automatic;\nexport class InstallPlanApprovalModal extends PromiseComponent {\n    constructor(props) {\n        super(props);\n        this.props = props;\n        this.state.selectedApprovalStrategy = getApprovalStrategy(props);\n    }\n    submit(event) {\n        event.preventDefault();\n        const updatedObj = _.cloneDeep(this.props.obj);\n        if (referenceFor(updatedObj) === referenceForModel(SubscriptionModel)) {\n            updatedObj.spec.installPlanApproval = this.state.selectedApprovalStrategy;\n        }\n        else if (referenceFor(updatedObj) === referenceForModel(InstallPlanModel)) {\n            updatedObj.spec.approval = this.state.selectedApprovalStrategy;\n        }\n        this.handlePromise(this.props.k8sUpdate(modelFor(referenceFor(this.props.obj)), updatedObj))\n            .then(() => this.props.close())\n            .catch((err) => this.setState({ errorMessage: err }));\n    }\n    render() {\n        return (React.createElement(\"form\", { onSubmit: this.submit.bind(this), name: \"form\", className: \"modal-content\" },\n            React.createElement(ModalTitle, { className: \"modal-header\" }, \"Change Update Approval Strategy\"),\n            React.createElement(ModalBody, null,\n                React.createElement(\"div\", { className: \"co-m-form-row\" },\n                    React.createElement(\"p\", null, \"What strategy is used for approving updates?\")),\n                React.createElement(\"div\", { className: \"co-m-form-row row\" },\n                    React.createElement(\"div\", { className: \"col-sm-12\" },\n                        React.createElement(RadioInput, { onChange: (e) => this.setState({ selectedApprovalStrategy: e.target.value }), value: InstallPlanApproval.Automatic, checked: this.state.selectedApprovalStrategy === InstallPlanApproval.Automatic, title: InstallPlanApproval.Automatic, subTitle: \"(default)\" },\n                            React.createElement(\"div\", { className: \"co-m-radio-desc\" },\n                                React.createElement(\"p\", { className: \"text-muted\" }, \"New updates will be installed as soon as they become available.\")))),\n                    React.createElement(\"div\", { className: \"col-sm-12\" },\n                        React.createElement(RadioInput, { onChange: (e) => this.setState({ selectedApprovalStrategy: e.target.value }), value: InstallPlanApproval.Manual, checked: this.state.selectedApprovalStrategy === InstallPlanApproval.Manual, title: InstallPlanApproval.Manual },\n                            React.createElement(\"div\", { className: \"co-m-radio-desc\" },\n                                React.createElement(\"p\", { className: \"text-muted\" }, \"New updates need to be manually approved before installation begins.\")))))),\n            React.createElement(ModalSubmitFooter, { inProgress: this.state.inProgress, errorMessage: this.state.errorMessage, cancel: () => this.props.cancel(), submitText: \"Save\", submitDisabled: getApprovalStrategy(this.props) === this.state.selectedApprovalStrategy })));\n    }\n}\nexport const createInstallPlanApprovalModal = createModalLauncher(InstallPlanApprovalModal);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/modals/installplan-approval-modal.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/modals/installplan-approval-modal.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,EACL,mBAAmB,EACnB,UAAU,EACV,SAAS,EACT,iBAAiB,GAClB,MAAM,4CAA4C,CAAC;AACpD,OAAO,EAAE,gBAAgB,EAAE,MAAM,oCAAoC,CAAC;AACtE,OAAO,EAGL,QAAQ,EACR,YAAY,EACZ,iBAAiB,GAClB,MAAM,8BAA8B,CAAC;AACtC,OAAO,EAAE,UAAU,EAAE,MAAM,oCAAoC,CAAC;AAChE,OAAO,EAAoB,mBAAmB,EAAmB,MAAM,aAAa,CAAC;AACrF,OAAO,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,MAAM,cAAc,CAAC;AAEnE,MAAM,mBAAmB,GAAG,CAAC,KAAoC,EAAE,EAAE,CACnE,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,iBAAiB,CAAC,iBAAiB,CAAC;IAC/D,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,0BAA0B,CAAC,CAAC;IAC/C,CAAC,YAAY,CAAC,KAAK,CAAC,GAAG,CAAC,KAAK,iBAAiB,CAAC,gBAAgB,CAAC;QAC9D,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,GAAG,EAAE,eAAe,CAAC,CAAC;IACpC,mBAAmB,CAAC,SAAS,CAAC;AAEhC,MAAM,OAAO,wBAAyB,SAAQ,gBAG7C;IAGC,YAAmB,KAAoC;QACrD,KAAK,CAAC,KAAK,CAAC,CAAC;QADI,UAAK,GAAL,KAAK,CAA+B;QAGrD,IAAI,CAAC,KAAK,CAAC,wBAAwB,GAAG,mBAAmB,CAAC,KAAK,CAAC,CAAC;IACnE,CAAC;IAEO,MAAM,CAAC,KAAK;QAClB,KAAK,CAAC,cAAc,EAAE,CAAC;QAEvB,MAAM,UAAU,GAAG,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC/C,IAAI,YAAY,CAAC,UAAU,CAAC,KAAK,iBAAiB,CAAC,iBAAiB,CAAC,EAAE;YACpE,UAA+B,CAAC,IAAI,CAAC,mBAAmB,GAAG,IAAI,CAAC,KAAK,CAAC,wBAAwB,CAAC;SACjG;aAAM,IAAI,YAAY,CAAC,UAAU,CAAC,KAAK,iBAAiB,CAAC,gBAAgB,CAAC,EAAE;YAC1E,UAA8B,CAAC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,wBAAwB,CAAC;SACrF;QACD,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,CAAC,SAAS,CAAC,QAAQ,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC;aACzF,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC;aAC9B,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,YAAY,EAAE,GAAG,EAAE,CAAC,CAAC,CAAC;IAC1D,CAAC;IAED,MAAM;QACJ,OAAO,CACL,8BAAM,QAAQ,EAAE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,EAAC,MAAM,EAAC,SAAS,EAAC,eAAe;YAC3E,oBAAC,UAAU,IAAC,SAAS,EAAC,cAAc,sCAA6C;YACjF,oBAAC,SAAS;gBACR,6BAAK,SAAS,EAAC,eAAe;oBAC5B,8EAAmD,CAC/C;gBACN,6BAAK,SAAS,EAAC,mBAAmB;oBAChC,6BAAK,SAAS,EAAC,WAAW;wBACxB,oBAAC,UAAU,IACT,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,wBAAwB,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAC5E,KAAK,EAAE,mBAAmB,CAAC,SAAS,EACpC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,wBAAwB,KAAK,mBAAmB,CAAC,SAAS,EAC9E,KAAK,EAAE,mBAAmB,CAAC,SAAS,EACpC,QAAQ,EAAC,WAAW;4BAEpB,6BAAK,SAAS,EAAC,iBAAiB;gCAC9B,2BAAG,SAAS,EAAC,YAAY,sEAErB,CACA,CACK,CACT;oBACN,6BAAK,SAAS,EAAC,WAAW;wBACxB,oBAAC,UAAU,IACT,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE,wBAAwB,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC,EAC5E,KAAK,EAAE,mBAAmB,CAAC,MAAM,EACjC,OAAO,EAAE,IAAI,CAAC,KAAK,CAAC,wBAAwB,KAAK,mBAAmB,CAAC,MAAM,EAC3E,KAAK,EAAE,mBAAmB,CAAC,MAAM;4BAEjC,6BAAK,SAAS,EAAC,iBAAiB;gCAC9B,2BAAG,SAAS,EAAC,YAAY,2EAErB,CACA,CACK,CACT,CACF,CACI;YACZ,oBAAC,iBAAiB,IAChB,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU,EACjC,YAAY,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY,EACrC,MAAM,EAAE,GAAG,EAAE,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,EAAE,EACjC,UAAU,EAAC,MAAM,EACjB,cAAc,EAAE,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,KAAK,CAAC,wBAAwB,GACvF,CACG,CACR,CAAC;IACJ,CAAC;CACF;AAED,MAAM,CAAC,MAAM,8BAA8B,GAAG,mBAAmB,CAC/D,wBAAwB,CACzB,CAAC","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory/modal';\nimport { PromiseComponent } from '@console/internal/components/utils';\nimport {\n  K8sKind,\n  K8sResourceKind,\n  modelFor,\n  referenceFor,\n  referenceForModel,\n} from '@console/internal/module/k8s';\nimport { RadioInput } from '@console/internal/components/radio';\nimport { SubscriptionKind, InstallPlanApproval, InstallPlanKind } from '../../types';\nimport { SubscriptionModel, InstallPlanModel } from '../../models';\n\nconst getApprovalStrategy = (props: InstallPlanApprovalModalProps) =>\n  (referenceFor(props.obj) === referenceForModel(SubscriptionModel) &&\n    _.get(props.obj, 'spec.installPlanApproval')) ||\n  (referenceFor(props.obj) === referenceForModel(InstallPlanModel) &&\n    _.get(props.obj, 'spec.approval')) ||\n  InstallPlanApproval.Automatic;\n\nexport class InstallPlanApprovalModal extends PromiseComponent<\n  InstallPlanApprovalModalProps,\n  InstallPlanApprovalModalState\n> {\n  public state: InstallPlanApprovalModalState;\n\n  constructor(public props: InstallPlanApprovalModalProps) {\n    super(props);\n\n    this.state.selectedApprovalStrategy = getApprovalStrategy(props);\n  }\n\n  private submit(event): void {\n    event.preventDefault();\n\n    const updatedObj = _.cloneDeep(this.props.obj);\n    if (referenceFor(updatedObj) === referenceForModel(SubscriptionModel)) {\n      (updatedObj as SubscriptionKind).spec.installPlanApproval = this.state.selectedApprovalStrategy;\n    } else if (referenceFor(updatedObj) === referenceForModel(InstallPlanModel)) {\n      (updatedObj as InstallPlanKind).spec.approval = this.state.selectedApprovalStrategy;\n    }\n    this.handlePromise(this.props.k8sUpdate(modelFor(referenceFor(this.props.obj)), updatedObj))\n      .then(() => this.props.close())\n      .catch((err) => this.setState({ errorMessage: err }));\n  }\n\n  render() {\n    return (\n      <form onSubmit={this.submit.bind(this)} name=\"form\" className=\"modal-content\">\n        <ModalTitle className=\"modal-header\">Change Update Approval Strategy</ModalTitle>\n        <ModalBody>\n          <div className=\"co-m-form-row\">\n            <p>What strategy is used for approving updates?</p>\n          </div>\n          <div className=\"co-m-form-row row\">\n            <div className=\"col-sm-12\">\n              <RadioInput\n                onChange={(e) => this.setState({ selectedApprovalStrategy: e.target.value })}\n                value={InstallPlanApproval.Automatic}\n                checked={this.state.selectedApprovalStrategy === InstallPlanApproval.Automatic}\n                title={InstallPlanApproval.Automatic}\n                subTitle=\"(default)\"\n              >\n                <div className=\"co-m-radio-desc\">\n                  <p className=\"text-muted\">\n                    New updates will be installed as soon as they become available.\n                  </p>\n                </div>\n              </RadioInput>\n            </div>\n            <div className=\"col-sm-12\">\n              <RadioInput\n                onChange={(e) => this.setState({ selectedApprovalStrategy: e.target.value })}\n                value={InstallPlanApproval.Manual}\n                checked={this.state.selectedApprovalStrategy === InstallPlanApproval.Manual}\n                title={InstallPlanApproval.Manual}\n              >\n                <div className=\"co-m-radio-desc\">\n                  <p className=\"text-muted\">\n                    New updates need to be manually approved before installation begins.\n                  </p>\n                </div>\n              </RadioInput>\n            </div>\n          </div>\n        </ModalBody>\n        <ModalSubmitFooter\n          inProgress={this.state.inProgress}\n          errorMessage={this.state.errorMessage}\n          cancel={() => this.props.cancel()}\n          submitText=\"Save\"\n          submitDisabled={getApprovalStrategy(this.props) === this.state.selectedApprovalStrategy}\n        />\n      </form>\n    );\n  }\n}\n\nexport const createInstallPlanApprovalModal = createModalLauncher<InstallPlanApprovalModalProps>(\n  InstallPlanApprovalModal,\n);\n\nexport type InstallPlanApprovalModalProps = {\n  cancel?: () => void;\n  close?: () => void;\n  k8sUpdate: (kind: K8sKind, newObj: K8sResourceKind) => Promise<any>;\n  obj: InstallPlanKind | SubscriptionKind;\n};\n\nexport type InstallPlanApprovalModalState = {\n  inProgress: boolean;\n  errorMessage: string;\n  selectedApprovalStrategy: InstallPlanApproval;\n};\n"]}]}