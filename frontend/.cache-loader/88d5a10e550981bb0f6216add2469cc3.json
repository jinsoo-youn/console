{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/git-service/src/services/github-service.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/git-service/src/services/github-service.ts","mtime":1615298458640},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as Octokit from '@octokit/rest';\nimport * as GitUrlParse from 'git-url-parse';\nimport { SecretType, } from '../types';\nimport { BaseService } from './base-service';\nexport class GithubService extends BaseService {\n    constructor(gitsource) {\n        super(gitsource);\n        this.getAuthProvider = () => {\n            switch (this.gitsource.secretType) {\n                case SecretType.BASIC_AUTH: {\n                    const { username, password } = this.gitsource.secretContent;\n                    return { username, password };\n                }\n                case SecretType.NO_AUTH:\n                    return null;\n                default:\n                    return null;\n            }\n        };\n        this.getRepoMetadata = () => {\n            const { name, owner, source } = GitUrlParse(this.gitsource.url);\n            return { repoName: name, owner, host: source, defaultBranch: this.gitsource.ref || 'master' };\n        };\n        this.isRepoReachable = () => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const resp = yield this.client.repos.get({\n                    owner: this.metadata.owner,\n                    repo: this.metadata.repoName,\n                });\n                return resp.status === 200;\n            }\n            catch (e) {\n                return false;\n            }\n        });\n        this.getRepoBranchList = () => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const resp = yield this.client.repos.listBranches({\n                    owner: this.metadata.owner,\n                    repo: this.metadata.repoName,\n                });\n                const list = resp.data.map((r) => {\n                    return r.name;\n                });\n                return { branches: list };\n            }\n            catch (e) {\n                return { branches: [] };\n            }\n        });\n        this.getRepoFileList = () => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const resp = yield this.client.git.getTree({\n                    // eslint-disable-next-line @typescript-eslint/camelcase\n                    tree_sha: this.metadata.defaultBranch,\n                    owner: this.metadata.owner,\n                    repo: this.metadata.repoName,\n                });\n                let files = [];\n                if (resp.status === 200) {\n                    files = resp.data.tree.map((t) => t.path);\n                }\n                return { files };\n            }\n            catch (e) {\n                return { files: [] };\n            }\n        });\n        this.getRepoLanguageList = () => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const resp = yield this.client.repos.listLanguages({\n                    owner: this.metadata.owner,\n                    repo: this.metadata.repoName,\n                });\n                if (resp.status === 200) {\n                    return { languages: Object.keys(resp.data) };\n                }\n                return { languages: [] };\n            }\n            catch (e) {\n                return { languages: [] };\n            }\n        });\n        this.isDockerfilePresent = () => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const resp = yield this.client.repos.getContents({\n                    owner: this.metadata.owner,\n                    repo: this.metadata.repoName,\n                    path: 'Dockerfile',\n                });\n                return resp.status === 200;\n            }\n            catch (e) {\n                return false;\n            }\n        });\n        this.getDockerfileContent = () => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const resp = yield this.client.repos.getContents({\n                    owner: this.metadata.owner,\n                    repo: this.metadata.repoName,\n                    path: 'Dockerfile',\n                });\n                if (resp.status === 200) {\n                    // eslint-disable-next-line dot-notation\n                    return Buffer.from(resp.data['content'], 'base64').toString();\n                }\n                return null;\n            }\n            catch (e) {\n                return null;\n            }\n        });\n        this.getPackageJsonContent = () => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const resp = yield this.client.repos.getContents({\n                    owner: this.metadata.owner,\n                    repo: this.metadata.repoName,\n                    path: 'package.json',\n                });\n                if (resp.status === 200) {\n                    // eslint-disable-next-line dot-notation\n                    return Buffer.from(resp.data['content'], 'base64').toString();\n                }\n                return null;\n            }\n            catch (e) {\n                return null;\n            }\n        });\n        const opts = this.getAuthProvider();\n        this.metadata = this.getRepoMetadata();\n        this.client = new Octokit({ auth: opts });\n    }\n}\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/git-service/src/services/github-service.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/git-service/src/services/github-service.ts"],"names":[],"mappings":"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","sourcesContent":["import * as Octokit from '@octokit/rest';\nimport * as GitUrlParse from 'git-url-parse';\nimport {\n  GitSource,\n  SecretType,\n  RepoMetadata,\n  BranchList,\n  RepoLanguageList,\n  RepoFileList,\n} from '../types';\nimport { BaseService } from './base-service';\n\nexport class GithubService extends BaseService {\n  private readonly client: Octokit;\n\n  private readonly metadata: RepoMetadata;\n\n  constructor(gitsource: GitSource) {\n    super(gitsource);\n    const opts = this.getAuthProvider();\n    this.metadata = this.getRepoMetadata();\n    this.client = new Octokit({ auth: opts });\n  }\n\n  protected getAuthProvider = (): any => {\n    switch (this.gitsource.secretType) {\n      case SecretType.BASIC_AUTH: {\n        const { username, password } = this.gitsource.secretContent;\n        return { username, password };\n      }\n      case SecretType.NO_AUTH:\n        return null;\n      default:\n        return null;\n    }\n  };\n\n  protected getRepoMetadata = (): RepoMetadata => {\n    const { name, owner, source } = GitUrlParse(this.gitsource.url);\n    return { repoName: name, owner, host: source, defaultBranch: this.gitsource.ref || 'master' };\n  };\n\n  isRepoReachable = async (): Promise<boolean> => {\n    try {\n      const resp = await this.client.repos.get({\n        owner: this.metadata.owner,\n        repo: this.metadata.repoName,\n      });\n      return resp.status === 200;\n    } catch (e) {\n      return false;\n    }\n  };\n\n  getRepoBranchList = async (): Promise<BranchList> => {\n    try {\n      const resp = await this.client.repos.listBranches({\n        owner: this.metadata.owner,\n        repo: this.metadata.repoName,\n      });\n      const list = resp.data.map((r) => {\n        return r.name;\n      });\n      return { branches: list };\n    } catch (e) {\n      return { branches: [] };\n    }\n  };\n\n  getRepoFileList = async (): Promise<RepoFileList> => {\n    try {\n      const resp = await this.client.git.getTree({\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        tree_sha: this.metadata.defaultBranch,\n        owner: this.metadata.owner,\n        repo: this.metadata.repoName,\n      });\n      let files = [];\n      if (resp.status === 200) {\n        files = resp.data.tree.map((t) => t.path);\n      }\n      return { files };\n    } catch (e) {\n      return { files: [] };\n    }\n  };\n\n  getRepoLanguageList = async (): Promise<RepoLanguageList> => {\n    try {\n      const resp = await this.client.repos.listLanguages({\n        owner: this.metadata.owner,\n        repo: this.metadata.repoName,\n      });\n      if (resp.status === 200) {\n        return { languages: Object.keys(resp.data) };\n      }\n      return { languages: [] };\n    } catch (e) {\n      return { languages: [] };\n    }\n  };\n\n  isDockerfilePresent = async (): Promise<boolean> => {\n    try {\n      const resp = await this.client.repos.getContents({\n        owner: this.metadata.owner,\n        repo: this.metadata.repoName,\n        path: 'Dockerfile',\n      });\n      return resp.status === 200;\n    } catch (e) {\n      return false;\n    }\n  };\n\n  getDockerfileContent = async (): Promise<string | null> => {\n    try {\n      const resp = await this.client.repos.getContents({\n        owner: this.metadata.owner,\n        repo: this.metadata.repoName,\n        path: 'Dockerfile',\n      });\n      if (resp.status === 200) {\n        // eslint-disable-next-line dot-notation\n        return Buffer.from(resp.data['content'], 'base64').toString();\n      }\n      return null;\n    } catch (e) {\n      return null;\n    }\n  };\n\n  getPackageJsonContent = async (): Promise<string | null> => {\n    try {\n      const resp = await this.client.repos.getContents({\n        owner: this.metadata.owner,\n        repo: this.metadata.repoName,\n        path: 'package.json',\n      });\n      if (resp.status === 200) {\n        // eslint-disable-next-line dot-notation\n        return Buffer.from(resp.data['content'], 'base64').toString();\n      }\n      return null;\n    } catch (e) {\n      return null;\n    }\n  };\n}\n"]}]}