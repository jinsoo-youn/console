{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/utils/expandable-inner-table.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/utils/expandable-inner-table.tsx","mtime":1616735742470},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport { Table as PfTable, TableHeader, TableBody, SortByDirection } from '@patternfly/react-table';\nexport const ExpandableInnerTable = ({ data, header, Row }) => {\n    const [sortBy, setSortBy] = useState({\n        index: 0,\n        direction: SortByDirection.asc,\n    });\n    const [rows, setRows] = useState([]);\n    useEffect(() => {\n        const preData = [];\n        _.forEach(data, (value, index) => {\n            preData.push({ cells: Row(value) });\n        });\n        setRows(preData);\n    }, []);\n    const onSort = (_event, index, direction) => {\n        if (direction === SortByDirection.asc) {\n            // MEMO: 오름차순 정렬\n            const sortedRows = _.cloneDeep(rows).sort((a, b) => {\n                if (a.cells[index].textValue < b.cells[index].textValue) {\n                    return -1;\n                }\n                return a.cells[index].textValue > b.cells[index].textValue ? 1 : 0;\n            });\n            setSortBy({\n                index,\n                direction,\n            });\n            setRows(sortedRows);\n        }\n        else {\n            // MEMO: 내림차순 정렬\n            const sortedRows = _.cloneDeep(rows).sort((a, b) => {\n                if (a.cells[index].textValue < b.cells[index].textValue) {\n                    return 1;\n                }\n                return a.cells[index].textValue > b.cells[index].textValue ? -1 : 0;\n            });\n            setSortBy({\n                index,\n                direction,\n            });\n            setRows(sortedRows);\n        }\n    };\n    return (React.createElement(\"div\", { className: \"co-m-table-grid co-m-table-grid--bordered\" },\n        React.createElement(PfTable, { cells: header, rows: rows, className: \"pf-m-compact pf-m-border-rows\", \"aria-label\": \"inner-table-label\", sortBy: sortBy, onSort: onSort },\n            React.createElement(TableHeader, null),\n            React.createElement(TableBody, null))));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/utils/expandable-inner-table.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/utils/expandable-inner-table.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAM,WAAW,CAAC;AAC/B,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAE,MAAM,OAAO,CAAC;AAC5C,OAAO,EAAE,KAAK,IAAI,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,eAAe,EAAS,MAAM,yBAAyB,CAAC;AAC3G,MAAM,CAAC,MAAM,oBAAoB,GAAwC,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,EAAE,EAAE,EAAE;IACjG,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,QAAQ,CAAC;QACnC,KAAK,EAAE,CAAC;QACR,SAAS,EAAE,eAAe,CAAC,GAAG;KAC/B,CAAC,CAAC;IAEH,MAAM,CAAC,IAAI,EAAE,OAAO,CAAC,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC;IAErC,SAAS,CAAC,GAAG,EAAE;QACb,MAAM,OAAO,GAAG,EAAE,CAAC;QACnB,CAAC,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,EAAE;YAC/B,OAAO,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC;QACtC,CAAC,CAAC,CAAC;QACH,OAAO,CAAC,OAAO,CAAC,CAAC;IACnB,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,MAAM,GAAG,CAAC,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,EAAE;QAC1C,IAAI,SAAS,KAAK,eAAe,CAAC,GAAG,EAAE;YACrC,gBAAgB;YAChB,MAAM,UAAU,GAAG,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;gBACjD,IAAI,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,SAAS,EAAE;oBACvD,OAAO,CAAC,CAAC,CAAC;iBACX;gBACD,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACrE,CAAC,CAAC,CAAC;YAEH,SAAS,CAAC;gBACR,KAAK;gBACL,SAAS;aACV,CAAC,CAAC;YAEH,OAAO,CAAC,UAAU,CAAC,CAAC;SACrB;aAAM;YACL,gBAAgB;YAChB,MAAM,UAAU,GAAG,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE;gBACjD,IAAI,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,SAAS,EAAE;oBACvD,OAAO,CAAC,CAAC;iBACV;gBACD,OAAO,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,SAAS,GAAG,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;YACtE,CAAC,CAAC,CAAC;YAEH,SAAS,CAAC;gBACR,KAAK;gBACL,SAAS;aACV,CAAC,CAAC;YAEH,OAAO,CAAC,UAAU,CAAC,CAAC;SACrB;IACH,CAAC,CAAC;IAEF,OAAO,CACL,6BAAK,SAAS,EAAC,2CAA2C;QACxD,oBAAC,OAAO,IAAC,KAAK,EAAE,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,SAAS,EAAC,+BAA+B,gBAAY,mBAAmB,EAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM;YACzI,oBAAC,WAAW,OAAG;YACf,oBAAC,SAAS,OAAG,CACL,CACN,CACP,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport { Table as PfTable, TableHeader, TableBody, SortByDirection, ICell } from '@patternfly/react-table';\nexport const ExpandableInnerTable: React.FC<ExpandableInnerTableProps> = ({ data, header, Row }) => {\n  const [sortBy, setSortBy] = useState({\n    index: 0,\n    direction: SortByDirection.asc,\n  });\n\n  const [rows, setRows] = useState([]);\n\n  useEffect(() => {\n    const preData = [];\n    _.forEach(data, (value, index) => {\n      preData.push({ cells: Row(value) });\n    });\n    setRows(preData);\n  }, []);\n\n  const onSort = (_event, index, direction) => {\n    if (direction === SortByDirection.asc) {\n      // MEMO: 오름차순 정렬\n      const sortedRows = _.cloneDeep(rows).sort((a, b) => {\n        if (a.cells[index].textValue < b.cells[index].textValue) {\n          return -1;\n        }\n        return a.cells[index].textValue > b.cells[index].textValue ? 1 : 0;\n      });\n\n      setSortBy({\n        index,\n        direction,\n      });\n\n      setRows(sortedRows);\n    } else {\n      // MEMO: 내림차순 정렬\n      const sortedRows = _.cloneDeep(rows).sort((a, b) => {\n        if (a.cells[index].textValue < b.cells[index].textValue) {\n          return 1;\n        }\n        return a.cells[index].textValue > b.cells[index].textValue ? -1 : 0;\n      });\n\n      setSortBy({\n        index,\n        direction,\n      });\n\n      setRows(sortedRows);\n    }\n  };\n\n  return (\n    <div className=\"co-m-table-grid co-m-table-grid--bordered\">\n      <PfTable cells={header} rows={rows} className=\"pf-m-compact pf-m-border-rows\" aria-label=\"inner-table-label\" sortBy={sortBy} onSort={onSort}>\n        <TableHeader />\n        <TableBody />\n      </PfTable>\n    </div>\n  );\n};\n\nexport type RowFunctionArgs = {\n  obj: any;\n  index: number;\n  key: string;\n  style?: object;\n};\n\nexport type Cell = {\n  textValue: string;\n} & ICell;\n\nexport type ExpandableInnerTableProps = {\n  data?: any[];\n  header: any[];\n  Row?: (obj) => Cell[];\n};\n"]}]}