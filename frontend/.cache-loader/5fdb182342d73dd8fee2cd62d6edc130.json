{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/constants/status-enum.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/constants/status-enum.ts","mtime":1616735742420},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["/* eslint-disable lines-between-class-members,no-underscore-dangle */\nimport { ObjectEnum } from './object-enum';\nimport { StatusSimpleLabel } from './status-constants';\nexport class StatusEnum extends ObjectEnum {\n    constructor(value, label, { isError, isCompleted, isPending, isImporting, isInProgress, isUnknown, group, } = {}) {\n        super(value);\n        this.isError = () => this._isError;\n        this.isCompleted = () => this._isCompleted;\n        this.isPending = () => this._isPending;\n        this.isImporting = () => this._isImporting;\n        this.isInProgress = () => this._isInProgress;\n        this.isUnknown = () => this._isUnknown;\n        this.getMetadata = () => ({\n            isError: this._isError,\n            isCompleted: this._isCompleted,\n            isPending: this._isPending,\n            isImporting: this._isImporting,\n            isInProgress: this._isInProgress,\n            isUnknown: this._isUnknown,\n            group: this.group,\n        });\n        this.getLabel = () => this.label;\n        this.getGroup = () => this.group;\n        this.getSimpleLabel = () => this.simpleLabel;\n        this.toSimpleSortString = () => {\n            return `${this.simpleLabel}${this.simpleLabel === this.toString() ? '' : this.toString()}`;\n        };\n        this.toVerboseString = () => {\n            const result = this.label || super.toString();\n            return this.group && !this._isUnknown ? `${result} (${this.group.getVerboseName()})` : result;\n        };\n        if (label == null) {\n            throw new Error('StatusEnum: requires label');\n        }\n        this._isError = isError || false;\n        this._isCompleted = isCompleted || false;\n        this._isPending = isPending || false;\n        this._isImporting = isImporting || false;\n        this._isInProgress = this._isPending || this._isImporting || isInProgress || false; // pending means expected progress\n        const isKnown = isError || isCompleted || isPending || isImporting || isInProgress;\n        if (isUnknown && isKnown) {\n            throw new Error('StatusEnum: isUnknown flag should not include other metadata');\n        }\n        this._isUnknown = isUnknown;\n        this.group = group;\n        this.label = label;\n        this.simpleLabel = this.resolveSimpleLabel();\n    }\n    toString() {\n        const result = this.label || super.toString();\n        return this.group && !this._isUnknown ? `${result} (${this.group.toString()})` : result;\n    }\n    resolveSimpleLabel() {\n        if (this._isError) {\n            return StatusSimpleLabel.Error;\n        }\n        if (this._isCompleted) {\n            return StatusSimpleLabel.Completed;\n        }\n        if (this._isPending) {\n            return StatusSimpleLabel.Pending;\n        }\n        if (this._isImporting) {\n            return StatusSimpleLabel.Importing;\n        }\n        if (this._isInProgress) {\n            return StatusSimpleLabel.InProgress;\n        }\n        return StatusSimpleLabel.Other;\n    }\n}\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/constants/status-enum.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/constants/status-enum.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable lines-between-class-members,no-underscore-dangle */\nimport { ObjectEnum } from './object-enum';\nimport { StatusSimpleLabel } from './status-constants';\nimport { StatusGroup } from './status-group';\n\nexport interface StatusMetadata {\n  isError?: boolean;\n  isCompleted?: boolean;\n  isPending?: boolean;\n  isImporting?: boolean;\n  isInProgress?: boolean;\n  isUnknown?: boolean;\n  group?: StatusGroup;\n}\n\nexport abstract class StatusEnum<SIMPLE_LABEL = StatusSimpleLabel> extends ObjectEnum<string> {\n  protected readonly _isError: boolean;\n  protected readonly _isCompleted: boolean;\n  protected readonly _isPending: boolean;\n  protected readonly _isImporting: boolean;\n  protected readonly _isInProgress: boolean;\n  protected readonly _isUnknown: boolean;\n\n  protected readonly group: StatusGroup;\n  protected readonly label: string;\n  protected readonly simpleLabel: SIMPLE_LABEL | StatusSimpleLabel; // cache resolveSimpleLabel call\n\n  protected constructor(\n    value: string,\n    label: string,\n    {\n      isError,\n      isCompleted,\n      isPending,\n      isImporting,\n      isInProgress,\n      isUnknown,\n      group,\n    }: StatusMetadata = {},\n  ) {\n    super(value);\n    if (label == null) {\n      throw new Error('StatusEnum: requires label');\n    }\n\n    this._isError = isError || false;\n    this._isCompleted = isCompleted || false;\n    this._isPending = isPending || false;\n    this._isImporting = isImporting || false;\n    this._isInProgress = this._isPending || this._isImporting || isInProgress || false; // pending means expected progress\n\n    const isKnown = isError || isCompleted || isPending || isImporting || isInProgress;\n\n    if (isUnknown && isKnown) {\n      throw new Error('StatusEnum: isUnknown flag should not include other metadata');\n    }\n\n    this._isUnknown = isUnknown;\n\n    this.group = group;\n    this.label = label;\n    this.simpleLabel = this.resolveSimpleLabel();\n  }\n\n  isError = () => this._isError;\n\n  isCompleted = () => this._isCompleted;\n\n  isPending = () => this._isPending;\n\n  isImporting = () => this._isImporting;\n\n  isInProgress = () => this._isInProgress;\n\n  isUnknown = () => this._isUnknown;\n\n  getMetadata = (): StatusMetadata =>\n    ({\n      isError: this._isError,\n      isCompleted: this._isCompleted,\n      isPending: this._isPending,\n      isImporting: this._isImporting,\n      isInProgress: this._isInProgress,\n      isUnknown: this._isUnknown,\n      group: this.group,\n    } as any);\n\n  getLabel = () => this.label;\n\n  getGroup = () => this.group;\n\n  getSimpleLabel = () => this.simpleLabel;\n\n  toString() {\n    const result = this.label || super.toString();\n    return this.group && !this._isUnknown ? `${result} (${this.group.toString()})` : result;\n  }\n\n  toSimpleSortString = () => {\n    return `${this.simpleLabel}${this.simpleLabel === this.toString() ? '' : this.toString()}`;\n  };\n\n  toVerboseString = () => {\n    const result = this.label || super.toString();\n    return this.group && !this._isUnknown ? `${result} (${this.group.getVerboseName()})` : result;\n  };\n\n  protected resolveSimpleLabel(): SIMPLE_LABEL | StatusSimpleLabel {\n    if (this._isError) {\n      return StatusSimpleLabel.Error;\n    }\n    if (this._isCompleted) {\n      return StatusSimpleLabel.Completed;\n    }\n    if (this._isPending) {\n      return StatusSimpleLabel.Pending;\n    }\n    if (this._isImporting) {\n      return StatusSimpleLabel.Importing;\n    }\n    if (this._isInProgress) {\n      return StatusSimpleLabel.InProgress;\n    }\n    return StatusSimpleLabel.Other;\n  }\n}\n"]}]}