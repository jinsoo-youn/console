{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/requests/free-owned-resources.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/requests/free-owned-resources.ts","mtime":1616735742430},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { k8sKill, k8sPatch } from '@console/internal/module/k8s';\nimport { PatchBuilder } from '@console/shared/src/k8s';\nimport { getOwnerReferences } from '@console/shared/src';\nimport { compareOwnerReference } from '@console/shared/src/utils/owner-references';\nexport const freeOwnedResources = (ownedResources, owner, doDelete) => __awaiter(void 0, void 0, void 0, function* () {\n    const freePromises = (ownedResources || [])\n        .filter((res) => res)\n        .map(({ model, resource: ownedResource }) => {\n        if (doDelete) {\n            return k8sKill(model, ownedResource);\n        }\n        return k8sPatch(model, ownedResource, [\n            new PatchBuilder('/metadata/ownerReferences')\n                .setListRemove(getOwnerReferences(ownedResource), (ownerReference) => compareOwnerReference(ownerReference, owner))\n                .build(),\n        ]);\n    });\n    return Promise.all(freePromises);\n});\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/requests/free-owned-resources.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/requests/free-owned-resources.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAkB,MAAM,8BAA8B,CAAC;AACjF,OAAO,EAAE,YAAY,EAAE,MAAM,yBAAyB,CAAC;AACvD,OAAO,EAAE,kBAAkB,EAAE,MAAM,qBAAqB,CAAC;AACzD,OAAO,EAAE,qBAAqB,EAAE,MAAM,4CAA4C,CAAC;AAGnF,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAChC,cAAsC,EACtC,KAAqB,EACrB,QAAiB,EACjB,EAAE;IACF,MAAM,YAAY,GAAG,CAAC,cAAc,IAAI,EAAE,CAAC;SACxC,MAAM,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,GAAG,CAAC;SACpB,GAAG,CAAC,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,aAAa,EAAE,EAAE,EAAE;QAC1C,IAAI,QAAQ,EAAE;YACZ,OAAO,OAAO,CAAC,KAAK,EAAE,aAAa,CAAC,CAAC;SACtC;QACD,OAAO,QAAQ,CAAC,KAAK,EAAE,aAAa,EAAE;YACpC,IAAI,YAAY,CAAC,2BAA2B,CAAC;iBAC1C,aAAa,CAAC,kBAAkB,CAAC,aAAa,CAAC,EAAE,CAAC,cAAc,EAAE,EAAE,CACnE,qBAAqB,CAAC,cAAc,EAAE,KAAK,CAAC,CAC7C;iBACA,KAAK,EAAE;SACX,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEL,OAAO,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,CAAC;AACnC,CAAC,CAAA,CAAC","sourcesContent":["import { k8sKill, k8sPatch, OwnerReference } from '@console/internal/module/k8s';\nimport { PatchBuilder } from '@console/shared/src/k8s';\nimport { getOwnerReferences } from '@console/shared/src';\nimport { compareOwnerReference } from '@console/shared/src/utils/owner-references';\nimport { K8sResourceWithModel } from '../../types/k8s-resource-with-model';\n\nexport const freeOwnedResources = async (\n  ownedResources: K8sResourceWithModel[],\n  owner: OwnerReference,\n  doDelete: boolean,\n) => {\n  const freePromises = (ownedResources || [])\n    .filter((res) => res)\n    .map(({ model, resource: ownedResource }) => {\n      if (doDelete) {\n        return k8sKill(model, ownedResource);\n      }\n      return k8sPatch(model, ownedResource, [\n        new PatchBuilder('/metadata/ownerReferences')\n          .setListRemove(getOwnerReferences(ownedResource), (ownerReference) =>\n            compareOwnerReference(ownerReference, owner),\n          )\n          .build(),\n      ]);\n    });\n\n  return Promise.all(freePromises);\n};\n"]}]}