{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/storage-class-form.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/storage-class-form.tsx","mtime":1616735742480},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport * as classNames from 'classnames';\nimport * as fuzzy from 'fuzzysearch';\nimport * as _ from 'lodash-es';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { getName } from '@console/shared';\nimport { AsyncComponent, ButtonBar, Dropdown, ExternalLink, Firehose, NameValueEditorPair, history, } from './utils';\nimport { k8sCreate, referenceForModel } from './../module/k8s';\nimport * as k8sActions from '../actions/k8s';\nimport { CSIDriverModel, StorageClassModel } from './../models';\nconst NameValueEditorComponent = (props) => (React.createElement(AsyncComponent, Object.assign({ loader: () => import('./utils/name-value-editor').then((c) => c.NameValueEditor) }, props)));\nconst defaultState = {\n    newStorageClass: {\n        name: '',\n        description: '',\n        type: null,\n        parameters: {},\n        reclaim: null,\n    },\n    customParams: [['', '']],\n    validationSuccessful: false,\n    loading: false,\n    error: null,\n    fieldErrors: { parameters: {} },\n};\nexport class StorageClassForm_ extends React.Component {\n    constructor(props) {\n        super(props);\n        this.defaultProvisionerObj = {\n            title: '',\n            provisioner: '',\n            parameters: {},\n        };\n        this.storageTypes = {};\n        this.CSIStorageTypes = Object.freeze({\n            'rbd.csi.ceph.com': {\n                title: 'Ceph RBD',\n                provisioner: 'rbd.csi.ceph.com',\n                documentationLink: 'https://rook.io/docs/rook/v1.1/',\n                parameters: {\n                    clusterID: {\n                        name: 'Cluster ID',\n                        hintText: 'The namespace where Ceph is deployed',\n                        required: true,\n                    },\n                    pool: {\n                        name: 'Pool',\n                        hintText: 'Ceph pool into which volume data shall be stored',\n                        required: true,\n                    },\n                    imageFormat: {\n                        name: 'Image Format',\n                        hintText: 'RBD image format. Defaults to \"2\"',\n                        values: { '2': '2' },\n                        required: true,\n                    },\n                    imageFeatures: {\n                        name: 'Image Features',\n                        hintText: 'Ceph RBD image features',\n                        values: { layering: 'layering' },\n                        required: true,\n                    },\n                    'csi.storage.k8s.io/provisioner-secret-name': {\n                        name: 'Provisioner Secret Name',\n                        hintText: 'The name of provisioner secret',\n                        required: true,\n                    },\n                    'csi.storage.k8s.io/provisioner-secret-namespace': {\n                        name: 'Provisioner Secret Namespace',\n                        hintText: 'The namespace where provisioner secret is created',\n                        required: true,\n                    },\n                    'csi.storage.k8s.io/node-stage-secret-name': {\n                        name: 'Node Stage Secret Name',\n                        hintText: 'The name of Node Stage secret',\n                        required: true,\n                    },\n                    'csi.storage.k8s.io/node-stage-secret-namespace': {\n                        name: 'Node Stage Secret Namespace',\n                        hintText: 'The namespace where provisioner secret is created',\n                        required: true,\n                    },\n                    'csi.storage.k8s.io/fstype': {\n                        name: 'Filesystem Type',\n                        hintText: 'Ceph RBD filesystem type. Default set to ext4',\n                        required: true,\n                    },\n                },\n            },\n            'cephfs.csi.ceph.com': {\n                title: 'Ceph FS',\n                provisioner: 'cephfs.csi.ceph.com',\n                documentationLink: 'https://rook.io/docs/rook/v1.1/',\n                parameters: {\n                    clusterID: {\n                        name: 'Cluster ID',\n                        hintText: 'The namespace where Ceph is deployed',\n                        required: true,\n                    },\n                    pool: {\n                        name: 'Pool',\n                        hintText: 'Ceph pool into which volume data shall be stored',\n                    },\n                    fsName: {\n                        name: 'Filesystem Name',\n                        hintText: 'CephFS filesystem name into which the volume shall be created',\n                        required: true,\n                    },\n                    'csi.storage.k8s.io/provisioner-secret-name': {\n                        name: 'Provisioner Secret Name',\n                        hintText: 'The name of provisioner secret',\n                        required: true,\n                    },\n                    'csi.storage.k8s.io/provisioner-secret-namespace': {\n                        name: 'Provisioner Secret Namespace',\n                        hintText: 'The namespace where provisioner secret is created',\n                        required: true,\n                    },\n                    'csi.storage.k8s.io/node-stage-secret-name': {\n                        name: 'Node Stage Secret Name',\n                        hintText: 'The name of Node Stage secret',\n                        required: true,\n                    },\n                    'csi.storage.k8s.io/node-stage-secret-namespace': {\n                        name: 'Node Stage Secret Namespace',\n                        hintText: 'The namespace where provisioner secret is created',\n                        required: true,\n                    },\n                },\n            },\n        });\n        this.defaultStorageTypes = Object.freeze({\n            local: {\n                title: 'Local',\n                provisioner: 'kubernetes.io/no-provisioner',\n                documentationLink: 'https://kubernetes.io/docs/concepts/storage/storage-classes/#local',\n                parameters: {},\n                volumeBindingMode: 'WaitForFirstConsumer',\n            },\n            aws: {\n                title: 'AWS Elastic Block Storage',\n                provisioner: 'kubernetes.io/aws-ebs',\n                documentationLink: 'https://kubernetes.io/docs/concepts/storage/storage-classes/#aws-ebs',\n                parameters: {\n                    type: {\n                        name: 'Type',\n                        values: { io1: 'io1', gp2: 'gp2', sc1: 'sc1', st1: 'st1' },\n                        hintText: 'Select AWS Type',\n                    },\n                    iopsPerGB: {\n                        name: 'IOPS Per GiB',\n                        hintText: 'I/O operations per second per GiB',\n                        validation: (params) => {\n                            if (params.iopsPerGB.value !== '' && !params.iopsPerGB.value.match(/^[1-9]\\d*$/)) {\n                                return 'IOPS per GiB must be a number';\n                            }\n                            return null;\n                        },\n                        visible: (params) => _.get(params, 'type.value') === 'io1',\n                    },\n                    fsType: {\n                        name: 'Filesystem Type',\n                        hintText: 'Filesystem to Be Laid Out',\n                    },\n                    encrypted: {\n                        name: 'Encrypted',\n                        type: 'checkbox',\n                        format: (value) => value.toString(),\n                    },\n                    kmsKeyId: {\n                        name: 'KMS Key ID',\n                        hintText: 'The full Amazon Resource Name of the key to use when encrypting the volume',\n                        visible: (params) => _.get(params, 'encrypted.value', false),\n                    },\n                },\n            },\n            'gce-pd': {\n                title: 'GCE PD',\n                provisioner: 'kubernetes.io/gce-pd',\n                documentationLink: 'https://kubernetes.io/docs/concepts/storage/storage-classes/#gce',\n                parameters: {\n                    type: {\n                        name: 'Type',\n                        values: { 'pd-standard': 'pd-standard', 'pd-ssd': 'pd-ssd' },\n                        hintText: 'Select GCE type',\n                    },\n                    zone: {\n                        name: 'Zone',\n                        validation: (params) => {\n                            if (params.zone.value !== '' && _.get(params, 'zones.value', '') !== '') {\n                                return 'Zone and zones parameters must not be used at the same time';\n                            }\n                            return null;\n                        },\n                    },\n                    zones: {\n                        name: 'Zones',\n                        validation: (params) => {\n                            if (params.zones.value !== '' && _.get(params, 'zone.value', '') !== '') {\n                                return 'Zone and zones parameters must not be used at the same time';\n                            }\n                            return null;\n                        },\n                    },\n                    'replication-type': {\n                        name: 'Replication Type',\n                        values: { none: 'none', 'regional-pd': 'regional-pd' },\n                        hintText: 'Select Replication Type',\n                        validation: (params) => {\n                            if (params['replication-type'].value === 'regional-pd' &&\n                                _.get(params, 'zone.value', '') !== '') {\n                                return 'Zone cannot be specified when Replication Type regional-pd is chosen, use zones instead';\n                            }\n                            return null;\n                        },\n                    },\n                },\n            },\n            glusterfs: {\n                title: 'Glusterfs',\n                provisioner: 'kubernetes.io/glusterfs',\n                documentationLink: 'https://kubernetes.io/docs/concepts/storage/storage-classes/#glusterfs',\n                parameters: {\n                    resturl: {\n                        name: 'Gluster REST/Heketi URL',\n                        required: true,\n                    },\n                    restuser: {\n                        name: 'Gluster REST/Heketi user',\n                    },\n                    secretNamespace: {\n                        name: 'Secret Namespace',\n                    },\n                    secretName: {\n                        name: 'Secret Name',\n                    },\n                    clusterid: {\n                        name: 'Cluster ID',\n                    },\n                    gidMin: {\n                        name: 'GID Min',\n                        validation: (params) => {\n                            if (params.gidMin.value !== '' && !params.gidMin.value.match(/^[1-9]\\d*$/)) {\n                                return 'GID Min must be number';\n                            }\n                            return null;\n                        },\n                    },\n                    gidMax: {\n                        name: 'GID Max',\n                        validation: (params) => {\n                            if (params.gidMax.value !== '' && !params.gidMax.value.match(/^[1-9]\\d*$/)) {\n                                return 'GID Max must be number';\n                            }\n                            return null;\n                        },\n                    },\n                    volumetype: {\n                        name: 'Volume Type',\n                    },\n                },\n            },\n            openstackCinder: {\n                title: 'OpenStack Cinder',\n                provisioner: 'kubernetes.io/cinder',\n                documentationLink: 'https://kubernetes.io/docs/concepts/storage/storage-classes/#openstack-cinder',\n                parameters: {\n                    type: {\n                        name: 'Volume Type',\n                    },\n                    availability: {\n                        name: 'Availability Zone',\n                    },\n                },\n            },\n            azureFile: {\n                title: 'Azure File',\n                provisioner: 'kubernetes.io/azure-file',\n                documentationLink: 'https://kubernetes.io/docs/concepts/storage/storage-classes/#azure-file',\n                parameters: {\n                    skuName: {\n                        name: 'SKU Name',\n                        hintText: 'Azure storage account SKU tier',\n                    },\n                    location: {\n                        name: 'Location',\n                        hintText: 'Azure storage account location',\n                    },\n                    storageAccount: {\n                        name: 'Azure Storage Account Name',\n                        hintText: 'Azure Storage Account Name',\n                    },\n                },\n            },\n            azureDisk: {\n                title: 'Azure Disk',\n                provisioner: 'kubernetes.io/azure-disk',\n                documentationLink: 'https://kubernetes.io/docs/concepts/storage/storage-classes/#azure-disk',\n                parameters: {\n                    storageaccounttype: {\n                        name: 'Storage Account Type',\n                        hintText: 'Storage Account Type',\n                    },\n                    kind: {\n                        name: 'Account Kind',\n                        values: { shared: 'shared', dedicated: 'dedicated', managed: 'managed' },\n                        hintText: 'Select Account Kind',\n                    },\n                },\n            },\n            quobyte: {\n                title: 'Quobyte',\n                provisioner: 'kubernetes.io/quobyte',\n                documentationLink: 'https://kubernetes.io/docs/concepts/storage/storage-classes/#quobyte',\n                parameters: {\n                    quobyteAPIServer: {\n                        name: 'Quobyte API Server',\n                        hintText: 'Quobyte API Server',\n                    },\n                    registry: {\n                        name: 'Registry Address(es)',\n                        hintText: 'Registry Address(es)',\n                    },\n                    adminSecretName: {\n                        name: 'Admin Secret Name',\n                        hintText: 'Admin Secret Name',\n                    },\n                    adminSecretNamespace: {\n                        name: 'Admin Secret Namespace',\n                        hintText: 'Admin Secret Namespace',\n                    },\n                    user: {\n                        name: 'User',\n                        hintText: 'User',\n                    },\n                    group: {\n                        name: 'Group',\n                        hintText: 'Group',\n                    },\n                    quobyteConfig: {\n                        name: 'Quobyte Configuration',\n                        hintText: 'Quobyte Configuration',\n                    },\n                    quobyteTenant: {\n                        name: 'Quobyte Tenant',\n                        hintText: 'Quobyte tenant ID used to create/delete the volume',\n                    },\n                },\n            },\n            vSphereVolume: {\n                title: 'vSphere Volume',\n                provisioner: 'kubernetes.io/vsphere-volume',\n                documentationLink: 'https://kubernetes.io/docs/concepts/storage/storage-classes/#vsphere',\n                parameters: {\n                    diskformat: {\n                        name: 'Disk Format',\n                        values: {\n                            thin: 'thin',\n                            zeroedthick: 'zeroed thick',\n                            eagerzeroedthick: 'eager zeroed thick',\n                        },\n                        hintText: 'Select Disk Format',\n                    },\n                    datastore: {\n                        name: 'Datastore',\n                        hintText: 'Datastore',\n                    },\n                },\n            },\n            portworxVolume: {\n                title: 'Portworx Volume',\n                provisioner: 'kubernetes.io/portworx-volume',\n                documentationLink: 'https://kubernetes.io/docs/concepts/storage/storage-classes/#portworx-volume',\n                parameters: {\n                    fs: {\n                        name: 'Filesystem',\n                        values: { none: 'none', xfs: 'xfs', ext4: 'ext4' },\n                        hintText: 'Select Filesystem',\n                    },\n                    // eslint-disable-next-line camelcase\n                    block_size: {\n                        name: 'Block Size',\n                        hintText: 'Block size in Kb',\n                        validation: (params) => {\n                            if (params.block_size.value !== '' && !params.block_size.value.match(/^[1-9]\\d*$/)) {\n                                return 'Snapshot interval must be a number';\n                            }\n                            return null;\n                        },\n                    },\n                    repl: {\n                        name: 'Number of synchronous replicas to be provided in the form of replication factor',\n                        hintText: 'Number of Replicas',\n                        validation: (params) => {\n                            if (params.repl.value !== '' && !params.repl.value.match(/^[1-9]\\d*$/)) {\n                                return 'Number of replicas must be a number';\n                            }\n                            return null;\n                        },\n                    },\n                    // eslint-disable-next-line camelcase\n                    io_priority: {\n                        name: 'I/O Priority',\n                        values: { high: 'high', medium: 'medium', low: 'low' },\n                        hintText: 'I/O Priority',\n                    },\n                    // eslint-disable-next-line camelcase\n                    snap_interval: {\n                        name: 'Snapshot Interval',\n                        hintText: 'Clock/time interval in minutes for when to trigger snapshots',\n                        validation: (params) => {\n                            if (params.repl.value !== '' && !params.repl.value.match(/^[1-9]\\d*$/)) {\n                                return 'Snapshot interval must be a number';\n                            }\n                            return null;\n                        },\n                        format: (value) => value.toString(),\n                    },\n                    // eslint-disable-next-line camelcase\n                    aggregation_level: {\n                        name: 'Aggregation Level',\n                        hintText: 'The number of chunks the volume would be distributed into',\n                        validation: (params) => {\n                            if (params.aggregation_level.value !== '' &&\n                                !params.aggregation_level.value.match(/^[1-9]\\d*$/)) {\n                                return 'Aggregation level must be a number';\n                            }\n                            return null;\n                        },\n                        format: (value) => value.toString(),\n                    },\n                    ephemeral: {\n                        name: 'Ephemeral',\n                        type: 'checkbox',\n                        format: (value) => value.toString(),\n                    },\n                },\n            },\n            scaleIo: {\n                title: 'ScaleIO',\n                provisioner: 'kubernetes.io/scaleio',\n                documentationLink: 'https://kubernetes.io/docs/concepts/storage/storage-classes/#scaleio',\n                parameters: {\n                    gateway: {\n                        name: 'API Gateway',\n                        required: true,\n                        hintText: 'ScaleIO API gateway address',\n                    },\n                    system: {\n                        name: 'System Name',\n                        required: true,\n                        hintText: 'Name of the ScaleIO system',\n                    },\n                    protectionDomain: {\n                        name: 'Protection Domain',\n                        required: true,\n                        hintText: 'Name of the ScaleIO protection domain',\n                    },\n                    storagePool: {\n                        name: 'Storage Pool',\n                        required: true,\n                        hintText: 'Name of the volume storage pool',\n                    },\n                    storageMode: {\n                        name: 'Storage Mode',\n                        values: { thinProvisioned: 'ThinProvisioned', thickProvisioned: 'ThickProvisioned' },\n                        hintText: 'Select Storage Provision Mode',\n                    },\n                    secretRef: {\n                        name: 'Secret Reference',\n                        required: true,\n                        hintText: 'Reference to a configured Secret object',\n                    },\n                    readOnly: {\n                        name: 'Read Only',\n                        type: 'checkbox',\n                    },\n                    fsType: {\n                        name: 'Filesystem Type',\n                        hintText: 'Filesystem to use for the volume',\n                    },\n                },\n            },\n            storageOs: {\n                title: 'StorageOS',\n                provisioner: 'kubernetes.io/storageos',\n                documentationLink: 'https://kubernetes.io/docs/concepts/storage/storage-classes/#storageos',\n                parameters: {\n                    pool: {\n                        name: 'Pool',\n                        hintText: 'Name of the StorageOS distributed capacity pool from which to provision the volume',\n                    },\n                    description: {\n                        name: 'Description',\n                        hintText: 'Description to assign to volumes that were created dynamically',\n                    },\n                    fsType: {\n                        name: 'Filesystem Type',\n                        hintText: 'Default filesystem type to request',\n                    },\n                    adminSecretName: {\n                        name: 'Admin Secret Name',\n                        hintText: 'Name of the secret to use for obtaining the StorageOS API credentials',\n                    },\n                    adminSecretNamespace: {\n                        name: 'Admin Secret Namespace',\n                        hintText: 'Namespace where the API configuration secret is located',\n                        required: (params) => {\n                            const adminSecretName = _.get(params, 'adminSecretName.value', null);\n                            return adminSecretName !== null && adminSecretName !== '';\n                        },\n                    },\n                },\n            },\n        });\n        this.reclaimPolicies = {\n            Retain: 'Retain',\n            Delete: 'Delete',\n        };\n        // Accepts a list of CSI provisioners and it checks if the\n        // provisioner is listed in CSIStorageTypes object\n        // if yes then return the provisioner with parameters that\n        // needs to be filled by user.\n        this.csiProvisionerMap = (csiData) => {\n            const csiListedProvisioner = _.keys(this.CSIStorageTypes);\n            csiData.map((csi) => {\n                _.each(csiListedProvisioner, (provisioner) => {\n                    const hasProvisioner = getName(csi).includes(provisioner);\n                    if (hasProvisioner) {\n                        const provisionerData = _.cloneDeep(this.CSIStorageTypes[provisioner]);\n                        provisionerData.provisioner = getName(csi);\n                        this.storageTypes[getName(csi)] = provisionerData;\n                        return false;\n                    }\n                    const provisionerData = _.cloneDeep(this.defaultProvisionerObj);\n                    provisionerData.title = getName(csi);\n                    provisionerData.provisioner = getName(csi);\n                    this.storageTypes[getName(csi)] = provisionerData;\n                });\n            });\n        };\n        this.setParameterHandler = (param, event, checkbox) => {\n            const newParams = Object.assign({}, this.state.newStorageClass.parameters);\n            if (checkbox) {\n                newParams[param] = { value: event.target.checked };\n            }\n            else {\n                if (event.target) {\n                    newParams[param] = { value: event.target.value };\n                }\n                else {\n                    newParams[param] = { value: event };\n                }\n            }\n            _.forOwn(newParams, (value, key) => {\n                if (newParams.hasOwnProperty(key)) {\n                    const validation = _.get(this.storageTypes[this.state.newStorageClass.type], ['parameters', key, 'validation'], null);\n                    newParams[key].validationMsg = validation ? validation(newParams) : null;\n                }\n            });\n            this.updateNewStorage('parameters', newParams, true);\n        };\n        this.updateNewStorage = (param, value, runValidation) => {\n            const newParams = Object.assign(Object.assign({}, this.state.newStorageClass), { [param]: value });\n            runValidation\n                ? this.setState({ newStorageClass: newParams }, this.validateForm)\n                : this.setState({ newStorageClass: newParams });\n        };\n        this.createStorageClass = (e) => {\n            e.preventDefault();\n            this.setState({\n                loading: true,\n            });\n            const { description, type, reclaim } = this.state.newStorageClass;\n            const dataParameters = this.getFormParams();\n            const annotations = description ? { description } : {};\n            const data = {\n                metadata: {\n                    name: this.state.newStorageClass.name,\n                    annotations,\n                },\n                provisioner: this.storageTypes[type].provisioner,\n                parameters: dataParameters,\n            };\n            if (reclaim) {\n                data.reclaimPolicy = reclaim;\n            }\n            const volumeBindingMode = _.get(this.storageTypes[type], 'volumeBindingMode', null);\n            if (volumeBindingMode) {\n                data.volumeBindingMode = volumeBindingMode;\n            }\n            k8sCreate(StorageClassModel, data)\n                .then(() => {\n                this.setState({ loading: false });\n                history.push('/k8s/cluster/storageclasses');\n            })\n                .catch((error) => this.setState({ loading: false, error }));\n        };\n        this.getFormParams = () => {\n            const type = this.state.newStorageClass.type;\n            const dataParameters = _.pickBy(_.mapValues(this.state.newStorageClass.parameters, (value, key) => {\n                let finalValue = value.value;\n                if (this.storageTypes[type].parameters[key].format) {\n                    finalValue = this.storageTypes[type].parameters[key].format(value.value);\n                }\n                return finalValue;\n            }), (value) => value !== '');\n            return _.merge(dataParameters, this.getCustomParams());\n        };\n        this.getCustomParams = () => {\n            // Discard any row whose key is blank\n            const customParams = _.reject(this.state.customParams, (t) => _.isEmpty(t[NameValueEditorPair.Name]));\n            // Display error if duplicate keys are found\n            const keys = customParams.map((t) => t[NameValueEditorPair.Name]);\n            if (_.uniq(keys).length !== keys.length) {\n                this.setState({ error: 'Duplicate keys found.' });\n                return;\n            }\n            // Convert any blank values to null\n            _.each(customParams, (t) => (t[NameValueEditorPair.Value] = _.isEmpty(t[NameValueEditorPair.Value])\n                ? null\n                : t[NameValueEditorPair.Value]));\n            return _.fromPairs(customParams);\n        };\n        this.updateCustomParams = (customParams) => {\n            this.setState({\n                customParams: customParams.nameValuePairs,\n            });\n        };\n        this.validateForm = () => {\n            // Clear error messages from previous validation attempts first\n            this.setState({ error: null, fieldErrors: {} }, () => {\n                const fieldErrors = this.state.fieldErrors;\n                let validationSuccessful = true;\n                const nameValidation = this.validateName();\n                if (!nameValidation.nameIsValid) {\n                    fieldErrors.nameValidationMsg = nameValidation.error;\n                    validationSuccessful = false;\n                }\n                if (this.state.newStorageClass.type === null) {\n                    validationSuccessful = false;\n                }\n                else if (!this.validateParameters()) {\n                    validationSuccessful = false;\n                }\n                if (!this.allRequiredFieldsFilled()) {\n                    validationSuccessful = false;\n                }\n                this.setState({ fieldErrors, validationSuccessful });\n            });\n        };\n        this.validateName = () => {\n            const updatedName = this.state.newStorageClass.name;\n            const nameUpdated = updatedName !== this.previousName;\n            const returnVal = {\n                error: null,\n                nameIsValid: true,\n            };\n            if (nameUpdated) {\n                if (updatedName.trim().length === 0) {\n                    returnVal.error = 'Storage name is required';\n                    returnVal.nameIsValid = false;\n                }\n                else if (this.resources) {\n                    _.each(this.resources.data, function (storageClass) {\n                        if (storageClass.metadata.name === updatedName.toLowerCase()) {\n                            returnVal.error = 'Storage name must be unique';\n                            returnVal.nameIsValid = false;\n                        }\n                    });\n                }\n                this.previousName = updatedName;\n            }\n            return returnVal;\n        };\n        this.validateParameters = () => {\n            const params = this.state.newStorageClass.parameters;\n            const allParamsValid = !_.some(params, ({ validationMsg }) => validationMsg !== null);\n            return allParamsValid;\n        };\n        this.allRequiredFieldsFilled = () => {\n            if (this.state.newStorageClass.name.trim().length === 0) {\n                return false;\n            }\n            const { type: storageType, parameters: userEnteredParams } = this.state.newStorageClass;\n            if (storageType === null) {\n                return false;\n            }\n            const allParamsForType = this.storageTypes[storageType].parameters;\n            const requiredKeys = _.keys(allParamsForType).filter((key) => this.paramIsRequired(key));\n            const allReqdFieldsEntered = _.every(requiredKeys, (key) => {\n                const value = _.get(userEnteredParams, [key, 'value']);\n                return !_.isEmpty(value);\n            });\n            return allReqdFieldsEntered;\n        };\n        this.paramIsRequired = (paramKey, params = this.state.newStorageClass.parameters) => {\n            const requiredParam = _.get(this.storageTypes[this.state.newStorageClass.type], ['parameters', paramKey, 'required'], null);\n            let isRequired = false;\n            if (requiredParam) {\n                isRequired = _.isFunction(requiredParam) ? requiredParam(params) : requiredParam;\n            }\n            return isRequired;\n        };\n        this.getProvisionerElements = () => {\n            const parameters = this.storageTypes[this.state.newStorageClass.type].parameters;\n            if (_.isEmpty(parameters)) {\n                return null;\n            }\n            const dynamicContent = _.map(parameters, (parameter, key) => {\n                const paramId = `storage-class-provisioner-${_.kebabCase(_.get(parameter, 'name', key))}`;\n                const validationMsg = _.get(parameter, 'validationMsg', null);\n                const isCheckbox = parameter.type === 'checkbox';\n                const selectedKey = ['newStorageClass', 'parameters', key, 'value'];\n                if (parameter.visible && !parameter.visible(this.state.newStorageClass.parameters)) {\n                    return null;\n                }\n                const children = parameter.values ? (React.createElement(React.Fragment, null,\n                    React.createElement(\"label\", { className: classNames('control-label', { 'co-required': this.paramIsRequired(key) }), htmlFor: paramId }, _.get(parameter, 'name', key)),\n                    React.createElement(Dropdown, { title: parameter.hintText, items: parameter.values, dropDownClassName: \"dropdown--full-width\", selectedKey: _.get(this.state, selectedKey), onChange: (event) => this.setParameterHandler(key, event, false), id: paramId }),\n                    React.createElement(\"span\", { className: \"help-block\" }, validationMsg ? validationMsg : null))) : (React.createElement(React.Fragment, null,\n                    isCheckbox ? (React.createElement(React.Fragment, null,\n                        React.createElement(\"div\", { className: \"checkbox\" },\n                            React.createElement(\"label\", null,\n                                React.createElement(\"input\", { type: \"checkbox\", className: \"create-storage-class-form__checkbox\", onChange: (event) => this.setParameterHandler(key, event, isCheckbox), checked: _.get(this.state, selectedKey, false), id: `provisioner-settings-${key}-checkbox` }),\n                                _.get(parameter, 'name', key))))) : (React.createElement(React.Fragment, null,\n                        React.createElement(\"label\", { className: classNames('control-label', {\n                                'co-required': this.paramIsRequired(key),\n                            }), htmlFor: paramId }, _.get(parameter, 'name', key)),\n                        React.createElement(\"input\", { type: \"text\", className: \"pf-c-form-control\", value: _.get(this.state, selectedKey, ''), onChange: (event) => this.setParameterHandler(key, event, isCheckbox), id: paramId }))),\n                    React.createElement(\"span\", { className: \"help-block\" }, validationMsg ? validationMsg : parameter.hintText)));\n                return (React.createElement(\"div\", { key: key, className: classNames('form-group', {\n                        'has-error': _.get(this.state.newStorageClass.parameters, `${key}.validationMsg`, null),\n                    }) }, children));\n            });\n            return (React.createElement(React.Fragment, null,\n                dynamicContent,\n                React.createElement(\"div\", { className: \"form-group\" },\n                    React.createElement(\"label\", null, \"Additional Parameters\"),\n                    React.createElement(\"p\", null,\n                        \"Specific fields for the selected provisioner. \\u00A0\",\n                        React.createElement(ExternalLink, { href: this.storageTypes[this.state.newStorageClass.type].documentationLink, text: \"What should I enter here?\" })),\n                    React.createElement(NameValueEditorComponent, { nameValuePairs: this.state.customParams, nameString: \"Parameter\", valueString: \"Value\", addString: \"Add Parameter\", updateParentData: this.updateCustomParams }))));\n        };\n        this.autocompleteFilter = (text, item) => fuzzy(text, item);\n        this.state = defaultState;\n        this.previousName = '';\n    }\n    componentDidUpdate(prevProps) {\n        if (this.props !== prevProps) {\n            const { resources } = this.props;\n            const loaded = _.get(resources.sc, 'loaded');\n            const csiLoaded = _.get(resources.csi, 'loaded');\n            const scData = _.get(resources.sc, 'data', []);\n            const csiData = _.get(resources.csi, 'data', []);\n            if (loaded) {\n                this.resources = {\n                    data: scData,\n                    loadError: _.get(resources.sc, 'loadError'),\n                    loaded,\n                };\n                this.validateForm();\n            }\n            if (csiLoaded) {\n                this.csiProvisionerMap(csiData);\n            }\n        }\n    }\n    componentDidMount() {\n        this.storageTypes = _.cloneDeep(this.defaultStorageTypes);\n    }\n    setStorageHandler(param, value) {\n        this.updateNewStorage(param, value, true);\n    }\n    render() {\n        const { newStorageClass, fieldErrors } = this.state;\n        const reclaimPolicyKey = newStorageClass.reclaim === null ? this.reclaimPolicies.Delete : newStorageClass.reclaim;\n        return (React.createElement(\"div\", { className: \"co-m-pane__body co-m-pane__form\" },\n            React.createElement(\"h1\", { className: \"co-m-pane__heading co-m-pane__heading--baseline\" },\n                React.createElement(\"div\", { className: \"co-m-pane__name\" }, \"Create Storage Class\"),\n                React.createElement(\"div\", { className: \"co-m-pane__heading-link\" },\n                    React.createElement(Link, { to: \"/k8s/cluster/storageclasses/~new\", id: \"yaml-link\", replace: true }, \"Edit YAML\"))),\n            React.createElement(\"form\", { \"data-test-id\": \"storage-class-form\" },\n                React.createElement(\"div\", { className: classNames('form-group', { 'has-error': fieldErrors.nameValidationMsg }) },\n                    React.createElement(\"label\", { className: \"control-label co-required\", htmlFor: \"storage-class-name\" }, \"Name\"),\n                    React.createElement(\"input\", { type: \"text\", className: \"pf-c-form-control\", placeholder: newStorageClass.name, id: \"storage-class-name\", onChange: (event) => this.setStorageHandler('name', event.target.value), value: _.get(newStorageClass, 'name', '') }),\n                    React.createElement(\"span\", { className: \"help-block\" }, fieldErrors.nameValidationMsg ? fieldErrors.nameValidationMsg : null)),\n                React.createElement(\"div\", { className: \"form-group\" },\n                    React.createElement(\"label\", { htmlFor: \"storage-class-description\" }, \"Description\"),\n                    React.createElement(\"input\", { type: \"text\", className: \"pf-c-form-control\", id: \"storage-class-description\", onChange: (event) => this.setStorageHandler('description', event.target.value), value: _.get(newStorageClass, 'description', '') })),\n                React.createElement(\"div\", { className: \"form-group\" },\n                    React.createElement(\"label\", { className: \"co-required\", htmlFor: \"storage-class-reclaim-policy\" }, \"Reclaim Policy\"),\n                    React.createElement(Dropdown, { title: \"Select Reclaim Policy\", items: this.reclaimPolicies, dropDownClassName: \"dropdown--full-width\", selectedKey: reclaimPolicyKey, onChange: (event) => this.setStorageHandler('reclaim', event), id: \"storage-class-reclaim-policy\" }),\n                    React.createElement(\"span\", { className: \"help-block\" }, \"Determines what happens to persistent volumes when the associated persistent volume claim is deleted. Defaults to \\u2018Delete\\u2019\")),\n                React.createElement(\"div\", { className: \"form-group\" },\n                    React.createElement(\"label\", { className: \"co-required\", htmlFor: \"storage-class-provisioner\" }, \"Provisioner\"),\n                    React.createElement(Dropdown, { title: \"Select Provisioner\", autocompleteFilter: this.autocompleteFilter, autocompletePlaceholder: 'Select Provisioner', items: _.mapValues(this.storageTypes, 'provisioner'), dropDownClassName: \"dropdown--full-width\", menuClassName: \"dropdown-menu--text-wrap\", selectedKey: _.get(this.state, 'newStorageClass.type'), onChange: (event) => this.setStorageHandler('type', event), id: \"storage-class-provisioner\" }),\n                    React.createElement(\"span\", { className: \"help-block\" }, \"Determines what volume plugin is used for provisioning persistent volumes.\")),\n                React.createElement(\"div\", { className: \"co-form-subsection\" }, newStorageClass.type !== null ? this.getProvisionerElements() : null),\n                React.createElement(ButtonBar, { errorMessage: this.state.error ? this.state.error.message : '', inProgress: this.state.loading },\n                    React.createElement(ActionGroup, { className: \"pf-c-form\" },\n                        React.createElement(Button, { id: \"save-changes\", isDisabled: !this.state.validationSuccessful, onClick: this.createStorageClass, type: \"submit\", variant: \"primary\" }, \"Create\"),\n                        React.createElement(Button, { id: \"cancel\", onClick: () => history.push('/k8s/cluster/storageclasses'), type: \"button\", variant: \"secondary\" }, \"Cancel\"))))));\n    }\n}\nconst mapStateToProps = ({ k8s }, { onClose }) => ({\n    k8s,\n    onClose,\n});\nconst mapDispatchToProps = () => ({\n    stopK8sWatch: k8sActions.stopK8sWatch,\n    watchK8sList: k8sActions.watchK8sList,\n});\nexport const ConnectedStorageClassForm = connect(mapStateToProps, mapDispatchToProps)(StorageClassForm_);\nexport const StorageClassForm = (props) => {\n    const resources = [\n        { kind: StorageClassModel.kind, isList: true, prop: 'sc' },\n        { kind: referenceForModel(CSIDriverModel), isList: true, prop: 'csi' },\n    ];\n    return (React.createElement(Firehose, { resources: resources },\n        React.createElement(ConnectedStorageClassForm, Object.assign({}, props))));\n};\nConnectedStorageClassForm.displayName = 'StorageClassForm';\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/storage-class-form.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/storage-class-form.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport * as classNames from 'classnames';\nimport * as fuzzy from 'fuzzysearch';\nimport * as _ from 'lodash-es';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { getName } from '@console/shared';\nimport {\n  AsyncComponent,\n  ButtonBar,\n  Dropdown,\n  ExternalLink,\n  Firehose,\n  FirehoseResult,\n  NameValueEditorPair,\n  history,\n} from './utils';\nimport { k8sCreate, K8sResourceKind, referenceForModel } from './../module/k8s';\nimport * as k8sActions from '../actions/k8s';\nimport { CSIDriverModel, StorageClassModel } from './../models';\n\nconst NameValueEditorComponent = (props) => (\n  <AsyncComponent\n    loader={() => import('./utils/name-value-editor').then((c) => c.NameValueEditor)}\n    {...props}\n  />\n);\n\nconst defaultState = {\n  newStorageClass: {\n    name: '',\n    description: '',\n    type: null,\n    parameters: {},\n    reclaim: null,\n  },\n  customParams: [['', '']],\n  validationSuccessful: false,\n  loading: false,\n  error: null,\n  fieldErrors: { parameters: {} },\n};\n\nexport class StorageClassForm_ extends React.Component<\n  StorageClassFormProps,\n  StorageClassFormState\n> {\n  resources: Resources;\n  reduxId: string;\n  previousName: string;\n\n  constructor(props) {\n    super(props);\n    this.state = defaultState;\n    this.previousName = '';\n  }\n\n  defaultProvisionerObj = {\n    title: '',\n    provisioner: '',\n    parameters: {},\n  };\n\n  storageTypes = {};\n\n  CSIStorageTypes = Object.freeze({\n    'rbd.csi.ceph.com': {\n      title: 'Ceph RBD',\n      provisioner: 'rbd.csi.ceph.com',\n      documentationLink: 'https://rook.io/docs/rook/v1.1/',\n      parameters: {\n        clusterID: {\n          name: 'Cluster ID',\n          hintText: 'The namespace where Ceph is deployed',\n          required: true,\n        },\n        pool: {\n          name: 'Pool',\n          hintText: 'Ceph pool into which volume data shall be stored',\n          required: true,\n        },\n        imageFormat: {\n          name: 'Image Format',\n          hintText: 'RBD image format. Defaults to \"2\"',\n          values: { '2': '2' },\n          required: true,\n        },\n        imageFeatures: {\n          name: 'Image Features',\n          hintText: 'Ceph RBD image features',\n          values: { layering: 'layering' },\n          required: true,\n        },\n        'csi.storage.k8s.io/provisioner-secret-name': {\n          name: 'Provisioner Secret Name',\n          hintText: 'The name of provisioner secret',\n          required: true,\n        },\n        'csi.storage.k8s.io/provisioner-secret-namespace': {\n          name: 'Provisioner Secret Namespace',\n          hintText: 'The namespace where provisioner secret is created',\n          required: true,\n        },\n        'csi.storage.k8s.io/node-stage-secret-name': {\n          name: 'Node Stage Secret Name',\n          hintText: 'The name of Node Stage secret',\n          required: true,\n        },\n        'csi.storage.k8s.io/node-stage-secret-namespace': {\n          name: 'Node Stage Secret Namespace',\n          hintText: 'The namespace where provisioner secret is created',\n          required: true,\n        },\n        'csi.storage.k8s.io/fstype': {\n          name: 'Filesystem Type',\n          hintText: 'Ceph RBD filesystem type. Default set to ext4',\n          required: true,\n        },\n      },\n    },\n    'cephfs.csi.ceph.com': {\n      title: 'Ceph FS',\n      provisioner: 'cephfs.csi.ceph.com',\n      documentationLink: 'https://rook.io/docs/rook/v1.1/',\n      parameters: {\n        clusterID: {\n          name: 'Cluster ID',\n          hintText: 'The namespace where Ceph is deployed',\n          required: true,\n        },\n        pool: {\n          name: 'Pool',\n          hintText: 'Ceph pool into which volume data shall be stored',\n        },\n        fsName: {\n          name: 'Filesystem Name',\n          hintText: 'CephFS filesystem name into which the volume shall be created',\n          required: true,\n        },\n        'csi.storage.k8s.io/provisioner-secret-name': {\n          name: 'Provisioner Secret Name',\n          hintText: 'The name of provisioner secret',\n          required: true,\n        },\n        'csi.storage.k8s.io/provisioner-secret-namespace': {\n          name: 'Provisioner Secret Namespace',\n          hintText: 'The namespace where provisioner secret is created',\n          required: true,\n        },\n        'csi.storage.k8s.io/node-stage-secret-name': {\n          name: 'Node Stage Secret Name',\n          hintText: 'The name of Node Stage secret',\n          required: true,\n        },\n        'csi.storage.k8s.io/node-stage-secret-namespace': {\n          name: 'Node Stage Secret Namespace',\n          hintText: 'The namespace where provisioner secret is created',\n          required: true,\n        },\n      },\n    },\n  });\n\n  defaultStorageTypes = Object.freeze({\n    local: {\n      title: 'Local',\n      provisioner: 'kubernetes.io/no-provisioner',\n      documentationLink: 'https://kubernetes.io/docs/concepts/storage/storage-classes/#local',\n      parameters: {},\n      volumeBindingMode: 'WaitForFirstConsumer',\n    },\n    aws: {\n      title: 'AWS Elastic Block Storage',\n      provisioner: 'kubernetes.io/aws-ebs',\n      documentationLink: 'https://kubernetes.io/docs/concepts/storage/storage-classes/#aws-ebs',\n      parameters: {\n        type: {\n          name: 'Type',\n          values: { io1: 'io1', gp2: 'gp2', sc1: 'sc1', st1: 'st1' },\n          hintText: 'Select AWS Type',\n        },\n        iopsPerGB: {\n          name: 'IOPS Per GiB',\n          hintText: 'I/O operations per second per GiB',\n          validation: (params) => {\n            if (params.iopsPerGB.value !== '' && !params.iopsPerGB.value.match(/^[1-9]\\d*$/)) {\n              return 'IOPS per GiB must be a number';\n            }\n            return null;\n          },\n          visible: (params) => _.get(params, 'type.value') === 'io1',\n        },\n        fsType: {\n          name: 'Filesystem Type',\n          hintText: 'Filesystem to Be Laid Out',\n        },\n        encrypted: {\n          name: 'Encrypted',\n          type: 'checkbox',\n          format: (value) => value.toString(),\n        },\n        kmsKeyId: {\n          name: 'KMS Key ID',\n          hintText: 'The full Amazon Resource Name of the key to use when encrypting the volume',\n          visible: (params) => _.get(params, 'encrypted.value', false),\n        },\n      },\n    },\n    'gce-pd': {\n      title: 'GCE PD',\n      provisioner: 'kubernetes.io/gce-pd',\n      documentationLink: 'https://kubernetes.io/docs/concepts/storage/storage-classes/#gce',\n      parameters: {\n        type: {\n          name: 'Type',\n          values: { 'pd-standard': 'pd-standard', 'pd-ssd': 'pd-ssd' },\n          hintText: 'Select GCE type',\n        },\n        zone: {\n          name: 'Zone',\n          validation: (params) => {\n            if (params.zone.value !== '' && _.get(params, 'zones.value', '') !== '') {\n              return 'Zone and zones parameters must not be used at the same time';\n            }\n            return null;\n          },\n        },\n        zones: {\n          name: 'Zones',\n          validation: (params) => {\n            if (params.zones.value !== '' && _.get(params, 'zone.value', '') !== '') {\n              return 'Zone and zones parameters must not be used at the same time';\n            }\n            return null;\n          },\n        },\n        'replication-type': {\n          name: 'Replication Type',\n          values: { none: 'none', 'regional-pd': 'regional-pd' },\n          hintText: 'Select Replication Type',\n          validation: (params) => {\n            if (\n              params['replication-type'].value === 'regional-pd' &&\n              _.get(params, 'zone.value', '') !== ''\n            ) {\n              return 'Zone cannot be specified when Replication Type regional-pd is chosen, use zones instead';\n            }\n            return null;\n          },\n        },\n      },\n    },\n    glusterfs: {\n      title: 'Glusterfs',\n      provisioner: 'kubernetes.io/glusterfs',\n      documentationLink: 'https://kubernetes.io/docs/concepts/storage/storage-classes/#glusterfs',\n      parameters: {\n        resturl: {\n          name: 'Gluster REST/Heketi URL',\n          required: true,\n        },\n        restuser: {\n          name: 'Gluster REST/Heketi user',\n        },\n        secretNamespace: {\n          name: 'Secret Namespace',\n        },\n        secretName: {\n          name: 'Secret Name',\n        },\n        clusterid: {\n          name: 'Cluster ID',\n        },\n        gidMin: {\n          name: 'GID Min',\n          validation: (params) => {\n            if (params.gidMin.value !== '' && !params.gidMin.value.match(/^[1-9]\\d*$/)) {\n              return 'GID Min must be number';\n            }\n            return null;\n          },\n        },\n        gidMax: {\n          name: 'GID Max',\n          validation: (params) => {\n            if (params.gidMax.value !== '' && !params.gidMax.value.match(/^[1-9]\\d*$/)) {\n              return 'GID Max must be number';\n            }\n            return null;\n          },\n        },\n        volumetype: {\n          name: 'Volume Type',\n        },\n      },\n    },\n    openstackCinder: {\n      title: 'OpenStack Cinder',\n      provisioner: 'kubernetes.io/cinder',\n      documentationLink:\n        'https://kubernetes.io/docs/concepts/storage/storage-classes/#openstack-cinder',\n      parameters: {\n        type: {\n          name: 'Volume Type',\n        },\n        availability: {\n          name: 'Availability Zone',\n        },\n      },\n    },\n    azureFile: {\n      title: 'Azure File',\n      provisioner: 'kubernetes.io/azure-file',\n      documentationLink: 'https://kubernetes.io/docs/concepts/storage/storage-classes/#azure-file',\n      parameters: {\n        skuName: {\n          name: 'SKU Name',\n          hintText: 'Azure storage account SKU tier',\n        },\n        location: {\n          name: 'Location',\n          hintText: 'Azure storage account location',\n        },\n        storageAccount: {\n          name: 'Azure Storage Account Name',\n          hintText: 'Azure Storage Account Name',\n        },\n      },\n    },\n    azureDisk: {\n      title: 'Azure Disk',\n      provisioner: 'kubernetes.io/azure-disk',\n      documentationLink: 'https://kubernetes.io/docs/concepts/storage/storage-classes/#azure-disk',\n      parameters: {\n        storageaccounttype: {\n          name: 'Storage Account Type',\n          hintText: 'Storage Account Type',\n        },\n        kind: {\n          name: 'Account Kind',\n          values: { shared: 'shared', dedicated: 'dedicated', managed: 'managed' },\n          hintText: 'Select Account Kind',\n        },\n      },\n    },\n    quobyte: {\n      title: 'Quobyte',\n      provisioner: 'kubernetes.io/quobyte',\n      documentationLink: 'https://kubernetes.io/docs/concepts/storage/storage-classes/#quobyte',\n      parameters: {\n        quobyteAPIServer: {\n          name: 'Quobyte API Server',\n          hintText: 'Quobyte API Server',\n        },\n        registry: {\n          name: 'Registry Address(es)',\n          hintText: 'Registry Address(es)',\n        },\n        adminSecretName: {\n          name: 'Admin Secret Name',\n          hintText: 'Admin Secret Name',\n        },\n        adminSecretNamespace: {\n          name: 'Admin Secret Namespace',\n          hintText: 'Admin Secret Namespace',\n        },\n        user: {\n          name: 'User',\n          hintText: 'User',\n        },\n        group: {\n          name: 'Group',\n          hintText: 'Group',\n        },\n        quobyteConfig: {\n          name: 'Quobyte Configuration',\n          hintText: 'Quobyte Configuration',\n        },\n        quobyteTenant: {\n          name: 'Quobyte Tenant',\n          hintText: 'Quobyte tenant ID used to create/delete the volume',\n        },\n      },\n    },\n    vSphereVolume: {\n      title: 'vSphere Volume',\n      provisioner: 'kubernetes.io/vsphere-volume',\n      documentationLink: 'https://kubernetes.io/docs/concepts/storage/storage-classes/#vsphere',\n      parameters: {\n        diskformat: {\n          name: 'Disk Format',\n          values: {\n            thin: 'thin',\n            zeroedthick: 'zeroed thick',\n            eagerzeroedthick: 'eager zeroed thick',\n          },\n          hintText: 'Select Disk Format',\n        },\n        datastore: {\n          name: 'Datastore',\n          hintText: 'Datastore',\n        },\n      },\n    },\n    portworxVolume: {\n      title: 'Portworx Volume',\n      provisioner: 'kubernetes.io/portworx-volume',\n      documentationLink:\n        'https://kubernetes.io/docs/concepts/storage/storage-classes/#portworx-volume',\n      parameters: {\n        fs: {\n          name: 'Filesystem',\n          values: { none: 'none', xfs: 'xfs', ext4: 'ext4' },\n          hintText: 'Select Filesystem',\n        },\n        // eslint-disable-next-line camelcase\n        block_size: {\n          name: 'Block Size',\n          hintText: 'Block size in Kb',\n          validation: (params) => {\n            if (params.block_size.value !== '' && !params.block_size.value.match(/^[1-9]\\d*$/)) {\n              return 'Snapshot interval must be a number';\n            }\n            return null;\n          },\n        },\n        repl: {\n          name: 'Number of synchronous replicas to be provided in the form of replication factor',\n          hintText: 'Number of Replicas',\n          validation: (params) => {\n            if (params.repl.value !== '' && !params.repl.value.match(/^[1-9]\\d*$/)) {\n              return 'Number of replicas must be a number';\n            }\n            return null;\n          },\n        },\n        // eslint-disable-next-line camelcase\n        io_priority: {\n          name: 'I/O Priority',\n          values: { high: 'high', medium: 'medium', low: 'low' },\n          hintText: 'I/O Priority',\n        },\n        // eslint-disable-next-line camelcase\n        snap_interval: {\n          name: 'Snapshot Interval',\n          hintText: 'Clock/time interval in minutes for when to trigger snapshots',\n          validation: (params) => {\n            if (params.repl.value !== '' && !params.repl.value.match(/^[1-9]\\d*$/)) {\n              return 'Snapshot interval must be a number';\n            }\n            return null;\n          },\n          format: (value) => value.toString(),\n        },\n        // eslint-disable-next-line camelcase\n        aggregation_level: {\n          name: 'Aggregation Level',\n          hintText: 'The number of chunks the volume would be distributed into',\n          validation: (params) => {\n            if (\n              params.aggregation_level.value !== '' &&\n              !params.aggregation_level.value.match(/^[1-9]\\d*$/)\n            ) {\n              return 'Aggregation level must be a number';\n            }\n            return null;\n          },\n          format: (value) => value.toString(),\n        },\n        ephemeral: {\n          name: 'Ephemeral',\n          type: 'checkbox',\n          format: (value) => value.toString(),\n        },\n      },\n    },\n    scaleIo: {\n      title: 'ScaleIO',\n      provisioner: 'kubernetes.io/scaleio',\n      documentationLink: 'https://kubernetes.io/docs/concepts/storage/storage-classes/#scaleio',\n      parameters: {\n        gateway: {\n          name: 'API Gateway',\n          required: true,\n          hintText: 'ScaleIO API gateway address',\n        },\n        system: {\n          name: 'System Name',\n          required: true,\n          hintText: 'Name of the ScaleIO system',\n        },\n        protectionDomain: {\n          name: 'Protection Domain',\n          required: true,\n          hintText: 'Name of the ScaleIO protection domain',\n        },\n        storagePool: {\n          name: 'Storage Pool',\n          required: true,\n          hintText: 'Name of the volume storage pool',\n        },\n        storageMode: {\n          name: 'Storage Mode',\n          values: { thinProvisioned: 'ThinProvisioned', thickProvisioned: 'ThickProvisioned' },\n          hintText: 'Select Storage Provision Mode',\n        },\n        secretRef: {\n          name: 'Secret Reference',\n          required: true,\n          hintText: 'Reference to a configured Secret object',\n        },\n        readOnly: {\n          name: 'Read Only',\n          type: 'checkbox',\n        },\n        fsType: {\n          name: 'Filesystem Type',\n          hintText: 'Filesystem to use for the volume',\n        },\n      },\n    },\n    storageOs: {\n      title: 'StorageOS',\n      provisioner: 'kubernetes.io/storageos',\n      documentationLink: 'https://kubernetes.io/docs/concepts/storage/storage-classes/#storageos',\n      parameters: {\n        pool: {\n          name: 'Pool',\n          hintText:\n            'Name of the StorageOS distributed capacity pool from which to provision the volume',\n        },\n        description: {\n          name: 'Description',\n          hintText: 'Description to assign to volumes that were created dynamically',\n        },\n        fsType: {\n          name: 'Filesystem Type',\n          hintText: 'Default filesystem type to request',\n        },\n        adminSecretName: {\n          name: 'Admin Secret Name',\n          hintText: 'Name of the secret to use for obtaining the StorageOS API credentials',\n        },\n        adminSecretNamespace: {\n          name: 'Admin Secret Namespace',\n          hintText: 'Namespace where the API configuration secret is located',\n          required: (params) => {\n            const adminSecretName = _.get(params, 'adminSecretName.value', null);\n            return adminSecretName !== null && adminSecretName !== '';\n          },\n        },\n      },\n    },\n  });\n\n  reclaimPolicies = {\n    Retain: 'Retain',\n    Delete: 'Delete',\n  };\n\n  // Accepts a list of CSI provisioners and it checks if the\n  // provisioner is listed in CSIStorageTypes object\n  // if yes then return the provisioner with parameters that\n  // needs to be filled by user.\n  csiProvisionerMap = (csiData) => {\n    const csiListedProvisioner: string[] = _.keys(this.CSIStorageTypes);\n    csiData.map((csi) => {\n      _.each(csiListedProvisioner, (provisioner) => {\n        const hasProvisioner = getName(csi).includes(provisioner);\n        if (hasProvisioner) {\n          const provisionerData = _.cloneDeep(this.CSIStorageTypes[provisioner]);\n          provisionerData.provisioner = getName(csi);\n          this.storageTypes[getName(csi)] = provisionerData;\n          return false;\n        }\n        const provisionerData = _.cloneDeep(this.defaultProvisionerObj);\n        provisionerData.title = getName(csi);\n        provisionerData.provisioner = getName(csi);\n        this.storageTypes[getName(csi)] = provisionerData;\n      });\n    });\n  };\n\n  componentDidUpdate(prevProps) {\n    if (this.props !== prevProps) {\n      const { resources } = this.props;\n      const loaded = _.get(resources.sc, 'loaded');\n      const csiLoaded = _.get(resources.csi, 'loaded');\n      const scData = _.get(resources.sc, 'data', []) as K8sResourceKind[];\n      const csiData = _.get(resources.csi, 'data', []) as K8sResourceKind[];\n      if (loaded) {\n        this.resources = {\n          data: scData,\n          loadError: _.get(resources.sc, 'loadError'),\n          loaded,\n        };\n        this.validateForm();\n      }\n      if (csiLoaded) {\n        this.csiProvisionerMap(csiData);\n      }\n    }\n  }\n\n  componentDidMount() {\n    this.storageTypes = _.cloneDeep(this.defaultStorageTypes);\n  }\n\n  setParameterHandler = (param, event, checkbox) => {\n    const newParams = { ...this.state.newStorageClass.parameters };\n    if (checkbox) {\n      newParams[param] = { value: event.target.checked };\n    } else {\n      if (event.target) {\n        newParams[param] = { value: event.target.value };\n      } else {\n        newParams[param] = { value: event };\n      }\n    }\n\n    _.forOwn(newParams, (value, key) => {\n      if (newParams.hasOwnProperty(key)) {\n        const validation = _.get(\n          this.storageTypes[this.state.newStorageClass.type],\n          ['parameters', key, 'validation'],\n          null,\n        );\n        newParams[key].validationMsg = validation ? validation(newParams) : null;\n      }\n    });\n\n    this.updateNewStorage('parameters', newParams, true);\n  };\n\n  setStorageHandler(param, value) {\n    this.updateNewStorage(param, value, true);\n  }\n\n  updateNewStorage = (param, value, runValidation) => {\n    const newParams = {\n      ...this.state.newStorageClass,\n      [param]: value,\n    };\n\n    runValidation\n      ? this.setState({ newStorageClass: newParams }, this.validateForm)\n      : this.setState({ newStorageClass: newParams });\n  };\n\n  createStorageClass = (e: React.FormEvent<EventTarget>) => {\n    e.preventDefault();\n\n    this.setState({\n      loading: true,\n    });\n\n    const { description, type, reclaim } = this.state.newStorageClass;\n    const dataParameters = this.getFormParams();\n    const annotations = description ? { description } : {};\n    const data: StorageClass = {\n      metadata: {\n        name: this.state.newStorageClass.name,\n        annotations,\n      },\n      provisioner: this.storageTypes[type].provisioner,\n      parameters: dataParameters,\n    };\n\n    if (reclaim) {\n      data.reclaimPolicy = reclaim;\n    }\n\n    const volumeBindingMode = _.get(this.storageTypes[type], 'volumeBindingMode', null);\n    if (volumeBindingMode) {\n      data.volumeBindingMode = volumeBindingMode;\n    }\n\n    k8sCreate(StorageClassModel, data)\n      .then(() => {\n        this.setState({ loading: false });\n        history.push('/k8s/cluster/storageclasses');\n      })\n      .catch((error) => this.setState({ loading: false, error }));\n  };\n\n  getFormParams = () => {\n    const type = this.state.newStorageClass.type;\n    const dataParameters = _.pickBy(\n      _.mapValues(this.state.newStorageClass.parameters, (value, key) => {\n        let finalValue = value.value;\n        if (this.storageTypes[type].parameters[key].format) {\n          finalValue = this.storageTypes[type].parameters[key].format(value.value);\n        }\n        return finalValue;\n      }),\n      (value) => value !== '',\n    );\n\n    return _.merge(dataParameters, this.getCustomParams());\n  };\n\n  getCustomParams = () => {\n    // Discard any row whose key is blank\n    const customParams = _.reject(this.state.customParams, (t) =>\n      _.isEmpty(t[NameValueEditorPair.Name]),\n    );\n\n    // Display error if duplicate keys are found\n    const keys = customParams.map((t) => t[NameValueEditorPair.Name]);\n    if (_.uniq(keys).length !== keys.length) {\n      this.setState({ error: 'Duplicate keys found.' });\n      return;\n    }\n\n    // Convert any blank values to null\n    _.each(\n      customParams,\n      (t) =>\n        (t[NameValueEditorPair.Value] = _.isEmpty(t[NameValueEditorPair.Value])\n          ? null\n          : t[NameValueEditorPair.Value]),\n    );\n\n    return _.fromPairs(customParams);\n  };\n\n  updateCustomParams = (customParams) => {\n    this.setState({\n      customParams: customParams.nameValuePairs,\n    });\n  };\n\n  validateForm = () => {\n    // Clear error messages from previous validation attempts first\n    this.setState({ error: null, fieldErrors: {} }, () => {\n      const fieldErrors = this.state.fieldErrors;\n      let validationSuccessful = true;\n\n      const nameValidation = this.validateName();\n      if (!nameValidation.nameIsValid) {\n        fieldErrors.nameValidationMsg = nameValidation.error;\n        validationSuccessful = false;\n      }\n\n      if (this.state.newStorageClass.type === null) {\n        validationSuccessful = false;\n      } else if (!this.validateParameters()) {\n        validationSuccessful = false;\n      }\n\n      if (!this.allRequiredFieldsFilled()) {\n        validationSuccessful = false;\n      }\n\n      this.setState({ fieldErrors, validationSuccessful });\n    });\n  };\n\n  validateName = () => {\n    const updatedName = this.state.newStorageClass.name;\n    const nameUpdated = updatedName !== this.previousName;\n    const returnVal = {\n      error: null,\n      nameIsValid: true,\n    };\n\n    if (nameUpdated) {\n      if (updatedName.trim().length === 0) {\n        returnVal.error = 'Storage name is required';\n        returnVal.nameIsValid = false;\n      } else if (this.resources) {\n        _.each(this.resources.data, function(storageClass) {\n          if (storageClass.metadata.name === updatedName.toLowerCase()) {\n            returnVal.error = 'Storage name must be unique';\n            returnVal.nameIsValid = false;\n          }\n        });\n      }\n      this.previousName = updatedName;\n    }\n\n    return returnVal;\n  };\n\n  validateParameters = () => {\n    const params = this.state.newStorageClass.parameters;\n    const allParamsValid = !_.some(params, ({ validationMsg }) => validationMsg !== null);\n    return allParamsValid;\n  };\n\n  allRequiredFieldsFilled = () => {\n    if (this.state.newStorageClass.name.trim().length === 0) {\n      return false;\n    }\n\n    const { type: storageType, parameters: userEnteredParams } = this.state.newStorageClass;\n\n    if (storageType === null) {\n      return false;\n    }\n\n    const allParamsForType = this.storageTypes[storageType].parameters;\n\n    const requiredKeys = _.keys(allParamsForType).filter((key) => this.paramIsRequired(key));\n    const allReqdFieldsEntered = _.every(requiredKeys, (key) => {\n      const value = _.get(userEnteredParams, [key, 'value']);\n      return !_.isEmpty(value);\n    });\n\n    return allReqdFieldsEntered;\n  };\n\n  paramIsRequired = (paramKey, params = this.state.newStorageClass.parameters) => {\n    const requiredParam = _.get(\n      this.storageTypes[this.state.newStorageClass.type],\n      ['parameters', paramKey, 'required'],\n      null,\n    );\n    let isRequired = false;\n    if (requiredParam) {\n      isRequired = _.isFunction(requiredParam) ? requiredParam(params) : requiredParam;\n    }\n\n    return isRequired;\n  };\n\n  getProvisionerElements = () => {\n    const parameters = this.storageTypes[this.state.newStorageClass.type].parameters;\n\n    if (_.isEmpty(parameters)) {\n      return null;\n    }\n\n    const dynamicContent = _.map(parameters, (parameter, key) => {\n      const paramId = `storage-class-provisioner-${_.kebabCase(_.get(parameter, 'name', key))}`;\n      const validationMsg = _.get(parameter, 'validationMsg', null);\n      const isCheckbox = parameter.type === 'checkbox';\n      const selectedKey = ['newStorageClass', 'parameters', key, 'value'];\n\n      if (parameter.visible && !parameter.visible(this.state.newStorageClass.parameters)) {\n        return null;\n      }\n\n      const children = parameter.values ? (\n        <>\n          <label\n            className={classNames('control-label', { 'co-required': this.paramIsRequired(key) })}\n            htmlFor={paramId}\n          >\n            {_.get(parameter, 'name', key)}\n          </label>\n          <Dropdown\n            title={parameter.hintText}\n            items={parameter.values}\n            dropDownClassName=\"dropdown--full-width\"\n            selectedKey={_.get(this.state, selectedKey)}\n            onChange={(event) => this.setParameterHandler(key, event, false)}\n            id={paramId}\n          />\n          <span className=\"help-block\">{validationMsg ? validationMsg : null}</span>\n        </>\n      ) : (\n        <>\n          {isCheckbox ? (\n            <>\n              <div className=\"checkbox\">\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    className=\"create-storage-class-form__checkbox\"\n                    onChange={(event) => this.setParameterHandler(key, event, isCheckbox)}\n                    checked={_.get(this.state, selectedKey, false)}\n                    id={`provisioner-settings-${key}-checkbox`}\n                  />\n                  {_.get(parameter, 'name', key)}\n                </label>\n              </div>\n            </>\n          ) : (\n            <>\n              <label\n                className={classNames('control-label', {\n                  'co-required': this.paramIsRequired(key),\n                })}\n                htmlFor={paramId}\n              >\n                {_.get(parameter, 'name', key)}\n              </label>\n              <input\n                type=\"text\"\n                className=\"pf-c-form-control\"\n                value={_.get(this.state, selectedKey, '')}\n                onChange={(event) => this.setParameterHandler(key, event, isCheckbox)}\n                id={paramId}\n              />\n            </>\n          )}\n          <span className=\"help-block\">{validationMsg ? validationMsg : parameter.hintText}</span>\n        </>\n      );\n\n      return (\n        <div\n          key={key}\n          className={classNames('form-group', {\n            'has-error': _.get(this.state.newStorageClass.parameters, `${key}.validationMsg`, null),\n          })}\n        >\n          {children}\n        </div>\n      );\n    });\n\n    return (\n      <>\n        {dynamicContent}\n\n        <div className=\"form-group\">\n          <label>Additional Parameters</label>\n          <p>\n            Specific fields for the selected provisioner. &nbsp;\n            <ExternalLink\n              href={this.storageTypes[this.state.newStorageClass.type].documentationLink}\n              text=\"What should I enter here?\"\n            />\n          </p>\n          <NameValueEditorComponent\n            nameValuePairs={this.state.customParams}\n            nameString=\"Parameter\"\n            valueString=\"Value\"\n            addString=\"Add Parameter\"\n            updateParentData={this.updateCustomParams}\n          />\n        </div>\n      </>\n    );\n  };\n\n  autocompleteFilter = (text, item) => fuzzy(text, item);\n\n  render() {\n    const { newStorageClass, fieldErrors } = this.state;\n    const reclaimPolicyKey =\n      newStorageClass.reclaim === null ? this.reclaimPolicies.Delete : newStorageClass.reclaim;\n\n    return (\n      <div className=\"co-m-pane__body co-m-pane__form\">\n        <h1 className=\"co-m-pane__heading co-m-pane__heading--baseline\">\n          <div className=\"co-m-pane__name\">Create Storage Class</div>\n          <div className=\"co-m-pane__heading-link\">\n            <Link to=\"/k8s/cluster/storageclasses/~new\" id=\"yaml-link\" replace>\n              Edit YAML\n            </Link>\n          </div>\n        </h1>\n        <form data-test-id=\"storage-class-form\">\n          <div className={classNames('form-group', { 'has-error': fieldErrors.nameValidationMsg })}>\n            <label className=\"control-label co-required\" htmlFor=\"storage-class-name\">\n              Name\n            </label>\n            <input\n              type=\"text\"\n              className=\"pf-c-form-control\"\n              placeholder={newStorageClass.name}\n              id=\"storage-class-name\"\n              onChange={(event) => this.setStorageHandler('name', event.target.value)}\n              value={_.get(newStorageClass, 'name', '')}\n            />\n            <span className=\"help-block\">\n              {fieldErrors.nameValidationMsg ? fieldErrors.nameValidationMsg : null}\n            </span>\n          </div>\n\n          <div className=\"form-group\">\n            <label htmlFor=\"storage-class-description\">Description</label>\n            <input\n              type=\"text\"\n              className=\"pf-c-form-control\"\n              id=\"storage-class-description\"\n              onChange={(event) => this.setStorageHandler('description', event.target.value)}\n              value={_.get(newStorageClass, 'description', '')}\n            />\n          </div>\n\n          <div className=\"form-group\">\n            <label className=\"co-required\" htmlFor=\"storage-class-reclaim-policy\">\n              Reclaim Policy\n            </label>\n            <Dropdown\n              title=\"Select Reclaim Policy\"\n              items={this.reclaimPolicies}\n              dropDownClassName=\"dropdown--full-width\"\n              selectedKey={reclaimPolicyKey}\n              onChange={(event) => this.setStorageHandler('reclaim', event)}\n              id=\"storage-class-reclaim-policy\"\n            />\n            <span className=\"help-block\">\n              Determines what happens to persistent volumes when the associated persistent volume\n              claim is deleted. Defaults to &lsquo;Delete&rsquo;\n            </span>\n          </div>\n\n          <div className=\"form-group\">\n            <label className=\"co-required\" htmlFor=\"storage-class-provisioner\">\n              Provisioner\n            </label>\n            <Dropdown\n              title=\"Select Provisioner\"\n              autocompleteFilter={this.autocompleteFilter}\n              autocompletePlaceholder={'Select Provisioner'}\n              items={_.mapValues(this.storageTypes, 'provisioner')}\n              dropDownClassName=\"dropdown--full-width\"\n              menuClassName=\"dropdown-menu--text-wrap\"\n              selectedKey={_.get(this.state, 'newStorageClass.type')}\n              onChange={(event) => this.setStorageHandler('type', event)}\n              id=\"storage-class-provisioner\"\n            />\n            <span className=\"help-block\">\n              Determines what volume plugin is used for provisioning persistent volumes.\n            </span>\n          </div>\n\n          <div className=\"co-form-subsection\">\n            {newStorageClass.type !== null ? this.getProvisionerElements() : null}\n          </div>\n\n          <ButtonBar\n            errorMessage={this.state.error ? this.state.error.message : ''}\n            inProgress={this.state.loading}\n          >\n            <ActionGroup className=\"pf-c-form\">\n              <Button\n                id=\"save-changes\"\n                isDisabled={!this.state.validationSuccessful}\n                onClick={this.createStorageClass}\n                type=\"submit\"\n                variant=\"primary\"\n              >\n                Create\n              </Button>\n              <Button\n                id=\"cancel\"\n                onClick={() => history.push('/k8s/cluster/storageclasses')}\n                type=\"button\"\n                variant=\"secondary\"\n              >\n                Cancel\n              </Button>\n            </ActionGroup>\n          </ButtonBar>\n        </form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = ({ k8s }, { onClose }) => ({\n  k8s,\n  onClose,\n});\n\nconst mapDispatchToProps = () => ({\n  stopK8sWatch: k8sActions.stopK8sWatch,\n  watchK8sList: k8sActions.watchK8sList,\n});\n\nexport type StorageClassFormProps = {\n  onClose: () => void;\n  watchK8sList: (id: string, query: object, kind: object) => void;\n  stopK8sWatch: (id: string) => void;\n  k8s: any;\n  resources?: {\n    [key: string]: FirehoseResult;\n  };\n};\n\nexport type StorageClassData = {\n  name: string;\n  type: string;\n  description: string;\n  parameters: any;\n  reclaim: string;\n};\n\nexport type StorageClass = {\n  metadata: object;\n  provisioner: string;\n  parameters: object;\n  reclaimPolicy?: string;\n  volumeBindingMode?: string;\n};\n\nexport type StorageClassFormState = {\n  newStorageClass: StorageClassData;\n  customParams: string[][];\n  validationSuccessful: boolean;\n  loading: boolean;\n  error: any;\n  fieldErrors: { [k: string]: any };\n};\n\nexport type Resources = {\n  loaded: boolean;\n  data: any[];\n  loadError: string;\n};\n\nexport const ConnectedStorageClassForm = connect(\n  mapStateToProps,\n  mapDispatchToProps,\n)(StorageClassForm_);\n\nexport const StorageClassForm = (props) => {\n  const resources = [\n    { kind: StorageClassModel.kind, isList: true, prop: 'sc' },\n    { kind: referenceForModel(CSIDriverModel), isList: true, prop: 'csi' },\n  ];\n  return (\n    <Firehose resources={resources}>\n      <ConnectedStorageClassForm {...props} />\n    </Firehose>\n  );\n};\n\nConnectedStorageClassForm.displayName = 'StorageClassForm';\n"]}]}