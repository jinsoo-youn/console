{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/dynamic-form/utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/dynamic-form/utils.ts","mtime":1616735742370},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { getUiOptions } from 'react-jsonschema-form/lib/utils';\nconst UNSUPPORTED_SCHEMA_PROPERTIES = []; // Openshift에서는 oneOf, allOf, anyOf에 대한 schema 무시하도록 해놈. 이거 일단 이유를 모르겠어서 없애놈. 나중에 문제 생기면 다시 봐야할듯.\nexport const useSchemaLabel = (schema, uiSchema, defaultLabel) => {\n    var _a;\n    const options = getUiOptions(uiSchema !== null && uiSchema !== void 0 ? uiSchema : {});\n    const showLabel = (_a = options === null || options === void 0 ? void 0 : options.label) !== null && _a !== void 0 ? _a : true;\n    const label = ((options === null || options === void 0 ? void 0 : options.title) || (schema === null || schema === void 0 ? void 0 : schema.title) || defaultLabel);\n    return [showLabel, label];\n};\nexport const useSchemaDescription = (schema, uiSchema, defaultDescription) => { var _a; return (((_a = getUiOptions(uiSchema !== null && uiSchema !== void 0 ? uiSchema : {})) === null || _a === void 0 ? void 0 : _a.description) || (schema === null || schema === void 0 ? void 0 : schema.description) || defaultDescription); };\nexport const getSchemaErrors = (schema) => {\n    return [\n        ...(_.isEmpty(schema)\n            ? [\n                {\n                    title: 'Empty Schema',\n                    message: 'Schema is empty.',\n                },\n            ]\n            : []),\n        ..._.map(_.intersection(_.keys(schema), UNSUPPORTED_SCHEMA_PROPERTIES), unsupportedProperty => ({\n            title: 'Unsupported Property',\n            message: `Cannot generate form fields for JSON schema with ${unsupportedProperty} property.`,\n        })),\n    ];\n};\n// Returns true if a value is not nil and is empty\nconst definedAndEmpty = value => !_.isNil(value) && _.isEmpty(value);\n// Helper function for prune\n// TODO (jon) Make this pure\nconst pruneRecursive = (current, sample) => {\n    const valueIsEmpty = (value, key) => _.isNil(value) || _.isNaN(value) || (_.isString(value) && _.isEmpty(value)) || (_.isObject(value) && _.isEmpty(pruneRecursive(value, sample === null || sample === void 0 ? void 0 : sample[key])));\n    // Value should be pruned if it is empty and the correspondeing sample is not explicitly\n    // defined as an empty value.\n    const shouldPrune = (value, key) => valueIsEmpty(value, key) && !definedAndEmpty(sample === null || sample === void 0 ? void 0 : sample[key]);\n    // Prune each property of current value that meets the pruning criteria\n    _.forOwn(current, (value, key) => {\n        if (shouldPrune(value, key)) {\n            delete current[key];\n        }\n    });\n    // remove any leftover undefined values from the delete operation on an array\n    if (_.isArray(current)) {\n        _.pull(current, undefined);\n    }\n    return current;\n};\n// Deeply remove all empty, NaN, null, or undefined values from an object or array. If a value meets\n// the above criteria, but the corresponding sample is explicitly defined as an empty vaolue, it\n// will not be pruned.\n// Based on https://stackoverflow.com/a/26202058/8895304\nexport const prune = (obj, sample) => {\n    return pruneRecursive(_.cloneDeep(obj), sample);\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/dynamic-form/utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/dynamic-form/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { JSONSchema6 } from 'json-schema';\nimport { UiSchema } from 'react-jsonschema-form';\nimport { getUiOptions } from 'react-jsonschema-form/lib/utils';\n\nconst UNSUPPORTED_SCHEMA_PROPERTIES = []; // Openshift에서는 oneOf, allOf, anyOf에 대한 schema 무시하도록 해놈. 이거 일단 이유를 모르겠어서 없애놈. 나중에 문제 생기면 다시 봐야할듯.\n\nexport const useSchemaLabel = (schema: JSONSchema6, uiSchema: UiSchema, defaultLabel?: string) => {\n  const options = getUiOptions(uiSchema ?? {});\n  const showLabel = options?.label ?? true;\n  const label = (options?.title || schema?.title || defaultLabel) as string;\n  return [showLabel, label] as [boolean, string];\n};\n\nexport const useSchemaDescription = (schema: JSONSchema6, uiSchema: UiSchema, defaultDescription?: string) => (getUiOptions(uiSchema ?? {})?.description || schema?.description || defaultDescription) as string;\n\nexport const getSchemaErrors = (schema: JSONSchema6): SchemaError[] => {\n  return [\n    ...(_.isEmpty(schema)\n      ? [\n          {\n            title: 'Empty Schema',\n            message: 'Schema is empty.',\n          },\n        ]\n      : []),\n    ..._.map(_.intersection(_.keys(schema), UNSUPPORTED_SCHEMA_PROPERTIES), unsupportedProperty => ({\n      title: 'Unsupported Property',\n      message: `Cannot generate form fields for JSON schema with ${unsupportedProperty} property.`,\n    })),\n  ];\n};\n\n// Returns true if a value is not nil and is empty\nconst definedAndEmpty = value => !_.isNil(value) && _.isEmpty(value);\n\n// Helper function for prune\n// TODO (jon) Make this pure\nconst pruneRecursive = (current: any, sample: any): any => {\n  const valueIsEmpty = (value, key) => _.isNil(value) || _.isNaN(value) || (_.isString(value) && _.isEmpty(value)) || (_.isObject(value) && _.isEmpty(pruneRecursive(value, sample?.[key])));\n\n  // Value should be pruned if it is empty and the correspondeing sample is not explicitly\n  // defined as an empty value.\n  const shouldPrune = (value, key) => valueIsEmpty(value, key) && !definedAndEmpty(sample?.[key]);\n\n  // Prune each property of current value that meets the pruning criteria\n  _.forOwn(current, (value, key) => {\n    if (shouldPrune(value, key)) {\n      delete current[key];\n    }\n  });\n\n  // remove any leftover undefined values from the delete operation on an array\n  if (_.isArray(current)) {\n    _.pull(current, undefined);\n  }\n\n  return current;\n};\n\n// Deeply remove all empty, NaN, null, or undefined values from an object or array. If a value meets\n// the above criteria, but the corresponding sample is explicitly defined as an empty vaolue, it\n// will not be pruned.\n// Based on https://stackoverflow.com/a/26202058/8895304\nexport const prune = (obj: any, sample?: any): any => {\n  return pruneRecursive(_.cloneDeep(obj), sample);\n};\n\ntype SchemaError = {\n  title: string;\n  message: string;\n};\n"]}]}