{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/cluster-settings/ldap-idp-form.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/cluster-settings/ldap-idp-form.tsx","mtime":1615298458720},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Helmet } from 'react-helmet';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { ConfigMapModel, SecretModel } from '../../models';\nimport { k8sCreate } from '../../module/k8s';\nimport { ButtonBar, ListInput, PromiseComponent, history } from '../utils';\nimport { addIDP, getOAuthResource, redirectToOAuthPage, mockNames } from './';\nimport { IDPNameInput } from './idp-name-input';\nimport { IDPCAFileInput } from './idp-cafile-input';\nexport class AddLDAPPage extends PromiseComponent {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            name: 'ldap',\n            url: '',\n            bindDN: '',\n            bindPassword: '',\n            attributesID: ['dn'],\n            attributesPreferredUsername: ['uid'],\n            attributesName: ['cn'],\n            attributesEmail: [],\n            caFileContent: '',\n            inProgress: false,\n            errorMessage: '',\n        };\n        this.submit = (e) => {\n            e.preventDefault();\n            // Clear any previous errors.\n            this.setState({ errorMessage: '' });\n            this.getOAuthResource().then((oauth) => {\n                const mockSecret = this.state.bindPassword ? mockNames.secret : '';\n                const mockCA = this.state.caFileContent ? mockNames.ca : '';\n                this.addLDAPIDP(oauth, mockSecret, mockCA, true)\n                    .then(() => {\n                    const promises = [this.createBindPasswordSecret(), this.createCAConfigMap()];\n                    Promise.all(promises)\n                        .then(([bindPasswordSecret, caConfigMap]) => {\n                        const bindPasswordSecretName = _.get(bindPasswordSecret, 'metadata.name');\n                        const caConfigMapName = _.get(caConfigMap, 'metadata.name');\n                        return this.addLDAPIDP(oauth, bindPasswordSecretName, caConfigMapName);\n                    })\n                        .then(redirectToOAuthPage);\n                })\n                    .catch((err) => {\n                    this.setState({ errorMessage: err });\n                });\n            });\n        };\n        this.nameChanged = (event) => {\n            this.setState({ name: event.currentTarget.value });\n        };\n        this.urlChanged = (event) => {\n            this.setState({ url: event.currentTarget.value });\n        };\n        this.bindDNChanged = (event) => {\n            this.setState({ bindDN: event.currentTarget.value });\n        };\n        this.bindPasswordChanged = (event) => {\n            this.setState({ bindPassword: event.currentTarget.value });\n        };\n        this.attributesIDChanged = (attributesID) => {\n            this.setState({ attributesID });\n        };\n        this.attributesPreferredUsernameChanged = (attributesPreferredUsername) => {\n            this.setState({ attributesPreferredUsername });\n        };\n        this.attributesNameChanged = (attributesName) => {\n            this.setState({ attributesName });\n        };\n        this.attributesEmailChanged = (attributesEmail) => {\n            this.setState({ attributesEmail });\n        };\n        this.caFileChanged = (caFileContent) => {\n            this.setState({ caFileContent });\n        };\n    }\n    getOAuthResource() {\n        return this.handlePromise(getOAuthResource());\n    }\n    createCAConfigMap() {\n        const { caFileContent } = this.state;\n        if (!caFileContent) {\n            return Promise.resolve(null);\n        }\n        const ca = {\n            apiVersion: 'v1',\n            kind: 'ConfigMap',\n            metadata: {\n                generateName: 'ldap-ca-',\n                namespace: 'openshift-config',\n            },\n            data: {\n                'ca.crt': caFileContent,\n            },\n        };\n        return this.handlePromise(k8sCreate(ConfigMapModel, ca));\n    }\n    createBindPasswordSecret() {\n        const { bindPassword } = this.state;\n        if (!bindPassword) {\n            return Promise.resolve(null);\n        }\n        const secret = {\n            apiVersion: 'v1',\n            kind: 'Secret',\n            metadata: {\n                generateName: 'ldap-bind-password-',\n                namespace: 'openshift-config',\n            },\n            stringData: {\n                bindPassword,\n            },\n        };\n        return this.handlePromise(k8sCreate(SecretModel, secret));\n    }\n    addLDAPIDP(oauth, bindPasswordSecretName, caConfigMapName, dryRun) {\n        const { name, url, bindDN, attributesID, attributesPreferredUsername, attributesName, attributesEmail, } = this.state;\n        const idp = {\n            name,\n            mappingMethod: 'claim',\n            type: 'LDAP',\n            ldap: {\n                url,\n                insecure: false,\n                attributes: {\n                    id: attributesID,\n                    preferredUsername: attributesPreferredUsername,\n                    name: attributesName,\n                    email: attributesEmail,\n                },\n            },\n        };\n        if (bindDN) {\n            idp.ldap.bindDN = bindDN;\n        }\n        if (bindPasswordSecretName) {\n            idp.ldap.bindPassword = {\n                name: bindPasswordSecretName,\n            };\n        }\n        if (caConfigMapName) {\n            idp.ldap.ca = {\n                name: caConfigMapName,\n            };\n        }\n        return this.handlePromise(addIDP(oauth, idp, dryRun));\n    }\n    render() {\n        const { name, url, bindDN, bindPassword, attributesID, attributesPreferredUsername, attributesName, caFileContent, } = this.state;\n        const title = 'Add Identity Provider: LDAP';\n        return (React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(Helmet, null,\n                React.createElement(\"title\", null, title)),\n            React.createElement(\"form\", { onSubmit: this.submit, name: \"form\", className: \"co-m-pane__body-group co-m-pane__form\" },\n                React.createElement(\"h1\", { className: \"co-m-pane__heading\" }, title),\n                React.createElement(\"p\", { className: \"co-m-pane__explanation\" }, \"Integrate with an LDAP identity provider.\"),\n                React.createElement(IDPNameInput, { value: name, onChange: this.nameChanged }),\n                React.createElement(\"div\", { className: \"form-group\" },\n                    React.createElement(\"label\", { className: \"control-label co-required\", htmlFor: \"url\" }, \"URL\"),\n                    React.createElement(\"input\", { className: \"pf-c-form-control\", type: \"url\", onChange: this.urlChanged, value: url, id: \"url\", required: true, \"aria-describedby\": \"url-help\" }),\n                    React.createElement(\"div\", { className: \"help-block\", id: \"url-help\" }, \"An RFC 2255 URL which specifies the LDAP search parameters to use.\")),\n                React.createElement(\"div\", { className: \"form-group\" },\n                    React.createElement(\"label\", { className: \"control-label\", htmlFor: \"bind-dn\" }, \"Bind DN\"),\n                    React.createElement(\"input\", { className: \"pf-c-form-control\", type: \"text\", onChange: this.bindDNChanged, value: bindDN, id: \"bind-dn\", \"aria-describedby\": \"bind-dn-help\" }),\n                    React.createElement(\"div\", { className: \"help-block\", id: \"bind-dn-help\" }, \"DN to bind with during the search phase.\")),\n                React.createElement(\"div\", { className: \"form-group\" },\n                    React.createElement(\"label\", { className: \"control-label\", htmlFor: \"bind-password\" }, \"Bind Password\"),\n                    React.createElement(\"input\", { className: \"pf-c-form-control\", type: \"password\", onChange: this.bindPasswordChanged, value: bindPassword, id: \"bind-password\", \"aria-describedby\": \"bind-password-help\" }),\n                    React.createElement(\"div\", { className: \"help-block\", id: \"bind-password-help\" }, \"Password to bind with during the search phase.\")),\n                React.createElement(\"div\", { className: \"co-form-section__separator\" }),\n                React.createElement(\"h3\", null, \"Attributes\"),\n                React.createElement(\"p\", { className: \"co-help-text\" }, \"Attributes map LDAP attributes to identities.\"),\n                React.createElement(ListInput, { label: \"ID\", required: true, initialValues: attributesID, onChange: this.attributesIDChanged, helpText: \"The list of attributes whose values should be used as the user ID.\" }),\n                React.createElement(ListInput, { label: \"Preferred Username\", initialValues: attributesPreferredUsername, onChange: this.attributesPreferredUsernameChanged, helpText: \"The list of attributes whose values should be used as the preferred username.\" }),\n                React.createElement(ListInput, { label: \"Name\", initialValues: attributesName, onChange: this.attributesNameChanged, helpText: \"The list of attributes whose values should be used as the display name.\" }),\n                React.createElement(ListInput, { label: \"Email\", onChange: this.attributesEmailChanged, helpText: \"The list of attributes whose values should be used as the email address.\" }),\n                React.createElement(\"div\", { className: \"co-form-section__separator\" }),\n                React.createElement(\"h3\", null, \"More Options\"),\n                React.createElement(IDPCAFileInput, { value: caFileContent, onChange: this.caFileChanged }),\n                React.createElement(ButtonBar, { errorMessage: this.state.errorMessage, inProgress: this.state.inProgress },\n                    React.createElement(ActionGroup, { className: \"pf-c-form\" },\n                        React.createElement(Button, { type: \"submit\", variant: \"primary\", \"data-test-id\": \"add-idp\" }, \"Add\"),\n                        React.createElement(Button, { type: \"button\", variant: \"secondary\", onClick: history.goBack }, \"Cancel\"))))));\n    }\n}\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/cluster-settings/ldap-idp-form.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/cluster-settings/ldap-idp-form.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Helmet } from 'react-helmet';\nimport { ActionGroup, Button } from '@patternfly/react-core';\n\nimport { ConfigMapModel, SecretModel } from '../../models';\nimport { IdentityProvider, k8sCreate, K8sResourceKind, OAuthKind } from '../../module/k8s';\nimport { ButtonBar, ListInput, PromiseComponent, history } from '../utils';\nimport { addIDP, getOAuthResource, redirectToOAuthPage, mockNames } from './';\nimport { IDPNameInput } from './idp-name-input';\nimport { IDPCAFileInput } from './idp-cafile-input';\n\nexport class AddLDAPPage extends PromiseComponent<{}, AddLDAPPageState> {\n  readonly state: AddLDAPPageState = {\n    name: 'ldap',\n    url: '',\n    bindDN: '',\n    bindPassword: '',\n    attributesID: ['dn'],\n    attributesPreferredUsername: ['uid'],\n    attributesName: ['cn'],\n    attributesEmail: [],\n    caFileContent: '',\n    inProgress: false,\n    errorMessage: '',\n  };\n\n  getOAuthResource(): Promise<OAuthKind> {\n    return this.handlePromise(getOAuthResource());\n  }\n\n  createCAConfigMap(): Promise<K8sResourceKind> {\n    const { caFileContent } = this.state;\n    if (!caFileContent) {\n      return Promise.resolve(null);\n    }\n\n    const ca = {\n      apiVersion: 'v1',\n      kind: 'ConfigMap',\n      metadata: {\n        generateName: 'ldap-ca-',\n        namespace: 'openshift-config',\n      },\n      data: {\n        'ca.crt': caFileContent,\n      },\n    };\n\n    return this.handlePromise(k8sCreate(ConfigMapModel, ca));\n  }\n\n  createBindPasswordSecret(): Promise<K8sResourceKind> {\n    const { bindPassword } = this.state;\n    if (!bindPassword) {\n      return Promise.resolve(null);\n    }\n\n    const secret = {\n      apiVersion: 'v1',\n      kind: 'Secret',\n      metadata: {\n        generateName: 'ldap-bind-password-',\n        namespace: 'openshift-config',\n      },\n      stringData: {\n        bindPassword,\n      },\n    };\n\n    return this.handlePromise(k8sCreate(SecretModel, secret));\n  }\n\n  addLDAPIDP(\n    oauth: OAuthKind,\n    bindPasswordSecretName: string,\n    caConfigMapName: string,\n    dryRun?: boolean,\n  ): Promise<K8sResourceKind> {\n    const {\n      name,\n      url,\n      bindDN,\n      attributesID,\n      attributesPreferredUsername,\n      attributesName,\n      attributesEmail,\n    } = this.state;\n    const idp: IdentityProvider = {\n      name,\n      mappingMethod: 'claim',\n      type: 'LDAP',\n      ldap: {\n        url,\n        insecure: false,\n        attributes: {\n          id: attributesID,\n          preferredUsername: attributesPreferredUsername,\n          name: attributesName,\n          email: attributesEmail,\n        },\n      },\n    };\n\n    if (bindDN) {\n      idp.ldap.bindDN = bindDN;\n    }\n\n    if (bindPasswordSecretName) {\n      idp.ldap.bindPassword = {\n        name: bindPasswordSecretName,\n      };\n    }\n\n    if (caConfigMapName) {\n      idp.ldap.ca = {\n        name: caConfigMapName,\n      };\n    }\n\n    return this.handlePromise(addIDP(oauth, idp, dryRun));\n  }\n\n  submit: React.FormEventHandler<HTMLFormElement> = (e) => {\n    e.preventDefault();\n    // Clear any previous errors.\n    this.setState({ errorMessage: '' });\n    this.getOAuthResource().then((oauth: OAuthKind) => {\n      const mockSecret = this.state.bindPassword ? mockNames.secret : '';\n      const mockCA = this.state.caFileContent ? mockNames.ca : '';\n      this.addLDAPIDP(oauth, mockSecret, mockCA, true)\n        .then(() => {\n          const promises = [this.createBindPasswordSecret(), this.createCAConfigMap()];\n\n          Promise.all(promises)\n            .then(([bindPasswordSecret, caConfigMap]) => {\n              const bindPasswordSecretName = _.get(bindPasswordSecret, 'metadata.name');\n              const caConfigMapName = _.get(caConfigMap, 'metadata.name');\n              return this.addLDAPIDP(oauth, bindPasswordSecretName, caConfigMapName);\n            })\n            .then(redirectToOAuthPage);\n        })\n        .catch((err) => {\n          this.setState({ errorMessage: err });\n        });\n    });\n  };\n\n  nameChanged: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    this.setState({ name: event.currentTarget.value });\n  };\n\n  urlChanged: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    this.setState({ url: event.currentTarget.value });\n  };\n\n  bindDNChanged: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    this.setState({ bindDN: event.currentTarget.value });\n  };\n\n  bindPasswordChanged: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    this.setState({ bindPassword: event.currentTarget.value });\n  };\n\n  attributesIDChanged = (attributesID: string[]) => {\n    this.setState({ attributesID });\n  };\n\n  attributesPreferredUsernameChanged = (attributesPreferredUsername: string[]) => {\n    this.setState({ attributesPreferredUsername });\n  };\n\n  attributesNameChanged = (attributesName: string[]) => {\n    this.setState({ attributesName });\n  };\n\n  attributesEmailChanged = (attributesEmail: string[]) => {\n    this.setState({ attributesEmail });\n  };\n\n  caFileChanged = (caFileContent: string) => {\n    this.setState({ caFileContent });\n  };\n\n  render() {\n    const {\n      name,\n      url,\n      bindDN,\n      bindPassword,\n      attributesID,\n      attributesPreferredUsername,\n      attributesName,\n      caFileContent,\n    } = this.state;\n    const title = 'Add Identity Provider: LDAP';\n    return (\n      <div className=\"co-m-pane__body\">\n        <Helmet>\n          <title>{title}</title>\n        </Helmet>\n        <form onSubmit={this.submit} name=\"form\" className=\"co-m-pane__body-group co-m-pane__form\">\n          <h1 className=\"co-m-pane__heading\">{title}</h1>\n          <p className=\"co-m-pane__explanation\">Integrate with an LDAP identity provider.</p>\n          <IDPNameInput value={name} onChange={this.nameChanged} />\n          <div className=\"form-group\">\n            <label className=\"control-label co-required\" htmlFor=\"url\">\n              URL\n            </label>\n            <input\n              className=\"pf-c-form-control\"\n              type=\"url\"\n              onChange={this.urlChanged}\n              value={url}\n              id=\"url\"\n              required\n              aria-describedby=\"url-help\"\n            />\n            <div className=\"help-block\" id=\"url-help\">\n              An RFC 2255 URL which specifies the LDAP search parameters to use.\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label className=\"control-label\" htmlFor=\"bind-dn\">\n              Bind DN\n            </label>\n            <input\n              className=\"pf-c-form-control\"\n              type=\"text\"\n              onChange={this.bindDNChanged}\n              value={bindDN}\n              id=\"bind-dn\"\n              aria-describedby=\"bind-dn-help\"\n            />\n            <div className=\"help-block\" id=\"bind-dn-help\">\n              DN to bind with during the search phase.\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label className=\"control-label\" htmlFor=\"bind-password\">\n              Bind Password\n            </label>\n            <input\n              className=\"pf-c-form-control\"\n              type=\"password\"\n              onChange={this.bindPasswordChanged}\n              value={bindPassword}\n              id=\"bind-password\"\n              aria-describedby=\"bind-password-help\"\n            />\n            <div className=\"help-block\" id=\"bind-password-help\">\n              Password to bind with during the search phase.\n            </div>\n          </div>\n          <div className=\"co-form-section__separator\" />\n          <h3>Attributes</h3>\n          <p className=\"co-help-text\">Attributes map LDAP attributes to identities.</p>\n          <ListInput\n            label=\"ID\"\n            required\n            initialValues={attributesID}\n            onChange={this.attributesIDChanged}\n            helpText=\"The list of attributes whose values should be used as the user ID.\"\n          />\n          <ListInput\n            label=\"Preferred Username\"\n            initialValues={attributesPreferredUsername}\n            onChange={this.attributesPreferredUsernameChanged}\n            helpText=\"The list of attributes whose values should be used as the preferred username.\"\n          />\n          <ListInput\n            label=\"Name\"\n            initialValues={attributesName}\n            onChange={this.attributesNameChanged}\n            helpText=\"The list of attributes whose values should be used as the display name.\"\n          />\n          <ListInput\n            label=\"Email\"\n            onChange={this.attributesEmailChanged}\n            helpText=\"The list of attributes whose values should be used as the email address.\"\n          />\n          <div className=\"co-form-section__separator\" />\n          <h3>More Options</h3>\n          <IDPCAFileInput value={caFileContent} onChange={this.caFileChanged} />\n          <ButtonBar errorMessage={this.state.errorMessage} inProgress={this.state.inProgress}>\n            <ActionGroup className=\"pf-c-form\">\n              <Button type=\"submit\" variant=\"primary\" data-test-id=\"add-idp\">\n                Add\n              </Button>\n              <Button type=\"button\" variant=\"secondary\" onClick={history.goBack}>\n                Cancel\n              </Button>\n            </ActionGroup>\n          </ButtonBar>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport type AddLDAPPageState = {\n  name: string;\n  url: string;\n  bindDN: string;\n  bindPassword: string;\n  attributesID: string[];\n  attributesPreferredUsername: string[];\n  attributesName: string[];\n  attributesEmail: string[];\n  caFileContent: string;\n  inProgress: boolean;\n  errorMessage: string;\n};\n"]}]}