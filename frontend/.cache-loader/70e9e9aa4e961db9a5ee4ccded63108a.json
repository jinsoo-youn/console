{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/image-stream-timeline.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/image-stream-timeline.tsx","mtime":1615298458740},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { CircleIcon, SquareIcon } from '@patternfly/react-icons';\nimport { ResourceLink } from './utils/resource-link';\nimport { Timestamp } from './utils/timestamp';\nimport { EmptyBox } from './utils/status-box';\nimport { getImageStreamTagName } from './image-stream';\nconst ImageStreamTagsReference = 'ImageStreamTag';\nconst ImageStreamTimelineItem = ({ tag, imageStreamName, imageStreamNamespace, linkToTag, }) => {\n    const referenceAndSHA = _.split(tag.dockerImageReference, '@');\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"li\", null,\n            React.createElement(\"div\", { className: \"co-images-stream-tag-timeline__item-row\" },\n                React.createElement(\"span\", { className: \"co-images-stream-tag-timeline__circle-icon\" },\n                    React.createElement(CircleIcon, null)),\n                React.createElement(\"div\", { className: \"co-images-stream-tag-timeline__timestamp\" },\n                    React.createElement(Timestamp, { timestamp: tag.created, simple: true }))),\n            React.createElement(\"div\", { className: \"co-images-stream-tag-timeline__item-row\" },\n                React.createElement(\"span\", { className: \"co-images-stream-tag-timeline__line\" }),\n                React.createElement(\"div\", { className: \"co-images-stream-tag-timeline__info\" },\n                    React.createElement(ResourceLink, { kind: ImageStreamTagsReference, name: getImageStreamTagName(imageStreamName, tag.tag), namespace: imageStreamNamespace, title: tag.tag, linkTo: linkToTag }),\n                    React.createElement(\"div\", { className: \"co-break-all\" },\n                        \"from \",\n                        referenceAndSHA[0]),\n                    React.createElement(\"div\", { className: \"co-break-all\" }, referenceAndSHA[1]))))));\n};\n// check is the compared tag version, is the latest version in a sorted array of all tag versions\nconst isTagVersionLatest = (comparedTag, comparedTagPosition, orderedTagArray) => {\n    return (comparedTagPosition ===\n        _.findIndex(orderedTagArray, (orderedTag) => orderedTag.tag === comparedTag));\n};\nexport const ImageStreamTimeline = ({ imageStreamTags, imageStreamName, imageStreamNamespace, }) => {\n    if (!_.some(imageStreamTags, 'items')) {\n        return React.createElement(EmptyBox, { label: \"Images\" });\n    }\n    const tagsArray = _.flatten(_.map(imageStreamTags, ({ tag, items }) => {\n        return _.map(items, ({ created, dockerImageReference }) => ({\n            tag,\n            created,\n            dockerImageReference,\n        }));\n    }));\n    const orderedTagArray = _.orderBy(tagsArray, ['created'], ['desc']);\n    const timeline = _.map(orderedTagArray, (tag, i) => {\n        return (React.createElement(ImageStreamTimelineItem, { key: tag.dockerImageReference, tag: tag, imageStreamName: imageStreamName, imageStreamNamespace: imageStreamNamespace, linkToTag: isTagVersionLatest(tag.tag, i, orderedTagArray) }));\n    });\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"ul\", { className: \"co-images-stream-tag-timeline\" },\n            timeline,\n            React.createElement(\"div\", null,\n                React.createElement(\"span\", { className: \"co-images-stream-tag-timeline__square-icon\" },\n                    React.createElement(SquareIcon, null))))));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/image-stream-timeline.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/image-stream-timeline.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,CAAC,MAAM,WAAW,CAAC;AAC/B,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,yBAAyB,CAAC;AAGjE,OAAO,EAAE,YAAY,EAAE,MAAM,uBAAuB,CAAC;AACrD,OAAO,EAAE,SAAS,EAAE,MAAM,mBAAmB,CAAC;AAC9C,OAAO,EAAE,QAAQ,EAAE,MAAM,oBAAoB,CAAC;AAC9C,OAAO,EAAE,qBAAqB,EAAE,MAAM,gBAAgB,CAAC;AAEvD,MAAM,wBAAwB,GAA6B,gBAAgB,CAAC;AAE5E,MAAM,uBAAuB,GAA2C,CAAC,EACvE,GAAG,EACH,eAAe,EACf,oBAAoB,EACpB,SAAS,GACV,EAAE,EAAE;IACH,MAAM,eAAe,GAAG,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,oBAAoB,EAAE,GAAG,CAAC,CAAC;IAC/D,OAAO,CACL;QACE;YACE,6BAAK,SAAS,EAAC,yCAAyC;gBACtD,8BAAM,SAAS,EAAC,4CAA4C;oBAC1D,oBAAC,UAAU,OAAG,CACT;gBACP,6BAAK,SAAS,EAAC,0CAA0C;oBACvD,oBAAC,SAAS,IAAC,SAAS,EAAE,GAAG,CAAC,OAAO,EAAE,MAAM,EAAE,IAAI,GAAI,CAC/C,CACF;YAEN,6BAAK,SAAS,EAAC,yCAAyC;gBACtD,8BAAM,SAAS,EAAC,qCAAqC,GAAG;gBACxD,6BAAK,SAAS,EAAC,qCAAqC;oBAClD,oBAAC,YAAY,IACX,IAAI,EAAE,wBAAwB,EAC9B,IAAI,EAAE,qBAAqB,CAAC,eAAe,EAAE,GAAG,CAAC,GAAG,CAAC,EACrD,SAAS,EAAE,oBAAoB,EAC/B,KAAK,EAAE,GAAG,CAAC,GAAG,EACd,MAAM,EAAE,SAAS,GACjB;oBACF,6BAAK,SAAS,EAAC,cAAc;;wBAAO,eAAe,CAAC,CAAC,CAAC,CAAO;oBAC7D,6BAAK,SAAS,EAAC,cAAc,IAAE,eAAe,CAAC,CAAC,CAAC,CAAO,CACpD,CACF,CACH,CACJ,CACJ,CAAC;AACJ,CAAC,CAAC;AAEF,iGAAiG;AACjG,MAAM,kBAAkB,GAAG,CACzB,WAAmB,EACnB,mBAA2B,EAC3B,eAA0B,EAC1B,EAAE;IACF,OAAO,CACL,mBAAmB;QACnB,CAAC,CAAC,SAAS,CAAC,eAAe,EAAE,CAAC,UAAmB,EAAE,EAAE,CAAC,UAAU,CAAC,GAAG,KAAK,WAAW,CAAC,CACtF,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,mBAAmB,GAAuC,CAAC,EACtE,eAAe,EACf,eAAe,EACf,oBAAoB,GACrB,EAAE,EAAE;IACH,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,EAAE,OAAO,CAAC,EAAE;QACrC,OAAO,oBAAC,QAAQ,IAAC,KAAK,EAAC,QAAQ,GAAG,CAAC;KACpC;IACD,MAAM,SAAS,GAAc,CAAC,CAAC,OAAO,CACpC,CAAC,CAAC,GAAG,CAAC,eAAe,EAAE,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE;QACxC,OAAO,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,EAAE,OAAO,EAAE,oBAAoB,EAAE,EAAE,EAAE,CAAC,CAAC;YAC1D,GAAG;YACH,OAAO;YACP,oBAAoB;SACrB,CAAC,CAAC,CAAC;IACN,CAAC,CAAC,CACH,CAAC;IACF,MAAM,eAAe,GAAG,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,SAAS,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;IACpE,MAAM,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,eAAe,EAAE,CAAC,GAAY,EAAE,CAAS,EAAE,EAAE;QAClE,OAAO,CACL,oBAAC,uBAAuB,IACtB,GAAG,EAAE,GAAG,CAAC,oBAAoB,EAC7B,GAAG,EAAE,GAAG,EACR,eAAe,EAAE,eAAe,EAChC,oBAAoB,EAAE,oBAAoB,EAC1C,SAAS,EAAE,kBAAkB,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,EAAE,eAAe,CAAC,GAC1D,CACH,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,OAAO,CACL;QACE,4BAAI,SAAS,EAAC,+BAA+B;YAC1C,QAAQ;YACT;gBACE,8BAAM,SAAS,EAAC,4CAA4C;oBAC1D,oBAAC,UAAU,OAAG,CACT,CACH,CACH,CACJ,CACJ,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { CircleIcon, SquareIcon } from '@patternfly/react-icons';\n\nimport { K8sResourceKindReference } from '../module/k8s';\nimport { ResourceLink } from './utils/resource-link';\nimport { Timestamp } from './utils/timestamp';\nimport { EmptyBox } from './utils/status-box';\nimport { getImageStreamTagName } from './image-stream';\n\nconst ImageStreamTagsReference: K8sResourceKindReference = 'ImageStreamTag';\n\nconst ImageStreamTimelineItem: React.FC<ImageStreamTimelineItemProps> = ({\n  tag,\n  imageStreamName,\n  imageStreamNamespace,\n  linkToTag,\n}) => {\n  const referenceAndSHA = _.split(tag.dockerImageReference, '@');\n  return (\n    <>\n      <li>\n        <div className=\"co-images-stream-tag-timeline__item-row\">\n          <span className=\"co-images-stream-tag-timeline__circle-icon\">\n            <CircleIcon />\n          </span>\n          <div className=\"co-images-stream-tag-timeline__timestamp\">\n            <Timestamp timestamp={tag.created} simple={true} />\n          </div>\n        </div>\n\n        <div className=\"co-images-stream-tag-timeline__item-row\">\n          <span className=\"co-images-stream-tag-timeline__line\" />\n          <div className=\"co-images-stream-tag-timeline__info\">\n            <ResourceLink\n              kind={ImageStreamTagsReference}\n              name={getImageStreamTagName(imageStreamName, tag.tag)}\n              namespace={imageStreamNamespace}\n              title={tag.tag}\n              linkTo={linkToTag}\n            />\n            <div className=\"co-break-all\">from {referenceAndSHA[0]}</div>\n            <div className=\"co-break-all\">{referenceAndSHA[1]}</div>\n          </div>\n        </div>\n      </li>\n    </>\n  );\n};\n\n// check is the compared tag version, is the latest version in a sorted array of all tag versions\nconst isTagVersionLatest = (\n  comparedTag: string,\n  comparedTagPosition: number,\n  orderedTagArray: TagMeta[],\n) => {\n  return (\n    comparedTagPosition ===\n    _.findIndex(orderedTagArray, (orderedTag: TagMeta) => orderedTag.tag === comparedTag)\n  );\n};\n\nexport const ImageStreamTimeline: React.FC<ImageStreamTimelineProps> = ({\n  imageStreamTags,\n  imageStreamName,\n  imageStreamNamespace,\n}) => {\n  if (!_.some(imageStreamTags, 'items')) {\n    return <EmptyBox label=\"Images\" />;\n  }\n  const tagsArray: TagMeta[] = _.flatten(\n    _.map(imageStreamTags, ({ tag, items }) => {\n      return _.map(items, ({ created, dockerImageReference }) => ({\n        tag,\n        created,\n        dockerImageReference,\n      }));\n    }),\n  );\n  const orderedTagArray = _.orderBy(tagsArray, ['created'], ['desc']);\n  const timeline = _.map(orderedTagArray, (tag: TagMeta, i: number) => {\n    return (\n      <ImageStreamTimelineItem\n        key={tag.dockerImageReference}\n        tag={tag}\n        imageStreamName={imageStreamName}\n        imageStreamNamespace={imageStreamNamespace}\n        linkToTag={isTagVersionLatest(tag.tag, i, orderedTagArray)}\n      />\n    );\n  });\n\n  return (\n    <>\n      <ul className=\"co-images-stream-tag-timeline\">\n        {timeline}\n        <div>\n          <span className=\"co-images-stream-tag-timeline__square-icon\">\n            <SquareIcon />\n          </span>\n        </div>\n      </ul>\n    </>\n  );\n};\n\ntype ImageStreamTimelineItemProps = {\n  tag: TagMeta;\n  imageStreamName: string;\n  imageStreamNamespace: string;\n  linkToTag: boolean;\n};\n\ntype TagMeta = {\n  created: string;\n  tag: string;\n  dockerImageReference: string;\n};\n\ntype ImageStreamTimelineProps = {\n  imageStreamTags: any[];\n  imageStreamName: string;\n  imageStreamNamespace: string;\n};\n"]}]}