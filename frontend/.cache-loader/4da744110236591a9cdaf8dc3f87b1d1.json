{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/service-catalog/schema-form.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/service-catalog/schema-form.tsx","mtime":1615298458740},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\nimport Form from 'react-jsonschema-form';\nimport { SecretModel } from '../../models';\nimport { k8sCreate } from '../../module/k8s';\nconst getSchema = (plan, path) => {\n    const schema = _.get(plan, path);\n    // Make sure there is `properties` in the schema, even if empty, or `Form` displays an error.\n    return _.assign({ type: 'object', properties: {} }, schema);\n};\nexport const getInstanceCreateSchema = (plan) => getSchema(plan, 'spec.instanceCreateParameterSchema');\nexport const getInstanceCreateParametersForm = (plan) => _.get(plan, 'spec.externalMetadata.schemas.service_instance.create.openshift_form_definition');\nexport const getBindingCreateSchema = (plan) => getSchema(plan, 'spec.serviceBindingCreateParameterSchema');\nexport const getBindingParametersForm = (plan) => _.get(plan, 'spec.externalMetadata.schemas.service_binding.create.openshift_form_definition');\n// Flatten items from fieldsets into a single list of parameters. Fieldsets aren't supported.\nconst flattenParameters = (parametersForm) => {\n    return parametersForm.reduce((result, param) => {\n        // If param has an `items` array, it's a fieldset. Add the fieldset parameters to the top-level array (preserving order).\n        const fieldsetItems = _.get(param, 'items');\n        const values = _.isEmpty(fieldsetItems) ? param : fieldsetItems;\n        return result.concat(values);\n    }, []);\n};\nconst UI_ORDER = 'ui:order';\nconst UI_WIDGET = 'ui:widget';\n// The whitelist of types for openshift_form_defintion items are textarea, password, checkbox, select.\n// Map these to the `ui:widget` value expected by react-jsonschema-form.\nconst widgetForType = Object.freeze({\n    checkbox: 'checkboxes',\n    password: 'password',\n    select: 'select',\n    textarea: 'textarea',\n});\n// Convert from the broker parameters form definition to the UI schema expected by react-jsonschema-form:\n// https://github.com/mozilla-services/react-jsonschema-form#form-customization\n//\n// The parameters form definition is a small subset of what was supported by angular-schema-form in the previous AngularJS catalog implementation:\n// https://github.com/json-schema-form/angular-schema-form\nexport const getUISchema = (parametersForm) => {\n    if (_.isEmpty(parametersForm)) {\n        return {};\n    }\n    const flatParams = flattenParameters(parametersForm);\n    return flatParams.reduce((result, param) => {\n        if (_.isString(param)) {\n            result[UI_ORDER].push(param);\n        }\n        else if (param.key) {\n            result[UI_ORDER].push(param.key);\n            const widget = widgetForType[param.type];\n            if (widget) {\n                _.set(result, [param.key, UI_WIDGET], widget);\n            }\n        }\n        return result;\n    }, { [UI_ORDER]: [] });\n};\nexport const createParametersSecret = (secretName, key, parameters, owner) => {\n    const secret = {\n        apiVersion: 'v1',\n        kind: 'Secret',\n        metadata: {\n            name: secretName,\n            namespace: owner.metadata.namespace,\n            ownerReferences: [\n                {\n                    apiVersion: owner.apiVersion,\n                    kind: owner.kind,\n                    name: owner.metadata.name,\n                    uid: owner.metadata.uid,\n                    controller: false,\n                    blockOwnerDeletion: false,\n                },\n            ],\n        },\n        stringData: {\n            [key]: JSON.stringify(parameters),\n        },\n    };\n    return k8sCreate(SecretModel, secret);\n};\n// Override react-jsonschema-form rendering of fields so we can use different required and description styles.\n// https://github.com/mozilla-services/react-jsonschema-form#field-template\nconst CustomFieldTemplate = ({ id, classNames: klass, displayLabel, label, help, required, description, errors, children, }) => (React.createElement(\"div\", { className: klass },\n    displayLabel && (React.createElement(\"label\", { htmlFor: id, className: classNames('control-label', { 'co-required': required }) }, label)),\n    children,\n    React.createElement(\"div\", { className: \"help-block\" }, description),\n    help,\n    errors));\n// Override the base input `onChange` handler to return an empty string instead of undefined when a user clears a string input.\n// https://github.com/mozilla-services/react-jsonschema-form#customizing-widgets-text-input\n// https://github.com/mozilla-services/react-jsonschema-form/blob/master/src/components/widgets/BaseInput.js\nconst CustomBaseInput = (props) => {\n    // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n    // exclude the \"options\" and \"schema\" ones here.\n    if (!props.id) {\n        // eslint-disable-next-line no-console\n        console.log('No id for', props);\n        throw new Error(`no id for props ${JSON.stringify(props)}`);\n    }\n    const { value, readonly, disabled, autofocus, onChange, onBlur, onFocus, options } = props, inputProps = __rest(props, [\"value\", \"readonly\", \"disabled\", \"autofocus\", \"onChange\", \"onBlur\", \"onFocus\", \"options\"]);\n    inputProps.type = options.inputType || inputProps.type || 'text';\n    return (React.createElement(\"input\", Object.assign({ className: \"pf-c-form-control\", readOnly: readonly, disabled: disabled, autoFocus: autofocus, value: value == null ? '' : value }, inputProps, { onChange: (event) => onChange(event.target.value), onBlur: onBlur && ((event) => onBlur(inputProps.id, event.target.value)), onFocus: onFocus && ((event) => onFocus(inputProps.id, event.target.value)) })));\n};\n// Create a custom checkbox widget to prevent any checkbox from receiving a `required` attribute.\n// With HTML5 form validation, a required checkbox has to be checked to submit the form.\nconst CustomCheckbox = ({ onChange, label, value }) => (React.createElement(\"div\", { className: \"checkbox\" },\n    React.createElement(\"label\", { className: \"control-label\" },\n        React.createElement(\"input\", { type: \"checkbox\", onClick: () => onChange(!value), checked: value }),\n        label)));\nconst widgets = {\n    BaseInput: CustomBaseInput,\n    CheckboxWidget: CustomCheckbox,\n};\nexport const ServiceCatalogParametersForm = (props) => (React.createElement(Form, Object.assign({ className: \"co-service-catalog-parameters\", FieldTemplate: CustomFieldTemplate, widgets: widgets }, props)));\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/service-catalog/schema-form.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/service-catalog/schema-form.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\nimport { JSONSchema6 } from 'json-schema';\nimport Form, { FieldTemplateProps, FormProps, UiSchema } from 'react-jsonschema-form';\n\nimport { SecretModel } from '../../models';\nimport { k8sCreate, K8sResourceKind } from '../../module/k8s';\n\nconst getSchema = (plan: K8sResourceKind, path: string): JSONSchema6 => {\n  const schema = _.get(plan, path);\n  // Make sure there is `properties` in the schema, even if empty, or `Form` displays an error.\n  return _.assign({ type: 'object', properties: {} }, schema);\n};\n\nexport const getInstanceCreateSchema = (plan: K8sResourceKind) =>\n  getSchema(plan, 'spec.instanceCreateParameterSchema');\nexport const getInstanceCreateParametersForm = (plan: K8sResourceKind) =>\n  _.get(plan, 'spec.externalMetadata.schemas.service_instance.create.openshift_form_definition');\n\nexport const getBindingCreateSchema = (plan: K8sResourceKind) =>\n  getSchema(plan, 'spec.serviceBindingCreateParameterSchema');\nexport const getBindingParametersForm = (plan: K8sResourceKind) =>\n  _.get(plan, 'spec.externalMetadata.schemas.service_binding.create.openshift_form_definition');\n\n// Flatten items from fieldsets into a single list of parameters. Fieldsets aren't supported.\nconst flattenParameters = (parametersForm: ParameterFormItem[]): ParameterFormItem[] => {\n  return parametersForm.reduce((result: ParameterFormItem[], param: ParameterFormItem) => {\n    // If param has an `items` array, it's a fieldset. Add the fieldset parameters to the top-level array (preserving order).\n    const fieldsetItems = _.get(param, 'items');\n    const values = _.isEmpty(fieldsetItems) ? param : fieldsetItems;\n    return result.concat(values);\n  }, []);\n};\n\nconst UI_ORDER = 'ui:order';\nconst UI_WIDGET = 'ui:widget';\n\n// The whitelist of types for openshift_form_defintion items are textarea, password, checkbox, select.\n// Map these to the `ui:widget` value expected by react-jsonschema-form.\nconst widgetForType = Object.freeze({\n  checkbox: 'checkboxes',\n  password: 'password',\n  select: 'select',\n  textarea: 'textarea',\n});\n\n// Convert from the broker parameters form definition to the UI schema expected by react-jsonschema-form:\n// https://github.com/mozilla-services/react-jsonschema-form#form-customization\n//\n// The parameters form definition is a small subset of what was supported by angular-schema-form in the previous AngularJS catalog implementation:\n// https://github.com/json-schema-form/angular-schema-form\nexport const getUISchema = (parametersForm: ParameterFormItem[]): UiSchema => {\n  if (_.isEmpty(parametersForm)) {\n    return {};\n  }\n\n  const flatParams = flattenParameters(parametersForm);\n  return flatParams.reduce(\n    (result: UiSchema, param: ParameterFormItem) => {\n      if (_.isString(param)) {\n        result[UI_ORDER].push(param);\n      } else if (param.key) {\n        result[UI_ORDER].push(param.key);\n        const widget = widgetForType[param.type];\n        if (widget) {\n          _.set(result, [param.key, UI_WIDGET], widget);\n        }\n      }\n      return result;\n    },\n    { [UI_ORDER]: [] },\n  );\n};\n\nexport const createParametersSecret = (\n  secretName: string,\n  key: string,\n  parameters: any,\n  owner: K8sResourceKind,\n): Promise<K8sResourceKind> => {\n  const secret = {\n    apiVersion: 'v1',\n    kind: 'Secret',\n    metadata: {\n      name: secretName,\n      namespace: owner.metadata.namespace,\n      ownerReferences: [\n        {\n          apiVersion: owner.apiVersion,\n          kind: owner.kind,\n          name: owner.metadata.name,\n          uid: owner.metadata.uid,\n          controller: false,\n          blockOwnerDeletion: false,\n        },\n      ],\n    },\n    stringData: {\n      [key]: JSON.stringify(parameters),\n    },\n  };\n\n  return k8sCreate(SecretModel, secret);\n};\n\n// Override react-jsonschema-form rendering of fields so we can use different required and description styles.\n// https://github.com/mozilla-services/react-jsonschema-form#field-template\nconst CustomFieldTemplate: React.SFC<FieldTemplateProps> = ({\n  id,\n  classNames: klass,\n  displayLabel,\n  label,\n  help,\n  required,\n  description,\n  errors,\n  children,\n}) => (\n  <div className={klass}>\n    {displayLabel && (\n      <label htmlFor={id} className={classNames('control-label', { 'co-required': required })}>\n        {label}\n      </label>\n    )}\n    {children}\n    <div className=\"help-block\">{description}</div>\n    {help}\n    {errors}\n  </div>\n);\n\n// Override the base input `onChange` handler to return an empty string instead of undefined when a user clears a string input.\n// https://github.com/mozilla-services/react-jsonschema-form#customizing-widgets-text-input\n// https://github.com/mozilla-services/react-jsonschema-form/blob/master/src/components/widgets/BaseInput.js\nconst CustomBaseInput = (props) => {\n  // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n  if (!props.id) {\n    // eslint-disable-next-line no-console\n    console.log('No id for', props);\n    throw new Error(`no id for props ${JSON.stringify(props)}`);\n  }\n  const {\n    value,\n    readonly,\n    disabled,\n    autofocus,\n    onChange,\n    onBlur,\n    onFocus,\n    options,\n    ...inputProps\n  } = props;\n  inputProps.type = options.inputType || inputProps.type || 'text';\n\n  return (\n    <input\n      className=\"pf-c-form-control\"\n      readOnly={readonly}\n      disabled={disabled}\n      autoFocus={autofocus}\n      value={value == null ? '' : value}\n      {...inputProps}\n      onChange={(event) => onChange(event.target.value)}\n      onBlur={onBlur && ((event) => onBlur(inputProps.id, event.target.value))}\n      onFocus={onFocus && ((event) => onFocus(inputProps.id, event.target.value))}\n    />\n  );\n};\n\n// Create a custom checkbox widget to prevent any checkbox from receiving a `required` attribute.\n// With HTML5 form validation, a required checkbox has to be checked to submit the form.\nconst CustomCheckbox = ({ onChange, label, value }) => (\n  <div className=\"checkbox\">\n    <label className=\"control-label\">\n      <input type=\"checkbox\" onClick={() => onChange(!value)} checked={value} />\n      {label}\n    </label>\n  </div>\n);\n\nconst widgets: any = {\n  BaseInput: CustomBaseInput,\n  CheckboxWidget: CustomCheckbox,\n};\n\nexport const ServiceCatalogParametersForm: React.SFC<FormProps<any>> = (props) => (\n  <Form\n    className=\"co-service-catalog-parameters\"\n    FieldTemplate={CustomFieldTemplate}\n    widgets={widgets}\n    {...props}\n  />\n);\n\nexport type ParameterFormItem =\n  | {\n      key: string;\n      type?: string;\n      items?: any[];\n    }\n  | string;\n"]}]}