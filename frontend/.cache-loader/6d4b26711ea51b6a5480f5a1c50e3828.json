{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/utils/pod-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/utils/pod-utils.ts","mtime":1615298458610},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { checkAccess } from '@console/internal/components/utils';\nimport { podColor, AllPodStatus, DEPLOYMENT_STRATEGY, DEPLOYMENT_PHASE } from '../constants';\nexport const podStatus = Object.keys(podColor);\nconst isContainerFailedFilter = (containerStatus) => {\n    return containerStatus.state.terminated && containerStatus.state.terminated.exitCode !== 0;\n};\nexport const isContainerLoopingFilter = (containerStatus) => {\n    return (containerStatus.state.waiting && containerStatus.state.waiting.reason === 'CrashLoopBackOff');\n};\nconst numContainersReadyFilter = (pod) => {\n    const { status: { containerStatuses }, } = pod;\n    let numReady = 0;\n    _.forEach(containerStatuses, (status) => {\n        if (status.ready) {\n            numReady++;\n        }\n    });\n    return numReady;\n};\nconst isReady = (pod) => {\n    const { spec: { containers }, } = pod;\n    const numReady = numContainersReadyFilter(pod);\n    const total = _.size(containers);\n    return numReady === total;\n};\nconst podWarnings = (pod) => {\n    const { status: { phase, containerStatuses }, } = pod;\n    if (phase === AllPodStatus.Running && containerStatuses) {\n        return _.map(containerStatuses, (containerStatus) => {\n            if (!containerStatus.state) {\n                return null;\n            }\n            if (isContainerFailedFilter(containerStatus)) {\n                if (_.has(pod, ['metadata', 'deletionTimestamp'])) {\n                    return AllPodStatus.Failed;\n                }\n                return AllPodStatus.Warning;\n            }\n            if (isContainerLoopingFilter(containerStatus)) {\n                return AllPodStatus.CrashLoopBackOff;\n            }\n            return null;\n        }).filter((x) => x);\n    }\n    return null;\n};\nexport const getPodStatus = (pod) => {\n    if (_.has(pod, ['metadata', 'deletionTimestamp'])) {\n        return AllPodStatus.Terminating;\n    }\n    const warnings = podWarnings(pod);\n    if (warnings !== null && warnings.length) {\n        if (warnings.includes(AllPodStatus.CrashLoopBackOff)) {\n            return AllPodStatus.CrashLoopBackOff;\n        }\n        if (warnings.includes(AllPodStatus.Failed)) {\n            return AllPodStatus.Failed;\n        }\n        return AllPodStatus.Warning;\n    }\n    const phase = _.get(pod, ['status', 'phase'], AllPodStatus.Unknown);\n    if (phase === AllPodStatus.Running && !isReady(pod)) {\n        return AllPodStatus.NotReady;\n    }\n    return phase;\n};\nexport const calculateRadius = (size) => {\n    const radius = size / 2;\n    const podStatusStrokeWidth = (8 / 104) * size;\n    const podStatusInset = (5 / 104) * size;\n    const podStatusOuterRadius = radius - podStatusInset;\n    const podStatusInnerRadius = podStatusOuterRadius - podStatusStrokeWidth;\n    const decoratorRadius = radius * 0.25;\n    return {\n        radius,\n        podStatusInnerRadius,\n        podStatusOuterRadius,\n        decoratorRadius,\n        podStatusStrokeWidth,\n        podStatusInset,\n    };\n};\nexport const checkPodEditAccess = (resource, resourceKind, impersonate) => {\n    if (_.isEmpty(resource) || !resourceKind) {\n        return Promise.resolve(null);\n    }\n    const { name, namespace } = resource.metadata;\n    const resourceAttributes = {\n        group: resourceKind.apiGroup,\n        resource: resourceKind.plural,\n        verb: 'patch',\n        name,\n        namespace,\n    };\n    return checkAccess(resourceAttributes, impersonate);\n};\n/**\n * check if config is knative serving resource.\n * @param configRes\n * @param properties\n */\nexport const isKnativeServing = (configRes, properties) => {\n    const deploymentsLabels = _.get(configRes, properties) || {};\n    return !!deploymentsLabels['serving.knative.dev/configuration'];\n};\n/**\n * check if the deployment/deploymentconfig is idled.\n * @param deploymentConfig\n */\nexport const isIdled = (deploymentConfig) => {\n    return !!_.get(deploymentConfig, 'metadata.annotations[\"idling.alpha.openshift.io/idled-at\"]', false);\n};\nconst getScalingUp = (dc) => {\n    return Object.assign(Object.assign({}, _.pick(dc, 'metadata')), { status: {\n            phase: AllPodStatus.ScalingUp,\n        } });\n};\nexport const podDataInProgress = (dc, current, isRollingOut) => {\n    var _a, _b;\n    const strategy = (_b = (_a = dc === null || dc === void 0 ? void 0 : dc.spec) === null || _a === void 0 ? void 0 : _a.strategy) === null || _b === void 0 ? void 0 : _b.type;\n    return ((current === null || current === void 0 ? void 0 : current.phase) !== DEPLOYMENT_PHASE.complete &&\n        (strategy === DEPLOYMENT_STRATEGY.recreate || strategy === DEPLOYMENT_STRATEGY.rolling) &&\n        isRollingOut);\n};\nexport const getPodData = (dc, pods, current, previous, isRollingOut) => {\n    const strategy = _.get(dc, ['spec', 'strategy', 'type'], null);\n    const currentDeploymentphase = current && current.phase;\n    const currentPods = current && current.pods;\n    const previousPods = previous && previous.pods;\n    // DaemonSets and StatefulSets\n    if (!strategy)\n        return { inProgressDeploymentData: null, completedDeploymentData: pods };\n    // Scaling no. of pods\n    if (currentDeploymentphase === DEPLOYMENT_PHASE.complete) {\n        return { inProgressDeploymentData: null, completedDeploymentData: currentPods };\n    }\n    // Deploy - Rolling - Recreate\n    if ((strategy === DEPLOYMENT_STRATEGY.recreate || strategy === DEPLOYMENT_STRATEGY.rolling) &&\n        isRollingOut) {\n        return {\n            inProgressDeploymentData: currentPods,\n            completedDeploymentData: previousPods,\n        };\n    }\n    // if build is not finished show `Scaling Up` on pod phase\n    if (!current && !previous) {\n        return { inProgressDeploymentData: null, completedDeploymentData: [getScalingUp(dc)] };\n    }\n    return { inProgressDeploymentData: null, completedDeploymentData: pods };\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/utils/pod-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/utils/pod-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport {\n  K8sResourceKind,\n  K8sKind,\n  SelfSubjectAccessReviewKind,\n  AccessReviewResourceAttributes,\n} from '@console/internal/module/k8s';\nimport { checkAccess } from '@console/internal/components/utils';\nimport { podColor, AllPodStatus, DEPLOYMENT_STRATEGY, DEPLOYMENT_PHASE } from '../constants';\nimport { ExtPodKind } from '../types/pod';\nimport { PodControllerOverviewItem, DeploymentStrategy } from '../types';\n\nexport const podStatus = Object.keys(podColor);\n\nconst isContainerFailedFilter = (containerStatus) => {\n  return containerStatus.state.terminated && containerStatus.state.terminated.exitCode !== 0;\n};\n\nexport const isContainerLoopingFilter = (containerStatus) => {\n  return (\n    containerStatus.state.waiting && containerStatus.state.waiting.reason === 'CrashLoopBackOff'\n  );\n};\n\nconst numContainersReadyFilter = (pod) => {\n  const {\n    status: { containerStatuses },\n  } = pod;\n  let numReady = 0;\n  _.forEach(containerStatuses, (status) => {\n    if (status.ready) {\n      numReady++;\n    }\n  });\n  return numReady;\n};\n\nconst isReady = (pod) => {\n  const {\n    spec: { containers },\n  } = pod;\n  const numReady = numContainersReadyFilter(pod);\n  const total = _.size(containers);\n\n  return numReady === total;\n};\n\nconst podWarnings = (pod) => {\n  const {\n    status: { phase, containerStatuses },\n  } = pod;\n  if (phase === AllPodStatus.Running && containerStatuses) {\n    return _.map(containerStatuses, (containerStatus) => {\n      if (!containerStatus.state) {\n        return null;\n      }\n\n      if (isContainerFailedFilter(containerStatus)) {\n        if (_.has(pod, ['metadata', 'deletionTimestamp'])) {\n          return AllPodStatus.Failed;\n        }\n        return AllPodStatus.Warning;\n      }\n      if (isContainerLoopingFilter(containerStatus)) {\n        return AllPodStatus.CrashLoopBackOff;\n      }\n      return null;\n    }).filter((x) => x);\n  }\n  return null;\n};\n\nexport const getPodStatus = (pod) => {\n  if (_.has(pod, ['metadata', 'deletionTimestamp'])) {\n    return AllPodStatus.Terminating;\n  }\n  const warnings = podWarnings(pod);\n  if (warnings !== null && warnings.length) {\n    if (warnings.includes(AllPodStatus.CrashLoopBackOff)) {\n      return AllPodStatus.CrashLoopBackOff;\n    }\n    if (warnings.includes(AllPodStatus.Failed)) {\n      return AllPodStatus.Failed;\n    }\n    return AllPodStatus.Warning;\n  }\n  const phase = _.get(pod, ['status', 'phase'], AllPodStatus.Unknown);\n  if (phase === AllPodStatus.Running && !isReady(pod)) {\n    return AllPodStatus.NotReady;\n  }\n  return phase;\n};\n\nexport const calculateRadius = (size: number) => {\n  const radius = size / 2;\n  const podStatusStrokeWidth = (8 / 104) * size;\n  const podStatusInset = (5 / 104) * size;\n  const podStatusOuterRadius = radius - podStatusInset;\n  const podStatusInnerRadius = podStatusOuterRadius - podStatusStrokeWidth;\n  const decoratorRadius = radius * 0.25;\n\n  return {\n    radius,\n    podStatusInnerRadius,\n    podStatusOuterRadius,\n    decoratorRadius,\n    podStatusStrokeWidth,\n    podStatusInset,\n  };\n};\n\nexport const checkPodEditAccess = (\n  resource: K8sResourceKind,\n  resourceKind: K8sKind,\n  impersonate: string,\n): Promise<SelfSubjectAccessReviewKind> => {\n  if (_.isEmpty(resource) || !resourceKind) {\n    return Promise.resolve(null);\n  }\n  const { name, namespace } = resource.metadata;\n  const resourceAttributes: AccessReviewResourceAttributes = {\n    group: resourceKind.apiGroup,\n    resource: resourceKind.plural,\n    verb: 'patch',\n    name,\n    namespace,\n  };\n  return checkAccess(resourceAttributes, impersonate);\n};\n\n/**\n * check if config is knative serving resource.\n * @param configRes\n * @param properties\n */\nexport const isKnativeServing = (configRes: K8sResourceKind, properties: string): boolean => {\n  const deploymentsLabels = _.get(configRes, properties) || {};\n  return !!deploymentsLabels['serving.knative.dev/configuration'];\n};\n\n/**\n * check if the deployment/deploymentconfig is idled.\n * @param deploymentConfig\n */\nexport const isIdled = (deploymentConfig: K8sResourceKind): boolean => {\n  return !!_.get(\n    deploymentConfig,\n    'metadata.annotations[\"idling.alpha.openshift.io/idled-at\"]',\n    false,\n  );\n};\n\nconst getScalingUp = (dc: K8sResourceKind): ExtPodKind => {\n  return {\n    ..._.pick(dc, 'metadata'),\n    status: {\n      phase: AllPodStatus.ScalingUp,\n    },\n  };\n};\n\nexport const podDataInProgress = (\n  dc: K8sResourceKind,\n  current: PodControllerOverviewItem,\n  isRollingOut: boolean,\n): boolean => {\n  const strategy: DeploymentStrategy = dc?.spec?.strategy?.type;\n  return (\n    current?.phase !== DEPLOYMENT_PHASE.complete &&\n    (strategy === DEPLOYMENT_STRATEGY.recreate || strategy === DEPLOYMENT_STRATEGY.rolling) &&\n    isRollingOut\n  );\n};\n\nexport const getPodData = (\n  dc: K8sResourceKind,\n  pods: ExtPodKind[],\n  current: PodControllerOverviewItem,\n  previous: PodControllerOverviewItem,\n  isRollingOut: boolean,\n): { inProgressDeploymentData: ExtPodKind[] | null; completedDeploymentData: ExtPodKind[] } => {\n  const strategy: DeploymentStrategy = _.get(dc, ['spec', 'strategy', 'type'], null);\n  const currentDeploymentphase = current && current.phase;\n  const currentPods = current && current.pods;\n  const previousPods = previous && previous.pods;\n  // DaemonSets and StatefulSets\n  if (!strategy) return { inProgressDeploymentData: null, completedDeploymentData: pods };\n\n  // Scaling no. of pods\n  if (currentDeploymentphase === DEPLOYMENT_PHASE.complete) {\n    return { inProgressDeploymentData: null, completedDeploymentData: currentPods };\n  }\n\n  // Deploy - Rolling - Recreate\n  if (\n    (strategy === DEPLOYMENT_STRATEGY.recreate || strategy === DEPLOYMENT_STRATEGY.rolling) &&\n    isRollingOut\n  ) {\n    return {\n      inProgressDeploymentData: currentPods,\n      completedDeploymentData: previousPods,\n    };\n  }\n  // if build is not finished show `Scaling Up` on pod phase\n  if (!current && !previous) {\n    return { inProgressDeploymentData: null, completedDeploymentData: [getScalingUp(dc)] };\n  }\n  return { inProgressDeploymentData: null, completedDeploymentData: pods };\n};\n"]}]}