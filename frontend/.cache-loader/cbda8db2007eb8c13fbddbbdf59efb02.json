{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/pod/PodRing.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/pod/PodRing.tsx","mtime":1616735742370},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Button, Split, SplitItem, Bullseye } from '@patternfly/react-core';\nimport { k8sPatch } from '@console/internal/module/k8s';\nimport { AngleUpIcon, AngleDownIcon } from '@patternfly/react-icons';\nimport { podRingLabel, usePodScalingAccessStatus } from '../../utils';\nimport PodStatus from './PodStatus';\nimport './PodRing.scss';\nconst PodRing = ({ pods, obj, resourceKind, path, impersonate, rc, enableScaling = true, }) => {\n    const [clickCount, setClickCount] = React.useState(obj.spec.replicas);\n    const isScalingAllowed = usePodScalingAccessStatus(obj, resourceKind, pods, enableScaling, impersonate);\n    React.useEffect(() => {\n        if (clickCount !== obj.spec.replicas) {\n            setClickCount(obj.spec.replicas);\n        }\n    }, \n    // disabling exhaustive-deps because I do not want to add clickCount to\n    // dependency array. I only want to trigger useEffect when `obj.spec.replicas` changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [obj.spec.replicas]);\n    const handleScaling = _.debounce((operation) => {\n        const patch = [{ op: 'replace', path, value: operation }];\n        const promise = k8sPatch(resourceKind, obj, patch);\n        promise.catch((error) => {\n            throw error;\n        });\n    }, 1000, {\n        leading: true,\n        trailing: false,\n    });\n    const handleClick = (operation) => {\n        setClickCount(clickCount + operation);\n        handleScaling(clickCount + operation);\n    };\n    const resourceObj = rc || obj;\n    const { title, subTitle, titleComponent } = podRingLabel(resourceObj, obj.kind, pods);\n    return (React.createElement(Split, null,\n        React.createElement(SplitItem, null,\n            React.createElement(\"div\", { className: \"odc-pod-ring\" },\n                React.createElement(PodStatus, { standalone: true, data: pods, subTitle: subTitle, title: title, titleComponent: titleComponent }))),\n        isScalingAllowed && (React.createElement(SplitItem, null,\n            React.createElement(Bullseye, null,\n                React.createElement(\"div\", null,\n                    React.createElement(Button, { type: \"button\", variant: \"plain\", \"aria-label\": \"Increase the pod count\", title: \"Increase the pod count\", onClick: () => handleClick(1), isBlock: true },\n                        React.createElement(AngleUpIcon, { style: { fontSize: '20' } })),\n                    React.createElement(Button, { type: \"button\", variant: \"plain\", \"aria-label\": \"Decrease the pod count\", title: \"Decrease the pod count\", onClick: () => handleClick(-1), isBlock: true, isDisabled: clickCount <= 0 },\n                        React.createElement(AngleDownIcon, { style: { fontSize: '20' } }))))))));\n};\nexport default PodRing;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/pod/PodRing.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/pod/PodRing.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,MAAM,EAAE,KAAK,EAAE,SAAS,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AAC5E,OAAO,EAAmB,QAAQ,EAAW,MAAM,8BAA8B,CAAC;AAClF,OAAO,EAAE,WAAW,EAAE,aAAa,EAAE,MAAM,yBAAyB,CAAC;AACrE,OAAO,EAAE,YAAY,EAAE,yBAAyB,EAAE,MAAM,aAAa,CAAC;AAEtE,OAAO,SAAS,MAAM,aAAa,CAAC;AACpC,OAAO,gBAAgB,CAAC;AAYxB,MAAM,OAAO,GAA2B,CAAC,EACvC,IAAI,EACJ,GAAG,EACH,YAAY,EACZ,IAAI,EACJ,WAAW,EACX,EAAE,EACF,aAAa,GAAG,IAAI,GACrB,EAAE,EAAE;IACH,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;IACtE,MAAM,gBAAgB,GAAG,yBAAyB,CAChD,GAAG,EACH,YAAY,EACZ,IAAI,EACJ,aAAa,EACb,WAAW,CACZ,CAAC;IAEF,KAAK,CAAC,SAAS,CACb,GAAG,EAAE;QACH,IAAI,UAAU,KAAK,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE;YACpC,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;SAClC;IACH,CAAC;IACD,uEAAuE;IACvE,sFAAsF;IACtF,uDAAuD;IACvD,CAAC,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,CACpB,CAAC;IAEF,MAAM,aAAa,GAAG,CAAC,CAAC,QAAQ,CAC9B,CAAC,SAAiB,EAAE,EAAE;QACpB,MAAM,KAAK,GAAG,CAAC,EAAE,EAAE,EAAE,SAAS,EAAE,IAAI,EAAE,KAAK,EAAE,SAAS,EAAE,CAAC,CAAC;QAC1D,MAAM,OAAO,GAA6B,QAAQ,CAAC,YAAY,EAAE,GAAG,EAAE,KAAK,CAAC,CAAC;QAC7E,OAAO,CAAC,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YACtB,MAAM,KAAK,CAAC;QACd,CAAC,CAAC,CAAC;IACL,CAAC,EACD,IAAI,EACJ;QACE,OAAO,EAAE,IAAI;QACb,QAAQ,EAAE,KAAK;KAChB,CACF,CAAC;IAEF,MAAM,WAAW,GAAG,CAAC,SAAiB,EAAE,EAAE;QACxC,aAAa,CAAC,UAAU,GAAG,SAAS,CAAC,CAAC;QACtC,aAAa,CAAC,UAAU,GAAG,SAAS,CAAC,CAAC;IACxC,CAAC,CAAC;IACF,MAAM,WAAW,GAAG,EAAE,IAAI,GAAG,CAAC;IAC9B,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,cAAc,EAAE,GAAG,YAAY,CAAC,WAAW,EAAE,GAAG,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAEtF,OAAO,CACL,oBAAC,KAAK;QACJ,oBAAC,SAAS;YACR,6BAAK,SAAS,EAAC,cAAc;gBAC3B,oBAAC,SAAS,IACR,UAAU,QACV,IAAI,EAAE,IAAI,EACV,QAAQ,EAAE,QAAQ,EAClB,KAAK,EAAE,KAAK,EACZ,cAAc,EAAE,cAAc,GAC9B,CACE,CACI;QACX,gBAAgB,IAAI,CACnB,oBAAC,SAAS;YACR,oBAAC,QAAQ;gBACP;oBACE,oBAAC,MAAM,IACL,IAAI,EAAC,QAAQ,EACb,OAAO,EAAC,OAAO,gBACJ,wBAAwB,EACnC,KAAK,EAAC,wBAAwB,EAC9B,OAAO,EAAE,GAAG,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC,EAC7B,OAAO;wBAEP,oBAAC,WAAW,IAAC,KAAK,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAI,CACnC;oBACT,oBAAC,MAAM,IACL,IAAI,EAAC,QAAQ,EACb,OAAO,EAAC,OAAO,gBACJ,wBAAwB,EACnC,KAAK,EAAC,wBAAwB,EAC9B,OAAO,EAAE,GAAG,EAAE,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,EAC9B,OAAO,QACP,UAAU,EAAE,UAAU,IAAI,CAAC;wBAE3B,oBAAC,aAAa,IAAC,KAAK,EAAE,EAAE,QAAQ,EAAE,IAAI,EAAE,GAAI,CACrC,CACL,CACG,CACD,CACb,CACK,CACT,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,OAAO,CAAC","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Button, Split, SplitItem, Bullseye } from '@patternfly/react-core';\nimport { K8sResourceKind, k8sPatch, K8sKind } from '@console/internal/module/k8s';\nimport { AngleUpIcon, AngleDownIcon } from '@patternfly/react-icons';\nimport { podRingLabel, usePodScalingAccessStatus } from '../../utils';\nimport { ExtPodKind } from '../../types';\nimport PodStatus from './PodStatus';\nimport './PodRing.scss';\n\ninterface PodRingProps {\n  pods: ExtPodKind[];\n  obj: K8sResourceKind;\n  rc?: K8sResourceKind;\n  resourceKind: K8sKind;\n  path?: string;\n  impersonate?: string;\n  enableScaling?: boolean;\n}\n\nconst PodRing: React.FC<PodRingProps> = ({\n  pods,\n  obj,\n  resourceKind,\n  path,\n  impersonate,\n  rc,\n  enableScaling = true,\n}) => {\n  const [clickCount, setClickCount] = React.useState(obj.spec.replicas);\n  const isScalingAllowed = usePodScalingAccessStatus(\n    obj,\n    resourceKind,\n    pods,\n    enableScaling,\n    impersonate,\n  );\n\n  React.useEffect(\n    () => {\n      if (clickCount !== obj.spec.replicas) {\n        setClickCount(obj.spec.replicas);\n      }\n    },\n    // disabling exhaustive-deps because I do not want to add clickCount to\n    // dependency array. I only want to trigger useEffect when `obj.spec.replicas` changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [obj.spec.replicas],\n  );\n\n  const handleScaling = _.debounce(\n    (operation: number) => {\n      const patch = [{ op: 'replace', path, value: operation }];\n      const promise: Promise<K8sResourceKind> = k8sPatch(resourceKind, obj, patch);\n      promise.catch((error) => {\n        throw error;\n      });\n    },\n    1000,\n    {\n      leading: true,\n      trailing: false,\n    },\n  );\n\n  const handleClick = (operation: number) => {\n    setClickCount(clickCount + operation);\n    handleScaling(clickCount + operation);\n  };\n  const resourceObj = rc || obj;\n  const { title, subTitle, titleComponent } = podRingLabel(resourceObj, obj.kind, pods);\n\n  return (\n    <Split>\n      <SplitItem>\n        <div className=\"odc-pod-ring\">\n          <PodStatus\n            standalone\n            data={pods}\n            subTitle={subTitle}\n            title={title}\n            titleComponent={titleComponent}\n          />\n        </div>\n      </SplitItem>\n      {isScalingAllowed && (\n        <SplitItem>\n          <Bullseye>\n            <div>\n              <Button\n                type=\"button\"\n                variant=\"plain\"\n                aria-label=\"Increase the pod count\"\n                title=\"Increase the pod count\"\n                onClick={() => handleClick(1)}\n                isBlock\n              >\n                <AngleUpIcon style={{ fontSize: '20' }} />\n              </Button>\n              <Button\n                type=\"button\"\n                variant=\"plain\"\n                aria-label=\"Decrease the pod count\"\n                title=\"Decrease the pod count\"\n                onClick={() => handleClick(-1)}\n                isBlock\n                isDisabled={clickCount <= 0}\n              >\n                <AngleDownIcon style={{ fontSize: '20' }} />\n              </Button>\n            </div>\n          </Bullseye>\n        </SplitItem>\n      )}\n    </Split>\n  );\n};\n\nexport default PodRing;\n"]}]}