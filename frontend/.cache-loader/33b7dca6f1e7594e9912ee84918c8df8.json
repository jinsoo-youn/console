{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-topology/factories.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-topology/factories.ts","mtime":1617182414000},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { DagreLayout, GraphComponent, ModelKind, } from '@console/topology';\nimport { NodeType, PipelineLayout } from './const';\nimport BuilderNode from './BuilderNode';\nimport InvalidTaskListNode from './InvalidTaskListNode';\nimport SpacerNode from './SpacerNode';\nimport TaskNode from './TaskNode';\nimport TaskEdge from './TaskEdge';\nimport TaskListNode from './TaskListNode';\nimport WorkflowNode from './WorkflowNode';\nimport { getLayoutData } from './utils';\nexport const componentFactory = (kind, type) => {\n    switch (kind) {\n        case ModelKind.graph:\n            return GraphComponent;\n        case ModelKind.edge:\n            return TaskEdge;\n        case ModelKind.node:\n            switch (type) {\n                case NodeType.TASK_NODE:\n                    return TaskNode;\n                case NodeType.WORKFLOW_NODE:\n                    return WorkflowNode;\n                case NodeType.SPACER_NODE:\n                    return SpacerNode;\n                case NodeType.TASK_LIST_NODE:\n                    return TaskListNode;\n                case NodeType.INVALID_TASK_LIST_NODE:\n                    return InvalidTaskListNode;\n                case NodeType.BUILDER_NODE:\n                    return BuilderNode;\n                default:\n                    return undefined;\n            }\n        default:\n            return undefined;\n    }\n};\nexport const layoutFactory = (type, graph) => {\n    switch (type) {\n        case PipelineLayout.DAGRE_BUILDER:\n        case PipelineLayout.DAGRE_VIEWER:\n            return new DagreLayout(graph, Object.assign({ \n                // Hack to get around undesirable defaults\n                // TODO: fix this, it's not ideal but it works for now\n                linkDistance: 0, nodeDistance: 0, groupDistance: 0, collideDistance: 0, simulationSpeed: 0, chargeStrength: 0, allowDrag: false, layoutOnDrag: false }, getLayoutData(type)));\n        default:\n            return undefined;\n    }\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-topology/factories.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-topology/factories.ts"],"names":[],"mappings":"AAAA,OAAO,EAEL,WAAW,EACX,cAAc,EAEd,SAAS,GAEV,MAAM,mBAAmB,CAAC;AAC3B,OAAO,EAAE,QAAQ,EAAE,cAAc,EAAE,MAAM,SAAS,CAAC;AACnD,OAAO,WAAW,MAAM,eAAe,CAAC;AACxC,OAAO,mBAAmB,MAAM,uBAAuB,CAAC;AACxD,OAAO,UAAU,MAAM,cAAc,CAAC;AACtC,OAAO,QAAQ,MAAM,YAAY,CAAC;AAClC,OAAO,QAAQ,MAAM,YAAY,CAAC;AAClC,OAAO,YAAY,MAAM,gBAAgB,CAAC;AAC1C,OAAO,YAAY,MAAM,gBAAgB,CAAC;AAC1C,OAAO,EAAE,aAAa,EAAE,MAAM,SAAS,CAAC;AAExC,MAAM,CAAC,MAAM,gBAAgB,GAAqB,CAAC,IAAe,EAAE,IAAY,EAAE,EAAE;IAClF,QAAQ,IAAI,EAAE;QACZ,KAAK,SAAS,CAAC,KAAK;YAClB,OAAO,cAAc,CAAC;QACxB,KAAK,SAAS,CAAC,IAAI;YACjB,OAAO,QAAQ,CAAC;QAClB,KAAK,SAAS,CAAC,IAAI;YACjB,QAAQ,IAAI,EAAE;gBACZ,KAAK,QAAQ,CAAC,SAAS;oBACrB,OAAO,QAAQ,CAAC;gBAChB,KAAK,QAAQ,CAAC,aAAa;oBACzB,OAAO,YAAY,CAAC;gBACxB,KAAK,QAAQ,CAAC,WAAW;oBACvB,OAAO,UAAU,CAAC;gBACpB,KAAK,QAAQ,CAAC,cAAc;oBAC1B,OAAO,YAAY,CAAC;gBACtB,KAAK,QAAQ,CAAC,sBAAsB;oBAClC,OAAO,mBAAmB,CAAC;gBAC7B,KAAK,QAAQ,CAAC,YAAY;oBACxB,OAAO,WAAW,CAAC;gBACrB;oBACE,OAAO,SAAS,CAAC;aACpB;QACH;YACE,OAAO,SAAS,CAAC;KACpB;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAAkB,CAAC,IAAY,EAAE,KAAY,EAAE,EAAE;IACzE,QAAQ,IAAI,EAAE;QACZ,KAAK,cAAc,CAAC,aAAa,CAAC;QAClC,KAAK,cAAc,CAAC,YAAY;YAC9B,OAAO,IAAI,WAAW,CAAC,KAAK;gBAC1B,0CAA0C;gBAC1C,sDAAsD;gBACtD,YAAY,EAAE,CAAC,EACf,YAAY,EAAE,CAAC,EACf,aAAa,EAAE,CAAC,EAChB,eAAe,EAAE,CAAC,EAClB,eAAe,EAAE,CAAC,EAClB,cAAc,EAAE,CAAC,EACjB,SAAS,EAAE,KAAK,EAChB,YAAY,EAAE,KAAK,IAChB,aAAa,CAAC,IAAI,CAAC,EACtB,CAAC;QACL;YACE,OAAO,SAAS,CAAC;KACpB;AACH,CAAC,CAAC","sourcesContent":["import {\n  ComponentFactory,\n  DagreLayout,\n  GraphComponent,\n  LayoutFactory,\n  ModelKind,\n  Graph,\n} from '@console/topology';\nimport { NodeType, PipelineLayout } from './const';\nimport BuilderNode from './BuilderNode';\nimport InvalidTaskListNode from './InvalidTaskListNode';\nimport SpacerNode from './SpacerNode';\nimport TaskNode from './TaskNode';\nimport TaskEdge from './TaskEdge';\nimport TaskListNode from './TaskListNode';\nimport WorkflowNode from './WorkflowNode';\nimport { getLayoutData } from './utils';\n\nexport const componentFactory: ComponentFactory = (kind: ModelKind, type: string) => {\n  switch (kind) {\n    case ModelKind.graph:\n      return GraphComponent;\n    case ModelKind.edge:\n      return TaskEdge;\n    case ModelKind.node:\n      switch (type) {\n        case NodeType.TASK_NODE:\n          return TaskNode;\n          case NodeType.WORKFLOW_NODE:\n            return WorkflowNode;\n        case NodeType.SPACER_NODE:\n          return SpacerNode;\n        case NodeType.TASK_LIST_NODE:\n          return TaskListNode;\n        case NodeType.INVALID_TASK_LIST_NODE:\n          return InvalidTaskListNode;\n        case NodeType.BUILDER_NODE:\n          return BuilderNode;\n        default:\n          return undefined;\n      }\n    default:\n      return undefined;\n  }\n};\n\nexport const layoutFactory: LayoutFactory = (type: string, graph: Graph) => {\n  switch (type) {\n    case PipelineLayout.DAGRE_BUILDER:\n    case PipelineLayout.DAGRE_VIEWER:\n      return new DagreLayout(graph, {\n        // Hack to get around undesirable defaults\n        // TODO: fix this, it's not ideal but it works for now\n        linkDistance: 0,\n        nodeDistance: 0,\n        groupDistance: 0,\n        collideDistance: 0,\n        simulationSpeed: 0,\n        chargeStrength: 0,\n        allowDrag: false,\n        layoutOnDrag: false,\n        ...getLayoutData(type),\n      });\n    default:\n      return undefined;\n  }\n};\n"]}]}