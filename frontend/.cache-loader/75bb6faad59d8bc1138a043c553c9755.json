{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/eventSource-validation-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/eventSource-validation-utils.ts","mtime":1616735742410},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as yup from 'yup';\nimport { nameValidationSchema, projectNameValidationSchema, applicationNameValidationSchema, } from '@console/dev-console/src/components/import/validation-schema';\nimport { EventSources } from './import-types';\nimport { isKnownEventSource } from '../../utils/create-eventsources-utils';\nconst sinkServiceSchema = yup.object().shape({\n    knativeService: yup.string().required('Required'),\n});\nexport const sourceDataSpecSchema = yup\n    .object()\n    .when('type', {\n    is: EventSources.CronJobSource,\n    then: yup.object().shape({\n        cronjobsource: yup.object().shape({\n            data: yup.string().max(253, 'Cannot be longer than 253 characters.'),\n            schedule: yup\n                .string()\n                .max(253, 'Cannot be longer than 253 characters.')\n                .required('Required'),\n        }),\n    }),\n})\n    .when('type', {\n    is: EventSources.PingSource,\n    then: yup.object().shape({\n        pingsource: yup.object().shape({\n            data: yup.string().max(253, 'Cannot be longer than 253 characters.'),\n            schedule: yup\n                .string()\n                .max(253, 'Cannot be longer than 253 characters.')\n                .required('Required'),\n        }),\n    }),\n})\n    .when('type', {\n    is: EventSources.SinkBinding,\n    then: yup.object().shape({\n        sinkbinding: yup.object().shape({\n            subject: yup.object().shape({\n                selector: yup.object().shape({\n                    matchLabels: yup.object(),\n                }),\n                apiVersion: yup\n                    .string()\n                    .max(253, 'Cannot be longer than 253 characters.')\n                    .required('Required'),\n                kind: yup\n                    .string()\n                    .max(253, 'Cannot be longer than 253 characters.')\n                    .required('Required'),\n            }),\n        }),\n    }),\n})\n    .when('type', {\n    is: EventSources.ApiServerSource,\n    then: yup.object().shape({\n        apiserversource: yup.object().shape({\n            resources: yup\n                .array()\n                .of(yup.object({\n                apiVersion: yup.string().required('Required'),\n                kind: yup.string().required('Required'),\n            }))\n                .required('Required'),\n        }),\n    }),\n})\n    .when('type', {\n    is: EventSources.KafkaSource,\n    then: yup.object().shape({\n        kafkasource: yup.object().shape({\n            bootstrapServers: yup.array().of(yup.string().required('Required')),\n            consumerGroup: yup.string().required('Required'),\n            topics: yup.array().of(yup.string().required('Required')),\n            net: yup.object().shape({\n                sasl: yup.object().shape({\n                    enable: yup.boolean(),\n                    user: yup.object().when('enable', {\n                        is: true,\n                        then: yup.object().shape({\n                            secretKeyRef: yup.object().shape({\n                                name: yup.string().required('Required'),\n                                key: yup.string().required('Required'),\n                            }),\n                        }),\n                    }),\n                    password: yup.object().when('enable', {\n                        is: true,\n                        then: yup.object().shape({\n                            secretKeyRef: yup.object().shape({\n                                name: yup.string().required('Required'),\n                                key: yup.string().required('Required'),\n                            }),\n                        }),\n                    }),\n                }),\n                tls: yup.object().shape({\n                    enable: yup.boolean(),\n                    caCert: yup.object().when('enable', {\n                        is: true,\n                        then: yup.object().shape({\n                            secretKeyRef: yup.object().shape({\n                                name: yup.string().required('Required'),\n                                key: yup.string().required('Required'),\n                            }),\n                        }),\n                    }),\n                    cert: yup.object().when('enable', {\n                        is: true,\n                        then: yup.object().shape({\n                            secretKeyRef: yup.object().shape({\n                                name: yup.string().required('Required'),\n                                key: yup.string().required('Required'),\n                            }),\n                        }),\n                    }),\n                    key: yup.object().when('enable', {\n                        is: true,\n                        then: yup.object().shape({\n                            secretKeyRef: yup.object().shape({\n                                name: yup.string().required('Required'),\n                                key: yup.string().required('Required'),\n                            }),\n                        }),\n                    }),\n                }),\n            }),\n        }),\n    }),\n})\n    .when('type', {\n    is: EventSources.ContainerSource,\n    then: yup.object().shape({\n        containersource: yup.object().shape({\n            template: yup.object({\n                spec: yup.object({\n                    containers: yup.array().of(yup.object({\n                        image: yup.string().required('Required'),\n                    })),\n                }),\n            }),\n        }),\n    }),\n});\nexport const eventSourceValidationSchema = yup.lazy((formData) => {\n    if (isKnownEventSource(formData.type)) {\n        return yup.object().shape({\n            project: projectNameValidationSchema,\n            application: applicationNameValidationSchema,\n            name: nameValidationSchema,\n            sink: sinkServiceSchema,\n            data: sourceDataSpecSchema,\n        });\n    }\n    return yup.object().shape({\n        yamlData: yup.string(),\n    });\n});\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/eventSource-validation-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/eventSource-validation-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as yup from 'yup';\nimport {\n  nameValidationSchema,\n  projectNameValidationSchema,\n  applicationNameValidationSchema,\n} from '@console/dev-console/src/components/import/validation-schema';\nimport { EventSources } from './import-types';\nimport { isKnownEventSource } from '../../utils/create-eventsources-utils';\n\nconst sinkServiceSchema = yup.object().shape({\n  knativeService: yup.string().required('Required'),\n});\n\nexport const sourceDataSpecSchema = yup\n  .object()\n  .when('type', {\n    is: EventSources.CronJobSource,\n    then: yup.object().shape({\n      cronjobsource: yup.object().shape({\n        data: yup.string().max(253, 'Cannot be longer than 253 characters.'),\n        schedule: yup\n          .string()\n          .max(253, 'Cannot be longer than 253 characters.')\n          .required('Required'),\n      }),\n    }),\n  })\n  .when('type', {\n    is: EventSources.PingSource,\n    then: yup.object().shape({\n      pingsource: yup.object().shape({\n        data: yup.string().max(253, 'Cannot be longer than 253 characters.'),\n        schedule: yup\n          .string()\n          .max(253, 'Cannot be longer than 253 characters.')\n          .required('Required'),\n      }),\n    }),\n  })\n  .when('type', {\n    is: EventSources.SinkBinding,\n    then: yup.object().shape({\n      sinkbinding: yup.object().shape({\n        subject: yup.object().shape({\n          selector: yup.object().shape({\n            matchLabels: yup.object(),\n          }),\n          apiVersion: yup\n            .string()\n            .max(253, 'Cannot be longer than 253 characters.')\n            .required('Required'),\n          kind: yup\n            .string()\n            .max(253, 'Cannot be longer than 253 characters.')\n            .required('Required'),\n        }),\n      }),\n    }),\n  })\n  .when('type', {\n    is: EventSources.ApiServerSource,\n    then: yup.object().shape({\n      apiserversource: yup.object().shape({\n        resources: yup\n          .array()\n          .of(\n            yup.object({\n              apiVersion: yup.string().required('Required'),\n              kind: yup.string().required('Required'),\n            }),\n          )\n          .required('Required'),\n      }),\n    }),\n  })\n  .when('type', {\n    is: EventSources.KafkaSource,\n    then: yup.object().shape({\n      kafkasource: yup.object().shape({\n        bootstrapServers: yup.array().of(yup.string().required('Required')),\n        consumerGroup: yup.string().required('Required'),\n        topics: yup.array().of(yup.string().required('Required')),\n        net: yup.object().shape({\n          sasl: yup.object().shape({\n            enable: yup.boolean(),\n            user: yup.object().when('enable', {\n              is: true,\n              then: yup.object().shape({\n                secretKeyRef: yup.object().shape({\n                  name: yup.string().required('Required'),\n                  key: yup.string().required('Required'),\n                }),\n              }),\n            }),\n            password: yup.object().when('enable', {\n              is: true,\n              then: yup.object().shape({\n                secretKeyRef: yup.object().shape({\n                  name: yup.string().required('Required'),\n                  key: yup.string().required('Required'),\n                }),\n              }),\n            }),\n          }),\n          tls: yup.object().shape({\n            enable: yup.boolean(),\n            caCert: yup.object().when('enable', {\n              is: true,\n              then: yup.object().shape({\n                secretKeyRef: yup.object().shape({\n                  name: yup.string().required('Required'),\n                  key: yup.string().required('Required'),\n                }),\n              }),\n            }),\n            cert: yup.object().when('enable', {\n              is: true,\n              then: yup.object().shape({\n                secretKeyRef: yup.object().shape({\n                  name: yup.string().required('Required'),\n                  key: yup.string().required('Required'),\n                }),\n              }),\n            }),\n            key: yup.object().when('enable', {\n              is: true,\n              then: yup.object().shape({\n                secretKeyRef: yup.object().shape({\n                  name: yup.string().required('Required'),\n                  key: yup.string().required('Required'),\n                }),\n              }),\n            }),\n          }),\n        }),\n      }),\n    }),\n  })\n  .when('type', {\n    is: EventSources.ContainerSource,\n    then: yup.object().shape({\n      containersource: yup.object().shape({\n        template: yup.object({\n          spec: yup.object({\n            containers: yup.array().of(\n              yup.object({\n                image: yup.string().required('Required'),\n              }),\n            ),\n          }),\n        }),\n      }),\n    }),\n  });\n\nexport const eventSourceValidationSchema = yup.lazy((formData) => {\n  if (isKnownEventSource(formData.type)) {\n    return yup.object().shape({\n      project: projectNameValidationSchema,\n      application: applicationNameValidationSchema,\n      name: nameValidationSchema,\n      sink: sinkServiceSchema,\n      data: sourceDataSpecSchema,\n    });\n  }\n  return yup.object().shape({\n    yamlData: yup.string(),\n  });\n});\n"]}]}