{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/git-service/src/utils/build-tool-detector.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/git-service/src/utils/build-tool-detector.ts","mtime":1615298458640},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { BuildTools, WebAppDependencies } from '../types';\nexport function detectBuildTypes(files) {\n    const buildTypes = BuildTools.map((t) => {\n        const matchedFiles = files.filter((f) => t.expectedRegexps.test(f));\n        return { buildType: t.type, language: t.language, files: matchedFiles };\n    });\n    return buildTypes\n        .filter((b) => b.files.length > 0)\n        .sort((a, b) => b.files.length - a.files.length);\n}\nexport function isModernWebApp(packageJsonContent) {\n    const packageJson = JSON.parse(packageJsonContent);\n    let isWebApp = false;\n    WebAppDependencies.forEach((dep) => {\n        if (dep in packageJson.dependencies) {\n            isWebApp = true;\n        }\n    });\n    return isWebApp;\n}\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/git-service/src/utils/build-tool-detector.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/git-service/src/utils/build-tool-detector.ts"],"names":[],"mappings":"AAAA,OAAO,EAAa,UAAU,EAAa,kBAAkB,EAAE,MAAM,UAAU,CAAC;AAEhF,MAAM,UAAU,gBAAgB,CAAC,KAAe;IAC9C,MAAM,UAAU,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC,CAAY,EAAE,EAAE;QACjD,MAAM,YAAY,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAS,EAAE,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAC5E,OAAO,EAAE,SAAS,EAAE,CAAC,CAAC,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC,QAAQ,EAAE,KAAK,EAAE,YAAY,EAAE,CAAC;IAC1E,CAAC,CAAC,CAAC;IACH,OAAO,UAAU;SACd,MAAM,CAAC,CAAC,CAAY,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;SAC5C,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;AACrD,CAAC;AAED,MAAM,UAAU,cAAc,CAAC,kBAA0B;IACvD,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,CAAC;IACnD,IAAI,QAAQ,GAAG,KAAK,CAAC;IACrB,kBAAkB,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;QACjC,IAAI,GAAG,IAAI,WAAW,CAAC,YAAY,EAAE;YACnC,QAAQ,GAAG,IAAI,CAAC;SACjB;IACH,CAAC,CAAC,CAAC;IAEH,OAAO,QAAQ,CAAC;AAClB,CAAC","sourcesContent":["import { BuildTool, BuildTools, BuildType, WebAppDependencies } from '../types';\n\nexport function detectBuildTypes(files: string[]): BuildType[] {\n  const buildTypes = BuildTools.map((t: BuildTool) => {\n    const matchedFiles = files.filter((f: string) => t.expectedRegexps.test(f));\n    return { buildType: t.type, language: t.language, files: matchedFiles };\n  });\n  return buildTypes\n    .filter((b: BuildType) => b.files.length > 0)\n    .sort((a, b) => b.files.length - a.files.length);\n}\n\nexport function isModernWebApp(packageJsonContent: string): boolean {\n  const packageJson = JSON.parse(packageJsonContent);\n  let isWebApp = false;\n  WebAppDependencies.forEach((dep) => {\n    if (dep in packageJson.dependencies) {\n      isWebApp = true;\n    }\n  });\n\n  return isWebApp;\n}\n"]}]}