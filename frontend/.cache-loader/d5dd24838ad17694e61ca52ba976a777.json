{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/nodes/BaseNode.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/nodes/BaseNode.tsx","mtime":1615298458630},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { useAnchor, EllipseAnchor, useCombineRefs, useHover, observer, createSvgIdUrl, } from '@console/topology';\nimport { modelFor, referenceFor } from '@console/internal/module/k8s';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport SvgBoxedText from '../../../svg/SvgBoxedText';\nimport { getTopologyResourceObject } from '../../topology-utils';\nimport { useDisplayFilters, useSearchFilter } from '../../filters';\nimport { NodeShadows, NODE_SHADOW_FILTER_ID_HOVER, NODE_SHADOW_FILTER_ID } from '../NodeShadows';\nimport './BaseNode.scss';\nconst ObservedBaseNode = ({ className, outerRadius, innerRadius, icon, kind, element, selected, onSelect, children, attachments, dragNodeRef, dndDropRef, canDrop, dragging, edgeDragging, dropTarget, onHideCreateConnector, onShowCreateConnector, onContextMenu, contextMenuOpen, }) => {\n    const [hover, hoverRef] = useHover();\n    useAnchor(EllipseAnchor);\n    const { width, height } = element.getDimensions();\n    const cx = width / 2;\n    const cy = height / 2;\n    const resourceObj = getTopologyResourceObject(element.getData());\n    const resourceModel = modelFor(referenceFor(resourceObj));\n    const iconRadius = innerRadius * 0.9;\n    const editAccess = useAccessReview({\n        group: resourceModel.apiGroup,\n        verb: 'patch',\n        resource: resourceModel.plural,\n        name: resourceObj.metadata.name,\n        namespace: resourceObj.metadata.namespace,\n    });\n    const [filtered] = useSearchFilter(element.getLabel());\n    const displayFilters = useDisplayFilters();\n    const showLabels = displayFilters.showLabels || hover;\n    const refs = useCombineRefs(hoverRef, dragNodeRef);\n    React.useLayoutEffect(() => {\n        if (editAccess) {\n            if (hover) {\n                onShowCreateConnector && onShowCreateConnector();\n            }\n            else {\n                onHideCreateConnector && onHideCreateConnector();\n            }\n        }\n    }, [hover, onShowCreateConnector, onHideCreateConnector, editAccess]);\n    return (React.createElement(\"g\", { className: classNames('odc-base-node', className, {\n            'is-hover': hover || contextMenuOpen,\n            'is-highlight': canDrop,\n            'is-dragging': dragging || edgeDragging,\n            'is-dropTarget': canDrop && dropTarget,\n            'is-filtered': filtered,\n            'is-selected': selected,\n        }) },\n        React.createElement(NodeShadows, null),\n        React.createElement(\"g\", { \"data-test-id\": \"base-node-handler\", onClick: onSelect, onContextMenu: editAccess ? onContextMenu : null, ref: refs },\n            React.createElement(\"circle\", { className: \"odc-base-node__bg\", ref: dndDropRef, cx: cx, cy: cy, r: outerRadius, filter: createSvgIdUrl(hover || dragging || edgeDragging || dropTarget || contextMenuOpen\n                    ? NODE_SHADOW_FILTER_ID_HOVER\n                    : NODE_SHADOW_FILTER_ID) }),\n            icon && (React.createElement(\"image\", { x: cx - iconRadius, y: cy - iconRadius, width: iconRadius * 2, height: iconRadius * 2, xlinkHref: icon })),\n            showLabels && (kind || element.getLabel()) && (React.createElement(SvgBoxedText, { className: \"odc-base-node__label\", x: cx, y: cy + outerRadius + 24, paddingX: 8, paddingY: 4, kind: kind }, element.getLabel())),\n            children),\n        attachments));\n};\nconst BaseNode = observer(ObservedBaseNode);\nexport { BaseNode };\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/nodes/BaseNode.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/nodes/BaseNode.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport {\n  Node,\n  useAnchor,\n  EllipseAnchor,\n  WithCreateConnectorProps,\n  WithDndDropProps,\n  WithDragNodeProps,\n  WithSelectionProps,\n  WithContextMenuProps,\n  useCombineRefs,\n  useHover,\n  observer,\n  createSvgIdUrl,\n} from '@console/topology';\nimport { modelFor, referenceFor } from '@console/internal/module/k8s';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport SvgBoxedText from '../../../svg/SvgBoxedText';\nimport { getTopologyResourceObject } from '../../topology-utils';\nimport { useDisplayFilters, useSearchFilter } from '../../filters';\nimport { NodeShadows, NODE_SHADOW_FILTER_ID_HOVER, NODE_SHADOW_FILTER_ID } from '../NodeShadows';\n\nimport './BaseNode.scss';\n\nexport type BaseNodeProps = {\n  className: string;\n  outerRadius: number;\n  innerRadius?: number;\n  icon?: string;\n  kind?: string;\n  children?: React.ReactNode;\n  attachments?: React.ReactNode;\n  element: Node;\n  dragging?: boolean;\n  edgeDragging?: boolean;\n  dropTarget?: boolean;\n  canDrop?: boolean;\n} & WithSelectionProps &\n  WithDragNodeProps &\n  WithDndDropProps &\n  WithContextMenuProps &\n  WithCreateConnectorProps;\n\nconst ObservedBaseNode: React.FC<BaseNodeProps> = ({\n  className,\n  outerRadius,\n  innerRadius,\n  icon,\n  kind,\n  element,\n  selected,\n  onSelect,\n  children,\n  attachments,\n  dragNodeRef,\n  dndDropRef,\n  canDrop,\n  dragging,\n  edgeDragging,\n  dropTarget,\n  onHideCreateConnector,\n  onShowCreateConnector,\n  onContextMenu,\n  contextMenuOpen,\n}) => {\n  const [hover, hoverRef] = useHover();\n  useAnchor(EllipseAnchor);\n  const { width, height } = element.getDimensions();\n  const cx = width / 2;\n  const cy = height / 2;\n  const resourceObj = getTopologyResourceObject(element.getData());\n  const resourceModel = modelFor(referenceFor(resourceObj));\n  const iconRadius = innerRadius * 0.9;\n  const editAccess = useAccessReview({\n    group: resourceModel.apiGroup,\n    verb: 'patch',\n    resource: resourceModel.plural,\n    name: resourceObj.metadata.name,\n    namespace: resourceObj.metadata.namespace,\n  });\n  const [filtered] = useSearchFilter(element.getLabel());\n  const displayFilters = useDisplayFilters();\n  const showLabels = displayFilters.showLabels || hover;\n  const refs = useCombineRefs<SVGEllipseElement>(hoverRef, dragNodeRef);\n\n  React.useLayoutEffect(() => {\n    if (editAccess) {\n      if (hover) {\n        onShowCreateConnector && onShowCreateConnector();\n      } else {\n        onHideCreateConnector && onHideCreateConnector();\n      }\n    }\n  }, [hover, onShowCreateConnector, onHideCreateConnector, editAccess]);\n\n  return (\n    <g\n      className={classNames('odc-base-node', className, {\n        'is-hover': hover || contextMenuOpen,\n        'is-highlight': canDrop,\n        'is-dragging': dragging || edgeDragging,\n        'is-dropTarget': canDrop && dropTarget,\n        'is-filtered': filtered,\n        'is-selected': selected,\n      })}\n    >\n      <NodeShadows />\n      <g\n        data-test-id=\"base-node-handler\"\n        onClick={onSelect}\n        onContextMenu={editAccess ? onContextMenu : null}\n        ref={refs}\n      >\n        <circle\n          className=\"odc-base-node__bg\"\n          ref={dndDropRef}\n          cx={cx}\n          cy={cy}\n          r={outerRadius}\n          filter={createSvgIdUrl(\n            hover || dragging || edgeDragging || dropTarget || contextMenuOpen\n              ? NODE_SHADOW_FILTER_ID_HOVER\n              : NODE_SHADOW_FILTER_ID,\n          )}\n        />\n        {icon && (\n          <image\n            x={cx - iconRadius}\n            y={cy - iconRadius}\n            width={iconRadius * 2}\n            height={iconRadius * 2}\n            xlinkHref={icon}\n          />\n        )}\n        {showLabels && (kind || element.getLabel()) && (\n          <SvgBoxedText\n            className=\"odc-base-node__label\"\n            x={cx}\n            y={cy + outerRadius + 24}\n            paddingX={8}\n            paddingY={4}\n            kind={kind}\n          >\n            {element.getLabel()}\n          </SvgBoxedText>\n        )}\n        {children}\n      </g>\n      {attachments}\n    </g>\n  );\n};\n\nconst BaseNode = observer(ObservedBaseNode);\nexport { BaseNode };\n"]}]}