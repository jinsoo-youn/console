{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/event-sources/EventSourcesSelector.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/event-sources/EventSourcesSelector.tsx","mtime":1616735742400},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useFormikContext } from 'formik';\nimport { ItemSelectorField } from '@console/shared';\nimport FormSection from '@console/dev-console/src/components/import/section/FormSection';\nimport { KNATIVE_EVENT_SOURCE_APIGROUP } from '../../../const';\nimport { getEventSourceModels } from '../../../utils/fetch-dynamic-eventsources-utils';\nimport { isKnownEventSource, getEventSourceData } from '../../../utils/create-eventsources-utils';\nimport { CREATE_APPLICATION_KEY } from '@console/dev-console/src/const';\nconst EventSourcesSelector = ({ eventSourceList }) => {\n    const eventSourceItems = Object.keys(eventSourceList).length;\n    const { values: { application: { selectedKey }, }, setFieldValue, setFieldTouched, validateForm, setErrors, setStatus, } = useFormikContext();\n    const handleItemChange = React.useCallback((item) => {\n        setErrors({});\n        setStatus({});\n        if (isKnownEventSource(item)) {\n            const nameData = `data.${item.toLowerCase()}`;\n            const sourceData = getEventSourceData(item.toLowerCase());\n            setFieldValue(nameData, sourceData);\n            setFieldTouched(nameData, true);\n        }\n        const selDataModel = _.find(getEventSourceModels(), { kind: item });\n        const selApiVersion = selDataModel\n            ? `${selDataModel === null || selDataModel === void 0 ? void 0 : selDataModel.apiGroup}/${selDataModel === null || selDataModel === void 0 ? void 0 : selDataModel.apiVersion}`\n            : `${KNATIVE_EVENT_SOURCE_APIGROUP}/v1alpha1`;\n        const name = _.kebabCase(item);\n        setFieldValue('name', name);\n        setFieldTouched('name', true);\n        if (!selectedKey || selectedKey === CREATE_APPLICATION_KEY) {\n            setFieldValue('application.name', `${name}-app`);\n            setFieldTouched('application.name', true);\n        }\n        setFieldValue('apiVersion', selApiVersion);\n        setFieldTouched('apiVersion', true);\n        validateForm();\n    }, [setErrors, setStatus, setFieldValue, setFieldTouched, selectedKey, validateForm]);\n    const itemSelectorField = (React.createElement(ItemSelectorField, { itemList: eventSourceList, loadingItems: !eventSourceItems, name: \"type\", onSelect: handleItemChange, autoSelect: true }));\n    return eventSourceItems > 1 ? (React.createElement(FormSection, { title: \"Type\", fullWidth: true, extraMargin: true }, itemSelectorField)) : (itemSelectorField);\n};\nexport default EventSourcesSelector;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/event-sources/EventSourcesSelector.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/event-sources/EventSourcesSelector.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { ItemSelectorField } from '@console/shared';\nimport FormSection from '@console/dev-console/src/components/import/section/FormSection';\nimport { NormalizedEventSources } from '../import-types';\nimport { KNATIVE_EVENT_SOURCE_APIGROUP } from '../../../const';\nimport { getEventSourceModels } from '../../../utils/fetch-dynamic-eventsources-utils';\nimport { isKnownEventSource, getEventSourceData } from '../../../utils/create-eventsources-utils';\nimport { CREATE_APPLICATION_KEY } from '@console/dev-console/src/const';\n\ninterface EventSourcesSelectorProps {\n  eventSourceList: NormalizedEventSources;\n}\n\nconst EventSourcesSelector: React.FC<EventSourcesSelectorProps> = ({ eventSourceList }) => {\n  const eventSourceItems = Object.keys(eventSourceList).length;\n  const {\n    values: {\n      application: { selectedKey },\n    },\n    setFieldValue,\n    setFieldTouched,\n    validateForm,\n    setErrors,\n    setStatus,\n  } = useFormikContext<FormikValues>();\n  const handleItemChange = React.useCallback(\n    (item: string) => {\n      setErrors({});\n      setStatus({});\n      if (isKnownEventSource(item)) {\n        const nameData = `data.${item.toLowerCase()}`;\n        const sourceData = getEventSourceData(item.toLowerCase());\n        setFieldValue(nameData, sourceData);\n        setFieldTouched(nameData, true);\n      }\n      const selDataModel = _.find(getEventSourceModels(), { kind: item });\n      const selApiVersion = selDataModel\n        ? `${selDataModel?.apiGroup}/${selDataModel?.apiVersion}`\n        : `${KNATIVE_EVENT_SOURCE_APIGROUP}/v1alpha1`;\n      const name = _.kebabCase(item);\n      setFieldValue('name', name);\n      setFieldTouched('name', true);\n      if (!selectedKey || selectedKey === CREATE_APPLICATION_KEY) {\n        setFieldValue('application.name', `${name}-app`);\n        setFieldTouched('application.name', true);\n      }\n      setFieldValue('apiVersion', selApiVersion);\n      setFieldTouched('apiVersion', true);\n      validateForm();\n    },\n    [setErrors, setStatus, setFieldValue, setFieldTouched, selectedKey, validateForm],\n  );\n\n  const itemSelectorField = (\n    <ItemSelectorField\n      itemList={eventSourceList}\n      loadingItems={!eventSourceItems}\n      name=\"type\"\n      onSelect={handleItemChange}\n      autoSelect\n    />\n  );\n\n  return eventSourceItems > 1 ? (\n    <FormSection title=\"Type\" fullWidth extraMargin>\n      {itemSelectorField}\n    </FormSection>\n  ) : (\n    itemSelectorField\n  );\n};\n\nexport default EventSourcesSelector;\n"]}]}