{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ky/index.js","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ky/index.js","mtime":1607306290723},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["/*! MIT License Â© Sindre Sorhus */\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nconst getGlobal = property => {\n    /* istanbul ignore next */\n    if (typeof self !== 'undefined' && self && property in self) {\n        return self[property];\n    }\n    /* istanbul ignore next */\n    if (typeof window !== 'undefined' && window && property in window) {\n        return window[property];\n    }\n    if (typeof global !== 'undefined' && global && property in global) {\n        return global[property];\n    }\n    /* istanbul ignore next */\n    if (typeof globalThis !== 'undefined' && globalThis) {\n        return globalThis[property];\n    }\n};\nconst document = getGlobal('document');\nconst Headers = getGlobal('Headers');\nconst Response = getGlobal('Response');\nconst ReadableStream = getGlobal('ReadableStream');\nconst fetch = getGlobal('fetch');\nconst AbortController = getGlobal('AbortController');\nconst FormData = getGlobal('FormData');\nconst isObject = value => value !== null && typeof value === 'object';\nconst supportsAbortController = typeof AbortController === 'function';\nconst supportsStreams = typeof ReadableStream === 'function';\nconst supportsFormData = typeof FormData === 'function';\nconst deepMerge = (...sources) => {\n    let returnValue = {};\n    for (const source of sources) {\n        if (Array.isArray(source)) {\n            if (!(Array.isArray(returnValue))) {\n                returnValue = [];\n            }\n            returnValue = [...returnValue, ...source];\n        }\n        else if (isObject(source)) {\n            for (let [key, value] of Object.entries(source)) {\n                if (isObject(value) && Reflect.has(returnValue, key)) {\n                    value = deepMerge(returnValue[key], value);\n                }\n                returnValue = Object.assign(Object.assign({}, returnValue), { [key]: value });\n            }\n        }\n    }\n    return returnValue;\n};\nconst requestMethods = [\n    'get',\n    'post',\n    'put',\n    'patch',\n    'head',\n    'delete'\n];\nconst responseTypes = {\n    json: 'application/json',\n    text: 'text/*',\n    formData: 'multipart/form-data',\n    arrayBuffer: '*/*',\n    blob: '*/*'\n};\nconst retryMethods = new Set([\n    'get',\n    'put',\n    'head',\n    'delete',\n    'options',\n    'trace'\n]);\nconst retryStatusCodes = new Set([\n    408,\n    413,\n    429,\n    500,\n    502,\n    503,\n    504\n]);\nconst retryAfterStatusCodes = new Set([\n    413,\n    429,\n    503\n]);\nclass HTTPError extends Error {\n    constructor(response) {\n        super(response.statusText);\n        this.name = 'HTTPError';\n        this.response = response;\n    }\n}\nclass TimeoutError extends Error {\n    constructor() {\n        super('Request timed out');\n        this.name = 'TimeoutError';\n    }\n}\nconst safeTimeout = (resolve, reject, ms) => {\n    if (ms > 2147483647) { // The maximum value of a 32bit int (see #117)\n        reject(new RangeError('The `timeout` option cannot be greater than 2147483647'));\n    }\n    return setTimeout(resolve, ms);\n};\nconst delay = ms => new Promise((resolve, reject) => safeTimeout(resolve, reject, ms));\n// `Promise.race()` workaround (#91)\nconst timeout = (promise, ms, abortController) => new Promise((resolve, reject) => {\n    const timeoutID = safeTimeout(() => {\n        if (supportsAbortController) {\n            abortController.abort();\n        }\n        reject(new TimeoutError());\n    }, reject, ms);\n    /* eslint-disable promise/prefer-await-to-then */\n    promise\n        .then(resolve)\n        .catch(reject)\n        .then(() => {\n        clearTimeout(timeoutID);\n    });\n    /* eslint-enable promise/prefer-await-to-then */\n});\nconst normalizeRequestMethod = input => requestMethods.includes(input) ? input.toUpperCase() : input;\nclass Ky {\n    constructor(input, _a) {\n        var { timeout = 10000, hooks, throwHttpErrors = true, searchParams, json } = _a, otherOptions = __rest(_a, [\"timeout\", \"hooks\", \"throwHttpErrors\", \"searchParams\", \"json\"]);\n        this._retryCount = 0;\n        this._options = Object.assign({ method: 'get', credentials: 'same-origin', retry: 2 }, otherOptions);\n        if (supportsAbortController) {\n            this.abortController = new AbortController();\n            if (this._options.signal) {\n                this._options.signal.addEventListener('abort', () => {\n                    this.abortController.abort();\n                });\n            }\n            this._options.signal = this.abortController.signal;\n        }\n        this._options.method = normalizeRequestMethod(this._options.method);\n        this._options.prefixUrl = String(this._options.prefixUrl || '');\n        this._input = String(input || '');\n        if (this._options.prefixUrl && this._input.startsWith('/')) {\n            throw new Error('`input` must not begin with a slash when using `prefixUrl`');\n        }\n        if (this._options.prefixUrl && !this._options.prefixUrl.endsWith('/')) {\n            this._options.prefixUrl += '/';\n        }\n        this._input = this._options.prefixUrl + this._input;\n        if (searchParams) {\n            const url = new URL(this._input, document && document.baseURI);\n            if (typeof searchParams === 'string' || (URLSearchParams && searchParams instanceof URLSearchParams)) {\n                url.search = searchParams;\n            }\n            else if (Object.values(searchParams).every(param => typeof param === 'number' || typeof param === 'string')) {\n                url.search = new URLSearchParams(searchParams).toString();\n            }\n            else {\n                throw new Error('The `searchParams` option must be either a string, `URLSearchParams` instance or an object with string and number values');\n            }\n            this._input = url.toString();\n        }\n        this._timeout = timeout;\n        this._hooks = deepMerge({\n            beforeRequest: [],\n            afterResponse: []\n        }, hooks);\n        this._throwHttpErrors = throwHttpErrors;\n        const headers = new Headers(this._options.headers || {});\n        if (((supportsFormData && this._options.body instanceof FormData) || this._options.body instanceof URLSearchParams) && headers.has('content-type')) {\n            throw new Error(`The \\`content-type\\` header cannot be used with a ${this._options.body.constructor.name} body. It will be set automatically.`);\n        }\n        if (json) {\n            if (this._options.body) {\n                throw new Error('The `json` option cannot be used with the `body` option');\n            }\n            headers.set('content-type', 'application/json');\n            this._options.body = JSON.stringify(json);\n        }\n        this._options.headers = headers;\n        const fn = () => __awaiter(this, void 0, void 0, function* () {\n            yield delay(1);\n            let response = yield this._fetch();\n            for (const hook of this._hooks.afterResponse) {\n                // eslint-disable-next-line no-await-in-loop\n                const modifiedResponse = yield hook(response.clone());\n                if (modifiedResponse instanceof Response) {\n                    response = modifiedResponse;\n                }\n            }\n            if (!response.ok && this._throwHttpErrors) {\n                throw new HTTPError(response);\n            }\n            // If `onDownloadProgress` is passed, it uses the stream API internally\n            /* istanbul ignore next */\n            if (this._options.onDownloadProgress) {\n                if (typeof this._options.onDownloadProgress !== 'function') {\n                    throw new TypeError('The `onDownloadProgress` option must be a function');\n                }\n                if (!supportsStreams) {\n                    throw new Error('Streams are not supported in your environment. `ReadableStream` is missing.');\n                }\n                return this._stream(response.clone(), this._options.onDownloadProgress);\n            }\n            return response;\n        });\n        const isRetriableMethod = retryMethods.has(this._options.method.toLowerCase());\n        const result = isRetriableMethod ? this._retry(fn) : fn();\n        for (const [type, mimeType] of Object.entries(responseTypes)) {\n            result[type] = () => __awaiter(this, void 0, void 0, function* () {\n                headers.set('accept', mimeType);\n                return (yield result).clone()[type]();\n            });\n        }\n        return result;\n    }\n    _calculateRetryDelay(error) {\n        this._retryCount++;\n        if (this._retryCount < this._options.retry && !(error instanceof TimeoutError)) {\n            if (error instanceof HTTPError) {\n                if (!retryStatusCodes.has(error.response.status)) {\n                    return 0;\n                }\n                const retryAfter = error.response.headers.get('Retry-After');\n                if (retryAfter && retryAfterStatusCodes.has(error.response.status)) {\n                    let after = Number(retryAfter);\n                    if (Number.isNaN(after)) {\n                        after = Date.parse(retryAfter) - Date.now();\n                    }\n                    else {\n                        after *= 1000;\n                    }\n                    return after;\n                }\n                if (error.response.status === 413) {\n                    return 0;\n                }\n            }\n            const BACKOFF_FACTOR = 0.3;\n            return BACKOFF_FACTOR * (2 ** (this._retryCount - 1)) * 1000;\n        }\n        return 0;\n    }\n    _retry(fn) {\n        return __awaiter(this, void 0, void 0, function* () {\n            try {\n                return yield fn();\n            }\n            catch (error) {\n                const ms = this._calculateRetryDelay(error);\n                if (ms !== 0 && this._retryCount > 0) {\n                    yield delay(ms);\n                    return this._retry(fn);\n                }\n                if (this._throwHttpErrors) {\n                    throw error;\n                }\n            }\n        });\n    }\n    _fetch() {\n        return __awaiter(this, void 0, void 0, function* () {\n            for (const hook of this._hooks.beforeRequest) {\n                // eslint-disable-next-line no-await-in-loop\n                yield hook(this._options);\n            }\n            if (this._timeout === false) {\n                return fetch(this._input, this._options);\n            }\n            return timeout(fetch(this._input, this._options), this._timeout, this.abortController);\n        });\n    }\n    /* istanbul ignore next */\n    _stream(response, onDownloadProgress) {\n        const totalBytes = Number(response.headers.get('content-length')) || 0;\n        let transferredBytes = 0;\n        return new Response(new ReadableStream({\n            start(controller) {\n                const reader = response.body.getReader();\n                if (onDownloadProgress) {\n                    onDownloadProgress({ percent: 0, transferredBytes: 0, totalBytes }, new Uint8Array());\n                }\n                function read() {\n                    return __awaiter(this, void 0, void 0, function* () {\n                        const { done, value } = yield reader.read();\n                        if (done) {\n                            controller.close();\n                            return;\n                        }\n                        if (onDownloadProgress) {\n                            transferredBytes += value.byteLength;\n                            const percent = totalBytes === 0 ? 0 : transferredBytes / totalBytes;\n                            onDownloadProgress({ percent, transferredBytes, totalBytes }, value);\n                        }\n                        controller.enqueue(value);\n                        read();\n                    });\n                }\n                read();\n            }\n        }));\n    }\n}\nconst validateAndMerge = (...sources) => {\n    for (const source of sources) {\n        if ((!isObject(source) || Array.isArray(source)) && typeof source !== 'undefined') {\n            throw new TypeError('The `options` argument must be an object');\n        }\n    }\n    return deepMerge({}, ...sources);\n};\nconst createInstance = defaults => {\n    const ky = (input, options) => new Ky(input, validateAndMerge(defaults, options));\n    for (const method of requestMethods) {\n        ky[method] = (input, options) => new Ky(input, validateAndMerge(defaults, options, { method }));\n    }\n    ky.create = newDefaults => createInstance(validateAndMerge(newDefaults));\n    ky.extend = newDefaults => createInstance(validateAndMerge(defaults, newDefaults));\n    return ky;\n};\nexport default createInstance();\nexport { HTTPError, TimeoutError };\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ky/index.js","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ky/index.js"],"names":[],"mappings":"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","sourcesContent":["/*! MIT License Â© Sindre Sorhus */\n\nconst getGlobal = property => {\n\t/* istanbul ignore next */\n\tif (typeof self !== 'undefined' && self && property in self) {\n\t\treturn self[property];\n\t}\n\n\t/* istanbul ignore next */\n\tif (typeof window !== 'undefined' && window && property in window) {\n\t\treturn window[property];\n\t}\n\n\tif (typeof global !== 'undefined' && global && property in global) {\n\t\treturn global[property];\n\t}\n\n\t/* istanbul ignore next */\n\tif (typeof globalThis !== 'undefined' && globalThis) {\n\t\treturn globalThis[property];\n\t}\n};\n\nconst document = getGlobal('document');\nconst Headers = getGlobal('Headers');\nconst Response = getGlobal('Response');\nconst ReadableStream = getGlobal('ReadableStream');\nconst fetch = getGlobal('fetch');\nconst AbortController = getGlobal('AbortController');\nconst FormData = getGlobal('FormData');\n\nconst isObject = value => value !== null && typeof value === 'object';\nconst supportsAbortController = typeof AbortController === 'function';\nconst supportsStreams = typeof ReadableStream === 'function';\nconst supportsFormData = typeof FormData === 'function';\n\nconst deepMerge = (...sources) => {\n\tlet returnValue = {};\n\n\tfor (const source of sources) {\n\t\tif (Array.isArray(source)) {\n\t\t\tif (!(Array.isArray(returnValue))) {\n\t\t\t\treturnValue = [];\n\t\t\t}\n\n\t\t\treturnValue = [...returnValue, ...source];\n\t\t} else if (isObject(source)) {\n\t\t\tfor (let [key, value] of Object.entries(source)) {\n\t\t\t\tif (isObject(value) && Reflect.has(returnValue, key)) {\n\t\t\t\t\tvalue = deepMerge(returnValue[key], value);\n\t\t\t\t}\n\n\t\t\t\treturnValue = {...returnValue, [key]: value};\n\t\t\t}\n\t\t}\n\t}\n\n\treturn returnValue;\n};\n\nconst requestMethods = [\n\t'get',\n\t'post',\n\t'put',\n\t'patch',\n\t'head',\n\t'delete'\n];\n\nconst responseTypes = {\n\tjson: 'application/json',\n\ttext: 'text/*',\n\tformData: 'multipart/form-data',\n\tarrayBuffer: '*/*',\n\tblob: '*/*'\n};\n\nconst retryMethods = new Set([\n\t'get',\n\t'put',\n\t'head',\n\t'delete',\n\t'options',\n\t'trace'\n]);\n\nconst retryStatusCodes = new Set([\n\t408,\n\t413,\n\t429,\n\t500,\n\t502,\n\t503,\n\t504\n]);\n\nconst retryAfterStatusCodes = new Set([\n\t413,\n\t429,\n\t503\n]);\n\nclass HTTPError extends Error {\n\tconstructor(response) {\n\t\tsuper(response.statusText);\n\t\tthis.name = 'HTTPError';\n\t\tthis.response = response;\n\t}\n}\n\nclass TimeoutError extends Error {\n\tconstructor() {\n\t\tsuper('Request timed out');\n\t\tthis.name = 'TimeoutError';\n\t}\n}\n\nconst safeTimeout = (resolve, reject, ms) => {\n\tif (ms > 2147483647) { // The maximum value of a 32bit int (see #117)\n\t\treject(new RangeError('The `timeout` option cannot be greater than 2147483647'));\n\t}\n\n\treturn setTimeout(resolve, ms);\n};\n\nconst delay = ms => new Promise((resolve, reject) => safeTimeout(resolve, reject, ms));\n\n// `Promise.race()` workaround (#91)\nconst timeout = (promise, ms, abortController) =>\n\tnew Promise((resolve, reject) => {\n\t\tconst timeoutID = safeTimeout(() => {\n\t\t\tif (supportsAbortController) {\n\t\t\t\tabortController.abort();\n\t\t\t}\n\n\t\t\treject(new TimeoutError());\n\t\t}, reject, ms);\n\n\t\t/* eslint-disable promise/prefer-await-to-then */\n\t\tpromise\n\t\t\t.then(resolve)\n\t\t\t.catch(reject)\n\t\t\t.then(() => {\n\t\t\t\tclearTimeout(timeoutID);\n\t\t\t});\n\t\t/* eslint-enable promise/prefer-await-to-then */\n\t});\n\nconst normalizeRequestMethod = input => requestMethods.includes(input) ? input.toUpperCase() : input;\n\nclass Ky {\n\tconstructor(input, {\n\t\ttimeout = 10000,\n\t\thooks,\n\t\tthrowHttpErrors = true,\n\t\tsearchParams,\n\t\tjson,\n\t\t...otherOptions\n\t}) {\n\t\tthis._retryCount = 0;\n\n\t\tthis._options = {\n\t\t\tmethod: 'get',\n\t\t\tcredentials: 'same-origin', // TODO: This can be removed when the spec change is implemented in all browsers. Context: https://www.chromestatus.com/feature/4539473312350208\n\t\t\tretry: 2,\n\t\t\t...otherOptions\n\t\t};\n\n\t\tif (supportsAbortController) {\n\t\t\tthis.abortController = new AbortController();\n\t\t\tif (this._options.signal) {\n\t\t\t\tthis._options.signal.addEventListener('abort', () => {\n\t\t\t\t\tthis.abortController.abort();\n\t\t\t\t});\n\t\t\t}\n\n\t\t\tthis._options.signal = this.abortController.signal;\n\t\t}\n\n\t\tthis._options.method = normalizeRequestMethod(this._options.method);\n\t\tthis._options.prefixUrl = String(this._options.prefixUrl || '');\n\t\tthis._input = String(input || '');\n\n\t\tif (this._options.prefixUrl && this._input.startsWith('/')) {\n\t\t\tthrow new Error('`input` must not begin with a slash when using `prefixUrl`');\n\t\t}\n\n\t\tif (this._options.prefixUrl && !this._options.prefixUrl.endsWith('/')) {\n\t\t\tthis._options.prefixUrl += '/';\n\t\t}\n\n\t\tthis._input = this._options.prefixUrl + this._input;\n\n\t\tif (searchParams) {\n\t\t\tconst url = new URL(this._input, document && document.baseURI);\n\t\t\tif (typeof searchParams === 'string' || (URLSearchParams && searchParams instanceof URLSearchParams)) {\n\t\t\t\turl.search = searchParams;\n\t\t\t} else if (Object.values(searchParams).every(param => typeof param === 'number' || typeof param === 'string')) {\n\t\t\t\turl.search = new URLSearchParams(searchParams).toString();\n\t\t\t} else {\n\t\t\t\tthrow new Error('The `searchParams` option must be either a string, `URLSearchParams` instance or an object with string and number values');\n\t\t\t}\n\n\t\t\tthis._input = url.toString();\n\t\t}\n\n\t\tthis._timeout = timeout;\n\t\tthis._hooks = deepMerge({\n\t\t\tbeforeRequest: [],\n\t\t\tafterResponse: []\n\t\t}, hooks);\n\t\tthis._throwHttpErrors = throwHttpErrors;\n\n\t\tconst headers = new Headers(this._options.headers || {});\n\n\t\tif (((supportsFormData && this._options.body instanceof FormData) || this._options.body instanceof URLSearchParams) && headers.has('content-type')) {\n\t\t\tthrow new Error(`The \\`content-type\\` header cannot be used with a ${this._options.body.constructor.name} body. It will be set automatically.`);\n\t\t}\n\n\t\tif (json) {\n\t\t\tif (this._options.body) {\n\t\t\t\tthrow new Error('The `json` option cannot be used with the `body` option');\n\t\t\t}\n\n\t\t\theaders.set('content-type', 'application/json');\n\t\t\tthis._options.body = JSON.stringify(json);\n\t\t}\n\n\t\tthis._options.headers = headers;\n\n\t\tconst fn = async () => {\n\t\t\tawait delay(1);\n\t\t\tlet response = await this._fetch();\n\n\t\t\tfor (const hook of this._hooks.afterResponse) {\n\t\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\t\tconst modifiedResponse = await hook(response.clone());\n\n\t\t\t\tif (modifiedResponse instanceof Response) {\n\t\t\t\t\tresponse = modifiedResponse;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!response.ok && this._throwHttpErrors) {\n\t\t\t\tthrow new HTTPError(response);\n\t\t\t}\n\n\t\t\t// If `onDownloadProgress` is passed, it uses the stream API internally\n\t\t\t/* istanbul ignore next */\n\t\t\tif (this._options.onDownloadProgress) {\n\t\t\t\tif (typeof this._options.onDownloadProgress !== 'function') {\n\t\t\t\t\tthrow new TypeError('The `onDownloadProgress` option must be a function');\n\t\t\t\t}\n\n\t\t\t\tif (!supportsStreams) {\n\t\t\t\t\tthrow new Error('Streams are not supported in your environment. `ReadableStream` is missing.');\n\t\t\t\t}\n\n\t\t\t\treturn this._stream(response.clone(), this._options.onDownloadProgress);\n\t\t\t}\n\n\t\t\treturn response;\n\t\t};\n\n\t\tconst isRetriableMethod = retryMethods.has(this._options.method.toLowerCase());\n\t\tconst result = isRetriableMethod ? this._retry(fn) : fn();\n\n\t\tfor (const [type, mimeType] of Object.entries(responseTypes)) {\n\t\t\tresult[type] = async () => {\n\t\t\t\theaders.set('accept', mimeType);\n\t\t\t\treturn (await result).clone()[type]();\n\t\t\t};\n\t\t}\n\n\t\treturn result;\n\t}\n\n\t_calculateRetryDelay(error) {\n\t\tthis._retryCount++;\n\n\t\tif (this._retryCount < this._options.retry && !(error instanceof TimeoutError)) {\n\t\t\tif (error instanceof HTTPError) {\n\t\t\t\tif (!retryStatusCodes.has(error.response.status)) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\n\t\t\t\tconst retryAfter = error.response.headers.get('Retry-After');\n\t\t\t\tif (retryAfter && retryAfterStatusCodes.has(error.response.status)) {\n\t\t\t\t\tlet after = Number(retryAfter);\n\t\t\t\t\tif (Number.isNaN(after)) {\n\t\t\t\t\t\tafter = Date.parse(retryAfter) - Date.now();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tafter *= 1000;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn after;\n\t\t\t\t}\n\n\t\t\t\tif (error.response.status === 413) {\n\t\t\t\t\treturn 0;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tconst BACKOFF_FACTOR = 0.3;\n\t\t\treturn BACKOFF_FACTOR * (2 ** (this._retryCount - 1)) * 1000;\n\t\t}\n\n\t\treturn 0;\n\t}\n\n\tasync _retry(fn) {\n\t\ttry {\n\t\t\treturn await fn();\n\t\t} catch (error) {\n\t\t\tconst ms = this._calculateRetryDelay(error);\n\t\t\tif (ms !== 0 && this._retryCount > 0) {\n\t\t\t\tawait delay(ms);\n\t\t\t\treturn this._retry(fn);\n\t\t\t}\n\n\t\t\tif (this._throwHttpErrors) {\n\t\t\t\tthrow error;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync _fetch() {\n\t\tfor (const hook of this._hooks.beforeRequest) {\n\t\t\t// eslint-disable-next-line no-await-in-loop\n\t\t\tawait hook(this._options);\n\t\t}\n\n\t\tif (this._timeout === false) {\n\t\t\treturn fetch(this._input, this._options);\n\t\t}\n\n\t\treturn timeout(fetch(this._input, this._options), this._timeout, this.abortController);\n\t}\n\n\t/* istanbul ignore next */\n\t_stream(response, onDownloadProgress) {\n\t\tconst totalBytes = Number(response.headers.get('content-length')) || 0;\n\t\tlet transferredBytes = 0;\n\n\t\treturn new Response(\n\t\t\tnew ReadableStream({\n\t\t\t\tstart(controller) {\n\t\t\t\t\tconst reader = response.body.getReader();\n\n\t\t\t\t\tif (onDownloadProgress) {\n\t\t\t\t\t\tonDownloadProgress({percent: 0, transferredBytes: 0, totalBytes}, new Uint8Array());\n\t\t\t\t\t}\n\n\t\t\t\t\tasync function read() {\n\t\t\t\t\t\tconst {done, value} = await reader.read();\n\t\t\t\t\t\tif (done) {\n\t\t\t\t\t\t\tcontroller.close();\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (onDownloadProgress) {\n\t\t\t\t\t\t\ttransferredBytes += value.byteLength;\n\t\t\t\t\t\t\tconst percent = totalBytes === 0 ? 0 : transferredBytes / totalBytes;\n\t\t\t\t\t\t\tonDownloadProgress({percent, transferredBytes, totalBytes}, value);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tcontroller.enqueue(value);\n\t\t\t\t\t\tread();\n\t\t\t\t\t}\n\n\t\t\t\t\tread();\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n}\n\nconst validateAndMerge = (...sources) => {\n\tfor (const source of sources) {\n\t\tif ((!isObject(source) || Array.isArray(source)) && typeof source !== 'undefined') {\n\t\t\tthrow new TypeError('The `options` argument must be an object');\n\t\t}\n\t}\n\n\treturn deepMerge({}, ...sources);\n};\n\nconst createInstance = defaults => {\n\tconst ky = (input, options) => new Ky(input, validateAndMerge(defaults, options));\n\n\tfor (const method of requestMethods) {\n\t\tky[method] = (input, options) => new Ky(input, validateAndMerge(defaults, options, {method}));\n\t}\n\n\tky.create = newDefaults => createInstance(validateAndMerge(newDefaults));\n\tky.extend = newDefaults => createInstance(validateAndMerge(defaults, newDefaults));\n\n\treturn ky;\n};\n\nexport default createInstance();\n\nexport {\n\tHTTPError,\n\tTimeoutError\n};\n"]}]}