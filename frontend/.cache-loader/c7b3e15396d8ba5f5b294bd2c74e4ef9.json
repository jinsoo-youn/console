{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/graphs/gauge.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/graphs/gauge.tsx","mtime":1615298458730},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { ChartDonutThreshold, ChartDonutUtilization, ChartThemeColor, } from '@patternfly/react-charts';\nimport classNames from 'classnames';\nimport { PrometheusGraph, PrometheusGraphLink } from './prometheus-graph';\nimport { usePrometheusPoll } from './prometheus-poll-hook';\nimport { PrometheusEndpoint } from './helpers';\nimport { useRefWidth, humanizePercentage } from '../utils';\nimport { getInstantVectorStats } from './utils';\nconst DEFAULT_THRESHOLDS = [{ value: 67 }, { value: 92 }];\nexport const GaugeChart = ({ data, error, humanize = humanizePercentage, invert = false, loading, query = '', remainderLabel = 'available', themeColor = ChartThemeColor.green, thresholds = DEFAULT_THRESHOLDS, title, usedLabel = 'used', \n// Don't sort, Uses previously declared props\nlabel = data ? humanize(data.y).string : 'No Data', secondaryTitle = usedLabel, className, }) => {\n    const [ref, width] = useRefWidth();\n    const ready = !error && !loading;\n    const status = loading ? 'Loading' : error;\n    const labels = ({ datum: { x, y } }) => (x ? `${x} ${usedLabel}` : `${y} ${remainderLabel}`);\n    return (React.createElement(PrometheusGraph, { className: classNames('graph-wrapper--title-center graph-wrapper--gauge', className), ref: ref, title: title },\n        React.createElement(PrometheusGraphLink, { query: query },\n            React.createElement(ChartDonutThreshold, { data: thresholds, height: width, padding: 0, width: width, y: \"value\" },\n                React.createElement(ChartDonutUtilization, { labels: labels, data: ready ? data : { y: 0 }, invert: invert, padding: 0, subTitle: ready ? secondaryTitle : '', themeColor: themeColor, thresholds: thresholds, title: status || label })))));\n};\nexport const Gauge = ({ humanize = humanizePercentage, invert, namespace, percent = 0, query, remainderLabel, secondaryTitle, thresholds, title, usedLabel, }) => {\n    const [response, error, loading] = usePrometheusPoll({\n        endpoint: PrometheusEndpoint.QUERY,\n        namespace,\n        query,\n    });\n    const [data] = response\n        ? getInstantVectorStats(response, null, humanize).map(({ label, y }) => ({ x: label, y }))\n        : [{ x: humanize(percent).string, y: percent }];\n    return (React.createElement(GaugeChart, { data: data, error: !!error && 'No Data', invert: invert, label: data.x, loading: loading, query: query, remainderLabel: remainderLabel, secondaryTitle: secondaryTitle, thresholds: thresholds, title: title, usedLabel: usedLabel }));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/graphs/gauge.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/graphs/gauge.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  ChartDonutThreshold,\n  ChartDonutUtilization,\n  ChartThemeColor,\n} from '@patternfly/react-charts';\nimport classNames from 'classnames';\n\nimport { PrometheusGraph, PrometheusGraphLink } from './prometheus-graph';\nimport { usePrometheusPoll } from './prometheus-poll-hook';\nimport { PrometheusEndpoint } from './helpers';\nimport { useRefWidth, humanizePercentage, Humanize } from '../utils';\nimport { getInstantVectorStats } from './utils';\nimport { DataPoint } from '.';\n\nconst DEFAULT_THRESHOLDS = [{ value: 67 }, { value: 92 }];\n\nexport const GaugeChart: React.FC<GaugeChartProps> = ({\n  data,\n  error,\n  humanize = humanizePercentage,\n  invert = false,\n  loading,\n  query = '',\n  remainderLabel = 'available',\n  themeColor = ChartThemeColor.green,\n  thresholds = DEFAULT_THRESHOLDS,\n  title,\n  usedLabel = 'used',\n  // Don't sort, Uses previously declared props\n  label = data ? humanize(data.y).string : 'No Data',\n  secondaryTitle = usedLabel,\n  className,\n}) => {\n  const [ref, width] = useRefWidth();\n  const ready = !error && !loading;\n  const status = loading ? 'Loading' : error;\n  const labels = ({ datum: { x, y } }) => (x ? `${x} ${usedLabel}` : `${y} ${remainderLabel}`);\n  return (\n    <PrometheusGraph\n      className={classNames('graph-wrapper--title-center graph-wrapper--gauge', className)}\n      ref={ref}\n      title={title}\n    >\n      <PrometheusGraphLink query={query}>\n        <ChartDonutThreshold\n          data={thresholds}\n          height={width} // Changes the scale of the graph, not actual width and height\n          padding={0}\n          width={width}\n          y=\"value\"\n        >\n          <ChartDonutUtilization\n            labels={labels}\n            data={ready ? data : { y: 0 }}\n            invert={invert}\n            padding={0}\n            subTitle={ready ? secondaryTitle : ''}\n            themeColor={themeColor}\n            thresholds={thresholds}\n            title={status || label}\n          />\n        </ChartDonutThreshold>\n      </PrometheusGraphLink>\n    </PrometheusGraph>\n  );\n};\n\nexport const Gauge: React.FC<GaugeProps> = ({\n  humanize = humanizePercentage,\n  invert,\n  namespace,\n  percent = 0,\n  query,\n  remainderLabel,\n  secondaryTitle,\n  thresholds,\n  title,\n  usedLabel,\n}) => {\n  const [response, error, loading] = usePrometheusPoll({\n    endpoint: PrometheusEndpoint.QUERY,\n    namespace,\n    query,\n  });\n\n  const [data] = response\n    ? getInstantVectorStats(response, null, humanize).map(({ label, y }) => ({ x: label, y }))\n    : [{ x: humanize(percent).string, y: percent }];\n  return (\n    <GaugeChart\n      data={data}\n      error={!!error && 'No Data'}\n      invert={invert}\n      label={data.x}\n      loading={loading}\n      query={query}\n      remainderLabel={remainderLabel}\n      secondaryTitle={secondaryTitle}\n      thresholds={thresholds}\n      title={title}\n      usedLabel={usedLabel}\n    />\n  );\n};\n\ntype GaugeChartProps = {\n  data: DataPoint;\n  error?: string;\n  humanize?: Humanize;\n  invert?: boolean;\n  isLoaded?: boolean;\n  label: string;\n  loading?: boolean;\n  query?: string;\n  remainderLabel?: string;\n  secondaryTitle?: string;\n  themeColor?: string;\n  thresholds?: {\n    value: number;\n    color?: string;\n  }[];\n  title?: string;\n  usedLabel?: string;\n  className?: string;\n};\n\ntype GaugeProps = {\n  humanize?: Humanize;\n  invert?: boolean;\n  namespace?: string;\n  percent?: number;\n  query?: string;\n  remainderLabel?: string;\n  secondaryTitle?: string;\n  thresholds?: {\n    value: number;\n    color?: string;\n  }[];\n  title?: string;\n  usedLabel?: string;\n};\n"]}]}