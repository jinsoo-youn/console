{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/EventSource.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/EventSource.tsx","mtime":1615298458640},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { Formik } from 'formik';\nimport { connect } from 'react-redux';\nimport { history } from '@console/internal/components/utils';\nimport { getActiveApplication } from '@console/internal/reducers/ui';\nimport { ALL_APPLICATIONS_KEY } from '@console/shared';\nimport { modelFor, referenceFor, k8sCreate } from '@console/internal/module/k8s';\nimport { sanitizeApplicationValue } from '@console/dev-console/src/utils/application-utils';\nimport { eventSourceValidationSchema } from './eventSource-validation-utils';\nimport EventSourceForm from './EventSourceForm';\nimport { getEventSourceResource } from '../../utils/create-eventsources-utils';\nconst EventSource = ({ namespace, eventSourceStatus, activeApplication, contextSource, }) => {\n    const serviceName = (contextSource === null || contextSource === void 0 ? void 0 : contextSource.split('/').pop()) || '';\n    const initialValues = {\n        project: {\n            name: namespace || '',\n            displayName: '',\n            description: '',\n        },\n        application: {\n            initial: sanitizeApplicationValue(activeApplication),\n            name: sanitizeApplicationValue(activeApplication),\n            selectedKey: activeApplication,\n        },\n        name: '',\n        apiVersion: '',\n        sink: {\n            knativeService: serviceName,\n        },\n        limits: {\n            cpu: {\n                request: '',\n                requestUnit: 'm',\n                defaultRequestUnit: 'm',\n                limit: '',\n                limitUnit: 'm',\n                defaultLimitUnit: 'm',\n            },\n            memory: {\n                request: '',\n                requestUnit: 'Mi',\n                defaultRequestUnit: 'Mi',\n                limit: '',\n                limitUnit: 'Mi',\n                defaultLimitUnit: 'Mi',\n            },\n        },\n        type: '',\n        data: {},\n        yamlData: '',\n    };\n    const createResources = (rawFormData) => {\n        const knEventSourceResource = getEventSourceResource(rawFormData);\n        return k8sCreate(modelFor(referenceFor(knEventSourceResource)), knEventSourceResource);\n    };\n    const handleSubmit = (values, actions) => {\n        const { project: { name: projectName }, } = values;\n        const eventSrcRequest = createResources(values);\n        eventSrcRequest\n            .then(() => {\n            actions.setSubmitting(false);\n            history.push(`/topology/ns/${projectName}`);\n        })\n            .catch((err) => {\n            actions.setSubmitting(false);\n            actions.setStatus({ submitError: err.message });\n        });\n    };\n    return (React.createElement(Formik, { initialValues: initialValues, onSubmit: handleSubmit, onReset: history.goBack, validateOnBlur: false, validateOnChange: false, validationSchema: eventSourceValidationSchema }, (props) => (React.createElement(EventSourceForm, Object.assign({}, props, { namespace: namespace, eventSourceStatus: eventSourceStatus })))));\n};\nconst mapStateToProps = (state, ownProps) => {\n    const activeApplication = ownProps.selectedApplication || getActiveApplication(state);\n    return {\n        activeApplication: activeApplication !== ALL_APPLICATIONS_KEY ? activeApplication : '',\n    };\n};\nexport default connect(mapStateToProps)(EventSource);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/EventSource.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/EventSource.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Formik } from 'formik';\nimport { connect } from 'react-redux';\nimport { history } from '@console/internal/components/utils';\nimport { getActiveApplication } from '@console/internal/reducers/ui';\nimport { RootState } from '@console/internal/redux';\nimport { ALL_APPLICATIONS_KEY } from '@console/shared';\nimport { K8sResourceKind, modelFor, referenceFor, k8sCreate } from '@console/internal/module/k8s';\nimport { sanitizeApplicationValue } from '@console/dev-console/src/utils/application-utils';\nimport { eventSourceValidationSchema } from './eventSource-validation-utils';\nimport EventSourceForm from './EventSourceForm';\nimport { getEventSourceResource } from '../../utils/create-eventsources-utils';\nimport { EventSourceFormData, EventSourceListData } from './import-types';\n\ninterface EventSourceProps {\n  namespace: string;\n  eventSourceStatus: EventSourceListData | null;\n  contextSource?: string;\n  selectedApplication?: string;\n}\n\ninterface StateProps {\n  activeApplication: string;\n}\n\ntype Props = EventSourceProps & StateProps;\n\nconst EventSource: React.FC<Props> = ({\n  namespace,\n  eventSourceStatus,\n  activeApplication,\n  contextSource,\n}) => {\n  const serviceName = contextSource?.split('/').pop() || '';\n  const initialValues: EventSourceFormData = {\n    project: {\n      name: namespace || '',\n      displayName: '',\n      description: '',\n    },\n    application: {\n      initial: sanitizeApplicationValue(activeApplication),\n      name: sanitizeApplicationValue(activeApplication),\n      selectedKey: activeApplication,\n    },\n    name: '',\n    apiVersion: '',\n    sink: {\n      knativeService: serviceName,\n    },\n    limits: {\n      cpu: {\n        request: '',\n        requestUnit: 'm',\n        defaultRequestUnit: 'm',\n        limit: '',\n        limitUnit: 'm',\n        defaultLimitUnit: 'm',\n      },\n      memory: {\n        request: '',\n        requestUnit: 'Mi',\n        defaultRequestUnit: 'Mi',\n        limit: '',\n        limitUnit: 'Mi',\n        defaultLimitUnit: 'Mi',\n      },\n    },\n    type: '',\n    data: {},\n    yamlData: '',\n  };\n\n  const createResources = (rawFormData: any): Promise<K8sResourceKind> => {\n    const knEventSourceResource = getEventSourceResource(rawFormData);\n    return k8sCreate(modelFor(referenceFor(knEventSourceResource)), knEventSourceResource);\n  };\n\n  const handleSubmit = (values, actions) => {\n    const {\n      project: { name: projectName },\n    } = values;\n    const eventSrcRequest: Promise<K8sResourceKind> = createResources(values);\n    eventSrcRequest\n      .then(() => {\n        actions.setSubmitting(false);\n        history.push(`/topology/ns/${projectName}`);\n      })\n      .catch((err) => {\n        actions.setSubmitting(false);\n        actions.setStatus({ submitError: err.message });\n      });\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      onReset={history.goBack}\n      validateOnBlur={false}\n      validateOnChange={false}\n      validationSchema={eventSourceValidationSchema}\n    >\n      {(props) => (\n        <EventSourceForm {...props} namespace={namespace} eventSourceStatus={eventSourceStatus} />\n      )}\n    </Formik>\n  );\n};\n\nconst mapStateToProps = (state: RootState, ownProps: EventSourceProps): StateProps => {\n  const activeApplication = ownProps.selectedApplication || getActiveApplication(state);\n  return {\n    activeApplication: activeApplication !== ALL_APPLICATIONS_KEY ? activeApplication : '',\n  };\n};\n\nexport default connect(mapStateToProps)(EventSource);\n"]}]}