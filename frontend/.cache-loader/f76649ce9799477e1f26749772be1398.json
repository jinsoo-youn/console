{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/volume-type.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/volume-type.tsx","mtime":1616735742490},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { getVolumeLocation, getVolumeType } from '../../module/k8s/pods';\nimport { ResourceLink } from './resource-link';\nexport const VolumeType = ({ volume, namespace }) => {\n    if (volume) {\n        if (volume.secret) {\n            return React.createElement(ResourceLink, { kind: \"Secret\", name: volume.secret.secretName, namespace: namespace });\n        }\n        if (volume.configMap) {\n            return React.createElement(ResourceLink, { kind: \"ConfigMap\", name: volume.configMap.name, namespace: namespace });\n        }\n        if (volume.persistentVolumeClaim) {\n            return (React.createElement(ResourceLink, { kind: \"PersistentVolumeClaim\", name: volume.persistentVolumeClaim.claimName, namespace: namespace }));\n        }\n    }\n    const type = getVolumeType(volume);\n    const loc = _.trim(getVolumeLocation(volume));\n    return type ? (React.createElement(React.Fragment, null,\n        type.label,\n        loc && (React.createElement(React.Fragment, null,\n            ' ',\n            \"(\",\n            React.createElement(\"span\", { className: \"co-break-word co-select-to-copy\" }, loc),\n            \")\")))) : null;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/volume-type.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/volume-type.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,CAAC,MAAM,WAAW,CAAC;AAG/B,OAAO,EAAE,iBAAiB,EAAE,aAAa,EAAE,MAAM,uBAAuB,CAAC;AACzE,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAE/C,MAAM,CAAC,MAAM,UAAU,GAA8B,CAAC,EAAE,MAAM,EAAE,SAAS,EAAE,EAAE,EAAE;IAC7E,IAAI,MAAM,EAAE;QACV,IAAI,MAAM,CAAC,MAAM,EAAE;YACjB,OAAO,oBAAC,YAAY,IAAC,IAAI,EAAC,QAAQ,EAAC,IAAI,EAAE,MAAM,CAAC,MAAM,CAAC,UAAU,EAAE,SAAS,EAAE,SAAS,GAAI,CAAC;SAC7F;QAED,IAAI,MAAM,CAAC,SAAS,EAAE;YACpB,OAAO,oBAAC,YAAY,IAAC,IAAI,EAAC,WAAW,EAAC,IAAI,EAAE,MAAM,CAAC,SAAS,CAAC,IAAI,EAAE,SAAS,EAAE,SAAS,GAAI,CAAC;SAC7F;QAED,IAAI,MAAM,CAAC,qBAAqB,EAAE;YAChC,OAAO,CACL,oBAAC,YAAY,IACX,IAAI,EAAC,uBAAuB,EAC5B,IAAI,EAAE,MAAM,CAAC,qBAAqB,CAAC,SAAS,EAC5C,SAAS,EAAE,SAAS,GACpB,CACH,CAAC;SACH;KACF;IAED,MAAM,IAAI,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC;IACnC,MAAM,GAAG,GAAG,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC;IAC9C,OAAO,IAAI,CAAC,CAAC,CAAC,CACZ;QACG,IAAI,CAAC,KAAK;QACV,GAAG,IAAI,CACN;YACG,GAAG;;YACH,8BAAM,SAAS,EAAC,iCAAiC,IAAE,GAAG,CAAQ;gBAC9D,CACJ,CACA,CACJ,CAAC,CAAC,CAAC,IAAI,CAAC;AACX,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\n\nimport { Volume } from '../../module/k8s';\nimport { getVolumeLocation, getVolumeType } from '../../module/k8s/pods';\nimport { ResourceLink } from './resource-link';\n\nexport const VolumeType: React.FC<VolumeTypeProps> = ({ volume, namespace }) => {\n  if (volume) {\n    if (volume.secret) {\n      return <ResourceLink kind=\"Secret\" name={volume.secret.secretName} namespace={namespace} />;\n    }\n\n    if (volume.configMap) {\n      return <ResourceLink kind=\"ConfigMap\" name={volume.configMap.name} namespace={namespace} />;\n    }\n\n    if (volume.persistentVolumeClaim) {\n      return (\n        <ResourceLink\n          kind=\"PersistentVolumeClaim\"\n          name={volume.persistentVolumeClaim.claimName}\n          namespace={namespace}\n        />\n      );\n    }\n  }\n\n  const type = getVolumeType(volume);\n  const loc = _.trim(getVolumeLocation(volume));\n  return type ? (\n    <>\n      {type.label}\n      {loc && (\n        <>\n          {' '}\n          (<span className=\"co-break-word co-select-to-copy\">{loc}</span>)\n        </>\n      )}\n    </>\n  ) : null;\n};\n\nexport type VolumeTypeProps = {\n  volume: Volume;\n  namespace: string;\n};\n"]}]}