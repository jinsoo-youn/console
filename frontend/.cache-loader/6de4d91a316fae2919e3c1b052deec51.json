{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/componentFactory.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/componentFactory.ts","mtime":1615298458630},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { ModelKind, withPanZoom, withDragNode, withTargetDrag, withSelection, withDndDrop, withRemoveConnector, } from '@console/topology';\nimport { Application } from './groups';\nimport { WorkloadNode } from './nodes';\nimport GraphComponent from './GraphComponent';\nimport { workloadContextMenu, groupContextMenu, graphContextMenu } from './nodeContextMenu';\nimport { graphDropTargetSpec, nodeDragSourceSpec, nodeDropTargetSpec, applicationGroupDropTargetSpec, edgeDragSourceSpec, removeConnectorCallback, MOVE_CONNECTOR_DROP_TYPE, withContextMenu, } from './componentUtils';\nimport './ContextMenu.scss';\nimport { TYPE_WORKLOAD, TYPE_CONNECTS_TO, TYPE_APPLICATION_GROUP, TYPE_AGGREGATE_EDGE, TYPE_SERVICE_BINDING, TYPE_TRAFFIC_CONNECTOR, } from './const';\nimport { createConnection } from './createConnection';\nimport { withEditReviewAccess } from './withEditReviewAccess';\nimport { AggregateEdge, ConnectsTo, ServiceBinding, TrafficConnector } from './edges';\nimport { AbstractSBRComponentFactory } from './AbstractSBRComponentFactory';\nclass ComponentFactory extends AbstractSBRComponentFactory {\n    constructor() {\n        super(...arguments);\n        this.getFactory = () => {\n            return (kind, type) => {\n                switch (type) {\n                    case TYPE_APPLICATION_GROUP:\n                        return withDndDrop(applicationGroupDropTargetSpec)(withSelection(false, true)(withContextMenu(groupContextMenu)(Application)));\n                    case TYPE_WORKLOAD:\n                        return this.withAddResourceConnector()(withDndDrop(nodeDropTargetSpec)(withEditReviewAccess('patch')(withDragNode(nodeDragSourceSpec(type))(withSelection(false, true)(withContextMenu(workloadContextMenu)(WorkloadNode))))));\n                    case TYPE_CONNECTS_TO:\n                        return withTargetDrag(edgeDragSourceSpec(MOVE_CONNECTOR_DROP_TYPE, this.serviceBinding, createConnection))(withRemoveConnector(removeConnectorCallback)(ConnectsTo));\n                    case TYPE_SERVICE_BINDING:\n                        return withRemoveConnector(removeConnectorCallback)(ServiceBinding);\n                    case TYPE_AGGREGATE_EDGE:\n                        return AggregateEdge;\n                    case TYPE_TRAFFIC_CONNECTOR:\n                        return TrafficConnector;\n                    default:\n                        switch (kind) {\n                            case ModelKind.graph:\n                                return withDndDrop(graphDropTargetSpec)(withPanZoom()(withSelection(false, true)(withContextMenu(graphContextMenu)(GraphComponent))));\n                            default:\n                                return undefined;\n                        }\n                }\n            };\n        };\n    }\n}\nexport { ComponentFactory };\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/componentFactory.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/componentFactory.ts"],"names":[],"mappings":"AACA,OAAO,EAEL,SAAS,EAET,WAAW,EACX,YAAY,EACZ,cAAc,EACd,aAAa,EACb,WAAW,EACX,mBAAmB,GACpB,MAAM,mBAAmB,CAAC;AAC3B,OAAO,EAAE,WAAW,EAAE,MAAM,UAAU,CAAC;AACvC,OAAO,EAAE,YAAY,EAAE,MAAM,SAAS,CAAC;AACvC,OAAO,cAAc,MAAM,kBAAkB,CAAC;AAC9C,OAAO,EAAE,mBAAmB,EAAE,gBAAgB,EAAE,gBAAgB,EAAE,MAAM,mBAAmB,CAAC;AAC5F,OAAO,EAEL,mBAAmB,EACnB,kBAAkB,EAClB,kBAAkB,EAClB,8BAA8B,EAC9B,kBAAkB,EAClB,uBAAuB,EACvB,wBAAwB,EACxB,eAAe,GAChB,MAAM,kBAAkB,CAAC;AAC1B,OAAO,oBAAoB,CAAC;AAC5B,OAAO,EACL,aAAa,EACb,gBAAgB,EAChB,sBAAsB,EACtB,mBAAmB,EACnB,oBAAoB,EACpB,sBAAsB,GACvB,MAAM,SAAS,CAAC;AACjB,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AACtD,OAAO,EAAE,oBAAoB,EAAE,MAAM,wBAAwB,CAAC;AAC9D,OAAO,EAAE,aAAa,EAAE,UAAU,EAAE,cAAc,EAAE,gBAAgB,EAAE,MAAM,SAAS,CAAC;AACtF,OAAO,EAAE,2BAA2B,EAAE,MAAM,+BAA+B,CAAC;AAE5E,MAAM,gBAAiB,SAAQ,2BAA2B;IAA1D;;QACE,eAAU,GAAG,GAA6B,EAAE;YAC1C,OAAO,CAAC,IAAI,EAAE,IAAI,EAA8D,EAAE;gBAChF,QAAQ,IAAI,EAAE;oBACZ,KAAK,sBAAsB;wBACzB,OAAO,WAAW,CAAC,8BAA8B,CAAC,CAChD,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC,WAAW,CAAC,CAAC,CAC3E,CAAC;oBACJ,KAAK,aAAa;wBAChB,OAAO,IAAI,CAAC,wBAAwB,EAAE,CACpC,WAAW,CAKT,kBAAkB,CAAC,CACnB,oBAAoB,CAAC,OAAO,CAAC,CAC3B,YAAY,CAAC,kBAAkB,CAAC,IAAI,CAAC,CAAC,CACpC,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,eAAe,CAAC,mBAAmB,CAAC,CAAC,YAAY,CAAC,CAAC,CAC/E,CACF,CACF,CACF,CAAC;oBACJ,KAAK,gBAAgB;wBACnB,OAAO,cAAc,CACnB,kBAAkB,CAAC,wBAAwB,EAAE,IAAI,CAAC,cAAc,EAAE,gBAAgB,CAAC,CACpF,CAAC,mBAAmB,CAAC,uBAAuB,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;oBAC9D,KAAK,oBAAoB;wBACvB,OAAO,mBAAmB,CAAC,uBAAuB,CAAC,CAAC,cAAc,CAAC,CAAC;oBACtE,KAAK,mBAAmB;wBACtB,OAAO,aAAa,CAAC;oBACvB,KAAK,sBAAsB;wBACzB,OAAO,gBAAgB,CAAC;oBAC1B;wBACE,QAAQ,IAAI,EAAE;4BACZ,KAAK,SAAS,CAAC,KAAK;gCAClB,OAAO,WAAW,CAAC,mBAAmB,CAAC,CACrC,WAAW,EAAE,CACX,aAAa,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,eAAe,CAAC,gBAAgB,CAAC,CAAC,cAAc,CAAC,CAAC,CAC9E,CACF,CAAC;4BACJ;gCACE,OAAO,SAAS,CAAC;yBACpB;iBACJ;YACH,CAAC,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC;CAAA;AAED,OAAO,EAAE,gBAAgB,EAAE,CAAC","sourcesContent":["import * as React from 'react';\nimport {\n  GraphElement,\n  ModelKind,\n  ComponentFactory as TopologyComponentFactory,\n  withPanZoom,\n  withDragNode,\n  withTargetDrag,\n  withSelection,\n  withDndDrop,\n  withRemoveConnector,\n} from '@console/topology';\nimport { Application } from './groups';\nimport { WorkloadNode } from './nodes';\nimport GraphComponent from './GraphComponent';\nimport { workloadContextMenu, groupContextMenu, graphContextMenu } from './nodeContextMenu';\nimport {\n  NodeComponentProps,\n  graphDropTargetSpec,\n  nodeDragSourceSpec,\n  nodeDropTargetSpec,\n  applicationGroupDropTargetSpec,\n  edgeDragSourceSpec,\n  removeConnectorCallback,\n  MOVE_CONNECTOR_DROP_TYPE,\n  withContextMenu,\n} from './componentUtils';\nimport './ContextMenu.scss';\nimport {\n  TYPE_WORKLOAD,\n  TYPE_CONNECTS_TO,\n  TYPE_APPLICATION_GROUP,\n  TYPE_AGGREGATE_EDGE,\n  TYPE_SERVICE_BINDING,\n  TYPE_TRAFFIC_CONNECTOR,\n} from './const';\nimport { createConnection } from './createConnection';\nimport { withEditReviewAccess } from './withEditReviewAccess';\nimport { AggregateEdge, ConnectsTo, ServiceBinding, TrafficConnector } from './edges';\nimport { AbstractSBRComponentFactory } from './AbstractSBRComponentFactory';\n\nclass ComponentFactory extends AbstractSBRComponentFactory {\n  getFactory = (): TopologyComponentFactory => {\n    return (kind, type): React.ComponentType<{ element: GraphElement }> | undefined => {\n      switch (type) {\n        case TYPE_APPLICATION_GROUP:\n          return withDndDrop(applicationGroupDropTargetSpec)(\n            withSelection(false, true)(withContextMenu(groupContextMenu)(Application)),\n          );\n        case TYPE_WORKLOAD:\n          return this.withAddResourceConnector()(\n            withDndDrop<\n              any,\n              any,\n              { droppable?: boolean; hover?: boolean; canDrop?: boolean },\n              NodeComponentProps\n            >(nodeDropTargetSpec)(\n              withEditReviewAccess('patch')(\n                withDragNode(nodeDragSourceSpec(type))(\n                  withSelection(false, true)(withContextMenu(workloadContextMenu)(WorkloadNode)),\n                ),\n              ),\n            ),\n          );\n        case TYPE_CONNECTS_TO:\n          return withTargetDrag(\n            edgeDragSourceSpec(MOVE_CONNECTOR_DROP_TYPE, this.serviceBinding, createConnection),\n          )(withRemoveConnector(removeConnectorCallback)(ConnectsTo));\n        case TYPE_SERVICE_BINDING:\n          return withRemoveConnector(removeConnectorCallback)(ServiceBinding);\n        case TYPE_AGGREGATE_EDGE:\n          return AggregateEdge;\n        case TYPE_TRAFFIC_CONNECTOR:\n          return TrafficConnector;\n        default:\n          switch (kind) {\n            case ModelKind.graph:\n              return withDndDrop(graphDropTargetSpec)(\n                withPanZoom()(\n                  withSelection(false, true)(withContextMenu(graphContextMenu)(GraphComponent)),\n                ),\n              );\n            default:\n              return undefined;\n          }\n      }\n    };\n  };\n}\n\nexport { ComponentFactory };\n"]}]}