{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/components/ElementWrapper.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/components/ElementWrapper.tsx","mtime":1615298458710},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { observer } from 'mobx-react';\nimport ElementContext from '../utils/ElementContext';\nimport { isGraph, isEdge, isNode } from '../types';\nimport { ATTR_DATA_ID, ATTR_DATA_KIND, ATTR_DATA_TYPE } from '../const';\n// in a separate component so that changes to behaviors do not re-render children\nconst ElementComponent = observer(({ element }) => {\n    const kind = element.getKind();\n    const type = element.getType();\n    const Component = React.useMemo(() => {\n        return element.getController().getComponent(kind, type);\n    }, [element, kind, type]);\n    return (React.createElement(ElementContext.Provider, { value: element },\n        React.createElement(Component, Object.assign({}, element.getState(), { element: element }))));\n});\nconst ElementChildren = observer(({ element }) => {\n    return (React.createElement(React.Fragment, null,\n        element\n            .getChildren()\n            .filter(isEdge)\n            .map((e) => (React.createElement(ElementWrapper, { key: e.getId(), element: e }))),\n        element\n            .getChildren()\n            .filter(isNode)\n            .map((e) => (React.createElement(ElementWrapper, { key: e.getId(), element: e })))));\n});\nconst ElementWrapper = observer(({ element }) => {\n    if (!element.isVisible()) {\n        return null;\n    }\n    if (isEdge(element)) {\n        const source = element.getSourceAnchorNode();\n        const target = element.getTargetAnchorNode();\n        if ((source && !source.isVisible()) || (target && !target.isVisible())) {\n            return null;\n        }\n    }\n    const commonAttrs = {\n        [ATTR_DATA_ID]: element.getId(),\n        [ATTR_DATA_KIND]: element.getKind(),\n        [ATTR_DATA_TYPE]: element.getType(),\n    };\n    if (isGraph(element)) {\n        return (React.createElement(\"g\", Object.assign({}, commonAttrs),\n            React.createElement(ElementComponent, { element: element })));\n    }\n    if (isNode(element) && (!element.isGroup() || element.isCollapsed())) {\n        const { x, y } = element.getPosition();\n        return (React.createElement(\"g\", Object.assign({}, commonAttrs, { transform: `translate(${x}, ${y})` }),\n            React.createElement(ElementComponent, { element: element }),\n            React.createElement(ElementChildren, { element: element })));\n    }\n    return (React.createElement(\"g\", Object.assign({}, commonAttrs),\n        React.createElement(ElementComponent, { element: element }),\n        React.createElement(ElementChildren, { element: element })));\n});\nexport default ElementWrapper;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/components/ElementWrapper.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/components/ElementWrapper.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AACtC,OAAO,cAAc,MAAM,yBAAyB,CAAC;AACrD,OAAO,EAAgB,OAAO,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,UAAU,CAAC;AACjE,OAAO,EAAE,YAAY,EAAE,cAAc,EAAE,cAAc,EAAE,MAAM,UAAU,CAAC;AAMxE,iFAAiF;AACjF,MAAM,gBAAgB,GAAkC,QAAQ,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE;IAC/E,MAAM,IAAI,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;IAC/B,MAAM,IAAI,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;IAE/B,MAAM,SAAS,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE;QACnC,OAAO,OAAO,CAAC,aAAa,EAAE,CAAC,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;IAC1D,CAAC,EAAE,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;IAE1B,OAAO,CACL,oBAAC,cAAc,CAAC,QAAQ,IAAC,KAAK,EAAE,OAAO;QACrC,oBAAC,SAAS,oBAAK,OAAO,CAAC,QAAQ,EAAE,IAAE,OAAO,EAAE,OAAO,IAAI,CAC/B,CAC3B,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,MAAM,eAAe,GAAkC,QAAQ,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE;IAC9E,OAAO,CACL;QACG,OAAO;aACL,WAAW,EAAE;aACb,MAAM,CAAC,MAAM,CAAC;aACd,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CACV,oBAAC,cAAc,IAAC,GAAG,EAAE,CAAC,CAAC,KAAK,EAAE,EAAE,OAAO,EAAE,CAAC,GAAI,CAC/C,CAAC;QACH,OAAO;aACL,WAAW,EAAE;aACb,MAAM,CAAC,MAAM,CAAC;aACd,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CACV,oBAAC,cAAc,IAAC,GAAG,EAAE,CAAC,CAAC,KAAK,EAAE,EAAE,OAAO,EAAE,CAAC,GAAI,CAC/C,CAAC,CACH,CACJ,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,MAAM,cAAc,GAAkC,QAAQ,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE;IAC7E,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE;QACxB,OAAO,IAAI,CAAC;KACb;IAED,IAAI,MAAM,CAAC,OAAO,CAAC,EAAE;QACnB,MAAM,MAAM,GAAG,OAAO,CAAC,mBAAmB,EAAE,CAAC;QAC7C,MAAM,MAAM,GAAG,OAAO,CAAC,mBAAmB,EAAE,CAAC;QAC7C,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC,EAAE;YACtE,OAAO,IAAI,CAAC;SACb;KACF;IACD,MAAM,WAAW,GAAG;QAClB,CAAC,YAAY,CAAC,EAAE,OAAO,CAAC,KAAK,EAAE;QAC/B,CAAC,cAAc,CAAC,EAAE,OAAO,CAAC,OAAO,EAAE;QACnC,CAAC,cAAc,CAAC,EAAE,OAAO,CAAC,OAAO,EAAE;KACpC,CAAC;IACF,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE;QACpB,OAAO,CACL,2CAAO,WAAW;YAChB,oBAAC,gBAAgB,IAAC,OAAO,EAAE,OAAO,GAAI,CACpC,CACL,CAAC;KACH;IACD,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,IAAI,OAAO,CAAC,WAAW,EAAE,CAAC,EAAE;QACpE,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;QACvC,OAAO,CACL,2CAAO,WAAW,IAAE,SAAS,EAAE,aAAa,CAAC,KAAK,CAAC,GAAG;YACpD,oBAAC,gBAAgB,IAAC,OAAO,EAAE,OAAO,GAAI;YACtC,oBAAC,eAAe,IAAC,OAAO,EAAE,OAAO,GAAI,CACnC,CACL,CAAC;KACH;IACD,OAAO,CACL,2CAAO,WAAW;QAChB,oBAAC,gBAAgB,IAAC,OAAO,EAAE,OAAO,GAAI;QACtC,oBAAC,eAAe,IAAC,OAAO,EAAE,OAAO,GAAI,CACnC,CACL,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,eAAe,cAAc,CAAC","sourcesContent":["import * as React from 'react';\nimport { observer } from 'mobx-react';\nimport ElementContext from '../utils/ElementContext';\nimport { GraphElement, isGraph, isEdge, isNode } from '../types';\nimport { ATTR_DATA_ID, ATTR_DATA_KIND, ATTR_DATA_TYPE } from '../const';\n\ntype ElementWrapperProps = {\n  element: GraphElement;\n};\n\n// in a separate component so that changes to behaviors do not re-render children\nconst ElementComponent: React.FC<ElementWrapperProps> = observer(({ element }) => {\n  const kind = element.getKind();\n  const type = element.getType();\n\n  const Component = React.useMemo(() => {\n    return element.getController().getComponent(kind, type);\n  }, [element, kind, type]);\n\n  return (\n    <ElementContext.Provider value={element}>\n      <Component {...element.getState()} element={element} />\n    </ElementContext.Provider>\n  );\n});\n\nconst ElementChildren: React.FC<ElementWrapperProps> = observer(({ element }) => {\n  return (\n    <>\n      {element\n        .getChildren()\n        .filter(isEdge)\n        .map((e) => (\n          <ElementWrapper key={e.getId()} element={e} />\n        ))}\n      {element\n        .getChildren()\n        .filter(isNode)\n        .map((e) => (\n          <ElementWrapper key={e.getId()} element={e} />\n        ))}\n    </>\n  );\n});\n\nconst ElementWrapper: React.FC<ElementWrapperProps> = observer(({ element }) => {\n  if (!element.isVisible()) {\n    return null;\n  }\n\n  if (isEdge(element)) {\n    const source = element.getSourceAnchorNode();\n    const target = element.getTargetAnchorNode();\n    if ((source && !source.isVisible()) || (target && !target.isVisible())) {\n      return null;\n    }\n  }\n  const commonAttrs = {\n    [ATTR_DATA_ID]: element.getId(),\n    [ATTR_DATA_KIND]: element.getKind(),\n    [ATTR_DATA_TYPE]: element.getType(),\n  };\n  if (isGraph(element)) {\n    return (\n      <g {...commonAttrs}>\n        <ElementComponent element={element} />\n      </g>\n    );\n  }\n  if (isNode(element) && (!element.isGroup() || element.isCollapsed())) {\n    const { x, y } = element.getPosition();\n    return (\n      <g {...commonAttrs} transform={`translate(${x}, ${y})`}>\n        <ElementComponent element={element} />\n        <ElementChildren element={element} />\n      </g>\n    );\n  }\n  return (\n    <g {...commonAttrs}>\n      <ElementComponent element={element} />\n      <ElementChildren element={element} />\n    </g>\n  );\n});\n\nexport default ElementWrapper;\n"]}]}