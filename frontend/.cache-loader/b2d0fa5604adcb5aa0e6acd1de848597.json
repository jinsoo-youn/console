{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/dashboard/status-card/state-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/dashboard/status-card/state-utils.ts","mtime":1616735742370},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { healthPriority, HealthState } from './states';\nexport const getMostImportantStatuses = (operatorStatuses) => {\n    const mostImportantStatus = Math.max(...operatorStatuses.map(({ status }) => status.priority));\n    return operatorStatuses.filter(({ status }) => status.priority === mostImportantStatus);\n};\nexport const getOperatorsStatus = (operators, getOperatorStatus) => {\n    if (!operators.length) {\n        return {\n            status: Object.assign(Object.assign({}, healthPriority[HealthState.OK]), { title: 'Available' }),\n            operators: [],\n        };\n    }\n    const operatorsByStatus = operators.reduce((acc, o) => {\n        const status = getOperatorStatus(o);\n        if (!acc[status.health]) {\n            acc[status.health] = {\n                status: Object.assign({}, status),\n                operators: [o],\n            };\n        }\n        else {\n            acc[status.health].operators.push(o);\n        }\n        return acc;\n    }, {});\n    const mostImportantStatus = Object.keys(operatorsByStatus).sort((a, b) => operatorsByStatus[b].status.priority - operatorsByStatus[a].status.priority)[0];\n    return operatorsByStatus[mostImportantStatus];\n};\nexport const getOperatorsHealthState = (healthStatuses) => {\n    if (healthStatuses.some((s) => s.health === HealthState.NOT_AVAILABLE)) {\n        return { health: HealthState.NOT_AVAILABLE, detailMessage: undefined };\n    }\n    if (healthStatuses.some((s) => HealthState.LOADING === s.health)) {\n        return { health: HealthState.LOADING, detailMessage: undefined };\n    }\n    const sortedStatuses = healthStatuses.sort((a, b) => healthPriority[b.health].priority - healthPriority[a.health].priority);\n    const groupedStatuses = _.groupBy(sortedStatuses, (s) => s.health);\n    const statusKeys = Object.keys(groupedStatuses);\n    let finalCount = 0;\n    groupedStatuses[statusKeys[0]].forEach((g) => {\n        if (!_.isNil(g.count)) {\n            finalCount += g.count;\n        }\n    });\n    // warning and error statuses are counted together as degraded\n    if (statusKeys.length > 1 &&\n        statusKeys[0] === HealthState.ERROR &&\n        statusKeys[1] === HealthState.WARNING) {\n        groupedStatuses[statusKeys[1]].forEach((g) => {\n            if (!_.isNil(g.count)) {\n                finalCount += g.count;\n            }\n        });\n    }\n    return {\n        health: HealthState[statusKeys[0]],\n        detailMessage: healthPriority[statusKeys[0]].message\n            ? `${finalCount} ${healthPriority[statusKeys[0]].message.toLowerCase()}`\n            : undefined,\n    };\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/dashboard/status-card/state-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/dashboard/status-card/state-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { K8sResourceCommon } from '@console/internal/module/k8s';\nimport {\n  OperatorStatusWithResources,\n  OperatorHealth,\n  GetOperatorStatusPriority,\n} from '@console/plugin-sdk';\nimport { healthPriority, HealthState } from './states';\n\nexport const getMostImportantStatuses = (\n  operatorStatuses: OperatorStatusWithResources[],\n): OperatorStatusWithResources[] => {\n  const mostImportantStatus = Math.max(...operatorStatuses.map(({ status }) => status.priority));\n  return operatorStatuses.filter(({ status }) => status.priority === mostImportantStatus);\n};\n\nexport const getOperatorsStatus = <R extends K8sResourceCommon>(\n  operators: R[],\n  getOperatorStatus: GetOperatorStatusPriority<R>,\n): OperatorStatusWithResources<R> => {\n  if (!operators.length) {\n    return {\n      status: {\n        ...healthPriority[HealthState.OK],\n        title: 'Available',\n      },\n      operators: [],\n    };\n  }\n  const operatorsByStatus: { [key: string]: OperatorStatusWithResources<R> } = operators.reduce(\n    (acc, o) => {\n      const status = getOperatorStatus(o);\n      if (!acc[status.health]) {\n        acc[status.health] = {\n          status: {\n            ...status,\n          },\n          operators: [o],\n        };\n      } else {\n        acc[status.health].operators.push(o);\n      }\n      return acc;\n    },\n    {},\n  );\n\n  const mostImportantStatus = Object.keys(operatorsByStatus).sort(\n    (a, b) => operatorsByStatus[b].status.priority - operatorsByStatus[a].status.priority,\n  )[0];\n\n  return operatorsByStatus[mostImportantStatus];\n};\n\nexport const getOperatorsHealthState = (\n  healthStatuses: OperatorHealth[],\n): { health: HealthState; detailMessage: string } => {\n  if (healthStatuses.some((s) => s.health === HealthState.NOT_AVAILABLE)) {\n    return { health: HealthState.NOT_AVAILABLE, detailMessage: undefined };\n  }\n  if (healthStatuses.some((s) => HealthState.LOADING === s.health)) {\n    return { health: HealthState.LOADING, detailMessage: undefined };\n  }\n  const sortedStatuses = healthStatuses.sort(\n    (a, b) => healthPriority[b.health].priority - healthPriority[a.health].priority,\n  );\n  const groupedStatuses = _.groupBy(sortedStatuses, (s) => s.health);\n  const statusKeys = Object.keys(groupedStatuses);\n  let finalCount = 0;\n  groupedStatuses[statusKeys[0]].forEach((g) => {\n    if (!_.isNil(g.count)) {\n      finalCount += g.count;\n    }\n  });\n  // warning and error statuses are counted together as degraded\n  if (\n    statusKeys.length > 1 &&\n    statusKeys[0] === HealthState.ERROR &&\n    statusKeys[1] === HealthState.WARNING\n  ) {\n    groupedStatuses[statusKeys[1]].forEach((g) => {\n      if (!_.isNil(g.count)) {\n        finalCount += g.count;\n      }\n    });\n  }\n\n  return {\n    health: HealthState[statusKeys[0]],\n    detailMessage: healthPriority[statusKeys[0]].message\n      ? `${finalCount} ${healthPriority[statusKeys[0]].message.toLowerCase()}`\n      : undefined,\n  };\n};\n"]}]}