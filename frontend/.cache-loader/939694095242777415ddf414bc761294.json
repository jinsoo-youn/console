{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/modals/cluster-update-modal.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/modals/cluster-update-modal.tsx","mtime":1615298458740},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as semver from 'semver';\nimport { ClusterVersionModel } from '../../models';\nimport { Dropdown, PromiseComponent } from '../utils';\nimport { getAvailableClusterUpdates, getDesiredClusterVersion, k8sPatch, } from '../../module/k8s';\nimport { createModalLauncher, ModalBody, ModalSubmitFooter, ModalTitle, } from '../factory/modal';\nexport const getSortedUpdates = (cv) => {\n    const available = getAvailableClusterUpdates(cv) || [];\n    try {\n        return available.sort(({ version: left }, { version: right }) => semver.rcompare(left, right));\n    }\n    catch (e) {\n        // eslint-disable-next-line no-console\n        console.error('error sorting cluster updates', e);\n        return available;\n    }\n};\nclass ClusterUpdateModal extends PromiseComponent {\n    constructor(props) {\n        super(props);\n        this.props = props;\n        this._submit = (e) => {\n            e.preventDefault();\n            const { selectedVersion } = this.state;\n            if (!selectedVersion) {\n                return;\n            }\n            const { cv } = this.props;\n            const available = getAvailableClusterUpdates(cv);\n            const desired = _.find(available, { version: selectedVersion });\n            if (!desired) {\n                this.setState({\n                    errorMessage: `Version ${selectedVersion} not found among the available updates. Select another version.`,\n                });\n                return;\n            }\n            // Clear any previous error message.\n            this.setState({ errorMessage: '' });\n            const patch = [{ op: 'add', path: '/spec/desiredUpdate', value: desired }];\n            this.handlePromise(k8sPatch(ClusterVersionModel, cv, patch)).then(this.props.close);\n        };\n        this._cancel = () => {\n            this.props.close();\n        };\n        this._change = (selectedVersion) => {\n            this.setState({ selectedVersion });\n        };\n        const available = getSortedUpdates(props.cv);\n        this.state.selectedVersion = _.get(available, '[0].version', '');\n    }\n    render() {\n        const { cv } = this.props;\n        const { selectedVersion } = this.state;\n        const availableUpdates = getSortedUpdates(cv);\n        const currentVersion = getDesiredClusterVersion(cv);\n        const dropdownItems = _.reduce(availableUpdates, (acc, { version }) => {\n            acc[version] = version;\n            return acc;\n        }, {});\n        return (React.createElement(\"form\", { onSubmit: this._submit, name: \"form\", className: \"modal-content modal-content--no-inner-scroll\" },\n            React.createElement(ModalTitle, null, \"Update Cluster\"),\n            React.createElement(ModalBody, null,\n                React.createElement(\"div\", { className: \"form-group\" },\n                    React.createElement(\"label\", null, \"Current Version\"),\n                    React.createElement(\"p\", null, currentVersion)),\n                React.createElement(\"div\", { className: \"form-group\" },\n                    React.createElement(\"label\", { htmlFor: \"version_dropdown\" }, \"Select New Version\"),\n                    React.createElement(Dropdown, { className: \"cluster-update-modal__dropdown\", id: \"version_dropdown\", items: dropdownItems, onChange: this._change, selectedKey: selectedVersion, title: \"Select Version\" }))),\n            React.createElement(ModalSubmitFooter, { errorMessage: this.state.errorMessage, inProgress: this.state.inProgress, submitText: \"Update\", cancel: this._cancel })));\n    }\n}\nexport const clusterUpdateModal = createModalLauncher(ClusterUpdateModal);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/modals/cluster-update-modal.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/modals/cluster-update-modal.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as semver from 'semver';\n\nimport { ClusterVersionModel } from '../../models';\nimport { Dropdown, PromiseComponent } from '../utils';\nimport {\n  ClusterUpdate,\n  ClusterVersionKind,\n  getAvailableClusterUpdates,\n  getDesiredClusterVersion,\n  k8sPatch,\n} from '../../module/k8s';\nimport {\n  createModalLauncher,\n  ModalBody,\n  ModalComponentProps,\n  ModalSubmitFooter,\n  ModalTitle,\n} from '../factory/modal';\n\nexport const getSortedUpdates = (cv: ClusterVersionKind): ClusterUpdate[] => {\n  const available = getAvailableClusterUpdates(cv) || [];\n  try {\n    return available.sort(({ version: left }, { version: right }) => semver.rcompare(left, right));\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error('error sorting cluster updates', e);\n    return available;\n  }\n};\n\nclass ClusterUpdateModal extends PromiseComponent<\n  ClusterUpdateModalProps,\n  ClusterUpdateModalState\n> {\n  readonly state: ClusterUpdateModalState;\n\n  constructor(public props: ClusterUpdateModalProps) {\n    super(props);\n    const available = getSortedUpdates(props.cv);\n    this.state.selectedVersion = _.get(available, '[0].version', '');\n  }\n\n  _submit = (e: React.FormEvent<EventTarget>) => {\n    e.preventDefault();\n    const { selectedVersion } = this.state;\n    if (!selectedVersion) {\n      return;\n    }\n    const { cv } = this.props;\n    const available = getAvailableClusterUpdates(cv);\n    const desired = _.find(available, { version: selectedVersion });\n    if (!desired) {\n      this.setState({\n        errorMessage: `Version ${selectedVersion} not found among the available updates. Select another version.`,\n      });\n      return;\n    }\n\n    // Clear any previous error message.\n    this.setState({ errorMessage: '' });\n    const patch = [{ op: 'add', path: '/spec/desiredUpdate', value: desired }];\n    this.handlePromise(k8sPatch(ClusterVersionModel, cv, patch)).then(this.props.close);\n  };\n\n  _cancel = () => {\n    this.props.close();\n  };\n\n  _change = (selectedVersion: string) => {\n    this.setState({ selectedVersion });\n  };\n\n  render() {\n    const { cv } = this.props;\n    const { selectedVersion } = this.state;\n    const availableUpdates = getSortedUpdates(cv);\n    const currentVersion = getDesiredClusterVersion(cv);\n    const dropdownItems = _.reduce(\n      availableUpdates,\n      (acc, { version }) => {\n        acc[version] = version;\n        return acc;\n      },\n      {},\n    );\n    return (\n      <form\n        onSubmit={this._submit}\n        name=\"form\"\n        className=\"modal-content modal-content--no-inner-scroll\"\n      >\n        <ModalTitle>Update Cluster</ModalTitle>\n        <ModalBody>\n          {/* <p>\n          // TODO: Determine what content goes here.\n        </p> */}\n          <div className=\"form-group\">\n            <label>Current Version</label>\n            <p>{currentVersion}</p>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"version_dropdown\">Select New Version</label>\n            <Dropdown\n              className=\"cluster-update-modal__dropdown\"\n              id=\"version_dropdown\"\n              items={dropdownItems}\n              onChange={this._change}\n              selectedKey={selectedVersion}\n              title=\"Select Version\"\n            />\n          </div>\n        </ModalBody>\n        <ModalSubmitFooter\n          errorMessage={this.state.errorMessage}\n          inProgress={this.state.inProgress}\n          submitText=\"Update\"\n          cancel={this._cancel}\n        />\n      </form>\n    );\n  }\n}\n\nexport const clusterUpdateModal = createModalLauncher(ClusterUpdateModal);\n\ntype ClusterUpdateModalProps = {\n  cv: ClusterVersionKind;\n} & ModalComponentProps;\n\ntype ClusterUpdateModalState = {\n  selectedVersion: string;\n  inProgress: boolean;\n  errorMessage: string;\n};\n"]}]}