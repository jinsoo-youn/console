{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/actions/workloadActions.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/actions/workloadActions.ts","mtime":1617154808360},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { modelFor, referenceFor } from '@console/internal/module/k8s';\nimport { menuActions as deploymentConfigMenuActions } from '@console/internal/components/deployment-config';\nimport { menuActions as deploymentMenuActions } from '@console/internal/components/deployment';\nimport { menuActions as statefulSetMenuActions } from '@console/internal/components/stateful-set';\nimport { menuActions as daemonSetMenuActions } from '@console/internal/components/daemon-set';\nimport { ModifyApplication } from '../../../actions/modify-application';\nimport { getTopologyResourceObject } from '../topology-utils';\nexport const workloadActions = (workload, allowRegroup = true) => {\n    const contextMenuResource = getTopologyResourceObject(workload);\n    if (!contextMenuResource) {\n        return null;\n    }\n    const menuActions = [];\n    if (allowRegroup) {\n        menuActions.push(ModifyApplication);\n    }\n    switch (contextMenuResource.kind) {\n        case 'DeploymentConfig':\n            menuActions.push(...deploymentConfigMenuActions);\n            break;\n        case 'Deployment':\n            menuActions.push(...deploymentMenuActions);\n            break;\n        case 'StatefulSet':\n            menuActions.push(...statefulSetMenuActions);\n            break;\n        case 'DaemonSet':\n            menuActions.push(...daemonSetMenuActions);\n            break;\n        default:\n            break;\n    }\n    return _.map(menuActions, a => a(modelFor(referenceFor(contextMenuResource)), contextMenuResource));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/actions/workloadActions.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/actions/workloadActions.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAE5B,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE,MAAM,8BAA8B,CAAC;AACtE,OAAO,EAAE,WAAW,IAAI,2BAA2B,EAAE,MAAM,gDAAgD,CAAC;AAC5G,OAAO,EAAE,WAAW,IAAI,qBAAqB,EAAE,MAAM,yCAAyC,CAAC;AAC/F,OAAO,EAAE,WAAW,IAAI,sBAAsB,EAAE,MAAM,2CAA2C,CAAC;AAClG,OAAO,EAAE,WAAW,IAAI,oBAAoB,EAAE,MAAM,yCAAyC,CAAC;AAC9F,OAAO,EAAE,iBAAiB,EAAE,MAAM,qCAAqC,CAAC;AAExE,OAAO,EAAE,yBAAyB,EAAE,MAAM,mBAAmB,CAAC;AAE9D,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,QAA4B,EAAE,eAAwB,IAAI,EAAiB,EAAE;IAC3G,MAAM,mBAAmB,GAAG,yBAAyB,CAAC,QAAQ,CAAC,CAAC;IAChE,IAAI,CAAC,mBAAmB,EAAE;QACxB,OAAO,IAAI,CAAC;KACb;IAED,MAAM,WAAW,GAAkB,EAAE,CAAC;IACtC,IAAI,YAAY,EAAE;QAChB,WAAW,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;KACrC;IACD,QAAQ,mBAAmB,CAAC,IAAI,EAAE;QAChC,KAAK,kBAAkB;YACrB,WAAW,CAAC,IAAI,CAAC,GAAG,2BAA2B,CAAC,CAAC;YACjD,MAAM;QACR,KAAK,YAAY;YACf,WAAW,CAAC,IAAI,CAAC,GAAG,qBAAqB,CAAC,CAAC;YAC3C,MAAM;QACR,KAAK,aAAa;YAChB,WAAW,CAAC,IAAI,CAAC,GAAG,sBAAsB,CAAC,CAAC;YAC5C,MAAM;QACR,KAAK,WAAW;YACd,WAAW,CAAC,IAAI,CAAC,GAAG,oBAAoB,CAAC,CAAC;YAC1C,MAAM;QACR;YACE,MAAM;KACT;IAED,OAAO,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,YAAY,CAAC,mBAAmB,CAAC,CAAC,EAAE,mBAAmB,CAAC,CAAC,CAAC;AACtG,CAAC,CAAC","sourcesContent":["import * as _ from 'lodash';\nimport { KebabAction, KebabOption } from '@console/internal/components/utils';\nimport { modelFor, referenceFor } from '@console/internal/module/k8s';\nimport { menuActions as deploymentConfigMenuActions } from '@console/internal/components/deployment-config';\nimport { menuActions as deploymentMenuActions } from '@console/internal/components/deployment';\nimport { menuActions as statefulSetMenuActions } from '@console/internal/components/stateful-set';\nimport { menuActions as daemonSetMenuActions } from '@console/internal/components/daemon-set';\nimport { ModifyApplication } from '../../../actions/modify-application';\nimport { TopologyDataObject } from '../topology-types';\nimport { getTopologyResourceObject } from '../topology-utils';\n\nexport const workloadActions = (workload: TopologyDataObject, allowRegroup: boolean = true): KebabOption[] => {\n  const contextMenuResource = getTopologyResourceObject(workload);\n  if (!contextMenuResource) {\n    return null;\n  }\n\n  const menuActions: KebabAction[] = [];\n  if (allowRegroup) {\n    menuActions.push(ModifyApplication);\n  }\n  switch (contextMenuResource.kind) {\n    case 'DeploymentConfig':\n      menuActions.push(...deploymentConfigMenuActions);\n      break;\n    case 'Deployment':\n      menuActions.push(...deploymentMenuActions);\n      break;\n    case 'StatefulSet':\n      menuActions.push(...statefulSetMenuActions);\n      break;\n    case 'DaemonSet':\n      menuActions.push(...daemonSetMenuActions);\n      break;\n    default:\n      break;\n  }\n\n  return _.map(menuActions, a => a(modelFor(referenceFor(contextMenuResource)), contextMenuResource));\n};\n"]}]}