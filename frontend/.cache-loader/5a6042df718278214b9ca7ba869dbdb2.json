{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/helpers/vm-clone.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/helpers/vm-clone.ts","mtime":1615298458660},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { createBasicLookup, getName, getNamespace } from '@console/shared';\nimport { getBasicID, joinIDs } from '../../utils';\nimport { getPvcAccessModes, getPvcStorageClassName, getPvcStorageSize, getPvcVolumeMode, } from '../../selectors/pvc/selectors';\nimport { DataVolumeTemplate } from '../objects/vm/datavolume-template';\nimport { getOperatingSystem, getOperatingSystemName, getVolumeDataVolumeName, getVolumePersistentVolumeClaimName, } from '../../selectors/vm';\nimport { getDataVolumeAccessModes, getDataVolumeStorageClassName, getDataVolumeStorageSize, getDataVolumeVolumeMode, } from '../../selectors/dv/selectors';\nimport { ANNOTATION_DESCRIPTION, TEMPLATE_OS_NAME_ANNOTATION, TEMPLATE_VM_NAME_LABEL, } from '../../constants/vm';\nimport { VMWrapper } from '../wrapper/vm/vm-wrapper';\nexport class VMClone {\n    constructor(vm, values) {\n        this.cleanVM = () => {\n            const data = this.vm.asResource();\n            const { metadata, spec } = data;\n            if (metadata) {\n                delete metadata.selfLink;\n                delete metadata.resourceVersion;\n                delete metadata.uid;\n                delete metadata.creationTimestamp;\n                delete metadata.generation;\n            }\n            if (spec.template.spec.domain) {\n                delete spec.template.spec.domain.firmware;\n            }\n            delete data.status;\n            spec.dataVolumeTemplates = [];\n            this.vm.getNetworkInterfaces().forEach((intface) => delete intface.macAddress);\n        };\n        this.withClonedPVCs = (persistentVolumeClaimsToClone) => {\n            const pvcLookup = createBasicLookup(persistentVolumeClaimsToClone, getBasicID);\n            const name = this.vm.getName();\n            this.vm\n                .getVolumes()\n                .filter(getVolumePersistentVolumeClaimName)\n                .forEach((volume) => {\n                const pvcName = getVolumePersistentVolumeClaimName(volume);\n                delete volume.persistentVolumeClaim;\n                const pvc = pvcLookup[`${this.oldVMNamespace}-${pvcName}`];\n                if (pvc) {\n                    const clonedDVTemplate = new DataVolumeTemplate({\n                        name: joinIDs(name, pvcName, 'clone'),\n                        pvcSourceName: pvcName,\n                        pvcSourceNamespace: this.oldVMNamespace,\n                        accessModes: getPvcAccessModes(pvc),\n                        volumeMode: getPvcVolumeMode(pvc),\n                        size: getPvcStorageSize(pvc),\n                        storageClassName: getPvcStorageClassName(pvc),\n                    }).build();\n                    this.vm.ensureDataVolumeTemplates().push(clonedDVTemplate);\n                    volume.dataVolume = {\n                        name: getName(clonedDVTemplate),\n                    };\n                }\n            });\n            return this;\n        };\n        this.withClonedDataVolumes = (dataVolumes) => {\n            const dvLookup = createBasicLookup(dataVolumes, getBasicID);\n            const name = this.vm.getName();\n            this.vm\n                .getVolumes()\n                .filter(getVolumeDataVolumeName)\n                .forEach((volume) => {\n                const dvName = getVolumeDataVolumeName(volume);\n                const dataVolume = dvLookup[`${this.oldVMNamespace}-${dvName}`];\n                if (dataVolume) {\n                    const clonedDVTemplate = new DataVolumeTemplate({\n                        name: joinIDs(name, dvName, 'clone'),\n                        pvcSourceName: dvName,\n                        pvcSourceNamespace: this.oldVMNamespace,\n                        accessModes: getDataVolumeAccessModes(dataVolume),\n                        volumeMode: getDataVolumeVolumeMode(dataVolume),\n                        size: getDataVolumeStorageSize(dataVolume),\n                        storageClassName: getDataVolumeStorageClassName(dataVolume),\n                    }).build();\n                    this.vm.ensureDataVolumeTemplates().push(clonedDVTemplate);\n                    volume.dataVolume = {\n                        name: getName(clonedDVTemplate),\n                    };\n                }\n            });\n            return this;\n        };\n        this.vm = new VMWrapper(vm, true);\n        this.oldVMNamespace = getNamespace(vm);\n        this.cleanVM();\n        this.setValues(values);\n    }\n    setValues({ name, namespace, description, startVM = false }) {\n        const data = this.vm.asResource();\n        const osId = getOperatingSystem(data);\n        const osName = getOperatingSystemName(data);\n        this.vm.setName(name);\n        this.vm.setNamespace(namespace);\n        this.vm.setRunning(startVM);\n        if (description) {\n            this.vm.addAnotation(ANNOTATION_DESCRIPTION, description);\n        }\n        if (osId && osName) {\n            this.vm.addAnotation(`${TEMPLATE_OS_NAME_ANNOTATION}/${osId}`, osName);\n        }\n        this.vm.addTemplateLabel(TEMPLATE_VM_NAME_LABEL, name);\n        return this;\n    }\n    build() {\n        const result = this.vm.asResource(true);\n        // in case withClonedPVCs was not called\n        if (this.vm.getVolumes(null)) {\n            result.spec.template.spec.volumes = result.spec.template.spec.volumes.filter((v) => !getVolumePersistentVolumeClaimName(v));\n        }\n        return result;\n    }\n}\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/helpers/vm-clone.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/helpers/vm-clone.ts"],"names":[],"mappings":"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","sourcesContent":["import { K8sResourceKind } from '@console/internal/module/k8s';\nimport { createBasicLookup, getName, getNamespace } from '@console/shared';\nimport { VMKind } from '../../types/vm';\nimport { getBasicID, joinIDs } from '../../utils';\nimport {\n  getPvcAccessModes,\n  getPvcStorageClassName,\n  getPvcStorageSize,\n  getPvcVolumeMode,\n} from '../../selectors/pvc/selectors';\nimport { DataVolumeTemplate } from '../objects/vm/datavolume-template';\nimport {\n  getOperatingSystem,\n  getOperatingSystemName,\n  getVolumeDataVolumeName,\n  getVolumePersistentVolumeClaimName,\n} from '../../selectors/vm';\nimport {\n  getDataVolumeAccessModes,\n  getDataVolumeStorageClassName,\n  getDataVolumeStorageSize,\n  getDataVolumeVolumeMode,\n} from '../../selectors/dv/selectors';\nimport {\n  ANNOTATION_DESCRIPTION,\n  TEMPLATE_OS_NAME_ANNOTATION,\n  TEMPLATE_VM_NAME_LABEL,\n} from '../../constants/vm';\nimport { VMWrapper } from '../wrapper/vm/vm-wrapper';\n\nexport type CloneTo = {\n  name: string;\n  namespace: string;\n  description: string;\n  startVM?: boolean;\n};\n\nexport class VMClone {\n  private vm: VMWrapper;\n\n  private oldVMNamespace: string;\n\n  constructor(vm: VMKind, values: CloneTo) {\n    this.vm = new VMWrapper(vm, true);\n    this.oldVMNamespace = getNamespace(vm);\n    this.cleanVM();\n    this.setValues(values);\n  }\n\n  private cleanVM = () => {\n    const data = this.vm.asResource();\n    const { metadata, spec } = data;\n\n    if (metadata) {\n      delete metadata.selfLink;\n      delete metadata.resourceVersion;\n      delete metadata.uid;\n      delete metadata.creationTimestamp;\n      delete metadata.generation;\n    }\n\n    if (spec.template.spec.domain) {\n      delete spec.template.spec.domain.firmware;\n    }\n    delete data.status;\n    spec.dataVolumeTemplates = [];\n\n    this.vm.getNetworkInterfaces().forEach((intface) => delete intface.macAddress);\n  };\n\n  private setValues({ name, namespace, description, startVM = false }: CloneTo) {\n    const data = this.vm.asResource();\n    const osId = getOperatingSystem(data);\n    const osName = getOperatingSystemName(data);\n\n    this.vm.setName(name);\n    this.vm.setNamespace(namespace);\n    this.vm.setRunning(startVM);\n\n    if (description) {\n      this.vm.addAnotation(ANNOTATION_DESCRIPTION, description);\n    }\n    if (osId && osName) {\n      this.vm.addAnotation(`${TEMPLATE_OS_NAME_ANNOTATION}/${osId}`, osName);\n    }\n\n    this.vm.addTemplateLabel(TEMPLATE_VM_NAME_LABEL, name);\n    return this;\n  }\n\n  withClonedPVCs = (persistentVolumeClaimsToClone: K8sResourceKind[]) => {\n    const pvcLookup = createBasicLookup(persistentVolumeClaimsToClone, getBasicID);\n    const name = this.vm.getName();\n\n    this.vm\n      .getVolumes()\n      .filter(getVolumePersistentVolumeClaimName)\n      .forEach((volume) => {\n        const pvcName = getVolumePersistentVolumeClaimName(volume);\n        delete volume.persistentVolumeClaim;\n\n        const pvc = pvcLookup[`${this.oldVMNamespace}-${pvcName}`];\n\n        if (pvc) {\n          const clonedDVTemplate = new DataVolumeTemplate({\n            name: joinIDs(name, pvcName, 'clone'),\n            pvcSourceName: pvcName,\n            pvcSourceNamespace: this.oldVMNamespace,\n            accessModes: getPvcAccessModes(pvc),\n            volumeMode: getPvcVolumeMode(pvc),\n            size: getPvcStorageSize(pvc),\n            storageClassName: getPvcStorageClassName(pvc),\n          }).build();\n\n          this.vm.ensureDataVolumeTemplates().push(clonedDVTemplate);\n\n          volume.dataVolume = {\n            name: getName(clonedDVTemplate),\n          };\n        }\n      });\n    return this;\n  };\n\n  withClonedDataVolumes = (dataVolumes: K8sResourceKind[]) => {\n    const dvLookup = createBasicLookup(dataVolumes, getBasicID);\n    const name = this.vm.getName();\n\n    this.vm\n      .getVolumes()\n      .filter(getVolumeDataVolumeName)\n      .forEach((volume) => {\n        const dvName = getVolumeDataVolumeName(volume);\n        const dataVolume = dvLookup[`${this.oldVMNamespace}-${dvName}`];\n\n        if (dataVolume) {\n          const clonedDVTemplate = new DataVolumeTemplate({\n            name: joinIDs(name, dvName, 'clone'),\n            pvcSourceName: dvName,\n            pvcSourceNamespace: this.oldVMNamespace,\n            accessModes: getDataVolumeAccessModes(dataVolume),\n            volumeMode: getDataVolumeVolumeMode(dataVolume),\n            size: getDataVolumeStorageSize(dataVolume),\n            storageClassName: getDataVolumeStorageClassName(dataVolume),\n          }).build();\n\n          this.vm.ensureDataVolumeTemplates().push(clonedDVTemplate);\n\n          volume.dataVolume = {\n            name: getName(clonedDVTemplate),\n          };\n        }\n      });\n    return this;\n  };\n\n  build() {\n    const result = this.vm.asResource(true);\n    // in case withClonedPVCs was not called\n    if (this.vm.getVolumes(null)) {\n      result.spec.template.spec.volumes = result.spec.template.spec.volumes.filter(\n        (v) => !getVolumePersistentVolumeClaimName(v),\n      );\n    }\n    return result;\n  }\n}\n"]}]}