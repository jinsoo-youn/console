{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/modals/add-secret-to-workload.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/modals/add-secret-to-workload.tsx","mtime":1616735742470},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as fuzzy from 'fuzzysearch';\nimport { k8sList, k8sPatch } from '../../module/k8s';\nimport { DeploymentModel, DeploymentConfigModel, StatefulSetModel } from '../../models';\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter } from '../factory/modal';\nimport { Dropdown, history, ResourceIcon, ResourceName, resourcePathFromModel } from '../utils';\nimport { RadioInput } from '../radio';\nconst workloadResourceModels = [DeploymentModel, DeploymentConfigModel, StatefulSetModel];\nconst getContainers = (workload) => _.get(workload, 'spec.template.spec.containers') || [];\nexport class AddSecretToWorkloadModal extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            inProgress: false,\n            errorMessage: '',\n            workloadOptions: {},\n            workloadsByUID: {},\n            selectedWorkloadUID: '',\n            addAs: 'environment',\n            prefix: '',\n            mountPath: '',\n        };\n        this.onWorkloadChange = (selectedWorkloadUID) => {\n            this.setState({ selectedWorkloadUID });\n        };\n        this.handleChange = (event) => {\n            const { name, value } = event.currentTarget;\n            this.setState({\n                [name]: value,\n            });\n        };\n        this.onAddAsChange = (event) => {\n            this.setState({\n                addAs: event.currentTarget.value,\n            });\n        };\n        this.submit = (event) => {\n            event.preventDefault();\n            const { workloadsByUID, selectedWorkloadUID } = this.state;\n            if (!selectedWorkloadUID) {\n                this.setState({ errorMessage: 'You must select a workload.' });\n                return;\n            }\n            this.setState({ inProgress: true, errorMessage: '' });\n            const workload = workloadsByUID[selectedWorkloadUID];\n            const { model, obj } = workload;\n            const patches = this.getPatches(obj);\n            k8sPatch(model, obj, patches)\n                .then(() => {\n                this.setState({ inProgress: false });\n                this.props.close();\n                const { name, namespace } = obj.metadata;\n                history.push(resourcePathFromModel(model, name, namespace));\n            })\n                .catch(({ message: errorMessage }) => this.setState({ inProgress: false, errorMessage }));\n        };\n    }\n    componentDidMount() {\n        const { namespace } = this.props;\n        const opts = { ns: namespace };\n        Promise.all(workloadResourceModels.map((model) => {\n            return k8sList(model, opts)\n                .catch((err) => {\n                const errorMessage = err.message;\n                this.setState({ errorMessage });\n                return [];\n            })\n                .then((res) => res.map((obj) => ({ model, obj })));\n        })).then((responses) => {\n            // TODO: Group by kind.\n            const allItems = _.flatten(responses);\n            const workloadsByUID = _.keyBy(allItems, 'obj.metadata.uid');\n            const sortedItems = _.orderBy(allItems, ['obj.metadata.name', 'model.kind'], ['asc', 'asc']);\n            const workloadOptions = _.reduce(sortedItems, (options, item) => {\n                const { name, uid } = item.obj.metadata;\n                options[uid] = React.createElement(ResourceName, { kind: item.model.kind, name: name });\n                return options;\n            }, {});\n            this.setState({ workloadOptions, workloadsByUID });\n        });\n    }\n    autocompleteFilter(text, item) {\n        return fuzzy(text, item.props.name);\n    }\n    getEnvPatches(obj) {\n        const { secretName } = this.props;\n        const { prefix } = this.state;\n        const envFrom = {\n            secretRef: {\n                name: secretName,\n            },\n            prefix,\n        };\n        // Add `envFrom` to all containers.\n        // TODO: Let use the user pick the container.\n        const containers = getContainers(obj);\n        const patches = containers.map((container, i) => {\n            // Create the array if it doesn't exist. Append to the array otherwise.\n            const containerPatch = _.isEmpty(container.envFrom)\n                ? { op: 'add', path: `/spec/template/spec/containers/${i}/envFrom`, value: [envFrom] }\n                : { op: 'add', path: `/spec/template/spec/containers/${i}/envFrom/-`, value: envFrom };\n            return containerPatch;\n        });\n        return patches;\n    }\n    getVolumePatches(obj) {\n        const { secretName } = this.props;\n        const { mountPath } = this.state;\n        const mount = {\n            name: secretName,\n            readOnly: true,\n            mountPath,\n        };\n        // Add a volume mount to all containers.\n        // TODO: Let use the user pick the container.\n        const containers = getContainers(obj);\n        const patches = containers.map((container, i) => {\n            // Create the array if it doesn't exist. Append to the array otherwise.\n            const containerPatch = _.isEmpty(container.volumeMounts)\n                ? { op: 'add', path: `/spec/template/spec/containers/${i}/volumeMounts`, value: [mount] }\n                : { op: 'add', path: `/spec/template/spec/containers/${i}/volumeMounts/-`, value: mount };\n            return containerPatch;\n        });\n        const volume = {\n            name: secretName,\n            secret: { secretName },\n        };\n        const existingVolumes = _.get(obj, 'spec.template.spec.volumes');\n        // Create the array if it doesn't exist. Append to the array otherwise.\n        const volumePatch = _.isEmpty(existingVolumes)\n            ? { op: 'add', path: '/spec/template/spec/volumes', value: [volume] }\n            : { op: 'add', path: '/spec/template/spec/volumes/-', value: volume };\n        return [...patches, volumePatch];\n    }\n    getPatches(obj) {\n        return this.state.addAs === 'environment'\n            ? this.getEnvPatches(obj)\n            : this.getVolumePatches(obj);\n    }\n    render() {\n        const { secretName } = this.props;\n        const { addAs, workloadOptions, selectedWorkloadUID } = this.state;\n        const addAsEnvironment = addAs === 'environment';\n        const addAsVolume = addAs === 'volume';\n        const selectWorkloadPlaceholder = 'Select a workload';\n        return (React.createElement(\"form\", { onSubmit: this.submit, name: \"co-add-secret-to-workload\", className: \"co-add-secret-to-workload modal-content\" },\n            React.createElement(ModalTitle, null, \"Add Secret to Workload\"),\n            React.createElement(ModalBody, null,\n                React.createElement(\"p\", null,\n                    \"Add all values from \",\n                    React.createElement(ResourceIcon, { kind: \"Secret\" }),\n                    secretName,\n                    \" to a workload as environment variables or a volume.\"),\n                React.createElement(\"div\", { className: \"form-group\" },\n                    React.createElement(\"label\", { className: \"control-label co-required\", htmlFor: \"co-add-secret-to-workload__workload\" }, \"Add this secret to workload\"),\n                    React.createElement(Dropdown, { items: workloadOptions, selectedKey: selectedWorkloadUID, title: selectWorkloadPlaceholder, onChange: this.onWorkloadChange, autocompleteFilter: this.autocompleteFilter, autocompletePlaceholder: selectWorkloadPlaceholder, id: \"co-add-secret-to-workload__workload\" })),\n                React.createElement(\"fieldset\", null,\n                    React.createElement(\"legend\", { className: \"co-legend co-required\" }, \"Add secret as\"),\n                    React.createElement(RadioInput, { title: \"Environment Variables\", name: \"co-add-secret-to-workload__add-as\", id: \"co-add-secret-to-workload__envvars\", value: \"environment\", onChange: this.onAddAsChange, checked: addAsEnvironment }),\n                    addAsEnvironment && (React.createElement(\"div\", { className: \"co-m-radio-desc\" },\n                        React.createElement(\"div\", { className: \"form-group\" },\n                            React.createElement(\"label\", { htmlFor: \"co-add-secret-to-workload__prefix\" }, \"Prefix\"),\n                            React.createElement(\"input\", { className: \"pf-c-form-control\", name: \"prefix\", id: \"co-add-secret-to-workload__prefix\", placeholder: \"(optional)\", type: \"text\", onChange: this.handleChange })))),\n                    React.createElement(RadioInput, { title: \"Volume\", name: \"co-add-secret-to-workload__add-as\", id: \"co-add-secret-to-workload__volume\", value: \"volume\", onChange: this.onAddAsChange, checked: addAsVolume }),\n                    addAsVolume && (React.createElement(\"div\", { className: \"co-m-radio-desc\" },\n                        React.createElement(\"div\", { className: \"form-group\" },\n                            React.createElement(\"label\", { htmlFor: \"co-add-secret-to-workload__mountpath\", className: \"co-required\" }, \"Mount Path\"),\n                            React.createElement(\"input\", { className: \"pf-c-form-control\", name: \"mountPath\", id: \"co-add-secret-to-workload__mountpath\", type: \"text\", onChange: this.handleChange, required: true })))))),\n            React.createElement(ModalSubmitFooter, { errorMessage: this.state.errorMessage, inProgress: this.state.inProgress, submitText: \"Save\", cancel: this.props.cancel })));\n    }\n}\nexport const configureAddSecretToWorkloadModal = createModalLauncher(AddSecretToWorkloadModal);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/modals/add-secret-to-workload.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/modals/add-secret-to-workload.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as fuzzy from 'fuzzysearch';\n\nimport { K8sKind, k8sList, k8sPatch, K8sResourceKind } from '../../module/k8s';\nimport { DeploymentModel, DeploymentConfigModel, StatefulSetModel } from '../../models';\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter } from '../factory/modal';\nimport { Dropdown, history, ResourceIcon, ResourceName, resourcePathFromModel } from '../utils';\nimport { RadioInput } from '../radio';\n\nconst workloadResourceModels = [DeploymentModel, DeploymentConfigModel, StatefulSetModel];\nconst getContainers = (workload: K8sResourceKind) =>\n  _.get(workload, 'spec.template.spec.containers') || [];\n\nexport class AddSecretToWorkloadModal extends React.Component<\n  AddSecretToWorkloadModalProps,\n  AddSecretToWorkloadModalState\n> {\n  state = {\n    inProgress: false,\n    errorMessage: '',\n    workloadOptions: {},\n    workloadsByUID: {},\n    selectedWorkloadUID: '',\n    addAs: 'environment',\n    prefix: '',\n    mountPath: '',\n  };\n\n  componentDidMount() {\n    const { namespace } = this.props;\n    const opts = { ns: namespace };\n    Promise.all(\n      workloadResourceModels.map((model) => {\n        return k8sList(model, opts)\n          .catch((err) => {\n            const errorMessage = err.message;\n            this.setState({ errorMessage });\n            return [];\n          })\n          .then((res: K8sResourceKind[]): WorkloadItem[] => res.map((obj) => ({ model, obj })));\n      }),\n    ).then((responses) => {\n      // TODO: Group by kind.\n      const allItems: WorkloadItem[] = _.flatten(responses);\n      const workloadsByUID = _.keyBy(allItems, 'obj.metadata.uid');\n      const sortedItems = _.orderBy(allItems, ['obj.metadata.name', 'model.kind'], ['asc', 'asc']);\n      const workloadOptions = _.reduce(\n        sortedItems,\n        (options, item) => {\n          const { name, uid } = item.obj.metadata;\n          options[uid] = <ResourceName kind={item.model.kind} name={name} />;\n          return options;\n        },\n        {},\n      );\n      this.setState({ workloadOptions, workloadsByUID });\n    });\n  }\n\n  autocompleteFilter(text, item) {\n    return fuzzy(text, item.props.name);\n  }\n\n  onWorkloadChange = (selectedWorkloadUID: string) => {\n    this.setState({ selectedWorkloadUID });\n  };\n\n  handleChange: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    const { name, value } = event.currentTarget;\n    this.setState({\n      [name]: value,\n    } as any);\n  };\n\n  onAddAsChange: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    this.setState({\n      addAs: event.currentTarget.value,\n    });\n  };\n\n  getEnvPatches(obj) {\n    const { secretName } = this.props;\n    const { prefix } = this.state;\n    const envFrom = {\n      secretRef: {\n        name: secretName,\n      },\n      prefix,\n    };\n\n    // Add `envFrom` to all containers.\n    // TODO: Let use the user pick the container.\n    const containers = getContainers(obj);\n    const patches = containers.map((container, i) => {\n      // Create the array if it doesn't exist. Append to the array otherwise.\n      const containerPatch = _.isEmpty(container.envFrom)\n        ? { op: 'add', path: `/spec/template/spec/containers/${i}/envFrom`, value: [envFrom] }\n        : { op: 'add', path: `/spec/template/spec/containers/${i}/envFrom/-`, value: envFrom };\n      return containerPatch;\n    });\n\n    return patches;\n  }\n\n  getVolumePatches(obj) {\n    const { secretName } = this.props;\n    const { mountPath } = this.state;\n    const mount = {\n      name: secretName,\n      readOnly: true,\n      mountPath,\n    };\n\n    // Add a volume mount to all containers.\n    // TODO: Let use the user pick the container.\n    const containers = getContainers(obj);\n    const patches = containers.map((container, i) => {\n      // Create the array if it doesn't exist. Append to the array otherwise.\n      const containerPatch = _.isEmpty(container.volumeMounts)\n        ? { op: 'add', path: `/spec/template/spec/containers/${i}/volumeMounts`, value: [mount] }\n        : { op: 'add', path: `/spec/template/spec/containers/${i}/volumeMounts/-`, value: mount };\n      return containerPatch;\n    });\n\n    const volume = {\n      name: secretName,\n      secret: { secretName },\n    };\n    const existingVolumes = _.get(obj, 'spec.template.spec.volumes');\n\n    // Create the array if it doesn't exist. Append to the array otherwise.\n    const volumePatch = _.isEmpty(existingVolumes)\n      ? { op: 'add', path: '/spec/template/spec/volumes', value: [volume] }\n      : { op: 'add', path: '/spec/template/spec/volumes/-', value: volume };\n    return [...patches, volumePatch];\n  }\n\n  getPatches(obj) {\n    return this.state.addAs === 'environment'\n      ? this.getEnvPatches(obj)\n      : this.getVolumePatches(obj);\n  }\n\n  submit = (event: React.FormEvent<EventTarget>) => {\n    event.preventDefault();\n\n    const { workloadsByUID, selectedWorkloadUID } = this.state;\n    if (!selectedWorkloadUID) {\n      this.setState({ errorMessage: 'You must select a workload.' });\n      return;\n    }\n\n    this.setState({ inProgress: true, errorMessage: '' });\n\n    const workload = workloadsByUID[selectedWorkloadUID];\n    const { model, obj } = workload;\n    const patches = this.getPatches(obj);\n    k8sPatch(model, obj, patches)\n      .then(() => {\n        this.setState({ inProgress: false });\n        this.props.close();\n        const { name, namespace } = obj.metadata;\n        history.push(resourcePathFromModel(model, name, namespace));\n      })\n      .catch(({ message: errorMessage }) => this.setState({ inProgress: false, errorMessage }));\n  };\n\n  render() {\n    const { secretName } = this.props;\n    const { addAs, workloadOptions, selectedWorkloadUID } = this.state;\n    const addAsEnvironment = addAs === 'environment';\n    const addAsVolume = addAs === 'volume';\n    const selectWorkloadPlaceholder = 'Select a workload';\n\n    return (\n      <form\n        onSubmit={this.submit}\n        name=\"co-add-secret-to-workload\"\n        className=\"co-add-secret-to-workload modal-content\"\n      >\n        <ModalTitle>Add Secret to Workload</ModalTitle>\n        <ModalBody>\n          <p>\n            Add all values from <ResourceIcon kind=\"Secret\" />\n            {secretName} to a workload as environment variables or a volume.\n          </p>\n          <div className=\"form-group\">\n            <label\n              className=\"control-label co-required\"\n              htmlFor=\"co-add-secret-to-workload__workload\"\n            >\n              Add this secret to workload\n            </label>\n            <Dropdown\n              items={workloadOptions}\n              selectedKey={selectedWorkloadUID}\n              title={selectWorkloadPlaceholder}\n              onChange={this.onWorkloadChange}\n              autocompleteFilter={this.autocompleteFilter}\n              autocompletePlaceholder={selectWorkloadPlaceholder}\n              id=\"co-add-secret-to-workload__workload\"\n            />\n          </div>\n          <fieldset>\n            <legend className=\"co-legend co-required\">Add secret as</legend>\n            <RadioInput\n              title=\"Environment Variables\"\n              name=\"co-add-secret-to-workload__add-as\"\n              id=\"co-add-secret-to-workload__envvars\"\n              value=\"environment\"\n              onChange={this.onAddAsChange}\n              checked={addAsEnvironment}\n            />\n            {addAsEnvironment && (\n              <div className=\"co-m-radio-desc\">\n                <div className=\"form-group\">\n                  <label htmlFor=\"co-add-secret-to-workload__prefix\">Prefix</label>\n                  <input\n                    className=\"pf-c-form-control\"\n                    name=\"prefix\"\n                    id=\"co-add-secret-to-workload__prefix\"\n                    placeholder=\"(optional)\"\n                    type=\"text\"\n                    onChange={this.handleChange}\n                  />\n                </div>\n              </div>\n            )}\n            <RadioInput\n              title=\"Volume\"\n              name=\"co-add-secret-to-workload__add-as\"\n              id=\"co-add-secret-to-workload__volume\"\n              value=\"volume\"\n              onChange={this.onAddAsChange}\n              checked={addAsVolume}\n            />\n            {addAsVolume && (\n              <div className=\"co-m-radio-desc\">\n                <div className=\"form-group\">\n                  <label htmlFor=\"co-add-secret-to-workload__mountpath\" className=\"co-required\">\n                    Mount Path\n                  </label>\n                  <input\n                    className=\"pf-c-form-control\"\n                    name=\"mountPath\"\n                    id=\"co-add-secret-to-workload__mountpath\"\n                    type=\"text\"\n                    onChange={this.handleChange}\n                    required\n                  />\n                </div>\n              </div>\n            )}\n          </fieldset>\n        </ModalBody>\n        <ModalSubmitFooter\n          errorMessage={this.state.errorMessage}\n          inProgress={this.state.inProgress}\n          submitText=\"Save\"\n          cancel={this.props.cancel}\n        />\n      </form>\n    );\n  }\n}\n\nexport const configureAddSecretToWorkloadModal = createModalLauncher<AddSecretToWorkloadModalProps>(\n  AddSecretToWorkloadModal,\n);\n\ntype WorkloadItem = {\n  model: K8sKind;\n  obj: K8sResourceKind;\n};\n\nexport type AddSecretToWorkloadModalProps = {\n  cancel: () => void;\n  close: () => void;\n  secretName: string;\n  namespace: string;\n  blocking?: boolean;\n};\n\nexport type AddSecretToWorkloadModalState = {\n  inProgress: boolean;\n  errorMessage: string;\n  workloadOptions: {\n    [uid: string]: React.ReactNode;\n  };\n  workloadsByUID: {\n    [uid: string]: WorkloadItem;\n  };\n  selectedWorkloadUID: string;\n  addAs: string;\n  prefix: string;\n  mountPath: string;\n};\n"]}]}