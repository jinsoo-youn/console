{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/selector-input.jsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/selector-input.jsx","mtime":1616735742480},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport * as TagsInput from 'react-tagsinput';\nimport * as k8sSelector from '../../module/k8s/selector';\nimport * as k8sSelectorRequirement from '../../module/k8s/selector-requirement';\n// Helpers for cleaning up tags by running them through the selector parser\nconst cleanSelectorStr = (tag) => k8sSelector.selectorToString(k8sSelector.selectorFromString(tag));\nconst cleanTags = (tags) => k8sSelector.split(cleanSelectorStr(tags.join(',')));\nexport class SelectorInput extends React.Component {\n    constructor(props) {\n        super(props);\n        this.isBasic = !!_.get(this.props.options, 'basic');\n        this.setRef = (ref) => (this.ref_ = ref);\n        this.state = {\n            inputValue: '',\n            isInputValid: true,\n            tags: this.props.tags,\n        };\n    }\n    static arrayify(obj) {\n        return _.map(obj, (v, k) => (v ? `${k}=${v}` : k));\n    }\n    static objectify(arr) {\n        const result = {};\n        _.each(arr, (item) => {\n            const [key, value = null] = item.split('=');\n            result[key] = value;\n        });\n        return result;\n    }\n    focus() {\n        this.ref_ && this.ref_.focus();\n    }\n    isTagValid(tag) {\n        const requirement = k8sSelectorRequirement.requirementFromString(tag);\n        return !!(requirement && (!this.isBasic || requirement.operator === 'Equals'));\n    }\n    handleInputChange(e) {\n        // We track the input field value in state so we can retain the input value when an invalid tag is entered.\n        // Otherwise, the default behaviour of TagsInput is to clear the input field.\n        const inputValue = e.target.value;\n        // If the user deletes an existing inputValue, set isInputValid back to true\n        if (inputValue === '') {\n            this.setState({ inputValue, isInputValid: true });\n            return;\n        }\n        this.setState({ inputValue, isInputValid: this.isTagValid(inputValue) });\n    }\n    handleChange(tags, changed) {\n        // The way we use TagsInput, there should only ever be one new tag in changed\n        const newTag = changed[0];\n        if (!this.isTagValid(newTag)) {\n            this.setState({ isInputValid: false });\n            return;\n        }\n        // Clean up the new tag by running it through the selector parser\n        const cleanNewTag = cleanSelectorStr(newTag);\n        // Is the new tag a duplicate of an already existing tag?\n        // Note that TagsInput accepts an onlyUnique property, but we handle this logic ourselves so that we can set a\n        // custom error class\n        if (_.filter(tags, (tag) => tag === cleanNewTag).length > 1) {\n            this.setState({ isInputValid: false });\n            return;\n        }\n        const newTags = cleanTags(tags);\n        this.setState({ inputValue: '', isInputValid: true, tags: newTags });\n        this.props.onChange(newTags);\n    }\n    render() {\n        const { inputValue, isInputValid, tags } = this.state;\n        // Keys that add tags: Enter\n        const addKeys = [13];\n        // Backspace deletes tags, but not if there is text being edited in the input field\n        const removeKeys = inputValue.length ? [] : [8];\n        const inputProps = Object.assign({ autoFocus: this.props.autoFocus, className: classNames('input', { 'invalid-tag': !isInputValid }), onChange: this.handleInputChange.bind(this), placeholder: _.isEmpty(tags) ? 'app=frontend' : '', spellCheck: 'false', value: inputValue, id: 'tags-input' }, (this.props.inputProps || {}));\n        const renderTag = ({ tag, key, onRemove, getTagDisplayValue }) => {\n            return (React.createElement(\"span\", { className: classNames('tag-item', this.props.labelClassName), key: key },\n                React.createElement(\"span\", { className: \"tag-item__content\" }, getTagDisplayValue(tag)),\n                \"\\u00A0\",\n                React.createElement(\"a\", { className: \"remove-button\", onClick: () => onRemove(key) }, \"\\u00D7\")));\n        };\n        return (React.createElement(\"div\", { className: \"co-search-input pf-c-form-control\" },\n            React.createElement(\"tags-input\", null,\n                React.createElement(TagsInput, { ref: this.setRef, className: \"tags\", value: tags, addKeys: addKeys, removeKeys: removeKeys, inputProps: inputProps, renderTag: renderTag, onChange: this.handleChange.bind(this), addOnBlur: true }))));\n    }\n}\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/selector-input.jsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/selector-input.jsx"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport * as TagsInput from 'react-tagsinput';\n\nimport * as k8sSelector from '../../module/k8s/selector';\nimport * as k8sSelectorRequirement from '../../module/k8s/selector-requirement';\n\n// Helpers for cleaning up tags by running them through the selector parser\nconst cleanSelectorStr = (tag) => k8sSelector.selectorToString(k8sSelector.selectorFromString(tag));\nconst cleanTags = (tags) => k8sSelector.split(cleanSelectorStr(tags.join(',')));\n\nexport class SelectorInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.isBasic = !!_.get(this.props.options, 'basic');\n    this.setRef = (ref) => (this.ref_ = ref);\n    this.state = {\n      inputValue: '',\n      isInputValid: true,\n      tags: this.props.tags,\n    };\n  }\n\n  static arrayify(obj) {\n    return _.map(obj, (v, k) => (v ? `${k}=${v}` : k));\n  }\n\n  static objectify(arr) {\n    const result = {};\n    _.each(arr, (item) => {\n      const [key, value = null] = item.split('=');\n      result[key] = value;\n    });\n    return result;\n  }\n\n  focus() {\n    this.ref_ && this.ref_.focus();\n  }\n\n  isTagValid(tag) {\n    const requirement = k8sSelectorRequirement.requirementFromString(tag);\n    return !!(requirement && (!this.isBasic || requirement.operator === 'Equals'));\n  }\n\n  handleInputChange(e) {\n    // We track the input field value in state so we can retain the input value when an invalid tag is entered.\n    // Otherwise, the default behaviour of TagsInput is to clear the input field.\n    const inputValue = e.target.value;\n\n    // If the user deletes an existing inputValue, set isInputValid back to true\n    if (inputValue === '') {\n      this.setState({ inputValue, isInputValid: true });\n      return;\n    }\n\n    this.setState({ inputValue, isInputValid: this.isTagValid(inputValue) });\n  }\n\n  handleChange(tags, changed) {\n    // The way we use TagsInput, there should only ever be one new tag in changed\n    const newTag = changed[0];\n\n    if (!this.isTagValid(newTag)) {\n      this.setState({ isInputValid: false });\n      return;\n    }\n\n    // Clean up the new tag by running it through the selector parser\n    const cleanNewTag = cleanSelectorStr(newTag);\n\n    // Is the new tag a duplicate of an already existing tag?\n    // Note that TagsInput accepts an onlyUnique property, but we handle this logic ourselves so that we can set a\n    // custom error class\n    if (_.filter(tags, (tag) => tag === cleanNewTag).length > 1) {\n      this.setState({ isInputValid: false });\n      return;\n    }\n\n    const newTags = cleanTags(tags);\n    this.setState({ inputValue: '', isInputValid: true, tags: newTags });\n    this.props.onChange(newTags);\n  }\n\n  render() {\n    const { inputValue, isInputValid, tags } = this.state;\n\n    // Keys that add tags: Enter\n    const addKeys = [13];\n\n    // Backspace deletes tags, but not if there is text being edited in the input field\n    const removeKeys = inputValue.length ? [] : [8];\n\n    const inputProps = {\n      autoFocus: this.props.autoFocus,\n      className: classNames('input', { 'invalid-tag': !isInputValid }),\n      onChange: this.handleInputChange.bind(this),\n      placeholder: _.isEmpty(tags) ? 'app=frontend' : '',\n      spellCheck: 'false',\n      value: inputValue,\n      id: 'tags-input',\n      ...(this.props.inputProps || {}),\n    };\n\n    const renderTag = ({ tag, key, onRemove, getTagDisplayValue }) => {\n      return (\n        <span className={classNames('tag-item', this.props.labelClassName)} key={key}>\n          <span className=\"tag-item__content\">{getTagDisplayValue(tag)}</span>\n          &nbsp;\n          <a className=\"remove-button\" onClick={() => onRemove(key)}>\n            ×\n          </a>\n        </span>\n      );\n    };\n\n    return (\n      <div className=\"co-search-input pf-c-form-control\">\n        <tags-input>\n          <TagsInput\n            ref={this.setRef}\n            className=\"tags\"\n            value={tags}\n            addKeys={addKeys}\n            removeKeys={removeKeys}\n            inputProps={inputProps}\n            renderTag={renderTag}\n            onChange={this.handleChange.bind(this)}\n            addOnBlur\n          />\n        </tags-input>\n      </div>\n    );\n  }\n}\n"]}]}