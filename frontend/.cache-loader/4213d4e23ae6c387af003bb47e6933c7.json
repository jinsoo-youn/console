{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/selectors/node.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/selectors/node.ts","mtime":1616735742380},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nconst NODE_ROLE_PREFIX = 'node-role.kubernetes.io/';\nexport const getNodeRoles = (node) => {\n    const labels = _.get(node, 'metadata.labels');\n    return _.reduce(labels, (acc, v, k) => {\n        if (k.startsWith(NODE_ROLE_PREFIX)) {\n            acc.push(k.slice(NODE_ROLE_PREFIX.length));\n        }\n        return acc;\n    }, []);\n};\nexport const getNodeRole = (node) => getNodeRoles(node).includes('master') ? 'master' : 'worker';\nexport const getNodeAddresses = (node) => _.get(node, 'status.addresses', []);\nexport const getNodeMachineNameAndNamespace = (node) => {\n    const machine = _.get(node, 'metadata.annotations[\"machine.openshift.io/machine\"]', '/');\n    const [namespace, name] = machine.split('/');\n    return { namespace, name };\n};\nexport const getNodeMachineName = (node) => getNodeMachineNameAndNamespace(node).name;\nexport const isNodeUnschedulable = (node) => _.get(node, 'spec.unschedulable', false);\nexport const isNodeReady = (node) => {\n    const conditions = _.get(node, 'status.conditions', []);\n    const readyState = _.find(conditions, { type: 'Ready' });\n    return readyState && readyState.status === 'True';\n};\nexport const getNodeSecondaryStatus = (node) => {\n    const states = [];\n    if (isNodeUnschedulable(node)) {\n        states.push('Scheduling disabled');\n    }\n    return states;\n};\nexport const getNodeCPUCapacity = (node) => _.get(node.status, 'capacity.cpu');\nexport const getNodeAllocatableMemory = (node) => _.get(node.status, 'allocatable.memory');\nexport const getNodeTaints = (node) => { var _a; return (_a = node === null || node === void 0 ? void 0 : node.spec) === null || _a === void 0 ? void 0 : _a.taints; };\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/selectors/node.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/selectors/node.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport { NodeAddress, NodeCondition } from '../types';\n\nconst NODE_ROLE_PREFIX = 'node-role.kubernetes.io/';\n\nexport const getNodeRoles = (node: NodeKind): string[] => {\n  const labels = _.get(node, 'metadata.labels');\n  return _.reduce(\n    labels,\n    (acc: string[], v: string, k: string) => {\n      if (k.startsWith(NODE_ROLE_PREFIX)) {\n        acc.push(k.slice(NODE_ROLE_PREFIX.length));\n      }\n      return acc;\n    },\n    [],\n  );\n};\n\nexport const getNodeRole = (node: NodeKind): string =>\n  getNodeRoles(node).includes('master') ? 'master' : 'worker';\n\nexport const getNodeAddresses = (node: NodeKind): NodeAddress[] =>\n  _.get(node, 'status.addresses', []);\n\ntype NodeMachineAndNamespace = {\n  name: string;\n  namespace: string;\n};\nexport const getNodeMachineNameAndNamespace = (node: NodeKind): NodeMachineAndNamespace => {\n  const machine = _.get(node, 'metadata.annotations[\"machine.openshift.io/machine\"]', '/');\n  const [namespace, name] = machine.split('/');\n  return { namespace, name };\n};\n\nexport const getNodeMachineName = (node: NodeKind): string =>\n  getNodeMachineNameAndNamespace(node).name;\n\nexport const isNodeUnschedulable = (node: NodeKind): boolean =>\n  _.get(node, 'spec.unschedulable', false);\n\nexport const isNodeReady = (node: NodeKind): boolean => {\n  const conditions = _.get(node, 'status.conditions', []);\n  const readyState = _.find(conditions, { type: 'Ready' }) as NodeCondition;\n\n  return readyState && readyState.status === 'True';\n};\n\nexport const getNodeSecondaryStatus = (node: NodeKind): string[] => {\n  const states = [];\n  if (isNodeUnschedulable(node)) {\n    states.push('Scheduling disabled');\n  }\n  return states;\n};\n\nexport const getNodeCPUCapacity = (node: NodeKind): string => _.get(node.status, 'capacity.cpu');\n\nexport const getNodeAllocatableMemory = (node: NodeKind): string =>\n  _.get(node.status, 'allocatable.memory');\n\nexport const getNodeTaints = (node: NodeKind) => node?.spec?.taints;\n"]}]}