{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/get-resources.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/get-resources.ts","mtime":1615298458760},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport { plural } from 'pluralize';\nimport { coFetchJSON } from '../../co-fetch';\nimport { API_DISCOVERY_RESOURCES_LOCAL_STORAGE_KEY } from '@console/shared/src/constants';\nconst ADMIN_RESOURCES = new Set([\n    'roles',\n    'rolebindings',\n    'clusterroles',\n    'clusterrolebindings',\n    'thirdpartyresources',\n    'nodes',\n    'secrets',\n]);\nconst abbrBlacklist = ['ASS'];\nexport const kindToAbbr = (kind) => {\n    const abbrKind = (kind.replace(/[^A-Z]/g, '') || kind.toUpperCase()).slice(0, 3);\n    return abbrBlacklist.includes(abbrKind) ? abbrKind.slice(0, -1) : abbrKind;\n};\nexport const cacheResources = (resources) => new Promise((resolve, reject) => {\n    try {\n        // Add the console version. We invalidate the cache when console version changes.\n        const { consoleVersion } = window.SERVER_FLAGS;\n        const versionedResources = _.assign({}, resources, { consoleVersion });\n        localStorage.setItem(API_DISCOVERY_RESOURCES_LOCAL_STORAGE_KEY, JSON.stringify(versionedResources));\n        resolve();\n    }\n    catch (e) {\n        // eslint-disable-next-line no-console\n        console.error('Error caching API resources in localStorage', e);\n        reject(e);\n    }\n});\nexport const getCachedResources = () => new Promise((resolve, reject) => {\n    try {\n        const resourcesJSON = localStorage.getItem(API_DISCOVERY_RESOURCES_LOCAL_STORAGE_KEY);\n        // Clear cached resources after load as a safeguard. If there's any errors\n        // with the content that prevents the console from working, the bad data\n        // will not be loaded when the user refreshes the console. The cache will\n        // be refreshed when discovery completes.\n        localStorage.removeItem(API_DISCOVERY_RESOURCES_LOCAL_STORAGE_KEY);\n        if (resourcesJSON) {\n            const resources = JSON.parse(resourcesJSON);\n            const { consoleVersion: currentVersion } = window.SERVER_FLAGS;\n            const { consoleVersion: cachedVersion } = resources;\n            if (cachedVersion !== currentVersion) {\n                // eslint-disable-next-line no-console\n                console.log(`Invalidating API discovery cache from earlier console version (current: ${currentVersion}, cached: ${cachedVersion})`);\n                resolve(null);\n                return;\n            }\n            // eslint-disable-next-line no-console\n            console.log('Loaded cached API resources from localStorage');\n            resolve(resources);\n            return;\n        }\n    }\n    catch (e) {\n        // eslint-disable-next-line no-console\n        console.error('Error reading API resources from localStorage', e);\n        reject(e);\n    }\n    resolve(null);\n});\nexport const pluralizeKind = (kind) => {\n    // Use startCase to separate words so the last can be pluralized but remove spaces so as not to humanize\n    const pluralized = plural(_.startCase(kind)).replace(/\\s+/g, '');\n    // Handle special cases like DB -> DBs (instead of DBS).\n    if (pluralized === `${kind}S`) {\n        return `${kind}s`;\n    }\n    return pluralized;\n};\nexport const getResources = () => coFetchJSON('api/kubernetes/apis').then((res) => {\n    const preferredVersions = res.groups.map((group) => group.preferredVersion);\n    const all = _.flatten(res.groups.map((group) => group.versions.map((version) => `/apis/${version.groupVersion}`)))\n        .concat(['/api/v1'])\n        .map((p) => coFetchJSON(`api/kubernetes${p}`).catch((err) => err));\n    return Promise.all(all).then((data) => {\n        const resourceSet = new Set();\n        const namespacedSet = new Set();\n        data.forEach((d) => d.resources &&\n            d.resources.forEach(({ namespaced, name }) => {\n                resourceSet.add(name);\n                namespaced && namespacedSet.add(name);\n            }));\n        const allResources = [...resourceSet].sort();\n        const safeResources = [];\n        const adminResources = [];\n        const defineModels = (list) => {\n            const groupVersionParts = list.groupVersion.split('/');\n            const apiGroup = groupVersionParts.length > 1 ? groupVersionParts[0] : null;\n            const apiVersion = groupVersionParts.length > 1 ? groupVersionParts[1] : list.groupVersion;\n            return list.resources\n                .filter(({ name }) => !name.includes('/'))\n                .map(({ name, singularName, namespaced, kind, verbs, shortNames }) => {\n                return Object.assign(Object.assign({ kind,\n                    namespaced,\n                    verbs,\n                    shortNames, label: kind, plural: name, apiVersion, abbr: kindToAbbr(kind) }, (apiGroup ? { apiGroup } : {})), { labelPlural: pluralizeKind(kind), path: name, id: singularName, crd: true });\n            });\n        };\n        const models = _.flatten(data.filter((d) => d.resources).map(defineModels));\n        allResources.forEach((r) => ADMIN_RESOURCES.has(r.split('/')[0]) ? adminResources.push(r) : safeResources.push(r));\n        const configResources = _.filter(models, (m) => m.apiGroup === 'config.openshift.io' && m.kind !== 'ClusterOperator');\n        return {\n            allResources,\n            safeResources,\n            adminResources,\n            configResources,\n            namespacedSet,\n            models,\n            preferredVersions,\n        };\n    });\n});\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/get-resources.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/get-resources.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\nimport { plural } from 'pluralize';\n\nimport { coFetchJSON } from '../../co-fetch';\nimport { K8sKind, K8sVerb } from '../../module/k8s';\nimport { API_DISCOVERY_RESOURCES_LOCAL_STORAGE_KEY } from '@console/shared/src/constants';\n\nconst ADMIN_RESOURCES = new Set([\n  'roles',\n  'rolebindings',\n  'clusterroles',\n  'clusterrolebindings',\n  'thirdpartyresources',\n  'nodes',\n  'secrets',\n]);\n\nconst abbrBlacklist = ['ASS'];\nexport const kindToAbbr = (kind) => {\n  const abbrKind = (kind.replace(/[^A-Z]/g, '') || kind.toUpperCase()).slice(0, 3);\n  return abbrBlacklist.includes(abbrKind) ? abbrKind.slice(0, -1) : abbrKind;\n};\n\nexport const cacheResources = (resources) =>\n  new Promise<void>((resolve, reject) => {\n    try {\n      // Add the console version. We invalidate the cache when console version changes.\n      const { consoleVersion } = window.SERVER_FLAGS;\n      const versionedResources = _.assign({}, resources, { consoleVersion });\n      localStorage.setItem(\n        API_DISCOVERY_RESOURCES_LOCAL_STORAGE_KEY,\n        JSON.stringify(versionedResources),\n      );\n      resolve();\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error('Error caching API resources in localStorage', e);\n      reject(e);\n    }\n  });\n\nexport const getCachedResources = () =>\n  new Promise<any>((resolve, reject) => {\n    try {\n      const resourcesJSON = localStorage.getItem(API_DISCOVERY_RESOURCES_LOCAL_STORAGE_KEY);\n\n      // Clear cached resources after load as a safeguard. If there's any errors\n      // with the content that prevents the console from working, the bad data\n      // will not be loaded when the user refreshes the console. The cache will\n      // be refreshed when discovery completes.\n      localStorage.removeItem(API_DISCOVERY_RESOURCES_LOCAL_STORAGE_KEY);\n\n      if (resourcesJSON) {\n        const resources = JSON.parse(resourcesJSON);\n        const { consoleVersion: currentVersion } = window.SERVER_FLAGS;\n        const { consoleVersion: cachedVersion } = resources;\n        if (cachedVersion !== currentVersion) {\n          // eslint-disable-next-line no-console\n          console.log(\n            `Invalidating API discovery cache from earlier console version (current: ${currentVersion}, cached: ${cachedVersion})`,\n          );\n          resolve(null);\n          return;\n        }\n        // eslint-disable-next-line no-console\n        console.log('Loaded cached API resources from localStorage');\n        resolve(resources);\n        return;\n      }\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error('Error reading API resources from localStorage', e);\n      reject(e);\n    }\n\n    resolve(null);\n  });\n\nexport type DiscoveryResources = {\n  adminResources: string[];\n  allResources: string[];\n  configResources: K8sKind[];\n  models: K8sKind[];\n  namespacedSet: Set<string>;\n  preferredVersions: { groupVersion: string; version: string }[];\n  safeResources: string[];\n};\n\nexport const pluralizeKind = (kind: string): string => {\n  // Use startCase to separate words so the last can be pluralized but remove spaces so as not to humanize\n  const pluralized = plural(_.startCase(kind)).replace(/\\s+/g, '');\n  // Handle special cases like DB -> DBs (instead of DBS).\n  if (pluralized === `${kind}S`) {\n    return `${kind}s`;\n  }\n  return pluralized;\n};\n\nexport const getResources = () =>\n  coFetchJSON('api/kubernetes/apis').then((res) => {\n    const preferredVersions = res.groups.map((group) => group.preferredVersion);\n    const all: Promise<APIResourceList>[] = _.flatten(\n      res.groups.map((group) => group.versions.map((version) => `/apis/${version.groupVersion}`)),\n    )\n      .concat(['/api/v1'])\n      .map((p) => coFetchJSON(`api/kubernetes${p}`).catch((err) => err));\n\n    return Promise.all(all).then((data) => {\n      const resourceSet = new Set<string>();\n      const namespacedSet = new Set<string>();\n      data.forEach(\n        (d) =>\n          d.resources &&\n          d.resources.forEach(({ namespaced, name }) => {\n            resourceSet.add(name);\n            namespaced && namespacedSet.add(name);\n          }),\n      );\n      const allResources = [...resourceSet].sort();\n\n      const safeResources = [];\n      const adminResources = [];\n\n      const defineModels = (list: APIResourceList): K8sKind[] => {\n        const groupVersionParts = list.groupVersion.split('/');\n        const apiGroup = groupVersionParts.length > 1 ? groupVersionParts[0] : null;\n        const apiVersion = groupVersionParts.length > 1 ? groupVersionParts[1] : list.groupVersion;\n        return list.resources\n          .filter(({ name }) => !name.includes('/'))\n          .map(({ name, singularName, namespaced, kind, verbs, shortNames }) => {\n            return {\n              kind,\n              namespaced,\n              verbs,\n              shortNames,\n              label: kind,\n              plural: name,\n              apiVersion,\n              abbr: kindToAbbr(kind),\n              ...(apiGroup ? { apiGroup } : {}),\n              labelPlural: pluralizeKind(kind),\n              path: name,\n              id: singularName,\n              crd: true,\n            };\n          });\n      };\n\n      const models = _.flatten(data.filter((d) => d.resources).map(defineModels));\n      allResources.forEach((r) =>\n        ADMIN_RESOURCES.has(r.split('/')[0]) ? adminResources.push(r) : safeResources.push(r),\n      );\n      const configResources = _.filter(\n        models,\n        (m) => m.apiGroup === 'config.openshift.io' && m.kind !== 'ClusterOperator',\n      );\n\n      return {\n        allResources,\n        safeResources,\n        adminResources,\n        configResources,\n        namespacedSet,\n        models,\n        preferredVersions,\n      } as DiscoveryResources;\n    });\n  });\n\nexport type APIResourceList = {\n  kind: 'APIResourceList';\n  apiVersion: 'v1';\n  groupVersion: string;\n  resources?: {\n    name: string;\n    singularName?: string;\n    namespaced?: boolean;\n    kind: string;\n    verbs: K8sVerb[];\n    shortNames?: string[];\n  }[];\n};\n"]}]}