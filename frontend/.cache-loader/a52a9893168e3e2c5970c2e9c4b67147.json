{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/tags.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/tags.tsx","mtime":1616735742470},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { k8sGet } from '../../module/k8s';\nimport { RepositoryModel } from '../../models/hypercloud';\nimport { compoundExpand, sortable } from '@patternfly/react-table';\nimport { Kebab, ResourceKebab } from '../utils';\nimport { SingleExpandableTable } from './utils/expandable-table';\nimport { ExpandableInnerTable } from './utils/expandable-inner-table';\nexport const menuActions = [Kebab.factory.ModifyScanning];\nconst tableColumnClasses = [\n    Kebab.columnClass,\n];\nexport const Tags = ({ tags, namespace, repository, registry, isExtRegistry }) => {\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(TagsListTable, { tags: tags, namespace: namespace, repository: repository, registry: registry, isExtRegistry: isExtRegistry }))));\n};\nconst TagsListTable = ({ tags, namespace, repository, registry, isExtRegistry }) => {\n    const TagsListHeaderColumns = [\n        'Name',\n        'Signer',\n        {\n            title: 'Scan Result',\n            cellTransforms: [compoundExpand],\n        },\n        'Created Time',\n        {\n            title: '',\n            props: { className: tableColumnClasses[0] }\n        }\n    ];\n    const rowRenderer = (index, obj) => {\n        obj.registry = registry;\n        obj.repository = repository;\n        obj.kind = 'Tag';\n        obj.namespace = namespace;\n        obj.isExtRegistry = isExtRegistry;\n        return [\n            {\n                title: obj === null || obj === void 0 ? void 0 : obj.version,\n            },\n            {\n                title: obj === null || obj === void 0 ? void 0 : obj.signer,\n            },\n            {\n                title: obj === null || obj === void 0 ? void 0 : obj.severity,\n                props: {\n                    isOpen: false,\n                },\n            },\n            {\n                title: obj === null || obj === void 0 ? void 0 : obj.createdAt\n            },\n            {\n                title: React.createElement(ResourceKebab, { actions: menuActions, kind: 'Tag', resource: obj }),\n                props: { className: tableColumnClasses[0] }\n            }\n        ];\n    };\n    const innerRenderer = parentItem => {\n        const ScanResultTableRow = obj => {\n            return [\n                {\n                    title: React.createElement(\"a\", { href: obj.link, target: \"_blank\" }, obj.name),\n                    textValue: obj.name,\n                },\n                {\n                    title: obj.severity,\n                    textValue: obj.severity,\n                },\n                {\n                    title: obj.version,\n                    textValue: obj.version,\n                },\n            ];\n        };\n        const ScanResultTableHeader = [\n            {\n                title: 'Vulnerability',\n                sortFunc: 'string',\n                transforms: [sortable],\n            },\n            {\n                title: 'Status',\n                transforms: [sortable],\n            },\n            {\n                title: 'Fixable Version',\n                transforms: [sortable],\n            },\n        ];\n        const model = Object.assign({}, RepositoryModel);\n        model.apiGroup = 'registry.' + model.apiGroup;\n        if (isExtRegistry) {\n            model.plural = 'ext-repositories';\n        }\n        return k8sGet(model, repository, namespace, { path: `imagescanresults/${parentItem.version}` })\n            .then(res => {\n            const innerItemsData = [];\n            const resObj = _.get(res, parentItem.version);\n            for (const proerty in resObj) {\n                for (let i = 0; i < resObj[proerty].length; ++i) {\n                    innerItemsData.push({\n                        severity: resObj[proerty][i].Severity,\n                        name: resObj[proerty][i].Name,\n                        version: resObj[proerty][i].NamespaceName,\n                        link: resObj[proerty][i].Link\n                    });\n                }\n            }\n            return React.createElement(ExpandableInnerTable, { \"aria-label\": \"Scan Result\", header: ScanResultTableHeader, Row: ScanResultTableRow, data: innerItemsData });\n        })\n            .catch(err => {\n            return React.createElement(\"div\", null, err);\n        });\n    };\n    return React.createElement(SingleExpandableTable, { header: TagsListHeaderColumns, itemList: tags, rowRenderer: rowRenderer, innerRenderer: innerRenderer, compoundParent: 2 });\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/tags.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/tags.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { k8sGet } from '../../module/k8s';\nimport { RepositoryModel } from '../../models/hypercloud';\nimport { compoundExpand, sortable } from '@patternfly/react-table';\nimport { Kebab, ResourceKebab } from '../utils';\nimport { SingleExpandableTable } from './utils/expandable-table';\nimport { ExpandableInnerTable } from './utils/expandable-inner-table';\n\nexport const menuActions = [Kebab.factory.ModifyScanning];\n\nconst tableColumnClasses = [\n  Kebab.columnClass,\n];\n\nexport const Tags: React.SFC<TagsProps> = ({ tags, namespace, repository, registry, isExtRegistry }) => {\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <TagsListTable tags={tags} namespace={namespace} repository={repository} registry={registry} isExtRegistry={isExtRegistry} />\n      </div>\n    </>\n  );\n}\n\nconst TagsListTable = ({ tags, namespace, repository, registry, isExtRegistry }) => {\n\n  const TagsListHeaderColumns = [\n    'Name',\n    'Signer',\n    {\n      title: 'Scan Result',\n      cellTransforms: [compoundExpand],\n    },\n    'Created Time',\n    {\n      title: '',\n      props: { className: tableColumnClasses[0] }\n    }\n  ];\n\n  const rowRenderer = (index, obj) => {\n    obj.registry = registry;\n    obj.repository = repository;\n    obj.kind = 'Tag';\n    obj.namespace = namespace;\n    obj.isExtRegistry = isExtRegistry;\n    return [\n      {\n        title: obj?.version,\n      },\n      {\n        title: obj?.signer,\n      },\n      {\n        title: obj?.severity,\n        props: {\n          isOpen: false,\n        },\n      },\n      {\n        title: obj?.createdAt\n      },\n      {\n        title: <ResourceKebab actions={menuActions} kind='Tag' resource={obj} />,\n        props: { className: tableColumnClasses[0] }\n      }\n    ];\n  };\n\n  const innerRenderer = parentItem => {\n\n    const ScanResultTableRow = obj => {\n      return [\n        {\n          title: <a href={obj.link} target=\"_blank\">{obj.name}</a>,\n          textValue: obj.name,\n        },\n        {\n          title: obj.severity,\n          textValue: obj.severity,\n        },\n        {\n          title: obj.version,\n          textValue: obj.version,\n        },\n      ];\n    };\n\n    const ScanResultTableHeader = [\n      {\n        title: 'Vulnerability',\n        sortFunc: 'string',\n        transforms: [sortable],\n      },\n      {\n        title: 'Status',\n        transforms: [sortable],\n      },\n      {\n        title: 'Fixable Version',\n        transforms: [sortable],\n      },\n    ];\n\n    const model = Object.assign({}, RepositoryModel);\n    model.apiGroup = 'registry.' + model.apiGroup;\n    if (isExtRegistry) {\n      model.plural = 'ext-repositories';\n    }\n\n    return k8sGet(model, repository, namespace, { path: `imagescanresults/${parentItem.version}` })\n      .then(res => {\n        const innerItemsData = [];\n        const resObj = _.get(res, parentItem.version);\n\n        for (const proerty in resObj) {\n          for (let i = 0; i < resObj[proerty].length; ++i) {\n            innerItemsData.push({\n              severity: resObj[proerty][i].Severity,\n              name: resObj[proerty][i].Name,\n              version: resObj[proerty][i].NamespaceName,\n              link: resObj[proerty][i].Link\n            });\n          }\n        }\n        return <ExpandableInnerTable aria-label=\"Scan Result\" header={ScanResultTableHeader} Row={ScanResultTableRow} data={innerItemsData} />;\n      })\n      .catch(err => {\n        return <div>{err}</div>;\n      });\n  }\n\n  return <SingleExpandableTable header={TagsListHeaderColumns} itemList={tags} rowRenderer={rowRenderer} innerRenderer={innerRenderer} compoundParent={2}></SingleExpandableTable>;\n}\n\nexport type TagsProps = {\n  tags: any;\n  namespace: string;\n  repository?: string;\n  registry?: string;\n  isExtRegistry?: boolean;\n};\n"]}]}