{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/git-service/src/services/bitbucket-service.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/git-service/src/services/bitbucket-service.ts","mtime":1616735742400},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as ParseBitbucketUrl from 'parse-bitbucket-url';\nimport { SecretType, } from '../types';\nimport { BaseService } from './base-service';\nimport { coFetchJSON } from '@console/internal/co-fetch';\nexport class BitbucketService extends BaseService {\n    constructor(gitsource) {\n        super(gitsource);\n        this.baseURL = 'https://api.bitbucket.org/2.0';\n        this.getAuthProvider = () => {\n            switch (this.gitsource.secretType) {\n                case SecretType.BASIC_AUTH: {\n                    const { username, password } = this.gitsource.secretContent;\n                    return { type: 'basic', username, password };\n                }\n                case SecretType.NO_AUTH:\n                    return null;\n                default:\n                    return null;\n            }\n        };\n        this.getRepoMetadata = () => {\n            const { name, owner, host, branch } = ParseBitbucketUrl(this.gitsource.url);\n            return { repoName: name, owner, host, defaultBranch: this.gitsource.ref || branch };\n        };\n        this.isRepoReachable = () => __awaiter(this, void 0, void 0, function* () {\n            const url = `${this.baseURL}/repositories/${this.metadata.owner}/${this.metadata.repoName}`;\n            try {\n                const data = yield coFetchJSON(url);\n                return data.slug === this.metadata.repoName;\n            }\n            catch (e) {\n                return false;\n            }\n        });\n        this.getRepoBranchList = () => __awaiter(this, void 0, void 0, function* () {\n            const url = `${this.baseURL}/repositories/${this.metadata.owner}/${this.metadata.repoName}/refs/branches`;\n            try {\n                const data = yield coFetchJSON(url);\n                const list = data.values.map((b) => b.name);\n                return { branches: list };\n            }\n            catch (e) {\n                return { branches: [] };\n            }\n        });\n        this.getRepoFileList = () => __awaiter(this, void 0, void 0, function* () {\n            const url = `${this.baseURL}/repositories/${this.metadata.owner}/${this.metadata.repoName}/src/${this.metadata.defaultBranch}/?pagelen=50`;\n            try {\n                const data = yield coFetchJSON(url);\n                const files = data.values.map((f) => f.path);\n                return { files };\n            }\n            catch (e) {\n                return { files: [] };\n            }\n        });\n        this.getRepoLanguageList = () => __awaiter(this, void 0, void 0, function* () {\n            const url = `${this.baseURL}/repositories/${this.metadata.owner}/${this.metadata.repoName}`;\n            try {\n                const data = yield coFetchJSON(url);\n                return { languages: [data.language] };\n            }\n            catch (e) {\n                return { languages: [] };\n            }\n        });\n        this.isDockerfilePresent = () => __awaiter(this, void 0, void 0, function* () {\n            const url = `${this.baseURL}/repositories/${this.metadata.owner}/${this.metadata.repoName}/src/${this.metadata.defaultBranch}/Dockerfile`;\n            try {\n                yield coFetchJSON(url);\n                return true;\n            }\n            catch (e) {\n                return false;\n            }\n        });\n        this.getDockerfileContent = () => __awaiter(this, void 0, void 0, function* () {\n            const url = `${this.baseURL}/repositories/${this.metadata.owner}/${this.metadata.repoName}/src/${this.metadata.defaultBranch}/Dockerfile`;\n            try {\n                const data = yield coFetchJSON(url);\n                return data;\n            }\n            catch (e) {\n                return null;\n            }\n        });\n        this.getPackageJsonContent = () => __awaiter(this, void 0, void 0, function* () {\n            const url = `${this.baseURL}/repositories/${this.metadata.owner}/${this.metadata.repoName}/src/${this.metadata.defaultBranch}/package.json`;\n            try {\n                const data = yield coFetchJSON(url);\n                return data;\n            }\n            catch (e) {\n                return null;\n            }\n        });\n        this.metadata = this.getRepoMetadata();\n    }\n}\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/git-service/src/services/bitbucket-service.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/git-service/src/services/bitbucket-service.ts"],"names":[],"mappings":"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","sourcesContent":["import * as ParseBitbucketUrl from 'parse-bitbucket-url';\nimport {\n  GitSource,\n  SecretType,\n  RepoMetadata,\n  BranchList,\n  RepoLanguageList,\n  RepoFileList,\n} from '../types';\nimport { BaseService } from './base-service';\nimport { coFetchJSON } from '@console/internal/co-fetch';\n\nexport class BitbucketService extends BaseService {\n  private readonly metadata: RepoMetadata;\n\n  private readonly baseURL = 'https://api.bitbucket.org/2.0';\n\n  constructor(gitsource: GitSource) {\n    super(gitsource);\n    this.metadata = this.getRepoMetadata();\n  }\n\n  protected getAuthProvider = (): any => {\n    switch (this.gitsource.secretType) {\n      case SecretType.BASIC_AUTH: {\n        const { username, password } = this.gitsource.secretContent;\n        return { type: 'basic', username, password };\n      }\n      case SecretType.NO_AUTH:\n        return null;\n      default:\n        return null;\n    }\n  };\n\n  getRepoMetadata = (): RepoMetadata => {\n    const { name, owner, host, branch } = ParseBitbucketUrl(this.gitsource.url);\n    return { repoName: name, owner, host, defaultBranch: this.gitsource.ref || branch };\n  };\n\n  isRepoReachable = async (): Promise<boolean> => {\n    const url = `${this.baseURL}/repositories/${this.metadata.owner}/${this.metadata.repoName}`;\n    try {\n      const data = await coFetchJSON(url);\n      return data.slug === this.metadata.repoName;\n    } catch (e) {\n      return false;\n    }\n  };\n\n  getRepoBranchList = async (): Promise<BranchList> => {\n    const url = `${this.baseURL}/repositories/${this.metadata.owner}/${this.metadata.repoName}/refs/branches`;\n    try {\n      const data = await coFetchJSON(url);\n      const list = data.values.map((b) => b.name);\n      return { branches: list };\n    } catch (e) {\n      return { branches: [] };\n    }\n  };\n\n  getRepoFileList = async (): Promise<RepoFileList> => {\n    const url = `${this.baseURL}/repositories/${this.metadata.owner}/${this.metadata.repoName}/src/${this.metadata.defaultBranch}/?pagelen=50`;\n    try {\n      const data = await coFetchJSON(url);\n      const files = data.values.map((f) => f.path);\n      return { files };\n    } catch (e) {\n      return { files: [] };\n    }\n  };\n\n  getRepoLanguageList = async (): Promise<RepoLanguageList> => {\n    const url = `${this.baseURL}/repositories/${this.metadata.owner}/${this.metadata.repoName}`;\n    try {\n      const data = await coFetchJSON(url);\n      return { languages: [data.language] };\n    } catch (e) {\n      return { languages: [] };\n    }\n  };\n\n  isDockerfilePresent = async (): Promise<boolean> => {\n    const url = `${this.baseURL}/repositories/${this.metadata.owner}/${this.metadata.repoName}/src/${this.metadata.defaultBranch}/Dockerfile`;\n    try {\n      await coFetchJSON(url);\n      return true;\n    } catch (e) {\n      return false;\n    }\n  };\n\n  getDockerfileContent = async (): Promise<string | null> => {\n    const url = `${this.baseURL}/repositories/${this.metadata.owner}/${this.metadata.repoName}/src/${this.metadata.defaultBranch}/Dockerfile`;\n    try {\n      const data = await coFetchJSON(url);\n      return data as string;\n    } catch (e) {\n      return null;\n    }\n  };\n\n  getPackageJsonContent = async (): Promise<string | null> => {\n    const url = `${this.baseURL}/repositories/${this.metadata.owner}/${this.metadata.repoName}/src/${this.metadata.defaultBranch}/package.json`;\n    try {\n      const data = await coFetchJSON(url);\n      return data as string;\n    } catch (e) {\n      return null;\n    }\n  };\n}\n"]}]}