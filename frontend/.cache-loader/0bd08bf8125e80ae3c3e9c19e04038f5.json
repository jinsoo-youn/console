{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/TopologyEdgePanel.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/TopologyEdgePanel.tsx","mtime":1617154808360},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport * as classNames from 'classnames';\nimport * as _ from 'lodash';\nimport { referenceFor } from '@console/internal/module/k8s';\nimport { ActionsMenu, ResourceLink, SidebarSectionHeading, ExternalLink } from '@console/internal/components/utils';\nimport { TYPE_EVENT_SOURCE_LINK, TYPE_REVISION_TRAFFIC } from '@console/knative-plugin/src/topology/const';\nimport { TYPE_CONNECTS_TO, TYPE_SERVICE_BINDING, TYPE_TRAFFIC_CONNECTOR } from './components/const';\nimport { edgeActions } from './actions/edgeActions';\nimport { getKialiLink } from './topology-utils';\nconst connectorTypeToTitle = (type) => {\n    switch (type) {\n        case TYPE_CONNECTS_TO:\n            return 'Visual connector';\n        case TYPE_SERVICE_BINDING:\n            return 'Binding connector';\n        case TYPE_REVISION_TRAFFIC:\n            return 'Traffic distribution connector';\n        case TYPE_EVENT_SOURCE_LINK:\n            return 'Event source connector';\n        case TYPE_TRAFFIC_CONNECTOR:\n            return 'Traffic connector';\n        default:\n            return '';\n    }\n};\nconst TopologyEdgePanel = ({ edge, data, consoleLinks }) => {\n    var _a, _b;\n    const source = edge.getSource().getData();\n    const target = edge.getTarget().getData();\n    const resources = [(_a = source === null || source === void 0 ? void 0 : source.resources) === null || _a === void 0 ? void 0 : _a.obj, (_b = target === null || target === void 0 ? void 0 : target.resources) === null || _b === void 0 ? void 0 : _b.obj];\n    const nodes = data.graph.nodes.map(n => edge.getController().getNodeById(n.id));\n    const { metadata: { namespace }, } = resources[1];\n    return (React.createElement(\"div\", { className: \"overview__sidebar-pane resource-overview\" },\n        React.createElement(\"div\", { className: \"overview__sidebar-pane-head resource-overview__heading\" },\n            React.createElement(\"h1\", { className: \"co-m-pane__heading\" },\n                React.createElement(\"div\", { className: \"co-m-pane__name co-resource-item\" }, connectorTypeToTitle(edge.getType())),\n                React.createElement(\"div\", { className: \"co-actions\" },\n                    React.createElement(ActionsMenu, { actions: edgeActions(edge, nodes) })))),\n        React.createElement(\"ul\", { className: classNames('co-m-horizontal-nav__menu', 'co-m-horizontal-nav__menu--within-sidebar', 'co-m-horizontal-nav__menu--within-overview-sidebar', 'odc-application-resource-tab') },\n            React.createElement(\"li\", { className: \"co-m-horizontal-nav__menu-item\" },\n                React.createElement(\"button\", { type: \"button\" }, \"Resources\"))),\n        React.createElement(\"div\", { className: \"overview__sidebar-pane-body\" },\n            React.createElement(SidebarSectionHeading, { text: \"Connections\" }),\n            React.createElement(\"ul\", { className: \"list-group\" }, _.map(resources, resource => {\n                if (!resource) {\n                    return null;\n                }\n                const { metadata: { name, uid }, } = resource;\n                return (React.createElement(\"li\", { className: \"list-group-item  container-fluid\", key: uid },\n                    React.createElement(ResourceLink, { kind: referenceFor(resource), name: name, namespace: namespace })));\n            })),\n            edge.getType() === TYPE_TRAFFIC_CONNECTOR && (React.createElement(React.Fragment, null,\n                React.createElement(SidebarSectionHeading, { text: \"Kiali Link\" }),\n                React.createElement(ExternalLink, { href: getKialiLink(consoleLinks, namespace), text: \"Kiali Graph View\" }))))));\n};\nconst TopologyEdgeStateToProps = (state) => {\n    const consoleLinks = state.UI.get('consoleLinks');\n    return { consoleLinks };\n};\nexport default connect(TopologyEdgeStateToProps)(TopologyEdgePanel);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/TopologyEdgePanel.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/TopologyEdgePanel.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport * as classNames from 'classnames';\nimport * as _ from 'lodash';\nimport { Edge } from '@console/topology';\nimport { RootState } from '@console/internal/redux';\nimport { referenceFor, K8sResourceKind } from '@console/internal/module/k8s';\nimport { ActionsMenu, ResourceLink, SidebarSectionHeading, ExternalLink } from '@console/internal/components/utils';\nimport { TYPE_EVENT_SOURCE_LINK, TYPE_REVISION_TRAFFIC } from '@console/knative-plugin/src/topology/const';\nimport { TYPE_CONNECTS_TO, TYPE_SERVICE_BINDING, TYPE_TRAFFIC_CONNECTOR } from './components/const';\nimport { edgeActions } from './actions/edgeActions';\nimport { TopologyDataModel, TopologyDataObject } from './topology-types';\nimport { getKialiLink } from './topology-utils';\n\ntype StateProps = {\n  consoleLinks?: K8sResourceKind[];\n};\n\nexport type TopologyEdgePanelProps = {\n  edge: Edge;\n  data: TopologyDataModel;\n} & StateProps;\n\nconst connectorTypeToTitle = (type: string): string => {\n  switch (type) {\n    case TYPE_CONNECTS_TO:\n      return 'Visual connector';\n    case TYPE_SERVICE_BINDING:\n      return 'Binding connector';\n    case TYPE_REVISION_TRAFFIC:\n      return 'Traffic distribution connector';\n    case TYPE_EVENT_SOURCE_LINK:\n      return 'Event source connector';\n    case TYPE_TRAFFIC_CONNECTOR:\n      return 'Traffic connector';\n    default:\n      return '';\n  }\n};\n\nconst TopologyEdgePanel: React.FC<TopologyEdgePanelProps> = ({ edge, data, consoleLinks }) => {\n  const source: TopologyDataObject = edge.getSource().getData();\n  const target: TopologyDataObject = edge.getTarget().getData();\n  const resources = [source?.resources?.obj, target?.resources?.obj];\n  const nodes = data.graph.nodes.map(n => edge.getController().getNodeById(n.id));\n  const {\n    metadata: { namespace },\n  } = resources[1];\n\n  return (\n    <div className=\"overview__sidebar-pane resource-overview\">\n      <div className=\"overview__sidebar-pane-head resource-overview__heading\">\n        <h1 className=\"co-m-pane__heading\">\n          <div className=\"co-m-pane__name co-resource-item\">{connectorTypeToTitle(edge.getType())}</div>\n          <div className=\"co-actions\">\n            <ActionsMenu actions={edgeActions(edge, nodes)} />\n          </div>\n        </h1>\n      </div>\n      <ul className={classNames('co-m-horizontal-nav__menu', 'co-m-horizontal-nav__menu--within-sidebar', 'co-m-horizontal-nav__menu--within-overview-sidebar', 'odc-application-resource-tab')}>\n        <li className=\"co-m-horizontal-nav__menu-item\">\n          <button type=\"button\">Resources</button>\n        </li>\n      </ul>\n      <div className=\"overview__sidebar-pane-body\">\n        <SidebarSectionHeading text=\"Connections\" />\n        <ul className=\"list-group\">\n          {_.map(resources, resource => {\n            if (!resource) {\n              return null;\n            }\n            const {\n              metadata: { name, uid },\n            } = resource;\n            return (\n              <li className=\"list-group-item  container-fluid\" key={uid}>\n                <ResourceLink kind={referenceFor(resource)} name={name} namespace={namespace} />\n              </li>\n            );\n          })}\n        </ul>\n\n        {edge.getType() === TYPE_TRAFFIC_CONNECTOR && (\n          <>\n            <SidebarSectionHeading text=\"Kiali Link\" />\n            <ExternalLink href={getKialiLink(consoleLinks, namespace)} text=\"Kiali Graph View\" />\n          </>\n        )}\n      </div>\n    </div>\n  );\n};\n\nconst TopologyEdgeStateToProps = (state: RootState) => {\n  const consoleLinks = state.UI.get('consoleLinks');\n  return { consoleLinks };\n};\n\nexport default connect(TopologyEdgeStateToProps)(TopologyEdgePanel);\n"]}]}