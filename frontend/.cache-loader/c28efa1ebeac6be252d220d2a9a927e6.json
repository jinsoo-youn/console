{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/git/GitSection.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/git/GitSection.tsx","mtime":1615298458620},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as React from 'react';\nimport { useFormikContext } from 'formik';\nimport { Alert, TextInputTypes, ValidatedOptions } from '@patternfly/react-core';\nimport { getGitService } from '@console/git-service';\nimport { InputField, DropdownField, useFormikValidationFix, useDebounceCallback, } from '@console/shared';\nimport { GitReadableTypes, GitTypes } from '../import-types';\nimport { detectGitType, detectGitRepoName } from '../import-validation-utils';\nimport { getSampleRepo, getSampleRef, getSampleContextDir } from '../../../utils/imagestream-utils';\nimport FormSection from '../section/FormSection';\nimport SampleRepo from './SampleRepo';\nimport AdvancedGitOptions from './AdvancedGitOptions';\nimport { UNASSIGNED_KEY, CREATE_APPLICATION_KEY } from '../../../const';\nconst GitSection = ({ showSample }) => {\n    const { values, setFieldValue, setFieldTouched, touched, dirty } = useFormikContext();\n    const tag = values.image.tagObj;\n    const sampleRepo = showSample && getSampleRepo(tag);\n    const { application = {}, name: nameTouched, git = {}, image = {} } = touched;\n    const { type: gitTypeTouched } = git;\n    const { name: applicationNameTouched } = application;\n    const { selected: imageSelectorTouched } = image;\n    const [validated, setValidated] = React.useState(ValidatedOptions.default);\n    const handleGitUrlChange = React.useCallback((url, ref) => __awaiter(void 0, void 0, void 0, function* () {\n        setFieldValue('git.isUrlValidating', true);\n        setValidated(ValidatedOptions.default);\n        const gitType = detectGitType(url);\n        const gitRepoName = detectGitRepoName(url);\n        const showGitType = gitType === GitTypes.unsure;\n        setFieldValue('git.type', gitType);\n        setFieldValue('git.showGitType', showGitType);\n        showGitType && setFieldTouched('git.type', false);\n        const gitService = getGitService({ url, ref }, gitType);\n        const isReachable = gitService && (yield gitService.isRepoReachable());\n        setFieldValue('git.isUrlValidating', false);\n        if (isReachable) {\n            setValidated(ValidatedOptions.success);\n            gitRepoName && !values.name && setFieldValue('name', gitRepoName);\n            gitRepoName &&\n                !values.application.name &&\n                values.application.selectedKey !== UNASSIGNED_KEY &&\n                setFieldValue('application.name', `${gitRepoName}-app`);\n            setFieldValue('image.isRecommending', true);\n            const buildTools = yield gitService.detectBuildTypes();\n            setFieldValue('image.isRecommending', false);\n            if (buildTools.length > 0) {\n                const buildTool = buildTools[0].buildType;\n                setFieldValue('image.couldNotRecommend', false);\n                setFieldValue('image.recommended', buildTool);\n            }\n            else {\n                setFieldValue('image.couldNotRecommend', true);\n                setFieldValue('image.recommended', '');\n            }\n        }\n        else {\n            setFieldValue('image.recommended', '');\n            setFieldValue('image.couldNotRecommend', false);\n            setValidated(ValidatedOptions.error);\n        }\n    }), [\n        setFieldTouched,\n        setFieldValue,\n        values.application.name,\n        values.application.selectedKey,\n        values.name,\n    ]);\n    const debouncedHandleGitUrlChange = useDebounceCallback(handleGitUrlChange, [handleGitUrlChange]);\n    const handleGitUrlBlur = React.useCallback(() => {\n        const { url } = values.git;\n        const gitRepoName = detectGitRepoName(url);\n        gitRepoName && setFieldValue('name', gitRepoName);\n        gitRepoName &&\n            !values.application.name &&\n            values.application.selectedKey !== UNASSIGNED_KEY &&\n            setFieldValue('application.name', `${gitRepoName}-app`);\n        setFieldTouched('git.url', true);\n    }, [\n        setFieldTouched,\n        setFieldValue,\n        values.application.name,\n        values.application.selectedKey,\n        values.git,\n    ]);\n    const fillSample = React.useCallback(() => {\n        const url = sampleRepo;\n        const ref = getSampleRef(tag);\n        const dir = getSampleContextDir(tag);\n        const gitType = detectGitType(url);\n        const name = values.name || values.image.selected;\n        values.name !== name && setFieldValue('name', name);\n        !values.application.name &&\n            values.application.selectedKey !== UNASSIGNED_KEY &&\n            setFieldValue('application.name', `${name}-app`);\n        setFieldValue('git.url', url);\n        setFieldValue('git.dir', dir);\n        setFieldValue('git.ref', ref);\n        setFieldValue('git.type', gitType);\n        setFieldTouched('git.url', true);\n    }, [\n        sampleRepo,\n        setFieldTouched,\n        setFieldValue,\n        tag,\n        values.application.name,\n        values.application.selectedKey,\n        values.image.selected,\n        values.name,\n    ]);\n    React.useEffect(() => {\n        const { url, ref } = values.git;\n        !dirty && url && handleGitUrlChange(url, ref);\n    }, [dirty, handleGitUrlChange, values.git]);\n    const getHelpText = () => {\n        if (values.git.isUrlValidating) {\n            return 'Validating...';\n        }\n        if (validated === ValidatedOptions.success) {\n            return 'Validated';\n        }\n        if (validated === ValidatedOptions.error) {\n            return 'Git repository is not reachable.';\n        }\n        return '';\n    };\n    const resetFields = () => {\n        if (!imageSelectorTouched) {\n            setFieldValue('image.selected', '');\n            setFieldValue('image.tag', '');\n        }\n        values.image.recommended && setFieldValue('image.recommended', '');\n        values.image.couldNotRecommend && setFieldValue('image.couldNotRecommend', false);\n        if (values.formType === 'edit') {\n            values.application.selectedKey !== UNASSIGNED_KEY &&\n                values.application.selectedKey === CREATE_APPLICATION_KEY &&\n                !applicationNameTouched &&\n                setFieldValue('application.name', '');\n            return;\n        }\n        !nameTouched && setFieldValue('name', '');\n        values.application.selectedKey !== UNASSIGNED_KEY &&\n            !applicationNameTouched &&\n            setFieldValue('application.name', '');\n    };\n    useFormikValidationFix(values.git.url);\n    return (React.createElement(FormSection, { title: \"Git\" },\n        React.createElement(InputField, { type: TextInputTypes.text, name: \"git.url\", label: \"Git Repo URL\", helpText: getHelpText(), helpTextInvalid: getHelpText(), validated: validated, onChange: (e) => {\n                resetFields();\n                setValidated(ValidatedOptions.default);\n                debouncedHandleGitUrlChange(e.target.value, values.git.ref);\n            }, onBlur: handleGitUrlBlur, \"data-test-id\": \"git-form-input-url\", required: true }),\n        values.git.showGitType && (React.createElement(React.Fragment, null,\n            React.createElement(DropdownField, { name: \"git.type\", label: \"Git Type\", items: GitReadableTypes, title: GitReadableTypes[values.git.type], fullWidth: true, required: true }),\n            !gitTypeTouched && (React.createElement(Alert, { isInline: true, variant: \"info\", title: \"Defaulting Git Type to Other\" }, \"We failed to detect the git type.\")))),\n        sampleRepo && React.createElement(SampleRepo, { onClick: fillSample }),\n        React.createElement(AdvancedGitOptions, null)));\n};\nexport default GitSection;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/git/GitSection.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/git/GitSection.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useFormikContext, FormikValues, FormikTouched } from 'formik';\nimport { Alert, TextInputTypes, ValidatedOptions } from '@patternfly/react-core';\nimport { getGitService, GitProvider } from '@console/git-service';\nimport {\n  InputField,\n  DropdownField,\n  useFormikValidationFix,\n  useDebounceCallback,\n} from '@console/shared';\nimport { GitReadableTypes, GitTypes } from '../import-types';\nimport { detectGitType, detectGitRepoName } from '../import-validation-utils';\nimport { getSampleRepo, getSampleRef, getSampleContextDir } from '../../../utils/imagestream-utils';\nimport FormSection from '../section/FormSection';\nimport SampleRepo from './SampleRepo';\nimport AdvancedGitOptions from './AdvancedGitOptions';\nimport { UNASSIGNED_KEY, CREATE_APPLICATION_KEY } from '../../../const';\n\nexport interface GitSectionProps {\n  showSample?: boolean;\n}\n\nconst GitSection: React.FC<GitSectionProps> = ({ showSample }) => {\n  const { values, setFieldValue, setFieldTouched, touched, dirty } = useFormikContext<\n    FormikValues\n  >();\n  const tag = values.image.tagObj;\n  const sampleRepo = showSample && getSampleRepo(tag);\n  const { application = {}, name: nameTouched, git = {}, image = {} } = touched;\n  const { type: gitTypeTouched } = git as FormikTouched<{ type: boolean }>;\n  const { name: applicationNameTouched } = application as FormikTouched<{ name: boolean }>;\n  const { selected: imageSelectorTouched } = image as FormikTouched<{ selected: boolean }>;\n  const [validated, setValidated] = React.useState<ValidatedOptions>(ValidatedOptions.default);\n\n  const handleGitUrlChange = React.useCallback(\n    async (url: string, ref: string) => {\n      setFieldValue('git.isUrlValidating', true);\n      setValidated(ValidatedOptions.default);\n\n      const gitType = detectGitType(url);\n      const gitRepoName = detectGitRepoName(url);\n      const showGitType = gitType === GitTypes.unsure;\n\n      setFieldValue('git.type', gitType);\n      setFieldValue('git.showGitType', showGitType);\n      showGitType && setFieldTouched('git.type', false);\n\n      const gitService = getGitService({ url, ref }, gitType as GitProvider);\n      const isReachable = gitService && (await gitService.isRepoReachable());\n      setFieldValue('git.isUrlValidating', false);\n      if (isReachable) {\n        setValidated(ValidatedOptions.success);\n        gitRepoName && !values.name && setFieldValue('name', gitRepoName);\n        gitRepoName &&\n          !values.application.name &&\n          values.application.selectedKey !== UNASSIGNED_KEY &&\n          setFieldValue('application.name', `${gitRepoName}-app`);\n        setFieldValue('image.isRecommending', true);\n        const buildTools = await gitService.detectBuildTypes();\n        setFieldValue('image.isRecommending', false);\n        if (buildTools.length > 0) {\n          const buildTool = buildTools[0].buildType;\n          setFieldValue('image.couldNotRecommend', false);\n          setFieldValue('image.recommended', buildTool);\n        } else {\n          setFieldValue('image.couldNotRecommend', true);\n          setFieldValue('image.recommended', '');\n        }\n      } else {\n        setFieldValue('image.recommended', '');\n        setFieldValue('image.couldNotRecommend', false);\n        setValidated(ValidatedOptions.error);\n      }\n    },\n    [\n      setFieldTouched,\n      setFieldValue,\n      values.application.name,\n      values.application.selectedKey,\n      values.name,\n    ],\n  );\n\n  const debouncedHandleGitUrlChange = useDebounceCallback(handleGitUrlChange, [handleGitUrlChange]);\n\n  const handleGitUrlBlur = React.useCallback(() => {\n    const { url } = values.git;\n    const gitRepoName = detectGitRepoName(url);\n    gitRepoName && setFieldValue('name', gitRepoName);\n    gitRepoName &&\n      !values.application.name &&\n      values.application.selectedKey !== UNASSIGNED_KEY &&\n      setFieldValue('application.name', `${gitRepoName}-app`);\n    setFieldTouched('git.url', true);\n  }, [\n    setFieldTouched,\n    setFieldValue,\n    values.application.name,\n    values.application.selectedKey,\n    values.git,\n  ]);\n\n  const fillSample: React.ReactEventHandler<HTMLButtonElement> = React.useCallback(() => {\n    const url = sampleRepo;\n    const ref = getSampleRef(tag);\n    const dir = getSampleContextDir(tag);\n    const gitType = detectGitType(url);\n    const name = values.name || values.image.selected;\n    values.name !== name && setFieldValue('name', name);\n    !values.application.name &&\n      values.application.selectedKey !== UNASSIGNED_KEY &&\n      setFieldValue('application.name', `${name}-app`);\n    setFieldValue('git.url', url);\n    setFieldValue('git.dir', dir);\n    setFieldValue('git.ref', ref);\n    setFieldValue('git.type', gitType);\n    setFieldTouched('git.url', true);\n  }, [\n    sampleRepo,\n    setFieldTouched,\n    setFieldValue,\n    tag,\n    values.application.name,\n    values.application.selectedKey,\n    values.image.selected,\n    values.name,\n  ]);\n\n  React.useEffect(() => {\n    const { url, ref } = values.git;\n    !dirty && url && handleGitUrlChange(url, ref);\n  }, [dirty, handleGitUrlChange, values.git]);\n\n  const getHelpText = () => {\n    if (values.git.isUrlValidating) {\n      return 'Validating...';\n    }\n\n    if (validated === ValidatedOptions.success) {\n      return 'Validated';\n    }\n    if (validated === ValidatedOptions.error) {\n      return 'Git repository is not reachable.';\n    }\n    return '';\n  };\n\n  const resetFields = () => {\n    if (!imageSelectorTouched) {\n      setFieldValue('image.selected', '');\n      setFieldValue('image.tag', '');\n    }\n    values.image.recommended && setFieldValue('image.recommended', '');\n    values.image.couldNotRecommend && setFieldValue('image.couldNotRecommend', false);\n    if (values.formType === 'edit') {\n      values.application.selectedKey !== UNASSIGNED_KEY &&\n        values.application.selectedKey === CREATE_APPLICATION_KEY &&\n        !applicationNameTouched &&\n        setFieldValue('application.name', '');\n      return;\n    }\n    !nameTouched && setFieldValue('name', '');\n    values.application.selectedKey !== UNASSIGNED_KEY &&\n      !applicationNameTouched &&\n      setFieldValue('application.name', '');\n  };\n\n  useFormikValidationFix(values.git.url);\n  return (\n    <FormSection title=\"Git\">\n      <InputField\n        type={TextInputTypes.text}\n        name=\"git.url\"\n        label=\"Git Repo URL\"\n        helpText={getHelpText()}\n        helpTextInvalid={getHelpText()}\n        validated={validated}\n        onChange={(e: React.SyntheticEvent) => {\n          resetFields();\n          setValidated(ValidatedOptions.default);\n          debouncedHandleGitUrlChange((e.target as HTMLInputElement).value, values.git.ref);\n        }}\n        onBlur={handleGitUrlBlur}\n        data-test-id=\"git-form-input-url\"\n        required\n      />\n      {values.git.showGitType && (\n        <>\n          <DropdownField\n            name=\"git.type\"\n            label=\"Git Type\"\n            items={GitReadableTypes}\n            title={GitReadableTypes[values.git.type]}\n            fullWidth\n            required\n          />\n          {!gitTypeTouched && (\n            <Alert isInline variant=\"info\" title=\"Defaulting Git Type to Other\">\n              We failed to detect the git type.\n            </Alert>\n          )}\n        </>\n      )}\n      {sampleRepo && <SampleRepo onClick={fillSample} />}\n      <AdvancedGitOptions />\n    </FormSection>\n  );\n};\n\nexport default GitSection;\n"]}]}