{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/storage/attach-storage.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/storage/attach-storage.tsx","mtime":1615298458740},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { connectToPlural } from '../../kinds';\nimport { k8sCreate, k8sGet, k8sPatch, referenceFor, } from '../../module/k8s';\nimport { ButtonBar, history, ListDropdown, LoadingBox, ResourceLink, resourceObjPath, } from '../utils';\nimport { Checkbox } from '../checkbox';\nimport { RadioInput } from '../radio';\nimport { CreatePVCForm } from './create-pvc';\nimport { PersistentVolumeClaimModel } from '../../models';\nimport { ContainerSelector } from '../container-selector';\nconst PVCDropdown = (props) => {\n    const kind = 'PersistentVolumeClaim';\n    const { namespace, selectedKey } = props;\n    const resources = [{ kind, namespace }];\n    return (React.createElement(ListDropdown, Object.assign({}, props, { desc: \"Persistent Volume Claim\", resources: resources, selectedKeyKind: kind, placeholder: \"Select claim\", selectedKey: selectedKey })));\n};\nexport const AttachStorageForm = (props) => {\n    const [obj, setObj] = React.useState(null);\n    const [inProgress, setInProgress] = React.useState(false);\n    const [useContainerSelector, setUseContainerSelector] = React.useState(false);\n    const [claimName, setClaimName] = React.useState('');\n    const [volumeName, setVolumeName] = React.useState('');\n    const [mountPath, setMountPath] = React.useState('');\n    const [subPath, setSubPath] = React.useState('');\n    const [mountAsReadOnly, setMountAsReadOnly] = React.useState(false);\n    const [selectedContainers, setSelectedContainers] = React.useState([]);\n    const [volumeAlreadyMounted, setVolumeAlreadyMounted] = React.useState(false);\n    const [error, setError] = React.useState('');\n    const [showCreatePVC, setShowCreatePVC] = React.useState('existing');\n    const [newPVCObj, setNewPVCObj] = React.useState(null);\n    const { kindObj, resourceName, namespace } = props;\n    const supportedKinds = [\n        'Deployment',\n        'DeploymentConfig',\n        'ReplicaSet',\n        'ReplicationController',\n        'StatefulSet',\n        'DaemonSet',\n    ];\n    React.useEffect(() => {\n        // Get the current resource so we can add to its definition\n        k8sGet(kindObj, resourceName, namespace).then(setObj);\n    }, [kindObj, resourceName, namespace]);\n    React.useEffect(() => {\n        // If the PVC or its name changes, check if there is already a volume with that name\n        const newClaimName = showCreatePVC === 'existing' ? claimName : _.get(newPVCObj, 'metadata.name', '');\n        const volumes = _.get(obj, 'spec.template.spec.volumes');\n        const volume = _.find(volumes, {\n            persistentVolumeClaim: {\n                claimName: newClaimName,\n            },\n        });\n        const newVolumeName = volume ? volume.name : newClaimName;\n        const newVolumeAlreadyMounted = !!volume;\n        setVolumeName(newVolumeName);\n        setVolumeAlreadyMounted(newVolumeAlreadyMounted);\n    }, [newPVCObj, obj, claimName, showCreatePVC]);\n    if (!kindObj || !_.includes(supportedKinds, kindObj.kind)) {\n        setError('Unsupported kind.');\n        return;\n    }\n    const handleShowCreatePVCChange = (event) => {\n        setShowCreatePVC(event.currentTarget.value);\n    };\n    const handleSelectContainers = () => {\n        setUseContainerSelector(!useContainerSelector);\n        setSelectedContainers([]);\n    };\n    const handleContainerSelectionChange = (checked, event) => {\n        const checkedItems = [...selectedContainers];\n        checked\n            ? checkedItems.push(event.currentTarget.id)\n            : _.pull(checkedItems, event.currentTarget.id);\n        setSelectedContainers(checkedItems);\n    };\n    const isContainerSelected = ({ name }) => {\n        return !useContainerSelector || selectedContainers.includes(name);\n    };\n    const getMountPaths = (podTemplate) => {\n        const containers = _.get(podTemplate, 'spec.containers', []);\n        return containers.reduce((acc, container) => {\n            if (!isContainerSelected(container)) {\n                return acc;\n            }\n            const mountPaths = _.map(container.volumeMounts, 'mountPath');\n            return acc.concat(mountPaths);\n        }, []);\n    };\n    const validateMountPaths = (path) => {\n        const existingMountPaths = getMountPaths(obj.spec.template);\n        const err = existingMountPaths.includes(path) ? 'Mount path is already in use.' : '';\n        setError(err);\n    };\n    // Add logic to check this handler for if a mount path is not unique\n    const handleMountPathChange = (event) => {\n        setMountPath(event.currentTarget.value);\n        // Look at the existing mount paths so that we can warn if the new value is not unique.\n        validateMountPaths(event.currentTarget.value);\n    };\n    const handleSubPathChange = (event) => {\n        setSubPath(event.currentTarget.value);\n    };\n    const handlePVCChange = (newClaimName) => {\n        setClaimName(newClaimName);\n    };\n    const onMountAsReadOnlyChanged = () => {\n        setMountAsReadOnly(!mountAsReadOnly);\n    };\n    const createPVCIfNecessary = () => {\n        return showCreatePVC === 'new'\n            ? k8sCreate(PersistentVolumeClaimModel, newPVCObj).then((claim) => claim.metadata.name)\n            : Promise.resolve(claimName);\n    };\n    const getVolumePatches = (pvClaimName) => {\n        const mount = {\n            name: volumeName,\n            mountPath,\n            subPath,\n            readOnly: mountAsReadOnly,\n        };\n        const containers = _.get(obj, 'spec.template.spec.containers', []);\n        const patches = containers.reduce((patch, container, i) => {\n            // Only add to selected containers\n            if (isContainerSelected(container)) {\n                if (_.isEmpty(container.volumeMounts)) {\n                    patch.push({\n                        op: 'add',\n                        path: `/spec/template/spec/containers/${i}/volumeMounts`,\n                        value: [mount],\n                    });\n                }\n                else {\n                    patch.push({\n                        op: 'add',\n                        path: `/spec/template/spec/containers/${i}/volumeMounts/-`,\n                        value: mount,\n                    });\n                }\n            }\n            return patch;\n        }, []);\n        const volume = {\n            name: volumeName,\n            persistentVolumeClaim: {\n                claimName: pvClaimName,\n            },\n        };\n        if (!volumeAlreadyMounted) {\n            const existingVolumes = _.get(obj, 'spec.template.spec.volumes');\n            const volumePatch = _.isEmpty(existingVolumes)\n                ? { op: 'add', path: '/spec/template/spec/volumes', value: [volume] }\n                : { op: 'add', path: '/spec/template/spec/volumes/-', value: volume };\n            return [...patches, volumePatch];\n        }\n        return patches;\n    };\n    const save = (event) => {\n        event.preventDefault();\n        if (useContainerSelector && selectedContainers.length === 0) {\n            setError('You must choose at least one container to mount to.');\n            return;\n        }\n        setInProgress(true);\n        createPVCIfNecessary().then((pvClaimName) => {\n            return k8sPatch(kindObj, obj, getVolumePatches(pvClaimName)).then((resource) => {\n                setInProgress(false);\n                history.push(resourceObjPath(resource, referenceFor(resource)));\n            });\n        }, (err) => {\n            setError(err.message);\n            setInProgress(false);\n        });\n    };\n    const title = 'Add Storage';\n    return (React.createElement(\"div\", { className: \"co-m-pane__body\" },\n        React.createElement(Helmet, null,\n            React.createElement(\"title\", null, title)),\n        React.createElement(\"form\", { className: \"co-m-pane__body-group co-m-pane__form\", onSubmit: save },\n            React.createElement(\"h1\", { className: \"co-m-pane__heading\" }, title),\n            kindObj && (React.createElement(\"div\", { className: \"co-m-pane__explanation\" },\n                \"Add a persistent volume claim to\",\n                ' ',\n                React.createElement(ResourceLink, { inline: true, kind: kindObj.kind, name: resourceName, namespace: namespace }))),\n            React.createElement(\"label\", { className: \"control-label co-required\" }, \"Persistent Volume Claim\"),\n            React.createElement(\"div\", { className: \"form-group\" },\n                React.createElement(RadioInput, { title: \"Use existing claim\", value: \"existing\", key: \"existing\", onChange: handleShowCreatePVCChange, checked: showCreatePVC === 'existing', name: \"showCreatePVC\" })),\n            showCreatePVC === 'existing' && (React.createElement(\"div\", { className: \"form-group co-form-subsection\" },\n                React.createElement(PVCDropdown, { namespace: namespace, onChange: handlePVCChange, id: \"claimName\", selectedKey: claimName }))),\n            React.createElement(\"div\", { className: \"form-group\" },\n                React.createElement(RadioInput, { title: \"Create new claim\", value: \"new\", key: \"new\", onChange: handleShowCreatePVCChange, checked: showCreatePVC === 'new', name: \"showCreatePVC\" })),\n            showCreatePVC === 'new' && (React.createElement(\"div\", { className: \"co-form-subsection\" },\n                React.createElement(CreatePVCForm, { onChange: setNewPVCObj, namespace: namespace }))),\n            React.createElement(\"div\", { className: \"form-group\" },\n                React.createElement(\"label\", { className: \"control-label co-required\", htmlFor: \"mount-path\" }, \"Mount Path\"),\n                React.createElement(\"div\", null,\n                    React.createElement(\"input\", { className: \"pf-c-form-control\", type: \"text\", onChange: handleMountPathChange, \"aria-describedby\": \"mount-path-help\", name: \"mountPath\", id: \"mount-path\", value: mountPath, required: true }),\n                    React.createElement(\"p\", { className: \"help-block\", id: \"mount-path-help\" }, \"Mount path for the volume inside the container.\"))),\n            React.createElement(Checkbox, { label: \"Mount as read-only\", onChange: onMountAsReadOnlyChanged, checked: mountAsReadOnly, name: \"mountAsReadOnly\" }),\n            React.createElement(\"div\", { className: \"form-group\" },\n                React.createElement(\"label\", { className: \"control-label\", htmlFor: \"subpath\" }, \"Subpath\"),\n                React.createElement(\"div\", null,\n                    React.createElement(\"input\", { className: \"pf-c-form-control\", type: \"text\", onChange: handleSubPathChange, \"aria-describedby\": \"subpath-help\", id: \"subpath\", name: \"subPath\", value: subPath }),\n                    React.createElement(\"p\", { className: \"help-block\", id: \"subpath-help\" }, \"Optional path within the volume from which it will be mounted into the container. Defaults to the root of volume.\"))),\n            !useContainerSelector && (React.createElement(\"p\", null,\n                \"The volume will be mounted into all containers. You can\",\n                ' ',\n                React.createElement(Button, { type: \"button\", onClick: handleSelectContainers, variant: \"link\", isInline: true }, \"select specific containers\"),\n                ' ',\n                \"instead.\")),\n            useContainerSelector && (React.createElement(\"div\", { className: \"form-group co-break-word\" },\n                React.createElement(\"label\", { className: \"control-label\" }, \"Containers\"),\n                React.createElement(Button, { type: \"button\", onClick: handleSelectContainers, variant: \"link\" }, \"(use all containers)\"),\n                React.createElement(ContainerSelector, { containers: obj.spec.template.spec.containers, selected: selectedContainers, onChange: handleContainerSelectionChange }),\n                React.createElement(\"p\", { className: \"help-block\", id: \"subpath-help\" }, \"Select which containers to mount volume into.\"))),\n            React.createElement(ButtonBar, { errorMessage: error, inProgress: inProgress },\n                React.createElement(ActionGroup, { className: \"pf-c-form\" },\n                    React.createElement(Button, { type: \"submit\", variant: \"primary\", id: \"save-changes\" }, \"Save\"),\n                    React.createElement(Button, { type: \"button\", variant: \"secondary\", onClick: history.goBack }, \"Cancel\"))))));\n};\nconst AttachStorage_ = ({ kindObj, kindsInFlight, match: { params } }) => {\n    if (!kindObj && kindsInFlight) {\n        return React.createElement(LoadingBox, null);\n    }\n    return React.createElement(AttachStorageForm, { namespace: params.ns, resourceName: params.name, kindObj: kindObj });\n};\nexport const AttachStorage = connectToPlural(AttachStorage_);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/storage/attach-storage.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/storage/attach-storage.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { ActionGroup, Button } from '@patternfly/react-core';\n\nimport { connectToPlural } from '../../kinds';\nimport {\n  ContainerSpec,\n  k8sCreate,\n  k8sGet,\n  K8sKind,\n  k8sPatch,\n  referenceFor,\n} from '../../module/k8s';\nimport {\n  ButtonBar,\n  history,\n  ListDropdown,\n  LoadingBox,\n  ResourceLink,\n  resourceObjPath,\n} from '../utils';\nimport { Checkbox } from '../checkbox';\nimport { RadioInput } from '../radio';\nimport { CreatePVCForm } from './create-pvc';\nimport { PersistentVolumeClaimModel } from '../../models';\nimport { ContainerSelector } from '../container-selector';\n\nconst PVCDropdown: React.FC<PVCDropdownProps> = (props) => {\n  const kind = 'PersistentVolumeClaim';\n  const { namespace, selectedKey } = props;\n  const resources = [{ kind, namespace }];\n  return (\n    <ListDropdown\n      {...props}\n      desc=\"Persistent Volume Claim\"\n      resources={resources}\n      selectedKeyKind={kind}\n      placeholder=\"Select claim\"\n      selectedKey={selectedKey}\n    />\n  );\n};\n\nexport const AttachStorageForm: React.FC<AttachStorageFormProps> = (props) => {\n  const [obj, setObj] = React.useState(null);\n  const [inProgress, setInProgress] = React.useState(false);\n  const [useContainerSelector, setUseContainerSelector] = React.useState(false);\n  const [claimName, setClaimName] = React.useState('');\n  const [volumeName, setVolumeName] = React.useState('');\n  const [mountPath, setMountPath] = React.useState('');\n  const [subPath, setSubPath] = React.useState('');\n  const [mountAsReadOnly, setMountAsReadOnly] = React.useState(false);\n  const [selectedContainers, setSelectedContainers] = React.useState([]);\n  const [volumeAlreadyMounted, setVolumeAlreadyMounted] = React.useState(false);\n  const [error, setError] = React.useState('');\n  const [showCreatePVC, setShowCreatePVC] = React.useState('existing');\n  const [newPVCObj, setNewPVCObj] = React.useState(null);\n\n  const { kindObj, resourceName, namespace } = props;\n  const supportedKinds = [\n    'Deployment',\n    'DeploymentConfig',\n    'ReplicaSet',\n    'ReplicationController',\n    'StatefulSet',\n    'DaemonSet',\n  ];\n\n  React.useEffect(() => {\n    // Get the current resource so we can add to its definition\n    k8sGet(kindObj, resourceName, namespace).then(setObj);\n  }, [kindObj, resourceName, namespace]);\n\n  React.useEffect(() => {\n    // If the PVC or its name changes, check if there is already a volume with that name\n    const newClaimName =\n      showCreatePVC === 'existing' ? claimName : _.get(newPVCObj, 'metadata.name', '');\n    const volumes = _.get(obj, 'spec.template.spec.volumes');\n    const volume = _.find(volumes, {\n      persistentVolumeClaim: {\n        claimName: newClaimName,\n      },\n    }) as any;\n\n    const newVolumeName = volume ? volume.name : newClaimName;\n    const newVolumeAlreadyMounted = !!volume;\n    setVolumeName(newVolumeName);\n    setVolumeAlreadyMounted(newVolumeAlreadyMounted);\n  }, [newPVCObj, obj, claimName, showCreatePVC]);\n\n  if (!kindObj || !_.includes(supportedKinds, kindObj.kind)) {\n    setError('Unsupported kind.');\n    return;\n  }\n\n  const handleShowCreatePVCChange: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    setShowCreatePVC(event.currentTarget.value);\n  };\n\n  const handleSelectContainers = () => {\n    setUseContainerSelector(!useContainerSelector);\n    setSelectedContainers([]);\n  };\n\n  const handleContainerSelectionChange = (checked, event) => {\n    const checkedItems = [...selectedContainers];\n    checked\n      ? checkedItems.push(event.currentTarget.id)\n      : _.pull(checkedItems, event.currentTarget.id);\n    setSelectedContainers(checkedItems);\n  };\n\n  const isContainerSelected = ({ name }) => {\n    return !useContainerSelector || selectedContainers.includes(name);\n  };\n\n  const getMountPaths = (podTemplate: any): string[] => {\n    const containers: ContainerSpec[] = _.get(podTemplate, 'spec.containers', []);\n    return containers.reduce((acc: string[], container: ContainerSpec) => {\n      if (!isContainerSelected(container)) {\n        return acc;\n      }\n      const mountPaths: string[] = _.map(container.volumeMounts, 'mountPath');\n      return acc.concat(mountPaths);\n    }, []);\n  };\n\n  const validateMountPaths = (path: string) => {\n    const existingMountPaths = getMountPaths(obj.spec.template);\n    const err = existingMountPaths.includes(path) ? 'Mount path is already in use.' : '';\n    setError(err);\n  };\n\n  // Add logic to check this handler for if a mount path is not unique\n  const handleMountPathChange: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    setMountPath(event.currentTarget.value);\n    // Look at the existing mount paths so that we can warn if the new value is not unique.\n    validateMountPaths(event.currentTarget.value);\n  };\n\n  const handleSubPathChange: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    setSubPath(event.currentTarget.value);\n  };\n\n  const handlePVCChange = (newClaimName: string) => {\n    setClaimName(newClaimName);\n  };\n\n  const onMountAsReadOnlyChanged: React.ReactEventHandler<HTMLInputElement> = () => {\n    setMountAsReadOnly(!mountAsReadOnly);\n  };\n\n  const createPVCIfNecessary = () => {\n    return showCreatePVC === 'new'\n      ? k8sCreate(PersistentVolumeClaimModel, newPVCObj).then((claim) => claim.metadata.name)\n      : Promise.resolve(claimName);\n  };\n\n  const getVolumePatches = (pvClaimName: string) => {\n    const mount = {\n      name: volumeName,\n      mountPath,\n      subPath,\n      readOnly: mountAsReadOnly,\n    };\n\n    const containers: ContainerSpec[] = _.get(obj, 'spec.template.spec.containers', []);\n    const patches = containers.reduce((patch, container, i) => {\n      // Only add to selected containers\n      if (isContainerSelected(container)) {\n        if (_.isEmpty(container.volumeMounts)) {\n          patch.push({\n            op: 'add',\n            path: `/spec/template/spec/containers/${i}/volumeMounts`,\n            value: [mount],\n          });\n        } else {\n          patch.push({\n            op: 'add',\n            path: `/spec/template/spec/containers/${i}/volumeMounts/-`,\n            value: mount,\n          });\n        }\n      }\n      return patch;\n    }, []);\n    const volume = {\n      name: volumeName,\n      persistentVolumeClaim: {\n        claimName: pvClaimName,\n      },\n    };\n\n    if (!volumeAlreadyMounted) {\n      const existingVolumes = _.get(obj, 'spec.template.spec.volumes');\n      const volumePatch = _.isEmpty(existingVolumes)\n        ? { op: 'add', path: '/spec/template/spec/volumes', value: [volume] }\n        : { op: 'add', path: '/spec/template/spec/volumes/-', value: volume };\n      return [...patches, volumePatch];\n    }\n    return patches;\n  };\n\n  const save = (event: React.FormEvent<EventTarget>) => {\n    event.preventDefault();\n    if (useContainerSelector && selectedContainers.length === 0) {\n      setError('You must choose at least one container to mount to.');\n      return;\n    }\n    setInProgress(true);\n    createPVCIfNecessary().then(\n      (pvClaimName: string) => {\n        return k8sPatch(kindObj, obj, getVolumePatches(pvClaimName)).then((resource) => {\n          setInProgress(false);\n          history.push(resourceObjPath(resource, referenceFor(resource)));\n        });\n      },\n      (err) => {\n        setError(err.message);\n        setInProgress(false);\n      },\n    );\n  };\n\n  const title = 'Add Storage';\n  return (\n    <div className=\"co-m-pane__body\">\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <form className=\"co-m-pane__body-group co-m-pane__form\" onSubmit={save}>\n        <h1 className=\"co-m-pane__heading\">{title}</h1>\n        {kindObj && (\n          <div className=\"co-m-pane__explanation\">\n            Add a persistent volume claim to{' '}\n            <ResourceLink inline kind={kindObj.kind} name={resourceName} namespace={namespace} />\n          </div>\n        )}\n        <label className=\"control-label co-required\">Persistent Volume Claim</label>\n        <div className=\"form-group\">\n          <RadioInput\n            title=\"Use existing claim\"\n            value=\"existing\"\n            key=\"existing\"\n            onChange={handleShowCreatePVCChange}\n            checked={showCreatePVC === 'existing'}\n            name=\"showCreatePVC\"\n          />\n        </div>\n\n        {showCreatePVC === 'existing' && (\n          <div className=\"form-group co-form-subsection\">\n            <PVCDropdown\n              namespace={namespace}\n              onChange={handlePVCChange}\n              id=\"claimName\"\n              selectedKey={claimName}\n            />\n          </div>\n        )}\n        <div className=\"form-group\">\n          <RadioInput\n            title=\"Create new claim\"\n            value=\"new\"\n            key=\"new\"\n            onChange={handleShowCreatePVCChange}\n            checked={showCreatePVC === 'new'}\n            name=\"showCreatePVC\"\n          />\n        </div>\n\n        {showCreatePVC === 'new' && (\n          <div className=\"co-form-subsection\">\n            <CreatePVCForm onChange={setNewPVCObj} namespace={namespace} />\n          </div>\n        )}\n\n        <div className=\"form-group\">\n          <label className=\"control-label co-required\" htmlFor=\"mount-path\">\n            Mount Path\n          </label>\n          <div>\n            <input\n              className=\"pf-c-form-control\"\n              type=\"text\"\n              onChange={handleMountPathChange}\n              aria-describedby=\"mount-path-help\"\n              name=\"mountPath\"\n              id=\"mount-path\"\n              value={mountPath}\n              required\n            />\n            <p className=\"help-block\" id=\"mount-path-help\">\n              Mount path for the volume inside the container.\n            </p>\n          </div>\n        </div>\n        <Checkbox\n          label=\"Mount as read-only\"\n          onChange={onMountAsReadOnlyChanged}\n          checked={mountAsReadOnly}\n          name=\"mountAsReadOnly\"\n        />\n        <div className=\"form-group\">\n          <label className=\"control-label\" htmlFor=\"subpath\">\n            Subpath\n          </label>\n          <div>\n            <input\n              className=\"pf-c-form-control\"\n              type=\"text\"\n              onChange={handleSubPathChange}\n              aria-describedby=\"subpath-help\"\n              id=\"subpath\"\n              name=\"subPath\"\n              value={subPath}\n            />\n            <p className=\"help-block\" id=\"subpath-help\">\n              Optional path within the volume from which it will be mounted into the container.\n              Defaults to the root of volume.\n            </p>\n          </div>\n        </div>\n        {!useContainerSelector && (\n          <p>\n            The volume will be mounted into all containers. You can{' '}\n            <Button type=\"button\" onClick={handleSelectContainers} variant=\"link\" isInline>\n              select specific containers\n            </Button>{' '}\n            instead.\n          </p>\n        )}\n        {useContainerSelector && (\n          <div className=\"form-group co-break-word\">\n            <label className=\"control-label\">Containers</label>\n            <Button type=\"button\" onClick={handleSelectContainers} variant=\"link\">\n              (use all containers)\n            </Button>\n            <ContainerSelector\n              containers={obj.spec.template.spec.containers}\n              selected={selectedContainers}\n              onChange={handleContainerSelectionChange}\n            />\n            <p className=\"help-block\" id=\"subpath-help\">\n              Select which containers to mount volume into.\n            </p>\n          </div>\n        )}\n        <ButtonBar errorMessage={error} inProgress={inProgress}>\n          <ActionGroup className=\"pf-c-form\">\n            <Button type=\"submit\" variant=\"primary\" id=\"save-changes\">\n              Save\n            </Button>\n            <Button type=\"button\" variant=\"secondary\" onClick={history.goBack}>\n              Cancel\n            </Button>\n          </ActionGroup>\n        </ButtonBar>\n      </form>\n    </div>\n  );\n};\n\nconst AttachStorage_ = ({ kindObj, kindsInFlight, match: { params } }) => {\n  if (!kindObj && kindsInFlight) {\n    return <LoadingBox />;\n  }\n\n  return <AttachStorageForm namespace={params.ns} resourceName={params.name} kindObj={kindObj} />;\n};\nexport const AttachStorage = connectToPlural(AttachStorage_);\n\nexport type PVCDropdownProps = {\n  namespace: string;\n  selectedKey: string;\n  onChange: (string) => void;\n  id: string;\n};\n\nexport type AttachStorageFormProps = {\n  kindObj: K8sKind;\n  namespace: string;\n  resourceName: string;\n};\n"]}]}