{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/requests/vmi/actions.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/requests/vmi/actions.ts","mtime":1615298458660},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { coFetch } from '@console/internal/co-fetch';\nimport { resourceURL } from '@console/internal/module/k8s';\nimport { getName, getNamespace } from '@console/shared';\nimport { VirtualMachineInstanceModel } from '../../../models';\nexport var VMIActionType;\n(function (VMIActionType) {\n    VMIActionType[\"Unpause\"] = \"unpause\";\n})(VMIActionType || (VMIActionType = {}));\nconst VMIActionRequest = (vmi, action) => __awaiter(void 0, void 0, void 0, function* () {\n    const method = 'PUT';\n    let url = resourceURL(Object.assign(Object.assign({}, VirtualMachineInstanceModel), { apiGroup: `subresources.${VirtualMachineInstanceModel.apiGroup}` }), {\n        ns: getNamespace(vmi),\n        name: getName(vmi),\n    });\n    url = `${url}/${action}`;\n    const response = yield coFetch(url, { method });\n    const text = yield response.text();\n    return text;\n});\nexport const unpauseVMI = (vmi) => __awaiter(void 0, void 0, void 0, function* () { return VMIActionRequest(vmi, VMIActionType.Unpause); });\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/requests/vmi/actions.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/requests/vmi/actions.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,OAAO,EAAE,MAAM,4BAA4B,CAAC;AACrD,OAAO,EAAE,WAAW,EAAE,MAAM,8BAA8B,CAAC;AAC3D,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AACxD,OAAO,EAAE,2BAA2B,EAAE,MAAM,iBAAiB,CAAC;AAG9D,MAAM,CAAN,IAAY,aAEX;AAFD,WAAY,aAAa;IACvB,oCAAmB,CAAA;AACrB,CAAC,EAFW,aAAa,KAAb,aAAa,QAExB;AAED,MAAM,gBAAgB,GAAG,CAAO,GAAY,EAAE,MAAqB,EAAE,EAAE;IACrE,MAAM,MAAM,GAAG,KAAK,CAAC;IACrB,IAAI,GAAG,GAAG,WAAW,iCAEd,2BAA2B,KAC9B,QAAQ,EAAE,gBAAgB,2BAA2B,CAAC,QAAQ,EAAE,KAElE;QACE,EAAE,EAAE,YAAY,CAAC,GAAG,CAAC;QACrB,IAAI,EAAE,OAAO,CAAC,GAAG,CAAC;KACnB,CACF,CAAC;IAEF,GAAG,GAAG,GAAG,GAAG,IAAI,MAAM,EAAE,CAAC;IAEzB,MAAM,QAAQ,GAAG,MAAM,OAAO,CAAC,GAAG,EAAE,EAAE,MAAM,EAAE,CAAC,CAAC;IAChD,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;IAEnC,OAAO,IAAI,CAAC;AACd,CAAC,CAAA,CAAC;AAEF,MAAM,CAAC,MAAM,UAAU,GAAG,CAAO,GAAY,EAAE,EAAE,kDAAC,OAAA,gBAAgB,CAAC,GAAG,EAAE,aAAa,CAAC,OAAO,CAAC,CAAA,GAAA,CAAC","sourcesContent":["import { coFetch } from '@console/internal/co-fetch';\nimport { resourceURL } from '@console/internal/module/k8s';\nimport { getName, getNamespace } from '@console/shared';\nimport { VirtualMachineInstanceModel } from '../../../models';\nimport { VMIKind } from '../../../types/vm';\n\nexport enum VMIActionType {\n  Unpause = 'unpause',\n}\n\nconst VMIActionRequest = async (vmi: VMIKind, action: VMIActionType) => {\n  const method = 'PUT';\n  let url = resourceURL(\n    {\n      ...VirtualMachineInstanceModel,\n      apiGroup: `subresources.${VirtualMachineInstanceModel.apiGroup}`,\n    },\n    {\n      ns: getNamespace(vmi),\n      name: getName(vmi),\n    },\n  );\n\n  url = `${url}/${action}`;\n\n  const response = await coFetch(url, { method });\n  const text = await response.text();\n\n  return text;\n};\n\nexport const unpauseVMI = async (vmi: VMIKind) => VMIActionRequest(vmi, VMIActionType.Unpause);\n"]}]}