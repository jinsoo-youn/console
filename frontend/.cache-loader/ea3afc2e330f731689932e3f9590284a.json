{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/pipeline/pipeline-template-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/pipeline/pipeline-template-utils.ts","mtime":1615298458620},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as _ from 'lodash';\nimport { k8sCreate } from '@console/internal/module/k8s';\nimport { PipelineModel } from '../../../models';\nimport { createPipelineResource } from '../../pipelines/pipeline-resource/pipelineResource-utils';\nexport const createGitResource = (url, namespace, ref = 'master') => {\n    const params = { url, revision: ref };\n    return createPipelineResource(params, 'git', namespace);\n};\nexport const createImageResource = (name, namespace) => {\n    const params = {\n        url: `image-registry.openshift-image-registry.svc:5000/${namespace}/${name}`,\n    };\n    return createPipelineResource(params, 'image', namespace);\n};\nexport const createPipelineForImportFlow = (formData) => __awaiter(void 0, void 0, void 0, function* () {\n    const { name, project: { name: namespace }, git, pipeline, } = formData;\n    const template = _.cloneDeep(pipeline.template);\n    template.metadata = {\n        name: `${name}`,\n        namespace,\n        labels: Object.assign(Object.assign({}, template.metadata.labels), { 'app.kubernetes.io/instance': name }),\n    };\n    template.spec.params =\n        template.spec.params &&\n            template.spec.params.map((param) => {\n                if (param.name === 'APP_NAME') {\n                    param.default = name;\n                }\n                return param;\n            });\n    try {\n        yield createGitResource(git.url, namespace, git.ref);\n        yield createImageResource(name, namespace);\n    }\n    catch (err) {\n        throw err;\n    }\n    return k8sCreate(PipelineModel, template, { ns: namespace });\n});\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/pipeline/pipeline-template-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/pipeline/pipeline-template-utils.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,SAAS,EAAE,MAAM,8BAA8B,CAAC;AACzD,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAEhD,OAAO,EAAE,sBAAsB,EAAE,MAAM,0DAA0D,CAAC;AAElG,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,GAAW,EAAE,SAAiB,EAAE,MAAc,QAAQ,EAAE,EAAE;IAC1F,MAAM,MAAM,GAAG,EAAE,GAAG,EAAE,QAAQ,EAAE,GAAG,EAAE,CAAC;IACtC,OAAO,sBAAsB,CAAC,MAAM,EAAE,KAAK,EAAE,SAAS,CAAC,CAAC;AAC1D,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,IAAY,EAAE,SAAiB,EAAE,EAAE;IACrE,MAAM,MAAM,GAAG;QACb,GAAG,EAAE,oDAAoD,SAAS,IAAI,IAAI,EAAE;KAC7E,CAAC;IAEF,OAAO,sBAAsB,CAAC,MAAM,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;AAC5D,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,2BAA2B,GAAG,CAAO,QAA2B,EAAE,EAAE;IAC/E,MAAM,EACJ,IAAI,EACJ,OAAO,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,EAC5B,GAAG,EACH,QAAQ,GACT,GAAG,QAAQ,CAAC;IACb,MAAM,QAAQ,GAAG,CAAC,CAAC,SAAS,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAEhD,QAAQ,CAAC,QAAQ,GAAG;QAClB,IAAI,EAAE,GAAG,IAAI,EAAE;QACf,SAAS;QACT,MAAM,kCAAO,QAAQ,CAAC,QAAQ,CAAC,MAAM,KAAE,4BAA4B,EAAE,IAAI,GAAE;KAC5E,CAAC;IAEF,QAAQ,CAAC,IAAI,CAAC,MAAM;QAClB,QAAQ,CAAC,IAAI,CAAC,MAAM;YACpB,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,KAAK,EAAE,EAAE;gBACjC,IAAI,KAAK,CAAC,IAAI,KAAK,UAAU,EAAE;oBAC7B,KAAK,CAAC,OAAO,GAAG,IAAI,CAAC;iBACtB;gBACD,OAAO,KAAK,CAAC;YACf,CAAC,CAAC,CAAC;IAEL,IAAI;QACF,MAAM,iBAAiB,CAAC,GAAG,CAAC,GAAG,EAAE,SAAS,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC;QACrD,MAAM,mBAAmB,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;KAC5C;IAAC,OAAO,GAAG,EAAE;QACZ,MAAM,GAAG,CAAC;KACX;IAED,OAAO,SAAS,CAAC,aAAa,EAAE,QAAQ,EAAE,EAAE,EAAE,EAAE,SAAS,EAAE,CAAC,CAAC;AAC/D,CAAC,CAAA,CAAC","sourcesContent":["import * as _ from 'lodash';\nimport { k8sCreate } from '@console/internal/module/k8s';\nimport { PipelineModel } from '../../../models';\nimport { GitImportFormData } from '../import-types';\nimport { createPipelineResource } from '../../pipelines/pipeline-resource/pipelineResource-utils';\n\nexport const createGitResource = (url: string, namespace: string, ref: string = 'master') => {\n  const params = { url, revision: ref };\n  return createPipelineResource(params, 'git', namespace);\n};\n\nexport const createImageResource = (name: string, namespace: string) => {\n  const params = {\n    url: `image-registry.openshift-image-registry.svc:5000/${namespace}/${name}`,\n  };\n\n  return createPipelineResource(params, 'image', namespace);\n};\n\nexport const createPipelineForImportFlow = async (formData: GitImportFormData) => {\n  const {\n    name,\n    project: { name: namespace },\n    git,\n    pipeline,\n  } = formData;\n  const template = _.cloneDeep(pipeline.template);\n\n  template.metadata = {\n    name: `${name}`,\n    namespace,\n    labels: { ...template.metadata.labels, 'app.kubernetes.io/instance': name },\n  };\n\n  template.spec.params =\n    template.spec.params &&\n    template.spec.params.map((param) => {\n      if (param.name === 'APP_NAME') {\n        param.default = name;\n      }\n      return param;\n    });\n\n  try {\n    await createGitResource(git.url, namespace, git.ref);\n    await createImageResource(name, namespace);\n  } catch (err) {\n    throw err;\n  }\n\n  return k8sCreate(PipelineModel, template, { ns: namespace });\n};\n"]}]}