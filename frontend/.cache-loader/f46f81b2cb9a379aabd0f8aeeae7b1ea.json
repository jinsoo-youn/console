{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/anchors/CenterAnchor.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/anchors/CenterAnchor.ts","mtime":1615298458710},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import AbstractAnchor from './AbstractAnchor';\nimport { getEllipseAnchorPoint } from '../utils/anchor-utils';\nexport default class CenterAnchor extends AbstractAnchor {\n    getLocation(reference) {\n        const bounds = this.owner.getBounds();\n        if (this.offset === 0) {\n            return bounds.getCenter();\n        }\n        const offset2x = this.offset * 2;\n        return getEllipseAnchorPoint(bounds.getCenter(), offset2x, offset2x, reference);\n    }\n}\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/anchors/CenterAnchor.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/anchors/CenterAnchor.ts"],"names":[],"mappings":"AACA,OAAO,cAAc,MAAM,kBAAkB,CAAC;AAC9C,OAAO,EAAE,qBAAqB,EAAE,MAAM,uBAAuB,CAAC;AAE9D,MAAM,CAAC,OAAO,OAAO,YAAa,SAAQ,cAAc;IACtD,WAAW,CAAC,SAAgB;QAC1B,MAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;QACtC,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;YACrB,OAAO,MAAM,CAAC,SAAS,EAAE,CAAC;SAC3B;QACD,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QACjC,OAAO,qBAAqB,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC;IAClF,CAAC;CACF","sourcesContent":["import Point from '../geom/Point';\nimport AbstractAnchor from './AbstractAnchor';\nimport { getEllipseAnchorPoint } from '../utils/anchor-utils';\n\nexport default class CenterAnchor extends AbstractAnchor {\n  getLocation(reference: Point): Point {\n    const bounds = this.owner.getBounds();\n    if (this.offset === 0) {\n      return bounds.getCenter();\n    }\n    const offset2x = this.offset * 2;\n    return getEllipseAnchorPoint(bounds.getCenter(), offset2x, offset2x, reference);\n  }\n}\n"]}]}