{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/monitoring/dashboard/MonitoringDashboard.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/monitoring/dashboard/MonitoringDashboard.tsx","mtime":1615298458620},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { connect } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport Dashboard from '@console/shared/src/components/dashboard/Dashboard';\nimport { getURLSearchParams, ResourceLink } from '@console/internal/components/utils';\nimport { TimespanDropdown, PollIntervalDropdown, } from '@console/internal/components/monitoring/dashboards';\nimport ConnectedMonitoringDashboardGraph from './MonitoringDashboardGraph';\nimport { monitoringDashboardQueries, workloadMetricsQueries, topWorkloadMetricsQueries, } from '../queries';\nimport './MonitoringDashboard.scss';\nexport const MonitoringDashboard = ({ match, timespan, pollInterval }) => {\n    const namespace = match.params.ns;\n    const params = getURLSearchParams();\n    const { workloadName, workloadType } = params;\n    const workLoadPresent = workloadName && workloadType;\n    const queries = workLoadPresent\n        ? [...topWorkloadMetricsQueries, ...workloadMetricsQueries]\n        : monitoringDashboardQueries;\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Helmet, null,\n            React.createElement(\"title\", null, \"Dashboard\")),\n        React.createElement(\"div\", { className: \"odc-monitoring-dashboard\" },\n            React.createElement(\"div\", { className: \"odc-monitoring-dashboard__dropdown-options\" },\n                React.createElement(TimespanDropdown, null),\n                React.createElement(PollIntervalDropdown, null)),\n            workLoadPresent && (React.createElement(\"div\", { className: \"odc-monitoring-dashboard__resource-link\" },\n                \"Showing metrics for \\u00A0\",\n                React.createElement(ResourceLink, { kind: workloadType, name: workloadName, namespace: namespace, title: workloadName, inline: true }))),\n            React.createElement(Dashboard, null, _.map(queries, (q) => (React.createElement(ConnectedMonitoringDashboardGraph, { title: q.title, namespace: namespace, graphType: q.chartType, query: q.query({ namespace, workloadName, workloadType: _.toLower(workloadType) }), humanize: q.humanize, byteDataType: q.byteDataType, key: q.title, timespan: timespan, pollInterval: pollInterval })))))));\n};\nconst mapStateToProps = (state) => ({\n    timespan: state.UI.getIn(['monitoringDashboards', 'timespan']),\n    pollInterval: state.UI.getIn(['monitoringDashboards', 'pollInterval']),\n});\nexport default connect(mapStateToProps)(MonitoringDashboard);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/monitoring/dashboard/MonitoringDashboard.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/monitoring/dashboard/MonitoringDashboard.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAE5B,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AACtC,OAAO,EAAE,MAAM,EAAE,MAAM,cAAc,CAAC;AACtC,OAAO,SAAS,MAAM,oDAAoD,CAAC;AAE3E,OAAO,EAAE,kBAAkB,EAAE,YAAY,EAAE,MAAM,oCAAoC,CAAC;AACtF,OAAO,EACL,gBAAgB,EAChB,oBAAoB,GACrB,MAAM,oDAAoD,CAAC;AAC5D,OAAO,iCAAiC,MAAM,4BAA4B,CAAC;AAC3E,OAAO,EACL,0BAA0B,EAC1B,sBAAsB,EAEtB,yBAAyB,GAC1B,MAAM,YAAY,CAAC;AACpB,OAAO,4BAA4B,CAAC;AAepC,MAAM,CAAC,MAAM,mBAAmB,GAAoB,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,YAAY,EAAE,EAAE,EAAE;IACxF,MAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAAC,EAAE,CAAC;IAClC,MAAM,MAAM,GAAG,kBAAkB,EAAE,CAAC;IACpC,MAAM,EAAE,YAAY,EAAE,YAAY,EAAE,GAAG,MAAM,CAAC;IAC9C,MAAM,eAAe,GAAG,YAAY,IAAI,YAAY,CAAC;IACrD,MAAM,OAAO,GAAsB,eAAe;QAChD,CAAC,CAAC,CAAC,GAAG,yBAAyB,EAAE,GAAG,sBAAsB,CAAC;QAC3D,CAAC,CAAC,0BAA0B,CAAC;IAE/B,OAAO,CACL;QACE,oBAAC,MAAM;YACL,+CAAwB,CACjB;QACT,6BAAK,SAAS,EAAC,0BAA0B;YACvC,6BAAK,SAAS,EAAC,4CAA4C;gBACzD,oBAAC,gBAAgB,OAAG;gBACpB,oBAAC,oBAAoB,OAAG,CACpB;YACL,eAAe,IAAI,CAClB,6BAAK,SAAS,EAAC,yCAAyC;;gBAEtD,oBAAC,YAAY,IACX,IAAI,EAAE,YAAY,EAClB,IAAI,EAAE,YAAY,EAClB,SAAS,EAAE,SAAS,EACpB,KAAK,EAAE,YAAY,EACnB,MAAM,SACN,CACE,CACP;YACD,oBAAC,SAAS,QACP,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,CACrB,oBAAC,iCAAiC,IAChC,KAAK,EAAE,CAAC,CAAC,KAAK,EACd,SAAS,EAAE,SAAS,EACpB,SAAS,EAAE,CAAC,CAAC,SAAS,EACtB,KAAK,EAAE,CAAC,CAAC,KAAK,CAAC,EAAE,SAAS,EAAE,YAAY,EAAE,YAAY,EAAE,CAAC,CAAC,OAAO,CAAC,YAAY,CAAC,EAAE,CAAC,EAClF,QAAQ,EAAE,CAAC,CAAC,QAAQ,EACpB,YAAY,EAAE,CAAC,CAAC,YAAY,EAC5B,GAAG,EAAE,CAAC,CAAC,KAAK,EACZ,QAAQ,EAAE,QAAQ,EAClB,YAAY,EAAE,YAAY,GAC1B,CACH,CAAC,CACQ,CACR,CACL,CACJ,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,eAAe,GAAG,CAAC,KAAgB,EAAc,EAAE,CAAC,CAAC;IACzD,QAAQ,EAAE,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,sBAAsB,EAAE,UAAU,CAAC,CAAC;IAC9D,YAAY,EAAE,KAAK,CAAC,EAAE,CAAC,KAAK,CAAC,CAAC,sBAAsB,EAAE,cAAc,CAAC,CAAC;CACvE,CAAC,CAAC;AAEH,eAAe,OAAO,CAAuC,eAAe,CAAC,CAAC,mBAAmB,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { match as RMatch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport Dashboard from '@console/shared/src/components/dashboard/Dashboard';\nimport { RootState } from '@console/internal/redux';\nimport { getURLSearchParams, ResourceLink } from '@console/internal/components/utils';\nimport {\n  TimespanDropdown,\n  PollIntervalDropdown,\n} from '@console/internal/components/monitoring/dashboards';\nimport ConnectedMonitoringDashboardGraph from './MonitoringDashboardGraph';\nimport {\n  monitoringDashboardQueries,\n  workloadMetricsQueries,\n  MonitoringQuery,\n  topWorkloadMetricsQueries,\n} from '../queries';\nimport './MonitoringDashboard.scss';\n\ntype MonitoringDashboardProps = {\n  match: RMatch<{\n    ns?: string;\n  }>;\n};\n\ntype StateProps = {\n  timespan: number;\n  pollInterval: number;\n};\n\ntype Props = MonitoringDashboardProps & StateProps;\n\nexport const MonitoringDashboard: React.FC<Props> = ({ match, timespan, pollInterval }) => {\n  const namespace = match.params.ns;\n  const params = getURLSearchParams();\n  const { workloadName, workloadType } = params;\n  const workLoadPresent = workloadName && workloadType;\n  const queries: MonitoringQuery[] = workLoadPresent\n    ? [...topWorkloadMetricsQueries, ...workloadMetricsQueries]\n    : monitoringDashboardQueries;\n\n  return (\n    <>\n      <Helmet>\n        <title>Dashboard</title>\n      </Helmet>\n      <div className=\"odc-monitoring-dashboard\">\n        <div className=\"odc-monitoring-dashboard__dropdown-options\">\n          <TimespanDropdown />\n          <PollIntervalDropdown />\n        </div>\n        {workLoadPresent && (\n          <div className=\"odc-monitoring-dashboard__resource-link\">\n            Showing metrics for &nbsp;\n            <ResourceLink\n              kind={workloadType}\n              name={workloadName}\n              namespace={namespace}\n              title={workloadName}\n              inline\n            />\n          </div>\n        )}\n        <Dashboard>\n          {_.map(queries, (q) => (\n            <ConnectedMonitoringDashboardGraph\n              title={q.title}\n              namespace={namespace}\n              graphType={q.chartType}\n              query={q.query({ namespace, workloadName, workloadType: _.toLower(workloadType) })}\n              humanize={q.humanize}\n              byteDataType={q.byteDataType}\n              key={q.title}\n              timespan={timespan}\n              pollInterval={pollInterval}\n            />\n          ))}\n        </Dashboard>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  timespan: state.UI.getIn(['monitoringDashboards', 'timespan']),\n  pollInterval: state.UI.getIn(['monitoringDashboards', 'pollInterval']),\n});\n\nexport default connect<StateProps, MonitoringDashboardProps>(mapStateToProps)(MonitoringDashboard);\n"]}]}