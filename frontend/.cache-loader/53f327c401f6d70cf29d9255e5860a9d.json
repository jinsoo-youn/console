{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vmi/combined.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vmi/combined.ts","mtime":1615298458670},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { getName } from '@console/shared';\nimport { getServicePort } from '../service';\nimport { DEFAULT_RDP_PORT, TEMPLATE_VM_NAME_LABEL } from '../../constants/vm';\nimport { getRdpAddressPort } from '../service/rdp';\nimport { isConnectionEncrypted } from '../../utils/url';\nimport { getVMIApiPath, getVMISubresourcePath } from './selectors';\nconst findVMServiceWithPort = (vmi, allServices, targetPort) => (allServices || []).find((service) => getName(vmi) === _.get(service, ['spec', 'selector', TEMPLATE_VM_NAME_LABEL]) &&\n    !!getServicePort(service, targetPort));\n/**\n * Finds Service for the VM/VMI which is exposing the RDP port.\n * Returns undefined or single first match.\n *\n * To pair service with VM, selector must be set on the Service object:\n *   spec:\n *     selector:\n *       vm.kubevirt.io/name: VM_NAME\n *\n * https://kubevirt.io/user-guide/docs/latest/using-virtual-machines/expose-service.html\n * virtctl expose virtualmachine [VM_NAME] --name [MY_SERVICE_NAME] --port 27017 --target-port 3389\n */\nexport const findRDPService = (vmi, allServices) => findVMServiceWithPort(vmi, allServices, DEFAULT_RDP_PORT);\nexport const getRdpConnectionDetails = (vmi, rdpService, launcherPod) => {\n    if (!vmi || !rdpService) {\n        return undefined;\n    }\n    return {\n        vmi,\n        manual: getRdpAddressPort(rdpService, launcherPod),\n    };\n};\nexport const getSerialConsoleConnectionDetails = (vmi) => {\n    if (!vmi) {\n        return undefined;\n    }\n    const protocol = isConnectionEncrypted() ? 'wss' : 'ws';\n    return {\n        vmi,\n        host: `${protocol}://${window.location.hostname}:${window.location.port ||\n            (isConnectionEncrypted() ? '443' : '80')}`,\n        path: `/${getVMISubresourcePath()}/${getVMIApiPath(vmi)}/console`,\n    };\n};\nexport const getVncConnectionDetails = (vmi) => {\n    if (!vmi) {\n        return undefined;\n    }\n    // the novnc library requires protocol to be specified so the URL must be absolute - including host:port\n    return {\n        encrypt: isConnectionEncrypted(),\n        host: window.location.hostname,\n        port: window.location.port || (isConnectionEncrypted() ? '443' : '80'),\n        // Example: ws://localhost:9000/api/kubernetes/apis/subresources.kubevirt.io/v1alpha3/namespaces/kube-system/virtualmachineinstances/vm-cirros1/vnc\n        path: `${getVMISubresourcePath()}/${getVMIApiPath(vmi)}/vnc`,\n        manual: undefined,\n    };\n};\nconst getVMIStatusConditions = (vmi) => (vmi && vmi.status && vmi.status.conditions) || [];\nexport const isGuestAgentConnected = (vmi) => getVMIStatusConditions(vmi).some((condition) => condition.type === 'AgentConnected' && condition.status === 'True');\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vmi/combined.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vmi/combined.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { K8sResourceKind, PodKind } from '@console/internal/module/k8s';\nimport { getName } from '@console/shared';\nimport { getServicePort } from '../service';\nimport { VMIKind } from '../../types/vm';\nimport { DEFAULT_RDP_PORT, TEMPLATE_VM_NAME_LABEL } from '../../constants/vm';\nimport { getRdpAddressPort } from '../service/rdp';\nimport { isConnectionEncrypted } from '../../utils/url';\nimport { getVMIApiPath, getVMISubresourcePath } from './selectors';\n\nconst findVMServiceWithPort = (vmi: VMIKind, allServices: K8sResourceKind[], targetPort: number) =>\n  (allServices || []).find(\n    (service) =>\n      getName(vmi) === _.get(service, ['spec', 'selector', TEMPLATE_VM_NAME_LABEL]) &&\n      !!getServicePort(service, targetPort),\n  );\n\n/**\n * Finds Service for the VM/VMI which is exposing the RDP port.\n * Returns undefined or single first match.\n *\n * To pair service with VM, selector must be set on the Service object:\n *   spec:\n *     selector:\n *       vm.kubevirt.io/name: VM_NAME\n *\n * https://kubevirt.io/user-guide/docs/latest/using-virtual-machines/expose-service.html\n * virtctl expose virtualmachine [VM_NAME] --name [MY_SERVICE_NAME] --port 27017 --target-port 3389\n */\nexport const findRDPService = (vmi: VMIKind, allServices: K8sResourceKind[]) =>\n  findVMServiceWithPort(vmi, allServices, DEFAULT_RDP_PORT);\n\nexport const getRdpConnectionDetails = (\n  vmi: VMIKind,\n  rdpService: K8sResourceKind,\n  launcherPod: PodKind,\n): RDPConnectionDetailsType => {\n  if (!vmi || !rdpService) {\n    return undefined;\n  }\n\n  return {\n    vmi,\n    manual: getRdpAddressPort(rdpService, launcherPod),\n  };\n};\n\nexport const getSerialConsoleConnectionDetails = (\n  vmi: VMIKind,\n): SerialConsoleConnectionDetailsType => {\n  if (!vmi) {\n    return undefined;\n  }\n\n  const protocol = isConnectionEncrypted() ? 'wss' : 'ws';\n  return {\n    vmi,\n    host: `${protocol}://${window.location.hostname}:${window.location.port ||\n      (isConnectionEncrypted() ? '443' : '80')}`,\n    path: `/${getVMISubresourcePath()}/${getVMIApiPath(vmi)}/console`, // CSRF Token will be added in WSFactory\n  };\n};\n\nexport const getVncConnectionDetails = (vmi: VMIKind): VNCConnectionDetailsType => {\n  if (!vmi) {\n    return undefined;\n  }\n\n  // the novnc library requires protocol to be specified so the URL must be absolute - including host:port\n  return {\n    encrypt: isConnectionEncrypted(), // whether ws or wss to be used\n    host: window.location.hostname,\n    port: window.location.port || (isConnectionEncrypted() ? '443' : '80'),\n\n    // Example: ws://localhost:9000/api/kubernetes/apis/subresources.kubevirt.io/v1alpha3/namespaces/kube-system/virtualmachineinstances/vm-cirros1/vnc\n    path: `${getVMISubresourcePath()}/${getVMIApiPath(vmi)}/vnc`,\n\n    manual: undefined, // so far unsupported\n    /* TODO: Desktop viewer connection needs general agreement by the Kubevirt community how to expose the VNC port for clients without WS\n      {\n      address: 'Service not exposed',\n      port: undefined,\n      tlsPort: undefined,\n    },\n    */\n  };\n};\n\nconst getVMIStatusConditions = (vmi: VMIKind) => (vmi && vmi.status && vmi.status.conditions) || [];\n\nexport const isGuestAgentConnected = (vmi: VMIKind): boolean =>\n  getVMIStatusConditions(vmi).some(\n    (condition) => condition.type === 'AgentConnected' && condition.status === 'True',\n  );\n\nexport type VNCConnectionDetailsType = {\n  encrypt: boolean;\n  host: string;\n  port: string | number;\n  path: string;\n  manual: VNCConnectionDetailsManualType; // so far not used, kept for compatibility and future extension when VNC can be accessed directly without k8s API proxy\n};\n\nexport type SerialConsoleConnectionDetailsType = {\n  vmi: VMIKind;\n  host: string;\n  path: string;\n};\n\nexport type VNCConnectionDetailsManualType = {};\n\nexport type RDPConnectionDetailsManualType = {\n  address: string;\n  port: number | string;\n};\n\nexport type RDPConnectionDetailsType = {\n  vmi: VMIKind;\n  manual: RDPConnectionDetailsManualType;\n};\n"]}]}