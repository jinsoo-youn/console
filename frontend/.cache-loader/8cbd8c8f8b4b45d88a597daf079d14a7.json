{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/components/defs/SVGDefsProvider.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/components/defs/SVGDefsProvider.tsx","mtime":1615298458710},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport SVGDefsContext from './SVGDefsContext';\nexport class Defs extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {};\n    }\n    setDefs(defs) {\n        // setting the state will re-render this component\n        this.setState({ defs: Object.assign({}, defs) });\n    }\n    render() {\n        const { defs } = this.state;\n        return defs ? (React.createElement(\"defs\", null, Object.keys(defs).map((id) => (React.createElement(React.Fragment, { key: id }, defs[id].node))))) : null;\n    }\n}\n/**\n * Renders a `<defs>` element and sets up a {@link SVGDefsContext} provider such that child components\n * may contribute to the `<defs>` without the parent component needing explicit knowledge of each contribution.\n * This helps decouple the parent implementation from the children and ensures that duplicate defs entries,\n * such as filters, are eliminated.\n */\nclass SVGDefsProvider extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.defsRef = React.createRef();\n        this.defs = {};\n        this.contextValue = {\n            addDef: (id, node) => {\n                const defObj = this.defs[id];\n                if (defObj) {\n                    defObj.count++;\n                }\n                else {\n                    this.defs[id] = {\n                        count: 1,\n                        node,\n                    };\n                    this.updateDefs();\n                }\n            },\n            removeDef: (id) => {\n                const defObj = this.defs[id];\n                if (--defObj.count === 0) {\n                    delete this.defs[id];\n                    this.updateDefs();\n                }\n            },\n        };\n    }\n    updateDefs() {\n        // Set the defs directly on the child component so that only it will re-render.\n        // Does not use `setState` because otherwise all child components would be re-renders again\n        // when only the `Defs` component needs to be rendered.\n        this.defsRef.current && this.defsRef.current.setDefs(this.defs);\n    }\n    render() {\n        return (React.createElement(SVGDefsContext.Provider, { value: this.contextValue },\n            React.createElement(Defs, { ref: this.defsRef }),\n            this.props.children));\n    }\n}\nexport default SVGDefsProvider;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/components/defs/SVGDefsProvider.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/components/defs/SVGDefsProvider.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,cAAuC,MAAM,kBAAkB,CAAC;AAavE,MAAM,OAAO,IAAK,SAAQ,KAAK,CAAC,aAA4B;IAC1D,YAAY,KAAS;QACnB,KAAK,CAAC,KAAK,CAAC,CAAC;QACb,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;IAClB,CAAC;IAEM,OAAO,CAAC,IAAa;QAC1B,kDAAkD;QAClD,IAAI,CAAC,QAAQ,CAAC,EAAE,IAAI,oBAAO,IAAI,CAAE,EAAE,CAAC,CAAC;IACvC,CAAC;IAED,MAAM;QACJ,MAAM,EAAE,IAAI,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAC5B,OAAO,IAAI,CAAC,CAAC,CAAC,CACZ,kCACG,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,CAC7B,oBAAC,KAAK,CAAC,QAAQ,IAAC,GAAG,EAAE,EAAE,IAAG,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAkB,CAC1D,CAAC,CACG,CACR,CAAC,CAAC,CAAC,IAAI,CAAC;IACX,CAAC;CACF;AAMD;;;;;GAKG;AACH,MAAM,eAAgB,SAAQ,KAAK,CAAC,SAA+B;IAAnE;;QACmB,YAAO,GAAG,KAAK,CAAC,SAAS,EAAQ,CAAC;QAElC,SAAI,GAAY,EAAE,CAAC;QAE5B,iBAAY,GAAwB;YAC1C,MAAM,EAAE,CAAC,EAAE,EAAE,IAAI,EAAE,EAAE;gBACnB,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBAC7B,IAAI,MAAM,EAAE;oBACV,MAAM,CAAC,KAAK,EAAE,CAAC;iBAChB;qBAAM;oBACL,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,GAAG;wBACd,KAAK,EAAE,CAAC;wBACR,IAAI;qBACL,CAAC;oBACF,IAAI,CAAC,UAAU,EAAE,CAAC;iBACnB;YACH,CAAC;YACD,SAAS,EAAE,CAAC,EAAE,EAAE,EAAE;gBAChB,MAAM,MAAM,GAAG,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBAC7B,IAAI,EAAE,MAAM,CAAC,KAAK,KAAK,CAAC,EAAE;oBACxB,OAAO,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;oBACrB,IAAI,CAAC,UAAU,EAAE,CAAC;iBACnB;YACH,CAAC;SACF,CAAC;IAiBJ,CAAC;IAfS,UAAU;QAChB,+EAA+E;QAC/E,2FAA2F;QAC3F,uDAAuD;QACvD,IAAI,CAAC,OAAO,CAAC,OAAO,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAClE,CAAC;IAED,MAAM;QACJ,OAAO,CACL,oBAAC,cAAc,CAAC,QAAQ,IAAC,KAAK,EAAE,IAAI,CAAC,YAAY;YAC/C,oBAAC,IAAI,IAAC,GAAG,EAAE,IAAI,CAAC,OAAO,GAAI;YAC1B,IAAI,CAAC,KAAK,CAAC,QAAQ,CACI,CAC3B,CAAC;IACJ,CAAC;CACF;AAED,eAAe,eAAe,CAAC","sourcesContent":["import * as React from 'react';\nimport SVGDefsContext, { SVGDefsContextProps } from './SVGDefsContext';\n\ntype DefsMap = {\n  [id: string]: {\n    count: number;\n    node: React.ReactNode;\n  };\n};\n\nexport type DefsState = {\n  defs?: DefsMap;\n};\n\nexport class Defs extends React.PureComponent<{}, DefsState> {\n  constructor(props: {}) {\n    super(props);\n    this.state = {};\n  }\n\n  public setDefs(defs: DefsMap) {\n    // setting the state will re-render this component\n    this.setState({ defs: { ...defs } });\n  }\n\n  render() {\n    const { defs } = this.state;\n    return defs ? (\n      <defs>\n        {Object.keys(defs).map((id) => (\n          <React.Fragment key={id}>{defs[id].node}</React.Fragment>\n        ))}\n      </defs>\n    ) : null;\n  }\n}\n\nexport interface SVGDefsProviderProps {\n  children?: React.ReactNode;\n}\n\n/**\n * Renders a `<defs>` element and sets up a {@link SVGDefsContext} provider such that child components\n * may contribute to the `<defs>` without the parent component needing explicit knowledge of each contribution.\n * This helps decouple the parent implementation from the children and ensures that duplicate defs entries,\n * such as filters, are eliminated.\n */\nclass SVGDefsProvider extends React.Component<SVGDefsProviderProps> {\n  private readonly defsRef = React.createRef<Defs>();\n\n  private readonly defs: DefsMap = {};\n\n  private contextValue: SVGDefsContextProps = {\n    addDef: (id, node) => {\n      const defObj = this.defs[id];\n      if (defObj) {\n        defObj.count++;\n      } else {\n        this.defs[id] = {\n          count: 1,\n          node,\n        };\n        this.updateDefs();\n      }\n    },\n    removeDef: (id) => {\n      const defObj = this.defs[id];\n      if (--defObj.count === 0) {\n        delete this.defs[id];\n        this.updateDefs();\n      }\n    },\n  };\n\n  private updateDefs() {\n    // Set the defs directly on the child component so that only it will re-render.\n    // Does not use `setState` because otherwise all child components would be re-renders again\n    // when only the `Defs` component needs to be rendered.\n    this.defsRef.current && this.defsRef.current.setDefs(this.defs);\n  }\n\n  render() {\n    return (\n      <SVGDefsContext.Provider value={this.contextValue}>\n        <Defs ref={this.defsRef} />\n        {this.props.children}\n      </SVGDefsContext.Provider>\n    );\n  }\n}\n\nexport default SVGDefsProvider;\n"]}]}