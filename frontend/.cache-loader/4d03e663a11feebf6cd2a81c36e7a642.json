{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/nodes/NodeStatus.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/nodes/NodeStatus.tsx","mtime":1615298458600},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport ConsumerPopover from '@console/shared/src/components/dashboard/utilization-card/TopConsumerPopover';\nimport { Status, SecondaryStatus, getNodeSecondaryStatus } from '@console/shared';\nimport { humanizeBinaryBytes, humanizeNumber } from '@console/internal/components/utils';\nimport { nodeStatus } from '../../status/node';\nimport { PressureQueries, Condition } from '../../queries';\nconst conditionDescriptionMap = Object.freeze({\n    [Condition.DISK_PRESSURE]: 'available memory is low',\n    [Condition.MEM_PRESSURE]: 'available disk capacity is low',\n    [Condition.PID_PRESSURE]: 'CPU is running a large number of processes',\n});\nconst humanizeMap = Object.freeze({\n    [Condition.DISK_PRESSURE]: humanizeBinaryBytes,\n    [Condition.MEM_PRESSURE]: humanizeBinaryBytes,\n    [Condition.PID_PRESSURE]: humanizeNumber,\n});\nconst isMonitoredCondition = (condition) => [Condition.DISK_PRESSURE, Condition.MEM_PRESSURE, Condition.PID_PRESSURE].includes(condition);\nconst getDegradedStates = (node) => {\n    return node.status.conditions\n        .filter(({ status, type }) => status === 'True' && isMonitoredCondition(type))\n        .map(({ type }) => type);\n};\nconst NodeStatus = ({ node, showPopovers = false, className }) => {\n    const status = showPopovers ? getDegradedStates(node) : [];\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Status, { status: nodeStatus(node), className: className }),\n        React.createElement(SecondaryStatus, { status: getNodeSecondaryStatus(node) }),\n        status.length > 0 &&\n            status.map((item) => (React.createElement(\"div\", { key: item },\n                React.createElement(ConsumerPopover, { title: _.startCase(item), current: _.startCase(item), consumers: PressureQueries[item](node.metadata.name), humanize: humanizeMap[item], description: `This node's ${conditionDescriptionMap[item]}. Performance may be degraded.` }))))));\n};\nexport default NodeStatus;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/nodes/NodeStatus.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/nodes/NodeStatus.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,eAAe,MAAM,8EAA8E,CAAC;AAC3G,OAAO,EAAE,MAAM,EAAE,eAAe,EAAE,sBAAsB,EAAE,MAAM,iBAAiB,CAAC;AAElF,OAAO,EAAE,mBAAmB,EAAE,cAAc,EAAE,MAAM,oCAAoC,CAAC;AACzF,OAAO,EAAE,UAAU,EAAE,MAAM,mBAAmB,CAAC;AAC/C,OAAO,EAAE,eAAe,EAAE,SAAS,EAAE,MAAM,eAAe,CAAC;AAE3D,MAAM,uBAAuB,GAAG,MAAM,CAAC,MAAM,CAAC;IAC5C,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE,yBAAyB;IACpD,CAAC,SAAS,CAAC,YAAY,CAAC,EAAE,gCAAgC;IAC1D,CAAC,SAAS,CAAC,YAAY,CAAC,EAAE,4CAA4C;CACvE,CAAC,CAAC;AAEH,MAAM,WAAW,GAAG,MAAM,CAAC,MAAM,CAAC;IAChC,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE,mBAAmB;IAC9C,CAAC,SAAS,CAAC,YAAY,CAAC,EAAE,mBAAmB;IAC7C,CAAC,SAAS,CAAC,YAAY,CAAC,EAAE,cAAc;CACzC,CAAC,CAAC;AAEH,MAAM,oBAAoB,GAAG,CAAC,SAAoB,EAAW,EAAE,CAC7D,CAAC,SAAS,CAAC,aAAa,EAAE,SAAS,CAAC,YAAY,EAAE,SAAS,CAAC,YAAY,CAAC,CAAC,QAAQ,CAAC,SAAS,CAAC,CAAC;AAEhG,MAAM,iBAAiB,GAAG,CAAC,IAAc,EAAe,EAAE;IACxD,OAAO,IAAI,CAAC,MAAM,CAAC,UAAU;SAC1B,MAAM,CAAC,CAAC,EAAE,MAAM,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,MAAM,KAAK,MAAM,IAAI,oBAAoB,CAAC,IAAiB,CAAC,CAAC;SAC1F,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,IAAiB,CAAC,CAAC;AAC1C,CAAC,CAAC;AAEF,MAAM,UAAU,GAA8B,CAAC,EAAE,IAAI,EAAE,YAAY,GAAG,KAAK,EAAE,SAAS,EAAE,EAAE,EAAE;IAC1F,MAAM,MAAM,GAAG,YAAY,CAAC,CAAC,CAAC,iBAAiB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAC3D,OAAO,CACL;QACE,oBAAC,MAAM,IAAC,MAAM,EAAE,UAAU,CAAC,IAAI,CAAC,EAAE,SAAS,EAAE,SAAS,GAAI;QAC1D,oBAAC,eAAe,IAAC,MAAM,EAAE,sBAAsB,CAAC,IAAI,CAAC,GAAI;QACxD,MAAM,CAAC,MAAM,GAAG,CAAC;YAChB,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,CACnB,6BAAK,GAAG,EAAE,IAAI;gBACZ,oBAAC,eAAe,IACd,KAAK,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,EACxB,OAAO,EAAE,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,EAC1B,SAAS,EAAE,eAAe,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EACpD,QAAQ,EAAE,WAAW,CAAC,IAAI,CAAC,EAC3B,WAAW,EAAE,eAAe,uBAAuB,CAAC,IAAI,CAAC,gCAAgC,GACzF,CACE,CACP,CAAC,CACH,CACJ,CAAC;AACJ,CAAC,CAAC;AAQF,eAAe,UAAU,CAAC","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport ConsumerPopover from '@console/shared/src/components/dashboard/utilization-card/TopConsumerPopover';\nimport { Status, SecondaryStatus, getNodeSecondaryStatus } from '@console/shared';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport { humanizeBinaryBytes, humanizeNumber } from '@console/internal/components/utils';\nimport { nodeStatus } from '../../status/node';\nimport { PressureQueries, Condition } from '../../queries';\n\nconst conditionDescriptionMap = Object.freeze({\n  [Condition.DISK_PRESSURE]: 'available memory is low',\n  [Condition.MEM_PRESSURE]: 'available disk capacity is low',\n  [Condition.PID_PRESSURE]: 'CPU is running a large number of processes',\n});\n\nconst humanizeMap = Object.freeze({\n  [Condition.DISK_PRESSURE]: humanizeBinaryBytes,\n  [Condition.MEM_PRESSURE]: humanizeBinaryBytes,\n  [Condition.PID_PRESSURE]: humanizeNumber,\n});\n\nconst isMonitoredCondition = (condition: Condition): boolean =>\n  [Condition.DISK_PRESSURE, Condition.MEM_PRESSURE, Condition.PID_PRESSURE].includes(condition);\n\nconst getDegradedStates = (node: NodeKind): Condition[] => {\n  return node.status.conditions\n    .filter(({ status, type }) => status === 'True' && isMonitoredCondition(type as Condition))\n    .map(({ type }) => type as Condition);\n};\n\nconst NodeStatus: React.FC<NodeStatusProps> = ({ node, showPopovers = false, className }) => {\n  const status = showPopovers ? getDegradedStates(node) : [];\n  return (\n    <>\n      <Status status={nodeStatus(node)} className={className} />\n      <SecondaryStatus status={getNodeSecondaryStatus(node)} />\n      {status.length > 0 &&\n        status.map((item) => (\n          <div key={item}>\n            <ConsumerPopover\n              title={_.startCase(item)}\n              current={_.startCase(item)}\n              consumers={PressureQueries[item](node.metadata.name)}\n              humanize={humanizeMap[item]}\n              description={`This node's ${conditionDescriptionMap[item]}. Performance may be degraded.`}\n            />\n          </div>\n        ))}\n    </>\n  );\n};\n\ntype NodeStatusProps = {\n  node: NodeKind;\n  showPopovers?: boolean;\n  className?: string;\n};\n\nexport default NodeStatus;\n"]}]}