{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/datetime.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/datetime.ts","mtime":1616735742480},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\n// Behaves like moment.js's fromNow\nexport const fromNow = (dateTime, now = undefined, options = { omitSuffix: false }) => {\n    // Check for null. If dateTime is null, it returns incorrect date and time of Wed Dec 31 1969 19:00:00 GMT-0500 (Eastern Standard Time)\n    if (!dateTime) {\n        return '-';\n    }\n    if (!now) {\n        now = new Date();\n    }\n    dateTime = new Date(dateTime);\n    const secondsAgo = (now.getTime() - dateTime.getTime()) / 1000;\n    const minutesAgo = secondsAgo / 60;\n    const hoursAgo = minutesAgo / 60;\n    const daysAgo = hoursAgo / 24;\n    if (daysAgo > 548) {\n        const count = Math.round(daysAgo / 365);\n        return options.omitSuffix ? `${count} years` : `${count} years ago`;\n    }\n    if (daysAgo > 320) {\n        return options.omitSuffix ? 'year' : 'a year ago';\n    }\n    if (daysAgo > 45) {\n        const count = Math.round(daysAgo / 30);\n        return options.omitSuffix ? `${count} months` : `${count} months ago`;\n    }\n    if (daysAgo > 26) {\n        return options.omitSuffix ? 'month' : 'a month ago';\n    }\n    if (hoursAgo > 36) {\n        const count = Math.round(daysAgo);\n        return options.omitSuffix ? `${count} days` : `${count} days ago`;\n    }\n    if (hoursAgo > 22) {\n        return options.omitSuffix ? 'day' : 'a day ago';\n    }\n    if (minutesAgo > 90) {\n        const count = Math.round(hoursAgo);\n        return options.omitSuffix ? `${count} hours` : `${count} hours ago`;\n    }\n    if (minutesAgo > 45) {\n        return options.omitSuffix ? 'hour' : 'an hour ago';\n    }\n    if (secondsAgo > 90) {\n        const count = Math.round(minutesAgo);\n        return options.omitSuffix ? `${count} minutes` : `${count} minutes ago`;\n    }\n    if (secondsAgo > 45) {\n        return options.omitSuffix ? 'minute' : 'a minute ago';\n    }\n    if (secondsAgo > 15) {\n        return options.omitSuffix ? 'few seconds' : 'less than a minute ago';\n    }\n    if (secondsAgo >= 0) {\n        return options.omitSuffix ? 'few seconds' : 'a few seconds ago';\n    }\n    if (secondsAgo > -45) {\n        return 'a few seconds from now';\n    }\n    if (secondsAgo > -90) {\n        return 'a minute from now';\n    }\n    if (minutesAgo > -45) {\n        return `${-Math.round(minutesAgo)} minutes from now`;\n    }\n    if (minutesAgo > -90) {\n        return 'an hour from now';\n    }\n    if (hoursAgo > -22) {\n        return `${-Math.round(hoursAgo)} hours from now`;\n    }\n    if (hoursAgo > -36) {\n        return 'a day from now';\n    }\n    if (daysAgo > -26) {\n        return `${-Math.round(daysAgo)} days from now`;\n    }\n    if (daysAgo > -45) {\n        return 'a month from now';\n    }\n    if (daysAgo > -320) {\n        return `${-Math.round(daysAgo / 30)} months from now`;\n    }\n    if (daysAgo > -580) {\n        return 'a year from now';\n    }\n    return `${-Math.round(daysAgo / 365)} years from now`;\n};\nexport const isValid = (dateTime) => dateTime instanceof Date && !_.isNaN(dateTime.valueOf());\n// Formats a duration in milliseconds like '1h 10m 23s'.\nexport const formatDuration = (ms) => {\n    if (!_.isFinite(ms) || ms < 0) {\n        return '';\n    }\n    const totalSeconds = Math.round(ms / 1000);\n    const secondsInHour = 60 * 60;\n    const secondsInMinute = 60;\n    const hours = Math.floor(totalSeconds / secondsInHour);\n    const minutes = Math.floor((totalSeconds % secondsInHour) / secondsInMinute);\n    const seconds = totalSeconds % secondsInMinute;\n    let formatted = '';\n    if (hours) {\n        formatted += `${hours}h `;\n    }\n    if (hours || minutes) {\n        formatted += `${minutes}m `;\n    }\n    formatted += `${seconds}s`;\n    return formatted;\n};\n// Conversions between units and milliseconds\nconst s = 1000;\nconst m = s * 60;\nconst h = m * 60;\nconst d = h * 24;\nconst w = d * 7;\nconst units = { w, d, h, m, s };\n// Formats a duration in milliseconds like \"1h 10m\"\nexport const formatPrometheusDuration = (ms) => {\n    if (!_.isFinite(ms) || ms < 0) {\n        return '';\n    }\n    let remaining = ms;\n    let str = '';\n    _.each(units, (factor, unit) => {\n        const n = Math.floor(remaining / factor);\n        if (n > 0) {\n            str += `${n}${unit} `;\n            remaining -= n * factor;\n        }\n    });\n    return _.trim(str);\n};\n// Converts a duration like \"1h 10m 23s\" to milliseconds or returns 0 if the duration could not be parsed\nexport const parsePrometheusDuration = (duration) => {\n    try {\n        const parts = duration\n            .trim()\n            .split(/\\s+/)\n            .map((p) => p.match(/^(\\d+)([wdhms])$/));\n        return _.sumBy(parts, (p) => parseInt(p[1], 10) * units[p[2]]);\n    }\n    catch (ignored) {\n        // Invalid duration format\n        return 0;\n    }\n};\nconst zeroPad = (number) => (number < 10 ? `0${number}` : number);\nexport const twentyFourHourTime = (date) => {\n    const hours = zeroPad(date.getHours());\n    const minutes = zeroPad(date.getMinutes());\n    return `${hours}:${minutes}`;\n};\nexport const twentyFourHourTimeWithSeconds = (date) => {\n    const hours = zeroPad(date.getHours());\n    const minutes = zeroPad(date.getMinutes());\n    const seconds = zeroPad(date.getSeconds());\n    return `${hours}:${minutes}:${seconds}`;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/datetime.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/datetime.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\n\n// Behaves like moment.js's fromNow\nexport const fromNow = (dateTime, now = undefined, options = { omitSuffix: false }) => {\n  // Check for null. If dateTime is null, it returns incorrect date and time of Wed Dec 31 1969 19:00:00 GMT-0500 (Eastern Standard Time)\n  if (!dateTime) {\n    return '-';\n  }\n  if (!now) {\n    now = new Date();\n  }\n  dateTime = new Date(dateTime);\n  const secondsAgo = (now.getTime() - dateTime.getTime()) / 1000;\n  const minutesAgo = secondsAgo / 60;\n  const hoursAgo = minutesAgo / 60;\n  const daysAgo = hoursAgo / 24;\n\n  if (daysAgo > 548) {\n    const count = Math.round(daysAgo / 365);\n    return options.omitSuffix ? `${count} years` : `${count} years ago`;\n  }\n  if (daysAgo > 320) {\n    return options.omitSuffix ? 'year' : 'a year ago';\n  }\n  if (daysAgo > 45) {\n    const count = Math.round(daysAgo / 30);\n    return options.omitSuffix ? `${count} months` : `${count} months ago`;\n  }\n  if (daysAgo > 26) {\n    return options.omitSuffix ? 'month' : 'a month ago';\n  }\n  if (hoursAgo > 36) {\n    const count = Math.round(daysAgo);\n    return options.omitSuffix ? `${count} days` : `${count} days ago`;\n  }\n  if (hoursAgo > 22) {\n    return options.omitSuffix ? 'day' : 'a day ago';\n  }\n  if (minutesAgo > 90) {\n    const count = Math.round(hoursAgo);\n    return options.omitSuffix ? `${count} hours` : `${count} hours ago`;\n  }\n  if (minutesAgo > 45) {\n    return options.omitSuffix ? 'hour' : 'an hour ago';\n  }\n  if (secondsAgo > 90) {\n    const count = Math.round(minutesAgo);\n    return options.omitSuffix ? `${count} minutes` : `${count} minutes ago`;\n  }\n  if (secondsAgo > 45) {\n    return options.omitSuffix ? 'minute' : 'a minute ago';\n  }\n  if (secondsAgo > 15) {\n    return options.omitSuffix ? 'few seconds' : 'less than a minute ago';\n  }\n\n  if (secondsAgo >= 0) {\n    return options.omitSuffix ? 'few seconds' : 'a few seconds ago';\n  }\n\n  if (secondsAgo > -45) {\n    return 'a few seconds from now';\n  }\n  if (secondsAgo > -90) {\n    return 'a minute from now';\n  }\n  if (minutesAgo > -45) {\n    return `${-Math.round(minutesAgo)} minutes from now`;\n  }\n  if (minutesAgo > -90) {\n    return 'an hour from now';\n  }\n  if (hoursAgo > -22) {\n    return `${-Math.round(hoursAgo)} hours from now`;\n  }\n  if (hoursAgo > -36) {\n    return 'a day from now';\n  }\n  if (daysAgo > -26) {\n    return `${-Math.round(daysAgo)} days from now`;\n  }\n  if (daysAgo > -45) {\n    return 'a month from now';\n  }\n  if (daysAgo > -320) {\n    return `${-Math.round(daysAgo / 30)} months from now`;\n  }\n  if (daysAgo > -580) {\n    return 'a year from now';\n  }\n  return `${-Math.round(daysAgo / 365)} years from now`;\n};\n\nexport const isValid = (dateTime: Date) => dateTime instanceof Date && !_.isNaN(dateTime.valueOf());\n\n// Formats a duration in milliseconds like '1h 10m 23s'.\nexport const formatDuration = (ms: number) => {\n  if (!_.isFinite(ms) || ms < 0) {\n    return '';\n  }\n\n  const totalSeconds = Math.round(ms / 1000);\n  const secondsInHour = 60 * 60;\n  const secondsInMinute = 60;\n\n  const hours = Math.floor(totalSeconds / secondsInHour);\n  const minutes = Math.floor((totalSeconds % secondsInHour) / secondsInMinute);\n  const seconds = totalSeconds % secondsInMinute;\n\n  let formatted = '';\n  if (hours) {\n    formatted += `${hours}h `;\n  }\n  if (hours || minutes) {\n    formatted += `${minutes}m `;\n  }\n  formatted += `${seconds}s`;\n\n  return formatted;\n};\n\n// Conversions between units and milliseconds\nconst s = 1000;\nconst m = s * 60;\nconst h = m * 60;\nconst d = h * 24;\nconst w = d * 7;\nconst units = { w, d, h, m, s };\n\n// Formats a duration in milliseconds like \"1h 10m\"\nexport const formatPrometheusDuration = (ms: number) => {\n  if (!_.isFinite(ms) || ms < 0) {\n    return '';\n  }\n  let remaining = ms;\n  let str = '';\n  _.each(units, (factor, unit) => {\n    const n = Math.floor(remaining / factor);\n    if (n > 0) {\n      str += `${n}${unit} `;\n      remaining -= n * factor;\n    }\n  });\n  return _.trim(str);\n};\n\n// Converts a duration like \"1h 10m 23s\" to milliseconds or returns 0 if the duration could not be parsed\nexport const parsePrometheusDuration = (duration: string): number => {\n  try {\n    const parts = duration\n      .trim()\n      .split(/\\s+/)\n      .map((p) => p.match(/^(\\d+)([wdhms])$/));\n    return _.sumBy(parts, (p) => parseInt(p[1], 10) * units[p[2]]);\n  } catch (ignored) {\n    // Invalid duration format\n    return 0;\n  }\n};\n\nconst zeroPad = (number: number) => (number < 10 ? `0${number}` : number);\n\nexport const twentyFourHourTime = (date: Date): string => {\n  const hours = zeroPad(date.getHours());\n  const minutes = zeroPad(date.getMinutes());\n  return `${hours}:${minutes}`;\n};\n\nexport const twentyFourHourTimeWithSeconds = (date: Date): string => {\n  const hours = zeroPad(date.getHours());\n  const minutes = zeroPad(date.getMinutes());\n  const seconds = zeroPad(date.getSeconds());\n  return `${hours}:${minutes}:${seconds}`;\n};\n"]}]}