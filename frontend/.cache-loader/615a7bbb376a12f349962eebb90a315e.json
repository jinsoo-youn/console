{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/behavior/dnd-types.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/behavior/dnd-types.ts","mtime":1615298458710},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/behavior/dnd-types.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/behavior/dnd-types.ts"],"names":[],"mappings":"","sourcesContent":["// TODO support Symbols\nexport type Identifier = string;\n\nexport type TargetType = Identifier | Identifier[];\n\nexport type SourceType = Identifier;\n\nexport interface DragObjectWithType {\n  type: SourceType;\n}\n\nexport type DragOperationType = Identifier;\n\nexport interface DragOperationWithType {\n  type: DragOperationType;\n}\n\nexport type DragEvent = {\n  // in subject coordinates\n  initialX: number;\n  initialY: number;\n  x: number;\n  y: number;\n  dx: number;\n  dy: number;\n  // in page coordinates\n  initialPageX: number;\n  initialPageY: number;\n  pageX: number;\n  pageY: number;\n};\n\nexport type DragSource = {\n  type: SourceType;\n  canDrag(dndManager: DndManager): boolean;\n  beginDrag(dndManager: DndManager): any;\n  drag(dndManager: DndManager): void;\n  endDrag(dndManager: DndManager): void | Promise<void>;\n  canCancel(dndManager: DndManager): boolean;\n};\n\nexport type DropTarget = {\n  type: TargetType;\n  dropHint(dndManager: DndManager): string | undefined;\n  drop(dndManager: DndManager): any;\n  hover(dndManager: DndManager): void;\n  canDrop(dndManager: DndManager): boolean;\n  hitTest(x: number, y: number): boolean;\n};\n\nexport interface DndState {\n  isDragging?: boolean;\n  sourceId?: string;\n  targetIds?: string[];\n  itemType?: string;\n  item?: any;\n  dropResult?: any;\n  didDrop?: boolean;\n  event?: DragEvent;\n  operation?: DragOperationWithType;\n  cancelled?: boolean;\n}\n\nexport type DndStateContainer = {\n  dragDrop: DndState;\n};\n\nexport type Unregister = () => void;\n\nexport interface DndManager {\n  registerSource(source: DragSource): [string, Unregister];\n  registerTarget(target: DropTarget): [string, Unregister];\n  getDropHints(): string[];\n  canDragSource(sourceId: string | undefined): boolean;\n  canDropOnTarget(targetId: string | undefined): boolean;\n  hasDropTarget(): boolean;\n  isDragging(): boolean;\n  isDraggingSource(sourceId: string | undefined): boolean;\n  isOverTarget(\n    targetId: string | undefined,\n    options?: {\n      shallow?: boolean;\n    },\n  ): boolean;\n  isCancelled(): boolean;\n  getItemType(): Identifier | undefined;\n  getItem(): any;\n  getSourceId(): string | undefined;\n  getTargetIds(): string[];\n  getDropResult(): any;\n  didDrop(): boolean;\n  getDragEvent(): DragEvent | undefined;\n  getOperation(): DragOperationWithType | undefined;\n  beginDrag(\n    sourceIds: string | string[],\n    operation: DragOperationWithType | undefined,\n    x: number,\n    y: number,\n    pageX: number,\n    pageY: number,\n  ): void;\n  hover(targetIds: string[]): void;\n  endDrag(): Promise<void>;\n  drag(x: number, y: number, pageX: number, pageY: number): void;\n  drop(): void;\n  cancel(): boolean;\n}\n\nexport type DndStore = {\n  dndManager: DndManager;\n};\n\n// TODO address type such that useRef work without cast to any\nexport type DragElementWrapper = (elementOrNode: Element | null) => void;\n// | React.RefObject<Element>;\n\nexport type ConnectDragSource = DragElementWrapper;\nexport type ConnectDropTarget = DragElementWrapper;\n\nexport type DragSpecOperationType<T extends DragOperationWithType> =\n  | T\n  | { [ModifierFlags: number]: T };\n\nexport interface DragSourceSpec<\n  DragObject extends DragObjectWithType = DragObjectWithType,\n  DragSpecOperation extends DragSpecOperationType<DragOperationWithType> = DragSpecOperationType<\n    DragOperationWithType\n  >,\n  DropResult = any,\n  CollectedProps extends {} = {},\n  Props extends {} = {}\n> {\n  item: DragObject;\n  operation?: ((monitor: DragSourceMonitor, props: Props) => DragSpecOperation) | DragSpecOperation;\n  begin?: (monitor: DragSourceMonitor, props: Props) => any;\n  drag?: (event: DragEvent, monitor: DragSourceMonitor, props: Props) => void;\n  end?: (\n    dropResult: DropResult | undefined,\n    monitor: DragSourceMonitor,\n    props: Props,\n  ) => void | Promise<void>;\n  canDrag?: boolean | ((monitor: DragSourceMonitor, props: Props) => boolean);\n  collect?: (monitor: DragSourceMonitor, props: Props) => CollectedProps;\n  canCancel?: boolean | ((monitor: DragSourceMonitor, props: Props) => boolean);\n}\n\nexport type DropTargetSpec<\n  DragObject,\n  DropResult,\n  CollectedProps extends {} = {},\n  Props extends {} = {}\n> = {\n  accept: TargetType;\n  dropHint?:\n    | string\n    | ((item: DragObject, monitor: DropTargetMonitor, props: Props) => string | undefined);\n  hitTest?: (x: number, y: number, props: Props) => boolean;\n  drop?: (item: DragObject, monitor: DropTargetMonitor, props: Props) => DropResult | undefined;\n  hover?: (item: DragObject, monitor: DropTargetMonitor, props: Props) => void;\n  canDrop?: boolean | ((item: DragObject, monitor: DropTargetMonitor, props: Props) => boolean);\n  collect?: (monitor: DropTargetMonitor, props: Props) => CollectedProps;\n};\n\nexport interface HandlerManager {\n  receiveHandlerId: (handlerId: string | undefined) => void;\n  getHandlerId: () => string | undefined;\n}\n\nexport interface DragSourceMonitor extends HandlerManager {\n  getDropHints(): string[];\n  canDrag(): boolean;\n  isCancelled(): boolean;\n  isDragging(): boolean;\n  getItemType(): Identifier | undefined;\n  getItem(): any;\n  getDropResult(): any;\n  didDrop(): boolean;\n  getDragEvent(): DragEvent | undefined;\n  getOperation(): DragOperationWithType | undefined;\n}\n\nexport interface DropTargetMonitor extends HandlerManager {\n  canDrop(): boolean;\n  isCancelled(): boolean;\n  isDragging(): boolean;\n  isOver(options?: { shallow?: boolean }): boolean;\n  hasDropTarget(): boolean;\n  getDropHints(): string[];\n  getItemType(): Identifier | undefined;\n  getItem(): any;\n  getDropResult(): any;\n  didDrop(): boolean;\n  getDragEvent(): DragEvent | undefined;\n  getOperation(): DragOperationWithType | undefined;\n}\n"]}]}