{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/utils/text-input.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/utils/text-input.tsx","mtime":1617848124060},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { useFormContext } from 'react-hook-form';\nexport const TextInput = ({ id, methods, inputClassName, defaultValue, placeholder }) => {\n    const { register } = methods ? methods : useFormContext();\n    return React.createElement(\"input\", { className: inputClassName, placeholder: placeholder, defaultValue: defaultValue, name: id, ref: register });\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/utils/text-input.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/utils/text-input.tsx"],"names":[],"mappings":"AACA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AAEjD,MAAM,CAAC,MAAM,SAAS,GAA6B,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,cAAc,EAAE,YAAY,EAAE,WAAW,EAAE,EAAE,EAAE;IAChH,MAAM,EAAE,QAAQ,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC;IAC1D,OAAO,+BAAO,SAAS,EAAE,cAAc,EAAE,WAAW,EAAE,WAAW,EAAE,YAAY,EAAE,YAAY,EAAE,IAAI,EAAE,EAAE,EAAE,GAAG,EAAE,QAAQ,GAAU,CAAC;AACnI,CAAC,CAAC","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nexport const TextInput: React.FC<TextInputProps> = ({ id, methods, inputClassName, defaultValue, placeholder }) => {\n  const { register } = methods ? methods : useFormContext();\n  return <input className={inputClassName} placeholder={placeholder} defaultValue={defaultValue} name={id} ref={register}></input>;\n};\n\ntype TextInputProps = {\n  id: string;\n  methods?: any;\n  inputClassName?: string;\n  defaultValue?: string;\n  placeholder?: string;\n} & React.HTMLProps<HTMLInputElement>;\n"]}]}