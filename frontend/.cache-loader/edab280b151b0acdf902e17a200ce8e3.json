{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/vms/menu-actions.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/vms/menu-actions.tsx","mtime":1615298458660},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport * as React from 'react';\nimport { asAccessReview, Kebab } from '@console/internal/components/utils';\nimport { getName, getNamespace } from '@console/shared';\nimport { confirmModal, deleteModal } from '@console/internal/components/modals';\nimport { isVMCreated, isVMExpectedRunning, isVMRunningOrExpectedRunning, } from '../../selectors/vm/selectors';\nimport { getMigrationVMIName } from '../../selectors/vmi-migration';\nimport { VirtualMachineInstanceMigrationModel } from '../../models';\nimport { restartVM, startVM, stopVM, VMActionType } from '../../k8s/requests/vm';\nimport { startVMIMigration } from '../../k8s/requests/vmi';\nimport { cancelMigration } from '../../k8s/requests/vmim';\nimport { cloneVMModal } from '../modals/clone-vm-modal';\nimport { VMCDRomModal } from '../modals/cdrom-vm-modal/vm-cdrom-modal';\nimport { getVMStatus } from '../../statuses/vm/vm-status';\nimport { isVMIPaused } from '../../selectors/vmi';\nimport { unpauseVMI, VMIActionType } from '../../k8s/requests/vmi/actions';\nimport { deleteVMLikeEntityModal } from '../modals/delete-vm-like-entity-modal/delete-vm-like-entity-modal';\nconst getActionMessage = (obj, action) => (React.createElement(React.Fragment, null,\n    \"Are you sure you want to \",\n    action,\n    \" \",\n    React.createElement(\"strong\", null, getName(obj)),\n    \" in namespace\",\n    ' ',\n    React.createElement(\"strong\", null, getNamespace(obj)),\n    \"?\"));\nexport const menuActionStart = (kindObj, vm, { vmStatusBundle }) => {\n    var _a, _b;\n    const title = 'Start Virtual Machine';\n    return {\n        hidden: ((_a = vmStatusBundle === null || vmStatusBundle === void 0 ? void 0 : vmStatusBundle.status) === null || _a === void 0 ? void 0 : _a.isImporting()) || ((_b = vmStatusBundle === null || vmStatusBundle === void 0 ? void 0 : vmStatusBundle.status) === null || _b === void 0 ? void 0 : _b.isMigrating()) ||\n            isVMRunningOrExpectedRunning(vm),\n        label: title,\n        callback: () => startVM(vm),\n        accessReview: asAccessReview(kindObj, vm, 'patch'),\n    };\n};\nconst menuActionStop = (kindObj, vm) => {\n    const title = 'Stop Virtual Machine';\n    return {\n        hidden: !isVMExpectedRunning(vm),\n        label: title,\n        callback: () => confirmModal({\n            title,\n            message: getActionMessage(vm, VMActionType.Stop),\n            btnText: _.capitalize(VMActionType.Stop),\n            executeFn: () => stopVM(vm),\n        }),\n        accessReview: asAccessReview(kindObj, vm, 'patch'),\n    };\n};\nconst menuActionRestart = (kindObj, vm, { vmStatusBundle }) => {\n    var _a, _b;\n    const title = 'Restart Virtual Machine';\n    return {\n        hidden: ((_a = vmStatusBundle === null || vmStatusBundle === void 0 ? void 0 : vmStatusBundle.status) === null || _a === void 0 ? void 0 : _a.isImporting()) || ((_b = vmStatusBundle === null || vmStatusBundle === void 0 ? void 0 : vmStatusBundle.status) === null || _b === void 0 ? void 0 : _b.isMigrating()) ||\n            !isVMExpectedRunning(vm) ||\n            !isVMCreated(vm),\n        label: title,\n        callback: () => confirmModal({\n            title,\n            message: getActionMessage(vm, VMActionType.Restart),\n            btnText: _.capitalize(VMActionType.Restart),\n            executeFn: () => restartVM(vm),\n        }),\n        accessReview: asAccessReview(kindObj, vm, 'patch'),\n    };\n};\nconst menuActionUnpause = (kindObj, vm, { vmi }) => {\n    const title = 'Unpause Virtual Machine';\n    return {\n        hidden: !isVMIPaused(vmi),\n        label: title,\n        callback: () => confirmModal({\n            title,\n            message: getActionMessage(vmi, VMIActionType.Unpause),\n            btnText: _.capitalize(VMIActionType.Unpause),\n            executeFn: () => unpauseVMI(vmi),\n        }),\n    };\n};\nconst menuActionMigrate = (kindObj, vm, { vmStatusBundle, vmi }) => {\n    var _a, _b;\n    const title = 'Migrate Virtual Machine';\n    return {\n        hidden: ((_a = vmStatusBundle === null || vmStatusBundle === void 0 ? void 0 : vmStatusBundle.status) === null || _a === void 0 ? void 0 : _a.isImporting()) || ((_b = vmStatusBundle === null || vmStatusBundle === void 0 ? void 0 : vmStatusBundle.status) === null || _b === void 0 ? void 0 : _b.isMigrating()) ||\n            !isVMExpectedRunning(vm) ||\n            !isVMCreated(vm),\n        label: title,\n        callback: () => confirmModal({\n            title,\n            message: (React.createElement(React.Fragment, null,\n                \"Do you wish to migrate \",\n                React.createElement(\"strong\", null, getName(vmi)),\n                \" vmi to another node?\")),\n            btnText: 'Migrate',\n            executeFn: () => startVMIMigration(vmi),\n        }),\n    };\n};\nconst menuActionCancelMigration = (kindObj, vm, { vmStatusBundle }) => {\n    var _a;\n    const title = 'Cancel Virtual Machine Migration';\n    const migration = vmStatusBundle === null || vmStatusBundle === void 0 ? void 0 : vmStatusBundle.migration;\n    return {\n        hidden: !((_a = vmStatusBundle === null || vmStatusBundle === void 0 ? void 0 : vmStatusBundle.status) === null || _a === void 0 ? void 0 : _a.isMigrating()),\n        label: title,\n        callback: () => confirmModal({\n            title,\n            message: (React.createElement(React.Fragment, null,\n                \"Are you sure you want to cancel \",\n                React.createElement(\"strong\", null, getMigrationVMIName(migration)),\n                ' ',\n                \"migration in \",\n                React.createElement(\"strong\", null, getNamespace(migration)),\n                \" namespace?\")),\n            btnText: 'Cancel Migration',\n            executeFn: () => cancelMigration(migration),\n        }),\n        accessReview: migration && asAccessReview(VirtualMachineInstanceMigrationModel, migration, 'delete'),\n    };\n};\nconst menuActionClone = (kindObj, vm, { vmStatusBundle }) => {\n    var _a;\n    return {\n        hidden: (_a = vmStatusBundle === null || vmStatusBundle === void 0 ? void 0 : vmStatusBundle.status) === null || _a === void 0 ? void 0 : _a.isImporting(),\n        label: 'Clone Virtual Machine',\n        callback: () => cloneVMModal({ vm }),\n        accessReview: asAccessReview(kindObj, vm, 'patch'),\n    };\n};\nconst menuActionCdEdit = (kindObj, vm, { vmStatusBundle }) => {\n    var _a, _b;\n    return {\n        hidden: ((_a = vmStatusBundle === null || vmStatusBundle === void 0 ? void 0 : vmStatusBundle.status) === null || _a === void 0 ? void 0 : _a.isImporting()) || ((_b = vmStatusBundle === null || vmStatusBundle === void 0 ? void 0 : vmStatusBundle.status) === null || _b === void 0 ? void 0 : _b.isMigrating()) ||\n            isVMRunningOrExpectedRunning(vm),\n        label: 'Edit CD-ROMs',\n        callback: () => VMCDRomModal({ vmLikeEntity: vm, modalClassName: 'modal-lg' }),\n        accessReview: asAccessReview(kindObj, vm, 'patch'),\n    };\n};\nexport const menuActionDeleteVM = (kindObj, vm) => ({\n    label: `Delete ${kindObj.label}`,\n    callback: () => deleteVMLikeEntityModal({\n        vmLikeEntity: vm,\n    }),\n    accessReview: asAccessReview(kindObj, vm, 'delete'),\n});\nexport const menuActionDeleteVMI = (kindObj, vmi) => ({\n    label: `Delete ${kindObj.label}`,\n    callback: () => deleteModal({\n        kind: kindObj,\n        resource: vmi,\n        redirectTo: `/k8s/ns/${getNamespace(vmi)}/virtualization`,\n    }),\n    accessReview: asAccessReview(kindObj, vmi, 'delete'),\n});\nexport const vmMenuActions = [\n    menuActionStart,\n    menuActionStop,\n    menuActionRestart,\n    menuActionUnpause,\n    menuActionMigrate,\n    menuActionCancelMigration,\n    menuActionClone,\n    menuActionCdEdit,\n    Kebab.factory.ModifyLabels,\n    Kebab.factory.ModifyAnnotations,\n    menuActionDeleteVM,\n];\nexport const vmiMenuActions = [\n    Kebab.factory.ModifyLabels,\n    Kebab.factory.ModifyAnnotations,\n    menuActionDeleteVMI,\n];\nexport const vmImportMenuActions = [\n    Kebab.factory.ModifyLabels,\n    Kebab.factory.ModifyAnnotations,\n    Kebab.factory.Delete,\n];\nexport const vmMenuActionsCreator = (kindObj, vm, { vmis, pods, migrations, vmImports, dataVolumes }) => {\n    const vmi = vmis && vmis[0];\n    const vmStatusBundle = getVMStatus({ vm, vmi, pods, migrations, dataVolumes, vmImports });\n    return vmMenuActions.map((action) => {\n        return action(kindObj, vm, { vmi, vmStatusBundle });\n    });\n};\nexport const vmiMenuActionsCreator = (kindObj, vmi) => {\n    return vmiMenuActions.map((action) => {\n        return action(kindObj, vmi);\n    });\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/vms/menu-actions.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/vms/menu-actions.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport * as React from 'react';\nimport { asAccessReview, Kebab, KebabOption } from '@console/internal/components/utils';\nimport { K8sKind, K8sResourceCommon, K8sResourceKind, PodKind } from '@console/internal/module/k8s';\nimport { getName, getNamespace } from '@console/shared';\nimport { confirmModal, deleteModal } from '@console/internal/components/modals';\nimport { VMIKind, VMKind } from '../../types/vm';\nimport {\n  isVMCreated,\n  isVMExpectedRunning,\n  isVMRunningOrExpectedRunning,\n} from '../../selectors/vm/selectors';\nimport { getMigrationVMIName } from '../../selectors/vmi-migration';\nimport { VirtualMachineInstanceMigrationModel } from '../../models';\nimport { restartVM, startVM, stopVM, VMActionType } from '../../k8s/requests/vm';\nimport { startVMIMigration } from '../../k8s/requests/vmi';\nimport { cancelMigration } from '../../k8s/requests/vmim';\nimport { cloneVMModal } from '../modals/clone-vm-modal';\nimport { VMCDRomModal } from '../modals/cdrom-vm-modal/vm-cdrom-modal';\nimport { getVMStatus } from '../../statuses/vm/vm-status';\nimport { isVMIPaused } from '../../selectors/vmi';\nimport { unpauseVMI, VMIActionType } from '../../k8s/requests/vmi/actions';\nimport { VMImportKind } from '../../types/vm-import/ovirt/vm-import';\nimport { V1alpha1DataVolume } from '../../types/vm/disk/V1alpha1DataVolume';\nimport { VMStatusBundle } from '../../statuses/vm/types';\nimport { deleteVMLikeEntityModal } from '../modals/delete-vm-like-entity-modal/delete-vm-like-entity-modal';\n\ntype ActionArgs = {\n  vmi?: VMIKind;\n  vmStatusBundle?: VMStatusBundle;\n};\n\nconst getActionMessage = (obj: K8sResourceCommon, action: VMActionType | VMIActionType) => (\n  <>\n    Are you sure you want to {action} <strong>{getName(obj)}</strong> in namespace{' '}\n    <strong>{getNamespace(obj)}</strong>?\n  </>\n);\n\nexport const menuActionStart = (\n  kindObj: K8sKind,\n  vm: VMKind,\n  { vmStatusBundle }: ActionArgs,\n): KebabOption => {\n  const title = 'Start Virtual Machine';\n  return {\n    hidden:\n      vmStatusBundle?.status?.isImporting() ||\n      vmStatusBundle?.status?.isMigrating() ||\n      isVMRunningOrExpectedRunning(vm),\n    label: title,\n    callback: () => startVM(vm),\n    accessReview: asAccessReview(kindObj, vm, 'patch'),\n  };\n};\n\nconst menuActionStop = (kindObj: K8sKind, vm: VMKind): KebabOption => {\n  const title = 'Stop Virtual Machine';\n  return {\n    hidden: !isVMExpectedRunning(vm),\n    label: title,\n    callback: () =>\n      confirmModal({\n        title,\n        message: getActionMessage(vm, VMActionType.Stop),\n        btnText: _.capitalize(VMActionType.Stop),\n        executeFn: () => stopVM(vm),\n      }),\n    accessReview: asAccessReview(kindObj, vm, 'patch'),\n  };\n};\n\nconst menuActionRestart = (\n  kindObj: K8sKind,\n  vm: VMKind,\n  { vmStatusBundle }: ActionArgs,\n): KebabOption => {\n  const title = 'Restart Virtual Machine';\n  return {\n    hidden:\n      vmStatusBundle?.status?.isImporting() ||\n      vmStatusBundle?.status?.isMigrating() ||\n      !isVMExpectedRunning(vm) ||\n      !isVMCreated(vm),\n    label: title,\n    callback: () =>\n      confirmModal({\n        title,\n        message: getActionMessage(vm, VMActionType.Restart),\n        btnText: _.capitalize(VMActionType.Restart),\n        executeFn: () => restartVM(vm),\n      }),\n    accessReview: asAccessReview(kindObj, vm, 'patch'),\n  };\n};\n\nconst menuActionUnpause = (kindObj: K8sKind, vm: VMKind, { vmi }: ActionArgs): KebabOption => {\n  const title = 'Unpause Virtual Machine';\n  return {\n    hidden: !isVMIPaused(vmi),\n    label: title,\n    callback: () =>\n      confirmModal({\n        title,\n        message: getActionMessage(vmi, VMIActionType.Unpause),\n        btnText: _.capitalize(VMIActionType.Unpause),\n        executeFn: () => unpauseVMI(vmi),\n      }),\n  };\n};\n\nconst menuActionMigrate = (\n  kindObj: K8sKind,\n  vm: VMKind,\n  { vmStatusBundle, vmi }: ActionArgs,\n): KebabOption => {\n  const title = 'Migrate Virtual Machine';\n  return {\n    hidden:\n      vmStatusBundle?.status?.isImporting() ||\n      vmStatusBundle?.status?.isMigrating() ||\n      !isVMExpectedRunning(vm) ||\n      !isVMCreated(vm),\n    label: title,\n    callback: () =>\n      confirmModal({\n        title,\n        message: (\n          <>\n            Do you wish to migrate <strong>{getName(vmi)}</strong> vmi to another node?\n          </>\n        ),\n        btnText: 'Migrate',\n        executeFn: () => startVMIMigration(vmi),\n      }),\n  };\n};\n\nconst menuActionCancelMigration = (\n  kindObj: K8sKind,\n  vm: VMKind,\n  { vmStatusBundle }: ActionArgs,\n): KebabOption => {\n  const title = 'Cancel Virtual Machine Migration';\n  const migration = vmStatusBundle?.migration;\n  return {\n    hidden: !vmStatusBundle?.status?.isMigrating(),\n    label: title,\n    callback: () =>\n      confirmModal({\n        title,\n        message: (\n          <>\n            Are you sure you want to cancel <strong>{getMigrationVMIName(migration)}</strong>{' '}\n            migration in <strong>{getNamespace(migration)}</strong> namespace?\n          </>\n        ),\n        btnText: 'Cancel Migration',\n        executeFn: () => cancelMigration(migration),\n      }),\n    accessReview:\n      migration && asAccessReview(VirtualMachineInstanceMigrationModel, migration, 'delete'),\n  };\n};\n\nconst menuActionClone = (\n  kindObj: K8sKind,\n  vm: VMKind,\n  { vmStatusBundle }: ActionArgs,\n): KebabOption => {\n  return {\n    hidden: vmStatusBundle?.status?.isImporting(),\n    label: 'Clone Virtual Machine',\n    callback: () => cloneVMModal({ vm }),\n    accessReview: asAccessReview(kindObj, vm, 'patch'),\n  };\n};\n\nconst menuActionCdEdit = (\n  kindObj: K8sKind,\n  vm: VMKind,\n  { vmStatusBundle }: ActionArgs,\n): KebabOption => {\n  return {\n    hidden:\n      vmStatusBundle?.status?.isImporting() ||\n      vmStatusBundle?.status?.isMigrating() ||\n      isVMRunningOrExpectedRunning(vm),\n    label: 'Edit CD-ROMs',\n    callback: () => VMCDRomModal({ vmLikeEntity: vm, modalClassName: 'modal-lg' }),\n    accessReview: asAccessReview(kindObj, vm, 'patch'),\n  };\n};\n\nexport const menuActionDeleteVM = (kindObj: K8sKind, vm: VMKind): KebabOption => ({\n  label: `Delete ${kindObj.label}`,\n  callback: () =>\n    deleteVMLikeEntityModal({\n      vmLikeEntity: vm,\n    }),\n  accessReview: asAccessReview(kindObj, vm, 'delete'),\n});\n\nexport const menuActionDeleteVMI = (kindObj: K8sKind, vmi: VMIKind): KebabOption => ({\n  label: `Delete ${kindObj.label}`,\n  callback: () =>\n    deleteModal({\n      kind: kindObj,\n      resource: vmi,\n      redirectTo: `/k8s/ns/${getNamespace(vmi)}/virtualization`,\n    }),\n  accessReview: asAccessReview(kindObj, vmi, 'delete'),\n});\n\nexport const vmMenuActions = [\n  menuActionStart,\n  menuActionStop,\n  menuActionRestart,\n  menuActionUnpause,\n  menuActionMigrate,\n  menuActionCancelMigration,\n  menuActionClone,\n  menuActionCdEdit,\n  Kebab.factory.ModifyLabels,\n  Kebab.factory.ModifyAnnotations,\n  menuActionDeleteVM,\n];\n\nexport const vmiMenuActions = [\n  Kebab.factory.ModifyLabels,\n  Kebab.factory.ModifyAnnotations,\n  menuActionDeleteVMI,\n];\n\nexport const vmImportMenuActions = [\n  Kebab.factory.ModifyLabels,\n  Kebab.factory.ModifyAnnotations,\n  Kebab.factory.Delete,\n];\n\nexport type ExtraResources = {\n  vmis: VMIKind[];\n  pods: PodKind[];\n  migrations: K8sResourceKind[];\n  dataVolumes: V1alpha1DataVolume[];\n  vmImports: VMImportKind[];\n};\n\nexport const vmMenuActionsCreator = (\n  kindObj: K8sKind,\n  vm: VMKind,\n  { vmis, pods, migrations, vmImports, dataVolumes }: ExtraResources,\n) => {\n  const vmi = vmis && vmis[0];\n  const vmStatusBundle = getVMStatus({ vm, vmi, pods, migrations, dataVolumes, vmImports });\n\n  return vmMenuActions.map((action) => {\n    return action(kindObj, vm, { vmi, vmStatusBundle });\n  });\n};\n\nexport const vmiMenuActionsCreator = (kindObj: K8sKind, vmi: VMIKind) => {\n  return vmiMenuActions.map((action) => {\n    return action(kindObj, vmi);\n  });\n};\n"]}]}