{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/dev-catalog.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/dev-catalog.ts","mtime":1616735742450},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { referenceForProvidedAPI, providedAPIsFor } from './components';\nimport * as operatorLogo from './operator.svg';\nconst isInternal = (crd) => {\n    const internalOpListString = _.get(crd, ['csv', 'metadata', 'annotations', 'operators.operatorframework.io/internal-objects'], '[]');\n    try {\n        const internalOpList = JSON.parse(internalOpListString); // JSON.parse fails if incorrect annotation structure\n        return internalOpList.some((op) => op === crd.name);\n    }\n    catch (_a) {\n        /* eslint-disable-next-line no-console */\n        console.error('Failed to parse CSV annotation: Invalid JSON structure');\n        return false;\n    }\n};\nexport const normalizeClusterServiceVersions = (clusterServiceVersions) => {\n    const imgFor = (desc) => _.get(desc.csv, 'spec.icon')\n        ? `data:${_.get(desc.csv, 'spec.icon', [])[0].mediatype};base64,${_.get(desc.csv, 'spec.icon', [])[0].base64data}`\n        : operatorLogo;\n    const formatTileDescription = (csvDescription) => `## Operator Description\\n${csvDescription}`;\n    const operatorProvidedAPIs = _.flatten(clusterServiceVersions.map((csv) => providedAPIsFor(csv).map((desc) => (Object.assign(Object.assign({}, desc), { csv })))))\n        .reduce((all, cur) => all.find((v) => referenceForProvidedAPI(v) === referenceForProvidedAPI(cur))\n        ? all\n        : all.concat([cur]), [])\n        // remove internal CRDs\n        .filter((crd) => !isInternal(crd))\n        .map((desc) => {\n        var _a;\n        return ({\n            // NOTE: Faking a real k8s object to avoid fetching all CRDs\n            obj: Object.assign({ metadata: {\n                    uid: `${desc.csv.metadata.uid}-${desc.displayName}`,\n                    creationTimestamp: desc.csv.metadata.creationTimestamp,\n                } }, desc),\n            kind: 'InstalledOperator',\n            tileName: desc.displayName || desc.kind,\n            tileIconClass: null,\n            capabilityLevel: _.get(desc, ['csv', 'metadata', 'annotations', 'capabilities'], '')\n                .toLowerCase()\n                .replace(/\\s/g, ''),\n            tileImgUrl: imgFor(desc),\n            tileDescription: desc.description,\n            markdownDescription: formatTileDescription(desc.csv.spec.description),\n            tileProvider: desc.csv.spec.provider.name,\n            tags: desc.csv.spec.keywords,\n            createLabel: 'Create',\n            href: `/ns/${desc.csv.metadata.namespace}/clusterserviceversions/${desc.csv.metadata.name}/${referenceForProvidedAPI(desc)}/~new`,\n            supportUrl: (_a = desc.csv.metadata.annotations) === null || _a === void 0 ? void 0 : _a['marketplace.openshift.io/support-workflow'],\n            longDescription: `This resource is provided by ${desc.csv.spec.displayName}, a Kubernetes Operator enabled by the Operator Lifecycle Manager.`,\n            documentationUrl: _.get((desc.csv.spec.links || []).find(({ name }) => name === 'Documentation'), 'url'),\n        });\n    });\n    return operatorProvidedAPIs;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/dev-catalog.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/dev-catalog.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { ClusterServiceVersionKind } from './types';\nimport { referenceForProvidedAPI, providedAPIsFor } from './components';\nimport * as operatorLogo from './operator.svg';\n\nconst isInternal = (crd: { name: string }): boolean => {\n  const internalOpListString = _.get(\n    crd,\n    ['csv', 'metadata', 'annotations', 'operators.operatorframework.io/internal-objects'],\n    '[]',\n  );\n  try {\n    const internalOpList = JSON.parse(internalOpListString); // JSON.parse fails if incorrect annotation structure\n    return internalOpList.some((op) => op === crd.name);\n  } catch {\n    /* eslint-disable-next-line no-console */\n    console.error('Failed to parse CSV annotation: Invalid JSON structure');\n    return false;\n  }\n};\nexport const normalizeClusterServiceVersions = (\n  clusterServiceVersions: ClusterServiceVersionKind[],\n): K8sResourceKind[] => {\n  const imgFor = (desc) =>\n    _.get(desc.csv, 'spec.icon')\n      ? `data:${_.get(desc.csv, 'spec.icon', [])[0].mediatype};base64,${\n          _.get(desc.csv, 'spec.icon', [])[0].base64data\n        }`\n      : operatorLogo;\n\n  const formatTileDescription = (csvDescription: string): string =>\n    `## Operator Description\\n${csvDescription}`;\n\n  const operatorProvidedAPIs: K8sResourceKind[] = _.flatten(\n    clusterServiceVersions.map((csv) => providedAPIsFor(csv).map((desc) => ({ ...desc, csv }))),\n  )\n    .reduce(\n      (all, cur) =>\n        all.find((v) => referenceForProvidedAPI(v) === referenceForProvidedAPI(cur))\n          ? all\n          : all.concat([cur]),\n      [],\n    )\n    // remove internal CRDs\n    .filter((crd) => !isInternal(crd))\n    .map((desc) => ({\n      // NOTE: Faking a real k8s object to avoid fetching all CRDs\n      obj: {\n        metadata: {\n          uid: `${desc.csv.metadata.uid}-${desc.displayName}`,\n          creationTimestamp: desc.csv.metadata.creationTimestamp,\n        },\n        ...desc,\n      },\n      kind: 'InstalledOperator',\n      tileName: desc.displayName || desc.kind,\n      tileIconClass: null,\n      capabilityLevel: _.get(desc, ['csv', 'metadata', 'annotations', 'capabilities'], '')\n        .toLowerCase()\n        .replace(/\\s/g, ''),\n      tileImgUrl: imgFor(desc),\n      tileDescription: desc.description,\n      markdownDescription: formatTileDescription(desc.csv.spec.description),\n      tileProvider: desc.csv.spec.provider.name,\n      tags: desc.csv.spec.keywords,\n      createLabel: 'Create',\n      href: `/ns/${desc.csv.metadata.namespace}/clusterserviceversions/${\n        desc.csv.metadata.name\n      }/${referenceForProvidedAPI(desc)}/~new`,\n      supportUrl: desc.csv.metadata.annotations?.['marketplace.openshift.io/support-workflow'],\n      longDescription: `This resource is provided by ${desc.csv.spec.displayName}, a Kubernetes Operator enabled by the Operator Lifecycle Manager.`,\n      documentationUrl: _.get(\n        (desc.csv.spec.links || []).find(({ name }) => name === 'Documentation'),\n        'url',\n      ),\n    }));\n\n  return operatorProvidedAPIs;\n};\n"]}]}