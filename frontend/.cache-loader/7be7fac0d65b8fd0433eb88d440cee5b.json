{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm/volume-wrapper.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm/volume-wrapper.ts","mtime":1616735742430},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { ConfigMapModel, PersistentVolumeClaimModel, SecretModel, ServiceAccountModel, } from '@console/internal/models';\nimport { ObjectWithTypePropertyWrapper } from '../common/object-with-type-property-wrapper';\nimport { VolumeType } from '../../../constants/vm/storage';\nimport { getVolumeContainerImage, getVolumeDataVolumeName, getVolumePersistentVolumeClaimName, } from '../../../selectors/vm/volume';\nimport { DataVolumeModel } from '../../../models';\nconst getVolumeReferencedObject = (volume) => {\n    var _a, _b, _c;\n    const typeData = volume.getTypeData();\n    let name;\n    switch (volume.getType()) {\n        case VolumeType.CLOUD_INIT_CONFIG_DRIVE:\n        case VolumeType.CLOUD_INIT_NO_CLOUD:\n            name = ((_a = typeData.networkDataSecretRef) === null || _a === void 0 ? void 0 : _a.name) || ((_b = typeData.secretRef) === null || _b === void 0 ? void 0 : _b.name);\n            return (name && {\n                name,\n                model: SecretModel,\n            });\n        case VolumeType.CONFIG_MAP:\n            return {\n                name: typeData.name,\n                model: ConfigMapModel,\n            };\n        case VolumeType.DATA_VOLUME:\n            return {\n                name: typeData.name,\n                model: DataVolumeModel,\n            };\n        case VolumeType.EPHEMERAL:\n            return {\n                name: (_c = typeData.persistentVolumeClaim) === null || _c === void 0 ? void 0 : _c.claimName,\n                model: PersistentVolumeClaimModel,\n            };\n        case VolumeType.PERSISTENT_VOLUME_CLAIM:\n            return {\n                name: typeData.claimName,\n                model: PersistentVolumeClaimModel,\n            };\n        case VolumeType.SECRET:\n            return {\n                name: typeData.secretName,\n                model: SecretModel,\n            };\n        case VolumeType.SERVICE_ACCOUNT:\n            return {\n                name: typeData.serviceAccountName,\n                model: ServiceAccountModel,\n            };\n        default:\n            return null;\n    }\n};\nexport class VolumeWrapper extends ObjectWithTypePropertyWrapper {\n    constructor(volume, copy = false) {\n        super(volume, copy, VolumeType);\n        this.getName = () => this.get('name');\n        this.getCloudInitNoCloud = () => this.get('cloudInitNoCloud');\n        this.getPersistentVolumeClaimName = () => getVolumePersistentVolumeClaimName(this.data);\n        this.getDataVolumeName = () => getVolumeDataVolumeName(this.data);\n        this.getContainerImage = () => getVolumeContainerImage(this.data);\n        this.getReferencedObject = () => getVolumeReferencedObject(this);\n    }\n    init({ name }) {\n        if (name !== undefined) {\n            this.data.name = name;\n        }\n        return this;\n    }\n    sanitize(type, { name, claimName, image, userData, userDataBase64 }) {\n        switch (type) {\n            case VolumeType.DATA_VOLUME:\n                return { name };\n            case VolumeType.PERSISTENT_VOLUME_CLAIM:\n                return { claimName };\n            case VolumeType.CONTAINER_DISK:\n                return { image };\n            case VolumeType.CLOUD_INIT_NO_CLOUD:\n                return userDataBase64 ? { userDataBase64 } : { userData };\n            default:\n                return null;\n        }\n    }\n}\n/**\n * @deprecated FIXME deprecate initializeFromSimpleData in favor of init\n */\nVolumeWrapper.initializeFromSimpleData = ({ name, type, typeData, }) => new VolumeWrapper({ name }).setType(type, typeData);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm/volume-wrapper.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm/volume-wrapper.ts"],"names":[],"mappings":"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","sourcesContent":["import { K8sKind } from '@console/internal/module/k8s';\nimport {\n  ConfigMapModel,\n  PersistentVolumeClaimModel,\n  SecretModel,\n  ServiceAccountModel,\n} from '@console/internal/models';\nimport { ObjectWithTypePropertyWrapper } from '../common/object-with-type-property-wrapper';\nimport { V1Volume } from '../../../types/vm/disk/V1Volume';\nimport { VolumeType } from '../../../constants/vm/storage';\nimport {\n  getVolumeContainerImage,\n  getVolumeDataVolumeName,\n  getVolumePersistentVolumeClaimName,\n} from '../../../selectors/vm/volume';\nimport { DataVolumeModel } from '../../../models';\nimport { V1LocalObjectReference } from '../../../types/vm/disk/V1LocalObjectReference';\n\nexport type VolumeReferencedObject = {\n  name: string;\n  model: K8sKind;\n};\n\nconst getVolumeReferencedObject = (volume: VolumeWrapper): VolumeReferencedObject => {\n  const typeData = volume.getTypeData();\n  let name;\n  switch (volume.getType()) {\n    case VolumeType.CLOUD_INIT_CONFIG_DRIVE:\n    case VolumeType.CLOUD_INIT_NO_CLOUD:\n      name = typeData.networkDataSecretRef?.name || typeData.secretRef?.name;\n      return (\n        name && {\n          name,\n          model: SecretModel,\n        }\n      );\n    case VolumeType.CONFIG_MAP:\n      return {\n        name: typeData.name,\n        model: ConfigMapModel,\n      };\n    case VolumeType.DATA_VOLUME:\n      return {\n        name: typeData.name,\n        model: DataVolumeModel,\n      };\n    case VolumeType.EPHEMERAL:\n      return {\n        name: typeData.persistentVolumeClaim?.claimName,\n        model: PersistentVolumeClaimModel,\n      };\n    case VolumeType.PERSISTENT_VOLUME_CLAIM:\n      return {\n        name: typeData.claimName,\n        model: PersistentVolumeClaimModel,\n      };\n    case VolumeType.SECRET:\n      return {\n        name: typeData.secretName,\n        model: SecretModel,\n      };\n    case VolumeType.SERVICE_ACCOUNT:\n      return {\n        name: typeData.serviceAccountName,\n        model: ServiceAccountModel,\n      };\n    default:\n      return null;\n  }\n};\n\ntype CombinedTypeData = {\n  name?: string;\n  claimName?: string;\n  image?: string;\n  userData?: string;\n  userDataBase64?: string;\n  persistentVolumeClaim?: {\n    claimName: string;\n  };\n  secretName?: string;\n  serviceAccountName?: string;\n  networkDataSecretRef?: V1LocalObjectReference;\n  secretRef?: V1LocalObjectReference;\n};\n\nexport class VolumeWrapper extends ObjectWithTypePropertyWrapper<\n  V1Volume,\n  VolumeType,\n  CombinedTypeData,\n  VolumeWrapper\n> {\n  /**\n   * @deprecated FIXME deprecate initializeFromSimpleData in favor of init\n   */\n  static initializeFromSimpleData = ({\n    name,\n    type,\n    typeData,\n  }: {\n    name?: string;\n    type?: VolumeType;\n    typeData?: CombinedTypeData;\n  }) => new VolumeWrapper({ name }).setType(type, typeData);\n\n  constructor(volume?: V1Volume | VolumeWrapper, copy = false) {\n    super(volume, copy, VolumeType);\n  }\n\n  init({ name }: { name?: string }) {\n    if (name !== undefined) {\n      this.data.name = name;\n    }\n    return this;\n  }\n\n  getName = () => this.get('name');\n\n  getCloudInitNoCloud = () => this.get('cloudInitNoCloud');\n\n  getPersistentVolumeClaimName = () => getVolumePersistentVolumeClaimName(this.data);\n\n  getDataVolumeName = () => getVolumeDataVolumeName(this.data);\n\n  getContainerImage = () => getVolumeContainerImage(this.data);\n\n  getReferencedObject = () => getVolumeReferencedObject(this);\n\n  protected sanitize(\n    type: VolumeType,\n    { name, claimName, image, userData, userDataBase64 }: CombinedTypeData,\n  ): CombinedTypeData {\n    switch (type) {\n      case VolumeType.DATA_VOLUME:\n        return { name };\n      case VolumeType.PERSISTENT_VOLUME_CLAIM:\n        return { claimName };\n      case VolumeType.CONTAINER_DISK:\n        return { image };\n      case VolumeType.CLOUD_INIT_NO_CLOUD:\n        return userDataBase64 ? { userDataBase64 } : { userData };\n      default:\n        return null;\n    }\n  }\n}\n"]}]}