{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/noobaa-storage-plugin/src/components/data-consumption-card/data-consumption-card-dropdown.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/noobaa-storage-plugin/src/components/data-consumption-card/data-consumption-card-dropdown.tsx","mtime":1616735742440},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { Dropdown, DropdownToggle, DropdownItem, DropdownPosition } from '@patternfly/react-core';\nimport { ACCOUNTS, PROVIDERS, BY_IOPS, BY_LOGICAL_USAGE, BY_PHYSICAL_VS_LOGICAL_USAGE, BY_EGRESS, } from '../../constants';\nexport const DataConsumptionDropdown = ({ type, kpi, setType, setKpi, }) => {\n    const [isOpenTypeDropdown, setIsOpenTypeDropdown] = React.useState(false);\n    const [isOpenKpiDropdown, setIsOpenKpiDropdown] = React.useState(false);\n    const typesDropdown = {\n        providers: PROVIDERS,\n        accounts: ACCOUNTS,\n    };\n    const kpiDropdown = {\n        iops: BY_IOPS,\n        usage: type === typesDropdown.accounts ? BY_LOGICAL_USAGE : BY_PHYSICAL_VS_LOGICAL_USAGE,\n        egress: BY_EGRESS,\n    };\n    const typeDropdownItems = [\n        React.createElement(DropdownItem, { id: \"providers\", key: \"Providers\", component: \"button\" }, \"Providers\"),\n        React.createElement(DropdownItem, { id: \"accounts\", key: \"Accounts\", component: \"button\" }, \"Accounts\"),\n    ];\n    const providersKpiDropdownItems = [\n        React.createElement(DropdownItem, { id: \"iops\", key: \"iops\", component: \"button\" }, \"I/O Operations\"),\n        React.createElement(DropdownItem, { id: \"usage\", key: \"phyVslog\", component: \"button\" }, \"Physical vs. Logical Usage\"),\n        React.createElement(DropdownItem, { id: \"egress\", key: \"egress\", component: \"button\" }, \"Egress\"),\n    ];\n    const accountKpiDropdownItems = [\n        React.createElement(DropdownItem, { id: \"iops\", key: \"iops\", component: \"button\" }, \"I/O Operations\"),\n        React.createElement(DropdownItem, { id: \"usage\", key: \"phyVslog\", component: \"button\" }, \"Logical Used Capacity\"),\n    ];\n    const onToggleTypeDropdown = React.useCallback((props) => {\n        setIsOpenTypeDropdown(props);\n    }, []);\n    const onSelectTypeDropdown = React.useCallback((e) => {\n        setIsOpenTypeDropdown(!isOpenTypeDropdown);\n        setType(typesDropdown[e.currentTarget.id]);\n        if (kpi === BY_LOGICAL_USAGE || kpi === BY_PHYSICAL_VS_LOGICAL_USAGE) {\n            const val = e.currentTarget.id === 'accounts' ? BY_LOGICAL_USAGE : BY_PHYSICAL_VS_LOGICAL_USAGE;\n            setKpi(val);\n        }\n        if (kpi === 'Egress' && e.currentTarget.id === 'accounts') {\n            setKpi(kpiDropdown.iops);\n        }\n    }, [isOpenTypeDropdown, typesDropdown, kpiDropdown, kpi, setKpi, setType]);\n    const onToggleKpiDropdown = React.useCallback((props) => {\n        setIsOpenKpiDropdown(props);\n    }, []);\n    const onSelectKpiDropdown = React.useCallback((e) => {\n        setIsOpenKpiDropdown(!isOpenKpiDropdown);\n        setKpi(kpiDropdown[e.currentTarget.id]);\n    }, [isOpenKpiDropdown, kpiDropdown, setKpi]);\n    return (React.createElement(\"div\", { className: \"nb-data-consumption-card__dropdown\" },\n        React.createElement(Dropdown, { className: \"nb-data-consumption-card__dropdown-item\", autoFocus: false, onSelect: onSelectTypeDropdown, toggle: React.createElement(DropdownToggle, { onToggle: onToggleTypeDropdown }, type), position: DropdownPosition.right, isOpen: isOpenTypeDropdown, dropdownItems: typeDropdownItems }),\n        React.createElement(Dropdown, { className: \"nb-data-consumption-card__dropdown-item\", autoFocus: false, onSelect: onSelectKpiDropdown, toggle: React.createElement(DropdownToggle, { onToggle: onToggleKpiDropdown }, kpi), position: DropdownPosition.right, isOpen: isOpenKpiDropdown, dropdownItems: type === typesDropdown.accounts ? accountKpiDropdownItems : providersKpiDropdownItems })));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/noobaa-storage-plugin/src/components/data-consumption-card/data-consumption-card-dropdown.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/noobaa-storage-plugin/src/components/data-consumption-card/data-consumption-card-dropdown.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Dropdown, DropdownToggle, DropdownItem, DropdownPosition } from '@patternfly/react-core';\nimport {\n  ACCOUNTS,\n  PROVIDERS,\n  BY_IOPS,\n  BY_LOGICAL_USAGE,\n  BY_PHYSICAL_VS_LOGICAL_USAGE,\n  BY_EGRESS,\n} from '../../constants';\n\nexport const DataConsumptionDropdown: React.FC<DataConsumptionDropdownProps> = ({\n  type,\n  kpi,\n  setType,\n  setKpi,\n}) => {\n  const [isOpenTypeDropdown, setIsOpenTypeDropdown] = React.useState(false);\n  const [isOpenKpiDropdown, setIsOpenKpiDropdown] = React.useState(false);\n  const typesDropdown = {\n    providers: PROVIDERS,\n    accounts: ACCOUNTS,\n  };\n\n  const kpiDropdown = {\n    iops: BY_IOPS,\n    usage: type === typesDropdown.accounts ? BY_LOGICAL_USAGE : BY_PHYSICAL_VS_LOGICAL_USAGE,\n    egress: BY_EGRESS,\n  };\n\n  const typeDropdownItems = [\n    <DropdownItem id=\"providers\" key=\"Providers\" component=\"button\">\n      Providers\n    </DropdownItem>,\n    <DropdownItem id=\"accounts\" key=\"Accounts\" component=\"button\">\n      Accounts\n    </DropdownItem>,\n  ];\n\n  const providersKpiDropdownItems = [\n    <DropdownItem id=\"iops\" key=\"iops\" component=\"button\">\n      I/O Operations\n    </DropdownItem>,\n    <DropdownItem id=\"usage\" key=\"phyVslog\" component=\"button\">\n      Physical vs. Logical Usage\n    </DropdownItem>,\n    <DropdownItem id=\"egress\" key=\"egress\" component=\"button\">\n      Egress\n    </DropdownItem>,\n  ];\n\n  const accountKpiDropdownItems = [\n    <DropdownItem id=\"iops\" key=\"iops\" component=\"button\">\n      I/O Operations\n    </DropdownItem>,\n    <DropdownItem id=\"usage\" key=\"phyVslog\" component=\"button\">\n      Logical Used Capacity\n    </DropdownItem>,\n  ];\n\n  const onToggleTypeDropdown = React.useCallback((props) => {\n    setIsOpenTypeDropdown(props);\n  }, []);\n\n  const onSelectTypeDropdown = React.useCallback(\n    (e) => {\n      setIsOpenTypeDropdown(!isOpenTypeDropdown);\n      setType(typesDropdown[e.currentTarget.id]);\n      if (kpi === BY_LOGICAL_USAGE || kpi === BY_PHYSICAL_VS_LOGICAL_USAGE) {\n        const val =\n          e.currentTarget.id === 'accounts' ? BY_LOGICAL_USAGE : BY_PHYSICAL_VS_LOGICAL_USAGE;\n        setKpi(val);\n      }\n      if (kpi === 'Egress' && e.currentTarget.id === 'accounts') {\n        setKpi(kpiDropdown.iops);\n      }\n    },\n    [isOpenTypeDropdown, typesDropdown, kpiDropdown, kpi, setKpi, setType],\n  );\n\n  const onToggleKpiDropdown = React.useCallback((props) => {\n    setIsOpenKpiDropdown(props);\n  }, []);\n\n  const onSelectKpiDropdown = React.useCallback(\n    (e) => {\n      setIsOpenKpiDropdown(!isOpenKpiDropdown);\n      setKpi(kpiDropdown[e.currentTarget.id]);\n    },\n    [isOpenKpiDropdown, kpiDropdown, setKpi],\n  );\n\n  return (\n    <div className=\"nb-data-consumption-card__dropdown\">\n      <Dropdown\n        className=\"nb-data-consumption-card__dropdown-item\"\n        autoFocus={false}\n        onSelect={onSelectTypeDropdown}\n        toggle={<DropdownToggle onToggle={onToggleTypeDropdown}>{type}</DropdownToggle>}\n        position={DropdownPosition.right}\n        isOpen={isOpenTypeDropdown}\n        dropdownItems={typeDropdownItems}\n      />\n      <Dropdown\n        className=\"nb-data-consumption-card__dropdown-item\"\n        autoFocus={false}\n        onSelect={onSelectKpiDropdown}\n        toggle={<DropdownToggle onToggle={onToggleKpiDropdown}>{kpi}</DropdownToggle>}\n        position={DropdownPosition.right}\n        isOpen={isOpenKpiDropdown}\n        dropdownItems={\n          type === typesDropdown.accounts ? accountKpiDropdownItems : providersKpiDropdownItems\n        }\n      />\n    </div>\n  );\n};\n\ntype DataConsumptionDropdownProps = {\n  type: string;\n  kpi: string;\n  setKpi: (value: string | ((prevVar: string) => string)) => void;\n  setType: (value: string | ((prevVar: string) => string)) => void;\n};\n"]}]}