{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/git-service/src/services/gitlab-service.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/git-service/src/services/gitlab-service.ts","mtime":1616735742400},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { Gitlab } from 'gitlab';\nimport * as GitUrlParse from 'git-url-parse';\nimport { SecretType, } from '../types';\nimport { BaseService } from './base-service';\nexport class GitlabService extends BaseService {\n    constructor(gitsource) {\n        super(gitsource);\n        this.getRepo = () => __awaiter(this, void 0, void 0, function* () {\n            if (this.repo) {\n                return Promise.resolve(this.repo);\n            }\n            const repo = yield this.client.Projects.show(this.metadata.fullName);\n            if (!repo || repo.path_with_namespace !== this.metadata.fullName) {\n                throw new Error('Unable to find repo');\n            }\n            this.repo = repo;\n            return Promise.resolve(this.repo);\n        });\n        this.getAuthProvider = () => {\n            switch (this.gitsource.secretType) {\n                case SecretType.PERSONAL_ACCESS_TOKEN || SecretType.OAUTH:\n                    return this.gitsource.secretContent;\n                default:\n                    return null;\n            }\n        };\n        this.getProjectId = () => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const repo = yield this.getRepo();\n                return repo.id;\n            }\n            catch (e) {\n                throw e;\n            }\n        });\n        this.isRepoReachable = () => __awaiter(this, void 0, void 0, function* () {\n            try {\n                yield this.getRepo();\n                return true;\n            }\n            catch (e) {\n                return false;\n            }\n        });\n        this.getRepoBranchList = () => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const projectID = yield this.getProjectId();\n                const resp = yield this.client.Branches.all(projectID);\n                const list = resp.map((b) => b.name);\n                return { branches: list };\n            }\n            catch (e) {\n                return { branches: [] };\n            }\n        });\n        this.getRepoFileList = () => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const projectID = yield this.getProjectId();\n                const resp = yield this.client.Repositories.tree(projectID);\n                const files = resp.reduce((acc, file) => {\n                    if (file.type === 'blob')\n                        acc.push(file.path);\n                    return acc;\n                }, []);\n                return { files };\n            }\n            catch (e) {\n                return { files: [] };\n            }\n        });\n        this.getRepoLanguageList = () => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const projectID = yield this.getProjectId();\n                const resp = yield this.client.Projects.languages(projectID);\n                return { languages: Object.keys(resp) };\n            }\n            catch (e) {\n                return { languages: [] };\n            }\n        });\n        this.isDockerfilePresent = () => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const projectID = yield this.getProjectId();\n                yield this.client.RepositoryFiles.showRaw(projectID, 'Dockerfile', this.metadata.defaultBranch);\n                return true;\n            }\n            catch (e) {\n                return false;\n            }\n        });\n        this.getDockerfileContent = () => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const projectID = yield this.getProjectId();\n                return yield this.client.RepositoryFiles.showRaw(projectID, 'Dockerfile', this.metadata.defaultBranch);\n            }\n            catch (e) {\n                return null;\n            }\n        });\n        this.getPackageJsonContent = () => __awaiter(this, void 0, void 0, function* () {\n            try {\n                const projectID = yield this.getProjectId();\n                return yield this.client.RepositoryFiles.showRaw(projectID, 'package.json', this.metadata.defaultBranch);\n            }\n            catch (e) {\n                return null;\n            }\n        });\n        this.metadata = this.getRepoMetadata();\n        const token = this.getAuthProvider();\n        this.client = new Gitlab({\n            host: this.metadata.host,\n            token,\n        });\n        this.repo = null;\n    }\n    getRepoMetadata() {\n        const { name, owner, protocol, source, full_name: fullName } = GitUrlParse(this.gitsource.url);\n        const host = `${protocol}://${source}`;\n        return {\n            repoName: name,\n            owner,\n            host,\n            defaultBranch: this.gitsource.ref || 'master',\n            fullName,\n        };\n    }\n}\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/git-service/src/services/gitlab-service.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/git-service/src/services/gitlab-service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Gitlab } from 'gitlab';\nimport * as GitUrlParse from 'git-url-parse';\nimport {\n  GitSource,\n  SecretType,\n  RepoMetadata,\n  BranchList,\n  RepoLanguageList,\n  RepoFileList,\n} from '../types';\nimport { BaseService } from './base-service';\n\ntype GitlabRepo = {\n  id: number;\n  path_with_namespace: string;\n};\n\nexport class GitlabService extends BaseService {\n  private readonly client: any;\n\n  private readonly metadata: RepoMetadata;\n\n  private repo: GitlabRepo;\n\n  constructor(gitsource: GitSource) {\n    super(gitsource);\n    this.metadata = this.getRepoMetadata();\n    const token = this.getAuthProvider();\n    this.client = new Gitlab({\n      host: this.metadata.host,\n      token,\n    });\n    this.repo = null;\n  }\n\n  private getRepo = async (): Promise<GitlabRepo> => {\n    if (this.repo) {\n      return Promise.resolve(this.repo);\n    }\n    const repo: GitlabRepo = await this.client.Projects.show(this.metadata.fullName);\n    if (!repo || repo.path_with_namespace !== this.metadata.fullName) {\n      throw new Error('Unable to find repo');\n    }\n\n    this.repo = repo;\n    return Promise.resolve(this.repo);\n  };\n\n  getRepoMetadata(): RepoMetadata {\n    const { name, owner, protocol, source, full_name: fullName } = GitUrlParse(this.gitsource.url);\n    const host = `${protocol}://${source}`;\n    return {\n      repoName: name,\n      owner,\n      host,\n      defaultBranch: this.gitsource.ref || 'master',\n      fullName,\n    };\n  }\n\n  getAuthProvider = (): any => {\n    switch (this.gitsource.secretType) {\n      case SecretType.PERSONAL_ACCESS_TOKEN || SecretType.OAUTH:\n        return this.gitsource.secretContent;\n      default:\n        return null;\n    }\n  };\n\n  getProjectId = async (): Promise<any> => {\n    try {\n      const repo = await this.getRepo();\n      return repo.id;\n    } catch (e) {\n      throw e;\n    }\n  };\n\n  isRepoReachable = async (): Promise<boolean> => {\n    try {\n      await this.getRepo();\n      return true;\n    } catch (e) {\n      return false;\n    }\n  };\n\n  getRepoBranchList = async (): Promise<BranchList> => {\n    try {\n      const projectID = await this.getProjectId();\n      const resp = await this.client.Branches.all(projectID);\n      const list = resp.map((b) => b.name);\n      return { branches: list };\n    } catch (e) {\n      return { branches: [] };\n    }\n  };\n\n  getRepoFileList = async (): Promise<RepoFileList> => {\n    try {\n      const projectID = await this.getProjectId();\n      const resp = await this.client.Repositories.tree(projectID);\n      const files = resp.reduce((acc, file) => {\n        if (file.type === 'blob') acc.push(file.path);\n        return acc;\n      }, []);\n      return { files };\n    } catch (e) {\n      return { files: [] };\n    }\n  };\n\n  getRepoLanguageList = async (): Promise<RepoLanguageList> => {\n    try {\n      const projectID = await this.getProjectId();\n      const resp = await this.client.Projects.languages(projectID);\n      return { languages: Object.keys(resp) };\n    } catch (e) {\n      return { languages: [] };\n    }\n  };\n\n  isDockerfilePresent = async (): Promise<boolean> => {\n    try {\n      const projectID = await this.getProjectId();\n      await this.client.RepositoryFiles.showRaw(\n        projectID,\n        'Dockerfile',\n        this.metadata.defaultBranch,\n      );\n      return true;\n    } catch (e) {\n      return false;\n    }\n  };\n\n  getDockerfileContent = async (): Promise<string | null> => {\n    try {\n      const projectID = await this.getProjectId();\n      return await this.client.RepositoryFiles.showRaw(\n        projectID,\n        'Dockerfile',\n        this.metadata.defaultBranch,\n      );\n    } catch (e) {\n      return null;\n    }\n  };\n\n  getPackageJsonContent = async (): Promise<string | null> => {\n    try {\n      const projectID = await this.getProjectId();\n      return await this.client.RepositoryFiles.showRaw(\n        projectID,\n        'package.json',\n        this.metadata.defaultBranch,\n      );\n    } catch (e) {\n      return null;\n    }\n  };\n}\n"]}]}