{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/dashboard/project-dashboard/queries.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/dashboard/project-dashboard/queries.ts","mtime":1615298458730},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nexport var ProjectQueries;\n(function (ProjectQueries) {\n    ProjectQueries[\"CPU_USAGE\"] = \"CPU_USAGE\";\n    ProjectQueries[\"MEMORY_USAGE\"] = \"MEMORY_USAGE\";\n    ProjectQueries[\"POD_COUNT\"] = \"POD_COUNT\";\n    ProjectQueries[\"PODS_BY_CPU\"] = \"PODS_BY_CPU\";\n    ProjectQueries[\"PODS_BY_MEMORY\"] = \"PODS_BY_MEMORY\";\n    ProjectQueries[\"PODS_BY_FILESYSTEM\"] = \"PODS_BY_FILESYSTEM\";\n    ProjectQueries[\"PODS_BY_NETWORK_IN\"] = \"PODS_BY_NETWORK_IN\";\n    ProjectQueries[\"PODS_BY_NETWORK_OUT\"] = \"PODS_BY_NETWORK_OUT\";\n    ProjectQueries[\"FILESYSTEM_USAGE\"] = \"FILESYSTEM_USAGE\";\n    ProjectQueries[\"NETWORK_IN_UTILIZATION\"] = \"NETWORK_IN_UTILIZATION\";\n    ProjectQueries[\"NETWORK_OUT_UTILIZATION\"] = \"NETWORK_OUT_UTILIZATION\";\n    ProjectQueries[\"NETWORK_UTILIZATION\"] = \"NETWORK_UTILIZATION\";\n})(ProjectQueries || (ProjectQueries = {}));\nconst queries = {\n    [ProjectQueries.CPU_USAGE]: _.template(`namespace:container_cpu_usage:sum{namespace='<%= project %>'}`),\n    [ProjectQueries.MEMORY_USAGE]: _.template(`sum(container_memory_working_set_bytes{namespace='<%= project %>',container=\"\",pod!=\"\"}) BY (namespace)`),\n    [ProjectQueries.POD_COUNT]: _.template(`count(kube_pod_info{namespace='<%= project %>'}) BY (namespace)`),\n    [ProjectQueries.FILESYSTEM_USAGE]: _.template(`sum(pod:container_fs_usage_bytes:sum{container=\"\",pod!=\"\",namespace='<%= project %>'}) BY (namespace)`),\n    [ProjectQueries.NETWORK_IN_UTILIZATION]: _.template(`sum(rate(container_network_receive_bytes_total{container=\"POD\",pod!=\"\",namespace='<%= project %>'}[5m])) BY (namespace)`),\n    [ProjectQueries.NETWORK_OUT_UTILIZATION]: _.template(`sum(rate(container_network_transmit_bytes_total{container=\"POD\",pod!=\"\",namespace='<%= project %>'}[5m])) BY (namespace)`),\n};\nconst top25Queries = {\n    [ProjectQueries.PODS_BY_CPU]: _.template(`topk(25, sort_desc(sum(avg_over_time(pod:container_cpu_usage:sum{container=\"\",pod!=\"\",namespace='<%= project %>'}[5m])) BY (pod, namespace)))`),\n    [ProjectQueries.PODS_BY_MEMORY]: _.template(`topk(25, sort_desc(sum(avg_over_time(container_memory_working_set_bytes{container=\"\",pod!=\"\",namespace='<%= project %>'}[5m])) BY (pod, namespace)))`),\n    [ProjectQueries.PODS_BY_FILESYSTEM]: _.template(`topk(25, sort_desc(sum(pod:container_fs_usage_bytes:sum{container=\"\",pod!=\"\",namespace='<%= project %>'}) BY (pod, namespace)))`),\n    [ProjectQueries.PODS_BY_NETWORK_IN]: _.template(`topk(25, sort_desc(sum(rate(container_network_receive_bytes_total{ container=\"POD\", pod!= \"\", namespace = '<%= project %>'}[5m])) BY (namespace, pod)))`),\n    [ProjectQueries.PODS_BY_NETWORK_OUT]: _.template(`topk(25, sort_desc(sum(rate(container_network_transmit_bytes_total{ container=\"POD\", pod!= \"\", namespace = '<%= project %>'}[5m])) BY (namespace, pod)))`),\n};\nexport const getMultilineQueries = (project) => ({\n    [ProjectQueries.NETWORK_UTILIZATION]: [\n        {\n            query: queries[ProjectQueries.NETWORK_IN_UTILIZATION]({ project }),\n            desc: 'In',\n        },\n        {\n            query: queries[ProjectQueries.NETWORK_OUT_UTILIZATION]({ project }),\n            desc: 'Out',\n        },\n    ],\n});\nexport const getUtilizationQueries = (project) => ({\n    [ProjectQueries.CPU_USAGE]: queries[ProjectQueries.CPU_USAGE]({ project }),\n    [ProjectQueries.MEMORY_USAGE]: queries[ProjectQueries.MEMORY_USAGE]({ project }),\n    [ProjectQueries.POD_COUNT]: queries[ProjectQueries.POD_COUNT]({ project }),\n    [ProjectQueries.FILESYSTEM_USAGE]: queries[ProjectQueries.FILESYSTEM_USAGE]({\n        project,\n    }),\n});\nexport const getTopConsumerQueries = (project) => ({\n    [ProjectQueries.PODS_BY_CPU]: top25Queries[ProjectQueries.PODS_BY_CPU]({ project }),\n    [ProjectQueries.PODS_BY_MEMORY]: top25Queries[ProjectQueries.PODS_BY_MEMORY]({ project }),\n    [ProjectQueries.PODS_BY_FILESYSTEM]: top25Queries[ProjectQueries.PODS_BY_FILESYSTEM]({ project }),\n    [ProjectQueries.PODS_BY_NETWORK_IN]: top25Queries[ProjectQueries.PODS_BY_NETWORK_IN]({ project }),\n    [ProjectQueries.PODS_BY_NETWORK_OUT]: top25Queries[ProjectQueries.PODS_BY_NETWORK_OUT]({\n        project,\n    }),\n});\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/dashboard/project-dashboard/queries.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/dashboard/project-dashboard/queries.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\nimport { QueryWithDescription } from '@console/shared/src/components/dashboard/utilization-card/UtilizationItem';\n\nexport enum ProjectQueries {\n  CPU_USAGE = 'CPU_USAGE',\n  MEMORY_USAGE = 'MEMORY_USAGE',\n  POD_COUNT = 'POD_COUNT',\n  PODS_BY_CPU = 'PODS_BY_CPU',\n  PODS_BY_MEMORY = 'PODS_BY_MEMORY',\n  PODS_BY_FILESYSTEM = 'PODS_BY_FILESYSTEM',\n  PODS_BY_NETWORK_IN = 'PODS_BY_NETWORK_IN',\n  PODS_BY_NETWORK_OUT = 'PODS_BY_NETWORK_OUT',\n  FILESYSTEM_USAGE = 'FILESYSTEM_USAGE',\n  NETWORK_IN_UTILIZATION = 'NETWORK_IN_UTILIZATION',\n  NETWORK_OUT_UTILIZATION = 'NETWORK_OUT_UTILIZATION',\n  NETWORK_UTILIZATION = 'NETWORK_UTILIZATION',\n}\n\nconst queries = {\n  [ProjectQueries.CPU_USAGE]: _.template(\n    `namespace:container_cpu_usage:sum{namespace='<%= project %>'}`,\n  ),\n  [ProjectQueries.MEMORY_USAGE]: _.template(\n    `sum(container_memory_working_set_bytes{namespace='<%= project %>',container=\"\",pod!=\"\"}) BY (namespace)`,\n  ),\n  [ProjectQueries.POD_COUNT]: _.template(\n    `count(kube_pod_info{namespace='<%= project %>'}) BY (namespace)`,\n  ),\n  [ProjectQueries.FILESYSTEM_USAGE]: _.template(\n    `sum(pod:container_fs_usage_bytes:sum{container=\"\",pod!=\"\",namespace='<%= project %>'}) BY (namespace)`,\n  ),\n  [ProjectQueries.NETWORK_IN_UTILIZATION]: _.template(\n    `sum(rate(container_network_receive_bytes_total{container=\"POD\",pod!=\"\",namespace='<%= project %>'}[5m])) BY (namespace)`,\n  ),\n  [ProjectQueries.NETWORK_OUT_UTILIZATION]: _.template(\n    `sum(rate(container_network_transmit_bytes_total{container=\"POD\",pod!=\"\",namespace='<%= project %>'}[5m])) BY (namespace)`,\n  ),\n};\n\nconst top25Queries = {\n  [ProjectQueries.PODS_BY_CPU]: _.template(\n    `topk(25, sort_desc(sum(avg_over_time(pod:container_cpu_usage:sum{container=\"\",pod!=\"\",namespace='<%= project %>'}[5m])) BY (pod, namespace)))`,\n  ),\n  [ProjectQueries.PODS_BY_MEMORY]: _.template(\n    `topk(25, sort_desc(sum(avg_over_time(container_memory_working_set_bytes{container=\"\",pod!=\"\",namespace='<%= project %>'}[5m])) BY (pod, namespace)))`,\n  ),\n  [ProjectQueries.PODS_BY_FILESYSTEM]: _.template(\n    `topk(25, sort_desc(sum(pod:container_fs_usage_bytes:sum{container=\"\",pod!=\"\",namespace='<%= project %>'}) BY (pod, namespace)))`,\n  ),\n  [ProjectQueries.PODS_BY_NETWORK_IN]: _.template(\n    `topk(25, sort_desc(sum(rate(container_network_receive_bytes_total{ container=\"POD\", pod!= \"\", namespace = '<%= project %>'}[5m])) BY (namespace, pod)))`,\n  ),\n  [ProjectQueries.PODS_BY_NETWORK_OUT]: _.template(\n    `topk(25, sort_desc(sum(rate(container_network_transmit_bytes_total{ container=\"POD\", pod!= \"\", namespace = '<%= project %>'}[5m])) BY (namespace, pod)))`,\n  ),\n};\n\nexport const getMultilineQueries = (\n  project: string,\n): { [key: string]: QueryWithDescription[] } => ({\n  [ProjectQueries.NETWORK_UTILIZATION]: [\n    {\n      query: queries[ProjectQueries.NETWORK_IN_UTILIZATION]({ project }),\n      desc: 'In',\n    },\n    {\n      query: queries[ProjectQueries.NETWORK_OUT_UTILIZATION]({ project }),\n      desc: 'Out',\n    },\n  ],\n});\n\nexport const getUtilizationQueries = (project: string) => ({\n  [ProjectQueries.CPU_USAGE]: queries[ProjectQueries.CPU_USAGE]({ project }),\n  [ProjectQueries.MEMORY_USAGE]: queries[ProjectQueries.MEMORY_USAGE]({ project }),\n  [ProjectQueries.POD_COUNT]: queries[ProjectQueries.POD_COUNT]({ project }),\n  [ProjectQueries.FILESYSTEM_USAGE]: queries[ProjectQueries.FILESYSTEM_USAGE]({\n    project,\n  }),\n});\n\nexport const getTopConsumerQueries = (project: string) => ({\n  [ProjectQueries.PODS_BY_CPU]: top25Queries[ProjectQueries.PODS_BY_CPU]({ project }),\n  [ProjectQueries.PODS_BY_MEMORY]: top25Queries[ProjectQueries.PODS_BY_MEMORY]({ project }),\n  [ProjectQueries.PODS_BY_FILESYSTEM]: top25Queries[ProjectQueries.PODS_BY_FILESYSTEM]({ project }),\n  [ProjectQueries.PODS_BY_NETWORK_IN]: top25Queries[ProjectQueries.PODS_BY_NETWORK_IN]({ project }),\n  [ProjectQueries.PODS_BY_NETWORK_OUT]: top25Queries[ProjectQueries.PODS_BY_NETWORK_OUT]({\n    project,\n  }),\n});\n"]}]}