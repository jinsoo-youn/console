{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/behavior/useAnchor.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/behavior/useAnchor.tsx","mtime":1615298458710},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { action } from 'mobx';\nimport { observer } from 'mobx-react';\nimport { isNode, AnchorEnd } from '../types';\nimport ElementContext from '../utils/ElementContext';\nexport const useAnchor = (anchorCallback, end = AnchorEnd.both, type) => {\n    const element = React.useContext(ElementContext);\n    if (!isNode(element)) {\n        throw new Error('useAnchor must be used within the scope of a Node');\n    }\n    React.useEffect(() => {\n        action(() => {\n            const anchor = anchorCallback.prototype\n                ? new anchorCallback(element)\n                : anchorCallback(element);\n            if (anchor) {\n                element.setAnchor(anchor, end, type);\n            }\n        })();\n    }, [anchorCallback, element, end, type]);\n};\nexport const withAnchor = (anchor, end, type) => (WrappedComponent) => {\n    const Component = (props) => {\n        useAnchor(React.useCallback(() => anchor, []), end, type);\n        return React.createElement(WrappedComponent, Object.assign({}, props));\n    };\n    return observer(Component);\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/behavior/useAnchor.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/behavior/useAnchor.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAC9B,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AACtC,OAAO,EAAE,MAAM,EAAgB,SAAS,EAAE,MAAM,UAAU,CAAC;AAC3D,OAAO,cAAc,MAAM,yBAAyB,CAAC;AAIrD,MAAM,CAAC,MAAM,SAAS,GAAG,CACvB,cAA2E,EAC3E,MAAiB,SAAS,CAAC,IAAI,EAC/B,IAAa,EACP,EAAE;IACR,MAAM,OAAO,GAAG,KAAK,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;IACjD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;QACpB,MAAM,IAAI,KAAK,CAAC,mDAAmD,CAAC,CAAC;KACtE;IACD,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,MAAM,CAAC,GAAG,EAAE;YACV,MAAM,MAAM,GAAG,cAAc,CAAC,SAAS;gBACrC,CAAC,CAAC,IAAK,cAAsB,CAAC,OAAO,CAAC;gBACtC,CAAC,CAAE,cAAsB,CAAC,OAAO,CAAC,CAAC;YACrC,IAAI,MAAM,EAAE;gBACV,OAAO,CAAC,SAAS,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;aACtC;QACH,CAAC,CAAC,EAAE,CAAC;IACP,CAAC,EAAE,CAAC,cAAc,EAAE,OAAO,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC,CAAC;AAC3C,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,UAAU,GAAG,CAAoB,MAAc,EAAE,GAAe,EAAE,IAAa,EAAE,EAAE,CAAC,CAC/F,gBAAwC,EACxC,EAAE;IACF,MAAM,SAAS,GAAgB,CAAC,KAAK,EAAE,EAAE;QACvC,SAAS,CACP,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE,CAAC,MAAM,EAAE,EAAE,CAAC,EACnC,GAAG,EACH,IAAI,CACL,CAAC;QACF,OAAO,oBAAC,gBAAgB,oBAAK,KAAK,EAAI,CAAC;IACzC,CAAC,CAAC;IACF,OAAO,QAAQ,CAAC,SAAS,CAAC,CAAC;AAC7B,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { action } from 'mobx';\nimport { observer } from 'mobx-react';\nimport { isNode, Anchor, Node, AnchorEnd } from '../types';\nimport ElementContext from '../utils/ElementContext';\n\ntype AnchorConstructor = new (element?: Node) => Anchor;\n\nexport const useAnchor = (\n  anchorCallback: ((element: Node) => Anchor | undefined) | AnchorConstructor,\n  end: AnchorEnd = AnchorEnd.both,\n  type?: string,\n): void => {\n  const element = React.useContext(ElementContext);\n  if (!isNode(element)) {\n    throw new Error('useAnchor must be used within the scope of a Node');\n  }\n  React.useEffect(() => {\n    action(() => {\n      const anchor = anchorCallback.prototype\n        ? new (anchorCallback as any)(element)\n        : (anchorCallback as any)(element);\n      if (anchor) {\n        element.setAnchor(anchor, end, type);\n      }\n    })();\n  }, [anchorCallback, element, end, type]);\n};\n\nexport const withAnchor = <P extends {} = {}>(anchor: Anchor, end?: AnchorEnd, type?: string) => (\n  WrappedComponent: React.ComponentType<P>,\n) => {\n  const Component: React.FC<P> = (props) => {\n    useAnchor(\n      React.useCallback(() => anchor, []),\n      end,\n      type,\n    );\n    return <WrappedComponent {...props} />;\n  };\n  return observer(Component);\n};\n"]}]}