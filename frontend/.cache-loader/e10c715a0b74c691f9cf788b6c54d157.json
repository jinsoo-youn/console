{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/utils.ts","mtime":1615298458670},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { referenceForModel } from '@console/internal/module/k8s';\nimport { getName, getNamespace } from '@console/shared/src';\nimport * as _ from 'lodash';\nimport { VirtualMachineModel } from '../models';\nexport const getSequence = (from, to) => Array.from({ length: to - from + 1 }, (v, i) => i + from);\nexport const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\nexport const setNativeValue = (element, value) => {\n    const valueSetter = Object.getOwnPropertyDescriptor(element, 'value').set;\n    const prototype = Object.getPrototypeOf(element);\n    const prototypeValueSetter = Object.getOwnPropertyDescriptor(prototype, 'value').set;\n    if (valueSetter && valueSetter !== prototypeValueSetter) {\n        prototypeValueSetter.call(element, value);\n    }\n    else {\n        valueSetter.call(element, value);\n    }\n};\nexport const getFullResourceId = (obj) => `${referenceForModel(obj)}~${getNamespace(obj)}~${getName(obj)}`;\nexport const getNextIDResolver = (entities = []) => {\n    let lastID = _.max(entities.map((entity) => (entity.id == null ? 0 : _.toSafeInteger(entity.id)))) || 0;\n    return () => _.toString(++lastID);\n};\nexport const wrapWithProgress = (setProgress) => (promise) => {\n    setProgress(true);\n    promise\n        .then(() => setProgress(false))\n        .catch((reason) => {\n        setProgress(false);\n        throw reason;\n    });\n};\nexport const getVMLikeModelName = (isCreateTemplate) => isCreateTemplate ? 'virtual machine template' : VirtualMachineModel.label.toLowerCase();\nexport const getVMLikeModelListPath = (isCreateTemplate, namespace) => isCreateTemplate\n    ? `/k8s/ns/${namespace}/virtualization/templates`\n    : `/k8s/ns/${namespace}/virtualization`;\nexport const getVMLikeModelDetailPath = (isTemplate, namespace, name) => isTemplate\n    ? `/k8s/ns/${namespace}/vmtemplates/${name}`\n    : `/k8s/ns/${namespace}/${VirtualMachineModel.plural}/${name}`;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { referenceForModel } from '@console/internal/module/k8s';\nimport { getName, getNamespace } from '@console/shared/src';\nimport * as _ from 'lodash';\nimport { VirtualMachineModel } from '../models';\n\nexport const getSequence = (from, to) => Array.from({ length: to - from + 1 }, (v, i) => i + from);\n\nexport const delay = (ms) => new Promise((resolve) => setTimeout(resolve, ms));\n\nexport const setNativeValue = (element, value) => {\n  const valueSetter = Object.getOwnPropertyDescriptor(element, 'value').set;\n  const prototype = Object.getPrototypeOf(element);\n  const prototypeValueSetter = Object.getOwnPropertyDescriptor(prototype, 'value').set;\n\n  if (valueSetter && valueSetter !== prototypeValueSetter) {\n    prototypeValueSetter.call(element, value);\n  } else {\n    valueSetter.call(element, value);\n  }\n};\n\nexport const getFullResourceId = (obj) =>\n  `${referenceForModel(obj)}~${getNamespace(obj)}~${getName(obj)}`;\n\nexport const getNextIDResolver = (entities: { id?: string }[] = []) => {\n  let lastID =\n    _.max(entities.map((entity) => (entity.id == null ? 0 : _.toSafeInteger(entity.id)))) || 0;\n  return () => _.toString(++lastID);\n};\n\nexport const wrapWithProgress = (setProgress: (inProgress: boolean) => void) => (\n  promise: Promise<any>,\n) => {\n  setProgress(true);\n  promise\n    .then(() => setProgress(false))\n    .catch((reason) => {\n      setProgress(false);\n      throw reason;\n    });\n};\n\nexport const getVMLikeModelName = (isCreateTemplate: boolean) =>\n  isCreateTemplate ? 'virtual machine template' : VirtualMachineModel.label.toLowerCase();\n\nexport const getVMLikeModelListPath = (isCreateTemplate: boolean, namespace: string) =>\n  isCreateTemplate\n    ? `/k8s/ns/${namespace}/virtualization/templates`\n    : `/k8s/ns/${namespace}/virtualization`;\n\nexport const getVMLikeModelDetailPath = (isTemplate: boolean, namespace: string, name: string) =>\n  isTemplate\n    ? `/k8s/ns/${namespace}/vmtemplates/${name}`\n    : `/k8s/ns/${namespace}/${VirtualMachineModel.plural}/${name}`;\n"]}]}