{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm-import/vm-import-ovirt-source-wrapper.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm-import/vm-import-ovirt-source-wrapper.ts","mtime":1615298458670},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { Wrapper } from '../common/wrapper';\nexport class VMImportOvirtSourceWrappper extends Wrapper {\n    constructor(vmImportOvirtSource, copy = false) {\n        super(vmImportOvirtSource, copy);\n        this.setVM = (id) => {\n            this.ensurePath('vm');\n            this.data.vm.id = id;\n            return this;\n        };\n        this.setNetworkMappings = (networkMappings) => {\n            this.ensurePath('mappings');\n            this.data.mappings.networkMappings = networkMappings;\n            this.clearIfEmpty('mappings.networkMappings');\n            this.clearIfEmpty('mappings');\n            return this;\n        };\n        this.setStorageMappings = (storageMappings) => {\n            this.ensurePath('mappings');\n            this.data.mappings.storageMappings = storageMappings;\n            this.clearIfEmpty('mappings.storageMappings');\n            this.clearIfEmpty('mappings');\n            return this;\n        };\n        this.setDiskMappings = (diskMappings) => {\n            this.ensurePath('mappings');\n            this.data.mappings.diskMappings = diskMappings;\n            this.clearIfEmpty('mappings.diskMappings');\n            this.clearIfEmpty('mappings');\n            return this;\n        };\n    }\n}\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm-import/vm-import-ovirt-source-wrapper.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm-import/vm-import-ovirt-source-wrapper.ts"],"names":[],"mappings":"AAMA,OAAO,EAAE,OAAO,EAAE,MAAM,mBAAmB,CAAC;AAE5C,MAAM,OAAO,2BAA4B,SAAQ,OAGhD;IACC,YACE,mBAA6E,EAC7E,IAAI,GAAG,KAAK;QAEZ,KAAK,CAAC,mBAAmB,EAAE,IAAI,CAAC,CAAC;QAGnC,UAAK,GAAG,CAAC,EAAU,EAAE,EAAE;YACrB,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;YACtB,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,EAAE,GAAG,EAAE,CAAC;YACrB,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;QAEF,uBAAkB,GAAG,CAAC,eAAiC,EAAE,EAAE;YACzD,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;YAC5B,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAe,GAAG,eAAe,CAAC;YACrD,IAAI,CAAC,YAAY,CAAC,0BAA0B,CAAC,CAAC;YAC9C,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;YAC9B,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;QAEF,uBAAkB,GAAG,CAAC,eAAiC,EAAE,EAAE;YACzD,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;YAC5B,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,eAAe,GAAG,eAAe,CAAC;YACrD,IAAI,CAAC,YAAY,CAAC,0BAA0B,CAAC,CAAC;YAC9C,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;YAC9B,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;QAEF,oBAAe,GAAG,CAAC,YAA2B,EAAE,EAAE;YAChD,IAAI,CAAC,UAAU,CAAC,UAAU,CAAC,CAAC;YAC5B,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,YAAY,GAAG,YAAY,CAAC;YAC/C,IAAI,CAAC,YAAY,CAAC,uBAAuB,CAAC,CAAC;YAC3C,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC;YAC9B,OAAO,IAAI,CAAC;QACd,CAAC,CAAC;IA9BF,CAAC;CA+BF","sourcesContent":["import {\n  DiskMapping,\n  NetworkMapping,\n  StorageMapping,\n  VMImportOvirtSource,\n} from '../../../types/vm-import/ovirt/vm-import';\nimport { Wrapper } from '../common/wrapper';\n\nexport class VMImportOvirtSourceWrappper extends Wrapper<\n  VMImportOvirtSource,\n  VMImportOvirtSourceWrappper\n> {\n  constructor(\n    vmImportOvirtSource?: VMImportOvirtSource | VMImportOvirtSourceWrappper | any,\n    copy = false,\n  ) {\n    super(vmImportOvirtSource, copy);\n  }\n\n  setVM = (id: string) => {\n    this.ensurePath('vm');\n    this.data.vm.id = id;\n    return this;\n  };\n\n  setNetworkMappings = (networkMappings: NetworkMapping[]) => {\n    this.ensurePath('mappings');\n    this.data.mappings.networkMappings = networkMappings;\n    this.clearIfEmpty('mappings.networkMappings');\n    this.clearIfEmpty('mappings');\n    return this;\n  };\n\n  setStorageMappings = (storageMappings: StorageMapping[]) => {\n    this.ensurePath('mappings');\n    this.data.mappings.storageMappings = storageMappings;\n    this.clearIfEmpty('mappings.storageMappings');\n    this.clearIfEmpty('mappings');\n    return this;\n  };\n\n  setDiskMappings = (diskMappings: DiskMapping[]) => {\n    this.ensurePath('mappings');\n    this.data.mappings.diskMappings = diskMappings;\n    this.clearIfEmpty('mappings.diskMappings');\n    this.clearIfEmpty('mappings');\n    return this;\n  };\n}\n"]}]}