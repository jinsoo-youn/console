{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/create-vm-wizard/redux/reducers.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/create-vm-wizard/redux/reducers.ts","mtime":1615298458650},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { fromJS, Map as ImmutableMap } from 'immutable';\nimport { ImportProvidersField, VMWizardTab } from '../types';\nimport { iGet } from '../../../utils/immutable';\nimport { DeviceType } from '../../../constants/vm';\nimport { InternalActionType } from './types';\nconst sequentializeBootOrderIndexes = (state, dialogId) => {\n    const bootOrderIndexes = [\n        ...state\n            .getIn([dialogId, 'tabs', VMWizardTab.NETWORKING, 'value'])\n            .toArray()\n            .map((network) => network.getIn(['networkInterface', 'bootOrder'])),\n        ...state\n            .getIn([dialogId, 'tabs', VMWizardTab.STORAGE, 'value'])\n            .toArray()\n            .map((storage) => storage.getIn(['disk', 'bootOrder'])),\n    ]\n        .filter((bootOrder) => bootOrder != null)\n        .sort((a, b) => a - b);\n    return [DeviceType.NIC, DeviceType.DISK].reduce((newState, deviceType) => {\n        const tab = deviceType === DeviceType.DISK ? VMWizardTab.STORAGE : VMWizardTab.NETWORKING;\n        const deviceName = deviceType === DeviceType.DISK ? 'disk' : 'networkInterface';\n        return newState.updateIn([dialogId, 'tabs', tab, 'value'], (deviceWrappers) => {\n            return deviceWrappers.map((deviceWrapper) => {\n                const oldBootOrder = deviceWrapper.getIn([deviceName, 'bootOrder']);\n                if (oldBootOrder != null) {\n                    const newBootOrder = bootOrderIndexes.indexOf(oldBootOrder) + 1;\n                    if (newBootOrder !== oldBootOrder) {\n                        return deviceWrapper.setIn([deviceName, 'bootOrder'], newBootOrder);\n                    }\n                }\n                return deviceWrapper;\n            });\n        });\n    }, state);\n};\nconst setDeviceBootOrder = (state, dialogId, deviceID, updatedDeviceType, updatedDeviceBootOrder) => {\n    const resultState = [DeviceType.NIC, DeviceType.DISK].reduce((newState, devType) => {\n        const tab = devType === DeviceType.DISK ? VMWizardTab.STORAGE : VMWizardTab.NETWORKING;\n        const deviceName = devType === DeviceType.DISK ? 'disk' : 'networkInterface';\n        return newState.updateIn([dialogId, 'tabs', tab, 'value'], (deviceWrappers) => {\n            return deviceWrappers.map((deviceWrapper) => {\n                const wrapperID = deviceWrapper.get('id');\n                const oldBootOrder = deviceWrapper.getIn([deviceName, 'bootOrder']);\n                const isUpdatedDevice = updatedDeviceType === devType && wrapperID === deviceID;\n                if (isUpdatedDevice || (oldBootOrder != null && updatedDeviceBootOrder <= oldBootOrder)) {\n                    return deviceWrapper.setIn([deviceName, 'bootOrder'], isUpdatedDevice ? updatedDeviceBootOrder : oldBootOrder + 1);\n                }\n                return deviceWrapper;\n            });\n        });\n    }, state);\n    return sequentializeBootOrderIndexes(resultState, dialogId);\n};\n// Merge deep in without updating the keys with undefined values\nconst mergeDeepInSpecial = (state, path, value) => state.updateIn(path, (oldValue) => {\n    if (oldValue) {\n        return oldValue.mergeDeepWith((oldSubValue, newSubValue) => typeof newSubValue === 'undefined' ? oldSubValue : newSubValue, value);\n    }\n    return value;\n});\nconst TAB_UPDATE_KEYS = ['value', 'isValid', 'isLocked', 'isPending', 'hasAllRequiredFilled'];\nconst setTabKeys = (state, tab, action) => TAB_UPDATE_KEYS.reduce((nextState, key) => {\n    if (typeof action.payload[key] === 'undefined') {\n        return nextState;\n    }\n    return nextState.setIn([action.payload.id, 'tabs', tab, key], fromJS(action.payload[key]));\n}, state);\nconst setObjectValues = (state, path, obj) => {\n    return obj\n        ? Object.keys(obj).reduce((nextState, key) => nextState.setIn([...path, key], fromJS(obj[key])), state)\n        : state;\n};\nconst updateIDItemInList = (state, path, item) => {\n    const itemID = iGet(item, 'id');\n    return state.updateIn(path, (items) => {\n        const networkIndex = itemID != null ? items.findIndex((t) => iGet(t, 'id') === itemID) : -1;\n        if (networkIndex === -1) {\n            const maxID = items.map((t) => iGet(t, 'id')).max() || 0;\n            return items.push(item.set('id', _.toString(_.toSafeInteger(maxID) + 1)));\n        }\n        return items.set(networkIndex, item);\n    });\n};\nconst removeIDItemFromList = (state, path, itemID) => {\n    return state.updateIn(path, (items) => {\n        const networkIndex = itemID == null ? -1 : items.findIndex((t) => iGet(t, 'id') === itemID);\n        return networkIndex === -1 ? items : items.delete(networkIndex);\n    });\n};\nexport default (state, action) => {\n    if (!state) {\n        return ImmutableMap();\n    }\n    const { payload } = action;\n    const dialogID = payload && payload.id;\n    switch (action.type) {\n        case InternalActionType.Create:\n            return state.set(dialogID, fromJS(payload.value));\n        case InternalActionType.Dispose:\n            return state.delete(dialogID);\n        case InternalActionType.UpdateNIC:\n            return updateIDItemInList(state, [dialogID, 'tabs', VMWizardTab.NETWORKING, 'value'], fromJS(payload.network));\n        case InternalActionType.RemoveNIC:\n            return removeIDItemFromList(state, [dialogID, 'tabs', VMWizardTab.NETWORKING, 'value'], payload.networkID);\n        case InternalActionType.UpdateStorage:\n            return updateIDItemInList(state, [dialogID, 'tabs', VMWizardTab.STORAGE, 'value'], fromJS(payload.storage));\n        case InternalActionType.RemoveStorage:\n            return removeIDItemFromList(state, [dialogID, 'tabs', VMWizardTab.STORAGE, 'value'], payload.storageID);\n        case InternalActionType.SetDeviceBootOrder:\n            return setDeviceBootOrder(state, dialogID, payload.deviceID, payload.deviceType, payload.bootOrder);\n        case InternalActionType.SetNetworks:\n            return setTabKeys(state, VMWizardTab.NETWORKING, action);\n        case InternalActionType.SetStorages:\n            return setTabKeys(state, VMWizardTab.STORAGE, action);\n        case InternalActionType.SetResults:\n            return setTabKeys(state, VMWizardTab.RESULT, action);\n        case InternalActionType.Update:\n            return mergeDeepInSpecial(state, [dialogID], fromJS(payload.value));\n        case InternalActionType.UpdateCommonData:\n            return setObjectValues(setObjectValues(state, [dialogID, 'commonData', 'data'], payload.value.data), [dialogID, 'commonData', 'dataIDReferences'], payload.value.dataIDReferences);\n        case InternalActionType.SetExtraWSQueries:\n            return state.setIn([dialogID, 'extraWSQueries', payload.queryKey], fromJS(payload.wsQueries));\n        case InternalActionType.SetGoToStep:\n            return state.setIn([dialogID, 'transient', 'goToStep'], payload.tab);\n        case InternalActionType.SetTabValidity:\n            return state\n                .setIn([dialogID, 'tabs', payload.tab, 'isValid'], payload.isValid)\n                .setIn([dialogID, 'tabs', payload.tab, 'hasAllRequiredFilled'], payload.hasAllRequiredFilled)\n                .setIn([dialogID, 'tabs', payload.tab, 'error'], payload.error);\n        case InternalActionType.SetTabLocked:\n            return state.setIn([dialogID, 'tabs', payload.tab, 'isLocked'], payload.isLocked);\n        case InternalActionType.SetTabHidden:\n            return state.setIn([dialogID, 'tabs', payload.tab, 'isHidden'], payload.isHidden);\n        case InternalActionType.SetTabIsCreateDisabled:\n            return state.setIn([dialogID, 'tabs', payload.tab, 'isCreateDisabled'], payload.isDisabled);\n        case InternalActionType.SetTabIsUpdateDisabled:\n            return state.setIn([dialogID, 'tabs', payload.tab, 'isUpdateDisabled'], payload.isDisabled);\n        case InternalActionType.SetTabIsDeleteDisabled:\n            return state.setIn([dialogID, 'tabs', payload.tab, 'isDeleteDisabled'], payload.isDisabled);\n        case InternalActionType.SetVmSettingsFieldValue:\n            return state.setIn([dialogID, 'tabs', VMWizardTab.VM_SETTINGS, 'value', payload.key, 'value'], fromJS(payload.value));\n        case InternalActionType.SetImportProvidersFieldValue:\n            return state.setIn([dialogID, 'tabs', VMWizardTab.IMPORT_PROVIDERS, 'value', payload.key, 'value'], fromJS(payload.value));\n        case InternalActionType.UpdateImportProviderField:\n            return mergeDeepInSpecial(state, [\n                dialogID,\n                'tabs',\n                VMWizardTab.IMPORT_PROVIDERS,\n                'value',\n                ImportProvidersField.PROVIDERS_DATA,\n                payload.provider,\n                payload.key,\n            ], fromJS(payload.value));\n        case InternalActionType.SetImportProvider:\n            return state.setIn([\n                dialogID,\n                'tabs',\n                VMWizardTab.IMPORT_PROVIDERS,\n                'value',\n                ImportProvidersField.PROVIDERS_DATA,\n                payload.provider,\n            ], fromJS(payload.value));\n        case InternalActionType.UpdateImportProvider:\n            return mergeDeepInSpecial(state, [\n                dialogID,\n                'tabs',\n                VMWizardTab.IMPORT_PROVIDERS,\n                'value',\n                ImportProvidersField.PROVIDERS_DATA,\n                payload.provider,\n            ], fromJS(payload.value));\n        case InternalActionType.SetCloudInitFieldValue:\n            return state.setIn([dialogID, 'tabs', VMWizardTab.ADVANCED_CLOUD_INIT, 'value', payload.key, 'value'], fromJS(payload.value));\n        case InternalActionType.SetInVmSettings:\n            return state.setIn([dialogID, 'tabs', VMWizardTab.VM_SETTINGS, 'value', ...payload.path], fromJS(payload.value));\n        case InternalActionType.SetInVmSettingsBatch:\n            return payload.batch.reduce((nextState, { path, value }) => nextState.setIn([dialogID, 'tabs', VMWizardTab.VM_SETTINGS, 'value', ...path], fromJS(value)), state);\n        case InternalActionType.UpdateVmSettingsField:\n            return mergeDeepInSpecial(state, [dialogID, 'tabs', VMWizardTab.VM_SETTINGS, 'value', payload.key], fromJS(payload.value));\n        case InternalActionType.UpdateVmSettings:\n            return mergeDeepInSpecial(state, [dialogID, 'tabs', VMWizardTab.VM_SETTINGS, 'value'], fromJS(payload.value));\n        default:\n            break;\n    }\n    return state;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/create-vm-wizard/redux/reducers.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/create-vm-wizard/redux/reducers.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { fromJS, Map as ImmutableMap } from 'immutable';\nimport { ImportProvidersField, VMWizardTab } from '../types';\nimport { iGet } from '../../../utils/immutable';\nimport { DeviceType } from '../../../constants/vm';\nimport { InternalActionType, WizardInternalAction } from './types';\n\nconst sequentializeBootOrderIndexes = (state, dialogId: string) => {\n  const bootOrderIndexes = [\n    ...state\n      .getIn([dialogId, 'tabs', VMWizardTab.NETWORKING, 'value'])\n      .toArray()\n      .map((network) => network.getIn(['networkInterface', 'bootOrder'])),\n    ...state\n      .getIn([dialogId, 'tabs', VMWizardTab.STORAGE, 'value'])\n      .toArray()\n      .map((storage) => storage.getIn(['disk', 'bootOrder'])),\n  ]\n    .filter((bootOrder) => bootOrder != null)\n    .sort((a, b) => a - b);\n\n  return [DeviceType.NIC, DeviceType.DISK].reduce((newState, deviceType) => {\n    const tab = deviceType === DeviceType.DISK ? VMWizardTab.STORAGE : VMWizardTab.NETWORKING;\n    const deviceName = deviceType === DeviceType.DISK ? 'disk' : 'networkInterface';\n\n    return newState.updateIn([dialogId, 'tabs', tab, 'value'], (deviceWrappers) => {\n      return deviceWrappers.map((deviceWrapper) => {\n        const oldBootOrder = deviceWrapper.getIn([deviceName, 'bootOrder']);\n\n        if (oldBootOrder != null) {\n          const newBootOrder = bootOrderIndexes.indexOf(oldBootOrder) + 1;\n          if (newBootOrder !== oldBootOrder) {\n            return deviceWrapper.setIn([deviceName, 'bootOrder'], newBootOrder);\n          }\n        }\n        return deviceWrapper;\n      });\n    });\n  }, state);\n};\n\nconst setDeviceBootOrder = (\n  state,\n  dialogId: string,\n  deviceID: string,\n  updatedDeviceType: DeviceType,\n  updatedDeviceBootOrder: number,\n) => {\n  const resultState = [DeviceType.NIC, DeviceType.DISK].reduce((newState, devType) => {\n    const tab = devType === DeviceType.DISK ? VMWizardTab.STORAGE : VMWizardTab.NETWORKING;\n    const deviceName = devType === DeviceType.DISK ? 'disk' : 'networkInterface';\n\n    return newState.updateIn([dialogId, 'tabs', tab, 'value'], (deviceWrappers) => {\n      return deviceWrappers.map((deviceWrapper) => {\n        const wrapperID = deviceWrapper.get('id');\n        const oldBootOrder = deviceWrapper.getIn([deviceName, 'bootOrder']);\n        const isUpdatedDevice = updatedDeviceType === devType && wrapperID === deviceID;\n        if (isUpdatedDevice || (oldBootOrder != null && updatedDeviceBootOrder <= oldBootOrder)) {\n          return deviceWrapper.setIn(\n            [deviceName, 'bootOrder'],\n            isUpdatedDevice ? updatedDeviceBootOrder : oldBootOrder + 1,\n          );\n        }\n        return deviceWrapper;\n      });\n    });\n  }, state);\n\n  return sequentializeBootOrderIndexes(resultState, dialogId);\n};\n\n// Merge deep in without updating the keys with undefined values\nconst mergeDeepInSpecial = (state, path: string[], value) =>\n  state.updateIn(path, (oldValue) => {\n    if (oldValue) {\n      return oldValue.mergeDeepWith(\n        (oldSubValue, newSubValue) =>\n          typeof newSubValue === 'undefined' ? oldSubValue : newSubValue,\n        value,\n      );\n    }\n    return value;\n  });\n\nconst TAB_UPDATE_KEYS = ['value', 'isValid', 'isLocked', 'isPending', 'hasAllRequiredFilled'];\n\nconst setTabKeys = (state, tab: VMWizardTab, action: WizardInternalAction) =>\n  TAB_UPDATE_KEYS.reduce((nextState, key) => {\n    if (typeof action.payload[key] === 'undefined') {\n      return nextState;\n    }\n    return nextState.setIn([action.payload.id, 'tabs', tab, key], fromJS(action.payload[key]));\n  }, state);\n\nconst setObjectValues = (state, path, obj) => {\n  return obj\n    ? Object.keys(obj).reduce(\n        (nextState, key) => nextState.setIn([...path, key], fromJS(obj[key])),\n        state,\n      )\n    : state;\n};\n\nconst updateIDItemInList = (state, path, item?) => {\n  const itemID = iGet(item, 'id');\n  return state.updateIn(path, (items) => {\n    const networkIndex = itemID != null ? items.findIndex((t) => iGet(t, 'id') === itemID) : -1;\n    if (networkIndex === -1) {\n      const maxID = items.map((t) => iGet(t, 'id')).max() || 0;\n      return items.push(item.set('id', _.toString(_.toSafeInteger(maxID) + 1)));\n    }\n    return items.set(networkIndex, item);\n  });\n};\n\nconst removeIDItemFromList = (state, path, itemID?) => {\n  return state.updateIn(path, (items) => {\n    const networkIndex = itemID == null ? -1 : items.findIndex((t) => iGet(t, 'id') === itemID);\n    return networkIndex === -1 ? items : items.delete(networkIndex);\n  });\n};\n\nexport default (state, action: WizardInternalAction) => {\n  if (!state) {\n    return ImmutableMap();\n  }\n  const { payload } = action;\n  const dialogID = payload && payload.id;\n\n  switch (action.type) {\n    case InternalActionType.Create:\n      return state.set(dialogID, fromJS(payload.value));\n    case InternalActionType.Dispose:\n      return state.delete(dialogID);\n    case InternalActionType.UpdateNIC:\n      return updateIDItemInList(\n        state,\n        [dialogID, 'tabs', VMWizardTab.NETWORKING, 'value'],\n        fromJS(payload.network),\n      );\n    case InternalActionType.RemoveNIC:\n      return removeIDItemFromList(\n        state,\n        [dialogID, 'tabs', VMWizardTab.NETWORKING, 'value'],\n        payload.networkID,\n      );\n    case InternalActionType.UpdateStorage:\n      return updateIDItemInList(\n        state,\n        [dialogID, 'tabs', VMWizardTab.STORAGE, 'value'],\n        fromJS(payload.storage),\n      );\n    case InternalActionType.RemoveStorage:\n      return removeIDItemFromList(\n        state,\n        [dialogID, 'tabs', VMWizardTab.STORAGE, 'value'],\n        payload.storageID,\n      );\n    case InternalActionType.SetDeviceBootOrder:\n      return setDeviceBootOrder(\n        state,\n        dialogID,\n        payload.deviceID,\n        payload.deviceType,\n        payload.bootOrder,\n      );\n    case InternalActionType.SetNetworks:\n      return setTabKeys(state, VMWizardTab.NETWORKING, action);\n    case InternalActionType.SetStorages:\n      return setTabKeys(state, VMWizardTab.STORAGE, action);\n    case InternalActionType.SetResults:\n      return setTabKeys(state, VMWizardTab.RESULT, action);\n    case InternalActionType.Update:\n      return mergeDeepInSpecial(state, [dialogID], fromJS(payload.value));\n    case InternalActionType.UpdateCommonData:\n      return setObjectValues(\n        setObjectValues(state, [dialogID, 'commonData', 'data'], payload.value.data),\n        [dialogID, 'commonData', 'dataIDReferences'],\n        payload.value.dataIDReferences,\n      );\n    case InternalActionType.SetExtraWSQueries:\n      return state.setIn([dialogID, 'extraWSQueries', payload.queryKey], fromJS(payload.wsQueries));\n    case InternalActionType.SetGoToStep:\n      return state.setIn([dialogID, 'transient', 'goToStep'], payload.tab);\n    case InternalActionType.SetTabValidity:\n      return state\n        .setIn([dialogID, 'tabs', payload.tab, 'isValid'], payload.isValid)\n        .setIn(\n          [dialogID, 'tabs', payload.tab, 'hasAllRequiredFilled'],\n          payload.hasAllRequiredFilled,\n        )\n        .setIn([dialogID, 'tabs', payload.tab, 'error'], payload.error);\n    case InternalActionType.SetTabLocked:\n      return state.setIn([dialogID, 'tabs', payload.tab, 'isLocked'], payload.isLocked);\n    case InternalActionType.SetTabHidden:\n      return state.setIn([dialogID, 'tabs', payload.tab, 'isHidden'], payload.isHidden);\n    case InternalActionType.SetTabIsCreateDisabled:\n      return state.setIn([dialogID, 'tabs', payload.tab, 'isCreateDisabled'], payload.isDisabled);\n    case InternalActionType.SetTabIsUpdateDisabled:\n      return state.setIn([dialogID, 'tabs', payload.tab, 'isUpdateDisabled'], payload.isDisabled);\n    case InternalActionType.SetTabIsDeleteDisabled:\n      return state.setIn([dialogID, 'tabs', payload.tab, 'isDeleteDisabled'], payload.isDisabled);\n    case InternalActionType.SetVmSettingsFieldValue:\n      return state.setIn(\n        [dialogID, 'tabs', VMWizardTab.VM_SETTINGS, 'value', payload.key, 'value'],\n        fromJS(payload.value),\n      );\n    case InternalActionType.SetImportProvidersFieldValue:\n      return state.setIn(\n        [dialogID, 'tabs', VMWizardTab.IMPORT_PROVIDERS, 'value', payload.key, 'value'],\n        fromJS(payload.value),\n      );\n    case InternalActionType.UpdateImportProviderField:\n      return mergeDeepInSpecial(\n        state,\n        [\n          dialogID,\n          'tabs',\n          VMWizardTab.IMPORT_PROVIDERS,\n          'value',\n          ImportProvidersField.PROVIDERS_DATA,\n          payload.provider,\n          payload.key,\n        ],\n        fromJS(payload.value),\n      );\n    case InternalActionType.SetImportProvider:\n      return state.setIn(\n        [\n          dialogID,\n          'tabs',\n          VMWizardTab.IMPORT_PROVIDERS,\n          'value',\n          ImportProvidersField.PROVIDERS_DATA,\n          payload.provider,\n        ],\n        fromJS(payload.value),\n      );\n    case InternalActionType.UpdateImportProvider:\n      return mergeDeepInSpecial(\n        state,\n        [\n          dialogID,\n          'tabs',\n          VMWizardTab.IMPORT_PROVIDERS,\n          'value',\n          ImportProvidersField.PROVIDERS_DATA,\n          payload.provider,\n        ],\n        fromJS(payload.value),\n      );\n    case InternalActionType.SetCloudInitFieldValue:\n      return state.setIn(\n        [dialogID, 'tabs', VMWizardTab.ADVANCED_CLOUD_INIT, 'value', payload.key, 'value'],\n        fromJS(payload.value),\n      );\n    case InternalActionType.SetInVmSettings:\n      return state.setIn(\n        [dialogID, 'tabs', VMWizardTab.VM_SETTINGS, 'value', ...payload.path],\n        fromJS(payload.value),\n      );\n    case InternalActionType.SetInVmSettingsBatch:\n      return payload.batch.reduce(\n        (nextState, { path, value }) =>\n          nextState.setIn(\n            [dialogID, 'tabs', VMWizardTab.VM_SETTINGS, 'value', ...path],\n            fromJS(value),\n          ),\n        state,\n      );\n    case InternalActionType.UpdateVmSettingsField:\n      return mergeDeepInSpecial(\n        state,\n        [dialogID, 'tabs', VMWizardTab.VM_SETTINGS, 'value', payload.key],\n        fromJS(payload.value),\n      );\n    case InternalActionType.UpdateVmSettings:\n      return mergeDeepInSpecial(\n        state,\n        [dialogID, 'tabs', VMWizardTab.VM_SETTINGS, 'value'],\n        fromJS(payload.value),\n      );\n    default:\n      break;\n  }\n  return state;\n};\n"]}]}