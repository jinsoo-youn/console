{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/utils/create-eventsources-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/utils/create-eventsources-utils.ts","mtime":1615298458650},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { safeLoad } from 'js-yaml';\nimport { checkAccess } from '@console/internal/components/utils';\nimport { getAppLabels, getCommonAnnotations, } from '@console/dev-console/src/utils/resource-label-utils';\nimport { useSafetyFirst } from '@console/internal/components/safety-first';\nimport { EventSources, } from '../components/add/import-types';\nimport { ServiceModel } from '../models';\nimport { getKnativeEventSourceIcon } from './get-knative-icon';\nimport { useEventSourceModels } from './fetch-dynamic-eventsources-utils';\nexport const isKnownEventSource = (eventSource) => Object.keys(EventSources).includes(eventSource);\nexport const getEventSourcesDepResource = (formData) => {\n    const { type, name, apiVersion, application: { name: applicationName }, project: { name: namespace }, data, sink: { knativeService }, } = formData;\n    const defaultLabel = getAppLabels(name, applicationName);\n    const eventSrcData = data[type.toLowerCase()];\n    const eventSourceResource = {\n        kind: type,\n        apiVersion,\n        metadata: {\n            name,\n            namespace,\n            labels: Object.assign({}, defaultLabel),\n            annotations: getCommonAnnotations(),\n        },\n        spec: Object.assign({ sink: {\n                ref: {\n                    apiVersion: `${ServiceModel.apiGroup}/${ServiceModel.apiVersion}`,\n                    kind: ServiceModel.kind,\n                    name: knativeService,\n                },\n            } }, (eventSrcData && eventSrcData)),\n    };\n    return eventSourceResource;\n};\nexport const getKafkaSourceResource = (formData) => {\n    var _a, _b;\n    const { limits: { cpu, memory }, } = formData;\n    const baseResource = getEventSourcesDepResource(formData);\n    const { net } = baseResource.spec;\n    baseResource.spec.net = Object.assign(Object.assign(Object.assign({}, net), (!((_a = net.sasl) === null || _a === void 0 ? void 0 : _a.enable) && { sasl: { user: {}, password: {} } })), (!((_b = net.tls) === null || _b === void 0 ? void 0 : _b.enable) && { tls: { caCert: {}, cert: {}, key: {} } }));\n    const kafkaSource = {\n        spec: {\n            resources: Object.assign(Object.assign({}, ((cpu.limit || memory.limit) && {\n                limits: Object.assign(Object.assign({}, (cpu.limit && { cpu: `${cpu.limit}${cpu.limitUnit}` })), (memory.limit && { memory: `${memory.limit}${memory.limitUnit}` })),\n            })), ((cpu.request || memory.request) && {\n                requests: Object.assign(Object.assign({}, (cpu.request && { cpu: `${cpu.request}${cpu.requestUnit}` })), (memory.request && { memory: `${memory.request}${memory.requestUnit}` })),\n            })),\n        },\n    };\n    return _.merge({}, baseResource, kafkaSource);\n};\nexport const getEventSourceResource = (formData) => {\n    switch (formData.type) {\n        case EventSources.KafkaSource:\n            return getKafkaSourceResource(formData);\n        case EventSources.ContainerSource:\n        case EventSources.CronJobSource:\n        case EventSources.ApiServerSource:\n        case EventSources.SinkBinding:\n        case EventSources.PingSource:\n            return getEventSourcesDepResource(formData);\n        default:\n            return safeLoad(formData.yamlData);\n    }\n};\nexport const getEventSourceData = (source) => {\n    const eventSourceData = {\n        cronjobsource: {\n            data: '',\n            schedule: '',\n        },\n        pingsource: {\n            data: '',\n            schedule: '',\n        },\n        sinkbinding: {\n            subject: {\n                apiVersion: '',\n                kind: '',\n                selector: {\n                    matchLabels: {},\n                },\n            },\n        },\n        apiserversource: {\n            mode: 'Ref',\n            serviceAccountName: '',\n            resources: [\n                {\n                    apiVersion: '',\n                    kind: '',\n                },\n            ],\n        },\n        kafkasource: {\n            bootstrapServers: [''],\n            topics: [''],\n            consumerGroup: '',\n            net: {\n                sasl: {\n                    enable: false,\n                    user: { secretKeyRef: { name: '', key: '' } },\n                    password: { secretKeyRef: { name: '', key: '' } },\n                },\n                tls: {\n                    enable: false,\n                    caCert: { secretKeyRef: { name: '', key: '' } },\n                    cert: { secretKeyRef: { name: '', key: '' } },\n                    key: { secretKeyRef: { name: '', key: '' } },\n                },\n            },\n            serviceAccountName: '',\n        },\n        containersource: {\n            template: {\n                spec: {\n                    containers: [\n                        {\n                            image: '',\n                            name: '',\n                            args: [''],\n                            env: [],\n                        },\n                    ],\n                },\n            },\n        },\n    };\n    return eventSourceData[source];\n};\nexport const useEventSourceList = (namespace) => {\n    const [accessData, setAccessData] = useSafetyFirst({ loaded: false, eventSourceList: {} });\n    const { eventSourceModels, loaded: modelLoaded } = useEventSourceModels();\n    React.useEffect(() => {\n        const accessList = [];\n        if (modelLoaded) {\n            eventSourceModels.map((model) => {\n                const { apiGroup, plural, kind } = model;\n                const modelData = {\n                    [model.kind]: {\n                        name: kind,\n                        iconUrl: getKnativeEventSourceIcon(kind),\n                        displayName: kind,\n                        title: kind,\n                    },\n                };\n                return accessList.push(checkAccess({\n                    group: apiGroup,\n                    resource: plural,\n                    namespace,\n                    verb: 'create',\n                }).then((result) => (result.status.allowed ? modelData : {})));\n            });\n            Promise.all(accessList)\n                .then((results) => {\n                const eventSourceList = results.reduce((acc, result) => {\n                    return Object.assign(Object.assign({}, acc), result);\n                }, {});\n                setAccessData({ loaded: true, eventSourceList });\n            })\n                // eslint-disable-next-line no-console\n                .catch((err) => console.warn(err.message));\n        }\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [modelLoaded]);\n    return eventSourceModels.length === 0 && modelLoaded ? null : accessData;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/utils/create-eventsources-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/utils/create-eventsources-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { safeLoad } from 'js-yaml';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { checkAccess } from '@console/internal/components/utils';\nimport {\n  getAppLabels,\n  getCommonAnnotations,\n} from '@console/dev-console/src/utils/resource-label-utils';\nimport { useSafetyFirst } from '@console/internal/components/safety-first';\nimport {\n  EventSources,\n  EventSourceFormData,\n  EventSourceListData,\n} from '../components/add/import-types';\nimport { ServiceModel } from '../models';\nimport { getKnativeEventSourceIcon } from './get-knative-icon';\nimport { useEventSourceModels } from './fetch-dynamic-eventsources-utils';\n\nexport const isKnownEventSource = (eventSource: string): boolean =>\n  Object.keys(EventSources).includes(eventSource);\n\nexport const getEventSourcesDepResource = (formData: EventSourceFormData): K8sResourceKind => {\n  const {\n    type,\n    name,\n    apiVersion,\n    application: { name: applicationName },\n    project: { name: namespace },\n    data,\n    sink: { knativeService },\n  } = formData;\n\n  const defaultLabel = getAppLabels(name, applicationName);\n  const eventSrcData = data[type.toLowerCase()];\n  const eventSourceResource: K8sResourceKind = {\n    kind: type,\n    apiVersion,\n    metadata: {\n      name,\n      namespace,\n      labels: {\n        ...defaultLabel,\n      },\n      annotations: getCommonAnnotations(),\n    },\n    spec: {\n      sink: {\n        ref: {\n          apiVersion: `${ServiceModel.apiGroup}/${ServiceModel.apiVersion}`,\n          kind: ServiceModel.kind,\n          name: knativeService,\n        },\n      },\n      ...(eventSrcData && eventSrcData),\n    },\n  };\n\n  return eventSourceResource;\n};\n\nexport const getKafkaSourceResource = (formData: EventSourceFormData): K8sResourceKind => {\n  const {\n    limits: { cpu, memory },\n  } = formData;\n  const baseResource = getEventSourcesDepResource(formData);\n  const { net } = baseResource.spec;\n  baseResource.spec.net = {\n    ...net,\n    ...(!net.sasl?.enable && { sasl: { user: {}, password: {} } }),\n    ...(!net.tls?.enable && { tls: { caCert: {}, cert: {}, key: {} } }),\n  };\n  const kafkaSource = {\n    spec: {\n      resources: {\n        ...((cpu.limit || memory.limit) && {\n          limits: {\n            ...(cpu.limit && { cpu: `${cpu.limit}${cpu.limitUnit}` }),\n            ...(memory.limit && { memory: `${memory.limit}${memory.limitUnit}` }),\n          },\n        }),\n        ...((cpu.request || memory.request) && {\n          requests: {\n            ...(cpu.request && { cpu: `${cpu.request}${cpu.requestUnit}` }),\n            ...(memory.request && { memory: `${memory.request}${memory.requestUnit}` }),\n          },\n        }),\n      },\n    },\n  };\n  return _.merge({}, baseResource, kafkaSource);\n};\n\nexport const getEventSourceResource = (formData: EventSourceFormData): K8sResourceKind => {\n  switch (formData.type) {\n    case EventSources.KafkaSource:\n      return getKafkaSourceResource(formData);\n    case EventSources.ContainerSource:\n    case EventSources.CronJobSource:\n    case EventSources.ApiServerSource:\n    case EventSources.SinkBinding:\n    case EventSources.PingSource:\n      return getEventSourcesDepResource(formData);\n    default:\n      return safeLoad(formData.yamlData);\n  }\n};\n\nexport const getEventSourceData = (source: string) => {\n  const eventSourceData = {\n    cronjobsource: {\n      data: '',\n      schedule: '',\n    },\n    pingsource: {\n      data: '',\n      schedule: '',\n    },\n    sinkbinding: {\n      subject: {\n        apiVersion: '',\n        kind: '',\n        selector: {\n          matchLabels: {},\n        },\n      },\n    },\n    apiserversource: {\n      mode: 'Ref',\n      serviceAccountName: '',\n      resources: [\n        {\n          apiVersion: '',\n          kind: '',\n        },\n      ],\n    },\n    kafkasource: {\n      bootstrapServers: [''],\n      topics: [''],\n      consumerGroup: '',\n      net: {\n        sasl: {\n          enable: false,\n          user: { secretKeyRef: { name: '', key: '' } },\n          password: { secretKeyRef: { name: '', key: '' } },\n        },\n        tls: {\n          enable: false,\n          caCert: { secretKeyRef: { name: '', key: '' } },\n          cert: { secretKeyRef: { name: '', key: '' } },\n          key: { secretKeyRef: { name: '', key: '' } },\n        },\n      },\n      serviceAccountName: '',\n    },\n    containersource: {\n      template: {\n        spec: {\n          containers: [\n            {\n              image: '',\n              name: '',\n              args: [''],\n              env: [],\n            },\n          ],\n        },\n      },\n    },\n  };\n  return eventSourceData[source];\n};\n\nexport const useEventSourceList = (namespace: string): EventSourceListData | null => {\n  const [accessData, setAccessData] = useSafetyFirst({ loaded: false, eventSourceList: {} });\n  const { eventSourceModels, loaded: modelLoaded } = useEventSourceModels();\n  React.useEffect(() => {\n    const accessList = [];\n    if (modelLoaded) {\n      eventSourceModels.map((model) => {\n        const { apiGroup, plural, kind } = model;\n        const modelData = {\n          [model.kind]: {\n            name: kind,\n            iconUrl: getKnativeEventSourceIcon(kind),\n            displayName: kind,\n            title: kind,\n          },\n        };\n        return accessList.push(\n          checkAccess({\n            group: apiGroup,\n            resource: plural,\n            namespace,\n            verb: 'create',\n          }).then((result) => (result.status.allowed ? modelData : {})),\n        );\n      });\n      Promise.all(accessList)\n        .then((results) => {\n          const eventSourceList = results.reduce((acc, result) => {\n            return { ...acc, ...result };\n          }, {});\n          setAccessData({ loaded: true, eventSourceList });\n        })\n        // eslint-disable-next-line no-console\n        .catch((err) => console.warn(err.message));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [modelLoaded]);\n  return eventSourceModels.length === 0 && modelLoaded ? null : accessData;\n};\n"]}]}