{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/tolerations-modal/tolerations-modal.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/tolerations-modal/tolerations-modal.tsx","mtime":1616735742420},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport { ModalTitle, ModalBody } from '@console/internal/components/factory';\nimport { Button, ButtonVariant, Text, TextVariants } from '@patternfly/react-core';\nimport { withHandlePromise, ExternalLink, } from '@console/internal/components/utils';\nimport { k8sPatch } from '@console/internal/module/k8s';\nimport { NodeModel } from '@console/internal/models';\nimport { isLoaded, getLoadedData, getLoadError } from '../../../../utils';\nimport { ModalFooter } from '../../modal/modal-footer';\nimport { getVMLikeTolerations } from '../../../../selectors/vm-like/selectors';\nimport { getVMLikeModel } from '../../../../selectors/vm';\nimport { NodeChecker } from '../shared/NodeChecker/node-checker';\nimport { useNodeQualifier } from '../shared/hooks';\nimport { getTolerationsPatch } from '../../../../k8s/patches/vm/vm-scheduling-patches';\nimport { LabelsList } from '../../../LabelsList/labels-list';\nimport { TOLERATIONS_MODAL_TITLE, TOLERATIONS_EFFECTS, SCHEDULING_NO_NODES_TAINTED_MATCH_TEXT, SCHEDULING_NO_NODES_TAINTED_MATCH_BUTTON_TEXT, } from '../shared/consts';\nimport { useIDEntities } from '../../../../hooks/use-id-entities';\nimport { useCollisionChecker } from '../../../../hooks/use-collision-checker';\nimport { TolerationRow } from './toleration-row';\nimport { TolerationHeader } from './toleration-header';\nimport '../shared/scheduling-modals.scss';\nexport const TModal = withHandlePromise(({ nodes, close, handlePromise, inProgress, errorMessage, vmLikeEntity, vmLikeEntityLoading, }) => {\n    var _a;\n    const vmLikeFinal = getLoadedData(vmLikeEntityLoading, vmLikeEntity);\n    const loadError = getLoadError(nodes, NodeModel);\n    const [tolerationsLabels, setTolerationsLabels, onLabelAdd, onLabelChange, onLabelDelete,] = useIDEntities((_a = getVMLikeTolerations(vmLikeEntity)) === null || _a === void 0 ? void 0 : _a.map((toleration, id) => (Object.assign(Object.assign({}, toleration), { id }))));\n    const qualifiedNodes = useNodeQualifier(nodes, 'taint', tolerationsLabels);\n    const [showCollisionAlert, reload] = useCollisionChecker(vmLikeFinal, (oldVM, newVM) => _.isEqual(getVMLikeTolerations(oldVM), getVMLikeTolerations(newVM)));\n    const onTolerationAdd = () => onLabelAdd({\n        id: null,\n        key: '',\n        value: '',\n        effect: TOLERATIONS_EFFECTS[0],\n    });\n    const onReload = () => {\n        var _a;\n        reload();\n        setTolerationsLabels(((_a = getVMLikeTolerations(vmLikeFinal)) === null || _a === void 0 ? void 0 : _a.map((toleration, id) => (Object.assign(Object.assign({}, toleration), { id })))) || []);\n    };\n    const onSubmit = () => __awaiter(void 0, void 0, void 0, function* () {\n        const k8sTolerations = tolerationsLabels.filter(({ key }) => !!key);\n        if (!_.isEqual(getVMLikeTolerations(vmLikeFinal), k8sTolerations)) {\n            // eslint-disable-next-line promise/catch-or-return\n            handlePromise(k8sPatch(getVMLikeModel(vmLikeFinal), vmLikeFinal, yield getTolerationsPatch(vmLikeFinal, k8sTolerations))).then(close);\n        }\n        else {\n            close();\n        }\n    });\n    return (React.createElement(\"div\", { className: \"modal-content\" },\n        React.createElement(ModalTitle, null, TOLERATIONS_MODAL_TITLE),\n        React.createElement(ModalBody, null,\n            React.createElement(\"div\", { className: \"scheduling-modals__desc-container\" },\n                React.createElement(Text, { className: \"scheduling-modals__desc\", component: TextVariants.small }, 'Tolerations are applied to VMs, and allow (but do not require) the VMs to schedule onto nodes with matching taints.'),\n                React.createElement(Text, { className: \"scheduling-modals__desc\", component: TextVariants.small }, 'Add tolerations to allow a VM to schedule onto nodes with matching taints.'),\n                React.createElement(ExternalLink, { text: \"Taints and Tolerations documentation\", href: 'https://kubevirt.io/user-guide/#/usage/node-placement?id=taints-and-tolerations' })),\n            React.createElement(LabelsList, { isEmpty: tolerationsLabels.length === 0, kind: \"Node\", onLabelAdd: onTolerationAdd, addRowText: \"Add Toleration\", emptyStateAddRowText: \"Add Toleration to specify qualifying nodes\" }, tolerationsLabels.length > 0 && (React.createElement(React.Fragment, null,\n                React.createElement(TolerationHeader, { key: \"label-title-row\" }),\n                tolerationsLabels.map((label) => (React.createElement(TolerationRow, { key: label.id, label: label, onChange: onLabelChange, onDelete: onLabelDelete })))))),\n            tolerationsLabels.length > 0 && isLoaded(nodes) && !inProgress && !loadError && (React.createElement(NodeChecker, { qualifiedNodes: qualifiedNodes, wariningTitle: SCHEDULING_NO_NODES_TAINTED_MATCH_TEXT, warningMessage: SCHEDULING_NO_NODES_TAINTED_MATCH_BUTTON_TEXT }))),\n        React.createElement(ModalFooter, { id: \"tolerations\", errorMessage: errorMessage, inProgress: !isLoaded(nodes) || inProgress, isSimpleError: !!loadError, onSubmit: onSubmit, onCancel: close, submitButtonText: \"Save\", infoTitle: showCollisionAlert && 'Tolerations has been updated outside this flow.', infoMessage: React.createElement(React.Fragment, null,\n                \"Saving these changes will override any Tolerations previously saved.\",\n                React.createElement(\"br\", null),\n                React.createElement(Button, { variant: ButtonVariant.link, isInline: true, onClick: onReload }, \"Reload Tolerations\"),\n                \".\") })));\n});\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/tolerations-modal/tolerations-modal.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/tolerations-modal/tolerations-modal.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { ModalTitle, ModalBody, ModalComponentProps } from '@console/internal/components/factory';\nimport { Button, ButtonVariant, Text, TextVariants } from '@patternfly/react-core';\nimport {\n  FirehoseResult,\n  withHandlePromise,\n  HandlePromiseProps,\n  ExternalLink,\n} from '@console/internal/components/utils';\nimport { k8sPatch, NodeKind } from '@console/internal/module/k8s';\nimport { NodeModel } from '@console/internal/models';\nimport { isLoaded, getLoadedData, getLoadError } from '../../../../utils';\nimport { ModalFooter } from '../../modal/modal-footer';\nimport { VMLikeEntityKind } from '../../../../types/vmLike';\nimport { getVMLikeTolerations } from '../../../../selectors/vm-like/selectors';\nimport { getVMLikeModel } from '../../../../selectors/vm';\nimport { NodeChecker } from '../shared/NodeChecker/node-checker';\nimport { useNodeQualifier } from '../shared/hooks';\nimport { getTolerationsPatch } from '../../../../k8s/patches/vm/vm-scheduling-patches';\nimport { LabelsList } from '../../../LabelsList/labels-list';\nimport {\n  TOLERATIONS_MODAL_TITLE,\n  TOLERATIONS_EFFECTS,\n  SCHEDULING_NO_NODES_TAINTED_MATCH_TEXT,\n  SCHEDULING_NO_NODES_TAINTED_MATCH_BUTTON_TEXT,\n} from '../shared/consts';\nimport { useIDEntities } from '../../../../hooks/use-id-entities';\nimport { useCollisionChecker } from '../../../../hooks/use-collision-checker';\n\nimport { TolerationRow } from './toleration-row';\nimport { TolerationHeader } from './toleration-header';\nimport { TolerationLabel } from './types';\n\nimport '../shared/scheduling-modals.scss';\n\nexport const TModal = withHandlePromise(\n  ({\n    nodes,\n    close,\n    handlePromise,\n    inProgress,\n    errorMessage,\n    vmLikeEntity,\n    vmLikeEntityLoading,\n  }: TModalProps) => {\n    const vmLikeFinal = getLoadedData(vmLikeEntityLoading, vmLikeEntity);\n    const loadError = getLoadError(nodes, NodeModel);\n\n    const [\n      tolerationsLabels,\n      setTolerationsLabels,\n      onLabelAdd,\n      onLabelChange,\n      onLabelDelete,\n    ] = useIDEntities<TolerationLabel>(\n      getVMLikeTolerations(vmLikeEntity)?.map((toleration, id) => ({ ...toleration, id })),\n    );\n\n    const qualifiedNodes = useNodeQualifier(nodes, 'taint', tolerationsLabels);\n\n    const [showCollisionAlert, reload] = useCollisionChecker<VMLikeEntityKind>(\n      vmLikeFinal,\n      (oldVM: VMLikeEntityKind, newVM: VMLikeEntityKind) =>\n        _.isEqual(getVMLikeTolerations(oldVM), getVMLikeTolerations(newVM)),\n    );\n\n    const onTolerationAdd = () =>\n      onLabelAdd({\n        id: null,\n        key: '',\n        value: '',\n        effect: TOLERATIONS_EFFECTS[0],\n      } as TolerationLabel);\n\n    const onReload = () => {\n      reload();\n      setTolerationsLabels(\n        getVMLikeTolerations(vmLikeFinal)?.map((toleration, id) => ({\n          ...toleration,\n          id,\n        })) || [],\n      );\n    };\n\n    const onSubmit = async () => {\n      const k8sTolerations = tolerationsLabels.filter(({ key }) => !!key);\n\n      if (!_.isEqual(getVMLikeTolerations(vmLikeFinal), k8sTolerations)) {\n        // eslint-disable-next-line promise/catch-or-return\n        handlePromise(\n          k8sPatch(\n            getVMLikeModel(vmLikeFinal),\n            vmLikeFinal,\n            await getTolerationsPatch(vmLikeFinal, k8sTolerations),\n          ),\n        ).then(close);\n      } else {\n        close();\n      }\n    };\n\n    return (\n      <div className=\"modal-content\">\n        <ModalTitle>{TOLERATIONS_MODAL_TITLE}</ModalTitle>\n        <ModalBody>\n          <div className=\"scheduling-modals__desc-container\">\n            <Text className=\"scheduling-modals__desc\" component={TextVariants.small}>\n              {\n                'Tolerations are applied to VMs, and allow (but do not require) the VMs to schedule onto nodes with matching taints.'\n              }\n            </Text>\n            <Text className=\"scheduling-modals__desc\" component={TextVariants.small}>\n              {'Add tolerations to allow a VM to schedule onto nodes with matching taints.'}\n            </Text>\n            <ExternalLink\n              text=\"Taints and Tolerations documentation\"\n              href={\n                'https://kubevirt.io/user-guide/#/usage/node-placement?id=taints-and-tolerations'\n              }\n            />\n          </div>\n          <LabelsList\n            isEmpty={tolerationsLabels.length === 0}\n            kind=\"Node\"\n            onLabelAdd={onTolerationAdd}\n            addRowText=\"Add Toleration\"\n            emptyStateAddRowText=\"Add Toleration to specify qualifying nodes\"\n          >\n            {tolerationsLabels.length > 0 && (\n              <>\n                <TolerationHeader key=\"label-title-row\" />\n                {tolerationsLabels.map((label) => (\n                  <TolerationRow\n                    key={label.id}\n                    label={label}\n                    onChange={onLabelChange}\n                    onDelete={onLabelDelete}\n                  />\n                ))}\n              </>\n            )}\n          </LabelsList>\n          {tolerationsLabels.length > 0 && isLoaded(nodes) && !inProgress && !loadError && (\n            <NodeChecker\n              qualifiedNodes={qualifiedNodes}\n              wariningTitle={SCHEDULING_NO_NODES_TAINTED_MATCH_TEXT}\n              warningMessage={SCHEDULING_NO_NODES_TAINTED_MATCH_BUTTON_TEXT}\n            />\n          )}\n        </ModalBody>\n        <ModalFooter\n          id=\"tolerations\"\n          errorMessage={errorMessage}\n          inProgress={!isLoaded(nodes) || inProgress}\n          isSimpleError={!!loadError}\n          onSubmit={onSubmit}\n          onCancel={close}\n          submitButtonText=\"Save\"\n          infoTitle={showCollisionAlert && 'Tolerations has been updated outside this flow.'}\n          infoMessage={\n            <>\n              Saving these changes will override any Tolerations previously saved.\n              <br />\n              <Button variant={ButtonVariant.link} isInline onClick={onReload}>\n                Reload Tolerations\n              </Button>\n              .\n            </>\n          }\n        />\n      </div>\n    );\n  },\n);\n\ntype TModalProps = HandlePromiseProps &\n  ModalComponentProps & {\n    vmLikeEntity: VMLikeEntityKind;\n    nodes?: FirehoseResult<NodeKind[]>;\n    inProgress: boolean;\n    vmLikeEntityLoading?: FirehoseResult<VMLikeEntityKind>;\n    errorMessage: string;\n  };\n"]}]}