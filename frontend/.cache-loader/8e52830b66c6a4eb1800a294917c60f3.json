{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-builder/task-sidebar/TaskSidebarParam.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-builder/task-sidebar/TaskSidebarParam.tsx","mtime":1616735742390},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { FormGroup } from '@patternfly/react-core';\nimport { taskParamIsRequired } from '../utils';\nimport { ArrayParam, SidebarInputWrapper, StringParam } from './temp-utils';\nconst TaskSidebarParam = (props) => {\n    const { hasParamError, onChange, resourceParam, taskParam } = props;\n    const [dirty, setDirty] = React.useState(false);\n    const currentValue = taskParam === null || taskParam === void 0 ? void 0 : taskParam.value;\n    const emptyIsInvalid = taskParamIsRequired(resourceParam);\n    const isValid = !(dirty && hasParamError && emptyIsInvalid && currentValue != null);\n    const paramRenderProps = {\n        currentValue,\n        defaultValue: resourceParam.default,\n        isValid,\n        name: resourceParam.name,\n        onChange,\n        setDirty,\n    };\n    return (React.createElement(FormGroup, { fieldId: resourceParam.name, label: resourceParam.name, helperText: resourceParam.type === 'string' ? resourceParam.description : null, helperTextInvalid: \"Required\", isValid: isValid, isRequired: emptyIsInvalid }, resourceParam.type === 'array' ? (React.createElement(ArrayParam, Object.assign({}, paramRenderProps, { description: resourceParam.description }))) : (React.createElement(SidebarInputWrapper, null,\n        React.createElement(StringParam, Object.assign({}, paramRenderProps))))));\n};\nexport default TaskSidebarParam;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-builder/task-sidebar/TaskSidebarParam.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-builder/task-sidebar/TaskSidebarParam.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,SAAS,EAAE,MAAM,wBAAwB,CAAC;AAEnD,OAAO,EAAE,mBAAmB,EAAE,MAAM,UAAU,CAAC;AAC/C,OAAO,EAAE,UAAU,EAAkB,mBAAmB,EAAE,WAAW,EAAE,MAAM,cAAc,CAAC;AAS5F,MAAM,gBAAgB,GAAoC,CAAC,KAAK,EAAE,EAAE;IAClE,MAAM,EAAE,aAAa,EAAE,QAAQ,EAAE,aAAa,EAAE,SAAS,EAAE,GAAG,KAAK,CAAC;IACpE,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAEhD,MAAM,YAAY,GAAG,SAAS,aAAT,SAAS,uBAAT,SAAS,CAAE,KAAK,CAAC;IACtC,MAAM,cAAc,GAAG,mBAAmB,CAAC,aAAa,CAAC,CAAC;IAE1D,MAAM,OAAO,GAAG,CAAC,CAAC,KAAK,IAAI,aAAa,IAAI,cAAc,IAAI,YAAY,IAAI,IAAI,CAAC,CAAC;IAEpF,MAAM,gBAAgB,GAAmB;QACvC,YAAY;QACZ,YAAY,EAAE,aAAa,CAAC,OAAO;QACnC,OAAO;QACP,IAAI,EAAE,aAAa,CAAC,IAAI;QACxB,QAAQ;QACR,QAAQ;KACT,CAAC;IAEF,OAAO,CACL,oBAAC,SAAS,IACR,OAAO,EAAE,aAAa,CAAC,IAAI,EAC3B,KAAK,EAAE,aAAa,CAAC,IAAI,EACzB,UAAU,EAAE,aAAa,CAAC,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,aAAa,CAAC,WAAW,CAAC,CAAC,CAAC,IAAI,EAC9E,iBAAiB,EAAC,UAAU,EAC5B,OAAO,EAAE,OAAO,EAChB,UAAU,EAAE,cAAc,IAEzB,aAAa,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC,CAChC,oBAAC,UAAU,oBAAK,gBAAgB,IAAE,WAAW,EAAE,aAAa,CAAC,WAAW,IAAI,CAC7E,CAAC,CAAC,CAAC,CACF,oBAAC,mBAAmB;QAClB,oBAAC,WAAW,oBAAK,gBAAgB,EAAI,CACjB,CACvB,CACS,CACb,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,gBAAgB,CAAC","sourcesContent":["import * as React from 'react';\nimport { FormGroup } from '@patternfly/react-core';\nimport { PipelineResourceTaskParam, PipelineTaskParam } from '../../../../utils/pipeline-augment';\nimport { taskParamIsRequired } from '../utils';\nimport { ArrayParam, ParameterProps, SidebarInputWrapper, StringParam } from './temp-utils';\n\ntype TaskSidebarParamProps = {\n  hasParamError?: boolean;\n  resourceParam: PipelineResourceTaskParam;\n  taskParam?: PipelineTaskParam;\n  onChange: (newValue: string) => void;\n};\n\nconst TaskSidebarParam: React.FC<TaskSidebarParamProps> = (props) => {\n  const { hasParamError, onChange, resourceParam, taskParam } = props;\n  const [dirty, setDirty] = React.useState(false);\n\n  const currentValue = taskParam?.value;\n  const emptyIsInvalid = taskParamIsRequired(resourceParam);\n\n  const isValid = !(dirty && hasParamError && emptyIsInvalid && currentValue != null);\n\n  const paramRenderProps: ParameterProps = {\n    currentValue,\n    defaultValue: resourceParam.default,\n    isValid,\n    name: resourceParam.name,\n    onChange,\n    setDirty,\n  };\n\n  return (\n    <FormGroup\n      fieldId={resourceParam.name}\n      label={resourceParam.name}\n      helperText={resourceParam.type === 'string' ? resourceParam.description : null}\n      helperTextInvalid=\"Required\"\n      isValid={isValid}\n      isRequired={emptyIsInvalid}\n    >\n      {resourceParam.type === 'array' ? (\n        <ArrayParam {...paramRenderProps} description={resourceParam.description} />\n      ) : (\n        <SidebarInputWrapper>\n          <StringParam {...paramRenderProps} />\n        </SidebarInputWrapper>\n      )}\n    </FormGroup>\n  );\n};\n\nexport default TaskSidebarParam;\n"]}]}