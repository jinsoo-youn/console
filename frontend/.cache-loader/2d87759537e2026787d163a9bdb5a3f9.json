{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/service/rdp/index.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/service/rdp/index.ts","mtime":1615298458670},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["/* eslint-disable no-console */\nimport * as _ from 'lodash';\nimport { DEFAULT_RDP_PORT } from '../../../constants/vm';\nimport { getServicePort } from '../selectors';\nexport const getRdpAddressPort = (rdpService, launcherPod) => {\n    const rdpPortObj = getServicePort(rdpService, DEFAULT_RDP_PORT);\n    if (!rdpPortObj) {\n        return null;\n    }\n    let port = _.get(rdpPortObj, 'port');\n    let address;\n    switch (_.get(rdpService, 'spec.type')) {\n        case 'LoadBalancer':\n            address = _.get(rdpService, 'spec.externalIPs[0]');\n            if (!address) {\n                console.warn('External IP is not defined for the LoadBalancer RDP Service: ', rdpService);\n            }\n            break;\n        case 'ClusterIP':\n            address = _.get(rdpService, 'spec.clusterIP');\n            if (!address) {\n                console.warn('Cluster IP is not defined for the ClusterIP RDP Service: ', rdpService);\n            }\n            break;\n        case 'NodePort':\n            port = _.get(rdpPortObj, 'nodePort');\n            if (launcherPod) {\n                address = _.get(launcherPod, 'status.hostIP');\n            }\n            if (!address) {\n                console.warn('Node IP (launcherpod.status.hostIP) is not yet known for NodePort RDP Service: ', rdpService);\n            }\n            break;\n        default:\n            console.error('Unrecognized Service type: ', rdpService);\n    }\n    if (!address || !port) {\n        return null;\n    }\n    console.log('RDP requested for: ', address, port);\n    return {\n        address,\n        port,\n    };\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/service/rdp/index.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/service/rdp/index.ts"],"names":[],"mappings":"AAAA,+BAA+B;AAC/B,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAE5B,OAAO,EAAE,gBAAgB,EAAE,MAAM,uBAAuB,CAAC;AACzD,OAAO,EAAE,cAAc,EAAE,MAAM,cAAc,CAAC;AAE9C,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,UAA2B,EAAE,WAAoB,EAAE,EAAE;IACrF,MAAM,UAAU,GAAG,cAAc,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC;IAChE,IAAI,CAAC,UAAU,EAAE;QACf,OAAO,IAAI,CAAC;KACb;IAED,IAAI,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;IACrC,IAAI,OAAO,CAAC;IACZ,QAAQ,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,WAAW,CAAC,EAAE;QACtC,KAAK,cAAc;YACjB,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,qBAAqB,CAAC,CAAC;YACnD,IAAI,CAAC,OAAO,EAAE;gBACZ,OAAO,CAAC,IAAI,CAAC,+DAA+D,EAAE,UAAU,CAAC,CAAC;aAC3F;YACD,MAAM;QACR,KAAK,WAAW;YACd,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,gBAAgB,CAAC,CAAC;YAC9C,IAAI,CAAC,OAAO,EAAE;gBACZ,OAAO,CAAC,IAAI,CAAC,2DAA2D,EAAE,UAAU,CAAC,CAAC;aACvF;YACD,MAAM;QACR,KAAK,UAAU;YACb,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,UAAU,EAAE,UAAU,CAAC,CAAC;YACrC,IAAI,WAAW,EAAE;gBACf,OAAO,GAAG,CAAC,CAAC,GAAG,CAAC,WAAW,EAAE,eAAe,CAAC,CAAC;aAC/C;YACD,IAAI,CAAC,OAAO,EAAE;gBACZ,OAAO,CAAC,IAAI,CACV,iFAAiF,EACjF,UAAU,CACX,CAAC;aACH;YACD,MAAM;QACR;YACE,OAAO,CAAC,KAAK,CAAC,6BAA6B,EAAE,UAAU,CAAC,CAAC;KAC5D;IAED,IAAI,CAAC,OAAO,IAAI,CAAC,IAAI,EAAE;QACrB,OAAO,IAAI,CAAC;KACb;IAED,OAAO,CAAC,GAAG,CAAC,qBAAqB,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;IAClD,OAAO;QACL,OAAO;QACP,IAAI;KACL,CAAC;AACJ,CAAC,CAAC","sourcesContent":["/* eslint-disable no-console */\nimport * as _ from 'lodash';\nimport { K8sResourceKind, PodKind } from '@console/internal/module/k8s';\nimport { DEFAULT_RDP_PORT } from '../../../constants/vm';\nimport { getServicePort } from '../selectors';\n\nexport const getRdpAddressPort = (rdpService: K8sResourceKind, launcherPod: PodKind) => {\n  const rdpPortObj = getServicePort(rdpService, DEFAULT_RDP_PORT);\n  if (!rdpPortObj) {\n    return null;\n  }\n\n  let port = _.get(rdpPortObj, 'port');\n  let address;\n  switch (_.get(rdpService, 'spec.type')) {\n    case 'LoadBalancer':\n      address = _.get(rdpService, 'spec.externalIPs[0]');\n      if (!address) {\n        console.warn('External IP is not defined for the LoadBalancer RDP Service: ', rdpService);\n      }\n      break;\n    case 'ClusterIP':\n      address = _.get(rdpService, 'spec.clusterIP');\n      if (!address) {\n        console.warn('Cluster IP is not defined for the ClusterIP RDP Service: ', rdpService);\n      }\n      break;\n    case 'NodePort':\n      port = _.get(rdpPortObj, 'nodePort');\n      if (launcherPod) {\n        address = _.get(launcherPod, 'status.hostIP');\n      }\n      if (!address) {\n        console.warn(\n          'Node IP (launcherpod.status.hostIP) is not yet known for NodePort RDP Service: ',\n          rdpService,\n        );\n      }\n      break;\n    default:\n      console.error('Unrecognized Service type: ', rdpService);\n  }\n\n  if (!address || !port) {\n    return null;\n  }\n\n  console.log('RDP requested for: ', address, port);\n  return {\n    address,\n    port,\n  };\n};\n"]}]}