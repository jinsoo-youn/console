{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/vm-flavor-modal/vm-flavor-modal.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/vm-flavor-modal/vm-flavor-modal.tsx","mtime":1616735742420},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Form, FormSelect, FormSelectOption } from '@patternfly/react-core';\nimport { Firehose, withHandlePromise, } from '@console/internal/components/utils';\nimport { TemplateModel } from '@console/internal/models';\nimport { createModalLauncher, ModalBody, ModalTitle, } from '@console/internal/components/factory';\nimport { k8sPatch } from '@console/internal/module/k8s';\nimport { asVM, getCPU, getFlavor, getMemory, getVMLikeModel, vCPUCount, } from '../../../selectors/vm';\nimport { getUpdateFlavorPatches } from '../../../k8s/patches/vm/vm-patches';\nimport { CUSTOM_FLAVOR } from '../../../constants';\nimport { getLoadedData } from '../../../utils';\nimport { SizeUnitFormRow } from '../../form/size-unit-form-row';\nimport { BinaryUnit, stringValueUnitSplit } from '../../form/size-unit-utils';\nimport { ModalFooter } from '../modal/modal-footer';\nimport { FormRow } from '../../form/form-row';\nimport { Integer } from '../../form/integer/integer';\nimport { validateFlavor } from '../../../utils/validations/vm/flavor';\nimport { isValidationError } from '../../../utils/validations/common';\nimport { useShowErrorToggler } from '../../../hooks/use-show-error-toggler';\nimport { getDialogUIError } from '../../../utils/strings';\nimport { flavorSort } from '../../../utils/sort';\nimport { getTemplateFlavors } from '../../../selectors/vm-template/advanced';\nimport { getVMTemplateNamespacedName } from '../../../selectors/vm-template/selectors';\nimport { toUIFlavor, isCustomFlavor } from '../../../selectors/vm-like/flavor';\nconst getId = (field) => `vm-flavor-modal-${field}`;\nconst getAvailableFlavors = (template) => {\n    const flavors = getTemplateFlavors([template]).filter((f) => f && !isCustomFlavor(f));\n    flavors.push(CUSTOM_FLAVOR);\n    return _.uniq(flavorSort(flavors));\n};\nconst VMFlavorModal = withHandlePromise((props) => {\n    const { vmLike, template, errorMessage, handlePromise, close, cancel, loadError, loaded } = props;\n    const inProgress = props.inProgress || !loaded;\n    const vm = asVM(vmLike);\n    const underlyingTemplate = getLoadedData(template);\n    const flavors = getAvailableFlavors(underlyingTemplate);\n    const vmFlavor = toUIFlavor(getFlavor(vmLike) || flavors[flavors.length - 1]);\n    const [sourceMemSize, sourceMemUnit] = stringValueUnitSplit(getMemory(vm) || '');\n    const sourceCPURaw = getCPU(vm);\n    const sourceCPU = vCPUCount(sourceCPURaw);\n    const [flavor, setFlavor] = React.useState(vmFlavor);\n    const isCustom = isCustomFlavor(flavor);\n    const [memSize, setMemSize] = React.useState(isCustom ? sourceMemSize || '' : '');\n    const [memUnit, setMemUnit] = React.useState(isCustom ? sourceMemUnit || BinaryUnit.Gi : BinaryUnit.Gi);\n    const [cpus, setCpus] = React.useState(isCustom ? `${sourceCPU}` : '');\n    const { validations: { cpus: cpusValidation, memory: memoryValidation }, hasAllRequiredFilled, isValid, } = validateFlavor({ cpus, memory: { size: memSize, unit: memUnit } }, { isCustomFlavor: isCustom });\n    const [showUIError, setShowUIError] = useShowErrorToggler(false, isValid, isValid);\n    const submit = (e) => {\n        e.preventDefault();\n        if (isValid) {\n            const patches = getUpdateFlavorPatches(vmLike, underlyingTemplate, flavor, parseInt(cpus, 10), `${memSize}${memUnit}`);\n            if (patches.length > 0) {\n                const promise = k8sPatch(getVMLikeModel(vmLike), vmLike, patches);\n                handlePromise(promise).then(close); // eslint-disable-line promise/catch-or-return\n            }\n            else {\n                close();\n            }\n        }\n        else {\n            setShowUIError(true);\n        }\n    };\n    return (React.createElement(\"div\", { className: \"modal-content\" },\n        React.createElement(ModalTitle, null, \"Edit Flavor\"),\n        React.createElement(ModalBody, null,\n            React.createElement(Form, null,\n                React.createElement(FormRow, { title: \"Flavor\", fieldId: getId('flavor'), isRequired: true },\n                    React.createElement(FormSelect, { onChange: (f) => {\n                            if (isCustomFlavor(f)) {\n                                const isSourceCustom = isCustomFlavor(vmFlavor);\n                                setMemSize(isSourceCustom ? sourceMemSize || '' : '');\n                                setMemUnit(isSourceCustom ? sourceMemUnit || BinaryUnit.Gi : BinaryUnit.Gi);\n                                setCpus(isSourceCustom ? `${sourceCPU}` : '');\n                            }\n                            setFlavor(f);\n                        }, value: flavor, id: getId('flavor'), isDisabled: inProgress }, flavors.map((f) => (React.createElement(FormSelectOption, { key: f, value: f, label: _.capitalize(f) }))))),\n                isCustom && (React.createElement(React.Fragment, null,\n                    React.createElement(FormRow, { key: \"cpu\", title: \"CPUs\", fieldId: getId('cpu'), isRequired: true, validation: cpusValidation },\n                        React.createElement(Integer, { isValid: !isValidationError(cpusValidation), isDisabled: inProgress, id: getId('cpu'), value: cpus, isPositive: true, onChange: (v) => setCpus(v), isFullWidth: true, \"aria-label\": \"CPU count\" })),\n                    React.createElement(SizeUnitFormRow, { title: \"Memory\", key: \"memory\", id: getId('memory'), size: memSize, unit: memUnit, units: [BinaryUnit.Mi, BinaryUnit.Gi, BinaryUnit.Ti], validation: memoryValidation, isDisabled: inProgress, isRequired: true, onSizeChanged: setMemSize, onUnitChanged: setMemUnit }))))),\n        React.createElement(ModalFooter, { id: \"vm-flavor-modal\", errorMessage: errorMessage || (loadError === null || loadError === void 0 ? void 0 : loadError.message) ||\n                (showUIError ? getDialogUIError(hasAllRequiredFilled) : null), isSimpleError: showUIError, isDisabled: inProgress, inProgress: inProgress, onSubmit: submit, submitButtonText: \"Save\", onCancel: (e) => {\n                e.stopPropagation();\n                cancel();\n            } })));\n});\nconst VMFlavorModalFirehose = (props) => {\n    const { vmLike } = props;\n    const resources = [];\n    const underlyingTemplate = getVMTemplateNamespacedName(vmLike);\n    if (underlyingTemplate) {\n        resources.push({\n            kind: TemplateModel.kind,\n            model: TemplateModel,\n            name: underlyingTemplate.name,\n            namespace: underlyingTemplate.namespace,\n            isList: false,\n            prop: 'template',\n        });\n    }\n    return (React.createElement(Firehose, { resources: resources },\n        React.createElement(VMFlavorModal, Object.assign({}, props))));\n};\nexport const vmFlavorModal = createModalLauncher(VMFlavorModalFirehose);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/vm-flavor-modal/vm-flavor-modal.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/vm-flavor-modal/vm-flavor-modal.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Form, FormSelect, FormSelectOption } from '@patternfly/react-core';\nimport {\n  Firehose,\n  FirehoseResult,\n  HandlePromiseProps,\n  withHandlePromise,\n} from '@console/internal/components/utils';\nimport { TemplateModel } from '@console/internal/models';\nimport {\n  createModalLauncher,\n  ModalBody,\n  ModalComponentProps,\n  ModalTitle,\n} from '@console/internal/components/factory';\nimport { k8sPatch, TemplateKind } from '@console/internal/module/k8s';\nimport { VMLikeEntityKind } from '../../../types/vmLike';\nimport {\n  asVM,\n  getCPU,\n  getFlavor,\n  getMemory,\n  getVMLikeModel,\n  vCPUCount,\n} from '../../../selectors/vm';\nimport { getUpdateFlavorPatches } from '../../../k8s/patches/vm/vm-patches';\nimport { CUSTOM_FLAVOR } from '../../../constants';\nimport { getLoadedData } from '../../../utils';\nimport { SizeUnitFormRow } from '../../form/size-unit-form-row';\nimport { BinaryUnit, stringValueUnitSplit } from '../../form/size-unit-utils';\nimport { ModalFooter } from '../modal/modal-footer';\nimport { FormRow } from '../../form/form-row';\nimport { Integer } from '../../form/integer/integer';\nimport { validateFlavor } from '../../../utils/validations/vm/flavor';\nimport { isValidationError } from '../../../utils/validations/common';\nimport { useShowErrorToggler } from '../../../hooks/use-show-error-toggler';\nimport { getDialogUIError } from '../../../utils/strings';\nimport { flavorSort } from '../../../utils/sort';\nimport { getTemplateFlavors } from '../../../selectors/vm-template/advanced';\nimport { getVMTemplateNamespacedName } from '../../../selectors/vm-template/selectors';\nimport { toUIFlavor, isCustomFlavor } from '../../../selectors/vm-like/flavor';\n\nconst getId = (field: string) => `vm-flavor-modal-${field}`;\n\nconst getAvailableFlavors = (template: TemplateKind) => {\n  const flavors = getTemplateFlavors([template]).filter((f) => f && !isCustomFlavor(f));\n  flavors.push(CUSTOM_FLAVOR);\n\n  return _.uniq(flavorSort(flavors));\n};\n\nconst VMFlavorModal = withHandlePromise((props: VMFlavornModalProps) => {\n  const { vmLike, template, errorMessage, handlePromise, close, cancel, loadError, loaded } = props;\n  const inProgress = props.inProgress || !loaded;\n  const vm = asVM(vmLike);\n  const underlyingTemplate = getLoadedData(template);\n\n  const flavors = getAvailableFlavors(underlyingTemplate);\n  const vmFlavor = toUIFlavor(getFlavor(vmLike) || flavors[flavors.length - 1]);\n\n  const [sourceMemSize, sourceMemUnit] = stringValueUnitSplit(getMemory(vm) || '');\n  const sourceCPURaw = getCPU(vm);\n  const sourceCPU = vCPUCount(sourceCPURaw);\n\n  const [flavor, setFlavor] = React.useState(vmFlavor);\n  const isCustom = isCustomFlavor(flavor);\n\n  const [memSize, setMemSize] = React.useState<string>(isCustom ? sourceMemSize || '' : '');\n  const [memUnit, setMemUnit] = React.useState<string>(\n    isCustom ? sourceMemUnit || BinaryUnit.Gi : BinaryUnit.Gi,\n  );\n  const [cpus, setCpus] = React.useState<string>(isCustom ? `${sourceCPU}` : '');\n\n  const {\n    validations: { cpus: cpusValidation, memory: memoryValidation },\n    hasAllRequiredFilled,\n    isValid,\n  } = validateFlavor(\n    { cpus, memory: { size: memSize, unit: memUnit } },\n    { isCustomFlavor: isCustom },\n  );\n\n  const [showUIError, setShowUIError] = useShowErrorToggler(false, isValid, isValid);\n\n  const submit = (e) => {\n    e.preventDefault();\n\n    if (isValid) {\n      const patches = getUpdateFlavorPatches(\n        vmLike,\n        underlyingTemplate,\n        flavor,\n        parseInt(cpus, 10),\n        `${memSize}${memUnit}`,\n      );\n      if (patches.length > 0) {\n        const promise = k8sPatch(getVMLikeModel(vmLike), vmLike, patches);\n        handlePromise(promise).then(close); // eslint-disable-line promise/catch-or-return\n      } else {\n        close();\n      }\n    } else {\n      setShowUIError(true);\n    }\n  };\n\n  return (\n    <div className=\"modal-content\">\n      <ModalTitle>Edit Flavor</ModalTitle>\n      <ModalBody>\n        <Form>\n          <FormRow title=\"Flavor\" fieldId={getId('flavor')} isRequired>\n            <FormSelect\n              onChange={(f) => {\n                if (isCustomFlavor(f)) {\n                  const isSourceCustom = isCustomFlavor(vmFlavor);\n                  setMemSize(isSourceCustom ? sourceMemSize || '' : '');\n                  setMemUnit(isSourceCustom ? sourceMemUnit || BinaryUnit.Gi : BinaryUnit.Gi);\n                  setCpus(isSourceCustom ? `${sourceCPU}` : '');\n                }\n                setFlavor(f);\n              }}\n              value={flavor}\n              id={getId('flavor')}\n              isDisabled={inProgress}\n            >\n              {flavors.map((f) => (\n                <FormSelectOption key={f} value={f} label={_.capitalize(f)} />\n              ))}\n            </FormSelect>\n          </FormRow>\n\n          {isCustom && (\n            <>\n              <FormRow\n                key=\"cpu\"\n                title=\"CPUs\"\n                fieldId={getId('cpu')}\n                isRequired\n                validation={cpusValidation}\n              >\n                <Integer\n                  isValid={!isValidationError(cpusValidation)}\n                  isDisabled={inProgress}\n                  id={getId('cpu')}\n                  value={cpus}\n                  isPositive\n                  onChange={(v) => setCpus(v)}\n                  isFullWidth\n                  aria-label=\"CPU count\"\n                />\n              </FormRow>\n              <SizeUnitFormRow\n                title=\"Memory\"\n                key=\"memory\"\n                id={getId('memory')}\n                size={memSize}\n                unit={memUnit as BinaryUnit}\n                units={[BinaryUnit.Mi, BinaryUnit.Gi, BinaryUnit.Ti]}\n                validation={memoryValidation}\n                isDisabled={inProgress}\n                isRequired\n                onSizeChanged={setMemSize}\n                onUnitChanged={setMemUnit}\n              />\n            </>\n          )}\n        </Form>\n      </ModalBody>\n      <ModalFooter\n        id=\"vm-flavor-modal\"\n        errorMessage={\n          errorMessage ||\n          loadError?.message ||\n          (showUIError ? getDialogUIError(hasAllRequiredFilled) : null)\n        }\n        isSimpleError={showUIError}\n        isDisabled={inProgress}\n        inProgress={inProgress}\n        onSubmit={submit}\n        submitButtonText=\"Save\"\n        onCancel={(e) => {\n          e.stopPropagation();\n          cancel();\n        }}\n      />\n    </div>\n  );\n});\n\nconst VMFlavorModalFirehose = (props) => {\n  const { vmLike } = props;\n  const resources = [];\n  const underlyingTemplate = getVMTemplateNamespacedName(vmLike);\n\n  if (underlyingTemplate) {\n    resources.push({\n      kind: TemplateModel.kind,\n      model: TemplateModel,\n      name: underlyingTemplate.name,\n      namespace: underlyingTemplate.namespace,\n      isList: false,\n      prop: 'template',\n    });\n  }\n  return (\n    <Firehose resources={resources}>\n      <VMFlavorModal {...props} />\n    </Firehose>\n  );\n};\n\nexport type VMFlavornModalProps = HandlePromiseProps &\n  ModalComponentProps & {\n    vmLike: VMLikeEntityKind;\n    template?: FirehoseResult<TemplateKind>;\n    loadError?: any;\n    loaded: boolean;\n  };\n\nexport const vmFlavorModal = createModalLauncher(VMFlavorModalFirehose);\n"]}]}