{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/image-search/ImageStream.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/image-search/ImageStream.tsx","mtime":1616735742380},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Alert, FormGroup, ValidatedOptions } from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { useFormikContext } from 'formik';\nimport { CheckboxField } from '@console/shared';\nimport { RegistryType, BuilderImagesNamespace, getImageStreamTags, } from '../../../utils/imagestream-utils';\nimport { ImageStreamActions } from '../import-types';\nimport { ImageStreamContext } from './ImageStreamContext';\nimport ImageStreamNsDropdown from './ImageStreamNsDropdown';\nimport ImageStreamDropdown from './ImageStreamDropdown';\nimport ImageStreamTagDropdown from './ImageStreamTagDropdown';\nimport './ImageStream.scss';\nexport const initialState = {\n    hasAccessToPullImage: true,\n    loading: false,\n    accessLoading: false,\n    hasCreateAccess: false,\n    selectedImageStream: {},\n};\nexport const ImageStreamReducer = (state, action) => {\n    const { value } = action;\n    switch (action.type) {\n        case ImageStreamActions.setHasAccessToPullImage:\n            return Object.assign(Object.assign({}, state), { hasAccessToPullImage: value });\n        case ImageStreamActions.setLoading:\n            return Object.assign(Object.assign({}, state), { loading: value });\n        case ImageStreamActions.setAccessLoading:\n            return Object.assign(Object.assign({}, state), { accessLoading: value });\n        case ImageStreamActions.setHasCreateAccess:\n            return Object.assign(Object.assign({}, state), { hasCreateAccess: value });\n        case ImageStreamActions.setSelectedImageStream:\n            return Object.assign(Object.assign({}, state), { selectedImageStream: value });\n        default:\n            throw new Error('Invalid action was provided in imagestream reducer');\n    }\n};\nconst ImageStream = () => {\n    var _a, _b;\n    const { values: { imageStream, project, registry, isi }, setFieldValue, } = useFormikContext();\n    const [validated, setValidated] = React.useState(ValidatedOptions.default);\n    const [state, dispatch] = React.useReducer(ImageStreamReducer, initialState);\n    const [hasImageStreams, setHasImageStreams] = React.useState(false);\n    const { hasAccessToPullImage, loading, accessLoading, hasCreateAccess, selectedImageStream, } = state;\n    React.useEffect(() => {\n        if (imageStream.namespace !== BuilderImagesNamespace.Openshift) {\n            setFieldValue('imageStream.grantAccess', true);\n        }\n    }, [imageStream.namespace, setFieldValue]);\n    const imageStreamTagList = getImageStreamTags(selectedImageStream);\n    const isNamespaceSelected = imageStream.namespace !== '' && !accessLoading;\n    const isStreamsAvailable = isNamespaceSelected && hasImageStreams && !loading;\n    const isTagsAvailable = isStreamsAvailable && !_.isEmpty(imageStreamTagList);\n    const isImageStreamSelected = imageStream.image !== '';\n    const canGrantAccess = hasCreateAccess &&\n        isStreamsAvailable &&\n        isTagsAvailable &&\n        !hasAccessToPullImage &&\n        isNamespaceSelected &&\n        registry === RegistryType.Internal &&\n        imageStream.namespace !== BuilderImagesNamespace.Openshift &&\n        project.name !== imageStream.namespace;\n    const helperTextInvalid = validated === ValidatedOptions.error && ((_a = isi.status) === null || _a === void 0 ? void 0 : _a.message) && (React.createElement(React.Fragment, null,\n        React.createElement(ExclamationCircleIcon, null),\n        \"\\u00A0\", (_b = isi.status) === null || _b === void 0 ? void 0 :\n        _b.message));\n    return (React.createElement(React.Fragment, null,\n        React.createElement(ImageStreamContext.Provider, { value: { state, dispatch, hasImageStreams, setHasImageStreams, setValidated } },\n            React.createElement(FormGroup, { fieldId: \"image-stream-dropdowns\", validated: validated, helperTextInvalid: helperTextInvalid },\n                React.createElement(\"div\", { className: \"row\" },\n                    React.createElement(\"div\", { className: \"col-lg-4 col-md-4 col-sm-4 col-xs-12\" },\n                        React.createElement(ImageStreamNsDropdown, null)),\n                    React.createElement(\"div\", { className: \"col-lg-4 col-md-4 col-sm-4 col-xs-12\" },\n                        React.createElement(ImageStreamDropdown, null),\n                        React.createElement(\"div\", { className: \"odc-imagestream-separator\" }, \"/\")),\n                    React.createElement(\"div\", { className: \"col-lg-4 col-md-4 col-sm-4 col-xs-12\" },\n                        React.createElement(ImageStreamTagDropdown, null),\n                        React.createElement(\"div\", { className: \"odc-imagestream-separator\" }, \":\")))),\n            isNamespaceSelected && isImageStreamSelected && !isTagsAvailable && hasCreateAccess && (React.createElement(\"div\", { className: \"odc-imagestream-alert\" },\n                React.createElement(Alert, { variant: \"warning\", title: \"No Image streams tags found\", isInline: true },\n                    \"No tags are available in image stream \",\n                    imageStream.image))),\n            isNamespaceSelected && !loading && !isStreamsAvailable && hasCreateAccess && (React.createElement(\"div\", { className: \"odc-imagestream-alert\" },\n                React.createElement(Alert, { variant: \"warning\", title: \"No Image streams found\", isInline: true },\n                    \"No image streams are available in project \",\n                    imageStream.namespace))),\n            isNamespaceSelected && !accessLoading && !hasCreateAccess && (React.createElement(\"div\", { className: \"odc-imagestream-alert\" },\n                React.createElement(Alert, { variant: \"warning\", title: \"Permission denied\", isInline: true },\n                    \"Service account default does not have authority to pull images from\",\n                    ' ',\n                    imageStream.namespace,\n                    \". Select another project to continue.\"))),\n            canGrantAccess && (React.createElement(\"div\", { className: \"odc-imagestream-alert\" },\n                React.createElement(CheckboxField, { name: \"imageStream.grantAccess\", label: `Grant service account default authority to pull images from\n                ${imageStream.namespace}` }))))));\n};\nexport default React.memo(ImageStream);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/image-search/ImageStream.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/image-search/ImageStream.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,KAAK,EAAE,SAAS,EAAE,gBAAgB,EAAE,MAAM,wBAAwB,CAAC;AAC5E,OAAO,EAAE,qBAAqB,EAAE,MAAM,yBAAyB,CAAC;AAChE,OAAO,EAAE,gBAAgB,EAAgB,MAAM,QAAQ,CAAC;AACxD,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAEhD,OAAO,EACL,YAAY,EACZ,sBAAsB,EACtB,kBAAkB,GACnB,MAAM,kCAAkC,CAAC;AAC1C,OAAO,EAAuC,kBAAkB,EAAE,MAAM,iBAAiB,CAAC;AAC1F,OAAO,EAAE,kBAAkB,EAAE,MAAM,sBAAsB,CAAC;AAC1D,OAAO,qBAAqB,MAAM,yBAAyB,CAAC;AAC5D,OAAO,mBAAmB,MAAM,uBAAuB,CAAC;AACxD,OAAO,sBAAsB,MAAM,0BAA0B,CAAC;AAE9D,OAAO,oBAAoB,CAAC;AAE5B,MAAM,CAAC,MAAM,YAAY,GAAqB;IAC5C,oBAAoB,EAAE,IAAI;IAC1B,OAAO,EAAE,KAAK;IACd,aAAa,EAAE,KAAK;IACpB,eAAe,EAAE,KAAK;IACtB,mBAAmB,EAAE,EAAE;CACxB,CAAC;AAEF,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,KAAuB,EAAE,MAAyB,EAAE,EAAE;IACvF,MAAM,EAAE,KAAK,EAAE,GAAG,MAAM,CAAC;IACzB,QAAQ,MAAM,CAAC,IAAI,EAAE;QACnB,KAAK,kBAAkB,CAAC,uBAAuB;YAC7C,uCAAY,KAAK,KAAE,oBAAoB,EAAE,KAAK,IAAG;QACnD,KAAK,kBAAkB,CAAC,UAAU;YAChC,uCAAY,KAAK,KAAE,OAAO,EAAE,KAAK,IAAG;QACtC,KAAK,kBAAkB,CAAC,gBAAgB;YACtC,uCAAY,KAAK,KAAE,aAAa,EAAE,KAAK,IAAG;QAC5C,KAAK,kBAAkB,CAAC,kBAAkB;YACxC,uCAAY,KAAK,KAAE,eAAe,EAAE,KAAK,IAAG;QAC9C,KAAK,kBAAkB,CAAC,sBAAsB;YAC5C,uCAAY,KAAK,KAAE,mBAAmB,EAAE,KAAK,IAAG;QAClD;YACE,MAAM,IAAI,KAAK,CAAC,oDAAoD,CAAC,CAAC;KACzE;AACH,CAAC,CAAC;AAEF,MAAM,WAAW,GAAa,GAAG,EAAE;;IACjC,MAAM,EACJ,MAAM,EAAE,EAAE,WAAW,EAAE,OAAO,EAAE,QAAQ,EAAE,GAAG,EAAE,EAC/C,aAAa,GACd,GAAG,gBAAgB,EAAgB,CAAC;IACrC,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAmB,gBAAgB,CAAC,OAAO,CAAC,CAAC;IAC7F,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,kBAAkB,EAAE,YAAY,CAAC,CAAC;IAC7E,MAAM,CAAC,eAAe,EAAE,kBAAkB,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IACpE,MAAM,EACJ,oBAAoB,EACpB,OAAO,EACP,aAAa,EACb,eAAe,EACf,mBAAmB,GACpB,GAAG,KAAK,CAAC;IAEV,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,IAAI,WAAW,CAAC,SAAS,KAAK,sBAAsB,CAAC,SAAS,EAAE;YAC9D,aAAa,CAAC,yBAAyB,EAAE,IAAI,CAAC,CAAC;SAChD;IACH,CAAC,EAAE,CAAC,WAAW,CAAC,SAAS,EAAE,aAAa,CAAC,CAAC,CAAC;IAC3C,MAAM,kBAAkB,GAAG,kBAAkB,CAAC,mBAAsC,CAAC,CAAC;IACtF,MAAM,mBAAmB,GAAG,WAAW,CAAC,SAAS,KAAK,EAAE,IAAI,CAAC,aAAa,CAAC;IAC3E,MAAM,kBAAkB,GAAG,mBAAmB,IAAI,eAAe,IAAI,CAAC,OAAO,CAAC;IAC9E,MAAM,eAAe,GAAG,kBAAkB,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;IAC7E,MAAM,qBAAqB,GAAG,WAAW,CAAC,KAAK,KAAK,EAAE,CAAC;IACvD,MAAM,cAAc,GAClB,eAAe;QACf,kBAAkB;QAClB,eAAe;QACf,CAAC,oBAAoB;QACrB,mBAAmB;QACnB,QAAQ,KAAK,YAAY,CAAC,QAAQ;QAClC,WAAW,CAAC,SAAS,KAAK,sBAAsB,CAAC,SAAS;QAC1D,OAAO,CAAC,IAAI,KAAK,WAAW,CAAC,SAAS,CAAC;IACzC,MAAM,iBAAiB,GAAG,SAAS,KAAK,gBAAgB,CAAC,KAAK,WAAI,GAAG,CAAC,MAAM,0CAAE,OAAO,CAAA,IAAI,CACvF;QACE,oBAAC,qBAAqB,OAAG;wBAClB,GAAG,CAAC,MAAM;WAAE,OAAO,CACzB,CACJ,CAAC;IAEF,OAAO,CACL;QACE,oBAAC,kBAAkB,CAAC,QAAQ,IAC1B,KAAK,EAAE,EAAE,KAAK,EAAE,QAAQ,EAAE,eAAe,EAAE,kBAAkB,EAAE,YAAY,EAAE;YAE7E,oBAAC,SAAS,IACR,OAAO,EAAC,wBAAwB,EAChC,SAAS,EAAE,SAAS,EACpB,iBAAiB,EAAE,iBAAiB;gBAEpC,6BAAK,SAAS,EAAC,KAAK;oBAClB,6BAAK,SAAS,EAAC,sCAAsC;wBACnD,oBAAC,qBAAqB,OAAG,CACrB;oBACN,6BAAK,SAAS,EAAC,sCAAsC;wBACnD,oBAAC,mBAAmB,OAAG;wBACvB,6BAAK,SAAS,EAAC,2BAA2B,QAAQ,CAC9C;oBACN,6BAAK,SAAS,EAAC,sCAAsC;wBACnD,oBAAC,sBAAsB,OAAG;wBAC1B,6BAAK,SAAS,EAAC,2BAA2B,QAAQ,CAC9C,CACF,CACI;YACX,mBAAmB,IAAI,qBAAqB,IAAI,CAAC,eAAe,IAAI,eAAe,IAAI,CACtF,6BAAK,SAAS,EAAC,uBAAuB;gBACpC,oBAAC,KAAK,IAAC,OAAO,EAAC,SAAS,EAAC,KAAK,EAAC,6BAA6B,EAAC,QAAQ;;oBAC5B,WAAW,CAAC,KAAK,CAClD,CACJ,CACP;YACA,mBAAmB,IAAI,CAAC,OAAO,IAAI,CAAC,kBAAkB,IAAI,eAAe,IAAI,CAC5E,6BAAK,SAAS,EAAC,uBAAuB;gBACpC,oBAAC,KAAK,IAAC,OAAO,EAAC,SAAS,EAAC,KAAK,EAAC,wBAAwB,EAAC,QAAQ;;oBACnB,WAAW,CAAC,SAAS,CAC1D,CACJ,CACP;YACA,mBAAmB,IAAI,CAAC,aAAa,IAAI,CAAC,eAAe,IAAI,CAC5D,6BAAK,SAAS,EAAC,uBAAuB;gBACpC,oBAAC,KAAK,IAAC,OAAO,EAAC,SAAS,EAAC,KAAK,EAAC,mBAAmB,EAAC,QAAQ;;oBACW,GAAG;oBACtE,WAAW,CAAC,SAAS;4DAChB,CACJ,CACP;YACA,cAAc,IAAI,CACjB,6BAAK,SAAS,EAAC,uBAAuB;gBACpC,oBAAC,aAAa,IACZ,IAAI,EAAC,yBAAyB,EAC9B,KAAK,EAAE;kBACH,WAAW,CAAC,SAAS,EAAE,GAC3B,CACE,CACP,CAC2B,CAC7B,CACJ,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,KAAK,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Alert, FormGroup, ValidatedOptions } from '@patternfly/react-core';\nimport { ExclamationCircleIcon } from '@patternfly/react-icons';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { CheckboxField } from '@console/shared';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport {\n  RegistryType,\n  BuilderImagesNamespace,\n  getImageStreamTags,\n} from '../../../utils/imagestream-utils';\nimport { ImageStreamState, ImageStreamAction, ImageStreamActions } from '../import-types';\nimport { ImageStreamContext } from './ImageStreamContext';\nimport ImageStreamNsDropdown from './ImageStreamNsDropdown';\nimport ImageStreamDropdown from './ImageStreamDropdown';\nimport ImageStreamTagDropdown from './ImageStreamTagDropdown';\n\nimport './ImageStream.scss';\n\nexport const initialState: ImageStreamState = {\n  hasAccessToPullImage: true,\n  loading: false,\n  accessLoading: false,\n  hasCreateAccess: false,\n  selectedImageStream: {},\n};\n\nexport const ImageStreamReducer = (state: ImageStreamState, action: ImageStreamAction) => {\n  const { value } = action;\n  switch (action.type) {\n    case ImageStreamActions.setHasAccessToPullImage:\n      return { ...state, hasAccessToPullImage: value };\n    case ImageStreamActions.setLoading:\n      return { ...state, loading: value };\n    case ImageStreamActions.setAccessLoading:\n      return { ...state, accessLoading: value };\n    case ImageStreamActions.setHasCreateAccess:\n      return { ...state, hasCreateAccess: value };\n    case ImageStreamActions.setSelectedImageStream:\n      return { ...state, selectedImageStream: value };\n    default:\n      throw new Error('Invalid action was provided in imagestream reducer');\n  }\n};\n\nconst ImageStream: React.FC = () => {\n  const {\n    values: { imageStream, project, registry, isi },\n    setFieldValue,\n  } = useFormikContext<FormikValues>();\n  const [validated, setValidated] = React.useState<ValidatedOptions>(ValidatedOptions.default);\n  const [state, dispatch] = React.useReducer(ImageStreamReducer, initialState);\n  const [hasImageStreams, setHasImageStreams] = React.useState(false);\n  const {\n    hasAccessToPullImage,\n    loading,\n    accessLoading,\n    hasCreateAccess,\n    selectedImageStream,\n  } = state;\n\n  React.useEffect(() => {\n    if (imageStream.namespace !== BuilderImagesNamespace.Openshift) {\n      setFieldValue('imageStream.grantAccess', true);\n    }\n  }, [imageStream.namespace, setFieldValue]);\n  const imageStreamTagList = getImageStreamTags(selectedImageStream as K8sResourceKind);\n  const isNamespaceSelected = imageStream.namespace !== '' && !accessLoading;\n  const isStreamsAvailable = isNamespaceSelected && hasImageStreams && !loading;\n  const isTagsAvailable = isStreamsAvailable && !_.isEmpty(imageStreamTagList);\n  const isImageStreamSelected = imageStream.image !== '';\n  const canGrantAccess =\n    hasCreateAccess &&\n    isStreamsAvailable &&\n    isTagsAvailable &&\n    !hasAccessToPullImage &&\n    isNamespaceSelected &&\n    registry === RegistryType.Internal &&\n    imageStream.namespace !== BuilderImagesNamespace.Openshift &&\n    project.name !== imageStream.namespace;\n  const helperTextInvalid = validated === ValidatedOptions.error && isi.status?.message && (\n    <>\n      <ExclamationCircleIcon />\n      &nbsp;{isi.status?.message}\n    </>\n  );\n\n  return (\n    <>\n      <ImageStreamContext.Provider\n        value={{ state, dispatch, hasImageStreams, setHasImageStreams, setValidated }}\n      >\n        <FormGroup\n          fieldId=\"image-stream-dropdowns\"\n          validated={validated}\n          helperTextInvalid={helperTextInvalid}\n        >\n          <div className=\"row\">\n            <div className=\"col-lg-4 col-md-4 col-sm-4 col-xs-12\">\n              <ImageStreamNsDropdown />\n            </div>\n            <div className=\"col-lg-4 col-md-4 col-sm-4 col-xs-12\">\n              <ImageStreamDropdown />\n              <div className=\"odc-imagestream-separator\">/</div>\n            </div>\n            <div className=\"col-lg-4 col-md-4 col-sm-4 col-xs-12\">\n              <ImageStreamTagDropdown />\n              <div className=\"odc-imagestream-separator\">:</div>\n            </div>\n          </div>\n        </FormGroup>\n        {isNamespaceSelected && isImageStreamSelected && !isTagsAvailable && hasCreateAccess && (\n          <div className=\"odc-imagestream-alert\">\n            <Alert variant=\"warning\" title=\"No Image streams tags found\" isInline>\n              No tags are available in image stream {imageStream.image}\n            </Alert>\n          </div>\n        )}\n        {isNamespaceSelected && !loading && !isStreamsAvailable && hasCreateAccess && (\n          <div className=\"odc-imagestream-alert\">\n            <Alert variant=\"warning\" title=\"No Image streams found\" isInline>\n              No image streams are available in project {imageStream.namespace}\n            </Alert>\n          </div>\n        )}\n        {isNamespaceSelected && !accessLoading && !hasCreateAccess && (\n          <div className=\"odc-imagestream-alert\">\n            <Alert variant=\"warning\" title=\"Permission denied\" isInline>\n              Service account default does not have authority to pull images from{' '}\n              {imageStream.namespace}. Select another project to continue.\n            </Alert>\n          </div>\n        )}\n        {canGrantAccess && (\n          <div className=\"odc-imagestream-alert\">\n            <CheckboxField\n              name=\"imageStream.grantAccess\"\n              label={`Grant service account default authority to pull images from\n                ${imageStream.namespace}`}\n            />\n          </div>\n        )}\n      </ImageStreamContext.Provider>\n    </>\n  );\n};\n\nexport default React.memo(ImageStream);\n"]}]}