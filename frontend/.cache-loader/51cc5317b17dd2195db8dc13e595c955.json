{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/cloud-shell/CloudShellExec.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/cloud-shell/CloudShellExec.tsx","mtime":1615298458590},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Base64 } from 'js-base64';\nimport { LoadError } from '@console/internal/components/utils';\nimport { connectToFlags } from '@console/internal/reducers/features';\nimport { impersonateStateToProps } from '@console/internal/reducers/ui';\nimport { FLAGS } from '@console/shared';\nimport { WSFactory } from '@console/internal/module/ws-factory';\nimport { resourceURL } from '@console/internal/module/k8s';\nimport { PodModel } from '@console/internal/models';\nimport Terminal from './Terminal';\nimport TerminalLoadingBox from './TerminalLoadingBox';\nimport useActivityTick from './useActivityTick';\nconst NO_SH = 'starting container process caused \"exec: \\\\\"sh\\\\\": executable file not found in $PATH\"';\nconst CloudShellExec = ({ workspaceName, container, podname, namespace, shcommand, flags, impersonate, }) => {\n    const [wsOpen, setWsOpen] = React.useState(false);\n    const [wsError, setWsError] = React.useState();\n    const ws = React.useRef();\n    const terminal = React.useRef();\n    const tick = useActivityTick(workspaceName, namespace);\n    const onData = React.useCallback((data) => {\n        tick();\n        ws.current && ws.current.send(`0${Base64.encode(data)}`);\n    }, [tick]);\n    React.useEffect(() => {\n        let unmounted;\n        const usedClient = flags[FLAGS.OPENSHIFT] ? 'oc' : 'kubectl';\n        const cmd = shcommand || ['sh', '-i', '-c', 'TERM=xterm sh'];\n        const subprotocols = ((impersonate === null || impersonate === void 0 ? void 0 : impersonate.subprotocols) || []).concat('base64.channel.k8s.io');\n        const urlOpts = {\n            ns: namespace,\n            name: podname,\n            path: 'exec',\n            queryParams: {\n                stdout: '1',\n                stdin: '1',\n                stderr: '1',\n                tty: '1',\n                container,\n                command: cmd.map((c) => encodeURIComponent(c)).join('&command='),\n            },\n        };\n        const path = resourceURL(PodModel, urlOpts);\n        const wsOpts = {\n            host: 'auto',\n            reconnect: true,\n            jsonParse: false,\n            path,\n            subprotocols,\n        };\n        const websocket = new WSFactory(`${podname}-terminal`, wsOpts);\n        let previous;\n        websocket\n            .onmessage((msg) => {\n            const currentTerminal = terminal.current;\n            // error channel\n            if (msg[0] === '3') {\n                if (previous.includes(NO_SH)) {\n                    const errMsg = `This container doesn't have a /bin/sh shell. Try specifying your command in a terminal with:\\r\\n\\r\\n ${usedClient} -n ${namespace} exec ${podname} -ti <command>`;\n                    currentTerminal && currentTerminal.reset();\n                    currentTerminal && currentTerminal.onConnectionClosed(errMsg);\n                    websocket.destroy();\n                    previous = '';\n                    return;\n                }\n            }\n            tick();\n            const data = Base64.decode(msg.slice(1));\n            currentTerminal && currentTerminal.onDataReceived(data);\n            previous = data;\n        })\n            .onopen(() => {\n            const currentTerminal = terminal.current;\n            currentTerminal && currentTerminal.reset();\n            previous = '';\n            if (!unmounted)\n                setWsOpen(true);\n        })\n            .onclose((evt) => {\n            if (!evt || evt.wasClean === true) {\n                return;\n            }\n            const currentTerminal = terminal.current;\n            const error = evt.reason || 'The terminal connection has closed.';\n            currentTerminal && currentTerminal.onConnectionClosed(error);\n            websocket.destroy();\n            if (!unmounted)\n                setWsError(error);\n        }) // eslint-disable-next-line no-console\n            .onerror((evt) => console.error(`WS error?! ${evt}`));\n        if (ws.current !== websocket) {\n            ws.current && ws.current.destroy();\n            ws.current = websocket;\n            const currentTerminal = terminal.current;\n            currentTerminal && currentTerminal.onConnectionClosed(`connecting to ${container}`);\n        }\n        return () => {\n            unmounted = true;\n            websocket.destroy();\n        };\n    }, [tick, container, flags, impersonate, namespace, podname, shcommand]);\n    if (wsError) {\n        return React.createElement(LoadError, { message: wsError, label: \"OpenShift command line terminal\", canRetry: false });\n    }\n    if (wsOpen) {\n        return React.createElement(Terminal, { onData: onData, ref: terminal });\n    }\n    return React.createElement(TerminalLoadingBox, null);\n};\nexport default connect(impersonateStateToProps)(connectToFlags(FLAGS.OPENSHIFT)(CloudShellExec));\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/cloud-shell/CloudShellExec.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/cloud-shell/CloudShellExec.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AACtC,OAAO,EAAE,MAAM,EAAE,MAAM,WAAW,CAAC;AACnC,OAAO,EAAE,SAAS,EAAE,MAAM,oCAAoC,CAAC;AAC/D,OAAO,EAAE,cAAc,EAAkB,MAAM,qCAAqC,CAAC;AACrF,OAAO,EAAE,uBAAuB,EAAE,MAAM,+BAA+B,CAAC;AACxE,OAAO,EAAE,KAAK,EAAE,MAAM,iBAAiB,CAAC;AACxC,OAAO,EAAE,SAAS,EAAE,MAAM,qCAAqC,CAAC;AAChE,OAAO,EAAE,WAAW,EAAE,MAAM,8BAA8B,CAAC;AAC3D,OAAO,EAAE,QAAQ,EAAE,MAAM,0BAA0B,CAAC;AACpD,OAAO,QAAoC,MAAM,YAAY,CAAC;AAC9D,OAAO,kBAAkB,MAAM,sBAAsB,CAAC;AACtD,OAAO,eAAe,MAAM,mBAAmB,CAAC;AAwBhD,MAAM,KAAK,GACT,wFAAwF,CAAC;AAE3F,MAAM,cAAc,GAAkC,CAAC,EACrD,aAAa,EACb,SAAS,EACT,OAAO,EACP,SAAS,EACT,SAAS,EACT,KAAK,EACL,WAAW,GACZ,EAAE,EAAE;IACH,MAAM,CAAC,MAAM,EAAE,SAAS,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAU,KAAK,CAAC,CAAC;IAC3D,MAAM,CAAC,OAAO,EAAE,UAAU,CAAC,GAAG,KAAK,CAAC,QAAQ,EAAU,CAAC;IACvD,MAAM,EAAE,GAAG,KAAK,CAAC,MAAM,EAAa,CAAC;IACrC,MAAM,QAAQ,GAAG,KAAK,CAAC,MAAM,EAA0B,CAAC;IAExD,MAAM,IAAI,GAAG,eAAe,CAAC,aAAa,EAAE,SAAS,CAAC,CAAC;IAEvD,MAAM,MAAM,GAAG,KAAK,CAAC,WAAW,CAC9B,CAAC,IAAY,EAAQ,EAAE;QACrB,IAAI,EAAE,CAAC;QACP,EAAE,CAAC,OAAO,IAAI,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;IAC3D,CAAC,EACD,CAAC,IAAI,CAAC,CACP,CAAC;IAEF,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,IAAI,SAAkB,CAAC;QACvB,MAAM,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC;QAC7D,MAAM,GAAG,GAAG,SAAS,IAAI,CAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,eAAe,CAAC,CAAC;QAC7D,MAAM,YAAY,GAAG,CAAC,CAAA,WAAW,aAAX,WAAW,uBAAX,WAAW,CAAE,YAAY,KAAI,EAAE,CAAC,CAAC,MAAM,CAAC,uBAAuB,CAAC,CAAC;QAEvF,MAAM,OAAO,GAAG;YACd,EAAE,EAAE,SAAS;YACb,IAAI,EAAE,OAAO;YACb,IAAI,EAAE,MAAM;YACZ,WAAW,EAAE;gBACX,MAAM,EAAE,GAAG;gBACX,KAAK,EAAE,GAAG;gBACV,MAAM,EAAE,GAAG;gBACX,GAAG,EAAE,GAAG;gBACR,SAAS;gBACT,OAAO,EAAE,GAAG,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC;aACjE;SACF,CAAC;QAEF,MAAM,IAAI,GAAG,WAAW,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;QAC5C,MAAM,MAAM,GAAG;YACb,IAAI,EAAE,MAAM;YACZ,SAAS,EAAE,IAAI;YACf,SAAS,EAAE,KAAK;YAChB,IAAI;YACJ,YAAY;SACb,CAAC;QAEF,MAAM,SAAS,GAAc,IAAI,SAAS,CAAC,GAAG,OAAO,WAAW,EAAE,MAAM,CAAC,CAAC;QAC1E,IAAI,QAAQ,CAAC;QAEb,SAAS;aACN,SAAS,CAAC,CAAC,GAAG,EAAE,EAAE;YACjB,MAAM,eAAe,GAAG,QAAQ,CAAC,OAAO,CAAC;YACzC,gBAAgB;YAChB,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,GAAG,EAAE;gBAClB,IAAI,QAAQ,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE;oBAC5B,MAAM,MAAM,GAAG,wGAAwG,UAAU,OAAO,SAAS,SAAS,OAAO,gBAAgB,CAAC;oBAClL,eAAe,IAAI,eAAe,CAAC,KAAK,EAAE,CAAC;oBAC3C,eAAe,IAAI,eAAe,CAAC,kBAAkB,CAAC,MAAM,CAAC,CAAC;oBAC9D,SAAS,CAAC,OAAO,EAAE,CAAC;oBACpB,QAAQ,GAAG,EAAE,CAAC;oBACd,OAAO;iBACR;aACF;YACD,IAAI,EAAE,CAAC;YACP,MAAM,IAAI,GAAG,MAAM,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;YACzC,eAAe,IAAI,eAAe,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC;YACxD,QAAQ,GAAG,IAAI,CAAC;QAClB,CAAC,CAAC;aACD,MAAM,CAAC,GAAG,EAAE;YACX,MAAM,eAAe,GAAG,QAAQ,CAAC,OAAO,CAAC;YACzC,eAAe,IAAI,eAAe,CAAC,KAAK,EAAE,CAAC;YAC3C,QAAQ,GAAG,EAAE,CAAC;YACd,IAAI,CAAC,SAAS;gBAAE,SAAS,CAAC,IAAI,CAAC,CAAC;QAClC,CAAC,CAAC;aACD,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE;YACf,IAAI,CAAC,GAAG,IAAI,GAAG,CAAC,QAAQ,KAAK,IAAI,EAAE;gBACjC,OAAO;aACR;YACD,MAAM,eAAe,GAAG,QAAQ,CAAC,OAAO,CAAC;YACzC,MAAM,KAAK,GAAG,GAAG,CAAC,MAAM,IAAI,qCAAqC,CAAC;YAClE,eAAe,IAAI,eAAe,CAAC,kBAAkB,CAAC,KAAK,CAAC,CAAC;YAC7D,SAAS,CAAC,OAAO,EAAE,CAAC;YACpB,IAAI,CAAC,SAAS;gBAAE,UAAU,CAAC,KAAK,CAAC,CAAC;QACpC,CAAC,CAAC,CAAC,sCAAsC;aACxC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,cAAc,GAAG,EAAE,CAAC,CAAC,CAAC;QAExD,IAAI,EAAE,CAAC,OAAO,KAAK,SAAS,EAAE;YAC5B,EAAE,CAAC,OAAO,IAAI,EAAE,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;YACnC,EAAE,CAAC,OAAO,GAAG,SAAS,CAAC;YACvB,MAAM,eAAe,GAAG,QAAQ,CAAC,OAAO,CAAC;YACzC,eAAe,IAAI,eAAe,CAAC,kBAAkB,CAAC,iBAAiB,SAAS,EAAE,CAAC,CAAC;SACrF;QAED,OAAO,GAAG,EAAE;YACV,SAAS,GAAG,IAAI,CAAC;YACjB,SAAS,CAAC,OAAO,EAAE,CAAC;QACtB,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,IAAI,EAAE,SAAS,EAAE,KAAK,EAAE,WAAW,EAAE,SAAS,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC;IAEzE,IAAI,OAAO,EAAE;QACX,OAAO,oBAAC,SAAS,IAAC,OAAO,EAAE,OAAO,EAAE,KAAK,EAAC,iCAAiC,EAAC,QAAQ,EAAE,KAAK,GAAI,CAAC;KACjG;IAED,IAAI,MAAM,EAAE;QACV,OAAO,oBAAC,QAAQ,IAAC,MAAM,EAAE,MAAM,EAAE,GAAG,EAAE,QAAQ,GAAI,CAAC;KACpD;IAED,OAAO,oBAAC,kBAAkB,OAAG,CAAC;AAChC,CAAC,CAAC;AAEF,eAAe,OAAO,CAAa,uBAAuB,CAAC,CACzD,cAAc,CAAuC,KAAK,CAAC,SAAS,CAAC,CAAC,cAAc,CAAC,CACtF,CAAC","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Base64 } from 'js-base64';\nimport { LoadError } from '@console/internal/components/utils';\nimport { connectToFlags, WithFlagsProps } from '@console/internal/reducers/features';\nimport { impersonateStateToProps } from '@console/internal/reducers/ui';\nimport { FLAGS } from '@console/shared';\nimport { WSFactory } from '@console/internal/module/ws-factory';\nimport { resourceURL } from '@console/internal/module/k8s';\nimport { PodModel } from '@console/internal/models';\nimport Terminal, { ImperativeTerminalType } from './Terminal';\nimport TerminalLoadingBox from './TerminalLoadingBox';\nimport useActivityTick from './useActivityTick';\n\n// pod exec WS protocol is FD prefixed, base64 encoded data (sometimes json stringified)\n\n// Channel 0 is STDIN, 1 is STDOUT, 2 is STDERR (if TTY is not requested), and 3 is a special error channel - 4 is C&C\n// The server only reads from STDIN, writes to the other three.\n// see also: https://github.com/kubernetes/kubernetes/pull/13885\n\ntype Props = {\n  workspaceName: string;\n  container: string;\n  podname: string;\n  namespace: string;\n  shcommand?: string[];\n};\n\ntype StateProps = {\n  impersonate?: {\n    subprotocols: string[];\n  };\n};\n\ntype CloudShellExecProps = Props & StateProps & WithFlagsProps;\n\nconst NO_SH =\n  'starting container process caused \"exec: \\\\\"sh\\\\\": executable file not found in $PATH\"';\n\nconst CloudShellExec: React.FC<CloudShellExecProps> = ({\n  workspaceName,\n  container,\n  podname,\n  namespace,\n  shcommand,\n  flags,\n  impersonate,\n}) => {\n  const [wsOpen, setWsOpen] = React.useState<boolean>(false);\n  const [wsError, setWsError] = React.useState<string>();\n  const ws = React.useRef<WSFactory>();\n  const terminal = React.useRef<ImperativeTerminalType>();\n\n  const tick = useActivityTick(workspaceName, namespace);\n\n  const onData = React.useCallback(\n    (data: string): void => {\n      tick();\n      ws.current && ws.current.send(`0${Base64.encode(data)}`);\n    },\n    [tick],\n  );\n\n  React.useEffect(() => {\n    let unmounted: boolean;\n    const usedClient = flags[FLAGS.OPENSHIFT] ? 'oc' : 'kubectl';\n    const cmd = shcommand || ['sh', '-i', '-c', 'TERM=xterm sh'];\n    const subprotocols = (impersonate?.subprotocols || []).concat('base64.channel.k8s.io');\n\n    const urlOpts = {\n      ns: namespace,\n      name: podname,\n      path: 'exec',\n      queryParams: {\n        stdout: '1',\n        stdin: '1',\n        stderr: '1',\n        tty: '1',\n        container,\n        command: cmd.map((c) => encodeURIComponent(c)).join('&command='),\n      },\n    };\n\n    const path = resourceURL(PodModel, urlOpts);\n    const wsOpts = {\n      host: 'auto',\n      reconnect: true,\n      jsonParse: false,\n      path,\n      subprotocols,\n    };\n\n    const websocket: WSFactory = new WSFactory(`${podname}-terminal`, wsOpts);\n    let previous;\n\n    websocket\n      .onmessage((msg) => {\n        const currentTerminal = terminal.current;\n        // error channel\n        if (msg[0] === '3') {\n          if (previous.includes(NO_SH)) {\n            const errMsg = `This container doesn't have a /bin/sh shell. Try specifying your command in a terminal with:\\r\\n\\r\\n ${usedClient} -n ${namespace} exec ${podname} -ti <command>`;\n            currentTerminal && currentTerminal.reset();\n            currentTerminal && currentTerminal.onConnectionClosed(errMsg);\n            websocket.destroy();\n            previous = '';\n            return;\n          }\n        }\n        tick();\n        const data = Base64.decode(msg.slice(1));\n        currentTerminal && currentTerminal.onDataReceived(data);\n        previous = data;\n      })\n      .onopen(() => {\n        const currentTerminal = terminal.current;\n        currentTerminal && currentTerminal.reset();\n        previous = '';\n        if (!unmounted) setWsOpen(true);\n      })\n      .onclose((evt) => {\n        if (!evt || evt.wasClean === true) {\n          return;\n        }\n        const currentTerminal = terminal.current;\n        const error = evt.reason || 'The terminal connection has closed.';\n        currentTerminal && currentTerminal.onConnectionClosed(error);\n        websocket.destroy();\n        if (!unmounted) setWsError(error);\n      }) // eslint-disable-next-line no-console\n      .onerror((evt) => console.error(`WS error?! ${evt}`));\n\n    if (ws.current !== websocket) {\n      ws.current && ws.current.destroy();\n      ws.current = websocket;\n      const currentTerminal = terminal.current;\n      currentTerminal && currentTerminal.onConnectionClosed(`connecting to ${container}`);\n    }\n\n    return () => {\n      unmounted = true;\n      websocket.destroy();\n    };\n  }, [tick, container, flags, impersonate, namespace, podname, shcommand]);\n\n  if (wsError) {\n    return <LoadError message={wsError} label=\"OpenShift command line terminal\" canRetry={false} />;\n  }\n\n  if (wsOpen) {\n    return <Terminal onData={onData} ref={terminal} />;\n  }\n\n  return <TerminalLoadingBox />;\n};\n\nexport default connect<StateProps>(impersonateStateToProps)(\n  connectToFlags<CloudShellExecProps & WithFlagsProps>(FLAGS.OPENSHIFT)(CloudShellExec),\n);\n"]}]}