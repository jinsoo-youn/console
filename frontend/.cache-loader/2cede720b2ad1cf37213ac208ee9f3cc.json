{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/machine-set.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/machine-set.tsx","mtime":1616735742470},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Link } from 'react-router-dom';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport { getMachineAWSPlacement, getMachineRole } from '@console/shared';\nimport { Tooltip, Button } from '@patternfly/react-core';\nimport { PencilAltIcon } from '@patternfly/react-icons';\nimport { MachineAutoscalerModel, MachineModel, MachineSetModel } from '../models';\nimport { referenceForModel } from '../module/k8s';\nimport { MachinePage } from './machine';\nimport { configureMachineAutoscalerModal, configureReplicaCountModal } from './modals';\nimport { DetailsPage, ListPage, Table, TableRow, TableData } from './factory';\nimport { Kebab, ResourceKebab, ResourceLink, ResourceSummary, SectionHeading, Selector, navFactory, pluralize, resourcePath, useAccessReview, } from './utils';\nimport { ResourceEventStream } from './events';\nconst machineReplicasModal = (resourceKind, resource) => configureReplicaCountModal({\n    resourceKind,\n    resource,\n    title: 'Edit Machine Count',\n    message: `${resourceKind.labelPlural} maintain the proper number of healthy machines.`,\n});\nexport const editCountAction = (kind, resource) => ({\n    label: 'Edit Machine Count',\n    callback: () => machineReplicasModal(kind, resource),\n    accessReview: {\n        group: kind.apiGroup,\n        resource: kind.plural,\n        name: resource.metadata.name,\n        namespace: resource.metadata.namespace,\n        verb: 'patch',\n    },\n});\nconst configureMachineAutoscaler = (kind, machineSet) => ({\n    label: 'Create Autoscaler',\n    callback: () => configureMachineAutoscalerModal({ machineSet, cancel: _.noop, close: _.noop }),\n    accessReview: {\n        group: MachineAutoscalerModel.apiGroup,\n        resource: MachineAutoscalerModel.plural,\n        namespace: machineSet.metadata.namespace,\n        verb: 'create',\n    },\n});\nconst { common } = Kebab.factory;\nconst menuActions = [\n    editCountAction,\n    configureMachineAutoscaler,\n    ...Kebab.getExtensionsActionsForKind(MachineSetModel),\n    ...common,\n];\nconst machineReference = referenceForModel(MachineModel);\nconst machineSetReference = referenceForModel(MachineSetModel);\n// `spec.replicas` defaults to 1 if not specified. Make sure to differentiate between undefined and 0.\nexport const getDesiredReplicas = (machineSet) => {\n    var _a, _b;\n    return (_b = (_a = machineSet === null || machineSet === void 0 ? void 0 : machineSet.spec) === null || _a === void 0 ? void 0 : _a.replicas) !== null && _b !== void 0 ? _b : 1;\n};\nconst getReplicas = (machineSet) => { var _a; return ((_a = machineSet === null || machineSet === void 0 ? void 0 : machineSet.status) === null || _a === void 0 ? void 0 : _a.replicas) || 0; };\nexport const getReadyReplicas = (machineSet) => { var _a; return ((_a = machineSet === null || machineSet === void 0 ? void 0 : machineSet.status) === null || _a === void 0 ? void 0 : _a.readyReplicas) || 0; };\nexport const getAvailableReplicas = (machineSet) => { var _a; return ((_a = machineSet === null || machineSet === void 0 ? void 0 : machineSet.status) === null || _a === void 0 ? void 0 : _a.availableReplicas) || 0; };\nconst tableColumnClasses = [\n    classNames('col-sm-4', 'col-xs-6'),\n    classNames('col-sm-4', 'col-xs-6'),\n    classNames('col-sm-4', 'hidden-xs'),\n    Kebab.columnClass,\n];\nconst MachineSetTableHeader = () => {\n    return [\n        {\n            title: 'Name',\n            sortField: 'metadata.name',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[0] },\n        },\n        {\n            title: 'Namespace',\n            sortField: 'metadata.namespace',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[1] },\n        },\n        {\n            title: 'Machines',\n            sortField: 'status.replicas',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[2] },\n        },\n        {\n            title: '',\n            props: { className: tableColumnClasses[3] },\n        },\n    ];\n};\nMachineSetTableHeader.displayName = 'MachineSetTableHeader';\nconst MachineSetTableRow = ({ obj, index, key, style }) => {\n    return (React.createElement(TableRow, { id: obj.metadata.uid, index: index, trKey: key, style: style },\n        React.createElement(TableData, { className: tableColumnClasses[0] },\n            React.createElement(ResourceLink, { kind: machineSetReference, name: obj.metadata.name, namespace: obj.metadata.namespace })),\n        React.createElement(TableData, { className: classNames(tableColumnClasses[1], 'co-break-word') },\n            React.createElement(ResourceLink, { kind: \"Namespace\", name: obj.metadata.namespace })),\n        React.createElement(TableData, { className: tableColumnClasses[2] },\n            React.createElement(Link, { to: `${resourcePath(machineSetReference, obj.metadata.name, obj.metadata.namespace)}/machines` },\n                getReadyReplicas(obj),\n                \" of \",\n                getDesiredReplicas(obj),\n                \" machines\")),\n        React.createElement(TableData, { className: tableColumnClasses[3] },\n            React.createElement(ResourceKebab, { actions: menuActions, kind: machineSetReference, resource: obj }))));\n};\nexport const MachineCounts = ({ resourceKind, resource, }) => {\n    const editReplicas = (event) => {\n        event.preventDefault();\n        machineReplicasModal(resourceKind, resource);\n    };\n    const desiredReplicas = getDesiredReplicas(resource);\n    const replicas = getReplicas(resource);\n    const readyReplicas = getReadyReplicas(resource);\n    const availableReplicas = getAvailableReplicas(resource);\n    const canUpdate = useAccessReview({\n        group: resourceKind.apiGroup,\n        resource: resourceKind.plural,\n        verb: 'patch',\n        name: resource.metadata.name,\n        namespace: resource.metadata.namespace,\n    });\n    const desiredReplicasText = pluralize(desiredReplicas, 'machine');\n    return (React.createElement(\"div\", { className: \"co-m-pane__body-group\" },\n        React.createElement(\"div\", { className: \"co-detail-table\" },\n            React.createElement(\"div\", { className: \"co-detail-table__row row\" },\n                React.createElement(\"div\", { className: \"co-detail-table__section\" },\n                    React.createElement(\"dl\", { className: \"co-m-pane__details\" },\n                        React.createElement(\"dt\", { className: \"co-detail-table__section-header\" }, \"Desired Count\"),\n                        React.createElement(\"dd\", null, canUpdate ? (React.createElement(Button, { variant: \"link\", type: \"button\", isInline: true, onClick: editReplicas },\n                            desiredReplicasText,\n                            React.createElement(PencilAltIcon, { className: \"co-icon-space-l pf-c-button-icon--plain\" }))) : (desiredReplicasText)))),\n                React.createElement(\"div\", { className: \"co-detail-table__section\" },\n                    React.createElement(\"dl\", { className: \"co-m-pane__details\" },\n                        React.createElement(\"dt\", { className: \"co-detail-table__section-header\" }, \"Current Count\"),\n                        React.createElement(\"dd\", null,\n                            React.createElement(Tooltip, { content: \"The most recently observed number of replicas.\" },\n                                React.createElement(\"span\", null, pluralize(replicas, 'machine')))))),\n                React.createElement(\"div\", { className: \"co-detail-table__section\" },\n                    React.createElement(\"dl\", { className: \"co-m-pane__details\" },\n                        React.createElement(\"dt\", { className: \"co-detail-table__section-header\" }, \"Ready Count\"),\n                        React.createElement(\"dd\", null,\n                            React.createElement(Tooltip, { content: \"The number of ready replicas for this MachineSet. A machine is considered ready when the node has been created and is ready.\" },\n                                React.createElement(\"span\", null, pluralize(readyReplicas, 'machine')))))),\n                React.createElement(\"div\", { className: \"co-detail-table__section co-detail-table__section--last\" },\n                    React.createElement(\"dl\", { className: \"co-m-pane__details\" },\n                        React.createElement(\"dt\", { className: \"co-detail-table__section-header\" }, \"Available Count\"),\n                        React.createElement(\"dd\", null,\n                            React.createElement(Tooltip, { content: \"The number of available replicas (ready for at least minReadySeconds) for this MachineSet.\" },\n                                React.createElement(\"span\", null, pluralize(availableReplicas, 'machine'))))))))));\n};\nexport const MachineTabPage = ({ obj, }) => (React.createElement(MachinePage, { namespace: obj.metadata.namespace, showTitle: false, selector: obj.spec.selector }));\nconst MachineSetDetails = ({ obj }) => {\n    var _a;\n    const machineRole = getMachineRole(obj);\n    const { availabilityZone, region } = getMachineAWSPlacement(obj);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(SectionHeading, { text: \"Machine Set Details\" }),\n            React.createElement(MachineCounts, { resourceKind: MachineSetModel, resource: obj }),\n            React.createElement(ResourceSummary, { resource: obj },\n                React.createElement(\"dt\", null, \"Selector\"),\n                React.createElement(\"dd\", null,\n                    React.createElement(Selector, { kind: machineReference, selector: (_a = obj.spec) === null || _a === void 0 ? void 0 : _a.selector, namespace: obj.metadata.namespace })),\n                machineRole && (React.createElement(React.Fragment, null,\n                    React.createElement(\"dt\", null, \"Machine Role\"),\n                    React.createElement(\"dd\", null, machineRole))),\n                region && (React.createElement(React.Fragment, null,\n                    React.createElement(\"dt\", null, \"Region\"),\n                    React.createElement(\"dd\", null, region))),\n                availabilityZone && (React.createElement(React.Fragment, null,\n                    React.createElement(\"dt\", null, \"Availability Zone\"),\n                    React.createElement(\"dd\", null, availabilityZone)))))));\n};\nexport const MachineSetList = (props) => (React.createElement(Table, Object.assign({}, props, { \"aria-label\": \"Machine Sets\", Header: MachineSetTableHeader, Row: MachineSetTableRow, virtualize: true })));\nexport const MachineSetPage = (props) => (React.createElement(ListPage, Object.assign({}, props, { ListComponent: MachineSetList, kind: machineSetReference, canCreate: true })));\nexport const MachineSetDetailsPage = (props) => (React.createElement(DetailsPage, Object.assign({}, props, { menuActions: menuActions, kind: machineSetReference, pages: [\n        navFactory.details(MachineSetDetails),\n        navFactory.editYaml(),\n        navFactory.machines(MachineTabPage),\n        navFactory.events(ResourceEventStream),\n    ] })));\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/machine-set.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/machine-set.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Link } from 'react-router-dom';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport { getMachineAWSPlacement, getMachineRole } from '@console/shared';\nimport { Tooltip, Button } from '@patternfly/react-core';\n\nimport { PencilAltIcon } from '@patternfly/react-icons';\n\nimport { MachineAutoscalerModel, MachineModel, MachineSetModel } from '../models';\nimport { K8sKind, MachineDeploymentKind, MachineSetKind, referenceForModel } from '../module/k8s';\nimport { MachinePage } from './machine';\nimport { configureMachineAutoscalerModal, configureReplicaCountModal } from './modals';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from './factory';\nimport {\n  Kebab,\n  KebabAction,\n  ResourceKebab,\n  ResourceLink,\n  ResourceSummary,\n  SectionHeading,\n  Selector,\n  navFactory,\n  pluralize,\n  resourcePath,\n  useAccessReview,\n} from './utils';\nimport { ResourceEventStream } from './events';\n\nconst machineReplicasModal = (\n  resourceKind: K8sKind,\n  resource: MachineSetKind | MachineDeploymentKind,\n) =>\n  configureReplicaCountModal({\n    resourceKind,\n    resource,\n    title: 'Edit Machine Count',\n    message: `${resourceKind.labelPlural} maintain the proper number of healthy machines.`,\n  });\n\nexport const editCountAction: KebabAction = (\n  kind: K8sKind,\n  resource: MachineSetKind | MachineDeploymentKind,\n) => ({\n  label: 'Edit Machine Count',\n  callback: () => machineReplicasModal(kind, resource),\n  accessReview: {\n    group: kind.apiGroup,\n    resource: kind.plural,\n    name: resource.metadata.name,\n    namespace: resource.metadata.namespace,\n    verb: 'patch',\n  },\n});\n\nconst configureMachineAutoscaler: KebabAction = (kind: K8sKind, machineSet: MachineSetKind) => ({\n  label: 'Create Autoscaler',\n  callback: () => configureMachineAutoscalerModal({ machineSet, cancel: _.noop, close: _.noop }),\n  accessReview: {\n    group: MachineAutoscalerModel.apiGroup,\n    resource: MachineAutoscalerModel.plural,\n    namespace: machineSet.metadata.namespace,\n    verb: 'create',\n  },\n});\n\nconst { common } = Kebab.factory;\nconst menuActions = [\n  editCountAction,\n  configureMachineAutoscaler,\n  ...Kebab.getExtensionsActionsForKind(MachineSetModel),\n  ...common,\n];\nconst machineReference = referenceForModel(MachineModel);\nconst machineSetReference = referenceForModel(MachineSetModel);\n\n// `spec.replicas` defaults to 1 if not specified. Make sure to differentiate between undefined and 0.\nexport const getDesiredReplicas = (machineSet: MachineSetKind | MachineDeploymentKind) => {\n  return machineSet?.spec?.replicas ?? 1;\n};\n\nconst getReplicas = (machineSet: MachineSetKind | MachineDeploymentKind) =>\n  machineSet?.status?.replicas || 0;\nexport const getReadyReplicas = (machineSet: MachineSetKind | MachineDeploymentKind) =>\n  machineSet?.status?.readyReplicas || 0;\nexport const getAvailableReplicas = (machineSet: MachineSetKind | MachineDeploymentKind) =>\n  machineSet?.status?.availableReplicas || 0;\n\nconst tableColumnClasses = [\n  classNames('col-sm-4', 'col-xs-6'),\n  classNames('col-sm-4', 'col-xs-6'),\n  classNames('col-sm-4', 'hidden-xs'),\n  Kebab.columnClass,\n];\n\nconst MachineSetTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Machines',\n      sortField: 'status.replicas',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[3] },\n    },\n  ];\n};\nMachineSetTableHeader.displayName = 'MachineSetTableHeader';\n\nconst MachineSetTableRow: RowFunction<MachineSetKind> = ({ obj, index, key, style }) => {\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={machineSetReference}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n        />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Link\n          to={`${resourcePath(\n            machineSetReference,\n            obj.metadata.name,\n            obj.metadata.namespace,\n          )}/machines`}\n        >\n          {getReadyReplicas(obj)} of {getDesiredReplicas(obj)} machines\n        </Link>\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <ResourceKebab actions={menuActions} kind={machineSetReference} resource={obj} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport const MachineCounts: React.SFC<MachineCountsProps> = ({\n  resourceKind,\n  resource,\n}: {\n  resourceKind: K8sKind;\n  resource: MachineSetKind | MachineDeploymentKind;\n}) => {\n  const editReplicas = (event) => {\n    event.preventDefault();\n    machineReplicasModal(resourceKind, resource);\n  };\n\n  const desiredReplicas = getDesiredReplicas(resource);\n  const replicas = getReplicas(resource);\n  const readyReplicas = getReadyReplicas(resource);\n  const availableReplicas = getAvailableReplicas(resource);\n\n  const canUpdate = useAccessReview({\n    group: resourceKind.apiGroup,\n    resource: resourceKind.plural,\n    verb: 'patch',\n    name: resource.metadata.name,\n    namespace: resource.metadata.namespace,\n  });\n\n  const desiredReplicasText = pluralize(desiredReplicas, 'machine');\n  return (\n    <div className=\"co-m-pane__body-group\">\n      <div className=\"co-detail-table\">\n        <div className=\"co-detail-table__row row\">\n          <div className=\"co-detail-table__section\">\n            <dl className=\"co-m-pane__details\">\n              <dt className=\"co-detail-table__section-header\">Desired Count</dt>\n              <dd>\n                {canUpdate ? (\n                  <Button variant=\"link\" type=\"button\" isInline onClick={editReplicas}>\n                    {desiredReplicasText}\n                    <PencilAltIcon className=\"co-icon-space-l pf-c-button-icon--plain\" />\n                  </Button>\n                ) : (\n                  desiredReplicasText\n                )}\n              </dd>\n            </dl>\n          </div>\n          <div className=\"co-detail-table__section\">\n            <dl className=\"co-m-pane__details\">\n              <dt className=\"co-detail-table__section-header\">Current Count</dt>\n              <dd>\n                <Tooltip content=\"The most recently observed number of replicas.\">\n                  <span>{pluralize(replicas, 'machine')}</span>\n                </Tooltip>\n              </dd>\n            </dl>\n          </div>\n          <div className=\"co-detail-table__section\">\n            <dl className=\"co-m-pane__details\">\n              <dt className=\"co-detail-table__section-header\">Ready Count</dt>\n              <dd>\n                <Tooltip content=\"The number of ready replicas for this MachineSet. A machine is considered ready when the node has been created and is ready.\">\n                  <span>{pluralize(readyReplicas, 'machine')}</span>\n                </Tooltip>\n              </dd>\n            </dl>\n          </div>\n          <div className=\"co-detail-table__section co-detail-table__section--last\">\n            <dl className=\"co-m-pane__details\">\n              <dt className=\"co-detail-table__section-header\">Available Count</dt>\n              <dd>\n                <Tooltip content=\"The number of available replicas (ready for at least minReadySeconds) for this MachineSet.\">\n                  <span>{pluralize(availableReplicas, 'machine')}</span>\n                </Tooltip>\n              </dd>\n            </dl>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const MachineTabPage: React.SFC<MachineTabPageProps> = ({\n  obj,\n}: {\n  obj: MachineSetKind;\n}) => (\n  <MachinePage namespace={obj.metadata.namespace} showTitle={false} selector={obj.spec.selector} />\n);\n\nconst MachineSetDetails: React.SFC<MachineSetDetailsProps> = ({ obj }) => {\n  const machineRole = getMachineRole(obj);\n  const { availabilityZone, region } = getMachineAWSPlacement(obj);\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Machine Set Details\" />\n        <MachineCounts resourceKind={MachineSetModel} resource={obj} />\n        <ResourceSummary resource={obj}>\n          <dt>Selector</dt>\n          <dd>\n            <Selector\n              kind={machineReference}\n              selector={obj.spec?.selector}\n              namespace={obj.metadata.namespace}\n            />\n          </dd>\n          {machineRole && (\n            <>\n              <dt>Machine Role</dt>\n              <dd>{machineRole}</dd>\n            </>\n          )}\n          {region && (\n            <>\n              <dt>Region</dt>\n              <dd>{region}</dd>\n            </>\n          )}\n          {availabilityZone && (\n            <>\n              <dt>Availability Zone</dt>\n              <dd>{availabilityZone}</dd>\n            </>\n          )}\n        </ResourceSummary>\n      </div>\n    </>\n  );\n};\n\nexport const MachineSetList: React.SFC = (props) => (\n  <Table\n    {...props}\n    aria-label=\"Machine Sets\"\n    Header={MachineSetTableHeader}\n    Row={MachineSetTableRow}\n    virtualize\n  />\n);\n\nexport const MachineSetPage: React.SFC<MachineSetPageProps> = (props) => (\n  <ListPage {...props} ListComponent={MachineSetList} kind={machineSetReference} canCreate />\n);\n\nexport const MachineSetDetailsPage: React.SFC<MachineSetDetailsPageProps> = (props) => (\n  <DetailsPage\n    {...props}\n    menuActions={menuActions}\n    kind={machineSetReference}\n    pages={[\n      navFactory.details(MachineSetDetails),\n      navFactory.editYaml(),\n      navFactory.machines(MachineTabPage),\n      navFactory.events(ResourceEventStream),\n    ]}\n  />\n);\n\nexport type MachineCountsProps = {\n  resourceKind: K8sKind;\n  resource: MachineSetKind | MachineDeploymentKind;\n};\n\nexport type MachineTabPageProps = {\n  obj: MachineSetKind;\n};\n\nexport type MachineSetDetailsProps = {\n  obj: MachineSetKind;\n};\n\nexport type MachineSetPageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: any;\n};\n\nexport type MachineSetDetailsPageProps = {\n  match: any;\n};\n"]}]}