{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/event-sources/KafkaSourceNetSection.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/event-sources/KafkaSourceNetSection.tsx","mtime":1616735742400},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { useFormikContext } from 'formik';\nimport { CheckboxField } from '@console/shared';\nimport SecretKeySelector from '../SecretKeySelector';\nconst KafkaSourceNetSection = () => {\n    var _a, _b, _c, _d, _e, _f;\n    const { values: { data }, } = useFormikContext();\n    const saslEnable = (_c = (_b = (_a = data === null || data === void 0 ? void 0 : data.kafkasource) === null || _a === void 0 ? void 0 : _a.net) === null || _b === void 0 ? void 0 : _b.sasl) === null || _c === void 0 ? void 0 : _c.enable;\n    const tlsEnable = (_f = (_e = (_d = data === null || data === void 0 ? void 0 : data.kafkasource) === null || _d === void 0 ? void 0 : _d.net) === null || _e === void 0 ? void 0 : _e.tls) === null || _f === void 0 ? void 0 : _f.enable;\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"h3\", { className: \"co-section-heading-tertiary\" }, \"Net\"),\n        React.createElement(CheckboxField, { \"data-test-id\": \"kafkasource-sasl-field\", name: \"data.kafkasource.net.sasl.enable\", formLabel: \"SASL\", label: \"Enable\" }),\n        saslEnable && (React.createElement(React.Fragment, null,\n            React.createElement(SecretKeySelector, { name: \"data.kafkasource.net.sasl.user.secretKeyRef\", label: \"User\" }),\n            React.createElement(SecretKeySelector, { name: \"data.kafkasource.net.sasl.password.secretKeyRef\", label: \"Password\" }))),\n        React.createElement(CheckboxField, { \"data-test-id\": \"kafkasource-tls-field\", name: \"data.kafkasource.net.tls.enable\", formLabel: \"TLS\", label: \"Enable\" }),\n        tlsEnable && (React.createElement(React.Fragment, null,\n            React.createElement(SecretKeySelector, { name: \"data.kafkasource.net.tls.caCert.secretKeyRef\", label: \"CA Certificate\" }),\n            React.createElement(SecretKeySelector, { name: \"data.kafkasource.net.tls.cert.secretKeyRef\", label: \"Certificate\" }),\n            React.createElement(SecretKeySelector, { name: \"data.kafkasource.net.tls.key.secretKeyRef\", label: \"Key\" })))));\n};\nexport default KafkaSourceNetSection;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/event-sources/KafkaSourceNetSection.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/event-sources/KafkaSourceNetSection.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,gBAAgB,EAAgB,MAAM,QAAQ,CAAC;AACxD,OAAO,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AAChD,OAAO,iBAAiB,MAAM,sBAAsB,CAAC;AAErD,MAAM,qBAAqB,GAAa,GAAG,EAAE;;IAC3C,MAAM,EACJ,MAAM,EAAE,EAAE,IAAI,EAAE,GACjB,GAAG,gBAAgB,EAAgB,CAAC;IAErC,MAAM,UAAU,qBAAG,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,WAAW,0CAAE,GAAG,0CAAE,IAAI,0CAAE,MAAM,CAAC;IACxD,MAAM,SAAS,qBAAG,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,WAAW,0CAAE,GAAG,0CAAE,GAAG,0CAAE,MAAM,CAAC;IAEtD,OAAO,CACL;QACE,4BAAI,SAAS,EAAC,6BAA6B,UAAS;QACpD,oBAAC,aAAa,oBACC,wBAAwB,EACrC,IAAI,EAAC,kCAAkC,EACvC,SAAS,EAAC,MAAM,EAChB,KAAK,EAAC,QAAQ,GACd;QACD,UAAU,IAAI,CACb;YACE,oBAAC,iBAAiB,IAAC,IAAI,EAAC,6CAA6C,EAAC,KAAK,EAAC,MAAM,GAAG;YACrF,oBAAC,iBAAiB,IAChB,IAAI,EAAC,iDAAiD,EACtD,KAAK,EAAC,UAAU,GAChB,CACD,CACJ;QACD,oBAAC,aAAa,oBACC,uBAAuB,EACpC,IAAI,EAAC,iCAAiC,EACtC,SAAS,EAAC,KAAK,EACf,KAAK,EAAC,QAAQ,GACd;QACD,SAAS,IAAI,CACZ;YACE,oBAAC,iBAAiB,IAChB,IAAI,EAAC,8CAA8C,EACnD,KAAK,EAAC,gBAAgB,GACtB;YACF,oBAAC,iBAAiB,IAChB,IAAI,EAAC,4CAA4C,EACjD,KAAK,EAAC,aAAa,GACnB;YACF,oBAAC,iBAAiB,IAAC,IAAI,EAAC,2CAA2C,EAAC,KAAK,EAAC,KAAK,GAAG,CACjF,CACJ,CACA,CACJ,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,qBAAqB,CAAC","sourcesContent":["import * as React from 'react';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { CheckboxField } from '@console/shared';\nimport SecretKeySelector from '../SecretKeySelector';\n\nconst KafkaSourceNetSection: React.FC = () => {\n  const {\n    values: { data },\n  } = useFormikContext<FormikValues>();\n\n  const saslEnable = data?.kafkasource?.net?.sasl?.enable;\n  const tlsEnable = data?.kafkasource?.net?.tls?.enable;\n\n  return (\n    <>\n      <h3 className=\"co-section-heading-tertiary\">Net</h3>\n      <CheckboxField\n        data-test-id=\"kafkasource-sasl-field\"\n        name=\"data.kafkasource.net.sasl.enable\"\n        formLabel=\"SASL\"\n        label=\"Enable\"\n      />\n      {saslEnable && (\n        <>\n          <SecretKeySelector name=\"data.kafkasource.net.sasl.user.secretKeyRef\" label=\"User\" />\n          <SecretKeySelector\n            name=\"data.kafkasource.net.sasl.password.secretKeyRef\"\n            label=\"Password\"\n          />\n        </>\n      )}\n      <CheckboxField\n        data-test-id=\"kafkasource-tls-field\"\n        name=\"data.kafkasource.net.tls.enable\"\n        formLabel=\"TLS\"\n        label=\"Enable\"\n      />\n      {tlsEnable && (\n        <>\n          <SecretKeySelector\n            name=\"data.kafkasource.net.tls.caCert.secretKeyRef\"\n            label=\"CA Certificate\"\n          />\n          <SecretKeySelector\n            name=\"data.kafkasource.net.tls.cert.secretKeyRef\"\n            label=\"Certificate\"\n          />\n          <SecretKeySelector name=\"data.kafkasource.net.tls.key.secretKeyRef\" label=\"Key\" />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default KafkaSourceNetSection;\n"]}]}