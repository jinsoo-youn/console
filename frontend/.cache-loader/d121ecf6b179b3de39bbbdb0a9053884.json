{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/dashboards/graph.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/dashboards/graph.tsx","mtime":1616735742480},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport * as UIActions from '../../../actions/ui';\nimport { QueryBrowser } from '../query-browser';\n// Set the queries in Redux so that other components like the graph tooltip can access them\nconst patchAllQueries = (queries, patchQuery) => {\n    _.each(queries, (query, i) => patchQuery(i, { query }));\n};\nconst Graph_ = ({ formatLegendLabel, isStack, patchQuery, pollInterval, queries, timespan, }) => (React.createElement(\"div\", { onMouseEnter: () => patchAllQueries(queries, patchQuery) },\n    React.createElement(QueryBrowser, { defaultSamples: 30, formatLegendLabel: formatLegendLabel, hideControls: true, isStack: isStack, pollInterval: pollInterval, queries: queries, timespan: timespan })));\nconst Graph = connect(({ UI }) => ({\n    timespan: UI.getIn(['monitoringDashboards', 'timespan']),\n}))(Graph_);\nexport default connect(null, { patchQuery: UIActions.queryBrowserPatchQuery })(Graph);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/dashboards/graph.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/dashboards/graph.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAM,WAAW,CAAC;AAC/B,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AAEtC,OAAO,KAAK,SAAS,MAAM,qBAAqB,CAAC;AAEjD,OAAO,EAAiC,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAE/E,2FAA2F;AAC3F,MAAM,eAAe,GAAG,CAAC,OAAiB,EAAE,UAAsB,EAAQ,EAAE;IAC1E,CAAC,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,KAAK,EAAE,CAAC,EAAE,EAAE,CAAC,UAAU,CAAC,CAAC,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;AAC1D,CAAC,CAAC;AAEF,MAAM,MAAM,GAAoB,CAAC,EAC/B,iBAAiB,EACjB,OAAO,EACP,UAAU,EACV,YAAY,EACZ,OAAO,EACP,QAAQ,GACT,EAAE,EAAE,CAAC,CACJ,6BAAK,YAAY,EAAE,GAAG,EAAE,CAAC,eAAe,CAAC,OAAO,EAAE,UAAU,CAAC;IAC3D,oBAAC,YAAY,IACX,cAAc,EAAE,EAAE,EAClB,iBAAiB,EAAE,iBAAiB,EACpC,YAAY,QACZ,OAAO,EAAE,OAAO,EAChB,YAAY,EAAE,YAAY,EAC1B,OAAO,EAAE,OAAO,EAChB,QAAQ,EAAE,QAAQ,GAClB,CACE,CACP,CAAC;AACF,MAAM,KAAK,GAAG,OAAO,CAAC,CAAC,EAAE,EAAE,EAAa,EAAE,EAAE,CAAC,CAAC;IAC5C,QAAQ,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,sBAAsB,EAAE,UAAU,CAAC,CAAC;CACzD,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC;AAWZ,eAAe,OAAO,CAAC,IAAI,EAAE,EAAE,UAAU,EAAE,SAAS,CAAC,sBAAsB,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\n\nimport * as UIActions from '../../../actions/ui';\nimport { RootState } from '../../../redux';\nimport { FormatLegendLabel, PatchQuery, QueryBrowser } from '../query-browser';\n\n// Set the queries in Redux so that other components like the graph tooltip can access them\nconst patchAllQueries = (queries: string[], patchQuery: PatchQuery): void => {\n  _.each(queries, (query, i) => patchQuery(i, { query }));\n};\n\nconst Graph_: React.FC<Props> = ({\n  formatLegendLabel,\n  isStack,\n  patchQuery,\n  pollInterval,\n  queries,\n  timespan,\n}) => (\n  <div onMouseEnter={() => patchAllQueries(queries, patchQuery)}>\n    <QueryBrowser\n      defaultSamples={30}\n      formatLegendLabel={formatLegendLabel}\n      hideControls\n      isStack={isStack}\n      pollInterval={pollInterval}\n      queries={queries}\n      timespan={timespan}\n    />\n  </div>\n);\nconst Graph = connect(({ UI }: RootState) => ({\n  timespan: UI.getIn(['monitoringDashboards', 'timespan']),\n}))(Graph_);\n\ntype Props = {\n  formatLegendLabel?: FormatLegendLabel;\n  isStack: boolean;\n  patchQuery: PatchQuery;\n  pollInterval: number;\n  queries: string[];\n  timespan: number;\n};\n\nexport default connect(null, { patchQuery: UIActions.queryBrowserPatchQuery })(Graph);\n"]}]}