{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/network-attachment-definition-plugin/src/components/network-attachment-definitions/NetworkAttachmentDefinition.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/network-attachment-definition-plugin/src/components/network-attachment-definitions/NetworkAttachmentDefinition.tsx","mtime":1616735742440},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { ListPage, Table, TableData, TableRow, } from '@console/internal/components/factory';\nimport { Kebab, ResourceKebab, ResourceLink } from '@console/internal/components/utils';\nimport { NamespaceModel } from '@console/internal/models';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { dimensifyHeader, dimensifyRow, getName, getNamespace, getUID } from '@console/shared';\nimport { NetworkAttachmentDefinitionModel } from '../../models';\nimport { getConfigAsJSON, getType } from '../../selectors';\nconst { common } = Kebab.factory;\nconst menuActions = [...common];\nconst tableColumnClasses = [\n    classNames('col-lg-4', 'col-md-4', 'col-sm-6', 'col-xs-6'),\n    classNames('col-lg-4', 'col-md-4', 'hidden-sm', 'hidden-xs'),\n    classNames('col-lg-4', 'col-md-4', 'col-sm-6', 'col-xs-6'),\n    Kebab.columnClass,\n];\nconst NetworkAttachmentDefinitionsHeader = () => dimensifyHeader([\n    {\n        title: 'Name',\n        sortField: 'name',\n        transforms: [sortable],\n    },\n    {\n        title: 'Namespace',\n        sortField: 'namespace',\n        transforms: [sortable],\n    },\n    {\n        title: 'Type',\n        sortField: 'type',\n        transforms: [sortable],\n    },\n    {\n        title: '',\n    },\n], tableColumnClasses);\nconst NetworkAttachmentDefinitionsRow = ({ obj: { name, namespace, type, metadata, netAttachDef }, index, key, style, }) => {\n    const dimensify = dimensifyRow(tableColumnClasses);\n    return (React.createElement(TableRow, { id: metadata.uid, index: index, trKey: key, style: style },\n        React.createElement(TableData, { className: dimensify() },\n            React.createElement(ResourceLink, { kind: referenceForModel(NetworkAttachmentDefinitionModel), name: name, namespace: namespace })),\n        React.createElement(TableData, { className: dimensify() },\n            React.createElement(ResourceLink, { kind: NamespaceModel.kind, name: namespace, title: namespace })),\n        React.createElement(TableData, { className: dimensify() }, type || React.createElement(\"span\", { className: \"text-secondary\" }, \"Not available\")),\n        React.createElement(TableData, { className: dimensify(true) },\n            React.createElement(ResourceKebab, { actions: menuActions, kind: referenceForModel(NetworkAttachmentDefinitionModel), resource: netAttachDef }))));\n};\nconst getNetAttachDefsData = (nadList) => {\n    return nadList\n        ? nadList.map((netAttachDef) => {\n            const configJSON = getConfigAsJSON(netAttachDef);\n            return {\n                netAttachDef,\n                metadata: { uid: getUID(netAttachDef) },\n                configJSON,\n                // for sorting\n                name: getName(netAttachDef),\n                namespace: getNamespace(netAttachDef),\n                type: getType(configJSON),\n            };\n        })\n        : [];\n};\nexport const NetworkAttachmentDefinitionsList = (props) => {\n    return (React.createElement(Table, { data: getNetAttachDefsData(props.data), \"aria-label\": NetworkAttachmentDefinitionModel.labelPlural, Header: NetworkAttachmentDefinitionsHeader, Row: NetworkAttachmentDefinitionsRow, virtualize: true, loaded: props.loaded, label: props.label }));\n};\nNetworkAttachmentDefinitionsList.displayName = 'NetworkAttachmentDefinitionsList';\nexport const NetworkAttachmentDefinitionsPage = (props) => {\n    var _a, _b;\n    const namespace = props.namespace || ((_b = (_a = props.match) === null || _a === void 0 ? void 0 : _a.params) === null || _b === void 0 ? void 0 : _b.ns) || 'default';\n    const createProps = {\n        to: `/k8s/ns/${namespace}/${referenceForModel(NetworkAttachmentDefinitionModel)}/~new/form`,\n    };\n    return (React.createElement(ListPage, Object.assign({}, props, { title: NetworkAttachmentDefinitionModel.labelPlural, kind: referenceForModel(NetworkAttachmentDefinitionModel), ListComponent: NetworkAttachmentDefinitionsList, filterLabel: props.filterLabel, canCreate: true, createProps: createProps })));\n};\nNetworkAttachmentDefinitionsPage.displayName = 'NetworkAttachmentDefinitionsPage';\nexport default NetworkAttachmentDefinitionsPage;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/network-attachment-definition-plugin/src/components/network-attachment-definitions/NetworkAttachmentDefinition.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/network-attachment-definition-plugin/src/components/network-attachment-definitions/NetworkAttachmentDefinition.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport {\n  ListPage,\n  Table,\n  TableData,\n  TableRow,\n  RowFunction,\n} from '@console/internal/components/factory';\nimport { Kebab, ResourceKebab, ResourceLink } from '@console/internal/components/utils';\nimport { NamespaceModel } from '@console/internal/models';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { dimensifyHeader, dimensifyRow, getName, getNamespace, getUID } from '@console/shared';\nimport { NetworkAttachmentDefinitionModel } from '../../models';\nimport { getConfigAsJSON, getType } from '../../selectors';\nimport { NetworkAttachmentDefinitionKind } from '../../types';\nimport { NetAttachDefBundle, NetworkAttachmentDefinitionsPageProps } from './types';\n\nconst { common } = Kebab.factory;\nconst menuActions = [...common];\n\nconst tableColumnClasses = [\n  classNames('col-lg-4', 'col-md-4', 'col-sm-6', 'col-xs-6'),\n  classNames('col-lg-4', 'col-md-4', 'hidden-sm', 'hidden-xs'),\n  classNames('col-lg-4', 'col-md-4', 'col-sm-6', 'col-xs-6'),\n  Kebab.columnClass,\n];\n\nconst NetworkAttachmentDefinitionsHeader = () =>\n  dimensifyHeader(\n    [\n      {\n        title: 'Name',\n        sortField: 'name',\n        transforms: [sortable],\n      },\n      {\n        title: 'Namespace',\n        sortField: 'namespace',\n        transforms: [sortable],\n      },\n      {\n        title: 'Type',\n        sortField: 'type',\n        transforms: [sortable],\n      },\n      {\n        title: '',\n      },\n    ],\n    tableColumnClasses,\n  );\n\nconst NetworkAttachmentDefinitionsRow: RowFunction<NetAttachDefBundle> = ({\n  obj: { name, namespace, type, metadata, netAttachDef },\n  index,\n  key,\n  style,\n}) => {\n  const dimensify = dimensifyRow(tableColumnClasses);\n\n  return (\n    <TableRow id={metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={dimensify()}>\n        <ResourceLink\n          kind={referenceForModel(NetworkAttachmentDefinitionModel)}\n          name={name}\n          namespace={namespace}\n        />\n      </TableData>\n      <TableData className={dimensify()}>\n        <ResourceLink kind={NamespaceModel.kind} name={namespace} title={namespace} />\n      </TableData>\n      <TableData className={dimensify()}>\n        {type || <span className=\"text-secondary\">Not available</span>}\n      </TableData>\n      <TableData className={dimensify(true)}>\n        <ResourceKebab\n          actions={menuActions}\n          kind={referenceForModel(NetworkAttachmentDefinitionModel)}\n          resource={netAttachDef}\n        />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst getNetAttachDefsData = (nadList: NetworkAttachmentDefinitionKind[]): NetAttachDefBundle[] => {\n  return nadList\n    ? nadList.map((netAttachDef) => {\n        const configJSON = getConfigAsJSON(netAttachDef);\n        return {\n          netAttachDef,\n          metadata: { uid: getUID(netAttachDef) },\n          configJSON,\n          // for sorting\n          name: getName(netAttachDef),\n          namespace: getNamespace(netAttachDef),\n          type: getType(configJSON),\n        };\n      })\n    : [];\n};\n\nexport const NetworkAttachmentDefinitionsList: React.FC<React.ComponentProps<typeof Table>> = (\n  props,\n) => {\n  return (\n    <Table\n      data={getNetAttachDefsData(props.data)}\n      aria-label={NetworkAttachmentDefinitionModel.labelPlural}\n      Header={NetworkAttachmentDefinitionsHeader}\n      Row={NetworkAttachmentDefinitionsRow}\n      virtualize\n      loaded={props.loaded}\n      label={props.label}\n    />\n  );\n};\nNetworkAttachmentDefinitionsList.displayName = 'NetworkAttachmentDefinitionsList';\n\nexport const NetworkAttachmentDefinitionsPage: React.FC<NetworkAttachmentDefinitionsPageProps> = (\n  props,\n) => {\n  const namespace = props.namespace || props.match?.params?.ns || 'default';\n  const createProps = {\n    to: `/k8s/ns/${namespace}/${referenceForModel(NetworkAttachmentDefinitionModel)}/~new/form`,\n  };\n\n  return (\n    <ListPage\n      {...props}\n      title={NetworkAttachmentDefinitionModel.labelPlural}\n      kind={referenceForModel(NetworkAttachmentDefinitionModel)}\n      ListComponent={NetworkAttachmentDefinitionsList}\n      filterLabel={props.filterLabel}\n      canCreate\n      createProps={createProps}\n    />\n  );\n};\nNetworkAttachmentDefinitionsPage.displayName = 'NetworkAttachmentDefinitionsPage';\n\nexport default NetworkAttachmentDefinitionsPage;\n"]}]}