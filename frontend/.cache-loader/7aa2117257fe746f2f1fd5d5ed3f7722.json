{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/camel-case-wrap.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/camel-case-wrap.tsx","mtime":1616735742480},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nconst MEMO = {};\nexport const CamelCaseWrap = ({ value }) => {\n    if (!value) {\n        return '-';\n    }\n    if (MEMO[value]) {\n        return MEMO[value];\n    }\n    // Add word break points before capital letters (but keep consecutive capital letters together).\n    const words = value.match(/[A-Z]+[^A-Z]*|[^A-Z]+/g);\n    const rendered = (React.createElement(\"span\", null, words.map((word, i) => (React.createElement(React.Fragment, { key: i },\n        word,\n        i !== words.length - 1 && React.createElement(\"wbr\", null))))));\n    MEMO[value] = rendered;\n    return rendered;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/camel-case-wrap.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/camel-case-wrap.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,MAAM,IAAI,GAAG,EAAE,CAAC;AAEhB,MAAM,CAAC,MAAM,aAAa,GAAkC,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE;IACxE,IAAI,CAAC,KAAK,EAAE;QACV,OAAO,GAAG,CAAC;KACZ;IAED,IAAI,IAAI,CAAC,KAAK,CAAC,EAAE;QACf,OAAO,IAAI,CAAC,KAAK,CAAC,CAAC;KACpB;IAED,gGAAgG;IAChG,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,wBAAwB,CAAC,CAAC;IACpD,MAAM,QAAQ,GAAG,CACf,kCACG,KAAK,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CACtB,oBAAC,KAAK,CAAC,QAAQ,IAAC,GAAG,EAAE,CAAC;QACnB,IAAI;QACJ,CAAC,KAAK,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,gCAAO,CACnB,CAClB,CAAC,CACG,CACR,CAAC;IACF,IAAI,CAAC,KAAK,CAAC,GAAG,QAAQ,CAAC;IACvB,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC","sourcesContent":["import * as React from 'react';\n\nconst MEMO = {};\n\nexport const CamelCaseWrap: React.SFC<CamelCaseWrapProps> = ({ value }) => {\n  if (!value) {\n    return '-';\n  }\n\n  if (MEMO[value]) {\n    return MEMO[value];\n  }\n\n  // Add word break points before capital letters (but keep consecutive capital letters together).\n  const words = value.match(/[A-Z]+[^A-Z]*|[^A-Z]+/g);\n  const rendered = (\n    <span>\n      {words.map((word, i) => (\n        <React.Fragment key={i}>\n          {word}\n          {i !== words.length - 1 && <wbr />}\n        </React.Fragment>\n      ))}\n    </span>\n  );\n  MEMO[value] = rendered;\n  return rendered;\n};\n\nexport type CamelCaseWrapProps = {\n  value: string;\n};\n"]}]}