{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/create-sample.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/create-sample.tsx","mtime":1618309685320},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { useFormContext, Controller } from 'react-hook-form';\nimport { WithCommonForm } from './form/create-form';\nimport { SelectorInput } from '../utils';\nimport { RadioGroup } from './utils/radio';\nimport { Section } from './utils/section';\nimport { InputSelectBox } from './utils/inputSelectBox';\nimport { Dropdown, ContainerDropdown } from './utils/dropdown';\nimport { ResourceDropdown } from './utils/resource-dropdown';\nimport { ResourceListDropdown, ResourceListDropdownWithDataToolbar } from './utils/resource-list-dropdown';\nimport { KeyValueListEditor } from './utils/key-value-list-editor';\nimport { TagsLabel } from './utils/tags-label';\nimport { NumberSpinner } from './utils/number-spinner';\nimport { ListView } from './utils/list-view';\nimport { Button } from '@patternfly/react-core';\nconst defaultValues = {\n    // requestDo에 넣어줄 형식으로 defaultValues 작성\n    metadata: {\n        name: 'test-name',\n        keyvaluelist: [\n            { key: 'A', value: 'aaa' },\n            { key: 'B', value: 'bbb' },\n            { key: 'C', value: 'ccc' },\n            { key: 'D', value: 'ddd' },\n            { key: 'E', value: 'eee' },\n        ],\n        tags: ['AAA', 'BBB'],\n    },\n    spec: {\n        resources: 'cpu',\n    },\n    keyValueList: [\n        {\n            key: 'AAA',\n            value: 'aaa',\n        },\n        {\n            key: 'BBB',\n            value: 'bbb',\n        },\n        {\n            key: 'CCC',\n            value: 'ccc',\n        },\n        {\n            key: 'DDD',\n            value: 'ddd',\n        },\n    ],\n    numList: [\n        {\n            name: 'Item1',\n            number: 3,\n        },\n        {\n            name: 'Item2',\n            number: 5,\n        },\n    ],\n    dropdown1: 'Ti',\n};\nconst ClusterResourceList = [\n    {\n        \"kind\": \"ClusterManager\",\n        \"apiVersion\": \"cluster.tmax.io/v1alpha1\",\n        \"metadata\": {\n            \"name\": \"jmc-zgw2v\",\n            \"uid\": \"1a482d7d-ac35-46d3-8496-a94688fc6d0e\",\n        },\n        \"fakeMetadata\": {\n            \"fakename\": \"jmc\"\n        },\n    },\n    {\n        \"kind\": \"ClusterClaim\",\n        \"apiVersion\": \"cluster.tmax.io/v1alpha1\",\n        \"metadata\": {\n            \"name\": \"example\",\n            \"uid\": \"436b6e22-748e-4e04-aea5-156f2ed35fa0\",\n        },\n    }\n];\nconst sampleFormFactory = params => {\n    return WithCommonForm(CreateSampleComponent, params, defaultValues);\n};\nconst CreateSampleComponent = props => {\n    const { control } = useFormContext();\n    const updateSelectedClusterItems = (selection) => {\n        //Do Something\n        console.log('updateSelectedClusterItems: ', selection);\n    };\n    const onSelectedItemChange = (items) => {\n        //DO Something\n        console.log(\"hi\");\n    };\n    const resources = [\n        // RadioGroup 컴포넌트에 넣어줄 items\n        {\n            title: 'Cpu',\n            value: 'cpu',\n        },\n        {\n            title: 'Gpu',\n            value: 'gpu',\n        },\n        {\n            title: 'Memory',\n            value: 'memory',\n        },\n    ];\n    const dropdownUnits = {\n        Mi: 'MiB',\n        Gi: 'GiB',\n        Ti: 'TiB',\n    };\n    const containers = { test: { name: 'test', order: 0 }, sidecar: { name: 'sidecar' }, sidecar2: { name: 'sidecar2' } };\n    const initContainers = { initupload: { name: 'initupload', order: 0 }, ['place-entrypoint']: { name: 'place-entrypoint' }, ['place-entrypoint2']: { name: 'place-entrypoint2' } };\n    const listHeaderFragment = (React.createElement(\"div\", { className: \"row pairs-list__heading\" },\n        React.createElement(\"div\", { className: \"col-xs-4 text-secondary text-uppercase\" }, \"NAME\"),\n        React.createElement(\"div\", { className: \"col-xs-4 text-secondary text-uppercase\" }, \"NUM\"),\n        React.createElement(\"div\", { className: \"col-xs-1 co-empty__header\" })));\n    const listItemRenderer = (register, name, item, index, ListActions, ListDefaultIcons) => (React.createElement(\"div\", { className: \"row\", key: item.id },\n        React.createElement(\"div\", { className: \"col-xs-4 pairs-list__name-field\" },\n            React.createElement(\"input\", { ref: register(), className: \"pf-c-form-control\", name: `metadata.numList[${index}].name`, defaultValue: item.name })),\n        React.createElement(\"div\", { className: \"col-xs-4 pairs-list__value-field\" },\n            React.createElement(NumberSpinner, { initialValue: item.number, min: -15, max: 15, name: `metadata.numList[${index}].number` })),\n        React.createElement(\"div\", { className: \"col-xs-1 pairs-list__action\" },\n            React.createElement(Button, { type: \"button\", \"data-test-id\": \"pairs-list__delete-btn\", className: \"pairs-list__span-btns\", onClick: () => {\n                    ListActions.remove(index);\n                }, variant: \"plain\" }, ListDefaultIcons.deleteIcon))));\n    return (React.createElement(\"div\", null,\n        React.createElement(Section, { label: \"Labels\", id: \"label\", description: \"\\uC774\\uAC83\\uC740 Label\\uC785\\uB2C8\\uB2E4.\" },\n            React.createElement(Controller, { name: \"metadata.labels\", id: \"label\", labelClassName: \"co-text-sample\", as: SelectorInput, control: control, tags: [] })),\n        React.createElement(Section, { id: \"resources\", label: \"Radio Group\" },\n            React.createElement(RadioGroup, { name: \"spec.resources\" // 서버에 보낼 데이터에서의 path (필수)\n                , items: resources, inline: false })),\n        React.createElement(Section, { id: \"cpu\", label: \"Input Selectbox\" },\n            React.createElement(InputSelectBox, { textName: \"spec.cpu\", id: \"cpu\", dropdownName: \"spec.cpuRange\", selectedKey: \"Mi\", items: dropdownUnits })),\n        React.createElement(Section, { id: \"section\", label: \"Grid Section\", isRequired: true },\n            React.createElement(Section, { id: \"label\", label: \"Label (for Section)\" },\n                React.createElement(Controller, { name: \"metadata.section.label\", id: \"label\", labelClassName: \"co-text-sample\", as: SelectorInput, control: control, tags: [] })),\n            React.createElement(Section, { id: \"cpu\", label: \"Input Selectbox (for Section)\" },\n                React.createElement(InputSelectBox, { textName: \"spec.section.cpu\", id: \"cpu\", dropdownName: \"spec.section.cpuRange\", selectedKey: \"Mi\", items: dropdownUnits })),\n            React.createElement(Section, { id: \"resources\", label: \"Radio Group (for Section)\" },\n                React.createElement(RadioGroup, { name: \"spec.section.resources\" // 서버에 보낼 데이터에서의 path (필수)\n                    , items: resources, inline: false }))),\n        React.createElement(Section, { id: \"dropdown\", label: \"Dropdown\" },\n            React.createElement(Dropdown, { name: \"dropdown1\", className: \"btn-group\", items: dropdownUnits, required: true, buttonClassName: \"dropdown-btn\" // 선택된 아이템 보여주는 button (title) 부분 className\n                , itemClassName: \"dropdown-item\" // 드롭다운 아이템 리스트 전체의 className - 각 row를 의미하는 것은 아님\n             }),\n            React.createElement(ContainerDropdown, { name: \"containerDropdown1\", containers: containers, initContainers: initContainers })),\n        React.createElement(Section, { id: \"resourcedropdown\", label: \"Resource Dropdown\" },\n            React.createElement(ResourceDropdown, { name: \"RD-single\", placeholder: \"select one deployment\", resources: [\n                    {\n                        kind: 'Deployment',\n                        namespace: 'catalog',\n                        prop: 'deployment'\n                    },\n                ], type: 'single', useHookForm: true }),\n            React.createElement(ResourceDropdown, { name: \"RD-multiple\", resources: [\n                    {\n                        kind: 'Pod',\n                        namespace: 'default',\n                        prop: 'pod',\n                    },\n                ], defaultValue: [\"new-pipeline-test-shtehy-sum-params-qkg57-pod-l47lv\"], type: 'multiple', showAll: true, useHookForm: true })),\n        React.createElement(Section, { id: \"resourcelistdropdown\", label: \"Resource List Dropdown\" },\n            React.createElement(ResourceListDropdown, { resourceList: ClusterResourceList, autocompletePlaceholder: \"search by name\", placeholder: \"Resource Dropdown\" // *single에서만 사용 가능\n                , type: \"single\" // 필수 type: single / multiple\n             }),\n            React.createElement(ResourceListDropdown, { name: \"RLD-multiple\", resourceList: ClusterResourceList, onChange: updateSelectedClusterItems, resourceType: \"Cluster and Cluster Claim\", autocompletePlaceholder: \"search by name\", type: \"multiple\" // 필수 type: single / multiple\n                , useHookForm: true }),\n            React.createElement(ResourceListDropdownWithDataToolbar // react hook form 사용하지 않는 예시\n            , { resourceList: ClusterResourceList, showAll: true, resourceType: \"Cluster and Cluster Claim\" // title, placeholder, all resources, chip group 에 적용되는 문구 (title, placeholder는 직접 지정하는 것의 우선순위가 더 높음)\n                , autocompletePlaceholder: \"search by name\" // 검색란 placeholder\n                , onSelectedItemChange: onSelectedItemChange }),\n            React.createElement(ResourceListDropdownWithDataToolbar // react hook form 사용하는 예시\n            , { name: \"ResourceListDropdownWithDataToolbar1\", resourceList: ClusterResourceList, showAll: false, title: \"select Resources\" // 드롭다운 title 지정\n                , resourceType: \"Cluster and Cluster Claim\", useHookForm: true })),\n        React.createElement(Section, { id: \"numberspinner\", label: \"Number Spinner\" },\n            React.createElement(NumberSpinner, { initialValue: 0, min: -5, max: 5, name: \"spinner1\" // 한 페이지에 spinner 여러 개 만들 경우 name에 unique한 값을 넣어줘야 됨 (한개만 만들 땐 name이 필수 아님)\n             })),\n        React.createElement(Section, { id: \"tagslabel\", label: \"Tags Label\" },\n            React.createElement(TagsLabel, { name: \"metadata.tags\" // 서버에 보낼 데이터에서의 path (필수)\n                , placeholder: \"Enter tag\" // tag가 없을 때 보여줄 placeholder (선택)\n             })),\n        React.createElement(Section, { id: \"list\", label: \"Key Value List\" },\n            React.createElement(KeyValueListEditor, { name: \"metadata.keyvaluelist\" // 서버에 보낼 데이터에서의 path (필수)\n                , disableReorder: false })),\n        React.createElement(Section, { id: \"listviewsection1\", label: \"Default Key/Value List View\" },\n            React.createElement(ListView, { name: \"metadata.keyValueList\", addButtonText: \"Add Key/Value\" })),\n        React.createElement(Section, { id: \"listviewsection2\", label: \"Customized List View\" },\n            React.createElement(ListView, { name: \"metadata.numList\", addButtonText: \"Add Name/Num\", headerFragment: listHeaderFragment, itemRenderer: listItemRenderer, defaultItem: { name: '', number: 0 } }))));\n};\nexport const CreateSample = props => {\n    const formComponent = sampleFormFactory(props.match.params);\n    const SampleFormComponent = formComponent;\n    return React.createElement(SampleFormComponent, { fixed: {}, explanation: \"\", titleVerb: \"Create\", onSubmitCallback: onSubmitCallback, isCreate: true });\n};\nexport const onSubmitCallback = data => {\n    // submit하기 전에 data를 가공해야 할 경우\n    let labels = SelectorInput.objectify(data.metadata.labels);\n    delete data.metadata.labels;\n    data = _.defaultsDeep(data, { metadata: { labels: labels } });\n    return data;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/create-sample.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/create-sample.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { match as RMatch } from 'react-router';\nimport { useFormContext, Controller } from 'react-hook-form';\nimport { WithCommonForm } from './form/create-form';\nimport { SelectorInput } from '../utils';\nimport { RadioGroup } from './utils/radio';\nimport { Section } from './utils/section';\nimport { InputSelectBox } from './utils/inputSelectBox';\nimport { Dropdown, ContainerDropdown } from './utils/dropdown';\nimport { ResourceDropdown } from './utils/resource-dropdown';\nimport { ResourceListDropdown, ResourceListDropdownWithDataToolbar } from './utils/resource-list-dropdown';\nimport { KeyValueListEditor } from './utils/key-value-list-editor';\nimport { TagsLabel } from './utils/tags-label';\nimport { NumberSpinner } from './utils/number-spinner';\nimport { ListView } from './utils/list-view';\nimport { Button } from '@patternfly/react-core';\n\nconst defaultValues = {\n  // requestDo에 넣어줄 형식으로 defaultValues 작성\n  metadata: {\n    name: 'test-name',\n    keyvaluelist: [\n      { key: 'A', value: 'aaa' },\n      { key: 'B', value: 'bbb' },\n      { key: 'C', value: 'ccc' },\n      { key: 'D', value: 'ddd' },\n      { key: 'E', value: 'eee' },\n    ],\n    tags: ['AAA', 'BBB'],\n  },\n  spec: {\n    resources: 'cpu',\n  },\n  keyValueList: [\n    {\n      key: 'AAA',\n      value: 'aaa',\n    },\n    {\n      key: 'BBB',\n      value: 'bbb',\n    },\n    {\n      key: 'CCC',\n      value: 'ccc',\n    },\n    {\n      key: 'DDD',\n      value: 'ddd',\n    },\n  ],\n  numList: [\n    {\n      name: 'Item1',\n      number: 3,\n    },\n    {\n      name: 'Item2',\n      number: 5,\n    },\n  ],\n  dropdown1: 'Ti',\n};\n\nconst ClusterResourceList = [\n  {\n    \"kind\": \"ClusterManager\",\n    \"apiVersion\": \"cluster.tmax.io/v1alpha1\",\n    \"metadata\": {\n      \"name\": \"jmc-zgw2v\",\n      \"uid\": \"1a482d7d-ac35-46d3-8496-a94688fc6d0e\",\n    },\n    \"fakeMetadata\": {\n      \"fakename\": \"jmc\"\n    },\n  },\n  {\n    \"kind\": \"ClusterClaim\",\n    \"apiVersion\": \"cluster.tmax.io/v1alpha1\",\n    \"metadata\": {\n      \"name\": \"example\",\n      \"uid\": \"436b6e22-748e-4e04-aea5-156f2ed35fa0\",\n    },\n  }\n];\n\nconst sampleFormFactory = params => {\n  return WithCommonForm(CreateSampleComponent, params, defaultValues);\n};\n\nconst CreateSampleComponent: React.FC<SampleFormProps> = props => {\n  const { control } = useFormContext();\n\n  const updateSelectedClusterItems = (selection: string) => { // selection: {resource}.metadata.uid | 'All'\n    //Do Something\n    console.log('updateSelectedClusterItems: ', selection)\n  };\n\n  const onSelectedItemChange = (items: Set<string>) => {\n    //DO Something\n    console.log(\"hi\")\n  };\n\n  const resources = [\n    // RadioGroup 컴포넌트에 넣어줄 items\n    {\n      title: 'Cpu',\n      value: 'cpu',\n    },\n    {\n      title: 'Gpu',\n      value: 'gpu',\n    },\n    {\n      title: 'Memory',\n      value: 'memory',\n    },\n  ];\n  const dropdownUnits = {\n    Mi: 'MiB',\n    Gi: 'GiB',\n    Ti: 'TiB',\n  };\n  const containers = { test: { name: 'test', order: 0 }, sidecar: { name: 'sidecar' }, sidecar2: { name: 'sidecar2' } };\n  const initContainers = { initupload: { name: 'initupload', order: 0 }, ['place-entrypoint']: { name: 'place-entrypoint' }, ['place-entrypoint2']: { name: 'place-entrypoint2' } };\n\n  const listHeaderFragment = (\n    <div className=\"row pairs-list__heading\">\n      <div className=\"col-xs-4 text-secondary text-uppercase\">NAME</div>\n      <div className=\"col-xs-4 text-secondary text-uppercase\">NUM</div>\n      <div className=\"col-xs-1 co-empty__header\" />\n    </div>\n  );\n\n  const listItemRenderer = (register, name, item, index, ListActions, ListDefaultIcons) => (\n    <div className=\"row\" key={item.id}>\n      <div className=\"col-xs-4 pairs-list__name-field\">\n        <input ref={register()} className=\"pf-c-form-control\" name={`metadata.numList[${index}].name`} defaultValue={item.name}></input>\n      </div>\n      <div className=\"col-xs-4 pairs-list__value-field\">\n        <NumberSpinner initialValue={item.number} min={-15} max={15} name={`metadata.numList[${index}].number`} />\n      </div>\n      <div className=\"col-xs-1 pairs-list__action\">\n        <Button\n          type=\"button\"\n          data-test-id=\"pairs-list__delete-btn\"\n          className=\"pairs-list__span-btns\"\n          onClick={() => {\n            ListActions.remove(index);\n          }}\n          variant=\"plain\"\n        >\n          {ListDefaultIcons.deleteIcon}\n        </Button>\n      </div>\n    </div>\n  );\n\n  return (\n    <div>\n      <Section label=\"Labels\" id=\"label\" description=\"이것은 Label입니다.\">\n        <Controller name=\"metadata.labels\" id=\"label\" labelClassName=\"co-text-sample\" as={SelectorInput} control={control} tags={[]} />\n      </Section>\n      <Section id=\"resources\" label=\"Radio Group\">\n        <RadioGroup\n          name=\"spec.resources\" // 서버에 보낼 데이터에서의 path (필수)\n          items={resources} // [{title: '', value: ''}] (필수)\n          inline={false} // inline속성 먹일거면 true, 아니면 빼면 됨 (선택)\n        />\n      </Section>\n      <Section id=\"cpu\" label=\"Input Selectbox\">\n        <InputSelectBox textName=\"spec.cpu\" id=\"cpu\" dropdownName=\"spec.cpuRange\" selectedKey=\"Mi\" items={dropdownUnits} />\n      </Section>\n      <Section id=\"section\" label=\"Grid Section\" isRequired={true}>\n        {/* sample로 각각다른 3개 node 넣어봄. 1,2,3,4 개 일 경우 다 정상동작 하는 것 확인.*/}\n        <Section id=\"label\" label=\"Label (for Section)\">\n          <Controller name=\"metadata.section.label\" id=\"label\" labelClassName=\"co-text-sample\" as={SelectorInput} control={control} tags={[]} />\n        </Section>\n        <Section id=\"cpu\" label=\"Input Selectbox (for Section)\">\n          <InputSelectBox textName=\"spec.section.cpu\" id=\"cpu\" dropdownName=\"spec.section.cpuRange\" selectedKey=\"Mi\" items={dropdownUnits} />\n        </Section>\n        <Section id=\"resources\" label=\"Radio Group (for Section)\">\n          <RadioGroup\n            name=\"spec.section.resources\" // 서버에 보낼 데이터에서의 path (필수)\n            items={resources} // [{title: '', value: ''}] (필수)\n            inline={false} // inline속성 먹일거면 true, 아니면 빼면 됨 (선택)\n          />\n        </Section>\n      </Section>\n      <Section id=\"dropdown\" label=\"Dropdown\">\n        <Dropdown\n          name=\"dropdown1\"\n          className=\"btn-group\"\n          items={dropdownUnits} // (필수)\n          required={true}\n          buttonClassName=\"dropdown-btn\" // 선택된 아이템 보여주는 button (title) 부분 className\n          itemClassName=\"dropdown-item\" // 드롭다운 아이템 리스트 전체의 className - 각 row를 의미하는 것은 아님\n        />\n        <ContainerDropdown\n          name=\"containerDropdown1\"\n          containers={containers} // (필수)\n          initContainers={initContainers}\n        />\n      </Section>\n      <Section id=\"resourcedropdown\" label=\"Resource Dropdown\">\n        <ResourceDropdown\n          name=\"RD-single\"\n          placeholder=\"select one deployment\"\n          resources={[\n            {\n              kind: 'Deployment',\n              namespace: 'catalog', // 옵션\n              prop: 'deployment'\n            },\n          ]}\n          type='single'\n          useHookForm\n        />\n        <ResourceDropdown\n          name=\"RD-multiple\"\n          resources={[\n            {\n              kind: 'Pod',\n              namespace: 'default', // 옵션\n              prop: 'pod',\n            },\n          ]}\n          defaultValue={[\"new-pipeline-test-shtehy-sum-params-qkg57-pod-l47lv\"]} // 옵션\n          type='multiple'\n          showAll={true}\n          useHookForm\n        />\n      </Section>\n      <Section id=\"resourcelistdropdown\" label=\"Resource List Dropdown\">\n        <ResourceListDropdown\n          resourceList={ClusterResourceList} // 필수\n          autocompletePlaceholder=\"search by name\"\n          placeholder=\"Resource Dropdown\" // *single에서만 사용 가능\n          type=\"single\" // 필수 type: single / multiple\n        />\n        <ResourceListDropdown\n          name=\"RLD-multiple\"\n          resourceList={ClusterResourceList} // 필수\n          onChange={updateSelectedClusterItems} // '아이템' 선택될 때마다 호출됨\n          resourceType=\"Cluster and Cluster Claim\" \n          autocompletePlaceholder=\"search by name\"\n          type=\"multiple\" // 필수 type: single / multiple\n          useHookForm\n        />\n        <ResourceListDropdownWithDataToolbar // react hook form 사용하지 않는 예시\n          resourceList={ClusterResourceList} // 필수\n          showAll={true} // 드롭다운에 all resource 라는 항목이 생긴다.\n          resourceType=\"Cluster and Cluster Claim\" // title, placeholder, all resources, chip group 에 적용되는 문구 (title, placeholder는 직접 지정하는 것의 우선순위가 더 높음)\n          autocompletePlaceholder=\"search by name\" // 검색란 placeholder\n          onSelectedItemChange={onSelectedItemChange} // 선택된 아이템 '리스트' 변동될 때마다 호출되는 함수\n        />\n        <ResourceListDropdownWithDataToolbar // react hook form 사용하는 예시\n          name=\"ResourceListDropdownWithDataToolbar1\"\n          resourceList={ClusterResourceList} // 필수\n          showAll={false}\n          title=\"select Resources\" // 드롭다운 title 지정\n          resourceType=\"Cluster and Cluster Claim\"\n          useHookForm\n        />\n      </Section>\n      <Section id=\"numberspinner\" label=\"Number Spinner\">\n        <NumberSpinner\n          initialValue={0}\n          min={-5}\n          max={5}\n          name=\"spinner1\" // 한 페이지에 spinner 여러 개 만들 경우 name에 unique한 값을 넣어줘야 됨 (한개만 만들 땐 name이 필수 아님)\n        />\n      </Section>\n      <Section id=\"tagslabel\" label=\"Tags Label\">\n        <TagsLabel\n          name=\"metadata.tags\" // 서버에 보낼 데이터에서의 path (필수)\n          placeholder=\"Enter tag\" // tag가 없을 때 보여줄 placeholder (선택)\n        />\n      </Section>\n      <Section id=\"list\" label=\"Key Value List\">\n        <KeyValueListEditor\n          name=\"metadata.keyvaluelist\" // 서버에 보낼 데이터에서의 path (필수)\n          disableReorder={false} // 순서바꾸기 제공여부 설정. 기본값은 false (선택)\n        />\n      </Section>\n      <Section id=\"listviewsection1\" label=\"Default Key/Value List View\">\n        <ListView name=\"metadata.keyValueList\" addButtonText=\"Add Key/Value\" />\n      </Section>\n      <Section id=\"listviewsection2\" label=\"Customized List View\">\n        <ListView name=\"metadata.numList\" addButtonText=\"Add Name/Num\" headerFragment={listHeaderFragment} itemRenderer={listItemRenderer} defaultItem={{ name: '', number: 0 }} />\n      </Section>\n    </div>\n  );\n};\n\nexport const CreateSample: React.FC<CreateSampleProps> = props => {\n  const formComponent = sampleFormFactory(props.match.params);\n  const SampleFormComponent = formComponent;\n  return <SampleFormComponent fixed={{}} explanation=\"\" titleVerb=\"Create\" onSubmitCallback={onSubmitCallback} isCreate={true} />;\n};\n\nexport const onSubmitCallback = data => {\n  // submit하기 전에 data를 가공해야 할 경우\n  let labels = SelectorInput.objectify(data.metadata.labels);\n  delete data.metadata.labels;\n  data = _.defaultsDeep(data, { metadata: { labels: labels } });\n  return data;\n};\n\ntype CreateSampleProps = {\n  match: RMatch<{\n    type?: string;\n  }>;\n  fixed: object;\n  explanation: string;\n  titleVerb: string;\n  saveButtonText?: string;\n  isCreate: boolean;\n};\n\ntype SampleFormProps = {\n  onChange: Function;\n  stringData: {\n    [key: string]: string;\n  };\n  isCreate: boolean;\n};\n"]}]}