{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/nodes/node-dashboard/NodeHealth.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/nodes/node-dashboard/NodeHealth.tsx","mtime":1616735742370},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Gallery, GalleryItem, Alert } from '@patternfly/react-core';\nimport HealthBody from '@console/shared/src/components/dashboard/status-card/HealthBody';\nimport HealthItem from '@console/shared/src/components/dashboard/status-card/HealthItem';\nimport { HealthState, healthStateMapping, } from '@console/shared/src/components/dashboard/status-card/states';\nimport { getNodeMachineNameAndNamespace } from '@console/shared';\nimport { MachineModel, MachineHealthCheckModel } from '@console/internal/models';\nimport { referenceForModel, } from '@console/internal/module/k8s';\nimport { useK8sWatchResource, } from '@console/internal/components/utils/k8s-watch-hook';\nimport { pluralize } from '@console/internal/components/utils/details-page';\nimport { LabelSelector } from '@console/internal/module/k8s/label-selector';\nimport Status, { StatusPopupSection, } from '@console/shared/src/components/dashboard/status-card/StatusPopup';\nimport { ResourceLink } from '@console/internal/components/utils';\nimport { NodeDashboardContext } from './NodeDashboardContext';\nimport NodeStatus from '../NodeStatus';\nimport { CONDITIONS_WARNING } from './messages';\nimport './node-health.scss';\nexport const HealthChecksPopup = ({ conditions = [], machineHealthChecks, }) => {\n    let conditionFailing = false;\n    let reboot = false;\n    const grouppedConditions = Object.values(_.groupBy(conditions.sort((a, b) => a.type.localeCompare(b.type)), (c) => c.type)).map((cds) => {\n        var _a, _b, _c;\n        const failing = cds.some((c) => c.failing);\n        if (failing) {\n            conditionFailing = true;\n            reboot =\n                ((_c = (_b = (_a = machineHealthChecks === null || machineHealthChecks === void 0 ? void 0 : machineHealthChecks[0]) === null || _a === void 0 ? void 0 : _a.metadata) === null || _b === void 0 ? void 0 : _b.annotations) === null || _c === void 0 ? void 0 : _c['machine.openshift.io/remediation-strategy']) === 'external-baremetal';\n        }\n        return {\n            title: cds[0].type,\n            value: failing ? 'Failing' : 'Okay',\n            icon: failing\n                ? healthStateMapping[HealthState.WARNING].icon\n                : healthStateMapping[HealthState.OK].icon,\n        };\n    });\n    return (React.createElement(React.Fragment, null,\n        `${MachineHealthCheckModel.labelPlural} automatically remediate node health issues.`,\n        !!(machineHealthChecks === null || machineHealthChecks === void 0 ? void 0 : machineHealthChecks.length) && (React.createElement(StatusPopupSection, { firstColumn: pluralize(machineHealthChecks.length, MachineHealthCheckModel.label, MachineHealthCheckModel.labelPlural, false) }, machineHealthChecks.map(({ metadata }) => (React.createElement(Status, { key: metadata.uid },\n            React.createElement(ResourceLink, { kind: referenceForModel(MachineHealthCheckModel), name: metadata.name, namespace: metadata.namespace, className: \"co-status-popup__title\" })))))),\n        !!conditions.length && (React.createElement(StatusPopupSection, { firstColumn: \"Conditions\", secondColumn: \"Status\" }, grouppedConditions.map((c) => (React.createElement(Status, Object.assign({}, c, { key: c.title }), c.title))))),\n        conditionFailing && (React.createElement(Alert, { variant: \"warning\", isInline: true, title: `${reboot ? 'Reboot' : 'Reprovision'} pending`, className: \"co-node-health__popup-alert\" }, CONDITIONS_WARNING(reboot))),\n        (machineHealthChecks === null || machineHealthChecks === void 0 ? void 0 : machineHealthChecks.length) > 1 && (React.createElement(Alert, { variant: \"warning\", isInline: true, title: \"Multiple resources\", className: \"co-node-health__popup-alert\" }, `Only one ${MachineHealthCheckModel.label} resource should match this node.`))));\n};\nexport const machineHealthChecksResource = {\n    isList: true,\n    kind: referenceForModel(MachineHealthCheckModel),\n};\nconst isConditionFailing = (node, { type, status, timeout }) => {\n    const nodeCondition = node.status.conditions.find((c) => c.type === type && c.status === status);\n    if (!nodeCondition) {\n        return false;\n    }\n    const transitionTime = new Date(nodeCondition.lastTransitionTime).getTime();\n    const currentTime = new Date().getTime();\n    const withTO = transitionTime + 1000 * parseInt(timeout, 10);\n    return withTO < currentTime;\n};\nexport const getMachineHealth = (node, machine, healthChecks) => {\n    const [mData, mLoaded, mLoadError] = machine;\n    const [hcData, hcLoaded, hcLoadError] = healthChecks;\n    if (mLoadError || hcLoadError) {\n        return {\n            state: HealthState.NOT_AVAILABLE,\n        };\n    }\n    if (!mLoaded || !hcLoaded) {\n        return {\n            state: HealthState.LOADING,\n        };\n    }\n    const matchingHC = hcData.filter((hc) => {\n        var _a;\n        const selector = new LabelSelector(((_a = hc.spec) === null || _a === void 0 ? void 0 : _a.selector) || {});\n        return selector.matches(mData);\n    });\n    if (!matchingHC.length) {\n        return {\n            state: HealthState.NOT_AVAILABLE,\n            noIcon: true,\n            details: 'Not configured',\n        };\n    }\n    let failingConditions = 0;\n    const conditions = _.flatten(matchingHC.map((hc) => hc.spec.unhealthyConditions.map((c) => {\n        const failing = isConditionFailing(node, c);\n        if (failing) {\n            failingConditions++;\n        }\n        return Object.assign(Object.assign({}, c), { failing });\n    })));\n    return {\n        state: failingConditions || matchingHC.length > 1 ? HealthState.WARNING : HealthState.OK,\n        details: matchingHC.length > 1\n            ? 'Multiple resources'\n            : failingConditions\n                ? `${pluralize(failingConditions, 'condition')} failing`\n                : `${pluralize(conditions.length, 'condition')} passing`,\n        conditions,\n        matchingHC,\n    };\n};\nexport const HealthChecksItem = () => {\n    const { obj, setHealthCheck } = React.useContext(NodeDashboardContext);\n    const { name, namespace } = getNodeMachineNameAndNamespace(obj);\n    const machineResource = React.useMemo(() => ({\n        kind: referenceForModel(MachineModel),\n        name,\n        namespace,\n    }), [name, namespace]);\n    const machine = useK8sWatchResource(machineResource);\n    const healthChecks = useK8sWatchResource(machineHealthChecksResource);\n    const healthState = getMachineHealth(obj, machine, healthChecks);\n    let failingHealthCheck = false;\n    let reboot = false;\n    _.forEach(healthState.conditions, (c) => {\n        var _a, _b, _c, _d;\n        if (c.failing) {\n            failingHealthCheck = true;\n            reboot =\n                ((_d = (_c = (_b = (_a = healthState.matchingHC) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.metadata) === null || _c === void 0 ? void 0 : _c.annotations) === null || _d === void 0 ? void 0 : _d['machine.openshift.io/remediation-strategy']) === 'external-baremetal';\n            return false;\n        }\n        return true;\n    });\n    setHealthCheck({\n        failingHealthCheck,\n        reboot,\n    });\n    return (React.createElement(HealthItem, Object.assign({ title: \"Health Checks\", popupTitle: \"Health Checks\" }, healthState),\n        React.createElement(HealthChecksPopup, { conditions: healthState.conditions, machineHealthChecks: healthState.matchingHC })));\n};\nconst NodeHealth = () => {\n    const { obj } = React.useContext(NodeDashboardContext);\n    return (React.createElement(HealthBody, null,\n        React.createElement(Gallery, { className: \"co-overview-status__health\", gutter: \"md\" },\n            React.createElement(GalleryItem, null,\n                React.createElement(NodeStatus, { node: obj, className: \"co-node-health__status\" })),\n            React.createElement(GalleryItem, null,\n                React.createElement(HealthChecksItem, null)))));\n};\nexport default NodeHealth;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/nodes/node-dashboard/NodeHealth.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/nodes/node-dashboard/NodeHealth.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Gallery, GalleryItem, Alert } from '@patternfly/react-core';\nimport HealthBody from '@console/shared/src/components/dashboard/status-card/HealthBody';\nimport HealthItem from '@console/shared/src/components/dashboard/status-card/HealthItem';\nimport {\n  HealthState,\n  healthStateMapping,\n} from '@console/shared/src/components/dashboard/status-card/states';\nimport { getNodeMachineNameAndNamespace } from '@console/shared';\nimport { MachineModel, MachineHealthCheckModel } from '@console/internal/models';\nimport {\n  referenceForModel,\n  MachineKind,\n  NodeKind,\n  MachineHealthCheckKind,\n  MachineHealthCondition,\n} from '@console/internal/module/k8s';\nimport {\n  useK8sWatchResource,\n  WatchK8sResult,\n  WatchK8sResource,\n} from '@console/internal/components/utils/k8s-watch-hook';\nimport { pluralize } from '@console/internal/components/utils/details-page';\nimport { LabelSelector } from '@console/internal/module/k8s/label-selector';\nimport Status, {\n  StatusPopupSection,\n} from '@console/shared/src/components/dashboard/status-card/StatusPopup';\nimport { ResourceLink } from '@console/internal/components/utils';\n\nimport { NodeDashboardContext } from './NodeDashboardContext';\nimport NodeStatus from '../NodeStatus';\nimport { CONDITIONS_WARNING } from './messages';\n\nimport './node-health.scss';\n\nexport const HealthChecksPopup: React.FC<HealthChecksPopupProps> = ({\n  conditions = [],\n  machineHealthChecks,\n}) => {\n  let conditionFailing: boolean = false;\n  let reboot: boolean = false;\n  const grouppedConditions = Object.values(\n    _.groupBy(\n      conditions.sort((a, b) => a.type.localeCompare(b.type)),\n      (c) => c.type,\n    ),\n  ).map((cds) => {\n    const failing = cds.some((c) => c.failing);\n    if (failing) {\n      conditionFailing = true;\n      reboot =\n        machineHealthChecks?.[0]?.metadata?.annotations?.[\n          'machine.openshift.io/remediation-strategy'\n        ] === 'external-baremetal';\n    }\n    return {\n      title: cds[0].type,\n      value: failing ? 'Failing' : 'Okay',\n      icon: failing\n        ? healthStateMapping[HealthState.WARNING].icon\n        : healthStateMapping[HealthState.OK].icon,\n    };\n  });\n  return (\n    <>\n      {`${MachineHealthCheckModel.labelPlural} automatically remediate node health issues.`}\n      {!!machineHealthChecks?.length && (\n        <StatusPopupSection\n          firstColumn={pluralize(\n            machineHealthChecks.length,\n            MachineHealthCheckModel.label,\n            MachineHealthCheckModel.labelPlural,\n            false,\n          )}\n        >\n          {machineHealthChecks.map(({ metadata }) => (\n            <Status key={metadata.uid}>\n              <ResourceLink\n                kind={referenceForModel(MachineHealthCheckModel)}\n                name={metadata.name}\n                namespace={metadata.namespace}\n                className=\"co-status-popup__title\"\n              />\n            </Status>\n          ))}\n        </StatusPopupSection>\n      )}\n      {!!conditions.length && (\n        <StatusPopupSection firstColumn=\"Conditions\" secondColumn=\"Status\">\n          {grouppedConditions.map((c) => (\n            <Status {...c} key={c.title}>\n              {c.title}\n            </Status>\n          ))}\n        </StatusPopupSection>\n      )}\n      {conditionFailing && (\n        <Alert\n          variant=\"warning\"\n          isInline\n          title={`${reboot ? 'Reboot' : 'Reprovision'} pending`}\n          className=\"co-node-health__popup-alert\"\n        >\n          {CONDITIONS_WARNING(reboot)}\n        </Alert>\n      )}\n      {machineHealthChecks?.length > 1 && (\n        <Alert\n          variant=\"warning\"\n          isInline\n          title=\"Multiple resources\"\n          className=\"co-node-health__popup-alert\"\n        >\n          {`Only one ${MachineHealthCheckModel.label} resource should match this node.`}\n        </Alert>\n      )}\n    </>\n  );\n};\n\nexport const machineHealthChecksResource: WatchK8sResource = {\n  isList: true,\n  kind: referenceForModel(MachineHealthCheckModel),\n};\n\nconst isConditionFailing = (\n  node: NodeKind,\n  { type, status, timeout }: MachineHealthCondition,\n): boolean => {\n  const nodeCondition = node.status.conditions.find((c) => c.type === type && c.status === status);\n  if (!nodeCondition) {\n    return false;\n  }\n  const transitionTime = new Date(nodeCondition.lastTransitionTime).getTime();\n  const currentTime = new Date().getTime();\n  const withTO = transitionTime + 1000 * parseInt(timeout, 10);\n  return withTO < currentTime;\n};\n\nexport const getMachineHealth = (\n  node: NodeKind,\n  machine: WatchK8sResult<MachineKind>,\n  healthChecks: WatchK8sResult<MachineHealthCheckKind[]>,\n): MachineHealth => {\n  const [mData, mLoaded, mLoadError] = machine;\n  const [hcData, hcLoaded, hcLoadError] = healthChecks;\n  if (mLoadError || hcLoadError) {\n    return {\n      state: HealthState.NOT_AVAILABLE,\n    };\n  }\n  if (!mLoaded || !hcLoaded) {\n    return {\n      state: HealthState.LOADING,\n    };\n  }\n  const matchingHC = hcData.filter((hc) => {\n    const selector = new LabelSelector(hc.spec?.selector || {});\n    return selector.matches(mData);\n  });\n  if (!matchingHC.length) {\n    return {\n      state: HealthState.NOT_AVAILABLE,\n      noIcon: true,\n      details: 'Not configured',\n    };\n  }\n  let failingConditions: number = 0;\n  const conditions = _.flatten(\n    matchingHC.map((hc) =>\n      hc.spec.unhealthyConditions.map((c) => {\n        const failing = isConditionFailing(node, c);\n        if (failing) {\n          failingConditions++;\n        }\n        return {\n          ...c,\n          failing,\n        };\n      }),\n    ),\n  );\n  return {\n    state: failingConditions || matchingHC.length > 1 ? HealthState.WARNING : HealthState.OK,\n    details:\n      matchingHC.length > 1\n        ? 'Multiple resources'\n        : failingConditions\n        ? `${pluralize(failingConditions, 'condition')} failing`\n        : `${pluralize(conditions.length, 'condition')} passing`,\n    conditions,\n    matchingHC,\n  };\n};\n\nexport const HealthChecksItem: React.FC = () => {\n  const { obj, setHealthCheck } = React.useContext(NodeDashboardContext);\n  const { name, namespace } = getNodeMachineNameAndNamespace(obj);\n  const machineResource = React.useMemo(\n    () => ({\n      kind: referenceForModel(MachineModel),\n      name,\n      namespace,\n    }),\n    [name, namespace],\n  );\n  const machine = useK8sWatchResource<MachineKind>(machineResource);\n  const healthChecks = useK8sWatchResource<MachineHealthCheckKind[]>(machineHealthChecksResource);\n  const healthState = getMachineHealth(obj, machine, healthChecks);\n\n  let failingHealthCheck = false;\n  let reboot = false;\n  _.forEach(healthState.conditions, (c) => {\n    if (c.failing) {\n      failingHealthCheck = true;\n      reboot =\n        healthState.matchingHC?.[0]?.metadata?.annotations?.[\n          'machine.openshift.io/remediation-strategy'\n        ] === 'external-baremetal';\n      return false;\n    }\n    return true;\n  });\n\n  setHealthCheck({\n    failingHealthCheck,\n    reboot,\n  });\n\n  return (\n    <HealthItem title=\"Health Checks\" popupTitle=\"Health Checks\" {...healthState}>\n      <HealthChecksPopup\n        conditions={healthState.conditions}\n        machineHealthChecks={healthState.matchingHC}\n      />\n    </HealthItem>\n  );\n};\n\nconst NodeHealth: React.FC = () => {\n  const { obj } = React.useContext(NodeDashboardContext);\n  return (\n    <HealthBody>\n      <Gallery className=\"co-overview-status__health\" gutter=\"md\">\n        <GalleryItem>\n          <NodeStatus node={obj} className=\"co-node-health__status\" />\n        </GalleryItem>\n        <GalleryItem>\n          <HealthChecksItem />\n        </GalleryItem>\n      </Gallery>\n    </HealthBody>\n  );\n};\n\nexport default NodeHealth;\n\ntype MachineHealthConditionWithStatus = MachineHealthCondition & {\n  failing: boolean;\n};\n\ntype MachineHealth = {\n  state: HealthState;\n  details?: string;\n  noIcon?: boolean;\n  conditions?: MachineHealthConditionWithStatus[];\n  matchingHC?: MachineHealthCheckKind[];\n};\n\ntype HealthChecksPopupProps = {\n  conditions: MachineHealthConditionWithStatus[];\n  machineHealthChecks: MachineHealthCheckKind[];\n};\n"]}]}