{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/operator-hub/operator-hub-subscribe.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/operator-hub/operator-hub-subscribe.tsx","mtime":1616735742450},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport { Helmet } from 'react-helmet';\nimport { ActionGroup, Alert, Button, Checkbox, Tooltip } from '@patternfly/react-core';\nimport { Dropdown, ExternalLink, Firehose, history, NsDropdown, openshiftHelpBase, BreadCrumbs, MsgBox, StatusBox, ResourceIcon, ResourceName, resourceListPathFromModel, } from '@console/internal/components/utils';\nimport { apiVersionForModel, apiVersionForReference, k8sCreate, k8sGet, k8sListPartialMetadata, kindForReference, referenceForModel, } from '@console/internal/module/k8s';\nimport { RadioGroup, RadioInput } from '@console/internal/components/radio';\nimport { fromRequirements } from '@console/internal/module/k8s/selector';\nimport { SubscriptionModel, OperatorGroupModel, PackageManifestModel, ClusterServiceVersionModel, } from '../../models';\nimport { NamespaceModel, RoleBindingModel, RoleModel } from '@console/internal/models';\nimport { InstallPlanApproval, InstallModeType, } from '../../types';\nimport { defaultChannelFor, supportedInstallModesFor, ClusterServiceVersionLogo, providedAPIsForChannel, referenceForProvidedAPI, iconFor, } from '../index';\nimport { installedFor, supports, providedAPIsFor, isGlobal } from '../operator-group';\nimport { CRDCard } from '../clusterserviceversion';\nimport { getInternalObjects, isInternalObject } from '../../utils';\nexport const OperatorHubSubscribeForm = (props) => {\n    var _a, _b, _c, _d, _e;\n    const [targetNamespace, setTargetNamespace] = React.useState(null);\n    const [installMode, setInstallMode] = React.useState(null);\n    const [updateChannel, setUpdateChannel] = React.useState(null);\n    const [approval, setApproval] = React.useState(InstallPlanApproval.Automatic);\n    const [cannotResolve, setCannotResolve] = React.useState(false);\n    const [suggestedNamespaceExists, setSuggestedNamespaceExists] = React.useState(false);\n    const [useSuggestedNSForSingleInstallMode, setUseSuggestedNSForSingleInstallMode,] = React.useState(true);\n    const [enableMonitoring, setEnableMonitoring] = React.useState(false);\n    const [error, setError] = React.useState('');\n    const { name: pkgName } = props.packageManifest.data[0].metadata;\n    const { provider, channels = [], packageName, catalogSource, catalogSourceNamespace, } = props.packageManifest.data[0].status;\n    const selectedUpdateChannel = updateChannel || defaultChannelFor(props.packageManifest.data[0]);\n    const selectedInstallMode = installMode ||\n        supportedInstallModesFor(props.packageManifest.data[0])(selectedUpdateChannel).reduce((preferredInstallMode, mode) => mode.type === InstallModeType.InstallModeTypeAllNamespaces\n            ? InstallModeType.InstallModeTypeAllNamespaces\n            : preferredInstallMode, InstallModeType.InstallModeTypeOwnNamespace);\n    const { currentCSVDesc } = channels.find((ch) => ch.name === selectedUpdateChannel);\n    const { installModes = [] } = currentCSVDesc;\n    const suggestedNamespace = (_a = currentCSVDesc.annotations) === null || _a === void 0 ? void 0 : _a['operatorframework.io/suggested-namespace'];\n    const operatorRequestsMonitoring = ((_b = currentCSVDesc.annotations) === null || _b === void 0 ? void 0 : _b['operatorframework.io/cluster-monitoring']) === 'true';\n    const internalObjects = getInternalObjects(currentCSVDesc, 'annotations');\n    const globalNS = ((_e = (_d = (((_c = props.operatorGroup) === null || _c === void 0 ? void 0 : _c.data) || []).find((og) => og.metadata.name === 'global-operators')) === null || _d === void 0 ? void 0 : _d.metadata) === null || _e === void 0 ? void 0 : _e.namespace) || 'openshift-operators';\n    const items = {\n        [globalNS]: React.createElement(ResourceName, { kind: \"Project\", name: globalNS }),\n    };\n    let selectedTargetNamespace = targetNamespace || props.targetNamespace;\n    if (selectedInstallMode === InstallModeType.InstallModeTypeAllNamespaces) {\n        if (suggestedNamespace) {\n            items[suggestedNamespace] = (React.createElement(ResourceName, { kind: \"Project\", name: `${suggestedNamespace} (Operator recommended)` }));\n            selectedTargetNamespace = targetNamespace || suggestedNamespace;\n        }\n        else {\n            selectedTargetNamespace = globalNS;\n        }\n    }\n    const isSuggestedNamespaceSelected = suggestedNamespace && suggestedNamespace === selectedTargetNamespace;\n    const selectedApproval = approval || InstallPlanApproval.Automatic;\n    React.useEffect(() => {\n        if (!suggestedNamespace) {\n            return;\n        }\n        setTargetNamespace(suggestedNamespace);\n        k8sGet(NamespaceModel, suggestedNamespace)\n            .then(() => setSuggestedNamespaceExists(true))\n            .catch(() => setSuggestedNamespaceExists(false));\n    }, [suggestedNamespace]);\n    React.useEffect(() => {\n        k8sListPartialMetadata(PackageManifestModel, {\n            ns: selectedTargetNamespace,\n            fieldSelector: `metadata.name=${pkgName}`,\n            labelSelector: fromRequirements([\n                { key: 'catalog', operator: 'Equals', values: [catalogSource] },\n                { key: 'catalog-namespace', operator: 'Equals', values: [catalogSourceNamespace] },\n            ]),\n        })\n            .then((list) => setCannotResolve(_.isEmpty(list)))\n            .catch(() => setCannotResolve(true));\n    }, [\n        catalogSource,\n        catalogSourceNamespace,\n        pkgName,\n        props.packageManifest.data,\n        selectedTargetNamespace,\n    ]);\n    const singleInstallMode = installModes.find((m) => m.type === InstallModeType.InstallModeTypeOwnNamespace);\n    const supportsSingle = singleInstallMode && singleInstallMode.supported;\n    const globalInstallMode = installModes.find((m) => m.type === InstallModeType.InstallModeTypeAllNamespaces);\n    const supportsGlobal = globalInstallMode && globalInstallMode.supported;\n    if (!supportsSingle && !supportsGlobal) {\n        return (React.createElement(MsgBox, { title: `${_.get(channels, '[0].currentCSVDesc.displayName')} can't be installed`, detail: \"The operator does not support single namespace or global installation modes.\" }));\n    }\n    const descFor = (mode) => {\n        if (mode === InstallModeType.InstallModeTypeAllNamespaces && supportsGlobal) {\n            return 'Operator will be available in all namespaces.';\n        }\n        if (mode === InstallModeType.InstallModeTypeOwnNamespace && supportsSingle) {\n            return 'Operator will be available in a single namespace only.';\n        }\n        return 'This mode is not supported by this Operator';\n    };\n    const subscriptionExists = (ns) => installedFor(props.subscription.data)(props.operatorGroup.data)(props.packageManifest.data[0].status.packageName)(ns);\n    const namespaceSupports = (ns) => (mode) => {\n        const operatorGroup = props.operatorGroup.data.find((og) => og.metadata.namespace === ns);\n        if (!operatorGroup || !ns) {\n            return true;\n        }\n        return supports([{ type: mode, supported: true }])(operatorGroup);\n    };\n    const conflictingProvidedAPIs = (ns) => {\n        const operatorGroups = props.operatorGroup.data.filter((og) => og.status.namespaces.includes(ns) || isGlobal(og));\n        if (_.isEmpty(operatorGroups)) {\n            return [];\n        }\n        const existingAPIs = _.flatMap(operatorGroups, providedAPIsFor);\n        const providedAPIs = providedAPIsForChannel(props.packageManifest.data[0])(selectedUpdateChannel).map((desc) => referenceForProvidedAPI(desc));\n        return _.intersection(existingAPIs, providedAPIs);\n    };\n    const submit = () => __awaiter(void 0, void 0, void 0, function* () {\n        // Clear any previous errors.\n        setError('');\n        const ns = {\n            metadata: {\n                name: selectedTargetNamespace,\n                labels: operatorRequestsMonitoring && enableMonitoring\n                    ? {\n                        'openshift.io/cluster-monitoring': 'true',\n                    }\n                    : {},\n            },\n        };\n        const rbacName = `${selectedTargetNamespace}-prometheus`;\n        const prometheusRole = {\n            kind: RoleModel.kind,\n            apiVersion: `${RoleModel.apiGroup}/${RoleModel.apiVersion}`,\n            metadata: {\n                name: rbacName,\n                namespace: selectedTargetNamespace,\n            },\n            rules: [\n                {\n                    apiGroups: [''],\n                    resources: ['services', 'endpoints', 'pods'],\n                    verbs: ['get', 'list', 'watch'],\n                },\n            ],\n        };\n        const prometheusRoleBinding = {\n            kind: RoleBindingModel.kind,\n            apiVersion: `${RoleBindingModel.apiGroup}/${RoleBindingModel.apiVersion}`,\n            metadata: {\n                name: rbacName,\n                namespace: selectedTargetNamespace,\n            },\n            roleRef: {\n                kind: 'Role',\n                name: rbacName,\n                apiGroup: RoleBindingModel.apiGroup,\n            },\n            subjects: [\n                {\n                    kind: 'ServiceAccount',\n                    name: 'prometheus-operator',\n                    namespace: 'openshift-monitoring',\n                },\n            ],\n        };\n        const operatorGroup = Object.assign({ apiVersion: apiVersionForModel(OperatorGroupModel), kind: 'OperatorGroup', metadata: {\n                generateName: `${selectedTargetNamespace}-`,\n                namespace: selectedTargetNamespace,\n            } }, (selectedInstallMode === InstallModeType.InstallModeTypeAllNamespaces\n            ? {}\n            : {\n                spec: {\n                    targetNamespaces: [selectedTargetNamespace],\n                },\n            }));\n        const subscription = {\n            apiVersion: apiVersionForModel(SubscriptionModel),\n            kind: 'Subscription',\n            metadata: {\n                name: packageName,\n                namespace: selectedTargetNamespace,\n            },\n            spec: {\n                source: catalogSource,\n                sourceNamespace: catalogSourceNamespace,\n                name: packageName,\n                startingCSV: channels.find((ch) => ch.name === selectedUpdateChannel).currentCSV,\n                channel: selectedUpdateChannel,\n                installPlanApproval: selectedApproval,\n            },\n        };\n        try {\n            if (isSuggestedNamespaceSelected && !suggestedNamespaceExists) {\n                yield k8sCreate(NamespaceModel, ns);\n                if (operatorRequestsMonitoring && enableMonitoring) {\n                    yield k8sCreate(RoleModel, prometheusRole);\n                    yield k8sCreate(RoleBindingModel, prometheusRoleBinding);\n                }\n            }\n            if (!props.operatorGroup.data.some((group) => group.metadata.namespace === selectedTargetNamespace)) {\n                yield k8sCreate(OperatorGroupModel, operatorGroup);\n            }\n            yield k8sCreate(SubscriptionModel, subscription);\n            history.push(resourceListPathFromModel(ClusterServiceVersionModel, targetNamespace || props.targetNamespace || selectedTargetNamespace));\n        }\n        catch (err) {\n            setError(err.message || 'Could not create operator subscription.');\n        }\n    });\n    const formValid = () => [selectedUpdateChannel, selectedInstallMode, selectedTargetNamespace, selectedApproval].some((v) => _.isNil(v) || _.isEmpty(v)) ||\n        subscriptionExists(selectedTargetNamespace) ||\n        !namespaceSupports(selectedTargetNamespace)(selectedInstallMode) ||\n        (selectedTargetNamespace && cannotResolve) ||\n        !_.isEmpty(conflictingProvidedAPIs(selectedTargetNamespace));\n    const formError = () => {\n        return ((error && (React.createElement(Alert, { isInline: true, className: \"co-alert co-alert--scrollable\", variant: \"danger\", title: \"An error occurred\" },\n            React.createElement(\"div\", { className: \"co-pre-line\" }, error)))) ||\n            (!namespaceSupports(selectedTargetNamespace)(selectedInstallMode) && (React.createElement(Alert, { isInline: true, className: \"co-alert\", variant: \"danger\", title: \"Namespace does not support installation mode\" },\n                \"The operator group in the \",\n                selectedTargetNamespace,\n                \" namespace does not support the\",\n                selectedInstallMode === InstallModeType.InstallModeTypeAllNamespaces\n                    ? ' global '\n                    : ' single namespace ',\n                \"installation mode.\"))) ||\n            (subscriptionExists(selectedTargetNamespace) && (React.createElement(Alert, { isInline: true, className: \"co-alert\", variant: \"danger\", title: `Operator subscription for namespace '${selectedTargetNamespace}' already exists` }))) ||\n            (!_.isEmpty(conflictingProvidedAPIs(selectedTargetNamespace)) && (React.createElement(Alert, { isInline: true, className: \"co-alert\", variant: \"danger\", title: \"Operator conflicts exist\" },\n                \"Installing Operator in selected namespace would cause conflicts with another Operator providing these APIs:\",\n                React.createElement(\"ul\", null, conflictingProvidedAPIs(selectedTargetNamespace).map((gvk) => (React.createElement(\"li\", { key: gvk },\n                    React.createElement(\"strong\", null, kindForReference(gvk)),\n                    \" \",\n                    React.createElement(\"i\", null,\n                        \"(\",\n                        apiVersionForReference(gvk),\n                        \")\")))))))) ||\n            (selectedTargetNamespace && cannotResolve && (React.createElement(Alert, { isInline: true, className: \"co-alert\", variant: \"danger\", title: \"Operator not available for selected namespaces\" }))));\n    };\n    const showMonitoringCheckbox = operatorRequestsMonitoring && _.startsWith(selectedTargetNamespace, 'openshift-');\n    const suggestedNamespaceDetails = isSuggestedNamespaceSelected && (React.createElement(React.Fragment, null,\n        React.createElement(Alert, { isInline: true, className: \"co-alert co-alert--scrollable\", variant: suggestedNamespaceExists ? 'warning' : 'info', title: suggestedNamespaceExists ? 'Namespace already exists' : 'Namespace creation' }, suggestedNamespaceExists ? (React.createElement(React.Fragment, null,\n            \"Namespace \",\n            React.createElement(\"b\", null, suggestedNamespace),\n            \" already exists and will be used. Other users can already have access to this namespace.\")) : (React.createElement(React.Fragment, null,\n            \"Namespace \",\n            React.createElement(\"b\", null, suggestedNamespace),\n            \" does not exist and will be created.\"))),\n        showMonitoringCheckbox && !suggestedNamespaceExists && (React.createElement(\"div\", { className: \"co-form-subsection\" },\n            React.createElement(Checkbox, { id: \"enable-monitoring-checkbox\", label: \"Enable operator recommended cluster monitoring on this namespace\", onChange: setEnableMonitoring, isChecked: enableMonitoring }),\n            props.packageManifest.data[0].metadata.labels['opsrc-provider'] !== 'redhat' && (React.createElement(Alert, { isInline: true, className: \"co-alert pf-c-alert--top-margin\", variant: \"warning\", title: \"Namespace monitoring\" },\n                \"Please note that installing non Red Hat operators into openshift namespaces and enabling monitoring voids user support. Enabling cluster monitoring for non Red Hat operators can lead to malicious metrics data overriding existing cluster metrics. For more information, see the\",\n                ' ',\n                React.createElement(ExternalLink, { href: `${openshiftHelpBase}monitoring/cluster_monitoring/configuring-the-monitoring-stack.html#maintenance-and-support_configuring-monitoring`, text: \"cluster monitoring documentation\" }),\n                ' ',\n                \".\"))))));\n    const globalNamespaceInstallMode = (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: \"form-group\" },\n            React.createElement(Dropdown, { id: \"dropdown-selectbox\", dropDownClassName: \"dropdown--full-width\", menuClassName: \"dropdown-menu--text-wrap\", items: items, title: React.createElement(ResourceName, { kind: \"Project\", name: isSuggestedNamespaceSelected\n                        ? `${selectedTargetNamespace} (Operator recommended)`\n                        : selectedTargetNamespace }), disabled: _.size(items) === 1, selectedKey: selectedTargetNamespace, onChange: (ns) => {\n                    setTargetNamespace(ns);\n                    setCannotResolve(false);\n                } })),\n        suggestedNamespaceDetails));\n    const singleNamespaceInstallMode = !suggestedNamespace ? (React.createElement(NsDropdown, { id: \"dropdown-selectbox\", selectedKey: selectedTargetNamespace, onChange: setTargetNamespace })) : (React.createElement(\"div\", { className: \"form-group\" },\n        React.createElement(RadioInput, { onChange: () => {\n                setUseSuggestedNSForSingleInstallMode(true);\n                setTargetNamespace(suggestedNamespace);\n            }, value: suggestedNamespace, checked: useSuggestedNSForSingleInstallMode, title: \"Operator recommended namespace:\" },\n            ' ',\n            React.createElement(ResourceIcon, { kind: \"Project\" }),\n            React.createElement(\"b\", null, suggestedNamespace)),\n        useSuggestedNSForSingleInstallMode && suggestedNamespaceDetails,\n        React.createElement(RadioInput, { onChange: () => {\n                setUseSuggestedNSForSingleInstallMode(false);\n                setTargetNamespace(null);\n            }, value: suggestedNamespace, checked: !useSuggestedNSForSingleInstallMode, title: \"Pick an existing namespace\" }),\n        !useSuggestedNSForSingleInstallMode && (React.createElement(NsDropdown, { id: \"dropdown-selectbox\", selectedKey: selectedTargetNamespace, onChange: setTargetNamespace }))));\n    const providedAPIs = providedAPIsForChannel(props.packageManifest.data[0])(selectedUpdateChannel).filter((item) => !isInternalObject(internalObjects, item.name));\n    return (React.createElement(\"div\", { className: \"row\" },\n        React.createElement(\"div\", { className: \"col-xs-6\" },\n            React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { className: \"form-group\" },\n                    React.createElement(Tooltip, { content: \"The channel to track and receive the updates from.\" },\n                        React.createElement(\"h5\", { className: \"co-required\" }, \"Update Channel\")),\n                    React.createElement(RadioGroup, { currentValue: selectedUpdateChannel, items: channels.map((ch) => ({ value: ch.name, title: ch.name })), onChange: (e) => {\n                            setUpdateChannel(e.currentTarget.value);\n                            setInstallMode(null);\n                        } })),\n                React.createElement(\"div\", { className: \"form-group\" },\n                    React.createElement(\"h5\", { className: \"co-required\" }, \"Installation Mode\"),\n                    React.createElement(\"div\", null,\n                        React.createElement(RadioInput, { onChange: (e) => {\n                                setInstallMode(e.target.value);\n                                setTargetNamespace(null);\n                                setCannotResolve(false);\n                            }, value: InstallModeType.InstallModeTypeAllNamespaces, checked: selectedInstallMode === InstallModeType.InstallModeTypeAllNamespaces, disabled: !supportsGlobal, title: \"All namespaces on the cluster\", subTitle: \"(default)\" },\n                            React.createElement(\"div\", { className: \"co-m-radio-desc\" },\n                                React.createElement(\"p\", { className: \"text-muted\" }, descFor(InstallModeType.InstallModeTypeAllNamespaces))))),\n                    React.createElement(\"div\", null,\n                        React.createElement(RadioInput, { onChange: (e) => {\n                                setInstallMode(e.target.value);\n                                setTargetNamespace(useSuggestedNSForSingleInstallMode ? suggestedNamespace : null);\n                                setCannotResolve(false);\n                            }, value: InstallModeType.InstallModeTypeOwnNamespace, checked: selectedInstallMode === InstallModeType.InstallModeTypeOwnNamespace, disabled: !supportsSingle, title: \"A specific namespace on the cluster\" },\n                            React.createElement(\"div\", { className: \"co-m-radio-desc\" },\n                                React.createElement(\"p\", { className: \"text-muted\" }, descFor(InstallModeType.InstallModeTypeOwnNamespace)))))),\n                React.createElement(\"div\", { className: \"form-group\" },\n                    React.createElement(\"h5\", { className: \"co-required\" }, \"Installed Namespace\"),\n                    selectedInstallMode === InstallModeType.InstallModeTypeAllNamespaces &&\n                        globalNamespaceInstallMode,\n                    selectedInstallMode === InstallModeType.InstallModeTypeOwnNamespace &&\n                        singleNamespaceInstallMode),\n                React.createElement(\"div\", { className: \"form-group\" },\n                    React.createElement(Tooltip, { content: \"The strategy to determine either manual or automatic updates.\" },\n                        React.createElement(\"h5\", { className: \"co-required\" }, \"Approval Strategy\")),\n                    React.createElement(RadioGroup, { currentValue: selectedApproval, items: [\n                            { value: InstallPlanApproval.Automatic, title: 'Automatic' },\n                            { value: InstallPlanApproval.Manual, title: 'Manual' },\n                        ], onChange: (e) => setApproval(e.currentTarget.value) }))),\n            React.createElement(\"div\", { className: \"co-form-section__separator\" }),\n            formError(),\n            React.createElement(ActionGroup, { className: \"pf-c-form\" },\n                React.createElement(Button, { onClick: () => submit(), isDisabled: formValid(), variant: \"primary\" }, \"Install\"),\n                React.createElement(Button, { variant: \"secondary\", onClick: () => history.push('/operatorhub') }, \"Cancel\"))),\n        React.createElement(\"div\", { className: \"col-xs-6\" },\n            React.createElement(ClusterServiceVersionLogo, { displayName: _.get(channels, '[0].currentCSVDesc.displayName'), icon: iconFor(props.packageManifest.data[0]), provider: provider }),\n            React.createElement(\"h4\", null, \"Provided APIs\"),\n            React.createElement(\"div\", { className: \"co-crd-card-row\" }, !providedAPIs.length ? (React.createElement(\"span\", { className: \"text-muted\" }, \"No Kubernetes APIs are provided by this Operator.\")) : (providedAPIs.map((api) => (React.createElement(CRDCard, { key: referenceForProvidedAPI(api), canCreate: false, crd: api, csv: null }))))))));\n};\nconst OperatorHubSubscribe = (props) => (React.createElement(StatusBox, { data: props.packageManifest.data[0], loaded: props.loaded, loadError: props.loadError },\n    React.createElement(OperatorHubSubscribeForm, Object.assign({}, props))));\nexport const OperatorHubSubscribePage = (props) => {\n    const search = new URLSearchParams({\n        'details-item': `${new URLSearchParams(window.location.search).get('pkg')}-${new URLSearchParams(window.location.search).get('catalogNamespace')}`,\n    });\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Helmet, null,\n            React.createElement(\"title\", null, \"Operator Installation\")),\n        React.createElement(\"div\", { className: \"co-m-nav-title co-m-nav-title--breadcrumbs\" },\n            React.createElement(BreadCrumbs, { breadcrumbs: [\n                    { name: 'OperatorHub', path: `/operatorhub?${search.toString()}` },\n                    { name: 'Operator Installation', path: props.match.url },\n                ] }),\n            React.createElement(\"h1\", { className: \"co-m-pane__heading\" }, \"Install Operator\"),\n            React.createElement(\"p\", { className: \"co-help-text\" }, \"Install your Operator by subscribing to one of the update channels to keep the Operator up to date. The strategy determines either manual or automatic updates.\")),\n        React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(Firehose, { resources: [\n                    {\n                        isList: true,\n                        kind: referenceForModel(OperatorGroupModel),\n                        prop: 'operatorGroup',\n                    },\n                    {\n                        isList: true,\n                        kind: referenceForModel(PackageManifestModel),\n                        namespace: new URLSearchParams(window.location.search).get('catalogNamespace'),\n                        fieldSelector: `metadata.name=${new URLSearchParams(window.location.search).get('pkg')}`,\n                        selector: {\n                            matchLabels: {\n                                catalog: new URLSearchParams(window.location.search).get('catalog'),\n                            },\n                        },\n                        prop: 'packageManifest',\n                    },\n                    {\n                        isList: true,\n                        kind: referenceForModel(SubscriptionModel),\n                        prop: 'subscription',\n                    },\n                ] },\n                React.createElement(OperatorHubSubscribe, Object.assign({}, props, { targetNamespace: new URLSearchParams(window.location.search).get('targetNamespace') || null }))))));\n};\nOperatorHubSubscribe.displayName = 'OperatorHubSubscribe';\nOperatorHubSubscribeForm.displayName = 'OperatorHubSubscribeForm';\nOperatorHubSubscribePage.displayName = 'OperatorHubSubscribePage';\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/operator-hub/operator-hub-subscribe.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/operator-hub/operator-hub-subscribe.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Helmet } from 'react-helmet';\nimport { match } from 'react-router';\nimport { ActionGroup, Alert, Button, Checkbox, Tooltip } from '@patternfly/react-core';\nimport {\n  Dropdown,\n  ExternalLink,\n  Firehose,\n  history,\n  NsDropdown,\n  openshiftHelpBase,\n  BreadCrumbs,\n  MsgBox,\n  StatusBox,\n  ResourceIcon,\n  ResourceName,\n  resourceListPathFromModel,\n} from '@console/internal/components/utils';\nimport {\n  K8sResourceCommon,\n  apiVersionForModel,\n  apiVersionForReference,\n  k8sCreate,\n  k8sGet,\n  k8sListPartialMetadata,\n  kindForReference,\n  referenceForModel,\n} from '@console/internal/module/k8s';\nimport { RadioGroup, RadioInput } from '@console/internal/components/radio';\nimport { fromRequirements } from '@console/internal/module/k8s/selector';\nimport {\n  SubscriptionModel,\n  OperatorGroupModel,\n  PackageManifestModel,\n  ClusterServiceVersionModel,\n} from '../../models';\nimport { NamespaceModel, RoleBindingModel, RoleModel } from '@console/internal/models';\nimport {\n  OperatorGroupKind,\n  PackageManifestKind,\n  SubscriptionKind,\n  InstallPlanApproval,\n  InstallModeType,\n} from '../../types';\nimport {\n  defaultChannelFor,\n  supportedInstallModesFor,\n  ClusterServiceVersionLogo,\n  providedAPIsForChannel,\n  referenceForProvidedAPI,\n  iconFor,\n} from '../index';\nimport { installedFor, supports, providedAPIsFor, isGlobal } from '../operator-group';\nimport { CRDCard } from '../clusterserviceversion';\nimport { getInternalObjects, isInternalObject } from '../../utils';\n\nexport const OperatorHubSubscribeForm: React.FC<OperatorHubSubscribeFormProps> = (props) => {\n  const [targetNamespace, setTargetNamespace] = React.useState(null);\n  const [installMode, setInstallMode] = React.useState(null);\n  const [updateChannel, setUpdateChannel] = React.useState(null);\n  const [approval, setApproval] = React.useState(InstallPlanApproval.Automatic);\n  const [cannotResolve, setCannotResolve] = React.useState(false);\n  const [suggestedNamespaceExists, setSuggestedNamespaceExists] = React.useState(false);\n  const [\n    useSuggestedNSForSingleInstallMode,\n    setUseSuggestedNSForSingleInstallMode,\n  ] = React.useState(true);\n  const [enableMonitoring, setEnableMonitoring] = React.useState(false);\n  const [error, setError] = React.useState('');\n\n  const { name: pkgName } = props.packageManifest.data[0].metadata;\n  const {\n    provider,\n    channels = [],\n    packageName,\n    catalogSource,\n    catalogSourceNamespace,\n  } = props.packageManifest.data[0].status;\n\n  const selectedUpdateChannel = updateChannel || defaultChannelFor(props.packageManifest.data[0]);\n  const selectedInstallMode =\n    installMode ||\n    supportedInstallModesFor(props.packageManifest.data[0])(selectedUpdateChannel).reduce(\n      (preferredInstallMode, mode) =>\n        mode.type === InstallModeType.InstallModeTypeAllNamespaces\n          ? InstallModeType.InstallModeTypeAllNamespaces\n          : preferredInstallMode,\n      InstallModeType.InstallModeTypeOwnNamespace,\n    );\n\n  const { currentCSVDesc } = channels.find((ch) => ch.name === selectedUpdateChannel);\n  const { installModes = [] } = currentCSVDesc;\n  const suggestedNamespace =\n    currentCSVDesc.annotations?.['operatorframework.io/suggested-namespace'];\n  const operatorRequestsMonitoring =\n    currentCSVDesc.annotations?.['operatorframework.io/cluster-monitoring'] === 'true';\n  const internalObjects = getInternalObjects(currentCSVDesc, 'annotations');\n\n  const globalNS =\n    (props.operatorGroup?.data || ([] as OperatorGroupKind[])).find(\n      (og) => og.metadata.name === 'global-operators',\n    )?.metadata?.namespace || 'openshift-operators';\n  const items = {\n    [globalNS]: <ResourceName kind=\"Project\" name={globalNS} />,\n  };\n\n  let selectedTargetNamespace = targetNamespace || props.targetNamespace;\n  if (selectedInstallMode === InstallModeType.InstallModeTypeAllNamespaces) {\n    if (suggestedNamespace) {\n      items[suggestedNamespace] = (\n        <ResourceName kind=\"Project\" name={`${suggestedNamespace} (Operator recommended)`} />\n      );\n      selectedTargetNamespace = targetNamespace || suggestedNamespace;\n    } else {\n      selectedTargetNamespace = globalNS;\n    }\n  }\n  const isSuggestedNamespaceSelected =\n    suggestedNamespace && suggestedNamespace === selectedTargetNamespace;\n  const selectedApproval = approval || InstallPlanApproval.Automatic;\n\n  React.useEffect(() => {\n    if (!suggestedNamespace) {\n      return;\n    }\n    setTargetNamespace(suggestedNamespace);\n    k8sGet(NamespaceModel, suggestedNamespace)\n      .then(() => setSuggestedNamespaceExists(true))\n      .catch(() => setSuggestedNamespaceExists(false));\n  }, [suggestedNamespace]);\n\n  React.useEffect(() => {\n    k8sListPartialMetadata(PackageManifestModel, {\n      ns: selectedTargetNamespace,\n      fieldSelector: `metadata.name=${pkgName}`,\n      labelSelector: fromRequirements([\n        { key: 'catalog', operator: 'Equals', values: [catalogSource] },\n        { key: 'catalog-namespace', operator: 'Equals', values: [catalogSourceNamespace] },\n      ]),\n    })\n      .then((list) => setCannotResolve(_.isEmpty(list)))\n      .catch(() => setCannotResolve(true));\n  }, [\n    catalogSource,\n    catalogSourceNamespace,\n    pkgName,\n    props.packageManifest.data,\n    selectedTargetNamespace,\n  ]);\n\n  const singleInstallMode = installModes.find(\n    (m) => m.type === InstallModeType.InstallModeTypeOwnNamespace,\n  );\n  const supportsSingle = singleInstallMode && singleInstallMode.supported;\n  const globalInstallMode = installModes.find(\n    (m) => m.type === InstallModeType.InstallModeTypeAllNamespaces,\n  );\n  const supportsGlobal = globalInstallMode && globalInstallMode.supported;\n\n  if (!supportsSingle && !supportsGlobal) {\n    return (\n      <MsgBox\n        title={`${_.get(channels, '[0].currentCSVDesc.displayName')} can't be installed`}\n        detail=\"The operator does not support single namespace or global installation modes.\"\n      />\n    );\n  }\n\n  const descFor = (mode: InstallModeType) => {\n    if (mode === InstallModeType.InstallModeTypeAllNamespaces && supportsGlobal) {\n      return 'Operator will be available in all namespaces.';\n    }\n    if (mode === InstallModeType.InstallModeTypeOwnNamespace && supportsSingle) {\n      return 'Operator will be available in a single namespace only.';\n    }\n    return 'This mode is not supported by this Operator';\n  };\n  const subscriptionExists = (ns: string) =>\n    installedFor(props.subscription.data)(props.operatorGroup.data)(\n      props.packageManifest.data[0].status.packageName,\n    )(ns);\n  const namespaceSupports = (ns: string) => (mode: InstallModeType) => {\n    const operatorGroup = props.operatorGroup.data.find((og) => og.metadata.namespace === ns);\n    if (!operatorGroup || !ns) {\n      return true;\n    }\n    return supports([{ type: mode, supported: true }])(operatorGroup);\n  };\n  const conflictingProvidedAPIs = (ns: string) => {\n    const operatorGroups = props.operatorGroup.data.filter(\n      (og) => og.status.namespaces.includes(ns) || isGlobal(og),\n    );\n    if (_.isEmpty(operatorGroups)) {\n      return [];\n    }\n    const existingAPIs = _.flatMap(operatorGroups, providedAPIsFor);\n    const providedAPIs = providedAPIsForChannel(props.packageManifest.data[0])(\n      selectedUpdateChannel,\n    ).map((desc) => referenceForProvidedAPI(desc));\n\n    return _.intersection(existingAPIs, providedAPIs);\n  };\n\n  const submit = async () => {\n    // Clear any previous errors.\n    setError('');\n\n    const ns: K8sResourceCommon = {\n      metadata: {\n        name: selectedTargetNamespace,\n        labels:\n          operatorRequestsMonitoring && enableMonitoring\n            ? {\n                'openshift.io/cluster-monitoring': 'true',\n              }\n            : {},\n      },\n    };\n\n    const rbacName = `${selectedTargetNamespace}-prometheus`;\n    const prometheusRole = {\n      kind: RoleModel.kind,\n      apiVersion: `${RoleModel.apiGroup}/${RoleModel.apiVersion}`,\n      metadata: {\n        name: rbacName,\n        namespace: selectedTargetNamespace,\n      },\n      rules: [\n        {\n          apiGroups: [''],\n          resources: ['services', 'endpoints', 'pods'],\n          verbs: ['get', 'list', 'watch'],\n        },\n      ],\n    };\n\n    const prometheusRoleBinding = {\n      kind: RoleBindingModel.kind,\n      apiVersion: `${RoleBindingModel.apiGroup}/${RoleBindingModel.apiVersion}`,\n      metadata: {\n        name: rbacName,\n        namespace: selectedTargetNamespace,\n      },\n      roleRef: {\n        kind: 'Role',\n        name: rbacName,\n        apiGroup: RoleBindingModel.apiGroup,\n      },\n      subjects: [\n        {\n          kind: 'ServiceAccount',\n          name: 'prometheus-operator',\n          namespace: 'openshift-monitoring',\n        },\n      ],\n    };\n\n    const operatorGroup: OperatorGroupKind = {\n      apiVersion: apiVersionForModel(OperatorGroupModel) as OperatorGroupKind['apiVersion'],\n      kind: 'OperatorGroup',\n      metadata: {\n        generateName: `${selectedTargetNamespace}-`,\n        namespace: selectedTargetNamespace,\n      },\n      ...(selectedInstallMode === InstallModeType.InstallModeTypeAllNamespaces\n        ? {}\n        : {\n            spec: {\n              targetNamespaces: [selectedTargetNamespace],\n            },\n          }),\n    };\n\n    const subscription: SubscriptionKind = {\n      apiVersion: apiVersionForModel(SubscriptionModel) as SubscriptionKind['apiVersion'],\n      kind: 'Subscription',\n      metadata: {\n        name: packageName,\n        namespace: selectedTargetNamespace,\n      },\n      spec: {\n        source: catalogSource,\n        sourceNamespace: catalogSourceNamespace,\n        name: packageName,\n        startingCSV: channels.find((ch) => ch.name === selectedUpdateChannel).currentCSV,\n        channel: selectedUpdateChannel,\n        installPlanApproval: selectedApproval,\n      },\n    };\n\n    try {\n      if (isSuggestedNamespaceSelected && !suggestedNamespaceExists) {\n        await k8sCreate(NamespaceModel, ns);\n        if (operatorRequestsMonitoring && enableMonitoring) {\n          await k8sCreate(RoleModel, prometheusRole);\n          await k8sCreate(RoleBindingModel, prometheusRoleBinding);\n        }\n      }\n      if (\n        !props.operatorGroup.data.some(\n          (group) => group.metadata.namespace === selectedTargetNamespace,\n        )\n      ) {\n        await k8sCreate(OperatorGroupModel, operatorGroup);\n      }\n      await k8sCreate(SubscriptionModel, subscription);\n      history.push(\n        resourceListPathFromModel(\n          ClusterServiceVersionModel,\n          targetNamespace || props.targetNamespace || selectedTargetNamespace,\n        ),\n      );\n    } catch (err) {\n      setError(err.message || 'Could not create operator subscription.');\n    }\n  };\n\n  const formValid = () =>\n    [selectedUpdateChannel, selectedInstallMode, selectedTargetNamespace, selectedApproval].some(\n      (v) => _.isNil(v) || _.isEmpty(v),\n    ) ||\n    subscriptionExists(selectedTargetNamespace) ||\n    !namespaceSupports(selectedTargetNamespace)(selectedInstallMode) ||\n    (selectedTargetNamespace && cannotResolve) ||\n    !_.isEmpty(conflictingProvidedAPIs(selectedTargetNamespace));\n\n  const formError = () => {\n    return (\n      (error && (\n        <Alert\n          isInline\n          className=\"co-alert co-alert--scrollable\"\n          variant=\"danger\"\n          title=\"An error occurred\"\n        >\n          <div className=\"co-pre-line\">{error}</div>\n        </Alert>\n      )) ||\n      (!namespaceSupports(selectedTargetNamespace)(selectedInstallMode) && (\n        <Alert\n          isInline\n          className=\"co-alert\"\n          variant=\"danger\"\n          title=\"Namespace does not support installation mode\"\n        >\n          The operator group in the {selectedTargetNamespace} namespace does not support the\n          {selectedInstallMode === InstallModeType.InstallModeTypeAllNamespaces\n            ? ' global '\n            : ' single namespace '}\n          installation mode.\n        </Alert>\n      )) ||\n      (subscriptionExists(selectedTargetNamespace) && (\n        <Alert\n          isInline\n          className=\"co-alert\"\n          variant=\"danger\"\n          title={`Operator subscription for namespace '${selectedTargetNamespace}' already exists`}\n        />\n      )) ||\n      (!_.isEmpty(conflictingProvidedAPIs(selectedTargetNamespace)) && (\n        <Alert isInline className=\"co-alert\" variant=\"danger\" title=\"Operator conflicts exist\">\n          Installing Operator in selected namespace would cause conflicts with another Operator\n          providing these APIs:\n          <ul>\n            {conflictingProvidedAPIs(selectedTargetNamespace).map((gvk) => (\n              <li key={gvk}>\n                <strong>{kindForReference(gvk)}</strong> <i>({apiVersionForReference(gvk)})</i>\n              </li>\n            ))}\n          </ul>\n        </Alert>\n      )) ||\n      (selectedTargetNamespace && cannotResolve && (\n        <Alert\n          isInline\n          className=\"co-alert\"\n          variant=\"danger\"\n          title=\"Operator not available for selected namespaces\"\n        />\n      ))\n    );\n  };\n\n  const showMonitoringCheckbox =\n    operatorRequestsMonitoring && _.startsWith(selectedTargetNamespace, 'openshift-');\n\n  const suggestedNamespaceDetails = isSuggestedNamespaceSelected && (\n    <>\n      <Alert\n        isInline\n        className=\"co-alert co-alert--scrollable\"\n        variant={suggestedNamespaceExists ? 'warning' : 'info'}\n        title={suggestedNamespaceExists ? 'Namespace already exists' : 'Namespace creation'}\n      >\n        {suggestedNamespaceExists ? (\n          <>\n            Namespace <b>{suggestedNamespace}</b> already exists and will be used. Other users can\n            already have access to this namespace.\n          </>\n        ) : (\n          <>\n            Namespace <b>{suggestedNamespace}</b> does not exist and will be created.\n          </>\n        )}\n      </Alert>\n      {showMonitoringCheckbox && !suggestedNamespaceExists && (\n        <div className=\"co-form-subsection\">\n          <Checkbox\n            id=\"enable-monitoring-checkbox\"\n            label=\"Enable operator recommended cluster monitoring on this namespace\"\n            onChange={setEnableMonitoring}\n            isChecked={enableMonitoring}\n          />\n          {props.packageManifest.data[0].metadata.labels['opsrc-provider'] !== 'redhat' && (\n            <Alert\n              isInline\n              className=\"co-alert pf-c-alert--top-margin\"\n              variant=\"warning\"\n              title=\"Namespace monitoring\"\n            >\n              Please note that installing non Red Hat operators into openshift namespaces and\n              enabling monitoring voids user support. Enabling cluster monitoring for non Red Hat\n              operators can lead to malicious metrics data overriding existing cluster metrics. For\n              more information, see the{' '}\n              <ExternalLink\n                href={`${openshiftHelpBase}monitoring/cluster_monitoring/configuring-the-monitoring-stack.html#maintenance-and-support_configuring-monitoring`}\n                text=\"cluster monitoring documentation\"\n              />{' '}\n              .\n            </Alert>\n          )}\n        </div>\n      )}\n    </>\n  );\n\n  const globalNamespaceInstallMode = (\n    <>\n      <div className=\"form-group\">\n        <Dropdown\n          id=\"dropdown-selectbox\"\n          dropDownClassName=\"dropdown--full-width\"\n          menuClassName=\"dropdown-menu--text-wrap\"\n          items={items}\n          title={\n            <ResourceName\n              kind=\"Project\"\n              name={\n                isSuggestedNamespaceSelected\n                  ? `${selectedTargetNamespace} (Operator recommended)`\n                  : selectedTargetNamespace\n              }\n            />\n          }\n          disabled={_.size(items) === 1}\n          selectedKey={selectedTargetNamespace}\n          onChange={(ns: string) => {\n            setTargetNamespace(ns);\n            setCannotResolve(false);\n          }}\n        />\n      </div>\n      {suggestedNamespaceDetails}\n    </>\n  );\n\n  const singleNamespaceInstallMode = !suggestedNamespace ? (\n    <NsDropdown\n      id=\"dropdown-selectbox\"\n      selectedKey={selectedTargetNamespace}\n      onChange={setTargetNamespace}\n    />\n  ) : (\n    <div className=\"form-group\">\n      <RadioInput\n        onChange={() => {\n          setUseSuggestedNSForSingleInstallMode(true);\n          setTargetNamespace(suggestedNamespace);\n        }}\n        value={suggestedNamespace}\n        checked={useSuggestedNSForSingleInstallMode}\n        title=\"Operator recommended namespace:\"\n      >\n        {' '}\n        <ResourceIcon kind=\"Project\" />\n        <b>{suggestedNamespace}</b>\n      </RadioInput>\n      {useSuggestedNSForSingleInstallMode && suggestedNamespaceDetails}\n      <RadioInput\n        onChange={() => {\n          setUseSuggestedNSForSingleInstallMode(false);\n          setTargetNamespace(null);\n        }}\n        value={suggestedNamespace}\n        checked={!useSuggestedNSForSingleInstallMode}\n        title=\"Pick an existing namespace\"\n      />\n      {!useSuggestedNSForSingleInstallMode && (\n        <NsDropdown\n          id=\"dropdown-selectbox\"\n          selectedKey={selectedTargetNamespace}\n          onChange={setTargetNamespace}\n        />\n      )}\n    </div>\n  );\n\n  const providedAPIs = providedAPIsForChannel(props.packageManifest.data[0])(\n    selectedUpdateChannel,\n  ).filter((item) => !isInternalObject(internalObjects, item.name));\n\n  return (\n    <div className=\"row\">\n      <div className=\"col-xs-6\">\n        <>\n          <div className=\"form-group\">\n            <Tooltip content=\"The channel to track and receive the updates from.\">\n              <h5 className=\"co-required\">Update Channel</h5>\n            </Tooltip>\n            <RadioGroup\n              currentValue={selectedUpdateChannel}\n              items={channels.map((ch) => ({ value: ch.name, title: ch.name }))}\n              onChange={(e) => {\n                setUpdateChannel(e.currentTarget.value);\n                setInstallMode(null);\n              }}\n            />\n          </div>\n          <div className=\"form-group\">\n            <h5 className=\"co-required\">Installation Mode</h5>\n            <div>\n              <RadioInput\n                onChange={(e) => {\n                  setInstallMode(e.target.value);\n                  setTargetNamespace(null);\n                  setCannotResolve(false);\n                }}\n                value={InstallModeType.InstallModeTypeAllNamespaces}\n                checked={selectedInstallMode === InstallModeType.InstallModeTypeAllNamespaces}\n                disabled={!supportsGlobal}\n                title=\"All namespaces on the cluster\"\n                subTitle=\"(default)\"\n              >\n                <div className=\"co-m-radio-desc\">\n                  <p className=\"text-muted\">\n                    {descFor(InstallModeType.InstallModeTypeAllNamespaces)}\n                  </p>\n                </div>\n              </RadioInput>\n            </div>\n            <div>\n              <RadioInput\n                onChange={(e) => {\n                  setInstallMode(e.target.value);\n                  setTargetNamespace(\n                    useSuggestedNSForSingleInstallMode ? suggestedNamespace : null,\n                  );\n                  setCannotResolve(false);\n                }}\n                value={InstallModeType.InstallModeTypeOwnNamespace}\n                checked={selectedInstallMode === InstallModeType.InstallModeTypeOwnNamespace}\n                disabled={!supportsSingle}\n                title=\"A specific namespace on the cluster\"\n              >\n                <div className=\"co-m-radio-desc\">\n                  <p className=\"text-muted\">\n                    {descFor(InstallModeType.InstallModeTypeOwnNamespace)}\n                  </p>\n                </div>\n              </RadioInput>\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <h5 className=\"co-required\">Installed Namespace</h5>\n            {selectedInstallMode === InstallModeType.InstallModeTypeAllNamespaces &&\n              globalNamespaceInstallMode}\n            {selectedInstallMode === InstallModeType.InstallModeTypeOwnNamespace &&\n              singleNamespaceInstallMode}\n          </div>\n          <div className=\"form-group\">\n            <Tooltip content=\"The strategy to determine either manual or automatic updates.\">\n              <h5 className=\"co-required\">Approval Strategy</h5>\n            </Tooltip>\n            <RadioGroup\n              currentValue={selectedApproval}\n              items={[\n                { value: InstallPlanApproval.Automatic, title: 'Automatic' },\n                { value: InstallPlanApproval.Manual, title: 'Manual' },\n              ]}\n              onChange={(e) => setApproval(e.currentTarget.value)}\n            />\n          </div>\n        </>\n        <div className=\"co-form-section__separator\" />\n        {formError()}\n        <ActionGroup className=\"pf-c-form\">\n          <Button onClick={() => submit()} isDisabled={formValid()} variant=\"primary\">\n            Install\n          </Button>\n          <Button variant=\"secondary\" onClick={() => history.push('/operatorhub')}>\n            Cancel\n          </Button>\n        </ActionGroup>\n      </div>\n      <div className=\"col-xs-6\">\n        <ClusterServiceVersionLogo\n          displayName={_.get(channels, '[0].currentCSVDesc.displayName')}\n          icon={iconFor(props.packageManifest.data[0])}\n          provider={provider}\n        />\n        <h4>Provided APIs</h4>\n        <div className=\"co-crd-card-row\">\n          {!providedAPIs.length ? (\n            <span className=\"text-muted\">No Kubernetes APIs are provided by this Operator.</span>\n          ) : (\n            providedAPIs.map((api) => (\n              <CRDCard key={referenceForProvidedAPI(api)} canCreate={false} crd={api} csv={null} />\n            ))\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst OperatorHubSubscribe: React.FC<OperatorHubSubscribeFormProps> = (props) => (\n  <StatusBox data={props.packageManifest.data[0]} loaded={props.loaded} loadError={props.loadError}>\n    <OperatorHubSubscribeForm {...props} />\n  </StatusBox>\n);\n\nexport const OperatorHubSubscribePage: React.SFC<OperatorHubSubscribePageProps> = (props) => {\n  const search = new URLSearchParams({\n    'details-item': `${new URLSearchParams(window.location.search).get(\n      'pkg',\n    )}-${new URLSearchParams(window.location.search).get('catalogNamespace')}`,\n  });\n\n  return (\n    <>\n      <Helmet>\n        <title>Operator Installation</title>\n      </Helmet>\n      <div className=\"co-m-nav-title co-m-nav-title--breadcrumbs\">\n        <BreadCrumbs\n          breadcrumbs={[\n            { name: 'OperatorHub', path: `/operatorhub?${search.toString()}` },\n            { name: 'Operator Installation', path: props.match.url },\n          ]}\n        />\n        <h1 className=\"co-m-pane__heading\">Install Operator</h1>\n        <p className=\"co-help-text\">\n          Install your Operator by subscribing to one of the update channels to keep the Operator up\n          to date. The strategy determines either manual or automatic updates.\n        </p>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <Firehose\n          resources={[\n            {\n              isList: true,\n              kind: referenceForModel(OperatorGroupModel),\n              prop: 'operatorGroup',\n            },\n            {\n              isList: true,\n              kind: referenceForModel(PackageManifestModel),\n              namespace: new URLSearchParams(window.location.search).get('catalogNamespace'),\n              fieldSelector: `metadata.name=${new URLSearchParams(window.location.search).get(\n                'pkg',\n              )}`,\n              selector: {\n                matchLabels: {\n                  catalog: new URLSearchParams(window.location.search).get('catalog'),\n                },\n              },\n              prop: 'packageManifest',\n            },\n            {\n              isList: true,\n              kind: referenceForModel(SubscriptionModel),\n              prop: 'subscription',\n            },\n          ]}\n        >\n          {/* FIXME(alecmerdler): Hack because `Firehose` injects props without TypeScript knowing about it */}\n          <OperatorHubSubscribe\n            {...(props as any)}\n            targetNamespace={\n              new URLSearchParams(window.location.search).get('targetNamespace') || null\n            }\n          />\n        </Firehose>\n      </div>\n    </>\n  );\n};\n\nexport type OperatorHubSubscribeFormProps = {\n  loaded: boolean;\n  loadError?: any;\n  namespace: string;\n  targetNamespace?: string;\n  operatorGroup: { loaded: boolean; data: OperatorGroupKind[] };\n  packageManifest: { loaded: boolean; data: PackageManifestKind[] };\n  subscription: { loaded: boolean; data: SubscriptionKind[] };\n};\n\nexport type OperatorHubSubscribePageProps = {\n  match: match;\n};\n\nOperatorHubSubscribe.displayName = 'OperatorHubSubscribe';\nOperatorHubSubscribeForm.displayName = 'OperatorHubSubscribeForm';\nOperatorHubSubscribePage.displayName = 'OperatorHubSubscribePage';\n"]}]}