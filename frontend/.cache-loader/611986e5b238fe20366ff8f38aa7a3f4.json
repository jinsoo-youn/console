{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/cluster-settings/cluster-operator.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/cluster-settings/cluster-operator.tsx","mtime":1615298458720},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { Alert } from '@patternfly/react-core';\nimport { SyncAltIcon, UnknownIcon } from '@patternfly/react-icons';\nimport { ClusterOperatorModel } from '../../models';\nimport { DetailsPage, ListPage, Table, TableRow, TableData } from '../factory';\nimport { Conditions } from '../conditions';\nimport { getClusterOperatorStatus, getClusterOperatorVersion, getClusterVersionCondition, getStatusAndMessage, ClusterVersionConditionType, K8sResourceConditionStatus, OperatorStatus, referenceForModel, } from '../../module/k8s';\nimport { navFactory, EmptyBox, Kebab, ResourceLink, ResourceSummary, SectionHeading, } from '../utils';\nimport { GreenCheckCircleIcon, YellowExclamationTriangleIcon } from '@console/shared';\nexport const clusterOperatorReference = referenceForModel(ClusterOperatorModel);\nconst getIcon = (status) => {\n    return {\n        [OperatorStatus.Available]: React.createElement(GreenCheckCircleIcon, null),\n        [OperatorStatus.Updating]: React.createElement(SyncAltIcon, null),\n        [OperatorStatus.Degraded]: React.createElement(YellowExclamationTriangleIcon, null),\n        [OperatorStatus.Unknown]: React.createElement(UnknownIcon, null),\n    }[status];\n};\nconst OperatorStatusIconAndLabel = ({ status }) => {\n    const icon = getIcon(status);\n    return (React.createElement(React.Fragment, null,\n        icon,\n        \" \",\n        status));\n};\nconst tableColumnClasses = [\n    classNames('col-md-3', 'col-sm-3', 'col-xs-6'),\n    classNames('col-md-2', 'col-sm-3', 'col-xs-6'),\n    classNames('col-md-3', 'col-sm-3', 'hidden-xs'),\n    classNames('col-md-4', 'col-sm-3', 'hidden-xs'),\n    Kebab.columnClass,\n];\nconst ClusterOperatorTableHeader = () => {\n    return [\n        {\n            title: 'Name',\n            sortField: 'metadata.name',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[0] },\n        },\n        {\n            title: 'Status',\n            sortFunc: 'getClusterOperatorStatus',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[1] },\n        },\n        {\n            title: 'Version',\n            sortFunc: 'getClusterOperatorVersion',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[2] },\n        },\n        {\n            title: 'Message',\n            props: { className: tableColumnClasses[3] },\n        },\n    ];\n};\nClusterOperatorTableHeader.displayName = 'ClusterOperatorTableHeader';\nconst ClusterOperatorTableRow = ({ obj, index, key, style }) => {\n    const { status, message } = getStatusAndMessage(obj);\n    const operatorVersion = getClusterOperatorVersion(obj);\n    return (React.createElement(TableRow, { id: obj.metadata.uid, index: index, trKey: key, style: style },\n        React.createElement(TableData, { className: tableColumnClasses[0] },\n            React.createElement(ResourceLink, { kind: clusterOperatorReference, name: obj.metadata.name, namespace: obj.metadata.namespace, title: obj.metadata.name })),\n        React.createElement(TableData, { className: tableColumnClasses[1] },\n            React.createElement(OperatorStatusIconAndLabel, { status: status })),\n        React.createElement(TableData, { className: tableColumnClasses[2] }, operatorVersion || '-'),\n        React.createElement(TableData, { className: classNames(tableColumnClasses[3], 'co-break-word', 'co-pre-line') }, message ? _.truncate(message, { length: 256, separator: ' ' }) : '-')));\n};\nexport const ClusterOperatorList = (props) => (React.createElement(Table, Object.assign({}, props, { \"aria-label\": \"Cluster Operators\", Header: ClusterOperatorTableHeader, Row: ClusterOperatorTableRow, virtualize: true })));\nconst allStatuses = [\n    OperatorStatus.Available,\n    OperatorStatus.Updating,\n    OperatorStatus.Degraded,\n    OperatorStatus.Unknown,\n];\nconst filters = [\n    {\n        filterGroupName: 'Status',\n        type: 'cluster-operator-status',\n        reducer: getClusterOperatorStatus,\n        items: _.map(allStatuses, (phase) => ({\n            id: phase,\n            title: phase,\n        })),\n    },\n];\nconst UpdateInProgressAlert = ({ cv }) => {\n    const updateCondition = getClusterVersionCondition(cv, ClusterVersionConditionType.Progressing, K8sResourceConditionStatus.True);\n    return (React.createElement(React.Fragment, null, updateCondition && (React.createElement(\"div\", { className: \"co-m-pane__body co-m-pane__body--section-heading\" },\n        React.createElement(Alert, { isInline: true, className: \"co-alert\", variant: \"info\", title: \"Cluster update in progress.\" }, updateCondition.message)))));\n};\nexport const ClusterOperatorPage = (props) => (React.createElement(React.Fragment, null,\n    React.createElement(UpdateInProgressAlert, { cv: props.cv }),\n    React.createElement(ListPage, Object.assign({}, props, { title: \"Cluster Operators\", kind: clusterOperatorReference, ListComponent: ClusterOperatorList, canCreate: false, rowFilters: filters }))));\nconst OperandVersions = ({ versions }) => {\n    return _.isEmpty(versions) ? (React.createElement(EmptyBox, { label: \"Versions\" })) : (React.createElement(\"div\", { className: \"co-table-container\" },\n        React.createElement(\"table\", { className: \"table\" },\n            React.createElement(\"thead\", null,\n                React.createElement(\"tr\", null,\n                    React.createElement(\"th\", null, \"Name\"),\n                    React.createElement(\"th\", null, \"Version\"))),\n            React.createElement(\"tbody\", null, _.map(versions, ({ name, version }, i) => (React.createElement(\"tr\", { key: i },\n                React.createElement(\"td\", null, name),\n                React.createElement(\"td\", null, version))))))));\n};\nconst ClusterOperatorDetails = ({ obj }) => {\n    const { status, message } = getStatusAndMessage(obj);\n    const versions = _.get(obj, 'status.versions', []);\n    const conditions = _.get(obj, 'status.conditions', []);\n    // Show the operator version in the details if it's the only version.\n    const operatorVersion = versions.length === 1 && versions[0].name === 'operator' ? versions[0].version : null;\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(SectionHeading, { text: \"Cluster Operator Details\" }),\n            React.createElement(\"div\", { className: \"row\" },\n                React.createElement(\"div\", { className: \"col-sm-6\" },\n                    React.createElement(ResourceSummary, { resource: obj })),\n                React.createElement(\"div\", { className: \"col-sm-6\" },\n                    React.createElement(\"dl\", null,\n                        operatorVersion && (React.createElement(React.Fragment, null,\n                            React.createElement(\"dt\", null, \"Version\"),\n                            React.createElement(\"dd\", null, operatorVersion))),\n                        React.createElement(\"dt\", null, \"Status\"),\n                        React.createElement(\"dd\", null,\n                            React.createElement(OperatorStatusIconAndLabel, { status: status })),\n                        React.createElement(\"dt\", null, \"Message\"),\n                        React.createElement(\"dd\", { className: \"co-pre-line\" }, message || '-'))))),\n        React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(SectionHeading, { text: \"Conditions\" }),\n            React.createElement(Conditions, { conditions: conditions })),\n        React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(SectionHeading, { text: \"Operand Versions\" }),\n            React.createElement(OperandVersions, { versions: versions }))));\n};\nexport const ClusterOperatorDetailsPage = (props) => (React.createElement(DetailsPage, Object.assign({}, props, { kind: clusterOperatorReference, pages: [navFactory.details(ClusterOperatorDetails), navFactory.editYaml()], breadcrumbsFor: () => [\n        { name: 'Cluster Operators', path: '/settings/cluster/clusteroperators' },\n        { name: 'Cluster Operator Details', path: props.match.url },\n    ] })));\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/cluster-settings/cluster-operator.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/cluster-settings/cluster-operator.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { Alert } from '@patternfly/react-core';\nimport { SyncAltIcon, UnknownIcon } from '@patternfly/react-icons';\n\nimport { ClusterOperatorModel } from '../../models';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from '../factory';\nimport { Conditions } from '../conditions';\nimport {\n  getClusterOperatorStatus,\n  getClusterOperatorVersion,\n  getClusterVersionCondition,\n  getStatusAndMessage,\n  ClusterOperator,\n  ClusterVersionConditionType,\n  ClusterVersionKind,\n  K8sResourceConditionStatus,\n  K8sResourceKindReference,\n  OperandVersion,\n  OperatorStatus,\n  referenceForModel,\n} from '../../module/k8s';\nimport {\n  navFactory,\n  EmptyBox,\n  Kebab,\n  ResourceLink,\n  ResourceSummary,\n  SectionHeading,\n} from '../utils';\nimport { GreenCheckCircleIcon, YellowExclamationTriangleIcon } from '@console/shared';\n\nexport const clusterOperatorReference: K8sResourceKindReference = referenceForModel(\n  ClusterOperatorModel,\n);\n\nconst getIcon = (status: OperatorStatus) => {\n  return {\n    [OperatorStatus.Available]: <GreenCheckCircleIcon />,\n    [OperatorStatus.Updating]: <SyncAltIcon />,\n    [OperatorStatus.Degraded]: <YellowExclamationTriangleIcon />,\n    [OperatorStatus.Unknown]: <UnknownIcon />,\n  }[status];\n};\n\nconst OperatorStatusIconAndLabel: React.SFC<OperatorStatusIconAndLabelProps> = ({ status }) => {\n  const icon = getIcon(status);\n  return (\n    <>\n      {icon} {status}\n    </>\n  );\n};\n\nconst tableColumnClasses = [\n  classNames('col-md-3', 'col-sm-3', 'col-xs-6'),\n  classNames('col-md-2', 'col-sm-3', 'col-xs-6'),\n  classNames('col-md-3', 'col-sm-3', 'hidden-xs'),\n  classNames('col-md-4', 'col-sm-3', 'hidden-xs'),\n  Kebab.columnClass,\n];\n\nconst ClusterOperatorTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Status',\n      sortFunc: 'getClusterOperatorStatus',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Version',\n      sortFunc: 'getClusterOperatorVersion',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Message',\n      props: { className: tableColumnClasses[3] },\n    },\n  ];\n};\nClusterOperatorTableHeader.displayName = 'ClusterOperatorTableHeader';\n\nconst ClusterOperatorTableRow: RowFunction<ClusterOperator> = ({ obj, index, key, style }) => {\n  const { status, message } = getStatusAndMessage(obj);\n  const operatorVersion = getClusterOperatorVersion(obj);\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={clusterOperatorReference}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n          title={obj.metadata.name}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[1]}>\n        <OperatorStatusIconAndLabel status={status} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>{operatorVersion || '-'}</TableData>\n      <TableData className={classNames(tableColumnClasses[3], 'co-break-word', 'co-pre-line')}>\n        {message ? _.truncate(message, { length: 256, separator: ' ' }) : '-'}\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport const ClusterOperatorList: React.SFC = (props) => (\n  <Table\n    {...props}\n    aria-label=\"Cluster Operators\"\n    Header={ClusterOperatorTableHeader}\n    Row={ClusterOperatorTableRow}\n    virtualize\n  />\n);\n\nconst allStatuses = [\n  OperatorStatus.Available,\n  OperatorStatus.Updating,\n  OperatorStatus.Degraded,\n  OperatorStatus.Unknown,\n];\n\nconst filters = [\n  {\n    filterGroupName: 'Status',\n    type: 'cluster-operator-status',\n    reducer: getClusterOperatorStatus,\n    items: _.map(allStatuses, (phase) => ({\n      id: phase,\n      title: phase,\n    })),\n  },\n];\n\nconst UpdateInProgressAlert: React.SFC<UpdateInProgressAlertProps> = ({ cv }) => {\n  const updateCondition = getClusterVersionCondition(\n    cv,\n    ClusterVersionConditionType.Progressing,\n    K8sResourceConditionStatus.True,\n  );\n  return (\n    <>\n      {updateCondition && (\n        <div className=\"co-m-pane__body co-m-pane__body--section-heading\">\n          <Alert isInline className=\"co-alert\" variant=\"info\" title=\"Cluster update in progress.\">\n            {updateCondition.message}\n          </Alert>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport const ClusterOperatorPage: React.SFC<ClusterOperatorPageProps> = (props) => (\n  <>\n    <UpdateInProgressAlert cv={props.cv} />\n    <ListPage\n      {...props}\n      title=\"Cluster Operators\"\n      kind={clusterOperatorReference}\n      ListComponent={ClusterOperatorList}\n      canCreate={false}\n      rowFilters={filters}\n    />\n  </>\n);\n\nconst OperandVersions: React.SFC<OperandVersionsProps> = ({ versions }) => {\n  return _.isEmpty(versions) ? (\n    <EmptyBox label=\"Versions\" />\n  ) : (\n    <div className=\"co-table-container\">\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Version</th>\n          </tr>\n        </thead>\n        <tbody>\n          {_.map(versions, ({ name, version }, i) => (\n            <tr key={i}>\n              <td>{name}</td>\n              <td>{version}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nconst ClusterOperatorDetails: React.SFC<ClusterOperatorDetailsProps> = ({ obj }) => {\n  const { status, message } = getStatusAndMessage(obj);\n  const versions: OperandVersion[] = _.get(obj, 'status.versions', []);\n  const conditions = _.get(obj, 'status.conditions', []);\n  // Show the operator version in the details if it's the only version.\n  const operatorVersion =\n    versions.length === 1 && versions[0].name === 'operator' ? versions[0].version : null;\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Cluster Operator Details\" />\n        <div className=\"row\">\n          <div className=\"col-sm-6\">\n            <ResourceSummary resource={obj} />\n          </div>\n          <div className=\"col-sm-6\">\n            <dl>\n              {operatorVersion && (\n                <>\n                  <dt>Version</dt>\n                  <dd>{operatorVersion}</dd>\n                </>\n              )}\n              <dt>Status</dt>\n              <dd>\n                <OperatorStatusIconAndLabel status={status} />\n              </dd>\n              <dt>Message</dt>\n              <dd className=\"co-pre-line\">{message || '-'}</dd>\n            </dl>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Conditions\" />\n        <Conditions conditions={conditions} />\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Operand Versions\" />\n        <OperandVersions versions={versions} />\n      </div>\n    </>\n  );\n};\n\nexport const ClusterOperatorDetailsPage: React.SFC<ClusterOperatorDetailsPageProps> = (props) => (\n  <DetailsPage\n    {...props}\n    kind={clusterOperatorReference}\n    pages={[navFactory.details(ClusterOperatorDetails), navFactory.editYaml()]}\n    breadcrumbsFor={() => [\n      { name: 'Cluster Operators', path: '/settings/cluster/clusteroperators' },\n      { name: 'Cluster Operator Details', path: props.match.url },\n    ]}\n  />\n);\n\ntype OperatorStatusIconAndLabelProps = {\n  status: OperatorStatus;\n};\n\ntype ClusterOperatorPageProps = {\n  cv: ClusterVersionKind;\n  autoFocus?: boolean;\n  showTitle?: boolean;\n};\n\ntype OperandVersionsProps = {\n  versions: OperandVersion[];\n};\n\ntype ClusterOperatorDetailsProps = {\n  obj: ClusterOperator;\n};\n\ntype ClusterOperatorDetailsPageProps = {\n  match: any;\n};\n\ntype UpdateInProgressAlertProps = {\n  cv: ClusterVersionKind;\n};\n"]}]}