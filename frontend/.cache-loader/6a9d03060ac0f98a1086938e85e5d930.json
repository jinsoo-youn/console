{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/nodes/NodeTerminal.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/nodes/NodeTerminal.tsx","mtime":1615298458600},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as React from 'react';\nimport { Alert } from '@patternfly/react-core';\nimport { Firehose, LoadingBox, } from '@console/internal/components/utils';\nimport { getRandomChars } from '@console/shared/src/utils';\nimport { PodExecLoader } from '../../../../../public/components/pod';\nimport { ImageStreamTagModel, PodModel } from '../../../../../public/models';\nimport { k8sCreate, k8sGet, k8sKillByName } from '../../../../../public/module/k8s';\nconst getDebugImage = () => __awaiter(void 0, void 0, void 0, function* () {\n    try {\n        const istag = yield k8sGet(ImageStreamTagModel, 'tools:latest', 'openshift');\n        return istag.image.dockerImageReference;\n    }\n    catch (e) {\n        return 'registry.redhat.io/rhel7/support-tools';\n    }\n});\nconst getDebugPod = (name, namespace, nodeName) => __awaiter(void 0, void 0, void 0, function* () {\n    const image = yield getDebugImage();\n    return {\n        kind: 'Pod',\n        apiVersion: 'v1',\n        metadata: {\n            name,\n            namespace,\n            annotations: {\n                'debug.openshift.io/source-container': 'container-00',\n                'debug.openshift.io/source-resource': `/v1, Resource=nodes/${nodeName}`,\n            },\n        },\n        spec: {\n            activeDeadlineSeconds: 21600,\n            volumes: [\n                {\n                    name: 'host',\n                    hostPath: {\n                        path: '/',\n                        type: 'Directory',\n                    },\n                },\n            ],\n            containers: [\n                {\n                    name: 'container-00',\n                    image,\n                    command: ['/bin/sh'],\n                    resources: {},\n                    volumeMounts: [\n                        {\n                            name: 'host',\n                            mountPath: '/host',\n                        },\n                    ],\n                    securityContext: {\n                        privileged: true,\n                        runAsUser: 0,\n                    },\n                    stdin: true,\n                    stdinOnce: true,\n                    tty: true,\n                },\n            ],\n            restartPolicy: 'Never',\n            nodeName,\n            hostNetwork: true,\n            hostPID: true,\n        },\n    };\n});\nconst NodeTerminalError = ({ error }) => {\n    return (React.createElement(\"div\", { className: \"co-m-pane__body\" },\n        React.createElement(Alert, { variant: \"danger\", isInline: true, title: error })));\n};\nconst NodeTerminalInner = ({ obj }) => {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;\n    const message = (React.createElement(\"p\", null,\n        \"To use host binaries, run \",\n        React.createElement(\"code\", null, \"chroot /host\")));\n    switch ((_b = (_a = obj === null || obj === void 0 ? void 0 : obj.data) === null || _a === void 0 ? void 0 : _a.status) === null || _b === void 0 ? void 0 : _b.phase) {\n        case 'Failed':\n            return (React.createElement(NodeTerminalError, { error: React.createElement(React.Fragment, null,\n                    \"The debug pod failed.\",\n                    ' ',\n                    ((_h = (_g = (_f = (_e = (_d = (_c = obj === null || obj === void 0 ? void 0 : obj.data) === null || _c === void 0 ? void 0 : _c.status) === null || _d === void 0 ? void 0 : _d.containerStatuses) === null || _e === void 0 ? void 0 : _e[0]) === null || _f === void 0 ? void 0 : _f.state) === null || _g === void 0 ? void 0 : _g.terminated) === null || _h === void 0 ? void 0 : _h.message) || ((_k = (_j = obj === null || obj === void 0 ? void 0 : obj.data) === null || _j === void 0 ? void 0 : _j.status) === null || _k === void 0 ? void 0 : _k.message)) }));\n        case 'Running':\n            return React.createElement(PodExecLoader, { obj: obj.data, message: message });\n        default:\n            return React.createElement(LoadingBox, null);\n    }\n};\nconst NodeTerminal = ({ obj: node }) => {\n    const [resources, setResources] = React.useState([]);\n    const [errorMessage, setErrorMessage] = React.useState('');\n    const nodeName = node.metadata.name;\n    React.useEffect(() => {\n        const name = `${nodeName}-debug-${getRandomChars()}`;\n        const namespace = 'default';\n        getDebugPod(name, namespace, nodeName)\n            .then((debugPod) => k8sCreate(PodModel, debugPod))\n            .then(() => {\n            setResources([\n                {\n                    isList: false,\n                    kind: 'Pod',\n                    name,\n                    namespace,\n                    prop: 'obj',\n                },\n            ]);\n        })\n            .catch((e) => setErrorMessage(e.message));\n        const deletePod = () => __awaiter(void 0, void 0, void 0, function* () {\n            try {\n                yield k8sKillByName(PodModel, name, namespace);\n            }\n            catch (e) {\n                // eslint-disable-next-line no-console\n                console.warn('Could not delete node terminal debug pod.', e);\n            }\n        });\n        window.addEventListener('beforeunload', deletePod);\n        return () => {\n            deletePod();\n            window.removeEventListener('beforeunload', deletePod);\n        };\n        //  eslint-disable-next-line\n    }, [nodeName]);\n    return errorMessage ? (React.createElement(NodeTerminalError, { error: errorMessage })) : (React.createElement(Firehose, { resources: resources },\n        React.createElement(NodeTerminalInner, null)));\n};\nexport default NodeTerminal;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/nodes/NodeTerminal.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/nodes/NodeTerminal.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Alert } from '@patternfly/react-core';\nimport {\n  Firehose,\n  FirehoseResource,\n  FirehoseResult,\n  LoadingBox,\n} from '@console/internal/components/utils';\nimport { NodeKind, PodKind } from '@console/internal/module/k8s';\nimport { getRandomChars } from '@console/shared/src/utils';\nimport { PodExecLoader } from '../../../../../public/components/pod';\nimport { ImageStreamTagModel, PodModel } from '../../../../../public/models';\nimport { k8sCreate, k8sGet, k8sKillByName } from '../../../../../public/module/k8s';\n\ntype NodeTerminalErrorProps = {\n  error: React.ReactNode;\n};\n\ntype NodeTerminalInnerProps = {\n  obj?: FirehoseResult<PodKind>;\n};\n\ntype NodeTerminalProps = {\n  obj: NodeKind;\n};\n\nconst getDebugImage = async (): Promise<string> => {\n  try {\n    const istag = await k8sGet(ImageStreamTagModel, 'tools:latest', 'openshift');\n    return istag.image.dockerImageReference;\n  } catch (e) {\n    return 'registry.redhat.io/rhel7/support-tools';\n  }\n};\n\nconst getDebugPod = async (name: string, namespace: string, nodeName: string): Promise<PodKind> => {\n  const image = await getDebugImage();\n  return {\n    kind: 'Pod',\n    apiVersion: 'v1',\n    metadata: {\n      name,\n      namespace,\n      annotations: {\n        'debug.openshift.io/source-container': 'container-00',\n        'debug.openshift.io/source-resource': `/v1, Resource=nodes/${nodeName}`,\n      },\n    },\n    spec: {\n      activeDeadlineSeconds: 21600,\n      volumes: [\n        {\n          name: 'host',\n          hostPath: {\n            path: '/',\n            type: 'Directory',\n          },\n        },\n      ],\n      containers: [\n        {\n          name: 'container-00',\n          image,\n          command: ['/bin/sh'],\n          resources: {},\n          volumeMounts: [\n            {\n              name: 'host',\n              mountPath: '/host',\n            },\n          ],\n          securityContext: {\n            privileged: true,\n            runAsUser: 0,\n          },\n          stdin: true,\n          stdinOnce: true,\n          tty: true,\n        },\n      ],\n      restartPolicy: 'Never',\n      nodeName,\n      hostNetwork: true,\n      hostPID: true,\n    },\n  };\n};\n\nconst NodeTerminalError: React.FC<NodeTerminalErrorProps> = ({ error }) => {\n  return (\n    <div className=\"co-m-pane__body\">\n      <Alert variant=\"danger\" isInline title={error} />\n    </div>\n  );\n};\n\nconst NodeTerminalInner: React.FC<NodeTerminalInnerProps> = ({ obj }) => {\n  const message = (\n    <p>\n      To use host binaries, run <code>chroot /host</code>\n    </p>\n  );\n  switch (obj?.data?.status?.phase) {\n    case 'Failed':\n      return (\n        <NodeTerminalError\n          error={\n            <>\n              The debug pod failed.{' '}\n              {obj?.data?.status?.containerStatuses?.[0]?.state?.terminated?.message ||\n                obj?.data?.status?.message}\n            </>\n          }\n        />\n      );\n    case 'Running':\n      return <PodExecLoader obj={obj.data} message={message} />;\n    default:\n      return <LoadingBox />;\n  }\n};\n\nconst NodeTerminal: React.FC<NodeTerminalProps> = ({ obj: node }) => {\n  const [resources, setResources] = React.useState<FirehoseResource[]>([]);\n  const [errorMessage, setErrorMessage] = React.useState('');\n  const nodeName = node.metadata.name;\n  React.useEffect(() => {\n    const name = `${nodeName}-debug-${getRandomChars()}`;\n    const namespace = 'default';\n    getDebugPod(name, namespace, nodeName)\n      .then((debugPod: PodKind) => k8sCreate(PodModel, debugPod))\n      .then(() => {\n        setResources([\n          {\n            isList: false,\n            kind: 'Pod',\n            name,\n            namespace,\n            prop: 'obj',\n          },\n        ]);\n      })\n      .catch((e) => setErrorMessage(e.message));\n    const deletePod = async () => {\n      try {\n        await k8sKillByName(PodModel, name, namespace);\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.warn('Could not delete node terminal debug pod.', e);\n      }\n    };\n    window.addEventListener('beforeunload', deletePod);\n    return () => {\n      deletePod();\n      window.removeEventListener('beforeunload', deletePod);\n    };\n    //  eslint-disable-next-line\n  }, [nodeName]);\n\n  return errorMessage ? (\n    <NodeTerminalError error={errorMessage} />\n  ) : (\n    <Firehose resources={resources}>\n      <NodeTerminalInner />\n    </Firehose>\n  );\n};\n\nexport default NodeTerminal;\n"]}]}