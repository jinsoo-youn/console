{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/image-search/ImageStreamTagDropdown.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/image-search/ImageStreamTagDropdown.tsx","mtime":1615298458620},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport * as fuzzy from 'fuzzysearch';\nimport { useFormikContext, getIn } from 'formik';\nimport { ValidatedOptions } from '@patternfly/react-core';\nimport { DropdownField } from '@console/shared';\nimport { k8sGet } from '@console/internal/module/k8s';\nimport { ImageStreamTagModel } from '@console/internal/models';\nimport { UNASSIGNED_KEY } from '../../../const';\nimport { getImageStreamTags, getPorts, getSuggestedName, makePortName, imageStreamLabels, } from '../../../utils/imagestream-utils';\nimport { ImageStreamContext } from './ImageStreamContext';\nconst ImageStreamTagDropdown = () => {\n    let imageStreamTagList = {};\n    const { values: { name: resourceName, imageStream, application, formType, isi: { ports: isiPorts }, }, setFieldValue, initialValues, touched, } = useFormikContext();\n    const { state, hasImageStreams, setValidated } = React.useContext(ImageStreamContext);\n    const { selectedImageStream, accessLoading, loading } = state;\n    imageStreamTagList = getImageStreamTags(selectedImageStream);\n    const isNamespaceSelected = imageStream.namespace !== '' && !accessLoading;\n    const isStreamsAvailable = isNamespaceSelected && hasImageStreams && !loading;\n    const isTagsAvailable = isStreamsAvailable && !_.isEmpty(imageStreamTagList);\n    const isImageStreamSelected = imageStream.image !== '';\n    const searchImageTag = React.useCallback((selectedTag) => {\n        setFieldValue('isSearchingForImage', true);\n        k8sGet(ImageStreamTagModel, `${imageStream.image}:${selectedTag}`, imageStream.namespace)\n            .then((imageStreamImport) => {\n            const { image, tag, status, metadata: { labels }, } = imageStreamImport;\n            const imgStreamLabels = _.pick(labels, imageStreamLabels);\n            const name = imageStream.image;\n            const isi = { name, image, tag, status };\n            const ports = getPorts(isi);\n            setFieldValue('isSearchingForImage', false);\n            setFieldValue('isi.name', name);\n            setFieldValue('isi.image', _.merge(image, { metadata: { labels: imgStreamLabels } }));\n            setFieldValue('isi.tag', selectedTag);\n            setFieldValue('isi.ports', ports);\n            setFieldValue('image.ports', ports);\n            !resourceName && formType !== 'edit' && setFieldValue('name', getSuggestedName(name));\n            application.selectedKey !== UNASSIGNED_KEY &&\n                !application.name &&\n                setFieldValue('application.name', `${getSuggestedName(name)}-app`);\n            // set default port value\n            const targetPort = (!initialValues.route.targetPort || getIn(touched.imageStream, 'image')) &&\n                !getIn(touched.route, 'targetPort') &&\n                _.head(ports);\n            targetPort && setFieldValue('route.targetPort', makePortName(targetPort));\n            setValidated(ValidatedOptions.success);\n        })\n            .catch((error) => {\n            setFieldValue('isi', {});\n            setFieldValue('isi.status', { metadata: {}, status: '', message: error.message });\n            setFieldValue('isSearchingForImage', false);\n            setValidated(ValidatedOptions.error);\n        });\n    }, [\n        setFieldValue,\n        imageStream.image,\n        formType,\n        application.selectedKey,\n        application.name,\n        resourceName,\n        setValidated,\n        imageStream.namespace,\n        initialValues.route.targetPort,\n        touched.imageStream,\n        touched.route,\n    ]);\n    React.useEffect(() => {\n        imageStream.tag && searchImageTag(imageStream.tag);\n    }, [imageStream.tag, searchImageTag]);\n    React.useEffect(() => {\n        if (getIn(touched.imageStream, 'image') &&\n            !getIn(touched.route, 'targetPort') &&\n            !_.isEqual(initialValues.imageStream.image, imageStream.image)) {\n            const targetPort = _.head(isiPorts);\n            targetPort && setFieldValue('route.targetPort', makePortName(targetPort));\n        }\n    }, [\n        touched.route,\n        touched.imageStream,\n        initialValues.imageStream.image,\n        imageStream.image,\n        setFieldValue,\n        isiPorts,\n    ]);\n    return (React.createElement(DropdownField, { name: \"imageStream.tag\", label: \"Tag\", items: imageStreamTagList, key: imageStream.image, autocompleteFilter: fuzzy, title: imageStream.tag ||\n            (isNamespaceSelected && isImageStreamSelected && !isTagsAvailable ? 'No Tag' : 'Select Tag'), disabled: !isImageStreamSelected || !isTagsAvailable, fullWidth: true, required: true, onChange: (tag) => {\n            tag !== '' && searchImageTag(tag);\n        } }));\n};\nexport default ImageStreamTagDropdown;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/image-search/ImageStreamTagDropdown.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/image-search/ImageStreamTagDropdown.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport * as fuzzy from 'fuzzysearch';\nimport { useFormikContext, FormikValues, getIn } from 'formik';\nimport { ValidatedOptions } from '@patternfly/react-core';\nimport { DropdownField } from '@console/shared';\nimport { k8sGet, K8sResourceKind, ContainerPort } from '@console/internal/module/k8s';\nimport { ImageStreamTagModel } from '@console/internal/models';\nimport { UNASSIGNED_KEY } from '../../../const';\nimport {\n  getImageStreamTags,\n  getPorts,\n  getSuggestedName,\n  makePortName,\n  imageStreamLabels,\n} from '../../../utils/imagestream-utils';\nimport { ImageStreamContext } from './ImageStreamContext';\n\nconst ImageStreamTagDropdown: React.FC = () => {\n  let imageStreamTagList = {};\n  const {\n    values: {\n      name: resourceName,\n      imageStream,\n      application,\n      formType,\n      isi: { ports: isiPorts },\n    },\n    setFieldValue,\n    initialValues,\n    touched,\n  } = useFormikContext<FormikValues>();\n  const { state, hasImageStreams, setValidated } = React.useContext(ImageStreamContext);\n  const { selectedImageStream, accessLoading, loading } = state;\n  imageStreamTagList = getImageStreamTags(selectedImageStream as K8sResourceKind);\n  const isNamespaceSelected = imageStream.namespace !== '' && !accessLoading;\n  const isStreamsAvailable = isNamespaceSelected && hasImageStreams && !loading;\n  const isTagsAvailable = isStreamsAvailable && !_.isEmpty(imageStreamTagList);\n  const isImageStreamSelected = imageStream.image !== '';\n\n  const searchImageTag = React.useCallback(\n    (selectedTag: string) => {\n      setFieldValue('isSearchingForImage', true);\n      k8sGet(ImageStreamTagModel, `${imageStream.image}:${selectedTag}`, imageStream.namespace)\n        .then((imageStreamImport) => {\n          const {\n            image,\n            tag,\n            status,\n            metadata: { labels },\n          } = imageStreamImport;\n\n          const imgStreamLabels = _.pick(labels, imageStreamLabels);\n          const name = imageStream.image;\n          const isi = { name, image, tag, status };\n          const ports = getPorts(isi);\n          setFieldValue('isSearchingForImage', false);\n          setFieldValue('isi.name', name);\n          setFieldValue('isi.image', _.merge(image, { metadata: { labels: imgStreamLabels } }));\n          setFieldValue('isi.tag', selectedTag);\n          setFieldValue('isi.ports', ports);\n          setFieldValue('image.ports', ports);\n          !resourceName && formType !== 'edit' && setFieldValue('name', getSuggestedName(name));\n          application.selectedKey !== UNASSIGNED_KEY &&\n            !application.name &&\n            setFieldValue('application.name', `${getSuggestedName(name)}-app`);\n          // set default port value\n          const targetPort =\n            (!initialValues.route.targetPort || getIn(touched.imageStream, 'image')) &&\n            !getIn(touched.route, 'targetPort') &&\n            _.head(ports);\n          targetPort && setFieldValue('route.targetPort', makePortName(targetPort));\n          setValidated(ValidatedOptions.success);\n        })\n        .catch((error) => {\n          setFieldValue('isi', {});\n          setFieldValue('isi.status', { metadata: {}, status: '', message: error.message });\n          setFieldValue('isSearchingForImage', false);\n          setValidated(ValidatedOptions.error);\n        });\n    },\n    [\n      setFieldValue,\n      imageStream.image,\n      formType,\n      application.selectedKey,\n      application.name,\n      resourceName,\n      setValidated,\n      imageStream.namespace,\n      initialValues.route.targetPort,\n      touched.imageStream,\n      touched.route,\n    ],\n  );\n\n  React.useEffect(() => {\n    imageStream.tag && searchImageTag(imageStream.tag);\n  }, [imageStream.tag, searchImageTag]);\n\n  React.useEffect(() => {\n    if (\n      getIn(touched.imageStream, 'image') &&\n      !getIn(touched.route, 'targetPort') &&\n      !_.isEqual(initialValues.imageStream.image, imageStream.image)\n    ) {\n      const targetPort: ContainerPort = _.head(isiPorts);\n      targetPort && setFieldValue('route.targetPort', makePortName(targetPort));\n    }\n  }, [\n    touched.route,\n    touched.imageStream,\n    initialValues.imageStream.image,\n    imageStream.image,\n    setFieldValue,\n    isiPorts,\n  ]);\n\n  return (\n    <DropdownField\n      name=\"imageStream.tag\"\n      label=\"Tag\"\n      items={imageStreamTagList}\n      key={imageStream.image}\n      autocompleteFilter={fuzzy}\n      title={\n        imageStream.tag ||\n        (isNamespaceSelected && isImageStreamSelected && !isTagsAvailable ? 'No Tag' : 'Select Tag')\n      }\n      disabled={!isImageStreamSelected || !isTagsAvailable}\n      fullWidth\n      required\n      onChange={(tag) => {\n        tag !== '' && searchImageTag(tag);\n      }}\n    />\n  );\n};\n\nexport default ImageStreamTagDropdown;\n"]}]}