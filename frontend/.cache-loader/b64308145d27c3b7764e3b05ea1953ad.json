{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/deployImage-submit-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/deployImage-submit-utils.ts","mtime":1615298458620},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as _ from 'lodash';\nimport { DeploymentConfigModel, DeploymentModel, ImageStreamModel, ServiceModel, RouteModel, RoleBindingModel, } from '@console/internal/models';\nimport { k8sCreate, k8sUpdate } from '@console/internal/module/k8s';\nimport { ServiceModel as KnServiceModel } from '@console/knative-plugin';\nimport { getKnativeServiceDepResource } from '@console/knative-plugin/src/utils/create-knative-utils';\nimport { getRandomChars } from '@console/shared/src/utils';\nimport { getAppLabels, getPodLabels, mergeData, getCommonAnnotations, getTriggerAnnotation, } from '../../utils/resource-label-utils';\nimport { createRoute, createService, dryRunOpt } from '../../utils/shared-submit-utils';\nimport { getProbesData } from '../health-checks/create-health-checks-probe-utils';\nimport { RegistryType, getRuntime } from '../../utils/imagestream-utils';\nimport { Resources } from './import-types';\nexport const createSystemImagePullerRoleBinding = (formData, dryRun) => {\n    const { imageStream } = formData;\n    const roleBinding = {\n        kind: RoleBindingModel.kind,\n        apiVersion: `${RoleBindingModel.apiGroup}/${RoleBindingModel.apiVersion}`,\n        metadata: {\n            name: 'system:image-puller',\n            namespace: imageStream.namespace,\n        },\n        subjects: [\n            {\n                kind: 'ServiceAccount',\n                name: 'default',\n                namespace: formData.project.name,\n            },\n        ],\n        roleRef: {\n            apiGroup: RoleBindingModel.apiGroup,\n            kind: 'ClusterRole',\n            name: 'system:image-puller',\n        },\n    };\n    return k8sCreate(RoleBindingModel, roleBinding, dryRun ? dryRunOpt : {});\n};\nexport const createOrUpdateImageStream = (formData, dryRun, originalImageStream, verb = 'create', generatedImageStreamName = '') => {\n    const { project: { name: namespace }, application: { name: application }, name, isi: { name: isiName, tag }, labels: userLabels, } = formData;\n    const defaultLabels = getAppLabels(name, application);\n    const newImageStream = {\n        apiVersion: 'image.openshift.io/v1',\n        kind: 'ImageStream',\n        metadata: {\n            name: `${generatedImageStreamName || name}`,\n            namespace,\n            labels: Object.assign(Object.assign({}, defaultLabels), userLabels),\n        },\n        spec: {\n            tags: [\n                {\n                    name: tag,\n                    annotations: Object.assign(Object.assign({}, getCommonAnnotations()), { 'openshift.io/imported-from': isiName }),\n                    from: {\n                        kind: 'DockerImage',\n                        name: `${isiName}`,\n                    },\n                    importPolicy: {},\n                },\n            ],\n        },\n    };\n    const imageStream = mergeData(originalImageStream, newImageStream);\n    return verb === 'update'\n        ? k8sUpdate(ImageStreamModel, imageStream)\n        : k8sCreate(ImageStreamModel, newImageStream, dryRun ? dryRunOpt : {});\n};\nconst getMetadata = (formData) => {\n    var _a;\n    const { application: { name: application }, name, isi: { image }, labels: userLabels, imageStream: { tag: imgTag, namespace: imgNamespace }, } = formData;\n    const imgStreamName = getRuntime((_a = image.metadata) === null || _a === void 0 ? void 0 : _a.labels);\n    const defaultLabels = getAppLabels(name, application, imgStreamName, imgTag, imgNamespace);\n    const labels = Object.assign(Object.assign({}, defaultLabels), userLabels);\n    const podLabels = getPodLabels(name);\n    const volumes = [];\n    const volumeMounts = [];\n    let volumeNumber = 0;\n    _.each(_.get(image, ['dockerImageMetadata', 'Config', 'Volumes']), (value, path) => {\n        volumeNumber++;\n        const volumeName = `${name}-${volumeNumber}`;\n        volumes.push({\n            name: volumeName,\n            emptyDir: {},\n        });\n        volumeMounts.push({\n            name: volumeName,\n            mountPath: path,\n        });\n    });\n    return { labels, podLabels, volumes, volumeMounts };\n};\nexport const createOrUpdateDeployment = (formData, dryRun, originalDeployment, verb = 'create') => {\n    const { registry, project: { name: namespace }, name, isi: { image, ports, tag: imageStreamTag }, deployment: { env, replicas, triggers: { image: imageChange }, }, labels: userLabels, limits: { cpu, memory }, imageStream: { image: imgName, namespace: imgNamespace }, healthChecks, } = formData;\n    const annotations = getCommonAnnotations();\n    const defaultAnnotations = Object.assign(Object.assign(Object.assign({}, annotations), { 'alpha.image.policy.openshift.io/resolve-names': '*' }), getTriggerAnnotation(imgName || name, imgNamespace || namespace, imageChange, imageStreamTag));\n    const { labels, podLabels, volumes, volumeMounts } = getMetadata(formData);\n    const imageRef = registry === RegistryType.External\n        ? `${name}:${imageStreamTag}`\n        : _.get(image, 'dockerImageReference');\n    const newDeployment = {\n        kind: 'Deployment',\n        apiVersion: 'apps/v1',\n        metadata: {\n            name,\n            namespace,\n            labels,\n            annotations: defaultAnnotations,\n        },\n        spec: {\n            replicas,\n            selector: {\n                matchLabels: {\n                    app: name,\n                },\n            },\n            template: {\n                metadata: {\n                    labels: Object.assign(Object.assign({}, userLabels), podLabels),\n                    annotations,\n                },\n                spec: {\n                    volumes,\n                    containers: [\n                        Object.assign({ name, image: imageRef, ports,\n                            volumeMounts,\n                            env, resources: Object.assign(Object.assign({}, ((cpu.limit || memory.limit) && {\n                                limits: Object.assign(Object.assign({}, (cpu.limit && { cpu: `${cpu.limit}${cpu.limitUnit}` })), (memory.limit && { memory: `${memory.limit}${memory.limitUnit}` })),\n                            })), ((cpu.request || memory.request) && {\n                                requests: Object.assign(Object.assign({}, (cpu.request && { cpu: `${cpu.request}${cpu.requestUnit}` })), (memory.request && { memory: `${memory.request}${memory.requestUnit}` })),\n                            })) }, getProbesData(healthChecks)),\n                    ],\n                },\n            },\n        },\n    };\n    const deployment = mergeData(originalDeployment, newDeployment);\n    return verb === 'update'\n        ? k8sUpdate(DeploymentModel, deployment)\n        : k8sCreate(DeploymentModel, deployment, dryRun ? dryRunOpt : {});\n};\nexport const createOrUpdateDeploymentConfig = (formData, dryRun, originalDeploymentConfig, verb = 'create') => {\n    const { project: { name: namespace }, name, isi: { image, tag, ports }, deployment: { env, replicas, triggers }, labels: userLabels, limits: { cpu, memory }, imageStream: { image: imgName, namespace: imgNamespace }, healthChecks, } = formData;\n    const { labels, podLabels, volumes, volumeMounts } = getMetadata(formData);\n    const annotations = getCommonAnnotations();\n    const newDeploymentConfig = {\n        kind: 'DeploymentConfig',\n        apiVersion: 'apps.openshift.io/v1',\n        metadata: {\n            name,\n            namespace,\n            labels,\n            annotations,\n        },\n        spec: {\n            replicas,\n            selector: podLabels,\n            template: {\n                metadata: {\n                    labels: Object.assign(Object.assign({}, userLabels), podLabels),\n                    annotations,\n                },\n                spec: {\n                    volumes,\n                    containers: [\n                        Object.assign({ name, image: _.get(image, ['dockerImageMetadata', 'Config', 'Image']), ports,\n                            volumeMounts,\n                            env, resources: Object.assign(Object.assign({}, ((cpu.limit || memory.limit) && {\n                                limits: Object.assign(Object.assign({}, (cpu.limit && { cpu: `${cpu.limit}${cpu.limitUnit}` })), (memory.limit && { memory: `${memory.limit}${memory.limitUnit}` })),\n                            })), ((cpu.request || memory.request) && {\n                                requests: Object.assign(Object.assign({}, (cpu.request && { cpu: `${cpu.request}${cpu.requestUnit}` })), (memory.request && { memory: `${memory.request}${memory.requestUnit}` })),\n                            })) }, getProbesData(healthChecks)),\n                    ],\n                },\n            },\n            triggers: [\n                {\n                    type: 'ImageChange',\n                    imageChangeParams: {\n                        automatic: triggers.image,\n                        containerNames: [name],\n                        from: {\n                            kind: 'ImageStreamTag',\n                            name: `${imgName || name}:${tag}`,\n                            namespace: imgNamespace || namespace,\n                        },\n                    },\n                },\n                ...(triggers.config ? [{ type: 'ConfigChange' }] : []),\n            ],\n        },\n    };\n    const deploymentConfig = mergeData(originalDeploymentConfig, newDeploymentConfig);\n    return verb === 'update'\n        ? k8sUpdate(DeploymentConfigModel, deploymentConfig)\n        : k8sCreate(DeploymentConfigModel, deploymentConfig, dryRun ? dryRunOpt : {});\n};\nexport const ensurePortExists = (formData) => {\n    const { isi: { ports }, route: { defaultUnknownPort, unknownTargetPort }, } = formData;\n    let values = formData;\n    if (!Array.isArray(ports) || ports.length === 0) {\n        // If we lack pre-defined ports but they have specified a custom target port, use that instead\n        const containerPort = unknownTargetPort ? parseInt(unknownTargetPort, 10) : defaultUnknownPort;\n        const suppliedPorts = [{ containerPort, protocol: 'TCP' }];\n        values = Object.assign(Object.assign({}, values), { isi: Object.assign(Object.assign({}, values.isi), { ports: suppliedPorts }) });\n    }\n    return values;\n};\nexport const createOrUpdateDeployImageResources = (rawFormData, dryRun = false, verb = 'create', appResources) => __awaiter(void 0, void 0, void 0, function* () {\n    var _a, _b, _c, _d, _e, _f;\n    const formData = ensurePortExists(rawFormData);\n    const { name, registry, project: { name: namespace }, route: { create: canCreateRoute, disable }, isi: { ports, tag: imageStreamTag, image }, imageStream: { image: internalImageStreamName, namespace: internalImageStreamNamespace }, deployment: { triggers: { image: imageChange }, }, } = formData;\n    const internalImageName = getRuntime((_a = image.metadata) === null || _a === void 0 ? void 0 : _a.labels);\n    const requests = [];\n    if (registry === RegistryType.Internal) {\n        formData.imageStream.grantAccess &&\n            requests.push(createSystemImagePullerRoleBinding(formData, dryRun));\n    }\n    const imageStreamList = (_b = appResources === null || appResources === void 0 ? void 0 : appResources.imageStream) === null || _b === void 0 ? void 0 : _b.data;\n    const imageStreamData = _.orderBy(imageStreamList, ['metadata.resourceVersion'], ['desc']);\n    const originalImageStream = (imageStreamData.length && imageStreamData[0]) || {};\n    if (formData.resources !== Resources.KnativeService) {\n        registry === RegistryType.External &&\n            (yield createOrUpdateImageStream(formData, dryRun, originalImageStream, verb));\n        if (formData.resources === Resources.Kubernetes) {\n            requests.push(createOrUpdateDeployment(formData, dryRun, _.get(appResources, 'editAppResource.data'), verb));\n        }\n        else {\n            requests.push(createOrUpdateDeploymentConfig(formData, dryRun, _.get(appResources, 'editAppResource.data'), verb));\n        }\n        if (!_.isEmpty(ports)) {\n            const service = createService(formData, undefined, _.get(appResources, 'service.data'));\n            requests.push(verb === 'update'\n                ? k8sUpdate(ServiceModel, service)\n                : k8sCreate(ServiceModel, service, dryRun ? dryRunOpt : {}));\n            const route = createRoute(formData, undefined, _.get(appResources, 'route.data'));\n            if (verb === 'update' && disable) {\n                requests.push(k8sUpdate(RouteModel, route));\n            }\n            else if (canCreateRoute) {\n                requests.push(k8sCreate(RouteModel, route, dryRun ? dryRunOpt : {}));\n            }\n        }\n    }\n    else if (!dryRun) {\n        // Do not run serverless call during the dry run.\n        let imageStreamUrl = image === null || image === void 0 ? void 0 : image.dockerImageReference;\n        if (registry === RegistryType.External) {\n            let generatedImageStreamName = '';\n            if (verb === 'update') {\n                if (imageStreamList && imageStreamList.length) {\n                    const originalImageStreamTag = _.find((_c = originalImageStream === null || originalImageStream === void 0 ? void 0 : originalImageStream.status) === null || _c === void 0 ? void 0 : _c.tags, [\n                        'tag',\n                        imageStreamTag,\n                    ]);\n                    if (!_.isEmpty(originalImageStreamTag)) {\n                        generatedImageStreamName = `${name}-${getRandomChars()}`;\n                    }\n                }\n                else {\n                    generatedImageStreamName = `${name}-${getRandomChars()}`;\n                }\n            }\n            const imageStreamResponse = yield createOrUpdateImageStream(formData, dryRun, originalImageStream, generatedImageStreamName ? 'create' : verb, generatedImageStreamName);\n            const imageStreamRepo = imageStreamResponse.status.dockerImageRepository;\n            imageStreamUrl = imageStreamTag ? `${imageStreamRepo}:${imageStreamTag}` : imageStreamRepo;\n        }\n        const originalAnnotations = ((_f = (_e = (_d = appResources === null || appResources === void 0 ? void 0 : appResources.editAppResource) === null || _d === void 0 ? void 0 : _d.data) === null || _e === void 0 ? void 0 : _e.metadata) === null || _f === void 0 ? void 0 : _f.annotations) || {};\n        const triggerAnnotations = getTriggerAnnotation(internalImageStreamName || name, internalImageStreamNamespace || namespace, imageChange, imageStreamTag);\n        const annotations = Object.assign(Object.assign({}, originalAnnotations), triggerAnnotations);\n        const knDeploymentResource = getKnativeServiceDepResource(formData, imageStreamUrl, internalImageName || name, imageStreamTag, internalImageStreamNamespace, annotations, _.get(appResources, 'editAppResource.data'));\n        requests.push(verb === 'update'\n            ? k8sUpdate(KnServiceModel, knDeploymentResource)\n            : k8sCreate(KnServiceModel, knDeploymentResource));\n    }\n    return Promise.all(requests);\n});\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/deployImage-submit-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/deployImage-submit-utils.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,EACL,qBAAqB,EACrB,eAAe,EACf,gBAAgB,EAChB,YAAY,EACZ,UAAU,EACV,gBAAgB,GACjB,MAAM,0BAA0B,CAAC;AAClC,OAAO,EAAE,SAAS,EAA4B,SAAS,EAAE,MAAM,8BAA8B,CAAC;AAC9F,OAAO,EAAE,YAAY,IAAI,cAAc,EAAE,MAAM,yBAAyB,CAAC;AACzE,OAAO,EAAE,4BAA4B,EAAE,MAAM,wDAAwD,CAAC;AACtG,OAAO,EAAE,cAAc,EAAE,MAAM,2BAA2B,CAAC;AAC3D,OAAO,EACL,YAAY,EACZ,YAAY,EACZ,SAAS,EACT,oBAAoB,EACpB,oBAAoB,GACrB,MAAM,kCAAkC,CAAC;AAC1C,OAAO,EAAE,WAAW,EAAE,aAAa,EAAE,SAAS,EAAE,MAAM,iCAAiC,CAAC;AACxF,OAAO,EAAE,aAAa,EAAE,MAAM,mDAAmD,CAAC;AAClF,OAAO,EAAE,YAAY,EAAE,UAAU,EAAE,MAAM,+BAA+B,CAAC;AAEzE,OAAO,EAAuB,SAAS,EAAE,MAAM,gBAAgB,CAAC;AAEhE,MAAM,CAAC,MAAM,kCAAkC,GAAG,CAChD,QAA6B,EAC7B,MAAe,EACW,EAAE;IAC5B,MAAM,EAAE,WAAW,EAAE,GAAG,QAAQ,CAAC;IACjC,MAAM,WAAW,GAAG;QAClB,IAAI,EAAE,gBAAgB,CAAC,IAAI;QAC3B,UAAU,EAAE,GAAG,gBAAgB,CAAC,QAAQ,IAAI,gBAAgB,CAAC,UAAU,EAAE;QACzE,QAAQ,EAAE;YACR,IAAI,EAAE,qBAAqB;YAC3B,SAAS,EAAE,WAAW,CAAC,SAAS;SACjC;QACD,QAAQ,EAAE;YACR;gBACE,IAAI,EAAE,gBAAgB;gBACtB,IAAI,EAAE,SAAS;gBACf,SAAS,EAAE,QAAQ,CAAC,OAAO,CAAC,IAAI;aACjC;SACF;QACD,OAAO,EAAE;YACP,QAAQ,EAAE,gBAAgB,CAAC,QAAQ;YACnC,IAAI,EAAE,aAAa;YACnB,IAAI,EAAE,qBAAqB;SAC5B;KACF,CAAC;IACF,OAAO,SAAS,CAAC,gBAAgB,EAAE,WAAW,EAAE,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;AAC3E,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,yBAAyB,GAAG,CACvC,QAA6B,EAC7B,MAAe,EACf,mBAAqC,EACrC,OAAgB,QAAQ,EACxB,2BAAmC,EAAE,EACX,EAAE;IAC5B,MAAM,EACJ,OAAO,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,EAC5B,WAAW,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,EAClC,IAAI,EACJ,GAAG,EAAE,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,EAC3B,MAAM,EAAE,UAAU,GACnB,GAAG,QAAQ,CAAC;IACb,MAAM,aAAa,GAAG,YAAY,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC;IACtD,MAAM,cAAc,GAAG;QACrB,UAAU,EAAE,uBAAuB;QACnC,IAAI,EAAE,aAAa;QACnB,QAAQ,EAAE;YACR,IAAI,EAAE,GAAG,wBAAwB,IAAI,IAAI,EAAE;YAC3C,SAAS;YACT,MAAM,kCAAO,aAAa,GAAK,UAAU,CAAE;SAC5C;QACD,IAAI,EAAE;YACJ,IAAI,EAAE;gBACJ;oBACE,IAAI,EAAE,GAAG;oBACT,WAAW,kCACN,oBAAoB,EAAE,KACzB,4BAA4B,EAAE,OAAO,GACtC;oBACD,IAAI,EAAE;wBACJ,IAAI,EAAE,aAAa;wBACnB,IAAI,EAAE,GAAG,OAAO,EAAE;qBACnB;oBACD,YAAY,EAAE,EAAE;iBACjB;aACF;SACF;KACF,CAAC;IACF,MAAM,WAAW,GAAG,SAAS,CAAC,mBAAmB,EAAE,cAAc,CAAC,CAAC;IAEnE,OAAO,IAAI,KAAK,QAAQ;QACtB,CAAC,CAAC,SAAS,CAAC,gBAAgB,EAAE,WAAW,CAAC;QAC1C,CAAC,CAAC,SAAS,CAAC,gBAAgB,EAAE,cAAc,EAAE,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;AAC3E,CAAC,CAAC;AAEF,MAAM,WAAW,GAAG,CAAC,QAA6B,EAAE,EAAE;;IACpD,MAAM,EACJ,WAAW,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,EAClC,IAAI,EACJ,GAAG,EAAE,EAAE,KAAK,EAAE,EACd,MAAM,EAAE,UAAU,EAClB,WAAW,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,SAAS,EAAE,YAAY,EAAE,GACtD,GAAG,QAAQ,CAAC;IACb,MAAM,aAAa,GAAG,UAAU,OAAC,KAAK,CAAC,QAAQ,0CAAE,MAAM,CAAC,CAAC;IACzD,MAAM,aAAa,GAAG,YAAY,CAAC,IAAI,EAAE,WAAW,EAAE,aAAa,EAAE,MAAM,EAAE,YAAY,CAAC,CAAC;IAC3F,MAAM,MAAM,mCAAQ,aAAa,GAAK,UAAU,CAAE,CAAC;IACnD,MAAM,SAAS,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC;IAErC,MAAM,OAAO,GAAG,EAAE,CAAC;IACnB,MAAM,YAAY,GAAG,EAAE,CAAC;IACxB,IAAI,YAAY,GAAG,CAAC,CAAC;IACrB,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,qBAAqB,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC,EAAE,CAAC,KAAK,EAAE,IAAI,EAAE,EAAE;QACjF,YAAY,EAAE,CAAC;QACf,MAAM,UAAU,GAAG,GAAG,IAAI,IAAI,YAAY,EAAE,CAAC;QAC7C,OAAO,CAAC,IAAI,CAAC;YACX,IAAI,EAAE,UAAU;YAChB,QAAQ,EAAE,EAAE;SACb,CAAC,CAAC;QACH,YAAY,CAAC,IAAI,CAAC;YAChB,IAAI,EAAE,UAAU;YAChB,SAAS,EAAE,IAAI;SAChB,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,YAAY,EAAE,CAAC;AACtD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,wBAAwB,GAAG,CACtC,QAA6B,EAC7B,MAAe,EACf,kBAAoC,EACpC,OAAgB,QAAQ,EACE,EAAE;IAC5B,MAAM,EACJ,QAAQ,EACR,OAAO,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,EAC5B,IAAI,EACJ,GAAG,EAAE,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,cAAc,EAAE,EAC1C,UAAU,EAAE,EACV,GAAG,EACH,QAAQ,EACR,QAAQ,EAAE,EAAE,KAAK,EAAE,WAAW,EAAE,GACjC,EACD,MAAM,EAAE,UAAU,EAClB,MAAM,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,EACvB,WAAW,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,EACxD,YAAY,GACb,GAAG,QAAQ,CAAC;IAEb,MAAM,WAAW,GAAG,oBAAoB,EAAE,CAAC;IAC3C,MAAM,kBAAkB,iDACnB,WAAW,KACd,+CAA+C,EAAE,GAAG,KACjD,oBAAoB,CACrB,OAAO,IAAI,IAAI,EACf,YAAY,IAAI,SAAS,EACzB,WAAW,EACX,cAAc,CACf,CACF,CAAC;IAEF,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,YAAY,EAAE,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC;IAE3E,MAAM,QAAQ,GACZ,QAAQ,KAAK,YAAY,CAAC,QAAQ;QAChC,CAAC,CAAC,GAAG,IAAI,IAAI,cAAc,EAAE;QAC7B,CAAC,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,sBAAsB,CAAC,CAAC;IAE3C,MAAM,aAAa,GAAG;QACpB,IAAI,EAAE,YAAY;QAClB,UAAU,EAAE,SAAS;QACrB,QAAQ,EAAE;YACR,IAAI;YACJ,SAAS;YACT,MAAM;YACN,WAAW,EAAE,kBAAkB;SAChC;QACD,IAAI,EAAE;YACJ,QAAQ;YACR,QAAQ,EAAE;gBACR,WAAW,EAAE;oBACX,GAAG,EAAE,IAAI;iBACV;aACF;YACD,QAAQ,EAAE;gBACR,QAAQ,EAAE;oBACR,MAAM,kCAAO,UAAU,GAAK,SAAS,CAAE;oBACvC,WAAW;iBACZ;gBACD,IAAI,EAAE;oBACJ,OAAO;oBACP,UAAU,EAAE;wCAER,IAAI,EACJ,KAAK,EAAE,QAAQ,EACf,KAAK;4BACL,YAAY;4BACZ,GAAG,EACH,SAAS,kCACJ,CAAC,CAAC,GAAG,CAAC,KAAK,IAAI,MAAM,CAAC,KAAK,CAAC,IAAI;gCACjC,MAAM,kCACD,CAAC,GAAG,CAAC,KAAK,IAAI,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,SAAS,EAAE,EAAE,CAAC,GACtD,CAAC,MAAM,CAAC,KAAK,IAAI,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC,CACtE;6BACF,CAAC,GACC,CAAC,CAAC,GAAG,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI;gCACrC,QAAQ,kCACH,CAAC,GAAG,CAAC,OAAO,IAAI,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,OAAO,GAAG,GAAG,CAAC,WAAW,EAAE,EAAE,CAAC,GAC5D,CAAC,MAAM,CAAC,OAAO,IAAI,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC,CAC5E;6BACF,CAAC,KAED,aAAa,CAAC,YAAY,CAAC;qBAEjC;iBACF;aACF;SACF;KACF,CAAC;IAEF,MAAM,UAAU,GAAG,SAAS,CAAC,kBAAkB,EAAE,aAAa,CAAC,CAAC;IAEhE,OAAO,IAAI,KAAK,QAAQ;QACtB,CAAC,CAAC,SAAS,CAAC,eAAe,EAAE,UAAU,CAAC;QACxC,CAAC,CAAC,SAAS,CAAC,eAAe,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;AACtE,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,8BAA8B,GAAG,CAC5C,QAA6B,EAC7B,MAAe,EACf,wBAA0C,EAC1C,OAAgB,QAAQ,EACE,EAAE;IAC5B,MAAM,EACJ,OAAO,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,EAC5B,IAAI,EACJ,GAAG,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,EAC1B,UAAU,EAAE,EAAE,GAAG,EAAE,QAAQ,EAAE,QAAQ,EAAE,EACvC,MAAM,EAAE,UAAU,EAClB,MAAM,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,EACvB,WAAW,EAAE,EAAE,KAAK,EAAE,OAAO,EAAE,SAAS,EAAE,YAAY,EAAE,EACxD,YAAY,GACb,GAAG,QAAQ,CAAC;IAEb,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,OAAO,EAAE,YAAY,EAAE,GAAG,WAAW,CAAC,QAAQ,CAAC,CAAC;IAC3E,MAAM,WAAW,GAAG,oBAAoB,EAAE,CAAC;IAC3C,MAAM,mBAAmB,GAAG;QAC1B,IAAI,EAAE,kBAAkB;QACxB,UAAU,EAAE,sBAAsB;QAClC,QAAQ,EAAE;YACR,IAAI;YACJ,SAAS;YACT,MAAM;YACN,WAAW;SACZ;QACD,IAAI,EAAE;YACJ,QAAQ;YACR,QAAQ,EAAE,SAAS;YACnB,QAAQ,EAAE;gBACR,QAAQ,EAAE;oBACR,MAAM,kCAAO,UAAU,GAAK,SAAS,CAAE;oBACvC,WAAW;iBACZ;gBACD,IAAI,EAAE;oBACJ,OAAO;oBACP,UAAU,EAAE;wCAER,IAAI,EACJ,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,CAAC,qBAAqB,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,EAC/D,KAAK;4BACL,YAAY;4BACZ,GAAG,EACH,SAAS,kCACJ,CAAC,CAAC,GAAG,CAAC,KAAK,IAAI,MAAM,CAAC,KAAK,CAAC,IAAI;gCACjC,MAAM,kCACD,CAAC,GAAG,CAAC,KAAK,IAAI,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,KAAK,GAAG,GAAG,CAAC,SAAS,EAAE,EAAE,CAAC,GACtD,CAAC,MAAM,CAAC,KAAK,IAAI,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC,KAAK,GAAG,MAAM,CAAC,SAAS,EAAE,EAAE,CAAC,CACtE;6BACF,CAAC,GACC,CAAC,CAAC,GAAG,CAAC,OAAO,IAAI,MAAM,CAAC,OAAO,CAAC,IAAI;gCACrC,QAAQ,kCACH,CAAC,GAAG,CAAC,OAAO,IAAI,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,OAAO,GAAG,GAAG,CAAC,WAAW,EAAE,EAAE,CAAC,GAC5D,CAAC,MAAM,CAAC,OAAO,IAAI,EAAE,MAAM,EAAE,GAAG,MAAM,CAAC,OAAO,GAAG,MAAM,CAAC,WAAW,EAAE,EAAE,CAAC,CAC5E;6BACF,CAAC,KAED,aAAa,CAAC,YAAY,CAAC;qBAEjC;iBACF;aACF;YACD,QAAQ,EAAE;gBACR;oBACE,IAAI,EAAE,aAAa;oBACnB,iBAAiB,EAAE;wBACjB,SAAS,EAAE,QAAQ,CAAC,KAAK;wBACzB,cAAc,EAAE,CAAC,IAAI,CAAC;wBACtB,IAAI,EAAE;4BACJ,IAAI,EAAE,gBAAgB;4BACtB,IAAI,EAAE,GAAG,OAAO,IAAI,IAAI,IAAI,GAAG,EAAE;4BACjC,SAAS,EAAE,YAAY,IAAI,SAAS;yBACrC;qBACF;iBACF;gBACD,GAAG,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,cAAc,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;aACvD;SACF;KACF,CAAC;IAEF,MAAM,gBAAgB,GAAG,SAAS,CAAC,wBAAwB,EAAE,mBAAmB,CAAC,CAAC;IAElF,OAAO,IAAI,KAAK,QAAQ;QACtB,CAAC,CAAC,SAAS,CAAC,qBAAqB,EAAE,gBAAgB,CAAC;QACpD,CAAC,CAAC,SAAS,CAAC,qBAAqB,EAAE,gBAAgB,EAAE,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;AAClF,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,QAA6B,EAAuB,EAAE;IACrF,MAAM,EACJ,GAAG,EAAE,EAAE,KAAK,EAAE,EACd,KAAK,EAAE,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,GACjD,GAAG,QAAQ,CAAC;IAEb,IAAI,MAAM,GAAG,QAAQ,CAAC;IACtB,IAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC,EAAE;QAC/C,8FAA8F;QAC9F,MAAM,aAAa,GAAG,iBAAiB,CAAC,CAAC,CAAC,QAAQ,CAAC,iBAAiB,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,kBAAkB,CAAC;QAC/F,MAAM,aAAa,GAAG,CAAC,EAAE,aAAa,EAAE,QAAQ,EAAE,KAAK,EAAE,CAAC,CAAC;QAE3D,MAAM,mCACD,MAAM,KACT,GAAG,kCACE,MAAM,CAAC,GAAG,KACb,KAAK,EAAE,aAAa,MAEvB,CAAC;KACH;IAED,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kCAAkC,GAAG,CAChD,WAAgC,EAChC,SAAkB,KAAK,EACvB,OAAgB,QAAQ,EACxB,YAA2B,EACC,EAAE;;IAC9B,MAAM,QAAQ,GAAG,gBAAgB,CAAC,WAAW,CAAC,CAAC;IAC/C,MAAM,EACJ,IAAI,EACJ,QAAQ,EACR,OAAO,EAAE,EAAE,IAAI,EAAE,SAAS,EAAE,EAC5B,KAAK,EAAE,EAAE,MAAM,EAAE,cAAc,EAAE,OAAO,EAAE,EAC1C,GAAG,EAAE,EAAE,KAAK,EAAE,GAAG,EAAE,cAAc,EAAE,KAAK,EAAE,EAC1C,WAAW,EAAE,EAAE,KAAK,EAAE,uBAAuB,EAAE,SAAS,EAAE,4BAA4B,EAAE,EACxF,UAAU,EAAE,EACV,QAAQ,EAAE,EAAE,KAAK,EAAE,WAAW,EAAE,GACjC,GACF,GAAG,QAAQ,CAAC;IACb,MAAM,iBAAiB,GAAG,UAAU,OAAC,KAAK,CAAC,QAAQ,0CAAE,MAAM,CAAC,CAAC;IAC7D,MAAM,QAAQ,GAA+B,EAAE,CAAC;IAChD,IAAI,QAAQ,KAAK,YAAY,CAAC,QAAQ,EAAE;QACtC,QAAQ,CAAC,WAAW,CAAC,WAAW;YAC9B,QAAQ,CAAC,IAAI,CAAC,kCAAkC,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC,CAAC;KACvE;IACD,MAAM,eAAe,SAAG,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,WAAW,0CAAE,IAAI,CAAC;IACxD,MAAM,eAAe,GAAG,CAAC,CAAC,OAAO,CAAC,eAAe,EAAE,CAAC,0BAA0B,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;IAC3F,MAAM,mBAAmB,GAAG,CAAC,eAAe,CAAC,MAAM,IAAI,eAAe,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC;IACjF,IAAI,QAAQ,CAAC,SAAS,KAAK,SAAS,CAAC,cAAc,EAAE;QACnD,QAAQ,KAAK,YAAY,CAAC,QAAQ;YAChC,CAAC,MAAM,yBAAyB,CAAC,QAAQ,EAAE,MAAM,EAAE,mBAAmB,EAAE,IAAI,CAAC,CAAC,CAAC;QACjF,IAAI,QAAQ,CAAC,SAAS,KAAK,SAAS,CAAC,UAAU,EAAE;YAC/C,QAAQ,CAAC,IAAI,CACX,wBAAwB,CACtB,QAAQ,EACR,MAAM,EACN,CAAC,CAAC,GAAG,CAAC,YAAY,EAAE,sBAAsB,CAAC,EAC3C,IAAI,CACL,CACF,CAAC;SACH;aAAM;YACL,QAAQ,CAAC,IAAI,CACX,8BAA8B,CAC5B,QAAQ,EACR,MAAM,EACN,CAAC,CAAC,GAAG,CAAC,YAAY,EAAE,sBAAsB,CAAC,EAC3C,IAAI,CACL,CACF,CAAC;SACH;QACD,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,EAAE;YACrB,MAAM,OAAO,GAAG,aAAa,CAAC,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC,GAAG,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC,CAAC;YACxF,QAAQ,CAAC,IAAI,CACX,IAAI,KAAK,QAAQ;gBACf,CAAC,CAAC,SAAS,CAAC,YAAY,EAAE,OAAO,CAAC;gBAClC,CAAC,CAAC,SAAS,CAAC,YAAY,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAC9D,CAAC;YACF,MAAM,KAAK,GAAG,WAAW,CAAC,QAAQ,EAAE,SAAS,EAAE,CAAC,CAAC,GAAG,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC,CAAC;YAClF,IAAI,IAAI,KAAK,QAAQ,IAAI,OAAO,EAAE;gBAChC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC,CAAC;aAC7C;iBAAM,IAAI,cAAc,EAAE;gBACzB,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;aACtE;SACF;KACF;SAAM,IAAI,CAAC,MAAM,EAAE;QAClB,iDAAiD;QACjD,IAAI,cAAc,GAAW,KAAK,aAAL,KAAK,uBAAL,KAAK,CAAE,oBAAoB,CAAC;QACzD,IAAI,QAAQ,KAAK,YAAY,CAAC,QAAQ,EAAE;YACtC,IAAI,wBAAwB,GAAW,EAAE,CAAC;YAC1C,IAAI,IAAI,KAAK,QAAQ,EAAE;gBACrB,IAAI,eAAe,IAAI,eAAe,CAAC,MAAM,EAAE;oBAC7C,MAAM,sBAAsB,GAAG,CAAC,CAAC,IAAI,OAAC,mBAAmB,aAAnB,mBAAmB,uBAAnB,mBAAmB,CAAE,MAAM,0CAAE,IAAI,EAAE;wBACvE,KAAK;wBACL,cAAc;qBACf,CAAC,CAAC;oBACH,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,sBAAsB,CAAC,EAAE;wBACtC,wBAAwB,GAAG,GAAG,IAAI,IAAI,cAAc,EAAE,EAAE,CAAC;qBAC1D;iBACF;qBAAM;oBACL,wBAAwB,GAAG,GAAG,IAAI,IAAI,cAAc,EAAE,EAAE,CAAC;iBAC1D;aACF;YACD,MAAM,mBAAmB,GAAG,MAAM,yBAAyB,CACzD,QAAQ,EACR,MAAM,EACN,mBAAmB,EACnB,wBAAwB,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,EAC1C,wBAAwB,CACzB,CAAC;YACF,MAAM,eAAe,GAAG,mBAAmB,CAAC,MAAM,CAAC,qBAAqB,CAAC;YACzE,cAAc,GAAG,cAAc,CAAC,CAAC,CAAC,GAAG,eAAe,IAAI,cAAc,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC;SAC5F;QACD,MAAM,mBAAmB,GAAG,mBAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,eAAe,0CAAE,IAAI,0CAAE,QAAQ,0CAAE,WAAW,KAAI,EAAE,CAAC;QAC7F,MAAM,kBAAkB,GAAG,oBAAoB,CAC7C,uBAAuB,IAAI,IAAI,EAC/B,4BAA4B,IAAI,SAAS,EACzC,WAAW,EACX,cAAc,CACf,CAAC;QACF,MAAM,WAAW,mCACZ,mBAAmB,GACnB,kBAAkB,CACtB,CAAC;QACF,MAAM,oBAAoB,GAAG,4BAA4B,CACvD,QAAQ,EACR,cAAc,EACd,iBAAiB,IAAI,IAAI,EACzB,cAAc,EACd,4BAA4B,EAC5B,WAAW,EACX,CAAC,CAAC,GAAG,CAAC,YAAY,EAAE,sBAAsB,CAAC,CAC5C,CAAC;QACF,QAAQ,CAAC,IAAI,CACX,IAAI,KAAK,QAAQ;YACf,CAAC,CAAC,SAAS,CAAC,cAAc,EAAE,oBAAoB,CAAC;YACjD,CAAC,CAAC,SAAS,CAAC,cAAc,EAAE,oBAAoB,CAAC,CACpD,CAAC;KACH;IAED,OAAO,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AAC/B,CAAC,CAAA,CAAC","sourcesContent":["import * as _ from 'lodash';\nimport {\n  DeploymentConfigModel,\n  DeploymentModel,\n  ImageStreamModel,\n  ServiceModel,\n  RouteModel,\n  RoleBindingModel,\n} from '@console/internal/models';\nimport { k8sCreate, K8sResourceKind, K8sVerb, k8sUpdate } from '@console/internal/module/k8s';\nimport { ServiceModel as KnServiceModel } from '@console/knative-plugin';\nimport { getKnativeServiceDepResource } from '@console/knative-plugin/src/utils/create-knative-utils';\nimport { getRandomChars } from '@console/shared/src/utils';\nimport {\n  getAppLabels,\n  getPodLabels,\n  mergeData,\n  getCommonAnnotations,\n  getTriggerAnnotation,\n} from '../../utils/resource-label-utils';\nimport { createRoute, createService, dryRunOpt } from '../../utils/shared-submit-utils';\nimport { getProbesData } from '../health-checks/create-health-checks-probe-utils';\nimport { RegistryType, getRuntime } from '../../utils/imagestream-utils';\nimport { AppResources } from '../edit-application/edit-application-types';\nimport { DeployImageFormData, Resources } from './import-types';\n\nexport const createSystemImagePullerRoleBinding = (\n  formData: DeployImageFormData,\n  dryRun: boolean,\n): Promise<K8sResourceKind> => {\n  const { imageStream } = formData;\n  const roleBinding = {\n    kind: RoleBindingModel.kind,\n    apiVersion: `${RoleBindingModel.apiGroup}/${RoleBindingModel.apiVersion}`,\n    metadata: {\n      name: 'system:image-puller',\n      namespace: imageStream.namespace,\n    },\n    subjects: [\n      {\n        kind: 'ServiceAccount',\n        name: 'default',\n        namespace: formData.project.name,\n      },\n    ],\n    roleRef: {\n      apiGroup: RoleBindingModel.apiGroup,\n      kind: 'ClusterRole',\n      name: 'system:image-puller',\n    },\n  };\n  return k8sCreate(RoleBindingModel, roleBinding, dryRun ? dryRunOpt : {});\n};\n\nexport const createOrUpdateImageStream = (\n  formData: DeployImageFormData,\n  dryRun: boolean,\n  originalImageStream?: K8sResourceKind,\n  verb: K8sVerb = 'create',\n  generatedImageStreamName: string = '',\n): Promise<K8sResourceKind> => {\n  const {\n    project: { name: namespace },\n    application: { name: application },\n    name,\n    isi: { name: isiName, tag },\n    labels: userLabels,\n  } = formData;\n  const defaultLabels = getAppLabels(name, application);\n  const newImageStream = {\n    apiVersion: 'image.openshift.io/v1',\n    kind: 'ImageStream',\n    metadata: {\n      name: `${generatedImageStreamName || name}`,\n      namespace,\n      labels: { ...defaultLabels, ...userLabels },\n    },\n    spec: {\n      tags: [\n        {\n          name: tag,\n          annotations: {\n            ...getCommonAnnotations(),\n            'openshift.io/imported-from': isiName,\n          },\n          from: {\n            kind: 'DockerImage',\n            name: `${isiName}`,\n          },\n          importPolicy: {},\n        },\n      ],\n    },\n  };\n  const imageStream = mergeData(originalImageStream, newImageStream);\n\n  return verb === 'update'\n    ? k8sUpdate(ImageStreamModel, imageStream)\n    : k8sCreate(ImageStreamModel, newImageStream, dryRun ? dryRunOpt : {});\n};\n\nconst getMetadata = (formData: DeployImageFormData) => {\n  const {\n    application: { name: application },\n    name,\n    isi: { image },\n    labels: userLabels,\n    imageStream: { tag: imgTag, namespace: imgNamespace },\n  } = formData;\n  const imgStreamName = getRuntime(image.metadata?.labels);\n  const defaultLabels = getAppLabels(name, application, imgStreamName, imgTag, imgNamespace);\n  const labels = { ...defaultLabels, ...userLabels };\n  const podLabels = getPodLabels(name);\n\n  const volumes = [];\n  const volumeMounts = [];\n  let volumeNumber = 0;\n  _.each(_.get(image, ['dockerImageMetadata', 'Config', 'Volumes']), (value, path) => {\n    volumeNumber++;\n    const volumeName = `${name}-${volumeNumber}`;\n    volumes.push({\n      name: volumeName,\n      emptyDir: {},\n    });\n    volumeMounts.push({\n      name: volumeName,\n      mountPath: path,\n    });\n  });\n\n  return { labels, podLabels, volumes, volumeMounts };\n};\n\nexport const createOrUpdateDeployment = (\n  formData: DeployImageFormData,\n  dryRun: boolean,\n  originalDeployment?: K8sResourceKind,\n  verb: K8sVerb = 'create',\n): Promise<K8sResourceKind> => {\n  const {\n    registry,\n    project: { name: namespace },\n    name,\n    isi: { image, ports, tag: imageStreamTag },\n    deployment: {\n      env,\n      replicas,\n      triggers: { image: imageChange },\n    },\n    labels: userLabels,\n    limits: { cpu, memory },\n    imageStream: { image: imgName, namespace: imgNamespace },\n    healthChecks,\n  } = formData;\n\n  const annotations = getCommonAnnotations();\n  const defaultAnnotations = {\n    ...annotations,\n    'alpha.image.policy.openshift.io/resolve-names': '*',\n    ...getTriggerAnnotation(\n      imgName || name,\n      imgNamespace || namespace,\n      imageChange,\n      imageStreamTag,\n    ),\n  };\n\n  const { labels, podLabels, volumes, volumeMounts } = getMetadata(formData);\n\n  const imageRef =\n    registry === RegistryType.External\n      ? `${name}:${imageStreamTag}`\n      : _.get(image, 'dockerImageReference');\n\n  const newDeployment = {\n    kind: 'Deployment',\n    apiVersion: 'apps/v1',\n    metadata: {\n      name,\n      namespace,\n      labels,\n      annotations: defaultAnnotations,\n    },\n    spec: {\n      replicas,\n      selector: {\n        matchLabels: {\n          app: name,\n        },\n      },\n      template: {\n        metadata: {\n          labels: { ...userLabels, ...podLabels },\n          annotations,\n        },\n        spec: {\n          volumes,\n          containers: [\n            {\n              name,\n              image: imageRef,\n              ports,\n              volumeMounts,\n              env,\n              resources: {\n                ...((cpu.limit || memory.limit) && {\n                  limits: {\n                    ...(cpu.limit && { cpu: `${cpu.limit}${cpu.limitUnit}` }),\n                    ...(memory.limit && { memory: `${memory.limit}${memory.limitUnit}` }),\n                  },\n                }),\n                ...((cpu.request || memory.request) && {\n                  requests: {\n                    ...(cpu.request && { cpu: `${cpu.request}${cpu.requestUnit}` }),\n                    ...(memory.request && { memory: `${memory.request}${memory.requestUnit}` }),\n                  },\n                }),\n              },\n              ...getProbesData(healthChecks),\n            },\n          ],\n        },\n      },\n    },\n  };\n\n  const deployment = mergeData(originalDeployment, newDeployment);\n\n  return verb === 'update'\n    ? k8sUpdate(DeploymentModel, deployment)\n    : k8sCreate(DeploymentModel, deployment, dryRun ? dryRunOpt : {});\n};\n\nexport const createOrUpdateDeploymentConfig = (\n  formData: DeployImageFormData,\n  dryRun: boolean,\n  originalDeploymentConfig?: K8sResourceKind,\n  verb: K8sVerb = 'create',\n): Promise<K8sResourceKind> => {\n  const {\n    project: { name: namespace },\n    name,\n    isi: { image, tag, ports },\n    deployment: { env, replicas, triggers },\n    labels: userLabels,\n    limits: { cpu, memory },\n    imageStream: { image: imgName, namespace: imgNamespace },\n    healthChecks,\n  } = formData;\n\n  const { labels, podLabels, volumes, volumeMounts } = getMetadata(formData);\n  const annotations = getCommonAnnotations();\n  const newDeploymentConfig = {\n    kind: 'DeploymentConfig',\n    apiVersion: 'apps.openshift.io/v1',\n    metadata: {\n      name,\n      namespace,\n      labels,\n      annotations,\n    },\n    spec: {\n      replicas,\n      selector: podLabels,\n      template: {\n        metadata: {\n          labels: { ...userLabels, ...podLabels },\n          annotations,\n        },\n        spec: {\n          volumes,\n          containers: [\n            {\n              name,\n              image: _.get(image, ['dockerImageMetadata', 'Config', 'Image']),\n              ports,\n              volumeMounts,\n              env,\n              resources: {\n                ...((cpu.limit || memory.limit) && {\n                  limits: {\n                    ...(cpu.limit && { cpu: `${cpu.limit}${cpu.limitUnit}` }),\n                    ...(memory.limit && { memory: `${memory.limit}${memory.limitUnit}` }),\n                  },\n                }),\n                ...((cpu.request || memory.request) && {\n                  requests: {\n                    ...(cpu.request && { cpu: `${cpu.request}${cpu.requestUnit}` }),\n                    ...(memory.request && { memory: `${memory.request}${memory.requestUnit}` }),\n                  },\n                }),\n              },\n              ...getProbesData(healthChecks),\n            },\n          ],\n        },\n      },\n      triggers: [\n        {\n          type: 'ImageChange',\n          imageChangeParams: {\n            automatic: triggers.image,\n            containerNames: [name],\n            from: {\n              kind: 'ImageStreamTag',\n              name: `${imgName || name}:${tag}`,\n              namespace: imgNamespace || namespace,\n            },\n          },\n        },\n        ...(triggers.config ? [{ type: 'ConfigChange' }] : []),\n      ],\n    },\n  };\n\n  const deploymentConfig = mergeData(originalDeploymentConfig, newDeploymentConfig);\n\n  return verb === 'update'\n    ? k8sUpdate(DeploymentConfigModel, deploymentConfig)\n    : k8sCreate(DeploymentConfigModel, deploymentConfig, dryRun ? dryRunOpt : {});\n};\n\nexport const ensurePortExists = (formData: DeployImageFormData): DeployImageFormData => {\n  const {\n    isi: { ports },\n    route: { defaultUnknownPort, unknownTargetPort },\n  } = formData;\n\n  let values = formData;\n  if (!Array.isArray(ports) || ports.length === 0) {\n    // If we lack pre-defined ports but they have specified a custom target port, use that instead\n    const containerPort = unknownTargetPort ? parseInt(unknownTargetPort, 10) : defaultUnknownPort;\n    const suppliedPorts = [{ containerPort, protocol: 'TCP' }];\n\n    values = {\n      ...values,\n      isi: {\n        ...values.isi,\n        ports: suppliedPorts,\n      },\n    };\n  }\n\n  return values;\n};\n\nexport const createOrUpdateDeployImageResources = async (\n  rawFormData: DeployImageFormData,\n  dryRun: boolean = false,\n  verb: K8sVerb = 'create',\n  appResources?: AppResources,\n): Promise<K8sResourceKind[]> => {\n  const formData = ensurePortExists(rawFormData);\n  const {\n    name,\n    registry,\n    project: { name: namespace },\n    route: { create: canCreateRoute, disable },\n    isi: { ports, tag: imageStreamTag, image },\n    imageStream: { image: internalImageStreamName, namespace: internalImageStreamNamespace },\n    deployment: {\n      triggers: { image: imageChange },\n    },\n  } = formData;\n  const internalImageName = getRuntime(image.metadata?.labels);\n  const requests: Promise<K8sResourceKind>[] = [];\n  if (registry === RegistryType.Internal) {\n    formData.imageStream.grantAccess &&\n      requests.push(createSystemImagePullerRoleBinding(formData, dryRun));\n  }\n  const imageStreamList = appResources?.imageStream?.data;\n  const imageStreamData = _.orderBy(imageStreamList, ['metadata.resourceVersion'], ['desc']);\n  const originalImageStream = (imageStreamData.length && imageStreamData[0]) || {};\n  if (formData.resources !== Resources.KnativeService) {\n    registry === RegistryType.External &&\n      (await createOrUpdateImageStream(formData, dryRun, originalImageStream, verb));\n    if (formData.resources === Resources.Kubernetes) {\n      requests.push(\n        createOrUpdateDeployment(\n          formData,\n          dryRun,\n          _.get(appResources, 'editAppResource.data'),\n          verb,\n        ),\n      );\n    } else {\n      requests.push(\n        createOrUpdateDeploymentConfig(\n          formData,\n          dryRun,\n          _.get(appResources, 'editAppResource.data'),\n          verb,\n        ),\n      );\n    }\n    if (!_.isEmpty(ports)) {\n      const service = createService(formData, undefined, _.get(appResources, 'service.data'));\n      requests.push(\n        verb === 'update'\n          ? k8sUpdate(ServiceModel, service)\n          : k8sCreate(ServiceModel, service, dryRun ? dryRunOpt : {}),\n      );\n      const route = createRoute(formData, undefined, _.get(appResources, 'route.data'));\n      if (verb === 'update' && disable) {\n        requests.push(k8sUpdate(RouteModel, route));\n      } else if (canCreateRoute) {\n        requests.push(k8sCreate(RouteModel, route, dryRun ? dryRunOpt : {}));\n      }\n    }\n  } else if (!dryRun) {\n    // Do not run serverless call during the dry run.\n    let imageStreamUrl: string = image?.dockerImageReference;\n    if (registry === RegistryType.External) {\n      let generatedImageStreamName: string = '';\n      if (verb === 'update') {\n        if (imageStreamList && imageStreamList.length) {\n          const originalImageStreamTag = _.find(originalImageStream?.status?.tags, [\n            'tag',\n            imageStreamTag,\n          ]);\n          if (!_.isEmpty(originalImageStreamTag)) {\n            generatedImageStreamName = `${name}-${getRandomChars()}`;\n          }\n        } else {\n          generatedImageStreamName = `${name}-${getRandomChars()}`;\n        }\n      }\n      const imageStreamResponse = await createOrUpdateImageStream(\n        formData,\n        dryRun,\n        originalImageStream,\n        generatedImageStreamName ? 'create' : verb,\n        generatedImageStreamName,\n      );\n      const imageStreamRepo = imageStreamResponse.status.dockerImageRepository;\n      imageStreamUrl = imageStreamTag ? `${imageStreamRepo}:${imageStreamTag}` : imageStreamRepo;\n    }\n    const originalAnnotations = appResources?.editAppResource?.data?.metadata?.annotations || {};\n    const triggerAnnotations = getTriggerAnnotation(\n      internalImageStreamName || name,\n      internalImageStreamNamespace || namespace,\n      imageChange,\n      imageStreamTag,\n    );\n    const annotations = {\n      ...originalAnnotations,\n      ...triggerAnnotations,\n    };\n    const knDeploymentResource = getKnativeServiceDepResource(\n      formData,\n      imageStreamUrl,\n      internalImageName || name,\n      imageStreamTag,\n      internalImageStreamNamespace,\n      annotations,\n      _.get(appResources, 'editAppResource.data'),\n    );\n    requests.push(\n      verb === 'update'\n        ? k8sUpdate(KnServiceModel, knDeploymentResource)\n        : k8sCreate(KnServiceModel, knDeploymentResource),\n    );\n  }\n\n  return Promise.all(requests);\n};\n"]}]}