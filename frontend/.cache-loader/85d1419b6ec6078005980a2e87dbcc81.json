{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/pod/container.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/pod/container.ts","mtime":1615298458670},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { get, includes } from 'lodash';\nconst failedWaitingContainerReasons = ['ImagePullBackOff', 'ErrImagePull', 'CrashLoopBackOff'];\nconst failedTerminationContaineReasons = ['Error'];\nconst getContainerWaitingReason = (container) => get(container, 'state.waiting.reason');\nexport const getContainerImage = (container) => get(container, 'image');\nconst getContainerTerminatedReason = (container) => get(container, 'state.terminated.reason');\nconst stateReasonResolver = {\n    terminated: ({ reason, exitCode }) => `Terminated with ${reason}${exitCode ? ` (exit code ${exitCode}).` : '.'}`,\n    waiting: ({ reason }) => `Waiting (${reason}).`,\n};\nexport const isContainerFailing = (container) => !container.ready &&\n    (includes(failedWaitingContainerReasons, getContainerWaitingReason(container)) ||\n        includes(failedTerminationContaineReasons, getContainerTerminatedReason(container)));\nexport const getContainerStatusReason = (containerStatus) => {\n    if (containerStatus) {\n        const stateName = Object.getOwnPropertyNames(containerStatus.state).find((pn) => !!containerStatus.state[pn].reason);\n        if (stateName) {\n            const state = containerStatus.state[stateName];\n            return (state.message ||\n                (stateReasonResolver[stateName] && stateReasonResolver[stateName](state)) ||\n                stateName);\n        }\n    }\n    return undefined;\n};\nexport const getContainerStatuses = (pod) => get(pod, 'status.containerStatuses', []);\nexport const findFailingContainerStatus = (pod) => getContainerStatuses(pod).find(isContainerFailing);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/pod/container.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/pod/container.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,EAAE,QAAQ,EAAE,MAAM,QAAQ,CAAC;AAGvC,MAAM,6BAA6B,GAAG,CAAC,kBAAkB,EAAE,cAAc,EAAE,kBAAkB,CAAC,CAAC;AAC/F,MAAM,gCAAgC,GAAG,CAAC,OAAO,CAAC,CAAC;AAEnD,MAAM,yBAAyB,GAAG,CAAC,SAA0B,EAAE,EAAE,CAC/D,GAAG,CAAC,SAAS,EAAE,sBAAsB,CAAkD,CAAC;AAC1F,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,SAA0C,EAAE,EAAE,CAC9E,GAAG,CAAC,SAAS,EAAE,OAAO,CAA6B,CAAC;AACtD,MAAM,4BAA4B,GAAG,CAAC,SAA0B,EAAE,EAAE,CAClE,GAAG,CAAC,SAAS,EAAE,yBAAyB,CAAqD,CAAC;AAEhG,MAAM,mBAAmB,GAAG;IAC1B,UAAU,EAAE,CAAC,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE,EAAE,CACnC,mBAAmB,MAAM,GAAG,QAAQ,CAAC,CAAC,CAAC,eAAe,QAAQ,IAAI,CAAC,CAAC,CAAC,GAAG,EAAE;IAC5E,OAAO,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,YAAY,MAAM,IAAI;CAChD,CAAC;AACF,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,SAA0B,EAAE,EAAE,CAC/D,CAAC,SAAS,CAAC,KAAK;IAChB,CAAC,QAAQ,CAAC,6BAA6B,EAAE,yBAAyB,CAAC,SAAS,CAAC,CAAC;QAC5E,QAAQ,CAAC,gCAAgC,EAAE,4BAA4B,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;AAEzF,MAAM,CAAC,MAAM,wBAAwB,GAAG,CAAC,eAAgC,EAAE,EAAE;IAC3E,IAAI,eAAe,EAAE;QACnB,MAAM,SAAS,GAAG,MAAM,CAAC,mBAAmB,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,IAAI,CACtE,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,KAAK,CAAC,EAAE,CAAC,CAAC,MAAM,CAC3C,CAAC;QACF,IAAI,SAAS,EAAE;YACb,MAAM,KAAK,GAAG,eAAe,CAAC,KAAK,CAAC,SAAS,CAAC,CAAC;YAC/C,OAAO,CACL,KAAK,CAAC,OAAO;gBACb,CAAC,mBAAmB,CAAC,SAAS,CAAC,IAAI,mBAAmB,CAAC,SAAS,CAAC,CAAC,KAAK,CAAC,CAAC;gBACzE,SAAS,CACV,CAAC;SACH;KACF;IACD,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,oBAAoB,GAAG,CAAC,GAAY,EAAE,EAAE,CACnD,GAAG,CAAC,GAAG,EAAE,0BAA0B,EAAE,EAAE,CAA2C,CAAC;AAErF,MAAM,CAAC,MAAM,0BAA0B,GAAG,CAAC,GAAY,EAAE,EAAE,CACzD,oBAAoB,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC","sourcesContent":["import { get, includes } from 'lodash';\nimport { PodKind, ContainerStatus, ContainerSpec } from '@console/internal/module/k8s';\n\nconst failedWaitingContainerReasons = ['ImagePullBackOff', 'ErrImagePull', 'CrashLoopBackOff'];\nconst failedTerminationContaineReasons = ['Error'];\n\nconst getContainerWaitingReason = (container: ContainerStatus) =>\n  get(container, 'state.waiting.reason') as ContainerStatus['state']['waiting']['reason'];\nexport const getContainerImage = (container: ContainerStatus | ContainerSpec) =>\n  get(container, 'image') as ContainerStatus['image'];\nconst getContainerTerminatedReason = (container: ContainerStatus) =>\n  get(container, 'state.terminated.reason') as ContainerStatus['state']['terminated']['reason'];\n\nconst stateReasonResolver = {\n  terminated: ({ reason, exitCode }) =>\n    `Terminated with ${reason}${exitCode ? ` (exit code ${exitCode}).` : '.'}`,\n  waiting: ({ reason }) => `Waiting (${reason}).`,\n};\nexport const isContainerFailing = (container: ContainerStatus) =>\n  !container.ready &&\n  (includes(failedWaitingContainerReasons, getContainerWaitingReason(container)) ||\n    includes(failedTerminationContaineReasons, getContainerTerminatedReason(container)));\n\nexport const getContainerStatusReason = (containerStatus: ContainerStatus) => {\n  if (containerStatus) {\n    const stateName = Object.getOwnPropertyNames(containerStatus.state).find(\n      (pn) => !!containerStatus.state[pn].reason,\n    );\n    if (stateName) {\n      const state = containerStatus.state[stateName];\n      return (\n        state.message ||\n        (stateReasonResolver[stateName] && stateReasonResolver[stateName](state)) ||\n        stateName\n      );\n    }\n  }\n  return undefined;\n};\n\nexport const getContainerStatuses = (pod: PodKind) =>\n  get(pod, 'status.containerStatuses', []) as PodKind['status']['containerStatuses'];\n\nexport const findFailingContainerStatus = (pod: PodKind) =>\n  getContainerStatuses(pod).find(isContainerFailing);\n"]}]}