{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/nodes/node-dashboard/NodeAlerts.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/nodes/node-dashboard/NodeAlerts.tsx","mtime":1615298458600},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { PopoverPosition } from '@patternfly/react-core';\nimport AlertsBody from '@console/shared/src/components/dashboard/status-card/AlertsBody';\nimport { NodeDashboardContext } from '@console/app/src/components/nodes/node-dashboard/NodeDashboardContext';\nimport { StatusItem } from '@console/shared/src/components/dashboard/status-card/AlertItem';\nimport { LIMIT_STATE, } from '@console/shared/src/components/dashboard/utilization-card/UtilizationItem';\nimport { getUtilizationQueries, getResourceQutoaQueries, NodeQueries, } from '@console/app/src/components/nodes/node-dashboard/queries';\nimport { getNodeAddresses, getNodeMachineNameAndNamespace, } from '@console/shared/src/selectors/node';\nimport { usePrometheusQuery } from '@console/shared/src/components/dashboard/utilization-card/prometheus-hook';\nimport { humanizeCpuCores, humanizeBinaryBytes, } from '@console/internal/components/utils';\nimport { CPUPopover, MemoryPopover, } from '@console/app/src/components/nodes/node-dashboard/UtilizationCard';\nimport { YellowResourcesAlmostFullIcon, RedResourcesFullIcon, YellowExclamationTriangleIcon, } from '@console/shared/src/components/status/icons';\nimport { DashboardCardPopupLink } from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardLink';\nimport { referenceForModel, } from '@console/internal/module/k8s';\nimport { MachineModel } from '@console/internal/models';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport * as msg from './messages';\nimport { getMachineHealth, HealthChecksPopup, machineHealthChecksResource } from './NodeHealth';\nconst LimitLink = ({ humanize, currentKey, totalKey, limitKey, requestedKey, limitState, requestedState, Popover, }) => {\n    var _a;\n    const { obj } = React.useContext(NodeDashboardContext);\n    const nodeName = obj.metadata.name;\n    const nodeIp = (_a = getNodeAddresses(obj).find((addr) => addr.type === 'InternalIP')) === null || _a === void 0 ? void 0 : _a.address;\n    const [queries, resourceQuotaQueries] = React.useMemo(() => [getUtilizationQueries(nodeName, nodeIp), getResourceQutoaQueries(nodeName)], [nodeIp, nodeName]);\n    const [current, currentError, currentValue] = usePrometheusQuery(queries[currentKey], humanize);\n    const [total, totalError, totalValue] = usePrometheusQuery(queries[totalKey], humanize);\n    const [limit, limitError] = usePrometheusQuery(resourceQuotaQueries[limitKey], humanize);\n    const [requested, requestedError] = usePrometheusQuery(resourceQuotaQueries[requestedKey], humanize);\n    const available = currentValue && totalValue ? humanize(totalValue - currentValue).string : 'Not available';\n    return (React.createElement(Popover, { title: \"See breakdown\", nodeName: nodeName, nodeIp: nodeIp, current: currentError ? 'Not available' : current.string, total: totalError ? 'Not available' : total.string, limit: limitError ? 'Not available' : limit.string, requested: requestedError ? 'Not available' : requested.string, available: available, limitState: limitState, requestedState: requestedState, position: PopoverPosition.right }));\n};\nconst getMessage = (limitState, { limReqErr, limReqWarn, limErr, limWarn, reqWarn }) => {\n    const { limit, requested } = limitState || {};\n    if (!limitState || (limit === LIMIT_STATE.OK && requested === LIMIT_STATE.OK)) {\n        return null;\n    }\n    if (limit === LIMIT_STATE.ERROR) {\n        return {\n            Icon: RedResourcesFullIcon,\n            message: requested === LIMIT_STATE.OK ? limErr : limReqErr,\n        };\n    }\n    if (limit === LIMIT_STATE.WARN) {\n        return {\n            Icon: YellowResourcesAlmostFullIcon,\n            message: requested === LIMIT_STATE.OK ? limWarn : limReqWarn,\n        };\n    }\n    return {\n        Icon: YellowResourcesAlmostFullIcon,\n        message: reqWarn,\n    };\n};\nconst HealthChecksLink = () => {\n    const { obj } = React.useContext(NodeDashboardContext);\n    const { name, namespace } = getNodeMachineNameAndNamespace(obj);\n    const machineResource = React.useMemo(() => ({\n        kind: referenceForModel(MachineModel),\n        name,\n        namespace,\n    }), [name, namespace]);\n    const machine = useK8sWatchResource(machineResource);\n    const healthChecks = useK8sWatchResource(machineHealthChecksResource);\n    const healthState = getMachineHealth(obj, machine, healthChecks);\n    return (React.createElement(DashboardCardPopupLink, { linkTitle: \"See details\", popupTitle: \"Health Checks\", className: \"co-status-card__popup\" },\n        React.createElement(HealthChecksPopup, { conditions: healthState.conditions, machineHealthChecks: healthState.matchingHC })));\n};\nconst NodeAlerts = () => {\n    const { cpuLimit, memoryLimit, healthCheck } = React.useContext(NodeDashboardContext);\n    const cpuMessage = getMessage(cpuLimit, {\n        limReqErr: msg.CPU_LIMIT_REQ_ERROR,\n        limErr: msg.CPU_LIMIT_ERROR,\n        limReqWarn: msg.CPU_LIMIT_REQ_WARN,\n        limWarn: msg.CPU_LIMIT_WARN,\n        reqWarn: msg.CPU_REQ_WARN,\n    });\n    const memoryMessage = getMessage(memoryLimit, {\n        limReqErr: msg.MEM_LIMIT_REQ_ERROR,\n        limErr: msg.MEM_LIMIT_ERROR,\n        limReqWarn: msg.MEM_LIMIT_REQ_WARN,\n        limWarn: msg.MEM_LIMIT_WARN,\n        reqWarn: msg.MEM_REQ_WARN,\n    });\n    return (React.createElement(AlertsBody, null,\n        !!(healthCheck === null || healthCheck === void 0 ? void 0 : healthCheck.failingHealthCheck) && (React.createElement(StatusItem, { Icon: YellowExclamationTriangleIcon, message: msg.CONDITIONS_WARNING(healthCheck.reboot) },\n            React.createElement(HealthChecksLink, null))),\n        !!cpuMessage && (React.createElement(StatusItem, { Icon: cpuMessage.Icon, message: cpuMessage.message },\n            React.createElement(LimitLink, { humanize: humanizeCpuCores, currentKey: NodeQueries.CPU_USAGE, totalKey: NodeQueries.CPU_TOTAL, limitKey: NodeQueries.POD_RESOURCE_LIMIT_CPU, requestedKey: NodeQueries.POD_RESOURCE_REQUEST_CPU, limitState: cpuLimit === null || cpuLimit === void 0 ? void 0 : cpuLimit.limit, requestedState: cpuLimit === null || cpuLimit === void 0 ? void 0 : cpuLimit.requested, Popover: CPUPopover }))),\n        !!memoryMessage && (React.createElement(StatusItem, { Icon: memoryMessage.Icon, message: memoryMessage.message },\n            React.createElement(LimitLink, { humanize: humanizeBinaryBytes, currentKey: NodeQueries.MEMORY_USAGE, totalKey: NodeQueries.MEMORY_TOTAL, limitKey: NodeQueries.POD_RESOURCE_LIMIT_MEMORY, requestedKey: NodeQueries.POD_RESOURCE_REQUEST_MEMORY, limitState: memoryLimit === null || memoryLimit === void 0 ? void 0 : memoryLimit.limit, requestedState: memoryLimit === null || memoryLimit === void 0 ? void 0 : memoryLimit.requested, Popover: MemoryPopover })))));\n};\nexport default NodeAlerts;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/nodes/node-dashboard/NodeAlerts.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/nodes/node-dashboard/NodeAlerts.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { PopoverPosition } from '@patternfly/react-core';\nimport AlertsBody from '@console/shared/src/components/dashboard/status-card/AlertsBody';\nimport { NodeDashboardContext } from '@console/app/src/components/nodes/node-dashboard/NodeDashboardContext';\nimport { StatusItem } from '@console/shared/src/components/dashboard/status-card/AlertItem';\nimport {\n  LIMIT_STATE,\n  LimitRequested,\n} from '@console/shared/src/components/dashboard/utilization-card/UtilizationItem';\nimport {\n  getUtilizationQueries,\n  getResourceQutoaQueries,\n  NodeQueries,\n} from '@console/app/src/components/nodes/node-dashboard/queries';\nimport {\n  getNodeAddresses,\n  getNodeMachineNameAndNamespace,\n} from '@console/shared/src/selectors/node';\nimport { usePrometheusQuery } from '@console/shared/src/components/dashboard/utilization-card/prometheus-hook';\nimport {\n  humanizeCpuCores,\n  humanizeBinaryBytes,\n  Humanize,\n} from '@console/internal/components/utils';\nimport {\n  CPUPopover,\n  PopoverProps,\n  MemoryPopover,\n} from '@console/app/src/components/nodes/node-dashboard/UtilizationCard';\nimport {\n  YellowResourcesAlmostFullIcon,\n  RedResourcesFullIcon,\n  YellowExclamationTriangleIcon,\n} from '@console/shared/src/components/status/icons';\nimport { DashboardCardPopupLink } from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardLink';\nimport {\n  referenceForModel,\n  MachineKind,\n  MachineHealthCheckKind,\n} from '@console/internal/module/k8s';\nimport { MachineModel } from '@console/internal/models';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\n\nimport * as msg from './messages';\nimport { getMachineHealth, HealthChecksPopup, machineHealthChecksResource } from './NodeHealth';\n\nconst LimitLink: React.FC<LimitLinkProps> = ({\n  humanize,\n  currentKey,\n  totalKey,\n  limitKey,\n  requestedKey,\n  limitState,\n  requestedState,\n  Popover,\n}) => {\n  const { obj } = React.useContext(NodeDashboardContext);\n  const nodeName = obj.metadata.name;\n  const nodeIp = getNodeAddresses(obj).find((addr) => addr.type === 'InternalIP')?.address;\n  const [queries, resourceQuotaQueries] = React.useMemo(\n    () => [getUtilizationQueries(nodeName, nodeIp), getResourceQutoaQueries(nodeName)],\n    [nodeIp, nodeName],\n  );\n  const [current, currentError, currentValue] = usePrometheusQuery(queries[currentKey], humanize);\n  const [total, totalError, totalValue] = usePrometheusQuery(queries[totalKey], humanize);\n  const [limit, limitError] = usePrometheusQuery(resourceQuotaQueries[limitKey], humanize);\n  const [requested, requestedError] = usePrometheusQuery(\n    resourceQuotaQueries[requestedKey],\n    humanize,\n  );\n\n  const available =\n    currentValue && totalValue ? humanize(totalValue - currentValue).string : 'Not available';\n\n  return (\n    <Popover\n      title=\"See breakdown\"\n      nodeName={nodeName}\n      nodeIp={nodeIp}\n      current={currentError ? 'Not available' : current.string}\n      total={totalError ? 'Not available' : total.string}\n      limit={limitError ? 'Not available' : limit.string}\n      requested={requestedError ? 'Not available' : requested.string}\n      available={available}\n      limitState={limitState}\n      requestedState={requestedState}\n      position={PopoverPosition.right}\n    />\n  );\n};\n\nconst getMessage: GetMessage = (\n  limitState,\n  { limReqErr, limReqWarn, limErr, limWarn, reqWarn },\n) => {\n  const { limit, requested } = limitState || {};\n  if (!limitState || (limit === LIMIT_STATE.OK && requested === LIMIT_STATE.OK)) {\n    return null;\n  }\n  if (limit === LIMIT_STATE.ERROR) {\n    return {\n      Icon: RedResourcesFullIcon,\n      message: requested === LIMIT_STATE.OK ? limErr : limReqErr,\n    };\n  }\n  if (limit === LIMIT_STATE.WARN) {\n    return {\n      Icon: YellowResourcesAlmostFullIcon,\n      message: requested === LIMIT_STATE.OK ? limWarn : limReqWarn,\n    };\n  }\n  return {\n    Icon: YellowResourcesAlmostFullIcon,\n    message: reqWarn,\n  };\n};\n\nconst HealthChecksLink: React.FC = () => {\n  const { obj } = React.useContext(NodeDashboardContext);\n  const { name, namespace } = getNodeMachineNameAndNamespace(obj);\n  const machineResource = React.useMemo(\n    () => ({\n      kind: referenceForModel(MachineModel),\n      name,\n      namespace,\n    }),\n    [name, namespace],\n  );\n  const machine = useK8sWatchResource<MachineKind>(machineResource);\n  const healthChecks = useK8sWatchResource<MachineHealthCheckKind[]>(machineHealthChecksResource);\n  const healthState = getMachineHealth(obj, machine, healthChecks);\n  return (\n    <DashboardCardPopupLink\n      linkTitle=\"See details\"\n      popupTitle=\"Health Checks\"\n      className=\"co-status-card__popup\"\n    >\n      <HealthChecksPopup\n        conditions={healthState.conditions}\n        machineHealthChecks={healthState.matchingHC}\n      />\n    </DashboardCardPopupLink>\n  );\n};\n\nconst NodeAlerts: React.FC = () => {\n  const { cpuLimit, memoryLimit, healthCheck } = React.useContext(NodeDashboardContext);\n\n  const cpuMessage = getMessage(cpuLimit, {\n    limReqErr: msg.CPU_LIMIT_REQ_ERROR,\n    limErr: msg.CPU_LIMIT_ERROR,\n    limReqWarn: msg.CPU_LIMIT_REQ_WARN,\n    limWarn: msg.CPU_LIMIT_WARN,\n    reqWarn: msg.CPU_REQ_WARN,\n  });\n  const memoryMessage = getMessage(memoryLimit, {\n    limReqErr: msg.MEM_LIMIT_REQ_ERROR,\n    limErr: msg.MEM_LIMIT_ERROR,\n    limReqWarn: msg.MEM_LIMIT_REQ_WARN,\n    limWarn: msg.MEM_LIMIT_WARN,\n    reqWarn: msg.MEM_REQ_WARN,\n  });\n\n  return (\n    <AlertsBody>\n      {!!healthCheck?.failingHealthCheck && (\n        <StatusItem\n          Icon={YellowExclamationTriangleIcon}\n          message={msg.CONDITIONS_WARNING(healthCheck.reboot)}\n        >\n          <HealthChecksLink />\n        </StatusItem>\n      )}\n      {!!cpuMessage && (\n        <StatusItem Icon={cpuMessage.Icon} message={cpuMessage.message}>\n          <LimitLink\n            humanize={humanizeCpuCores}\n            currentKey={NodeQueries.CPU_USAGE}\n            totalKey={NodeQueries.CPU_TOTAL}\n            limitKey={NodeQueries.POD_RESOURCE_LIMIT_CPU}\n            requestedKey={NodeQueries.POD_RESOURCE_REQUEST_CPU}\n            limitState={cpuLimit?.limit}\n            requestedState={cpuLimit?.requested}\n            Popover={CPUPopover}\n          />\n        </StatusItem>\n      )}\n      {!!memoryMessage && (\n        <StatusItem Icon={memoryMessage.Icon} message={memoryMessage.message}>\n          <LimitLink\n            humanize={humanizeBinaryBytes}\n            currentKey={NodeQueries.MEMORY_USAGE}\n            totalKey={NodeQueries.MEMORY_TOTAL}\n            limitKey={NodeQueries.POD_RESOURCE_LIMIT_MEMORY}\n            requestedKey={NodeQueries.POD_RESOURCE_REQUEST_MEMORY}\n            limitState={memoryLimit?.limit}\n            requestedState={memoryLimit?.requested}\n            Popover={MemoryPopover}\n          />\n        </StatusItem>\n      )}\n    </AlertsBody>\n  );\n};\n\nexport default NodeAlerts;\n\ntype GetMessage = (\n  state: LimitRequested,\n  messages: {\n    limReqErr: string;\n    limErr: string;\n    limReqWarn: string;\n    limWarn: string;\n    reqWarn: string;\n  },\n) => {\n  Icon: React.ComponentType;\n  message: string;\n};\n\ntype LimitLinkProps = {\n  humanize: Humanize;\n  currentKey: string;\n  totalKey: string;\n  limitKey: string;\n  requestedKey: string;\n  limitState: LIMIT_STATE;\n  requestedState: LIMIT_STATE;\n  Popover: React.ComponentType<PopoverProps>;\n};\n"]}]}