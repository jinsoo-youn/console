{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/hooks/use-id-entities.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/hooks/use-id-entities.ts","mtime":1616735742420},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nexport const useIDEntities = (initialEntities = []) => {\n    const [entities, setEntities] = React.useState(initialEntities);\n    const [initialEntitiesChanged, setInitialEntitiesChanged] = React.useState(false);\n    const onEntityAdd = React.useCallback((newEntity) => {\n        var _a;\n        setInitialEntitiesChanged(true);\n        const id = ((_a = entities[entities.length - 1]) === null || _a === void 0 ? void 0 : _a.id) + 1 || 0;\n        setEntities([...entities, Object.assign(Object.assign({}, newEntity), { id })]);\n    }, [entities]);\n    const onEntityChange = React.useCallback((updatedEntity) => {\n        setInitialEntitiesChanged(true);\n        setEntities(entities.map((entity) => {\n            if (entity.id === updatedEntity.id) {\n                return updatedEntity;\n            }\n            return entity;\n        }));\n    }, [entities]);\n    const onEntityDelete = React.useCallback((idToDelete) => {\n        setInitialEntitiesChanged(true);\n        setEntities(entities.filter(({ id }) => id !== idToDelete));\n    }, [entities]);\n    return [\n        entities,\n        setEntities,\n        onEntityAdd,\n        onEntityChange,\n        onEntityDelete,\n        initialEntitiesChanged,\n    ];\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/hooks/use-id-entities.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/hooks/use-id-entities.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAG/B,MAAM,CAAC,MAAM,aAAa,GAAG,CAC3B,kBAAuB,EAAE,EACD,EAAE;IAC1B,MAAM,CAAC,QAAQ,EAAE,WAAW,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAM,eAAe,CAAC,CAAC;IACrE,MAAM,CAAC,sBAAsB,EAAE,yBAAyB,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAU,KAAK,CAAC,CAAC;IAE3F,MAAM,WAAW,GAAG,KAAK,CAAC,WAAW,CACnC,CAAC,SAAY,EAAE,EAAE;;QACf,yBAAyB,CAAC,IAAI,CAAC,CAAC;QAChC,MAAM,EAAE,GAAG,OAAA,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,0CAAE,EAAE,IAAG,CAAC,IAAI,CAAC,CAAC;QACtD,WAAW,CAAC,CAAC,GAAG,QAAQ,kCAAO,SAAS,KAAE,EAAE,IAAG,CAAC,CAAC;IACnD,CAAC,EACD,CAAC,QAAQ,CAAC,CACX,CAAC;IAEF,MAAM,cAAc,GAAG,KAAK,CAAC,WAAW,CACtC,CAAC,aAAgB,EAAE,EAAE;QACnB,yBAAyB,CAAC,IAAI,CAAC,CAAC;QAChC,WAAW,CACT,QAAQ,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;YACtB,IAAI,MAAM,CAAC,EAAE,KAAK,aAAa,CAAC,EAAE,EAAE;gBAClC,OAAO,aAAa,CAAC;aACtB;YACD,OAAO,MAAM,CAAC;QAChB,CAAC,CAAC,CACH,CAAC;IACJ,CAAC,EACD,CAAC,QAAQ,CAAC,CACX,CAAC;IAEF,MAAM,cAAc,GAAG,KAAK,CAAC,WAAW,CACtC,CAAC,UAAkB,EAAE,EAAE;QACrB,yBAAyB,CAAC,IAAI,CAAC,CAAC;QAChC,WAAW,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,KAAK,UAAU,CAAC,CAAC,CAAC;IAC9D,CAAC,EACD,CAAC,QAAQ,CAAC,CACX,CAAC;IAEF,OAAO;QACL,QAAQ;QACR,WAAW;QACX,WAAW;QACX,cAAc;QACd,cAAc;QACd,sBAAsB;KACvB,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { IDEntity } from '../types';\n\nexport const useIDEntities = <T extends IDEntity = IDEntity>(\n  initialEntities: T[] = [],\n): useIDEntitiesValues<T> => {\n  const [entities, setEntities] = React.useState<T[]>(initialEntities);\n  const [initialEntitiesChanged, setInitialEntitiesChanged] = React.useState<boolean>(false);\n\n  const onEntityAdd = React.useCallback(\n    (newEntity: T) => {\n      setInitialEntitiesChanged(true);\n      const id = entities[entities.length - 1]?.id + 1 || 0;\n      setEntities([...entities, { ...newEntity, id }]);\n    },\n    [entities],\n  );\n\n  const onEntityChange = React.useCallback(\n    (updatedEntity: T) => {\n      setInitialEntitiesChanged(true);\n      setEntities(\n        entities.map((entity) => {\n          if (entity.id === updatedEntity.id) {\n            return updatedEntity;\n          }\n          return entity;\n        }),\n      );\n    },\n    [entities],\n  );\n\n  const onEntityDelete = React.useCallback(\n    (idToDelete: number) => {\n      setInitialEntitiesChanged(true);\n      setEntities(entities.filter(({ id }) => id !== idToDelete));\n    },\n    [entities],\n  );\n\n  return [\n    entities,\n    setEntities,\n    onEntityAdd,\n    onEntityChange,\n    onEntityDelete,\n    initialEntitiesChanged,\n  ];\n};\n\ntype useIDEntitiesValues<T> = [\n  T[], // Entities\n  React.Dispatch<React.SetStateAction<T[]>>, // setEntities()\n  (newEntity: T) => void, // addEntity()\n  (updatedEntity: T) => void, // changeEntity()\n  (idToDelete: number) => void, // deleteEntity()\n  boolean, // initialEntitiesChanged\n];\n"]}]}