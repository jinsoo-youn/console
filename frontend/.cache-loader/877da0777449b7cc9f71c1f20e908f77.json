{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/module/auth.js","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/module/auth.js","mtime":1615298458760},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport { coFetch } from '../co-fetch';\nimport { stripBasePath } from '../components/utils/link';\nconst loginState = (key) => localStorage.getItem(key);\nconst loginStateItem = (key) => loginState(key);\nconst userID = 'userID';\nconst name = 'name';\nconst email = 'email';\nconst setNext = (next) => {\n    if (!next) {\n        return;\n    }\n    try {\n        // Don't redirect the user back to the error page after logging in.\n        const path = stripBasePath(next);\n        localStorage.setItem('next', path.startsWith('/error') ? '/' : path);\n    }\n    catch (e) {\n        // eslint-disable-next-line no-console\n        console.error(e);\n    }\n};\nconst clearLocalStorage = () => {\n    [userID, name, email].forEach((key) => {\n        try {\n            localStorage.removeItem(key);\n        }\n        catch (e) {\n            // eslint-disable-next-line no-console\n            console.error(e);\n        }\n    });\n};\nexport const authSvc = {\n    userID: () => {\n        const id = loginStateItem(userID);\n        try {\n            return id && atob(id);\n        }\n        catch (e) {\n            // eslint-disable-next-line no-console\n            console.error('error decoding userID', id, ':', e);\n        }\n        return id;\n    },\n    name: () => loginStateItem(name),\n    email: () => loginStateItem(email),\n    // Avoid logging out multiple times if concurrent requests return unauthorized.\n    logout: _.once((next) => {\n        setNext(next);\n        clearLocalStorage();\n        coFetch(window.SERVER_FLAGS.logoutURL, { method: 'POST' })\n            // eslint-disable-next-line no-console\n            .catch((e) => console.error('Error logging out', e))\n            .then(() => {\n            if (window.SERVER_FLAGS.logoutRedirect && !next) {\n                // window.location = window.SERVER_FLAGS.logoutRedirect;\n            }\n            else {\n                authSvc.login();\n            }\n        });\n    }),\n    // Extra steps are needed if this is OpenShift to delete the user's access\n    // token and logout the kube:admin user.\n    logoutOpenShift: (isKubeAdmin = false) => {\n        return authSvc.deleteOpenShiftToken().then(() => {\n            if (isKubeAdmin) {\n                authSvc.logoutKubeAdmin();\n            }\n            else {\n                authSvc.logout();\n            }\n        });\n    },\n    deleteOpenShiftToken: () => {\n        return (coFetch('/api/openshift/delete-token', { method: 'POST' })\n            // eslint-disable-next-line no-console\n            .catch((e) => console.error('Error deleting token', e)));\n    },\n    // The kube:admin user has a special logout flow. The OAuth server has a\n    // session cookie that must be cleared by POSTing to the kube:admin logout\n    // endpoint, otherwise the user will be logged in again immediately after\n    // logging out.\n    logoutKubeAdmin: () => {\n        clearLocalStorage();\n        // First POST to the console server to clear the console session cookie.\n        coFetch(window.SERVER_FLAGS.logoutURL, { method: 'POST' })\n            // eslint-disable-next-line no-console\n            .catch((e) => console.error('Error logging out', e))\n            .then(() => {\n            // We need to POST to the kube:admin logout URL. Since this is a\n            // cross-origin request, use a hidden form to POST.\n            const form = document.createElement('form');\n            form.action = window.SERVER_FLAGS.kubeAdminLogoutURL;\n            form.method = 'POST';\n            // Redirect back to the console when logout is complete by passing a\n            // `then` parameter.\n            const input = document.createElement('input');\n            input.type = 'hidden';\n            input.name = 'then';\n            input.value = window.SERVER_FLAGS.loginSuccessURL;\n            form.appendChild(input);\n            document.body.appendChild(form);\n            form.submit();\n        });\n    },\n    login: () => {\n        // window.location = window.SERVER_FLAGS.loginURL;\n    },\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/module/auth.js","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/module/auth.js"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\n\nimport { coFetch } from '../co-fetch';\nimport { stripBasePath } from '../components/utils/link';\n\nconst loginState = (key) => localStorage.getItem(key);\n\nconst loginStateItem = (key) => loginState(key);\n\nconst userID = 'userID';\nconst name = 'name';\nconst email = 'email';\n\nconst setNext = (next) => {\n  if (!next) {\n    return;\n  }\n\n  try {\n    // Don't redirect the user back to the error page after logging in.\n    const path = stripBasePath(next);\n    localStorage.setItem('next', path.startsWith('/error') ? '/' : path);\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error(e);\n  }\n};\n\nconst clearLocalStorage = () => {\n  [userID, name, email].forEach((key) => {\n    try {\n      localStorage.removeItem(key);\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error(e);\n    }\n  });\n};\n\nexport const authSvc = {\n  userID: () => {\n    const id = loginStateItem(userID);\n    try {\n      return id && atob(id);\n    } catch (e) {\n      // eslint-disable-next-line no-console\n      console.error('error decoding userID', id, ':', e);\n    }\n    return id;\n  },\n  name: () => loginStateItem(name),\n  email: () => loginStateItem(email),\n\n  // Avoid logging out multiple times if concurrent requests return unauthorized.\n  logout: _.once((next) => {\n    setNext(next);\n    clearLocalStorage();\n    coFetch(window.SERVER_FLAGS.logoutURL, { method: 'POST' })\n      // eslint-disable-next-line no-console\n      .catch((e) => console.error('Error logging out', e))\n      .then(() => {\n        if (window.SERVER_FLAGS.logoutRedirect && !next) {\n          // window.location = window.SERVER_FLAGS.logoutRedirect;\n        } else {\n          authSvc.login();\n        }\n      });\n  }),\n\n  // Extra steps are needed if this is OpenShift to delete the user's access\n  // token and logout the kube:admin user.\n  logoutOpenShift: (isKubeAdmin = false) => {\n    return authSvc.deleteOpenShiftToken().then(() => {\n      if (isKubeAdmin) {\n        authSvc.logoutKubeAdmin();\n      } else {\n        authSvc.logout();\n      }\n    });\n  },\n\n  deleteOpenShiftToken: () => {\n    return (\n      coFetch('/api/openshift/delete-token', { method: 'POST' })\n        // eslint-disable-next-line no-console\n        .catch((e) => console.error('Error deleting token', e))\n    );\n  },\n\n  // The kube:admin user has a special logout flow. The OAuth server has a\n  // session cookie that must be cleared by POSTing to the kube:admin logout\n  // endpoint, otherwise the user will be logged in again immediately after\n  // logging out.\n  logoutKubeAdmin: () => {\n    clearLocalStorage();\n    // First POST to the console server to clear the console session cookie.\n    coFetch(window.SERVER_FLAGS.logoutURL, { method: 'POST' })\n      // eslint-disable-next-line no-console\n      .catch((e) => console.error('Error logging out', e))\n      .then(() => {\n        // We need to POST to the kube:admin logout URL. Since this is a\n        // cross-origin request, use a hidden form to POST.\n        const form = document.createElement('form');\n        form.action = window.SERVER_FLAGS.kubeAdminLogoutURL;\n        form.method = 'POST';\n\n        // Redirect back to the console when logout is complete by passing a\n        // `then` parameter.\n        const input = document.createElement('input');\n        input.type = 'hidden';\n        input.name = 'then';\n        input.value = window.SERVER_FLAGS.loginSuccessURL;\n        form.appendChild(input);\n\n        document.body.appendChild(form);\n        form.submit();\n      });\n  },\n\n  login: () => {\n    // window.location = window.SERVER_FLAGS.loginURL;\n  },\n};\n"]}]}