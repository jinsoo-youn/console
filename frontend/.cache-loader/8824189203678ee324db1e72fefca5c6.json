{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/layouts/DagreLayout.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/layouts/DagreLayout.ts","mtime":1615298458710},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as dagre from 'dagre';\nimport * as _ from 'lodash';\nimport Point from '../geom/Point';\nimport { BaseLayout, LayoutGroup, LayoutLink, LayoutNode, LAYOUT_DEFAULTS, } from './BaseLayout';\nclass DagreNode extends LayoutNode {\n    getUpdatableNode() {\n        return {\n            id: this.id,\n            width: this.width,\n            height: this.height,\n            x: this.x,\n            y: this.y,\n        };\n    }\n    updateToNode(updatedNode) {\n        if (updatedNode) {\n            this.x = updatedNode.x;\n            this.y = updatedNode.y;\n            this.update();\n        }\n    }\n}\nclass DagreGroup extends LayoutGroup {\n}\nclass DagreLink extends LayoutLink {\n    updateBendpoints() {\n        if (this.points && !this.isFalse && this.points.length > 2) {\n            this.element.setBendpoints(this.points.slice(1, -1).map((point) => new Point(point.x, point.y)));\n        }\n    }\n}\nclass DagreLayout extends BaseLayout {\n    constructor(graph, options) {\n        super(graph, options);\n        this.dagreOptions = Object.assign(Object.assign(Object.assign({}, this.options), { marginx: 0, marginy: 0, nodesep: this.options.nodeDistance, edgesep: this.options.linkDistance, ranker: 'tight-tree', rankdir: 'TB' }), options);\n    }\n    createLayoutNode(node, nodeDistance, index) {\n        return new DagreNode(node, nodeDistance, index);\n    }\n    createLayoutLink(edge, source, target, isFalse) {\n        return new DagreLink(edge, source, target, isFalse);\n    }\n    createLayoutGroup(node, padding, index) {\n        return new DagreGroup(node, padding, index);\n    }\n    updateEdgeBendpoints(edges) {\n        _.forEach(edges, (edge) => {\n            const link = edge;\n            link.updateBendpoints();\n        });\n    }\n    startLayout(graph, initialRun, addingNodes) {\n        if (initialRun || addingNodes) {\n            const dagreGraph = new dagre.graphlib.Graph({ compound: true });\n            dagreGraph.setGraph(_.omit(this.dagreOptions, Object.keys(LAYOUT_DEFAULTS)));\n            _.forEach(this.groups, (group) => {\n                dagreGraph.setNode(group.id, group);\n                dagreGraph.setParent(group.id, group.element.getParent().getId());\n            });\n            const updatedNodes = [];\n            _.forEach(this.nodes, (node) => {\n                const updateNode = node.getUpdatableNode();\n                updatedNodes.push(updateNode);\n                dagreGraph.setNode(node.id, updateNode);\n                dagreGraph.setParent(node.id, node.element.getParent().getId());\n            });\n            _.forEach(this.edges, (dagreEdge) => {\n                dagreGraph.setEdge(dagreEdge.source.id, dagreEdge.target.id, dagreEdge);\n            });\n            dagre.layout(dagreGraph);\n            this.nodes.forEach((node) => {\n                node.updateToNode(updatedNodes.find((n) => n.id === node.id));\n            });\n            this.updateEdgeBendpoints(this.edges);\n        }\n        if (this.options.layoutOnDrag) {\n            this.forceSimulation.useForceSimulation(this.nodes, this.edges, this.getFixedNodeDistance);\n        }\n    }\n}\nexport { DagreLayout, DagreNode, DagreLink, DagreGroup };\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/layouts/DagreLayout.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/layouts/DagreLayout.ts"],"names":[],"mappings":"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","sourcesContent":["import * as dagre from 'dagre';\nimport * as _ from 'lodash';\nimport { Edge, Graph, Layout, Node } from '../types';\nimport Point from '../geom/Point';\nimport {\n  BaseLayout,\n  LayoutGroup,\n  LayoutLink,\n  LayoutNode,\n  LayoutOptions,\n  LAYOUT_DEFAULTS,\n} from './BaseLayout';\n\nclass DagreNode extends LayoutNode implements dagre.Node {\n  getUpdatableNode(): dagre.Node {\n    return {\n      id: this.id,\n      width: this.width,\n      height: this.height,\n      x: this.x,\n      y: this.y,\n    };\n  }\n\n  updateToNode(updatedNode: dagre.Node | undefined): void {\n    if (updatedNode) {\n      this.x = updatedNode.x;\n      this.y = updatedNode.y;\n      this.update();\n    }\n  }\n}\n\nclass DagreGroup extends LayoutGroup {}\n\nclass DagreLink extends LayoutLink {\n  public points: any[];\n\n  updateBendpoints(): void {\n    if (this.points && !this.isFalse && this.points.length > 2) {\n      this.element.setBendpoints(\n        this.points.slice(1, -1).map((point: any) => new Point(point.x, point.y)),\n      );\n    }\n  }\n}\n\ntype DagreLayoutOptions = LayoutOptions & dagre.GraphLabel;\n\nclass DagreLayout extends BaseLayout implements Layout {\n  private dagreOptions: DagreLayoutOptions;\n\n  constructor(graph: Graph, options?: Partial<DagreLayoutOptions>) {\n    super(graph, options);\n    this.dagreOptions = {\n      ...this.options,\n      marginx: 0,\n      marginy: 0,\n      nodesep: this.options.nodeDistance,\n      edgesep: this.options.linkDistance,\n      ranker: 'tight-tree',\n      rankdir: 'TB',\n      ...options,\n    };\n  }\n\n  protected createLayoutNode(node: Node, nodeDistance: number, index: number) {\n    return new DagreNode(node, nodeDistance, index);\n  }\n\n  protected createLayoutLink(\n    edge: Edge,\n    source: LayoutNode,\n    target: LayoutNode,\n    isFalse: boolean,\n  ): LayoutLink {\n    return new DagreLink(edge, source, target, isFalse);\n  }\n\n  protected createLayoutGroup(node: Node, padding: number, index: number) {\n    return new DagreGroup(node, padding, index);\n  }\n\n  protected updateEdgeBendpoints(edges: DagreLink[]): void {\n    _.forEach(edges, (edge) => {\n      const link = edge as DagreLink;\n      link.updateBendpoints();\n    });\n  }\n\n  protected startLayout(graph: Graph, initialRun: boolean, addingNodes: boolean): void {\n    if (initialRun || addingNodes) {\n      const dagreGraph = new dagre.graphlib.Graph({ compound: true });\n      dagreGraph.setGraph(_.omit(this.dagreOptions, Object.keys(LAYOUT_DEFAULTS)));\n\n      _.forEach(this.groups, (group) => {\n        dagreGraph.setNode(group.id, group);\n        dagreGraph.setParent(group.id, group.element.getParent().getId());\n      });\n\n      const updatedNodes: dagre.Node[] = [];\n      _.forEach(this.nodes, (node) => {\n        const updateNode = (node as DagreNode).getUpdatableNode();\n        updatedNodes.push(updateNode);\n        dagreGraph.setNode(node.id, updateNode);\n        dagreGraph.setParent(node.id, node.element.getParent().getId());\n      });\n\n      _.forEach(this.edges, (dagreEdge) => {\n        dagreGraph.setEdge(dagreEdge.source.id, dagreEdge.target.id, dagreEdge);\n      });\n\n      dagre.layout(dagreGraph);\n      this.nodes.forEach((node) => {\n        (node as DagreNode).updateToNode(updatedNodes.find((n) => n.id === node.id));\n      });\n\n      this.updateEdgeBendpoints(this.edges as DagreLink[]);\n    }\n\n    if (this.options.layoutOnDrag) {\n      this.forceSimulation.useForceSimulation(this.nodes, this.edges, this.getFixedNodeDistance);\n    }\n  }\n}\n\nexport { DagreLayout, DagreNode, DagreLink, DagreGroup, DagreLayoutOptions };\n"]}]}