{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/nav/perspective-nav.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/nav/perspective-nav.tsx","mtime":1615701814910},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport * as _ from 'lodash-es';\nimport { NavItemSeparator, Button } from '@patternfly/react-core';\nimport { MinusCircleIcon } from '@patternfly/react-icons';\nimport { useExtensions, isNavItem, isSeparatorNavItem } from '@console/plugin-sdk';\nimport { setPinnedResources } from '../../actions/ui';\nimport { getActivePerspective, getPinnedResources } from '../../reducers/ui';\nimport { modelFor, referenceForModel } from '../../module/k8s';\nimport confirmNavUnpinModal from './confirmNavUnpinModal';\nimport { NavSection } from './section';\nimport MulticlusterNav from '../hypercloud/nav/multicluster-nav';\nimport HyperCloudNav from '../hypercloud/nav/hypercloud-nav';\nimport MasterNav from '../hypercloud/nav/master-nav';\nimport { createLink, ResourceClusterLink, ResourceNSLink, RootNavLink } from './items';\nimport './_perspective-nav.scss';\nimport { getPerspectives } from '../../hypercloud/perspectives';\nimport { useTranslation } from 'react-i18next';\nconst getLabelForResource = (resource) => {\n    const model = modelFor(resource);\n    return model ? model.labelPlural : '';\n};\nconst PerspectiveNav = ({ perspective, pinnedResources, onPinnedResourcesChange }) => {\n    const { t } = useTranslation();\n    const navItemExtensions = useExtensions(isNavItem);\n    const perspectives = React.useMemo(() => getPerspectives.bind(null, t)(), []);\n    const matchingNavItems = React.useMemo(() => navItemExtensions.filter(item => item.properties.perspective === perspective), [navItemExtensions, perspective]);\n    const unPin = (e, resource) => {\n        e.preventDefault();\n        e.stopPropagation();\n        confirmNavUnpinModal(resource, pinnedResources, onPinnedResourcesChange);\n    };\n    // Until mc perspective is contributed through extensions, simply render static `MulticlusterNav`\n    if (window.SERVER_FLAGS.McMode) {\n        if (perspective === 'mc') {\n            return React.createElement(MulticlusterNav, null);\n        }\n        else if (perspective === 'hc') {\n            return React.createElement(HyperCloudNav, null);\n        }\n    }\n    return React.createElement(MasterNav, null);\n    const activePerspective = perspectives.find(p => p.properties.id === perspective);\n    if (!pinnedResources && activePerspective.properties.defaultPins) {\n        onPinnedResourcesChange(activePerspective.properties.defaultPins);\n    }\n    const getPinnedItems = (rootNavLink = false) => pinnedResources\n        .map(resource => {\n        const model = modelFor(resource);\n        if (!model) {\n            return null;\n        }\n        const { labelPlural, apiVersion, apiGroup, namespaced, crd, plural } = model;\n        const duplicates = pinnedResources.filter(res => getLabelForResource(res) === labelPlural).length > 1;\n        const props = {\n            key: `pinned-${resource}`,\n            name: labelPlural,\n            resource: crd ? referenceForModel(model) : plural,\n            tipText: duplicates ? `${labelPlural}: ${apiGroup || 'core'}/${apiVersion}` : null,\n            id: resource,\n        };\n        const Component = namespaced ? ResourceNSLink : ResourceClusterLink;\n        const removeButton = (React.createElement(Button, { className: \"oc-nav-pinned-item__unpin-button\", variant: \"link\", \"aria-label\": \"Unpin\", onClick: e => unPin(e, resource) },\n            React.createElement(MinusCircleIcon, { className: \"oc-nav-pinned-item__icon\" })));\n        return rootNavLink ? (React.createElement(RootNavLink, Object.assign({ key: resource, className: \"oc-nav-pinned-item\", component: Component }, props), removeButton)) : (React.createElement(Component, Object.assign({ key: resource, className: \"oc-nav-pinned-item\" }, props), removeButton));\n    })\n        .filter(p => p !== null);\n    // track sections so that we do not create duplicates\n    const renderedSections = [];\n    return (React.createElement(React.Fragment, null,\n        _.compact(matchingNavItems.map((item, index) => {\n            const { section } = item.properties;\n            if (section) {\n                if (renderedSections.includes(section)) {\n                    return;\n                }\n                renderedSections.push(section);\n                return React.createElement(NavSection, { title: section, key: section });\n            }\n            if (isSeparatorNavItem(item)) {\n                return React.createElement(NavItemSeparator, { key: `separator-${index}` });\n            }\n            return createLink(item, true);\n        })),\n        (pinnedResources === null || pinnedResources === void 0 ? void 0 : pinnedResources.length) ? (React.createElement(React.Fragment, null,\n            React.createElement(NavItemSeparator, null),\n            getPinnedItems(true))) : null));\n};\nconst mapStateToProps = (state) => {\n    return {\n        perspective: getActivePerspective(state),\n        pinnedResources: getPinnedResources(state),\n    };\n};\nconst mapDispatchToProps = (dispatch) => ({\n    onPinnedResourcesChange: (resources) => {\n        dispatch(setPinnedResources(resources));\n    },\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(PerspectiveNav);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/nav/perspective-nav.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/nav/perspective-nav.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect, Dispatch } from 'react-redux';\nimport * as _ from 'lodash-es';\nimport { NavItemSeparator, Button } from '@patternfly/react-core';\nimport { MinusCircleIcon } from '@patternfly/react-icons';\nimport { useExtensions, NavItem, isNavItem, isSeparatorNavItem } from '@console/plugin-sdk';\nimport { RootState } from '../../redux';\nimport { setPinnedResources } from '../../actions/ui';\nimport { getActivePerspective, getPinnedResources } from '../../reducers/ui';\nimport { modelFor, referenceForModel } from '../../module/k8s';\nimport confirmNavUnpinModal from './confirmNavUnpinModal';\nimport { NavSection } from './section';\nimport MulticlusterNav from '../hypercloud/nav/multicluster-nav';\nimport HyperCloudNav from '../hypercloud/nav/hypercloud-nav';\nimport MasterNav from '../hypercloud/nav/master-nav';\n\nimport { createLink, NavLinkComponent, ResourceClusterLink, ResourceNSLink, RootNavLink } from './items';\n\nimport './_perspective-nav.scss';\nimport { getPerspectives } from '../../hypercloud/perspectives';\nimport { useTranslation } from 'react-i18next';\n\ntype StateProps = {\n  perspective: string;\n  pinnedResources: string[];\n};\n\ninterface DispatchProps {\n  onPinnedResourcesChange: (resources: string[]) => void;\n}\n\nconst getLabelForResource = (resource: string): string => {\n  const model = modelFor(resource);\n  return model ? model.labelPlural : '';\n};\n\nconst PerspectiveNav: React.FC<StateProps & DispatchProps> = ({ perspective, pinnedResources, onPinnedResourcesChange }) => {\n  const { t } = useTranslation();\n  const navItemExtensions = useExtensions<NavItem>(isNavItem);\n  const perspectives = React.useMemo(() => getPerspectives.bind(null, t)(), []);\n\n  const matchingNavItems = React.useMemo(() => navItemExtensions.filter(item => item.properties.perspective === perspective), [navItemExtensions, perspective]);\n\n  const unPin = (e: React.MouseEvent<HTMLButtonElement>, resource: string) => {\n    e.preventDefault();\n    e.stopPropagation();\n    confirmNavUnpinModal(resource, pinnedResources, onPinnedResourcesChange);\n  };\n\n  // Until mc perspective is contributed through extensions, simply render static `MulticlusterNav`\n  if (window.SERVER_FLAGS.McMode) {\n    if (perspective === 'mc') {\n      return <MulticlusterNav />;\n    } else if (perspective === 'hc') {\n      return <HyperCloudNav />;\n    }\n  } \n\n  return <MasterNav />;\n  \n  const activePerspective = perspectives.find(p => p.properties.id === perspective);\n  if (!pinnedResources && activePerspective.properties.defaultPins) {\n    onPinnedResourcesChange(activePerspective.properties.defaultPins);\n  }\n\n  const getPinnedItems = (rootNavLink: boolean = false): React.ReactElement[] =>\n    pinnedResources\n      .map(resource => {\n        const model = modelFor(resource);\n        if (!model) {\n          return null;\n        }\n        const { labelPlural, apiVersion, apiGroup, namespaced, crd, plural } = model;\n        const duplicates = pinnedResources.filter(res => getLabelForResource(res) === labelPlural).length > 1;\n        const props = {\n          key: `pinned-${resource}`,\n          name: labelPlural,\n          resource: crd ? referenceForModel(model) : plural,\n          tipText: duplicates ? `${labelPlural}: ${apiGroup || 'core'}/${apiVersion}` : null,\n          id: resource,\n        };\n        const Component: NavLinkComponent = namespaced ? ResourceNSLink : ResourceClusterLink;\n        const removeButton = (\n          <Button className=\"oc-nav-pinned-item__unpin-button\" variant=\"link\" aria-label=\"Unpin\" onClick={e => unPin(e, resource)}>\n            <MinusCircleIcon className=\"oc-nav-pinned-item__icon\" />\n          </Button>\n        );\n\n        return rootNavLink ? (\n          <RootNavLink key={resource} className=\"oc-nav-pinned-item\" component={Component} {...props}>\n            {removeButton}\n          </RootNavLink>\n        ) : (\n          <Component key={resource} className=\"oc-nav-pinned-item\" {...props}>\n            {removeButton}\n          </Component>\n        );\n      })\n      .filter(p => p !== null);\n\n  // track sections so that we do not create duplicates\n  const renderedSections: string[] = [];\n\n  return (\n    <>\n      {_.compact(\n        matchingNavItems.map((item, index) => {\n          const { section } = item.properties;\n          if (section) {\n            if (renderedSections.includes(section)) {\n              return;\n            }\n            renderedSections.push(section);\n            return <NavSection title={section} key={section} />;\n          }\n          if (isSeparatorNavItem(item)) {\n            return <NavItemSeparator key={`separator-${index}`} />;\n          }\n          return createLink(item, true);\n        }),\n      )}\n      {pinnedResources?.length ? (\n        <>\n          <NavItemSeparator />\n          {getPinnedItems(true)}\n        </>\n      ) : null}\n    </>\n  );\n};\n\nconst mapStateToProps = (state: RootState): StateProps => {\n  return {\n    perspective: getActivePerspective(state),\n    pinnedResources: getPinnedResources(state),\n  };\n};\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => ({\n  onPinnedResourcesChange: (resources: string[]) => {\n    dispatch(setPinnedResources(resources));\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PerspectiveNav);\n"]}]}