{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/k8s-models.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/k8s-models.ts","mtime":1616735742510},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { Map as ImmutableMap } from 'immutable';\nimport * as _ from 'lodash-es';\nimport * as staticModels from '../../models';\nimport { referenceForModel, kindForReference } from './k8s';\nimport store from '../../redux';\nimport { registry } from '../../plugins';\nconst modelKey = (model) => {\n    // TODO: Use `referenceForModel` even for known API objects\n    return model.crd ? referenceForModel(model) : model.kind;\n};\nexport const modelsToMap = (models) => {\n    return ImmutableMap().withMutations((map) => {\n        models.forEach((model) => map.set(modelKey(model), model));\n    });\n};\n/**\n * Contains static resource definitions for Kubernetes objects.\n * Keys are of type `group:version:Kind`, but TypeScript doesn't support regex types (https://github.com/Microsoft/TypeScript/issues/6579).\n */\nlet k8sModels = modelsToMap(_.values(staticModels));\nconst hasModel = (model) => k8sModels.has(modelKey(model));\nk8sModels = k8sModels.withMutations((map) => {\n    const pluginModels = _.flatMap(registry.getModelDefinitions().map((md) => md.properties.models));\n    map.merge(modelsToMap(pluginModels.filter((model) => !hasModel(model))));\n});\n/**\n * Provides a synchronous way to acquire a statically-defined Kubernetes model.\n * NOTE: This will not work for CRDs defined at runtime, use `connectToModels` instead.\n */\nexport const modelFor = (ref) => {\n    let m = k8sModels.get(ref);\n    if (m) {\n        return m;\n    }\n    // FIXME: Remove synchronous `store.getState()` call here, should be using `connectToModels` instead, only here for backwards-compatibility\n    m = store\n        .getState()\n        .k8s.getIn(['RESOURCES', 'models'])\n        .get(ref);\n    if (m) {\n        return m;\n    }\n    m = k8sModels.get(kindForReference(ref));\n    if (m) {\n        return m;\n    }\n    m = store\n        .getState()\n        .k8s.getIn(['RESOURCES', 'models'])\n        .get(kindForReference(ref));\n    if (m) {\n        return m;\n    }\n};\n/**\n * Provides a synchronous way to acquire all statically-defined Kubernetes models.\n * NOTE: This will not work for CRDs defined at runtime, use `connectToModels` instead.\n */\nexport const allModels = () => k8sModels;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/k8s-models.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/k8s-models.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,GAAG,IAAI,YAAY,EAAE,MAAM,WAAW,CAAC;AAChD,OAAO,KAAK,CAAC,MAAM,WAAW,CAAC;AAG/B,OAAO,KAAK,YAAY,MAAM,cAAc,CAAC;AAC7C,OAAO,EAAE,iBAAiB,EAAE,gBAAgB,EAAE,MAAM,OAAO,CAAC;AAC5D,OAAO,KAAK,MAAM,aAAa,CAAC;AAChC,OAAO,EAAE,QAAQ,EAAE,MAAM,eAAe,CAAC;AAEzC,MAAM,QAAQ,GAAG,CAAC,KAAc,EAAU,EAAE;IAC1C,2DAA2D;IAC3D,OAAO,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC;AAC3D,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,MAAiB,EAAmD,EAAE;IAChG,OAAO,YAAY,EAAqC,CAAC,aAAa,CAAC,CAAC,GAAG,EAAE,EAAE;QAC7E,MAAM,CAAC,OAAO,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,GAAG,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,EAAE,KAAK,CAAC,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF;;;GAGG;AACH,IAAI,SAAS,GAAG,WAAW,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC;AAEpD,MAAM,QAAQ,GAAG,CAAC,KAAc,EAAE,EAAE,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;AAEpE,SAAS,GAAG,SAAS,CAAC,aAAa,CAAC,CAAC,GAAG,EAAE,EAAE;IAC1C,MAAM,YAAY,GAAG,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,mBAAmB,EAAE,CAAC,GAAG,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,EAAE,CAAC,UAAU,CAAC,MAAM,CAAC,CAAC,CAAC;IACjG,GAAG,CAAC,KAAK,CAAC,WAAW,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;AAC3E,CAAC,CAAC,CAAC;AAEH;;;GAGG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAG,CAAC,GAA6B,EAAE,EAAE;IACxD,IAAI,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,GAAG,CAAC,CAAC;IAC3B,IAAI,CAAC,EAAE;QACL,OAAO,CAAC,CAAC;KACV;IACD,2IAA2I;IAC3I,CAAC,GAAG,KAAK;SACN,QAAQ,EAAE;SACV,GAAG,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;SAClC,GAAG,CAAC,GAAG,CAAC,CAAC;IACZ,IAAI,CAAC,EAAE;QACL,OAAO,CAAC,CAAC;KACV;IACD,CAAC,GAAG,SAAS,CAAC,GAAG,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC;IACzC,IAAI,CAAC,EAAE;QACL,OAAO,CAAC,CAAC;KACV;IACD,CAAC,GAAG,KAAK;SACN,QAAQ,EAAE;SACV,GAAG,CAAC,KAAK,CAAC,CAAC,WAAW,EAAE,QAAQ,CAAC,CAAC;SAClC,GAAG,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC;IAC9B,IAAI,CAAC,EAAE;QACL,OAAO,CAAC,CAAC;KACV;AACH,CAAC,CAAC;AAEF;;;GAGG;AACH,MAAM,CAAC,MAAM,SAAS,GAAG,GAAG,EAAE,CAAC,SAAS,CAAC","sourcesContent":["import { Map as ImmutableMap } from 'immutable';\nimport * as _ from 'lodash-es';\n\nimport { K8sResourceKindReference, K8sKind } from './index';\nimport * as staticModels from '../../models';\nimport { referenceForModel, kindForReference } from './k8s';\nimport store from '../../redux';\nimport { registry } from '../../plugins';\n\nconst modelKey = (model: K8sKind): string => {\n  // TODO: Use `referenceForModel` even for known API objects\n  return model.crd ? referenceForModel(model) : model.kind;\n};\n\nexport const modelsToMap = (models: K8sKind[]): ImmutableMap<K8sResourceKindReference, K8sKind> => {\n  return ImmutableMap<K8sResourceKindReference, K8sKind>().withMutations((map) => {\n    models.forEach((model) => map.set(modelKey(model), model));\n  });\n};\n\n/**\n * Contains static resource definitions for Kubernetes objects.\n * Keys are of type `group:version:Kind`, but TypeScript doesn't support regex types (https://github.com/Microsoft/TypeScript/issues/6579).\n */\nlet k8sModels = modelsToMap(_.values(staticModels));\n\nconst hasModel = (model: K8sKind) => k8sModels.has(modelKey(model));\n\nk8sModels = k8sModels.withMutations((map) => {\n  const pluginModels = _.flatMap(registry.getModelDefinitions().map((md) => md.properties.models));\n  map.merge(modelsToMap(pluginModels.filter((model) => !hasModel(model))));\n});\n\n/**\n * Provides a synchronous way to acquire a statically-defined Kubernetes model.\n * NOTE: This will not work for CRDs defined at runtime, use `connectToModels` instead.\n */\nexport const modelFor = (ref: K8sResourceKindReference) => {\n  let m = k8sModels.get(ref);\n  if (m) {\n    return m;\n  }\n  // FIXME: Remove synchronous `store.getState()` call here, should be using `connectToModels` instead, only here for backwards-compatibility\n  m = store\n    .getState()\n    .k8s.getIn(['RESOURCES', 'models'])\n    .get(ref);\n  if (m) {\n    return m;\n  }\n  m = k8sModels.get(kindForReference(ref));\n  if (m) {\n    return m;\n  }\n  m = store\n    .getState()\n    .k8s.getIn(['RESOURCES', 'models'])\n    .get(kindForReference(ref));\n  if (m) {\n    return m;\n  }\n};\n\n/**\n * Provides a synchronous way to acquire all statically-defined Kubernetes models.\n * NOTE: This will not work for CRDs defined at runtime, use `connectToModels` instead.\n */\nexport const allModels = () => k8sModels;\n"]}]}