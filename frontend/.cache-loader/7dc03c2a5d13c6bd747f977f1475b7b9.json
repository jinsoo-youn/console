{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/cloud-shell/setup/CloudShellSetup.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/cloud-shell/setup/CloudShellSetup.tsx","mtime":1616735742370},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as React from 'react';\nimport { Formik } from 'formik';\nimport { ALL_NAMESPACES_KEY } from '@console/shared';\nimport { ProjectRequestModel } from '@console/internal/models';\nimport { connect } from 'react-redux';\nimport { k8sCreate } from '@console/internal/module/k8s';\nimport { CREATE_NAMESPACE_KEY, cloudShellSetupValidation, } from './cloud-shell-setup-utils';\nimport CloudSehellSetupForm from './CloudShellSetupForm';\nimport { WorkspaceModel } from '../../../models';\nimport { newCloudShellWorkSpace, createCloudShellResourceName } from '../cloud-shell-utils';\nconst CloudShellSetup = ({ activeNamespace, onSubmit, onCancel, }) => {\n    const initialValues = {\n        namespace: activeNamespace === ALL_NAMESPACES_KEY ? undefined : activeNamespace,\n    };\n    const handleSubmit = (values, actions) => __awaiter(void 0, void 0, void 0, function* () {\n        actions.setSubmitting(true);\n        const createNamespace = values.namespace === CREATE_NAMESPACE_KEY;\n        const namespace = createNamespace ? values.newNamespace : values.namespace;\n        try {\n            if (createNamespace) {\n                yield k8sCreate(ProjectRequestModel, {\n                    metadata: {\n                        name: namespace,\n                    },\n                });\n            }\n            yield k8sCreate(WorkspaceModel, newCloudShellWorkSpace(createCloudShellResourceName(), namespace));\n            onSubmit && onSubmit(namespace);\n        }\n        catch (err) {\n            actions.setStatus({ submitError: err.message });\n        }\n        actions.setSubmitting(false);\n    });\n    return (React.createElement(\"div\", { className: \"co-m-pane__body\", style: { paddingBottom: 0 } },\n        React.createElement(\"h2\", null, \"Initialize Terminal\"),\n        React.createElement(Formik, { initialValues: initialValues, onSubmit: handleSubmit, onReset: onCancel, validate: cloudShellSetupValidation }, (props) => React.createElement(CloudSehellSetupForm, Object.assign({}, props)))));\n};\nconst mapStateToProps = (state) => {\n    var _a, _b;\n    return ({\n        username: ((_b = (_a = state.UI.get('user')) === null || _a === void 0 ? void 0 : _a.metadata) === null || _b === void 0 ? void 0 : _b.name) || '',\n        activeNamespace: state.UI.get('activeNamespace'),\n    });\n};\nexport default connect(mapStateToProps)(CloudShellSetup);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/cloud-shell/setup/CloudShellSetup.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/cloud-shell/setup/CloudShellSetup.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAChC,OAAO,EAAE,kBAAkB,EAAE,MAAM,iBAAiB,CAAC;AACrD,OAAO,EAAE,mBAAmB,EAAE,MAAM,0BAA0B,CAAC;AAE/D,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AAEtC,OAAO,EAAE,SAAS,EAAE,MAAM,8BAA8B,CAAC;AACzD,OAAO,EAEL,oBAAoB,EACpB,yBAAyB,GAC1B,MAAM,2BAA2B,CAAC;AACnC,OAAO,oBAAoB,MAAM,uBAAuB,CAAC;AACzD,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AACjD,OAAO,EAAE,sBAAsB,EAAE,4BAA4B,EAAE,MAAM,sBAAsB,CAAC;AAY5F,MAAM,eAAe,GAAmC,CAAC,EACvD,eAAe,EACf,QAAQ,EACR,QAAQ,GACT,EAAE,EAAE;IACH,MAAM,aAAa,GAA4B;QAC7C,SAAS,EAAE,eAAe,KAAK,kBAAkB,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,eAAe;KAChF,CAAC;IACF,MAAM,YAAY,GAAG,CAAO,MAA+B,EAAE,OAAO,EAAE,EAAE;QACtE,OAAO,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;QAC5B,MAAM,eAAe,GAAG,MAAM,CAAC,SAAS,KAAK,oBAAoB,CAAC;QAClE,MAAM,SAAS,GAAG,eAAe,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC;QAE3E,IAAI;YACF,IAAI,eAAe,EAAE;gBACnB,MAAM,SAAS,CAAC,mBAAmB,EAAE;oBACnC,QAAQ,EAAE;wBACR,IAAI,EAAE,SAAS;qBAChB;iBACF,CAAC,CAAC;aACJ;YACD,MAAM,SAAS,CACb,cAAc,EACd,sBAAsB,CAAC,4BAA4B,EAAE,EAAE,SAAS,CAAC,CAClE,CAAC;YACF,QAAQ,IAAI,QAAQ,CAAC,SAAS,CAAC,CAAC;SACjC;QAAC,OAAO,GAAG,EAAE;YACZ,OAAO,CAAC,SAAS,CAAC,EAAE,WAAW,EAAE,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;SACjD;QACD,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;IAC/B,CAAC,CAAA,CAAC;IAEF,OAAO,CACL,6BAAK,SAAS,EAAC,iBAAiB,EAAC,KAAK,EAAE,EAAE,aAAa,EAAE,CAAC,EAAE;QAC1D,sDAA4B;QAC5B,oBAAC,MAAM,IACL,aAAa,EAAE,aAAa,EAC5B,QAAQ,EAAE,YAAY,EACtB,OAAO,EAAE,QAAQ,EACjB,QAAQ,EAAE,yBAAyB,IAElC,CAAC,KAAK,EAAE,EAAE,CAAC,oBAAC,oBAAoB,oBAAK,KAAK,EAAI,CACxC,CACL,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,eAAe,GAAG,CAAC,KAAgB,EAAc,EAAE;;IAAC,OAAA,CAAC;QACzD,QAAQ,EAAE,aAAA,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,0CAAE,QAAQ,0CAAE,IAAI,KAAI,EAAE;QACpD,eAAe,EAAE,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,iBAAiB,CAAC;KACjD,CAAC,CAAA;CAAA,CAAC;AAEH,eAAe,OAAO,CAAa,eAAe,CAAC,CAAC,eAAe,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { Formik } from 'formik';\nimport { ALL_NAMESPACES_KEY } from '@console/shared';\nimport { ProjectRequestModel } from '@console/internal/models';\nimport { RootState } from '@console/internal/redux';\nimport { connect } from 'react-redux';\n\nimport { k8sCreate } from '@console/internal/module/k8s';\nimport {\n  CloudShellSetupFormData,\n  CREATE_NAMESPACE_KEY,\n  cloudShellSetupValidation,\n} from './cloud-shell-setup-utils';\nimport CloudSehellSetupForm from './CloudShellSetupForm';\nimport { WorkspaceModel } from '../../../models';\nimport { newCloudShellWorkSpace, createCloudShellResourceName } from '../cloud-shell-utils';\n\ninterface StateProps {\n  activeNamespace: string;\n  username: string;\n}\n\ntype Props = StateProps & {\n  onSubmit?: (namespace: string) => void;\n  onCancel?: () => void;\n};\n\nconst CloudShellSetup: React.FunctionComponent<Props> = ({\n  activeNamespace,\n  onSubmit,\n  onCancel,\n}) => {\n  const initialValues: CloudShellSetupFormData = {\n    namespace: activeNamespace === ALL_NAMESPACES_KEY ? undefined : activeNamespace,\n  };\n  const handleSubmit = async (values: CloudShellSetupFormData, actions) => {\n    actions.setSubmitting(true);\n    const createNamespace = values.namespace === CREATE_NAMESPACE_KEY;\n    const namespace = createNamespace ? values.newNamespace : values.namespace;\n\n    try {\n      if (createNamespace) {\n        await k8sCreate(ProjectRequestModel, {\n          metadata: {\n            name: namespace,\n          },\n        });\n      }\n      await k8sCreate(\n        WorkspaceModel,\n        newCloudShellWorkSpace(createCloudShellResourceName(), namespace),\n      );\n      onSubmit && onSubmit(namespace);\n    } catch (err) {\n      actions.setStatus({ submitError: err.message });\n    }\n    actions.setSubmitting(false);\n  };\n\n  return (\n    <div className=\"co-m-pane__body\" style={{ paddingBottom: 0 }}>\n      <h2>Initialize Terminal</h2>\n      <Formik\n        initialValues={initialValues}\n        onSubmit={handleSubmit}\n        onReset={onCancel}\n        validate={cloudShellSetupValidation}\n      >\n        {(props) => <CloudSehellSetupForm {...props} />}\n      </Formik>\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  username: state.UI.get('user')?.metadata?.name || '',\n  activeNamespace: state.UI.get('activeNamespace'),\n});\n\nexport default connect<StateProps>(mapStateToProps)(CloudShellSetup);\n"]}]}