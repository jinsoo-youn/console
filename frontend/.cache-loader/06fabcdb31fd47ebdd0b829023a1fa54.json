{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/validation-schema.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/validation-schema.ts","mtime":1616735742380},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as yup from 'yup';\nimport * as _ from 'lodash';\nimport { convertToBaseValue } from '@console/internal/components/utils';\nimport { isInteger } from '../../utils/yup-validation-util';\nimport { CREATE_APPLICATION_KEY } from '../../const';\nimport { Resources } from './import-types';\nconst hostnameRegex = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$/;\nconst pathRegex = /^\\/.*$/;\nconst nameRegex = /^([a-z]([-a-z0-9]*[a-z0-9])?)*$/;\nconst projectNameRegex = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?$/;\nexport const gitUrlRegex = /^((((ssh|git|https?:?):\\/\\/:?)(([^\\s@]+@|[^@]:?)[-\\w.]+(:\\d\\d+:?)?(\\/[-\\w.~/?[\\]!$&'()*+,;=:@%]*:?)?:?))|([^\\s@]+@[-\\w.]+:[-\\w.~/?[\\]!$&'()*+,;=:@%]*?:?))$/;\nexport const nameValidationSchema = yup\n    .string()\n    .matches(nameRegex, {\n    message: 'Name must consist of lower-case letters, numbers and hyphens. It must start with a letter and end with a letter or number.',\n    excludeEmptyString: true,\n})\n    .max(253, 'Cannot be longer than 253 characters.')\n    .required('Required');\nexport const projectNameValidationSchema = yup.object().shape({\n    name: yup\n        .string()\n        .matches(projectNameRegex, \"Name must consist of lower case alphanumeric characters or '-' and must start and end with an alphanumeric character.\")\n        .required('Required'),\n});\nexport const applicationNameValidationSchema = yup.object().shape({\n    selectedKey: yup.string(),\n    name: yup\n        .string()\n        .max(63, 'Cannot be longer than 63 characters.')\n        .when('selectedKey', {\n        is: CREATE_APPLICATION_KEY,\n        then: yup.string().required('Required'),\n    }),\n});\nexport const deploymentValidationSchema = yup.object().shape({\n    replicas: yup\n        .number()\n        .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n        .test(isInteger('Replicas must be an Integer.'))\n        .min(0, 'Replicas must be greater than or equal to 0.')\n        .max(Number.MAX_SAFE_INTEGER, `Replicas must be lesser than or equal to ${Number.MAX_SAFE_INTEGER}.`)\n        .test({\n        name: 'isEmpty',\n        test: (value) => value !== undefined,\n        message: 'This field cannot be empty.',\n    }),\n});\nexport const resourcesValidationSchema = yup\n    .string()\n    .oneOf([Resources.OpenShift, Resources.Kubernetes, Resources.KnativeService])\n    .required();\nexport const serverlessValidationSchema = yup.object().when('resources', {\n    is: Resources.KnativeService,\n    then: yup.object().shape({\n        scaling: yup.object({\n            minpods: yup\n                .number()\n                .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n                .test(isInteger('Min Pods must be an Integer.'))\n                .min(0, 'Min Pods must be greater than or equal to 0.')\n                .max(Number.MAX_SAFE_INTEGER, `Min Pods must be lesser than or equal to ${Number.MAX_SAFE_INTEGER}.`),\n            maxpods: yup\n                .number()\n                .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n                .test(isInteger('Max Pods must be an Integer.'))\n                .min(1, 'Max Pods must be greater than or equal to 1.')\n                .max(Number.MAX_SAFE_INTEGER, `Max Pods must be lesser than or equal to ${Number.MAX_SAFE_INTEGER}.`)\n                .test({\n                test(limit) {\n                    const { minpods } = this.parent;\n                    return limit ? limit >= minpods : true;\n                },\n                message: 'Max Pods must be greater than or equal to Min Pods.',\n            }),\n            concurrencytarget: yup\n                .number()\n                .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n                .test(isInteger('Concurrency Target must be an Integer.'))\n                .min(0, 'Concurrency Target must be greater than or equal to 0.')\n                .max(Number.MAX_SAFE_INTEGER, `Concurrency Target must be lesser than or equal to ${Number.MAX_SAFE_INTEGER}.`),\n            concurrencylimit: yup\n                .number()\n                .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n                .test(isInteger('Concurrency Limit must be an Integer.'))\n                .min(0, 'Concurrency Limit must be greater than or equal to 0.')\n                .max(Number.MAX_SAFE_INTEGER, `Concurrency Limit must be lesser than or equal to ${Number.MAX_SAFE_INTEGER}.`),\n        }),\n    }),\n});\nexport const routeValidationSchema = yup.object().shape({\n    secure: yup.boolean(),\n    tls: yup.object().when('secure', {\n        is: true,\n        then: yup.object({\n            termination: yup.string().required('Please select a termination type.'),\n        }),\n    }),\n    hostname: yup\n        .string()\n        .matches(hostnameRegex, {\n        message: 'Hostname must consist of lower-case letters, numbers, periods, and hyphens. It must start and end with a letter or number.',\n        excludeEmptyString: true,\n    })\n        .max(253, 'Cannot be longer than 253 characters.'),\n    path: yup\n        .string()\n        .matches(pathRegex, { message: 'Path must start with /.', excludeEmptyString: true }),\n    unknownTargetPort: yup\n        .string()\n        .matches(/^\\d+$/, { message: 'Port must be an Integer.', excludeEmptyString: true }),\n});\nexport const limitsValidationSchema = yup.object().shape({\n    cpu: yup.object().shape({\n        request: yup\n            .number()\n            .transform((request) => (_.isNaN(request) ? undefined : request))\n            .min(0, 'Request must be greater than or equal to 0.')\n            .test({\n            test(request) {\n                const { requestUnit, limit, limitUnit } = this.parent;\n                if (limit !== undefined) {\n                    return (convertToBaseValue(`${request}${requestUnit}`) <=\n                        convertToBaseValue(`${limit}${limitUnit}`));\n                }\n                return true;\n            },\n            message: 'CPU request must be less than or equal to limit.',\n        }),\n        requestUnit: yup.string('Unit must be millicores or cores.').ensure(),\n        limitUnit: yup.string('Unit must be millicores or cores.').ensure(),\n        limit: yup\n            .number()\n            .transform((limit) => (_.isNaN(limit) ? undefined : limit))\n            .min(0, 'Limit must be greater than or equal to 0.')\n            .test({\n            test(limit) {\n                const { request, requestUnit, limitUnit } = this.parent;\n                if (limit !== undefined) {\n                    return (convertToBaseValue(`${limit}${limitUnit}`) >=\n                        convertToBaseValue(`${request}${requestUnit}`));\n                }\n                return true;\n            },\n            message: 'CPU limit must be greater than or equal to request.',\n        }),\n    }),\n    memory: yup.object().shape({\n        request: yup\n            .number()\n            .transform((request) => (_.isNaN(request) ? undefined : request))\n            .min(0, 'Request must be greater than or equal to 0.')\n            .test({\n            test(request) {\n                const { requestUnit, limit, limitUnit } = this.parent;\n                if (limit !== undefined) {\n                    return (convertToBaseValue(`${request}${requestUnit}`) <=\n                        convertToBaseValue(`${limit}${limitUnit}`));\n                }\n                return true;\n            },\n            message: 'Memory request must be less than or equal to limit.',\n        }),\n        requestUnit: yup.string('Unit must be Mi or Gi.'),\n        limit: yup\n            .number()\n            .transform((limit) => (_.isNaN(limit) ? undefined : limit))\n            .min(0, 'Limit must be greater than or equal to 0.')\n            .test({\n            test(limit) {\n                const { request, requestUnit, limitUnit } = this.parent;\n                if (limit !== undefined) {\n                    return (convertToBaseValue(`${request}${requestUnit}`) <=\n                        convertToBaseValue(`${limit}${limitUnit}`));\n                }\n                return true;\n            },\n            message: 'Memory limit must be greater than or equal to request.',\n        }),\n        limitUnit: yup.string('Unit must be Mi or Gi.'),\n    }),\n});\nexport const imageValidationSchema = yup.object().when('build', {\n    is: (build) => build.strategy !== 'Docker',\n    then: yup.object().shape({\n        selected: yup.string().required('Required'),\n        tag: yup.string().required('Required'),\n    }),\n});\nexport const gitValidationSchema = yup.object().shape({\n    url: yup\n        .string()\n        .max(2000, 'Please enter a URL that is less then 2000 characters.')\n        .matches(gitUrlRegex, 'Invalid Git URL.')\n        .required('Required'),\n    type: yup.string().when('showGitType', {\n        is: true,\n        then: yup.string().required('We failed to detect the git type. Please choose a git type.'),\n    }),\n    showGitType: yup.boolean(),\n});\nexport const dockerValidationSchema = yup.object().when('build', {\n    is: (build) => build.strategy === 'Docker',\n    then: yup.object().shape({\n        containerPort: yup.number().test(isInteger('Container port should be an Integer')),\n    }),\n});\nexport const buildValidationSchema = yup.object().shape({\n    strategy: yup.string(),\n});\nexport const searchTermValidationSchema = yup.string().required('Required');\nexport const isiValidationSchema = yup.object().shape({\n    name: yup.string().required('Required'),\n    image: yup.object().required('Required'),\n    tag: yup.string(),\n    status: yup.string().required('Required'),\n});\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/validation-schema.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/validation-schema.ts"],"names":[],"mappings":"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","sourcesContent":["import * as yup from 'yup';\nimport * as _ from 'lodash';\nimport { convertToBaseValue } from '@console/internal/components/utils';\nimport { isInteger } from '../../utils/yup-validation-util';\nimport { CREATE_APPLICATION_KEY } from '../../const';\nimport { Resources } from './import-types';\n\nconst hostnameRegex = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$/;\nconst pathRegex = /^\\/.*$/;\nconst nameRegex = /^([a-z]([-a-z0-9]*[a-z0-9])?)*$/;\nconst projectNameRegex = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?$/;\n\nexport const gitUrlRegex = /^((((ssh|git|https?:?):\\/\\/:?)(([^\\s@]+@|[^@]:?)[-\\w.]+(:\\d\\d+:?)?(\\/[-\\w.~/?[\\]!$&'()*+,;=:@%]*:?)?:?))|([^\\s@]+@[-\\w.]+:[-\\w.~/?[\\]!$&'()*+,;=:@%]*?:?))$/;\n\nexport const nameValidationSchema = yup\n  .string()\n  .matches(nameRegex, {\n    message:\n      'Name must consist of lower-case letters, numbers and hyphens. It must start with a letter and end with a letter or number.',\n    excludeEmptyString: true,\n  })\n  .max(253, 'Cannot be longer than 253 characters.')\n  .required('Required');\n\nexport const projectNameValidationSchema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      projectNameRegex,\n      \"Name must consist of lower case alphanumeric characters or '-' and must start and end with an alphanumeric character.\",\n    )\n    .required('Required'),\n});\n\nexport const applicationNameValidationSchema = yup.object().shape({\n  selectedKey: yup.string(),\n  name: yup\n    .string()\n    .max(63, 'Cannot be longer than 63 characters.')\n    .when('selectedKey', {\n      is: CREATE_APPLICATION_KEY,\n      then: yup.string().required('Required'),\n    }),\n});\n\nexport const deploymentValidationSchema = yup.object().shape({\n  replicas: yup\n    .number()\n    .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n    .test(isInteger('Replicas must be an Integer.'))\n    .min(0, 'Replicas must be greater than or equal to 0.')\n    .max(\n      Number.MAX_SAFE_INTEGER,\n      `Replicas must be lesser than or equal to ${Number.MAX_SAFE_INTEGER}.`,\n    )\n    .test({\n      name: 'isEmpty',\n      test: (value) => value !== undefined,\n      message: 'This field cannot be empty.',\n    }),\n});\n\nexport const resourcesValidationSchema = yup\n  .string()\n  .oneOf([Resources.OpenShift, Resources.Kubernetes, Resources.KnativeService])\n  .required();\n\nexport const serverlessValidationSchema = yup.object().when('resources', {\n  is: Resources.KnativeService,\n  then: yup.object().shape({\n    scaling: yup.object({\n      minpods: yup\n        .number()\n        .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n        .test(isInteger('Min Pods must be an Integer.'))\n        .min(0, 'Min Pods must be greater than or equal to 0.')\n        .max(\n          Number.MAX_SAFE_INTEGER,\n          `Min Pods must be lesser than or equal to ${Number.MAX_SAFE_INTEGER}.`,\n        ),\n      maxpods: yup\n        .number()\n        .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n        .test(isInteger('Max Pods must be an Integer.'))\n        .min(1, 'Max Pods must be greater than or equal to 1.')\n        .max(\n          Number.MAX_SAFE_INTEGER,\n          `Max Pods must be lesser than or equal to ${Number.MAX_SAFE_INTEGER}.`,\n        )\n        .test({\n          test(limit) {\n            const { minpods } = this.parent;\n            return limit ? limit >= minpods : true;\n          },\n          message: 'Max Pods must be greater than or equal to Min Pods.',\n        }),\n      concurrencytarget: yup\n        .number()\n        .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n        .test(isInteger('Concurrency Target must be an Integer.'))\n        .min(0, 'Concurrency Target must be greater than or equal to 0.')\n        .max(\n          Number.MAX_SAFE_INTEGER,\n          `Concurrency Target must be lesser than or equal to ${Number.MAX_SAFE_INTEGER}.`,\n        ),\n      concurrencylimit: yup\n        .number()\n        .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n        .test(isInteger('Concurrency Limit must be an Integer.'))\n        .min(0, 'Concurrency Limit must be greater than or equal to 0.')\n        .max(\n          Number.MAX_SAFE_INTEGER,\n          `Concurrency Limit must be lesser than or equal to ${Number.MAX_SAFE_INTEGER}.`,\n        ),\n    }),\n  }),\n});\n\nexport const routeValidationSchema = yup.object().shape({\n  secure: yup.boolean(),\n  tls: yup.object().when('secure', {\n    is: true,\n    then: yup.object({\n      termination: yup.string().required('Please select a termination type.'),\n    }),\n  }),\n  hostname: yup\n    .string()\n    .matches(hostnameRegex, {\n      message:\n        'Hostname must consist of lower-case letters, numbers, periods, and hyphens. It must start and end with a letter or number.',\n      excludeEmptyString: true,\n    })\n    .max(253, 'Cannot be longer than 253 characters.'),\n  path: yup\n    .string()\n    .matches(pathRegex, { message: 'Path must start with /.', excludeEmptyString: true }),\n  unknownTargetPort: yup\n    .string()\n    .matches(/^\\d+$/, { message: 'Port must be an Integer.', excludeEmptyString: true }),\n});\n\nexport const limitsValidationSchema = yup.object().shape({\n  cpu: yup.object().shape({\n    request: yup\n      .number()\n      .transform((request) => (_.isNaN(request) ? undefined : request))\n      .min(0, 'Request must be greater than or equal to 0.')\n      .test({\n        test(request) {\n          const { requestUnit, limit, limitUnit } = this.parent;\n          if (limit !== undefined) {\n            return (\n              convertToBaseValue(`${request}${requestUnit}`) <=\n              convertToBaseValue(`${limit}${limitUnit}`)\n            );\n          }\n          return true;\n        },\n        message: 'CPU request must be less than or equal to limit.',\n      }),\n    requestUnit: yup.string('Unit must be millicores or cores.').ensure(),\n    limitUnit: yup.string('Unit must be millicores or cores.').ensure(),\n    limit: yup\n      .number()\n      .transform((limit) => (_.isNaN(limit) ? undefined : limit))\n      .min(0, 'Limit must be greater than or equal to 0.')\n      .test({\n        test(limit) {\n          const { request, requestUnit, limitUnit } = this.parent;\n          if (limit !== undefined) {\n            return (\n              convertToBaseValue(`${limit}${limitUnit}`) >=\n              convertToBaseValue(`${request}${requestUnit}`)\n            );\n          }\n          return true;\n        },\n        message: 'CPU limit must be greater than or equal to request.',\n      }),\n  }),\n  memory: yup.object().shape({\n    request: yup\n      .number()\n      .transform((request) => (_.isNaN(request) ? undefined : request))\n      .min(0, 'Request must be greater than or equal to 0.')\n      .test({\n        test(request) {\n          const { requestUnit, limit, limitUnit } = this.parent;\n          if (limit !== undefined) {\n            return (\n              convertToBaseValue(`${request}${requestUnit}`) <=\n              convertToBaseValue(`${limit}${limitUnit}`)\n            );\n          }\n          return true;\n        },\n        message: 'Memory request must be less than or equal to limit.',\n      }),\n    requestUnit: yup.string('Unit must be Mi or Gi.'),\n    limit: yup\n      .number()\n      .transform((limit) => (_.isNaN(limit) ? undefined : limit))\n      .min(0, 'Limit must be greater than or equal to 0.')\n      .test({\n        test(limit) {\n          const { request, requestUnit, limitUnit } = this.parent;\n          if (limit !== undefined) {\n            return (\n              convertToBaseValue(`${request}${requestUnit}`) <=\n              convertToBaseValue(`${limit}${limitUnit}`)\n            );\n          }\n          return true;\n        },\n        message: 'Memory limit must be greater than or equal to request.',\n      }),\n    limitUnit: yup.string('Unit must be Mi or Gi.'),\n  }),\n});\n\nexport const imageValidationSchema = yup.object().when('build', {\n  is: (build) => build.strategy !== 'Docker',\n  then: yup.object().shape({\n    selected: yup.string().required('Required'),\n    tag: yup.string().required('Required'),\n  }),\n});\n\nexport const gitValidationSchema = yup.object().shape({\n  url: yup\n    .string()\n    .max(2000, 'Please enter a URL that is less then 2000 characters.')\n    .matches(gitUrlRegex, 'Invalid Git URL.')\n    .required('Required'),\n  type: yup.string().when('showGitType', {\n    is: true,\n    then: yup.string().required('We failed to detect the git type. Please choose a git type.'),\n  }),\n  showGitType: yup.boolean(),\n});\n\nexport const dockerValidationSchema = yup.object().when('build', {\n  is: (build) => build.strategy === 'Docker',\n  then: yup.object().shape({\n    containerPort: yup.number().test(isInteger('Container port should be an Integer')),\n  }),\n});\n\nexport const buildValidationSchema = yup.object().shape({\n  strategy: yup.string(),\n});\n\nexport const searchTermValidationSchema = yup.string().required('Required');\n\nexport const isiValidationSchema = yup.object().shape({\n  name: yup.string().required('Required'),\n  image: yup.object().required('Required'),\n  tag: yup.string(),\n  status: yup.string().required('Required'),\n});\n"]}]}