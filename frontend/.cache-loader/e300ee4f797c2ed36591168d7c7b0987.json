{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/pod/selectors.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/pod/selectors.ts","mtime":1615298458670},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { get } from 'lodash';\nimport { getName, getNamespace, getOwnerReferences, getUID } from '@console/shared/src/selectors';\nimport { compareOwnerReference } from '@console/shared/src/utils/owner-references';\nimport { getLabelValue } from '../selectors';\nimport { getDataVolumeTemplates } from '../vm';\nimport { CDI_KUBEVIRT_IO, STORAGE_IMPORT_PVC_NAME, VIRT_LAUNCHER_POD_PREFIX, } from '../../constants';\nimport { buildOwnerReferenceForModel } from '../../utils';\nimport { VirtualMachineInstanceModel } from '../../models';\nexport const getHostName = (pod) => get(pod, 'spec.hostname');\nexport const getPodStatusPhase = (pod) => get(pod, 'status.phase');\nexport const getPodStatusConditions = (pod) => get(pod, 'status.conditions', []);\nexport const getPodStatusConditionOfType = (pod, type) => getPodStatusConditions(pod).find((condition) => condition.type === type);\nexport const getPodFalseStatusConditions = (pod) => getPodStatusConditions(pod).filter((condition) => condition.status !== 'True');\nexport const getPodContainerStatuses = (pod) => get(pod, 'status.containerStatuses');\nexport const findPodFalseStatusConditionMessage = (pod) => {\n    const notReadyConditions = getPodFalseStatusConditions(pod);\n    if (notReadyConditions.length > 0) {\n        return notReadyConditions[0].message || `Step: ${notReadyConditions[0].type}`;\n    }\n    return undefined;\n};\nexport const isPodSchedulable = (pod) => {\n    const podScheduledCond = getPodStatusConditionOfType(pod, 'PodScheduled');\n    return !(podScheduledCond &&\n        podScheduledCond.status !== 'True' &&\n        podScheduledCond.reason === 'Unschedulable');\n};\nconst isPodReady = (pod) => { var _a, _b, _c; return ((_a = pod === null || pod === void 0 ? void 0 : pod.status) === null || _a === void 0 ? void 0 : _a.phase) === 'Running' && ((_c = (_b = pod === null || pod === void 0 ? void 0 : pod.status) === null || _b === void 0 ? void 0 : _b.containerStatuses) === null || _c === void 0 ? void 0 : _c.every((s) => s.ready)); };\nexport const findVMIPod = (vmi, pods, podNamePrefix = VIRT_LAUNCHER_POD_PREFIX) => {\n    if (!pods || !vmi) {\n        return null;\n    }\n    // the UID is not set as we mimic VMI here\n    const vmOwnerReference = buildOwnerReferenceForModel(VirtualMachineInstanceModel, getName(vmi), getUID(vmi));\n    const prefix = `${podNamePrefix}${getName(vmi)}-`;\n    const prefixedPods = pods.filter((p) => {\n        const podOwnerReferences = getOwnerReferences(p);\n        return (getNamespace(p) === getNamespace(vmi) &&\n            getName(p).startsWith(prefix) &&\n            podOwnerReferences &&\n            podOwnerReferences.some((podOwnerReference) => compareOwnerReference(podOwnerReference, vmOwnerReference)));\n    });\n    // Return the newet most ready Pod created\n    return prefixedPods\n        .sort((a, b) => a.metadata.creationTimestamp > b.metadata.creationTimestamp ? -1 : 1)\n        .sort((a) => (isPodReady(a) ? -1 : 1))[0];\n};\nexport const getVMImporterPods = (vm, pods, pvcNameLabel = `${CDI_KUBEVIRT_IO}/${STORAGE_IMPORT_PVC_NAME}`) => {\n    if (!pods) {\n        return null;\n    }\n    const datavolumeNames = getDataVolumeTemplates(vm)\n        .map((dataVolumeTemplate) => getName(dataVolumeTemplate))\n        .filter((dataVolumeTemplate) => dataVolumeTemplate);\n    return pods.filter((p) => getNamespace(p) === getNamespace(vm) &&\n        getLabelValue(p, CDI_KUBEVIRT_IO) === 'importer' &&\n        datavolumeNames.some((name) => getLabelValue(p, pvcNameLabel) === name));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/pod/selectors.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/pod/selectors.ts"],"names":[],"mappings":"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","sourcesContent":["import { get } from 'lodash';\nimport { getName, getNamespace, getOwnerReferences, getUID } from '@console/shared/src/selectors';\nimport { compareOwnerReference } from '@console/shared/src/utils/owner-references';\nimport { PodKind } from '@console/internal/module/k8s';\nimport { getLabelValue } from '../selectors';\nimport { VMKind, VMIKind } from '../../types';\nimport { getDataVolumeTemplates } from '../vm';\nimport {\n  CDI_KUBEVIRT_IO,\n  STORAGE_IMPORT_PVC_NAME,\n  VIRT_LAUNCHER_POD_PREFIX,\n} from '../../constants';\nimport { buildOwnerReferenceForModel } from '../../utils';\nimport { VirtualMachineInstanceModel } from '../../models';\n\nexport const getHostName = (pod: PodKind) =>\n  get(pod, 'spec.hostname') as PodKind['spec']['hostname'];\n\nexport const getPodStatusPhase = (pod: PodKind) =>\n  get(pod, 'status.phase') as PodKind['status']['phase'];\nexport const getPodStatusConditions = (pod: PodKind) =>\n  get(pod, 'status.conditions', []) as PodKind['status']['conditions'];\nexport const getPodStatusConditionOfType = (pod: PodKind, type: string) =>\n  getPodStatusConditions(pod).find((condition) => condition.type === type);\n\nexport const getPodFalseStatusConditions = (pod: PodKind) =>\n  getPodStatusConditions(pod).filter((condition) => condition.status !== 'True');\n\nexport const getPodContainerStatuses = (pod: PodKind) =>\n  get(pod, 'status.containerStatuses') as PodKind['status']['containerStatuses'];\n\nexport const findPodFalseStatusConditionMessage = (pod: PodKind) => {\n  const notReadyConditions = getPodFalseStatusConditions(pod);\n  if (notReadyConditions.length > 0) {\n    return notReadyConditions[0].message || `Step: ${notReadyConditions[0].type}`;\n  }\n  return undefined;\n};\n\nexport const isPodSchedulable = (pod: PodKind) => {\n  const podScheduledCond = getPodStatusConditionOfType(pod, 'PodScheduled');\n  return !(\n    podScheduledCond &&\n    podScheduledCond.status !== 'True' &&\n    podScheduledCond.reason === 'Unschedulable'\n  );\n};\n\nconst isPodReady = (pod: PodKind): boolean =>\n  pod?.status?.phase === 'Running' && pod?.status?.containerStatuses?.every((s) => s.ready);\n\nexport const findVMIPod = (\n  vmi?: VMIKind,\n  pods?: PodKind[],\n  podNamePrefix = VIRT_LAUNCHER_POD_PREFIX,\n) => {\n  if (!pods || !vmi) {\n    return null;\n  }\n\n  // the UID is not set as we mimic VMI here\n  const vmOwnerReference = buildOwnerReferenceForModel(\n    VirtualMachineInstanceModel,\n    getName(vmi),\n    getUID(vmi),\n  );\n  const prefix = `${podNamePrefix}${getName(vmi)}-`;\n  const prefixedPods = pods.filter((p) => {\n    const podOwnerReferences = getOwnerReferences(p);\n    return (\n      getNamespace(p) === getNamespace(vmi) &&\n      getName(p).startsWith(prefix) &&\n      podOwnerReferences &&\n      podOwnerReferences.some((podOwnerReference) =>\n        compareOwnerReference(podOwnerReference, vmOwnerReference),\n      )\n    );\n  });\n\n  // Return the newet most ready Pod created\n  return prefixedPods\n    .sort((a: PodKind, b: PodKind) =>\n      a.metadata.creationTimestamp > b.metadata.creationTimestamp ? -1 : 1,\n    )\n    .sort((a: PodKind) => (isPodReady(a) ? -1 : 1))[0];\n};\n\nexport const getVMImporterPods = (\n  vm: VMKind,\n  pods?: PodKind[],\n  pvcNameLabel = `${CDI_KUBEVIRT_IO}/${STORAGE_IMPORT_PVC_NAME}`,\n) => {\n  if (!pods) {\n    return null;\n  }\n\n  const datavolumeNames = getDataVolumeTemplates(vm)\n    .map((dataVolumeTemplate) => getName(dataVolumeTemplate))\n    .filter((dataVolumeTemplate) => dataVolumeTemplate);\n\n  return pods.filter(\n    (p) =>\n      getNamespace(p) === getNamespace(vm) &&\n      getLabelValue(p, CDI_KUBEVIRT_IO) === 'importer' &&\n      datavolumeNames.some((name) => getLabelValue(p, pvcNameLabel) === name),\n  );\n};\n"]}]}