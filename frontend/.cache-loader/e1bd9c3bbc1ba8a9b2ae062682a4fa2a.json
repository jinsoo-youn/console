{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/validations/strings.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/validations/strings.ts","mtime":1616735742430},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["export const GENERAL_ERROR_MSG = 'An error occurred. Please try again';\nexport const START_WHITESPACE_ERROR = 'cannot start with whitespace characters';\nexport const END_WHITESPACE_ERROR = 'cannot end with whitespace characters';\nexport const URL_INVALID_ERROR = 'has to be a valid URL';\nexport const VIRTUAL_MACHINE_EXISTS = 'is already used by another virtual machine in this namespace';\nexport const VIRTUAL_MACHINE_TEMPLATE_EXISTS = 'is already used in another template';\nexport const MAC_ADDRESS_INVALID_ERROR = 'Invalid MAC address format';\nexport const NIC_NAME_EXISTS = 'Interface with this name already exists';\nexport const NETWORK_MULTUS_NAME_EXISTS = 'Multus network with this name already exists';\nexport const NETWORK_REQUIRED = 'Network required';\nexport const POSITIVE_SIZE_ERROR = 'must be positive';\nconst validationKeyToNameResolver = {\n    name: 'Name',\n    macAddress: 'MAC Address',\n    network: 'Network',\n    size: 'Size',\n    url: 'Url',\n    container: 'Container',\n    diskInterface: 'Model',\n    pvc: 'PVC',\n};\nexport const getValidationNameByKey = (key) => {\n    return validationKeyToNameResolver[key];\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/validations/strings.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/validations/strings.ts"],"names":[],"mappings":"AAAA,MAAM,CAAC,MAAM,iBAAiB,GAAG,qCAAqC,CAAC;AACvE,MAAM,CAAC,MAAM,sBAAsB,GAAG,yCAAyC,CAAC;AAChF,MAAM,CAAC,MAAM,oBAAoB,GAAG,uCAAuC,CAAC;AAC5E,MAAM,CAAC,MAAM,iBAAiB,GAAG,uBAAuB,CAAC;AAEzD,MAAM,CAAC,MAAM,sBAAsB,GACjC,8DAA8D,CAAC;AACjE,MAAM,CAAC,MAAM,+BAA+B,GAAG,qCAAqC,CAAC;AAErF,MAAM,CAAC,MAAM,yBAAyB,GAAG,4BAA4B,CAAC;AACtE,MAAM,CAAC,MAAM,eAAe,GAAG,yCAAyC,CAAC;AACzE,MAAM,CAAC,MAAM,0BAA0B,GAAG,8CAA8C,CAAC;AACzF,MAAM,CAAC,MAAM,gBAAgB,GAAG,kBAAkB,CAAC;AAEnD,MAAM,CAAC,MAAM,mBAAmB,GAAG,kBAAkB,CAAC;AAEtD,MAAM,2BAA2B,GAAG;IAClC,IAAI,EAAE,MAAM;IACZ,UAAU,EAAE,aAAa;IACzB,OAAO,EAAE,SAAS;IAClB,IAAI,EAAE,MAAM;IACZ,GAAG,EAAE,KAAK;IACV,SAAS,EAAE,WAAW;IACtB,aAAa,EAAE,OAAO;IACtB,GAAG,EAAE,KAAK;CACX,CAAC;AAEF,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,GAAW,EAAE,EAAE;IACpD,OAAO,2BAA2B,CAAC,GAAG,CAAC,CAAC;AAC1C,CAAC,CAAC","sourcesContent":["export const GENERAL_ERROR_MSG = 'An error occurred. Please try again';\nexport const START_WHITESPACE_ERROR = 'cannot start with whitespace characters';\nexport const END_WHITESPACE_ERROR = 'cannot end with whitespace characters';\nexport const URL_INVALID_ERROR = 'has to be a valid URL';\n\nexport const VIRTUAL_MACHINE_EXISTS =\n  'is already used by another virtual machine in this namespace';\nexport const VIRTUAL_MACHINE_TEMPLATE_EXISTS = 'is already used in another template';\n\nexport const MAC_ADDRESS_INVALID_ERROR = 'Invalid MAC address format';\nexport const NIC_NAME_EXISTS = 'Interface with this name already exists';\nexport const NETWORK_MULTUS_NAME_EXISTS = 'Multus network with this name already exists';\nexport const NETWORK_REQUIRED = 'Network required';\n\nexport const POSITIVE_SIZE_ERROR = 'must be positive';\n\nconst validationKeyToNameResolver = {\n  name: 'Name',\n  macAddress: 'MAC Address',\n  network: 'Network',\n  size: 'Size',\n  url: 'Url',\n  container: 'Container',\n  diskInterface: 'Model',\n  pvc: 'PVC',\n};\n\nexport const getValidationNameByKey = (key: string) => {\n  return validationKeyToNameResolver[key];\n};\n"]}]}