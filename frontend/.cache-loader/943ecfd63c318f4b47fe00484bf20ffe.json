{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/overview/index.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/overview/index.tsx","mtime":1615298458740},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport * as classnames from 'classnames';\nimport * as fuzzy from 'fuzzysearch';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { CSSTransition } from 'react-transition-group';\nimport { Link } from 'react-router-dom';\nimport { DEFAULT_GROUP_NAME, METRICS_POLL_INTERVAL, getResourceList, createDaemonSetItems, createDeploymentConfigItems, createDeploymentItems, createPodItems, createStatefulSetItems, formatNamespacedRouteForResource, } from '@console/shared';\nimport { coFetchJSON } from '../../co-fetch';\nimport { PROMETHEUS_TENANCY_BASE_PATH } from '../graphs';\nimport { TextFilter } from '../factory';\nimport * as UIActions from '../../actions/ui';\nimport { CloseButton, Dropdown, Firehose, StatusBox, MsgBox } from '../utils';\nimport { ProjectOverview } from './project-overview';\nimport { ResourceOverviewPage } from './resource-overview-page';\nimport { OverviewSpecialGroup } from './constants';\nimport * as plugins from '../../plugins';\nconst asOverviewGroups = (keyedItems) => {\n    const compareGroups = (a, b) => {\n        if (a.name === DEFAULT_GROUP_NAME) {\n            return 1;\n        }\n        if (b.name === DEFAULT_GROUP_NAME) {\n            return -1;\n        }\n        return a.name.localeCompare(b.name);\n    };\n    return _.map(keyedItems, (group, name) => {\n        return {\n            name,\n            items: group,\n        };\n    }).sort(compareGroups);\n};\nconst getApplication = (item) => {\n    const labels = _.get(item, 'obj.metadata.labels') || {};\n    return (labels['app.kubernetes.io/part-of'] ||\n        labels['app.kubernetes.io/name'] ||\n        labels.app ||\n        DEFAULT_GROUP_NAME);\n};\nconst groupByApplication = (items) => {\n    const byApplication = _.groupBy(items, getApplication);\n    return asOverviewGroups(byApplication);\n};\nconst groupByResource = (items) => {\n    const byResource = _.groupBy(items, (item) => _.startCase(item.obj.kind));\n    return asOverviewGroups(byResource);\n};\nconst groupByLabel = (items, label) => {\n    const byLabel = _.groupBy(items, (item) => _.get(item, ['obj', 'metadata', 'labels', label]) || DEFAULT_GROUP_NAME);\n    return asOverviewGroups(byLabel);\n};\nconst groupItems = (items, selectedGroup) => {\n    switch (selectedGroup) {\n        case OverviewSpecialGroup.GROUP_BY_APPLICATION:\n            return groupByApplication(items);\n        case OverviewSpecialGroup.GROUP_BY_RESOURCE:\n            return groupByResource(items);\n        default:\n            return groupByLabel(items, selectedGroup);\n    }\n};\nconst headingStateToProps = ({ UI }) => {\n    const { selectedGroup, labels, filterValue } = UI.get('overview').toJS();\n    return { labels, selectedGroup, filterValue };\n};\nconst headingDispatchToProps = (dispatch) => ({\n    selectGroup: (group) => dispatch(UIActions.updateOverviewSelectedGroup(group)),\n    changeFilter: (value) => dispatch(UIActions.updateOverviewFilterValue(value)),\n});\nclass OverviewHeading_ extends React.Component {\n    componentWillUnmount() {\n        // Resets the filter value so that it is not retained when navigating to other pages.\n        this.props.changeFilter('');\n    }\n    render() {\n        const { changeFilter, filterValue, labels, selectGroup, selectedGroup } = this.props;\n        const firstLabel = _.first(labels) || '';\n        const dropdownItems = Object.assign({ [OverviewSpecialGroup.GROUP_BY_APPLICATION]: 'Application', [OverviewSpecialGroup.GROUP_BY_RESOURCE]: 'Resource' }, _.zipObject(labels, labels));\n        return (React.createElement(\"div\", { className: \"co-m-pane__filter-bar\" },\n            React.createElement(\"div\", { className: \"co-m-pane__filter-bar-group\" },\n                React.createElement(Dropdown, { className: \"btn-group\", menuClassName: \"dropdown-menu--text-wrap\", items: dropdownItems, onChange: selectGroup, titlePrefix: \"Group by\", title: dropdownItems[selectedGroup] || 'Select Category', spacerBefore: new Set([firstLabel]), headerBefore: { [firstLabel]: 'Label' } })),\n            React.createElement(\"div\", { className: \"co-m-pane__filter-bar-group co-m-pane__filter-bar-group--filter\" },\n                React.createElement(TextFilter, { defaultValue: filterValue, label: \"by name\", onChange: changeFilter }))));\n    }\n}\nconst OverviewHeading = connect(headingStateToProps, headingDispatchToProps)(OverviewHeading_);\nconst mainContentStateToProps = ({ UI }) => {\n    const { filterValue, metrics, selectedGroup, labels } = UI.get('overview').toJS();\n    return { filterValue, labels, metrics, selectedGroup };\n};\nconst mainContentDispatchToProps = (dispatch) => ({\n    updateLabels: (labels) => dispatch(UIActions.updateOverviewLabels(labels)),\n    updateMetrics: (metrics) => dispatch(UIActions.updateOverviewMetrics(metrics)),\n    updateResources: (items) => dispatch(UIActions.updateOverviewResources(items)),\n    updateSelectedGroup: (group) => dispatch(UIActions.updateOverviewSelectedGroup(group)),\n});\nclass OverviewMainContent_ extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.metricsInterval = null;\n        this.state = Object.assign({ items: [], filteredItems: [], groupedItems: [] }, this.createOverviewData());\n        this.fetchMetrics = () => {\n            if (!PROMETHEUS_TENANCY_BASE_PATH) {\n                return;\n            }\n            const { metrics: previousMetrics, namespace } = this.props;\n            const queries = {\n                memory: `sum(container_memory_working_set_bytes{namespace='${namespace}',container='',pod!=''}) BY (pod, namespace)`,\n                cpu: `pod:container_cpu_usage:sum{namespace=\"${namespace}\"}`,\n            };\n            const promises = _.map(queries, (query, name) => {\n                const url = `${PROMETHEUS_TENANCY_BASE_PATH}/api/v1/query?namespace=${namespace}&query=${encodeURIComponent(query)}`;\n                return coFetchJSON(url).then(({ data: { result } }) => {\n                    const byPod = result.reduce((acc, { metric, value }) => {\n                        acc[metric.pod] = Number(value[1]);\n                        return acc;\n                    }, {});\n                    return { [name]: byPod };\n                });\n            });\n            Promise.all(promises)\n                .then((data) => {\n                const metrics = data.reduce((acc, metric) => _.assign(acc, metric), {});\n                this.props.updateMetrics(metrics);\n            })\n                .catch((res) => {\n                const status = _.get(res, 'response.status');\n                // eslint-disable-next-line no-console\n                console.error('Could not fetch metrics, status:', status);\n                // Don't retry on some status codes unless a previous request succeeded.\n                if (_.includes([401, 403, 502, 503], status) && _.isEmpty(previousMetrics)) {\n                    throw new Error(`Could not fetch metrics, status: ${status}`);\n                }\n            })\n                .then(() => {\n                this.metricsInterval = setTimeout(this.fetchMetrics, METRICS_POLL_INTERVAL);\n            });\n        };\n    }\n    componentDidMount() {\n        this.fetchMetrics();\n    }\n    componentWillUnmount() {\n        clearInterval(this.metricsInterval);\n    }\n    componentDidUpdate(prevProps) {\n        const { builds, buildConfigs, daemonSets, deployments, deploymentConfigs, filterValue, loaded, namespace, pods, replicaSets, replicationControllers, routes, services, statefulSets, selectedGroup, } = this.props;\n        if (namespace !== prevProps.namespace ||\n            loaded !== prevProps.loaded ||\n            !_.isEqual(buildConfigs, prevProps.buildConfigs) ||\n            !_.isEqual(builds, prevProps.builds) ||\n            !_.isEqual(daemonSets, prevProps.daemonSets) ||\n            !_.isEqual(deploymentConfigs, prevProps.deploymentConfigs) ||\n            !_.isEqual(deployments, prevProps.deployments) ||\n            !_.isEqual(pods, prevProps.pods) ||\n            !_.isEqual(replicaSets, prevProps.replicaSets) ||\n            !_.isEqual(replicationControllers, prevProps.replicationControllers) ||\n            !_.isEqual(routes, prevProps.routes) ||\n            !_.isEqual(services, prevProps.services) ||\n            !_.isEqual(statefulSets, prevProps.statefulSets)) {\n            this.setState(this.createOverviewData());\n        }\n        else if (filterValue !== prevProps.filterValue) {\n            const filteredItems = this.filterItems(this.state.items);\n            this.setState({\n                filteredItems,\n                groupedItems: groupItems(filteredItems, selectedGroup),\n            });\n        }\n        else if (selectedGroup !== prevProps.selectedGroup) {\n            this.setState({\n                groupedItems: groupItems(this.state.filteredItems, selectedGroup),\n            });\n        }\n        // Fetch new metrics when the namespace changes.\n        if (namespace !== prevProps.namespace) {\n            clearInterval(this.metricsInterval);\n            this.fetchMetrics();\n        }\n    }\n    filterItems(items) {\n        const { filterValue, selectedItem } = this.props;\n        if (!filterValue) {\n            return items;\n        }\n        const filterString = filterValue.toLowerCase();\n        return _.filter(items, (item) => {\n            return (fuzzy(filterString, _.get(item, 'obj.metadata.name', '')) ||\n                _.get(item, 'obj.metadata.uid') === _.get(selectedItem, 'obj.metadata.uid'));\n        });\n    }\n    getLabels(items) {\n        const labelSet = new Set();\n        _.each(items, (i) => {\n            const itemLabels = _.get(i, 'obj.metadata.labels');\n            _.each(itemLabels, (v, k) => labelSet.add(k));\n        });\n        return [...labelSet].sort();\n    }\n    createOverviewData() {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        const { loaded, mock, selectedGroup, updateLabels, updateSelectedGroup, updateResources, } = this.props;\n        if (!loaded) {\n            return;\n        }\n        // keeps deleted bookmarked projects from attempting to generate data\n        if (mock) {\n            return;\n        }\n        const items = [\n            ...createDaemonSetItems(this.props.daemonSets.data, this.props, (_b = (_a = this.props) === null || _a === void 0 ? void 0 : _a.clusterServiceVersions) === null || _b === void 0 ? void 0 : _b.data, this.props.utils),\n            ...createDeploymentItems(this.props.deployments.data, this.props, (_d = (_c = this.props) === null || _c === void 0 ? void 0 : _c.clusterServiceVersions) === null || _d === void 0 ? void 0 : _d.data, this.props.utils),\n            ...createDeploymentConfigItems(this.props.deploymentConfigs.data, this.props, (_f = (_e = this.props) === null || _e === void 0 ? void 0 : _e.clusterServiceVersions) === null || _f === void 0 ? void 0 : _f.data, this.props.utils),\n            ...createStatefulSetItems(this.props.statefulSets.data, this.props, (_h = (_g = this.props) === null || _g === void 0 ? void 0 : _g.clusterServiceVersions) === null || _h === void 0 ? void 0 : _h.data, this.props.utils),\n            ...createPodItems(this.props),\n        ];\n        updateResources(items);\n        const filteredItems = this.filterItems(items);\n        const labels = this.getLabels(filteredItems);\n        if (selectedGroup !== OverviewSpecialGroup.GROUP_BY_APPLICATION &&\n            selectedGroup !== OverviewSpecialGroup.GROUP_BY_RESOURCE &&\n            !_.includes(labels, selectedGroup)) {\n            updateSelectedGroup(OverviewSpecialGroup.GROUP_BY_APPLICATION);\n        }\n        updateLabels(labels);\n        const groupedItems = groupItems(filteredItems, selectedGroup);\n        return {\n            filteredItems,\n            groupedItems,\n            items,\n        };\n    }\n    render() {\n        const { loaded, loadError, project, namespace, EmptyMsg, emptyBodyClass } = this.props;\n        const { items, filteredItems, groupedItems } = this.state;\n        const OverviewEmptyState = () => (React.createElement(MsgBox, { title: \"No Workloads Found.\", detail: React.createElement(\"div\", null,\n                React.createElement(Link, { to: formatNamespacedRouteForResource('import', namespace) }, \"Import YAML\"),\n                \" or\",\n                ' ',\n                React.createElement(Link, { to: `/add/ns/${namespace}` }, \"add other content\"),\n                \" to your project.\") }));\n        const skeletonOverview = (React.createElement(\"div\", { className: \"skeleton-overview\" },\n            React.createElement(\"div\", { className: \"skeleton-overview--head\" }),\n            React.createElement(\"div\", { className: \"skeleton-overview--tile\" }),\n            React.createElement(\"div\", { className: \"skeleton-overview--tile\" }),\n            React.createElement(\"div\", { className: \"skeleton-overview--tile\" })));\n        const hasItems = (items === null || items === void 0 ? void 0 : items.length) > 0;\n        return (React.createElement(\"div\", { className: \"co-m-pane\" },\n            hasItems && React.createElement(OverviewHeading, { project: _.get(project, 'data') }),\n            React.createElement(\"div\", { className: (!hasItems && emptyBodyClass) || 'co-m-pane__body co-m-pane__body--no-top-margin' },\n                React.createElement(StatusBox, { skeleton: skeletonOverview, data: filteredItems, label: \"Resources\", loaded: loaded, loadError: loadError, EmptyMsg: EmptyMsg || OverviewEmptyState },\n                    React.createElement(ProjectOverview, { groups: groupedItems })))));\n    }\n}\nconst OverviewMainContent = connect(mainContentStateToProps, mainContentDispatchToProps)(OverviewMainContent_);\nconst overviewStateToProps = ({ UI, FLAGS }) => {\n    const selectedUID = UI.getIn(['overview', 'selectedUID']);\n    const resources = UI.getIn(['overview', 'resources']);\n    const resourceList = plugins.registry\n        .getOverviewCRDs()\n        .filter((resource) => FLAGS.get(resource.properties.required));\n    const selectedItem = !!resources && resources.get(selectedUID);\n    return { selectedItem, resourceList };\n};\nconst overviewDispatchToProps = (dispatch) => {\n    return {\n        dismissDetails: () => dispatch(UIActions.dismissOverviewDetails()),\n    };\n};\nconst Overview_ = ({ mock, match, selectedItem, resourceList, title, dismissDetails, EmptyMsg, emptyBodyClass, }) => {\n    const namespace = _.get(match, 'params.name');\n    const sidebarOpen = !_.isEmpty(selectedItem);\n    const className = classnames('overview', { 'overview--sidebar-shown': sidebarOpen });\n    const ref = React.useRef();\n    const [height, setHeight] = React.useState(500);\n    const calcHeight = (node) => {\n        setHeight(document.getElementsByClassName('pf-c-page')[0].getBoundingClientRect().bottom -\n            node.current.getBoundingClientRect().top);\n    };\n    React.useLayoutEffect(() => {\n        calcHeight(ref);\n        const handleResize = () => calcHeight(ref);\n        window.addEventListener('resize', handleResize);\n        return () => {\n            window.removeEventListener('resize', handleResize);\n        };\n    });\n    const { resources, utils } = getResourceList(namespace, resourceList);\n    resources.push({\n        isList: false,\n        kind: 'Project',\n        name: namespace,\n        prop: 'project',\n    });\n    return (React.createElement(\"div\", { className: className },\n        React.createElement(\"div\", { className: \"overview__main-column\", ref: ref, style: { height } },\n            React.createElement(\"div\", { className: \"overview__main-column-section\" },\n                React.createElement(Firehose, { resources: mock ? [] : resources },\n                    React.createElement(OverviewMainContent, { mock: mock, namespace: namespace, selectedItem: selectedItem, title: title, utils: utils, EmptyMsg: EmptyMsg, emptyBodyClass: emptyBodyClass })))),\n        sidebarOpen && (React.createElement(CSSTransition, { appear: true, in: true, timeout: 225, classNames: \"overview__sidebar\" },\n            React.createElement(\"div\", { className: \"overview__sidebar\" },\n                React.createElement(\"div\", { className: \"co-sidebar-dismiss clearfix\" },\n                    React.createElement(CloseButton, { onClick: dismissDetails })),\n                React.createElement(ResourceOverviewPage, { item: selectedItem, kind: selectedItem.obj.kind }))))));\n};\nexport const Overview = connect(overviewStateToProps, overviewDispatchToProps)(Overview_);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/overview/index.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/overview/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\nimport * as classnames from 'classnames';\nimport * as fuzzy from 'fuzzysearch';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { CSSTransition } from 'react-transition-group';\nimport { Link } from 'react-router-dom';\nimport {\n  DEFAULT_GROUP_NAME,\n  METRICS_POLL_INTERVAL,\n  OverviewItem,\n  getResourceList,\n  createDaemonSetItems,\n  createDeploymentConfigItems,\n  createDeploymentItems,\n  createPodItems,\n  createStatefulSetItems,\n  formatNamespacedRouteForResource,\n} from '@console/shared';\nimport { OverviewCRD } from '@console/plugin-sdk';\nimport { ClusterServiceVersionKind } from '@console/operator-lifecycle-manager';\nimport { coFetchJSON } from '../../co-fetch';\nimport { PROMETHEUS_TENANCY_BASE_PATH } from '../graphs';\nimport { TextFilter } from '../factory';\nimport * as UIActions from '../../actions/ui';\nimport { DeploymentKind, K8sResourceKind, PodKind, RouteKind } from '../../module/k8s';\nimport { CloseButton, Dropdown, Firehose, StatusBox, FirehoseResult, MsgBox } from '../utils';\nimport { ProjectOverview } from './project-overview';\nimport { ResourceOverviewPage } from './resource-overview-page';\nimport { OverviewSpecialGroup } from './constants';\nimport * as plugins from '../../plugins';\n\nconst asOverviewGroups = (keyedItems: { [name: string]: OverviewItem[] }): OverviewGroup[] => {\n  const compareGroups = (a: OverviewGroup, b: OverviewGroup) => {\n    if (a.name === DEFAULT_GROUP_NAME) {\n      return 1;\n    }\n    if (b.name === DEFAULT_GROUP_NAME) {\n      return -1;\n    }\n    return a.name.localeCompare(b.name);\n  };\n\n  return _.map(\n    keyedItems,\n    (group: OverviewItem[], name: string): OverviewGroup => {\n      return {\n        name,\n        items: group,\n      };\n    },\n  ).sort(compareGroups);\n};\n\nconst getApplication = (item: OverviewItem): string => {\n  const labels = _.get(item, 'obj.metadata.labels') || {};\n  return (\n    labels['app.kubernetes.io/part-of'] ||\n    labels['app.kubernetes.io/name'] ||\n    labels.app ||\n    DEFAULT_GROUP_NAME\n  );\n};\n\nconst groupByApplication = (items: OverviewItem[]): OverviewGroup[] => {\n  const byApplication = _.groupBy(items, getApplication);\n  return asOverviewGroups(byApplication);\n};\n\nconst groupByResource = (items: OverviewItem[]): OverviewGroup[] => {\n  const byResource = _.groupBy(items, (item) => _.startCase(item.obj.kind));\n  return asOverviewGroups(byResource);\n};\n\nconst groupByLabel = (items: OverviewItem[], label: string): OverviewGroup[] => {\n  const byLabel = _.groupBy(\n    items,\n    (item): string => _.get(item, ['obj', 'metadata', 'labels', label]) || DEFAULT_GROUP_NAME,\n  );\n  return asOverviewGroups(byLabel);\n};\n\nconst groupItems = (items: OverviewItem[], selectedGroup: string): OverviewGroup[] => {\n  switch (selectedGroup) {\n    case OverviewSpecialGroup.GROUP_BY_APPLICATION:\n      return groupByApplication(items);\n    case OverviewSpecialGroup.GROUP_BY_RESOURCE:\n      return groupByResource(items);\n    default:\n      return groupByLabel(items, selectedGroup);\n  }\n};\n\nconst headingStateToProps = ({ UI }): OverviewHeadingPropsFromState => {\n  const { selectedGroup, labels, filterValue } = UI.get('overview').toJS();\n  return { labels, selectedGroup, filterValue };\n};\n\nconst headingDispatchToProps = (dispatch): OverviewHeadingPropsFromDispatch => ({\n  selectGroup: (group: OverviewSpecialGroup) =>\n    dispatch(UIActions.updateOverviewSelectedGroup(group)),\n  changeFilter: (value: string) => dispatch(UIActions.updateOverviewFilterValue(value)),\n});\n\nclass OverviewHeading_ extends React.Component<OverviewHeadingProps> {\n  componentWillUnmount() {\n    // Resets the filter value so that it is not retained when navigating to other pages.\n    this.props.changeFilter('');\n  }\n\n  render() {\n    const { changeFilter, filterValue, labels, selectGroup, selectedGroup } = this.props;\n    const firstLabel = _.first(labels) || '';\n    const dropdownItems = {\n      [OverviewSpecialGroup.GROUP_BY_APPLICATION]: 'Application',\n      [OverviewSpecialGroup.GROUP_BY_RESOURCE]: 'Resource',\n      ..._.zipObject(labels, labels),\n    };\n\n    return (\n      <div className=\"co-m-pane__filter-bar\">\n        <div className=\"co-m-pane__filter-bar-group\">\n          <Dropdown\n            className=\"btn-group\"\n            menuClassName=\"dropdown-menu--text-wrap\"\n            items={dropdownItems}\n            onChange={selectGroup}\n            titlePrefix=\"Group by\"\n            title={dropdownItems[selectedGroup] || 'Select Category'}\n            spacerBefore={new Set([firstLabel])}\n            headerBefore={{ [firstLabel]: 'Label' }}\n          />\n        </div>\n        <div className=\"co-m-pane__filter-bar-group co-m-pane__filter-bar-group--filter\">\n          <TextFilter defaultValue={filterValue} label=\"by name\" onChange={changeFilter} />\n        </div>\n      </div>\n    );\n  }\n}\n\nconst OverviewHeading = connect<\n  OverviewHeadingPropsFromState,\n  OverviewHeadingPropsFromDispatch,\n  OverviewHeadingOwnProps\n>(\n  headingStateToProps,\n  headingDispatchToProps,\n)(OverviewHeading_);\n\nconst mainContentStateToProps = ({ UI }): OverviewMainContentPropsFromState => {\n  const { filterValue, metrics, selectedGroup, labels } = UI.get('overview').toJS();\n  return { filterValue, labels, metrics, selectedGroup };\n};\n\nconst mainContentDispatchToProps = (dispatch): OverviewMainContentPropsFromDispatch => ({\n  updateLabels: (labels: string[]) => dispatch(UIActions.updateOverviewLabels(labels)),\n  updateMetrics: (metrics: OverviewMetrics) => dispatch(UIActions.updateOverviewMetrics(metrics)),\n  updateResources: (items: OverviewItem[]) => dispatch(UIActions.updateOverviewResources(items)),\n  updateSelectedGroup: (group: OverviewSpecialGroup) =>\n    dispatch(UIActions.updateOverviewSelectedGroup(group)),\n});\n\nclass OverviewMainContent_ extends React.Component<\n  OverviewMainContentProps,\n  OverviewMainContentState\n> {\n  private metricsInterval: any = null;\n\n  readonly state: OverviewMainContentState = {\n    items: [],\n    filteredItems: [],\n    groupedItems: [],\n    ...this.createOverviewData(),\n  };\n\n  componentDidMount(): void {\n    this.fetchMetrics();\n  }\n\n  componentWillUnmount(): void {\n    clearInterval(this.metricsInterval);\n  }\n\n  componentDidUpdate(prevProps: OverviewMainContentProps): void {\n    const {\n      builds,\n      buildConfigs,\n      daemonSets,\n      deployments,\n      deploymentConfigs,\n      filterValue,\n      loaded,\n      namespace,\n      pods,\n      replicaSets,\n      replicationControllers,\n      routes,\n      services,\n      statefulSets,\n      selectedGroup,\n    } = this.props;\n\n    if (\n      namespace !== prevProps.namespace ||\n      loaded !== prevProps.loaded ||\n      !_.isEqual(buildConfigs, prevProps.buildConfigs) ||\n      !_.isEqual(builds, prevProps.builds) ||\n      !_.isEqual(daemonSets, prevProps.daemonSets) ||\n      !_.isEqual(deploymentConfigs, prevProps.deploymentConfigs) ||\n      !_.isEqual(deployments, prevProps.deployments) ||\n      !_.isEqual(pods, prevProps.pods) ||\n      !_.isEqual(replicaSets, prevProps.replicaSets) ||\n      !_.isEqual(replicationControllers, prevProps.replicationControllers) ||\n      !_.isEqual(routes, prevProps.routes) ||\n      !_.isEqual(services, prevProps.services) ||\n      !_.isEqual(statefulSets, prevProps.statefulSets)\n    ) {\n      this.setState(this.createOverviewData());\n    } else if (filterValue !== prevProps.filterValue) {\n      const filteredItems = this.filterItems(this.state.items);\n      this.setState({\n        filteredItems,\n        groupedItems: groupItems(filteredItems, selectedGroup),\n      });\n    } else if (selectedGroup !== prevProps.selectedGroup) {\n      this.setState({\n        groupedItems: groupItems(this.state.filteredItems, selectedGroup),\n      });\n    }\n    // Fetch new metrics when the namespace changes.\n    if (namespace !== prevProps.namespace) {\n      clearInterval(this.metricsInterval);\n      this.fetchMetrics();\n    }\n  }\n\n  fetchMetrics = (): void => {\n    if (!PROMETHEUS_TENANCY_BASE_PATH) {\n      return;\n    }\n\n    const { metrics: previousMetrics, namespace } = this.props;\n    const queries = {\n      memory: `sum(container_memory_working_set_bytes{namespace='${namespace}',container='',pod!=''}) BY (pod, namespace)`,\n      cpu: `pod:container_cpu_usage:sum{namespace=\"${namespace}\"}`,\n    };\n\n    const promises = _.map(queries, (query, name) => {\n      const url = `${PROMETHEUS_TENANCY_BASE_PATH}/api/v1/query?namespace=${namespace}&query=${encodeURIComponent(\n        query,\n      )}`;\n      return coFetchJSON(url).then(({ data: { result } }) => {\n        const byPod: MetricValuesByPod = result.reduce((acc, { metric, value }) => {\n          acc[metric.pod] = Number(value[1]);\n          return acc;\n        }, {});\n        return { [name]: byPod };\n      });\n    });\n\n    Promise.all(promises)\n      .then((data) => {\n        const metrics = data.reduce(\n          (acc: OverviewMetrics, metric): OverviewMetrics => _.assign(acc, metric),\n          {},\n        );\n        this.props.updateMetrics(metrics);\n      })\n      .catch((res) => {\n        const status = _.get(res, 'response.status');\n        // eslint-disable-next-line no-console\n        console.error('Could not fetch metrics, status:', status);\n        // Don't retry on some status codes unless a previous request succeeded.\n        if (_.includes([401, 403, 502, 503], status) && _.isEmpty(previousMetrics)) {\n          throw new Error(`Could not fetch metrics, status: ${status}`);\n        }\n      })\n      .then(() => {\n        this.metricsInterval = setTimeout(this.fetchMetrics, METRICS_POLL_INTERVAL);\n      });\n  };\n\n  filterItems(items: OverviewItem[]): OverviewItem[] {\n    const { filterValue, selectedItem } = this.props;\n\n    if (!filterValue) {\n      return items;\n    }\n\n    const filterString = filterValue.toLowerCase();\n    return _.filter(items, (item) => {\n      return (\n        fuzzy(filterString, _.get(item, 'obj.metadata.name', '')) ||\n        _.get(item, 'obj.metadata.uid') === _.get(selectedItem, 'obj.metadata.uid')\n      );\n    });\n  }\n\n  getLabels(items: OverviewItem[]): string[] {\n    const labelSet = new Set<string>();\n    _.each(items, (i: OverviewItem) => {\n      const itemLabels = _.get(i, 'obj.metadata.labels') as K8sResourceKind['metadata']['labels'];\n      _.each(itemLabels, (v: string, k: string) => labelSet.add(k));\n    });\n    return [...labelSet].sort();\n  }\n\n  createOverviewData(): OverviewMainContentState {\n    const {\n      loaded,\n      mock,\n      selectedGroup,\n      updateLabels,\n      updateSelectedGroup,\n      updateResources,\n    } = this.props;\n    if (!loaded) {\n      return;\n    }\n    // keeps deleted bookmarked projects from attempting to generate data\n    if (mock) {\n      return;\n    }\n\n    const items = [\n      ...createDaemonSetItems(\n        this.props.daemonSets.data,\n        this.props,\n        this.props?.clusterServiceVersions?.data,\n        this.props.utils,\n      ),\n      ...createDeploymentItems(\n        this.props.deployments.data,\n        this.props,\n        this.props?.clusterServiceVersions?.data,\n        this.props.utils,\n      ),\n      ...createDeploymentConfigItems(\n        this.props.deploymentConfigs.data,\n        this.props,\n        this.props?.clusterServiceVersions?.data,\n        this.props.utils,\n      ),\n      ...createStatefulSetItems(\n        this.props.statefulSets.data,\n        this.props,\n        this.props?.clusterServiceVersions?.data,\n        this.props.utils,\n      ),\n      ...createPodItems(this.props),\n    ];\n\n    updateResources(items);\n\n    const filteredItems = this.filterItems(items);\n    const labels = this.getLabels(filteredItems);\n    if (\n      selectedGroup !== OverviewSpecialGroup.GROUP_BY_APPLICATION &&\n      selectedGroup !== OverviewSpecialGroup.GROUP_BY_RESOURCE &&\n      !_.includes(labels, selectedGroup)\n    ) {\n      updateSelectedGroup(OverviewSpecialGroup.GROUP_BY_APPLICATION);\n    }\n\n    updateLabels(labels);\n    const groupedItems = groupItems(filteredItems, selectedGroup);\n    return {\n      filteredItems,\n      groupedItems,\n      items,\n    };\n  }\n\n  render() {\n    const { loaded, loadError, project, namespace, EmptyMsg, emptyBodyClass } = this.props;\n    const { items, filteredItems, groupedItems } = this.state;\n    const OverviewEmptyState = () => (\n      <MsgBox\n        title=\"No Workloads Found.\"\n        detail={\n          <div>\n            <Link to={formatNamespacedRouteForResource('import', namespace)}>Import YAML</Link> or{' '}\n            <Link to={`/add/ns/${namespace}`}>add other content</Link> to your project.\n          </div>\n        }\n      />\n    );\n\n    const skeletonOverview = (\n      <div className=\"skeleton-overview\">\n        <div className=\"skeleton-overview--head\" />\n        <div className=\"skeleton-overview--tile\" />\n        <div className=\"skeleton-overview--tile\" />\n        <div className=\"skeleton-overview--tile\" />\n      </div>\n    );\n\n    const hasItems = items?.length > 0;\n    return (\n      <div className=\"co-m-pane\">\n        {hasItems && <OverviewHeading project={_.get(project, 'data')} />}\n        <div\n          className={\n            (!hasItems && emptyBodyClass) || 'co-m-pane__body co-m-pane__body--no-top-margin'\n          }\n        >\n          <StatusBox\n            skeleton={skeletonOverview}\n            data={filteredItems}\n            label=\"Resources\"\n            loaded={loaded}\n            loadError={loadError}\n            EmptyMsg={EmptyMsg || OverviewEmptyState}\n          >\n            <ProjectOverview groups={groupedItems} />\n          </StatusBox>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst OverviewMainContent = connect<\n  OverviewMainContentPropsFromState,\n  OverviewMainContentPropsFromDispatch,\n  OverviewMainContentOwnProps\n>(\n  mainContentStateToProps,\n  mainContentDispatchToProps,\n)(OverviewMainContent_);\n\nconst overviewStateToProps = ({ UI, FLAGS }): OverviewPropsFromState => {\n  const selectedUID = UI.getIn(['overview', 'selectedUID']);\n  const resources = UI.getIn(['overview', 'resources']);\n  const resourceList = plugins.registry\n    .getOverviewCRDs()\n    .filter((resource) => FLAGS.get(resource.properties.required));\n  const selectedItem = !!resources && resources.get(selectedUID);\n  return { selectedItem, resourceList };\n};\n\nconst overviewDispatchToProps = (dispatch): OverviewPropsFromDispatch => {\n  return {\n    dismissDetails: () => dispatch(UIActions.dismissOverviewDetails()),\n  };\n};\n\nconst Overview_: React.SFC<OverviewProps> = ({\n  mock,\n  match,\n  selectedItem,\n  resourceList,\n  title,\n  dismissDetails,\n  EmptyMsg,\n  emptyBodyClass,\n}) => {\n  const namespace = _.get(match, 'params.name');\n  const sidebarOpen = !_.isEmpty(selectedItem);\n  const className = classnames('overview', { 'overview--sidebar-shown': sidebarOpen });\n  const ref = React.useRef();\n  const [height, setHeight] = React.useState(500);\n  const calcHeight = (node) => {\n    setHeight(\n      document.getElementsByClassName('pf-c-page')[0].getBoundingClientRect().bottom -\n        node.current.getBoundingClientRect().top,\n    );\n  };\n  React.useLayoutEffect(() => {\n    calcHeight(ref);\n    const handleResize = () => calcHeight(ref);\n    window.addEventListener('resize', handleResize);\n    return () => {\n      window.removeEventListener('resize', handleResize);\n    };\n  });\n\n  const { resources, utils } = getResourceList(namespace, resourceList);\n  resources.push({\n    isList: false,\n    kind: 'Project',\n    name: namespace,\n    prop: 'project',\n  });\n  return (\n    <div className={className}>\n      <div className=\"overview__main-column\" ref={ref} style={{ height }}>\n        <div className=\"overview__main-column-section\">\n          <Firehose resources={mock ? [] : resources}>\n            <OverviewMainContent\n              mock={mock}\n              namespace={namespace}\n              selectedItem={selectedItem}\n              title={title}\n              utils={utils}\n              EmptyMsg={EmptyMsg}\n              emptyBodyClass={emptyBodyClass}\n            />\n          </Firehose>\n        </div>\n      </div>\n      {sidebarOpen && (\n        <CSSTransition appear={true} in timeout={225} classNames=\"overview__sidebar\">\n          <div className=\"overview__sidebar\">\n            <div className=\"co-sidebar-dismiss clearfix\">\n              <CloseButton onClick={dismissDetails} />\n            </div>\n            <ResourceOverviewPage item={selectedItem} kind={selectedItem.obj.kind} />\n          </div>\n        </CSSTransition>\n      )}\n    </div>\n  );\n};\n\nexport const Overview = connect<\n  OverviewPropsFromState,\n  OverviewPropsFromDispatch,\n  OverviewOwnProps\n>(\n  overviewStateToProps,\n  overviewDispatchToProps,\n)(Overview_);\n\nexport type PodOverviewItem = {\n  obj: PodKind;\n} & OverviewItem;\n\nexport type OverviewGroup = {\n  name: string;\n  items: OverviewItem[];\n};\n\ntype MetricValuesByPod = {\n  [podName: string]: number;\n};\n\nexport type OverviewMetrics = {\n  cpu?: MetricValuesByPod;\n  memory?: MetricValuesByPod;\n};\n\ntype OverviewHeadingPropsFromState = {\n  filterValue: string;\n  labels: string[];\n  selectedGroup: string;\n};\n\ntype OverviewHeadingPropsFromDispatch = {\n  selectGroup: (selectedLabel: OverviewSpecialGroup) => void;\n  changeFilter: (value: string) => void;\n};\n\ntype OverviewHeadingOwnProps = {\n  project: K8sResourceKind;\n};\n\ntype OverviewHeadingProps = OverviewHeadingPropsFromState &\n  OverviewHeadingPropsFromDispatch &\n  OverviewHeadingOwnProps;\n\ntype OverviewMainContentPropsFromState = {\n  filterValue: string;\n  labels: string[];\n  metrics: OverviewMetrics;\n  selectedGroup: string;\n};\n\ntype OverviewMainContentPropsFromDispatch = {\n  updateLabels: (labels: string[]) => void;\n  updateMetrics: (metrics: OverviewMetrics) => void;\n  updateResources: (items: OverviewItem[]) => void;\n  updateSelectedGroup: (group: OverviewSpecialGroup) => void;\n};\n\ntype OverviewMainContentOwnProps = {\n  builds?: FirehoseResult;\n  buildConfigs?: FirehoseResult;\n  daemonSets?: FirehoseResult;\n  deploymentConfigs?: FirehoseResult;\n  deployments?: FirehoseResult<DeploymentKind[]>;\n  mock: boolean;\n  loaded?: boolean;\n  loadError?: any;\n  namespace: string;\n  pods?: FirehoseResult<PodKind[]>;\n  project?: FirehoseResult<K8sResourceKind>;\n  replicationControllers?: FirehoseResult;\n  replicaSets?: FirehoseResult;\n  routes?: FirehoseResult<RouteKind[]>;\n  services?: FirehoseResult;\n  selectedItem: OverviewItem;\n  statefulSets?: FirehoseResult;\n  title?: string;\n  clusterServiceVersions?: FirehoseResult<ClusterServiceVersionKind[]>;\n  utils?: Function[];\n  EmptyMsg?: React.ComponentType;\n  emptyBodyClass?: string;\n};\n\nexport type OverviewMainContentProps = OverviewMainContentPropsFromState &\n  OverviewMainContentPropsFromDispatch &\n  OverviewMainContentOwnProps;\n\ntype OverviewMainContentState = {\n  readonly items: any[];\n  readonly filteredItems: any[];\n  readonly groupedItems: any[];\n};\n\ntype OverviewPropsFromState = {\n  selectedItem: any;\n  resourceList: OverviewCRD[];\n};\n\ntype OverviewPropsFromDispatch = {\n  dismissDetails: () => void;\n};\n\ntype OverviewOwnProps = {\n  mock: boolean;\n  match: any;\n  title: string;\n  EmptyMsg?: React.ComponentType;\n  emptyBodyClass?: string;\n};\n\ntype OverviewProps = OverviewPropsFromState & OverviewPropsFromDispatch & OverviewOwnProps;\n"]}]}