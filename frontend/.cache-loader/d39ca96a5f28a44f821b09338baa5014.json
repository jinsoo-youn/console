{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/components/independent-mode/utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/components/independent-mode/utils.ts","mtime":1616735742370},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { Base64 } from 'js-base64';\nimport { HealthState } from '@console/shared/src/components/dashboard/status-card/states';\nimport { getAnnotations } from '@console/shared';\nconst pluralize = (count, singular, plural = `${singular}s`) => count > 1 ? plural : singular;\nexport const isValidJSON = (fData) => {\n    try {\n        JSON.parse(fData);\n        return true;\n    }\n    catch (e) {\n        return false;\n    }\n};\nexport const createDownloadFile = (data) => `data:application/octet-stream;charset=utf-8,${encodeURIComponent(Base64.decode(data))}`;\nexport const checkError = (data = '{}', requiredKeys = [], requiresEncodingKeys = []) => {\n    const parsedData = JSON.parse(data);\n    const providedKeys = _.map(parsedData, (item) => item.name);\n    const emptyKeys = [];\n    const base64ErrorKeys = [];\n    _.map(parsedData, (item) => {\n        var _a, _b, _c, _d, _e, _f, _g, _h;\n        if (_.isEmpty(item.data))\n            emptyKeys.push((_a = item.name) !== null && _a !== void 0 ? _a : 'Unrecongnized key');\n        if (requiresEncodingKeys.includes(item.name)) {\n            _.isEmpty((_b = item.data) === null || _b === void 0 ? void 0 : _b.userKey) &&\n                _.isEmpty((_c = item.data) === null || _c === void 0 ? void 0 : _c.adminKey) &&\n                base64ErrorKeys.push((_d = item.name) !== null && _d !== void 0 ? _d : 'Unrecognized key');\n            try {\n                atob((_f = (_e = item.data) === null || _e === void 0 ? void 0 : _e.userKey) !== null && _f !== void 0 ? _f : (_g = item.data) === null || _g === void 0 ? void 0 : _g.adminKey);\n            }\n            catch (e) {\n                base64ErrorKeys.push((_h = item.name) !== null && _h !== void 0 ? _h : 'Unrecognized key');\n            }\n        }\n    });\n    // Check for missing keys\n    const missingKeys = _.difference(_.concat(requiredKeys, requiresEncodingKeys), providedKeys);\n    if (missingKeys.length > 0 && providedKeys.length > 0) {\n        return `${_.uniq(missingKeys).join(', ')} ${pluralize(_.uniq(missingKeys).length, 'is', 'are')} missing.`;\n    }\n    if (emptyKeys.length > 0) {\n        return `${_.uniq(emptyKeys).join(', ')} ${pluralize(emptyKeys.length, 'has', 'have')} empty ${pluralize(emptyKeys.length, 'value')}.`;\n    }\n    if (base64ErrorKeys.length > 0) {\n        return `${_.uniq(base64ErrorKeys).join(', ')} ${pluralize(base64ErrorKeys.length, 'key')} ${pluralize(base64ErrorKeys.length, 'has', 'have')} malformed Base64 encoding ${pluralize(base64ErrorKeys.length, 'value')}.`;\n    }\n    return '';\n};\nexport const getRequiredKeys = (csv) => {\n    var _a, _b;\n    // external.ocs.openshift.io/validation: '{\"configMaps\":[\"x\", \"y\"], \"secrets\": [\"x\", \"y\", \"z\"], \"storageClasses\": [\"x\"]}'\n    const keys = (_b = (_a = getAnnotations(csv)) === null || _a === void 0 ? void 0 : _a['external.features.ocs.openshift.io/validation']) !== null && _b !== void 0 ? _b : '{}';\n    return JSON.parse(keys);\n};\nvar ClusterPhase;\n(function (ClusterPhase) {\n    ClusterPhase[\"CONNECTED\"] = \"Connected\";\n    ClusterPhase[\"READY\"] = \"Ready\";\n    ClusterPhase[\"CONNECTING\"] = \"Connecting\";\n    ClusterPhase[\"PROGRESSING\"] = \"Progressing\";\n    ClusterPhase[\"ERROR\"] = \"Error\";\n})(ClusterPhase || (ClusterPhase = {}));\nconst PhaseToState = Object.freeze({\n    [ClusterPhase.CONNECTED]: HealthState.OK,\n    [ClusterPhase.READY]: HealthState.OK,\n    [ClusterPhase.CONNECTING]: HealthState.UPDATING,\n    [ClusterPhase.PROGRESSING]: HealthState.UPDATING,\n    [ClusterPhase.ERROR]: HealthState.ERROR,\n});\nexport const getClusterHealth = (cluster, loaded, error) => {\n    var _a, _b;\n    const phase = (_a = cluster === null || cluster === void 0 ? void 0 : cluster.status) === null || _a === void 0 ? void 0 : _a.phase;\n    if (!_.isEmpty(error)) {\n        if (((_b = error === null || error === void 0 ? void 0 : error.response) === null || _b === void 0 ? void 0 : _b.status) === 404)\n            return HealthState.NOT_AVAILABLE;\n        return HealthState.ERROR;\n    }\n    if (!loaded)\n        return HealthState.LOADING;\n    if (!_.isEmpty(cluster))\n        return PhaseToState[phase];\n    return HealthState.NOT_AVAILABLE;\n};\nexport const prettifyJSON = (data) => _.isEmpty(data)\n    ? ''\n    : (() => {\n        const jsonData = JSON.parse(data);\n        let container = ``;\n        _.map(jsonData, (item) => {\n            var _a;\n            return (container += `${_.upperCase((_a = item.name) !== null && _a !== void 0 ? _a : 'Unrecognized key')} = ${item.data ? JSON.stringify(item.data) : 'Unrecognized value'}\\n`);\n        });\n        return container;\n    })();\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/components/independent-mode/utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/components/independent-mode/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { Base64 } from 'js-base64';\nimport { HealthState } from '@console/shared/src/components/dashboard/status-card/states';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { ClusterServiceVersionKind } from '@console/operator-lifecycle-manager';\nimport { getAnnotations } from '@console/shared';\n\nconst pluralize = (count: number, singular: string, plural: string = `${singular}s`): string =>\n  count > 1 ? plural : singular;\n\nexport const isValidJSON = (fData: string): boolean => {\n  try {\n    JSON.parse(fData);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nexport const createDownloadFile = (data: string): string =>\n  `data:application/octet-stream;charset=utf-8,${encodeURIComponent(Base64.decode(data))}`;\n\nexport const checkError = (\n  data: string = '{}',\n  requiredKeys = [],\n  requiresEncodingKeys = [],\n): string => {\n  const parsedData = JSON.parse(data);\n  const providedKeys = _.map(parsedData, (item) => item.name);\n  const emptyKeys = [];\n  const base64ErrorKeys = [];\n  _.map(parsedData, (item) => {\n    if (_.isEmpty(item.data)) emptyKeys.push(item.name ?? 'Unrecongnized key');\n    if (requiresEncodingKeys.includes(item.name)) {\n      _.isEmpty(item.data?.userKey) &&\n        _.isEmpty(item.data?.adminKey) &&\n        base64ErrorKeys.push(item.name ?? 'Unrecognized key');\n      try {\n        atob(item.data?.userKey ?? item.data?.adminKey);\n      } catch (e) {\n        base64ErrorKeys.push(item.name ?? 'Unrecognized key');\n      }\n    }\n  });\n\n  // Check for missing keys\n  const missingKeys = _.difference(_.concat(requiredKeys, requiresEncodingKeys), providedKeys);\n  if (missingKeys.length > 0 && providedKeys.length > 0) {\n    return `${_.uniq(missingKeys).join(', ')} ${pluralize(\n      _.uniq(missingKeys).length,\n      'is',\n      'are',\n    )} missing.`;\n  }\n\n  if (emptyKeys.length > 0) {\n    return `${_.uniq(emptyKeys).join(', ')} ${pluralize(\n      emptyKeys.length,\n      'has',\n      'have',\n    )} empty ${pluralize(emptyKeys.length, 'value')}.`;\n  }\n\n  if (base64ErrorKeys.length > 0) {\n    return `${_.uniq(base64ErrorKeys).join(', ')} ${pluralize(\n      base64ErrorKeys.length,\n      'key',\n    )} ${pluralize(base64ErrorKeys.length, 'has', 'have')} malformed Base64 encoding ${pluralize(\n      base64ErrorKeys.length,\n      'value',\n    )}.`;\n  }\n  return '';\n};\n\nexport const getRequiredKeys = (csv: ClusterServiceVersionKind): { [key: string]: string[] } => {\n  // external.ocs.openshift.io/validation: '{\"configMaps\":[\"x\", \"y\"], \"secrets\": [\"x\", \"y\", \"z\"], \"storageClasses\": [\"x\"]}'\n  const keys = getAnnotations(csv)?.['external.features.ocs.openshift.io/validation'] ?? '{}';\n  return JSON.parse(keys);\n};\n\nenum ClusterPhase {\n  CONNECTED = 'Connected',\n  READY = 'Ready',\n  CONNECTING = 'Connecting',\n  PROGRESSING = 'Progressing',\n  ERROR = 'Error',\n}\n\nconst PhaseToState = Object.freeze({\n  [ClusterPhase.CONNECTED]: HealthState.OK,\n  [ClusterPhase.READY]: HealthState.OK,\n  [ClusterPhase.CONNECTING]: HealthState.UPDATING,\n  [ClusterPhase.PROGRESSING]: HealthState.UPDATING,\n  [ClusterPhase.ERROR]: HealthState.ERROR,\n});\n\nexport const getClusterHealth = (cluster: K8sResourceKind, loaded: boolean, error): HealthState => {\n  const phase = cluster?.status?.phase;\n  if (!_.isEmpty(error)) {\n    if (error?.response?.status === 404) return HealthState.NOT_AVAILABLE;\n    return HealthState.ERROR;\n  }\n  if (!loaded) return HealthState.LOADING;\n  if (!_.isEmpty(cluster)) return PhaseToState[phase];\n  return HealthState.NOT_AVAILABLE;\n};\n\nexport const prettifyJSON = (data: string) =>\n  _.isEmpty(data)\n    ? ''\n    : (() => {\n        const jsonData = JSON.parse(data);\n        let container = ``;\n        _.map(\n          jsonData,\n          (item) =>\n            (container += `${_.upperCase(item.name ?? 'Unrecognized key')} = ${\n              item.data ? JSON.stringify(item.data) : 'Unrecognized value'\n            }\\n`),\n        );\n        return container;\n      })();\n"]}]}