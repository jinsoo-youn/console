{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/vm-status-modal/vm-status-modal.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/vm-status-modal/vm-status-modal.tsx","mtime":1616735742420},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as React from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport { withHandlePromise } from '@console/internal/components/utils';\nimport { ModalFooter } from '../modal/modal-footer';\nimport { PAUSED_VM_MODAL_MESSAGE } from '../../../constants/vm';\nimport { unpauseVMI } from '../../../k8s/requests/vmi/actions';\nconst modalTitle = 'Edit pause state';\nconst VMStatusModal = withHandlePromise(({ vmi, isOpen, setOpen, title = modalTitle, handlePromise, inProgress, errorMessage }) => {\n    const [showPatchError, setPatchError] = React.useState(false);\n    const onSubmit = (event) => __awaiter(void 0, void 0, void 0, function* () {\n        event.preventDefault();\n        const promise = unpauseVMI(vmi);\n        handlePromise(promise)\n            .then(() => setOpen(false))\n            .catch(() => setPatchError(true));\n    });\n    const footer = (React.createElement(ModalFooter, { errorMessage: showPatchError && errorMessage, inProgress: inProgress, onSubmit: onSubmit, onCancel: () => setOpen(false), submitButtonText: \"Unpause\" }));\n    return (React.createElement(Modal, { title: title, isOpen: isOpen, isSmall: true, onClose: () => setOpen(false), footer: footer, isFooterLeftAligned: true },\n        React.createElement(\"div\", null, PAUSED_VM_MODAL_MESSAGE)));\n});\nexport default VMStatusModal;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/vm-status-modal/vm-status-modal.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/vm-status-modal/vm-status-modal.tsx"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,KAAK,EAAE,MAAM,wBAAwB,CAAC;AAC/C,OAAO,EAAsB,iBAAiB,EAAE,MAAM,oCAAoC,CAAC;AAE3F,OAAO,EAAE,WAAW,EAAE,MAAM,uBAAuB,CAAC;AACpD,OAAO,EAAE,uBAAuB,EAAE,MAAM,uBAAuB,CAAC;AAEhE,OAAO,EAAE,UAAU,EAAE,MAAM,mCAAmC,CAAC;AAE/D,MAAM,UAAU,GAAG,kBAAkB,CAAC;AAEtC,MAAM,aAAa,GAAG,iBAAiB,CACrC,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,OAAO,EAAE,KAAK,GAAG,UAAU,EAAE,aAAa,EAAE,UAAU,EAAE,YAAY,EAAE,EAAE,EAAE;IACxF,MAAM,CAAC,cAAc,EAAE,aAAa,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAU,KAAK,CAAC,CAAC;IAEvE,MAAM,QAAQ,GAAG,CAAO,KAAK,EAAE,EAAE;QAC/B,KAAK,CAAC,cAAc,EAAE,CAAC;QAEvB,MAAM,OAAO,GAAG,UAAU,CAAC,GAAG,CAAC,CAAC;QAChC,aAAa,CAAC,OAAO,CAAC;aACnB,IAAI,CAAC,GAAG,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;aAC1B,KAAK,CAAC,GAAG,EAAE,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;IACtC,CAAC,CAAA,CAAC;IAEF,MAAM,MAAM,GAAG,CACb,oBAAC,WAAW,IACV,YAAY,EAAE,cAAc,IAAI,YAAY,EAC5C,UAAU,EAAE,UAAU,EACtB,QAAQ,EAAE,QAAQ,EAClB,QAAQ,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,EAC9B,gBAAgB,EAAC,SAAS,GAC1B,CACH,CAAC;IAEF,OAAO,CACL,oBAAC,KAAK,IACJ,KAAK,EAAE,KAAK,EACZ,MAAM,EAAE,MAAM,EACd,OAAO,QACP,OAAO,EAAE,GAAG,EAAE,CAAC,OAAO,CAAC,KAAK,CAAC,EAC7B,MAAM,EAAE,MAAM,EACd,mBAAmB;QAEnB,iCAAM,uBAAuB,CAAO,CAC9B,CACT,CAAC;AACJ,CAAC,CACF,CAAC;AAUF,eAAe,aAAa,CAAC","sourcesContent":["import * as React from 'react';\nimport { Modal } from '@patternfly/react-core';\nimport { HandlePromiseProps, withHandlePromise } from '@console/internal/components/utils';\nimport { ModalComponentProps } from '@console/internal/components/factory';\nimport { ModalFooter } from '../modal/modal-footer';\nimport { PAUSED_VM_MODAL_MESSAGE } from '../../../constants/vm';\nimport { VMIKind } from '../../../types';\nimport { unpauseVMI } from '../../../k8s/requests/vmi/actions';\n\nconst modalTitle = 'Edit pause state';\n\nconst VMStatusModal = withHandlePromise<VMStatusModalProps>(\n  ({ vmi, isOpen, setOpen, title = modalTitle, handlePromise, inProgress, errorMessage }) => {\n    const [showPatchError, setPatchError] = React.useState<boolean>(false);\n\n    const onSubmit = async (event) => {\n      event.preventDefault();\n\n      const promise = unpauseVMI(vmi);\n      handlePromise(promise)\n        .then(() => setOpen(false))\n        .catch(() => setPatchError(true));\n    };\n\n    const footer = (\n      <ModalFooter\n        errorMessage={showPatchError && errorMessage}\n        inProgress={inProgress}\n        onSubmit={onSubmit}\n        onCancel={() => setOpen(false)}\n        submitButtonText=\"Unpause\"\n      />\n    );\n\n    return (\n      <Modal\n        title={title}\n        isOpen={isOpen}\n        isSmall\n        onClose={() => setOpen(false)}\n        footer={footer}\n        isFooterLeftAligned\n      >\n        <div>{PAUSED_VM_MODAL_MESSAGE}</div>\n      </Modal>\n    );\n  },\n);\n\nexport type VMStatusModalProps = HandlePromiseProps &\n  ModalComponentProps & {\n    vmi: VMIKind;\n    title?: string;\n    isOpen: boolean;\n    setOpen: (isOpen: boolean) => void;\n  };\n\nexport default VMStatusModal;\n"]}]}