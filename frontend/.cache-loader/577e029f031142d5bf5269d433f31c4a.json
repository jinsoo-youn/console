{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/resource.js","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/resource.js","mtime":1615298458760},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport { coFetchJSON } from '../../co-fetch';\nimport { k8sBasePath } from './k8s';\nimport { selectorToString } from './selector';\nimport { WSFactory } from '../ws-factory';\nimport { getActivePerspective, getActiveCluster } from '../../actions/ui';\nimport { getId, getUserGroup } from '../../hypercloud/auth';\n/** @type {(model: K8sKind) => string} */\nconst getK8sAPIPath = ({ apiGroup = 'core', apiVersion }, cluster) => {\n    const isLegacy = apiGroup === 'core' && apiVersion === 'v1';\n    let p = k8sBasePath;\n    if (window.SERVER_FLAGS.McMode && getActivePerspective() == 'hc') {\n        p = `${window.SERVER_FLAGS.basePath}api/${getActiveCluster()}`;\n    }\n    else if (cluster) {\n        p = `${window.SERVER_FLAGS.basePath}api/${cluster}`;\n    }\n    if (isLegacy) {\n        p += '/api/';\n    }\n    else {\n        p += '/apis/';\n    }\n    if (!isLegacy && apiGroup) {\n        p += `${apiGroup}/`;\n    }\n    p += apiVersion;\n    return p;\n};\n/** @type {(model: GroupVersionKind, options: {ns?: string, name?: string, path?: string, queryParams?: {[k: string]: string}}) => string} */\n// export const resourceURL = (model, options, listName) => {\nexport const resourceURL = (model, options) => {\n    let q = '';\n    let u = getK8sAPIPath(model, options.cluster);\n    if (options.ns) {\n        u += `/namespaces/${options.ns}`;\n    }\n    u += `/${model.plural}`;\n    if (options.name) {\n        // Some resources like Users can have special characters in the name.\n        u += `/${encodeURIComponent(options.name)}`;\n    }\n    if (options.path) {\n        u += `/${options.path}`;\n    }\n    if (!_.isEmpty(options.queryParams)) {\n        q = _.map(options.queryParams, function (v, k) {\n            return `${k}=${v}`;\n        });\n        u += `?${q.join('&')}`;\n    }\n    return u;\n};\nexport const resourceClusterURL = (model) => {\n    if (isCluster(model)) {\n        return `/api/multi-hypercloud/cluster?userId=${getId()}${getUserGroup()}&accessOnly=false`;\n    }\n    return `api/multi-hypercloud/clusterclaim?userId=${getId()}${getUserGroup()}`;\n};\nexport const resourceApprovalURL = (model, options, approval) => {\n    return resourceURL(model, options).replace('cicd', 'cicdapi') + `/${approval}`;\n};\nconst isCluster = (model) => {\n    if (model.kind === 'ClusterManager') {\n        return true;\n    }\n    return false;\n};\nconst isClusterClaim = (model) => {\n    if (model.kind === 'ClusterClaim') {\n        return true;\n    }\n    return false;\n};\nexport const watchURL = (kind, options) => {\n    const opts = options || {};\n    opts.queryParams = opts.queryParams || {};\n    opts.queryParams.watch = true;\n    return resourceURL(kind, opts);\n};\nexport const k8sGet = (kind, name, ns, opts) => coFetchJSON(resourceURL(kind, Object.assign({ ns, name }, opts)));\nexport const k8sCreate = (kind, data, opts = {}) => {\n    // Occassionally, a resource won't have a metadata property.\n    // For example: apps.openshift.io/v1 DeploymentRequest\n    // https://github.com/openshift/api/blob/master/apps/v1/types.go\n    data.metadata = data.metadata || {};\n    // Lowercase the resource name\n    // https://github.com/kubernetes/kubernetes/blob/HEAD/docs/user-guide/identifiers.md#names\n    if (data.metadata.name && _.isString(data.metadata.name) && !data.metadata.generateName) {\n        data.metadata.name = data.metadata.name.toLowerCase();\n    }\n    return coFetchJSON.post(resourceURL(kind, Object.assign({ ns: data.metadata.namespace }, opts)), data);\n};\nexport const k8sCreateUrl = (kind, data, opts = {}) => {\n    return coFetchJSON.post(resourceURL(kind, opts), data);\n};\nexport const k8sUpdate = (kind, data, ns, name) => coFetchJSON.put(resourceURL(kind, { ns: ns || data.metadata.namespace, name: name || data.metadata.name }), data);\nexport const k8sUpdateApproval = (kind, resource, approval, data, method = 'PUT') => {\n    const url = resourceApprovalURL(kind, Object.assign({\n        ns: resource.metadata.namespace,\n        name: resource.metadata.name,\n    }), approval);\n    switch (method) {\n        case 'PATCH': {\n            return coFetchJSON.patch(url, data);\n        }\n        default: {\n            return coFetchJSON.put(url, data);\n        }\n    }\n};\nexport const k8sUpdateClaim = (kind, clusterClaim, admit, reason) => {\n    const url = resourceClusterURL(kind) + `&clusterClaim=${clusterClaim}&admit=${admit}&reason=${reason}`;\n    return coFetchJSON.put(url);\n};\nexport const k8sPatch = (kind, resource, data, opts = {}) => {\n    const patches = _.compact(data);\n    if (_.isEmpty(patches)) {\n        return Promise.resolve(resource);\n    }\n    return coFetchJSON.patch(resourceURL(kind, Object.assign({\n        ns: resource.metadata.namespace,\n        name: resource.metadata.name,\n    }, opts)), patches);\n};\nexport const k8sPatchByName = (kind, name, namespace, data, opts = {}) => k8sPatch(kind, { metadata: { name, namespace } }, data, opts);\nexport const k8sKill = (kind, resource, opts = {}, json = null) => coFetchJSON.delete(resourceURL(kind, Object.assign({ ns: resource.metadata.namespace, name: resource.metadata.name }, opts)), opts, json);\nexport const k8sKillByName = (kind, name, namespace, opts = {}) => k8sKill(kind, { metadata: { name, namespace } }, opts);\nexport const k8sList = (kind, params = {}, raw = false, options = {}) => {\n    const query = _.map(_.omit(params, 'ns'), (v, k) => {\n        if (k === 'labelSelector') {\n            v = selectorToString(v);\n        }\n        return `${encodeURIComponent(k)}=${encodeURIComponent(v)}`;\n    }).join('&');\n    if (isCluster(kind) || isClusterClaim(kind)) {\n        const listClusterURL = resourceClusterURL(kind);\n        return coFetchJSON(`${listClusterURL}`, 'GET').then((result) => raw ? result : result.items);\n    }\n    let listURL = resourceURL(kind, { ns: params.ns });\n    if (localStorage.getItem('bridge/last-perspective') === 'hc') {\n        return coFetchJSON(`${listURL}?${query}`, 'GET', options).then(result => (raw ? result : result.items));\n    }\n    if (kind.kind === 'Namespace') {\n        listURL = `${document.location.origin}/api/hypercloud/namespace?userId=${getId()}${getUserGroup()}`;\n        return coFetchJSON(`${listURL}`, 'GET', options).then(result => (raw ? result : result.items));\n    }\n    else if (kind.kind === 'NamespaceClaim') {\n        listURL = `${document.location.origin}/api/hypercloud/namespaceClaim?userId=${getId()}${getUserGroup()}`;\n        return coFetchJSON(`${listURL}`, 'GET', options).then(result => (raw ? result : result.items));\n    }\n    else {\n        return coFetchJSON(`${listURL}?${query}`, 'GET', options).then(result => (raw ? result : result.items));\n    }\n};\nexport const k8sListPartialMetadata = (kind, params = {}, raw = false) => {\n    return k8sList(kind, params, raw, {\n        headers: {\n            Accept: 'application/json;as=PartialObjectMetadataList;v=v1beta1;g=meta.k8s.io,application/json',\n        },\n    });\n};\nexport const k8sWatch = (kind, query = {}, wsOptions = {}) => {\n    const queryParams = { watch: true };\n    const opts = { queryParams };\n    wsOptions = Object.assign({\n        host: 'auto',\n        reconnect: true,\n        jsonParse: true,\n        bufferFlushInterval: 500,\n        bufferMax: 1000,\n    }, wsOptions);\n    const labelSelector = query.labelSelector || kind.labelSelector;\n    if (labelSelector) {\n        const encodedSelector = encodeURIComponent(selectorToString(labelSelector));\n        if (encodedSelector) {\n            queryParams.labelSelector = encodedSelector;\n        }\n    }\n    if (query.fieldSelector) {\n        queryParams.fieldSelector = encodeURIComponent(query.fieldSelector);\n    }\n    if (query.ns) {\n        opts.ns = query.ns;\n    }\n    if (query.resourceVersion) {\n        queryParams.resourceVersion = encodeURIComponent(query.resourceVersion);\n    }\n    const path = resourceURL(kind, opts);\n    wsOptions.path = path;\n    return new WSFactory(path, wsOptions);\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/resource.js","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/resource.js"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\nimport { coFetchJSON } from '../../co-fetch';\nimport { k8sBasePath } from './k8s';\nimport { selectorToString } from './selector';\nimport { WSFactory } from '../ws-factory';\nimport { getActivePerspective, getActiveCluster } from '../../actions/ui';\nimport { getId, getUserGroup } from '../../hypercloud/auth';\n\n/** @type {(model: K8sKind) => string} */\nconst getK8sAPIPath = ({ apiGroup = 'core', apiVersion}, cluster)\n=> {\n  const isLegacy = apiGroup === 'core' && apiVersion === 'v1';\n\n  let p = k8sBasePath;\n\n  if (window.SERVER_FLAGS.McMode && getActivePerspective() == 'hc') {\n    p = `${window.SERVER_FLAGS.basePath}api/${getActiveCluster()}`;\n  } else if (cluster) {\n    p = `${window.SERVER_FLAGS.basePath}api/${cluster}`;\n  }\n\n  if (isLegacy) {\n    p += '/api/';\n  } else {\n    p += '/apis/';\n  }\n\n  if (!isLegacy && apiGroup) {\n    p += `${apiGroup}/`;\n  }\n\n  p += apiVersion;\n  return p;\n};\n\n/** @type {(model: GroupVersionKind, options: {ns?: string, name?: string, path?: string, queryParams?: {[k: string]: string}}) => string} */\n// export const resourceURL = (model, options, listName) => {\nexport const resourceURL = (model, options) => {\n  let q = '';\n  let u = getK8sAPIPath(model, options.cluster);\n\n  if (options.ns) {\n    u += `/namespaces/${options.ns}`;\n  }\n  u += `/${model.plural}`;\n  if (options.name) {\n    // Some resources like Users can have special characters in the name.\n    u += `/${encodeURIComponent(options.name)}`;\n  }\n  if (options.path) {\n    u += `/${options.path}`;\n  }\n  if (!_.isEmpty(options.queryParams)) {\n    q = _.map(options.queryParams, function(v, k) {\n      return `${k}=${v}`;\n    });\n    u += `?${q.join('&')}`;\n  }\n\n  return u;\n};\n\nexport const resourceClusterURL = (model) => {\n  if(isCluster(model)) {\n    return `/api/multi-hypercloud/cluster?userId=${getId()}${getUserGroup()}&accessOnly=false`;\n  }\n  return `api/multi-hypercloud/clusterclaim?userId=${getId()}${getUserGroup()}`;\n}\n\nexport const resourceApprovalURL = (model, options, approval) => {\n  return resourceURL(model, options).replace('cicd', 'cicdapi') + `/${approval}`\n}\n\nconst isCluster = (model) => {\n  if(model.kind === 'ClusterManager') {\n    return true;\n  }\n  return false;\n}\n\nconst isClusterClaim = (model) => {\n  if(model.kind === 'ClusterClaim') {\n    return true;\n  }\n  return false;\n}\n\nexport const watchURL = (kind, options) => {\n  const opts = options || {};\n\n  opts.queryParams = opts.queryParams || {};\n  opts.queryParams.watch = true;\n  return resourceURL(kind, opts);\n};\n\nexport const k8sGet = (kind, name, ns, opts) => coFetchJSON(resourceURL(kind, Object.assign({ ns, name }, opts)));\n\nexport const k8sCreate = (kind, data, opts = {}) => {\n  // Occassionally, a resource won't have a metadata property.\n  // For example: apps.openshift.io/v1 DeploymentRequest\n  // https://github.com/openshift/api/blob/master/apps/v1/types.go\n  data.metadata = data.metadata || {};\n\n  // Lowercase the resource name\n  // https://github.com/kubernetes/kubernetes/blob/HEAD/docs/user-guide/identifiers.md#names\n  if (data.metadata.name && _.isString(data.metadata.name) && !data.metadata.generateName) {\n    data.metadata.name = data.metadata.name.toLowerCase();\n  }\n\n  return coFetchJSON.post(resourceURL(kind, Object.assign({ ns: data.metadata.namespace }, opts)), data);\n};\n\nexport const k8sCreateUrl = (kind, data, opts = {}) => {\n  return coFetchJSON.post(resourceURL(kind, opts), data);\n}\n\n\nexport const k8sUpdate = (kind, data, ns, name) => coFetchJSON.put(resourceURL(kind, { ns: ns || data.metadata.namespace, name: name || data.metadata.name }), data);\n\nexport const k8sUpdateApproval = (kind, resource, approval, data, method = 'PUT') => {\n  const url = resourceApprovalURL(\n    kind,\n    Object.assign(\n      {\n        ns: resource.metadata.namespace,\n        name: resource.metadata.name,\n      },\n    ),\n    approval,\n  );\n\n  switch(method) {\n    case 'PATCH': {\n      return coFetchJSON.patch(url, data);\n    }\n    default: {\n      return coFetchJSON.put(url, data);\n    }\n  }\n}\n\nexport const k8sUpdateClaim = (kind, clusterClaim, admit, reason) => {\n  const url = resourceClusterURL(kind) + `&clusterClaim=${clusterClaim}&admit=${admit}&reason=${reason}`;\n\n  return coFetchJSON.put(url);\n}\n\nexport const k8sPatch = (kind, resource, data, opts = {}) => {\n  const patches = _.compact(data);\n\n  if (_.isEmpty(patches)) {\n    return Promise.resolve(resource);\n  }\n\n  return coFetchJSON.patch(\n    resourceURL(\n      kind,\n      Object.assign(\n        {\n          ns: resource.metadata.namespace,\n          name: resource.metadata.name,\n        },\n        opts,\n      ),\n    ),\n    patches,\n  );\n};\n\nexport const k8sPatchByName = (kind, name, namespace, data, opts = {}) => k8sPatch(kind, { metadata: { name, namespace } }, data, opts);\n\nexport const k8sKill = (kind, resource, opts = {}, json = null) => coFetchJSON.delete(resourceURL(kind, Object.assign({ ns: resource.metadata.namespace, name: resource.metadata.name }, opts)), opts, json);\n\nexport const k8sKillByName = (kind, name, namespace, opts = {}) => k8sKill(kind, { metadata: { name, namespace } }, opts);\n\nexport const k8sList = (kind, params = {}, raw = false, options = {}) => {\n  const query = _.map(_.omit(params, 'ns'), (v, k) => {\n    if (k === 'labelSelector') {\n      v = selectorToString(v);\n    }\n    return `${encodeURIComponent(k)}=${encodeURIComponent(v)}`;\n  }).join('&');\n\n  if(isCluster(kind) || isClusterClaim(kind)) {\n    const listClusterURL = resourceClusterURL(kind);\n    return coFetchJSON(`${listClusterURL}`, 'GET').then((result) => raw ? result: result.items);\n  }\n\n  let listURL = resourceURL(kind, { ns: params.ns });\n  if(localStorage.getItem('bridge/last-perspective') === 'hc') {\n    return coFetchJSON(`${listURL}?${query}`, 'GET', options).then(result => (raw ? result : result.items));\n  }\n\n  if (kind.kind === 'Namespace') {\n    listURL = `${document.location.origin}/api/hypercloud/namespace?userId=${getId()}${getUserGroup()}`;\n    return coFetchJSON(`${listURL}`, 'GET', options).then(result => (raw ? result : result.items));\n  } else if (kind.kind === 'NamespaceClaim') {\n    listURL = `${document.location.origin}/api/hypercloud/namespaceClaim?userId=${getId()}${getUserGroup()}`;\n    return coFetchJSON(`${listURL}`, 'GET', options).then(result => (raw ? result : result.items));\n  } else {\n  return coFetchJSON(`${listURL}?${query}`, 'GET', options).then(result => (raw ? result : result.items));\n  }\n};\n\nexport const k8sListPartialMetadata = (kind, params = {}, raw = false) => {\n  return k8sList(kind, params, raw, {\n    headers: {\n      Accept: 'application/json;as=PartialObjectMetadataList;v=v1beta1;g=meta.k8s.io,application/json',\n    },\n  });\n};\n\nexport const k8sWatch = (kind, query = {}, wsOptions = {}) => {\n  const queryParams = { watch: true };\n  const opts = { queryParams };\n  wsOptions = Object.assign(\n    {\n      host: 'auto',\n      reconnect: true,\n      jsonParse: true,\n      bufferFlushInterval: 500,\n      bufferMax: 1000,\n    },\n    wsOptions,\n  );\n\n  const labelSelector = query.labelSelector || kind.labelSelector;\n  if (labelSelector) {\n    const encodedSelector = encodeURIComponent(selectorToString(labelSelector));\n    if (encodedSelector) {\n      queryParams.labelSelector = encodedSelector;\n    }\n  }\n\n  if (query.fieldSelector) {\n    queryParams.fieldSelector = encodeURIComponent(query.fieldSelector);\n  }\n\n  if (query.ns) {\n    opts.ns = query.ns;\n  }\n\n  if (query.resourceVersion) {\n    queryParams.resourceVersion = encodeURIComponent(query.resourceVersion);\n  }\n\n  const path = resourceURL(kind, opts);\n  wsOptions.path = path;\n  return new WSFactory(path, wsOptions);\n};\n"]}]}