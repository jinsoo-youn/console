{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/topology/TopologyVmDetailsPanel.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/topology/TopologyVmDetailsPanel.tsx","mtime":1616735742430},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport { Firehose, LoadingBox, useAccessReview, asAccessReview, } from '@console/internal/components/utils';\nimport { observer } from '@console/topology';\nimport { TemplateModel } from '@console/internal/models';\nimport { VirtualMachineModel } from '../models';\nimport { TEMPLATE_TYPE_LABEL, TEMPLATE_TYPE_VM } from '../constants/vm';\nimport { VMDetailsList, VMResourceSummary } from '../components/vms/vm-resource';\nconst LoadedTopologyVmDetailsPanel = observer(({ loaded, vmNode, templates }) => {\n    const vmData = vmNode.getData();\n    const { pods, obj } = vmData.resources;\n    const vmObj = obj;\n    const { vmi, vmStatusBundle } = vmData.data;\n    const canUpdate = useAccessReview(asAccessReview(VirtualMachineModel, vmObj || {}, 'patch')) && !!vmObj;\n    if (!loaded) {\n        return React.createElement(LoadingBox, null);\n    }\n    return (React.createElement(Grid, { gutter: \"md\" },\n        React.createElement(GridItem, { span: 6 },\n            React.createElement(VMResourceSummary, { canUpdateVM: canUpdate, vm: vmObj, vmi: vmi, templates: templates.data, kindObj: VirtualMachineModel })),\n        React.createElement(GridItem, { span: 6 },\n            React.createElement(VMDetailsList, { canUpdateVM: canUpdate, vm: vmObj, vmi: vmi, pods: pods, kindObj: VirtualMachineModel, vmStatusBundle: vmStatusBundle }))));\n});\nexport const TopologyVmDetailsPanel = observer(({ vmNode }) => {\n    const vmData = vmNode.getData();\n    const vmObj = vmData.resources.obj;\n    const { namespace } = vmObj.metadata;\n    const resources = [\n        {\n            kind: TemplateModel.kind,\n            namespace,\n            isList: true,\n            prop: 'templates',\n            matchLabels: { [TEMPLATE_TYPE_LABEL]: TEMPLATE_TYPE_VM },\n        },\n    ];\n    return (React.createElement(\"div\", { className: \"overview__sidebar-pane-body resource-overview__body\" },\n        React.createElement(Firehose, { resources: resources },\n            React.createElement(LoadedTopologyVmDetailsPanel, { vmNode: vmNode }))));\n});\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/topology/TopologyVmDetailsPanel.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/topology/TopologyVmDetailsPanel.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,MAAM,wBAAwB,CAAC;AACxD,OAAO,EACL,QAAQ,EAER,UAAU,EACV,eAAe,EACf,cAAc,GACf,MAAM,oCAAoC,CAAC;AAC5C,OAAO,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAE7C,OAAO,EAAE,aAAa,EAAE,MAAM,0BAA0B,CAAC;AACzD,OAAO,EAAE,mBAAmB,EAAE,MAAM,WAAW,CAAC;AAChD,OAAO,EAAE,mBAAmB,EAAE,gBAAgB,EAAE,MAAM,iBAAiB,CAAC;AACxE,OAAO,EAAE,aAAa,EAAE,iBAAiB,EAAE,MAAM,+BAA+B,CAAC;AAajF,MAAM,4BAA4B,GAAgD,QAAQ,CACxF,CAAC,EAAE,MAAM,EAAE,MAAM,EAAE,SAAS,EAAE,EAAE,EAAE;IAChC,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;IAChC,MAAM,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,MAAM,CAAC,SAAS,CAAC;IACvC,MAAM,KAAK,GAAG,GAAa,CAAC;IAC5B,MAAM,EAAE,GAAG,EAAE,cAAc,EAAE,GAAG,MAAM,CAAC,IAAI,CAAC;IAC5C,MAAM,SAAS,GACb,eAAe,CAAC,cAAc,CAAC,mBAAmB,EAAE,KAAK,IAAI,EAAE,EAAE,OAAO,CAAC,CAAC,IAAI,CAAC,CAAC,KAAK,CAAC;IAExF,IAAI,CAAC,MAAM,EAAE;QACX,OAAO,oBAAC,UAAU,OAAG,CAAC;KACvB;IACD,OAAO,CACL,oBAAC,IAAI,IAAC,MAAM,EAAC,IAAI;QACf,oBAAC,QAAQ,IAAC,IAAI,EAAE,CAAC;YACf,oBAAC,iBAAiB,IAChB,WAAW,EAAE,SAAS,EACtB,EAAE,EAAE,KAAK,EACT,GAAG,EAAE,GAAG,EACR,SAAS,EAAE,SAAS,CAAC,IAAI,EACzB,OAAO,EAAE,mBAAmB,GAC5B,CACO;QACX,oBAAC,QAAQ,IAAC,IAAI,EAAE,CAAC;YACf,oBAAC,aAAa,IACZ,WAAW,EAAE,SAAS,EACtB,EAAE,EAAE,KAAK,EACT,GAAG,EAAE,GAAG,EACR,IAAI,EAAE,IAAI,EACV,OAAO,EAAE,mBAAmB,EAC5B,cAAc,EAAE,cAAc,GAC9B,CACO,CACN,CACR,CAAC;AACJ,CAAC,CACF,CAAC;AAEF,MAAM,CAAC,MAAM,sBAAsB,GAA0C,QAAQ,CACnF,CAAC,EAAE,MAAM,EAA+B,EAAE,EAAE;IAC1C,MAAM,MAAM,GAAG,MAAM,CAAC,OAAO,EAAE,CAAC;IAChC,MAAM,KAAK,GAAG,MAAM,CAAC,SAAS,CAAC,GAAG,CAAC;IACnC,MAAM,EAAE,SAAS,EAAE,GAAG,KAAK,CAAC,QAAQ,CAAC;IAErC,MAAM,SAAS,GAAG;QAChB;YACE,IAAI,EAAE,aAAa,CAAC,IAAI;YACxB,SAAS;YACT,MAAM,EAAE,IAAI;YACZ,IAAI,EAAE,WAAW;YACjB,WAAW,EAAE,EAAE,CAAC,mBAAmB,CAAC,EAAE,gBAAgB,EAAE;SACzD;KACF,CAAC;IACF,OAAO,CACL,6BAAK,SAAS,EAAC,qDAAqD;QAClE,oBAAC,QAAQ,IAAC,SAAS,EAAE,SAAS;YAC5B,oBAAC,4BAA4B,IAAC,MAAM,EAAE,MAAM,GAAI,CACvC,CACP,CACP,CAAC;AACJ,CAAC,CACF,CAAC","sourcesContent":["import * as React from 'react';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport {\n  Firehose,\n  FirehoseResult,\n  LoadingBox,\n  useAccessReview,\n  asAccessReview,\n} from '@console/internal/components/utils';\nimport { observer } from '@console/topology';\nimport { TemplateKind } from '@console/internal/module/k8s';\nimport { TemplateModel } from '@console/internal/models';\nimport { VirtualMachineModel } from '../models';\nimport { TEMPLATE_TYPE_LABEL, TEMPLATE_TYPE_VM } from '../constants/vm';\nimport { VMDetailsList, VMResourceSummary } from '../components/vms/vm-resource';\nimport { VMNode } from './types';\nimport { VMKind } from '../types/vm';\n\ntype TopologyVmDetailsPanelProps = {\n  vmNode: VMNode;\n};\n\ntype LoadedTopologyVmDetailsPanelProps = TopologyVmDetailsPanelProps & {\n  loaded?: boolean;\n  templates?: FirehoseResult<TemplateKind[]>;\n};\n\nconst LoadedTopologyVmDetailsPanel: React.FC<LoadedTopologyVmDetailsPanelProps> = observer(\n  ({ loaded, vmNode, templates }) => {\n    const vmData = vmNode.getData();\n    const { pods, obj } = vmData.resources;\n    const vmObj = obj as VMKind;\n    const { vmi, vmStatusBundle } = vmData.data;\n    const canUpdate =\n      useAccessReview(asAccessReview(VirtualMachineModel, vmObj || {}, 'patch')) && !!vmObj;\n\n    if (!loaded) {\n      return <LoadingBox />;\n    }\n    return (\n      <Grid gutter=\"md\">\n        <GridItem span={6}>\n          <VMResourceSummary\n            canUpdateVM={canUpdate}\n            vm={vmObj}\n            vmi={vmi}\n            templates={templates.data}\n            kindObj={VirtualMachineModel}\n          />\n        </GridItem>\n        <GridItem span={6}>\n          <VMDetailsList\n            canUpdateVM={canUpdate}\n            vm={vmObj}\n            vmi={vmi}\n            pods={pods}\n            kindObj={VirtualMachineModel}\n            vmStatusBundle={vmStatusBundle}\n          />\n        </GridItem>\n      </Grid>\n    );\n  },\n);\n\nexport const TopologyVmDetailsPanel: React.FC<TopologyVmDetailsPanelProps> = observer(\n  ({ vmNode }: TopologyVmDetailsPanelProps) => {\n    const vmData = vmNode.getData();\n    const vmObj = vmData.resources.obj;\n    const { namespace } = vmObj.metadata;\n\n    const resources = [\n      {\n        kind: TemplateModel.kind,\n        namespace,\n        isList: true,\n        prop: 'templates',\n        matchLabels: { [TEMPLATE_TYPE_LABEL]: TEMPLATE_TYPE_VM },\n      },\n    ];\n    return (\n      <div className=\"overview__sidebar-pane-body resource-overview__body\">\n        <Firehose resources={resources}>\n          <LoadedTopologyVmDetailsPanel vmNode={vmNode} />\n        </Firehose>\n      </div>\n    );\n  },\n);\n"]}]}