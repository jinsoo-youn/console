{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/layouts/ForceLayout.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/layouts/ForceLayout.ts","mtime":1616735742460},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { getGroupPadding } from '../utils/element-utils';\nimport { BaseLayout } from './BaseLayout';\nexport default class ForceLayout extends BaseLayout {\n    constructor(graph, options) {\n        super(graph, Object.assign(Object.assign({}, options), { layoutOnDrag: true }));\n        this.getLinkDistance = (e) => {\n            let distance = this.options.linkDistance + e.source.radius + e.target.radius;\n            if (!e.isFalse && e.source.element.getParent() !== e.target.element.getParent()) {\n                // find the group padding\n                distance += getGroupPadding(e.source.element.getParent());\n                distance += getGroupPadding(e.target.element.getParent());\n            }\n            return distance;\n        };\n    }\n    startLayout(graph) {\n        const { width, height } = graph.getBounds();\n        const cx = width / 2;\n        const cy = height / 2;\n        this.forceSimulation.forceCenter(cx, cy);\n        this.forceSimulation.alpha(1);\n        this.forceSimulation.useForceSimulation(this.nodes, this.edges, this.getLinkDistance);\n        this.forceSimulation.restart();\n    }\n    updateLayout() {\n        this.forceSimulation.useForceSimulation(this.nodes, this.edges, this.getFixedNodeDistance);\n        this.forceSimulation.alpha(0.2);\n        this.forceSimulation.restart();\n    }\n}\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/layouts/ForceLayout.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/layouts/ForceLayout.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,eAAe,EAAE,MAAM,wBAAwB,CAAC;AACzD,OAAO,EAAE,UAAU,EAA6B,MAAM,cAAc,CAAC;AAErE,MAAM,CAAC,OAAO,OAAO,WAAY,SAAQ,UAAU;IACjD,YAAY,KAAY,EAAE,OAAgC;QACxD,KAAK,CAAC,KAAK,kCACN,OAAO,KACV,YAAY,EAAE,IAAI,IAClB,CAAC;QAGK,oBAAe,GAAG,CAAC,CAAa,EAAE,EAAE;YAC5C,IAAI,QAAQ,GAAG,IAAI,CAAC,OAAO,CAAC,YAAY,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC;YAC7E,IAAI,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,EAAE,EAAE;gBAC/E,yBAAyB;gBACzB,QAAQ,IAAI,eAAe,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,CAAC;gBAC1D,QAAQ,IAAI,eAAe,CAAC,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,CAAC;aAC3D;YAED,OAAO,QAAQ,CAAC;QAClB,CAAC,CAAC;IAXF,CAAC;IAaS,WAAW,CAAC,KAAY;QAChC,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,KAAK,CAAC,SAAS,EAAE,CAAC;QAC5C,MAAM,EAAE,GAAG,KAAK,GAAG,CAAC,CAAC;QACrB,MAAM,EAAE,GAAG,MAAM,GAAG,CAAC,CAAC;QACtB,IAAI,CAAC,eAAe,CAAC,WAAW,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;QACzC,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;QAC9B,IAAI,CAAC,eAAe,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,eAAe,CAAC,CAAC;QACtF,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;IACjC,CAAC;IAES,YAAY;QACpB,IAAI,CAAC,eAAe,CAAC,kBAAkB,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,oBAAoB,CAAC,CAAC;QAC3F,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAChC,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,CAAC;IACjC,CAAC;CACF","sourcesContent":["import { Graph, Layout } from '../types';\nimport { getGroupPadding } from '../utils/element-utils';\nimport { BaseLayout, LayoutLink, LayoutOptions } from './BaseLayout';\n\nexport default class ForceLayout extends BaseLayout implements Layout {\n  constructor(graph: Graph, options?: Partial<LayoutOptions>) {\n    super(graph, {\n      ...options,\n      layoutOnDrag: true,\n    });\n  }\n\n  protected getLinkDistance = (e: LayoutLink) => {\n    let distance = this.options.linkDistance + e.source.radius + e.target.radius;\n    if (!e.isFalse && e.source.element.getParent() !== e.target.element.getParent()) {\n      // find the group padding\n      distance += getGroupPadding(e.source.element.getParent());\n      distance += getGroupPadding(e.target.element.getParent());\n    }\n\n    return distance;\n  };\n\n  protected startLayout(graph: Graph): void {\n    const { width, height } = graph.getBounds();\n    const cx = width / 2;\n    const cy = height / 2;\n    this.forceSimulation.forceCenter(cx, cy);\n    this.forceSimulation.alpha(1);\n    this.forceSimulation.useForceSimulation(this.nodes, this.edges, this.getLinkDistance);\n    this.forceSimulation.restart();\n  }\n\n  protected updateLayout(): void {\n    this.forceSimulation.useForceSimulation(this.nodes, this.edges, this.getFixedNodeDistance);\n    this.forceSimulation.alpha(0.2);\n    this.forceSimulation.restart();\n  }\n}\n"]}]}