{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/modals/configure-ns-pull-secret-modal.jsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/modals/configure-ns-pull-secret-modal.jsx","mtime":1616735742470},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Base64 } from 'js-base64';\nimport { Alert } from '@patternfly/react-core';\nimport { CONST } from '@console/shared';\nimport { k8sPatch, k8sPatchByName, k8sCreate } from '../../module/k8s';\nimport { SecretModel, ServiceAccountModel } from '../../models';\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter } from '../factory/modal';\nimport { PromiseComponent, ResourceIcon } from '../utils';\nconst parseExisitingPullSecret = (pullSecret) => {\n    let invalidData = false;\n    const invalidJson = false;\n    let username, email, password, address;\n    try {\n        const existingData = pullSecret && Base64.decode(pullSecret.data[CONST.PULL_SECRET_DATA]);\n        if (existingData) {\n            const data = JSON.parse(existingData);\n            if (!data || !data.auths) {\n                throw 'Invalid data';\n            }\n            const keys = Object.keys(data.auths);\n            if (keys.length > 1) {\n                // multiple auths are stored in this one secret.\n                // we'll display the first secret, but upon saving, the\n                // others will get erased\n                invalidData = true;\n            }\n            else if (keys.length < 1) {\n                throw 'Invalid data';\n            }\n            address = keys[0];\n            email = data.auths[address].email;\n            const auth = Base64.decode(data.auths[address].auth);\n            const authParts = auth.split(':');\n            if (authParts.length === 1) {\n                username = '';\n                password = authParts[0];\n            }\n            else if (authParts.length === 2) {\n                username = authParts[0];\n                password = authParts[1];\n            }\n            else {\n                throw 'Invalid data';\n            }\n        }\n    }\n    catch (error) {\n        invalidData = true;\n    }\n    return { username, password, email, address, invalidData, invalidJson };\n};\nconst generateSecretData = (formData) => {\n    const config = {\n        auths: {},\n    };\n    const authParts = [];\n    if (_.trim(formData.username).length >= 1) {\n        authParts.push(formData.username);\n    }\n    authParts.push(formData.password);\n    config.auths[formData.address] = {\n        auth: Base64.encode(authParts.join(':')),\n        email: formData.email,\n    };\n    return Base64.encode(JSON.stringify(config));\n};\nclass ConfigureNamespacePullSecret extends PromiseComponent {\n    constructor(props) {\n        super(props);\n        this._submit = this._submit.bind(this);\n        this._cancel = this.props.cancel.bind(this);\n        this._onMethodChange = this._onMethodChange.bind(this);\n        this._onFileChange = this._onFileChange.bind(this);\n        this.state = Object.assign(this.state, {\n            method: 'form',\n            fileData: null,\n            invalidJson: false,\n        });\n    }\n    _onMethodChange(event) {\n        this.setState({ method: event.target.value });\n    }\n    _onFileChange(event) {\n        this.setState({ invalidJson: false, fileData: null });\n        const file = event.target.files[0];\n        if (!file || file.type !== 'application/json') {\n            this.setState({ invalidJson: true });\n            return;\n        }\n        const reader = new FileReader();\n        reader.onload = (e) => {\n            const input = e.target.result;\n            try {\n                JSON.parse(input);\n            }\n            catch (error) {\n                this.setState({ invalidJson: true });\n                return;\n            }\n            this.setState({ fileData: input });\n        };\n        reader.readAsText(file, 'UTF-8');\n    }\n    _submit(event) {\n        event.preventDefault();\n        const { namespace, pullSecret } = this.props;\n        let promise;\n        let secretData;\n        if (this.state.method === 'upload') {\n            secretData = Base64.encode(this.state.fileData);\n        }\n        else {\n            const elements = event.target.elements;\n            const formData = {\n                username: elements['namespace-pull-secret-username'].value,\n                password: elements['namespace-pull-secret-password'].value,\n                email: elements['namespace-pull-secret-email'].value || '',\n                address: elements['namespace-pull-secret-address'].value,\n            };\n            secretData = generateSecretData(formData);\n        }\n        if (pullSecret) {\n            const patch = [\n                {\n                    op: 'replace',\n                    path: `/data/${CONST.PULL_SECRET_DATA}`,\n                    value: secretData,\n                },\n            ];\n            promise = k8sPatch(SecretModel, pullSecret, patch);\n        }\n        else {\n            const data = {};\n            const pullSecretName = event.target.elements['namespace-pull-secret-name'].value;\n            data[CONST.PULL_SECRET_DATA] = secretData;\n            const secret = {\n                metadata: {\n                    name: pullSecretName,\n                    namespace: namespace.metadata.name,\n                },\n                data,\n                type: CONST.PULL_SECRET_TYPE,\n            };\n            const defaultServiceAccountPatch = [\n                {\n                    op: 'add',\n                    path: '/imagePullSecrets/-',\n                    value: { name: pullSecretName },\n                },\n            ];\n            promise = k8sCreate(SecretModel, secret).then(() => k8sPatchByName(ServiceAccountModel, 'default', namespace.metadata.name, defaultServiceAccountPatch));\n        }\n        this.handlePromise(promise).then(this.props.close);\n    }\n    render() {\n        const { namespace, pullSecret } = this.props;\n        const existingData = parseExisitingPullSecret(pullSecret);\n        return (React.createElement(\"form\", { onSubmit: this._submit, name: \"form\", className: \"modal-content\" },\n            React.createElement(ModalTitle, null, \"Default Pull Secret\"),\n            React.createElement(ModalBody, null,\n                React.createElement(\"p\", null, \"Specify default credentials to be used to authenticate and download containers within this namespace. These credentials will be the default unless a pod references a specific pull secret.\"),\n                existingData.invalidData && (React.createElement(Alert, { isInline: true, className: \"co-alert\", variant: \"danger\", title: \"Overwriting default pull secret\" }, \"A default pull secret exists, but can't be parsed. Saving this will overwrite it.\")),\n                React.createElement(\"div\", { className: \"row co-m-form-row\" },\n                    React.createElement(\"div\", { className: \"col-xs-3\" },\n                        React.createElement(\"label\", null, \"Namespace\")),\n                    React.createElement(\"div\", { className: \"col-xs-9\" },\n                        React.createElement(ResourceIcon, { kind: \"Namespace\" }),\n                        \" \\u00A0\",\n                        namespace.metadata.name)),\n                React.createElement(\"div\", { className: \"row co-m-form-row\" },\n                    React.createElement(\"div\", { className: \"col-xs-3\" },\n                        React.createElement(\"label\", { htmlFor: \"namespace-pull-secret-name\" }, \"Secret Name\")),\n                    pullSecret ? (React.createElement(\"div\", { className: \"col-xs-9\" },\n                        React.createElement(ResourceIcon, { kind: \"Secret\" }),\n                        \"\\u00A0\",\n                        _.get(pullSecret, 'metadata.name'))) : (React.createElement(\"div\", { className: \"col-xs-9\" },\n                        React.createElement(\"input\", { type: \"text\", className: \"pf-c-form-control\", id: \"namespace-pull-secret-name\", \"aria-describedby\": \"namespace-pull-secret-name-help\", required: true }),\n                        React.createElement(\"p\", { className: \"help-block text-muted\", id: \"namespace-pull-secret-name-help\" }, \"Friendly name to help you manage this in the future\")))),\n                React.createElement(\"div\", { className: \"row co-m-form-row form-group\" },\n                    React.createElement(\"div\", { className: \"col-xs-3\" },\n                        React.createElement(\"label\", null, \"Method\")),\n                    React.createElement(\"div\", { className: \"col-xs-9\" },\n                        React.createElement(\"div\", { className: \"radio\" },\n                            React.createElement(\"label\", { className: \"control-label\" },\n                                React.createElement(\"input\", { type: \"radio\", id: \"namespace-pull-secret-method--form\", checked: this.state.method === 'form', onChange: this._onMethodChange, value: \"form\" }),\n                                \"Enter Username/Password\")),\n                        React.createElement(\"div\", { className: \"radio\" },\n                            React.createElement(\"label\", { className: \"control-label\" },\n                                React.createElement(\"input\", { type: \"radio\", checked: this.state.method === 'upload', onChange: this._onMethodChange, id: \"namespace-pull-secret-method--upload\", value: \"upload\" }),\n                                \"Upload Docker config.json\")))),\n                this.state.method === 'form' && (React.createElement(\"div\", null,\n                    React.createElement(\"div\", { className: \"row co-m-form-row\" },\n                        React.createElement(\"div\", { className: \"col-xs-3\" },\n                            React.createElement(\"label\", { htmlFor: \"namespace-pull-secret-address\" }, \"Registry Address\")),\n                        React.createElement(\"div\", { className: \"col-xs-9\" },\n                            React.createElement(\"input\", { type: \"text\", className: \"pf-c-form-control\", id: \"namespace-pull-secret-address\", defaultValue: existingData.address, placeholder: \"quay.io\", required: true }))),\n                    React.createElement(\"div\", { className: \"row co-m-form-row\" },\n                        React.createElement(\"div\", { className: \"col-xs-3\" },\n                            React.createElement(\"label\", { htmlFor: \"namespace-pull-secret-email\" }, \"Email Address\")),\n                        React.createElement(\"div\", { className: \"col-xs-9\" },\n                            React.createElement(\"input\", { type: \"email\", className: \"pf-c-form-control\", defaultValue: existingData.email, id: \"namespace-pull-secret-email\", \"aria-describedby\": \"namespace-pull-secret-email-help\" }),\n                            React.createElement(\"p\", { className: \"help-block text-muted\", id: \"namespace-pull-secret-email-help\" }, \"Optional, depending on registry provider\"))),\n                    React.createElement(\"div\", { className: \"row co-m-form-row\" },\n                        React.createElement(\"div\", { className: \"col-xs-3\" },\n                            React.createElement(\"label\", { htmlFor: \"namespace-pull-secret-username\" }, \"Username\")),\n                        React.createElement(\"div\", { className: \"col-xs-9\" },\n                            React.createElement(\"input\", { type: \"text\", defaultValue: existingData.username, className: \"pf-c-form-control\", id: \"namespace-pull-secret-username\", required: true }))),\n                    React.createElement(\"div\", { className: \"row co-m-form-row\" },\n                        React.createElement(\"div\", { className: \"col-xs-3\" },\n                            React.createElement(\"label\", { htmlFor: \"namespace-pull-secret-password\" }, \"Password\")),\n                        React.createElement(\"div\", { className: \"col-xs-9\" },\n                            React.createElement(\"input\", { type: \"password\", defaultValue: existingData.password, className: \"pf-c-form-control\", id: \"namespace-pull-secret-password\", required: true }))))),\n                this.state.method === 'upload' && (React.createElement(\"div\", null,\n                    React.createElement(\"div\", { className: \"row co-m-form-row\" },\n                        React.createElement(\"div\", { className: \"col-xs-3\" },\n                            React.createElement(\"label\", { htmlFor: \"namespace-pull-secret-file\" }, \"File Upload\")),\n                        React.createElement(\"div\", { className: \"col-xs-9\" },\n                            React.createElement(\"input\", { type: \"file\", id: \"namespace-pull-secret-file\", onChange: this._onFileChange, \"aria-describedby\": \"namespace-pull-secret-file-help\" }),\n                            React.createElement(\"p\", { className: \"help-block etext-muted\", id: \"namespace-pull-secret-file-help\" }, \"Properly configured Docker config file in JSON format. Will be base64 encoded after upload.\"))),\n                    this.state.invalidJson ||\n                        (existingData.invalidJson && (React.createElement(\"div\", { className: \"row co-m-form-row\" },\n                            React.createElement(\"div\", { className: \"col-xs-9 col-sm-offset-3\" },\n                                React.createElement(Alert, { isInline: true, className: \"co-alert\", variant: \"danger\", title: \"Invalid JSON\" }, \"The uploaded file is not properly-formatted JSON.\"))))),\n                    this.state.fileData && (React.createElement(\"div\", { className: \"row co-m-form-row\" },\n                        React.createElement(\"div\", { className: \"col-xs-9 col-sm-offset-3\" },\n                            React.createElement(\"pre\", { className: \"co-pre-wrap\" }, this.state.fileData))))))),\n            React.createElement(ModalSubmitFooter, { errorMessage: this.state.errorMessage, inProgress: this.state.inProgress, submitText: \"Save\", cancel: this._cancel })));\n    }\n}\nConfigureNamespacePullSecret.propTypes = {\n    namespace: PropTypes.object.isRequired,\n    pullSecret: PropTypes.object,\n};\nexport const configureNamespacePullSecretModal = createModalLauncher(ConfigureNamespacePullSecret);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/modals/configure-ns-pull-secret-modal.jsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/modals/configure-ns-pull-secret-modal.jsx"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Base64 } from 'js-base64';\nimport { Alert } from '@patternfly/react-core';\n\nimport { CONST } from '@console/shared';\nimport { k8sPatch, k8sPatchByName, k8sCreate } from '../../module/k8s';\nimport { SecretModel, ServiceAccountModel } from '../../models';\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter } from '../factory/modal';\nimport { PromiseComponent, ResourceIcon } from '../utils';\n\nconst parseExisitingPullSecret = (pullSecret) => {\n  let invalidData = false;\n  const invalidJson = false;\n  let username, email, password, address;\n\n  try {\n    const existingData = pullSecret && Base64.decode(pullSecret.data[CONST.PULL_SECRET_DATA]);\n\n    if (existingData) {\n      const data = JSON.parse(existingData);\n\n      if (!data || !data.auths) {\n        throw 'Invalid data';\n      }\n\n      const keys = Object.keys(data.auths);\n\n      if (keys.length > 1) {\n        // multiple auths are stored in this one secret.\n        // we'll display the first secret, but upon saving, the\n        // others will get erased\n        invalidData = true;\n      } else if (keys.length < 1) {\n        throw 'Invalid data';\n      }\n      address = keys[0];\n      email = data.auths[address].email;\n      const auth = Base64.decode(data.auths[address].auth);\n      const authParts = auth.split(':');\n\n      if (authParts.length === 1) {\n        username = '';\n        password = authParts[0];\n      } else if (authParts.length === 2) {\n        username = authParts[0];\n        password = authParts[1];\n      } else {\n        throw 'Invalid data';\n      }\n    }\n  } catch (error) {\n    invalidData = true;\n  }\n\n  return { username, password, email, address, invalidData, invalidJson };\n};\n\nconst generateSecretData = (formData) => {\n  const config = {\n    auths: {},\n  };\n\n  const authParts = [];\n\n  if (_.trim(formData.username).length >= 1) {\n    authParts.push(formData.username);\n  }\n  authParts.push(formData.password);\n\n  config.auths[formData.address] = {\n    auth: Base64.encode(authParts.join(':')),\n    email: formData.email,\n  };\n\n  return Base64.encode(JSON.stringify(config));\n};\n\nclass ConfigureNamespacePullSecret extends PromiseComponent {\n  constructor(props) {\n    super(props);\n\n    this._submit = this._submit.bind(this);\n    this._cancel = this.props.cancel.bind(this);\n\n    this._onMethodChange = this._onMethodChange.bind(this);\n    this._onFileChange = this._onFileChange.bind(this);\n\n    this.state = Object.assign(this.state, {\n      method: 'form',\n      fileData: null,\n      invalidJson: false,\n    });\n  }\n\n  _onMethodChange(event) {\n    this.setState({ method: event.target.value });\n  }\n\n  _onFileChange(event) {\n    this.setState({ invalidJson: false, fileData: null });\n\n    const file = event.target.files[0];\n    if (!file || file.type !== 'application/json') {\n      this.setState({ invalidJson: true });\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const input = e.target.result;\n      try {\n        JSON.parse(input);\n      } catch (error) {\n        this.setState({ invalidJson: true });\n        return;\n      }\n      this.setState({ fileData: input });\n    };\n    reader.readAsText(file, 'UTF-8');\n  }\n\n  _submit(event) {\n    event.preventDefault();\n    const { namespace, pullSecret } = this.props;\n\n    let promise;\n    let secretData;\n\n    if (this.state.method === 'upload') {\n      secretData = Base64.encode(this.state.fileData);\n    } else {\n      const elements = event.target.elements;\n      const formData = {\n        username: elements['namespace-pull-secret-username'].value,\n        password: elements['namespace-pull-secret-password'].value,\n        email: elements['namespace-pull-secret-email'].value || '',\n        address: elements['namespace-pull-secret-address'].value,\n      };\n      secretData = generateSecretData(formData);\n    }\n\n    if (pullSecret) {\n      const patch = [\n        {\n          op: 'replace',\n          path: `/data/${CONST.PULL_SECRET_DATA}`,\n          value: secretData,\n        },\n      ];\n      promise = k8sPatch(SecretModel, pullSecret, patch);\n    } else {\n      const data = {};\n      const pullSecretName = event.target.elements['namespace-pull-secret-name'].value;\n      data[CONST.PULL_SECRET_DATA] = secretData;\n\n      const secret = {\n        metadata: {\n          name: pullSecretName,\n          namespace: namespace.metadata.name,\n        },\n        data,\n        type: CONST.PULL_SECRET_TYPE,\n      };\n      const defaultServiceAccountPatch = [\n        {\n          op: 'add',\n          path: '/imagePullSecrets/-',\n          value: { name: pullSecretName },\n        },\n      ];\n      promise = k8sCreate(SecretModel, secret).then(() =>\n        k8sPatchByName(\n          ServiceAccountModel,\n          'default',\n          namespace.metadata.name,\n          defaultServiceAccountPatch,\n        ),\n      );\n    }\n\n    this.handlePromise(promise).then(this.props.close);\n  }\n\n  render() {\n    const { namespace, pullSecret } = this.props;\n\n    const existingData = parseExisitingPullSecret(pullSecret);\n\n    return (\n      <form onSubmit={this._submit} name=\"form\" className=\"modal-content\">\n        <ModalTitle>Default Pull Secret</ModalTitle>\n        <ModalBody>\n          <p>\n            Specify default credentials to be used to authenticate and download containers within\n            this namespace. These credentials will be the default unless a pod references a specific\n            pull secret.\n          </p>\n\n          {existingData.invalidData && (\n            <Alert\n              isInline\n              className=\"co-alert\"\n              variant=\"danger\"\n              title=\"Overwriting default pull secret\"\n            >\n              A default pull secret exists, but can't be parsed. Saving this will overwrite it.\n            </Alert>\n          )}\n\n          <div className=\"row co-m-form-row\">\n            <div className=\"col-xs-3\">\n              <label>Namespace</label>\n            </div>\n            <div className=\"col-xs-9\">\n              <ResourceIcon kind=\"Namespace\" /> &nbsp;{namespace.metadata.name}\n            </div>\n          </div>\n\n          <div className=\"row co-m-form-row\">\n            <div className=\"col-xs-3\">\n              <label htmlFor=\"namespace-pull-secret-name\">Secret Name</label>\n            </div>\n            {pullSecret ? (\n              <div className=\"col-xs-9\">\n                <ResourceIcon kind=\"Secret\" />\n                &nbsp;{_.get(pullSecret, 'metadata.name')}\n              </div>\n            ) : (\n              <div className=\"col-xs-9\">\n                <input\n                  type=\"text\"\n                  className=\"pf-c-form-control\"\n                  id=\"namespace-pull-secret-name\"\n                  aria-describedby=\"namespace-pull-secret-name-help\"\n                  required\n                />\n                <p className=\"help-block text-muted\" id=\"namespace-pull-secret-name-help\">\n                  Friendly name to help you manage this in the future\n                </p>\n              </div>\n            )}\n          </div>\n\n          <div className=\"row co-m-form-row form-group\">\n            <div className=\"col-xs-3\">\n              <label>Method</label>\n            </div>\n            <div className=\"col-xs-9\">\n              <div className=\"radio\">\n                <label className=\"control-label\">\n                  <input\n                    type=\"radio\"\n                    id=\"namespace-pull-secret-method--form\"\n                    checked={this.state.method === 'form'}\n                    onChange={this._onMethodChange}\n                    value=\"form\"\n                  />\n                  Enter Username/Password\n                </label>\n              </div>\n              <div className=\"radio\">\n                <label className=\"control-label\">\n                  <input\n                    type=\"radio\"\n                    checked={this.state.method === 'upload'}\n                    onChange={this._onMethodChange}\n                    id=\"namespace-pull-secret-method--upload\"\n                    value=\"upload\"\n                  />\n                  Upload Docker config.json\n                </label>\n              </div>\n            </div>\n          </div>\n\n          {this.state.method === 'form' && (\n            <div>\n              <div className=\"row co-m-form-row\">\n                <div className=\"col-xs-3\">\n                  <label htmlFor=\"namespace-pull-secret-address\">Registry Address</label>\n                </div>\n                <div className=\"col-xs-9\">\n                  <input\n                    type=\"text\"\n                    className=\"pf-c-form-control\"\n                    id=\"namespace-pull-secret-address\"\n                    defaultValue={existingData.address}\n                    placeholder=\"quay.io\"\n                    required\n                  />\n                </div>\n              </div>\n              <div className=\"row co-m-form-row\">\n                <div className=\"col-xs-3\">\n                  <label htmlFor=\"namespace-pull-secret-email\">Email Address</label>\n                </div>\n                <div className=\"col-xs-9\">\n                  <input\n                    type=\"email\"\n                    className=\"pf-c-form-control\"\n                    defaultValue={existingData.email}\n                    id=\"namespace-pull-secret-email\"\n                    aria-describedby=\"namespace-pull-secret-email-help\"\n                  />\n                  <p className=\"help-block text-muted\" id=\"namespace-pull-secret-email-help\">\n                    Optional, depending on registry provider\n                  </p>\n                </div>\n              </div>\n              <div className=\"row co-m-form-row\">\n                <div className=\"col-xs-3\">\n                  <label htmlFor=\"namespace-pull-secret-username\">Username</label>\n                </div>\n                <div className=\"col-xs-9\">\n                  <input\n                    type=\"text\"\n                    defaultValue={existingData.username}\n                    className=\"pf-c-form-control\"\n                    id=\"namespace-pull-secret-username\"\n                    required\n                  />\n                </div>\n              </div>\n              <div className=\"row co-m-form-row\">\n                <div className=\"col-xs-3\">\n                  <label htmlFor=\"namespace-pull-secret-password\">Password</label>\n                </div>\n                <div className=\"col-xs-9\">\n                  <input\n                    type=\"password\"\n                    defaultValue={existingData.password}\n                    className=\"pf-c-form-control\"\n                    id=\"namespace-pull-secret-password\"\n                    required\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n\n          {this.state.method === 'upload' && (\n            <div>\n              <div className=\"row co-m-form-row\">\n                <div className=\"col-xs-3\">\n                  <label htmlFor=\"namespace-pull-secret-file\">File Upload</label>\n                </div>\n                <div className=\"col-xs-9\">\n                  <input\n                    type=\"file\"\n                    id=\"namespace-pull-secret-file\"\n                    onChange={this._onFileChange}\n                    aria-describedby=\"namespace-pull-secret-file-help\"\n                  />\n                  <p className=\"help-block etext-muted\" id=\"namespace-pull-secret-file-help\">\n                    Properly configured Docker config file in JSON format. Will be base64 encoded\n                    after upload.\n                  </p>\n                </div>\n              </div>\n              {this.state.invalidJson ||\n                (existingData.invalidJson && (\n                  <div className=\"row co-m-form-row\">\n                    <div className=\"col-xs-9 col-sm-offset-3\">\n                      <Alert isInline className=\"co-alert\" variant=\"danger\" title=\"Invalid JSON\">\n                        The uploaded file is not properly-formatted JSON.\n                      </Alert>\n                    </div>\n                  </div>\n                ))}\n              {this.state.fileData && (\n                <div className=\"row co-m-form-row\">\n                  <div className=\"col-xs-9 col-sm-offset-3\">\n                    <pre className=\"co-pre-wrap\">{this.state.fileData}</pre>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n        </ModalBody>\n        <ModalSubmitFooter\n          errorMessage={this.state.errorMessage}\n          inProgress={this.state.inProgress}\n          submitText=\"Save\"\n          cancel={this._cancel}\n        />\n      </form>\n    );\n  }\n}\n\nConfigureNamespacePullSecret.propTypes = {\n  namespace: PropTypes.object.isRequired,\n  pullSecret: PropTypes.object,\n};\n\nexport const configureNamespacePullSecretModal = createModalLauncher(ConfigureNamespacePullSecret);\n"]}]}