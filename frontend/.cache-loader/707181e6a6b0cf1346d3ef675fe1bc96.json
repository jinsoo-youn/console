{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/section/ResourceSection.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/section/ResourceSection.tsx","mtime":1616735742380},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { useField } from 'formik';\nimport { connectToFlags } from '@console/internal/reducers/features';\nimport { DeploymentModel, DeploymentConfigModel } from '@console/internal/models';\nimport { FLAG_KNATIVE_SERVING_SERVICE, ServiceModel } from '@console/knative-plugin';\nimport { RadioGroupField } from '@console/shared';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport { getActiveNamespace } from '@console/internal/actions/ui';\nimport { Resources, ReadableResourcesNames } from '../import-types';\nimport FormSection from './FormSection';\nimport './ResourceSection.scss';\nconst createHelpText = (k8sModel, helpText) => {\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: \"odc-resource-section__help-text\" },\n            k8sModel.apiGroup,\n            \"/\",\n            k8sModel.kind),\n        React.createElement(\"div\", null, helpText)));\n};\nconst ResourceSection = ({ flags }) => {\n    const [field] = useField('resourceTypesNotValid');\n    const invalidTypes = field.value || [];\n    const radioOptions = [];\n    if (!invalidTypes.includes(Resources.Kubernetes)) {\n        radioOptions.push({\n            label: ReadableResourcesNames[Resources.Kubernetes],\n            value: Resources.Kubernetes,\n            children: createHelpText(DeploymentModel, `A ${DeploymentModel.label} enables declarative updates for Pods and ReplicaSets.`),\n        });\n    }\n    if (!invalidTypes.includes(Resources.OpenShift)) {\n        radioOptions.push({\n            label: ReadableResourcesNames[Resources.OpenShift],\n            value: Resources.OpenShift,\n            children: createHelpText(DeploymentConfigModel, `A ${DeploymentConfigModel.label} defines the template for a pod \\\n        and manages deploying new images or configuration changes`),\n        });\n    }\n    const knativeServiceAccess = useAccessReview({\n        group: ServiceModel.apiGroup,\n        resource: ServiceModel.plural,\n        namespace: getActiveNamespace(),\n        verb: 'create',\n    });\n    const canIncludeKnative = !invalidTypes.includes(Resources.KnativeService) &&\n        flags[FLAG_KNATIVE_SERVING_SERVICE] &&\n        knativeServiceAccess;\n    if (canIncludeKnative) {\n        radioOptions.push({\n            label: ReadableResourcesNames[Resources.KnativeService],\n            value: Resources.KnativeService,\n            children: createHelpText(ServiceModel, `A Knative Service enables scaling to zero when idle`),\n        });\n    }\n    return (React.createElement(FormSection, { title: \"Resources\", fullWidth: true },\n        React.createElement(\"div\", null, \"Select the resource type to generate\"),\n        React.createElement(RadioGroupField, { name: \"resources\", options: radioOptions })));\n};\nexport default connectToFlags(FLAG_KNATIVE_SERVING_SERVICE)(ResourceSection);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/section/ResourceSection.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/section/ResourceSection.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useField } from 'formik';\nimport { connectToFlags, FlagsObject } from '@console/internal/reducers/features';\nimport { K8sKind } from '@console/internal/module/k8s';\nimport { DeploymentModel, DeploymentConfigModel } from '@console/internal/models';\nimport { FLAG_KNATIVE_SERVING_SERVICE, ServiceModel } from '@console/knative-plugin';\nimport { RadioGroupField, RadioGroupOption } from '@console/shared';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport { getActiveNamespace } from '@console/internal/actions/ui';\nimport { Resources, ReadableResourcesNames } from '../import-types';\nimport FormSection from './FormSection';\nimport './ResourceSection.scss';\n\ntype ResourceSectionProps = {\n  flags: FlagsObject;\n};\n\nconst createHelpText = (k8sModel: K8sKind, helpText: string) => {\n  return (\n    <>\n      <div className=\"odc-resource-section__help-text\">\n        {k8sModel.apiGroup}/{k8sModel.kind}\n      </div>\n      <div>{helpText}</div>\n    </>\n  );\n};\n\nconst ResourceSection: React.FC<ResourceSectionProps> = ({ flags }) => {\n  const [field] = useField<Resources[]>('resourceTypesNotValid');\n  const invalidTypes = field.value || [];\n\n  const radioOptions: RadioGroupOption[] = [];\n  if (!invalidTypes.includes(Resources.Kubernetes)) {\n    radioOptions.push({\n      label: ReadableResourcesNames[Resources.Kubernetes],\n      value: Resources.Kubernetes,\n      children: createHelpText(\n        DeploymentModel,\n        `A ${DeploymentModel.label} enables declarative updates for Pods and ReplicaSets.`,\n      ),\n    });\n  }\n  if (!invalidTypes.includes(Resources.OpenShift)) {\n    radioOptions.push({\n      label: ReadableResourcesNames[Resources.OpenShift],\n      value: Resources.OpenShift,\n      children: createHelpText(\n        DeploymentConfigModel,\n        `A ${DeploymentConfigModel.label} defines the template for a pod \\\n        and manages deploying new images or configuration changes`,\n      ),\n    });\n  }\n\n  const knativeServiceAccess = useAccessReview({\n    group: ServiceModel.apiGroup,\n    resource: ServiceModel.plural,\n    namespace: getActiveNamespace(),\n    verb: 'create',\n  });\n  const canIncludeKnative =\n    !invalidTypes.includes(Resources.KnativeService) &&\n    flags[FLAG_KNATIVE_SERVING_SERVICE] &&\n    knativeServiceAccess;\n  if (canIncludeKnative) {\n    radioOptions.push({\n      label: ReadableResourcesNames[Resources.KnativeService],\n      value: Resources.KnativeService,\n      children: createHelpText(ServiceModel, `A Knative Service enables scaling to zero when idle`),\n    });\n  }\n  return (\n    <FormSection title=\"Resources\" fullWidth>\n      <div>Select the resource type to generate</div>\n      <RadioGroupField name=\"resources\" options={radioOptions} />\n    </FormSection>\n  );\n};\n\nexport default connectToFlags(FLAG_KNATIVE_SERVING_SERVICE)(ResourceSection);\n"]}]}