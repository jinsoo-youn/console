{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/formik-fields/EnvironmentField.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/formik-fields/EnvironmentField.tsx","mtime":1615298458600},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport { useFormikContext } from 'formik';\nimport { NameValueEditor } from '@console/internal/components/utils/name-value-editor';\nimport { FormGroup } from '@patternfly/react-core';\nimport { SecretModel, ConfigMapModel } from '@console/internal/models';\nimport { k8sGet } from '@console/internal/module/k8s';\nimport { errorModal } from '@console/internal/components/modals';\nimport { getFieldId } from './field-utils';\nconst EnvironmentField = (_a) => {\n    var { label, helpText, required, envs } = _a, props = __rest(_a, [\"label\", \"helpText\", \"required\", \"envs\"]);\n    const { obj: { metadata: { namespace }, }, } = props;\n    const { setFieldValue } = useFormikContext();\n    const fieldId = getFieldId(props.name, 'env-input');\n    const environmentVariables = !_.isEmpty(envs) ? envs.map((env) => _.values(env)) : [['', '']];\n    const [nameValue, setNameValue] = React.useState(environmentVariables);\n    const [configMaps, setConfigMaps] = React.useState({});\n    const [secrets, setSecrets] = React.useState({});\n    const handleNameValuePairs = React.useCallback(({ nameValuePairs }) => {\n        const updatedNameValuePairs = _.compact(nameValuePairs.map(([name, value]) => {\n            if (_.isObject(value)) {\n                return { name, valueFrom: value };\n            }\n            if (value.length) {\n                return { name, value };\n            }\n            return null;\n        }));\n        setNameValue(nameValuePairs);\n        setFieldValue(props.name, updatedNameValuePairs);\n    }, [props.name, setFieldValue]);\n    React.useEffect(() => {\n        Promise.all([k8sGet(ConfigMapModel, null, namespace), k8sGet(SecretModel, null, namespace)])\n            .then(([nsConfigMaps, nsSecrets]) => {\n            setConfigMaps(nsConfigMaps);\n            setSecrets(nsSecrets);\n        })\n            .catch((err) => {\n            var _a;\n            if (((_a = err === null || err === void 0 ? void 0 : err.response) === null || _a === void 0 ? void 0 : _a.status) !== 403) {\n                errorModal({ error: err === null || err === void 0 ? void 0 : err.message });\n            }\n        });\n    }, [namespace]);\n    return (React.createElement(FormGroup, { fieldId: fieldId, label: label, helperText: helpText, isRequired: required },\n        React.createElement(NameValueEditor, { nameValuePairs: nameValue, valueString: \"Value\", nameString: \"Name\", addString: \"Add Value\", readOnly: false, allowSorting: false, updateParentData: handleNameValuePairs, configMaps: configMaps, secrets: secrets, addConfigMapSecret: true })));\n};\nexport default EnvironmentField;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/formik-fields/EnvironmentField.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/formik-fields/EnvironmentField.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { NameValueEditor } from '@console/internal/components/utils/name-value-editor';\nimport { FormGroup } from '@patternfly/react-core';\nimport { SecretModel, ConfigMapModel } from '@console/internal/models';\nimport { k8sGet } from '@console/internal/module/k8s';\nimport { errorModal } from '@console/internal/components/modals';\nimport { EnvironmentFieldProps } from './field-types';\nimport { getFieldId } from './field-utils';\n\nconst EnvironmentField: React.FC<EnvironmentFieldProps> = ({\n  label,\n  helpText,\n  required,\n  envs,\n  ...props\n}) => {\n  const {\n    obj: {\n      metadata: { namespace },\n    },\n  } = props;\n  const { setFieldValue } = useFormikContext<FormikValues>();\n  const fieldId = getFieldId(props.name, 'env-input');\n  const environmentVariables = !_.isEmpty(envs) ? envs.map((env) => _.values(env)) : [['', '']];\n  const [nameValue, setNameValue] = React.useState(environmentVariables);\n  const [configMaps, setConfigMaps] = React.useState({});\n  const [secrets, setSecrets] = React.useState({});\n  const handleNameValuePairs = React.useCallback(\n    ({ nameValuePairs }) => {\n      const updatedNameValuePairs = _.compact(\n        nameValuePairs.map(([name, value]) => {\n          if (_.isObject(value)) {\n            return { name, valueFrom: value };\n          }\n          if (value.length) {\n            return { name, value };\n          }\n          return null;\n        }),\n      );\n      setNameValue(nameValuePairs);\n      setFieldValue(props.name, updatedNameValuePairs);\n    },\n    [props.name, setFieldValue],\n  );\n  React.useEffect(() => {\n    Promise.all([k8sGet(ConfigMapModel, null, namespace), k8sGet(SecretModel, null, namespace)])\n      .then(([nsConfigMaps, nsSecrets]) => {\n        setConfigMaps(nsConfigMaps);\n        setSecrets(nsSecrets);\n      })\n      .catch((err) => {\n        if (err?.response?.status !== 403) {\n          errorModal({ error: err?.message });\n        }\n      });\n  }, [namespace]);\n\n  return (\n    <FormGroup fieldId={fieldId} label={label} helperText={helpText} isRequired={required}>\n      <NameValueEditor\n        nameValuePairs={nameValue}\n        valueString=\"Value\"\n        nameString=\"Name\"\n        addString=\"Add Value\"\n        readOnly={false}\n        allowSorting={false}\n        updateParentData={handleNameValuePairs}\n        configMaps={configMaps}\n        secrets={secrets}\n        addConfigMapSecret\n      />\n    </FormGroup>\n  );\n};\n\nexport default EnvironmentField;\n"]}]}