{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/TopologyDataController.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/TopologyDataController.tsx","mtime":1617154808360},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Firehose } from '@console/internal/components/utils';\nimport * as plugins from '@console/internal/plugins';\nimport { getResourceList } from '@console/shared';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { safeLoadAll } from 'js-yaml';\nimport { ServiceBindingRequestModel } from '../../models';\nimport { transformTopologyData } from './data-transforms/data-transformer';\nimport { allowedResources, getHelmReleaseKey, getServiceBindingStatus } from './topology-utils';\nimport { fetchHelmReleases } from '../helm/helm-utils';\nconst Controller = ({ render, resources, loaded, loadError, utils, namespace, serviceBinding, trafficData }) => {\n    const secretCount = React.useRef(-1);\n    const [helmResourcesMap, setHelmResourcesMap] = React.useState(null);\n    React.useEffect(() => {\n        var _a, _b, _c, _d, _e;\n        const count = (_c = (_b = (_a = resources === null || resources === void 0 ? void 0 : resources.secrets) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.length) !== null && _c !== void 0 ? _c : 0;\n        if ((((_d = resources.secrets) === null || _d === void 0 ? void 0 : _d.loaded) && count !== secretCount.current) || ((_e = resources.secrets) === null || _e === void 0 ? void 0 : _e.loadError)) {\n            secretCount.current = count;\n            if (count === 0) {\n                setHelmResourcesMap({});\n                return;\n            }\n            fetchHelmReleases(namespace)\n                .then(releases => {\n                setHelmResourcesMap(releases.reduce((acc, release) => {\n                    try {\n                        const manifestResources = safeLoadAll(release.manifest);\n                        manifestResources.forEach(resource => {\n                            const resourceKindName = getHelmReleaseKey(resource);\n                            if (!acc.hasOwnProperty(resourceKindName)) {\n                                acc[resourceKindName] = {\n                                    releaseName: release.name,\n                                    releaseVersion: release.version,\n                                    chartIcon: release.chart.metadata.icon,\n                                    manifestResources,\n                                    releaseNotes: release.info.notes,\n                                };\n                            }\n                        });\n                    }\n                    catch (e) {\n                        // eslint-disable-next-line no-console\n                        console.error(e);\n                    }\n                    return acc;\n                }, {}));\n            })\n                .catch(() => {\n                setHelmResourcesMap({});\n            });\n        }\n    }, [namespace, resources, resources.secrets, secretCount, setHelmResourcesMap]);\n    return render({\n        loaded: loaded && !!helmResourcesMap,\n        loadError,\n        namespace,\n        serviceBinding,\n        data: loaded && helmResourcesMap ? transformTopologyData(resources, allowedResources, utils, trafficData, helmResourcesMap) : null,\n    });\n};\nexport const TopologyDataController = ({ match, render, resourceList, serviceBinding }) => {\n    const namespace = match.params.name;\n    const { resources, utils } = getResourceList(namespace, resourceList);\n    if (serviceBinding) {\n        resources.push({\n            isList: true,\n            kind: referenceForModel(ServiceBindingRequestModel),\n            namespace,\n            prop: 'serviceBindingRequests',\n            optional: true,\n        });\n    }\n    return (React.createElement(Firehose, { resources: resources },\n        React.createElement(Controller, { render: render, utils: utils, serviceBinding: serviceBinding, namespace: namespace })));\n};\nconst DataControllerStateToProps = (state) => {\n    const resourceList = plugins.registry.getOverviewCRDs().filter(resource => state.FLAGS.get(resource.properties.required));\n    return {\n        resourceList,\n        serviceBinding: getServiceBindingStatus(state),\n    };\n};\nexport default connect(DataControllerStateToProps)(TopologyDataController);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/TopologyDataController.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/TopologyDataController.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { match as RMatch } from 'react-router';\nimport { Firehose } from '@console/internal/components/utils';\nimport * as plugins from '@console/internal/plugins';\nimport { getResourceList } from '@console/shared';\nimport { referenceForModel, K8sResourceKind } from '@console/internal/module/k8s';\nimport { RootState } from '@console/internal/redux';\nimport { safeLoadAll } from 'js-yaml';\nimport { ServiceBindingRequestModel } from '../../models';\nimport { transformTopologyData } from './data-transforms/data-transformer';\nimport { allowedResources, getHelmReleaseKey, getServiceBindingStatus } from './topology-utils';\nimport { TopologyDataModel, TopologyDataResources, TrafficData } from './topology-types';\nimport { HelmReleaseResourcesMap } from '../helm/helm-types';\nimport { fetchHelmReleases } from '../helm/helm-utils';\n\nexport interface RenderProps {\n  data?: TopologyDataModel;\n  namespace: string;\n  loaded: boolean;\n  loadError: string;\n  serviceBinding: boolean;\n}\n\ninterface StateProps {\n  resourceList: plugins.OverviewCRD[];\n  serviceBinding: boolean;\n}\n\nexport interface ControllerProps {\n  utils: Function[];\n  loaded?: boolean;\n  loadError?: any;\n  resources?: TopologyDataResources;\n  render(props: RenderProps): React.ReactElement;\n  namespace: string;\n  serviceBinding: boolean;\n  trafficData?: TrafficData;\n}\n\nexport interface TopologyDataControllerProps extends StateProps {\n  match: RMatch<{\n    name?: string;\n  }>;\n  render(RenderProps): React.ReactElement;\n}\n\nconst Controller: React.FC<ControllerProps> = ({ render, resources, loaded, loadError, utils, namespace, serviceBinding, trafficData }) => {\n  const secretCount = React.useRef<number>(-1);\n  const [helmResourcesMap, setHelmResourcesMap] = React.useState<HelmReleaseResourcesMap>(null);\n  React.useEffect(() => {\n    const count = resources?.secrets?.data?.length ?? 0;\n    if ((resources.secrets?.loaded && count !== secretCount.current) || resources.secrets?.loadError) {\n      secretCount.current = count;\n      if (count === 0) {\n        setHelmResourcesMap({});\n        return;\n      }\n\n      fetchHelmReleases(namespace)\n        .then(releases => {\n          setHelmResourcesMap(\n            releases.reduce((acc, release) => {\n              try {\n                const manifestResources: K8sResourceKind[] = safeLoadAll(release.manifest);\n                manifestResources.forEach(resource => {\n                  const resourceKindName = getHelmReleaseKey(resource);\n                  if (!acc.hasOwnProperty(resourceKindName)) {\n                    acc[resourceKindName] = {\n                      releaseName: release.name,\n                      releaseVersion: release.version,\n                      chartIcon: release.chart.metadata.icon,\n                      manifestResources,\n                      releaseNotes: release.info.notes,\n                    };\n                  }\n                });\n              } catch (e) {\n                // eslint-disable-next-line no-console\n                console.error(e);\n              }\n              return acc;\n            }, {}),\n          );\n        })\n        .catch(() => {\n          setHelmResourcesMap({});\n        });\n    }\n  }, [namespace, resources, resources.secrets, secretCount, setHelmResourcesMap]);\n\n  return render({\n    loaded: loaded && !!helmResourcesMap,\n    loadError,\n    namespace,\n    serviceBinding,\n    data: loaded && helmResourcesMap ? transformTopologyData(resources, allowedResources, utils, trafficData, helmResourcesMap) : null,\n  });\n};\n\nexport const TopologyDataController: React.FC<TopologyDataControllerProps> = ({ match, render, resourceList, serviceBinding }) => {\n  const namespace = match.params.name;\n  const { resources, utils } = getResourceList(namespace, resourceList);\n  if (serviceBinding) {\n    resources.push({\n      isList: true,\n      kind: referenceForModel(ServiceBindingRequestModel),\n      namespace,\n      prop: 'serviceBindingRequests',\n      optional: true,\n    });\n  }\n\n  return (\n    <Firehose resources={resources}>\n      <Controller render={render} utils={utils} serviceBinding={serviceBinding} namespace={namespace} />\n    </Firehose>\n  );\n};\n\nconst DataControllerStateToProps = (state: RootState) => {\n  const resourceList = plugins.registry.getOverviewCRDs().filter(resource => state.FLAGS.get(resource.properties.required));\n  return {\n    resourceList,\n    serviceBinding: getServiceBindingStatus(state),\n  };\n};\n\nexport default connect(DataControllerStateToProps)(TopologyDataController);\n"]}]}