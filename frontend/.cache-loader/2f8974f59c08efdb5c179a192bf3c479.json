{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/formik-fields/field-types.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/formik-fields/field-types.ts","mtime":1615298458600},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["export var GroupTextType;\n(function (GroupTextType) {\n    GroupTextType[\"TextInput\"] = \"text\";\n    GroupTextType[\"TextArea\"] = \"textArea\";\n})(GroupTextType || (GroupTextType = {}));\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/formik-fields/field-types.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/formik-fields/field-types.ts"],"names":[],"mappings":"AAqCA,MAAM,CAAN,IAAY,aAGX;AAHD,WAAY,aAAa;IACvB,mCAAkB,CAAA;IAClB,sCAAqB,CAAA;AACvB,CAAC,EAHW,aAAa,KAAb,aAAa,QAGxB","sourcesContent":["import { ValidatedOptions, TextInputTypes, gridItemSpanValueShape } from '@patternfly/react-core';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\n\nexport interface FieldProps {\n  name: string;\n  label?: React.ReactNode;\n  helpText?: React.ReactNode;\n  helpTextInvalid?: React.ReactNode;\n  required?: boolean;\n  style?: React.CSSProperties;\n  isReadOnly?: boolean;\n  disableDeleteRow?: boolean;\n  disableAddRow?: boolean;\n  className?: string;\n  isDisabled?: boolean;\n  validated?: ValidatedOptions;\n}\n\nexport interface BaseInputFieldProps extends FieldProps {\n  type?: TextInputTypes;\n  placeholder?: string;\n  onChange?: (event) => void;\n  onBlur?: (event) => void;\n}\n\nexport interface GroupInputProps extends BaseInputFieldProps {\n  beforeInput?: React.ReactNode;\n  afterInput?: React.ReactNode;\n  groupTextType?: GroupTextType;\n}\n\nexport interface TextAreaProps extends FieldProps {\n  placeholder?: string;\n  onChange?: (event) => void;\n  onBlur?: (event) => void;\n}\n\nexport enum GroupTextType {\n  TextInput = 'text',\n  TextArea = 'textArea',\n}\n\nexport interface CheckboxFieldProps extends FieldProps {\n  formLabel?: string;\n  value?: string;\n}\n\nexport interface SearchInputFieldProps extends BaseInputFieldProps {\n  onSearch: (searchTerm: string) => void;\n}\n\nexport interface DropdownFieldProps extends FieldProps {\n  items?: object;\n  selectedKey?: string;\n  title?: React.ReactNode;\n  fullWidth?: boolean;\n  disabled?: boolean;\n  autocompleteFilter?: (text: string, item: object, key?: string) => boolean;\n  onChange?: (value: string) => void;\n}\n\nexport interface EnvironmentFieldProps extends FieldProps {\n  obj?: K8sResourceKind;\n  envPath: string[];\n  envs?: (NameValuePair | NameValueFromPair)[];\n}\n\nexport interface ResourceLimitFieldProps extends FieldProps {\n  unitName: string;\n  unitOptions: object;\n  defaultUnitSize: string;\n  fullWidth?: boolean;\n}\n\nexport interface MultiColumnFieldProps extends FieldProps {\n  addLabel?: string;\n  toolTip?: string;\n  emptyValues: { [name: string]: string };\n  emptyMessage?: string;\n  headers: ({ name: string; required: boolean } | string)[];\n  children: React.ReactNode;\n  spans?: gridItemSpanValueShape[];\n}\n\nexport interface YAMLEditorFieldProps extends FieldProps {\n  onChange?: (value: string) => void;\n  onSave?: () => void;\n}\n\nexport interface NameValuePair {\n  name: string;\n  value: string;\n}\n\nexport interface NameValueFromPair {\n  name: string;\n  valueForm: ConfigMapKeyRef | SecretKeyRef;\n}\n\nexport interface ConfigMapKeyRef {\n  configMapKeyRef: {\n    key: string;\n    name: string;\n  };\n}\n\nexport interface SecretKeyRef {\n  secretKeyRef: {\n    key: string;\n    name: string;\n  };\n}\n\nexport interface RadioButtonFieldProps extends FieldProps {\n  value: string | number;\n  description?: React.ReactNode;\n}\n\nexport interface RadioGroupFieldProps extends FieldProps {\n  options: RadioGroupOption[];\n}\n\nexport interface RadioGroupOption {\n  value: string | number;\n  label: React.ReactNode;\n  isDisabled?: boolean;\n  children?: React.ReactNode;\n  activeChildren?: React.ReactElement;\n}\n"]}]}