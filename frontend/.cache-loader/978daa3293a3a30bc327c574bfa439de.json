{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/modals/configure-update-strategy-modal.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/modals/configure-update-strategy-modal.tsx","mtime":1615298458740},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport { k8sPatch } from '../../module/k8s';\nimport { DeploymentModel } from '../../models';\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter } from '../factory/modal';\nimport { pluralize, withHandlePromise } from '../utils';\nimport { RadioInput } from '../radio';\nexport const UPDATE_STRATEGY_DESCRIPTION = 'How should the pods be replaced when a new revision is created?';\nexport const getNumberOrPercent = (value) => {\n    if (typeof value === 'undefined') {\n        return null;\n    }\n    if (typeof value === 'string' && value.indexOf('%') > -1) {\n        return value;\n    }\n    return _.toInteger(value);\n};\nexport const ConfigureUpdateStrategy = (props) => {\n    const { showDescription = true } = props;\n    return (React.createElement(React.Fragment, null,\n        showDescription && (React.createElement(\"div\", { className: \"co-m-form-row\" },\n            React.createElement(\"p\", null, UPDATE_STRATEGY_DESCRIPTION))),\n        React.createElement(\"div\", { className: \"row co-m-form-row\" },\n            React.createElement(\"div\", { className: \"col-sm-12\" },\n                React.createElement(RadioInput, { name: `${props.uid || 'update-strategy'}-type`, onChange: (e) => {\n                        props.onChangeStrategyType(e.target.value);\n                    }, value: \"RollingUpdate\", checked: props.strategyType === 'RollingUpdate', title: \"RollingUpdate\", subTitle: \"(default)\", autoFocus: props.strategyType === 'RollingUpdate' },\n                    React.createElement(\"div\", { className: \"co-m-radio-desc\" },\n                        React.createElement(\"p\", { className: \"text-muted\" }, \"Execute a smooth roll out of the new revision, based on the settings below\"),\n                        React.createElement(\"div\", { className: \"row co-m-form-row\" },\n                            React.createElement(\"div\", { className: \"col-sm-3\" },\n                                React.createElement(\"label\", { htmlFor: \"input-max-unavailable\", className: \"control-label\" }, \"Max Unavailable\")),\n                            React.createElement(\"div\", { className: \"co-m-form-col col-sm-9\" },\n                                React.createElement(\"div\", { className: \"form-inline\" },\n                                    React.createElement(\"div\", { className: \"pf-c-input-group\" },\n                                        React.createElement(\"input\", { disabled: props.strategyType !== 'RollingUpdate', placeholder: \"25%\", size: 5, type: \"text\", className: \"pf-c-form-control\", id: \"input-max-unavailable\", value: props.maxUnavailable, onChange: (e) => props.onChangeMaxUnavailable(e.target.value), \"aria-describedby\": \"input-max-unavailable-help\" }),\n                                        props.replicas && (React.createElement(\"span\", { className: \"pf-c-input-group__text\" },\n                                            React.createElement(Tooltip, { content: \"Current desired pod count\" },\n                                                React.createElement(\"span\", null,\n                                                    \"of \",\n                                                    pluralize(props.replicas, 'pod'))))))),\n                                React.createElement(\"p\", { className: \"help-block text-muted\", id: \"input-max-unavailable-help\" }, \"Number or percentage of total pods at the start of the update (optional)\"))),\n                        React.createElement(\"div\", { className: \"row co-m-form-row\" },\n                            React.createElement(\"div\", { className: \"col-sm-3\" },\n                                React.createElement(\"label\", { htmlFor: \"input-max-surge\", className: \"control-label\" }, \"Max Surge\")),\n                            React.createElement(\"div\", { className: \"co-m-form-col col-sm-9\" },\n                                React.createElement(\"div\", { className: \"form-inline\" },\n                                    React.createElement(\"div\", { className: \"pf-c-input-group\" },\n                                        React.createElement(\"input\", { disabled: props.strategyType !== 'RollingUpdate', placeholder: \"25%\", size: 5, type: \"text\", className: \"pf-c-form-control\", id: \"input-max-surge\", value: props.maxSurge, onChange: (e) => props.onChangeMaxSurge(e.target.value), \"aria-describedby\": \"input-max-surge-help\" }),\n                                        React.createElement(\"span\", { className: \"pf-c-input-group__text\" },\n                                            React.createElement(Tooltip, { content: \"Current desired pod count\" },\n                                                React.createElement(\"span\", null,\n                                                    \"greater than \",\n                                                    pluralize(props.replicas, 'pod')))))),\n                                React.createElement(\"p\", { className: \"help-block text-muted\", id: \"input-max-surge-help\" }, \"Number or percentage of total pods at the start of the update (optional)\")))))),\n            React.createElement(\"div\", { className: \"col-sm-12\" },\n                React.createElement(RadioInput, { name: `${props.uid || 'update-strategy'}-type`, onChange: (e) => {\n                        props.onChangeStrategyType(e.target.value);\n                    }, value: \"Recreate\", checked: props.strategyType === 'Recreate', title: \"Recreate\", desc: \"Shut down all existing pods before creating new ones\", autoFocus: props.strategyType === 'Recreate' })))));\n};\nexport const ConfigureUpdateStrategyModal = withHandlePromise((props) => {\n    const [strategyType, setStrategyType] = React.useState(_.get(props.deployment.spec, 'strategy.type'));\n    const [maxUnavailable, setMaxUnavailable] = React.useState(_.get(props.deployment.spec, 'strategy.rollingUpdate.maxUnavailable', '25%'));\n    const [maxSurge, setMaxSurge] = React.useState(_.get(props.deployment.spec, 'strategy.rollingUpdate.maxSurge', '25%'));\n    const submit = (event) => {\n        event.preventDefault();\n        const patch = { path: '/spec/strategy/rollingUpdate', op: 'remove' };\n        if (strategyType === 'RollingUpdate') {\n            patch.value = {\n                maxUnavailable: getNumberOrPercent(maxUnavailable || '25%'),\n                maxSurge: getNumberOrPercent(maxSurge || '25%'),\n            };\n            patch.op = 'add';\n        }\n        props\n            .handlePromise(k8sPatch(DeploymentModel, props.deployment, [\n            patch,\n            { path: '/spec/strategy/type', value: strategyType, op: 'replace' },\n        ]))\n            .then(props.close, () => { });\n    };\n    return (React.createElement(\"form\", { onSubmit: submit, name: \"form\", className: \"modal-content\" },\n        React.createElement(ModalTitle, null, \"Edit Update Strategy\"),\n        React.createElement(ModalBody, null,\n            React.createElement(ConfigureUpdateStrategy, { strategyType: strategyType, maxUnavailable: maxUnavailable, maxSurge: maxSurge, onChangeStrategyType: setStrategyType, onChangeMaxUnavailable: setMaxUnavailable, onChangeMaxSurge: setMaxSurge })),\n        React.createElement(ModalSubmitFooter, { errorMessage: props.errorMessage, inProgress: props.inProgress, submitText: \"Save\", cancel: props.cancel })));\n});\nexport const configureUpdateStrategyModal = createModalLauncher(ConfigureUpdateStrategyModal);\nConfigureUpdateStrategy.displayName = 'ConfigureUpdateStrategy';\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/modals/configure-update-strategy-modal.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/modals/configure-update-strategy-modal.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\n\nimport { k8sPatch, Patch, DeploymentUpdateStrategy, K8sResourceKind } from '../../module/k8s';\nimport { DeploymentModel } from '../../models';\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter } from '../factory/modal';\nimport { pluralize, withHandlePromise } from '../utils';\nimport { RadioInput } from '../radio';\n\nexport const UPDATE_STRATEGY_DESCRIPTION =\n  'How should the pods be replaced when a new revision is created?';\n\nexport const getNumberOrPercent = (value) => {\n  if (typeof value === 'undefined') {\n    return null;\n  }\n  if (typeof value === 'string' && value.indexOf('%') > -1) {\n    return value;\n  }\n\n  return _.toInteger(value);\n};\n\nexport const ConfigureUpdateStrategy: React.FC<ConfigureUpdateStrategyProps> = (props) => {\n  const { showDescription = true } = props;\n  return (\n    <>\n      {showDescription && (\n        <div className=\"co-m-form-row\">\n          <p>{UPDATE_STRATEGY_DESCRIPTION}</p>\n        </div>\n      )}\n      <div className=\"row co-m-form-row\">\n        <div className=\"col-sm-12\">\n          <RadioInput\n            name={`${props.uid || 'update-strategy'}-type`}\n            onChange={(e) => {\n              props.onChangeStrategyType(e.target.value);\n            }}\n            value=\"RollingUpdate\"\n            checked={props.strategyType === 'RollingUpdate'}\n            title=\"RollingUpdate\"\n            subTitle=\"(default)\"\n            autoFocus={props.strategyType === 'RollingUpdate'}\n          >\n            <div className=\"co-m-radio-desc\">\n              <p className=\"text-muted\">\n                Execute a smooth roll out of the new revision, based on the settings below\n              </p>\n\n              <div className=\"row co-m-form-row\">\n                <div className=\"col-sm-3\">\n                  <label htmlFor=\"input-max-unavailable\" className=\"control-label\">\n                    Max Unavailable\n                  </label>\n                </div>\n                <div className=\"co-m-form-col col-sm-9\">\n                  <div className=\"form-inline\">\n                    <div className=\"pf-c-input-group\">\n                      <input\n                        disabled={props.strategyType !== 'RollingUpdate'}\n                        placeholder=\"25%\"\n                        size={5}\n                        type=\"text\"\n                        className=\"pf-c-form-control\"\n                        id=\"input-max-unavailable\"\n                        value={props.maxUnavailable}\n                        onChange={(e) => props.onChangeMaxUnavailable(e.target.value)}\n                        aria-describedby=\"input-max-unavailable-help\"\n                      />\n                      {props.replicas && (\n                        <span className=\"pf-c-input-group__text\">\n                          <Tooltip content=\"Current desired pod count\">\n                            <span>of {pluralize(props.replicas, 'pod')}</span>\n                          </Tooltip>\n                        </span>\n                      )}\n                    </div>\n                  </div>\n                  <p className=\"help-block text-muted\" id=\"input-max-unavailable-help\">\n                    Number or percentage of total pods at the start of the update (optional)\n                  </p>\n                </div>\n              </div>\n\n              <div className=\"row co-m-form-row\">\n                <div className=\"col-sm-3\">\n                  <label htmlFor=\"input-max-surge\" className=\"control-label\">\n                    Max Surge\n                  </label>\n                </div>\n                <div className=\"co-m-form-col col-sm-9\">\n                  <div className=\"form-inline\">\n                    <div className=\"pf-c-input-group\">\n                      <input\n                        disabled={props.strategyType !== 'RollingUpdate'}\n                        placeholder=\"25%\"\n                        size={5}\n                        type=\"text\"\n                        className=\"pf-c-form-control\"\n                        id=\"input-max-surge\"\n                        value={props.maxSurge}\n                        onChange={(e) => props.onChangeMaxSurge(e.target.value)}\n                        aria-describedby=\"input-max-surge-help\"\n                      />\n                      <span className=\"pf-c-input-group__text\">\n                        <Tooltip content=\"Current desired pod count\">\n                          <span>greater than {pluralize(props.replicas, 'pod')}</span>\n                        </Tooltip>\n                      </span>\n                    </div>\n                  </div>\n                  <p className=\"help-block text-muted\" id=\"input-max-surge-help\">\n                    Number or percentage of total pods at the start of the update (optional)\n                  </p>\n                </div>\n              </div>\n            </div>\n          </RadioInput>\n        </div>\n\n        <div className=\"col-sm-12\">\n          <RadioInput\n            name={`${props.uid || 'update-strategy'}-type`}\n            onChange={(e) => {\n              props.onChangeStrategyType(e.target.value);\n            }}\n            value=\"Recreate\"\n            checked={props.strategyType === 'Recreate'}\n            title=\"Recreate\"\n            desc=\"Shut down all existing pods before creating new ones\"\n            autoFocus={props.strategyType === 'Recreate'}\n          />\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport const ConfigureUpdateStrategyModal = withHandlePromise(\n  (props: ConfigureUpdateStrategyModalProps) => {\n    const [strategyType, setStrategyType] = React.useState(\n      _.get(props.deployment.spec, 'strategy.type'),\n    );\n    const [maxUnavailable, setMaxUnavailable] = React.useState(\n      _.get(props.deployment.spec, 'strategy.rollingUpdate.maxUnavailable', '25%'),\n    );\n    const [maxSurge, setMaxSurge] = React.useState(\n      _.get(props.deployment.spec, 'strategy.rollingUpdate.maxSurge', '25%'),\n    );\n\n    const submit = (event) => {\n      event.preventDefault();\n\n      const patch: Patch = { path: '/spec/strategy/rollingUpdate', op: 'remove' };\n      if (strategyType === 'RollingUpdate') {\n        patch.value = {\n          maxUnavailable: getNumberOrPercent(maxUnavailable || '25%'),\n          maxSurge: getNumberOrPercent(maxSurge || '25%'),\n        };\n        patch.op = 'add';\n      }\n\n      props\n        .handlePromise(\n          k8sPatch(DeploymentModel, props.deployment, [\n            patch,\n            { path: '/spec/strategy/type', value: strategyType, op: 'replace' },\n          ]),\n        )\n        .then(props.close, () => {});\n    };\n\n    return (\n      <form onSubmit={submit} name=\"form\" className=\"modal-content\">\n        <ModalTitle>Edit Update Strategy</ModalTitle>\n        <ModalBody>\n          <ConfigureUpdateStrategy\n            strategyType={strategyType}\n            maxUnavailable={maxUnavailable}\n            maxSurge={maxSurge}\n            onChangeStrategyType={setStrategyType}\n            onChangeMaxUnavailable={setMaxUnavailable}\n            onChangeMaxSurge={setMaxSurge}\n          />\n        </ModalBody>\n        <ModalSubmitFooter\n          errorMessage={props.errorMessage}\n          inProgress={props.inProgress}\n          submitText=\"Save\"\n          cancel={props.cancel}\n        />\n      </form>\n    );\n  },\n);\n\nexport const configureUpdateStrategyModal = createModalLauncher(ConfigureUpdateStrategyModal);\n\nexport type ConfigureUpdateStrategyProps = {\n  showDescription?: boolean;\n  strategyType: DeploymentUpdateStrategy['type'];\n  maxUnavailable: number | string;\n  maxSurge: number | string;\n  onChangeStrategyType: (strategy: DeploymentUpdateStrategy['type']) => void;\n  onChangeMaxUnavailable: (maxUnavailable: number | string) => void;\n  onChangeMaxSurge: (maxSurge: number | string) => void;\n  replicas?: number;\n  uid?: string;\n};\n\nexport type ConfigureUpdateStrategyModalProps = {\n  deployment: K8sResourceKind;\n  handlePromise: <T>(promise: Promise<T>) => Promise<T>;\n  inProgress: boolean;\n  errorMessage: string;\n  cancel?: () => void;\n  close?: () => void;\n};\n\nConfigureUpdateStrategy.displayName = 'ConfigureUpdateStrategy';\n"]}]}