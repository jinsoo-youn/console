{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/markdown-view.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/markdown-view.tsx","mtime":1616735742470},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Converter } from 'showdown';\nimport * as sanitizeHtml from 'sanitize-html';\nconst tableTags = ['table', 'thead', 'tbody', 'tr', 'th', 'td'];\nconst markdownConvert = (markdown) => {\n    const unsafeHtml = new Converter({\n        tables: true,\n        openLinksInNewWindow: true,\n        strikethrough: true,\n        emoji: true,\n    }).makeHtml(markdown);\n    return sanitizeHtml(unsafeHtml, {\n        allowedTags: [\n            'b',\n            'i',\n            'strike',\n            's',\n            'del',\n            'em',\n            'strong',\n            'a',\n            'p',\n            'h1',\n            'h2',\n            'h3',\n            'h4',\n            'ul',\n            'ol',\n            'li',\n            'code',\n            'pre',\n            ...tableTags,\n        ],\n        allowedAttributes: {\n            a: ['href', 'target', 'rel'],\n        },\n        allowedSchemes: ['http', 'https', 'mailto'],\n        transformTags: {\n            a: sanitizeHtml.simpleTransform('a', { rel: 'noopener noreferrer' }, true),\n        },\n    });\n};\nexport class SyncMarkdownView extends React.Component {\n    constructor(props) {\n        super(props);\n    }\n    componentDidMount() {\n        this.updateDimensions();\n    }\n    updateDimensions() {\n        var _a, _b;\n        if (!((_b = (_a = this.frame) === null || _a === void 0 ? void 0 : _a.contentWindow) === null || _b === void 0 ? void 0 : _b.document.body.firstChild)) {\n            return;\n        }\n        this.frame.style.height = `${this.frame.contentWindow.document.body.firstChild.scrollHeight}px`;\n        // Let the new height take effect, then reset again once we recompute\n        setTimeout(() => {\n            if (this.props.exactHeight) {\n                this.frame.style.height = `${this.frame.contentWindow.document.body.firstChild.scrollHeight}px`;\n            }\n            else {\n                // Increase by 15px for the case where a horizontal scrollbar might appear\n                this.frame.style.height = `${this.frame.contentWindow.document.body.firstChild\n                    .scrollHeight + 15}px`;\n            }\n        });\n    }\n    render() {\n        // Find the app's stylesheets and inject them into the frame to ensure consistent styling.\n        const filteredLinks = Array.from(document.getElementsByTagName('link')).filter((l) => _.includes(l.href, 'app-bundle'));\n        const linkRefs = _.reduce(filteredLinks, (refs, link) => `${refs}\n        <link rel=\"stylesheet\" href=\"${link.href}\">`, '');\n        const contents = `\n      ${linkRefs}\n      <style type=\"text/css\">\n      body {\n        background-color: transparent !important;\n        color: ${this.props.content ? '#333' : '#999'};\n        font-family: var(--pf-global--FontFamily--sans-serif);\n        min-width: auto !important;\n      }\n      table {\n        display: block;\n        margin-bottom: 11.5px;\n        overflow-x: auto;\n      }\n      td,\n      th {\n        border-bottom: 1px solid #ededed;\n        padding: 10px;\n        vertical-align: top;\n      }\n      th {\n        padding-top: 0;\n      }\n      ${this.props.styles ? this.props.styles : ''}\n      </style>\n      <body class=\"pf-m-redhat-font\"><div style=\"overflow-y: auto;\">${markdownConvert(this.props.content || 'Not available')}</div></body>`;\n        return (React.createElement(\"iframe\", { sandbox: \"allow-popups allow-same-origin\", srcDoc: contents, style: { border: '0px', display: 'block', width: '100%', height: '0' }, ref: (r) => (this.frame = r), onLoad: () => this.updateDimensions() }));\n    }\n}\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/markdown-view.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/markdown-view.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Converter } from 'showdown';\nimport * as sanitizeHtml from 'sanitize-html';\n\nconst tableTags = ['table', 'thead', 'tbody', 'tr', 'th', 'td'];\n\nconst markdownConvert = (markdown) => {\n  const unsafeHtml = new Converter({\n    tables: true,\n    openLinksInNewWindow: true,\n    strikethrough: true,\n    emoji: true,\n  }).makeHtml(markdown);\n\n  return sanitizeHtml(unsafeHtml, {\n    allowedTags: [\n      'b',\n      'i',\n      'strike',\n      's',\n      'del',\n      'em',\n      'strong',\n      'a',\n      'p',\n      'h1',\n      'h2',\n      'h3',\n      'h4',\n      'ul',\n      'ol',\n      'li',\n      'code',\n      'pre',\n      ...tableTags,\n    ],\n    allowedAttributes: {\n      a: ['href', 'target', 'rel'],\n    },\n    allowedSchemes: ['http', 'https', 'mailto'],\n    transformTags: {\n      a: sanitizeHtml.simpleTransform('a', { rel: 'noopener noreferrer' }, true),\n    },\n  });\n};\n\nexport class SyncMarkdownView extends React.Component<\n  { content: string; styles?: string; exactHeight?: boolean },\n  {}\n> {\n  private frame: any;\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.updateDimensions();\n  }\n\n  updateDimensions() {\n    if (!this.frame?.contentWindow?.document.body.firstChild) {\n      return;\n    }\n    this.frame.style.height = `${this.frame.contentWindow.document.body.firstChild.scrollHeight}px`;\n\n    // Let the new height take effect, then reset again once we recompute\n    setTimeout(() => {\n      if (this.props.exactHeight) {\n        this.frame.style.height = `${this.frame.contentWindow.document.body.firstChild.scrollHeight}px`;\n      } else {\n        // Increase by 15px for the case where a horizontal scrollbar might appear\n        this.frame.style.height = `${this.frame.contentWindow.document.body.firstChild\n          .scrollHeight + 15}px`;\n      }\n    });\n  }\n\n  render() {\n    // Find the app's stylesheets and inject them into the frame to ensure consistent styling.\n    const filteredLinks = Array.from(document.getElementsByTagName('link')).filter((l) =>\n      _.includes(l.href, 'app-bundle'),\n    );\n\n    const linkRefs = _.reduce(\n      filteredLinks,\n      (refs, link) => `${refs}\n        <link rel=\"stylesheet\" href=\"${link.href}\">`,\n      '',\n    );\n\n    const contents = `\n      ${linkRefs}\n      <style type=\"text/css\">\n      body {\n        background-color: transparent !important;\n        color: ${this.props.content ? '#333' : '#999'};\n        font-family: var(--pf-global--FontFamily--sans-serif);\n        min-width: auto !important;\n      }\n      table {\n        display: block;\n        margin-bottom: 11.5px;\n        overflow-x: auto;\n      }\n      td,\n      th {\n        border-bottom: 1px solid #ededed;\n        padding: 10px;\n        vertical-align: top;\n      }\n      th {\n        padding-top: 0;\n      }\n      ${this.props.styles ? this.props.styles : ''}\n      </style>\n      <body class=\"pf-m-redhat-font\"><div style=\"overflow-y: auto;\">${markdownConvert(\n        this.props.content || 'Not available',\n      )}</div></body>`;\n    return (\n      <iframe\n        sandbox=\"allow-popups allow-same-origin\"\n        srcDoc={contents}\n        style={{ border: '0px', display: 'block', width: '100%', height: '0' }}\n        ref={(r) => (this.frame = r)}\n        onLoad={() => this.updateDimensions()}\n      />\n    );\n  }\n}\n"]}]}