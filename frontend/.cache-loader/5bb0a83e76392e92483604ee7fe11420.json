{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/statuses/vm/vm-status.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/statuses/vm/vm-status.ts","mtime":1616735742430},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { createBasicLookup } from '@console/shared/src/utils/utils';\nimport { getName, getNamespace, getOwnerReferences } from '@console/shared/src/selectors/common'; // do not import just from shared - causes cycles\nimport { compareOwnerReference } from '@console/shared/src/utils/owner-references';\nimport { buildOwnerReference, buildOwnerReferenceForModel, parseNumber, parsePercentage, } from '../../utils';\nimport { getAnnotationKeySuffix, getLabelValue, getStatusConditionOfType, getStatusPhase, } from '../../selectors/selectors';\nimport { findVMIMigration, getMigrationStatusPhase, isMigrating, } from '../../selectors/vmi-migration';\nimport { findVMIPod, getPodStatusPhase, getVMImporterPods } from '../../selectors/pod/selectors';\nimport { findConversionPod, isVMCreated, isVMExpectedRunning } from '../../selectors/vm';\nimport { getPodStatus } from '../pod/pod';\nimport { POD_PHASE_PENDING, POD_PHASE_SUCEEDED, POD_STATUS_ALL_ERROR, POD_STATUS_ALL_READY, POD_STATUS_NOT_SCHEDULABLE, } from '../pod/constants';\nimport { isVMIPaused } from '../../selectors/vmi/basic';\nimport { VirtualMachineImportModel } from '../../models';\nimport { getVMImportStatus } from '../vm-import/vm-import-status';\nimport { VMStatus } from '../../constants/vm/vm-status';\nimport { IMPORT_CDI_PENDING_MESSAGE, IMPORTING_CDI_ERROR_MESSAGE, IMPORTING_CDI_MESSAGE, IMPORTING_ERROR_VMWARE_MESSAGE, IMPORTING_VMWARE_MESSAGE, STARTING_MESSAGE, VMI_WAITING_MESSAGE, } from '../../strings/vm/status';\nimport { CDI_KUBEVIRT_IO, STORAGE_IMPORT_PVC_NAME } from '../../constants';\nimport { CONVERSION_PROGRESS_ANNOTATION } from '../../constants/v2v';\nimport { PAUSED_VM_MODAL_MESSAGE } from '../../constants/vm';\nimport { VMIPhase } from '../../constants/vmi/phase';\nconst isPaused = (vmi) => isVMIPaused(vmi) ? { status: VMStatus.PAUSED, message: PAUSED_VM_MODAL_MESSAGE } : null;\nconst isV2VVMWareConversion = (vm, pods) => {\n    if (!vm || !pods) {\n        return null;\n    }\n    const conversionPod = findConversionPod(vm, pods);\n    const podPhase = getPodStatusPhase(conversionPod);\n    if (conversionPod && podPhase !== POD_PHASE_SUCEEDED) {\n        const conversionPodStatus = getPodStatus(conversionPod);\n        if (podPhase === POD_PHASE_PENDING) {\n            return Object.assign(Object.assign({}, conversionPodStatus), { status: VMStatus.V2V_CONVERSION_PENDING, message: IMPORTING_VMWARE_MESSAGE, detailedMessage: conversionPodStatus.message, pod: conversionPod, progress: null });\n        }\n        if (POD_STATUS_ALL_ERROR.includes(conversionPodStatus.status)) {\n            return Object.assign(Object.assign({}, conversionPodStatus), { status: VMStatus.V2V_CONVERSION_ERROR, message: IMPORTING_ERROR_VMWARE_MESSAGE, detailedMessage: conversionPodStatus.message, pod: conversionPod, progress: null });\n        }\n        const progress = parseNumber(getAnnotationKeySuffix(conversionPod, CONVERSION_PROGRESS_ANNOTATION), 0);\n        return Object.assign(Object.assign({}, conversionPodStatus), { status: VMStatus.V2V_CONVERSION_IN_PROGRESS, message: IMPORTING_VMWARE_MESSAGE, pod: conversionPod, progress });\n    }\n    return null;\n};\nconst isV2VVMImportConversion = (vm, vmImports) => {\n    const vmImportOwnerReference = (getOwnerReferences(vm) || []).find((reference) => compareOwnerReference(reference, buildOwnerReferenceForModel(VirtualMachineImportModel), true));\n    if (!vmImportOwnerReference || !vmImports) {\n        return null;\n    }\n    const vmImport = vmImports.find((i) => compareOwnerReference(buildOwnerReference(i), vmImportOwnerReference));\n    const statusBundle = getVMImportStatus({ vmImport });\n    if (statusBundle.status.isCompleted() || statusBundle.status.isUnknown()) {\n        return null;\n    }\n    return Object.assign(Object.assign({}, statusBundle), { status: VMStatus.fromV2VImportStatus(statusBundle.status) });\n};\nconst isBeingMigrated = (vm, vmi, migrations) => {\n    const name = getName(vm || vmi);\n    const namespace = getNamespace(vm || vmi);\n    const migration = findVMIMigration(name, namespace, migrations);\n    if (isMigrating(migration)) {\n        return {\n            status: VMStatus.MIGRATING,\n            migration,\n            detailedMessage: getMigrationStatusPhase(migration),\n        };\n    }\n    return null;\n};\nconst isBeingImported = (vm, pods, dataVolumes) => {\n    const importerPods = getVMImporterPods(vm, pods);\n    if (importerPods && importerPods.length > 0 && !isVMCreated(vm)) {\n        const dvLookup = createBasicLookup(dataVolumes, getName);\n        const importerPodsStatuses = importerPods.map((pod) => {\n            var _a;\n            const podStatus = getPodStatus(pod);\n            const dvName = getLabelValue(pod, `${CDI_KUBEVIRT_IO}/${STORAGE_IMPORT_PVC_NAME}`);\n            const dataVolume = dvLookup[dvName];\n            if (POD_STATUS_ALL_ERROR.includes(podStatus.status)) {\n                let status = VMStatus.CDI_IMPORT_ERROR;\n                if (podStatus.status === POD_STATUS_NOT_SCHEDULABLE &&\n                    getPodStatusPhase(pod) === POD_PHASE_PENDING) {\n                    status = VMStatus.CDI_IMPORT_PENDING;\n                }\n                return {\n                    message: podStatus.message,\n                    status,\n                    progress: null,\n                    dataVolume,\n                    pod,\n                };\n            }\n            return {\n                status: VMStatus.CDI_IMPORTING,\n                message: podStatus.message,\n                pod,\n                dataVolume,\n                progress: parsePercentage((_a = dataVolume === null || dataVolume === void 0 ? void 0 : dataVolume.status) === null || _a === void 0 ? void 0 : _a.progress, 0),\n            };\n        });\n        const importStatus = importerPodsStatuses.find(({ status }) => status.isError()) ||\n            importerPodsStatuses.find(({ status }) => status.isPending()) ||\n            importerPodsStatuses[0];\n        const resultStatus = (importStatus === null || importStatus === void 0 ? void 0 : importStatus.status) || VMStatus.CDI_IMPORT_PENDING;\n        return {\n            status: resultStatus,\n            message: resultStatus.isError()\n                ? IMPORTING_CDI_ERROR_MESSAGE\n                : resultStatus.isPending()\n                    ? IMPORT_CDI_PENDING_MESSAGE\n                    : IMPORTING_CDI_MESSAGE,\n            importerPodsStatuses,\n        };\n    }\n    return null;\n};\nconst isVMError = (vm) => {\n    const vmFailureCond = getStatusConditionOfType(vm, 'Failure');\n    if (vmFailureCond) {\n        return {\n            status: VMStatus.VM_ERROR,\n            detailedMessage: vmFailureCond.message,\n        };\n    }\n    return null;\n};\nconst isBeingStopped = (vm) => {\n    if (vm && !isVMExpectedRunning(vm) && isVMCreated(vm)) {\n        return {\n            status: VMStatus.STOPPING,\n        };\n    }\n    return null;\n};\nconst isOff = (vm) => {\n    return vm && !isVMExpectedRunning(vm) ? { status: VMStatus.OFF } : null;\n};\nconst isError = (vm, vmi, launcherPod) => {\n    const vmiFailureCond = getStatusConditionOfType(vmi, 'Failure');\n    if (vmiFailureCond) {\n        return { status: VMStatus.VMI_ERROR, detailedMessage: vmiFailureCond.message };\n    }\n    if ((vmi || isVMCreated(vm)) && launcherPod) {\n        const podStatus = getPodStatus(launcherPod);\n        if (POD_STATUS_ALL_ERROR.includes(podStatus.status)) {\n            return Object.assign(Object.assign({}, podStatus), { status: VMStatus.POD_ERROR, pod: launcherPod });\n        }\n    }\n    return null;\n};\nconst isRunning = (vmi) => {\n    if (getStatusPhase(vmi) === VMIPhase.Running) {\n        return {\n            status: VMStatus.RUNNING,\n        };\n    }\n    return null;\n};\nconst isStarting = (vm, launcherPod = null) => {\n    if (vm && isVMExpectedRunning(vm) && isVMCreated(vm)) {\n        // created but not yet ready\n        if (launcherPod) {\n            const podStatus = getPodStatus(launcherPod);\n            if (!POD_STATUS_ALL_READY.includes(podStatus.status)) {\n                return Object.assign(Object.assign({}, podStatus), { status: VMStatus.STARTING, message: STARTING_MESSAGE, detailedMessage: podStatus.message, pod: launcherPod });\n            }\n        }\n        return { status: VMStatus.STARTING, message: STARTING_MESSAGE, pod: launcherPod };\n    }\n    return null;\n};\nconst isWaitingForVMI = (vm) => {\n    if (vm && isVMExpectedRunning(vm) && !isVMCreated(vm)) {\n        return { status: VMStatus.VMI_WAITING, message: VMI_WAITING_MESSAGE };\n    }\n    return null;\n};\nexport const getVMStatus = ({ vm, vmi, pods, migrations, dataVolumes, vmImports, }) => {\n    const launcherPod = findVMIPod(vmi, pods);\n    return (isPaused(vmi) ||\n        isV2VVMWareConversion(vm, pods) || // these statuses must precede isRunning() because they do not rely on ready vms\n        isV2VVMImportConversion(vm, vmImports) ||\n        isBeingMigrated(vm, vmi, migrations) ||\n        isBeingImported(vm, pods, dataVolumes) ||\n        isVMError(vm) ||\n        isBeingStopped(vm) ||\n        isOff(vm) ||\n        isError(vm, vmi, launcherPod) ||\n        isRunning(vmi) ||\n        isStarting(vm, launcherPod) ||\n        isWaitingForVMI(vm) ||\n        ([VMIPhase.Scheduling, VMIPhase.Scheduled].includes(getStatusPhase(vmi)) && {\n            status: VMStatus.STARTING,\n            message: STARTING_MESSAGE,\n        }) ||\n        (getStatusPhase(vmi) === VMIPhase.Pending && {\n            status: VMStatus.VMI_WAITING,\n            message: VMI_WAITING_MESSAGE,\n        }) ||\n        (getStatusPhase(vmi) === VMIPhase.Failed && { status: VMStatus.VMI_ERROR }) || {\n        status: VMStatus.UNKNOWN,\n    });\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/statuses/vm/vm-status.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/statuses/vm/vm-status.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,iBAAiB,EAAE,MAAM,iCAAiC,CAAC;AACpE,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,kBAAkB,EAAE,MAAM,sCAAsC,CAAC,CAAC,iDAAiD;AACnJ,OAAO,EAAE,qBAAqB,EAAE,MAAM,4CAA4C,CAAC;AACnF,OAAO,EACL,mBAAmB,EACnB,2BAA2B,EAC3B,WAAW,EACX,eAAe,GAChB,MAAM,aAAa,CAAC;AACrB,OAAO,EACL,sBAAsB,EACtB,aAAa,EACb,wBAAwB,EACxB,cAAc,GACf,MAAM,2BAA2B,CAAC;AACnC,OAAO,EACL,gBAAgB,EAChB,uBAAuB,EACvB,WAAW,GACZ,MAAM,+BAA+B,CAAC;AACvC,OAAO,EAAE,UAAU,EAAE,iBAAiB,EAAE,iBAAiB,EAAE,MAAM,+BAA+B,CAAC;AACjG,OAAO,EAAE,iBAAiB,EAAE,WAAW,EAAE,mBAAmB,EAAE,MAAM,oBAAoB,CAAC;AACzF,OAAO,EAAE,YAAY,EAAE,MAAM,YAAY,CAAC;AAC1C,OAAO,EACL,iBAAiB,EACjB,kBAAkB,EAClB,oBAAoB,EACpB,oBAAoB,EACpB,0BAA0B,GAC3B,MAAM,kBAAkB,CAAC;AAE1B,OAAO,EAAE,WAAW,EAAE,MAAM,2BAA2B,CAAC;AAExD,OAAO,EAAE,yBAAyB,EAAE,MAAM,cAAc,CAAC;AACzD,OAAO,EAAE,iBAAiB,EAAE,MAAM,+BAA+B,CAAC;AAClE,OAAO,EAAE,QAAQ,EAAE,MAAM,8BAA8B,CAAC;AAExD,OAAO,EACL,0BAA0B,EAC1B,2BAA2B,EAC3B,qBAAqB,EACrB,8BAA8B,EAC9B,wBAAwB,EACxB,gBAAgB,EAChB,mBAAmB,GACpB,MAAM,yBAAyB,CAAC;AACjC,OAAO,EAAE,eAAe,EAAE,uBAAuB,EAAE,MAAM,iBAAiB,CAAC;AAC3E,OAAO,EAAE,8BAA8B,EAAE,MAAM,qBAAqB,CAAC;AACrE,OAAO,EAAE,uBAAuB,EAAE,MAAM,oBAAoB,CAAC;AAE7D,OAAO,EAAE,QAAQ,EAAE,MAAM,2BAA2B,CAAC;AAErD,MAAM,QAAQ,GAAG,CAAC,GAAY,EAAkB,EAAE,CAChD,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,QAAQ,CAAC,MAAM,EAAE,OAAO,EAAE,uBAAuB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;AAE1F,MAAM,qBAAqB,GAAG,CAAC,EAAU,EAAE,IAAgB,EAAkB,EAAE;IAC7E,IAAI,CAAC,EAAE,IAAI,CAAC,IAAI,EAAE;QAChB,OAAO,IAAI,CAAC;KACb;IAED,MAAM,aAAa,GAAG,iBAAiB,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;IAClD,MAAM,QAAQ,GAAG,iBAAiB,CAAC,aAAa,CAAC,CAAC;IAClD,IAAI,aAAa,IAAI,QAAQ,KAAK,kBAAkB,EAAE;QACpD,MAAM,mBAAmB,GAAG,YAAY,CAAC,aAAa,CAAC,CAAC;QACxD,IAAI,QAAQ,KAAK,iBAAiB,EAAE;YAClC,uCACK,mBAAmB,KACtB,MAAM,EAAE,QAAQ,CAAC,sBAAsB,EACvC,OAAO,EAAE,wBAAwB,EACjC,eAAe,EAAE,mBAAmB,CAAC,OAAO,EAC5C,GAAG,EAAE,aAAa,EAClB,QAAQ,EAAE,IAAI,IACd;SACH;QACD,IAAI,oBAAoB,CAAC,QAAQ,CAAC,mBAAmB,CAAC,MAAM,CAAC,EAAE;YAC7D,uCACK,mBAAmB,KACtB,MAAM,EAAE,QAAQ,CAAC,oBAAoB,EACrC,OAAO,EAAE,8BAA8B,EACvC,eAAe,EAAE,mBAAmB,CAAC,OAAO,EAC5C,GAAG,EAAE,aAAa,EAClB,QAAQ,EAAE,IAAI,IACd;SACH;QACD,MAAM,QAAQ,GAAG,WAAW,CAC1B,sBAAsB,CAAC,aAAa,EAAE,8BAA8B,CAAC,EACrE,CAAC,CACF,CAAC;QACF,uCACK,mBAAmB,KACtB,MAAM,EAAE,QAAQ,CAAC,0BAA0B,EAC3C,OAAO,EAAE,wBAAwB,EACjC,GAAG,EAAE,aAAa,EAClB,QAAQ,IACR;KACH;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,uBAAuB,GAAG,CAAC,EAAU,EAAE,SAA0B,EAAkB,EAAE;IACzF,MAAM,sBAAsB,GAAG,CAAC,kBAAkB,CAAC,EAAE,CAAC,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,SAAS,EAAE,EAAE,CAC/E,qBAAqB,CAAC,SAAS,EAAE,2BAA2B,CAAC,yBAAyB,CAAC,EAAE,IAAI,CAAC,CAC/F,CAAC;IACF,IAAI,CAAC,sBAAsB,IAAI,CAAC,SAAS,EAAE;QACzC,OAAO,IAAI,CAAC;KACb;IACD,MAAM,QAAQ,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CACpC,qBAAqB,CAAC,mBAAmB,CAAC,CAAC,CAAC,EAAE,sBAAsB,CAAC,CACtE,CAAC;IAEF,MAAM,YAAY,GAAG,iBAAiB,CAAC,EAAE,QAAQ,EAAE,CAAC,CAAC;IAErD,IAAI,YAAY,CAAC,MAAM,CAAC,WAAW,EAAE,IAAI,YAAY,CAAC,MAAM,CAAC,SAAS,EAAE,EAAE;QACxE,OAAO,IAAI,CAAC;KACb;IAED,uCACK,YAAY,KACf,MAAM,EAAE,QAAQ,CAAC,mBAAmB,CAAC,YAAY,CAAC,MAAM,CAAC,IACzD;AACJ,CAAC,CAAC;AAEF,MAAM,eAAe,GAAG,CACtB,EAAU,EACV,GAAY,EACZ,UAA8B,EACd,EAAE;IAClB,MAAM,IAAI,GAAG,OAAO,CAAC,EAAE,IAAI,GAAG,CAAC,CAAC;IAChC,MAAM,SAAS,GAAG,YAAY,CAAC,EAAE,IAAI,GAAG,CAAC,CAAC;IAE1C,MAAM,SAAS,GAAG,gBAAgB,CAAC,IAAI,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;IAChE,IAAI,WAAW,CAAC,SAAS,CAAC,EAAE;QAC1B,OAAO;YACL,MAAM,EAAE,QAAQ,CAAC,SAAS;YAC1B,SAAS;YACT,eAAe,EAAE,uBAAuB,CAAC,SAAS,CAAC;SACpD,CAAC;KACH;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,eAAe,GAAG,CACtB,EAAU,EACV,IAAgB,EAChB,WAAkC,EAClB,EAAE;IAClB,MAAM,YAAY,GAAG,iBAAiB,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;IACjD,IAAI,YAAY,IAAI,YAAY,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,EAAE;QAC/D,MAAM,QAAQ,GAAG,iBAAiB,CAAC,WAAW,EAAE,OAAO,CAAC,CAAC;QACzD,MAAM,oBAAoB,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE;;YACpD,MAAM,SAAS,GAAG,YAAY,CAAC,GAAG,CAAC,CAAC;YACpC,MAAM,MAAM,GAAG,aAAa,CAAC,GAAG,EAAE,GAAG,eAAe,IAAI,uBAAuB,EAAE,CAAC,CAAC;YACnF,MAAM,UAAU,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC;YAEpC,IAAI,oBAAoB,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;gBACnD,IAAI,MAAM,GAAG,QAAQ,CAAC,gBAAgB,CAAC;gBACvC,IACE,SAAS,CAAC,MAAM,KAAK,0BAA0B;oBAC/C,iBAAiB,CAAC,GAAG,CAAC,KAAK,iBAAiB,EAC5C;oBACA,MAAM,GAAG,QAAQ,CAAC,kBAAkB,CAAC;iBACtC;gBAED,OAAO;oBACL,OAAO,EAAE,SAAS,CAAC,OAAO;oBAC1B,MAAM;oBACN,QAAQ,EAAE,IAAI;oBACd,UAAU;oBACV,GAAG;iBACJ,CAAC;aACH;YACD,OAAO;gBACL,MAAM,EAAE,QAAQ,CAAC,aAAa;gBAC9B,OAAO,EAAE,SAAS,CAAC,OAAO;gBAC1B,GAAG;gBACH,UAAU;gBACV,QAAQ,EAAE,eAAe,OAAC,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,MAAM,0CAAE,QAAQ,EAAE,CAAC,CAAC;aAC3D,CAAC;QACJ,CAAC,CAAC,CAAC;QACH,MAAM,YAAY,GAChB,oBAAoB,CAAC,IAAI,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE,CAAC;YAC3D,oBAAoB,CAAC,IAAI,CAAC,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,MAAM,CAAC,SAAS,EAAE,CAAC;YAC7D,oBAAoB,CAAC,CAAC,CAAC,CAAC;QAC1B,MAAM,YAAY,GAAG,CAAA,YAAY,aAAZ,YAAY,uBAAZ,YAAY,CAAE,MAAM,KAAI,QAAQ,CAAC,kBAAkB,CAAC;QACzE,OAAO;YACL,MAAM,EAAE,YAAY;YACpB,OAAO,EAAE,YAAY,CAAC,OAAO,EAAE;gBAC7B,CAAC,CAAC,2BAA2B;gBAC7B,CAAC,CAAC,YAAY,CAAC,SAAS,EAAE;oBAC1B,CAAC,CAAC,0BAA0B;oBAC5B,CAAC,CAAC,qBAAqB;YACzB,oBAAoB;SACrB,CAAC;KACH;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,SAAS,GAAG,CAAC,EAAU,EAAkB,EAAE;IAC/C,MAAM,aAAa,GAAG,wBAAwB,CAAC,EAAE,EAAE,SAAS,CAAC,CAAC;IAC9D,IAAI,aAAa,EAAE;QACjB,OAAO;YACL,MAAM,EAAE,QAAQ,CAAC,QAAQ;YACzB,eAAe,EAAE,aAAa,CAAC,OAAO;SACvC,CAAC;KACH;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,cAAc,GAAG,CAAC,EAAU,EAAkB,EAAE;IACpD,IAAI,EAAE,IAAI,CAAC,mBAAmB,CAAC,EAAE,CAAC,IAAI,WAAW,CAAC,EAAE,CAAC,EAAE;QACrD,OAAO;YACL,MAAM,EAAE,QAAQ,CAAC,QAAQ;SAC1B,CAAC;KACH;IAED,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,KAAK,GAAG,CAAC,EAAU,EAAkB,EAAE;IAC3C,OAAO,EAAE,IAAI,CAAC,mBAAmB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;AAC1E,CAAC,CAAC;AAEF,MAAM,OAAO,GAAG,CAAC,EAAU,EAAE,GAAY,EAAE,WAAoB,EAAkB,EAAE;IACjF,MAAM,cAAc,GAAG,wBAAwB,CAAC,GAAG,EAAE,SAAS,CAAC,CAAC;IAChE,IAAI,cAAc,EAAE;QAClB,OAAO,EAAE,MAAM,EAAE,QAAQ,CAAC,SAAS,EAAE,eAAe,EAAE,cAAc,CAAC,OAAO,EAAE,CAAC;KAChF;IAED,IAAI,CAAC,GAAG,IAAI,WAAW,CAAC,EAAE,CAAC,CAAC,IAAI,WAAW,EAAE;QAC3C,MAAM,SAAS,GAAG,YAAY,CAAC,WAAW,CAAC,CAAC;QAC5C,IAAI,oBAAoB,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;YACnD,uCACK,SAAS,KACZ,MAAM,EAAE,QAAQ,CAAC,SAAS,EAC1B,GAAG,EAAE,WAAW,IAChB;SACH;KACF;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,SAAS,GAAG,CAAC,GAAY,EAAkB,EAAE;IACjD,IAAI,cAAc,CAAC,GAAG,CAAC,KAAK,QAAQ,CAAC,OAAO,EAAE;QAC5C,OAAO;YACL,MAAM,EAAE,QAAQ,CAAC,OAAO;SACzB,CAAC;KACH;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,UAAU,GAAG,CAAC,EAAU,EAAE,cAAuB,IAAI,EAAkB,EAAE;IAC7E,IAAI,EAAE,IAAI,mBAAmB,CAAC,EAAE,CAAC,IAAI,WAAW,CAAC,EAAE,CAAC,EAAE;QACpD,4BAA4B;QAC5B,IAAI,WAAW,EAAE;YACf,MAAM,SAAS,GAAG,YAAY,CAAC,WAAW,CAAC,CAAC;YAC5C,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,SAAS,CAAC,MAAM,CAAC,EAAE;gBACpD,uCACK,SAAS,KACZ,MAAM,EAAE,QAAQ,CAAC,QAAQ,EACzB,OAAO,EAAE,gBAAgB,EACzB,eAAe,EAAE,SAAS,CAAC,OAAO,EAClC,GAAG,EAAE,WAAW,IAChB;aACH;SACF;QACD,OAAO,EAAE,MAAM,EAAE,QAAQ,CAAC,QAAQ,EAAE,OAAO,EAAE,gBAAgB,EAAE,GAAG,EAAE,WAAW,EAAE,CAAC;KACnF;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,eAAe,GAAG,CAAC,EAAU,EAAkB,EAAE;IACrD,IAAI,EAAE,IAAI,mBAAmB,CAAC,EAAE,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,EAAE;QACrD,OAAO,EAAE,MAAM,EAAE,QAAQ,CAAC,WAAW,EAAE,OAAO,EAAE,mBAAmB,EAAE,CAAC;KACvE;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,EAC1B,EAAE,EACF,GAAG,EACH,IAAI,EACJ,UAAU,EACV,WAAW,EACX,SAAS,GAQV,EAAkB,EAAE;IACnB,MAAM,WAAW,GAAG,UAAU,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;IAE1C,OAAO,CACL,QAAQ,CAAC,GAAG,CAAC;QACb,qBAAqB,CAAC,EAAE,EAAE,IAAI,CAAC,IAAI,gFAAgF;QACnH,uBAAuB,CAAC,EAAE,EAAE,SAAS,CAAC;QACtC,eAAe,CAAC,EAAE,EAAE,GAAG,EAAE,UAAU,CAAC;QACpC,eAAe,CAAC,EAAE,EAAE,IAAI,EAAE,WAAW,CAAC;QACtC,SAAS,CAAC,EAAE,CAAC;QACb,cAAc,CAAC,EAAE,CAAC;QAClB,KAAK,CAAC,EAAE,CAAC;QACT,OAAO,CAAC,EAAE,EAAE,GAAG,EAAE,WAAW,CAAC;QAC7B,SAAS,CAAC,GAAG,CAAC;QACd,UAAU,CAAC,EAAE,EAAE,WAAW,CAAC;QAC3B,eAAe,CAAC,EAAE,CAAC;QACnB,CAAC,CAAC,QAAQ,CAAC,UAAU,EAAE,QAAQ,CAAC,SAAS,CAAC,CAAC,QAAQ,CAAC,cAAc,CAAW,GAAG,CAAC,CAAC,IAAI;YACpF,MAAM,EAAE,QAAQ,CAAC,QAAQ;YACzB,OAAO,EAAE,gBAAgB;SAC1B,CAAC;QACF,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,QAAQ,CAAC,OAAO,IAAI;YAC3C,MAAM,EAAE,QAAQ,CAAC,WAAW;YAC5B,OAAO,EAAE,mBAAmB;SAC7B,CAAC;QACF,CAAC,cAAc,CAAC,GAAG,CAAC,KAAK,QAAQ,CAAC,MAAM,IAAI,EAAE,MAAM,EAAE,QAAQ,CAAC,SAAS,EAAE,CAAC,IAAI;QAC7E,MAAM,EAAE,QAAQ,CAAC,OAAO;KACzB,CACF,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { K8sResourceKind, PodKind } from '@console/internal/module/k8s';\nimport { createBasicLookup } from '@console/shared/src/utils/utils';\nimport { getName, getNamespace, getOwnerReferences } from '@console/shared/src/selectors/common'; // do not import just from shared - causes cycles\nimport { compareOwnerReference } from '@console/shared/src/utils/owner-references';\nimport {\n  buildOwnerReference,\n  buildOwnerReferenceForModel,\n  parseNumber,\n  parsePercentage,\n} from '../../utils';\nimport {\n  getAnnotationKeySuffix,\n  getLabelValue,\n  getStatusConditionOfType,\n  getStatusPhase,\n} from '../../selectors/selectors';\nimport {\n  findVMIMigration,\n  getMigrationStatusPhase,\n  isMigrating,\n} from '../../selectors/vmi-migration';\nimport { findVMIPod, getPodStatusPhase, getVMImporterPods } from '../../selectors/pod/selectors';\nimport { findConversionPod, isVMCreated, isVMExpectedRunning } from '../../selectors/vm';\nimport { getPodStatus } from '../pod/pod';\nimport {\n  POD_PHASE_PENDING,\n  POD_PHASE_SUCEEDED,\n  POD_STATUS_ALL_ERROR,\n  POD_STATUS_ALL_READY,\n  POD_STATUS_NOT_SCHEDULABLE,\n} from '../pod/constants';\nimport { VMIKind, VMKind } from '../../types';\nimport { isVMIPaused } from '../../selectors/vmi/basic';\nimport { VMImportKind } from '../../types/vm-import/ovirt/vm-import';\nimport { VirtualMachineImportModel } from '../../models';\nimport { getVMImportStatus } from '../vm-import/vm-import-status';\nimport { VMStatus } from '../../constants/vm/vm-status';\nimport { VMStatusBundle } from './types';\nimport {\n  IMPORT_CDI_PENDING_MESSAGE,\n  IMPORTING_CDI_ERROR_MESSAGE,\n  IMPORTING_CDI_MESSAGE,\n  IMPORTING_ERROR_VMWARE_MESSAGE,\n  IMPORTING_VMWARE_MESSAGE,\n  STARTING_MESSAGE,\n  VMI_WAITING_MESSAGE,\n} from '../../strings/vm/status';\nimport { CDI_KUBEVIRT_IO, STORAGE_IMPORT_PVC_NAME } from '../../constants';\nimport { CONVERSION_PROGRESS_ANNOTATION } from '../../constants/v2v';\nimport { PAUSED_VM_MODAL_MESSAGE } from '../../constants/vm';\nimport { V1alpha1DataVolume } from '../../types/vm/disk/V1alpha1DataVolume';\nimport { VMIPhase } from '../../constants/vmi/phase';\n\nconst isPaused = (vmi: VMIKind): VMStatusBundle =>\n  isVMIPaused(vmi) ? { status: VMStatus.PAUSED, message: PAUSED_VM_MODAL_MESSAGE } : null;\n\nconst isV2VVMWareConversion = (vm: VMKind, pods?: PodKind[]): VMStatusBundle => {\n  if (!vm || !pods) {\n    return null;\n  }\n\n  const conversionPod = findConversionPod(vm, pods);\n  const podPhase = getPodStatusPhase(conversionPod);\n  if (conversionPod && podPhase !== POD_PHASE_SUCEEDED) {\n    const conversionPodStatus = getPodStatus(conversionPod);\n    if (podPhase === POD_PHASE_PENDING) {\n      return {\n        ...conversionPodStatus,\n        status: VMStatus.V2V_CONVERSION_PENDING,\n        message: IMPORTING_VMWARE_MESSAGE,\n        detailedMessage: conversionPodStatus.message,\n        pod: conversionPod,\n        progress: null,\n      };\n    }\n    if (POD_STATUS_ALL_ERROR.includes(conversionPodStatus.status)) {\n      return {\n        ...conversionPodStatus,\n        status: VMStatus.V2V_CONVERSION_ERROR,\n        message: IMPORTING_ERROR_VMWARE_MESSAGE,\n        detailedMessage: conversionPodStatus.message,\n        pod: conversionPod,\n        progress: null,\n      };\n    }\n    const progress = parseNumber(\n      getAnnotationKeySuffix(conversionPod, CONVERSION_PROGRESS_ANNOTATION),\n      0,\n    );\n    return {\n      ...conversionPodStatus,\n      status: VMStatus.V2V_CONVERSION_IN_PROGRESS,\n      message: IMPORTING_VMWARE_MESSAGE,\n      pod: conversionPod,\n      progress,\n    };\n  }\n  return null;\n};\n\nconst isV2VVMImportConversion = (vm: VMKind, vmImports?: VMImportKind[]): VMStatusBundle => {\n  const vmImportOwnerReference = (getOwnerReferences(vm) || []).find((reference) =>\n    compareOwnerReference(reference, buildOwnerReferenceForModel(VirtualMachineImportModel), true),\n  );\n  if (!vmImportOwnerReference || !vmImports) {\n    return null;\n  }\n  const vmImport = vmImports.find((i) =>\n    compareOwnerReference(buildOwnerReference(i), vmImportOwnerReference),\n  );\n\n  const statusBundle = getVMImportStatus({ vmImport });\n\n  if (statusBundle.status.isCompleted() || statusBundle.status.isUnknown()) {\n    return null;\n  }\n\n  return {\n    ...statusBundle,\n    status: VMStatus.fromV2VImportStatus(statusBundle.status),\n  };\n};\n\nconst isBeingMigrated = (\n  vm: VMKind,\n  vmi: VMIKind,\n  migrations?: K8sResourceKind[],\n): VMStatusBundle => {\n  const name = getName(vm || vmi);\n  const namespace = getNamespace(vm || vmi);\n\n  const migration = findVMIMigration(name, namespace, migrations);\n  if (isMigrating(migration)) {\n    return {\n      status: VMStatus.MIGRATING,\n      migration,\n      detailedMessage: getMigrationStatusPhase(migration),\n    };\n  }\n  return null;\n};\n\nconst isBeingImported = (\n  vm: VMKind,\n  pods?: PodKind[],\n  dataVolumes?: V1alpha1DataVolume[],\n): VMStatusBundle => {\n  const importerPods = getVMImporterPods(vm, pods);\n  if (importerPods && importerPods.length > 0 && !isVMCreated(vm)) {\n    const dvLookup = createBasicLookup(dataVolumes, getName);\n    const importerPodsStatuses = importerPods.map((pod) => {\n      const podStatus = getPodStatus(pod);\n      const dvName = getLabelValue(pod, `${CDI_KUBEVIRT_IO}/${STORAGE_IMPORT_PVC_NAME}`);\n      const dataVolume = dvLookup[dvName];\n\n      if (POD_STATUS_ALL_ERROR.includes(podStatus.status)) {\n        let status = VMStatus.CDI_IMPORT_ERROR;\n        if (\n          podStatus.status === POD_STATUS_NOT_SCHEDULABLE &&\n          getPodStatusPhase(pod) === POD_PHASE_PENDING\n        ) {\n          status = VMStatus.CDI_IMPORT_PENDING;\n        }\n\n        return {\n          message: podStatus.message,\n          status,\n          progress: null,\n          dataVolume,\n          pod,\n        };\n      }\n      return {\n        status: VMStatus.CDI_IMPORTING,\n        message: podStatus.message,\n        pod,\n        dataVolume,\n        progress: parsePercentage(dataVolume?.status?.progress, 0),\n      };\n    });\n    const importStatus =\n      importerPodsStatuses.find(({ status }) => status.isError()) ||\n      importerPodsStatuses.find(({ status }) => status.isPending()) ||\n      importerPodsStatuses[0];\n    const resultStatus = importStatus?.status || VMStatus.CDI_IMPORT_PENDING;\n    return {\n      status: resultStatus,\n      message: resultStatus.isError()\n        ? IMPORTING_CDI_ERROR_MESSAGE\n        : resultStatus.isPending()\n        ? IMPORT_CDI_PENDING_MESSAGE\n        : IMPORTING_CDI_MESSAGE,\n      importerPodsStatuses,\n    };\n  }\n  return null;\n};\n\nconst isVMError = (vm: VMKind): VMStatusBundle => {\n  const vmFailureCond = getStatusConditionOfType(vm, 'Failure');\n  if (vmFailureCond) {\n    return {\n      status: VMStatus.VM_ERROR,\n      detailedMessage: vmFailureCond.message,\n    };\n  }\n\n  return null;\n};\n\nconst isBeingStopped = (vm: VMKind): VMStatusBundle => {\n  if (vm && !isVMExpectedRunning(vm) && isVMCreated(vm)) {\n    return {\n      status: VMStatus.STOPPING,\n    };\n  }\n\n  return null;\n};\n\nconst isOff = (vm: VMKind): VMStatusBundle => {\n  return vm && !isVMExpectedRunning(vm) ? { status: VMStatus.OFF } : null;\n};\n\nconst isError = (vm: VMKind, vmi: VMIKind, launcherPod: PodKind): VMStatusBundle => {\n  const vmiFailureCond = getStatusConditionOfType(vmi, 'Failure');\n  if (vmiFailureCond) {\n    return { status: VMStatus.VMI_ERROR, detailedMessage: vmiFailureCond.message };\n  }\n\n  if ((vmi || isVMCreated(vm)) && launcherPod) {\n    const podStatus = getPodStatus(launcherPod);\n    if (POD_STATUS_ALL_ERROR.includes(podStatus.status)) {\n      return {\n        ...podStatus,\n        status: VMStatus.POD_ERROR,\n        pod: launcherPod,\n      };\n    }\n  }\n  return null;\n};\n\nconst isRunning = (vmi: VMIKind): VMStatusBundle => {\n  if (getStatusPhase(vmi) === VMIPhase.Running) {\n    return {\n      status: VMStatus.RUNNING,\n    };\n  }\n  return null;\n};\n\nconst isStarting = (vm: VMKind, launcherPod: PodKind = null): VMStatusBundle => {\n  if (vm && isVMExpectedRunning(vm) && isVMCreated(vm)) {\n    // created but not yet ready\n    if (launcherPod) {\n      const podStatus = getPodStatus(launcherPod);\n      if (!POD_STATUS_ALL_READY.includes(podStatus.status)) {\n        return {\n          ...podStatus,\n          status: VMStatus.STARTING,\n          message: STARTING_MESSAGE,\n          detailedMessage: podStatus.message,\n          pod: launcherPod,\n        };\n      }\n    }\n    return { status: VMStatus.STARTING, message: STARTING_MESSAGE, pod: launcherPod };\n  }\n  return null;\n};\n\nconst isWaitingForVMI = (vm: VMKind): VMStatusBundle => {\n  if (vm && isVMExpectedRunning(vm) && !isVMCreated(vm)) {\n    return { status: VMStatus.VMI_WAITING, message: VMI_WAITING_MESSAGE };\n  }\n  return null;\n};\n\nexport const getVMStatus = ({\n  vm,\n  vmi,\n  pods,\n  migrations,\n  dataVolumes,\n  vmImports,\n}: {\n  vm?: VMKind;\n  vmi?: VMIKind;\n  pods?: PodKind[];\n  dataVolumes?: V1alpha1DataVolume[];\n  migrations?: K8sResourceKind[];\n  vmImports?: VMImportKind[];\n}): VMStatusBundle => {\n  const launcherPod = findVMIPod(vmi, pods);\n\n  return (\n    isPaused(vmi) ||\n    isV2VVMWareConversion(vm, pods) || // these statuses must precede isRunning() because they do not rely on ready vms\n    isV2VVMImportConversion(vm, vmImports) ||\n    isBeingMigrated(vm, vmi, migrations) ||\n    isBeingImported(vm, pods, dataVolumes) ||\n    isVMError(vm) ||\n    isBeingStopped(vm) ||\n    isOff(vm) ||\n    isError(vm, vmi, launcherPod) ||\n    isRunning(vmi) ||\n    isStarting(vm, launcherPod) ||\n    isWaitingForVMI(vm) ||\n    ([VMIPhase.Scheduling, VMIPhase.Scheduled].includes(getStatusPhase<VMIPhase>(vmi)) && {\n      status: VMStatus.STARTING,\n      message: STARTING_MESSAGE,\n    }) ||\n    (getStatusPhase(vmi) === VMIPhase.Pending && {\n      status: VMStatus.VMI_WAITING,\n      message: VMI_WAITING_MESSAGE,\n    }) ||\n    (getStatusPhase(vmi) === VMIPhase.Failed && { status: VMStatus.VMI_ERROR }) || {\n      status: VMStatus.UNKNOWN,\n    }\n  );\n};\n"]}]}