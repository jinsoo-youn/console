{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/patches/vm-template/index.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/patches/vm-template/index.ts","mtime":1615298458660},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { isVM } from '../../../selectors/check-type';\nimport { selectVM } from '../../../selectors/vm-template/basic';\nexport const addPrefixToPatch = (prefix, patch) => (Object.assign(Object.assign({}, patch), { path: `${prefix}${patch.path}` }));\nexport const getTemplatePatchPrefix = (vmTemplate, vm) => {\n    const vmIndex = vmTemplate.objects.indexOf(vm);\n    return vmIndex < 0 ? null : `/objects/${vmIndex}`;\n};\nexport const getVMLikePatches = (vmLikeEntity, patchesSupplier) => {\n    let vm;\n    let templatePrefix = null;\n    if (isVM(vmLikeEntity)) {\n        vm = vmLikeEntity;\n    }\n    else {\n        vm = selectVM(vmLikeEntity);\n        templatePrefix = getTemplatePatchPrefix(vmLikeEntity, vm);\n    }\n    const patches = _.compact(vm ? patchesSupplier(vm) : []);\n    return templatePrefix ? patches.map((p) => addPrefixToPatch(templatePrefix, p)) : patches;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/patches/vm-template/index.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/patches/vm-template/index.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAI5B,OAAO,EAAE,IAAI,EAAE,MAAM,+BAA+B,CAAC;AACrD,OAAO,EAAE,QAAQ,EAAE,MAAM,sCAAsC,CAAC;AAEhE,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,MAAc,EAAE,KAAY,EAAS,EAAE,CAAC,iCACpE,KAAK,KACR,IAAI,EAAE,GAAG,MAAM,GAAG,KAAK,CAAC,IAAI,EAAE,IAC9B,CAAC;AAEH,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,UAAwB,EAAE,EAAU,EAAU,EAAE;IACrF,MAAM,OAAO,GAAG,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;IAC/C,OAAO,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,YAAY,OAAO,EAAE,CAAC;AACpD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAC9B,YAA8B,EAC9B,eAAwC,EAC/B,EAAE;IACX,IAAI,EAAE,CAAC;IACP,IAAI,cAAc,GAAG,IAAI,CAAC;IAC1B,IAAI,IAAI,CAAC,YAAY,CAAC,EAAE;QACtB,EAAE,GAAG,YAAY,CAAC;KACnB;SAAM;QACL,EAAE,GAAG,QAAQ,CAAC,YAA4B,CAAC,CAAC;QAC5C,cAAc,GAAG,sBAAsB,CAAC,YAA4B,EAAE,EAAE,CAAC,CAAC;KAC3E;IAED,MAAM,OAAO,GAAG,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;IAEzD,OAAO,cAAc,CAAC,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,gBAAgB,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC;AAC5F,CAAC,CAAC","sourcesContent":["import * as _ from 'lodash';\nimport { TemplateKind, Patch } from '@console/internal/module/k8s';\nimport { VMLikeEntityKind } from '../../../types/vmLike';\nimport { VMKind } from '../../../types/vm';\nimport { isVM } from '../../../selectors/check-type';\nimport { selectVM } from '../../../selectors/vm-template/basic';\n\nexport const addPrefixToPatch = (prefix: string, patch: Patch): Patch => ({\n  ...patch,\n  path: `${prefix}${patch.path}`,\n});\n\nexport const getTemplatePatchPrefix = (vmTemplate: TemplateKind, vm: VMKind): string => {\n  const vmIndex = vmTemplate.objects.indexOf(vm);\n  return vmIndex < 0 ? null : `/objects/${vmIndex}`;\n};\n\nexport const getVMLikePatches = (\n  vmLikeEntity: VMLikeEntityKind,\n  patchesSupplier: (vm: VMKind) => Patch[],\n): Patch[] => {\n  let vm;\n  let templatePrefix = null;\n  if (isVM(vmLikeEntity)) {\n    vm = vmLikeEntity;\n  } else {\n    vm = selectVM(vmLikeEntity as TemplateKind);\n    templatePrefix = getTemplatePatchPrefix(vmLikeEntity as TemplateKind, vm);\n  }\n\n  const patches = _.compact(vm ? patchesSupplier(vm) : []);\n\n  return templatePrefix ? patches.map((p) => addPrefixToPatch(templatePrefix, p)) : patches;\n};\n"]}]}