{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/operators/operators-data-transformer.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/operators/operators-data-transformer.ts","mtime":1617154808370},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { getDefaultOperatorIcon, getImageForCSVIcon, getOperatorBackedServiceKindMap } from '@console/shared/src';\nimport { TYPE_OPERATOR_BACKED_SERVICE, TYPE_OPERATOR_WORKLOAD } from './components/const';\nimport { addToTopologyDataModel, createInstanceForResource, createTopologyNodeData, getTopologyEdgeItems, getTopologyGroupItems, getTopologyNodeItem, mergeGroup } from '../data-transforms/transform-utils';\nexport const getOperatorTopologyDataModel = (resources, allResources, installedOperators, utils, transformBy, serviceBindingRequests) => {\n    const operatorsDataModel = {\n        graph: { nodes: [], edges: [], groups: [] },\n        topology: {},\n    };\n    const operatorBackedServiceKindMap = getOperatorBackedServiceKindMap(installedOperators);\n    const operatorMap = {};\n    const obsGroups = {};\n    const transformResourceData = createInstanceForResource(resources, utils, installedOperators);\n    _.forEach(transformBy, key => {\n        if (!_.isEmpty(resources[key].data)) {\n            const typedDataModel = {\n                graph: { nodes: [], edges: [], groups: [] },\n                topology: {},\n            };\n            transformResourceData[key](resources[key].data, true).forEach(item => {\n                var _a, _b, _c, _d, _e, _f, _g, _h, _j;\n                const { obj: deploymentConfig } = item;\n                const uid = (_a = deploymentConfig === null || deploymentConfig === void 0 ? void 0 : deploymentConfig.metadata) === null || _a === void 0 ? void 0 : _a.uid;\n                const ownerReference = (_c = (_b = deploymentConfig === null || deploymentConfig === void 0 ? void 0 : deploymentConfig.metadata) === null || _b === void 0 ? void 0 : _b.ownerReferences) === null || _c === void 0 ? void 0 : _c[0];\n                const ownerUid = ownerReference === null || ownerReference === void 0 ? void 0 : ownerReference.uid;\n                const nodeResourceKind = ownerReference === null || ownerReference === void 0 ? void 0 : ownerReference.kind;\n                const operatorBackedServiceKind = operatorBackedServiceKindMap === null || operatorBackedServiceKindMap === void 0 ? void 0 : operatorBackedServiceKindMap[nodeResourceKind];\n                const appGroup = (_e = (_d = deploymentConfig === null || deploymentConfig === void 0 ? void 0 : deploymentConfig.metadata) === null || _d === void 0 ? void 0 : _d.labels) === null || _e === void 0 ? void 0 : _e['app.kubernetes.io/part-of'];\n                let operator = _.find(installedOperators, {\n                    metadata: { uid: ownerUid },\n                });\n                if (_.isEmpty(operator)) {\n                    operator = operatorBackedServiceKind;\n                }\n                const csvIcon = ((_g = (_f = operatorBackedServiceKind === null || operatorBackedServiceKind === void 0 ? void 0 : operatorBackedServiceKind.spec) === null || _f === void 0 ? void 0 : _f.icon) === null || _g === void 0 ? void 0 : _g[0]) || ((_j = (_h = operator === null || operator === void 0 ? void 0 : operator.spec) === null || _h === void 0 ? void 0 : _h.icon) === null || _j === void 0 ? void 0 : _j[0]);\n                const operatorName = appGroup ? `${appGroup}:${operator.metadata.name}` : operator.metadata.name;\n                typedDataModel.topology[uid] = createTopologyNodeData(item, TYPE_OPERATOR_BACKED_SERVICE, getImageForCSVIcon(csvIcon) || getDefaultOperatorIcon(), true);\n                typedDataModel.graph.nodes.push(getTopologyNodeItem(deploymentConfig, TYPE_OPERATOR_WORKLOAD));\n                typedDataModel.graph.edges.push(...getTopologyEdgeItems(deploymentConfig, allResources, serviceBindingRequests));\n                operatorMap[operatorName] = _.merge({}, operator, {\n                    metadata: {\n                        uid: `${operatorName}:${operator.metadata.uid}`,\n                    },\n                });\n                if (!(operatorName in obsGroups)) {\n                    obsGroups[operatorName] = [];\n                }\n                obsGroups[operatorName].push(deploymentConfig.metadata.uid);\n                if (appGroup) {\n                    const newGroup = getTopologyGroupItems(_.merge({}, deploymentConfig, {\n                        metadata: {\n                            uid: `${operatorName}:${operator.metadata.uid}`,\n                        },\n                    }));\n                    mergeGroup(newGroup, typedDataModel.graph.groups);\n                }\n            });\n            addToTopologyDataModel(typedDataModel, operatorsDataModel);\n        }\n    });\n    _.forIn(obsGroups, (children, grp) => {\n        var _a, _b, _c;\n        const groupDataModel = {\n            graph: { nodes: [], edges: [], groups: [] },\n            topology: {},\n        };\n        groupDataModel.graph.nodes.push(getTopologyNodeItem(operatorMap[grp], TYPE_OPERATOR_BACKED_SERVICE, children));\n        groupDataModel.topology[operatorMap[grp].metadata.uid] = {\n            id: operatorMap[grp].metadata.uid,\n            name: operatorMap[grp].metadata.name,\n            type: TYPE_OPERATOR_BACKED_SERVICE,\n            resources: {\n                obj: operatorMap[grp],\n                buildConfigs: [],\n                routes: [],\n                services: [],\n                isOperatorBackedService: true,\n            },\n            operatorBackedService: true,\n            data: {\n                builderImage: getImageForCSVIcon((_c = (_b = (_a = operatorMap === null || operatorMap === void 0 ? void 0 : operatorMap[grp]) === null || _a === void 0 ? void 0 : _a.spec) === null || _b === void 0 ? void 0 : _b.icon) === null || _c === void 0 ? void 0 : _c[0]) || getDefaultOperatorIcon(),\n            },\n        };\n        addToTopologyDataModel(groupDataModel, operatorsDataModel);\n    });\n    _.forEach(transformBy, key => {\n        const operatorResources = transformResourceData[key](resources[key].data, true);\n        if (!_.isEmpty(resources[key].data) && !_.isEmpty(operatorResources)) {\n            resources[key].data = resources[key].data.filter(resource => !operatorResources.find(operatorResource => operatorResource.obj.metadata.uid === resource.metadata.uid));\n        }\n    });\n    return operatorsDataModel;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/operators/operators-data-transformer.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/operators/operators-data-transformer.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { getDefaultOperatorIcon, getImageForCSVIcon, getOperatorBackedServiceKindMap } from '@console/shared/src';\nimport { ClusterServiceVersionKind } from '@console/operator-lifecycle-manager/src';\nimport { TopologyDataModel, TopologyDataResources } from '../topology-types';\nimport { TYPE_OPERATOR_BACKED_SERVICE, TYPE_OPERATOR_WORKLOAD } from './components/const';\nimport { addToTopologyDataModel, createInstanceForResource, createTopologyNodeData, getTopologyEdgeItems, getTopologyGroupItems, getTopologyNodeItem, mergeGroup } from '../data-transforms/transform-utils';\n\nexport const getOperatorTopologyDataModel = (resources: TopologyDataResources, allResources: K8sResourceKind[], installedOperators: ClusterServiceVersionKind[], utils: Function[], transformBy: string[], serviceBindingRequests: K8sResourceKind[]): TopologyDataModel => {\n  const operatorsDataModel: TopologyDataModel = {\n    graph: { nodes: [], edges: [], groups: [] },\n    topology: {},\n  };\n  const operatorBackedServiceKindMap = getOperatorBackedServiceKindMap(installedOperators);\n  const operatorMap = {};\n  const obsGroups = {};\n  const transformResourceData = createInstanceForResource(resources, utils, installedOperators);\n\n  _.forEach(transformBy, key => {\n    if (!_.isEmpty(resources[key].data)) {\n      const typedDataModel: TopologyDataModel = {\n        graph: { nodes: [], edges: [], groups: [] },\n        topology: {},\n      };\n\n      transformResourceData[key](resources[key].data, true).forEach(item => {\n        const { obj: deploymentConfig } = item;\n        const uid = deploymentConfig?.metadata?.uid;\n        const ownerReference = deploymentConfig?.metadata?.ownerReferences?.[0];\n        const ownerUid = ownerReference?.uid;\n        const nodeResourceKind = ownerReference?.kind;\n        const operatorBackedServiceKind = operatorBackedServiceKindMap?.[nodeResourceKind];\n        const appGroup = deploymentConfig?.metadata?.labels?.['app.kubernetes.io/part-of'];\n        let operator: K8sResourceKind = _.find(installedOperators, {\n          metadata: { uid: ownerUid },\n        }) as K8sResourceKind;\n\n        if (_.isEmpty(operator)) {\n          operator = operatorBackedServiceKind;\n        }\n\n        const csvIcon = operatorBackedServiceKind?.spec?.icon?.[0] || operator?.spec?.icon?.[0];\n\n        const operatorName = appGroup ? `${appGroup}:${operator.metadata.name}` : operator.metadata.name;\n        typedDataModel.topology[uid] = createTopologyNodeData(item, TYPE_OPERATOR_BACKED_SERVICE, getImageForCSVIcon(csvIcon) || getDefaultOperatorIcon(), true);\n        typedDataModel.graph.nodes.push(getTopologyNodeItem(deploymentConfig, TYPE_OPERATOR_WORKLOAD));\n        typedDataModel.graph.edges.push(...getTopologyEdgeItems(deploymentConfig, allResources, serviceBindingRequests));\n        operatorMap[operatorName] = _.merge({}, operator, {\n          metadata: {\n            uid: `${operatorName}:${operator.metadata.uid}`,\n          },\n        });\n        if (!(operatorName in obsGroups)) {\n          obsGroups[operatorName] = [];\n        }\n        obsGroups[operatorName].push(deploymentConfig.metadata.uid);\n        if (appGroup) {\n          const newGroup = getTopologyGroupItems(\n            _.merge({}, deploymentConfig, {\n              metadata: {\n                uid: `${operatorName}:${operator.metadata.uid}`,\n              },\n            }),\n          );\n          mergeGroup(newGroup, typedDataModel.graph.groups);\n        }\n      });\n      addToTopologyDataModel(typedDataModel, operatorsDataModel);\n    }\n  });\n\n  _.forIn(obsGroups, (children, grp) => {\n    const groupDataModel: TopologyDataModel = {\n      graph: { nodes: [], edges: [], groups: [] },\n      topology: {},\n    };\n    groupDataModel.graph.nodes.push(getTopologyNodeItem(operatorMap[grp], TYPE_OPERATOR_BACKED_SERVICE, children));\n\n    groupDataModel.topology[operatorMap[grp].metadata.uid] = {\n      id: operatorMap[grp].metadata.uid,\n      name: operatorMap[grp].metadata.name,\n      type: TYPE_OPERATOR_BACKED_SERVICE,\n      resources: {\n        obj: operatorMap[grp],\n        buildConfigs: [],\n        routes: [],\n        services: [],\n        isOperatorBackedService: true,\n      },\n      operatorBackedService: true,\n      data: {\n        builderImage: getImageForCSVIcon(operatorMap?.[grp]?.spec?.icon?.[0]) || getDefaultOperatorIcon(),\n      },\n    };\n    addToTopologyDataModel(groupDataModel, operatorsDataModel);\n  });\n\n  _.forEach(transformBy, key => {\n    const operatorResources = transformResourceData[key](resources[key].data, true);\n    if (!_.isEmpty(resources[key].data) && !_.isEmpty(operatorResources)) {\n      resources[key].data = resources[key].data.filter(resource => !operatorResources.find(operatorResource => operatorResource.obj.metadata.uid === resource.metadata.uid));\n    }\n  });\n\n  return operatorsDataModel;\n};\n"]}]}