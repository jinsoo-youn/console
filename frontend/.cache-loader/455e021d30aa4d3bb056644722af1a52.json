{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/dedicated-resources-modal/dedicated-resources-modal.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/dedicated-resources-modal/dedicated-resources-modal.tsx","mtime":1616735742420},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as React from 'react';\nimport { Button, ButtonVariant, Checkbox, Text, TextVariants } from '@patternfly/react-core';\nimport { ModalTitle, ModalBody } from '@console/internal/components/factory';\nimport { NodeModel } from '@console/internal/models';\nimport { withHandlePromise, Label, } from '@console/internal/components/utils';\nimport { k8sPatch } from '@console/internal/module/k8s';\nimport { getVMLikeModel, isDedicatedCPUPlacement, asVM } from '../../../../selectors/vm';\nimport { getDedicatedCpuPatch } from '../../../../k8s/patches/vm/vm-cpu-patches';\nimport { getLoadedData, isLoaded, getLoadError } from '../../../../utils';\nimport { useCollisionChecker } from '../../../../hooks/use-collision-checker';\nimport { useNodeQualifier } from '../shared/hooks';\nimport { ModalFooter } from '../../modal/modal-footer';\nimport { NodeChecker } from '../shared/NodeChecker/node-checker';\nimport { DEDICATED_RESOURCES_MODAL_TITLE, DEDICATED_RESOURCES_LABELS } from '../shared/consts';\nimport './dedicated-resources-modal.scss';\nexport const DedicatedResourcesModal = withHandlePromise(({ vmLikeEntity, vmLikeEntityLoading, nodes, close, handlePromise, inProgress, errorMessage, }) => {\n    const vmLikeFinal = getLoadedData(vmLikeEntityLoading, vmLikeEntity);\n    const loadError = getLoadError(nodes, NodeModel);\n    const isCurrentCPUPinned = isDedicatedCPUPlacement(asVM(vmLikeFinal));\n    const qualifiedNodes = useNodeQualifier(nodes, 'label', DEDICATED_RESOURCES_LABELS);\n    const [showCollisionAlert, reload] = useCollisionChecker(vmLikeFinal, (oldVM, newVM) => isDedicatedCPUPlacement(asVM(oldVM)) === isDedicatedCPUPlacement(asVM(newVM)));\n    const [isPinned, setIsPinned] = React.useState(isCurrentCPUPinned);\n    const onReload = () => {\n        reload();\n        setIsPinned(isCurrentCPUPinned);\n    };\n    const onSubmit = () => __awaiter(void 0, void 0, void 0, function* () {\n        if (isPinned !== isCurrentCPUPinned) {\n            // eslint-disable-next-line promise/catch-or-return\n            handlePromise(k8sPatch(getVMLikeModel(vmLikeFinal), vmLikeFinal, yield getDedicatedCpuPatch(vmLikeFinal, isPinned))).then(close);\n        }\n        else {\n            close();\n        }\n    });\n    return (React.createElement(\"div\", { className: \"modal-content\" },\n        React.createElement(ModalTitle, null, DEDICATED_RESOURCES_MODAL_TITLE),\n        React.createElement(ModalBody, null,\n            React.createElement(Checkbox, { className: \"kubevirt-dedicated-resources__checkbox\", label: \"Schedule this workload with dedicated resources (guaranteed policy)\", isChecked: isPinned, isDisabled: !isLoaded(nodes) || inProgress, onChange: (flag) => setIsPinned(flag), id: \"dedicated-resources-checkbox\" }),\n            React.createElement(Text, { className: \"kubevirt-dedicated-resources__helper-text\", component: TextVariants.small },\n                \"Available only on Nodes with labels\",\n                ' ',\n                React.createElement(Label, { kind: NodeModel.kind, name: \"cpumanager\", value: \"true\", expand: true })),\n            React.createElement(NodeChecker, { qualifiedNodes: qualifiedNodes })),\n        React.createElement(ModalFooter, { id: \"dedicated-resources\", className: \"kubevirt-dedicated-resources__footer\", errorMessage: errorMessage, inProgress: !isLoaded(nodes) || inProgress, isSimpleError: !!loadError, onSubmit: onSubmit, onCancel: close, submitButtonText: \"Save\", infoTitle: showCollisionAlert && 'Policy has been updated outside this flow.', infoMessage: React.createElement(React.Fragment, null,\n                \"Saving these changes will override any policy previously saved.\",\n                React.createElement(\"br\", null),\n                React.createElement(Button, { variant: ButtonVariant.link, isInline: true, onClick: onReload }, \"Reload Policy\"),\n                \".\") })));\n});\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/dedicated-resources-modal/dedicated-resources-modal.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/dedicated-resources-modal/dedicated-resources-modal.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Button, ButtonVariant, Checkbox, Text, TextVariants } from '@patternfly/react-core';\nimport { ModalTitle, ModalBody, ModalComponentProps } from '@console/internal/components/factory';\nimport { NodeModel } from '@console/internal/models';\nimport {\n  withHandlePromise,\n  HandlePromiseProps,\n  FirehoseResult,\n  Label,\n} from '@console/internal/components/utils';\nimport { k8sPatch, NodeKind } from '@console/internal/module/k8s';\nimport { VMLikeEntityKind } from '../../../../types/vmLike';\nimport { getVMLikeModel, isDedicatedCPUPlacement, asVM } from '../../../../selectors/vm';\nimport { getDedicatedCpuPatch } from '../../../../k8s/patches/vm/vm-cpu-patches';\nimport { getLoadedData, isLoaded, getLoadError } from '../../../../utils';\nimport { useCollisionChecker } from '../../../../hooks/use-collision-checker';\nimport { useNodeQualifier } from '../shared/hooks';\nimport { ModalFooter } from '../../modal/modal-footer';\nimport { NodeChecker } from '../shared/NodeChecker/node-checker';\nimport { DEDICATED_RESOURCES_MODAL_TITLE, DEDICATED_RESOURCES_LABELS } from '../shared/consts';\nimport './dedicated-resources-modal.scss';\n\nexport const DedicatedResourcesModal = withHandlePromise<DedicatedResourcesModalProps>(\n  ({\n    vmLikeEntity,\n    vmLikeEntityLoading,\n    nodes,\n    close,\n    handlePromise,\n    inProgress,\n    errorMessage,\n  }) => {\n    const vmLikeFinal = getLoadedData(vmLikeEntityLoading, vmLikeEntity);\n    const loadError = getLoadError(nodes, NodeModel);\n    const isCurrentCPUPinned = isDedicatedCPUPlacement(asVM(vmLikeFinal));\n\n    const qualifiedNodes = useNodeQualifier(nodes, 'label', DEDICATED_RESOURCES_LABELS);\n\n    const [showCollisionAlert, reload] = useCollisionChecker<VMLikeEntityKind>(\n      vmLikeFinal,\n      (oldVM: VMLikeEntityKind, newVM: VMLikeEntityKind) =>\n        isDedicatedCPUPlacement(asVM(oldVM)) === isDedicatedCPUPlacement(asVM(newVM)),\n    );\n\n    const [isPinned, setIsPinned] = React.useState<boolean>(isCurrentCPUPinned);\n\n    const onReload = () => {\n      reload();\n      setIsPinned(isCurrentCPUPinned);\n    };\n\n    const onSubmit = async () => {\n      if (isPinned !== isCurrentCPUPinned) {\n        // eslint-disable-next-line promise/catch-or-return\n        handlePromise(\n          k8sPatch(\n            getVMLikeModel(vmLikeFinal),\n            vmLikeFinal,\n            await getDedicatedCpuPatch(vmLikeFinal, isPinned),\n          ),\n        ).then(close);\n      } else {\n        close();\n      }\n    };\n\n    return (\n      <div className=\"modal-content\">\n        <ModalTitle>{DEDICATED_RESOURCES_MODAL_TITLE}</ModalTitle>\n        <ModalBody>\n          <Checkbox\n            className=\"kubevirt-dedicated-resources__checkbox\"\n            label=\"Schedule this workload with dedicated resources (guaranteed policy)\"\n            isChecked={isPinned}\n            isDisabled={!isLoaded(nodes) || inProgress}\n            onChange={(flag) => setIsPinned(flag)}\n            id=\"dedicated-resources-checkbox\"\n          />\n          <Text\n            className=\"kubevirt-dedicated-resources__helper-text\"\n            component={TextVariants.small}\n          >\n            Available only on Nodes with labels{' '}\n            <Label kind={NodeModel.kind} name=\"cpumanager\" value=\"true\" expand />\n          </Text>\n          <NodeChecker qualifiedNodes={qualifiedNodes} />\n        </ModalBody>\n        <ModalFooter\n          id=\"dedicated-resources\"\n          className=\"kubevirt-dedicated-resources__footer\"\n          errorMessage={errorMessage}\n          inProgress={!isLoaded(nodes) || inProgress}\n          isSimpleError={!!loadError}\n          onSubmit={onSubmit}\n          onCancel={close}\n          submitButtonText=\"Save\"\n          infoTitle={showCollisionAlert && 'Policy has been updated outside this flow.'}\n          infoMessage={\n            <>\n              Saving these changes will override any policy previously saved.\n              <br />\n              <Button variant={ButtonVariant.link} isInline onClick={onReload}>\n                Reload Policy\n              </Button>\n              .\n            </>\n          }\n        />\n      </div>\n    );\n  },\n);\n\ntype DedicatedResourcesModalProps = HandlePromiseProps &\n  ModalComponentProps & {\n    vmLikeEntity: VMLikeEntityKind;\n    nodes?: FirehoseResult<NodeKind[]>;\n    vmLikeEntityLoading?: FirehoseResult<VMLikeEntityKind>;\n  };\n"]}]}