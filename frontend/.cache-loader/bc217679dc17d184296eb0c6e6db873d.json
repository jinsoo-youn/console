{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/utils/resource-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/utils/resource-utils.ts","mtime":1616735742380},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { LabelSelector, apiVersionForModel, referenceForModel, } from '@console/internal/module/k8s';\nimport { DeploymentConfigModel, ReplicationControllerModel, ReplicaSetModel, DeploymentModel, DaemonSetModel, StatefulSetModel, PodModel, } from '@console/internal/models';\nimport { getBuildNumber } from '@console/internal/module/k8s/builds';\nimport { DEPLOYMENT_REVISION_ANNOTATION, DEPLOYMENT_CONFIG_LATEST_VERSION_ANNOTATION, TRIGGERS_ANNOTATION, DEPLOYMENT_PHASE_ANNOTATION, CONTAINER_WAITING_STATE_ERROR_REASONS, DEPLOYMENT_STRATEGY, DEPLOYMENT_PHASE, AllPodStatus, } from '../constants';\nimport { resourceStatus, podStatus } from './ResourceStatus';\nimport { isKnativeServing, isIdled } from './pod-utils';\nimport { ClusterServiceVersionModel, } from '@console/operator-lifecycle-manager';\nexport const getResourceList = (namespace, resList) => {\n    let resources = [\n        {\n            isList: true,\n            kind: 'DeploymentConfig',\n            namespace,\n            prop: 'deploymentConfigs',\n            optional: true,\n        },\n        {\n            isList: true,\n            kind: 'Deployment',\n            namespace,\n            prop: 'deployments',\n            optional: true,\n        },\n        {\n            isList: true,\n            kind: 'DaemonSet',\n            namespace,\n            prop: 'daemonSets',\n            optional: true,\n        },\n        {\n            isList: true,\n            kind: 'Pod',\n            namespace,\n            prop: 'pods',\n            optional: true,\n        },\n        {\n            isList: true,\n            kind: 'ReplicationController',\n            namespace,\n            prop: 'replicationControllers',\n            optional: true,\n        },\n        {\n            isList: true,\n            kind: 'Route',\n            namespace,\n            prop: 'routes',\n            optional: true,\n        },\n        {\n            isList: true,\n            kind: 'Service',\n            namespace,\n            prop: 'services',\n            optional: true,\n        },\n        {\n            isList: true,\n            kind: 'ReplicaSet',\n            namespace,\n            prop: 'replicaSets',\n            optional: true,\n        },\n        {\n            isList: true,\n            kind: 'BuildConfig',\n            namespace,\n            prop: 'buildConfigs',\n            optional: true,\n        },\n        {\n            isList: true,\n            kind: 'Build',\n            namespace,\n            prop: 'builds',\n            optional: true,\n        },\n        {\n            isList: true,\n            kind: 'StatefulSet',\n            namespace,\n            prop: 'statefulSets',\n            optional: true,\n        },\n        {\n            isList: true,\n            kind: 'Secret',\n            namespace,\n            prop: 'secrets',\n            optional: true,\n        },\n        {\n            isList: true,\n            kind: referenceForModel(ClusterServiceVersionModel),\n            namespace,\n            prop: 'clusterServiceVersions',\n            optional: true,\n        },\n    ];\n    let utils = [];\n    if (resList) {\n        resList.forEach((resource) => {\n            resources = [...resources, ...resource.properties.resources(namespace)];\n            utils = [...utils, resource.properties.utils];\n        });\n    }\n    return { resources, utils };\n};\nexport const getResourcePausedAlert = (resource) => {\n    if (!resource.spec.paused) {\n        return {};\n    }\n    return {\n        [`${resource.metadata.uid}--Paused`]: {\n            severity: 'info',\n            message: `${resource.metadata.name} is paused.`,\n        },\n    };\n};\nexport const getBuildAlerts = (buildConfigs) => {\n    const buildAlerts = {};\n    const addAlert = (build, buildPhase) => _.set(buildAlerts, `${build.metadata.uid}--build${buildPhase}`, {\n        severity: `build${buildPhase}`,\n        message: _.get(build, ['status', 'message'], buildPhase),\n    });\n    _.each(buildConfigs, (bc) => {\n        let seenComplete = false;\n        // Requires builds to be sorted by most recent first.\n        _.each(bc.builds, (build) => {\n            const buildPhase = _.get(build, ['status', 'phase']);\n            switch (buildPhase) {\n                case 'Complete':\n                    seenComplete = true;\n                    break;\n                case 'Failed':\n                case 'Error':\n                    if (!seenComplete) {\n                        // show failure/error\n                        addAlert(build, buildPhase);\n                    }\n                    break;\n                case 'New':\n                case 'Pending':\n                case 'Running':\n                    // show new/pending/running\n                    addAlert(build, buildPhase);\n                    break;\n                default:\n                    break;\n            }\n        });\n    });\n    return buildAlerts;\n};\nexport const getOwnedResources = ({ metadata: { uid } }, resources) => {\n    return _.filter(resources, ({ metadata: { ownerReferences } }) => {\n        return _.some(ownerReferences, {\n            uid,\n            controller: true,\n        });\n    });\n};\nconst sortByRevision = (replicators, getRevision, descending = true) => {\n    const compare = (left, right) => {\n        const leftVersion = getRevision(left);\n        const rightVersion = getRevision(right);\n        if (!_.isFinite(leftVersion) && !_.isFinite(rightVersion)) {\n            const leftName = _.get(left, 'metadata.name', '');\n            const rightName = _.get(right, 'metadata.name', '');\n            if (descending) {\n                return rightName.localeCompare(leftName);\n            }\n            return leftName.localeCompare(rightName);\n        }\n        if (!leftVersion) {\n            return descending ? 1 : -1;\n        }\n        if (!rightVersion) {\n            return descending ? -1 : 1;\n        }\n        if (descending) {\n            return rightVersion - leftVersion;\n        }\n        return leftVersion - rightVersion;\n    };\n    return _.toArray(replicators).sort(compare);\n};\nconst getAnnotation = (obj, annotation) => {\n    return _.get(obj, ['metadata', 'annotations', annotation]);\n};\nexport const parseJSONAnnotation = (annotations, annotationKey, onError, defaultReturn) => {\n    try {\n        return (annotations === null || annotations === void 0 ? void 0 : annotations[annotationKey]) ? JSON.parse(annotations === null || annotations === void 0 ? void 0 : annotations[annotationKey]) : defaultReturn;\n    }\n    catch (e) {\n        onError && onError(e);\n        // eslint-disable-next-line no-console\n        console.warn(`Could not parse annotation ${annotationKey} as JSON: `, e);\n        return defaultReturn;\n    }\n};\nconst getDeploymentRevision = (obj) => {\n    const revision = getAnnotation(obj, DEPLOYMENT_REVISION_ANNOTATION);\n    return revision && parseInt(revision, 10);\n};\nconst getDeploymentConfigVersion = (obj) => {\n    const version = getAnnotation(obj, DEPLOYMENT_CONFIG_LATEST_VERSION_ANNOTATION);\n    return version && parseInt(version, 10);\n};\nconst getDeploymentConfigName = (obj) => {\n    return _.get(obj, 'metadata.ownerReferences[0].name', null);\n};\nexport const sortReplicaSetsByRevision = (replicaSets) => {\n    return sortByRevision(replicaSets, getDeploymentRevision);\n};\nconst sortReplicationControllersByRevision = (replicationControllers) => {\n    return sortByRevision(replicationControllers, getDeploymentConfigVersion);\n};\nexport const sortBuilds = (builds) => {\n    const byCreationTime = (left, right) => {\n        const leftCreationTime = new Date(_.get(left, 'metadata.creationTimestamp', Date.now()));\n        const rightCreationTime = new Date(_.get(right, 'metadata.creationTimestamp', Date.now()));\n        return rightCreationTime.getMilliseconds() - leftCreationTime.getMilliseconds();\n    };\n    const byBuildNumber = (left, right) => {\n        const leftBuildNumber = getBuildNumber(left);\n        const rightBuildNumber = getBuildNumber(right);\n        if (!_.isFinite(leftBuildNumber) || !_.isFinite(rightBuildNumber)) {\n            return byCreationTime(left, right);\n        }\n        return rightBuildNumber - leftBuildNumber;\n    };\n    return [...builds].sort(byBuildNumber);\n};\n// FIXME use parseJSONAnnotation helper\nconst getAnnotatedTriggers = (obj) => {\n    const triggersJSON = getAnnotation(obj, TRIGGERS_ANNOTATION) || '[]';\n    try {\n        return JSON.parse(triggersJSON);\n    }\n    catch (e) {\n        /* eslint-disable-next-line no-console */\n        console.error('Error parsing triggers annotation', e);\n        return [];\n    }\n};\nconst getDeploymentPhase = (rc) => _.get(rc, ['metadata', 'annotations', DEPLOYMENT_PHASE_ANNOTATION]);\n// Only show an alert once if multiple pods have the same error for the same owner.\nconst podAlertKey = (alert, pod, containerName = 'all') => {\n    const id = _.get(pod, 'metadata.ownerReferences[0].uid', pod.metadata.uid);\n    return `${alert}--${id}--${containerName}`;\n};\nconst getPodAlerts = (pod) => {\n    const alerts = {};\n    const statuses = [\n        ..._.get(pod, 'status.initContainerStatuses', []),\n        ..._.get(pod, 'status.containerStatuses', []),\n    ];\n    statuses.forEach((status) => {\n        const { name, state } = status;\n        const waitingReason = _.get(state, 'waiting.reason');\n        if (CONTAINER_WAITING_STATE_ERROR_REASONS.includes(waitingReason)) {\n            const key = podAlertKey(waitingReason, pod, name);\n            const message = state.waiting.message || waitingReason;\n            alerts[key] = { severity: 'error', message };\n        }\n    });\n    _.get(pod, 'status.conditions', []).forEach((condition) => {\n        const { type, status, reason, message } = condition;\n        if (type === 'PodScheduled' && status === 'False' && reason === 'Unschedulable') {\n            // eslint-disable-next-line\n            const key = podAlertKey(reason, pod, name);\n            alerts[key] = {\n                severity: 'error',\n                message: `${reason}: ${message}`,\n            };\n        }\n    });\n    return alerts;\n};\nconst combinePodAlerts = (pods) => _.reduce(pods, (acc, pod) => (Object.assign(Object.assign({}, acc), getPodAlerts(pod))), {});\nexport const getReplicationControllerAlerts = (rc) => {\n    const phase = getDeploymentPhase(rc);\n    const version = getDeploymentConfigVersion(rc);\n    const name = getDeploymentConfigName(rc);\n    const label = _.isFinite(version) ? `${name} #${version}` : rc.metadata.name;\n    const key = `${rc.metadata.uid}--Rollout${phase}`;\n    switch (phase) {\n        case 'Cancelled':\n            return {\n                [key]: {\n                    severity: 'info',\n                    message: `Rollout ${label} was cancelled.`,\n                },\n            };\n        case 'Failed':\n            return {\n                [key]: {\n                    severity: 'error',\n                    message: `Rollout ${label} failed.`,\n                },\n            };\n        default:\n            return {};\n    }\n};\nconst getAutoscaledPods = (rc) => {\n    return [\n        Object.assign(Object.assign({}, _.pick(rc, 'metadata', 'status', 'spec')), { status: { phase: AllPodStatus.AutoScaledTo0 } }),\n    ];\n};\nconst getIdledStatus = (rc, dc) => {\n    const { pods } = rc;\n    if (pods && !pods.length && isIdled(dc)) {\n        return Object.assign(Object.assign({}, rc), { \n            // FIXME: This is not a PodKind.\n            pods: [\n                Object.assign(Object.assign({}, _.pick(rc.obj, 'metadata', 'status', 'spec')), { status: { phase: AllPodStatus.Idle } }),\n            ] });\n    }\n    return rc;\n};\nexport const getRolloutStatus = (dc, current, previous) => {\n    const { spec: { strategy: { type: strategy }, }, } = dc;\n    const phase = current && current.phase;\n    const currentRC = current && current.obj;\n    const notFailedOrCancelled = phase !== DEPLOYMENT_PHASE.cancelled && phase !== DEPLOYMENT_PHASE.failed;\n    if (strategy === DEPLOYMENT_STRATEGY.recreate) {\n        return (notFailedOrCancelled &&\n            getDeploymentConfigVersion(currentRC) > 1 &&\n            phase !== DEPLOYMENT_PHASE.complete);\n    }\n    return notFailedOrCancelled && previous && previous.pods.length > 0;\n};\nconst isDeploymentInProgressOrCompleted = (resource) => {\n    return ([\n        DEPLOYMENT_PHASE.new,\n        DEPLOYMENT_PHASE.pending,\n        DEPLOYMENT_PHASE.running,\n        DEPLOYMENT_PHASE.complete,\n    ].indexOf(getDeploymentPhase(resource)) > -1);\n};\nconst isReplicationControllerVisible = (resource) => {\n    return !!_.get(resource, ['status', 'replicas'], isDeploymentInProgressOrCompleted(resource));\n};\nexport const getOperatorBackedServiceKindMap = (installedOperators) => installedOperators\n    ? installedOperators.reduce((kindMap, csv) => {\n        var _a, _b;\n        (((_b = (_a = csv === null || csv === void 0 ? void 0 : csv.spec) === null || _a === void 0 ? void 0 : _a.customresourcedefinitions) === null || _b === void 0 ? void 0 : _b.owned) || []).forEach((crd) => {\n            if (!(crd.kind in kindMap)) {\n                kindMap[crd.kind] = csv;\n            }\n        });\n        return kindMap;\n    }, {})\n    : {};\nexport const isOperatorBackedService = (obj, installedOperators) => {\n    const kind = _.get(obj, 'metadata.ownerReferences[0].kind', null);\n    const ownerUid = _.get(obj, 'metadata.ownerReferences[0].uid');\n    const operatBackedServiceKindMap = getOperatorBackedServiceKindMap(installedOperators);\n    const operatorResource = _.find(installedOperators, {\n        metadata: { uid: ownerUid },\n    });\n    return (kind &&\n        operatBackedServiceKindMap &&\n        (!_.isEmpty(operatorResource) || kind in operatBackedServiceKindMap));\n};\nexport const getPodsForResource = (resource, resources) => {\n    const { pods } = resources;\n    return getOwnedResources(resource, pods.data);\n};\nexport const toReplicationControllerItem = (rc, resources) => {\n    const pods = getPodsForResource(rc, resources);\n    const alerts = Object.assign(Object.assign({}, combinePodAlerts(pods)), getReplicationControllerAlerts(rc));\n    const phase = getDeploymentPhase(rc);\n    const revision = getDeploymentConfigVersion(rc);\n    const obj = Object.assign(Object.assign({}, rc), { apiVersion: apiVersionForModel(ReplicationControllerModel), kind: ReplicationControllerModel.kind });\n    return {\n        alerts,\n        obj,\n        phase,\n        pods,\n        revision,\n    };\n};\nexport const getReplicationControllersForResource = (resource, resources) => {\n    const { replicationControllers } = resources;\n    const ownedRC = getOwnedResources(resource, replicationControllers.data);\n    const sortedRCs = sortReplicationControllersByRevision(ownedRC);\n    // get the most recent RCs included failed or canceled to show warnings\n    const [mostRecentRC] = sortedRCs;\n    // get the visible RCs except failed/canceled\n    const visibleReplicationControllers = _.filter(sortedRCs, isReplicationControllerVisible);\n    return {\n        mostRecentRC,\n        visibleReplicationControllers: visibleReplicationControllers.map((rc) => getIdledStatus(toReplicationControllerItem(rc, resources), resource)),\n    };\n};\nconst toResourceItem = (rs, model, resources) => {\n    const obj = Object.assign(Object.assign({}, rs), { apiVersion: apiVersionForModel(model), kind: `${model.kind}` });\n    const isKnative = isKnativeServing(rs, 'metadata.labels');\n    const podData = getPodsForResource(rs, resources);\n    const pods = podData && !podData.length && isKnative ? getAutoscaledPods(rs) : podData;\n    const alerts = combinePodAlerts(pods);\n    return {\n        alerts,\n        obj,\n        pods,\n        revision: getDeploymentRevision(rs),\n    };\n};\nconst getActiveStatefulSets = (ss, resources) => {\n    const { statefulSets } = resources;\n    const ownedRS = _.filter(statefulSets === null || statefulSets === void 0 ? void 0 : statefulSets.data, (f) => f.metadata.name === ss.metadata.name);\n    return _.filter(ownedRS, (rs) => _.get(rs, 'status.replicas'));\n};\nexport const getStatefulSetsResource = (ss, resources) => {\n    const activeStatefulSets = getActiveStatefulSets(ss, resources);\n    return activeStatefulSets.map((pss) => getIdledStatus(toResourceItem(pss, StatefulSetModel, resources), ss));\n};\nexport const getActiveReplicaSets = (deployment, resources) => {\n    const { replicaSets } = resources;\n    const currentRevision = getDeploymentRevision(deployment);\n    const ownedRS = getOwnedResources(deployment, replicaSets.data);\n    return _.filter(ownedRS, (rs) => _.get(rs, 'status.replicas') || getDeploymentRevision(rs) === currentRevision);\n};\nexport const getReplicaSetsForResource = (deployment, resources) => {\n    const replicaSets = getActiveReplicaSets(deployment, resources);\n    return sortReplicaSetsByRevision(replicaSets).map((rs) => getIdledStatus(toResourceItem(rs, ReplicaSetModel, resources), deployment));\n};\nexport const getBuildsForResource = (buildConfig, resources) => {\n    const { builds } = resources;\n    return getOwnedResources(buildConfig, builds.data);\n};\nexport const getBuildConfigsForResource = (resource, resources) => {\n    const buildConfigs = _.get(resources, ['buildConfigs', 'data']);\n    const currentNamespace = resource.metadata.namespace;\n    const nativeTriggers = _.get(resource, 'spec.triggers');\n    const annotatedTriggers = getAnnotatedTriggers(resource);\n    const triggers = _.unionWith(nativeTriggers, annotatedTriggers, _.isEqual);\n    return _.flatMap(triggers, (trigger) => {\n        const triggerFrom = trigger.from || _.get(trigger, 'imageChangeParams.from', {});\n        if (triggerFrom.kind !== 'ImageStreamTag') {\n            return [];\n        }\n        return _.reduce(buildConfigs, (acc, buildConfig) => {\n            const triggerImageNamespace = triggerFrom.namespace || currentNamespace;\n            const triggerImageName = triggerFrom.name;\n            const targetImageNamespace = _.get(buildConfig, 'spec.output.to.namespace', currentNamespace);\n            const targetImageName = _.get(buildConfig, 'spec.output.to.name');\n            if (triggerImageNamespace === targetImageNamespace &&\n                triggerImageName === targetImageName) {\n                const builds = getBuildsForResource(buildConfig, resources);\n                return [\n                    ...acc,\n                    Object.assign(Object.assign({}, buildConfig), { builds: sortBuilds(builds) }),\n                ];\n            }\n            return acc;\n        }, []);\n    });\n};\nexport const getPodTemplate = (resource) => {\n    switch (resource.kind) {\n        case 'Pod':\n            return resource;\n        case 'DeploymentConfig':\n            // Include labels automatically added to deployment config pods since a service\n            // might select them.\n            return _.defaultsDeep({\n                metadata: {\n                    labels: {\n                        deploymentconfig: resource.metadata.name,\n                    },\n                },\n            }, resource.spec.template);\n        default:\n            return resource.spec.template;\n    }\n};\nexport const getRoutesForServices = (services, resources) => {\n    const { routes } = resources;\n    return _.filter(routes.data, (route) => {\n        const name = _.get(route, 'spec.to.name');\n        return _.some(services, { metadata: { name } });\n    });\n};\nexport const getServicesForResource = (resource, resources) => {\n    const { services } = resources;\n    const template = getPodTemplate(resource);\n    return _.filter(services.data, (service) => {\n        const selector = new LabelSelector(_.get(service, 'spec.selector', {}));\n        return selector.matches(template);\n    });\n};\nexport const createDeploymentConfigItems = (deploymentConfigs, resources, installedOperators, utils, operatorsFilter) => {\n    const items = _.map(deploymentConfigs, (dc) => {\n        const obj = Object.assign(Object.assign({}, dc), { apiVersion: apiVersionForModel(DeploymentConfigModel), kind: DeploymentConfigModel.kind });\n        const { mostRecentRC, visibleReplicationControllers } = getReplicationControllersForResource(obj, resources);\n        const [current, previous] = visibleReplicationControllers;\n        const isRollingOut = getRolloutStatus(obj, current, previous);\n        const buildConfigs = getBuildConfigsForResource(obj, resources);\n        const services = getServicesForResource(obj, resources);\n        const routes = getRoutesForServices(services, resources);\n        const rolloutAlerts = mostRecentRC ? getReplicationControllerAlerts(mostRecentRC) : {};\n        const alerts = Object.assign(Object.assign(Object.assign({}, getResourcePausedAlert(obj)), getBuildAlerts(buildConfigs)), rolloutAlerts);\n        const status = resourceStatus(obj, current, isRollingOut);\n        const pods = [..._.get(current, 'pods', []), ..._.get(previous, 'pods', [])];\n        const overviewItems = {\n            alerts,\n            buildConfigs,\n            current,\n            isRollingOut,\n            obj,\n            previous,\n            pods,\n            routes,\n            services,\n            status,\n            isMonitorable: true,\n            isOperatorBackedService: isOperatorBackedService(obj, installedOperators),\n        };\n        if (utils) {\n            return utils.reduce((acc, element) => {\n                return Object.assign(Object.assign({}, acc), element(obj, resources));\n            }, overviewItems);\n        }\n        return overviewItems;\n    });\n    if (operatorsFilter !== undefined) {\n        return items.filter((item) => item.isOperatorBackedService === operatorsFilter);\n    }\n    return items;\n};\nexport const createDeploymentItems = (deployments, resources, installedOperators, utils, operatorsFilter) => {\n    const items = _.map(deployments, (d) => {\n        const obj = Object.assign(Object.assign({}, d), { apiVersion: apiVersionForModel(DeploymentModel), kind: DeploymentModel.kind });\n        const replicaSets = getReplicaSetsForResource(obj, resources);\n        const [current, previous] = replicaSets;\n        const isRollingOut = !!current && !!previous;\n        const buildConfigs = getBuildConfigsForResource(obj, resources);\n        const services = getServicesForResource(obj, resources);\n        const routes = getRoutesForServices(services, resources);\n        const alerts = Object.assign(Object.assign({}, getResourcePausedAlert(obj)), getBuildAlerts(buildConfigs));\n        const status = resourceStatus(obj, current, isRollingOut);\n        const pods = [..._.get(current, 'pods', []), ..._.get(previous, 'pods', [])];\n        const overviewItems = {\n            alerts,\n            buildConfigs,\n            current,\n            isRollingOut,\n            obj,\n            previous,\n            pods,\n            routes,\n            services,\n            status,\n            isMonitorable: true,\n            isOperatorBackedService: isOperatorBackedService(obj, installedOperators),\n        };\n        if (utils) {\n            return utils.reduce((acc, element) => {\n                return Object.assign(Object.assign({}, acc), element(obj, resources));\n            }, overviewItems);\n        }\n        return overviewItems;\n    });\n    if (operatorsFilter !== undefined) {\n        return items.filter((item) => item.isOperatorBackedService === operatorsFilter);\n    }\n    return items;\n};\nexport const createDaemonSetItems = (daemonSets, resources, installedOperators, utils, operatorsFilter) => {\n    const items = _.map(daemonSets, (ds) => {\n        const obj = Object.assign(Object.assign({}, ds), { apiVersion: apiVersionForModel(DaemonSetModel), kind: DaemonSetModel.kind });\n        const buildConfigs = getBuildConfigsForResource(obj, resources);\n        const services = getServicesForResource(obj, resources);\n        const routes = getRoutesForServices(services, resources);\n        const pods = getPodsForResource(obj, resources);\n        const alerts = Object.assign(Object.assign({}, combinePodAlerts(pods)), getBuildAlerts(buildConfigs));\n        const status = resourceStatus(obj);\n        return {\n            alerts,\n            buildConfigs,\n            obj,\n            pods,\n            routes,\n            services,\n            status,\n            isMonitorable: true,\n            isOperatorBackedService: isOperatorBackedService(obj, installedOperators),\n        };\n    });\n    if (operatorsFilter !== undefined) {\n        return items.filter((item) => item.isOperatorBackedService === operatorsFilter);\n    }\n    return items;\n};\nexport const createStatefulSetItems = (statefulSets, resources, installedOperators, utils, operatorsFilter) => {\n    const items = _.map(statefulSets, (ss) => {\n        const obj = Object.assign(Object.assign({}, ss), { apiVersion: apiVersionForModel(StatefulSetModel), kind: StatefulSetModel.kind });\n        const buildConfigs = getBuildConfigsForResource(obj, resources);\n        const pods = getPodsForResource(obj, resources);\n        const alerts = Object.assign(Object.assign({}, combinePodAlerts(pods)), getBuildAlerts(buildConfigs));\n        const services = getServicesForResource(obj, resources);\n        const routes = getRoutesForServices(services, resources);\n        const status = resourceStatus(obj);\n        return {\n            alerts,\n            buildConfigs,\n            obj,\n            pods,\n            routes,\n            services,\n            status,\n            isMonitorable: true,\n            isOperatorBackedService: isOperatorBackedService(obj, installedOperators),\n        };\n    });\n    if (operatorsFilter !== undefined) {\n        return items.filter((item) => item.isOperatorBackedService === operatorsFilter);\n    }\n    return items;\n};\nexport const createPodItems = (resources) => {\n    const { pods } = resources;\n    return _.reduce(pods.data, (acc, pod) => {\n        const obj = Object.assign(Object.assign({}, pod), { apiVersion: apiVersionForModel(PodModel), kind: PodModel.kind });\n        const owners = _.get(obj, 'metadata.ownerReferences');\n        const phase = _.get(obj, 'status.phase');\n        if (!_.isEmpty(owners) || phase === 'Succeeded' || phase === 'Failed') {\n            return acc;\n        }\n        const alerts = getPodAlerts(obj);\n        const services = getServicesForResource(obj, resources);\n        const routes = getRoutesForServices(services, resources);\n        const status = podStatus(obj);\n        return [\n            ...acc,\n            {\n                alerts,\n                obj,\n                routes,\n                services,\n                status,\n            },\n        ];\n    }, []);\n};\nexport const getPodsForDeploymentConfigs = (deploymentConfigs, resources) => {\n    return _.map(deploymentConfigs, (dc) => {\n        const obj = Object.assign(Object.assign({}, dc), { apiVersion: apiVersionForModel(DeploymentConfigModel), kind: DeploymentConfigModel.kind });\n        const { visibleReplicationControllers } = getReplicationControllersForResource(obj, resources);\n        const [current, previous] = visibleReplicationControllers;\n        const isRollingOut = getRolloutStatus(obj, current, previous);\n        return {\n            obj,\n            current,\n            previous,\n            pods: [..._.get(current, 'pods', []), ..._.get(previous, 'pods', [])],\n            isRollingOut,\n        };\n    });\n};\nexport const getPodsForDeployments = (deployments, resources) => {\n    return _.map(deployments, (d) => {\n        const obj = Object.assign(Object.assign({}, d), { apiVersion: apiVersionForModel(DeploymentModel), kind: DeploymentModel.kind });\n        const replicaSets = getReplicaSetsForResource(obj, resources);\n        const [current, previous] = replicaSets;\n        const isRollingOut = !!current && !!previous;\n        return {\n            obj,\n            current,\n            previous,\n            isRollingOut,\n            pods: [..._.get(current, 'pods', []), ..._.get(previous, 'pods', [])],\n        };\n    });\n};\nexport const getPodsForStatefulSets = (ss, resources) => {\n    return _.map(ss, (s) => {\n        const obj = Object.assign(Object.assign({}, s), { apiVersion: apiVersionForModel(StatefulSetModel), kind: StatefulSetModel.kind });\n        const statefulSets = getStatefulSetsResource(obj, resources);\n        const [current, previous] = statefulSets;\n        const isRollingOut = !!current && !!previous;\n        return {\n            obj,\n            current,\n            previous,\n            isRollingOut,\n            pods: [..._.get(current, 'pods', []), ..._.get(previous, 'pods', [])],\n        };\n    });\n};\nexport const getPodsForDaemonSets = (ds, resources) => {\n    return _.map(ds, (d) => {\n        const obj = Object.assign(Object.assign({}, d), { apiVersion: apiVersionForModel(StatefulSetModel), kind: StatefulSetModel.kind });\n        return {\n            obj,\n            current: undefined,\n            previous: undefined,\n            isRollingOut: undefined,\n            pods: getPodsForResource(d, resources),\n        };\n    });\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/utils/resource-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/utils/resource-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport {\n  DeploymentKind,\n  K8sResourceKind,\n  LabelSelector,\n  PodKind,\n  PodTemplate,\n  RouteKind,\n  apiVersionForModel,\n  referenceForModel,\n  K8sKind,\n  ObjectMetadata,\n} from '@console/internal/module/k8s';\nimport {\n  DeploymentConfigModel,\n  ReplicationControllerModel,\n  ReplicaSetModel,\n  DeploymentModel,\n  DaemonSetModel,\n  StatefulSetModel,\n  PodModel,\n} from '@console/internal/models';\nimport { getBuildNumber } from '@console/internal/module/k8s/builds';\nimport { FirehoseResource } from '@console/internal/components/utils';\nimport {\n  BuildConfigOverviewItem,\n  OverviewItemAlerts,\n  PodControllerOverviewItem,\n  OverviewItem,\n  PodRCData,\n  ExtPodKind,\n  OperatorBackedServiceKindMap,\n} from '../types';\nimport {\n  DEPLOYMENT_REVISION_ANNOTATION,\n  DEPLOYMENT_CONFIG_LATEST_VERSION_ANNOTATION,\n  TRIGGERS_ANNOTATION,\n  DEPLOYMENT_PHASE_ANNOTATION,\n  CONTAINER_WAITING_STATE_ERROR_REASONS,\n  DEPLOYMENT_STRATEGY,\n  DEPLOYMENT_PHASE,\n  AllPodStatus,\n} from '../constants';\nimport { resourceStatus, podStatus } from './ResourceStatus';\nimport { isKnativeServing, isIdled } from './pod-utils';\nimport {\n  ClusterServiceVersionModel,\n  ClusterServiceVersionKind,\n} from '@console/operator-lifecycle-manager';\n\nexport const getResourceList = (namespace: string, resList?: any) => {\n  let resources: FirehoseResource[] = [\n    {\n      isList: true,\n      kind: 'DeploymentConfig',\n      namespace,\n      prop: 'deploymentConfigs',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: 'Deployment',\n      namespace,\n      prop: 'deployments',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: 'DaemonSet',\n      namespace,\n      prop: 'daemonSets',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: 'Pod',\n      namespace,\n      prop: 'pods',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: 'ReplicationController',\n      namespace,\n      prop: 'replicationControllers',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: 'Route',\n      namespace,\n      prop: 'routes',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: 'Service',\n      namespace,\n      prop: 'services',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: 'ReplicaSet',\n      namespace,\n      prop: 'replicaSets',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: 'BuildConfig',\n      namespace,\n      prop: 'buildConfigs',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: 'Build',\n      namespace,\n      prop: 'builds',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: 'StatefulSet',\n      namespace,\n      prop: 'statefulSets',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: 'Secret',\n      namespace,\n      prop: 'secrets',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: referenceForModel(ClusterServiceVersionModel),\n      namespace,\n      prop: 'clusterServiceVersions',\n      optional: true,\n    },\n  ];\n\n  let utils = [];\n  if (resList) {\n    resList.forEach((resource) => {\n      resources = [...resources, ...resource.properties.resources(namespace)];\n      utils = [...utils, resource.properties.utils];\n    });\n  }\n\n  return { resources, utils };\n};\n\nexport const getResourcePausedAlert = (resource: K8sResourceKind): OverviewItemAlerts => {\n  if (!resource.spec.paused) {\n    return {};\n  }\n  return {\n    [`${resource.metadata.uid}--Paused`]: {\n      severity: 'info',\n      message: `${resource.metadata.name} is paused.`,\n    },\n  };\n};\n\nexport const getBuildAlerts = (buildConfigs: BuildConfigOverviewItem[]): OverviewItemAlerts => {\n  const buildAlerts = {};\n  const addAlert = (build: K8sResourceKind, buildPhase: string) =>\n    _.set(buildAlerts, `${build.metadata.uid}--build${buildPhase}`, {\n      severity: `build${buildPhase}`,\n      message: _.get(build, ['status', 'message'], buildPhase),\n    });\n\n  _.each(buildConfigs, (bc) => {\n    let seenComplete = false;\n    // Requires builds to be sorted by most recent first.\n    _.each(bc.builds, (build: K8sResourceKind) => {\n      const buildPhase = _.get(build, ['status', 'phase']);\n      switch (buildPhase) {\n        case 'Complete':\n          seenComplete = true;\n          break;\n        case 'Failed':\n        case 'Error':\n          if (!seenComplete) {\n            // show failure/error\n            addAlert(build, buildPhase);\n          }\n          break;\n        case 'New':\n        case 'Pending':\n        case 'Running':\n          // show new/pending/running\n          addAlert(build, buildPhase);\n          break;\n        default:\n          break;\n      }\n    });\n  });\n\n  return buildAlerts;\n};\n\nexport const getOwnedResources = <T extends K8sResourceKind>(\n  { metadata: { uid } }: K8sResourceKind,\n  resources: T[],\n): T[] => {\n  return _.filter(resources, ({ metadata: { ownerReferences } }) => {\n    return _.some(ownerReferences, {\n      uid,\n      controller: true,\n    });\n  });\n};\n\nconst sortByRevision = (\n  replicators: K8sResourceKind[],\n  getRevision: Function,\n  descending: boolean = true,\n): K8sResourceKind[] => {\n  const compare = (left, right) => {\n    const leftVersion = getRevision(left);\n    const rightVersion = getRevision(right);\n    if (!_.isFinite(leftVersion) && !_.isFinite(rightVersion)) {\n      const leftName = _.get(left, 'metadata.name', '');\n      const rightName = _.get(right, 'metadata.name', '');\n      if (descending) {\n        return rightName.localeCompare(leftName);\n      }\n      return leftName.localeCompare(rightName);\n    }\n\n    if (!leftVersion) {\n      return descending ? 1 : -1;\n    }\n\n    if (!rightVersion) {\n      return descending ? -1 : 1;\n    }\n\n    if (descending) {\n      return rightVersion - leftVersion;\n    }\n\n    return leftVersion - rightVersion;\n  };\n\n  return _.toArray(replicators).sort(compare);\n};\n\nconst getAnnotation = (obj: K8sResourceKind, annotation: string): string => {\n  return _.get(obj, ['metadata', 'annotations', annotation]);\n};\n\nexport const parseJSONAnnotation = (\n  annotations: ObjectMetadata['annotations'],\n  annotationKey: string,\n  onError?: (err: Error) => void,\n  defaultReturn?: any,\n): any => {\n  try {\n    return annotations?.[annotationKey] ? JSON.parse(annotations?.[annotationKey]) : defaultReturn;\n  } catch (e) {\n    onError && onError(e);\n    // eslint-disable-next-line no-console\n    console.warn(`Could not parse annotation ${annotationKey} as JSON: `, e);\n    return defaultReturn;\n  }\n};\n\nconst getDeploymentRevision = (obj: K8sResourceKind): number => {\n  const revision = getAnnotation(obj, DEPLOYMENT_REVISION_ANNOTATION);\n  return revision && parseInt(revision, 10);\n};\n\nconst getDeploymentConfigVersion = (obj: K8sResourceKind): number => {\n  const version = getAnnotation(obj, DEPLOYMENT_CONFIG_LATEST_VERSION_ANNOTATION);\n  return version && parseInt(version, 10);\n};\n\nconst getDeploymentConfigName = (obj: K8sResourceKind): string => {\n  return _.get(obj, 'metadata.ownerReferences[0].name', null);\n};\n\nexport const sortReplicaSetsByRevision = (replicaSets: K8sResourceKind[]): K8sResourceKind[] => {\n  return sortByRevision(replicaSets, getDeploymentRevision);\n};\n\nconst sortReplicationControllersByRevision = (\n  replicationControllers: K8sResourceKind[],\n): K8sResourceKind[] => {\n  return sortByRevision(replicationControllers, getDeploymentConfigVersion);\n};\n\nexport const sortBuilds = (builds: K8sResourceKind[]): K8sResourceKind[] => {\n  const byCreationTime = (left, right) => {\n    const leftCreationTime = new Date(_.get(left, 'metadata.creationTimestamp', Date.now()));\n    const rightCreationTime = new Date(_.get(right, 'metadata.creationTimestamp', Date.now()));\n    return rightCreationTime.getMilliseconds() - leftCreationTime.getMilliseconds();\n  };\n\n  const byBuildNumber = (left, right) => {\n    const leftBuildNumber = getBuildNumber(left);\n    const rightBuildNumber = getBuildNumber(right);\n    if (!_.isFinite(leftBuildNumber) || !_.isFinite(rightBuildNumber)) {\n      return byCreationTime(left, right);\n    }\n    return rightBuildNumber - leftBuildNumber;\n  };\n\n  return [...builds].sort(byBuildNumber);\n};\n\n// FIXME use parseJSONAnnotation helper\nconst getAnnotatedTriggers = (obj: K8sResourceKind) => {\n  const triggersJSON = getAnnotation(obj, TRIGGERS_ANNOTATION) || '[]';\n  try {\n    return JSON.parse(triggersJSON);\n  } catch (e) {\n    /* eslint-disable-next-line no-console */\n    console.error('Error parsing triggers annotation', e);\n    return [];\n  }\n};\n\nconst getDeploymentPhase = (rc: K8sResourceKind): DEPLOYMENT_PHASE =>\n  _.get(rc, ['metadata', 'annotations', DEPLOYMENT_PHASE_ANNOTATION]);\n\n// Only show an alert once if multiple pods have the same error for the same owner.\nconst podAlertKey = (alert: any, pod: K8sResourceKind, containerName: string = 'all'): string => {\n  const id = _.get(pod, 'metadata.ownerReferences[0].uid', pod.metadata.uid);\n  return `${alert}--${id}--${containerName}`;\n};\n\nconst getPodAlerts = (pod: K8sResourceKind): OverviewItemAlerts => {\n  const alerts = {};\n  const statuses = [\n    ..._.get(pod, 'status.initContainerStatuses', []),\n    ..._.get(pod, 'status.containerStatuses', []),\n  ];\n  statuses.forEach((status) => {\n    const { name, state } = status;\n    const waitingReason = _.get(state, 'waiting.reason');\n    if (CONTAINER_WAITING_STATE_ERROR_REASONS.includes(waitingReason)) {\n      const key = podAlertKey(waitingReason, pod, name);\n      const message = state.waiting.message || waitingReason;\n      alerts[key] = { severity: 'error', message };\n    }\n  });\n\n  _.get(pod, 'status.conditions', []).forEach((condition) => {\n    const { type, status, reason, message } = condition;\n    if (type === 'PodScheduled' && status === 'False' && reason === 'Unschedulable') {\n      // eslint-disable-next-line\n      const key = podAlertKey(reason, pod, name);\n      alerts[key] = {\n        severity: 'error',\n        message: `${reason}: ${message}`,\n      };\n    }\n  });\n\n  return alerts;\n};\n\nconst combinePodAlerts = (pods: K8sResourceKind[]): OverviewItemAlerts =>\n  _.reduce(\n    pods,\n    (acc, pod) => ({\n      ...acc,\n      ...getPodAlerts(pod),\n    }),\n    {},\n  );\n\nexport const getReplicationControllerAlerts = (rc: K8sResourceKind): OverviewItemAlerts => {\n  const phase = getDeploymentPhase(rc);\n  const version = getDeploymentConfigVersion(rc);\n  const name = getDeploymentConfigName(rc);\n  const label = _.isFinite(version) ? `${name} #${version}` : rc.metadata.name;\n  const key = `${rc.metadata.uid}--Rollout${phase}`;\n  switch (phase) {\n    case 'Cancelled':\n      return {\n        [key]: {\n          severity: 'info',\n          message: `Rollout ${label} was cancelled.`,\n        },\n      };\n    case 'Failed':\n      return {\n        [key]: {\n          severity: 'error',\n          message: `Rollout ${label} failed.`,\n        },\n      };\n    default:\n      return {};\n  }\n};\n\nconst getAutoscaledPods = (rc: K8sResourceKind): ExtPodKind[] => {\n  return [\n    {\n      ..._.pick(rc, 'metadata', 'status', 'spec'),\n      status: { phase: AllPodStatus.AutoScaledTo0 },\n    },\n  ];\n};\n\nconst getIdledStatus = (\n  rc: PodControllerOverviewItem,\n  dc: K8sResourceKind,\n): PodControllerOverviewItem => {\n  const { pods } = rc;\n  if (pods && !pods.length && isIdled(dc)) {\n    return {\n      ...rc,\n      // FIXME: This is not a PodKind.\n      pods: [\n        {\n          ..._.pick(rc.obj, 'metadata', 'status', 'spec'),\n          status: { phase: AllPodStatus.Idle },\n        },\n      ],\n    };\n  }\n  return rc;\n};\n\nexport const getRolloutStatus = (\n  dc: K8sResourceKind,\n  current: PodControllerOverviewItem,\n  previous: PodControllerOverviewItem,\n): boolean => {\n  const {\n    spec: {\n      strategy: { type: strategy },\n    },\n  } = dc;\n  const phase = current && current.phase;\n  const currentRC = current && current.obj;\n  const notFailedOrCancelled =\n    phase !== DEPLOYMENT_PHASE.cancelled && phase !== DEPLOYMENT_PHASE.failed;\n  if (strategy === DEPLOYMENT_STRATEGY.recreate) {\n    return (\n      notFailedOrCancelled &&\n      getDeploymentConfigVersion(currentRC) > 1 &&\n      phase !== DEPLOYMENT_PHASE.complete\n    );\n  }\n  return notFailedOrCancelled && previous && previous.pods.length > 0;\n};\n\nconst isDeploymentInProgressOrCompleted = (resource: K8sResourceKind): boolean => {\n  return (\n    [\n      DEPLOYMENT_PHASE.new,\n      DEPLOYMENT_PHASE.pending,\n      DEPLOYMENT_PHASE.running,\n      DEPLOYMENT_PHASE.complete,\n    ].indexOf(getDeploymentPhase(resource)) > -1\n  );\n};\n\nconst isReplicationControllerVisible = (resource: K8sResourceKind): boolean => {\n  return !!_.get(resource, ['status', 'replicas'], isDeploymentInProgressOrCompleted(resource));\n};\n\nexport const getOperatorBackedServiceKindMap = (\n  installedOperators: ClusterServiceVersionKind[],\n): OperatorBackedServiceKindMap =>\n  installedOperators\n    ? installedOperators.reduce((kindMap, csv) => {\n        (csv?.spec?.customresourcedefinitions?.owned || []).forEach((crd) => {\n          if (!(crd.kind in kindMap)) {\n            kindMap[crd.kind] = csv;\n          }\n        });\n        return kindMap;\n      }, {})\n    : {};\n\nexport const isOperatorBackedService = (\n  obj: K8sResourceKind,\n  installedOperators: ClusterServiceVersionKind[],\n): boolean => {\n  const kind = _.get(obj, 'metadata.ownerReferences[0].kind', null);\n  const ownerUid = _.get(obj, 'metadata.ownerReferences[0].uid');\n  const operatBackedServiceKindMap = getOperatorBackedServiceKindMap(installedOperators);\n  const operatorResource: K8sResourceKind = _.find(installedOperators, {\n    metadata: { uid: ownerUid },\n  }) as K8sResourceKind;\n  return (\n    kind &&\n    operatBackedServiceKindMap &&\n    (!_.isEmpty(operatorResource) || kind in operatBackedServiceKindMap)\n  );\n};\n\nexport const getPodsForResource = (resource: K8sResourceKind, resources: any): PodKind[] => {\n  const { pods } = resources;\n  return getOwnedResources(resource, pods.data);\n};\n\nexport const toReplicationControllerItem = (\n  rc: K8sResourceKind,\n  resources: any,\n): PodControllerOverviewItem => {\n  const pods = getPodsForResource(rc, resources);\n  const alerts = {\n    ...combinePodAlerts(pods),\n    ...getReplicationControllerAlerts(rc),\n  };\n  const phase = getDeploymentPhase(rc);\n  const revision = getDeploymentConfigVersion(rc);\n  const obj = {\n    ...rc,\n    apiVersion: apiVersionForModel(ReplicationControllerModel),\n    kind: ReplicationControllerModel.kind,\n  };\n  return {\n    alerts,\n    obj,\n    phase,\n    pods,\n    revision,\n  };\n};\n\nexport const getReplicationControllersForResource = (\n  resource: K8sResourceKind,\n  resources: any,\n): {\n  mostRecentRC: K8sResourceKind;\n  visibleReplicationControllers: PodControllerOverviewItem[];\n} => {\n  const { replicationControllers } = resources;\n  const ownedRC = getOwnedResources(resource, replicationControllers.data);\n  const sortedRCs = sortReplicationControllersByRevision(ownedRC);\n  // get the most recent RCs included failed or canceled to show warnings\n  const [mostRecentRC] = sortedRCs;\n  // get the visible RCs except failed/canceled\n  const visibleReplicationControllers = _.filter(sortedRCs, isReplicationControllerVisible);\n  return {\n    mostRecentRC,\n    visibleReplicationControllers: visibleReplicationControllers.map((rc) =>\n      getIdledStatus(toReplicationControllerItem(rc, resources), resource),\n    ),\n  };\n};\n\nconst toResourceItem = (\n  rs: K8sResourceKind,\n  model: K8sKind,\n  resources: any,\n): PodControllerOverviewItem => {\n  const obj = {\n    ...rs,\n    apiVersion: apiVersionForModel(model),\n    kind: `${model.kind}`,\n  };\n  const isKnative = isKnativeServing(rs, 'metadata.labels');\n  const podData = getPodsForResource(rs, resources);\n  const pods = podData && !podData.length && isKnative ? getAutoscaledPods(rs) : podData;\n  const alerts = combinePodAlerts(pods);\n  return {\n    alerts,\n    obj,\n    pods,\n    revision: getDeploymentRevision(rs),\n  };\n};\n\nconst getActiveStatefulSets = (ss: K8sResourceKind, resources: any): K8sResourceKind[] => {\n  const { statefulSets } = resources;\n  const ownedRS = _.filter(statefulSets?.data, (f) => f.metadata.name === ss.metadata.name);\n  return _.filter(ownedRS, (rs) => _.get(rs, 'status.replicas'));\n};\n\nexport const getStatefulSetsResource = (\n  ss: K8sResourceKind,\n  resources: any,\n): PodControllerOverviewItem[] => {\n  const activeStatefulSets = getActiveStatefulSets(ss, resources);\n  return activeStatefulSets.map((pss) =>\n    getIdledStatus(toResourceItem(pss, StatefulSetModel, resources), ss),\n  );\n};\n\nexport const getActiveReplicaSets = (\n  deployment: K8sResourceKind,\n  resources: any,\n): K8sResourceKind[] => {\n  const { replicaSets } = resources;\n  const currentRevision = getDeploymentRevision(deployment);\n  const ownedRS = getOwnedResources(deployment, replicaSets.data);\n  return _.filter(\n    ownedRS,\n    (rs) => _.get(rs, 'status.replicas') || getDeploymentRevision(rs) === currentRevision,\n  );\n};\n\nexport const getReplicaSetsForResource = (\n  deployment: K8sResourceKind,\n  resources: any,\n): PodControllerOverviewItem[] => {\n  const replicaSets = getActiveReplicaSets(deployment, resources);\n  return sortReplicaSetsByRevision(replicaSets).map((rs) =>\n    getIdledStatus(toResourceItem(rs, ReplicaSetModel, resources), deployment),\n  );\n};\n\nexport const getBuildsForResource = (\n  buildConfig: K8sResourceKind,\n  resources: any,\n): K8sResourceKind[] => {\n  const { builds } = resources;\n  return getOwnedResources(buildConfig, builds.data);\n};\n\nexport const getBuildConfigsForResource = (\n  resource: K8sResourceKind,\n  resources: any,\n): BuildConfigOverviewItem[] => {\n  const buildConfigs = _.get(resources, ['buildConfigs', 'data']);\n  const currentNamespace = resource.metadata.namespace;\n  const nativeTriggers = _.get(resource, 'spec.triggers');\n  const annotatedTriggers = getAnnotatedTriggers(resource);\n  const triggers = _.unionWith(nativeTriggers, annotatedTriggers, _.isEqual);\n  return _.flatMap(triggers, (trigger) => {\n    const triggerFrom = trigger.from || _.get(trigger, 'imageChangeParams.from', {});\n    if (triggerFrom.kind !== 'ImageStreamTag') {\n      return [];\n    }\n    return _.reduce(\n      buildConfigs,\n      (acc, buildConfig) => {\n        const triggerImageNamespace = triggerFrom.namespace || currentNamespace;\n        const triggerImageName = triggerFrom.name;\n        const targetImageNamespace = _.get(\n          buildConfig,\n          'spec.output.to.namespace',\n          currentNamespace,\n        );\n        const targetImageName = _.get(buildConfig, 'spec.output.to.name');\n        if (\n          triggerImageNamespace === targetImageNamespace &&\n          triggerImageName === targetImageName\n        ) {\n          const builds = getBuildsForResource(buildConfig, resources);\n          return [\n            ...acc,\n            {\n              ...buildConfig,\n              builds: sortBuilds(builds),\n            },\n          ];\n        }\n        return acc;\n      },\n      [],\n    );\n  });\n};\n\nexport const getPodTemplate = (resource: K8sResourceKind): PodTemplate => {\n  switch (resource.kind) {\n    case 'Pod':\n      return resource as PodKind;\n    case 'DeploymentConfig':\n      // Include labels automatically added to deployment config pods since a service\n      // might select them.\n      return _.defaultsDeep(\n        {\n          metadata: {\n            labels: {\n              deploymentconfig: resource.metadata.name,\n            },\n          },\n        },\n        resource.spec.template,\n      );\n    default:\n      return resource.spec.template;\n  }\n};\n\nexport const getRoutesForServices = (services: K8sResourceKind[], resources: any): RouteKind[] => {\n  const { routes } = resources;\n  return _.filter(routes.data, (route) => {\n    const name = _.get(route, 'spec.to.name');\n    return _.some(services, { metadata: { name } });\n  });\n};\n\nexport const getServicesForResource = (\n  resource: K8sResourceKind,\n  resources: any,\n): K8sResourceKind[] => {\n  const { services } = resources;\n  const template: PodTemplate = getPodTemplate(resource);\n  return _.filter(services.data, (service: K8sResourceKind) => {\n    const selector = new LabelSelector(_.get(service, 'spec.selector', {}));\n    return selector.matches(template);\n  });\n};\n\nexport const createDeploymentConfigItems = (\n  deploymentConfigs: K8sResourceKind[],\n  resources: any,\n  installedOperators: ClusterServiceVersionKind[],\n  utils?: Function[],\n  operatorsFilter?: boolean,\n): OverviewItem[] => {\n  const items = _.map(deploymentConfigs, (dc) => {\n    const obj: K8sResourceKind = {\n      ...dc,\n      apiVersion: apiVersionForModel(DeploymentConfigModel),\n      kind: DeploymentConfigModel.kind,\n    };\n    const { mostRecentRC, visibleReplicationControllers } = getReplicationControllersForResource(\n      obj,\n      resources,\n    );\n    const [current, previous] = visibleReplicationControllers;\n    const isRollingOut = getRolloutStatus(obj, current, previous);\n    const buildConfigs = getBuildConfigsForResource(obj, resources);\n    const services = getServicesForResource(obj, resources);\n    const routes = getRoutesForServices(services, resources);\n    const rolloutAlerts = mostRecentRC ? getReplicationControllerAlerts(mostRecentRC) : {};\n    const alerts = {\n      ...getResourcePausedAlert(obj),\n      ...getBuildAlerts(buildConfigs),\n      ...rolloutAlerts,\n    };\n    const status = resourceStatus(obj, current, isRollingOut);\n    const pods = [..._.get(current, 'pods', []), ..._.get(previous, 'pods', [])];\n    const overviewItems = {\n      alerts,\n      buildConfigs,\n      current,\n      isRollingOut,\n      obj,\n      previous,\n      pods,\n      routes,\n      services,\n      status,\n      isMonitorable: true,\n      isOperatorBackedService: isOperatorBackedService(obj, installedOperators),\n    };\n\n    if (utils) {\n      return utils.reduce((acc, element) => {\n        return { ...acc, ...element(obj, resources) };\n      }, overviewItems);\n    }\n    return overviewItems;\n  });\n  if (operatorsFilter !== undefined) {\n    return items.filter((item) => item.isOperatorBackedService === operatorsFilter);\n  }\n  return items;\n};\n\nexport const createDeploymentItems = (\n  deployments: DeploymentKind[],\n  resources: any,\n  installedOperators: ClusterServiceVersionKind[],\n  utils?: Function[],\n  operatorsFilter?: boolean,\n): OverviewItem<DeploymentKind>[] => {\n  const items = _.map(deployments, (d) => {\n    const obj: DeploymentKind = {\n      ...d,\n      apiVersion: apiVersionForModel(DeploymentModel),\n      kind: DeploymentModel.kind,\n    };\n    const replicaSets = getReplicaSetsForResource(obj, resources);\n    const [current, previous] = replicaSets;\n    const isRollingOut = !!current && !!previous;\n    const buildConfigs = getBuildConfigsForResource(obj, resources);\n    const services = getServicesForResource(obj, resources);\n    const routes = getRoutesForServices(services, resources);\n    const alerts = {\n      ...getResourcePausedAlert(obj),\n      ...getBuildAlerts(buildConfigs),\n    };\n    const status = resourceStatus(obj, current, isRollingOut);\n    const pods = [..._.get(current, 'pods', []), ..._.get(previous, 'pods', [])];\n    const overviewItems = {\n      alerts,\n      buildConfigs,\n      current,\n      isRollingOut,\n      obj,\n      previous,\n      pods,\n      routes,\n      services,\n      status,\n      isMonitorable: true,\n      isOperatorBackedService: isOperatorBackedService(obj, installedOperators),\n    };\n\n    if (utils) {\n      return utils.reduce((acc, element) => {\n        return { ...acc, ...element(obj, resources) };\n      }, overviewItems);\n    }\n    return overviewItems;\n  });\n  if (operatorsFilter !== undefined) {\n    return items.filter((item) => item.isOperatorBackedService === operatorsFilter);\n  }\n  return items;\n};\n\nexport const createDaemonSetItems = (\n  daemonSets: K8sResourceKind[],\n  resources: any,\n  installedOperators: ClusterServiceVersionKind[],\n  utils?: Function[],\n  operatorsFilter?: boolean,\n): OverviewItem[] => {\n  const items = _.map(daemonSets, (ds) => {\n    const obj: K8sResourceKind = {\n      ...ds,\n      apiVersion: apiVersionForModel(DaemonSetModel),\n      kind: DaemonSetModel.kind,\n    };\n    const buildConfigs = getBuildConfigsForResource(obj, resources);\n    const services = getServicesForResource(obj, resources);\n    const routes = getRoutesForServices(services, resources);\n    const pods = getPodsForResource(obj, resources);\n    const alerts = {\n      ...combinePodAlerts(pods),\n      ...getBuildAlerts(buildConfigs),\n    };\n    const status = resourceStatus(obj);\n    return {\n      alerts,\n      buildConfigs,\n      obj,\n      pods,\n      routes,\n      services,\n      status,\n      isMonitorable: true,\n      isOperatorBackedService: isOperatorBackedService(obj, installedOperators),\n    };\n  });\n  if (operatorsFilter !== undefined) {\n    return items.filter((item) => item.isOperatorBackedService === operatorsFilter);\n  }\n  return items;\n};\n\nexport const createStatefulSetItems = (\n  statefulSets: K8sResourceKind[],\n  resources: any,\n  installedOperators: ClusterServiceVersionKind[],\n  utils?: Function[],\n  operatorsFilter?: boolean,\n): OverviewItem[] => {\n  const items = _.map(statefulSets, (ss) => {\n    const obj: K8sResourceKind = {\n      ...ss,\n      apiVersion: apiVersionForModel(StatefulSetModel),\n      kind: StatefulSetModel.kind,\n    };\n    const buildConfigs = getBuildConfigsForResource(obj, resources);\n    const pods = getPodsForResource(obj, resources);\n    const alerts = {\n      ...combinePodAlerts(pods),\n      ...getBuildAlerts(buildConfigs),\n    };\n    const services = getServicesForResource(obj, resources);\n    const routes = getRoutesForServices(services, resources);\n    const status = resourceStatus(obj);\n    return {\n      alerts,\n      buildConfigs,\n      obj,\n      pods,\n      routes,\n      services,\n      status,\n      isMonitorable: true,\n      isOperatorBackedService: isOperatorBackedService(obj, installedOperators),\n    };\n  });\n  if (operatorsFilter !== undefined) {\n    return items.filter((item) => item.isOperatorBackedService === operatorsFilter);\n  }\n  return items;\n};\n\nexport const createPodItems = (resources: any): OverviewItem[] => {\n  const { pods } = resources;\n  return _.reduce(\n    pods.data,\n    (acc, pod) => {\n      const obj: PodKind = {\n        ...pod,\n        apiVersion: apiVersionForModel(PodModel),\n        kind: PodModel.kind,\n      };\n      const owners = _.get(obj, 'metadata.ownerReferences');\n      const phase = _.get(obj, 'status.phase');\n      if (!_.isEmpty(owners) || phase === 'Succeeded' || phase === 'Failed') {\n        return acc;\n      }\n\n      const alerts = getPodAlerts(obj);\n      const services = getServicesForResource(obj, resources);\n      const routes = getRoutesForServices(services, resources);\n      const status = podStatus(obj);\n      return [\n        ...acc,\n        {\n          alerts,\n          obj,\n          routes,\n          services,\n          status,\n        },\n      ];\n    },\n    [],\n  );\n};\n\nexport const getPodsForDeploymentConfigs = (\n  deploymentConfigs: K8sResourceKind[],\n  resources: any,\n): PodRCData[] => {\n  return _.map(deploymentConfigs, (dc) => {\n    const obj: K8sResourceKind = {\n      ...dc,\n      apiVersion: apiVersionForModel(DeploymentConfigModel),\n      kind: DeploymentConfigModel.kind,\n    };\n    const { visibleReplicationControllers } = getReplicationControllersForResource(obj, resources);\n    const [current, previous] = visibleReplicationControllers;\n    const isRollingOut = getRolloutStatus(obj, current, previous);\n    return {\n      obj,\n      current,\n      previous,\n      pods: [..._.get(current, 'pods', []), ..._.get(previous, 'pods', [])],\n      isRollingOut,\n    };\n  });\n};\n\nexport const getPodsForDeployments = (\n  deployments: K8sResourceKind[],\n  resources: any,\n): PodRCData[] => {\n  return _.map(deployments, (d) => {\n    const obj: K8sResourceKind = {\n      ...d,\n      apiVersion: apiVersionForModel(DeploymentModel),\n      kind: DeploymentModel.kind,\n    };\n    const replicaSets = getReplicaSetsForResource(obj, resources);\n    const [current, previous] = replicaSets;\n    const isRollingOut = !!current && !!previous;\n\n    return {\n      obj,\n      current,\n      previous,\n      isRollingOut,\n      pods: [..._.get(current, 'pods', []), ..._.get(previous, 'pods', [])],\n    };\n  });\n};\n\nexport const getPodsForStatefulSets = (ss: K8sResourceKind[], resources: any): PodRCData[] => {\n  return _.map(ss, (s) => {\n    const obj: K8sResourceKind = {\n      ...s,\n      apiVersion: apiVersionForModel(StatefulSetModel),\n      kind: StatefulSetModel.kind,\n    };\n    const statefulSets = getStatefulSetsResource(obj, resources);\n    const [current, previous] = statefulSets;\n    const isRollingOut = !!current && !!previous;\n\n    return {\n      obj,\n      current,\n      previous,\n      isRollingOut,\n      pods: [..._.get(current, 'pods', []), ..._.get(previous, 'pods', [])],\n    };\n  });\n};\n\nexport const getPodsForDaemonSets = (ds: K8sResourceKind[], resources: any): PodRCData[] => {\n  return _.map(ds, (d) => {\n    const obj: K8sResourceKind = {\n      ...d,\n      apiVersion: apiVersionForModel(StatefulSetModel),\n      kind: StatefulSetModel.kind,\n    };\n    return {\n      obj,\n      current: undefined,\n      previous: undefined,\n      isRollingOut: undefined,\n      pods: getPodsForResource(d, resources),\n    };\n  });\n};\n"]}]}