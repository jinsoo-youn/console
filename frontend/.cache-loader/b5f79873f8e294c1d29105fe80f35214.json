{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/dashboard/project-dashboard/inventory-card.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/dashboard/project-dashboard/inventory-card.tsx","mtime":1615298458730},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { withDashboardResources } from '../with-dashboard-resources';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport { PodModel, DeploymentModel, DeploymentConfigModel, PersistentVolumeClaimModel, ServiceModel, StatefulSetModel, RouteModel, ConfigMapModel, SecretModel, } from '../../../models';\nimport { ResourceInventoryItem, } from '@console/shared/src/components/dashboard/inventory-card/InventoryItem';\nimport { getPodStatusGroups, getPVCStatusGroups, } from '@console/shared/src/components/dashboard/inventory-card/utils';\nimport { useAccessReview } from '../../utils';\nimport { referenceForModel } from '../../../module/k8s';\nimport { getName } from '@console/shared';\nimport { ProjectDashboardContext } from './project-dashboard-context';\nimport { useExtensions, isProjectDashboardInventoryItem, } from '@console/plugin-sdk';\nconst createFirehoseResource = (model, projectName) => ({\n    kind: model.crd ? referenceForModel(model) : model.kind,\n    isList: true,\n    prop: 'resource',\n    namespace: projectName,\n});\nconst ProjectInventoryItem = withDashboardResources(({ projectName, watchK8sResource, stopWatchK8sResource, resources, model, mapper, useAbbr, additionalResources, }) => {\n    React.useEffect(() => {\n        if (projectName) {\n            const resource = createFirehoseResource(model, projectName);\n            watchK8sResource(resource);\n            if (additionalResources) {\n                additionalResources.forEach((r) => watchK8sResource(Object.assign(Object.assign({}, r), { namespace: projectName })));\n            }\n            return () => {\n                stopWatchK8sResource(resource);\n                if (additionalResources) {\n                    additionalResources.forEach(stopWatchK8sResource);\n                }\n            };\n        }\n    }, [watchK8sResource, stopWatchK8sResource, projectName, model, additionalResources]);\n    const resourceData = _.get(resources.resource, 'data', []);\n    const resourceLoaded = _.get(resources.resource, 'loaded');\n    const resourceLoadError = _.get(resources.resource, 'loadError');\n    const additionalResourcesData = additionalResources\n        ? additionalResources.reduce((acc, r) => {\n            acc[r.prop] = _.get(resources[r.prop], 'data');\n            return acc;\n        }, {})\n        : {};\n    const additionalResourcesLoaded = additionalResources\n        ? additionalResources\n            .filter((r) => !r.optional)\n            .every((r) => _.get(resources[r.prop], 'loaded'))\n        : true;\n    const additionalResourcesLoadError = additionalResources\n        ? additionalResources\n            .filter((r) => !r.optional)\n            .some((r) => !!_.get(resources[r.prop], 'loadError'))\n        : false;\n    return (React.createElement(ResourceInventoryItem, { kind: model, isLoading: !projectName || !resourceLoaded || !additionalResourcesLoaded, namespace: projectName, error: !!resourceLoadError || additionalResourcesLoadError, resources: resourceData, additionalResources: additionalResourcesData, mapper: mapper, useAbbr: useAbbr }));\n});\nexport const InventoryCard = () => {\n    const itemExtensions = useExtensions(isProjectDashboardInventoryItem);\n    const { obj } = React.useContext(ProjectDashboardContext);\n    const projectName = getName(obj);\n    const canListSecrets = useAccessReview({\n        group: SecretModel.apiGroup,\n        resource: SecretModel.plural,\n        namespace: projectName,\n        verb: 'list',\n    });\n    return (React.createElement(DashboardCard, { \"data-test-id\": \"inventory-card\" },\n        React.createElement(DashboardCardHeader, null,\n            React.createElement(DashboardCardTitle, null, \"Inventory\")),\n        React.createElement(DashboardCardBody, null,\n            React.createElement(ProjectInventoryItem, { projectName: projectName, model: DeploymentModel }),\n            React.createElement(ProjectInventoryItem, { projectName: projectName, model: DeploymentConfigModel }),\n            React.createElement(ProjectInventoryItem, { projectName: projectName, model: StatefulSetModel }),\n            React.createElement(ProjectInventoryItem, { projectName: projectName, model: PodModel, mapper: getPodStatusGroups }),\n            React.createElement(ProjectInventoryItem, { projectName: projectName, model: PersistentVolumeClaimModel, mapper: getPVCStatusGroups, useAbbr: true }),\n            React.createElement(ProjectInventoryItem, { projectName: projectName, model: ServiceModel }),\n            React.createElement(ProjectInventoryItem, { projectName: projectName, model: RouteModel }),\n            React.createElement(ProjectInventoryItem, { projectName: projectName, model: ConfigMapModel }),\n            canListSecrets && React.createElement(ProjectInventoryItem, { projectName: projectName, model: SecretModel }),\n            itemExtensions.map((item) => (React.createElement(ProjectInventoryItem, { key: item.properties.model.kind, projectName: projectName, model: item.properties.model, mapper: item.properties.mapper, additionalResources: item.properties.additionalResources, useAbbr: item.properties.useAbbr }))))));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/dashboard/project-dashboard/inventory-card.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/dashboard/project-dashboard/inventory-card.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { DashboardItemProps, withDashboardResources } from '../with-dashboard-resources';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport {\n  PodModel,\n  DeploymentModel,\n  DeploymentConfigModel,\n  PersistentVolumeClaimModel,\n  ServiceModel,\n  StatefulSetModel,\n  RouteModel,\n  ConfigMapModel,\n  SecretModel,\n} from '../../../models';\nimport {\n  ResourceInventoryItem,\n  StatusGroupMapper,\n} from '@console/shared/src/components/dashboard/inventory-card/InventoryItem';\nimport {\n  getPodStatusGroups,\n  getPVCStatusGroups,\n} from '@console/shared/src/components/dashboard/inventory-card/utils';\nimport { FirehoseResult, FirehoseResource, useAccessReview } from '../../utils';\nimport { K8sKind, referenceForModel } from '../../../module/k8s';\nimport { getName } from '@console/shared';\nimport { ProjectDashboardContext } from './project-dashboard-context';\nimport {\n  useExtensions,\n  ProjectDashboardInventoryItem,\n  isProjectDashboardInventoryItem,\n} from '@console/plugin-sdk';\n\nconst createFirehoseResource = (model: K8sKind, projectName: string): FirehoseResource => ({\n  kind: model.crd ? referenceForModel(model) : model.kind,\n  isList: true,\n  prop: 'resource',\n  namespace: projectName,\n});\n\nconst ProjectInventoryItem = withDashboardResources(\n  ({\n    projectName,\n    watchK8sResource,\n    stopWatchK8sResource,\n    resources,\n    model,\n    mapper,\n    useAbbr,\n    additionalResources,\n  }: ProjectInventoryItemProps) => {\n    React.useEffect(() => {\n      if (projectName) {\n        const resource = createFirehoseResource(model, projectName);\n        watchK8sResource(resource);\n        if (additionalResources) {\n          additionalResources.forEach((r) => watchK8sResource({ ...r, namespace: projectName }));\n        }\n        return () => {\n          stopWatchK8sResource(resource);\n          if (additionalResources) {\n            additionalResources.forEach(stopWatchK8sResource);\n          }\n        };\n      }\n    }, [watchK8sResource, stopWatchK8sResource, projectName, model, additionalResources]);\n\n    const resourceData = _.get(resources.resource, 'data', []) as FirehoseResult['data'];\n    const resourceLoaded = _.get(resources.resource, 'loaded');\n    const resourceLoadError = _.get(resources.resource, 'loadError');\n\n    const additionalResourcesData = additionalResources\n      ? additionalResources.reduce((acc, r) => {\n          acc[r.prop] = _.get(resources[r.prop], 'data');\n          return acc;\n        }, {})\n      : {};\n    const additionalResourcesLoaded = additionalResources\n      ? additionalResources\n          .filter((r) => !r.optional)\n          .every((r) => _.get(resources[r.prop], 'loaded'))\n      : true;\n    const additionalResourcesLoadError = additionalResources\n      ? additionalResources\n          .filter((r) => !r.optional)\n          .some((r) => !!_.get(resources[r.prop], 'loadError'))\n      : false;\n\n    return (\n      <ResourceInventoryItem\n        kind={model}\n        isLoading={!projectName || !resourceLoaded || !additionalResourcesLoaded}\n        namespace={projectName}\n        error={!!resourceLoadError || additionalResourcesLoadError}\n        resources={resourceData}\n        additionalResources={additionalResourcesData}\n        mapper={mapper}\n        useAbbr={useAbbr}\n      />\n    );\n  },\n);\n\nexport const InventoryCard = () => {\n  const itemExtensions = useExtensions<ProjectDashboardInventoryItem>(\n    isProjectDashboardInventoryItem,\n  );\n  const { obj } = React.useContext(ProjectDashboardContext);\n  const projectName = getName(obj);\n  const canListSecrets = useAccessReview({\n    group: SecretModel.apiGroup,\n    resource: SecretModel.plural,\n    namespace: projectName,\n    verb: 'list',\n  });\n\n  return (\n    <DashboardCard data-test-id=\"inventory-card\">\n      <DashboardCardHeader>\n        <DashboardCardTitle>Inventory</DashboardCardTitle>\n      </DashboardCardHeader>\n      <DashboardCardBody>\n        <ProjectInventoryItem projectName={projectName} model={DeploymentModel} />\n        <ProjectInventoryItem projectName={projectName} model={DeploymentConfigModel} />\n        <ProjectInventoryItem projectName={projectName} model={StatefulSetModel} />\n        <ProjectInventoryItem\n          projectName={projectName}\n          model={PodModel}\n          mapper={getPodStatusGroups}\n        />\n        <ProjectInventoryItem\n          projectName={projectName}\n          model={PersistentVolumeClaimModel}\n          mapper={getPVCStatusGroups}\n          useAbbr\n        />\n        <ProjectInventoryItem projectName={projectName} model={ServiceModel} />\n        <ProjectInventoryItem projectName={projectName} model={RouteModel} />\n        <ProjectInventoryItem projectName={projectName} model={ConfigMapModel} />\n        {canListSecrets && <ProjectInventoryItem projectName={projectName} model={SecretModel} />}\n        {itemExtensions.map((item) => (\n          <ProjectInventoryItem\n            key={item.properties.model.kind}\n            projectName={projectName}\n            model={item.properties.model}\n            mapper={item.properties.mapper}\n            additionalResources={item.properties.additionalResources}\n            useAbbr={item.properties.useAbbr}\n          />\n        ))}\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n};\n\ntype ProjectInventoryItemProps = DashboardItemProps & {\n  projectName: string;\n  model: K8sKind;\n  mapper?: StatusGroupMapper;\n  useAbbr?: boolean;\n  additionalResources?: FirehoseResource[];\n};\n"]}]}