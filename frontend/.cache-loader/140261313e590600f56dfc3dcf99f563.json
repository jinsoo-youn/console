{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/about-modal.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/about-modal.tsx","mtime":1615298458720},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Alert, AboutModal as PfAboutModal, TextContent, TextList, TextListItem, } from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\nimport { FLAGS } from '@console/shared';\nimport { connectToFlags } from '../reducers/features';\nimport { getBrandingDetails } from './masthead';\nimport { ExternalLink, Firehose } from './utils';\nimport { ClusterVersionModel } from '../models';\nimport { referenceForModel } from '../module/k8s';\nimport { k8sVersion } from '../module/status';\nimport { hasAvailableUpdates, getK8sGitVersion, getOpenShiftVersion, getClusterID, getErrataLink, } from '../module/k8s/cluster-settings';\nconst AboutModalItems = ({ closeAboutModal, cv }) => {\n    const [kubernetesVersion, setKubernetesVersion] = React.useState('');\n    React.useEffect(() => {\n        k8sVersion()\n            .then((response) => setKubernetesVersion(getK8sGitVersion(response) || '-'))\n            .catch(() => setKubernetesVersion('unknown'));\n    }, []);\n    const clusterVersion = _.get(cv, 'data');\n    const clusterID = getClusterID(clusterVersion);\n    const channel = _.get(cv, 'data.spec.channel');\n    const openshiftVersion = getOpenShiftVersion(clusterVersion);\n    const errataLink = getErrataLink(clusterVersion);\n    return (React.createElement(React.Fragment, null,\n        clusterVersion && hasAvailableUpdates(clusterVersion) && (React.createElement(Alert, { className: \"co-alert co-about-modal__alert\", variant: \"info\", title: React.createElement(React.Fragment, null,\n                \"Update available.\",\n                ' ',\n                React.createElement(Link, { to: \"/settings/cluster\", onClick: closeAboutModal }, \"View cluster settings\")) })),\n        React.createElement(TextContent, null,\n            React.createElement(TextList, { component: \"dl\" },\n                openshiftVersion && (React.createElement(React.Fragment, null,\n                    React.createElement(TextListItem, { component: \"dt\" }, \"OpenShift Version\"),\n                    React.createElement(TextListItem, { component: \"dd\" },\n                        React.createElement(\"div\", { className: \"co-select-to-copy\" }, openshiftVersion),\n                        errataLink && (React.createElement(\"div\", null,\n                            React.createElement(ExternalLink, { text: \"View errata\", href: errataLink })))))),\n                React.createElement(TextListItem, { component: \"dt\" }, \"Kubernetes Version\"),\n                React.createElement(TextListItem, { component: \"dd\", className: \"co-select-to-copy\" }, kubernetesVersion),\n                channel && (React.createElement(React.Fragment, null,\n                    React.createElement(TextListItem, { component: \"dt\" }, \"Channel\"),\n                    React.createElement(TextListItem, { component: \"dd\", className: \"co-select-to-copy\" }, channel))),\n                clusterID && (React.createElement(React.Fragment, null,\n                    React.createElement(TextListItem, { component: \"dt\" }, \"Cluster ID\"),\n                    React.createElement(TextListItem, { component: \"dd\", className: \"co-select-to-copy\" }, clusterID))),\n                React.createElement(TextListItem, { component: \"dt\" }, \"API Server\"),\n                React.createElement(TextListItem, { component: \"dd\", className: \"co-select-to-copy\" }, window.SERVER_FLAGS.kubeAPIServerURL)))));\n};\nAboutModalItems.displayName = 'AboutModalItems';\nconst AboutModal_ = (props) => {\n    const { isOpen, closeAboutModal, flags } = props;\n    const details = getBrandingDetails();\n    const customBranding = window.SERVER_FLAGS.customLogoURL || window.SERVER_FLAGS.customProductName;\n    const resources = flags[FLAGS.CLUSTER_VERSION]\n        ? [{ kind: referenceForModel(ClusterVersionModel), name: 'version', isList: false, prop: 'cv' }]\n        : [];\n    return (React.createElement(PfAboutModal, { isOpen: isOpen, onClose: closeAboutModal, productName: \"\", brandImageSrc: details.logoImg, brandImageAlt: details.productName, noAboutModalBoxContentContainer: true },\n        !customBranding && (React.createElement(\"p\", null, \"OpenShift is Red Hat's container application platform that allows developers to quickly develop, host, and scale applications in a cloud environment.\")),\n        React.createElement(Firehose, { resources: resources },\n            React.createElement(AboutModalItems, Object.assign({}, props)))));\n};\nexport const AboutModal = connectToFlags(FLAGS.CLUSTER_VERSION)(AboutModal_);\nAboutModal.displayName = 'AboutModal';\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/about-modal.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/about-modal.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport {\n  Alert,\n  AboutModal as PfAboutModal,\n  TextContent,\n  TextList,\n  TextListItem,\n} from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\n\nimport { FLAGS } from '@console/shared';\nimport { connectToFlags, FlagsObject } from '../reducers/features';\nimport { getBrandingDetails } from './masthead';\nimport { ExternalLink, Firehose } from './utils';\nimport { ClusterVersionModel } from '../models';\nimport { ClusterVersionKind, referenceForModel } from '../module/k8s';\nimport { k8sVersion } from '../module/status';\nimport {\n  hasAvailableUpdates,\n  getK8sGitVersion,\n  getOpenShiftVersion,\n  getClusterID,\n  getErrataLink,\n} from '../module/k8s/cluster-settings';\n\nconst AboutModalItems: React.FC<AboutModalItemsProps> = ({ closeAboutModal, cv }) => {\n  const [kubernetesVersion, setKubernetesVersion] = React.useState('');\n  React.useEffect(() => {\n    k8sVersion()\n      .then((response) => setKubernetesVersion(getK8sGitVersion(response) || '-'))\n      .catch(() => setKubernetesVersion('unknown'));\n  }, []);\n\n  const clusterVersion = _.get(cv, 'data') as ClusterVersionKind;\n  const clusterID = getClusterID(clusterVersion);\n  const channel: string = _.get(cv, 'data.spec.channel');\n  const openshiftVersion = getOpenShiftVersion(clusterVersion);\n  const errataLink = getErrataLink(clusterVersion);\n  return (\n    <>\n      {clusterVersion && hasAvailableUpdates(clusterVersion) && (\n        <Alert\n          className=\"co-alert co-about-modal__alert\"\n          variant=\"info\"\n          title={\n            <>\n              Update available.{' '}\n              <Link to=\"/settings/cluster\" onClick={closeAboutModal}>\n                View cluster settings\n              </Link>\n            </>\n          }\n        />\n      )}\n      <TextContent>\n        <TextList component=\"dl\">\n          {openshiftVersion && (\n            <>\n              <TextListItem component=\"dt\">OpenShift Version</TextListItem>\n              <TextListItem component=\"dd\">\n                <div className=\"co-select-to-copy\">{openshiftVersion}</div>\n                {errataLink && (\n                  <div>\n                    <ExternalLink text=\"View errata\" href={errataLink} />\n                  </div>\n                )}\n              </TextListItem>\n            </>\n          )}\n          <TextListItem component=\"dt\">Kubernetes Version</TextListItem>\n          <TextListItem component=\"dd\" className=\"co-select-to-copy\">\n            {kubernetesVersion}\n          </TextListItem>\n          {channel && (\n            <>\n              <TextListItem component=\"dt\">Channel</TextListItem>\n              <TextListItem component=\"dd\" className=\"co-select-to-copy\">\n                {channel}\n              </TextListItem>\n            </>\n          )}\n          {clusterID && (\n            <>\n              <TextListItem component=\"dt\">Cluster ID</TextListItem>\n              <TextListItem component=\"dd\" className=\"co-select-to-copy\">\n                {clusterID}\n              </TextListItem>\n            </>\n          )}\n          <TextListItem component=\"dt\">API Server</TextListItem>\n          <TextListItem component=\"dd\" className=\"co-select-to-copy\">\n            {window.SERVER_FLAGS.kubeAPIServerURL}\n          </TextListItem>\n        </TextList>\n      </TextContent>\n    </>\n  );\n};\nAboutModalItems.displayName = 'AboutModalItems';\n\nconst AboutModal_: React.FC<AboutModalProps> = (props) => {\n  const { isOpen, closeAboutModal, flags } = props;\n  const details = getBrandingDetails();\n  const customBranding = window.SERVER_FLAGS.customLogoURL || window.SERVER_FLAGS.customProductName;\n  const resources = flags[FLAGS.CLUSTER_VERSION]\n    ? [{ kind: referenceForModel(ClusterVersionModel), name: 'version', isList: false, prop: 'cv' }]\n    : [];\n  return (\n    <PfAboutModal\n      isOpen={isOpen}\n      onClose={closeAboutModal}\n      productName=\"\"\n      brandImageSrc={details.logoImg}\n      brandImageAlt={details.productName}\n      noAboutModalBoxContentContainer={true}\n    >\n      {!customBranding && (\n        <p>\n          OpenShift is Red Hat&apos;s container application platform that allows developers to\n          quickly develop, host, and scale applications in a cloud environment.\n        </p>\n      )}\n      <Firehose resources={resources}>\n        <AboutModalItems {...(props as any)} />\n      </Firehose>\n    </PfAboutModal>\n  );\n};\nexport const AboutModal = connectToFlags(FLAGS.CLUSTER_VERSION)(AboutModal_);\nAboutModal.displayName = 'AboutModal';\n\ntype AboutModalItemsProps = {\n  closeAboutModal: () => void;\n  cv?: {\n    data?: ClusterVersionKind;\n  };\n};\n\ntype AboutModalProps = {\n  isOpen: boolean;\n  closeAboutModal: () => void;\n  flags: FlagsObject;\n};\n"]}]}