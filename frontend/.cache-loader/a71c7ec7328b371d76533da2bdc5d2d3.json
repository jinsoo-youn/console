{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/constants/vm/vm-status.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/constants/vm/vm-status.ts","mtime":1616735742420},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/* eslint-disable lines-between-class-members,no-underscore-dangle */\nimport { ObjectEnum } from '../object-enum';\nimport { V2VVMImportStatus } from '../v2v-import/ovirt/v2v-vm-import-status';\nimport { StatusEnum } from '../status-enum';\nimport { getStringEnumValues } from '../../utils/types';\nimport { StatusSimpleLabel } from '../status-constants';\nimport { StatusGroup } from '../status-group';\nexport var VMStatusSimpleLabel;\n(function (VMStatusSimpleLabel) {\n    VMStatusSimpleLabel[\"Starting\"] = \"Starting\";\n    VMStatusSimpleLabel[\"Paused\"] = \"Paused\";\n    VMStatusSimpleLabel[\"Migrating\"] = \"Migrating\";\n    VMStatusSimpleLabel[\"Stopping\"] = \"Stopping\";\n    VMStatusSimpleLabel[\"Running\"] = \"Running\";\n    VMStatusSimpleLabel[\"Off\"] = \"Off\";\n})(VMStatusSimpleLabel || (VMStatusSimpleLabel = {}));\nexport const VM_STATUS_SIMPLE_LABELS = [\n    StatusSimpleLabel.Error,\n    StatusSimpleLabel.Pending,\n    StatusSimpleLabel.Importing,\n    StatusSimpleLabel.Other,\n    ...getStringEnumValues(VMStatusSimpleLabel),\n];\nconst VM_STATUS_SIMPLE_LABELS_SET = new Set(VM_STATUS_SIMPLE_LABELS);\nconst isVMStatusSimpleLabel = (label) => VM_STATUS_SIMPLE_LABELS_SET.has(label);\nexport class VMStatus extends StatusEnum {\n    constructor(value, label, _a = {}) {\n        var { isMigrating } = _a, metadata = __rest(_a, [\"isMigrating\"]);\n        super(value, label, Object.assign(Object.assign({}, metadata), { isInProgress: isMigrating || metadata.isInProgress }));\n        this.isMigrating = () => this._isMigrating;\n        this.getMetadata = () => (Object.assign(Object.assign({}, super.getMetadata()), { isMigrating: this._isMigrating }));\n        this._isMigrating = isMigrating || false;\n    }\n    resolveSimpleLabel() {\n        return isVMStatusSimpleLabel(this.label) ? this.label : super.resolveSimpleLabel();\n    }\n}\nVMStatus.OFF = new VMStatus('VMStatus_OFF', VMStatusSimpleLabel.Off); // normal state\nVMStatus.RUNNING = new VMStatus('VMStatus_RUNNING', VMStatusSimpleLabel.Running); // normal state\nVMStatus.PAUSED = new VMStatus('VMStatus_PAUSED', VMStatusSimpleLabel.Paused); // normal state\nVMStatus.STARTING = new VMStatus('VMStatus_STARTING', VMStatusSimpleLabel.Starting, {\n    isInProgress: true,\n});\nVMStatus.VMI_WAITING = new VMStatus('VMStatus_VMI_WAITING', StatusSimpleLabel.Pending, {\n    isPending: true,\n});\nVMStatus.STOPPING = new VMStatus('VMStatus_STOPPING', VMStatusSimpleLabel.Stopping, {\n    isInProgress: true,\n});\nVMStatus.VM_ERROR = new VMStatus('VMStatus_VM_ERROR', 'VM error', { isError: true });\nVMStatus.VMI_ERROR = new VMStatus('VMStatus_VMI_ERROR', 'VMI error', { isError: true });\nVMStatus.POD_ERROR = new VMStatus('VMStatus_POD_ERROR', 'Pod error', { isError: true });\nVMStatus.CDI_IMPORT_ERROR = new VMStatus('VMStatus_CDI_IMPORT_ERROR', 'Import error', {\n    isError: true,\n    group: StatusGroup.CDI,\n});\nVMStatus.CDI_IMPORTING = new VMStatus('VMStatus_CDI_IMPORTING', StatusSimpleLabel.Importing, {\n    isImporting: true,\n    group: StatusGroup.CDI,\n});\nVMStatus.CDI_IMPORT_PENDING = new VMStatus('VMStatus_CDI_IMPORT_PENDING', 'Import pending', {\n    isImporting: true,\n    isPending: true,\n    group: StatusGroup.CDI,\n});\nVMStatus.MIGRATING = new VMStatus('VMStatus_MIGRATING', VMStatusSimpleLabel.Migrating, {\n    isMigrating: true,\n});\nVMStatus.V2V_CONVERSION_ERROR = new VMStatus('VMStatus_V2V_CONVERSION_ERROR', 'Import error', { isError: true, group: StatusGroup.VMWARE });\nVMStatus.V2V_CONVERSION_IN_PROGRESS = new VMStatus('VMStatus_V2V_CONVERSION_IN_PROGRESS', StatusSimpleLabel.Importing, {\n    isImporting: true,\n    group: StatusGroup.VMWARE,\n});\nVMStatus.V2V_CONVERSION_PENDING = new VMStatus('VMStatus_V2V_CONVERSION_PENDING', 'Import pending', {\n    isImporting: true,\n    isPending: true,\n    group: StatusGroup.VMWARE,\n});\nVMStatus.UNKNOWN = new VMStatus('UNKNOWN', 'Unknown', { isUnknown: true });\nVMStatus.newInstanceFromV2VVMImportStatus = (status) => {\n    return new VMStatus(`VMStatus_${status.getValue()}`, status.getLabel(), status.getMetadata());\n};\nVMStatus.V2V_VM_IMPORT_ERROR = VMStatus.newInstanceFromV2VVMImportStatus(V2VVMImportStatus.ERROR);\nVMStatus.V2V_VM_IMPORT_PENDING = VMStatus.newInstanceFromV2VVMImportStatus(V2VVMImportStatus.PENDING);\nVMStatus.V2V_VM_IMPORT_IN_PROGRESS = VMStatus.newInstanceFromV2VVMImportStatus(V2VVMImportStatus.IN_PROGRESS);\nVMStatus.ALL = Object.freeze(ObjectEnum.getAllClassEnumProperties(VMStatus));\nVMStatus.stringMapper = VMStatus.ALL.reduce((accumulator, type) => (Object.assign(Object.assign({}, accumulator), { [type.value]: type })), {});\nVMStatus.getAll = () => VMStatus.ALL;\nVMStatus.fromString = (model) => VMStatus.stringMapper[model];\nVMStatus.fromV2VImportStatus = (v2VVMImportStatus) => {\n    if (v2VVMImportStatus.isUnknown()) {\n        return VMStatus.UNKNOWN;\n    }\n    return VMStatus.stringMapper[`VMStatus_${v2VVMImportStatus.getValue()}`];\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/constants/vm/vm-status.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/constants/vm/vm-status.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable lines-between-class-members,no-underscore-dangle */\nimport { ObjectEnum } from '../object-enum';\nimport { V2VVMImportStatus } from '../v2v-import/ovirt/v2v-vm-import-status';\nimport { StatusEnum, StatusMetadata } from '../status-enum';\nimport { getStringEnumValues } from '../../utils/types';\nimport { StatusSimpleLabel } from '../status-constants';\nimport { StatusGroup } from '../status-group';\n\nexport enum VMStatusSimpleLabel {\n  Starting = 'Starting',\n  Paused = 'Paused',\n  Migrating = 'Migrating',\n  Stopping = 'Stopping',\n  Running = 'Running',\n  Off = 'Off',\n}\n\nexport const VM_STATUS_SIMPLE_LABELS = [\n  StatusSimpleLabel.Error,\n  StatusSimpleLabel.Pending,\n  StatusSimpleLabel.Importing,\n  StatusSimpleLabel.Other,\n  ...getStringEnumValues<VMStatusSimpleLabel>(VMStatusSimpleLabel),\n];\n\nconst VM_STATUS_SIMPLE_LABELS_SET = new Set(VM_STATUS_SIMPLE_LABELS);\n\nconst isVMStatusSimpleLabel = (label: string): label is VMStatusSimpleLabel | StatusSimpleLabel =>\n  VM_STATUS_SIMPLE_LABELS_SET.has(label as any);\n\ntype VMStatusMetadata = StatusMetadata & { isMigrating?: boolean };\n\nexport class VMStatus extends StatusEnum<VMStatusSimpleLabel | StatusSimpleLabel> {\n  static readonly OFF = new VMStatus('VMStatus_OFF', VMStatusSimpleLabel.Off); // normal state\n  static readonly RUNNING = new VMStatus('VMStatus_RUNNING', VMStatusSimpleLabel.Running); // normal state\n  static readonly PAUSED = new VMStatus('VMStatus_PAUSED', VMStatusSimpleLabel.Paused); // normal state\n  static readonly STARTING = new VMStatus('VMStatus_STARTING', VMStatusSimpleLabel.Starting, {\n    isInProgress: true,\n  });\n  static readonly VMI_WAITING = new VMStatus('VMStatus_VMI_WAITING', StatusSimpleLabel.Pending, {\n    isPending: true,\n  });\n  static readonly STOPPING = new VMStatus('VMStatus_STOPPING', VMStatusSimpleLabel.Stopping, {\n    isInProgress: true,\n  });\n  static readonly VM_ERROR = new VMStatus('VMStatus_VM_ERROR', 'VM error', { isError: true });\n  static readonly VMI_ERROR = new VMStatus('VMStatus_VMI_ERROR', 'VMI error', { isError: true });\n  static readonly POD_ERROR = new VMStatus('VMStatus_POD_ERROR', 'Pod error', { isError: true });\n  static readonly CDI_IMPORT_ERROR = new VMStatus('VMStatus_CDI_IMPORT_ERROR', 'Import error', {\n    isError: true,\n    group: StatusGroup.CDI,\n  });\n  static readonly CDI_IMPORTING = new VMStatus(\n    'VMStatus_CDI_IMPORTING',\n    StatusSimpleLabel.Importing,\n    {\n      isImporting: true,\n      group: StatusGroup.CDI,\n    },\n  );\n  static readonly CDI_IMPORT_PENDING = new VMStatus(\n    'VMStatus_CDI_IMPORT_PENDING',\n    'Import pending',\n    {\n      isImporting: true,\n      isPending: true,\n      group: StatusGroup.CDI,\n    },\n  );\n  static readonly MIGRATING = new VMStatus('VMStatus_MIGRATING', VMStatusSimpleLabel.Migrating, {\n    isMigrating: true,\n  });\n  static readonly V2V_CONVERSION_ERROR = new VMStatus(\n    'VMStatus_V2V_CONVERSION_ERROR',\n    'Import error',\n    { isError: true, group: StatusGroup.VMWARE },\n  );\n  static readonly V2V_CONVERSION_IN_PROGRESS = new VMStatus(\n    'VMStatus_V2V_CONVERSION_IN_PROGRESS',\n    StatusSimpleLabel.Importing,\n    {\n      isImporting: true,\n      group: StatusGroup.VMWARE,\n    },\n  );\n  static readonly V2V_CONVERSION_PENDING = new VMStatus(\n    'VMStatus_V2V_CONVERSION_PENDING',\n    'Import pending',\n    {\n      isImporting: true,\n      isPending: true,\n      group: StatusGroup.VMWARE,\n    },\n  );\n\n  static readonly UNKNOWN = new VMStatus('UNKNOWN', 'Unknown', { isUnknown: true });\n\n  private static newInstanceFromV2VVMImportStatus = (status: V2VVMImportStatus) => {\n    return new VMStatus(`VMStatus_${status.getValue()}`, status.getLabel(), status.getMetadata());\n  };\n\n  static readonly V2V_VM_IMPORT_ERROR = VMStatus.newInstanceFromV2VVMImportStatus(\n    V2VVMImportStatus.ERROR,\n  );\n  static readonly V2V_VM_IMPORT_PENDING = VMStatus.newInstanceFromV2VVMImportStatus(\n    V2VVMImportStatus.PENDING,\n  );\n  static readonly V2V_VM_IMPORT_IN_PROGRESS = VMStatus.newInstanceFromV2VVMImportStatus(\n    V2VVMImportStatus.IN_PROGRESS,\n  );\n\n  private readonly _isMigrating: boolean;\n\n  protected constructor(\n    value: string,\n    label: string,\n    { isMigrating, ...metadata }: VMStatusMetadata = {},\n  ) {\n    super(value, label, {\n      ...metadata,\n      isInProgress: isMigrating || metadata.isInProgress,\n    });\n\n    this._isMigrating = isMigrating || false;\n  }\n\n  isMigrating = () => this._isMigrating;\n\n  getMetadata = (): VMStatusMetadata => ({\n    ...super.getMetadata(),\n    isMigrating: this._isMigrating,\n  });\n\n  protected resolveSimpleLabel(): StatusSimpleLabel | VMStatusSimpleLabel {\n    return isVMStatusSimpleLabel(this.label) ? this.label : super.resolveSimpleLabel();\n  }\n\n  private static readonly ALL = Object.freeze(\n    ObjectEnum.getAllClassEnumProperties<VMStatus>(VMStatus),\n  );\n\n  private static readonly stringMapper = VMStatus.ALL.reduce(\n    (accumulator, type: VMStatus) => ({\n      ...accumulator,\n      [type.value]: type,\n    }),\n    {},\n  );\n\n  static getAll = () => VMStatus.ALL;\n\n  static fromString = (model: string): VMStatus => VMStatus.stringMapper[model];\n\n  static fromV2VImportStatus = (v2VVMImportStatus: V2VVMImportStatus): VMStatus => {\n    if (v2VVMImportStatus.isUnknown()) {\n      return VMStatus.UNKNOWN;\n    }\n    return VMStatus.stringMapper[`VMStatus_${v2VVMImportStatus.getValue()}`];\n  };\n}\n"]}]}