{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/local-storage-operator-plugin/src/components/local-volume-set/create-local-volume-set.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/local-storage-operator-plugin/src/components/local-volume-set/create-local-volume-set.tsx","mtime":1615298458670},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { ActionGroup, Button, Form, FormGroup, TextInput, Radio, Expandable, TextInputTypes, Text, TextVariants, } from '@patternfly/react-core';\nimport { resourcePathFromModel, BreadCrumbs, Dropdown, resourceObjPath, withHandlePromise, ButtonBar, } from '@console/internal/components/utils';\nimport { history } from '@console/internal/components/utils/router';\nimport { ListPage } from '@console/internal/components/factory';\nimport { k8sCreate, referenceFor } from '@console/internal/module/k8s';\nimport { NodeModel } from '@console/internal/models';\nimport { ClusterServiceVersionModel } from '@console/operator-lifecycle-manager';\nimport { LocalVolumeSetModel } from '../../models';\nimport { NodesSelectionList } from './nodes-selection-list';\nimport { DeviceType, DiskType, DeviceMechanicalProperty, } from './types';\nimport { getSelectedNodeUIDs } from './utils';\nimport './create-local-volume-set.scss';\nconst volumeModeDropdownItems = {\n    Block: 'Block',\n    Filesystem: 'Filesystem',\n};\nconst volumeTypeDropdownItems = {\n    [DiskType.SSD]: 'SSD / NVMe',\n    [DiskType.HDD]: 'HDD',\n};\nconst CreateLocalVolumeSet = withHandlePromise((props) => {\n    const { match, handlePromise, inProgress, errorMessage } = props;\n    const [volumeSetName, setVolumeSetName] = React.useState('');\n    const [storageClassName, setStorageClassName] = React.useState('');\n    const [showNodesList, setShowNodesList] = React.useState(false);\n    const [volumeType, setVolumeType] = React.useState(DiskType.SSD);\n    const [volumeMode, setVolumeMode] = React.useState(volumeModeDropdownItems.Block);\n    const [maxVolumeLimit, setMaxVolumeLimit] = React.useState('');\n    const [rows, setRows] = React.useState({});\n    const [allSelected, setAllSelected] = React.useState(null);\n    const { ns, appName } = match.params;\n    const modelName = LocalVolumeSetModel.label;\n    const toggleShowNodesList = () => {\n        setShowNodesList(!showNodesList);\n    };\n    const onSubmit = (event) => {\n        event.preventDefault();\n        const requestData = {\n            apiVersion: LocalVolumeSetModel.apiVersion,\n            kind: LocalVolumeSetModel.kind,\n            metadata: { name: volumeSetName },\n            spec: {\n                storageClassName,\n                volumeMode,\n                deviceInclusionSpec: {\n                    // Only Raw disk supported for 4.5\n                    deviceTypes: [DeviceType.RawDisk],\n                    deviceMechanicalProperty: [DeviceMechanicalProperty[volumeType]],\n                },\n            },\n        };\n        if (showNodesList) {\n            const selectedNodesUID = getSelectedNodeUIDs(rows);\n            const selectedNodes = selectedNodesUID.map((uid) => rows[uid].props.data.metadata.name);\n            requestData.spec.nodeSelector = {\n                nodeSelectorTerms: [\n                    {\n                        matchExpressions: [\n                            { key: 'kubernetes.io/hostname', operator: 'In', values: [...selectedNodes] },\n                        ],\n                    },\n                ],\n            };\n        }\n        if (maxVolumeLimit)\n            requestData.spec.maxDeviceCount = +maxVolumeLimit;\n        handlePromise(k8sCreate(LocalVolumeSetModel, requestData))\n            .then((resource) => history.push(resourceObjPath(resource, referenceFor(resource))))\n            .catch(() => null);\n    };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: \"co-create-operand__header\" },\n            React.createElement(\"div\", { className: \"co-create-operand__header-buttons\" },\n                React.createElement(BreadCrumbs, { breadcrumbs: [\n                        {\n                            name: 'Local Storage',\n                            path: resourcePathFromModel(ClusterServiceVersionModel, appName, ns),\n                        },\n                        { name: `Create ${modelName}`, path: '' },\n                    ] })),\n            React.createElement(\"h1\", { className: \"co-create-operand__header-text\" }, `Create ${modelName}`),\n            React.createElement(\"p\", { className: \"help-block\" },\n                \"A \",\n                modelName,\n                \" allows you to filter a set of storage volumes, group them and create a dedicated storage class to consume storage for them.\")),\n        React.createElement(Form, { noValidate: false, className: \"co-m-pane__body co-m-pane__form\", onSubmit: onSubmit },\n            React.createElement(FormGroup, { label: \"Volume Set Name\", isRequired: true, fieldId: \"create-lvs--volume-set-name\" },\n                React.createElement(TextInput, { type: TextInputTypes.text, id: \"create-lvs--volume-set-name\", value: volumeSetName, onChange: (name) => setVolumeSetName(name), isRequired: true })),\n            React.createElement(FormGroup, { label: \"Storage Class Name\", fieldId: \"create-lvs--storage-class-name\" },\n                React.createElement(TextInput, { type: TextInputTypes.text, id: \"create-lvs--storage-class-name\", value: storageClassName, onChange: (name) => setStorageClassName(name), isRequired: true })),\n            React.createElement(Text, { component: TextVariants.h3, className: \"lso-create-lvs__filter-volumes-text--margin\" }, \"Filter Volumes\"),\n            React.createElement(FormGroup, { label: \"Node Selector\", fieldId: \"create-lvs--radio-group-node-selector\" },\n                React.createElement(\"div\", { id: \"create-lvs--radio-group-node-selector\" },\n                    React.createElement(Radio, { label: \"All nodes\", name: \"nodes-selection\", id: \"create-lvs--radio-all-nodes\", className: \"lso-create-lvs__all-nodes-radio--padding\", value: \"allNodes\", onChange: toggleShowNodesList, description: \"Selecting all nodes will search for available volume storage on all nodes.\", defaultChecked: true }),\n                    React.createElement(Radio, { label: \"Select nodes\", name: \"nodes-selection\", id: \"create-lvs--radio-select-nodes\", value: \"selectedNodes\", onChange: toggleShowNodesList, description: \"Selecting nodes allow you to limit the search for available volumes to specific nodes.\" }))),\n            showNodesList && (React.createElement(ListPage, { customData: { rows, setRows, allSelected, setAllSelected }, showTitle: false, kind: NodeModel.kind, ListComponent: NodesSelectionList })),\n            React.createElement(FormGroup, { label: \"Volume Type\", fieldId: \"create-lvs--volume-type-dropdown\" },\n                React.createElement(Dropdown, { id: \"create-lvs--volume-type-dropdown\", dropDownClassName: \"dropdown--full-width\", items: volumeTypeDropdownItems, title: volumeTypeDropdownItems[volumeType], selectedKey: volumeType, onChange: (type) => setVolumeType(type) })),\n            React.createElement(Expandable, { toggleText: \"Advanced\", \"data-test-id\": \"create-lvs-form-advanced\" },\n                React.createElement(FormGroup, { label: \"Volume Mode\", fieldId: \"create-lso--volume-mode-dropdown\", className: \"lso-create-lvs__volume-mode-dropdown--margin\" },\n                    React.createElement(Dropdown, { id: \"create-lso--volume-mode-dropdown\", dropDownClassName: \"dropdown--full-width\", items: volumeModeDropdownItems, title: volumeModeDropdownItems[volumeMode], selectedKey: volumeMode, onChange: (mode) => setVolumeMode(mode) })),\n                React.createElement(FormGroup, { label: \"Max Volume Limit\", fieldId: \"create-lvs--max-volume-limit\" },\n                    React.createElement(\"p\", { className: \"help-block lso-create-lvs__max-volume-limit-help-text--margin\" }, \"Volume limit will set the maximum number of PVs to create on a node. If the field is empty, will create PVs for all available volumes on the matching nodes.\"),\n                    React.createElement(TextInput, { type: TextInputTypes.number, id: \"create-lvs--max-volume-limit\", value: maxVolumeLimit, onChange: (maxLimit) => setMaxVolumeLimit(maxLimit) }))),\n            React.createElement(ButtonBar, { errorMessage: errorMessage, inProgress: inProgress },\n                React.createElement(ActionGroup, null,\n                    React.createElement(Button, { type: \"submit\", variant: \"primary\" }, \"Create\"),\n                    React.createElement(Button, { type: \"button\", variant: \"secondary\", onClick: history.goBack }, \"Cancel\"))))));\n});\nexport default CreateLocalVolumeSet;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/local-storage-operator-plugin/src/components/local-volume-set/create-local-volume-set.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/local-storage-operator-plugin/src/components/local-volume-set/create-local-volume-set.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { match as RouterMatch } from 'react-router';\nimport {\n  ActionGroup,\n  Button,\n  Form,\n  FormGroup,\n  TextInput,\n  Radio,\n  Expandable,\n  TextInputTypes,\n  Text,\n  TextVariants,\n} from '@patternfly/react-core';\nimport {\n  resourcePathFromModel,\n  BreadCrumbs,\n  Dropdown,\n  resourceObjPath,\n  withHandlePromise,\n  HandlePromiseProps,\n  ButtonBar,\n} from '@console/internal/components/utils';\nimport { history } from '@console/internal/components/utils/router';\nimport { ListPage } from '@console/internal/components/factory';\nimport { k8sCreate, referenceFor } from '@console/internal/module/k8s';\nimport { NodeModel } from '@console/internal/models';\nimport { ClusterServiceVersionModel } from '@console/operator-lifecycle-manager';\nimport { LocalVolumeSetModel } from '../../models';\nimport { NodesSelectionList } from './nodes-selection-list';\nimport {\n  RowUIDMap,\n  LocalVolumeSetKind,\n  DeviceType,\n  DiskType,\n  DeviceMechanicalProperty,\n} from './types';\nimport { getSelectedNodeUIDs } from './utils';\nimport './create-local-volume-set.scss';\n\nconst volumeModeDropdownItems = {\n  Block: 'Block',\n  Filesystem: 'Filesystem',\n};\n\nconst volumeTypeDropdownItems = {\n  [DiskType.SSD]: 'SSD / NVMe',\n  [DiskType.HDD]: 'HDD',\n};\n\nconst CreateLocalVolumeSet: React.FC = withHandlePromise<CreateLocalVolumeSetProps>((props) => {\n  const { match, handlePromise, inProgress, errorMessage } = props;\n  const [volumeSetName, setVolumeSetName] = React.useState('');\n  const [storageClassName, setStorageClassName] = React.useState('');\n  const [showNodesList, setShowNodesList] = React.useState(false);\n  const [volumeType, setVolumeType] = React.useState<DiskType>(DiskType.SSD);\n  const [volumeMode, setVolumeMode] = React.useState(volumeModeDropdownItems.Block);\n  const [maxVolumeLimit, setMaxVolumeLimit] = React.useState('');\n  const [rows, setRows] = React.useState<RowUIDMap>({});\n  const [allSelected, setAllSelected] = React.useState<boolean>(null);\n\n  const { ns, appName } = match.params;\n  const modelName = LocalVolumeSetModel.label;\n\n  const toggleShowNodesList = () => {\n    setShowNodesList(!showNodesList);\n  };\n\n  const onSubmit = (event: React.FormEvent<EventTarget>) => {\n    event.preventDefault();\n\n    const requestData: LocalVolumeSetKind = {\n      apiVersion: LocalVolumeSetModel.apiVersion,\n      kind: LocalVolumeSetModel.kind,\n      metadata: { name: volumeSetName },\n      spec: {\n        storageClassName,\n        volumeMode,\n        deviceInclusionSpec: {\n          // Only Raw disk supported for 4.5\n          deviceTypes: [DeviceType.RawDisk],\n          deviceMechanicalProperty: [DeviceMechanicalProperty[volumeType]],\n        },\n      },\n    };\n\n    if (showNodesList) {\n      const selectedNodesUID = getSelectedNodeUIDs(rows);\n      const selectedNodes = selectedNodesUID.map((uid) => rows[uid].props.data.metadata.name);\n      requestData.spec.nodeSelector = {\n        nodeSelectorTerms: [\n          {\n            matchExpressions: [\n              { key: 'kubernetes.io/hostname', operator: 'In', values: [...selectedNodes] },\n            ],\n          },\n        ],\n      };\n    }\n    if (maxVolumeLimit) requestData.spec.maxDeviceCount = +maxVolumeLimit;\n\n    handlePromise(k8sCreate(LocalVolumeSetModel, requestData))\n      .then((resource) => history.push(resourceObjPath(resource, referenceFor(resource))))\n      .catch(() => null);\n  };\n\n  return (\n    <>\n      <div className=\"co-create-operand__header\">\n        <div className=\"co-create-operand__header-buttons\">\n          <BreadCrumbs\n            breadcrumbs={[\n              {\n                name: 'Local Storage',\n                path: resourcePathFromModel(ClusterServiceVersionModel, appName, ns),\n              },\n              { name: `Create ${modelName}`, path: '' },\n            ]}\n          />\n        </div>\n        <h1 className=\"co-create-operand__header-text\">{`Create ${modelName}`}</h1>\n        <p className=\"help-block\">\n          A {modelName} allows you to filter a set of storage volumes, group them and create a\n          dedicated storage class to consume storage for them.\n        </p>\n      </div>\n      <Form noValidate={false} className=\"co-m-pane__body co-m-pane__form\" onSubmit={onSubmit}>\n        <FormGroup label=\"Volume Set Name\" isRequired fieldId=\"create-lvs--volume-set-name\">\n          <TextInput\n            type={TextInputTypes.text}\n            id=\"create-lvs--volume-set-name\"\n            value={volumeSetName}\n            onChange={(name) => setVolumeSetName(name)}\n            isRequired\n          />\n        </FormGroup>\n        <FormGroup label=\"Storage Class Name\" fieldId=\"create-lvs--storage-class-name\">\n          <TextInput\n            type={TextInputTypes.text}\n            id=\"create-lvs--storage-class-name\"\n            value={storageClassName}\n            onChange={(name) => setStorageClassName(name)}\n            isRequired\n          />\n        </FormGroup>\n        <Text component={TextVariants.h3} className=\"lso-create-lvs__filter-volumes-text--margin\">\n          Filter Volumes\n        </Text>\n        <FormGroup label=\"Node Selector\" fieldId=\"create-lvs--radio-group-node-selector\">\n          <div id=\"create-lvs--radio-group-node-selector\">\n            <Radio\n              label=\"All nodes\"\n              name=\"nodes-selection\"\n              id=\"create-lvs--radio-all-nodes\"\n              className=\"lso-create-lvs__all-nodes-radio--padding\"\n              value=\"allNodes\"\n              onChange={toggleShowNodesList}\n              description=\"Selecting all nodes will search for available volume storage on all nodes.\"\n              defaultChecked\n            />\n            <Radio\n              label=\"Select nodes\"\n              name=\"nodes-selection\"\n              id=\"create-lvs--radio-select-nodes\"\n              value=\"selectedNodes\"\n              onChange={toggleShowNodesList}\n              description=\"Selecting nodes allow you to limit the search for available volumes to specific nodes.\"\n            />\n          </div>\n        </FormGroup>\n        {showNodesList && (\n          <ListPage\n            customData={{ rows, setRows, allSelected, setAllSelected }}\n            showTitle={false}\n            kind={NodeModel.kind}\n            ListComponent={NodesSelectionList}\n          />\n        )}\n        <FormGroup label=\"Volume Type\" fieldId=\"create-lvs--volume-type-dropdown\">\n          <Dropdown\n            id=\"create-lvs--volume-type-dropdown\"\n            dropDownClassName=\"dropdown--full-width\"\n            items={volumeTypeDropdownItems}\n            title={volumeTypeDropdownItems[volumeType]}\n            selectedKey={volumeType}\n            onChange={(type: DiskType) => setVolumeType(type)}\n          />\n        </FormGroup>\n        <Expandable toggleText=\"Advanced\" data-test-id=\"create-lvs-form-advanced\">\n          <FormGroup\n            label=\"Volume Mode\"\n            fieldId=\"create-lso--volume-mode-dropdown\"\n            className=\"lso-create-lvs__volume-mode-dropdown--margin\"\n          >\n            <Dropdown\n              id=\"create-lso--volume-mode-dropdown\"\n              dropDownClassName=\"dropdown--full-width\"\n              items={volumeModeDropdownItems}\n              title={volumeModeDropdownItems[volumeMode]}\n              selectedKey={volumeMode}\n              onChange={(mode: string) => setVolumeMode(mode)}\n            />\n          </FormGroup>\n          <FormGroup label=\"Max Volume Limit\" fieldId=\"create-lvs--max-volume-limit\">\n            <p className=\"help-block lso-create-lvs__max-volume-limit-help-text--margin\">\n              Volume limit will set the maximum number of PVs to create on a node. If the field is\n              empty, will create PVs for all available volumes on the matching nodes.\n            </p>\n            <TextInput\n              type={TextInputTypes.number}\n              id=\"create-lvs--max-volume-limit\"\n              value={maxVolumeLimit}\n              onChange={(maxLimit) => setMaxVolumeLimit(maxLimit)}\n            />\n          </FormGroup>\n        </Expandable>\n        <ButtonBar errorMessage={errorMessage} inProgress={inProgress}>\n          <ActionGroup>\n            <Button type=\"submit\" variant=\"primary\">\n              Create\n            </Button>\n            <Button type=\"button\" variant=\"secondary\" onClick={history.goBack}>\n              Cancel\n            </Button>\n          </ActionGroup>\n        </ButtonBar>\n      </Form>\n    </>\n  );\n});\n\ntype CreateLocalVolumeSetProps = {\n  match: RouterMatch<{ appName: string; ns: string }>;\n} & HandlePromiseProps;\n\nexport default CreateLocalVolumeSet;\n"]}]}