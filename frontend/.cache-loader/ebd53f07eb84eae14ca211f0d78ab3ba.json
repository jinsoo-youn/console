{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/import-types.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/import-types.ts","mtime":1616735742380},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { DeploymentModel, DeploymentConfigModel } from '@console/internal/models';\nimport { ServiceModel } from '@console/knative-plugin/src/models';\nexport var ImageStreamActions;\n(function (ImageStreamActions) {\n    ImageStreamActions[\"setAccessLoading\"] = \"setAccessLoading\";\n    ImageStreamActions[\"setLoading\"] = \"setLoading\";\n    ImageStreamActions[\"setSelectedImageStream\"] = \"setSelectedImageStream\";\n    ImageStreamActions[\"setHasAccessToPullImage\"] = \"setHasAccessToPullImage\";\n    ImageStreamActions[\"setHasCreateAccess\"] = \"setHasCreateAccess\";\n})(ImageStreamActions || (ImageStreamActions = {}));\nexport var GitTypes;\n(function (GitTypes) {\n    GitTypes[\"github\"] = \"github\";\n    GitTypes[\"gitlab\"] = \"gitlab\";\n    GitTypes[\"bitbucket\"] = \"bitbucket\";\n    GitTypes[\"unsure\"] = \"other\";\n    GitTypes[\"invalid\"] = \"\";\n})(GitTypes || (GitTypes = {}));\nexport const GitReadableTypes = {\n    [GitTypes.github]: 'GitHub',\n    [GitTypes.gitlab]: 'GitLab',\n    [GitTypes.bitbucket]: 'Bitbucket',\n    [GitTypes.unsure]: 'Other',\n};\nexport var ImportTypes;\n(function (ImportTypes) {\n    ImportTypes[\"git\"] = \"git\";\n    ImportTypes[\"docker\"] = \"docker\";\n    ImportTypes[\"s2i\"] = \"s2i\";\n})(ImportTypes || (ImportTypes = {}));\nexport var Resources;\n(function (Resources) {\n    Resources[\"OpenShift\"] = \"openshift\";\n    Resources[\"Kubernetes\"] = \"kubernetes\";\n    Resources[\"KnativeService\"] = \"knative\";\n})(Resources || (Resources = {}));\nexport const ReadableResourcesNames = {\n    [Resources.OpenShift]: DeploymentConfigModel.label,\n    [Resources.Kubernetes]: DeploymentModel.label,\n    [Resources.KnativeService]: `Knative ${ServiceModel.label}`,\n};\nexport var TerminationTypes;\n(function (TerminationTypes) {\n    TerminationTypes[\"edge\"] = \"Edge\";\n    TerminationTypes[\"passthrough\"] = \"Passthrough\";\n    TerminationTypes[\"reencrypt\"] = \"Re-encrypt\";\n})(TerminationTypes || (TerminationTypes = {}));\nexport var InsecureTrafficTypes;\n(function (InsecureTrafficTypes) {\n    InsecureTrafficTypes[\"None\"] = \"None\";\n    InsecureTrafficTypes[\"Allow\"] = \"Allow\";\n    InsecureTrafficTypes[\"Redirect\"] = \"Redirect\";\n})(InsecureTrafficTypes || (InsecureTrafficTypes = {}));\nexport var PassthroughInsecureTrafficTypes;\n(function (PassthroughInsecureTrafficTypes) {\n    PassthroughInsecureTrafficTypes[\"None\"] = \"None\";\n    PassthroughInsecureTrafficTypes[\"Redirect\"] = \"Redirect\";\n})(PassthroughInsecureTrafficTypes || (PassthroughInsecureTrafficTypes = {}));\nexport var CPUUnits;\n(function (CPUUnits) {\n    CPUUnits[\"m\"] = \"millicores\";\n    CPUUnits[\"\"] = \"cores\";\n})(CPUUnits || (CPUUnits = {}));\nexport var MemoryUnits;\n(function (MemoryUnits) {\n    MemoryUnits[\"Mi\"] = \"Mi\";\n    MemoryUnits[\"Gi\"] = \"Gi\";\n})(MemoryUnits || (MemoryUnits = {}));\nexport var ImportOptions;\n(function (ImportOptions) {\n    ImportOptions[\"GIT\"] = \"GIT\";\n    ImportOptions[\"CONTAINER\"] = \"CONTAINER\";\n    ImportOptions[\"CATALOG\"] = \"CATALOG\";\n    ImportOptions[\"DOCKERFILE\"] = \"DOCKERFILE\";\n    ImportOptions[\"DATABASE\"] = \"DATABASE\";\n    ImportOptions[\"EVENTSOURCE\"] = \"EVENTSOURCE\";\n})(ImportOptions || (ImportOptions = {}));\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/import-types.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/import-types.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,eAAe,EAAE,qBAAqB,EAAE,MAAM,0BAA0B,CAAC;AAGlF,OAAO,EAAE,YAAY,EAAE,MAAM,oCAAoC,CAAC;AAiBlE,MAAM,CAAN,IAAY,kBAMX;AAND,WAAY,kBAAkB;IAC5B,2DAAqC,CAAA;IACrC,+CAAyB,CAAA;IACzB,uEAAiD,CAAA;IACjD,yEAAmD,CAAA;IACnD,+DAAyC,CAAA;AAC3C,CAAC,EANW,kBAAkB,KAAlB,kBAAkB,QAM7B;AAoLD,MAAM,CAAN,IAAY,QAMX;AAND,WAAY,QAAQ;IAClB,6BAAiB,CAAA;IACjB,6BAAiB,CAAA;IACjB,mCAAuB,CAAA;IACvB,4BAAgB,CAAA;IAChB,wBAAY,CAAA;AACd,CAAC,EANW,QAAQ,KAAR,QAAQ,QAMnB;AAED,MAAM,CAAC,MAAM,gBAAgB,GAAG;IAC9B,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,QAAQ;IAC3B,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,QAAQ;IAC3B,CAAC,QAAQ,CAAC,SAAS,CAAC,EAAE,WAAW;IACjC,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE,OAAO;CAC3B,CAAC;AAEF,MAAM,CAAN,IAAY,WAIX;AAJD,WAAY,WAAW;IACrB,0BAAW,CAAA;IACX,gCAAiB,CAAA;IACjB,0BAAW,CAAA;AACb,CAAC,EAJW,WAAW,KAAX,WAAW,QAItB;AAED,MAAM,CAAN,IAAY,SAIX;AAJD,WAAY,SAAS;IACnB,oCAAuB,CAAA;IACvB,sCAAyB,CAAA;IACzB,uCAA0B,CAAA;AAC5B,CAAC,EAJW,SAAS,KAAT,SAAS,QAIpB;AAED,MAAM,CAAC,MAAM,sBAAsB,GAAG;IACpC,CAAC,SAAS,CAAC,SAAS,CAAC,EAAE,qBAAqB,CAAC,KAAK;IAClD,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,eAAe,CAAC,KAAK;IAC7C,CAAC,SAAS,CAAC,cAAc,CAAC,EAAE,WAAW,YAAY,CAAC,KAAK,EAAE;CAC5D,CAAC;AASF,MAAM,CAAN,IAAY,gBAIX;AAJD,WAAY,gBAAgB;IAC1B,iCAAa,CAAA;IACb,+CAA2B,CAAA;IAC3B,4CAAwB,CAAA;AAC1B,CAAC,EAJW,gBAAgB,KAAhB,gBAAgB,QAI3B;AAED,MAAM,CAAN,IAAY,oBAIX;AAJD,WAAY,oBAAoB;IAC9B,qCAAa,CAAA;IACb,uCAAe,CAAA;IACf,6CAAqB,CAAA;AACvB,CAAC,EAJW,oBAAoB,KAApB,oBAAoB,QAI/B;AAED,MAAM,CAAN,IAAY,+BAGX;AAHD,WAAY,+BAA+B;IACzC,gDAAa,CAAA;IACb,wDAAqB,CAAA;AACvB,CAAC,EAHW,+BAA+B,KAA/B,+BAA+B,QAG1C;AAgBD,MAAM,CAAN,IAAY,QAGX;AAHD,WAAY,QAAQ;IAClB,4BAAgB,CAAA;IAChB,sBAAY,CAAA;AACd,CAAC,EAHW,QAAQ,KAAR,QAAQ,QAGnB;AAED,MAAM,CAAN,IAAY,WAGX;AAHD,WAAY,WAAW;IACrB,wBAAS,CAAA;IACT,wBAAS,CAAA;AACX,CAAC,EAHW,WAAW,KAAX,WAAW,QAGtB;AAED,MAAM,CAAN,IAAY,aAOX;AAPD,WAAY,aAAa;IACvB,4BAAW,CAAA;IACX,wCAAuB,CAAA;IACvB,oCAAmB,CAAA;IACnB,0CAAyB,CAAA;IACzB,sCAAqB,CAAA;IACrB,4CAA2B,CAAA;AAC7B,CAAC,EAPW,aAAa,KAAb,aAAa,QAOxB","sourcesContent":["import { ValidatedOptions } from '@patternfly/react-core';\nimport { K8sResourceKind, ContainerPort } from '@console/internal/module/k8s';\nimport { DeploymentModel, DeploymentConfigModel } from '@console/internal/models';\nimport { LazyLoader } from '@console/plugin-sdk';\nimport { NameValuePair, NameValueFromPair } from '@console/shared';\nimport { ServiceModel } from '@console/knative-plugin/src/models';\nimport { NormalizedBuilderImages } from '../../utils/imagestream-utils';\nimport { HealthCheckProbe } from '../health-checks/health-checks-types';\n\nexport interface DeployImageFormProps {\n  builderImages?: NormalizedBuilderImages;\n  projects?: FirehoseList;\n}\nexport type ImageStreamPayload = boolean | K8sResourceKind;\n\nexport type ImageStreamState = {\n  hasAccessToPullImage: ImageStreamPayload;\n  accessLoading: ImageStreamPayload;\n  loading: ImageStreamPayload;\n  hasCreateAccess: ImageStreamPayload;\n  selectedImageStream: ImageStreamPayload;\n};\nexport enum ImageStreamActions {\n  setAccessLoading = 'setAccessLoading',\n  setLoading = 'setLoading',\n  setSelectedImageStream = 'setSelectedImageStream',\n  setHasAccessToPullImage = 'setHasAccessToPullImage',\n  setHasCreateAccess = 'setHasCreateAccess',\n}\nexport type ImageStreamAction = { type: ImageStreamActions; value: ImageStreamPayload };\nexport interface ImageStreamContextProps {\n  state: ImageStreamState;\n  dispatch: React.Dispatch<ImageStreamAction>;\n  hasImageStreams: boolean;\n  setHasImageStreams: (value: boolean) => void;\n  setValidated: (validated: ValidatedOptions) => void;\n}\nexport interface SourceToImageFormProps {\n  builderImages?: NormalizedBuilderImages;\n  projects?: {\n    data: [];\n    loaded: boolean;\n  };\n}\n\nexport interface GitImportFormProps {\n  builderImages?: NormalizedBuilderImages;\n  projects?: {\n    data: [];\n    loaded: boolean;\n  };\n}\n\nexport interface FirehoseList {\n  data?: K8sResourceKind[];\n  [key: string]: any;\n}\n\nexport interface DeployImageFormData {\n  formType?: string;\n  project: ProjectData;\n  application: ApplicationData;\n  name: string;\n  searchTerm: string;\n  registry: string;\n  imageStream: {\n    image: string;\n    tag: string;\n    namespace: string;\n    grantAccess?: boolean;\n  };\n  isi: ImageStreamImageData;\n  image: ImageStreamImageData;\n  isSearchingForImage: boolean;\n  resources: Resources;\n  resourceTypesNotValid?: Resources[];\n  serverless?: ServerlessData;\n  pipeline?: PipelineData;\n  labels: { [name: string]: string };\n  env?: { [name: string]: string };\n  route: RouteData;\n  build: BuildData;\n  deployment: DeploymentData;\n  limits: LimitsData;\n  healthChecks: HealthChecksData;\n}\n\nexport interface GitImportFormData {\n  formType?: string;\n  name: string;\n  project: ProjectData;\n  application: ApplicationData;\n  git: GitData;\n  docker: DockerData;\n  serverless?: ServerlessData;\n  pipeline?: PipelineData;\n  image: ImageData;\n  route: RouteData;\n  resources: Resources;\n  resourceTypesNotValid?: Resources[];\n  build: BuildData;\n  deployment: DeploymentData;\n  labels: { [name: string]: string };\n  limits: LimitsData;\n  healthChecks: HealthChecksData;\n}\n\nexport interface ApplicationData {\n  initial?: string;\n  name: string;\n  selectedKey: string;\n}\n\nexport interface ImageData {\n  selected: string;\n  recommended: string;\n  isRecommending: boolean;\n  couldNotRecommend: boolean;\n  tag: string;\n  tagObj: object;\n  ports: ContainerPort[];\n}\n\nexport interface ImageStreamImageData {\n  name: string;\n  image: { [key: string]: any };\n  tag: string;\n  status: { metadata: {}; status: string };\n  ports: ContainerPort[];\n}\n\nexport interface ProjectData {\n  name: string;\n  displayName?: string;\n  description?: string;\n}\n\nexport interface GitData {\n  url: string;\n  type: string;\n  ref: string;\n  dir: string;\n  showGitType: boolean;\n  secret: string;\n  isUrlValidating: boolean;\n}\n\nexport interface DockerData {\n  dockerfilePath?: string;\n  containerPort?: number;\n}\n\nexport interface RouteData {\n  disable?: boolean;\n  create: boolean;\n  targetPort: string;\n  unknownTargetPort?: string;\n  defaultUnknownPort?: number;\n  path: string;\n  hostname: string;\n  secure: boolean;\n  tls: TLSData;\n}\n\nexport interface TLSData {\n  termination: string;\n  insecureEdgeTerminationPolicy: string;\n  certificate: string;\n  privateKey: string;\n  caCertificate: string;\n  destinationCACertificate: string;\n}\n\nexport interface BuildData {\n  triggers: {\n    webhook?: boolean;\n    image?: boolean;\n    config?: boolean;\n  };\n  env: (NameValuePair | NameValueFromPair)[];\n  strategy: string;\n}\n\nexport interface DeploymentData {\n  triggers: {\n    image: boolean;\n    config?: boolean;\n  };\n  replicas: number;\n  env: (NameValuePair | NameValueFromPair)[];\n}\n\nexport interface ServerlessData {\n  scaling: ServerlessScaling;\n}\n\nexport interface PipelineData {\n  enabled: boolean;\n  template?: K8sResourceKind;\n}\n\nexport interface ServerlessScaling {\n  minpods: number;\n  maxpods: number | '';\n  concurrencytarget: number | '';\n  concurrencylimit: number | '';\n}\n\nexport enum GitTypes {\n  github = 'github',\n  gitlab = 'gitlab',\n  bitbucket = 'bitbucket',\n  unsure = 'other',\n  invalid = '',\n}\n\nexport const GitReadableTypes = {\n  [GitTypes.github]: 'GitHub',\n  [GitTypes.gitlab]: 'GitLab',\n  [GitTypes.bitbucket]: 'Bitbucket',\n  [GitTypes.unsure]: 'Other',\n};\n\nexport enum ImportTypes {\n  git = 'git',\n  docker = 'docker',\n  s2i = 's2i',\n}\n\nexport enum Resources {\n  OpenShift = 'openshift',\n  Kubernetes = 'kubernetes',\n  KnativeService = 'knative',\n}\n\nexport const ReadableResourcesNames = {\n  [Resources.OpenShift]: DeploymentConfigModel.label,\n  [Resources.Kubernetes]: DeploymentModel.label,\n  [Resources.KnativeService]: `Knative ${ServiceModel.label}`,\n};\n\nexport interface ImportData {\n  type: ImportTypes;\n  title: string;\n  buildStrategy: string;\n  loader: LazyLoader<GitImportFormProps | SourceToImageFormProps>;\n}\n\nexport enum TerminationTypes {\n  edge = 'Edge',\n  passthrough = 'Passthrough',\n  reencrypt = 'Re-encrypt',\n}\n\nexport enum InsecureTrafficTypes {\n  None = 'None',\n  Allow = 'Allow',\n  Redirect = 'Redirect',\n}\n\nexport enum PassthroughInsecureTrafficTypes {\n  None = 'None',\n  Redirect = 'Redirect',\n}\n\nexport interface LimitsData {\n  cpu: ResourceType;\n  memory: ResourceType;\n}\n\nexport interface ResourceType {\n  request: number | string;\n  requestUnit: string;\n  defaultRequestUnit: string;\n  limit: number | string;\n  limitUnit: string;\n  defaultLimitUnit: string;\n}\n\nexport enum CPUUnits {\n  m = 'millicores',\n  '' = 'cores',\n}\n\nexport enum MemoryUnits {\n  Mi = 'Mi',\n  Gi = 'Gi',\n}\n\nexport enum ImportOptions {\n  GIT = 'GIT',\n  CONTAINER = 'CONTAINER',\n  CATALOG = 'CATALOG',\n  DOCKERFILE = 'DOCKERFILE',\n  DATABASE = 'DATABASE',\n  EVENTSOURCE = 'EVENTSOURCE',\n}\n\nexport interface HealthChecksData {\n  readinessProbe: HealthCheckProbe;\n  livenessProbe: HealthCheckProbe;\n  startupProbe?: HealthCheckProbe;\n}\n"]}]}