{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/pipeline-details/pipeline-step-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/pipeline-details/pipeline-step-utils.ts","mtime":1615298458620},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { runStatus } from '../../../../utils/pipeline-augment';\nimport { calculateRelativeTime } from '../../../../utils/pipeline-utils';\nvar TerminatedReasons;\n(function (TerminatedReasons) {\n    TerminatedReasons[\"Completed\"] = \"Completed\";\n})(TerminatedReasons || (TerminatedReasons = {}));\nconst getMatchingStep = (step, status) => {\n    const statusSteps = status.steps || [];\n    return statusSteps.find((statusStep) => {\n        // In rare occasions the status step name is prefixed with `step-`\n        // This is likely a bug but this workaround will be temporary as it's investigated separately\n        return statusStep.name === step.name || statusStep.name === `step-${step.name}`;\n    });\n};\nconst getMatchingStepDuration = (matchingStep) => {\n    if (!matchingStep)\n        return '';\n    if (matchingStep.terminated) {\n        return calculateRelativeTime(matchingStep.terminated.startedAt);\n    }\n    if (matchingStep.running) {\n        return calculateRelativeTime(matchingStep.running.startedAt);\n    }\n    return '';\n};\nexport const createStepStatus = (step, status) => {\n    let stepRunStatus = runStatus.PipelineNotStarted;\n    let duration = null;\n    if (!status || !status.reason) {\n        stepRunStatus = runStatus.Cancelled;\n    }\n    else if (status.reason === runStatus['In Progress']) {\n        // In progress, try to get granular statuses\n        const matchingStep = getMatchingStep(step, status);\n        if (!matchingStep) {\n            stepRunStatus = runStatus.Pending;\n        }\n        else if (matchingStep.terminated) {\n            stepRunStatus =\n                matchingStep.terminated.reason === TerminatedReasons.Completed\n                    ? runStatus.Succeeded\n                    : runStatus.Failed;\n            duration = getMatchingStepDuration(matchingStep);\n        }\n        else if (matchingStep.running) {\n            stepRunStatus = runStatus['In Progress'];\n            duration = getMatchingStepDuration(matchingStep);\n        }\n        else if (matchingStep.waiting) {\n            stepRunStatus = runStatus.Pending;\n        }\n    }\n    else {\n        // Not in progress, just use the run status reason\n        stepRunStatus = status.reason;\n        duration = getMatchingStepDuration(getMatchingStep(step, status)) || status.duration;\n    }\n    return {\n        duration,\n        name: step.name,\n        runStatus: stepRunStatus,\n    };\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/pipeline-details/pipeline-step-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/pipeline-details/pipeline-step-utils.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,SAAS,EAAE,MAAM,oCAAoC,CAAC;AAC/D,OAAO,EAAE,qBAAqB,EAAE,MAAM,kCAAkC,CAAC;AAEzE,IAAK,iBAEJ;AAFD,WAAK,iBAAiB;IACpB,4CAAuB,CAAA;AACzB,CAAC,EAFI,iBAAiB,KAAjB,iBAAiB,QAErB;AAmBD,MAAM,eAAe,GAAG,CAAC,IAAI,EAAE,MAAkB,EAAkB,EAAE;IACnE,MAAM,WAAW,GAAqB,MAAM,CAAC,KAAK,IAAI,EAAE,CAAC;IACzD,OAAO,WAAW,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE;QACrC,kEAAkE;QAClE,6FAA6F;QAC7F,OAAO,UAAU,CAAC,IAAI,KAAK,IAAI,CAAC,IAAI,IAAI,UAAU,CAAC,IAAI,KAAK,QAAQ,IAAI,CAAC,IAAI,EAAE,CAAC;IAClF,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,uBAAuB,GAAG,CAAC,YAA6B,EAAE,EAAE;IAChE,IAAI,CAAC,YAAY;QAAE,OAAO,EAAE,CAAC;IAE7B,IAAI,YAAY,CAAC,UAAU,EAAE;QAC3B,OAAO,qBAAqB,CAAC,YAAY,CAAC,UAAU,CAAC,SAAS,CAAC,CAAC;KACjE;IACD,IAAI,YAAY,CAAC,OAAO,EAAE;QACxB,OAAO,qBAAqB,CAAC,YAAY,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;KAC9D;IAED,OAAO,EAAE,CAAC;AACZ,CAAC,CAAC;AAQF,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,IAAsB,EAAE,MAAkB,EAAc,EAAE;IACzF,IAAI,aAAa,GAAc,SAAS,CAAC,kBAAkB,CAAC;IAC5D,IAAI,QAAQ,GAAW,IAAI,CAAC;IAE5B,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,MAAM,EAAE;QAC7B,aAAa,GAAG,SAAS,CAAC,SAAS,CAAC;KACrC;SAAM,IAAI,MAAM,CAAC,MAAM,KAAK,SAAS,CAAC,aAAa,CAAC,EAAE;QACrD,4CAA4C;QAC5C,MAAM,YAAY,GAAmB,eAAe,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC;QAEnE,IAAI,CAAC,YAAY,EAAE;YACjB,aAAa,GAAG,SAAS,CAAC,OAAO,CAAC;SACnC;aAAM,IAAI,YAAY,CAAC,UAAU,EAAE;YAClC,aAAa;gBACX,YAAY,CAAC,UAAU,CAAC,MAAM,KAAK,iBAAiB,CAAC,SAAS;oBAC5D,CAAC,CAAC,SAAS,CAAC,SAAS;oBACrB,CAAC,CAAC,SAAS,CAAC,MAAM,CAAC;YACvB,QAAQ,GAAG,uBAAuB,CAAC,YAAY,CAAC,CAAC;SAClD;aAAM,IAAI,YAAY,CAAC,OAAO,EAAE;YAC/B,aAAa,GAAG,SAAS,CAAC,aAAa,CAAC,CAAC;YACzC,QAAQ,GAAG,uBAAuB,CAAC,YAAY,CAAC,CAAC;SAClD;aAAM,IAAI,YAAY,CAAC,OAAO,EAAE;YAC/B,aAAa,GAAG,SAAS,CAAC,OAAO,CAAC;SACnC;KACF;SAAM;QACL,kDAAkD;QAClD,aAAa,GAAG,MAAM,CAAC,MAAM,CAAC;QAE9B,QAAQ,GAAG,uBAAuB,CAAC,eAAe,CAAC,IAAI,EAAE,MAAM,CAAC,CAAC,IAAI,MAAM,CAAC,QAAQ,CAAC;KACtF;IAED,OAAO;QACL,QAAQ;QACR,IAAI,EAAE,IAAI,CAAC,IAAI;QACf,SAAS,EAAE,aAAa;KACzB,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import { runStatus } from '../../../../utils/pipeline-augment';\nimport { calculateRelativeTime } from '../../../../utils/pipeline-utils';\n\nenum TerminatedReasons {\n  Completed = 'Completed',\n}\n\nexport type TaskStatusStep = {\n  name: string;\n  running?: { startedAt: string };\n  terminated?: {\n    finishedAt: string;\n    reason: TerminatedReasons;\n    startedAt: string;\n  };\n  waiting?: {};\n};\n\nexport type TaskStatus = {\n  reason: runStatus;\n  duration?: string;\n  steps?: TaskStatusStep[];\n};\n\nconst getMatchingStep = (step, status: TaskStatus): TaskStatusStep => {\n  const statusSteps: TaskStatusStep[] = status.steps || [];\n  return statusSteps.find((statusStep) => {\n    // In rare occasions the status step name is prefixed with `step-`\n    // This is likely a bug but this workaround will be temporary as it's investigated separately\n    return statusStep.name === step.name || statusStep.name === `step-${step.name}`;\n  });\n};\n\nconst getMatchingStepDuration = (matchingStep?: TaskStatusStep) => {\n  if (!matchingStep) return '';\n\n  if (matchingStep.terminated) {\n    return calculateRelativeTime(matchingStep.terminated.startedAt);\n  }\n  if (matchingStep.running) {\n    return calculateRelativeTime(matchingStep.running.startedAt);\n  }\n\n  return '';\n};\n\nexport type StepStatus = {\n  duration: string | null;\n  name: string;\n  runStatus: runStatus;\n};\n\nexport const createStepStatus = (step: { name: string }, status: TaskStatus): StepStatus => {\n  let stepRunStatus: runStatus = runStatus.PipelineNotStarted;\n  let duration: string = null;\n\n  if (!status || !status.reason) {\n    stepRunStatus = runStatus.Cancelled;\n  } else if (status.reason === runStatus['In Progress']) {\n    // In progress, try to get granular statuses\n    const matchingStep: TaskStatusStep = getMatchingStep(step, status);\n\n    if (!matchingStep) {\n      stepRunStatus = runStatus.Pending;\n    } else if (matchingStep.terminated) {\n      stepRunStatus =\n        matchingStep.terminated.reason === TerminatedReasons.Completed\n          ? runStatus.Succeeded\n          : runStatus.Failed;\n      duration = getMatchingStepDuration(matchingStep);\n    } else if (matchingStep.running) {\n      stepRunStatus = runStatus['In Progress'];\n      duration = getMatchingStepDuration(matchingStep);\n    } else if (matchingStep.waiting) {\n      stepRunStatus = runStatus.Pending;\n    }\n  } else {\n    // Not in progress, just use the run status reason\n    stepRunStatus = status.reason;\n\n    duration = getMatchingStepDuration(getMatchingStep(step, status)) || status.duration;\n  }\n\n  return {\n    duration,\n    name: step.name,\n    runStatus: stepRunStatus,\n  };\n};\n"]}]}