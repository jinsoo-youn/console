{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/nav/nav-header.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/nav/nav-header.tsx","mtime":1616973267250},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Dropdown, DropdownItem, DropdownToggle, Title } from '@patternfly/react-core';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport { getPerspectives } from '../../hypercloud/perspectives';\nimport { featureReducerName, getFlagsObject } from '../../reducers/features';\nimport { getActivePerspective } from '../../reducers/ui';\nimport * as UIActions from '../../actions/ui';\nimport { history } from '../utils';\nimport ClusterDropdown from '../hypercloud/nav/cluster-dropdown';\nimport { useTranslation } from 'react-i18next';\nconst NavHeader_ = ({ setActivePerspective, onPerspectiveSelected, activePerspective, onClusterSelected, flags, }) => {\n    const [isPerspectiveDropdownOpen, setPerspectiveDropdownOpen] = React.useState(false);\n    const togglePerspectiveOpen = React.useCallback(() => {\n        setPerspectiveDropdownOpen(!isPerspectiveDropdownOpen);\n    }, [isPerspectiveDropdownOpen]);\n    const onPerspectiveSelect = React.useCallback((event, perspective) => {\n        event.preventDefault();\n        if (perspective.properties.id !== activePerspective) {\n            setActivePerspective(perspective.properties.id);\n            history.push(perspective.properties.getLandingPageURL(flags));\n        }\n        setPerspectiveDropdownOpen(false);\n        onPerspectiveSelected && onPerspectiveSelected();\n    }, [activePerspective, flags, onPerspectiveSelected, setActivePerspective]);\n    const renderToggle = React.useCallback((icon, name) => (React.createElement(DropdownToggle, { isOpen: isPerspectiveDropdownOpen, onToggle: togglePerspectiveOpen, iconComponent: CaretDownIcon, \"data-test-id\": \"perspective-switcher-toggle\" },\n        React.createElement(Title, { size: \"md\" },\n            React.createElement(\"span\", { className: \"oc-nav-header__icon\" }, icon),\n            name))), [isPerspectiveDropdownOpen, togglePerspectiveOpen]);\n    const getPerspectiveItems = React.useCallback((perspectives) => {\n        return perspectives.map((nextPerspective) => (React.createElement(DropdownItem, { key: nextPerspective.properties.id, onClick: (event) => onPerspectiveSelect(event, nextPerspective), isHovered: nextPerspective.properties.id === activePerspective, component: \"button\" },\n            React.createElement(Title, { size: \"md\" },\n                React.createElement(\"span\", { className: \"oc-nav-header__icon\" }, nextPerspective.properties.icon),\n                nextPerspective.properties.name))));\n    }, [activePerspective, onPerspectiveSelect]);\n    const { t } = useTranslation();\n    const perspectives = getPerspectives.bind(null, t)();\n    const { icon, name } = React.useMemo(() => perspectives.find((p) => p.properties.id === activePerspective).properties, [activePerspective, perspectives]);\n    return (React.createElement(React.Fragment, null, window.SERVER_FLAGS.McMode && (React.createElement(\"div\", { className: \"oc-nav-header\" },\n        React.createElement(\"div\", { className: \"hc-dropdown__title\" }, t('COMMON:MSG_LNB_MENU_CONSOLE_1')),\n        React.createElement(Dropdown, { isOpen: isPerspectiveDropdownOpen, toggle: renderToggle(icon, name), dropdownItems: getPerspectiveItems(perspectives), \"data-test-id\": \"perspective-switcher-menu\" }),\n        activePerspective == \"hc\" &&\n            React.createElement(React.Fragment, null,\n                React.createElement(\"div\", { className: \"hc-dropdown__title\" }, t('COMMON:MSG_LNB_MENU_CONSOLE_2')),\n                React.createElement(ClusterDropdown, { onClusterSelected: onClusterSelected }))))));\n};\nconst mapStateToProps = (state) => ({\n    activePerspective: getActivePerspective(state),\n    flags: getFlagsObject(state),\n});\nexport default connect(mapStateToProps, { setActivePerspective: UIActions.setActivePerspective }, null, {\n    areStatesEqual: (next, prev) => next[featureReducerName] === prev[featureReducerName] &&\n        getActivePerspective(next) === getActivePerspective(prev),\n})(NavHeader_);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/nav/nav-header.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/nav/nav-header.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AACtC,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE,cAAc,EAAE,KAAK,EAAE,MAAM,wBAAwB,CAAC;AACvF,OAAO,EAAE,aAAa,EAAE,MAAM,yBAAyB,CAAC;AAExD,OAAO,EAAE,eAAe,EAAE,MAAM,+BAA+B,CAAC;AAEhE,OAAO,EAAE,kBAAkB,EAAE,cAAc,EAAe,MAAM,yBAAyB,CAAC;AAC1F,OAAO,EAAE,oBAAoB,EAAE,MAAM,mBAAmB,CAAC;AACzD,OAAO,KAAK,SAAS,MAAM,kBAAkB,CAAC;AAC9C,OAAO,EAAE,OAAO,EAAE,MAAM,UAAU,CAAC;AACnC,OAAO,eAAe,MAAM,oCAAoC,CAAC;AACjE,OAAO,EAAE,cAAc,EAAE,MAAM,eAAe,CAAC;AAa/C,MAAM,UAAU,GAA0C,CAAC,EACzD,oBAAoB,EACpB,qBAAqB,EACrB,iBAAiB,EACjB,iBAAiB,EACjB,KAAK,GACN,EAAE,EAAE;IACH,MAAM,CAAC,yBAAyB,EAAE,0BAA0B,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;IAEtF,MAAM,qBAAqB,GAAG,KAAK,CAAC,WAAW,CAAC,GAAG,EAAE;QACnD,0BAA0B,CAAC,CAAC,yBAAyB,CAAC,CAAC;IACzD,CAAC,EAAE,CAAC,yBAAyB,CAAC,CAAC,CAAC;IAEhC,MAAM,mBAAmB,GAAG,KAAK,CAAC,WAAW,CAC3C,CAAC,KAAwC,EAAE,WAAwB,EAAQ,EAAE;QAC3E,KAAK,CAAC,cAAc,EAAE,CAAC;QACvB,IAAI,WAAW,CAAC,UAAU,CAAC,EAAE,KAAK,iBAAiB,EAAE;YACnD,oBAAoB,CAAC,WAAW,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC;YAChD,OAAO,CAAC,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;SAC/D;QAED,0BAA0B,CAAC,KAAK,CAAC,CAAC;QAClC,qBAAqB,IAAI,qBAAqB,EAAE,CAAC;IACnD,CAAC,EACD,CAAC,iBAAiB,EAAE,KAAK,EAAE,qBAAqB,EAAE,oBAAoB,CAAC,CACxE,CAAC;IAEF,MAAM,YAAY,GAAG,KAAK,CAAC,WAAW,CACpC,CAAC,IAAqB,EAAE,IAAY,EAAE,EAAE,CAAC,CACvC,oBAAC,cAAc,IACb,MAAM,EAAE,yBAAyB,EACjC,QAAQ,EAAE,qBAAqB,EAC/B,aAAa,EAAE,aAAa,kBACf,6BAA6B;QAE1C,oBAAC,KAAK,IAAC,IAAI,EAAC,IAAI;YACd,8BAAM,SAAS,EAAC,qBAAqB,IAAE,IAAI,CAAQ;YAClD,IAAI,CACC,CACO,CAClB,EACD,CAAC,yBAAyB,EAAE,qBAAqB,CAAC,CACnD,CAAC;IAEF,MAAM,mBAAmB,GAAG,KAAK,CAAC,WAAW,CAC3C,CAAC,YAA2B,EAAE,EAAE;QAC9B,OAAO,YAAY,CAAC,GAAG,CAAC,CAAC,eAA4B,EAAE,EAAE,CAAC,CACxD,oBAAC,YAAY,IACX,GAAG,EAAE,eAAe,CAAC,UAAU,CAAC,EAAE,EAClC,OAAO,EAAE,CAAC,KAAwC,EAAE,EAAE,CACpD,mBAAmB,CAAC,KAAK,EAAE,eAAe,CAAC,EAE7C,SAAS,EAAE,eAAe,CAAC,UAAU,CAAC,EAAE,KAAK,iBAAiB,EAC9D,SAAS,EAAC,QAAQ;YAElB,oBAAC,KAAK,IAAC,IAAI,EAAC,IAAI;gBACd,8BAAM,SAAS,EAAC,qBAAqB,IAAE,eAAe,CAAC,UAAU,CAAC,IAAI,CAAQ;gBAC7E,eAAe,CAAC,UAAU,CAAC,IAAI,CAC1B,CACK,CAChB,CAAC,CAAC;IACL,CAAC,EACD,CAAC,iBAAiB,EAAE,mBAAmB,CAAC,CACzC,CAAC;IAEF,MAAM,EAAE,CAAC,EAAE,GAAG,cAAc,EAAE,CAAC;IAC/B,MAAM,YAAY,GAAG,eAAe,CAAC,IAAI,CAAC,IAAI,EAAE,CAAC,CAAC,EAAE,CAAC;IACrD,MAAM,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,KAAK,CAAC,OAAO,CAClC,GAAG,EAAE,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,EAAE,KAAK,iBAAiB,CAAC,CAAC,UAAU,EAChF,CAAC,iBAAiB,EAAE,YAAY,CAAC,CAClC,CAAC;IAEF,OAAO,CACL,0CACG,MAAM,CAAC,YAAY,CAAC,MAAM,IAAI,CAC7B,6BAAK,SAAS,EAAC,eAAe;QAC5B,6BAAK,SAAS,EAAC,oBAAoB,IAAE,CAAC,CAAC,+BAA+B,CAAC,CAAO;QAC9E,oBAAC,QAAQ,IACP,MAAM,EAAE,yBAAyB,EACjC,MAAM,EAAE,YAAY,CAAC,IAAI,EAAE,IAAI,CAAC,EAChC,aAAa,EAAE,mBAAmB,CAAC,YAAY,CAAC,kBACnC,2BAA2B,GACxC;QACD,iBAAiB,IAAI,IAAI;YACxB;gBACE,6BAAK,SAAS,EAAC,oBAAoB,IAAE,CAAC,CAAC,+BAA+B,CAAC,CAAO;gBAC9E,oBAAC,eAAe,IAAC,iBAAiB,EAAE,iBAAiB,GAAI,CACxD,CAED,CACP,CAEA,CACJ,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,eAAe,GAAG,CAAC,KAAgB,EAAc,EAAE,CAAC,CAAC;IACzD,iBAAiB,EAAE,oBAAoB,CAAC,KAAK,CAAC;IAC9C,KAAK,EAAE,cAAc,CAAC,KAAK,CAAC;CAC7B,CAAC,CAAC;AAEH,eAAe,OAAO,CACpB,eAAe,EACf,EAAE,oBAAoB,EAAE,SAAS,CAAC,oBAAoB,EAAE,EACxD,IAAI,EACJ;IACE,cAAc,EAAE,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE,CAC7B,IAAI,CAAC,kBAAkB,CAAC,KAAK,IAAI,CAAC,kBAAkB,CAAC;QACrD,oBAAoB,CAAC,IAAI,CAAC,KAAK,oBAAoB,CAAC,IAAI,CAAC;CAC5D,CACF,CAAC,UAAU,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Dropdown, DropdownItem, DropdownToggle, Title } from '@patternfly/react-core';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport { Perspective } from '@console/plugin-sdk';\nimport { getPerspectives } from '../../hypercloud/perspectives';\nimport { RootState } from '../../redux';\nimport { featureReducerName, getFlagsObject, FlagsObject } from '../../reducers/features';\nimport { getActivePerspective } from '../../reducers/ui';\nimport * as UIActions from '../../actions/ui';\nimport { history } from '../utils';\nimport ClusterDropdown from '../hypercloud/nav/cluster-dropdown';\nimport { useTranslation } from 'react-i18next';\n\ntype StateProps = {\n  activePerspective: string;\n  setActivePerspective?: (id: string) => void;\n  flags: FlagsObject;\n};\n\nexport type NavHeaderProps = {\n  onPerspectiveSelected: () => void;\n  onClusterSelected: () => void;\n};\n\nconst NavHeader_: React.FC<NavHeaderProps & StateProps> = ({\n  setActivePerspective,\n  onPerspectiveSelected,\n  activePerspective,\n  onClusterSelected,\n  flags,\n}) => {\n  const [isPerspectiveDropdownOpen, setPerspectiveDropdownOpen] = React.useState(false);\n\n  const togglePerspectiveOpen = React.useCallback(() => {\n    setPerspectiveDropdownOpen(!isPerspectiveDropdownOpen);\n  }, [isPerspectiveDropdownOpen]);\n\n  const onPerspectiveSelect = React.useCallback(\n    (event: React.MouseEvent<HTMLLinkElement>, perspective: Perspective): void => {\n      event.preventDefault();\n      if (perspective.properties.id !== activePerspective) {\n        setActivePerspective(perspective.properties.id);\n        history.push(perspective.properties.getLandingPageURL(flags));\n      }\n\n      setPerspectiveDropdownOpen(false);\n      onPerspectiveSelected && onPerspectiveSelected();\n    },\n    [activePerspective, flags, onPerspectiveSelected, setActivePerspective],\n  );\n\n  const renderToggle = React.useCallback(\n    (icon: React.ReactNode, name: string) => (\n      <DropdownToggle\n        isOpen={isPerspectiveDropdownOpen}\n        onToggle={togglePerspectiveOpen}\n        iconComponent={CaretDownIcon}\n        data-test-id=\"perspective-switcher-toggle\"\n      >\n        <Title size=\"md\">\n          <span className=\"oc-nav-header__icon\">{icon}</span>\n          {name}\n        </Title>\n      </DropdownToggle>\n    ),\n    [isPerspectiveDropdownOpen, togglePerspectiveOpen],\n  );\n\n  const getPerspectiveItems = React.useCallback(\n    (perspectives: Perspective[]) => {\n      return perspectives.map((nextPerspective: Perspective) => (\n        <DropdownItem\n          key={nextPerspective.properties.id}\n          onClick={(event: React.MouseEvent<HTMLLinkElement>) =>\n            onPerspectiveSelect(event, nextPerspective)\n          }\n          isHovered={nextPerspective.properties.id === activePerspective}\n          component=\"button\"\n        >\n          <Title size=\"md\">\n            <span className=\"oc-nav-header__icon\">{nextPerspective.properties.icon}</span>\n            {nextPerspective.properties.name}\n          </Title>\n        </DropdownItem>\n      ));\n    },\n    [activePerspective, onPerspectiveSelect],\n  );\n\n  const { t } = useTranslation();\n  const perspectives = getPerspectives.bind(null, t)();\n  const { icon, name } = React.useMemo(\n    () => perspectives.find((p) => p.properties.id === activePerspective).properties,\n    [activePerspective, perspectives],\n  );\n\n  return (\n    <>\n      {window.SERVER_FLAGS.McMode && (\n        <div className=\"oc-nav-header\">\n          <div className=\"hc-dropdown__title\">{t('COMMON:MSG_LNB_MENU_CONSOLE_1')}</div>\n          <Dropdown\n            isOpen={isPerspectiveDropdownOpen}\n            toggle={renderToggle(icon, name)}\n            dropdownItems={getPerspectiveItems(perspectives)}\n            data-test-id=\"perspective-switcher-menu\"\n          />\n          {activePerspective == \"hc\" &&\n            <>\n              <div className=\"hc-dropdown__title\">{t('COMMON:MSG_LNB_MENU_CONSOLE_2')}</div>\n              <ClusterDropdown onClusterSelected={onClusterSelected} />\n            </>\n          }\n        </div>\n      )\n      }\n    </>\n  );\n};\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  activePerspective: getActivePerspective(state),\n  flags: getFlagsObject(state),\n});\n\nexport default connect<StateProps, {}, NavHeaderProps, RootState>(\n  mapStateToProps,\n  { setActivePerspective: UIActions.setActivePerspective },\n  null,\n  {\n    areStatesEqual: (next, prev) =>\n      next[featureReducerName] === prev[featureReducerName] &&\n      getActivePerspective(next) === getActivePerspective(prev),\n  },\n)(NavHeader_);\n"]}]}