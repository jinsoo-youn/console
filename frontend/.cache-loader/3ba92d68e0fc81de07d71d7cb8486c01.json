{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/ImportPage.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/ImportPage.tsx","mtime":1616735742380},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { PageHeading, Firehose } from '@console/internal/components/utils';\nimport { ImageStreamModel } from '@console/internal/models';\nimport { QUERY_PROPERTIES } from '../../const';\nimport NamespacedPage, { NamespacedPageVariants } from '../NamespacedPage';\nimport QueryFocusApplication from '../QueryFocusApplication';\nimport ImportForm from './ImportForm';\nimport { ImportTypes } from './import-types';\nconst ImportFlows = {\n    git: {\n        type: ImportTypes.git,\n        title: 'Import from git',\n        buildStrategy: 'Source',\n        loader: () => import('./GitImportForm' /* webpackChunkName: \"git-import-form\" */).then((m) => m.default),\n    },\n    docker: {\n        type: ImportTypes.docker,\n        title: 'Import from Dockerfile',\n        buildStrategy: 'Docker',\n        loader: () => import('./GitImportForm' /* webpackChunkName: \"git-import-form\" */).then((m) => m.default),\n    },\n    s2i: {\n        type: ImportTypes.s2i,\n        title: 'Create Source-to-Image Application',\n        buildStrategy: 'Source',\n        loader: () => import('./SourceToImageForm' /* webpackChunkName: \"source-to-image-form\" */).then((m) => m.default),\n    },\n};\nconst ImportPage = ({ match, location }) => {\n    const namespace = match.params.ns;\n    const searchParams = new URLSearchParams(location.search);\n    const imageStreamName = searchParams.get('imagestream');\n    const imageStreamNamespace = searchParams.get('imagestream-ns');\n    const preselectedNamespace = searchParams.get('preselected-ns');\n    const importType = searchParams.get('importType');\n    let importData;\n    let resources;\n    if (imageStreamName && imageStreamNamespace) {\n        importData = ImportFlows.s2i;\n        resources = [\n            {\n                kind: ImageStreamModel.kind,\n                prop: 'imageStreams',\n                isList: false,\n                name: imageStreamName,\n                namespace: imageStreamNamespace,\n            },\n            {\n                kind: 'Project',\n                prop: 'projects',\n                isList: true,\n            },\n        ];\n    }\n    else if (importType === ImportTypes.docker) {\n        importData = ImportFlows.docker;\n        resources = [\n            {\n                kind: 'Project',\n                prop: 'projects',\n                isList: true,\n            },\n        ];\n    }\n    else {\n        importData = ImportFlows.git;\n        resources = [\n            {\n                kind: ImageStreamModel.kind,\n                prop: 'imageStreams',\n                isList: true,\n                namespace: 'openshift',\n            },\n            {\n                kind: 'Project',\n                prop: 'projects',\n                isList: true,\n            },\n        ];\n    }\n    return (React.createElement(QueryFocusApplication, null, (application) => (React.createElement(NamespacedPage, { disabled: true, variant: NamespacedPageVariants.light },\n        React.createElement(Helmet, null,\n            React.createElement(\"title\", null, importData.title)),\n        React.createElement(PageHeading, { title: importData.title }),\n        React.createElement(\"div\", { className: \"co-m-pane__body\", style: { paddingBottom: 0 } },\n            React.createElement(Firehose, { resources: resources },\n                React.createElement(ImportForm, { forApplication: application, contextualSource: searchParams.get(QUERY_PROPERTIES.CONTEXT_SOURCE), namespace: namespace || preselectedNamespace, importData: importData })))))));\n};\nexport default ImportPage;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/ImportPage.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/ImportPage.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { PageHeading, Firehose, FirehoseResource } from '@console/internal/components/utils';\nimport { ImageStreamModel } from '@console/internal/models';\nimport { QUERY_PROPERTIES } from '../../const';\nimport NamespacedPage, { NamespacedPageVariants } from '../NamespacedPage';\nimport QueryFocusApplication from '../QueryFocusApplication';\nimport ImportForm from './ImportForm';\nimport { ImportTypes, ImportData } from './import-types';\n\nexport type ImportPageProps = RouteComponentProps<{ ns?: string }>;\n\nconst ImportFlows: { [name: string]: ImportData } = {\n  git: {\n    type: ImportTypes.git,\n    title: 'Import from git',\n    buildStrategy: 'Source',\n    loader: () =>\n      import('./GitImportForm' /* webpackChunkName: \"git-import-form\" */).then((m) => m.default),\n  },\n  docker: {\n    type: ImportTypes.docker,\n    title: 'Import from Dockerfile',\n    buildStrategy: 'Docker',\n    loader: () =>\n      import('./GitImportForm' /* webpackChunkName: \"git-import-form\" */).then((m) => m.default),\n  },\n  s2i: {\n    type: ImportTypes.s2i,\n    title: 'Create Source-to-Image Application',\n    buildStrategy: 'Source',\n    loader: () =>\n      import('./SourceToImageForm' /* webpackChunkName: \"source-to-image-form\" */).then(\n        (m) => m.default,\n      ),\n  },\n};\n\nconst ImportPage: React.FunctionComponent<ImportPageProps> = ({ match, location }) => {\n  const namespace = match.params.ns;\n  const searchParams = new URLSearchParams(location.search);\n  const imageStreamName = searchParams.get('imagestream');\n  const imageStreamNamespace = searchParams.get('imagestream-ns');\n  const preselectedNamespace = searchParams.get('preselected-ns');\n  const importType = searchParams.get('importType');\n\n  let importData: ImportData;\n  let resources: FirehoseResource[];\n  if (imageStreamName && imageStreamNamespace) {\n    importData = ImportFlows.s2i;\n    resources = [\n      {\n        kind: ImageStreamModel.kind,\n        prop: 'imageStreams',\n        isList: false,\n        name: imageStreamName,\n        namespace: imageStreamNamespace,\n      },\n      {\n        kind: 'Project',\n        prop: 'projects',\n        isList: true,\n      },\n    ];\n  } else if (importType === ImportTypes.docker) {\n    importData = ImportFlows.docker;\n    resources = [\n      {\n        kind: 'Project',\n        prop: 'projects',\n        isList: true,\n      },\n    ];\n  } else {\n    importData = ImportFlows.git;\n    resources = [\n      {\n        kind: ImageStreamModel.kind,\n        prop: 'imageStreams',\n        isList: true,\n        namespace: 'openshift',\n      },\n      {\n        kind: 'Project',\n        prop: 'projects',\n        isList: true,\n      },\n    ];\n  }\n\n  return (\n    <QueryFocusApplication>\n      {(application) => (\n        <NamespacedPage disabled variant={NamespacedPageVariants.light}>\n          <Helmet>\n            <title>{importData.title}</title>\n          </Helmet>\n          <PageHeading title={importData.title} />\n          <div className=\"co-m-pane__body\" style={{ paddingBottom: 0 }}>\n            <Firehose resources={resources}>\n              <ImportForm\n                forApplication={application}\n                contextualSource={searchParams.get(QUERY_PROPERTIES.CONTEXT_SOURCE)}\n                namespace={namespace || preselectedNamespace}\n                importData={importData}\n              />\n            </Firehose>\n          </div>\n        </NamespacedPage>\n      )}\n    </QueryFocusApplication>\n  );\n};\n\nexport default ImportPage;\n"]}]}