{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/components/maintenance/StartingMaintenancePopoverContent.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/components/maintenance/StartingMaintenancePopoverContent.tsx","mtime":1615298458670},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { Timestamp } from '@console/internal/components/utils';\nimport { Progress, ProgressSize, Alert, Expandable, Button } from '@patternfly/react-core';\nimport { getNodeMaintenanceReason, getNodeMaintenanceCreationTimestamp, getNodeMaintenanceProgressPercent, getNodeMaintenanceLastError, getNodeMaintenancePendingPods, } from '../../selectors';\nimport stopNodeMaintenanceModal from '../modals/StopNodeMaintenanceModal';\nimport MaintenancePopoverPodList from './MaintenancePopoverPodList';\nconst StartingMaintenancePopoverContent = ({ nodeMaintenance, }) => {\n    const reason = getNodeMaintenanceReason(nodeMaintenance);\n    const creationTimestamp = getNodeMaintenanceCreationTimestamp(nodeMaintenance);\n    const lastError = getNodeMaintenanceLastError(nodeMaintenance);\n    const pendingPods = getNodeMaintenancePendingPods(nodeMaintenance);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"p\", null, \"Node is entering maintenance. The cluster will automatically rebuild node's data 30 minutes after entering maintenance.\"),\n        React.createElement(\"dl\", null,\n            React.createElement(\"dt\", null, \"Maintenance reason:\"),\n            React.createElement(\"dd\", null, reason),\n            React.createElement(\"dt\", null, \"Requested:\"),\n            React.createElement(\"dd\", null,\n                React.createElement(Timestamp, { timestamp: creationTimestamp }))),\n        React.createElement(\"br\", null),\n        lastError && (React.createElement(React.Fragment, null,\n            React.createElement(Alert, { variant: \"warning\", title: \"Workloads failing to move\", isInline: true }, lastError),\n            React.createElement(\"br\", null))),\n        React.createElement(Progress, { value: getNodeMaintenanceProgressPercent(nodeMaintenance), title: \"Moving workloads\", size: ProgressSize.sm }),\n        React.createElement(\"br\", null),\n        React.createElement(Expandable, { toggleText: `Show remaining workloads (${pendingPods.length})` },\n            React.createElement(MaintenancePopoverPodList, { pods: pendingPods })),\n        React.createElement(\"br\", null),\n        React.createElement(Button, { variant: \"link\", onClick: () => stopNodeMaintenanceModal(nodeMaintenance), isInline: true }, \"Stop\")));\n};\nexport default StartingMaintenancePopoverContent;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/components/maintenance/StartingMaintenancePopoverContent.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/components/maintenance/StartingMaintenancePopoverContent.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAE,SAAS,EAAE,MAAM,oCAAoC,CAAC;AAC/D,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE,KAAK,EAAE,UAAU,EAAE,MAAM,EAAE,MAAM,wBAAwB,CAAC;AAC3F,OAAO,EACL,wBAAwB,EACxB,mCAAmC,EACnC,iCAAiC,EACjC,2BAA2B,EAC3B,6BAA6B,GAC9B,MAAM,iBAAiB,CAAC;AACzB,OAAO,wBAAwB,MAAM,oCAAoC,CAAC;AAC1E,OAAO,yBAAyB,MAAM,6BAA6B,CAAC;AAMpE,MAAM,iCAAiC,GAAqD,CAAC,EAC3F,eAAe,GAChB,EAAE,EAAE;IACH,MAAM,MAAM,GAAG,wBAAwB,CAAC,eAAe,CAAC,CAAC;IACzD,MAAM,iBAAiB,GAAG,mCAAmC,CAAC,eAAe,CAAC,CAAC;IAC/E,MAAM,SAAS,GAAG,2BAA2B,CAAC,eAAe,CAAC,CAAC;IAC/D,MAAM,WAAW,GAAG,6BAA6B,CAAC,eAAe,CAAC,CAAC;IAEnE,OAAO,CACL;QACE,yJAGI;QACJ;YACE,sDAA4B;YAC5B,gCAAK,MAAM,CAAM;YACjB,6CAAmB;YACnB;gBACE,oBAAC,SAAS,IAAC,SAAS,EAAE,iBAAiB,GAAI,CACxC,CACF;QACL,+BAAM;QACL,SAAS,IAAI,CACZ;YACE,oBAAC,KAAK,IAAC,OAAO,EAAC,SAAS,EAAC,KAAK,EAAC,2BAA2B,EAAC,QAAQ,UAChE,SAAS,CACJ;YACR,+BAAM,CACL,CACJ;QACD,oBAAC,QAAQ,IACP,KAAK,EAAE,iCAAiC,CAAC,eAAe,CAAC,EACzD,KAAK,EAAC,kBAAkB,EACxB,IAAI,EAAE,YAAY,CAAC,EAAE,GACrB;QACF,+BAAM;QACN,oBAAC,UAAU,IAAC,UAAU,EAAE,6BAA6B,WAAW,CAAC,MAAM,GAAG;YACxE,oBAAC,yBAAyB,IAAC,IAAI,EAAE,WAAW,GAAI,CACrC;QACb,+BAAM;QACN,oBAAC,MAAM,IAAC,OAAO,EAAC,MAAM,EAAC,OAAO,EAAE,GAAG,EAAE,CAAC,wBAAwB,CAAC,eAAe,CAAC,EAAE,QAAQ,iBAEhF,CACR,CACJ,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,iCAAiC,CAAC","sourcesContent":["import * as React from 'react';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { Timestamp } from '@console/internal/components/utils';\nimport { Progress, ProgressSize, Alert, Expandable, Button } from '@patternfly/react-core';\nimport {\n  getNodeMaintenanceReason,\n  getNodeMaintenanceCreationTimestamp,\n  getNodeMaintenanceProgressPercent,\n  getNodeMaintenanceLastError,\n  getNodeMaintenancePendingPods,\n} from '../../selectors';\nimport stopNodeMaintenanceModal from '../modals/StopNodeMaintenanceModal';\nimport MaintenancePopoverPodList from './MaintenancePopoverPodList';\n\ntype StartingMaintenancePopoverContentProps = {\n  nodeMaintenance: K8sResourceKind;\n};\n\nconst StartingMaintenancePopoverContent: React.FC<StartingMaintenancePopoverContentProps> = ({\n  nodeMaintenance,\n}) => {\n  const reason = getNodeMaintenanceReason(nodeMaintenance);\n  const creationTimestamp = getNodeMaintenanceCreationTimestamp(nodeMaintenance);\n  const lastError = getNodeMaintenanceLastError(nodeMaintenance);\n  const pendingPods = getNodeMaintenancePendingPods(nodeMaintenance);\n\n  return (\n    <>\n      <p>\n        Node is entering maintenance. The cluster will automatically rebuild node&apos;s data 30\n        minutes after entering maintenance.\n      </p>\n      <dl>\n        <dt>Maintenance reason:</dt>\n        <dd>{reason}</dd>\n        <dt>Requested:</dt>\n        <dd>\n          <Timestamp timestamp={creationTimestamp} />\n        </dd>\n      </dl>\n      <br />\n      {lastError && (\n        <>\n          <Alert variant=\"warning\" title=\"Workloads failing to move\" isInline>\n            {lastError}\n          </Alert>\n          <br />\n        </>\n      )}\n      <Progress\n        value={getNodeMaintenanceProgressPercent(nodeMaintenance)}\n        title=\"Moving workloads\"\n        size={ProgressSize.sm}\n      />\n      <br />\n      <Expandable toggleText={`Show remaining workloads (${pendingPods.length})`}>\n        <MaintenancePopoverPodList pods={pendingPods} />\n      </Expandable>\n      <br />\n      <Button variant=\"link\" onClick={() => stopNodeMaintenanceModal(nodeMaintenance)} isInline>\n        Stop\n      </Button>\n    </>\n  );\n};\n\nexport default StartingMaintenancePopoverContent;\n"]}]}