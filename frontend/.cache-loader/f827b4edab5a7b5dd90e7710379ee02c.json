{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vmi-migration/combined.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vmi-migration/combined.ts","mtime":1615298458670},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { getNamespace } from '@console/shared/src/selectors';\nimport { getMigrationVMIName, isMigrating } from './selectors';\nexport const findVMIMigration = (name, namespace, migrations) => {\n    if (!migrations) {\n        return null;\n    }\n    return migrations\n        .filter((m) => getNamespace(m) === namespace && getMigrationVMIName(m) === name)\n        .find(isMigrating);\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vmi-migration/combined.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vmi-migration/combined.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,YAAY,EAAE,MAAM,+BAA+B,CAAC;AAE7D,OAAO,EAAE,mBAAmB,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;AAE/D,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAC9B,IAAY,EACZ,SAAiB,EACjB,UAA8B,EAC9B,EAAE;IACF,IAAI,CAAC,UAAU,EAAE;QACf,OAAO,IAAI,CAAC;KACb;IAED,OAAO,UAAU;SACd,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC,KAAK,SAAS,IAAI,mBAAmB,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC;SAC/E,IAAI,CAAC,WAAW,CAAC,CAAC;AACvB,CAAC,CAAC","sourcesContent":["import { getNamespace } from '@console/shared/src/selectors';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { getMigrationVMIName, isMigrating } from './selectors';\n\nexport const findVMIMigration = (\n  name: string,\n  namespace: string,\n  migrations?: K8sResourceKind[],\n) => {\n  if (!migrations) {\n    return null;\n  }\n\n  return migrations\n    .filter((m) => getNamespace(m) === namespace && getMigrationVMIName(m) === name)\n    .find(isMigrating);\n};\n"]}]}