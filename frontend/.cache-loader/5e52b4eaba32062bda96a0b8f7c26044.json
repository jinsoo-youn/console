{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/sidebars/explore-type-sidebar.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/sidebars/explore-type-sidebar.tsx","mtime":1615298458740},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Breadcrumb, BreadcrumbItem, Button } from '@patternfly/react-core';\nimport { getDefinitionKey, getStoredSwagger, getSwaggerPath, } from '../../module/k8s';\nimport { CamelCaseWrap, EmptyBox, LinkifyExternal } from '../utils';\nconst getRef = (definition) => {\n    const ref = definition.$ref || _.get(definition, 'items.$ref');\n    const re = /^#\\/definitions\\//;\n    // Only follow JSON pointers, not external URI references.\n    return ref && re.test(ref) ? ref.replace(re, '') : null;\n};\nexport const ExploreType = (props) => {\n    // Track the previously selected items to build breadcrumbs. Each history\n    // entry contains the name, description, and path to the definition in the\n    // OpenAPI document.\n    const [drilldownHistory, setDrilldownHistory] = React.useState([]);\n    const { kindObj } = props;\n    if (!kindObj) {\n        return null;\n    }\n    const allDefinitions = getStoredSwagger();\n    if (!allDefinitions) {\n        return null;\n    }\n    const currentSelection = _.last(drilldownHistory);\n    // Show the current selected property or the top-level definition for the kind.\n    const currentPath = currentSelection\n        ? currentSelection.path\n        : [getDefinitionKey(kindObj, allDefinitions)];\n    const currentDefinition = _.get(allDefinitions, currentPath) || {};\n    const currentProperties = _.get(currentDefinition, 'properties') || _.get(currentDefinition, 'items.properties');\n    // Prefer the description saved in `currentSelection`. It won't always be defined in the definition itself.\n    const description = currentSelection\n        ? currentSelection.description\n        : currentDefinition.description;\n    const required = new Set(currentDefinition.required || []);\n    const breadcrumbs = drilldownHistory.length\n        ? [kindObj.kind, ..._.map(drilldownHistory, 'name')]\n        : [];\n    const drilldown = (e, name, desc, path) => {\n        e.preventDefault();\n        setDrilldownHistory([...drilldownHistory, { name, description: desc, path }]);\n        if (props.scrollTop) {\n            props.scrollTop();\n        }\n    };\n    const breadcrumbClicked = (e, i) => {\n        e.preventDefault();\n        setDrilldownHistory(_.take(drilldownHistory, i));\n    };\n    // Get the path in the swagger document to additional property details for drilldown.\n    // This can be\n    // - A reference to another top-level definition\n    // - Inline property declartions\n    // - Inline property declartions for array items\n    const getDrilldownPath = (name) => {\n        const path = getSwaggerPath(allDefinitions, currentPath, name, true);\n        // Only allow drilldown if the reference has additional properties to explore.\n        const child = _.get(allDefinitions, path);\n        return _.has(child, 'properties') || _.has(child, 'items.properties') ? path : null;\n    };\n    // Get the type to display for a property reference.\n    const getTypeForRef = (ref) => _.get(allDefinitions, [ref, 'format']) || _.get(allDefinitions, [ref, 'type']);\n    return (React.createElement(React.Fragment, null,\n        !_.isEmpty(breadcrumbs) && (React.createElement(Breadcrumb, { className: \"pf-c-breadcrumb--no-padding-top co-break-word\" }, breadcrumbs.map((crumb, i) => {\n            const isLast = i === breadcrumbs.length - 1;\n            return (React.createElement(BreadcrumbItem, { key: i, isActive: isLast }, isLast ? (crumb) : (React.createElement(Button, { type: \"button\", onClick: (e) => breadcrumbClicked(e, i), isInline: true, variant: \"link\" }, crumb))));\n        }))),\n        description && (React.createElement(\"p\", { className: \"co-break-word co-pre-wrap\" },\n            React.createElement(LinkifyExternal, null, description))),\n        _.isEmpty(currentProperties) ? (React.createElement(EmptyBox, { label: \"Properties\" })) : (React.createElement(\"ul\", { className: \"co-resource-sidebar-list\" }, _.map(currentProperties, (definition, name) => {\n            const path = getDrilldownPath(name);\n            const definitionType = definition.type || getTypeForRef(getRef(definition));\n            return (React.createElement(\"li\", { key: name, className: \"co-resource-sidebar-item\" },\n                React.createElement(\"h5\", { className: \"co-resource-sidebar-item__header co-break-word\" },\n                    React.createElement(CamelCaseWrap, { value: name }),\n                    \"\\u00A0\",\n                    React.createElement(\"small\", null,\n                        React.createElement(\"span\", { className: \"co-break-word\" }, definitionType),\n                        required.has(name) && React.createElement(React.Fragment, null, \" \\u2013 required\"))),\n                definition.description && (React.createElement(\"p\", { className: \"co-break-word co-pre-wrap\" },\n                    React.createElement(LinkifyExternal, null, definition.description))),\n                path && (React.createElement(Button, { type: \"button\", onClick: (e) => drilldown(e, name, definition.description, path), isInline: true, variant: \"link\" }, \"View details\"))));\n        })))));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/sidebars/explore-type-sidebar.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/sidebars/explore-type-sidebar.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Breadcrumb, BreadcrumbItem, Button } from '@patternfly/react-core';\n\nimport {\n  getDefinitionKey,\n  getStoredSwagger,\n  getSwaggerPath,\n  K8sKind,\n  SwaggerDefinition,\n  SwaggerDefinitions,\n} from '../../module/k8s';\nimport { CamelCaseWrap, EmptyBox, LinkifyExternal } from '../utils';\n\nconst getRef = (definition: SwaggerDefinition): string => {\n  const ref = definition.$ref || _.get(definition, 'items.$ref');\n  const re = /^#\\/definitions\\//;\n  // Only follow JSON pointers, not external URI references.\n  return ref && re.test(ref) ? ref.replace(re, '') : null;\n};\n\nexport const ExploreType: React.FC<ExploreTypeProps> = (props) => {\n  // Track the previously selected items to build breadcrumbs. Each history\n  // entry contains the name, description, and path to the definition in the\n  // OpenAPI document.\n  const [drilldownHistory, setDrilldownHistory] = React.useState([]);\n  const { kindObj } = props;\n  if (!kindObj) {\n    return null;\n  }\n\n  const allDefinitions: SwaggerDefinitions = getStoredSwagger();\n  if (!allDefinitions) {\n    return null;\n  }\n  const currentSelection = _.last(drilldownHistory);\n  // Show the current selected property or the top-level definition for the kind.\n  const currentPath = currentSelection\n    ? currentSelection.path\n    : [getDefinitionKey(kindObj, allDefinitions)];\n  const currentDefinition: SwaggerDefinition = _.get(allDefinitions, currentPath) || {};\n  const currentProperties =\n    _.get(currentDefinition, 'properties') || _.get(currentDefinition, 'items.properties');\n\n  // Prefer the description saved in `currentSelection`. It won't always be defined in the definition itself.\n  const description = currentSelection\n    ? currentSelection.description\n    : currentDefinition.description;\n  const required = new Set(currentDefinition.required || []);\n  const breadcrumbs = drilldownHistory.length\n    ? [kindObj.kind, ..._.map(drilldownHistory, 'name')]\n    : [];\n\n  const drilldown = (\n    e: React.MouseEvent<HTMLButtonElement>,\n    name: string,\n    desc: string,\n    path: string[],\n  ) => {\n    e.preventDefault();\n    setDrilldownHistory([...drilldownHistory, { name, description: desc, path }]);\n    if (props.scrollTop) {\n      props.scrollTop();\n    }\n  };\n\n  const breadcrumbClicked = (e: React.MouseEvent<HTMLButtonElement>, i: number) => {\n    e.preventDefault();\n    setDrilldownHistory(_.take(drilldownHistory, i));\n  };\n\n  // Get the path in the swagger document to additional property details for drilldown.\n  // This can be\n  // - A reference to another top-level definition\n  // - Inline property declartions\n  // - Inline property declartions for array items\n  const getDrilldownPath = (name: string): string[] => {\n    const path = getSwaggerPath(allDefinitions, currentPath, name, true);\n    // Only allow drilldown if the reference has additional properties to explore.\n    const child = _.get(allDefinitions, path) as SwaggerDefinition;\n    return _.has(child, 'properties') || _.has(child, 'items.properties') ? path : null;\n  };\n\n  // Get the type to display for a property reference.\n  const getTypeForRef = (ref: string): string =>\n    _.get(allDefinitions, [ref, 'format']) || _.get(allDefinitions, [ref, 'type']);\n\n  return (\n    <>\n      {!_.isEmpty(breadcrumbs) && (\n        <Breadcrumb className=\"pf-c-breadcrumb--no-padding-top co-break-word\">\n          {breadcrumbs.map((crumb, i) => {\n            const isLast = i === breadcrumbs.length - 1;\n            return (\n              <BreadcrumbItem key={i} isActive={isLast}>\n                {isLast ? (\n                  crumb\n                ) : (\n                  <Button\n                    type=\"button\"\n                    onClick={(e) => breadcrumbClicked(e, i)}\n                    isInline\n                    variant=\"link\"\n                  >\n                    {crumb}\n                  </Button>\n                )}\n              </BreadcrumbItem>\n            );\n          })}\n        </Breadcrumb>\n      )}\n      {description && (\n        <p className=\"co-break-word co-pre-wrap\">\n          <LinkifyExternal>{description}</LinkifyExternal>\n        </p>\n      )}\n      {_.isEmpty(currentProperties) ? (\n        <EmptyBox label=\"Properties\" />\n      ) : (\n        <ul className=\"co-resource-sidebar-list\">\n          {_.map(currentProperties, (definition: SwaggerDefinition, name: string) => {\n            const path = getDrilldownPath(name);\n            const definitionType = definition.type || getTypeForRef(getRef(definition));\n            return (\n              <li key={name} className=\"co-resource-sidebar-item\">\n                <h5 className=\"co-resource-sidebar-item__header co-break-word\">\n                  <CamelCaseWrap value={name} />\n                  &nbsp;\n                  <small>\n                    <span className=\"co-break-word\">{definitionType}</span>\n                    {required.has(name) && <> &ndash; required</>}\n                  </small>\n                </h5>\n                {definition.description && (\n                  <p className=\"co-break-word co-pre-wrap\">\n                    <LinkifyExternal>{definition.description}</LinkifyExternal>\n                  </p>\n                )}\n                {path && (\n                  <Button\n                    type=\"button\"\n                    onClick={(e) => drilldown(e, name, definition.description, path)}\n                    isInline\n                    variant=\"link\"\n                  >\n                    View details\n                  </Button>\n                )}\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n};\n\ntype ExploreTypeProps = {\n  kindObj: K8sKind;\n  scrollTop?: () => void;\n};\n"]}]}