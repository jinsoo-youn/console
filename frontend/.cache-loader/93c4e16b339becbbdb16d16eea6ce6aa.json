{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/rbac.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/rbac.tsx","mtime":1616735742480},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport * as _ from 'lodash-es';\nimport { getName, getNamespace } from '@console/shared';\nimport store from '../../redux';\nimport { impersonateStateToProps } from '../../reducers/ui';\nimport { k8sCreate, } from '../../module/k8s';\nimport { ProjectModel, SelfSubjectAccessReviewModel } from '../../models';\nimport { useSafetyFirst } from '../../components/safety-first';\n// Memoize the result so we only make the request once for each access review.\n// This does mean that the user will have to refresh the page to see updates.\n// Accept an `impersonateKey` parameter to include in the cache key even though\n// it's not used in the function body. (Impersonate headers are added\n// automatically by `k8sCreate`.) This function takes in the destructured\n// resource attributes so that the cache keys are stable. (`JSON.stringify` is\n// not guaranteed to give the same result for equivalent objects.)\nconst checkAccessInternal = _.memoize((group, resource, subresource, verb, name, namespace, \n// eslint-disable-next-line no-unused-vars, @typescript-eslint/no-unused-vars\nimpersonateKey) => {\n    // Projects are a special case. `namespace` must be set to the project name\n    // even though it's a cluster-scoped resource.\n    const reviewNamespace = group === ProjectModel.apiGroup && resource === ProjectModel.plural ? name : namespace;\n    const ssar = {\n        apiVersion: 'authorization.k8s.io/v1',\n        kind: 'SelfSubjectAccessReview',\n        spec: {\n            resourceAttributes: {\n                group,\n                resource,\n                subresource,\n                verb,\n                name,\n                namespace: reviewNamespace,\n            },\n        },\n    };\n    return k8sCreate(SelfSubjectAccessReviewModel, ssar);\n}, (...args) => args.join('~'));\nconst getImpersonateKey = (impersonate) => {\n    impersonate = impersonate || store.getState().UI.get('impersonate');\n    return impersonate ? `${impersonate.kind}~{impersonate.user}` : '';\n};\nexport const checkAccess = (resourceAttributes, impersonate) => {\n    // Destructure the attributes with defaults so we can create a stable cache key.\n    const { group = '', resource = '', subresource = '', verb = '', name = '', namespace = '', } = resourceAttributes || {};\n    return checkAccessInternal(group, resource, subresource, verb, name, namespace, getImpersonateKey(impersonate));\n};\nexport const useAccessReview2 = (resourceAttributes, impersonate) => {\n    const [loading, setLoading] = useSafetyFirst(true);\n    const [isAllowed, setAllowed] = useSafetyFirst(false);\n    // Destructure the attributes to pass them as dependencies to `useEffect`,\n    // which doesn't do deep comparison of object dependencies.\n    const { group = '', resource = '', subresource = '', verb = '', name = '', namespace = '', } = resourceAttributes;\n    const impersonateKey = getImpersonateKey(impersonate);\n    React.useEffect(() => {\n        checkAccessInternal(group, resource, subresource, verb, name, namespace, impersonateKey)\n            .then((result) => {\n            setAllowed(result.status.allowed);\n            setLoading(false);\n        })\n            .catch((e) => {\n            // eslint-disable-next-line no-console\n            console.warn('SelfSubjectAccessReview failed', e);\n            // Default to enabling the action if the access review fails so that we\n            // don't incorrectly block users from actions they can perform. The server\n            // still enforces access control.\n            setAllowed(true);\n            setLoading(false);\n        });\n    }, [setLoading, setAllowed, group, resource, subresource, verb, name, namespace, impersonateKey]);\n    return [isAllowed, loading];\n};\nexport const useAccessReview = (resourceAttributes, impersonate) => useAccessReview2(resourceAttributes, impersonate)[0];\nconst RequireCreatePermission_ = ({ model, namespace, impersonate, children, }) => {\n    const isAllowed = useAccessReview({\n        group: model.apiGroup,\n        resource: model.plural,\n        verb: 'create',\n        namespace,\n    }, impersonate);\n    return isAllowed ? React.createElement(React.Fragment, null, children) : null;\n};\nexport const RequireCreatePermission = connect(impersonateStateToProps)(RequireCreatePermission_);\nRequireCreatePermission.displayName = 'RequireCreatePermission';\nexport const asAccessReview = (kindObj, obj, verb) => {\n    if (!obj) {\n        console.warn('review obj should not be null'); // eslint-disable-line no-console\n        return null;\n    }\n    return {\n        group: kindObj.apiGroup,\n        resource: kindObj.plural,\n        name: getName(obj),\n        namespace: getNamespace(obj),\n        verb,\n    };\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/rbac.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/rbac.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport * as _ from 'lodash-es';\n\nimport { getName, getNamespace } from '@console/shared';\n\nimport store from '../../redux';\nimport { impersonateStateToProps } from '../../reducers/ui';\nimport {\n  AccessReviewResourceAttributes,\n  k8sCreate,\n  K8sKind,\n  K8sResourceKind,\n  K8sVerb,\n  SelfSubjectAccessReviewKind,\n} from '../../module/k8s';\nimport { ProjectModel, SelfSubjectAccessReviewModel } from '../../models';\nimport { useSafetyFirst } from '../../components/safety-first';\n\n// Memoize the result so we only make the request once for each access review.\n// This does mean that the user will have to refresh the page to see updates.\n// Accept an `impersonateKey` parameter to include in the cache key even though\n// it's not used in the function body. (Impersonate headers are added\n// automatically by `k8sCreate`.) This function takes in the destructured\n// resource attributes so that the cache keys are stable. (`JSON.stringify` is\n// not guaranteed to give the same result for equivalent objects.)\nconst checkAccessInternal = _.memoize(\n  (\n    group: string,\n    resource: string,\n    subresource: string,\n    verb: K8sVerb,\n    name: string,\n    namespace: string,\n    // eslint-disable-next-line no-unused-vars, @typescript-eslint/no-unused-vars\n    impersonateKey: string,\n  ): Promise<SelfSubjectAccessReviewKind> => {\n    // Projects are a special case. `namespace` must be set to the project name\n    // even though it's a cluster-scoped resource.\n    const reviewNamespace =\n      group === ProjectModel.apiGroup && resource === ProjectModel.plural ? name : namespace;\n    const ssar: SelfSubjectAccessReviewKind = {\n      apiVersion: 'authorization.k8s.io/v1',\n      kind: 'SelfSubjectAccessReview',\n      spec: {\n        resourceAttributes: {\n          group,\n          resource,\n          subresource,\n          verb,\n          name,\n          namespace: reviewNamespace,\n        },\n      },\n    };\n    return k8sCreate(SelfSubjectAccessReviewModel, ssar);\n  },\n  (...args) => args.join('~'),\n);\n\nconst getImpersonateKey = (impersonate): string => {\n  impersonate = impersonate || store.getState().UI.get('impersonate');\n  return impersonate ? `${impersonate.kind}~{impersonate.user}` : '';\n};\n\nexport const checkAccess = (\n  resourceAttributes: AccessReviewResourceAttributes,\n  impersonate?,\n): Promise<SelfSubjectAccessReviewKind> => {\n  // Destructure the attributes with defaults so we can create a stable cache key.\n  const {\n    group = '',\n    resource = '',\n    subresource = '',\n    verb = '' as K8sVerb,\n    name = '',\n    namespace = '',\n  } = resourceAttributes || {};\n  return checkAccessInternal(\n    group,\n    resource,\n    subresource,\n    verb,\n    name,\n    namespace,\n    getImpersonateKey(impersonate),\n  );\n};\n\nexport const useAccessReview2 = (\n  resourceAttributes: AccessReviewResourceAttributes,\n  impersonate?,\n): [boolean, boolean] => {\n  const [loading, setLoading] = useSafetyFirst(true);\n  const [isAllowed, setAllowed] = useSafetyFirst(false);\n  // Destructure the attributes to pass them as dependencies to `useEffect`,\n  // which doesn't do deep comparison of object dependencies.\n  const {\n    group = '',\n    resource = '',\n    subresource = '',\n    verb = '' as K8sVerb,\n    name = '',\n    namespace = '',\n  } = resourceAttributes;\n  const impersonateKey = getImpersonateKey(impersonate);\n  React.useEffect(() => {\n    checkAccessInternal(group, resource, subresource, verb, name, namespace, impersonateKey)\n      .then((result: SelfSubjectAccessReviewKind) => {\n        setAllowed(result.status.allowed);\n        setLoading(false);\n      })\n      .catch((e) => {\n        // eslint-disable-next-line no-console\n        console.warn('SelfSubjectAccessReview failed', e);\n        // Default to enabling the action if the access review fails so that we\n        // don't incorrectly block users from actions they can perform. The server\n        // still enforces access control.\n        setAllowed(true);\n        setLoading(false);\n      });\n  }, [setLoading, setAllowed, group, resource, subresource, verb, name, namespace, impersonateKey]);\n\n  return [isAllowed, loading];\n};\n\nexport const useAccessReview = (\n  resourceAttributes: AccessReviewResourceAttributes,\n  impersonate?,\n): boolean => useAccessReview2(resourceAttributes, impersonate)[0];\n\nconst RequireCreatePermission_: React.FC<RequireCreatePermissionProps> = ({\n  model,\n  namespace,\n  impersonate,\n  children,\n}) => {\n  const isAllowed = useAccessReview(\n    {\n      group: model.apiGroup,\n      resource: model.plural,\n      verb: 'create',\n      namespace,\n    },\n    impersonate,\n  );\n  return isAllowed ? <>{children}</> : null;\n};\nexport const RequireCreatePermission = connect(impersonateStateToProps)(RequireCreatePermission_);\nRequireCreatePermission.displayName = 'RequireCreatePermission';\n\ntype RequireCreatePermissionProps = {\n  model: K8sKind;\n  namespace?: string;\n  impersonate?: string;\n  children: React.ReactNode;\n};\n\nexport const asAccessReview = (\n  kindObj: K8sKind,\n  obj: K8sResourceKind,\n  verb: K8sVerb,\n): AccessReviewResourceAttributes => {\n  if (!obj) {\n    console.warn('review obj should not be null'); // eslint-disable-line no-console\n    return null;\n  }\n  return {\n    group: kindObj.apiGroup,\n    resource: kindObj.plural,\n    name: getName(obj),\n    namespace: getNamespace(obj),\n    verb,\n  };\n};\n"]}]}