{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/service-catalog/create-instance.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/service-catalog/create-instance.tsx","mtime":1616735742480},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Helmet } from 'react-helmet';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { ServiceInstanceModel, ClusterServiceClassModel, ClusterServicePlanModel, } from '../../models';\nimport { ClusterServiceClassInfo } from '../cluster-service-class-info';\nimport { ButtonBar } from '../utils/button-bar';\nimport { k8sCreate, referenceForModel } from '../../module/k8s';\nimport { createParametersSecret, getInstanceCreateParametersForm, getInstanceCreateSchema, getUISchema, ServiceCatalogParametersForm, } from './schema-form';\nimport { Firehose, history, NsDropdown, PageHeading, resourcePathFromModel, StatusBox, } from '../utils';\nconst PARAMETERS_SECRET_KEY = 'parameters';\nconst getAvailablePlans = (plans) => _.reject(plans.data, 'status.removedFromBrokerCatalog');\nclass CreateInstance extends React.Component {\n    constructor(props) {\n        super(props);\n        this.onNamespaceChange = (namespace) => {\n            this.setState({ namespace });\n        };\n        this.onNameChange = (event) => {\n            this.setState({ name: event.currentTarget.value });\n        };\n        this.onPlanChange = (event) => {\n            this.setState({ plan: event.currentTarget.value });\n        };\n        this.createInstance = (secretName) => {\n            const parametersFrom = secretName\n                ? [{ secretKeyRef: { name: secretName, key: PARAMETERS_SECRET_KEY } }]\n                : [];\n            const serviceInstance = {\n                apiVersion: 'servicecatalog.k8s.io/v1beta1',\n                kind: 'ServiceInstance',\n                metadata: {\n                    name: this.state.name,\n                    namespace: this.state.namespace,\n                },\n                spec: {\n                    clusterServiceClassExternalName: _.get(this.props.obj, 'data.spec.externalName'),\n                    clusterServicePlanExternalName: this.state.plan,\n                    parametersFrom,\n                },\n            };\n            return k8sCreate(ServiceInstanceModel, serviceInstance);\n        };\n        this.onFormChange = ({ formData }) => this.setState({ formData });\n        this.save = ({ formData }) => {\n            const { name, namespace, plan } = this.state;\n            if (!name || !namespace || !plan) {\n                this.setState({ error: 'Please complete all fields.' });\n                return;\n            }\n            this.setState({ inProgress: true });\n            const secretName = _.isEmpty(formData) ? null : `${this.state.name}-parameters`;\n            // Create the instance first so we can set an ownerRef from the parameters secret to the instance.\n            this.createInstance(secretName)\n                .then((instance) => secretName\n                ? createParametersSecret(secretName, PARAMETERS_SECRET_KEY, formData, instance)\n                : null)\n                .then(() => {\n                this.setState({ inProgress: false });\n                history.push(resourcePathFromModel(ServiceInstanceModel, name, namespace));\n            }, (err) => this.setState({ error: err.message, inProgress: false }));\n        };\n        const { preselectedNamespace: namespace = '' } = this.props;\n        this.state = {\n            name: '',\n            namespace,\n            plan: '',\n            formData: {},\n            inProgress: false,\n        };\n    }\n    static getDerivedStateFromProps(props, state) {\n        const { name, plan } = state;\n        const { obj, plans } = props;\n        const newState = {};\n        const defaultName = _.get(obj, 'data.spec.externalName');\n        if (!name && defaultName) {\n            newState.name = defaultName;\n        }\n        const defaultPlan = _.get(getAvailablePlans(plans), '[0].spec.externalName');\n        if (!plan && defaultPlan) {\n            newState.plan = defaultPlan;\n        }\n        return newState;\n    }\n    render() {\n        const { obj, plans, loaded, loadError } = this.props;\n        const serviceClass = _.get(obj, 'data');\n        const title = 'Create Service Instance';\n        const { plan: selectedPlanName } = this.state;\n        const availablePlans = getAvailablePlans(plans);\n        const selectedPlan = _.find(availablePlans, { spec: { externalName: selectedPlanName } });\n        const schema = getInstanceCreateSchema(selectedPlan);\n        const parametersForm = getInstanceCreateParametersForm(selectedPlan);\n        const uiSchema = getUISchema(parametersForm);\n        const planOptions = _.map(availablePlans, (plan) => {\n            return (React.createElement(\"div\", { className: \"radio co-create-service-instance__plan\", key: plan.spec.externalName },\n                React.createElement(\"label\", null,\n                    React.createElement(\"input\", { type: \"radio\", name: \"plan\", id: \"plan\", value: plan.spec.externalName, checked: selectedPlanName === plan.spec.externalName, onChange: this.onPlanChange }),\n                    _.get(plan.spec, ['externalMetadata', 'displayName']) || plan.spec.externalName,\n                    plan.spec.description && React.createElement(\"div\", { className: \"text-muted\" }, plan.spec.description))));\n        });\n        return (React.createElement(React.Fragment, null,\n            React.createElement(Helmet, null,\n                React.createElement(\"title\", null, title)),\n            React.createElement(StatusBox, { data: serviceClass, loaded: loaded, loadError: loadError, label: \"Service Class\" },\n                React.createElement(PageHeading, { title: title }),\n                React.createElement(\"div\", { className: \"co-m-pane__body co-create-service-instance\" },\n                    React.createElement(\"div\", { className: \"row\" },\n                        React.createElement(\"div\", { className: \"col-md-7 col-md-push-5 co-catalog-item-info\" },\n                            React.createElement(ClusterServiceClassInfo, { obj: serviceClass })),\n                        React.createElement(\"div\", { className: \"col-md-5 col-md-pull-7\" },\n                            React.createElement(\"form\", { className: \"co-create-service-instance\" },\n                                React.createElement(\"div\", { className: \"form-group co-create-service-instance__namespace\" },\n                                    React.createElement(\"label\", { className: \"control-label co-required\", htmlFor: \"dropdown-selectbox\" }, \"Namespace\"),\n                                    React.createElement(NsDropdown, { selectedKey: this.state.namespace, onChange: this.onNamespaceChange, id: \"dropdown-selectbox\" })),\n                                React.createElement(\"div\", { className: \"form-group co-create-service-instance__name\" },\n                                    React.createElement(\"label\", { className: \"control-label co-required\", htmlFor: \"name\" }, \"Service Instance Name\"),\n                                    React.createElement(\"input\", { className: \"pf-c-form-control\", type: \"text\", onChange: this.onNameChange, value: this.state.name, id: \"name\", required: true })),\n                                React.createElement(\"div\", { className: \"form-group co-create-service-instance__plans\" },\n                                    React.createElement(\"label\", { className: \"control-label\" }, \"Plans\"),\n                                    _.isEmpty(availablePlans) ? (React.createElement(\"p\", null, \"There are no plans currently available for this service.\")) : (planOptions))),\n                            React.createElement(ServiceCatalogParametersForm, { schema: schema, uiSchema: uiSchema, onSubmit: this.save, formData: this.state.formData, onChange: this.onFormChange },\n                                React.createElement(ButtonBar, { errorMessage: this.state.error, inProgress: this.state.inProgress },\n                                    React.createElement(ActionGroup, { className: \"pf-c-form\" },\n                                        React.createElement(Button, { type: \"submit\", variant: \"primary\" }, \"Create\"),\n                                        React.createElement(Button, { type: \"button\", variant: \"secondary\", onClick: history.goBack }, \"Cancel\"))))))))));\n    }\n}\nexport const CreateInstancePage = (props) => {\n    const searchParams = new URLSearchParams(location.search);\n    const name = searchParams.get('cluster-service-class');\n    const preselectedNamespace = searchParams.get('preselected-ns');\n    const resources = [\n        { kind: referenceForModel(ClusterServiceClassModel), name, isList: false, prop: 'obj' },\n        {\n            kind: referenceForModel(ClusterServicePlanModel),\n            isList: true,\n            prop: 'plans',\n            fieldSelector: `spec.clusterServiceClassRef.name=${name}`,\n        },\n    ];\n    return (React.createElement(Firehose, { resources: resources },\n        React.createElement(CreateInstance, Object.assign({ preselectedNamespace: preselectedNamespace }, props))));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/service-catalog/create-instance.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/service-catalog/create-instance.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Helmet } from 'react-helmet';\nimport { IChangeEvent, ISubmitEvent } from 'react-jsonschema-form';\nimport { ActionGroup, Button } from '@patternfly/react-core';\n\nimport {\n  ServiceInstanceModel,\n  ClusterServiceClassModel,\n  ClusterServicePlanModel,\n} from '../../models';\nimport { ClusterServiceClassInfo } from '../cluster-service-class-info';\nimport { ButtonBar } from '../utils/button-bar';\nimport { k8sCreate, K8sResourceKind, referenceForModel } from '../../module/k8s';\nimport {\n  createParametersSecret,\n  getInstanceCreateParametersForm,\n  getInstanceCreateSchema,\n  getUISchema,\n  ServiceCatalogParametersForm,\n} from './schema-form';\nimport {\n  Firehose,\n  history,\n  NsDropdown,\n  PageHeading,\n  resourcePathFromModel,\n  StatusBox,\n} from '../utils';\n\nconst PARAMETERS_SECRET_KEY = 'parameters';\n\nconst getAvailablePlans = (plans: any): any[] =>\n  _.reject(plans.data, 'status.removedFromBrokerCatalog');\n\nclass CreateInstance extends React.Component<CreateInstanceProps, CreateInstanceState> {\n  constructor(props) {\n    super(props);\n\n    const { preselectedNamespace: namespace = '' } = this.props;\n    this.state = {\n      name: '',\n      namespace,\n      plan: '',\n      formData: {},\n      inProgress: false,\n    };\n  }\n\n  static getDerivedStateFromProps(props: CreateInstanceProps, state: CreateInstanceState) {\n    const { name, plan } = state;\n    const { obj, plans } = props;\n    const newState: any = {};\n\n    const defaultName = _.get(obj, 'data.spec.externalName');\n    if (!name && defaultName) {\n      newState.name = defaultName;\n    }\n\n    const defaultPlan = _.get(getAvailablePlans(plans), '[0].spec.externalName');\n    if (!plan && defaultPlan) {\n      newState.plan = defaultPlan;\n    }\n\n    return newState;\n  }\n\n  onNamespaceChange = (namespace: string) => {\n    this.setState({ namespace });\n  };\n\n  onNameChange: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    this.setState({ name: event.currentTarget.value });\n  };\n\n  onPlanChange: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    this.setState({ plan: event.currentTarget.value });\n  };\n\n  createInstance = (secretName: string): Promise<K8sResourceKind> => {\n    const parametersFrom = secretName\n      ? [{ secretKeyRef: { name: secretName, key: PARAMETERS_SECRET_KEY } }]\n      : [];\n    const serviceInstance: K8sResourceKind = {\n      apiVersion: 'servicecatalog.k8s.io/v1beta1',\n      kind: 'ServiceInstance',\n      metadata: {\n        name: this.state.name,\n        namespace: this.state.namespace,\n      },\n      spec: {\n        clusterServiceClassExternalName: _.get(this.props.obj, 'data.spec.externalName'),\n        clusterServicePlanExternalName: this.state.plan,\n        parametersFrom,\n      },\n    };\n\n    return k8sCreate(ServiceInstanceModel, serviceInstance);\n  };\n\n  onFormChange = ({ formData }: IChangeEvent) => this.setState({ formData });\n\n  save = ({ formData }: ISubmitEvent<any>) => {\n    const { name, namespace, plan } = this.state;\n    if (!name || !namespace || !plan) {\n      this.setState({ error: 'Please complete all fields.' });\n      return;\n    }\n\n    this.setState({ inProgress: true });\n    const secretName = _.isEmpty(formData) ? null : `${this.state.name}-parameters`;\n\n    // Create the instance first so we can set an ownerRef from the parameters secret to the instance.\n    this.createInstance(secretName)\n      .then((instance) =>\n        secretName\n          ? createParametersSecret(secretName, PARAMETERS_SECRET_KEY, formData, instance)\n          : null,\n      )\n      .then(\n        () => {\n          this.setState({ inProgress: false });\n          history.push(resourcePathFromModel(ServiceInstanceModel, name, namespace));\n        },\n        (err) => this.setState({ error: err.message, inProgress: false }),\n      );\n  };\n\n  render() {\n    const { obj, plans, loaded, loadError } = this.props;\n\n    const serviceClass = _.get(obj, 'data');\n    const title = 'Create Service Instance';\n\n    const { plan: selectedPlanName } = this.state;\n    const availablePlans = getAvailablePlans(plans);\n    const selectedPlan = _.find(availablePlans, { spec: { externalName: selectedPlanName } });\n    const schema = getInstanceCreateSchema(selectedPlan);\n    const parametersForm = getInstanceCreateParametersForm(selectedPlan);\n    const uiSchema = getUISchema(parametersForm);\n\n    const planOptions = _.map(availablePlans, (plan) => {\n      return (\n        <div className=\"radio co-create-service-instance__plan\" key={plan.spec.externalName}>\n          <label>\n            <input\n              type=\"radio\"\n              name=\"plan\"\n              id=\"plan\"\n              value={plan.spec.externalName}\n              checked={selectedPlanName === plan.spec.externalName}\n              onChange={this.onPlanChange}\n            />\n            {_.get(plan.spec, ['externalMetadata', 'displayName']) || plan.spec.externalName}\n            {plan.spec.description && <div className=\"text-muted\">{plan.spec.description}</div>}\n          </label>\n        </div>\n      );\n    });\n\n    return (\n      <>\n        <Helmet>\n          <title>{title}</title>\n        </Helmet>\n        <StatusBox data={serviceClass} loaded={loaded} loadError={loadError} label=\"Service Class\">\n          <PageHeading title={title} />\n          <div className=\"co-m-pane__body co-create-service-instance\">\n            <div className=\"row\">\n              <div className=\"col-md-7 col-md-push-5 co-catalog-item-info\">\n                <ClusterServiceClassInfo obj={serviceClass} />\n              </div>\n              <div className=\"col-md-5 col-md-pull-7\">\n                <form className=\"co-create-service-instance\">\n                  <div className=\"form-group co-create-service-instance__namespace\">\n                    <label className=\"control-label co-required\" htmlFor=\"dropdown-selectbox\">\n                      Namespace\n                    </label>\n                    <NsDropdown\n                      selectedKey={this.state.namespace}\n                      onChange={this.onNamespaceChange}\n                      id=\"dropdown-selectbox\"\n                    />\n                  </div>\n                  <div className=\"form-group co-create-service-instance__name\">\n                    <label className=\"control-label co-required\" htmlFor=\"name\">\n                      Service Instance Name\n                    </label>\n                    <input\n                      className=\"pf-c-form-control\"\n                      type=\"text\"\n                      onChange={this.onNameChange}\n                      value={this.state.name}\n                      id=\"name\"\n                      required\n                    />\n                  </div>\n                  <div className=\"form-group co-create-service-instance__plans\">\n                    <label className=\"control-label\">Plans</label>\n                    {_.isEmpty(availablePlans) ? (\n                      <p>There are no plans currently available for this service.</p>\n                    ) : (\n                      planOptions\n                    )}\n                  </div>\n                </form>\n                <ServiceCatalogParametersForm\n                  schema={schema}\n                  uiSchema={uiSchema}\n                  onSubmit={this.save}\n                  formData={this.state.formData}\n                  onChange={this.onFormChange}\n                >\n                  <ButtonBar errorMessage={this.state.error} inProgress={this.state.inProgress}>\n                    <ActionGroup className=\"pf-c-form\">\n                      <Button type=\"submit\" variant=\"primary\">\n                        Create\n                      </Button>\n                      <Button type=\"button\" variant=\"secondary\" onClick={history.goBack}>\n                        Cancel\n                      </Button>\n                    </ActionGroup>\n                  </ButtonBar>\n                </ServiceCatalogParametersForm>\n              </div>\n            </div>\n          </div>\n        </StatusBox>\n      </>\n    );\n  }\n}\n\nexport const CreateInstancePage = (props) => {\n  const searchParams = new URLSearchParams(location.search);\n  const name = searchParams.get('cluster-service-class');\n  const preselectedNamespace = searchParams.get('preselected-ns');\n  const resources = [\n    { kind: referenceForModel(ClusterServiceClassModel), name, isList: false, prop: 'obj' },\n    {\n      kind: referenceForModel(ClusterServicePlanModel),\n      isList: true,\n      prop: 'plans',\n      fieldSelector: `spec.clusterServiceClassRef.name=${name}`,\n    },\n  ];\n  return (\n    <Firehose resources={resources}>\n      <CreateInstance preselectedNamespace={preselectedNamespace} {...(props as any)} />\n    </Firehose>\n  );\n};\n\nexport type CreateInstanceProps = {\n  obj: any;\n  plans: any;\n  loaded: any;\n  loadError: boolean;\n  match: any;\n  preselectedNamespace: string;\n};\n\nexport type CreateInstanceState = {\n  name: string;\n  namespace: string;\n  plan: string;\n  formData: any;\n  inProgress: boolean;\n  error?: any;\n};\n"]}]}