{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/capacity-breakdown/capacity-breakdown-card.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/capacity-breakdown/capacity-breakdown-card.tsx","mtime":1616735742360},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Dropdown, humanizeBinaryBytes } from '@console/internal/components/utils';\nimport { withDashboardResources, } from '@console/internal/components/dashboard/with-dashboard-resources';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport { getInstantVectorStats } from '@console/internal/components/graphs/utils';\nimport { breakdownQueryMap, CAPACITY_BREAKDOWN_QUERIES } from '../../../../constants/queries';\nimport { PROJECTS } from '../../../../constants/index';\nimport { BreakdownCardBody } from '../breakdown-card/breakdown-body';\nimport { HeaderPrometheusViewLink } from '../breakdown-card/breakdown-header';\nimport { getStackChartStats, sortInstantVectorStats } from '../breakdown-card/utils';\nimport './capacity-breakdown-card.scss';\nconst keys = Object.keys(breakdownQueryMap);\nconst dropdownOptions = _.zipObject(keys, keys);\nconst BreakdownCard = ({ watchPrometheus, stopWatchPrometheusQuery, prometheusResults, }) => {\n    const [metricType, setMetricType] = React.useState(PROJECTS);\n    const { queries, model, metric } = breakdownQueryMap[metricType];\n    const queryKeys = Object.keys(queries);\n    React.useEffect(() => {\n        queryKeys.forEach((q) => watchPrometheus(queries[q]));\n        return () => queryKeys.forEach((key) => stopWatchPrometheusQuery(queries[key]));\n    }, [watchPrometheus, stopWatchPrometheusQuery, metricType, queryKeys, queries]);\n    const results = queryKeys.map((key) => prometheusResults.getIn([queries[key], 'data']));\n    const queriesLoadError = queryKeys.some((q) => prometheusResults.getIn([queries[q], 'loadError']));\n    const queriesDataLoaded = queryKeys.some((q) => !prometheusResults.getIn([queries[q], 'data']));\n    const humanize = humanizeBinaryBytes;\n    const top6MetricsData = getInstantVectorStats(results[0], metric);\n    const top5SortedMetricsData = sortInstantVectorStats(top6MetricsData);\n    const top5MetricsStats = getStackChartStats(top5SortedMetricsData, humanize);\n    const metricTotal = _.get(results[1], 'data.result[0].value[1]');\n    const cephAvailable = _.get(results[2], 'data.result[0].value[1]');\n    const cephUsed = _.get(results[3], 'data.result[0].value[1]');\n    const link = `topk(20, (${CAPACITY_BREAKDOWN_QUERIES[queryKeys[0]]}))`;\n    return (React.createElement(DashboardCard, null,\n        React.createElement(DashboardCardHeader, null,\n            React.createElement(DashboardCardTitle, null, \"Capacity breakdown\"),\n            React.createElement(\"div\", { className: \"ceph-capacity-breakdown-card__header\" },\n                React.createElement(HeaderPrometheusViewLink, { link: link }),\n                React.createElement(Dropdown, { items: dropdownOptions, onChange: setMetricType, selectedKey: metricType, title: metricType }))),\n        React.createElement(DashboardCardBody, { classname: \"ceph-capacity-breakdown-card__body\" },\n            React.createElement(BreakdownCardBody, { isLoading: queriesDataLoaded, hasLoadError: queriesLoadError, metricTotal: metricTotal, top5MetricsStats: top5MetricsStats, capacityAvailable: cephAvailable, capacityUsed: cephUsed, metricModel: model, humanize: humanize }))));\n};\nexport default withDashboardResources(BreakdownCard);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/capacity-breakdown/capacity-breakdown-card.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/capacity-breakdown/capacity-breakdown-card.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,QAAQ,EAAE,mBAAmB,EAAE,MAAM,oCAAoC,CAAC;AACnF,OAAO,EAEL,sBAAsB,GACvB,MAAM,iEAAiE,CAAC;AACzE,OAAO,mBAAmB,MAAM,6EAA6E,CAAC;AAC9G,OAAO,aAAa,MAAM,uEAAuE,CAAC;AAClG,OAAO,kBAAkB,MAAM,4EAA4E,CAAC;AAC5G,OAAO,iBAAiB,MAAM,2EAA2E,CAAC;AAC1G,OAAO,EAAE,qBAAqB,EAAE,MAAM,2CAA2C,CAAC;AAClF,OAAO,EAAE,iBAAiB,EAAE,0BAA0B,EAAE,MAAM,+BAA+B,CAAC;AAC9F,OAAO,EAAE,QAAQ,EAAE,MAAM,6BAA6B,CAAC;AACvD,OAAO,EAAE,iBAAiB,EAAE,MAAM,kCAAkC,CAAC;AACrE,OAAO,EAAE,wBAAwB,EAAE,MAAM,oCAAoC,CAAC;AAC9E,OAAO,EAAE,kBAAkB,EAAE,sBAAsB,EAAE,MAAM,yBAAyB,CAAC;AACrF,OAAO,gCAAgC,CAAC;AAExC,MAAM,IAAI,GAAG,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;AAC5C,MAAM,eAAe,GAAG,CAAC,CAAC,SAAS,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;AAEhD,MAAM,aAAa,GAAiC,CAAC,EACnD,eAAe,EACf,wBAAwB,EACxB,iBAAiB,GAClB,EAAE,EAAE;IACH,MAAM,CAAC,UAAU,EAAE,aAAa,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC;IAC7D,MAAM,EAAE,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,iBAAiB,CAAC,UAAU,CAAC,CAAC;IACjE,MAAM,SAAS,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAEvC,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,SAAS,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,eAAe,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACtD,OAAO,GAAG,EAAE,CAAC,SAAS,CAAC,OAAO,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,wBAAwB,CAAC,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAClF,CAAC,EAAE,CAAC,eAAe,EAAE,wBAAwB,EAAE,UAAU,EAAE,SAAS,EAAE,OAAO,CAAC,CAAC,CAAC;IAEhF,MAAM,OAAO,GAAG,SAAS,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,GAAG,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;IACxF,MAAM,gBAAgB,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAC5C,iBAAiB,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,CACnD,CAAC;IAEF,MAAM,iBAAiB,GAAG,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC;IAEhG,MAAM,QAAQ,GAAG,mBAAmB,CAAC;IACrC,MAAM,eAAe,GAAG,qBAAqB,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC;IAClE,MAAM,qBAAqB,GAAG,sBAAsB,CAAC,eAAe,CAAC,CAAC;IACtE,MAAM,gBAAgB,GAAG,kBAAkB,CAAC,qBAAqB,EAAE,QAAQ,CAAC,CAAC;IAC7E,MAAM,WAAW,GAAG,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,yBAAyB,CAAC,CAAC;IACjE,MAAM,aAAa,GAAG,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,yBAAyB,CAAC,CAAC;IACnE,MAAM,QAAQ,GAAG,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,yBAAyB,CAAC,CAAC;IAC9D,MAAM,IAAI,GAAG,aAAa,0BAA0B,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAEvE,OAAO,CACL,oBAAC,aAAa;QACZ,oBAAC,mBAAmB;YAClB,oBAAC,kBAAkB,6BAAwC;YAC3D,6BAAK,SAAS,EAAC,sCAAsC;gBACnD,oBAAC,wBAAwB,IAAC,IAAI,EAAE,IAAI,GAAI;gBACxC,oBAAC,QAAQ,IACP,KAAK,EAAE,eAAe,EACtB,QAAQ,EAAE,aAAa,EACvB,WAAW,EAAE,UAAU,EACvB,KAAK,EAAE,UAAU,GACjB,CACE,CACc;QACtB,oBAAC,iBAAiB,IAAC,SAAS,EAAC,oCAAoC;YAC/D,oBAAC,iBAAiB,IAChB,SAAS,EAAE,iBAAiB,EAC5B,YAAY,EAAE,gBAAgB,EAC9B,WAAW,EAAE,WAAW,EACxB,gBAAgB,EAAE,gBAAgB,EAClC,iBAAiB,EAAE,aAAa,EAChC,YAAY,EAAE,QAAQ,EACtB,WAAW,EAAE,KAAK,EAClB,QAAQ,EAAE,QAAQ,GAClB,CACgB,CACN,CACjB,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,sBAAsB,CAAC,aAAa,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Dropdown, humanizeBinaryBytes } from '@console/internal/components/utils';\nimport {\n  DashboardItemProps,\n  withDashboardResources,\n} from '@console/internal/components/dashboard/with-dashboard-resources';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport { getInstantVectorStats } from '@console/internal/components/graphs/utils';\nimport { breakdownQueryMap, CAPACITY_BREAKDOWN_QUERIES } from '../../../../constants/queries';\nimport { PROJECTS } from '../../../../constants/index';\nimport { BreakdownCardBody } from '../breakdown-card/breakdown-body';\nimport { HeaderPrometheusViewLink } from '../breakdown-card/breakdown-header';\nimport { getStackChartStats, sortInstantVectorStats } from '../breakdown-card/utils';\nimport './capacity-breakdown-card.scss';\n\nconst keys = Object.keys(breakdownQueryMap);\nconst dropdownOptions = _.zipObject(keys, keys);\n\nconst BreakdownCard: React.FC<DashboardItemProps> = ({\n  watchPrometheus,\n  stopWatchPrometheusQuery,\n  prometheusResults,\n}) => {\n  const [metricType, setMetricType] = React.useState(PROJECTS);\n  const { queries, model, metric } = breakdownQueryMap[metricType];\n  const queryKeys = Object.keys(queries);\n\n  React.useEffect(() => {\n    queryKeys.forEach((q) => watchPrometheus(queries[q]));\n    return () => queryKeys.forEach((key) => stopWatchPrometheusQuery(queries[key]));\n  }, [watchPrometheus, stopWatchPrometheusQuery, metricType, queryKeys, queries]);\n\n  const results = queryKeys.map((key) => prometheusResults.getIn([queries[key], 'data']));\n  const queriesLoadError = queryKeys.some((q) =>\n    prometheusResults.getIn([queries[q], 'loadError']),\n  );\n\n  const queriesDataLoaded = queryKeys.some((q) => !prometheusResults.getIn([queries[q], 'data']));\n\n  const humanize = humanizeBinaryBytes;\n  const top6MetricsData = getInstantVectorStats(results[0], metric);\n  const top5SortedMetricsData = sortInstantVectorStats(top6MetricsData);\n  const top5MetricsStats = getStackChartStats(top5SortedMetricsData, humanize);\n  const metricTotal = _.get(results[1], 'data.result[0].value[1]');\n  const cephAvailable = _.get(results[2], 'data.result[0].value[1]');\n  const cephUsed = _.get(results[3], 'data.result[0].value[1]');\n  const link = `topk(20, (${CAPACITY_BREAKDOWN_QUERIES[queryKeys[0]]}))`;\n\n  return (\n    <DashboardCard>\n      <DashboardCardHeader>\n        <DashboardCardTitle>Capacity breakdown</DashboardCardTitle>\n        <div className=\"ceph-capacity-breakdown-card__header\">\n          <HeaderPrometheusViewLink link={link} />\n          <Dropdown\n            items={dropdownOptions}\n            onChange={setMetricType}\n            selectedKey={metricType}\n            title={metricType}\n          />\n        </div>\n      </DashboardCardHeader>\n      <DashboardCardBody classname=\"ceph-capacity-breakdown-card__body\">\n        <BreakdownCardBody\n          isLoading={queriesDataLoaded}\n          hasLoadError={queriesLoadError}\n          metricTotal={metricTotal}\n          top5MetricsStats={top5MetricsStats}\n          capacityAvailable={cephAvailable}\n          capacityUsed={cephUsed}\n          metricModel={model}\n          humanize={humanize}\n        />\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n};\n\nexport default withDashboardResources(BreakdownCard);\n"]}]}