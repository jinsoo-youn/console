{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/monitoring/overview/MonitoringOverview.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/monitoring/overview/MonitoringOverview.tsx","mtime":1616735742380},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport { Accordion, AccordionItem, AccordionToggle, AccordionContent, Split, SplitItem, Badge, EmptyState, EmptyStateIcon, EmptyStateBody, Title, } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { DeploymentConfigModel } from '@console/internal/models';\nimport { sortEvents } from '@console/internal/components/events';\nimport { LoadingBox } from '@console/internal/components/utils';\nimport MonitoringOverviewEventsWarning from './MonitoringOverviewEventsWarning';\nimport MonitoringOverviewEvents from './MonitoringOverviewEvents';\nimport WorkloadGraphs from './MonitoringMetrics';\nimport './MonitoringOverview.scss';\nconst MonitoringOverview = (props) => {\n    var _a, _b;\n    const { resource, pods, resourceEvents } = props;\n    const [expanded, setExpanded] = React.useState(['metrics']);\n    if (!resourceEvents ||\n        !resourceEvents.loaded ||\n        (pods && pods.find((pod) => !props[pod.metadata.uid] || !props[pod.metadata.uid].loaded))) {\n        return React.createElement(LoadingBox, null);\n    }\n    let events = [...resourceEvents.data];\n    if (pods) {\n        pods.forEach((pod) => {\n            const podData = props[pod.metadata.uid];\n            if (podData) {\n                events.push(...podData.data);\n            }\n        });\n    }\n    events = sortEvents(events);\n    const eventWarning = _.filter(events, ['type', 'Warning']);\n    const onToggle = (id) => {\n        const index = expanded.indexOf(id);\n        const newExpanded = index >= 0\n            ? [...expanded.slice(0, index), ...expanded.slice(index + 1, expanded.length)]\n            : [...expanded, id];\n        setExpanded(newExpanded);\n    };\n    return (React.createElement(\"div\", { className: \"odc-monitoring-overview\" },\n        React.createElement(Accordion, { asDefinitionList: false, noBoxShadow: true, className: \"odc-monitoring-overview__metric-accordion\", headingLevel: \"h5\" },\n            React.createElement(AccordionItem, null,\n                React.createElement(AccordionToggle, { onClick: () => {\n                        onToggle('events-warning');\n                    }, isExpanded: expanded.includes('events-warning'), id: \"events-warning\", className: \"odc-monitoring-overview__event-warning-toggle\" },\n                    React.createElement(Split, null,\n                        React.createElement(SplitItem, null, \"Events (Warning)\"),\n                        React.createElement(SplitItem, { isFilled: true }),\n                        React.createElement(SplitItem, null,\n                            React.createElement(Badge, null, eventWarning.length)))),\n                React.createElement(AccordionContent, { className: \"odc-monitoring-overview__event-warning-body\", id: \"events-warning-content\", isHidden: !expanded.includes('events-warning') },\n                    React.createElement(MonitoringOverviewEventsWarning, { events: eventWarning }))),\n            React.createElement(AccordionItem, null,\n                React.createElement(AccordionToggle, { onClick: () => {\n                        onToggle('metrics');\n                    }, isExpanded: expanded.includes('metrics'), id: \"metrics\" }, \"Metrics\"),\n                React.createElement(AccordionContent, { id: \"metrics-content\", isHidden: !expanded.includes('metrics') }, resource.kind === DeploymentConfigModel.kind ? (React.createElement(EmptyState, null,\n                    React.createElement(EmptyStateIcon, { className: \"odc-monitoring-overview__empty-state-icon\", icon: InfoCircleIcon }),\n                    React.createElement(Title, { size: \"md\" }, \"No Metrics Found\"),\n                    React.createElement(EmptyStateBody, null, \"Deployment Configuration metrics are not yet supported.\"))) : (React.createElement(React.Fragment, null,\n                    React.createElement(\"div\", { className: \"odc-monitoring-overview__view-monitoring-dashboard\" },\n                        React.createElement(Link, { to: `/dev-monitoring/ns/${(_a = resource === null || resource === void 0 ? void 0 : resource.metadata) === null || _a === void 0 ? void 0 : _a.namespace}/?workloadName=${(_b = resource === null || resource === void 0 ? void 0 : resource.metadata) === null || _b === void 0 ? void 0 : _b.name}&workloadType=${resource === null || resource === void 0 ? void 0 : resource.kind}` }, \"View monitoring dashboard\")),\n                    React.createElement(WorkloadGraphs, { resource: resource }))))),\n            React.createElement(AccordionItem, null,\n                React.createElement(AccordionToggle, { onClick: () => {\n                        onToggle('all-events');\n                    }, isExpanded: expanded.includes('all-events'), id: \"all-events\" }, \"All Events\"),\n                React.createElement(AccordionContent, { id: \"all-events-content\", isHidden: !expanded.includes('all-events') },\n                    React.createElement(MonitoringOverviewEvents, { events: events }))))));\n};\nexport default MonitoringOverview;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/monitoring/overview/MonitoringOverview.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/monitoring/overview/MonitoringOverview.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport {\n  Accordion,\n  AccordionItem,\n  AccordionToggle,\n  AccordionContent,\n  Split,\n  SplitItem,\n  Badge,\n  EmptyState,\n  EmptyStateIcon,\n  EmptyStateBody,\n  Title,\n} from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { K8sResourceKind, EventKind, PodKind } from '@console/internal/module/k8s';\nimport { DeploymentConfigModel } from '@console/internal/models';\nimport { sortEvents } from '@console/internal/components/events';\nimport { FirehoseResult, LoadingBox } from '@console/internal/components/utils';\nimport MonitoringOverviewEventsWarning from './MonitoringOverviewEventsWarning';\nimport MonitoringOverviewEvents from './MonitoringOverviewEvents';\nimport WorkloadGraphs from './MonitoringMetrics';\nimport './MonitoringOverview.scss';\n\ntype MonitoringOverviewProps = {\n  resource: K8sResourceKind;\n  pods?: PodKind[];\n  resourceEvents?: FirehoseResult<EventKind[]>;\n};\n\nconst MonitoringOverview: React.FC<MonitoringOverviewProps> = (props) => {\n  const { resource, pods, resourceEvents } = props;\n  const [expanded, setExpanded] = React.useState(['metrics']);\n\n  if (\n    !resourceEvents ||\n    !resourceEvents.loaded ||\n    (pods && pods.find((pod) => !props[pod.metadata.uid] || !props[pod.metadata.uid].loaded))\n  ) {\n    return <LoadingBox />;\n  }\n\n  let events = [...resourceEvents.data];\n  if (pods) {\n    pods.forEach((pod) => {\n      const podData = props[pod.metadata.uid];\n      if (podData) {\n        events.push(...podData.data);\n      }\n    });\n  }\n\n  events = sortEvents(events);\n  const eventWarning = _.filter(events, ['type', 'Warning']);\n\n  const onToggle = (id: string) => {\n    const index = expanded.indexOf(id);\n    const newExpanded =\n      index >= 0\n        ? [...expanded.slice(0, index), ...expanded.slice(index + 1, expanded.length)]\n        : [...expanded, id];\n    setExpanded(newExpanded);\n  };\n\n  return (\n    <div className=\"odc-monitoring-overview\">\n      <Accordion\n        asDefinitionList={false}\n        noBoxShadow\n        className=\"odc-monitoring-overview__metric-accordion\"\n        headingLevel=\"h5\"\n      >\n        <AccordionItem>\n          <AccordionToggle\n            onClick={() => {\n              onToggle('events-warning');\n            }}\n            isExpanded={expanded.includes('events-warning')}\n            id=\"events-warning\"\n            className=\"odc-monitoring-overview__event-warning-toggle\"\n          >\n            <Split>\n              <SplitItem>Events (Warning)</SplitItem>\n              <SplitItem isFilled />\n              <SplitItem>\n                <Badge>{eventWarning.length}</Badge>\n              </SplitItem>\n            </Split>\n          </AccordionToggle>\n          <AccordionContent\n            className=\"odc-monitoring-overview__event-warning-body\"\n            id=\"events-warning-content\"\n            isHidden={!expanded.includes('events-warning')}\n          >\n            <MonitoringOverviewEventsWarning events={eventWarning} />\n          </AccordionContent>\n        </AccordionItem>\n\n        <AccordionItem>\n          <AccordionToggle\n            onClick={() => {\n              onToggle('metrics');\n            }}\n            isExpanded={expanded.includes('metrics')}\n            id=\"metrics\"\n          >\n            Metrics\n          </AccordionToggle>\n          <AccordionContent id=\"metrics-content\" isHidden={!expanded.includes('metrics')}>\n            {resource.kind === DeploymentConfigModel.kind ? (\n              <EmptyState>\n                <EmptyStateIcon\n                  className=\"odc-monitoring-overview__empty-state-icon\"\n                  icon={InfoCircleIcon}\n                />\n                <Title size=\"md\">No Metrics Found</Title>\n                <EmptyStateBody>\n                  Deployment Configuration metrics are not yet supported.\n                </EmptyStateBody>\n              </EmptyState>\n            ) : (\n              <>\n                <div className=\"odc-monitoring-overview__view-monitoring-dashboard\">\n                  <Link\n                    to={`/dev-monitoring/ns/${resource?.metadata?.namespace}/?workloadName=${resource?.metadata?.name}&workloadType=${resource?.kind}`}\n                  >\n                    View monitoring dashboard\n                  </Link>\n                </div>\n                <WorkloadGraphs resource={resource} />\n              </>\n            )}\n          </AccordionContent>\n        </AccordionItem>\n\n        <AccordionItem>\n          <AccordionToggle\n            onClick={() => {\n              onToggle('all-events');\n            }}\n            isExpanded={expanded.includes('all-events')}\n            id=\"all-events\"\n          >\n            All Events\n          </AccordionToggle>\n          <AccordionContent id=\"all-events-content\" isHidden={!expanded.includes('all-events')}>\n            <MonitoringOverviewEvents events={events} />\n          </AccordionContent>\n        </AccordionItem>\n      </Accordion>\n    </div>\n  );\n};\n\nexport default MonitoringOverview;\n"]}]}