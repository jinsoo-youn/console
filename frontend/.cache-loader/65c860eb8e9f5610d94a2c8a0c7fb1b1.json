{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/behavior/useReconnect.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/behavior/useReconnect.tsx","mtime":1615298458710},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { observer } from 'mobx-react';\nimport { useDndDrag } from './useDndDrag';\nexport const withSourceDrag = (spec) => (WrappedComponent) => {\n    const Component = (props) => {\n        // TODO fix cast to any\n        const [dndDragProps, dndDragRef] = useDndDrag(spec, props);\n        return React.createElement(WrappedComponent, Object.assign({}, props, { sourceDragRef: dndDragRef }, dndDragProps));\n    };\n    return observer(Component);\n};\nexport const withTargetDrag = (spec) => (WrappedComponent) => {\n    const Component = (props) => {\n        // TODO fix cast to any\n        const [dndDragProps, dndDragRef] = useDndDrag(spec, props);\n        return React.createElement(WrappedComponent, Object.assign({}, props, { targetDragRef: dndDragRef }, dndDragProps));\n    };\n    return observer(Component);\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/behavior/useReconnect.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/behavior/useReconnect.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AACtC,OAAO,EAAE,UAAU,EAAE,MAAM,cAAc,CAAC;AAa1C,MAAM,CAAC,MAAM,cAAc,GAAG,CAM5B,IAMC,EACD,EAAE,CAAC,CACH,gBAAwC,EACxC,EAAE;IACF,MAAM,SAAS,GAAkE,CAAC,KAAK,EAAE,EAAE;QACzF,uBAAuB;QACvB,MAAM,CAAC,YAAY,EAAE,UAAU,CAAC,GAAG,UAAU,CAAC,IAAI,EAAE,KAAY,CAAC,CAAC;QAClE,OAAO,oBAAC,gBAAgB,oBAAM,KAAa,IAAE,aAAa,EAAE,UAAU,IAAM,YAAY,EAAI,CAAC;IAC/F,CAAC,CAAC;IACF,OAAO,QAAQ,CAAC,SAAS,CAAC,CAAC;AAC7B,CAAC,CAAC;AAMF,MAAM,CAAC,MAAM,cAAc,GAAG,CAM5B,IAMC,EACD,EAAE,CAAC,CACH,gBAAwC,EACxC,EAAE;IACF,MAAM,SAAS,GAAkE,CAAC,KAAK,EAAE,EAAE;QACzF,uBAAuB;QACvB,MAAM,CAAC,YAAY,EAAE,UAAU,CAAC,GAAG,UAAU,CAAC,IAAI,EAAE,KAAY,CAAC,CAAC;QAClE,OAAO,oBAAC,gBAAgB,oBAAM,KAAa,IAAE,aAAa,EAAE,UAAU,IAAM,YAAY,EAAI,CAAC;IAC/F,CAAC,CAAC;IACF,OAAO,QAAQ,CAAC,SAAS,CAAC,CAAC;AAC7B,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { observer } from 'mobx-react';\nimport { useDndDrag } from './useDndDrag';\nimport {\n  ConnectDragSource,\n  DragObjectWithType,\n  DragOperationWithType,\n  DragSourceSpec,\n  DragSpecOperationType,\n} from './dnd-types';\n\nexport type WithSourceDragProps = {\n  sourceDragRef: ConnectDragSource;\n};\n\nexport const withSourceDrag = <\n  DragObject extends DragObjectWithType = DragObjectWithType,\n  DropResult = any,\n  CollectedProps extends {} = {},\n  Props extends {} = {}\n>(\n  spec: DragSourceSpec<\n    DragObject,\n    DragSpecOperationType<DragOperationWithType>,\n    DropResult,\n    CollectedProps,\n    Props\n  >,\n) => <P extends WithSourceDragProps & CollectedProps & Props>(\n  WrappedComponent: React.ComponentType<P>,\n) => {\n  const Component: React.FC<Omit<P, keyof WithSourceDragProps & CollectedProps>> = (props) => {\n    // TODO fix cast to any\n    const [dndDragProps, dndDragRef] = useDndDrag(spec, props as any);\n    return <WrappedComponent {...(props as any)} sourceDragRef={dndDragRef} {...dndDragProps} />;\n  };\n  return observer(Component);\n};\n\nexport type WithTargetDragProps = {\n  targetDragRef: ConnectDragSource;\n};\n\nexport const withTargetDrag = <\n  DragObject extends DragObjectWithType = DragObjectWithType,\n  DropResult = any,\n  CollectedProps extends {} = {},\n  Props extends {} = {}\n>(\n  spec: DragSourceSpec<\n    DragObject,\n    DragSpecOperationType<DragOperationWithType>,\n    DropResult,\n    CollectedProps,\n    Props\n  >,\n) => <P extends WithSourceDragProps & CollectedProps & Props>(\n  WrappedComponent: React.ComponentType<P>,\n) => {\n  const Component: React.FC<Omit<P, keyof WithSourceDragProps & CollectedProps>> = (props) => {\n    // TODO fix cast to any\n    const [dndDragProps, dndDragRef] = useDndDrag(spec, props as any);\n    return <WrappedComponent {...(props as any)} targetDragRef={dndDragRef} {...dndDragProps} />;\n  };\n  return observer(Component);\n};\n"]}]}