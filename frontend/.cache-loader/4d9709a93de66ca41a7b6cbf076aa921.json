{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/topology/knative-topology-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/topology/knative-topology-utils.ts","mtime":1615298458640},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { apiVersionForModel, referenceFor, modelFor, k8sUpdate, } from '@console/internal/module/k8s';\nimport { TransformResourceData, getResourcePausedAlert, getBuildAlerts, getOwnedResources, getBuildConfigsForResource, } from '@console/shared';\nimport { getTopologyGroupItems, createTopologyNodeData, getTopologyNodeItem, getTopologyEdgeItems, mergeGroup, filterBasedOnActiveApplication, getTopologyResourceObject, } from '@console/dev-console/src/components/topology';\nimport { getImageForIconClass } from '@console/internal/components/catalog/catalog-item-icon';\nimport { DeploymentModel } from '@console/internal/models';\nimport { FLAG_KNATIVE_EVENTING } from '../const';\nimport { ServiceModel as knServiceModel } from '../models';\nexport var NodeType;\n(function (NodeType) {\n    NodeType[\"EventSource\"] = \"event-source\";\n    NodeType[\"KnService\"] = \"knative-service\";\n    NodeType[\"Revision\"] = \"knative-revision\";\n})(NodeType || (NodeType = {}));\nexport var EdgeType;\n(function (EdgeType) {\n    EdgeType[\"Traffic\"] = \"revision-traffic\";\n    EdgeType[\"EventSource\"] = \"event-source-link\";\n})(EdgeType || (EdgeType = {}));\n/**\n * returns if event source is enabled or not\n * @param Flags\n */\nexport const getEventSourceStatus = ({ FLAGS }) => FLAGS.get(FLAG_KNATIVE_EVENTING);\n/**\n * fetch the parent resource from a resource\n * @param resource\n * @param resources\n */\nexport const getParentResource = (resource, resources) => {\n    const parentUids = _.map(_.get(resource, ['metadata', 'ownerReferences'], []), (owner) => owner.uid);\n    const [resourcesParent] = _.filter(resources, ({ metadata: { uid } }) => parentUids.includes(uid));\n    return resourcesParent;\n};\n/**\n * Filters revision based on active application\n * @param revisions\n * @param resources\n * @param application\n */\nexport const filterRevisionsByActiveApplication = (revisions, resources, application) => {\n    const filteredRevisions = [];\n    _.forEach(revisions, (revision) => {\n        const configuration = getParentResource(revision, resources.configurations.data);\n        const service = getParentResource(configuration, resources.ksservices.data);\n        const hasTraffic = service &&\n            service.status &&\n            _.find(service.status.traffic, { revisionName: revision.metadata.name });\n        const isServicePartofGroup = filterBasedOnActiveApplication([service], application).length > 0;\n        if (hasTraffic && isServicePartofGroup) {\n            filteredRevisions.push(revision);\n        }\n    });\n    return filteredRevisions;\n};\n/**\n * Forms data with respective revisions, configurations, routes based on kntaive service\n */\nexport const getKnativeServiceData = (resource, resources, utils) => {\n    const configurations = getOwnedResources(resource, resources.configurations.data);\n    const revisions = configurations && configurations.length\n        ? getOwnedResources(configurations[0], resources.revisions.data)\n        : undefined;\n    const revisionsDeploymentData = _.reduce(revisions, (acc, revision) => {\n        let revisionDep = revision;\n        let pods;\n        if (resources.deployments) {\n            const transformResourceData = new TransformResourceData(resources);\n            const associatedDeployment = getOwnedResources(revision, resources.deployments.data);\n            if (!_.isEmpty(associatedDeployment)) {\n                const depObj = Object.assign(Object.assign({}, associatedDeployment[0]), { apiVersion: apiVersionForModel(DeploymentModel), kind: DeploymentModel.kind });\n                const replicaSets = transformResourceData.getReplicaSetsForResource(depObj);\n                const [current, previous] = replicaSets;\n                pods = [..._.get(current, 'pods', []), ..._.get(previous, 'pods', [])];\n                revisionDep = Object.assign(Object.assign({}, revisionDep), { resources: { pods, current } });\n            }\n        }\n        acc.revisionsDep.push(revisionDep);\n        pods && acc.allPods.push(...pods);\n        return acc;\n    }, { revisionsDep: [], allPods: [] });\n    const ksroutes = resources.ksroutes\n        ? getOwnedResources(resource, resources.ksroutes.data)\n        : undefined;\n    const buildConfigs = getBuildConfigsForResource(resource, resources);\n    const overviewItem = {\n        configurations,\n        revisions: revisionsDeploymentData.revisionsDep,\n        ksroutes,\n        buildConfigs,\n        pods: revisionsDeploymentData.allPods,\n    };\n    if (utils) {\n        return utils.reduce((acc, element) => {\n            return Object.assign(Object.assign({}, acc), element(resource, resources));\n        }, overviewItem);\n    }\n    return overviewItem;\n};\n/**\n * Rollup data for deployments for revisions/ event sources\n */\nconst createKnativeDeploymentItems = (resource, resources, utils) => {\n    const transformResourceData = new TransformResourceData(resources, utils);\n    const associatedDeployment = getOwnedResources(resource, resources.deployments.data);\n    if (!_.isEmpty(associatedDeployment)) {\n        const depObj = Object.assign(Object.assign({}, associatedDeployment[0]), { apiVersion: apiVersionForModel(DeploymentModel), kind: DeploymentModel.kind });\n        const replicaSets = transformResourceData.getReplicaSetsForResource(depObj);\n        const [current, previous] = replicaSets;\n        const isRollingOut = !!current && !!previous;\n        const buildConfigs = transformResourceData.getBuildConfigsForResource(depObj);\n        const services = transformResourceData.getServicesForResource(depObj);\n        const routes = transformResourceData.getRoutesForServices(services);\n        const alerts = Object.assign(Object.assign({}, getResourcePausedAlert(depObj)), getBuildAlerts(buildConfigs));\n        const overviewItems = {\n            obj: resource,\n            alerts,\n            buildConfigs,\n            current,\n            isRollingOut,\n            previous,\n            pods: [..._.get(current, 'pods', []), ..._.get(previous, 'pods', [])],\n            routes,\n            services,\n        };\n        if (utils) {\n            return utils.reduce((acc, element) => {\n                return Object.assign(Object.assign({}, acc), element(depObj, resources));\n            }, overviewItems);\n        }\n        return overviewItems;\n    }\n    const knResources = getKnativeServiceData(resource, resources, utils);\n    return Object.assign({ obj: resource, buildConfigs: [], routes: [], services: [] }, knResources);\n};\n/**\n * only get revision which are included in traffic data\n */\nexport const filterRevisionsBaseOnTrafficStatus = (resource, revisions) => {\n    if (!_.get(resource, 'status.traffic', null))\n        return undefined;\n    return resource.status.traffic.reduce((acc, curr) => {\n        const el = revisions.find((rev) => curr.revisionName === rev.metadata.name);\n        return el ? [...acc, el] : acc;\n    }, []);\n};\n/**\n * Form Node data for revisions/event/service sources\n */\nexport const getKnativeTopologyNodeItems = (resource, type, resources) => {\n    const nodes = [];\n    const children = [];\n    if (type === NodeType.KnService && resources && resources.configurations) {\n        const configurations = getOwnedResources(resource, resources.configurations.data);\n        const configUidData = _.get(configurations[0], ['metadata', 'uid']);\n        const ChildData = _.filter(resources.revisions.data, {\n            metadata: {\n                ownerReferences: [{ uid: configUidData }],\n            },\n        });\n        _.forEach(filterRevisionsBaseOnTrafficStatus(resource, ChildData), (c) => {\n            const uidRev = c.metadata.uid;\n            children.push(uidRev);\n            nodes.push(getTopologyNodeItem(c, NodeType.Revision));\n        });\n    }\n    nodes.push(getTopologyNodeItem(resource, type, children));\n    return nodes;\n};\n/**\n * Form Edge data for event sources\n */\nexport const getEventTopologyEdgeItems = (resource, { data }) => {\n    const uid = _.get(resource, ['metadata', 'uid']);\n    const sinkSvc = _.get(resource, 'spec.sink.ref', null) || _.get(resource, 'spec.sink', null);\n    const edges = [];\n    if (sinkSvc && sinkSvc.kind === knServiceModel.kind) {\n        _.forEach(data, (res) => {\n            const resname = _.get(res, ['metadata', 'name']);\n            const resUid = _.get(res, ['metadata', 'uid']);\n            if (resname === sinkSvc.name) {\n                edges.push({\n                    id: `${uid}_${resUid}`,\n                    type: EdgeType.EventSource,\n                    source: uid,\n                    target: resUid,\n                });\n            }\n        });\n    }\n    return edges;\n};\n/**\n * Form Edge data for service sources with traffic data\n */\nexport const getTrafficTopologyEdgeItems = (resource, { data }) => {\n    const uid = _.get(resource, ['metadata', 'uid']);\n    const trafficSvc = _.get(resource, ['status', 'traffic'], []);\n    const edges = [];\n    _.forEach(trafficSvc, (res) => {\n        const resname = _.get(res, ['revisionName']);\n        const trafficPercent = _.get(res, ['percent']);\n        const revisionObj = _.find(data, (rev) => {\n            const revname = _.get(rev, ['metadata', 'name']);\n            return revname === resname;\n        });\n        const resUid = _.get(revisionObj, ['metadata', 'uid'], null);\n        if (resUid) {\n            const revisionIndex = _.findIndex(edges, (edge) => edge.id === `${uid}_${resUid}`);\n            if (revisionIndex >= 0) {\n                edges[revisionIndex].data.percent += trafficPercent;\n            }\n            else {\n                edges.push({\n                    id: `${uid}_${resUid}`,\n                    type: EdgeType.Traffic,\n                    source: uid,\n                    target: resUid,\n                    data: { percent: trafficPercent },\n                });\n            }\n        }\n    });\n    return edges;\n};\n/**\n * create all data that need to be shown on a topology data for knative service\n */\nexport const createTopologyServiceNodeData = (svcRes, operatorBackedServiceKindMap, type) => {\n    var _a, _b, _c, _d;\n    const { pipelines = [], pipelineRuns = [] } = svcRes;\n    const { obj: knativeSvc } = svcRes;\n    const uid = _.get(knativeSvc, 'metadata.uid');\n    const labels = _.get(knativeSvc, 'metadata.labels', {});\n    const annotations = _.get(knativeSvc, 'metadata.annotations', {});\n    const nodeResourceKind = _.get(knativeSvc, 'metadata.ownerReferences[0].kind');\n    return {\n        id: uid,\n        name: _.get(knativeSvc, 'metadata.name') || labels['app.kubernetes.io/instance'],\n        type,\n        resources: Object.assign({}, svcRes),\n        operatorBackedService: nodeResourceKind in operatorBackedServiceKindMap,\n        data: {\n            url: ((_a = knativeSvc.status) === null || _a === void 0 ? void 0 : _a.url) || '',\n            kind: referenceFor(knativeSvc),\n            editURL: annotations['app.openshift.io/edit-url'],\n            vcsURI: annotations['app.openshift.io/vcs-uri'],\n            isKnativeResource: true,\n            connectedPipeline: {\n                pipeline: pipelines[0],\n                pipelineRuns,\n            },\n            build: (_d = (_c = (_b = svcRes.buildConfigs) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.builds) === null || _d === void 0 ? void 0 : _d[0],\n        },\n    };\n};\nexport const transformKnNodeData = (knResourcesData, type, resources, allResources, operatorBackedServiceKindMap, utils) => {\n    const knDataModel = {\n        graph: { nodes: [], edges: [], groups: [] },\n        topology: {},\n    };\n    const serviceBindingRequests = _.get(resources, 'serviceBindingRequests.data');\n    _.forEach(knResourcesData, (res) => {\n        const { uid } = res.metadata;\n        const item = createKnativeDeploymentItems(res, resources, utils);\n        switch (type) {\n            case NodeType.EventSource: {\n                knDataModel.topology[uid] = createTopologyNodeData(item, type, getImageForIconClass(`icon-openshift`));\n                knDataModel.graph.nodes.push(...getKnativeTopologyNodeItems(res, type, resources));\n                knDataModel.graph.edges.push(...getEventTopologyEdgeItems(res, resources.ksservices));\n                const newGroup = getTopologyGroupItems(res);\n                mergeGroup(newGroup, knDataModel.graph.groups);\n                break;\n            }\n            case NodeType.Revision: {\n                const revisionItem = _.omit(item, ['pipelines', 'pipelineRuns', 'buildConfigs']);\n                knDataModel.topology[uid] = createTopologyNodeData(revisionItem, type, getImageForIconClass(`icon-openshift`));\n                break;\n            }\n            case NodeType.KnService: {\n                knDataModel.topology[uid] = createTopologyServiceNodeData(item, operatorBackedServiceKindMap, type);\n                knDataModel.graph.nodes.push(...getKnativeTopologyNodeItems(res, type, resources));\n                knDataModel.graph.edges.push(...getTrafficTopologyEdgeItems(res, resources.revisions), ...getTopologyEdgeItems(res, allResources, serviceBindingRequests));\n                const newGroup = getTopologyGroupItems(res);\n                mergeGroup(newGroup, knDataModel.graph.groups);\n                break;\n            }\n            default:\n                break;\n        }\n    });\n    return knDataModel;\n};\nexport const createKnativeEventSourceSink = (source, target) => {\n    if (!source || !target || source === target) {\n        return Promise.reject();\n    }\n    const targetName = _.get(target, 'metadata.name');\n    const eventSourceObj = _.omit(source, 'status');\n    const sink = {\n        ref: {\n            apiVersion: target.apiVersion,\n            kind: target.kind,\n            name: targetName,\n        },\n    };\n    const updatePayload = Object.assign(Object.assign({}, eventSourceObj), { spec: Object.assign(Object.assign({}, eventSourceObj.spec), { sink }) });\n    return k8sUpdate(modelFor(referenceFor(source)), updatePayload);\n};\nexport const createTopologySinkConnection = (source, target) => {\n    if (!source || !target || source === target) {\n        return Promise.reject();\n    }\n    const sourceObj = getTopologyResourceObject(source);\n    const targetObj = getTopologyResourceObject(target);\n    return createKnativeEventSourceSink(sourceObj, targetObj);\n};\nexport const createSinkConnection = (sourceNode, targetNode) => {\n    return createTopologySinkConnection(sourceNode.getData(), targetNode.getData());\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/topology/knative-topology-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/topology/knative-topology-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { Node as TopologyNode } from '@console/topology';\nimport {\n  K8sResourceKind,\n  apiVersionForModel,\n  referenceFor,\n  modelFor,\n  k8sUpdate,\n  PodKind,\n} from '@console/internal/module/k8s';\nimport {\n  TransformResourceData,\n  getResourcePausedAlert,\n  getBuildAlerts,\n  getOwnedResources,\n  OperatorBackedServiceKindMap,\n  getBuildConfigsForResource,\n} from '@console/shared';\nimport {\n  Node,\n  Edge,\n  TopologyDataResources,\n  TopologyDataModel,\n  TopologyDataObject,\n  getTopologyGroupItems,\n  createTopologyNodeData,\n  getTopologyNodeItem,\n  getTopologyEdgeItems,\n  mergeGroup,\n  filterBasedOnActiveApplication,\n  getTopologyResourceObject,\n  TopologyOverviewItem,\n} from '@console/dev-console/src/components/topology';\nimport { getImageForIconClass } from '@console/internal/components/catalog/catalog-item-icon';\nimport { DeploymentModel } from '@console/internal/models';\nimport { RootState } from '@console/internal/redux';\nimport { FLAG_KNATIVE_EVENTING } from '../const';\nimport { ServiceModel as knServiceModel } from '../models';\nimport { KnativeItem } from '../utils/get-knative-resources';\n\nexport enum NodeType {\n  EventSource = 'event-source',\n  KnService = 'knative-service',\n  Revision = 'knative-revision',\n}\n\nexport enum EdgeType {\n  Traffic = 'revision-traffic',\n  EventSource = 'event-source-link',\n}\n\ntype RevK8sResourceKind = K8sResourceKind & {\n  resources?: { [key: string]: any };\n};\n/**\n * returns if event source is enabled or not\n * @param Flags\n */\nexport const getEventSourceStatus = ({ FLAGS }: RootState): boolean =>\n  FLAGS.get(FLAG_KNATIVE_EVENTING);\n\n/**\n * fetch the parent resource from a resource\n * @param resource\n * @param resources\n */\nexport const getParentResource = (\n  resource: K8sResourceKind,\n  resources: K8sResourceKind[],\n): K8sResourceKind => {\n  const parentUids = _.map(\n    _.get(resource, ['metadata', 'ownerReferences'], []),\n    (owner) => owner.uid,\n  );\n  const [resourcesParent] = _.filter(resources, ({ metadata: { uid } }) =>\n    parentUids.includes(uid),\n  );\n  return resourcesParent;\n};\n\n/**\n * Filters revision based on active application\n * @param revisions\n * @param resources\n * @param application\n */\nexport const filterRevisionsByActiveApplication = (\n  revisions: K8sResourceKind[],\n  resources: TopologyDataResources,\n  application: string,\n) => {\n  const filteredRevisions = [];\n  _.forEach(revisions, (revision) => {\n    const configuration = getParentResource(revision, resources.configurations.data);\n    const service = getParentResource(configuration, resources.ksservices.data);\n    const hasTraffic =\n      service &&\n      service.status &&\n      _.find(service.status.traffic, { revisionName: revision.metadata.name });\n    const isServicePartofGroup = filterBasedOnActiveApplication([service], application).length > 0;\n    if (hasTraffic && isServicePartofGroup) {\n      filteredRevisions.push(revision);\n    }\n  });\n  return filteredRevisions;\n};\n\n/**\n * Forms data with respective revisions, configurations, routes based on kntaive service\n */\nexport const getKnativeServiceData = (\n  resource: K8sResourceKind,\n  resources: TopologyDataResources,\n  utils?: Function[],\n): KnativeItem => {\n  const configurations = getOwnedResources(resource, resources.configurations.data);\n  const revisions =\n    configurations && configurations.length\n      ? getOwnedResources(configurations[0], resources.revisions.data)\n      : undefined;\n  const revisionsDeploymentData = _.reduce(\n    revisions,\n    (acc, revision) => {\n      let revisionDep: RevK8sResourceKind = revision;\n      let pods: PodKind[];\n      if (resources.deployments) {\n        const transformResourceData = new TransformResourceData(resources);\n        const associatedDeployment = getOwnedResources(revision, resources.deployments.data);\n        if (!_.isEmpty(associatedDeployment)) {\n          const depObj: K8sResourceKind = {\n            ...associatedDeployment[0],\n            apiVersion: apiVersionForModel(DeploymentModel),\n            kind: DeploymentModel.kind,\n          };\n          const replicaSets = transformResourceData.getReplicaSetsForResource(depObj);\n          const [current, previous] = replicaSets;\n          pods = [..._.get(current, 'pods', []), ..._.get(previous, 'pods', [])];\n          revisionDep = { ...revisionDep, resources: { pods, current } };\n        }\n      }\n      acc.revisionsDep.push(revisionDep);\n      pods && acc.allPods.push(...pods);\n      return acc;\n    },\n    { revisionsDep: [], allPods: [] },\n  );\n  const ksroutes = resources.ksroutes\n    ? getOwnedResources(resource, resources.ksroutes.data)\n    : undefined;\n  const buildConfigs = getBuildConfigsForResource(resource, resources);\n  const overviewItem = {\n    configurations,\n    revisions: revisionsDeploymentData.revisionsDep,\n    ksroutes,\n    buildConfigs,\n    pods: revisionsDeploymentData.allPods,\n  };\n  if (utils) {\n    return utils.reduce((acc, element) => {\n      return { ...acc, ...element(resource, resources) };\n    }, overviewItem);\n  }\n  return overviewItem;\n};\n\n/**\n * Rollup data for deployments for revisions/ event sources\n */\nconst createKnativeDeploymentItems = (\n  resource: K8sResourceKind,\n  resources: TopologyDataResources,\n  utils?: Function[],\n): TopologyOverviewItem => {\n  const transformResourceData = new TransformResourceData(resources, utils);\n  const associatedDeployment = getOwnedResources(resource, resources.deployments.data);\n  if (!_.isEmpty(associatedDeployment)) {\n    const depObj: K8sResourceKind = {\n      ...associatedDeployment[0],\n      apiVersion: apiVersionForModel(DeploymentModel),\n      kind: DeploymentModel.kind,\n    };\n    const replicaSets = transformResourceData.getReplicaSetsForResource(depObj);\n    const [current, previous] = replicaSets;\n    const isRollingOut = !!current && !!previous;\n    const buildConfigs = transformResourceData.getBuildConfigsForResource(depObj);\n    const services = transformResourceData.getServicesForResource(depObj);\n    const routes = transformResourceData.getRoutesForServices(services);\n    const alerts = {\n      ...getResourcePausedAlert(depObj),\n      ...getBuildAlerts(buildConfigs),\n    };\n    const overviewItems = {\n      obj: resource,\n      alerts,\n      buildConfigs,\n      current,\n      isRollingOut,\n      previous,\n      pods: [..._.get(current, 'pods', []), ..._.get(previous, 'pods', [])],\n      routes,\n      services,\n    };\n\n    if (utils) {\n      return utils.reduce((acc, element) => {\n        return { ...acc, ...element(depObj, resources) };\n      }, overviewItems);\n    }\n    return overviewItems;\n  }\n  const knResources = getKnativeServiceData(resource, resources, utils);\n  return {\n    obj: resource,\n    buildConfigs: [],\n    routes: [],\n    services: [],\n    ...knResources,\n  };\n};\n\n/**\n * only get revision which are included in traffic data\n */\nexport const filterRevisionsBaseOnTrafficStatus = (\n  resource: K8sResourceKind,\n  revisions: K8sResourceKind[],\n): K8sResourceKind[] => {\n  if (!_.get(resource, 'status.traffic', null)) return undefined;\n  return resource.status.traffic.reduce((acc, curr) => {\n    const el = revisions.find((rev) => curr.revisionName === rev.metadata.name);\n    return el ? [...acc, el] : acc;\n  }, []);\n};\n\n/**\n * Form Node data for revisions/event/service sources\n */\nexport const getKnativeTopologyNodeItems = (\n  resource: K8sResourceKind,\n  type: string,\n  resources?: TopologyDataResources,\n): Node[] => {\n  const nodes = [];\n  const children: string[] = [];\n  if (type === NodeType.KnService && resources && resources.configurations) {\n    const configurations = getOwnedResources(resource, resources.configurations.data);\n    const configUidData = _.get(configurations[0], ['metadata', 'uid']);\n    const ChildData = _.filter(resources.revisions.data, {\n      metadata: {\n        ownerReferences: [{ uid: configUidData }],\n      },\n    });\n    _.forEach(filterRevisionsBaseOnTrafficStatus(resource, ChildData), (c) => {\n      const uidRev = c.metadata.uid;\n      children.push(uidRev);\n      nodes.push(getTopologyNodeItem(c, NodeType.Revision));\n    });\n  }\n  nodes.push(getTopologyNodeItem(resource, type, children));\n  return nodes;\n};\n\n/**\n * Form Edge data for event sources\n */\nexport const getEventTopologyEdgeItems = (resource: K8sResourceKind, { data }): Edge[] => {\n  const uid = _.get(resource, ['metadata', 'uid']);\n  const sinkSvc = _.get(resource, 'spec.sink.ref', null) || _.get(resource, 'spec.sink', null);\n  const edges = [];\n  if (sinkSvc && sinkSvc.kind === knServiceModel.kind) {\n    _.forEach(data, (res) => {\n      const resname = _.get(res, ['metadata', 'name']);\n      const resUid = _.get(res, ['metadata', 'uid']);\n      if (resname === sinkSvc.name) {\n        edges.push({\n          id: `${uid}_${resUid}`,\n          type: EdgeType.EventSource,\n          source: uid,\n          target: resUid,\n        });\n      }\n    });\n  }\n  return edges;\n};\n\n/**\n * Form Edge data for service sources with traffic data\n */\nexport const getTrafficTopologyEdgeItems = (resource: K8sResourceKind, { data }): Edge[] => {\n  const uid = _.get(resource, ['metadata', 'uid']);\n  const trafficSvc = _.get(resource, ['status', 'traffic'], []);\n  const edges = [];\n  _.forEach(trafficSvc, (res) => {\n    const resname = _.get(res, ['revisionName']);\n    const trafficPercent = _.get(res, ['percent']);\n    const revisionObj = _.find(data, (rev) => {\n      const revname = _.get(rev, ['metadata', 'name']);\n      return revname === resname;\n    });\n    const resUid = _.get(revisionObj, ['metadata', 'uid'], null);\n    if (resUid) {\n      const revisionIndex = _.findIndex(edges, (edge) => edge.id === `${uid}_${resUid}`);\n      if (revisionIndex >= 0) {\n        edges[revisionIndex].data.percent += trafficPercent;\n      } else {\n        edges.push({\n          id: `${uid}_${resUid}`,\n          type: EdgeType.Traffic,\n          source: uid,\n          target: resUid,\n          data: { percent: trafficPercent },\n        });\n      }\n    }\n  });\n  return edges;\n};\n\n/**\n * create all data that need to be shown on a topology data for knative service\n */\nexport const createTopologyServiceNodeData = (\n  svcRes: TopologyOverviewItem,\n  operatorBackedServiceKindMap: OperatorBackedServiceKindMap,\n  type: string,\n): TopologyDataObject => {\n  const { pipelines = [], pipelineRuns = [] } = svcRes;\n  const { obj: knativeSvc } = svcRes;\n  const uid = _.get(knativeSvc, 'metadata.uid');\n  const labels = _.get(knativeSvc, 'metadata.labels', {});\n  const annotations = _.get(knativeSvc, 'metadata.annotations', {});\n  const nodeResourceKind = _.get(knativeSvc, 'metadata.ownerReferences[0].kind');\n  return {\n    id: uid,\n    name: _.get(knativeSvc, 'metadata.name') || labels['app.kubernetes.io/instance'],\n    type,\n    resources: { ...svcRes },\n    operatorBackedService: nodeResourceKind in operatorBackedServiceKindMap,\n    data: {\n      url: knativeSvc.status?.url || '',\n      kind: referenceFor(knativeSvc),\n      editURL: annotations['app.openshift.io/edit-url'],\n      vcsURI: annotations['app.openshift.io/vcs-uri'],\n      isKnativeResource: true,\n      connectedPipeline: {\n        pipeline: pipelines[0],\n        pipelineRuns,\n      },\n      build: svcRes.buildConfigs?.[0]?.builds?.[0],\n    },\n  };\n};\n\nexport const transformKnNodeData = (\n  knResourcesData: K8sResourceKind[],\n  type: string,\n  resources: TopologyDataResources,\n  allResources: K8sResourceKind[],\n  operatorBackedServiceKindMap: OperatorBackedServiceKindMap,\n  utils?: Function[],\n): TopologyDataModel => {\n  const knDataModel: TopologyDataModel = {\n    graph: { nodes: [], edges: [], groups: [] },\n    topology: {},\n  };\n  const serviceBindingRequests = _.get(resources, 'serviceBindingRequests.data');\n  _.forEach(knResourcesData, (res) => {\n    const { uid } = res.metadata;\n    const item = createKnativeDeploymentItems(res, resources, utils);\n    switch (type) {\n      case NodeType.EventSource: {\n        knDataModel.topology[uid] = createTopologyNodeData(\n          item,\n          type,\n          getImageForIconClass(`icon-openshift`),\n        );\n        knDataModel.graph.nodes.push(...getKnativeTopologyNodeItems(res, type, resources));\n        knDataModel.graph.edges.push(...getEventTopologyEdgeItems(res, resources.ksservices));\n        const newGroup = getTopologyGroupItems(res);\n        mergeGroup(newGroup, knDataModel.graph.groups);\n        break;\n      }\n      case NodeType.Revision: {\n        const revisionItem = _.omit(item, ['pipelines', 'pipelineRuns', 'buildConfigs']);\n        knDataModel.topology[uid] = createTopologyNodeData(\n          revisionItem,\n          type,\n          getImageForIconClass(`icon-openshift`),\n        );\n        break;\n      }\n      case NodeType.KnService: {\n        knDataModel.topology[uid] = createTopologyServiceNodeData(\n          item,\n          operatorBackedServiceKindMap,\n          type,\n        );\n        knDataModel.graph.nodes.push(...getKnativeTopologyNodeItems(res, type, resources));\n        knDataModel.graph.edges.push(\n          ...getTrafficTopologyEdgeItems(res, resources.revisions),\n          ...getTopologyEdgeItems(res, allResources, serviceBindingRequests),\n        );\n        const newGroup = getTopologyGroupItems(res);\n        mergeGroup(newGroup, knDataModel.graph.groups);\n        break;\n      }\n      default:\n        break;\n    }\n  });\n\n  return knDataModel;\n};\n\nexport const createKnativeEventSourceSink = (\n  source: K8sResourceKind,\n  target: K8sResourceKind,\n): Promise<K8sResourceKind> => {\n  if (!source || !target || source === target) {\n    return Promise.reject();\n  }\n  const targetName = _.get(target, 'metadata.name');\n  const eventSourceObj = _.omit(source, 'status');\n  const sink = {\n    ref: {\n      apiVersion: target.apiVersion,\n      kind: target.kind,\n      name: targetName,\n    },\n  };\n  const updatePayload = {\n    ...eventSourceObj,\n    spec: { ...eventSourceObj.spec, sink },\n  };\n  return k8sUpdate(modelFor(referenceFor(source)), updatePayload);\n};\n\nexport const createTopologySinkConnection = (\n  source: TopologyDataObject,\n  target: TopologyDataObject,\n): Promise<K8sResourceKind> => {\n  if (!source || !target || source === target) {\n    return Promise.reject();\n  }\n  const sourceObj = getTopologyResourceObject(source);\n  const targetObj = getTopologyResourceObject(target);\n\n  return createKnativeEventSourceSink(sourceObj, targetObj);\n};\n\nexport const createSinkConnection = (\n  sourceNode: TopologyNode,\n  targetNode: TopologyNode,\n): Promise<K8sResourceKind> => {\n  return createTopologySinkConnection(sourceNode.getData(), targetNode.getData());\n};\n"]}]}