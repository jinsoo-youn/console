{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/descriptors/spec/match-expressions.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/descriptors/spec/match-expressions.tsx","mtime":1615298458700},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport { MinusCircleIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { Dropdown } from '@console/internal/components/utils';\nconst ALL_OPERATORS = [\n    'DoesNotExist',\n    'Equals',\n    'Exists',\n    'In',\n    'NotEqual',\n    'NotIn',\n];\nconst MatchExpression = ({ expression, onChange = () => { }, allowedOperators = ALL_OPERATORS, onClickRemove = () => { }, }) => (React.createElement(\"div\", { className: \"row key-operator-value__row\" },\n    React.createElement(\"div\", { className: \"col-md-4 col-xs-5 key-operator-value__name-field\" },\n        React.createElement(\"div\", { className: \"key-operator-value__heading hidden-md hidden-lg text-secondary text-uppercase\" }, \"Key\"),\n        React.createElement(\"input\", { type: \"text\", className: \"pf-c-form-control\", value: expression.key, onChange: (e) => onChange(Object.assign(Object.assign({}, expression), { key: e.target.value })) })),\n    React.createElement(\"div\", { className: \"col-md-3 col-xs-5 key-operator-value__operator-field\" },\n        React.createElement(\"div\", { className: \"key-operator-value__heading hidden-md hidden-lg text-secondary text-uppercase\" }, \"Operator\"),\n        React.createElement(Dropdown, { dropDownClassName: \"dropdown--full-width\", items: allowedOperators.reduce((acc, o) => (Object.assign(Object.assign({}, acc), { [o]: o })), {}), onChange: (operator) => onChange(Object.assign(Object.assign({}, expression), { operator })), selectedKey: expression.operator, title: expression.operator })),\n    React.createElement(\"div\", { className: \"col-md-3 col-xs-5 key-operator-value__value-field key-operator-value__value-field--stacked\" },\n        React.createElement(\"div\", { className: \"key-operator-value__heading hidden-md hidden-lg text-secondary text-uppercase\" }, \"Value\"),\n        React.createElement(\"input\", { className: \"pf-c-form-control\", type: \"text\", value: expression === null || expression === void 0 ? void 0 : expression.value, onChange: (e) => { var _a; return onChange(Object.assign(Object.assign({}, expression), { value: (_a = e === null || e === void 0 ? void 0 : e.target) === null || _a === void 0 ? void 0 : _a.value })); }, readOnly: ['Exists', 'DoesNotExist'].includes(expression.operator) })),\n    React.createElement(\"div\", { className: \"col-xs-1 key-operator-value__action key-operator-value__action--stacked\" },\n        React.createElement(\"div\", { className: \"key-operator-value__heading key-operator-value__heading-button hidden-md hidden-lg\" }),\n        React.createElement(Button, { type: \"button\", onClick: onClickRemove, \"aria-label\": \"Delete\", className: \"key-operator-value__delete-button\", variant: \"plain\" },\n            React.createElement(MinusCircleIcon, null)))));\nexport const MatchExpressions = ({ matchExpressions = [], onChange = () => { }, // Default to noop\nallowedOperators = ALL_OPERATORS, uid = '', }) => {\n    const updateExpression = (index, newExpression) => onChange(matchExpressions.map((exp, i) => (i === index ? newExpression : exp)));\n    const removeExpression = (index) => onChange(matchExpressions.filter((_exp, i) => i !== index));\n    const addExpression = () => onChange([...matchExpressions, { key: '', operator: 'Exists' }]);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: \"row key-operator-value__heading hidden-sm hidden-xs\" },\n            React.createElement(\"div\", { className: \"col-md-4 text-secondary text-uppercase\" }, \"Key\"),\n            React.createElement(\"div\", { className: \"col-md-3 text-secondary text-uppercase\" }, \"Operator\"),\n            React.createElement(\"div\", { className: \"col-md-3 text-secondary text-uppercase\" }, \"Value\")),\n        matchExpressions.map((expression, index) => (\n        // Have to use array index in the key bc any other unique id whould have to use editable fields.\n        React.createElement(MatchExpression\n        // eslint-disable-next-line react/no-array-index-key\n        , { \n            // eslint-disable-next-line react/no-array-index-key\n            key: `${uid}-match-expression-${index}`, expression: expression, allowedOperators: allowedOperators, onClickRemove: () => removeExpression(index), onChange: (newExpression) => updateExpression(index, newExpression) }))),\n        React.createElement(\"div\", { className: \"row\" },\n            React.createElement(Button, { type: \"button\", onClick: addExpression, variant: \"link\" },\n                React.createElement(PlusCircleIcon, { className: \"co-icon-space-r\" }),\n                \"Add More\"))));\n};\nMatchExpressions.displayName = 'MatchExpressions';\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/descriptors/spec/match-expressions.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/descriptors/spec/match-expressions.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,MAAM,EAAE,MAAM,wBAAwB,CAAC;AAChD,OAAO,EAAE,eAAe,EAAE,cAAc,EAAE,MAAM,yBAAyB,CAAC;AAE1E,OAAO,EAAE,QAAQ,EAAE,MAAM,oCAAoC,CAAC;AAE9D,MAAM,aAAa,GAAkC;IACnD,cAAc;IACd,QAAQ;IACR,QAAQ;IACR,IAAI;IACJ,UAAU;IACV,OAAO;CACR,CAAC;AAEF,MAAM,eAAe,GAAmC,CAAC,EACvD,UAAU,EACV,QAAQ,GAAG,GAAG,EAAE,GAAE,CAAC,EACnB,gBAAgB,GAAG,aAAa,EAChC,aAAa,GAAG,GAAG,EAAE,GAAE,CAAC,GACzB,EAAE,EAAE,CAAC,CACJ,6BAAK,SAAS,EAAC,6BAA6B;IAC1C,6BAAK,SAAS,EAAC,kDAAkD;QAC/D,6BAAK,SAAS,EAAC,+EAA+E,UAExF;QACN,+BACE,IAAI,EAAC,MAAM,EACX,SAAS,EAAC,mBAAmB,EAC7B,KAAK,EAAE,UAAU,CAAC,GAAG,EACrB,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE,CAAC,QAAQ,iCAAM,UAAU,KAAE,GAAG,EAAE,CAAC,CAAC,MAAM,CAAC,KAAK,IAAG,GACjE,CACE;IACN,6BAAK,SAAS,EAAC,sDAAsD;QACnE,6BAAK,SAAS,EAAC,+EAA+E,eAExF;QACN,oBAAC,QAAQ,IACP,iBAAiB,EAAC,sBAAsB,EACxC,KAAK,EAAE,gBAAgB,CAAC,MAAM,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,iCAAM,GAAG,KAAE,CAAC,CAAC,CAAC,EAAE,CAAC,IAAG,EAAE,EAAE,CAAC,EACpE,QAAQ,EAAE,CAAC,QAAqC,EAAE,EAAE,CAAC,QAAQ,iCAAM,UAAU,KAAE,QAAQ,IAAG,EAC1F,WAAW,EAAE,UAAU,CAAC,QAAQ,EAChC,KAAK,EAAE,UAAU,CAAC,QAAQ,GAC1B,CACE;IACN,6BAAK,SAAS,EAAC,4FAA4F;QACzG,6BAAK,SAAS,EAAC,+EAA+E,YAExF;QACN,+BACE,SAAS,EAAC,mBAAmB,EAC7B,IAAI,EAAC,MAAM,EACX,KAAK,EAAE,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,KAAK,EACxB,QAAQ,EAAE,CAAC,CAAC,EAAE,EAAE,WAAC,OAAA,QAAQ,iCAAM,UAAU,KAAE,KAAK,QAAE,CAAC,aAAD,CAAC,uBAAD,CAAC,CAAE,MAAM,0CAAE,KAAK,IAAG,CAAA,EAAA,EACrE,QAAQ,EAAE,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAC,QAAQ,CAAC,UAAU,CAAC,QAAQ,CAAC,GAClE,CACE;IACN,6BAAK,SAAS,EAAC,yEAAyE;QACtF,6BAAK,SAAS,EAAC,oFAAoF,GAAG;QACtG,oBAAC,MAAM,IACL,IAAI,EAAC,QAAQ,EACb,OAAO,EAAE,aAAa,gBACX,QAAQ,EACnB,SAAS,EAAC,mCAAmC,EAC7C,OAAO,EAAC,OAAO;YAEf,oBAAC,eAAe,OAAG,CACZ,CACL,CACF,CACP,CAAC;AAEF,MAAM,CAAC,MAAM,gBAAgB,GAAoC,CAAC,EAChE,gBAAgB,GAAG,EAAE,EACrB,QAAQ,GAAG,GAAG,EAAE,GAAE,CAAC,EAAE,kBAAkB;AACvC,gBAAgB,GAAG,aAAa,EAChC,GAAG,GAAG,EAAE,GACT,EAAE,EAAE;IACH,MAAM,gBAAgB,GAAG,CAAC,KAAa,EAAE,aAA8B,EAAQ,EAAE,CAC/E,QAAQ,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,GAAG,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAElF,MAAM,gBAAgB,GAAG,CAAC,KAAa,EAAQ,EAAE,CAC/C,QAAQ,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC;IAE9D,MAAM,aAAa,GAAG,GAAS,EAAE,CAC/B,QAAQ,CAAC,CAAC,GAAG,gBAAgB,EAAE,EAAE,GAAG,EAAE,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC,CAAC,CAAC;IAEnE,OAAO,CACL;QACE,6BAAK,SAAS,EAAC,qDAAqD;YAClE,6BAAK,SAAS,EAAC,wCAAwC,UAAU;YACjE,6BAAK,SAAS,EAAC,wCAAwC,eAAe;YACtE,6BAAK,SAAS,EAAC,wCAAwC,YAAY,CAC/D;QACL,gBAAgB,CAAC,GAAG,CAAC,CAAC,UAAU,EAAE,KAAK,EAAE,EAAE,CAAC;QAC3C,gGAAgG;QAChG,oBAAC,eAAe;QACd,oDAAoD;;YAApD,oDAAoD;YACpD,GAAG,EAAE,GAAG,GAAG,qBAAqB,KAAK,EAAE,EACvC,UAAU,EAAE,UAAU,EACtB,gBAAgB,EAAE,gBAAgB,EAClC,aAAa,EAAE,GAAG,EAAE,CAAC,gBAAgB,CAAC,KAAK,CAAC,EAC5C,QAAQ,EAAE,CAAC,aAAa,EAAE,EAAE,CAAC,gBAAgB,CAAC,KAAK,EAAE,aAAa,CAAC,GACnE,CACH,CAAC;QACF,6BAAK,SAAS,EAAC,KAAK;YAClB,oBAAC,MAAM,IAAC,IAAI,EAAC,QAAQ,EAAC,OAAO,EAAE,aAAa,EAAE,OAAO,EAAC,MAAM;gBAC1D,oBAAC,cAAc,IAAC,SAAS,EAAC,iBAAiB,GAAG;2BAEvC,CACL,CACL,CACJ,CAAC;AACJ,CAAC,CAAC;AAgBF,gBAAgB,CAAC,WAAW,GAAG,kBAAkB,CAAC","sourcesContent":["import * as React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport { MinusCircleIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { MatchExpression } from '@console/internal/module/k8s';\nimport { Dropdown } from '@console/internal/components/utils';\n\nconst ALL_OPERATORS: MatchExpression['operator'][] = [\n  'DoesNotExist',\n  'Equals',\n  'Exists',\n  'In',\n  'NotEqual',\n  'NotIn',\n];\n\nconst MatchExpression: React.FC<MatchExpressionProps> = ({\n  expression,\n  onChange = () => {},\n  allowedOperators = ALL_OPERATORS,\n  onClickRemove = () => {},\n}) => (\n  <div className=\"row key-operator-value__row\">\n    <div className=\"col-md-4 col-xs-5 key-operator-value__name-field\">\n      <div className=\"key-operator-value__heading hidden-md hidden-lg text-secondary text-uppercase\">\n        Key\n      </div>\n      <input\n        type=\"text\"\n        className=\"pf-c-form-control\"\n        value={expression.key}\n        onChange={(e) => onChange({ ...expression, key: e.target.value })}\n      />\n    </div>\n    <div className=\"col-md-3 col-xs-5 key-operator-value__operator-field\">\n      <div className=\"key-operator-value__heading hidden-md hidden-lg text-secondary text-uppercase\">\n        Operator\n      </div>\n      <Dropdown\n        dropDownClassName=\"dropdown--full-width\"\n        items={allowedOperators.reduce((acc, o) => ({ ...acc, [o]: o }), {})}\n        onChange={(operator: MatchExpression['operator']) => onChange({ ...expression, operator })}\n        selectedKey={expression.operator}\n        title={expression.operator}\n      />\n    </div>\n    <div className=\"col-md-3 col-xs-5 key-operator-value__value-field key-operator-value__value-field--stacked\">\n      <div className=\"key-operator-value__heading hidden-md hidden-lg text-secondary text-uppercase\">\n        Value\n      </div>\n      <input\n        className=\"pf-c-form-control\"\n        type=\"text\"\n        value={expression?.value}\n        onChange={(e) => onChange({ ...expression, value: e?.target?.value })}\n        readOnly={['Exists', 'DoesNotExist'].includes(expression.operator)}\n      />\n    </div>\n    <div className=\"col-xs-1 key-operator-value__action key-operator-value__action--stacked\">\n      <div className=\"key-operator-value__heading key-operator-value__heading-button hidden-md hidden-lg\" />\n      <Button\n        type=\"button\"\n        onClick={onClickRemove}\n        aria-label=\"Delete\"\n        className=\"key-operator-value__delete-button\"\n        variant=\"plain\"\n      >\n        <MinusCircleIcon />\n      </Button>\n    </div>\n  </div>\n);\n\nexport const MatchExpressions: React.FC<MatchExpressionsProps> = ({\n  matchExpressions = [],\n  onChange = () => {}, // Default to noop\n  allowedOperators = ALL_OPERATORS,\n  uid = '',\n}) => {\n  const updateExpression = (index: number, newExpression: MatchExpression): void =>\n    onChange(matchExpressions.map((exp, i) => (i === index ? newExpression : exp)));\n\n  const removeExpression = (index: number): void =>\n    onChange(matchExpressions.filter((_exp, i) => i !== index));\n\n  const addExpression = (): void =>\n    onChange([...matchExpressions, { key: '', operator: 'Exists' }]);\n\n  return (\n    <>\n      <div className=\"row key-operator-value__heading hidden-sm hidden-xs\">\n        <div className=\"col-md-4 text-secondary text-uppercase\">Key</div>\n        <div className=\"col-md-3 text-secondary text-uppercase\">Operator</div>\n        <div className=\"col-md-3 text-secondary text-uppercase\">Value</div>\n      </div>\n      {matchExpressions.map((expression, index) => (\n        // Have to use array index in the key bc any other unique id whould have to use editable fields.\n        <MatchExpression\n          // eslint-disable-next-line react/no-array-index-key\n          key={`${uid}-match-expression-${index}`}\n          expression={expression}\n          allowedOperators={allowedOperators}\n          onClickRemove={() => removeExpression(index)}\n          onChange={(newExpression) => updateExpression(index, newExpression)}\n        />\n      ))}\n      <div className=\"row\">\n        <Button type=\"button\" onClick={addExpression} variant=\"link\">\n          <PlusCircleIcon className=\"co-icon-space-r\" />\n          Add More\n        </Button>\n      </div>\n    </>\n  );\n};\n\nexport type MatchExpressionsProps = {\n  matchExpressions: MatchExpression[];\n  onChange?: (matchExpressions: MatchExpression[]) => void;\n  allowedOperators?: MatchExpression['operator'][];\n  uid?: string;\n};\n\nexport type MatchExpressionProps = {\n  expression: MatchExpression;\n  onChange?: (expression: MatchExpression) => void;\n  onClickRemove?: () => void;\n  allowedOperators?: MatchExpression['operator'][];\n};\n\nMatchExpressions.displayName = 'MatchExpressions';\n"]}]}