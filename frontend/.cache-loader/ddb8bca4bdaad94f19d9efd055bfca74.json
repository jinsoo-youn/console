{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/nodes/node-dashboard/NodeDashboard.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/nodes/node-dashboard/NodeDashboard.tsx","mtime":1615298458600},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport Dashboard from '@console/shared/src/components/dashboard/Dashboard';\nimport DashboardGrid from '@console/shared/src/components/dashboard/DashboardGrid';\nimport { NodeDashboardContext } from './NodeDashboardContext';\nimport InventoryCard from './InventoryCard';\nimport DetailsCard from './DetailsCard';\nimport StatusCard from './StatusCard';\nimport ActivityCard from './ActivityCard';\nimport UtilizationCard from './UtilizationCard';\nconst leftCards = [{ Card: DetailsCard }, { Card: InventoryCard }];\nconst mainCards = [{ Card: StatusCard }, { Card: UtilizationCard }];\nconst rightCards = [{ Card: ActivityCard }];\nexport var ActionType;\n(function (ActionType) {\n    ActionType[\"CPU_LIMIT\"] = \"CPU_LIMIT\";\n    ActionType[\"MEMORY_LIMIT\"] = \"MEMORY_LIMIT\";\n    ActionType[\"HEALTH_CHECK\"] = \"HEALTH_CHECK\";\n    ActionType[\"OBJ\"] = \"OBJ\";\n})(ActionType || (ActionType = {}));\nexport const initialState = (obj) => ({\n    obj,\n    cpuLimit: undefined,\n    memoryLimit: undefined,\n    healthCheck: undefined,\n});\nexport const reducer = (state, action) => {\n    switch (action.type) {\n        case ActionType.CPU_LIMIT: {\n            if (_.isEqual(action.payload, state.cpuLimit)) {\n                return state;\n            }\n            return Object.assign(Object.assign({}, state), { cpuLimit: action.payload });\n        }\n        case ActionType.MEMORY_LIMIT: {\n            if (_.isEqual(action.payload, state.memoryLimit)) {\n                return state;\n            }\n            return Object.assign(Object.assign({}, state), { memoryLimit: action.payload });\n        }\n        case ActionType.HEALTH_CHECK: {\n            if (_.isEqual(action.payload, state.healthCheck)) {\n                return state;\n            }\n            return Object.assign(Object.assign({}, state), { healthCheck: action.payload });\n        }\n        case ActionType.OBJ: {\n            if (action.payload === state.obj) {\n                return state;\n            }\n            return Object.assign(Object.assign({}, state), { obj: action.payload });\n        }\n        default:\n            return state;\n    }\n};\nconst NodeDashboard = ({ obj }) => {\n    const [state, dispatch] = React.useReducer(reducer, initialState(obj));\n    if (obj !== state.obj) {\n        dispatch({ type: ActionType.OBJ, payload: obj });\n    }\n    const setCPULimit = React.useCallback((payload) => dispatch({ type: ActionType.CPU_LIMIT, payload }), []);\n    const setMemoryLimit = React.useCallback((payload) => dispatch({ type: ActionType.MEMORY_LIMIT, payload }), []);\n    const setHealthCheck = React.useCallback((payload) => dispatch({ type: ActionType.HEALTH_CHECK, payload }), []);\n    const context = {\n        obj,\n        cpuLimit: state.cpuLimit,\n        memoryLimit: state.memoryLimit,\n        healthCheck: state.healthCheck,\n        setCPULimit,\n        setMemoryLimit,\n        setHealthCheck,\n    };\n    return (React.createElement(NodeDashboardContext.Provider, { value: context },\n        React.createElement(Dashboard, null,\n            React.createElement(DashboardGrid, { mainCards: mainCards, leftCards: leftCards, rightCards: rightCards }))));\n};\nexport default NodeDashboard;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/nodes/node-dashboard/NodeDashboard.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/nodes/node-dashboard/NodeDashboard.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport Dashboard from '@console/shared/src/components/dashboard/Dashboard';\nimport DashboardGrid from '@console/shared/src/components/dashboard/DashboardGrid';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport { LimitRequested } from '@console/shared/src/components/dashboard/utilization-card/UtilizationItem';\n\nimport { NodeDashboardContext, HealthCheck } from './NodeDashboardContext';\nimport InventoryCard from './InventoryCard';\nimport DetailsCard from './DetailsCard';\nimport StatusCard from './StatusCard';\nimport ActivityCard from './ActivityCard';\nimport UtilizationCard from './UtilizationCard';\n\nconst leftCards = [{ Card: DetailsCard }, { Card: InventoryCard }];\nconst mainCards = [{ Card: StatusCard }, { Card: UtilizationCard }];\nconst rightCards = [{ Card: ActivityCard }];\n\nexport enum ActionType {\n  CPU_LIMIT = 'CPU_LIMIT',\n  MEMORY_LIMIT = 'MEMORY_LIMIT',\n  HEALTH_CHECK = 'HEALTH_CHECK',\n  OBJ = 'OBJ',\n}\n\nexport const initialState = (obj: NodeKind): NodeDashboardState => ({\n  obj,\n  cpuLimit: undefined,\n  memoryLimit: undefined,\n  healthCheck: undefined,\n});\n\nexport const reducer = (state: NodeDashboardState, action: NodeDashboardAction) => {\n  switch (action.type) {\n    case ActionType.CPU_LIMIT: {\n      if (_.isEqual(action.payload, state.cpuLimit)) {\n        return state;\n      }\n      return {\n        ...state,\n        cpuLimit: action.payload,\n      };\n    }\n    case ActionType.MEMORY_LIMIT: {\n      if (_.isEqual(action.payload, state.memoryLimit)) {\n        return state;\n      }\n      return {\n        ...state,\n        memoryLimit: action.payload,\n      };\n    }\n    case ActionType.HEALTH_CHECK: {\n      if (_.isEqual(action.payload, state.healthCheck)) {\n        return state;\n      }\n      return {\n        ...state,\n        healthCheck: action.payload,\n      };\n    }\n    case ActionType.OBJ: {\n      if (action.payload === state.obj) {\n        return state;\n      }\n      return {\n        ...state,\n        obj: action.payload,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nconst NodeDashboard: React.FC<NodeDashboardProps> = ({ obj }) => {\n  const [state, dispatch] = React.useReducer(reducer, initialState(obj));\n\n  if (obj !== state.obj) {\n    dispatch({ type: ActionType.OBJ, payload: obj });\n  }\n\n  const setCPULimit = React.useCallback(\n    (payload: LimitRequested) => dispatch({ type: ActionType.CPU_LIMIT, payload }),\n    [],\n  );\n  const setMemoryLimit = React.useCallback(\n    (payload: LimitRequested) => dispatch({ type: ActionType.MEMORY_LIMIT, payload }),\n    [],\n  );\n  const setHealthCheck = React.useCallback(\n    (payload: HealthCheck) => dispatch({ type: ActionType.HEALTH_CHECK, payload }),\n    [],\n  );\n\n  const context = {\n    obj,\n    cpuLimit: state.cpuLimit,\n    memoryLimit: state.memoryLimit,\n    healthCheck: state.healthCheck,\n    setCPULimit,\n    setMemoryLimit,\n    setHealthCheck,\n  };\n\n  return (\n    <NodeDashboardContext.Provider value={context}>\n      <Dashboard>\n        <DashboardGrid mainCards={mainCards} leftCards={leftCards} rightCards={rightCards} />\n      </Dashboard>\n    </NodeDashboardContext.Provider>\n  );\n};\n\nexport default NodeDashboard;\n\ntype NodeDashboardProps = {\n  obj: NodeKind;\n};\n\ntype NodeDashboardState = {\n  obj: NodeKind;\n  cpuLimit: LimitRequested;\n  memoryLimit: LimitRequested;\n  healthCheck: HealthCheck;\n};\n\ntype NodeDashboardAction =\n  | { type: ActionType.CPU_LIMIT; payload: LimitRequested }\n  | { type: ActionType.MEMORY_LIMIT; payload: LimitRequested }\n  | { type: ActionType.HEALTH_CHECK; payload: HealthCheck }\n  | { type: ActionType.OBJ; payload: NodeKind };\n"]}]}