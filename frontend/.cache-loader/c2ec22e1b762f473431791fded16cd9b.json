{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/behavior/withCreateConnector.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/behavior/withCreateConnector.tsx","mtime":1615298458710},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { observer } from 'mobx-react';\nimport { hullPath } from '../utils/svg-utils';\nimport DefaultCreateConnector from '../components/DefaultCreateConnector';\nimport Point from '../geom/Point';\nimport Layer from '../components/layers/Layer';\nimport { ContextMenu, ContextMenuItem } from '../components/contextmenu';\nimport { isNode, AnchorEnd, isGraph } from '../types';\nimport { useDndDrag } from './useDndDrag';\nexport const CREATE_CONNECTOR_OPERATION = '#createconnector#';\nexport const CREATE_CONNECTOR_DROP_TYPE = '#createConnector#';\nconst DEFAULT_HANDLE_ANGLE = 12 * (Math.PI / 180);\nconst DEFAULT_HANDLE_LENGTH = 32;\nconst CreateConnectorWidget = observer((props) => {\n    var _a;\n    const { element, onKeepAlive, onCreate, ConnectorComponent, handleAngle = DEFAULT_HANDLE_ANGLE, handleLength = DEFAULT_HANDLE_LENGTH, contextMenuClass, } = props;\n    const [prompt, setPrompt] = React.useState(null);\n    const [active, setActive] = React.useState(false);\n    const hintsRef = React.useRef();\n    const spec = React.useMemo(() => {\n        const dragSourceSpec = {\n            item: { type: CREATE_CONNECTOR_DROP_TYPE },\n            operation: { type: CREATE_CONNECTOR_OPERATION },\n            begin: (monitor, dragProps) => {\n                setActive(true);\n                return dragProps.element;\n            },\n            drag: (event, monitor, p) => {\n                p.element.raise();\n            },\n            end: (dropResult, monitor, dragProps) => {\n                const event = monitor.getDragEvent();\n                if ((isNode(dropResult) || isGraph(dropResult)) && event) {\n                    const choices = dragProps.onCreate(dragProps.element, dropResult, event);\n                    if (choices && choices.length) {\n                        setPrompt({ element: dragProps.element, target: dropResult, event, choices });\n                        return;\n                    }\n                }\n                setActive(false);\n                dragProps.onKeepAlive(false);\n            },\n            collect: (monitor) => ({\n                dragging: !!monitor.getItem(),\n                event: monitor.isDragging() ? monitor.getDragEvent() : undefined,\n                hints: monitor.getDropHints(),\n            }),\n        };\n        return dragSourceSpec;\n    }, [setActive]);\n    const [{ dragging, event, hints }, dragRef] = useDndDrag(spec, props);\n    if (!active && dragging && !event) {\n        // another connector is dragging right now\n        return null;\n    }\n    if (dragging) {\n        // store the latest hints\n        hintsRef.current = hints;\n    }\n    const dragEvent = prompt ? prompt.event : event;\n    let startPoint;\n    let endPoint;\n    if (dragEvent) {\n        endPoint = new Point(dragEvent.x, dragEvent.y);\n        startPoint = element.getAnchor(AnchorEnd.source).getLocation(endPoint);\n    }\n    else {\n        const bounds = element.getBounds();\n        const referencePoint = new Point(bounds.right(), Math.tan(handleAngle) * (bounds.width / 2) + bounds.y + bounds.height / 2);\n        startPoint = element.getAnchor(AnchorEnd.source).getLocation(referencePoint);\n        endPoint = new Point(Math.cos(handleAngle) * handleLength + startPoint.x, Math.sin(handleAngle) * handleLength + startPoint.y);\n    }\n    // bring into the coordinate space of the element\n    element.translateFromParent(startPoint);\n    element.translateFromParent(endPoint);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Layer, { id: \"top\" },\n            React.createElement(\"g\", { className: \"topology-create-connector\", ref: dragRef, onMouseEnter: !active ? () => onKeepAlive(true) : undefined, onMouseLeave: !active ? () => onKeepAlive(false) : undefined },\n                React.createElement(ConnectorComponent, { startPoint: startPoint, endPoint: endPoint, dragging: dragging, hints: hintsRef.current || [] }),\n                !active && (React.createElement(\"path\", { d: hullPath([\n                        [startPoint.x, startPoint.y],\n                        [endPoint.x, endPoint.y],\n                    ], 7), fillOpacity: \"0\" })))),\n        prompt && (React.createElement(ContextMenu, { reference: { x: prompt.event.pageX, y: prompt.event.pageY }, className: contextMenuClass, open: true, onRequestClose: () => {\n                setActive(false);\n                onKeepAlive(false);\n            } }, React.isValidElement((_a = prompt.choices) === null || _a === void 0 ? void 0 : _a[0])\n            ? prompt.choices\n            : prompt.choices.map((c) => (React.createElement(ContextMenuItem, { key: c.label, onClick: () => {\n                    onCreate(prompt.element, prompt.target, prompt.event, c);\n                } }, c.label)))))));\n});\nexport const withCreateConnector = (onCreate, ConnectorComponent = DefaultCreateConnector, contextMenuClass, options) => (WrappedComponent) => {\n    const Component = (props) => {\n        const [show, setShow] = React.useState(false);\n        const [alive, setKeepAlive] = React.useState(false);\n        const onShowCreateConnector = React.useCallback(() => setShow(true), []);\n        const onHideCreateConnector = React.useCallback(() => setShow(false), []);\n        const onKeepAlive = React.useCallback((isAlive) => setKeepAlive(isAlive), [\n            setKeepAlive,\n        ]);\n        return (React.createElement(React.Fragment, null,\n            React.createElement(WrappedComponent, Object.assign({}, props, { onShowCreateConnector: onShowCreateConnector, onHideCreateConnector: onHideCreateConnector })),\n            (show || alive) && (React.createElement(CreateConnectorWidget, Object.assign({}, options, { element: props.element, onCreate: onCreate, onKeepAlive: onKeepAlive, ConnectorComponent: ConnectorComponent, contextMenuClass: contextMenuClass })))));\n    };\n    return observer(Component);\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/behavior/withCreateConnector.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/behavior/withCreateConnector.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { observer } from 'mobx-react';\nimport { hullPath } from '../utils/svg-utils';\nimport DefaultCreateConnector from '../components/DefaultCreateConnector';\nimport Point from '../geom/Point';\nimport Layer from '../components/layers/Layer';\nimport { ContextMenu, ContextMenuItem } from '../components/contextmenu';\nimport { Node, isNode, AnchorEnd, GraphElement, isGraph, Graph } from '../types';\nimport { DragSourceSpec, DragSourceMonitor, DragEvent } from './dnd-types';\nimport { useDndDrag } from './useDndDrag';\n\nexport const CREATE_CONNECTOR_OPERATION = '#createconnector#';\nexport const CREATE_CONNECTOR_DROP_TYPE = '#createConnector#';\n\nexport type ConnectorChoice = {\n  label: string;\n};\n\nexport type CreateConnectorOptions = {\n  handleAngle?: number;\n  handleLength?: number;\n};\n\ntype ConnectorComponentProps = {\n  startPoint: Point;\n  endPoint: Point;\n  hints: string[];\n  dragging: boolean;\n};\n\ntype CreateConnectorRenderer = React.ComponentType<ConnectorComponentProps>;\n\ntype CreateConnectorWidgetProps = {\n  element: Node;\n  onKeepAlive: (isAlive: boolean) => void;\n  onCreate: (\n    element: Node,\n    target: Node | Graph,\n    event: DragEvent,\n    choice?: ConnectorChoice,\n  ) => ConnectorChoice[] | void | undefined | null | React.ReactElement[];\n  ConnectorComponent: CreateConnectorRenderer;\n  contextMenuClass?: string;\n} & CreateConnectorOptions;\n\ntype CollectProps = {\n  event?: DragEvent;\n  dragging: boolean;\n  hints?: string[] | undefined;\n};\n\ntype PromptData = {\n  element: Node;\n  target: Node | Graph;\n  event: DragEvent;\n  choices: (ConnectorChoice | React.ReactElement)[];\n};\n\nconst DEFAULT_HANDLE_ANGLE = 12 * (Math.PI / 180);\nconst DEFAULT_HANDLE_LENGTH = 32;\n\nconst CreateConnectorWidget: React.FC<CreateConnectorWidgetProps> = observer((props) => {\n  const {\n    element,\n    onKeepAlive,\n    onCreate,\n    ConnectorComponent,\n    handleAngle = DEFAULT_HANDLE_ANGLE,\n    handleLength = DEFAULT_HANDLE_LENGTH,\n    contextMenuClass,\n  } = props;\n  const [prompt, setPrompt] = React.useState<PromptData | null>(null);\n  const [active, setActive] = React.useState(false);\n  const hintsRef = React.useRef<string[] | undefined>();\n\n  const spec = React.useMemo(() => {\n    const dragSourceSpec: DragSourceSpec<any, any, any, CollectProps> = {\n      item: { type: CREATE_CONNECTOR_DROP_TYPE },\n      operation: { type: CREATE_CONNECTOR_OPERATION },\n      begin: (monitor: DragSourceMonitor, dragProps: CreateConnectorWidgetProps) => {\n        setActive(true);\n        return dragProps.element;\n      },\n      drag: (event: DragEvent, monitor: DragSourceMonitor, p: CreateConnectorWidgetProps) => {\n        p.element.raise();\n      },\n      end: (\n        dropResult: GraphElement,\n        monitor: DragSourceMonitor,\n        dragProps: CreateConnectorWidgetProps,\n      ) => {\n        const event = monitor.getDragEvent();\n        if ((isNode(dropResult) || isGraph(dropResult)) && event) {\n          const choices = dragProps.onCreate(dragProps.element, dropResult, event);\n          if (choices && choices.length) {\n            setPrompt({ element: dragProps.element, target: dropResult, event, choices });\n            return;\n          }\n        }\n        setActive(false);\n        dragProps.onKeepAlive(false);\n      },\n      collect: (monitor) => ({\n        dragging: !!monitor.getItem(),\n        event: monitor.isDragging() ? monitor.getDragEvent() : undefined,\n        hints: monitor.getDropHints(),\n      }),\n    };\n    return dragSourceSpec;\n  }, [setActive]);\n  const [{ dragging, event, hints }, dragRef] = useDndDrag(spec, props);\n\n  if (!active && dragging && !event) {\n    // another connector is dragging right now\n    return null;\n  }\n\n  if (dragging) {\n    // store the latest hints\n    hintsRef.current = hints;\n  }\n\n  const dragEvent = prompt ? prompt.event : event;\n\n  let startPoint: Point;\n  let endPoint: Point;\n\n  if (dragEvent) {\n    endPoint = new Point(dragEvent.x, dragEvent.y);\n    startPoint = element.getAnchor(AnchorEnd.source).getLocation(endPoint);\n  } else {\n    const bounds = element.getBounds();\n    const referencePoint = new Point(\n      bounds.right(),\n      Math.tan(handleAngle) * (bounds.width / 2) + bounds.y + bounds.height / 2,\n    );\n    startPoint = element.getAnchor(AnchorEnd.source).getLocation(referencePoint);\n    endPoint = new Point(\n      Math.cos(handleAngle) * handleLength + startPoint.x,\n      Math.sin(handleAngle) * handleLength + startPoint.y,\n    );\n  }\n\n  // bring into the coordinate space of the element\n  element.translateFromParent(startPoint);\n  element.translateFromParent(endPoint);\n\n  return (\n    <>\n      <Layer id=\"top\">\n        <g\n          className=\"topology-create-connector\"\n          ref={dragRef}\n          onMouseEnter={!active ? () => onKeepAlive(true) : undefined}\n          onMouseLeave={!active ? () => onKeepAlive(false) : undefined}\n        >\n          <ConnectorComponent\n            startPoint={startPoint}\n            endPoint={endPoint}\n            dragging={dragging}\n            hints={hintsRef.current || []}\n          />\n          {!active && (\n            <path\n              d={hullPath(\n                [\n                  [startPoint.x, startPoint.y],\n                  [endPoint.x, endPoint.y],\n                ],\n                7,\n              )}\n              fillOpacity=\"0\"\n            />\n          )}\n        </g>\n      </Layer>\n      {prompt && (\n        <ContextMenu\n          reference={{ x: prompt.event.pageX, y: prompt.event.pageY }}\n          className={contextMenuClass}\n          open\n          onRequestClose={() => {\n            setActive(false);\n            onKeepAlive(false);\n          }}\n        >\n          {React.isValidElement(prompt.choices?.[0])\n            ? prompt.choices\n            : prompt.choices.map((c: ConnectorChoice) => (\n                <ContextMenuItem\n                  key={c.label}\n                  onClick={() => {\n                    onCreate(prompt.element, prompt.target, prompt.event, c);\n                  }}\n                >\n                  {c.label}\n                </ContextMenuItem>\n              ))}\n        </ContextMenu>\n      )}\n    </>\n  );\n});\n\ntype ElementProps = {\n  element: Node;\n};\n\nexport type WithCreateConnectorProps = {\n  onShowCreateConnector: () => void;\n  onHideCreateConnector: () => void;\n};\n\nexport const withCreateConnector = <P extends WithCreateConnectorProps & ElementProps>(\n  onCreate: React.ComponentProps<typeof CreateConnectorWidget>['onCreate'],\n  ConnectorComponent: CreateConnectorRenderer = DefaultCreateConnector,\n  contextMenuClass?: string,\n  options?: CreateConnectorOptions,\n) => (WrappedComponent: React.ComponentType<P>) => {\n  const Component: React.FC<Omit<P, keyof WithCreateConnectorProps>> = (props) => {\n    const [show, setShow] = React.useState(false);\n    const [alive, setKeepAlive] = React.useState(false);\n    const onShowCreateConnector = React.useCallback(() => setShow(true), []);\n    const onHideCreateConnector = React.useCallback(() => setShow(false), []);\n    const onKeepAlive = React.useCallback((isAlive: boolean) => setKeepAlive(isAlive), [\n      setKeepAlive,\n    ]);\n    return (\n      <>\n        <WrappedComponent\n          {...(props as any)}\n          onShowCreateConnector={onShowCreateConnector}\n          onHideCreateConnector={onHideCreateConnector}\n        />\n        {(show || alive) && (\n          <CreateConnectorWidget\n            {...options}\n            element={props.element}\n            onCreate={onCreate}\n            onKeepAlive={onKeepAlive}\n            ConnectorComponent={ConnectorComponent}\n            contextMenuClass={contextMenuClass}\n          />\n        )}\n      </>\n    );\n  };\n  return observer(Component);\n};\n"]}]}