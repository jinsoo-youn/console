{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/status/host-status.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/status/host-status.ts","mtime":1616735742440},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { getHostOperationalStatus, getHostProvisioningState, getHostErrorType } from '../selectors';\nimport { HOST_STATUS_TITLES, HOST_STATUS_DESCRIPTIONS, HOST_STATUS_ERROR, HOST_STATUS_DISCOVERED, HOST_PROGRESS_STATES, HOST_STATUS_DEPROVISIONING, HOST_STATUS_UNKNOWN, } from '../constants';\nimport { getNodeMaintenanceStatus } from './node-maintenance-status';\nexport const getBareMetalHostStatus = (host) => {\n    const operationalStatus = getHostOperationalStatus(host);\n    const provisioningState = getHostProvisioningState(host);\n    const errorType = getHostErrorType(host);\n    let hostStatus;\n    if (operationalStatus === HOST_STATUS_ERROR) {\n        if (errorType) {\n            hostStatus = errorType;\n        }\n        else {\n            hostStatus = HOST_STATUS_ERROR;\n        }\n    }\n    else if (operationalStatus === HOST_STATUS_DISCOVERED) {\n        hostStatus = HOST_STATUS_DISCOVERED;\n    }\n    else if (provisioningState) {\n        hostStatus = provisioningState;\n    }\n    else {\n        hostStatus = HOST_STATUS_UNKNOWN;\n    }\n    return {\n        status: hostStatus,\n        title: HOST_STATUS_TITLES[hostStatus] || hostStatus,\n        description: HOST_STATUS_DESCRIPTIONS[hostStatus],\n    };\n};\nexport const getHostStatus = ({ host, nodeMaintenance }) => {\n    const hostStatus = getBareMetalHostStatus(host);\n    if (hostStatus.status === HOST_STATUS_DEPROVISIONING)\n        return hostStatus;\n    return getNodeMaintenanceStatus(nodeMaintenance) || hostStatus;\n};\nexport const isHostInProgressState = (host) => HOST_PROGRESS_STATES.includes(getBareMetalHostStatus(host).status);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/status/host-status.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/status/host-status.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,wBAAwB,EAAE,wBAAwB,EAAE,gBAAgB,EAAE,MAAM,cAAc,CAAC;AACpG,OAAO,EACL,kBAAkB,EAClB,wBAAwB,EACxB,iBAAiB,EACjB,sBAAsB,EACtB,oBAAoB,EACpB,0BAA0B,EAC1B,mBAAmB,GACpB,MAAM,cAAc,CAAC;AAGtB,OAAO,EAAE,wBAAwB,EAAE,MAAM,2BAA2B,CAAC;AAErE,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,IAAuB,EAAe,EAAE;IAC7E,MAAM,iBAAiB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAC;IACzD,MAAM,iBAAiB,GAAG,wBAAwB,CAAC,IAAI,CAAC,CAAC;IACzD,MAAM,SAAS,GAAG,gBAAgB,CAAC,IAAI,CAAC,CAAC;IAEzC,IAAI,UAAU,CAAC;IAEf,IAAI,iBAAiB,KAAK,iBAAiB,EAAE;QAC3C,IAAI,SAAS,EAAE;YACb,UAAU,GAAG,SAAS,CAAC;SACxB;aAAM;YACL,UAAU,GAAG,iBAAiB,CAAC;SAChC;KACF;SAAM,IAAI,iBAAiB,KAAK,sBAAsB,EAAE;QACvD,UAAU,GAAG,sBAAsB,CAAC;KACrC;SAAM,IAAI,iBAAiB,EAAE;QAC5B,UAAU,GAAG,iBAAiB,CAAC;KAChC;SAAM;QACL,UAAU,GAAG,mBAAmB,CAAC;KAClC;IAED,OAAO;QACL,MAAM,EAAE,UAAU;QAClB,KAAK,EAAE,kBAAkB,CAAC,UAAU,CAAC,IAAI,UAAU;QACnD,WAAW,EAAE,wBAAwB,CAAC,UAAU,CAAC;KAClD,CAAC;AACJ,CAAC,CAAC;AASF,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,EAAE,IAAI,EAAE,eAAe,EAAmB,EAAe,EAAE;IACvF,MAAM,UAAU,GAAG,sBAAsB,CAAC,IAAI,CAAC,CAAC;IAChD,IAAI,UAAU,CAAC,MAAM,KAAK,0BAA0B;QAAE,OAAO,UAAU,CAAC;IACxE,OAAO,wBAAwB,CAAC,eAAe,CAAC,IAAI,UAAU,CAAC;AACjE,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,IAAuB,EAAW,EAAE,CACxE,oBAAoB,CAAC,QAAQ,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC","sourcesContent":["import { K8sResourceKind, MachineKind, NodeKind } from '@console/internal/module/k8s';\nimport { getHostOperationalStatus, getHostProvisioningState, getHostErrorType } from '../selectors';\nimport {\n  HOST_STATUS_TITLES,\n  HOST_STATUS_DESCRIPTIONS,\n  HOST_STATUS_ERROR,\n  HOST_STATUS_DISCOVERED,\n  HOST_PROGRESS_STATES,\n  HOST_STATUS_DEPROVISIONING,\n  HOST_STATUS_UNKNOWN,\n} from '../constants';\nimport { StatusProps } from '../components/types';\nimport { BareMetalHostKind } from '../types';\nimport { getNodeMaintenanceStatus } from './node-maintenance-status';\n\nexport const getBareMetalHostStatus = (host: BareMetalHostKind): StatusProps => {\n  const operationalStatus = getHostOperationalStatus(host);\n  const provisioningState = getHostProvisioningState(host);\n  const errorType = getHostErrorType(host);\n\n  let hostStatus;\n\n  if (operationalStatus === HOST_STATUS_ERROR) {\n    if (errorType) {\n      hostStatus = errorType;\n    } else {\n      hostStatus = HOST_STATUS_ERROR;\n    }\n  } else if (operationalStatus === HOST_STATUS_DISCOVERED) {\n    hostStatus = HOST_STATUS_DISCOVERED;\n  } else if (provisioningState) {\n    hostStatus = provisioningState;\n  } else {\n    hostStatus = HOST_STATUS_UNKNOWN;\n  }\n\n  return {\n    status: hostStatus,\n    title: HOST_STATUS_TITLES[hostStatus] || hostStatus,\n    description: HOST_STATUS_DESCRIPTIONS[hostStatus],\n  };\n};\n\ntype HostStatusProps = {\n  host: BareMetalHostKind;\n  machine?: MachineKind;\n  node?: NodeKind;\n  nodeMaintenance?: K8sResourceKind;\n};\n\nexport const getHostStatus = ({ host, nodeMaintenance }: HostStatusProps): StatusProps => {\n  const hostStatus = getBareMetalHostStatus(host);\n  if (hostStatus.status === HOST_STATUS_DEPROVISIONING) return hostStatus;\n  return getNodeMaintenanceStatus(nodeMaintenance) || hostStatus;\n};\n\nexport const isHostInProgressState = (host: BareMetalHostKind): boolean =>\n  HOST_PROGRESS_STATES.includes(getBareMetalHostStatus(host).status);\n"]}]}