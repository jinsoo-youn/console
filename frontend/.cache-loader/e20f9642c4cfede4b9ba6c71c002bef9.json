{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/k8s.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/k8s.ts","mtime":1615298458760},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport { modelFor, } from './index';\nexport const getQN = ({ metadata: { name, namespace } }) => (namespace ? `(${namespace})-` : '') + name;\nexport const k8sBasePath = `${window.SERVER_FLAGS.basePath}api/kubernetes`;\n// TODO(alecmerdler): Replace all manual string building with this function\nexport const referenceForGroupVersionKind = (group) => (version) => (kind) => {\n    if (kind === 'PipelineResource' || kind === 'ClusterTask' || kind === 'Task') {\n        return kind;\n    }\n    return [group, version, kind].join('~');\n};\nexport const getGroupVersionKind = (ref) => {\n    const parts = ref.split('~');\n    if (parts.length !== 3) {\n        return undefined;\n    }\n    return parts;\n};\nexport const isGroupVersionKind = (ref) => ref.split('~').length === 3;\nexport const groupVersionFor = (apiVersion) => ({\n    group: apiVersion.split('/').length === 2 ? apiVersion.split('/')[0] : 'core',\n    version: apiVersion.split('/').length === 2 ? apiVersion.split('/')[1] : apiVersion,\n});\nconst parseAPIVersion = (version) => {\n    const parsed = /^v(\\d+)(?:(alpha|beta)(\\d+))?$/.exec(version);\n    return parsed\n        ? { majorVersion: Number(parsed[1]), qualifier: parsed[2], minorVersion: Number(parsed[3]) }\n        : null;\n};\nexport const apiVersionCompare = (v1, v2) => {\n    const v1Parsed = parseAPIVersion(v1);\n    const v2Parsed = parseAPIVersion(v2);\n    // Check null parsed versions first\n    if (!v1Parsed || !v2Parsed) {\n        // If a value fails null check order it last\n        if (v1Parsed) {\n            return -1;\n        }\n        if (v2Parsed) {\n            return 1;\n        }\n        return v1.localeCompare(v2);\n    }\n    // Then sort on major version with no qualifiers: v3 > v1\n    if (v1Parsed.majorVersion !== v2Parsed.majorVersion &&\n        !v1Parsed.qualifier &&\n        !v2Parsed.qualifier) {\n        return v2Parsed.majorVersion - v1Parsed.majorVersion;\n    }\n    // Then sort on any version with no qualifier over a qualifier: v1 > v3alpha\n    if (_.isEmpty(v1Parsed.qualifier) !== _.isEmpty(v2Parsed.qualifier)) {\n        return v1Parsed.qualifier ? 1 : -1;\n    }\n    // Beta beats alpha: v1beta1 > v1alpha1\n    const isBetaV1 = v1Parsed.qualifier === 'beta';\n    const isBetaV2 = v2Parsed.qualifier === 'beta';\n    if (isBetaV1 !== isBetaV2) {\n        return isBetaV1 ? -1 : 1;\n    }\n    // Same qualifier, then numeric values win: v2beta2 > v1beta2\n    if (v1Parsed.majorVersion !== v2Parsed.majorVersion) {\n        return v2Parsed.majorVersion - v1Parsed.majorVersion;\n    }\n    // Finally compare minor version: v1beta2 > v1beta1\n    return v2Parsed.minorVersion - v1Parsed.minorVersion;\n};\nexport const getLatestVersionForCRD = (crd) => {\n    var _a, _b, _c;\n    const sorted = (_c = (_b = (_a = crd.spec.versions) === null || _a === void 0 ? void 0 : _a.filter((version) => version.served)) === null || _b === void 0 ? void 0 : _b.map(({ name }) => name)) === null || _c === void 0 ? void 0 : _c.sort(apiVersionCompare);\n    return parseAPIVersion(sorted === null || sorted === void 0 ? void 0 : sorted[0]) ? sorted[0] : crd.spec.version;\n};\nexport const referenceForCRD = (obj) => referenceForGroupVersionKind(obj.spec.group)(getLatestVersionForCRD(obj))(obj.spec.names.kind);\nexport const referenceForOwnerRef = (ownerRef) => referenceForGroupVersionKind(groupVersionFor(ownerRef.apiVersion).group)(groupVersionFor(ownerRef.apiVersion).version)(ownerRef.kind);\nexport const referenceForModel = (model) => referenceForGroupVersionKind(model.apiGroup || 'core')(model.apiVersion)(model.kind);\nexport const referenceFor = ({ kind, apiVersion }) => {\n    if (!kind) {\n        return '';\n    }\n    // `apiVersion` is optional in some k8s object references (for instance,\n    // event `involvedObject`). The CLI resolves the version from API discovery.\n    // Use `modelFor` to get the version from the model when missing.\n    if (!apiVersion) {\n        const m = modelFor(kind);\n        return m ? referenceForModel(m) : '';\n    }\n    const { group, version } = groupVersionFor(apiVersion);\n    return referenceForGroupVersionKind(group)(version)(kind);\n};\nexport const kindForReference = (ref) => isGroupVersionKind(ref) ? ref.split('~')[2] : ref;\nexport const apiGroupForReference = (ref) => ref.split('~')[0];\nexport const versionForReference = (ref) => ref.split('~')[1];\nexport const apiVersionForModel = (model) => _.isEmpty(model.apiGroup) ? model.apiVersion : `${model.apiGroup}/${model.apiVersion}`;\nexport const apiVersionForReference = (ref) => isGroupVersionKind(ref) ? `${ref.split('~')[0]}/${ref.split('~')[1]}` : ref;\nexport const nameForModel = (model) => [model.plural, model.apiGroup].join('.');\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/k8s.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/k8s.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\n\nimport {\n  CustomResourceDefinitionKind,\n  GroupVersionKind,\n  K8sKind,\n  K8sResourceCommon,\n  K8sResourceKind,\n  K8sResourceKindReference,\n  OwnerReference,\n  modelFor,\n} from './index';\n\nexport const getQN: (obj: K8sResourceKind) => string = ({ metadata: { name, namespace } }) =>\n  (namespace ? `(${namespace})-` : '') + name;\n\nexport const k8sBasePath = `${window.SERVER_FLAGS.basePath}api/kubernetes`;\n\n// TODO(alecmerdler): Replace all manual string building with this function\nexport const referenceForGroupVersionKind = (group: string) => (version: string) => (\n  kind: string,\n) => {\n  if (kind === 'PipelineResource' || kind === 'ClusterTask' || kind === 'Task') {\n    return kind;\n  }\n  return [group, version, kind].join('~')\n};\n\nexport const getGroupVersionKind = (\n  ref: GroupVersionKind | string,\n): [string, string, string] | undefined => {\n  const parts = ref.split('~');\n  if (parts.length !== 3) {\n    return undefined;\n  }\n  return parts as [string, string, string];\n};\n\nexport const isGroupVersionKind = (ref: GroupVersionKind | string) => ref.split('~').length === 3;\n\nexport const groupVersionFor = (apiVersion: string) => ({\n  group: apiVersion.split('/').length === 2 ? apiVersion.split('/')[0] : 'core',\n  version: apiVersion.split('/').length === 2 ? apiVersion.split('/')[1] : apiVersion,\n});\n\nconst parseAPIVersion = (version: string) => {\n  const parsed = /^v(\\d+)(?:(alpha|beta)(\\d+))?$/.exec(version);\n  return parsed\n    ? { majorVersion: Number(parsed[1]), qualifier: parsed[2], minorVersion: Number(parsed[3]) }\n    : null;\n};\n\nexport const apiVersionCompare = (v1: string, v2: string) => {\n  const v1Parsed = parseAPIVersion(v1);\n  const v2Parsed = parseAPIVersion(v2);\n\n  // Check null parsed versions first\n  if (!v1Parsed || !v2Parsed) {\n    // If a value fails null check order it last\n    if (v1Parsed) {\n      return -1;\n    }\n    if (v2Parsed) {\n      return 1;\n    }\n    return v1.localeCompare(v2);\n  }\n  // Then sort on major version with no qualifiers: v3 > v1\n  if (\n    v1Parsed.majorVersion !== v2Parsed.majorVersion &&\n    !v1Parsed.qualifier &&\n    !v2Parsed.qualifier\n  ) {\n    return v2Parsed.majorVersion - v1Parsed.majorVersion;\n  }\n  // Then sort on any version with no qualifier over a qualifier: v1 > v3alpha\n  if (_.isEmpty(v1Parsed.qualifier) !== _.isEmpty(v2Parsed.qualifier)) {\n    return v1Parsed.qualifier ? 1 : -1;\n  }\n  // Beta beats alpha: v1beta1 > v1alpha1\n  const isBetaV1 = v1Parsed.qualifier === 'beta';\n  const isBetaV2 = v2Parsed.qualifier === 'beta';\n  if (isBetaV1 !== isBetaV2) {\n    return isBetaV1 ? -1 : 1;\n  }\n  // Same qualifier, then numeric values win: v2beta2 > v1beta2\n  if (v1Parsed.majorVersion !== v2Parsed.majorVersion) {\n    return v2Parsed.majorVersion - v1Parsed.majorVersion;\n  }\n  // Finally compare minor version: v1beta2 > v1beta1\n  return v2Parsed.minorVersion - v1Parsed.minorVersion;\n};\n\nexport const getLatestVersionForCRD = (crd: CustomResourceDefinitionKind) => {\n  const sorted = crd.spec.versions\n    ?.filter((version) => version.served)\n    ?.map(({ name }) => name)\n    ?.sort(apiVersionCompare);\n  return parseAPIVersion(sorted?.[0]) ? sorted[0] : crd.spec.version;\n};\n\nexport const referenceForCRD = (obj: CustomResourceDefinitionKind): GroupVersionKind =>\n  referenceForGroupVersionKind(obj.spec.group)(getLatestVersionForCRD(obj))(obj.spec.names.kind);\n\nexport const referenceForOwnerRef = (ownerRef: OwnerReference): GroupVersionKind =>\n  referenceForGroupVersionKind(groupVersionFor(ownerRef.apiVersion).group)(\n    groupVersionFor(ownerRef.apiVersion).version,\n  )(ownerRef.kind);\n\nexport const referenceForModel = (model: K8sKind): GroupVersionKind =>\n  referenceForGroupVersionKind(model.apiGroup || 'core')(model.apiVersion)(model.kind);\n\nexport const referenceFor = ({ kind, apiVersion }: K8sResourceCommon): GroupVersionKind => {\n  if (!kind) {\n    return '';\n  }\n\n  // `apiVersion` is optional in some k8s object references (for instance,\n  // event `involvedObject`). The CLI resolves the version from API discovery.\n  // Use `modelFor` to get the version from the model when missing.\n  if (!apiVersion) {\n    const m = modelFor(kind);\n    return m ? referenceForModel(m) : '';\n  }\n\n  const { group, version } = groupVersionFor(apiVersion);\n  return referenceForGroupVersionKind(group)(version)(kind);\n};\n\nexport const kindForReference = (ref: K8sResourceKindReference) =>\n  isGroupVersionKind(ref) ? ref.split('~')[2] : ref;\n\nexport const apiGroupForReference = (ref: GroupVersionKind) => ref.split('~')[0];\n\nexport const versionForReference = (ref: GroupVersionKind) => ref.split('~')[1];\n\nexport const apiVersionForModel = (model: K8sKind) =>\n  _.isEmpty(model.apiGroup) ? model.apiVersion : `${model.apiGroup}/${model.apiVersion}`;\n\nexport const apiVersionForReference = (ref: GroupVersionKind) =>\n  isGroupVersionKind(ref) ? `${ref.split('~')[0]}/${ref.split('~')[1]}` : ref;\n\nexport const nameForModel = (model: K8sKind) => [model.plural, model.apiGroup].join('.');\n"]}]}