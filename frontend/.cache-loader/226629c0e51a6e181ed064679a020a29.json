{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/pod-exec.jsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/pod-exec.jsx","mtime":1616735742480},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Base64 } from 'js-base64';\nimport { ExpandIcon } from '@patternfly/react-icons';\nimport { Button } from '@patternfly/react-core';\nimport store from '../redux';\nimport { LoadingBox, LoadingInline, Dropdown, ResourceIcon } from './utils';\nimport { connectToFlags } from '../reducers/features';\nimport { FLAGS } from '@console/shared';\nimport { Terminal } from './terminal';\nimport { WSFactory } from '../module/ws-factory';\nimport { resourceURL } from '../module/k8s';\nimport { PodModel } from '../models';\nconst nameWithIcon = (name) => (React.createElement(\"span\", null,\n    React.createElement(\"span\", { className: \"co-icon-space-r\" },\n        React.createElement(ResourceIcon, { kind: \"Container\" })),\n    name));\n// pod exec WS protocol is FD prefixed, base64 encoded data (sometimes json stringified)\n// Channel 0 is STDIN, 1 is STDOUT, 2 is STDERR (if TTY is not requested), and 3 is a special error channel - 4 is C&C\n// The server only reads from STDIN, writes to the other three.\n// see also: https://github.com/kubernetes/kubernetes/pull/13885\nconst NO_SH = 'starting container process caused \"exec: \\\\\"sh\\\\\": executable file not found in $PATH\"';\nexport const PodExec = connectToFlags(FLAGS.OPENSHIFT)(class PodExec extends React.PureComponent {\n    constructor(props) {\n        super(props);\n        this.state = {\n            open: false,\n            containers: [],\n            activeContainer: _.get(props, 'obj.spec.containers[0].name'),\n        };\n        this.terminal = React.createRef();\n        this.onResize = (rows, cols) => this.onResize_(rows, cols);\n        this.onData = (d) => this.onData_(d);\n        this.onChangeContainer = (index) => this.onChangeContainer_(index);\n    }\n    connect_() {\n        const { metadata } = this.props.obj;\n        const { activeContainer } = this.state;\n        const usedClient = this.props.flags[FLAGS.OPENSHIFT] ? 'oc' : 'kubectl';\n        const params = {\n            ns: metadata.namespace,\n            name: metadata.name,\n            path: 'exec',\n            queryParams: {\n                stdout: 1,\n                stdin: 1,\n                stderr: 1,\n                tty: 1,\n                container: activeContainer,\n                command: ['sh', '-i', '-c', 'TERM=xterm sh']\n                    .map((c) => encodeURIComponent(c))\n                    .join('&command='),\n            },\n        };\n        if (this.ws) {\n            this.ws.destroy();\n            const { current } = this.terminal;\n            current && current.onConnectionClosed(`connecting to ${activeContainer}`);\n        }\n        const impersonate = store.getState().UI.get('impersonate', {});\n        const subprotocols = (impersonate.subprotocols || []).concat('base64.channel.k8s.io');\n        let previous;\n        this.ws = new WSFactory(`${metadata.name}-terminal`, {\n            host: 'auto',\n            reconnect: true,\n            path: resourceURL(PodModel, params),\n            jsonParse: false,\n            subprotocols,\n        })\n            .onmessage((raw) => {\n            const { current } = this.terminal;\n            // error channel\n            if (raw[0] === '3') {\n                if (previous.includes(NO_SH)) {\n                    current.reset();\n                    current.onConnectionClosed(`This container doesn't have a /bin/sh shell. Try specifying your command in a terminal with:\\r\\n\\r\\n ${usedClient} -n ${metadata.namespace} exec ${metadata.name} -ti <command>`);\n                    this.ws.destroy();\n                    previous = '';\n                    return;\n                }\n            }\n            const data = Base64.decode(raw.slice(1));\n            current && current.onDataReceived(data);\n            previous = data;\n        })\n            .onopen(() => {\n            const { current } = this.terminal;\n            current && current.reset();\n            previous = '';\n            this.setState({ open: true, error: null });\n        })\n            .onclose((evt) => {\n            if (!evt || evt.wasClean === true) {\n                return;\n            }\n            const error = evt.reason || 'The terminal connection has closed.';\n            this.setState({ error });\n            this.terminal.current && this.terminal.current.onConnectionClosed(error);\n            this.ws.destroy();\n        }) // eslint-disable-next-line no-console\n            .onerror((evt) => console.error(`WS error?! ${evt}`));\n    }\n    componentDidMount() {\n        this.connect_();\n    }\n    componentWillUnmount() {\n        this.ws && this.ws.destroy();\n        delete this.ws;\n    }\n    static getDerivedStateFromProps(nextProps, prevState) {\n        const containers = _.get(nextProps.obj, 'spec.containers', []).map((n) => n.name);\n        if (_.isEqual(containers, prevState.containers)) {\n            return null;\n        }\n        return { containers };\n    }\n    onChangeContainer_(index) {\n        const name = this.state.containers[index];\n        if (!name) {\n            // eslint-disable-next-line no-console\n            console.warn(`no name, how did that happen? ${index}`);\n            return;\n        }\n        if (name === this.state.activeContainer) {\n            return;\n        }\n        this.setState({ activeContainer: name }, () => {\n            this.connect_();\n            this.terminal.current && this.terminal.current.focus();\n        });\n    }\n    onResize_(rows, cols) {\n        const data = Base64.encode(JSON.stringify({ Height: rows, Width: cols }));\n        this.ws && this.ws.send(`4${data}`);\n    }\n    setFullscreen(fullscreen) {\n        this.terminal.current.setFullscreen(fullscreen);\n    }\n    onData_(data) {\n        this.ws && this.ws.send(`0${Base64.encode(data)}`);\n    }\n    render() {\n        const { containers, activeContainer, open, error } = this.state;\n        const { message } = this.props;\n        let contents = React.createElement(LoadingBox, null);\n        if (error) {\n            contents = React.createElement(\"div\", { className: \"text-center cos-error-title\" }, error);\n        }\n        else if (open) {\n            contents = React.createElement(Terminal, { onResize: this.onResize, onData: this.onData, ref: this.terminal });\n        }\n        return (React.createElement(\"div\", null,\n            React.createElement(\"div\", { className: \"co-toolbar\" },\n                React.createElement(\"div\", { className: \"co-toolbar__group co-toolbar__group--left\" },\n                    React.createElement(\"div\", { className: \"co-toolbar__item\" }, \"Connecting to\"),\n                    React.createElement(\"div\", { className: \"co-toolbar__item\" },\n                        React.createElement(Dropdown, { className: \"btn-group\", items: _.mapValues(containers, nameWithIcon), title: nameWithIcon(activeContainer || React.createElement(LoadingInline, null)), onChange: this.onChangeContainer }))),\n                !error && (React.createElement(\"div\", { className: \"co-toolbar__group co-toolbar__group--right\" },\n                    React.createElement(\"div\", { className: \"co-toolbar__item\" },\n                        React.createElement(Button, { variant: \"link\", className: \"pf-m-link--align-right\", onClick: () => this.setFullscreen(true) },\n                            React.createElement(ExpandIcon, { className: \"co-icon-space-r\" }),\n                            \"Expand\"))))),\n            message,\n            contents));\n    }\n});\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/pod-exec.jsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/pod-exec.jsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Base64 } from 'js-base64';\nimport { ExpandIcon } from '@patternfly/react-icons';\nimport { Button } from '@patternfly/react-core';\n\nimport store from '../redux';\nimport { LoadingBox, LoadingInline, Dropdown, ResourceIcon } from './utils';\nimport { connectToFlags } from '../reducers/features';\nimport { FLAGS } from '@console/shared';\nimport { Terminal } from './terminal';\nimport { WSFactory } from '../module/ws-factory';\nimport { resourceURL } from '../module/k8s';\nimport { PodModel } from '../models';\n\nconst nameWithIcon = (name) => (\n  <span>\n    <span className=\"co-icon-space-r\">\n      <ResourceIcon kind=\"Container\" />\n    </span>\n    {name}\n  </span>\n);\n\n// pod exec WS protocol is FD prefixed, base64 encoded data (sometimes json stringified)\n\n// Channel 0 is STDIN, 1 is STDOUT, 2 is STDERR (if TTY is not requested), and 3 is a special error channel - 4 is C&C\n// The server only reads from STDIN, writes to the other three.\n// see also: https://github.com/kubernetes/kubernetes/pull/13885\n\nconst NO_SH =\n  'starting container process caused \"exec: \\\\\"sh\\\\\": executable file not found in $PATH\"';\n\nexport const PodExec = connectToFlags(FLAGS.OPENSHIFT)(\n  class PodExec extends React.PureComponent {\n    constructor(props) {\n      super(props);\n      this.state = {\n        open: false,\n        containers: [],\n        activeContainer: _.get(props, 'obj.spec.containers[0].name'),\n      };\n      this.terminal = React.createRef();\n      this.onResize = (rows, cols) => this.onResize_(rows, cols);\n      this.onData = (d) => this.onData_(d);\n      this.onChangeContainer = (index) => this.onChangeContainer_(index);\n    }\n\n    connect_() {\n      const { metadata } = this.props.obj;\n      const { activeContainer } = this.state;\n      const usedClient = this.props.flags[FLAGS.OPENSHIFT] ? 'oc' : 'kubectl';\n\n      const params = {\n        ns: metadata.namespace,\n        name: metadata.name,\n        path: 'exec',\n        queryParams: {\n          stdout: 1,\n          stdin: 1,\n          stderr: 1,\n          tty: 1,\n          container: activeContainer,\n          command: ['sh', '-i', '-c', 'TERM=xterm sh']\n            .map((c) => encodeURIComponent(c))\n            .join('&command='),\n        },\n      };\n\n      if (this.ws) {\n        this.ws.destroy();\n        const { current } = this.terminal;\n        current && current.onConnectionClosed(`connecting to ${activeContainer}`);\n      }\n\n      const impersonate = store.getState().UI.get('impersonate', {});\n      const subprotocols = (impersonate.subprotocols || []).concat('base64.channel.k8s.io');\n\n      let previous;\n      this.ws = new WSFactory(`${metadata.name}-terminal`, {\n        host: 'auto',\n        reconnect: true,\n        path: resourceURL(PodModel, params),\n        jsonParse: false,\n        subprotocols,\n      })\n        .onmessage((raw) => {\n          const { current } = this.terminal;\n          // error channel\n          if (raw[0] === '3') {\n            if (previous.includes(NO_SH)) {\n              current.reset();\n              current.onConnectionClosed(\n                `This container doesn't have a /bin/sh shell. Try specifying your command in a terminal with:\\r\\n\\r\\n ${usedClient} -n ${metadata.namespace} exec ${metadata.name} -ti <command>`,\n              );\n              this.ws.destroy();\n              previous = '';\n              return;\n            }\n          }\n          const data = Base64.decode(raw.slice(1));\n          current && current.onDataReceived(data);\n          previous = data;\n        })\n        .onopen(() => {\n          const { current } = this.terminal;\n          current && current.reset();\n          previous = '';\n          this.setState({ open: true, error: null });\n        })\n        .onclose((evt) => {\n          if (!evt || evt.wasClean === true) {\n            return;\n          }\n          const error = evt.reason || 'The terminal connection has closed.';\n          this.setState({ error });\n          this.terminal.current && this.terminal.current.onConnectionClosed(error);\n          this.ws.destroy();\n        }) // eslint-disable-next-line no-console\n        .onerror((evt) => console.error(`WS error?! ${evt}`));\n    }\n\n    componentDidMount() {\n      this.connect_();\n    }\n\n    componentWillUnmount() {\n      this.ws && this.ws.destroy();\n      delete this.ws;\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n      const containers = _.get(nextProps.obj, 'spec.containers', []).map((n) => n.name);\n      if (_.isEqual(containers, prevState.containers)) {\n        return null;\n      }\n      return { containers };\n    }\n\n    onChangeContainer_(index) {\n      const name = this.state.containers[index];\n\n      if (!name) {\n        // eslint-disable-next-line no-console\n        console.warn(`no name, how did that happen? ${index}`);\n        return;\n      }\n      if (name === this.state.activeContainer) {\n        return;\n      }\n      this.setState({ activeContainer: name }, () => {\n        this.connect_();\n        this.terminal.current && this.terminal.current.focus();\n      });\n    }\n\n    onResize_(rows, cols) {\n      const data = Base64.encode(JSON.stringify({ Height: rows, Width: cols }));\n      this.ws && this.ws.send(`4${data}`);\n    }\n\n    setFullscreen(fullscreen) {\n      this.terminal.current.setFullscreen(fullscreen);\n    }\n\n    onData_(data) {\n      this.ws && this.ws.send(`0${Base64.encode(data)}`);\n    }\n\n    render() {\n      const { containers, activeContainer, open, error } = this.state;\n      const { message } = this.props;\n\n      let contents = <LoadingBox />;\n      if (error) {\n        contents = <div className=\"text-center cos-error-title\">{error}</div>;\n      } else if (open) {\n        contents = <Terminal onResize={this.onResize} onData={this.onData} ref={this.terminal} />;\n      }\n\n      return (\n        <div>\n          <div className=\"co-toolbar\">\n            <div className=\"co-toolbar__group co-toolbar__group--left\">\n              <div className=\"co-toolbar__item\">Connecting to</div>\n              <div className=\"co-toolbar__item\">\n                <Dropdown\n                  className=\"btn-group\"\n                  items={_.mapValues(containers, nameWithIcon)}\n                  title={nameWithIcon(activeContainer || <LoadingInline />)}\n                  onChange={this.onChangeContainer}\n                />\n              </div>\n            </div>\n            {!error && (\n              <div className=\"co-toolbar__group co-toolbar__group--right\">\n                <div className=\"co-toolbar__item\">\n                  <Button\n                    variant=\"link\"\n                    className=\"pf-m-link--align-right\"\n                    onClick={() => this.setFullscreen(true)}\n                  >\n                    <ExpandIcon className=\"co-icon-space-r\" />\n                    Expand\n                  </Button>\n                </div>\n              </div>\n            )}\n          </div>\n          {message}\n          {contents}\n        </div>\n      );\n    }\n  },\n);\n"]}]}