{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/federated-service.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/federated-service.tsx","mtime":1615298458730},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { DetailsPage, ListPage, Table, TableRow, TableData } from '../factory';\nimport { DetailsItem, Kebab, detailsPage, LabelList, navFactory, ResourceKebab, ResourceLink, ResourceSummary, SectionHeading, Selector, ResourceIcon } from '../utils';\nimport { ResourceEventStream } from '../events';\nimport { FederatedServiceModel } from '../../models';\n// export const menuActions: KebabAction[] = [AddHealthChecks, Kebab.factory.AddStorage, ...Kebab.getExtensionsActionsForKind(FederatedServiceModel), EditHealthChecks, ...Kebab.factory.common];\nexport const menuActions = [...Kebab.getExtensionsActionsForKind(FederatedServiceModel), ...Kebab.factory.common];\nconst kind = FederatedServiceModel.kind;\nconst tableColumnClasses = ['', '', classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), Kebab.columnClass];\nconst FederatedServiceTableHeader = () => {\n    return [\n        {\n            title: 'Name',\n            sortField: 'metadata.name',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[0] },\n        },\n        {\n            title: 'Namespace',\n            sortField: 'metadata.namespace',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[1] },\n        },\n        {\n            title: 'Labels',\n            sortField: 'metadata.labels',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[2] },\n        },\n        {\n            title: 'Selector',\n            sortField: 'service.spec.template.spec.selector',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[3] },\n        },\n        {\n            title: '',\n            props: { className: tableColumnClasses[4] },\n        },\n    ];\n};\nFederatedServiceTableHeader.displayName = 'FederatedServiceTableHeader';\n// const ServiceAddress = ({ s }) => {\n//   const ServiceIPsRow = (name, desc, ips, note = null) => (\n//     <div className=\"co-ip-row\">\n//       <div className=\"row\">\n//         <div className=\"col-xs-6\">\n//           <p className=\"ip-name\">{name}</p>\n//           <p className=\"ip-desc\">{desc}</p>\n//         </div>\n//         <div className=\"col-xs-6\">\n//           {note && <span className=\"text-muted\">{note}</span>}\n//           {ips}\n//         </div>\n//       </div>\n//     </div>\n//   );\n//   const ServiceType = type => {\n//     switch (type) {\n//       case 'NodePort':\n//         return ServiceIPsRow('Node Port', 'Accessible outside the cluster', _.map(s.spec?.template?.spec?.ports, 'nodePort'), '(all nodes): ');\n//       case 'LoadBalancer':\n//         return ServiceIPsRow(\n//           'External Load Balancer',\n//           'Ingress point(s) of load balancer',\n//           '', // federated service의 load balancer의 ip는 어떻게 가져오지?\n//         );\n//       case 'ExternalName':\n//         return ServiceIPsRow('External Service Name', 'Location of the resource that backs the service', [s.spec?.template?.spec?.externalName]);\n//       default:\n//         return '';\n//     }\n//   };\n//   return (\n//     <div>\n//       <div className=\"row co-ip-header\">\n//         <div className=\"col-xs-6\">Type</div>\n//         <div className=\"col-xs-6\">Location</div>\n//       </div>\n//       <div className=\"rows\">{ServiceType(s.spec?.template?.spec?.type)}</div>\n//     </div>\n//   );\n// };\nconst ServicePortMapping = ({ ports }) => {\n    return (React.createElement(\"div\", null,\n        React.createElement(\"div\", { className: \"row co-ip-header\" },\n            React.createElement(\"div\", { className: \"col-xs-3\" }, \"Name\"),\n            React.createElement(\"div\", { className: \"col-xs-3\" }, \"Port\"),\n            React.createElement(\"div\", { className: \"col-xs-3\" }, \"Protocol\"),\n            React.createElement(\"div\", { className: \"col-xs-3\" }, \"Target Port\")),\n        React.createElement(\"div\", { className: \"rows\" }, ports.map((portObj, i) => {\n            return (React.createElement(\"div\", { className: \"co-ip-row\", key: i },\n                React.createElement(\"div\", { className: \"row\" },\n                    React.createElement(\"div\", { className: \"col-xs-3 co-text-service\" },\n                        React.createElement(\"p\", null, portObj.name || '-'),\n                        portObj.nodePort && React.createElement(\"p\", { className: \"co-text-node\" }, \"Node Port\")),\n                    React.createElement(\"div\", { className: \"col-xs-3 co-text-service\" },\n                        React.createElement(\"p\", null,\n                            React.createElement(ResourceIcon, { kind: \"Service\" }),\n                            React.createElement(\"span\", null, portObj.port)),\n                        portObj.nodePort && (React.createElement(\"p\", { className: \"co-text-node\" },\n                            React.createElement(ResourceIcon, { kind: \"Node\" }),\n                            React.createElement(\"span\", null, portObj.nodePort)))),\n                    React.createElement(\"div\", { className: \"col-xs-3\" },\n                        React.createElement(\"p\", null, portObj.protocol)),\n                    React.createElement(\"div\", { className: \"col-xs-3 co-text-pod\" },\n                        React.createElement(\"p\", null,\n                            React.createElement(ResourceIcon, { kind: \"Pod\" }),\n                            React.createElement(\"span\", null, portObj.targetPort))))));\n        }))));\n};\nconst FederatedServiceTableRow = ({ obj: service, index, key, style }) => {\n    var _a, _b, _c;\n    return (React.createElement(TableRow, { id: service.metadata.uid, index: index, trKey: key, style: style },\n        React.createElement(TableData, { className: tableColumnClasses[0] },\n            React.createElement(ResourceLink, { kind: kind, name: service.metadata.name, namespace: service.metadata.namespace, title: service.metadata.uid })),\n        React.createElement(TableData, { className: classNames(tableColumnClasses[1], 'co-break-word') },\n            React.createElement(ResourceLink, { kind: \"Namespace\", name: service.metadata.namespace, title: service.metadata.namespace })),\n        React.createElement(TableData, { className: tableColumnClasses[2] },\n            React.createElement(LabelList, { kind: kind, labels: service.metadata.labels })),\n        React.createElement(TableData, { className: tableColumnClasses[3] },\n            React.createElement(Selector, { selector: (_c = (_b = (_a = service.spec) === null || _a === void 0 ? void 0 : _a.template) === null || _b === void 0 ? void 0 : _b.spec) === null || _c === void 0 ? void 0 : _c.selector, namespace: service.metadata.namespace })),\n        React.createElement(TableData, { className: tableColumnClasses[4] },\n            React.createElement(ResourceKebab, { actions: menuActions, kind: kind, resource: service }))));\n};\nconst FederatedServiceDetails = ({ obj: service }) => {\n    var _a, _b, _c;\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(SectionHeading, { text: \"Federated Service Details\" }),\n            React.createElement(\"div\", { className: \"row\" },\n                React.createElement(\"div\", { className: \"col-lg-6\" },\n                    React.createElement(ResourceSummary, { resource: service })),\n                React.createElement(\"div\", { className: \"col-sm-6\" },\n                    React.createElement(SectionHeading, { text: \"Service Routing\" }),\n                    React.createElement(\"dl\", null,\n                        React.createElement(DetailsItem, { label: \"Service Port Mapping\", obj: service, path: \"spec.ports\" },\n                            React.createElement(\"div\", { className: \"service-ips\" }, ((_c = (_b = (_a = service.spec) === null || _a === void 0 ? void 0 : _a.template) === null || _b === void 0 ? void 0 : _b.spec) === null || _c === void 0 ? void 0 : _c.ports) ? React.createElement(ServicePortMapping, { ports: service.spec.template.spec.ports }) : '-'))))))));\n};\nconst { details, editYaml, events } = navFactory;\nexport const FederatedServices = props => React.createElement(Table, Object.assign({}, props, { \"aria-label\": \"Federated Services\", Header: FederatedServiceTableHeader, Row: FederatedServiceTableRow, virtualize: true }));\nexport const FederatedServicesPage = props => React.createElement(ListPage, Object.assign({ canCreate: true, ListComponent: FederatedServices, kind: kind }, props));\nexport const FederatedServicesDetailsPage = props => React.createElement(DetailsPage, Object.assign({}, props, { kind: kind, menuActions: menuActions, pages: [details(detailsPage(FederatedServiceDetails)), editYaml(), events(ResourceEventStream)] }));\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/federated-service.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/federated-service.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,KAAK,UAAU,MAAM,YAAY,CAAC;AACzC,OAAO,EAAE,QAAQ,EAAE,MAAM,yBAAyB,CAAC;AAGnD,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAe,MAAM,YAAY,CAAC;AAC5F,OAAO,EAAE,WAAW,EAAE,KAAK,EAAe,WAAW,EAAE,SAAS,EAAE,UAAU,EAAE,aAAa,EAAE,YAAY,EAAE,eAAe,EAAE,cAAc,EAAE,QAAQ,EAAE,YAAY,EAAE,MAAM,UAAU,CAAC;AACrL,OAAO,EAAE,mBAAmB,EAAE,MAAM,WAAW,CAAC;AAChD,OAAO,EAAE,qBAAqB,EAAE,MAAM,cAAc,CAAC;AAErD,iMAAiM;AACjM,MAAM,CAAC,MAAM,WAAW,GAAkB,CAAC,GAAG,KAAK,CAAC,2BAA2B,CAAC,qBAAqB,CAAC,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;AAEjI,MAAM,IAAI,GAAG,qBAAqB,CAAC,IAAI,CAAC;AAExC,MAAM,kBAAkB,GAAG,CAAC,EAAE,EAAE,EAAE,EAAE,UAAU,CAAC,aAAa,EAAE,oBAAoB,EAAE,iBAAiB,CAAC,EAAE,UAAU,CAAC,aAAa,EAAE,oBAAoB,CAAC,EAAE,KAAK,CAAC,WAAW,CAAC,CAAC;AAE5K,MAAM,2BAA2B,GAAG,GAAG,EAAE;IACvC,OAAO;QACL;YACE,KAAK,EAAE,MAAM;YACb,SAAS,EAAE,eAAe;YAC1B,UAAU,EAAE,CAAC,QAAQ,CAAC;YACtB,KAAK,EAAE,EAAE,SAAS,EAAE,kBAAkB,CAAC,CAAC,CAAC,EAAE;SAC5C;QACD;YACE,KAAK,EAAE,WAAW;YAClB,SAAS,EAAE,oBAAoB;YAC/B,UAAU,EAAE,CAAC,QAAQ,CAAC;YACtB,KAAK,EAAE,EAAE,SAAS,EAAE,kBAAkB,CAAC,CAAC,CAAC,EAAE;SAC5C;QACD;YACE,KAAK,EAAE,QAAQ;YACf,SAAS,EAAE,iBAAiB;YAC5B,UAAU,EAAE,CAAC,QAAQ,CAAC;YACtB,KAAK,EAAE,EAAE,SAAS,EAAE,kBAAkB,CAAC,CAAC,CAAC,EAAE;SAC5C;QACD;YACE,KAAK,EAAE,UAAU;YACjB,SAAS,EAAE,qCAAqC;YAChD,UAAU,EAAE,CAAC,QAAQ,CAAC;YACtB,KAAK,EAAE,EAAE,SAAS,EAAE,kBAAkB,CAAC,CAAC,CAAC,EAAE;SAC5C;QACD;YACE,KAAK,EAAE,EAAE;YACT,KAAK,EAAE,EAAE,SAAS,EAAE,kBAAkB,CAAC,CAAC,CAAC,EAAE;SAC5C;KACF,CAAC;AACJ,CAAC,CAAC;AACF,2BAA2B,CAAC,WAAW,GAAG,6BAA6B,CAAC;AAExE,sCAAsC;AACtC,8DAA8D;AAC9D,kCAAkC;AAClC,8BAA8B;AAC9B,qCAAqC;AACrC,8CAA8C;AAC9C,8CAA8C;AAC9C,iBAAiB;AACjB,qCAAqC;AACrC,iEAAiE;AACjE,kBAAkB;AAClB,iBAAiB;AACjB,eAAe;AACf,aAAa;AACb,OAAO;AAEP,kCAAkC;AAClC,sBAAsB;AACtB,yBAAyB;AACzB,kJAAkJ;AAClJ,6BAA6B;AAC7B,gCAAgC;AAChC,sCAAsC;AACtC,iDAAiD;AACjD,mEAAmE;AACnE,aAAa;AACb,6BAA6B;AAC7B,oJAAoJ;AACpJ,iBAAiB;AACjB,qBAAqB;AACrB,QAAQ;AACR,OAAO;AAEP,aAAa;AACb,YAAY;AACZ,2CAA2C;AAC3C,+CAA+C;AAC/C,mDAAmD;AACnD,eAAe;AACf,gFAAgF;AAChF,aAAa;AACb,OAAO;AACP,KAAK;AAEL,MAAM,kBAAkB,GAAG,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE;IACvC,OAAO,CACL;QACE,6BAAK,SAAS,EAAC,kBAAkB;YAC/B,6BAAK,SAAS,EAAC,UAAU,WAAW;YACpC,6BAAK,SAAS,EAAC,UAAU,WAAW;YACpC,6BAAK,SAAS,EAAC,UAAU,eAAe;YACxC,6BAAK,SAAS,EAAC,UAAU,kBAAkB,CACvC;QACN,6BAAK,SAAS,EAAC,MAAM,IAClB,KAAK,CAAC,GAAG,CAAC,CAAC,OAAO,EAAE,CAAC,EAAE,EAAE;YACxB,OAAO,CACL,6BAAK,SAAS,EAAC,WAAW,EAAC,GAAG,EAAE,CAAC;gBAC/B,6BAAK,SAAS,EAAC,KAAK;oBAClB,6BAAK,SAAS,EAAC,0BAA0B;wBACvC,+BAAI,OAAO,CAAC,IAAI,IAAI,GAAG,CAAK;wBAC3B,OAAO,CAAC,QAAQ,IAAI,2BAAG,SAAS,EAAC,cAAc,gBAAc,CAC1D;oBACN,6BAAK,SAAS,EAAC,0BAA0B;wBACvC;4BACE,oBAAC,YAAY,IAAC,IAAI,EAAC,SAAS,GAAG;4BAC/B,kCAAO,OAAO,CAAC,IAAI,CAAQ,CACzB;wBACH,OAAO,CAAC,QAAQ,IAAI,CACnB,2BAAG,SAAS,EAAC,cAAc;4BACzB,oBAAC,YAAY,IAAC,IAAI,EAAC,MAAM,GAAG;4BAC5B,kCAAO,OAAO,CAAC,QAAQ,CAAQ,CAC7B,CACL,CACG;oBACN,6BAAK,SAAS,EAAC,UAAU;wBACvB,+BAAI,OAAO,CAAC,QAAQ,CAAK,CACrB;oBACN,6BAAK,SAAS,EAAC,sBAAsB;wBACnC;4BACE,oBAAC,YAAY,IAAC,IAAI,EAAC,KAAK,GAAG;4BAC3B,kCAAO,OAAO,CAAC,UAAU,CAAQ,CAC/B,CACA,CACF,CACF,CACP,CAAC;QACJ,CAAC,CAAC,CACE,CACF,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,wBAAwB,GAAiC,CAAC,EAAE,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE;;IACrG,OAAO,CACL,oBAAC,QAAQ,IAAC,EAAE,EAAE,OAAO,CAAC,QAAQ,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK;QACxE,oBAAC,SAAS,IAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC,CAAC;YACzC,oBAAC,YAAY,IAAC,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,SAAS,EAAE,OAAO,CAAC,QAAQ,CAAC,SAAS,EAAE,KAAK,EAAE,OAAO,CAAC,QAAQ,CAAC,GAAG,GAAI,CACnH;QACZ,oBAAC,SAAS,IAAC,SAAS,EAAE,UAAU,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC;YACtE,oBAAC,YAAY,IAAC,IAAI,EAAC,WAAW,EAAC,IAAI,EAAE,OAAO,CAAC,QAAQ,CAAC,SAAS,EAAE,KAAK,EAAE,OAAO,CAAC,QAAQ,CAAC,SAAS,GAAI,CAC5F;QACZ,oBAAC,SAAS,IAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC,CAAC;YACzC,oBAAC,SAAS,IAAC,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,CAAC,QAAQ,CAAC,MAAM,GAAI,CAChD;QACZ,oBAAC,SAAS,IAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC,CAAC;YACzC,oBAAC,QAAQ,IAAC,QAAQ,oBAAE,OAAO,CAAC,IAAI,0CAAE,QAAQ,0CAAE,IAAI,0CAAE,QAAQ,EAAE,SAAS,EAAE,OAAO,CAAC,QAAQ,CAAC,SAAS,GAAI,CAC3F;QACZ,oBAAC,SAAS,IAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC,CAAC;YACzC,oBAAC,aAAa,IAAC,OAAO,EAAE,WAAW,EAAE,IAAI,EAAE,IAAI,EAAE,QAAQ,EAAE,OAAO,GAAI,CAC5D,CACH,CACZ,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,uBAAuB,GAA2C,CAAC,EAAE,GAAG,EAAE,OAAO,EAAE,EAAE,EAAE;;IAAC,OAAA,CAC5F;QACE,6BAAK,SAAS,EAAC,iBAAiB;YAC9B,oBAAC,cAAc,IAAC,IAAI,EAAC,2BAA2B,GAAG;YACnD,6BAAK,SAAS,EAAC,KAAK;gBAClB,6BAAK,SAAS,EAAC,UAAU;oBACvB,oBAAC,eAAe,IAAC,QAAQ,EAAE,OAAO,GAAI,CAClC;gBACN,6BAAK,SAAS,EAAC,UAAU;oBACvB,oBAAC,cAAc,IAAC,IAAI,EAAC,iBAAiB,GAAG;oBACzC;wBAKE,oBAAC,WAAW,IAAC,KAAK,EAAC,sBAAsB,EAAC,GAAG,EAAE,OAAO,EAAE,IAAI,EAAC,YAAY;4BACvE,6BAAK,SAAS,EAAC,aAAa,IAAE,mBAAA,OAAO,CAAC,IAAI,0CAAE,QAAQ,0CAAE,IAAI,0CAAE,KAAK,EAAC,CAAC,CAAC,oBAAC,kBAAkB,IAAC,KAAK,EAAE,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,GAAI,CAAC,CAAC,CAAC,GAAG,CAAO,CACpI,CACX,CACD,CACF,CACF,CACL,CACJ,CAAA;CAAA,CAAC;AAEF,MAAM,EAAE,OAAO,EAAE,QAAQ,EAAE,MAAM,EAAE,GAAG,UAAU,CAAC;AACjD,MAAM,CAAC,MAAM,iBAAiB,GAAa,KAAK,CAAC,EAAE,CAAC,oBAAC,KAAK,oBAAK,KAAK,kBAAa,oBAAoB,EAAC,MAAM,EAAE,2BAA2B,EAAE,GAAG,EAAE,wBAAwB,EAAE,UAAU,UAAG,CAAC;AAExL,MAAM,CAAC,MAAM,qBAAqB,GAAyC,KAAK,CAAC,EAAE,CAAC,oBAAC,QAAQ,kBAAC,SAAS,EAAE,IAAI,EAAE,aAAa,EAAE,iBAAiB,EAAE,IAAI,EAAE,IAAI,IAAM,KAAK,EAAI,CAAC;AAE3K,MAAM,CAAC,MAAM,4BAA4B,GAAgD,KAAK,CAAC,EAAE,CAAC,oBAAC,WAAW,oBAAK,KAAK,IAAE,IAAI,EAAE,IAAI,EAAE,WAAW,EAAE,WAAW,EAAE,KAAK,EAAE,CAAC,OAAO,CAAC,WAAW,CAAC,uBAAuB,CAAC,CAAC,EAAE,QAAQ,EAAE,EAAE,MAAM,CAAC,mBAAmB,CAAC,CAAC,IAAI,CAAC","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\n// import { AddHealthChecks, EditHealthChecks } from '@console/app/src/actions/modify-health-checks';\nimport { K8sResourceKind } from '../../module/k8s';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from '../factory';\nimport { DetailsItem, Kebab, KebabAction, detailsPage, LabelList, navFactory, ResourceKebab, ResourceLink, ResourceSummary, SectionHeading, Selector, ResourceIcon } from '../utils';\nimport { ResourceEventStream } from '../events';\nimport { FederatedServiceModel } from '../../models';\n\n// export const menuActions: KebabAction[] = [AddHealthChecks, Kebab.factory.AddStorage, ...Kebab.getExtensionsActionsForKind(FederatedServiceModel), EditHealthChecks, ...Kebab.factory.common];\nexport const menuActions: KebabAction[] = [...Kebab.getExtensionsActionsForKind(FederatedServiceModel), ...Kebab.factory.common];\n\nconst kind = FederatedServiceModel.kind;\n\nconst tableColumnClasses = ['', '', classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), Kebab.columnClass];\n\nconst FederatedServiceTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Labels',\n      sortField: 'metadata.labels',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Selector',\n      sortField: 'service.spec.template.spec.selector',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[4] },\n    },\n  ];\n};\nFederatedServiceTableHeader.displayName = 'FederatedServiceTableHeader';\n\n// const ServiceAddress = ({ s }) => {\n//   const ServiceIPsRow = (name, desc, ips, note = null) => (\n//     <div className=\"co-ip-row\">\n//       <div className=\"row\">\n//         <div className=\"col-xs-6\">\n//           <p className=\"ip-name\">{name}</p>\n//           <p className=\"ip-desc\">{desc}</p>\n//         </div>\n//         <div className=\"col-xs-6\">\n//           {note && <span className=\"text-muted\">{note}</span>}\n//           {ips}\n//         </div>\n//       </div>\n//     </div>\n//   );\n\n//   const ServiceType = type => {\n//     switch (type) {\n//       case 'NodePort':\n//         return ServiceIPsRow('Node Port', 'Accessible outside the cluster', _.map(s.spec?.template?.spec?.ports, 'nodePort'), '(all nodes): ');\n//       case 'LoadBalancer':\n//         return ServiceIPsRow(\n//           'External Load Balancer',\n//           'Ingress point(s) of load balancer',\n//           '', // federated service의 load balancer의 ip는 어떻게 가져오지?\n//         );\n//       case 'ExternalName':\n//         return ServiceIPsRow('External Service Name', 'Location of the resource that backs the service', [s.spec?.template?.spec?.externalName]);\n//       default:\n//         return '';\n//     }\n//   };\n\n//   return (\n//     <div>\n//       <div className=\"row co-ip-header\">\n//         <div className=\"col-xs-6\">Type</div>\n//         <div className=\"col-xs-6\">Location</div>\n//       </div>\n//       <div className=\"rows\">{ServiceType(s.spec?.template?.spec?.type)}</div>\n//     </div>\n//   );\n// };\n\nconst ServicePortMapping = ({ ports }) => {\n  return (\n    <div>\n      <div className=\"row co-ip-header\">\n        <div className=\"col-xs-3\">Name</div>\n        <div className=\"col-xs-3\">Port</div>\n        <div className=\"col-xs-3\">Protocol</div>\n        <div className=\"col-xs-3\">Target Port</div>\n      </div>\n      <div className=\"rows\">\n        {ports.map((portObj, i) => {\n          return (\n            <div className=\"co-ip-row\" key={i}>\n              <div className=\"row\">\n                <div className=\"col-xs-3 co-text-service\">\n                  <p>{portObj.name || '-'}</p>\n                  {portObj.nodePort && <p className=\"co-text-node\">Node Port</p>}\n                </div>\n                <div className=\"col-xs-3 co-text-service\">\n                  <p>\n                    <ResourceIcon kind=\"Service\" />\n                    <span>{portObj.port}</span>\n                  </p>\n                  {portObj.nodePort && (\n                    <p className=\"co-text-node\">\n                      <ResourceIcon kind=\"Node\" />\n                      <span>{portObj.nodePort}</span>\n                    </p>\n                  )}\n                </div>\n                <div className=\"col-xs-3\">\n                  <p>{portObj.protocol}</p>\n                </div>\n                <div className=\"col-xs-3 co-text-pod\">\n                  <p>\n                    <ResourceIcon kind=\"Pod\" />\n                    <span>{portObj.targetPort}</span>\n                  </p>\n                </div>\n              </div>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nconst FederatedServiceTableRow: RowFunction<K8sResourceKind> = ({ obj: service, index, key, style }) => {\n  return (\n    <TableRow id={service.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={service.metadata.name} namespace={service.metadata.namespace} title={service.metadata.uid} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={service.metadata.namespace} title={service.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <LabelList kind={kind} labels={service.metadata.labels} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <Selector selector={service.spec?.template?.spec?.selector} namespace={service.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={service} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst FederatedServiceDetails: React.FC<FederatedServiceDetailsProps> = ({ obj: service }) => (\n  <>\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text=\"Federated Service Details\" />\n      <div className=\"row\">\n        <div className=\"col-lg-6\">\n          <ResourceSummary resource={service} />\n        </div>\n        <div className=\"col-sm-6\">\n          <SectionHeading text=\"Service Routing\" />\n          <dl>\n            {/* <dt>Service Address</dt>\n            <dd className=\"service-ips\">\n              <ServiceAddress s={service} />\n            </dd> */}\n            <DetailsItem label=\"Service Port Mapping\" obj={service} path=\"spec.ports\">\n              <div className=\"service-ips\">{service.spec?.template?.spec?.ports ? <ServicePortMapping ports={service.spec.template.spec.ports} /> : '-'}</div>\n            </DetailsItem>\n          </dl>\n        </div>\n      </div>\n    </div>\n  </>\n);\n\nconst { details, editYaml, events } = navFactory;\nexport const FederatedServices: React.FC = props => <Table {...props} aria-label=\"Federated Services\" Header={FederatedServiceTableHeader} Row={FederatedServiceTableRow} virtualize />;\n\nexport const FederatedServicesPage: React.FC<FederatedServicesPageProps> = props => <ListPage canCreate={true} ListComponent={FederatedServices} kind={kind} {...props} />;\n\nexport const FederatedServicesDetailsPage: React.FC<FederatedServicesDetailsPageProps> = props => <DetailsPage {...props} kind={kind} menuActions={menuActions} pages={[details(detailsPage(FederatedServiceDetails)), editYaml(), events(ResourceEventStream)]} />;\n\ntype FederatedServiceDetailsProps = {\n  obj: K8sResourceKind;\n};\n\ntype FederatedServicesPageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: any;\n};\n\ntype FederatedServicesDetailsPageProps = {\n  match: any;\n};\n"]}]}