{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/load-test.sw.js","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/load-test.sw.js","mtime":1615298458750},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/file-loader/dist/cjs.js","mtime":1607306273666},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\n/**\n * Shamelessly taken from https://stackoverflow.com/a/2117523/6909941.\n */\nconst uuidFor = () => {\n    return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function (c) {\n        const r = (Math.random() * 16) | 0, v = c === 'x' ? r : (r & 0x3) | 0x8;\n        return v.toString(16);\n    });\n};\nconst pageFromToken = (continueToken) => continueToken ? parseInt(continueToken.replace('toPage', ''), 10) : 0;\nconst cloneResource = (obj, num) => (Object.assign(Object.assign({}, obj), { metadata: Object.assign(Object.assign({}, obj.metadata), { name: `${obj.metadata.name}-clone-${num}`, uid: uuidFor() }) }));\nconst strippedURLFor = (request) => {\n    const url = new URL(request.url);\n    url.searchParams.delete('limit');\n    url.searchParams.delete('continue');\n    return url.toString();\n};\nlet multiplicationFactor = 20;\n/**\n * Only match core resource list requests.\n */\nconst workloads = new Set()\n    .add(/\\/api\\/kubernetes\\/apis\\/apps\\/v1(\\/namespaces\\/.*)?\\/daemonsets(\\?(.*))?$/)\n    .add(/\\/api\\/kubernetes\\/apis\\/apps\\/v1(\\/namespaces\\/.*)?\\/deployments(\\?(.*))?$/)\n    .add(/\\/api\\/kubernetes\\/apis\\/apps\\/v1(\\/namespaces\\/.*)?\\/replicasets(\\?(.*))?$/)\n    .add(/\\/api\\/kubernetes\\/api\\/v1(\\/namespaces\\/.*)?\\/replicationcontrollers(\\?(.*))?$/)\n    .add(/\\/api\\/kubernetes\\/api\\/v1(\\/namespaces\\/.*)?\\/persistentvolumeclaims(\\?(.*))?$/)\n    .add(/\\/api\\/kubernetes\\/apis\\/batch\\/v1(\\/namespaces\\/.*)?\\/jobs(\\?(.*))?$/)\n    .add(/\\/api\\/kubernetes\\/apis\\/batch\\/v1beta1(\\/namespaces\\/.*)?\\/cronjobs(\\?(.*))?$/)\n    .add(/\\/api\\/kubernetes\\/api\\/v1(\\/namespaces\\/.*)?\\/pods(\\?(.*))?$/)\n    .add(/\\/api\\/kubernetes\\/api\\/v1(\\/namespaces\\/.*)?\\/configmaps(\\?(.*))?$/)\n    .add(/\\/api\\/kubernetes\\/api\\/v1(\\/namespaces\\/.*)?\\/secrets(\\?(.*))?$/)\n    .add(/\\/api\\/kubernetes\\/api\\/v1(\\/namespaces\\/.*)?\\/resourcequotas(\\?(.*))?$/)\n    .add(/\\/api\\/kubernetes\\/apis\\/extensions\\/v1beta1(\\/namespaces\\/.*)?\\/ingresses(\\?(.*))?$/)\n    .add(/\\/api\\/kubernetes\\/api\\/v1(\\/namespaces\\/.*)?\\/services(\\?(.*))?$/);\n/**\n * Simple Service Worker which multiplies resource list responses for load testing.\n * Also mocks k8s pagination.\n */\nself.addEventListener('fetch', (event) => {\n    if ([...workloads].some((url) => url.test(event.request.url))) {\n        event.respondWith((() => __awaiter(void 0, void 0, void 0, function* () {\n            const response = yield fetch(strippedURLFor(event.request));\n            try {\n                const json = yield response.json();\n                const limit = parseInt(new URL(event.request.url).searchParams.get('limit'), 10);\n                const continueToken = new URL(event.request.url).searchParams.get('continue');\n                const allItems = json.items\n                    .map((item) => Array.from(Array(multiplicationFactor))\n                    .map((_, i) => cloneResource(item, i))\n                    .concat([item]))\n                    .reduce((flattened, items) => flattened.concat(items), []);\n                json.items = limit\n                    ? allItems.slice(pageFromToken(continueToken) * limit, (pageFromToken(continueToken) + 1) * limit)\n                    : allItems;\n                if (limit && pageFromToken(continueToken) < allItems.length / limit) {\n                    json.metadata.continue = `toPage${pageFromToken(continueToken) + 1}`;\n                }\n                return new Response(new Blob([JSON.stringify(json)], { type: 'application/json' }), {\n                    headers: response.headers,\n                });\n            }\n            catch (e) {\n                return response;\n            }\n        }))());\n    }\n});\nself.addEventListener('message', (event) => {\n    switch (event.data.topic) {\n        case 'setFactor':\n            multiplicationFactor = event.data.value;\n            break;\n        default:\n            throw 'No topic on incoming message to load test worker';\n    }\n});\nself.addEventListener('install', (event) => event.waitUntil(self.skipWaiting()));\nself.addEventListener('activate', (event) => event.waitUntil(self.clients.claim()));\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/load-test.sw.js","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/load-test.sw.js"],"names":[],"mappings":"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","sourcesContent":["/**\n * Shamelessly taken from https://stackoverflow.com/a/2117523/6909941.\n */\nconst uuidFor = () => {\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\n    const r = (Math.random() * 16) | 0,\n      v = c === 'x' ? r : (r & 0x3) | 0x8;\n    return v.toString(16);\n  });\n};\n\nconst pageFromToken = (continueToken) =>\n  continueToken ? parseInt(continueToken.replace('toPage', ''), 10) : 0;\n\nconst cloneResource = (obj, num) => ({\n  ...obj,\n  metadata: { ...obj.metadata, name: `${obj.metadata.name}-clone-${num}`, uid: uuidFor() },\n});\n\nconst strippedURLFor = (request) => {\n  const url = new URL(request.url);\n  url.searchParams.delete('limit');\n  url.searchParams.delete('continue');\n\n  return url.toString();\n};\n\nlet multiplicationFactor = 20;\n\n/**\n * Only match core resource list requests.\n */\nconst workloads = new Set()\n  .add(/\\/api\\/kubernetes\\/apis\\/apps\\/v1(\\/namespaces\\/.*)?\\/daemonsets(\\?(.*))?$/)\n  .add(/\\/api\\/kubernetes\\/apis\\/apps\\/v1(\\/namespaces\\/.*)?\\/deployments(\\?(.*))?$/)\n  .add(/\\/api\\/kubernetes\\/apis\\/apps\\/v1(\\/namespaces\\/.*)?\\/replicasets(\\?(.*))?$/)\n  .add(/\\/api\\/kubernetes\\/api\\/v1(\\/namespaces\\/.*)?\\/replicationcontrollers(\\?(.*))?$/)\n  .add(/\\/api\\/kubernetes\\/api\\/v1(\\/namespaces\\/.*)?\\/persistentvolumeclaims(\\?(.*))?$/)\n  .add(/\\/api\\/kubernetes\\/apis\\/batch\\/v1(\\/namespaces\\/.*)?\\/jobs(\\?(.*))?$/)\n  .add(/\\/api\\/kubernetes\\/apis\\/batch\\/v1beta1(\\/namespaces\\/.*)?\\/cronjobs(\\?(.*))?$/)\n  .add(/\\/api\\/kubernetes\\/api\\/v1(\\/namespaces\\/.*)?\\/pods(\\?(.*))?$/)\n  .add(/\\/api\\/kubernetes\\/api\\/v1(\\/namespaces\\/.*)?\\/configmaps(\\?(.*))?$/)\n  .add(/\\/api\\/kubernetes\\/api\\/v1(\\/namespaces\\/.*)?\\/secrets(\\?(.*))?$/)\n  .add(/\\/api\\/kubernetes\\/api\\/v1(\\/namespaces\\/.*)?\\/resourcequotas(\\?(.*))?$/)\n  .add(/\\/api\\/kubernetes\\/apis\\/extensions\\/v1beta1(\\/namespaces\\/.*)?\\/ingresses(\\?(.*))?$/)\n  .add(/\\/api\\/kubernetes\\/api\\/v1(\\/namespaces\\/.*)?\\/services(\\?(.*))?$/);\n\n/**\n * Simple Service Worker which multiplies resource list responses for load testing.\n * Also mocks k8s pagination.\n */\nself.addEventListener('fetch', (event) => {\n  if ([...workloads].some((url) => url.test(event.request.url))) {\n    event.respondWith(\n      (async () => {\n        const response = await fetch(strippedURLFor(event.request));\n        try {\n          const json = await response.json();\n\n          const limit = parseInt(new URL(event.request.url).searchParams.get('limit'), 10);\n          const continueToken = new URL(event.request.url).searchParams.get('continue');\n\n          const allItems = json.items\n            .map((item) =>\n              Array.from(Array(multiplicationFactor))\n                .map((_, i) => cloneResource(item, i))\n                .concat([item]),\n            )\n            .reduce((flattened, items) => flattened.concat(items), []);\n\n          json.items = limit\n            ? allItems.slice(\n                pageFromToken(continueToken) * limit,\n                (pageFromToken(continueToken) + 1) * limit,\n              )\n            : allItems;\n\n          if (limit && pageFromToken(continueToken) < allItems.length / limit) {\n            json.metadata.continue = `toPage${pageFromToken(continueToken) + 1}`;\n          }\n\n          return new Response(new Blob([JSON.stringify(json)], { type: 'application/json' }), {\n            headers: response.headers,\n          });\n        } catch (e) {\n          return response;\n        }\n      })(),\n    );\n  }\n});\n\nself.addEventListener('message', (event) => {\n  switch (event.data.topic) {\n    case 'setFactor':\n      multiplicationFactor = event.data.value;\n      break;\n    default:\n      throw 'No topic on incoming message to load test worker';\n  }\n});\n\nself.addEventListener('install', (event) => event.waitUntil(self.skipWaiting()));\nself.addEventListener('activate', (event) => event.waitUntil(self.clients.claim()));\n"]}]}