{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/build-logs.jsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/build-logs.jsx","mtime":1615298458720},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { LOG_SOURCE_RUNNING, LOG_SOURCE_TERMINATED, LOG_SOURCE_WAITING, MsgBox, ResourceLog, } from './utils';\nimport { getJenkinsLogURL, BuildPipelineLogLink } from './build-pipeline';\nimport { BuildStrategyType } from './build';\nimport { BuildPhase } from '../module/k8s/builds';\nconst PipelineLogMessage = ({ build }) => {\n    const logURL = getJenkinsLogURL(build);\n    const message = logURL\n        ? 'Pipeline build logs are available through Jenkins (linked below)'\n        : 'A link to the Jenkins pipeline build logs will appear below when the build starts';\n    const detail = (React.createElement(React.Fragment, null,\n        React.createElement(\"p\", null, message),\n        React.createElement(BuildPipelineLogLink, { obj: build })));\n    return React.createElement(MsgBox, { title: \"See Jenkins Log\", detail: detail });\n};\nconst buildPhaseToLogSourceStatus = (phase) => {\n    switch (phase) {\n        case BuildPhase.New:\n        case BuildPhase.Pending:\n            return LOG_SOURCE_WAITING;\n        case BuildPhase.Cancelled:\n        case BuildPhase.Complete:\n        case BuildPhase.Error:\n        case BuildPhase.Failed:\n            return LOG_SOURCE_TERMINATED;\n        default:\n            return LOG_SOURCE_RUNNING;\n    }\n};\nexport class BuildLogs extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            status: LOG_SOURCE_WAITING,\n        };\n    }\n    static getDerivedStateFromProps({ obj: build }, { status: prevStatus }) {\n        const phase = _.get(build, 'status.phase');\n        const status = buildPhaseToLogSourceStatus(phase);\n        return prevStatus !== status ? { status } : null;\n    }\n    render() {\n        const { obj: build } = this.props;\n        const isPipeline = _.get(build, 'spec.strategy.type') === BuildStrategyType.JenkinsPipeline;\n        return (React.createElement(\"div\", { className: \"co-m-pane__body\" }, isPipeline ? (React.createElement(PipelineLogMessage, { build: build })) : (React.createElement(ResourceLog, { resource: build, resourceStatus: this.state.status }))));\n    }\n}\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/build-logs.jsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/build-logs.jsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAM,WAAW,CAAC;AAC/B,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EACL,kBAAkB,EAClB,qBAAqB,EACrB,kBAAkB,EAClB,MAAM,EACN,WAAW,GACZ,MAAM,SAAS,CAAC;AACjB,OAAO,EAAE,gBAAgB,EAAE,oBAAoB,EAAE,MAAM,kBAAkB,CAAC;AAC1E,OAAO,EAAE,iBAAiB,EAAE,MAAM,SAAS,CAAC;AAC5C,OAAO,EAAE,UAAU,EAAE,MAAM,sBAAsB,CAAC;AAElD,MAAM,kBAAkB,GAAG,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE;IACvC,MAAM,MAAM,GAAG,gBAAgB,CAAC,KAAK,CAAC,CAAC;IACvC,MAAM,OAAO,GAAG,MAAM;QACpB,CAAC,CAAC,kEAAkE;QACpE,CAAC,CAAC,mFAAmF,CAAC;IAExF,MAAM,MAAM,GAAG,CACb;QACE,+BAAI,OAAO,CAAK;QAChB,oBAAC,oBAAoB,IAAC,GAAG,EAAE,KAAK,GAAI,CACnC,CACJ,CAAC;IAEF,OAAO,oBAAC,MAAM,IAAC,KAAK,EAAC,iBAAiB,EAAC,MAAM,EAAE,MAAM,GAAI,CAAC;AAC5D,CAAC,CAAC;AAEF,MAAM,2BAA2B,GAAG,CAAC,KAAK,EAAE,EAAE;IAC5C,QAAQ,KAAK,EAAE;QACb,KAAK,UAAU,CAAC,GAAG,CAAC;QACpB,KAAK,UAAU,CAAC,OAAO;YACrB,OAAO,kBAAkB,CAAC;QAE5B,KAAK,UAAU,CAAC,SAAS,CAAC;QAC1B,KAAK,UAAU,CAAC,QAAQ,CAAC;QACzB,KAAK,UAAU,CAAC,KAAK,CAAC;QACtB,KAAK,UAAU,CAAC,MAAM;YACpB,OAAO,qBAAqB,CAAC;QAE/B;YACE,OAAO,kBAAkB,CAAC;KAC7B;AACH,CAAC,CAAC;AAEF,MAAM,OAAO,SAAU,SAAQ,KAAK,CAAC,SAAS;IAC5C,YAAY,KAAK;QACf,KAAK,CAAC,KAAK,CAAC,CAAC;QACb,IAAI,CAAC,KAAK,GAAG;YACX,MAAM,EAAE,kBAAkB;SAC3B,CAAC;IACJ,CAAC;IAED,MAAM,CAAC,wBAAwB,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE,MAAM,EAAE,UAAU,EAAE;QACpE,MAAM,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;QAC3C,MAAM,MAAM,GAAG,2BAA2B,CAAC,KAAK,CAAC,CAAC;QAClD,OAAO,UAAU,KAAK,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;IACnD,CAAC;IAED,MAAM;QACJ,MAAM,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAClC,MAAM,UAAU,GAAG,CAAC,CAAC,GAAG,CAAC,KAAK,EAAE,oBAAoB,CAAC,KAAK,iBAAiB,CAAC,eAAe,CAAC;QAE5F,OAAO,CACL,6BAAK,SAAS,EAAC,iBAAiB,IAC7B,UAAU,CAAC,CAAC,CAAC,CACZ,oBAAC,kBAAkB,IAAC,KAAK,EAAE,KAAK,GAAI,CACrC,CAAC,CAAC,CAAC,CACF,oBAAC,WAAW,IAAC,QAAQ,EAAE,KAAK,EAAE,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,GAAI,CACpE,CACG,CACP,CAAC;IACJ,CAAC;CACF","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport {\n  LOG_SOURCE_RUNNING,\n  LOG_SOURCE_TERMINATED,\n  LOG_SOURCE_WAITING,\n  MsgBox,\n  ResourceLog,\n} from './utils';\nimport { getJenkinsLogURL, BuildPipelineLogLink } from './build-pipeline';\nimport { BuildStrategyType } from './build';\nimport { BuildPhase } from '../module/k8s/builds';\n\nconst PipelineLogMessage = ({ build }) => {\n  const logURL = getJenkinsLogURL(build);\n  const message = logURL\n    ? 'Pipeline build logs are available through Jenkins (linked below)'\n    : 'A link to the Jenkins pipeline build logs will appear below when the build starts';\n\n  const detail = (\n    <>\n      <p>{message}</p>\n      <BuildPipelineLogLink obj={build} />\n    </>\n  );\n\n  return <MsgBox title=\"See Jenkins Log\" detail={detail} />;\n};\n\nconst buildPhaseToLogSourceStatus = (phase) => {\n  switch (phase) {\n    case BuildPhase.New:\n    case BuildPhase.Pending:\n      return LOG_SOURCE_WAITING;\n\n    case BuildPhase.Cancelled:\n    case BuildPhase.Complete:\n    case BuildPhase.Error:\n    case BuildPhase.Failed:\n      return LOG_SOURCE_TERMINATED;\n\n    default:\n      return LOG_SOURCE_RUNNING;\n  }\n};\n\nexport class BuildLogs extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      status: LOG_SOURCE_WAITING,\n    };\n  }\n\n  static getDerivedStateFromProps({ obj: build }, { status: prevStatus }) {\n    const phase = _.get(build, 'status.phase');\n    const status = buildPhaseToLogSourceStatus(phase);\n    return prevStatus !== status ? { status } : null;\n  }\n\n  render() {\n    const { obj: build } = this.props;\n    const isPipeline = _.get(build, 'spec.strategy.type') === BuildStrategyType.JenkinsPipeline;\n\n    return (\n      <div className=\"co-m-pane__body\">\n        {isPipeline ? (\n          <PipelineLogMessage build={build} />\n        ) : (\n          <ResourceLog resource={build} resourceStatus={this.state.status} />\n        )}\n      </div>\n    );\n  }\n}\n"]}]}