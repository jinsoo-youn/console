{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/common/MultipleResourceKeySelector.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/common/MultipleResourceKeySelector.tsx","mtime":1616735742390},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { useField, useFormikContext } from 'formik';\nimport cx from 'classnames';\nimport * as fuzzy from 'fuzzysearch';\nimport * as _ from 'lodash';\nimport { getActiveNamespace } from '@console/internal/reducers/ui';\nimport { ResourceDropdown, getFieldId, useFormikValidationFix } from '@console/shared';\nimport { FormGroup } from '@patternfly/react-core';\nimport { useK8sWatchResource, } from '@console/internal/components/utils/k8s-watch-hook';\nimport MultipleKeySelector from './MultipleKeySelector';\nconst MultipleResourceKeySelector = ({ label, namespace, resourceModel, required, resourceNameField, resourceKeysField, }) => {\n    const { setFieldValue, setFieldTouched } = useFormikContext();\n    const [field, { touched, error }] = useField(resourceNameField);\n    const isValid = !(touched && error);\n    const fieldId = getFieldId(resourceNameField, 'res-dropdown');\n    const [keys, setKeys] = React.useState({});\n    useFormikValidationFix(field.value);\n    const resource = React.useMemo(() => ({\n        kind: resourceModel.kind,\n        isList: true,\n        namespace,\n        optional: true,\n    }), [namespace, resourceModel.kind]);\n    const [resources, loaded, loadError] = useK8sWatchResource(resource);\n    const autocompleteFilter = (strText, item) => { var _a; return fuzzy(strText, (_a = item === null || item === void 0 ? void 0 : item.props) === null || _a === void 0 ? void 0 : _a.name); };\n    const generateKeys = (resourceName) => {\n        const selectedResource = _.find(resources, (res) => {\n            return _.get(res, 'metadata.name') === resourceName;\n        });\n        const keyMap = selectedResource === null || selectedResource === void 0 ? void 0 : selectedResource.data;\n        const itemKeys = Object.keys(keyMap).reduce((acc, key) => (Object.assign(Object.assign({}, acc), { [key]: key })), {});\n        setKeys(itemKeys);\n    };\n    return (React.createElement(FormGroup, { fieldId: fieldId, label: label, isValid: isValid, className: \"odc-multiple-key-selector\", isRequired: required },\n        React.createElement(ResourceDropdown, { resources: [\n                { kind: resourceModel.kind, loaded, loadError, data: resources },\n            ], loaded: loaded, loadError: loadError, dataSelector: ['metadata', 'name'], selectedKey: field.value, placeholder: `Select a ${resourceModel.label}`, autocompleteFilter: autocompleteFilter, dropDownClassName: cx({ 'dropdown--full-width': true }), onChange: (value) => {\n                setFieldValue(resourceKeysField, undefined);\n                setFieldValue(resourceNameField, value);\n                setFieldTouched(resourceNameField, true);\n                generateKeys(value);\n            }, showBadge: true }),\n        field.value && React.createElement(MultipleKeySelector, { name: resourceKeysField, keys: keys })));\n};\nconst mapStateToProps = (state) => ({\n    namespace: getActiveNamespace(state),\n});\nexport default connect(mapStateToProps)(MultipleResourceKeySelector);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/common/MultipleResourceKeySelector.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/common/MultipleResourceKeySelector.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { useField, useFormikContext, FormikValues } from 'formik';\nimport cx from 'classnames';\nimport * as fuzzy from 'fuzzysearch';\nimport * as _ from 'lodash';\nimport { RootState } from '@console/internal/redux';\nimport { getActiveNamespace } from '@console/internal/reducers/ui';\nimport { K8sKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport { ResourceDropdown, getFieldId, useFormikValidationFix } from '@console/shared';\nimport { FormGroup } from '@patternfly/react-core';\nimport {\n  useK8sWatchResource,\n  WatchK8sResource,\n} from '@console/internal/components/utils/k8s-watch-hook';\nimport MultipleKeySelector from './MultipleKeySelector';\n\ninterface MultipleResourceKeySelectorProps {\n  label: string;\n  resourceModel: K8sKind;\n  required?: boolean;\n  resourceNameField: string;\n  resourceKeysField: string;\n}\n\ninterface StateProps {\n  namespace: string;\n}\n\nconst MultipleResourceKeySelector: React.FC<StateProps & MultipleResourceKeySelectorProps> = ({\n  label,\n  namespace,\n  resourceModel,\n  required,\n  resourceNameField,\n  resourceKeysField,\n}) => {\n  const { setFieldValue, setFieldTouched } = useFormikContext<FormikValues>();\n  const [field, { touched, error }] = useField(resourceNameField);\n  const isValid = !(touched && error);\n  const fieldId = getFieldId(resourceNameField, 'res-dropdown');\n  const [keys, setKeys] = React.useState({});\n\n  useFormikValidationFix(field.value);\n\n  const resource: WatchK8sResource = React.useMemo(\n    () => ({\n      kind: resourceModel.kind,\n      isList: true,\n      namespace,\n      optional: true,\n    }),\n    [namespace, resourceModel.kind],\n  );\n\n  const [resources, loaded, loadError] = useK8sWatchResource(resource);\n\n  const autocompleteFilter = (strText, item): boolean => fuzzy(strText, item?.props?.name);\n\n  const generateKeys = (resourceName: string) => {\n    const selectedResource: K8sResourceKind = _.find(resources, (res) => {\n      return _.get(res, 'metadata.name') === resourceName;\n    });\n    const keyMap = selectedResource?.data;\n    const itemKeys = Object.keys(keyMap).reduce((acc, key) => ({ ...acc, [key]: key }), {});\n    setKeys(itemKeys);\n  };\n\n  return (\n    <FormGroup\n      fieldId={fieldId}\n      label={label}\n      isValid={isValid}\n      className=\"odc-multiple-key-selector\"\n      isRequired={required}\n    >\n      <ResourceDropdown\n        resources={[\n          { kind: resourceModel.kind, loaded, loadError, data: resources as K8sResourceKind[] },\n        ]}\n        loaded={loaded}\n        loadError={loadError}\n        dataSelector={['metadata', 'name']}\n        selectedKey={field.value}\n        placeholder={`Select a ${resourceModel.label}`}\n        autocompleteFilter={autocompleteFilter}\n        dropDownClassName={cx({ 'dropdown--full-width': true })}\n        onChange={(value: string) => {\n          setFieldValue(resourceKeysField, undefined);\n          setFieldValue(resourceNameField, value);\n          setFieldTouched(resourceNameField, true);\n          generateKeys(value);\n        }}\n        showBadge\n      />\n      {field.value && <MultipleKeySelector name={resourceKeysField} keys={keys} />}\n    </FormGroup>\n  );\n};\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  namespace: getActiveNamespace(state),\n});\n\nexport default connect<StateProps, null, MultipleResourceKeySelectorProps>(mapStateToProps)(\n  MultipleResourceKeySelector,\n);\n"]}]}