{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/form/size-unit-utils.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/form/size-unit-utils.tsx","mtime":1616735742420},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { assureEndsWith } from '@console/shared/src';\nimport { getStringEnumValues } from '../../utils/types';\nimport { convertToBaseValue } from '@console/internal/components/utils';\nexport var BinaryUnit;\n(function (BinaryUnit) {\n    BinaryUnit[\"B\"] = \"B\";\n    BinaryUnit[\"Ki\"] = \"Ki\";\n    BinaryUnit[\"Mi\"] = \"Mi\";\n    BinaryUnit[\"Gi\"] = \"Gi\";\n    BinaryUnit[\"Ti\"] = \"Ti\";\n})(BinaryUnit || (BinaryUnit = {}));\nexport const getReasonableUnits = (originalUnit) => {\n    const result = [BinaryUnit.Mi, BinaryUnit.Gi, BinaryUnit.Ti];\n    if (originalUnit === BinaryUnit.B) {\n        result.unshift(BinaryUnit.B, BinaryUnit.Ki);\n    }\n    else if (originalUnit === BinaryUnit.Ki) {\n        result.unshift(BinaryUnit.Ki);\n    }\n    return result;\n};\nexport const stringValueUnitSplit = (combinedVal) => {\n    const index = combinedVal.search(/([a-zA-Z]+)/g);\n    let value;\n    let unit;\n    if (index === -1) {\n        value = combinedVal;\n    }\n    else {\n        value = combinedVal.slice(0, index);\n        unit = combinedVal.slice(index);\n    }\n    return [value, unit];\n};\nexport const convertToHighestUnit = (value, unit) => {\n    const units = getStringEnumValues(BinaryUnit);\n    const sliceIndex = units.indexOf(unit);\n    const slicedUnits = sliceIndex === -1 ? units : units.slice(sliceIndex);\n    let nextValue = value;\n    let nextUnit = slicedUnits.shift();\n    while (nextValue !== 0 && nextValue % 1024 === 0 && slicedUnits.length > 0) {\n        nextValue /= 1024;\n        nextUnit = slicedUnits.shift();\n    }\n    return { value: nextValue, unit: nextUnit, str: `${nextValue}${nextUnit}` };\n};\nexport const convertToBytes = (value) => {\n    if (!value || BinaryUnit[value]) {\n        return null;\n    }\n    const result = convertToBaseValue(value);\n    if (!result && value.match(/^[0-9.]+B$/)) {\n        const [v] = stringValueUnitSplit(value);\n        return v;\n    }\n    return result;\n};\nexport const convertToHighestUnitFromUnknown = (value) => {\n    const result = convertToBytes(value);\n    return result && convertToHighestUnit(result, BinaryUnit.B);\n};\nexport const toIECUnit = (unit) => assureEndsWith(unit, 'B');\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/form/size-unit-utils.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/form/size-unit-utils.tsx"],"names":[],"mappings":"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","sourcesContent":["import { assureEndsWith } from '@console/shared/src';\nimport { getStringEnumValues } from '../../utils/types';\nimport { convertToBaseValue } from '@console/internal/components/utils';\n\nexport enum BinaryUnit {\n  B = 'B',\n  Ki = 'Ki',\n  Mi = 'Mi',\n  Gi = 'Gi',\n  Ti = 'Ti',\n}\n\nexport const getReasonableUnits = (originalUnit: BinaryUnit) => {\n  const result = [BinaryUnit.Mi, BinaryUnit.Gi, BinaryUnit.Ti];\n  if (originalUnit === BinaryUnit.B) {\n    result.unshift(BinaryUnit.B, BinaryUnit.Ki);\n  } else if (originalUnit === BinaryUnit.Ki) {\n    result.unshift(BinaryUnit.Ki);\n  }\n  return result;\n};\n\ntype Result = {\n  value: number;\n  unit: BinaryUnit;\n  str: string;\n};\n\nexport const stringValueUnitSplit = (combinedVal) => {\n  const index = combinedVal.search(/([a-zA-Z]+)/g);\n  let value;\n  let unit;\n  if (index === -1) {\n    value = combinedVal;\n  } else {\n    value = combinedVal.slice(0, index);\n    unit = combinedVal.slice(index);\n  }\n  return [value, unit];\n};\n\nexport const convertToHighestUnit = (value: number, unit: BinaryUnit): Result => {\n  const units = getStringEnumValues<BinaryUnit>(BinaryUnit);\n  const sliceIndex = units.indexOf(unit);\n  const slicedUnits = sliceIndex === -1 ? units : units.slice(sliceIndex);\n\n  let nextValue = value;\n  let nextUnit = slicedUnits.shift();\n  while (nextValue !== 0 && nextValue % 1024 === 0 && slicedUnits.length > 0) {\n    nextValue /= 1024;\n    nextUnit = slicedUnits.shift();\n  }\n  return { value: nextValue, unit: nextUnit, str: `${nextValue}${nextUnit}` };\n};\n\nexport const convertToBytes = (value: string): number => {\n  if (!value || BinaryUnit[value]) {\n    return null;\n  }\n\n  const result = convertToBaseValue(value);\n\n  if (!result && value.match(/^[0-9.]+B$/)) {\n    const [v] = stringValueUnitSplit(value);\n    return v;\n  }\n\n  return result;\n};\n\nexport const convertToHighestUnitFromUnknown = (value: string): Result => {\n  const result = convertToBytes(value);\n  return result && convertToHighestUnit(result, BinaryUnit.B);\n};\n\nexport const toIECUnit = (unit: BinaryUnit | string) => assureEndsWith(unit, 'B');\n"]}]}