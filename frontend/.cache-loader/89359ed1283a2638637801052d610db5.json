{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/dom-utils.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/dom-utils.tsx","mtime":1615298458750},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nconst isHTMLElement = (n) => {\n    return n.nodeType === Node.ELEMENT_NODE;\n};\nexport const getParentScrollableElement = (node) => {\n    let parentNode = node;\n    while (parentNode) {\n        if (isHTMLElement(parentNode)) {\n            let overflow = parentNode.style.overflow;\n            if (!overflow.includes('scroll') && !overflow.includes('auto')) {\n                overflow = window.getComputedStyle(parentNode).overflow;\n            }\n            if (overflow.includes('scroll') || overflow.includes('auto')) {\n                return parentNode;\n            }\n        }\n        parentNode = parentNode.parentNode;\n    }\n    return undefined;\n};\nexport const WithScrollContainer = ({ children }) => {\n    const [scrollContainer, setScrollContainer] = React.useState();\n    const ref = React.useCallback((node) => {\n        if (node) {\n            setScrollContainer(getParentScrollableElement(node));\n        }\n    }, []);\n    return scrollContainer ? children(scrollContainer) : React.createElement(\"span\", { ref: ref });\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/dom-utils.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/dom-utils.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,MAAM,aAAa,GAAG,CAAC,CAAO,EAAoB,EAAE;IAClD,OAAO,CAAC,CAAC,QAAQ,KAAK,IAAI,CAAC,YAAY,CAAC;AAC1C,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,0BAA0B,GAAG,CAAC,IAAiB,EAAE,EAAE;IAC9D,IAAI,UAAU,GAAS,IAAI,CAAC;IAC5B,OAAO,UAAU,EAAE;QACjB,IAAI,aAAa,CAAC,UAAU,CAAC,EAAE;YAC7B,IAAI,QAAQ,GAAG,UAAU,CAAC,KAAK,CAAC,QAAQ,CAAC;YACzC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;gBAC9D,QAAQ,GAAG,MAAM,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,QAAQ,CAAC;aACzD;YACD,IAAI,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,EAAE;gBAC5D,OAAO,UAAU,CAAC;aACnB;SACF;QACD,UAAU,GAAG,UAAU,CAAC,UAAU,CAAC;KACpC;IACD,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC;AAMF,MAAM,CAAC,MAAM,mBAAmB,GAAuC,CAAC,EAAE,QAAQ,EAAE,EAAE,EAAE;IACtF,MAAM,CAAC,eAAe,EAAE,kBAAkB,CAAC,GAAG,KAAK,CAAC,QAAQ,EAAe,CAAC;IAC5E,MAAM,GAAG,GAAG,KAAK,CAAC,WAAW,CAAC,CAAC,IAAI,EAAE,EAAE;QACrC,IAAI,IAAI,EAAE;YACR,kBAAkB,CAAC,0BAA0B,CAAC,IAAI,CAAC,CAAC,CAAC;SACtD;IACH,CAAC,EAAE,EAAE,CAAC,CAAC;IACP,OAAO,eAAe,CAAC,CAAC,CAAC,QAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC,8BAAM,GAAG,EAAE,GAAG,GAAI,CAAC;AAC1E,CAAC,CAAC","sourcesContent":["import * as React from 'react';\n\nconst isHTMLElement = (n: Node): n is HTMLElement => {\n  return n.nodeType === Node.ELEMENT_NODE;\n};\n\nexport const getParentScrollableElement = (node: HTMLElement) => {\n  let parentNode: Node = node;\n  while (parentNode) {\n    if (isHTMLElement(parentNode)) {\n      let overflow = parentNode.style.overflow;\n      if (!overflow.includes('scroll') && !overflow.includes('auto')) {\n        overflow = window.getComputedStyle(parentNode).overflow;\n      }\n      if (overflow.includes('scroll') || overflow.includes('auto')) {\n        return parentNode;\n      }\n    }\n    parentNode = parentNode.parentNode;\n  }\n  return undefined;\n};\n\ntype WithScrollContainerProps = {\n  children: (scrollContainer: HTMLElement) => React.ReactElement | null;\n};\n\nexport const WithScrollContainer: React.FC<WithScrollContainerProps> = ({ children }) => {\n  const [scrollContainer, setScrollContainer] = React.useState<HTMLElement>();\n  const ref = React.useCallback((node) => {\n    if (node) {\n      setScrollContainer(getParentScrollableElement(node));\n    }\n  }, []);\n  return scrollContainer ? children(scrollContainer) : <span ref={ref} />;\n};\n"]}]}