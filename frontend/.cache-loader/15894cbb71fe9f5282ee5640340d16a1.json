{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/status/baremetal-node-status.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/status/baremetal-node-status.ts","mtime":1615298458670},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { nodeStatus } from '@console/app/src/status/node';\nimport { isNodeUnschedulable } from '@console/shared/src/selectors/node';\nimport { isHostPoweredOn } from '../selectors';\nimport { getNodeMaintenanceStatus } from './node-maintenance-status';\nexport const bareMetalNodeStatus = ({ node, nodeMaintenance, }) => getNodeMaintenanceStatus(nodeMaintenance) || { status: nodeStatus(node) };\nexport const baremetalNodeSecondaryStatus = ({ node, host, nodeMaintenance, }) => {\n    const states = [];\n    if (!nodeMaintenance && isNodeUnschedulable(node)) {\n        states.push('Scheduling disabled');\n    }\n    // show host power status only if there is actual host associated to node\n    if (host && !isHostPoweredOn(host)) {\n        states.push('Host is powered off');\n    }\n    return states;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/status/baremetal-node-status.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/status/baremetal-node-status.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,UAAU,EAAE,MAAM,8BAA8B,CAAC;AAC1D,OAAO,EAAE,mBAAmB,EAAE,MAAM,oCAAoC,CAAC;AAGzE,OAAO,EAAE,eAAe,EAAE,MAAM,cAAc,CAAC;AAC/C,OAAO,EAAE,wBAAwB,EAAE,MAAM,2BAA2B,CAAC;AAOrE,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,EAClC,IAAI,EACJ,eAAe,GACU,EAAe,EAAE,CAC1C,wBAAwB,CAAC,eAAe,CAAC,IAAI,EAAE,MAAM,EAAE,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC;AAQ5E,MAAM,CAAC,MAAM,4BAA4B,GAAG,CAAC,EAC3C,IAAI,EACJ,IAAI,EACJ,eAAe,GACmB,EAAY,EAAE;IAChD,MAAM,MAAM,GAAG,EAAE,CAAC;IAClB,IAAI,CAAC,eAAe,IAAI,mBAAmB,CAAC,IAAI,CAAC,EAAE;QACjD,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;KACpC;IACD,yEAAyE;IACzE,IAAI,IAAI,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,EAAE;QAClC,MAAM,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;KACpC;IACD,OAAO,MAAM,CAAC;AAChB,CAAC,CAAC","sourcesContent":["import { NodeKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport { nodeStatus } from '@console/app/src/status/node';\nimport { isNodeUnschedulable } from '@console/shared/src/selectors/node';\nimport { StatusProps } from '../components/types';\nimport { BareMetalHostKind } from '../types';\nimport { isHostPoweredOn } from '../selectors';\nimport { getNodeMaintenanceStatus } from './node-maintenance-status';\n\ntype BareMetalNodeStatusProps = {\n  node: NodeKind;\n  nodeMaintenance?: K8sResourceKind;\n};\n\nexport const bareMetalNodeStatus = ({\n  node,\n  nodeMaintenance,\n}: BareMetalNodeStatusProps): StatusProps =>\n  getNodeMaintenanceStatus(nodeMaintenance) || { status: nodeStatus(node) };\n\ntype BareMetalNodeSecondaryStatusProps = {\n  node: NodeKind;\n  host?: BareMetalHostKind;\n  nodeMaintenance?: K8sResourceKind;\n};\n\nexport const baremetalNodeSecondaryStatus = ({\n  node,\n  host,\n  nodeMaintenance,\n}: BareMetalNodeSecondaryStatusProps): string[] => {\n  const states = [];\n  if (!nodeMaintenance && isNodeUnschedulable(node)) {\n    states.push('Scheduling disabled');\n  }\n  // show host power status only if there is actual host associated to node\n  if (host && !isHostPoweredOn(host)) {\n    states.push('Host is powered off');\n  }\n  return states;\n};\n"]}]}