{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/dashboard/details-card/DetailItem.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/dashboard/details-card/DetailItem.tsx","mtime":1616735742370},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as classNames from 'classnames';\nexport const DetailItem = React.memo(({ title, isLoading = false, children, error = false, valueClassName }) => {\n    let status;\n    if (error) {\n        status = React.createElement(\"span\", { className: \"text-secondary\" }, \"Not available\");\n    }\n    else if (isLoading) {\n        status = React.createElement(\"div\", { className: \"skeleton-text\" });\n    }\n    else {\n        status = children;\n    }\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"dt\", { className: \"co-details-card__item-title\" }, title),\n        React.createElement(\"dd\", { className: classNames('co-details-card__item-value', valueClassName) }, status)));\n});\nexport default DetailItem;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/dashboard/details-card/DetailItem.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/dashboard/details-card/DetailItem.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,UAAU,MAAM,YAAY,CAAC;AAEzC,MAAM,CAAC,MAAM,UAAU,GAA8B,KAAK,CAAC,IAAI,CAC7D,CAAC,EAAE,KAAK,EAAE,SAAS,GAAG,KAAK,EAAE,QAAQ,EAAE,KAAK,GAAG,KAAK,EAAE,cAAc,EAAE,EAAE,EAAE;IACxE,IAAI,MAAuB,CAAC;IAC5B,IAAI,KAAK,EAAE;QACT,MAAM,GAAG,8BAAM,SAAS,EAAC,gBAAgB,oBAAqB,CAAC;KAChE;SAAM,IAAI,SAAS,EAAE;QACpB,MAAM,GAAG,6BAAK,SAAS,EAAC,eAAe,GAAG,CAAC;KAC5C;SAAM;QACL,MAAM,GAAG,QAAQ,CAAC;KACnB;IACD,OAAO,CACL;QACE,4BAAI,SAAS,EAAC,6BAA6B,IAAE,KAAK,CAAM;QACxD,4BAAI,SAAS,EAAE,UAAU,CAAC,6BAA6B,EAAE,cAAc,CAAC,IAAG,MAAM,CAAM,CACtF,CACJ,CAAC;AACJ,CAAC,CACF,CAAC;AAEF,eAAe,UAAU,CAAC","sourcesContent":["import * as React from 'react';\nimport * as classNames from 'classnames';\n\nexport const DetailItem: React.FC<DetailItemProps> = React.memo(\n  ({ title, isLoading = false, children, error = false, valueClassName }) => {\n    let status: React.ReactNode;\n    if (error) {\n      status = <span className=\"text-secondary\">Not available</span>;\n    } else if (isLoading) {\n      status = <div className=\"skeleton-text\" />;\n    } else {\n      status = children;\n    }\n    return (\n      <>\n        <dt className=\"co-details-card__item-title\">{title}</dt>\n        <dd className={classNames('co-details-card__item-value', valueClassName)}>{status}</dd>\n      </>\n    );\n  },\n);\n\nexport default DetailItem;\n\ntype DetailItemProps = {\n  title: string;\n  children: React.ReactNode;\n  isLoading?: boolean;\n  error?: boolean;\n  valueClassName?: string;\n};\n"]}]}