{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-plugin-sdk/src/useExtensions.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-plugin-sdk/src/useExtensions.ts","mtime":1615298458600},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore: FIXME missing exports due to out-of-sync @types/react-redux version\nimport { useSelector } from 'react-redux';\nimport { createSelectorCreator, defaultMemoize } from 'reselect';\nimport { stateToFlagsObject } from '@console/internal/reducers/features';\nimport { pluginStore } from '@console/internal/plugins';\nimport { getGatingFlagNames, isExtensionInUse } from './store';\n/**\n * React hook for consuming Console extensions.\n *\n * This hook takes extension type guard as its only argument and returns a list\n * of extension instances, narrowed by the given type guard, which are currently\n * in use.\n *\n * An extension is considered to be in use when\n *\n * - it is an always-on extension, i.e. not gated by any feature flags\n * - all feature flags referenced by its `flags` object are resolved to the right\n *   values\n *\n * Example usage:\n *\n * ```ts\n * import {\n *   useExtensions,\n *   NavItem,\n *   Perspective,\n *   isNavItem,\n *   isPerspective,\n * } from '@console/plugin-sdk';\n *\n * const Example = () => {\n *   const navItemExtensions = useExtensions<NavItem>(isNavItem);\n *   const perspectiveExtensions = useExtensions<Perspective>(isPerspective);\n *   // process extensions and render your component\n * };\n * ```\n *\n * @param typeGuard Type guard used to narrow the extension type.\n */\nexport const useExtensions = (typeGuard) => {\n    const allExtensions = pluginStore.getAllExtensions();\n    // 1) Narrow extensions according to type guard\n    const matchedExtensions = React.useMemo(() => allExtensions.filter(typeGuard), [\n        allExtensions,\n        typeGuard,\n    ]);\n    // 2) Compute flags relevant for gating matched extensions\n    const gatingFlagNames = React.useMemo(() => getGatingFlagNames(matchedExtensions), [\n        matchedExtensions,\n    ]);\n    const gatingFlagSelectorCreator = React.useMemo(() => createSelectorCreator(defaultMemoize, (prevFeatureState, nextFeatureState) => gatingFlagNames.every((f) => prevFeatureState.get(f) === nextFeatureState.get(f))), [gatingFlagNames]);\n    const gatingFlagSelector = React.useMemo(() => gatingFlagSelectorCreator((state) => state.FLAGS, (featureState) => stateToFlagsObject(featureState, gatingFlagNames)), [gatingFlagSelectorCreator, gatingFlagNames]);\n    const gatingFlags = useSelector(gatingFlagSelector);\n    // 3) Gate matched extensions by relevant feature flags\n    const extensionsInUse = React.useMemo(() => matchedExtensions.filter((e) => isExtensionInUse(e, gatingFlags)), [matchedExtensions, gatingFlags]);\n    return extensionsInUse;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-plugin-sdk/src/useExtensions.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-plugin-sdk/src/useExtensions.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,4DAA4D;AAC5D,kFAAkF;AAClF,OAAO,EAAE,WAAW,EAAE,MAAM,aAAa,CAAC;AAC1C,OAAO,EAAE,qBAAqB,EAAE,cAAc,EAAE,MAAM,UAAU,CAAC;AAEjE,OAAO,EAAE,kBAAkB,EAA6B,MAAM,qCAAqC,CAAC;AACpG,OAAO,EAAE,WAAW,EAAE,MAAM,2BAA2B,CAAC;AACxD,OAAO,EAAE,kBAAkB,EAAE,gBAAgB,EAAE,MAAM,SAAS,CAAC;AAG/D;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;GAgCG;AACH,MAAM,CAAC,MAAM,aAAa,GAAkB,CAAC,SAAS,EAAE,EAAE;IACxD,MAAM,aAAa,GAAG,WAAW,CAAC,gBAAgB,EAAE,CAAC;IAErD,+CAA+C;IAC/C,MAAM,iBAAiB,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,aAAa,CAAC,MAAM,CAAC,SAAS,CAAC,EAAE;QAC7E,aAAa;QACb,SAAS;KACV,CAAC,CAAC;IAEH,0DAA0D;IAC1D,MAAM,eAAe,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,kBAAkB,CAAC,iBAAiB,CAAC,EAAE;QACjF,iBAAiB;KAClB,CAAC,CAAC;IACH,MAAM,yBAAyB,GAAG,KAAK,CAAC,OAAO,CAC7C,GAAG,EAAE,CACH,qBAAqB,CACnB,cAAqB,EACrB,CAAC,gBAA8B,EAAE,gBAA8B,EAAE,EAAE,CACjE,eAAe,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,KAAK,gBAAgB,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CACpF,EACH,CAAC,eAAe,CAAC,CAClB,CAAC;IACF,MAAM,kBAAkB,GAAG,KAAK,CAAC,OAAO,CACtC,GAAG,EAAE,CACH,yBAAyB,CACvB,CAAC,KAAgB,EAAE,EAAE,CAAC,KAAK,CAAC,KAAK,EACjC,CAAC,YAAY,EAAE,EAAE,CAAC,kBAAkB,CAAC,YAAY,EAAE,eAAe,CAAC,CACpE,EACH,CAAC,yBAAyB,EAAE,eAAe,CAAC,CAC7C,CAAC;IACF,MAAM,WAAW,GAAG,WAAW,CAAyB,kBAAkB,CAAC,CAAC;IAE5E,uDAAuD;IACvD,MAAM,eAAe,GAAG,KAAK,CAAC,OAAO,CACnC,GAAG,EAAE,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,gBAAgB,CAAC,CAAC,EAAE,WAAW,CAAC,CAAC,EACvE,CAAC,iBAAiB,EAAE,WAAW,CAAC,CACjC,CAAC;IAEF,OAAO,eAAe,CAAC;AACzB,CAAC,CAAC","sourcesContent":["import * as React from 'react';\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore: FIXME missing exports due to out-of-sync @types/react-redux version\nimport { useSelector } from 'react-redux';\nimport { createSelectorCreator, defaultMemoize } from 'reselect';\nimport { RootState } from '@console/internal/redux';\nimport { stateToFlagsObject, FlagsObject, FeatureState } from '@console/internal/reducers/features';\nimport { pluginStore } from '@console/internal/plugins';\nimport { getGatingFlagNames, isExtensionInUse } from './store';\nimport { Extension, ExtensionTypeGuard } from './typings';\n\n/**\n * React hook for consuming Console extensions.\n *\n * This hook takes extension type guard as its only argument and returns a list\n * of extension instances, narrowed by the given type guard, which are currently\n * in use.\n *\n * An extension is considered to be in use when\n *\n * - it is an always-on extension, i.e. not gated by any feature flags\n * - all feature flags referenced by its `flags` object are resolved to the right\n *   values\n *\n * Example usage:\n *\n * ```ts\n * import {\n *   useExtensions,\n *   NavItem,\n *   Perspective,\n *   isNavItem,\n *   isPerspective,\n * } from '@console/plugin-sdk';\n *\n * const Example = () => {\n *   const navItemExtensions = useExtensions<NavItem>(isNavItem);\n *   const perspectiveExtensions = useExtensions<Perspective>(isPerspective);\n *   // process extensions and render your component\n * };\n * ```\n *\n * @param typeGuard Type guard used to narrow the extension type.\n */\nexport const useExtensions: UseExtensions = (typeGuard) => {\n  const allExtensions = pluginStore.getAllExtensions();\n\n  // 1) Narrow extensions according to type guard\n  const matchedExtensions = React.useMemo(() => allExtensions.filter(typeGuard), [\n    allExtensions,\n    typeGuard,\n  ]);\n\n  // 2) Compute flags relevant for gating matched extensions\n  const gatingFlagNames = React.useMemo(() => getGatingFlagNames(matchedExtensions), [\n    matchedExtensions,\n  ]);\n  const gatingFlagSelectorCreator = React.useMemo(\n    () =>\n      createSelectorCreator(\n        defaultMemoize as any,\n        (prevFeatureState: FeatureState, nextFeatureState: FeatureState) =>\n          gatingFlagNames.every((f) => prevFeatureState.get(f) === nextFeatureState.get(f)),\n      ),\n    [gatingFlagNames],\n  );\n  const gatingFlagSelector = React.useMemo(\n    () =>\n      gatingFlagSelectorCreator(\n        (state: RootState) => state.FLAGS,\n        (featureState) => stateToFlagsObject(featureState, gatingFlagNames),\n      ),\n    [gatingFlagSelectorCreator, gatingFlagNames],\n  );\n  const gatingFlags = useSelector<RootState, FlagsObject>(gatingFlagSelector);\n\n  // 3) Gate matched extensions by relevant feature flags\n  const extensionsInUse = React.useMemo(\n    () => matchedExtensions.filter((e) => isExtensionInUse(e, gatingFlags)),\n    [matchedExtensions, gatingFlags],\n  );\n\n  return extensionsInUse;\n};\n\ntype UseExtensions = <E extends Extension>(typeGuard: ExtensionTypeGuard<E>) => E[];\n"]}]}