{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/async.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/async.tsx","mtime":1615298458750},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { LoadingBox } from './status-box';\n/**\n * FIXME: Comparing two functions is not the *best* solution, but we can handle false negatives.\n */\nconst sameLoader = (a) => (b) => (a || 'a').toString() === (b || 'b').toString();\nvar AsyncComponentError;\n(function (AsyncComponentError) {\n    AsyncComponentError[\"ComponentNotFound\"] = \"COMPONENT_NOT_FOUND\";\n})(AsyncComponentError || (AsyncComponentError = {}));\nexport class AsyncComponent extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = { Component: null, loader: null };\n        this.retryCount = 0;\n        this.maxRetries = 25;\n    }\n    static getDerivedStateFromProps(props, state) {\n        if (!sameLoader(props.loader)(state.loader)) {\n            return { Component: null, loader: props.loader };\n        }\n        return null;\n    }\n    componentDidUpdate() {\n        if (this.state.Component === null) {\n            this.loadComponent();\n        }\n    }\n    componentDidMount() {\n        if (this.state.Component === null) {\n            this.loadComponent();\n        }\n    }\n    loadComponent() {\n        this.state\n            .loader()\n            .then((Component) => {\n            if (!Component) {\n                return Promise.reject(AsyncComponentError.ComponentNotFound);\n            }\n            this.setState({ Component });\n        })\n            .catch((error) => {\n            if (error === AsyncComponentError.ComponentNotFound) {\n                // eslint-disable-next-line no-console\n                console.error('Component does not exist in module');\n            }\n            else {\n                setTimeout(() => this.loadComponent(), this.retryAfter);\n            }\n        });\n    }\n    get retryAfter() {\n        this.retryCount++;\n        const base = this.retryCount < this.maxRetries ? this.retryCount : this.maxRetries;\n        return 100 * Math.pow(base, 2);\n    }\n    render() {\n        const { Component } = this.state;\n        const { LoadingComponent = LoadingBox } = this.props;\n        const rest = _.omit(this.props, 'loader');\n        return Component != null ? React.createElement(Component, Object.assign({}, rest)) : React.createElement(LoadingComponent, null);\n    }\n}\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/async.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/utils/async.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\n\nimport { LoadingBox } from './status-box';\n\n/**\n * FIXME: Comparing two functions is not the *best* solution, but we can handle false negatives.\n */\nconst sameLoader = (a: () => Promise<React.ComponentType>) => (\n  b: () => Promise<React.ComponentType>,\n) => (a || 'a').toString() === (b || 'b').toString();\n\nenum AsyncComponentError {\n  ComponentNotFound = 'COMPONENT_NOT_FOUND',\n}\n\nexport class AsyncComponent extends React.Component<AsyncComponentProps, AsyncComponentState> {\n  state: AsyncComponentState = { Component: null, loader: null };\n  props: AsyncComponentProps;\n\n  private retryCount: number = 0;\n  private maxRetries: number = 25;\n\n  static getDerivedStateFromProps(props, state) {\n    if (!sameLoader(props.loader)(state.loader)) {\n      return { Component: null, loader: props.loader };\n    }\n    return null;\n  }\n\n  componentDidUpdate() {\n    if (this.state.Component === null) {\n      this.loadComponent();\n    }\n  }\n\n  componentDidMount() {\n    if (this.state.Component === null) {\n      this.loadComponent();\n    }\n  }\n\n  private loadComponent() {\n    this.state\n      .loader()\n      .then((Component) => {\n        if (!Component) {\n          return Promise.reject(AsyncComponentError.ComponentNotFound);\n        }\n        this.setState({ Component });\n      })\n      .catch((error) => {\n        if (error === AsyncComponentError.ComponentNotFound) {\n          // eslint-disable-next-line no-console\n          console.error('Component does not exist in module');\n        } else {\n          setTimeout(() => this.loadComponent(), this.retryAfter);\n        }\n      });\n  }\n\n  private get retryAfter(): number {\n    this.retryCount++;\n    const base = this.retryCount < this.maxRetries ? this.retryCount : this.maxRetries;\n    return 100 * Math.pow(base, 2);\n  }\n\n  render() {\n    const { Component } = this.state;\n    const { LoadingComponent = LoadingBox } = this.props;\n    const rest = _.omit(this.props, 'loader');\n    return Component != null ? <Component {...rest} /> : <LoadingComponent />;\n  }\n}\n\nexport type AsyncComponentProps = {\n  loader: () => Promise<React.ComponentType>;\n  LoadingComponent?: React.ReactNode;\n} & any;\nexport type AsyncComponentState = {\n  Component: React.ComponentType;\n  loader: () => Promise<React.ComponentType>;\n};\n"]}]}