{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/edit-application/EditApplication.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/edit-application/EditApplication.tsx","mtime":1615298458610},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { Formik } from 'formik';\nimport * as _ from 'lodash';\nimport { connect } from 'react-redux';\nimport { getActivePerspective } from '@console/internal/reducers/ui';\nimport { history } from '@console/internal/components/utils';\nimport { normalizeBuilderImages } from '../../utils/imagestream-utils';\nimport { createOrUpdateResources as createOrUpdateGitResources, handleRedirect, } from '../import/import-submit-utils';\nimport { validationSchema as gitValidationSchema } from '../import/import-validation-utils';\nimport { createOrUpdateDeployImageResources } from '../import/deployImage-submit-utils';\nimport { deployValidationSchema } from '../import/deployImage-validation-utils';\nimport EditApplicationForm from './EditApplicationForm';\nimport { getPageHeading, getInitialValues } from './edit-application-utils';\nconst EditApplication = ({ perspective, namespace, appName, resources: appResources, }) => {\n    const imageStreamsData = appResources.imageStreams && appResources.imageStreams.loaded\n        ? appResources.imageStreams.data\n        : [];\n    const builderImages = !_.isEmpty(imageStreamsData)\n        ? normalizeBuilderImages(imageStreamsData)\n        : null;\n    const initialValues = getInitialValues(appResources, appName, namespace);\n    const pageHeading = getPageHeading(_.get(initialValues, 'build.strategy', ''));\n    const updateResources = (values) => {\n        if (values.build.strategy) {\n            const imageStream = values.image.selected && builderImages ? builderImages[values.image.selected].obj : null;\n            return createOrUpdateGitResources(values, imageStream, false, false, 'update', appResources);\n        }\n        return createOrUpdateDeployImageResources(values, false, 'update', appResources);\n    };\n    const handleSubmit = (values, actions) => {\n        updateResources(values)\n            .then(() => {\n            actions.setSubmitting(false);\n            actions.setStatus({ submitError: '' });\n            handleRedirect(namespace, perspective);\n        })\n            .catch((err) => {\n            actions.setSubmitting(false);\n            actions.setStatus({ submitError: err.message });\n        });\n    };\n    const renderForm = (props) => {\n        return (React.createElement(EditApplicationForm, Object.assign({}, props, { appResources: appResources, enableReinitialize: \"true\", createFlowType: pageHeading, builderImages: builderImages })));\n    };\n    return (React.createElement(Formik, { initialValues: initialValues, onSubmit: handleSubmit, onReset: history.goBack, validationSchema: _.get(initialValues, 'build.strategy') ? gitValidationSchema : deployValidationSchema, render: renderForm }));\n};\nconst mapStateToProps = (state) => {\n    const perspective = getActivePerspective(state);\n    return {\n        perspective,\n    };\n};\nexport default connect(mapStateToProps)(EditApplication);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/edit-application/EditApplication.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/edit-application/EditApplication.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,MAAM,EAAE,MAAM,QAAQ,CAAC;AAChC,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AACtC,OAAO,EAAE,oBAAoB,EAAE,MAAM,+BAA+B,CAAC;AAErE,OAAO,EAAE,OAAO,EAAE,MAAM,oCAAoC,CAAC;AAC7D,OAAO,EAA2B,sBAAsB,EAAE,MAAM,+BAA+B,CAAC;AAChG,OAAO,EACL,uBAAuB,IAAI,0BAA0B,EACrD,cAAc,GACf,MAAM,+BAA+B,CAAC;AACvC,OAAO,EAAE,gBAAgB,IAAI,mBAAmB,EAAE,MAAM,mCAAmC,CAAC;AAC5F,OAAO,EAAE,kCAAkC,EAAE,MAAM,oCAAoC,CAAC;AACxF,OAAO,EAAE,sBAAsB,EAAE,MAAM,wCAAwC,CAAC;AAChF,OAAO,mBAAmB,MAAM,uBAAuB,CAAC;AAExD,OAAO,EAAE,cAAc,EAAE,gBAAgB,EAAE,MAAM,0BAA0B,CAAC;AAM5E,MAAM,eAAe,GAAgD,CAAC,EACpE,WAAW,EACX,SAAS,EACT,OAAO,EACP,SAAS,EAAE,YAAY,GACxB,EAAE,EAAE;IACH,MAAM,gBAAgB,GACpB,YAAY,CAAC,YAAY,IAAI,YAAY,CAAC,YAAY,CAAC,MAAM;QAC3D,CAAC,CAAC,YAAY,CAAC,YAAY,CAAC,IAAI;QAChC,CAAC,CAAC,EAAE,CAAC;IACT,MAAM,aAAa,GAA4B,CAAC,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC;QACzE,CAAC,CAAC,sBAAsB,CAAC,gBAAgB,CAAC;QAC1C,CAAC,CAAC,IAAI,CAAC;IAET,MAAM,aAAa,GAAG,gBAAgB,CAAC,YAAY,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;IACzE,MAAM,WAAW,GAAG,cAAc,CAAC,CAAC,CAAC,GAAG,CAAC,aAAa,EAAE,gBAAgB,EAAE,EAAE,CAAC,CAAC,CAAC;IAE/E,MAAM,eAAe,GAAG,CAAC,MAAM,EAAE,EAAE;QACjC,IAAI,MAAM,CAAC,KAAK,CAAC,QAAQ,EAAE;YACzB,MAAM,WAAW,GACf,MAAM,CAAC,KAAK,CAAC,QAAQ,IAAI,aAAa,CAAC,CAAC,CAAC,aAAa,CAAC,MAAM,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC;YAC3F,OAAO,0BAA0B,CAAC,MAAM,EAAE,WAAW,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC;SAC9F;QACD,OAAO,kCAAkC,CAAC,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,YAAY,CAAC,CAAC;IACnF,CAAC,CAAC;IAEF,MAAM,YAAY,GAAG,CAAC,MAAM,EAAE,OAAO,EAAE,EAAE;QACvC,eAAe,CAAC,MAAM,CAAC;aACpB,IAAI,CAAC,GAAG,EAAE;YACT,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC7B,OAAO,CAAC,SAAS,CAAC,EAAE,WAAW,EAAE,EAAE,EAAE,CAAC,CAAC;YACvC,cAAc,CAAC,SAAS,EAAE,WAAW,CAAC,CAAC;QACzC,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;YACb,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC7B,OAAO,CAAC,SAAS,CAAC,EAAE,WAAW,EAAE,GAAG,CAAC,OAAO,EAAE,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;IAEF,MAAM,UAAU,GAAG,CAAC,KAAK,EAAE,EAAE;QAC3B,OAAO,CACL,oBAAC,mBAAmB,oBACd,KAAK,IACT,YAAY,EAAE,YAAY,EAC1B,kBAAkB,EAAC,MAAM,EACzB,cAAc,EAAE,WAAW,EAC3B,aAAa,EAAE,aAAa,IAC5B,CACH,CAAC;IACJ,CAAC,CAAC;IAEF,OAAO,CACL,oBAAC,MAAM,IACL,aAAa,EAAE,aAAa,EAC5B,QAAQ,EAAE,YAAY,EACtB,OAAO,EAAE,OAAO,CAAC,MAAM,EACvB,gBAAgB,EACd,CAAC,CAAC,GAAG,CAAC,aAAa,EAAE,gBAAgB,CAAC,CAAC,CAAC,CAAC,mBAAmB,CAAC,CAAC,CAAC,sBAAsB,EAEvF,MAAM,EAAE,UAAU,GAClB,CACH,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,eAAe,GAAG,CAAC,KAAgB,EAAE,EAAE;IAC3C,MAAM,WAAW,GAAG,oBAAoB,CAAC,KAAK,CAAC,CAAC;IAChD,OAAO;QACL,WAAW;KACZ,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,OAAO,CAAC,eAAe,CAAC,CAAC,eAAe,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { Formik } from 'formik';\nimport * as _ from 'lodash';\nimport { connect } from 'react-redux';\nimport { getActivePerspective } from '@console/internal/reducers/ui';\nimport { RootState } from '@console/internal/redux';\nimport { history } from '@console/internal/components/utils';\nimport { NormalizedBuilderImages, normalizeBuilderImages } from '../../utils/imagestream-utils';\nimport {\n  createOrUpdateResources as createOrUpdateGitResources,\n  handleRedirect,\n} from '../import/import-submit-utils';\nimport { validationSchema as gitValidationSchema } from '../import/import-validation-utils';\nimport { createOrUpdateDeployImageResources } from '../import/deployImage-submit-utils';\nimport { deployValidationSchema } from '../import/deployImage-validation-utils';\nimport EditApplicationForm from './EditApplicationForm';\nimport { EditApplicationProps } from './edit-application-types';\nimport { getPageHeading, getInitialValues } from './edit-application-utils';\n\nexport interface StateProps {\n  perspective: string;\n}\n\nconst EditApplication: React.FC<EditApplicationProps & StateProps> = ({\n  perspective,\n  namespace,\n  appName,\n  resources: appResources,\n}) => {\n  const imageStreamsData =\n    appResources.imageStreams && appResources.imageStreams.loaded\n      ? appResources.imageStreams.data\n      : [];\n  const builderImages: NormalizedBuilderImages = !_.isEmpty(imageStreamsData)\n    ? normalizeBuilderImages(imageStreamsData)\n    : null;\n\n  const initialValues = getInitialValues(appResources, appName, namespace);\n  const pageHeading = getPageHeading(_.get(initialValues, 'build.strategy', ''));\n\n  const updateResources = (values) => {\n    if (values.build.strategy) {\n      const imageStream =\n        values.image.selected && builderImages ? builderImages[values.image.selected].obj : null;\n      return createOrUpdateGitResources(values, imageStream, false, false, 'update', appResources);\n    }\n    return createOrUpdateDeployImageResources(values, false, 'update', appResources);\n  };\n\n  const handleSubmit = (values, actions) => {\n    updateResources(values)\n      .then(() => {\n        actions.setSubmitting(false);\n        actions.setStatus({ submitError: '' });\n        handleRedirect(namespace, perspective);\n      })\n      .catch((err) => {\n        actions.setSubmitting(false);\n        actions.setStatus({ submitError: err.message });\n      });\n  };\n\n  const renderForm = (props) => {\n    return (\n      <EditApplicationForm\n        {...props}\n        appResources={appResources}\n        enableReinitialize=\"true\"\n        createFlowType={pageHeading}\n        builderImages={builderImages}\n      />\n    );\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      onReset={history.goBack}\n      validationSchema={\n        _.get(initialValues, 'build.strategy') ? gitValidationSchema : deployValidationSchema\n      }\n      render={renderForm}\n    />\n  );\n};\n\nconst mapStateToProps = (state: RootState) => {\n  const perspective = getActivePerspective(state);\n  return {\n    perspective,\n  };\n};\n\nexport default connect(mapStateToProps)(EditApplication);\n"]}]}