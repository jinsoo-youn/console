{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/selectors/machine.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/selectors/machine.ts","mtime":1616735742380},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { getName } from './common';\nexport const getMachineRole = (obj) => { var _a, _b; return (_b = (_a = obj === null || obj === void 0 ? void 0 : obj.metadata) === null || _a === void 0 ? void 0 : _a.labels) === null || _b === void 0 ? void 0 : _b['machine.openshift.io/cluster-api-machine-role']; };\nexport const getMachineInstanceType = (obj) => { var _a, _b; return (_b = (_a = obj === null || obj === void 0 ? void 0 : obj.metadata) === null || _a === void 0 ? void 0 : _a.labels) === null || _b === void 0 ? void 0 : _b['machine.openshift.io/instance-type']; };\nexport const getMachineRegion = (obj) => { var _a, _b; return (_b = (_a = obj === null || obj === void 0 ? void 0 : obj.metadata) === null || _a === void 0 ? void 0 : _a.labels) === null || _b === void 0 ? void 0 : _b['machine.openshift.io/region']; };\nexport const getMachineZone = (obj) => { var _a, _b; return (_b = (_a = obj === null || obj === void 0 ? void 0 : obj.metadata) === null || _a === void 0 ? void 0 : _a.labels) === null || _b === void 0 ? void 0 : _b['machine.openshift.io/zone']; };\n// Machine sets don't have the region and zone labels. Use `providerSpec` if set.\nexport const getMachineAWSPlacement = (machineSet) => { var _a, _b, _c, _d, _e; return ((_e = (_d = (_c = (_b = (_a = machineSet === null || machineSet === void 0 ? void 0 : machineSet.spec) === null || _a === void 0 ? void 0 : _a.template) === null || _b === void 0 ? void 0 : _b.spec) === null || _c === void 0 ? void 0 : _c.providerSpec) === null || _d === void 0 ? void 0 : _d.value) === null || _e === void 0 ? void 0 : _e.placement) || {}; };\nexport const getMachineNodeName = (obj) => { var _a, _b; return (_b = (_a = obj === null || obj === void 0 ? void 0 : obj.status) === null || _a === void 0 ? void 0 : _a.nodeRef) === null || _b === void 0 ? void 0 : _b.name; };\nexport const getMachineNode = (machine, nodes = []) => nodes.find((node) => getMachineNodeName(machine) === getName(node));\nexport const getMachineAddresses = (machine) => { var _a; return (_a = machine === null || machine === void 0 ? void 0 : machine.status) === null || _a === void 0 ? void 0 : _a.addresses; };\nexport const getMachinePhase = (obj) => {\n    var _a;\n    const phase = (_a = obj === null || obj === void 0 ? void 0 : obj.status) === null || _a === void 0 ? void 0 : _a.phase;\n    return phase === 'Running' ? 'Provisioned as node' : phase;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/selectors/machine.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/selectors/machine.ts"],"names":[],"mappings":"AAOA,OAAO,EAAE,OAAO,EAAE,MAAM,UAAU,CAAC;AAEnC,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,GAAyD,EAAU,EAAE,kCAClG,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,QAAQ,0CAAE,MAAM,0CAAG,+CAA+C,IAAC,CAAC;AAE3E,MAAM,CAAC,MAAM,sBAAsB,GAAG,CAAC,GAAgB,EAAU,EAAE,kCACjE,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,QAAQ,0CAAE,MAAM,0CAAG,oCAAoC,IAAC,CAAC;AAEhE,MAAM,CAAC,MAAM,gBAAgB,GAAG,CAAC,GAAgB,EAAU,EAAE,kCAC3D,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,QAAQ,0CAAE,MAAM,0CAAG,6BAA6B,IAAC,CAAC;AAEzD,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,GAAgB,EAAU,EAAE,kCACzD,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,QAAQ,0CAAE,MAAM,0CAAG,2BAA2B,IAAC,CAAC;AAEvD,iFAAiF;AACjF,MAAM,CAAC,MAAM,sBAAsB,GAAG,CACpC,UAAkD,EAC7B,EAAE,2BAAC,OAAA,+BAAA,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,IAAI,0CAAE,QAAQ,0CAAE,IAAI,0CAAE,YAAY,0CAAE,KAAK,0CAAE,SAAS,KAAI,EAAE,CAAA,EAAA,CAAC;AAEjG,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,GAAgB,EAAE,EAAE,kCAAC,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,MAAM,0CAAE,OAAO,0CAAE,IAAI,GAAA,CAAC;AAEnF,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,OAAoB,EAAE,QAAoB,EAAE,EAAY,EAAE,CACvF,KAAK,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,kBAAkB,CAAC,OAAO,CAAC,KAAK,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC;AAEtE,MAAM,CAAC,MAAM,mBAAmB,GAAG,CAAC,OAAoB,EAAE,EAAE,wBAAC,OAAO,aAAP,OAAO,uBAAP,OAAO,CAAE,MAAM,0CAAE,SAAS,GAAA,CAAC;AAExF,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,GAAgB,EAAU,EAAE;;IAC1D,MAAM,KAAK,SAAG,GAAG,aAAH,GAAG,uBAAH,GAAG,CAAE,MAAM,0CAAE,KAAK,CAAC;IACjC,OAAO,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,qBAAqB,CAAC,CAAC,CAAC,KAAK,CAAC;AAC7D,CAAC,CAAC","sourcesContent":["import {\n  MachineAWSPlacement,\n  MachineKind,\n  MachineSetKind,\n  MachineDeploymentKind,\n  NodeKind,\n} from '@console/internal/module/k8s';\nimport { getName } from './common';\n\nexport const getMachineRole = (obj: MachineKind | MachineSetKind | MachineDeploymentKind): string =>\n  obj?.metadata?.labels?.['machine.openshift.io/cluster-api-machine-role'];\n\nexport const getMachineInstanceType = (obj: MachineKind): string =>\n  obj?.metadata?.labels?.['machine.openshift.io/instance-type'];\n\nexport const getMachineRegion = (obj: MachineKind): string =>\n  obj?.metadata?.labels?.['machine.openshift.io/region'];\n\nexport const getMachineZone = (obj: MachineKind): string =>\n  obj?.metadata?.labels?.['machine.openshift.io/zone'];\n\n// Machine sets don't have the region and zone labels. Use `providerSpec` if set.\nexport const getMachineAWSPlacement = (\n  machineSet: MachineSetKind | MachineDeploymentKind,\n): MachineAWSPlacement => machineSet?.spec?.template?.spec?.providerSpec?.value?.placement || {};\n\nexport const getMachineNodeName = (obj: MachineKind) => obj?.status?.nodeRef?.name;\n\nexport const getMachineNode = (machine: MachineKind, nodes: NodeKind[] = []): NodeKind =>\n  nodes.find((node) => getMachineNodeName(machine) === getName(node));\n\nexport const getMachineAddresses = (machine: MachineKind) => machine?.status?.addresses;\n\nexport const getMachinePhase = (obj: MachineKind): string => {\n  const phase = obj?.status?.phase;\n  return phase === 'Running' ? 'Provisioned as node' : phase;\n};\n"]}]}