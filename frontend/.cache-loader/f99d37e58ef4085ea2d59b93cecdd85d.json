{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/url.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/url.ts","mtime":1616735742430},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { k8sBasePath } from '@console/internal/module/k8s';\nimport { VMWizardMode, VMWizardName, VMWizardView } from '../constants/vm';\nconst ELLIPSIS = '…';\nconst ellipsizeLeft = (word) => `${ELLIPSIS}${word}`;\nexport const getConsoleAPIBase = () => {\n    // avoid the extra slash when compose the URL by VncConsole\n    return k8sBasePath.startsWith('/') ? k8sBasePath.substring(1) : k8sBasePath;\n};\nexport const isConnectionEncrypted = () => window.location.protocol === 'https:';\nexport const parseURL = (url) => {\n    try {\n        return new URL(url);\n    }\n    catch (e) {\n        return null;\n    }\n};\nexport const resolveOrigin = ({ hostname, origin, port }, maxHostnameParts) => {\n    const hostnameParts = hostname.split('.');\n    if (hostnameParts.length <= maxHostnameParts) {\n        return origin;\n    }\n    const resolvedHostname = hostnameParts.slice(hostnameParts.length - maxHostnameParts).join('.');\n    const resolvedPort = port ? `:${port}` : '';\n    return `${ellipsizeLeft(resolvedHostname)}${resolvedPort}`;\n};\nexport const resolvePathname = ({ pathname }, maxPathnameParts) => {\n    const pathnameParts = pathname.split('/').filter((part) => part);\n    if (pathnameParts.length <= maxPathnameParts) {\n        return pathname;\n    }\n    const resolvedPathname = pathnameParts.slice(pathnameParts.length - maxPathnameParts).join('/');\n    return `/${ellipsizeLeft(`/${resolvedPathname}`)}`;\n};\nexport const resolveURL = ({ urlObj, maxHostnameParts, maxPathnameParts }) => urlObj.origin === 'null'\n    ? urlObj.href\n    : `${resolveOrigin(urlObj, maxHostnameParts)}${resolvePathname(urlObj, maxPathnameParts)}`;\nexport const getVMWizardCreateLink = ({ namespace, wizardName, mode, view, template, }) => {\n    const type = wizardName === VMWizardName.YAML ? '~new' : '~new-wizard';\n    const params = new URLSearchParams();\n    if (mode && mode !== VMWizardMode.VM) {\n        params.append('mode', mode);\n    }\n    if (template) {\n        params.append('template', template);\n    }\n    if (mode === VMWizardMode.IMPORT && view === VMWizardView.ADVANCED) {\n        // only valid combination in the wizard for now\n        params.append('view', view);\n    }\n    const paramsString = params.toString() ? `?${params}` : '';\n    return `/k8s/ns/${namespace || 'default'}/virtualization/${type}${paramsString}`;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/url.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/url.ts"],"names":[],"mappings":"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","sourcesContent":["import { k8sBasePath } from '@console/internal/module/k8s';\nimport { VMWizardMode, VMWizardName, VMWizardView } from '../constants/vm';\n\nconst ELLIPSIS = '…';\n\nconst ellipsizeLeft = (word) => `${ELLIPSIS}${word}`;\n\nexport const getConsoleAPIBase = () => {\n  // avoid the extra slash when compose the URL by VncConsole\n  return k8sBasePath.startsWith('/') ? k8sBasePath.substring(1) : k8sBasePath;\n};\n\nexport const isConnectionEncrypted = () => window.location.protocol === 'https:';\n\nexport const parseURL = (url: string) => {\n  try {\n    return new URL(url);\n  } catch (e) {\n    return null;\n  }\n};\n\nexport const resolveOrigin = ({ hostname, origin, port }, maxHostnameParts) => {\n  const hostnameParts = hostname.split('.');\n  if (hostnameParts.length <= maxHostnameParts) {\n    return origin;\n  }\n\n  const resolvedHostname = hostnameParts.slice(hostnameParts.length - maxHostnameParts).join('.');\n  const resolvedPort = port ? `:${port}` : '';\n\n  return `${ellipsizeLeft(resolvedHostname)}${resolvedPort}`;\n};\n\nexport const resolvePathname = ({ pathname }, maxPathnameParts) => {\n  const pathnameParts = pathname.split('/').filter((part) => part);\n  if (pathnameParts.length <= maxPathnameParts) {\n    return pathname;\n  }\n\n  const resolvedPathname = pathnameParts.slice(pathnameParts.length - maxPathnameParts).join('/');\n  return `/${ellipsizeLeft(`/${resolvedPathname}`)}`;\n};\n\nexport const resolveURL = ({ urlObj, maxHostnameParts, maxPathnameParts }) =>\n  urlObj.origin === 'null'\n    ? urlObj.href\n    : `${resolveOrigin(urlObj, maxHostnameParts)}${resolvePathname(urlObj, maxPathnameParts)}`;\n\nexport const getVMWizardCreateLink = ({\n  namespace,\n  wizardName,\n  mode,\n  view,\n  template,\n}: {\n  namespace: string;\n  wizardName: VMWizardName;\n  mode: VMWizardMode;\n  view?: VMWizardView;\n  template?: string;\n}) => {\n  const type = wizardName === VMWizardName.YAML ? '~new' : '~new-wizard';\n\n  const params = new URLSearchParams();\n\n  if (mode && mode !== VMWizardMode.VM) {\n    params.append('mode', mode);\n  }\n\n  if (template) {\n    params.append('template', template);\n  }\n\n  if (mode === VMWizardMode.IMPORT && view === VMWizardView.ADVANCED) {\n    // only valid combination in the wizard for now\n    params.append('view', view);\n  }\n\n  const paramsString = params.toString() ? `?${params}` : '';\n\n  return `/k8s/ns/${namespace || 'default'}/virtualization/${type}${paramsString}`;\n};\n"]}]}