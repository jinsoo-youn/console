{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/probe.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/probe.ts","mtime":1615298458760},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nconst HookAction = Object.freeze({\n    exec: {\n        id: 'exec',\n        label: 'Exec Command',\n    },\n    httpGet: {\n        id: 'httpGet',\n        label: 'HTTP Get',\n    },\n    tcpSocket: {\n        id: 'tcpSocket',\n        label: 'TCP Socket (Port)',\n    },\n});\nconst parsers = {\n    exec: function (str) {\n        return {\n            command: str.split(' '),\n        };\n    },\n    httpGet: function (str) {\n        if (!str) {\n            return null;\n        }\n        // XXX: Kubernetes allows for named ports, but the URL spec says ports must be digits.\n        let scheme, port, host, hostname, rest;\n        [scheme, ...rest] = str.split('://');\n        if (!scheme) {\n            return null;\n        }\n        str = rest.join();\n        [host, ...rest] = str.split('/');\n        const path = `/${rest.join()}`;\n        [hostname, port] = host.split(':');\n        if (_.isUndefined(port)) {\n            if (scheme === 'http') {\n                port = '80';\n            }\n            else if (scheme === 'https') {\n                port = '443';\n            }\n        }\n        if (_.isUndefined(port)) {\n            return null;\n        }\n        return {\n            host: [scheme, '://', hostname].join(''),\n            path,\n            port: parseInt(port, 10) || port,\n        };\n    },\n    tcpSocket: function (str) {\n        if (str == null || str === '') {\n            return null;\n        }\n        return {\n            // as per http://kubernetes.io/docs/api-reference/v1/definitions/#_v1_tcpsocketaction\n            // port can be either number or IANA name\n            port: /^\\d+$/.test(str) ? +str : str,\n        };\n    },\n};\nconst flatteners = {\n    exec: function (cmd) {\n        if (_.isEmpty(cmd) || _.isEmpty(cmd.command)) {\n            return '';\n        }\n        return cmd.command.join(' ');\n    },\n    httpGet: function (cmd, podIP) {\n        let c = '';\n        if (_.isEmpty(cmd)) {\n            return c;\n        }\n        c += cmd.host || podIP;\n        if (cmd.port) {\n            c += `:${cmd.port}`;\n        }\n        if (cmd.path) {\n            if (cmd.path.startsWith('/')) {\n                c += cmd.path;\n            }\n            else {\n                c += `/${cmd.path}`;\n            }\n        }\n        return c;\n    },\n    tcpSocket: function (cmd) {\n        if (!cmd || !cmd.port) {\n            return '';\n        }\n        return `${cmd.port}`;\n    },\n};\nfunction inferAction(obj) {\n    if (_.isEmpty(obj)) {\n        return;\n    }\n    const keys = _.keys(obj);\n    if (_.isEmpty(keys)) {\n        return;\n    }\n    return HookAction[keys[0]];\n}\nexport function flattenCmd(type, cmd, podIP) {\n    return flatteners[type](cmd, podIP);\n}\nexport function parseCmd(type, cmd) {\n    return parsers[type](cmd);\n}\nfunction getActionLabel(action) {\n    if (action) {\n        return action.label;\n    }\n    return '';\n}\nexport function getActionLabelFromObject(obj) {\n    const a = inferAction(obj);\n    return getActionLabel(a);\n}\nexport const getLifecycleHookLabel = function (lifecycle, stage) {\n    if (!lifecycle || !stage || !lifecycle[stage]) {\n        return '';\n    }\n    return getActionLabelFromObject(lifecycle[stage]);\n};\n// Maps an api config object to a simple flattened type and command field.\nexport const mapLifecycleConfigToFields = function (lifecycle) {\n    const f = {\n        postStart: {\n            type: 'exec',\n            cmd: '',\n        },\n        preStop: {\n            type: 'exec',\n            cmd: '',\n        },\n    };\n    if (!lifecycle) {\n        return f;\n    }\n    if (!_.isEmpty(lifecycle.postStart)) {\n        const k = _.keys(lifecycle.postStart);\n        f.postStart.type = k[0];\n        f.postStart.cmd = flattenCmd(k[0], lifecycle.postStart[k[0]]);\n    }\n    if (!_.isEmpty(lifecycle.preStop)) {\n        const k = _.keys(lifecycle.preStop);\n        f.preStop.type = k[0];\n        f.preStop.cmd = flattenCmd(k[0], lifecycle.preStop[k[0]]);\n    }\n    return f;\n};\nexport const mapProbeToFields = function (probe, podIP) {\n    const f = {\n        type: 'exec',\n        cmd: '',\n    };\n    if (_.isEmpty(probe)) {\n        return f;\n    }\n    const k = _.keys(probe);\n    if (!_.isEmpty(k)) {\n        f.type = k[0];\n        f.cmd = flattenCmd(k[0], probe[k[0]], podIP);\n    }\n    return f;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/probe.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/module/k8s/probe.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\n\nimport {\n  ContainerLifecycle,\n  ContainerLifecycleStage,\n  ContainerProbe,\n  ExecProbe,\n  Handler,\n  HTTPGetProbe,\n  TCPSocketProbe,\n} from './';\n\nconst HookAction = Object.freeze({\n  exec: {\n    id: 'exec',\n    label: 'Exec Command',\n  },\n  httpGet: {\n    id: 'httpGet',\n    label: 'HTTP Get',\n  },\n  tcpSocket: {\n    id: 'tcpSocket',\n    label: 'TCP Socket (Port)',\n  },\n});\n\nconst parsers = {\n  exec: function(str: string) {\n    return {\n      command: str.split(' '),\n    };\n  },\n\n  httpGet: function(str: string) {\n    if (!str) {\n      return null;\n    }\n    // XXX: Kubernetes allows for named ports, but the URL spec says ports must be digits.\n    let scheme: string, port: string, host: string, hostname: string, rest: string[];\n    [scheme, ...rest] = str.split('://');\n    if (!scheme) {\n      return null;\n    }\n    str = rest.join();\n    [host, ...rest] = str.split('/');\n    const path = `/${rest.join()}`;\n    [hostname, port] = host.split(':');\n    if (_.isUndefined(port)) {\n      if (scheme === 'http') {\n        port = '80';\n      } else if (scheme === 'https') {\n        port = '443';\n      }\n    }\n    if (_.isUndefined(port)) {\n      return null;\n    }\n    return {\n      host: [scheme, '://', hostname].join(''),\n      path,\n      port: parseInt(port, 10) || port,\n    };\n  },\n\n  tcpSocket: function(str: string) {\n    if (str == null || str === '') {\n      return null;\n    }\n\n    return {\n      // as per http://kubernetes.io/docs/api-reference/v1/definitions/#_v1_tcpsocketaction\n      // port can be either number or IANA name\n      port: /^\\d+$/.test(str) ? +str : str,\n    };\n  },\n};\n\nconst flatteners = {\n  exec: function(cmd: ExecProbe): string {\n    if (_.isEmpty(cmd) || _.isEmpty(cmd.command)) {\n      return '';\n    }\n    return cmd.command.join(' ');\n  },\n\n  httpGet: function(cmd: HTTPGetProbe, podIP: string): string {\n    let c = '';\n    if (_.isEmpty(cmd)) {\n      return c;\n    }\n\n    c += cmd.host || podIP;\n    if (cmd.port) {\n      c += `:${cmd.port}`;\n    }\n\n    if (cmd.path) {\n      if (cmd.path.startsWith('/')) {\n        c += cmd.path;\n      } else {\n        c += `/${cmd.path}`;\n      }\n    }\n    return c;\n  },\n\n  tcpSocket: function(cmd: TCPSocketProbe): string {\n    if (!cmd || !cmd.port) {\n      return '';\n    }\n    return `${cmd.port}`;\n  },\n};\n\nfunction inferAction(obj: Handler) {\n  if (_.isEmpty(obj)) {\n    return;\n  }\n  const keys = _.keys(obj);\n  if (_.isEmpty(keys)) {\n    return;\n  }\n  return HookAction[keys[0]];\n}\n\nexport function flattenCmd(type: string, cmd: any, podIP?: string) {\n  return flatteners[type](cmd, podIP);\n}\n\nexport function parseCmd(type: string, cmd: any) {\n  return parsers[type](cmd);\n}\n\nfunction getActionLabel(action): string {\n  if (action) {\n    return action.label;\n  }\n  return '';\n}\n\nexport function getActionLabelFromObject(obj: Handler): string {\n  const a = inferAction(obj);\n  return getActionLabel(a);\n}\n\nexport const getLifecycleHookLabel = function(\n  lifecycle: ContainerLifecycle,\n  stage: ContainerLifecycleStage,\n) {\n  if (!lifecycle || !stage || !lifecycle[stage]) {\n    return '';\n  }\n  return getActionLabelFromObject(lifecycle[stage]);\n};\n\n// Maps an api config object to a simple flattened type and command field.\nexport const mapLifecycleConfigToFields = function(lifecycle: ContainerLifecycle) {\n  const f = {\n    postStart: {\n      type: 'exec',\n      cmd: '',\n    },\n    preStop: {\n      type: 'exec',\n      cmd: '',\n    },\n  };\n\n  if (!lifecycle) {\n    return f;\n  }\n\n  if (!_.isEmpty(lifecycle.postStart)) {\n    const k = _.keys(lifecycle.postStart);\n    f.postStart.type = k[0];\n    f.postStart.cmd = flattenCmd(k[0], lifecycle.postStart[k[0]]);\n  }\n\n  if (!_.isEmpty(lifecycle.preStop)) {\n    const k = _.keys(lifecycle.preStop);\n    f.preStop.type = k[0];\n    f.preStop.cmd = flattenCmd(k[0], lifecycle.preStop[k[0]]);\n  }\n\n  return f;\n};\n\nexport const mapProbeToFields = function(probe: ContainerProbe, podIP: string) {\n  const f = {\n    type: 'exec',\n    cmd: '',\n  };\n\n  if (_.isEmpty(probe)) {\n    return f;\n  }\n\n  const k = _.keys(probe);\n  if (!_.isEmpty(k)) {\n    f.type = k[0];\n    f.cmd = flattenCmd(k[0], probe[k[0]], podIP);\n  }\n\n  return f;\n};\n"]}]}