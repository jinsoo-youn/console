{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/catalog/catalog-item-details.jsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/catalog/catalog-item-details.jsx","mtime":1615298458720},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as PropTypes from 'prop-types';\nimport { PropertiesSidePanel, PropertyItem } from '@patternfly/react-catalog-view-extension';\nimport { ClusterServicePlanModel } from '../../models';\nimport { k8sGet } from '../../module/k8s';\nimport { Timestamp, ExternalLink, SectionHeading, LoadingBox } from '../utils';\nimport { SyncMarkdownView } from '../markdown-view';\nexport class CatalogTileDetails extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            plans: [],\n            markdown: '',\n            markdownLoading: false,\n        };\n    }\n    componentDidMount() {\n        const { obj, kind, markdownDescription } = this.props.item;\n        if (kind === 'ClusterServiceClass') {\n            this.getPlans(obj);\n        }\n        if (_.isFunction(markdownDescription)) {\n            this.setState({ markdownLoading: true });\n            markdownDescription()\n                .then((md) => this.setState({ markdown: md, markdownLoading: false }))\n                .catch(() => this.setState({ markdownLoading: false }));\n        }\n        else {\n            this.setState({ markdown: markdownDescription });\n        }\n    }\n    getPlans(obj) {\n        k8sGet(ClusterServicePlanModel, null, null, {\n            queryParams: { fieldSelector: `spec.clusterServiceClassRef.name=${obj.metadata.name}` },\n        }).then(({ items: plans }) => {\n            this.setState({\n                plans: _.orderBy(plans, ['spec.externalMetadata.displayName', 'metadata.name']),\n            });\n        });\n    }\n    render() {\n        const { obj, kind, tileProvider, tileDescription, supportUrl, longDescription, documentationUrl, sampleRepo, customProperties, } = this.props.item;\n        const { plans, markdown, markdownLoading } = this.state;\n        const creationTimestamp = _.get(obj, 'metadata.creationTimestamp');\n        const supportUrlLink = React.createElement(ExternalLink, { href: supportUrl, text: \"Get support\" });\n        const documentationUrlLink = (React.createElement(ExternalLink, { href: documentationUrl, additionalClassName: \"co-break-all\", text: documentationUrl }));\n        const sampleRepoLink = (React.createElement(ExternalLink, { href: sampleRepo, additionalClassName: \"co-break-all\", text: sampleRepo }));\n        const planItems = _.map(plans, (plan) => (React.createElement(\"li\", { key: plan.metadata.uid }, plan.spec.description || plan.spec.externalName)));\n        return (React.createElement(\"div\", { className: \"modal-body modal-body-border\" },\n            React.createElement(\"div\", { className: \"modal-body-content\" },\n                React.createElement(\"div\", { className: \"modal-body-inner-shadow-covers\" },\n                    React.createElement(\"div\", { className: \"co-catalog-page__overlay-body\" },\n                        React.createElement(PropertiesSidePanel, null,\n                            customProperties,\n                            tileProvider && React.createElement(PropertyItem, { label: \"Provider\", value: tileProvider }),\n                            supportUrl && React.createElement(PropertyItem, { label: \"Support\", value: supportUrlLink }),\n                            creationTimestamp && (React.createElement(PropertyItem, { label: \"Created At\", value: React.createElement(Timestamp, { timestamp: creationTimestamp }) }))),\n                        React.createElement(\"div\", { className: \"co-catalog-page__overlay-description\" },\n                            React.createElement(SectionHeading, { text: \"Description\" }),\n                            tileDescription && React.createElement(\"p\", null, tileDescription),\n                            markdownLoading && React.createElement(LoadingBox, { message: \"Loading Markdown...\" }),\n                            markdown && React.createElement(SyncMarkdownView, { content: markdown }),\n                            longDescription && React.createElement(\"p\", null, longDescription),\n                            sampleRepo && React.createElement(\"p\", null,\n                                \"Sample repository: \",\n                                sampleRepoLink),\n                            documentationUrl && (React.createElement(React.Fragment, null,\n                                React.createElement(\"h2\", { className: \"h5\" }, \"Documentation\"),\n                                React.createElement(\"p\", null, documentationUrlLink))),\n                            !_.isEmpty(plans) && (React.createElement(React.Fragment, null,\n                                React.createElement(\"h2\", { className: \"h5\" }, \"Service Plans\"),\n                                React.createElement(\"ul\", null, planItems))),\n                            kind === 'ImageStream' && (React.createElement(React.Fragment, null,\n                                React.createElement(\"hr\", null),\n                                React.createElement(\"p\", null, \"The following resources will be created:\"),\n                                React.createElement(\"ul\", null,\n                                    React.createElement(\"li\", null,\n                                        \"A \",\n                                        React.createElement(\"span\", { className: \"co-catalog-item-details__kind-label\" }, \"build config\"),\n                                        ' ',\n                                        \"to build source from a Git repository.\"),\n                                    React.createElement(\"li\", null,\n                                        \"An \",\n                                        React.createElement(\"span\", { className: \"co-catalog-item-details__kind-label\" }, \"image stream\"),\n                                        ' ',\n                                        \"to track built images.\"),\n                                    React.createElement(\"li\", null,\n                                        \"A\",\n                                        ' ',\n                                        React.createElement(\"span\", { className: \"co-catalog-item-details__kind-label\" }, \"deployment config\"),\n                                        ' ',\n                                        \"to rollout new revisions when the image changes.\"),\n                                    React.createElement(\"li\", null,\n                                        \"A \",\n                                        React.createElement(\"span\", { className: \"co-catalog-item-details__kind-label\" }, \"service\"),\n                                        \" to expose your workload inside the cluster.\"),\n                                    React.createElement(\"li\", null,\n                                        \"An optional\",\n                                        ' ',\n                                        React.createElement(\"span\", { className: \"co-catalog-item-details__kind-label\" }, \"route\"),\n                                        \" to expose your workload outside the cluster.\"))))))))));\n    }\n}\nCatalogTileDetails.displayName = 'CatalogTileDetails';\nCatalogTileDetails.propTypes = {\n    items: PropTypes.array,\n    overlayClose: PropTypes.func,\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/catalog/catalog-item-details.jsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/catalog/catalog-item-details.jsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as PropTypes from 'prop-types';\nimport { PropertiesSidePanel, PropertyItem } from '@patternfly/react-catalog-view-extension';\n\nimport { ClusterServicePlanModel } from '../../models';\nimport { k8sGet } from '../../module/k8s';\nimport { Timestamp, ExternalLink, SectionHeading, LoadingBox } from '../utils';\nimport { SyncMarkdownView } from '../markdown-view';\n\nexport class CatalogTileDetails extends React.Component {\n  state = {\n    plans: [],\n    markdown: '',\n    markdownLoading: false,\n  };\n\n  componentDidMount() {\n    const { obj, kind, markdownDescription } = this.props.item;\n    if (kind === 'ClusterServiceClass') {\n      this.getPlans(obj);\n    }\n\n    if (_.isFunction(markdownDescription)) {\n      this.setState({ markdownLoading: true });\n      markdownDescription()\n        .then((md) => this.setState({ markdown: md, markdownLoading: false }))\n        .catch(() => this.setState({ markdownLoading: false }));\n    } else {\n      this.setState({ markdown: markdownDescription });\n    }\n  }\n\n  getPlans(obj) {\n    k8sGet(ClusterServicePlanModel, null, null, {\n      queryParams: { fieldSelector: `spec.clusterServiceClassRef.name=${obj.metadata.name}` },\n    }).then(({ items: plans }) => {\n      this.setState({\n        plans: _.orderBy(plans, ['spec.externalMetadata.displayName', 'metadata.name']),\n      });\n    });\n  }\n\n  render() {\n    const {\n      obj,\n      kind,\n      tileProvider,\n      tileDescription,\n      supportUrl,\n      longDescription,\n      documentationUrl,\n      sampleRepo,\n      customProperties,\n    } = this.props.item;\n    const { plans, markdown, markdownLoading } = this.state;\n\n    const creationTimestamp = _.get(obj, 'metadata.creationTimestamp');\n\n    const supportUrlLink = <ExternalLink href={supportUrl} text=\"Get support\" />;\n    const documentationUrlLink = (\n      <ExternalLink\n        href={documentationUrl}\n        additionalClassName=\"co-break-all\"\n        text={documentationUrl}\n      />\n    );\n    const sampleRepoLink = (\n      <ExternalLink href={sampleRepo} additionalClassName=\"co-break-all\" text={sampleRepo} />\n    );\n    const planItems = _.map(plans, (plan) => (\n      <li key={plan.metadata.uid}>{plan.spec.description || plan.spec.externalName}</li>\n    ));\n    return (\n      <div className=\"modal-body modal-body-border\">\n        <div className=\"modal-body-content\">\n          <div className=\"modal-body-inner-shadow-covers\">\n            <div className=\"co-catalog-page__overlay-body\">\n              <PropertiesSidePanel>\n                {customProperties}\n                {tileProvider && <PropertyItem label=\"Provider\" value={tileProvider} />}\n                {supportUrl && <PropertyItem label=\"Support\" value={supportUrlLink} />}\n                {creationTimestamp && (\n                  <PropertyItem\n                    label=\"Created At\"\n                    value={<Timestamp timestamp={creationTimestamp} />}\n                  />\n                )}\n              </PropertiesSidePanel>\n              <div className=\"co-catalog-page__overlay-description\">\n                <SectionHeading text=\"Description\" />\n                {tileDescription && <p>{tileDescription}</p>}\n                {markdownLoading && <LoadingBox message=\"Loading Markdown...\" />}\n                {markdown && <SyncMarkdownView content={markdown} />}\n                {longDescription && <p>{longDescription}</p>}\n                {sampleRepo && <p>Sample repository: {sampleRepoLink}</p>}\n                {documentationUrl && (\n                  <>\n                    <h2 className=\"h5\">Documentation</h2>\n                    <p>{documentationUrlLink}</p>\n                  </>\n                )}\n                {!_.isEmpty(plans) && (\n                  <>\n                    <h2 className=\"h5\">Service Plans</h2>\n                    <ul>{planItems}</ul>\n                  </>\n                )}\n                {kind === 'ImageStream' && (\n                  <>\n                    <hr />\n                    <p>The following resources will be created:</p>\n                    <ul>\n                      <li>\n                        A <span className=\"co-catalog-item-details__kind-label\">build config</span>{' '}\n                        to build source from a Git repository.\n                      </li>\n                      <li>\n                        An <span className=\"co-catalog-item-details__kind-label\">image stream</span>{' '}\n                        to track built images.\n                      </li>\n                      <li>\n                        A{' '}\n                        <span className=\"co-catalog-item-details__kind-label\">\n                          deployment config\n                        </span>{' '}\n                        to rollout new revisions when the image changes.\n                      </li>\n                      <li>\n                        A <span className=\"co-catalog-item-details__kind-label\">service</span> to\n                        expose your workload inside the cluster.\n                      </li>\n                      <li>\n                        An optional{' '}\n                        <span className=\"co-catalog-item-details__kind-label\">route</span> to expose\n                        your workload outside the cluster.\n                      </li>\n                    </ul>\n                  </>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nCatalogTileDetails.displayName = 'CatalogTileDetails';\nCatalogTileDetails.propTypes = {\n  items: PropTypes.array,\n  overlayClose: PropTypes.func,\n};\n"]}]}