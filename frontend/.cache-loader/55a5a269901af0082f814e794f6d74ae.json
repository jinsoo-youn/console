{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/common/SecretsList.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/common/SecretsList.tsx","mtime":1616735742390},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { ResourceLink, Firehose, } from '@console/internal/components/utils';\nimport { SecretModel, ServiceAccountModel } from '@console/internal/models';\nimport { SecretType } from '@console/internal/components/secrets/create-secret';\nimport { SecondaryStatus } from '@console/shared';\nimport { PIPELINE_SERVICE_ACCOUNT } from '../../const';\nimport './SecretsList.scss';\nconst secretTypes = [SecretType.dockerconfigjson, SecretType.basicAuth, SecretType.sshAuth];\nconst Secrets = ({ secrets, serviceaccounts }) => {\n    const serviceAccountSecrets = _.map(serviceaccounts.data.secrets, 'name');\n    const filterData = _.filter(secrets.data, (secret) => _.includes(secretTypes, secret.type) &&\n        _.includes(serviceAccountSecrets, secret.metadata.name));\n    const sortedFilterData = _.sortBy(filterData, (data) => data.metadata.name);\n    return (React.createElement(\"div\", { className: \"odc-secrets-list\" },\n        sortedFilterData.map((secret) => {\n            return (React.createElement(ResourceLink, { key: secret.metadata.uid, kind: SecretModel.kind, name: secret.metadata.name, namespace: secret.metadata.namespace, title: secret.metadata.name, linkTo: false }));\n        }),\n        _.isEmpty(sortedFilterData) && React.createElement(SecondaryStatus, { status: \"No source secrets found\" })));\n};\nconst SecretsList = ({ namespace }) => {\n    const resources = [\n        {\n            isList: true,\n            namespace,\n            kind: SecretModel.kind,\n            prop: SecretModel.plural,\n        },\n        {\n            isList: false,\n            namespace,\n            kind: ServiceAccountModel.kind,\n            prop: ServiceAccountModel.plural,\n            name: PIPELINE_SERVICE_ACCOUNT,\n        },\n    ];\n    return (React.createElement(Firehose, { resources: resources },\n        React.createElement(Secrets, null)));\n};\nexport default SecretsList;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/common/SecretsList.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/common/SecretsList.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,EACL,YAAY,EACZ,QAAQ,GAGT,MAAM,oCAAoC,CAAC;AAC5C,OAAO,EAAE,WAAW,EAAE,mBAAmB,EAAE,MAAM,0BAA0B,CAAC;AAC5E,OAAO,EAAE,UAAU,EAAE,MAAM,oDAAoD,CAAC;AAChF,OAAO,EAAE,eAAe,EAAE,MAAM,iBAAiB,CAAC;AAGlD,OAAO,EAAE,wBAAwB,EAAE,MAAM,aAAa,CAAC;AACvD,OAAO,oBAAoB,CAAC;AAW5B,MAAM,WAAW,GAAG,CAAC,UAAU,CAAC,gBAAgB,EAAE,UAAU,CAAC,SAAS,EAAE,UAAU,CAAC,OAAO,CAAC,CAAC;AAE5F,MAAM,OAAO,GAA2B,CAAC,EAAE,OAAO,EAAE,eAAe,EAAE,EAAE,EAAE;IACvE,MAAM,qBAAqB,GAAG,CAAC,CAAC,GAAG,CAAC,eAAe,CAAC,IAAI,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC;IAC1E,MAAM,UAAU,GAAG,CAAC,CAAC,MAAM,CACzB,OAAO,CAAC,IAAI,EACZ,CAAC,MAAM,EAAE,EAAE,CACT,CAAC,CAAC,QAAQ,CAAC,WAAW,EAAE,MAAM,CAAC,IAAI,CAAC;QACpC,CAAC,CAAC,QAAQ,CAAC,qBAAqB,EAAE,MAAM,CAAC,QAAQ,CAAC,IAAI,CAAC,CAC1D,CAAC;IACF,MAAM,gBAAgB,GAAG,CAAC,CAAC,MAAM,CAAC,UAAU,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAE5E,OAAO,CACL,6BAAK,SAAS,EAAC,kBAAkB;QAC9B,gBAAgB,CAAC,GAAG,CAAC,CAAC,MAAM,EAAE,EAAE;YAC/B,OAAO,CACL,oBAAC,YAAY,IACX,GAAG,EAAE,MAAM,CAAC,QAAQ,CAAC,GAAG,EACxB,IAAI,EAAE,WAAW,CAAC,IAAI,EACtB,IAAI,EAAE,MAAM,CAAC,QAAQ,CAAC,IAAI,EAC1B,SAAS,EAAE,MAAM,CAAC,QAAQ,CAAC,SAAS,EACpC,KAAK,EAAE,MAAM,CAAC,QAAQ,CAAC,IAAI,EAC3B,MAAM,EAAE,KAAK,GACb,CACH,CAAC;QACJ,CAAC,CAAC;QACD,CAAC,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,oBAAC,eAAe,IAAC,MAAM,EAAC,yBAAyB,GAAG,CAChF,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,WAAW,GAA+B,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE;IAChE,MAAM,SAAS,GAAuB;QACpC;YACE,MAAM,EAAE,IAAI;YACZ,SAAS;YACT,IAAI,EAAE,WAAW,CAAC,IAAI;YACtB,IAAI,EAAE,WAAW,CAAC,MAAM;SACzB;QACD;YACE,MAAM,EAAE,KAAK;YACb,SAAS;YACT,IAAI,EAAE,mBAAmB,CAAC,IAAI;YAC9B,IAAI,EAAE,mBAAmB,CAAC,MAAM;YAChC,IAAI,EAAE,wBAAwB;SAC/B;KACF,CAAC;IAEF,OAAO,CACL,oBAAC,QAAQ,IAAC,SAAS,EAAE,SAAS;QAC5B,oBAAC,OAAO,OAAG,CACF,CACZ,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,WAAW,CAAC","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport {\n  ResourceLink,\n  Firehose,\n  FirehoseResult,\n  FirehoseResource,\n} from '@console/internal/components/utils';\nimport { SecretModel, ServiceAccountModel } from '@console/internal/models';\nimport { SecretType } from '@console/internal/components/secrets/create-secret';\nimport { SecondaryStatus } from '@console/shared';\nimport { SecretKind } from '@console/internal/module/k8s';\nimport { ServiceAccountType } from '../../../../utils/pipeline-utils';\nimport { PIPELINE_SERVICE_ACCOUNT } from '../../const';\nimport './SecretsList.scss';\n\ntype SecretsProps = {\n  secrets?: FirehoseResult<SecretKind[]>;\n  serviceaccounts?: FirehoseResult<ServiceAccountType>;\n};\n\ntype SecretsListProps = {\n  namespace: string;\n};\n\nconst secretTypes = [SecretType.dockerconfigjson, SecretType.basicAuth, SecretType.sshAuth];\n\nconst Secrets: React.FC<SecretsProps> = ({ secrets, serviceaccounts }) => {\n  const serviceAccountSecrets = _.map(serviceaccounts.data.secrets, 'name');\n  const filterData = _.filter(\n    secrets.data,\n    (secret) =>\n      _.includes(secretTypes, secret.type) &&\n      _.includes(serviceAccountSecrets, secret.metadata.name),\n  );\n  const sortedFilterData = _.sortBy(filterData, (data) => data.metadata.name);\n\n  return (\n    <div className=\"odc-secrets-list\">\n      {sortedFilterData.map((secret) => {\n        return (\n          <ResourceLink\n            key={secret.metadata.uid}\n            kind={SecretModel.kind}\n            name={secret.metadata.name}\n            namespace={secret.metadata.namespace}\n            title={secret.metadata.name}\n            linkTo={false}\n          />\n        );\n      })}\n      {_.isEmpty(sortedFilterData) && <SecondaryStatus status=\"No source secrets found\" />}\n    </div>\n  );\n};\n\nconst SecretsList: React.FC<SecretsListProps> = ({ namespace }) => {\n  const resources: FirehoseResource[] = [\n    {\n      isList: true,\n      namespace,\n      kind: SecretModel.kind,\n      prop: SecretModel.plural,\n    },\n    {\n      isList: false,\n      namespace,\n      kind: ServiceAccountModel.kind,\n      prop: ServiceAccountModel.plural,\n      name: PIPELINE_SERVICE_ACCOUNT,\n    },\n  ];\n\n  return (\n    <Firehose resources={resources}>\n      <Secrets />\n    </Firehose>\n  );\n};\n\nexport default SecretsList;\n"]}]}