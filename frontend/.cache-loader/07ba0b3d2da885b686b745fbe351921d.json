{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm/combined-disk.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm/combined-disk.ts","mtime":1616735742430},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { apiVersionForModel } from '@console/internal/module/k8s/k8s';\nimport { createBasicLookup, getName, getNamespace, getOwnerReferences } from '@console/shared/src';\nimport { getSimpleName } from '../../../selectors/utils';\nimport { VolumeType, DiskType } from '../../../constants/vm/storage';\nimport { asVM, getDataVolumeTemplates, isWinToolsImage } from '../../../selectors/vm';\nimport { getLoadedData, isLoaded } from '../../../utils';\nimport { StorageUISource } from '../../../components/modals/disk-modal/storage-ui-source';\nimport { DYNAMIC } from '../../../utils/strings';\nimport { DiskWrapper } from './disk-wrapper';\nimport { DataVolumeWrapper } from './data-volume-wrapper';\nimport { VolumeWrapper } from './volume-wrapper';\nimport { PersistentVolumeClaimWrapper } from './persistent-volume-claim-wrapper';\nimport { asVMILikeWrapper } from '../utils/convert';\nimport { DataVolumeModel } from '../../../models';\nimport { compareOwnerReference } from '@console/shared/src/utils/owner-references';\nexport class CombinedDisk {\n    constructor({ id, disk, volume, dataVolume, persistentVolumeClaim, diskWrapper, volumeWrapper, dataVolumeWrapper, persistentVolumeClaimWrapper, isNewPVC, dataVolumesLoading, pvcsLoading, }) {\n        var _a, _b;\n        this.getSource = () => this.source;\n        this.getInitialSource = (isEditing) => {\n            var _a;\n            if (isEditing) {\n                return this.source;\n            }\n            return ((_a = this.diskWrapper) === null || _a === void 0 ? void 0 : _a.getType()) === DiskType.CDROM\n                ? StorageUISource.URL\n                : StorageUISource.BLANK;\n        };\n        this.getSourceValue = () => this.source.getValue();\n        this.isEditingSupported = () => {\n            var _a, _b;\n            switch (this.volumeWrapper.getType()) {\n                case VolumeType.DATA_VOLUME:\n                    // do not edit already created entities\n                    return !(((_a = this.dataVolumeWrapper) === null || _a === void 0 ? void 0 : _a.getCreationTimestamp()) || ((_b = this.persistentVolumeClaimWrapper) === null || _b === void 0 ? void 0 : _b.getCreationTimestamp()));\n                default:\n                    return true;\n            }\n        };\n        this.getName = () => { var _a; return (_a = this.diskWrapper) === null || _a === void 0 ? void 0 : _a.getName(); };\n        this.getType = () => { var _a; return (_a = this.diskWrapper) === null || _a === void 0 ? void 0 : _a.getType(); };\n        this.getTypeValue = () => { var _a; return (_a = this.diskWrapper) === null || _a === void 0 ? void 0 : _a.getTypeValue(); };\n        this.getDiskInterface = () => { var _a; return (_a = this.diskWrapper) === null || _a === void 0 ? void 0 : _a.getReadableDiskBus(); };\n        this.getReadableSize = () => {\n            let result = this.volumeTypeOperation((persistentVolumeClaimWrapper) => persistentVolumeClaimWrapper.getReadabableSize(), (dataVolumeWrapper) => dataVolumeWrapper.getReadabableSize());\n            if (result === null && this.source.hasDynamicSize()) {\n                result = DYNAMIC;\n            }\n            return result;\n        };\n        this.getSize = () => this.volumeTypeOperation((persistentVolumeClaimWrapper) => persistentVolumeClaimWrapper.getSize(), (dataVolumeWrapper) => dataVolumeWrapper.getSize());\n        this.getStorageClassName = () => this.volumeTypeOperation((persistentVolumeClaimWrapper) => persistentVolumeClaimWrapper.getStorageClassName(), (dataVolumeWrapper) => dataVolumeWrapper.getStorageClassName());\n        this.getAccessModes = () => this.volumeTypeOperation((persistentVolumeClaimWrapper) => persistentVolumeClaimWrapper.getAccessModesEnum(), (dataVolumeWrapper) => dataVolumeWrapper.getAccessModesEnum());\n        this.getVolumeMode = () => this.volumeTypeOperation((persistentVolumeClaimWrapper) => persistentVolumeClaimWrapper.getVolumeModeEnum(), (dataVolumeWrapper) => dataVolumeWrapper.getVolumeModeEnum());\n        this.getPVCNameBySource = (source) => {\n            var _a, _b, _c;\n            if (source === StorageUISource.IMPORT_DISK) {\n                return (_a = this.persistentVolumeClaimWrapper) === null || _a === void 0 ? void 0 : _a.getName();\n            }\n            if (source === StorageUISource.ATTACH_DISK) {\n                return (_b = this.volumeWrapper) === null || _b === void 0 ? void 0 : _b.getPersistentVolumeClaimName();\n            }\n            if (source === StorageUISource.ATTACH_CLONED_DISK) {\n                return (_c = this.dataVolumeWrapper) === null || _c === void 0 ? void 0 : _c.getPesistentVolumeClaimName();\n            }\n            return null;\n        };\n        this.getContent = () => {\n            var _a;\n            switch (this.source) {\n                case StorageUISource.CONTAINER: {\n                    return (_a = this.volumeWrapper) === null || _a === void 0 ? void 0 : _a.getContainerImage();\n                }\n                case StorageUISource.URL: {\n                    return this.dataVolumeWrapper.getURL();\n                }\n                case StorageUISource.IMPORT_DISK: {\n                    return this.getPVCNameBySource(this.source);\n                }\n                case StorageUISource.ATTACH_DISK: {\n                    return this.getPVCNameBySource(this.source);\n                }\n                case StorageUISource.ATTACH_CLONED_DISK: {\n                    return this.getPVCNameBySource(this.source);\n                }\n                default:\n                    return null;\n            }\n        };\n        this.getCDROMSourceValue = () => {\n            var _a;\n            return isWinToolsImage((_a = this.volumeWrapper) === null || _a === void 0 ? void 0 : _a.getContainerImage())\n                ? 'Windows Tools'\n                : this.getSourceValue();\n        };\n        this.toString = () => {\n            return _.compact([\n                this.getName(),\n                this.getReadableSize(),\n                this.getDiskInterface(),\n                this.getStorageClassName(),\n                this.getVolumeMode(),\n                (this.getAccessModes() || []).length > 0 ? this.getAccessModes().join(', ') : null,\n            ]).join(' - ');\n        };\n        this.volumeTypeOperation = (onPersistentVolumeClaimWrapper, onDataVolumeWrapper) => {\n            var _a;\n            const volumeType = (_a = this.volumeWrapper) === null || _a === void 0 ? void 0 : _a.getType();\n            if (volumeType === VolumeType.PERSISTENT_VOLUME_CLAIM) {\n                if (this.persistentVolumeClaimWrapper) {\n                    return onPersistentVolumeClaimWrapper(this.persistentVolumeClaimWrapper) || null;\n                }\n                if (this.pvcsLoading) {\n                    return undefined;\n                }\n            }\n            else if (volumeType === VolumeType.DATA_VOLUME) {\n                if (this.dataVolumeWrapper) {\n                    return onDataVolumeWrapper(this.dataVolumeWrapper) || null;\n                }\n                if (this.dataVolumesLoading) {\n                    return undefined;\n                }\n            }\n            return null;\n        };\n        this.id = id;\n        this.diskWrapper = disk ? new DiskWrapper(disk) : diskWrapper;\n        this.volumeWrapper = volume ? new VolumeWrapper(volume) : volumeWrapper;\n        this.dataVolumeWrapper = dataVolume ? new DataVolumeWrapper(dataVolume) : dataVolumeWrapper;\n        this.persistentVolumeClaimWrapper = persistentVolumeClaim\n            ? new PersistentVolumeClaimWrapper(persistentVolumeClaim)\n            : persistentVolumeClaimWrapper;\n        this.dataVolumesLoading = dataVolumesLoading;\n        this.pvcsLoading = pvcsLoading;\n        this.source = StorageUISource.fromTypes((_a = this.volumeWrapper) === null || _a === void 0 ? void 0 : _a.getType(), (_b = this.dataVolumeWrapper) === null || _b === void 0 ? void 0 : _b.getType(), !!this.persistentVolumeClaimWrapper && isNewPVC);\n    }\n}\nexport class CombinedDiskFactory {\n    constructor({ disks, volumes, dataVolumes, dataVolumeTemplates, dataVolumesLoading, pvcs, pvcsLoading, namespace, }) {\n        this.getCombinedDisks = () => {\n            const volumeLookup = createBasicLookup(this.volumes, getSimpleName);\n            const datavolumeTemplateLookup = createBasicLookup(this.dataVolumeTemplates, getName);\n            const datavolumeLookup = createBasicLookup(this.dataVolumes, getName);\n            const pvcLookup = createBasicLookup(this.pvcs, getName);\n            return this.disks.map((disk) => {\n                const diskWrapper = new DiskWrapper(disk);\n                const volume = volumeLookup[diskWrapper.getName()];\n                const volumeWrapper = new VolumeWrapper(volume);\n                let dataVolumeName;\n                let dataVolume;\n                let dataVolumeTemplate;\n                let pvc;\n                switch (volumeWrapper.getType()) {\n                    case VolumeType.DATA_VOLUME:\n                        dataVolumeName = volumeWrapper.getDataVolumeName();\n                        dataVolumeTemplate = datavolumeTemplateLookup[dataVolumeName];\n                        dataVolume = datavolumeLookup[dataVolumeName];\n                        if (!dataVolume) {\n                            dataVolume = dataVolumeTemplate;\n                        }\n                        if (dataVolume && this.pvcs) {\n                            pvc = this.pvcs.find((p) => (getOwnerReferences(p) || []).some((ownerReference) => compareOwnerReference(ownerReference, {\n                                name: dataVolumeName,\n                                kind: DataVolumeModel.kind,\n                                apiVersion: apiVersionForModel(DataVolumeModel),\n                            })));\n                        }\n                        break;\n                    case VolumeType.PERSISTENT_VOLUME_CLAIM:\n                        pvc = pvcLookup[volumeWrapper.getPersistentVolumeClaimName()];\n                        break;\n                    default:\n                        break;\n                }\n                return new CombinedDisk({\n                    diskWrapper,\n                    volumeWrapper,\n                    dataVolumeWrapper: dataVolume && new DataVolumeWrapper(dataVolume),\n                    persistentVolumeClaimWrapper: pvc && new PersistentVolumeClaimWrapper(pvc),\n                    dataVolumesLoading: this.dataVolumesLoading,\n                    pvcsLoading: this.pvcsLoading,\n                });\n            });\n        };\n        this.getUsedDiskNames = (excludeName) => new Set(this.disks.map(getSimpleName).filter((n) => n && n !== excludeName));\n        this.getUsedDataVolumeNames = (excludeName) => new Set([...this.dataVolumeTemplates, ...this.dataVolumes]\n            .map((dv) => getName(dv))\n            .filter((n) => n && n !== excludeName));\n        this.disks = disks;\n        this.volumes = volumes;\n        this.dataVolumeTemplates = dataVolumeTemplates;\n        this.dataVolumes =\n            dataVolumes &&\n                dataVolumes.filter((dataVolume) => {\n                    const ns = getNamespace(dataVolume);\n                    return !ns || ns === namespace;\n                });\n        this.pvcs =\n            pvcs &&\n                pvcs.filter((pvc) => {\n                    const ns = getNamespace(pvc);\n                    return !ns || ns === namespace;\n                });\n        this.dataVolumesLoading = dataVolumesLoading;\n        this.pvcsLoading = pvcsLoading;\n    }\n}\nCombinedDiskFactory.initializeFromVMLikeEntity = (vmLikeEntity, datavolumes, pvcs) => {\n    const vmiLikeWrapper = asVMILikeWrapper(vmLikeEntity);\n    return new CombinedDiskFactory({\n        disks: (vmiLikeWrapper === null || vmiLikeWrapper === void 0 ? void 0 : vmiLikeWrapper.getDisks()) || [],\n        volumes: (vmiLikeWrapper === null || vmiLikeWrapper === void 0 ? void 0 : vmiLikeWrapper.getVolumes()) || [],\n        dataVolumeTemplates: getDataVolumeTemplates(asVM(vmLikeEntity)),\n        dataVolumes: getLoadedData(datavolumes, []),\n        pvcs: getLoadedData(pvcs),\n        dataVolumesLoading: !isLoaded(datavolumes),\n        pvcsLoading: !isLoaded(pvcs),\n        namespace: getNamespace(vmLikeEntity),\n    });\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm/combined-disk.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm/combined-disk.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { K8sResourceKind } from '@console/internal/module/k8s/types';\nimport { apiVersionForModel } from '@console/internal/module/k8s/k8s';\nimport { createBasicLookup, getName, getNamespace, getOwnerReferences } from '@console/shared/src';\nimport { FirehoseResult } from '@console/internal/components/utils';\nimport { V1Disk } from '../../../types/vm/disk/V1Disk';\nimport { V1Volume } from '../../../types/vm/disk/V1Volume';\nimport { V1alpha1DataVolume } from '../../../types/vm/disk/V1alpha1DataVolume';\nimport { getSimpleName } from '../../../selectors/utils';\nimport { VolumeType, DiskType, AccessMode, VolumeMode } from '../../../constants/vm/storage';\nimport { VMGenericLikeEntityKind } from '../../../types/vmLike';\nimport { asVM, getDataVolumeTemplates, isWinToolsImage } from '../../../selectors/vm';\nimport { getLoadedData, isLoaded } from '../../../utils';\nimport { StorageUISource } from '../../../components/modals/disk-modal/storage-ui-source';\nimport { DYNAMIC } from '../../../utils/strings';\nimport { DiskWrapper } from './disk-wrapper';\nimport { DataVolumeWrapper } from './data-volume-wrapper';\nimport { VolumeWrapper } from './volume-wrapper';\nimport { PersistentVolumeClaimWrapper } from './persistent-volume-claim-wrapper';\nimport { asVMILikeWrapper } from '../utils/convert';\nimport { V1PersistentVolumeClaim } from '../../../types/vm/disk/V1PersistentVolumeClaim';\nimport { DataVolumeModel } from '../../../models';\nimport { compareOwnerReference } from '@console/shared/src/utils/owner-references';\n\nexport class CombinedDisk {\n  private readonly dataVolumesLoading: boolean;\n\n  private readonly pvcsLoading: boolean;\n\n  private readonly source: StorageUISource;\n\n  readonly id: string;\n\n  readonly diskWrapper: DiskWrapper;\n\n  readonly volumeWrapper: VolumeWrapper;\n\n  readonly dataVolumeWrapper?: DataVolumeWrapper;\n\n  readonly persistentVolumeClaimWrapper?: PersistentVolumeClaimWrapper;\n\n  constructor({\n    id,\n    disk,\n    volume,\n    dataVolume,\n    persistentVolumeClaim,\n    diskWrapper,\n    volumeWrapper,\n    dataVolumeWrapper,\n    persistentVolumeClaimWrapper,\n    isNewPVC,\n    dataVolumesLoading,\n    pvcsLoading,\n  }: {\n    id?: string;\n    disk?: V1Disk;\n    volume?: V1Volume;\n    dataVolume?: V1alpha1DataVolume;\n    persistentVolumeClaim?: V1PersistentVolumeClaim;\n    diskWrapper?: DiskWrapper;\n    volumeWrapper?: VolumeWrapper;\n    dataVolumeWrapper?: DataVolumeWrapper;\n    persistentVolumeClaimWrapper?: PersistentVolumeClaimWrapper;\n    dataVolumesLoading?: boolean;\n    pvcsLoading?: boolean;\n    isNewPVC?: boolean;\n  }) {\n    this.id = id;\n    this.diskWrapper = disk ? new DiskWrapper(disk) : diskWrapper;\n    this.volumeWrapper = volume ? new VolumeWrapper(volume) : volumeWrapper;\n    this.dataVolumeWrapper = dataVolume ? new DataVolumeWrapper(dataVolume) : dataVolumeWrapper;\n    this.persistentVolumeClaimWrapper = persistentVolumeClaim\n      ? new PersistentVolumeClaimWrapper(persistentVolumeClaim)\n      : persistentVolumeClaimWrapper;\n    this.dataVolumesLoading = dataVolumesLoading;\n    this.pvcsLoading = pvcsLoading;\n\n    this.source = StorageUISource.fromTypes(\n      this.volumeWrapper?.getType(),\n      this.dataVolumeWrapper?.getType(),\n      !!this.persistentVolumeClaimWrapper && isNewPVC,\n    );\n  }\n\n  getSource = () => this.source;\n\n  getInitialSource = (isEditing) => {\n    if (isEditing) {\n      return this.source;\n    }\n    return this.diskWrapper?.getType() === DiskType.CDROM\n      ? StorageUISource.URL\n      : StorageUISource.BLANK;\n  };\n\n  getSourceValue = () => this.source.getValue();\n\n  isEditingSupported = () => {\n    switch (this.volumeWrapper.getType()) {\n      case VolumeType.DATA_VOLUME:\n        // do not edit already created entities\n        return !(\n          this.dataVolumeWrapper?.getCreationTimestamp() ||\n          this.persistentVolumeClaimWrapper?.getCreationTimestamp()\n        );\n      default:\n        return true;\n    }\n  };\n\n  getName = () => this.diskWrapper?.getName();\n\n  getType = () => this.diskWrapper?.getType();\n\n  getTypeValue = () => this.diskWrapper?.getTypeValue();\n\n  getDiskInterface = () => this.diskWrapper?.getReadableDiskBus();\n\n  getReadableSize = (): string => {\n    let result = this.volumeTypeOperation(\n      (persistentVolumeClaimWrapper) => persistentVolumeClaimWrapper.getReadabableSize(),\n      (dataVolumeWrapper) => dataVolumeWrapper.getReadabableSize(),\n    );\n\n    if (result === null && this.source.hasDynamicSize()) {\n      result = DYNAMIC;\n    }\n\n    return result;\n  };\n\n  getSize = (): { value: number; unit: string } =>\n    this.volumeTypeOperation(\n      (persistentVolumeClaimWrapper) => persistentVolumeClaimWrapper.getSize(),\n      (dataVolumeWrapper) => dataVolumeWrapper.getSize(),\n    );\n\n  getStorageClassName = () =>\n    this.volumeTypeOperation(\n      (persistentVolumeClaimWrapper) => persistentVolumeClaimWrapper.getStorageClassName(),\n      (dataVolumeWrapper) => dataVolumeWrapper.getStorageClassName(),\n    );\n\n  getAccessModes = (): AccessMode[] =>\n    this.volumeTypeOperation(\n      (persistentVolumeClaimWrapper) => persistentVolumeClaimWrapper.getAccessModesEnum(),\n      (dataVolumeWrapper) => dataVolumeWrapper.getAccessModesEnum(),\n    );\n\n  getVolumeMode = (): VolumeMode =>\n    this.volumeTypeOperation(\n      (persistentVolumeClaimWrapper) => persistentVolumeClaimWrapper.getVolumeModeEnum(),\n      (dataVolumeWrapper) => dataVolumeWrapper.getVolumeModeEnum(),\n    );\n\n  getPVCNameBySource = (source?: StorageUISource) => {\n    if (source === StorageUISource.IMPORT_DISK) {\n      return this.persistentVolumeClaimWrapper?.getName();\n    }\n    if (source === StorageUISource.ATTACH_DISK) {\n      return this.volumeWrapper?.getPersistentVolumeClaimName();\n    }\n    if (source === StorageUISource.ATTACH_CLONED_DISK) {\n      return this.dataVolumeWrapper?.getPesistentVolumeClaimName();\n    }\n\n    return null;\n  };\n\n  getContent = () => {\n    switch (this.source) {\n      case StorageUISource.CONTAINER: {\n        return this.volumeWrapper?.getContainerImage();\n      }\n      case StorageUISource.URL: {\n        return this.dataVolumeWrapper.getURL();\n      }\n      case StorageUISource.IMPORT_DISK: {\n        return this.getPVCNameBySource(this.source);\n      }\n      case StorageUISource.ATTACH_DISK: {\n        return this.getPVCNameBySource(this.source);\n      }\n      case StorageUISource.ATTACH_CLONED_DISK: {\n        return this.getPVCNameBySource(this.source);\n      }\n      default:\n        return null;\n    }\n  };\n\n  getCDROMSourceValue = () =>\n    isWinToolsImage(this.volumeWrapper?.getContainerImage())\n      ? 'Windows Tools'\n      : this.getSourceValue();\n\n  toString = () => {\n    return _.compact([\n      this.getName(),\n      this.getReadableSize(),\n      this.getDiskInterface(),\n      this.getStorageClassName(),\n      this.getVolumeMode(),\n      (this.getAccessModes() || []).length > 0 ? this.getAccessModes().join(', ') : null,\n    ]).join(' - ');\n  };\n\n  private volumeTypeOperation = (\n    onPersistentVolumeClaimWrapper: (\n      persistentVolumeClaimWrapper: PersistentVolumeClaimWrapper,\n    ) => any,\n    onDataVolumeWrapper: (dataVolumeWrapper: DataVolumeWrapper) => any,\n  ) => {\n    const volumeType = this.volumeWrapper?.getType();\n    if (volumeType === VolumeType.PERSISTENT_VOLUME_CLAIM) {\n      if (this.persistentVolumeClaimWrapper) {\n        return onPersistentVolumeClaimWrapper(this.persistentVolumeClaimWrapper) || null;\n      }\n      if (this.pvcsLoading) {\n        return undefined;\n      }\n    } else if (volumeType === VolumeType.DATA_VOLUME) {\n      if (this.dataVolumeWrapper) {\n        return onDataVolumeWrapper(this.dataVolumeWrapper) || null;\n      }\n      if (this.dataVolumesLoading) {\n        return undefined;\n      }\n    }\n    return null;\n  };\n}\n\nexport class CombinedDiskFactory {\n  private readonly disks: V1Disk[];\n\n  private readonly volumes: V1Volume[];\n\n  private readonly dataVolumeTemplates: V1alpha1DataVolume[];\n\n  private readonly dataVolumes: V1alpha1DataVolume[];\n\n  private readonly pvcs: K8sResourceKind[];\n\n  private readonly dataVolumesLoading: boolean;\n\n  private readonly pvcsLoading: boolean;\n\n  static initializeFromVMLikeEntity = (\n    vmLikeEntity: VMGenericLikeEntityKind,\n    datavolumes?: FirehoseResult<V1alpha1DataVolume[]>,\n    pvcs?: FirehoseResult,\n  ) => {\n    const vmiLikeWrapper = asVMILikeWrapper(vmLikeEntity);\n\n    return new CombinedDiskFactory({\n      disks: vmiLikeWrapper?.getDisks() || [],\n      volumes: vmiLikeWrapper?.getVolumes() || [],\n      dataVolumeTemplates: getDataVolumeTemplates(asVM(vmLikeEntity)),\n      dataVolumes: getLoadedData(datavolumes, []),\n      pvcs: getLoadedData(pvcs),\n      dataVolumesLoading: !isLoaded(datavolumes),\n      pvcsLoading: !isLoaded(pvcs),\n      namespace: getNamespace(vmLikeEntity),\n    });\n  };\n\n  constructor({\n    disks,\n    volumes,\n    dataVolumes,\n    dataVolumeTemplates,\n    dataVolumesLoading,\n    pvcs,\n    pvcsLoading,\n    namespace,\n  }: {\n    disks: V1Disk[];\n    volumes: V1Volume[];\n    dataVolumeTemplates?: V1alpha1DataVolume[];\n    dataVolumes?: V1alpha1DataVolume[];\n    dataVolumesLoading?: boolean;\n    pvcs?: K8sResourceKind[];\n    pvcsLoading?: boolean;\n    namespace: string;\n  }) {\n    this.disks = disks;\n    this.volumes = volumes;\n    this.dataVolumeTemplates = dataVolumeTemplates;\n    this.dataVolumes =\n      dataVolumes &&\n      dataVolumes.filter((dataVolume) => {\n        const ns = getNamespace(dataVolume);\n        return !ns || ns === namespace;\n      });\n    this.pvcs =\n      pvcs &&\n      pvcs.filter((pvc) => {\n        const ns = getNamespace(pvc);\n        return !ns || ns === namespace;\n      });\n    this.dataVolumesLoading = dataVolumesLoading;\n    this.pvcsLoading = pvcsLoading;\n  }\n\n  getCombinedDisks = (): CombinedDisk[] => {\n    const volumeLookup = createBasicLookup(this.volumes, getSimpleName);\n    const datavolumeTemplateLookup = createBasicLookup(this.dataVolumeTemplates, getName);\n    const datavolumeLookup = createBasicLookup(this.dataVolumes, getName);\n    const pvcLookup = createBasicLookup(this.pvcs, getName);\n\n    return this.disks.map((disk) => {\n      const diskWrapper = new DiskWrapper(disk);\n      const volume = volumeLookup[diskWrapper.getName()];\n      const volumeWrapper = new VolumeWrapper(volume);\n      let dataVolumeName: string;\n      let dataVolume;\n      let dataVolumeTemplate;\n      let pvc;\n\n      switch (volumeWrapper.getType()) {\n        case VolumeType.DATA_VOLUME:\n          dataVolumeName = volumeWrapper.getDataVolumeName();\n          dataVolumeTemplate = datavolumeTemplateLookup[dataVolumeName];\n          dataVolume = datavolumeLookup[dataVolumeName];\n          if (!dataVolume) {\n            dataVolume = dataVolumeTemplate;\n          }\n\n          if (dataVolume && this.pvcs) {\n            pvc = this.pvcs.find((p) =>\n              (getOwnerReferences(p) || []).some((ownerReference) =>\n                compareOwnerReference(ownerReference, {\n                  name: dataVolumeName,\n                  kind: DataVolumeModel.kind,\n                  apiVersion: apiVersionForModel(DataVolumeModel),\n                } as any),\n              ),\n            );\n          }\n          break;\n        case VolumeType.PERSISTENT_VOLUME_CLAIM:\n          pvc = pvcLookup[volumeWrapper.getPersistentVolumeClaimName()];\n          break;\n        default:\n          break;\n      }\n\n      return new CombinedDisk({\n        diskWrapper,\n        volumeWrapper,\n        dataVolumeWrapper: dataVolume && new DataVolumeWrapper(dataVolume),\n        persistentVolumeClaimWrapper: pvc && new PersistentVolumeClaimWrapper(pvc),\n        dataVolumesLoading: this.dataVolumesLoading,\n        pvcsLoading: this.pvcsLoading,\n      });\n    });\n  };\n\n  getUsedDiskNames = (excludeName: string): Set<string> =>\n    new Set(this.disks.map(getSimpleName).filter((n) => n && n !== excludeName));\n\n  getUsedDataVolumeNames = (excludeName: string): Set<string> =>\n    new Set(\n      [...this.dataVolumeTemplates, ...this.dataVolumes]\n        .map((dv) => getName(dv))\n        .filter((n) => n && n !== excludeName),\n    );\n}\n"]}]}