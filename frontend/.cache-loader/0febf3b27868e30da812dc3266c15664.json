{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/nodes/node-dashboard/queries.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/nodes/node-dashboard/queries.ts","mtime":1616735742370},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nexport var NodeQueries;\n(function (NodeQueries) {\n    NodeQueries[\"CPU_USAGE\"] = \"CPU_USAGE\";\n    NodeQueries[\"CPU_TOTAL\"] = \"CPU_TOTAL\";\n    NodeQueries[\"MEMORY_USAGE\"] = \"MEMORY_USAGE\";\n    NodeQueries[\"MEMORY_TOTAL\"] = \"MEMORY_TOTAL\";\n    NodeQueries[\"POD_COUNT\"] = \"POD_COUNT\";\n    NodeQueries[\"PODS_BY_CPU\"] = \"PODS_BY_CPU\";\n    NodeQueries[\"PODS_BY_MEMORY\"] = \"PODS_BY_MEMORY\";\n    NodeQueries[\"PODS_BY_FILESYSTEM\"] = \"PODS_BY_FILESYSTEM\";\n    NodeQueries[\"PODS_BY_NETWORK_IN\"] = \"PODS_BY_NETWORK_IN\";\n    NodeQueries[\"PODS_BY_NETWORK_OUT\"] = \"PODS_BY_NETWORK_OUT\";\n    NodeQueries[\"PROJECTS_BY_CPU\"] = \"PROJECTS_BY_CPU\";\n    NodeQueries[\"PROJECTS_BY_MEMORY\"] = \"PROJECTS_BY_MEMORY\";\n    NodeQueries[\"PROJECTS_BY_FILESYSTEM\"] = \"PROJECTS_BY_FILESYSTEM\";\n    NodeQueries[\"PROJECTS_BY_NETWORK_IN\"] = \"PROJECTS_BY_NETWORK_IN\";\n    NodeQueries[\"PROJECTS_BY_NETWORK_OUT\"] = \"PROJECTS_BY_NETWORK_OUT\";\n    NodeQueries[\"FILESYSTEM_USAGE\"] = \"FILESYSTEM_USAGE\";\n    NodeQueries[\"FILESYSTEM_TOTAL\"] = \"FILESYSTEM_TOTAL\";\n    NodeQueries[\"NETWORK_IN_UTILIZATION\"] = \"NETWORK_IN_UTILIZATION\";\n    NodeQueries[\"NETWORK_OUT_UTILIZATION\"] = \"NETWORK_OUT_UTILIZATION\";\n    NodeQueries[\"NETWORK_UTILIZATION\"] = \"NETWORK_UTILIZATION\";\n    NodeQueries[\"POD_RESOURCE_LIMIT_CPU\"] = \"POD_RESOURCE_LIMIT_CPU\";\n    NodeQueries[\"POD_RESOURCE_LIMIT_MEMORY\"] = \"POD_RESOURCE_LIMIT_MEMORY\";\n    NodeQueries[\"POD_RESOURCE_REQUEST_CPU\"] = \"POD_RESOURCE_REQUEST_CPU\";\n    NodeQueries[\"POD_RESOURCE_REQUEST_MEMORY\"] = \"POD_RESOURCE_REQUEST_MEMORY\";\n})(NodeQueries || (NodeQueries = {}));\n// const queries = {\n//   [NodeQueries.CPU_USAGE]: _.template(`instance:node_cpu:rate:sum{instance='<%= node %>'}`),\n//   [NodeQueries.CPU_TOTAL]: _.template(`instance:node_num_cpu:sum{instance='<%= node %>'}`),\n//   [NodeQueries.MEMORY_USAGE]: _.template(`node_memory_MemTotal_bytes{instance='<%= node %>'} - node_memory_MemAvailable_bytes{instance='<%= node %>'}`),\n//   [NodeQueries.MEMORY_TOTAL]: _.template(`node_memory_MemTotal_bytes{instance='<%= node %>'}`),\n//   [NodeQueries.POD_COUNT]: _.template(`kubelet_running_pod_count{instance=~'<%= ipAddress %>:.*'}`),\n//   [NodeQueries.FILESYSTEM_USAGE]: _.template(`instance:node_filesystem_usage:sum{instance='<%= node %>'}`),\n//   [NodeQueries.FILESYSTEM_TOTAL]: _.template(`node_filesystem_size_bytes{instance='<%= node %>'}`),\n//   [NodeQueries.NETWORK_IN_UTILIZATION]: _.template(`instance:node_network_receive_bytes:rate:sum{instance='<%= node %>'}`),\n//   [NodeQueries.NETWORK_OUT_UTILIZATION]: _.template(`instance:node_network_transmit_bytes:rate:sum{instance='<%= node %>'}`),\n// };\nconst queries = {\n    [NodeQueries.CPU_USAGE]: _.template(`instance:node_cpu:rate:sum{instance='<%= ipAddress %>'}`),\n    [NodeQueries.CPU_TOTAL]: _.template(`instance:node_num_cpu:sum{instance='<%= ipAddress %>'}`),\n    [NodeQueries.MEMORY_USAGE]: _.template(`node_memory_MemTotal_bytes{instance='<%= ipAddress %>'} - node_memory_MemAvailable_bytes{instance='<%= ipAddress %>'}`),\n    [NodeQueries.MEMORY_TOTAL]: _.template(`node_memory_MemTotal_bytes{instance='<%= ipAddress %>'}`),\n    [NodeQueries.POD_COUNT]: _.template(`kubelet_running_pods{instance=~'<%= podCountIp %>'}`),\n    [NodeQueries.FILESYSTEM_USAGE]: _.template(`instance:node_filesystem_usage:sum{instance='<%= ipAddress %>'}`),\n    [NodeQueries.FILESYSTEM_TOTAL]: _.template(`node_filesystem_size_bytes{instance='<%= ipAddress %>'}`),\n    [NodeQueries.NETWORK_IN_UTILIZATION]: _.template(`instance:node_network_receive_bytes:rate:sum{instance='<%= ipAddress %>'}`),\n    [NodeQueries.NETWORK_OUT_UTILIZATION]: _.template(`instance:node_network_transmit_bytes:rate:sum{instance='<%= ipAddress %>'}`),\n};\nconst top25Queries = {\n    [NodeQueries.PODS_BY_CPU]: _.template(`topk(25, sort_desc(sum(rate(container_cpu_usage_seconds_total{container=\"\",pod!=\"\", instance=~'<%= ipAddress %>:.*'}[5m])) by (pod, namespace)))`),\n    [NodeQueries.PODS_BY_MEMORY]: _.template(`topk(25, sort_desc(sum(avg_over_time(container_memory_working_set_bytes{container=\"\",pod!=\"\",instance=~'<%= ipAddress %>:.*'}[5m])) BY (pod, namespace)))`),\n    [NodeQueries.PODS_BY_FILESYSTEM]: _.template(`topk(25, sort_desc(sum(container_fs_usage_bytes{instance=~'<%= ipAddress %>:.*'}) BY (pod, namespace)))`),\n    [NodeQueries.PODS_BY_NETWORK_IN]: _.template(`topk(25, sort_desc(sum(rate(container_network_receive_bytes_total{ container=\"POD\", pod!= \"\", instance=~'<%= ipAddress %>:.*'}[5m])) BY (pod, namespace)))`),\n    [NodeQueries.PODS_BY_NETWORK_OUT]: _.template(`topk(25, sort_desc(sum(rate(container_network_transmit_bytes_total{ container=\"POD\", pod!= \"\", instance=~'<%= ipAddress %>:.*'}[5m])) BY (pod, namespace)))`),\n    [NodeQueries.PROJECTS_BY_CPU]: _.template(`topk(25, sort_desc(sum(rate(container_cpu_usage_seconds_total{container=\"\",pod!=\"\", instance=~'<%= ipAddress %>:.*'}[5m])) by (namespace)))`),\n    [NodeQueries.PROJECTS_BY_MEMORY]: _.template(`topk(25, sort_desc(sum(avg_over_time(container_memory_working_set_bytes{container=\"\",pod!=\"\",instance=~'<%= ipAddress %>:.*'}[5m])) BY (namespace)))`),\n    [NodeQueries.PROJECTS_BY_FILESYSTEM]: _.template(`topk(25, sort_desc(sum(container_fs_usage_bytes{instance=~'<%= ipAddress %>:.*'}) BY (namespace)))`),\n    [NodeQueries.PROJECTS_BY_NETWORK_IN]: _.template(`topk(25, sort_desc(sum(rate(container_network_receive_bytes_total{ container=\"POD\", pod!= \"\", instance=~'<%= ipAddress %>:.*'}[5m])) BY (namespace)))`),\n    [NodeQueries.PROJECTS_BY_NETWORK_OUT]: _.template(`topk(25, sort_desc(sum(rate(container_network_transmit_bytes_total{ container=\"POD\", pod!= \"\", instance=~'<%= ipAddress %>:.*'}[5m])) BY (namespace)))`),\n};\nconst resourceQuotaQueries = {\n    [NodeQueries.POD_RESOURCE_LIMIT_CPU]: _.template(`sum(\n      max by (namespace, pod, container) (\n          kube_pod_container_resource_limits_cpu_cores{node='<%= node %>', job=\"kube-state-metrics\"}\n      ) * on(namespace, pod) group_left() max by (namespace, pod) (\n          kube_pod_status_phase{phase=~\"Pending|Running\"} == 1\n      )\n    )`),\n    [NodeQueries.POD_RESOURCE_LIMIT_MEMORY]: _.template(`sum(\n      max by (namespace, pod, container) (\n          kube_pod_container_resource_limits_memory_bytes{node='<%= node %>', job=\"kube-state-metrics\"}\n      ) * on(namespace, pod) group_left() max by (namespace, pod) (\n          kube_pod_status_phase{phase=~\"Pending|Running\"} == 1\n      )\n    )`),\n    [NodeQueries.POD_RESOURCE_REQUEST_CPU]: _.template(`sum(\n      max by (namespace, pod, container) (\n          kube_pod_container_resource_requests_cpu_cores{node='<%= node %>', job=\"kube-state-metrics\"}\n      ) * on(namespace, pod) group_left() max by (namespace, pod) (\n          kube_pod_status_phase{phase=~\"Pending|Running\"} == 1\n      )\n    )`),\n    [NodeQueries.POD_RESOURCE_REQUEST_MEMORY]: _.template(`sum(\n      max by (namespace, pod, container) (\n          kube_pod_container_resource_requests_memory_bytes{node='<%= node %>', job=\"kube-state-metrics\"}\n      ) * on(namespace, pod) group_left() max by (namespace, pod) (\n          kube_pod_status_phase{phase=~\"Pending|Running\"} == 1\n      )\n    )`),\n};\n// export const getMultilineQueries = (node: string): { [key: string]: QueryWithDescription[] } => ({\n//   [NodeQueries.NETWORK_UTILIZATION]: [\n//     {\n//       query: queries[NodeQueries.NETWORK_IN_UTILIZATION]({ node }),\n//       desc: 'In',\n//     },\n//     {\n//       query: queries[NodeQueries.NETWORK_OUT_UTILIZATION]({ node }),\n//       desc: 'Out',\n//     },\n//   ],\n// });\nexport const getMultilineQueries = (node, ipAddress) => {\n    ipAddress = ipAddress + ':9100';\n    return {\n        [NodeQueries.NETWORK_UTILIZATION]: [\n            {\n                query: queries[NodeQueries.NETWORK_IN_UTILIZATION]({ ipAddress }),\n                desc: 'In',\n            },\n            {\n                query: queries[NodeQueries.NETWORK_OUT_UTILIZATION]({ ipAddress }),\n                desc: 'Out',\n            },\n        ],\n    };\n};\nexport const getResourceQutoaQueries = (node) => ({\n    [NodeQueries.POD_RESOURCE_LIMIT_CPU]: resourceQuotaQueries[NodeQueries.POD_RESOURCE_LIMIT_CPU]({\n        node,\n    }),\n    [NodeQueries.POD_RESOURCE_LIMIT_MEMORY]: resourceQuotaQueries[NodeQueries.POD_RESOURCE_LIMIT_MEMORY]({ node }),\n    [NodeQueries.POD_RESOURCE_REQUEST_CPU]: resourceQuotaQueries[NodeQueries.POD_RESOURCE_REQUEST_CPU]({\n        node,\n    }),\n    [NodeQueries.POD_RESOURCE_REQUEST_MEMORY]: resourceQuotaQueries[NodeQueries.POD_RESOURCE_REQUEST_MEMORY]({ node }),\n});\n// export const getUtilizationQueries = (node: string, ipAddress: string) => ({\n//   [NodeQueries.CPU_USAGE]: queries[NodeQueries.CPU_USAGE]({ node }),\n//   [NodeQueries.CPU_TOTAL]: queries[NodeQueries.CPU_TOTAL]({ node }),\n//   [NodeQueries.MEMORY_USAGE]: queries[NodeQueries.MEMORY_USAGE]({ node }),\n//   [NodeQueries.MEMORY_TOTAL]: queries[NodeQueries.MEMORY_TOTAL]({ node }),\n//   [NodeQueries.POD_COUNT]: queries[NodeQueries.POD_COUNT]({ ipAddress }),\n//   [NodeQueries.FILESYSTEM_USAGE]: queries[NodeQueries.FILESYSTEM_USAGE]({\n//     node,\n//   }),\n//   [NodeQueries.FILESYSTEM_TOTAL]: queries[NodeQueries.FILESYSTEM_TOTAL]({\n//     node,\n//   }),\n// });\nexport const getUtilizationQueries = (node, ipAddress) => {\n    let podCountIp = ipAddress + ':10250';\n    ipAddress = ipAddress + ':9100';\n    return {\n        [NodeQueries.CPU_USAGE]: queries[NodeQueries.CPU_USAGE]({ ipAddress }),\n        [NodeQueries.CPU_TOTAL]: queries[NodeQueries.CPU_TOTAL]({ ipAddress }),\n        [NodeQueries.MEMORY_USAGE]: queries[NodeQueries.MEMORY_USAGE]({ ipAddress }),\n        [NodeQueries.MEMORY_TOTAL]: queries[NodeQueries.MEMORY_TOTAL]({ ipAddress }),\n        [NodeQueries.POD_COUNT]: queries[NodeQueries.POD_COUNT]({ podCountIp }),\n        [NodeQueries.FILESYSTEM_USAGE]: queries[NodeQueries.FILESYSTEM_USAGE]({\n            ipAddress,\n        }),\n        [NodeQueries.FILESYSTEM_TOTAL]: queries[NodeQueries.FILESYSTEM_TOTAL]({\n            ipAddress,\n        }),\n    };\n};\nexport const getTopConsumerQueries = (ipAddress) => ({\n    [NodeQueries.PODS_BY_CPU]: top25Queries[NodeQueries.PODS_BY_CPU]({ ipAddress }),\n    [NodeQueries.PODS_BY_MEMORY]: top25Queries[NodeQueries.PODS_BY_MEMORY]({ ipAddress }),\n    [NodeQueries.PODS_BY_FILESYSTEM]: top25Queries[NodeQueries.PODS_BY_FILESYSTEM]({ ipAddress }),\n    [NodeQueries.PODS_BY_NETWORK_IN]: top25Queries[NodeQueries.PODS_BY_NETWORK_IN]({ ipAddress }),\n    [NodeQueries.PODS_BY_NETWORK_OUT]: top25Queries[NodeQueries.PODS_BY_NETWORK_OUT]({\n        ipAddress,\n    }),\n    [NodeQueries.PROJECTS_BY_CPU]: top25Queries[NodeQueries.PROJECTS_BY_CPU]({ ipAddress }),\n    [NodeQueries.PROJECTS_BY_MEMORY]: top25Queries[NodeQueries.PROJECTS_BY_MEMORY]({ ipAddress }),\n    [NodeQueries.PROJECTS_BY_FILESYSTEM]: top25Queries[NodeQueries.PROJECTS_BY_FILESYSTEM]({\n        ipAddress,\n    }),\n    [NodeQueries.PROJECTS_BY_NETWORK_IN]: top25Queries[NodeQueries.PROJECTS_BY_NETWORK_IN]({\n        ipAddress,\n    }),\n    [NodeQueries.PROJECTS_BY_NETWORK_OUT]: top25Queries[NodeQueries.PROJECTS_BY_NETWORK_OUT]({\n        ipAddress,\n    }),\n});\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/nodes/node-dashboard/queries.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/components/nodes/node-dashboard/queries.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { QueryWithDescription } from '@console/shared/src/components/dashboard/utilization-card/UtilizationItem';\n\nexport enum NodeQueries {\n  CPU_USAGE = 'CPU_USAGE',\n  CPU_TOTAL = 'CPU_TOTAL',\n  MEMORY_USAGE = 'MEMORY_USAGE',\n  MEMORY_TOTAL = 'MEMORY_TOTAL',\n  POD_COUNT = 'POD_COUNT',\n  PODS_BY_CPU = 'PODS_BY_CPU',\n  PODS_BY_MEMORY = 'PODS_BY_MEMORY',\n  PODS_BY_FILESYSTEM = 'PODS_BY_FILESYSTEM',\n  PODS_BY_NETWORK_IN = 'PODS_BY_NETWORK_IN',\n  PODS_BY_NETWORK_OUT = 'PODS_BY_NETWORK_OUT',\n  PROJECTS_BY_CPU = 'PROJECTS_BY_CPU',\n  PROJECTS_BY_MEMORY = 'PROJECTS_BY_MEMORY',\n  PROJECTS_BY_FILESYSTEM = 'PROJECTS_BY_FILESYSTEM',\n  PROJECTS_BY_NETWORK_IN = 'PROJECTS_BY_NETWORK_IN',\n  PROJECTS_BY_NETWORK_OUT = 'PROJECTS_BY_NETWORK_OUT',\n  FILESYSTEM_USAGE = 'FILESYSTEM_USAGE',\n  FILESYSTEM_TOTAL = 'FILESYSTEM_TOTAL',\n  NETWORK_IN_UTILIZATION = 'NETWORK_IN_UTILIZATION',\n  NETWORK_OUT_UTILIZATION = 'NETWORK_OUT_UTILIZATION',\n  NETWORK_UTILIZATION = 'NETWORK_UTILIZATION',\n  POD_RESOURCE_LIMIT_CPU = 'POD_RESOURCE_LIMIT_CPU',\n  POD_RESOURCE_LIMIT_MEMORY = 'POD_RESOURCE_LIMIT_MEMORY',\n  POD_RESOURCE_REQUEST_CPU = 'POD_RESOURCE_REQUEST_CPU',\n  POD_RESOURCE_REQUEST_MEMORY = 'POD_RESOURCE_REQUEST_MEMORY',\n}\n\n// const queries = {\n//   [NodeQueries.CPU_USAGE]: _.template(`instance:node_cpu:rate:sum{instance='<%= node %>'}`),\n//   [NodeQueries.CPU_TOTAL]: _.template(`instance:node_num_cpu:sum{instance='<%= node %>'}`),\n//   [NodeQueries.MEMORY_USAGE]: _.template(`node_memory_MemTotal_bytes{instance='<%= node %>'} - node_memory_MemAvailable_bytes{instance='<%= node %>'}`),\n//   [NodeQueries.MEMORY_TOTAL]: _.template(`node_memory_MemTotal_bytes{instance='<%= node %>'}`),\n//   [NodeQueries.POD_COUNT]: _.template(`kubelet_running_pod_count{instance=~'<%= ipAddress %>:.*'}`),\n//   [NodeQueries.FILESYSTEM_USAGE]: _.template(`instance:node_filesystem_usage:sum{instance='<%= node %>'}`),\n//   [NodeQueries.FILESYSTEM_TOTAL]: _.template(`node_filesystem_size_bytes{instance='<%= node %>'}`),\n//   [NodeQueries.NETWORK_IN_UTILIZATION]: _.template(`instance:node_network_receive_bytes:rate:sum{instance='<%= node %>'}`),\n//   [NodeQueries.NETWORK_OUT_UTILIZATION]: _.template(`instance:node_network_transmit_bytes:rate:sum{instance='<%= node %>'}`),\n// };\n\nconst queries = {\n  [NodeQueries.CPU_USAGE]: _.template(`instance:node_cpu:rate:sum{instance='<%= ipAddress %>'}`),\n  [NodeQueries.CPU_TOTAL]: _.template(`instance:node_num_cpu:sum{instance='<%= ipAddress %>'}`),\n  [NodeQueries.MEMORY_USAGE]: _.template(`node_memory_MemTotal_bytes{instance='<%= ipAddress %>'} - node_memory_MemAvailable_bytes{instance='<%= ipAddress %>'}`),\n  [NodeQueries.MEMORY_TOTAL]: _.template(`node_memory_MemTotal_bytes{instance='<%= ipAddress %>'}`),\n  [NodeQueries.POD_COUNT]: _.template(`kubelet_running_pods{instance=~'<%= podCountIp %>'}`),\n  [NodeQueries.FILESYSTEM_USAGE]: _.template(`instance:node_filesystem_usage:sum{instance='<%= ipAddress %>'}`),\n  [NodeQueries.FILESYSTEM_TOTAL]: _.template(`node_filesystem_size_bytes{instance='<%= ipAddress %>'}`),\n  [NodeQueries.NETWORK_IN_UTILIZATION]: _.template(`instance:node_network_receive_bytes:rate:sum{instance='<%= ipAddress %>'}`),\n  [NodeQueries.NETWORK_OUT_UTILIZATION]: _.template(`instance:node_network_transmit_bytes:rate:sum{instance='<%= ipAddress %>'}`),\n};\n\nconst top25Queries = {\n  [NodeQueries.PODS_BY_CPU]: _.template(`topk(25, sort_desc(sum(rate(container_cpu_usage_seconds_total{container=\"\",pod!=\"\", instance=~'<%= ipAddress %>:.*'}[5m])) by (pod, namespace)))`),\n  [NodeQueries.PODS_BY_MEMORY]: _.template(`topk(25, sort_desc(sum(avg_over_time(container_memory_working_set_bytes{container=\"\",pod!=\"\",instance=~'<%= ipAddress %>:.*'}[5m])) BY (pod, namespace)))`),\n  [NodeQueries.PODS_BY_FILESYSTEM]: _.template(`topk(25, sort_desc(sum(container_fs_usage_bytes{instance=~'<%= ipAddress %>:.*'}) BY (pod, namespace)))`),\n  [NodeQueries.PODS_BY_NETWORK_IN]: _.template(`topk(25, sort_desc(sum(rate(container_network_receive_bytes_total{ container=\"POD\", pod!= \"\", instance=~'<%= ipAddress %>:.*'}[5m])) BY (pod, namespace)))`),\n  [NodeQueries.PODS_BY_NETWORK_OUT]: _.template(`topk(25, sort_desc(sum(rate(container_network_transmit_bytes_total{ container=\"POD\", pod!= \"\", instance=~'<%= ipAddress %>:.*'}[5m])) BY (pod, namespace)))`),\n  [NodeQueries.PROJECTS_BY_CPU]: _.template(`topk(25, sort_desc(sum(rate(container_cpu_usage_seconds_total{container=\"\",pod!=\"\", instance=~'<%= ipAddress %>:.*'}[5m])) by (namespace)))`),\n  [NodeQueries.PROJECTS_BY_MEMORY]: _.template(`topk(25, sort_desc(sum(avg_over_time(container_memory_working_set_bytes{container=\"\",pod!=\"\",instance=~'<%= ipAddress %>:.*'}[5m])) BY (namespace)))`),\n  [NodeQueries.PROJECTS_BY_FILESYSTEM]: _.template(`topk(25, sort_desc(sum(container_fs_usage_bytes{instance=~'<%= ipAddress %>:.*'}) BY (namespace)))`),\n  [NodeQueries.PROJECTS_BY_NETWORK_IN]: _.template(`topk(25, sort_desc(sum(rate(container_network_receive_bytes_total{ container=\"POD\", pod!= \"\", instance=~'<%= ipAddress %>:.*'}[5m])) BY (namespace)))`),\n  [NodeQueries.PROJECTS_BY_NETWORK_OUT]: _.template(`topk(25, sort_desc(sum(rate(container_network_transmit_bytes_total{ container=\"POD\", pod!= \"\", instance=~'<%= ipAddress %>:.*'}[5m])) BY (namespace)))`),\n};\n\nconst resourceQuotaQueries = {\n  [NodeQueries.POD_RESOURCE_LIMIT_CPU]: _.template(\n    `sum(\n      max by (namespace, pod, container) (\n          kube_pod_container_resource_limits_cpu_cores{node='<%= node %>', job=\"kube-state-metrics\"}\n      ) * on(namespace, pod) group_left() max by (namespace, pod) (\n          kube_pod_status_phase{phase=~\"Pending|Running\"} == 1\n      )\n    )`,\n  ),\n  [NodeQueries.POD_RESOURCE_LIMIT_MEMORY]: _.template(\n    `sum(\n      max by (namespace, pod, container) (\n          kube_pod_container_resource_limits_memory_bytes{node='<%= node %>', job=\"kube-state-metrics\"}\n      ) * on(namespace, pod) group_left() max by (namespace, pod) (\n          kube_pod_status_phase{phase=~\"Pending|Running\"} == 1\n      )\n    )`,\n  ),\n  [NodeQueries.POD_RESOURCE_REQUEST_CPU]: _.template(\n    `sum(\n      max by (namespace, pod, container) (\n          kube_pod_container_resource_requests_cpu_cores{node='<%= node %>', job=\"kube-state-metrics\"}\n      ) * on(namespace, pod) group_left() max by (namespace, pod) (\n          kube_pod_status_phase{phase=~\"Pending|Running\"} == 1\n      )\n    )`,\n  ),\n  [NodeQueries.POD_RESOURCE_REQUEST_MEMORY]: _.template(\n    `sum(\n      max by (namespace, pod, container) (\n          kube_pod_container_resource_requests_memory_bytes{node='<%= node %>', job=\"kube-state-metrics\"}\n      ) * on(namespace, pod) group_left() max by (namespace, pod) (\n          kube_pod_status_phase{phase=~\"Pending|Running\"} == 1\n      )\n    )`,\n  ),\n};\n\n// export const getMultilineQueries = (node: string): { [key: string]: QueryWithDescription[] } => ({\n//   [NodeQueries.NETWORK_UTILIZATION]: [\n//     {\n//       query: queries[NodeQueries.NETWORK_IN_UTILIZATION]({ node }),\n//       desc: 'In',\n//     },\n//     {\n//       query: queries[NodeQueries.NETWORK_OUT_UTILIZATION]({ node }),\n//       desc: 'Out',\n//     },\n//   ],\n// });\nexport const getMultilineQueries = (node: string, ipAddress: string): { [key: string]: QueryWithDescription[] } => {\n  ipAddress = ipAddress + ':9100';\n  return {\n    [NodeQueries.NETWORK_UTILIZATION]: [\n      {\n        query: queries[NodeQueries.NETWORK_IN_UTILIZATION]({ ipAddress }),\n        desc: 'In',\n      },\n      {\n        query: queries[NodeQueries.NETWORK_OUT_UTILIZATION]({ ipAddress }),\n        desc: 'Out',\n      },\n    ],\n  };\n};\n\nexport const getResourceQutoaQueries = (node: string) => ({\n  [NodeQueries.POD_RESOURCE_LIMIT_CPU]: resourceQuotaQueries[NodeQueries.POD_RESOURCE_LIMIT_CPU]({\n    node,\n  }),\n  [NodeQueries.POD_RESOURCE_LIMIT_MEMORY]: resourceQuotaQueries[NodeQueries.POD_RESOURCE_LIMIT_MEMORY]({ node }),\n  [NodeQueries.POD_RESOURCE_REQUEST_CPU]: resourceQuotaQueries[NodeQueries.POD_RESOURCE_REQUEST_CPU]({\n    node,\n  }),\n  [NodeQueries.POD_RESOURCE_REQUEST_MEMORY]: resourceQuotaQueries[NodeQueries.POD_RESOURCE_REQUEST_MEMORY]({ node }),\n});\n\n// export const getUtilizationQueries = (node: string, ipAddress: string) => ({\n//   [NodeQueries.CPU_USAGE]: queries[NodeQueries.CPU_USAGE]({ node }),\n//   [NodeQueries.CPU_TOTAL]: queries[NodeQueries.CPU_TOTAL]({ node }),\n//   [NodeQueries.MEMORY_USAGE]: queries[NodeQueries.MEMORY_USAGE]({ node }),\n//   [NodeQueries.MEMORY_TOTAL]: queries[NodeQueries.MEMORY_TOTAL]({ node }),\n//   [NodeQueries.POD_COUNT]: queries[NodeQueries.POD_COUNT]({ ipAddress }),\n//   [NodeQueries.FILESYSTEM_USAGE]: queries[NodeQueries.FILESYSTEM_USAGE]({\n//     node,\n//   }),\n//   [NodeQueries.FILESYSTEM_TOTAL]: queries[NodeQueries.FILESYSTEM_TOTAL]({\n//     node,\n//   }),\n// });\nexport const getUtilizationQueries = (node: string, ipAddress: string) => {\n  let podCountIp = ipAddress + ':10250';\n  ipAddress = ipAddress + ':9100';\n  return {\n    [NodeQueries.CPU_USAGE]: queries[NodeQueries.CPU_USAGE]({ ipAddress }),\n    [NodeQueries.CPU_TOTAL]: queries[NodeQueries.CPU_TOTAL]({ ipAddress }),\n    [NodeQueries.MEMORY_USAGE]: queries[NodeQueries.MEMORY_USAGE]({ ipAddress }),\n    [NodeQueries.MEMORY_TOTAL]: queries[NodeQueries.MEMORY_TOTAL]({ ipAddress }),\n    [NodeQueries.POD_COUNT]: queries[NodeQueries.POD_COUNT]({ podCountIp }),\n    [NodeQueries.FILESYSTEM_USAGE]: queries[NodeQueries.FILESYSTEM_USAGE]({\n      ipAddress,\n    }),\n    [NodeQueries.FILESYSTEM_TOTAL]: queries[NodeQueries.FILESYSTEM_TOTAL]({\n      ipAddress,\n    }),\n  };\n};\n\nexport const getTopConsumerQueries = (ipAddress: string) => ({\n  [NodeQueries.PODS_BY_CPU]: top25Queries[NodeQueries.PODS_BY_CPU]({ ipAddress }),\n  [NodeQueries.PODS_BY_MEMORY]: top25Queries[NodeQueries.PODS_BY_MEMORY]({ ipAddress }),\n  [NodeQueries.PODS_BY_FILESYSTEM]: top25Queries[NodeQueries.PODS_BY_FILESYSTEM]({ ipAddress }),\n  [NodeQueries.PODS_BY_NETWORK_IN]: top25Queries[NodeQueries.PODS_BY_NETWORK_IN]({ ipAddress }),\n  [NodeQueries.PODS_BY_NETWORK_OUT]: top25Queries[NodeQueries.PODS_BY_NETWORK_OUT]({\n    ipAddress,\n  }),\n  [NodeQueries.PROJECTS_BY_CPU]: top25Queries[NodeQueries.PROJECTS_BY_CPU]({ ipAddress }),\n  [NodeQueries.PROJECTS_BY_MEMORY]: top25Queries[NodeQueries.PROJECTS_BY_MEMORY]({ ipAddress }),\n  [NodeQueries.PROJECTS_BY_FILESYSTEM]: top25Queries[NodeQueries.PROJECTS_BY_FILESYSTEM]({\n    ipAddress,\n  }),\n  [NodeQueries.PROJECTS_BY_NETWORK_IN]: top25Queries[NodeQueries.PROJECTS_BY_NETWORK_IN]({\n    ipAddress,\n  }),\n  [NodeQueries.PROJECTS_BY_NETWORK_OUT]: top25Queries[NodeQueries.PROJECTS_BY_NETWORK_OUT]({\n    ipAddress,\n  }),\n});\n"]}]}