{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/utils/grammar.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/utils/grammar.ts","mtime":1615298458610},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nexport const joinGrammaticallyListOfItems = (items, separator = 'and') => {\n    const result = items.join(', ');\n    const lastCommaIdx = result.lastIndexOf(',');\n    return items.length > 1 && lastCommaIdx >= 0\n        ? `${result.substr(0, lastCommaIdx)} ${separator}${result.substr(lastCommaIdx + 1)}`\n        : result;\n};\nexport const assureEndsWith = (sentence, appendix) => {\n    if (!sentence || !appendix || sentence.endsWith(appendix)) {\n        return sentence;\n    }\n    return `${sentence}${appendix}`;\n};\nexport const makeSentence = (sentence, capitalize = true) => {\n    const result = capitalize ? _.upperFirst(sentence) : sentence;\n    return assureEndsWith(result, '.');\n};\nexport const addMissingSubject = (sentence, subject) => {\n    const c = sentence ? sentence.charAt(0) : '';\n    if (c.toLowerCase() === c.toUpperCase() || c.toLowerCase() !== c) {\n        // c is an upper case letter\n        return sentence;\n    }\n    return subject ? `${_.upperFirst(subject)} ${sentence}` : sentence;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/utils/grammar.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/utils/grammar.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAE5B,MAAM,CAAC,MAAM,4BAA4B,GAAG,CAAC,KAAe,EAAE,SAAS,GAAG,KAAK,EAAE,EAAE;IACjF,MAAM,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IAChC,MAAM,YAAY,GAAG,MAAM,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC;IAE7C,OAAO,KAAK,CAAC,MAAM,GAAG,CAAC,IAAI,YAAY,IAAI,CAAC;QAC1C,CAAC,CAAC,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,YAAY,CAAC,IAAI,SAAS,GAAG,MAAM,CAAC,MAAM,CAAC,YAAY,GAAG,CAAC,CAAC,EAAE;QACpF,CAAC,CAAC,MAAM,CAAC;AACb,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,QAAgB,EAAE,QAAgB,EAAE,EAAE;IACnE,IAAI,CAAC,QAAQ,IAAI,CAAC,QAAQ,IAAI,QAAQ,CAAC,QAAQ,CAAC,QAAQ,CAAC,EAAE;QACzD,OAAO,QAAQ,CAAC;KACjB;IAED,OAAO,GAAG,QAAQ,GAAG,QAAQ,EAAE,CAAC;AAClC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,QAAgB,EAAE,UAAU,GAAG,IAAI,EAAE,EAAE;IAClE,MAAM,MAAM,GAAG,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC;IAC9D,OAAO,cAAc,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;AACrC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,QAAgB,EAAE,OAAe,EAAE,EAAE;IACrE,MAAM,CAAC,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;IAC7C,IAAI,CAAC,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC,WAAW,EAAE,IAAI,CAAC,CAAC,WAAW,EAAE,KAAK,CAAC,EAAE;QAChE,4BAA4B;QAC5B,OAAO,QAAQ,CAAC;KACjB;IACD,OAAO,OAAO,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,UAAU,CAAC,OAAO,CAAC,IAAI,QAAQ,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC;AACrE,CAAC,CAAC","sourcesContent":["import * as _ from 'lodash';\n\nexport const joinGrammaticallyListOfItems = (items: string[], separator = 'and') => {\n  const result = items.join(', ');\n  const lastCommaIdx = result.lastIndexOf(',');\n\n  return items.length > 1 && lastCommaIdx >= 0\n    ? `${result.substr(0, lastCommaIdx)} ${separator}${result.substr(lastCommaIdx + 1)}`\n    : result;\n};\n\nexport const assureEndsWith = (sentence: string, appendix: string) => {\n  if (!sentence || !appendix || sentence.endsWith(appendix)) {\n    return sentence;\n  }\n\n  return `${sentence}${appendix}`;\n};\n\nexport const makeSentence = (sentence: string, capitalize = true) => {\n  const result = capitalize ? _.upperFirst(sentence) : sentence;\n  return assureEndsWith(result, '.');\n};\n\nexport const addMissingSubject = (sentence: string, subject: string) => {\n  const c = sentence ? sentence.charAt(0) : '';\n  if (c.toLowerCase() === c.toUpperCase() || c.toLowerCase() !== c) {\n    // c is an upper case letter\n    return sentence;\n  }\n  return subject ? `${_.upperFirst(subject)} ${sentence}` : sentence;\n};\n"]}]}