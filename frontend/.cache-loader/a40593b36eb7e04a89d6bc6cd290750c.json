{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/services/ServiceRow.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/services/ServiceRow.tsx","mtime":1616735742410},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as cx from 'classnames';\nimport { TableRow, TableData } from '@console/internal/components/factory';\nimport { Kebab, ResourceLink, ResourceKebab, Timestamp, ExternalLink, kindObj, } from '@console/internal/components/utils';\nimport { referenceForModel, referenceFor } from '@console/internal/module/k8s';\nimport { ServiceModel } from '../../models';\nimport { getConditionString, getCondition } from '../../utils/condition-utils';\nimport { ConditionTypes } from '../../types';\nimport { tableColumnClasses } from './service-table';\nconst serviceReference = referenceForModel(ServiceModel);\nconst ServiceRow = ({ obj, index, key, style }) => {\n    const readyCondition = obj.status\n        ? getCondition(obj.status.conditions, ConditionTypes.Ready)\n        : null;\n    const kind = kindObj(referenceFor(obj));\n    const menuActions = [...Kebab.getExtensionsActionsForKind(kind), ...Kebab.factory.common];\n    return (React.createElement(TableRow, { id: obj.metadata.uid, index: index, trKey: key, style: style },\n        React.createElement(TableData, { className: tableColumnClasses[0] },\n            React.createElement(ResourceLink, { kind: serviceReference, name: obj.metadata.name, namespace: obj.metadata.namespace, title: obj.metadata.uid })),\n        React.createElement(TableData, { className: cx(tableColumnClasses[1], 'co-break-word') },\n            React.createElement(ResourceLink, { kind: \"Namespace\", name: obj.metadata.namespace })),\n        React.createElement(TableData, { className: cx(tableColumnClasses[2], 'co-break-word') }, (obj.status && obj.status.url && (React.createElement(ExternalLink, { href: obj.status.url, text: obj.status.url }))) ||\n            '-'),\n        React.createElement(TableData, { className: tableColumnClasses[3] }, obj.metadata.generation || '-'),\n        React.createElement(TableData, { className: tableColumnClasses[4] },\n            React.createElement(Timestamp, { timestamp: obj.metadata.creationTimestamp })),\n        React.createElement(TableData, { className: tableColumnClasses[5] }, obj.status ? getConditionString(obj.status.conditions) : '-'),\n        React.createElement(TableData, { className: tableColumnClasses[6] }, (readyCondition && readyCondition.status) || '-'),\n        React.createElement(TableData, { className: tableColumnClasses[7] }, (readyCondition && readyCondition.message) || '-'),\n        React.createElement(TableData, { className: tableColumnClasses[8] },\n            React.createElement(ResourceKebab, { actions: menuActions, kind: serviceReference, resource: obj }))));\n};\nexport default ServiceRow;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/services/ServiceRow.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/services/ServiceRow.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,EAAE,MAAM,YAAY,CAAC;AACjC,OAAO,EAAE,QAAQ,EAAE,SAAS,EAAe,MAAM,sCAAsC,CAAC;AACxF,OAAO,EACL,KAAK,EACL,YAAY,EACZ,aAAa,EACb,SAAS,EACT,YAAY,EACZ,OAAO,GACR,MAAM,oCAAoC,CAAC;AAC5C,OAAO,EAAE,iBAAiB,EAAE,YAAY,EAAW,MAAM,8BAA8B,CAAC;AACxF,OAAO,EAAE,YAAY,EAAE,MAAM,cAAc,CAAC;AAC5C,OAAO,EAAE,kBAAkB,EAAE,YAAY,EAAE,MAAM,6BAA6B,CAAC;AAC/E,OAAO,EAAe,cAAc,EAAE,MAAM,aAAa,CAAC;AAC1D,OAAO,EAAE,kBAAkB,EAAE,MAAM,iBAAiB,CAAC;AAErD,MAAM,gBAAgB,GAAG,iBAAiB,CAAC,YAAY,CAAC,CAAC;AAEzD,MAAM,UAAU,GAA6B,CAAC,EAAE,GAAG,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,EAAE,EAAE;IAC1E,MAAM,cAAc,GAAG,GAAG,CAAC,MAAM;QAC/B,CAAC,CAAC,YAAY,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,EAAE,cAAc,CAAC,KAAK,CAAC;QAC3D,CAAC,CAAC,IAAI,CAAC;IACT,MAAM,IAAI,GAAG,OAAO,CAAC,YAAY,CAAC,GAAG,CAAC,CAAY,CAAC;IACnD,MAAM,WAAW,GAAG,CAAC,GAAG,KAAK,CAAC,2BAA2B,CAAC,IAAI,CAAC,EAAE,GAAG,KAAK,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IAE1F,OAAO,CACL,oBAAC,QAAQ,IAAC,EAAE,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,EAAE,KAAK,EAAE,KAAK;QACpE,oBAAC,SAAS,IAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC,CAAC;YACzC,oBAAC,YAAY,IACX,IAAI,EAAE,gBAAgB,EACtB,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,IAAI,EACvB,SAAS,EAAE,GAAG,CAAC,QAAQ,CAAC,SAAS,EACjC,KAAK,EAAE,GAAG,CAAC,QAAQ,CAAC,GAAG,GACvB,CACQ;QACZ,oBAAC,SAAS,IAAC,SAAS,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC;YAC9D,oBAAC,YAAY,IAAC,IAAI,EAAC,WAAW,EAAC,IAAI,EAAE,GAAG,CAAC,QAAQ,CAAC,SAAS,GAAI,CACrD;QACZ,oBAAC,SAAS,IAAC,SAAS,EAAE,EAAE,CAAC,kBAAkB,CAAC,CAAC,CAAC,EAAE,eAAe,CAAC,IAC7D,CAAC,GAAG,CAAC,MAAM,IAAI,GAAG,CAAC,MAAM,CAAC,GAAG,IAAI,CAChC,oBAAC,YAAY,IAAC,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,EAAE,GAAG,CAAC,MAAM,CAAC,GAAG,GAAI,CAC7D,CAAC;YACA,GAAG,CACK;QACZ,oBAAC,SAAS,IAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC,CAAC,IAAG,GAAG,CAAC,QAAQ,CAAC,UAAU,IAAI,GAAG,CAAa;QACzF,oBAAC,SAAS,IAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC,CAAC;YACzC,oBAAC,SAAS,IAAC,SAAS,EAAE,GAAG,CAAC,QAAQ,CAAC,iBAAiB,GAAI,CAC9C;QACZ,oBAAC,SAAS,IAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC,CAAC,IACxC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,kBAAkB,CAAC,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,GAAG,CACnD;QACZ,oBAAC,SAAS,IAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC,CAAC,IACxC,CAAC,cAAc,IAAI,cAAc,CAAC,MAAM,CAAC,IAAI,GAAG,CACvC;QACZ,oBAAC,SAAS,IAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC,CAAC,IACxC,CAAC,cAAc,IAAI,cAAc,CAAC,OAAO,CAAC,IAAI,GAAG,CACxC;QACZ,oBAAC,SAAS,IAAC,SAAS,EAAE,kBAAkB,CAAC,CAAC,CAAC;YACzC,oBAAC,aAAa,IAAC,OAAO,EAAE,WAAW,EAAE,IAAI,EAAE,gBAAgB,EAAE,QAAQ,EAAE,GAAG,GAAI,CACpE,CACH,CACZ,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,UAAU,CAAC","sourcesContent":["import * as React from 'react';\nimport * as cx from 'classnames';\nimport { TableRow, TableData, RowFunction } from '@console/internal/components/factory';\nimport {\n  Kebab,\n  ResourceLink,\n  ResourceKebab,\n  Timestamp,\n  ExternalLink,\n  kindObj,\n} from '@console/internal/components/utils';\nimport { referenceForModel, referenceFor, K8sKind } from '@console/internal/module/k8s';\nimport { ServiceModel } from '../../models';\nimport { getConditionString, getCondition } from '../../utils/condition-utils';\nimport { ServiceKind, ConditionTypes } from '../../types';\nimport { tableColumnClasses } from './service-table';\n\nconst serviceReference = referenceForModel(ServiceModel);\n\nconst ServiceRow: RowFunction<ServiceKind> = ({ obj, index, key, style }) => {\n  const readyCondition = obj.status\n    ? getCondition(obj.status.conditions, ConditionTypes.Ready)\n    : null;\n  const kind = kindObj(referenceFor(obj)) as K8sKind;\n  const menuActions = [...Kebab.getExtensionsActionsForKind(kind), ...Kebab.factory.common];\n\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={serviceReference}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n          title={obj.metadata.uid}\n        />\n      </TableData>\n      <TableData className={cx(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={cx(tableColumnClasses[2], 'co-break-word')}>\n        {(obj.status && obj.status.url && (\n          <ExternalLink href={obj.status.url} text={obj.status.url} />\n        )) ||\n          '-'}\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>{obj.metadata.generation || '-'}</TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <Timestamp timestamp={obj.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        {obj.status ? getConditionString(obj.status.conditions) : '-'}\n      </TableData>\n      <TableData className={tableColumnClasses[6]}>\n        {(readyCondition && readyCondition.status) || '-'}\n      </TableData>\n      <TableData className={tableColumnClasses[7]}>\n        {(readyCondition && readyCondition.message) || '-'}\n      </TableData>\n      <TableData className={tableColumnClasses[8]}>\n        <ResourceKebab actions={menuActions} kind={serviceReference} resource={obj} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport default ServiceRow;\n"]}]}