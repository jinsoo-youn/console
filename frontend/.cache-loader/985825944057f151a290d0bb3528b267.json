{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/vm-status/vm-status.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/vm-status/vm-status.tsx","mtime":1616735742420},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as React from 'react';\nimport { HourglassHalfIcon, InProgressIcon, OffIcon, PausedIcon, SyncAltIcon, UnknownIcon, } from '@patternfly/react-icons';\nimport { getNamespace, getName } from '@console/shared/src';\nimport { RedExclamationCircleIcon } from '@console/shared/src/components/status/icons';\nimport GenericStatus from '@console/shared/src/components/status/GenericStatus';\nimport { Progress, ProgressVariant, ProgressSize, Button, ButtonVariant, } from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\nimport { ResourceLink, resourcePath } from '@console/internal/components/utils';\nimport { PersistentVolumeClaimModel, PodModel } from '@console/internal/models';\nimport { unpauseVMI } from '../../k8s/requests/vmi/actions';\nimport { VM_DETAIL_EVENTS_HREF } from '../../constants';\nimport { getVMLikeModel } from '../../selectors/vm';\nimport { VMStatus as VMStatusEnum } from '../../constants/vm/vm-status';\nimport './vm-status.scss';\nconst VMStatusPopoverContent = ({ message, children, progress, links, }) => (React.createElement(React.Fragment, null,\n    message,\n    children && React.createElement(\"div\", { className: \"kubevirt-vm-status__detail-section\" }, children),\n    progress != null && (React.createElement(\"div\", { className: \"kubevirt-vm-status__detail-section\" },\n        React.createElement(Progress, { value: progress, variant: ProgressVariant.info, size: ProgressSize.sm }))),\n    links &&\n        links.map(({ to, message: linkMessage }) => (React.createElement(\"div\", { className: \"kubevirt-vm-status__detail-section\", key: to },\n            React.createElement(Link, { to: to, title: linkMessage }, linkMessage || to))))));\nconst ImporterPods = ({ statuses }) => (React.createElement(React.Fragment, null, statuses && (React.createElement(\"ul\", null, statuses.map(({ message, status, progress, pod, dataVolume }) => {\n    return (React.createElement(\"li\", { key: getName(pod), className: \"kubevirt-vm-status__detail-section\" },\n        `${status.getLabel()} (${getName(dataVolume)})`,\n        React.createElement(ResourceLink, { className: \"kubevirt-vm-status__detail-small-section\", kind: PodModel.kind, displayName: getName(pod), name: getName(pod), namespace: getNamespace(pod) }),\n        dataVolume && (React.createElement(ResourceLink, { className: \"kubevirt-vm-status__detail-small-section\", kind: PersistentVolumeClaimModel.kind, name: getName(dataVolume), namespace: getNamespace(dataVolume) })),\n        progress != null && (React.createElement(Progress, { className: \"kubevirt-vm-status__detail-small-section\", value: progress, variant: ProgressVariant.info, size: ProgressSize.sm })),\n        message && React.createElement(\"div\", { className: \"kubevirt-vm-status__detail-small-section\" }, message)));\n})))));\nconst VIEW_POD_LOGS = 'View Pod logs';\nconst VIEW_VM_EVENTS = 'View VM events';\nconst getPodLink = (pod) => `${resourcePath(PodModel.kind, getName(pod), getNamespace(pod))}`; // to default tab\nconst getVMILikeLink = (vmLike) => `${resourcePath(getVMLikeModel(vmLike).kind, getName(vmLike), getNamespace(vmLike))}/${VM_DETAIL_EVENTS_HREF}`;\nexport const VMStatus = ({ vm, vmi, vmStatusBundle }) => {\n    const vmiLike = vm || vmi;\n    const { status, pod, progress, importerPodsStatuses } = vmStatusBundle;\n    const title = status.toString(); // TODO status.toVerboseString() should be called to pass to popup header\n    const message = vmStatusBundle.message || vmStatusBundle.detailedMessage;\n    const detailedMessage = vmStatusBundle.message ? vmStatusBundle.detailedMessage : null;\n    const isPaused = status === VMStatusEnum.PAUSED;\n    const links = [];\n    if (vmiLike) {\n        links.push({ to: getVMILikeLink(vmiLike), message: VIEW_VM_EVENTS });\n    }\n    if (pod) {\n        links.push({ to: `${getPodLink(pod)}/logs`, message: VIEW_POD_LOGS });\n    }\n    let icon = UnknownIcon;\n    if (isPaused) {\n        icon = PausedIcon;\n    }\n    else if (status === VMStatusEnum.RUNNING) {\n        icon = SyncAltIcon;\n    }\n    else if (status === VMStatusEnum.OFF) {\n        icon = OffIcon;\n    }\n    else if (status.isError()) {\n        icon = RedExclamationCircleIcon;\n    }\n    else if (status.isPending()) {\n        // should be called before inProgress\n        icon = HourglassHalfIcon;\n    }\n    else if (status.isInProgress()) {\n        icon = InProgressIcon;\n    }\n    return (React.createElement(GenericStatus, { title: title || VMStatusEnum.UNKNOWN.toString(), Icon: icon }, (message || isPaused) && (React.createElement(VMStatusPopoverContent, { key: \"popover\", message: message, links: links, progress: progress },\n        isPaused && (React.createElement(Button, { key: \"unpause\", variant: ButtonVariant.primary, onClick: (event) => __awaiter(void 0, void 0, void 0, function* () {\n                event.preventDefault();\n                yield unpauseVMI(vmi);\n            }), id: \"paused-popover-submit\" }, \"Unpause\")),\n        detailedMessage,\n        React.createElement(ImporterPods, { key: \"importerPods\", statuses: importerPodsStatuses })))));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/vm-status/vm-status.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/vm-status/vm-status.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { PodKind } from '@console/internal/module/k8s';\nimport {\n  HourglassHalfIcon,\n  InProgressIcon,\n  OffIcon,\n  PausedIcon,\n  SyncAltIcon,\n  UnknownIcon,\n} from '@patternfly/react-icons';\nimport { getNamespace, getName } from '@console/shared/src';\nimport { RedExclamationCircleIcon } from '@console/shared/src/components/status/icons';\nimport GenericStatus from '@console/shared/src/components/status/GenericStatus';\nimport {\n  Progress,\n  ProgressVariant,\n  ProgressSize,\n  Button,\n  ButtonVariant,\n} from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\nimport { ResourceLink, resourcePath } from '@console/internal/components/utils';\nimport { PersistentVolumeClaimModel, PodModel } from '@console/internal/models';\nimport { unpauseVMI } from '../../k8s/requests/vmi/actions';\nimport { VM_DETAIL_EVENTS_HREF } from '../../constants';\nimport { VMKind, VMIKind } from '../../types';\nimport { getVMLikeModel } from '../../selectors/vm';\nimport { VMStatus as VMStatusEnum } from '../../constants/vm/vm-status';\nimport { VMILikeEntityKind } from '../../types/vmLike';\nimport { VMStatusBundle } from '../../statuses/vm/types';\n\nimport './vm-status.scss';\n\ntype LinkType = {\n  to: string;\n  message?: string;\n};\n\nconst VMStatusPopoverContent: React.FC<VMStatusPopoverContentProps> = ({\n  message,\n  children,\n  progress,\n  links,\n}) => (\n  <>\n    {message}\n    {children && <div className=\"kubevirt-vm-status__detail-section\">{children}</div>}\n    {progress != null && (\n      <div className=\"kubevirt-vm-status__detail-section\">\n        <Progress value={progress} variant={ProgressVariant.info} size={ProgressSize.sm} />\n      </div>\n    )}\n    {links &&\n      links.map(({ to, message: linkMessage }) => (\n        <div className=\"kubevirt-vm-status__detail-section\" key={to}>\n          <Link to={to} title={linkMessage}>\n            {linkMessage || to}\n          </Link>\n        </div>\n      ))}\n  </>\n);\n\ntype ImporterPodsProps = {\n  statuses: VMStatusBundle['importerPodsStatuses'];\n};\n\nconst ImporterPods: React.FC<ImporterPodsProps> = ({ statuses }) => (\n  <>\n    {statuses && (\n      <ul>\n        {statuses.map(({ message, status, progress, pod, dataVolume }) => {\n          return (\n            <li key={getName(pod)} className=\"kubevirt-vm-status__detail-section\">\n              {`${status.getLabel()} (${getName(dataVolume)})`}\n              <ResourceLink\n                className=\"kubevirt-vm-status__detail-small-section\"\n                kind={PodModel.kind}\n                displayName={getName(pod)}\n                name={getName(pod)}\n                namespace={getNamespace(pod)}\n              />\n              {dataVolume && (\n                <ResourceLink\n                  className=\"kubevirt-vm-status__detail-small-section\"\n                  kind={PersistentVolumeClaimModel.kind}\n                  name={getName(dataVolume)}\n                  namespace={getNamespace(dataVolume)}\n                />\n              )}\n              {progress != null && (\n                <Progress\n                  className=\"kubevirt-vm-status__detail-small-section\"\n                  value={progress}\n                  variant={ProgressVariant.info}\n                  size={ProgressSize.sm}\n                />\n              )}\n              {message && <div className=\"kubevirt-vm-status__detail-small-section\">{message}</div>}\n            </li>\n          );\n        })}\n      </ul>\n    )}\n  </>\n);\n\nconst VIEW_POD_LOGS = 'View Pod logs';\nconst VIEW_VM_EVENTS = 'View VM events';\n\nconst getPodLink = (pod: PodKind) =>\n  `${resourcePath(PodModel.kind, getName(pod), getNamespace(pod))}`; // to default tab\n\nconst getVMILikeLink = (vmLike: VMILikeEntityKind) =>\n  `${resourcePath(\n    getVMLikeModel(vmLike).kind,\n    getName(vmLike),\n    getNamespace(vmLike),\n  )}/${VM_DETAIL_EVENTS_HREF}`;\n\nexport const VMStatus: React.FC<VMStatusProps> = ({ vm, vmi, vmStatusBundle }) => {\n  const vmiLike = vm || vmi;\n\n  const { status, pod, progress, importerPodsStatuses } = vmStatusBundle;\n  const title = status.toString(); // TODO status.toVerboseString() should be called to pass to popup header\n  const message = vmStatusBundle.message || vmStatusBundle.detailedMessage;\n  const detailedMessage = vmStatusBundle.message ? vmStatusBundle.detailedMessage : null;\n  const isPaused = status === VMStatusEnum.PAUSED;\n\n  const links: LinkType[] = [];\n\n  if (vmiLike) {\n    links.push({ to: getVMILikeLink(vmiLike), message: VIEW_VM_EVENTS });\n  }\n\n  if (pod) {\n    links.push({ to: `${getPodLink(pod)}/logs`, message: VIEW_POD_LOGS });\n  }\n\n  let icon = UnknownIcon;\n\n  if (isPaused) {\n    icon = PausedIcon;\n  } else if (status === VMStatusEnum.RUNNING) {\n    icon = SyncAltIcon;\n  } else if (status === VMStatusEnum.OFF) {\n    icon = OffIcon;\n  } else if (status.isError()) {\n    icon = RedExclamationCircleIcon;\n  } else if (status.isPending()) {\n    // should be called before inProgress\n    icon = HourglassHalfIcon;\n  } else if (status.isInProgress()) {\n    icon = InProgressIcon;\n  }\n\n  return (\n    <GenericStatus title={title || VMStatusEnum.UNKNOWN.toString()} Icon={icon}>\n      {(message || isPaused) && (\n        <VMStatusPopoverContent key=\"popover\" message={message} links={links} progress={progress}>\n          {isPaused && (\n            <Button\n              key=\"unpause\"\n              variant={ButtonVariant.primary}\n              onClick={async (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\n                event.preventDefault();\n                await unpauseVMI(vmi);\n              }}\n              id=\"paused-popover-submit\"\n            >\n              Unpause\n            </Button>\n          )}\n          {detailedMessage}\n          <ImporterPods key=\"importerPods\" statuses={importerPodsStatuses} />\n        </VMStatusPopoverContent>\n      )}\n    </GenericStatus>\n  );\n};\n\ntype VMStatusPopoverContentProps = {\n  message: string;\n  children?: React.ReactNode;\n  progress?: number;\n  links?: LinkType[];\n};\n\ntype VMStatusProps = {\n  vm: VMKind;\n  vmi?: VMIKind;\n  vmStatusBundle?: VMStatusBundle;\n};\n"]}]}