{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/modals/scanning-modal.jsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/modals/scanning-modal.jsx","mtime":1615298458730},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as React from 'react';\nimport { history } from '@console/internal/components/utils';\nimport { k8sCreateUrl, k8sList } from '../../../module/k8s';\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter } from '../../factory/modal';\nimport { PromiseComponent } from '../../utils';\nimport { Section } from '../utils/section';\nimport { ResourceListDropdownWithDataToolbar } from '../utils/resource-list-dropdown';\nimport { modelFor } from '../../../module/k8s/k8s-models';\nimport { NamespaceModel } from '@console/internal/models';\nclass BaseScanningModal extends PromiseComponent {\n    constructor(props) {\n        super(props);\n        this.successSubmit = ({ imageScanRequestName }) => {\n            var _a;\n            const { resource } = this.props;\n            const namespace = ((_a = resource === null || resource === void 0 ? void 0 : resource.metadata) === null || _a === void 0 ? void 0 : _a.namespace) || this.state.namespace || (resource === null || resource === void 0 ? void 0 : resource.namespace);\n            this.props.close();\n            history.push(`/k8s/ns/${namespace}/imagescanrequests/${imageScanRequestName}`);\n        };\n        this.onChangeName = (e) => {\n            this.setState({ name: e.target.value });\n        };\n        this.onChangeNamespace = (e) => {\n            this.setState({ namespace: e.target.value });\n        };\n        this.onSelectedItemChange = (items) => {\n            const resource = [...items][0] === 'All' ? this.state.resources.map(res => res.metadata.name)\n                : [...items].map(item => { var _a; return (_a = this.state.resources.find(res => res.metadata.uid === item)) === null || _a === void 0 ? void 0 : _a.metadata.name; });\n            this.setState({ resource });\n        };\n        this._submit = this._submit.bind(this);\n        this._cancel = props.cancel.bind(this);\n        this.state = Object.assign(this.state, {\n            name: '',\n            dataList: [],\n            namespaces: [],\n            namespace: '',\n            resources: [],\n            resource: [],\n        });\n    }\n    componentDidMount() {\n        const { showNs } = this.props;\n        showNs && this.getNamespaceList();\n        const { ns } = this.props;\n        this.setState({ namespace: ns });\n    }\n    componentDidUpdate(prevProps, prevState) {\n        if (!prevProps.resource && prevState.namespace !== this.state.namespace) {\n            return this.getResourceList();\n        }\n    }\n    getNamespaceList() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { ns } = this.props;\n            const list = yield k8sList(NamespaceModel);\n            const namespaces = list.map(item => item.metadata.name);\n            const namespace = ns || namespaces[0];\n            this.setState({ namespaces, namespace });\n        });\n    }\n    getResourceList() {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { kind, ns, labelSelector } = this.props;\n            const resources = yield k8sList(modelFor(kind), { ns: this.state.namespace, labelSelector });\n            return this.setState({ resources });\n        });\n    }\n    _submit(e) {\n        var _a;\n        e.preventDefault();\n        let { kind, ns, modelKind, resource, labelSelector, isExtRegistry } = this.props;\n        let registries;\n        kind = kind || (resource === null || resource === void 0 ? void 0 : resource.kind);\n        let modelPlural = 'scans';\n        if (kind === 'ExternalRegistry' || (modelKind === null || modelKind === void 0 ? void 0 : modelKind.kind) === 'ExternalRegistry') {\n            isExtRegistry = true;\n        }\n        if (isExtRegistry) {\n            modelPlural = 'ext-scans';\n        }\n        if (kind === 'Registry' || (modelKind === null || modelKind === void 0 ? void 0 : modelKind.kind) === 'Registry') {\n            if (resource) {\n                registries = [{\n                        'name': resource.metadata.name,\n                        'repositories': [\n                            {\n                                'name': '*'\n                            }\n                        ]\n                    }];\n            }\n            else {\n                registries = this.state.resource.map(selectedItem => ({\n                    'name': selectedItem,\n                    'repositories': [\n                        {\n                            'name': '*'\n                        }\n                    ]\n                }));\n            }\n        }\n        else if (kind === 'ExternalRegistry' || (modelKind === null || modelKind === void 0 ? void 0 : modelKind.kind) === 'ExternalRegistry') {\n            if (resource) {\n                registries = [{\n                        'name': resource.metadata.name,\n                        'repositories': [\n                            {\n                                'name': '*'\n                            }\n                        ]\n                    }];\n            }\n            else {\n                registries = this.state.resource.map(selectedItem => ({\n                    'name': selectedItem,\n                    'repositories': [\n                        {\n                            'name': '*'\n                        }\n                    ]\n                }));\n            }\n        }\n        else if (kind === 'Repository' || (modelKind === null || modelKind === void 0 ? void 0 : modelKind.kind) === 'Repository') {\n            if (resource) {\n                registries = [{\n                        'name': resource.spec.registry,\n                        'repositories': [\n                            {\n                                'name': resource.metadata.name,\n                                'versions': [\n                                    '*'\n                                ]\n                            }\n                        ]\n                    }];\n            }\n            else {\n                const reg = isExtRegistry ? labelSelector['ext-registry'] : labelSelector.registry;\n                registries = [{\n                        'name': reg,\n                        'repositories': this.state.resource.map(selectedItem => ({\n                            'name': selectedItem,\n                            'versions': [\n                                '*'\n                            ]\n                        }))\n                    }];\n            }\n        }\n        else if (kind === 'Tag') {\n            registries = [{\n                    'name': resource.registry,\n                    'repositories': [\n                        {\n                            'name': resource.repository,\n                            'versions': [\n                                resource.version\n                            ]\n                        }\n                    ]\n                }];\n        }\n        const data = { registries };\n        const opts = {\n            ns: (this.state.namespace !== '' && this.state.namespace) || ((_a = resource.metadata) === null || _a === void 0 ? void 0 : _a.namespace) || resource.namespace,\n            plural: 'scans',\n            name: this.state.name,\n        };\n        let model = kind ? modelFor(kind) : modelKind;\n        model = model || { apiVersion: 'v1' };\n        model.apiGroup = 'registry.tmax.io';\n        model.plural = modelPlural;\n        const promise = k8sCreateUrl(model, data, opts);\n        this.handlePromise(promise)\n            .then(this.successSubmit);\n    }\n    render() {\n        var _a;\n        const { kind, showNs, resource, message, modelKind } = this.props;\n        const { selected, resources } = this.state;\n        const label = kind || (modelKind === null || modelKind === void 0 ? void 0 : modelKind.kind) || (resource === null || resource === void 0 ? void 0 : resource.kind);\n        const name = ((_a = resource === null || resource === void 0 ? void 0 : resource.metadata) === null || _a === void 0 ? void 0 : _a.name) || (resource === null || resource === void 0 ? void 0 : resource.version);\n        return (React.createElement(\"form\", { onSubmit: this._submit, name: \"form\", className: \"modal-content\" },\n            React.createElement(ModalTitle, null, \"Image Scan Request Creation\"),\n            React.createElement(ModalBody, { unsetOverflow: true },\n                React.createElement(\"div\", { className: \"row co-m-form-row\" },\n                    React.createElement(\"div\", { className: \"col-sm-12\" }, message || '')),\n                React.createElement(\"div\", { className: \"row co-m=-form-row\" },\n                    React.createElement(\"div\", { className: \"col-sm-12\", style: { marginBottom: '15px' } },\n                        React.createElement(Section, { label: \"Name\", id: \"name\", isRequired: true },\n                            React.createElement(\"input\", { className: \"pf-c-form-control\", id: \"name\", name: \"metadata.name\", onChange: this.onChangeName, value: this.state.name }))),\n                    showNs && React.createElement(\"div\", { className: \"col-sm-12\", style: { marginBottom: '15px' } },\n                        React.createElement(Section, { label: \"Namespace\", id: \"namespace\", isRequired: true },\n                            React.createElement(\"select\", { className: \"col-sm-12\", value: this.state.namespace, onChange: this.onChangeNamespace }, this.state.namespaces.map(namespace => React.createElement(\"option\", { key: namespace, value: namespace }, namespace))))),\n                    React.createElement(\"div\", { className: \"col-sm-12\" },\n                        React.createElement(\"label\", { className: 'control-label co-required', htmlFor: label }, label),\n                        React.createElement(\"div\", { className: \"co-search-group\" }, resource ?\n                            React.createElement(\"div\", null, name) :\n                            React.createElement(ResourceListDropdownWithDataToolbar, { resourceList: resources, showAll: true, resourceType: label, autocompletePlaceholder: \"search by name\" // 검색란 placeholder\n                                , onSelectedItemChange: this.onSelectedItemChange }))))),\n            React.createElement(ModalSubmitFooter, { errorMessage: this.state.errorMessage, inProgress: this.state.inProgress, submitText: \"Confirm\", cancel: this._cancel })));\n    }\n}\n;\nexport const scanningModal = createModalLauncher((props) => (React.createElement(BaseScanningModal, Object.assign({}, props))));\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/modals/scanning-modal.jsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/modals/scanning-modal.jsx"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\nimport { ValidTabGuard } from 'packages/kubevirt-plugin/src/components/create-vm-wizard/tabs/valid-tab-guard';\nimport * as React from 'react';\nimport { history } from '@console/internal/components/utils';\nimport { k8sCreateUrl, k8sList, referenceForModel, kindForReference } from '../../../module/k8s';\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter } from '../../factory/modal';\nimport { PromiseComponent, ResourceIcon, SelectorInput } from '../../utils';\nimport { Section } from '../utils/section';\nimport { ResourceListDropdownWithDataToolbar } from '../utils/resource-list-dropdown';\nimport { ResourceListDropdown, RegistryListDropdown } from '../../resource-dropdown';\nimport { Button, Chip, ChipGroup, ChipGroupToolbarItem } from '@patternfly/react-core';\nimport { CloseIcon } from '@patternfly/react-icons';\nimport { ResourceIcon } from '../utils';\nimport { modelFor } from '../../../module/k8s/k8s-models';\nimport { NamespaceModel } from '@console/internal/models';\nimport { withRouter } from 'react-router-dom';\nimport { oidcClientIDInput } from 'integration-tests/views/oauth.view';\n\nclass BaseScanningModal extends PromiseComponent {\n    constructor(props) {\n        super(props);\n        this._submit = this._submit.bind(this);\n        this._cancel = props.cancel.bind(this);\n\n        this.state = Object.assign(this.state, {\n            name: '',\n            dataList: [],\n            namespaces: [],\n            namespace: '',\n            resources: [],\n            resource: [],\n        });\n    }\n\n    componentDidMount() {\n        const { showNs } = this.props;\n        showNs && this.getNamespaceList();\n        const { ns } = this.props;\n        this.setState({ namespace: ns });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (!prevProps.resource && prevState.namespace !== this.state.namespace) {\n            return this.getResourceList();\n        }\n    }\n\n    async getNamespaceList() {\n        const { ns } = this.props;\n        const list = await k8sList(NamespaceModel);\n        const namespaces = list.map(item => item.metadata.name);\n        const namespace = ns || namespaces[0];\n        this.setState({ namespaces, namespace });\n    }\n\n    async getResourceList() {\n        const { kind, ns, labelSelector } = this.props;\n        const resources = await k8sList(modelFor(kind), { ns: this.state.namespace, labelSelector });\n        return this.setState({ resources });\n    }\n\n    _submit(e) {\n        e.preventDefault();\n\n        let { kind, ns, modelKind, resource, labelSelector, isExtRegistry } = this.props;\n\n        let registries;\n\n        kind = kind || resource?.kind;\n\n        let modelPlural = 'scans';\n        if (kind === 'ExternalRegistry' || modelKind?.kind === 'ExternalRegistry') {\n            isExtRegistry = true;\n        }\n\n        if (isExtRegistry) {\n            modelPlural = 'ext-scans';\n        }\n\n        if (kind === 'Registry' || modelKind?.kind === 'Registry') {\n            if (resource) {\n                registries = [{\n                    'name': resource.metadata.name,\n                    'repositories': [\n                        {\n                            'name': '*'\n                        }\n                    ]\n                }];\n            }\n            else {\n                registries = this.state.resource.map(selectedItem => ({\n                    'name': selectedItem,\n                    'repositories': [\n                        {\n                            'name': '*'\n                        }\n                    ]\n                }))\n            }\n        } else if (kind === 'ExternalRegistry' || modelKind?.kind === 'ExternalRegistry') {\n            if (resource) {\n                registries = [{\n                    'name': resource.metadata.name,\n                    'repositories': [\n                        {\n                            'name': '*'\n                        }\n                    ]\n                }];\n            }\n            else {\n                registries = this.state.resource.map(selectedItem => ({\n                    'name': selectedItem,\n                    'repositories': [\n                        {\n                            'name': '*'\n                        }\n                    ]\n                }))\n            }\n        }\n        else if (kind === 'Repository' || modelKind?.kind === 'Repository') {\n            if (resource) {\n                registries = [{\n                    'name': resource.spec.registry,\n                    'repositories': [\n                        {\n                            'name': resource.metadata.name,\n                            'versions': [\n                                '*'\n                            ]\n                        }\n                    ]\n                }];\n            }\n            else {\n                const reg = isExtRegistry ? labelSelector['ext-registry'] : labelSelector.registry;\n                registries = [{\n                    'name': reg,\n                    'repositories': this.state.resource.map(selectedItem => (\n                        {\n                            'name': selectedItem,\n                            'versions': [\n                                '*'\n                            ]\n                        }\n                    ))\n                }];\n            }\n        } else if (kind === 'Tag') {\n            registries = [{\n                'name': resource.registry,\n                'repositories': [\n                    {\n                        'name': resource.repository,\n                        'versions': [\n                            resource.version\n                        ]\n                    }\n                ]\n            }];\n        }\n\n        const data = { registries };\n\n\n        const opts = {\n            ns: (this.state.namespace !== '' && this.state.namespace) || resource.metadata?.namespace || resource.namespace,\n            plural: 'scans',\n            name: this.state.name,\n        };\n        let model = kind ? modelFor(kind) : modelKind;\n\n        model = model || { apiVersion: 'v1' };\n\n        model.apiGroup = 'registry.tmax.io';\n\n        model.plural = modelPlural;\n\n        const promise = k8sCreateUrl(model, data, opts);\n        this.handlePromise(promise)\n            .then(this.successSubmit);\n    }\n\n    successSubmit = ({ imageScanRequestName }) => {\n        const { resource } = this.props;\n\n        const namespace = resource?.metadata?.namespace || this.state.namespace || resource?.namespace;\n\n        this.props.close();\n        history.push(`/k8s/ns/${namespace}/imagescanrequests/${imageScanRequestName}`);\n    }\n\n    onChangeName = (e) => {\n        this.setState({ name: e.target.value });\n    }\n\n    onChangeNamespace = (e) => {\n        this.setState({ namespace: e.target.value });\n    }\n\n    onSelectedItemChange = (items) => {\n        const resource = [...items][0] === 'All' ? this.state.resources.map(res => res.metadata.name)\n            : [...items].map(item => this.state.resources.find(res => res.metadata.uid === item)?.metadata.name);\n        this.setState({ resource });\n    };\n\n    render() {\n        const { kind, showNs, resource, message, modelKind } = this.props;\n        const { selected, resources } = this.state;\n\n        const label = kind || modelKind?.kind || resource?.kind;\n\n        const name = resource?.metadata?.name || resource?.version;\n\n        return (\n            <form onSubmit={this._submit} name=\"form\" className=\"modal-content\">\n                <ModalTitle>Image Scan Request Creation</ModalTitle>\n                <ModalBody unsetOverflow={true}>\n                    <div className=\"row co-m-form-row\">\n                        <div className=\"col-sm-12\">\n                            {message || ''}\n                        </div>\n                    </div>\n                    <div className=\"row co-m=-form-row\">\n                        <div className=\"col-sm-12\" style={{ marginBottom: '15px' }}>\n                            <Section label=\"Name\" id=\"name\" isRequired={true}>\n                                <input className=\"pf-c-form-control\" id=\"name\" name=\"metadata.name\" onChange={this.onChangeName} value={this.state.name} />\n                            </Section>\n                        </div>\n                        {showNs && <div className=\"col-sm-12\" style={{ marginBottom: '15px' }}>\n                            <Section label=\"Namespace\" id=\"namespace\" isRequired={true}>\n                                <select className=\"col-sm-12\" value={this.state.namespace} onChange={this.onChangeNamespace}>\n                                    {this.state.namespaces.map(namespace => <option key={namespace} value={namespace}>{namespace}</option>)}\n                                </select>\n                            </Section>\n                        </div>}\n                        <div className=\"col-sm-12\">\n                            <label className={'control-label co-required'} htmlFor={label}>\n                                {label}\n                            </label>\n                            <div className=\"co-search-group\">\n                                {resource ?\n                                    <div>{name}</div> :\n                                    <ResourceListDropdownWithDataToolbar\n                                        resourceList={resources} // 필수\n                                        showAll={true} // 드롭다운에 all resource 라는 항목이 생긴다.\n                                        resourceType={label} // title, placeholder, all resources, chip group 에 적용되는 문구 (title, placeholder는 직접 지정하는 것의 우선순위가 더 높음)\n                                        autocompletePlaceholder=\"search by name\" // 검색란 placeholder\n                                        onSelectedItemChange={this.onSelectedItemChange} // 선택된 아이템 리스트 변동될 때마다 호출되는 함수\n                                    />\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </ModalBody>\n                <ModalSubmitFooter\n                    errorMessage={this.state.errorMessage}\n                    inProgress={this.state.inProgress}\n                    submitText=\"Confirm\"\n                    cancel={this._cancel}\n                />\n            </form>\n        )\n    }\n};\n\nexport const scanningModal = createModalLauncher((props) => (\n    <BaseScanningModal {...props} />\n));\n"]}]}