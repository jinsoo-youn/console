{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/image-search/ImageStreamNsDropdown.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/image-search/ImageStreamNsDropdown.tsx","mtime":1615298458620},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { useFormikContext } from 'formik';\nimport { k8sGet } from '@console/internal/module/k8s';\nimport { RoleBindingModel } from '@console/internal/models';\nimport { checkAccess } from '@console/internal/components/utils';\nimport { ResourceDropdownField } from '@console/shared';\nimport { getProjectResource, BuilderImagesNamespace } from '../../../utils/imagestream-utils';\nimport { ImageStreamActions as Action } from '../import-types';\nimport { ImageStreamContext } from './ImageStreamContext';\nconst ImageStreamNsDropdown = () => {\n    const { values, setFieldValue, initialValues } = useFormikContext();\n    const { dispatch } = React.useContext(ImageStreamContext);\n    const onDropdownChange = React.useCallback((selectedProject) => {\n        const promiseArr = [];\n        setFieldValue('imageStream.image', initialValues.imageStream.image);\n        setFieldValue('imageStream.tag', initialValues.imageStream.tag);\n        setFieldValue('isi', initialValues.isi);\n        dispatch({ type: Action.setLoading, value: true });\n        dispatch({ type: Action.setAccessLoading, value: true });\n        if (selectedProject === BuilderImagesNamespace.Openshift) {\n            dispatch({ type: Action.setHasCreateAccess, value: true });\n            dispatch({ type: Action.setHasAccessToPullImage, value: true });\n            setFieldValue('imageStream.grantAccess', false);\n        }\n        else {\n            promiseArr.push(checkAccess({\n                group: RoleBindingModel.apiGroup,\n                resource: RoleBindingModel.plural,\n                verb: 'create',\n                name: 'system:image-puller',\n                namespace: selectedProject,\n            })\n                .then((resp) => dispatch({ type: Action.setHasCreateAccess, value: resp.status.allowed }))\n                .catch(() => dispatch({ type: Action.setHasAccessToPullImage, value: false })));\n            promiseArr.push(k8sGet(RoleBindingModel, 'system:image-puller', selectedProject)\n                .then(() => {\n                dispatch({\n                    type: Action.setHasAccessToPullImage,\n                    value: true,\n                });\n                setFieldValue('imageStream.grantAccess', false);\n            })\n                .catch(() => dispatch({ type: Action.setHasAccessToPullImage, value: false })));\n        }\n        return Promise.all(promiseArr).then(() => dispatch({ type: Action.setAccessLoading, value: false }));\n    }, [\n        dispatch,\n        initialValues.imageStream.image,\n        initialValues.imageStream.tag,\n        initialValues.isi,\n        setFieldValue,\n    ]);\n    React.useEffect(() => {\n        values.imageStream.namespace && onDropdownChange(values.imageStream.namespace);\n    }, [onDropdownChange, values.imageStream.namespace]);\n    React.useEffect(() => {\n        if (initialValues.imageStream.namespace !== values.imageStream.namespace) {\n            initialValues.imageStream.image = '';\n            initialValues.imageStream.tag = '';\n        }\n    }, [\n        initialValues.imageStream.image,\n        initialValues.imageStream.namespace,\n        initialValues.imageStream.tag,\n        values.imageStream.namespace,\n    ]);\n    return (React.createElement(ResourceDropdownField, { name: \"imageStream.namespace\", label: \"Projects\", title: \"Select Project\", fullWidth: true, required: true, resources: getProjectResource(), dataSelector: ['metadata', 'name'], onChange: onDropdownChange, appendItems: { openshift: BuilderImagesNamespace.Openshift } }));\n};\nexport default ImageStreamNsDropdown;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/image-search/ImageStreamNsDropdown.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/image-search/ImageStreamNsDropdown.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { k8sGet } from '@console/internal/module/k8s';\nimport { RoleBindingModel } from '@console/internal/models';\nimport { checkAccess } from '@console/internal/components/utils';\nimport { ResourceDropdownField } from '@console/shared';\nimport { getProjectResource, BuilderImagesNamespace } from '../../../utils/imagestream-utils';\nimport { ImageStreamActions as Action } from '../import-types';\nimport { ImageStreamContext } from './ImageStreamContext';\n\nconst ImageStreamNsDropdown: React.FC = () => {\n  const { values, setFieldValue, initialValues } = useFormikContext<FormikValues>();\n  const { dispatch } = React.useContext(ImageStreamContext);\n  const onDropdownChange = React.useCallback(\n    (selectedProject: string) => {\n      const promiseArr = [];\n      setFieldValue('imageStream.image', initialValues.imageStream.image);\n      setFieldValue('imageStream.tag', initialValues.imageStream.tag);\n      setFieldValue('isi', initialValues.isi);\n      dispatch({ type: Action.setLoading, value: true });\n      dispatch({ type: Action.setAccessLoading, value: true });\n      if (selectedProject === BuilderImagesNamespace.Openshift) {\n        dispatch({ type: Action.setHasCreateAccess, value: true });\n        dispatch({ type: Action.setHasAccessToPullImage, value: true });\n        setFieldValue('imageStream.grantAccess', false);\n      } else {\n        promiseArr.push(\n          checkAccess({\n            group: RoleBindingModel.apiGroup,\n            resource: RoleBindingModel.plural,\n            verb: 'create',\n            name: 'system:image-puller',\n            namespace: selectedProject,\n          })\n            .then((resp) =>\n              dispatch({ type: Action.setHasCreateAccess, value: resp.status.allowed }),\n            )\n            .catch(() => dispatch({ type: Action.setHasAccessToPullImage, value: false })),\n        );\n        promiseArr.push(\n          k8sGet(RoleBindingModel, 'system:image-puller', selectedProject)\n            .then(() => {\n              dispatch({\n                type: Action.setHasAccessToPullImage,\n                value: true,\n              });\n              setFieldValue('imageStream.grantAccess', false);\n            })\n            .catch(() => dispatch({ type: Action.setHasAccessToPullImage, value: false })),\n        );\n      }\n      return Promise.all(promiseArr).then(() =>\n        dispatch({ type: Action.setAccessLoading, value: false }),\n      );\n    },\n    [\n      dispatch,\n      initialValues.imageStream.image,\n      initialValues.imageStream.tag,\n      initialValues.isi,\n      setFieldValue,\n    ],\n  );\n\n  React.useEffect(() => {\n    values.imageStream.namespace && onDropdownChange(values.imageStream.namespace);\n  }, [onDropdownChange, values.imageStream.namespace]);\n\n  React.useEffect(() => {\n    if (initialValues.imageStream.namespace !== values.imageStream.namespace) {\n      initialValues.imageStream.image = '';\n      initialValues.imageStream.tag = '';\n    }\n  }, [\n    initialValues.imageStream.image,\n    initialValues.imageStream.namespace,\n    initialValues.imageStream.tag,\n    values.imageStream.namespace,\n  ]);\n\n  return (\n    <ResourceDropdownField\n      name=\"imageStream.namespace\"\n      label=\"Projects\"\n      title=\"Select Project\"\n      fullWidth\n      required\n      resources={getProjectResource()}\n      dataSelector={['metadata', 'name']}\n      onChange={onDropdownChange}\n      appendItems={{ openshift: BuilderImagesNamespace.Openshift }}\n    />\n  );\n};\nexport default ImageStreamNsDropdown;\n"]}]}