{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/dashboard/DashboardGrid.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/dashboard/DashboardGrid.tsx","mtime":1616735742370},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport { global_breakpoint_lg as breakpointLG } from '@patternfly/react-tokens';\nimport { useRefWidth } from '@console/internal/components/utils/ref-width-hook';\nexport var GridPosition;\n(function (GridPosition) {\n    GridPosition[\"MAIN\"] = \"MAIN\";\n    GridPosition[\"LEFT\"] = \"LEFT\";\n    GridPosition[\"RIGHT\"] = \"RIGHT\";\n})(GridPosition || (GridPosition = {}));\nconst mapCardsToGrid = (cards = [], keyPrefix, ignoreCardSpan = false) => cards.map(({ Card, span = 12 }, index) => (\n// eslint-disable-next-line react/no-array-index-key\nReact.createElement(GridItem, { key: `${keyPrefix}-${index}`, span: ignoreCardSpan ? 12 : span },\n    React.createElement(Card, null))));\nconst DashboardGrid = ({ mainCards, leftCards, rightCards }) => {\n    const [containerRef, width] = useRefWidth();\n    const smallGrid = !!containerRef.current && width <= parseInt(breakpointLG.value, 10);\n    const mainGridCards = React.useMemo(() => mapCardsToGrid(mainCards, 'main', smallGrid), [\n        mainCards,\n        smallGrid,\n    ]);\n    const leftGridCards = React.useMemo(() => mapCardsToGrid(leftCards, 'left', smallGrid), [\n        leftCards,\n        smallGrid,\n    ]);\n    const rightGridCards = React.useMemo(() => mapCardsToGrid(rightCards, 'right', smallGrid), [\n        rightCards,\n        smallGrid,\n    ]);\n    return (React.createElement(\"div\", { ref: containerRef }, smallGrid ? (React.createElement(Grid, { className: \"co-dashboard-grid\" },\n        React.createElement(GridItem, { lg: 12, md: 12, sm: 12 },\n            React.createElement(Grid, { className: \"co-dashboard-grid\" }, mainGridCards)),\n        React.createElement(GridItem, { lg: 12, md: 12, sm: 12 },\n            React.createElement(Grid, { className: \"co-dashboard-grid\" }, leftGridCards)),\n        React.createElement(GridItem, { lg: 12, md: 12, sm: 12 },\n            React.createElement(Grid, { className: \"co-dashboard-grid\" }, rightGridCards)))) : (React.createElement(Grid, { className: \"co-dashboard-grid\" },\n        React.createElement(GridItem, { lg: 3, md: 3, sm: 3 },\n            React.createElement(Grid, { className: \"co-dashboard-grid\" }, leftGridCards)),\n        React.createElement(GridItem, { lg: 6, md: 6, sm: 6 },\n            React.createElement(Grid, { className: \"co-dashboard-grid\" }, mainGridCards)),\n        React.createElement(GridItem, { lg: 3, md: 3, sm: 3 },\n            React.createElement(Grid, { className: \"co-dashboard-grid\" }, rightGridCards))))));\n};\nexport default DashboardGrid;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/dashboard/DashboardGrid.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/dashboard/DashboardGrid.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport { global_breakpoint_lg as breakpointLG } from '@patternfly/react-tokens';\nimport { DashboardCardSpan } from '@console/plugin-sdk';\nimport { useRefWidth } from '@console/internal/components/utils/ref-width-hook';\n\nexport enum GridPosition {\n  MAIN = 'MAIN',\n  LEFT = 'LEFT',\n  RIGHT = 'RIGHT',\n}\n\nconst mapCardsToGrid = (\n  cards: GridDashboardCard[] = [],\n  keyPrefix: string,\n  ignoreCardSpan: boolean = false,\n): React.ReactNode[] =>\n  cards.map(({ Card, span = 12 }, index) => (\n    // eslint-disable-next-line react/no-array-index-key\n    <GridItem key={`${keyPrefix}-${index}`} span={ignoreCardSpan ? 12 : span}>\n      <Card />\n    </GridItem>\n  ));\n\nconst DashboardGrid: React.FC<DashboardGridProps> = ({ mainCards, leftCards, rightCards }) => {\n  const [containerRef, width] = useRefWidth();\n  const smallGrid = !!containerRef.current && width <= parseInt(breakpointLG.value, 10);\n\n  const mainGridCards = React.useMemo(() => mapCardsToGrid(mainCards, 'main', smallGrid), [\n    mainCards,\n    smallGrid,\n  ]);\n  const leftGridCards = React.useMemo(() => mapCardsToGrid(leftCards, 'left', smallGrid), [\n    leftCards,\n    smallGrid,\n  ]);\n  const rightGridCards = React.useMemo(() => mapCardsToGrid(rightCards, 'right', smallGrid), [\n    rightCards,\n    smallGrid,\n  ]);\n\n  return (\n    <div ref={containerRef}>\n      {smallGrid ? (\n        <Grid className=\"co-dashboard-grid\">\n          <GridItem lg={12} md={12} sm={12}>\n            <Grid className=\"co-dashboard-grid\">{mainGridCards}</Grid>\n          </GridItem>\n          <GridItem lg={12} md={12} sm={12}>\n            <Grid className=\"co-dashboard-grid\">{leftGridCards}</Grid>\n          </GridItem>\n          <GridItem lg={12} md={12} sm={12}>\n            <Grid className=\"co-dashboard-grid\">{rightGridCards}</Grid>\n          </GridItem>\n        </Grid>\n      ) : (\n        <Grid className=\"co-dashboard-grid\">\n          <GridItem lg={3} md={3} sm={3}>\n            <Grid className=\"co-dashboard-grid\">{leftGridCards}</Grid>\n          </GridItem>\n          <GridItem lg={6} md={6} sm={6}>\n            <Grid className=\"co-dashboard-grid\">{mainGridCards}</Grid>\n          </GridItem>\n          <GridItem lg={3} md={3} sm={3}>\n            <Grid className=\"co-dashboard-grid\">{rightGridCards}</Grid>\n          </GridItem>\n        </Grid>\n      )}\n    </div>\n  );\n};\n\nexport default DashboardGrid;\n\nexport type GridDashboardCard = {\n  Card: React.ComponentType<any>;\n  span?: DashboardCardSpan;\n};\n\ntype DashboardGridProps = {\n  mainCards: GridDashboardCard[];\n  leftCards?: GridDashboardCard[];\n  rightCards?: GridDashboardCard[];\n};\n"]}]}