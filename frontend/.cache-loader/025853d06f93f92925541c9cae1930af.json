{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/overview/pods-overview.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/overview/pods-overview.tsx","mtime":1615298458740},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Status } from '@console/shared';\nimport { ResourceLink, resourcePath, SidebarSectionHeading } from '../utils';\nimport { podPhase, referenceFor } from '../../module/k8s';\nconst kind = 'Pod';\nconst MAX_PODS = 3;\nconst MAX_ERROR_PODS = 10;\nconst podUpdateTime = (pod) => {\n    const allStatuses = [\n        ..._.get(pod, 'status.containerStatuses', []),\n        ..._.get(pod, 'status.initContainerStatuses', []),\n    ];\n    const updateTimes = _.reduce(allStatuses, (times, nextStatus) => {\n        if (nextStatus.state.running) {\n            return [...times, _.get(nextStatus, 'state.running.startedAt')];\n        }\n        if (nextStatus.state.terminated) {\n            return [...times, _.get(nextStatus, 'state.terminated.finishedAt')];\n        }\n        if (nextStatus.lastState.running) {\n            return [...times, _.get(nextStatus, 'lastState.running.startedAt')];\n        }\n        if (nextStatus.lastState.terminated) {\n            return [...times, _.get(nextStatus, 'lastState.terminated.finishedAt')];\n        }\n        return [...times, _.get(nextStatus, _.get(pod, 'startTime'))];\n    }, []);\n    return _.head(_.reverse(updateTimes.sort()));\n};\nconst errorPhases = [\n    'ContainerCannotRun',\n    'CrashLoopBackOff',\n    'Critical',\n    'Error',\n    'Failed',\n    'InstallCheckFailed',\n    'Cancelled',\n    'Expired',\n    'Not Ready',\n    'Terminating',\n];\nconst isPodError = (pod) => _.includes(errorPhases, podPhase(pod));\nconst podCompare = (pod1, pod2) => {\n    const error1 = isPodError(pod1);\n    const error2 = isPodError(pod2);\n    if (error1 !== error2) {\n        return error1 ? 1 : 0;\n    }\n    const runtime1 = podUpdateTime(pod1);\n    const runtime2 = podUpdateTime(pod2);\n    if (runtime1 < runtime2) {\n        return 1;\n    }\n    if (runtime1 > runtime2) {\n        return -1;\n    }\n    return pod1.metadata.name.localeCompare(pod2.metadata.name);\n};\nconst PodOverviewItem = ({ pod }) => {\n    const { metadata: { name, namespace }, } = pod;\n    const phase = podPhase(pod);\n    return (React.createElement(\"li\", { className: \"list-group-item container-fluid\" },\n        React.createElement(\"div\", { className: \"row\" },\n            React.createElement(\"span\", { className: \"col-xs-6\" },\n                React.createElement(ResourceLink, { kind: kind, name: name, namespace: namespace })),\n            React.createElement(\"span\", { className: \"col-xs-3\" },\n                React.createElement(Status, { status: phase })),\n            React.createElement(\"span\", { className: \"col-xs-3 text-right\" },\n                React.createElement(Link, { to: `${resourcePath(kind, name, namespace)}/logs` }, \"View logs\")))));\n};\nPodOverviewItem.displayName = 'PodOverviewItem';\nconst PodsOverviewList = ({ pods }) => (React.createElement(\"ul\", { className: \"list-group\" }, _.map(pods, (pod) => (React.createElement(PodOverviewItem, { key: pod.metadata.uid, pod: pod })))));\nPodsOverviewList.displayName = 'PodsOverviewList';\nexport const PodsOverview = ({ pods, obj, allPodsLink, emptyText, }) => {\n    const { metadata: { name, namespace }, } = obj;\n    const errorPodCount = _.size(_.filter(pods, (pod) => isPodError(pod)));\n    const podsShown = Math.max(Math.min(errorPodCount, MAX_ERROR_PODS), MAX_PODS);\n    const linkTo = allPodsLink || `${resourcePath(referenceFor(obj), name, namespace)}/pods`;\n    const emptyMessage = emptyText || 'No Pods found for this resource.';\n    pods.sort(podCompare);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(SidebarSectionHeading, { text: \"Pods\" }, _.size(pods) > podsShown && (React.createElement(Link, { className: \"sidebar__section-view-all\", to: linkTo }, `View all (${_.size(pods)})`))),\n        _.isEmpty(pods) ? (React.createElement(\"span\", { className: \"text-muted\" }, emptyMessage)) : (React.createElement(PodsOverviewList, { pods: _.take(pods, podsShown) }))));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/overview/pods-overview.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/overview/pods-overview.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\n\nimport { Status } from '@console/shared';\nimport { ResourceLink, resourcePath, SidebarSectionHeading } from '../utils';\nimport { podPhase, PodKind, K8sResourceKind, referenceFor } from '../../module/k8s';\n\nconst kind: string = 'Pod';\nconst MAX_PODS: number = 3;\nconst MAX_ERROR_PODS: number = 10;\n\nconst podUpdateTime = (pod: PodKind) => {\n  const allStatuses = [\n    ..._.get(pod, 'status.containerStatuses', []),\n    ..._.get(pod, 'status.initContainerStatuses', []),\n  ];\n  const updateTimes = _.reduce(\n    allStatuses,\n    (times, nextStatus) => {\n      if (nextStatus.state.running) {\n        return [...times, _.get(nextStatus, 'state.running.startedAt')];\n      }\n      if (nextStatus.state.terminated) {\n        return [...times, _.get(nextStatus, 'state.terminated.finishedAt')];\n      }\n      if (nextStatus.lastState.running) {\n        return [...times, _.get(nextStatus, 'lastState.running.startedAt')];\n      }\n      if (nextStatus.lastState.terminated) {\n        return [...times, _.get(nextStatus, 'lastState.terminated.finishedAt')];\n      }\n      return [...times, _.get(nextStatus, _.get(pod, 'startTime'))];\n    },\n    [],\n  );\n\n  return _.head(_.reverse(updateTimes.sort()));\n};\n\nconst errorPhases = [\n  'ContainerCannotRun',\n  'CrashLoopBackOff',\n  'Critical',\n  'Error',\n  'Failed',\n  'InstallCheckFailed',\n  'Cancelled',\n  'Expired',\n  'Not Ready',\n  'Terminating',\n];\n\nconst isPodError = (pod: PodKind) => _.includes(errorPhases, podPhase(pod));\n\nconst podCompare = (pod1: PodKind, pod2: PodKind): number => {\n  const error1 = isPodError(pod1);\n  const error2 = isPodError(pod2);\n\n  if (error1 !== error2) {\n    return error1 ? 1 : 0;\n  }\n\n  const runtime1 = podUpdateTime(pod1);\n  const runtime2 = podUpdateTime(pod2);\n\n  if (runtime1 < runtime2) {\n    return 1;\n  }\n  if (runtime1 > runtime2) {\n    return -1;\n  }\n\n  return pod1.metadata.name.localeCompare(pod2.metadata.name);\n};\n\nconst PodOverviewItem: React.FC<PodOverviewItemProps> = ({ pod }) => {\n  const {\n    metadata: { name, namespace },\n  } = pod;\n  const phase = podPhase(pod);\n\n  return (\n    <li className=\"list-group-item container-fluid\">\n      <div className=\"row\">\n        <span className=\"col-xs-6\">\n          <ResourceLink kind={kind} name={name} namespace={namespace} />\n        </span>\n        <span className=\"col-xs-3\">\n          <Status status={phase} />\n        </span>\n        <span className=\"col-xs-3 text-right\">\n          <Link to={`${resourcePath(kind, name, namespace)}/logs`}>View logs</Link>\n        </span>\n      </div>\n    </li>\n  );\n};\n\nPodOverviewItem.displayName = 'PodOverviewItem';\n\ntype PodOverviewItemProps = {\n  pod: PodKind;\n};\n\nconst PodsOverviewList: React.SFC<PodOverviewListProps> = ({ pods }) => (\n  <ul className=\"list-group\">\n    {_.map(pods, (pod) => (\n      <PodOverviewItem key={pod.metadata.uid} pod={pod} />\n    ))}\n  </ul>\n);\n\nPodsOverviewList.displayName = 'PodsOverviewList';\n\nexport const PodsOverview: React.SFC<PodsOverviewProps> = ({\n  pods,\n  obj,\n  allPodsLink,\n  emptyText,\n}) => {\n  const {\n    metadata: { name, namespace },\n  } = obj;\n\n  const errorPodCount = _.size(_.filter(pods, (pod) => isPodError(pod)));\n  const podsShown = Math.max(Math.min(errorPodCount, MAX_ERROR_PODS), MAX_PODS);\n  const linkTo = allPodsLink || `${resourcePath(referenceFor(obj), name, namespace)}/pods`;\n  const emptyMessage = emptyText || 'No Pods found for this resource.';\n  pods.sort(podCompare);\n\n  return (\n    <>\n      <SidebarSectionHeading text=\"Pods\">\n        {_.size(pods) > podsShown && (\n          <Link className=\"sidebar__section-view-all\" to={linkTo}>\n            {`View all (${_.size(pods)})`}\n          </Link>\n        )}\n      </SidebarSectionHeading>\n      {_.isEmpty(pods) ? (\n        <span className=\"text-muted\">{emptyMessage}</span>\n      ) : (\n        <PodsOverviewList pods={_.take(pods, podsShown)} />\n      )}\n    </>\n  );\n};\n\ntype PodOverviewListProps = {\n  pods: PodKind[];\n};\n\ntype PodsOverviewProps = {\n  pods: PodKind[];\n  obj: K8sResourceKind;\n  allPodsLink?: string;\n  emptyText?: string;\n};\n"]}]}