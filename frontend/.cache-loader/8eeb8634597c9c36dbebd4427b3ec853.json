{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/plugin.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/plugin.tsx","mtime":1615701814890},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { CogsIcon } from '@patternfly/react-icons';\nimport { FLAGS } from '@console/shared/src/constants';\nimport { FLAG_DEVWORKSPACE } from './consts';\nimport { ClusterVersionModel, NodeModel, PodModel, StorageClassModel, PersistentVolumeClaimModel, ClusterOperatorModel } from '@console/internal/models';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { getNodeStatusGroups, getPodStatusGroups, getPVCStatusGroups } from '@console/shared/src/components/dashboard/inventory-card/utils';\nimport { fetchK8sHealth, getK8sHealthState, getControlPlaneHealth, getClusterOperatorHealthStatus } from './components/dashboards-page/status';\nimport { API_SERVERS_UP, API_SERVER_REQUESTS_SUCCESS, CONTROLLER_MANAGERS_UP, SCHEDULERS_UP } from './queries';\nimport { getClusterUpdateTimestamp, isClusterUpdateActivity } from './components/dashboards-page/activity';\nimport reducer from './redux/reducer';\nimport * as models from './models';\nconst plugin = [\n    {\n        type: 'ModelDefinition',\n        properties: {\n            models: _.values(models),\n        },\n    },\n    {\n        type: 'FeatureFlag/Model',\n        properties: {\n            model: models.WorkspaceModel,\n            flag: FLAG_DEVWORKSPACE,\n        },\n    },\n    {\n        type: 'Perspective',\n        properties: {\n            id: 'admin',\n            name: 'Administrator',\n            icon: React.createElement(CogsIcon, null),\n            default: true,\n            getLandingPageURL: flags => (flags[FLAGS.CAN_LIST_NS] ? '/dashboards' : '/k8s/cluster/projects'),\n            getK8sLandingPageURL: () => '/search',\n            getImportRedirectURL: project => `/k8s/cluster/projects/${project}/workloads`,\n        },\n    },\n    {\n        type: 'Dashboards/Overview/Activity/Resource',\n        properties: {\n            k8sResource: {\n                isList: true,\n                prop: 'clusterVersion',\n                kind: referenceForModel(ClusterVersionModel),\n                namespaced: false,\n            },\n            isActivity: isClusterUpdateActivity,\n            getTimestamp: getClusterUpdateTimestamp,\n            loader: () => import('./components/dashboards-page/ClusterUpdateActivity' /* webpackChunkName: \"console-app\" */).then(m => m.default),\n        },\n        flags: {\n            required: [FLAGS.CLUSTER_VERSION],\n        },\n    },\n    {\n        type: 'Dashboards/Overview/Health/URL',\n        properties: {\n            title: 'Cluster',\n            url: 'healthz',\n            fetch: fetchK8sHealth,\n            healthHandler: getK8sHealthState,\n            additionalResource: {\n                kind: referenceForModel(ClusterVersionModel),\n                namespaced: false,\n                name: 'version',\n                isList: false,\n                prop: 'cv',\n                optional: true,\n            },\n        },\n    },\n    {\n        type: 'Dashboards/Overview/Health/Prometheus',\n        properties: {\n            title: 'Control Plane',\n            queries: [API_SERVERS_UP, CONTROLLER_MANAGERS_UP, SCHEDULERS_UP, API_SERVER_REQUESTS_SUCCESS],\n            healthHandler: getControlPlaneHealth,\n            popupComponent: () => import('./components/dashboards-page/ControlPlaneStatus' /* webpackChunkName: \"console-app\" */).then(m => m.default),\n            popupTitle: 'Control Plane status',\n            disallowedProviders: ['IBMCloud'],\n        },\n    },\n    {\n        type: 'Dashboards/Overview/Inventory/Item',\n        properties: {\n            model: NodeModel,\n            mapper: getNodeStatusGroups,\n        },\n    },\n    {\n        type: 'Dashboards/Overview/Inventory/Item',\n        properties: {\n            model: PodModel,\n            mapper: getPodStatusGroups,\n        },\n    },\n    {\n        type: 'Dashboards/Overview/Inventory/Item',\n        properties: {\n            model: StorageClassModel,\n        },\n    },\n    {\n        type: 'Dashboards/Overview/Inventory/Item',\n        properties: {\n            model: PersistentVolumeClaimModel,\n            mapper: getPVCStatusGroups,\n            useAbbr: true,\n        },\n    },\n    {\n        type: 'Dashboards/Overview/Health/Operator',\n        properties: {\n            title: 'Cluster operators',\n            resources: [\n                {\n                    kind: referenceForModel(ClusterOperatorModel),\n                    isList: true,\n                    namespaced: false,\n                    prop: 'clusterOperators',\n                },\n            ],\n            getOperatorsWithStatuses: getClusterOperatorHealthStatus,\n            operatorRowLoader: () => import('./components/dashboards-page/OperatorStatus' /* webpackChunkName: \"console-app\" */).then(c => c.default),\n            viewAllLink: '/settings/cluster/clusteroperators',\n        },\n        flags: {\n            required: [FLAGS.CLUSTER_VERSION],\n        },\n    },\n    {\n        type: 'ReduxReducer',\n        properties: {\n            namespace: 'console',\n            reducer,\n        },\n    },\n];\nexport default plugin;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/plugin.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/plugin.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { CogsIcon } from '@patternfly/react-icons';\nimport { FLAGS } from '@console/shared/src/constants';\nimport { FLAG_DEVWORKSPACE } from './consts';\nimport { Plugin, Perspective, ModelFeatureFlag, ModelDefinition, DashboardsOverviewResourceActivity, DashboardsOverviewHealthURLSubsystem, DashboardsOverviewHealthPrometheusSubsystem, DashboardsOverviewInventoryItem, DashboardsOverviewHealthOperator, ReduxReducer } from '@console/plugin-sdk';\nimport { ClusterVersionModel, NodeModel, PodModel, StorageClassModel, PersistentVolumeClaimModel, ClusterOperatorModel } from '@console/internal/models';\nimport { referenceForModel, ClusterOperator } from '@console/internal/module/k8s';\nimport { getNodeStatusGroups, getPodStatusGroups, getPVCStatusGroups } from '@console/shared/src/components/dashboard/inventory-card/utils';\nimport { fetchK8sHealth, getK8sHealthState, getControlPlaneHealth, getClusterOperatorHealthStatus } from './components/dashboards-page/status';\nimport { API_SERVERS_UP, API_SERVER_REQUESTS_SUCCESS, CONTROLLER_MANAGERS_UP, SCHEDULERS_UP } from './queries';\nimport { getClusterUpdateTimestamp, isClusterUpdateActivity } from './components/dashboards-page/activity';\nimport reducer from './redux/reducer';\nimport * as models from './models';\n\ntype ConsumedExtensions = Perspective | ModelDefinition | ModelFeatureFlag | DashboardsOverviewResourceActivity | DashboardsOverviewHealthURLSubsystem<any> | DashboardsOverviewHealthPrometheusSubsystem | DashboardsOverviewInventoryItem | DashboardsOverviewHealthOperator<ClusterOperator> | ReduxReducer;\n\nconst plugin: Plugin<ConsumedExtensions> = [\n  {\n    type: 'ModelDefinition',\n    properties: {\n      models: _.values(models),\n    },\n  },\n  {\n    type: 'FeatureFlag/Model',\n    properties: {\n      model: models.WorkspaceModel,\n      flag: FLAG_DEVWORKSPACE,\n    },\n  },\n  {\n    type: 'Perspective',\n    properties: {\n      id: 'admin',\n      name: 'Administrator',\n      icon: <CogsIcon />,\n      default: true,\n      getLandingPageURL: flags => (flags[FLAGS.CAN_LIST_NS] ? '/dashboards' : '/k8s/cluster/projects'),\n      getK8sLandingPageURL: () => '/search',\n      getImportRedirectURL: project => `/k8s/cluster/projects/${project}/workloads`,\n    },\n  },\n  {\n    type: 'Dashboards/Overview/Activity/Resource',\n    properties: {\n      k8sResource: {\n        isList: true,\n        prop: 'clusterVersion',\n        kind: referenceForModel(ClusterVersionModel),\n        namespaced: false,\n      },\n      isActivity: isClusterUpdateActivity,\n      getTimestamp: getClusterUpdateTimestamp,\n      loader: () => import('./components/dashboards-page/ClusterUpdateActivity' /* webpackChunkName: \"console-app\" */).then(m => m.default),\n    },\n    flags: {\n      required: [FLAGS.CLUSTER_VERSION],\n    },\n  },\n  {\n    type: 'Dashboards/Overview/Health/URL',\n    properties: {\n      title: 'Cluster',\n      url: 'healthz',\n      fetch: fetchK8sHealth,\n      healthHandler: getK8sHealthState,\n      additionalResource: {\n        kind: referenceForModel(ClusterVersionModel),\n        namespaced: false,\n        name: 'version',\n        isList: false,\n        prop: 'cv',\n        optional: true,\n      },\n    },\n  },\n  {\n    type: 'Dashboards/Overview/Health/Prometheus',\n    properties: {\n      title: 'Control Plane',\n      queries: [API_SERVERS_UP, CONTROLLER_MANAGERS_UP, SCHEDULERS_UP, API_SERVER_REQUESTS_SUCCESS],\n      healthHandler: getControlPlaneHealth,\n      popupComponent: () => import('./components/dashboards-page/ControlPlaneStatus' /* webpackChunkName: \"console-app\" */).then(m => m.default),\n      popupTitle: 'Control Plane status',\n      disallowedProviders: ['IBMCloud'],\n    },\n  },\n  {\n    type: 'Dashboards/Overview/Inventory/Item',\n    properties: {\n      model: NodeModel,\n      mapper: getNodeStatusGroups,\n    },\n  },\n  {\n    type: 'Dashboards/Overview/Inventory/Item',\n    properties: {\n      model: PodModel,\n      mapper: getPodStatusGroups,\n    },\n  },\n  {\n    type: 'Dashboards/Overview/Inventory/Item',\n    properties: {\n      model: StorageClassModel,\n    },\n  },\n  {\n    type: 'Dashboards/Overview/Inventory/Item',\n    properties: {\n      model: PersistentVolumeClaimModel,\n      mapper: getPVCStatusGroups,\n      useAbbr: true,\n    },\n  },\n  {\n    type: 'Dashboards/Overview/Health/Operator',\n    properties: {\n      title: 'Cluster operators',\n      resources: [\n        {\n          kind: referenceForModel(ClusterOperatorModel),\n          isList: true,\n          namespaced: false,\n          prop: 'clusterOperators',\n        },\n      ],\n      getOperatorsWithStatuses: getClusterOperatorHealthStatus,\n      operatorRowLoader: () => import('./components/dashboards-page/OperatorStatus' /* webpackChunkName: \"console-app\" */).then(c => c.default),\n      viewAllLink: '/settings/cluster/clusteroperators',\n    },\n    flags: {\n      required: [FLAGS.CLUSTER_VERSION],\n    },\n  },\n  {\n    type: 'ReduxReducer',\n    properties: {\n      namespace: 'console',\n      reducer,\n    },\n  },\n];\n\nexport default plugin;\n"]}]}