{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/start-pipeline/submit-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/start-pipeline/submit-utils.ts","mtime":1616735742390},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport { k8sCreate } from '@console/internal/module/k8s';\nimport { PipelineRunModel } from '../../../../models';\nimport { createPipelineResource, createSecretResource, } from '../../pipeline-resource/pipelineResource-utils';\nimport { CREATE_PIPELINE_RESOURCE } from '../common/const';\nimport { getPipelineRunFromForm } from '../common/utils';\nexport const resourceSubmit = (resourceValues, namespace) => __awaiter(void 0, void 0, void 0, function* () {\n    const { data: { params, secrets, type }, } = resourceValues;\n    return secrets\n        ? createSecretResource(secrets, type, namespace).then((secretResp) => {\n            return createPipelineResource(params, type, namespace, secretResp);\n        })\n        : createPipelineResource(params, type, namespace);\n});\nexport const submitStartPipeline = (values, pipeline, labels) => __awaiter(void 0, void 0, void 0, function* () {\n    const { namespace, resources } = values;\n    const toCreateResources = resources.reduce((acc, resource, index) => {\n        return resource.selection === CREATE_PIPELINE_RESOURCE ? Object.assign(Object.assign({}, acc), { [index]: resource }) : acc;\n    }, {});\n    const createdResources = yield Promise.all(Object.values(toCreateResources).map((resource) => resourceSubmit(resource, namespace)));\n    let formValues = values;\n    if (createdResources.length > 0) {\n        const indexLookup = Object.keys(toCreateResources);\n        formValues = Object.assign(Object.assign({}, formValues), { resources: formValues.resources.map((resource, index) => {\n                if (toCreateResources[index]) {\n                    const creationIndex = indexLookup.indexOf(index.toString());\n                    return Object.assign(Object.assign({}, resource), { selection: createdResources[creationIndex].metadata.name });\n                }\n                return resource;\n            }) });\n    }\n    const pipelineRunResource = yield k8sCreate(PipelineRunModel, getPipelineRunFromForm(pipeline, formValues, labels));\n    return Promise.resolve(pipelineRunResource);\n});\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/start-pipeline/submit-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/start-pipeline/submit-utils.ts"],"names":[],"mappings":";;;;;;;;;AAAA,OAAO,EAAE,SAAS,EAAqB,MAAM,8BAA8B,CAAC;AAC5E,OAAO,EAAE,gBAAgB,EAAE,MAAM,oBAAoB,CAAC;AAEtD,OAAO,EACL,sBAAsB,EACtB,oBAAoB,GACrB,MAAM,gDAAgD,CAAC;AACxD,OAAO,EAAE,wBAAwB,EAAE,MAAM,iBAAiB,CAAC;AAE3D,OAAO,EAAE,sBAAsB,EAAE,MAAM,iBAAiB,CAAC;AAGzD,MAAM,CAAC,MAAM,cAAc,GAAG,CAC5B,cAAyC,EACzC,SAAiB,EACW,EAAE;IAC9B,MAAM,EACJ,IAAI,EAAE,EAAE,MAAM,EAAE,OAAO,EAAE,IAAI,EAAE,GAChC,GAAG,cAAc,CAAC;IAEnB,OAAO,OAAO;QACZ,CAAC,CAAC,oBAAoB,CAAC,OAAO,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC,IAAI,CAAC,CAAC,UAAU,EAAE,EAAE;YACjE,OAAO,sBAAsB,CAAC,MAAM,EAAE,IAAI,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;QACrE,CAAC,CAAC;QACJ,CAAC,CAAC,sBAAsB,CAAC,MAAM,EAAE,IAAI,EAAE,SAAS,CAAC,CAAC;AACtD,CAAC,CAAA,CAAC;AAEF,MAAM,CAAC,MAAM,mBAAmB,GAAG,CACjC,MAA+B,EAC/B,QAAkB,EAClB,MAAkC,EACZ,EAAE;IACxB,MAAM,EAAE,SAAS,EAAE,SAAS,EAAE,GAAG,MAAM,CAAC;IAExC,MAAM,iBAAiB,GAAmD,SAAS,CAAC,MAAM,CACxF,CAAC,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,EAAE;QACvB,OAAO,QAAQ,CAAC,SAAS,KAAK,wBAAwB,CAAC,CAAC,iCAAM,GAAG,KAAE,CAAC,KAAK,CAAC,EAAE,QAAQ,IAAG,CAAC,CAAC,GAAG,CAAC;IAC/F,CAAC,EACD,EAAE,CACH,CAAC;IACF,MAAM,gBAAgB,GAAG,MAAM,OAAO,CAAC,GAAG,CACxC,MAAM,CAAC,MAAM,CAAC,iBAAiB,CAAC,CAAC,GAAG,CAAC,CAAC,QAAQ,EAAE,EAAE,CAAC,cAAc,CAAC,QAAQ,EAAE,SAAS,CAAC,CAAC,CACxF,CAAC;IAEF,IAAI,UAAU,GAAG,MAAM,CAAC;IACxB,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE;QAC/B,MAAM,WAAW,GAAG,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC;QACnD,UAAU,mCACL,UAAU,KACb,SAAS,EAAE,UAAU,CAAC,SAAS,CAAC,GAAG,CACjC,CAAC,QAAQ,EAAE,KAAK,EAA6B,EAAE;gBAC7C,IAAI,iBAAiB,CAAC,KAAK,CAAC,EAAE;oBAC5B,MAAM,aAAa,GAAG,WAAW,CAAC,OAAO,CAAC,KAAK,CAAC,QAAQ,EAAE,CAAC,CAAC;oBAC5D,uCACK,QAAQ,KACX,SAAS,EAAE,gBAAgB,CAAC,aAAa,CAAC,CAAC,QAAQ,CAAC,IAAI,IACxD;iBACH;gBACD,OAAO,QAAQ,CAAC;YAClB,CAAC,CACF,GACF,CAAC;KACH;IAED,MAAM,mBAAmB,GAAgB,MAAM,SAAS,CACtD,gBAAgB,EAChB,sBAAsB,CAAC,QAAQ,EAAE,UAAU,EAAE,MAAM,CAAC,CACrD,CAAC;IAEF,OAAO,OAAO,CAAC,OAAO,CAAC,mBAAmB,CAAC,CAAC;AAC9C,CAAC,CAAA,CAAC","sourcesContent":["import { k8sCreate, K8sResourceCommon } from '@console/internal/module/k8s';\nimport { PipelineRunModel } from '../../../../models';\nimport { Pipeline, PipelineRun } from '../../../../utils/pipeline-augment';\nimport {\n  createPipelineResource,\n  createSecretResource,\n} from '../../pipeline-resource/pipelineResource-utils';\nimport { CREATE_PIPELINE_RESOURCE } from '../common/const';\nimport { PipelineModalFormResource } from '../common/types';\nimport { getPipelineRunFromForm } from '../common/utils';\nimport { StartPipelineFormValues } from './types';\n\nexport const resourceSubmit = async (\n  resourceValues: PipelineModalFormResource,\n  namespace: string,\n): Promise<K8sResourceCommon> => {\n  const {\n    data: { params, secrets, type },\n  } = resourceValues;\n\n  return secrets\n    ? createSecretResource(secrets, type, namespace).then((secretResp) => {\n        return createPipelineResource(params, type, namespace, secretResp);\n      })\n    : createPipelineResource(params, type, namespace);\n};\n\nexport const submitStartPipeline = async (\n  values: StartPipelineFormValues,\n  pipeline: Pipeline,\n  labels?: { [key: string]: string },\n): Promise<PipelineRun> => {\n  const { namespace, resources } = values;\n\n  const toCreateResources: { [index: string]: PipelineModalFormResource } = resources.reduce(\n    (acc, resource, index) => {\n      return resource.selection === CREATE_PIPELINE_RESOURCE ? { ...acc, [index]: resource } : acc;\n    },\n    {},\n  );\n  const createdResources = await Promise.all(\n    Object.values(toCreateResources).map((resource) => resourceSubmit(resource, namespace)),\n  );\n\n  let formValues = values;\n  if (createdResources.length > 0) {\n    const indexLookup = Object.keys(toCreateResources);\n    formValues = {\n      ...formValues,\n      resources: formValues.resources.map(\n        (resource, index): PipelineModalFormResource => {\n          if (toCreateResources[index]) {\n            const creationIndex = indexLookup.indexOf(index.toString());\n            return {\n              ...resource,\n              selection: createdResources[creationIndex].metadata.name,\n            };\n          }\n          return resource;\n        },\n      ),\n    };\n  }\n\n  const pipelineRunResource: PipelineRun = await k8sCreate(\n    PipelineRunModel,\n    getPipelineRunFromForm(pipeline, formValues, labels),\n  );\n\n  return Promise.resolve(pipelineRunResource);\n};\n"]}]}