{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/helm/helm-data-transformer.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/helm/helm-data-transformer.ts","mtime":1617154808370},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { SecretModel } from '@console/internal/models';\nimport { getImageForIconClass } from '@console/internal/components/catalog/catalog-item-icon';\nimport { TYPE_HELM_RELEASE, TYPE_HELM_WORKLOAD } from './components/const';\nimport { getHelmReleaseKey } from '../topology-utils';\nimport { dataObjectFromModel, addToTopologyDataModel, createInstanceForResource, createTopologyNodeData, getTopologyEdgeItems, getTopologyGroupItems, getTopologyNodeItem, mergeGroup, mergeGroups } from '../data-transforms/transform-utils';\nexport const isHelmReleaseNode = (obj, helmResourcesMap) => {\n    if (helmResourcesMap) {\n        return helmResourcesMap.hasOwnProperty(getHelmReleaseKey(obj));\n    }\n    return false;\n};\nexport const getTopologyHelmReleaseGroupItem = (obj, helmResourcesMap, secrets) => {\n    const resourceKindName = getHelmReleaseKey(obj);\n    const helmResources = helmResourcesMap[resourceKindName];\n    const releaseName = helmResources === null || helmResources === void 0 ? void 0 : helmResources.releaseName;\n    const releaseVersion = helmResources === null || helmResources === void 0 ? void 0 : helmResources.releaseVersion;\n    const releaseNotes = helmResources === null || helmResources === void 0 ? void 0 : helmResources.releaseNotes;\n    const uid = _.get(obj, ['metadata', 'uid'], null);\n    const returnData = { groups: [], dataModel: {} };\n    if (!releaseName) {\n        return returnData;\n    }\n    const secret = secrets.find(nextSecret => {\n        var _a;\n        const { labels } = nextSecret.metadata;\n        return ((_a = labels === null || labels === void 0 ? void 0 : labels.name) === null || _a === void 0 ? void 0 : _a.includes(releaseName)) && (labels === null || labels === void 0 ? void 0 : labels.version) === releaseVersion.toString();\n    });\n    if (secret) {\n        const appGroup = getTopologyGroupItems(secret);\n        if (appGroup) {\n            mergeGroup(appGroup, returnData.groups);\n        }\n    }\n    const helmGroup = {\n        id: secret ? secret.metadata.uid : `${TYPE_HELM_RELEASE}:${releaseName}`,\n        type: TYPE_HELM_RELEASE,\n        name: releaseName,\n        nodes: [uid],\n    };\n    const dataModel = dataObjectFromModel(helmGroup);\n    const { kind, apiVersion } = SecretModel;\n    dataModel.resources = {\n        obj: secret ? Object.assign(Object.assign({}, secret), { kind, apiVersion }) : null,\n        buildConfigs: null,\n        services: null,\n        routes: null,\n    };\n    dataModel.data = {\n        chartIcon: helmResources === null || helmResources === void 0 ? void 0 : helmResources.chartIcon,\n        manifestResources: (helmResources === null || helmResources === void 0 ? void 0 : helmResources.manifestResources) || [],\n        releaseNotes,\n    };\n    returnData.dataModel[helmGroup.id] = dataModel;\n    returnData.groups.push(helmGroup);\n    return returnData;\n};\nexport const getHelmTopologyDataModel = (resources, allResources, installedOperators, utils, transformBy, serviceBindingRequests, helmResourcesMap) => {\n    const helmDataModel = {\n        graph: { nodes: [], edges: [], groups: [] },\n        topology: {},\n    };\n    const helmResources = {};\n    const transformResourceData = createInstanceForResource(resources, utils, installedOperators);\n    const secrets = _.get(resources, 'secrets.data', []);\n    _.forEach(transformBy, key => {\n        helmResources[key] = [];\n        if (!_.isEmpty(resources[key].data)) {\n            const typedDataModel = {\n                graph: { nodes: [], edges: [], groups: [] },\n                topology: {},\n            };\n            transformResourceData[key](resources[key].data).forEach(item => {\n                const { obj: deploymentConfig } = item;\n                const uid = _.get(deploymentConfig, ['metadata', 'uid']);\n                if (isHelmReleaseNode(deploymentConfig, helmResourcesMap)) {\n                    helmResources[key].push(uid);\n                    typedDataModel.topology[uid] = createTopologyNodeData(item, TYPE_HELM_WORKLOAD, getImageForIconClass(`icon-openshift`));\n                    typedDataModel.graph.nodes.push(getTopologyNodeItem(deploymentConfig, TYPE_HELM_WORKLOAD));\n                    typedDataModel.graph.edges.push(...getTopologyEdgeItems(deploymentConfig, allResources, serviceBindingRequests));\n                    const { groups, dataModel } = getTopologyHelmReleaseGroupItem(deploymentConfig, helmResourcesMap, secrets);\n                    mergeGroups(groups, typedDataModel.graph.groups);\n                    typedDataModel.topology = _.merge(typedDataModel.topology, dataModel);\n                }\n            });\n            addToTopologyDataModel(typedDataModel, helmDataModel);\n        }\n    });\n    _.forEach(transformBy, key => {\n        if (!_.isEmpty(resources[key].data) && !_.isEmpty(helmResources[key])) {\n            resources[key].data = resources[key].data.filter(resource => !helmResources[key].find(uid => uid === resource.metadata.uid));\n        }\n    });\n    return helmDataModel;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/helm/helm-data-transformer.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/helm/helm-data-transformer.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { SecretModel } from '@console/internal/models';\nimport { getImageForIconClass } from '@console/internal/components/catalog/catalog-item-icon';\nimport { TopologyDataModel, TopologyDataResources, TopologyDataMap, Group } from '../topology-types';\nimport { TYPE_HELM_RELEASE, TYPE_HELM_WORKLOAD } from './components/const';\nimport { HelmReleaseResourcesMap } from '../../helm/helm-types';\nimport { getHelmReleaseKey } from '../topology-utils';\nimport { dataObjectFromModel, addToTopologyDataModel, createInstanceForResource, createTopologyNodeData, getTopologyEdgeItems, getTopologyGroupItems, getTopologyNodeItem, mergeGroup, mergeGroups } from '../data-transforms/transform-utils';\n\nexport const isHelmReleaseNode = (obj: K8sResourceKind, helmResourcesMap: HelmReleaseResourcesMap): boolean => {\n  if (helmResourcesMap) {\n    return helmResourcesMap.hasOwnProperty(getHelmReleaseKey(obj));\n  }\n  return false;\n};\n\nexport const getTopologyHelmReleaseGroupItem = (obj: K8sResourceKind, helmResourcesMap: HelmReleaseResourcesMap, secrets: K8sResourceKind[]): { groups: Group[]; dataModel: TopologyDataMap } => {\n  const resourceKindName = getHelmReleaseKey(obj);\n  const helmResources = helmResourcesMap[resourceKindName];\n  const releaseName = helmResources?.releaseName;\n  const releaseVersion = helmResources?.releaseVersion;\n  const releaseNotes = helmResources?.releaseNotes;\n  const uid = _.get(obj, ['metadata', 'uid'], null);\n  const returnData = { groups: [], dataModel: {} };\n\n  if (!releaseName) {\n    return returnData;\n  }\n\n  const secret = secrets.find(nextSecret => {\n    const { labels } = nextSecret.metadata;\n    return labels?.name?.includes(releaseName) && labels?.version === releaseVersion.toString();\n  });\n\n  if (secret) {\n    const appGroup = getTopologyGroupItems(secret);\n    if (appGroup) {\n      mergeGroup(appGroup, returnData.groups);\n    }\n  }\n\n  const helmGroup = {\n    id: secret ? secret.metadata.uid : `${TYPE_HELM_RELEASE}:${releaseName}`,\n    type: TYPE_HELM_RELEASE,\n    name: releaseName,\n    nodes: [uid],\n  };\n\n  const dataModel = dataObjectFromModel(helmGroup);\n  const { kind, apiVersion } = SecretModel;\n  dataModel.resources = {\n    obj: secret ? { ...secret, kind, apiVersion } : null,\n    buildConfigs: null,\n    services: null,\n    routes: null,\n  };\n  dataModel.data = {\n    chartIcon: helmResources?.chartIcon,\n    manifestResources: helmResources?.manifestResources || [],\n    releaseNotes,\n  };\n  returnData.dataModel[helmGroup.id] = dataModel;\n  returnData.groups.push(helmGroup);\n\n  return returnData;\n};\n\nexport const getHelmTopologyDataModel = (resources: TopologyDataResources, allResources: K8sResourceKind[], installedOperators, utils: Function[], transformBy: string[], serviceBindingRequests: K8sResourceKind[], helmResourcesMap?: HelmReleaseResourcesMap): TopologyDataModel => {\n  const helmDataModel: TopologyDataModel = {\n    graph: { nodes: [], edges: [], groups: [] },\n    topology: {},\n  };\n  const helmResources = {};\n  const transformResourceData = createInstanceForResource(resources, utils, installedOperators);\n\n  const secrets = _.get(resources, 'secrets.data', []);\n  _.forEach(transformBy, key => {\n    helmResources[key] = [];\n    if (!_.isEmpty(resources[key].data)) {\n      const typedDataModel: TopologyDataModel = {\n        graph: { nodes: [], edges: [], groups: [] },\n        topology: {},\n      };\n\n      transformResourceData[key](resources[key].data).forEach(item => {\n        const { obj: deploymentConfig } = item;\n        const uid = _.get(deploymentConfig, ['metadata', 'uid']);\n        if (isHelmReleaseNode(deploymentConfig, helmResourcesMap)) {\n          helmResources[key].push(uid);\n          typedDataModel.topology[uid] = createTopologyNodeData(item, TYPE_HELM_WORKLOAD, getImageForIconClass(`icon-openshift`));\n          typedDataModel.graph.nodes.push(getTopologyNodeItem(deploymentConfig, TYPE_HELM_WORKLOAD));\n          typedDataModel.graph.edges.push(...getTopologyEdgeItems(deploymentConfig, allResources, serviceBindingRequests));\n          const { groups, dataModel } = getTopologyHelmReleaseGroupItem(deploymentConfig, helmResourcesMap, secrets);\n          mergeGroups(groups, typedDataModel.graph.groups);\n          typedDataModel.topology = _.merge(typedDataModel.topology, dataModel);\n        }\n      });\n      addToTopologyDataModel(typedDataModel, helmDataModel);\n    }\n  });\n\n  _.forEach(transformBy, key => {\n    if (!_.isEmpty(resources[key].data) && !_.isEmpty(helmResources[key])) {\n      resources[key].data = resources[key].data.filter(resource => !helmResources[key].find(uid => uid === resource.metadata.uid));\n    }\n  });\n  return helmDataModel;\n};\n"]}]}