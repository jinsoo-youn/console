{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/status/Status.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/status/Status.tsx","mtime":1616735742370},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { ClipboardListIcon, HourglassStartIcon, HourglassHalfIcon, SyncAltIcon, BanIcon, ExclamationTriangleIcon, UnknownIcon } from '@patternfly/react-icons';\nimport { DASH } from '../../constants';\nimport { YellowExclamationTriangleIcon } from './icons';\nimport StatusIconAndText from './StatusIconAndText';\nimport { ErrorStatus, InfoStatus, ProgressStatus, SuccessStatus } from './statuses';\nexport const Status = ({ status, title, children, iconOnly, noTooltip, className }) => {\n    const statusProps = { title: title || status, iconOnly, noTooltip, className };\n    switch (status) {\n        case 'New':\n            return React.createElement(StatusIconAndText, Object.assign({}, statusProps, { icon: React.createElement(HourglassStartIcon, null) }));\n        case 'Pending':\n        case 'Waiting':\n            return React.createElement(StatusIconAndText, Object.assign({}, statusProps, { icon: React.createElement(HourglassHalfIcon, null) }));\n        case 'Planning':\n            return React.createElement(StatusIconAndText, Object.assign({}, statusProps, { icon: React.createElement(ClipboardListIcon, null) }));\n        case 'ContainerCreating':\n        case 'Creating':\n        case 'UpgradePending':\n            return React.createElement(ProgressStatus, Object.assign({}, statusProps));\n        case 'In Progress':\n        case 'Installing':\n        case 'InstallReady':\n        case 'Replacing':\n        case 'Running':\n        case 'Signing':\n        case 'Updating':\n        case 'Upgrading':\n            return React.createElement(StatusIconAndText, Object.assign({}, statusProps, { icon: React.createElement(SyncAltIcon, null) }));\n        case 'Cancelled':\n        case 'Deleting':\n        case 'Expired':\n        case 'Not Ready':\n        case 'NotReady':\n        case 'Terminating':\n        case 'Deleted':\n            return React.createElement(StatusIconAndText, Object.assign({}, statusProps, { icon: React.createElement(BanIcon, null) }));\n        case 'Warning':\n            return React.createElement(StatusIconAndText, Object.assign({}, statusProps, { icon: React.createElement(ExclamationTriangleIcon, null) }));\n        case 'RequiresApproval':\n            return React.createElement(StatusIconAndText, Object.assign({}, statusProps, { icon: React.createElement(YellowExclamationTriangleIcon, null) }));\n        case 'ContainerCannotRun':\n        case 'CrashLoopBackOff':\n        case 'Critical':\n        case 'ErrImagePull':\n        case 'Error':\n        case 'Failed':\n        case 'Fail':\n        case 'ImagePullBackOff':\n        case 'InstallCheckFailed':\n        case 'Lost':\n        case 'Rejected':\n        case 'UpgradeFailed':\n            return React.createElement(ErrorStatus, Object.assign({}, statusProps), children);\n        case 'Accepted':\n        case 'Success':\n        case 'Active':\n        case 'Bound':\n        case 'Complete':\n        case 'Completed':\n        case 'Created':\n        case 'Enabled':\n        case 'Succeeded':\n        case 'Ready':\n        case 'Up to date':\n        case 'Provisioned as node':\n        case 'Approved':\n        case 'Success':\n            return React.createElement(SuccessStatus, Object.assign({}, statusProps));\n        case 'Info':\n            return React.createElement(InfoStatus, Object.assign({}, statusProps), children);\n        case 'Unknown':\n            return React.createElement(StatusIconAndText, Object.assign({}, statusProps, { icon: React.createElement(UnknownIcon, null) }));\n        default:\n            return React.createElement(React.Fragment, null, status || DASH);\n    }\n};\nexport const StatusIcon = ({ status }) => React.createElement(Status, { status: status, iconOnly: true });\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/status/Status.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/status/Status.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { ClipboardListIcon, HourglassStartIcon, HourglassHalfIcon, SyncAltIcon, BanIcon, ExclamationTriangleIcon, UnknownIcon } from '@patternfly/react-icons';\nimport { DASH } from '../../constants';\nimport { YellowExclamationTriangleIcon } from './icons';\nimport StatusIconAndText from './StatusIconAndText';\nimport { ErrorStatus, InfoStatus, ProgressStatus, SuccessStatus } from './statuses';\nimport { StatusComponentProps } from './types';\n\nexport const Status: React.FC<StatusProps> = ({ status, title, children, iconOnly, noTooltip, className }) => {\n  const statusProps = { title: title || status, iconOnly, noTooltip, className };\n  switch (status) {\n    case 'New':\n      return <StatusIconAndText {...statusProps} icon={<HourglassStartIcon />} />;\n\n    case 'Pending':\n    case 'Waiting':\n      return <StatusIconAndText {...statusProps} icon={<HourglassHalfIcon />} />;\n\n    case 'Planning':\n      return <StatusIconAndText {...statusProps} icon={<ClipboardListIcon />} />;\n\n    case 'ContainerCreating':\n    case 'Creating':\n    case 'UpgradePending':\n      return <ProgressStatus {...statusProps} />;\n\n    case 'In Progress':\n    case 'Installing':\n    case 'InstallReady':\n    case 'Replacing':\n    case 'Running':\n    case 'Signing':\n    case 'Updating':\n    case 'Upgrading':\n      return <StatusIconAndText {...statusProps} icon={<SyncAltIcon />} />;\n\n    case 'Cancelled':\n    case 'Deleting':\n    case 'Expired':\n    case 'Not Ready':\n    case 'NotReady':\n    case 'Terminating':\n    case 'Deleted':\n      return <StatusIconAndText {...statusProps} icon={<BanIcon />} />;\n\n    case 'Warning':\n      return <StatusIconAndText {...statusProps} icon={<ExclamationTriangleIcon />} />;\n\n    case 'RequiresApproval':\n      return <StatusIconAndText {...statusProps} icon={<YellowExclamationTriangleIcon />} />;\n\n    case 'ContainerCannotRun':\n    case 'CrashLoopBackOff':\n    case 'Critical':\n    case 'ErrImagePull':\n    case 'Error':\n    case 'Failed':\n    case 'Fail':\n    case 'ImagePullBackOff':\n    case 'InstallCheckFailed':\n    case 'Lost':\n    case 'Rejected':\n    case 'UpgradeFailed':\n      return <ErrorStatus {...statusProps}>{children}</ErrorStatus>;\n\n    case 'Accepted':\n    case 'Success':\n    case 'Active':\n    case 'Bound':\n    case 'Complete':\n    case 'Completed':\n    case 'Created':\n    case 'Enabled':\n    case 'Succeeded':\n    case 'Ready':\n    case 'Up to date':\n    case 'Provisioned as node':\n    case 'Approved':\n    case 'Success':\n      return <SuccessStatus {...statusProps} />;\n\n    case 'Info':\n      return <InfoStatus {...statusProps}>{children}</InfoStatus>;\n\n    case 'Unknown':\n      return <StatusIconAndText {...statusProps} icon={<UnknownIcon />} />;\n\n    default:\n      return <>{status || DASH}</>;\n  }\n};\n\nexport const StatusIcon: React.FC<StatusIconProps> = ({ status }) => <Status status={status} iconOnly />;\n\ntype StatusIconProps = {\n  status: string;\n};\n\ntype StatusProps = StatusComponentProps & {\n  status: string;\n};\n"]}]}