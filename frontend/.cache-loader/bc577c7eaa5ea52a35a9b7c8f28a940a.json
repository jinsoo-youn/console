{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/MultiParametersField.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/MultiParametersField.tsx","mtime":1616735742390},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { useState } from 'react';\nimport * as _ from 'lodash';\nimport { FieldArray, useFormikContext } from 'formik';\nimport { FormGroup } from '@patternfly/react-core';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { InputField, DropdownField } from '@console/shared';\nimport { Button } from '@patternfly/react-core';\nimport { MinusCircleIcon, PlusCircleIcon } from '@patternfly/react-icons';\nexport const MultiParametersField = ({ name }) => {\n    const { values } = useFormikContext();\n    const fieldValue = _.get(values, name, []);\n    const defaultItem = {\n        name: '',\n        description: '',\n        type: '',\n        default: '',\n    };\n    return (React.createElement(FieldArray, { name: name, render: ({ push, remove }) => {\n            return (React.createElement(FormGroup, { fieldId: `form-multi-column-input-${name.replace(/\\./g, '-')}-field` },\n                fieldValue.length > 0 &&\n                    fieldValue.map((value, index) => (React.createElement(\"div\", { className: \"parameter-input-field-wrapper\", key: `${name}-${index}-inputFieldWrapper` },\n                        React.createElement(\"div\", { className: \"remove-button-wrapper\" },\n                            React.createElement(Button, { className: \"pf-m-link remove-button\", \"data-test-id\": \"pairs-list__delete-btn\", onClick: () => {\n                                    remove(index);\n                                }, type: \"button\", variant: \"link\" },\n                                React.createElement(MinusCircleIcon, { \"data-test-id\": \"pairs-list__delete-icon\", className: \"pairs-list__side-btn pairs-list__delete-ico co-icon-space-r\" }),\n                                \"Remove Pipeline Parameter\")),\n                        React.createElement(InputSection, { label: \"Name\", customClass: \"short-margin-top\", isRequired: true },\n                            React.createElement(InputField, { name: `${name}.${index}.name`, type: TextInputTypes.text, placeholder: \"Name\" })),\n                        React.createElement(InputSection, { label: \"Description\" },\n                            React.createElement(InputField, { name: `${name}.${index}.description`, type: TextInputTypes.text, placeholder: \"Description\" })),\n                        React.createElement(InputSection, { label: \"Type\" },\n                            React.createElement(DropdownValueComponent, { nameValue: `${name}.${index}` }))))),\n                React.createElement(\"div\", { className: \"add-button-wrapper\" },\n                    React.createElement(Button, { className: \"pf-m-link--align-left\", \"data-test-id\": \"pairs-list__add-btn\", onClick: () => {\n                            push(defaultItem);\n                        }, type: \"button\", variant: \"link\" },\n                        React.createElement(PlusCircleIcon, { \"data-test-id\": \"pairs-list__add-icon\", className: \"co-icon-space-r\" }),\n                        \"Add Pipeline Parameter\"))));\n        } }));\n};\nconst DropdownValueComponent = props => {\n    const { nameValue } = props;\n    const { values, setFieldValue } = useFormikContext();\n    const [valueType, setValueType] = useState('');\n    const renderValueField = (valueType, name) => {\n        if (valueType === '') {\n            valueType = _.get(values, `${name}.type`);\n        }\n        switch (valueType) {\n            case 'string': {\n                return (React.createElement(InputSection, { label: \"Default Value\", customClass: \"input-section-without-margin-left\" },\n                    React.createElement(InputField, { name: `${name}.default`, type: TextInputTypes.text, placeholder: \"Default Value\" })));\n            }\n            case 'array': {\n                let arrayFieldValue = _.get(values, `${name}.default`, []);\n                arrayFieldValue = arrayFieldValue === '' ? [] : arrayFieldValue;\n                return (React.createElement(InputSection, { label: \"Default Value\" },\n                    React.createElement(FieldArray, { name: `${name}.default`, render: ({ push, remove }) => {\n                            return (React.createElement(FormGroup, { fieldId: `form-multi-column-input-${name.replace(/\\./g, '-')}-field` },\n                                arrayFieldValue.length > 0 &&\n                                    arrayFieldValue.map((value, index) => (React.createElement(\"div\", { key: `${name}-default-${index}-inputWrapper`, id: \"parameter-array-row-input-wrapper\" },\n                                        React.createElement(InputField, { className: \"input-field\", name: `${name}.default.${index}`, type: TextInputTypes.text, placeholder: \"Default Value\" }),\n                                        React.createElement(Button, { className: \"pf-m-link remove-button\", \"data-test-id\": \"pairs-list__delete-btn\", onClick: () => {\n                                                remove(index);\n                                            }, type: \"button\", variant: \"link\" },\n                                            React.createElement(MinusCircleIcon, { \"data-test-id\": \"pairs-list__delete-icon\", className: \"pairs-list__side-btn pairs-list__delete-ico delete-button\" }))))),\n                                React.createElement(Button, { className: \"pf-m-link--align-left space-left\", \"data-test-id\": \"pairs-list__add-btn\", onClick: () => {\n                                        push('');\n                                    }, type: \"button\", variant: \"link\" },\n                                    React.createElement(PlusCircleIcon, { \"data-test-id\": \"pairs-list__add-icon\", className: \"co-icon-space-r\" }),\n                                    \"Add Default Value\")));\n                        } })));\n            }\n            default: {\n                return null;\n            }\n        }\n    };\n    return (React.createElement(\"div\", null,\n        React.createElement(DropdownField, { fullWidth: true, items: pipelineParameterTypeSelections, name: `${nameValue}.type`, onChange: data => {\n                switch (data) {\n                    case 'string': {\n                        setFieldValue(`${nameValue}.default`, '');\n                        break;\n                    }\n                    case 'array': {\n                        setFieldValue(`${nameValue}.default`, []);\n                        break;\n                    }\n                    default: {\n                    }\n                }\n                setValueType(data);\n            } }),\n        renderValueField(valueType, nameValue)));\n};\nconst InputSection = ({ label, isRequired, children, customClass = '' }) => {\n    return (React.createElement(\"div\", { className: 'form-group parameter-input-section-wrapper ' + customClass },\n        React.createElement(\"label\", { className: 'control-label ' + (isRequired ? 'co-required' : '') }, label),\n        React.createElement(\"div\", { className: \"row\" }, children)));\n};\nexport const pipelineParameterTypeSelections = {\n    '': 'Select resource type',\n    string: 'String',\n    array: 'Array',\n};\nexport default MultiParametersField;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/MultiParametersField.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/MultiParametersField.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { useState } from 'react';\nimport * as _ from 'lodash';\nimport { FieldArray, useFormikContext, FormikValues } from 'formik';\nimport { FormGroup } from '@patternfly/react-core';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { InputField, DropdownField } from '@console/shared';\nimport { Button } from '@patternfly/react-core';\nimport { MinusCircleIcon, PlusCircleIcon } from '@patternfly/react-icons';\nexport const MultiParametersField: React.FC<MultiParametersFieldProps> = ({ name }) => {\n  const { values } = useFormikContext<FormikValues>();\n  const fieldValue = _.get(values, name, []);\n  const defaultItem = {\n    name: '',\n    description: '',\n    type: '',\n    default: '',\n  };\n\n  return (\n    <FieldArray\n      name={name}\n      render={({ push, remove }) => {\n        return (\n          <FormGroup fieldId={`form-multi-column-input-${name.replace(/\\./g, '-')}-field`}>\n            {fieldValue.length > 0 &&\n              fieldValue.map((value, index) => (\n                <div className=\"parameter-input-field-wrapper\" key={`${name}-${index}-inputFieldWrapper`}>\n                  <div className=\"remove-button-wrapper\">\n                    <Button\n                      className=\"pf-m-link remove-button\"\n                      data-test-id=\"pairs-list__delete-btn\"\n                      onClick={() => {\n                        remove(index);\n                      }}\n                      type=\"button\"\n                      variant=\"link\"\n                    >\n                      <MinusCircleIcon data-test-id=\"pairs-list__delete-icon\" className=\"pairs-list__side-btn pairs-list__delete-ico co-icon-space-r\" />\n                      Remove Pipeline Parameter\n                    </Button>\n                  </div>\n                  <InputSection label=\"Name\" customClass=\"short-margin-top\" isRequired={true}>\n                    <InputField name={`${name}.${index}.name`} type={TextInputTypes.text} placeholder=\"Name\" />\n                  </InputSection>\n                  <InputSection label=\"Description\">\n                    <InputField name={`${name}.${index}.description`} type={TextInputTypes.text} placeholder=\"Description\" />\n                  </InputSection>\n                  <InputSection label=\"Type\">\n                    <DropdownValueComponent nameValue={`${name}.${index}`}></DropdownValueComponent>\n                  </InputSection>\n                </div>\n              ))}\n            <div className=\"add-button-wrapper\">\n              <Button\n                className=\"pf-m-link--align-left\"\n                data-test-id=\"pairs-list__add-btn\"\n                onClick={() => {\n                  push(defaultItem);\n                }}\n                type=\"button\"\n                variant=\"link\"\n              >\n                <PlusCircleIcon data-test-id=\"pairs-list__add-icon\" className=\"co-icon-space-r\" />\n                Add Pipeline Parameter\n              </Button>\n            </div>\n          </FormGroup>\n        );\n      }}\n    />\n  );\n};\nconst DropdownValueComponent: React.FC<DropdownValueComponentProps> = props => {\n  const { nameValue } = props;\n  const { values, setFieldValue } = useFormikContext<FormikValues>();\n  const [valueType, setValueType] = useState('');\n  const renderValueField = (valueType, name) => {\n    if (valueType === '') {\n      valueType = _.get(values, `${name}.type`);\n    }\n    switch (valueType) {\n      case 'string': {\n        return (\n          <InputSection label=\"Default Value\" customClass=\"input-section-without-margin-left\">\n            <InputField name={`${name}.default`} type={TextInputTypes.text} placeholder=\"Default Value\" />\n          </InputSection>\n        );\n      }\n      case 'array': {\n        let arrayFieldValue = _.get(values, `${name}.default`, []);\n        arrayFieldValue = arrayFieldValue === '' ? [] : arrayFieldValue;\n        return (\n          <InputSection label=\"Default Value\">\n            <FieldArray\n              name={`${name}.default`}\n              render={({ push, remove }) => {\n                return (\n                  <FormGroup fieldId={`form-multi-column-input-${name.replace(/\\./g, '-')}-field`}>\n                    {arrayFieldValue.length > 0 &&\n                      arrayFieldValue.map((value, index) => (\n                        <div key={`${name}-default-${index}-inputWrapper`} id=\"parameter-array-row-input-wrapper\">\n                          <InputField className=\"input-field\" name={`${name}.default.${index}`} type={TextInputTypes.text} placeholder=\"Default Value\" />\n                          <Button\n                            className=\"pf-m-link remove-button\"\n                            data-test-id=\"pairs-list__delete-btn\"\n                            onClick={() => {\n                              remove(index);\n                            }}\n                            type=\"button\"\n                            variant=\"link\"\n                          >\n                            <MinusCircleIcon data-test-id=\"pairs-list__delete-icon\" className=\"pairs-list__side-btn pairs-list__delete-ico delete-button\" />\n                          </Button>\n                        </div>\n                      ))}\n                    <Button\n                      className=\"pf-m-link--align-left space-left\"\n                      data-test-id=\"pairs-list__add-btn\"\n                      onClick={() => {\n                        push('');\n                      }}\n                      type=\"button\"\n                      variant=\"link\"\n                    >\n                      <PlusCircleIcon data-test-id=\"pairs-list__add-icon\" className=\"co-icon-space-r\" />\n                      Add Default Value\n                    </Button>\n                  </FormGroup>\n                );\n              }}\n            />\n          </InputSection>\n        );\n      }\n      default: {\n        return null;\n      }\n    }\n  };\n\n  return (\n    <div>\n      <DropdownField\n        fullWidth\n        items={pipelineParameterTypeSelections}\n        name={`${nameValue}.type`}\n        onChange={data => {\n          switch (data) {\n            case 'string': {\n              setFieldValue(`${nameValue}.default`, '');\n              break;\n            }\n            case 'array': {\n              setFieldValue(`${nameValue}.default`, []);\n              break;\n            }\n            default: {\n            }\n          }\n          setValueType(data);\n        }}\n      />\n      {renderValueField(valueType, nameValue)}\n    </div>\n  );\n};\nconst InputSection: React.FC<InputSectionProps> = ({ label, isRequired, children, customClass = '' }) => {\n  return (\n    <div className={'form-group parameter-input-section-wrapper ' + customClass}>\n      <label className={'control-label ' + (isRequired ? 'co-required' : '')}>{label}</label>\n      <div className=\"row\">{children}</div>\n    </div>\n  );\n};\n\nexport const pipelineParameterTypeSelections = {\n  '': 'Select resource type',\n  string: 'String',\n  array: 'Array',\n};\ntype DropdownValueComponentProps = {\n  nameValue: string;\n};\ntype InputSectionProps = {\n  label?: string;\n  isRequired?: boolean;\n  children?: React.ReactNode;\n  customClass?: string;\n};\ntype MultiParametersFieldProps = {\n  name: string;\n  children?: React.ReactNode;\n  addLabel?: string;\n  defaultItem?: object;\n};\nexport default MultiParametersField;\n"]}]}