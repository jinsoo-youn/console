{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/reducers/dashboards.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/reducers/dashboards.ts","mtime":1616735742510},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { ActionType } from '../actions/dashboards';\nimport { Map as ImmutableMap, fromJS } from 'immutable';\nexport var RESULTS_TYPE;\n(function (RESULTS_TYPE) {\n    RESULTS_TYPE[\"PROMETHEUS\"] = \"PROMETHEUS\";\n    RESULTS_TYPE[\"URL\"] = \"URL\";\n    RESULTS_TYPE[\"ALERTS\"] = \"ALERTS\";\n})(RESULTS_TYPE || (RESULTS_TYPE = {}));\nexport const defaults = {\n    [RESULTS_TYPE.PROMETHEUS]: fromJS({}),\n    [RESULTS_TYPE.URL]: fromJS({}),\n};\nexport const isWatchActive = (state, type, key) => state.getIn([type, key, 'active']) > 0 || state.getIn([type, key, 'inFlight']);\nexport const dashboardsReducer = (state, action) => {\n    if (!state) {\n        return ImmutableMap(defaults);\n    }\n    switch (action.type) {\n        case ActionType.ActivateWatch: {\n            const activePath = [action.payload.type, action.payload.key, 'active'];\n            const active = state.hasIn(activePath) ? state.getIn(activePath) : 0;\n            return state.setIn(activePath, active + 1);\n        }\n        case ActionType.UpdateWatchTimeout:\n            return state.setIn([action.payload.type, action.payload.key, 'timeout'], action.payload.timeout);\n        case ActionType.UpdateWatchInFlight:\n            return state.setIn([action.payload.type, action.payload.key, 'inFlight'], action.payload.inFlight);\n        case ActionType.StopWatch: {\n            const active = state.getIn([action.payload.type, action.payload.key, 'active']);\n            const newState = state.setIn([action.payload.type, action.payload.key, 'active'], active - 1);\n            if (active === 1) {\n                clearTimeout(state.getIn([action.payload.type, action.payload.key, 'timeout']));\n            }\n            return newState;\n        }\n        case ActionType.SetError:\n            return state.setIn([action.payload.type, action.payload.key, 'loadError'], action.payload.error);\n        case ActionType.SetData:\n            return state.withMutations((s) => s\n                .setIn([action.payload.type, action.payload.key, 'data'], action.payload.data)\n                .setIn([action.payload.type, action.payload.key, 'loadError'], null));\n        default:\n            return state;\n    }\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/reducers/dashboards.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/reducers/dashboards.ts"],"names":[],"mappings":"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","sourcesContent":["import { ActionType, DashboardsAction } from '../actions/dashboards';\nimport { Map as ImmutableMap, fromJS } from 'immutable';\n\nexport enum RESULTS_TYPE {\n  PROMETHEUS = 'PROMETHEUS',\n  URL = 'URL',\n  ALERTS = 'ALERTS',\n}\n\nexport const defaults = {\n  [RESULTS_TYPE.PROMETHEUS]: fromJS({}),\n  [RESULTS_TYPE.URL]: fromJS({}),\n};\n\ntype Request<R> = {\n  active: boolean;\n  timeout: NodeJS.Timer;\n  inFlight: boolean;\n  data: R;\n  error: any;\n};\n\nexport type RequestMap<R> = ImmutableMap<string, Request<R>>;\n\nexport type DashboardsState = ImmutableMap<string, RequestMap<any>>;\n\nexport const isWatchActive = (state: DashboardsState, type: string, key: string): boolean =>\n  state.getIn([type, key, 'active']) > 0 || state.getIn([type, key, 'inFlight']);\n\nexport const dashboardsReducer = (\n  state: DashboardsState,\n  action: DashboardsAction,\n): DashboardsState => {\n  if (!state) {\n    return ImmutableMap(defaults);\n  }\n  switch (action.type) {\n    case ActionType.ActivateWatch: {\n      const activePath = [action.payload.type, action.payload.key, 'active'];\n      const active = state.hasIn(activePath) ? state.getIn(activePath) : 0;\n      return state.setIn(activePath, active + 1);\n    }\n    case ActionType.UpdateWatchTimeout:\n      return state.setIn(\n        [action.payload.type, action.payload.key, 'timeout'],\n        action.payload.timeout,\n      );\n    case ActionType.UpdateWatchInFlight:\n      return state.setIn(\n        [action.payload.type, action.payload.key, 'inFlight'],\n        action.payload.inFlight,\n      );\n    case ActionType.StopWatch: {\n      const active = state.getIn([action.payload.type, action.payload.key, 'active']);\n      const newState = state.setIn([action.payload.type, action.payload.key, 'active'], active - 1);\n      if (active === 1) {\n        clearTimeout(state.getIn([action.payload.type, action.payload.key, 'timeout']));\n      }\n      return newState;\n    }\n    case ActionType.SetError:\n      return state.setIn(\n        [action.payload.type, action.payload.key, 'loadError'],\n        action.payload.error,\n      );\n    case ActionType.SetData:\n      return state.withMutations((s) =>\n        s\n          .setIn([action.payload.type, action.payload.key, 'data'], action.payload.data)\n          .setIn([action.payload.type, action.payload.key, 'loadError'], null),\n      );\n    default:\n      return state;\n  }\n};\n"]}]}