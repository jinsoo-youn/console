{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/reducers/ui.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/reducers/ui.ts","mtime":1615298458760},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport { List as ImmutableList, Map as ImmutableMap } from 'immutable';\nimport { ActionType } from '../actions/ui';\nimport { ALL_NAMESPACES_KEY, ALL_APPLICATIONS_KEY, LAST_NAMESPACE_NAME_LOCAL_STORAGE_KEY, NAMESPACE_LOCAL_STORAGE_KEY, LAST_PERSPECTIVE_LOCAL_STORAGE_KEY, PINNED_RESOURCES_LOCAL_STORAGE_KEY, LAST_CLUSTER_LOCAL_STORAGE_KEY, } from '@console/shared/src/constants';\nimport { AlertStates, isSilenced, SilenceStates } from '../reducers/monitoring';\nimport { legalNamePattern, getNamespace } from '../components/utils/link';\nimport { OverviewSpecialGroup } from '../components/overview/constants';\nimport { getPerspectives } from '../hypercloud/perspectives';\nexport function getDefaultPerspective() {\n    if (!window.SERVER_FLAGS.McMode) {\n        return 'hc';\n    }\n    let activePerspective = localStorage.getItem(LAST_PERSPECTIVE_LOCAL_STORAGE_KEY);\n    if (activePerspective &&\n        !getPerspectives().some((p) => p.properties.id === activePerspective)) {\n        // invalid saved perspective\n        activePerspective = undefined;\n    }\n    if (!activePerspective) {\n        // assign default perspective\n        const defaultPerspective = getPerspectives().find((p) => p.properties.default);\n        if (defaultPerspective) {\n            activePerspective = defaultPerspective.properties.id;\n        }\n    }\n    return activePerspective || undefined;\n}\nconst newQueryBrowserQuery = () => ImmutableMap({\n    id: _.uniqueId('query-browser-query'),\n    isEnabled: true,\n    isExpanded: true,\n});\nconst silenceFiringAlerts = (firingAlerts, silences) => {\n    // For each firing alert, store a list of the Silences that are silencing it and set its state to show it is silenced\n    _.each(firingAlerts, (a) => {\n        a.silencedBy = _.filter(_.get(silences, 'data'), (s) => _.get(s, 'status.state') === SilenceStates.Active && isSilenced(a, s));\n        if (a.silencedBy.length) {\n            a.state = AlertStates.Silenced;\n            // Also set the state of Alerts in `rule.alerts`\n            _.each(a.rule.alerts, (ruleAlert) => {\n                if (_.some(a.silencedBy, (s) => isSilenced(ruleAlert, s))) {\n                    ruleAlert.state = AlertStates.Silenced;\n                }\n            });\n        }\n    });\n};\nexport default (state, action) => {\n    if (!state) {\n        const { pathname } = window.location;\n        let activeNamespace = getNamespace(pathname);\n        if (!activeNamespace) {\n            const parsedFavorite = localStorage.getItem(NAMESPACE_LOCAL_STORAGE_KEY);\n            if (_.isString(parsedFavorite) &&\n                (parsedFavorite.match(legalNamePattern) || parsedFavorite === ALL_NAMESPACES_KEY)) {\n                activeNamespace = parsedFavorite;\n            }\n            else {\n                activeNamespace = localStorage.getItem(LAST_NAMESPACE_NAME_LOCAL_STORAGE_KEY);\n            }\n        }\n        const storedPins = localStorage.getItem(PINNED_RESOURCES_LOCAL_STORAGE_KEY);\n        const pinnedResources = storedPins ? JSON.parse(storedPins) : {};\n        const activeCluster = window.SERVER_FLAGS.McMode ? localStorage.getItem(LAST_CLUSTER_LOCAL_STORAGE_KEY) : undefined;\n        return ImmutableMap({\n            activeNavSectionId: 'workloads',\n            location: pathname,\n            activeNamespace: activeNamespace || ALL_NAMESPACES_KEY,\n            activeApplication: ALL_APPLICATIONS_KEY,\n            activePerspective: getDefaultPerspective(),\n            createProjectMessage: '',\n            overview: ImmutableMap({\n                metrics: {},\n                resources: ImmutableMap({}),\n                selectedDetailsTab: 'Resources',\n                selectedUID: '',\n                selectedGroup: OverviewSpecialGroup.GROUP_BY_APPLICATION,\n                groupOptions: ImmutableMap(),\n                filterValue: '',\n            }),\n            user: {},\n            consoleLinks: [],\n            monitoringDashboards: ImmutableMap({\n                pollInterval: 30 * 1000,\n                timespan: 30 * 60 * 1000,\n                variables: ImmutableMap(),\n            }),\n            queryBrowser: ImmutableMap({\n                metrics: [],\n                queries: ImmutableList([newQueryBrowserQuery()]),\n            }),\n            pinnedResources,\n            activeCluster,\n        });\n    }\n    switch (action.type) {\n        case ActionType.SetActiveApplication:\n            return state.set('activeApplication', action.payload.application);\n        case ActionType.SetActiveNamespace:\n            if (!action.payload.namespace) {\n                // eslint-disable-next-line no-console\n                console.warn('setActiveNamespace: Not setting to falsy!');\n                return state;\n            }\n            return state\n                .set('activeApplication', ALL_APPLICATIONS_KEY)\n                .set('activeNamespace', action.payload.namespace);\n        case ActionType.SetActivePerspective:\n            return state.set('activePerspective', action.payload.perspective);\n        case ActionType.SetCurrentLocation: {\n            state = state.set('location', action.payload.location);\n            const ns = getNamespace(action.payload.location);\n            if (_.isUndefined(ns)) {\n                return state;\n            }\n            return state.set('activeNamespace', ns);\n        }\n        case ActionType.BeginImpersonate:\n            return state.set('impersonate', {\n                kind: action.payload.kind,\n                name: action.payload.name,\n                subprotocols: action.payload.subprotocols,\n            });\n        case ActionType.EndImpersonate:\n            return state.delete('impersonate');\n        case ActionType.SortList:\n            return state.mergeIn(['listSorts', action.payload.listId], _.pick(action.payload, ['field', 'func', 'orderBy']));\n        case ActionType.SetCreateProjectMessage:\n            return state.set('createProjectMessage', action.payload.message);\n        case ActionType.SetClusterID:\n            return state.set('clusterID', action.payload.clusterID);\n        case ActionType.SetUser:\n            return state.set('user', action.payload.user);\n        case ActionType.MonitoringDashboardsClearVariables:\n            return state.setIn(['monitoringDashboards', 'variables'], ImmutableMap());\n        case ActionType.MonitoringDashboardsPatchVariable:\n            return state.mergeIn(['monitoringDashboards', 'variables', action.payload.key], ImmutableMap(action.payload.patch));\n        case ActionType.MonitoringDashboardsPatchAllVariables:\n            return state.setIn(['monitoringDashboards', 'variables'], ImmutableMap(action.payload.variables));\n        case ActionType.MonitoringDashboardsSetPollInterval:\n            return state.setIn(['monitoringDashboards', 'pollInterval'], action.payload.pollInterval);\n        case ActionType.MonitoringDashboardsSetTimespan:\n            return state.setIn(['monitoringDashboards', 'timespan'], action.payload.timespan);\n        case ActionType.MonitoringDashboardsVariableOptionsLoaded: {\n            const { key, newOptions } = action.payload;\n            const { options, value } = state.getIn(['monitoringDashboards', 'variables', key]).toJS();\n            const patch = _.isEqual(options, newOptions)\n                ? { isLoading: false }\n                : {\n                    isLoading: false,\n                    options: newOptions,\n                    value: newOptions.includes(value) ? value : newOptions[0],\n                };\n            return state.mergeIn(['monitoringDashboards', 'variables', key], ImmutableMap(patch));\n        }\n        case ActionType.MonitoringSetRules:\n            return state.setIn(['monitoring', 'rules'], action.payload.rules);\n        case ActionType.SetMonitoringData: {\n            // alerts used by monitoring -> alerting pages\n            const alerts = action.payload.key === 'alerts'\n                ? action.payload.data\n                : state.getIn(['monitoring', 'alerts']);\n            // notificationAlerts used by notification drawer and certain dashboards\n            const notificationAlerts = action.payload.key === 'notificationAlerts'\n                ? action.payload.data\n                : state.getIn(['monitoring', 'notificationAlerts']);\n            const silences = action.payload.key === 'silences'\n                ? action.payload.data\n                : state.getIn(['monitoring', 'silences']);\n            const isAlertFiring = (alert) => (alert === null || alert === void 0 ? void 0 : alert.state) === AlertStates.Firing || (alert === null || alert === void 0 ? void 0 : alert.state) === AlertStates.Silenced;\n            const firingAlerts = _.filter(alerts === null || alerts === void 0 ? void 0 : alerts.data, isAlertFiring);\n            silenceFiringAlerts(firingAlerts, silences);\n            silenceFiringAlerts(_.filter(notificationAlerts === null || notificationAlerts === void 0 ? void 0 : notificationAlerts.data, isAlertFiring), silences);\n            // filter out silenced alerts from notificationAlerts\n            notificationAlerts.data = _.reject(notificationAlerts.data, { state: AlertStates.Silenced });\n            state = state.setIn(['monitoring', 'alerts'], alerts);\n            state = state.setIn(['monitoring', 'notificationAlerts'], notificationAlerts);\n            // For each Silence, store a list of the Alerts it is silencing\n            _.each(_.get(silences, 'data'), (s) => {\n                s.firingAlerts = _.filter(firingAlerts, (a) => isSilenced(a, s));\n            });\n            return state.setIn(['monitoring', 'silences'], silences);\n        }\n        case ActionType.ToggleMonitoringGraphs:\n            return state.setIn(['monitoring', 'hideGraphs'], !state.getIn(['monitoring', 'hideGraphs']));\n        case ActionType.NotificationDrawerToggleExpanded:\n            return state.setIn(['notifications', 'isExpanded'], !state.getIn(['notifications', 'isExpanded']));\n        case ActionType.NotificationDrawerToggleRead:\n            return state.setIn(['notifications', 'isRead'], !state.getIn(['notifications', 'isRead']));\n        case ActionType.QueryBrowserAddQuery:\n            return state.setIn(['queryBrowser', 'queries'], state.getIn(['queryBrowser', 'queries']).push(newQueryBrowserQuery()));\n        case ActionType.QueryBrowserDeleteAllQueries:\n            return state.setIn(['queryBrowser', 'queries'], ImmutableList([newQueryBrowserQuery()]));\n        case ActionType.QueryBrowserDeleteQuery: {\n            let queries = state.getIn(['queryBrowser', 'queries']).delete(action.payload.index);\n            if (queries.size === 0) {\n                queries = queries.push(newQueryBrowserQuery());\n            }\n            return state.setIn(['queryBrowser', 'queries'], queries);\n        }\n        case ActionType.QueryBrowserDismissNamespaceAlert:\n            return state.setIn(['queryBrowser', 'dismissNamespaceAlert'], true);\n        case ActionType.QueryBrowserInsertText: {\n            const { index, newText, replaceFrom, replaceTo } = action.payload;\n            const oldText = state.getIn(['queryBrowser', 'queries', index, 'text'], '');\n            const text = _.isInteger(replaceFrom) && _.isInteger(replaceTo)\n                ? oldText.substring(0, replaceFrom) + newText + oldText.substring(replaceTo)\n                : oldText + newText;\n            return state.setIn(['queryBrowser', 'queries', index, 'text'], text);\n        }\n        case ActionType.QueryBrowserPatchQuery: {\n            const { index, patch } = action.payload;\n            const query = state.hasIn(['queryBrowser', 'queries', index])\n                ? ImmutableMap(patch)\n                : newQueryBrowserQuery().merge(patch);\n            return state.mergeIn(['queryBrowser', 'queries', index], query);\n        }\n        case ActionType.QueryBrowserRunQueries: {\n            const queries = state.getIn(['queryBrowser', 'queries']).map((q) => {\n                const isEnabled = q.get('isEnabled');\n                const query = q.get('query');\n                const text = _.trim(q.get('text'));\n                return isEnabled && query !== text ? q.merge({ query: text, series: undefined }) : q;\n            });\n            return state.setIn(['queryBrowser', 'queries'], queries);\n        }\n        case ActionType.QueryBrowserSetAllExpanded: {\n            const queries = state.getIn(['queryBrowser', 'queries']).map((q) => {\n                return q.set('isExpanded', action.payload.isExpanded);\n            });\n            return state.setIn(['queryBrowser', 'queries'], queries);\n        }\n        case ActionType.QueryBrowserSetMetrics:\n            return state.setIn(['queryBrowser', 'metrics'], action.payload.metrics);\n        case ActionType.QueryBrowserToggleIsEnabled: {\n            const query = state.getIn(['queryBrowser', 'queries', action.payload.index]);\n            const isEnabled = !query.get('isEnabled');\n            return state.setIn(['queryBrowser', 'queries', action.payload.index], query.merge({\n                isEnabled,\n                isExpanded: isEnabled,\n                query: isEnabled ? query.get('text') : '',\n            }));\n        }\n        case ActionType.QueryBrowserToggleSeries:\n            return state.updateIn(['queryBrowser', 'queries', action.payload.index, 'disabledSeries'], (v) => _.xorWith(v, [action.payload.labels], _.isEqual));\n        case ActionType.SelectOverviewItem:\n            return state.setIn(['overview', 'selectedUID'], action.payload.uid);\n        case ActionType.SelectOverviewDetailsTab:\n            return state.setIn(['overview', 'selectedDetailsTab'], action.payload.tab);\n        case ActionType.DismissOverviewDetails:\n            return state.mergeIn(['overview'], { selectedUID: '', selectedDetailsTab: '' });\n        case ActionType.UpdateOverviewMetrics:\n            return state.setIn(['overview', 'metrics'], action.payload.metrics);\n        case ActionType.UpdateOverviewResources: {\n            const newResources = ImmutableMap(_.keyBy(action.payload.resources, 'obj.metadata.uid'));\n            return state.setIn(['overview', 'resources'], newResources);\n        }\n        case ActionType.UpdateOverviewSelectedGroup: {\n            return state.setIn(['overview', 'selectedGroup'], action.payload.group);\n        }\n        case ActionType.UpdateOverviewLabels: {\n            return state.setIn(['overview', 'labels'], action.payload.labels);\n        }\n        case ActionType.UpdateOverviewFilterValue: {\n            return state.setIn(['overview', 'filterValue'], action.payload.value);\n        }\n        case ActionType.UpdateTimestamps:\n            return state.set('lastTick', action.payload.lastTick);\n        case ActionType.SetConsoleLinks:\n            return state.set('consoleLinks', action.payload.consoleLinks);\n        case ActionType.SetPodMetrics:\n            return state.setIn(['metrics', 'pod'], action.payload.podMetrics);\n        case ActionType.SetNamespaceMetrics:\n            return state.setIn(['metrics', 'namespace'], action.payload.namespaceMetrics);\n        case ActionType.SetNodeMetrics:\n            return state.setIn(['metrics', 'node'], action.payload.nodeMetrics);\n        case ActionType.SetPinnedResources: {\n            const pinnedResources = Object.assign({}, state.get('pinnedResources'));\n            pinnedResources[state.get('activePerspective')] = action.payload.resources;\n            localStorage.setItem(PINNED_RESOURCES_LOCAL_STORAGE_KEY, JSON.stringify(pinnedResources));\n            return state.set('pinnedResources', pinnedResources);\n        }\n        case ActionType.SetActiveCluster:\n            return state.set('activeCluster', action.payload.cluster);\n        default:\n            break;\n    }\n    return state;\n};\nexport const createProjectMessageStateToProps = ({ UI }) => {\n    return { createProjectMessage: UI.get('createProjectMessage') };\n};\nexport const userStateToProps = ({ UI }) => {\n    return { user: UI.get('user') };\n};\nexport const impersonateStateToProps = ({ UI }) => {\n    return { impersonate: UI.get('impersonate') };\n};\nexport const getActiveNamespace = ({ UI }) => UI.get('activeNamespace');\nexport const getActivePerspective = ({ UI }) => UI.get('activePerspective');\nexport const getActiveApplication = ({ UI }) => UI.get('activeApplication');\nexport const getPinnedResources = (rootState) => rootState.UI.get('pinnedResources')[getActivePerspective(rootState)];\nexport const getActiveCluster = ({ UI }) => UI.get('activeCluster');\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/reducers/ui.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/reducers/ui.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\nimport { List as ImmutableList, Map as ImmutableMap } from 'immutable';\n\nimport { ActionType, UIAction } from '../actions/ui';\nimport {\n  ALL_NAMESPACES_KEY,\n  ALL_APPLICATIONS_KEY,\n  LAST_NAMESPACE_NAME_LOCAL_STORAGE_KEY,\n  NAMESPACE_LOCAL_STORAGE_KEY,\n  LAST_PERSPECTIVE_LOCAL_STORAGE_KEY,\n  PINNED_RESOURCES_LOCAL_STORAGE_KEY,\n  LAST_CLUSTER_LOCAL_STORAGE_KEY,\n} from '@console/shared/src/constants';\nimport { AlertStates, isSilenced, SilenceStates } from '../reducers/monitoring';\nimport { legalNamePattern, getNamespace } from '../components/utils/link';\nimport { OverviewSpecialGroup } from '../components/overview/constants';\nimport { RootState } from '../redux';\nimport { getPerspectives } from '../hypercloud/perspectives';\nimport { Alert } from '../components/monitoring';\n\nexport type UIState = ImmutableMap<string, any>;\n\nexport function getDefaultPerspective() {\n  if(!window.SERVER_FLAGS.McMode){\n    return 'hc';\n  }\n\n  let activePerspective = localStorage.getItem(LAST_PERSPECTIVE_LOCAL_STORAGE_KEY);\n  if (\n    activePerspective &&\n    !getPerspectives().some((p) => p.properties.id === activePerspective)\n  ) {\n    // invalid saved perspective\n    activePerspective = undefined;\n  }\n  if (!activePerspective) {\n    // assign default perspective\n    const defaultPerspective = getPerspectives().find((p) => p.properties.default);\n    if (defaultPerspective) {\n      activePerspective = defaultPerspective.properties.id;\n    }\n  }\n  return activePerspective || undefined;\n}\n\nconst newQueryBrowserQuery = (): ImmutableMap<string, any> =>\n  ImmutableMap({\n    id: _.uniqueId('query-browser-query'),\n    isEnabled: true,\n    isExpanded: true,\n  });\n\nconst silenceFiringAlerts = (firingAlerts, silences) => {\n  // For each firing alert, store a list of the Silences that are silencing it and set its state to show it is silenced\n  _.each(firingAlerts, (a) => {\n    a.silencedBy = _.filter(\n      _.get(silences, 'data'),\n      (s) => _.get(s, 'status.state') === SilenceStates.Active && isSilenced(a, s),\n    );\n    if (a.silencedBy.length) {\n      a.state = AlertStates.Silenced;\n      // Also set the state of Alerts in `rule.alerts`\n      _.each(a.rule.alerts, (ruleAlert) => {\n        if (_.some(a.silencedBy, (s) => isSilenced(ruleAlert, s))) {\n          ruleAlert.state = AlertStates.Silenced;\n        }\n      });\n    }\n  });\n};\n\nexport default (state: UIState, action: UIAction): UIState => {\n  if (!state) {\n    const { pathname } = window.location;\n\n    let activeNamespace = getNamespace(pathname);\n    if (!activeNamespace) {\n      const parsedFavorite = localStorage.getItem(NAMESPACE_LOCAL_STORAGE_KEY);\n      if (\n        _.isString(parsedFavorite) &&\n        (parsedFavorite.match(legalNamePattern) || parsedFavorite === ALL_NAMESPACES_KEY)\n      ) {\n        activeNamespace = parsedFavorite;\n      } else {\n        activeNamespace = localStorage.getItem(LAST_NAMESPACE_NAME_LOCAL_STORAGE_KEY);\n      }\n    }\n\n    const storedPins = localStorage.getItem(PINNED_RESOURCES_LOCAL_STORAGE_KEY);\n    const pinnedResources = storedPins ? JSON.parse(storedPins) : {};\n\n    const activeCluster = window.SERVER_FLAGS.McMode ? localStorage.getItem(LAST_CLUSTER_LOCAL_STORAGE_KEY) : undefined;\n\n    return ImmutableMap({\n      activeNavSectionId: 'workloads',\n      location: pathname,\n      activeNamespace: activeNamespace || ALL_NAMESPACES_KEY,\n      activeApplication: ALL_APPLICATIONS_KEY,\n      activePerspective: getDefaultPerspective(),\n      createProjectMessage: '',\n      overview: ImmutableMap({\n        metrics: {},\n        resources: ImmutableMap({}),\n        selectedDetailsTab: 'Resources',\n        selectedUID: '',\n        selectedGroup: OverviewSpecialGroup.GROUP_BY_APPLICATION,\n        groupOptions: ImmutableMap(),\n        filterValue: '',\n      }),\n      user: {},\n      consoleLinks: [],\n      monitoringDashboards: ImmutableMap({\n        pollInterval: 30 * 1000,\n        timespan: 30 * 60 * 1000,\n        variables: ImmutableMap(),\n      }),\n      queryBrowser: ImmutableMap({\n        metrics: [],\n        queries: ImmutableList([newQueryBrowserQuery()]),\n      }),\n      pinnedResources,\n      activeCluster,\n    });\n  }\n\n  switch (action.type) {\n    case ActionType.SetActiveApplication:\n      return state.set('activeApplication', action.payload.application);\n\n    case ActionType.SetActiveNamespace:\n      if (!action.payload.namespace) {\n        // eslint-disable-next-line no-console\n        console.warn('setActiveNamespace: Not setting to falsy!');\n        return state;\n      }\n\n      return state\n        .set('activeApplication', ALL_APPLICATIONS_KEY)\n        .set('activeNamespace', action.payload.namespace);\n\n    case ActionType.SetActivePerspective:\n      return state.set('activePerspective', action.payload.perspective);\n\n    case ActionType.SetCurrentLocation: {\n      state = state.set('location', action.payload.location);\n      const ns = getNamespace(action.payload.location);\n      if (_.isUndefined(ns)) {\n        return state;\n      }\n      return state.set('activeNamespace', ns);\n    }\n    case ActionType.BeginImpersonate:\n      return state.set('impersonate', {\n        kind: action.payload.kind,\n        name: action.payload.name,\n        subprotocols: action.payload.subprotocols,\n      });\n\n    case ActionType.EndImpersonate:\n      return state.delete('impersonate');\n\n    case ActionType.SortList:\n      return state.mergeIn(\n        ['listSorts', action.payload.listId],\n        _.pick(action.payload, ['field', 'func', 'orderBy']),\n      );\n\n    case ActionType.SetCreateProjectMessage:\n      return state.set('createProjectMessage', action.payload.message);\n\n    case ActionType.SetClusterID:\n      return state.set('clusterID', action.payload.clusterID);\n\n    case ActionType.SetUser:\n      return state.set('user', action.payload.user);\n\n    case ActionType.MonitoringDashboardsClearVariables:\n      return state.setIn(['monitoringDashboards', 'variables'], ImmutableMap());\n\n    case ActionType.MonitoringDashboardsPatchVariable:\n      return state.mergeIn(\n        ['monitoringDashboards', 'variables', action.payload.key],\n        ImmutableMap(action.payload.patch),\n      );\n\n    case ActionType.MonitoringDashboardsPatchAllVariables:\n      return state.setIn(\n        ['monitoringDashboards', 'variables'],\n        ImmutableMap(action.payload.variables),\n      );\n\n    case ActionType.MonitoringDashboardsSetPollInterval:\n      return state.setIn(['monitoringDashboards', 'pollInterval'], action.payload.pollInterval);\n\n    case ActionType.MonitoringDashboardsSetTimespan:\n      return state.setIn(['monitoringDashboards', 'timespan'], action.payload.timespan);\n\n    case ActionType.MonitoringDashboardsVariableOptionsLoaded: {\n      const { key, newOptions } = action.payload;\n      const { options, value } = state.getIn(['monitoringDashboards', 'variables', key]).toJS();\n      const patch = _.isEqual(options, newOptions)\n        ? { isLoading: false }\n        : {\n            isLoading: false,\n            options: newOptions,\n            value: newOptions.includes(value) ? value : newOptions[0],\n          };\n      return state.mergeIn(['monitoringDashboards', 'variables', key], ImmutableMap(patch));\n    }\n    case ActionType.MonitoringSetRules:\n      return state.setIn(['monitoring', 'rules'], action.payload.rules);\n\n    case ActionType.SetMonitoringData: {\n      // alerts used by monitoring -> alerting pages\n      const alerts =\n        action.payload.key === 'alerts'\n          ? action.payload.data\n          : state.getIn(['monitoring', 'alerts']);\n      // notificationAlerts used by notification drawer and certain dashboards\n      const notificationAlerts: NotificationAlerts =\n        action.payload.key === 'notificationAlerts'\n          ? action.payload.data\n          : state.getIn(['monitoring', 'notificationAlerts']);\n      const silences =\n        action.payload.key === 'silences'\n          ? action.payload.data\n          : state.getIn(['monitoring', 'silences']);\n\n      const isAlertFiring = (alert) =>\n        alert?.state === AlertStates.Firing || alert?.state === AlertStates.Silenced;\n      const firingAlerts = _.filter(alerts?.data, isAlertFiring);\n      silenceFiringAlerts(firingAlerts, silences);\n      silenceFiringAlerts(_.filter(notificationAlerts?.data, isAlertFiring), silences);\n      // filter out silenced alerts from notificationAlerts\n      notificationAlerts.data = _.reject(notificationAlerts.data, { state: AlertStates.Silenced });\n      state = state.setIn(['monitoring', 'alerts'], alerts);\n      state = state.setIn(['monitoring', 'notificationAlerts'], notificationAlerts);\n\n      // For each Silence, store a list of the Alerts it is silencing\n      _.each(_.get(silences, 'data'), (s) => {\n        s.firingAlerts = _.filter(firingAlerts, (a) => isSilenced(a, s));\n      });\n      return state.setIn(['monitoring', 'silences'], silences);\n    }\n    case ActionType.ToggleMonitoringGraphs:\n      return state.setIn(['monitoring', 'hideGraphs'], !state.getIn(['monitoring', 'hideGraphs']));\n\n    case ActionType.NotificationDrawerToggleExpanded:\n      return state.setIn(\n        ['notifications', 'isExpanded'],\n        !state.getIn(['notifications', 'isExpanded']),\n      );\n\n    case ActionType.NotificationDrawerToggleRead:\n      return state.setIn(['notifications', 'isRead'], !state.getIn(['notifications', 'isRead']));\n\n    case ActionType.QueryBrowserAddQuery:\n      return state.setIn(\n        ['queryBrowser', 'queries'],\n        state.getIn(['queryBrowser', 'queries']).push(newQueryBrowserQuery()),\n      );\n\n    case ActionType.QueryBrowserDeleteAllQueries:\n      return state.setIn(['queryBrowser', 'queries'], ImmutableList([newQueryBrowserQuery()]));\n\n    case ActionType.QueryBrowserDeleteQuery: {\n      let queries = state.getIn(['queryBrowser', 'queries']).delete(action.payload.index);\n      if (queries.size === 0) {\n        queries = queries.push(newQueryBrowserQuery());\n      }\n      return state.setIn(['queryBrowser', 'queries'], queries);\n    }\n    case ActionType.QueryBrowserDismissNamespaceAlert:\n      return state.setIn(['queryBrowser', 'dismissNamespaceAlert'], true);\n\n    case ActionType.QueryBrowserInsertText: {\n      const { index, newText, replaceFrom, replaceTo } = action.payload;\n      const oldText = state.getIn(['queryBrowser', 'queries', index, 'text'], '');\n      const text =\n        _.isInteger(replaceFrom) && _.isInteger(replaceTo)\n          ? oldText.substring(0, replaceFrom) + newText + oldText.substring(replaceTo)\n          : oldText + newText;\n      return state.setIn(['queryBrowser', 'queries', index, 'text'], text);\n    }\n    case ActionType.QueryBrowserPatchQuery: {\n      const { index, patch } = action.payload;\n      const query = state.hasIn(['queryBrowser', 'queries', index])\n        ? ImmutableMap(patch)\n        : newQueryBrowserQuery().merge(patch);\n      return state.mergeIn(['queryBrowser', 'queries', index], query);\n    }\n    case ActionType.QueryBrowserRunQueries: {\n      const queries = state.getIn(['queryBrowser', 'queries']).map((q) => {\n        const isEnabled = q.get('isEnabled');\n        const query = q.get('query');\n        const text = _.trim(q.get('text'));\n        return isEnabled && query !== text ? q.merge({ query: text, series: undefined }) : q;\n      });\n      return state.setIn(['queryBrowser', 'queries'], queries);\n    }\n    case ActionType.QueryBrowserSetAllExpanded: {\n      const queries = state.getIn(['queryBrowser', 'queries']).map((q) => {\n        return q.set('isExpanded', action.payload.isExpanded);\n      });\n      return state.setIn(['queryBrowser', 'queries'], queries);\n    }\n    case ActionType.QueryBrowserSetMetrics:\n      return state.setIn(['queryBrowser', 'metrics'], action.payload.metrics);\n\n    case ActionType.QueryBrowserToggleIsEnabled: {\n      const query = state.getIn(['queryBrowser', 'queries', action.payload.index]);\n      const isEnabled = !query.get('isEnabled');\n      return state.setIn(\n        ['queryBrowser', 'queries', action.payload.index],\n        query.merge({\n          isEnabled,\n          isExpanded: isEnabled,\n          query: isEnabled ? query.get('text') : '',\n        }),\n      );\n    }\n    case ActionType.QueryBrowserToggleSeries:\n      return state.updateIn(\n        ['queryBrowser', 'queries', action.payload.index, 'disabledSeries'],\n        (v) => _.xorWith(v, [action.payload.labels], _.isEqual),\n      );\n\n    case ActionType.SelectOverviewItem:\n      return state.setIn(['overview', 'selectedUID'], action.payload.uid);\n\n    case ActionType.SelectOverviewDetailsTab:\n      return state.setIn(['overview', 'selectedDetailsTab'], action.payload.tab);\n\n    case ActionType.DismissOverviewDetails:\n      return state.mergeIn(['overview'], { selectedUID: '', selectedDetailsTab: '' });\n\n    case ActionType.UpdateOverviewMetrics:\n      return state.setIn(['overview', 'metrics'], action.payload.metrics);\n\n    case ActionType.UpdateOverviewResources: {\n      const newResources = ImmutableMap(_.keyBy(action.payload.resources, 'obj.metadata.uid'));\n      return state.setIn(['overview', 'resources'], newResources);\n    }\n\n    case ActionType.UpdateOverviewSelectedGroup: {\n      return state.setIn(['overview', 'selectedGroup'], action.payload.group);\n    }\n\n    case ActionType.UpdateOverviewLabels: {\n      return state.setIn(['overview', 'labels'], action.payload.labels);\n    }\n\n    case ActionType.UpdateOverviewFilterValue: {\n      return state.setIn(['overview', 'filterValue'], action.payload.value);\n    }\n    case ActionType.UpdateTimestamps:\n      return state.set('lastTick', action.payload.lastTick);\n\n    case ActionType.SetConsoleLinks:\n      return state.set('consoleLinks', action.payload.consoleLinks);\n\n    case ActionType.SetPodMetrics:\n      return state.setIn(['metrics', 'pod'], action.payload.podMetrics);\n\n    case ActionType.SetNamespaceMetrics:\n      return state.setIn(['metrics', 'namespace'], action.payload.namespaceMetrics);\n    case ActionType.SetNodeMetrics:\n      return state.setIn(['metrics', 'node'], action.payload.nodeMetrics);\n\n    case ActionType.SetPinnedResources: {\n      const pinnedResources = { ...state.get('pinnedResources') };\n      pinnedResources[state.get('activePerspective')] = action.payload.resources;\n      localStorage.setItem(PINNED_RESOURCES_LOCAL_STORAGE_KEY, JSON.stringify(pinnedResources));\n      return state.set('pinnedResources', pinnedResources);\n    }\n\n    case ActionType.SetActiveCluster:\n      return state.set('activeCluster', action.payload.cluster);\n\n    default:\n      break;\n  }\n  return state;\n};\n\nexport const createProjectMessageStateToProps = ({ UI }: RootState) => {\n  return { createProjectMessage: UI.get('createProjectMessage') as string };\n};\n\nexport const userStateToProps = ({ UI }: RootState) => {\n  return { user: UI.get('user') };\n};\n\nexport const impersonateStateToProps = ({ UI }: RootState) => {\n  return { impersonate: UI.get('impersonate') };\n};\n\nexport const getActiveNamespace = ({ UI }: RootState): string => UI.get('activeNamespace');\n\nexport const getActivePerspective = ({ UI }: RootState): string => UI.get('activePerspective');\n\nexport const getActiveApplication = ({ UI }: RootState): string => UI.get('activeApplication');\n\nexport const getPinnedResources = (rootState: RootState): string[] =>\n  rootState.UI.get('pinnedResources')[getActivePerspective(rootState)];\n\nexport const getActiveCluster = ({ UI }: RootState): string => UI.get('activeCluster');\n\nexport type NotificationAlerts = {\n  data: Alert[];\n  loaded: boolean;\n  loadError?: {\n    message?: string;\n  };\n};\n"]}]}