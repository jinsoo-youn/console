{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/filters/TopologyFilterBar.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/filters/TopologyFilterBar.tsx","mtime":1615298458630},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Toolbar, ToolbarGroup, ToolbarItem, Popover, Button } from '@patternfly/react-core';\nimport { TextFilter } from '@console/internal/components/factory';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { setTopologyFilters } from '../redux/action';\nimport { getTopologyFilters, getTopologySearchQuery } from './filter-utils';\nimport FilterDropdown from './FilterDropdown';\nimport './TopologyFilterBar.scss';\nconst TopologyFilterBar = ({ filters: { display }, onDisplayFiltersChange, onSearchChange, visualization, }) => {\n    const [searchQuery, setSearchQuery] = React.useState('');\n    React.useEffect(() => {\n        const query = getTopologySearchQuery();\n        setSearchQuery(query);\n    }, []);\n    const onTextFilterChange = React.useCallback((text) => {\n        const query = text === null || text === void 0 ? void 0 : text.trim();\n        setSearchQuery(query);\n        onSearchChange(query);\n    }, [onSearchChange]);\n    return (React.createElement(Toolbar, { className: \"co-namespace-bar odc-topology-filter-bar\" },\n        React.createElement(ToolbarGroup, null,\n            React.createElement(ToolbarItem, null,\n                React.createElement(FilterDropdown, { filters: display, onChange: onDisplayFiltersChange }))),\n        React.createElement(ToolbarGroup, { className: \"odc-topology-filter-bar__search\" },\n            React.createElement(ToolbarItem, null,\n                React.createElement(TextFilter, { placeholder: \"Find by name...\", value: searchQuery, autoFocus: true, onChange: onTextFilterChange })),\n            React.createElement(ToolbarItem, null,\n                React.createElement(Popover, { \"aria-label\": \"Find by name\", position: \"left\", bodyContent: React.createElement(React.Fragment, null,\n                        \"Search results may appear outside of the visible area.\",\n                        ' ',\n                        React.createElement(Button, { variant: \"link\", onClick: () => visualization.getGraph().fit(80), isInline: true }, \"Click here\"),\n                        ' ',\n                        \"to fit to the screen.\") },\n                    React.createElement(Button, { variant: \"link\", className: \"odc-topology-filter-bar__info-icon\", isInline: true },\n                        React.createElement(InfoCircleIcon, null)))))));\n};\nconst mapStateToProps = (state) => ({\n    filters: getTopologyFilters(state),\n});\nconst dispatchToProps = (dispatch) => ({\n    onFiltersChange: (filters) => {\n        dispatch(setTopologyFilters(filters));\n    },\n});\nconst mergeProps = ({ filters }, { onFiltersChange }, { visualization, onSearchChange }) => ({\n    filters,\n    onDisplayFiltersChange: (display) => {\n        onFiltersChange(Object.assign(Object.assign({}, filters), { display }));\n    },\n    onSearchChange,\n    visualization,\n});\nexport default connect(mapStateToProps, dispatchToProps, mergeProps)(TopologyFilterBar);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/filters/TopologyFilterBar.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/filters/TopologyFilterBar.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AACtC,OAAO,EAAE,OAAO,EAAE,YAAY,EAAE,WAAW,EAAE,OAAO,EAAE,MAAM,EAAE,MAAM,wBAAwB,CAAC;AAE7F,OAAO,EAAE,UAAU,EAAE,MAAM,sCAAsC,CAAC;AAClE,OAAO,EAAE,cAAc,EAAE,MAAM,yBAAyB,CAAC;AAEzD,OAAO,EAAE,kBAAkB,EAAE,MAAM,iBAAiB,CAAC;AAErD,OAAO,EAAE,kBAAkB,EAAE,sBAAsB,EAAE,MAAM,gBAAgB,CAAC;AAE5E,OAAO,cAAc,MAAM,kBAAkB,CAAC;AAC9C,OAAO,0BAA0B,CAAC;AAsBlC,MAAM,iBAAiB,GAAqC,CAAC,EAC3D,OAAO,EAAE,EAAE,OAAO,EAAE,EACpB,sBAAsB,EACtB,cAAc,EACd,aAAa,GACd,EAAE,EAAE;IACH,MAAM,CAAC,WAAW,EAAE,cAAc,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAS,EAAE,CAAC,CAAC;IAEjE,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,MAAM,KAAK,GAAG,sBAAsB,EAAE,CAAC;QACvC,cAAc,CAAC,KAAK,CAAC,CAAC;IACxB,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,MAAM,kBAAkB,GAAG,KAAK,CAAC,WAAW,CAC1C,CAAC,IAAI,EAAE,EAAE;QACP,MAAM,KAAK,GAAG,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,IAAI,EAAE,CAAC;QAC3B,cAAc,CAAC,KAAK,CAAC,CAAC;QACtB,cAAc,CAAC,KAAK,CAAC,CAAC;IACxB,CAAC,EACD,CAAC,cAAc,CAAC,CACjB,CAAC;IAEF,OAAO,CACL,oBAAC,OAAO,IAAC,SAAS,EAAC,0CAA0C;QAC3D,oBAAC,YAAY;YACX,oBAAC,WAAW;gBACV,oBAAC,cAAc,IAAC,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,sBAAsB,GAAI,CAC1D,CACD;QACf,oBAAC,YAAY,IAAC,SAAS,EAAC,iCAAiC;YACvD,oBAAC,WAAW;gBACV,oBAAC,UAAU,IACT,WAAW,EAAC,iBAAiB,EAC7B,KAAK,EAAE,WAAW,EAClB,SAAS,QACT,QAAQ,EAAE,kBAAkB,GAC5B,CACU;YACd,oBAAC,WAAW;gBACV,oBAAC,OAAO,kBACK,cAAc,EACzB,QAAQ,EAAC,MAAM,EACf,WAAW,EACT;;wBACyD,GAAG;wBAC1D,oBAAC,MAAM,IAAC,OAAO,EAAC,MAAM,EAAC,OAAO,EAAE,GAAG,EAAE,CAAC,aAAa,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,QAAQ,uBAEvE;wBAAC,GAAG;gDAEZ;oBAGL,oBAAC,MAAM,IAAC,OAAO,EAAC,MAAM,EAAC,SAAS,EAAC,oCAAoC,EAAC,QAAQ;wBAC5E,oBAAC,cAAc,OAAG,CACX,CACD,CACE,CACD,CACP,CACX,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,eAAe,GAAG,CAAC,KAAgB,EAAc,EAAE,CAAC,CAAC;IACzD,OAAO,EAAE,kBAAkB,CAAC,KAAK,CAAC;CACnC,CAAC,CAAC;AAEH,MAAM,eAAe,GAAG,CAAC,QAAkB,EAAiB,EAAE,CAAC,CAAC;IAC9D,eAAe,EAAE,CAAC,OAAwB,EAAE,EAAE;QAC5C,QAAQ,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC;IACxC,CAAC;CACF,CAAC,CAAC;AAEH,MAAM,UAAU,GAAG,CACjB,EAAE,OAAO,EAAc,EACvB,EAAE,eAAe,EAAiB,EAClC,EAAE,aAAa,EAAE,cAAc,EAAY,EAC/B,EAAE,CAAC,CAAC;IAChB,OAAO;IACP,sBAAsB,EAAE,CAAC,OAAuB,EAAE,EAAE;QAClD,eAAe,iCAAM,OAAO,KAAE,OAAO,IAAG,CAAC;IAC3C,CAAC;IACD,cAAc;IACd,aAAa;CACd,CAAC,CAAC;AAEH,eAAe,OAAO,CACpB,eAAe,EACf,eAAe,EACf,UAAU,CACX,CAAC,iBAAiB,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { Dispatch } from 'redux';\nimport { connect } from 'react-redux';\nimport { Toolbar, ToolbarGroup, ToolbarItem, Popover, Button } from '@patternfly/react-core';\nimport { RootState } from '@console/internal/redux';\nimport { TextFilter } from '@console/internal/components/factory';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { Visualization } from '@console/topology';\nimport { setTopologyFilters } from '../redux/action';\nimport { TopologyFilters, DisplayFilters } from './filter-types';\nimport { getTopologyFilters, getTopologySearchQuery } from './filter-utils';\n\nimport FilterDropdown from './FilterDropdown';\nimport './TopologyFilterBar.scss';\n\ntype StateProps = {\n  filters: TopologyFilters;\n};\n\ntype DispatchProps = {\n  onFiltersChange: (filters: TopologyFilters) => void;\n};\n\ntype OwnProps = {\n  visualization: Visualization;\n  onSearchChange: (searchQuery: string) => void;\n};\n\ntype MergeProps = {\n  onDisplayFiltersChange: (display: DisplayFilters) => void;\n} & StateProps &\n  OwnProps;\n\ntype TopologyFilterBarProps = MergeProps;\n\nconst TopologyFilterBar: React.FC<TopologyFilterBarProps> = ({\n  filters: { display },\n  onDisplayFiltersChange,\n  onSearchChange,\n  visualization,\n}) => {\n  const [searchQuery, setSearchQuery] = React.useState<string>('');\n\n  React.useEffect(() => {\n    const query = getTopologySearchQuery();\n    setSearchQuery(query);\n  }, []);\n\n  const onTextFilterChange = React.useCallback(\n    (text) => {\n      const query = text?.trim();\n      setSearchQuery(query);\n      onSearchChange(query);\n    },\n    [onSearchChange],\n  );\n\n  return (\n    <Toolbar className=\"co-namespace-bar odc-topology-filter-bar\">\n      <ToolbarGroup>\n        <ToolbarItem>\n          <FilterDropdown filters={display} onChange={onDisplayFiltersChange} />\n        </ToolbarItem>\n      </ToolbarGroup>\n      <ToolbarGroup className=\"odc-topology-filter-bar__search\">\n        <ToolbarItem>\n          <TextFilter\n            placeholder=\"Find by name...\"\n            value={searchQuery}\n            autoFocus\n            onChange={onTextFilterChange}\n          />\n        </ToolbarItem>\n        <ToolbarItem>\n          <Popover\n            aria-label=\"Find by name\"\n            position=\"left\"\n            bodyContent={\n              <>\n                Search results may appear outside of the visible area.{' '}\n                <Button variant=\"link\" onClick={() => visualization.getGraph().fit(80)} isInline>\n                  Click here\n                </Button>{' '}\n                to fit to the screen.\n              </>\n            }\n          >\n            <Button variant=\"link\" className=\"odc-topology-filter-bar__info-icon\" isInline>\n              <InfoCircleIcon />\n            </Button>\n          </Popover>\n        </ToolbarItem>\n      </ToolbarGroup>\n    </Toolbar>\n  );\n};\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  filters: getTopologyFilters(state),\n});\n\nconst dispatchToProps = (dispatch: Dispatch): DispatchProps => ({\n  onFiltersChange: (filters: TopologyFilters) => {\n    dispatch(setTopologyFilters(filters));\n  },\n});\n\nconst mergeProps = (\n  { filters }: StateProps,\n  { onFiltersChange }: DispatchProps,\n  { visualization, onSearchChange }: OwnProps,\n): MergeProps => ({\n  filters,\n  onDisplayFiltersChange: (display: DisplayFilters) => {\n    onFiltersChange({ ...filters, display });\n  },\n  onSearchChange,\n  visualization,\n});\n\nexport default connect<StateProps, DispatchProps, OwnProps, MergeProps>(\n  mapStateToProps,\n  dispatchToProps,\n  mergeProps,\n)(TopologyFilterBar);\n"]}]}