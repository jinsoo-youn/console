{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/config-map/sc-defaults.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/config-map/sc-defaults.ts","mtime":1616735742430},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { AccessMode, VolumeMode } from '../../constants/vm/storage';\nconst getSCConfigMapAttribute = (storageClassConfigMap, storageClassName, attributeName) => {\n    const hasSubAttribute = storageClassName &&\n        attributeName &&\n        _.has(storageClassConfigMap, ['data', `${storageClassName}.${attributeName}`]);\n    return (_.get(storageClassConfigMap, [\n        'data',\n        hasSubAttribute ? `${storageClassName}.${attributeName}` : attributeName,\n    ]) || null);\n};\nexport const getDefaultSCVolumeMode = (storageClassConfigMap, storageClassName) => {\n    const configMapDefault = getSCConfigMapAttribute(storageClassConfigMap, storageClassName, 'volumeMode');\n    const volumeMode = configMapDefault ? VolumeMode.fromString(configMapDefault) : null;\n    return volumeMode || VolumeMode.FILESYSTEM;\n};\nexport const getDefaultSCAccessModes = (storageClassConfigMap, storageClassName) => {\n    const configMapDefault = getSCConfigMapAttribute(storageClassConfigMap, storageClassName, 'accessMode');\n    const accessMode = configMapDefault ? AccessMode.fromString(configMapDefault) : null;\n    return accessMode ? [accessMode] : [AccessMode.READ_WRITE_ONCE];\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/config-map/sc-defaults.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/config-map/sc-defaults.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAE5B,OAAO,EAAE,UAAU,EAAE,UAAU,EAAE,MAAM,4BAA4B,CAAC;AAEpE,MAAM,uBAAuB,GAAG,CAC9B,qBAAoC,EACpC,gBAAwB,EACxB,aAAqB,EACb,EAAE;IACV,MAAM,eAAe,GACnB,gBAAgB;QAChB,aAAa;QACb,CAAC,CAAC,GAAG,CAAC,qBAAqB,EAAE,CAAC,MAAM,EAAE,GAAG,gBAAgB,IAAI,aAAa,EAAE,CAAC,CAAC,CAAC;IACjF,OAAO,CACL,CAAC,CAAC,GAAG,CAAC,qBAAqB,EAAE;QAC3B,MAAM;QACN,eAAe,CAAC,CAAC,CAAC,GAAG,gBAAgB,IAAI,aAAa,EAAE,CAAC,CAAC,CAAC,aAAa;KACzE,CAAC,IAAI,IAAI,CACX,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,sBAAsB,GAAG,CACpC,qBAAoC,EACpC,gBAAyB,EACzB,EAAE;IACF,MAAM,gBAAgB,GAAG,uBAAuB,CAC9C,qBAAqB,EACrB,gBAAgB,EAChB,YAAY,CACb,CAAC;IAEF,MAAM,UAAU,GAAG,gBAAgB,CAAC,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAErF,OAAO,UAAU,IAAI,UAAU,CAAC,UAAU,CAAC;AAC7C,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,uBAAuB,GAAG,CACrC,qBAAoC,EACpC,gBAAyB,EACzB,EAAE;IACF,MAAM,gBAAgB,GAAG,uBAAuB,CAC9C,qBAAqB,EACrB,gBAAgB,EAChB,YAAY,CACb,CAAC;IAEF,MAAM,UAAU,GAAG,gBAAgB,CAAC,CAAC,CAAC,UAAU,CAAC,UAAU,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAErF,OAAO,UAAU,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,UAAU,CAAC,eAAe,CAAC,CAAC;AAClE,CAAC,CAAC","sourcesContent":["import * as _ from 'lodash';\nimport { ConfigMapKind } from '@console/internal/module/k8s';\nimport { AccessMode, VolumeMode } from '../../constants/vm/storage';\n\nconst getSCConfigMapAttribute = (\n  storageClassConfigMap: ConfigMapKind,\n  storageClassName: string,\n  attributeName: string,\n): string => {\n  const hasSubAttribute =\n    storageClassName &&\n    attributeName &&\n    _.has(storageClassConfigMap, ['data', `${storageClassName}.${attributeName}`]);\n  return (\n    _.get(storageClassConfigMap, [\n      'data',\n      hasSubAttribute ? `${storageClassName}.${attributeName}` : attributeName,\n    ]) || null\n  );\n};\n\nexport const getDefaultSCVolumeMode = (\n  storageClassConfigMap: ConfigMapKind,\n  storageClassName?: string,\n) => {\n  const configMapDefault = getSCConfigMapAttribute(\n    storageClassConfigMap,\n    storageClassName,\n    'volumeMode',\n  );\n\n  const volumeMode = configMapDefault ? VolumeMode.fromString(configMapDefault) : null;\n\n  return volumeMode || VolumeMode.FILESYSTEM;\n};\n\nexport const getDefaultSCAccessModes = (\n  storageClassConfigMap: ConfigMapKind,\n  storageClassName?: string,\n) => {\n  const configMapDefault = getSCConfigMapAttribute(\n    storageClassConfigMap,\n    storageClassName,\n    'accessMode',\n  );\n\n  const accessMode = configMapDefault ? AccessMode.fromString(configMapDefault) : null;\n\n  return accessMode ? [accessMode] : [AccessMode.READ_WRITE_ONCE];\n};\n"]}]}