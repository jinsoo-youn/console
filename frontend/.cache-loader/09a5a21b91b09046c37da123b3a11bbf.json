{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/routes/create-route.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/routes/create-route.tsx","mtime":1615298458740},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Alert, ActionGroup, Button } from '@patternfly/react-core';\nimport { PlusCircleIcon, MinusCircleIcon } from '@patternfly/react-icons';\nimport { ButtonBar, Dropdown, history, resourcePathFromModel, ResourceName } from '../utils';\nimport { k8sCreate, k8sList } from '../../module/k8s';\nimport { getActiveNamespace } from '../../actions/ui';\nimport { ServiceModel, RouteModel } from '../../models';\nimport { AsyncComponent } from '../utils/async';\nconst UNNAMED_PORT_KEY = '#unnamed';\nconst MAX_ALT_SERVICE_TARGET = 3;\nconst getPortOptions = (service) => {\n    if (!service) {\n        return {};\n    }\n    const ports = _.get(service, 'spec.ports', []);\n    const portOptions = ports.reduce((acc, { name = UNNAMED_PORT_KEY, port, targetPort, protocol }) => {\n        acc[name] = (React.createElement(React.Fragment, null,\n            port,\n            \" \\u2192 \",\n            targetPort,\n            \" (\",\n            protocol,\n            \")\"));\n        return acc;\n    }, {});\n    return portOptions;\n};\nconst DroppableFileInput = (props) => (React.createElement(AsyncComponent, Object.assign({ loader: () => import('../utils/file-input').then((c) => c.DroppableFileInput) }, props)));\nexport class CreateRoute extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            name: '',\n            hostname: '',\n            path: '',\n            service: null,\n            weight: 100,\n            targetPort: '',\n            termination: '',\n            insecureEdgeTerminationPolicy: '',\n            certificate: '',\n            key: '',\n            caCertificate: '',\n            destinationCACertificate: '',\n            secure: false,\n            loaded: false,\n            inProgress: false,\n            error: '',\n            namespace: getActiveNamespace(),\n            services: [],\n            labels: {},\n            portOptions: {},\n            alternateServices: [],\n        };\n        this.handleChange = (event) => {\n            const { name, value } = event.currentTarget;\n            this.setState({\n                [name]: value,\n            });\n        };\n        this.handleWeightChange = (event) => {\n            const { value } = event.currentTarget;\n            this.setState({\n                weight: _.toInteger(value),\n            });\n        };\n        this.changeService = (serviceName) => {\n            const service = _.find(this.state.services, { metadata: { name: serviceName } });\n            const portOptions = getPortOptions(service);\n            this.setState({\n                service,\n                portOptions,\n                // unset targetPort if previously set\n                targetPort: '',\n            });\n        };\n        this.changeTargetPort = (targetPort) => this.setState({\n            targetPort,\n        });\n        this.toggleSection = (event) => {\n            const { name, checked } = event.currentTarget;\n            this.setState({\n                [name]: checked,\n            });\n        };\n        this.changeTermination = (termination) => {\n            const newState = {\n                termination,\n                // unset insecureEdgeTerminationPolicy if it was set\n                insecureEdgeTerminationPolicy: '',\n            };\n            switch (termination) {\n                case 'edge':\n                    // unset tls data if it was set\n                    newState.destinationCACertificate = '';\n                    break;\n                case 'passthrough':\n                    Object.assign(newState, {\n                        // unset tls data if it was set\n                        certificate: '',\n                        key: '',\n                        caCertificate: '',\n                        destinationCACertificate: '',\n                    });\n                    break;\n                default:\n            }\n            this.setState(newState);\n        };\n        this.changeInsecureTraffic = (insecureEdgeTerminationPolicy) => this.setState({ insecureEdgeTerminationPolicy });\n        this.onCertificateChange = (certificate) => this.setState({ certificate });\n        this.onPrivateKeyChange = (key) => this.setState({ key });\n        this.onCaCertificateChange = (caCertificate) => this.setState({ caCertificate });\n        this.onDestinationCACertificateChange = (destinationCACertificate) => this.setState({ destinationCACertificate });\n        this.save = (event) => {\n            event.preventDefault();\n            const { name, hostname, path, service, weight, targetPort: selectedPort, termination, insecureEdgeTerminationPolicy, certificate, key, caCertificate, destinationCACertificate, secure, namespace, alternateServices, } = this.state;\n            const tls = secure\n                ? {\n                    termination,\n                    insecureEdgeTerminationPolicy,\n                    certificate,\n                    key,\n                    caCertificate,\n                    destinationCACertificate,\n                }\n                : null;\n            const serviceName = _.get(service, 'metadata.name');\n            const labels = _.get(service, 'metadata.labels');\n            // If the port is unnamed, there is only one port. Use the port number.\n            const targetPort = selectedPort === UNNAMED_PORT_KEY\n                ? _.get(service, 'spec.ports[0].targetPort') || _.get(service, 'spec.ports[0].port')\n                : selectedPort;\n            const alternateBackends = _.filter(alternateServices, 'name').map((serviceData) => {\n                return {\n                    weight: serviceData.weight,\n                    kind: 'Service',\n                    name: serviceData.name,\n                };\n            });\n            const route = {\n                kind: 'Route',\n                apiVersion: 'route.openshift.io/v1',\n                metadata: {\n                    name,\n                    namespace,\n                    labels,\n                },\n                spec: {\n                    to: {\n                        kind: 'Service',\n                        name: serviceName,\n                        weight,\n                    },\n                    tls,\n                    host: hostname,\n                    path,\n                    port: {\n                        targetPort,\n                    },\n                },\n            };\n            if (!_.isEmpty(alternateBackends)) {\n                route.spec.alternateBackends = alternateBackends;\n            }\n            this.setState({ inProgress: true });\n            k8sCreate(RouteModel, route).then(() => {\n                this.setState({ inProgress: false });\n                history.push(resourcePathFromModel(RouteModel, name, namespace));\n            }, (err) => this.setState({\n                error: err.message,\n                inProgress: false,\n            }));\n        };\n        this.addAltServiceEntry = () => {\n            this.setState(({ alternateServices }) => {\n                return {\n                    alternateServices: [\n                        ...alternateServices,\n                        { name: null, weight: 100, key: _.uniqueId('alternate-backend-') },\n                    ],\n                };\n            });\n        };\n        this.onDataChanged = (updatedEntry, index) => {\n            this.setState(({ alternateServices }) => {\n                const updatedServiceEntriesArray = [...alternateServices];\n                const updatedEntryData = {\n                    key: updatedServiceEntriesArray[index].key,\n                    weight: updatedEntry.weight,\n                    name: updatedEntry.name,\n                };\n                updatedServiceEntriesArray[index] = updatedEntryData;\n                return {\n                    alternateServices: updatedServiceEntriesArray,\n                };\n            });\n        };\n    }\n    componentDidMount() {\n        k8sList(ServiceModel, { ns: this.state.namespace })\n            .then((services) => this.setState({\n            services,\n            loaded: true,\n        }))\n            .catch((err) => this.setState({\n            error: err.message,\n        }));\n    }\n    removeAltServiceEntry(alternateServiceIndex) {\n        this.setState(({ alternateServices }) => {\n            const updatedServiceEntriesArray = [...alternateServices];\n            updatedServiceEntriesArray.splice(alternateServiceIndex, 1);\n            return {\n                alternateServices: updatedServiceEntriesArray,\n            };\n        });\n    }\n    render() {\n        const title = 'Create Route';\n        const { loaded, services, service, portOptions, targetPort, termination, alternateServices, } = this.state;\n        const serviceOptions = {};\n        _.each(_.sortBy(services, 'metadata.name'), ({ metadata: { name } }) => (serviceOptions[name] = React.createElement(ResourceName, { kind: \"Service\", name: name })));\n        const configuredServices = new Set();\n        if (service) {\n            configuredServices.add(service.metadata.name);\n        }\n        _.each(alternateServices, ({ name }) => configuredServices.add(name));\n        const availableServiceOptions = _.pickBy(serviceOptions, (item, key) => !configuredServices.has(key));\n        const terminationTypes = {\n            edge: 'Edge',\n            passthrough: 'Passthrough',\n            reencrypt: 'Re-encrypt',\n        };\n        const insecureTrafficTypes = {\n            None: 'None',\n            Allow: 'Allow',\n            Redirect: 'Redirect',\n        };\n        const passthroughInsecureTrafficTypes = {\n            None: 'None',\n            Redirect: 'Redirect',\n        };\n        const alternateServicesList = _.map(alternateServices, (entryData, index) => {\n            return (React.createElement(\"div\", { className: \"co-add-remove-form__entry\", key: entryData.key },\n                !_.isEmpty(alternateServices) && (React.createElement(\"div\", { className: \"co-add-remove-form__link--remove-entry\" },\n                    React.createElement(Button, { type: \"button\", onClick: () => this.removeAltServiceEntry(index), variant: \"link\", isInline: true },\n                        React.createElement(MinusCircleIcon, { className: \"co-icon-space-r\" }),\n                        \"Remove Alternate Service\"))),\n                React.createElement(AlternateServicesGroup, { index: index, name: entryData.name, weight: entryData.weight, onChange: this.onDataChanged, serviceOptions: serviceOptions, availableServiceOptions: availableServiceOptions })));\n        });\n        return (React.createElement(React.Fragment, null,\n            React.createElement(\"div\", { className: \"co-m-pane__body co-m-pane__form\" },\n                React.createElement(\"h1\", { className: \"co-m-pane__heading co-m-pane__heading--baseline\" },\n                    React.createElement(\"div\", { className: \"co-m-pane__name\" }, title),\n                    React.createElement(\"div\", { className: \"co-m-pane__heading-link\" },\n                        React.createElement(Link, { to: `/k8s/ns/${this.state.namespace}/routes/~new`, id: \"yaml-link\", replace: true }, \"Edit YAML\"))),\n                React.createElement(\"p\", { className: \"co-m-pane__explanation\" }, \"Routing is a way to make your application publicly visible.\"),\n                React.createElement(\"form\", { onSubmit: this.save, className: \"co-create-route\" },\n                    React.createElement(\"div\", { className: \"form-group co-create-route__name\" },\n                        React.createElement(\"label\", { className: \"co-required\", htmlFor: \"name\" }, \"Name\"),\n                        React.createElement(\"input\", { className: \"pf-c-form-control\", type: \"text\", onChange: this.handleChange, value: this.state.name, placeholder: \"my-route\", id: \"name\", name: \"name\", \"aria-describedby\": \"name-help\", required: true }),\n                        React.createElement(\"div\", { className: \"help-block\", id: \"name-help\" },\n                            React.createElement(\"p\", null, \"A unique name for the route within the project.\"))),\n                    React.createElement(\"div\", { className: \"form-group co-create-route__hostname\" },\n                        React.createElement(\"label\", { htmlFor: \"hostname\" }, \"Hostname\"),\n                        React.createElement(\"input\", { className: \"pf-c-form-control\", type: \"text\", onChange: this.handleChange, value: this.state.hostname, placeholder: \"www.example.com\", id: \"hostname\", name: \"hostname\", \"aria-describedby\": \"hostname-help\" }),\n                        React.createElement(\"div\", { className: \"help-block\", id: \"hostname-help\" },\n                            React.createElement(\"p\", null, \"Public hostname for the route. If not specified, a hostname is generated.\"))),\n                    React.createElement(\"div\", { className: \"form-group co-create-route__path\" },\n                        React.createElement(\"label\", { htmlFor: \"path\" }, \"Path\"),\n                        React.createElement(\"input\", { className: \"pf-c-form-control\", type: \"text\", onChange: this.handleChange, value: this.state.path, placeholder: \"/\", id: \"path\", name: \"path\", \"aria-describedby\": \"path-help\" }),\n                        React.createElement(\"div\", { className: \"help-block\", id: \"path-help\" },\n                            React.createElement(\"p\", null, \"Path that the router watches to route traffic to the service.\"))),\n                    React.createElement(\"div\", { className: \"form-group co-create-route__service\" },\n                        React.createElement(\"label\", { className: \"co-required\", htmlFor: \"service\" }, \"Service\"),\n                        loaded && _.isEmpty(serviceOptions) && (React.createElement(Alert, { isInline: true, className: \"co-alert co-create-route__alert\", variant: \"info\", title: \"No services\" }, \"There are no services in your project to expose with a route.\")),\n                        loaded && !_.isEmpty(serviceOptions) && (React.createElement(Dropdown, { items: availableServiceOptions, title: service ? serviceOptions[service.metadata.name] : 'Select a service', dropDownClassName: \"dropdown--full-width\", id: \"service\", onChange: this.changeService, describedBy: \"service-help\" })),\n                        React.createElement(\"div\", { className: \"help-block\", id: \"service-help\" },\n                            React.createElement(\"p\", null, \"Service to route to.\"))),\n                    alternateServicesList.length > 0 && (React.createElement(React.Fragment, null,\n                        React.createElement(\"div\", { className: \"form-group co-create-route__weight\" },\n                            React.createElement(\"label\", { htmlFor: \"weight\" }, \"Weight\"),\n                            React.createElement(\"input\", { className: \"pf-c-form-control co-create-route__weight-label\", type: \"number\", onChange: this.handleWeightChange, value: this.state.weight, id: \"weight\", \"aria-describedby\": \"weight-help\" }),\n                            React.createElement(\"div\", { className: \"help-block\", id: \"weight-help\" },\n                                React.createElement(\"p\", null, \"A number between 0 and 255 that depicts relative weight compared with other targets.\"))),\n                        alternateServicesList)),\n                    alternateServicesList.length < MAX_ALT_SERVICE_TARGET &&\n                        alternateServicesList.length + 1 < _.keys(serviceOptions).length &&\n                        service && (React.createElement(Button, { className: \"pf-m-link--align-left co-create-route__add-service-btn\", onClick: this.addAltServiceEntry, type: \"button\", variant: \"link\", isInline: true },\n                        React.createElement(PlusCircleIcon, { className: \"co-icon-space-r\" }),\n                        \"Add Alternate Service\")),\n                    React.createElement(\"div\", { className: \"form-group co-create-route__target-port\" },\n                        React.createElement(\"label\", { className: \"co-required\", htmlFor: \"target-port\" }, \"Target Port\"),\n                        _.isEmpty(portOptions) && React.createElement(\"p\", null, \"Select a service above\"),\n                        !_.isEmpty(portOptions) && (React.createElement(Dropdown, { items: portOptions, title: portOptions[targetPort] || 'Select target port', dropDownClassName: \"dropdown--full-width\", id: \"target-port\", onChange: this.changeTargetPort, describedBy: \"target-port-help\" })),\n                        React.createElement(\"div\", { className: \"help-block\", id: \"target-port-help\" },\n                            React.createElement(\"p\", null, \"Target port for traffic.\"))),\n                    React.createElement(\"div\", { className: \"form-group co-create-route__security\" },\n                        React.createElement(\"label\", { className: \"control-label\" }, \"Security\"),\n                        React.createElement(\"div\", { className: \"checkbox\" },\n                            React.createElement(\"label\", null,\n                                React.createElement(\"input\", { type: \"checkbox\", onChange: this.toggleSection, checked: this.state.secure, id: \"secure\", name: \"secure\", \"aria-describedby\": \"secure-help\" }),\n                                \"Secure route\"),\n                            React.createElement(\"div\", { className: \"help-block\", id: \"secure-help\" },\n                                React.createElement(\"p\", null, \"Routes can be secured using several TLS termination types for serving certificates.\"))),\n                        this.state.secure && (React.createElement(\"div\", { className: \"co-create-route__security\" },\n                            React.createElement(\"div\", { className: \"form-group co-create-route__tls-termination\" },\n                                React.createElement(\"label\", { className: \"co-required\", htmlFor: \"tls-termination\" }, \"TLS Termination\"),\n                                React.createElement(Dropdown, { items: terminationTypes, title: \"Select termination type\", dropDownClassName: \"dropdown--full-width\", id: \"tls-termination\", onChange: this.changeTermination })),\n                            React.createElement(\"div\", { className: \"form-group co-create-route__insecure-traffic\" },\n                                React.createElement(\"label\", { htmlFor: \"insecure-traffic\" }, \"Insecure Traffic\"),\n                                React.createElement(Dropdown, { items: termination === 'passthrough'\n                                        ? passthroughInsecureTrafficTypes\n                                        : insecureTrafficTypes, title: \"Select insecure traffic type\", dropDownClassName: \"dropdown--full-width\", id: \"insecure-traffic\", onChange: this.changeInsecureTraffic, describedBy: \"insecure-traffic-help\" }),\n                                React.createElement(\"div\", { className: \"help-block\", id: \"insecure-traffic-help\" },\n                                    React.createElement(\"p\", null, \"Policy for traffic on insecure schemes like HTTP.\"))),\n                            termination && termination !== 'passthrough' && (React.createElement(React.Fragment, null,\n                                React.createElement(\"h2\", { className: \"h3\" }, \"Certificates\"),\n                                React.createElement(\"div\", { className: \"help-block\" },\n                                    React.createElement(\"p\", null, \"TLS certificates for edge and re-encrypt termination. If not specified, the router's default certificate is used.\")),\n                                React.createElement(\"div\", { className: \"form-group co-create-route__certificate\" },\n                                    React.createElement(DroppableFileInput, { onChange: this.onCertificateChange, inputFileData: this.state.certificate, id: \"certificate\", label: \"Certificate\", inputFieldHelpText: \"The PEM format certificate. Upload file by dragging & dropping, selecting it, or pasting from the clipboard.\" })),\n                                React.createElement(\"div\", { className: \"form-group co-create-route__private-key\" },\n                                    React.createElement(DroppableFileInput, { onChange: this.onPrivateKeyChange, inputFileData: this.state.key, id: \"private-key\", label: \"Private Key\", inputFieldHelpText: \"The PEM format key. Upload file by dragging & dropping, selecting it, or pasting from the clipboard.\" })),\n                                React.createElement(\"div\", { className: \"form-group co-create-route__caCertificate\" },\n                                    React.createElement(DroppableFileInput, { onChange: this.onCaCertificateChange, inputFileData: this.state.caCertificate, id: \"ca-certificate\", label: \"CA Certificate\", inputFieldHelpText: \"The PEM format CA certificate chain. Upload file by dragging & dropping, selecting it, or pasting from the clipboard.\" })),\n                                termination === 'reencrypt' && (React.createElement(\"div\", { className: \"form-group co-create-route__destinationCaCertificate\" },\n                                    React.createElement(DroppableFileInput, { onChange: this.onDestinationCACertificateChange, inputFileData: this.state.destinationCACertificate, id: \"destination-ca-certificate\", label: \"Destination CA Certificate\" }))))))),\n                        React.createElement(ButtonBar, { errorMessage: this.state.error, inProgress: this.state.inProgress },\n                            React.createElement(ActionGroup, { className: \"pf-c-form\" },\n                                React.createElement(Button, { type: \"submit\", isDisabled: !this.state.name ||\n                                        !this.state.service ||\n                                        !this.state.targetPort ||\n                                        (this.state.secure && !this.state.termination), id: \"save-changes\", variant: \"primary\" }, \"Create\"),\n                                React.createElement(Button, { onClick: history.goBack, id: \"cancel\", variant: \"secondary\" }, \"Cancel\"))))))));\n    }\n}\nexport const AlternateServicesGroup = (props) => {\n    const [weight, setWeight] = React.useState(props.weight);\n    const [name, setName] = React.useState(props.name);\n    const onWeightChange = (event) => {\n        setWeight(_.toInteger(event.currentTarget.value));\n    };\n    const onServiceChange = (serviceName) => {\n        setName(serviceName);\n    };\n    const { serviceOptions, availableServiceOptions, index, onChange } = props;\n    React.useEffect(() => {\n        onChange({ name, weight }, index);\n    }, [name, weight, index, onChange]);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: \"form-group\" },\n            React.createElement(\"label\", { htmlFor: `${index}-alt-service` }, \"Alternate Service Target\"),\n            React.createElement(Dropdown, { items: availableServiceOptions, title: name ? serviceOptions[name] : 'Select a service', dropDownClassName: \"dropdown--full-width\", id: `${index}-alt-service`, onChange: onServiceChange, describedby: `${index}-alt-service-help` }),\n            React.createElement(\"div\", { className: \"help-block\", id: `${index}-alt-service-help` },\n                React.createElement(\"p\", null, \"Alternate service to route to.\"))),\n        React.createElement(\"div\", { className: \"form-group\" },\n            React.createElement(\"label\", { htmlFor: `${index}-weight` }, \"Alternate Service Weight\"),\n            React.createElement(\"input\", { className: \"pf-c-form-control co-create-route__weight-label\", id: `${index}-weight`, type: \"number\", onChange: onWeightChange, value: weight, \"aria-describedby\": `${index}-alt-weight-help` }),\n            React.createElement(\"div\", { className: \"help-block\", id: `${index}-alt-weight-help` },\n                React.createElement(\"p\", null, \"A number between 0 and 255 that depicts relative weight compared with other targets.\")))));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/routes/create-route.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/routes/create-route.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Alert, ActionGroup, Button } from '@patternfly/react-core';\nimport { PlusCircleIcon, MinusCircleIcon } from '@patternfly/react-icons';\n\nimport { ButtonBar, Dropdown, history, resourcePathFromModel, ResourceName } from '../utils';\nimport { k8sCreate, k8sList, K8sResourceKind } from '../../module/k8s';\nimport { getActiveNamespace } from '../../actions/ui';\nimport { ServiceModel, RouteModel } from '../../models';\nimport { AsyncComponent } from '../utils/async';\n\nconst UNNAMED_PORT_KEY = '#unnamed';\nconst MAX_ALT_SERVICE_TARGET = 3;\n\nconst getPortOptions = (service: K8sResourceKind) => {\n  if (!service) {\n    return {};\n  }\n\n  const ports = _.get(service, 'spec.ports', []);\n  const portOptions = ports.reduce(\n    (acc, { name = UNNAMED_PORT_KEY, port, targetPort, protocol }) => {\n      acc[name] = (\n        <>\n          {port} &rarr; {targetPort} ({protocol})\n        </>\n      );\n      return acc;\n    },\n    {},\n  );\n\n  return portOptions;\n};\n\nconst DroppableFileInput = (props) => (\n  <AsyncComponent\n    loader={() => import('../utils/file-input').then((c) => c.DroppableFileInput)}\n    {...props}\n  />\n);\n\nexport class CreateRoute extends React.Component<{}, CreateRouteState> {\n  state = {\n    name: '',\n    hostname: '',\n    path: '',\n    service: null,\n    weight: 100,\n    targetPort: '',\n    termination: '',\n    insecureEdgeTerminationPolicy: '',\n    certificate: '',\n    key: '',\n    caCertificate: '',\n    destinationCACertificate: '',\n    secure: false,\n    loaded: false,\n    inProgress: false,\n    error: '',\n    namespace: getActiveNamespace(),\n    services: [],\n    labels: {},\n    portOptions: {},\n    alternateServices: [],\n  };\n\n  componentDidMount() {\n    k8sList(ServiceModel, { ns: this.state.namespace })\n      .then((services) =>\n        this.setState({\n          services,\n          loaded: true,\n        }),\n      )\n      .catch((err) =>\n        this.setState({\n          error: err.message,\n        }),\n      );\n  }\n\n  handleChange: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    const { name, value } = event.currentTarget;\n    this.setState({\n      [name]: value,\n    } as any);\n  };\n\n  handleWeightChange: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    const { value } = event.currentTarget;\n    this.setState({\n      weight: _.toInteger(value),\n    });\n  };\n\n  changeService = (serviceName: string) => {\n    const service = _.find(this.state.services, { metadata: { name: serviceName } });\n    const portOptions = getPortOptions(service);\n    this.setState({\n      service,\n      portOptions,\n      // unset targetPort if previously set\n      targetPort: '',\n    });\n  };\n\n  changeTargetPort = (targetPort: string) =>\n    this.setState({\n      targetPort,\n    });\n\n  toggleSection: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    const { name, checked } = event.currentTarget;\n    this.setState({\n      [name]: checked,\n    } as any);\n  };\n\n  changeTermination = (termination: string) => {\n    const newState: any = {\n      termination,\n      // unset insecureEdgeTerminationPolicy if it was set\n      insecureEdgeTerminationPolicy: '',\n    };\n    switch (termination) {\n      case 'edge':\n        // unset tls data if it was set\n        newState.destinationCACertificate = '';\n        break;\n      case 'passthrough':\n        Object.assign(newState, {\n          // unset tls data if it was set\n          certificate: '',\n          key: '',\n          caCertificate: '',\n          destinationCACertificate: '',\n        });\n        break;\n      default:\n    }\n    this.setState(newState);\n  };\n\n  changeInsecureTraffic = (insecureEdgeTerminationPolicy: string) =>\n    this.setState({ insecureEdgeTerminationPolicy });\n\n  onCertificateChange = (certificate: string) => this.setState({ certificate });\n\n  onPrivateKeyChange = (key: string) => this.setState({ key });\n\n  onCaCertificateChange = (caCertificate: string) => this.setState({ caCertificate });\n\n  onDestinationCACertificateChange = (destinationCACertificate: string) =>\n    this.setState({ destinationCACertificate });\n\n  save = (event) => {\n    event.preventDefault();\n\n    const {\n      name,\n      hostname,\n      path,\n      service,\n      weight,\n      targetPort: selectedPort,\n      termination,\n      insecureEdgeTerminationPolicy,\n      certificate,\n      key,\n      caCertificate,\n      destinationCACertificate,\n      secure,\n      namespace,\n      alternateServices,\n    } = this.state;\n\n    const tls = secure\n      ? {\n          termination,\n          insecureEdgeTerminationPolicy,\n          certificate,\n          key,\n          caCertificate,\n          destinationCACertificate,\n        }\n      : null;\n\n    const serviceName = _.get(service, 'metadata.name');\n    const labels = _.get(service, 'metadata.labels');\n\n    // If the port is unnamed, there is only one port. Use the port number.\n    const targetPort =\n      selectedPort === UNNAMED_PORT_KEY\n        ? _.get(service, 'spec.ports[0].targetPort') || _.get(service, 'spec.ports[0].port')\n        : selectedPort;\n\n    const alternateBackends = _.filter(alternateServices, 'name').map(\n      (serviceData: AlternateServiceEntryType) => {\n        return {\n          weight: serviceData.weight,\n          kind: 'Service',\n          name: serviceData.name,\n        };\n      },\n    );\n\n    const route: K8sResourceKind = {\n      kind: 'Route',\n      apiVersion: 'route.openshift.io/v1',\n      metadata: {\n        name,\n        namespace,\n        labels,\n      },\n      spec: {\n        to: {\n          kind: 'Service',\n          name: serviceName,\n          weight,\n        },\n        tls,\n        host: hostname,\n        path,\n        port: {\n          targetPort,\n        },\n      },\n    };\n\n    if (!_.isEmpty(alternateBackends)) {\n      route.spec.alternateBackends = alternateBackends;\n    }\n\n    this.setState({ inProgress: true });\n    k8sCreate(RouteModel, route).then(\n      () => {\n        this.setState({ inProgress: false });\n        history.push(resourcePathFromModel(RouteModel, name, namespace));\n      },\n      (err) =>\n        this.setState({\n          error: err.message,\n          inProgress: false,\n        }),\n    );\n  };\n\n  addAltServiceEntry = () => {\n    this.setState(({ alternateServices }) => {\n      return {\n        alternateServices: [\n          ...alternateServices,\n          { name: null, weight: 100, key: _.uniqueId('alternate-backend-') },\n        ],\n      };\n    });\n  };\n\n  removeAltServiceEntry(alternateServiceIndex: number) {\n    this.setState(({ alternateServices }) => {\n      const updatedServiceEntriesArray: AlternateServiceEntryType[] = [...alternateServices];\n      updatedServiceEntriesArray.splice(alternateServiceIndex, 1);\n      return {\n        alternateServices: updatedServiceEntriesArray,\n      };\n    });\n  }\n\n  onDataChanged = (updatedEntry: AlternateServiceEntryGroupData, index: number) => {\n    this.setState(({ alternateServices }) => {\n      const updatedServiceEntriesArray: AlternateServiceEntryType[] = [...alternateServices];\n      const updatedEntryData: AlternateServiceEntryType = {\n        key: updatedServiceEntriesArray[index].key,\n        weight: updatedEntry.weight,\n        name: updatedEntry.name,\n      };\n      updatedServiceEntriesArray[index] = updatedEntryData;\n      return {\n        alternateServices: updatedServiceEntriesArray,\n      };\n    });\n  };\n\n  render() {\n    const title = 'Create Route';\n    const {\n      loaded,\n      services,\n      service,\n      portOptions,\n      targetPort,\n      termination,\n      alternateServices,\n    } = this.state;\n    const serviceOptions = {};\n    _.each(\n      _.sortBy(services, 'metadata.name'),\n      ({ metadata: { name } }) =>\n        (serviceOptions[name] = <ResourceName kind=\"Service\" name={name} />),\n    );\n    const configuredServices = new Set<string>();\n    if (service) {\n      configuredServices.add(service.metadata.name);\n    }\n    _.each(alternateServices, ({ name }) => configuredServices.add(name));\n    const availableServiceOptions = _.pickBy(\n      serviceOptions,\n      (item, key) => !configuredServices.has(key),\n    );\n    const terminationTypes = {\n      edge: 'Edge',\n      passthrough: 'Passthrough',\n      reencrypt: 'Re-encrypt',\n    };\n    const insecureTrafficTypes = {\n      None: 'None',\n      Allow: 'Allow',\n      Redirect: 'Redirect',\n    };\n    const passthroughInsecureTrafficTypes = {\n      None: 'None',\n      Redirect: 'Redirect',\n    };\n    const alternateServicesList = _.map(alternateServices, (entryData, index) => {\n      return (\n        <div className=\"co-add-remove-form__entry\" key={entryData.key}>\n          {!_.isEmpty(alternateServices) && (\n            <div className=\"co-add-remove-form__link--remove-entry\">\n              <Button\n                type=\"button\"\n                onClick={() => this.removeAltServiceEntry(index)}\n                variant=\"link\"\n                isInline\n              >\n                <MinusCircleIcon className=\"co-icon-space-r\" />\n                Remove Alternate Service\n              </Button>\n            </div>\n          )}\n          <AlternateServicesGroup\n            index={index}\n            name={entryData.name}\n            weight={entryData.weight}\n            onChange={this.onDataChanged}\n            serviceOptions={serviceOptions}\n            availableServiceOptions={availableServiceOptions}\n          />\n        </div>\n      );\n    });\n\n    return (\n      <>\n        <div className=\"co-m-pane__body co-m-pane__form\">\n          <h1 className=\"co-m-pane__heading co-m-pane__heading--baseline\">\n            <div className=\"co-m-pane__name\">{title}</div>\n            <div className=\"co-m-pane__heading-link\">\n              <Link to={`/k8s/ns/${this.state.namespace}/routes/~new`} id=\"yaml-link\" replace>\n                Edit YAML\n              </Link>\n            </div>\n          </h1>\n          <p className=\"co-m-pane__explanation\">\n            Routing is a way to make your application publicly visible.\n          </p>\n          <form onSubmit={this.save} className=\"co-create-route\">\n            <div className=\"form-group co-create-route__name\">\n              <label className=\"co-required\" htmlFor=\"name\">\n                Name\n              </label>\n              <input\n                className=\"pf-c-form-control\"\n                type=\"text\"\n                onChange={this.handleChange}\n                value={this.state.name}\n                placeholder=\"my-route\"\n                id=\"name\"\n                name=\"name\"\n                aria-describedby=\"name-help\"\n                required\n              />\n              <div className=\"help-block\" id=\"name-help\">\n                <p>A unique name for the route within the project.</p>\n              </div>\n            </div>\n            <div className=\"form-group co-create-route__hostname\">\n              <label htmlFor=\"hostname\">Hostname</label>\n              <input\n                className=\"pf-c-form-control\"\n                type=\"text\"\n                onChange={this.handleChange}\n                value={this.state.hostname}\n                placeholder=\"www.example.com\"\n                id=\"hostname\"\n                name=\"hostname\"\n                aria-describedby=\"hostname-help\"\n              />\n              <div className=\"help-block\" id=\"hostname-help\">\n                <p>Public hostname for the route. If not specified, a hostname is generated.</p>\n              </div>\n            </div>\n            <div className=\"form-group co-create-route__path\">\n              <label htmlFor=\"path\">Path</label>\n              <input\n                className=\"pf-c-form-control\"\n                type=\"text\"\n                onChange={this.handleChange}\n                value={this.state.path}\n                placeholder=\"/\"\n                id=\"path\"\n                name=\"path\"\n                aria-describedby=\"path-help\"\n              />\n              <div className=\"help-block\" id=\"path-help\">\n                <p>Path that the router watches to route traffic to the service.</p>\n              </div>\n            </div>\n            <div className=\"form-group co-create-route__service\">\n              <label className=\"co-required\" htmlFor=\"service\">\n                Service\n              </label>\n              {loaded && _.isEmpty(serviceOptions) && (\n                <Alert\n                  isInline\n                  className=\"co-alert co-create-route__alert\"\n                  variant=\"info\"\n                  title=\"No services\"\n                >\n                  There are no services in your project to expose with a route.\n                </Alert>\n              )}\n              {loaded && !_.isEmpty(serviceOptions) && (\n                <Dropdown\n                  items={availableServiceOptions}\n                  title={service ? serviceOptions[service.metadata.name] : 'Select a service'}\n                  dropDownClassName=\"dropdown--full-width\"\n                  id=\"service\"\n                  onChange={this.changeService}\n                  describedBy=\"service-help\"\n                />\n              )}\n              <div className=\"help-block\" id=\"service-help\">\n                <p>Service to route to.</p>\n              </div>\n            </div>\n            {alternateServicesList.length > 0 && (\n              <>\n                <div className=\"form-group co-create-route__weight\">\n                  <label htmlFor=\"weight\">Weight</label>\n                  <input\n                    className=\"pf-c-form-control co-create-route__weight-label\"\n                    type=\"number\"\n                    onChange={this.handleWeightChange}\n                    value={this.state.weight}\n                    id=\"weight\"\n                    aria-describedby=\"weight-help\"\n                  />\n                  <div className=\"help-block\" id=\"weight-help\">\n                    <p>\n                      A number between 0 and 255 that depicts relative weight compared with other\n                      targets.\n                    </p>\n                  </div>\n                </div>\n                {alternateServicesList}\n              </>\n            )}\n            {alternateServicesList.length < MAX_ALT_SERVICE_TARGET &&\n              alternateServicesList.length + 1 < _.keys(serviceOptions).length &&\n              service && (\n                <Button\n                  className=\"pf-m-link--align-left co-create-route__add-service-btn\"\n                  onClick={this.addAltServiceEntry}\n                  type=\"button\"\n                  variant=\"link\"\n                  isInline\n                >\n                  <PlusCircleIcon className=\"co-icon-space-r\" />\n                  Add Alternate Service\n                </Button>\n              )}\n            <div className=\"form-group co-create-route__target-port\">\n              <label className=\"co-required\" htmlFor=\"target-port\">\n                Target Port\n              </label>\n              {_.isEmpty(portOptions) && <p>Select a service above</p>}\n              {!_.isEmpty(portOptions) && (\n                <Dropdown\n                  items={portOptions}\n                  title={portOptions[targetPort] || 'Select target port'}\n                  dropDownClassName=\"dropdown--full-width\"\n                  id=\"target-port\"\n                  onChange={this.changeTargetPort}\n                  describedBy=\"target-port-help\"\n                />\n              )}\n              <div className=\"help-block\" id=\"target-port-help\">\n                <p>Target port for traffic.</p>\n              </div>\n            </div>\n            <div className=\"form-group co-create-route__security\">\n              <label className=\"control-label\">Security</label>\n              <div className=\"checkbox\">\n                <label>\n                  <input\n                    type=\"checkbox\"\n                    onChange={this.toggleSection}\n                    checked={this.state.secure}\n                    id=\"secure\"\n                    name=\"secure\"\n                    aria-describedby=\"secure-help\"\n                  />\n                  Secure route\n                </label>\n                <div className=\"help-block\" id=\"secure-help\">\n                  <p>\n                    Routes can be secured using several TLS termination types for serving\n                    certificates.\n                  </p>\n                </div>\n              </div>\n              {this.state.secure && (\n                <div className=\"co-create-route__security\">\n                  <div className=\"form-group co-create-route__tls-termination\">\n                    <label className=\"co-required\" htmlFor=\"tls-termination\">\n                      TLS Termination\n                    </label>\n                    <Dropdown\n                      items={terminationTypes}\n                      title=\"Select termination type\"\n                      dropDownClassName=\"dropdown--full-width\"\n                      id=\"tls-termination\"\n                      onChange={this.changeTermination}\n                    />\n                  </div>\n                  <div className=\"form-group co-create-route__insecure-traffic\">\n                    <label htmlFor=\"insecure-traffic\">Insecure Traffic</label>\n                    <Dropdown\n                      items={\n                        termination === 'passthrough'\n                          ? passthroughInsecureTrafficTypes\n                          : insecureTrafficTypes\n                      }\n                      title=\"Select insecure traffic type\"\n                      dropDownClassName=\"dropdown--full-width\"\n                      id=\"insecure-traffic\"\n                      onChange={this.changeInsecureTraffic}\n                      describedBy=\"insecure-traffic-help\"\n                    />\n                    <div className=\"help-block\" id=\"insecure-traffic-help\">\n                      <p>Policy for traffic on insecure schemes like HTTP.</p>\n                    </div>\n                  </div>\n                  {termination && termination !== 'passthrough' && (\n                    <>\n                      <h2 className=\"h3\">Certificates</h2>\n                      <div className=\"help-block\">\n                        <p>\n                          TLS certificates for edge and re-encrypt termination. If not specified,\n                          the router&apos;s default certificate is used.\n                        </p>\n                      </div>\n                      <div className=\"form-group co-create-route__certificate\">\n                        <DroppableFileInput\n                          onChange={this.onCertificateChange}\n                          inputFileData={this.state.certificate}\n                          id=\"certificate\"\n                          label=\"Certificate\"\n                          inputFieldHelpText=\"The PEM format certificate. Upload file by dragging &amp; dropping, selecting it, or pasting from the clipboard.\"\n                        />\n                      </div>\n                      <div className=\"form-group co-create-route__private-key\">\n                        <DroppableFileInput\n                          onChange={this.onPrivateKeyChange}\n                          inputFileData={this.state.key}\n                          id=\"private-key\"\n                          label=\"Private Key\"\n                          inputFieldHelpText=\"The PEM format key. Upload file by dragging &amp; dropping, selecting it, or pasting from the clipboard.\"\n                        />\n                      </div>\n                      <div className=\"form-group co-create-route__caCertificate\">\n                        <DroppableFileInput\n                          onChange={this.onCaCertificateChange}\n                          inputFileData={this.state.caCertificate}\n                          id=\"ca-certificate\"\n                          label=\"CA Certificate\"\n                          inputFieldHelpText=\"The PEM format CA certificate chain. Upload file by dragging &amp; dropping, selecting it, or pasting from the clipboard.\"\n                        />\n                      </div>\n                      {termination === 'reencrypt' && (\n                        <div className=\"form-group co-create-route__destinationCaCertificate\">\n                          <DroppableFileInput\n                            onChange={this.onDestinationCACertificateChange}\n                            inputFileData={this.state.destinationCACertificate}\n                            id=\"destination-ca-certificate\"\n                            label=\"Destination CA Certificate\"\n                          />\n                        </div>\n                      )}\n                    </>\n                  )}\n                </div>\n              )}\n              <ButtonBar errorMessage={this.state.error} inProgress={this.state.inProgress}>\n                <ActionGroup className=\"pf-c-form\">\n                  <Button\n                    type=\"submit\"\n                    isDisabled={\n                      !this.state.name ||\n                      !this.state.service ||\n                      !this.state.targetPort ||\n                      (this.state.secure && !this.state.termination)\n                    }\n                    id=\"save-changes\"\n                    variant=\"primary\"\n                  >\n                    Create\n                  </Button>\n                  <Button onClick={history.goBack} id=\"cancel\" variant=\"secondary\">\n                    Cancel\n                  </Button>\n                </ActionGroup>\n              </ButtonBar>\n            </div>\n          </form>\n        </div>\n      </>\n    );\n  }\n}\n\nexport const AlternateServicesGroup: React.FC<AlternateServiceEntryGroupProps> = (props) => {\n  const [weight, setWeight] = React.useState(props.weight);\n  const [name, setName] = React.useState(props.name);\n\n  const onWeightChange: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    setWeight(_.toInteger(event.currentTarget.value));\n  };\n\n  const onServiceChange = (serviceName: string) => {\n    setName(serviceName);\n  };\n\n  const { serviceOptions, availableServiceOptions, index, onChange } = props;\n\n  React.useEffect(() => {\n    onChange({ name, weight }, index);\n  }, [name, weight, index, onChange]);\n\n  return (\n    <>\n      <div className=\"form-group\">\n        <label htmlFor={`${index}-alt-service`}>Alternate Service Target</label>\n        <Dropdown\n          items={availableServiceOptions}\n          title={name ? serviceOptions[name] : 'Select a service'}\n          dropDownClassName=\"dropdown--full-width\"\n          id={`${index}-alt-service`}\n          onChange={onServiceChange}\n          describedby={`${index}-alt-service-help`}\n        />\n        <div className=\"help-block\" id={`${index}-alt-service-help`}>\n          <p>Alternate service to route to.</p>\n        </div>\n      </div>\n      <div className=\"form-group\">\n        <label htmlFor={`${index}-weight`}>Alternate Service Weight</label>\n        <input\n          className=\"pf-c-form-control co-create-route__weight-label\"\n          id={`${index}-weight`}\n          type=\"number\"\n          onChange={onWeightChange}\n          value={weight}\n          aria-describedby={`${index}-alt-weight-help`}\n        />\n        <div className=\"help-block\" id={`${index}-alt-weight-help`}>\n          <p>\n            A number between 0 and 255 that depicts relative weight compared with other targets.\n          </p>\n        </div>\n      </div>\n    </>\n  );\n};\n\ntype AlternateServiceEntryType = {\n  name: string;\n  weight: number;\n  key: string;\n};\n\ntype AlternateServiceEntryGroupData = {\n  weight: number;\n  name: string;\n};\n\ntype AlternateServiceEntryGroupProps = {\n  name: string;\n  weight: number;\n  index: number;\n  onChange: Function;\n  serviceOptions: any;\n  availableServiceOptions: any;\n};\n\nexport type CreateRouteState = {\n  name: string;\n  hostname: string;\n  path: string;\n  service: K8sResourceKind;\n  weight: number;\n  targetPort: string;\n  termination: string;\n  insecureEdgeTerminationPolicy: string;\n  certificate: string;\n  key: string;\n  caCertificate: string;\n  destinationCACertificate: string;\n  secure: boolean;\n  loaded: boolean;\n  inProgress: boolean;\n  error: string;\n  namespace: string;\n  services: K8sResourceKind[];\n  labels: object;\n  portOptions: any;\n  alternateServices: AlternateServiceEntryType[];\n};\n"]}]}