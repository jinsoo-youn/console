{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/clone-vm-modal/configuration-summary.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/clone-vm-modal/configuration-summary.tsx","mtime":1615298458660},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { DASH, getName, getNamespace } from '@console/shared';\nimport { getCPU, getDataVolumeTemplates, getDisks, getFlavor, getInterfaces, getMemory, getOperatingSystemName, getVolumes, getWorkloadProfile, } from '../../../selectors/vm';\nimport { getStorageSize } from '../../../selectors/selectors';\nimport { getDataVolumeResources, getDataVolumeStorageClassName, } from '../../../selectors/dv/selectors';\nimport { getPvcResources, getPvcStorageClassName } from '../../../selectors/pvc/selectors';\nimport { getFlavorText } from '../../../selectors/vm/flavor-text';\nimport './_clone-vm-modal.scss';\nconst getNicsDescription = (vm) => getInterfaces(vm).map(({ name, model }) => (React.createElement(\"div\", { key: name }, model ? `${name} - ${model}` : name)));\nconst getDisksDescription = (vm, pvcs, dataVolumes) => {\n    const disks = getDisks(vm);\n    const volumes = getVolumes(vm);\n    const dataVolumeTemplates = getDataVolumeTemplates(vm);\n    return disks.map((disk) => {\n        const description = [disk.name];\n        const volume = volumes.find((v) => v.name === disk.name);\n        if (volume) {\n            if (volume.dataVolume) {\n                let dataVolume = dataVolumeTemplates.find((dv) => getName(dv) === volume.dataVolume.name);\n                if (!dataVolume) {\n                    dataVolume = dataVolumes.find((dv) => getName(dv) === volume.dataVolume.name && getNamespace(dv) === getNamespace(vm));\n                }\n                description.push(getStorageSize(getDataVolumeResources(dataVolume)), getDataVolumeStorageClassName(dataVolume));\n            }\n            else if (volume.persistentVolumeClaim) {\n                const pvc = pvcs.find((p) => getName(p) === volume.persistentVolumeClaim.claimName);\n                description.push(getStorageSize(getPvcResources(pvc)), getPvcStorageClassName(pvc));\n            }\n            else if (volume.containerDisk) {\n                description.push('container disk');\n            }\n            else if (volume.cloudInitNoCloud) {\n                description.push('cloud-init disk');\n            }\n        }\n        return React.createElement(\"div\", { key: disk.name }, description.join(' - '));\n    });\n};\nexport const ConfigurationSummary = ({ id, vm, persistentVolumeClaims, dataVolumes, }) => {\n    const disks = getDisksDescription(vm, persistentVolumeClaims, dataVolumes);\n    const nics = getNicsDescription(vm);\n    return (React.createElement(\"dl\", { id: id, className: \"kubevirt-clone-vm-modal__configuration-summary\" },\n        React.createElement(\"dt\", null, \"Operating System\"),\n        React.createElement(\"dd\", null, getOperatingSystemName(vm) || DASH),\n        React.createElement(\"dt\", null, \"Flavor\"),\n        React.createElement(\"dd\", null, getFlavorText({\n            flavor: getFlavor(vm),\n            cpu: getCPU(vm),\n            memory: getMemory(vm),\n        })),\n        React.createElement(\"dt\", null, \"Workload Profile\"),\n        React.createElement(\"dd\", null, getWorkloadProfile(vm) || DASH),\n        React.createElement(\"dt\", null, \"NICs\"),\n        React.createElement(\"dd\", null, nics.length > 0 ? nics : DASH),\n        React.createElement(\"dt\", null, \"Disks\"),\n        React.createElement(\"dd\", null, disks.length > 0 ? disks : DASH)));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/clone-vm-modal/configuration-summary.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/clone-vm-modal/configuration-summary.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { DASH, getName, getNamespace } from '@console/shared';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { VMKind } from '../../../types/vm';\nimport {\n  getCPU,\n  getDataVolumeTemplates,\n  getDisks,\n  getFlavor,\n  getInterfaces,\n  getMemory,\n  getOperatingSystemName,\n  getVolumes,\n  getWorkloadProfile,\n} from '../../../selectors/vm';\nimport { getStorageSize } from '../../../selectors/selectors';\nimport {\n  getDataVolumeResources,\n  getDataVolumeStorageClassName,\n} from '../../../selectors/dv/selectors';\nimport { getPvcResources, getPvcStorageClassName } from '../../../selectors/pvc/selectors';\nimport { getFlavorText } from '../../../selectors/vm/flavor-text';\n\nimport './_clone-vm-modal.scss';\n\nconst getNicsDescription = (vm: VMKind) =>\n  getInterfaces(vm).map(({ name, model }) => (\n    <div key={name}>{model ? `${name} - ${model}` : name}</div>\n  ));\n\nconst getDisksDescription = (\n  vm: VMKind,\n  pvcs: K8sResourceKind[],\n  dataVolumes: K8sResourceKind[],\n) => {\n  const disks = getDisks(vm);\n  const volumes = getVolumes(vm);\n  const dataVolumeTemplates = getDataVolumeTemplates(vm);\n  return disks.map((disk) => {\n    const description = [disk.name];\n\n    const volume = volumes.find((v) => v.name === disk.name);\n    if (volume) {\n      if (volume.dataVolume) {\n        let dataVolume = dataVolumeTemplates.find((dv) => getName(dv) === volume.dataVolume.name);\n        if (!dataVolume) {\n          dataVolume = dataVolumes.find(\n            (dv) => getName(dv) === volume.dataVolume.name && getNamespace(dv) === getNamespace(vm),\n          );\n        }\n        description.push(\n          getStorageSize(getDataVolumeResources(dataVolume)),\n          getDataVolumeStorageClassName(dataVolume),\n        );\n      } else if (volume.persistentVolumeClaim) {\n        const pvc = pvcs.find((p) => getName(p) === volume.persistentVolumeClaim.claimName);\n        description.push(getStorageSize(getPvcResources(pvc)), getPvcStorageClassName(pvc));\n      } else if (volume.containerDisk) {\n        description.push('container disk');\n      } else if (volume.cloudInitNoCloud) {\n        description.push('cloud-init disk');\n      }\n    }\n    return <div key={disk.name}>{description.join(' - ')}</div>;\n  });\n};\n\nexport const ConfigurationSummary: React.FC<ConfigurationSummaryProps> = ({\n  id,\n  vm,\n  persistentVolumeClaims,\n  dataVolumes,\n}) => {\n  const disks = getDisksDescription(vm, persistentVolumeClaims, dataVolumes);\n  const nics = getNicsDescription(vm);\n  return (\n    <dl id={id} className=\"kubevirt-clone-vm-modal__configuration-summary\">\n      <dt>Operating System</dt>\n      <dd>{getOperatingSystemName(vm) || DASH}</dd>\n      <dt>Flavor</dt>\n      <dd>\n        {getFlavorText({\n          flavor: getFlavor(vm),\n          cpu: getCPU(vm),\n          memory: getMemory(vm),\n        })}\n      </dd>\n      <dt>Workload Profile</dt>\n      <dd>{getWorkloadProfile(vm) || DASH}</dd>\n      <dt>NICs</dt>\n      <dd>{nics.length > 0 ? nics : DASH}</dd>\n      <dt>Disks</dt>\n      <dd>{disks.length > 0 ? disks : DASH}</dd>\n    </dl>\n  );\n};\n\ntype ConfigurationSummaryProps = {\n  id: string;\n  vm: VMKind;\n  persistentVolumeClaims: K8sResourceKind[];\n  dataVolumes: K8sResourceKind[];\n};\n"]}]}