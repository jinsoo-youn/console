{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/factory/table-filters.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/factory/table-filters.ts","mtime":1615298458730},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport * as fuzzy from 'fuzzysearch';\nimport { nodeStatus } from '@console/app/src/status/node';\nimport { getNodeRole, getLabelsAsString } from '@console/shared';\nimport { routeStatus } from '../routes';\nimport { secretTypeFilterReducer } from '../secret';\nimport { bindingType, roleType } from '../RBAC';\nimport { podPhaseFilterReducer, serviceCatalogStatus, serviceClassDisplayName, servicePlanDisplayName, getClusterOperatorStatus, } from '../../module/k8s';\nimport { alertingRuleIsActive, alertDescription, alertState, silenceState, } from '../../reducers/monitoring';\nimport { pipelineRunFilterReducer } from '../hypercloud/utils/pipeline-filter-reducer';\nexport const fuzzyCaseInsensitive = (a, b) => fuzzy(_.toLower(a), _.toLower(b));\nconst registryStatusReducer = (registry) => {\n    return registry.status.phase;\n};\nconst serviceBrokerStatusReducer = (serviceBroker) => {\n    let phase = '';\n    if (serviceBroker.status) {\n        serviceBroker.status.conditions.forEach(cur => {\n            if (cur.type === 'Ready') {\n                if (cur.status === 'True') {\n                    phase = 'Running';\n                }\n                else {\n                    phase = 'Error';\n                }\n            }\n        });\n        return phase;\n    }\n};\nconst serviceInstanceStatusReducer = (serviceInstance) => {\n    return serviceInstance.status.lastConditionState;\n};\nconst pipelineApprovalStatusReducer = (pipelineApproval) => {\n    return pipelineApproval.status.result;\n};\n// TODO: Table filters are undocumented, stringly-typed, and non-obvious. We can change that.\nexport const tableFilters = {\n    name: (filter, obj) => fuzzyCaseInsensitive(filter, obj.metadata.name),\n    'catalog-source-name': (filter, obj) => fuzzyCaseInsensitive(filter, obj.name),\n    'alert-list-text': (filter, alert) => {\n        var _a;\n        if (fuzzyCaseInsensitive(filter, (_a = alert.labels) === null || _a === void 0 ? void 0 : _a.alertname)) {\n            return true;\n        }\n        // Search in alert description. Ignore case and whitespace, but don't use fuzzy since the\n        // description can be long and will often match fuzzy searches that are not really relevant.\n        const needle = _.toLower(filter.replace(/\\s/g, ''));\n        const haystack = _.toLower(alertDescription(alert).replace(/\\s/g, ''));\n        return haystack.includes(needle);\n    },\n    'alert-state': (filter, alert) => filter.selected.has(alertState(alert)),\n    'alerting-rule-active': (filter, rule) => filter.selected.has(alertingRuleIsActive(rule)),\n    'alerting-rule-name': (filter, rule) => fuzzyCaseInsensitive(filter, rule.name),\n    'silence-name': (filter, silence) => fuzzyCaseInsensitive(filter, silence.name),\n    'silence-state': (filter, silence) => filter.selected.has(silenceState(silence)),\n    // Filter role by role kind\n    'role-kind': (filter, role) => filter.selected.has(roleType(role)) || filter.selected.size === 0,\n    // Filter role bindings by role kind\n    'role-binding-kind': (filter, binding) => filter.selected.has(bindingType(binding)) || filter.selected.size === 0,\n    // Filter role bindings by text match\n    'role-binding': (str, { metadata, roleRef, subject }) => {\n        const isMatch = (val) => fuzzyCaseInsensitive(str, val);\n        return [metadata.name, roleRef.name, subject.kind, subject.name].some(isMatch);\n    },\n    // Filter role bindings by roleRef name\n    'role-binding-roleRef-name': (name, binding) => binding.roleRef.name === name,\n    // Filter role bindings by roleRef kind\n    'role-binding-roleRef-kind': (kind, binding) => binding.roleRef.kind === kind,\n    // Filter role bindings by user name\n    'role-binding-user': (userName, binding) => _.some(binding.subjects, {\n        kind: 'User',\n        apiGroup: 'rbac.authorization.k8s.io',\n        name: userName,\n    }),\n    // Filter role bindings by group name\n    'role-binding-group': (groupName, binding) => _.some(binding.subjects, {\n        kind: 'Group',\n        apiGroup: 'rbac.authorization.k8s.io',\n        name: groupName,\n    }),\n    selector: (selector, obj) => {\n        if (!selector || !selector.values || !selector.values.size) {\n            return true;\n        }\n        return selector.values.has(_.get(obj, selector.field));\n    },\n    labels: (values, obj) => {\n        const labels = getLabelsAsString(obj);\n        if (!values.all) {\n            return true;\n        }\n        return !!values.all.every((v) => labels.includes(v));\n    },\n    'pod-status': (phases, pod) => {\n        if (!phases || !phases.selected || !phases.selected.size) {\n            return true;\n        }\n        const phase = podPhaseFilterReducer(pod);\n        return phases.selected.has(phase) || !_.includes(phases.all, phase);\n    },\n    'registry-status': (phases, registry) => {\n        if (!phases || !phases.selected || !phases.selected.size) {\n            return true;\n        }\n        const phase = registryStatusReducer(registry);\n        return phases.selected.has(phase) || !_.includes(phases.all, phase);\n    },\n    'service-broker-status': (phases, serviceBroker) => {\n        if (!phases || !phases.selected || !phases.selected.size) {\n            return true;\n        }\n        const phase = serviceBrokerStatusReducer(serviceBroker);\n        return phases.selected.has(phase) || !_.includes(phases.all, phase);\n    },\n    'service-instance-status': (phases, serviceInstance) => {\n        if (!phases || !phases.selected || !phases.selected.size) {\n            return true;\n        }\n        const phase = serviceInstanceStatusReducer(serviceInstance);\n        return phases.selected.has(phase) || !_.includes(phases.all, phase);\n    },\n    'pipeline-run-status': (results, pipelineRun) => {\n        if (!results || !results.selected || !results.selected.size) {\n            return true;\n        }\n        const result = pipelineRunFilterReducer(pipelineRun);\n        return results.selected.has(result) || !_.includes(results.all, result);\n    },\n    'pipeline-approval-status': (results, pipelineApproval) => {\n        if (!results || !results.selected || !results.selected.size) {\n            return true;\n        }\n        const result = pipelineApprovalStatusReducer(pipelineApproval);\n        return results.selected.has(result) || !_.includes(results.all, result);\n    },\n    'node-status': (statuses, node) => {\n        if (!statuses || !statuses.selected || !statuses.selected.size) {\n            return true;\n        }\n        const status = nodeStatus(node);\n        return statuses.selected.has(status) || !_.includes(statuses.all, status);\n    },\n    'node-role': (roles, node) => {\n        if (!roles || !roles.selected || !roles.selected.size) {\n            return true;\n        }\n        const role = getNodeRole(node);\n        return roles.selected.has(role);\n    },\n    'clusterserviceversion-resource-kind': (filters, resource) => {\n        if (!filters || !filters.selected || !filters.selected.size) {\n            return true;\n        }\n        return filters.selected.has(resource.kind);\n    },\n    'packagemanifest-name': (filter, pkg) => fuzzyCaseInsensitive(filter, (pkg.status.defaultChannel\n        ? pkg.status.channels.find((ch) => ch.name === pkg.status.defaultChannel)\n        : pkg.status.channels[0]).currentCSVDesc.displayName),\n    'build-status': (phases, build) => {\n        if (!phases || !phases.selected || !phases.selected.size) {\n            return true;\n        }\n        const phase = build.status.phase;\n        return phases.selected.has(phase) || !_.includes(phases.all, phase);\n    },\n    'build-strategy': (strategies, buildConfig) => {\n        if (!strategies || !strategies.selected || !strategies.selected.size) {\n            return true;\n        }\n        const strategy = buildConfig.spec.strategy.type;\n        return strategies.selected.has(strategy) || !_.includes(strategies.all, strategy);\n    },\n    'route-status': (statuses, route) => {\n        if (!statuses || !statuses.selected || !statuses.selected.size) {\n            return true;\n        }\n        const status = routeStatus(route);\n        return statuses.selected.has(status) || !_.includes(statuses.all, status);\n    },\n    'catalog-status': (statuses, catalog) => {\n        if (!statuses || !statuses.selected || !statuses.selected.size) {\n            return true;\n        }\n        const status = serviceCatalogStatus(catalog);\n        return statuses.selected.has(status) || !_.includes(statuses.all, status);\n    },\n    'secret-type': (types, secret) => {\n        if (!types || !types.selected || !types.selected.size) {\n            return true;\n        }\n        const type = secretTypeFilterReducer(secret);\n        return types.selected.has(type) || !_.includes(types.all, type);\n    },\n    'project-name': (str, project) => {\n        const displayName = _.get(project, ['metadata', 'annotations', 'openshift.io/display-name']);\n        return (fuzzyCaseInsensitive(str, project.metadata.name) || fuzzyCaseInsensitive(str, displayName));\n    },\n    'pvc-status': (phases, pvc) => {\n        if (!phases || !phases.selected || !phases.selected.size) {\n            return true;\n        }\n        const phase = pvc.status.phase;\n        return phases.selected.has(phase) || !_.includes(phases.all, phase);\n    },\n    // Filter service classes by text match\n    'service-class': (str, serviceClass) => {\n        const displayName = serviceClassDisplayName(serviceClass);\n        return fuzzyCaseInsensitive(str, displayName);\n    },\n    'service-plan': (str, servicePlan) => {\n        const displayName = servicePlanDisplayName(servicePlan);\n        return fuzzyCaseInsensitive(str, displayName);\n    },\n    'cluster-operator-status': (statuses, operator) => {\n        if (!statuses || !statuses.selected || !statuses.selected.size) {\n            return true;\n        }\n        const status = getClusterOperatorStatus(operator);\n        return statuses.selected.has(status) || !_.includes(statuses.all, status);\n    },\n    'template-instance-status': (statuses, instance) => {\n        if (!statuses || !statuses.selected || !statuses.selected.size) {\n            return true;\n        }\n        // const status = getTemplateInstanceStatus(instance);\n        // NOTE: HyperCloud5.0 TemplateInstance phase filter\n        const templateInstancePhase = instance => {\n            let phase = '';\n            if (instance.status) {\n                instance.status.conditions.forEach(cur => {\n                    if (cur.type === '') {\n                        phase = cur.status;\n                    }\n                });\n                return phase;\n            }\n        };\n        const status = templateInstancePhase(instance);\n        return statuses.selected.has(status) || !_.includes(statuses.all, status);\n    },\n    machine: (str, machine) => {\n        const node = _.get(machine, 'status.nodeRef.name');\n        return (fuzzyCaseInsensitive(str, machine.metadata.name) || (node && fuzzyCaseInsensitive(str, node)));\n    },\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/factory/table-filters.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/factory/table-filters.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\nimport * as fuzzy from 'fuzzysearch';\nimport { nodeStatus } from '@console/app/src/status/node';\nimport { getNodeRole, getLabelsAsString } from '@console/shared';\nimport { routeStatus } from '../routes';\nimport { secretTypeFilterReducer } from '../secret';\nimport { bindingType, roleType } from '../RBAC';\nimport {\n  K8sResourceKind,\n  MachineKind,\n  podPhaseFilterReducer,\n  serviceCatalogStatus,\n  serviceClassDisplayName,\n  servicePlanDisplayName,\n  getClusterOperatorStatus,\n  // getTemplateInstanceStatus,\n} from '../../module/k8s';\n\nimport {\n  alertingRuleIsActive,\n  alertDescription,\n  alertState,\n  silenceState,\n} from '../../reducers/monitoring';\nimport { pipelineRunFilterReducer } from '../hypercloud/utils/pipeline-filter-reducer';\n\nexport const fuzzyCaseInsensitive = (a: string, b: string): boolean =>\n  fuzzy(_.toLower(a), _.toLower(b));\n\nconst registryStatusReducer = (registry: any): string => {\n  return registry.status.phase;\n}\n\nconst serviceBrokerStatusReducer = (serviceBroker: any): string => {\n  let phase = '';\n  if (serviceBroker.status) {\n    serviceBroker.status.conditions.forEach(cur => {\n      if (cur.type === 'Ready') {\n        if (cur.status === 'True') {\n          phase = 'Running';\n        } else {\n          phase = 'Error';\n        }\n      }\n    });\n    return phase;\n  }\n}\n\nconst serviceInstanceStatusReducer = (serviceInstance: any): string => {\n  return serviceInstance.status.lastConditionState;\n}\n\nconst pipelineApprovalStatusReducer = (pipelineApproval: any): string => {\n  return pipelineApproval.status.result;\n}\n\n// TODO: Table filters are undocumented, stringly-typed, and non-obvious. We can change that.\nexport const tableFilters: TableFilterMap = {\n  name: (filter, obj) => fuzzyCaseInsensitive(filter, obj.metadata.name),\n\n  'catalog-source-name': (filter, obj) => fuzzyCaseInsensitive(filter, obj.name),\n\n  'alert-list-text': (filter, alert) => {\n    if (fuzzyCaseInsensitive(filter, alert.labels?.alertname)) {\n      return true;\n    }\n\n    // Search in alert description. Ignore case and whitespace, but don't use fuzzy since the\n    // description can be long and will often match fuzzy searches that are not really relevant.\n    const needle = _.toLower(filter.replace(/\\s/g, ''));\n    const haystack = _.toLower(alertDescription(alert).replace(/\\s/g, ''));\n    return haystack.includes(needle);\n  },\n\n  'alert-state': (filter, alert) => filter.selected.has(alertState(alert)),\n\n  'alerting-rule-active': (filter, rule) => filter.selected.has(alertingRuleIsActive(rule)),\n\n  'alerting-rule-name': (filter, rule) => fuzzyCaseInsensitive(filter, rule.name),\n\n  'silence-name': (filter, silence) => fuzzyCaseInsensitive(filter, silence.name),\n\n  'silence-state': (filter, silence) => filter.selected.has(silenceState(silence)),\n\n  // Filter role by role kind\n  'role-kind': (filter, role) => filter.selected.has(roleType(role)) || filter.selected.size === 0,\n\n  // Filter role bindings by role kind\n  'role-binding-kind': (filter, binding) =>\n    filter.selected.has(bindingType(binding)) || filter.selected.size === 0,\n\n  // Filter role bindings by text match\n  'role-binding': (str, { metadata, roleRef, subject }) => {\n    const isMatch = (val) => fuzzyCaseInsensitive(str, val);\n    return [metadata.name, roleRef.name, subject.kind, subject.name].some(isMatch);\n  },\n\n  // Filter role bindings by roleRef name\n  'role-binding-roleRef-name': (name: string, binding) => binding.roleRef.name === name,\n\n  // Filter role bindings by roleRef kind\n  'role-binding-roleRef-kind': (kind: string, binding) => binding.roleRef.kind === kind,\n\n  // Filter role bindings by user name\n  'role-binding-user': (userName, binding) =>\n    _.some(binding.subjects, {\n      kind: 'User',\n      apiGroup: 'rbac.authorization.k8s.io',\n      name: userName,\n    }),\n\n  // Filter role bindings by group name\n  'role-binding-group': (groupName, binding) =>\n    _.some(binding.subjects, {\n      kind: 'Group',\n      apiGroup: 'rbac.authorization.k8s.io',\n      name: groupName,\n    }),\n\n  selector: (selector, obj) => {\n    if (!selector || !selector.values || !selector.values.size) {\n      return true;\n    }\n    return selector.values.has(_.get(obj, selector.field));\n  },\n\n  labels: (values, obj) => {\n    const labels = getLabelsAsString(obj);\n    if (!values.all) {\n      return true;\n    }\n    return !!values.all.every((v) => labels.includes(v));\n  },\n\n  'pod-status': (phases, pod) => {\n    if (!phases || !phases.selected || !phases.selected.size) {\n      return true;\n    }\n\n    const phase = podPhaseFilterReducer(pod);\n    return phases.selected.has(phase) || !_.includes(phases.all, phase);\n  },\n\n  'registry-status': (phases, registry) => {\n    if (!phases || !phases.selected || !phases.selected.size) {\n      return true;\n    }\n\n    const phase = registryStatusReducer(registry);\n    return phases.selected.has(phase) || !_.includes(phases.all, phase);\n  },\n\n  'service-broker-status': (phases, serviceBroker) => {\n    if (!phases || !phases.selected || !phases.selected.size) {\n      return true;\n    }\n\n    const phase = serviceBrokerStatusReducer(serviceBroker);\n    return phases.selected.has(phase) || !_.includes(phases.all, phase);\n  },\n\n  'service-instance-status': (phases, serviceInstance) => {\n    if (!phases || !phases.selected || !phases.selected.size) {\n      return true;\n    }\n\n    const phase = serviceInstanceStatusReducer(serviceInstance);\n    return phases.selected.has(phase) || !_.includes(phases.all, phase);\n  },\n\n  'pipeline-run-status': (results, pipelineRun) => {\n    if (!results || !results.selected || !results.selected.size) {\n      return true;\n    }\n\n    const result = pipelineRunFilterReducer(pipelineRun);\n    return results.selected.has(result) || !_.includes(results.all, result);\n  },\n\n  'pipeline-approval-status': (results, pipelineApproval) => {\n    if (!results || !results.selected || !results.selected.size) {\n      return true;\n    }\n\n    const result = pipelineApprovalStatusReducer(pipelineApproval);\n    return results.selected.has(result) || !_.includes(results.all, result);\n  },\n\n  'node-status': (statuses, node) => {\n    if (!statuses || !statuses.selected || !statuses.selected.size) {\n      return true;\n    }\n\n    const status = nodeStatus(node);\n    return statuses.selected.has(status) || !_.includes(statuses.all, status);\n  },\n\n  'node-role': (roles, node) => {\n    if (!roles || !roles.selected || !roles.selected.size) {\n      return true;\n    }\n    const role = getNodeRole(node);\n    return roles.selected.has(role);\n  },\n\n  'clusterserviceversion-resource-kind': (filters, resource) => {\n    if (!filters || !filters.selected || !filters.selected.size) {\n      return true;\n    }\n    return filters.selected.has(resource.kind);\n  },\n\n  'packagemanifest-name': (filter, pkg) =>\n    fuzzyCaseInsensitive(\n      filter,\n      (pkg.status.defaultChannel\n        ? pkg.status.channels.find((ch) => ch.name === pkg.status.defaultChannel)\n        : pkg.status.channels[0]\n      ).currentCSVDesc.displayName,\n    ),\n\n  'build-status': (phases, build) => {\n    if (!phases || !phases.selected || !phases.selected.size) {\n      return true;\n    }\n\n    const phase = build.status.phase;\n    return phases.selected.has(phase) || !_.includes(phases.all, phase);\n  },\n\n  'build-strategy': (strategies, buildConfig) => {\n    if (!strategies || !strategies.selected || !strategies.selected.size) {\n      return true;\n    }\n\n    const strategy = buildConfig.spec.strategy.type;\n    return strategies.selected.has(strategy) || !_.includes(strategies.all, strategy);\n  },\n\n  'route-status': (statuses, route) => {\n    if (!statuses || !statuses.selected || !statuses.selected.size) {\n      return true;\n    }\n\n    const status = routeStatus(route);\n    return statuses.selected.has(status) || !_.includes(statuses.all, status);\n  },\n\n  'catalog-status': (statuses, catalog) => {\n    if (!statuses || !statuses.selected || !statuses.selected.size) {\n      return true;\n    }\n\n    const status = serviceCatalogStatus(catalog);\n    return statuses.selected.has(status) || !_.includes(statuses.all, status);\n  },\n\n  'secret-type': (types, secret) => {\n    if (!types || !types.selected || !types.selected.size) {\n      return true;\n    }\n    const type = secretTypeFilterReducer(secret);\n    return types.selected.has(type) || !_.includes(types.all, type);\n  },\n\n  'project-name': (str: string, project: K8sResourceKind) => {\n    const displayName = _.get(project, ['metadata', 'annotations', 'openshift.io/display-name']);\n    return (\n      fuzzyCaseInsensitive(str, project.metadata.name) || fuzzyCaseInsensitive(str, displayName)\n    );\n  },\n\n  'pvc-status': (phases, pvc) => {\n    if (!phases || !phases.selected || !phases.selected.size) {\n      return true;\n    }\n\n    const phase = pvc.status.phase;\n    return phases.selected.has(phase) || !_.includes(phases.all, phase);\n  },\n\n  // Filter service classes by text match\n  'service-class': (str, serviceClass) => {\n    const displayName = serviceClassDisplayName(serviceClass);\n    return fuzzyCaseInsensitive(str, displayName);\n  },\n\n  'service-plan': (str, servicePlan) => {\n    const displayName = servicePlanDisplayName(servicePlan);\n    return fuzzyCaseInsensitive(str, displayName);\n  },\n\n  'cluster-operator-status': (statuses, operator) => {\n    if (!statuses || !statuses.selected || !statuses.selected.size) {\n      return true;\n    }\n\n    const status = getClusterOperatorStatus(operator);\n    return statuses.selected.has(status) || !_.includes(statuses.all, status);\n  },\n\n  'template-instance-status': (statuses, instance) => {\n    if (!statuses || !statuses.selected || !statuses.selected.size) {\n      return true;\n    }\n\n    // const status = getTemplateInstanceStatus(instance);\n\n    // NOTE: HyperCloud5.0 TemplateInstance phase filter\n    const templateInstancePhase = instance => {\n      let phase = '';\n      if (instance.status) {\n        instance.status.conditions.forEach(cur => {\n          if (cur.type === '') {\n            phase = cur.status;\n          }\n        });\n        return phase;\n      }\n    };\n    const status = templateInstancePhase(instance);\n\n    return statuses.selected.has(status) || !_.includes(statuses.all, status);\n  },\n\n  machine: (str: string, machine: MachineKind): boolean => {\n    const node: string = _.get(machine, 'status.nodeRef.name');\n    return (\n      fuzzyCaseInsensitive(str, machine.metadata.name) || (node && fuzzyCaseInsensitive(str, node))\n    );\n  },\n};\n\nexport interface TableFilterGroups {\n  selected: Set<string>;\n  all: string[];\n  values: Set<string>;\n  field: string;\n}\n\nexport type TableFilter = (groups: TableFilterGroups, obj: any) => boolean;\nexport type TextFilter = (text: string, obj: any) => boolean;\n\ntype TableFilterMap = {\n  [key: string]: TableFilter | TextFilter;\n};\n"]}]}