{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/service/selectors.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/service/selectors.ts","mtime":1615298458670},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { getLabels } from '@console/shared';\nexport const getServicePort = (service, targetPort) => _.get(service, ['spec', 'ports'], []).find((servicePort) => targetPort === servicePort.targetPort);\nconst getServiceSelectors = (service) => service && service.spec && service.spec.selector ? service.spec.selector : {};\nexport const getServicesForVmi = (services, vmi) => {\n    const vmLabels = getLabels(vmi, {});\n    return services.filter((service) => {\n        const selectors = getServiceSelectors(service);\n        const selectorKeys = Object.keys(selectors);\n        return selectorKeys.length > 0\n            ? selectorKeys.every((key) => vmLabels[key] === selectors[key])\n            : false;\n    });\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/service/selectors.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/service/selectors.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAI5B,OAAO,EAAE,SAAS,EAAE,MAAM,iBAAiB,CAAC;AAE5C,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,OAAwB,EAAE,UAAkB,EAAE,EAAE,CAC7E,CAAC,CAAC,GAAG,CAAC,OAAO,EAAE,CAAC,MAAM,EAAE,OAAO,CAAC,EAAE,EAAE,CAAC,CAAC,IAAI,CACxC,CAAC,WAAW,EAAE,EAAE,CAAC,UAAU,KAAK,WAAW,CAAC,UAAU,CACvD,CAAC;AAEJ,MAAM,mBAAmB,GAAG,CAAC,OAAoB,EAAE,EAAE,CACnD,OAAO,IAAI,OAAO,CAAC,IAAI,IAAI,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC;AAEhF,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,QAAuB,EAAE,GAAY,EAAiB,EAAE;IACxF,MAAM,QAAQ,GAAG,SAAS,CAAC,GAAG,EAAE,EAAE,CAAC,CAAC;IACpC,OAAO,QAAQ,CAAC,MAAM,CAAC,CAAC,OAAO,EAAE,EAAE;QACjC,MAAM,SAAS,GAAG,mBAAmB,CAAC,OAAO,CAAC,CAAC;QAC/C,MAAM,YAAY,GAAG,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;QAC5C,OAAO,YAAY,CAAC,MAAM,GAAG,CAAC;YAC5B,CAAC,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,SAAS,CAAC,GAAG,CAAC,CAAC;YAC/D,CAAC,CAAC,KAAK,CAAC;IACZ,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import * as _ from 'lodash';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { ServiceKind } from '@console/knative-plugin/src/types';\nimport { VMIKind } from '../../types';\nimport { getLabels } from '@console/shared';\n\nexport const getServicePort = (service: K8sResourceKind, targetPort: number) =>\n  _.get(service, ['spec', 'ports'], []).find(\n    (servicePort) => targetPort === servicePort.targetPort,\n  );\n\nconst getServiceSelectors = (service: ServiceKind) =>\n  service && service.spec && service.spec.selector ? service.spec.selector : {};\n\nexport const getServicesForVmi = (services: ServiceKind[], vmi: VMIKind): ServiceKind[] => {\n  const vmLabels = getLabels(vmi, {});\n  return services.filter((service) => {\n    const selectors = getServiceSelectors(service);\n    const selectorKeys = Object.keys(selectors);\n    return selectorKeys.length > 0\n      ? selectorKeys.every((key) => vmLabels[key] === selectors[key])\n      : false;\n  });\n};\n"]}]}