{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/validations/vm/validations.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/validations/vm/validations.ts","mtime":1615298458670},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["const HEXCH_REGEX = '[0-9A-Fa-f]';\nconst MAC_REGEX_COLON_DELIMITER = new RegExp(`^((${HEXCH_REGEX}{2}[:]){19}${HEXCH_REGEX}{2})$|` + // 01:23:45:67:89:ab:cd:ef:00:00:01:23:45:67:89:ab:cd:ef:00:00\n    `^((${HEXCH_REGEX}{2}[:]){7}${HEXCH_REGEX}{2})$|` + // 01:23:45:67:89:ab:cd:ef\n    `^((${HEXCH_REGEX}{2}[:]){5}${HEXCH_REGEX}{2})$`);\nconst MAC_REGEX_DASH_DELIMITER = new RegExp(`^((${HEXCH_REGEX}{2}[-]){19}${HEXCH_REGEX}{2})$|` + // 01-23-45-67-89-ab-cd-ef-00-00-01-23-45-67-89-ab-cd-ef-00-00\n    `^((${HEXCH_REGEX}{2}[-]){7}${HEXCH_REGEX}{2})$|` + // 01-23-45-67-89-ab-cd-ef\n    `^((${HEXCH_REGEX}{2}[-]){5}${HEXCH_REGEX}{2})$`);\nconst MAC_REGEX_PERIOD_DELIMITER = new RegExp(`^((${HEXCH_REGEX}{4}.){9}${HEXCH_REGEX}{4})$|` + // 0123.4567.89ab.cdef.0000.0123.4567.89ab.cdef.0000\n    `^((${HEXCH_REGEX}{4}.){3}${HEXCH_REGEX}{4})$|` + // 0123.4567.89ab.cdef\n    `^((${HEXCH_REGEX}{4}.){2}${HEXCH_REGEX}{4})$`);\nconst COLON_DELIMITER = ':';\nconst DASH_DELIMITER = '-';\nconst PERIOD_DELIMITER = '.';\n// Validates that the provided MAC address meets one of following formats supported by the golang ParseMAC function:\n// IEEE 802 MAC-48, EUI-48, EUI-64, or a 20-octet IP over InfiniBand link-layer address\n// https://golang.org/pkg/net/#ParseMAC\nexport const isValidMAC = (mac) => {\n    if (mac.length < 14) {\n        return false;\n    }\n    let regex;\n    if (mac[2] === COLON_DELIMITER) {\n        regex = MAC_REGEX_COLON_DELIMITER;\n    }\n    else if (mac[2] === DASH_DELIMITER) {\n        regex = MAC_REGEX_DASH_DELIMITER;\n    }\n    else if (mac[4] === PERIOD_DELIMITER) {\n        regex = MAC_REGEX_PERIOD_DELIMITER;\n    }\n    return regex ? regex.test(mac) : false;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/validations/vm/validations.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/validations/vm/validations.ts"],"names":[],"mappings":"AAAA,MAAM,WAAW,GAAG,aAAa,CAAC;AAClC,MAAM,yBAAyB,GAAG,IAAI,MAAM,CAC1C,MAAM,WAAW,cAAc,WAAW,QAAQ,GAAG,8DAA8D;IACnH,MAAM,WAAW,aAAa,WAAW,QAAQ,GAAG,0BAA0B;IAC5E,MAAM,WAAW,aAAa,WAAW,OAAO,CACnD,CAAC;AAEF,MAAM,wBAAwB,GAAG,IAAI,MAAM,CACzC,MAAM,WAAW,cAAc,WAAW,QAAQ,GAAG,8DAA8D;IACnH,MAAM,WAAW,aAAa,WAAW,QAAQ,GAAG,0BAA0B;IAC5E,MAAM,WAAW,aAAa,WAAW,OAAO,CACnD,CAAC;AAEF,MAAM,0BAA0B,GAAG,IAAI,MAAM,CAC3C,MAAM,WAAW,WAAW,WAAW,QAAQ,GAAG,oDAAoD;IACtG,MAAM,WAAW,WAAW,WAAW,QAAQ,GAAG,sBAAsB;IACtE,MAAM,WAAW,WAAW,WAAW,OAAO,CACjD,CAAC;AAEF,MAAM,eAAe,GAAG,GAAG,CAAC;AAC5B,MAAM,cAAc,GAAG,GAAG,CAAC;AAC3B,MAAM,gBAAgB,GAAG,GAAG,CAAC;AAE7B,oHAAoH;AACpH,uFAAuF;AACvF,uCAAuC;AACvC,MAAM,CAAC,MAAM,UAAU,GAAG,CAAC,GAAW,EAAW,EAAE;IACjD,IAAI,GAAG,CAAC,MAAM,GAAG,EAAE,EAAE;QACnB,OAAO,KAAK,CAAC;KACd;IAED,IAAI,KAAK,CAAC;IACV,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,eAAe,EAAE;QAC9B,KAAK,GAAG,yBAAyB,CAAC;KACnC;SAAM,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,cAAc,EAAE;QACpC,KAAK,GAAG,wBAAwB,CAAC;KAClC;SAAM,IAAI,GAAG,CAAC,CAAC,CAAC,KAAK,gBAAgB,EAAE;QACtC,KAAK,GAAG,0BAA0B,CAAC;KACpC;IAED,OAAO,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;AACzC,CAAC,CAAC","sourcesContent":["const HEXCH_REGEX = '[0-9A-Fa-f]';\nconst MAC_REGEX_COLON_DELIMITER = new RegExp(\n  `^((${HEXCH_REGEX}{2}[:]){19}${HEXCH_REGEX}{2})$|` + // 01:23:45:67:89:ab:cd:ef:00:00:01:23:45:67:89:ab:cd:ef:00:00\n  `^((${HEXCH_REGEX}{2}[:]){7}${HEXCH_REGEX}{2})$|` + // 01:23:45:67:89:ab:cd:ef\n    `^((${HEXCH_REGEX}{2}[:]){5}${HEXCH_REGEX}{2})$`, // 01:23:45:67:89:ab\n);\n\nconst MAC_REGEX_DASH_DELIMITER = new RegExp(\n  `^((${HEXCH_REGEX}{2}[-]){19}${HEXCH_REGEX}{2})$|` + // 01-23-45-67-89-ab-cd-ef-00-00-01-23-45-67-89-ab-cd-ef-00-00\n  `^((${HEXCH_REGEX}{2}[-]){7}${HEXCH_REGEX}{2})$|` + // 01-23-45-67-89-ab-cd-ef\n    `^((${HEXCH_REGEX}{2}[-]){5}${HEXCH_REGEX}{2})$`, // 01-23-45-67-89-ab\n);\n\nconst MAC_REGEX_PERIOD_DELIMITER = new RegExp(\n  `^((${HEXCH_REGEX}{4}.){9}${HEXCH_REGEX}{4})$|` + // 0123.4567.89ab.cdef.0000.0123.4567.89ab.cdef.0000\n  `^((${HEXCH_REGEX}{4}.){3}${HEXCH_REGEX}{4})$|` + // 0123.4567.89ab.cdef\n    `^((${HEXCH_REGEX}{4}.){2}${HEXCH_REGEX}{4})$`, // 0123.4567.89ab\n);\n\nconst COLON_DELIMITER = ':';\nconst DASH_DELIMITER = '-';\nconst PERIOD_DELIMITER = '.';\n\n// Validates that the provided MAC address meets one of following formats supported by the golang ParseMAC function:\n// IEEE 802 MAC-48, EUI-48, EUI-64, or a 20-octet IP over InfiniBand link-layer address\n// https://golang.org/pkg/net/#ParseMAC\nexport const isValidMAC = (mac: string): boolean => {\n  if (mac.length < 14) {\n    return false;\n  }\n\n  let regex;\n  if (mac[2] === COLON_DELIMITER) {\n    regex = MAC_REGEX_COLON_DELIMITER;\n  } else if (mac[2] === DASH_DELIMITER) {\n    regex = MAC_REGEX_DASH_DELIMITER;\n  } else if (mac[4] === PERIOD_DELIMITER) {\n    regex = MAC_REGEX_PERIOD_DELIMITER;\n  }\n\n  return regex ? regex.test(mac) : false;\n};\n"]}]}