{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/pipeline-details/TaskComponentTaskStatus.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/pipeline-details/TaskComponentTaskStatus.tsx","mtime":1615298458620},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { getRunStatusColor } from '../../../../utils/pipeline-augment';\nimport HorizontalStackedBars from '../../../charts/HorizontalStackedBars';\nconst TaskComponentTaskStatus = ({ steps }) => {\n    if (steps.length === 0)\n        return null;\n    const visualValues = steps.map(({ name, runStatus }) => {\n        return {\n            color: getRunStatusColor(runStatus).pftoken.value,\n            name,\n            size: 1,\n        };\n    });\n    return React.createElement(HorizontalStackedBars, { values: visualValues, barGap: 2, height: 2 });\n};\nexport default TaskComponentTaskStatus;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/pipeline-details/TaskComponentTaskStatus.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/pipeline-details/TaskComponentTaskStatus.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,iBAAiB,EAAE,MAAM,oCAAoC,CAAC;AACvE,OAAO,qBAAuC,MAAM,uCAAuC,CAAC;AAO5F,MAAM,uBAAuB,GAA8B,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE;IACvE,IAAI,KAAK,CAAC,MAAM,KAAK,CAAC;QAAE,OAAO,IAAI,CAAC;IAEpC,MAAM,YAAY,GAAmB,KAAK,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,EAAE,EAAE;QACrE,OAAO;YACL,KAAK,EAAE,iBAAiB,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,KAAK;YACjD,IAAI;YACJ,IAAI,EAAE,CAAC;SACR,CAAC;IACJ,CAAC,CAAC,CAAC;IAEH,OAAO,oBAAC,qBAAqB,IAAC,MAAM,EAAE,YAAY,EAAE,MAAM,EAAE,CAAC,EAAE,MAAM,EAAE,CAAC,GAAI,CAAC;AAC/E,CAAC,CAAC;AAEF,eAAe,uBAAuB,CAAC","sourcesContent":["import * as React from 'react';\nimport { getRunStatusColor } from '../../../../utils/pipeline-augment';\nimport HorizontalStackedBars, { StackedValue } from '../../../charts/HorizontalStackedBars';\nimport { StepStatus } from './pipeline-step-utils';\n\ninterface TaskStatusProps {\n  steps: StepStatus[];\n}\n\nconst TaskComponentTaskStatus: React.FC<TaskStatusProps> = ({ steps }) => {\n  if (steps.length === 0) return null;\n\n  const visualValues: StackedValue[] = steps.map(({ name, runStatus }) => {\n    return {\n      color: getRunStatusColor(runStatus).pftoken.value,\n      name,\n      size: 1,\n    };\n  });\n\n  return <HorizontalStackedBars values={visualValues} barGap={2} height={2} />;\n};\n\nexport default TaskComponentTaskStatus;\n"]}]}