{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/common/SecretForm.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/common/SecretForm.tsx","mtime":1615298458620},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useFormikContext } from 'formik';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { ButtonBar } from '@console/internal/components/utils';\nimport { SecretType, BasicAuthSubform, SSHAuthSubform, CreateConfigSubform, } from '@console/internal/components/secrets/create-secret';\nimport { DropdownField, InputField, ActionGroupWithIcons } from '@console/shared';\nimport SecretAnnotation from './SecretAnnotation';\nimport './SecretForm.scss';\nconst authTypes = {\n    [SecretType.dockerconfigjson]: 'Image Registry Credentials',\n    [SecretType.basicAuth]: 'Basic Authentication',\n    [SecretType.sshAuth]: 'SSH Key',\n};\nconst renderSecretForm = (type, stringData, onDataChanged) => {\n    switch (type) {\n        case SecretType.basicAuth:\n            return (React.createElement(BasicAuthSubform, { onChange: onDataChanged, stringData: stringData[SecretType.basicAuth] }));\n        case SecretType.sshAuth:\n            return (React.createElement(SSHAuthSubform, { onChange: onDataChanged, stringData: stringData[SecretType.sshAuth] }));\n        case SecretType.dockerconfigjson:\n            return (React.createElement(CreateConfigSubform, { onChange: onDataChanged, stringData: stringData[SecretType.dockerconfigjson] }));\n        default:\n            return null;\n    }\n};\nconst SecretForm = ({ handleSubmit, handleReset, status, isSubmitting, }) => {\n    const { values, setFieldValue } = useFormikContext();\n    const [stringData, setStringData] = React.useState({\n        [SecretType.basicAuth]: {},\n        [SecretType.sshAuth]: {},\n        [SecretType.dockerconfigjson]: {},\n    });\n    const setValues = (type) => {\n        if (type === SecretType.dockerconfigjson) {\n            setFieldValue('formData', _.mapValues({ '.dockerconfigjson': stringData[type] }, JSON.stringify));\n        }\n        else {\n            setFieldValue('formData', stringData[type]);\n        }\n    };\n    const onDataChanged = (value) => {\n        setStringData(_.merge(stringData, { [values.type]: value }));\n        setValues(values.type);\n    };\n    return (React.createElement(\"div\", { className: \"odc-secret-form\" },\n        React.createElement(\"h1\", { className: \"co-section-heading-tertiary odc-secret-form__title\" }, \"Create Source Secret\"),\n        React.createElement(\"div\", { className: \"form-group\" },\n            React.createElement(InputField, { type: TextInputTypes.text, required: true, name: \"secretName\", label: \"Secret Name\", helpText: \"Unique name of the new secret.\" })),\n        React.createElement(\"div\", { className: \"form-group\" },\n            React.createElement(SecretAnnotation, { fieldName: \"annotations\" })),\n        React.createElement(\"div\", { className: \"form-group\" },\n            React.createElement(DropdownField, { name: \"type\", label: \"Authentication Type\", items: authTypes, title: authTypes[values.type], onChange: (type) => setValues(type), fullWidth: true, required: true })),\n        renderSecretForm(values.type, stringData, onDataChanged),\n        React.createElement(ButtonBar, { errorMessage: status === null || status === void 0 ? void 0 : status.submitError, inProgress: isSubmitting },\n            React.createElement(ActionGroupWithIcons, { onSubmit: handleSubmit, onClose: handleReset }))));\n};\nexport default SecretForm;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/common/SecretForm.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/common/SecretForm.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { FormikValues, useFormikContext } from 'formik';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { ButtonBar } from '@console/internal/components/utils';\nimport {\n  SecretType,\n  BasicAuthSubform,\n  SSHAuthSubform,\n  CreateConfigSubform,\n} from '@console/internal/components/secrets/create-secret';\nimport { DropdownField, InputField, ActionGroupWithIcons } from '@console/shared';\nimport SecretAnnotation from './SecretAnnotation';\nimport './SecretForm.scss';\n\nconst authTypes = {\n  [SecretType.dockerconfigjson]: 'Image Registry Credentials',\n  [SecretType.basicAuth]: 'Basic Authentication',\n  [SecretType.sshAuth]: 'SSH Key',\n};\n\nconst renderSecretForm = (\n  type: SecretType,\n  stringData: {\n    [key: string]: any;\n  },\n  onDataChanged: (value: string) => void,\n) => {\n  switch (type) {\n    case SecretType.basicAuth:\n      return (\n        <BasicAuthSubform onChange={onDataChanged} stringData={stringData[SecretType.basicAuth]} />\n      );\n    case SecretType.sshAuth:\n      return (\n        <SSHAuthSubform onChange={onDataChanged} stringData={stringData[SecretType.sshAuth]} />\n      );\n    case SecretType.dockerconfigjson:\n      return (\n        <CreateConfigSubform\n          onChange={onDataChanged}\n          stringData={stringData[SecretType.dockerconfigjson]}\n        />\n      );\n    default:\n      return null;\n  }\n};\n\nconst SecretForm: React.FC<FormikValues> = ({\n  handleSubmit,\n  handleReset,\n  status,\n  isSubmitting,\n}) => {\n  const { values, setFieldValue } = useFormikContext<FormikValues>();\n  const [stringData, setStringData] = React.useState({\n    [SecretType.basicAuth]: {},\n    [SecretType.sshAuth]: {},\n    [SecretType.dockerconfigjson]: {},\n  });\n\n  const setValues = (type: SecretType) => {\n    if (type === SecretType.dockerconfigjson) {\n      setFieldValue(\n        'formData',\n        _.mapValues({ '.dockerconfigjson': stringData[type] }, JSON.stringify),\n      );\n    } else {\n      setFieldValue('formData', stringData[type]);\n    }\n  };\n\n  const onDataChanged = (value: string) => {\n    setStringData(_.merge(stringData, { [values.type]: value }));\n    setValues(values.type);\n  };\n\n  return (\n    <div className=\"odc-secret-form\">\n      <h1 className=\"co-section-heading-tertiary odc-secret-form__title\">Create Source Secret</h1>\n      <div className=\"form-group\">\n        <InputField\n          type={TextInputTypes.text}\n          required\n          name=\"secretName\"\n          label=\"Secret Name\"\n          helpText=\"Unique name of the new secret.\"\n        />\n      </div>\n      <div className=\"form-group\">\n        <SecretAnnotation fieldName=\"annotations\" />\n      </div>\n      <div className=\"form-group\">\n        <DropdownField\n          name=\"type\"\n          label=\"Authentication Type\"\n          items={authTypes}\n          title={authTypes[values.type]}\n          onChange={(type: SecretType) => setValues(type)}\n          fullWidth\n          required\n        />\n      </div>\n      {renderSecretForm(values.type, stringData, onDataChanged)}\n      <ButtonBar errorMessage={status?.submitError} inProgress={isSubmitting}>\n        <ActionGroupWithIcons onSubmit={handleSubmit} onClose={handleReset} />\n      </ButtonBar>\n    </div>\n  );\n};\n\nexport default SecretForm;\n"]}]}