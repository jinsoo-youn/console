{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/topology/components/nodes/RevisionNode.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/topology/components/nodes/RevisionNode.tsx","mtime":1616735742410},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { useAnchor, AnchorEnd, observer } from '@console/topology';\nimport { WorkloadNode } from '@console/dev-console/src/components/topology';\nimport RevisionTrafficTargetAnchor from '../anchors/RevisionTrafficTargetAnchor';\nconst DECORATOR_RADIUS = 13;\nconst RevisionNode = (props) => {\n    const hasDataUrl = !!props.element.getData().data.url;\n    useAnchor(React.useCallback((node) => new RevisionTrafficTargetAnchor(node, hasDataUrl ? DECORATOR_RADIUS : 0), [hasDataUrl]), AnchorEnd.target, 'revision-traffic');\n    return React.createElement(WorkloadNode, Object.assign({}, props));\n};\nexport default observer(RevisionNode);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/topology/components/nodes/RevisionNode.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/topology/components/nodes/RevisionNode.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,SAAS,EAAE,SAAS,EAAQ,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AACzE,OAAO,EAAE,YAAY,EAAE,MAAM,8CAA8C,CAAC;AAC5E,OAAO,2BAA2B,MAAM,wCAAwC,CAAC;AAEjF,MAAM,gBAAgB,GAAG,EAAE,CAAC;AAC5B,MAAM,YAAY,GAAwD,CAAC,KAAK,EAAE,EAAE;IAClF,MAAM,UAAU,GAAG,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,CAAC;IACtD,SAAS,CACP,KAAK,CAAC,WAAW,CACf,CAAC,IAAU,EAAE,EAAE,CAAC,IAAI,2BAA2B,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC,CAAC,EACxF,CAAC,UAAU,CAAC,CACb,EACD,SAAS,CAAC,MAAM,EAChB,kBAAkB,CACnB,CAAC;IACF,OAAO,oBAAC,YAAY,oBAAK,KAAK,EAAI,CAAC;AACrC,CAAC,CAAC;AAEF,eAAe,QAAQ,CAAC,YAAY,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { useAnchor, AnchorEnd, Node, observer } from '@console/topology';\nimport { WorkloadNode } from '@console/dev-console/src/components/topology';\nimport RevisionTrafficTargetAnchor from '../anchors/RevisionTrafficTargetAnchor';\n\nconst DECORATOR_RADIUS = 13;\nconst RevisionNode: React.FC<React.ComponentProps<typeof WorkloadNode>> = (props) => {\n  const hasDataUrl = !!props.element.getData().data.url;\n  useAnchor(\n    React.useCallback(\n      (node: Node) => new RevisionTrafficTargetAnchor(node, hasDataUrl ? DECORATOR_RADIUS : 0),\n      [hasDataUrl],\n    ),\n    AnchorEnd.target,\n    'revision-traffic',\n  );\n  return <WorkloadNode {...props} />;\n};\n\nexport default observer(RevisionNode);\n"]}]}