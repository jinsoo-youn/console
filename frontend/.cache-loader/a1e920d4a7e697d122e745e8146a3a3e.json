{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/pod-logs.jsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/pod-logs.jsx","mtime":1616735742480},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { ContainerDropdown, getQueryArgument, LOG_SOURCE_RESTARTING, LOG_SOURCE_RUNNING, LOG_SOURCE_TERMINATED, LOG_SOURCE_WAITING, ResourceLog, setQueryArgument, } from './utils';\nconst containersToStatuses = ({ status }, containers) => {\n    return _.reduce(containers, (accumulator, { name }, order) => {\n        const containerStatus = _.find(status.containerStatuses, { name }) ||\n            _.find(status.initContainerStatuses, { name });\n        if (containerStatus) {\n            return Object.assign(Object.assign({}, accumulator), { [name]: Object.assign(Object.assign({}, containerStatus), { order }) });\n        }\n        return accumulator;\n    }, {});\n};\nconst containerToLogSourceStatus = (container) => {\n    if (!container) {\n        return LOG_SOURCE_WAITING;\n    }\n    const { state, lastState } = container;\n    if (state.waiting && !_.isEmpty(lastState)) {\n        return LOG_SOURCE_RESTARTING;\n    }\n    if (state.waiting) {\n        return LOG_SOURCE_WAITING;\n    }\n    if (state.terminated) {\n        return LOG_SOURCE_TERMINATED;\n    }\n    return LOG_SOURCE_RUNNING;\n};\nexport class PodLogs extends React.Component {\n    constructor(props) {\n        super(props);\n        this._selectContainer = this._selectContainer.bind(this);\n        this.state = {\n            containers: {},\n            currentKey: getQueryArgument('container') || '',\n            initContainers: {},\n        };\n    }\n    static getDerivedStateFromProps({ obj: build }, { currentKey }) {\n        const newState = {};\n        const containers = _.get(build, 'spec.containers', []);\n        const initContainers = _.get(build, 'spec.initContainers', []);\n        newState.containers = containersToStatuses(build, containers);\n        newState.initContainers = containersToStatuses(build, initContainers);\n        if (!currentKey) {\n            const firstContainer = _.find(newState.containers, { order: 0 });\n            newState.currentKey = firstContainer ? firstContainer.name : '';\n        }\n        return newState;\n    }\n    _selectContainer(name) {\n        this.setState({ currentKey: name }, () => {\n            setQueryArgument('container', this.state.currentKey);\n        });\n    }\n    render() {\n        const { containers, currentKey, initContainers } = this.state;\n        const currentContainer = _.get(containers, currentKey) || _.get(initContainers, currentKey);\n        const currentContainerStatus = containerToLogSourceStatus(currentContainer);\n        const containerDropdown = (React.createElement(ContainerDropdown, { currentKey: currentKey, containers: containers, initContainers: initContainers, onChange: this._selectContainer }));\n        return (React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(ResourceLog, { containerName: currentContainer ? currentContainer.name : '', dropdown: containerDropdown, resource: this.props.obj, resourceStatus: currentContainerStatus })));\n    }\n}\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/pod-logs.jsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/pod-logs.jsx"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\n\nimport {\n  ContainerDropdown,\n  getQueryArgument,\n  LOG_SOURCE_RESTARTING,\n  LOG_SOURCE_RUNNING,\n  LOG_SOURCE_TERMINATED,\n  LOG_SOURCE_WAITING,\n  ResourceLog,\n  setQueryArgument,\n} from './utils';\n\nconst containersToStatuses = ({ status }, containers) => {\n  return _.reduce(\n    containers,\n    (accumulator, { name }, order) => {\n      const containerStatus =\n        _.find(status.containerStatuses, { name }) ||\n        _.find(status.initContainerStatuses, { name });\n      if (containerStatus) {\n        return {\n          ...accumulator,\n          [name]: { ...containerStatus, order },\n        };\n      }\n      return accumulator;\n    },\n    {},\n  );\n};\n\nconst containerToLogSourceStatus = (container) => {\n  if (!container) {\n    return LOG_SOURCE_WAITING;\n  }\n\n  const { state, lastState } = container;\n\n  if (state.waiting && !_.isEmpty(lastState)) {\n    return LOG_SOURCE_RESTARTING;\n  }\n\n  if (state.waiting) {\n    return LOG_SOURCE_WAITING;\n  }\n\n  if (state.terminated) {\n    return LOG_SOURCE_TERMINATED;\n  }\n\n  return LOG_SOURCE_RUNNING;\n};\n\nexport class PodLogs extends React.Component {\n  constructor(props) {\n    super(props);\n    this._selectContainer = this._selectContainer.bind(this);\n    this.state = {\n      containers: {},\n      currentKey: getQueryArgument('container') || '',\n      initContainers: {},\n    };\n  }\n\n  static getDerivedStateFromProps({ obj: build }, { currentKey }) {\n    const newState = {};\n    const containers = _.get(build, 'spec.containers', []);\n    const initContainers = _.get(build, 'spec.initContainers', []);\n    newState.containers = containersToStatuses(build, containers);\n    newState.initContainers = containersToStatuses(build, initContainers);\n    if (!currentKey) {\n      const firstContainer = _.find(newState.containers, { order: 0 });\n      newState.currentKey = firstContainer ? firstContainer.name : '';\n    }\n    return newState;\n  }\n\n  _selectContainer(name) {\n    this.setState({ currentKey: name }, () => {\n      setQueryArgument('container', this.state.currentKey);\n    });\n  }\n\n  render() {\n    const { containers, currentKey, initContainers } = this.state;\n    const currentContainer = _.get(containers, currentKey) || _.get(initContainers, currentKey);\n    const currentContainerStatus = containerToLogSourceStatus(currentContainer);\n    const containerDropdown = (\n      <ContainerDropdown\n        currentKey={currentKey}\n        containers={containers}\n        initContainers={initContainers}\n        onChange={this._selectContainer}\n      />\n    );\n\n    return (\n      <div className=\"co-m-pane__body\">\n        <ResourceLog\n          containerName={currentContainer ? currentContainer.name : ''}\n          dropdown={containerDropdown}\n          resource={this.props.obj}\n          resourceStatus={currentContainerStatus}\n        />\n      </div>\n    );\n  }\n}\n"]}]}