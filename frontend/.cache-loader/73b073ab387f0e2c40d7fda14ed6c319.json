{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/query-browser.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/query-browser.tsx","mtime":1615298458740},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as classNames from 'classnames';\nimport * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Chart, ChartArea, ChartAxis, ChartGroup, ChartLegend, ChartLine, ChartStack, ChartThemeColor, ChartThemeVariant, ChartTooltip, ChartVoronoiContainer, getCustomTheme, } from '@patternfly/react-charts';\nimport { Alert, Button, EmptyState, EmptyStateBody, EmptyStateIcon, EmptyStateVariant, TextInput, Title, } from '@patternfly/react-core';\nimport { ChartLineIcon } from '@patternfly/react-icons';\nimport { connect } from 'react-redux';\nimport { withFallback } from '@console/shared/src/components/error/error-boundary';\nimport * as UIActions from '../../actions/ui';\nimport { GraphEmpty } from '../graphs/graph-empty';\nimport { getPrometheusURL, PrometheusEndpoint } from '../graphs/helpers';\nimport { queryBrowserTheme } from '../graphs/themes';\nimport { Dropdown, humanizeNumberSI, LoadingInline, usePoll, useRefWidth, useSafeFetch, } from '../utils';\nimport { formatPrometheusDuration, parsePrometheusDuration, twentyFourHourTime, twentyFourHourTimeWithSeconds, } from '../utils/datetime';\n// Prometheus internal labels start with \"__\"\nconst isInternalLabel = (key) => _.startsWith(key, '__');\n// External labels added by Prometheus (included in Thanos Querier responses)\nconst isExternalLabel = (key) => key === 'prometheus';\nconst spans = ['5m', '15m', '30m', '1h', '2h', '6h', '12h', '1d', '2d', '1w', '2w'];\nconst dropdownItems = _.zipObject(spans, spans);\nconst chartTheme = getCustomTheme(ChartThemeColor.multi, ChartThemeVariant.light, queryBrowserTheme);\nexport const colors = chartTheme.line.colorScale;\n// Use exponential notation for small or very large numbers to avoid labels with too many characters\nconst formatPositiveValue = (v) => v === 0 || (0.001 <= v && v < 1e23) ? humanizeNumberSI(v).string : v.toExponential(1);\nconst formatValue = (v) => (v < 0 ? '-' : '') + formatPositiveValue(Math.abs(v));\nexport const Error = ({ error, title = 'An error occurred' }) => (React.createElement(Alert, { isInline: true, className: \"co-alert\", title: title, variant: \"danger\" }, _.get(error, 'json.error', error.message)));\nconst GraphEmptyState = ({ children, title }) => (React.createElement(\"div\", { className: \"query-browser__wrapper graph-empty-state\" },\n    React.createElement(EmptyState, { variant: EmptyStateVariant.full },\n        React.createElement(EmptyStateIcon, { size: \"sm\", icon: ChartLineIcon }),\n        React.createElement(Title, { size: \"sm\" }, title),\n        React.createElement(EmptyStateBody, null, children))));\nconst SpanControls = React.memo(({ defaultSpanText, onChange, span }) => {\n    const [isValid, setIsValid] = React.useState(true);\n    const [text, setText] = React.useState(formatPrometheusDuration(span));\n    React.useEffect(() => {\n        setText(formatPrometheusDuration(span));\n    }, [span]);\n    const debouncedOnChange = React.useCallback(_.debounce(onChange, 400), [onChange]);\n    const setSpan = (newText, isDebounced = false) => {\n        const newSpan = parsePrometheusDuration(newText);\n        const newIsValid = newSpan > 0;\n        setIsValid(newIsValid);\n        setText(newText);\n        if (newIsValid && newSpan !== span) {\n            const fn = isDebounced ? debouncedOnChange : onChange;\n            fn(newSpan);\n        }\n    };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(TextInput, { \"aria-label\": \"graph timespan\", className: \"query-browser__span-text\", isValid: isValid, onChange: (v) => setSpan(v, true), type: \"text\", value: text }),\n        React.createElement(Dropdown, { ariaLabel: \"graph timespan\", buttonClassName: \"dropdown-button--icon-only\", items: dropdownItems, menuClassName: \"query-browser__span-dropdown-menu\", noSelection: true, onChange: (v) => setSpan(v) }),\n        React.createElement(Button, { className: \"query-browser__inline-control\", onClick: () => setSpan(defaultSpanText), type: \"button\", variant: \"tertiary\" }, \"Reset Zoom\")));\n});\nconst tooltipStateToProps = ({ UI }, { seriesIndex }) => {\n    let remaining = seriesIndex;\n    let props = {};\n    UI.getIn(['queryBrowser', 'queries'])\n        .filter((q) => q.get('isEnabled') && q.get('query'))\n        .forEach((q) => {\n        const series = q.get('series') || [];\n        if (series.length > remaining) {\n            props = { labels: series[remaining], query: q.get('query') };\n            return false;\n        }\n        remaining -= series.length;\n    });\n    return props;\n};\nconst TooltipInner_ = ({ datumX, datumY, labels, query, seriesIndex, x, y, }) => {\n    if (!query && !labels) {\n        return null;\n    }\n    const width = 240;\n    // This is actually the max tooltip height\n    const height = 500;\n    return (React.createElement(\"foreignObject\", { className: \"query-browser__tooltip-svg-wrap\", height: height, width: width, x: x - width / 2, y: y },\n        React.createElement(\"div\", { className: \"query-browser__tooltip-wrap\" },\n            React.createElement(\"div\", { className: \"query-browser__tooltip-arrow\" }),\n            React.createElement(\"div\", { className: \"query-browser__tooltip\" },\n                React.createElement(\"div\", { className: \"query-browser__tooltip-group\" },\n                    React.createElement(\"div\", { className: \"query-browser__series-btn\", style: { backgroundColor: colors[seriesIndex % colors.length] } }),\n                    datumX && (React.createElement(\"div\", { className: \"query-browser__tooltip-time\" }, twentyFourHourTimeWithSeconds(datumX)))),\n                React.createElement(\"div\", { className: \"query-browser__tooltip-group\" },\n                    React.createElement(\"div\", { className: \"co-nowrap co-truncate\" }, query),\n                    React.createElement(\"div\", { className: \"query-browser__tooltip-value\" }, formatValue(datumY))),\n                _.map(labels, (v, k) => (React.createElement(\"div\", { className: \"co-nowrap co-truncate\", key: k },\n                    React.createElement(\"span\", { className: \"query-browser__tooltip-label-key\" }, k === '__name__' ? 'name' : k),\n                    ' ',\n                    v)))))));\n};\nconst TooltipInner = connect(tooltipStateToProps)(TooltipInner_);\nconst Tooltip_ = ({ datum, x, y }) => datum && _.isFinite(datum.y) && _.isFinite(x) && _.isFinite(y) ? (React.createElement(TooltipInner, { datumX: datum.x, datumY: datum.y, seriesIndex: datum._stack - 1, x: x, y: y })) : null;\nconst Tooltip = withFallback(Tooltip_);\n// The `center` prop is required by ChartTooltip, but is actually overridden by our custom tooltip\nconst graphLabelComponent = React.createElement(ChartTooltip, { center: { x: 0, y: 0 }, flyoutComponent: React.createElement(Tooltip, null) });\n// Set activateData to false to work around VictoryVoronoiContainer crash (see\n// https://github.com/FormidableLabs/victory/issues/1314)\nconst graphContainer = (React.createElement(ChartVoronoiContainer, { activateData: false, className: \"query-browser__graph-container\", labelComponent: graphLabelComponent, labels: () => '' }));\nconst LegendContainer = ({ children }) => {\n    var _a, _b, _c, _d;\n    // The first child should be a <rect> with a `width` prop giving the legend's content width\n    const width = (_d = (_c = (_b = (_a = children === null || children === void 0 ? void 0 : children[0]) === null || _a === void 0 ? void 0 : _a[0]) === null || _b === void 0 ? void 0 : _b.props) === null || _c === void 0 ? void 0 : _c.width) !== null && _d !== void 0 ? _d : '100%';\n    return (React.createElement(\"foreignObject\", { height: 75, width: \"100%\", y: 230 },\n        React.createElement(\"div\", { className: \"monitoring-dashboards__legend-wrap\" },\n            React.createElement(\"svg\", { width: width }, children))));\n};\nconst Graph = React.memo(({ allSeries, disabledSeries, formatLegendLabel, isStack, span, width, xDomain }) => {\n    // Remove any disabled series\n    const data = _.flatMap(allSeries, (series, i) => {\n        return _.map(series, ([metric, values]) => {\n            return _.some(disabledSeries[i], (s) => _.isEqual(s, metric)) ? [{}] : values;\n        });\n    });\n    const domain = { x: xDomain || [Date.now() - span, Date.now()], y: undefined };\n    let yTickFormat = formatValue;\n    if (isStack) {\n        // Specify Y axis range if all values are zero, but otherwise let Chart set it automatically\n        const isAllZero = _.every(allSeries, (series) => _.every(series, ([, values]) => _.every(values, { y: 0 })));\n        if (isAllZero) {\n            domain.y = [-1, 1];\n        }\n    }\n    else {\n        // Set a reasonable Y-axis range based on the min and max values in the data\n        const findMin = (series) => _.minBy(series, 'y');\n        const findMax = (series) => _.maxBy(series, 'y');\n        let minY = _.get(findMin(_.map(data, findMin)), 'y', 0);\n        let maxY = _.get(findMax(_.map(data, findMax)), 'y', 0);\n        if (minY === 0 && maxY === 0) {\n            minY = -1;\n            maxY = 1;\n        }\n        else if (minY > 0 && maxY > 0) {\n            minY = 0;\n        }\n        else if (minY < 0 && maxY < 0) {\n            maxY = 0;\n        }\n        domain.y = [minY, maxY];\n        if (Math.abs(maxY - minY) < 0.005) {\n            yTickFormat = (v) => (v === 0 ? '0' : v.toExponential(1));\n        }\n    }\n    const xTickFormat = span < 5 * 60 * 1000 ? twentyFourHourTimeWithSeconds : twentyFourHourTime;\n    let xAxisStyle;\n    if (width < 225) {\n        xAxisStyle = {\n            tickLabels: {\n                angle: 45,\n                fontSize: 10,\n                textAnchor: 'start',\n                verticalAnchor: 'middle',\n            },\n        };\n    }\n    const legendData = formatLegendLabel\n        ? _.flatMap(allSeries, (series, i) => _.map(series, (s) => ({ name: formatLegendLabel(s[0], i) })))\n        : undefined;\n    return (React.createElement(Chart, { containerComponent: graphContainer, domain: domain, domainPadding: { y: 1 }, height: 200, scale: { x: 'time', y: 'linear' }, theme: chartTheme, width: width },\n        React.createElement(ChartAxis, { style: xAxisStyle, tickCount: 5, tickFormat: xTickFormat }),\n        React.createElement(ChartAxis, { crossAxis: false, dependentAxis: true, tickCount: 6, tickFormat: yTickFormat }),\n        isStack ? (React.createElement(ChartStack, null, _.map(data, (values, i) => (React.createElement(ChartArea, { key: i, data: values }))))) : (React.createElement(ChartGroup, null, _.map(data, (values, i) => (React.createElement(ChartLine, { key: i, data: values }))))),\n        legendData && (React.createElement(ChartLegend, { data: legendData, groupComponent: React.createElement(LegendContainer, null), itemsPerRow: 4, orientation: \"vertical\", style: {\n                labels: { fontSize: 11 },\n            }, symbolSpacer: 4 }))));\n});\nconst formatSeriesValues = (values, samples, span) => {\n    const newValues = _.map(values, (v) => {\n        const y = Number(v[1]);\n        return {\n            x: new Date(v[0] * 1000),\n            y: Number.isNaN(y) ? null : y,\n        };\n    });\n    // The data may have missing values, so we fill those gaps with nulls so that the graph correctly\n    // shows the missing values as gaps in the line\n    const start = Number(_.get(newValues, '[0].x'));\n    const end = Number(_.get(_.last(newValues), 'x'));\n    const step = span / samples;\n    _.range(start, end, step).forEach((t, i) => {\n        const x = new Date(t);\n        if (_.get(newValues, [i, 'x']) > x) {\n            newValues.splice(i, 0, { x, y: null });\n        }\n    });\n    return newValues;\n};\n// Try to limit the graph to this number of data points\nconst maxDataPointsSoft = 6000;\n// If we have more than this number of data points, do not render the graph\nconst maxDataPointsHard = 10000;\n// Min and max number of data samples per data series\nconst minSamples = 10;\nconst maxSamples = 300;\n// Fall back to a line chart for performance if there are too many series\nconst maxStacks = 20;\n// We don't want to refresh all the graph data for just a small adjustment in the number of samples,\n// so don't update unless the number of samples would change by at least this proportion\nconst samplesLeeway = 0.2;\n// Minimum step (milliseconds between data samples) because tiny steps reduce performance for almost no benefit\nconst minStep = 5 * 1000;\n// Don't allow zooming to less than this number of milliseconds\nconst minSpan = 30 * 1000;\n// Don't poll more often than this number of milliseconds\nconst minPollInterval = 10 * 1000;\nconst ZoomableGraph = ({ allSeries, disabledSeries, formatLegendLabel, isStack, onZoom, span, width, xDomain, }) => {\n    const [isZooming, setIsZooming] = React.useState(false);\n    const [x1, setX1] = React.useState(0);\n    const [x2, setX2] = React.useState(0);\n    const onMouseDown = (e) => {\n        setIsZooming(true);\n        const x = e.clientX - e.currentTarget.getBoundingClientRect().left;\n        setX1(x);\n        setX2(x);\n    };\n    const onMouseMove = (e) => {\n        setX2(e.clientX - e.currentTarget.getBoundingClientRect().left);\n    };\n    const onMouseUp = (e) => {\n        setIsZooming(false);\n        const xMin = Math.min(x1, x2);\n        const xMax = Math.max(x1, x2);\n        // Don't do anything if a range was not selected (don't zoom if you just click the graph)\n        if (xMax === xMin) {\n            return;\n        }\n        const zoomWidth = e.currentTarget.getBoundingClientRect().width;\n        const oldFrom = _.get(xDomain, '[0]', Date.now() - span);\n        let from = oldFrom + (span * xMin) / zoomWidth;\n        let to = oldFrom + (span * xMax) / zoomWidth;\n        let newSpan = to - from;\n        if (newSpan < minSpan) {\n            newSpan = minSpan;\n            const middle = (from + to) / 2;\n            from = middle - newSpan / 2;\n            to = middle + newSpan / 2;\n        }\n        onZoom(from, to);\n    };\n    const handlers = isZooming ? { onMouseMove, onMouseUp } : { onMouseDown };\n    return (React.createElement(\"div\", Object.assign({ className: \"query-browser__zoom\" }, handlers),\n        isZooming && (React.createElement(\"div\", { className: \"query-browser__zoom-overlay\", style: { left: Math.min(x1, x2), width: Math.abs(x1 - x2) } })),\n        React.createElement(Graph, { allSeries: allSeries, disabledSeries: disabledSeries, formatLegendLabel: formatLegendLabel, isStack: isStack, span: span, width: width, xDomain: xDomain })));\n};\nconst Loading = () => (React.createElement(\"div\", { className: \"query-browser__loading\" },\n    React.createElement(LoadingInline, null)));\nconst QueryBrowser_ = ({ defaultSamples, defaultTimespan = parsePrometheusDuration('30m'), disabledSeries = [], filterLabels, formatLegendLabel, GraphLink, hideControls, hideGraphs, isStack = false, namespace, patchQuery, pollInterval, queries, timespan, }) => {\n    // For the default time span, use the first of the suggested span options that is at least as long\n    // as defaultTimespan\n    const defaultSpanText = spans.find((s) => parsePrometheusDuration(s) >= defaultTimespan);\n    // If we have both `timespan` and `defaultTimespan`, `timespan` takes precedence\n    const [span, setSpan] = React.useState(timespan || parsePrometheusDuration(defaultSpanText));\n    // Limit the number of samples so that the step size doesn't fall below minStep\n    const maxSamplesForSpan = defaultSamples || _.clamp(Math.round(span / minStep), minSamples, maxSamples);\n    const [xDomain, setXDomain] = React.useState();\n    const [error, setError] = React.useState();\n    const [isDatasetTooBig, setIsDatasetTooBig] = React.useState(false);\n    const [graphData, setGraphData] = React.useState(null);\n    const [samples, setSamples] = React.useState(maxSamplesForSpan);\n    const [updating, setUpdating] = React.useState(true);\n    const [containerRef, width] = useRefWidth();\n    const endTime = _.get(xDomain, '[1]');\n    const safeFetch = useSafeFetch();\n    const stack = isStack && _.sumBy(graphData, 'length') <= maxStacks;\n    // If provided, `timespan` overrides any existing span setting\n    React.useEffect(() => {\n        if (timespan) {\n            setSpan(timespan);\n        }\n    }, [timespan]);\n    // Define this once for all queries so that they have exactly the same time range and X values\n    const now = Date.now();\n    const safeFetchQuery = (query) => {\n        if (_.isEmpty(query)) {\n            return Promise.resolve();\n        }\n        const url = getPrometheusURL({\n            endpoint: PrometheusEndpoint.QUERY_RANGE,\n            endTime: endTime || now,\n            namespace,\n            query,\n            samples,\n            timeout: '5s',\n            timespan: span,\n        });\n        return safeFetch(url);\n    };\n    const tick = () => hideGraphs\n        ? undefined\n        : Promise.all(_.map(queries, safeFetchQuery))\n            .then((responses) => {\n            const newResults = _.map(responses, 'data.result');\n            const numDataPoints = _.sumBy(newResults, (r) => _.sumBy(r, 'values.length'));\n            if (numDataPoints > maxDataPointsHard && samples === minSamples) {\n                setIsDatasetTooBig(true);\n                return;\n            }\n            setIsDatasetTooBig(false);\n            const newSamples = _.clamp(Math.floor((samples * maxDataPointsSoft) / numDataPoints), minSamples, maxSamplesForSpan);\n            // Change `samples` if either\n            //   - It will change by a proportion greater than `samplesLeeway`\n            //   - It will change to the upper or lower limit of its allowed range\n            if (Math.abs(newSamples - samples) / samples > samplesLeeway ||\n                (newSamples !== samples &&\n                    (newSamples === maxSamplesForSpan || newSamples === minSamples))) {\n                setSamples(newSamples);\n            }\n            else {\n                const newGraphData = _.map(newResults, (result) => {\n                    return _.map(result, ({ metric, values }) => {\n                        // If filterLabels is specified, ignore all series that don't match\n                        return filterLabels &&\n                            _.some(metric, (v, k) => filterLabels[k] !== v && !isInternalLabel(k) && !isExternalLabel(k))\n                            ? []\n                            : [metric, formatSeriesValues(values, samples, span)];\n                    });\n                });\n                setGraphData(newGraphData);\n                _.each(newResults, (r, i) => patchQuery(i, {\n                    series: r ? _.map(r, 'metric') : undefined,\n                }));\n                setUpdating(false);\n            }\n            setError(undefined);\n        })\n            .catch((err) => {\n            if (err.name !== 'AbortError') {\n                setError(err);\n                setUpdating(false);\n            }\n        });\n    // Don't poll if an end time was set (because the latest data is not displayed) or if the graph is\n    // hidden. Otherwise use a polling interval relative to the graph's timespan.\n    const tickInterval = pollInterval === undefined ? Math.max(span / 120, minPollInterval) : pollInterval;\n    const delay = endTime || hideGraphs ? null : tickInterval;\n    const queriesKey = _.reject(queries, _.isEmpty).join();\n    usePoll(tick, delay, endTime, filterLabels, namespace, queriesKey, samples, span);\n    React.useLayoutEffect(() => setUpdating(true), [endTime, namespace, queriesKey, samples, span]);\n    const onSpanChange = React.useCallback((newSpan) => {\n        setXDomain(undefined);\n        setSpan(newSpan);\n    }, []);\n    const isRangeVector = _.get(error, 'json.error', '').match(/invalid expression type \"range vector\"/);\n    if (hideGraphs) {\n        // Still render the graph containers so that `width` continues to be tracked while the graph is\n        // hidden. This ensures we can render at the correct width when the graph is shown again.\n        return (React.createElement(React.Fragment, null,\n            error && !isRangeVector && React.createElement(Error, { error: error }),\n            React.createElement(\"div\", { className: \"query-browser__wrapper query-browser__wrapper--hidden\" },\n                React.createElement(\"div\", { className: \"graph-wrapper graph-wrapper--query-browser\" },\n                    React.createElement(\"div\", { ref: containerRef, style: { width: '100%' } })))));\n    }\n    if (isRangeVector) {\n        return (React.createElement(GraphEmptyState, { title: \"Ungraphable results\" }, \"Query results include range vectors, which cannot be graphed. Try adding a function to transform the data.\"));\n    }\n    if (isDatasetTooBig) {\n        return (React.createElement(GraphEmptyState, { title: \"Ungraphable results\" }, \"The resulting dataset is too large to graph.\"));\n    }\n    const onZoom = (from, to) => {\n        setXDomain([from, to]);\n        setSpan(to - from);\n    };\n    return (React.createElement(\"div\", { className: classNames('query-browser__wrapper', {\n            'graph-empty-state': _.isEmpty(graphData),\n        }) },\n        hideControls ? (React.createElement(React.Fragment, null, updating && React.createElement(Loading, null))) : (React.createElement(\"div\", { className: \"query-browser__controls\" },\n            React.createElement(\"div\", { className: \"query-browser__controls--left\" },\n                React.createElement(SpanControls, { defaultSpanText: defaultSpanText, onChange: onSpanChange, span: span }),\n                updating && React.createElement(Loading, null)),\n            GraphLink && (React.createElement(\"div\", { className: \"query-browser__controls--right\" },\n                React.createElement(GraphLink, null))))),\n        error && React.createElement(Error, { error: error }),\n        _.isEmpty(graphData) && !updating && React.createElement(GraphEmpty, null),\n        !_.isEmpty(graphData) && (React.createElement(React.Fragment, null,\n            samples < maxSamplesForSpan && !updating && (React.createElement(Alert, { isInline: true, className: \"co-alert\", title: \"Displaying with reduced resolution due to large dataset.\", variant: \"info\" })),\n            React.createElement(\"div\", { className: \"graph-wrapper graph-wrapper--query-browser\" },\n                React.createElement(\"div\", { ref: containerRef, style: { width: '100%' } }, width > 0 && (React.createElement(React.Fragment, null, hideControls ? (React.createElement(Graph, { allSeries: graphData, disabledSeries: disabledSeries, formatLegendLabel: formatLegendLabel, isStack: stack, span: span, width: width, xDomain: xDomain })) : (React.createElement(ZoomableGraph, { allSeries: graphData, disabledSeries: disabledSeries, formatLegendLabel: formatLegendLabel, isStack: stack, onZoom: onZoom, span: span, width: width, xDomain: xDomain }))))))))));\n};\nexport const QueryBrowser = withFallback(connect(({ UI }) => ({ hideGraphs: !!UI.getIn(['monitoring', 'hideGraphs']) }), {\n    patchQuery: UIActions.queryBrowserPatchQuery,\n})(QueryBrowser_));\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/query-browser.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/query-browser.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as classNames from 'classnames';\nimport * as React from 'react';\nimport * as _ from 'lodash-es';\nimport {\n  Chart,\n  ChartArea,\n  ChartAxis,\n  ChartGroup,\n  ChartLegend,\n  ChartLine,\n  ChartStack,\n  ChartThemeColor,\n  ChartThemeVariant,\n  ChartTooltip,\n  ChartVoronoiContainer,\n  getCustomTheme,\n} from '@patternfly/react-charts';\nimport {\n  Alert,\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n  TextInput,\n  Title,\n} from '@patternfly/react-core';\nimport { ChartLineIcon } from '@patternfly/react-icons';\nimport { connect } from 'react-redux';\nimport { APIError } from '@console/shared';\nimport { withFallback } from '@console/shared/src/components/error/error-boundary';\n\nimport * as UIActions from '../../actions/ui';\nimport { RootState } from '../../redux';\nimport { PrometheusLabels, PrometheusResponse, PrometheusResult, PrometheusValue } from '../graphs';\nimport { GraphEmpty } from '../graphs/graph-empty';\nimport { getPrometheusURL, PrometheusEndpoint } from '../graphs/helpers';\nimport { queryBrowserTheme } from '../graphs/themes';\nimport {\n  Dropdown,\n  humanizeNumberSI,\n  LoadingInline,\n  usePoll,\n  useRefWidth,\n  useSafeFetch,\n} from '../utils';\nimport {\n  formatPrometheusDuration,\n  parsePrometheusDuration,\n  twentyFourHourTime,\n  twentyFourHourTimeWithSeconds,\n} from '../utils/datetime';\n\n// Prometheus internal labels start with \"__\"\nconst isInternalLabel = (key: string): boolean => _.startsWith(key, '__');\n\n// External labels added by Prometheus (included in Thanos Querier responses)\nconst isExternalLabel = (key: string): boolean => key === 'prometheus';\n\nconst spans = ['5m', '15m', '30m', '1h', '2h', '6h', '12h', '1d', '2d', '1w', '2w'];\nconst dropdownItems = _.zipObject(spans, spans);\nconst chartTheme = getCustomTheme(\n  ChartThemeColor.multi,\n  ChartThemeVariant.light,\n  queryBrowserTheme,\n);\nexport const colors = chartTheme.line.colorScale;\n\n// Use exponential notation for small or very large numbers to avoid labels with too many characters\nconst formatPositiveValue = (v: number): string =>\n  v === 0 || (0.001 <= v && v < 1e23) ? humanizeNumberSI(v).string : v.toExponential(1);\nconst formatValue = (v: number): string => (v < 0 ? '-' : '') + formatPositiveValue(Math.abs(v));\n\nexport const Error: React.FC<ErrorProps> = ({ error, title = 'An error occurred' }) => (\n  <Alert isInline className=\"co-alert\" title={title} variant=\"danger\">\n    {_.get(error, 'json.error', error.message)}\n  </Alert>\n);\n\nconst GraphEmptyState: React.FC<GraphEmptyStateProps> = ({ children, title }) => (\n  <div className=\"query-browser__wrapper graph-empty-state\">\n    <EmptyState variant={EmptyStateVariant.full}>\n      <EmptyStateIcon size=\"sm\" icon={ChartLineIcon} />\n      <Title size=\"sm\">{title}</Title>\n      <EmptyStateBody>{children}</EmptyStateBody>\n    </EmptyState>\n  </div>\n);\n\nconst SpanControls: React.FC<SpanControlsProps> = React.memo(\n  ({ defaultSpanText, onChange, span }) => {\n    const [isValid, setIsValid] = React.useState(true);\n    const [text, setText] = React.useState(formatPrometheusDuration(span));\n\n    React.useEffect(() => {\n      setText(formatPrometheusDuration(span));\n    }, [span]);\n\n    const debouncedOnChange = React.useCallback(_.debounce(onChange, 400), [onChange]);\n\n    const setSpan = (newText: string, isDebounced = false) => {\n      const newSpan = parsePrometheusDuration(newText);\n      const newIsValid = newSpan > 0;\n      setIsValid(newIsValid);\n      setText(newText);\n      if (newIsValid && newSpan !== span) {\n        const fn = isDebounced ? debouncedOnChange : onChange;\n        fn(newSpan);\n      }\n    };\n\n    return (\n      <>\n        <TextInput\n          aria-label=\"graph timespan\"\n          className=\"query-browser__span-text\"\n          isValid={isValid}\n          onChange={(v) => setSpan(v, true)}\n          type=\"text\"\n          value={text}\n        />\n        <Dropdown\n          ariaLabel=\"graph timespan\"\n          buttonClassName=\"dropdown-button--icon-only\"\n          items={dropdownItems}\n          menuClassName=\"query-browser__span-dropdown-menu\"\n          noSelection={true}\n          onChange={(v) => setSpan(v)}\n        />\n        <Button\n          className=\"query-browser__inline-control\"\n          onClick={() => setSpan(defaultSpanText)}\n          type=\"button\"\n          variant=\"tertiary\"\n        >\n          Reset Zoom\n        </Button>\n      </>\n    );\n  },\n);\n\nconst tooltipStateToProps = ({ UI }: RootState, { seriesIndex }) => {\n  let remaining = seriesIndex;\n  let props = {};\n  UI.getIn(['queryBrowser', 'queries'])\n    .filter((q) => q.get('isEnabled') && q.get('query'))\n    .forEach((q) => {\n      const series = q.get('series') || [];\n      if (series.length > remaining) {\n        props = { labels: series[remaining], query: q.get('query') };\n        return false;\n      }\n      remaining -= series.length;\n    });\n  return props;\n};\n\nconst TooltipInner_: React.FC<TooltipInnerProps> = ({\n  datumX,\n  datumY,\n  labels,\n  query,\n  seriesIndex,\n  x,\n  y,\n}) => {\n  if (!query && !labels) {\n    return null;\n  }\n\n  const width = 240;\n\n  // This is actually the max tooltip height\n  const height = 500;\n\n  return (\n    <foreignObject\n      className=\"query-browser__tooltip-svg-wrap\"\n      height={height}\n      width={width}\n      x={x - width / 2}\n      y={y}\n    >\n      <div className=\"query-browser__tooltip-wrap\">\n        <div className=\"query-browser__tooltip-arrow\" />\n        <div className=\"query-browser__tooltip\">\n          <div className=\"query-browser__tooltip-group\">\n            <div\n              className=\"query-browser__series-btn\"\n              style={{ backgroundColor: colors[seriesIndex % colors.length] }}\n            />\n            {datumX && (\n              <div className=\"query-browser__tooltip-time\">\n                {twentyFourHourTimeWithSeconds(datumX)}\n              </div>\n            )}\n          </div>\n          <div className=\"query-browser__tooltip-group\">\n            <div className=\"co-nowrap co-truncate\">{query}</div>\n            <div className=\"query-browser__tooltip-value\">{formatValue(datumY)}</div>\n          </div>\n          {_.map(labels, (v, k) => (\n            <div className=\"co-nowrap co-truncate\" key={k}>\n              <span className=\"query-browser__tooltip-label-key\">\n                {k === '__name__' ? 'name' : k}\n              </span>{' '}\n              {v}\n            </div>\n          ))}\n        </div>\n      </div>\n    </foreignObject>\n  );\n};\nconst TooltipInner = connect(tooltipStateToProps)(TooltipInner_);\n\nconst Tooltip_: React.FC<TooltipProps> = ({ datum, x, y }) =>\n  datum && _.isFinite(datum.y) && _.isFinite(x) && _.isFinite(y) ? (\n    <TooltipInner datumX={datum.x} datumY={datum.y} seriesIndex={datum._stack - 1} x={x} y={y} />\n  ) : null;\nconst Tooltip = withFallback(Tooltip_);\n\n// The `center` prop is required by ChartTooltip, but is actually overridden by our custom tooltip\nconst graphLabelComponent = <ChartTooltip center={{ x: 0, y: 0 }} flyoutComponent={<Tooltip />} />;\n\n// Set activateData to false to work around VictoryVoronoiContainer crash (see\n// https://github.com/FormidableLabs/victory/issues/1314)\nconst graphContainer = (\n  <ChartVoronoiContainer\n    activateData={false}\n    className=\"query-browser__graph-container\"\n    labelComponent={graphLabelComponent}\n    labels={() => ''}\n  />\n);\n\nconst LegendContainer = ({ children }: { children?: React.ReactNode }) => {\n  // The first child should be a <rect> with a `width` prop giving the legend's content width\n  const width = children?.[0]?.[0]?.props?.width ?? '100%';\n  return (\n    <foreignObject height={75} width=\"100%\" y={230}>\n      <div className=\"monitoring-dashboards__legend-wrap\">\n        <svg width={width}>{children}</svg>\n      </div>\n    </foreignObject>\n  );\n};\n\nconst Graph: React.FC<GraphProps> = React.memo(\n  ({ allSeries, disabledSeries, formatLegendLabel, isStack, span, width, xDomain }) => {\n    // Remove any disabled series\n    const data = _.flatMap(allSeries, (series, i) => {\n      return _.map(series, ([metric, values]) => {\n        return _.some(disabledSeries[i], (s) => _.isEqual(s, metric)) ? [{}] : values;\n      });\n    });\n\n    const domain = { x: xDomain || [Date.now() - span, Date.now()], y: undefined };\n\n    let yTickFormat = formatValue;\n\n    if (isStack) {\n      // Specify Y axis range if all values are zero, but otherwise let Chart set it automatically\n      const isAllZero = _.every(allSeries, (series) =>\n        _.every(series, ([, values]) => _.every(values, { y: 0 })),\n      );\n      if (isAllZero) {\n        domain.y = [-1, 1];\n      }\n    } else {\n      // Set a reasonable Y-axis range based on the min and max values in the data\n      const findMin = (series: GraphDataPoint[]) => _.minBy(series, 'y');\n      const findMax = (series: GraphDataPoint[]) => _.maxBy(series, 'y');\n      let minY = _.get(findMin(_.map(data, findMin)), 'y', 0);\n      let maxY = _.get(findMax(_.map(data, findMax)), 'y', 0);\n      if (minY === 0 && maxY === 0) {\n        minY = -1;\n        maxY = 1;\n      } else if (minY > 0 && maxY > 0) {\n        minY = 0;\n      } else if (minY < 0 && maxY < 0) {\n        maxY = 0;\n      }\n\n      domain.y = [minY, maxY];\n\n      if (Math.abs(maxY - minY) < 0.005) {\n        yTickFormat = (v: number) => (v === 0 ? '0' : v.toExponential(1));\n      }\n    }\n\n    const xTickFormat = span < 5 * 60 * 1000 ? twentyFourHourTimeWithSeconds : twentyFourHourTime;\n\n    let xAxisStyle;\n    if (width < 225) {\n      xAxisStyle = {\n        tickLabels: {\n          angle: 45,\n          fontSize: 10,\n          textAnchor: 'start',\n          verticalAnchor: 'middle',\n        },\n      };\n    }\n\n    const legendData = formatLegendLabel\n      ? _.flatMap(allSeries, (series, i) =>\n          _.map(series, (s) => ({ name: formatLegendLabel(s[0], i) })),\n        )\n      : undefined;\n\n    return (\n      <Chart\n        containerComponent={graphContainer}\n        domain={domain}\n        domainPadding={{ y: 1 }}\n        height={200}\n        scale={{ x: 'time', y: 'linear' }}\n        theme={chartTheme}\n        width={width}\n      >\n        <ChartAxis style={xAxisStyle} tickCount={5} tickFormat={xTickFormat} />\n        <ChartAxis crossAxis={false} dependentAxis tickCount={6} tickFormat={yTickFormat} />\n        {isStack ? (\n          <ChartStack>\n            {_.map(data, (values, i) => (\n              <ChartArea key={i} data={values} />\n            ))}\n          </ChartStack>\n        ) : (\n          <ChartGroup>\n            {_.map(data, (values, i) => (\n              <ChartLine key={i} data={values} />\n            ))}\n          </ChartGroup>\n        )}\n        {legendData && (\n          <ChartLegend\n            data={legendData}\n            groupComponent={<LegendContainer />}\n            itemsPerRow={4}\n            orientation=\"vertical\"\n            style={{\n              labels: { fontSize: 11 },\n            }}\n            symbolSpacer={4}\n          />\n        )}\n      </Chart>\n    );\n  },\n);\n\nconst formatSeriesValues = (\n  values: PrometheusValue[],\n  samples: number,\n  span: number,\n): GraphDataPoint[] => {\n  const newValues = _.map(values, (v) => {\n    const y = Number(v[1]);\n    return {\n      x: new Date(v[0] * 1000),\n      y: Number.isNaN(y) ? null : y,\n    };\n  });\n\n  // The data may have missing values, so we fill those gaps with nulls so that the graph correctly\n  // shows the missing values as gaps in the line\n  const start = Number(_.get(newValues, '[0].x'));\n  const end = Number(_.get(_.last(newValues), 'x'));\n  const step = span / samples;\n  _.range(start, end, step).forEach((t, i) => {\n    const x = new Date(t);\n    if (_.get(newValues, [i, 'x']) > x) {\n      newValues.splice(i, 0, { x, y: null });\n    }\n  });\n\n  return newValues;\n};\n\n// Try to limit the graph to this number of data points\nconst maxDataPointsSoft = 6000;\n\n// If we have more than this number of data points, do not render the graph\nconst maxDataPointsHard = 10000;\n\n// Min and max number of data samples per data series\nconst minSamples = 10;\nconst maxSamples = 300;\n\n// Fall back to a line chart for performance if there are too many series\nconst maxStacks = 20;\n\n// We don't want to refresh all the graph data for just a small adjustment in the number of samples,\n// so don't update unless the number of samples would change by at least this proportion\nconst samplesLeeway = 0.2;\n\n// Minimum step (milliseconds between data samples) because tiny steps reduce performance for almost no benefit\nconst minStep = 5 * 1000;\n\n// Don't allow zooming to less than this number of milliseconds\nconst minSpan = 30 * 1000;\n\n// Don't poll more often than this number of milliseconds\nconst minPollInterval = 10 * 1000;\n\nconst ZoomableGraph: React.FC<ZoomableGraphProps> = ({\n  allSeries,\n  disabledSeries,\n  formatLegendLabel,\n  isStack,\n  onZoom,\n  span,\n  width,\n  xDomain,\n}) => {\n  const [isZooming, setIsZooming] = React.useState(false);\n  const [x1, setX1] = React.useState(0);\n  const [x2, setX2] = React.useState(0);\n\n  const onMouseDown = (e: React.MouseEvent) => {\n    setIsZooming(true);\n    const x = e.clientX - e.currentTarget.getBoundingClientRect().left;\n    setX1(x);\n    setX2(x);\n  };\n\n  const onMouseMove = (e: React.MouseEvent) => {\n    setX2(e.clientX - e.currentTarget.getBoundingClientRect().left);\n  };\n\n  const onMouseUp = (e: React.MouseEvent) => {\n    setIsZooming(false);\n\n    const xMin = Math.min(x1, x2);\n    const xMax = Math.max(x1, x2);\n\n    // Don't do anything if a range was not selected (don't zoom if you just click the graph)\n    if (xMax === xMin) {\n      return;\n    }\n\n    const zoomWidth = e.currentTarget.getBoundingClientRect().width;\n    const oldFrom = _.get(xDomain, '[0]', Date.now() - span);\n    let from = oldFrom + (span * xMin) / zoomWidth;\n    let to = oldFrom + (span * xMax) / zoomWidth;\n    let newSpan = to - from;\n\n    if (newSpan < minSpan) {\n      newSpan = minSpan;\n      const middle = (from + to) / 2;\n      from = middle - newSpan / 2;\n      to = middle + newSpan / 2;\n    }\n    onZoom(from, to);\n  };\n\n  const handlers = isZooming ? { onMouseMove, onMouseUp } : { onMouseDown };\n\n  return (\n    <div className=\"query-browser__zoom\" {...handlers}>\n      {isZooming && (\n        <div\n          className=\"query-browser__zoom-overlay\"\n          style={{ left: Math.min(x1, x2), width: Math.abs(x1 - x2) }}\n        />\n      )}\n      <Graph\n        allSeries={allSeries}\n        disabledSeries={disabledSeries}\n        formatLegendLabel={formatLegendLabel}\n        isStack={isStack}\n        span={span}\n        width={width}\n        xDomain={xDomain}\n      />\n    </div>\n  );\n};\n\nconst Loading = () => (\n  <div className=\"query-browser__loading\">\n    <LoadingInline />\n  </div>\n);\n\nconst QueryBrowser_: React.FC<QueryBrowserProps> = ({\n  defaultSamples,\n  defaultTimespan = parsePrometheusDuration('30m'),\n  disabledSeries = [],\n  filterLabels,\n  formatLegendLabel,\n  GraphLink,\n  hideControls,\n  hideGraphs,\n  isStack = false,\n  namespace,\n  patchQuery,\n  pollInterval,\n  queries,\n  timespan,\n}) => {\n  // For the default time span, use the first of the suggested span options that is at least as long\n  // as defaultTimespan\n  const defaultSpanText = spans.find((s) => parsePrometheusDuration(s) >= defaultTimespan);\n\n  // If we have both `timespan` and `defaultTimespan`, `timespan` takes precedence\n  const [span, setSpan] = React.useState(timespan || parsePrometheusDuration(defaultSpanText));\n\n  // Limit the number of samples so that the step size doesn't fall below minStep\n  const maxSamplesForSpan =\n    defaultSamples || _.clamp(Math.round(span / minStep), minSamples, maxSamples);\n\n  const [xDomain, setXDomain] = React.useState<AxisDomain>();\n  const [error, setError] = React.useState<QueryBrowserError>();\n  const [isDatasetTooBig, setIsDatasetTooBig] = React.useState(false);\n  const [graphData, setGraphData] = React.useState(null);\n  const [samples, setSamples] = React.useState(maxSamplesForSpan);\n  const [updating, setUpdating] = React.useState(true);\n\n  const [containerRef, width] = useRefWidth();\n\n  const endTime = _.get(xDomain, '[1]');\n\n  const safeFetch = useSafeFetch();\n\n  const stack = isStack && _.sumBy(graphData, 'length') <= maxStacks;\n\n  // If provided, `timespan` overrides any existing span setting\n  React.useEffect(() => {\n    if (timespan) {\n      setSpan(timespan);\n    }\n  }, [timespan]);\n\n  // Define this once for all queries so that they have exactly the same time range and X values\n  const now = Date.now();\n\n  const safeFetchQuery = (query: string) => {\n    if (_.isEmpty(query)) {\n      return Promise.resolve();\n    }\n    const url = getPrometheusURL({\n      endpoint: PrometheusEndpoint.QUERY_RANGE,\n      endTime: endTime || now,\n      namespace,\n      query,\n      samples,\n      timeout: '5s',\n      timespan: span,\n    });\n    return safeFetch(url);\n  };\n\n  const tick = () =>\n    hideGraphs\n      ? undefined\n      : Promise.all(_.map(queries, safeFetchQuery))\n          .then((responses: PrometheusResponse[]) => {\n            const newResults = _.map(responses, 'data.result');\n            const numDataPoints = _.sumBy(newResults, (r) => _.sumBy(r, 'values.length'));\n\n            if (numDataPoints > maxDataPointsHard && samples === minSamples) {\n              setIsDatasetTooBig(true);\n              return;\n            }\n            setIsDatasetTooBig(false);\n\n            const newSamples = _.clamp(\n              Math.floor((samples * maxDataPointsSoft) / numDataPoints),\n              minSamples,\n              maxSamplesForSpan,\n            );\n\n            // Change `samples` if either\n            //   - It will change by a proportion greater than `samplesLeeway`\n            //   - It will change to the upper or lower limit of its allowed range\n            if (\n              Math.abs(newSamples - samples) / samples > samplesLeeway ||\n              (newSamples !== samples &&\n                (newSamples === maxSamplesForSpan || newSamples === minSamples))\n            ) {\n              setSamples(newSamples);\n            } else {\n              const newGraphData = _.map(newResults, (result: PrometheusResult[]) => {\n                return _.map(result, ({ metric, values }) => {\n                  // If filterLabels is specified, ignore all series that don't match\n                  return filterLabels &&\n                    _.some(\n                      metric,\n                      (v, k) => filterLabels[k] !== v && !isInternalLabel(k) && !isExternalLabel(k),\n                    )\n                    ? []\n                    : [metric, formatSeriesValues(values, samples, span)];\n                });\n              });\n              setGraphData(newGraphData);\n\n              _.each(newResults, (r, i) =>\n                patchQuery(i, {\n                  series: r ? _.map(r, 'metric') : undefined,\n                }),\n              );\n              setUpdating(false);\n            }\n            setError(undefined);\n          })\n          .catch((err) => {\n            if (err.name !== 'AbortError') {\n              setError(err);\n              setUpdating(false);\n            }\n          });\n\n  // Don't poll if an end time was set (because the latest data is not displayed) or if the graph is\n  // hidden. Otherwise use a polling interval relative to the graph's timespan.\n  const tickInterval =\n    pollInterval === undefined ? Math.max(span / 120, minPollInterval) : pollInterval;\n  const delay = endTime || hideGraphs ? null : tickInterval;\n\n  const queriesKey = _.reject(queries, _.isEmpty).join();\n  usePoll(tick, delay, endTime, filterLabels, namespace, queriesKey, samples, span);\n\n  React.useLayoutEffect(() => setUpdating(true), [endTime, namespace, queriesKey, samples, span]);\n\n  const onSpanChange = React.useCallback((newSpan: number) => {\n    setXDomain(undefined);\n    setSpan(newSpan);\n  }, []);\n\n  const isRangeVector = _.get(error, 'json.error', '').match(\n    /invalid expression type \"range vector\"/,\n  );\n\n  if (hideGraphs) {\n    // Still render the graph containers so that `width` continues to be tracked while the graph is\n    // hidden. This ensures we can render at the correct width when the graph is shown again.\n    return (\n      <>\n        {error && !isRangeVector && <Error error={error} />}\n        <div className=\"query-browser__wrapper query-browser__wrapper--hidden\">\n          <div className=\"graph-wrapper graph-wrapper--query-browser\">\n            <div ref={containerRef} style={{ width: '100%' }}></div>\n          </div>\n        </div>\n      </>\n    );\n  }\n\n  if (isRangeVector) {\n    return (\n      <GraphEmptyState title=\"Ungraphable results\">\n        Query results include range vectors, which cannot be graphed. Try adding a function to\n        transform the data.\n      </GraphEmptyState>\n    );\n  }\n\n  if (isDatasetTooBig) {\n    return (\n      <GraphEmptyState title=\"Ungraphable results\">\n        The resulting dataset is too large to graph.\n      </GraphEmptyState>\n    );\n  }\n\n  const onZoom = (from: number, to: number) => {\n    setXDomain([from, to]);\n    setSpan(to - from);\n  };\n\n  return (\n    <div\n      className={classNames('query-browser__wrapper', {\n        'graph-empty-state': _.isEmpty(graphData),\n      })}\n    >\n      {hideControls ? (\n        <>{updating && <Loading />}</>\n      ) : (\n        <div className=\"query-browser__controls\">\n          <div className=\"query-browser__controls--left\">\n            <SpanControls defaultSpanText={defaultSpanText} onChange={onSpanChange} span={span} />\n            {updating && <Loading />}\n          </div>\n          {GraphLink && (\n            <div className=\"query-browser__controls--right\">\n              <GraphLink />\n            </div>\n          )}\n        </div>\n      )}\n      {error && <Error error={error} />}\n      {_.isEmpty(graphData) && !updating && <GraphEmpty />}\n      {!_.isEmpty(graphData) && (\n        <>\n          {samples < maxSamplesForSpan && !updating && (\n            <Alert\n              isInline\n              className=\"co-alert\"\n              title=\"Displaying with reduced resolution due to large dataset.\"\n              variant=\"info\"\n            />\n          )}\n          <div className=\"graph-wrapper graph-wrapper--query-browser\">\n            <div ref={containerRef} style={{ width: '100%' }}>\n              {width > 0 && (\n                <>\n                  {hideControls ? (\n                    <Graph\n                      allSeries={graphData}\n                      disabledSeries={disabledSeries}\n                      formatLegendLabel={formatLegendLabel}\n                      isStack={stack}\n                      span={span}\n                      width={width}\n                      xDomain={xDomain}\n                    />\n                  ) : (\n                    <ZoomableGraph\n                      allSeries={graphData}\n                      disabledSeries={disabledSeries}\n                      formatLegendLabel={formatLegendLabel}\n                      isStack={stack}\n                      onZoom={onZoom}\n                      span={span}\n                      width={width}\n                      xDomain={xDomain}\n                    />\n                  )}\n                </>\n              )}\n            </div>\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\nexport const QueryBrowser = withFallback(\n  connect(({ UI }: RootState) => ({ hideGraphs: !!UI.getIn(['monitoring', 'hideGraphs']) }), {\n    patchQuery: UIActions.queryBrowserPatchQuery,\n  })(QueryBrowser_),\n);\n\ntype AxisDomain = [number, number];\n\ntype GraphDataPoint = {\n  x: Date;\n  y: number;\n};\n\ntype Series = [PrometheusLabels, GraphDataPoint[][]];\n\nexport type QueryObj = {\n  disabledSeries?: PrometheusLabels[];\n  isEnabled?: boolean;\n  isExpanded?: boolean;\n  query?: string;\n  series?: PrometheusLabels[];\n  text?: string;\n};\n\nexport type FormatLegendLabel = (labels: PrometheusLabels, i: number) => string;\n\nexport type PatchQuery = (index: number, patch: QueryObj) => any;\n\ntype QueryBrowserError = {\n  json?: {\n    error?: string;\n  };\n} & APIError;\n\ntype ErrorProps = {\n  error: QueryBrowserError;\n  title?: string;\n};\n\ntype GraphEmptyStateProps = {\n  children: React.ReactNode;\n  title: string;\n};\n\ntype GraphProps = {\n  allSeries: Series[][];\n  disabledSeries?: PrometheusLabels[][];\n  formatLegendLabel?: FormatLegendLabel;\n  isStack?: boolean;\n  span: number;\n  width: number;\n  xDomain?: AxisDomain;\n};\n\ntype ZoomableGraphProps = GraphProps & { onZoom: (from: number, to: number) => void };\n\nexport type QueryBrowserProps = {\n  defaultSamples?: number;\n  defaultTimespan?: number;\n  disabledSeries?: PrometheusLabels[][];\n  filterLabels?: PrometheusLabels;\n  formatLegendLabel?: FormatLegendLabel;\n  GraphLink?: React.ComponentType<{}>;\n  hideControls?: boolean;\n  hideGraphs: boolean;\n  isStack?: boolean;\n  namespace?: string;\n  patchQuery: PatchQuery;\n  pollInterval?: number;\n  queries: string[];\n  timespan?: number;\n};\n\ntype SpanControlsProps = {\n  defaultSpanText: string;\n  onChange: (span: number) => void;\n  span: number;\n};\n\ntype TooltipDatum = { _stack: number; x: Date; y: number };\n\ntype TooltipInnerProps = {\n  datumX: Date;\n  datumY: number;\n  labels?: PrometheusLabels;\n  query?: string;\n  seriesIndex: number;\n  x: number;\n  y: number;\n};\n\ntype TooltipProps = {\n  datum?: TooltipDatum;\n  x?: number;\n  y?: number;\n};\n"]}]}