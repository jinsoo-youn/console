{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/utils/resource-list-dropdown.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/utils/resource-list-dropdown.tsx","mtime":1615298458740},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { OrderedMap } from 'immutable';\nimport * as classNames from 'classnames';\nimport * as fuzzy from 'fuzzysearch';\nimport { useFormContext } from 'react-hook-form';\nimport { Dropdown, ResourceIcon } from '../../utils';\nimport { Badge, Checkbox, DataToolbar, DataToolbarContent, DataToolbarFilter, DataToolbarItem } from '@patternfly/react-core';\nconst DropdownItem = ({ resource, checked }) => {\n    var _a, _b;\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"span\", { className: 'co-resource-item' },\n            React.createElement(Checkbox, { tabIndex: -1, id: `${resource.metadata.uid}:checkbox`, checked: checked }),\n            React.createElement(\"span\", { className: \"co-resource-icon--fixed-width\" },\n                React.createElement(ResourceIcon, { kind: resource.kind })),\n            React.createElement(\"span\", { className: \"co-resource-item__resource-name\" },\n                React.createElement(\"span\", null, (_b = (_a = resource.fakeMetadata) === null || _a === void 0 ? void 0 : _a.fakename) !== null && _b !== void 0 ? _b : resource.metadata.name)))));\n};\nexport const ResourceListDropdown = (props) => {\n    var _a, _b, _c;\n    const { name, required, resourceList, onChange, showAll, className, type, useHookForm } = props;\n    const selected = name ? props.selected : props.selected;\n    if (useHookForm && name) {\n        const { register, unregister, setValue } = useFormContext();\n        React.useEffect(() => {\n            setValue(name, selected);\n        }, [selected]);\n        React.useEffect(() => {\n            register({ name }, { required });\n            return () => {\n                unregister(name);\n            };\n        }, [name, register, unregister]);\n    }\n    const isSelected = (uid) => {\n        return _.includes(selected, 'All') || _.includes(selected, uid);\n    };\n    // Create dropdown items for each resource.\n    const items = OrderedMap(_.map(resourceList, (resource) => [\n        resource.metadata.uid,\n        React.createElement(DropdownItem, { resource: resource, checked: isSelected(resource.metadata.uid) })\n    ]));\n    // Add an \"All\" item to the top if `showAll`.\n    const allItems = (showAll\n        ? OrderedMap({\n            All: (React.createElement(React.Fragment, null,\n                React.createElement(\"span\", { className: \"co-resource-item\" },\n                    React.createElement(Checkbox, { id: \"all-resources\", checked: isSelected('All') }),\n                    React.createElement(\"span\", { className: \"co-resource-icon--fixed-width\" },\n                        React.createElement(ResourceIcon, { kind: \"All\" })),\n                    React.createElement(\"span\", { className: \"co-resource-item__resource-name\" }, `All ${props.resourceType}`)))),\n        }).concat(items)\n        : items).toJS();\n    const autocompleteFilter = (text, item) => {\n        var _a, _b;\n        const { resource } = item.props;\n        if (!resource) {\n            return false;\n        }\n        return fuzzy(_.toLower(text), _.toLower((_b = (_a = resource.fakeMetadata) === null || _a === void 0 ? void 0 : _a.fakename) !== null && _b !== void 0 ? _b : resource.metadata.name));\n    };\n    const autocompletePlaceholder = (_a = props.autocompletePlaceholder) !== null && _a !== void 0 ? _a : \"Select Resource\";\n    return (React.createElement(Dropdown, { menuClassName: \"dropdown-menu--text-wrap\", className: classNames('co-type-selector', className), items: allItems, title: (_b = props.title) !== null && _b !== void 0 ? _b : React.createElement(\"div\", { key: \"title-resource\" },\n            `${props.resourceType} `,\n            React.createElement(Badge, { isRead: true }, selected.length === 1 && selected[0] === 'All' ? 'All' : selected.length)), onChange: onChange, autocompleteFilter: autocompleteFilter, autocompletePlaceholder: (_c = props.autocompleteFilter) !== null && _c !== void 0 ? _c : autocompletePlaceholder, type: type }));\n};\nResourceListDropdown.defaultProps = {\n    resourceType: \"Resources\",\n    useHookForm: false,\n};\nconst ResourceListDropdownWithDataToolbar_ = (props, ref) => {\n    const { resourceList } = props;\n    const [selectedItems, setSelectedItems] = React.useState(new Set([]));\n    const allItems = new Set(resourceList.map(resource => resource.metadata.uid));\n    React.useEffect(() => {\n        var _a;\n        (_a = props.onSelectedItemChange) === null || _a === void 0 ? void 0 : _a.call(props, selectedItems);\n    }, [selectedItems]);\n    const updateSelectedItems = (selection) => {\n        if (selection === 'All') {\n            selectedItems.has(selection) ? clearSelectedItems() : selectAllItems();\n        }\n        else {\n            if (selectedItems.has('All')) {\n                const updateItems = new Set(allItems);\n                updateItems.delete(selection);\n                setSelectedItems(updateItems);\n            }\n            else {\n                const updateItems = new Set(selectedItems);\n                updateItems.has(selection) ? updateItems.delete(selection) : updateItems.add(selection);\n                updateItems.size === resourceList.length ? selectAllItems() : setSelectedItems(updateItems);\n            }\n        }\n    };\n    const updateNewItems = (filter, { key }) => {\n        updateSelectedItems(key);\n    };\n    const selectAllItems = () => {\n        setSelectedItems(new Set(['All']));\n    };\n    const clearSelectedItems = () => {\n        setSelectedItems(new Set([]));\n    };\n    const clearAll = () => {\n        clearSelectedItems();\n    };\n    return (React.createElement(DataToolbar, { id: \"search-toolbar\", clearAllFilters: clearAll, clearFiltersButtonText: `Clear all ${props.resourceType}` },\n        React.createElement(DataToolbarContent, null,\n            React.createElement(DataToolbarItem, null,\n                React.createElement(DataToolbarFilter, { deleteChipGroup: clearSelectedItems, chips: [...selectedItems].map(uid => {\n                        var _a, _b, _c, _d;\n                        const item = resourceList.find(i => i.metadata.uid === uid);\n                        return {\n                            key: uid,\n                            node: (React.createElement(React.Fragment, null,\n                                React.createElement(ResourceIcon, { kind: (_a = item === null || item === void 0 ? void 0 : item.kind) !== null && _a !== void 0 ? _a : uid }), (_d = (_c = (_b = item === null || item === void 0 ? void 0 : item.fakeMetadata) === null || _b === void 0 ? void 0 : _b.fakename) !== null && _c !== void 0 ? _c : item === null || item === void 0 ? void 0 : item.metadata.name) !== null && _d !== void 0 ? _d : uid)),\n                        };\n                    }), deleteChip: updateNewItems, categoryName: props.resourceType },\n                    React.createElement(ResourceListDropdown, Object.assign({ resourceList: resourceList, selected: [...selectedItems], onChange: updateSelectedItems, type: \"multiple\" }, props)))))));\n};\nexport const ResourceListDropdownWithDataToolbar = React.forwardRef(ResourceListDropdownWithDataToolbar_);\nResourceListDropdownWithDataToolbar.defaultProps = {\n    resourceType: \"Resources\",\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/utils/resource-list-dropdown.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/utils/resource-list-dropdown.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,CAAC,MAAM,WAAW,CAAC;AAC/B,OAAO,EAAE,UAAU,EAAE,MAAM,WAAW,CAAC;AACvC,OAAO,KAAK,UAAU,MAAM,YAAY,CAAC;AACzC,OAAO,KAAK,KAAK,MAAM,aAAa,CAAC;AACrC,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AAEjD,OAAO,EAAE,QAAQ,EAAE,YAAY,EAAE,MAAM,aAAa,CAAC;AAKrD,OAAO,EAAE,KAAK,EAAE,QAAQ,EAAE,WAAW,EAAE,kBAAkB,EAAE,iBAAiB,EAAE,eAAe,EAAmB,MAAM,wBAAwB,CAAC;AAM/I,MAAM,YAAY,GAAiC,CAAC,EAAE,QAAQ,EAAE,OAAO,EAAE,EAAE,EAAE;;IAAC,OAAA,CAC5E;QACE,8BAAM,SAAS,EAAE,kBAAkB;YACjC,oBAAC,QAAQ,IACP,QAAQ,EAAE,CAAC,CAAC,EACZ,EAAE,EAAE,GAAG,QAAQ,CAAC,QAAQ,CAAC,GAAG,WAAW,EACvC,OAAO,EAAE,OAAO,GAChB;YACF,8BAAM,SAAS,EAAC,+BAA+B;gBAC7C,oBAAC,YAAY,IAAC,IAAI,EAAE,QAAQ,CAAC,IAAI,GAAI,CAChC;YACP,8BAAM,SAAS,EAAC,iCAAiC;gBAC/C,8CACG,QAAQ,CAAC,YAAY,0CAAE,QAAQ,mCAAI,QAAQ,CAAC,QAAQ,CAAC,IAAI,CACrD,CACF,CACF,CACN,CACJ,CAAA;CAAA,CAAC;AAOF,MAAM,CAAC,MAAM,oBAAoB,GAAyC,CAAC,KAAK,EAAE,EAAE;;IAClF,MAAM,EAAE,IAAI,EAAE,QAAQ,EAAE,YAAY,EAAE,QAAQ,EAAE,OAAO,EAAE,SAAS,EAAE,IAAI,EAAE,WAAW,EAAE,GAAG,KAAK,CAAC;IAEhG,MAAM,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC;IAExD,IAAI,WAAW,IAAI,IAAI,EAAE;QACvB,MAAM,EAAE,QAAQ,EAAE,UAAU,EAAE,QAAQ,EAAE,GAAG,cAAc,EAAE,CAAC;QAE5D,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;YACnB,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAE3B,CAAC,EAAE,CAAC,QAAQ,CAAC,CAAC,CAAC;QAEf,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;YACnB,QAAQ,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,QAAQ,EAAE,CAAC,CAAC;YAEjC,OAAO,GAAG,EAAE;gBACV,UAAU,CAAC,IAAI,CAAC,CAAC;YACnB,CAAC,CAAA;QACH,CAAC,EAAE,CAAC,IAAI,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC,CAAC;KAClC;IAED,MAAM,UAAU,GAAG,CAAC,GAAW,EAAE,EAAE;QACjC,OAAO,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,QAAQ,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;IAClE,CAAC,CAAC;IACF,2CAA2C;IAC3C,MAAM,KAAK,GAAG,UAAU,CACtB,CAAC,CAAC,GAAG,CAAC,YAAY,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC;QAChC,QAAQ,CAAC,QAAQ,CAAC,GAAG;QACrB,oBAAC,YAAY,IACX,QAAQ,EAAE,QAAQ,EAClB,OAAO,EAAE,UAAU,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAI;KACjD,CACA,CAAC,CAAC;IACL,6CAA6C;IAC7C,MAAM,QAAQ,GAAG,CAAC,OAAO;QACvB,CAAC,CAAC,UAAU,CAAC;YACX,GAAG,EAAE,CACH;gBACE,8BAAM,SAAS,EAAC,kBAAkB;oBAChC,oBAAC,QAAQ,IAAC,EAAE,EAAC,eAAe,EAAC,OAAO,EAAE,UAAU,CAAC,KAAK,CAAC,GAAI;oBAC3D,8BAAM,SAAS,EAAC,+BAA+B;wBAC7C,oBAAC,YAAY,IAAC,IAAI,EAAC,KAAK,GAAG,CACtB;oBACP,8BAAM,SAAS,EAAC,iCAAiC,IAAE,OAAO,KAAK,CAAC,YAAY,EAAE,CAAQ,CACjF,CACN,CACJ;SACF,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC;QAChB,CAAC,CAAC,KAAK,CACR,CAAC,IAAI,EAAkC,CAAC;IAEzC,MAAM,kBAAkB,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,EAAE;;QACxC,MAAM,EAAE,QAAQ,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC;QAChC,IAAI,CAAC,QAAQ,EAAE;YACb,OAAO,KAAK,CAAC;SACd;QAED,OAAO,KAAK,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC,OAAO,aAAC,QAAQ,CAAC,YAAY,0CAAE,QAAQ,mCAAI,QAAQ,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC;IACtG,CAAC,CAAC;IAEF,MAAM,uBAAuB,SAAG,KAAK,CAAC,uBAAuB,mCAAI,iBAAiB,CAAC;IAEnF,OAAO,CACL,oBAAC,QAAQ,IACP,aAAa,EAAC,0BAA0B,EACxC,SAAS,EAAE,UAAU,CAAC,kBAAkB,EAAE,SAAS,CAAC,EACpD,KAAK,EAAE,QAAQ,EACf,KAAK,QACH,KAAK,CAAC,KAAK,mCACX,6BAAK,GAAG,EAAC,gBAAgB;YACtB,GAAG,KAAK,CAAC,YAAY,GAAG;YACzB,oBAAC,KAAK,IAAC,MAAM,UACV,QAAQ,CAAC,MAAM,KAAK,CAAC,IAAI,QAAQ,CAAC,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CACnE,CACJ,EAER,QAAQ,EAAE,QAAQ,EAClB,kBAAkB,EAAE,kBAAkB,EACtC,uBAAuB,QAAE,KAAK,CAAC,kBAAkB,mCAAI,uBAAuB,EAC5E,IAAI,EAAE,IAAI,GACV,CACH,CAAC;AACJ,CAAC,CAAC;AAkBF,oBAAoB,CAAC,YAAY,GAAG;IAClC,YAAY,EAAE,WAAW;IACzB,WAAW,EAAE,KAAK;CACnB,CAAC;AAEF,MAAM,oCAAoC,GAAwD,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;IAC/G,MAAM,EAAE,YAAY,EAAE,GAAG,KAAK,CAAC;IAC/B,MAAM,CAAC,aAAa,EAAE,gBAAgB,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,GAAG,CAAS,EAAE,CAAC,CAAC,CAAC;IAE9E,MAAM,QAAQ,GAAG,IAAI,GAAG,CAAS,YAAY,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;IAEtF,KAAK,CAAC,SAAS,CAAC,GAAE,EAAE;;QAClB,MAAA,KAAK,CAAC,oBAAoB,+CAA1B,KAAK,EAAwB,aAAa,EAAE;IAC9C,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC;IAEpB,MAAM,mBAAmB,GAAG,CAAC,SAAiB,EAAE,EAAE;QAChD,IAAI,SAAS,KAAK,KAAK,EAAE;YACvB,aAAa,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC;SACxE;aAAM;YACL,IAAI,aAAa,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE;gBAC5B,MAAM,WAAW,GAAG,IAAI,GAAG,CAAC,QAAQ,CAAC,CAAC;gBACtC,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC;gBAC9B,gBAAgB,CAAC,WAAW,CAAC,CAAC;aAC/B;iBAAM;gBACL,MAAM,WAAW,GAAG,IAAI,GAAG,CAAC,aAAa,CAAC,CAAC;gBAC3C,WAAW,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,MAAM,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,GAAG,CAAC,SAAS,CAAC,CAAC;gBACxF,WAAW,CAAC,IAAI,KAAK,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,gBAAgB,CAAC,WAAW,CAAC,CAAC;aAC7F;SACF;IACH,CAAC,CAAC;IAEF,MAAM,cAAc,GAAG,CAAC,MAAc,EAAE,EAAE,GAAG,EAAmB,EAAE,EAAE;QAClE,mBAAmB,CAAC,GAAG,CAAC,CAAC;IAC3B,CAAC,CAAC;IAEF,MAAM,cAAc,GAAG,GAAG,EAAE;QAC1B,gBAAgB,CAAC,IAAI,GAAG,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;IACrC,CAAC,CAAA;IAED,MAAM,kBAAkB,GAAG,GAAG,EAAE;QAC9B,gBAAgB,CAAC,IAAI,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC;IAChC,CAAC,CAAC;IAEF,MAAM,QAAQ,GAAG,GAAG,EAAE;QACpB,kBAAkB,EAAE,CAAC;IACvB,CAAC,CAAC;IAEF,OAAO,CACL,oBAAC,WAAW,IAAC,EAAE,EAAC,gBAAgB,EAAC,eAAe,EAAE,QAAQ,EAAE,sBAAsB,EAAE,aAAa,KAAK,CAAC,YAAY,EAAE;QACnH,oBAAC,kBAAkB;YACjB,oBAAC,eAAe;gBACd,oBAAC,iBAAiB,IAChB,eAAe,EAAE,kBAAkB,EACnC,KAAK,EAAE,CAAC,GAAG,aAAa,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;;wBAClC,MAAM,IAAI,GAAG,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC;wBAC5D,OAAO;4BACL,GAAG,EAAE,GAAG;4BACR,IAAI,EAAE,CACJ;gCACE,oBAAC,YAAY,IAAC,IAAI,QAAE,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,IAAI,mCAAI,GAAG,GAAI,oBACxC,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,YAAY,0CAAE,QAAQ,mCAAI,IAAI,aAAJ,IAAI,uBAAJ,IAAI,CAAE,QAAQ,CAAC,IAAI,mCAAI,GAAG,CAC1D,CACJ;yBACF,CAAA;oBACH,CAAC,CAAC,EACF,UAAU,EAAE,cAAc,EAC1B,YAAY,EAAE,KAAK,CAAC,YAAY;oBAEhC,oBAAC,oBAAoB,kBACnB,YAAY,EAAE,YAAY,EAC1B,QAAQ,EAAE,CAAC,GAAG,aAAa,CAAC,EAC5B,QAAQ,EAAE,mBAAmB,EAC7B,IAAI,EAAC,UAAU,IACX,KAAK,EACT,CACgB,CACJ,CACC,CACT,CAAC,CAAA;AACnB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,mCAAmC,GAAG,KAAK,CAAC,UAAU,CAAC,oCAAoC,CAAC,CAAC;AAgB1G,mCAAmC,CAAC,YAAY,GAAG;IACjD,YAAY,EAAE,WAAW;CAC1B,CAAC","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { OrderedMap } from 'immutable';\nimport * as classNames from 'classnames';\nimport * as fuzzy from 'fuzzysearch';\nimport { useFormContext } from 'react-hook-form';\n\nimport { Dropdown, ResourceIcon } from '../../utils';\nimport {\n  K8sResourceKind,\n  K8sResourceKindReference,\n} from '../../../module/k8s';\nimport { Badge, Checkbox, DataToolbar, DataToolbarContent, DataToolbarFilter, DataToolbarItem, DataToolbarChip } from '@patternfly/react-core';\n\nexport type HCK8sResourceKind = K8sResourceKind & {\n  fakeMetadata?: any;\n};\n\nconst DropdownItem: React.SFC<DropdownItemProps> = ({ resource, checked }) => (\n  <>\n    <span className={'co-resource-item'}>\n      <Checkbox\n        tabIndex={-1}\n        id={`${resource.metadata.uid}:checkbox`}\n        checked={checked}\n      />\n      <span className=\"co-resource-icon--fixed-width\">\n        <ResourceIcon kind={resource.kind} />\n      </span>\n      <span className=\"co-resource-item__resource-name\">\n        <span>\n          {resource.fakeMetadata?.fakename ?? resource.metadata.name}\n        </span>\n      </span>\n    </span>\n  </>\n);\n\ntype DropdownItemProps = {\n  resource: HCK8sResourceKind;\n  checked?: boolean;\n};\n\nexport const ResourceListDropdown: React.SFC<ResourceListDropdownProps> = (props) => {\n  const { name, required, resourceList, onChange, showAll, className, type, useHookForm } = props;\n\n  const selected = name ? props.selected : props.selected;\n\n  if (useHookForm && name) {\n    const { register, unregister, setValue } = useFormContext();\n\n    React.useEffect(() => {\n      setValue(name, selected);\n      \n    }, [selected]);\n\n    React.useEffect(() => {\n      register({ name }, { required });\n  \n      return () => {\n        unregister(name);\n      }\n    }, [name, register, unregister]);\n  }\n\n  const isSelected = (uid: string) => {\n    return _.includes(selected, 'All') || _.includes(selected, uid);\n  };\n  // Create dropdown items for each resource.\n  const items = OrderedMap(\n    _.map(resourceList, (resource) => [\n      resource.metadata.uid,\n      <DropdownItem\n        resource={resource}\n        checked={isSelected(resource.metadata.uid)} />\n    ]\n    ));\n  // Add an \"All\" item to the top if `showAll`.\n  const allItems = (showAll\n    ? OrderedMap({\n      All: (\n        <>\n          <span className=\"co-resource-item\">\n            <Checkbox id=\"all-resources\" checked={isSelected('All')} />\n            <span className=\"co-resource-icon--fixed-width\">\n              <ResourceIcon kind=\"All\" />\n            </span>\n            <span className=\"co-resource-item__resource-name\">{`All ${props.resourceType}`}</span>\n          </span>\n        </>\n      ),\n    }).concat(items)\n    : items\n  ).toJS() as { [s: string]: JSX.Element };\n\n  const autocompleteFilter = (text, item) => {\n    const { resource } = item.props;\n    if (!resource) {\n      return false;\n    }\n\n    return fuzzy(_.toLower(text), _.toLower(resource.fakeMetadata?.fakename ?? resource.metadata.name));\n  };\n\n  const autocompletePlaceholder = props.autocompletePlaceholder ?? \"Select Resource\";\n\n  return (\n    <Dropdown\n      menuClassName=\"dropdown-menu--text-wrap\"\n      className={classNames('co-type-selector', className)}\n      items={allItems}\n      title={\n        props.title ??\n        <div key=\"title-resource\">\n          {`${props.resourceType} `}\n          <Badge isRead>\n            {selected.length === 1 && selected[0] === 'All' ? 'All' : selected.length}\n          </Badge>\n        </div>\n      }\n      onChange={onChange}\n      autocompleteFilter={autocompleteFilter}\n      autocompletePlaceholder={props.autocompleteFilter ?? autocompletePlaceholder}\n      type={type}\n    />\n  );\n};\n\nexport type ResourceListDropdownProps = {\n  name?: string;\n  required?: boolean;\n  resourceList: HCK8sResourceKind[];\n  selected: K8sResourceKindReference[];\n  onChange: (value: string) => void;\n  className?: string;\n  showAll?: boolean;\n  type?: string;\n  title?: string | JSX.Element;\n  resourceType?: string;\n  autocompletePlaceholder?: string;\n  autocompleteFilter?: (text: any, item: any) => any;\n  useHookForm?: boolean;\n};\n\nResourceListDropdown.defaultProps = {\n  resourceType: \"Resources\",\n  useHookForm: false,\n};\n\nconst ResourceListDropdownWithDataToolbar_: React.SFC<ResourceListDropdownWithDataToolbarProps> = (props, ref) => {\n  const { resourceList } = props;\n  const [selectedItems, setSelectedItems] = React.useState(new Set<string>([]));\n\n  const allItems = new Set<string>(resourceList.map(resource => resource.metadata.uid));\n\n  React.useEffect(()=>{\n    props.onSelectedItemChange?.(selectedItems);\n  }, [selectedItems]);\n\n  const updateSelectedItems = (selection: string) => {\n    if (selection === 'All') {\n      selectedItems.has(selection) ? clearSelectedItems() : selectAllItems();\n    } else {\n      if (selectedItems.has('All')) {\n        const updateItems = new Set(allItems);\n        updateItems.delete(selection);\n        setSelectedItems(updateItems);\n      } else {\n        const updateItems = new Set(selectedItems);\n        updateItems.has(selection) ? updateItems.delete(selection) : updateItems.add(selection);\n        updateItems.size === resourceList.length ? selectAllItems() : setSelectedItems(updateItems);\n      }\n    }\n  };\n\n  const updateNewItems = (filter: string, { key }: DataToolbarChip) => {\n    updateSelectedItems(key);\n  };\n\n  const selectAllItems = () => {\n    setSelectedItems(new Set(['All']));\n  }\n\n  const clearSelectedItems = () => {\n    setSelectedItems(new Set([]));\n  };\n\n  const clearAll = () => {\n    clearSelectedItems();\n  };\n\n  return (\n    <DataToolbar id=\"search-toolbar\" clearAllFilters={clearAll} clearFiltersButtonText={`Clear all ${props.resourceType}`}>\n      <DataToolbarContent>\n        <DataToolbarItem>\n          <DataToolbarFilter\n            deleteChipGroup={clearSelectedItems}\n            chips={[...selectedItems].map(uid => {\n              const item = resourceList.find(i => i.metadata.uid === uid);\n              return {\n                key: uid,\n                node: (\n                  <>\n                    <ResourceIcon kind={item?.kind ?? uid} />\n                    {item?.fakeMetadata?.fakename ?? item?.metadata.name ?? uid}\n                  </>\n                ),\n              }\n            })}\n            deleteChip={updateNewItems}\n            categoryName={props.resourceType}\n          >\n            <ResourceListDropdown\n              resourceList={resourceList}\n              selected={[...selectedItems]}\n              onChange={updateSelectedItems}\n              type=\"multiple\"\n              {...props}\n            />\n          </DataToolbarFilter>\n        </DataToolbarItem>\n      </DataToolbarContent>\n    </DataToolbar>)\n};\n\nexport const ResourceListDropdownWithDataToolbar = React.forwardRef(ResourceListDropdownWithDataToolbar_);\n\nexport type ResourceListDropdownWithDataToolbarProps = {\n  name?: string;\n  required?: boolean;\n  resourceList: HCK8sResourceKind[];\n  className?: string;\n  showAll?: boolean;\n  title?: string | JSX.Element;\n  resourceType?: string;\n  autocompletePlaceholder?: string;\n  autocompleteFilter?: (text: any, item: any) => any;\n  onSelectedItemChange?: (items: Set<string>) => any;\n  useHookForm?: boolean;\n};\n\nResourceListDropdownWithDataToolbar.defaultProps = {\n  resourceType: \"Resources\",\n};\n"]}]}