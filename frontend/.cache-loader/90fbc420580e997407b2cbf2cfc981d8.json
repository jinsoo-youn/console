{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/utils/resource-list-dropdown.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/utils/resource-list-dropdown.tsx","mtime":1618309685330},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { OrderedMap } from 'immutable';\nimport * as classNames from 'classnames';\nimport * as fuzzy from 'fuzzysearch';\nimport { useFormContext } from 'react-hook-form';\nimport { Dropdown, ResourceIcon } from '../../utils';\nimport { Badge, Checkbox, DataToolbar, DataToolbarContent, DataToolbarFilter, DataToolbarItem } from '@patternfly/react-core';\nconst autocompleteFilter = (text, item) => {\n    var _a, _b;\n    const { resource } = item.props;\n    if (!resource) {\n        return false;\n    }\n    return fuzzy(_.toLower(text), _.toLower((_b = (_a = resource.fakeMetadata) === null || _a === void 0 ? void 0 : _a.fakename) !== null && _b !== void 0 ? _b : resource.metadata.name));\n};\nconst DropdownItem = ({ resource }) => {\n    var _a, _b;\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"span\", { className: 'co-resource-item' },\n            React.createElement(\"span\", { className: \"co-resource-icon--fixed-width\" },\n                React.createElement(ResourceIcon, { kind: resource.kind })),\n            React.createElement(\"span\", { className: \"co-resource-item__resource-name\" },\n                React.createElement(\"span\", null, (_b = (_a = resource.fakeMetadata) === null || _a === void 0 ? void 0 : _a.fakename) !== null && _b !== void 0 ? _b : resource.metadata.name)))));\n};\nconst DropdownItemWithCheckbox = ({ resource, checked }) => {\n    var _a, _b;\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"span\", { className: 'co-resource-item' },\n            React.createElement(Checkbox, { tabIndex: -1, id: `${resource.metadata.name}:checkbox`, checked: checked }),\n            React.createElement(\"span\", { className: \"co-resource-icon--fixed-width\" },\n                React.createElement(ResourceIcon, { kind: resource.kind })),\n            React.createElement(\"span\", { className: \"co-resource-item__resource-name\" },\n                React.createElement(\"span\", null, (_b = (_a = resource.fakeMetadata) === null || _a === void 0 ? void 0 : _a.fakename) !== null && _b !== void 0 ? _b : resource.metadata.name)))));\n};\nexport const SingleResourceListDropdown = (props) => {\n    var _a, _b, _c, _d;\n    const { resourceList, onChange, className, selected } = props;\n    const isSelected = !!selected;\n    // Create dropdown items for each resource.\n    const items = OrderedMap(_.map(resourceList, (resource) => [\n        resource.metadata.name,\n        React.createElement(DropdownItem, { resource: resource })\n    ])).toJS();\n    const autocompletePlaceholder = (_a = props.autocompletePlaceholder) !== null && _a !== void 0 ? _a : \"Select Resource\";\n    const placeholder = (_b = props.placeholder) !== null && _b !== void 0 ? _b : props.resourceType;\n    return (React.createElement(Dropdown, { menuClassName: \"dropdown-menu--text-wrap\", className: classNames('co-type-selector', className), items: items, title: (_c = props.title) !== null && _c !== void 0 ? _c : (isSelected ? items[selected] : placeholder), onChange: onChange, autocompleteFilter: (_d = props.autocompleteFilter) !== null && _d !== void 0 ? _d : autocompleteFilter, autocompletePlaceholder: autocompletePlaceholder, type: 'single' }));\n};\nexport const MultipleResourceListDropdown = (props) => {\n    var _a, _b, _c;\n    const { resourceList, onChange, className, selected, showAll, resourceType } = props;\n    const selectedSize = selected.size;\n    const isSelected = (name) => {\n        return selected.has('All') || selected.has(name);\n    };\n    // Create dropdown items for each resource.\n    const items = OrderedMap(_.map(resourceList, (resource) => [\n        resource.metadata.name,\n        React.createElement(DropdownItemWithCheckbox, { resource: resource, checked: isSelected(resource.metadata.name) })\n    ]));\n    // Add an \"All\" item to the top if `showAll`.\n    const allItems = (showAll\n        ? OrderedMap({\n            All: (React.createElement(React.Fragment, null,\n                React.createElement(\"span\", { className: \"co-resource-item\" },\n                    React.createElement(Checkbox, { id: \"all-resources\", checked: isSelected('All') }),\n                    React.createElement(\"span\", { className: \"co-resource-icon--fixed-width\" },\n                        React.createElement(ResourceIcon, { kind: \"All\" })),\n                    React.createElement(\"span\", { className: \"co-resource-item__resource-name\" }, `All ${resourceType}`)))),\n        }).concat(items)\n        : items).toJS();\n    const autocompletePlaceholder = (_a = props.autocompletePlaceholder) !== null && _a !== void 0 ? _a : \"Select Resources\";\n    return (React.createElement(Dropdown, { menuClassName: \"dropdown-menu--text-wrap\", className: classNames('co-type-selector', className), items: allItems, title: (_b = props.title) !== null && _b !== void 0 ? _b : React.createElement(\"div\", { key: \"title-resource\" },\n            `${props.resourceType} `,\n            React.createElement(Badge, { isRead: true }, (selected === null || selected === void 0 ? void 0 : selected.has('All')) ? 'All' : selectedSize)), onChange: onChange, autocompleteFilter: (_c = props.autocompleteFilter) !== null && _c !== void 0 ? _c : autocompleteFilter, autocompletePlaceholder: autocompletePlaceholder, type: 'multiple' }));\n};\nexport const ResourceListDropdown = (props) => {\n    const { name, required, methods, useHookForm } = props;\n    const { register, unregister, setValue, watch } = methods ? methods : useHookForm ? useFormContext() : { register: null, unregister: null, setValue: null, watch: null };\n    if (useHookForm || methods) {\n        React.useEffect(() => {\n            register({ name }, { required });\n            return () => {\n                unregister(name);\n            };\n        }, [name, register, unregister]);\n    }\n    const defaultValue = watch === null || watch === void 0 ? void 0 : watch(name, props.defaultValue);\n    React.useEffect(() => {\n        props.defaultValue && (setValue === null || setValue === void 0 ? void 0 : setValue(name, defaultValue));\n    }, [props.defaultValue]);\n    if (props.type === 'multiple') {\n        const { resourceList } = props;\n        const [selectedItems, setSelectedItems] = React.useState(new Set(defaultValue !== null && defaultValue !== void 0 ? defaultValue : []));\n        const [selectedItemSize, setSelectedItemSize] = React.useState(selectedItems.size);\n        const resourceListLength = resourceList.length;\n        const allItems = new Set(resourceList.map(resource => resource.metadata.name));\n        const selectAllItems = () => {\n            setSelectedItems(new Set(['All']));\n            setValue === null || setValue === void 0 ? void 0 : setValue(name, [...allItems]);\n            setSelectedItemSize(resourceListLength);\n        };\n        const clearAll = () => {\n            setSelectedItems(new Set([]));\n            setValue === null || setValue === void 0 ? void 0 : setValue(name, []);\n            setSelectedItemSize(0);\n        };\n        const updateSelectedItems = (selection) => {\n            var _a;\n            if (selection === 'All') {\n                selectedItems.has(selection) ? clearAll() : selectAllItems();\n            }\n            else {\n                if (selectedItems.has('All')) {\n                    const updateItems = new Set(allItems);\n                    updateItems.delete(selection);\n                    setSelectedItems(updateItems);\n                    setValue === null || setValue === void 0 ? void 0 : setValue(name, [...updateItems]);\n                    setSelectedItemSize(resourceListLength - 1);\n                }\n                else {\n                    const updateItems = new Set(selectedItems);\n                    let updateItemSize = selectedItemSize;\n                    if (updateItems.has(selection)) {\n                        updateItems.delete(selection);\n                        updateItemSize--;\n                    }\n                    else {\n                        updateItems.add(selection);\n                        updateItemSize++;\n                    }\n                    updateItemSize === resourceListLength ? selectAllItems() : setSelectedItems(updateItems);\n                    setSelectedItemSize(updateItemSize);\n                    setValue === null || setValue === void 0 ? void 0 : setValue(name, [...updateItems]);\n                }\n            }\n            (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, selection);\n        };\n        return (React.createElement(MultipleResourceListDropdown, Object.assign({}, props, { selected: selectedItems, onChange: updateSelectedItems })));\n    }\n    else {\n        const [selectedItem, setSelectedItem] = React.useState(defaultValue !== null && defaultValue !== void 0 ? defaultValue : '');\n        const updateSelectedItem = (selection) => {\n            var _a;\n            setSelectedItem(selection);\n            setValue === null || setValue === void 0 ? void 0 : setValue(name, selection);\n            (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, selection);\n        };\n        return (React.createElement(SingleResourceListDropdown, Object.assign({}, props, { selected: selectedItem, onChange: updateSelectedItem })));\n    }\n};\nResourceListDropdown.defaultProps = {\n    resourceType: 'Resources',\n    type: 'single',\n    useHookForm: false,\n};\nexport const ResourceListDropdownWithDataToolbar = (props) => {\n    var _a;\n    const { resourceList } = props;\n    const [selectedItems, setSelectedItems] = React.useState(new Set([]));\n    const allItems = new Set(resourceList.map(resource => resource.metadata.name));\n    React.useEffect(() => {\n        var _a;\n        (_a = props.onSelectedItemChange) === null || _a === void 0 ? void 0 : _a.call(props, selectedItems);\n    }, [selectedItems]);\n    const updateSelectedItems = (selection) => {\n        var _a;\n        if (selection === 'All') {\n            selectedItems.has(selection) ? clearAll() : selectAllItems();\n        }\n        else {\n            if (selectedItems.has('All')) {\n                const updateItems = new Set(allItems);\n                updateItems.delete(selection);\n                setSelectedItems(updateItems);\n            }\n            else {\n                const updateItems = new Set(selectedItems);\n                updateItems.has(selection) ? updateItems.delete(selection) : updateItems.add(selection);\n                updateItems.size === resourceList.length ? selectAllItems() : setSelectedItems(updateItems);\n            }\n        }\n        (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, selection);\n    };\n    const updateNewItems = (filter, { key }) => {\n        updateSelectedItems(key);\n    };\n    const selectAllItems = () => {\n        setSelectedItems(new Set(['All']));\n    };\n    const clearAll = () => {\n        setSelectedItems(new Set([]));\n    };\n    return (React.createElement(DataToolbar, { id: \"search-toolbar\", clearAllFilters: clearAll, clearFiltersButtonText: (_a = props.clearFiltersButtonText) !== null && _a !== void 0 ? _a : `Clear all ${props.resourceType}` },\n        React.createElement(DataToolbarContent, null,\n            React.createElement(DataToolbarItem, null,\n                React.createElement(DataToolbarFilter, { deleteChipGroup: clearAll, chips: [...selectedItems].map(name => {\n                        var _a, _b, _c, _d;\n                        const item = resourceList.find(i => i.metadata.name === name);\n                        return {\n                            key: name,\n                            node: (React.createElement(React.Fragment, null,\n                                React.createElement(ResourceIcon, { kind: (_a = item === null || item === void 0 ? void 0 : item.kind) !== null && _a !== void 0 ? _a : name }), (_d = (_c = (_b = item === null || item === void 0 ? void 0 : item.fakeMetadata) === null || _b === void 0 ? void 0 : _b.fakename) !== null && _c !== void 0 ? _c : item === null || item === void 0 ? void 0 : item.metadata.name) !== null && _d !== void 0 ? _d : name)),\n                        };\n                    }), deleteChip: updateNewItems, categoryName: props.resourceType },\n                    React.createElement(MultipleResourceListDropdown, Object.assign({}, props, { resourceList: resourceList, selected: selectedItems, onChange: updateSelectedItems, type: \"multiple\" })))))));\n};\nResourceListDropdownWithDataToolbar.defaultProps = {\n    resourceType: \"Resources\",\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/utils/resource-list-dropdown.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/utils/resource-list-dropdown.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { OrderedMap } from 'immutable';\nimport * as classNames from 'classnames';\nimport * as fuzzy from 'fuzzysearch';\nimport { useFormContext } from 'react-hook-form';\n\nimport { Dropdown, ResourceIcon } from '../../utils';\nimport {\n  K8sResourceKind,\n} from '../../../module/k8s';\nimport { Badge, Checkbox, DataToolbar, DataToolbarContent, DataToolbarFilter, DataToolbarItem, DataToolbarChip } from '@patternfly/react-core';\n\nconst autocompleteFilter = (text, item) => {\n  const { resource } = item.props;\n  if (!resource) {\n    return false;\n  }\n\n  return fuzzy(_.toLower(text), _.toLower(resource.fakeMetadata?.fakename ?? resource.metadata.name));\n};\n\nexport type HCK8sResourceKind = K8sResourceKind & {\n  fakeMetadata?: any;\n};\n\nconst DropdownItem: React.SFC<DropdownItemProps> = ({ resource }) => (\n  <>\n    <span className={'co-resource-item'}>\n      <span className=\"co-resource-icon--fixed-width\">\n        <ResourceIcon kind={resource.kind} />\n      </span>\n      <span className=\"co-resource-item__resource-name\">\n        <span>\n          {resource.fakeMetadata?.fakename ?? resource.metadata.name}\n        </span>\n      </span>\n    </span>\n  </>\n);\n\nconst DropdownItemWithCheckbox: React.SFC<DropdownItemWithCheckboxProps> = ({ resource, checked }) => (\n  <>\n    <span className={'co-resource-item'}>\n      <Checkbox\n        tabIndex={-1}\n        id={`${resource.metadata.name}:checkbox`}\n        checked={checked}\n      />\n      <span className=\"co-resource-icon--fixed-width\">\n        <ResourceIcon kind={resource.kind} />\n      </span>\n      <span className=\"co-resource-item__resource-name\">\n        <span>\n          {resource.fakeMetadata?.fakename ?? resource.metadata.name}\n        </span>\n      </span>\n    </span>\n  </>\n);\n\ntype DropdownItemProps = {\n  resource: HCK8sResourceKind;\n};\n\ntype DropdownItemWithCheckboxProps = DropdownItemProps & {\n  checked: boolean;\n}\n\nexport const SingleResourceListDropdown: React.SFC<BaseResourceListDropdown & SingleResourceDropdownProps & { selected: string; onChange: (value: string) => void; }> = (props) => {\n  const { resourceList, onChange, className, selected } = props;\n  const isSelected = !!selected;\n\n  // Create dropdown items for each resource.\n  const items = OrderedMap(\n    _.map(resourceList, (resource) => [\n      resource.metadata.name,\n      <DropdownItem resource={resource} />\n    ]\n    )).toJS() as { [s: string]: JSX.Element };\n\n  const autocompletePlaceholder = props.autocompletePlaceholder ?? \"Select Resource\";\n  const placeholder = props.placeholder ?? props.resourceType;\n\n  return (\n    <Dropdown\n      menuClassName=\"dropdown-menu--text-wrap\"\n      className={classNames('co-type-selector', className)}\n      items={items}\n      title={\n        props.title ??\n        (isSelected ? items[selected] : placeholder)\n      }\n      onChange={onChange}\n      autocompleteFilter={props.autocompleteFilter ?? autocompleteFilter}\n      autocompletePlaceholder={autocompletePlaceholder}\n      type='single'\n    />\n  );\n};\n\nexport const MultipleResourceListDropdown: React.SFC<BaseResourceListDropdown & MultipleResourceDropdownProps & { selected: Set<string>; onChange: (value: string) => void; }> = (props) => {\n  const { resourceList, onChange, className, selected, showAll, resourceType } = props;\n  const selectedSize = selected.size;\n\n  const isSelected = (name: string) => {\n    return selected.has('All') || selected.has(name);\n  };\n  // Create dropdown items for each resource.\n  const items = OrderedMap(\n    _.map(resourceList, (resource) => [\n      resource.metadata.name,\n      <DropdownItemWithCheckbox resource={resource} checked={isSelected(resource.metadata.name)} />\n    ]\n    ));\n  // Add an \"All\" item to the top if `showAll`.\n  const allItems = (showAll\n    ? OrderedMap({\n      All: (\n        <>\n          <span className=\"co-resource-item\">\n            <Checkbox id=\"all-resources\" checked={isSelected('All')} />\n            <span className=\"co-resource-icon--fixed-width\">\n              <ResourceIcon kind=\"All\" />\n            </span>\n            <span className=\"co-resource-item__resource-name\">{`All ${resourceType}`}</span>\n          </span>\n        </>\n      ),\n    }).concat(items)\n    : items\n  ).toJS() as { [s: string]: JSX.Element };\n\n  const autocompletePlaceholder = props.autocompletePlaceholder ?? \"Select Resources\";\n\n  return (\n    <Dropdown\n      menuClassName=\"dropdown-menu--text-wrap\"\n      className={classNames('co-type-selector', className)}\n      items={allItems}\n      title={\n        props.title ??\n        <div key=\"title-resource\">\n          {`${props.resourceType} `}\n          <Badge isRead>\n            {selected?.has('All') ? 'All' : selectedSize}\n          </Badge>\n        </div>\n      }\n      onChange={onChange}\n      autocompleteFilter={props.autocompleteFilter ?? autocompleteFilter}\n      autocompletePlaceholder={autocompletePlaceholder}\n      type='multiple'\n    />\n  );\n};\n\nexport interface ResourceDropdownCommon {\n  name?: string;\n  required?: boolean;\n  onChange?: (value: string) => void;\n  title?: string | JSX.Element;\n  resourceType?: string;\n  autocompletePlaceholder?: string;\n  autocompleteFilter?: (text: any, item: any) => any;\n  useHookForm?: boolean;\n  className?: string;\n  dropDownClassName?: string;\n  menuClassName?: string;\n  buttonClassName?: string;\n  type: 'single' | 'multiple';\n  methods?: any;\n}\n\nexport interface BaseResourceListDropdown extends ResourceDropdownCommon {\n  resourceList: HCK8sResourceKind[];\n}\n\nexport interface SingleResourceDropdownProps extends ResourceDropdownCommon {\n  type: 'single';\n  placeholder?: string | JSX.Element;\n  defaultValue?: string;\n}\n\nexport interface MultipleResourceDropdownProps extends ResourceDropdownCommon {\n  type: 'multiple';\n  showAll?: boolean;\n  defaultValue?: string[];\n}\n\nexport const ResourceListDropdown: React.SFC<ResourceListDropdownProps> = (props) => {\n  const { name, required, methods, useHookForm } = props;\n  const { register, unregister, setValue, watch } = methods ? methods : useHookForm ? useFormContext() : { register: null, unregister: null, setValue: null, watch: null };\n\n  if (useHookForm || methods) {\n    React.useEffect(() => {\n      register({ name }, { required });\n\n      return () => {\n        unregister(name);\n      }\n    }, [name, register, unregister]);\n  }\n\n  const defaultValue = watch?.(name, props.defaultValue);\n  React.useEffect(() => {\n    props.defaultValue && setValue?.(name, defaultValue);\n  }, [props.defaultValue]);\n\n  if (props.type === 'multiple') {\n    const { resourceList } = props;\n    const [selectedItems, setSelectedItems] = React.useState(new Set<string>(defaultValue ?? []));\n    const [selectedItemSize, setSelectedItemSize] = React.useState(selectedItems.size);\n    const resourceListLength = resourceList.length;\n    const allItems = new Set<string>(resourceList.map(resource => resource.metadata.name));\n\n    const selectAllItems = () => {\n      setSelectedItems(new Set(['All']));\n      setValue?.(name, [...allItems]);\n      setSelectedItemSize(resourceListLength);\n    }\n\n    const clearAll = () => {\n      setSelectedItems(new Set([]));\n      setValue?.(name, []);\n      setSelectedItemSize(0);\n    };\n\n    const updateSelectedItems = (selection: string) => {\n      if (selection === 'All') {\n        selectedItems.has(selection) ? clearAll() : selectAllItems();\n      } else {\n        if (selectedItems.has('All')) {\n          const updateItems = new Set(allItems);\n          updateItems.delete(selection);\n          setSelectedItems(updateItems);\n          setValue?.(name, [...updateItems]);\n          setSelectedItemSize(resourceListLength - 1);\n        } else {\n          const updateItems = new Set(selectedItems);\n          let updateItemSize = selectedItemSize;\n          if (updateItems.has(selection)) {\n            updateItems.delete(selection)\n            updateItemSize--;\n          } else {\n            updateItems.add(selection);\n            updateItemSize++;\n          }\n          updateItemSize === resourceListLength ? selectAllItems() : setSelectedItems(updateItems);\n          setSelectedItemSize(updateItemSize);\n          setValue?.(name, [...updateItems]);\n        }\n      }\n      props.onChange?.(selection);\n    };\n\n    return (\n      <MultipleResourceListDropdown\n        {...props}\n        selected={selectedItems}\n        onChange={updateSelectedItems}\n      />);\n  } else {\n    const [selectedItem, setSelectedItem] = React.useState(defaultValue ?? '');\n\n    const updateSelectedItem = (selection: string) => {\n      setSelectedItem(selection);\n      setValue?.(name, selection);\n      props.onChange?.(selection);\n    };\n\n    return (\n      <SingleResourceListDropdown\n        {...props}\n        selected={selectedItem}\n        onChange={updateSelectedItem}\n      />);\n  }\n};\n\nexport type ResourceListDropdownProps = BaseResourceListDropdown & (SingleResourceDropdownProps | MultipleResourceDropdownProps);\n\nResourceListDropdown.defaultProps = {\n  resourceType: 'Resources',\n  type: 'single',\n  useHookForm: false,\n};\n\nexport const ResourceListDropdownWithDataToolbar: React.SFC<ResourceListDropdownWithDataToolbarProps> = (props) => {\n  const { resourceList } = props;\n  const [selectedItems, setSelectedItems] = React.useState(new Set<string>([]));\n\n  const allItems = new Set<string>(resourceList.map(resource => resource.metadata.name));\n\n  React.useEffect(() => {\n    props.onSelectedItemChange?.(selectedItems);\n  }, [selectedItems]);\n\n  const updateSelectedItems = (selection: string) => {\n    if (selection === 'All') {\n      selectedItems.has(selection) ? clearAll() : selectAllItems();\n    } else {\n      if (selectedItems.has('All')) {\n        const updateItems = new Set(allItems);\n        updateItems.delete(selection);\n        setSelectedItems(updateItems);\n      } else {\n        const updateItems = new Set(selectedItems);\n        updateItems.has(selection) ? updateItems.delete(selection) : updateItems.add(selection);\n        updateItems.size === resourceList.length ? selectAllItems() : setSelectedItems(updateItems);\n      }\n    }\n    props.onChange?.(selection);\n  };\n\n  const updateNewItems = (filter: string, { key }: DataToolbarChip) => {\n    updateSelectedItems(key);\n  };\n\n  const selectAllItems = () => {\n    setSelectedItems(new Set(['All']));\n  }\n\n  const clearAll = () => {\n    setSelectedItems(new Set([]));\n  };\n\n  return (\n    <DataToolbar id=\"search-toolbar\" clearAllFilters={clearAll} clearFiltersButtonText={props.clearFiltersButtonText ?? `Clear all ${props.resourceType}`}>\n      <DataToolbarContent>\n        <DataToolbarItem>\n          <DataToolbarFilter\n            deleteChipGroup={clearAll}\n            chips={[...selectedItems].map(name => {\n              const item = resourceList.find(i => i.metadata.name === name);\n              return {\n                key: name,\n                node: (\n                  <>\n                    <ResourceIcon kind={item?.kind ?? name} />\n                    {item?.fakeMetadata?.fakename ?? item?.metadata.name ?? name}\n                  </>\n                ),\n              }\n            })}\n            deleteChip={updateNewItems}\n            categoryName={props.resourceType}\n          >\n            <MultipleResourceListDropdown\n              {...props}\n              resourceList={resourceList}\n              selected={selectedItems}\n              onChange={updateSelectedItems}\n              type=\"multiple\"\n            />\n          </DataToolbarFilter>\n        </DataToolbarItem>\n      </DataToolbarContent>\n    </DataToolbar>)\n};\n\nexport type ResourceListDropdownWithDataToolbarProps = {\n  name?: string;\n  required?: boolean;\n  resourceList: HCK8sResourceKind[];\n  className?: string;\n  showAll?: boolean;\n  title?: string | JSX.Element;\n  resourceType?: string;\n  autocompletePlaceholder?: string;\n  autocompleteFilter?: (text: any, item: any) => any;\n  onChange?: (item: string) => any;\n  onSelectedItemChange?: (items: Set<string>) => any;\n  useHookForm?: boolean;\n  clearFiltersButtonText?: string;\n};\n\nResourceListDropdownWithDataToolbar.defaultProps = {\n  resourceType: \"Resources\",\n};\n"]}]}