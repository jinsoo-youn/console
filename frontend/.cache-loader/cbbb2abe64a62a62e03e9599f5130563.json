{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/reducers/k8s.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/reducers/k8s.ts","mtime":1616735742510},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport { Map as ImmutableMap, fromJS } from 'immutable';\nimport { ActionType } from '../actions/k8s';\nimport { getQN, referenceForModel, allModels } from '../module/k8s';\nimport { namespacedResources } from '../actions/ui';\nconst moreRecent = (a, b) => {\n    const metaA = a.get('metadata').toJSON();\n    const metaB = b.get('metadata').toJSON();\n    if (metaA.uid !== metaB.uid) {\n        return new Date(metaA.creationTimestamp) > new Date(metaB.creationTimestamp);\n    }\n    return parseInt(metaA.resourceVersion, 10) > parseInt(metaB.resourceVersion, 10);\n};\nconst removeFromList = (list, resource) => {\n    const qualifiedName = getQN(resource);\n    // eslint-disable-next-line no-console\n    console.log(`deleting ${qualifiedName}`);\n    return list.delete(qualifiedName);\n};\nconst updateList = (list, nextJS) => {\n    const qualifiedName = getQN(nextJS);\n    const current = list.get(qualifiedName);\n    const next = fromJS(nextJS);\n    if (!current) {\n        return list.set(qualifiedName, next);\n    }\n    if (!moreRecent(next, current)) {\n        return list;\n    }\n    // TODO: (kans) only store the data for things we display ...\n    //  and then only do this comparison for the same stuff!\n    if (current\n        .deleteIn(['metadata', 'resourceVersion'])\n        .equals(next.deleteIn(['metadata', 'resourceVersion']))) {\n        // If the only thing that differs is resource version, don't fire an update.\n        return list;\n    }\n    return list.set(qualifiedName, next);\n};\nconst loadList = (oldList, resources) => {\n    const existingKeys = new Set(oldList.keys());\n    return oldList.withMutations((list) => {\n        (resources || []).forEach((r) => {\n            const qualifiedName = getQN(r);\n            existingKeys.delete(qualifiedName);\n            const next = fromJS(r);\n            const current = list.get(qualifiedName);\n            if (!current || moreRecent(next, current)) {\n                list.set(qualifiedName, next);\n            }\n        });\n        existingKeys.forEach((k) => {\n            const r = list.get(k);\n            const metadata = r.get('metadata').toJSON();\n            if (!metadata.deletionTimestamp) {\n                // eslint-disable-next-line no-console\n                console.warn(`${metadata.namespace}-${metadata.name} is gone with no deletion timestamp!`);\n            }\n            list.delete(k);\n        });\n    });\n};\nexport default (state, action) => {\n    if (!state) {\n        return fromJS({ RESOURCES: { inFlight: false, models: ImmutableMap() } });\n    }\n    // const {k8sObjects, id} = action;\n    // const list: ImmutableMap<string, any> = state.getIn([id, 'data']);\n    let newList;\n    switch (action.type) {\n        case ActionType.GetResourcesInFlight:\n            return state.setIn(['RESOURCES', 'inFlight'], true);\n        case ActionType.SetAPIGroups:\n            return state.setIn(['RESOURCES', 'apiGroups'], action.payload.value);\n        case ActionType.ReceivedResources:\n            return (action.payload.resources.models\n                .filter((model) => !state.getIn(['RESOURCES', 'models']).has(referenceForModel(model)))\n                .filter((model) => {\n                const existingModel = state.getIn(['RESOURCES', 'models', model.kind]);\n                return !existingModel || referenceForModel(existingModel) !== referenceForModel(model);\n            })\n                .map((model) => {\n                model.namespaced\n                    ? namespacedResources.add(referenceForModel(model))\n                    : namespacedResources.delete(referenceForModel(model));\n                return model;\n            })\n                .reduce((prevState, newModel) => {\n                // FIXME: Need to use `kind` as model reference for legacy components accessing k8s primitives\n                const [modelRef, model] = allModels().findEntry((staticModel) => referenceForModel(staticModel) === referenceForModel(newModel)) || [referenceForModel(newModel), newModel];\n                // Verbs and short names are not part of the static model definitions, so use the values found during discovery.\n                return prevState.updateIn(['RESOURCES', 'models'], (models) => models.set(modelRef, Object.assign(Object.assign({}, model), { verbs: newModel.verbs, shortNames: newModel.shortNames })));\n            }, state)\n                // TODO: Determine where these are used and implement filtering in that component instead of storing in Redux\n                .setIn(['RESOURCES', 'allResources'], action.payload.resources.allResources)\n                .setIn(['RESOURCES', 'safeResources'], action.payload.resources.safeResources)\n                .setIn(['RESOURCES', 'adminResources'], action.payload.resources.adminResources)\n                .setIn(['RESOURCES', 'configResources'], action.payload.resources.configResources)\n                .setIn(['RESOURCES', 'namespacedSet'], action.payload.resources.namespacedSet)\n                .setIn(['RESOURCES', 'preferredVersions'], action.payload.resources.preferredVersions)\n                .setIn(['RESOURCES', 'inFlight'], false));\n        case ActionType.FilterList:\n            return state.setIn([action.payload.id, 'filters', action.payload.name], action.payload.value);\n        case ActionType.StartWatchK8sObject:\n            return state.set(action.payload.id, ImmutableMap({\n                loadError: '',\n                loaded: false,\n                data: {},\n            }));\n        case ActionType.ModifyObject: {\n            const { k8sObjects, id } = action.payload;\n            let currentJS = state.getIn([id, 'data'], {});\n            // getIn can return JS object or Immutable object\n            if (currentJS.toJSON) {\n                currentJS = currentJS.toJSON();\n                currentJS.metadata.resourceVersion = k8sObjects.metadata.resourceVersion;\n                if (_.isEqual(currentJS, k8sObjects)) {\n                    // If the only thing that differs is resource version, don't fire an update.\n                    return state;\n                }\n            }\n            return state.mergeIn([id], {\n                loadError: '',\n                loaded: true,\n                data: k8sObjects,\n            });\n        }\n        case ActionType.StartWatchK8sList:\n            if (state.getIn([action.payload.id, 'data'])) {\n                return state;\n            }\n            // We mergeDeep instead of overwriting state because it's possible to add filters before load/watching\n            return state.mergeDeep({\n                [action.payload.id]: {\n                    loadError: '',\n                    // has the data set been loaded successfully\n                    loaded: false,\n                    // Canonical data\n                    data: ImmutableMap(),\n                    // client side filters to be applied externally (ie, we keep all data intact)\n                    filters: ImmutableMap(),\n                    // The name of an element in the list that has been \"selected\"\n                    selected: null,\n                },\n            });\n        case ActionType.StopWatchK8s:\n            return state.delete(action.payload.id);\n        case ActionType.Loaded:\n            if (!state.getIn([action.payload.id, 'data'])) {\n                return state;\n            }\n            // eslint-disable-next-line no-console\n            console.info(`loaded ${action.payload.id}`);\n            state = state.mergeDeep({\n                [action.payload.id]: { loaded: true, loadError: '' },\n            });\n            newList = loadList(state.getIn([action.payload.id, 'data']), action.payload.k8sObjects);\n            break;\n        case ActionType.UpdateListFromWS:\n            newList = state.getIn([action.payload.id, 'data']);\n            // k8sObjects is an array of k8s WS Events\n            for (const { type, object } of action.payload.k8sObjects) {\n                switch (type) {\n                    case 'DELETED':\n                        newList = removeFromList(newList, object);\n                        continue;\n                    case 'ADDED':\n                    case 'MODIFIED':\n                        newList = updateList(newList, object);\n                        continue;\n                    default:\n                        // possible `ERROR` type or other\n                        // eslint-disable-next-line no-console\n                        console.warn(`unknown websocket action: ${type} (${_.get(event, 'object.message')})`);\n                        continue;\n                }\n            }\n            break;\n        case ActionType.BulkAddToList:\n            if (!state.getIn([action.payload.id, 'data'])) {\n                return state;\n            }\n            newList = state\n                .getIn([action.payload.id, 'data'])\n                .merge(action.payload.k8sObjects.reduce((map, obj) => map.set(getQN(obj), fromJS(obj)), ImmutableMap()));\n            break;\n        case ActionType.Errored:\n            if (!state.getIn([action.payload.id, 'data'])) {\n                return state;\n            }\n            /* Don't overwrite data or loaded state if there was an error. Better to\n             * keep stale data around than to suddenly have it disappear on a user.\n             */\n            return state.setIn([action.payload.id, 'loadError'], action.payload.k8sObjects);\n        default:\n            return state;\n    }\n    return state.setIn([action.payload.id, 'data'], newList);\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/reducers/k8s.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/reducers/k8s.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\nimport { Map as ImmutableMap, fromJS } from 'immutable';\n\nimport { ActionType, K8sAction } from '../actions/k8s';\nimport { getQN, referenceForModel, allModels, K8sResourceKind, K8sKind } from '../module/k8s';\nimport { namespacedResources } from '../actions/ui';\n\nconst moreRecent = (a, b) => {\n  const metaA = a.get('metadata').toJSON();\n  const metaB = b.get('metadata').toJSON();\n  if (metaA.uid !== metaB.uid) {\n    return new Date(metaA.creationTimestamp) > new Date(metaB.creationTimestamp);\n  }\n  return parseInt(metaA.resourceVersion, 10) > parseInt(metaB.resourceVersion, 10);\n};\n\nconst removeFromList = (list, resource) => {\n  const qualifiedName = getQN(resource);\n  // eslint-disable-next-line no-console\n  console.log(`deleting ${qualifiedName}`);\n  return list.delete(qualifiedName);\n};\n\nconst updateList = (list: ImmutableMap<string, any>, nextJS: K8sResourceKind) => {\n  const qualifiedName = getQN(nextJS);\n  const current = list.get(qualifiedName);\n  const next = fromJS(nextJS);\n\n  if (!current) {\n    return list.set(qualifiedName, next);\n  }\n\n  if (!moreRecent(next, current)) {\n    return list;\n  }\n\n  // TODO: (kans) only store the data for things we display ...\n  //  and then only do this comparison for the same stuff!\n  if (\n    current\n      .deleteIn(['metadata', 'resourceVersion'])\n      .equals(next.deleteIn(['metadata', 'resourceVersion']))\n  ) {\n    // If the only thing that differs is resource version, don't fire an update.\n    return list;\n  }\n\n  return list.set(qualifiedName, next);\n};\n\nconst loadList = (oldList, resources) => {\n  const existingKeys = new Set(oldList.keys());\n  return oldList.withMutations((list) => {\n    (resources || []).forEach((r) => {\n      const qualifiedName = getQN(r);\n      existingKeys.delete(qualifiedName);\n      const next = fromJS(r);\n      const current = list.get(qualifiedName);\n      if (!current || moreRecent(next, current)) {\n        list.set(qualifiedName, next);\n      }\n    });\n    existingKeys.forEach((k) => {\n      const r = list.get(k);\n      const metadata = r.get('metadata').toJSON();\n      if (!metadata.deletionTimestamp) {\n        // eslint-disable-next-line no-console\n        console.warn(`${metadata.namespace}-${metadata.name} is gone with no deletion timestamp!`);\n      }\n      list.delete(k);\n    });\n  });\n};\n\nexport type K8sState = ImmutableMap<string, any>;\n\nexport default (state: K8sState, action: K8sAction): K8sState => {\n  if (!state) {\n    return fromJS({ RESOURCES: { inFlight: false, models: ImmutableMap<string, K8sKind>() } });\n  }\n  // const {k8sObjects, id} = action;\n  // const list: ImmutableMap<string, any> = state.getIn([id, 'data']);\n\n  let newList;\n\n  switch (action.type) {\n    case ActionType.GetResourcesInFlight:\n      return state.setIn(['RESOURCES', 'inFlight'], true);\n    case ActionType.SetAPIGroups:\n      return state.setIn(['RESOURCES', 'apiGroups'], action.payload.value);\n    case ActionType.ReceivedResources:\n      return (\n        action.payload.resources.models\n          .filter((model) => !state.getIn(['RESOURCES', 'models']).has(referenceForModel(model)))\n          .filter((model) => {\n            const existingModel = state.getIn(['RESOURCES', 'models', model.kind]);\n            return !existingModel || referenceForModel(existingModel) !== referenceForModel(model);\n          })\n          .map((model) => {\n            model.namespaced\n              ? namespacedResources.add(referenceForModel(model))\n              : namespacedResources.delete(referenceForModel(model));\n            return model;\n          })\n          .reduce((prevState, newModel) => {\n            // FIXME: Need to use `kind` as model reference for legacy components accessing k8s primitives\n            const [modelRef, model] = allModels().findEntry(\n              (staticModel) => referenceForModel(staticModel) === referenceForModel(newModel),\n            ) || [referenceForModel(newModel), newModel];\n            // Verbs and short names are not part of the static model definitions, so use the values found during discovery.\n            return prevState.updateIn(['RESOURCES', 'models'], (models) =>\n              models.set(modelRef, {\n                ...model,\n                verbs: newModel.verbs,\n                shortNames: newModel.shortNames,\n              }),\n            );\n          }, state)\n          // TODO: Determine where these are used and implement filtering in that component instead of storing in Redux\n          .setIn(['RESOURCES', 'allResources'], action.payload.resources.allResources)\n          .setIn(['RESOURCES', 'safeResources'], action.payload.resources.safeResources)\n          .setIn(['RESOURCES', 'adminResources'], action.payload.resources.adminResources)\n          .setIn(['RESOURCES', 'configResources'], action.payload.resources.configResources)\n          .setIn(['RESOURCES', 'namespacedSet'], action.payload.resources.namespacedSet)\n          .setIn(['RESOURCES', 'preferredVersions'], action.payload.resources.preferredVersions)\n          .setIn(['RESOURCES', 'inFlight'], false)\n      );\n\n    case ActionType.FilterList:\n      return state.setIn([action.payload.id, 'filters', action.payload.name], action.payload.value);\n\n    case ActionType.StartWatchK8sObject:\n      return state.set(\n        action.payload.id,\n        ImmutableMap({\n          loadError: '',\n          loaded: false,\n          data: {},\n        }),\n      );\n\n    case ActionType.ModifyObject: {\n      const { k8sObjects, id } = action.payload;\n      let currentJS = state.getIn([id, 'data'], {});\n      // getIn can return JS object or Immutable object\n      if (currentJS.toJSON) {\n        currentJS = currentJS.toJSON();\n        currentJS.metadata.resourceVersion = k8sObjects.metadata.resourceVersion;\n        if (_.isEqual(currentJS, k8sObjects)) {\n          // If the only thing that differs is resource version, don't fire an update.\n          return state;\n        }\n      }\n      return state.mergeIn([id], {\n        loadError: '',\n        loaded: true,\n        data: k8sObjects,\n      });\n    }\n\n    case ActionType.StartWatchK8sList:\n      if (state.getIn([action.payload.id, 'data'])) {\n        return state;\n      }\n\n      // We mergeDeep instead of overwriting state because it's possible to add filters before load/watching\n      return state.mergeDeep({\n        [action.payload.id]: {\n          loadError: '',\n          // has the data set been loaded successfully\n          loaded: false,\n          // Canonical data\n          data: ImmutableMap(),\n          // client side filters to be applied externally (ie, we keep all data intact)\n          filters: ImmutableMap(),\n          // The name of an element in the list that has been \"selected\"\n          selected: null,\n        },\n      });\n\n    case ActionType.StopWatchK8s:\n      return state.delete(action.payload.id);\n\n    case ActionType.Loaded:\n      if (!state.getIn([action.payload.id, 'data'])) {\n        return state;\n      }\n      // eslint-disable-next-line no-console\n      console.info(`loaded ${action.payload.id}`);\n      state = state.mergeDeep({\n        [action.payload.id]: { loaded: true, loadError: '' },\n      });\n      newList = loadList(state.getIn([action.payload.id, 'data']), action.payload.k8sObjects);\n      break;\n\n    case ActionType.UpdateListFromWS:\n      newList = state.getIn([action.payload.id, 'data']);\n      // k8sObjects is an array of k8s WS Events\n      for (const { type, object } of action.payload.k8sObjects) {\n        switch (type) {\n          case 'DELETED':\n            newList = removeFromList(newList, object);\n            continue;\n          case 'ADDED':\n          case 'MODIFIED':\n            newList = updateList(newList, object);\n            continue;\n          default:\n            // possible `ERROR` type or other\n            // eslint-disable-next-line no-console\n            console.warn(`unknown websocket action: ${type} (${_.get(event, 'object.message')})`);\n            continue;\n        }\n      }\n      break;\n    case ActionType.BulkAddToList:\n      if (!state.getIn([action.payload.id, 'data'])) {\n        return state;\n      }\n      newList = state\n        .getIn([action.payload.id, 'data'])\n        .merge(\n          action.payload.k8sObjects.reduce(\n            (map, obj) => map.set(getQN(obj), fromJS(obj)),\n            ImmutableMap(),\n          ),\n        );\n      break;\n    case ActionType.Errored:\n      if (!state.getIn([action.payload.id, 'data'])) {\n        return state;\n      }\n      /* Don't overwrite data or loaded state if there was an error. Better to\n       * keep stale data around than to suddenly have it disappear on a user.\n       */\n      return state.setIn([action.payload.id, 'loadError'], action.payload.k8sObjects);\n    default:\n      return state;\n  }\n  return state.setIn([action.payload.id, 'data'], newList);\n};\n"]}]}