{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/service-instance.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/service-instance.tsx","mtime":1615298458740},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Link, withRouter } from 'react-router-dom';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport { Alert, Button } from '@patternfly/react-core';\nimport { k8sList, planExternalName, serviceCatalogStatus, referenceForModel, } from '../module/k8s';\nimport { DetailsPage, ListPage, Table, TableRow, TableData } from './factory';\nimport { ExternalLink } from './utils/link';\nimport { Kebab, ResourceKebab } from './utils/kebab';\nimport { ResourceIcon } from './utils/resource-icon';\nimport { ResourceLink } from './utils/resource-link';\nimport { ResourceSummary } from './utils/details-page';\nimport { SectionHeading } from './utils/headings';\nimport { StatusWithIcon } from './utils/service-catalog-status';\nimport { Timestamp } from './utils/timestamp';\nimport { history } from './utils/router';\nimport { navFactory } from './utils/horizontal-nav';\nimport { HintBlock } from './utils/hint-block';\nimport { ResourceEventStream } from './events';\nimport { Conditions } from './conditions';\nimport { ServiceCatalogParameters, ServiceCatalogParametersSecrets, } from './service-catalog-parameters';\nimport { ServiceBindingsPage } from './service-binding';\nimport { ServiceBindingModel, ServiceInstanceModel, ClusterServiceClassModel } from '../models';\nconst goToCreateBindingPage = (serviceInstance) => {\n    history.push(`/k8s/ns/${serviceInstance.metadata.namespace}/serviceinstances/${serviceInstance.metadata.name}/create-binding`);\n};\nconst createBinding = (kindObj, serviceInstance) => {\n    return {\n        callback: () => goToCreateBindingPage(serviceInstance),\n        label: 'Create Service Binding',\n        accessReview: {\n            group: ServiceBindingModel.apiGroup,\n            resource: ServiceBindingModel.plural,\n            namespace: serviceInstance.metadata.namespace,\n            verb: 'create',\n        },\n    };\n};\nconst { common } = Kebab.factory;\nconst menuActions = [\n    createBinding,\n    ...Kebab.getExtensionsActionsForKind(ServiceInstanceModel),\n    ...common,\n];\nexport const ServiceBindingDescription = ({ instanceName, className, }) => (React.createElement(\"p\", { className: className },\n    \"Service bindings create a secret containing the necessary information for a workload to use\",\n    ' ',\n    React.createElement(ResourceIcon, { kind: referenceForModel(ServiceInstanceModel) }),\n    instanceName,\n    \". Once the binding is ready, add the secret to your workload's environment variables or volumes.\"));\nclass ServiceInstanceMessage_ extends React.Component {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            hasBindings: false,\n            loaded: false,\n        };\n        this.createBinding = () => {\n            const { obj } = this.props;\n            goToCreateBindingPage(obj);\n        };\n    }\n    componentDidMount() {\n        const { obj } = this.props;\n        // Get the bindings for this service instance to know what messages to display.\n        k8sList(ServiceBindingModel, { ns: obj.metadata.namespace }).then((serviceBindings) => {\n            const hasBindings = _.some(serviceBindings, {\n                spec: { instanceRef: { name: obj.metadata.name } },\n            });\n            this.setState({ loaded: true, hasBindings });\n        });\n    }\n    render() {\n        const { obj, match: { url }, } = this.props;\n        const { deletionTimestamp } = obj.metadata;\n        const { loaded, hasBindings } = this.state;\n        if (!loaded) {\n            return null;\n        }\n        // Warn when the instance is deleted, but is still has bindings.\n        if (deletionTimestamp && hasBindings) {\n            const basePath = url.replace(/\\/$/, '');\n            return (React.createElement(Alert, { isInline: true, className: \"co-alert co-service-instance-delete-bindings-warning\", variant: \"warning\", title: \"Service instance still has bindings\" },\n                \"This service instance is marked for deletion, but still has bindings. You must delete the bindings before the instance will be deleted.\",\n                ' ',\n                React.createElement(Link, { to: `${basePath}/servicebindings` }, \"View service bindings\")));\n        }\n        // Show help for creating a binding when there are none for this instance.\n        // TODO: Check if the plan is actually bindable.\n        if (!deletionTimestamp && !hasBindings) {\n            return (React.createElement(\"div\", { className: \"co-m-pane__body\" },\n                React.createElement(HintBlock, { title: \"Create Service Binding\" },\n                    React.createElement(ServiceBindingDescription, { instanceName: obj.metadata.name }),\n                    React.createElement(Button, { variant: \"primary\", onClick: this.createBinding }, \"Create Service Binding\"))));\n        }\n        return null;\n    }\n}\nconst ServiceInstanceMessage = withRouter(ServiceInstanceMessage_);\nconst ServiceInstanceDetails = ({ obj: si }) => {\n    const plan = planExternalName(si);\n    const parameters = _.get(si, 'status.externalProperties.parameters', {});\n    const classDisplayName = si.spec.clusterServiceClassExternalName || si.spec.serviceClassExternalName;\n    const clusterServiceClassName = _.get(si, 'spec.clusterServiceClassRef.name');\n    const dashboardURL = _.get(si, 'status.dashboardURL');\n    return (React.createElement(React.Fragment, null,\n        React.createElement(ServiceInstanceMessage, { obj: si }),\n        React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(SectionHeading, { text: \"Service Instance Details\" }),\n            React.createElement(\"div\", { className: \"row\" },\n                React.createElement(\"div\", { className: \"col-sm-6\" },\n                    React.createElement(ResourceSummary, { resource: si })),\n                React.createElement(\"div\", { className: \"col-sm-6\" },\n                    React.createElement(\"dl\", { className: \"co-m-pane__details\" },\n                        React.createElement(\"dt\", null, \"Service Class\"),\n                        React.createElement(\"dd\", null, clusterServiceClassName ? (React.createElement(ResourceLink, { kind: referenceForModel(ClusterServiceClassModel), displayName: classDisplayName, title: classDisplayName, name: clusterServiceClassName })) : (classDisplayName)),\n                        React.createElement(\"dt\", null, \"Status\"),\n                        React.createElement(\"dd\", null,\n                            React.createElement(StatusWithIcon, { obj: si })),\n                        React.createElement(\"dt\", null, \"Plan\"),\n                        React.createElement(\"dd\", null, plan || '-'),\n                        dashboardURL && (React.createElement(React.Fragment, null,\n                            React.createElement(\"dt\", null, \"Dashboard\"),\n                            React.createElement(\"dd\", null,\n                                React.createElement(ExternalLink, { href: dashboardURL, text: \"View dashboard\" })))))))),\n        React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(SectionHeading, { text: \"Conditions\" }),\n            React.createElement(Conditions, { conditions: si.status.conditions })),\n        !_.isEmpty(si.spec.parametersFrom) && React.createElement(ServiceCatalogParametersSecrets, { obj: si }),\n        !_.isEmpty(parameters) && React.createElement(ServiceCatalogParameters, { parameters: parameters })));\n};\nconst ServiceBindingsDetails = ({ obj: si }) => {\n    const bindingFilters = {\n        selector: { field: 'spec.instanceRef.name', values: new Set(_.map(si, 'name')) },\n    };\n    return (React.createElement(ServiceBindingsPage, { canCreate: true, createHandler: () => goToCreateBindingPage(si), namespace: si.metadata.namespace, filters: bindingFilters, autoFocus: false, showTitle: false }));\n};\nconst pages = [\n    navFactory.details(ServiceInstanceDetails),\n    navFactory.editYaml(),\n    navFactory.events(ResourceEventStream),\n    navFactory.serviceBindings(ServiceBindingsDetails),\n];\nexport const ServiceInstanceDetailsPage = (props) => (React.createElement(DetailsPage, Object.assign({}, props, { kind: referenceForModel(ServiceInstanceModel), menuActions: menuActions, pages: pages })));\nServiceInstanceDetailsPage.displayName = 'ServiceInstanceDetailsPage';\nconst tableColumnClasses = [\n    '',\n    '',\n    classNames('pf-m-hidden', 'pf-m-visible-on-sm'),\n    classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n    classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n    classNames('pf-m-hidden', 'pf-m-visible-on-xl'),\n    Kebab.columnClass,\n];\nconst ServiceInstancesTableHeader = () => {\n    return [\n        {\n            title: 'Name',\n            sortField: 'metadata.name',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[0] },\n        },\n        {\n            title: 'Namespace',\n            sortField: 'metadata.namespace',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[1] },\n        },\n        {\n            title: 'Status',\n            sortFunc: 'serviceCatalogStatus',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[2] },\n        },\n        {\n            title: 'Service Class',\n            sortField: 'spec.clusterServiceClassExternalName',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[3] },\n        },\n        {\n            title: 'Plan',\n            sortFunc: 'planExternalName',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[4] },\n        },\n        {\n            title: 'Created',\n            sortField: 'metadata.creationTimestamp',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[5] },\n        },\n        {\n            title: '',\n            props: { className: tableColumnClasses[6] },\n        },\n    ];\n};\nServiceInstancesTableHeader.displayName = 'ServiceInstancesTableHeader';\nconst ServiceInstancesTableRow = ({ obj, index, key, style }) => {\n    const clusterServiceClassRefName = _.get(obj, 'spec.clusterServiceClassRef.name');\n    return (React.createElement(TableRow, { id: obj.metadata.uid, index: index, trKey: key, style: style },\n        React.createElement(TableData, { className: tableColumnClasses[0] },\n            React.createElement(ResourceLink, { kind: referenceForModel(ServiceInstanceModel), name: obj.metadata.name, namespace: obj.metadata.namespace, title: obj.metadata.name })),\n        React.createElement(TableData, { className: classNames(tableColumnClasses[1], 'co-break-word') },\n            React.createElement(ResourceLink, { kind: \"Namespace\", name: obj.metadata.namespace, title: obj.metadata.namespace })),\n        React.createElement(TableData, { className: tableColumnClasses[2] },\n            React.createElement(StatusWithIcon, { obj: obj })),\n        React.createElement(TableData, { className: classNames(tableColumnClasses[3], 'co-break-word') }, clusterServiceClassRefName ? (React.createElement(ResourceLink, { kind: referenceForModel(ClusterServiceClassModel), displayName: obj.spec.clusterServiceClassExternalName, title: obj.spec.clusterServiceClassExternalName, name: obj.spec.clusterServiceClassRef.name })) : (obj.spec.clusterServiceClassExternalName)),\n        React.createElement(TableData, { className: classNames(tableColumnClasses[4], 'co-break-word') }, planExternalName(obj) || '-'),\n        React.createElement(TableData, { className: classNames(tableColumnClasses[5], 'co-truncate') },\n            React.createElement(Timestamp, { timestamp: obj.metadata.creationTimestamp })),\n        React.createElement(TableData, { className: tableColumnClasses[6] },\n            React.createElement(ResourceKebab, { actions: menuActions, kind: referenceForModel(ServiceInstanceModel), resource: obj }))));\n};\nconst ServiceInstancesList = (props) => (React.createElement(Table, Object.assign({}, props, { \"aria-label\": \"Service Instances\", Header: ServiceInstancesTableHeader, Row: ServiceInstancesTableRow, virtualize: true })));\nServiceInstancesList.displayName = 'ServiceInstancesList';\nconst filters = [\n    {\n        filterGroupName: 'Status',\n        type: 'catalog-status',\n        reducer: serviceCatalogStatus,\n        items: [\n            { id: 'Ready', title: 'Ready' },\n            { id: 'Not Ready', title: 'Not Ready' },\n            { id: 'Failed', title: 'Failed' },\n        ],\n    },\n];\nexport const ServiceInstancesPage = (props) => (React.createElement(ListPage, Object.assign({}, props, { namespace: _.get(props.match, 'params.ns'), kind: referenceForModel(ServiceInstanceModel), ListComponent: ServiceInstancesList, rowFilters: filters, showTitle: false })));\nServiceInstancesPage.displayName = 'ServiceInstancesListPage';\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/service-instance.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/service-instance.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Link, withRouter, RouteComponentProps, match } from 'react-router-dom';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport { Alert, Button } from '@patternfly/react-core';\n\nimport {\n  k8sList,\n  K8sResourceKind,\n  planExternalName,\n  serviceCatalogStatus,\n  referenceForModel,\n} from '../module/k8s';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from './factory';\nimport { ExternalLink } from './utils/link';\nimport { Kebab, ResourceKebab } from './utils/kebab';\nimport { ResourceIcon } from './utils/resource-icon';\nimport { ResourceLink } from './utils/resource-link';\nimport { ResourceSummary } from './utils/details-page';\nimport { SectionHeading } from './utils/headings';\nimport { StatusWithIcon } from './utils/service-catalog-status';\nimport { Timestamp } from './utils/timestamp';\nimport { history } from './utils/router';\nimport { navFactory } from './utils/horizontal-nav';\nimport { HintBlock } from './utils/hint-block';\nimport { ResourceEventStream } from './events';\nimport { Conditions } from './conditions';\nimport {\n  ServiceCatalogParameters,\n  ServiceCatalogParametersSecrets,\n} from './service-catalog-parameters';\nimport { ServiceBindingsPage } from './service-binding';\nimport { ServiceBindingModel, ServiceInstanceModel, ClusterServiceClassModel } from '../models';\n\nconst goToCreateBindingPage = (serviceInstance: K8sResourceKind) => {\n  history.push(\n    `/k8s/ns/${serviceInstance.metadata.namespace}/serviceinstances/${serviceInstance.metadata.name}/create-binding`,\n  );\n};\n\nconst createBinding = (kindObj, serviceInstance) => {\n  return {\n    callback: () => goToCreateBindingPage(serviceInstance),\n    label: 'Create Service Binding',\n    accessReview: {\n      group: ServiceBindingModel.apiGroup,\n      resource: ServiceBindingModel.plural,\n      namespace: serviceInstance.metadata.namespace,\n      verb: 'create',\n    },\n  };\n};\n\nconst { common } = Kebab.factory;\n\nconst menuActions = [\n  createBinding,\n  ...Kebab.getExtensionsActionsForKind(ServiceInstanceModel),\n  ...common,\n];\n\nexport const ServiceBindingDescription: React.SFC<ServiceBindingDescriptionProps> = ({\n  instanceName,\n  className,\n}) => (\n  <p className={className}>\n    Service bindings create a secret containing the necessary information for a workload to use{' '}\n    <ResourceIcon kind={referenceForModel(ServiceInstanceModel)} />\n    {instanceName}. Once the binding is ready, add the secret to your workload&apos;s environment\n    variables or volumes.\n  </p>\n);\n\nclass ServiceInstanceMessage_ extends React.Component<\n  ServiceInstanceMessageProps & RouteComponentProps<{}>,\n  ServiceInstanceMessageState\n> {\n  state = {\n    hasBindings: false,\n    loaded: false,\n  };\n\n  componentDidMount() {\n    const { obj } = this.props;\n\n    // Get the bindings for this service instance to know what messages to display.\n    k8sList(ServiceBindingModel, { ns: obj.metadata.namespace }).then((serviceBindings) => {\n      const hasBindings = _.some(serviceBindings, {\n        spec: { instanceRef: { name: obj.metadata.name } },\n      });\n      this.setState({ loaded: true, hasBindings });\n    });\n  }\n\n  createBinding = () => {\n    const { obj } = this.props;\n    goToCreateBindingPage(obj);\n  };\n\n  render() {\n    const {\n      obj,\n      match: { url },\n    } = this.props;\n    const { deletionTimestamp } = obj.metadata;\n    const { loaded, hasBindings } = this.state;\n\n    if (!loaded) {\n      return null;\n    }\n\n    // Warn when the instance is deleted, but is still has bindings.\n    if (deletionTimestamp && hasBindings) {\n      const basePath = url.replace(/\\/$/, '');\n      return (\n        <Alert\n          isInline\n          className=\"co-alert co-service-instance-delete-bindings-warning\"\n          variant=\"warning\"\n          title=\"Service instance still has bindings\"\n        >\n          This service instance is marked for deletion, but still has bindings. You must delete the\n          bindings before the instance will be deleted.{' '}\n          <Link to={`${basePath}/servicebindings`}>View service bindings</Link>\n        </Alert>\n      );\n    }\n\n    // Show help for creating a binding when there are none for this instance.\n    // TODO: Check if the plan is actually bindable.\n    if (!deletionTimestamp && !hasBindings) {\n      return (\n        <div className=\"co-m-pane__body\">\n          <HintBlock title=\"Create Service Binding\">\n            <ServiceBindingDescription instanceName={obj.metadata.name} />\n            <Button variant=\"primary\" onClick={this.createBinding}>\n              Create Service Binding\n            </Button>\n          </HintBlock>\n        </div>\n      );\n    }\n\n    return null;\n  }\n}\nconst ServiceInstanceMessage = withRouter(ServiceInstanceMessage_);\n\nconst ServiceInstanceDetails: React.SFC<ServiceInstanceDetailsProps> = ({ obj: si }) => {\n  const plan = planExternalName(si);\n  const parameters = _.get(si, 'status.externalProperties.parameters', {});\n  const classDisplayName =\n    si.spec.clusterServiceClassExternalName || si.spec.serviceClassExternalName;\n  const clusterServiceClassName = _.get(si, 'spec.clusterServiceClassRef.name');\n  const dashboardURL = _.get(si, 'status.dashboardURL');\n\n  return (\n    <>\n      <ServiceInstanceMessage obj={si} />\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Service Instance Details\" />\n        <div className=\"row\">\n          <div className=\"col-sm-6\">\n            <ResourceSummary resource={si} />\n          </div>\n          <div className=\"col-sm-6\">\n            <dl className=\"co-m-pane__details\">\n              <dt>Service Class</dt>\n              <dd>\n                {clusterServiceClassName ? (\n                  <ResourceLink\n                    kind={referenceForModel(ClusterServiceClassModel)}\n                    displayName={classDisplayName}\n                    title={classDisplayName}\n                    name={clusterServiceClassName}\n                  />\n                ) : (\n                  classDisplayName\n                )}\n              </dd>\n              <dt>Status</dt>\n              <dd>\n                <StatusWithIcon obj={si} />\n              </dd>\n              <dt>Plan</dt>\n              <dd>{plan || '-'}</dd>\n              {dashboardURL && (\n                <>\n                  <dt>Dashboard</dt>\n                  <dd>\n                    <ExternalLink href={dashboardURL} text=\"View dashboard\" />\n                  </dd>\n                </>\n              )}\n            </dl>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Conditions\" />\n        <Conditions conditions={si.status.conditions} />\n      </div>\n      {!_.isEmpty(si.spec.parametersFrom) && <ServiceCatalogParametersSecrets obj={si} />}\n      {!_.isEmpty(parameters) && <ServiceCatalogParameters parameters={parameters} />}\n    </>\n  );\n};\n\nconst ServiceBindingsDetails: React.SFC<ServiceBindingsDetailsProps> = ({ obj: si }) => {\n  const bindingFilters = {\n    selector: { field: 'spec.instanceRef.name', values: new Set(_.map(si, 'name')) },\n  };\n\n  return (\n    <ServiceBindingsPage\n      canCreate={true}\n      createHandler={() => goToCreateBindingPage(si)}\n      namespace={si.metadata.namespace}\n      filters={bindingFilters}\n      autoFocus={false}\n      showTitle={false}\n    />\n  );\n};\n\nconst pages = [\n  navFactory.details(ServiceInstanceDetails),\n  navFactory.editYaml(),\n  navFactory.events(ResourceEventStream),\n  navFactory.serviceBindings(ServiceBindingsDetails),\n];\n\nexport const ServiceInstanceDetailsPage: React.SFC<ServiceInstanceDetailsPageProps> = (props) => (\n  <DetailsPage\n    {...props}\n    kind={referenceForModel(ServiceInstanceModel)}\n    menuActions={menuActions}\n    pages={pages}\n  />\n);\nServiceInstanceDetailsPage.displayName = 'ServiceInstanceDetailsPage';\n\nconst tableColumnClasses = [\n  '',\n  '',\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'),\n  Kebab.columnClass,\n];\n\nconst ServiceInstancesTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Status',\n      sortFunc: 'serviceCatalogStatus',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Service Class',\n      sortField: 'spec.clusterServiceClassExternalName',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: 'Plan',\n      sortFunc: 'planExternalName',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: 'Created',\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[5] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[6] },\n    },\n  ];\n};\nServiceInstancesTableHeader.displayName = 'ServiceInstancesTableHeader';\n\nconst ServiceInstancesTableRow: RowFunction<K8sResourceKind> = ({ obj, index, key, style }) => {\n  const clusterServiceClassRefName = _.get(obj, 'spec.clusterServiceClassRef.name');\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={referenceForModel(ServiceInstanceModel)}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n          title={obj.metadata.name}\n        />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink\n          kind=\"Namespace\"\n          name={obj.metadata.namespace}\n          title={obj.metadata.namespace}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <StatusWithIcon obj={obj} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[3], 'co-break-word')}>\n        {clusterServiceClassRefName ? (\n          <ResourceLink\n            kind={referenceForModel(ClusterServiceClassModel)}\n            displayName={obj.spec.clusterServiceClassExternalName}\n            title={obj.spec.clusterServiceClassExternalName}\n            name={obj.spec.clusterServiceClassRef.name}\n          />\n        ) : (\n          obj.spec.clusterServiceClassExternalName\n        )}\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[4], 'co-break-word')}>\n        {planExternalName(obj) || '-'}\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[5], 'co-truncate')}>\n        <Timestamp timestamp={obj.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[6]}>\n        <ResourceKebab\n          actions={menuActions}\n          kind={referenceForModel(ServiceInstanceModel)}\n          resource={obj}\n        />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst ServiceInstancesList: React.SFC = (props) => (\n  <Table\n    {...props}\n    aria-label=\"Service Instances\"\n    Header={ServiceInstancesTableHeader}\n    Row={ServiceInstancesTableRow}\n    virtualize\n  />\n);\nServiceInstancesList.displayName = 'ServiceInstancesList';\n\nconst filters = [\n  {\n    filterGroupName: 'Status',\n    type: 'catalog-status',\n    reducer: serviceCatalogStatus,\n    items: [\n      { id: 'Ready', title: 'Ready' },\n      { id: 'Not Ready', title: 'Not Ready' },\n      { id: 'Failed', title: 'Failed' },\n    ],\n  },\n];\n\nexport const ServiceInstancesPage: React.SFC<ServiceInstancesPageProps> = (props) => (\n  <ListPage\n    {...props}\n    namespace={_.get(props.match, 'params.ns')}\n    kind={referenceForModel(ServiceInstanceModel)}\n    ListComponent={ServiceInstancesList}\n    rowFilters={filters}\n    showTitle={false}\n  />\n);\nServiceInstancesPage.displayName = 'ServiceInstancesListPage';\n\nexport type ServiceInstanceStatusProps = {\n  obj: K8sResourceKind;\n};\n\nexport type ServiceInstanceDetailsProps = {\n  obj: K8sResourceKind;\n};\n\nexport type ServiceBindingDescriptionProps = {\n  instanceName: string;\n  className?: string;\n};\n\nexport type ServiceInstanceMessageProps = {\n  obj: K8sResourceKind;\n};\n\nexport type ServiceInstanceMessageState = {\n  hasBindings: boolean;\n  loaded: boolean;\n};\n\nexport type ServiceBindingsDetailsProps = {\n  obj: any;\n};\n\nexport type ServiceInstancesPageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  match?: match<{ ns?: string }>;\n  selector?: any;\n};\n\nexport type ServiceInstanceDetailsPageProps = {\n  match: any;\n};\n"]}]}