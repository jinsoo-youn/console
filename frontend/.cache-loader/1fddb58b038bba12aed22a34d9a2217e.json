{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/common/validation-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/common/validation-utils.ts","mtime":1616735742390},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as yup from 'yup';\nimport { PipelineResourceType, VolumeTypes } from '../../const';\nimport { CREATE_PIPELINE_RESOURCE } from './const';\nexport const validateResourceType = yup.object().shape({\n    type: yup.string().required('Required'),\n    params: yup\n        .object()\n        .when('type', {\n        is: PipelineResourceType.git,\n        then: yup.object({\n            url: yup.string().required('Required'),\n            revision: yup.string(),\n        }),\n    })\n        .when('type', {\n        is: PipelineResourceType.image,\n        then: yup.object({\n            url: yup.string().required('Required'),\n        }),\n    })\n        .when('type', {\n        is: PipelineResourceType.storage,\n        then: yup.object({\n            type: yup.string().required('Required'),\n            location: yup.string().required('Required'),\n            dir: yup.string(),\n        }),\n    })\n        .when('type', {\n        is: PipelineResourceType.cluster,\n        then: yup.object({\n            name: yup.string().required('Required'),\n            url: yup.string().required('Required'),\n            username: yup.string().required('Required'),\n            password: yup.string(),\n            insecure: yup.string(),\n        }),\n    }),\n    secrets: yup.object().when('type', {\n        is: PipelineResourceType.cluster,\n        then: yup.object({\n            cadata: yup.string().required('Required'),\n            token: yup.string(),\n        }),\n    }),\n});\nexport const formResources = yup.array().of(yup.object().shape({\n    name: yup.string().required('Required'),\n    selection: yup.string().required('Required'),\n    data: yup.object().when('selection', {\n        is: CREATE_PIPELINE_RESOURCE,\n        then: validateResourceType,\n    }),\n}));\nconst volumeTypeSchema = yup\n    .object()\n    .when('type', {\n    is: (type) => VolumeTypes[type] === VolumeTypes.Secret,\n    then: yup.object().shape({\n        secret: yup.object().shape({\n            secretName: yup.string().required('Required'),\n            items: yup.array().of(yup.object().shape({\n                key: yup.string(),\n                path: yup.string().when('key', {\n                    is: (key) => !!key,\n                    then: yup.string().required('Required'),\n                }),\n            })),\n        }),\n    }),\n})\n    .when('type', {\n    is: (type) => VolumeTypes[type] === VolumeTypes.ConfigMap,\n    then: yup.object().shape({\n        configMap: yup.object().shape({\n            name: yup.string().required('Required'),\n            items: yup.array().of(yup.object().shape({\n                key: yup.string(),\n                path: yup.string().when('key', {\n                    is: (key) => !!key,\n                    then: yup.string().required('Required'),\n                }),\n            })),\n        }),\n    }),\n})\n    .when('type', {\n    is: (type) => VolumeTypes[type] === VolumeTypes.PVC,\n    then: yup.object().shape({\n        persistentVolumeClaim: yup.object().shape({\n            claimName: yup.string().required('Required'),\n        }),\n    }),\n});\nconst commonPipelineSchema = yup.object().shape({\n    parameters: yup.array().of(yup.object().shape({\n        name: yup.string().required('Required'),\n        description: yup.string(),\n        default: yup.string().required('Required'),\n    })),\n    resources: formResources,\n});\nexport const startPipelineSchema = commonPipelineSchema.shape({\n    workspaces: yup.array().of(yup.object().shape({\n        type: yup.string().required('Required'),\n        data: volumeTypeSchema,\n    })),\n    secretOpen: yup.boolean().equals([false]),\n});\nexport const addTriggerSchema = commonPipelineSchema.shape({\n    triggerBinding: yup.object().shape({\n        name: yup.string().required('Required'),\n        resource: yup\n            .object()\n            .shape({\n            metadata: yup.object().shape({\n                name: yup.string().required('Required'),\n            }),\n        })\n            .required('Required'),\n    }),\n});\nexport const advancedSectionValidationSchema = yup.object().shape({\n    secretName: yup.string().required('Required'),\n    type: yup.string().required('Required'),\n    annotations: yup.object().shape({\n        key: yup.string().required('Required'),\n        value: yup.string().required('Required'),\n    }),\n});\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/common/validation-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/modals/common/validation-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as yup from 'yup';\nimport { PipelineResourceType, VolumeTypes } from '../../const';\nimport { CREATE_PIPELINE_RESOURCE } from './const';\n\nexport const validateResourceType = yup.object().shape({\n  type: yup.string().required('Required'),\n  params: yup\n    .object()\n    .when('type', {\n      is: PipelineResourceType.git,\n      then: yup.object({\n        url: yup.string().required('Required'),\n        revision: yup.string(),\n      }),\n    })\n    .when('type', {\n      is: PipelineResourceType.image,\n      then: yup.object({\n        url: yup.string().required('Required'),\n      }),\n    })\n    .when('type', {\n      is: PipelineResourceType.storage,\n      then: yup.object({\n        type: yup.string().required('Required'),\n        location: yup.string().required('Required'),\n        dir: yup.string(),\n      }),\n    })\n    .when('type', {\n      is: PipelineResourceType.cluster,\n      then: yup.object({\n        name: yup.string().required('Required'),\n        url: yup.string().required('Required'),\n        username: yup.string().required('Required'),\n        password: yup.string(),\n        insecure: yup.string(),\n      }),\n    }),\n  secrets: yup.object().when('type', {\n    is: PipelineResourceType.cluster,\n    then: yup.object({\n      cadata: yup.string().required('Required'),\n      token: yup.string(),\n    }),\n  }),\n});\n\nexport const formResources = yup.array().of(\n  yup.object().shape({\n    name: yup.string().required('Required'),\n    selection: yup.string().required('Required'),\n    data: yup.object().when('selection', {\n      is: CREATE_PIPELINE_RESOURCE,\n      then: validateResourceType,\n    }),\n  }),\n);\n\nconst volumeTypeSchema = yup\n  .object()\n  .when('type', {\n    is: (type) => VolumeTypes[type] === VolumeTypes.Secret,\n    then: yup.object().shape({\n      secret: yup.object().shape({\n        secretName: yup.string().required('Required'),\n        items: yup.array().of(\n          yup.object().shape({\n            key: yup.string(),\n            path: yup.string().when('key', {\n              is: (key) => !!key,\n              then: yup.string().required('Required'),\n            }),\n          }),\n        ),\n      }),\n    }),\n  })\n  .when('type', {\n    is: (type) => VolumeTypes[type] === VolumeTypes.ConfigMap,\n    then: yup.object().shape({\n      configMap: yup.object().shape({\n        name: yup.string().required('Required'),\n        items: yup.array().of(\n          yup.object().shape({\n            key: yup.string(),\n            path: yup.string().when('key', {\n              is: (key) => !!key,\n              then: yup.string().required('Required'),\n            }),\n          }),\n        ),\n      }),\n    }),\n  })\n  .when('type', {\n    is: (type) => VolumeTypes[type] === VolumeTypes.PVC,\n    then: yup.object().shape({\n      persistentVolumeClaim: yup.object().shape({\n        claimName: yup.string().required('Required'),\n      }),\n    }),\n  });\n\nconst commonPipelineSchema = yup.object().shape({\n  parameters: yup.array().of(\n    yup.object().shape({\n      name: yup.string().required('Required'),\n      description: yup.string(),\n      default: yup.string().required('Required'),\n    }),\n  ),\n  resources: formResources,\n});\n\nexport const startPipelineSchema = commonPipelineSchema.shape({\n  workspaces: yup.array().of(\n    yup.object().shape({\n      type: yup.string().required('Required'),\n      data: volumeTypeSchema,\n    }),\n  ),\n  secretOpen: yup.boolean().equals([false]),\n});\n\nexport const addTriggerSchema = commonPipelineSchema.shape({\n  triggerBinding: yup.object().shape({\n    name: yup.string().required('Required'),\n    resource: yup\n      .object()\n      .shape({\n        metadata: yup.object().shape({\n          name: yup.string().required('Required'),\n        }),\n      })\n      .required('Required'),\n  }),\n});\n\nexport const advancedSectionValidationSchema = yup.object().shape({\n  secretName: yup.string().required('Required'),\n  type: yup.string().required('Required'),\n  annotations: yup.object().shape({\n    key: yup.string().required('Required'),\n    value: yup.string().required('Required'),\n  }),\n});\n"]}]}