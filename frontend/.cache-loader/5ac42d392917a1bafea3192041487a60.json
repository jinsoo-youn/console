{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/route/SecureRoute.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/route/SecureRoute.tsx","mtime":1615298458620},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { useFormikContext } from 'formik';\nimport { FormHelperText } from '@patternfly/react-core';\nimport { DropdownField, DroppableFileInputField, CheckboxField } from '@console/shared';\nimport { TerminationTypes, PassthroughInsecureTrafficTypes, InsecureTrafficTypes, } from '../import-types';\nconst SecureRoute = () => {\n    const { values: { route: { secure, tls }, }, } = useFormikContext();\n    return (React.createElement(React.Fragment, null,\n        React.createElement(CheckboxField, { name: \"route.secure\", label: \"Secure Route\", formLabel: \"Security\", helpText: \"Routes can be secured using several TLS termination types for serving certificates.\" }),\n        secure && (React.createElement(React.Fragment, null,\n            React.createElement(DropdownField, { name: \"route.tls.termination\", label: \"TLS Termination\", items: TerminationTypes, title: \"Select termination type\", fullWidth: true }),\n            React.createElement(DropdownField, { name: \"route.tls.insecureEdgeTerminationPolicy\", label: \"Insecure Traffic\", items: tls.termination === 'passthrough'\n                    ? PassthroughInsecureTrafficTypes\n                    : InsecureTrafficTypes, title: \"Select insecure traffic type\", helpText: \"Policy for traffic on insecure schemes like HTTP.\", fullWidth: true }),\n            tls.termination && tls.termination !== 'passthrough' && (React.createElement(React.Fragment, null,\n                React.createElement(\"h3\", null, \"Certificates\"),\n                React.createElement(FormHelperText, { isHidden: false }, \"TLS certificates for edge and re-encrypt termination. If not specified, the router's default certificate is used.\"),\n                React.createElement(DroppableFileInputField, { name: \"route.tls.certificate\", label: \"Certificate\", helpText: \"The PEM format certificate. Upload file by dragging & dropping, selecting it, or pasting from the clipboard.\" }),\n                React.createElement(DroppableFileInputField, { name: \"route.tls.privateKey\", label: \"Private Key\", helpText: \"The PEM format key. Upload file by dragging & dropping, selecting it, or pasting from the clipboard.\" }),\n                React.createElement(DroppableFileInputField, { name: \"route.tls.caCertificate\", label: \"CA Certificate\", helpText: \"The PEM format CA certificate chain. Upload file by dragging & dropping, selecting it, or pasting from the clipboard.\" }),\n                tls.termination === 'reencrypt' && (React.createElement(DroppableFileInputField, { name: \"route.tls.destinationCaCertificate\", label: \"Destination CA Certificate\", helpText: \"The PEM format CA certificate chain to validate the endpoint certificate for re-encrypt termination. Upload file by dragging & dropping, selecting it, or pasting from the clipboard.\" }))))))));\n};\nexport default SecureRoute;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/route/SecureRoute.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/route/SecureRoute.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,gBAAgB,EAAgB,MAAM,QAAQ,CAAC;AACxD,OAAO,EAAE,cAAc,EAAE,MAAM,wBAAwB,CAAC;AACxD,OAAO,EAAE,aAAa,EAAE,uBAAuB,EAAE,aAAa,EAAE,MAAM,iBAAiB,CAAC;AACxF,OAAO,EACL,gBAAgB,EAChB,+BAA+B,EAC/B,oBAAoB,GACrB,MAAM,iBAAiB,CAAC;AAEzB,MAAM,WAAW,GAAa,GAAG,EAAE;IACjC,MAAM,EACJ,MAAM,EAAE,EACN,KAAK,EAAE,EAAE,MAAM,EAAE,GAAG,EAAE,GACvB,GACF,GAAG,gBAAgB,EAAgB,CAAC;IACrC,OAAO,CACL;QACE,oBAAC,aAAa,IACZ,IAAI,EAAC,cAAc,EACnB,KAAK,EAAC,cAAc,EACpB,SAAS,EAAC,UAAU,EACpB,QAAQ,EAAC,qFAAqF,GAC9F;QACD,MAAM,IAAI,CACT;YACE,oBAAC,aAAa,IACZ,IAAI,EAAC,uBAAuB,EAC5B,KAAK,EAAC,iBAAiB,EACvB,KAAK,EAAE,gBAAgB,EACvB,KAAK,EAAC,yBAAyB,EAC/B,SAAS,SACT;YACF,oBAAC,aAAa,IACZ,IAAI,EAAC,yCAAyC,EAC9C,KAAK,EAAC,kBAAkB,EACxB,KAAK,EACH,GAAG,CAAC,WAAW,KAAK,aAAa;oBAC/B,CAAC,CAAC,+BAA+B;oBACjC,CAAC,CAAC,oBAAoB,EAE1B,KAAK,EAAC,8BAA8B,EACpC,QAAQ,EAAC,mDAAmD,EAC5D,SAAS,SACT;YACD,GAAG,CAAC,WAAW,IAAI,GAAG,CAAC,WAAW,KAAK,aAAa,IAAI,CACvD;gBACE,+CAAqB;gBACrB,oBAAC,cAAc,IAAC,QAAQ,EAAE,KAAK,wHAGd;gBACjB,oBAAC,uBAAuB,IACtB,IAAI,EAAC,uBAAuB,EAC5B,KAAK,EAAC,aAAa,EACnB,QAAQ,EAAC,8GAAkH,GAC3H;gBACF,oBAAC,uBAAuB,IACtB,IAAI,EAAC,sBAAsB,EAC3B,KAAK,EAAC,aAAa,EACnB,QAAQ,EAAC,sGAA0G,GACnH;gBACF,oBAAC,uBAAuB,IACtB,IAAI,EAAC,yBAAyB,EAC9B,KAAK,EAAC,gBAAgB,EACtB,QAAQ,EAAC,uHAA2H,GACpI;gBACD,GAAG,CAAC,WAAW,KAAK,WAAW,IAAI,CAClC,oBAAC,uBAAuB,IACtB,IAAI,EAAC,oCAAoC,EACzC,KAAK,EAAC,4BAA4B,EAClC,QAAQ,EAAC,uLAA2L,GACpM,CACH,CACA,CACJ,CACA,CACJ,CACA,CACJ,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,WAAW,CAAC","sourcesContent":["import * as React from 'react';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { FormHelperText } from '@patternfly/react-core';\nimport { DropdownField, DroppableFileInputField, CheckboxField } from '@console/shared';\nimport {\n  TerminationTypes,\n  PassthroughInsecureTrafficTypes,\n  InsecureTrafficTypes,\n} from '../import-types';\n\nconst SecureRoute: React.FC = () => {\n  const {\n    values: {\n      route: { secure, tls },\n    },\n  } = useFormikContext<FormikValues>();\n  return (\n    <>\n      <CheckboxField\n        name=\"route.secure\"\n        label=\"Secure Route\"\n        formLabel=\"Security\"\n        helpText=\"Routes can be secured using several TLS termination types for serving certificates.\"\n      />\n      {secure && (\n        <>\n          <DropdownField\n            name=\"route.tls.termination\"\n            label=\"TLS Termination\"\n            items={TerminationTypes}\n            title=\"Select termination type\"\n            fullWidth\n          />\n          <DropdownField\n            name=\"route.tls.insecureEdgeTerminationPolicy\"\n            label=\"Insecure Traffic\"\n            items={\n              tls.termination === 'passthrough'\n                ? PassthroughInsecureTrafficTypes\n                : InsecureTrafficTypes\n            }\n            title=\"Select insecure traffic type\"\n            helpText=\"Policy for traffic on insecure schemes like HTTP.\"\n            fullWidth\n          />\n          {tls.termination && tls.termination !== 'passthrough' && (\n            <>\n              <h3>Certificates</h3>\n              <FormHelperText isHidden={false}>\n                TLS certificates for edge and re-encrypt termination. If not specified, the\n                router&apos;s default certificate is used.\n              </FormHelperText>\n              <DroppableFileInputField\n                name=\"route.tls.certificate\"\n                label=\"Certificate\"\n                helpText=\"The PEM format certificate. Upload file by dragging &amp; dropping, selecting it, or pasting from the clipboard.\"\n              />\n              <DroppableFileInputField\n                name=\"route.tls.privateKey\"\n                label=\"Private Key\"\n                helpText=\"The PEM format key. Upload file by dragging &amp; dropping, selecting it, or pasting from the clipboard.\"\n              />\n              <DroppableFileInputField\n                name=\"route.tls.caCertificate\"\n                label=\"CA Certificate\"\n                helpText=\"The PEM format CA certificate chain. Upload file by dragging &amp; dropping, selecting it, or pasting from the clipboard.\"\n              />\n              {tls.termination === 'reencrypt' && (\n                <DroppableFileInputField\n                  name=\"route.tls.destinationCaCertificate\"\n                  label=\"Destination CA Certificate\"\n                  helpText=\"The PEM format CA certificate chain to validate the endpoint certificate for re-encrypt termination. Upload file by dragging &amp; dropping, selecting it, or pasting from the clipboard.\"\n                />\n              )}\n            </>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default SecureRoute;\n"]}]}