{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/edges/AggregateEdge.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/edges/AggregateEdge.tsx","mtime":1615298458630},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { Layer, useHover, EdgeConnectorArrow, observer } from '@console/topology';\nimport './AggregateEdge.scss';\nconst ObservedAggregateEdge = ({ element }) => {\n    const [hover, hoverRef] = useHover();\n    const startPoint = element.getStartPoint();\n    const endPoint = element.getEndPoint();\n    const { bidirectional } = element.getData();\n    return (React.createElement(Layer, { id: hover ? 'top' : undefined },\n        React.createElement(\"g\", { ref: hoverRef, \"data-test-id\": \"edge-handler\", className: classNames('odc-base-edge odc-aggregate-edge', {\n                'is-hover': hover,\n            }) },\n            React.createElement(\"line\", { x1: startPoint.x, y1: startPoint.y, x2: endPoint.x, y2: endPoint.y, strokeWidth: 10, stroke: \"transparent\" }),\n            React.createElement(\"line\", { className: \"odc-base-edge__link\", x1: startPoint.x, y1: startPoint.y, x2: endPoint.x, y2: endPoint.y }),\n            !bidirectional &&\n                (!element.getSource().isCollapsed() || !element.getTarget().isCollapsed()) && (React.createElement(EdgeConnectorArrow, { edge: element })))));\n};\nconst AggregateEdge = observer(ObservedAggregateEdge);\nexport { AggregateEdge };\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/edges/AggregateEdge.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/components/edges/AggregateEdge.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,UAAU,MAAM,YAAY,CAAC;AACzC,OAAO,EAAQ,KAAK,EAAE,QAAQ,EAAE,kBAAkB,EAAE,QAAQ,EAAE,MAAM,mBAAmB,CAAC;AAExF,OAAO,sBAAsB,CAAC;AAM9B,MAAM,qBAAqB,GAAiC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE;IAC1E,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,QAAQ,EAAE,CAAC;IACrC,MAAM,UAAU,GAAG,OAAO,CAAC,aAAa,EAAE,CAAC;IAC3C,MAAM,QAAQ,GAAG,OAAO,CAAC,WAAW,EAAE,CAAC;IACvC,MAAM,EAAE,aAAa,EAAE,GAAG,OAAO,CAAC,OAAO,EAAE,CAAC;IAE5C,OAAO,CACL,oBAAC,KAAK,IAAC,EAAE,EAAE,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS;QAClC,2BACE,GAAG,EAAE,QAAQ,kBACA,cAAc,EAC3B,SAAS,EAAE,UAAU,CAAC,kCAAkC,EAAE;gBACxD,UAAU,EAAE,KAAK;aAClB,CAAC;YAEF,8BACE,EAAE,EAAE,UAAU,CAAC,CAAC,EAChB,EAAE,EAAE,UAAU,CAAC,CAAC,EAChB,EAAE,EAAE,QAAQ,CAAC,CAAC,EACd,EAAE,EAAE,QAAQ,CAAC,CAAC,EACd,WAAW,EAAE,EAAE,EACf,MAAM,EAAC,aAAa,GACpB;YACF,8BACE,SAAS,EAAC,qBAAqB,EAC/B,EAAE,EAAE,UAAU,CAAC,CAAC,EAChB,EAAE,EAAE,UAAU,CAAC,CAAC,EAChB,EAAE,EAAE,QAAQ,CAAC,CAAC,EACd,EAAE,EAAE,QAAQ,CAAC,CAAC,GACd;YACD,CAAC,aAAa;gBACb,CAAC,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,WAAW,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC,WAAW,EAAE,CAAC,IAAI,CAC5E,oBAAC,kBAAkB,IAAC,IAAI,EAAE,OAAO,GAAI,CACtC,CACD,CACE,CACT,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,aAAa,GAAG,QAAQ,CAAC,qBAAqB,CAAC,CAAC;AACtD,OAAO,EAAE,aAAa,EAAE,CAAC","sourcesContent":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { Edge, Layer, useHover, EdgeConnectorArrow, observer } from '@console/topology';\n\nimport './AggregateEdge.scss';\n\ntype AggregateEdgeProps = {\n  element: Edge;\n};\n\nconst ObservedAggregateEdge: React.FC<AggregateEdgeProps> = ({ element }) => {\n  const [hover, hoverRef] = useHover();\n  const startPoint = element.getStartPoint();\n  const endPoint = element.getEndPoint();\n  const { bidirectional } = element.getData();\n\n  return (\n    <Layer id={hover ? 'top' : undefined}>\n      <g\n        ref={hoverRef}\n        data-test-id=\"edge-handler\"\n        className={classNames('odc-base-edge odc-aggregate-edge', {\n          'is-hover': hover,\n        })}\n      >\n        <line\n          x1={startPoint.x}\n          y1={startPoint.y}\n          x2={endPoint.x}\n          y2={endPoint.y}\n          strokeWidth={10}\n          stroke=\"transparent\"\n        />\n        <line\n          className=\"odc-base-edge__link\"\n          x1={startPoint.x}\n          y1={startPoint.y}\n          x2={endPoint.x}\n          y2={endPoint.y}\n        />\n        {!bidirectional &&\n          (!element.getSource().isCollapsed() || !element.getTarget().isCollapsed()) && (\n            <EdgeConnectorArrow edge={element} />\n          )}\n      </g>\n    </Layer>\n  );\n};\n\nconst AggregateEdge = observer(ObservedAggregateEdge);\nexport { AggregateEdge };\n"]}]}