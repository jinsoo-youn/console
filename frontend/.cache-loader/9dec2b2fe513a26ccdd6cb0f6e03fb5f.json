{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-plugin-sdk/src/typings/pages.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-plugin-sdk/src/typings/pages.ts","mtime":1615298458600},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["export const isResourceListPage = (e) => {\n    return e.type === 'Page/Resource/List';\n};\nexport const isResourceDetailsPage = (e) => {\n    return e.type === 'Page/Resource/Details';\n};\nexport const isResourceTabPage = (e) => {\n    return e.type === 'Page/Resource/Tab';\n};\nexport const isRoutePage = (e) => {\n    return e.type === 'Page/Route';\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-plugin-sdk/src/typings/pages.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-plugin-sdk/src/typings/pages.ts"],"names":[],"mappings":"AAyFA,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,CAAY,EAAyB,EAAE;IACxE,OAAO,CAAC,CAAC,IAAI,KAAK,oBAAoB,CAAC;AACzC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,qBAAqB,GAAG,CAAC,CAAY,EAA4B,EAAE;IAC9E,OAAO,CAAC,CAAC,IAAI,KAAK,uBAAuB,CAAC;AAC5C,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,iBAAiB,GAAG,CAAC,CAAY,EAAwB,EAAE;IACtE,OAAO,CAAC,CAAC,IAAI,KAAK,mBAAmB,CAAC;AACxC,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAAG,CAAC,CAAY,EAAkB,EAAE;IAC1D,OAAO,CAAC,CAAC,IAAI,KAAK,YAAY,CAAC;AACjC,CAAC,CAAC","sourcesContent":["import { RouteComponentProps, RouteProps } from 'react-router-dom';\nimport {\n  K8sKind,\n  K8sResourceKindReference,\n  K8sResourceKind,\n  K8sResourceCommon,\n} from '@console/internal/module/k8s';\nimport { Extension, LazyLoader } from './base';\nimport { PageComponentProps } from '@console/internal/components/utils';\n\nnamespace ExtensionProperties {\n  export interface ResourcePage<T> {\n    /** Model associated with the resource page. */\n    model: K8sKind;\n    /** Loader for the corresponding React page component. */\n    loader: LazyLoader<T>;\n  }\n\n  /** To add an additonal page to public components(ex: PVs, PVCs) via plugins */\n  export type ResourceTabPage<R extends K8sResourceCommon> = ResourcePage<PageComponentProps<R>> & {\n    /** The href for the resource page */\n    href: string;\n    /** Name of the resource tab inside detailsPage  */\n    name: string;\n  };\n\n  export type ResourceListPage = ResourcePage<{\n    /** See https://reacttraining.com/react-router/web/api/match */\n    match: RouteComponentProps['match'];\n    /** The resource kind scope. */\n    kind: K8sResourceKindReference;\n    /** Whether the page should assign focus when loaded. */\n    autoFocus: boolean;\n    /** Whether the page should mock the UI empty state. */\n    mock: boolean;\n    /** The namespace scope. */\n    namespace: string;\n  }> & {\n    /** Some Resources require ReferenceFor instead of ReferenceForModel */\n    modelParser?: (obj: K8sResourceKind) => string;\n  };\n\n  export type ResourceDetailsPage = ResourcePage<{\n    /** See https://reacttraining.com/react-router/web/api/match */\n    match: RouteComponentProps['match'];\n    /** The resource kind scope. */\n    kind: K8sResourceKindReference;\n    /** The namespace scope. */\n    namespace: string;\n    /** The page name. */\n    name: string;\n  }> & {\n    /** Some Resources require ReferenceFor instead of ReferenceForModel */\n    modelParser?: (obj: K8sResourceKind) => string;\n  };\n\n  // Maps to react-router#https://reacttraining.com/react-router/web/api/Route\n  // See https://reacttraining.com/react-router/web/api/Route\n  export type RoutePage = Omit<RouteProps, 'location'> & {\n    /** Loader for the corresponding React page component. */\n    loader?: LazyLoader<RouteComponentProps>;\n    /** Any valid URL path or array of paths that path-to-regexp@^1.7.0 understands. */\n    path: string | string[];\n    /** Perspective id to which this page belongs to. */\n    perspective?: string;\n    /** Feature flags required for this extension to be effective. */\n    required?: string | string[];\n  };\n}\n\nexport interface ResourceListPage extends Extension<ExtensionProperties.ResourceListPage> {\n  type: 'Page/Resource/List';\n}\n\nexport interface ResourceDetailsPage extends Extension<ExtensionProperties.ResourceDetailsPage> {\n  type: 'Page/Resource/Details';\n}\n\nexport interface RoutePage extends Extension<ExtensionProperties.RoutePage> {\n  type: 'Page/Route';\n}\n\nexport interface ResourceTabPage<R extends K8sResourceCommon = K8sResourceCommon>\n  extends Extension<ExtensionProperties.ResourceTabPage<R>> {\n  type: 'Page/Resource/Tab';\n}\n\nexport type ResourcePage = ResourceListPage | ResourceDetailsPage;\n\nexport const isResourceListPage = (e: Extension): e is ResourceListPage => {\n  return e.type === 'Page/Resource/List';\n};\n\nexport const isResourceDetailsPage = (e: Extension): e is ResourceDetailsPage => {\n  return e.type === 'Page/Resource/Details';\n};\n\nexport const isResourceTabPage = (e: Extension): e is ResourceTabPage => {\n  return e.type === 'Page/Resource/Tab';\n};\n\nexport const isRoutePage = (e: Extension): e is RoutePage => {\n  return e.type === 'Page/Route';\n};\n"]}]}