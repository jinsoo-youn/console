{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/dashboard/dashboards-page/cluster-dashboard/status-card.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/dashboard/dashboards-page/cluster-dashboard/status-card.tsx","mtime":1615701814890},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { connect } from 'react-redux';\nimport { useExtensions, isDashboardsOverviewHealthSubsystem, isDashboardsOverviewHealthURLSubsystem, isDashboardsOverviewHealthPrometheusSubsystem, isDashboardsOverviewHealthResourceSubsystem, isDashboardsOverviewHealthOperator } from '@console/plugin-sdk';\nimport { ArrowCircleUpIcon } from '@patternfly/react-icons';\nimport { Gallery, GalleryItem, Button } from '@patternfly/react-core';\nimport { FLAGS, getInfrastructurePlatform } from '@console/shared';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardLink from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardLink';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport AlertsBody from '@console/shared/src/components/dashboard/status-card/AlertsBody';\nimport HealthBody from '@console/shared/src/components/dashboard/status-card/HealthBody';\nimport { withDashboardResources } from '../../with-dashboard-resources';\nimport AlertItem, { StatusItem } from '@console/shared/src/components/dashboard/status-card/AlertItem';\nimport { alertURL } from '../../../monitoring';\nimport { referenceForModel, hasAvailableUpdates } from '../../../../module/k8s';\nimport { ClusterVersionModel } from '../../../../models';\nimport { clusterUpdateModal } from '../../../modals/cluster-update-modal';\nimport { OperatorHealthItem, PrometheusHealthItem, URLHealthItem, ResourceHealthItem } from './health-item';\nimport { useK8sWatchResource } from '../../../utils/k8s-watch-hook';\nimport { useFlag } from '@console/shared/src/hooks/flag';\nimport { ClusterDashboardContext } from './context';\nimport { useTranslation } from 'react-i18next';\nconst filterSubsystems = (subsystems, k8sModels) => subsystems.filter(s => {\n    if (isDashboardsOverviewHealthURLSubsystem(s) || isDashboardsOverviewHealthPrometheusSubsystem(s)) {\n        const subsystem = s;\n        return subsystem.properties.additionalResource && !subsystem.properties.additionalResource.optional ? !!k8sModels.get(subsystem.properties.additionalResource.kind) : true;\n    }\n    return true;\n});\nconst cvResource = {\n    kind: referenceForModel(ClusterVersionModel),\n    namespaced: false,\n    name: 'version',\n    isList: false,\n};\nconst ClusterAlerts = withDashboardResources(({ watchAlerts, stopWatchAlerts, notificationAlerts }) => {\n    const hasCVResource = useFlag(FLAGS.CLUSTER_VERSION);\n    const [cv, cvLoaded] = useK8sWatchResource(hasCVResource ? cvResource : {});\n    React.useEffect(() => {\n        watchAlerts();\n        return stopWatchAlerts;\n    }, [watchAlerts, stopWatchAlerts]);\n    const { data: alerts, loaded: alertsLoaded, loadError: alertsResponseError } = notificationAlerts || {};\n    const UpdateIcon = React.useCallback(() => React.createElement(ArrowCircleUpIcon, { className: \"update-pending\" }), []);\n    const items = [];\n    if (hasCVResource && cvLoaded && hasAvailableUpdates(cv)) {\n        items.push(React.createElement(StatusItem, { Icon: UpdateIcon, message: \"A cluster version update is available\" },\n            React.createElement(Button, { variant: \"link\", onClick: () => clusterUpdateModal({ cv }), isInline: true }, \"View details\")));\n    }\n    if (alertsLoaded && !_.isEmpty(alerts)) {\n        items.push(...alerts.map(alert => React.createElement(AlertItem, { key: alertURL(alert, alert.rule.id), alert: alert })));\n    }\n    return React.createElement(AlertsBody, { error: !_.isEmpty(alertsResponseError) }, items);\n});\nconst mapStateToProps = (state) => ({\n    k8sModels: state.k8s.getIn(['RESOURCES', 'models']),\n});\nexport const StatusCard = connect(mapStateToProps)(({ k8sModels }) => {\n    const { t } = useTranslation();\n    const subsystemExtensions = useExtensions(isDashboardsOverviewHealthSubsystem);\n    const subsystems = React.useMemo(() => filterSubsystems(subsystemExtensions, k8sModels), [subsystemExtensions, k8sModels]);\n    const operatorSubsystemIndex = React.useMemo(() => subsystems.findIndex(isDashboardsOverviewHealthOperator), [subsystems]);\n    const { infrastructure, infrastructureLoaded } = React.useContext(ClusterDashboardContext);\n    const healthItems = [];\n    subsystems.forEach(subsystem => {\n        if (isDashboardsOverviewHealthURLSubsystem(subsystem)) {\n            healthItems.push({\n                title: subsystem.properties.title,\n                Component: React.createElement(URLHealthItem, { subsystem: subsystem.properties, models: k8sModels }),\n            });\n        }\n        else if (isDashboardsOverviewHealthPrometheusSubsystem(subsystem)) {\n            const { disallowedProviders } = subsystem.properties;\n            if ((disallowedProviders === null || disallowedProviders === void 0 ? void 0 : disallowedProviders.length) && (!infrastructureLoaded || disallowedProviders.includes(getInfrastructurePlatform(infrastructure)))) {\n                return;\n            }\n            healthItems.push({\n                title: subsystem.properties.title,\n                Component: React.createElement(PrometheusHealthItem, { subsystem: subsystem.properties, models: k8sModels }),\n            });\n        }\n        else if (isDashboardsOverviewHealthResourceSubsystem(subsystem)) {\n            healthItems.push({\n                title: subsystem.properties.title,\n                Component: React.createElement(ResourceHealthItem, { subsystem: subsystem.properties }),\n            });\n        }\n    });\n    if (operatorSubsystemIndex !== -1) {\n        const operatorSubsystems = subsystems.filter(isDashboardsOverviewHealthOperator);\n        healthItems.splice(operatorSubsystemIndex, 0, {\n            title: t('SINGLE:MSG_OVERVIEW_MAIN_CARDSTATUS_OPERATORS_1'),\n            Component: React.createElement(OperatorHealthItem, { operatorExtensions: operatorSubsystems }),\n        });\n    }\n    return (React.createElement(DashboardCard, { gradient: true, \"data-test-id\": \"status-card\" },\n        React.createElement(DashboardCardHeader, null,\n            React.createElement(DashboardCardTitle, null, t('SINGLE:MSG_OVERVIEW_MAIN_CARDSTATUS_TITLE_1')),\n            React.createElement(DashboardCardLink, { to: \"/monitoring/alerts\" }, \"View alerts\")),\n        React.createElement(DashboardCardBody, null,\n            React.createElement(HealthBody, null,\n                React.createElement(Gallery, { className: \"co-overview-status__health\", gutter: \"md\" }, healthItems.map(item => {\n                    return React.createElement(GalleryItem, { key: item.title }, item.Component);\n                }))),\n            React.createElement(ClusterAlerts, null))));\n});\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/dashboard/dashboards-page/cluster-dashboard/status-card.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/dashboard/dashboards-page/cluster-dashboard/status-card.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { connect } from 'react-redux';\nimport { Map as ImmutableMap } from 'immutable';\nimport { useExtensions, DashboardsOverviewHealthSubsystem, DashboardsOverviewHealthPrometheusSubsystem, isDashboardsOverviewHealthSubsystem, isDashboardsOverviewHealthURLSubsystem, DashboardsOverviewHealthURLSubsystem, isDashboardsOverviewHealthPrometheusSubsystem, isDashboardsOverviewHealthResourceSubsystem, isDashboardsOverviewHealthOperator } from '@console/plugin-sdk';\nimport { ArrowCircleUpIcon } from '@patternfly/react-icons';\nimport { Gallery, GalleryItem, Button } from '@patternfly/react-core';\nimport { FLAGS, getInfrastructurePlatform } from '@console/shared';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardLink from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardLink';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport AlertsBody from '@console/shared/src/components/dashboard/status-card/AlertsBody';\nimport HealthBody from '@console/shared/src/components/dashboard/status-card/HealthBody';\nimport { withDashboardResources } from '../../with-dashboard-resources';\nimport AlertItem, { StatusItem } from '@console/shared/src/components/dashboard/status-card/AlertItem';\nimport { alertURL } from '../../../monitoring';\nimport { ClusterVersionKind, referenceForModel, hasAvailableUpdates, K8sKind } from '../../../../module/k8s';\nimport { ClusterVersionModel } from '../../../../models';\nimport { clusterUpdateModal } from '../../../modals/cluster-update-modal';\nimport { RootState } from '../../../../redux';\nimport { OperatorHealthItem, PrometheusHealthItem, URLHealthItem, ResourceHealthItem } from './health-item';\nimport { WatchK8sResource, useK8sWatchResource } from '../../../utils/k8s-watch-hook';\nimport { useFlag } from '@console/shared/src/hooks/flag';\nimport { ClusterDashboardContext } from './context';\nimport { useTranslation } from 'react-i18next';\n\nconst filterSubsystems = (subsystems: DashboardsOverviewHealthSubsystem[], k8sModels: ImmutableMap<string, K8sKind>) =>\n  subsystems.filter(s => {\n    if (isDashboardsOverviewHealthURLSubsystem(s) || isDashboardsOverviewHealthPrometheusSubsystem(s)) {\n      const subsystem = s as DashboardsOverviewHealthPrometheusSubsystem | DashboardsOverviewHealthURLSubsystem;\n      return subsystem.properties.additionalResource && !subsystem.properties.additionalResource.optional ? !!k8sModels.get(subsystem.properties.additionalResource.kind) : true;\n    }\n    return true;\n  });\n\nconst cvResource: WatchK8sResource = {\n  kind: referenceForModel(ClusterVersionModel),\n  namespaced: false,\n  name: 'version',\n  isList: false,\n};\n\nconst ClusterAlerts = withDashboardResources(({ watchAlerts, stopWatchAlerts, notificationAlerts }) => {\n  const hasCVResource = useFlag(FLAGS.CLUSTER_VERSION);\n  const [cv, cvLoaded] = useK8sWatchResource<ClusterVersionKind>(hasCVResource ? cvResource : ({} as WatchK8sResource));\n  React.useEffect(() => {\n    watchAlerts();\n    return stopWatchAlerts;\n  }, [watchAlerts, stopWatchAlerts]);\n\n  const { data: alerts, loaded: alertsLoaded, loadError: alertsResponseError } = notificationAlerts || {};\n\n  const UpdateIcon = React.useCallback(() => <ArrowCircleUpIcon className=\"update-pending\" />, []);\n\n  const items: React.ReactNode[] = [];\n\n  if (hasCVResource && cvLoaded && hasAvailableUpdates(cv)) {\n    items.push(\n      <StatusItem Icon={UpdateIcon} message=\"A cluster version update is available\">\n        <Button variant=\"link\" onClick={() => clusterUpdateModal({ cv })} isInline>\n          View details\n        </Button>\n      </StatusItem>,\n    );\n  }\n\n  if (alertsLoaded && !_.isEmpty(alerts)) {\n    items.push(...alerts.map(alert => <AlertItem key={alertURL(alert, alert.rule.id)} alert={alert} />));\n  }\n\n  return <AlertsBody error={!_.isEmpty(alertsResponseError)}>{items}</AlertsBody>;\n});\n\nconst mapStateToProps = (state: RootState) => ({\n  k8sModels: state.k8s.getIn(['RESOURCES', 'models']),\n});\n\nexport const StatusCard = connect<StatusCardProps>(mapStateToProps)(({ k8sModels }) => {\n  const { t } = useTranslation();\n  const subsystemExtensions = useExtensions<DashboardsOverviewHealthSubsystem>(isDashboardsOverviewHealthSubsystem);\n\n  const subsystems = React.useMemo(() => filterSubsystems(subsystemExtensions, k8sModels), [subsystemExtensions, k8sModels]);\n\n  const operatorSubsystemIndex = React.useMemo(() => subsystems.findIndex(isDashboardsOverviewHealthOperator), [subsystems]);\n  const { infrastructure, infrastructureLoaded } = React.useContext(ClusterDashboardContext);\n\n  const healthItems: { title: string; Component: React.ReactNode }[] = [];\n  subsystems.forEach(subsystem => {\n    if (isDashboardsOverviewHealthURLSubsystem(subsystem)) {\n      healthItems.push({\n        title: subsystem.properties.title,\n        Component: <URLHealthItem subsystem={subsystem.properties} models={k8sModels} />,\n      });\n    } else if (isDashboardsOverviewHealthPrometheusSubsystem(subsystem)) {\n      const { disallowedProviders } = subsystem.properties;\n      if (disallowedProviders?.length && (!infrastructureLoaded || disallowedProviders.includes(getInfrastructurePlatform(infrastructure)))) {\n        return;\n      }\n      healthItems.push({\n        title: subsystem.properties.title,\n        Component: <PrometheusHealthItem subsystem={subsystem.properties} models={k8sModels} />,\n      });\n    } else if (isDashboardsOverviewHealthResourceSubsystem(subsystem)) {\n      healthItems.push({\n        title: subsystem.properties.title,\n        Component: <ResourceHealthItem subsystem={subsystem.properties} />,\n      });\n    }\n  });\n  if (operatorSubsystemIndex !== -1) {\n    const operatorSubsystems = subsystems.filter(isDashboardsOverviewHealthOperator);\n    healthItems.splice(operatorSubsystemIndex, 0, {\n      title: t('SINGLE:MSG_OVERVIEW_MAIN_CARDSTATUS_OPERATORS_1'),\n      Component: <OperatorHealthItem operatorExtensions={operatorSubsystems} />,\n    });\n  }\n\n  return (\n    <DashboardCard gradient data-test-id=\"status-card\">\n      <DashboardCardHeader>\n        <DashboardCardTitle>{t('SINGLE:MSG_OVERVIEW_MAIN_CARDSTATUS_TITLE_1')}</DashboardCardTitle>\n        <DashboardCardLink to=\"/monitoring/alerts\">View alerts</DashboardCardLink>\n      </DashboardCardHeader>\n      <DashboardCardBody>\n        <HealthBody>\n          <Gallery className=\"co-overview-status__health\" gutter=\"md\">\n            {healthItems.map(item => {\n              return <GalleryItem key={item.title}>{item.Component}</GalleryItem>;\n            })}\n          </Gallery>\n        </HealthBody>\n        <ClusterAlerts />\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n});\n\ntype StatusCardProps = {\n  k8sModels: ImmutableMap<string, K8sKind>;\n};\n"]}]}