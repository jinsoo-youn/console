{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/validations/vm/disk.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/validations/vm/disk.ts","mtime":1616735742430},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { addMissingSubject, asValidationObject, makeSentence, validateDNS1123SubdomainValue, ValidationErrorType, } from '@console/shared';\nimport { validateTrim, validateURL } from '../common';\nimport { POSITIVE_SIZE_ERROR } from '../strings';\nimport { StorageUISource } from '../../../components/modals/disk-modal/storage-ui-source';\nimport { CombinedDisk } from '../../../k8s/wrapper/vm/combined-disk';\nimport { DiskType } from '../../../constants/vm/storage/disk-type';\nimport { TemplateValidations } from '../template/template-validations';\nconst validateDiskName = (name, usedDiskNames) => {\n    let validation = validateDNS1123SubdomainValue(name);\n    if (validation) {\n        validation.message = addMissingSubject(validation.message, 'Name');\n    }\n    if (!validation && usedDiskNames && usedDiskNames.has(name)) {\n        validation = asValidationObject('Disk with this name already exists!');\n    }\n    return validation;\n};\nconst validatePVCName = (pvcName, usedPVCNames) => {\n    if (usedPVCNames && usedPVCNames.has(pvcName)) {\n        asValidationObject('PVC with this name is already used by this VM!');\n    }\n    return null;\n};\nconst getEmptyDiskSizeValidation = () => asValidationObject(makeSentence(addMissingSubject(POSITIVE_SIZE_ERROR, 'Size')), ValidationErrorType.TrivialError);\nexport const validateDisk = (disk, volume, dataVolume, persistentVolumeClaimWrapper, { usedDiskNames, usedPVCNames, templateValidations, }) => {\n    const validations = {\n        name: validateDiskName(disk && disk.getName(), usedDiskNames),\n        size: null,\n        url: null,\n        container: null,\n        diskInterface: null,\n        pvc: null,\n    };\n    let hasAllRequiredFilled = disk && disk.getName() && volume && volume.getName();\n    const addRequired = (addon) => {\n        if (hasAllRequiredFilled) {\n            hasAllRequiredFilled = hasAllRequiredFilled && addon;\n        }\n    };\n    const source = StorageUISource.fromTypes(volume && volume.getType(), dataVolume && dataVolume.getType(), !!persistentVolumeClaimWrapper);\n    const tValidations = templateValidations || new TemplateValidations();\n    const diskType = disk.getType();\n    if (source.requiresVolumeType()) {\n        addRequired(volume && volume.hasType());\n    }\n    if (source.requiresURL()) {\n        const url = dataVolume && dataVolume.getURL();\n        addRequired(url);\n        validations.url = validateURL(url, { subject: 'URL' });\n    }\n    if (source.requiresContainerImage()) {\n        const container = volume.getContainerImage();\n        addRequired(container);\n        validations.container = validateTrim(container, { subject: 'Container' });\n    }\n    if (source.requiresDatavolume()) {\n        addRequired(dataVolume);\n    }\n    if (source.requiresNewPVC()) {\n        addRequired(persistentVolumeClaimWrapper);\n    }\n    if (source.requiresSize()) {\n        let missingSize;\n        if (source.requiresDatavolume()) {\n            missingSize = !dataVolume || !dataVolume.hasSize();\n        }\n        if (source.requiresNewPVC()) {\n            missingSize =\n                missingSize || !persistentVolumeClaimWrapper || !persistentVolumeClaimWrapper.hasSize();\n        }\n        if (missingSize) {\n            addRequired(null);\n            validations.size = getEmptyDiskSizeValidation();\n        }\n    }\n    if (source.requiresPVC()) {\n        const pvcName = new CombinedDisk({\n            diskWrapper: disk,\n            volumeWrapper: volume,\n            dataVolumeWrapper: dataVolume,\n            persistentVolumeClaimWrapper,\n            isNewPVC: !!persistentVolumeClaimWrapper,\n        }).getPVCNameBySource(source);\n        addRequired(pvcName);\n        validations.pvc = validatePVCName(pvcName, usedPVCNames);\n    }\n    if (diskType !== DiskType.FLOPPY) {\n        addRequired(disk.getDiskBus());\n        validations.diskInterface = tValidations\n            .validateBus(disk.getType(), disk.getDiskBus())\n            .asValidationObject();\n    }\n    return {\n        validations,\n        hasAllRequiredFilled: !!hasAllRequiredFilled,\n        isValid: !!hasAllRequiredFilled &&\n            !Object.keys(validations).find((key) => validations[key] &&\n                (validations[key].type === ValidationErrorType.Error ||\n                    validations[key].type === ValidationErrorType.TrivialError)),\n    };\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/validations/vm/disk.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/validations/vm/disk.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  addMissingSubject,\n  asValidationObject,\n  makeSentence,\n  validateDNS1123SubdomainValue,\n  ValidationErrorType,\n  ValidationObject,\n} from '@console/shared';\nimport { validateTrim, validateURL } from '../common';\nimport { DiskWrapper } from '../../../k8s/wrapper/vm/disk-wrapper';\nimport { VolumeWrapper } from '../../../k8s/wrapper/vm/volume-wrapper';\nimport { DataVolumeWrapper } from '../../../k8s/wrapper/vm/data-volume-wrapper';\nimport { POSITIVE_SIZE_ERROR } from '../strings';\nimport { StorageUISource } from '../../../components/modals/disk-modal/storage-ui-source';\nimport { CombinedDisk } from '../../../k8s/wrapper/vm/combined-disk';\nimport { PersistentVolumeClaimWrapper } from '../../../k8s/wrapper/vm/persistent-volume-claim-wrapper';\nimport { DiskType } from '../../../constants/vm/storage/disk-type';\nimport { TemplateValidations } from '../template/template-validations';\nimport { UIStorageValidation } from '../../../types/ui/storage';\n\nconst validateDiskName = (name: string, usedDiskNames: Set<string>): ValidationObject => {\n  let validation = validateDNS1123SubdomainValue(name);\n\n  if (validation) {\n    validation.message = addMissingSubject(validation.message, 'Name');\n  }\n\n  if (!validation && usedDiskNames && usedDiskNames.has(name)) {\n    validation = asValidationObject('Disk with this name already exists!');\n  }\n\n  return validation;\n};\n\nconst validatePVCName = (pvcName: string, usedPVCNames: Set<string>): ValidationObject => {\n  if (usedPVCNames && usedPVCNames.has(pvcName)) {\n    asValidationObject('PVC with this name is already used by this VM!');\n  }\n\n  return null;\n};\n\nconst getEmptyDiskSizeValidation = (): ValidationObject =>\n  asValidationObject(\n    makeSentence(addMissingSubject(POSITIVE_SIZE_ERROR, 'Size')),\n    ValidationErrorType.TrivialError,\n  );\n\nexport const validateDisk = (\n  disk: DiskWrapper,\n  volume: VolumeWrapper,\n  dataVolume: DataVolumeWrapper,\n  persistentVolumeClaimWrapper: PersistentVolumeClaimWrapper,\n  {\n    usedDiskNames,\n    usedPVCNames,\n    templateValidations,\n  }: {\n    usedDiskNames?: Set<string>;\n    usedPVCNames?: Set<string>;\n    templateValidations: TemplateValidations;\n  },\n): UIStorageValidation => {\n  const validations = {\n    name: validateDiskName(disk && disk.getName(), usedDiskNames),\n    size: null,\n    url: null,\n    container: null,\n    diskInterface: null,\n    pvc: null,\n  };\n  let hasAllRequiredFilled = disk && disk.getName() && volume && volume.getName();\n\n  const addRequired = (addon) => {\n    if (hasAllRequiredFilled) {\n      hasAllRequiredFilled = hasAllRequiredFilled && addon;\n    }\n  };\n\n  const source = StorageUISource.fromTypes(\n    volume && volume.getType(),\n    dataVolume && dataVolume.getType(),\n    !!persistentVolumeClaimWrapper,\n  );\n\n  const tValidations = templateValidations || new TemplateValidations();\n  const diskType = disk.getType();\n\n  if (source.requiresVolumeType()) {\n    addRequired(volume && volume.hasType());\n  }\n\n  if (source.requiresURL()) {\n    const url = dataVolume && dataVolume.getURL();\n    addRequired(url);\n    validations.url = validateURL(url, { subject: 'URL' });\n  }\n\n  if (source.requiresContainerImage()) {\n    const container = volume.getContainerImage();\n    addRequired(container);\n    validations.container = validateTrim(container, { subject: 'Container' });\n  }\n\n  if (source.requiresDatavolume()) {\n    addRequired(dataVolume);\n  }\n\n  if (source.requiresNewPVC()) {\n    addRequired(persistentVolumeClaimWrapper);\n  }\n\n  if (source.requiresSize()) {\n    let missingSize;\n    if (source.requiresDatavolume()) {\n      missingSize = !dataVolume || !dataVolume.hasSize();\n    }\n    if (source.requiresNewPVC()) {\n      missingSize =\n        missingSize || !persistentVolumeClaimWrapper || !persistentVolumeClaimWrapper.hasSize();\n    }\n\n    if (missingSize) {\n      addRequired(null);\n      validations.size = getEmptyDiskSizeValidation();\n    }\n  }\n\n  if (source.requiresPVC()) {\n    const pvcName = new CombinedDisk({\n      diskWrapper: disk,\n      volumeWrapper: volume,\n      dataVolumeWrapper: dataVolume,\n      persistentVolumeClaimWrapper,\n      isNewPVC: !!persistentVolumeClaimWrapper,\n    }).getPVCNameBySource(source);\n    addRequired(pvcName);\n    validations.pvc = validatePVCName(pvcName, usedPVCNames);\n  }\n\n  if (diskType !== DiskType.FLOPPY) {\n    addRequired(disk.getDiskBus());\n    validations.diskInterface = tValidations\n      .validateBus(disk.getType(), disk.getDiskBus())\n      .asValidationObject();\n  }\n\n  return {\n    validations,\n    hasAllRequiredFilled: !!hasAllRequiredFilled,\n    isValid:\n      !!hasAllRequiredFilled &&\n      !Object.keys(validations).find(\n        (key) =>\n          validations[key] &&\n          (validations[key].type === ValidationErrorType.Error ||\n            validations[key].type === ValidationErrorType.TrivialError),\n      ),\n  };\n};\n"]}]}