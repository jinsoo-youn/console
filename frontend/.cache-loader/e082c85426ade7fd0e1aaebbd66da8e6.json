{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/cluster-settings/htpasswd-idp-form.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/cluster-settings/htpasswd-idp-form.tsx","mtime":1615298458720},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { SecretModel } from '../../models';\nimport { k8sCreate } from '../../module/k8s';\nimport { AsyncComponent, ButtonBar, PromiseComponent, history } from '../utils';\nimport { addIDP, getOAuthResource, redirectToOAuthPage, mockNames } from './';\nimport { IDPNameInput } from './idp-name-input';\nexport const DroppableFileInput = (props) => (React.createElement(AsyncComponent, Object.assign({ loader: () => import('../utils/file-input').then((c) => c.DroppableFileInput) }, props)));\nexport class AddHTPasswdPage extends PromiseComponent {\n    constructor() {\n        super(...arguments);\n        this.state = {\n            name: 'htpasswd',\n            htpasswdFileContent: '',\n            inProgress: false,\n            errorMessage: '',\n        };\n        this.submit = (e) => {\n            e.preventDefault();\n            if (!this.state.htpasswdFileContent) {\n                this.setState({ errorMessage: 'You must specify an HTPasswd file.' });\n                return;\n            }\n            // Clear any previous errors.\n            this.setState({ errorMessage: '' });\n            this.getOAuthResource().then((oauth) => {\n                this.addHTPasswdIDP(oauth, mockNames.secret, true)\n                    .then(() => {\n                    return this.createHTPasswdSecret()\n                        .then((secret) => this.addHTPasswdIDP(oauth, secret.metadata.name))\n                        .then(redirectToOAuthPage);\n                })\n                    .catch((err) => {\n                    this.setState({ errorMessage: err });\n                });\n            });\n        };\n        this.nameChanged = (e) => {\n            this.setState({ name: e.currentTarget.value });\n        };\n        this.htpasswdFileChanged = (htpasswdFileContent) => {\n            this.setState({ htpasswdFileContent });\n        };\n    }\n    getOAuthResource() {\n        return this.handlePromise(getOAuthResource());\n    }\n    createHTPasswdSecret() {\n        const secret = {\n            apiVersion: 'v1',\n            kind: 'Secret',\n            metadata: {\n                generateName: 'htpasswd-',\n                namespace: 'openshift-config',\n            },\n            stringData: {\n                htpasswd: this.state.htpasswdFileContent,\n            },\n        };\n        return this.handlePromise(k8sCreate(SecretModel, secret));\n    }\n    addHTPasswdIDP(oauth, secretName, dryRun) {\n        const { name } = this.state;\n        const idp = {\n            name,\n            type: 'HTPasswd',\n            mappingMethod: 'claim',\n            htpasswd: {\n                fileData: {\n                    name: secretName,\n                },\n            },\n        };\n        return this.handlePromise(addIDP(oauth, idp, dryRun));\n    }\n    render() {\n        const { name, htpasswdFileContent } = this.state;\n        const title = 'Add Identity Provider: HTPasswd';\n        return (React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(Helmet, null,\n                React.createElement(\"title\", null, title)),\n            React.createElement(\"form\", { onSubmit: this.submit, name: \"form\", className: \"co-m-pane__body-group co-m-pane__form\" },\n                React.createElement(\"h1\", { className: \"co-m-pane__heading\" }, title),\n                React.createElement(\"p\", { className: \"co-m-pane__explanation\" }, \"HTPasswd validates usernames and passwords against a flat file generated using the htpasswd command.\"),\n                React.createElement(IDPNameInput, { value: name, onChange: this.nameChanged }),\n                React.createElement(\"div\", { className: \"form-group\" },\n                    React.createElement(DroppableFileInput, { onChange: this.htpasswdFileChanged, inputFileData: htpasswdFileContent, id: \"htpasswd-file\", label: \"HTPasswd File\", inputFieldHelpText: \"Upload an HTPasswd file created using the htpasswd command.\", isRequired: true, hideContents: true })),\n                React.createElement(ButtonBar, { errorMessage: this.state.errorMessage, inProgress: this.state.inProgress },\n                    React.createElement(ActionGroup, { className: \"pf-c-form\" },\n                        React.createElement(Button, { type: \"submit\", variant: \"primary\" }, \"Add\"),\n                        React.createElement(Button, { type: \"button\", variant: \"secondary\", onClick: history.goBack }, \"Cancel\"))))));\n    }\n}\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/cluster-settings/htpasswd-idp-form.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/cluster-settings/htpasswd-idp-form.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { ActionGroup, Button } from '@patternfly/react-core';\n\nimport { SecretModel } from '../../models';\nimport { IdentityProvider, k8sCreate, K8sResourceKind, OAuthKind } from '../../module/k8s';\nimport { AsyncComponent, ButtonBar, PromiseComponent, history } from '../utils';\nimport { addIDP, getOAuthResource, redirectToOAuthPage, mockNames } from './';\nimport { IDPNameInput } from './idp-name-input';\n\nexport const DroppableFileInput = (props: any) => (\n  <AsyncComponent\n    loader={() => import('../utils/file-input').then((c) => c.DroppableFileInput)}\n    {...props}\n  />\n);\n\nexport class AddHTPasswdPage extends PromiseComponent<{}, AddHTPasswdPageState> {\n  readonly state: AddHTPasswdPageState = {\n    name: 'htpasswd',\n    htpasswdFileContent: '',\n    inProgress: false,\n    errorMessage: '',\n  };\n\n  getOAuthResource(): Promise<OAuthKind> {\n    return this.handlePromise(getOAuthResource());\n  }\n\n  createHTPasswdSecret(): Promise<K8sResourceKind> {\n    const secret = {\n      apiVersion: 'v1',\n      kind: 'Secret',\n      metadata: {\n        generateName: 'htpasswd-',\n        namespace: 'openshift-config',\n      },\n      stringData: {\n        htpasswd: this.state.htpasswdFileContent,\n      },\n    };\n\n    return this.handlePromise(k8sCreate(SecretModel, secret));\n  }\n\n  addHTPasswdIDP(oauth: OAuthKind, secretName: string, dryRun?: boolean): Promise<K8sResourceKind> {\n    const { name } = this.state;\n    const idp: IdentityProvider = {\n      name,\n      type: 'HTPasswd',\n      mappingMethod: 'claim',\n      htpasswd: {\n        fileData: {\n          name: secretName,\n        },\n      },\n    };\n\n    return this.handlePromise(addIDP(oauth, idp, dryRun));\n  }\n\n  submit: React.FormEventHandler<HTMLFormElement> = (e) => {\n    e.preventDefault();\n    if (!this.state.htpasswdFileContent) {\n      this.setState({ errorMessage: 'You must specify an HTPasswd file.' });\n      return;\n    }\n\n    // Clear any previous errors.\n    this.setState({ errorMessage: '' });\n    this.getOAuthResource().then((oauth: OAuthKind) => {\n      this.addHTPasswdIDP(oauth, mockNames.secret, true)\n        .then(() => {\n          return this.createHTPasswdSecret()\n            .then((secret: K8sResourceKind) => this.addHTPasswdIDP(oauth, secret.metadata.name))\n            .then(redirectToOAuthPage);\n        })\n        .catch((err) => {\n          this.setState({ errorMessage: err });\n        });\n    });\n  };\n\n  nameChanged: React.ReactEventHandler<HTMLInputElement> = (e) => {\n    this.setState({ name: e.currentTarget.value });\n  };\n\n  htpasswdFileChanged = (htpasswdFileContent: string) => {\n    this.setState({ htpasswdFileContent });\n  };\n\n  render() {\n    const { name, htpasswdFileContent } = this.state;\n    const title = 'Add Identity Provider: HTPasswd';\n\n    return (\n      <div className=\"co-m-pane__body\">\n        <Helmet>\n          <title>{title}</title>\n        </Helmet>\n        <form onSubmit={this.submit} name=\"form\" className=\"co-m-pane__body-group co-m-pane__form\">\n          <h1 className=\"co-m-pane__heading\">{title}</h1>\n          <p className=\"co-m-pane__explanation\">\n            HTPasswd validates usernames and passwords against a flat file generated using the\n            htpasswd command.\n          </p>\n          <IDPNameInput value={name} onChange={this.nameChanged} />\n          <div className=\"form-group\">\n            <DroppableFileInput\n              onChange={this.htpasswdFileChanged}\n              inputFileData={htpasswdFileContent}\n              id=\"htpasswd-file\"\n              label=\"HTPasswd File\"\n              inputFieldHelpText=\"Upload an HTPasswd file created using the htpasswd command.\"\n              isRequired\n              hideContents\n            />\n          </div>\n          <ButtonBar errorMessage={this.state.errorMessage} inProgress={this.state.inProgress}>\n            <ActionGroup className=\"pf-c-form\">\n              <Button type=\"submit\" variant=\"primary\">\n                Add\n              </Button>\n              <Button type=\"button\" variant=\"secondary\" onClick={history.goBack}>\n                Cancel\n              </Button>\n            </ActionGroup>\n          </ButtonBar>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport type AddHTPasswdPageState = {\n  name: string;\n  htpasswdFileContent: string;\n  inProgress: boolean;\n  errorMessage: string;\n};\n"]}]}