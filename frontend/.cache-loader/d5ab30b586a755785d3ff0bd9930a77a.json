{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/components/ocs-install/pvs-available-capacity.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/components/ocs-install/pvs-available-capacity.tsx","mtime":1615298458590},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { humanizeBinaryBytes } from '@console/internal/components/utils/';\nimport { getName } from '@console/shared';\nimport { pvResource } from '../../constants/resources';\nimport { calcPVsCapacity, getSCAvailablePVs } from '../../selectors';\nimport '../modals/add-capacity-modal/_add-capacity-modal.scss';\nimport './pvs-available-capacity.scss';\nexport const PVsAvailableCapacity = ({ replica, sc }) => {\n    const [data, loaded, loadError] = useK8sWatchResource(pvResource);\n    let availableCapacity = '';\n    let availableStatusEl = (React.createElement(\"div\", { className: \"skeleton-text ceph-pvs-available-capacity__current-capacity--loading\" }));\n    if ((loadError || data.length === 0) && loaded) {\n        availableStatusEl = React.createElement(\"div\", { className: \"text-muted\" }, \"Not Available\");\n    }\n    else if (loaded) {\n        const pvs = getSCAvailablePVs(data, getName(sc));\n        availableCapacity = humanizeBinaryBytes(calcPVsCapacity(pvs)).string;\n        availableStatusEl = React.createElement(\"div\", null, `${availableCapacity} / ${replica} replicas`);\n    }\n    return (React.createElement(\"div\", { className: \"ceph-add-capacity__current-capacity\" },\n        React.createElement(\"div\", { className: \"text-secondary ceph-add-capacity__current-capacity--text\" },\n            React.createElement(\"strong\", null, \"Available capacity:\")),\n        availableStatusEl));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/components/ocs-install/pvs-available-capacity.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/components/ocs-install/pvs-available-capacity.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,mBAAmB,EAAE,MAAM,mDAAmD,CAAC;AAExF,OAAO,EAAE,mBAAmB,EAAE,MAAM,qCAAqC,CAAC;AAC1E,OAAO,EAAE,OAAO,EAAE,MAAM,iBAAiB,CAAC;AAC1C,OAAO,EAAE,UAAU,EAAE,MAAM,2BAA2B,CAAC;AACvD,OAAO,EAAE,eAAe,EAAE,iBAAiB,EAAE,MAAM,iBAAiB,CAAC;AACrE,OAAO,uDAAuD,CAAC;AAC/D,OAAO,+BAA+B,CAAC;AAEvC,MAAM,CAAC,MAAM,oBAAoB,GAAuC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,EAAE,EAAE;IAC1F,MAAM,CAAC,IAAI,EAAE,MAAM,EAAE,SAAS,CAAC,GAAG,mBAAmB,CAAoB,UAAU,CAAC,CAAC;IACrF,IAAI,iBAAiB,GAAW,EAAE,CAAC;IAEnC,IAAI,iBAAiB,GAAG,CACtB,6BAAK,SAAS,EAAC,sEAAsE,GAAG,CACzF,CAAC;IAEF,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,IAAI,MAAM,EAAE;QAC9C,iBAAiB,GAAG,6BAAK,SAAS,EAAC,YAAY,oBAAoB,CAAC;KACrE;SAAM,IAAI,MAAM,EAAE;QACjB,MAAM,GAAG,GAAG,iBAAiB,CAAC,IAAI,EAAE,OAAO,CAAC,EAAE,CAAC,CAAC,CAAC;QACjD,iBAAiB,GAAG,mBAAmB,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,CAAC,MAAM,CAAC;QACrE,iBAAiB,GAAG,iCAAM,GAAG,iBAAiB,MAAM,OAAO,WAAW,CAAO,CAAC;KAC/E;IAED,OAAO,CACL,6BAAK,SAAS,EAAC,qCAAqC;QAClD,6BAAK,SAAS,EAAC,0DAA0D;YACvE,0DAAoC,CAChC;QACL,iBAAiB,CACd,CACP,CAAC;AACJ,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { StorageClassResourceKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport { humanizeBinaryBytes } from '@console/internal/components/utils/';\nimport { getName } from '@console/shared';\nimport { pvResource } from '../../constants/resources';\nimport { calcPVsCapacity, getSCAvailablePVs } from '../../selectors';\nimport '../modals/add-capacity-modal/_add-capacity-modal.scss';\nimport './pvs-available-capacity.scss';\n\nexport const PVsAvailableCapacity: React.FC<PVAvaialbleCapacityProps> = ({ replica, sc }) => {\n  const [data, loaded, loadError] = useK8sWatchResource<K8sResourceKind[]>(pvResource);\n  let availableCapacity: string = '';\n\n  let availableStatusEl = (\n    <div className=\"skeleton-text ceph-pvs-available-capacity__current-capacity--loading\" />\n  );\n\n  if ((loadError || data.length === 0) && loaded) {\n    availableStatusEl = <div className=\"text-muted\">Not Available</div>;\n  } else if (loaded) {\n    const pvs = getSCAvailablePVs(data, getName(sc));\n    availableCapacity = humanizeBinaryBytes(calcPVsCapacity(pvs)).string;\n    availableStatusEl = <div>{`${availableCapacity} / ${replica} replicas`}</div>;\n  }\n\n  return (\n    <div className=\"ceph-add-capacity__current-capacity\">\n      <div className=\"text-secondary ceph-add-capacity__current-capacity--text\">\n        <strong>Available capacity:</strong>\n      </div>\n      {availableStatusEl}\n    </div>\n  );\n};\n\ntype PVAvaialbleCapacityProps = {\n  replica: string;\n  sc: StorageClassResourceKind;\n};\n"]}]}