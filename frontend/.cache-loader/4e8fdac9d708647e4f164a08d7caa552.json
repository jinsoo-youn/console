{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/QueryFocusApplication.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/QueryFocusApplication.tsx","mtime":1615298458610},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { setActiveApplication } from '@console/internal/actions/ui';\nimport { getActiveApplication } from '@console/internal/reducers/ui';\nimport { QUERY_PROPERTIES } from '../const';\nimport { sanitizeApplicationValue } from '../utils/application-utils';\nconst QueryFocusApplication = ({ children, application, onSetApp, }) => {\n    const originalApp = React.useRef(application);\n    const desiredApplication = new URLSearchParams(window.location.search).get(QUERY_PROPERTIES.APPLICATION);\n    React.useEffect(() => {\n        const originalApplication = originalApp.current;\n        const sanitizedApp = sanitizeApplicationValue(desiredApplication);\n        if (sanitizedApp && sanitizedApp !== originalApplication) {\n            onSetApp(sanitizedApp);\n        }\n        return () => {\n            if (application !== originalApplication) {\n                onSetApp(originalApplication);\n            }\n        };\n    }, [desiredApplication, onSetApp, originalApp, application]);\n    return React.createElement(React.Fragment, null, children(desiredApplication));\n};\nexport default connect((state) => ({\n    application: getActiveApplication(state),\n}), {\n    onSetApp: setActiveApplication,\n})(QueryFocusApplication);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/QueryFocusApplication.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/QueryFocusApplication.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,OAAO,EAAE,MAAM,aAAa,CAAC;AACtC,OAAO,EAAE,oBAAoB,EAAE,MAAM,8BAA8B,CAAC;AAEpE,OAAO,EAAE,oBAAoB,EAAE,MAAM,+BAA+B,CAAC;AACrE,OAAO,EAAE,gBAAgB,EAAE,MAAM,UAAU,CAAC;AAC5C,OAAO,EAAE,wBAAwB,EAAE,MAAM,4BAA4B,CAAC;AActE,MAAM,qBAAqB,GAAyC,CAAC,EACnE,QAAQ,EACR,WAAW,EACX,QAAQ,GACT,EAAE,EAAE;IACH,MAAM,WAAW,GAAG,KAAK,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC;IAC9C,MAAM,kBAAkB,GAAG,IAAI,eAAe,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,GAAG,CACxE,gBAAgB,CAAC,WAAW,CAC7B,CAAC;IAEF,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,MAAM,mBAAmB,GAAG,WAAW,CAAC,OAAO,CAAC;QAChD,MAAM,YAAY,GAAG,wBAAwB,CAAC,kBAAkB,CAAC,CAAC;QAClE,IAAI,YAAY,IAAI,YAAY,KAAK,mBAAmB,EAAE;YACxD,QAAQ,CAAC,YAAY,CAAC,CAAC;SACxB;QAED,OAAO,GAAG,EAAE;YACV,IAAI,WAAW,KAAK,mBAAmB,EAAE;gBACvC,QAAQ,CAAC,mBAAmB,CAAC,CAAC;aAC/B;QACH,CAAC,CAAC;IACJ,CAAC,EAAE,CAAC,kBAAkB,EAAE,QAAQ,EAAE,WAAW,EAAE,WAAW,CAAC,CAAC,CAAC;IAE7D,OAAO,0CAAG,QAAQ,CAAC,kBAAkB,CAAC,CAAI,CAAC;AAC7C,CAAC,CAAC;AAEF,eAAe,OAAO,CACpB,CAAC,KAAgB,EAAc,EAAE,CAAC,CAAC;IACjC,WAAW,EAAE,oBAAoB,CAAC,KAAK,CAAC;CACzC,CAAC,EACF;IACE,QAAQ,EAAE,oBAAoB;CAC/B,CACF,CAAC,qBAAqB,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { setActiveApplication } from '@console/internal/actions/ui';\nimport { RootState } from '@console/internal/redux';\nimport { getActiveApplication } from '@console/internal/reducers/ui';\nimport { QUERY_PROPERTIES } from '../const';\nimport { sanitizeApplicationValue } from '../utils/application-utils';\n\ntype StateProps = {\n  application: string;\n};\ntype DispatchProps = {\n  onSetApp: (application: string) => void;\n};\ntype OwnProps = {\n  children: (desiredApplication?: string) => React.ReactNode;\n};\n\ntype QueryFocusApplicationProps = StateProps & DispatchProps & OwnProps;\n\nconst QueryFocusApplication: React.FC<QueryFocusApplicationProps> = ({\n  children,\n  application,\n  onSetApp,\n}) => {\n  const originalApp = React.useRef(application);\n  const desiredApplication = new URLSearchParams(window.location.search).get(\n    QUERY_PROPERTIES.APPLICATION,\n  );\n\n  React.useEffect(() => {\n    const originalApplication = originalApp.current;\n    const sanitizedApp = sanitizeApplicationValue(desiredApplication);\n    if (sanitizedApp && sanitizedApp !== originalApplication) {\n      onSetApp(sanitizedApp);\n    }\n\n    return () => {\n      if (application !== originalApplication) {\n        onSetApp(originalApplication);\n      }\n    };\n  }, [desiredApplication, onSetApp, originalApp, application]);\n\n  return <>{children(desiredApplication)}</>;\n};\n\nexport default connect<StateProps, DispatchProps, OwnProps>(\n  (state: RootState): StateProps => ({\n    application: getActiveApplication(state),\n  }),\n  {\n    onSetApp: setActiveApplication,\n  },\n)(QueryFocusApplication);\n"]}]}