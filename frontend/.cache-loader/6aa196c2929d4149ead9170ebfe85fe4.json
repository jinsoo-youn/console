{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/formik-fields/multi-column-field/MultiColumnFieldRow.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/formik-fields/multi-column-field/MultiColumnFieldRow.tsx","mtime":1616735742370},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { MinusCircleIcon } from '@patternfly/react-icons';\nimport { Tooltip, Button, ButtonVariant, ButtonType, GridItem, Grid, } from '@patternfly/react-core';\nimport './MultiColumnField.scss';\nconst minusCircleIcon = (onDelete, disableDeleteRow, toolTip) => {\n    return (React.createElement(\"div\", { className: 'odc-multi-column-field__col--button' },\n        React.createElement(Button, { \"aria-label\": \"Delete\", variant: ButtonVariant.plain, type: ButtonType.button, isInline: true, onClick: onDelete, isDisabled: disableDeleteRow },\n            React.createElement(MinusCircleIcon, null)),\n        React.createElement(\"span\", { className: \"sr-only\" }, toolTip || 'Delete')));\n};\nconst renderMinusCircleIcon = (onDelete, toolTip, disableDeleteRow) => {\n    return toolTip ? (React.createElement(Tooltip, { content: toolTip }, minusCircleIcon(onDelete, disableDeleteRow, toolTip))) : (minusCircleIcon(onDelete, disableDeleteRow));\n};\nconst MultiColumnFieldRow = ({ name, toolTip, rowIndex, onDelete, children, isReadOnly, disableDeleteRow, spans, }) => (React.createElement(\"div\", { className: \"odc-multi-column-field__row\" },\n    React.createElement(Grid, null, React.Children.map(children, (child, i) => {\n        const fieldName = `${name}.${rowIndex}.${child.props.name}`;\n        const newProps = Object.assign(Object.assign({}, child.props), { name: fieldName });\n        return (React.createElement(GridItem, { span: spans[i], key: fieldName },\n            React.createElement(\"div\", { className: \"odc-multi-column-field__col\" }, React.cloneElement(child, newProps))));\n    })),\n    !isReadOnly && renderMinusCircleIcon(onDelete, toolTip, disableDeleteRow)));\nexport default MultiColumnFieldRow;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/formik-fields/multi-column-field/MultiColumnFieldRow.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/formik-fields/multi-column-field/MultiColumnFieldRow.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,eAAe,EAAE,MAAM,yBAAyB,CAAC;AAC1D,OAAO,EACL,OAAO,EACP,MAAM,EACN,aAAa,EACb,UAAU,EACV,QAAQ,EACR,IAAI,GAEL,MAAM,wBAAwB,CAAC;AAChC,OAAO,yBAAyB,CAAC;AAajC,MAAM,eAAe,GAAG,CAAC,QAAoB,EAAE,gBAA0B,EAAE,OAAgB,EAAE,EAAE;IAC7F,OAAO,CACL,6BAAK,SAAS,EAAE,qCAAqC;QACnD,oBAAC,MAAM,kBACM,QAAQ,EACnB,OAAO,EAAE,aAAa,CAAC,KAAK,EAC5B,IAAI,EAAE,UAAU,CAAC,MAAM,EACvB,QAAQ,QACR,OAAO,EAAE,QAAQ,EACjB,UAAU,EAAE,gBAAgB;YAE5B,oBAAC,eAAe,OAAG,CACZ;QACT,8BAAM,SAAS,EAAC,SAAS,IAAE,OAAO,IAAI,QAAQ,CAAQ,CAClD,CACP,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,qBAAqB,GAAG,CAC5B,QAAoB,EACpB,OAAgB,EAChB,gBAA0B,EAC1B,EAAE;IACF,OAAO,OAAO,CAAC,CAAC,CAAC,CACf,oBAAC,OAAO,IAAC,OAAO,EAAE,OAAO,IAAG,eAAe,CAAC,QAAQ,EAAE,gBAAgB,EAAE,OAAO,CAAC,CAAW,CAC5F,CAAC,CAAC,CAAC,CACF,eAAe,CAAC,QAAQ,EAAE,gBAAgB,CAAC,CAC5C,CAAC;AACJ,CAAC,CAAC;AAEF,MAAM,mBAAmB,GAAuC,CAAC,EAC/D,IAAI,EACJ,OAAO,EACP,QAAQ,EACR,QAAQ,EACR,QAAQ,EACR,UAAU,EACV,gBAAgB,EAChB,KAAK,GACN,EAAE,EAAE,CAAC,CACJ,6BAAK,SAAS,EAAC,6BAA6B;IAC1C,oBAAC,IAAI,QACF,KAAK,CAAC,QAAQ,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,KAAyB,EAAE,CAAC,EAAE,EAAE;QAC7D,MAAM,SAAS,GAAG,GAAG,IAAI,IAAI,QAAQ,IAAI,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;QAC5D,MAAM,QAAQ,mCAAQ,KAAK,CAAC,KAAK,KAAE,IAAI,EAAE,SAAS,GAAE,CAAC;QACrD,OAAO,CACL,oBAAC,QAAQ,IAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,EAAE,GAAG,EAAE,SAAS;YACtC,6BAAK,SAAS,EAAC,6BAA6B,IAAE,KAAK,CAAC,YAAY,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAO,CAC/E,CACZ,CAAC;IACJ,CAAC,CAAC,CACG;IACN,CAAC,UAAU,IAAI,qBAAqB,CAAC,QAAQ,EAAE,OAAO,EAAE,gBAAgB,CAAC,CACtE,CACP,CAAC;AAEF,eAAe,mBAAmB,CAAC","sourcesContent":["import * as React from 'react';\nimport { MinusCircleIcon } from '@patternfly/react-icons';\nimport {\n  Tooltip,\n  Button,\n  ButtonVariant,\n  ButtonType,\n  GridItem,\n  Grid,\n  gridItemSpanValueShape,\n} from '@patternfly/react-core';\nimport './MultiColumnField.scss';\n\nexport interface MultiColumnFieldRowProps {\n  name: string;\n  toolTip?: string;\n  rowIndex: number;\n  children: React.ReactNode;\n  onDelete: () => void;\n  isReadOnly?: boolean;\n  disableDeleteRow?: boolean;\n  spans: gridItemSpanValueShape[];\n}\n\nconst minusCircleIcon = (onDelete: () => void, disableDeleteRow?: boolean, toolTip?: string) => {\n  return (\n    <div className={'odc-multi-column-field__col--button'}>\n      <Button\n        aria-label=\"Delete\"\n        variant={ButtonVariant.plain}\n        type={ButtonType.button}\n        isInline\n        onClick={onDelete}\n        isDisabled={disableDeleteRow}\n      >\n        <MinusCircleIcon />\n      </Button>\n      <span className=\"sr-only\">{toolTip || 'Delete'}</span>\n    </div>\n  );\n};\n\nconst renderMinusCircleIcon = (\n  onDelete: () => void,\n  toolTip?: string,\n  disableDeleteRow?: boolean,\n) => {\n  return toolTip ? (\n    <Tooltip content={toolTip}>{minusCircleIcon(onDelete, disableDeleteRow, toolTip)}</Tooltip>\n  ) : (\n    minusCircleIcon(onDelete, disableDeleteRow)\n  );\n};\n\nconst MultiColumnFieldRow: React.FC<MultiColumnFieldRowProps> = ({\n  name,\n  toolTip,\n  rowIndex,\n  onDelete,\n  children,\n  isReadOnly,\n  disableDeleteRow,\n  spans,\n}) => (\n  <div className=\"odc-multi-column-field__row\">\n    <Grid>\n      {React.Children.map(children, (child: React.ReactElement, i) => {\n        const fieldName = `${name}.${rowIndex}.${child.props.name}`;\n        const newProps = { ...child.props, name: fieldName };\n        return (\n          <GridItem span={spans[i]} key={fieldName}>\n            <div className=\"odc-multi-column-field__col\">{React.cloneElement(child, newProps)}</div>\n          </GridItem>\n        );\n      })}\n    </Grid>\n    {!isReadOnly && renderMinusCircleIcon(onDelete, toolTip, disableDeleteRow)}\n  </div>\n);\n\nexport default MultiColumnFieldRow;\n"]}]}