{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/dashboards/index.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/dashboards/index.tsx","mtime":1616735742480},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport { Dropdown, DropdownToggle, DropdownItem } from '@patternfly/react-core';\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { Map as ImmutableMap } from 'immutable';\nimport { RedExclamationCircleIcon } from '@console/shared';\nimport ErrorAlert from '@console/shared/src/components/alerts/error';\nimport Dashboard from '@console/shared/src/components/dashboard/Dashboard';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport { withFallback } from '@console/shared/src/components/error/error-boundary';\nimport * as UIActions from '../../../actions/ui';\nimport { ErrorBoundaryFallback } from '../../error';\nimport { getPrometheusURL, PrometheusEndpoint } from '../../graphs/helpers';\nimport { ExternalLink, history, LoadingInline, useSafeFetch } from '../../utils';\nimport { formatPrometheusDuration, parsePrometheusDuration } from '../../utils/datetime';\nimport BarChart from './bar-chart';\nimport Graph from './graph';\nimport SingleStat from './single-stat';\nimport Table from './table';\nconst NUM_SAMPLES = 30;\nconst evaluateTemplate = (s, variables, timespan) => {\n    if (_.isEmpty(s)) {\n        return undefined;\n    }\n    let result = s;\n    // Handle the special `$__interval` variable.\n    // https://grafana.com/docs/grafana/latest/reference/templating/#the-interval-variable\n    const intervalMS = timespan / NUM_SAMPLES;\n    const intervalMinutes = Math.floor(intervalMS / 1000 / 60);\n    // Use a minimum of 5m to make sure we have enough data to perform `irate`\n    // calculations, which require 2 data points each. Otherwise, there could be\n    // gaps in the graph.\n    const __interval = { value: `${Math.max(intervalMinutes, 5)}m` };\n    _.each(Object.assign(Object.assign({}, variables), { __interval }), (v, k) => {\n        const re = new RegExp(`\\\\$${k}`, 'g');\n        if (result.match(re)) {\n            if (v.isLoading) {\n                result = undefined;\n                return false;\n            }\n            result = result.replace(re, v.value || '');\n        }\n    });\n    return result;\n};\nconst useBoolean = (initialValue) => {\n    const [value, setValue] = React.useState(initialValue);\n    const toggle = React.useCallback(() => setValue((v) => !v), []);\n    const setTrue = React.useCallback(() => setValue(true), []);\n    const setFalse = React.useCallback(() => setValue(false), []);\n    return [value, toggle, setTrue, setFalse];\n};\nconst VariableDropdown = ({ isError = false, items, label, onChange, selectedKey, }) => {\n    const [isOpen, toggleIsOpen, , setClosed] = useBoolean(false);\n    return (React.createElement(\"div\", { className: \"form-group monitoring-dashboards__dropdown-wrap\" },\n        React.createElement(\"label\", { className: \"monitoring-dashboards__dropdown-title\" }, label),\n        isError ? (React.createElement(Dropdown, { toggle: React.createElement(DropdownToggle, { className: \"monitoring-dashboards__dropdown-button\", isDisabled: true },\n                React.createElement(RedExclamationCircleIcon, null),\n                \" Error loading options\") })) : (React.createElement(Dropdown, { dropdownItems: _.map(items, (name, key) => (React.createElement(DropdownItem, { component: \"button\", key: key, onClick: () => onChange(key) }, name))), isOpen: isOpen, onSelect: setClosed, toggle: React.createElement(DropdownToggle, { className: \"monitoring-dashboards__dropdown-button\", onToggle: toggleIsOpen }, items[selectedKey]) }))));\n};\nconst SingleVariableDropdown_ = ({ isHidden, name, options, optionsLoaded, patchVariable, query, timespan, value, }) => {\n    const safeFetch = React.useCallback(useSafeFetch(), []);\n    const [isError, setIsError] = React.useState(false);\n    React.useEffect(() => {\n        if (query) {\n            // Convert label_values queries to something Prometheus can handle\n            // TODO: Once the Prometheus /series endpoint is available through the API proxy, this should\n            // be converted to use that instead\n            const prometheusQuery = query.replace(/label_values\\((.*), (.*)\\)/, 'count($1) by ($2)');\n            const url = getPrometheusURL({\n                endpoint: PrometheusEndpoint.QUERY_RANGE,\n                query: prometheusQuery,\n                samples: NUM_SAMPLES,\n                timeout: '5s',\n                timespan,\n            });\n            patchVariable(name, { isLoading: true });\n            safeFetch(url)\n                .then(({ data }) => {\n                setIsError(false);\n                const newOptions = _.flatMap(data === null || data === void 0 ? void 0 : data.result, ({ metric }) => _.values(metric)).sort();\n                optionsLoaded(name, newOptions);\n            })\n                .catch((err) => {\n                patchVariable(name, { isLoading: false });\n                if (err.name !== 'AbortError') {\n                    setIsError(true);\n                }\n            });\n        }\n    }, [name, patchVariable, query, safeFetch, optionsLoaded, timespan]);\n    const onChange = React.useCallback((v) => patchVariable(name, { value: v }), [\n        name,\n        patchVariable,\n    ]);\n    if (isHidden || (!isError && _.isEmpty(options))) {\n        return null;\n    }\n    return (React.createElement(VariableDropdown, { isError: isError, items: _.zipObject(options, options), label: name, onChange: onChange, selectedKey: value }));\n};\nconst SingleVariableDropdown = connect(({ UI }, { name }) => {\n    var _a;\n    const variables = UI.getIn(['monitoringDashboards', 'variables']).toJS();\n    const timespan = UI.getIn(['monitoringDashboards', 'timespan']);\n    const { isHidden, options, query, value } = (_a = variables[name]) !== null && _a !== void 0 ? _a : {};\n    return {\n        isHidden,\n        options,\n        query: evaluateTemplate(query, variables, timespan),\n        timespan,\n        value,\n    };\n}, {\n    optionsLoaded: UIActions.monitoringDashboardsVariableOptionsLoaded,\n    patchVariable: UIActions.monitoringDashboardsPatchVariable,\n})(SingleVariableDropdown_);\nconst AllVariableDropdowns_ = ({ variables }) => (React.createElement(React.Fragment, null, variables.keySeq().map((name) => (React.createElement(SingleVariableDropdown, { key: name, name: name })))));\nconst AllVariableDropdowns = connect(({ UI }) => ({\n    variables: UI.getIn(['monitoringDashboards', 'variables']),\n}))(AllVariableDropdowns_);\nconst timespanOptions = {\n    '5m': '5 minutes',\n    '15m': '15 minutes',\n    '30m': '30 minutes',\n    '1h': '1 hour',\n    '2h': '2 hours',\n    '6h': '6 hours',\n    '12h': '12 hours',\n    '1d': '1 day',\n    '2d': '2 days',\n    '1w': '1 week',\n    '2w': '2 weeks',\n};\nconst TimespanDropdown_ = ({ timespan, setTimespan }) => {\n    const onChange = React.useCallback((v) => setTimespan(parsePrometheusDuration(v)), [\n        setTimespan,\n    ]);\n    return (React.createElement(VariableDropdown, { items: timespanOptions, label: \"Time Range\", onChange: onChange, selectedKey: formatPrometheusDuration(timespan) }));\n};\nexport const TimespanDropdown = connect(({ UI }) => ({\n    timespan: UI.getIn(['monitoringDashboards', 'timespan']),\n}), {\n    setTimespan: UIActions.monitoringDashboardsSetTimespan,\n})(TimespanDropdown_);\nconst pollOffText = 'Off';\nconst pollIntervalOptions = {\n    [pollOffText]: pollOffText,\n    '15s': '15 seconds',\n    '30s': '30 seconds',\n    '1m': '1 minute',\n    '5m': '5 minutes',\n    '15m': '15 minutes',\n    '30m': '30 minutes',\n    '1h': '1 hour',\n    '2h': '2 hours',\n    '1d': '1 day',\n};\nconst PollIntervalDropdown_ = ({ pollInterval, setPollInterval, }) => {\n    const onChange = React.useCallback((v) => setPollInterval(v === pollOffText ? null : parsePrometheusDuration(v)), [setPollInterval]);\n    return (React.createElement(VariableDropdown, { items: pollIntervalOptions, label: \"Refresh Interval\", onChange: onChange, selectedKey: pollInterval === null ? pollOffText : formatPrometheusDuration(pollInterval) }));\n};\nexport const PollIntervalDropdown = connect(({ UI }) => ({\n    pollInterval: UI.getIn(['monitoringDashboards', 'pollInterval']),\n}), {\n    setPollInterval: UIActions.monitoringDashboardsSetPollInterval,\n})(PollIntervalDropdown_);\n// Matches Prometheus labels surrounded by {{ }} in the graph legend label templates\nconst legendTemplateOptions = { interpolate: /{{([a-zA-Z_][a-zA-Z0-9_]*)}}/g };\nconst CardBody_ = ({ panel, pollInterval, timespan, variables }) => {\n    var _a;\n    const formatLegendLabel = React.useCallback((labels, i) => {\n        var _a, _b;\n        const legendFormat = (_b = (_a = panel.targets) === null || _a === void 0 ? void 0 : _a[i]) === null || _b === void 0 ? void 0 : _b.legendFormat;\n        const compiled = _.template(legendFormat, legendTemplateOptions);\n        try {\n            return compiled(labels);\n        }\n        catch (e) {\n            // If we can't format the label (e.g. if one of it's variables is missing from `labels`),\n            // show the template string instead\n            return legendFormat;\n        }\n    }, [panel]);\n    const variablesJS = variables.toJS();\n    const rawQueries = _.map(panel.targets, 'expr');\n    if (!rawQueries.length) {\n        return null;\n    }\n    const queries = rawQueries.map((expr) => evaluateTemplate(expr, variablesJS, timespan));\n    if (_.some(queries, _.isUndefined)) {\n        return React.createElement(LoadingInline, null);\n    }\n    return (React.createElement(React.Fragment, null,\n        panel.type === 'grafana-piechart-panel' && (React.createElement(BarChart, { pollInterval: pollInterval, query: queries[0] })),\n        panel.type === 'graph' && (React.createElement(Graph, { formatLegendLabel: ((_a = panel.legend) === null || _a === void 0 ? void 0 : _a.show) ? formatLegendLabel : undefined, isStack: panel.stack, pollInterval: pollInterval, queries: queries })),\n        panel.type === 'singlestat' && (React.createElement(SingleStat, { panel: panel, pollInterval: pollInterval, query: queries[0] })),\n        panel.type === 'table' && (React.createElement(Table, { panel: panel, pollInterval: pollInterval, queries: queries }))));\n};\nconst CardBody = connect(({ UI }) => ({\n    pollInterval: UI.getIn(['monitoringDashboards', 'pollInterval']),\n    timespan: UI.getIn(['monitoringDashboards', 'timespan']),\n    variables: UI.getIn(['monitoringDashboards', 'variables']),\n}))(CardBody_);\n// Determine how many columns a panel should span. If panel specifies a `span`, use that. Otherwise\n// look for a `breakpoint` percentage. If neither are specified, default to 12 (full width).\nconst getPanelSpan = (panel) => {\n    if (panel.span) {\n        return panel.span;\n    }\n    const breakpoint = _.toInteger(_.trimEnd(panel.breakpoint, '%'));\n    if (breakpoint > 0) {\n        return Math.round(12 * (breakpoint / 100));\n    }\n    return 12;\n};\nconst getPanelClassModifier = (panel) => {\n    const span = getPanelSpan(panel);\n    switch (span) {\n        case 6:\n            return 'max-2';\n        case 2:\n        // fallthrough\n        case 4:\n        // fallthrough\n        case 5:\n            return 'max-3';\n        case 3:\n            return 'max-4';\n        default:\n            return 'max-1';\n    }\n};\nconst Card = ({ panel }) => {\n    if (panel.type === 'row') {\n        return (React.createElement(React.Fragment, null, _.map(panel.panels, (p) => (React.createElement(Card, { key: p.id, panel: p })))));\n    }\n    const panelClassModifier = getPanelClassModifier(panel);\n    return (React.createElement(\"div\", { className: `monitoring-dashboards__panel monitoring-dashboards__panel--${panelClassModifier}` },\n        React.createElement(DashboardCard, { className: \"monitoring-dashboards__card\", gradient: panel.type === 'grafana-piechart-panel' },\n            React.createElement(DashboardCardHeader, { className: \"monitoring-dashboards__card-header\" },\n                React.createElement(DashboardCardTitle, null, panel.title)),\n            React.createElement(DashboardCardBody, { className: \"co-dashboard-card__body--dashboard-graph\" },\n                React.createElement(CardBody, { panel: panel })))));\n};\nconst Board = ({ rows }) => (React.createElement(React.Fragment, null, _.map(rows, (row, i) => (React.createElement(\"div\", { className: \"monitoring-dashboards__row\", key: i }, _.map(row.panels, (panel) => (React.createElement(Card, { key: panel.id, panel: panel }))))))));\nconst GrafanaLink = () => _.isEmpty(window.SERVER_FLAGS.grafanaPublicURL) ? null : (React.createElement(\"span\", { className: \"monitoring-header-link\" },\n    React.createElement(ExternalLink, { href: window.SERVER_FLAGS.grafanaPublicURL, text: \"Grafana UI\" })));\nconst MonitoringDashboardsPage_ = ({ deleteAll, match, patchAllVariables, }) => {\n    var _a;\n    const [board, setBoard] = React.useState();\n    const [boards, setBoards] = React.useState([]);\n    const [error, setError] = React.useState();\n    const [isLoading, , , setLoaded] = useBoolean(true);\n    const safeFetch = React.useCallback(useSafeFetch(), []);\n    // Clear queries on unmount\n    React.useEffect(() => deleteAll, [deleteAll]);\n    React.useEffect(() => {\n        safeFetch('/api/console/monitoring-dashboard-config')\n            .then((response) => {\n            setLoaded();\n            setError(undefined);\n            const getBoardData = (item) => ({\n                data: JSON.parse(_.values(item === null || item === void 0 ? void 0 : item.data)[0]),\n                name: item.metadata.name,\n            });\n            const newBoards = _.sortBy(_.map(response.items, getBoardData), (v) => { var _a; return _.toLower((_a = v === null || v === void 0 ? void 0 : v.data) === null || _a === void 0 ? void 0 : _a.title); });\n            setBoards(newBoards);\n        })\n            .catch((err) => {\n            setLoaded();\n            if (err.name !== 'AbortError') {\n                setError(_.get(err, 'json.error', err.message));\n            }\n        });\n    }, [safeFetch, setLoaded]);\n    const boardItems = React.useMemo(() => _.mapValues(_.mapKeys(boards, 'name'), 'data.title'), [\n        boards,\n    ]);\n    const changeBoard = React.useCallback((newBoard) => {\n        var _a, _b;\n        if (newBoard !== board) {\n            const data = (_a = _.find(boards, { name: newBoard })) === null || _a === void 0 ? void 0 : _a.data;\n            const allVariables = {};\n            _.each((_b = data === null || data === void 0 ? void 0 : data.templating) === null || _b === void 0 ? void 0 : _b.list, (v) => {\n                var _a, _b, _c;\n                if (v.type === 'query' || v.type === 'interval') {\n                    allVariables[v.name] = ImmutableMap({\n                        isHidden: v.hide !== 0,\n                        isLoading: v.type === 'query',\n                        options: _.map(v.options, 'value'),\n                        query: v.type === 'query' ? v.query : undefined,\n                        value: ((_a = _.find(v.options, { selected: true })) === null || _a === void 0 ? void 0 : _a.value) || ((_c = (_b = v.options) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.value),\n                    });\n                }\n            });\n            patchAllVariables(allVariables);\n            setBoard(newBoard);\n            history.replace(`/monitoring/dashboards/${newBoard}`);\n        }\n    }, [board, boards, patchAllVariables]);\n    // Default to displaying the first board\n    React.useEffect(() => {\n        var _a;\n        if (!board && !_.isEmpty(boards)) {\n            changeBoard(match.params.board || ((_a = boards === null || boards === void 0 ? void 0 : boards[0]) === null || _a === void 0 ? void 0 : _a.name));\n        }\n    }, [board, boards, changeBoard, match.params.board]);\n    if (error) {\n        return React.createElement(ErrorAlert, { message: error });\n    }\n    const data = (_a = _.find(boards, { name: board })) === null || _a === void 0 ? void 0 : _a.data;\n    const rows = _.isEmpty(data === null || data === void 0 ? void 0 : data.rows) ? [{ panels: data === null || data === void 0 ? void 0 : data.panels }] : data === null || data === void 0 ? void 0 : data.rows;\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Helmet, null,\n            React.createElement(\"title\", null, \"Metrics Dashboards\")),\n        React.createElement(\"div\", { className: \"co-m-nav-title co-m-nav-title--detail\" },\n            React.createElement(\"div\", { className: \"monitoring-dashboards__header\" },\n                React.createElement(\"h1\", { className: \"co-m-pane__heading\" },\n                    React.createElement(\"span\", null,\n                        \"Dashboards \",\n                        React.createElement(GrafanaLink, null))),\n                React.createElement(\"div\", { className: \"monitoring-dashboards__options\" },\n                    React.createElement(TimespanDropdown, null),\n                    React.createElement(PollIntervalDropdown, null))),\n            React.createElement(\"div\", { className: \"monitoring-dashboards__variables\" },\n                !_.isEmpty(boardItems) && (React.createElement(VariableDropdown, { items: boardItems, label: \"Dashboard\", onChange: changeBoard, selectedKey: board })),\n                React.createElement(AllVariableDropdowns, { key: board }))),\n        React.createElement(Dashboard, null, isLoading ? React.createElement(LoadingInline, null) : React.createElement(Board, { key: board, rows: rows }))));\n};\nconst MonitoringDashboardsPage = connect(null, {\n    deleteAll: UIActions.queryBrowserDeleteAllQueries,\n    patchAllVariables: UIActions.monitoringDashboardsPatchAllVariables,\n})(MonitoringDashboardsPage_);\nexport default withFallback(MonitoringDashboardsPage, ErrorBoundaryFallback);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/dashboards/index.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/dashboards/index.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\nimport { Dropdown, DropdownToggle, DropdownItem } from '@patternfly/react-core';\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { connect } from 'react-redux';\nimport { Map as ImmutableMap } from 'immutable';\n\nimport { RedExclamationCircleIcon } from '@console/shared';\nimport ErrorAlert from '@console/shared/src/components/alerts/error';\nimport Dashboard from '@console/shared/src/components/dashboard/Dashboard';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport { withFallback } from '@console/shared/src/components/error/error-boundary';\n\nimport * as UIActions from '../../../actions/ui';\nimport { ErrorBoundaryFallback } from '../../error';\nimport { RootState } from '../../../redux';\nimport { getPrometheusURL, PrometheusEndpoint } from '../../graphs/helpers';\nimport { ExternalLink, history, LoadingInline, useSafeFetch } from '../../utils';\nimport { formatPrometheusDuration, parsePrometheusDuration } from '../../utils/datetime';\nimport BarChart from './bar-chart';\nimport Graph from './graph';\nimport SingleStat from './single-stat';\nimport Table from './table';\nimport { Panel } from './types';\n\nconst NUM_SAMPLES = 30;\n\nconst evaluateTemplate = (s: string, variables: VariablesMap, timespan: number): string => {\n  if (_.isEmpty(s)) {\n    return undefined;\n  }\n  let result = s;\n  // Handle the special `$__interval` variable.\n  // https://grafana.com/docs/grafana/latest/reference/templating/#the-interval-variable\n  const intervalMS = timespan / NUM_SAMPLES;\n  const intervalMinutes = Math.floor(intervalMS / 1000 / 60);\n  // Use a minimum of 5m to make sure we have enough data to perform `irate`\n  // calculations, which require 2 data points each. Otherwise, there could be\n  // gaps in the graph.\n  const __interval: Variable = { value: `${Math.max(intervalMinutes, 5)}m` };\n  _.each({ ...variables, __interval }, (v, k) => {\n    const re = new RegExp(`\\\\$${k}`, 'g');\n    if (result.match(re)) {\n      if (v.isLoading) {\n        result = undefined;\n        return false;\n      }\n      result = result.replace(re, v.value || '');\n    }\n  });\n  return result;\n};\n\nconst useBoolean = (initialValue: boolean): [boolean, () => void, () => void, () => void] => {\n  const [value, setValue] = React.useState(initialValue);\n  const toggle = React.useCallback(() => setValue((v) => !v), []);\n  const setTrue = React.useCallback(() => setValue(true), []);\n  const setFalse = React.useCallback(() => setValue(false), []);\n  return [value, toggle, setTrue, setFalse];\n};\n\nconst VariableDropdown: React.FC<VariableDropdownProps> = ({\n  isError = false,\n  items,\n  label,\n  onChange,\n  selectedKey,\n}) => {\n  const [isOpen, toggleIsOpen, , setClosed] = useBoolean(false);\n\n  return (\n    <div className=\"form-group monitoring-dashboards__dropdown-wrap\">\n      <label className=\"monitoring-dashboards__dropdown-title\">{label}</label>\n      {isError ? (\n        <Dropdown\n          toggle={\n            <DropdownToggle className=\"monitoring-dashboards__dropdown-button\" isDisabled={true}>\n              <RedExclamationCircleIcon /> Error loading options\n            </DropdownToggle>\n          }\n        />\n      ) : (\n        <Dropdown\n          dropdownItems={_.map(items, (name, key) => (\n            <DropdownItem component=\"button\" key={key} onClick={() => onChange(key)}>\n              {name}\n            </DropdownItem>\n          ))}\n          isOpen={isOpen}\n          onSelect={setClosed}\n          toggle={\n            <DropdownToggle\n              className=\"monitoring-dashboards__dropdown-button\"\n              onToggle={toggleIsOpen}\n            >\n              {items[selectedKey]}\n            </DropdownToggle>\n          }\n        />\n      )}\n    </div>\n  );\n};\n\nconst SingleVariableDropdown_: React.FC<SingleVariableDropdownProps> = ({\n  isHidden,\n  name,\n  options,\n  optionsLoaded,\n  patchVariable,\n  query,\n  timespan,\n  value,\n}) => {\n  const safeFetch = React.useCallback(useSafeFetch(), []);\n\n  const [isError, setIsError] = React.useState(false);\n\n  React.useEffect(() => {\n    if (query) {\n      // Convert label_values queries to something Prometheus can handle\n      // TODO: Once the Prometheus /series endpoint is available through the API proxy, this should\n      // be converted to use that instead\n      const prometheusQuery = query.replace(/label_values\\((.*), (.*)\\)/, 'count($1) by ($2)');\n\n      const url = getPrometheusURL({\n        endpoint: PrometheusEndpoint.QUERY_RANGE,\n        query: prometheusQuery,\n        samples: NUM_SAMPLES,\n        timeout: '5s',\n        timespan,\n      });\n\n      patchVariable(name, { isLoading: true });\n\n      safeFetch(url)\n        .then(({ data }) => {\n          setIsError(false);\n          const newOptions = _.flatMap(data?.result, ({ metric }) => _.values(metric)).sort();\n          optionsLoaded(name, newOptions);\n        })\n        .catch((err) => {\n          patchVariable(name, { isLoading: false });\n          if (err.name !== 'AbortError') {\n            setIsError(true);\n          }\n        });\n    }\n  }, [name, patchVariable, query, safeFetch, optionsLoaded, timespan]);\n\n  const onChange = React.useCallback((v: string) => patchVariable(name, { value: v }), [\n    name,\n    patchVariable,\n  ]);\n\n  if (isHidden || (!isError && _.isEmpty(options))) {\n    return null;\n  }\n\n  return (\n    <VariableDropdown\n      isError={isError}\n      items={_.zipObject(options, options)}\n      label={name}\n      onChange={onChange}\n      selectedKey={value}\n    />\n  );\n};\nconst SingleVariableDropdown = connect(\n  ({ UI }: RootState, { name }: { name: string }) => {\n    const variables = UI.getIn(['monitoringDashboards', 'variables']).toJS();\n    const timespan = UI.getIn(['monitoringDashboards', 'timespan']);\n    const { isHidden, options, query, value } = variables[name] ?? {};\n    return {\n      isHidden,\n      options,\n      query: evaluateTemplate(query, variables, timespan),\n      timespan,\n      value,\n    };\n  },\n  {\n    optionsLoaded: UIActions.monitoringDashboardsVariableOptionsLoaded,\n    patchVariable: UIActions.monitoringDashboardsPatchVariable,\n  },\n)(SingleVariableDropdown_);\n\nconst AllVariableDropdowns_: React.FC<AllVariableDropdownsProps> = ({ variables }) => (\n  <>\n    {variables.keySeq().map((name) => (\n      <SingleVariableDropdown key={name} name={name} />\n    ))}\n  </>\n);\nconst AllVariableDropdowns = connect(({ UI }: RootState) => ({\n  variables: UI.getIn(['monitoringDashboards', 'variables']),\n}))(AllVariableDropdowns_);\n\nconst timespanOptions = {\n  '5m': '5 minutes',\n  '15m': '15 minutes',\n  '30m': '30 minutes',\n  '1h': '1 hour',\n  '2h': '2 hours',\n  '6h': '6 hours',\n  '12h': '12 hours',\n  '1d': '1 day',\n  '2d': '2 days',\n  '1w': '1 week',\n  '2w': '2 weeks',\n};\n\nconst TimespanDropdown_: React.FC<TimespanDropdownProps> = ({ timespan, setTimespan }) => {\n  const onChange = React.useCallback((v: string) => setTimespan(parsePrometheusDuration(v)), [\n    setTimespan,\n  ]);\n\n  return (\n    <VariableDropdown\n      items={timespanOptions}\n      label=\"Time Range\"\n      onChange={onChange}\n      selectedKey={formatPrometheusDuration(timespan)}\n    />\n  );\n};\n\nexport const TimespanDropdown = connect(\n  ({ UI }: RootState) => ({\n    timespan: UI.getIn(['monitoringDashboards', 'timespan']),\n  }),\n  {\n    setTimespan: UIActions.monitoringDashboardsSetTimespan,\n  },\n)(TimespanDropdown_);\n\nconst pollOffText = 'Off';\nconst pollIntervalOptions = {\n  [pollOffText]: pollOffText,\n  '15s': '15 seconds',\n  '30s': '30 seconds',\n  '1m': '1 minute',\n  '5m': '5 minutes',\n  '15m': '15 minutes',\n  '30m': '30 minutes',\n  '1h': '1 hour',\n  '2h': '2 hours',\n  '1d': '1 day',\n};\n\nconst PollIntervalDropdown_: React.FC<PollIntervalDropdownProps> = ({\n  pollInterval,\n  setPollInterval,\n}) => {\n  const onChange = React.useCallback(\n    (v: string) => setPollInterval(v === pollOffText ? null : parsePrometheusDuration(v)),\n    [setPollInterval],\n  );\n\n  return (\n    <VariableDropdown\n      items={pollIntervalOptions}\n      label=\"Refresh Interval\"\n      onChange={onChange}\n      selectedKey={pollInterval === null ? pollOffText : formatPrometheusDuration(pollInterval)}\n    />\n  );\n};\n\nexport const PollIntervalDropdown = connect(\n  ({ UI }: RootState) => ({\n    pollInterval: UI.getIn(['monitoringDashboards', 'pollInterval']),\n  }),\n  {\n    setPollInterval: UIActions.monitoringDashboardsSetPollInterval,\n  },\n)(PollIntervalDropdown_);\n\n// Matches Prometheus labels surrounded by {{ }} in the graph legend label templates\nconst legendTemplateOptions = { interpolate: /{{([a-zA-Z_][a-zA-Z0-9_]*)}}/g };\n\nconst CardBody_: React.FC<CardBodyProps> = ({ panel, pollInterval, timespan, variables }) => {\n  const formatLegendLabel = React.useCallback(\n    (labels, i) => {\n      const legendFormat = panel.targets?.[i]?.legendFormat;\n      const compiled = _.template(legendFormat, legendTemplateOptions);\n      try {\n        return compiled(labels);\n      } catch (e) {\n        // If we can't format the label (e.g. if one of it's variables is missing from `labels`),\n        // show the template string instead\n        return legendFormat;\n      }\n    },\n    [panel],\n  );\n\n  const variablesJS: VariablesMap = variables.toJS();\n\n  const rawQueries = _.map(panel.targets, 'expr');\n  if (!rawQueries.length) {\n    return null;\n  }\n  const queries = rawQueries.map((expr) => evaluateTemplate(expr, variablesJS, timespan));\n\n  if (_.some(queries, _.isUndefined)) {\n    return <LoadingInline />;\n  }\n\n  return (\n    <>\n      {panel.type === 'grafana-piechart-panel' && (\n        <BarChart pollInterval={pollInterval} query={queries[0]} />\n      )}\n      {panel.type === 'graph' && (\n        <Graph\n          formatLegendLabel={panel.legend?.show ? formatLegendLabel : undefined}\n          isStack={panel.stack}\n          pollInterval={pollInterval}\n          queries={queries}\n        />\n      )}\n      {panel.type === 'singlestat' && (\n        <SingleStat panel={panel} pollInterval={pollInterval} query={queries[0]} />\n      )}\n      {panel.type === 'table' && (\n        <Table panel={panel} pollInterval={pollInterval} queries={queries} />\n      )}\n    </>\n  );\n};\nconst CardBody = connect(({ UI }: RootState) => ({\n  pollInterval: UI.getIn(['monitoringDashboards', 'pollInterval']),\n  timespan: UI.getIn(['monitoringDashboards', 'timespan']),\n  variables: UI.getIn(['monitoringDashboards', 'variables']),\n}))(CardBody_);\n\n// Determine how many columns a panel should span. If panel specifies a `span`, use that. Otherwise\n// look for a `breakpoint` percentage. If neither are specified, default to 12 (full width).\nconst getPanelSpan = (panel: Panel): number => {\n  if (panel.span) {\n    return panel.span;\n  }\n  const breakpoint = _.toInteger(_.trimEnd(panel.breakpoint, '%'));\n  if (breakpoint > 0) {\n    return Math.round(12 * (breakpoint / 100));\n  }\n  return 12;\n};\n\nconst getPanelClassModifier = (panel: Panel): string => {\n  const span: number = getPanelSpan(panel);\n  switch (span) {\n    case 6:\n      return 'max-2';\n    case 2:\n    // fallthrough\n    case 4:\n    // fallthrough\n    case 5:\n      return 'max-3';\n    case 3:\n      return 'max-4';\n    default:\n      return 'max-1';\n  }\n};\n\nconst Card: React.FC<CardProps> = ({ panel }) => {\n  if (panel.type === 'row') {\n    return (\n      <>\n        {_.map(panel.panels, (p) => (\n          <Card key={p.id} panel={p} />\n        ))}\n      </>\n    );\n  }\n\n  const panelClassModifier = getPanelClassModifier(panel);\n  return (\n    <div\n      className={`monitoring-dashboards__panel monitoring-dashboards__panel--${panelClassModifier}`}\n    >\n      <DashboardCard\n        className=\"monitoring-dashboards__card\"\n        gradient={panel.type === 'grafana-piechart-panel'}\n      >\n        <DashboardCardHeader className=\"monitoring-dashboards__card-header\">\n          <DashboardCardTitle>{panel.title}</DashboardCardTitle>\n        </DashboardCardHeader>\n        <DashboardCardBody className=\"co-dashboard-card__body--dashboard-graph\">\n          <CardBody panel={panel} />\n        </DashboardCardBody>\n      </DashboardCard>\n    </div>\n  );\n};\n\nconst Board: React.FC<BoardProps> = ({ rows }) => (\n  <>\n    {_.map(rows, (row, i) => (\n      <div className=\"monitoring-dashboards__row\" key={i}>\n        {_.map(row.panels, (panel) => (\n          <Card key={panel.id} panel={panel} />\n        ))}\n      </div>\n    ))}\n  </>\n);\n\nconst GrafanaLink = () =>\n  _.isEmpty(window.SERVER_FLAGS.grafanaPublicURL) ? null : (\n    <span className=\"monitoring-header-link\">\n      <ExternalLink href={window.SERVER_FLAGS.grafanaPublicURL} text=\"Grafana UI\" />\n    </span>\n  );\n\nconst MonitoringDashboardsPage_: React.FC<MonitoringDashboardsPageProps> = ({\n  deleteAll,\n  match,\n  patchAllVariables,\n}) => {\n  const [board, setBoard] = React.useState<string>();\n  const [boards, setBoards] = React.useState<Board[]>([]);\n  const [error, setError] = React.useState<string>();\n  const [isLoading, , , setLoaded] = useBoolean(true);\n\n  const safeFetch = React.useCallback(useSafeFetch(), []);\n\n  // Clear queries on unmount\n  React.useEffect(() => deleteAll, [deleteAll]);\n\n  React.useEffect(() => {\n    safeFetch('/api/console/monitoring-dashboard-config')\n      .then((response) => {\n        setLoaded();\n        setError(undefined);\n\n        const getBoardData = (item): Board => ({\n          data: JSON.parse(_.values(item?.data)[0]),\n          name: item.metadata.name,\n        });\n        const newBoards = _.sortBy(_.map(response.items, getBoardData), (v) =>\n          _.toLower(v?.data?.title),\n        );\n        setBoards(newBoards);\n      })\n      .catch((err) => {\n        setLoaded();\n        if (err.name !== 'AbortError') {\n          setError(_.get(err, 'json.error', err.message));\n        }\n      });\n  }, [safeFetch, setLoaded]);\n\n  const boardItems = React.useMemo(() => _.mapValues(_.mapKeys(boards, 'name'), 'data.title'), [\n    boards,\n  ]);\n\n  const changeBoard = React.useCallback(\n    (newBoard: string) => {\n      if (newBoard !== board) {\n        const data = _.find(boards, { name: newBoard })?.data;\n\n        const allVariables = {};\n        _.each(data?.templating?.list, (v) => {\n          if (v.type === 'query' || v.type === 'interval') {\n            allVariables[v.name] = ImmutableMap({\n              isHidden: v.hide !== 0,\n              isLoading: v.type === 'query',\n              options: _.map(v.options, 'value'),\n              query: v.type === 'query' ? v.query : undefined,\n              value: _.find(v.options, { selected: true })?.value || v.options?.[0]?.value,\n            });\n          }\n        });\n        patchAllVariables(allVariables);\n\n        setBoard(newBoard);\n        history.replace(`/monitoring/dashboards/${newBoard}`);\n      }\n    },\n    [board, boards, patchAllVariables],\n  );\n\n  // Default to displaying the first board\n  React.useEffect(() => {\n    if (!board && !_.isEmpty(boards)) {\n      changeBoard(match.params.board || boards?.[0]?.name);\n    }\n  }, [board, boards, changeBoard, match.params.board]);\n\n  if (error) {\n    return <ErrorAlert message={error} />;\n  }\n\n  const data = _.find(boards, { name: board })?.data;\n  const rows = _.isEmpty(data?.rows) ? [{ panels: data?.panels }] : data?.rows;\n\n  return (\n    <>\n      <Helmet>\n        <title>Metrics Dashboards</title>\n      </Helmet>\n      <div className=\"co-m-nav-title co-m-nav-title--detail\">\n        <div className=\"monitoring-dashboards__header\">\n          <h1 className=\"co-m-pane__heading\">\n            <span>\n              Dashboards <GrafanaLink />\n            </span>\n          </h1>\n          <div className=\"monitoring-dashboards__options\">\n            <TimespanDropdown />\n            <PollIntervalDropdown />\n          </div>\n        </div>\n        <div className=\"monitoring-dashboards__variables\">\n          {!_.isEmpty(boardItems) && (\n            <VariableDropdown\n              items={boardItems}\n              label=\"Dashboard\"\n              onChange={changeBoard}\n              selectedKey={board}\n            />\n          )}\n          <AllVariableDropdowns key={board} />\n        </div>\n      </div>\n      <Dashboard>{isLoading ? <LoadingInline /> : <Board key={board} rows={rows} />}</Dashboard>\n    </>\n  );\n};\nconst MonitoringDashboardsPage = connect(null, {\n  deleteAll: UIActions.queryBrowserDeleteAllQueries,\n  patchAllVariables: UIActions.monitoringDashboardsPatchAllVariables,\n})(MonitoringDashboardsPage_);\n\ntype TemplateVariable = {\n  hide: number;\n  name: string;\n  options: { selected: boolean; value: string }[];\n  query: string;\n  type: string;\n};\n\ntype Row = {\n  panels: Panel[];\n};\n\ntype Board = {\n  data: {\n    panels: Panel[];\n    rows: Row[];\n    templating: {\n      list: TemplateVariable[];\n    };\n    title: string;\n  };\n  name: string;\n};\n\ntype Variable = {\n  isHidden?: boolean;\n  isLoading?: boolean;\n  options?: string[];\n  query?: string;\n  value?: string;\n};\n\ntype VariablesMap = { [key: string]: Variable };\n\ntype VariableDropdownProps = {\n  isError?: boolean;\n  items: { [key: string]: string };\n  label: string;\n  onChange: (v: string) => void;\n  selectedKey: string;\n};\n\ntype SingleVariableDropdownProps = {\n  isHidden: boolean;\n  name: string;\n  options?: string[];\n  patchVariable: (key: string, patch: Variable) => undefined;\n  query?: string;\n  optionsLoaded: (key: string, newOptions: string[]) => undefined;\n  timespan: number;\n  value?: string;\n};\n\ntype BoardProps = {\n  rows: Row[];\n};\n\ntype AllVariableDropdownsProps = {\n  variables: ImmutableMap<string, ImmutableMap<string, any>>;\n};\n\ntype TimespanDropdownProps = {\n  timespan: number;\n  setTimespan: (v: number) => never;\n};\n\ntype PollIntervalDropdownProps = {\n  pollInterval: number;\n  setPollInterval: (v: number) => never;\n};\n\ntype CardBodyProps = {\n  panel: Panel;\n  pollInterval: null | number;\n  timespan: number;\n  variables: ImmutableMap<string, ImmutableMap<string, any>>;\n};\n\ntype CardProps = {\n  panel: Panel;\n};\n\ntype MonitoringDashboardsPageProps = {\n  deleteAll: () => undefined;\n  match: {\n    params: { board: string };\n  };\n  patchAllVariables: (variables: VariablesMap) => undefined;\n};\n\nexport default withFallback(MonitoringDashboardsPage, ErrorBoundaryFallback);\n"]}]}