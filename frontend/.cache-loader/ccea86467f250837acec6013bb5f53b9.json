{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/utils/yaml.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/utils/yaml.ts","mtime":1616735742380},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { safeDump, safeLoad } from 'js-yaml';\n// Safely parse js obj to yaml. Returns fallback (emtpy string by default) on exception.\nexport const safeJSToYAML = (js, fallback = '', options = {}) => {\n    try {\n        return safeDump(js, options);\n    }\n    catch (_a) {\n        return fallback;\n    }\n};\n// Safely parse yaml to js object. Returns fallback (empty object by default) on exception.\nexport const safeYAMLToJS = (yaml, fallback = {}, options = {}) => {\n    try {\n        return safeLoad(yaml, options);\n    }\n    catch (_a) {\n        return fallback;\n    }\n};\nexport const asyncJSToYAML = (js, options = {}) => {\n    return new Promise((resolve, reject) => {\n        try {\n            const yaml = safeDump(js, options);\n            resolve(yaml);\n        }\n        catch (e) {\n            reject(e);\n        }\n    });\n};\nexport const asyncYAMLToJS = (yaml, options = {}) => {\n    return new Promise((resolve, reject) => {\n        try {\n            const js = safeLoad(yaml, options);\n            resolve(js);\n        }\n        catch (e) {\n            reject(e);\n        }\n    });\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/utils/yaml.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/utils/yaml.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAC;AAE7C,wFAAwF;AACxF,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,EAAO,EAAE,WAAmB,EAAE,EAAE,UAAe,EAAE,EAAU,EAAE;IACxF,IAAI;QACF,OAAO,QAAQ,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;KAC9B;IAAC,WAAM;QACN,OAAO,QAAQ,CAAC;KACjB;AACH,CAAC,CAAC;AAEF,2FAA2F;AAC3F,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,IAAY,EAAE,WAAgB,EAAE,EAAE,UAAe,EAAE,EAAO,EAAE;IACvF,IAAI;QACF,OAAO,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;KAChC;IAAC,WAAM;QACN,OAAO,QAAQ,CAAC;KACjB;AACH,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,EAAO,EAAE,UAAe,EAAE,EAAmB,EAAE;IAC3E,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACrC,IAAI;YACF,MAAM,IAAI,GAAG,QAAQ,CAAC,EAAE,EAAE,OAAO,CAAC,CAAC;YACnC,OAAO,CAAC,IAAI,CAAC,CAAC;SACf;QAAC,OAAO,CAAC,EAAE;YACV,MAAM,CAAC,CAAC,CAAC,CAAC;SACX;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,IAAY,EAAE,UAAe,EAAE,EAAgB,EAAE;IAC7E,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACrC,IAAI;YACF,MAAM,EAAE,GAAG,QAAQ,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;YACnC,OAAO,CAAC,EAAE,CAAC,CAAC;SACb;QAAC,OAAO,CAAC,EAAE;YACV,MAAM,CAAC,CAAC,CAAC,CAAC;SACX;IACH,CAAC,CAAC,CAAC;AACL,CAAC,CAAC","sourcesContent":["import { safeDump, safeLoad } from 'js-yaml';\n\n// Safely parse js obj to yaml. Returns fallback (emtpy string by default) on exception.\nexport const safeJSToYAML = (js: any, fallback: string = '', options: any = {}): string => {\n  try {\n    return safeDump(js, options);\n  } catch {\n    return fallback;\n  }\n};\n\n// Safely parse yaml to js object. Returns fallback (empty object by default) on exception.\nexport const safeYAMLToJS = (yaml: string, fallback: any = {}, options: any = {}): any => {\n  try {\n    return safeLoad(yaml, options);\n  } catch {\n    return fallback;\n  }\n};\n\nexport const asyncJSToYAML = (js: any, options: any = {}): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    try {\n      const yaml = safeDump(js, options);\n      resolve(yaml);\n    } catch (e) {\n      reject(e);\n    }\n  });\n};\n\nexport const asyncYAMLToJS = (yaml: string, options: any = {}): Promise<any> => {\n  return new Promise((resolve, reject) => {\n    try {\n      const js = safeLoad(yaml, options);\n      resolve(js);\n    } catch (e) {\n      reject(e);\n    }\n  });\n};\n"]}]}