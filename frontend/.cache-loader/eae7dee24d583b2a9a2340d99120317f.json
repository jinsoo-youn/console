{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/clone-vm-modal/clone-vm-modal.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/clone-vm-modal/clone-vm-modal.tsx","mtime":1616735742420},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Form, FormGroup, TextArea, TextInput, Checkbox, FormSelect, FormSelectOption, } from '@patternfly/react-core';\nimport { Firehose, withHandlePromise, } from '@console/internal/components/utils';\nimport { createModalLauncher, ModalTitle, ModalBody, } from '@console/internal/components/factory';\nimport { ModalFooter } from '../modal/modal-footer';\nimport { NamespaceModel, PersistentVolumeClaimModel, ProjectModel } from '@console/internal/models';\nimport { getName, getNamespace, ValidationErrorType } from '@console/shared';\nimport { getDescription } from '../../../selectors/selectors';\nimport { getLoadedData, getLoadError, prefixedID } from '../../../utils';\nimport { DataVolumeModel, VirtualMachineModel } from '../../../models';\nimport { cloneVM } from '../../../k8s/requests/vm/clone';\nimport { validateVmLikeEntityName } from '../../../utils/validations/vm';\nimport { getVolumeDataVolumeName, getVolumePersistentVolumeClaimName, getVolumes, isVMExpectedRunning, } from '../../../selectors/vm';\nimport { VIRTUAL_MACHINE_EXISTS } from '../../../utils/validations/strings';\nimport { Errors } from '../../errors/errors';\nimport { COULD_NOT_LOAD_DATA } from '../../../utils/strings';\nimport { ConfigurationSummary } from './configuration-summary';\nimport './_clone-vm-modal.scss';\nexport const CloneVMModal = withHandlePromise((props) => {\n    const { vm, namespace, onNamespaceChanged, namespaces, virtualMachines, persistentVolumeClaims, dataVolumes, requestsDataVolumes, requestsPVCs, inProgress, errorMessage, handlePromise, close, cancel, } = props;\n    const asId = prefixedID.bind(null, 'clone-dialog-vm');\n    const [name, setName] = React.useState(`${getName(vm)}-clone`);\n    const [description, setDescription] = React.useState(getDescription(vm));\n    const [startVM, setStartVM] = React.useState(false);\n    const namespacesError = getLoadError(namespaces, NamespaceModel);\n    const pvcsError = requestsPVCs\n        ? getLoadError(persistentVolumeClaims, PersistentVolumeClaimModel)\n        : null;\n    const dataVolumesError = requestsDataVolumes ? getLoadError(dataVolumes, DataVolumeModel) : null;\n    const persistentVolumeClaimsData = getLoadedData(persistentVolumeClaims, []);\n    const dataVolumesData = getLoadedData(dataVolumes, []);\n    const nameError = validateVmLikeEntityName(name, namespace, getLoadedData(virtualMachines, []), {\n        existsErrorMessage: VIRTUAL_MACHINE_EXISTS,\n        subject: 'Name',\n    });\n    const dataVolumesValid = !(dataVolumesError || (requestsDataVolumes && !dataVolumes.loaded));\n    const pvcsValid = !(pvcsError || (requestsPVCs && !persistentVolumeClaims.loaded));\n    const isValid = !nameError && dataVolumesValid && pvcsValid && !namespacesError && name && namespace;\n    const submit = (e) => {\n        e.preventDefault();\n        const promise = cloneVM({\n            vm,\n            dataVolumes: dataVolumesData,\n            persistentVolumeClaims: persistentVolumeClaimsData,\n        }, { name, namespace, description, startVM });\n        handlePromise(promise).then(close); // eslint-disable-line promise/catch-or-return\n    };\n    const onCancelClick = (e) => {\n        e.stopPropagation();\n        cancel();\n    };\n    const vmRunningWarning = isVMExpectedRunning(vm) &&\n        `The VM ${getName(vm)} is still running. It will be powered off while cloning.`;\n    return (React.createElement(\"div\", { className: \"modal-content\" },\n        React.createElement(ModalTitle, null, \"Clone Virtual Machine\"),\n        React.createElement(ModalBody, null,\n            React.createElement(Errors, { endMargin: true, errors: [\n                    {\n                        key: 'namespacesError',\n                        message: namespacesError,\n                        title: COULD_NOT_LOAD_DATA,\n                    },\n                    {\n                        key: 'pvcsError',\n                        message: pvcsError,\n                        title: COULD_NOT_LOAD_DATA,\n                    },\n                    {\n                        key: 'dataVolumesError',\n                        message: dataVolumesError,\n                        title: COULD_NOT_LOAD_DATA,\n                    },\n                ].filter((err) => err.message) }),\n            React.createElement(Form, { isHorizontal: true },\n                React.createElement(FormGroup, { label: \"Name\", isRequired: true, fieldId: asId('name'), isValid: !(nameError && nameError.type === ValidationErrorType.Error), helperTextInvalid: nameError && nameError.message },\n                    React.createElement(TextInput, { isValid: !(nameError && nameError.type === ValidationErrorType.Error), isRequired: true, type: \"text\", id: asId('name'), value: name, onChange: (v) => setName(v), \"aria-label\": \"new VM name\" })),\n                React.createElement(FormGroup, { label: \"Description\", fieldId: asId('description') },\n                    React.createElement(TextArea, { id: asId('description'), value: description, onChange: (v) => setDescription(v), className: \"kubevirt-clone-vm-modal__description\" })),\n                React.createElement(FormGroup, { isRequired: true, label: \"Namespace\", fieldId: asId('namespace') },\n                    React.createElement(FormSelect, { value: namespace, onChange: (v) => onNamespaceChanged(v), id: asId('namespace') }, [...getLoadedData(namespaces, [])]\n                        .sort((n1, n2) => {\n                        const n1Name = getName(n1);\n                        const n2Name = getName(n2);\n                        return n1Name.localeCompare(n2Name);\n                    })\n                        .map((n) => {\n                        const namespaceName = getName(n);\n                        return (React.createElement(FormSelectOption, { key: namespaceName, value: namespaceName, label: namespaceName }));\n                    }))),\n                React.createElement(FormGroup, { fieldId: asId('start') },\n                    React.createElement(Checkbox, { label: \"Start virtual machine on clone\", id: asId('start'), isChecked: startVM, onChange: setStartVM, className: \"kubevirt-clone-vm-modal__start_vm_checkbox\" })),\n                React.createElement(FormGroup, { label: \"Configuration\", fieldId: asId('configuration-summary') },\n                    React.createElement(ConfigurationSummary, { id: asId('configuration-summary'), vm: vm, persistentVolumeClaims: persistentVolumeClaimsData, dataVolumes: dataVolumesData })))),\n        React.createElement(ModalFooter, { id: \"clone-vm\", errorMessage: errorMessage, isSimpleError: !!vmRunningWarning && !errorMessage, warningMessage: vmRunningWarning, inProgress: inProgress, isDisabled: !isValid || inProgress, submitButtonText: \"Clone Virtual Machine\", onSubmit: submit, onCancel: onCancelClick })));\n});\nconst CloneVMModalFirehose = (props) => {\n    const { vm, useProjects } = props;\n    const vmNamespace = getNamespace(vm);\n    const [namespace, setNamespace] = React.useState(vmNamespace);\n    const requestsDataVolumes = !!getVolumes(vm).find(getVolumeDataVolumeName);\n    const requestsPVCs = !!getVolumes(vm).find(getVolumePersistentVolumeClaimName);\n    const resources = [\n        {\n            kind: (useProjects ? ProjectModel : NamespaceModel).kind,\n            isList: true,\n            prop: 'namespaces',\n        },\n        {\n            kind: VirtualMachineModel.kind,\n            namespace,\n            isList: true,\n            prop: 'virtualMachines',\n        },\n    ];\n    if (requestsPVCs) {\n        resources.push({\n            kind: PersistentVolumeClaimModel.kind,\n            namespace: vmNamespace,\n            isList: true,\n            prop: 'persistentVolumeClaims',\n        });\n    }\n    if (requestsDataVolumes) {\n        resources.push({\n            kind: DataVolumeModel.kind,\n            namespace: vmNamespace,\n            isList: true,\n            prop: 'dataVolumes',\n        });\n    }\n    return (React.createElement(Firehose, { resources: resources },\n        React.createElement(CloneVMModal, Object.assign({}, props, { namespace: namespace, onNamespaceChanged: (n) => setNamespace(n), requestsDataVolumes: requestsDataVolumes, requestsPVCs: requestsPVCs }))));\n};\nconst cloneVMModalStateToProps = ({ k8s }) => {\n    const useProjects = k8s.hasIn(['RESOURCES', 'models', ProjectModel.kind]);\n    return {\n        useProjects,\n    };\n};\nconst CloneVMModalConnected = connect(cloneVMModalStateToProps)(CloneVMModalFirehose);\nexport const cloneVMModal = createModalLauncher(CloneVMModalConnected);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/clone-vm-modal/clone-vm-modal.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/clone-vm-modal/clone-vm-modal.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  Form,\n  FormGroup,\n  TextArea,\n  TextInput,\n  Checkbox,\n  FormSelect,\n  FormSelectOption,\n} from '@patternfly/react-core';\nimport {\n  Firehose,\n  FirehoseResource,\n  FirehoseResult,\n  HandlePromiseProps,\n  withHandlePromise,\n} from '@console/internal/components/utils';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalComponentProps,\n} from '@console/internal/components/factory';\nimport { ModalFooter } from '../modal/modal-footer';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { NamespaceModel, PersistentVolumeClaimModel, ProjectModel } from '@console/internal/models';\nimport { getName, getNamespace, ValidationErrorType } from '@console/shared';\nimport { VMKind } from '../../../types';\nimport { getDescription } from '../../../selectors/selectors';\nimport { getLoadedData, getLoadError, prefixedID } from '../../../utils';\nimport { DataVolumeModel, VirtualMachineModel } from '../../../models';\nimport { cloneVM } from '../../../k8s/requests/vm/clone';\nimport { validateVmLikeEntityName } from '../../../utils/validations/vm';\nimport {\n  getVolumeDataVolumeName,\n  getVolumePersistentVolumeClaimName,\n  getVolumes,\n  isVMExpectedRunning,\n} from '../../../selectors/vm';\nimport { VIRTUAL_MACHINE_EXISTS } from '../../../utils/validations/strings';\nimport { Errors } from '../../errors/errors';\nimport { COULD_NOT_LOAD_DATA } from '../../../utils/strings';\nimport { ConfigurationSummary } from './configuration-summary';\n\nimport './_clone-vm-modal.scss';\n\nexport const CloneVMModal = withHandlePromise((props: CloneVMModalProps) => {\n  const {\n    vm,\n    namespace,\n    onNamespaceChanged,\n    namespaces,\n    virtualMachines,\n    persistentVolumeClaims,\n    dataVolumes,\n    requestsDataVolumes,\n    requestsPVCs,\n    inProgress,\n    errorMessage,\n    handlePromise,\n    close,\n    cancel,\n  } = props;\n  const asId = prefixedID.bind(null, 'clone-dialog-vm');\n\n  const [name, setName] = React.useState(`${getName(vm)}-clone`);\n  const [description, setDescription] = React.useState(getDescription(vm));\n  const [startVM, setStartVM] = React.useState(false);\n\n  const namespacesError = getLoadError(namespaces, NamespaceModel);\n  const pvcsError = requestsPVCs\n    ? getLoadError(persistentVolumeClaims, PersistentVolumeClaimModel)\n    : null;\n  const dataVolumesError = requestsDataVolumes ? getLoadError(dataVolumes, DataVolumeModel) : null;\n\n  const persistentVolumeClaimsData = getLoadedData(persistentVolumeClaims, []);\n  const dataVolumesData = getLoadedData(dataVolumes, []);\n\n  const nameError = validateVmLikeEntityName(name, namespace, getLoadedData(virtualMachines, []), {\n    existsErrorMessage: VIRTUAL_MACHINE_EXISTS,\n    subject: 'Name',\n  });\n\n  const dataVolumesValid = !(dataVolumesError || (requestsDataVolumes && !dataVolumes.loaded));\n  const pvcsValid = !(pvcsError || (requestsPVCs && !persistentVolumeClaims.loaded));\n\n  const isValid =\n    !nameError && dataVolumesValid && pvcsValid && !namespacesError && name && namespace;\n\n  const submit = (e) => {\n    e.preventDefault();\n\n    const promise = cloneVM(\n      {\n        vm,\n        dataVolumes: dataVolumesData,\n        persistentVolumeClaims: persistentVolumeClaimsData,\n      },\n      { name, namespace, description, startVM },\n    );\n    handlePromise(promise).then(close); // eslint-disable-line promise/catch-or-return\n  };\n\n  const onCancelClick = (e) => {\n    e.stopPropagation();\n    cancel();\n  };\n\n  const vmRunningWarning =\n    isVMExpectedRunning(vm) &&\n    `The VM ${getName(vm)} is still running. It will be powered off while cloning.`;\n\n  return (\n    <div className=\"modal-content\">\n      <ModalTitle>Clone Virtual Machine</ModalTitle>\n      <ModalBody>\n        <Errors\n          endMargin\n          errors={[\n            {\n              key: 'namespacesError',\n              message: namespacesError,\n              title: COULD_NOT_LOAD_DATA,\n            },\n            {\n              key: 'pvcsError',\n              message: pvcsError,\n              title: COULD_NOT_LOAD_DATA,\n            },\n            {\n              key: 'dataVolumesError',\n              message: dataVolumesError,\n              title: COULD_NOT_LOAD_DATA,\n            },\n          ].filter((err) => err.message)}\n        />\n        <Form isHorizontal>\n          <FormGroup\n            label=\"Name\"\n            isRequired\n            fieldId={asId('name')}\n            isValid={!(nameError && nameError.type === ValidationErrorType.Error)}\n            helperTextInvalid={nameError && nameError.message}\n          >\n            <TextInput\n              isValid={!(nameError && nameError.type === ValidationErrorType.Error)}\n              isRequired\n              type=\"text\"\n              id={asId('name')}\n              value={name}\n              onChange={(v) => setName(v)}\n              aria-label=\"new VM name\"\n            />\n          </FormGroup>\n          <FormGroup label=\"Description\" fieldId={asId('description')}>\n            <TextArea\n              id={asId('description')}\n              value={description}\n              onChange={(v) => setDescription(v)}\n              className=\"kubevirt-clone-vm-modal__description\"\n            />\n          </FormGroup>\n          <FormGroup isRequired label=\"Namespace\" fieldId={asId('namespace')}>\n            <FormSelect\n              value={namespace}\n              onChange={(v) => onNamespaceChanged(v)}\n              id={asId('namespace')}\n            >\n              {[...getLoadedData(namespaces, [])]\n                .sort((n1, n2) => {\n                  const n1Name = getName(n1);\n                  const n2Name = getName(n2);\n                  return n1Name.localeCompare(n2Name);\n                })\n                .map((n) => {\n                  const namespaceName = getName(n);\n                  return (\n                    <FormSelectOption\n                      key={namespaceName}\n                      value={namespaceName}\n                      label={namespaceName}\n                    />\n                  );\n                })}\n            </FormSelect>\n          </FormGroup>\n          <FormGroup fieldId={asId('start')}>\n            <Checkbox\n              label=\"Start virtual machine on clone\"\n              id={asId('start')}\n              isChecked={startVM}\n              onChange={setStartVM}\n              className=\"kubevirt-clone-vm-modal__start_vm_checkbox\"\n            />\n          </FormGroup>\n          <FormGroup label=\"Configuration\" fieldId={asId('configuration-summary')}>\n            <ConfigurationSummary\n              id={asId('configuration-summary')}\n              vm={vm}\n              persistentVolumeClaims={persistentVolumeClaimsData}\n              dataVolumes={dataVolumesData}\n            />\n          </FormGroup>\n        </Form>\n      </ModalBody>\n      <ModalFooter\n        id=\"clone-vm\"\n        errorMessage={errorMessage}\n        isSimpleError={!!vmRunningWarning && !errorMessage}\n        warningMessage={vmRunningWarning}\n        inProgress={inProgress}\n        isDisabled={!isValid || inProgress}\n        submitButtonText=\"Clone Virtual Machine\"\n        onSubmit={submit}\n        onCancel={onCancelClick}\n      />\n    </div>\n  );\n});\n\nexport type CloneVMModalProps = CloneVMModalFirehoseProps &\n  HandlePromiseProps & {\n    namespace: string;\n    onNamespaceChanged: (namespace: string) => void;\n    namespaces?: FirehoseResult<K8sResourceKind[]>;\n    virtualMachines?: FirehoseResult<VMKind[]>;\n    dataVolumes?: FirehoseResult<K8sResourceKind[]>;\n    persistentVolumeClaims?: FirehoseResult<K8sResourceKind[]>;\n    requestsDataVolumes: boolean;\n    requestsPVCs: boolean;\n  };\n\nconst CloneVMModalFirehose: React.FC<CloneVMModalFirehoseProps> = (props) => {\n  const { vm, useProjects } = props;\n  const vmNamespace = getNamespace(vm);\n  const [namespace, setNamespace] = React.useState(vmNamespace);\n\n  const requestsDataVolumes = !!getVolumes(vm).find(getVolumeDataVolumeName);\n  const requestsPVCs = !!getVolumes(vm).find(getVolumePersistentVolumeClaimName);\n\n  const resources: FirehoseResource[] = [\n    {\n      kind: (useProjects ? ProjectModel : NamespaceModel).kind,\n      isList: true,\n      prop: 'namespaces',\n    },\n    {\n      kind: VirtualMachineModel.kind,\n      namespace,\n      isList: true,\n      prop: 'virtualMachines',\n    },\n  ];\n\n  if (requestsPVCs) {\n    resources.push({\n      kind: PersistentVolumeClaimModel.kind,\n      namespace: vmNamespace,\n      isList: true,\n      prop: 'persistentVolumeClaims',\n    });\n  }\n\n  if (requestsDataVolumes) {\n    resources.push({\n      kind: DataVolumeModel.kind,\n      namespace: vmNamespace,\n      isList: true,\n      prop: 'dataVolumes',\n    });\n  }\n\n  return (\n    <Firehose resources={resources}>\n      <CloneVMModal\n        {...props}\n        namespace={namespace}\n        onNamespaceChanged={(n) => setNamespace(n)}\n        requestsDataVolumes={requestsDataVolumes}\n        requestsPVCs={requestsPVCs}\n      />\n    </Firehose>\n  );\n};\n\ntype CloneVMModalFirehoseProps = ModalComponentProps & {\n  vm: VMKind;\n  useProjects: boolean;\n};\n\nconst cloneVMModalStateToProps = ({ k8s }) => {\n  const useProjects = k8s.hasIn(['RESOURCES', 'models', ProjectModel.kind]);\n  return {\n    useProjects,\n  };\n};\n\nconst CloneVMModalConnected = connect(cloneVMModalStateToProps)(CloneVMModalFirehose);\n\nexport const cloneVMModal = createModalLauncher(CloneVMModalConnected);\n"]}]}