{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/pipeline-details/PipelineVisualizationTask.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/pipeline-details/PipelineVisualizationTask.tsx","mtime":1615298458620},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport * as cx from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Tooltip } from '@patternfly/react-core';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { Firehose, resourcePathFromModel } from '@console/internal/components/utils';\nimport { runStatus } from '../../../../utils/pipeline-augment';\nimport { PipelineRunModel, TaskModel, ClusterTaskModel } from '../../../../../../../../frontend/public/models/index';\nimport { ColoredStatusIcon } from './StatusIcon';\nimport { PipelineVisualizationStepList } from './PipelineVisualizationStepList';\nimport TaskComponentTaskStatus from './TaskComponentTaskStatus';\nimport { createStepStatus } from './pipeline-step-utils';\nimport './PipelineVisualizationTask.scss';\nexport const PipelineVisualizationTask = ({ pipelineRunName, task, namespace, pipelineRunStatus, disableTooltip, selected, }) => {\n    const taskStatus = task.status || {\n        duration: '',\n        reason: runStatus.Idle,\n    };\n    if (pipelineRunStatus === runStatus.Failed || pipelineRunStatus === runStatus.Cancelled) {\n        if (task.status &&\n            task.status.reason !== runStatus.Succeeded &&\n            task.status.reason !== runStatus.Failed) {\n            taskStatus.reason = runStatus.Cancelled;\n        }\n    }\n    const taskComponent = (React.createElement(TaskComponent, { pipelineRunName: pipelineRunName, name: task.name || '', namespace: namespace, status: taskStatus, isPipelineRun: !!pipelineRunStatus, disableTooltip: disableTooltip, selected: selected }));\n    if (disableTooltip) {\n        return taskComponent;\n    }\n    let resources;\n    if (task.taskRef.kind === ClusterTaskModel.kind) {\n        resources = [\n            {\n                kind: referenceForModel(ClusterTaskModel),\n                name: task.taskRef.name,\n                prop: 'task',\n            },\n        ];\n    }\n    else {\n        resources = [\n            {\n                kind: referenceForModel(TaskModel),\n                name: task.taskRef.name,\n                namespace,\n                prop: 'task',\n            },\n        ];\n    }\n    return React.createElement(Firehose, { resources: resources }, taskComponent);\n};\nconst TaskComponent = ({ pipelineRunName, namespace, task, status, name, isPipelineRun, disableTooltip, selected, }) => {\n    const stepList = _.get(task, ['data', 'spec', 'steps'], _.get(status, ['steps'], []));\n    const stepStatusList = stepList.map((step) => createStepStatus(step, status));\n    const showStatusState = isPipelineRun && !!status && !!status.reason;\n    const visualName = name || _.get(task, ['metadata', 'name'], '');\n    const path = pipelineRunName\n        ? `${resourcePathFromModel(PipelineRunModel, pipelineRunName, namespace)}/logs/${name}`\n        : undefined;\n    let taskPill = (React.createElement(\"div\", { className: cx('odc-pipeline-vis-task__content', { 'is-selected': selected }) },\n        React.createElement(\"div\", { className: cx('odc-pipeline-vis-task__title-wrapper', {\n                'is-text-center': !isPipelineRun,\n            }) },\n            React.createElement(\"div\", { className: \"odc-pipeline-vis-task__title\" }, visualName),\n            showStatusState && React.createElement(TaskComponentTaskStatus, { steps: stepStatusList })),\n        isPipelineRun && (React.createElement(\"div\", { className: \"odc-pipeline-vis-task__status\" }, showStatusState && React.createElement(ColoredStatusIcon, { status: status.reason, height: 18, width: 18 })))));\n    if (!disableTooltip) {\n        taskPill = (React.createElement(Tooltip, { position: \"bottom\", enableFlip: false, content: React.createElement(PipelineVisualizationStepList, { isSpecOverview: !isPipelineRun, taskName: visualName, steps: stepStatusList }) }, taskPill));\n    }\n    const visTask = (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: \"odc-pipeline-vis-task__connector\" }),\n        taskPill));\n    return (React.createElement(\"div\", { className: \"odc-pipeline-vis-task\" }, path ? React.createElement(Link, { to: path }, visTask) : visTask));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/pipeline-details/PipelineVisualizationTask.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/pipeline-details/PipelineVisualizationTask.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport * as cx from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { Tooltip } from '@patternfly/react-core';\nimport { K8sResourceKind, referenceForModel } from '@console/internal/module/k8s';\nimport { Firehose, resourcePathFromModel } from '@console/internal/components/utils';\nimport { runStatus } from '../../../../utils/pipeline-augment';\nimport { PipelineRunModel, TaskModel, ClusterTaskModel } from '../../../../../../../../frontend/public/models/index';\nimport { ColoredStatusIcon } from './StatusIcon';\nimport { PipelineVisualizationStepList } from './PipelineVisualizationStepList';\nimport TaskComponentTaskStatus from './TaskComponentTaskStatus';\nimport { createStepStatus, StepStatus, TaskStatus } from './pipeline-step-utils';\n\nimport './PipelineVisualizationTask.scss';\n\ninterface TaskProps {\n  pipelineRunName?: string;\n  name: string;\n  loaded?: boolean;\n  task?: {\n    data: K8sResourceKind;\n  };\n  status?: TaskStatus;\n  namespace: string;\n  isPipelineRun: boolean;\n  disableTooltip?: boolean;\n  selected?: boolean;\n}\n\ninterface PipelineVisualizationTaskProp {\n  pipelineRunName?: string;\n  namespace: string;\n  task: {\n    name?: string;\n    taskRef: {\n      name: string;\n      kind?: string;\n    };\n    status?: TaskStatus;\n  };\n  taskRun?: string;\n  pipelineRunStatus?: string;\n  disableTooltip?: boolean;\n  selected?: boolean;\n}\n\nexport const PipelineVisualizationTask: React.FC<PipelineVisualizationTaskProp> = ({\n  pipelineRunName,\n  task,\n  namespace,\n  pipelineRunStatus,\n  disableTooltip,\n  selected,\n}) => {\n  const taskStatus = task.status || {\n    duration: '',\n    reason: runStatus.Idle,\n  };\n  if (pipelineRunStatus === runStatus.Failed || pipelineRunStatus === runStatus.Cancelled) {\n    if (\n      task.status &&\n      task.status.reason !== runStatus.Succeeded &&\n      task.status.reason !== runStatus.Failed\n    ) {\n      taskStatus.reason = runStatus.Cancelled;\n    }\n  }\n\n  const taskComponent = (\n    <TaskComponent\n      pipelineRunName={pipelineRunName}\n      name={task.name || ''}\n      namespace={namespace}\n      status={taskStatus}\n      isPipelineRun={!!pipelineRunStatus}\n      disableTooltip={disableTooltip}\n      selected={selected}\n    />\n  );\n\n  if (disableTooltip) {\n    return taskComponent;\n  }\n\n  let resources;\n  if (task.taskRef.kind === ClusterTaskModel.kind) {\n    resources = [\n      {\n        kind: referenceForModel(ClusterTaskModel),\n        name: task.taskRef.name,\n        prop: 'task',\n      },\n    ];\n  } else {\n    resources = [\n      {\n        kind: referenceForModel(TaskModel),\n        name: task.taskRef.name,\n        namespace,\n        prop: 'task',\n      },\n    ];\n  }\n  return <Firehose resources={resources}>{taskComponent}</Firehose>;\n};\nconst TaskComponent: React.FC<TaskProps> = ({\n  pipelineRunName,\n  namespace,\n  task,\n  status,\n  name,\n  isPipelineRun,\n  disableTooltip,\n  selected,\n}) => {\n  const stepList = _.get(task, ['data', 'spec', 'steps'], _.get(status, ['steps'], []));\n  const stepStatusList: StepStatus[] = stepList.map((step) => createStepStatus(step, status));\n  const showStatusState: boolean = isPipelineRun && !!status && !!status.reason;\n  const visualName = name || _.get(task, ['metadata', 'name'], '');\n  const path = pipelineRunName\n    ? `${resourcePathFromModel(PipelineRunModel, pipelineRunName, namespace)}/logs/${name}`\n    : undefined;\n\n  let taskPill = (\n    <div className={cx('odc-pipeline-vis-task__content', { 'is-selected': selected })}>\n      <div\n        className={cx('odc-pipeline-vis-task__title-wrapper', {\n          'is-text-center': !isPipelineRun,\n        })}\n      >\n        <div className=\"odc-pipeline-vis-task__title\">{visualName}</div>\n        {showStatusState && <TaskComponentTaskStatus steps={stepStatusList} />}\n      </div>\n      {isPipelineRun && (\n        <div className=\"odc-pipeline-vis-task__status\">\n          {showStatusState && <ColoredStatusIcon status={status.reason} height={18} width={18} />}\n        </div>\n      )}\n    </div>\n  );\n  if (!disableTooltip) {\n    taskPill = (\n      <Tooltip\n        position=\"bottom\"\n        enableFlip={false}\n        content={\n          <PipelineVisualizationStepList\n            isSpecOverview={!isPipelineRun}\n            taskName={visualName}\n            steps={stepStatusList}\n          />\n        }\n      >\n        {taskPill}\n      </Tooltip>\n    );\n  }\n\n  const visTask = (\n    <>\n      <div className=\"odc-pipeline-vis-task__connector\" />\n      {taskPill}\n    </>\n  );\n  return (\n    <div className=\"odc-pipeline-vis-task\">{path ? <Link to={path}>{visTask}</Link> : visTask}</div>\n  );\n};\n"]}]}