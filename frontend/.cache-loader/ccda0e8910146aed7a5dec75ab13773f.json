{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-builder/utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-builder/utils.ts","mtime":1615298458620},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { history, resourcePathFromModel } from '@console/internal/components/utils';\nimport { apiVersionForModel, referenceForModel } from '@console/internal/module/k8s';\nimport { ClusterTaskModel, PipelineModel } from '../../../models';\nimport { getTaskParameters } from '../resource-utils';\nimport { TASK_ERROR_STRINGS, TaskErrorType } from './const';\nexport const getErrorMessage = (errorTypes, errorMap) => (taskName) => {\n    if (!taskName) {\n        return TASK_ERROR_STRINGS[TaskErrorType.MISSING_NAME];\n    }\n    const errorList = errorMap === null || errorMap === void 0 ? void 0 : errorMap[taskName];\n    if (!errorList)\n        return null;\n    const hasRequestedError = errorList.filter((error) => errorTypes.includes(error));\n    return hasRequestedError.length > 0 ? TASK_ERROR_STRINGS[hasRequestedError[0]] : null;\n};\nexport const taskParamIsRequired = (param) => {\n    return !('default' in param);\n};\nexport const convertResourceToTask = (resource, runAfter) => {\n    return {\n        name: resource.metadata.name,\n        runAfter,\n        taskRef: {\n            kind: resource.kind === ClusterTaskModel.kind ? ClusterTaskModel.kind : undefined,\n            name: resource.metadata.name,\n        },\n        params: getTaskParameters(resource).map((param) => ({\n            name: param.name,\n            value: param.default,\n        })),\n    };\n};\nexport const getPipelineURL = (namespace) => {\n    return `/k8s/ns/${namespace}/${referenceForModel(PipelineModel)}`;\n};\nconst removeListRunAfters = (task, listIds) => {\n    if ((task === null || task === void 0 ? void 0 : task.runAfter) && listIds.length > 0) {\n        // Trim out any runAfters pointing at list nodes\n        const runAfter = (task.runAfter || []).filter((runAfterName) => !listIds.includes(runAfterName));\n        return Object.assign(Object.assign({}, task), { runAfter });\n    }\n    return task;\n};\nconst removeEmptyDefaultParams = (task) => {\n    var _a;\n    if (((_a = task.params) === null || _a === void 0 ? void 0 : _a.length) > 0) {\n        // Since we can submit, this param has a default; check for empty values and remove\n        return Object.assign(Object.assign({}, task), { params: task.params.filter((param) => !!param.value) });\n    }\n    return task;\n};\nexport const convertBuilderFormToPipeline = (formValues, namespace, existingPipeline) => {\n    const { name, resources, params, tasks, listTasks } = formValues;\n    const listIds = listTasks.map((listTask) => listTask.name);\n    return Object.assign(Object.assign({}, existingPipeline), { apiVersion: apiVersionForModel(PipelineModel), kind: PipelineModel.kind, metadata: Object.assign(Object.assign({}, existingPipeline === null || existingPipeline === void 0 ? void 0 : existingPipeline.metadata), { name,\n            namespace }), spec: Object.assign(Object.assign({}, existingPipeline === null || existingPipeline === void 0 ? void 0 : existingPipeline.spec), { params,\n            resources, tasks: tasks.map((task) => removeEmptyDefaultParams(removeListRunAfters(task, listIds))) }) });\n};\nexport const convertPipelineToBuilderForm = (pipeline) => {\n    if (!pipeline)\n        return null;\n    const { metadata: { name }, spec: { params = [], resources = [], tasks = [] }, } = pipeline;\n    return {\n        name,\n        params,\n        resources,\n        tasks,\n        listTasks: [],\n    };\n};\nexport const goToYAML = (existingPipeline, namespace) => {\n    var _a, _b;\n    history.push(existingPipeline\n        ? `${resourcePathFromModel(PipelineModel, (_a = existingPipeline === null || existingPipeline === void 0 ? void 0 : existingPipeline.metadata) === null || _a === void 0 ? void 0 : _a.name, (_b = existingPipeline === null || existingPipeline === void 0 ? void 0 : existingPipeline.metadata) === null || _b === void 0 ? void 0 : _b.namespace)}/yaml`\n        : `${getPipelineURL(namespace)}/~new`);\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-builder/utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-builder/utils.ts"],"names":[],"mappings":"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","sourcesContent":["import { history, resourcePathFromModel } from '@console/internal/components/utils';\nimport { apiVersionForModel, referenceForModel } from '@console/internal/module/k8s';\nimport { ClusterTaskModel, PipelineModel } from '../../../models';\nimport {\n  Pipeline,\n  PipelineResourceTask,\n  PipelineResourceTaskParam,\n  PipelineTask,\n} from '../../../utils/pipeline-augment';\nimport { getTaskParameters } from '../resource-utils';\nimport { TASK_ERROR_STRINGS, TaskErrorType } from './const';\nimport { PipelineBuilderFormikValues, PipelineBuilderFormValues, TaskErrorMap } from './types';\n\nexport const getErrorMessage = (errorTypes: TaskErrorType[], errorMap: TaskErrorMap) => (\n  taskName: string,\n): string => {\n  if (!taskName) {\n    return TASK_ERROR_STRINGS[TaskErrorType.MISSING_NAME];\n  }\n\n  const errorList: TaskErrorType[] | undefined = errorMap?.[taskName];\n  if (!errorList) return null;\n\n  const hasRequestedError = errorList.filter((error) => errorTypes.includes(error));\n  return hasRequestedError.length > 0 ? TASK_ERROR_STRINGS[hasRequestedError[0]] : null;\n};\n\nexport const taskParamIsRequired = (param: PipelineResourceTaskParam): boolean => {\n  return !('default' in param);\n};\n\nexport const convertResourceToTask = (\n  resource: PipelineResourceTask,\n  runAfter?: string[],\n): PipelineTask => {\n  return {\n    name: resource.metadata.name,\n    runAfter,\n    taskRef: {\n      kind: resource.kind === ClusterTaskModel.kind ? ClusterTaskModel.kind : undefined,\n      name: resource.metadata.name,\n    },\n    params: getTaskParameters(resource).map((param) => ({\n      name: param.name,\n      value: param.default,\n    })),\n  };\n};\n\nexport const getPipelineURL = (namespace: string) => {\n  return `/k8s/ns/${namespace}/${referenceForModel(PipelineModel)}`;\n};\n\nconst removeListRunAfters = (task: PipelineTask, listIds: string[]): PipelineTask => {\n  if (task?.runAfter && listIds.length > 0) {\n    // Trim out any runAfters pointing at list nodes\n    const runAfter = (task.runAfter || []).filter(\n      (runAfterName) => !listIds.includes(runAfterName),\n    );\n\n    return {\n      ...task,\n      runAfter,\n    };\n  }\n\n  return task;\n};\n\nconst removeEmptyDefaultParams = (task: PipelineTask): PipelineTask => {\n  if (task.params?.length > 0) {\n    // Since we can submit, this param has a default; check for empty values and remove\n    return {\n      ...task,\n      params: task.params.filter((param) => !!param.value),\n    };\n  }\n\n  return task;\n};\n\nexport const convertBuilderFormToPipeline = (\n  formValues: PipelineBuilderFormikValues,\n  namespace: string,\n  existingPipeline?: Pipeline,\n): Pipeline => {\n  const { name, resources, params, tasks, listTasks } = formValues;\n  const listIds = listTasks.map((listTask) => listTask.name);\n\n  return {\n    ...existingPipeline,\n    apiVersion: apiVersionForModel(PipelineModel),\n    kind: PipelineModel.kind,\n    metadata: {\n      ...existingPipeline?.metadata,\n      name,\n      namespace,\n    },\n    spec: {\n      ...existingPipeline?.spec,\n      params,\n      resources,\n      tasks: tasks.map((task) => removeEmptyDefaultParams(removeListRunAfters(task, listIds))),\n    },\n  };\n};\n\nexport const convertPipelineToBuilderForm = (pipeline: Pipeline): PipelineBuilderFormValues => {\n  if (!pipeline) return null;\n\n  const {\n    metadata: { name },\n    spec: { params = [], resources = [], tasks = [] },\n  } = pipeline;\n\n  return {\n    name,\n    params,\n    resources,\n    tasks,\n    listTasks: [],\n  };\n};\n\nexport const goToYAML = (existingPipeline?: Pipeline, namespace?: string) => {\n  history.push(\n    existingPipeline\n      ? `${resourcePathFromModel(\n          PipelineModel,\n          existingPipeline?.metadata?.name,\n          existingPipeline?.metadata?.namespace,\n        )}/yaml`\n      : `${getPipelineURL(namespace)}/~new`,\n  );\n};\n"]}]}