{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/sort.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/sort.ts","mtime":1616735742430},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { isCustomFlavor } from '../selectors/vm-like/flavor';\nconst FLAVOR_ORDER = {\n    tiny: 0,\n    small: 1,\n    medium: 2,\n    large: 3,\n};\nexport const flavorSort = (array = []) => array.sort((a, b) => {\n    if (isCustomFlavor(a)) {\n        return 1;\n    }\n    if (isCustomFlavor(b)) {\n        return -1;\n    }\n    const resolvedFlavorA = FLAVOR_ORDER[a];\n    const resolvedFlavorB = FLAVOR_ORDER[b];\n    if (resolvedFlavorA == null && resolvedFlavorB == null) {\n        return a.toLowerCase().localeCompare(b.toLowerCase());\n    }\n    if (resolvedFlavorA == null) {\n        return 1;\n    }\n    if (resolvedFlavorB == null) {\n        return -1;\n    }\n    return resolvedFlavorA - resolvedFlavorB;\n});\nexport const ignoreCaseSort = (array = [], byPath = undefined, byValueResolver = undefined) => {\n    const resolve = (v) => {\n        const result = _.isFunction(byValueResolver)\n            ? byValueResolver(v)\n            : byPath\n                ? _.get(v, byPath, '')\n                : v;\n        return result == null ? '' : result.toLowerCase();\n    };\n    return array.sort((a, b) => resolve(a).localeCompare(resolve(b)));\n};\nexport const splitVersion = (osID) => (osID || '')\n    .split(/\\D/)\n    .filter((x) => x)\n    .map((num) => parseInt(num, 10));\n/**\n *\n *\n * Compare the numbers between the two versions by the order of their appearance\n * eg in the OS name.\n *\n * For example:\n * version1: [10,2] for OS: 'Windows 10 R2',\n * version2: [10] for OS: 'Windows 10',\n * (return 1)\n *\n * version1: [9,10] for OS: 'ubuntu9.10',\n * version2: [10,4] for OS: 'ubuntu10.04',\n * (return -1)\n *\n * return 0 when equal.\n *\n */\nexport const compareVersions = (version1, version2) => {\n    if (!version1 && !version2) {\n        return 0;\n    }\n    const finalVersion1 = version1 || [];\n    const finalVersion2 = version2 || [];\n    const zipped = _.zip(finalVersion1, finalVersion2);\n    let idx = 0;\n    while (idx < zipped.length) {\n        /*\n          undefined values are equal to 0, eg:\n          14.0 == 14 -> zipped = [[14,14],[0,undefined]]\n          1.0.0 == 1 -> zipped = [[1,1],[0,undefined],[0,undefined]]\n        */\n        const ver1 = !zipped[idx][0] ? 0 : zipped[idx][0];\n        const ver2 = !zipped[idx][1] ? 0 : zipped[idx][1];\n        if (ver1 > ver2) {\n            return 1;\n        }\n        if (ver2 > ver1) {\n            return -1;\n        }\n        idx++;\n    }\n    return 0;\n};\nconst descSortOSes = (os1, os2) => {\n    const nameCMP = (os1.name || '').localeCompare(os2.name || '');\n    if (nameCMP !== 0) {\n        return nameCMP * -1;\n    }\n    return compareVersions(splitVersion(os1.id), splitVersion(os2.id)) * -1;\n};\nexport const removeOSDups = (osArr) => _.uniqBy(osArr.filter((x) => x).sort(descSortOSes), 'name');\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/sort.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/sort.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { OperatingSystemRecord } from '../types';\nimport { isCustomFlavor } from '../selectors/vm-like/flavor';\n\nconst FLAVOR_ORDER = {\n  tiny: 0,\n  small: 1,\n  medium: 2,\n  large: 3,\n};\n\nexport const flavorSort = (array: string[] = []) =>\n  array.sort((a, b) => {\n    if (isCustomFlavor(a)) {\n      return 1;\n    }\n    if (isCustomFlavor(b)) {\n      return -1;\n    }\n    const resolvedFlavorA = FLAVOR_ORDER[a];\n    const resolvedFlavorB = FLAVOR_ORDER[b];\n    if (resolvedFlavorA == null && resolvedFlavorB == null) {\n      return a.toLowerCase().localeCompare(b.toLowerCase());\n    }\n    if (resolvedFlavorA == null) {\n      return 1;\n    }\n    if (resolvedFlavorB == null) {\n      return -1;\n    }\n    return resolvedFlavorA - resolvedFlavorB;\n  });\n\nexport const ignoreCaseSort = <T>(\n  array: T[] = [],\n  byPath: string[] = undefined,\n  byValueResolver: (item: T) => string = undefined,\n) => {\n  const resolve = (v) => {\n    const result = _.isFunction(byValueResolver)\n      ? byValueResolver(v)\n      : byPath\n      ? _.get(v, byPath, '')\n      : v;\n\n    return result == null ? '' : result.toLowerCase();\n  };\n  return array.sort((a, b) => resolve(a).localeCompare(resolve(b)));\n};\n\nexport const splitVersion = (osID: string): number[] =>\n  (osID || '')\n    .split(/\\D/)\n    .filter((x) => x)\n    .map((num) => parseInt(num, 10));\n\n/**\n *\n *\n * Compare the numbers between the two versions by the order of their appearance\n * eg in the OS name.\n *\n * For example:\n * version1: [10,2] for OS: 'Windows 10 R2',\n * version2: [10] for OS: 'Windows 10',\n * (return 1)\n *\n * version1: [9,10] for OS: 'ubuntu9.10',\n * version2: [10,4] for OS: 'ubuntu10.04',\n * (return -1)\n *\n * return 0 when equal.\n *\n */\nexport const compareVersions = (version1: number[], version2: number[]): number => {\n  if (!version1 && !version2) {\n    return 0;\n  }\n\n  const finalVersion1 = version1 || [];\n  const finalVersion2 = version2 || [];\n\n  const zipped = _.zip(finalVersion1, finalVersion2);\n  let idx = 0;\n  while (idx < zipped.length) {\n    /*\n      undefined values are equal to 0, eg:\n      14.0 == 14 -> zipped = [[14,14],[0,undefined]]\n      1.0.0 == 1 -> zipped = [[1,1],[0,undefined],[0,undefined]]\n    */\n    const ver1 = !zipped[idx][0] ? 0 : zipped[idx][0];\n    const ver2 = !zipped[idx][1] ? 0 : zipped[idx][1];\n\n    if (ver1 > ver2) {\n      return 1;\n    }\n\n    if (ver2 > ver1) {\n      return -1;\n    }\n\n    idx++;\n  }\n\n  return 0;\n};\n\nconst descSortOSes = (os1: OperatingSystemRecord, os2: OperatingSystemRecord): number => {\n  const nameCMP = (os1.name || '').localeCompare(os2.name || '');\n  if (nameCMP !== 0) {\n    return nameCMP * -1;\n  }\n\n  return compareVersions(splitVersion(os1.id), splitVersion(os2.id)) * -1;\n};\n\nexport const removeOSDups = (osArr: OperatingSystemRecord[]): OperatingSystemRecord[] =>\n  _.uniqBy(osArr.filter((x) => x).sort(descSortOSes), 'name');\n"]}]}