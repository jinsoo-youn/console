{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/filter-toolbar.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/filter-toolbar.tsx","mtime":1615701814900},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { withRouter } from 'react-router';\nimport { connect } from 'react-redux';\nimport { Checkbox, DataToolbar, DataToolbarContent, DataToolbarFilter, DataToolbarItem, DropdownItem, Dropdown, DropdownToggle, DropdownGroup, Badge } from '@patternfly/react-core';\nimport { CaretDownIcon, FilterIcon } from '@patternfly/react-icons';\nimport { Dropdown as DropdownInternal } from '@console/internal/components/utils';\nimport { setQueryArgument, removeQueryArgument } from './utils';\nimport { filterList } from '../actions/k8s';\nimport AutocompleteInput from './autocomplete';\nimport { storagePrefix } from './row-filter';\nimport { useTranslation } from 'react-i18next';\n/**\n * Housing both the row filter and name/label filter in the same file.\n */\nvar FilterType;\n(function (FilterType) {\n    FilterType[\"NAME\"] = \"Name\";\n    FilterType[\"LABEL\"] = \"Label\";\n})(FilterType || (FilterType = {}));\nconst filterTypeMap = Object.freeze({\n    [FilterType.LABEL]: 'labels',\n    [FilterType.NAME]: 'name',\n});\nconst getDropdownItems = (rowFilters, selectedItems, data, props) => rowFilters.map(grp => {\n    const items = grp.itemsGenerator ? grp.itemsGenerator(props, props.kind) : grp.items;\n    return (React.createElement(DropdownGroup, { key: grp.filterGroupName, label: grp.filterGroupName, className: \"co-filter-dropdown-group\" }, _.map(items, item => {\n        var _a, _b;\n        return (React.createElement(DropdownItem, { \"data-test-row-filter\": item.id, key: item.id, id: item.id, className: \"co-filter-dropdown__item\", listItemClassName: \"co-filter-dropdown__list-item\" },\n            React.createElement(\"div\", { className: \"co-filter-dropdown-item\" },\n                React.createElement(\"span\", { className: \"co-filter-dropdown-item__checkbox\" },\n                    React.createElement(Checkbox, { isChecked: selectedItems.includes(item.id), id: `${item.id}-checkbox` })),\n                React.createElement(\"span\", { className: \"co-filter-dropdown-item__name\" }, item.title),\n                React.createElement(Badge, { key: item.id, isRead: true }, (_b = (_a = _.countBy(data, grp.reducer)) === null || _a === void 0 ? void 0 : _a[item.id]) !== null && _b !== void 0 ? _b : '0'))));\n    })));\n});\nconst FilterToolbar_ = props => {\n    const { rowFilters = [], data, hideToolbar, hideLabelFilter, location, textFilter = filterTypeMap[FilterType.NAME] } = props;\n    const [inputText, setInputText] = React.useState('');\n    const [filterType, setFilterType] = React.useState(FilterType.NAME);\n    const [isOpen, setOpen] = React.useState(false);\n    // (rowFilters) => {'rowFilterTypeA': ['staA', 'staB'], 'rowFilterTypeB': ['stbA'] }\n    const filters = rowFilters.reduce((acc, curr) => {\n        const rowItems = curr.itemsGenerator ? curr.itemsGenerator(props, props === null || props === void 0 ? void 0 : props.kinds) : curr.items;\n        const items = _.map(rowItems, 'id');\n        acc[curr.filterGroupName] = items;\n        return acc;\n    }, {});\n    // {id: 'a' , title: 'A'} => filterNameMap['a'] = A\n    const filtersNameMap = rowFilters.reduce((acc, curr) => {\n        const rowItems = curr.itemsGenerator ? curr.itemsGenerator(props, props === null || props === void 0 ? void 0 : props.kinds) : curr.items;\n        const items = rowItems.reduce((itemAcc, itemCurr) => {\n            itemAcc[itemCurr.id] = itemCurr.title;\n            return itemAcc;\n        }, {});\n        return Object.assign(Object.assign({}, acc), items);\n    }, {});\n    // (storagePrefix, rowFilters) => { 'rowFilterTypeA' = 'storagePrefix-filterTypeA' ...}\n    const filterKeys = rowFilters.reduce((acc, curr) => {\n        const str = `${storagePrefix}${curr.type}`;\n        acc[curr.filterGroupName] = str;\n        return acc;\n    }, {});\n    // (url) => {nameFilter, labelFilters, rowFilters}\n    const { name: nameFilter, labels: labelFilters, rowFiltersFromURL: selectedRowFilters } = (() => {\n        const rowFiltersFromURL = [];\n        const params = new URLSearchParams(location.search);\n        const q = params.get('label');\n        const name = params.get(textFilter);\n        _.map(filterKeys, f => {\n            const vals = params.get(f);\n            if (vals) {\n                rowFiltersFromURL.push(...vals.split(','));\n            }\n        });\n        const labels = q ? q.split(',') : [];\n        return { name, labels, rowFiltersFromURL };\n    })();\n    /* Logic for Name and Label Filter */\n    const applyFilter = (input, type) => {\n        const filter = type === FilterType.NAME ? textFilter : filterTypeMap[FilterType.LABEL];\n        const value = type === FilterType.NAME ? input : { all: input };\n        props.reduxIDs.forEach(id => props.filterList(id, filter, value));\n    };\n    const updateLabelFilter = (filterValues) => {\n        if (filterValues.length > 0) {\n            setQueryArgument('label', filterValues.join(','));\n        }\n        else {\n            removeQueryArgument('label');\n        }\n        setInputText('');\n        applyFilter(filterValues, FilterType.LABEL);\n    };\n    const updateNameFilter = (filterValue) => {\n        if (!_.isEmpty(filterValue)) {\n            setQueryArgument(textFilter, filterValue);\n        }\n        else {\n            removeQueryArgument(textFilter);\n        }\n        setInputText(filterValue);\n        applyFilter(filterValue, FilterType.NAME);\n    };\n    const updateSearchFilter = (value) => {\n        switch (filterType) {\n            case FilterType.NAME:\n                updateNameFilter(value);\n                break;\n            case FilterType.LABEL:\n                setInputText(value);\n                break;\n            default:\n                break;\n        }\n    };\n    /* Logic Related to Row Filters Ex:(Status, Type) */\n    const applyRowFilter = (selected) => {\n        rowFilters.forEach(filter => {\n            const rowItems = filter.itemsGenerator ? filter.itemsGenerator(props, props === null || props === void 0 ? void 0 : props.kinds) : filter.items;\n            const all = _.map(rowItems, 'id');\n            const recognized = _.intersection(selected, all);\n            (props.reduxIDs || []).forEach(id => props.filterList(id, filter.type, { selected: new Set(recognized), all }));\n        });\n    };\n    const setQueryParameters = (selected) => {\n        if (!_.isEmpty(selectedRowFilters) || !_.isEmpty(selected)) {\n            _.forIn(filters, (value, key) => {\n                const recognized = _.filter(selected, item => value.includes(item));\n                if (recognized.length > 0) {\n                    setQueryArgument(filterKeys[key], recognized.join(','));\n                }\n                else {\n                    removeQueryArgument(filterKeys[key]);\n                }\n            });\n        }\n    };\n    const updateRowFilterSelected = (id) => {\n        const selectedNew = _.xor(selectedRowFilters, id);\n        applyRowFilter(selectedNew);\n        setQueryParameters(selectedNew);\n        setOpen(false);\n    };\n    const clearAllRowFilter = (f) => {\n        updateRowFilterSelected(_.intersection(filters[f], selectedRowFilters));\n    };\n    const onRowFilterSelect = event => {\n        var _a;\n        event.preventDefault();\n        updateRowFilterSelected([(_a = event === null || event === void 0 ? void 0 : event.target) === null || _a === void 0 ? void 0 : _a.id]);\n    };\n    const clearAll = () => {\n        updateRowFilterSelected(selectedRowFilters);\n        updateNameFilter('');\n        updateLabelFilter([]);\n    };\n    // Initial URL parsing\n    React.useEffect(() => {\n        !_.isEmpty(labelFilters) && applyFilter(labelFilters, FilterType.LABEL);\n        !_.isEmpty(nameFilter) && applyFilter(nameFilter, FilterType.NAME);\n        !_.isEmpty(selectedRowFilters) && applyRowFilter(selectedRowFilters);\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, []);\n    const switchFilter = type => {\n        setFilterType(type);\n        setInputText(nameFilter && type === FilterType.NAME ? nameFilter : '');\n    };\n    const dropdownItems = getDropdownItems(rowFilters, selectedRowFilters, data, props);\n    const { t } = useTranslation();\n    const searchFilterTitle = {\n        [FilterType.LABEL]: t('COMMON:MSG_COMMON_SEARCH_FILTER_2'),\n        [FilterType.NAME]: t('COMMON:MSG_COMMON_SEARCH_FILTER_1'),\n    };\n    return (!hideToolbar && (React.createElement(DataToolbar, { id: \"filter-toolbar\", clearAllFilters: clearAll, clearFiltersButtonText: t('COMMON:MSG_COMMON_FILTER_11') },\n        React.createElement(DataToolbarContent, null,\n            rowFilters.length > 0 && (React.createElement(DataToolbarItem, null, _.reduce(Object.keys(filters), (acc, key) => (React.createElement(DataToolbarFilter, { key: key, chips: _.intersection(selectedRowFilters, filters[key]).map(item => {\n                    return { key: item, node: filtersNameMap[item] };\n                }), deleteChip: (filter, chip) => updateRowFilterSelected([chip.key]), categoryName: key, deleteChipGroup: () => clearAllRowFilter(key) }, acc)), React.createElement(Dropdown, { dropdownItems: dropdownItems, onSelect: onRowFilterSelect, isOpen: isOpen, toggle: React.createElement(DropdownToggle, { \"data-test-id\": \"filter-dropdown-toggle\", onToggle: () => setOpen(!isOpen), iconComponent: CaretDownIcon },\n                    React.createElement(FilterIcon, { className: \"span--icon__right-margin\" }),\n                    t('COMMON:MSG_COMMON_FILTER_7')) })))),\n            React.createElement(DataToolbarItem, { className: \"co-filter-search--full-width\" },\n                React.createElement(DataToolbarFilter, { deleteChipGroup: () => updateLabelFilter([]), chips: !hideLabelFilter ? [...labelFilters] : [], deleteChip: (filter, chip) => updateLabelFilter(_.difference(labelFilters, [chip])), categoryName: t('COMMON:MSG_COMMON_SEARCH_FILTER_2') },\n                    React.createElement(DataToolbarFilter, { chips: (nameFilter === null || nameFilter === void 0 ? void 0 : nameFilter.length) ? [nameFilter] : [], deleteChip: () => updateNameFilter(''), categoryName: t('COMMON:MSG_COMMON_SEARCH_FILTER_1') },\n                        React.createElement(\"div\", { className: \"pf-c-input-group\" },\n                            !hideLabelFilter && React.createElement(DropdownInternal, { items: searchFilterTitle, onChange: switchFilter, selectedKey: filterType, title: searchFilterTitle[filterType] }),\n                            React.createElement(AutocompleteInput, { className: \"co-text-node\", onSuggestionSelect: selected => {\n                                    updateLabelFilter(_.uniq([...labelFilters, selected]));\n                                }, showSuggestions: FilterType.LABEL === filterType, textValue: inputText, setTextValue: updateSearchFilter, placeholder: FilterType.NAME === filterType ? t('COMMON:MSG_COMMON_SEARCH_PLACEHOLDER_1') : 'app=frontend', data: data })))))))));\n};\nexport const FilterToolbar = withRouter(connect(null, { filterList })(FilterToolbar_));\nFilterToolbar.displayName = 'FilterToolbar';\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/filter-toolbar.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/filter-toolbar.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { withRouter, RouteComponentProps } from 'react-router';\nimport { connect } from 'react-redux';\nimport { Checkbox, DataToolbar, DataToolbarContent, DataToolbarFilter, DataToolbarChip, DataToolbarItem, DropdownItem, Dropdown, DropdownToggle, DropdownGroup, Badge } from '@patternfly/react-core';\nimport { CaretDownIcon, FilterIcon } from '@patternfly/react-icons';\nimport { Dropdown as DropdownInternal } from '@console/internal/components/utils';\nimport { setQueryArgument, removeQueryArgument } from './utils';\nimport { filterList } from '../actions/k8s';\nimport AutocompleteInput from './autocomplete';\nimport { storagePrefix } from './row-filter';\nimport { useTranslation } from 'react-i18next';\n\n/**\n * Housing both the row filter and name/label filter in the same file.\n */\n\nenum FilterType {\n  NAME = 'Name',\n  LABEL = 'Label',\n}\n\nconst filterTypeMap = Object.freeze({\n  [FilterType.LABEL]: 'labels',\n  [FilterType.NAME]: 'name',\n});\n\ntype Filter = {\n  [key: string]: string[];\n};\n\ntype FilterKeys = {\n  [key: string]: string;\n};\n\nconst getDropdownItems = (rowFilters: RowFilter[], selectedItems, data, props) =>\n  rowFilters.map(grp => {\n    const items = grp.itemsGenerator ? grp.itemsGenerator(props, props.kind) : grp.items;\n    return (\n      <DropdownGroup key={grp.filterGroupName} label={grp.filterGroupName} className=\"co-filter-dropdown-group\">\n        {_.map(items, item => (\n          <DropdownItem data-test-row-filter={item.id} key={item.id} id={item.id} className=\"co-filter-dropdown__item\" listItemClassName=\"co-filter-dropdown__list-item\">\n            <div className=\"co-filter-dropdown-item\">\n              <span className=\"co-filter-dropdown-item__checkbox\">\n                <Checkbox isChecked={selectedItems.includes(item.id)} id={`${item.id}-checkbox`} />\n              </span>\n              <span className=\"co-filter-dropdown-item__name\">{item.title}</span>\n              <Badge key={item.id} isRead>\n                {_.countBy(data, grp.reducer)?.[item.id] ?? '0'}\n              </Badge>\n            </div>\n          </DropdownItem>\n        ))}\n      </DropdownGroup>\n    );\n  });\n\nconst FilterToolbar_: React.FC<FilterToolbarProps & RouteComponentProps> = props => {\n  const { rowFilters = [], data, hideToolbar, hideLabelFilter, location, textFilter = filterTypeMap[FilterType.NAME] } = props;\n\n  const [inputText, setInputText] = React.useState('');\n  const [filterType, setFilterType] = React.useState(FilterType.NAME);\n  const [isOpen, setOpen] = React.useState(false);\n\n  // (rowFilters) => {'rowFilterTypeA': ['staA', 'staB'], 'rowFilterTypeB': ['stbA'] }\n  const filters: Filter = rowFilters.reduce((acc, curr) => {\n    const rowItems = curr.itemsGenerator ? curr.itemsGenerator(props, props?.kinds) : curr.items;\n    const items = _.map(rowItems, 'id');\n    acc[curr.filterGroupName] = items;\n    return acc;\n  }, {});\n\n  // {id: 'a' , title: 'A'} => filterNameMap['a'] = A\n  const filtersNameMap: FilterKeys = rowFilters.reduce((acc, curr) => {\n    const rowItems = curr.itemsGenerator ? curr.itemsGenerator(props, props?.kinds) : curr.items;\n    const items = rowItems.reduce((itemAcc, itemCurr) => {\n      itemAcc[itemCurr.id] = itemCurr.title;\n      return itemAcc;\n    }, {});\n    return { ...acc, ...items };\n  }, {});\n\n  // (storagePrefix, rowFilters) => { 'rowFilterTypeA' = 'storagePrefix-filterTypeA' ...}\n  const filterKeys: FilterKeys = rowFilters.reduce((acc, curr) => {\n    const str = `${storagePrefix}${curr.type}`;\n    acc[curr.filterGroupName] = str;\n    return acc;\n  }, {});\n\n  // (url) => {nameFilter, labelFilters, rowFilters}\n  const { name: nameFilter, labels: labelFilters, rowFiltersFromURL: selectedRowFilters } = (() => {\n    const rowFiltersFromURL: string[] = [];\n    const params = new URLSearchParams(location.search);\n    const q = params.get('label');\n    const name = params.get(textFilter);\n    _.map(filterKeys, f => {\n      const vals = params.get(f);\n      if (vals) {\n        rowFiltersFromURL.push(...vals.split(','));\n      }\n    });\n    const labels = q ? q.split(',') : [];\n    return { name, labels, rowFiltersFromURL };\n  })();\n\n  /* Logic for Name and Label Filter */\n\n  const applyFilter = (input: string | string[], type: FilterType) => {\n    const filter = type === FilterType.NAME ? textFilter : filterTypeMap[FilterType.LABEL];\n    const value = type === FilterType.NAME ? input : { all: input };\n    props.reduxIDs.forEach(id => props.filterList(id, filter, value));\n  };\n\n  const updateLabelFilter = (filterValues: string[]) => {\n    if (filterValues.length > 0) {\n      setQueryArgument('label', filterValues.join(','));\n    } else {\n      removeQueryArgument('label');\n    }\n    setInputText('');\n    applyFilter(filterValues, FilterType.LABEL);\n  };\n\n  const updateNameFilter = (filterValue: string) => {\n    if (!_.isEmpty(filterValue)) {\n      setQueryArgument(textFilter, filterValue);\n    } else {\n      removeQueryArgument(textFilter);\n    }\n    setInputText(filterValue);\n    applyFilter(filterValue, FilterType.NAME);\n  };\n\n  const updateSearchFilter = (value: string) => {\n    switch (filterType) {\n      case FilterType.NAME:\n        updateNameFilter(value);\n        break;\n      case FilterType.LABEL:\n        setInputText(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  /* Logic Related to Row Filters Ex:(Status, Type) */\n\n  const applyRowFilter = (selected: string[]) => {\n    rowFilters.forEach(filter => {\n      const rowItems = filter.itemsGenerator ? filter.itemsGenerator(props, props?.kinds) : filter.items;\n      const all = _.map(rowItems, 'id');\n      const recognized = _.intersection(selected, all);\n      (props.reduxIDs || []).forEach(id => props.filterList(id, filter.type, { selected: new Set(recognized), all }));\n    });\n  };\n\n  const setQueryParameters = (selected: string[]) => {\n    if (!_.isEmpty(selectedRowFilters) || !_.isEmpty(selected)) {\n      _.forIn(filters, (value, key) => {\n        const recognized = _.filter(selected, item => value.includes(item));\n        if (recognized.length > 0) {\n          setQueryArgument(filterKeys[key], recognized.join(','));\n        } else {\n          removeQueryArgument(filterKeys[key]);\n        }\n      });\n    }\n  };\n\n  const updateRowFilterSelected = (id: string[]) => {\n    const selectedNew = _.xor(selectedRowFilters, id);\n    applyRowFilter(selectedNew);\n    setQueryParameters(selectedNew);\n    setOpen(false);\n  };\n\n  const clearAllRowFilter = (f: string) => {\n    updateRowFilterSelected(_.intersection(filters[f], selectedRowFilters));\n  };\n\n  const onRowFilterSelect = event => {\n    event.preventDefault();\n    updateRowFilterSelected([event?.target?.id]);\n  };\n\n  const clearAll = () => {\n    updateRowFilterSelected(selectedRowFilters);\n    updateNameFilter('');\n    updateLabelFilter([]);\n  };\n\n  // Initial URL parsing\n  React.useEffect(() => {\n    !_.isEmpty(labelFilters) && applyFilter(labelFilters, FilterType.LABEL);\n    !_.isEmpty(nameFilter) && applyFilter(nameFilter, FilterType.NAME);\n    !_.isEmpty(selectedRowFilters) && applyRowFilter(selectedRowFilters);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const switchFilter = type => {\n    setFilterType(type);\n    setInputText(nameFilter && type === FilterType.NAME ? nameFilter : '');\n  };\n\n  const dropdownItems = getDropdownItems(rowFilters, selectedRowFilters, data, props);\n\n  const { t } = useTranslation();\n  const searchFilterTitle = {\n    [FilterType.LABEL]: t('COMMON:MSG_COMMON_SEARCH_FILTER_2'),\n    [FilterType.NAME]: t('COMMON:MSG_COMMON_SEARCH_FILTER_1'),\n  };\n\n  return (\n    !hideToolbar && (\n      <DataToolbar id=\"filter-toolbar\" clearAllFilters={clearAll} clearFiltersButtonText={t('COMMON:MSG_COMMON_FILTER_11')}>\n        <DataToolbarContent>\n          {rowFilters.length > 0 && (\n            <DataToolbarItem>\n              {_.reduce(\n                Object.keys(filters),\n                (acc, key) => (\n                  <DataToolbarFilter\n                    key={key}\n                    chips={_.intersection(selectedRowFilters, filters[key]).map(item => {\n                      return { key: item, node: filtersNameMap[item] };\n                    })}\n                    deleteChip={(filter, chip: DataToolbarChip) => updateRowFilterSelected([chip.key])}\n                    categoryName={key}\n                    deleteChipGroup={() => clearAllRowFilter(key)}\n                  >\n                    {acc}\n                  </DataToolbarFilter>\n                ),\n                <Dropdown\n                  dropdownItems={dropdownItems}\n                  onSelect={onRowFilterSelect}\n                  isOpen={isOpen}\n                  toggle={\n                    <DropdownToggle data-test-id=\"filter-dropdown-toggle\" onToggle={() => setOpen(!isOpen)} iconComponent={CaretDownIcon}>\n                      <FilterIcon className=\"span--icon__right-margin\" />\n                      {t('COMMON:MSG_COMMON_FILTER_7')}\n                    </DropdownToggle>\n                  }\n                />,\n              )}\n            </DataToolbarItem>\n          )}\n          <DataToolbarItem className=\"co-filter-search--full-width\">\n            <DataToolbarFilter deleteChipGroup={() => updateLabelFilter([])} chips={!hideLabelFilter ? [...labelFilters] : []} deleteChip={(filter, chip: string) => updateLabelFilter(_.difference(labelFilters, [chip]))} categoryName={t('COMMON:MSG_COMMON_SEARCH_FILTER_2')}>\n              <DataToolbarFilter chips={nameFilter?.length ? [nameFilter] : []} deleteChip={() => updateNameFilter('')} categoryName={t('COMMON:MSG_COMMON_SEARCH_FILTER_1')}>\n                <div className=\"pf-c-input-group\">\n                  {!hideLabelFilter && <DropdownInternal items={searchFilterTitle} onChange={switchFilter} selectedKey={filterType} title={searchFilterTitle[filterType]} />}\n                  <AutocompleteInput\n                    className=\"co-text-node\"\n                    onSuggestionSelect={selected => {\n                      updateLabelFilter(_.uniq([...labelFilters, selected]));\n                    }}\n                    showSuggestions={FilterType.LABEL === filterType}\n                    textValue={inputText}\n                    setTextValue={updateSearchFilter}\n                    placeholder={FilterType.NAME === filterType ? t('COMMON:MSG_COMMON_SEARCH_PLACEHOLDER_1') : 'app=frontend'}\n                    data={data}\n                  />\n                </div>\n              </DataToolbarFilter>\n            </DataToolbarFilter>\n          </DataToolbarItem>\n        </DataToolbarContent>\n      </DataToolbar>\n    )\n  );\n};\n\ntype FilterToolbarProps = {\n  rowFilters?: RowFilter[];\n  data?: any;\n  reduxIDs?: string[];\n  filterList?: any;\n  textFilter?: string;\n  hideToolbar?: boolean;\n  hideLabelFilter?: boolean;\n  parseAutoComplete?: any;\n  kinds?: any;\n};\n\nexport type RowFilter = {\n  filterGroupName: string;\n  type: string;\n  items?: {\n    [key: string]: string;\n  }[];\n  itemsGenerator?: (...args) => { [key: string]: string }[];\n  reducer: (param) => React.ReactText;\n  filter?: any;\n};\n\nexport const FilterToolbar = withRouter(connect(null, { filterList })(FilterToolbar_));\nFilterToolbar.displayName = 'FilterToolbar';\n"]}]}