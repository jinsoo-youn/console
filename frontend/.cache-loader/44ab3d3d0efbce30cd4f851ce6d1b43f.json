{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/instantiate-template.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/instantiate-template.tsx","mtime":1615298458740},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport * as _ from 'lodash-es';\nimport { Helmet } from 'react-helmet';\nimport * as classNames from 'classnames';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { ANNOTATIONS } from '@console/shared';\nimport { getImageForIconClass, getTemplateIcon, normalizeIconClass, } from './catalog/catalog-item-icon';\nimport { ButtonBar, ExternalLink, Firehose, history, LoadingBox, LoadError, NsDropdown, resourcePathFromModel, } from './utils';\nimport { SecretModel, TemplateInstanceModel } from '../models';\nimport { k8sCreate, } from '../module/k8s';\nimport { getActivePerspective } from '../reducers/ui';\nconst TemplateResourceDetails = ({ template }) => {\n    const resources = _.uniq(_.compact(_.map(template.objects, 'kind'))).sort();\n    if (_.isEmpty(resources)) {\n        return null;\n    }\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"hr\", null),\n        React.createElement(\"p\", null, \"The following resources will be created:\"),\n        React.createElement(\"ul\", null, resources.map((kind) => (React.createElement(\"li\", { key: kind }, kind))))));\n};\nTemplateResourceDetails.displayName = 'TemplateResourceDetails';\nconst TemplateInfo = ({ template }) => {\n    const annotations = template.metadata.annotations || {};\n    const { description } = annotations;\n    const displayName = annotations[ANNOTATIONS.displayName] || template.metadata.name;\n    const iconClass = getTemplateIcon(template);\n    const imgURL = getImageForIconClass(iconClass);\n    const tags = (annotations.tags || '').split(/\\s*,\\s*/);\n    const documentationURL = annotations[ANNOTATIONS.documentationURL];\n    const supportURL = annotations[ANNOTATIONS.supportURL];\n    return (React.createElement(\"div\", { className: \"co-catalog-item-info\" },\n        React.createElement(\"div\", { className: \"co-catalog-item-details\" },\n            React.createElement(\"span\", { className: \"co-catalog-item-icon\" }, imgURL ? (React.createElement(\"img\", { className: \"co-catalog-item-icon__img co-catalog-item-icon__img--large\", src: imgURL })) : (React.createElement(\"span\", { className: classNames('co-catalog-item-icon__icon co-catalog-item-icon__icon--large', normalizeIconClass(iconClass)) }))),\n            React.createElement(\"div\", null,\n                React.createElement(\"h2\", { className: \"co-section-heading co-catalog-item-details__name\" }, displayName),\n                !_.isEmpty(tags) && (React.createElement(\"p\", { className: \"co-catalog-item-details__tags\" }, _.map(tags, (tag, i) => (React.createElement(\"span\", { className: \"co-catalog-item-details__tag\", key: i }, tag))))),\n                (documentationURL || supportURL) && (React.createElement(\"ul\", { className: \"list-inline\" },\n                    documentationURL && (React.createElement(\"li\", { className: \"co-break-word\" },\n                        React.createElement(ExternalLink, { href: documentationURL, text: \"View documentation\" }))),\n                    supportURL && (React.createElement(\"li\", { className: \"co-break-word\" },\n                        React.createElement(ExternalLink, { href: supportURL, text: \"Get support\" }))))))),\n        description && React.createElement(\"p\", { className: \"co-catalog-item-details__description\" }, description),\n        React.createElement(TemplateResourceDetails, { template: template })));\n};\nTemplateInfo.displayName = 'TemplateInfo';\nconst stateToProps = (state) => ({\n    models: state.k8s.getIn(['RESOURCES', 'models']),\n    activePerspective: getActivePerspective(state),\n});\nclass TemplateForm_ extends React.Component {\n    constructor(props) {\n        super(props);\n        this.getParameterValues = (props) => {\n            const templateParameters = props.obj.data.parameters || [];\n            return templateParameters.reduce((acc, { name, value }) => {\n                acc[name] = value;\n                return acc;\n            }, {});\n        };\n        this.onNamespaceChange = (namespace) => {\n            this.setState({ namespace });\n        };\n        this.onParameterChanged = (event) => {\n            const { name, value } = event.currentTarget;\n            this.setState(({ parameters }) => ({\n                parameters: Object.assign(Object.assign({}, parameters), { [name]: value }),\n            }));\n        };\n        this.save = (event) => {\n            event.preventDefault();\n            const { namespace } = this.state;\n            if (!namespace) {\n                this.setState({ error: 'Please complete all fields.' });\n                return;\n            }\n            this.setState({ error: '', inProgress: true });\n            this.createTemplateSecret()\n                .then((secret) => {\n                return this.createTemplateInstance(secret).then((instance) => {\n                    this.setState({ inProgress: false });\n                    history.push(this.props.activePerspective === 'dev'\n                        ? `/topology`\n                        : resourcePathFromModel(TemplateInstanceModel, instance.metadata.name, instance.metadata.namespace));\n                });\n            })\n                .catch((err) => this.setState({ inProgress: false, error: err.message }));\n        };\n        const { preselectedNamespace: namespace = '' } = this.props;\n        const parameters = this.getParameterValues(props);\n        this.state = {\n            namespace,\n            parameters,\n            inProgress: false,\n            error: '',\n        };\n    }\n    componentDidUpdate(prevProps) {\n        if (this.props.obj !== prevProps.obj) {\n            const parameters = this.getParameterValues(this.props);\n            this.setState({ parameters });\n        }\n    }\n    createTemplateSecret() {\n        const { obj } = this.props;\n        const { namespace, parameters } = this.state;\n        const secret = {\n            apiVersion: 'v1',\n            kind: 'Secret',\n            metadata: {\n                generateName: `${obj.data.metadata.name}-parameters-`,\n                namespace,\n            },\n            // Remove empty values.\n            stringData: parameters,\n        };\n        return k8sCreate(SecretModel, secret);\n    }\n    createTemplateInstance(secret) {\n        const { obj } = this.props;\n        const { namespace } = this.state;\n        const instance = {\n            apiVersion: 'template.openshift.io/v1',\n            kind: 'TemplateInstance',\n            metadata: {\n                generateName: `${obj.data.metadata.name}-`,\n                namespace,\n            },\n            spec: {\n                template: obj.data,\n                secret: {\n                    name: secret.metadata.name,\n                },\n            },\n        };\n        return k8sCreate(TemplateInstanceModel, instance);\n    }\n    render() {\n        const { obj } = this.props;\n        if (obj.loadError) {\n            return (React.createElement(LoadError, { message: obj.loadError.message, label: \"Template\", className: \"loading-box loading-box__errored\" }));\n        }\n        if (!obj.loaded) {\n            return React.createElement(LoadingBox, null);\n        }\n        const template = obj.data;\n        const parameters = template.parameters || [];\n        return (React.createElement(\"div\", { className: \"row\" },\n            React.createElement(\"div\", { className: \"col-md-7 col-md-push-5 co-catalog-item-info\" },\n                React.createElement(TemplateInfo, { template: template })),\n            React.createElement(\"div\", { className: \"col-md-5 col-md-pull-7\" },\n                React.createElement(\"form\", { className: \"co-instantiate-template-form\", onSubmit: this.save },\n                    React.createElement(\"div\", { className: \"form-group\" },\n                        React.createElement(\"label\", { className: \"control-label co-required\", htmlFor: \"namespace\" }, \"Namespace\"),\n                        React.createElement(NsDropdown, { selectedKey: this.state.namespace, onChange: this.onNamespaceChange, id: \"namespace\" })),\n                    parameters.map(({ name, displayName, description, required: requiredParam, generate, }) => {\n                        const value = this.state.parameters[name] || '';\n                        const helpID = description ? `${name}-help` : '';\n                        const placeholder = generate ? '(generated if empty)' : '';\n                        // Only set required for parameters not generated.\n                        const requiredInput = requiredParam && !generate;\n                        return (React.createElement(\"div\", { className: \"form-group\", key: name },\n                            React.createElement(\"label\", { className: classNames('control-label', { 'co-required': requiredInput }), htmlFor: name }, displayName || name),\n                            React.createElement(\"input\", { type: \"text\", className: \"pf-c-form-control\", id: name, name: name, value: value, onChange: this.onParameterChanged, required: requiredInput, placeholder: placeholder, \"aria-describedby\": helpID }),\n                            description && (React.createElement(\"div\", { className: \"help-block\", id: helpID }, description))));\n                    }),\n                    React.createElement(ButtonBar, { className: \"co-instantiate-template-form__button-bar\", errorMessage: this.state.error, inProgress: this.state.inProgress },\n                        React.createElement(ActionGroup, { className: \"pf-c-form\" },\n                            React.createElement(Button, { type: \"submit\", variant: \"primary\" }, \"Create\"),\n                            React.createElement(Button, { type: \"button\", variant: \"secondary\", onClick: history.goBack }, \"Cancel\")))))));\n    }\n}\nconst TemplateForm = connect(stateToProps)(TemplateForm_);\nexport const InstantiateTemplatePage = (props) => {\n    const title = 'Instantiate Template';\n    const searchParams = new URLSearchParams(location.search);\n    const templateName = searchParams.get('template');\n    const templateNamespace = searchParams.get('template-ns');\n    const preselectedNamespace = searchParams.get('preselected-ns');\n    const resources = [\n        {\n            kind: 'Template',\n            name: templateName,\n            namespace: templateNamespace,\n            isList: false,\n            prop: 'obj',\n        },\n    ];\n    return (React.createElement(React.Fragment, null,\n        React.createElement(Helmet, null,\n            React.createElement(\"title\", null, title)),\n        React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(\"h1\", { className: \"co-m-pane__heading\" }, title),\n            React.createElement(Firehose, { resources: resources },\n                React.createElement(TemplateForm, Object.assign({ preselectedNamespace: preselectedNamespace }, props))))));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/instantiate-template.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/instantiate-template.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport * as _ from 'lodash-es';\nimport { Helmet } from 'react-helmet';\nimport * as classNames from 'classnames';\nimport { ActionGroup, Button } from '@patternfly/react-core';\n\nimport { ANNOTATIONS } from '@console/shared';\nimport {\n  getImageForIconClass,\n  getTemplateIcon,\n  normalizeIconClass,\n} from './catalog/catalog-item-icon';\nimport {\n  ButtonBar,\n  ExternalLink,\n  Firehose,\n  history,\n  LoadingBox,\n  LoadError,\n  NsDropdown,\n  resourcePathFromModel,\n} from './utils';\nimport { SecretModel, TemplateInstanceModel } from '../models';\nimport {\n  k8sCreate,\n  K8sResourceKind,\n  TemplateKind,\n  TemplateInstanceKind,\n  TemplateParameter,\n} from '../module/k8s';\nimport { getActivePerspective } from '../reducers/ui';\nimport { RootState } from '../redux';\n\nconst TemplateResourceDetails: React.FC<TemplateResourceDetailsProps> = ({ template }) => {\n  const resources = _.uniq(_.compact(_.map(template.objects, 'kind'))).sort();\n  if (_.isEmpty(resources)) {\n    return null;\n  }\n\n  return (\n    <>\n      <hr />\n      <p>The following resources will be created:</p>\n      <ul>\n        {resources.map((kind: string) => (\n          <li key={kind}>{kind}</li>\n        ))}\n      </ul>\n    </>\n  );\n};\nTemplateResourceDetails.displayName = 'TemplateResourceDetails';\n\nconst TemplateInfo: React.FC<TemplateInfoProps> = ({ template }) => {\n  const annotations = template.metadata.annotations || {};\n  const { description } = annotations;\n  const displayName = annotations[ANNOTATIONS.displayName] || template.metadata.name;\n  const iconClass = getTemplateIcon(template);\n  const imgURL = getImageForIconClass(iconClass);\n  const tags = (annotations.tags || '').split(/\\s*,\\s*/);\n  const documentationURL = annotations[ANNOTATIONS.documentationURL];\n  const supportURL = annotations[ANNOTATIONS.supportURL];\n\n  return (\n    <div className=\"co-catalog-item-info\">\n      <div className=\"co-catalog-item-details\">\n        <span className=\"co-catalog-item-icon\">\n          {imgURL ? (\n            <img\n              className=\"co-catalog-item-icon__img co-catalog-item-icon__img--large\"\n              src={imgURL}\n            />\n          ) : (\n            <span\n              className={classNames(\n                'co-catalog-item-icon__icon co-catalog-item-icon__icon--large',\n                normalizeIconClass(iconClass),\n              )}\n            />\n          )}\n        </span>\n        <div>\n          <h2 className=\"co-section-heading co-catalog-item-details__name\">{displayName}</h2>\n          {!_.isEmpty(tags) && (\n            <p className=\"co-catalog-item-details__tags\">\n              {_.map(tags, (tag, i) => (\n                <span className=\"co-catalog-item-details__tag\" key={i}>\n                  {tag}\n                </span>\n              ))}\n            </p>\n          )}\n          {(documentationURL || supportURL) && (\n            <ul className=\"list-inline\">\n              {documentationURL && (\n                <li className=\"co-break-word\">\n                  <ExternalLink href={documentationURL} text=\"View documentation\" />\n                </li>\n              )}\n              {supportURL && (\n                <li className=\"co-break-word\">\n                  <ExternalLink href={supportURL} text=\"Get support\" />\n                </li>\n              )}\n            </ul>\n          )}\n        </div>\n      </div>\n      {description && <p className=\"co-catalog-item-details__description\">{description}</p>}\n      <TemplateResourceDetails template={template} />\n    </div>\n  );\n};\nTemplateInfo.displayName = 'TemplateInfo';\n\nconst stateToProps = (state: RootState) => ({\n  models: state.k8s.getIn(['RESOURCES', 'models']),\n  activePerspective: getActivePerspective(state),\n});\n\nclass TemplateForm_ extends React.Component<TemplateFormProps, TemplateFormState> {\n  constructor(props: TemplateFormProps) {\n    super(props);\n\n    const { preselectedNamespace: namespace = '' } = this.props;\n    const parameters = this.getParameterValues(props);\n    this.state = {\n      namespace,\n      parameters,\n      inProgress: false,\n      error: '',\n    };\n  }\n\n  componentDidUpdate(prevProps: TemplateFormProps) {\n    if (this.props.obj !== prevProps.obj) {\n      const parameters = this.getParameterValues(this.props);\n      this.setState({ parameters });\n    }\n  }\n\n  getParameterValues = (props: TemplateFormProps) => {\n    const templateParameters: TemplateParameter[] = props.obj.data.parameters || [];\n    return templateParameters.reduce((acc, { name, value }: TemplateParameter) => {\n      acc[name] = value;\n      return acc;\n    }, {});\n  };\n\n  onNamespaceChange = (namespace: string) => {\n    this.setState({ namespace });\n  };\n\n  onParameterChanged: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    const { name, value } = event.currentTarget;\n    this.setState(({ parameters }) => ({\n      parameters: {\n        ...parameters,\n        [name]: value,\n      },\n    }));\n  };\n\n  createTemplateSecret(): Promise<K8sResourceKind> {\n    const { obj } = this.props;\n    const { namespace, parameters } = this.state;\n    const secret = {\n      apiVersion: 'v1',\n      kind: 'Secret',\n      metadata: {\n        generateName: `${obj.data.metadata.name}-parameters-`,\n        namespace,\n      },\n      // Remove empty values.\n      stringData: parameters,\n    };\n    return k8sCreate(SecretModel, secret);\n  }\n\n  createTemplateInstance(secret: K8sResourceKind): Promise<K8sResourceKind> {\n    const { obj } = this.props;\n    const { namespace } = this.state;\n    const instance: TemplateInstanceKind = {\n      apiVersion: 'template.openshift.io/v1',\n      kind: 'TemplateInstance',\n      metadata: {\n        generateName: `${obj.data.metadata.name}-`,\n        namespace,\n      },\n      spec: {\n        template: obj.data as TemplateKind,\n        secret: {\n          name: secret.metadata.name,\n        },\n      },\n    };\n    return k8sCreate(TemplateInstanceModel, instance);\n  }\n\n  save = (event: React.FormEvent<EventTarget>) => {\n    event.preventDefault();\n    const { namespace } = this.state;\n    if (!namespace) {\n      this.setState({ error: 'Please complete all fields.' });\n      return;\n    }\n\n    this.setState({ error: '', inProgress: true });\n    this.createTemplateSecret()\n      .then((secret: K8sResourceKind) => {\n        return this.createTemplateInstance(secret).then((instance: TemplateInstanceKind) => {\n          this.setState({ inProgress: false });\n          history.push(\n            this.props.activePerspective === 'dev'\n              ? `/topology`\n              : resourcePathFromModel(\n                  TemplateInstanceModel,\n                  instance.metadata.name,\n                  instance.metadata.namespace,\n                ),\n          );\n        });\n      })\n      .catch((err) => this.setState({ inProgress: false, error: err.message }));\n  };\n\n  render() {\n    const { obj } = this.props;\n    if (obj.loadError) {\n      return (\n        <LoadError\n          message={obj.loadError.message}\n          label=\"Template\"\n          className=\"loading-box loading-box__errored\"\n        />\n      );\n    }\n\n    if (!obj.loaded) {\n      return <LoadingBox />;\n    }\n\n    const template: TemplateKind = obj.data;\n    const parameters = template.parameters || [];\n\n    return (\n      <div className=\"row\">\n        <div className=\"col-md-7 col-md-push-5 co-catalog-item-info\">\n          <TemplateInfo template={template} />\n        </div>\n        <div className=\"col-md-5 col-md-pull-7\">\n          <form className=\"co-instantiate-template-form\" onSubmit={this.save}>\n            <div className=\"form-group\">\n              <label className=\"control-label co-required\" htmlFor=\"namespace\">\n                Namespace\n              </label>\n              <NsDropdown\n                selectedKey={this.state.namespace}\n                onChange={this.onNamespaceChange}\n                id=\"namespace\"\n              />\n            </div>\n            {parameters.map(\n              ({\n                name,\n                displayName,\n                description,\n                required: requiredParam,\n                generate,\n              }: TemplateParameter) => {\n                const value = this.state.parameters[name] || '';\n                const helpID = description ? `${name}-help` : '';\n                const placeholder = generate ? '(generated if empty)' : '';\n                // Only set required for parameters not generated.\n                const requiredInput = requiredParam && !generate;\n                return (\n                  <div className=\"form-group\" key={name}>\n                    <label\n                      className={classNames('control-label', { 'co-required': requiredInput })}\n                      htmlFor={name}\n                    >\n                      {displayName || name}\n                    </label>\n                    <input\n                      type=\"text\"\n                      className=\"pf-c-form-control\"\n                      id={name}\n                      name={name}\n                      value={value}\n                      onChange={this.onParameterChanged}\n                      required={requiredInput}\n                      placeholder={placeholder}\n                      aria-describedby={helpID}\n                    />\n                    {description && (\n                      <div className=\"help-block\" id={helpID}>\n                        {description}\n                      </div>\n                    )}\n                  </div>\n                );\n              },\n            )}\n            <ButtonBar\n              className=\"co-instantiate-template-form__button-bar\"\n              errorMessage={this.state.error}\n              inProgress={this.state.inProgress}\n            >\n              <ActionGroup className=\"pf-c-form\">\n                <Button type=\"submit\" variant=\"primary\">\n                  Create\n                </Button>\n                <Button type=\"button\" variant=\"secondary\" onClick={history.goBack}>\n                  Cancel\n                </Button>\n              </ActionGroup>\n            </ButtonBar>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\nconst TemplateForm = connect(stateToProps)(TemplateForm_);\n\nexport const InstantiateTemplatePage: React.FC<{}> = (props) => {\n  const title = 'Instantiate Template';\n  const searchParams = new URLSearchParams(location.search);\n  const templateName = searchParams.get('template');\n  const templateNamespace = searchParams.get('template-ns');\n  const preselectedNamespace = searchParams.get('preselected-ns');\n  const resources = [\n    {\n      kind: 'Template',\n      name: templateName,\n      namespace: templateNamespace,\n      isList: false,\n      prop: 'obj',\n    },\n  ];\n\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <div className=\"co-m-pane__body\">\n        <h1 className=\"co-m-pane__heading\">{title}</h1>\n        <Firehose resources={resources}>\n          <TemplateForm preselectedNamespace={preselectedNamespace} {...(props as any)} />\n        </Firehose>\n      </div>\n    </>\n  );\n};\n\ntype TemplateResourceDetailsProps = {\n  template: TemplateKind;\n};\n\ntype TemplateInfoProps = {\n  template: TemplateKind;\n};\n\ntype TemplateFormProps = {\n  obj: any;\n  preselectedNamespace: string;\n  models: any;\n  activePerspective: string;\n};\n\ntype TemplateFormState = {\n  namespace: string;\n  parameters: {\n    [name: string]: string;\n  };\n  inProgress: boolean;\n  error: string;\n};\n"]}]}