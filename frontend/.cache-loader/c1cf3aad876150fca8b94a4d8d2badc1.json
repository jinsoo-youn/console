{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/constants/queries.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/constants/queries.ts","mtime":1615298458590},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { ProjectModel, PodModel, StorageClassModel } from '@console/internal/models';\nimport { STORAGE_CLASSES, PROJECTS, PODS } from '.';\nexport var StorageDashboardQuery;\n(function (StorageDashboardQuery) {\n    StorageDashboardQuery[\"CEPH_STATUS_QUERY\"] = \"CEPH_STATUS_QUERY\";\n    StorageDashboardQuery[\"CEPH_PG_CLEAN_AND_ACTIVE_QUERY\"] = \"CEPH_PG_CLEAN_AND_ACTIVE_QUERY\";\n    StorageDashboardQuery[\"CEPH_PG_TOTAL_QUERY\"] = \"CEPH_PG_TOTAL_QUERY\";\n    StorageDashboardQuery[\"UTILIZATION_IOPS_QUERY\"] = \"UTILIZATION_IOPS_QUERY\";\n    StorageDashboardQuery[\"UTILIZATION_LATENCY_QUERY\"] = \"UTILIZATION_LATENCY_QUERY\";\n    StorageDashboardQuery[\"UTILIZATION_THROUGHPUT_QUERY\"] = \"UTILIZATION_THROUGHPUT_QUERY\";\n    StorageDashboardQuery[\"UTILIZATION_RECOVERY_RATE_QUERY\"] = \"UTILIZATION_RECOVERY_RATE_QUERY\";\n    StorageDashboardQuery[\"CEPH_CAPACITY_TOTAL\"] = \"CAPACITY_TOTAL\";\n    StorageDashboardQuery[\"CEPH_CAPACITY_USED\"] = \"CAPACITY_USED\";\n    StorageDashboardQuery[\"PODS_TOTAL_USED\"] = \"PODS_TOTAL_USED\";\n    StorageDashboardQuery[\"PODS_BY_USED\"] = \"PODS_BY_USED\";\n    StorageDashboardQuery[\"PROJECTS_TOTAL_USED\"] = \"PROJECTS_TOTAL_USED\";\n    StorageDashboardQuery[\"PROJECTS_BY_USED\"] = \"PROJECTS_BY_USED\";\n    StorageDashboardQuery[\"STORAGE_CLASSES_TOTAL_USED\"] = \"STORAGE_CLASSES_TOTAL_USED\";\n    StorageDashboardQuery[\"STORAGE_CLASSES_BY_USED\"] = \"STORAGE_CLASSES_BY_USED\";\n    StorageDashboardQuery[\"STORAGE_CEPH_CAPACITY_REQUESTED_QUERY\"] = \"STORAGE_CEPH_CAPACITY_REQUESTED_QUERY\";\n    StorageDashboardQuery[\"STORAGE_CEPH_CAPACITY_USED_QUERY\"] = \"STORAGE_CEPH_CAPACITY_USED_QUERY\";\n    StorageDashboardQuery[\"RESILIENCY_PROGRESS\"] = \"RESILIENCY_PROGRESS\";\n    StorageDashboardQuery[\"NODES_BY_USED\"] = \"NODES_BY_USED\";\n    StorageDashboardQuery[\"USED_CAPACITY\"] = \"USED_CAPACITY\";\n    StorageDashboardQuery[\"REQUESTED_CAPACITY\"] = \"REQUESTED_CAPACITY\";\n    StorageDashboardQuery[\"CEPH_CAPACITY_AVAILABLE\"] = \"CEPH_CAPACITY_AVAILABLE\";\n})(StorageDashboardQuery || (StorageDashboardQuery = {}));\nexport const INDEPENDENT_UTILIZATION_QUERIES = {\n    [StorageDashboardQuery.REQUESTED_CAPACITY]: 'sum((kube_persistentvolumeclaim_resource_requests_storage_bytes * on (namespace,persistentvolumeclaim) group_right() kube_pod_spec_volumes_persistentvolumeclaims_info) * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"}))',\n    [StorageDashboardQuery.USED_CAPACITY]: 'sum((kubelet_volume_stats_used_bytes * on (namespace,persistentvolumeclaim) group_right() kube_pod_spec_volumes_persistentvolumeclaims_info) * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"}))',\n};\nexport const STORAGE_HEALTH_QUERIES = {\n    [StorageDashboardQuery.CEPH_STATUS_QUERY]: 'ceph_health_status',\n};\nexport const DATA_RESILIENCY_QUERY = {\n    [StorageDashboardQuery.RESILIENCY_PROGRESS]: '(ceph_pg_clean and ceph_pg_active)/ceph_pg_total',\n};\nexport const UTILIZATION_QUERY = {\n    [StorageDashboardQuery.CEPH_CAPACITY_USED]: 'sum(kubelet_volume_stats_used_bytes * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)\"}))',\n    [StorageDashboardQuery.UTILIZATION_IOPS_QUERY]: '(sum(rate(ceph_pool_wr[1m])) + sum(rate(ceph_pool_rd[1m])))',\n    [StorageDashboardQuery.UTILIZATION_LATENCY_QUERY]: '(quantile(.95,(cluster:ceph_disk_latency:join_ceph_node_disk_irate1m)))',\n    [StorageDashboardQuery.UTILIZATION_THROUGHPUT_QUERY]: '(sum(rate(ceph_pool_wr_bytes[1m]) + rate(ceph_pool_rd_bytes[1m])))',\n    [StorageDashboardQuery.UTILIZATION_RECOVERY_RATE_QUERY]: '(sum(ceph_pool_recovering_bytes_per_sec))',\n};\nexport const TOTAL_QUERY = {\n    [StorageDashboardQuery.CEPH_CAPACITY_TOTAL]: 'ceph_cluster_total_bytes',\n};\nexport const CAPACITY_USAGE_QUERIES = {\n    [StorageDashboardQuery.CEPH_CAPACITY_TOTAL]: 'ceph_cluster_total_bytes',\n    [StorageDashboardQuery.CEPH_CAPACITY_USED]: 'ceph_cluster_total_used_bytes',\n    [StorageDashboardQuery.STORAGE_CEPH_CAPACITY_REQUESTED_QUERY]: 'sum((kube_persistentvolumeclaim_resource_requests_storage_bytes * on (namespace,persistentvolumeclaim) group_right() kube_pod_spec_volumes_persistentvolumeclaims_info) * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"}))',\n    [StorageDashboardQuery.STORAGE_CEPH_CAPACITY_USED_QUERY]: 'sum((kubelet_volume_stats_used_bytes * on (namespace,persistentvolumeclaim) group_right() kube_pod_spec_volumes_persistentvolumeclaims_info) * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"}))',\n};\nexport const CAPACITY_BREAKDOWN_QUERIES = {\n    [StorageDashboardQuery.PROJECTS_TOTAL_USED]: 'sum(sum(kubelet_volume_stats_used_bytes * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"})) by (namespace))',\n    [StorageDashboardQuery.PROJECTS_BY_USED]: 'sum(kubelet_volume_stats_used_bytes * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"})) by (namespace)',\n    [StorageDashboardQuery.STORAGE_CLASSES_TOTAL_USED]: 'sum(sum(kubelet_volume_stats_used_bytes * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass) group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"})) by (storageclass, provisioner))',\n    [StorageDashboardQuery.STORAGE_CLASSES_BY_USED]: 'sum(kubelet_volume_stats_used_bytes * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass) group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"})) by (storageclass, provisioner)',\n    [StorageDashboardQuery.PODS_TOTAL_USED]: 'sum(sum((kubelet_volume_stats_used_bytes * on (namespace,persistentvolumeclaim) group_right() kube_pod_spec_volumes_persistentvolumeclaims_info) * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"})) by (pod,namespace))',\n    [StorageDashboardQuery.PODS_BY_USED]: 'sum((kubelet_volume_stats_used_bytes * on (namespace,persistentvolumeclaim) group_right() kube_pod_spec_volumes_persistentvolumeclaims_info) * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"})) by (pod,namespace)',\n    [StorageDashboardQuery.CEPH_CAPACITY_TOTAL]: 'ceph_cluster_total_bytes',\n    [StorageDashboardQuery.CEPH_CAPACITY_USED]: 'sum(kubelet_volume_stats_used_bytes * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)\"}))',\n    [StorageDashboardQuery.CEPH_CAPACITY_AVAILABLE]: 'max(ceph_pool_max_avail * on (pool_id) group_left(name)ceph_pool_metadata{name=~\"(.*file.*)|(.*block.*)\"})',\n};\nexport const breakdownQueryMap = {\n    [PROJECTS]: {\n        model: ProjectModel,\n        metric: 'namespace',\n        queries: {\n            [StorageDashboardQuery.PROJECTS_BY_USED]: `(topk(6,(${CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.PROJECTS_BY_USED]})))`,\n            [StorageDashboardQuery.PROJECTS_TOTAL_USED]: CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.PROJECTS_TOTAL_USED],\n            [StorageDashboardQuery.CEPH_CAPACITY_AVAILABLE]: CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.CEPH_CAPACITY_AVAILABLE],\n            [StorageDashboardQuery.CEPH_CAPACITY_USED]: CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.CEPH_CAPACITY_USED],\n        },\n    },\n    [STORAGE_CLASSES]: {\n        model: StorageClassModel,\n        metric: 'storageclass',\n        queries: {\n            [StorageDashboardQuery.STORAGE_CLASSES_BY_USED]: `(topk(6,(${CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.STORAGE_CLASSES_BY_USED]})))`,\n            [StorageDashboardQuery.STORAGE_CLASSES_TOTAL_USED]: CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.STORAGE_CLASSES_TOTAL_USED],\n            [StorageDashboardQuery.CEPH_CAPACITY_AVAILABLE]: CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.CEPH_CAPACITY_AVAILABLE],\n            [StorageDashboardQuery.CEPH_CAPACITY_USED]: CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.CEPH_CAPACITY_USED],\n        },\n    },\n    [PODS]: {\n        model: PodModel,\n        metric: 'pod',\n        queries: {\n            [StorageDashboardQuery.PODS_BY_USED]: `(topk(6,(${CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.PODS_BY_USED]})))`,\n            [StorageDashboardQuery.PODS_TOTAL_USED]: CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.PODS_TOTAL_USED],\n            [StorageDashboardQuery.CEPH_CAPACITY_AVAILABLE]: CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.CEPH_CAPACITY_AVAILABLE],\n            [StorageDashboardQuery.CEPH_CAPACITY_USED]: CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.CEPH_CAPACITY_USED],\n        },\n    },\n};\nexport const breakdownIndependentQueryMap = {\n    [PROJECTS]: {\n        model: ProjectModel,\n        metric: 'namespace',\n        queries: {\n            [StorageDashboardQuery.PROJECTS_BY_USED]: `(topk(6,(${CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.PROJECTS_BY_USED]})))`,\n            [StorageDashboardQuery.PROJECTS_TOTAL_USED]: CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.PROJECTS_TOTAL_USED],\n        },\n    },\n    [STORAGE_CLASSES]: {\n        model: StorageClassModel,\n        metric: 'storageclass',\n        queries: {\n            [StorageDashboardQuery.STORAGE_CLASSES_BY_USED]: `(topk(6,(${CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.STORAGE_CLASSES_BY_USED]})))`,\n            [StorageDashboardQuery.STORAGE_CLASSES_TOTAL_USED]: CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.STORAGE_CLASSES_TOTAL_USED],\n        },\n    },\n    [PODS]: {\n        model: PodModel,\n        metric: 'pod',\n        queries: {\n            [StorageDashboardQuery.PODS_BY_USED]: `(topk(6,(${CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.PODS_BY_USED]})))`,\n            [StorageDashboardQuery.PODS_TOTAL_USED]: CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.PODS_TOTAL_USED],\n        },\n    },\n};\nexport const utilizationPopoverQueryMap = [\n    {\n        model: ProjectModel,\n        metric: 'namespace',\n        query: `(sort_desc(topk(25,(${CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.PROJECTS_BY_USED]}))))`,\n    },\n    {\n        model: StorageClassModel,\n        metric: 'storageclass',\n        query: `(sort_desc(topk(25,(${CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.STORAGE_CLASSES_BY_USED]}))))`,\n    },\n    {\n        model: PodModel,\n        metric: 'pod',\n        query: `(sort_desc(topk(25, (${CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.PODS_BY_USED]}))))`,\n    },\n];\nexport const getPVCUsedCapacityQuery = (pvcName) => `kubelet_volume_stats_used_bytes{persistentvolumeclaim='${pvcName}'}`;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/constants/queries.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/constants/queries.ts"],"names":[],"mappings":"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","sourcesContent":["import { ProjectModel, PodModel, StorageClassModel } from '@console/internal/models';\nimport { STORAGE_CLASSES, PROJECTS, PODS } from '.';\n\nexport enum StorageDashboardQuery {\n  CEPH_STATUS_QUERY = 'CEPH_STATUS_QUERY',\n  CEPH_PG_CLEAN_AND_ACTIVE_QUERY = 'CEPH_PG_CLEAN_AND_ACTIVE_QUERY',\n  CEPH_PG_TOTAL_QUERY = 'CEPH_PG_TOTAL_QUERY',\n  UTILIZATION_IOPS_QUERY = 'UTILIZATION_IOPS_QUERY',\n  UTILIZATION_LATENCY_QUERY = 'UTILIZATION_LATENCY_QUERY',\n  UTILIZATION_THROUGHPUT_QUERY = 'UTILIZATION_THROUGHPUT_QUERY',\n  UTILIZATION_RECOVERY_RATE_QUERY = 'UTILIZATION_RECOVERY_RATE_QUERY',\n  CEPH_CAPACITY_TOTAL = 'CAPACITY_TOTAL',\n  CEPH_CAPACITY_USED = 'CAPACITY_USED',\n  PODS_TOTAL_USED = 'PODS_TOTAL_USED',\n  PODS_BY_USED = 'PODS_BY_USED',\n  PROJECTS_TOTAL_USED = 'PROJECTS_TOTAL_USED',\n  PROJECTS_BY_USED = 'PROJECTS_BY_USED',\n  STORAGE_CLASSES_TOTAL_USED = 'STORAGE_CLASSES_TOTAL_USED',\n  STORAGE_CLASSES_BY_USED = 'STORAGE_CLASSES_BY_USED',\n  STORAGE_CEPH_CAPACITY_REQUESTED_QUERY = 'STORAGE_CEPH_CAPACITY_REQUESTED_QUERY',\n  STORAGE_CEPH_CAPACITY_USED_QUERY = 'STORAGE_CEPH_CAPACITY_USED_QUERY',\n  RESILIENCY_PROGRESS = 'RESILIENCY_PROGRESS',\n  NODES_BY_USED = 'NODES_BY_USED',\n  USED_CAPACITY = 'USED_CAPACITY',\n  REQUESTED_CAPACITY = 'REQUESTED_CAPACITY',\n  CEPH_CAPACITY_AVAILABLE = 'CEPH_CAPACITY_AVAILABLE',\n}\n\nexport const INDEPENDENT_UTILIZATION_QUERIES = {\n  [StorageDashboardQuery.REQUESTED_CAPACITY]:\n    'sum((kube_persistentvolumeclaim_resource_requests_storage_bytes * on (namespace,persistentvolumeclaim) group_right() kube_pod_spec_volumes_persistentvolumeclaims_info) * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"}))',\n  [StorageDashboardQuery.USED_CAPACITY]:\n    'sum((kubelet_volume_stats_used_bytes * on (namespace,persistentvolumeclaim) group_right() kube_pod_spec_volumes_persistentvolumeclaims_info) * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"}))',\n};\n\nexport const STORAGE_HEALTH_QUERIES = {\n  [StorageDashboardQuery.CEPH_STATUS_QUERY]: 'ceph_health_status',\n};\n\nexport const DATA_RESILIENCY_QUERY = {\n  [StorageDashboardQuery.RESILIENCY_PROGRESS]: '(ceph_pg_clean and ceph_pg_active)/ceph_pg_total',\n};\n\nexport const UTILIZATION_QUERY = {\n  [StorageDashboardQuery.CEPH_CAPACITY_USED]:\n    'sum(kubelet_volume_stats_used_bytes * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)\"}))',\n  [StorageDashboardQuery.UTILIZATION_IOPS_QUERY]:\n    '(sum(rate(ceph_pool_wr[1m])) + sum(rate(ceph_pool_rd[1m])))',\n  [StorageDashboardQuery.UTILIZATION_LATENCY_QUERY]:\n    '(quantile(.95,(cluster:ceph_disk_latency:join_ceph_node_disk_irate1m)))',\n  [StorageDashboardQuery.UTILIZATION_THROUGHPUT_QUERY]:\n    '(sum(rate(ceph_pool_wr_bytes[1m]) + rate(ceph_pool_rd_bytes[1m])))',\n  [StorageDashboardQuery.UTILIZATION_RECOVERY_RATE_QUERY]:\n    '(sum(ceph_pool_recovering_bytes_per_sec))',\n};\n\nexport const TOTAL_QUERY = {\n  [StorageDashboardQuery.CEPH_CAPACITY_TOTAL]: 'ceph_cluster_total_bytes',\n};\n\nexport const CAPACITY_USAGE_QUERIES = {\n  [StorageDashboardQuery.CEPH_CAPACITY_TOTAL]: 'ceph_cluster_total_bytes',\n  [StorageDashboardQuery.CEPH_CAPACITY_USED]: 'ceph_cluster_total_used_bytes',\n  [StorageDashboardQuery.STORAGE_CEPH_CAPACITY_REQUESTED_QUERY]:\n    'sum((kube_persistentvolumeclaim_resource_requests_storage_bytes * on (namespace,persistentvolumeclaim) group_right() kube_pod_spec_volumes_persistentvolumeclaims_info) * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"}))',\n  [StorageDashboardQuery.STORAGE_CEPH_CAPACITY_USED_QUERY]:\n    'sum((kubelet_volume_stats_used_bytes * on (namespace,persistentvolumeclaim) group_right() kube_pod_spec_volumes_persistentvolumeclaims_info) * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"}))',\n};\n\nexport const CAPACITY_BREAKDOWN_QUERIES = {\n  [StorageDashboardQuery.PROJECTS_TOTAL_USED]:\n    'sum(sum(kubelet_volume_stats_used_bytes * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"})) by (namespace))',\n  [StorageDashboardQuery.PROJECTS_BY_USED]:\n    'sum(kubelet_volume_stats_used_bytes * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"})) by (namespace)',\n  [StorageDashboardQuery.STORAGE_CLASSES_TOTAL_USED]:\n    'sum(sum(kubelet_volume_stats_used_bytes * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass) group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"})) by (storageclass, provisioner))',\n  [StorageDashboardQuery.STORAGE_CLASSES_BY_USED]:\n    'sum(kubelet_volume_stats_used_bytes * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass) group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"})) by (storageclass, provisioner)',\n  [StorageDashboardQuery.PODS_TOTAL_USED]:\n    'sum(sum((kubelet_volume_stats_used_bytes * on (namespace,persistentvolumeclaim) group_right() kube_pod_spec_volumes_persistentvolumeclaims_info) * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"})) by (pod,namespace))',\n  [StorageDashboardQuery.PODS_BY_USED]:\n    'sum((kubelet_volume_stats_used_bytes * on (namespace,persistentvolumeclaim) group_right() kube_pod_spec_volumes_persistentvolumeclaims_info) * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)|(ceph.rook.io/block)\"})) by (pod,namespace)',\n  [StorageDashboardQuery.CEPH_CAPACITY_TOTAL]: 'ceph_cluster_total_bytes',\n  [StorageDashboardQuery.CEPH_CAPACITY_USED]:\n    'sum(kubelet_volume_stats_used_bytes * on (namespace,persistentvolumeclaim) group_left(storageclass, provisioner) (kube_persistentvolumeclaim_info * on (storageclass)  group_left(provisioner) kube_storageclass_info {provisioner=~\"(.*rbd.csi.ceph.com)|(.*cephfs.csi.ceph.com)\"}))',\n  [StorageDashboardQuery.CEPH_CAPACITY_AVAILABLE]:\n    'max(ceph_pool_max_avail * on (pool_id) group_left(name)ceph_pool_metadata{name=~\"(.*file.*)|(.*block.*)\"})',\n};\n\nexport const breakdownQueryMap = {\n  [PROJECTS]: {\n    model: ProjectModel,\n    metric: 'namespace',\n    queries: {\n      [StorageDashboardQuery.PROJECTS_BY_USED]: `(topk(6,(${\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.PROJECTS_BY_USED]\n      })))`,\n      [StorageDashboardQuery.PROJECTS_TOTAL_USED]:\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.PROJECTS_TOTAL_USED],\n      [StorageDashboardQuery.CEPH_CAPACITY_AVAILABLE]:\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.CEPH_CAPACITY_AVAILABLE],\n      [StorageDashboardQuery.CEPH_CAPACITY_USED]:\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.CEPH_CAPACITY_USED],\n    },\n  },\n  [STORAGE_CLASSES]: {\n    model: StorageClassModel,\n    metric: 'storageclass',\n    queries: {\n      [StorageDashboardQuery.STORAGE_CLASSES_BY_USED]: `(topk(6,(${\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.STORAGE_CLASSES_BY_USED]\n      })))`,\n      [StorageDashboardQuery.STORAGE_CLASSES_TOTAL_USED]:\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.STORAGE_CLASSES_TOTAL_USED],\n      [StorageDashboardQuery.CEPH_CAPACITY_AVAILABLE]:\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.CEPH_CAPACITY_AVAILABLE],\n      [StorageDashboardQuery.CEPH_CAPACITY_USED]:\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.CEPH_CAPACITY_USED],\n    },\n  },\n  [PODS]: {\n    model: PodModel,\n    metric: 'pod',\n    queries: {\n      [StorageDashboardQuery.PODS_BY_USED]: `(topk(6,(${\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.PODS_BY_USED]\n      })))`,\n      [StorageDashboardQuery.PODS_TOTAL_USED]:\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.PODS_TOTAL_USED],\n      [StorageDashboardQuery.CEPH_CAPACITY_AVAILABLE]:\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.CEPH_CAPACITY_AVAILABLE],\n      [StorageDashboardQuery.CEPH_CAPACITY_USED]:\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.CEPH_CAPACITY_USED],\n    },\n  },\n};\n\nexport const breakdownIndependentQueryMap = {\n  [PROJECTS]: {\n    model: ProjectModel,\n    metric: 'namespace',\n    queries: {\n      [StorageDashboardQuery.PROJECTS_BY_USED]: `(topk(6,(${\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.PROJECTS_BY_USED]\n      })))`,\n      [StorageDashboardQuery.PROJECTS_TOTAL_USED]:\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.PROJECTS_TOTAL_USED],\n    },\n  },\n  [STORAGE_CLASSES]: {\n    model: StorageClassModel,\n    metric: 'storageclass',\n    queries: {\n      [StorageDashboardQuery.STORAGE_CLASSES_BY_USED]: `(topk(6,(${\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.STORAGE_CLASSES_BY_USED]\n      })))`,\n      [StorageDashboardQuery.STORAGE_CLASSES_TOTAL_USED]:\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.STORAGE_CLASSES_TOTAL_USED],\n    },\n  },\n  [PODS]: {\n    model: PodModel,\n    metric: 'pod',\n    queries: {\n      [StorageDashboardQuery.PODS_BY_USED]: `(topk(6,(${\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.PODS_BY_USED]\n      })))`,\n      [StorageDashboardQuery.PODS_TOTAL_USED]:\n        CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.PODS_TOTAL_USED],\n    },\n  },\n};\n\nexport const utilizationPopoverQueryMap = [\n  {\n    model: ProjectModel,\n    metric: 'namespace',\n    query: `(sort_desc(topk(25,(${\n      CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.PROJECTS_BY_USED]\n    }))))`,\n  },\n  {\n    model: StorageClassModel,\n    metric: 'storageclass',\n    query: `(sort_desc(topk(25,(${\n      CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.STORAGE_CLASSES_BY_USED]\n    }))))`,\n  },\n  {\n    model: PodModel,\n    metric: 'pod',\n    query: `(sort_desc(topk(25, (${\n      CAPACITY_BREAKDOWN_QUERIES[StorageDashboardQuery.PODS_BY_USED]\n    }))))`,\n  },\n];\n\nexport const getPVCUsedCapacityQuery = (pvcName: string): string =>\n  `kubelet_volume_stats_used_bytes{persistentvolumeclaim='${pvcName}'}`;\n"]}]}