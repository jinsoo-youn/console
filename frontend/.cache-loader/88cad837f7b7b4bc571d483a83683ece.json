{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/drawer/Drawer.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/drawer/Drawer.tsx","mtime":1615298458600},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport DraggableCoreIFrameFix from './DraggableCoreIFrameFix';\nimport './Drawer.scss';\nconst useSize = () => {\n    const [height, setHeight] = React.useState(0);\n    const callback = React.useCallback((element) => {\n        if (element) {\n            const bb = element.getBoundingClientRect();\n            setHeight(bb.height);\n        }\n    }, []);\n    return [height, callback];\n};\n// get the pageX value from a mouse or touch event\nconst getPageY = (e) => { var _a, _b, _c; return (_a = e.pageY) !== null && _a !== void 0 ? _a : (_c = (_b = e.touches) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.pageY; };\nconst Drawer = ({ children, defaultHeight = 300, height, maxHeight = '100%', open, defaultOpen = true, resizable = false, header, onChange, }) => {\n    const drawerRef = React.useRef();\n    const [heightState, setHeightState] = React.useState(defaultHeight);\n    const [openState, setOpenState] = React.useState(defaultOpen);\n    const lastObservedHeightRef = React.useRef();\n    const startRef = React.useRef();\n    const [minHeight, headerRef] = useSize();\n    const minimumHeight = minHeight !== null && minHeight !== void 0 ? minHeight : 0;\n    // merge controlled and uncontrolled states\n    const currentOpen = open !== null && open !== void 0 ? open : openState;\n    const currentHeight = height !== null && height !== void 0 ? height : heightState;\n    const setHeight = (drawerHeight, forceOpen) => {\n        const newHeight = Math.max(drawerHeight, minimumHeight);\n        const newOpen = forceOpen !== null && forceOpen !== void 0 ? forceOpen : newHeight > minimumHeight;\n        setHeightState(newHeight);\n        setOpenState(newOpen);\n        if (onChange) {\n            onChange(newOpen, newHeight);\n        }\n    };\n    const handleDrag = (e) => {\n        setHeight(startRef.current - getPageY(e));\n    };\n    const handleResizeStart = (e) => {\n        var _a;\n        e.preventDefault();\n        lastObservedHeightRef.current = currentHeight;\n        // always start with actual drawer height\n        const drawerHeight = ((_a = drawerRef.current) === null || _a === void 0 ? void 0 : _a.offsetHeight) || currentHeight;\n        startRef.current = drawerHeight + getPageY(e);\n        if (drawerHeight !== currentHeight) {\n            setHeight(drawerHeight);\n        }\n    };\n    const handleResizeStop = () => {\n        if (currentHeight <= minimumHeight) {\n            setHeight(lastObservedHeightRef.current, false);\n        }\n    };\n    const draggable = resizable && (React.createElement(DraggableCoreIFrameFix, { onDrag: handleDrag, onStart: handleResizeStart, onStop: handleResizeStop },\n        React.createElement(\"div\", { className: \"ocs-drawer__drag-handle\" })));\n    return (React.createElement(CSSTransition, { appear: true, in: true, timeout: 225, classNames: \"ocs-drawer\" },\n        React.createElement(\"div\", { ref: drawerRef, className: \"ocs-drawer\", style: {\n                height: currentOpen ? currentHeight : minimumHeight,\n                maxHeight,\n                minHeight: minimumHeight,\n            } },\n            draggable,\n            React.createElement(\"div\", { ref: headerRef, className: \"ocs-drawer__header\" }, header),\n            React.createElement(\"div\", { className: \"ocs-drawer__body\" }, children))));\n};\nexport default Drawer;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/drawer/Drawer.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/components/drawer/Drawer.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { CSSTransition } from 'react-transition-group';\nimport { DraggableEvent } from 'react-draggable';\nimport DraggableCoreIFrameFix from './DraggableCoreIFrameFix';\nimport './Drawer.scss';\n\ntype DrawerProps = {\n  /**\n   * Controlled height of the drawer.\n   * Should be set when used as controlled component with onChange callback.\n   */\n  height?: number;\n  /**\n   * Default Value: 300\n   * Uncontrolled default height of the drawer.\n   */\n  defaultHeight?: number;\n  /**\n   * Toggles controlled open state.\n   */\n  open?: boolean;\n  /**\n   * Default Value: true\n   * Uncontrolled open state of the drawer on first render.\n   */\n  defaultOpen?: boolean;\n  /**\n   * Maximum height drawer can be resized to.\n   */\n  maxHeight?: number | string;\n  /**\n   * Set whether the drawer is resizable or not.\n   */\n  resizable?: boolean;\n  /**\n   * Content for the Header of drawer\n   */\n  header?: React.ReactNode;\n  /**\n   * This callback is invoked while resizing the drawer.\n   * @param open boolean: false when the drawer reached minimum height (minimized state)\n   * @param height number: Height of the drawer while resizing\n   */\n  onChange?: (open: boolean, height: number) => void;\n};\n\nconst useSize = <T extends HTMLElement>(): [number, (element: T) => void] => {\n  const [height, setHeight] = React.useState<number>(0);\n\n  const callback = React.useCallback((element: T): void => {\n    if (element) {\n      const bb = element.getBoundingClientRect();\n      setHeight(bb.height);\n    }\n  }, []);\n  return [height, callback];\n};\n\n// get the pageX value from a mouse or touch event\nconst getPageY = (e: DraggableEvent): number =>\n  (e as MouseEvent).pageY ?? (e as TouchEvent).touches?.[0]?.pageY;\n\nconst Drawer: React.FC<DrawerProps> = ({\n  children,\n  defaultHeight = 300,\n  height,\n  maxHeight = '100%',\n  open,\n  defaultOpen = true,\n  resizable = false,\n  header,\n  onChange,\n}) => {\n  const drawerRef = React.useRef<HTMLDivElement>();\n  const [heightState, setHeightState] = React.useState(defaultHeight);\n  const [openState, setOpenState] = React.useState(defaultOpen);\n  const lastObservedHeightRef = React.useRef<number>();\n  const startRef = React.useRef<number>();\n  const [minHeight, headerRef] = useSize<HTMLDivElement>();\n  const minimumHeight = minHeight ?? 0;\n\n  // merge controlled and uncontrolled states\n  const currentOpen = open ?? openState;\n  const currentHeight = height ?? heightState;\n\n  const setHeight = (drawerHeight: number, forceOpen?: boolean) => {\n    const newHeight = Math.max(drawerHeight, minimumHeight);\n    const newOpen = forceOpen ?? newHeight > minimumHeight;\n    setHeightState(newHeight);\n    setOpenState(newOpen);\n    if (onChange) {\n      onChange(newOpen, newHeight);\n    }\n  };\n\n  const handleDrag = (e: DraggableEvent) => {\n    setHeight(startRef.current - getPageY(e));\n  };\n\n  const handleResizeStart = (e: DraggableEvent) => {\n    e.preventDefault();\n    lastObservedHeightRef.current = currentHeight;\n    // always start with actual drawer height\n    const drawerHeight = drawerRef.current?.offsetHeight || currentHeight;\n    startRef.current = drawerHeight + getPageY(e);\n    if (drawerHeight !== currentHeight) {\n      setHeight(drawerHeight);\n    }\n  };\n\n  const handleResizeStop = () => {\n    if (currentHeight <= minimumHeight) {\n      setHeight(lastObservedHeightRef.current, false);\n    }\n  };\n\n  const draggable = resizable && (\n    <DraggableCoreIFrameFix\n      onDrag={handleDrag}\n      onStart={handleResizeStart}\n      onStop={handleResizeStop}\n    >\n      <div className=\"ocs-drawer__drag-handle\" />\n    </DraggableCoreIFrameFix>\n  );\n  return (\n    <CSSTransition appear in timeout={225} classNames=\"ocs-drawer\">\n      <div\n        ref={drawerRef}\n        className=\"ocs-drawer\"\n        style={{\n          height: currentOpen ? currentHeight : minimumHeight,\n          maxHeight,\n          minHeight: minimumHeight,\n        }}\n      >\n        {draggable}\n        <div ref={headerRef} className=\"ocs-drawer__header\">\n          {header}\n        </div>\n        <div className=\"ocs-drawer__body\">{children}</div>\n      </div>\n    </CSSTransition>\n  );\n};\n\nexport default Drawer;\n"]}]}