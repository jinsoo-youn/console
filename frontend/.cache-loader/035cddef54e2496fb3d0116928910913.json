{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/hooks/use-virtual-machine-import.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/hooks/use-virtual-machine-import.ts","mtime":1616735742420},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { getCreationTimestamp, getName, getNamespace } from '@console/shared/src/selectors/common';\nimport { VirtualMachineImportModel } from '../models';\nimport { VMImportWrappper } from '../k8s/wrapper/vm-import/vm-import-wrapper';\nimport { VMWrapper } from '../k8s/wrapper/vm/vm-wrapper';\nexport const useVirtualMachineImport = (vm) => {\n    const resourceWatch = React.useMemo(() => {\n        if (!vm) {\n            return null;\n        }\n        const vmImportOwnerReference = new VMWrapper(vm).getVMImportOwnerReference();\n        if (vmImportOwnerReference) {\n            return {\n                name: vmImportOwnerReference.name,\n                kind: VirtualMachineImportModel.kind,\n                namespace: getNamespace(vm),\n                isList: false,\n            };\n        }\n        return {\n            kind: VirtualMachineImportModel.kind,\n            namespace: getNamespace(vm),\n            isList: true,\n        };\n    }, [vm]);\n    const resourceWatchID = ((resourceWatch === null || resourceWatch === void 0 ? void 0 : resourceWatch.name) || '') + +':' + (resourceWatch === null || resourceWatch === void 0 ? void 0 : resourceWatch.namespace); // should be the unique identifier of a query\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    const resourceWatchWithVMChangesMemoized = React.useMemo(() => resourceWatch, [resourceWatchID]);\n    const [data, loaded, loadError] = useK8sWatchResource(resourceWatchWithVMChangesMemoized);\n    if (!resourceWatch) {\n        return [null, true];\n    }\n    let vmImport;\n    if (resourceWatch.isList) {\n        // eslint-disable-next-line prefer-destructuring\n        vmImport = (data || [])\n            .filter((vi) => new VMImportWrappper(vi).getResolvedVMTargetName() === getName(vm))\n            .sort((a, b) => (getCreationTimestamp(a) > getCreationTimestamp(b) ? -1 : 1))[0];\n    }\n    else {\n        vmImport = loadError ? null : data;\n    }\n    return [vmImport, loaded || !!loadError];\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/hooks/use-virtual-machine-import.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/hooks/use-virtual-machine-import.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,mBAAmB,EAAE,MAAM,mDAAmD,CAAC;AACxF,OAAO,EAAE,oBAAoB,EAAE,OAAO,EAAE,YAAY,EAAE,MAAM,sCAAsC,CAAC;AAGnG,OAAO,EAAE,yBAAyB,EAAE,MAAM,WAAW,CAAC;AACtD,OAAO,EAAE,gBAAgB,EAAE,MAAM,4CAA4C,CAAC;AAC9E,OAAO,EAAE,SAAS,EAAE,MAAM,8BAA8B,CAAC;AAEzD,MAAM,CAAC,MAAM,uBAAuB,GAAG,CAAC,EAAU,EAAE,EAAE;IACpD,MAAM,aAAa,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE;QACvC,IAAI,CAAC,EAAE,EAAE;YACP,OAAO,IAAI,CAAC;SACb;QAED,MAAM,sBAAsB,GAAG,IAAI,SAAS,CAAC,EAAE,CAAC,CAAC,yBAAyB,EAAE,CAAC;QAE7E,IAAI,sBAAsB,EAAE;YAC1B,OAAO;gBACL,IAAI,EAAE,sBAAsB,CAAC,IAAI;gBACjC,IAAI,EAAE,yBAAyB,CAAC,IAAI;gBACpC,SAAS,EAAE,YAAY,CAAC,EAAE,CAAC;gBAC3B,MAAM,EAAE,KAAK;aACd,CAAC;SACH;QACD,OAAO;YACL,IAAI,EAAE,yBAAyB,CAAC,IAAI;YACpC,SAAS,EAAE,YAAY,CAAC,EAAE,CAAC;YAC3B,MAAM,EAAE,IAAI;SACb,CAAC;IACJ,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC;IACT,MAAM,eAAe,GAAG,CAAC,CAAA,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,IAAI,KAAI,EAAE,CAAC,GAAG,CAAC,GAAG,IAAG,aAAa,aAAb,aAAa,uBAAb,aAAa,CAAE,SAAS,CAAA,CAAC,CAAC,6CAA6C;IACpI,uDAAuD;IACvD,MAAM,kCAAkC,GAAG,KAAK,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,aAAa,EAAE,CAAC,eAAe,CAAC,CAAC,CAAC;IAEjG,MAAM,CAAC,IAAI,EAAE,MAAM,EAAE,SAAS,CAAC,GAAG,mBAAmB,CACnD,kCAAkC,CACnC,CAAC;IAEF,IAAI,CAAC,aAAa,EAAE;QAClB,OAAO,CAAC,IAAI,EAAE,IAAI,CAA4B,CAAC;KAChD;IAED,IAAI,QAAQ,CAAC;IACb,IAAI,aAAa,CAAC,MAAM,EAAE;QACxB,gDAAgD;QAChD,QAAQ,GAAG,CAAE,IAAuB,IAAI,EAAE,CAAC;aACxC,MAAM,CAAC,CAAC,EAAE,EAAE,EAAE,CAAC,IAAI,gBAAgB,CAAC,EAAE,CAAC,CAAC,uBAAuB,EAAE,KAAK,OAAO,CAAC,EAAE,CAAC,CAAC;aAClF,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC,oBAAoB,CAAC,CAAC,CAAC,GAAG,oBAAoB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KACpF;SAAM;QACL,QAAQ,GAAG,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC;KACpC;IAED,OAAO,CAAC,QAAQ,EAAE,MAAM,IAAI,CAAC,CAAC,SAAS,CAA4B,CAAC;AACtE,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { getCreationTimestamp, getName, getNamespace } from '@console/shared/src/selectors/common';\nimport { VMKind } from '../types/vm';\nimport { VMImportKind } from '../types/vm-import/ovirt/vm-import';\nimport { VirtualMachineImportModel } from '../models';\nimport { VMImportWrappper } from '../k8s/wrapper/vm-import/vm-import-wrapper';\nimport { VMWrapper } from '../k8s/wrapper/vm/vm-wrapper';\n\nexport const useVirtualMachineImport = (vm: VMKind) => {\n  const resourceWatch = React.useMemo(() => {\n    if (!vm) {\n      return null;\n    }\n\n    const vmImportOwnerReference = new VMWrapper(vm).getVMImportOwnerReference();\n\n    if (vmImportOwnerReference) {\n      return {\n        name: vmImportOwnerReference.name,\n        kind: VirtualMachineImportModel.kind,\n        namespace: getNamespace(vm),\n        isList: false,\n      };\n    }\n    return {\n      kind: VirtualMachineImportModel.kind,\n      namespace: getNamespace(vm),\n      isList: true,\n    };\n  }, [vm]);\n  const resourceWatchID = (resourceWatch?.name || '') + +':' + resourceWatch?.namespace; // should be the unique identifier of a query\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const resourceWatchWithVMChangesMemoized = React.useMemo(() => resourceWatch, [resourceWatchID]);\n\n  const [data, loaded, loadError] = useK8sWatchResource<VMImportKind | VMImportKind[]>(\n    resourceWatchWithVMChangesMemoized,\n  );\n\n  if (!resourceWatch) {\n    return [null, true] as [VMImportKind, boolean];\n  }\n\n  let vmImport;\n  if (resourceWatch.isList) {\n    // eslint-disable-next-line prefer-destructuring\n    vmImport = ((data as VMImportKind[]) || [])\n      .filter((vi) => new VMImportWrappper(vi).getResolvedVMTargetName() === getName(vm))\n      .sort((a, b) => (getCreationTimestamp(a) > getCreationTimestamp(b) ? -1 : 1))[0];\n  } else {\n    vmImport = loadError ? null : data;\n  }\n\n  return [vmImport, loaded || !!loadError] as [VMImportKind, boolean];\n};\n"]}]}