{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/topology/components/groups/KnativeServiceNode.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/topology/components/groups/KnativeServiceNode.tsx","mtime":1615298458640},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { observer, useAnchor, RectAnchor, useCombineRefs, useHover, useDragNode, createSvgIdUrl, } from '@console/topology';\nimport { NodeShadows, NODE_SHADOW_FILTER_ID, NODE_SHADOW_FILTER_ID_HOVER, nodeDragSourceSpec, GroupNode, useSearchFilter, } from '@console/dev-console/src/components/topology';\nimport { TYPE_KNATIVE_SERVICE } from '../../const';\nconst KnativeServiceNode = ({ element, selected, onSelect, onContextMenu, contextMenuOpen, canDrop, dropTarget, edgeDragging, dndDropRef, editAccess, onHideCreateConnector, onShowCreateConnector, }) => {\n    useAnchor(React.useCallback((node) => new RectAnchor(node, 1.5), []));\n    const [hover, hoverRef] = useHover();\n    const [{ dragging }, dragNodeRef] = useDragNode(nodeDragSourceSpec(TYPE_KNATIVE_SERVICE, true, editAccess), {\n        element,\n    });\n    const refs = useCombineRefs(hoverRef, dragNodeRef);\n    const [filtered] = useSearchFilter(element.getLabel());\n    const { kind } = element.getData().data;\n    const { width, height } = element.getBounds();\n    React.useLayoutEffect(() => {\n        if (editAccess) {\n            if (hover) {\n                onShowCreateConnector && onShowCreateConnector();\n            }\n            else {\n                onHideCreateConnector && onHideCreateConnector();\n            }\n        }\n    }, [editAccess, hover, onShowCreateConnector, onHideCreateConnector]);\n    return (React.createElement(\"g\", { ref: refs, onContextMenu: onContextMenu, onClick: onSelect, className: classNames('odc-knative-service', {\n            'is-dragging': dragging,\n            'is-highlight': canDrop || edgeDragging,\n            'is-selected': selected,\n            'is-dropTarget': canDrop && dropTarget,\n            'is-filtered': filtered,\n        }) },\n        React.createElement(NodeShadows, null),\n        React.createElement(\"rect\", { ref: dndDropRef, className: \"odc-knative-service__bg\", filter: createSvgIdUrl(hover || dragging || contextMenuOpen || dropTarget\n                ? NODE_SHADOW_FILTER_ID_HOVER\n                : NODE_SHADOW_FILTER_ID), x: 0, y: 0, width: width, height: height, rx: \"5\", ry: \"5\" }),\n        React.createElement(GroupNode, { kind: kind, element: element, typeIconClass: \"icon-knative\", groupResources: element.getData().groupResources, emptyValue: \"No Revisions\" })));\n};\nexport default observer(KnativeServiceNode);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/topology/components/groups/KnativeServiceNode.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/topology/components/groups/KnativeServiceNode.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport {\n  observer,\n  Node,\n  useAnchor,\n  RectAnchor,\n  useCombineRefs,\n  useHover,\n  useDragNode,\n  WithDndDropProps,\n  WithSelectionProps,\n  WithContextMenuProps,\n  createSvgIdUrl,\n  WithCreateConnectorProps,\n} from '@console/topology';\nimport {\n  NodeShadows,\n  NODE_SHADOW_FILTER_ID,\n  NODE_SHADOW_FILTER_ID_HOVER,\n  nodeDragSourceSpec,\n  GroupNode,\n  useSearchFilter,\n} from '@console/dev-console/src/components/topology';\nimport { TYPE_KNATIVE_SERVICE } from '../../const';\n\ntype KnativeServiceNodeProps = {\n  element: Node;\n  highlight?: boolean;\n  canDrop?: boolean;\n  dropTarget?: boolean;\n  edgeDragging?: boolean;\n  editAccess: boolean;\n} & WithSelectionProps &\n  WithDndDropProps &\n  WithContextMenuProps &\n  WithCreateConnectorProps;\n\nconst KnativeServiceNode: React.FC<KnativeServiceNodeProps> = ({\n  element,\n  selected,\n  onSelect,\n  onContextMenu,\n  contextMenuOpen,\n  canDrop,\n  dropTarget,\n  edgeDragging,\n  dndDropRef,\n  editAccess,\n  onHideCreateConnector,\n  onShowCreateConnector,\n}) => {\n  useAnchor(React.useCallback((node: Node) => new RectAnchor(node, 1.5), []));\n  const [hover, hoverRef] = useHover();\n  const [{ dragging }, dragNodeRef] = useDragNode(\n    nodeDragSourceSpec(TYPE_KNATIVE_SERVICE, true, editAccess),\n    {\n      element,\n    },\n  );\n  const refs = useCombineRefs<SVGRectElement>(hoverRef, dragNodeRef);\n  const [filtered] = useSearchFilter(element.getLabel());\n  const { kind } = element.getData().data;\n  const { width, height } = element.getBounds();\n\n  React.useLayoutEffect(() => {\n    if (editAccess) {\n      if (hover) {\n        onShowCreateConnector && onShowCreateConnector();\n      } else {\n        onHideCreateConnector && onHideCreateConnector();\n      }\n    }\n  }, [editAccess, hover, onShowCreateConnector, onHideCreateConnector]);\n\n  return (\n    <g\n      ref={refs}\n      onContextMenu={onContextMenu}\n      onClick={onSelect}\n      className={classNames('odc-knative-service', {\n        'is-dragging': dragging,\n        'is-highlight': canDrop || edgeDragging,\n        'is-selected': selected,\n        'is-dropTarget': canDrop && dropTarget,\n        'is-filtered': filtered,\n      })}\n    >\n      <NodeShadows />\n      <rect\n        ref={dndDropRef}\n        className=\"odc-knative-service__bg\"\n        filter={createSvgIdUrl(\n          hover || dragging || contextMenuOpen || dropTarget\n            ? NODE_SHADOW_FILTER_ID_HOVER\n            : NODE_SHADOW_FILTER_ID,\n        )}\n        x={0}\n        y={0}\n        width={width}\n        height={height}\n        rx=\"5\"\n        ry=\"5\"\n      />\n      <GroupNode\n        kind={kind}\n        element={element}\n        typeIconClass=\"icon-knative\"\n        groupResources={element.getData().groupResources}\n        emptyValue=\"No Revisions\"\n      />\n    </g>\n  );\n};\n\nexport default observer(KnativeServiceNode);\n"]}]}