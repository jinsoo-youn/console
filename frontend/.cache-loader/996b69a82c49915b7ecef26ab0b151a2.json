{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/common/object-with-type-property-wrapper.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/common/object-with-type-property-wrapper.ts","mtime":1615298458670},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { ObjectEnum } from '../../../constants';\nimport { omitEmpty } from '../../../utils/common';\nimport { Wrapper } from './wrapper';\nexport class ObjectWithTypePropertyWrapper extends Wrapper {\n    constructor(data, copy = false, typeClass, typeDataPath = []) {\n        super(data, copy);\n        this.getType = () => this.TypeClass.getAll().find((type) => this.getIn([...this.typeDataPath, type.getValue()]));\n        this.getTypeValue = () => {\n            const type = this.getType();\n            return type && type.getValue();\n        };\n        this.hasType = () => !!this.getType();\n        this.getTypeData = (type) => {\n            const requestType = type || this.getType();\n            return requestType ? this.getIn([...this.typeDataPath, requestType.getValue()]) : undefined;\n        };\n        this.setType = (type, typeData, sanitize = true) => {\n            let typeDataParent = this.typeDataPath.length === 0 ? this.data : this.getIn(this.typeDataPath);\n            if (type && !typeDataParent) {\n                this.ensurePath(this.typeDataPath);\n                typeDataParent = this.getIn(this.typeDataPath);\n            }\n            if (typeDataParent) {\n                this.TypeClass.getAll().forEach((superfluousProperty) => delete typeDataParent[superfluousProperty.getValue()]);\n                if (type) {\n                    const finalTypeData = typeData\n                        ? sanitize\n                            ? this.sanitize(type, typeData) || {}\n                            : _.cloneDeep(typeData)\n                        : {};\n                    if (sanitize) {\n                        omitEmpty(finalTypeData, true);\n                    }\n                    typeDataParent[type.getValue()] = finalTypeData;\n                }\n            }\n            return this;\n        };\n        this.appendType = (type, newTypeData, sanitize = true) => this.setType(type, Object.assign(Object.assign({}, this.getTypeData(type)), newTypeData), sanitize);\n        this.setTypeData = (newTypeData, sanitize = true) => this.setType(this.getType(), newTypeData, sanitize);\n        this.TypeClass = typeClass;\n        this.typeDataPath = typeDataPath;\n        if (!typeClass || !_.isFunction(typeClass.getAll) || typeClass.getAll === ObjectEnum.getAll) {\n            throw new Error('typeClass must implement ObjectEnum.getAll method');\n        }\n    }\n    mergeWith(...wrappers) {\n        super.mergeWith(...wrappers);\n        const lastWithType = _.last(wrappers.filter((wrapper) => wrapper === null || wrapper === void 0 ? void 0 : wrapper.getType()));\n        if (lastWithType) {\n            this.appendType(lastWithType.getType(), undefined, false); // removes typeData of other types\n        }\n        return this;\n    }\n    appendTypeData(newTypeData, sanitize = true) {\n        return this.appendType(this.getType(), newTypeData, sanitize);\n    }\n    // should be implemented by derived wrappers\n    sanitize(type, typeData) {\n        return _.cloneDeep(typeData);\n    }\n}\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/common/object-with-type-property-wrapper.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/common/object-with-type-property-wrapper.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { ObjectEnum } from '../../../constants';\nimport { omitEmpty } from '../../../utils/common';\nimport { Wrapper } from './wrapper';\n\nexport abstract class ObjectWithTypePropertyWrapper<\n  RESOURCE,\n  TYPE extends ObjectEnum<string>,\n  COMBINED_TYPE_DATA,\n  SELF extends ObjectWithTypePropertyWrapper<RESOURCE, TYPE, COMBINED_TYPE_DATA, SELF>\n> extends Wrapper<RESOURCE, SELF> {\n  private readonly TypeClass: { getAll: () => TYPE[] | Readonly<TYPE[]> };\n\n  private readonly typeDataPath: string[];\n\n  protected constructor(\n    data: RESOURCE | SELF,\n    copy = false,\n    typeClass: { getAll: () => TYPE[] | Readonly<TYPE[]> },\n    typeDataPath: string[] = [],\n  ) {\n    super(data, copy);\n    this.TypeClass = typeClass;\n    this.typeDataPath = typeDataPath;\n    if (!typeClass || !_.isFunction(typeClass.getAll) || typeClass.getAll === ObjectEnum.getAll) {\n      throw new Error('typeClass must implement ObjectEnum.getAll method');\n    }\n  }\n\n  getType = (): TYPE =>\n    this.TypeClass.getAll().find((type) => this.getIn([...this.typeDataPath, type.getValue()]));\n\n  getTypeValue = (): string => {\n    const type = this.getType();\n    return type && type.getValue();\n  };\n\n  hasType = (): boolean => !!this.getType();\n\n  getTypeData = (type?: TYPE): COMBINED_TYPE_DATA => {\n    const requestType = type || this.getType();\n    return requestType ? this.getIn([...this.typeDataPath, requestType.getValue()]) : undefined;\n  };\n\n  mergeWith(...wrappers: SELF[]): SELF {\n    super.mergeWith(...wrappers);\n    const lastWithType = _.last(wrappers.filter((wrapper) => wrapper?.getType()));\n\n    if (lastWithType) {\n      this.appendType(lastWithType.getType(), undefined, false); // removes typeData of other types\n    }\n    return (this as any) as SELF;\n  }\n\n  setType = (type?: TYPE, typeData?: COMBINED_TYPE_DATA, sanitize = true) => {\n    let typeDataParent = this.typeDataPath.length === 0 ? this.data : this.getIn(this.typeDataPath);\n\n    if (type && !typeDataParent) {\n      this.ensurePath(this.typeDataPath);\n      typeDataParent = this.getIn(this.typeDataPath);\n    }\n\n    if (typeDataParent) {\n      this.TypeClass.getAll().forEach(\n        (superfluousProperty) => delete typeDataParent[superfluousProperty.getValue()],\n      );\n      if (type) {\n        const finalTypeData = typeData\n          ? sanitize\n            ? this.sanitize(type, typeData) || {}\n            : _.cloneDeep(typeData)\n          : {};\n        if (sanitize) {\n          omitEmpty(finalTypeData, true);\n        }\n        typeDataParent[type.getValue()] = finalTypeData;\n      }\n    }\n    return (this as any) as SELF;\n  };\n\n  appendType = (type?: TYPE, newTypeData?: COMBINED_TYPE_DATA, sanitize = true) =>\n    this.setType(type, { ...this.getTypeData(type), ...newTypeData }, sanitize);\n\n  setTypeData = (newTypeData?: COMBINED_TYPE_DATA, sanitize = true) =>\n    this.setType(this.getType(), newTypeData, sanitize);\n\n  appendTypeData(newTypeData?: COMBINED_TYPE_DATA, sanitize = true) {\n    return this.appendType(this.getType(), newTypeData, sanitize);\n  }\n\n  // should be implemented by derived wrappers\n  protected sanitize(type: TYPE, typeData: COMBINED_TYPE_DATA): COMBINED_TYPE_DATA {\n    return _.cloneDeep(typeData);\n  }\n}\n"]}]}