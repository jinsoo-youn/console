{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/anchors/RectAnchor.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/anchors/RectAnchor.ts","mtime":1616735742450},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { getRectAnchorPoint } from '../utils/anchor-utils';\nimport AbstractAnchor from './AbstractAnchor';\nexport default class RectAnchor extends AbstractAnchor {\n    getLocation(reference) {\n        const r = this.owner.getBounds();\n        const center = r.getCenter();\n        if (r.isEmpty()) {\n            return center;\n        }\n        const offset2x = this.offset * 2;\n        return getRectAnchorPoint(center, r.width + offset2x, r.height + offset2x, reference);\n    }\n}\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/anchors/RectAnchor.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/anchors/RectAnchor.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,kBAAkB,EAAE,MAAM,uBAAuB,CAAC;AAC3D,OAAO,cAAc,MAAM,kBAAkB,CAAC;AAE9C,MAAM,CAAC,OAAO,OAAO,UAAW,SAAQ,cAAc;IACpD,WAAW,CAAC,SAAgB;QAC1B,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;QACjC,MAAM,MAAM,GAAG,CAAC,CAAC,SAAS,EAAE,CAAC;QAC7B,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;YACf,OAAO,MAAM,CAAC;SACf;QAED,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QACjC,OAAO,kBAAkB,CAAC,MAAM,EAAE,CAAC,CAAC,KAAK,GAAG,QAAQ,EAAE,CAAC,CAAC,MAAM,GAAG,QAAQ,EAAE,SAAS,CAAC,CAAC;IACxF,CAAC;CACF","sourcesContent":["import Point from '../geom/Point';\nimport { getRectAnchorPoint } from '../utils/anchor-utils';\nimport AbstractAnchor from './AbstractAnchor';\n\nexport default class RectAnchor extends AbstractAnchor {\n  getLocation(reference: Point): Point {\n    const r = this.owner.getBounds();\n    const center = r.getCenter();\n    if (r.isEmpty()) {\n      return center;\n    }\n\n    const offset2x = this.offset * 2;\n    return getRectAnchorPoint(center, r.width + offset2x, r.height + offset2x, reference);\n  }\n}\n"]}]}