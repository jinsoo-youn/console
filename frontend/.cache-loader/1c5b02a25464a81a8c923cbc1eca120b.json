{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/noobaa-storage-plugin/src/components/data-consumption-card/data-consumption-card-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/noobaa-storage-plugin/src/components/data-consumption-card/data-consumption-card-utils.ts","mtime":1616735742440},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { humanizeBinaryBytes, humanizeNumber, } from '@console/internal/components/utils';\nimport { ACCOUNTS, BY_IOPS, BY_LOGICAL_USAGE, BY_PHYSICAL_VS_LOGICAL_USAGE, BY_EGRESS, PROVIDERS, } from '../../constants';\nimport { DATA_CONSUMPTION_QUERIES, ObjectServiceDashboardQuery } from '../../constants/queries';\nimport { getGaugeValue } from '../../utils';\nexport const DataConsumersValue = {\n    [PROVIDERS]: 'PROVIDERS_',\n    [ACCOUNTS]: 'ACCOUNTS_',\n};\nexport const DataConsumersSortByValue = {\n    [BY_IOPS]: 'BY_IOPS',\n    [BY_LOGICAL_USAGE]: 'BY_LOGICAL_USAGE',\n    [BY_PHYSICAL_VS_LOGICAL_USAGE]: 'BY_PHYSICAL_VS_LOGICAL_USAGE',\n    [BY_EGRESS]: 'BY_EGRESS',\n};\n/* utility mapper to convert number in words */\nexport const numberInWords = {\n    '': '',\n    k: 'thousands',\n    m: 'millions',\n    b: 'billions',\n};\nexport const getQueries = (metric, kpi) => {\n    const queries = DATA_CONSUMPTION_QUERIES[ObjectServiceDashboardQuery[DataConsumersValue[metric] + DataConsumersSortByValue[kpi]]];\n    const keys = Object.keys(queries);\n    return { queries, keys };\n};\nconst getMaxVal = (response, humanize) => {\n    const result = _.get(response, 'data.result', []);\n    let maxVal = { unit: '', value: 0, string: '' };\n    if (result.length) {\n        maxVal = humanize(_.maxBy(result, (r) => Number(r.value[1])).value[1]);\n    }\n    return maxVal;\n};\nexport const getChartData = (response, metric, humanize, unit, name) => {\n    const result = _.get(response, 'data.result', []);\n    return result.map((r) => {\n        const x = _.get(r, ['metric', metric], '');\n        const y = parseFloat(_.get(r, 'value[1]'));\n        let val = name;\n        if (!name)\n            val = x; // For Egress, which have the legend name(name) as providers name(x)\n        return {\n            name: val,\n            x: _.truncate(x, { length: 18 }),\n            y: Number(humanize(y, null, unit).value),\n        };\n    });\n};\nexport const getLegendData = (response, humanize) => {\n    const value = getGaugeValue(response);\n    return value ? humanize(value).string : '';\n};\nexport const getDataConsumptionChartData = (result, metric, dropdownValue) => {\n    let chartData;\n    let legendData;\n    let max;\n    let firstBarMax;\n    let secondBarMax;\n    let nonFormattedData;\n    switch (dropdownValue) {\n        case 'PROVIDERS_BY_IOPS':\n        case 'ACCOUNTS_BY_IOPS':\n            firstBarMax = getMaxVal(result.read, humanizeNumber);\n            secondBarMax = getMaxVal(result.write, humanizeNumber);\n            max = firstBarMax.value > secondBarMax.value ? firstBarMax : secondBarMax;\n            chartData = [\n                getChartData(result.read, metric, humanizeNumber, max.unit, 'Total Reads'),\n                getChartData(result.write, metric, humanizeNumber, max.unit, 'Total Writes'),\n            ];\n            legendData = [\n                { name: `Total Reads ${getLegendData(result.totalRead, humanizeNumber)}` },\n                { name: `Total Writes ${getLegendData(result.totalWrite, humanizeNumber)}` },\n            ];\n            break;\n        case 'ACCOUNTS_BY_LOGICAL_USAGE':\n            max = getMaxVal(result.logicalUsage, humanizeBinaryBytes);\n            chartData = [\n                getChartData(result.logicalUsage, metric, humanizeBinaryBytes, max.unit, 'Total Logical Used Capacity'),\n            ];\n            legendData = [\n                {\n                    name: `Total Logical Used Capacity ${getLegendData(result.totalLogicalUsage, humanizeBinaryBytes)}`,\n                },\n            ];\n            break;\n        case 'PROVIDERS_BY_PHYSICAL_VS_LOGICAL_USAGE':\n            firstBarMax = getMaxVal(result.physicalUsage, humanizeBinaryBytes);\n            secondBarMax = getMaxVal(result.logicalUsage, humanizeBinaryBytes);\n            max = firstBarMax.value > secondBarMax.value ? firstBarMax : secondBarMax;\n            chartData = [\n                getChartData(result.logicalUsage, metric, humanizeBinaryBytes, max.unit, 'Total Logical Used Capacity'),\n                getChartData(result.physicalUsage, metric, humanizeBinaryBytes, max.unit, 'Total Physical Used Capacity'),\n            ];\n            legendData = [\n                {\n                    name: `Total Logical Used Capacity ${getLegendData(result.totalLogicalUsage, humanizeBinaryBytes)}`,\n                },\n                {\n                    name: `Total Physical Used Capacity ${getLegendData(result.totalPhysicalUsage, humanizeBinaryBytes)}`,\n                },\n            ];\n            break;\n        case 'PROVIDERS_BY_EGRESS':\n            max = getMaxVal(result.egress, humanizeBinaryBytes);\n            nonFormattedData = getChartData(result.egress, metric, humanizeBinaryBytes, max.unit);\n            chartData = nonFormattedData.length ? nonFormattedData.map((dataPoint) => [dataPoint]) : [[]];\n            legendData = nonFormattedData.map((dataPoint) => ({\n                name: `${dataPoint.x.replace(/(^[A-Z]|_[A-Z])([A-Z]+)/g, (_g, g1, g2) => g1 + g2.toLowerCase())} ${dataPoint.y} ${max.unit}`,\n            }));\n            break;\n        default:\n            chartData = [[{ x: '', y: 0, name: '' }]];\n            legendData = [{ name: '' }];\n    }\n    return { chartData, legendData, max };\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/noobaa-storage-plugin/src/components/data-consumption-card/data-consumption-card-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/noobaa-storage-plugin/src/components/data-consumption-card/data-consumption-card-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport {\n  Humanize,\n  humanizeBinaryBytes,\n  humanizeNumber,\n  HumanizeResult,\n} from '@console/internal/components/utils';\nimport { PrometheusResponse } from '@console/internal/components/graphs';\nimport {\n  ACCOUNTS,\n  BY_IOPS,\n  BY_LOGICAL_USAGE,\n  BY_PHYSICAL_VS_LOGICAL_USAGE,\n  BY_EGRESS,\n  PROVIDERS,\n} from '../../constants';\nimport { DATA_CONSUMPTION_QUERIES, ObjectServiceDashboardQuery } from '../../constants/queries';\nimport { getGaugeValue } from '../../utils';\n\nexport const DataConsumersValue = {\n  [PROVIDERS]: 'PROVIDERS_',\n  [ACCOUNTS]: 'ACCOUNTS_',\n};\nexport const DataConsumersSortByValue = {\n  [BY_IOPS]: 'BY_IOPS',\n  [BY_LOGICAL_USAGE]: 'BY_LOGICAL_USAGE',\n  [BY_PHYSICAL_VS_LOGICAL_USAGE]: 'BY_PHYSICAL_VS_LOGICAL_USAGE',\n  [BY_EGRESS]: 'BY_EGRESS',\n};\n\n/* utility mapper to convert number in words */\nexport const numberInWords: { [k: string]: string } = {\n  '': '',\n  k: 'thousands',\n  m: 'millions',\n  b: 'billions',\n};\n\nexport const getQueries: GetQueries = (metric, kpi) => {\n  const queries =\n    DATA_CONSUMPTION_QUERIES[\n      ObjectServiceDashboardQuery[DataConsumersValue[metric] + DataConsumersSortByValue[kpi]]\n    ];\n  const keys = Object.keys(queries);\n  return { queries, keys };\n};\n\nconst getMaxVal: GetMaxVal = (response, humanize) => {\n  const result: PrometheusResponse['data']['result'] = _.get(response, 'data.result', []);\n  let maxVal = { unit: '', value: 0, string: '' };\n  if (result.length) {\n    maxVal = humanize(_.maxBy(result, (r) => Number(r.value[1])).value[1]);\n  }\n  return maxVal;\n};\n\nexport const getChartData: GetChartData = (response, metric, humanize, unit, name) => {\n  const result = _.get(response, 'data.result', []);\n  return result.map((r) => {\n    const x = _.get(r, ['metric', metric], '');\n    const y = parseFloat(_.get(r, 'value[1]'));\n    let val = name;\n    if (!name) val = x; // For Egress, which have the legend name(name) as providers name(x)\n    return {\n      name: val,\n      x: _.truncate(x, { length: 18 }),\n      y: Number(humanize(y, null, unit).value),\n    };\n  });\n};\n\nexport const getLegendData: GetLegendData = (response, humanize) => {\n  const value = getGaugeValue(response);\n  return value ? humanize(value).string : '';\n};\n\nexport const getDataConsumptionChartData: GetDataConsumptionChartData = (\n  result,\n  metric,\n  dropdownValue,\n) => {\n  let chartData: ChartData;\n  let legendData: LegendData;\n  let max: HumanizeResult;\n  let firstBarMax: HumanizeResult;\n  let secondBarMax: HumanizeResult;\n  let nonFormattedData: ChartDataPoint[];\n  switch (dropdownValue) {\n    case 'PROVIDERS_BY_IOPS':\n    case 'ACCOUNTS_BY_IOPS':\n      firstBarMax = getMaxVal(result.read, humanizeNumber);\n      secondBarMax = getMaxVal(result.write, humanizeNumber);\n      max = firstBarMax.value > secondBarMax.value ? firstBarMax : secondBarMax;\n      chartData = [\n        getChartData(result.read, metric, humanizeNumber, max.unit, 'Total Reads'),\n        getChartData(result.write, metric, humanizeNumber, max.unit, 'Total Writes'),\n      ];\n      legendData = [\n        { name: `Total Reads ${getLegendData(result.totalRead, humanizeNumber)}` },\n        { name: `Total Writes ${getLegendData(result.totalWrite, humanizeNumber)}` },\n      ];\n      break;\n    case 'ACCOUNTS_BY_LOGICAL_USAGE':\n      max = getMaxVal(result.logicalUsage, humanizeBinaryBytes);\n      chartData = [\n        getChartData(\n          result.logicalUsage,\n          metric,\n          humanizeBinaryBytes,\n          max.unit,\n          'Total Logical Used Capacity',\n        ),\n      ];\n      legendData = [\n        {\n          name: `Total Logical Used Capacity ${getLegendData(\n            result.totalLogicalUsage,\n            humanizeBinaryBytes,\n          )}`,\n        },\n      ];\n      break;\n    case 'PROVIDERS_BY_PHYSICAL_VS_LOGICAL_USAGE':\n      firstBarMax = getMaxVal(result.physicalUsage, humanizeBinaryBytes);\n      secondBarMax = getMaxVal(result.logicalUsage, humanizeBinaryBytes);\n      max = firstBarMax.value > secondBarMax.value ? firstBarMax : secondBarMax;\n      chartData = [\n        getChartData(\n          result.logicalUsage,\n          metric,\n          humanizeBinaryBytes,\n          max.unit,\n          'Total Logical Used Capacity',\n        ),\n        getChartData(\n          result.physicalUsage,\n          metric,\n          humanizeBinaryBytes,\n          max.unit,\n          'Total Physical Used Capacity',\n        ),\n      ];\n      legendData = [\n        {\n          name: `Total Logical Used Capacity ${getLegendData(\n            result.totalLogicalUsage,\n            humanizeBinaryBytes,\n          )}`,\n        },\n        {\n          name: `Total Physical Used Capacity ${getLegendData(\n            result.totalPhysicalUsage,\n            humanizeBinaryBytes,\n          )}`,\n        },\n      ];\n      break;\n    case 'PROVIDERS_BY_EGRESS':\n      max = getMaxVal(result.egress, humanizeBinaryBytes);\n      nonFormattedData = getChartData(result.egress, metric, humanizeBinaryBytes, max.unit);\n      chartData = nonFormattedData.length ? nonFormattedData.map((dataPoint) => [dataPoint]) : [[]];\n      legendData = nonFormattedData.map((dataPoint) => ({\n        name: `${dataPoint.x.replace(\n          /(^[A-Z]|_[A-Z])([A-Z]+)/g,\n          (_g, g1, g2) => g1 + g2.toLowerCase(),\n        )} ${dataPoint.y} ${max.unit}`,\n      }));\n      break;\n    default:\n      chartData = [[{ x: '', y: 0, name: '' }]];\n      legendData = [{ name: '' }];\n  }\n  return { chartData, legendData, max };\n};\n\nexport type ChartDataPoint = {\n  x: string;\n  y: number;\n  name: string;\n};\n\ntype ChartData = ChartDataPoint[][];\n\ntype LegendData = { name: string }[];\n\ntype QueryObject = {\n  [key: string]: string;\n};\n\ntype GetChartData = (\n  response: PrometheusResponse,\n  metric: string,\n  humanize: Humanize,\n  maxUnit: string,\n  name?: string,\n) => ChartDataPoint[];\n\ntype GetDataConsumptionChartData = (\n  result: { [key: string]: PrometheusResponse },\n  metric: string,\n  dropdownValue: string,\n) => {\n  chartData: ChartData;\n  legendData: LegendData;\n  max: HumanizeResult;\n};\n\ntype GetQueries = (metric: string, kpi: string) => { queries: QueryObject; keys: string[] };\n\ntype GetMaxVal = (response: PrometheusResponse, humanize: Humanize) => HumanizeResult;\n\ntype GetLegendData = (response: PrometheusResponse, humanize: Humanize) => string;\n"]}]}