{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/revisions/RevisionRow.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/revisions/RevisionRow.tsx","mtime":1615298458640},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as cx from 'classnames';\nimport * as _ from 'lodash';\nimport { TableRow, TableData } from '@console/internal/components/factory';\nimport { ResourceLink, ResourceKebab, Timestamp } from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { RevisionModel, ServiceModel } from '../../models';\nimport { getConditionString, getCondition } from '../../utils/condition-utils';\nimport { ConditionTypes } from '../../types';\nimport { tableColumnClasses } from './revision-table';\nimport { getRevisionActions } from '../../actions/getRevisionActions';\nconst revisionReference = referenceForModel(RevisionModel);\nconst serviceReference = referenceForModel(ServiceModel);\nconst RevisionRow = ({ obj, index, key, style }) => {\n    const readyCondition = obj.status\n        ? getCondition(obj.status.conditions, ConditionTypes.Ready)\n        : null;\n    const service = _.get(obj.metadata, `labels[\"serving.knative.dev/service\"]`);\n    return (React.createElement(TableRow, { id: obj.metadata.uid, index: index, trKey: key, style: style },\n        React.createElement(TableData, { className: tableColumnClasses[0] },\n            React.createElement(ResourceLink, { kind: revisionReference, name: obj.metadata.name, namespace: obj.metadata.namespace, title: obj.metadata.uid })),\n        React.createElement(TableData, { className: cx(tableColumnClasses[1], 'co-break-word') },\n            React.createElement(ResourceLink, { kind: \"Namespace\", name: obj.metadata.namespace })),\n        React.createElement(TableData, { className: cx(tableColumnClasses[2], 'co-break-word') }, service && (React.createElement(ResourceLink, { kind: serviceReference, name: service, namespace: obj.metadata.namespace, title: service }))),\n        React.createElement(TableData, { className: tableColumnClasses[3] },\n            React.createElement(Timestamp, { timestamp: obj.metadata.creationTimestamp })),\n        React.createElement(TableData, { className: tableColumnClasses[4] }, obj.status ? getConditionString(obj.status.conditions) : '-'),\n        React.createElement(TableData, { className: tableColumnClasses[5] }, (readyCondition && readyCondition.status) || '-'),\n        React.createElement(TableData, { className: tableColumnClasses[6] }, (readyCondition && readyCondition.message) || '-'),\n        React.createElement(TableData, { className: tableColumnClasses[7] },\n            React.createElement(ResourceKebab, { actions: getRevisionActions(), kind: revisionReference, resource: obj }))));\n};\nexport default RevisionRow;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/revisions/RevisionRow.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/revisions/RevisionRow.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as cx from 'classnames';\nimport * as _ from 'lodash';\nimport { TableRow, TableData, RowFunction } from '@console/internal/components/factory';\nimport { ResourceLink, ResourceKebab, Timestamp } from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { RevisionModel, ServiceModel } from '../../models';\nimport { getConditionString, getCondition } from '../../utils/condition-utils';\nimport { RevisionKind, ConditionTypes } from '../../types';\nimport { tableColumnClasses } from './revision-table';\nimport { getRevisionActions } from '../../actions/getRevisionActions';\n\nconst revisionReference = referenceForModel(RevisionModel);\nconst serviceReference = referenceForModel(ServiceModel);\n\nconst RevisionRow: RowFunction<RevisionKind> = ({ obj, index, key, style }) => {\n  const readyCondition = obj.status\n    ? getCondition(obj.status.conditions, ConditionTypes.Ready)\n    : null;\n  const service = _.get(obj.metadata, `labels[\"serving.knative.dev/service\"]`);\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={revisionReference}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n          title={obj.metadata.uid}\n        />\n      </TableData>\n      <TableData className={cx(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={cx(tableColumnClasses[2], 'co-break-word')}>\n        {service && (\n          <ResourceLink\n            kind={serviceReference}\n            name={service}\n            namespace={obj.metadata.namespace}\n            title={service}\n          />\n        )}\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <Timestamp timestamp={obj.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        {obj.status ? getConditionString(obj.status.conditions) : '-'}\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        {(readyCondition && readyCondition.status) || '-'}\n      </TableData>\n      <TableData className={tableColumnClasses[6]}>\n        {(readyCondition && readyCondition.message) || '-'}\n      </TableData>\n      <TableData className={tableColumnClasses[7]}>\n        <ResourceKebab actions={getRevisionActions()} kind={revisionReference} resource={obj} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport default RevisionRow;\n"]}]}