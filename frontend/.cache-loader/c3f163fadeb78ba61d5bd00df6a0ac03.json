{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/topology-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/topology-utils.ts","mtime":1615298458630},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { modelFor, referenceFor } from '@console/internal/module/k8s';\nimport { getRouteWebURL } from '@console/internal/components/routes';\nimport { createResourceConnection, updateResourceApplication, removeResourceConnection, createServiceBinding, removeServiceBinding, } from '../../utils/application-utils';\nimport { TYPE_OPERATOR_BACKED_SERVICE } from './operators/components/const';\nimport { ALLOW_SERVICE_BINDING } from '../../const';\nexport const allowedResources = ['deployments', 'deploymentConfigs', 'daemonSets', 'statefulSets'];\nexport const getServiceBindingStatus = ({ FLAGS }) => FLAGS.get(ALLOW_SERVICE_BINDING);\nexport const getCheURL = (consoleLinks) => _.get(_.find(consoleLinks, ['metadata.name', 'che']), 'spec.href', '');\nexport const getEditURL = (gitURL, cheURL) => {\n    return gitURL && cheURL ? `${cheURL}/f?url=${gitURL}&policies.create=peruser` : gitURL;\n};\nexport const getHelmReleaseKey = (resource) => `${resource.kind}---${resource.metadata.name}`;\nexport const isHelmReleaseNode = (obj, helmResourcesMap) => {\n    if (helmResourcesMap) {\n        return helmResourcesMap.hasOwnProperty(getHelmReleaseKey(obj));\n    }\n    return false;\n};\nexport const getKialiLink = (consoleLinks, namespace) => {\n    var _a, _b;\n    const kialiLink = (_b = (_a = _.find(consoleLinks, ['metadata.name', `kiali-namespace-${namespace}`])) === null || _a === void 0 ? void 0 : _a.spec) === null || _b === void 0 ? void 0 : _b.href;\n    return kialiLink || '';\n};\n/**\n * filter data based on the active application\n */\nexport const filterBasedOnActiveApplication = (data, application) => {\n    const PART_OF = 'app.kubernetes.io/part-of';\n    if (!application) {\n        return data;\n    }\n    return data.filter((dc) => {\n        return _.get(dc, ['metadata', 'labels', PART_OF]) === application;\n    });\n};\n/**\n * get the route data\n */\nconst getRouteData = (ksroutes, resource) => {\n    if (ksroutes && ksroutes.length > 0 && !_.isEmpty(ksroutes[0].status)) {\n        const trafficData = _.find(ksroutes[0].status.traffic, {\n            revisionName: resource.obj.metadata.name,\n        });\n        return _.get(trafficData, 'url', ksroutes[0].status.url);\n    }\n    return null;\n};\n/**\n * get routes url\n */\nexport const getRoutesURL = (resource) => {\n    const { routes, ksroutes } = resource;\n    if (routes.length > 0 && !_.isEmpty(routes[0].spec)) {\n        return getRouteWebURL(routes[0]);\n    }\n    return getRouteData(ksroutes, resource);\n};\nexport const getTopologyResourceObject = (topologyObject) => {\n    if (!topologyObject) {\n        return null;\n    }\n    return _.get(topologyObject, ['resources', 'obj']);\n};\nexport const updateTopologyResourceApplication = (item, application) => {\n    if (!item || !_.size(item.resources)) {\n        return Promise.reject();\n    }\n    const resources = [];\n    const updates = [];\n    resources.push(getTopologyResourceObject(item));\n    if (item.type === TYPE_OPERATOR_BACKED_SERVICE) {\n        _.forEach(item.groupResources, (groupResource) => {\n            resources.push(getTopologyResourceObject(groupResource));\n        });\n    }\n    for (const resource of resources) {\n        const resourceKind = modelFor(referenceFor(resource));\n        if (!resourceKind) {\n            return Promise.reject(new Error(`Unable to update application, invalid resource type: ${resource.kind}`));\n        }\n        updates.push(updateResourceApplication(resourceKind, resource, application));\n    }\n    return Promise.all(updates);\n};\nexport const createTopologyResourceConnection = (source, target, replaceTarget = null, serviceBindingFlag) => {\n    if (!source || !target || source === target) {\n        return Promise.reject(new Error('Can not create a connection from a node to itself.'));\n    }\n    const sourceObj = getTopologyResourceObject(source);\n    const targetObj = getTopologyResourceObject(target);\n    const replaceTargetObj = replaceTarget && getTopologyResourceObject(replaceTarget);\n    if (serviceBindingFlag && target.operatorBackedService) {\n        if (replaceTarget) {\n            return new Promise((resolve, reject) => {\n                createServiceBinding(sourceObj, targetObj)\n                    .then(() => {\n                    // eslint-disable-next-line promise/no-nesting\n                    removeResourceConnection(sourceObj, replaceTargetObj)\n                        .then(resolve)\n                        .catch(reject);\n                })\n                    .catch(reject);\n            });\n        }\n        return createServiceBinding(sourceObj, targetObj);\n    }\n    return createResourceConnection(sourceObj, targetObj, replaceTargetObj);\n};\nexport const removeTopologyResourceConnection = (source, target, sbr, edgeType) => {\n    if (!source || !target) {\n        return Promise.reject();\n    }\n    const sourceObj = getTopologyResourceObject(source);\n    const targetObj = getTopologyResourceObject(target);\n    if (edgeType === 'service-binding') {\n        return removeServiceBinding(sbr);\n    }\n    return removeResourceConnection(sourceObj, targetObj);\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/topology-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/topology/topology-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { K8sResourceKind, modelFor, referenceFor } from '@console/internal/module/k8s';\nimport { RootState } from '@console/internal/redux';\nimport { getRouteWebURL } from '@console/internal/components/routes';\nimport { OverviewItem } from '@console/shared';\nimport {\n  createResourceConnection,\n  updateResourceApplication,\n  removeResourceConnection,\n  createServiceBinding,\n  removeServiceBinding,\n} from '../../utils/application-utils';\nimport { TopologyDataObject } from './topology-types';\nimport { TYPE_OPERATOR_BACKED_SERVICE } from './operators/components/const';\nimport { HelmReleaseResourcesMap } from '../helm/helm-types';\nimport { ALLOW_SERVICE_BINDING } from '../../const';\n\nexport const allowedResources = ['deployments', 'deploymentConfigs', 'daemonSets', 'statefulSets'];\n\nexport const getServiceBindingStatus = ({ FLAGS }: RootState): boolean =>\n  FLAGS.get(ALLOW_SERVICE_BINDING);\n\nexport const getCheURL = (consoleLinks: K8sResourceKind[]) =>\n  _.get(_.find(consoleLinks, ['metadata.name', 'che']), 'spec.href', '');\n\nexport const getEditURL = (gitURL: string, cheURL: string) => {\n  return gitURL && cheURL ? `${cheURL}/f?url=${gitURL}&policies.create=peruser` : gitURL;\n};\n\nexport const getHelmReleaseKey = (resource) => `${resource.kind}---${resource.metadata.name}`;\n\nexport const isHelmReleaseNode = (\n  obj: K8sResourceKind,\n  helmResourcesMap: HelmReleaseResourcesMap,\n): boolean => {\n  if (helmResourcesMap) {\n    return helmResourcesMap.hasOwnProperty(getHelmReleaseKey(obj));\n  }\n  return false;\n};\n\nexport const getKialiLink = (consoleLinks: K8sResourceKind[], namespace: string): string => {\n  const kialiLink = _.find(consoleLinks, ['metadata.name', `kiali-namespace-${namespace}`])?.spec\n    ?.href;\n  return kialiLink || '';\n};\n\n/**\n * filter data based on the active application\n */\nexport const filterBasedOnActiveApplication = (\n  data: K8sResourceKind[],\n  application: string,\n): K8sResourceKind[] => {\n  const PART_OF = 'app.kubernetes.io/part-of';\n  if (!application) {\n    return data;\n  }\n  return data.filter((dc) => {\n    return _.get(dc, ['metadata', 'labels', PART_OF]) === application;\n  });\n};\n\n/**\n * get the route data\n */\nconst getRouteData = (ksroutes: K8sResourceKind[], resource: OverviewItem): string => {\n  if (ksroutes && ksroutes.length > 0 && !_.isEmpty(ksroutes[0].status)) {\n    const trafficData = _.find(ksroutes[0].status.traffic, {\n      revisionName: resource.obj.metadata.name,\n    });\n    return _.get(trafficData, 'url', ksroutes[0].status.url);\n  }\n  return null;\n};\n\n/**\n * get routes url\n */\nexport const getRoutesURL = (resource: OverviewItem): string => {\n  const { routes, ksroutes } = resource;\n  if (routes.length > 0 && !_.isEmpty(routes[0].spec)) {\n    return getRouteWebURL(routes[0]);\n  }\n  return getRouteData(ksroutes, resource);\n};\n\nexport const getTopologyResourceObject = (topologyObject: TopologyDataObject): K8sResourceKind => {\n  if (!topologyObject) {\n    return null;\n  }\n  return _.get(topologyObject, ['resources', 'obj']);\n};\n\nexport const updateTopologyResourceApplication = (\n  item: TopologyDataObject,\n  application: string,\n): Promise<any> => {\n  if (!item || !_.size(item.resources)) {\n    return Promise.reject();\n  }\n\n  const resources: K8sResourceKind[] = [];\n  const updates: Promise<any>[] = [];\n\n  resources.push(getTopologyResourceObject(item));\n\n  if (item.type === TYPE_OPERATOR_BACKED_SERVICE) {\n    _.forEach(item.groupResources, (groupResource) => {\n      resources.push(getTopologyResourceObject(groupResource));\n    });\n  }\n\n  for (const resource of resources) {\n    const resourceKind = modelFor(referenceFor(resource));\n    if (!resourceKind) {\n      return Promise.reject(\n        new Error(`Unable to update application, invalid resource type: ${resource.kind}`),\n      );\n    }\n    updates.push(updateResourceApplication(resourceKind, resource, application));\n  }\n\n  return Promise.all(updates);\n};\n\nexport const createTopologyResourceConnection = (\n  source: TopologyDataObject,\n  target: TopologyDataObject,\n  replaceTarget: TopologyDataObject = null,\n  serviceBindingFlag: boolean,\n): Promise<K8sResourceKind[] | K8sResourceKind> => {\n  if (!source || !target || source === target) {\n    return Promise.reject(new Error('Can not create a connection from a node to itself.'));\n  }\n\n  const sourceObj = getTopologyResourceObject(source);\n  const targetObj = getTopologyResourceObject(target);\n  const replaceTargetObj = replaceTarget && getTopologyResourceObject(replaceTarget);\n\n  if (serviceBindingFlag && target.operatorBackedService) {\n    if (replaceTarget) {\n      return new Promise<K8sResourceKind[] | K8sResourceKind>((resolve, reject) => {\n        createServiceBinding(sourceObj, targetObj)\n          .then(() => {\n            // eslint-disable-next-line promise/no-nesting\n            removeResourceConnection(sourceObj, replaceTargetObj)\n              .then(resolve)\n              .catch(reject);\n          })\n          .catch(reject);\n      });\n    }\n\n    return createServiceBinding(sourceObj, targetObj);\n  }\n\n  return createResourceConnection(sourceObj, targetObj, replaceTargetObj);\n};\n\nexport const removeTopologyResourceConnection = (\n  source: TopologyDataObject,\n  target: TopologyDataObject,\n  sbr: K8sResourceKind,\n  edgeType: string,\n): Promise<any> => {\n  if (!source || !target) {\n    return Promise.reject();\n  }\n\n  const sourceObj = getTopologyResourceObject(source);\n  const targetObj = getTopologyResourceObject(target);\n\n  if (edgeType === 'service-binding') {\n    return removeServiceBinding(sbr);\n  }\n\n  return removeResourceConnection(sourceObj, targetObj);\n};\n"]}]}