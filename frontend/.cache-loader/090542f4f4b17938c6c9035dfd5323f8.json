{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/autocomplete.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/autocomplete.tsx","mtime":1616735742460},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { useDocumentListener, getLabelsAsString } from '@console/shared';\nimport { KeyEventModes } from '@console/shared/src/hooks';\nimport { fuzzyCaseInsensitive } from './factory/table-filters';\nimport { TextFilter } from './factory';\nconst MAX_SUGGESTIONS = 5;\nconst labelParser = (resources) => {\n    return resources.reduce((acc, resource) => {\n        getLabelsAsString(resource).forEach((label) => acc.add(label));\n        return acc;\n    }, new Set());\n};\nconst suggestionBoxKeyHandler = {\n    Escape: KeyEventModes.HIDE,\n};\nconst AutocompleteInput = (props) => {\n    const [suggestions, setSuggestions] = React.useState();\n    const { visible, setVisible, ref } = useDocumentListener(suggestionBoxKeyHandler);\n    const { textValue, setTextValue, onSuggestionSelect, placeholder, showSuggestions, data, className, } = props;\n    const onSelect = (value) => {\n        onSuggestionSelect(value);\n        if (visible) {\n            setVisible(false);\n        }\n    };\n    const activate = () => {\n        if (textValue.trim()) {\n            setVisible(true);\n        }\n    };\n    const handleInput = (input) => {\n        if (input) {\n            setVisible(true);\n        }\n        else {\n            setVisible(false);\n        }\n        setTextValue(input);\n    };\n    React.useEffect(() => {\n        if (textValue && visible && showSuggestions) {\n            const processed = labelParser(data);\n            const filtered = [...processed]\n                .filter((item) => fuzzyCaseInsensitive(textValue, item))\n                .slice(0, MAX_SUGGESTIONS);\n            setSuggestions(filtered);\n        }\n    }, [visible, textValue, showSuggestions, data]);\n    return (React.createElement(\"div\", { className: \"co-suggestion-box\", ref: ref },\n        React.createElement(\"div\", { className: \"has-feedback\" },\n            React.createElement(TextFilter, { \"data-test-id\": \"list-page-search-input\", \"aria-label\": \"Enter Query\", value: textValue, onChange: handleInput, placeholder: placeholder, onFocus: activate })),\n        showSuggestions && (React.createElement(\"div\", { className: classNames('co-suggestion-box__suggestions', {\n                'co-suggestion-box__suggestions--shadowed': visible && (suggestions === null || suggestions === void 0 ? void 0 : suggestions.length) > 0,\n            }) }, visible && (suggestions === null || suggestions === void 0 ? void 0 : suggestions.map((elem) => (React.createElement(SuggestionLine, { suggestion: elem, key: elem, onClick: onSelect, className: className }))))))));\n};\nconst SuggestionLine = ({ suggestion, onClick, className }) => {\n    return (React.createElement(\"button\", { className: \"co-suggestion-line\", onClick: () => onClick(suggestion) },\n        React.createElement(\"span\", { className: className }, suggestion)));\n};\nexport default AutocompleteInput;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/autocomplete.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/autocomplete.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { useDocumentListener, getLabelsAsString } from '@console/shared';\nimport { KeyEventModes } from '@console/shared/src/hooks';\nimport { fuzzyCaseInsensitive } from './factory/table-filters';\nimport { K8sResourceCommon } from '../module/k8s';\nimport { TextFilter } from './factory';\n\nconst MAX_SUGGESTIONS = 5;\n\nconst labelParser = (resources: K8sResourceCommon[]): Set<string> => {\n  return resources.reduce((acc: Set<string>, resource: K8sResourceCommon) => {\n    getLabelsAsString(resource).forEach((label) => acc.add(label));\n    return acc;\n  }, new Set<string>());\n};\n\nconst suggestionBoxKeyHandler = {\n  Escape: KeyEventModes.HIDE,\n};\n\nconst AutocompleteInput: React.FC<AutocompleteInputProps> = (props) => {\n  const [suggestions, setSuggestions] = React.useState<string[]>();\n  const { visible, setVisible, ref } = useDocumentListener<HTMLDivElement>(suggestionBoxKeyHandler);\n  const {\n    textValue,\n    setTextValue,\n    onSuggestionSelect,\n    placeholder,\n    showSuggestions,\n    data,\n    className,\n  } = props;\n\n  const onSelect = (value: string) => {\n    onSuggestionSelect(value);\n    if (visible) {\n      setVisible(false);\n    }\n  };\n\n  const activate = () => {\n    if (textValue.trim()) {\n      setVisible(true);\n    }\n  };\n\n  const handleInput = (input: string) => {\n    if (input) {\n      setVisible(true);\n    } else {\n      setVisible(false);\n    }\n    setTextValue(input);\n  };\n\n  React.useEffect(() => {\n    if (textValue && visible && showSuggestions) {\n      const processed = labelParser(data);\n      const filtered = [...processed]\n        .filter((item) => fuzzyCaseInsensitive(textValue, item))\n        .slice(0, MAX_SUGGESTIONS);\n      setSuggestions(filtered);\n    }\n  }, [visible, textValue, showSuggestions, data]);\n\n  return (\n    <div className=\"co-suggestion-box\" ref={ref}>\n      <div className=\"has-feedback\">\n        <TextFilter\n          data-test-id=\"list-page-search-input\"\n          aria-label=\"Enter Query\"\n          value={textValue}\n          onChange={handleInput}\n          placeholder={placeholder}\n          onFocus={activate}\n        />\n      </div>\n      {showSuggestions && (\n        <div\n          className={classNames('co-suggestion-box__suggestions', {\n            'co-suggestion-box__suggestions--shadowed': visible && suggestions?.length > 0,\n          })}\n        >\n          {visible &&\n            suggestions?.map((elem) => (\n              <SuggestionLine\n                suggestion={elem}\n                key={elem}\n                onClick={onSelect}\n                className={className}\n              />\n            ))}\n        </div>\n      )}\n    </div>\n  );\n};\n\ntype AutocompleteInputProps = {\n  onSuggestionSelect: (selected: string) => void;\n  placeholder?: string;\n  suggestionCount?: number;\n  showSuggestions?: boolean;\n  textValue: string;\n  setTextValue: React.Dispatch<React.SetStateAction<String>>;\n  className?: string;\n  data?: any;\n};\n\nconst SuggestionLine: React.FC<SuggestionLineProps> = ({ suggestion, onClick, className }) => {\n  return (\n    <button className=\"co-suggestion-line\" onClick={() => onClick(suggestion)}>\n      <span className={className}>{suggestion}</span>\n    </button>\n  );\n};\n\ntype SuggestionLineProps = {\n  suggestion: string;\n  onClick: (param: string) => void;\n  className?: string;\n};\n\nexport default AutocompleteInput;\n"]}]}