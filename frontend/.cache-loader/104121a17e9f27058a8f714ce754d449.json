{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/queries.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/queries.ts","mtime":1616735742370},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { PodModel } from '@console/internal/models';\nexport const API_SERVERS_UP = '(sum(up{job=\"apiserver\"} == 1) / count(up{job=\"apiserver\"})) * 100';\nexport const CONTROLLER_MANAGERS_UP = '(sum(up{job=\"kube-controller-manager\"} == 1) / count(up{job=\"kube-controller-manager\"})) * 100';\nexport const SCHEDULERS_UP = '(sum(up{job=\"scheduler\"} == 1) / count(up{job=\"scheduler\"})) * 100';\nexport const API_SERVER_REQUESTS_SUCCESS = '(1 - (sum(rate(apiserver_request_total{code=~\"5..\"}[5m])) or vector(0))/ sum(rate(apiserver_request_total[5m]))) * 100';\nexport var Condition;\n(function (Condition) {\n    Condition[\"DISK_PRESSURE\"] = \"DiskPressure\";\n    Condition[\"PID_PRESSURE\"] = \"PIDPressure\";\n    Condition[\"MEM_PRESSURE\"] = \"MemoryPressure\";\n})(Condition || (Condition = {}));\nexport const PressureQueries = {\n    [Condition.DISK_PRESSURE]: (node) => [\n        {\n            model: PodModel,\n            fieldSelector: `spec.nodeName=${node}`,\n            metric: 'pod',\n            query: `(sort_desc(topk(25,sum by(pod, namespace) (container_fs_reads_total{node=\"${node}\"}))))`,\n        },\n    ],\n    [Condition.MEM_PRESSURE]: (node) => [\n        {\n            model: PodModel,\n            fieldSelector: `spec.nodeName=${node}`,\n            metric: 'pod',\n            query: `(sort_desc(topk(25,sum by(pod, namespace) (container_memory_usage_bytes{node=\"${node}\"}))))`,\n        },\n    ],\n    [Condition.PID_PRESSURE]: (node) => [\n        {\n            model: PodModel,\n            fieldSelector: `spec.nodeName=${node}`,\n            metric: 'pod',\n            query: `(sort_desc(topk(25,sum by(pod, namespace) (container_processes{node=\"${node}\"}))))`,\n        },\n    ],\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/queries.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-app/src/queries.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,QAAQ,EAAE,MAAM,0BAA0B,CAAC;AAEpD,MAAM,CAAC,MAAM,cAAc,GAAG,oEAAoE,CAAC;AACnG,MAAM,CAAC,MAAM,sBAAsB,GACjC,gGAAgG,CAAC;AACnG,MAAM,CAAC,MAAM,aAAa,GAAG,oEAAoE,CAAC;AAClG,MAAM,CAAC,MAAM,2BAA2B,GACtC,wHAAwH,CAAC;AAE3H,MAAM,CAAN,IAAkB,SAIjB;AAJD,WAAkB,SAAS;IACzB,2CAA8B,CAAA;IAC9B,yCAA4B,CAAA;IAC5B,4CAA+B,CAAA;AACjC,CAAC,EAJiB,SAAS,KAAT,SAAS,QAI1B;AAED,MAAM,CAAC,MAAM,eAAe,GAAG;IAC7B,CAAC,SAAS,CAAC,aAAa,CAAC,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC;QAC3C;YACE,KAAK,EAAE,QAAQ;YACf,aAAa,EAAE,iBAAiB,IAAI,EAAE;YACtC,MAAM,EAAE,KAAK;YACb,KAAK,EAAE,6EAA6E,IAAI,QAAQ;SACjG;KACF;IAED,CAAC,SAAS,CAAC,YAAY,CAAC,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC;QAC1C;YACE,KAAK,EAAE,QAAQ;YACf,aAAa,EAAE,iBAAiB,IAAI,EAAE;YACtC,MAAM,EAAE,KAAK;YACb,KAAK,EAAE,iFAAiF,IAAI,QAAQ;SACrG;KACF;IAED,CAAC,SAAS,CAAC,YAAY,CAAC,EAAE,CAAC,IAAY,EAAE,EAAE,CAAC;QAC1C;YACE,KAAK,EAAE,QAAQ;YACf,aAAa,EAAE,iBAAiB,IAAI,EAAE;YACtC,MAAM,EAAE,KAAK;YACb,KAAK,EAAE,wEAAwE,IAAI,QAAQ;SAC5F;KACF;CACF,CAAC","sourcesContent":["import { PodModel } from '@console/internal/models';\n\nexport const API_SERVERS_UP = '(sum(up{job=\"apiserver\"} == 1) / count(up{job=\"apiserver\"})) * 100';\nexport const CONTROLLER_MANAGERS_UP =\n  '(sum(up{job=\"kube-controller-manager\"} == 1) / count(up{job=\"kube-controller-manager\"})) * 100';\nexport const SCHEDULERS_UP = '(sum(up{job=\"scheduler\"} == 1) / count(up{job=\"scheduler\"})) * 100';\nexport const API_SERVER_REQUESTS_SUCCESS =\n  '(1 - (sum(rate(apiserver_request_total{code=~\"5..\"}[5m])) or vector(0))/ sum(rate(apiserver_request_total[5m]))) * 100';\n\nexport const enum Condition {\n  DISK_PRESSURE = 'DiskPressure',\n  PID_PRESSURE = 'PIDPressure',\n  MEM_PRESSURE = 'MemoryPressure',\n}\n\nexport const PressureQueries = {\n  [Condition.DISK_PRESSURE]: (node: string) => [\n    {\n      model: PodModel,\n      fieldSelector: `spec.nodeName=${node}`,\n      metric: 'pod',\n      query: `(sort_desc(topk(25,sum by(pod, namespace) (container_fs_reads_total{node=\"${node}\"}))))`,\n    },\n  ],\n\n  [Condition.MEM_PRESSURE]: (node: string) => [\n    {\n      model: PodModel,\n      fieldSelector: `spec.nodeName=${node}`,\n      metric: 'pod',\n      query: `(sort_desc(topk(25,sum by(pod, namespace) (container_memory_usage_bytes{node=\"${node}\"}))))`,\n    },\n  ],\n\n  [Condition.PID_PRESSURE]: (node: string) => [\n    {\n      model: PodModel,\n      fieldSelector: `spec.nodeName=${node}`,\n      metric: 'pod',\n      query: `(sort_desc(topk(25,sum by(pod, namespace) (container_processes{node=\"${node}\"}))))`,\n    },\n  ],\n};\n"]}]}