{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/patches/vm/vm-boot-patches.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/patches/vm/vm-boot-patches.ts","mtime":1616735742430},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { getAnnotations } from '@console/shared';\nimport { PatchBuilder } from '@console/shared/src/k8s';\nimport { ANNOTATION_FIRST_BOOT, BOOT_ORDER_FIRST, BOOT_ORDER_SECOND } from '../../../constants/vm';\nimport { getBootDeviceIndex, getDisks, getInterfaces } from '../../../selectors/vm';\nexport const getPxeBootPatch = (vm) => {\n    const patches = [];\n    const annotations = getAnnotations(vm);\n    if (annotations && annotations[ANNOTATION_FIRST_BOOT]) {\n        if (annotations[ANNOTATION_FIRST_BOOT] === 'true') {\n            patches.push(new PatchBuilder('/metadata/annotations')\n                .setObjectUpdate(ANNOTATION_FIRST_BOOT, 'false', annotations)\n                .build());\n        }\n        else {\n            // find bootable disk and change boot order\n            const bootableDiskIndex = getBootDeviceIndex(getDisks(vm), BOOT_ORDER_SECOND);\n            const bootableInterfaceIndex = getBootDeviceIndex(getInterfaces(vm), BOOT_ORDER_FIRST);\n            if (bootableDiskIndex !== -1 && bootableInterfaceIndex !== -1) {\n                patches.push(new PatchBuilder(`/spec/template/spec/domain/devices/disks/${bootableDiskIndex}/bootOrder`)\n                    .replace(BOOT_ORDER_FIRST)\n                    .build(), new PatchBuilder(`/spec/template/spec/domain/devices/interfaces/${bootableInterfaceIndex}/bootOrder`)\n                    .remove()\n                    .build());\n            }\n        }\n    }\n    return patches;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/patches/vm/vm-boot-patches.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/patches/vm/vm-boot-patches.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,cAAc,EAAE,MAAM,iBAAiB,CAAC;AACjD,OAAO,EAAE,YAAY,EAAE,MAAM,yBAAyB,CAAC;AACvD,OAAO,EAAE,qBAAqB,EAAE,gBAAgB,EAAE,iBAAiB,EAAE,MAAM,uBAAuB,CAAC;AACnG,OAAO,EAAE,kBAAkB,EAAE,QAAQ,EAAE,aAAa,EAAE,MAAM,uBAAuB,CAAC;AAGpF,MAAM,CAAC,MAAM,eAAe,GAAG,CAAC,EAAU,EAAE,EAAE;IAC5C,MAAM,OAAO,GAAG,EAAE,CAAC;IACnB,MAAM,WAAW,GAAG,cAAc,CAAC,EAAE,CAAC,CAAC;IACvC,IAAI,WAAW,IAAI,WAAW,CAAC,qBAAqB,CAAC,EAAE;QACrD,IAAI,WAAW,CAAC,qBAAqB,CAAC,KAAK,MAAM,EAAE;YACjD,OAAO,CAAC,IAAI,CACV,IAAI,YAAY,CAAC,uBAAuB,CAAC;iBACtC,eAAe,CAAC,qBAAqB,EAAE,OAAO,EAAE,WAAW,CAAC;iBAC5D,KAAK,EAAE,CACX,CAAC;SACH;aAAM;YACL,2CAA2C;YAC3C,MAAM,iBAAiB,GAAG,kBAAkB,CAAC,QAAQ,CAAC,EAAE,CAAC,EAAE,iBAAiB,CAAC,CAAC;YAC9E,MAAM,sBAAsB,GAAG,kBAAkB,CAAC,aAAa,CAAC,EAAE,CAAC,EAAE,gBAAgB,CAAC,CAAC;YAEvF,IAAI,iBAAiB,KAAK,CAAC,CAAC,IAAI,sBAAsB,KAAK,CAAC,CAAC,EAAE;gBAC7D,OAAO,CAAC,IAAI,CACV,IAAI,YAAY,CACd,4CAA4C,iBAAiB,YAAY,CAC1E;qBACE,OAAO,CAAC,gBAAgB,CAAC;qBACzB,KAAK,EAAE,EAEV,IAAI,YAAY,CACd,iDAAiD,sBAAsB,YAAY,CACpF;qBACE,MAAM,EAAE;qBACR,KAAK,EAAE,CACX,CAAC;aACH;SACF;KACF;IACD,OAAO,OAAO,CAAC;AACjB,CAAC,CAAC","sourcesContent":["import { getAnnotations } from '@console/shared';\nimport { PatchBuilder } from '@console/shared/src/k8s';\nimport { ANNOTATION_FIRST_BOOT, BOOT_ORDER_FIRST, BOOT_ORDER_SECOND } from '../../../constants/vm';\nimport { getBootDeviceIndex, getDisks, getInterfaces } from '../../../selectors/vm';\nimport { VMKind } from '../../../types/vm';\n\nexport const getPxeBootPatch = (vm: VMKind) => {\n  const patches = [];\n  const annotations = getAnnotations(vm);\n  if (annotations && annotations[ANNOTATION_FIRST_BOOT]) {\n    if (annotations[ANNOTATION_FIRST_BOOT] === 'true') {\n      patches.push(\n        new PatchBuilder('/metadata/annotations')\n          .setObjectUpdate(ANNOTATION_FIRST_BOOT, 'false', annotations)\n          .build(),\n      );\n    } else {\n      // find bootable disk and change boot order\n      const bootableDiskIndex = getBootDeviceIndex(getDisks(vm), BOOT_ORDER_SECOND);\n      const bootableInterfaceIndex = getBootDeviceIndex(getInterfaces(vm), BOOT_ORDER_FIRST);\n\n      if (bootableDiskIndex !== -1 && bootableInterfaceIndex !== -1) {\n        patches.push(\n          new PatchBuilder(\n            `/spec/template/spec/domain/devices/disks/${bootableDiskIndex}/bootOrder`,\n          )\n            .replace(BOOT_ORDER_FIRST)\n            .build(),\n\n          new PatchBuilder(\n            `/spec/template/spec/domain/devices/interfaces/${bootableInterfaceIndex}/bootOrder`,\n          )\n            .remove()\n            .build(),\n        );\n      }\n    }\n  }\n  return patches;\n};\n"]}]}