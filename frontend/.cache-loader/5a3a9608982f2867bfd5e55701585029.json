{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/image-search/ImageSearch.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/image-search/ImageSearch.tsx","mtime":1615298458620},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { k8sCreate } from '@console/internal/module/k8s';\nimport { ImageStreamImportsModel } from '@console/internal/models';\nimport { useFormikContext } from 'formik';\nimport { TextInputTypes, Alert, AlertActionCloseButton, Button, ValidatedOptions, } from '@patternfly/react-core';\nimport { SecretTypeAbstraction } from '@console/internal/components/secrets/create-secret';\nimport { InputField, useDebounceCallback } from '@console/shared';\nimport { getSuggestedName, getPorts, makePortName } from '../../../utils/imagestream-utils';\nimport { secretModalLauncher } from '../CreateSecretModal';\nimport { UNASSIGNED_KEY, CREATE_APPLICATION_KEY } from '../../../const';\nconst ImageSearch = () => {\n    var _a;\n    const { values, setFieldValue, dirty, initialValues, touched } = useFormikContext();\n    const [newImageSecret, setNewImageSecret] = React.useState('');\n    const [alertVisible, shouldHideAlert] = React.useState(true);\n    const [validated, setValidated] = React.useState(ValidatedOptions.default);\n    const namespace = values.project.name;\n    const { application = {}, name: nameTouched } = touched;\n    const { name: applicationNameTouched } = application;\n    const handleSearch = React.useCallback((searchTermImage) => {\n        setFieldValue('isSearchingForImage', true);\n        setValidated(ValidatedOptions.default);\n        const importImage = {\n            kind: 'ImageStreamImport',\n            apiVersion: 'image.openshift.io/v1',\n            metadata: {\n                name: 'newapp',\n                namespace: values.project.name,\n            },\n            spec: {\n                import: false,\n                images: [\n                    {\n                        from: {\n                            kind: 'DockerImage',\n                            name: _.trim(searchTermImage),\n                        },\n                    },\n                ],\n            },\n            status: {},\n        };\n        k8sCreate(ImageStreamImportsModel, importImage)\n            .then((imageStreamImport) => {\n            const status = _.get(imageStreamImport, 'status.images[0].status');\n            if (status.status === 'Success') {\n                const name = _.get(imageStreamImport, 'spec.images[0].from.name');\n                const image = _.get(imageStreamImport, 'status.images[0].image');\n                const tag = _.get(imageStreamImport, 'status.images[0].tag');\n                const isi = { name, image, tag, status };\n                const ports = getPorts(isi);\n                setFieldValue('isSearchingForImage', false);\n                setFieldValue('isi.name', name);\n                setFieldValue('isi.image', image);\n                setFieldValue('isi.tag', tag);\n                setFieldValue('isi.status', status);\n                setFieldValue('isi.ports', ports);\n                setFieldValue('image.ports', ports);\n                setFieldValue('image.tag', tag);\n                !values.name && setFieldValue('name', getSuggestedName(name));\n                !values.application.name &&\n                    values.application.selectedKey !== UNASSIGNED_KEY &&\n                    setFieldValue('application.name', `${getSuggestedName(name)}-app`);\n                // set default port value\n                const targetPort = (!initialValues.route.targetPort || touched.searchTerm) && _.head(ports);\n                targetPort && setFieldValue('route.targetPort', makePortName(targetPort));\n                setValidated(ValidatedOptions.success);\n            }\n            else {\n                setFieldValue('isSearchingForImage', false);\n                setFieldValue('isi', {});\n                setFieldValue('isi.status', status);\n                setFieldValue('route.targetPort', null);\n                setValidated(ValidatedOptions.error);\n            }\n        })\n            .catch((error) => {\n            setFieldValue('isi', {});\n            setFieldValue('isi.status', { metadata: {}, status: '', message: error.message });\n            setFieldValue('isSearchingForImage', false);\n            setValidated(ValidatedOptions.error);\n        });\n    }, [\n        setFieldValue,\n        touched,\n        values.application.name,\n        values.application.selectedKey,\n        values.name,\n        values.project.name,\n        initialValues.route.targetPort,\n    ]);\n    const debouncedHandleSearch = useDebounceCallback(handleSearch, [handleSearch]);\n    const handleSave = React.useCallback((name) => {\n        setNewImageSecret(name);\n        values.searchTerm && handleSearch(values.searchTerm);\n    }, [handleSearch, values.searchTerm]);\n    const getHelpText = () => {\n        if (values.isSearchingForImage) {\n            return 'Validating...';\n        }\n        if (!values.isSearchingForImage && validated === ValidatedOptions.success) {\n            return 'Validated';\n        }\n        return '';\n    };\n    const resetFields = () => {\n        if (values.formType === 'edit') {\n            values.application.selectedKey !== UNASSIGNED_KEY &&\n                values.application.selectedKey === CREATE_APPLICATION_KEY &&\n                !applicationNameTouched &&\n                setFieldValue('application.name', '');\n            return;\n        }\n        !nameTouched && setFieldValue('name', '');\n        values.application.selectedKey !== UNASSIGNED_KEY &&\n            !applicationNameTouched &&\n            setFieldValue('application.name', '');\n    };\n    const helpTextInvalid = validated === ValidatedOptions.error && (React.createElement(\"span\", null, values.searchTerm === '' ? 'Required' : (_a = values.isi.status) === null || _a === void 0 ? void 0 : _a.message));\n    React.useEffect(() => {\n        !dirty && values.searchTerm && handleSearch(values.searchTerm);\n    }, [dirty, handleSearch, values.searchTerm]);\n    React.useEffect(() => {\n        if (touched.searchTerm && initialValues.searchTerm !== values.searchTerm) {\n            const targetPort = _.head(values.isi.ports);\n            targetPort && setFieldValue('route.targetPort', makePortName(targetPort));\n        }\n    }, [\n        touched.searchTerm,\n        setFieldValue,\n        values.isi.ports,\n        initialValues.searchTerm,\n        values.searchTerm,\n    ]);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(InputField, { type: TextInputTypes.text, name: \"searchTerm\", placeholder: \"Enter an image name\", helpText: getHelpText(), helpTextInvalid: helpTextInvalid, validated: validated, onChange: (e) => {\n                resetFields();\n                setFieldValue('isi', {});\n                setValidated(ValidatedOptions.default);\n                debouncedHandleSearch(e.target.value);\n            }, \"data-test-id\": \"deploy-image-search-term\", required: true }),\n        React.createElement(\"div\", { className: \"help-block\", id: \"image-name-help\" },\n            \"To deploy an image from a private repository, you must\",\n            ' ',\n            React.createElement(Button, { variant: \"link\", isInline: true, onClick: () => secretModalLauncher({\n                    namespace,\n                    save: handleSave,\n                    secretType: SecretTypeAbstraction.image,\n                }) }, \"create an image pull secret\"),\n            ' ',\n            \"with your image registry credentials.\"),\n        newImageSecret && alertVisible && (React.createElement(Alert, { isInline: true, className: \"co-alert\", variant: \"success\", title: `Secret ${newImageSecret} was created.`, action: React.createElement(AlertActionCloseButton, { onClose: () => shouldHideAlert(false) }) }))));\n};\nexport default ImageSearch;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/image-search/ImageSearch.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/image-search/ImageSearch.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,SAAS,EAAiB,MAAM,8BAA8B,CAAC;AACxE,OAAO,EAAE,uBAAuB,EAAE,MAAM,0BAA0B,CAAC;AACnE,OAAO,EAAE,gBAAgB,EAA+B,MAAM,QAAQ,CAAC;AACvE,OAAO,EACL,cAAc,EACd,KAAK,EACL,sBAAsB,EACtB,MAAM,EACN,gBAAgB,GACjB,MAAM,wBAAwB,CAAC;AAChC,OAAO,EAAE,qBAAqB,EAAE,MAAM,oDAAoD,CAAC;AAC3F,OAAO,EAAE,UAAU,EAAE,mBAAmB,EAAE,MAAM,iBAAiB,CAAC;AAClE,OAAO,EAAE,gBAAgB,EAAE,QAAQ,EAAE,YAAY,EAAE,MAAM,kCAAkC,CAAC;AAC5F,OAAO,EAAE,mBAAmB,EAAE,MAAM,sBAAsB,CAAC;AAC3D,OAAO,EAAE,cAAc,EAAE,sBAAsB,EAAE,MAAM,gBAAgB,CAAC;AAExE,MAAM,WAAW,GAAa,GAAG,EAAE;;IACjC,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,KAAK,EAAE,aAAa,EAAE,OAAO,EAAE,GAAG,gBAAgB,EAAgB,CAAC;IAClG,MAAM,CAAC,cAAc,EAAE,iBAAiB,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,EAAE,CAAC,CAAC;IAC/D,MAAM,CAAC,YAAY,EAAE,eAAe,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC7D,MAAM,CAAC,SAAS,EAAE,YAAY,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAmB,gBAAgB,CAAC,OAAO,CAAC,CAAC;IAC7F,MAAM,SAAS,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC;IACtC,MAAM,EAAE,WAAW,GAAG,EAAE,EAAE,IAAI,EAAE,WAAW,EAAE,GAAG,OAAO,CAAC;IACxD,MAAM,EAAE,IAAI,EAAE,sBAAsB,EAAE,GAAG,WAA+C,CAAC;IAEzF,MAAM,YAAY,GAAG,KAAK,CAAC,WAAW,CACpC,CAAC,eAAuB,EAAE,EAAE;QAC1B,aAAa,CAAC,qBAAqB,EAAE,IAAI,CAAC,CAAC;QAC3C,YAAY,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;QACvC,MAAM,WAAW,GAAG;YAClB,IAAI,EAAE,mBAAmB;YACzB,UAAU,EAAE,uBAAuB;YACnC,QAAQ,EAAE;gBACR,IAAI,EAAE,QAAQ;gBACd,SAAS,EAAE,MAAM,CAAC,OAAO,CAAC,IAAI;aAC/B;YACD,IAAI,EAAE;gBACJ,MAAM,EAAE,KAAK;gBACb,MAAM,EAAE;oBACN;wBACE,IAAI,EAAE;4BACJ,IAAI,EAAE,aAAa;4BACnB,IAAI,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC;yBAC9B;qBACF;iBACF;aACF;YACD,MAAM,EAAE,EAAE;SACX,CAAC;QAEF,SAAS,CAAC,uBAAuB,EAAE,WAAW,CAAC;aAC5C,IAAI,CAAC,CAAC,iBAAiB,EAAE,EAAE;YAC1B,MAAM,MAAM,GAAG,CAAC,CAAC,GAAG,CAAC,iBAAiB,EAAE,yBAAyB,CAAC,CAAC;YACnE,IAAI,MAAM,CAAC,MAAM,KAAK,SAAS,EAAE;gBAC/B,MAAM,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,iBAAiB,EAAE,0BAA0B,CAAC,CAAC;gBAClE,MAAM,KAAK,GAAG,CAAC,CAAC,GAAG,CAAC,iBAAiB,EAAE,wBAAwB,CAAC,CAAC;gBACjE,MAAM,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC,iBAAiB,EAAE,sBAAsB,CAAC,CAAC;gBAC7D,MAAM,GAAG,GAAG,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,MAAM,EAAE,CAAC;gBACzC,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;gBAC5B,aAAa,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC;gBAC5C,aAAa,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;gBAChC,aAAa,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;gBAClC,aAAa,CAAC,SAAS,EAAE,GAAG,CAAC,CAAC;gBAC9B,aAAa,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;gBACpC,aAAa,CAAC,WAAW,EAAE,KAAK,CAAC,CAAC;gBAClC,aAAa,CAAC,aAAa,EAAE,KAAK,CAAC,CAAC;gBACpC,aAAa,CAAC,WAAW,EAAE,GAAG,CAAC,CAAC;gBAChC,CAAC,MAAM,CAAC,IAAI,IAAI,aAAa,CAAC,MAAM,EAAE,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC;gBAC9D,CAAC,MAAM,CAAC,WAAW,CAAC,IAAI;oBACtB,MAAM,CAAC,WAAW,CAAC,WAAW,KAAK,cAAc;oBACjD,aAAa,CAAC,kBAAkB,EAAE,GAAG,gBAAgB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;gBACrE,yBAAyB;gBACzB,MAAM,UAAU,GACd,CAAC,CAAC,aAAa,CAAC,KAAK,CAAC,UAAU,IAAI,OAAO,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAC3E,UAAU,IAAI,aAAa,CAAC,kBAAkB,EAAE,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC;gBAC1E,YAAY,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;aACxC;iBAAM;gBACL,aAAa,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC;gBAC5C,aAAa,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;gBACzB,aAAa,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;gBACpC,aAAa,CAAC,kBAAkB,EAAE,IAAI,CAAC,CAAC;gBACxC,YAAY,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;aACtC;QACH,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,KAAK,EAAE,EAAE;YACf,aAAa,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;YACzB,aAAa,CAAC,YAAY,EAAE,EAAE,QAAQ,EAAE,EAAE,EAAE,MAAM,EAAE,EAAE,EAAE,OAAO,EAAE,KAAK,CAAC,OAAO,EAAE,CAAC,CAAC;YAClF,aAAa,CAAC,qBAAqB,EAAE,KAAK,CAAC,CAAC;YAC5C,YAAY,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;QACvC,CAAC,CAAC,CAAC;IACP,CAAC,EACD;QACE,aAAa;QACb,OAAO;QACP,MAAM,CAAC,WAAW,CAAC,IAAI;QACvB,MAAM,CAAC,WAAW,CAAC,WAAW;QAC9B,MAAM,CAAC,IAAI;QACX,MAAM,CAAC,OAAO,CAAC,IAAI;QACnB,aAAa,CAAC,KAAK,CAAC,UAAU;KAC/B,CACF,CAAC;IAEF,MAAM,qBAAqB,GAAG,mBAAmB,CAAC,YAAY,EAAE,CAAC,YAAY,CAAC,CAAC,CAAC;IAEhF,MAAM,UAAU,GAAG,KAAK,CAAC,WAAW,CAClC,CAAC,IAAY,EAAE,EAAE;QACf,iBAAiB,CAAC,IAAI,CAAC,CAAC;QACxB,MAAM,CAAC,UAAU,IAAI,YAAY,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IACvD,CAAC,EACD,CAAC,YAAY,EAAE,MAAM,CAAC,UAAU,CAAC,CAClC,CAAC;IAEF,MAAM,WAAW,GAAG,GAAG,EAAE;QACvB,IAAI,MAAM,CAAC,mBAAmB,EAAE;YAC9B,OAAO,eAAe,CAAC;SACxB;QACD,IAAI,CAAC,MAAM,CAAC,mBAAmB,IAAI,SAAS,KAAK,gBAAgB,CAAC,OAAO,EAAE;YACzE,OAAO,WAAW,CAAC;SACpB;QACD,OAAO,EAAE,CAAC;IACZ,CAAC,CAAC;IAEF,MAAM,WAAW,GAAG,GAAG,EAAE;QACvB,IAAI,MAAM,CAAC,QAAQ,KAAK,MAAM,EAAE;YAC9B,MAAM,CAAC,WAAW,CAAC,WAAW,KAAK,cAAc;gBAC/C,MAAM,CAAC,WAAW,CAAC,WAAW,KAAK,sBAAsB;gBACzD,CAAC,sBAAsB;gBACvB,aAAa,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC;YACxC,OAAO;SACR;QACD,CAAC,WAAW,IAAI,aAAa,CAAC,MAAM,EAAE,EAAE,CAAC,CAAC;QAC1C,MAAM,CAAC,WAAW,CAAC,WAAW,KAAK,cAAc;YAC/C,CAAC,sBAAsB;YACvB,aAAa,CAAC,kBAAkB,EAAE,EAAE,CAAC,CAAC;IAC1C,CAAC,CAAC;IAEF,MAAM,eAAe,GAAG,SAAS,KAAK,gBAAgB,CAAC,KAAK,IAAI,CAC9D,kCAAO,MAAM,CAAC,UAAU,KAAK,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,OAAC,MAAM,CAAC,GAAG,CAAC,MAAM,0CAAE,OAAO,CAAQ,CAClF,CAAC;IAEF,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,CAAC,KAAK,IAAI,MAAM,CAAC,UAAU,IAAI,YAAY,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;IACjE,CAAC,EAAE,CAAC,KAAK,EAAE,YAAY,EAAE,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC;IAE7C,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,IAAI,OAAO,CAAC,UAAU,IAAI,aAAa,CAAC,UAAU,KAAK,MAAM,CAAC,UAAU,EAAE;YACxE,MAAM,UAAU,GAAkB,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;YAC3D,UAAU,IAAI,aAAa,CAAC,kBAAkB,EAAE,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC;SAC3E;IACH,CAAC,EAAE;QACD,OAAO,CAAC,UAAU;QAClB,aAAa;QACb,MAAM,CAAC,GAAG,CAAC,KAAK;QAChB,aAAa,CAAC,UAAU;QACxB,MAAM,CAAC,UAAU;KAClB,CAAC,CAAC;IAEH,OAAO,CACL;QACE,oBAAC,UAAU,IACT,IAAI,EAAE,cAAc,CAAC,IAAI,EACzB,IAAI,EAAC,YAAY,EACjB,WAAW,EAAC,qBAAqB,EACjC,QAAQ,EAAE,WAAW,EAAE,EACvB,eAAe,EAAE,eAAe,EAChC,SAAS,EAAE,SAAS,EACpB,QAAQ,EAAE,CAAC,CAAgB,EAAE,EAAE;gBAC7B,WAAW,EAAE,CAAC;gBACd,aAAa,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;gBACzB,YAAY,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC;gBACvC,qBAAqB,CAAE,CAAC,CAAC,MAA2B,CAAC,KAAK,CAAC,CAAC;YAC9D,CAAC,kBACY,0BAA0B,EACvC,QAAQ,SACR;QACF,6BAAK,SAAS,EAAC,YAAY,EAAC,EAAE,EAAC,iBAAiB;;YACS,GAAG;YAC1D,oBAAC,MAAM,IACL,OAAO,EAAC,MAAM,EACd,QAAQ,QACR,OAAO,EAAE,GAAG,EAAE,CACZ,mBAAmB,CAAC;oBAClB,SAAS;oBACT,IAAI,EAAE,UAAU;oBAChB,UAAU,EAAE,qBAAqB,CAAC,KAAK;iBACxC,CAAC,kCAIG;YAAC,GAAG;oDAET;QACL,cAAc,IAAI,YAAY,IAAI,CACjC,oBAAC,KAAK,IACJ,QAAQ,QACR,SAAS,EAAC,UAAU,EACpB,OAAO,EAAC,SAAS,EACjB,KAAK,EAAE,UAAU,cAAc,eAAe,EAC9C,MAAM,EAAE,oBAAC,sBAAsB,IAAC,OAAO,EAAE,GAAG,EAAE,CAAC,eAAe,CAAC,KAAK,CAAC,GAAI,GACzE,CACH,CACA,CACJ,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,WAAW,CAAC","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { k8sCreate, ContainerPort } from '@console/internal/module/k8s';\nimport { ImageStreamImportsModel } from '@console/internal/models';\nimport { useFormikContext, FormikValues, FormikTouched } from 'formik';\nimport {\n  TextInputTypes,\n  Alert,\n  AlertActionCloseButton,\n  Button,\n  ValidatedOptions,\n} from '@patternfly/react-core';\nimport { SecretTypeAbstraction } from '@console/internal/components/secrets/create-secret';\nimport { InputField, useDebounceCallback } from '@console/shared';\nimport { getSuggestedName, getPorts, makePortName } from '../../../utils/imagestream-utils';\nimport { secretModalLauncher } from '../CreateSecretModal';\nimport { UNASSIGNED_KEY, CREATE_APPLICATION_KEY } from '../../../const';\n\nconst ImageSearch: React.FC = () => {\n  const { values, setFieldValue, dirty, initialValues, touched } = useFormikContext<FormikValues>();\n  const [newImageSecret, setNewImageSecret] = React.useState('');\n  const [alertVisible, shouldHideAlert] = React.useState(true);\n  const [validated, setValidated] = React.useState<ValidatedOptions>(ValidatedOptions.default);\n  const namespace = values.project.name;\n  const { application = {}, name: nameTouched } = touched;\n  const { name: applicationNameTouched } = application as FormikTouched<{ name: boolean }>;\n\n  const handleSearch = React.useCallback(\n    (searchTermImage: string) => {\n      setFieldValue('isSearchingForImage', true);\n      setValidated(ValidatedOptions.default);\n      const importImage = {\n        kind: 'ImageStreamImport',\n        apiVersion: 'image.openshift.io/v1',\n        metadata: {\n          name: 'newapp',\n          namespace: values.project.name,\n        },\n        spec: {\n          import: false,\n          images: [\n            {\n              from: {\n                kind: 'DockerImage',\n                name: _.trim(searchTermImage),\n              },\n            },\n          ],\n        },\n        status: {},\n      };\n\n      k8sCreate(ImageStreamImportsModel, importImage)\n        .then((imageStreamImport) => {\n          const status = _.get(imageStreamImport, 'status.images[0].status');\n          if (status.status === 'Success') {\n            const name = _.get(imageStreamImport, 'spec.images[0].from.name');\n            const image = _.get(imageStreamImport, 'status.images[0].image');\n            const tag = _.get(imageStreamImport, 'status.images[0].tag');\n            const isi = { name, image, tag, status };\n            const ports = getPorts(isi);\n            setFieldValue('isSearchingForImage', false);\n            setFieldValue('isi.name', name);\n            setFieldValue('isi.image', image);\n            setFieldValue('isi.tag', tag);\n            setFieldValue('isi.status', status);\n            setFieldValue('isi.ports', ports);\n            setFieldValue('image.ports', ports);\n            setFieldValue('image.tag', tag);\n            !values.name && setFieldValue('name', getSuggestedName(name));\n            !values.application.name &&\n              values.application.selectedKey !== UNASSIGNED_KEY &&\n              setFieldValue('application.name', `${getSuggestedName(name)}-app`);\n            // set default port value\n            const targetPort =\n              (!initialValues.route.targetPort || touched.searchTerm) && _.head(ports);\n            targetPort && setFieldValue('route.targetPort', makePortName(targetPort));\n            setValidated(ValidatedOptions.success);\n          } else {\n            setFieldValue('isSearchingForImage', false);\n            setFieldValue('isi', {});\n            setFieldValue('isi.status', status);\n            setFieldValue('route.targetPort', null);\n            setValidated(ValidatedOptions.error);\n          }\n        })\n        .catch((error) => {\n          setFieldValue('isi', {});\n          setFieldValue('isi.status', { metadata: {}, status: '', message: error.message });\n          setFieldValue('isSearchingForImage', false);\n          setValidated(ValidatedOptions.error);\n        });\n    },\n    [\n      setFieldValue,\n      touched,\n      values.application.name,\n      values.application.selectedKey,\n      values.name,\n      values.project.name,\n      initialValues.route.targetPort,\n    ],\n  );\n\n  const debouncedHandleSearch = useDebounceCallback(handleSearch, [handleSearch]);\n\n  const handleSave = React.useCallback(\n    (name: string) => {\n      setNewImageSecret(name);\n      values.searchTerm && handleSearch(values.searchTerm);\n    },\n    [handleSearch, values.searchTerm],\n  );\n\n  const getHelpText = () => {\n    if (values.isSearchingForImage) {\n      return 'Validating...';\n    }\n    if (!values.isSearchingForImage && validated === ValidatedOptions.success) {\n      return 'Validated';\n    }\n    return '';\n  };\n\n  const resetFields = () => {\n    if (values.formType === 'edit') {\n      values.application.selectedKey !== UNASSIGNED_KEY &&\n        values.application.selectedKey === CREATE_APPLICATION_KEY &&\n        !applicationNameTouched &&\n        setFieldValue('application.name', '');\n      return;\n    }\n    !nameTouched && setFieldValue('name', '');\n    values.application.selectedKey !== UNASSIGNED_KEY &&\n      !applicationNameTouched &&\n      setFieldValue('application.name', '');\n  };\n\n  const helpTextInvalid = validated === ValidatedOptions.error && (\n    <span>{values.searchTerm === '' ? 'Required' : values.isi.status?.message}</span>\n  );\n\n  React.useEffect(() => {\n    !dirty && values.searchTerm && handleSearch(values.searchTerm);\n  }, [dirty, handleSearch, values.searchTerm]);\n\n  React.useEffect(() => {\n    if (touched.searchTerm && initialValues.searchTerm !== values.searchTerm) {\n      const targetPort: ContainerPort = _.head(values.isi.ports);\n      targetPort && setFieldValue('route.targetPort', makePortName(targetPort));\n    }\n  }, [\n    touched.searchTerm,\n    setFieldValue,\n    values.isi.ports,\n    initialValues.searchTerm,\n    values.searchTerm,\n  ]);\n\n  return (\n    <>\n      <InputField\n        type={TextInputTypes.text}\n        name=\"searchTerm\"\n        placeholder=\"Enter an image name\"\n        helpText={getHelpText()}\n        helpTextInvalid={helpTextInvalid}\n        validated={validated}\n        onChange={(e: KeyboardEvent) => {\n          resetFields();\n          setFieldValue('isi', {});\n          setValidated(ValidatedOptions.default);\n          debouncedHandleSearch((e.target as HTMLInputElement).value);\n        }}\n        data-test-id=\"deploy-image-search-term\"\n        required\n      />\n      <div className=\"help-block\" id=\"image-name-help\">\n        To deploy an image from a private repository, you must{' '}\n        <Button\n          variant=\"link\"\n          isInline\n          onClick={() =>\n            secretModalLauncher({\n              namespace,\n              save: handleSave,\n              secretType: SecretTypeAbstraction.image,\n            })\n          }\n        >\n          create an image pull secret\n        </Button>{' '}\n        with your image registry credentials.\n      </div>\n      {newImageSecret && alertVisible && (\n        <Alert\n          isInline\n          className=\"co-alert\"\n          variant=\"success\"\n          title={`Secret ${newImageSecret} was created.`}\n          action={<AlertActionCloseButton onClose={() => shouldHideAlert(false)} />}\n        />\n      )}\n    </>\n  );\n};\n\nexport default ImageSearch;\n"]}]}