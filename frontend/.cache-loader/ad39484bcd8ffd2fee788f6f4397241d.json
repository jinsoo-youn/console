{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/noobaa-storage-plugin/src/components/object-data-reduction-card/object-data-reduction-card-item.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/noobaa-storage-plugin/src/components/object-data-reduction-card/object-data-reduction-card-item.tsx","mtime":1616735742440},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { FieldLevelHelp, humanizeBinaryBytes, humanizePercentage, } from '@console/internal/components/utils';\nconst ItemBody = React.memo(({ title, stats, infoText, isLoading, error }) => {\n    let status;\n    if (isLoading) {\n        status = React.createElement(\"div\", { className: \"skeleton-text nb-object-data-reduction__item-body--loading\" });\n    }\n    else if (error || !stats) {\n        status = React.createElement(\"span\", { className: \"co-dashboard-text--small text-muted\" }, \"Not available\");\n    }\n    else {\n        status = React.createElement(\"span\", { className: \"nb-object-data-reduction-card__row-status-item-text\" }, stats);\n    }\n    return (React.createElement(\"div\", { className: \"co-inventory-card__item\" },\n        React.createElement(\"div\", { className: \"nb-object-data-reduction-card__row-title\" }, title),\n        React.createElement(\"div\", { className: \"nb-object-data-reduction-card__row-status-item\" },\n            status,\n            React.createElement(FieldLevelHelp, null, infoText))));\n});\nexport const EfficiencyItem = React.memo(({ efficiency, isLoading, error }) => {\n    const infoText = 'Efficiency ratio refers to the deduplication and compression process effectiveness.';\n    let stats = efficiency;\n    if (efficiency) {\n        const formattedEfficiency = +Number(efficiency).toFixed(1);\n        stats = formattedEfficiency === 0 ? '1:1' : `${formattedEfficiency}:1`;\n    }\n    return (React.createElement(ItemBody, { title: \"Efficiency Ratio\", stats: stats, infoText: infoText, isLoading: isLoading, error: error }));\n});\nexport const SavingsItem = React.memo(({ savings, logicalSize, isLoading, error }) => {\n    const infoText = 'Savings shows the uncompressed and non-deduped data that would have been stored without those techniques';\n    let stats = null;\n    const savingsValue = Number(savings);\n    if (savings && logicalSize) {\n        const savedBytes = humanizeBinaryBytes(savingsValue).string;\n        const savingsPercentage = `${savedBytes} (${humanizePercentage((100 * savingsValue) / Number(logicalSize)).string})`;\n        stats = savingsValue <= 0 ? 'No Savings' : savingsPercentage;\n    }\n    return (React.createElement(ItemBody, { title: \"Savings\", stats: stats, infoText: infoText, isLoading: isLoading, error: error }));\n});\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/noobaa-storage-plugin/src/components/object-data-reduction-card/object-data-reduction-card-item.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/noobaa-storage-plugin/src/components/object-data-reduction-card/object-data-reduction-card-item.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EACL,cAAc,EACd,mBAAmB,EACnB,kBAAkB,GACnB,MAAM,oCAAoC,CAAC;AAE5C,MAAM,QAAQ,GAA4B,KAAK,CAAC,IAAI,CAClD,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,QAAQ,EAAE,SAAS,EAAE,KAAK,EAAE,EAAE,EAAE;IAC/C,IAAI,MAA0B,CAAC;IAC/B,IAAI,SAAS,EAAE;QACb,MAAM,GAAG,6BAAK,SAAS,EAAC,4DAA4D,GAAG,CAAC;KACzF;SAAM,IAAI,KAAK,IAAI,CAAC,KAAK,EAAE;QAC1B,MAAM,GAAG,8BAAM,SAAS,EAAC,qCAAqC,oBAAqB,CAAC;KACrF;SAAM;QACL,MAAM,GAAG,8BAAM,SAAS,EAAC,qDAAqD,IAAE,KAAK,CAAQ,CAAC;KAC/F;IACD,OAAO,CACL,6BAAK,SAAS,EAAC,yBAAyB;QACtC,6BAAK,SAAS,EAAC,0CAA0C,IAAE,KAAK,CAAO;QACvE,6BAAK,SAAS,EAAC,gDAAgD;YAC5D,MAAM;YACP,oBAAC,cAAc,QAAE,QAAQ,CAAkB,CACvC,CACF,CACP,CAAC;AACJ,CAAC,CACF,CAAC;AAEF,MAAM,CAAC,MAAM,cAAc,GAAkC,KAAK,CAAC,IAAI,CACrE,CAAC,EAAE,UAAU,EAAE,SAAS,EAAE,KAAK,EAAE,EAAE,EAAE;IACnC,MAAM,QAAQ,GACZ,qFAAqF,CAAC;IACxF,IAAI,KAAK,GAAW,UAAU,CAAC;IAC/B,IAAI,UAAU,EAAE;QACd,MAAM,mBAAmB,GAAG,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;QAC3D,KAAK,GAAG,mBAAmB,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,mBAAmB,IAAI,CAAC;KACxE;IACD,OAAO,CACL,oBAAC,QAAQ,IACP,KAAK,EAAC,kBAAkB,EACxB,KAAK,EAAE,KAAK,EACZ,QAAQ,EAAE,QAAQ,EAClB,SAAS,EAAE,SAAS,EACpB,KAAK,EAAE,KAAK,GACZ,CACH,CAAC;AACJ,CAAC,CACF,CAAC;AAEF,MAAM,CAAC,MAAM,WAAW,GAA+B,KAAK,CAAC,IAAI,CAC/D,CAAC,EAAE,OAAO,EAAE,WAAW,EAAE,SAAS,EAAE,KAAK,EAAE,EAAE,EAAE;IAC7C,MAAM,QAAQ,GACZ,0GAA0G,CAAC;IAC7G,IAAI,KAAK,GAAW,IAAI,CAAC;IACzB,MAAM,YAAY,GAAG,MAAM,CAAC,OAAO,CAAC,CAAC;IACrC,IAAI,OAAO,IAAI,WAAW,EAAE;QAC1B,MAAM,UAAU,GAAG,mBAAmB,CAAC,YAAY,CAAC,CAAC,MAAM,CAAC;QAC5D,MAAM,iBAAiB,GAAG,GAAG,UAAU,KACrC,kBAAkB,CAAC,CAAC,GAAG,GAAG,YAAY,CAAC,GAAG,MAAM,CAAC,WAAW,CAAC,CAAC,CAAC,MACjE,GAAG,CAAC;QACJ,KAAK,GAAG,YAAY,IAAI,CAAC,CAAC,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC,iBAAiB,CAAC;KAC9D;IACD,OAAO,CACL,oBAAC,QAAQ,IACP,KAAK,EAAC,SAAS,EACf,KAAK,EAAE,KAAK,EACZ,QAAQ,EAAE,QAAQ,EAClB,SAAS,EAAE,SAAS,EACpB,KAAK,EAAE,KAAK,GACZ,CACH,CAAC;AACJ,CAAC,CACF,CAAC","sourcesContent":["import * as React from 'react';\nimport {\n  FieldLevelHelp,\n  humanizeBinaryBytes,\n  humanizePercentage,\n} from '@console/internal/components/utils';\n\nconst ItemBody: React.FC<ItemBodyProps> = React.memo(\n  ({ title, stats, infoText, isLoading, error }) => {\n    let status: React.ReactElement;\n    if (isLoading) {\n      status = <div className=\"skeleton-text nb-object-data-reduction__item-body--loading\" />;\n    } else if (error || !stats) {\n      status = <span className=\"co-dashboard-text--small text-muted\">Not available</span>;\n    } else {\n      status = <span className=\"nb-object-data-reduction-card__row-status-item-text\">{stats}</span>;\n    }\n    return (\n      <div className=\"co-inventory-card__item\">\n        <div className=\"nb-object-data-reduction-card__row-title\">{title}</div>\n        <div className=\"nb-object-data-reduction-card__row-status-item\">\n          {status}\n          <FieldLevelHelp>{infoText}</FieldLevelHelp>\n        </div>\n      </div>\n    );\n  },\n);\n\nexport const EfficiencyItem: React.FC<EfficiencyItemProps> = React.memo(\n  ({ efficiency, isLoading, error }) => {\n    const infoText =\n      'Efficiency ratio refers to the deduplication and compression process effectiveness.';\n    let stats: string = efficiency;\n    if (efficiency) {\n      const formattedEfficiency = +Number(efficiency).toFixed(1);\n      stats = formattedEfficiency === 0 ? '1:1' : `${formattedEfficiency}:1`;\n    }\n    return (\n      <ItemBody\n        title=\"Efficiency Ratio\"\n        stats={stats}\n        infoText={infoText}\n        isLoading={isLoading}\n        error={error}\n      />\n    );\n  },\n);\n\nexport const SavingsItem: React.FC<SavingsItemProps> = React.memo(\n  ({ savings, logicalSize, isLoading, error }) => {\n    const infoText =\n      'Savings shows the uncompressed and non-deduped data that would have been stored without those techniques';\n    let stats: string = null;\n    const savingsValue = Number(savings);\n    if (savings && logicalSize) {\n      const savedBytes = humanizeBinaryBytes(savingsValue).string;\n      const savingsPercentage = `${savedBytes} (${\n        humanizePercentage((100 * savingsValue) / Number(logicalSize)).string\n      })`;\n      stats = savingsValue <= 0 ? 'No Savings' : savingsPercentage;\n    }\n    return (\n      <ItemBody\n        title=\"Savings\"\n        stats={stats}\n        infoText={infoText}\n        isLoading={isLoading}\n        error={error}\n      />\n    );\n  },\n);\n\ntype ItemBodyProps = {\n  title: string;\n  stats: string;\n  infoText: string;\n  isLoading: boolean;\n  error: boolean;\n};\n\ntype EfficiencyItemProps = {\n  efficiency: string;\n  isLoading: boolean;\n  error: boolean;\n};\n\ntype SavingsItemProps = {\n  savings: string;\n  logicalSize: string;\n  isLoading: boolean;\n  error: boolean;\n};\n"]}]}