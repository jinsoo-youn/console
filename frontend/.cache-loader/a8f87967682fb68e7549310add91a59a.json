{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/breakdown-card/utils.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/breakdown-card/utils.tsx","mtime":1615298458590},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { Colors, COLORMAP, OTHER_TOOLTIP } from './consts';\nconst getTotal = (stats) => stats.reduce((total, dataPoint) => total + dataPoint.y, 0);\nconst addOthers = (stats, metricTotal, humanize) => {\n    const top5Total = getTotal(stats);\n    const others = Number(metricTotal) - top5Total;\n    const othersData = {\n        x: '0',\n        y: others,\n        name: 'Other',\n        color: Colors.OTHER,\n        label: humanize(others).string,\n        fill: 'rgb(96, 98, 103)',\n        link: OTHER_TOOLTIP,\n        id: 6,\n        ns: '',\n    };\n    return othersData;\n};\nexport const addAvailable = (stats, capacityAvailable, metricTotal, humanize) => {\n    let othersData;\n    let availableData;\n    let newChartData = [...stats];\n    if (stats.length === 5) {\n        othersData = addOthers(stats, metricTotal, humanize);\n        newChartData = [...stats, othersData];\n    }\n    if (capacityAvailable) {\n        const availableInBytes = Number(capacityAvailable);\n        availableData = {\n            x: '0',\n            y: availableInBytes,\n            name: 'Available',\n            link: '',\n            color: '',\n            label: humanize(availableInBytes).string,\n            fill: '#b8bbbe',\n            id: 7,\n            ns: '',\n        };\n        newChartData = [...newChartData, availableData];\n    }\n    return newChartData;\n};\nexport const getLegends = (data) => data.map((d) => ({\n    name: `${d.name}\\n${d.label}`,\n    labels: { fill: d.color },\n    symbol: { fill: d.fill },\n    link: d.link,\n    labelId: d.name,\n    ns: d.ns,\n}));\nexport const getBarRadius = (index, length) => {\n    if (index === length - 1) {\n        return {\n            bottom: 3,\n            top: 3,\n        };\n    }\n    if (index === 0) {\n        return { bottom: 3 };\n    }\n    return {};\n};\nexport const sortInstantVectorStats = (stats) => {\n    stats.sort((a, b) => {\n        const y1 = a.y;\n        const y2 = b.y;\n        if (y1 === y2) {\n            const x1 = a.x;\n            const x2 = b.x;\n            return x1 < x2 ? -1 : x1 > x2 ? 1 : 0;\n        }\n        return y2 - y1;\n    });\n    return stats.length === 6 ? stats.splice(0, 5) : stats;\n};\nexport const getStackChartStats = (response, humanize) => response.map((r, i) => {\n    const capacity = humanize(r.y).string;\n    return {\n        // x value needs to be same for single bar stack chart\n        x: '0',\n        y: r.y,\n        name: _.truncate(`${r.x}`, { length: 12 }),\n        link: `${r.x}`,\n        color: Colors.LINK,\n        fill: COLORMAP[i],\n        label: capacity,\n        id: i,\n        ns: r.metric.namespace,\n    };\n});\nexport const getCapacityValue = (cephUsed, cephTotal, humanize) => {\n    const totalFormatted = humanize(cephTotal || 0);\n    const usedFormatted = humanize(cephUsed || 0, null, totalFormatted.unit);\n    const available = humanize(totalFormatted.value - usedFormatted.value, totalFormatted.unit, totalFormatted.unit);\n    return available;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/breakdown-card/utils.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/breakdown-card/utils.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { DataPoint } from '@console/internal/components/graphs';\nimport { Humanize } from '@console/internal/components/utils';\nimport { Colors, COLORMAP, OTHER_TOOLTIP } from './consts';\n\nconst getTotal = (stats: StackDataPoint[]) =>\n  stats.reduce((total, dataPoint) => total + dataPoint.y, 0);\n\nconst addOthers = (\n  stats: StackDataPoint[],\n  metricTotal: string,\n  humanize: Humanize,\n): StackDataPoint => {\n  const top5Total = getTotal(stats);\n  const others = Number(metricTotal) - top5Total;\n  const othersData = {\n    x: '0',\n    y: others,\n    name: 'Other',\n    color: Colors.OTHER,\n    label: humanize(others).string,\n    fill: 'rgb(96, 98, 103)',\n    link: OTHER_TOOLTIP,\n    id: 6,\n    ns: '',\n  };\n  return othersData;\n};\n\nexport const addAvailable = (\n  stats: StackDataPoint[],\n  capacityAvailable: string,\n  metricTotal: string,\n  humanize: Humanize,\n) => {\n  let othersData: StackDataPoint;\n  let availableData: StackDataPoint;\n  let newChartData: StackDataPoint[] = [...stats];\n  if (stats.length === 5) {\n    othersData = addOthers(stats, metricTotal, humanize);\n    newChartData = [...stats, othersData] as StackDataPoint[];\n  }\n  if (capacityAvailable) {\n    const availableInBytes = Number(capacityAvailable);\n    availableData = {\n      x: '0',\n      y: availableInBytes,\n      name: 'Available',\n      link: '',\n      color: '',\n      label: humanize(availableInBytes).string,\n      fill: '#b8bbbe',\n      id: 7,\n      ns: '',\n    };\n    newChartData = [...newChartData, availableData] as StackDataPoint[];\n  }\n  return newChartData;\n};\n\nexport const getLegends = (data: StackDataPoint[]) =>\n  data.map((d: StackDataPoint) => ({\n    name: `${d.name}\\n${d.label}`,\n    labels: { fill: d.color },\n    symbol: { fill: d.fill },\n    link: d.link,\n    labelId: d.name,\n    ns: d.ns,\n  }));\n\nexport const getBarRadius = (index: number, length: number) => {\n  if (index === length - 1) {\n    return {\n      bottom: 3,\n      top: 3,\n    };\n  }\n  if (index === 0) {\n    return { bottom: 3 };\n  }\n  return {};\n};\n\nexport const sortInstantVectorStats = (stats: DataPoint[]): DataPoint[] => {\n  stats.sort((a, b) => {\n    const y1 = a.y;\n    const y2 = b.y;\n    if (y1 === y2) {\n      const x1 = a.x;\n      const x2 = b.x;\n      return x1 < x2 ? -1 : x1 > x2 ? 1 : 0;\n    }\n    return y2 - y1;\n  });\n  return stats.length === 6 ? stats.splice(0, 5) : stats;\n};\n\nexport const getStackChartStats: GetStackStats = (response, humanize) =>\n  response.map((r, i) => {\n    const capacity = humanize(r.y).string;\n    return {\n      // x value needs to be same for single bar stack chart\n      x: '0',\n      y: r.y,\n      name: _.truncate(`${r.x}`, { length: 12 }),\n      link: `${r.x}`,\n      color: Colors.LINK,\n      fill: COLORMAP[i],\n      label: capacity,\n      id: i,\n      ns: r.metric.namespace,\n    };\n  });\n\ntype GetStackStats = (response: DataPoint[], humanize: Humanize) => StackDataPoint[];\n\nexport type StackDataPoint = DataPoint<string> & {\n  name: string;\n  link: string;\n  color: string;\n  fill: string;\n  id: number;\n  ns: string;\n};\n\nexport const getCapacityValue = (cephUsed: string, cephTotal: string, humanize: Humanize) => {\n  const totalFormatted = humanize(cephTotal || 0);\n  const usedFormatted = humanize(cephUsed || 0, null, totalFormatted.unit);\n  const available = humanize(\n    totalFormatted.value - usedFormatted.value,\n    totalFormatted.unit,\n    totalFormatted.unit,\n  );\n  return available;\n};\n"]}]}