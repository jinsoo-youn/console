{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/validations/common.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/validations/common.ts","mtime":1616735742430},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { addMissingSubject, getName, getNamespace, asValidationObject, validateEmptyValue, ValidationErrorType, joinGrammaticallyListOfItems, } from '@console/shared';\nimport { parseURL } from '../url';\nimport { END_WHITESPACE_ERROR, START_WHITESPACE_ERROR, URL_INVALID_ERROR } from './strings';\nexport const isValidationError = (validationObject) => !!validationObject && validationObject.type === ValidationErrorType.Error;\nexport const getValidationErrorMessage = (validationObject) => {\n    return (validationObject &&\n        validationObject.type === ValidationErrorType.Error &&\n        validationObject.message);\n};\nexport const isPositiveNumber = (value) => value && value.toString().match(/^[1-9]\\d*$/);\nexport const validateEntityAlreadyExists = (name, namespace, entities, { errorMessage, subject } = { errorMessage: undefined, subject: undefined }) => {\n    const exists = entities &&\n        entities.some((entity) => getName(entity) === name && getNamespace(entity) === namespace);\n    return exists ? asValidationObject(addMissingSubject(errorMessage, subject)) : null;\n};\nexport const validatePositiveInteger = (value, { subject } = { subject: undefined }) => {\n    const emptyError = validateEmptyValue(value, { subject });\n    if (emptyError) {\n        return emptyError;\n    }\n    return isPositiveNumber(value) ? null : asValidationObject('must be positive integer');\n};\nexport const validateTrim = (value, { subject } = { subject: undefined }) => {\n    const emptyError = validateEmptyValue(value, { subject });\n    if (emptyError) {\n        return emptyError;\n    }\n    let resultErrror;\n    if (_.trimStart(value).length !== value.length) {\n        resultErrror = START_WHITESPACE_ERROR;\n    }\n    if (_.trimEnd(value).length !== value.length) {\n        resultErrror = END_WHITESPACE_ERROR;\n    }\n    return resultErrror\n        ? asValidationObject(addMissingSubject(resultErrror, subject), ValidationErrorType.Error)\n        : null;\n};\nexport const validateURL = (value, { subject } = { subject: undefined }) => {\n    const trimError = validateTrim(value, { subject });\n    if (trimError) {\n        return trimError;\n    }\n    return parseURL(value) ? null : asValidationObject(addMissingSubject(URL_INVALID_ERROR, subject));\n};\nexport const validateBus = (value, allowedBuses) => {\n    if (allowedBuses && !allowedBuses.has(value)) {\n        return asValidationObject(`Invalid interface type. Valid types are: ${joinGrammaticallyListOfItems([...allowedBuses].map((b) => b.toString()))}`, ValidationErrorType.Error);\n    }\n    return null;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/validations/common.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/validations/common.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport {\n  addMissingSubject,\n  getName,\n  getNamespace,\n  asValidationObject,\n  validateEmptyValue,\n  ValidationErrorType,\n  ValidationObject,\n  joinGrammaticallyListOfItems,\n} from '@console/shared';\nimport { parseURL } from '../url';\nimport { END_WHITESPACE_ERROR, START_WHITESPACE_ERROR, URL_INVALID_ERROR } from './strings';\nimport { DiskBus } from '../../constants/vm/storage/disk-bus';\n\nexport const isValidationError = (validationObject: ValidationObject) =>\n  !!validationObject && validationObject.type === ValidationErrorType.Error;\n\nexport const getValidationErrorMessage = (validationObject: ValidationObject): string => {\n  return (\n    validationObject &&\n    validationObject.type === ValidationErrorType.Error &&\n    validationObject.message\n  );\n};\n\nexport const isPositiveNumber = (value) => value && value.toString().match(/^[1-9]\\d*$/);\n\nexport const validateEntityAlreadyExists = (\n  name,\n  namespace,\n  entities,\n  { errorMessage, subject } = { errorMessage: undefined, subject: undefined },\n): ValidationObject => {\n  const exists =\n    entities &&\n    entities.some((entity) => getName(entity) === name && getNamespace(entity) === namespace);\n  return exists ? asValidationObject(addMissingSubject(errorMessage, subject)) : null;\n};\n\nexport const validatePositiveInteger = (\n  value: string,\n  { subject } = { subject: undefined },\n): ValidationObject => {\n  const emptyError = validateEmptyValue(value, { subject });\n  if (emptyError) {\n    return emptyError;\n  }\n  return isPositiveNumber(value) ? null : asValidationObject('must be positive integer');\n};\n\nexport const validateTrim = (\n  value: string,\n  { subject }: { subject: string } = { subject: undefined },\n) => {\n  const emptyError = validateEmptyValue(value, { subject });\n  if (emptyError) {\n    return emptyError;\n  }\n\n  let resultErrror;\n  if (_.trimStart(value).length !== value.length) {\n    resultErrror = START_WHITESPACE_ERROR;\n  }\n\n  if (_.trimEnd(value).length !== value.length) {\n    resultErrror = END_WHITESPACE_ERROR;\n  }\n\n  return resultErrror\n    ? asValidationObject(addMissingSubject(resultErrror, subject), ValidationErrorType.Error)\n    : null;\n};\n\nexport const validateURL = (\n  value: string,\n  { subject }: { subject: string } = { subject: undefined },\n) => {\n  const trimError = validateTrim(value, { subject });\n  if (trimError) {\n    return trimError;\n  }\n\n  return parseURL(value) ? null : asValidationObject(addMissingSubject(URL_INVALID_ERROR, subject));\n};\n\nexport const validateBus = (value: DiskBus, allowedBuses: Set<DiskBus>): ValidationObject => {\n  if (allowedBuses && !allowedBuses.has(value)) {\n    return asValidationObject(\n      `Invalid interface type. Valid types are: ${joinGrammaticallyListOfItems(\n        [...allowedBuses].map((b) => b.toString()),\n      )}`,\n      ValidationErrorType.Error,\n    );\n  }\n  return null;\n};\n"]}]}