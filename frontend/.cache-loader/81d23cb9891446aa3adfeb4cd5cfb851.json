{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/health-checks/RequestTypeForms.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/health-checks/RequestTypeForms.tsx","mtime":1616735742380},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useFormikContext } from 'formik';\nimport { TextInputTypes, FormGroup } from '@patternfly/react-core';\nimport { InputField, CheckboxField, getFieldId, TextColumnField } from '@console/shared';\nimport { NameValueEditor } from '@console/internal/components/utils/name-value-editor';\nimport { Resources } from '../import/import-types';\nexport const renderPortField = (fieldName, resourceType) => {\n    if (resourceType === Resources.KnativeService) {\n        return (React.createElement(InputField, { type: TextInputTypes.text, name: \"knative-port\", label: \"Port\", placeholder: \"0\", isDisabled: true }));\n    }\n    return React.createElement(InputField, { type: TextInputTypes.text, name: fieldName, label: \"Port\", required: true });\n};\nexport const HTTPRequestTypeForm = ({ probeType }) => {\n    var _a, _b, _c;\n    const { values: { healthChecks, resources }, setFieldValue, } = useFormikContext();\n    const httpHeaders = (_c = (_b = (_a = healthChecks === null || healthChecks === void 0 ? void 0 : healthChecks[probeType]) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.httpGet) === null || _c === void 0 ? void 0 : _c.httpHeaders;\n    const initialNameValuePairs = !_.isEmpty(httpHeaders)\n        ? httpHeaders.map((val) => _.values(val))\n        : [['', '']];\n    const [nameValue, setNameValue] = React.useState(initialNameValuePairs);\n    const portFieldName = `healthChecks.${probeType}.data.httpGet.port`;\n    const handleNameValuePairs = React.useCallback(({ nameValuePairs }) => {\n        const updatedNameValuePairs = _.compact(nameValuePairs.map(([name, value]) => {\n            if (_.isObject(value)) {\n                return { name, valueFrom: value };\n            }\n            if (value.length) {\n                return { name, value };\n            }\n            return null;\n        }));\n        setNameValue(nameValuePairs);\n        setFieldValue(`healthChecks.${probeType}.data.httpGet.httpHeaders`, updatedNameValuePairs);\n    }, [setFieldValue, probeType]);\n    return (React.createElement(React.Fragment, null,\n        React.createElement(CheckboxField, { name: `healthChecks.${probeType}.data.httpGet.scheme`, label: \"Use HTTPS\", value: \"HTTPS\" }),\n        React.createElement(FormGroup, { fieldId: getFieldId(`healthChecks.${probeType}.data.httpGet.httpHeaders`, 'name-value'), name: `healthChecks.${probeType}.data.httpGet.httpHeaders`, label: \"HTTP Headers\" },\n            React.createElement(NameValueEditor, { nameValuePairs: nameValue, valueString: \"Value\", nameString: \"Header Name\", addString: \"Add Header\", readOnly: false, allowSorting: false, updateParentData: handleNameValuePairs })),\n        React.createElement(InputField, { type: TextInputTypes.text, name: `healthChecks.${probeType}.data.httpGet.path`, label: \"Path\", placeholder: \"/\" }),\n        renderPortField(portFieldName, resources)));\n};\nexport const TCPRequestTypeForm = ({ probeType }) => {\n    const { values: { resources }, } = useFormikContext();\n    const portFieldName = `healthChecks.${probeType}.data.tcpSocket.port`;\n    return renderPortField(portFieldName, resources);\n};\nexport const CommandRequestTypeForm = ({ probeType }) => {\n    var _a, _b, _c;\n    const { values: { healthChecks }, } = useFormikContext();\n    const commands = ((_c = (_b = (_a = healthChecks === null || healthChecks === void 0 ? void 0 : healthChecks[probeType]) === null || _a === void 0 ? void 0 : _a.data) === null || _b === void 0 ? void 0 : _b.exec) === null || _c === void 0 ? void 0 : _c.command) || [''];\n    return (React.createElement(TextColumnField, { name: `healthChecks.${probeType}.data.exec.command`, label: \"Command\", addLabel: \"Add command\", placeholder: \"argument\", helpText: \"The command to run inside the container.\", required: true, disableDeleteRow: commands.length === 1 }));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/health-checks/RequestTypeForms.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/health-checks/RequestTypeForms.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { FormikValues, useFormikContext } from 'formik';\nimport { TextInputTypes, FormGroup } from '@patternfly/react-core';\nimport { InputField, CheckboxField, getFieldId, TextColumnField } from '@console/shared';\nimport { NameValueEditor } from '@console/internal/components/utils/name-value-editor';\nimport { Resources } from '../import/import-types';\n\ninterface RequestTypeFormProps {\n  probeType?: string;\n}\n\nexport const renderPortField = (fieldName: string, resourceType: Resources) => {\n  if (resourceType === Resources.KnativeService) {\n    return (\n      <InputField\n        type={TextInputTypes.text}\n        name=\"knative-port\"\n        label=\"Port\"\n        placeholder=\"0\"\n        isDisabled\n      />\n    );\n  }\n  return <InputField type={TextInputTypes.text} name={fieldName} label=\"Port\" required />;\n};\n\nexport const HTTPRequestTypeForm: React.FC<RequestTypeFormProps> = ({ probeType }) => {\n  const {\n    values: { healthChecks, resources },\n    setFieldValue,\n  } = useFormikContext<FormikValues>();\n  const httpHeaders = healthChecks?.[probeType]?.data?.httpGet?.httpHeaders;\n  const initialNameValuePairs = !_.isEmpty(httpHeaders)\n    ? httpHeaders.map((val) => _.values(val))\n    : [['', '']];\n  const [nameValue, setNameValue] = React.useState(initialNameValuePairs);\n  const portFieldName = `healthChecks.${probeType}.data.httpGet.port`;\n\n  const handleNameValuePairs = React.useCallback(\n    ({ nameValuePairs }) => {\n      const updatedNameValuePairs = _.compact(\n        nameValuePairs.map(([name, value]) => {\n          if (_.isObject(value)) {\n            return { name, valueFrom: value };\n          }\n          if (value.length) {\n            return { name, value };\n          }\n          return null;\n        }),\n      );\n      setNameValue(nameValuePairs);\n      setFieldValue(`healthChecks.${probeType}.data.httpGet.httpHeaders`, updatedNameValuePairs);\n    },\n    [setFieldValue, probeType],\n  );\n  return (\n    <>\n      <CheckboxField\n        name={`healthChecks.${probeType}.data.httpGet.scheme`}\n        label=\"Use HTTPS\"\n        value=\"HTTPS\"\n      />\n      <FormGroup\n        fieldId={getFieldId(`healthChecks.${probeType}.data.httpGet.httpHeaders`, 'name-value')}\n        name={`healthChecks.${probeType}.data.httpGet.httpHeaders`}\n        label=\"HTTP Headers\"\n      >\n        <NameValueEditor\n          nameValuePairs={nameValue}\n          valueString=\"Value\"\n          nameString=\"Header Name\"\n          addString=\"Add Header\"\n          readOnly={false}\n          allowSorting={false}\n          updateParentData={handleNameValuePairs}\n        />\n      </FormGroup>\n      <InputField\n        type={TextInputTypes.text}\n        name={`healthChecks.${probeType}.data.httpGet.path`}\n        label=\"Path\"\n        placeholder=\"/\"\n      />\n      {renderPortField(portFieldName, resources)}\n    </>\n  );\n};\n\nexport const TCPRequestTypeForm: React.FC<RequestTypeFormProps> = ({ probeType }) => {\n  const {\n    values: { resources },\n  } = useFormikContext<FormikValues>();\n  const portFieldName = `healthChecks.${probeType}.data.tcpSocket.port`;\n  return renderPortField(portFieldName, resources);\n};\n\nexport const CommandRequestTypeForm: React.FC<RequestTypeFormProps> = ({ probeType }) => {\n  const {\n    values: { healthChecks },\n  } = useFormikContext<FormikValues>();\n  const commands = healthChecks?.[probeType]?.data?.exec?.command || [''];\n  return (\n    <TextColumnField\n      name={`healthChecks.${probeType}.data.exec.command`}\n      label=\"Command\"\n      addLabel=\"Add command\"\n      placeholder=\"argument\"\n      helpText=\"The command to run inside the container.\"\n      required\n      disableDeleteRow={commands.length === 1}\n    />\n  );\n};\n"]}]}