{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/anchors/EllipseAnchor.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/anchors/EllipseAnchor.ts","mtime":1616735742450},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { getEllipseAnchorPoint } from '../utils/anchor-utils';\nimport AbstractAnchor from './AbstractAnchor';\nexport default class EllipseAnchor extends AbstractAnchor {\n    getLocation(reference) {\n        const r = this.owner.getBounds();\n        if (r.isEmpty()) {\n            return r.getCenter();\n        }\n        const offset2x = this.offset * 2;\n        return getEllipseAnchorPoint(r.getCenter(), r.width + offset2x, r.height + offset2x, reference);\n    }\n}\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/anchors/EllipseAnchor.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/anchors/EllipseAnchor.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,qBAAqB,EAAE,MAAM,uBAAuB,CAAC;AAC9D,OAAO,cAAc,MAAM,kBAAkB,CAAC;AAE9C,MAAM,CAAC,OAAO,OAAO,aAAc,SAAQ,cAAc;IACvD,WAAW,CAAC,SAAgB;QAC1B,MAAM,CAAC,GAAG,IAAI,CAAC,KAAK,CAAC,SAAS,EAAE,CAAC;QACjC,IAAI,CAAC,CAAC,OAAO,EAAE,EAAE;YACf,OAAO,CAAC,CAAC,SAAS,EAAE,CAAC;SACtB;QAED,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC;QACjC,OAAO,qBAAqB,CAAC,CAAC,CAAC,SAAS,EAAE,EAAE,CAAC,CAAC,KAAK,GAAG,QAAQ,EAAE,CAAC,CAAC,MAAM,GAAG,QAAQ,EAAE,SAAS,CAAC,CAAC;IAClG,CAAC;CACF","sourcesContent":["import Point from '../geom/Point';\nimport { getEllipseAnchorPoint } from '../utils/anchor-utils';\nimport AbstractAnchor from './AbstractAnchor';\n\nexport default class EllipseAnchor extends AbstractAnchor {\n  getLocation(reference: Point): Point {\n    const r = this.owner.getBounds();\n    if (r.isEmpty()) {\n      return r.getCenter();\n    }\n\n    const offset2x = this.offset * 2;\n    return getEllipseAnchorPoint(r.getCenter(), r.width + offset2x, r.height + offset2x, reference);\n  }\n}\n"]}]}