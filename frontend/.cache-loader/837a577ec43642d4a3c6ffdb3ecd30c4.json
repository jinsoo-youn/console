{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/noobaa-storage-plugin/src/components/create-backingstore-page/create-bs.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/noobaa-storage-plugin/src/components/create-backingstore-page/create-bs.tsx","mtime":1616735742440},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as classNames from 'classnames';\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport { ActionGroup, Button, FormGroup, Form, InputGroupText, TextInput, InputGroup, TextArea, } from '@patternfly/react-core';\nimport { HelpIcon, MinusIcon, PlusIcon } from '@patternfly/react-icons';\nimport { ButtonBar, Dropdown, ExternalLink, Firehose, RequestSizeInput, withHandlePromise, } from '@console/internal/components/utils';\nimport { apiVersionForModel, k8sCreate, referenceForModel, } from '@console/internal/module/k8s';\nimport { ResourceDropdown, getAPIVersion, getName } from '@console/shared';\nimport { SecretModel } from '@console/internal/models';\nimport { DashboardCardPopupLink } from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardLink';\nimport { SecretType } from '@console/internal/components/secrets/create-secret';\nimport { history } from '@console/internal/components/utils/router';\nimport { StorageClassDropdown } from '@console/internal/components/utils/storage-class-dropdown';\nimport { NooBaaBackingStoreModel } from '../../models';\nimport './create-bs.scss';\nimport { BC_PROVIDERS, AWS_REGIONS, NOOBAA_TYPE_MAP, PROVIDERS_NOOBAA_MAP, BUCKET_LABEL_NOOBAA_MAP, } from '../../constants';\nconst PROVIDERS = (() => {\n    const values = _.values(BC_PROVIDERS);\n    return _.zipObject(values, values);\n})();\nconst awsRegionItems = _.zipObject(AWS_REGIONS, AWS_REGIONS);\nconst externalProviders = [\n    BC_PROVIDERS.AWS,\n    BC_PROVIDERS.AZURE,\n    BC_PROVIDERS.S3,\n    BC_PROVIDERS.GCP,\n    BC_PROVIDERS.IBM,\n];\nconst endpointSupported = [BC_PROVIDERS.S3, BC_PROVIDERS.IBM];\n/**\n * aws-s3, s3 compatible, IBM COS share the same form\n */\nconst S3EndPointType = (props) => {\n    const [showSecret, setShowSecret] = React.useState(true);\n    const { provider, namespace, state, dispatch } = props;\n    const targetLabel = provider === BC_PROVIDERS.AZURE ? 'Target Blob Container' : 'Target Bucket';\n    const credentialField1Label = provider === BC_PROVIDERS.AZURE ? 'Account Name' : 'Access Key';\n    const credentialField2Label = provider === BC_PROVIDERS.AZURE ? 'Account Key' : 'Secret Key';\n    const resources = [\n        {\n            isList: true,\n            namespace,\n            kind: SecretModel.kind,\n            prop: 'secrets',\n        },\n    ];\n    const switchToSecret = () => {\n        setShowSecret(true);\n        dispatch({ type: 'setAccessKey', value: '' });\n        dispatch({ type: 'setSecretKey', value: '' });\n    };\n    const switchToCredentials = () => {\n        setShowSecret(false);\n        dispatch({ type: 'setSecretName', value: '' });\n    };\n    return (React.createElement(React.Fragment, null,\n        provider === BC_PROVIDERS.AWS && (React.createElement(FormGroup, { label: \"Region\", fieldId: \"region\", className: \"nb-bs-form-entry\", isRequired: true },\n            React.createElement(Dropdown, { className: \"nb-bs-form-entry__dropdown\", menuClassName: \"nb-bs-form-entry__dropdown--short\", buttonClassName: \"nb-bs-form-entry__dropdown\", onChange: (e) => {\n                    dispatch({ type: 'setRegion', value: e });\n                }, items: awsRegionItems, selectedKey: AWS_REGIONS[0], \"aria-label\": \"Region Dropdown\" }))),\n        endpointSupported.includes(provider) && (React.createElement(FormGroup, { label: \"Endpoint\", fieldId: \"endpoint\", className: \"nb-bs-form-entry\", isRequired: true },\n            React.createElement(TextInput, { onChange: (e) => {\n                    dispatch({ type: 'setEndpoint', value: e });\n                }, value: state.endpoint, \"aria-label\": \"Endpoint Address\" }))),\n        showSecret ? (React.createElement(FormGroup, { label: \"Secret\", fieldId: \"secret-dropdown\", className: \"nb-bs-form-entry nb-bs-form-entry--full-width\", isRequired: true },\n            React.createElement(InputGroup, null,\n                React.createElement(Firehose, { resources: resources },\n                    React.createElement(ResourceDropdown, { selectedKey: state.secretName, placeholder: \"Select Secret\", className: \"nb-bs-form-entry__dropdown nb-bs-form-entry__dropdown--full-width\", buttonClassName: \"nb-bs-form-entry__dropdown\", dataSelector: ['metadata', 'name'], onChange: (e) => dispatch({ type: 'setSecretName', value: e }) })),\n                React.createElement(Button, { variant: \"plain\", onClick: switchToCredentials }, \"Switch to Credentials\")))) : (React.createElement(React.Fragment, null,\n            React.createElement(FormGroup, { label: credentialField1Label, fieldId: \"acess-key\" },\n                React.createElement(InputGroup, null,\n                    React.createElement(TextInput, { value: state.accessKey, onChange: (e) => {\n                            dispatch({ type: 'setAccessKey', value: e });\n                        }, \"aria-label\": \"Access Key Field\" }),\n                    React.createElement(Button, { variant: \"plain\", onClick: switchToSecret }, \"Switch to Secret\"))),\n            React.createElement(FormGroup, { className: \"nb-bs-form-entry\", label: credentialField2Label, fieldId: \"secret-key\" },\n                React.createElement(TextInput, { value: state.secretKey, onChange: (e) => {\n                        dispatch({ type: 'setSecretKey', value: e });\n                    }, \"aria-label\": \"Secret Key Field\", type: \"password\" })))),\n        React.createElement(FormGroup, { label: targetLabel, fieldId: \"target-bucket\", className: \"nb-bs-form-entry\", isRequired: true },\n            React.createElement(TextInput, { value: state.target, onChange: (e) => dispatch({ type: 'setTarget', value: e }), \"aria-label\": targetLabel }))));\n};\nconst PVCType = ({ state, dispatch }) => {\n    const [size, setSize] = React.useState('50');\n    const [, updateState] = React.useState();\n    const units = {\n        GiB: 'GiB',\n        TiB: 'TiB',\n    };\n    // Noobaa expected Ti console standrad is to show TiB\n    const unitConverter = {\n        GiB: 'Gi',\n        TiB: 'Ti',\n    };\n    // Fix for updating the storage class by force rerender\n    const forceUpdate = React.useCallback(() => updateState({}), []);\n    React.useEffect(() => {\n        forceUpdate();\n    }, [forceUpdate, state.storageClass]);\n    const onChange = (event) => {\n        const { value, unit } = event;\n        const input = `${value}${unitConverter[unit]}`;\n        setSize(value);\n        dispatch({ type: 'setVolumeSize', value: input });\n    };\n    const substract = () => {\n        if (state.numVolumes > 1) {\n            dispatch({ type: 'setVolumes', value: state.numVolumes - 1 });\n        }\n    };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(FormGroup, { label: \"Number of Volumes\", fieldId: \"set-volumes\", className: \"nb-bs-form-entry nb-bs-form-entry--short\", isRequired: true },\n            React.createElement(InputGroup, null,\n                React.createElement(InputGroupText, null,\n                    React.createElement(MinusIcon, { onClick: substract }),\n                    ' '),\n                React.createElement(TextInput, { value: state.numVolumes, \"aria-label\": \"Number of Volumes\" }),\n                React.createElement(InputGroupText, null,\n                    React.createElement(PlusIcon, { onClick: () => dispatch({ type: 'setVolumes', value: state.numVolumes + 1 }) }),\n                    ' '))),\n        React.createElement(FormGroup, { label: \"Volume Size\", fieldId: \"volume-size\", className: \"nb-bs-form-entry nb-bs-form-entry--short\", isRequired: true },\n            React.createElement(RequestSizeInput, { name: \"Volume Size\", onChange: onChange, dropdownUnits: units, defaultRequestSizeUnit: \"GiB\", defaultRequestSizeValue: size })),\n        React.createElement(FormGroup, { fieldId: \"storage-class\", className: \"nb-bs-form-entry\", isRequired: true },\n            React.createElement(StorageClassDropdown, { onChange: (sc) => dispatch({ type: 'setStorageClass', value: getName(sc) }), defaultClass: \"ocs-storagecluster-ceph-rbd\", id: \"sc-dropdown\", required: true }))));\n};\nconst gcpHelpText = (React.createElement(DashboardCardPopupLink, { linkTitle: React.createElement(React.Fragment, null,\n        React.createElement(HelpIcon, null),\n        \" Where can I find google cloud credentials?\"), popupTitle: \" \" },\n    React.createElement(\"div\", null,\n        \"Service account keys are needed for Google Cloud Storage authentication. The keys can be found in the service accounts page in the GCP console.\",\n        React.createElement(ExternalLink, { href: \"https://cloud.google.com/iam/docs/service-accounts#service_account_keys\", text: \"Learn more\" }))));\nconst GCPEndpointType = (props) => {\n    const [fileData, setFileData] = React.useState('');\n    const [inputData, setInputData] = React.useState('');\n    const { state, dispatch } = props;\n    const onUpload = (event) => {\n        event.preventDefault();\n        const file = event.target.files[0];\n        const reader = new FileReader();\n        reader.onload = (ev) => {\n            const data = _.get(ev, 'target.result');\n            setFileData(data);\n            setInputData(file.name);\n            dispatch({ type: 'setGcpJSON', value: data });\n        };\n        reader.readAsText(file);\n    };\n    return (React.createElement(React.Fragment, null,\n        React.createElement(FormGroup, { className: \"nb-bs-form-entry\", helperText: \"Upload a .json file with the service account keys provided by google cloud storage.\", label: \"Secret Key\", fieldId: \"secret-key\", isRequired: true },\n            React.createElement(InputGroup, null,\n                React.createElement(TextInput, { isReadOnly: true, value: inputData, className: \"nb-bs-form-entry__file-name\", placeholder: \"Upload JSON\", \"aria-label\": \"Uploaded File Name\" }),\n                React.createElement(\"div\", { className: \"inputbtn nb-bs-form-entry-upload-btn\" },\n                    React.createElement(Button, { href: \"#\", variant: \"secondary\", className: \"custom-input-btn nb-bs-form-entry-upload-btn__button\" }, \"Browse\"),\n                    React.createElement(\"input\", { type: \"file\", id: \"inputButton\", className: \"nb-bs-form-entry-upload-btn__input\", onChange: onUpload, \"aria-label\": \"Upload File\" })))),\n        React.createElement(FormGroup, { className: \"nb-bs-form-entry\", helperText: gcpHelpText, fieldId: \"gcp-data\" },\n            React.createElement(TextArea, { \"aria-label\": \"cluster-metadata\", className: \"nb-bs-form-entry__data-dump\", value: fileData })),\n        React.createElement(FormGroup, { className: \"nb-bs-form-entry\", label: \"Target Bucket\", fieldId: \"target-bucket\", isRequired: true },\n            React.createElement(TextInput, { value: state.target, onChange: (e) => {\n                    dispatch({ type: 'setTarget', value: e });\n                }, \"aria-label\": \"Target Bucket\" }))));\n};\nconst initialState = {\n    secretName: '',\n    secretKey: '',\n    accessKey: '',\n    region: AWS_REGIONS[0],\n    gcpJSON: '',\n    target: '',\n    endpoint: '',\n    numVolumes: 1,\n    volumeSize: '50Gi',\n    storageClass: '',\n};\nconst providerDataReducer = (state, action) => {\n    const { value } = action;\n    switch (action.type) {\n        case 'setSecretName':\n            return Object.assign({}, state, { secretName: value });\n        case 'setSecretKey':\n            return Object.assign({}, state, { secretKey: value });\n        case 'setAccessKey':\n            return Object.assign({}, state, { accessKey: value });\n        case 'setRegion':\n            return Object.assign({}, state, { region: value });\n        case 'setGcpJSON':\n            return Object.assign({}, state, { gcpJSON: value });\n        case 'setTarget':\n            return Object.assign({}, state, { target: value });\n        case 'setEndpoint':\n            return Object.assign({}, state, { endpoint: value });\n        case 'setVolumes':\n            return Object.assign({}, state, { numVolumes: value });\n        case 'setVolumeSize':\n            return Object.assign({}, state, { volumeSize: value });\n        case 'setStorageClass':\n            return Object.assign({}, state, { storageClass: value });\n        default:\n            return initialState;\n    }\n};\nconst secretPayloadCreator = (provider, namespace, secretName, field1, field2 = '') => {\n    const payload = {\n        apiVersion: getAPIVersion(SecretModel),\n        kind: SecretModel.kind,\n        stringData: {},\n        metadata: {\n            name: secretName,\n            namespace,\n        },\n        type: SecretType.opaque,\n    };\n    switch (provider) {\n        case BC_PROVIDERS.AZURE:\n            payload.stringData = {\n                AccountName: field1,\n                AccountKey: field2,\n            };\n            break;\n        case BC_PROVIDERS.GCP:\n            payload.stringData = {\n                GoogleServiceAccountPrivateKeyJson: field1,\n            };\n            break;\n        case BC_PROVIDERS.IBM:\n            payload.stringData = {\n                IBM_COS_ACCESS_KEY_ID: field1,\n                IBM_COS_SECRET_ACCESS_KEY: field2,\n            };\n            break;\n        default:\n            payload.stringData = {\n                AWS_ACCESS_KEY_ID: field1,\n                AWS_SECRET_ACCESS_KEY: field2,\n            };\n            break;\n    }\n    return payload;\n};\nconst CreateBackingStoreForm = withHandlePromise((props) => {\n    const [bsName, setBsName] = React.useState('');\n    const [provider, setProvider] = React.useState(BC_PROVIDERS.AWS);\n    const [providerDataState, providerDataDispatch] = React.useReducer(providerDataReducer, initialState);\n    const { cancel, className, close, inProgress, errorMessage, handlePromise, isPage, csv, namespace, } = props;\n    const onSubmit = (event) => {\n        event.preventDefault();\n        /** Create a secret if secret ==='' */\n        let { secretName } = providerDataState;\n        const promises = [];\n        if (!secretName && provider !== BC_PROVIDERS.PVC) {\n            secretName = bsName.concat('-secret');\n            const { secretKey, accessKey, gcpJSON } = providerDataState;\n            const secretPayload = secretPayloadCreator(provider, namespace, secretName, accessKey || gcpJSON, secretKey);\n            providerDataDispatch({ type: 'setSecretName', value: secretName });\n            promises.push(k8sCreate(SecretModel, secretPayload));\n        }\n        /** Payload for bs */\n        const bsPayload = {\n            apiVersion: apiVersionForModel(NooBaaBackingStoreModel),\n            kind: NooBaaBackingStoreModel.kind,\n            metadata: {\n                namespace,\n                name: bsName,\n            },\n            spec: {\n                type: NOOBAA_TYPE_MAP[provider],\n                ssl: false,\n            },\n        };\n        if (provider === BC_PROVIDERS.PVC) {\n            // eslint-disable-next-line\n            bsPayload.spec['pvPool'] = {\n                numVolumes: providerDataState.numVolumes,\n                storageClass: providerDataState.storageClass,\n                resources: {\n                    requests: {\n                        storage: providerDataState.volumeSize,\n                    },\n                },\n            };\n        }\n        else if (externalProviders.includes(provider)) {\n            bsPayload.spec = Object.assign(Object.assign({}, bsPayload.spec), { [PROVIDERS_NOOBAA_MAP[provider]]: {\n                    [BUCKET_LABEL_NOOBAA_MAP[provider]]: providerDataState.target,\n                    secret: {\n                        name: secretName,\n                        namespace,\n                    },\n                } });\n        }\n        if (provider === BC_PROVIDERS.S3) {\n            // eslint-disable-next-line\n            bsPayload.spec['s3Compatible'] = Object.assign(Object.assign({}, bsPayload.spec['s3Compatible']), { endpoint: providerDataState.endpoint });\n        }\n        else if (provider === BC_PROVIDERS.IBM) {\n            bsPayload.spec.ibmCos = Object.assign(Object.assign({}, bsPayload.spec.ibmCos), { endpoint: providerDataState.endpoint });\n        }\n        // Add region in the end\n        if (provider === BC_PROVIDERS.AWS) {\n            bsPayload.spec.awsS3 = Object.assign(Object.assign({}, bsPayload.spec.awsS3), { region: providerDataState.region });\n        }\n        promises.push(k8sCreate(NooBaaBackingStoreModel, bsPayload));\n        return handlePromise(Promise.all(promises)).then((resource) => {\n            const lastIndex = resource.length - 1;\n            if (isPage)\n                history.push(`/k8s/ns/${namespace}/clusterserviceversions/${getName(csv)}/${referenceForModel(NooBaaBackingStoreModel)}/${getName(resource[lastIndex])}`);\n            else\n                close();\n        });\n    };\n    return (React.createElement(Form, { className: classNames('nb-bs-form', className), onSubmit: onSubmit },\n        React.createElement(FormGroup, { label: \"Backing Store Name\", fieldId: \"backingstore-name\", className: \"nb-bs-form-entry\", helperText: \"A unique name for the Backing Store within the project\", isRequired: true },\n            React.createElement(TextInput, { onChange: setBsName, value: bsName, placeholder: \"my-backingstore\", \"aria-label\": \"Backing Store Name\" })),\n        React.createElement(FormGroup, { label: \"Provider\", fieldId: \"provider-name\", className: \"nb-bs-form-entry\", isRequired: true },\n            React.createElement(Dropdown, { className: \"nb-bs-form-entry__dropdown\", buttonClassName: \"nb-bs-form-entry__dropdown\", onChange: setProvider, items: PROVIDERS, selectedKey: provider })),\n        provider === BC_PROVIDERS.GCP && (React.createElement(GCPEndpointType, { state: providerDataState, dispatch: providerDataDispatch })),\n        (provider === BC_PROVIDERS.AWS ||\n            provider === BC_PROVIDERS.S3 ||\n            provider === BC_PROVIDERS.IBM ||\n            provider === BC_PROVIDERS.AZURE) && (React.createElement(S3EndPointType, { provider: provider, namespace: \"openshift-storage\", state: providerDataState, dispatch: providerDataDispatch })),\n        provider === BC_PROVIDERS.PVC && (React.createElement(PVCType, { state: providerDataState, dispatch: providerDataDispatch })),\n        React.createElement(ButtonBar, { errorMessage: errorMessage, inProgress: inProgress },\n            React.createElement(ActionGroup, null,\n                React.createElement(Button, { type: \"submit\", variant: \"primary\" }, \"Create Backing Store\"),\n                React.createElement(Button, { onClick: cancel, variant: \"secondary\" }, \"Cancel\")))));\n});\nexport default CreateBackingStoreForm;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/noobaa-storage-plugin/src/components/create-backingstore-page/create-bs.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/noobaa-storage-plugin/src/components/create-backingstore-page/create-bs.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as classNames from 'classnames';\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport {\n  ActionGroup,\n  Button,\n  FormGroup,\n  Form,\n  InputGroupText,\n  TextInput,\n  InputGroup,\n  TextArea,\n} from '@patternfly/react-core';\nimport { HelpIcon, MinusIcon, PlusIcon } from '@patternfly/react-icons';\nimport {\n  ButtonBar,\n  Dropdown,\n  ExternalLink,\n  Firehose,\n  HandlePromiseProps,\n  RequestSizeInput,\n  withHandlePromise,\n} from '@console/internal/components/utils';\nimport {\n  apiVersionForModel,\n  k8sCreate,\n  referenceForModel,\n  K8sResourceKind,\n} from '@console/internal/module/k8s';\nimport { ModalComponentProps } from '@console/internal/components/factory';\nimport { ResourceDropdown, getAPIVersion, getName } from '@console/shared';\nimport { SecretModel } from '@console/internal/models';\nimport { DashboardCardPopupLink } from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardLink';\nimport { SecretType } from '@console/internal/components/secrets/create-secret';\nimport { history } from '@console/internal/components/utils/router';\nimport { StorageClassDropdown } from '@console/internal/components/utils/storage-class-dropdown';\nimport { NooBaaBackingStoreModel } from '../../models';\nimport './create-bs.scss';\nimport {\n  BC_PROVIDERS,\n  AWS_REGIONS,\n  NOOBAA_TYPE_MAP,\n  PROVIDERS_NOOBAA_MAP,\n  BUCKET_LABEL_NOOBAA_MAP,\n} from '../../constants';\n\nconst PROVIDERS = (() => {\n  const values = _.values(BC_PROVIDERS);\n  return _.zipObject(values, values);\n})();\n\nconst awsRegionItems = _.zipObject(AWS_REGIONS, AWS_REGIONS);\nconst externalProviders = [\n  BC_PROVIDERS.AWS,\n  BC_PROVIDERS.AZURE,\n  BC_PROVIDERS.S3,\n  BC_PROVIDERS.GCP,\n  BC_PROVIDERS.IBM,\n];\nconst endpointSupported = [BC_PROVIDERS.S3, BC_PROVIDERS.IBM];\n\n/**\n * aws-s3, s3 compatible, IBM COS share the same form\n */\nconst S3EndPointType: React.FC<S3EndpointTypeProps> = (props) => {\n  const [showSecret, setShowSecret] = React.useState(true);\n  const { provider, namespace, state, dispatch } = props;\n\n  const targetLabel = provider === BC_PROVIDERS.AZURE ? 'Target Blob Container' : 'Target Bucket';\n  const credentialField1Label = provider === BC_PROVIDERS.AZURE ? 'Account Name' : 'Access Key';\n  const credentialField2Label = provider === BC_PROVIDERS.AZURE ? 'Account Key' : 'Secret Key';\n  const resources = [\n    {\n      isList: true,\n      namespace,\n      kind: SecretModel.kind,\n      prop: 'secrets',\n    },\n  ];\n\n  const switchToSecret = () => {\n    setShowSecret(true);\n    dispatch({ type: 'setAccessKey', value: '' });\n    dispatch({ type: 'setSecretKey', value: '' });\n  };\n\n  const switchToCredentials = () => {\n    setShowSecret(false);\n    dispatch({ type: 'setSecretName', value: '' });\n  };\n\n  return (\n    <>\n      {provider === BC_PROVIDERS.AWS && (\n        <FormGroup label=\"Region\" fieldId=\"region\" className=\"nb-bs-form-entry\" isRequired>\n          <Dropdown\n            className=\"nb-bs-form-entry__dropdown\"\n            menuClassName=\"nb-bs-form-entry__dropdown--short\"\n            buttonClassName=\"nb-bs-form-entry__dropdown\"\n            onChange={(e) => {\n              dispatch({ type: 'setRegion', value: e });\n            }}\n            items={awsRegionItems}\n            selectedKey={AWS_REGIONS[0]}\n            aria-label=\"Region Dropdown\"\n          />\n        </FormGroup>\n      )}\n\n      {endpointSupported.includes(provider) && (\n        <FormGroup label=\"Endpoint\" fieldId=\"endpoint\" className=\"nb-bs-form-entry\" isRequired>\n          <TextInput\n            onChange={(e) => {\n              dispatch({ type: 'setEndpoint', value: e });\n            }}\n            value={state.endpoint}\n            aria-label=\"Endpoint Address\"\n          />\n        </FormGroup>\n      )}\n\n      {showSecret ? (\n        <FormGroup\n          label=\"Secret\"\n          fieldId=\"secret-dropdown\"\n          className=\"nb-bs-form-entry nb-bs-form-entry--full-width\"\n          isRequired\n        >\n          <InputGroup>\n            <Firehose resources={resources}>\n              <ResourceDropdown\n                selectedKey={state.secretName}\n                placeholder=\"Select Secret\"\n                className=\"nb-bs-form-entry__dropdown nb-bs-form-entry__dropdown--full-width\"\n                buttonClassName=\"nb-bs-form-entry__dropdown\"\n                dataSelector={['metadata', 'name']}\n                onChange={(e) => dispatch({ type: 'setSecretName', value: e })}\n              />\n            </Firehose>\n            <Button variant=\"plain\" onClick={switchToCredentials}>\n              Switch to Credentials\n            </Button>\n          </InputGroup>\n        </FormGroup>\n      ) : (\n        <>\n          <FormGroup label={credentialField1Label} fieldId=\"acess-key\">\n            <InputGroup>\n              <TextInput\n                value={state.accessKey}\n                onChange={(e) => {\n                  dispatch({ type: 'setAccessKey', value: e });\n                }}\n                aria-label=\"Access Key Field\"\n              />\n              <Button variant=\"plain\" onClick={switchToSecret}>\n                Switch to Secret\n              </Button>\n            </InputGroup>\n          </FormGroup>\n          <FormGroup\n            className=\"nb-bs-form-entry\"\n            label={credentialField2Label}\n            fieldId=\"secret-key\"\n          >\n            <TextInput\n              value={state.secretKey}\n              onChange={(e) => {\n                dispatch({ type: 'setSecretKey', value: e });\n              }}\n              aria-label=\"Secret Key Field\"\n              type=\"password\"\n            />\n          </FormGroup>\n        </>\n      )}\n      <FormGroup\n        label={targetLabel}\n        fieldId=\"target-bucket\"\n        className=\"nb-bs-form-entry\"\n        isRequired\n      >\n        <TextInput\n          value={state.target}\n          onChange={(e) => dispatch({ type: 'setTarget', value: e })}\n          aria-label={targetLabel}\n        />\n      </FormGroup>\n    </>\n  );\n};\n\nconst PVCType: React.FC<PVCTypeProps> = ({ state, dispatch }) => {\n  const [size, setSize] = React.useState('50');\n  const [, updateState] = React.useState();\n  const units = {\n    GiB: 'GiB',\n    TiB: 'TiB',\n  };\n\n  // Noobaa expected Ti console standrad is to show TiB\n  const unitConverter = {\n    GiB: 'Gi',\n    TiB: 'Ti',\n  };\n\n  // Fix for updating the storage class by force rerender\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n\n  React.useEffect(() => {\n    forceUpdate();\n  }, [forceUpdate, state.storageClass]);\n\n  const onChange = (event) => {\n    const { value, unit } = event;\n    const input = `${value}${unitConverter[unit]}`;\n    setSize(value);\n    dispatch({ type: 'setVolumeSize', value: input });\n  };\n\n  const substract = () => {\n    if (state.numVolumes > 1) {\n      dispatch({ type: 'setVolumes', value: state.numVolumes - 1 });\n    }\n  };\n\n  return (\n    <>\n      <FormGroup\n        label=\"Number of Volumes\"\n        fieldId=\"set-volumes\"\n        className=\"nb-bs-form-entry nb-bs-form-entry--short\"\n        isRequired\n      >\n        <InputGroup>\n          <InputGroupText>\n            <MinusIcon onClick={substract} />{' '}\n          </InputGroupText>\n          <TextInput value={state.numVolumes} aria-label=\"Number of Volumes\" />\n          <InputGroupText>\n            <PlusIcon\n              onClick={() => dispatch({ type: 'setVolumes', value: state.numVolumes + 1 })}\n            />{' '}\n          </InputGroupText>\n        </InputGroup>\n      </FormGroup>\n      <FormGroup\n        label=\"Volume Size\"\n        fieldId=\"volume-size\"\n        className=\"nb-bs-form-entry nb-bs-form-entry--short\"\n        isRequired\n      >\n        <RequestSizeInput\n          name=\"Volume Size\"\n          onChange={onChange}\n          dropdownUnits={units}\n          defaultRequestSizeUnit=\"GiB\"\n          defaultRequestSizeValue={size}\n        />\n      </FormGroup>\n      <FormGroup fieldId=\"storage-class\" className=\"nb-bs-form-entry\" isRequired>\n        <StorageClassDropdown\n          onChange={(sc) => dispatch({ type: 'setStorageClass', value: getName(sc) })}\n          defaultClass=\"ocs-storagecluster-ceph-rbd\"\n          id=\"sc-dropdown\"\n          required\n        />\n      </FormGroup>\n    </>\n  );\n};\n\nconst gcpHelpText = (\n  <DashboardCardPopupLink\n    linkTitle={\n      <>\n        <HelpIcon /> Where can I find google cloud credentials?\n      </>\n    }\n    popupTitle=\" \"\n  >\n    <div>\n      Service account keys are needed for Google Cloud Storage authentication. The keys can be found\n      in the service accounts page in the GCP console.\n      <ExternalLink\n        href=\"https://cloud.google.com/iam/docs/service-accounts#service_account_keys\"\n        text=\"Learn more\"\n      />\n    </div>\n  </DashboardCardPopupLink>\n);\n\nconst GCPEndpointType: React.FC<GCPEndPointTypeProps> = (props) => {\n  const [fileData, setFileData] = React.useState('');\n  const [inputData, setInputData] = React.useState('');\n  const { state, dispatch } = props;\n\n  const onUpload = (event) => {\n    event.preventDefault();\n    const file = event.target.files[0];\n    const reader = new FileReader();\n    reader.onload = (ev) => {\n      const data = _.get(ev, 'target.result');\n      setFileData(data);\n      setInputData(file.name);\n      dispatch({ type: 'setGcpJSON', value: data });\n    };\n    reader.readAsText(file);\n  };\n\n  return (\n    <>\n      <FormGroup\n        className=\"nb-bs-form-entry\"\n        helperText=\"Upload a .json file with the service account keys provided by google cloud storage.\"\n        label=\"Secret Key\"\n        fieldId=\"secret-key\"\n        isRequired\n      >\n        <InputGroup>\n          <TextInput\n            isReadOnly\n            value={inputData}\n            className=\"nb-bs-form-entry__file-name\"\n            placeholder=\"Upload JSON\"\n            aria-label=\"Uploaded File Name\"\n          />\n          <div className=\"inputbtn nb-bs-form-entry-upload-btn\">\n            <Button\n              href=\"#\"\n              variant=\"secondary\"\n              className=\"custom-input-btn nb-bs-form-entry-upload-btn__button\"\n            >\n              Browse\n            </Button>\n            <input\n              type=\"file\"\n              id=\"inputButton\"\n              className=\"nb-bs-form-entry-upload-btn__input\"\n              onChange={onUpload}\n              aria-label=\"Upload File\"\n            />\n          </div>\n        </InputGroup>\n      </FormGroup>\n      <FormGroup className=\"nb-bs-form-entry\" helperText={gcpHelpText} fieldId=\"gcp-data\">\n        <TextArea\n          aria-label=\"cluster-metadata\"\n          className=\"nb-bs-form-entry__data-dump\"\n          value={fileData}\n        />\n      </FormGroup>\n      <FormGroup\n        className=\"nb-bs-form-entry\"\n        label=\"Target Bucket\"\n        fieldId=\"target-bucket\"\n        isRequired\n      >\n        <TextInput\n          value={state.target}\n          onChange={(e) => {\n            dispatch({ type: 'setTarget', value: e });\n          }}\n          aria-label=\"Target Bucket\"\n        />\n      </FormGroup>\n    </>\n  );\n};\n\ntype ProviderDataState = {\n  secretName: string;\n  secretKey: string;\n  accessKey: string;\n  region: string;\n  gcpJSON: string;\n  target: string;\n  endpoint: string;\n  numVolumes: number;\n  volumeSize: string;\n  storageClass: string;\n};\n\ntype Action =\n  | { type: 'setSecretName'; value: string }\n  | { type: 'setSecretKey'; value: string }\n  | { type: 'setAccessKey'; value: string }\n  | { type: 'setRegion'; value: string }\n  | { type: 'setGcpJSON'; value: string }\n  | { type: 'setTarget'; value: string }\n  | { type: 'setEndpoint'; value: string }\n  | { type: 'setVolumes'; value: number }\n  | { type: 'setVolumeSize'; value: string }\n  | { type: 'setStorageClass'; value: string };\n\ntype BSPayload = {\n  apiVersion: string;\n  kind: string;\n  metadata: {\n    namespace: string;\n    name: string;\n  };\n  spec: {\n    type: string;\n    ssl: boolean;\n    [key: string]: any;\n  };\n};\n\nconst initialState: ProviderDataState = {\n  secretName: '',\n  secretKey: '',\n  accessKey: '',\n  region: AWS_REGIONS[0],\n  gcpJSON: '',\n  target: '',\n  endpoint: '',\n  numVolumes: 1,\n  volumeSize: '50Gi',\n  storageClass: '',\n};\n\nconst providerDataReducer = (state: ProviderDataState, action: Action) => {\n  const { value } = action;\n  switch (action.type) {\n    case 'setSecretName':\n      return Object.assign({}, state, { secretName: value });\n    case 'setSecretKey':\n      return Object.assign({}, state, { secretKey: value });\n    case 'setAccessKey':\n      return Object.assign({}, state, { accessKey: value });\n    case 'setRegion':\n      return Object.assign({}, state, { region: value });\n    case 'setGcpJSON':\n      return Object.assign({}, state, { gcpJSON: value });\n    case 'setTarget':\n      return Object.assign({}, state, { target: value });\n    case 'setEndpoint':\n      return Object.assign({}, state, { endpoint: value });\n    case 'setVolumes':\n      return Object.assign({}, state, { numVolumes: value });\n    case 'setVolumeSize':\n      return Object.assign({}, state, { volumeSize: value });\n    case 'setStorageClass':\n      return Object.assign({}, state, { storageClass: value });\n    default:\n      return initialState;\n  }\n};\n\nconst secretPayloadCreator = (\n  provider: string,\n  namespace: string,\n  secretName: string,\n  field1: string,\n  field2 = '',\n) => {\n  const payload = {\n    apiVersion: getAPIVersion(SecretModel),\n    kind: SecretModel.kind,\n    stringData: {},\n    metadata: {\n      name: secretName,\n      namespace,\n    },\n    type: SecretType.opaque,\n  };\n\n  switch (provider) {\n    case BC_PROVIDERS.AZURE:\n      payload.stringData = {\n        AccountName: field1,\n        AccountKey: field2,\n      };\n      break;\n    case BC_PROVIDERS.GCP:\n      payload.stringData = {\n        GoogleServiceAccountPrivateKeyJson: field1,\n      };\n      break;\n    case BC_PROVIDERS.IBM:\n      payload.stringData = {\n        IBM_COS_ACCESS_KEY_ID: field1,\n        IBM_COS_SECRET_ACCESS_KEY: field2,\n      };\n      break;\n    default:\n      payload.stringData = {\n        AWS_ACCESS_KEY_ID: field1,\n        AWS_SECRET_ACCESS_KEY: field2,\n      };\n      break;\n  }\n  return payload;\n};\n\nconst CreateBackingStoreForm: React.FC<CreateBackingStoreFormProps> = withHandlePromise<\n  CreateBackingStoreFormProps & HandlePromiseProps\n>((props) => {\n  const [bsName, setBsName] = React.useState('');\n  const [provider, setProvider] = React.useState(BC_PROVIDERS.AWS);\n  const [providerDataState, providerDataDispatch] = React.useReducer(\n    providerDataReducer,\n    initialState,\n  );\n\n  const {\n    cancel,\n    className,\n    close,\n    inProgress,\n    errorMessage,\n    handlePromise,\n    isPage,\n    csv,\n    namespace,\n  } = props;\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    /** Create a secret if secret ==='' */\n    let { secretName } = providerDataState;\n    const promises = [];\n    if (!secretName && provider !== BC_PROVIDERS.PVC) {\n      secretName = bsName.concat('-secret');\n      const { secretKey, accessKey, gcpJSON } = providerDataState;\n      const secretPayload = secretPayloadCreator(\n        provider,\n        namespace,\n        secretName,\n        accessKey || gcpJSON,\n        secretKey,\n      );\n      providerDataDispatch({ type: 'setSecretName', value: secretName });\n      promises.push(k8sCreate(SecretModel, secretPayload));\n    }\n    /** Payload for bs */\n    const bsPayload: BSPayload = {\n      apiVersion: apiVersionForModel(NooBaaBackingStoreModel),\n      kind: NooBaaBackingStoreModel.kind,\n      metadata: {\n        namespace,\n        name: bsName,\n      },\n      spec: {\n        type: NOOBAA_TYPE_MAP[provider],\n        ssl: false,\n      },\n    };\n    if (provider === BC_PROVIDERS.PVC) {\n      // eslint-disable-next-line\n      bsPayload.spec['pvPool'] = {\n        numVolumes: providerDataState.numVolumes,\n        storageClass: providerDataState.storageClass,\n        resources: {\n          requests: {\n            storage: providerDataState.volumeSize,\n          },\n        },\n      };\n    } else if (externalProviders.includes(provider)) {\n      bsPayload.spec = {\n        ...bsPayload.spec,\n        [PROVIDERS_NOOBAA_MAP[provider]]: {\n          [BUCKET_LABEL_NOOBAA_MAP[provider]]: providerDataState.target,\n          secret: {\n            name: secretName,\n            namespace,\n          },\n        },\n      };\n    }\n    if (provider === BC_PROVIDERS.S3) {\n      // eslint-disable-next-line\n      bsPayload.spec['s3Compatible'] = {\n        // eslint-disable-next-line\n        ...bsPayload.spec['s3Compatible'],\n        endpoint: providerDataState.endpoint,\n      };\n    } else if (provider === BC_PROVIDERS.IBM) {\n      bsPayload.spec.ibmCos = { ...bsPayload.spec.ibmCos, endpoint: providerDataState.endpoint };\n    }\n    // Add region in the end\n    if (provider === BC_PROVIDERS.AWS) {\n      bsPayload.spec.awsS3 = { ...bsPayload.spec.awsS3, region: providerDataState.region };\n    }\n\n    promises.push(k8sCreate(NooBaaBackingStoreModel, bsPayload));\n    return handlePromise(Promise.all(promises)).then((resource) => {\n      const lastIndex = resource.length - 1;\n      if (isPage)\n        history.push(\n          `/k8s/ns/${namespace}/clusterserviceversions/${getName(csv)}/${referenceForModel(\n            NooBaaBackingStoreModel,\n          )}/${getName(resource[lastIndex])}`,\n        );\n      else close();\n    });\n  };\n\n  return (\n    <Form className={classNames('nb-bs-form', className)} onSubmit={onSubmit}>\n      <FormGroup\n        label=\"Backing Store Name\"\n        fieldId=\"backingstore-name\"\n        className=\"nb-bs-form-entry\"\n        helperText=\"A unique name for the Backing Store within the project\"\n        isRequired\n      >\n        <TextInput\n          onChange={setBsName}\n          value={bsName}\n          placeholder=\"my-backingstore\"\n          aria-label=\"Backing Store Name\"\n        />\n      </FormGroup>\n\n      <FormGroup label=\"Provider\" fieldId=\"provider-name\" className=\"nb-bs-form-entry\" isRequired>\n        <Dropdown\n          className=\"nb-bs-form-entry__dropdown\"\n          buttonClassName=\"nb-bs-form-entry__dropdown\"\n          onChange={setProvider}\n          items={PROVIDERS}\n          selectedKey={provider}\n        />\n      </FormGroup>\n      {provider === BC_PROVIDERS.GCP && (\n        <GCPEndpointType state={providerDataState} dispatch={providerDataDispatch} />\n      )}\n      {(provider === BC_PROVIDERS.AWS ||\n        provider === BC_PROVIDERS.S3 ||\n        provider === BC_PROVIDERS.IBM ||\n        provider === BC_PROVIDERS.AZURE) && (\n        <S3EndPointType\n          provider={provider}\n          namespace=\"openshift-storage\"\n          state={providerDataState}\n          dispatch={providerDataDispatch}\n        />\n      )}\n      {provider === BC_PROVIDERS.PVC && (\n        <PVCType state={providerDataState} dispatch={providerDataDispatch} />\n      )}\n      <ButtonBar errorMessage={errorMessage} inProgress={inProgress}>\n        <ActionGroup>\n          <Button type=\"submit\" variant=\"primary\">\n            Create Backing Store\n          </Button>\n          <Button onClick={cancel} variant=\"secondary\">\n            Cancel\n          </Button>\n        </ActionGroup>\n      </ButtonBar>\n    </Form>\n  );\n});\n\nexport default CreateBackingStoreForm;\n\ntype CreateBackingStoreFormProps = ModalComponentProps & {\n  isPage?: boolean;\n  namespace?: string;\n  className?: string;\n  csv?: K8sResourceKind;\n};\n\ntype S3EndpointTypeProps = {\n  state: ProviderDataState;\n  dispatch: React.Dispatch<Action>;\n  provider: BC_PROVIDERS;\n  namespace: string;\n};\n\ntype PVCTypeProps = {\n  state: ProviderDataState;\n  dispatch: React.Dispatch<Action>;\n};\n\ntype GCPEndPointTypeProps = {\n  state: ProviderDataState;\n  dispatch: React.Dispatch<Action>;\n};\n"]}]}