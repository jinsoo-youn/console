{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/PipelineParametersForm.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/PipelineParametersForm.tsx","mtime":1616735742390},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { Form } from '@patternfly/react-core';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport { FormFooter } from '@console/shared';\nimport PipelineParameters from './PipelineParameters';\nconst PipelineParametersForm = ({ namespace, handleSubmit, handleReset, isSubmitting, status, errors, dirty, }) => {\n    const pipelineParameterAccess = useAccessReview({\n        group: 'tekton.dev',\n        resource: 'pipelines',\n        namespace,\n        verb: 'update',\n    });\n    return (React.createElement(Form, { onSubmit: handleSubmit },\n        React.createElement(\"div\", { className: \"co-m-pane__form\" },\n            React.createElement(PipelineParameters, { fieldName: \"parameters\", isReadOnly: !pipelineParameterAccess }),\n            React.createElement(\"hr\", null),\n            pipelineParameterAccess && (React.createElement(FormFooter, { handleReset: handleReset, isSubmitting: isSubmitting, errorMessage: status && status.submitError, successMessage: status && !dirty && status.success, disableSubmit: !dirty, showAlert: dirty })))));\n};\nexport default PipelineParametersForm;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/PipelineParametersForm.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/detail-page-tabs/PipelineParametersForm.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B,OAAO,EAAE,IAAI,EAAE,MAAM,wBAAwB,CAAC;AAE9C,OAAO,EAAE,eAAe,EAAE,MAAM,oCAAoC,CAAC;AACrE,OAAO,EAAE,UAAU,EAAE,MAAM,iBAAiB,CAAC;AAC7C,OAAO,kBAAkB,MAAM,sBAAsB,CAAC;AAMtD,MAAM,sBAAsB,GAA0C,CAAC,EACrE,SAAS,EACT,YAAY,EACZ,WAAW,EACX,YAAY,EACZ,MAAM,EACN,MAAM,EACN,KAAK,GACN,EAAE,EAAE;IACH,MAAM,uBAAuB,GAAG,eAAe,CAAC;QAC9C,KAAK,EAAE,YAAY;QACnB,QAAQ,EAAE,WAAW;QACrB,SAAS;QACT,IAAI,EAAE,QAAQ;KACf,CAAC,CAAC;IACH,OAAO,CACL,oBAAC,IAAI,IAAC,QAAQ,EAAE,YAAY;QAC1B,6BAAK,SAAS,EAAC,iBAAiB;YAC9B,oBAAC,kBAAkB,IAAC,SAAS,EAAC,YAAY,EAAC,UAAU,EAAE,CAAC,uBAAuB,GAAI;YACnF,+BAAM;YACL,uBAAuB,IAAI,CAC1B,oBAAC,UAAU,IACT,WAAW,EAAE,WAAW,EACxB,YAAY,EAAE,YAAY,EAC1B,YAAY,EAAE,MAAM,IAAI,MAAM,CAAC,WAAW,EAC1C,cAAc,EAAE,MAAM,IAAI,CAAC,KAAK,IAAI,MAAM,CAAC,OAAO,EAClD,aAAa,EAAE,CAAC,KAAK,EACrB,SAAS,EAAE,KAAK,GAChB,CACH,CACG,CACD,CACR,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,sBAAsB,CAAC","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Form } from '@patternfly/react-core';\nimport { FormikProps, FormikValues } from 'formik';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport { FormFooter } from '@console/shared';\nimport PipelineParameters from './PipelineParameters';\n\ntype PipelineParametersFormProps = FormikProps<FormikValues> & {\n  namespace: string;\n};\n\nconst PipelineParametersForm: React.FC<PipelineParametersFormProps> = ({\n  namespace,\n  handleSubmit,\n  handleReset,\n  isSubmitting,\n  status,\n  errors,\n  dirty,\n}) => {\n  const pipelineParameterAccess = useAccessReview({\n    group: 'tekton.dev',\n    resource: 'pipelines',\n    namespace,\n    verb: 'update',\n  });\n  return (\n    <Form onSubmit={handleSubmit}>\n      <div className=\"co-m-pane__form\">\n        <PipelineParameters fieldName=\"parameters\" isReadOnly={!pipelineParameterAccess} />\n        <hr />\n        {pipelineParameterAccess && (\n          <FormFooter\n            handleReset={handleReset}\n            isSubmitting={isSubmitting}\n            errorMessage={status && status.submitError}\n            successMessage={status && !dirty && status.success}\n            disableSubmit={!dirty}\n            showAlert={dirty}\n          />\n        )}\n      </div>\n    </Form>\n  );\n};\n\nexport default PipelineParametersForm;\n"]}]}