{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-topology/PipelineVisualizationSurface.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-topology/PipelineVisualizationSurface.tsx","mtime":1615298458620},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { GRAPH_LAYOUT_END_EVENT, Visualization, VisualizationSurface, } from '@console/topology';\nimport { componentFactory, layoutFactory } from './factories';\nimport { DROP_SHADOW_SPACING, NODE_WIDTH, NODE_HEIGHT } from './const';\nimport { getLayoutData } from './utils';\nconst PipelineVisualizationSurface = ({ model }) => {\n    const [vis, setVis] = React.useState(null);\n    const [maxSize, setMaxSize] = React.useState(null);\n    const layout = model.graph.layout;\n    const onLayoutUpdate = React.useCallback((nodes) => {\n        const nodeBounds = nodes.map((node) => node.getBounds());\n        const maxX = Math.floor(nodeBounds.map((bounds) => bounds.x).reduce((x1, x2) => Math.max(x1, x2), 0));\n        const maxY = Math.floor(nodeBounds.map((bounds) => bounds.y).reduce((y1, y2) => Math.max(y1, y2), 0));\n        let horizontalMargin = 0;\n        let verticalMargin = 0;\n        if (layout) {\n            horizontalMargin = getLayoutData(layout).marginx || 0;\n            verticalMargin = getLayoutData(layout).marginy || 0;\n        }\n        setMaxSize({\n            // Nodes are rendered from the top-left\n            height: maxY + NODE_HEIGHT + DROP_SHADOW_SPACING + verticalMargin * 2,\n            width: maxX + NODE_WIDTH + horizontalMargin * 2,\n        });\n    }, [setMaxSize, layout]);\n    React.useEffect(() => {\n        if (vis === null) {\n            const visualization = new Visualization();\n            visualization.registerLayoutFactory(layoutFactory);\n            visualization.registerComponentFactory(componentFactory);\n            visualization.fromModel(model);\n            visualization.addEventListener(GRAPH_LAYOUT_END_EVENT, () => {\n                onLayoutUpdate(visualization.getGraph().getNodes());\n            });\n            setVis(visualization);\n        }\n        else {\n            vis.fromModel(model);\n            vis.getGraph().layout();\n        }\n    }, [vis, model, onLayoutUpdate]);\n    if (!vis)\n        return null;\n    return (React.createElement(\"div\", { style: { height: maxSize === null || maxSize === void 0 ? void 0 : maxSize.height, width: maxSize === null || maxSize === void 0 ? void 0 : maxSize.width } },\n        React.createElement(VisualizationSurface, { visualization: vis })));\n};\nexport default PipelineVisualizationSurface;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-topology/PipelineVisualizationSurface.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelines/pipeline-topology/PipelineVisualizationSurface.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  GRAPH_LAYOUT_END_EVENT,\n  Model,\n  Node,\n  Visualization,\n  VisualizationSurface,\n} from '@console/topology';\nimport { componentFactory, layoutFactory } from './factories';\nimport { DROP_SHADOW_SPACING, NODE_WIDTH, NODE_HEIGHT, PipelineLayout } from './const';\nimport { getLayoutData } from './utils';\n\ntype PipelineVisualizationSurfaceProps = {\n  model: Model;\n};\n\nconst PipelineVisualizationSurface: React.FC<PipelineVisualizationSurfaceProps> = ({ model }) => {\n  const [vis, setVis] = React.useState(null);\n  const [maxSize, setMaxSize] = React.useState(null);\n\n  const layout: PipelineLayout = model.graph.layout as PipelineLayout;\n\n  const onLayoutUpdate = React.useCallback(\n    (nodes: Node[]) => {\n      const nodeBounds = nodes.map((node) => node.getBounds());\n      const maxX = Math.floor(\n        nodeBounds.map((bounds) => bounds.x).reduce((x1, x2) => Math.max(x1, x2), 0),\n      );\n      const maxY = Math.floor(\n        nodeBounds.map((bounds) => bounds.y).reduce((y1, y2) => Math.max(y1, y2), 0),\n      );\n\n      let horizontalMargin = 0;\n      let verticalMargin = 0;\n      if (layout) {\n        horizontalMargin = getLayoutData(layout).marginx || 0;\n        verticalMargin = getLayoutData(layout).marginy || 0;\n      }\n\n      setMaxSize({\n        // Nodes are rendered from the top-left\n        height: maxY + NODE_HEIGHT + DROP_SHADOW_SPACING + verticalMargin * 2,\n        width: maxX + NODE_WIDTH + horizontalMargin * 2,\n      });\n    },\n    [setMaxSize, layout],\n  );\n\n  React.useEffect(() => {\n    if (vis === null) {\n      const visualization = new Visualization();\n      visualization.registerLayoutFactory(layoutFactory);\n      visualization.registerComponentFactory(componentFactory);\n      visualization.fromModel(model);\n      visualization.addEventListener(GRAPH_LAYOUT_END_EVENT, () => {\n        onLayoutUpdate(visualization.getGraph().getNodes());\n      });\n      setVis(visualization);\n    } else {\n      vis.fromModel(model);\n      vis.getGraph().layout();\n    }\n  }, [vis, model, onLayoutUpdate]);\n\n  if (!vis) return null;\n\n  return (\n    <div style={{ height: maxSize?.height, width: maxSize?.width }}>\n      <VisualizationSurface visualization={vis} />\n    </div>\n  );\n};\n\nexport default PipelineVisualizationSurface;\n"]}]}