{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/components/baremetal-nodes/table-filters.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/components/baremetal-nodes/table-filters.ts","mtime":1615298458670},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { NODE_STATUS_TITLES } from '../../constants';\nconst statesToFilterMap = Object.freeze({\n    ready: {\n        title: 'Ready',\n        states: ['Ready'],\n    },\n    notReady: {\n        title: 'Not Ready',\n        states: ['Not Ready'],\n    },\n    maintenance: {\n        title: 'Maintenance',\n        states: Object.keys(NODE_STATUS_TITLES),\n    },\n});\nexport const getBareMetalNodeFilterStatus = (bundle) => {\n    return _.findKey(statesToFilterMap, ({ states }) => states.includes(bundle.status.status));\n};\nexport const bareMetalNodeStatusFilter = {\n    filterGroupName: 'Status',\n    type: 'bare-metal-node-status',\n    reducer: getBareMetalNodeFilterStatus,\n    items: _.map(statesToFilterMap, ({ title }, id) => ({ id, title })),\n    filter: (groups, bundle) => {\n        const status = getBareMetalNodeFilterStatus(bundle);\n        return (groups.selected.has(status) || !_.includes(groups.all, status) || _.isEmpty(groups.selected));\n    },\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/components/baremetal-nodes/table-filters.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/metal3-plugin/src/components/baremetal-nodes/table-filters.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAE5B,OAAO,EAAE,kBAAkB,EAAE,MAAM,iBAAiB,CAAC;AAGrD,MAAM,iBAAiB,GAAG,MAAM,CAAC,MAAM,CAAC;IACtC,KAAK,EAAE;QACL,KAAK,EAAE,OAAO;QACd,MAAM,EAAE,CAAC,OAAO,CAAC;KAClB;IACD,QAAQ,EAAE;QACR,KAAK,EAAE,WAAW;QAClB,MAAM,EAAE,CAAC,WAAW,CAAC;KACtB;IACD,WAAW,EAAE;QACX,KAAK,EAAE,aAAa;QACpB,MAAM,EAAE,MAAM,CAAC,IAAI,CAAC,kBAAkB,CAAC;KACxC;CACF,CAAC,CAAC;AAEH,MAAM,CAAC,MAAM,4BAA4B,GAAG,CAAC,MAA2B,EAAU,EAAE;IAClF,OAAO,CAAC,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC,EAAE,MAAM,EAAE,EAAE,EAAE,CAAC,MAAM,CAAC,QAAQ,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;AAC7F,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,yBAAyB,GAAc;IAClD,eAAe,EAAE,QAAQ;IACzB,IAAI,EAAE,wBAAwB;IAC9B,OAAO,EAAE,4BAA4B;IACrC,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,iBAAiB,EAAE,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,EAAE,KAAK,EAAE,CAAC,CAAC;IACnE,MAAM,EAAE,CAAC,MAAM,EAAE,MAA2B,EAAE,EAAE;QAC9C,MAAM,MAAM,GAAG,4BAA4B,CAAC,MAAM,CAAC,CAAC;QACpD,OAAO,CACL,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,MAAM,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAC7F,CAAC;IACJ,CAAC;CACF,CAAC","sourcesContent":["import * as _ from 'lodash';\nimport { RowFilter } from '@console/internal/components/filter-toolbar';\nimport { NODE_STATUS_TITLES } from '../../constants';\nimport { BareMetalNodeBundle } from '../types';\n\nconst statesToFilterMap = Object.freeze({\n  ready: {\n    title: 'Ready',\n    states: ['Ready'],\n  },\n  notReady: {\n    title: 'Not Ready',\n    states: ['Not Ready'],\n  },\n  maintenance: {\n    title: 'Maintenance',\n    states: Object.keys(NODE_STATUS_TITLES),\n  },\n});\n\nexport const getBareMetalNodeFilterStatus = (bundle: BareMetalNodeBundle): string => {\n  return _.findKey(statesToFilterMap, ({ states }) => states.includes(bundle.status.status));\n};\n\nexport const bareMetalNodeStatusFilter: RowFilter = {\n  filterGroupName: 'Status',\n  type: 'bare-metal-node-status',\n  reducer: getBareMetalNodeFilterStatus,\n  items: _.map(statesToFilterMap, ({ title }, id) => ({ id, title })),\n  filter: (groups, bundle: BareMetalNodeBundle) => {\n    const status = getBareMetalNodeFilterStatus(bundle);\n    return (\n      groups.selected.has(status) || !_.includes(groups.all, status) || _.isEmpty(groups.selected)\n    );\n  },\n};\n"]}]}