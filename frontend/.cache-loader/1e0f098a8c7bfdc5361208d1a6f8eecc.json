{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/utils/imagestream-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/utils/imagestream-utils.ts","mtime":1615298458640},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport * as semver from 'semver';\nimport { isBuilder, getMostRecentBuilderTag, getBuilderTagsSortedByVersion, } from '@console/internal/components/image-stream';\nimport { getImageStreamIcon, getImageForIconClass, } from '@console/internal/components/catalog/catalog-item-icon';\nimport { ProjectModel, ImageStreamModel } from '@console/internal/models';\nexport const imageStreamLabels = ['app.kubernetes.io/name', 'app.openshift.io/runtime'];\nexport const getRuntime = (labels) => (labels === null || labels === void 0 ? void 0 : labels['app.openshift.io/runtime']) || (labels === null || labels === void 0 ? void 0 : labels['app.kubernetes.io/name']);\nexport const getSampleRepo = (tag) => _.get(tag, 'annotations.sampleRepo', '');\nexport const getSampleRef = (tag) => _.get(tag, 'annotations.sampleRef', '');\nexport const getSampleContextDir = (tag) => _.get(tag, 'annotations.sampleContextDir', '');\n// Transform image ports to k8s structure.\n// `{ '3306/tcp': {} }` -> `{ containerPort: 3306, protocol: 'TCP' }`\nconst portsFromSpec = (portSpec) => {\n    return _.reduce(portSpec, (result, value, key) => {\n        const parts = key.split('/');\n        if (parts.length === 1) {\n            parts.push('tcp');\n        }\n        const containerPort = parseInt(parts[0], 10);\n        if (_.isFinite(containerPort)) {\n            result.push({\n                containerPort,\n                protocol: parts[1].toUpperCase(),\n            });\n        }\n        else {\n            // eslint-disable-next-line no-console\n            console.warn('Unrecognized image port format', key);\n        }\n        return result;\n    }, []);\n};\nexport const getPorts = (imageStreamImage) => {\n    const portSpec = _.get(imageStreamImage, 'image.dockerImageMetadata.Config.ExposedPorts') ||\n        _.get(imageStreamImage, 'image.dockerImageMetadata.ContainerConfig.ExposedPorts');\n    return portsFromSpec(portSpec);\n};\n// Use the same naming convention as the CLI.\nexport const makePortName = (port) => `${port.containerPort}-${port.protocol}`.toLowerCase();\nexport const prettifyName = (name) => {\n    return name.replace(/(-|^)([^-]?)/g, (first, prep, letter) => {\n        return (prep && ' ') + letter.toUpperCase();\n    });\n};\nexport const normalizeBuilderImages = (imageStreams) => {\n    const data = Array.isArray(imageStreams) ? imageStreams : [imageStreams];\n    const builderImageStreams = data.filter((imageStream) => isBuilder(imageStream));\n    return builderImageStreams.reduce((builderImages, imageStream) => {\n        const tags = getBuilderTagsSortedByVersion(imageStream);\n        const recentTag = getMostRecentBuilderTag(imageStream);\n        const { name } = imageStream.metadata;\n        const displayName = _.get(imageStream, [\n            'metadata',\n            'annotations',\n            'openshift.io/display-name',\n        ]);\n        const imageStreamNamespace = imageStream.metadata.namespace;\n        const title = displayName && displayName.length < 14 ? displayName : prettifyName(name);\n        const iconClass = getImageStreamIcon(recentTag);\n        const iconUrl = getImageForIconClass(iconClass);\n        builderImages[name] = {\n            obj: imageStream,\n            name,\n            displayName,\n            title,\n            iconUrl,\n            tags,\n            recentTag,\n            imageStreamNamespace,\n        };\n        return builderImages;\n    }, {});\n};\nexport const getTagDataWithDisplayName = (imageTags, selectedTag, defaultName) => {\n    const imageTag = _.find(imageTags, { name: selectedTag });\n    const displayName = _.get(imageTag, ['annotations', 'openshift.io/display-name'], defaultName);\n    return [imageTag, displayName];\n};\nexport const getSuggestedName = (name) => {\n    if (!name) {\n        return undefined;\n    }\n    const imageName = _.last(name.split('/'));\n    return _.first(imageName.split(/[^a-z0-9-]/));\n};\nexport var RegistryType;\n(function (RegistryType) {\n    RegistryType[\"External\"] = \"external\";\n    RegistryType[\"Internal\"] = \"internal\";\n})(RegistryType || (RegistryType = {}));\nexport var BuilderImagesNamespace;\n(function (BuilderImagesNamespace) {\n    BuilderImagesNamespace[\"Openshift\"] = \"openshift\";\n})(BuilderImagesNamespace || (BuilderImagesNamespace = {}));\nexport const imageRegistryType = {\n    External: {\n        value: RegistryType.External,\n        label: 'Image name from external registry',\n    },\n    Internal: {\n        value: RegistryType.Internal,\n        label: 'Image stream tag from internal registry',\n    },\n};\nexport const getSortedTags = (imageStream) => {\n    return _.isArray(imageStream.status.tags) && imageStream.status.tags.length\n        ? imageStream.status.tags.sort(({ tag: a }, { tag: b }) => {\n            const v1 = semver.coerce(a);\n            const v2 = semver.coerce(b);\n            if (!v1 && !v2) {\n                return a.localeCompare(b);\n            }\n            if (!v1) {\n                return 1;\n            }\n            if (!v2) {\n                return -1;\n            }\n            return semver.rcompare(v1, v2);\n        })\n        : [];\n};\nexport const getImageStreamTags = (imageStream) => {\n    const sortedTags = imageStream && !_.isEmpty(imageStream) ? getSortedTags(imageStream) : [];\n    return sortedTags.reduce((tags, { tag }) => {\n        tags[tag] = tag;\n        return tags;\n    }, {});\n};\nexport const getProjectResource = () => {\n    return [\n        {\n            isList: true,\n            kind: ProjectModel.kind,\n            prop: ProjectModel.id,\n        },\n    ];\n};\nexport const getImageStreamResource = (namespace) => {\n    const resource = [];\n    if (namespace) {\n        resource.push({\n            isList: true,\n            kind: ImageStreamModel.kind,\n            prop: ImageStreamModel.id,\n            namespace,\n        });\n    }\n    return resource;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/utils/imagestream-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/utils/imagestream-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport * as semver from 'semver';\nimport { ContainerPort, K8sResourceKind } from '@console/internal/module/k8s';\nimport {\n  isBuilder,\n  getMostRecentBuilderTag,\n  getBuilderTagsSortedByVersion,\n} from '@console/internal/components/image-stream';\nimport {\n  getImageStreamIcon,\n  getImageForIconClass,\n} from '@console/internal/components/catalog/catalog-item-icon';\nimport { ProjectModel, ImageStreamModel } from '@console/internal/models';\nimport { FirehoseResource } from '@console/internal/components/utils';\n\nexport interface ImageTag {\n  name: string;\n  annotations: {\n    [key: string]: string;\n  };\n  generation: number;\n  [key: string]: any;\n}\nexport interface BuilderImage {\n  obj: K8sResourceKind;\n  name: string;\n  displayName: string;\n  title: string;\n  iconUrl: string;\n  tags: ImageTag[];\n  recentTag: ImageTag;\n  imageStreamNamespace: string;\n}\n\nexport interface NormalizedBuilderImages {\n  [builderImageName: string]: BuilderImage;\n}\n\nexport const imageStreamLabels = ['app.kubernetes.io/name', 'app.openshift.io/runtime'];\n\nexport const getRuntime = (labels: { [key: string]: string }) =>\n  labels?.['app.openshift.io/runtime'] || labels?.['app.kubernetes.io/name'];\n\nexport const getSampleRepo = (tag) => _.get(tag, 'annotations.sampleRepo', '');\nexport const getSampleRef = (tag) => _.get(tag, 'annotations.sampleRef', '');\nexport const getSampleContextDir = (tag) => _.get(tag, 'annotations.sampleContextDir', '');\n\n// Transform image ports to k8s structure.\n// `{ '3306/tcp': {} }` -> `{ containerPort: 3306, protocol: 'TCP' }`\nconst portsFromSpec = (portSpec: object): ContainerPort[] => {\n  return _.reduce(\n    portSpec,\n    (result: ContainerPort[], value, key) => {\n      const parts = key.split('/');\n      if (parts.length === 1) {\n        parts.push('tcp');\n      }\n\n      const containerPort = parseInt(parts[0], 10);\n      if (_.isFinite(containerPort)) {\n        result.push({\n          containerPort,\n          protocol: parts[1].toUpperCase(),\n        });\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn('Unrecognized image port format', key);\n      }\n\n      return result;\n    },\n    [],\n  );\n};\n\nexport const getPorts = (imageStreamImage: object): ContainerPort[] => {\n  const portSpec =\n    _.get(imageStreamImage, 'image.dockerImageMetadata.Config.ExposedPorts') ||\n    _.get(imageStreamImage, 'image.dockerImageMetadata.ContainerConfig.ExposedPorts');\n  return portsFromSpec(portSpec);\n};\n\n// Use the same naming convention as the CLI.\nexport const makePortName = (port: ContainerPort): string =>\n  `${port.containerPort}-${port.protocol}`.toLowerCase();\n\nexport const prettifyName = (name: string) => {\n  return name.replace(/(-|^)([^-]?)/g, (first, prep, letter) => {\n    return (prep && ' ') + letter.toUpperCase();\n  });\n};\n\nexport const normalizeBuilderImages = (\n  imageStreams: K8sResourceKind[],\n): NormalizedBuilderImages => {\n  const data = Array.isArray(imageStreams) ? imageStreams : [imageStreams];\n  const builderImageStreams = data.filter((imageStream) => isBuilder(imageStream));\n\n  return builderImageStreams.reduce((builderImages: NormalizedBuilderImages, imageStream) => {\n    const tags = getBuilderTagsSortedByVersion(imageStream);\n    const recentTag = getMostRecentBuilderTag(imageStream);\n    const { name } = imageStream.metadata;\n    const displayName = _.get(imageStream, [\n      'metadata',\n      'annotations',\n      'openshift.io/display-name',\n    ]);\n    const imageStreamNamespace = imageStream.metadata.namespace;\n    const title = displayName && displayName.length < 14 ? displayName : prettifyName(name);\n    const iconClass = getImageStreamIcon(recentTag);\n    const iconUrl = getImageForIconClass(iconClass);\n\n    builderImages[name] = {\n      obj: imageStream,\n      name,\n      displayName,\n      title,\n      iconUrl,\n      tags,\n      recentTag,\n      imageStreamNamespace,\n    };\n    return builderImages;\n  }, {});\n};\n\nexport const getTagDataWithDisplayName = (\n  imageTags: ImageTag[],\n  selectedTag: string,\n  defaultName: string,\n): [ImageTag, string] => {\n  const imageTag = _.find(imageTags, { name: selectedTag });\n  const displayName = _.get(imageTag, ['annotations', 'openshift.io/display-name'], defaultName);\n\n  return [imageTag, displayName];\n};\n\nexport const getSuggestedName = (name: string): string | undefined => {\n  if (!name) {\n    return undefined;\n  }\n  const imageName: string = _.last(name.split('/'));\n  return _.first(imageName.split(/[^a-z0-9-]/));\n};\n\nexport enum RegistryType {\n  External = 'external',\n  Internal = 'internal',\n}\nexport enum BuilderImagesNamespace {\n  Openshift = 'openshift',\n}\nexport const imageRegistryType = {\n  External: {\n    value: RegistryType.External,\n    label: 'Image name from external registry',\n  },\n  Internal: {\n    value: RegistryType.Internal,\n    label: 'Image stream tag from internal registry',\n  },\n};\n\nexport const getSortedTags = (imageStream: K8sResourceKind) => {\n  return _.isArray(imageStream.status.tags) && imageStream.status.tags.length\n    ? imageStream.status.tags.sort(({ tag: a }, { tag: b }) => {\n        const v1 = semver.coerce(a);\n        const v2 = semver.coerce(b);\n        if (!v1 && !v2) {\n          return a.localeCompare(b);\n        }\n        if (!v1) {\n          return 1;\n        }\n        if (!v2) {\n          return -1;\n        }\n        return semver.rcompare(v1, v2);\n      })\n    : [];\n};\nexport const getImageStreamTags = (imageStream: K8sResourceKind) => {\n  const sortedTags = imageStream && !_.isEmpty(imageStream) ? getSortedTags(imageStream) : [];\n  return sortedTags.reduce((tags, { tag }) => {\n    tags[tag] = tag;\n    return tags;\n  }, {});\n};\n\nexport const getProjectResource = (): FirehoseResource[] => {\n  return [\n    {\n      isList: true,\n      kind: ProjectModel.kind,\n      prop: ProjectModel.id,\n    },\n  ];\n};\n\nexport const getImageStreamResource = (namespace: string): FirehoseResource[] => {\n  const resource = [];\n  if (namespace) {\n    resource.push({\n      isList: true,\n      kind: ImageStreamModel.kind,\n      prop: ImageStreamModel.id,\n      namespace,\n    });\n  }\n  return resource;\n};\n"]}]}