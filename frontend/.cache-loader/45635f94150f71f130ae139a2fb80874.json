{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/receiver-forms/alert-manager-receiver-forms.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/receiver-forms/alert-manager-receiver-forms.tsx","mtime":1616735742480},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\n                t[p[i]] = s[p[i]];\n        }\n    return t;\n};\n/* eslint-disable camelcase */\nimport * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Helmet } from 'react-helmet';\nimport { ActionGroup, Alert, Button, Tooltip } from '@patternfly/react-core';\nimport { safeLoad } from 'js-yaml';\nimport * as classNames from 'classnames';\nimport { BlueInfoCircleIcon } from '@console/shared';\nimport { ButtonBar } from '../../utils/button-bar';\nimport { Dropdown } from '../../utils/dropdown';\nimport { Firehose } from '../../utils/firehose';\nimport { history } from '../../utils/router';\nimport { StatusBox } from '../../utils/status-box';\nimport { getAlertmanagerConfig, patchAlertmanagerConfig, receiverTypes, } from '../alert-manager-utils';\nimport { InitialReceivers, } from '../alert-manager-config';\nimport { RoutingLabelEditor } from './routing-labels-editor';\nimport * as PagerDutyForm from './pagerduty-receiver-form';\nimport * as WebhookForm from './webhook-receiver-form';\nimport * as EmailForm from './email-receiver-form';\nimport * as SlackForm from './slack-receiver-form';\nimport { coFetchJSON } from '../../../co-fetch';\n/**\n * Converts routes of a specific Receiver:\n * {\n *   receiver: \"MyReceiver\",\n *   match: {\n *     severity: \"warning\",\n *     cluster: \"myCluster\"\n *   },\n *   match_re: {\n *    service: \"$foobar\"\n *  }\n};\n * ...to array of labels for Routing Labels Editor component\n * [\n *   {\n *     \"name\": \"severity\",\n *     \"value\": \"warning\",\n *     \"isRegex\": false\n *   },\n *   {\n *     \"name\": \"cluster\",\n *     \"value\": \"myCluster\",\n *     \"isRegex\": false\n *   },\n *   {\n *     \"name\": \"service\",\n *     \"value\": \"$foobar\",\n *     \"isRegex\": true\n *   }\n * ]\n */\nconst convertReceiverRoutesToEditorLabels = (receiver, routes) => {\n    if (!receiver) {\n        return [];\n    }\n    const routesOfReceiver = _.find(routes, (aRoute) => aRoute.receiver === receiver.name);\n    const matches = _.map((routesOfReceiver === null || routesOfReceiver === void 0 ? void 0 : routesOfReceiver.match) || {}, (v, k) => {\n        return { name: k, value: v, isRegex: false };\n    });\n    const regexMatches = _.map((routesOfReceiver === null || routesOfReceiver === void 0 ? void 0 : routesOfReceiver.match_re) || {}, (v, k) => {\n        return { name: k, value: v, isRegex: true };\n    });\n    return _.concat([], matches, regexMatches);\n};\n/**\n * Returns new Route object\n * Ex:\n * {\n *   receiver: myNewReceiver,\n *   match: {\n *     \"severity\": \"warning\",\n *     \"cluster\": \"myCluster\"\n *   }\n *   match_re {\n *     \"service\": \"^(foo1|foo2|baz)$\",\n *   }\n * }\n */\nconst createRoute = (receiver, routeLabels) => {\n    return _.reduce(routeLabels, (acc, label) => {\n        _.set(acc, [label.isRegex ? 'match_re' : 'match', label.name], label.value);\n        return acc;\n    }, { receiver: receiver.name });\n};\n/**\n * Returns new Receiver object\n * Ex:\n * {\n *   name: MyNewReceiver\n *   pagerduty_configs: {\n *     routing_key: <integration_key>\n *   }\n * }\n */\nconst createReceiver = (globals, formValues, createReceiverConfig, receiverToEdit) => {\n    const receiverConfig = createReceiverConfig(globals, formValues, receiverToEdit && receiverToEdit[formValues.receiverType]\n        ? receiverToEdit[formValues.receiverType][0] // pass in receiver config if editing existing receiver\n        : {});\n    return {\n        name: formValues.receiverName,\n        [formValues.receiverType]: [Object.assign({}, receiverConfig)],\n    };\n};\nconst subformFactory = (receiverType) => {\n    switch (receiverType) {\n        case 'pagerduty_configs':\n            return PagerDutyForm;\n        case 'webhook_configs':\n            return WebhookForm;\n        case 'email_configs':\n            return EmailForm;\n        case 'slack_configs':\n            return SlackForm;\n        default:\n            return null;\n    }\n};\nconst formReducer = (formValues, action) => {\n    if (action.type === 'setFormValues') {\n        return Object.assign(Object.assign({}, formValues), action.payload);\n    }\n    // eslint-disable-next-line no-console\n    console.error('Unrecognized Alertmanager form reducer action', action);\n    return formValues;\n};\nconst getRouteLabelsForEditor = (isDefaultReceiver, receiverToEdit, allRoutes) => {\n    const routeLabels = convertReceiverRoutesToEditorLabels(receiverToEdit, allRoutes);\n    return !isDefaultReceiver && _.isEmpty(routeLabels)\n        ? [{ name: '', value: '', isRegex: false }]\n        : routeLabels;\n};\nconst alertMsg = (type) => {\n    switch (type) {\n        case InitialReceivers.Default:\n            return 'Your default receiver will automatically receive all alerts from this cluster that are not caught by other receivers first.';\n        case InitialReceivers.Critical:\n            return 'The routing labels for this receiver are configured to capture critical alerts.  Finish setting up this receiver by selecting a \"Receiver Type\" to choose a destination for these alerts.  If this receiver is deleted, critical alerts will go to the default receiver instead.';\n        case InitialReceivers.Watchdog:\n            return 'The Watchdog alert fires constantly to confirm that your alerting stack is functioning correctly. This receiver is configured to prevent it from creating unnecessary notifications. You can edit this receiver if you plan to use the information that Watchdog provides, otherwise this receiver should remain in its current state with no set receiver type.';\n        default:\n            return 'unknown receiver type'; // should never get here\n    }\n};\nconst ReceiverInfoTip = ({ type }) => {\n    return (React.createElement(Alert, { isInline: true, className: \"co-alert co-alert--scrollable\", variant: \"info\", title: `${type} Receiver` },\n        React.createElement(\"div\", { className: \"co-pre-line\" }, alertMsg(type))));\n};\nconst ReceiverBaseForm = ({ obj: secret, // Secret \"alertmanager-main\" which contains alertmanager.yaml config\ntitleVerb, saveButtonText, editReceiverNamed, alertmanagerGlobals, }) => {\n    var _a, _b;\n    const [errorMsg, setErrorMsg] = React.useState();\n    const [inProgress, setInProgress] = React.useState(false);\n    let config;\n    if (!errorMsg) {\n        config = getAlertmanagerConfig(secret, setErrorMsg);\n    }\n    const doesReceiverNameAlreadyExist = (receiverName) => {\n        if (!(config === null || config === void 0 ? void 0 : config.receivers)) {\n            return false;\n        }\n        const receiverNames = config.receivers\n            .filter((receiver) => receiver.name !== editReceiverNamed)\n            .map((receiver) => receiver.name);\n        return receiverNames.includes(receiverName);\n    };\n    const { route, global } = config || {};\n    // there is no api to get default values for these adv. config props\n    const advancedConfigGlobals = {\n        ['pagerduty_send_resolved']: true,\n        ['pagerduty_client']: '{{ template \"pagerduty.default.client\" . }}',\n        ['pagerduty_client_url']: '{{ template \"pagerduty.default.clientURL\" . }}',\n        ['pagerduty_description']: '{{ template \"pagerduty.default.description\" .}}',\n        ['pagerduty_severity']: 'error',\n        ['email_send_resolved']: false,\n        ['email_html']: '{{ template \"email.default.html\" . }}',\n        ['slack_send_resolved']: false,\n        ['slack_username']: '{{ template \"slack.default.username\" . }}',\n        ['slack_icon_emoji']: '{{ template \"slack.default.iconemoji\" .}}',\n        ['slack_icon_url']: '{{ template \"slack.default.iconurl\" .}}',\n        ['slack_link_names']: false,\n        ['webhook_send_resolved']: true,\n    };\n    // default globals to config.global props first, then alertmanagerGlobals\n    const defaultGlobals = Object.assign(Object.assign(Object.assign({}, alertmanagerGlobals), global), advancedConfigGlobals);\n    const INITIAL_STATE = Object.assign(Object.assign(Object.assign(Object.assign({ receiverName: '', receiverType: '', routeLabels: [] }, PagerDutyForm.getInitialValues(defaultGlobals, null)), WebhookForm.getInitialValues(defaultGlobals, null)), EmailForm.getInitialValues(defaultGlobals, null)), SlackForm.getInitialValues(defaultGlobals, null));\n    let receiverToEdit;\n    if (editReceiverNamed) {\n        receiverToEdit = _.find(_.get(config, 'receivers'), { name: editReceiverNamed });\n        INITIAL_STATE.receiverName = receiverToEdit ? receiverToEdit.name : '';\n        INITIAL_STATE.receiverType = _.find(_.keys(receiverToEdit), (key) => _.endsWith(key, '_configs'));\n        if (!_.isEmpty(INITIAL_STATE.receiverType)) {\n            const receiverConfig = (_a = receiverToEdit === null || receiverToEdit === void 0 ? void 0 : receiverToEdit[INITIAL_STATE.receiverType]) === null || _a === void 0 ? void 0 : _a[0];\n            _.assign(INITIAL_STATE, subformFactory(INITIAL_STATE.receiverType).getInitialValues(defaultGlobals, receiverConfig));\n        }\n    }\n    const { receiver: defaultReceiver } = route || {}; // top level route.receiver is the default receiver for all alarms\n    // if default receiver name defined but no receiver exists with that name, or editing the default receiver,\n    const isDefaultReceiver = defaultReceiver\n        ? _.isEmpty((_b = config === null || config === void 0 ? void 0 : config.receivers) === null || _b === void 0 ? void 0 : _b.filter((receiver) => receiver.name === defaultReceiver)) ||\n            defaultReceiver === editReceiverNamed\n        : true; // defaultReceiver (the name stored in config.routes.receiver) is not defined, so this should be the default receiver\n    INITIAL_STATE.routeLabels = getRouteLabelsForEditor(isDefaultReceiver, receiverToEdit, route.routes);\n    const [formValues, dispatchFormChange] = React.useReducer(formReducer, INITIAL_STATE);\n    const SubForm = subformFactory(formValues.receiverType);\n    const receiverNameAlreadyExist = doesReceiverNameAlreadyExist(formValues.receiverName);\n    const isFormInvalid = !formValues.receiverName ||\n        receiverNameAlreadyExist ||\n        !formValues.receiverType ||\n        SubForm.isFormInvalid(formValues) ||\n        !_.isEmpty(formValues.routeLabelFieldErrors) ||\n        formValues.routeLabelDuplicateNamesError ||\n        (!isDefaultReceiver &&\n            formValues.routeLabels.length === 1 &&\n            (formValues.routeLabels[0].name === '' || formValues.routeLabels[0].value === ''));\n    const save = (e) => {\n        e.preventDefault();\n        // Update Global params\n        _.assign(config.global, SubForm.updateGlobals(defaultGlobals, formValues));\n        // Update Receivers\n        const newReceiver = createReceiver(defaultGlobals, formValues, SubForm.createReceiverConfig, receiverToEdit);\n        _.update(config, 'receivers', (receivers = []) => {\n            if (editReceiverNamed) {\n                const index = _.findIndex(receivers, { name: editReceiverNamed });\n                receivers.splice(index, 1, newReceiver);\n            }\n            else {\n                receivers.push(newReceiver);\n            }\n            return receivers;\n        });\n        // Update Route & RouteLabels\n        if (isDefaultReceiver) {\n            _.set(route, 'receiver', newReceiver.name);\n        }\n        const newRoute = _.isEmpty(formValues.routeLabels)\n            ? undefined\n            : createRoute(newReceiver, formValues.routeLabels);\n        _.update(route, 'routes', (routes = []) => {\n            if (editReceiverNamed) {\n                const index = _.findIndex(routes, { receiver: editReceiverNamed });\n                if (index !== -1) {\n                    if (!newRoute) {\n                        // no routing labels for receiver, remove old route\n                        routes.splice(index, 1);\n                    }\n                    else {\n                        // update receiver's route with new route/labels\n                        routes.splice(index, 1, newRoute);\n                    }\n                }\n                else if (newRoute) {\n                    // receiver didn't have a prior route, so add new route\n                    routes.push(newRoute);\n                }\n            }\n            else if (newRoute) {\n                // add route for new receiver\n                routes.push(newRoute);\n            }\n            return routes;\n        });\n        // Update 'alertmanager-main' Secret with new alertmanager.yaml configuration\n        setInProgress(true);\n        patchAlertmanagerConfig(secret, config).then(() => {\n            setErrorMsg('');\n            setInProgress(false);\n            history.push('/monitoring/alertmanagerconfig');\n        }, (err) => {\n            setErrorMsg(err.message);\n            setInProgress(false);\n        });\n    };\n    return (React.createElement(\"div\", { className: \"co-m-pane__body co-m-pane__form\" },\n        React.createElement(Helmet, null,\n            React.createElement(\"title\", null,\n                titleVerb,\n                \" Receiver\")),\n        React.createElement(\"form\", { className: \"co-m-pane__body-group\", onSubmit: save },\n            React.createElement(\"h1\", { className: \"co-m-pane__heading\" },\n                titleVerb,\n                \" \",\n                receiverTypes[formValues.receiverType],\n                \" \",\n                isDefaultReceiver && 'Default',\n                ' ',\n                \"Receiver\"),\n            isDefaultReceiver && React.createElement(ReceiverInfoTip, { type: InitialReceivers.Default }),\n            formValues.receiverName === 'Critical' && !formValues.receiverType && (React.createElement(ReceiverInfoTip, { type: InitialReceivers.Critical })),\n            formValues.receiverName === 'Watchdog' && !formValues.receiverType && (React.createElement(ReceiverInfoTip, { type: InitialReceivers.Watchdog })),\n            React.createElement(\"div\", { className: classNames('form-group', {\n                    'has-error': receiverNameAlreadyExist,\n                }) },\n                React.createElement(\"label\", { className: \"control-label co-required\" }, \"Receiver Name\"),\n                React.createElement(\"input\", { className: \"pf-c-form-control\", type: \"text\", value: formValues.receiverName, onChange: (e) => dispatchFormChange({\n                        type: 'setFormValues',\n                        payload: { receiverName: e.target.value },\n                    }), \"aria-describedby\": \"receiver-name-help\", name: \"receiverName\", \"data-test-id\": \"receiver-name\", required: true }),\n                receiverNameAlreadyExist && (React.createElement(\"span\", { className: \"help-block\" },\n                    React.createElement(\"span\", { \"data-test-id\": \"receiver-name-already-exists-error\" }, \"A receiver with that name already exists.\")))),\n            React.createElement(\"div\", { className: \"form-group co-m-pane__dropdown\" },\n                React.createElement(\"label\", { className: \"control-label co-required\" }, \"Receiver Type\"),\n                React.createElement(Dropdown, { title: 'Select Receiver Type...', name: \"receiverType\", items: receiverTypes, dropDownClassName: \"dropdown--full-width\", \"data-test-id\": \"receiver-type\", selectedKey: formValues.receiverType, onChange: (receiverType) => dispatchFormChange({\n                        type: 'setFormValues',\n                        payload: {\n                            receiverType,\n                        },\n                    }) })),\n            formValues.receiverType && (React.createElement(React.Fragment, null,\n                React.createElement(SubForm.Form, { globals: defaultGlobals, formValues: formValues, dispatchFormChange: dispatchFormChange }),\n                React.createElement(RoutingLabelEditor, { formValues: formValues, dispatchFormChange: dispatchFormChange, isDefaultReceiver: isDefaultReceiver }))),\n            React.createElement(ButtonBar, { errorMessage: errorMsg, inProgress: inProgress },\n                React.createElement(ActionGroup, { className: \"pf-c-form\" },\n                    React.createElement(Button, { type: \"submit\", variant: \"primary\", \"data-test-id\": \"save-changes\", isDisabled: isFormInvalid }, saveButtonText),\n                    React.createElement(Button, { type: \"button\", variant: \"secondary\", \"data-test-id\": \"cancel\", onClick: history.goBack }, \"Cancel\"))))));\n};\nexport const SaveAsDefaultCheckbox = ({ formField, disabled, label, formValues, dispatchFormChange, tooltip, }) => {\n    const saveAsDefaultLabelClass = classNames('checkbox', { 'co-no-bold': disabled });\n    return (React.createElement(\"label\", { className: saveAsDefaultLabelClass, htmlFor: formField },\n        React.createElement(\"input\", { type: \"checkbox\", id: formField, \"data-test-id\": \"save-as-default\", onChange: (e) => dispatchFormChange({\n                type: 'setFormValues',\n                payload: { [formField]: e.target.checked },\n            }), checked: formValues[formField], \"aria-checked\": formValues[formField], disabled: disabled, \"aria-disabled\": disabled }),\n        React.createElement(\"span\", { className: \"co-alert-manager-config__save-as-default-label\" }, label),\n        React.createElement(Tooltip, { content: React.createElement(\"p\", null, tooltip) },\n            React.createElement(BlueInfoCircleIcon, null))));\n};\nexport const SendResolvedAlertsCheckbox = ({ formField, formValues, dispatchFormChange }) => {\n    return (React.createElement(\"div\", { className: \"checkbox\" },\n        React.createElement(\"label\", { className: \"control-label\", htmlFor: formField },\n            React.createElement(\"input\", { type: \"checkbox\", id: formField, \"data-test-id\": \"send-resolved-alerts\", onChange: (e) => dispatchFormChange({\n                    type: 'setFormValues',\n                    payload: { [formField]: e.target.checked },\n                }), checked: formValues[formField], \"aria-checked\": formValues[formField] }),\n            \"Send resolved alerts to this receiver?\")));\n};\nconst ReceiverWrapper = React.memo((_a) => {\n    var { obj } = _a, props = __rest(_a, [\"obj\"]);\n    const { alertManagerBaseURL } = window.SERVER_FLAGS;\n    const [alertmanagerGlobals, setAlertmanagerGlobals] = React.useState();\n    const [loaded, setLoaded] = React.useState(false);\n    const [loadError, setLoadError] = React.useState();\n    React.useEffect(() => {\n        if (!alertManagerBaseURL) {\n            setLoadError({ message: `Error alertManagerBaseURL not set` });\n            return;\n        }\n        coFetchJSON(`${alertManagerBaseURL}/api/v2/status/`)\n            .then((data) => {\n            var _a;\n            const originalAlertmanagerConfigJSON = (_a = data === null || data === void 0 ? void 0 : data.config) === null || _a === void 0 ? void 0 : _a.original;\n            if (_.isEmpty(originalAlertmanagerConfigJSON)) {\n                setLoadError({ message: 'alertmanager.v2.status.config.original not found.' });\n            }\n            else {\n                try {\n                    const { global } = safeLoad(originalAlertmanagerConfigJSON);\n                    setAlertmanagerGlobals(global);\n                    setLoaded(true);\n                }\n                catch (error) {\n                    setLoadError({\n                        message: `Error parsing Alertmanager config.original: ${error.message ||\n                            'invalid YAML'}`,\n                    });\n                }\n            }\n        })\n            .catch((e) => setLoadError({\n            message: `Error loading ${alertManagerBaseURL}/api/v2/status/: ${e.message}`,\n        }));\n    }, [alertManagerBaseURL]);\n    return (React.createElement(StatusBox, Object.assign({}, obj, { label: \"Alertmanager Globals\", loaded: loaded, loadError: loadError }),\n        React.createElement(ReceiverBaseForm, Object.assign({}, props, { obj: obj.data, alertmanagerGlobals: alertmanagerGlobals }))));\n});\nconst resources = [\n    {\n        kind: 'Secret',\n        name: 'alertmanager-main',\n        namespace: 'openshift-monitoring',\n        isList: false,\n        prop: 'obj',\n    },\n];\nexport const CreateReceiver = () => (React.createElement(Firehose, { resources: resources },\n    React.createElement(ReceiverWrapper, { titleVerb: \"Create\", saveButtonText: \"Create\" })));\nexport const EditReceiver = ({ match: { params } }) => (React.createElement(Firehose, { resources: resources },\n    React.createElement(ReceiverWrapper, { titleVerb: \"Edit\", saveButtonText: \"Save\", editReceiverNamed: params.name })));\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/receiver-forms/alert-manager-receiver-forms.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/monitoring/receiver-forms/alert-manager-receiver-forms.tsx"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable camelcase */\nimport * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Helmet } from 'react-helmet';\nimport { ActionGroup, Alert, Button, Tooltip } from '@patternfly/react-core';\nimport { safeLoad } from 'js-yaml';\nimport * as classNames from 'classnames';\n\nimport { BlueInfoCircleIcon, APIError } from '@console/shared';\nimport { ButtonBar } from '../../utils/button-bar';\nimport { Dropdown } from '../../utils/dropdown';\nimport { Firehose } from '../../utils/firehose';\nimport { history } from '../../utils/router';\nimport { StatusBox } from '../../utils/status-box';\nimport {\n  getAlertmanagerConfig,\n  patchAlertmanagerConfig,\n  receiverTypes,\n} from '../alert-manager-utils';\nimport { K8sResourceKind } from '../../../module/k8s';\nimport {\n  AlertmanagerConfig,\n  AlertmanagerReceiver,\n  AlertmanagerRoute,\n  InitialReceivers,\n} from '../alert-manager-config';\nimport { RoutingLabelEditor } from './routing-labels-editor';\nimport * as PagerDutyForm from './pagerduty-receiver-form';\nimport * as WebhookForm from './webhook-receiver-form';\nimport * as EmailForm from './email-receiver-form';\nimport * as SlackForm from './slack-receiver-form';\nimport { coFetchJSON } from '../../../co-fetch';\n\n/**\n * Converts routes of a specific Receiver:\n * {\n *   receiver: \"MyReceiver\",\n *   match: {\n *     severity: \"warning\",\n *     cluster: \"myCluster\"\n *   },\n *   match_re: {\n *    service: \"$foobar\"\n *  }\n};\n * ...to array of labels for Routing Labels Editor component\n * [\n *   {\n *     \"name\": \"severity\",\n *     \"value\": \"warning\",\n *     \"isRegex\": false\n *   },\n *   {\n *     \"name\": \"cluster\",\n *     \"value\": \"myCluster\",\n *     \"isRegex\": false\n *   },\n *   {\n *     \"name\": \"service\",\n *     \"value\": \"$foobar\",\n *     \"isRegex\": true\n *   }\n * ]\n */\nconst convertReceiverRoutesToEditorLabels = (\n  receiver: AlertmanagerReceiver,\n  routes: AlertmanagerRoute[],\n): RouteEditorLabel[] => {\n  if (!receiver) {\n    return [];\n  }\n\n  const routesOfReceiver = _.find(\n    routes,\n    (aRoute: AlertmanagerRoute) => aRoute.receiver === receiver.name,\n  );\n  const matches = _.map(routesOfReceiver?.match || {}, (v, k) => {\n    return { name: k, value: v, isRegex: false };\n  });\n  const regexMatches = _.map(routesOfReceiver?.match_re || {}, (v, k) => {\n    return { name: k, value: v, isRegex: true };\n  });\n  return _.concat([], matches, regexMatches);\n};\n\n/**\n * Returns new Route object\n * Ex:\n * {\n *   receiver: myNewReceiver,\n *   match: {\n *     \"severity\": \"warning\",\n *     \"cluster\": \"myCluster\"\n *   }\n *   match_re {\n *     \"service\": \"^(foo1|foo2|baz)$\",\n *   }\n * }\n */\nconst createRoute = (\n  receiver: AlertmanagerReceiver,\n  routeLabels: RouteEditorLabel[],\n): AlertmanagerRoute => {\n  return _.reduce(\n    routeLabels,\n    (acc, label) => {\n      _.set(acc, [label.isRegex ? 'match_re' : 'match', label.name], label.value);\n      return acc;\n    },\n    { receiver: receiver.name },\n  );\n};\n\n/**\n * Returns new Receiver object\n * Ex:\n * {\n *   name: MyNewReceiver\n *   pagerduty_configs: {\n *     routing_key: <integration_key>\n *   }\n * }\n */\nconst createReceiver = (\n  globals,\n  formValues,\n  createReceiverConfig: Function,\n  receiverToEdit: AlertmanagerReceiver,\n): AlertmanagerReceiver => {\n  const receiverConfig = createReceiverConfig(\n    globals,\n    formValues,\n    receiverToEdit && receiverToEdit[formValues.receiverType]\n      ? receiverToEdit[formValues.receiverType][0] // pass in receiver config if editing existing receiver\n      : {},\n  );\n  return {\n    name: formValues.receiverName,\n    [formValues.receiverType]: [{ ...receiverConfig }],\n  };\n};\n\nconst subformFactory = (receiverType: string) => {\n  switch (receiverType) {\n    case 'pagerduty_configs':\n      return PagerDutyForm;\n    case 'webhook_configs':\n      return WebhookForm;\n    case 'email_configs':\n      return EmailForm;\n    case 'slack_configs':\n      return SlackForm;\n    default:\n      return null;\n  }\n};\n\nconst formReducer = (formValues: FormState, action: FormAction): FormState => {\n  if (action.type === 'setFormValues') {\n    return {\n      ...formValues,\n      ...action.payload,\n    };\n  }\n  // eslint-disable-next-line no-console\n  console.error('Unrecognized Alertmanager form reducer action', action);\n  return formValues;\n};\n\nconst getRouteLabelsForEditor = (\n  isDefaultReceiver: boolean,\n  receiverToEdit: AlertmanagerReceiver,\n  allRoutes: AlertmanagerRoute[],\n): RouteEditorLabel[] => {\n  const routeLabels = convertReceiverRoutesToEditorLabels(receiverToEdit, allRoutes);\n  return !isDefaultReceiver && _.isEmpty(routeLabels)\n    ? [{ name: '', value: '', isRegex: false }]\n    : routeLabels;\n};\n\nconst alertMsg = (type: string) => {\n  switch (type) {\n    case InitialReceivers.Default:\n      return 'Your default receiver will automatically receive all alerts from this cluster that are not caught by other receivers first.';\n    case InitialReceivers.Critical:\n      return 'The routing labels for this receiver are configured to capture critical alerts.  Finish setting up this receiver by selecting a \"Receiver Type\" to choose a destination for these alerts.  If this receiver is deleted, critical alerts will go to the default receiver instead.';\n    case InitialReceivers.Watchdog:\n      return 'The Watchdog alert fires constantly to confirm that your alerting stack is functioning correctly. This receiver is configured to prevent it from creating unnecessary notifications. You can edit this receiver if you plan to use the information that Watchdog provides, otherwise this receiver should remain in its current state with no set receiver type.';\n    default:\n      return 'unknown receiver type'; // should never get here\n  }\n};\n\nconst ReceiverInfoTip: React.FC<ReceiverInfoTipProps> = ({ type }) => {\n  return (\n    <Alert\n      isInline\n      className=\"co-alert co-alert--scrollable\"\n      variant=\"info\"\n      title={`${type} Receiver`}\n    >\n      <div className=\"co-pre-line\">{alertMsg(type)}</div>\n    </Alert>\n  );\n};\n\nconst ReceiverBaseForm: React.FC<ReceiverBaseFormProps> = ({\n  obj: secret, // Secret \"alertmanager-main\" which contains alertmanager.yaml config\n  titleVerb,\n  saveButtonText,\n  editReceiverNamed,\n  alertmanagerGlobals, // contains default props not in alertmanager.yaml's config.global\n}) => {\n  const [errorMsg, setErrorMsg] = React.useState<string>();\n  const [inProgress, setInProgress] = React.useState<boolean>(false);\n  let config: AlertmanagerConfig;\n  if (!errorMsg) {\n    config = getAlertmanagerConfig(secret, setErrorMsg);\n  }\n\n  const doesReceiverNameAlreadyExist = (receiverName: string): boolean => {\n    if (!config?.receivers) {\n      return false;\n    }\n    const receiverNames = config.receivers\n      .filter((receiver) => receiver.name !== editReceiverNamed)\n      .map((receiver) => receiver.name);\n    return receiverNames.includes(receiverName);\n  };\n\n  const { route, global } = config || {};\n\n  // there is no api to get default values for these adv. config props\n  const advancedConfigGlobals = {\n    ['pagerduty_send_resolved']: true,\n    ['pagerduty_client']: '{{ template \"pagerduty.default.client\" . }}',\n    ['pagerduty_client_url']: '{{ template \"pagerduty.default.clientURL\" . }}',\n    ['pagerduty_description']: '{{ template \"pagerduty.default.description\" .}}',\n    ['pagerduty_severity']: 'error',\n    ['email_send_resolved']: false,\n    ['email_html']: '{{ template \"email.default.html\" . }}',\n    ['slack_send_resolved']: false,\n    ['slack_username']: '{{ template \"slack.default.username\" . }}',\n    ['slack_icon_emoji']: '{{ template \"slack.default.iconemoji\" .}}',\n    ['slack_icon_url']: '{{ template \"slack.default.iconurl\" .}}',\n    ['slack_link_names']: false,\n    ['webhook_send_resolved']: true,\n  };\n\n  // default globals to config.global props first, then alertmanagerGlobals\n  const defaultGlobals = { ...alertmanagerGlobals, ...global, ...advancedConfigGlobals };\n\n  const INITIAL_STATE = {\n    receiverName: '',\n    receiverType: '',\n    routeLabels: [],\n    ...PagerDutyForm.getInitialValues(defaultGlobals, null),\n    ...WebhookForm.getInitialValues(defaultGlobals, null),\n    ...EmailForm.getInitialValues(defaultGlobals, null),\n    ...SlackForm.getInitialValues(defaultGlobals, null),\n  };\n\n  let receiverToEdit: AlertmanagerReceiver;\n  if (editReceiverNamed) {\n    receiverToEdit = _.find(_.get(config, 'receivers'), { name: editReceiverNamed });\n    INITIAL_STATE.receiverName = receiverToEdit ? receiverToEdit.name : '';\n    INITIAL_STATE.receiverType = _.find(_.keys(receiverToEdit), (key) =>\n      _.endsWith(key, '_configs'),\n    );\n    if (!_.isEmpty(INITIAL_STATE.receiverType)) {\n      const receiverConfig = receiverToEdit?.[INITIAL_STATE.receiverType]?.[0];\n      _.assign(\n        INITIAL_STATE,\n        subformFactory(INITIAL_STATE.receiverType).getInitialValues(defaultGlobals, receiverConfig),\n      );\n    }\n  }\n\n  const { receiver: defaultReceiver } = route || {}; // top level route.receiver is the default receiver for all alarms\n  // if default receiver name defined but no receiver exists with that name, or editing the default receiver,\n  const isDefaultReceiver = defaultReceiver\n    ? _.isEmpty(config?.receivers?.filter((receiver) => receiver.name === defaultReceiver)) ||\n      defaultReceiver === editReceiverNamed\n    : true; // defaultReceiver (the name stored in config.routes.receiver) is not defined, so this should be the default receiver\n\n  INITIAL_STATE.routeLabels = getRouteLabelsForEditor(\n    isDefaultReceiver,\n    receiverToEdit,\n    route.routes,\n  );\n\n  const [formValues, dispatchFormChange] = React.useReducer(formReducer, INITIAL_STATE);\n  const SubForm = subformFactory(formValues.receiverType);\n\n  const receiverNameAlreadyExist = doesReceiverNameAlreadyExist(formValues.receiverName);\n  const isFormInvalid: boolean =\n    !formValues.receiverName ||\n    receiverNameAlreadyExist ||\n    !formValues.receiverType ||\n    SubForm.isFormInvalid(formValues) ||\n    !_.isEmpty(formValues.routeLabelFieldErrors) ||\n    formValues.routeLabelDuplicateNamesError ||\n    (!isDefaultReceiver &&\n      formValues.routeLabels.length === 1 &&\n      (formValues.routeLabels[0].name === '' || formValues.routeLabels[0].value === ''));\n\n  const save = (e) => {\n    e.preventDefault();\n\n    // Update Global params\n    _.assign(config.global, SubForm.updateGlobals(defaultGlobals, formValues));\n\n    // Update Receivers\n    const newReceiver = createReceiver(\n      defaultGlobals,\n      formValues,\n      SubForm.createReceiverConfig,\n      receiverToEdit,\n    );\n    _.update(config, 'receivers', (receivers = []) => {\n      if (editReceiverNamed) {\n        const index = _.findIndex(receivers, { name: editReceiverNamed });\n        receivers.splice(index, 1, newReceiver);\n      } else {\n        receivers.push(newReceiver);\n      }\n      return receivers;\n    });\n\n    // Update Route & RouteLabels\n    if (isDefaultReceiver) {\n      _.set(route, 'receiver', newReceiver.name);\n    }\n\n    const newRoute = _.isEmpty(formValues.routeLabels)\n      ? undefined\n      : createRoute(newReceiver, formValues.routeLabels);\n    _.update(route, 'routes', (routes = []) => {\n      if (editReceiverNamed) {\n        const index = _.findIndex(routes, { receiver: editReceiverNamed });\n        if (index !== -1) {\n          if (!newRoute) {\n            // no routing labels for receiver, remove old route\n            routes.splice(index, 1);\n          } else {\n            // update receiver's route with new route/labels\n            routes.splice(index, 1, newRoute);\n          }\n        } else if (newRoute) {\n          // receiver didn't have a prior route, so add new route\n          routes.push(newRoute);\n        }\n      } else if (newRoute) {\n        // add route for new receiver\n        routes.push(newRoute);\n      }\n      return routes;\n    });\n\n    // Update 'alertmanager-main' Secret with new alertmanager.yaml configuration\n    setInProgress(true);\n    patchAlertmanagerConfig(secret, config).then(\n      () => {\n        setErrorMsg('');\n        setInProgress(false);\n        history.push('/monitoring/alertmanagerconfig');\n      },\n      (err) => {\n        setErrorMsg(err.message);\n        setInProgress(false);\n      },\n    );\n  };\n\n  return (\n    <div className=\"co-m-pane__body co-m-pane__form\">\n      <Helmet>\n        <title>{titleVerb} Receiver</title>\n      </Helmet>\n      <form className=\"co-m-pane__body-group\" onSubmit={save}>\n        <h1 className=\"co-m-pane__heading\">\n          {titleVerb} {receiverTypes[formValues.receiverType]} {isDefaultReceiver && 'Default'}{' '}\n          Receiver\n        </h1>\n        {isDefaultReceiver && <ReceiverInfoTip type={InitialReceivers.Default} />}\n        {formValues.receiverName === 'Critical' && !formValues.receiverType && (\n          <ReceiverInfoTip type={InitialReceivers.Critical} />\n        )}\n        {formValues.receiverName === 'Watchdog' && !formValues.receiverType && (\n          <ReceiverInfoTip type={InitialReceivers.Watchdog} />\n        )}\n        <div\n          className={classNames('form-group', {\n            'has-error': receiverNameAlreadyExist,\n          })}\n        >\n          <label className=\"control-label co-required\">Receiver Name</label>\n          <input\n            className=\"pf-c-form-control\"\n            type=\"text\"\n            value={formValues.receiverName}\n            onChange={(e) =>\n              dispatchFormChange({\n                type: 'setFormValues',\n                payload: { receiverName: e.target.value },\n              })\n            }\n            aria-describedby=\"receiver-name-help\"\n            name=\"receiverName\"\n            data-test-id=\"receiver-name\"\n            required\n          />\n          {receiverNameAlreadyExist && (\n            <span className=\"help-block\">\n              <span data-test-id=\"receiver-name-already-exists-error\">\n                A receiver with that name already exists.\n              </span>\n            </span>\n          )}\n        </div>\n        <div className=\"form-group co-m-pane__dropdown\">\n          <label className=\"control-label co-required\">Receiver Type</label>\n          <Dropdown\n            title={'Select Receiver Type...'}\n            name=\"receiverType\"\n            items={receiverTypes}\n            dropDownClassName=\"dropdown--full-width\"\n            data-test-id=\"receiver-type\"\n            selectedKey={formValues.receiverType}\n            onChange={(receiverType) =>\n              dispatchFormChange({\n                type: 'setFormValues',\n                payload: {\n                  receiverType,\n                },\n              })\n            }\n          />\n        </div>\n\n        {formValues.receiverType && (\n          <>\n            <SubForm.Form\n              globals={defaultGlobals}\n              formValues={formValues}\n              dispatchFormChange={dispatchFormChange}\n            />\n            <RoutingLabelEditor\n              formValues={formValues}\n              dispatchFormChange={dispatchFormChange}\n              isDefaultReceiver={isDefaultReceiver}\n            />\n          </>\n        )}\n\n        <ButtonBar errorMessage={errorMsg} inProgress={inProgress}>\n          <ActionGroup className=\"pf-c-form\">\n            <Button\n              type=\"submit\"\n              variant=\"primary\"\n              data-test-id=\"save-changes\"\n              isDisabled={isFormInvalid}\n            >\n              {saveButtonText}\n            </Button>\n            <Button\n              type=\"button\"\n              variant=\"secondary\"\n              data-test-id=\"cancel\"\n              onClick={history.goBack}\n            >\n              Cancel\n            </Button>\n          </ActionGroup>\n        </ButtonBar>\n      </form>\n    </div>\n  );\n};\n\nexport const SaveAsDefaultCheckbox: React.FC<SaveAsDefaultCheckboxProps> = ({\n  formField,\n  disabled,\n  label,\n  formValues,\n  dispatchFormChange,\n  tooltip,\n}) => {\n  const saveAsDefaultLabelClass = classNames('checkbox', { 'co-no-bold': disabled });\n  return (\n    <label className={saveAsDefaultLabelClass} htmlFor={formField}>\n      <input\n        type=\"checkbox\"\n        id={formField}\n        data-test-id=\"save-as-default\"\n        onChange={(e) =>\n          dispatchFormChange({\n            type: 'setFormValues',\n            payload: { [formField]: e.target.checked },\n          })\n        }\n        checked={formValues[formField]}\n        aria-checked={formValues[formField]}\n        disabled={disabled}\n        aria-disabled={disabled}\n      />\n      <span className=\"co-alert-manager-config__save-as-default-label\">{label}</span>\n      <Tooltip content={<p>{tooltip}</p>}>\n        <BlueInfoCircleIcon />\n      </Tooltip>\n    </label>\n  );\n};\n\nexport const SendResolvedAlertsCheckbox = ({ formField, formValues, dispatchFormChange }) => {\n  return (\n    <div className=\"checkbox\">\n      <label className=\"control-label\" htmlFor={formField}>\n        <input\n          type=\"checkbox\"\n          id={formField}\n          data-test-id=\"send-resolved-alerts\"\n          onChange={(e) =>\n            dispatchFormChange({\n              type: 'setFormValues',\n              payload: { [formField]: e.target.checked },\n            })\n          }\n          checked={formValues[formField]}\n          aria-checked={formValues[formField]}\n        />\n        Send resolved alerts to this receiver?\n      </label>\n    </div>\n  );\n};\n\nconst ReceiverWrapper: React.FC<ReceiverFormsWrapperProps> = React.memo(({ obj, ...props }) => {\n  const { alertManagerBaseURL } = window.SERVER_FLAGS;\n  const [alertmanagerGlobals, setAlertmanagerGlobals] = React.useState();\n  const [loaded, setLoaded] = React.useState(false);\n  const [loadError, setLoadError] = React.useState<APIError>();\n\n  React.useEffect(() => {\n    if (!alertManagerBaseURL) {\n      setLoadError({ message: `Error alertManagerBaseURL not set` });\n      return;\n    }\n    coFetchJSON(`${alertManagerBaseURL}/api/v2/status/`)\n      .then((data) => {\n        const originalAlertmanagerConfigJSON = data?.config?.original;\n        if (_.isEmpty(originalAlertmanagerConfigJSON)) {\n          setLoadError({ message: 'alertmanager.v2.status.config.original not found.' });\n        } else {\n          try {\n            const { global } = safeLoad(originalAlertmanagerConfigJSON);\n            setAlertmanagerGlobals(global);\n            setLoaded(true);\n          } catch (error) {\n            setLoadError({\n              message: `Error parsing Alertmanager config.original: ${error.message ||\n                'invalid YAML'}`,\n            });\n          }\n        }\n      })\n      .catch((e) =>\n        setLoadError({\n          message: `Error loading ${alertManagerBaseURL}/api/v2/status/: ${e.message}`,\n        }),\n      );\n  }, [alertManagerBaseURL]);\n\n  return (\n    <StatusBox {...obj} label=\"Alertmanager Globals\" loaded={loaded} loadError={loadError}>\n      <ReceiverBaseForm {...props} obj={obj.data} alertmanagerGlobals={alertmanagerGlobals} />\n    </StatusBox>\n  );\n});\n\nconst resources = [\n  {\n    kind: 'Secret',\n    name: 'alertmanager-main',\n    namespace: 'openshift-monitoring',\n    isList: false,\n    prop: 'obj',\n  },\n];\n\nexport const CreateReceiver = () => (\n  <Firehose resources={resources}>\n    <ReceiverWrapper titleVerb=\"Create\" saveButtonText=\"Create\" />\n  </Firehose>\n);\n\nexport const EditReceiver = ({ match: { params } }) => (\n  <Firehose resources={resources}>\n    <ReceiverWrapper titleVerb=\"Edit\" saveButtonText=\"Save\" editReceiverNamed={params.name} />\n  </Firehose>\n);\n\ntype ReceiverFormsWrapperProps = {\n  titleVerb: string;\n  saveButtonText: string;\n  obj?: {\n    data?: K8sResourceKind;\n    [key: string]: any;\n  };\n  editReceiverNamed?: string;\n};\n\ntype ReceiverBaseFormProps = {\n  obj?: K8sResourceKind;\n  titleVerb: string;\n  saveButtonText: string;\n  editReceiverNamed?: string;\n  alertmanagerGlobals?: { [key: string]: any };\n};\n\nexport type RouteEditorLabel = {\n  name: string;\n  value: string;\n  isRegex: boolean;\n};\n\ntype FormAction = {\n  type: 'setFormValues';\n  payload: {\n    [key: string]: string;\n  };\n};\n\ntype FormState = {\n  receiverType: string;\n  routeLabels: any[];\n  [key: string]: string | any[] | any;\n};\n\nexport type FormProps = {\n  globals: { [key: string]: any };\n  formValues: { [key: string]: any };\n  dispatchFormChange: Function;\n};\n\ntype SaveAsDefaultCheckboxProps = {\n  formField: string;\n  disabled: boolean;\n  label: string;\n  formValues: { [key: string]: any };\n  dispatchFormChange: Function;\n  tooltip: string;\n};\n\ntype ReceiverInfoTipProps = {\n  type: InitialReceivers;\n};\n"]}]}