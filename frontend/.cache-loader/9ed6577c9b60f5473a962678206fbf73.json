{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/app/ApplicationSelector.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/app/ApplicationSelector.tsx","mtime":1615298458620},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useFormikContext, useField } from 'formik';\nimport { FormGroup, TextInputTypes } from '@patternfly/react-core';\nimport { InputField, getFieldId, useFormikValidationFix } from '@console/shared';\nimport { CREATE_APPLICATION_KEY, UNASSIGNED_KEY } from '../../../const';\nimport { sanitizeApplicationValue } from '../../../utils/application-utils';\nimport ApplicationDropdown from '../../dropdown/ApplicationDropdown';\nconst ApplicationSelector = ({ namespace, noProjectsAvailable, }) => {\n    const [applicationsAvailable, setApplicationsAvailable] = React.useState(true);\n    const projectsAvailable = !noProjectsAvailable;\n    const [selectedKey, { touched, error }] = useField('application.selectedKey');\n    const { setFieldValue, setFieldTouched } = useFormikContext();\n    const fieldId = getFieldId('application-name', 'dropdown');\n    const isValid = !(touched && error);\n    const errorMessage = !isValid ? error : '';\n    useFormikValidationFix(selectedKey.value);\n    const onDropdownChange = (key, application) => {\n        setFieldValue('application.selectedKey', key);\n        setFieldTouched('application.selectedKey', true);\n        setFieldValue('application.name', sanitizeApplicationValue(application, key));\n        setFieldTouched('application.name', true);\n    };\n    const handleOnLoad = (applicationList) => {\n        const noApplicationsAvailable = _.isEmpty(applicationList);\n        setApplicationsAvailable(!noApplicationsAvailable);\n        if (noApplicationsAvailable) {\n            setFieldValue('application.selectedKey', '');\n            setFieldValue('application.name', '');\n        }\n    };\n    const actionItems = [\n        {\n            actionTitle: 'Create Application',\n            actionKey: CREATE_APPLICATION_KEY,\n        },\n        {\n            actionTitle: 'Unassigned',\n            actionKey: UNASSIGNED_KEY,\n        },\n    ];\n    return (React.createElement(React.Fragment, null,\n        projectsAvailable && applicationsAvailable && (React.createElement(FormGroup, { fieldId: fieldId, label: \"Application\", helperTextInvalid: errorMessage, isValid: isValid, helperText: \"Select an application for your grouping or Unassigned to not use an application grouping.\" },\n            React.createElement(ApplicationDropdown, { dropDownClassName: \"dropdown--full-width\", menuClassName: \"dropdown-menu--text-wrap\", id: fieldId, namespace: namespace, actionItems: actionItems, autoSelect: true, selectedKey: selectedKey.value, onChange: onDropdownChange, onLoad: handleOnLoad }))),\n        (!applicationsAvailable || selectedKey.value === CREATE_APPLICATION_KEY) && (React.createElement(InputField, { type: TextInputTypes.text, required: selectedKey.value === CREATE_APPLICATION_KEY, name: \"application.name\", label: \"Application Name\", \"data-test-id\": \"application-form-app-input\", helpText: \"A unique name given to the application grouping to label your resources.\" }))));\n};\nexport default ApplicationSelector;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/app/ApplicationSelector.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/import/app/ApplicationSelector.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useFormikContext, FormikValues, useField } from 'formik';\nimport { FormGroup, TextInputTypes } from '@patternfly/react-core';\nimport { InputField, getFieldId, useFormikValidationFix } from '@console/shared';\nimport { CREATE_APPLICATION_KEY, UNASSIGNED_KEY } from '../../../const';\nimport { sanitizeApplicationValue } from '../../../utils/application-utils';\nimport ApplicationDropdown from '../../dropdown/ApplicationDropdown';\n\nexport interface ApplicationSelectorProps {\n  namespace?: string;\n  noProjectsAvailable?: boolean;\n}\n\nconst ApplicationSelector: React.FC<ApplicationSelectorProps> = ({\n  namespace,\n  noProjectsAvailable,\n}) => {\n  const [applicationsAvailable, setApplicationsAvailable] = React.useState(true);\n  const projectsAvailable = !noProjectsAvailable;\n\n  const [selectedKey, { touched, error }] = useField('application.selectedKey');\n  const { setFieldValue, setFieldTouched } = useFormikContext<FormikValues>();\n  const fieldId = getFieldId('application-name', 'dropdown');\n  const isValid = !(touched && error);\n  const errorMessage = !isValid ? error : '';\n\n  useFormikValidationFix(selectedKey.value);\n\n  const onDropdownChange = (key: string, application: string) => {\n    setFieldValue('application.selectedKey', key);\n    setFieldTouched('application.selectedKey', true);\n    setFieldValue('application.name', sanitizeApplicationValue(application, key));\n    setFieldTouched('application.name', true);\n  };\n\n  const handleOnLoad = (applicationList: { [key: string]: string }) => {\n    const noApplicationsAvailable = _.isEmpty(applicationList);\n    setApplicationsAvailable(!noApplicationsAvailable);\n    if (noApplicationsAvailable) {\n      setFieldValue('application.selectedKey', '');\n      setFieldValue('application.name', '');\n    }\n  };\n\n  const actionItems = [\n    {\n      actionTitle: 'Create Application',\n      actionKey: CREATE_APPLICATION_KEY,\n    },\n    {\n      actionTitle: 'Unassigned',\n      actionKey: UNASSIGNED_KEY,\n    },\n  ];\n\n  return (\n    <>\n      {projectsAvailable && applicationsAvailable && (\n        <FormGroup\n          fieldId={fieldId}\n          label=\"Application\"\n          helperTextInvalid={errorMessage}\n          isValid={isValid}\n          helperText=\"Select an application for your grouping or Unassigned to not use an application grouping.\"\n        >\n          <ApplicationDropdown\n            dropDownClassName=\"dropdown--full-width\"\n            menuClassName=\"dropdown-menu--text-wrap\"\n            id={fieldId}\n            namespace={namespace}\n            actionItems={actionItems}\n            autoSelect\n            selectedKey={selectedKey.value}\n            onChange={onDropdownChange}\n            onLoad={handleOnLoad}\n          />\n        </FormGroup>\n      )}\n      {(!applicationsAvailable || selectedKey.value === CREATE_APPLICATION_KEY) && (\n        <InputField\n          type={TextInputTypes.text}\n          required={selectedKey.value === CREATE_APPLICATION_KEY}\n          name=\"application.name\"\n          label=\"Application Name\"\n          data-test-id=\"application-form-app-input\"\n          helpText=\"A unique name given to the application grouping to label your resources.\"\n        />\n      )}\n    </>\n  );\n};\n\nexport default ApplicationSelector;\n"]}]}