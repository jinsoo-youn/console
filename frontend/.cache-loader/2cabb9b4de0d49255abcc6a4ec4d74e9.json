{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/EventSourceForm.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/EventSourceForm.tsx","mtime":1615298458640},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { FormFooter, FlexForm } from '@console/shared';\nimport { LoadingInline } from '@console/internal/components/utils';\nimport EventSourcesSelector from './event-sources/EventSourcesSelector';\nimport EventSourceSection from './event-sources/EventSourceSection';\nconst EventSourceForm = ({ errors, handleSubmit, handleReset, status, isSubmitting, dirty, namespace, eventSourceStatus, }) => (React.createElement(FlexForm, { onSubmit: handleSubmit },\n    eventSourceStatus && !_.isEmpty(eventSourceStatus.eventSourceList) && (React.createElement(React.Fragment, null,\n        React.createElement(EventSourcesSelector, { eventSourceList: eventSourceStatus.eventSourceList }),\n        React.createElement(EventSourceSection, { namespace: namespace }),\n        ' ')),\n    eventSourceStatus && !eventSourceStatus.loaded && React.createElement(LoadingInline, null),\n    React.createElement(FormFooter, { handleReset: handleReset, errorMessage: status && status.submitError, isSubmitting: isSubmitting, submitLabel: \"Create\", disableSubmit: !dirty || !_.isEmpty(errors), resetLabel: \"Cancel\", sticky: true })));\nexport default EventSourceForm;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/EventSourceForm.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/EventSourceForm.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAE5B,OAAO,EAAE,UAAU,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;AACvD,OAAO,EAAE,aAAa,EAAE,MAAM,oCAAoC,CAAC;AACnE,OAAO,oBAAoB,MAAM,sCAAsC,CAAC;AACxE,OAAO,kBAAkB,MAAM,oCAAoC,CAAC;AAQpE,MAAM,eAAe,GAAmD,CAAC,EACvE,MAAM,EACN,YAAY,EACZ,WAAW,EACX,MAAM,EACN,YAAY,EACZ,KAAK,EACL,SAAS,EACT,iBAAiB,GAClB,EAAE,EAAE,CAAC,CACJ,oBAAC,QAAQ,IAAC,QAAQ,EAAE,YAAY;IAC7B,iBAAiB,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,eAAe,CAAC,IAAI,CACrE;QACE,oBAAC,oBAAoB,IAAC,eAAe,EAAE,iBAAiB,CAAC,eAAe,GAAI;QAC5E,oBAAC,kBAAkB,IAAC,SAAS,EAAE,SAAS,GAAI;QAAC,GAAG,CAC/C,CACJ;IACA,iBAAiB,IAAI,CAAC,iBAAiB,CAAC,MAAM,IAAI,oBAAC,aAAa,OAAG;IACpE,oBAAC,UAAU,IACT,WAAW,EAAE,WAAW,EACxB,YAAY,EAAE,MAAM,IAAI,MAAM,CAAC,WAAW,EAC1C,YAAY,EAAE,YAAY,EAC1B,WAAW,EAAC,QAAQ,EACpB,aAAa,EAAE,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,EAC3C,UAAU,EAAC,QAAQ,EACnB,MAAM,SACN,CACO,CACZ,CAAC;AAEF,eAAe,eAAe,CAAC","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { FormikProps, FormikValues } from 'formik';\nimport { FormFooter, FlexForm } from '@console/shared';\nimport { LoadingInline } from '@console/internal/components/utils';\nimport EventSourcesSelector from './event-sources/EventSourcesSelector';\nimport EventSourceSection from './event-sources/EventSourceSection';\nimport { EventSourceListData } from './import-types';\n\ninterface OwnProps {\n  namespace: string;\n  eventSourceStatus: EventSourceListData | null;\n}\n\nconst EventSourceForm: React.FC<FormikProps<FormikValues> & OwnProps> = ({\n  errors,\n  handleSubmit,\n  handleReset,\n  status,\n  isSubmitting,\n  dirty,\n  namespace,\n  eventSourceStatus,\n}) => (\n  <FlexForm onSubmit={handleSubmit}>\n    {eventSourceStatus && !_.isEmpty(eventSourceStatus.eventSourceList) && (\n      <>\n        <EventSourcesSelector eventSourceList={eventSourceStatus.eventSourceList} />\n        <EventSourceSection namespace={namespace} />{' '}\n      </>\n    )}\n    {eventSourceStatus && !eventSourceStatus.loaded && <LoadingInline />}\n    <FormFooter\n      handleReset={handleReset}\n      errorMessage={status && status.submitError}\n      isSubmitting={isSubmitting}\n      submitLabel=\"Create\"\n      disableSubmit={!dirty || !_.isEmpty(errors)}\n      resetLabel=\"Cancel\"\n      sticky\n    />\n  </FlexForm>\n);\n\nexport default EventSourceForm;\n"]}]}