{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-plugin-sdk/src/typings/base.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-plugin-sdk/src/typings/base.ts","mtime":1615298458600},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-plugin-sdk/src/typings/base.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-plugin-sdk/src/typings/base.ts"],"names":[],"mappings":"","sourcesContent":["/**\n * An extension of the Console application.\n *\n * Each extension is a realization (instance) of an extension `type` using the\n * parameters provided via the `properties` object.\n *\n * The value of extension `type` should be formatted in a way that describes\n * the broader category as well as any specialization(s), for example:\n *\n * - `ModelDefinition`\n * - `Page/Resource/List`\n * - `Dashboards/Overview/Utilization/Item`\n *\n * Each extension may specify `flags` referencing Console feature flags which\n * are required and/or disallowed in order to put this extension into effect.\n *\n * TODO(vojtech): write ESLint rule to guard against extension type duplicity\n */\nexport type Extension<P = any> = {\n  type: string;\n  properties: P;\n  flags?: Partial<{\n    required: string[];\n    disallowed: string[];\n  }>;\n};\n\n/**\n * An extension that is always effective, regardless of feature flags.\n */\nexport type AlwaysOnExtension<P = any> = Omit<Extension<P>, 'flags'>;\n\n/**\n * From plugin author perspective, a plugin is simply a list of extensions.\n *\n * Plugin metadata is stored in the `package.json` file of the corresponding\n * monorepo package. The `consolePlugin.entry` path should point to a module\n * that exports the plugin object.\n *\n * ```json\n *  {\n *    \"name\": \"@console/demo-plugin\",\n *    \"version\": \"0.0.0-fixed\",\n *    // scripts, dependencies, etc.\n *    \"consolePlugin\": {\n *      \"entry\": \"src/plugin.ts\"\n *    }\n *  }\n * ```\n *\n * For better type checking and code completion, use a type parameter that\n * represents the union of all the extension types consumed by the plugin:\n *\n * ```ts\n *  // packages/console-demo-plugin/src/plugin.ts\n *  import { Plugin } from '@console/plugin-sdk';\n *\n *  const plugin: Plugin<FooExtension | BarExtension> = [\n *    {\n *      type: 'Foo',\n *      properties: {} // Foo extension specific properties\n *    },\n *    {\n *      type: 'Bar',\n *      properties: {} // Bar extension specific properties\n *    }\n *  ];\n *\n *  export default plugin;\n * ```\n */\nexport type Plugin<E extends Extension> = E[];\n\n/**\n * TS type guard to narrow type of the given extension to `E`.\n */\nexport type ExtensionTypeGuard<E extends Extension> = (e: E) => e is E;\n\n/**\n * Common interface for loading async React components.\n */\nexport type LazyLoader<T extends {} = {}> = () => Promise<React.ComponentType<Partial<T>>>;\n\n/**\n * From Console application perspective, a plugin is a list of extensions\n * enhanced with additional data.\n */\nexport type ActivePlugin = {\n  name: string;\n  extensions: Extension[];\n};\n\n/**\n * An extension enhanced with additional metadata at runtime.\n */\nexport type ExtensionWithMetadata = Extension & {\n  plugin: string;\n};\n"]}]}