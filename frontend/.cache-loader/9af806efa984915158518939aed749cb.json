{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm/data-volume-wrapper.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm/data-volume-wrapper.ts","mtime":1616735742430},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { getOwnerReferences } from '@console/shared/src';\nimport { compareOwnerReference } from '@console/shared/src/utils/owner-references';\nimport { apiVersionForModel } from '@console/internal/module/k8s';\nimport { AccessMode, DataVolumeSourceType, VolumeMode } from '../../../constants/vm/storage';\nimport { getDataVolumeAccessModes, getDataVolumeStorageClassName, getDataVolumeStorageSize, getDataVolumeVolumeMode, } from '../../../selectors/dv/selectors';\nimport { BinaryUnit, stringValueUnitSplit, toIECUnit, } from '../../../components/form/size-unit-utils';\nimport { DataVolumeModel } from '../../../models';\nimport { K8sResourceObjectWithTypePropertyWrapper } from '../common/k8s-resource-object-with-type-property-wrapper';\nexport class DataVolumeWrapper extends K8sResourceObjectWithTypePropertyWrapper {\n    constructor(dataVolumeTemplate, copy = false) {\n        super(DataVolumeModel, dataVolumeTemplate, copy, DataVolumeSourceType, ['spec', 'source']);\n        this.getStorageClassName = () => getDataVolumeStorageClassName(this.data);\n        this.getPesistentVolumeClaimName = () => this.getIn(['spec', 'source', 'pvc', 'name']);\n        this.getPesistentVolumeClaimNamespace = () => this.getIn(['spec', 'source', 'pvc', 'namespace']);\n        this.getURL = () => this.getIn(['spec', 'source', 'http', 'url']);\n        this.getSize = () => {\n            const parts = stringValueUnitSplit(getDataVolumeStorageSize(this.data) || '');\n            return {\n                value: parts[0],\n                unit: parts[1],\n            };\n        };\n        this.getReadabableSize = () => {\n            const { value, unit } = this.getSize();\n            return `${value} ${toIECUnit(unit) || BinaryUnit.B}`;\n        };\n        this.hasSize = () => this.getSize().value > 0;\n        this.getAccessModes = () => getDataVolumeAccessModes(this.data);\n        this.getVolumeMode = () => getDataVolumeVolumeMode(this.data);\n        this.getVolumeModeEnum = () => VolumeMode.fromString(this.getVolumeMode());\n        this.getAccessModesEnum = () => {\n            const accessModes = this.getAccessModes();\n            return accessModes ? accessModes.map((mode) => AccessMode.fromString(mode)) : accessModes;\n        };\n        this.setSize = (value, unit = 'Gi') => {\n            this.ensurePath('spec.pvc.resources.requests');\n            this.data.spec.pvc.resources.requests.storage = `${value}${unit}`;\n            return this;\n        };\n        this.setStorageClassName = (storageClassName) => {\n            this.ensurePath('spec.pvc');\n            this.data.spec.pvc.storageClassName = storageClassName;\n            return this;\n        };\n        this.setAccessModes = (accessModes) => {\n            this.ensurePath('spec.pvc');\n            this.data.spec.pvc.accessModes =\n                accessModes && accessModes.map((a) => a === null || a === void 0 ? void 0 : a.getValue()).filter((a) => a); // allow null and undefined\n            return this;\n        };\n        this.setVolumeMode = (volumeMode) => {\n            this.ensurePath('spec.pvc');\n            this.data.spec.pvc.volumeMode = volumeMode && volumeMode.getValue(); // allow null and undefined\n            return this;\n        };\n        this.addOwnerReferences = (...additionalOwnerReferences) => {\n            if (!getOwnerReferences(this.data)) {\n                this.data.metadata.ownerReferences = [];\n            }\n            if (additionalOwnerReferences) {\n                const ownerReferences = getOwnerReferences(this.data);\n                additionalOwnerReferences.forEach((newReference) => {\n                    if (!ownerReferences.some((oldReference) => compareOwnerReference(oldReference, newReference))) {\n                        ownerReferences.push(newReference);\n                    }\n                });\n            }\n            return this;\n        };\n    }\n    init(data = {}) {\n        super.init(data);\n        const { size, unit, storageClassName } = data;\n        if (size != null && unit) {\n            this.setSize(size, unit);\n        }\n        if (storageClassName !== undefined) {\n            this.setStorageClassName(storageClassName);\n        }\n        return this;\n    }\n    mergeWith(...dataVolumeWrappers) {\n        super.mergeWith(...dataVolumeWrappers);\n        this.clearIfEmpty('spec.pvc.storageClassName');\n        this.clearIfEmpty('spec.pvc.accessModes');\n        this.clearIfEmpty('spec.pvc.volumeMode');\n        const accessModes = this.getAccessModesEnum();\n        if ((accessModes === null || accessModes === void 0 ? void 0 : accessModes.length) > 1) {\n            // API currently allows only one mode\n            this.setAccessModes([accessModes[0]]);\n        }\n        return this;\n    }\n    sanitize(type, { name, namespace, url }) {\n        switch (type) {\n            case DataVolumeSourceType.HTTP:\n                return { url };\n            case DataVolumeSourceType.PVC:\n                return { name, namespace };\n            case DataVolumeSourceType.BLANK:\n            default:\n                return {};\n        }\n    }\n}\n/**\n * @deprecated FIXME deprecate initializeFromSimpleData in favor of init\n */\nDataVolumeWrapper.initializeFromSimpleData = ({ name, namespace, type, typeData, accessModes, volumeMode, size, unit, storageClassName, }) => {\n    const resources = size == null\n        ? undefined\n        : {\n            requests: {\n                storage: size && unit ? `${size}${unit}` : size,\n            },\n        };\n    return new DataVolumeWrapper({\n        apiVersion: apiVersionForModel(DataVolumeModel),\n        kind: DataVolumeModel.kind,\n        metadata: {\n            name,\n            namespace,\n        },\n        spec: {\n            pvc: {\n                accessModes: _.cloneDeep(accessModes),\n                volumeMode: _.cloneDeep(volumeMode),\n                resources,\n                storageClassName,\n            },\n            source: {},\n        },\n    }).setType(type, typeData);\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm/data-volume-wrapper.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/k8s/wrapper/vm/data-volume-wrapper.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport { getOwnerReferences } from '@console/shared/src';\nimport { compareOwnerReference } from '@console/shared/src/utils/owner-references';\nimport { apiVersionForModel } from '@console/internal/module/k8s';\nimport { V1alpha1DataVolume } from '../../../types/vm/disk/V1alpha1DataVolume';\nimport { AccessMode, DataVolumeSourceType, VolumeMode } from '../../../constants/vm/storage';\nimport {\n  getDataVolumeAccessModes,\n  getDataVolumeStorageClassName,\n  getDataVolumeStorageSize,\n  getDataVolumeVolumeMode,\n} from '../../../selectors/dv/selectors';\nimport {\n  BinaryUnit,\n  stringValueUnitSplit,\n  toIECUnit,\n} from '../../../components/form/size-unit-utils';\nimport { DataVolumeModel } from '../../../models';\nimport { K8sResourceObjectWithTypePropertyWrapper } from '../common/k8s-resource-object-with-type-property-wrapper';\nimport { K8sInitAddon } from '../common/util/k8s-mixin';\n\ntype CombinedTypeData = {\n  name?: string;\n  namespace?: string;\n  url?: string;\n};\n\nexport class DataVolumeWrapper extends K8sResourceObjectWithTypePropertyWrapper<\n  V1alpha1DataVolume,\n  DataVolumeSourceType,\n  CombinedTypeData,\n  DataVolumeWrapper\n> {\n  /**\n   * @deprecated FIXME deprecate initializeFromSimpleData in favor of init\n   */\n  static initializeFromSimpleData = ({\n    name,\n    namespace,\n    type,\n    typeData,\n    accessModes,\n    volumeMode,\n    size,\n    unit,\n    storageClassName,\n  }: {\n    name?: string;\n    namespace?: string;\n    type?: DataVolumeSourceType;\n    typeData?: CombinedTypeData;\n    accessModes?: object[] | string[];\n    volumeMode?: object | string;\n    size?: string | number;\n    unit?: string;\n    storageClassName?: string;\n  }) => {\n    const resources =\n      size == null\n        ? undefined\n        : {\n            requests: {\n              storage: size && unit ? `${size}${unit}` : size,\n            },\n          };\n\n    return new DataVolumeWrapper({\n      apiVersion: apiVersionForModel(DataVolumeModel),\n      kind: DataVolumeModel.kind,\n      metadata: {\n        name,\n        namespace,\n      },\n      spec: {\n        pvc: {\n          accessModes: _.cloneDeep(accessModes),\n          volumeMode: _.cloneDeep(volumeMode),\n          resources,\n          storageClassName,\n        },\n        source: {},\n      },\n    }).setType(type, typeData);\n  };\n\n  constructor(dataVolumeTemplate?: V1alpha1DataVolume | DataVolumeWrapper, copy = false) {\n    super(DataVolumeModel, dataVolumeTemplate, copy, DataVolumeSourceType, ['spec', 'source']);\n  }\n\n  init(\n    data: K8sInitAddon & { size?: string | number; unit?: string; storageClassName?: string } = {},\n  ) {\n    super.init(data);\n    const { size, unit, storageClassName } = data;\n    if (size != null && unit) {\n      this.setSize(size, unit);\n    }\n    if (storageClassName !== undefined) {\n      this.setStorageClassName(storageClassName);\n    }\n    return this;\n  }\n\n  getStorageClassName = () => getDataVolumeStorageClassName(this.data as any);\n\n  getPesistentVolumeClaimName = () => this.getIn(['spec', 'source', 'pvc', 'name']);\n\n  getPesistentVolumeClaimNamespace = () => this.getIn(['spec', 'source', 'pvc', 'namespace']);\n\n  getURL = () => this.getIn(['spec', 'source', 'http', 'url']);\n\n  getSize = (): { value: number; unit: string } => {\n    const parts = stringValueUnitSplit(getDataVolumeStorageSize(this.data as any) || '');\n    return {\n      value: parts[0],\n      unit: parts[1],\n    };\n  };\n\n  getReadabableSize = () => {\n    const { value, unit } = this.getSize();\n    return `${value} ${toIECUnit(unit) || BinaryUnit.B}`;\n  };\n\n  hasSize = () => this.getSize().value > 0;\n\n  getAccessModes = () => getDataVolumeAccessModes(this.data);\n\n  getVolumeMode = () => getDataVolumeVolumeMode(this.data);\n\n  getVolumeModeEnum = () => VolumeMode.fromString(this.getVolumeMode());\n\n  getAccessModesEnum = () => {\n    const accessModes = this.getAccessModes();\n    return accessModes ? accessModes.map((mode) => AccessMode.fromString(mode)) : accessModes;\n  };\n\n  setSize = (value: string | number, unit = 'Gi') => {\n    this.ensurePath('spec.pvc.resources.requests');\n    (this.data.spec.pvc.resources.requests as any).storage = `${value}${unit}`;\n    return this;\n  };\n\n  setStorageClassName = (storageClassName: string) => {\n    this.ensurePath('spec.pvc');\n    this.data.spec.pvc.storageClassName = storageClassName;\n    return this;\n  };\n\n  setAccessModes = (accessModes: AccessMode[]) => {\n    this.ensurePath('spec.pvc');\n    this.data.spec.pvc.accessModes =\n      accessModes && accessModes.map((a) => a?.getValue()).filter((a) => a); // allow null and undefined\n    return this;\n  };\n\n  setVolumeMode = (volumeMode: VolumeMode) => {\n    this.ensurePath('spec.pvc');\n    this.data.spec.pvc.volumeMode = volumeMode && volumeMode.getValue(); // allow null and undefined\n    return this;\n  };\n\n  addOwnerReferences = (...additionalOwnerReferences) => {\n    if (!getOwnerReferences(this.data)) {\n      this.data.metadata.ownerReferences = [];\n    }\n\n    if (additionalOwnerReferences) {\n      const ownerReferences = getOwnerReferences(this.data);\n      additionalOwnerReferences.forEach((newReference) => {\n        if (\n          !ownerReferences.some((oldReference) => compareOwnerReference(oldReference, newReference))\n        ) {\n          ownerReferences.push(newReference);\n        }\n      });\n    }\n    return this;\n  };\n\n  mergeWith(...dataVolumeWrappers: DataVolumeWrapper[]) {\n    super.mergeWith(...dataVolumeWrappers);\n    this.clearIfEmpty('spec.pvc.storageClassName');\n    this.clearIfEmpty('spec.pvc.accessModes');\n    this.clearIfEmpty('spec.pvc.volumeMode');\n    const accessModes = this.getAccessModesEnum();\n    if (accessModes?.length > 1) {\n      // API currently allows only one mode\n      this.setAccessModes([accessModes[0]]);\n    }\n    return this;\n  }\n\n  protected sanitize(type: DataVolumeSourceType, { name, namespace, url }: CombinedTypeData) {\n    switch (type) {\n      case DataVolumeSourceType.HTTP:\n        return { url };\n      case DataVolumeSourceType.PVC:\n        return { name, namespace };\n      case DataVolumeSourceType.BLANK:\n      default:\n        return {};\n    }\n  }\n}\n"]}]}