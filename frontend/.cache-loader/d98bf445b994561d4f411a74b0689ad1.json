{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/affinity-modal/validations.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/affinity-modal/validations.ts","mtime":1615298458660},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { AFFINITY_CONDITIONS } from '../shared/consts';\nexport const isWeightValid = (focusedAffinity) => focusedAffinity.condition === AFFINITY_CONDITIONS.required ||\n    (focusedAffinity.weight > 0 && focusedAffinity.weight <= 100);\nexport const isTermsInvalid = (terms) => terms.some(({ key, values, operator }) => !key || ((operator === 'In' || operator === 'NotIn') && values.length === 0));\nexport const getTopologyKeyValidation = ({ type, condition, topologyKey }) => {\n    const topology = {\n        isTopologyDisabled: false,\n        isTopologyInvalid: false,\n        topologyValidationMessage: '',\n    };\n    if (condition === AFFINITY_CONDITIONS.required) {\n        if (type === 'podAffinity') {\n            topology.topologyValidationMessage = 'Topology key must not be empty';\n            topology.isTopologyInvalid = !topologyKey;\n        }\n        else {\n            topology.isTopologyDisabled = true;\n            topology.topologyValidationMessage = 'topologyKey is limited with current config';\n        }\n    }\n    else if (type === 'podAntiAffinity') {\n        topology.topologyValidationMessage = 'Empty topologyKey is interpreted as “all topologies”';\n    }\n    return topology;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/affinity-modal/validations.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/scheduling-modals/affinity-modal/validations.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,mBAAmB,EAAE,MAAM,kBAAkB,CAAC;AAGvD,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,eAAgC,EAAE,EAAE,CAChE,eAAe,CAAC,SAAS,KAAK,mBAAmB,CAAC,QAAQ;IAC1D,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,IAAI,eAAe,CAAC,MAAM,IAAI,GAAG,CAAC,CAAC;AAEhE,MAAM,CAAC,MAAM,cAAc,GAAG,CAAC,KAAsB,EAAE,EAAE,CACvD,KAAK,CAAC,IAAI,CACR,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,QAAQ,EAAE,EAAE,EAAE,CAC5B,CAAC,GAAG,IAAI,CAAC,CAAC,QAAQ,KAAK,IAAI,IAAI,QAAQ,KAAK,OAAO,CAAC,IAAI,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAC/E,CAAC;AAEJ,MAAM,CAAC,MAAM,wBAAwB,GAAG,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,WAAW,EAAmB,EAAE,EAAE;IAC5F,MAAM,QAAQ,GAAG;QACf,kBAAkB,EAAE,KAAK;QACzB,iBAAiB,EAAE,KAAK;QACxB,yBAAyB,EAAE,EAAE;KAC9B,CAAC;IAEF,IAAI,SAAS,KAAK,mBAAmB,CAAC,QAAQ,EAAE;QAC9C,IAAI,IAAI,KAAK,aAAa,EAAE;YAC1B,QAAQ,CAAC,yBAAyB,GAAG,gCAAgC,CAAC;YACtE,QAAQ,CAAC,iBAAiB,GAAG,CAAC,WAAW,CAAC;SAC3C;aAAM;YACL,QAAQ,CAAC,kBAAkB,GAAG,IAAI,CAAC;YACnC,QAAQ,CAAC,yBAAyB,GAAG,4CAA4C,CAAC;SACnF;KACF;SAAM,IAAI,IAAI,KAAK,iBAAiB,EAAE;QACrC,QAAQ,CAAC,yBAAyB,GAAG,sDAAsD,CAAC;KAC7F;IACD,OAAO,QAAQ,CAAC;AAClB,CAAC,CAAC","sourcesContent":["import { AFFINITY_CONDITIONS } from '../shared/consts';\nimport { AffinityRowData, AffinityLabel } from './types';\n\nexport const isWeightValid = (focusedAffinity: AffinityRowData) =>\n  focusedAffinity.condition === AFFINITY_CONDITIONS.required ||\n  (focusedAffinity.weight > 0 && focusedAffinity.weight <= 100);\n\nexport const isTermsInvalid = (terms: AffinityLabel[]) =>\n  terms.some(\n    ({ key, values, operator }) =>\n      !key || ((operator === 'In' || operator === 'NotIn') && values.length === 0),\n  );\n\nexport const getTopologyKeyValidation = ({ type, condition, topologyKey }: AffinityRowData) => {\n  const topology = {\n    isTopologyDisabled: false,\n    isTopologyInvalid: false,\n    topologyValidationMessage: '',\n  };\n\n  if (condition === AFFINITY_CONDITIONS.required) {\n    if (type === 'podAffinity') {\n      topology.topologyValidationMessage = 'Topology key must not be empty';\n      topology.isTopologyInvalid = !topologyKey;\n    } else {\n      topology.isTopologyDisabled = true;\n      topology.topologyValidationMessage = 'topologyKey is limited with current config';\n    }\n  } else if (type === 'podAntiAffinity') {\n    topology.topologyValidationMessage = 'Empty topologyKey is interpreted as “all topologies”';\n  }\n  return topology;\n};\n"]}]}