{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/ingress.jsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/ingress.jsx","mtime":1616735742470},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { DetailsPage, ListPage, Table, TableRow, TableData } from './factory';\nimport { Kebab, SectionHeading, LabelList, ResourceKebab, ResourceIcon, detailsPage, EmptyBox, navFactory, ResourceLink, ResourceSummary } from './utils';\nimport { useTranslation } from 'react-i18next';\nconst menuActions = Kebab.factory.common;\nexport const ingressValidHosts = ingress => _.map(_.get(ingress, 'spec.rules', []), 'host').filter(_.isString);\nconst getHosts = ingress => {\n    const hosts = ingressValidHosts(ingress);\n    if (hosts.length) {\n        const hostsStr = hosts.join(', ');\n        return (React.createElement(\"div\", { className: \"co-truncate co-select-to-copy\", title: hostsStr }, hostsStr));\n    }\n    return React.createElement(\"div\", { className: \"text-muted\" }, \"No hosts\");\n};\nconst getTLSCert = ingress => {\n    if (!_.has(ingress.spec, 'tls')) {\n        return (React.createElement(\"div\", null,\n            React.createElement(\"span\", null, \"Not configured\")));\n    }\n    const certs = _.map(ingress.spec.tls, 'secretName');\n    return (React.createElement(\"div\", null,\n        React.createElement(ResourceIcon, { kind: \"Secret\" }),\n        React.createElement(\"span\", null, certs.join(', '))));\n};\nconst tableColumnClasses = [classNames('col-md-3', 'col-sm-4', 'col-xs-6'), classNames('col-md-3', 'col-sm-4', 'col-xs-6'), classNames('col-md-3', 'col-sm-4', 'hidden-xs'), classNames('col-md-3', 'hidden-sm', 'hidden-xs'), Kebab.columnClass];\nconst kind = 'Ingress';\nconst IngressTableHeader = t => {\n    return [\n        {\n            title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n            sortField: 'metadata.name',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[0] },\n        },\n        {\n            title: t('COMMON:MSG_MAIN_TABLEHEADER_2'),\n            sortField: 'metadata.namespace',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[1] },\n        },\n        {\n            title: t('COMMON:MSG_MAIN_TABLEHEADER_15'),\n            sortField: 'metadata.labels',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[2] },\n        },\n        {\n            title: t('COMMON:MSG_MAIN_TABLEHEADER_28'),\n            sortFunc: 'ingressValidHosts',\n            transforms: [sortable],\n            props: { className: tableColumnClasses[3] },\n        },\n        {\n            title: '',\n            props: { className: tableColumnClasses[4] },\n        },\n    ];\n};\nIngressTableHeader.displayName = 'IngressTableHeader';\nconst IngressTableRow = ({ obj: ingress, index, key, style }) => {\n    return (React.createElement(TableRow, { id: ingress.metadata.uid, index: index, trKey: key, style: style },\n        React.createElement(TableData, { className: tableColumnClasses[0] },\n            React.createElement(ResourceLink, { kind: kind, name: ingress.metadata.name, namespace: ingress.metadata.namespace, title: ingress.metadata.uid })),\n        React.createElement(TableData, { className: classNames(tableColumnClasses[1], 'co-break-word') },\n            React.createElement(ResourceLink, { kind: \"Namespace\", name: ingress.metadata.namespace, title: ingress.metadata.namespace })),\n        React.createElement(TableData, { className: tableColumnClasses[2] },\n            React.createElement(LabelList, { kind: kind, labels: ingress.metadata.labels })),\n        React.createElement(TableData, { className: tableColumnClasses[3] }, getHosts(ingress)),\n        React.createElement(TableData, { className: tableColumnClasses[4] },\n            React.createElement(ResourceKebab, { actions: menuActions, kind: kind, resource: ingress }))));\n};\nconst RulesHeader = () => {\n    const { t } = useTranslation();\n    return (React.createElement(\"div\", { className: \"row co-m-table-grid__head\" },\n        React.createElement(\"div\", { className: \"col-xs-3\" }, t('COMMON:MSG_DETAILS_TABDETAILS_INGRESSRULES_TABLEHEADER_1')),\n        React.createElement(\"div\", { className: \"col-xs-3\" }, t('COMMON:MSG_DETAILS_TABDETAILS_INGRESSRULES_TABLEHEADER_2')),\n        React.createElement(\"div\", { className: \"col-xs-3\" }, t('COMMON:MSG_DETAILS_TABDETAILS_INGRESSRULES_TABLEHEADER_3')),\n        React.createElement(\"div\", { className: \"col-xs-2\" }, t('COMMON:MSG_DETAILS_TABDETAILS_INGRESSRULES_TABLEHEADER_4'))));\n};\nconst RulesRow = ({ rule, namespace }) => {\n    return (React.createElement(\"div\", { className: \"row co-resource-list__item\" },\n        React.createElement(\"div\", { className: \"col-xs-3 co-break-word\" },\n            React.createElement(\"div\", null, rule.host)),\n        React.createElement(\"div\", { className: \"col-xs-3 co-break-word\" },\n            React.createElement(\"div\", null, rule.path)),\n        React.createElement(\"div\", { className: \"col-xs-3\" }, rule.serviceName ? React.createElement(ResourceLink, { kind: \"Service\", name: rule.serviceName, namespace: namespace }) : '-'),\n        React.createElement(\"div\", { className: \"col-xs-2\" },\n            React.createElement(\"div\", null, rule.servicePort || '-'))));\n};\nconst RulesRows = props => {\n    const rules = [];\n    if (_.has(props.spec, 'rules')) {\n        _.forEach(props.spec.rules, rule => {\n            const paths = _.get(rule, 'http.paths');\n            if (_.isEmpty(paths)) {\n                rules.push({\n                    host: rule.host || '*',\n                    path: '*',\n                    serviceName: _.get(props.spec, 'backend.serviceName'),\n                    servicePort: _.get(props.spec, 'backend.servicePort'),\n                });\n            }\n            else {\n                _.forEach(paths, path => {\n                    rules.push({\n                        host: rule.host || '*',\n                        path: path.path || '*',\n                        serviceName: path.backend.serviceName,\n                        servicePort: path.backend.servicePort,\n                    });\n                });\n            }\n        });\n        const rows = _.map(rules, rule => {\n            return React.createElement(RulesRow, { rule: rule, key: rule.serviceName, namespace: props.namespace });\n        });\n        return React.createElement(\"div\", { className: \"co-m-table-grid__body\" },\n            \" \",\n            rows,\n            \" \");\n    }\n    return React.createElement(EmptyBox, { label: \"Rules\" });\n};\nconst Details = ({ obj: ingress }) => {\n    const { t } = useTranslation();\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(SectionHeading, { text: t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', { 0: t('COMMON:MSG_LNB_MENU_48') }) }),\n            React.createElement(ResourceSummary, { resource: ingress },\n                React.createElement(\"dt\", null, t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_42')),\n                React.createElement(\"dd\", null, getTLSCert(ingress)))),\n        React.createElement(\"div\", { className: \"co-m-pane__body\" },\n            React.createElement(SectionHeading, { text: t('COMMON:MSG_DETAILS_TABDETAILS_INGRESSRULES_1') }),\n            React.createElement(\"p\", { className: \"co-m-pane__explanation\" }, t('COMMON:MSG_DETAILS_TABDETAILS_INGRESSRULES_2')),\n            React.createElement(\"div\", { className: \"co-m-table-grid co-m-table-grid--bordered\" },\n                React.createElement(RulesHeader, null),\n                React.createElement(RulesRows, { spec: ingress.spec, namespace: ingress.metadata.namespace })))));\n};\nconst IngressesDetailsPage = props => React.createElement(DetailsPage, Object.assign({}, props, { menuActions: menuActions, pages: [navFactory.details(detailsPage(Details)), navFactory.editYaml()] }));\nconst IngressesList = props => {\n    const { t } = useTranslation();\n    return React.createElement(Table, Object.assign({}, props, { \"aria-label\": \"Ingresses\", Header: IngressTableHeader.bind(null, t), Row: IngressTableRow, virtualize: true }));\n};\nconst IngressesPage = props => {\n    const { t } = useTranslation();\n    return React.createElement(ListPage, Object.assign({ title: t('COMMON:MSG_LNB_MENU_48'), ListComponent: IngressesList, canCreate: true }, props));\n};\nexport { IngressesList, IngressesPage, IngressesDetailsPage };\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/ingress.jsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/ingress.jsx"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { DetailsPage, ListPage, Table, TableRow, TableData } from './factory';\nimport { Kebab, SectionHeading, LabelList, ResourceKebab, ResourceIcon, detailsPage, EmptyBox, navFactory, ResourceLink, ResourceSummary } from './utils';\nimport { useTranslation } from 'react-i18next';\nconst menuActions = Kebab.factory.common;\n\nexport const ingressValidHosts = ingress => _.map(_.get(ingress, 'spec.rules', []), 'host').filter(_.isString);\n\nconst getHosts = ingress => {\n  const hosts = ingressValidHosts(ingress);\n\n  if (hosts.length) {\n    const hostsStr = hosts.join(', ');\n    return (\n      <div className=\"co-truncate co-select-to-copy\" title={hostsStr}>\n        {hostsStr}\n      </div>\n    );\n  }\n\n  return <div className=\"text-muted\">No hosts</div>;\n};\n\nconst getTLSCert = ingress => {\n  if (!_.has(ingress.spec, 'tls')) {\n    return (\n      <div>\n        <span>Not configured</span>\n      </div>\n    );\n  }\n\n  const certs = _.map(ingress.spec.tls, 'secretName');\n\n  return (\n    <div>\n      <ResourceIcon kind=\"Secret\" />\n      <span>{certs.join(', ')}</span>\n    </div>\n  );\n};\n\nconst tableColumnClasses = [classNames('col-md-3', 'col-sm-4', 'col-xs-6'), classNames('col-md-3', 'col-sm-4', 'col-xs-6'), classNames('col-md-3', 'col-sm-4', 'hidden-xs'), classNames('col-md-3', 'hidden-sm', 'hidden-xs'), Kebab.columnClass];\n\nconst kind = 'Ingress';\n\nconst IngressTableHeader = t => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_2'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_15'),\n      sortField: 'metadata.labels',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_28'),\n      sortFunc: 'ingressValidHosts',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[4] },\n    },\n  ];\n};\nIngressTableHeader.displayName = 'IngressTableHeader';\n\nconst IngressTableRow = ({ obj: ingress, index, key, style }) => {\n  return (\n    <TableRow id={ingress.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={ingress.metadata.name} namespace={ingress.metadata.namespace} title={ingress.metadata.uid} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={ingress.metadata.namespace} title={ingress.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <LabelList kind={kind} labels={ingress.metadata.labels} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>{getHosts(ingress)}</TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={ingress} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst RulesHeader = () => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"row co-m-table-grid__head\">\n      <div className=\"col-xs-3\">{t('COMMON:MSG_DETAILS_TABDETAILS_INGRESSRULES_TABLEHEADER_1')}</div>\n      <div className=\"col-xs-3\">{t('COMMON:MSG_DETAILS_TABDETAILS_INGRESSRULES_TABLEHEADER_2')}</div>\n      <div className=\"col-xs-3\">{t('COMMON:MSG_DETAILS_TABDETAILS_INGRESSRULES_TABLEHEADER_3')}</div>\n      <div className=\"col-xs-2\">{t('COMMON:MSG_DETAILS_TABDETAILS_INGRESSRULES_TABLEHEADER_4')}</div>\n    </div>\n  );\n};\n\nconst RulesRow = ({ rule, namespace }) => {\n  return (\n    <div className=\"row co-resource-list__item\">\n      <div className=\"col-xs-3 co-break-word\">\n        <div>{rule.host}</div>\n      </div>\n      <div className=\"col-xs-3 co-break-word\">\n        <div>{rule.path}</div>\n      </div>\n      <div className=\"col-xs-3\">{rule.serviceName ? <ResourceLink kind=\"Service\" name={rule.serviceName} namespace={namespace} /> : '-'}</div>\n      <div className=\"col-xs-2\">\n        <div>{rule.servicePort || '-'}</div>\n      </div>\n    </div>\n  );\n};\n\nconst RulesRows = props => {\n  const rules = [];\n\n  if (_.has(props.spec, 'rules')) {\n    _.forEach(props.spec.rules, rule => {\n      const paths = _.get(rule, 'http.paths');\n      if (_.isEmpty(paths)) {\n        rules.push({\n          host: rule.host || '*',\n          path: '*',\n          serviceName: _.get(props.spec, 'backend.serviceName'),\n          servicePort: _.get(props.spec, 'backend.servicePort'),\n        });\n      } else {\n        _.forEach(paths, path => {\n          rules.push({\n            host: rule.host || '*',\n            path: path.path || '*',\n            serviceName: path.backend.serviceName,\n            servicePort: path.backend.servicePort,\n          });\n        });\n      }\n    });\n\n    const rows = _.map(rules, rule => {\n      return <RulesRow rule={rule} key={rule.serviceName} namespace={props.namespace} />;\n    });\n\n    return <div className=\"co-m-table-grid__body\"> {rows} </div>;\n  }\n\n  return <EmptyBox label=\"Rules\" />;\n};\n\nconst Details = ({ obj: ingress }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', { 0: t('COMMON:MSG_LNB_MENU_48') })} />\n        <ResourceSummary resource={ingress}>\n          <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_42')}</dt>\n          <dd>{getTLSCert(ingress)}</dd>\n        </ResourceSummary>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_INGRESSRULES_1')} />\n        <p className=\"co-m-pane__explanation\">{t('COMMON:MSG_DETAILS_TABDETAILS_INGRESSRULES_2')}</p>\n        <div className=\"co-m-table-grid co-m-table-grid--bordered\">\n          <RulesHeader />\n          <RulesRows spec={ingress.spec} namespace={ingress.metadata.namespace} />\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst IngressesDetailsPage = props => <DetailsPage {...props} menuActions={menuActions} pages={[navFactory.details(detailsPage(Details)), navFactory.editYaml()]} />;\nconst IngressesList = props => {\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"Ingresses\" Header={IngressTableHeader.bind(null, t)} Row={IngressTableRow} virtualize />;\n};\n\nconst IngressesPage = props => {\n  const { t } = useTranslation();\n  return <ListPage title={t('COMMON:MSG_LNB_MENU_48')} ListComponent={IngressesList} canCreate={true} {...props} />;\n};\n\nexport { IngressesList, IngressesPage, IngressesDetailsPage };\n"]}]}