{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/sidebars/resource-sidebar-samples.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/sidebars/resource-sidebar-samples.tsx","mtime":1615298458740},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Map as ImmutableMap } from 'immutable';\nimport { Button } from '@patternfly/react-core';\nimport MonacoEditor from 'react-monaco-editor';\nimport { ChevronDownIcon, ChevronRightIcon, DownloadIcon, PasteIcon, } from '@patternfly/react-icons';\nimport { BuildConfigModel, ClusterRoleModel, ConsoleLinkModel, NetworkPolicyModel, ResourceQuotaModel, RoleModel, } from '../../models';\nimport { apiVersionForModel, referenceFor, referenceForModel, } from '../../module/k8s';\nimport * as denyOtherNamespacesImg from '../../imgs/network-policy-samples/1-deny-other-namespaces.svg';\nimport * as limitCertainAppImg from '../../imgs/network-policy-samples/2-limit-certain-apps.svg';\nimport * as allowIngressImg from '../../imgs/network-policy-samples/3-allow-ingress.svg';\nimport * as defaultDenyAllImg from '../../imgs/network-policy-samples/4-default-deny-all.svg';\nimport * as webAllowExternalImg from '../../imgs/network-policy-samples/5-web-allow-external.svg';\nimport * as webDbAllowAllNsImg from '../../imgs/network-policy-samples/6-web-db-allow-all-ns.svg';\nimport * as webAllowProductionImg from '../../imgs/network-policy-samples/7-web-allow-production.svg';\nimport { hyperCloudSamples } from '../hypercloud/sidebars/resource-sidebar-samples';\nconst getTargetResource = (model) => ({\n    apiVersion: apiVersionForModel(model),\n    kind: model.kind,\n});\nconst clusterRoleBindingSamples = [\n    {\n        title: 'Allow reading Nodes in the core API groups (for ClusterRoleBinding)',\n        description: 'This \"ClusterRole\" is allowed to read the resource \"nodes\" in the core group (because a Node is cluster-scoped, this must be bound with a \"ClusterRoleBinding\" to be effective).',\n        id: 'read-nodes',\n        targetResource: getTargetResource(ClusterRoleModel),\n    },\n    {\n        title: '\"GET/POST\" requests to non-resource endpoint and all subpaths (for ClusterRoleBinding)',\n        description: 'This \"ClusterRole\" is allowed to \"GET\" and \"POST\" requests to the non-resource endpoint \"/healthz\" and all subpaths (must be in the \"ClusterRole\" bound with a \"ClusterRoleBinding\" to be effective).',\n        id: 'get-and-post-to-non-resource-endpoints',\n        targetResource: getTargetResource(ClusterRoleModel),\n    },\n];\nconst defaultSamples = ImmutableMap()\n    .setIn([referenceForModel(BuildConfigModel)], [\n    {\n        title: 'Build from Dockerfile',\n        description: 'A Dockerfile build performs an image build using a Dockerfile in the source repository or specified in build configuration.',\n        id: 'docker-build',\n        targetResource: getTargetResource(BuildConfigModel),\n    },\n    {\n        title: 'Source-to-Image (S2I) build',\n        description: 'S2I is a tool for building reproducible container images. It produces ready-to-run images by injecting the application source into a container image and assembling a new image.',\n        id: 's2i-build',\n        targetResource: getTargetResource(BuildConfigModel),\n    },\n])\n    .setIn([referenceForModel(NetworkPolicyModel)], [\n    {\n        highlightText: 'Limit',\n        title: 'access to the current namespace',\n        img: denyOtherNamespacesImg,\n        description: 'Deny traffic from other namespaces while allowing all traffic from the namespaces the Pod is living in.',\n        id: 'deny-other-namespaces',\n        targetResource: getTargetResource(NetworkPolicyModel),\n    },\n    {\n        highlightText: 'Limit',\n        title: 'traffic to an application within the same namespace',\n        img: limitCertainAppImg,\n        description: 'Allow inbound traffic from only certain Pods. One typical use case is to restrict the connections to a database only to the specific applications.',\n        id: 'db-or-api-allow-app',\n        targetResource: getTargetResource(NetworkPolicyModel),\n    },\n    {\n        highlightText: 'Allow',\n        title: 'http and https ingress within the same namespace',\n        img: allowIngressImg,\n        description: 'Define ingress rules for specific port numbers of an application. The rule applies to all port numbers if not specified.',\n        id: 'api-allow-http-and-https',\n        targetResource: getTargetResource(NetworkPolicyModel),\n    },\n    {\n        highlightText: 'Deny',\n        title: 'all non-whitelisted traffic in the current namespace',\n        img: defaultDenyAllImg,\n        description: 'A fundamental policy by blocking all cross-pod traffics expect whitelisted ones through the other Network Policies being deployed.',\n        id: 'default-deny-all',\n        targetResource: getTargetResource(NetworkPolicyModel),\n    },\n    {\n        highlightText: 'Allow',\n        title: 'traffic from external clients',\n        img: webAllowExternalImg,\n        description: 'Allow external service from public Internet directly or through a Load Balancer to access the pod.',\n        id: 'web-allow-external',\n        targetResource: getTargetResource(NetworkPolicyModel),\n    },\n    {\n        highlightText: 'Allow',\n        title: 'traffic to an application from all namespaces',\n        img: webDbAllowAllNsImg,\n        description: 'One typical use case is for a common database which is used by deployments in different namespaces.',\n        id: 'web-db-allow-all-ns',\n        targetResource: getTargetResource(NetworkPolicyModel),\n    },\n    {\n        highlightText: 'Allow',\n        title: 'traffic from all pods in a particular namespace',\n        img: webAllowProductionImg,\n        description: 'Typical use case should be \"only allow deployments in production namespaces to access the database\" or \"allow monitoring tools (in another namespace) to scrape metrics from current namespace.\"',\n        id: 'web-allow-production',\n        targetResource: getTargetResource(NetworkPolicyModel),\n    },\n])\n    .setIn([referenceForModel(ResourceQuotaModel)], [\n    {\n        title: 'Set compute resource quota',\n        description: 'Limit the total amount of memory and CPU that can be used in a namespace.',\n        id: 'rq-compute',\n        targetResource: getTargetResource(ResourceQuotaModel),\n    },\n    {\n        title: 'Set maximum count for any resource',\n        description: 'Restrict maximum count of each resource so users cannot create more than the allotted amount.',\n        id: 'rq-counts',\n        targetResource: getTargetResource(ResourceQuotaModel),\n    },\n    {\n        title: 'Specify resource quotas for a given storage class',\n        description: 'Limit the size and number of persistent volume claims that can be created with a storage class.',\n        id: 'rq-storageclass',\n        targetResource: getTargetResource(ResourceQuotaModel),\n    },\n])\n    .setIn([referenceForModel(RoleModel)], [\n    {\n        title: 'Allow reading the resource in API group',\n        description: 'This \"Role\" is allowed to read the resource \"Pods\" in the core API group.',\n        id: 'read-pods-within-ns',\n        targetResource: getTargetResource(RoleModel),\n    },\n    {\n        title: 'Allow reading/writing the resource in API group',\n        description: 'This \"Role\" is allowed to read and write the \"Deployments\" in both the \"extensions\" and \"apps\" API groups.',\n        id: 'read-write-deployment-in-ext-and-apps-apis',\n        targetResource: getTargetResource(RoleModel),\n    },\n    {\n        title: 'Allow different access rights to different types of resource and API groups',\n        description: 'This \"Role\" is allowed to read \"Pods\" and read/write \"Jobs\" resources in API groups.',\n        id: 'read-pods-and-read-write-jobs',\n        targetResource: getTargetResource(RoleModel),\n    },\n    {\n        title: 'Allow reading a ConfigMap in a specific namespace (for RoleBinding)',\n        description: 'This \"Role\" is allowed to read a \"ConfigMap\" named \"my-config\" (must be bound with a \"RoleBinding\" to limit to a single \"ConfigMap\" in a single namespace).',\n        id: 'read-configmap-within-ns',\n        targetResource: getTargetResource(RoleModel),\n    },\n    ...clusterRoleBindingSamples,\n])\n    .setIn([referenceForModel(ClusterRoleModel)], clusterRoleBindingSamples)\n    .setIn([referenceForModel(ConsoleLinkModel)], [\n    {\n        title: 'Add a link to the user menu',\n        description: 'The user menu appears in the right side of the masthead below the username.',\n        id: 'cl-user-menu',\n        targetResource: getTargetResource(ConsoleLinkModel),\n    },\n    {\n        title: 'Add a link to the application menu',\n        description: 'The application menu appears in the masthead below the 9x9 grid icon.  Application menu links can include an optional image and section heading.',\n        id: 'cl-application-menu',\n        targetResource: getTargetResource(ConsoleLinkModel),\n    },\n    {\n        title: 'Add a link to the namespace dashboard',\n        description: 'Namespace dashboard links appear on the project dashboard and namespace details pages in a section called \"Launcher\".  Namespace dashboard links can optionally be restricted to a specific namespace or namespaces.',\n        id: 'cl-namespace-dashboard',\n        targetResource: getTargetResource(ConsoleLinkModel),\n    },\n]);\nexport const getResourceSidebarSamples = (kindObj, yamlSamplesList) => {\n    const yamlSamplesData = !_.isEmpty(yamlSamplesList)\n        ? _.filter(yamlSamplesList.data, (sample) => sample.spec.targetResource.apiVersion === apiVersionForModel(kindObj) &&\n            sample.spec.targetResource.kind === kindObj.kind)\n        : [];\n    const existingSamples = hyperCloudSamples.get(referenceForModel(kindObj)) || defaultSamples.get(referenceForModel(kindObj)) || [];\n    const extensionSamples = !_.isEmpty(yamlSamplesData)\n        ? yamlSamplesData.map((sample) => {\n            return Object.assign({ id: sample.metadata.uid }, sample.spec);\n        })\n        : [];\n    const allSamples = [...existingSamples, ...extensionSamples];\n    // For the time being, `snippets` are a superset of `samples`\n    const snippets = allSamples.filter((sample) => sample.snippet);\n    const samples = allSamples.filter((sample) => !sample.snippet);\n    return { snippets, samples };\n};\nconst ResourceSidebarSample = ({ sample, loadSampleYaml, downloadSampleYaml, }) => {\n    const { highlightText, title, img, description, id, yaml, targetResource } = sample;\n    const reference = referenceFor(targetResource);\n    return (React.createElement(\"li\", { className: \"co-resource-sidebar-item\" },\n        React.createElement(\"h3\", { className: \"h4\" },\n            React.createElement(\"span\", { className: \"text-uppercase\" }, highlightText),\n            \" \",\n            title),\n        img && React.createElement(\"img\", { src: img, className: \"co-resource-sidebar-item__img img-responsive\" }),\n        React.createElement(\"p\", null, description),\n        React.createElement(Button, { type: \"button\", variant: \"link\", isInline: true, onClick: () => loadSampleYaml(id, yaml, reference) },\n            React.createElement(PasteIcon, { className: \"co-icon-space-r\" }),\n            \"Try it\"),\n        React.createElement(Button, { type: \"button\", variant: \"link\", isInline: true, className: \"pull-right\", onClick: () => downloadSampleYaml(id, yaml, reference) },\n            React.createElement(DownloadIcon, { className: \"co-icon-space-r\" }),\n            \"Download YAML\")));\n};\nconst lineHeight = 18;\nconst PreviewYAML = ({ maxPreviewLines = 20, yaml }) => {\n    return (React.createElement(\"div\", { style: { paddingTop: 10 } },\n        React.createElement(MonacoEditor, { height: Math.min(yaml.split('\\n').length, maxPreviewLines) * lineHeight, language: \"yaml\", value: yaml, options: {\n                lineHeight,\n                readOnly: true,\n                folding: false,\n                minimap: { enabled: false },\n                scrollBeyondLastLine: false,\n            } })));\n};\nconst ResourceSidebarSnippet = ({ snippet, insertSnippetYaml }) => {\n    const [yamlPreviewOpen, setYamlPreviewOpen] = React.useState(false);\n    const toggleYamlPreview = () => setYamlPreviewOpen(!yamlPreviewOpen);\n    const { highlightText, title, id, yaml, targetResource, description } = snippet;\n    const reference = referenceFor(targetResource);\n    return (React.createElement(\"li\", { className: \"co-resource-sidebar-item\" },\n        React.createElement(\"h3\", { className: \"h4\" },\n            React.createElement(\"span\", { className: \"text-uppercase\" }, highlightText),\n            \" \",\n            title),\n        React.createElement(\"p\", null, description),\n        React.createElement(Button, { type: \"button\", variant: \"link\", isInline: true, onClick: () => insertSnippetYaml(id, yaml, reference) },\n            React.createElement(PasteIcon, { className: \"co-icon-space-r\" }),\n            \"Insert Snippet\"),\n        React.createElement(Button, { type: \"button\", className: \"pull-right\", variant: \"link\", isInline: true, onClick: () => toggleYamlPreview() }, yamlPreviewOpen ? (React.createElement(React.Fragment, null,\n            \"Hide YAML\",\n            React.createElement(ChevronDownIcon, { className: \"co-icon-space-l\" }))) : (React.createElement(React.Fragment, null,\n            \"Show YAML\",\n            React.createElement(ChevronRightIcon, { className: \"co-icon-space-l\" })))),\n        yamlPreviewOpen && React.createElement(PreviewYAML, { yaml: yaml })));\n};\nexport const ResourceSidebarSnippets = ({ snippets, insertSnippetYaml }) => {\n    return (React.createElement(\"ul\", { className: \"co-resource-sidebar-list\", style: { listStyle: 'none', paddingLeft: 0 } }, _.map(snippets, (snippet) => (React.createElement(ResourceSidebarSnippet, { key: snippet.id, snippet: snippet, insertSnippetYaml: insertSnippetYaml })))));\n};\nexport const ResourceSidebarSamples = ({ samples, loadSampleYaml, downloadSampleYaml, }) => {\n    return (React.createElement(\"ol\", { className: \"co-resource-sidebar-list\" }, _.map(samples, (sample) => (React.createElement(ResourceSidebarSample, { key: sample.id, sample: sample, loadSampleYaml: loadSampleYaml, downloadSampleYaml: downloadSampleYaml })))));\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/sidebars/resource-sidebar-samples.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/sidebars/resource-sidebar-samples.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Map as ImmutableMap } from 'immutable';\nimport { Button } from '@patternfly/react-core';\nimport MonacoEditor from 'react-monaco-editor';\nimport {\n  ChevronDownIcon,\n  ChevronRightIcon,\n  DownloadIcon,\n  PasteIcon,\n} from '@patternfly/react-icons';\n\nimport {\n  BuildConfigModel,\n  ClusterRoleModel,\n  ConsoleLinkModel,\n  NetworkPolicyModel,\n  ResourceQuotaModel,\n  RoleModel,\n} from '../../models';\nimport {\n  apiVersionForModel,\n  GroupVersionKind,\n  K8sKind,\n  K8sResourceKind,\n  referenceFor,\n  referenceForModel,\n} from '../../module/k8s';\nimport { FirehoseResult } from '../utils';\nimport * as denyOtherNamespacesImg from '../../imgs/network-policy-samples/1-deny-other-namespaces.svg';\nimport * as limitCertainAppImg from '../../imgs/network-policy-samples/2-limit-certain-apps.svg';\nimport * as allowIngressImg from '../../imgs/network-policy-samples/3-allow-ingress.svg';\nimport * as defaultDenyAllImg from '../../imgs/network-policy-samples/4-default-deny-all.svg';\nimport * as webAllowExternalImg from '../../imgs/network-policy-samples/5-web-allow-external.svg';\nimport * as webDbAllowAllNsImg from '../../imgs/network-policy-samples/6-web-db-allow-all-ns.svg';\nimport * as webAllowProductionImg from '../../imgs/network-policy-samples/7-web-allow-production.svg';\nimport { hyperCloudSamples } from '../hypercloud/sidebars/resource-sidebar-samples';\n\nconst getTargetResource = (model: K8sKind) => ({\n  apiVersion: apiVersionForModel(model),\n  kind: model.kind,\n});\n\nconst clusterRoleBindingSamples: Sample[] = [\n  {\n    title: 'Allow reading Nodes in the core API groups (for ClusterRoleBinding)',\n    description:\n      'This \"ClusterRole\" is allowed to read the resource \"nodes\" in the core group (because a Node is cluster-scoped, this must be bound with a \"ClusterRoleBinding\" to be effective).',\n    id: 'read-nodes',\n    targetResource: getTargetResource(ClusterRoleModel),\n  },\n  {\n    title: '\"GET/POST\" requests to non-resource endpoint and all subpaths (for ClusterRoleBinding)',\n    description:\n      'This \"ClusterRole\" is allowed to \"GET\" and \"POST\" requests to the non-resource endpoint \"/healthz\" and all subpaths (must be in the \"ClusterRole\" bound with a \"ClusterRoleBinding\" to be effective).',\n    id: 'get-and-post-to-non-resource-endpoints',\n    targetResource: getTargetResource(ClusterRoleModel),\n  },\n];\n\nconst defaultSamples = ImmutableMap<GroupVersionKind, Sample[]>()\n  .setIn(\n    [referenceForModel(BuildConfigModel)],\n    [\n      {\n        title: 'Build from Dockerfile',\n        description:\n          'A Dockerfile build performs an image build using a Dockerfile in the source repository or specified in build configuration.',\n        id: 'docker-build',\n        targetResource: getTargetResource(BuildConfigModel),\n      },\n      {\n        title: 'Source-to-Image (S2I) build',\n        description:\n          'S2I is a tool for building reproducible container images. It produces ready-to-run images by injecting the application source into a container image and assembling a new image.',\n        id: 's2i-build',\n        targetResource: getTargetResource(BuildConfigModel),\n      },\n    ],\n  )\n  .setIn(\n    [referenceForModel(NetworkPolicyModel)],\n    [\n      {\n        highlightText: 'Limit',\n        title: 'access to the current namespace',\n        img: denyOtherNamespacesImg,\n        description:\n          'Deny traffic from other namespaces while allowing all traffic from the namespaces the Pod is living in.',\n        id: 'deny-other-namespaces',\n        targetResource: getTargetResource(NetworkPolicyModel),\n      },\n      {\n        highlightText: 'Limit',\n        title: 'traffic to an application within the same namespace',\n        img: limitCertainAppImg,\n        description:\n          'Allow inbound traffic from only certain Pods. One typical use case is to restrict the connections to a database only to the specific applications.',\n        id: 'db-or-api-allow-app',\n        targetResource: getTargetResource(NetworkPolicyModel),\n      },\n      {\n        highlightText: 'Allow',\n        title: 'http and https ingress within the same namespace',\n        img: allowIngressImg,\n        description:\n          'Define ingress rules for specific port numbers of an application. The rule applies to all port numbers if not specified.',\n        id: 'api-allow-http-and-https',\n        targetResource: getTargetResource(NetworkPolicyModel),\n      },\n      {\n        highlightText: 'Deny',\n        title: 'all non-whitelisted traffic in the current namespace',\n        img: defaultDenyAllImg,\n        description:\n          'A fundamental policy by blocking all cross-pod traffics expect whitelisted ones through the other Network Policies being deployed.',\n        id: 'default-deny-all',\n        targetResource: getTargetResource(NetworkPolicyModel),\n      },\n      {\n        highlightText: 'Allow',\n        title: 'traffic from external clients',\n        img: webAllowExternalImg,\n        description:\n          'Allow external service from public Internet directly or through a Load Balancer to access the pod.',\n        id: 'web-allow-external',\n        targetResource: getTargetResource(NetworkPolicyModel),\n      },\n      {\n        highlightText: 'Allow',\n        title: 'traffic to an application from all namespaces',\n        img: webDbAllowAllNsImg,\n        description:\n          'One typical use case is for a common database which is used by deployments in different namespaces.',\n        id: 'web-db-allow-all-ns',\n        targetResource: getTargetResource(NetworkPolicyModel),\n      },\n      {\n        highlightText: 'Allow',\n        title: 'traffic from all pods in a particular namespace',\n        img: webAllowProductionImg,\n        description:\n          'Typical use case should be \"only allow deployments in production namespaces to access the database\" or \"allow monitoring tools (in another namespace) to scrape metrics from current namespace.\"',\n        id: 'web-allow-production',\n        targetResource: getTargetResource(NetworkPolicyModel),\n      },\n    ],\n  )\n  .setIn(\n    [referenceForModel(ResourceQuotaModel)],\n    [\n      {\n        title: 'Set compute resource quota',\n        description: 'Limit the total amount of memory and CPU that can be used in a namespace.',\n        id: 'rq-compute',\n        targetResource: getTargetResource(ResourceQuotaModel),\n      },\n      {\n        title: 'Set maximum count for any resource',\n        description:\n          'Restrict maximum count of each resource so users cannot create more than the allotted amount.',\n        id: 'rq-counts',\n        targetResource: getTargetResource(ResourceQuotaModel),\n      },\n      {\n        title: 'Specify resource quotas for a given storage class',\n        description:\n          'Limit the size and number of persistent volume claims that can be created with a storage class.',\n        id: 'rq-storageclass',\n        targetResource: getTargetResource(ResourceQuotaModel),\n      },\n    ],\n  )\n  .setIn(\n    [referenceForModel(RoleModel)],\n    [\n      {\n        title: 'Allow reading the resource in API group',\n        description: 'This \"Role\" is allowed to read the resource \"Pods\" in the core API group.',\n        id: 'read-pods-within-ns',\n        targetResource: getTargetResource(RoleModel),\n      },\n      {\n        title: 'Allow reading/writing the resource in API group',\n        description:\n          'This \"Role\" is allowed to read and write the \"Deployments\" in both the \"extensions\" and \"apps\" API groups.',\n        id: 'read-write-deployment-in-ext-and-apps-apis',\n        targetResource: getTargetResource(RoleModel),\n      },\n      {\n        title: 'Allow different access rights to different types of resource and API groups',\n        description:\n          'This \"Role\" is allowed to read \"Pods\" and read/write \"Jobs\" resources in API groups.',\n        id: 'read-pods-and-read-write-jobs',\n        targetResource: getTargetResource(RoleModel),\n      },\n      {\n        title: 'Allow reading a ConfigMap in a specific namespace (for RoleBinding)',\n        description:\n          'This \"Role\" is allowed to read a \"ConfigMap\" named \"my-config\" (must be bound with a \"RoleBinding\" to limit to a single \"ConfigMap\" in a single namespace).',\n        id: 'read-configmap-within-ns',\n        targetResource: getTargetResource(RoleModel),\n      },\n      ...clusterRoleBindingSamples,\n    ],\n  )\n  .setIn([referenceForModel(ClusterRoleModel)], clusterRoleBindingSamples)\n  .setIn(\n    [referenceForModel(ConsoleLinkModel)],\n    [\n      {\n        title: 'Add a link to the user menu',\n        description: 'The user menu appears in the right side of the masthead below the username.',\n        id: 'cl-user-menu',\n        targetResource: getTargetResource(ConsoleLinkModel),\n      },\n      {\n        title: 'Add a link to the application menu',\n        description:\n          'The application menu appears in the masthead below the 9x9 grid icon.  Application menu links can include an optional image and section heading.',\n        id: 'cl-application-menu',\n        targetResource: getTargetResource(ConsoleLinkModel),\n      },\n      {\n        title: 'Add a link to the namespace dashboard',\n        description:\n          'Namespace dashboard links appear on the project dashboard and namespace details pages in a section called \"Launcher\".  Namespace dashboard links can optionally be restricted to a specific namespace or namespaces.',\n        id: 'cl-namespace-dashboard',\n        targetResource: getTargetResource(ConsoleLinkModel),\n      },\n    ],\n  );\n\nexport const getResourceSidebarSamples = (kindObj: K8sKind, yamlSamplesList: FirehoseResult) => {\n  const yamlSamplesData = !_.isEmpty(yamlSamplesList)\n    ? _.filter(\n      yamlSamplesList.data,\n      (sample: K8sResourceKind) =>\n        sample.spec.targetResource.apiVersion === apiVersionForModel(kindObj) &&\n        sample.spec.targetResource.kind === kindObj.kind,\n    )\n    : [];\n  const existingSamples = hyperCloudSamples.get(referenceForModel(kindObj)) || defaultSamples.get(referenceForModel(kindObj)) || [];\n  const extensionSamples = !_.isEmpty(yamlSamplesData)\n    ? yamlSamplesData.map((sample: K8sResourceKind) => {\n      return {\n        id: sample.metadata.uid,\n        ...sample.spec,\n      };\n    })\n    : [];\n\n  const allSamples = [...existingSamples, ...extensionSamples];\n\n  // For the time being, `snippets` are a superset of `samples`\n  const snippets = allSamples.filter((sample: Sample) => sample.snippet);\n  const samples = allSamples.filter((sample: Sample) => !sample.snippet);\n\n  return { snippets, samples };\n};\n\nconst ResourceSidebarSample: React.FC<ResourceSidebarSampleProps> = ({\n  sample,\n  loadSampleYaml,\n  downloadSampleYaml,\n}) => {\n  const { highlightText, title, img, description, id, yaml, targetResource } = sample;\n  const reference = referenceFor(targetResource);\n  return (\n    <li className=\"co-resource-sidebar-item\">\n      <h3 className=\"h4\">\n        <span className=\"text-uppercase\">{highlightText}</span> {title}\n      </h3>\n      {img && <img src={img} className=\"co-resource-sidebar-item__img img-responsive\" />}\n      <p>{description}</p>\n      <Button\n        type=\"button\"\n        variant=\"link\"\n        isInline\n        onClick={() => loadSampleYaml(id, yaml, reference)}\n      >\n        <PasteIcon className=\"co-icon-space-r\" />\n        Try it\n      </Button>\n      <Button\n        type=\"button\"\n        variant=\"link\"\n        isInline\n        className=\"pull-right\"\n        onClick={() => downloadSampleYaml(id, yaml, reference)}\n      >\n        <DownloadIcon className=\"co-icon-space-r\" />\n        Download YAML\n      </Button>\n    </li>\n  );\n};\n\nconst lineHeight = 18;\nconst PreviewYAML = ({ maxPreviewLines = 20, yaml }) => {\n  return (\n    <div style={{ paddingTop: 10 }}>\n      <MonacoEditor\n        height={Math.min(yaml.split('\\n').length, maxPreviewLines) * lineHeight}\n        language=\"yaml\"\n        value={yaml}\n        options={{\n          lineHeight,\n          readOnly: true,\n          folding: false,\n          minimap: { enabled: false },\n          scrollBeyondLastLine: false,\n        }}\n      />\n    </div>\n  );\n};\n\nconst ResourceSidebarSnippet: React.FC<any> = ({ snippet, insertSnippetYaml }) => {\n  const [yamlPreviewOpen, setYamlPreviewOpen] = React.useState(false);\n  const toggleYamlPreview = () => setYamlPreviewOpen(!yamlPreviewOpen);\n\n  const { highlightText, title, id, yaml, targetResource, description } = snippet;\n  const reference = referenceFor(targetResource);\n  return (\n    <li className=\"co-resource-sidebar-item\">\n      <h3 className=\"h4\">\n        <span className=\"text-uppercase\">{highlightText}</span> {title}\n      </h3>\n      <p>{description}</p>\n      <Button\n        type=\"button\"\n        variant=\"link\"\n        isInline\n        onClick={() => insertSnippetYaml(id, yaml, reference)}\n      >\n        <PasteIcon className=\"co-icon-space-r\" />\n        Insert Snippet\n      </Button>\n      <Button\n        type=\"button\"\n        className=\"pull-right\"\n        variant=\"link\"\n        isInline\n        onClick={() => toggleYamlPreview()}\n      >\n        {yamlPreviewOpen ? (\n          <>\n            Hide YAML\n            <ChevronDownIcon className=\"co-icon-space-l\" />\n          </>\n        ) : (\n            <>\n              Show YAML\n            <ChevronRightIcon className=\"co-icon-space-l\" />\n            </>\n          )}\n      </Button>\n      {yamlPreviewOpen && <PreviewYAML yaml={yaml} />}\n    </li>\n  );\n};\n\nexport const ResourceSidebarSnippets = ({ snippets, insertSnippetYaml }) => {\n  return (\n    <ul className=\"co-resource-sidebar-list\" style={{ listStyle: 'none', paddingLeft: 0 }}>\n      {_.map(snippets, (snippet) => (\n        <ResourceSidebarSnippet\n          key={snippet.id}\n          snippet={snippet}\n          insertSnippetYaml={insertSnippetYaml}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport const ResourceSidebarSamples: React.FC<ResourceSidebarSamplesProps> = ({\n  samples,\n  loadSampleYaml,\n  downloadSampleYaml,\n}) => {\n  return (\n    <ol className=\"co-resource-sidebar-list\">\n      {_.map(samples, (sample) => (\n        <ResourceSidebarSample\n          key={sample.id}\n          sample={sample}\n          loadSampleYaml={loadSampleYaml}\n          downloadSampleYaml={downloadSampleYaml}\n        />\n      ))}\n    </ol>\n  );\n};\n\ntype Sample = {\n  highlightText?: string;\n  title: string;\n  img?: string;\n  description: string;\n  id: string;\n  yaml?: string;\n  snippet?: boolean;\n  targetResource: {\n    apiVersion: string;\n    kind: string;\n  };\n};\n\ntype LoadSampleYaml = (id: string, yaml: string, kind: string) => void;\n\ntype DownloadSampleYaml = (id: string, yaml: string, kind: string) => void;\n\ntype ResourceSidebarSampleProps = {\n  sample: Sample;\n  loadSampleYaml: LoadSampleYaml;\n  downloadSampleYaml: DownloadSampleYaml;\n};\n\ntype ResourceSidebarSamplesProps = {\n  samples: Sample[];\n  loadSampleYaml: LoadSampleYaml;\n  downloadSampleYaml: DownloadSampleYaml;\n  yamlSamplesList: FirehoseResult;\n  kindObj: K8sKind;\n};\n"]}]}