{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/validations/vm/vm.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/validations/vm/vm.ts","mtime":1616735742430},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { asValidationObject, ValidationErrorType, validateDNS1123SubdomainValue, } from '@console/shared';\nimport { ProvisionSource } from '../../../constants/vm/provision-source';\nimport { validateEntityAlreadyExists } from '../common';\nexport const validateVmLikeEntityName = (value, namespace, vmLikeEntities, { existsErrorMessage, subject } = {\n    existsErrorMessage: undefined,\n    subject: undefined,\n}) => {\n    const dnsValidation = validateDNS1123SubdomainValue(value, { subject });\n    return dnsValidation && dnsValidation.type === ValidationErrorType.Error\n        ? dnsValidation\n        : validateEntityAlreadyExists(value, namespace, vmLikeEntities, {\n            errorMessage: existsErrorMessage,\n            subject,\n        });\n};\nexport const validateUserTemplateProvisionSource = (userTemplate) => {\n    const provisionSourceDetails = ProvisionSource.getProvisionSourceDetails(userTemplate, {\n        convertTemplateDataVolumesToAttachClonedDisk: true,\n    });\n    return provisionSourceDetails.error\n        ? asValidationObject(`Could not select Provision Source. ${provisionSourceDetails.error}`)\n        : null;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/validations/vm/vm.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/utils/validations/vm/vm.ts"],"names":[],"mappings":"AACA,OAAO,EACL,kBAAkB,EAClB,mBAAmB,EAEnB,6BAA6B,GAC9B,MAAM,iBAAiB,CAAC;AACzB,OAAO,EAAE,eAAe,EAAE,MAAM,wCAAwC,CAAC;AACzE,OAAO,EAAE,2BAA2B,EAAE,MAAM,WAAW,CAAC;AAExD,MAAM,CAAC,MAAM,wBAAwB,GAAG,CACtC,KAAa,EACb,SAAiB,EACjB,cAAc,EACd,EAAE,kBAAkB,EAAE,OAAO,KAAsD;IACjF,kBAAkB,EAAE,SAAS;IAC7B,OAAO,EAAE,SAAS;CACnB,EACiB,EAAE;IACpB,MAAM,aAAa,GAAG,6BAA6B,CAAC,KAAK,EAAE,EAAE,OAAO,EAAE,CAAC,CAAC;IACxE,OAAO,aAAa,IAAI,aAAa,CAAC,IAAI,KAAK,mBAAmB,CAAC,KAAK;QACtE,CAAC,CAAC,aAAa;QACf,CAAC,CAAC,2BAA2B,CAAC,KAAK,EAAE,SAAS,EAAE,cAAc,EAAE;YAC5D,YAAY,EAAE,kBAAkB;YAChC,OAAO;SACR,CAAC,CAAC;AACT,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,mCAAmC,GAAG,CACjD,YAA0B,EACR,EAAE;IACpB,MAAM,sBAAsB,GAAG,eAAe,CAAC,yBAAyB,CAAC,YAAY,EAAE;QACrF,4CAA4C,EAAE,IAAI;KACnD,CAAC,CAAC;IAEH,OAAO,sBAAsB,CAAC,KAAK;QACjC,CAAC,CAAC,kBAAkB,CAAC,sCAAsC,sBAAsB,CAAC,KAAK,EAAE,CAAC;QAC1F,CAAC,CAAC,IAAI,CAAC;AACX,CAAC,CAAC","sourcesContent":["import { TemplateKind } from '@console/internal/module/k8s';\nimport {\n  asValidationObject,\n  ValidationErrorType,\n  ValidationObject,\n  validateDNS1123SubdomainValue,\n} from '@console/shared';\nimport { ProvisionSource } from '../../../constants/vm/provision-source';\nimport { validateEntityAlreadyExists } from '../common';\n\nexport const validateVmLikeEntityName = (\n  value: string,\n  namespace: string,\n  vmLikeEntities,\n  { existsErrorMessage, subject }: { existsErrorMessage: string; subject: string } = {\n    existsErrorMessage: undefined,\n    subject: undefined,\n  },\n): ValidationObject => {\n  const dnsValidation = validateDNS1123SubdomainValue(value, { subject });\n  return dnsValidation && dnsValidation.type === ValidationErrorType.Error\n    ? dnsValidation\n    : validateEntityAlreadyExists(value, namespace, vmLikeEntities, {\n        errorMessage: existsErrorMessage,\n        subject,\n      });\n};\n\nexport const validateUserTemplateProvisionSource = (\n  userTemplate: TemplateKind,\n): ValidationObject => {\n  const provisionSourceDetails = ProvisionSource.getProvisionSourceDetails(userTemplate, {\n    convertTemplateDataVolumesToAttachClonedDisk: true,\n  });\n\n  return provisionSourceDetails.error\n    ? asValidationObject(`Could not select Provision Source. ${provisionSourceDetails.error}`)\n    : null;\n};\n"]}]}