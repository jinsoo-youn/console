{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/statuses/pod/pod.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/statuses/pod/pod.ts","mtime":1615298458670},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { isPodSchedulable, getPodStatusPhase, findPodFalseStatusConditionMessage, } from '../../selectors/pod/selectors';\nimport { getContainerStatusReason, findFailingContainerStatus, } from '../../selectors/pod/container';\nimport { POD_STATUS_NOT_SCHEDULABLE, POD_STATUS_CONTAINER_FAILING, POD_STATUS_NOT_READY, POD_STATUS_FAILED, POD_STATUS_CRASHLOOP_BACKOFF, POD_STATUS_PENDING, POD_STATUS_UNKNOWN, POD_STATUS_COMPLETED, POD_STATUS_RUNNING, POD_STATUS_SUCCEEDED, } from './constants';\nconst errorStatusMapper = {\n    Failed: POD_STATUS_FAILED,\n    CrashLoopBackOff: POD_STATUS_CRASHLOOP_BACKOFF,\n    Unknown: POD_STATUS_UNKNOWN,\n};\nconst okStatusMapper = {\n    Pending: POD_STATUS_PENDING,\n    Running: POD_STATUS_RUNNING,\n    Completed: POD_STATUS_COMPLETED,\n    Succeeded: POD_STATUS_SUCCEEDED,\n};\nconst isNotSchedulable = (pod) => {\n    if (!isPodSchedulable(pod)) {\n        return {\n            status: POD_STATUS_NOT_SCHEDULABLE,\n            message: 'Pod scheduling failed.',\n        };\n    }\n    return null;\n};\nconst hasErrorStatus = (pod) => {\n    const status = errorStatusMapper[getPodStatusPhase(pod)];\n    if (status) {\n        return {\n            status,\n            message: getContainerStatusReason(findFailingContainerStatus(pod)),\n        };\n    }\n    return null;\n};\nconst isContainerFailing = (pod) => {\n    const failingContainer = findFailingContainerStatus(pod);\n    if (failingContainer) {\n        return {\n            status: POD_STATUS_CONTAINER_FAILING,\n            message: getContainerStatusReason(failingContainer),\n        };\n    }\n    return null;\n};\nconst isNotReady = (pod) => {\n    const message = findPodFalseStatusConditionMessage(pod);\n    if (message) {\n        return {\n            status: POD_STATUS_NOT_READY,\n            message,\n        };\n    }\n    return null;\n};\nconst hasOkStatus = (pod) => {\n    const status = okStatusMapper[getPodStatusPhase(pod)];\n    if (status) {\n        return {\n            status,\n        };\n    }\n    return null;\n};\nexport const getPodStatus = (pod) => isNotSchedulable(pod) ||\n    hasErrorStatus(pod) ||\n    isContainerFailing(pod) ||\n    isNotReady(pod) ||\n    hasOkStatus(pod) || { status: POD_STATUS_UNKNOWN };\nexport const getSimplePodStatus = (pod) => getPodStatus(pod).status;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/statuses/pod/pod.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/statuses/pod/pod.ts"],"names":[],"mappings":"AACA,OAAO,EACL,gBAAgB,EAChB,iBAAiB,EACjB,kCAAkC,GACnC,MAAM,+BAA+B,CAAC;AACvC,OAAO,EACL,wBAAwB,EACxB,0BAA0B,GAC3B,MAAM,+BAA+B,CAAC;AACvC,OAAO,EACL,0BAA0B,EAC1B,4BAA4B,EAC5B,oBAAoB,EACpB,iBAAiB,EACjB,4BAA4B,EAC5B,kBAAkB,EAClB,kBAAkB,EAClB,oBAAoB,EACpB,kBAAkB,EAClB,oBAAoB,GACrB,MAAM,aAAa,CAAC;AAGrB,MAAM,iBAAiB,GAAG;IACxB,MAAM,EAAE,iBAAiB;IACzB,gBAAgB,EAAE,4BAA4B;IAC9C,OAAO,EAAE,kBAAkB;CAC5B,CAAC;AAEF,MAAM,cAAc,GAAG;IACrB,OAAO,EAAE,kBAAkB;IAC3B,OAAO,EAAE,kBAAkB;IAC3B,SAAS,EAAE,oBAAoB;IAC/B,SAAS,EAAE,oBAAoB;CAChC,CAAC;AAEF,MAAM,gBAAgB,GAAG,CAAC,GAAY,EAAU,EAAE;IAChD,IAAI,CAAC,gBAAgB,CAAC,GAAG,CAAC,EAAE;QAC1B,OAAO;YACL,MAAM,EAAE,0BAA0B;YAClC,OAAO,EAAE,wBAAwB;SAClC,CAAC;KACH;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,cAAc,GAAG,CAAC,GAAY,EAAU,EAAE;IAC9C,MAAM,MAAM,GAAG,iBAAiB,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,CAAC;IAEzD,IAAI,MAAM,EAAE;QACV,OAAO;YACL,MAAM;YACN,OAAO,EAAE,wBAAwB,CAAC,0BAA0B,CAAC,GAAG,CAAC,CAAC;SACnE,CAAC;KACH;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,kBAAkB,GAAG,CAAC,GAAY,EAAU,EAAE;IAClD,MAAM,gBAAgB,GAAG,0BAA0B,CAAC,GAAG,CAAC,CAAC;IACzD,IAAI,gBAAgB,EAAE;QACpB,OAAO;YACL,MAAM,EAAE,4BAA4B;YACpC,OAAO,EAAE,wBAAwB,CAAC,gBAAgB,CAAC;SACpD,CAAC;KACH;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AACF,MAAM,UAAU,GAAG,CAAC,GAAY,EAAU,EAAE;IAC1C,MAAM,OAAO,GAAG,kCAAkC,CAAC,GAAG,CAAC,CAAC;IACxD,IAAI,OAAO,EAAE;QACX,OAAO;YACL,MAAM,EAAE,oBAAoB;YAC5B,OAAO;SACR,CAAC;KACH;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,WAAW,GAAG,CAAC,GAAY,EAAU,EAAE;IAC3C,MAAM,MAAM,GAAG,cAAc,CAAC,iBAAiB,CAAC,GAAG,CAAC,CAAC,CAAC;IAEtD,IAAI,MAAM,EAAE;QACV,OAAO;YACL,MAAM;SACP,CAAC;KACH;IACD,OAAO,IAAI,CAAC;AACd,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,YAAY,GAAG,CAAC,GAAY,EAAE,EAAE,CAC3C,gBAAgB,CAAC,GAAG,CAAC;IACrB,cAAc,CAAC,GAAG,CAAC;IACnB,kBAAkB,CAAC,GAAG,CAAC;IACvB,UAAU,CAAC,GAAG,CAAC;IACf,WAAW,CAAC,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,kBAAkB,EAAE,CAAC;AAErD,MAAM,CAAC,MAAM,kBAAkB,GAAG,CAAC,GAAY,EAAE,EAAE,CAAC,YAAY,CAAC,GAAG,CAAC,CAAC,MAAM,CAAC","sourcesContent":["import { PodKind } from '@console/internal/module/k8s';\nimport {\n  isPodSchedulable,\n  getPodStatusPhase,\n  findPodFalseStatusConditionMessage,\n} from '../../selectors/pod/selectors';\nimport {\n  getContainerStatusReason,\n  findFailingContainerStatus,\n} from '../../selectors/pod/container';\nimport {\n  POD_STATUS_NOT_SCHEDULABLE,\n  POD_STATUS_CONTAINER_FAILING,\n  POD_STATUS_NOT_READY,\n  POD_STATUS_FAILED,\n  POD_STATUS_CRASHLOOP_BACKOFF,\n  POD_STATUS_PENDING,\n  POD_STATUS_UNKNOWN,\n  POD_STATUS_COMPLETED,\n  POD_STATUS_RUNNING,\n  POD_STATUS_SUCCEEDED,\n} from './constants';\nimport { Status } from '..';\n\nconst errorStatusMapper = {\n  Failed: POD_STATUS_FAILED,\n  CrashLoopBackOff: POD_STATUS_CRASHLOOP_BACKOFF,\n  Unknown: POD_STATUS_UNKNOWN,\n};\n\nconst okStatusMapper = {\n  Pending: POD_STATUS_PENDING,\n  Running: POD_STATUS_RUNNING,\n  Completed: POD_STATUS_COMPLETED,\n  Succeeded: POD_STATUS_SUCCEEDED,\n};\n\nconst isNotSchedulable = (pod: PodKind): Status => {\n  if (!isPodSchedulable(pod)) {\n    return {\n      status: POD_STATUS_NOT_SCHEDULABLE,\n      message: 'Pod scheduling failed.',\n    };\n  }\n  return null;\n};\n\nconst hasErrorStatus = (pod: PodKind): Status => {\n  const status = errorStatusMapper[getPodStatusPhase(pod)];\n\n  if (status) {\n    return {\n      status,\n      message: getContainerStatusReason(findFailingContainerStatus(pod)),\n    };\n  }\n  return null;\n};\n\nconst isContainerFailing = (pod: PodKind): Status => {\n  const failingContainer = findFailingContainerStatus(pod);\n  if (failingContainer) {\n    return {\n      status: POD_STATUS_CONTAINER_FAILING,\n      message: getContainerStatusReason(failingContainer),\n    };\n  }\n  return null;\n};\nconst isNotReady = (pod: PodKind): Status => {\n  const message = findPodFalseStatusConditionMessage(pod);\n  if (message) {\n    return {\n      status: POD_STATUS_NOT_READY,\n      message,\n    };\n  }\n  return null;\n};\n\nconst hasOkStatus = (pod: PodKind): Status => {\n  const status = okStatusMapper[getPodStatusPhase(pod)];\n\n  if (status) {\n    return {\n      status,\n    };\n  }\n  return null;\n};\n\nexport const getPodStatus = (pod: PodKind) =>\n  isNotSchedulable(pod) ||\n  hasErrorStatus(pod) ||\n  isContainerFailing(pod) ||\n  isNotReady(pod) ||\n  hasOkStatus(pod) || { status: POD_STATUS_UNKNOWN };\n\nexport const getSimplePodStatus = (pod: PodKind) => getPodStatus(pod).status;\n"]}]}