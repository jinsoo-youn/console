{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/components/GraphComponent.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/components/GraphComponent.tsx","mtime":1615298458710},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { observer } from 'mobx-react';\nimport LayersProvider from './layers/LayersProvider';\nimport ElementWrapper from './ElementWrapper';\n// This inner Component will prevent the re-rendering of all children when the transform changes\nconst ElementChildren = observer(({ element }) => {\n    return (React.createElement(React.Fragment, null,\n        element.getEdges().map((e) => (React.createElement(ElementWrapper, { key: e.getId(), element: e }))),\n        element.getNodes().map((e) => (React.createElement(ElementWrapper, { key: e.getId(), element: e })))));\n});\n// This inner Component will prevent re-rendering layers when the transform changes\nconst Inner = React.memo(observer(({ element }) => (React.createElement(LayersProvider, { layers: element.getLayers() },\n    React.createElement(ElementChildren, { element: element })))));\nconst GraphComponent = ({ element, panZoomRef, dndDropRef, onSelect, onContextMenu, }) => {\n    const layout = element.getLayout();\n    React.useEffect(() => {\n        element.layout();\n        // Only re-run if the layout changes\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n    }, [layout]);\n    const { x, y, width, height } = element.getBounds();\n    return (React.createElement(React.Fragment, null,\n        React.createElement(\"rect\", { ref: dndDropRef, x: 0, y: 0, width: width, height: height, fillOpacity: 0, onClick: onSelect, onContextMenu: onContextMenu }),\n        React.createElement(\"g\", { \"data-surface\": \"true\", ref: panZoomRef, transform: `translate(${x}, ${y}) scale(${element.getScale()})` },\n            React.createElement(Inner, { element: element }))));\n};\nexport default observer(GraphComponent);\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/components/GraphComponent.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/components/GraphComponent.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,QAAQ,EAAE,MAAM,YAAY,CAAC;AAMtC,OAAO,cAAc,MAAM,yBAAyB,CAAC;AACrD,OAAO,cAAc,MAAM,kBAAkB,CAAC;AAY9C,gGAAgG;AAChG,MAAM,eAAe,GAA2B,QAAQ,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE;IACvE,OAAO,CACL;QACG,OAAO,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAC7B,oBAAC,cAAc,IAAC,GAAG,EAAE,CAAC,CAAC,KAAK,EAAE,EAAE,OAAO,EAAE,CAAC,GAAI,CAC/C,CAAC;QACD,OAAO,CAAC,QAAQ,EAAE,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAC7B,oBAAC,cAAc,IAAC,GAAG,EAAE,CAAC,CAAC,KAAK,EAAE,EAAE,OAAO,EAAE,CAAC,GAAI,CAC/C,CAAC,CACD,CACJ,CAAC;AACJ,CAAC,CAAC,CAAC;AAEH,mFAAmF;AACnF,MAAM,KAAK,GAA2B,KAAK,CAAC,IAAI,CAC9C,QAAQ,CAAC,CAAC,EAAE,OAAO,EAAE,EAAE,EAAE,CAAC,CACxB,oBAAC,cAAc,IAAC,MAAM,EAAE,OAAO,CAAC,SAAS,EAAE;IACzC,oBAAC,eAAe,IAAC,OAAO,EAAE,OAAO,GAAI,CACtB,CAClB,CAAC,CACH,CAAC;AAEF,MAAM,cAAc,GAAkC,CAAC,EACrD,OAAO,EACP,UAAU,EACV,UAAU,EACV,QAAQ,EACR,aAAa,GACd,EAAE,EAAE;IACH,MAAM,MAAM,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC;IACnC,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE;QACnB,OAAO,CAAC,MAAM,EAAE,CAAC;QACjB,oCAAoC;QACpC,uDAAuD;IACzD,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;IAEb,MAAM,EAAE,CAAC,EAAE,CAAC,EAAE,KAAK,EAAE,MAAM,EAAE,GAAG,OAAO,CAAC,SAAS,EAAE,CAAC;IACpD,OAAO,CACL;QACE,8BACE,GAAG,EAAE,UAAU,EACf,CAAC,EAAE,CAAC,EACJ,CAAC,EAAE,CAAC,EACJ,KAAK,EAAE,KAAK,EACZ,MAAM,EAAE,MAAM,EACd,WAAW,EAAE,CAAC,EACd,OAAO,EAAE,QAAQ,EACjB,aAAa,EAAE,aAAa,GAC5B;QACF,2CACe,MAAM,EACnB,GAAG,EAAE,UAAU,EACf,SAAS,EAAE,aAAa,CAAC,KAAK,CAAC,WAAW,OAAO,CAAC,QAAQ,EAAE,GAAG;YAE/D,oBAAC,KAAK,IAAC,OAAO,EAAE,OAAO,GAAI,CACzB,CACH,CACJ,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,QAAQ,CAAC,cAAc,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { observer } from 'mobx-react';\nimport { Graph } from '../types';\nimport { WithPanZoomProps } from '../behavior/usePanZoom';\nimport { WithDndDropProps } from '../behavior/useDndDrop';\nimport { WithSelectionProps } from '../behavior/useSelection';\nimport { WithContextMenuProps } from '../behavior/withContextMenu';\nimport LayersProvider from './layers/LayersProvider';\nimport ElementWrapper from './ElementWrapper';\n\ntype ElementProps = {\n  element: Graph;\n};\n\ntype GraphComponentProps = ElementProps &\n  WithPanZoomProps &\n  WithDndDropProps &\n  WithSelectionProps &\n  WithContextMenuProps;\n\n// This inner Component will prevent the re-rendering of all children when the transform changes\nconst ElementChildren: React.FC<ElementProps> = observer(({ element }) => {\n  return (\n    <>\n      {element.getEdges().map((e) => (\n        <ElementWrapper key={e.getId()} element={e} />\n      ))}\n      {element.getNodes().map((e) => (\n        <ElementWrapper key={e.getId()} element={e} />\n      ))}\n    </>\n  );\n});\n\n// This inner Component will prevent re-rendering layers when the transform changes\nconst Inner: React.FC<ElementProps> = React.memo(\n  observer(({ element }) => (\n    <LayersProvider layers={element.getLayers()}>\n      <ElementChildren element={element} />\n    </LayersProvider>\n  )),\n);\n\nconst GraphComponent: React.FC<GraphComponentProps> = ({\n  element,\n  panZoomRef,\n  dndDropRef,\n  onSelect,\n  onContextMenu,\n}) => {\n  const layout = element.getLayout();\n  React.useEffect(() => {\n    element.layout();\n    // Only re-run if the layout changes\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [layout]);\n\n  const { x, y, width, height } = element.getBounds();\n  return (\n    <>\n      <rect\n        ref={dndDropRef}\n        x={0}\n        y={0}\n        width={width}\n        height={height}\n        fillOpacity={0}\n        onClick={onSelect}\n        onContextMenu={onContextMenu}\n      />\n      <g\n        data-surface=\"true\"\n        ref={panZoomRef}\n        transform={`translate(${x}, ${y}) scale(${element.getScale()})`}\n      >\n        <Inner element={element} />\n      </g>\n    </>\n  );\n};\n\nexport default observer(GraphComponent);\n"]}]}