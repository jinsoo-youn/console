{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/layouts/ForceSimulation.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/layouts/ForceSimulation.ts","mtime":1616735742460},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as d3 from 'd3';\nimport { action } from 'mobx';\nclass ForceSimulation {\n    constructor(options) {\n        this.destroyed = false;\n        this.options = Object.assign({\n            collideDistance: 0,\n            simulationSpeed: 10,\n            chargeStrength: 0,\n        }, options);\n        this.setupForceSimulation();\n    }\n    setupForceSimulation() {\n        this.simulation = d3.forceSimulation();\n        this.simulation.force('collide', d3\n            .forceCollide()\n            .radius((d) => d.collisionRadius + this.options.collideDistance));\n        this.simulation.force('charge', d3.forceManyBody().strength(this.options.chargeStrength));\n        this.simulation.alpha(0);\n        this.forceLink = d3\n            .forceLink()\n            .id((e) => e.id);\n        this.simulation.force('link', this.forceLink);\n        this.simulation.on('tick', action(() => {\n            // speed up the simulation\n            for (let i = 0; i < this.options.simulationSpeed; i++) {\n                this.simulation.tick();\n            }\n            this.simulation.nodes().forEach((d) => !this.destroyed && d.update());\n        }));\n    }\n    destroy() {\n        this.destroyed = true;\n        this.simulation.stop();\n    }\n    useForceSimulation(nodes, links, distance) {\n        this.forceLink.distance(distance);\n        // first remove the links so that the layout doesn't error\n        this.forceLink.links([]);\n        this.simulation.nodes([...nodes]);\n        this.forceLink.links([...links]);\n    }\n    haltForceSimulation() {\n        this.simulation.alpha(0);\n        this.simulation.nodes([]);\n        this.forceLink.links([]);\n    }\n    forceCenter(cx, cy) {\n        this.simulation.force('center', d3.forceCenter(cx, cy));\n    }\n    stopSimulation() {\n        this.simulation.stop();\n    }\n    restart() {\n        this.simulation.restart();\n    }\n    alpha(value) {\n        this.simulation.alpha(value);\n    }\n    alphaTarget(value) {\n        this.simulation.alphaTarget(value);\n    }\n}\nexport { ForceSimulation };\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/layouts/ForceSimulation.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/layouts/ForceSimulation.ts"],"names":[],"mappings":"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","sourcesContent":["import * as d3 from 'd3';\nimport { action } from 'mobx';\n\nexport interface ForceSimulationNode extends d3.SimulationNodeDatum {\n  id: string;\n  collisionRadius: number;\n  update(): void;\n}\n\ntype ForceSimulationOptions = {\n  collideDistance: number;\n  simulationSpeed: number;\n  chargeStrength: number;\n};\n\nclass ForceSimulation {\n  private forceLink: d3.ForceLink<ForceSimulationNode, d3.SimulationLinkDatum<ForceSimulationNode>>;\n\n  private simulation: any;\n\n  private options: ForceSimulationOptions;\n\n  private destroyed = false;\n\n  constructor(options?: Partial<ForceSimulationOptions>) {\n    this.options = {\n      ...{\n        collideDistance: 0,\n        simulationSpeed: 10,\n        chargeStrength: 0,\n      },\n      ...options,\n    };\n\n    this.setupForceSimulation();\n  }\n\n  private setupForceSimulation(): void {\n    this.simulation = d3.forceSimulation<ForceSimulationNode>();\n    this.simulation.force(\n      'collide',\n      d3\n        .forceCollide<ForceSimulationNode>()\n        .radius((d) => d.collisionRadius + this.options.collideDistance),\n    );\n    this.simulation.force('charge', d3.forceManyBody().strength(this.options.chargeStrength));\n    this.simulation.alpha(0);\n    this.forceLink = d3\n      .forceLink<ForceSimulationNode, d3.SimulationLinkDatum<ForceSimulationNode>>()\n      .id((e) => e.id);\n\n    this.simulation.force('link', this.forceLink);\n    this.simulation.on(\n      'tick',\n      action(() => {\n        // speed up the simulation\n        for (let i = 0; i < this.options.simulationSpeed; i++) {\n          this.simulation.tick();\n        }\n        this.simulation.nodes().forEach((d: ForceSimulationNode) => !this.destroyed && d.update());\n      }),\n    );\n  }\n\n  public destroy(): void {\n    this.destroyed = true;\n    this.simulation.stop();\n  }\n\n  public useForceSimulation(\n    nodes: ForceSimulationNode[],\n    links: d3.SimulationLinkDatum<ForceSimulationNode>[],\n    distance: (\n      link: d3.SimulationLinkDatum<ForceSimulationNode>,\n      i: number,\n      links: d3.SimulationLinkDatum<ForceSimulationNode>[],\n    ) => number,\n  ): void {\n    this.forceLink.distance(distance);\n\n    // first remove the links so that the layout doesn't error\n    this.forceLink.links([]);\n\n    this.simulation.nodes([...nodes]);\n    this.forceLink.links([...links]);\n  }\n\n  public haltForceSimulation(): void {\n    this.simulation.alpha(0);\n    this.simulation.nodes([]);\n    this.forceLink.links([]);\n  }\n\n  public forceCenter(cx: number, cy: number): void {\n    this.simulation.force('center', d3.forceCenter(cx, cy));\n  }\n\n  public stopSimulation(): void {\n    this.simulation.stop();\n  }\n\n  public restart() {\n    this.simulation.restart();\n  }\n\n  public alpha(value: number) {\n    this.simulation.alpha(value);\n  }\n\n  public alphaTarget(value: number) {\n    this.simulation.alphaTarget(value);\n  }\n}\n\nexport { ForceSimulation };\n"]}]}