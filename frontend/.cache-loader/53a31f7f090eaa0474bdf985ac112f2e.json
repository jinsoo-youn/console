{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/edit-application/edit-application-utils.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/edit-application/edit-application-utils.ts","mtime":1615298458610},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { referenceFor, referenceForModel, ImagePullPolicy, } from '@console/internal/module/k8s';\nimport { BuildStrategyType } from '@console/internal/components/build';\nimport { DeploymentConfigModel, DeploymentModel } from '@console/internal/models';\nimport { ServiceModel } from '@console/knative-plugin';\nimport { UNASSIGNED_KEY } from '../../const';\nimport { Resources, GitReadableTypes } from '../import/import-types';\nimport { RegistryType } from '../../utils/imagestream-utils';\nimport { getHealthChecksData } from '../health-checks/create-health-checks-probe-utils';\nimport { detectGitType } from '../import/import-validation-utils';\nexport var CreateApplicationFlow;\n(function (CreateApplicationFlow) {\n    CreateApplicationFlow[\"Git\"] = \"Import from Git\";\n    CreateApplicationFlow[\"Dockerfile\"] = \"Import from Dockerfile\";\n    CreateApplicationFlow[\"Container\"] = \"Deploy Image\";\n})(CreateApplicationFlow || (CreateApplicationFlow = {}));\nexport const getResourcesType = (resource) => {\n    switch (resource.kind) {\n        case DeploymentConfigModel.kind:\n            return Resources.OpenShift;\n        case DeploymentModel.kind:\n            return Resources.Kubernetes;\n        case referenceFor(resource) === referenceForModel(ServiceModel) ? ServiceModel.kind : '':\n            return Resources.KnativeService;\n        default:\n            return null;\n    }\n};\nexport const getPageHeading = (buildStrategy) => {\n    switch (buildStrategy) {\n        case BuildStrategyType.Source:\n            return CreateApplicationFlow.Git;\n        case BuildStrategyType.Docker:\n            return CreateApplicationFlow.Dockerfile;\n        default:\n            return CreateApplicationFlow.Container;\n    }\n};\nconst checkIfTriggerExists = (triggers, type, resourceKind) => {\n    return !!_.find(triggers, (trigger) => {\n        var _a;\n        if (resourceKind === DeploymentConfigModel.kind && type === 'ImageChange') {\n            return trigger.type === type && ((_a = trigger.imageChangeParams) === null || _a === void 0 ? void 0 : _a.automatic);\n        }\n        return trigger.type === type;\n    });\n};\nexport const getGitData = (buildConfig) => {\n    var _a, _b, _c, _d;\n    const url = (_d = (_c = (_b = (_a = buildConfig === null || buildConfig === void 0 ? void 0 : buildConfig.spec) === null || _a === void 0 ? void 0 : _a.source) === null || _b === void 0 ? void 0 : _b.git) === null || _c === void 0 ? void 0 : _c.uri) !== null && _d !== void 0 ? _d : '';\n    const gitData = {\n        url,\n        type: detectGitType(url),\n        ref: _.get(buildConfig, 'spec.source.git.ref', ''),\n        dir: _.get(buildConfig, 'spec.source.contextDir', ''),\n        showGitType: false,\n        secret: _.get(buildConfig, 'spec.source.sourceSecret.name', ''),\n        isUrlValidating: false,\n    };\n    return gitData;\n};\nexport const getRouteData = (route, resource) => {\n    let routeData = {\n        disable: !_.isEmpty(route),\n        create: true,\n        targetPort: _.get(route, 'spec.port.targetPort', ''),\n        unknownTargetPort: '',\n        defaultUnknownPort: 8080,\n        path: _.get(route, 'spec.path', ''),\n        hostname: _.get(route, 'spec.host', ''),\n        secure: _.has(route, 'spec.termination'),\n        tls: {\n            termination: _.get(route, 'spec.termination', ''),\n            insecureEdgeTerminationPolicy: _.get(route, 'spec.insecureEdgeTerminationPolicy', ''),\n            caCertificate: _.get(route, 'spec.caCertificate', ''),\n            certificate: _.get(route, 'spec.certificate', ''),\n            destinationCACertificate: _.get(route, 'spec.destinationCACertificate', ''),\n            privateKey: _.get(route, 'spec.privateKey', ''),\n        },\n    };\n    if (getResourcesType(resource) === Resources.KnativeService) {\n        const containers = _.get(resource, 'spec.template.spec.containers', []);\n        const port = _.get(containers[0], 'ports[0].containerPort', '');\n        routeData = Object.assign(Object.assign({}, routeData), { disable: _.get(resource, 'metadata.labels[\"serving.knative.dev/visibility\"]', '') !==\n                'cluster-local', unknownTargetPort: _.toString(port), targetPort: _.toString(port) });\n    }\n    return routeData;\n};\nexport const getBuildData = (buildConfig, gitType) => {\n    const buildStrategyType = _.get(buildConfig, 'spec.strategy.type', '');\n    let buildStrategyData;\n    switch (buildStrategyType) {\n        case BuildStrategyType.Source:\n            buildStrategyData = _.get(buildConfig, 'spec.strategy.sourceStrategy');\n            break;\n        case BuildStrategyType.Docker:\n            buildStrategyData = _.get(buildConfig, 'spec.strategy.dockerStrategy');\n            break;\n        default:\n            buildStrategyData = { env: [] };\n    }\n    const triggers = _.get(buildConfig, 'spec.triggers');\n    const buildData = {\n        env: buildStrategyData.env || [],\n        triggers: {\n            webhook: checkIfTriggerExists(triggers, GitReadableTypes[gitType]),\n            image: checkIfTriggerExists(triggers, 'ImageChange'),\n            config: checkIfTriggerExists(triggers, 'ConfigChange'),\n        },\n        strategy: buildStrategyType,\n    };\n    return buildData;\n};\nexport const getServerlessData = (resource) => {\n    let serverlessData = {\n        scaling: {\n            minpods: 0,\n            maxpods: '',\n            concurrencytarget: '',\n            concurrencylimit: '',\n        },\n    };\n    if (getResourcesType(resource) === Resources.KnativeService) {\n        const annotations = _.get(resource, 'spec.template.metadata.annotations');\n        serverlessData = {\n            scaling: {\n                minpods: _.get(annotations, 'autoscaling.knative.dev/minScale', 0),\n                maxpods: _.get(annotations, 'autoscaling.knative.dev/maxScale', ''),\n                concurrencytarget: _.get(annotations, 'autoscaling.knative.dev/target', ''),\n                concurrencylimit: _.get(resource, 'spec.template.spec.containerConcurrency', ''),\n            },\n        };\n    }\n    return serverlessData;\n};\nexport const getDeploymentData = (resource) => {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m, _o, _p;\n    const deploymentData = {\n        env: [],\n        replicas: 1,\n        triggers: { image: true, config: true },\n    };\n    const container = (_d = (_c = (_b = (_a = resource.spec) === null || _a === void 0 ? void 0 : _a.template) === null || _b === void 0 ? void 0 : _b.spec) === null || _c === void 0 ? void 0 : _c.containers) === null || _d === void 0 ? void 0 : _d[0];\n    const env = (_e = container === null || container === void 0 ? void 0 : container.env) !== null && _e !== void 0 ? _e : [];\n    switch (getResourcesType(resource)) {\n        case Resources.KnativeService:\n            return Object.assign(Object.assign({}, deploymentData), { env, triggers: {\n                    image: (container === null || container === void 0 ? void 0 : container.imagePullPolicy) === ImagePullPolicy.Always,\n                } });\n        case Resources.OpenShift: {\n            const triggers = (_f = resource.spec) === null || _f === void 0 ? void 0 : _f.triggers;\n            return {\n                env,\n                triggers: {\n                    image: checkIfTriggerExists(triggers, 'ImageChange', resource.kind),\n                    config: checkIfTriggerExists(triggers, 'ConfigChange'),\n                },\n                replicas: (_h = (_g = resource.spec) === null || _g === void 0 ? void 0 : _g.replicas) !== null && _h !== void 0 ? _h : 1,\n            };\n        }\n        case Resources.Kubernetes: {\n            const imageTrigger = (_m = JSON.parse((_l = (_k = (_j = resource.metadata) === null || _j === void 0 ? void 0 : _j.annotations) === null || _k === void 0 ? void 0 : _k['image.openshift.io/triggers']) !== null && _l !== void 0 ? _l : '[]')) === null || _m === void 0 ? void 0 : _m[0];\n            return {\n                env,\n                triggers: {\n                    image: (imageTrigger === null || imageTrigger === void 0 ? void 0 : imageTrigger.pause) === 'false',\n                },\n                replicas: (_p = (_o = resource.spec) === null || _o === void 0 ? void 0 : _o.replicas) !== null && _p !== void 0 ? _p : 1,\n            };\n        }\n        default:\n            return deploymentData;\n    }\n};\nexport const getLimitsData = (resource) => {\n    const containers = _.get(resource, 'spec.template.spec.containers', []);\n    const resourcesRegEx = /^[0-9]*|[a-zA-Z]*/g;\n    const cpuLimit = _.get(containers[0], 'resources.limits.cpu', '').match(resourcesRegEx);\n    const memoryLimit = _.get(containers[0], 'resources.limits.memory', '').match(resourcesRegEx);\n    const cpuRequest = _.get(containers[0], 'resources.requests.cpu', '').match(resourcesRegEx);\n    const memoryRequest = _.get(containers[0], 'resources.requests.memory', '').match(resourcesRegEx);\n    const limitsData = {\n        cpu: {\n            request: cpuRequest[0],\n            requestUnit: cpuRequest[1] || '',\n            defaultRequestUnit: cpuRequest[1] || '',\n            limit: cpuLimit[0],\n            limitUnit: cpuLimit[1] || '',\n            defaultLimitUnit: cpuLimit[1] || '',\n        },\n        memory: {\n            request: memoryRequest[0],\n            requestUnit: memoryRequest[1] || 'Mi',\n            defaultRequestUnit: memoryRequest[1] || 'Mi',\n            limit: memoryLimit[0],\n            limitUnit: memoryLimit[1] || 'Mi',\n            defaultLimitUnit: memoryLimit[1] || 'Mi',\n        },\n    };\n    return limitsData;\n};\nexport const getUserLabels = (resource) => {\n    const defaultLabels = [\n        'app',\n        'app.kubernetes.io/instance',\n        'app.kubernetes.io/component',\n        'app.kubernetes.io/name',\n        'app.openshift.io/runtime',\n        'app.kubernetes.io/part-of',\n        'app.openshift.io/runtime-version',\n        'app.openshift.io/runtime-namespace',\n    ];\n    const allLabels = _.get(resource, 'metadata.labels', {});\n    const userLabels = _.omit(allLabels, defaultLabels);\n    return userLabels;\n};\nexport const getCommonInitialValues = (editAppResource, route, name, namespace) => {\n    const appGroupName = _.get(editAppResource, 'metadata.labels[\"app.kubernetes.io/part-of\"]');\n    const commonInitialValues = {\n        formType: 'edit',\n        name,\n        application: {\n            name: appGroupName || '',\n            selectedKey: appGroupName || UNASSIGNED_KEY,\n        },\n        project: {\n            name: namespace,\n        },\n        route: getRouteData(route, editAppResource),\n        resources: getResourcesType(editAppResource),\n        serverless: getServerlessData(editAppResource),\n        pipeline: {\n            enabled: false,\n        },\n        deployment: getDeploymentData(editAppResource),\n        labels: getUserLabels(editAppResource),\n        limits: getLimitsData(editAppResource),\n        healthChecks: getHealthChecksData(editAppResource),\n    };\n    return commonInitialValues;\n};\nexport const getGitAndDockerfileInitialValues = (buildConfig, route) => {\n    if (_.isEmpty(buildConfig)) {\n        return {};\n    }\n    const currentImage = _.split(_.get(buildConfig, 'spec.strategy.sourceStrategy.from.name', ''), ':');\n    const git = getGitData(buildConfig);\n    const initialValues = {\n        git,\n        docker: {\n            dockerfilePath: _.get(buildConfig, 'spec.strategy.dockerStrategy.dockerfilePath', 'Dockerfile'),\n            containerPort: parseInt(_.split(_.get(route, 'spec.port.targetPort'), '-')[0], 10),\n        },\n        image: {\n            selected: currentImage[0] || '',\n            recommended: '',\n            tag: currentImage[1] || '',\n            tagObj: {},\n            ports: [],\n            isRecommending: false,\n            couldNotRecommend: false,\n        },\n        build: getBuildData(buildConfig, git.type),\n    };\n    return initialValues;\n};\nconst deployImageInitialValues = {\n    searchTerm: '',\n    registry: 'external',\n    imageStream: {\n        image: '',\n        tag: '',\n        namespace: '',\n    },\n    isi: {\n        name: '',\n        image: {},\n        tag: '',\n        status: { metadata: {}, status: '' },\n        ports: [],\n    },\n    image: {\n        name: '',\n        image: {},\n        tag: '',\n        status: { metadata: {}, status: '' },\n        ports: [],\n    },\n    build: {\n        env: [],\n        triggers: {},\n        strategy: '',\n    },\n    isSearchingForImage: false,\n};\nexport const getExternalImageInitialValues = (appResources) => {\n    var _a, _b, _c, _d, _e, _f;\n    const imageStreamList = (_a = appResources === null || appResources === void 0 ? void 0 : appResources.imageStream) === null || _a === void 0 ? void 0 : _a.data;\n    if (_.isEmpty(imageStreamList)) {\n        return {};\n    }\n    const imageStream = _.orderBy(imageStreamList, ['metadata.resourceVersion'], ['desc']);\n    const name = imageStream.length && ((_f = (_e = (_d = (_c = (_b = imageStream[0]) === null || _b === void 0 ? void 0 : _b.spec) === null || _c === void 0 ? void 0 : _c.tags) === null || _d === void 0 ? void 0 : _d[0]) === null || _e === void 0 ? void 0 : _e.from) === null || _f === void 0 ? void 0 : _f.name);\n    return Object.assign(Object.assign({}, deployImageInitialValues), { searchTerm: name, registry: 'external', imageStream: Object.assign(Object.assign({}, deployImageInitialValues.imageStream), { grantAccess: true }) });\n};\nexport const getInternalImageInitialValues = (editAppResource) => {\n    const imageStreamNamespace = _.get(editAppResource, 'metadata.labels[\"app.openshift.io/runtime-namespace\"]', '');\n    const imageStreamName = _.get(editAppResource, 'metadata.labels[\"app.openshift.io/runtime\"]', '');\n    const imageStreamTag = _.get(editAppResource, 'metadata.labels[\"app.openshift.io/runtime-version\"]', '');\n    return Object.assign(Object.assign({}, deployImageInitialValues), { registry: RegistryType.Internal, imageStream: {\n            image: imageStreamName,\n            tag: imageStreamTag,\n            namespace: imageStreamNamespace,\n        } });\n};\nexport const getExternalImagelValues = (appResource) => {\n    const name = _.get(appResource, 'spec.template.spec.containers[0].image', null);\n    if (_.isEmpty(appResource) || !name) {\n        return {};\n    }\n    return Object.assign(Object.assign({}, deployImageInitialValues), { searchTerm: name, registry: RegistryType.External, imageStream: Object.assign(Object.assign({}, deployImageInitialValues.imageStream), { grantAccess: true }) });\n};\nexport const getInitialValues = (appResources, appName, namespace) => {\n    const commonValues = getCommonInitialValues(_.get(appResources, 'editAppResource.data'), _.get(appResources, 'route.data'), appName, namespace);\n    const gitDockerValues = getGitAndDockerfileInitialValues(_.get(appResources, 'buildConfig.data'), _.get(appResources, 'route.data'));\n    let externalImageValues = {};\n    let internalImageValues = {};\n    if (_.isEmpty(gitDockerValues)) {\n        externalImageValues = getExternalImageInitialValues(appResources);\n        internalImageValues = _.isEmpty(externalImageValues)\n            ? getInternalImageInitialValues(_.get(appResources, 'editAppResource.data'))\n            : {};\n        if (_.isEmpty(externalImageValues) &&\n            !_.get(internalImageValues, 'imageStream.tag') &&\n            !_.get(internalImageValues, 'imageStream.image')) {\n            const editAppResourceData = _.get(appResources, 'editAppResource.data');\n            if ((editAppResourceData === null || editAppResourceData === void 0 ? void 0 : editAppResourceData.kind) === ServiceModel.kind) {\n                internalImageValues = {};\n                externalImageValues = getExternalImagelValues(_.get(appResources, 'editAppResource.data'));\n            }\n        }\n    }\n    return Object.assign(Object.assign(Object.assign(Object.assign({}, commonValues), gitDockerValues), externalImageValues), internalImageValues);\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/edit-application/edit-application-utils.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/edit-application/edit-application-utils.ts"],"names":[],"mappings":"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","sourcesContent":["import * as _ from 'lodash';\nimport {\n  K8sResourceKind,\n  referenceFor,\n  referenceForModel,\n  ImagePullPolicy,\n} from '@console/internal/module/k8s';\nimport { BuildStrategyType } from '@console/internal/components/build';\nimport { DeploymentConfigModel, DeploymentModel } from '@console/internal/models';\nimport { ServiceModel } from '@console/knative-plugin';\nimport { UNASSIGNED_KEY } from '../../const';\nimport { Resources, DeploymentData, GitReadableTypes } from '../import/import-types';\nimport { AppResources } from './edit-application-types';\nimport { RegistryType } from '../../utils/imagestream-utils';\nimport { getHealthChecksData } from '../health-checks/create-health-checks-probe-utils';\nimport { detectGitType } from '../import/import-validation-utils';\n\nexport enum CreateApplicationFlow {\n  Git = 'Import from Git',\n  Dockerfile = 'Import from Dockerfile',\n  Container = 'Deploy Image',\n}\n\nexport const getResourcesType = (resource: K8sResourceKind): Resources => {\n  switch (resource.kind) {\n    case DeploymentConfigModel.kind:\n      return Resources.OpenShift;\n    case DeploymentModel.kind:\n      return Resources.Kubernetes;\n    case referenceFor(resource) === referenceForModel(ServiceModel) ? ServiceModel.kind : '':\n      return Resources.KnativeService;\n    default:\n      return null;\n  }\n};\n\nexport const getPageHeading = (buildStrategy: string): string => {\n  switch (buildStrategy) {\n    case BuildStrategyType.Source:\n      return CreateApplicationFlow.Git;\n    case BuildStrategyType.Docker:\n      return CreateApplicationFlow.Dockerfile;\n    default:\n      return CreateApplicationFlow.Container;\n  }\n};\n\nconst checkIfTriggerExists = (\n  triggers: { [key: string]: any }[],\n  type: string,\n  resourceKind?: string,\n) => {\n  return !!_.find(triggers, (trigger) => {\n    if (resourceKind === DeploymentConfigModel.kind && type === 'ImageChange') {\n      return trigger.type === type && trigger.imageChangeParams?.automatic;\n    }\n    return trigger.type === type;\n  });\n};\n\nexport const getGitData = (buildConfig: K8sResourceKind) => {\n  const url = buildConfig?.spec?.source?.git?.uri ?? '';\n  const gitData = {\n    url,\n    type: detectGitType(url),\n    ref: _.get(buildConfig, 'spec.source.git.ref', ''),\n    dir: _.get(buildConfig, 'spec.source.contextDir', ''),\n    showGitType: false,\n    secret: _.get(buildConfig, 'spec.source.sourceSecret.name', ''),\n    isUrlValidating: false,\n  };\n  return gitData;\n};\n\nexport const getRouteData = (route: K8sResourceKind, resource: K8sResourceKind) => {\n  let routeData = {\n    disable: !_.isEmpty(route),\n    create: true,\n    targetPort: _.get(route, 'spec.port.targetPort', ''),\n    unknownTargetPort: '',\n    defaultUnknownPort: 8080,\n    path: _.get(route, 'spec.path', ''),\n    hostname: _.get(route, 'spec.host', ''),\n    secure: _.has(route, 'spec.termination'),\n    tls: {\n      termination: _.get(route, 'spec.termination', ''),\n      insecureEdgeTerminationPolicy: _.get(route, 'spec.insecureEdgeTerminationPolicy', ''),\n      caCertificate: _.get(route, 'spec.caCertificate', ''),\n      certificate: _.get(route, 'spec.certificate', ''),\n      destinationCACertificate: _.get(route, 'spec.destinationCACertificate', ''),\n      privateKey: _.get(route, 'spec.privateKey', ''),\n    },\n  };\n  if (getResourcesType(resource) === Resources.KnativeService) {\n    const containers = _.get(resource, 'spec.template.spec.containers', []);\n    const port = _.get(containers[0], 'ports[0].containerPort', '');\n    routeData = {\n      ...routeData,\n      disable:\n        _.get(resource, 'metadata.labels[\"serving.knative.dev/visibility\"]', '') !==\n        'cluster-local',\n      unknownTargetPort: _.toString(port),\n      targetPort: _.toString(port),\n    };\n  }\n  return routeData;\n};\n\nexport const getBuildData = (buildConfig: K8sResourceKind, gitType: string) => {\n  const buildStrategyType = _.get(buildConfig, 'spec.strategy.type', '');\n  let buildStrategyData;\n  switch (buildStrategyType) {\n    case BuildStrategyType.Source:\n      buildStrategyData = _.get(buildConfig, 'spec.strategy.sourceStrategy');\n      break;\n    case BuildStrategyType.Docker:\n      buildStrategyData = _.get(buildConfig, 'spec.strategy.dockerStrategy');\n      break;\n    default:\n      buildStrategyData = { env: [] };\n  }\n  const triggers = _.get(buildConfig, 'spec.triggers');\n  const buildData = {\n    env: buildStrategyData.env || [],\n    triggers: {\n      webhook: checkIfTriggerExists(triggers, GitReadableTypes[gitType]),\n      image: checkIfTriggerExists(triggers, 'ImageChange'),\n      config: checkIfTriggerExists(triggers, 'ConfigChange'),\n    },\n    strategy: buildStrategyType,\n  };\n  return buildData;\n};\n\nexport const getServerlessData = (resource: K8sResourceKind) => {\n  let serverlessData = {\n    scaling: {\n      minpods: 0,\n      maxpods: '',\n      concurrencytarget: '',\n      concurrencylimit: '',\n    },\n  };\n  if (getResourcesType(resource) === Resources.KnativeService) {\n    const annotations = _.get(resource, 'spec.template.metadata.annotations');\n    serverlessData = {\n      scaling: {\n        minpods: _.get(annotations, 'autoscaling.knative.dev/minScale', 0),\n        maxpods: _.get(annotations, 'autoscaling.knative.dev/maxScale', ''),\n        concurrencytarget: _.get(annotations, 'autoscaling.knative.dev/target', ''),\n        concurrencylimit: _.get(resource, 'spec.template.spec.containerConcurrency', ''),\n      },\n    };\n  }\n  return serverlessData;\n};\n\nexport const getDeploymentData = (resource: K8sResourceKind) => {\n  const deploymentData: DeploymentData = {\n    env: [],\n    replicas: 1,\n    triggers: { image: true, config: true },\n  };\n  const container = resource.spec?.template?.spec?.containers?.[0];\n  const env = container?.env ?? [];\n  switch (getResourcesType(resource)) {\n    case Resources.KnativeService:\n      return {\n        ...deploymentData,\n        env,\n        triggers: {\n          image: container?.imagePullPolicy === ImagePullPolicy.Always,\n        },\n      };\n    case Resources.OpenShift: {\n      const triggers = resource.spec?.triggers;\n      return {\n        env,\n        triggers: {\n          image: checkIfTriggerExists(triggers, 'ImageChange', resource.kind),\n          config: checkIfTriggerExists(triggers, 'ConfigChange'),\n        },\n        replicas: resource.spec?.replicas ?? 1,\n      };\n    }\n    case Resources.Kubernetes: {\n      const imageTrigger = JSON.parse(\n        resource.metadata?.annotations?.['image.openshift.io/triggers'] ?? '[]',\n      )?.[0];\n      return {\n        env,\n        triggers: {\n          image: imageTrigger?.pause === 'false',\n        },\n        replicas: resource.spec?.replicas ?? 1,\n      };\n    }\n    default:\n      return deploymentData;\n  }\n};\n\nexport const getLimitsData = (resource: K8sResourceKind) => {\n  const containers = _.get(resource, 'spec.template.spec.containers', []);\n  const resourcesRegEx = /^[0-9]*|[a-zA-Z]*/g;\n  const cpuLimit = _.get(containers[0], 'resources.limits.cpu', '').match(resourcesRegEx);\n  const memoryLimit = _.get(containers[0], 'resources.limits.memory', '').match(resourcesRegEx);\n  const cpuRequest = _.get(containers[0], 'resources.requests.cpu', '').match(resourcesRegEx);\n  const memoryRequest = _.get(containers[0], 'resources.requests.memory', '').match(resourcesRegEx);\n  const limitsData = {\n    cpu: {\n      request: cpuRequest[0],\n      requestUnit: cpuRequest[1] || '',\n      defaultRequestUnit: cpuRequest[1] || '',\n      limit: cpuLimit[0],\n      limitUnit: cpuLimit[1] || '',\n      defaultLimitUnit: cpuLimit[1] || '',\n    },\n    memory: {\n      request: memoryRequest[0],\n      requestUnit: memoryRequest[1] || 'Mi',\n      defaultRequestUnit: memoryRequest[1] || 'Mi',\n      limit: memoryLimit[0],\n      limitUnit: memoryLimit[1] || 'Mi',\n      defaultLimitUnit: memoryLimit[1] || 'Mi',\n    },\n  };\n  return limitsData;\n};\n\nexport const getUserLabels = (resource: K8sResourceKind) => {\n  const defaultLabels = [\n    'app',\n    'app.kubernetes.io/instance',\n    'app.kubernetes.io/component',\n    'app.kubernetes.io/name',\n    'app.openshift.io/runtime',\n    'app.kubernetes.io/part-of',\n    'app.openshift.io/runtime-version',\n    'app.openshift.io/runtime-namespace',\n  ];\n  const allLabels = _.get(resource, 'metadata.labels', {});\n  const userLabels = _.omit(allLabels, defaultLabels);\n  return userLabels;\n};\n\nexport const getCommonInitialValues = (\n  editAppResource: K8sResourceKind,\n  route: K8sResourceKind,\n  name: string,\n  namespace: string,\n) => {\n  const appGroupName = _.get(editAppResource, 'metadata.labels[\"app.kubernetes.io/part-of\"]');\n  const commonInitialValues = {\n    formType: 'edit',\n    name,\n    application: {\n      name: appGroupName || '',\n      selectedKey: appGroupName || UNASSIGNED_KEY,\n    },\n    project: {\n      name: namespace,\n    },\n    route: getRouteData(route, editAppResource),\n    resources: getResourcesType(editAppResource),\n    serverless: getServerlessData(editAppResource),\n    pipeline: {\n      enabled: false,\n    },\n    deployment: getDeploymentData(editAppResource),\n    labels: getUserLabels(editAppResource),\n    limits: getLimitsData(editAppResource),\n    healthChecks: getHealthChecksData(editAppResource),\n  };\n  return commonInitialValues;\n};\n\nexport const getGitAndDockerfileInitialValues = (\n  buildConfig: K8sResourceKind,\n  route: K8sResourceKind,\n) => {\n  if (_.isEmpty(buildConfig)) {\n    return {};\n  }\n  const currentImage = _.split(\n    _.get(buildConfig, 'spec.strategy.sourceStrategy.from.name', ''),\n    ':',\n  );\n  const git = getGitData(buildConfig);\n  const initialValues = {\n    git,\n    docker: {\n      dockerfilePath: _.get(\n        buildConfig,\n        'spec.strategy.dockerStrategy.dockerfilePath',\n        'Dockerfile',\n      ),\n      containerPort: parseInt(_.split(_.get(route, 'spec.port.targetPort'), '-')[0], 10),\n    },\n    image: {\n      selected: currentImage[0] || '',\n      recommended: '',\n      tag: currentImage[1] || '',\n      tagObj: {},\n      ports: [],\n      isRecommending: false,\n      couldNotRecommend: false,\n    },\n    build: getBuildData(buildConfig, git.type),\n  };\n  return initialValues;\n};\n\nconst deployImageInitialValues = {\n  searchTerm: '',\n  registry: 'external',\n  imageStream: {\n    image: '',\n    tag: '',\n    namespace: '',\n  },\n  isi: {\n    name: '',\n    image: {},\n    tag: '',\n    status: { metadata: {}, status: '' },\n    ports: [],\n  },\n  image: {\n    name: '',\n    image: {},\n    tag: '',\n    status: { metadata: {}, status: '' },\n    ports: [],\n  },\n  build: {\n    env: [],\n    triggers: {},\n    strategy: '',\n  },\n  isSearchingForImage: false,\n};\n\nexport const getExternalImageInitialValues = (appResources: AppResources) => {\n  const imageStreamList = appResources?.imageStream?.data;\n  if (_.isEmpty(imageStreamList)) {\n    return {};\n  }\n  const imageStream = _.orderBy(imageStreamList, ['metadata.resourceVersion'], ['desc']);\n  const name = imageStream.length && imageStream[0]?.spec?.tags?.[0]?.from?.name;\n  return {\n    ...deployImageInitialValues,\n    searchTerm: name,\n    registry: 'external',\n    imageStream: {\n      ...deployImageInitialValues.imageStream,\n      grantAccess: true,\n    },\n  };\n};\n\nexport const getInternalImageInitialValues = (editAppResource: K8sResourceKind) => {\n  const imageStreamNamespace = _.get(\n    editAppResource,\n    'metadata.labels[\"app.openshift.io/runtime-namespace\"]',\n    '',\n  );\n  const imageStreamName = _.get(editAppResource, 'metadata.labels[\"app.openshift.io/runtime\"]', '');\n  const imageStreamTag = _.get(\n    editAppResource,\n    'metadata.labels[\"app.openshift.io/runtime-version\"]',\n    '',\n  );\n  return {\n    ...deployImageInitialValues,\n    registry: RegistryType.Internal,\n    imageStream: {\n      image: imageStreamName,\n      tag: imageStreamTag,\n      namespace: imageStreamNamespace,\n    },\n  };\n};\n\nexport const getExternalImagelValues = (appResource: K8sResourceKind) => {\n  const name = _.get(appResource, 'spec.template.spec.containers[0].image', null);\n  if (_.isEmpty(appResource) || !name) {\n    return {};\n  }\n  return {\n    ...deployImageInitialValues,\n    searchTerm: name,\n    registry: RegistryType.External,\n    imageStream: {\n      ...deployImageInitialValues.imageStream,\n      grantAccess: true,\n    },\n  };\n};\n\nexport const getInitialValues = (\n  appResources: AppResources,\n  appName: string,\n  namespace: string,\n) => {\n  const commonValues = getCommonInitialValues(\n    _.get(appResources, 'editAppResource.data'),\n    _.get(appResources, 'route.data'),\n    appName,\n    namespace,\n  );\n  const gitDockerValues = getGitAndDockerfileInitialValues(\n    _.get(appResources, 'buildConfig.data'),\n    _.get(appResources, 'route.data'),\n  );\n  let externalImageValues = {};\n  let internalImageValues = {};\n\n  if (_.isEmpty(gitDockerValues)) {\n    externalImageValues = getExternalImageInitialValues(appResources);\n    internalImageValues = _.isEmpty(externalImageValues)\n      ? getInternalImageInitialValues(_.get(appResources, 'editAppResource.data'))\n      : {};\n    if (\n      _.isEmpty(externalImageValues) &&\n      !_.get(internalImageValues, 'imageStream.tag') &&\n      !_.get(internalImageValues, 'imageStream.image')\n    ) {\n      const editAppResourceData = _.get(appResources, 'editAppResource.data');\n      if (editAppResourceData?.kind === ServiceModel.kind) {\n        internalImageValues = {};\n        externalImageValues = getExternalImagelValues(_.get(appResources, 'editAppResource.data'));\n      }\n    }\n  }\n\n  return {\n    ...commonValues,\n    ...gitDockerValues,\n    ...externalImageValues,\n    ...internalImageValues,\n  };\n};\n"]}]}