{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/exp-timer.jsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/exp-timer.jsx","mtime":1615298458730},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { NoticeExpirationModal_ } from './modals/notice-expiration-modal';\nlet timerID = 0;\nlet expTime = 0;\nexport class ExpTimer extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            expText: null,\n        };\n    }\n    componentDidMount() {\n        const curTime = new Date();\n        const { keycloak } = this.props;\n        const tokenExpTime = new Date((keycloak.idTokenParsed.exp + keycloak.timeSkew) * 1000);\n        const logoutTime = (tokenExpTime.getTime() - curTime.getTime()) / 1000;\n        expTime = logoutTime;\n        timerID = window.setInterval(() => this.tick(), 1000);\n    }\n    tokRefresh() {\n        const curTime = new Date();\n        const { keycloak } = this.props;\n        const tokenExpTime = new Date((keycloak.idTokenParsed.exp + keycloak.timeSkew) * 1000);\n        const logoutTime = (tokenExpTime.getTime() - curTime.getTime()) / 1000;\n        expTime = logoutTime;\n    }\n    componentWillUnmount() {\n        // 타이머 등록 해제\n        window.clearInterval(timerID);\n    }\n    expFormat() {\n        let temp = Math.floor(expTime);\n        const sec = temp % 60;\n        temp = Math.floor(temp / 60);\n        const min = temp % 60;\n        temp = Math.floor(temp / 60);\n        const hour = temp % 24;\n        temp = Math.floor(temp / 24);\n        const day = temp;\n        const expText = (!!day ? day + 'day(s) ' : '') + (!!hour ? (hour < 10 ? '0' + hour : hour) + ':' : '') + (min < 10 ? '0' + min : min) + ':' + (sec < 10 ? '0' + sec : sec);\n        this.setState({ expText: expText });\n    }\n    tick() {\n        if (expTime > 0) {\n            expTime -= 1;\n        }\n        if (Math.floor(expTime) === 60) {\n            NoticeExpirationModal_({ logout: this.props.logout, tokenRefresh: this.props.tokenRefresh, time: expTime });\n        }\n        this.expFormat();\n    }\n    render() {\n        const { expText } = this.state;\n        return (React.createElement(\"div\", { className: \"exp-timer\" },\n            React.createElement(\"span\", { className: \"co-masthead__timer__span\" },\n                React.createElement(\"span\", null, expText))));\n    }\n}\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/exp-timer.jsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/hypercloud/exp-timer.jsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { NoticeExpirationModal_ } from './modals/notice-expiration-modal';\nlet timerID = 0;\nlet expTime = 0;\n\nexport class ExpTimer extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      expText: null,\n    };\n  }\n  componentDidMount() {\n    const curTime = new Date();\n    const { keycloak } = this.props;\n    const tokenExpTime = new Date((keycloak.idTokenParsed.exp + keycloak.timeSkew) * 1000);\n    const logoutTime = (tokenExpTime.getTime() - curTime.getTime()) / 1000;\n    expTime = logoutTime;\n    timerID = window.setInterval(() => this.tick(), 1000);\n  }\n  tokRefresh() {\n    const curTime = new Date();\n    const { keycloak } = this.props;\n    const tokenExpTime = new Date((keycloak.idTokenParsed.exp + keycloak.timeSkew) * 1000);\n    const logoutTime = (tokenExpTime.getTime() - curTime.getTime()) / 1000;\n    expTime = logoutTime;\n  }\n  componentWillUnmount() {\n    // 타이머 등록 해제\n    window.clearInterval(timerID);\n  }\n\n  expFormat() {\n    let temp = Math.floor(expTime);\n    const sec = temp % 60;\n    temp = Math.floor(temp / 60);\n    const min = temp % 60;\n    temp = Math.floor(temp / 60);\n    const hour = temp % 24;\n    temp = Math.floor(temp / 24);\n    const day = temp;\n    const expText = (!!day ? day + 'day(s) ' : '') + (!!hour ? (hour < 10 ? '0' + hour : hour) + ':' : '') + (min < 10 ? '0' + min : min) + ':' + (sec < 10 ? '0' + sec : sec);\n    this.setState({ expText: expText });\n  }\n  tick() {\n    if (expTime > 0) {\n      expTime -= 1;\n    }\n    if (Math.floor(expTime) === 60) {\n      NoticeExpirationModal_({ logout: this.props.logout, tokenRefresh: this.props.tokenRefresh, time: expTime });\n    }\n    this.expFormat();\n  }\n  render() {\n    const { expText } = this.state;\n    return (\n      <div className=\"exp-timer\">\n        <span className=\"co-masthead__timer__span\">\n          <span>{expText}</span>\n        </span>\n      </div>\n    );\n  }\n}\n"]}]}