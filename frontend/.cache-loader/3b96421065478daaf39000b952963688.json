{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelineruns/logs/Logs.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelineruns/logs/Logs.tsx","mtime":1615298458620},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { Base64 } from 'js-base64';\nimport { Alert } from '@patternfly/react-core';\nimport { resourceURL, modelFor } from '@console/internal/module/k8s';\nimport { WSFactory } from '@console/internal/module/ws-factory';\nimport { LOG_SOURCE_TERMINATED } from '@console/internal/components/utils';\nimport { coFetchText } from '@console/internal/co-fetch';\nimport './Logs.scss';\nconst Logs = ({ resource, resourceStatus, container, onComplete, render, autoScroll = true, }) => {\n    const { name } = container;\n    const { kind, metadata = {} } = resource;\n    const { name: resName, namespace: resNamespace } = metadata;\n    const contentRef = React.useRef(null);\n    const [error, setError] = React.useState(false);\n    const resourceStatusRef = React.useRef(resourceStatus);\n    const onCompleteRef = React.useRef();\n    onCompleteRef.current = onComplete;\n    const appendMessage = React.useRef();\n    appendMessage.current = React.useCallback((blockContent) => {\n        const contentLines = blockContent.split('\\n').filter((line) => !!line);\n        if (contentRef.current && contentLines.length >= 0) {\n            const elements = contentLines.map((content) => {\n                const customElement = document.createElement('div');\n                customElement.textContent = content;\n                return customElement;\n            });\n            elements.forEach((element) => {\n                contentRef.current.append(element);\n            });\n            const lastElement = elements[elements.length - 1];\n            if (render && lastElement && autoScroll) {\n                lastElement.scrollIntoView({ behavior: 'smooth', block: 'end' });\n            }\n        }\n    }, [autoScroll, render]);\n    if (resourceStatusRef.current !== resourceStatus) {\n        resourceStatusRef.current = resourceStatus;\n    }\n    React.useEffect(() => {\n        let loaded = false;\n        let ws;\n        const urlOpts = {\n            ns: resNamespace,\n            name: resName,\n            path: 'log',\n            queryParams: {\n                container: name,\n                follow: 'true',\n            },\n        };\n        const watchURL = resourceURL(modelFor(kind), urlOpts);\n        if (resourceStatusRef.current === LOG_SOURCE_TERMINATED) {\n            coFetchText(watchURL)\n                .then((res) => {\n                if (loaded)\n                    return;\n                appendMessage.current(res);\n                onCompleteRef.current(name);\n            })\n                .catch(() => {\n                if (loaded)\n                    return;\n                setError(true);\n                onCompleteRef.current(name);\n            });\n        }\n        else {\n            const wsOpts = {\n                host: 'auto',\n                path: watchURL,\n                subprotocols: ['base64.binary.k8s.io'],\n            };\n            ws = new WSFactory(watchURL, wsOpts);\n            ws.onmessage((msg) => {\n                if (loaded)\n                    return;\n                const message = Base64.decode(msg);\n                appendMessage.current(message);\n            })\n                .onclose(() => {\n                onCompleteRef.current(name);\n            })\n                .onerror(() => {\n                if (loaded)\n                    return;\n                setError(true);\n                onCompleteRef.current(name);\n            });\n        }\n        return () => {\n            loaded = true;\n            ws && ws.destroy();\n        };\n    }, [kind, name, resName, resNamespace]);\n    React.useEffect(() => {\n        if (contentRef.current && render && autoScroll) {\n            contentRef.current.scrollIntoView({ behavior: 'smooth', block: 'end' });\n        }\n    }, [autoScroll, render]);\n    return (React.createElement(\"div\", { className: \"odc-logs\", style: { display: render ? '' : 'none' } },\n        React.createElement(\"p\", { className: \"odc-logs__name\" }, name),\n        error && (React.createElement(Alert, { variant: \"danger\", isInline: true, title: \"An error occurred while retrieving the requested logs.\" })),\n        React.createElement(\"div\", { className: \"odc-logs__content\", ref: contentRef })));\n};\nexport default Logs;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelineruns/logs/Logs.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/pipelineruns/logs/Logs.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport { Base64 } from 'js-base64';\nimport { Alert } from '@patternfly/react-core';\nimport { resourceURL, modelFor, PodKind, ContainerSpec } from '@console/internal/module/k8s';\nimport { WSFactory } from '@console/internal/module/ws-factory';\nimport { LOG_SOURCE_TERMINATED } from '@console/internal/components/utils';\nimport { coFetchText } from '@console/internal/co-fetch';\nimport './Logs.scss';\n\ntype LogsProps = {\n  resource: PodKind;\n  resourceStatus: string;\n  container: ContainerSpec;\n  render: boolean;\n  autoScroll?: boolean;\n  onComplete: (containerName: string) => void;\n};\n\nconst Logs: React.FC<LogsProps> = ({\n  resource,\n  resourceStatus,\n  container,\n  onComplete,\n  render,\n  autoScroll = true,\n}) => {\n  const { name } = container;\n  const { kind, metadata = {} } = resource;\n  const { name: resName, namespace: resNamespace } = metadata;\n  const contentRef = React.useRef<HTMLDivElement>(null);\n  const [error, setError] = React.useState<boolean>(false);\n  const resourceStatusRef = React.useRef<string>(resourceStatus);\n  const onCompleteRef = React.useRef<(name) => void>();\n  onCompleteRef.current = onComplete;\n  const appendMessage = React.useRef<(blockContent) => void>();\n  appendMessage.current = React.useCallback(\n    (blockContent) => {\n      const contentLines = blockContent.split('\\n').filter((line) => !!line);\n      if (contentRef.current && contentLines.length >= 0) {\n        const elements = contentLines.map((content) => {\n          const customElement = document.createElement('div');\n          customElement.textContent = content;\n          return customElement;\n        });\n        elements.forEach((element) => {\n          contentRef.current.append(element);\n        });\n        const lastElement = elements[elements.length - 1];\n        if (render && lastElement && autoScroll) {\n          lastElement.scrollIntoView({ behavior: 'smooth', block: 'end' });\n        }\n      }\n    },\n    [autoScroll, render],\n  );\n\n  if (resourceStatusRef.current !== resourceStatus) {\n    resourceStatusRef.current = resourceStatus;\n  }\n\n  React.useEffect(() => {\n    let loaded: boolean = false;\n    let ws: WSFactory;\n    const urlOpts = {\n      ns: resNamespace,\n      name: resName,\n      path: 'log',\n      queryParams: {\n        container: name,\n        follow: 'true',\n      },\n    };\n    const watchURL = resourceURL(modelFor(kind), urlOpts);\n    if (resourceStatusRef.current === LOG_SOURCE_TERMINATED) {\n      coFetchText(watchURL)\n        .then((res) => {\n          if (loaded) return;\n          appendMessage.current(res);\n          onCompleteRef.current(name);\n        })\n        .catch(() => {\n          if (loaded) return;\n          setError(true);\n          onCompleteRef.current(name);\n        });\n    } else {\n      const wsOpts = {\n        host: 'auto',\n        path: watchURL,\n        subprotocols: ['base64.binary.k8s.io'],\n      };\n      ws = new WSFactory(watchURL, wsOpts);\n      ws.onmessage((msg) => {\n        if (loaded) return;\n        const message = Base64.decode(msg);\n        appendMessage.current(message);\n      })\n        .onclose(() => {\n          onCompleteRef.current(name);\n        })\n        .onerror(() => {\n          if (loaded) return;\n          setError(true);\n          onCompleteRef.current(name);\n        });\n    }\n    return () => {\n      loaded = true;\n      ws && ws.destroy();\n    };\n  }, [kind, name, resName, resNamespace]);\n\n  React.useEffect(() => {\n    if (contentRef.current && render && autoScroll) {\n      contentRef.current.scrollIntoView({ behavior: 'smooth', block: 'end' });\n    }\n  }, [autoScroll, render]);\n  return (\n    <div className=\"odc-logs\" style={{ display: render ? '' : 'none' }}>\n      <p className=\"odc-logs__name\">{name}</p>\n      {error && (\n        <Alert\n          variant=\"danger\"\n          isInline\n          title=\"An error occurred while retrieving the requested logs.\"\n        />\n      )}\n      <div className=\"odc-logs__content\" ref={contentRef} />\n    </div>\n  );\n};\n\nexport default Logs;\n"]}]}