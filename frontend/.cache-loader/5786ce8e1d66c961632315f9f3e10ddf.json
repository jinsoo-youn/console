{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/helm/HelmInstallUpgradePage.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/helm/HelmInstallUpgradePage.tsx","mtime":1616735742380},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport { safeDump, safeLoad } from 'js-yaml';\nimport { Formik } from 'formik';\nimport { Helmet } from 'react-helmet';\nimport { PageHeading, history, LoadingBox } from '@console/internal/components/utils';\nimport { coFetchJSON } from '@console/internal/co-fetch';\nimport { PageBody } from '@console/shared';\nimport { SecretModel } from '@console/internal/models';\nimport { k8sGet } from '@console/internal/module/k8s';\nimport { HelmActionType, HelmActionOrigins, } from './helm-types';\nimport { getHelmActionValidationSchema } from './helm-validation-utils';\nimport { getHelmActionConfig, getChartValuesYAML } from './helm-utils';\nimport NamespacedPage, { NamespacedPageVariants } from '../NamespacedPage';\nimport HelmInstallUpgradeForm from './form/HelmInstallUpgradeForm';\nconst HelmInstallUpgradePage = ({ location, match, }) => {\n    const searchParams = new URLSearchParams(location.search);\n    const chartURL = decodeURIComponent(searchParams.get('chartURL'));\n    const namespace = match.params.ns || searchParams.get('preselected-ns');\n    const releaseName = match.params.releaseName || '';\n    const helmChartName = searchParams.get('chartName');\n    const helmActionOrigin = searchParams.get('actionOrigin');\n    const [chartDataLoaded, setChartDataLoaded] = React.useState(false);\n    const [chartName, setChartName] = React.useState('');\n    const [chartHasValues, setChartHasValues] = React.useState(false);\n    const [YAMLData, setYAMLData] = React.useState('');\n    const [activeChartVersion, setActiveChartVersion] = React.useState('');\n    const helmAction = chartURL !== 'null' ? HelmActionType.Install : HelmActionType.Upgrade;\n    const config = React.useMemo(() => getHelmActionConfig(helmAction, releaseName, namespace, helmActionOrigin, chartURL), [chartURL, helmAction, helmActionOrigin, namespace, releaseName]);\n    React.useEffect(() => {\n        let ignore = false;\n        const fetchHelmRelease = () => __awaiter(void 0, void 0, void 0, function* () {\n            let res;\n            try {\n                res = yield coFetchJSON(config.helmReleaseApi);\n            }\n            catch (_a) { } // eslint-disable-line no-empty\n            if (ignore)\n                return;\n            if (helmAction === HelmActionType.Install) {\n                const chartValues = getChartValuesYAML(res);\n                setYAMLData(chartValues);\n                setChartHasValues(!!chartValues);\n            }\n            else {\n                const chart = res === null || res === void 0 ? void 0 : res.chart;\n                const releaseValues = !_.isEmpty(res === null || res === void 0 ? void 0 : res.config) ? safeDump(res === null || res === void 0 ? void 0 : res.config) : '';\n                const chartValues = getChartValuesYAML(chart);\n                const values = releaseValues || chartValues;\n                setYAMLData(values);\n                setChartHasValues(!!values);\n                setChartName(chart.metadata.name);\n                setActiveChartVersion(chart.metadata.version);\n            }\n            setChartDataLoaded(true);\n        });\n        fetchHelmRelease();\n        return () => {\n            ignore = true;\n        };\n    }, [config.helmReleaseApi, helmAction]);\n    const initialValues = {\n        helmReleaseName: releaseName || helmChartName || '',\n        helmChartURL: chartURL,\n        chartName,\n        chartValuesYAML: YAMLData,\n        chartVersion: activeChartVersion,\n    };\n    const handleSubmit = (values, actions) => {\n        actions.setStatus({ isSubmitting: true });\n        const { helmReleaseName, helmChartURL, chartValuesYAML } = values;\n        let valuesObj;\n        if (chartValuesYAML) {\n            try {\n                valuesObj = safeLoad(chartValuesYAML);\n            }\n            catch (err) {\n                actions.setStatus({ submitError: `Invalid YAML - ${err}` });\n                return;\n            }\n        }\n        const payload = Object.assign(Object.assign({ namespace, name: helmReleaseName }, (helmChartURL !== 'null' || undefined\n            ? // eslint-disable-next-line @typescript-eslint/camelcase\n                { chart_url: helmChartURL }\n            : {})), (valuesObj ? { values: valuesObj } : {}));\n        const isGoingToTopology = helmAction === HelmActionType.Install || helmActionOrigin === HelmActionOrigins.topology;\n        config\n            .fetch('/api/helm/release', payload, null, -1)\n            .then((res) => __awaiter(void 0, void 0, void 0, function* () {\n            var _a, _b, _c, _d;\n            let redirect = config.redirectURL;\n            if (isGoingToTopology && ((_a = res === null || res === void 0 ? void 0 : res.info) === null || _a === void 0 ? void 0 : _a.notes)) {\n                const options = {\n                    queryParams: { labelSelector: `name=${res.name},version=${res.version},owner=helm` },\n                };\n                let secret;\n                try {\n                    secret = yield k8sGet(SecretModel, null, res.namespace, options);\n                }\n                catch (err) {\n                    console.error(err); // eslint-disable-line no-console\n                }\n                const secretId = (_d = (_c = (_b = secret === null || secret === void 0 ? void 0 : secret.items) === null || _b === void 0 ? void 0 : _b[0]) === null || _c === void 0 ? void 0 : _c.metadata) === null || _d === void 0 ? void 0 : _d.uid;\n                if (secretId) {\n                    redirect = `${config.redirectURL}?selectId=${secretId}&selectTab=Release+Notes`;\n                }\n            }\n            actions.setStatus({ isSubmitting: false });\n            history.push(redirect);\n        }))\n            .catch((err) => {\n            actions.setSubmitting(false);\n            actions.setStatus({ submitError: err.message, isSubmitting: false });\n        });\n    };\n    if (!chartDataLoaded) {\n        return React.createElement(LoadingBox, null);\n    }\n    return (React.createElement(NamespacedPage, { variant: NamespacedPageVariants.light, disabled: true, hideApplications: true },\n        React.createElement(Helmet, null,\n            React.createElement(\"title\", null, config.title)),\n        React.createElement(PageHeading, { title: config.title }, chartHasValues && config.subTitle),\n        React.createElement(PageBody, { flexLayout: true },\n            React.createElement(Formik, { initialValues: initialValues, onSubmit: handleSubmit, onReset: history.goBack, validationSchema: getHelmActionValidationSchema(helmAction) }, (props) => (React.createElement(HelmInstallUpgradeForm, Object.assign({}, props, { chartHasValues: chartHasValues, submitLabel: helmAction })))))));\n};\nexport default HelmInstallUpgradePage;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/helm/HelmInstallUpgradePage.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/helm/HelmInstallUpgradePage.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { safeDump, safeLoad } from 'js-yaml';\nimport { Formik } from 'formik';\nimport { Helmet } from 'react-helmet';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { PageHeading, history, LoadingBox } from '@console/internal/components/utils';\nimport { coFetchJSON } from '@console/internal/co-fetch';\nimport { PageBody } from '@console/shared';\nimport { SecretModel } from '@console/internal/models';\nimport { k8sGet } from '@console/internal/module/k8s';\n\nimport {\n  HelmActionType,\n  HelmChart,\n  HelmRelease,\n  HelmActionConfigType,\n  HelmActionOrigins,\n} from './helm-types';\nimport { getHelmActionValidationSchema } from './helm-validation-utils';\nimport { getHelmActionConfig, getChartValuesYAML } from './helm-utils';\nimport NamespacedPage, { NamespacedPageVariants } from '../NamespacedPage';\nimport HelmInstallUpgradeForm from './form/HelmInstallUpgradeForm';\n\nexport type HelmInstallUpgradePageProps = RouteComponentProps<{\n  ns?: string;\n  releaseName?: string;\n}>;\n\nexport type HelmInstallUpgradeFormData = {\n  helmReleaseName: string;\n  helmChartURL?: string;\n  chartName?: string;\n  chartValuesYAML: string;\n  chartVersion?: string;\n};\n\nconst HelmInstallUpgradePage: React.FunctionComponent<HelmInstallUpgradePageProps> = ({\n  location,\n  match,\n}) => {\n  const searchParams = new URLSearchParams(location.search);\n\n  const chartURL = decodeURIComponent(searchParams.get('chartURL'));\n  const namespace = match.params.ns || searchParams.get('preselected-ns');\n  const releaseName = match.params.releaseName || '';\n  const helmChartName = searchParams.get('chartName');\n  const helmActionOrigin = searchParams.get('actionOrigin') as HelmActionOrigins;\n\n  const [chartDataLoaded, setChartDataLoaded] = React.useState<boolean>(false);\n  const [chartName, setChartName] = React.useState<string>('');\n  const [chartHasValues, setChartHasValues] = React.useState<boolean>(false);\n  const [YAMLData, setYAMLData] = React.useState<string>('');\n  const [activeChartVersion, setActiveChartVersion] = React.useState<string>('');\n\n  const helmAction: HelmActionType =\n    chartURL !== 'null' ? HelmActionType.Install : HelmActionType.Upgrade;\n\n  const config = React.useMemo<HelmActionConfigType>(\n    () => getHelmActionConfig(helmAction, releaseName, namespace, helmActionOrigin, chartURL),\n    [chartURL, helmAction, helmActionOrigin, namespace, releaseName],\n  );\n\n  React.useEffect(() => {\n    let ignore = false;\n\n    const fetchHelmRelease = async () => {\n      let res;\n      try {\n        res = await coFetchJSON(config.helmReleaseApi);\n      } catch {} // eslint-disable-line no-empty\n      if (ignore) return;\n\n      if (helmAction === HelmActionType.Install) {\n        const chartValues = getChartValuesYAML(res);\n        setYAMLData(chartValues);\n        setChartHasValues(!!chartValues);\n      } else {\n        const chart: HelmChart = res?.chart;\n        const releaseValues = !_.isEmpty(res?.config) ? safeDump(res?.config) : '';\n        const chartValues = getChartValuesYAML(chart);\n        const values = releaseValues || chartValues;\n        setYAMLData(values);\n        setChartHasValues(!!values);\n        setChartName(chart.metadata.name);\n        setActiveChartVersion(chart.metadata.version);\n      }\n      setChartDataLoaded(true);\n    };\n\n    fetchHelmRelease();\n\n    return () => {\n      ignore = true;\n    };\n  }, [config.helmReleaseApi, helmAction]);\n\n  const initialValues: HelmInstallUpgradeFormData = {\n    helmReleaseName: releaseName || helmChartName || '',\n    helmChartURL: chartURL,\n    chartName,\n    chartValuesYAML: YAMLData,\n    chartVersion: activeChartVersion,\n  };\n\n  const handleSubmit = (values, actions) => {\n    actions.setStatus({ isSubmitting: true });\n    const { helmReleaseName, helmChartURL, chartValuesYAML }: HelmInstallUpgradeFormData = values;\n    let valuesObj;\n    if (chartValuesYAML) {\n      try {\n        valuesObj = safeLoad(chartValuesYAML);\n      } catch (err) {\n        actions.setStatus({ submitError: `Invalid YAML - ${err}` });\n        return;\n      }\n    }\n\n    const payload = {\n      namespace,\n      name: helmReleaseName,\n      ...(helmChartURL !== 'null' || undefined\n        ? // eslint-disable-next-line @typescript-eslint/camelcase\n          { chart_url: helmChartURL }\n        : {}),\n      ...(valuesObj ? { values: valuesObj } : {}),\n    };\n\n    const isGoingToTopology =\n      helmAction === HelmActionType.Install || helmActionOrigin === HelmActionOrigins.topology;\n\n    config\n      .fetch('/api/helm/release', payload, null, -1)\n      .then(async (res: HelmRelease) => {\n        let redirect = config.redirectURL;\n\n        if (isGoingToTopology && res?.info?.notes) {\n          const options = {\n            queryParams: { labelSelector: `name=${res.name},version=${res.version},owner=helm` },\n          };\n          let secret;\n          try {\n            secret = await k8sGet(SecretModel, null, res.namespace, options);\n          } catch (err) {\n            console.error(err); // eslint-disable-line no-console\n          }\n          const secretId = secret?.items?.[0]?.metadata?.uid;\n          if (secretId) {\n            redirect = `${config.redirectURL}?selectId=${secretId}&selectTab=Release+Notes`;\n          }\n        }\n\n        actions.setStatus({ isSubmitting: false });\n        history.push(redirect);\n      })\n      .catch((err) => {\n        actions.setSubmitting(false);\n        actions.setStatus({ submitError: err.message, isSubmitting: false });\n      });\n  };\n\n  if (!chartDataLoaded) {\n    return <LoadingBox />;\n  }\n\n  return (\n    <NamespacedPage variant={NamespacedPageVariants.light} disabled hideApplications>\n      <Helmet>\n        <title>{config.title}</title>\n      </Helmet>\n      <PageHeading title={config.title}>{chartHasValues && config.subTitle}</PageHeading>\n      <PageBody flexLayout>\n        <Formik\n          initialValues={initialValues}\n          onSubmit={handleSubmit}\n          onReset={history.goBack}\n          validationSchema={getHelmActionValidationSchema(helmAction)}\n        >\n          {(props) => (\n            <HelmInstallUpgradeForm\n              {...props}\n              chartHasValues={chartHasValues}\n              submitLabel={helmAction}\n            />\n          )}\n        </Formik>\n      </PageBody>\n    </NamespacedPage>\n  );\n};\n\nexport default HelmInstallUpgradePage;\n"]}]}