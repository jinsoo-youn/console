{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/traffic-splitting/TrafficSplitting.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/traffic-splitting/TrafficSplitting.tsx","mtime":1615298458640},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Formik } from 'formik';\nimport { k8sUpdate } from '@console/internal/module/k8s';\nimport { ServiceModel } from '../../models';\nimport { getRevisionItems, constructObjForUpdate } from '../../utils/traffic-splitting-utils';\nimport TrafficSplittingModal from './TrafficSplittingModal';\nconst TrafficSplitting = ({ service, revisions, cancel, close, }) => {\n    const traffic = _.get(service, ['status', 'traffic'], [{ percent: 0, tag: '', revisionName: '' }]);\n    const revisionItems = getRevisionItems(revisions);\n    const initialValues = {\n        trafficSplitting: traffic.map((t) => ({\n            percent: t.percent,\n            tag: t.tag || '',\n            revisionName: t.revisionName || '',\n        })),\n    };\n    const handleSubmit = (values, action) => {\n        const obj = constructObjForUpdate(values.trafficSplitting, service);\n        k8sUpdate(ServiceModel, obj)\n            .then(() => {\n            action.setSubmitting(false);\n            action.setStatus({ error: '' });\n            close();\n        })\n            .catch((err) => {\n            action.setStatus({ error: err.message || 'An error occurred. Please try again' });\n        });\n    };\n    return (React.createElement(Formik, { initialValues: initialValues, onSubmit: handleSubmit, onReset: cancel, initialStatus: { error: '' } }, (props) => (React.createElement(TrafficSplittingModal, Object.assign({}, props, { cancel: cancel, revisionItems: revisionItems })))));\n};\nexport default TrafficSplitting;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/traffic-splitting/TrafficSplitting.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/traffic-splitting/TrafficSplitting.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,MAAM,EAA+B,MAAM,QAAQ,CAAC;AAC7D,OAAO,EAAmB,SAAS,EAAE,MAAM,8BAA8B,CAAC;AAC1E,OAAO,EAAE,YAAY,EAAE,MAAM,cAAc,CAAC;AAC5C,OAAO,EAAE,gBAAgB,EAAE,qBAAqB,EAAE,MAAM,qCAAqC,CAAC;AAC9F,OAAO,qBAAqB,MAAM,yBAAyB,CAAC;AAiB5D,MAAM,gBAAgB,GAAoC,CAAC,EACzD,OAAO,EACP,SAAS,EACT,MAAM,EACN,KAAK,GACN,EAAE,EAAE;IACH,MAAM,OAAO,GAAG,CAAC,CAAC,GAAG,CACnB,OAAO,EACP,CAAC,QAAQ,EAAE,SAAS,CAAC,EACrB,CAAC,EAAE,OAAO,EAAE,CAAC,EAAE,GAAG,EAAE,EAAE,EAAE,YAAY,EAAE,EAAE,EAAE,CAAC,CAC5C,CAAC;IACF,MAAM,aAAa,GAAG,gBAAgB,CAAC,SAAS,CAAC,CAAC;IAClD,MAAM,aAAa,GAAyB;QAC1C,gBAAgB,EAAE,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;YACpC,OAAO,EAAE,CAAC,CAAC,OAAO;YAClB,GAAG,EAAE,CAAC,CAAC,GAAG,IAAI,EAAE;YAChB,YAAY,EAAE,CAAC,CAAC,YAAY,IAAI,EAAE;SACnC,CAAC,CAAC;KACJ,CAAC;IACF,MAAM,YAAY,GAAG,CAAC,MAAoB,EAAE,MAAmC,EAAE,EAAE;QACjF,MAAM,GAAG,GAAG,qBAAqB,CAAC,MAAM,CAAC,gBAAgB,EAAE,OAAO,CAAC,CAAC;QACpE,SAAS,CAAC,YAAY,EAAE,GAAG,CAAC;aACzB,IAAI,CAAC,GAAG,EAAE;YACT,MAAM,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;YAC5B,MAAM,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,EAAE,EAAE,CAAC,CAAC;YAChC,KAAK,EAAE,CAAC;QACV,CAAC,CAAC;aACD,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;YACb,MAAM,CAAC,SAAS,CAAC,EAAE,KAAK,EAAE,GAAG,CAAC,OAAO,IAAI,qCAAqC,EAAE,CAAC,CAAC;QACpF,CAAC,CAAC,CAAC;IACP,CAAC,CAAC;IAEF,OAAO,CACL,oBAAC,MAAM,IACL,aAAa,EAAE,aAAa,EAC5B,QAAQ,EAAE,YAAY,EACtB,OAAO,EAAE,MAAM,EACf,aAAa,EAAE,EAAE,KAAK,EAAE,EAAE,EAAE,IAE3B,CAAC,KAAK,EAAE,EAAE,CAAC,CACV,oBAAC,qBAAqB,oBAAK,KAAK,IAAE,MAAM,EAAE,MAAM,EAAE,aAAa,EAAE,aAAa,IAAI,CACnF,CACM,CACV,CAAC;AACJ,CAAC,CAAC;AACF,eAAe,gBAAgB,CAAC","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Formik, FormikValues, FormikHelpers } from 'formik';\nimport { K8sResourceKind, k8sUpdate } from '@console/internal/module/k8s';\nimport { ServiceModel } from '../../models';\nimport { getRevisionItems, constructObjForUpdate } from '../../utils/traffic-splitting-utils';\nimport TrafficSplittingModal from './TrafficSplittingModal';\n\nexport interface TrafficSplittingProps {\n  service: K8sResourceKind;\n  revisions: K8sResourceKind[];\n  cancel?: () => void;\n  close?: () => void;\n}\n\nexport interface TrafficSplittingType {\n  trafficSplitting: {\n    percent: number;\n    tag: string;\n    revisionName: string;\n  }[];\n}\n\nconst TrafficSplitting: React.FC<TrafficSplittingProps> = ({\n  service,\n  revisions,\n  cancel,\n  close,\n}) => {\n  const traffic = _.get(\n    service,\n    ['status', 'traffic'],\n    [{ percent: 0, tag: '', revisionName: '' }],\n  );\n  const revisionItems = getRevisionItems(revisions);\n  const initialValues: TrafficSplittingType = {\n    trafficSplitting: traffic.map((t) => ({\n      percent: t.percent,\n      tag: t.tag || '',\n      revisionName: t.revisionName || '',\n    })),\n  };\n  const handleSubmit = (values: FormikValues, action: FormikHelpers<FormikValues>) => {\n    const obj = constructObjForUpdate(values.trafficSplitting, service);\n    k8sUpdate(ServiceModel, obj)\n      .then(() => {\n        action.setSubmitting(false);\n        action.setStatus({ error: '' });\n        close();\n      })\n      .catch((err) => {\n        action.setStatus({ error: err.message || 'An error occurred. Please try again' });\n      });\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      onReset={cancel}\n      initialStatus={{ error: '' }}\n    >\n      {(props) => (\n        <TrafficSplittingModal {...props} cancel={cancel} revisionItems={revisionItems} />\n      )}\n    </Formik>\n  );\n};\nexport default TrafficSplitting;\n"]}]}