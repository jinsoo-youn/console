{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/behavior/useSvgAnchor.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/behavior/useSvgAnchor.tsx","mtime":1615298458710},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { action } from 'mobx';\nimport { isNode, AnchorEnd } from '../types';\nimport ElementContext from '../utils/ElementContext';\nimport SVGAnchor from '../anchors/SVGAnchor';\nexport const useSvgAnchor = (end = AnchorEnd.both, type = '') => {\n    const element = React.useContext(ElementContext);\n    if (!isNode(element)) {\n        throw new Error('useSvgAnchor must be used within the scope of a Node');\n    }\n    const setAnchorSvgRef = React.useCallback(action((node) => {\n        if (node) {\n            const anchor = new SVGAnchor(element);\n            anchor.setSVGElement(node);\n            element.setAnchor(anchor, end, type);\n        }\n    }), [element, type, end]);\n    return setAnchorSvgRef;\n};\nexport const withSvgAnchor = (end, type) => () => (WrappedComponent) => {\n    const Component = (props) => {\n        const svgAnchorRef = useSvgAnchor(end, type);\n        return React.createElement(WrappedComponent, Object.assign({}, props, { svgAnchorRef: svgAnchorRef }));\n    };\n    return Component;\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/behavior/useSvgAnchor.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/topology/src/behavior/useSvgAnchor.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,MAAM,EAAE,MAAM,MAAM,CAAC;AAC9B,OAAO,EAAE,MAAM,EAAE,SAAS,EAAE,MAAM,UAAU,CAAC;AAC7C,OAAO,cAAc,MAAM,yBAAyB,CAAC;AACrD,OAAO,SAAS,MAAM,sBAAsB,CAAC;AAI7C,MAAM,CAAC,MAAM,YAAY,GAAG,CAC1B,MAAiB,SAAS,CAAC,IAAI,EAC/B,OAAe,EAAE,EACoB,EAAE;IACvC,MAAM,OAAO,GAAG,KAAK,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;IACjD,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE;QACpB,MAAM,IAAI,KAAK,CAAC,sDAAsD,CAAC,CAAC;KACzE;IAED,MAAM,eAAe,GAAG,KAAK,CAAC,WAAW,CACvC,MAAM,CAAC,CAAC,IAAuB,EAAE,EAAE;QACjC,IAAI,IAAI,EAAE;YACR,MAAM,MAAM,GAAG,IAAI,SAAS,CAAC,OAAO,CAAC,CAAC;YACtC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;YAC3B,OAAO,CAAC,SAAS,CAAC,MAAM,EAAE,GAAG,EAAE,IAAI,CAAC,CAAC;SACtC;IACH,CAAC,CAAC,EACF,CAAC,OAAO,EAAE,IAAI,EAAE,GAAG,CAAC,CACrB,CAAC;IAEF,OAAO,eAAe,CAAC;AACzB,CAAC,CAAC;AAMF,MAAM,CAAC,MAAM,aAAa,GAAG,CAAC,GAAe,EAAE,IAAa,EAAE,EAAE,CAAC,GAE7D,EAAE,CAAC,CAAC,gBAAwC,EAAE,EAAE;IAClD,MAAM,SAAS,GAAgD,CAAC,KAAK,EAAE,EAAE;QACvE,MAAM,YAAY,GAAG,YAAY,CAAC,GAAG,EAAE,IAAI,CAAC,CAAC;QAC7C,OAAO,oBAAC,gBAAgB,oBAAM,KAAa,IAAE,YAAY,EAAE,YAAY,IAAI,CAAC;IAC9E,CAAC,CAAC;IACF,OAAO,SAAS,CAAC;AACnB,CAAC,CAAC","sourcesContent":["import * as React from 'react';\nimport { action } from 'mobx';\nimport { isNode, AnchorEnd } from '../types';\nimport ElementContext from '../utils/ElementContext';\nimport SVGAnchor from '../anchors/SVGAnchor';\n\nexport type SvgAnchorRef = (node: SVGElement | null) => void;\n\nexport const useSvgAnchor = (\n  end: AnchorEnd = AnchorEnd.both,\n  type: string = '',\n): ((node: SVGElement | null) => void) => {\n  const element = React.useContext(ElementContext);\n  if (!isNode(element)) {\n    throw new Error('useSvgAnchor must be used within the scope of a Node');\n  }\n\n  const setAnchorSvgRef = React.useCallback<SvgAnchorRef>(\n    action((node: SVGElement | null) => {\n      if (node) {\n        const anchor = new SVGAnchor(element);\n        anchor.setSVGElement(node);\n        element.setAnchor(anchor, end, type);\n      }\n    }),\n    [element, type, end],\n  );\n\n  return setAnchorSvgRef;\n};\n\nexport type WithSvgAnchorProps = {\n  svgAnchorRef: SvgAnchorRef;\n};\n\nexport const withSvgAnchor = (end?: AnchorEnd, type?: string) => <\n  P extends WithSvgAnchorProps\n>() => (WrappedComponent: React.ComponentType<P>) => {\n  const Component: React.FC<Omit<P, keyof WithSvgAnchorProps>> = (props) => {\n    const svgAnchorRef = useSvgAnchor(end, type);\n    return <WrappedComponent {...(props as any)} svgAnchorRef={svgAnchorRef} />;\n  };\n  return Component;\n};\n"]}]}