{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/health-checks/AddHealthChecksForm.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/health-checks/AddHealthChecksForm.tsx","mtime":1615298458610},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport * as yup from 'yup';\nimport { Formik } from 'formik';\nimport { LoadingBox, StatusBox, history } from '@console/internal/components/utils';\nimport { k8sUpdate, modelFor, referenceFor } from '@console/internal/module/k8s';\nimport { getResourcesType } from '../edit-application/edit-application-utils';\nimport { healthChecksProbesValidationSchema } from './health-checks-probe-validation-utils';\nimport { getHealthChecksData } from './create-health-checks-probe-utils';\nimport AddHealthChecks from './AddHealthChecks';\nimport { updateHealthChecksProbe } from './health-checks-utils';\nconst AddHealthChecksForm = ({ resource, currentContainer, }) => {\n    if (!resource.loaded && _.isEmpty(resource.loadError)) {\n        return React.createElement(LoadingBox, null);\n    }\n    if (resource.loadError) {\n        return React.createElement(StatusBox, { loaded: resource.loaded, loadError: resource.loadError });\n    }\n    const container = _.find(resource.data.spec.template.spec.containers, (data) => data.name === currentContainer);\n    if (_.isEmpty(container)) {\n        return React.createElement(\"div\", { className: \"text-center\" }, \"Container not found\");\n    }\n    const handleSubmit = (values, actions) => {\n        const updatedResource = updateHealthChecksProbe(values, resource.data, container);\n        k8sUpdate(modelFor(referenceFor(resource.data)), updatedResource)\n            .then(() => {\n            actions.setSubmitting(false);\n            actions.setStatus({ error: '' });\n            history.goBack();\n        })\n            .catch((err) => {\n            actions.setSubmitting(false);\n            actions.setStatus({ errors: err });\n        });\n    };\n    const containerIndex = _.findIndex(resource.data.spec.template.spec.containers, [\n        'name',\n        currentContainer,\n    ]);\n    const initialValues = {\n        healthChecks: getHealthChecksData(resource.data, containerIndex),\n        containerName: container.name,\n        resources: getResourcesType(resource.data),\n    };\n    return (React.createElement(Formik, { initialValues: initialValues, validationSchema: yup.object().shape({\n            healthChecks: healthChecksProbesValidationSchema,\n        }), onSubmit: handleSubmit, onReset: history.goBack }, (props) => (React.createElement(AddHealthChecks, Object.assign({ resource: resource.data, currentContainer: currentContainer }, props)))));\n};\nexport default AddHealthChecksForm;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/health-checks/AddHealthChecksForm.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/dev-console/src/components/health-checks/AddHealthChecksForm.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport * as yup from 'yup';\nimport { Formik } from 'formik';\nimport { FirehoseResult, LoadingBox, StatusBox, history } from '@console/internal/components/utils';\nimport { K8sResourceKind, k8sUpdate, modelFor, referenceFor } from '@console/internal/module/k8s';\nimport { getResourcesType } from '../edit-application/edit-application-utils';\nimport { healthChecksProbesValidationSchema } from './health-checks-probe-validation-utils';\nimport { getHealthChecksData } from './create-health-checks-probe-utils';\nimport AddHealthChecks from './AddHealthChecks';\nimport { updateHealthChecksProbe } from './health-checks-utils';\n\ntype AddHealthChecksFormProps = {\n  resource?: FirehoseResult<K8sResourceKind>;\n  currentContainer: string;\n};\n\nconst AddHealthChecksForm: React.FC<AddHealthChecksFormProps> = ({\n  resource,\n  currentContainer,\n}) => {\n  if (!resource.loaded && _.isEmpty(resource.loadError)) {\n    return <LoadingBox />;\n  }\n\n  if (resource.loadError) {\n    return <StatusBox loaded={resource.loaded} loadError={resource.loadError} />;\n  }\n\n  const container = _.find(\n    resource.data.spec.template.spec.containers,\n    (data) => data.name === currentContainer,\n  );\n\n  if (_.isEmpty(container)) {\n    return <div className=\"text-center\">Container not found</div>;\n  }\n\n  const handleSubmit = (values, actions) => {\n    const updatedResource = updateHealthChecksProbe(values, resource.data, container);\n\n    k8sUpdate(modelFor(referenceFor(resource.data)), updatedResource)\n      .then(() => {\n        actions.setSubmitting(false);\n        actions.setStatus({ error: '' });\n        history.goBack();\n      })\n      .catch((err) => {\n        actions.setSubmitting(false);\n        actions.setStatus({ errors: err });\n      });\n  };\n  const containerIndex = _.findIndex(resource.data.spec.template.spec.containers, [\n    'name',\n    currentContainer,\n  ]);\n  const initialValues = {\n    healthChecks: getHealthChecksData(resource.data, containerIndex),\n    containerName: container.name,\n    resources: getResourcesType(resource.data),\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={yup.object().shape({\n        healthChecks: healthChecksProbesValidationSchema,\n      })}\n      onSubmit={handleSubmit}\n      onReset={history.goBack}\n    >\n      {(props) => (\n        <AddHealthChecks resource={resource.data} currentContainer={currentContainer} {...props} />\n      )}\n    </Formik>\n  );\n};\n\nexport default AddHealthChecksForm;\n"]}]}