{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/modals/uninstall-operator-modal.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/modals/uninstall-operator-modal.tsx","mtime":1616735742450},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter, } from '@console/internal/components/factory/modal';\nimport { history, resourceListPathFromModel, withHandlePromise, } from '@console/internal/components/utils';\nimport { getActiveNamespace } from '@console/internal/actions/ui';\nimport { YellowExclamationTriangleIcon } from '@console/shared';\nimport { ClusterServiceVersionModel, SubscriptionModel } from '../../models';\nexport const UninstallOperatorModal = withHandlePromise((props) => {\n    var _a, _b;\n    const submit = (event) => {\n        event.preventDefault();\n        const { subscription, k8sKill } = props;\n        const deleteOptions = {\n            kind: 'DeleteOptions',\n            apiVersion: 'v1',\n            propagationPolicy: 'Foreground',\n        };\n        const promises = [k8sKill(SubscriptionModel, subscription, {}, deleteOptions)].concat(_.get(subscription, 'status.installedCSV')\n            ? k8sKill(ClusterServiceVersionModel, {\n                metadata: {\n                    name: subscription.status.installedCSV,\n                    namespace: subscription.metadata.namespace,\n                },\n            }, {}, deleteOptions).catch(() => Promise.resolve())\n            : []);\n        props\n            .handlePromise(Promise.all(promises))\n            .then(() => {\n            props.close();\n            if (window.location.pathname.split('/').includes(subscription.metadata.name) ||\n                window.location.pathname.split('/').includes(subscription.status.installedCSV)) {\n                history.push(resourceListPathFromModel(ClusterServiceVersionModel, getActiveNamespace()));\n            }\n        })\n            .catch(_.noop);\n    };\n    const name = _.get(props.csv, 'spec.displayName') || props.subscription.spec.name;\n    const context = props.subscription.metadata.namespace === 'openshift-operators' ? (React.createElement(\"strong\", null, \"all namespaces\")) : (React.createElement(React.Fragment, null,\n        \"namespace \",\n        React.createElement(\"strong\", null, props.subscription.metadata.namespace)));\n    const uninstallMessage = (_b = (_a = props.csv) === null || _a === void 0 ? void 0 : _a.metadata) === null || _b === void 0 ? void 0 : _b.annotations['operator.openshift.io/uninstall-message'];\n    return (React.createElement(\"form\", { onSubmit: submit, name: \"form\", className: \"modal-content co-catalog-install-modal\" },\n        React.createElement(ModalTitle, { className: \"modal-header\" },\n            React.createElement(YellowExclamationTriangleIcon, { className: \"co-icon-space-r\" }),\n            \" Uninstall Operator?\"),\n        React.createElement(ModalBody, null,\n            \"This will remove operator \",\n            React.createElement(\"strong\", null, name),\n            \" from \",\n            context,\n            \". Removing the operator will not remove any of its custom resource definitions or managed resources. If your operator has deployed applications on the cluster or configured off-cluster resources, these will continue to run and need to be cleaned up manually.\",\n            uninstallMessage && (React.createElement(React.Fragment, null,\n                React.createElement(\"h2\", null, \"Message from operator developer\"),\n                React.createElement(\"p\", null, uninstallMessage)))),\n        React.createElement(ModalSubmitFooter, { inProgress: props.inProgress, errorMessage: props.errorMessage, cancel: props.cancel, submitDanger: true, submitText: \"Uninstall\" })));\n});\nexport const createUninstallOperatorModal = createModalLauncher(UninstallOperatorModal);\nUninstallOperatorModal.displayName = 'UninstallOperatorModal';\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/modals/uninstall-operator-modal.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/operator-lifecycle-manager/src/components/modals/uninstall-operator-modal.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory/modal';\nimport {\n  history,\n  resourceListPathFromModel,\n  withHandlePromise,\n} from '@console/internal/components/utils';\nimport { K8sKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport { getActiveNamespace } from '@console/internal/actions/ui';\nimport { YellowExclamationTriangleIcon } from '@console/shared';\nimport { ClusterServiceVersionKind, SubscriptionKind } from '../../types';\nimport { ClusterServiceVersionModel, SubscriptionModel } from '../../models';\n\nexport const UninstallOperatorModal = withHandlePromise((props: UninstallOperatorModalProps) => {\n  const submit = (event) => {\n    event.preventDefault();\n\n    const { subscription, k8sKill } = props;\n    const deleteOptions = {\n      kind: 'DeleteOptions',\n      apiVersion: 'v1',\n      propagationPolicy: 'Foreground',\n    };\n    const promises = [k8sKill(SubscriptionModel, subscription, {}, deleteOptions)].concat(\n      _.get(subscription, 'status.installedCSV')\n        ? k8sKill(\n            ClusterServiceVersionModel,\n            {\n              metadata: {\n                name: subscription.status.installedCSV,\n                namespace: subscription.metadata.namespace,\n              },\n            },\n            {},\n            deleteOptions,\n          ).catch(() => Promise.resolve())\n        : [],\n    );\n\n    props\n      .handlePromise(Promise.all(promises))\n      .then(() => {\n        props.close();\n\n        if (\n          window.location.pathname.split('/').includes(subscription.metadata.name) ||\n          window.location.pathname.split('/').includes(subscription.status.installedCSV)\n        ) {\n          history.push(resourceListPathFromModel(ClusterServiceVersionModel, getActiveNamespace()));\n        }\n      })\n      .catch(_.noop);\n  };\n\n  const name = _.get(props.csv, 'spec.displayName') || props.subscription.spec.name;\n  const context =\n    props.subscription.metadata.namespace === 'openshift-operators' ? (\n      <strong>all namespaces</strong>\n    ) : (\n      <>\n        namespace <strong>{props.subscription.metadata.namespace}</strong>\n      </>\n    );\n  const uninstallMessage =\n    props.csv?.metadata?.annotations['operator.openshift.io/uninstall-message'];\n\n  return (\n    <form onSubmit={submit} name=\"form\" className=\"modal-content co-catalog-install-modal\">\n      <ModalTitle className=\"modal-header\">\n        <YellowExclamationTriangleIcon className=\"co-icon-space-r\" /> Uninstall Operator?\n      </ModalTitle>\n      <ModalBody>\n        This will remove operator <strong>{name}</strong> from {context}. Removing the operator will\n        not remove any of its custom resource definitions or managed resources. If your operator has\n        deployed applications on the cluster or configured off-cluster resources, these will\n        continue to run and need to be cleaned up manually.\n        {uninstallMessage && (\n          <>\n            <h2>Message from operator developer</h2>\n            <p>{uninstallMessage}</p>\n          </>\n        )}\n      </ModalBody>\n      <ModalSubmitFooter\n        inProgress={props.inProgress}\n        errorMessage={props.errorMessage}\n        cancel={props.cancel}\n        submitDanger\n        submitText=\"Uninstall\"\n      />\n    </form>\n  );\n});\n\nexport const createUninstallOperatorModal = createModalLauncher(UninstallOperatorModal);\n\nexport type UninstallOperatorModalProps = {\n  handlePromise: <T>(promise: Promise<T>) => Promise<T>;\n  inProgress: boolean;\n  errorMessage: string;\n  cancel?: () => void;\n  close?: () => void;\n  k8sKill: (kind: K8sKind, resource: K8sResourceKind, options: any, json: any) => Promise<any>;\n  k8sGet: (kind: K8sKind, name: string, namespace: string) => Promise<K8sResourceKind>;\n  k8sPatch: (\n    kind: K8sKind,\n    resource: K8sResourceKind,\n    data: { op: string; path: string; value: any }[],\n  ) => Promise<any>;\n  subscription: SubscriptionKind;\n  csv?: ClusterServiceVersionKind;\n};\n\nUninstallOperatorModal.displayName = 'UninstallOperatorModal';\n"]}]}