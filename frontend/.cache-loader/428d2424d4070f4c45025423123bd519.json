{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vm-template/selectors.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vm-template/selectors.ts","mtime":1616735742430},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import { getLabel, getName, getNamespace } from '@console/shared/src';\nimport { LABEL_USED_TEMPLATE_NAME, LABEL_USED_TEMPLATE_NAMESPACE } from '../../constants/vm';\nimport { TemplateValidations } from '../../utils/validations/template/template-validations';\nexport const getVMTemplateNamespacedName = (vm) => {\n    const name = getLabel(vm, LABEL_USED_TEMPLATE_NAME);\n    const namespace = getLabel(vm, LABEL_USED_TEMPLATE_NAMESPACE);\n    return name && namespace ? { name, namespace } : null;\n};\nexport const getVMTemplate = (vm, templates) => {\n    const namespacedName = getVMTemplateNamespacedName(vm);\n    return namespacedName\n        ? templates.find((template) => getName(template) === namespacedName.name &&\n            getNamespace(template) === namespacedName.namespace)\n        : undefined;\n};\nexport const getTemplateValidationsFromTemplate = (vmTemplate) => {\n    var _a, _b;\n    const result = (_b = (_a = vmTemplate === null || vmTemplate === void 0 ? void 0 : vmTemplate.metadata) === null || _a === void 0 ? void 0 : _a.annotations) === null || _b === void 0 ? void 0 : _b.validations;\n    if (!result) {\n        return new TemplateValidations();\n    }\n    try {\n        return new TemplateValidations(JSON.parse(result));\n    }\n    catch (e) {\n        return new TemplateValidations();\n    }\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vm-template/selectors.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/selectors/vm-template/selectors.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,QAAQ,EAAE,OAAO,EAAE,YAAY,EAAE,MAAM,qBAAqB,CAAC;AACtE,OAAO,EAAE,wBAAwB,EAAE,6BAA6B,EAAE,MAAM,oBAAoB,CAAC;AAE7F,OAAO,EAAE,mBAAmB,EAAE,MAAM,uDAAuD,CAAC;AAE5F,MAAM,CAAC,MAAM,2BAA2B,GAAG,CACzC,EAA2B,EACU,EAAE;IACvC,MAAM,IAAI,GAAG,QAAQ,CAAC,EAAE,EAAE,wBAAwB,CAAC,CAAC;IACpD,MAAM,SAAS,GAAG,QAAQ,CAAC,EAAE,EAAE,6BAA6B,CAAC,CAAC;IAC9D,OAAO,IAAI,IAAI,SAAS,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;AACxD,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,aAAa,GAAG,CAC3B,EAA2B,EAC3B,SAAyB,EACX,EAAE;IAChB,MAAM,cAAc,GAAG,2BAA2B,CAAC,EAAE,CAAC,CAAC;IACvD,OAAO,cAAc;QACnB,CAAC,CAAC,SAAS,CAAC,IAAI,CACZ,CAAC,QAAQ,EAAE,EAAE,CACX,OAAO,CAAC,QAAQ,CAAC,KAAK,cAAc,CAAC,IAAI;YACzC,YAAY,CAAC,QAAQ,CAAC,KAAK,cAAc,CAAC,SAAS,CACtD;QACH,CAAC,CAAC,SAAS,CAAC;AAChB,CAAC,CAAC;AAEF,MAAM,CAAC,MAAM,kCAAkC,GAAG,CAChD,UAAwB,EACH,EAAE;;IACvB,MAAM,MAAM,eAAG,UAAU,aAAV,UAAU,uBAAV,UAAU,CAAE,QAAQ,0CAAE,WAAW,0CAAE,WAAW,CAAC;IAE9D,IAAI,CAAC,MAAM,EAAE;QACX,OAAO,IAAI,mBAAmB,EAAE,CAAC;KAClC;IAED,IAAI;QACF,OAAO,IAAI,mBAAmB,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;KACpD;IAAC,OAAO,CAAC,EAAE;QACV,OAAO,IAAI,mBAAmB,EAAE,CAAC;KAClC;AACH,CAAC,CAAC","sourcesContent":["import { VMGenericLikeEntityKind } from '../../types/vmLike';\nimport { getLabel, getName, getNamespace } from '@console/shared/src';\nimport { LABEL_USED_TEMPLATE_NAME, LABEL_USED_TEMPLATE_NAMESPACE } from '../../constants/vm';\nimport { TemplateKind } from '@console/internal/module/k8s';\nimport { TemplateValidations } from '../../utils/validations/template/template-validations';\n\nexport const getVMTemplateNamespacedName = (\n  vm: VMGenericLikeEntityKind,\n): { name: string; namespace: string } => {\n  const name = getLabel(vm, LABEL_USED_TEMPLATE_NAME);\n  const namespace = getLabel(vm, LABEL_USED_TEMPLATE_NAMESPACE);\n  return name && namespace ? { name, namespace } : null;\n};\n\nexport const getVMTemplate = (\n  vm: VMGenericLikeEntityKind,\n  templates: TemplateKind[],\n): TemplateKind => {\n  const namespacedName = getVMTemplateNamespacedName(vm);\n  return namespacedName\n    ? templates.find(\n        (template) =>\n          getName(template) === namespacedName.name &&\n          getNamespace(template) === namespacedName.namespace,\n      )\n    : undefined;\n};\n\nexport const getTemplateValidationsFromTemplate = (\n  vmTemplate: TemplateKind,\n): TemplateValidations => {\n  const result = vmTemplate?.metadata?.annotations?.validations;\n\n  if (!result) {\n    return new TemplateValidations();\n  }\n\n  try {\n    return new TemplateValidations(JSON.parse(result));\n  } catch (e) {\n    return new TemplateValidations();\n  }\n};\n"]}]}