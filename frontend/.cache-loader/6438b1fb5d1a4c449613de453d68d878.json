{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/cdrom-vm-modal/cdrom-modal.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/cdrom-vm-modal/cdrom-modal.tsx","mtime":1616735742420},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport { Form, Button, Tooltip, Alert, Text, TextVariants } from '@patternfly/react-core';\nimport { withHandlePromise, } from '@console/internal/components/utils';\nimport { ModalTitle, ModalBody } from '@console/internal/components/factory';\nimport { PlusCircleIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { k8sPatch } from '@console/internal/module/k8s';\nimport { ModalFooter } from '../modal/modal-footer';\nimport { getCDsPatch } from '../../../k8s/patches/vm/vm-cdrom-patches';\nimport { getVMLikeModel, asVM, isWindows } from '../../../selectors/vm';\nimport { getCDRoms, getContainerImageByDisk, getURLSourceByDisk, getPVCSourceByDisk, getStorageSizeByDisk, getStorageClassNameByDisk, isVMRunningOrExpectedRunning, } from '../../../selectors/vm/selectors';\nimport { isValidationError, validateURL } from '../../../utils/validations/common';\nimport { CDRomRow } from './cdrom-row';\nimport { getAvailableCDName } from './helpers';\nimport { initialDisk, WINTOOLS_CONTAINER_NAMES, StorageType } from './constants';\nimport './cdrom-modal.scss';\nimport { useStorageClassConfigMap } from '../../../hooks/storage-class-config-map';\nexport const AddCDButton = ({ className, text, onClick, isDisabled }) => (React.createElement(\"div\", { className: className },\n    React.createElement(Button, { className: \"pf-m-link--align-left\", id: \"vm-cd-add-btn\", variant: \"link\", onClick: onClick, isDisabled: isDisabled, icon: React.createElement(PlusCircleIcon, null) }, text),\n    isDisabled && (React.createElement(Tooltip, { position: \"bottom\", trigger: \"click mouseenter\", entryDelay: 0, exitDelay: 0, content: \"You have reached the maximum amount of CD-ROM drives\" },\n        React.createElement(OutlinedQuestionCircleIcon, null)))));\nexport const CDRomModal = withHandlePromise((props) => {\n    const { vmLikeEntity, handlePromise, inProgress: _inProgress, errorMessage, persistentVolumeClaims, storageClasses, winToolsContainer, cancel, close, } = props;\n    const vm = asVM(vmLikeEntity);\n    const [storageClassConfigMap, isStorageClassConfigMapLoaded] = useStorageClassConfigMap();\n    const inProgress = _inProgress || !isStorageClassConfigMapLoaded;\n    const mapCDsToSource = (cds) => Object.assign({}, ...cds.map(({ name, cdrom, bootOrder }) => {\n        let cd = Object.assign(Object.assign({}, initialDisk), { name,\n            cdrom,\n            bootOrder });\n        const container = getContainerImageByDisk(vm, name);\n        if (container) {\n            if (_.includes(WINTOOLS_CONTAINER_NAMES, container)) {\n                cd = Object.assign(Object.assign({}, cd), { type: StorageType.WINTOOLS, windowsTools: container });\n            }\n            else {\n                cd = Object.assign(Object.assign({}, cd), { type: StorageType.CONTAINER, container });\n            }\n        }\n        const url = getURLSourceByDisk(vm, name);\n        if (url) {\n            const storageClass = getStorageClassNameByDisk(vm, name);\n            const size = getStorageSizeByDisk(vm, cd.name).replace(/[^0-9]/g, '');\n            cd = Object.assign(Object.assign({}, cd), { type: StorageType.URL, url, storageClass, size });\n        }\n        const pvc = getPVCSourceByDisk(vm, name);\n        if (pvc) {\n            cd = Object.assign(Object.assign({}, cd), { type: StorageType.PVC, pvc });\n        }\n        return { [name]: cd };\n    }));\n    const [cds, setCDs] = React.useState(mapCDsToSource(getCDRoms(vm)));\n    const [showRestartAlert, setShowRestartAlert] = React.useState(false);\n    const [shouldPatch, setShouldPatch] = React.useState(false);\n    const onCDChange = (cdName, key, value) => {\n        setShowRestartAlert(true);\n        setShouldPatch(true);\n        const cd = Object.assign(Object.assign({}, cds[cdName]), { [key]: value });\n        if (key === StorageType.URL) {\n            if (isValidationError(validateURL(value))) {\n                cd.isURLValid = false;\n            }\n            else {\n                cd.isURLValid = true;\n            }\n        }\n        setCDs(Object.assign(Object.assign({}, cds), { [cdName]: cd }));\n    };\n    const onCDAdd = () => {\n        const name = getAvailableCDName(Object.values(cds));\n        const newCD = Object.assign(Object.assign({}, initialDisk), { type: StorageType.CONTAINER, name, newCD: true });\n        setShowRestartAlert(true);\n        setShouldPatch(true);\n        setCDs(Object.assign(Object.assign({}, cds), { [name]: newCD }));\n    };\n    const onCDDelete = (cdName) => {\n        setShouldPatch(true);\n        setCDs(_.omit(cds, cdName));\n    };\n    const submit = (e) => __awaiter(void 0, void 0, void 0, function* () {\n        e.preventDefault();\n        if (shouldPatch) {\n            const promise = k8sPatch(getVMLikeModel(vmLikeEntity), vmLikeEntity, getCDsPatch(vmLikeEntity, Object.values(cds), storageClassConfigMap));\n            handlePromise(promise).then(close); // eslint-disable-line promise/catch-or-return\n        }\n        else {\n            close();\n        }\n    });\n    const cdsValue = Object.values(cds);\n    const windowsBool = isWindows(vm);\n    const usedPVCs = cdsValue.map((cd) => cd.pvc);\n    const isFormInvalid = !!cdsValue.find((vol) => !vol.isURLValid) ||\n        !!cdsValue.find((cd) => cd.type === StorageType.PVC && !cd.pvc) ||\n        !!cdsValue.find((cd) => cd.type === StorageType.URL && !cd.storageClass) ||\n        !!cdsValue.find((cd) => cd.type === StorageType.WINTOOLS && !cd.windowsTools);\n    return (React.createElement(\"div\", { className: \"modal-content\" },\n        React.createElement(ModalTitle, null, \"Edit CD-ROMs\"),\n        React.createElement(ModalBody, null,\n            showRestartAlert && isVMRunningOrExpectedRunning(vm) && (React.createElement(Alert, { variant: \"info\", isInline: true, title: \"Changes will be applied when the virtual machine has been restarted\" })),\n            React.createElement(Form, { className: \"pf-l-grid pf-m-gutter\" },\n                _.size(cds) > 0 ? (cdsValue.map((cd, i) => (React.createElement(CDRomRow, { key: `cd-row-${cd.name}`, cd: cd, pvcs: persistentVolumeClaims, usedPVCs: usedPVCs, storageClasses: storageClasses, winToolsContainer: winToolsContainer, index: i, isWindows: windowsBool, inProgress: inProgress, onChange: onCDChange, onDelete: onCDDelete })))) : (React.createElement(Text, { component: TextVariants.h4 }, \"This virtual machine does not have any CD-ROMs attached.\")),\n                React.createElement(AddCDButton, { className: \"kubevirt-add-cd-btn\", text: \"Add CD-ROM\", onClick: onCDAdd, isDisabled: _.size(cds) > 1 }))),\n        React.createElement(ModalFooter, { id: \"cdrom\", errorMessage: errorMessage, inProgress: inProgress, isDisabled: isFormInvalid || inProgress, submitButtonText: \"Save\", onSubmit: submit, onCancel: (e) => {\n                e.stopPropagation();\n                cancel();\n            } })));\n});\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/cdrom-vm-modal/cdrom-modal.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/kubevirt-plugin/src/components/modals/cdrom-vm-modal/cdrom-modal.tsx"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Form, Button, Tooltip, Alert, Text, TextVariants } from '@patternfly/react-core';\nimport {\n  FirehoseResult,\n  HandlePromiseProps,\n  withHandlePromise,\n} from '@console/internal/components/utils';\nimport { ModalTitle, ModalBody, ModalComponentProps } from '@console/internal/components/factory';\nimport { PlusCircleIcon, OutlinedQuestionCircleIcon } from '@patternfly/react-icons';\nimport { k8sPatch } from '@console/internal/module/k8s';\nimport { ModalFooter } from '../modal/modal-footer';\nimport { getCDsPatch } from '../../../k8s/patches/vm/vm-cdrom-patches';\nimport { getVMLikeModel, asVM, isWindows } from '../../../selectors/vm';\nimport {\n  getCDRoms,\n  getContainerImageByDisk,\n  getURLSourceByDisk,\n  getPVCSourceByDisk,\n  getStorageSizeByDisk,\n  getStorageClassNameByDisk,\n  isVMRunningOrExpectedRunning,\n} from '../../../selectors/vm/selectors';\nimport { isValidationError, validateURL } from '../../../utils/validations/common';\nimport { VMLikeEntityKind } from '../../../types/vmLike';\nimport { CDRomRow } from './cdrom-row';\nimport { getAvailableCDName } from './helpers';\nimport { initialDisk, WINTOOLS_CONTAINER_NAMES, StorageType } from './constants';\nimport './cdrom-modal.scss';\nimport { CD, CDMap } from './types';\nimport { VMKind } from '../../../types/vm';\nimport { useStorageClassConfigMap } from '../../../hooks/storage-class-config-map';\n\nexport const AddCDButton = ({ className, text, onClick, isDisabled }: AddCDButtonProps) => (\n  <div className={className}>\n    <Button\n      className=\"pf-m-link--align-left\"\n      id=\"vm-cd-add-btn\"\n      variant=\"link\"\n      onClick={onClick}\n      isDisabled={isDisabled}\n      icon={<PlusCircleIcon />}\n    >\n      {text}\n    </Button>\n    {isDisabled && (\n      <Tooltip\n        position=\"bottom\"\n        trigger=\"click mouseenter\"\n        entryDelay={0}\n        exitDelay={0}\n        content=\"You have reached the maximum amount of CD-ROM drives\"\n      >\n        <OutlinedQuestionCircleIcon />\n      </Tooltip>\n    )}\n  </div>\n);\n\nexport const CDRomModal = withHandlePromise((props: CDRomModalProps) => {\n  const {\n    vmLikeEntity,\n    handlePromise,\n    inProgress: _inProgress,\n    errorMessage,\n    persistentVolumeClaims,\n    storageClasses,\n    winToolsContainer,\n    cancel,\n    close,\n  } = props;\n  const vm = asVM(vmLikeEntity);\n\n  const [storageClassConfigMap, isStorageClassConfigMapLoaded] = useStorageClassConfigMap();\n  const inProgress = _inProgress || !isStorageClassConfigMapLoaded;\n\n  const mapCDsToSource = (cds) =>\n    Object.assign(\n      {},\n      ...cds.map(({ name, cdrom, bootOrder }) => {\n        let cd: CD = {\n          ...initialDisk,\n          name,\n          cdrom,\n          bootOrder,\n        };\n        const container = getContainerImageByDisk(vm, name);\n        if (container) {\n          if (_.includes(WINTOOLS_CONTAINER_NAMES, container)) {\n            cd = {\n              ...cd,\n              type: StorageType.WINTOOLS,\n              windowsTools: container,\n            };\n          } else {\n            cd = { ...cd, type: StorageType.CONTAINER, container };\n          }\n        }\n\n        const url = getURLSourceByDisk(vm, name);\n        if (url) {\n          const storageClass = getStorageClassNameByDisk(vm, name);\n          const size = getStorageSizeByDisk(vm, cd.name).replace(/[^0-9]/g, '');\n          cd = { ...cd, type: StorageType.URL, url, storageClass, size };\n        }\n\n        const pvc = getPVCSourceByDisk(vm, name);\n        if (pvc) {\n          cd = {\n            ...cd,\n            type: StorageType.PVC,\n            pvc,\n          };\n        }\n        return { [name]: cd };\n      }),\n    );\n\n  const [cds, setCDs] = React.useState<CDMap>(mapCDsToSource(getCDRoms(vm)));\n  const [showRestartAlert, setShowRestartAlert] = React.useState<boolean>(false);\n  const [shouldPatch, setShouldPatch] = React.useState<boolean>(false);\n\n  const onCDChange = (cdName: string, key: string, value: string) => {\n    setShowRestartAlert(true);\n    setShouldPatch(true);\n    const cd = { ...cds[cdName], [key]: value };\n    if (key === StorageType.URL) {\n      if (isValidationError(validateURL(value))) {\n        cd.isURLValid = false;\n      } else {\n        cd.isURLValid = true;\n      }\n    }\n    setCDs({ ...cds, [cdName]: cd });\n  };\n\n  const onCDAdd = () => {\n    const name = getAvailableCDName(Object.values(cds));\n    const newCD = {\n      ...initialDisk,\n      type: StorageType.CONTAINER,\n      name,\n      newCD: true,\n    };\n    setShowRestartAlert(true);\n    setShouldPatch(true);\n    setCDs({ ...cds, [name]: newCD });\n  };\n\n  const onCDDelete = (cdName: string) => {\n    setShouldPatch(true);\n    setCDs(_.omit(cds, cdName));\n  };\n\n  const submit = async (e) => {\n    e.preventDefault();\n    if (shouldPatch) {\n      const promise = k8sPatch(\n        getVMLikeModel(vmLikeEntity),\n        vmLikeEntity,\n        getCDsPatch(vmLikeEntity, Object.values(cds), storageClassConfigMap),\n      );\n      handlePromise(promise).then(close); // eslint-disable-line promise/catch-or-return\n    } else {\n      close();\n    }\n  };\n\n  const cdsValue = Object.values(cds);\n  const windowsBool = isWindows(vm);\n  const usedPVCs = cdsValue.map((cd) => cd.pvc);\n  const isFormInvalid =\n    !!cdsValue.find((vol) => !vol.isURLValid) ||\n    !!cdsValue.find((cd) => cd.type === StorageType.PVC && !cd.pvc) ||\n    !!cdsValue.find((cd) => cd.type === StorageType.URL && !cd.storageClass) ||\n    !!cdsValue.find((cd) => cd.type === StorageType.WINTOOLS && !cd.windowsTools);\n\n  return (\n    <div className=\"modal-content\">\n      <ModalTitle>Edit CD-ROMs</ModalTitle>\n      <ModalBody>\n        {showRestartAlert && isVMRunningOrExpectedRunning(vm) && (\n          <Alert\n            variant=\"info\"\n            isInline\n            title=\"Changes will be applied when the virtual machine has been restarted\"\n          />\n        )}\n        <Form className=\"pf-l-grid pf-m-gutter\">\n          {_.size(cds) > 0 ? (\n            cdsValue.map((cd, i) => (\n              <CDRomRow\n                key={`cd-row-${cd.name}`}\n                cd={cd}\n                pvcs={persistentVolumeClaims}\n                usedPVCs={usedPVCs}\n                storageClasses={storageClasses}\n                winToolsContainer={winToolsContainer}\n                index={i}\n                isWindows={windowsBool}\n                inProgress={inProgress}\n                onChange={onCDChange}\n                onDelete={onCDDelete}\n              />\n            ))\n          ) : (\n            <Text component={TextVariants.h4}>\n              This virtual machine does not have any CD-ROMs attached.\n            </Text>\n          )}\n          <AddCDButton\n            className=\"kubevirt-add-cd-btn\"\n            text=\"Add CD-ROM\"\n            onClick={onCDAdd}\n            isDisabled={_.size(cds) > 1}\n          />\n        </Form>\n      </ModalBody>\n      <ModalFooter\n        id=\"cdrom\"\n        errorMessage={errorMessage}\n        inProgress={inProgress}\n        isDisabled={isFormInvalid || inProgress}\n        submitButtonText=\"Save\"\n        onSubmit={submit}\n        onCancel={(e) => {\n          e.stopPropagation();\n          cancel();\n        }}\n      />\n    </div>\n  );\n});\n\ntype AddCDButtonProps = {\n  className: string;\n  text: string;\n  isDisabled: boolean;\n  onClick: () => void;\n};\n\ntype CDRomModalProps = HandlePromiseProps &\n  ModalComponentProps & {\n    vmLikeEntity: VMLikeEntityKind;\n    persistentVolumeClaims?: FirehoseResult<VMKind[]>;\n    storageClasses?: FirehoseResult<VMKind[]>;\n    winToolsContainer: string;\n  };\n"]}]}