{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/event-sources/EventSourceSection.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/event-sources/EventSourceSection.tsx","mtime":1615298458640},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\nimport { useFormikContext } from 'formik';\nimport * as _ from 'lodash';\nimport { useFormikValidationFix } from '@console/shared';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport AppSection from '@console/dev-console/src/components/import/app/AppSection';\nimport { ProjectModel } from '@console/internal/models';\nimport CronJobSection from './CronJobSection';\nimport SinkBindingSection from './SinkBindingSection';\nimport ApiServerSection from './ApiServerSection';\nimport ContainerSourceSection from './ContainerSourceSection';\nimport PingSourceSection from './PingSourceSection';\nimport KafkaSourceSection from './KafkaSourceSection';\nimport YAMLEditorSection from './YAMLEditorSection';\nimport { EventSources } from '../import-types';\nimport SinkSection from './SinkSection';\nimport AdvancedSection from '../AdvancedSection';\nimport { isKnownEventSource } from '../../../utils/create-eventsources-utils';\nconst EventSourceSection = ({ namespace }) => {\n    const { values } = useFormikContext();\n    const projectResource = { kind: ProjectModel.kind, prop: ProjectModel.id, isList: true };\n    const [data, loaded] = useK8sWatchResource(projectResource);\n    useFormikValidationFix(values);\n    if (!values.type) {\n        return null;\n    }\n    let EventSource;\n    switch (values.type) {\n        case EventSources.CronJobSource:\n            EventSource = React.createElement(CronJobSection, null);\n            break;\n        case EventSources.SinkBinding:\n            EventSource = React.createElement(SinkBindingSection, null);\n            break;\n        case EventSources.ApiServerSource:\n            EventSource = React.createElement(ApiServerSection, null);\n            break;\n        case EventSources.KafkaSource:\n            EventSource = React.createElement(KafkaSourceSection, null);\n            break;\n        case EventSources.ContainerSource:\n            EventSource = React.createElement(ContainerSourceSection, null);\n            break;\n        case EventSources.PingSource:\n            EventSource = React.createElement(PingSourceSection, null);\n            break;\n        default:\n            EventSource = React.createElement(YAMLEditorSection, null);\n    }\n    return (React.createElement(React.Fragment, null,\n        EventSource,\n        isKnownEventSource(values.type) && (React.createElement(React.Fragment, null,\n            React.createElement(SinkSection, { namespace: namespace }),\n            React.createElement(AppSection, { project: values.project, noProjectsAvailable: loaded && _.isEmpty(data), extraMargin: true }))),\n        values.type === EventSources.KafkaSource && React.createElement(AdvancedSection, null)));\n};\nexport default EventSourceSection;\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/event-sources/EventSourceSection.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/knative-plugin/src/components/add/event-sources/EventSourceSection.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAC/B,OAAO,EAAE,gBAAgB,EAAgB,MAAM,QAAQ,CAAC;AACxD,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAC5B,OAAO,EAAE,sBAAsB,EAAE,MAAM,iBAAiB,CAAC;AACzD,OAAO,EAAE,mBAAmB,EAAE,MAAM,mDAAmD,CAAC;AAExF,OAAO,UAAU,MAAM,2DAA2D,CAAC;AACnF,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AACxD,OAAO,cAAc,MAAM,kBAAkB,CAAC;AAC9C,OAAO,kBAAkB,MAAM,sBAAsB,CAAC;AACtD,OAAO,gBAAgB,MAAM,oBAAoB,CAAC;AAClD,OAAO,sBAAsB,MAAM,0BAA0B,CAAC;AAC9D,OAAO,iBAAiB,MAAM,qBAAqB,CAAC;AACpD,OAAO,kBAAkB,MAAM,sBAAsB,CAAC;AACtD,OAAO,iBAAiB,MAAM,qBAAqB,CAAC;AACpD,OAAO,EAAE,YAAY,EAAE,MAAM,iBAAiB,CAAC;AAC/C,OAAO,WAAW,MAAM,eAAe,CAAC;AACxC,OAAO,eAAe,MAAM,oBAAoB,CAAC;AACjD,OAAO,EAAE,kBAAkB,EAAE,MAAM,0CAA0C,CAAC;AAM9E,MAAM,kBAAkB,GAAsC,CAAC,EAAE,SAAS,EAAE,EAAE,EAAE;IAC9E,MAAM,EAAE,MAAM,EAAE,GAAG,gBAAgB,EAAgB,CAAC;IACpD,MAAM,eAAe,GAAG,EAAE,IAAI,EAAE,YAAY,CAAC,IAAI,EAAE,IAAI,EAAE,YAAY,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,CAAC;IACzF,MAAM,CAAC,IAAI,EAAE,MAAM,CAAC,GAAG,mBAAmB,CAAoB,eAAe,CAAC,CAAC;IAC/E,sBAAsB,CAAC,MAAM,CAAC,CAAC;IAC/B,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE;QAChB,OAAO,IAAI,CAAC;KACb;IACD,IAAI,WAA+B,CAAC;IACpC,QAAQ,MAAM,CAAC,IAAI,EAAE;QACnB,KAAK,YAAY,CAAC,aAAa;YAC7B,WAAW,GAAG,oBAAC,cAAc,OAAG,CAAC;YACjC,MAAM;QACR,KAAK,YAAY,CAAC,WAAW;YAC3B,WAAW,GAAG,oBAAC,kBAAkB,OAAG,CAAC;YACrC,MAAM;QACR,KAAK,YAAY,CAAC,eAAe;YAC/B,WAAW,GAAG,oBAAC,gBAAgB,OAAG,CAAC;YACnC,MAAM;QACR,KAAK,YAAY,CAAC,WAAW;YAC3B,WAAW,GAAG,oBAAC,kBAAkB,OAAG,CAAC;YACrC,MAAM;QACR,KAAK,YAAY,CAAC,eAAe;YAC/B,WAAW,GAAG,oBAAC,sBAAsB,OAAG,CAAC;YACzC,MAAM;QACR,KAAK,YAAY,CAAC,UAAU;YAC1B,WAAW,GAAG,oBAAC,iBAAiB,OAAG,CAAC;YACpC,MAAM;QACR;YACE,WAAW,GAAG,oBAAC,iBAAiB,OAAG,CAAC;KACvC;IACD,OAAO,CACL;QACG,WAAW;QACX,kBAAkB,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAClC;YACE,oBAAC,WAAW,IAAC,SAAS,EAAE,SAAS,GAAI;YACrC,oBAAC,UAAU,IACT,OAAO,EAAE,MAAM,CAAC,OAAO,EACvB,mBAAmB,EAAE,MAAM,IAAI,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAC9C,WAAW,SACX,CACD,CACJ;QACA,MAAM,CAAC,IAAI,KAAK,YAAY,CAAC,WAAW,IAAI,oBAAC,eAAe,OAAG,CAC/D,CACJ,CAAC;AACJ,CAAC,CAAC;AAEF,eAAe,kBAAkB,CAAC","sourcesContent":["import * as React from 'react';\nimport { useFormikContext, FormikValues } from 'formik';\nimport * as _ from 'lodash';\nimport { useFormikValidationFix } from '@console/shared';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport AppSection from '@console/dev-console/src/components/import/app/AppSection';\nimport { ProjectModel } from '@console/internal/models';\nimport CronJobSection from './CronJobSection';\nimport SinkBindingSection from './SinkBindingSection';\nimport ApiServerSection from './ApiServerSection';\nimport ContainerSourceSection from './ContainerSourceSection';\nimport PingSourceSection from './PingSourceSection';\nimport KafkaSourceSection from './KafkaSourceSection';\nimport YAMLEditorSection from './YAMLEditorSection';\nimport { EventSources } from '../import-types';\nimport SinkSection from './SinkSection';\nimport AdvancedSection from '../AdvancedSection';\nimport { isKnownEventSource } from '../../../utils/create-eventsources-utils';\n\ninterface EventSourceSectionProps {\n  namespace: string;\n}\n\nconst EventSourceSection: React.FC<EventSourceSectionProps> = ({ namespace }) => {\n  const { values } = useFormikContext<FormikValues>();\n  const projectResource = { kind: ProjectModel.kind, prop: ProjectModel.id, isList: true };\n  const [data, loaded] = useK8sWatchResource<K8sResourceKind[]>(projectResource);\n  useFormikValidationFix(values);\n  if (!values.type) {\n    return null;\n  }\n  let EventSource: React.ReactElement;\n  switch (values.type) {\n    case EventSources.CronJobSource:\n      EventSource = <CronJobSection />;\n      break;\n    case EventSources.SinkBinding:\n      EventSource = <SinkBindingSection />;\n      break;\n    case EventSources.ApiServerSource:\n      EventSource = <ApiServerSection />;\n      break;\n    case EventSources.KafkaSource:\n      EventSource = <KafkaSourceSection />;\n      break;\n    case EventSources.ContainerSource:\n      EventSource = <ContainerSourceSection />;\n      break;\n    case EventSources.PingSource:\n      EventSource = <PingSourceSection />;\n      break;\n    default:\n      EventSource = <YAMLEditorSection />;\n  }\n  return (\n    <>\n      {EventSource}\n      {isKnownEventSource(values.type) && (\n        <>\n          <SinkSection namespace={namespace} />\n          <AppSection\n            project={values.project}\n            noProjectsAvailable={loaded && _.isEmpty(data)}\n            extraMargin\n          />\n        </>\n      )}\n      {values.type === EventSources.KafkaSource && <AdvancedSection />}\n    </>\n  );\n};\n\nexport default EventSourceSection;\n"]}]}