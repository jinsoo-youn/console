{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/hooks/fullscreen.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/hooks/fullscreen.ts","mtime":1615298458610},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["var _a;\nimport * as React from 'react';\nconst spec = {\n    requestFullscreen: 'requestFullscreen',\n    exitFullscreen: 'exitFullscreen',\n    fullscreenElement: 'fullscreenElement',\n    fullscreenEnabled: 'fullscreenEnabled',\n    fullscreenchange: 'fullscreenchange',\n    fullscreenerror: 'fullscreenerror',\n};\nconst moz = {\n    requestFullscreen: 'mozRequestFullscreen',\n    exitFullscreen: 'mozExitFullscreen',\n    fullscreenElement: 'mozFullscreenElement',\n    fullscreenEnabled: 'mozFullscreenEnabled',\n    fullscreenchange: 'mozfullscreenchange',\n    fullscreenerror: 'mozfullscreenerror',\n};\nconst webkit = {\n    requestFullscreen: 'webkitRequestFullscreen',\n    exitFullscreen: 'webkitExitFullscreen',\n    fullscreenElement: 'webkitFullscreenElement',\n    fullscreenEnabled: 'webkitFullscreenEnabled',\n    fullscreenchange: 'webkitfullscreenchange',\n    fullscreenerror: 'webkitfullscreenerror',\n};\nconst ms = {\n    requestFullscreen: 'msRequestFullscreen',\n    exitFullscreen: 'msExitFullscreen',\n    fullscreenElement: 'msFullscreenElement',\n    fullscreenEnabled: 'msFullscreenEnabled',\n    fullscreenchange: 'msfullscreenchange',\n    fullscreenerror: 'msfullscreenerror',\n};\nconst allPrefixes = [spec, moz, webkit, ms];\nconst nativeAPI = (_a = (function (doc) {\n    return allPrefixes.find((x) => !!doc[x.fullscreenEnabled]);\n})(document)) !== null && _a !== void 0 ? _a : spec;\nexport const useFullscreen = () => {\n    const [isFullscreen, setIsFullscreen] = React.useState(false);\n    const fullscreenRef = React.useRef(isFullscreen);\n    fullscreenRef.current = isFullscreen;\n    const elementRef = React.useRef();\n    const listener = React.useCallback((event) => {\n        setIsFullscreen(document[nativeAPI.fullscreenElement] === event.target);\n    }, []);\n    const targetCallbackRef = React.useCallback((node) => {\n        if (document[nativeAPI.fullscreenEnabled]) {\n            if (elementRef.current && elementRef.current !== node) {\n                elementRef.current.removeEventListener(nativeAPI.fullscreenchange, listener);\n                elementRef.current.removeEventListener(nativeAPI.fullscreenerror, listener);\n            }\n            if (node != null) {\n                elementRef.current = node;\n                node.addEventListener(nativeAPI.fullscreenchange, listener);\n                node.addEventListener(nativeAPI.fullscreenerror, listener);\n            }\n        }\n    }, [listener]);\n    const fullscreenToggleCallback = React.useCallback(() => {\n        if (elementRef.current && document[nativeAPI.fullscreenEnabled]) {\n            fullscreenRef.current\n                ? document[nativeAPI.exitFullscreen]()\n                : elementRef.current[nativeAPI.requestFullscreen]();\n        }\n    }, []);\n    return [\n        isFullscreen,\n        targetCallbackRef,\n        fullscreenToggleCallback,\n        document[nativeAPI.fullscreenEnabled],\n    ];\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/hooks/fullscreen.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/console-shared/src/hooks/fullscreen.ts"],"names":[],"mappings":"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","sourcesContent":["import * as React from 'react';\n\ntype FullScreenAPI = {\n  requestFullscreen: string;\n  exitFullscreen: string;\n  fullscreenElement: string;\n  fullscreenEnabled: string;\n  fullscreenchange: string;\n  fullscreenerror: string;\n};\n\nconst spec: FullScreenAPI = {\n  requestFullscreen: 'requestFullscreen',\n  exitFullscreen: 'exitFullscreen',\n  fullscreenElement: 'fullscreenElement',\n  fullscreenEnabled: 'fullscreenEnabled',\n  fullscreenchange: 'fullscreenchange',\n  fullscreenerror: 'fullscreenerror',\n};\n\nconst moz: FullScreenAPI = {\n  requestFullscreen: 'mozRequestFullscreen',\n  exitFullscreen: 'mozExitFullscreen',\n  fullscreenElement: 'mozFullscreenElement',\n  fullscreenEnabled: 'mozFullscreenEnabled',\n  fullscreenchange: 'mozfullscreenchange',\n  fullscreenerror: 'mozfullscreenerror',\n};\n\nconst webkit: FullScreenAPI = {\n  requestFullscreen: 'webkitRequestFullscreen',\n  exitFullscreen: 'webkitExitFullscreen',\n  fullscreenElement: 'webkitFullscreenElement',\n  fullscreenEnabled: 'webkitFullscreenEnabled',\n  fullscreenchange: 'webkitfullscreenchange',\n  fullscreenerror: 'webkitfullscreenerror',\n};\n\nconst ms: FullScreenAPI = {\n  requestFullscreen: 'msRequestFullscreen',\n  exitFullscreen: 'msExitFullscreen',\n  fullscreenElement: 'msFullscreenElement',\n  fullscreenEnabled: 'msFullscreenEnabled',\n  fullscreenchange: 'msfullscreenchange',\n  fullscreenerror: 'msfullscreenerror',\n};\n\nconst allPrefixes: FullScreenAPI[] = [spec, moz, webkit, ms];\n\nconst nativeAPI: FullScreenAPI =\n  (function(doc) {\n    return allPrefixes.find((x: FullScreenAPI) => !!doc[x.fullscreenEnabled]);\n  })(document) ?? spec;\n\nexport const useFullscreen = <T extends HTMLElement>(): [\n  boolean,\n  (node: T) => void,\n  () => void,\n  boolean,\n] => {\n  const [isFullscreen, setIsFullscreen] = React.useState<boolean>(false);\n  const fullscreenRef = React.useRef<boolean>(isFullscreen);\n  fullscreenRef.current = isFullscreen;\n  const elementRef = React.useRef<any>();\n\n  const listener = React.useCallback((event) => {\n    setIsFullscreen(document[nativeAPI.fullscreenElement] === event.target);\n  }, []);\n\n  const targetCallbackRef = React.useCallback(\n    (node: T) => {\n      if (document[nativeAPI.fullscreenEnabled]) {\n        if (elementRef.current && elementRef.current !== node) {\n          elementRef.current.removeEventListener(nativeAPI.fullscreenchange, listener);\n          elementRef.current.removeEventListener(nativeAPI.fullscreenerror, listener);\n        }\n        if (node != null) {\n          elementRef.current = node;\n          node.addEventListener(nativeAPI.fullscreenchange, listener);\n          node.addEventListener(nativeAPI.fullscreenerror, listener);\n        }\n      }\n    },\n    [listener],\n  );\n\n  const fullscreenToggleCallback = React.useCallback(() => {\n    if (elementRef.current && document[nativeAPI.fullscreenEnabled]) {\n      fullscreenRef.current\n        ? document[nativeAPI.exitFullscreen]()\n        : elementRef.current[nativeAPI.requestFullscreen]();\n    }\n  }, []);\n\n  return [\n    isFullscreen,\n    targetCallbackRef,\n    fullscreenToggleCallback,\n    document[nativeAPI.fullscreenEnabled],\n  ];\n};\n"]}]}