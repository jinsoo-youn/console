{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/public/components/safety-first.tsx","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/safety-first.tsx","mtime":1616735742480},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as React from 'react';\n/**\n * You should pretty much always use this if you are setting React state asynchronously and your component could be unmounted.\n * (https://github.com/facebook/react/issues/14113)\n */\nexport const useSafetyFirst = (initialState) => {\n    const mounted = React.useRef(true);\n    React.useEffect(() => () => (mounted.current = false), []);\n    const [value, setValue] = React.useState(initialState);\n    const setValueSafe = React.useCallback((newValue) => {\n        if (mounted.current) {\n            setValue(newValue);\n        }\n    }, []);\n    return [value, setValueSafe];\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/public/components/safety-first.tsx","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/public/components/safety-first.tsx"],"names":[],"mappings":"AAAA,OAAO,KAAK,KAAK,MAAM,OAAO,CAAC;AAE/B;;;GAGG;AACH,MAAM,CAAC,MAAM,cAAc,GAAG,CAC5B,YAA2B,EACmB,EAAE;IAChD,MAAM,OAAO,GAAG,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;IACnC,KAAK,CAAC,SAAS,CAAC,GAAG,EAAE,CAAC,GAAG,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,GAAG,KAAK,CAAC,EAAE,EAAE,CAAC,CAAC;IAE3D,MAAM,CAAC,KAAK,EAAE,QAAQ,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,YAAY,CAAC,CAAC;IACvD,MAAM,YAAY,GAAG,KAAK,CAAC,WAAW,CAAC,CAAC,QAAW,EAAE,EAAE;QACrD,IAAI,OAAO,CAAC,OAAO,EAAE;YACnB,QAAQ,CAAC,QAAQ,CAAC,CAAC;SACpB;IACH,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,OAAO,CAAC,KAAK,EAAE,YAAY,CAAC,CAAC;AAC/B,CAAC,CAAC","sourcesContent":["import * as React from 'react';\n\n/**\n * You should pretty much always use this if you are setting React state asynchronously and your component could be unmounted.\n * (https://github.com/facebook/react/issues/14113)\n */\nexport const useSafetyFirst = <S extends any>(\n  initialState: S | (() => S),\n): [S, React.Dispatch<React.SetStateAction<S>>] => {\n  const mounted = React.useRef(true);\n  React.useEffect(() => () => (mounted.current = false), []);\n\n  const [value, setValue] = React.useState(initialState);\n  const setValueSafe = React.useCallback((newValue: S) => {\n    if (mounted.current) {\n      setValue(newValue);\n    }\n  }, []);\n\n  return [value, setValueSafe];\n};\n"]}]}