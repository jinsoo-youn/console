{"remainingRequest":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js??ref--5-1!/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js??ref--5-2!/home/jinsoo/hypercloud-console5.0/frontend/packages/noobaa-storage-plugin/src/table-filters.ts","dependencies":[{"path":"/home/jinsoo/hypercloud-console5.0/frontend/packages/noobaa-storage-plugin/src/table-filters.ts","mtime":1615298458680},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/cache-loader/dist/cjs.js","mtime":1607306270906},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/thread-loader/dist/cjs.js","mtime":1607306283100},{"path":"/home/jinsoo/hypercloud-console5.0/frontend/node_modules/ts-loader/index.js","mtime":1607306283339}],"contextDependencies":[],"result":["import * as _ from 'lodash';\nimport { getPhase } from './utils';\nconst allPhases = ['Pending', 'Bound', 'Lost'];\nexport const obcStatusFilter = {\n    type: 'obc-status',\n    filterGroupName: 'Status',\n    reducer: getPhase,\n    items: _.map(allPhases, (phase) => ({\n        id: phase,\n        title: phase,\n    })),\n    filter: (phases, obc) => {\n        if (!phases || !phases.selected) {\n            return true;\n        }\n        const phase = getPhase(obc);\n        return (phases.selected.has(phase) || !_.includes(phases.all, phase) || _.isEmpty(phases.selected));\n    },\n};\nexport const obStatusFilter = {\n    type: 'ob-status',\n    filterGroupName: 'Status',\n    reducer: getPhase,\n    items: _.map(allPhases, (phase) => ({\n        id: phase,\n        title: phase,\n    })),\n    filter: (phases, ob) => {\n        if (!phases || !phases.selected) {\n            return true;\n        }\n        const phase = getPhase(ob);\n        return (phases.selected.has(phase) || !_.includes(phases.all, phase) || _.isEmpty(phases.selected));\n    },\n};\n",{"version":3,"file":"/home/jinsoo/hypercloud-console5.0/frontend/packages/noobaa-storage-plugin/src/table-filters.ts","sourceRoot":"","sources":["/home/jinsoo/hypercloud-console5.0/frontend/packages/noobaa-storage-plugin/src/table-filters.ts"],"names":[],"mappings":"AAAA,OAAO,KAAK,CAAC,MAAM,QAAQ,CAAC;AAE5B,OAAO,EAAE,QAAQ,EAAE,MAAM,SAAS,CAAC;AAEnC,MAAM,SAAS,GAAG,CAAC,SAAS,EAAE,OAAO,EAAE,MAAM,CAAC,CAAC;AAE/C,MAAM,CAAC,MAAM,eAAe,GAAc;IACxC,IAAI,EAAE,YAAY;IAClB,eAAe,EAAE,QAAQ;IACzB,OAAO,EAAE,QAAQ;IACjB,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAClC,EAAE,EAAE,KAAK;QACT,KAAK,EAAE,KAAK;KACb,CAAC,CAAC;IACH,MAAM,EAAE,CAAC,MAAM,EAAE,GAAG,EAAE,EAAE;QACtB,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;YAC/B,OAAO,IAAI,CAAC;SACb;QACD,MAAM,KAAK,GAAG,QAAQ,CAAC,GAAG,CAAC,CAAC;QAC5B,OAAO,CACL,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAC3F,CAAC;IACJ,CAAC;CACF,CAAC;AAEF,MAAM,CAAC,MAAM,cAAc,GAAc;IACvC,IAAI,EAAE,WAAW;IACjB,eAAe,EAAE,QAAQ;IACzB,OAAO,EAAE,QAAQ;IACjB,KAAK,EAAE,CAAC,CAAC,GAAG,CAAC,SAAS,EAAE,CAAC,KAAK,EAAE,EAAE,CAAC,CAAC;QAClC,EAAE,EAAE,KAAK;QACT,KAAK,EAAE,KAAK;KACb,CAAC,CAAC;IACH,MAAM,EAAE,CAAC,MAAM,EAAE,EAAE,EAAE,EAAE;QACrB,IAAI,CAAC,MAAM,IAAI,CAAC,MAAM,CAAC,QAAQ,EAAE;YAC/B,OAAO,IAAI,CAAC;SACb;QACD,MAAM,KAAK,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC;QAC3B,OAAO,CACL,MAAM,CAAC,QAAQ,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,MAAM,CAAC,GAAG,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,QAAQ,CAAC,CAC3F,CAAC;IACJ,CAAC;CACF,CAAC","sourcesContent":["import * as _ from 'lodash';\nimport { RowFilter } from '@console/internal/components/filter-toolbar';\nimport { getPhase } from './utils';\n\nconst allPhases = ['Pending', 'Bound', 'Lost'];\n\nexport const obcStatusFilter: RowFilter = {\n  type: 'obc-status',\n  filterGroupName: 'Status',\n  reducer: getPhase,\n  items: _.map(allPhases, (phase) => ({\n    id: phase,\n    title: phase,\n  })),\n  filter: (phases, obc) => {\n    if (!phases || !phases.selected) {\n      return true;\n    }\n    const phase = getPhase(obc);\n    return (\n      phases.selected.has(phase) || !_.includes(phases.all, phase) || _.isEmpty(phases.selected)\n    );\n  },\n};\n\nexport const obStatusFilter: RowFilter = {\n  type: 'ob-status',\n  filterGroupName: 'Status',\n  reducer: getPhase,\n  items: _.map(allPhases, (phase) => ({\n    id: phase,\n    title: phase,\n  })),\n  filter: (phases, ob) => {\n    if (!phases || !phases.selected) {\n      return true;\n    }\n    const phase = getPhase(ob);\n    return (\n      phases.selected.has(phase) || !_.includes(phases.all, phase) || _.isEmpty(phases.selected)\n    );\n  },\n};\n"]}]}