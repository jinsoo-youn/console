{"version":3,"file":"pipeline-resource-list-78f99230c47dc01f4ed5.js","sources":["webpack:///./packages/dev-console/src/components/charts/HorizontalStackedBars.scss?1886","webpack:///./packages/dev-console/src/components/charts/HorizontalStackedBars.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/status/LinkedPipelineRunTaskStatus.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/status/PipelineBars.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/status/PipelineTaskStatus.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/status/TaskStatusTooltip.scss?a429","webpack:///./packages/dev-console/src/components/pipelineruns/status/TaskStatusTooltip.tsx","webpack:///./packages/dev-console/src/components/pipelines/PipelinesResourceList.tsx","webpack:///./packages/dev-console/src/components/pipelines/list-page/PipelineAugmentRuns.tsx","webpack:///./packages/dev-console/src/components/pipelines/list-page/PipelineAugmentRunsWrapper.tsx","webpack:///./packages/dev-console/src/components/pipelines/list-page/PipelineHeader.tsx","webpack:///./packages/dev-console/src/components/pipelines/list-page/PipelineList.tsx","webpack:///./packages/dev-console/src/components/pipelines/list-page/PipelineRow.tsx","webpack:///./packages/dev-console/src/components/pipelines/list-page/PipelineRowKebabActions.tsx","webpack:///./packages/dev-console/src/components/pipelines/list-page/pipeline-table.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport classNames from 'classnames';\nimport './HorizontalStackedBars.scss';\n\nexport type StackedValue = {\n  color: string;\n  name: string;\n  size: number;\n};\n\nexport type HorizontalStackedBarsProps = {\n  barGap?: number;\n  height?: number | string;\n  inline?: boolean;\n  values: StackedValue[];\n  width?: number | string;\n};\n\nconst HorizontalStackedBars: React.FC<HorizontalStackedBarsProps> = ({\n  barGap,\n  height,\n  inline,\n  values,\n  width,\n}) => {\n  return (\n    <div\n      className={classNames('odc-horizontal-stacked-bars', { 'is-inline': inline })}\n      style={{ height, width, ['--bar-gap' as any]: barGap && `${barGap}px` }}\n    >\n      <div className=\"odc-horizontal-stacked-bars__bars\">\n        {values.map(({ color, name, size }) => (\n          <div\n            key={name}\n            className=\"odc-horizontal-stacked-bars__data-bar\"\n            style={{\n              background: color,\n              flexGrow: size,\n            }}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default HorizontalStackedBars;\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { resourcePathFromModel } from '@console/internal/components/utils';\nimport { Pipeline, PipelineRun } from '../../../utils/pipeline-augment';\nimport { PipelineRunModel } from '../../../models';\nimport { PipelineTaskStatus } from './PipelineTaskStatus';\n\nexport interface LinkedPipelineRunTaskStatusProps {\n  pipeline?: Pipeline;\n  pipelineRun: PipelineRun;\n}\n\n/**\n * Will attempt to render a link to the log file associated with the pipelineRun if it has the data.\n * If it does not, it'll just render the pipeline status.\n */\nconst LinkedPipelineRunTaskStatus: React.FC<LinkedPipelineRunTaskStatusProps> = ({\n  pipeline,\n  pipelineRun,\n}) => {\n  const pipelineStatus = (\n    <PipelineTaskStatus\n      key={pipelineRun.metadata?.name}\n      pipeline={pipeline}\n      pipelinerun={pipelineRun}\n    />\n  );\n\n  if (pipelineRun.metadata?.name && pipelineRun.metadata?.namespace) {\n    return (\n      <Link\n        to={`${resourcePathFromModel(\n          PipelineRunModel,\n          pipelineRun.metadata.name,\n          pipelineRun.metadata.namespace,\n        )}/logs`}\n      >\n        {pipelineStatus}\n      </Link>\n    );\n  }\n\n  return pipelineStatus;\n};\n\nexport default LinkedPipelineRunTaskStatus;\n","import * as React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport HorizontalStackedBars from '../../charts/HorizontalStackedBars';\nimport {\n  getTaskStatus,\n  runStatus,\n  getRunStatusColor,\n  Pipeline,\n  PipelineRun,\n} from '../../../utils/pipeline-augment';\nimport TaskStatusToolTip from './TaskStatusTooltip';\n\nexport interface PipelineBarProps {\n  pipelinerun: PipelineRun;\n  pipeline?: { data: Pipeline };\n}\n\nexport const PipelineBars: React.FC<PipelineBarProps> = ({ pipelinerun, pipeline }) => {\n  const taskStatus = getTaskStatus(pipelinerun, pipeline?.data);\n\n  return (\n    <Tooltip content={<TaskStatusToolTip taskStatus={taskStatus} />}>\n      <HorizontalStackedBars\n        height=\"1em\"\n        inline\n        values={Object.keys(runStatus).map((status) => ({\n          color: getRunStatusColor(runStatus[status]).pftoken.value,\n          name: status,\n          size: taskStatus[runStatus[status]],\n        }))}\n      />\n    </Tooltip>\n  );\n};\n","import * as React from 'react';\nimport { Firehose } from '@console/internal/components/utils';\nimport { PipelineRun, Pipeline } from '../../../utils/pipeline-augment';\nimport { PipelineModel } from '../../../models';\nimport { PipelineBars } from './PipelineBars';\n\nexport interface PipelineTaskStatusProps {\n  pipelinerun: PipelineRun;\n  pipeline?: Pipeline;\n}\n\nexport const PipelineTaskStatus: React.FC<PipelineTaskStatusProps> = ({\n  pipelinerun,\n  pipeline,\n}) => {\n  return !pipeline && pipelinerun.spec?.pipelineRef?.name && pipelinerun.metadata?.namespace ? (\n    <Firehose\n      resources={[\n        {\n          name: pipelinerun.spec.pipelineRef.name,\n          namespace: pipelinerun.metadata.namespace,\n          kind: PipelineModel.kind,\n          isList: false,\n          prop: 'pipeline',\n        },\n      ]}\n    >\n      <PipelineBars pipelinerun={pipelinerun} />\n    </Firehose>\n  ) : (\n    <PipelineBars pipelinerun={pipelinerun} pipeline={{ data: pipeline }} />\n  );\n};\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { TaskStatus, runStatus, getRunStatusColor } from '../../../utils/pipeline-augment';\nimport './TaskStatusTooltip.scss';\n\ninterface TaskStatusToolTipProps {\n  taskStatus: TaskStatus;\n}\n\nconst TaskStatusToolTip: React.FC<TaskStatusToolTipProps> = ({ taskStatus }) => {\n  return (\n    <div className=\"odc-task-status-tooltip\">\n      {Object.keys(runStatus).map((status) => {\n        const { message, pftoken } = getRunStatusColor(status);\n        return taskStatus[status] ? (\n          <React.Fragment key={status}>\n            <div\n              className=\"odc-task-status-tooltip__legend\"\n              style={{ background: pftoken.value }}\n            />\n            <div>\n              {status === runStatus.PipelineNotStarted || status === runStatus.FailedToStart\n                ? message\n                : `${taskStatus[status]} ${message}`}\n            </div>\n          </React.Fragment>\n        ) : null;\n      })}\n    </div>\n  );\n};\n\nexport default TaskStatusToolTip;\n","import * as React from 'react';\nimport { getBadgeFromType } from '@console/shared';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { Firehose } from '@console/internal/components/utils';\nimport { FireMan_ as FireMan } from '@console/internal/components/factory';\nimport { PipelineModel } from '../../models';\nimport PipelineAugmentRunsWrapper from './list-page/PipelineAugmentRunsWrapper';\nimport { filters } from './list-page/PipelineAugmentRuns';\n\ninterface PipelinesResourceListProps extends React.ComponentProps<typeof FireMan> {\n  namespace: string;\n}\n\nconst PipelinesResourceList: React.FC<PipelinesResourceListProps> = (props) => {\n  const { namespace, showTitle = true } = props;\n\n  const resources = [\n    {\n      isList: true,\n      kind: referenceForModel(PipelineModel),\n      namespace,\n      prop: PipelineModel.id,\n      filters: { ...filters },\n    },\n  ];\n\n  return (\n    <FireMan\n      {...props}\n      canCreate\n      createButtonText={`Create ${PipelineModel.label}`}\n      createProps={{\n        to: namespace\n          ? `/k8s/ns/${namespace}/${referenceForModel(PipelineModel)}/~new/builder`\n          : `/k8s/cluster/${referenceForModel(PipelineModel)}/~new`,\n      }}\n      createAccessReview={{ model: PipelineModel, namespace }}\n      filterLabel=\"by name\"\n      textFilter=\"name\"\n      resources={resources}\n      title={showTitle ? PipelineModel.labelPlural : null}\n      badge={getBadgeFromType(PipelineModel.badge)}\n    >\n      <Firehose resources={resources}>\n        <PipelineAugmentRunsWrapper />\n      </Firehose>\n    </FireMan>\n  );\n};\n\nexport default PipelinesResourceList;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { inject } from '@console/internal/components/utils';\nimport { K8sKind } from '@console/internal/module/k8s';\nimport { augmentRunsToData, PropPipelineData, KeyedRuns } from '../../../utils/pipeline-augment';\nimport { ListFilterId, ListFilterLabels } from '../../../utils/pipeline-utils';\nimport {\n  pipelineFilterReducer,\n  pipelineStatusFilter,\n} from '../../../utils/pipeline-filter-reducer';\n\ninterface ListPipelineData extends K8sKind {\n  data: PropPipelineData[];\n}\nexport const filters = [\n  {\n    filterGroupName: 'Status',\n    type: 'pipeline-status',\n    reducer: pipelineFilterReducer,\n    items: [\n      { id: ListFilterId.Succeeded, title: ListFilterLabels[ListFilterId.Succeeded] },\n      { id: ListFilterId.Running, title: ListFilterLabels[ListFilterId.Running] },\n      { id: ListFilterId.Failed, title: ListFilterLabels[ListFilterId.Failed] },\n      { id: ListFilterId.Cancelled, title: ListFilterLabels[ListFilterId.Cancelled] },\n      { id: ListFilterId.Other, title: ListFilterLabels[ListFilterId.Other] },\n    ],\n    filter: pipelineStatusFilter,\n  },\n];\n\nexport type PipelineAugmentRunsProps = {\n  data?: PropPipelineData[];\n  propsReferenceForRuns?: string[];\n  pipeline?: ListPipelineData;\n  reduxIDs?: string[];\n  applyFilter?: () => void;\n  filters?: Record<string, any>[];\n};\n// Firehose injects a lot of props and some of those are considered the KeyedRuns\nconst PipelineAugmentRuns: React.FC<PipelineAugmentRunsProps> = ({\n  propsReferenceForRuns,\n  ...props\n}) => {\n  const allFilters = {\n    ...props.filters,\n    ...(_.get(props.pipeline, 'filters.name') && { name: _.get(props.pipeline, 'filters.name') }),\n  };\n  const resourceData =\n    props.pipeline && props.pipeline.data && propsReferenceForRuns\n      ? augmentRunsToData(props.pipeline.data, propsReferenceForRuns, props as KeyedRuns)\n      : null;\n\n  const children = inject(props.children, {\n    ...props,\n    filters: allFilters,\n    resources: { pipeline: { data: resourceData } },\n  });\n  return <>{children}</>;\n};\n\nexport default PipelineAugmentRuns;\n","import * as _ from 'lodash';\nimport * as React from 'react';\nimport { ListPageWrapper_ as ListPageWrapper } from '@console/internal/components/factory';\nimport { Firehose } from '@console/internal/components/utils';\nimport { Resource, getResources } from '../../../utils/pipeline-augment';\nimport { PipelineModel } from '../../../models';\nimport PipelineAugmentRuns, { filters } from './PipelineAugmentRuns';\nimport PipelineList from './PipelineList';\n\ninterface PipelineAugmentRunsWrapperProps {\n  pipeline?: any;\n  reduxIDs?: string[];\n}\n\nconst PipelineAugmentRunsWrapper: React.FC<PipelineAugmentRunsWrapperProps> = (props) => {\n  const pipelineData = _.get(props.pipeline, 'data', []);\n  if (pipelineData.length < 1) {\n    return (\n      <div className=\"cos-status-box\">\n        <div className=\"text-center\">No {PipelineModel.labelPlural} Found</div>\n      </div>\n    );\n  }\n  const firehoseResources: Resource = getResources(props.pipeline.data);\n  return (\n    <Firehose resources={firehoseResources.resources}>\n      <PipelineAugmentRuns\n        {...props}\n        propsReferenceForRuns={firehoseResources.propsReferenceForRuns}\n      >\n        <ListPageWrapper\n          flatten={(_resources) => _.get(_resources, ['pipeline', 'data'], {})}\n          kinds={['Pipeline']}\n          ListComponent={PipelineList}\n          rowFilters={filters}\n        />\n      </PipelineAugmentRuns>\n    </Firehose>\n  );\n};\n\nexport default PipelineAugmentRunsWrapper;\n","import { sortable } from '@patternfly/react-table';\nimport { tableColumnClasses } from './pipeline-table';\n\nconst PipelineHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Last Run',\n      sortField: 'latestRun.metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Task Status',\n      sortField: 'latestRun.status.succeededCondition',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: 'Last Run Status',\n      sortField: 'latestRun.status.succeededCondition',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: 'Last Run Time',\n      sortField: 'latestRun.status.completionTime',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[5] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[6] },\n    },\n  ];\n};\n\nexport default PipelineHeader;\n","import * as React from 'react';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { Table } from '@console/internal/components/factory';\nimport { PropPipelineData } from '../../../utils/pipeline-augment';\nimport { PipelineModel } from '../../../models';\nimport PipelineHeader from './PipelineHeader';\nimport PipelineRow from './PipelineRow';\n\nexport interface PipelineListProps {\n  data?: PropPipelineData[];\n}\n\nconst PipelineList: React.FC<PipelineListProps> = (props) => {\n  return (\n    <Table\n      {...props}\n      defaultSortField=\"latestRun.status.completionTime\"\n      defaultSortOrder={SortByDirection.desc}\n      aria-label={PipelineModel.labelPlural}\n      Header={PipelineHeader}\n      Row={PipelineRow}\n      virtualize\n    />\n  );\n};\n\nexport default PipelineList;\n","import * as React from 'react';\nimport { Status } from '@console/shared';\nimport { TableRow, TableData, RowFunction } from '@console/internal/components/factory';\nimport { ResourceLink, Timestamp } from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { pipelineFilterReducer } from '../../../utils/pipeline-filter-reducer';\nimport { Pipeline } from '../../../utils/pipeline-augment';\nimport { PipelineModel, PipelineRunModel } from '../../../models';\nimport LinkedPipelineRunTaskStatus from '../../pipelineruns/status/LinkedPipelineRunTaskStatus';\nimport { tableColumnClasses } from './pipeline-table';\nimport PipelineRowKebabActions from './PipelineRowKebabActions';\n\nconst pipelineReference = referenceForModel(PipelineModel);\nconst pipelinerunReference = referenceForModel(PipelineRunModel);\n\nconst PipelineRow: RowFunction<Pipeline> = ({ obj, index, key, style }) => {\n  return (\n    <TableRow\n      id={obj.metadata.uid}\n      data-test-id={`${obj.metadata.namespace}-${obj.metadata.name}`}\n      index={index}\n      trKey={key}\n      style={style}\n    >\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={pipelineReference}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n          title={obj.metadata.name}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[1]}>\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        {obj.latestRun && obj.latestRun.metadata && obj.latestRun.metadata.name ? (\n          <ResourceLink\n            kind={pipelinerunReference}\n            name={obj.latestRun.metadata.name}\n            namespace={obj.latestRun.metadata.namespace}\n          />\n        ) : (\n          '-'\n        )}\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        {obj.latestRun ? (\n          <LinkedPipelineRunTaskStatus pipeline={obj} pipelineRun={obj.latestRun} />\n        ) : (\n          '-'\n        )}\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <Status status={pipelineFilterReducer(obj)} />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        {(obj.latestRun && obj.latestRun.status && obj.latestRun.status.completionTime && (\n          <Timestamp timestamp={obj.latestRun.status.completionTime} />\n        )) ||\n          '-'}\n      </TableData>\n      <TableData className={tableColumnClasses[6]}>\n        <PipelineRowKebabActions pipeline={obj} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport default PipelineRow;\n","import * as React from 'react';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { ResourceKebab } from '@console/internal/components/utils';\nimport { getPipelineKebabActions } from '../../../utils/pipeline-actions';\nimport { Pipeline, PipelineRun } from '../../../utils/pipeline-augment';\nimport { PipelineModel } from '../../../models';\nimport { usePipelineTriggerTemplateNames } from '../utils/triggers';\n\ntype PipelineRowKebabActionsProps = {\n  pipeline: Pipeline;\n  pipelineRun?: PipelineRun;\n};\n\nconst pipelineReference = referenceForModel(PipelineModel);\n\nconst PipelineRowKebabActions: React.FC<PipelineRowKebabActionsProps> = ({ pipeline, pipelineRun }) => {\n  const {\n    metadata: { name, namespace },\n  } = pipeline;\n  const templateNames = usePipelineTriggerTemplateNames(name, namespace) || [];\n\n  return (\n    <ResourceKebab\n      actions={getPipelineKebabActions(pipeline.latestRun ?? pipelineRun, templateNames.length > 0)}\n      kind={pipelineReference}\n      resource={pipeline}\n    />\n  );\n};\n\nexport default PipelineRowKebabActions;\n","import { Kebab } from '@console/internal/components/utils';\n\nexport const tableColumnClasses = [\n  'col-lg-2 col-md-3 col-sm-4 col-xs-4', // name\n  'col-lg-2 col-md-3 col-sm-3 col-xs-3', // namespace\n  'col-lg-2 col-md-4 col-sm-5 col-xs-5', // last run\n  'col-lg-2 col-md-2 hidden-sm hidden-xs', // task status\n  'col-lg-2 hidden-md hidden-sm hidden-xs', // last run status\n  'col-lg-2 hidden-md hidden-sm hidden-xs', // last run time\n  Kebab.columnClass,\n];\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAgBA;AAOA;AAKA;AAMA;AACA;AACA;AAMA;AAEA;;;;;;;;;;;;;AC9CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAOA;;;AAGA;AACA;;AAIA;AAQA;AACA;AAWA;AAEA;AACA;AAEA;;;;;;;;;;;;;AC7CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAOA;AAOA;AACA;AAEA;AAEA;AAIA;AACA;AACA;AACA;AAIA;;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAOA;;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;;;;;;;;;;;;AChCA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAMA;AACA;AAGA;AACA;AAEA;AAIA;AAEA;AACA;AAIA;AAGA;AAEA;;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AAQA;AACA;AAIA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClDA;AACA;AACA;AAEA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AAAA;AAIA;AAIA;AAEA;AACA;AAEA;AAKA;AACA;AAEA;;;;;;;;;;;;;AC5DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAEA;;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AAIA;AASA;AAEA;;;;;;;;;;;;;ACzCA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AChDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AAWA;AAEA;;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAQA;AACA;AAOA;AACA;AAEA;AAWA;AAOA;AACA;AAEA;AAIA;AAEA;AACA;AAIA;AAEA;;;;;;;;;;;;;ACrEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAOA;AAEA;;AACA;AAGA;AAEA;AAOA;AAEA;;;;;;;;;;;;;AC9BA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}