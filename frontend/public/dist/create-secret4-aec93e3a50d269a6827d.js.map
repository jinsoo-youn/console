{"version":3,"file":"create-secret4-aec93e3a50d269a6827d.js","sources":["webpack:///./public/components/hypercloud/form/create-form.tsx","webpack:///./public/components/hypercloud/form/taskruns/create-taskrun.tsx","webpack:///./public/components/hypercloud/utils/list-view.tsx","webpack:///./public/components/hypercloud/utils/resource-dropdown.tsx"],"sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Link } from 'react-router-dom';\nimport { useForm, FormProvider } from 'react-hook-form';\nimport { DevTool } from '@hookform/devtools';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { k8sCreate, referenceFor, K8sResourceKind, modelFor } from '../../../module/k8s';\nimport { pluralToKind } from './';\nimport { ButtonBar, history, resourceObjPath } from '../../utils';\nimport { Section } from '../utils/section';\n\nexport const WithCommonForm = (SubForm, params, defaultValues, modal?: boolean) => {\n  const FormComponent: React.FC<CommonFormProps_> = props => {\n    const methods = useForm({ defaultValues: defaultValues });\n\n    const kind = pluralToKind.get(params.plural)?.['kind'];\n    const title = `${props.titleVerb} ${params?.type === 'form' ? '' : params.type || 'Sample'} ${kind || ''}`;\n\n    const [inProgress] = React.useState(false); // onSubmit이나 나중에 Error관련 메서드에서 inProgress를 false로 변경해줘야함.\n    const model = kind && modelFor(kind);\n    const namespaced = model?.namespaced;\n    const plural = model?.plural;\n\n    const onClick = methods.handleSubmit(data => {\n      let inDo = _.defaultsDeep(props.fixed, data);\n      inDo = props.onSubmitCallback(inDo);\n      k8sCreate(model, inDo)\n        .then(() => {\n          history.push(resourceObjPath(inDo, referenceFor(model)));\n        })\n        .catch(e => {\n          console.error(e.message);\n        });\n    });\n    return (\n      <FormProvider {...methods}>\n        <div className=\"co-m-pane__body\">\n          <Helmet>\n            <title>{title}</title>\n          </Helmet>\n          <form className=\"co-m-pane__body-group co-m-pane__form\">\n            <h1 className=\"co-m-pane__heading co-m-pane__heading--baseline\">\n              <div className=\"co-m-pane__name\">{title}</div>\n              <div className=\"co-m-pane__heading-link\">\n                <Link to={namespaced ? `/k8s/ns/${params.ns}/${plural}/~new` : `/k8s/cluster/${plural}/~new`} id=\"yaml-link\" replace>\n                  Edit YAML\n                </Link>\n              </div>\n            </h1>\n            <p className=\"co-m-pane__explanation\">{props.explanation}</p>\n            <fieldset>\n              <Section label=\"Name\" id=\"name\" isRequired={true}>\n                <input className=\"pf-c-form-control\" id=\"name\" name=\"metadata.name\" ref={methods.register} />\n              </Section>\n            </fieldset>\n            <SubForm isCreate={props.isCreate} />\n            <ButtonBar inProgress={inProgress}>\n              <ActionGroup className=\"pf-c-form\">\n                <Button type=\"button\" variant=\"primary\" id=\"save-changes\" onClick={onClick}>\n                  {props.saveButtonText || 'Create'}\n                </Button>\n                <Button type=\"button\" variant=\"secondary\" id=\"cancel\" onClick={history.goBack}>\n                  Cancel\n                </Button>\n              </ActionGroup>\n            </ButtonBar>\n          </form>\n          <DevTool control={methods.control} />\n        </div>\n      </FormProvider>\n    );\n  };\n  return FormComponent;\n};\n\ntype CommonFormProps_ = {\n  obj?: K8sResourceKind;\n  fixed: object;\n  isCreate: boolean;\n  titleVerb: string;\n  onSubmitCallback: Function;\n  saveButtonText?: string;\n  explanation?: string;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport { useFormContext } from 'react-hook-form';\nimport { match as RMatch } from 'react-router';\nimport { useTranslation } from 'react-i18next';\nimport { WithCommonForm } from '../create-form';\nimport { Section } from '../../utils/section';\nimport { ListView } from '../../utils/list-view';\nimport { ResourceDropdown } from '../../utils/resource-dropdown';\nimport { k8sGet } from '../../../../module/k8s';\nimport { TaskModel, PipelineResourceModel, ServiceAccountModel, TaskRunModel } from '../../../../models';\nimport { Button } from '@patternfly/react-core';\nimport store from '../../../../redux';\nimport { getActiveNamespace } from '@console/internal/reducers/ui';\n\nconst defaultValues = {\n  metadata: {\n    name: 'example-name',\n  },\n};\n\nconst taskRunFormFactory = params => {\n  return WithCommonForm(CreateTaskRunComponent, params, defaultValues);\n};\n\nconst paramItemRenderer = (register, name, item, index, ListActions, ListDefaultIcons) => {\n  return (\n    <div className=\"row\" key={item.id}>\n      <div className=\"col-xs-4 pairs-list__value-field\">\n        <input ref={register()} className=\"pf-c-form-control\" defaultValue={item.value} name={`${name}[${index}].value`} />\n      </div>\n      <div className=\"col-xs-1 pairs-list__action\">\n        <Button\n          type=\"button\"\n          data-test-id=\"pairs-list__delete-btn\"\n          className=\"pairs-list__span-btns\"\n          onClick={() => {\n            ListActions.remove(index);\n          }}\n          variant=\"plain\"\n        >\n          {ListDefaultIcons.deleteIcon}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\nconst CreateTaskRunComponent: React.FC<TaskRunFormProps> = props => {\n  const { t } = useTranslation();\n  const methods = useFormContext();\n  const [selectedTask, setSelectedTask] = useState('');\n  const [inputList, setInputList] = useState([]);\n  const [outputList, setOutputList] = useState([]);\n  const [paramList, setParamList] = useState([]);\n  const [workspaceList, setWorkspaceList] = useState([]);\n\n  const namespace = getActiveNamespace(store.getState());\n\n  const getTaskDetails = async selectedTaskName => {\n    const task = await k8sGet(TaskModel, selectedTaskName, getActiveNamespace(store.getState()));\n\n    const inputsData = task.spec?.resources?.inputs?.map(input => {\n      return {\n        name: input.name,\n        required: !input.optional,\n        type: input.type,\n        description: input.description,\n      };\n    });\n    const outputsData = task.spec?.resources?.outputs?.map(output => {\n      return {\n        name: output.name,\n        required: !output.optional,\n        type: output.type,\n        description: output.description,\n      };\n    });\n\n    setInputList(inputsData || []);\n    setOutputList(outputsData || []);\n\n    const paramValueListData = task.spec?.params?.map(param => {\n      if (param.type === 'array') {\n        const valueList = param.default.map(value => {\n          return {\n            value: value,\n          };\n        });\n        return { value: valueList };\n      } else {\n        return { value: param.default };\n      }\n    });\n\n    // MEMO : ListView의 value를 세팅해주는 방법이 reset이 최선일까..?\n    // MEMO : reset할 때 params 부분 이외에 다른 value들은 그대로 있게 하기 위해 이렇게 함.\n    const prevValues = methods.getValues();\n    methods.reset({ ...prevValues, params: paramValueListData });\n\n    const paramsData = task.spec?.params?.map(param => {\n      return {\n        name: param.name,\n        value: param.default,\n        description: param.description,\n        type: param.type,\n        required: !!param.default,\n      };\n    });\n\n    setParamList(paramsData || []);\n\n    const workspacesData = task.spec?.workspaces?.map(workspace => {\n      return {\n        name: workspace.name,\n        description: workspace.description,\n      };\n    });\n    setWorkspaceList(workspacesData || []);\n  };\n\n  const inputs = inputList.map((item, index) => {\n    return (\n      <Section label={`${item.name} (${item.type})`} id={`input_${index}`} key={`input_${index}`} isRequired={item.required} description={item.description}>\n        <>\n          <input ref={methods.register} type=\"hidden\" id={`spec.resources.inputs[${index}].name`} name={`spec.resources.inputs[${index}].name`} value={item.name} />\n          <ResourceDropdown name={`spec.resources.inputs[${index}].resourceRef.name`} placeholder={t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_8')} resources={[{ kind: PipelineResourceModel.kind, namespace: namespace, prop: 'pipelineresource' }]} type=\"single\" useHookForm />\n        </>\n      </Section>\n    );\n  });\n\n  const outputs = outputList.map((item, index) => {\n    return (\n      <Section label={`${item.name} (${item.type})`} id={`output_${index}`} key={`output_${index}`} isRequired={item.required} description={item.description}>\n        <>\n          <input ref={methods.register} type=\"hidden\" id={`spec.resources.outputs[${index}].name`} name={`spec.resources.outputs[${index}].name`} value={item.name} />\n          <ResourceDropdown name={`spec.resources.outputs[${index}].resourceRef.name`} placeholder={t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_8')} resources={[{ kind: PipelineResourceModel.kind, namespace: namespace, prop: 'pipelineresource' }]} type=\"single\" useHookForm />\n        </>\n      </Section>\n    );\n  });\n\n  const params = paramList.map((item, index) => {\n    if (item.type === 'array') {\n      return (\n        <Section label={item.name} id={`${selectedTask}_param_${index}`} key={`${selectedTask}_param_${index}`}>\n          <>\n            <input ref={methods.register} type=\"hidden\" id={`params[${index}].name`} name={`params[${index}].name`} value={item.name} />\n            <ListView name={`params[${index}].value`} methods={methods} addButtonText=\"추가\" headerFragment={<></>} itemRenderer={paramItemRenderer} defaultItem={{ value: '' }} />\n          </>\n        </Section>\n      );\n    } else {\n      return (\n        <Section label={item.name} id={`${selectedTask}_param_${index}`} key={`${selectedTask}_param_${index}`}>\n          <>\n            <input ref={methods.register} type=\"hidden\" id={`params[${index}].name`} name={`params[${index}].name`} value={item.name} />\n            <input ref={methods.register} className=\"pf-c-form-control\" id={`params[${index}].value`} name={`params[${index}].value`} defaultValue={item.value} />\n          </>\n        </Section>\n      );\n    }\n  });\n\n  const workspaces = workspaceList.map((item, index) => {\n    return (\n      <Section label={item.name} description={item.description} key={index} id={`workspace_${index}_${item.name}`}>\n        <></>\n      </Section>\n    );\n  });\n\n  const onTaskSelect = selectedTaskName => {\n    setSelectedTask(selectedTaskName);\n    getTaskDetails(selectedTaskName);\n  };\n\n  return (\n    <>\n      <Section label={t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_5')} id=\"task\">\n        <ResourceDropdown name=\"spec.taskRef.name\" placeholder={t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_5')} resources={[{ kind: TaskModel.kind, namespace: namespace, prop: 'task' }]} onChange={onTaskSelect} type=\"single\" useHookForm />\n      </Section>\n      <Section label={t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_7')} id=\"inputresource\">\n        <div>{inputs}</div>\n      </Section>\n      <Section label={t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_9')} id=\"outputresource\">\n        <div>{outputs}</div>\n      </Section>\n      <Section label={t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_6')} id=\"taskparameter\">\n        <div>{params}</div>\n      </Section>\n      <Section label=\"워크스페이스\" id=\"workspace\">\n        <div>{workspaces}</div>\n      </Section>\n      <Section label={t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_11')} id=\"timeout\" description={t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_13')}>\n        <div>\n          <input ref={methods.register} className=\"pf-c-form-control\" id=\"time_input\" name=\"spec.timeout\" type=\"number\" placeholder=\"예: 60, 120, 30\" /> 분\n        </div>\n      </Section>\n      <Section label={t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_14')} id=\"serviceaccount\" description={t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_16')} isRequired={true}>\n        <ResourceDropdown name=\"spec.serviceAccountName\" placeholder={t('SINGLE:MSG_TASKRUNS_CREATEFORM_DIV2_15')} resources={[{ kind: ServiceAccountModel.kind, namespace: namespace, prop: 'serviceaccount' }]} type=\"single\" useHookForm />\n      </Section>\n    </>\n  );\n};\n\nexport const CreateTaskRun: React.FC<CreateTaskRunProps> = ({ match: { params }, kind }) => {\n  const formComponent = taskRunFormFactory(params);\n  const TaskRunFormComponent = formComponent;\n\n  return <TaskRunFormComponent fixed={{ apiVersion: `${TaskRunModel.apiGroup}/${TaskRunModel.apiVersion}`, kind, metadata: { namespace: params.ns } }} explanation={''} titleVerb=\"Create\" onSubmitCallback={onSubmitCallback} isCreate={true} />;\n};\n\nconst changeTimeoutFormat = timeout => {\n  timeout = Number(timeout);\n  if (timeout == 0) {\n    return 0;\n  }\n  if (timeout >= 60) {\n    return `${(timeout - (timeout % 60)) / 60}h${timeout % 60}m`;\n  } else return `${timeout}m`;\n};\n\nexport const onSubmitCallback = data => {\n  let params = _.cloneDeep(data.params);\n  const formattedTimeout = changeTimeoutFormat(data.spec.timeout);\n  delete data.params;\n  delete data.spec.timeout;\n  const prettyParams = params?.map(param => {\n    if (Array.isArray(param.value)) {\n      const valueList = param.value.map(obj => {\n        return obj.value;\n      });\n      return { name: param.name, value: valueList };\n    } else {\n      return { name: param.name, value: param.value };\n    }\n  });\n  data = _.defaultsDeep(data, { kind: TaskRunModel.kind, spec: { params: prettyParams, timeout: formattedTimeout } });\n  // console.log('data? ', data);\n  return data;\n};\n\ntype CreateTaskRunProps = {\n  match: RMatch<{\n    ns?: string;\n  }>;\n  kind: string;\n  fixed: object;\n  explanation: string;\n  titleVerb: string;\n  saveButtonText?: string;\n  isCreate: boolean;\n};\n\ntype TaskRunFormProps = {};\n","import { useFormContext, useFieldArray } from 'react-hook-form';\nimport * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Button } from '@patternfly/react-core';\nimport { MinusCircleIcon, PlusCircleIcon } from '@patternfly/react-icons';\nexport const ListView: React.FC<ListViewProps> = ({ name, methods, defaultItem = { key: '', value: '' }, itemRenderer, headerFragment, addButtonText }) => {\n  const { control, register, getValues } = methods ? methods : useFormContext();\n  const { fields, append, remove } = useFieldArray({ control, name: name });\n\n  const DefaultListHeaderFragment = (\n    <div className=\"row pairs-list__heading\">\n      <div className=\"col-xs-4 text-secondary text-uppercase\">KEY</div>\n      <div className=\"col-xs-4 text-secondary text-uppercase\">VALUE</div>\n      <div className=\"col-xs-1 co-empty__header\" />\n    </div>\n  );\n\n  const DefaultListItemRenderer = (register, name, item, index, ListActions, ListDefaultIcons) => {\n    return (\n      <div className=\"row\" key={item.id}>\n        <div className=\"col-xs-4 pairs-list__name-field\">\n          <input ref={register()} className=\"pf-c-form-control\" name={`${name}[${index}].key`} defaultValue={item.key}></input>\n        </div>\n        <div className=\"col-xs-4 pairs-list__value-field\">\n          <input ref={register()} className=\"pf-c-form-control\" name={`${name}[${index}].value`} defaultValue={item.value}></input>\n        </div>\n        <div className=\"col-xs-1 pairs-list__action\">\n          <Button\n            type=\"button\"\n            data-test-id=\"pairs-list__delete-btn\"\n            className=\"pairs-list__span-btns\"\n            onClick={() => {\n              ListActions.remove(index);\n            }}\n            variant=\"plain\"\n          >\n            {ListDefaultIcons.deleteIcon}\n          </Button>\n        </div>\n      </div>\n    );\n  };\n\n  const deleteIcon = (\n    <>\n      <MinusCircleIcon className=\"pairs-list__side-btn pairs-list__delete-icon\" />\n      <span className=\"sr-only\">Delete</span>\n    </>\n  );\n\n  const ListActions = {\n    append: append,\n    remove: remove,\n    getValues: getValues,\n  };\n\n  const ListDefaultIcons = {\n    deleteIcon: deleteIcon,\n  };\n\n  const itemList = itemRenderer ? fields.map((item, index) => itemRenderer(register, name, item, index, ListActions, ListDefaultIcons)) : fields.map((item, index) => DefaultListItemRenderer(register, name, item, index, ListActions, ListDefaultIcons));\n\n  return (\n    <div>\n      {headerFragment ? headerFragment : DefaultListHeaderFragment}\n      {itemList}\n      <div className=\"row col-xs-12\">\n        <Button\n          className=\"pf-m-link--align-left\"\n          data-test-id=\"pairs-list__add-btn\"\n          onClick={() => {\n            append(defaultItem);\n          }}\n          type=\"button\"\n          variant=\"link\"\n        >\n          <PlusCircleIcon data-test-id=\"pairs-list__add-icon\" className=\"co-icon-space-r\" />\n          {!!addButtonText ? addButtonText : 'Add'}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\ntype ListViewProps = {\n  name: string;\n  defaultItem?: object;\n  itemRenderer?: Function;\n  headerFragment?: JSX.Element;\n  addButtonText?: string;\n  methods?: any;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Firehose, FirehoseResult, FirehoseResource, LoadingInline } from '@console/internal/components/utils';\nimport { ResourceListDropdown, SingleResourceDropdownProps, MultipleResourceDropdownProps } from './resource-list-dropdown';\n\nconst ResourceDropdownWrapper_: React.FC<ResourceDropdownWrapperProps> = (props) => {\n  const getItems = (resources) => {\n    const items = [];\n    _.each(resources, (resource, k) => {\n      if (resource.loaded) {\n        const kind = resource.kind;\n        _.each(\n          resource.data,\n          (item) => {\n            item.kind = kind;\n            items.push(item);\n          }\n        );\n      }\n    })\n    return items;\n  };\n\n  //const [title, setTitle] = React.useState(props.loaded ? props.placeholder : <LoadingInline />);\n  const [rows, setRows] = React.useState(props.loaded ? getItems(props.resources) : []);\n\n  React.useEffect(() => {\n    if (props.loaded) {\n      //setTitle(props.placeholder);\n      setRows(getItems(props.resources));\n    }\n  }, [props.loaded]);\n\n  return (\n    <ResourceListDropdown\n      {...props}\n      title={!props.loaded ? <LoadingInline /> : props.title}\n      resourceList={rows} // 필수\n      autocompletePlaceholder=\"search by name\"\n    />\n  )\n}\n\ntype ResourceDropdownWrapperProps = (SingleResourceDropdownProps | MultipleResourceDropdownProps) & {\n  loaded?: boolean;\n  resources?: FirehoseResult[];\n}\n\nexport const ResourceDropdown: React.FC<ResourceDropdownProps> = ({ resources, ...props }) => {\n  resources.map((resource)=>Object.assign(resource, {isList: true}));\n  return (\n    <Firehose resources={resources}>\n      <ResourceDropdownWrapper_ {...props} />\n    </Firehose>\n  )\n}\n\ntype ResourceDropdownProps = (SingleResourceDropdownProps | MultipleResourceDropdownProps) & {\n  resources: FirehoseResource[];\n}"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AAMA;AAIA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1EA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAAA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AAQA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAIA;AACA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAQA;AAOA;AAAA;AACA;AACA;AAEA;AAGA;;;;;A","sourceRoot":""}