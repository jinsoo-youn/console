{"version":3,"file":"dev-console-monitoring~monitoring-overview-ebb945e5201586c6c2b7.js","sources":["webpack:///./packages/dev-console/src/components/monitoring/dashboard/MonitoringDashboardGraph.scss?dcb2","webpack:///./packages/dev-console/src/components/monitoring/dashboard/MonitoringDashboardGraph.tsx","webpack:///./packages/dev-console/src/components/monitoring/queries.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport { QueryBrowser, QueryObj } from '@console/internal/components/monitoring/query-browser';\nimport { Humanize } from '@console/internal/components/utils';\nimport { ByteDataTypes } from '@console/shared/src/graph-helper/data-utils';\nimport { PrometheusGraphLink } from '@console/internal/components/graphs/prometheus-graph';\nimport { queryBrowserPatchQuery } from '@console/internal/actions/ui';\nimport './MonitoringDashboardGraph.scss';\n\nexport enum GraphTypes {\n  area = 'Area',\n  line = 'Line',\n}\n\ntype DispatchProps = {\n  patchQuery: (patch: QueryObj) => void;\n};\n\ntype OwnProps = {\n  title: string;\n  query: string;\n  namespace: string;\n  graphType?: GraphTypes;\n  humanize: Humanize;\n  byteDataType: ByteDataTypes;\n  timespan?: number;\n  pollInterval?: number;\n};\n\ntype MonitoringDashboardGraphProps = OwnProps & DispatchProps;\n\nconst DEFAULT_TIME_SPAN = 30 * 60 * 1000;\nconst DEFAULT_SAMPLES = 30;\n\nexport const MonitoringDashboardGraph: React.FC<MonitoringDashboardGraphProps> = ({\n  query,\n  namespace,\n  title,\n  patchQuery,\n  graphType = GraphTypes.area,\n  timespan,\n  pollInterval,\n}) => {\n  return (\n    <DashboardCard className=\"odc-monitoring-dashboard-graph\">\n      <DashboardCardHeader>\n        <DashboardCardTitle>{title}</DashboardCardTitle>\n      </DashboardCardHeader>\n      <DashboardCardBody>\n        <PrometheusGraphLink query={query}>\n          <div onMouseEnter={() => patchQuery({ query })}>\n            <QueryBrowser\n              hideControls\n              defaultTimespan={DEFAULT_TIME_SPAN}\n              defaultSamples={DEFAULT_SAMPLES}\n              namespace={namespace}\n              queries={[query]}\n              isStack={graphType === GraphTypes.area}\n              timespan={timespan}\n              pollInterval={pollInterval}\n            />\n          </div>\n        </PrometheusGraphLink>\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n};\n\nconst mapDispatchToProps = (dispatch): DispatchProps => ({\n  patchQuery: (v: QueryObj) => dispatch(queryBrowserPatchQuery(0, v)),\n});\n\nexport default connect<{}, DispatchProps, OwnProps>(\n  null,\n  mapDispatchToProps,\n)(MonitoringDashboardGraph);\n","import * as _ from 'lodash';\nimport { GraphTypes } from './dashboard/MonitoringDashboardGraph';\nimport {\n  Humanize,\n  humanizeBinaryBytes,\n  humanizeCpuCores,\n  humanizeDecimalBytesPerSec,\n} from '@console/internal/components/utils';\nimport { ByteDataTypes } from '@console/shared/src/graph-helper/data-utils';\n\nexport interface MonitoringQuery {\n  query: _.TemplateExecutor;\n  chartType: GraphTypes;\n  title: string;\n  humanize: Humanize;\n  byteDataType: ByteDataTypes;\n}\n\nexport const metricsQuery = {\n  PODS_BY_CPU: 'CPU Usage',\n  PODS_BY_MEMORY: 'Memory Usage',\n  PODS_BY_FILESYSTEM: 'Filesystem Usage',\n  PODS_BY_NETWORK_IN: 'Receive Bandwidth',\n  PODS_BY_NETWORK_OUT: 'Transmit Bandwidth',\n  RATE_OF_RECEIVED_PACKETS: 'Rate of Received Packets',\n  RATE_OF_TRANSMITTED_PACKETS: 'Rate of Transmitted Packets',\n  RATE_OF_RECEIVED_PACKETS_DROPPED: 'Rate of Received Packets Dropped',\n  RATE_OF_TRANSMITTED_PACKETS_DROPPED: 'Rate of Transmitted Packets Dropped',\n};\n\nexport const monitoringDashboardQueries: MonitoringQuery[] = [\n  {\n    query: _.template(\n      `sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_rate{cluster=\"\", namespace='<%= namespace %>'}) by (pod)`,\n    ),\n    chartType: GraphTypes.area,\n    title: 'CPU Usage',\n    humanize: humanizeCpuCores,\n    byteDataType: ByteDataTypes.BinaryBytes,\n  },\n  {\n    query: _.template(\n      `sum(container_memory_working_set_bytes{cluster=\"\", container!=\"\", namespace='<%= namespace %>'}) by (pod)`,\n    ),\n    chartType: GraphTypes.area,\n    title: 'Memory Usage',\n    humanize: humanizeBinaryBytes,\n    byteDataType: ByteDataTypes.BinaryBytes,\n  },\n  {\n    query: _.template(\n      `sum(irate(container_network_receive_bytes_total{cluster=\"\", namespace='<%= namespace %>'}[2h])) by (pod)`,\n    ),\n    chartType: GraphTypes.area,\n    title: 'Receive Bandwidth',\n    humanize: humanizeDecimalBytesPerSec,\n    byteDataType: ByteDataTypes.BinaryBytes,\n  },\n  {\n    query: _.template(\n      `sum(irate(container_network_transmit_bytes_total{cluster=\"\", namespace='<%= namespace %>'}[2h])) by (pod)`,\n    ),\n    chartType: GraphTypes.area,\n    title: 'Transmit Bandwidth',\n    humanize: humanizeDecimalBytesPerSec,\n    byteDataType: ByteDataTypes.BinaryBytes,\n  },\n  {\n    query: _.template(\n      `sum(irate(container_network_receive_packets_total{cluster=\"\", namespace='<%= namespace %>'}[2h])) by (pod)`,\n    ),\n    chartType: GraphTypes.area,\n    title: 'Rate of Received Packets',\n    humanize: humanizeDecimalBytesPerSec,\n    byteDataType: ByteDataTypes.BinaryBytes,\n  },\n  {\n    query: _.template(\n      `sum(irate(container_network_transmit_packets_total{cluster=\"\", namespace='<%= namespace %>'}[2h])) by (pod)`,\n    ),\n    chartType: GraphTypes.area,\n    title: 'Rate of Transmitted Packets',\n    humanize: humanizeDecimalBytesPerSec,\n    byteDataType: ByteDataTypes.BinaryBytes,\n  },\n  {\n    query: _.template(\n      `sum(irate(container_network_receive_packets_dropped_total{cluster=\"\", namespace='<%= namespace %>'}[2h])) by (pod)`,\n    ),\n    chartType: GraphTypes.area,\n    title: 'Rate of Received Packets Dropped',\n    humanize: humanizeDecimalBytesPerSec,\n    byteDataType: ByteDataTypes.BinaryBytes,\n  },\n  {\n    query: _.template(\n      `sum(irate(container_network_transmit_packets_dropped_total{cluster=\"\", namespace='<%= namespace %>'}[2h])) by (pod)`,\n    ),\n    chartType: GraphTypes.area,\n    title: 'Rate of Transmitted Packets Dropped',\n    humanize: humanizeDecimalBytesPerSec,\n    byteDataType: ByteDataTypes.BinaryBytes,\n  },\n];\n\nexport const topWorkloadMetricsQueries: MonitoringQuery[] = [\n  {\n    title: 'CPU Usage',\n    chartType: GraphTypes.area,\n    humanize: humanizeCpuCores,\n    byteDataType: ByteDataTypes.BinaryBytes,\n    query: _.template(\n      `sum(node_namespace_pod_container:container_cpu_usage_seconds_total:sum_rate{cluster='', namespace='<%= namespace %>'}\n          * on(namespace,pod) group_left(workload, workload_type) mixin_pod_workload{cluster='',\n          namespace='<%= namespace %>', workload='<%= workloadName %>', workload_type='<%= workloadType %>'}) by (pod)`,\n    ),\n  },\n  {\n    title: 'Memory Usage',\n    chartType: GraphTypes.area,\n    humanize: humanizeBinaryBytes,\n    byteDataType: ByteDataTypes.BinaryBytes,\n    query: _.template(\n      `sum(container_memory_working_set_bytes{cluster='', namespace='<%= namespace %>', container!=\"\"}\n          * on(namespace,pod) group_left(workload, workload_type) mixin_pod_workload{cluster='',\n          namespace='<%= namespace %>', workload='<%= workloadName %>', workload_type='<%= workloadType %>'}) by (pod)`,\n    ),\n  },\n  {\n    title: 'Receive Bandwidth',\n    chartType: GraphTypes.area,\n    humanize: humanizeDecimalBytesPerSec,\n    byteDataType: ByteDataTypes.DecimalBytes,\n    query: _.template(\n      `sum(irate(container_network_receive_bytes_total{cluster=\"\", namespace=~'<%= namespace %>'}[4h])\n          * on (namespace,pod) group_left(workload,workload_type) mixin_pod_workload{cluster=\"\",\n          namespace=~'<%= namespace %>', workload=~'<%= workloadName %>', workload_type='<%= workloadType %>'}) by (pod)`,\n    ),\n  },\n];\n\nexport const workloadMetricsQueries: MonitoringQuery[] = [\n  {\n    title: 'Transmit Bandwidth',\n    chartType: GraphTypes.area,\n    humanize: humanizeDecimalBytesPerSec,\n    byteDataType: ByteDataTypes.DecimalBytes,\n    query: _.template(\n      `sum(irate(container_network_receive_bytes_total{cluster=\"\", namespace=~'<%= namespace %>'}[4h])\n         * on (namespace,pod) group_left(workload,workload_type) mixin_pod_workload{cluster=\"\",\n         namespace=~'<%= namespace %>', workload=~'<%= workloadName %>', workload_type='<%= workloadType %>'}) by (pod)`,\n    ),\n  },\n  {\n    title: 'Rate of Received Packets',\n    chartType: GraphTypes.area,\n    humanize: humanizeDecimalBytesPerSec,\n    byteDataType: ByteDataTypes.DecimalBytes,\n    query: _.template(\n      `sum(irate(container_network_receive_packets_total{cluster=\"\", namespace=~'<%= namespace %>'}[4h])* on (namespace,pod)group_left(workload,workload_type) mixin_pod_workload{cluster=\"\", namespace=~'<%= namespace %>', workload=~'<%= workloadName %>', workload_type='<%= workloadType %>'}) by (pod)`,\n    ),\n  },\n  {\n    title: 'Rate of Transmitted Packets',\n    chartType: GraphTypes.area,\n    humanize: humanizeDecimalBytesPerSec,\n    byteDataType: ByteDataTypes.DecimalBytes,\n    query: _.template(\n      `sum(irate(container_network_transmit_packets_total{cluster=\"\", namespace=~'<%= namespace %>'}[4h])* on (namespace,pod)group_left(workload,workload_type) mixin_pod_workload{cluster=\"\", namespace=~'<%= namespace %>', workload=~'<%= workloadName %>', workload_type='<%= workloadType %>'}) by (pod)`,\n    ),\n  },\n  {\n    title: 'Rate of Received Packets Dropped',\n    chartType: GraphTypes.area,\n    humanize: humanizeDecimalBytesPerSec,\n    byteDataType: ByteDataTypes.DecimalBytes,\n    query: _.template(\n      `sum(irate(container_network_receive_packets_dropped_total{cluster=\"\", namespace=~'<%= namespace %>'}[4h])* on (namespace,pod) group_left(workload,workload_type) mixin_pod_workload{cluster=\"\", namespace=~'<%= namespace %>', workload=~'<%= workloadName %>', workload_type='<%= workloadType %>'}) by (pod)`,\n    ),\n  },\n  {\n    title: 'Rate of Transmitted Packets Dropped',\n    chartType: GraphTypes.area,\n    humanize: humanizeDecimalBytesPerSec,\n    byteDataType: ByteDataTypes.DecimalBytes,\n    query: _.template(\n      `sum(irate(container_network_transmit_packets_dropped_total{cluster=\"\", namespace=~'<%= namespace %>'}[4h])* on (namespace,pod)\n      group_left(workload,workload_type) mixin_pod_workload{cluster=\"\", namespace=~'<%= namespace %>', workload=~'<%= workloadName %>', workload_type='<%= workloadType %>'}) by (pod)\n      `,\n    ),\n  },\n  {\n    title: 'Average Container Bandwidth by Pod: Received',\n    chartType: GraphTypes.area,\n    humanize: humanizeDecimalBytesPerSec,\n    byteDataType: ByteDataTypes.DecimalBytes,\n    query: _.template(\n      `avg(irate(container_network_receive_bytes_total{cluster=\"\", namespace=~'<%= namespace %>'}[4h])* on (namespace,pod)group_left(workload,workload_type) mixin_pod_workload{cluster=\"\", namespace=~'<%= namespace %>', workload=~'<%= workloadName %>', workload_type='<%= workloadType %>'}) by (pod)`,\n    ),\n  },\n  {\n    title: 'Average Container Bandwidth by Pod: Transmitted',\n    chartType: GraphTypes.area,\n    humanize: humanizeDecimalBytesPerSec,\n    byteDataType: ByteDataTypes.DecimalBytes,\n    query: _.template(\n      `avg(irate(container_network_transmit_bytes_total{cluster=\"\", namespace=~'<%= namespace %>'}[4h])* on (namespace,pod)group_left(workload,workload_type) mixin_pod_workload{cluster=\"\", namespace=~'<%= namespace %>', workload=~'<%= workloadName %>', workload_type='<%= workloadType %>'}) by (pod)`,\n    ),\n  },\n];\n\nconst getMetricsQuery = (title: string): _.TemplateExecutor => {\n  const queryObject = _.find(monitoringDashboardQueries, (q) => q.title === title);\n  return queryObject.query;\n};\n\nconst topMetricsQueries = {\n  PODS_BY_CPU: getMetricsQuery('CPU Usage'),\n  PODS_BY_MEMORY: getMetricsQuery('Memory Usage'),\n  PODS_BY_FILESYSTEM: _.template(\n    `topk(25, sort_desc(sum(pod:container_fs_usage_bytes:sum{container=\"\",pod!=\"\",namespace='<%= namespace %>'}) BY (pod, namespace)))`,\n  ),\n  PODS_BY_NETWORK_IN: getMetricsQuery('Receive Bandwidth'),\n  PODS_BY_NETWORK_OUT: getMetricsQuery('Transmit Bandwidth'),\n  RATE_OF_RECEIVED_PACKETS: getMetricsQuery('Rate of Received Packets'),\n  RATE_OF_TRANSMITTED_PACKETS: getMetricsQuery('Rate of Transmitted Packets'),\n  RATE_OF_RECEIVED_PACKETS_DROPPED: getMetricsQuery('Rate of Received Packets Dropped'),\n  RATE_OF_TRANSMITTED_PACKETS_DROPPED: getMetricsQuery('Rate of Transmitted Packets Dropped'),\n};\n\nexport const getTopMetricsQueries = (namespace: string) => ({\n  [metricsQuery.PODS_BY_CPU]: topMetricsQueries.PODS_BY_CPU({ namespace }),\n  [metricsQuery.PODS_BY_MEMORY]: topMetricsQueries.PODS_BY_MEMORY({ namespace }),\n  [metricsQuery.PODS_BY_FILESYSTEM]: topMetricsQueries.PODS_BY_FILESYSTEM({\n    namespace,\n  }),\n  [metricsQuery.PODS_BY_NETWORK_IN]: topMetricsQueries.PODS_BY_NETWORK_IN({\n    namespace,\n  }),\n  [metricsQuery.PODS_BY_NETWORK_OUT]: topMetricsQueries.PODS_BY_NETWORK_OUT({\n    namespace,\n  }),\n  [metricsQuery.RATE_OF_RECEIVED_PACKETS]: topMetricsQueries.RATE_OF_RECEIVED_PACKETS({\n    namespace,\n  }),\n  [metricsQuery.RATE_OF_TRANSMITTED_PACKETS]: topMetricsQueries.RATE_OF_TRANSMITTED_PACKETS({\n    namespace,\n  }),\n  [metricsQuery.RATE_OF_RECEIVED_PACKETS_DROPPED]: topMetricsQueries.RATE_OF_RECEIVED_PACKETS_DROPPED(\n    {\n      namespace,\n    },\n  ),\n  [metricsQuery.RATE_OF_TRANSMITTED_PACKETS_DROPPED]: topMetricsQueries.RATE_OF_TRANSMITTED_PACKETS_DROPPED(\n    {\n      namespace,\n    },\n  ),\n});\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAmBA;AACA;AAEA;AASA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAeA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;AC5EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAMA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;;;;;A","sourceRoot":""}