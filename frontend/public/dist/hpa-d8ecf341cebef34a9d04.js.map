{"version":3,"file":"hpa-d8ecf341cebef34a9d04.js","sources":["webpack:///./public/components/hpa.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { K8sResourceKind, K8sResourceKindReference } from '../module/k8s';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\nimport { HorizontalPodAutoscalerModel } from '../models';\nimport { Conditions } from './conditions';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from './factory';\nimport { DetailsItem, Kebab, LabelList, ResourceKebab, ResourceLink, ResourceSummary, SectionHeading, Timestamp, navFactory } from './utils';\nimport { ResourceEventStream } from './events';\nimport { ResourceLabel } from '../models/hypercloud/resource-plural';\n\nconst HorizontalPodAutoscalersReference: K8sResourceKindReference = 'HorizontalPodAutoscaler';\n\nconst { common } = Kebab.factory;\nconst menuActions = [...Kebab.getExtensionsActionsForKind(HorizontalPodAutoscalerModel), ...common];\n\nconst MetricsRow: React.FC<MetricsRowProps> = ({ type, current, target }) => (\n  <div className=\"row\">\n    <div className=\"col-xs-6\">{type}</div>\n    <div className=\"col-xs-3\">{current || '-'}</div>\n    <div className=\"col-xs-3\">{target || '-'}</div>\n  </div>\n);\n\nconst externalRow = (metric, current, key) => {\n  const { external } = metric;\n  const type = external.metricName;\n  // TODO: show metric selector for external metrics?\n  const currentValue = external.targetAverageValue ? _.get(current, 'object.currentAverageValue') : _.get(current, 'object.currentValue');\n  const targetValue = external.targetAverageValue ? external.targetAverageValue : external.targetValue;\n\n  return <MetricsRow key={key} type={type} current={currentValue} target={targetValue} />;\n};\n\nconst objectRow = (metric, current, ns, key) => {\n  const { object } = metric;\n  const type = (\n    <>\n      {object.metricName} on\n      <ResourceLink kind={object.target.kind} name={object.target.name} namespace={ns} title={object.target.name} />\n    </>\n  );\n  const currentValue = _.get(current, 'object.currentValue');\n  const targetValue = object.targetValue;\n\n  return <MetricsRow key={key} type={type} current={currentValue} target={targetValue} />;\n};\n\nconst podRow = (metric, current, key) => {\n  const { pods } = metric;\n  const type = `${pods.metricName} on pods`;\n  const currentValue = _.get(current, 'pods.currentAverageValue');\n  const targetValue = pods.targetAverageValue;\n\n  return <MetricsRow key={key} type={type} current={currentValue} target={targetValue} />;\n};\n\nconst getResourceUtilization = currentMetric => {\n  const currentUtilization = _.get(currentMetric, 'resource.currentAverageUtilization');\n\n  // Use _.isFinite so that 0 evaluates to true, but null / undefined / NaN don't\n  if (!_.isFinite(currentUtilization)) {\n    return null;\n  }\n\n  const currentAverageValue = _.get(currentMetric, 'resource.currentAverageValue');\n  // Only show currentAverageValue in parens if set and non-zero to avoid things like \"0% (0)\"\n  return currentAverageValue && currentAverageValue !== '0' ? `${currentUtilization}% (${currentAverageValue})` : `${currentUtilization}%`;\n};\n\nconst resourceRow = (metric, current, key) => {\n  const targetUtilization = metric.resource.targetAverageUtilization;\n  const resourceLabel = `resource ${metric.resource.name}`;\n  const type = targetUtilization ? (\n    <>\n      {resourceLabel}&nbsp;<span className=\"small text-muted\">(as a percentage of request)</span>\n    </>\n  ) : (\n    resourceLabel\n  );\n  const currentValue = targetUtilization ? getResourceUtilization(current) : _.get(current, 'resource.currentAverageValue');\n  const targetValue = targetUtilization ? `${targetUtilization}%` : metric.resource.targetAverageValue;\n\n  return <MetricsRow key={key} type={type} current={currentValue} target={targetValue} />;\n};\n\nconst MetricsTable: React.FC<MetricsTableProps> = ({ obj: hpa }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_METRICS_TABLEHEADER_1')} />\n      <div className=\"co-m-table-grid co-m-table-grid--bordered\">\n        <div className=\"row co-m-table-grid__head\">\n          <div className=\"col-xs-6\">{t('COMMON:MSG_DETAILS_TABDETAILS_METRICS_TABLEHEADER_2')}</div>\n          <div className=\"col-xs-3\">{t('COMMON:MSG_DETAILS_TABDETAILS_METRICS_TABLEHEADER_4')}</div>\n          <div className=\"col-xs-3\">{t('COMMON:MSG_DETAILS_TABDETAILS_METRICS_TABLEHEADER_5')}</div>\n        </div>\n        <div className=\"co-m-table-grid__body\">\n          {hpa.spec.metrics.map((metric, i) => {\n            // https://github.com/kubernetes/api/blob/master/autoscaling/v2beta1/types.go\n            const current = _.get(hpa, ['status', 'currentMetrics', i]);\n            switch (metric.type) {\n              case 'External':\n                return externalRow(metric, current, i);\n              case 'Object':\n                return objectRow(metric, current, hpa.metadata.namespace, i);\n              case 'Pods':\n                return podRow(metric, current, i);\n              case 'Resource':\n                return resourceRow(metric, current, i);\n              default:\n                return (\n                  <div key={i} className=\"row\">\n                    <div className=\"col-xs-12\">\n                      {metric.type} <span className=\"small text-muted\">(unrecognized type)</span>\n                    </div>\n                  </div>\n                );\n            }\n          })}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport const HorizontalPodAutoscalersDetails: React.FC<HorizontalPodAutoscalersDetailsProps> = ({ obj: hpa }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', { 0: ResourceLabel(hpa, t) })} />\n        <div className=\"row\">\n          <div className=\"col-sm-6\">\n            <ResourceSummary resource={hpa} />\n          </div>\n          <div className=\"col-sm-6\">\n            <dl className=\"co-m-pane__details\">\n              <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_54')} obj={hpa} path=\"spec.scaleTargetRef\">\n                <ResourceLink kind={hpa.spec.scaleTargetRef.kind} name={hpa.spec.scaleTargetRef.name} namespace={hpa.metadata.namespace} title={hpa.spec.scaleTargetRef.name} />\n              </DetailsItem>\n              <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_55')} obj={hpa} path=\"spec.minReplicas\" />\n              <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_56')} obj={hpa} path=\"spec.maxReplicas\" />\n              <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_57')} obj={hpa} path=\"status.lastScaleTime\">\n                <Timestamp timestamp={hpa.status.lastScaleTime} />\n              </DetailsItem>\n              <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_58')} obj={hpa} path=\"status.currentReplicas\" />\n              <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_59')} obj={hpa} path=\"status.desiredReplicas\" />\n            </dl>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <MetricsTable obj={hpa} />\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_CONDITIONS_1')} />\n        <Conditions conditions={hpa.status.conditions} />\n      </div>\n    </>\n  );\n};\n\nconst pages = [navFactory.details(HorizontalPodAutoscalersDetails), navFactory.editYaml(), navFactory.events(ResourceEventStream)];\nexport const HorizontalPodAutoscalersDetailsPage: React.FC<HorizontalPodAutoscalersDetailsPageProps> = props => <DetailsPage {...props} kind={HorizontalPodAutoscalersReference} menuActions={menuActions} pages={pages} />;\nHorizontalPodAutoscalersDetailsPage.displayName = 'HorizontalPodAutoscalersDetailsPage';\n\nconst tableColumnClasses = [classNames('col-lg-2', 'col-md-3', 'col-sm-4', 'col-xs-6'), classNames('col-lg-2', 'col-md-3', 'col-sm-4', 'col-xs-6'), classNames('col-lg-2', 'col-md-3', 'col-sm-4', 'hidden-xs'), classNames('col-lg-2', 'col-md-3', 'hidden-sm', 'hidden-xs'), classNames('col-lg-2', 'hidden-md', 'hidden-sm', 'hidden-xs'), classNames('col-lg-2', 'hidden-md', 'hidden-sm', 'hidden-xs'), Kebab.columnClass];\n\nconst kind = 'HorizontalPodAutoscaler';\n\nconst HorizontalPodAutoscalersTableHeader = (t?: TFunction) => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_2'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_15'),\n      sortField: 'metadata.labels',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_23'),\n      sortField: 'spec.scaleTargetRef.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_24'),\n      sortField: 'spec.minReplicas',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_25'),\n      sortField: 'spec.maxReplicas',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[5] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[6] },\n    },\n  ];\n};\nHorizontalPodAutoscalersTableHeader.displayName = 'HorizontalPodAutoscalersTableHeader';\n\nconst HorizontalPodAutoscalersTableRow: RowFunction<K8sResourceKind> = ({ obj, index, key, style }) => {\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={HorizontalPodAutoscalersReference} name={obj.metadata.name} namespace={obj.metadata.namespace} title={obj.metadata.name} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} title={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <LabelList kind={kind} labels={obj.metadata.labels} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[3], 'co-break-word')}>\n        <ResourceLink kind={obj.spec.scaleTargetRef.kind} name={obj.spec.scaleTargetRef.name} namespace={obj.metadata.namespace} title={obj.spec.scaleTargetRef.name} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>{obj.spec.minReplicas}</TableData>\n      <TableData className={tableColumnClasses[5]}>{obj.spec.maxReplicas}</TableData>\n      <TableData className={tableColumnClasses[6]}>\n        <ResourceKebab actions={menuActions} kind={HorizontalPodAutoscalersReference} resource={obj} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst HorizontalPodAutoscalersList: React.SFC = props => {\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"Horizontal Pod Auto Scalers\" Header={HorizontalPodAutoscalersTableHeader.bind(null, t)} Row={HorizontalPodAutoscalersTableRow} virtualize />;\n};\nHorizontalPodAutoscalersList.displayName = 'HorizontalPodAutoscalersList';\n\nexport const HorizontalPodAutoscalersPage: React.FC<HorizontalPodAutoscalersPageProps> = props => {\n  const { t } = useTranslation();\n  return <ListPage {...props} title={t('COMMON:MSG_LNB_MENU_32')} createButtonText={t('COMMON:MSG_MAIN_CREATEBUTTON_1', { 0: t('COMMON:MSG_LNB_MENU_32') })} kind={HorizontalPodAutoscalersReference} ListComponent={HorizontalPodAutoscalersList} canCreate={true} />;\n};\nHorizontalPodAutoscalersPage.displayName = 'HorizontalPodAutoscalersListPage';\n\nexport type HorizontalPodAutoscalersDetailsProps = {\n  obj: any;\n};\n\nexport type HorizontalPodAutoscalersPageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: any;\n};\n\nexport type HorizontalPodAutoscalersDetailsPageProps = {\n  match: any;\n};\n\ntype MetricsTableProps = {\n  obj: any;\n};\n\ntype MetricsRowProps = {\n  type: any;\n  current: any;\n  target: any;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAAA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAAA;AAIA;AACA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}