{"version":3,"file":"dev-console-deployImage~dev-console-edit~git-import-form~source-to-image-form-f38d4141cb6962e598ec.js","sources":["webpack:///./packages/dev-console/src/components/import/CreateSecretModal.tsx","webpack:///./packages/dev-console/src/components/import/advanced/AdvancedSection.tsx","webpack:///./packages/dev-console/src/components/import/advanced/BuildConfigSection.tsx","webpack:///./packages/dev-console/src/components/import/advanced/DeploymentConfigSection.tsx","webpack:///./packages/dev-console/src/components/import/advanced/LabelSection.tsx","webpack:///./packages/dev-console/src/components/import/advanced/ResourceLimitSection.tsx","webpack:///./packages/dev-console/src/components/import/advanced/ScalingSection.tsx","webpack:///./packages/dev-console/src/components/import/advanced/ServerlessScalingSection.tsx","webpack:///./packages/dev-console/src/components/import/app/AppSection.tsx","webpack:///./packages/dev-console/src/components/import/app/ApplicationSelector.tsx","webpack:///./packages/dev-console/src/components/import/route/CreateRoute.tsx","webpack:///./packages/dev-console/src/components/import/route/RouteCheckbox.tsx","webpack:///./packages/dev-console/src/components/import/route/RouteSection.tsx","webpack:///./packages/dev-console/src/components/import/route/SecureRoute.tsx","webpack:///./packages/dev-console/src/components/import/serverless/ServerlessRouteSection.tsx","webpack:///./packages/dev-console/src/components/progressive-list/ProgressiveList.tsx","webpack:///./packages/dev-console/src/components/progressive-list/ProgressiveListFooter.tsx","webpack:///./packages/dev-console/src/components/progressive-list/ProgressiveListItem.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  withSecretForm,\n  ImageSecretForm,\n  SourceSecretForm,\n  SecretTypeAbstraction,\n} from '@console/internal/components/secrets/create-secret';\nimport {\n  createModalLauncher,\n  ModalComponentProps,\n} from '@console/internal/components/factory/modal';\n\nexport interface CreateSecretModalProps {\n  save?: (name: string) => void;\n  namespace: string;\n  secretType: SecretTypeAbstraction;\n}\n\ntype Props = CreateSecretModalProps & ModalComponentProps;\n\nconst getSecretForm = (type: SecretTypeAbstraction) => {\n  switch (type) {\n    case SecretTypeAbstraction.source:\n      return withSecretForm(SourceSecretForm, true);\n    case SecretTypeAbstraction.image:\n      return withSecretForm(ImageSecretForm, true);\n    default:\n      return null;\n  }\n};\n\nconst CreateSecretModal: React.FC<Props> = ({ close, namespace, save, secretType }) => {\n  const handleSave = (name: string) => {\n    close();\n    save(name);\n  };\n\n  const CreateSecretForm = getSecretForm(secretType);\n  return (\n    <CreateSecretForm\n      onCancel={close}\n      onSave={handleSave}\n      fixed={{ metadata: { namespace } }}\n      secretTypeAbstraction={secretType}\n      titleVerb=\"Create\"\n      isCreate\n    />\n  );\n};\n\nexport const secretModalLauncher = createModalLauncher<Props>(CreateSecretModal);\n\nexport default CreateSecretModal;\n","import * as React from 'react';\nimport { FormikValues } from 'formik';\nimport ProgressiveList from '../../progressive-list/ProgressiveList';\nimport ProgressiveListItem from '../../progressive-list/ProgressiveListItem';\nimport RouteSection from '../route/RouteSection';\nimport ServerlessRouteSection from '../serverless/ServerlessRouteSection';\nimport FormSection from '../section/FormSection';\nimport RouteCheckbox from '../route/RouteCheckbox';\nimport { Resources } from '../import-types';\nimport LabelSection from './LabelSection';\nimport ScalingSection from './ScalingSection';\nimport ServerlessScalingSection from './ServerlessScalingSection';\nimport BuildConfigSection from './BuildConfigSection';\nimport DeploymentConfigSection from './DeploymentConfigSection';\nimport ResourceLimitSection from './ResourceLimitSection';\nimport { AppResources } from '../../edit-application/edit-application-types';\nimport HealthChecks from '../../health-checks/HealthChecks';\n\nexport interface AdvancedSectionProps {\n  values: FormikValues;\n  appResources?: AppResources;\n}\n\nconst AdvancedSection: React.FC<AdvancedSectionProps> = ({ values, appResources }) => {\n  const [visibleItems, setVisibleItems] = React.useState([]);\n  const handleVisibleItemChange = (item: string) => {\n    setVisibleItems([...visibleItems, item]);\n  };\n  return (\n    <FormSection title=\"Advanced Options\" fullWidth>\n      <RouteCheckbox isDisabled={values.route.disable} />\n      <ProgressiveList\n        text=\"Click on the names to access advanced options for\"\n        visibleItems={visibleItems}\n        onVisibleItemChange={handleVisibleItemChange}\n      >\n        <ProgressiveListItem name=\"Routing\">\n          {values.resources === Resources.KnativeService ? (\n            <ServerlessRouteSection route={values.route} />\n          ) : (\n            <RouteSection route={values.route} />\n          )}\n        </ProgressiveListItem>\n        <ProgressiveListItem name=\"Health Checks\">\n          <HealthChecks title=\"Health Checks\" resourceType={values.resources} />\n        </ProgressiveListItem>\n        {/* Hide Build for Deploy Image */}\n        {values.isi ? null : (\n          <ProgressiveListItem name=\"Build Configuration\">\n            <BuildConfigSection\n              namespace={values.project.name}\n              resource={appResources?.buildConfig?.data}\n            />\n          </ProgressiveListItem>\n        )}\n        <ProgressiveListItem name=\"Deployment\">\n          <DeploymentConfigSection\n            namespace={values.project.name}\n            resource={appResources?.editAppResource?.data}\n          />\n        </ProgressiveListItem>\n        <ProgressiveListItem name=\"Scaling\">\n          {values.resources === Resources.KnativeService ? (\n            <ServerlessScalingSection />\n          ) : (\n            <ScalingSection />\n          )}\n        </ProgressiveListItem>\n        <ProgressiveListItem name=\"Resource Limits\">\n          <ResourceLimitSection />\n        </ProgressiveListItem>\n        <ProgressiveListItem name=\"Labels\">\n          <LabelSection />\n        </ProgressiveListItem>\n      </ProgressiveList>\n    </FormSection>\n  );\n};\n\nexport default AdvancedSection;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { CheckboxField, EnvironmentField } from '@console/shared';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { getStrategyType } from '@console/internal/components/build';\nimport FormSection from '../section/FormSection';\n\nexport interface BuildConfigSectionProps {\n  namespace: string;\n  resource?: K8sResourceKind;\n}\n\nconst BuildConfigSection: React.FC<BuildConfigSectionProps> = ({ namespace, resource }) => {\n  const buildConfigObj = resource || {\n    kind: 'BuildConfig',\n    metadata: {\n      namespace,\n    },\n  };\n  const strategyType = getStrategyType(resource?.spec?.strategy?.type);\n  const envs = _.get(buildConfigObj, `spec.strategy.${strategyType}.env`, []);\n  return (\n    <FormSection title=\"Build Configuration\" fullWidth>\n      <CheckboxField name=\"build.triggers.webhook\" label=\"Configure a webhook build trigger\" />\n      <CheckboxField\n        name=\"build.triggers.image\"\n        label=\"Automatically build a new image when the builder image changes\"\n      />\n      <CheckboxField\n        name=\"build.triggers.config\"\n        label=\"Launch the first build when the build configuration is created\"\n      />\n      <EnvironmentField\n        name=\"build.env\"\n        label=\"Environment Variables (Build and Runtime)\"\n        obj={buildConfigObj}\n        envs={envs}\n        envPath={['spec', 'strategy']}\n      />\n    </FormSection>\n  );\n};\n\nexport default BuildConfigSection;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { CheckboxField, EnvironmentField } from '@console/shared';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport FormSection from '../section/FormSection';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { Resources } from '../import-types';\n\nexport interface DeploymentConfigSectionProps {\n  namespace: string;\n  resource?: K8sResourceKind;\n}\n\nconst DeploymentConfigSection: React.FC<DeploymentConfigSectionProps> = ({\n  namespace,\n  resource,\n}) => {\n  const {\n    values: { resources },\n  } = useFormikContext<FormikValues>();\n  const deploymentConfigObj = resource || {\n    kind: 'DeploymentConfig',\n    metadata: {\n      namespace,\n    },\n  };\n  const envs = _.get(deploymentConfigObj, 'spec.template.spec.containers[0].env', []);\n  return (\n    <FormSection title=\"Deployment\" fullWidth>\n      <CheckboxField\n        name=\"deployment.triggers.image\"\n        label=\"Auto deploy when new image is available\"\n      />\n      {resources === Resources.OpenShift && (\n        <CheckboxField\n          name=\"deployment.triggers.config\"\n          label=\"Auto deploy when deployment configuration changes\"\n        />\n      )}\n      <EnvironmentField\n        name=\"deployment.env\"\n        label=\"Environment Variables (Runtime only)\"\n        envs={envs}\n        obj={deploymentConfigObj}\n        envPath={['spec', 'template', 'spec', 'containers']}\n      />\n    </FormSection>\n  );\n};\n\nexport default DeploymentConfigSection;\n","import * as React from 'react';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { SelectorInput } from '@console/internal/components/utils';\nimport FormSection from '../section/FormSection';\n\nconst LabelSection: React.FC = () => {\n  const { values, setFieldValue } = useFormikContext<FormikValues>();\n  const labels = SelectorInput.arrayify(values.labels);\n\n  return (\n    <FormSection title=\"Labels\" subTitle=\"Each label is applied to each created resource.\">\n      <SelectorInput\n        onChange={(val) => setFieldValue('labels', SelectorInput.objectify(val))}\n        tags={labels}\n      />\n    </FormSection>\n  );\n};\n\nexport default LabelSection;\n","import * as React from 'react';\nimport { ResourceLimitField } from '@console/shared';\nimport { useFormikContext, FormikValues } from 'formik';\nimport FormSection from '../section/FormSection';\nimport { MemoryUnits, CPUUnits } from '../import-types';\n\nconst ResourceLimitSection: React.FC = () => {\n  const {\n    values: {\n      limits: { cpu, memory },\n    },\n  } = useFormikContext<FormikValues>();\n  return (\n    <FormSection title=\"Resource Limit\">\n      <div className=\"co-section-heading-tertiary\">CPU</div>\n      <ResourceLimitField\n        name=\"limits.cpu.request\"\n        label=\"Request\"\n        unitName=\"limits.cpu.requestUnit\"\n        unitOptions={CPUUnits}\n        defaultUnitSize={`${cpu.defaultRequestUnit}`}\n        helpText=\"The minimum amount of CPU the container is guaranteed.\"\n      />\n\n      <ResourceLimitField\n        name=\"limits.cpu.limit\"\n        label=\"Limit\"\n        unitName=\"limits.cpu.limitUnit\"\n        unitOptions={CPUUnits}\n        defaultUnitSize={`${cpu.defaultLimitUnit}`}\n        helpText=\"The maximum amount of CPU the container is allowed to use when running.\"\n      />\n\n      <div className=\"co-section-heading-tertiary\">Memory</div>\n      <ResourceLimitField\n        name=\"limits.memory.request\"\n        label=\"Request\"\n        unitName=\"limits.memory.requestUnit\"\n        unitOptions={MemoryUnits}\n        defaultUnitSize={`${memory.defaultRequestUnit}`}\n        helpText=\"The minimum amount of Memory the container is guaranteed.\"\n      />\n\n      <ResourceLimitField\n        name=\"limits.memory.limit\"\n        label=\"Limit\"\n        unitName=\"limits.memory.limitUnit\"\n        unitOptions={MemoryUnits}\n        defaultUnitSize={`${memory.defaultLimitUnit}`}\n        helpText=\"The maximum amount of Memory the container is allowed to use when running.\"\n      />\n    </FormSection>\n  );\n};\n\nexport default ResourceLimitSection;\n","import * as React from 'react';\nimport { NumberSpinnerField } from '@console/shared';\nimport FormSection from '../section/FormSection';\n\nconst ScalingSection: React.FC = () => {\n  return (\n    <FormSection title=\"Scaling\" subTitle=\"Replicas are scaled manually based on CPU usage.\">\n      <NumberSpinnerField\n        name=\"deployment.replicas\"\n        label=\"Replicas\"\n        helpText=\"The number of instances of your image.\"\n      />\n    </FormSection>\n  );\n};\n\nexport default ScalingSection;\n","import * as React from 'react';\nimport { NumberSpinnerField } from '@console/shared';\nimport FormSection from '../section/FormSection';\n\nconst ServerlessScalingSection: React.FC = () => {\n  return (\n    <FormSection\n      title=\"Scaling\"\n      subTitle=\"Set the autoscaler parameters around pods and concurrency limits in this section.\"\n    >\n      <NumberSpinnerField\n        name=\"serverless.scaling.minpods\"\n        label=\"Min Pods\"\n        helpText=\"The lower limit for the number of pods that can be set by autoscaler. If not specified defaults to 0.\"\n      />\n      <NumberSpinnerField\n        name=\"serverless.scaling.maxpods\"\n        label=\"Max Pods\"\n        helpText=\"The upper limit for the number of pods that can be set by autoscaler.\"\n      />\n      <NumberSpinnerField\n        name=\"serverless.scaling.concurrencytarget\"\n        label=\"Concurrency Target\"\n        helpText=\"Defines how many concurrent requests are wanted per instance of the application at a given time (soft limit) and is the recommended configuration for autoscaling. If not specified, will be defaulted to the value set in the cluster config.\"\n      />\n      <NumberSpinnerField\n        name=\"serverless.scaling.concurrencylimit\"\n        label=\"Concurrency Limit\"\n        helpText=\"Limits the amount of concurrent requests allowed into one instance of the application at a given time (hard limit), and is configured in the revision template. If not specified, will be defaulted to the value set in the cluster config.\"\n      />\n    </FormSection>\n  );\n};\n\nexport default ServerlessScalingSection;\n","import * as React from 'react';\nimport { useField } from 'formik';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { InputField, TextAreaField } from '@console/shared';\nimport { ProjectData } from '../import-types';\nimport FormSection from '../section/FormSection';\nimport ApplicationSelector from './ApplicationSelector';\n\nexport interface AppSectionProps {\n  project: ProjectData;\n  noProjectsAvailable?: boolean;\n  extraMargin?: boolean;\n}\n\nconst AppSection: React.FC<AppSectionProps> = ({ project, noProjectsAvailable, extraMargin }) => {\n  const [initialApplication] = useField('application.initial');\n  const [formType] = useField('formType');\n  return (\n    <FormSection title=\"General\" extraMargin={extraMargin}>\n      {noProjectsAvailable && (\n        <>\n          <InputField\n            type={TextInputTypes.text}\n            data-test-id=\"application-form-project-name\"\n            name=\"project.name\"\n            label=\"Project Name\"\n            helpText=\"A unique name for the project.\"\n            required\n          />\n          <InputField\n            type={TextInputTypes.text}\n            data-test-id=\"application-form-project-display-name\"\n            name=\"project.displayName\"\n            label=\"Project Display Name\"\n          />\n          <TextAreaField\n            data-test-id=\"application-form-project-description\"\n            name=\"project.description\"\n            label=\"Project Description\"\n          />\n        </>\n      )}\n      {!initialApplication.value && (\n        <ApplicationSelector namespace={project.name} noProjectsAvailable={noProjectsAvailable} />\n      )}\n      <InputField\n        type={TextInputTypes.text}\n        data-test-id=\"application-form-app-name\"\n        name=\"name\"\n        label=\"Name\"\n        helpText=\"A unique name given to the component that will be used to name associated resources.\"\n        isDisabled={formType.value && formType.value === 'edit'}\n        required={!(formType.value && formType.value === 'edit')}\n      />\n    </FormSection>\n  );\n};\n\nexport default AppSection;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useFormikContext, FormikValues, useField } from 'formik';\nimport { FormGroup, TextInputTypes } from '@patternfly/react-core';\nimport { InputField, getFieldId, useFormikValidationFix } from '@console/shared';\nimport { CREATE_APPLICATION_KEY, UNASSIGNED_KEY } from '../../../const';\nimport { sanitizeApplicationValue } from '../../../utils/application-utils';\nimport ApplicationDropdown from '../../dropdown/ApplicationDropdown';\n\nexport interface ApplicationSelectorProps {\n  namespace?: string;\n  noProjectsAvailable?: boolean;\n}\n\nconst ApplicationSelector: React.FC<ApplicationSelectorProps> = ({\n  namespace,\n  noProjectsAvailable,\n}) => {\n  const [applicationsAvailable, setApplicationsAvailable] = React.useState(true);\n  const projectsAvailable = !noProjectsAvailable;\n\n  const [selectedKey, { touched, error }] = useField('application.selectedKey');\n  const { setFieldValue, setFieldTouched } = useFormikContext<FormikValues>();\n  const fieldId = getFieldId('application-name', 'dropdown');\n  const isValid = !(touched && error);\n  const errorMessage = !isValid ? error : '';\n\n  useFormikValidationFix(selectedKey.value);\n\n  const onDropdownChange = (key: string, application: string) => {\n    setFieldValue('application.selectedKey', key);\n    setFieldTouched('application.selectedKey', true);\n    setFieldValue('application.name', sanitizeApplicationValue(application, key));\n    setFieldTouched('application.name', true);\n  };\n\n  const handleOnLoad = (applicationList: { [key: string]: string }) => {\n    const noApplicationsAvailable = _.isEmpty(applicationList);\n    setApplicationsAvailable(!noApplicationsAvailable);\n    if (noApplicationsAvailable) {\n      setFieldValue('application.selectedKey', '');\n      setFieldValue('application.name', '');\n    }\n  };\n\n  const actionItems = [\n    {\n      actionTitle: 'Create Application',\n      actionKey: CREATE_APPLICATION_KEY,\n    },\n    {\n      actionTitle: 'Unassigned',\n      actionKey: UNASSIGNED_KEY,\n    },\n  ];\n\n  return (\n    <>\n      {projectsAvailable && applicationsAvailable && (\n        <FormGroup\n          fieldId={fieldId}\n          label=\"Application\"\n          helperTextInvalid={errorMessage}\n          isValid={isValid}\n          helperText=\"Select an application for your grouping or Unassigned to not use an application grouping.\"\n        >\n          <ApplicationDropdown\n            dropDownClassName=\"dropdown--full-width\"\n            menuClassName=\"dropdown-menu--text-wrap\"\n            id={fieldId}\n            namespace={namespace}\n            actionItems={actionItems}\n            autoSelect\n            selectedKey={selectedKey.value}\n            onChange={onDropdownChange}\n            onLoad={handleOnLoad}\n          />\n        </FormGroup>\n      )}\n      {(!applicationsAvailable || selectedKey.value === CREATE_APPLICATION_KEY) && (\n        <InputField\n          type={TextInputTypes.text}\n          required={selectedKey.value === CREATE_APPLICATION_KEY}\n          name=\"application.name\"\n          label=\"Application Name\"\n          data-test-id=\"application-form-app-input\"\n          helpText=\"A unique name given to the application grouping to label your resources.\"\n        />\n      )}\n    </>\n  );\n};\n\nexport default ApplicationSelector;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { InputField, DropdownField } from '@console/shared';\nimport { makePortName } from '../../../utils/imagestream-utils';\n\nconst CreateRoute: React.FC = () => {\n  const {\n    values: {\n      image: { ports },\n      route: { defaultUnknownPort, targetPort },\n    },\n  } = useFormikContext<FormikValues>();\n  const portOptions = ports.reduce((acc, port) => {\n    const name = makePortName(port);\n    acc[name] = (\n      <>\n        {port.containerPort} &rarr; {port.containerPort} ({port.protocol})\n      </>\n    );\n    return acc;\n  }, {});\n\n  return (\n    <>\n      <InputField\n        type={TextInputTypes.text}\n        name=\"route.hostname\"\n        label=\"Hostname\"\n        helpText=\"Public hostname for the route. If not specified, a hostname is generated.\"\n      />\n      <InputField\n        type={TextInputTypes.text}\n        name=\"route.path\"\n        label=\"Path\"\n        placeholder=\"/\"\n        helpText=\"Path that the router watches to route traffic to the service.\"\n      />\n      {_.isEmpty(ports) ? (\n        <InputField\n          type={TextInputTypes.text}\n          name=\"route.unknownTargetPort\"\n          label=\"Target Port\"\n          placeholder={defaultUnknownPort}\n          helpText=\"Target port for traffic.\"\n        />\n      ) : (\n        <DropdownField\n          name=\"route.targetPort\"\n          label=\"Target Port\"\n          items={portOptions}\n          title={portOptions[targetPort] || 'Select target port'}\n          helpText=\"Target port for traffic.\"\n          fullWidth\n        />\n      )}\n    </>\n  );\n};\n\nexport default CreateRoute;\n","import * as React from 'react';\nimport { CheckboxField } from '@console/shared';\n\ninterface RouteCheckboxProps {\n  isDisabled?: boolean;\n}\n\nconst RouteCheckbox: React.FC<RouteCheckboxProps> = ({ isDisabled }) => {\n  return (\n    <CheckboxField\n      name=\"route.create\"\n      label=\"Create a route to the application\"\n      helpText=\"Exposes your application at a public URL\"\n      isDisabled={isDisabled}\n    />\n  );\n};\n\nexport default RouteCheckbox;\n","import * as React from 'react';\nimport FormSection from '../section/FormSection';\nimport { RouteData } from '../import-types';\nimport CreateRoute from './CreateRoute';\nimport SecureRoute from './SecureRoute';\n\ninterface RouteSectionProps {\n  route: RouteData;\n}\n\nconst RouteSection: React.FC<RouteSectionProps> = ({ route }) => {\n  return (\n    <FormSection title=\"Routing\">\n      {route.create && (\n        <>\n          <CreateRoute />\n          <SecureRoute />\n        </>\n      )}\n    </FormSection>\n  );\n};\n\nexport default RouteSection;\n","import * as React from 'react';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { FormHelperText } from '@patternfly/react-core';\nimport { DropdownField, DroppableFileInputField, CheckboxField } from '@console/shared';\nimport {\n  TerminationTypes,\n  PassthroughInsecureTrafficTypes,\n  InsecureTrafficTypes,\n} from '../import-types';\n\nconst SecureRoute: React.FC = () => {\n  const {\n    values: {\n      route: { secure, tls },\n    },\n  } = useFormikContext<FormikValues>();\n  return (\n    <>\n      <CheckboxField\n        name=\"route.secure\"\n        label=\"Secure Route\"\n        formLabel=\"Security\"\n        helpText=\"Routes can be secured using several TLS termination types for serving certificates.\"\n      />\n      {secure && (\n        <>\n          <DropdownField\n            name=\"route.tls.termination\"\n            label=\"TLS Termination\"\n            items={TerminationTypes}\n            title=\"Select termination type\"\n            fullWidth\n          />\n          <DropdownField\n            name=\"route.tls.insecureEdgeTerminationPolicy\"\n            label=\"Insecure Traffic\"\n            items={\n              tls.termination === 'passthrough'\n                ? PassthroughInsecureTrafficTypes\n                : InsecureTrafficTypes\n            }\n            title=\"Select insecure traffic type\"\n            helpText=\"Policy for traffic on insecure schemes like HTTP.\"\n            fullWidth\n          />\n          {tls.termination && tls.termination !== 'passthrough' && (\n            <>\n              <h3>Certificates</h3>\n              <FormHelperText isHidden={false}>\n                TLS certificates for edge and re-encrypt termination. If not specified, the\n                router&apos;s default certificate is used.\n              </FormHelperText>\n              <DroppableFileInputField\n                name=\"route.tls.certificate\"\n                label=\"Certificate\"\n                helpText=\"The PEM format certificate. Upload file by dragging &amp; dropping, selecting it, or pasting from the clipboard.\"\n              />\n              <DroppableFileInputField\n                name=\"route.tls.privateKey\"\n                label=\"Private Key\"\n                helpText=\"The PEM format key. Upload file by dragging &amp; dropping, selecting it, or pasting from the clipboard.\"\n              />\n              <DroppableFileInputField\n                name=\"route.tls.caCertificate\"\n                label=\"CA Certificate\"\n                helpText=\"The PEM format CA certificate chain. Upload file by dragging &amp; dropping, selecting it, or pasting from the clipboard.\"\n              />\n              {tls.termination === 'reencrypt' && (\n                <DroppableFileInputField\n                  name=\"route.tls.destinationCaCertificate\"\n                  label=\"Destination CA Certificate\"\n                  helpText=\"The PEM format CA certificate chain to validate the endpoint certificate for re-encrypt termination. Upload file by dragging &amp; dropping, selecting it, or pasting from the clipboard.\"\n                />\n              )}\n            </>\n          )}\n        </>\n      )}\n    </>\n  );\n};\n\nexport default SecureRoute;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { InputField, DropdownField } from '@console/shared';\nimport FormSection from '../section/FormSection';\nimport { RouteData } from '../import-types';\n\nexport interface ServerlessRouteSectionProps {\n  route: RouteData;\n}\n\nconst ServerlessRouteSection: React.FC<ServerlessRouteSectionProps> = ({ route }) => {\n  const {\n    values: {\n      image: { ports },\n      route: { defaultUnknownPort, targetPort: routeTargetPort },\n    },\n  } = useFormikContext<FormikValues>();\n  const targetPort = routeTargetPort.split('-')[0];\n  const portOptions = ports.reduce((acc, port) => {\n    const name = port?.containerPort;\n    if (name) {\n      acc[name] = <>{port.containerPort}</>;\n    }\n    return acc;\n  }, {});\n  return (\n    <FormSection title=\"Routing\">\n      {route.create && (\n        <>\n          {_.isEmpty(ports) ? (\n            <InputField\n              type={TextInputTypes.text}\n              name=\"route.unknownTargetPort\"\n              label=\"Target Port\"\n              placeholder={defaultUnknownPort}\n              helpText=\"Target port for traffic.\"\n            />\n          ) : (\n            <DropdownField\n              name=\"route.targetPort\"\n              label=\"Target Port\"\n              items={portOptions}\n              title={portOptions[targetPort] || 'Select target port'}\n              helpText=\"Target port for traffic.\"\n              fullWidth\n            />\n          )}\n        </>\n      )}\n    </FormSection>\n  );\n};\n\nexport default ServerlessRouteSection;\n","import * as React from 'react';\nimport ProgressiveListFooter from './ProgressiveListFooter';\nimport ProgressiveListItem from './ProgressiveListItem';\n\nexport interface ProgressiveListProps {\n  visibleItems: string[];\n  onVisibleItemChange: (item: string) => void;\n  text: string;\n}\n\nconst ProgressiveList: React.FC<ProgressiveListProps> = ({\n  visibleItems,\n  children,\n  onVisibleItemChange,\n  text,\n}) => {\n  const items: string[] = [];\n  const validChildren: React.ReactNode[] = React.Children.toArray(children).filter(\n    (child: React.ReactElement) => {\n      const { name } = child.props;\n      const validChild = child.type === ProgressiveListItem;\n      const isNameInVisibleItems = visibleItems.includes(name);\n      if (validChild && !isNameInVisibleItems) items.push(name);\n      return validChild;\n    },\n  );\n  return (\n    <>\n      {visibleItems.map((item: string) => (\n        <React.Fragment key={item}>\n          {validChildren.find(({ props }: React.ReactElement) => item === props.name)}\n        </React.Fragment>\n      ))}\n      <ProgressiveListFooter text={text} items={items} onShowItem={onVisibleItemChange} />\n    </>\n  );\n};\n\nexport default ProgressiveList;\n","import * as React from 'react';\nimport { Button } from '@patternfly/react-core';\n\nexport interface ProgressiveListFooterProps {\n  items: string[];\n  text: string;\n  onShowItem: (item: string) => void;\n}\n\nconst ProgressiveListFooter: React.FC<ProgressiveListFooterProps> = ({\n  text,\n  items,\n  onShowItem,\n}) => {\n  if (!items || items.length === 0) {\n    return null;\n  }\n  return (\n    <div>\n      {text}\n      {items.map((opt, index) => {\n        let preText = ' ';\n        let postText = '';\n        if (items.length - 1 === index) {\n          preText = items.length !== 1 ? ' and ' : ' ';\n          postText = '.';\n        } else {\n          postText = items.length - 2 !== index ? ',' : '';\n        }\n        return (\n          <React.Fragment key={opt}>\n            {preText}\n            <Button variant=\"link\" isInline onClick={() => onShowItem(opt)}>\n              {opt}\n            </Button>\n            {postText}\n          </React.Fragment>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default ProgressiveListFooter;\n","import * as React from 'react';\n\nexport interface ProgressiveListItemProps {\n  name: string;\n}\n\nconst ProgressiveListItem: React.FC<ProgressiveListItemProps> = ({ children }) => {\n  const element = React.useRef<HTMLDivElement>();\n  React.useEffect(() => {\n    element.current.scrollIntoView({ behavior: 'smooth' });\n  }, []);\n  return <div ref={element}>{children}</div>;\n};\n\nexport default ProgressiveListItem;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAUA;AAEA;AAEA;;;;;;;;;;;;;ACpDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AAOA;AACA;AAGA;AAEA;AAMA;AACA;AAKA;AAOA;AACA;AAEA;AACA;AAKA;AAEA;;;;;;;;;;;;;AC/EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAOA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAIA;AASA;AAEA;;;;;;;;;;;;;AC3CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAOA;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAMA;AASA;AAEA;;;;;;;;;;;;;AClDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAMA;AAEA;;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AAEA;AACA;AASA;AASA;AACA;AASA;AAUA;AAEA;;;;;;;;;;;;;ACvDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAOA;AAEA;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAKA;AAKA;AAKA;AAKA;AAOA;AAEA;;;;;;;;;;;;;AClCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAQA;AACA;AACA;AACA;AAEA;AAEA;AAQA;AAMA;AAOA;AAGA;AAWA;AAEA;;;;;;;;;;;;;AC1DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAQA;AAaA;AAYA;AAEA;;;;;;;;;;;;;AC7FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AAEA;;AAAA;;AAAA;AACA;AAEA;AACA;AAEA;AAEA;AAMA;AAOA;AAoBA;AAEA;;;;;;;;;;;;;AC7DA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AAQA;AAEA;;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAMA;AACA;AAIA;AACA;AAKA;AAEA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAMA;AACA;AAKA;AAEA;AAMA;AAEA;AAOA;AAKA;AACA;AAMA;AAEA;AACA;AAIA;AAKA;AAKA;AAKA;AAaA;AAEA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA0BA;AAEA;;;;;;;;;;;;;ACvDA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAQA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAKA;AAGA;AAEA;;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAGA;AAGA;AAEA;;;;;;;;;;;;;AC3CA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;A","sourceRoot":""}