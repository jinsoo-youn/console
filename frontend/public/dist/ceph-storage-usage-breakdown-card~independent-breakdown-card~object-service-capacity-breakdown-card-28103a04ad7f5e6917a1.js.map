{"version":3,"file":"ceph-storage-usage-breakdown-card~independent-breakdown-card~object-service-capacity-breakdown-card-28103a04ad7f5e6917a1.js","sources":["webpack:///./packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/breakdown-card/breakdown-body.tsx","webpack:///./packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/breakdown-card/breakdown-capacity.tsx","webpack:///./packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/breakdown-card/breakdown-card.scss?0052","webpack:///./packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/breakdown-card/breakdown-chart.tsx","webpack:///./packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/breakdown-card/breakdown-header.tsx","webpack:///./packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/breakdown-card/breakdown-loading.tsx","webpack:///./packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/breakdown-card/consts.ts","webpack:///./packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/breakdown-card/utils.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport { Humanize } from '@console/internal/components/utils';\nimport { K8sKind } from '@console/internal/module/k8s';\nimport { addAvailable, StackDataPoint, getLegends } from './utils';\nimport { BreakdownChart } from './breakdown-chart';\nimport { BreakdownChartLoading } from './breakdown-loading';\nimport { TotalCapacityBody } from './breakdown-capacity';\n\nexport const BreakdownCardBody: React.FC<BreakdownBodyProps> = ({\n  top5MetricsStats,\n  metricTotal,\n  capacityUsed,\n  capacityAvailable,\n  metricModel,\n  humanize,\n  isLoading,\n  hasLoadError,\n  ocsVersion = '',\n}) => {\n  if (isLoading && !hasLoadError) {\n    return <BreakdownChartLoading />;\n  }\n  if (!capacityUsed || !top5MetricsStats.length || hasLoadError) {\n    return <div className=\"text-secondary\">Not available</div>;\n  }\n  if (capacityUsed === '0') {\n    return <div className=\"text-secondary\">Not enough usage data</div>;\n  }\n\n  const usedCapacity = `${humanize(capacityUsed).string} used`;\n  const availableCapacity = `${humanize(capacityAvailable).string} available`;\n\n  const chartData = addAvailable(top5MetricsStats, capacityAvailable, metricTotal, humanize);\n\n  const legends = getLegends(chartData);\n\n  // Removes Legend for available\n  if (capacityAvailable) {\n    legends.pop();\n  }\n\n  return (\n    <Grid>\n      <GridItem span={4}>\n        <TotalCapacityBody value={usedCapacity} />\n      </GridItem>\n      <GridItem span={4} />\n      <GridItem span={4}>\n        {capacityAvailable && (\n          <TotalCapacityBody\n            value={availableCapacity}\n            className=\"capacity-breakdown-card__available-body text-secondary\"\n          />\n        )}\n      </GridItem>\n      <GridItem span={12}>\n        <BreakdownChart\n          data={chartData}\n          legends={legends}\n          metricModel={metricModel}\n          ocsVersion={ocsVersion}\n        />\n      </GridItem>\n    </Grid>\n  );\n};\n\nexport type BreakdownBodyProps = {\n  isLoading: boolean;\n  hasLoadError: boolean;\n  metricTotal: string;\n  top5MetricsStats: StackDataPoint[];\n  capacityUsed: string;\n  capacityAvailable?: string;\n  metricModel: K8sKind;\n  humanize: Humanize;\n  ocsVersion?: string;\n};\n","import * as React from 'react';\nimport './breakdown-card.scss';\nimport * as classNames from 'classnames';\n\nexport const TotalCapacityBody: React.FC<TotalCapacityBodyProps> = ({ value, className }) => {\n  return <p className={classNames('capacity-breakdown-card__capacity-body', className)}>{value}</p>;\n};\n\ntype TotalCapacityBodyProps = {\n  value: string;\n  className?: string;\n};\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport {\n  Chart,\n  ChartAxis,\n  ChartBar,\n  ChartLabel,\n  ChartLegend,\n  ChartStack,\n  ChartThemeColor,\n  ChartTooltip,\n} from '@patternfly/react-charts';\nimport { Tooltip } from '@patternfly/react-core';\nimport { K8sKind, referenceForModel } from '@console/internal/module/k8s';\nimport { resourcePathFromModel } from '@console/internal/components/utils';\nimport { CEPH_STORAGE_NAMESPACE } from '@console/ceph-storage-plugin/src/constants';\nimport { getBarRadius, StackDataPoint } from './utils';\nimport { OTHER, CLUSTERWIDE, BUCKETCLASSKIND } from './consts';\nimport './breakdown-card.scss';\n\nexport const LinkableLegend: React.FC<LinkableLegendProps> = React.memo(\n  (props: LinkableLegendProps) => {\n    const { metricModel, datum, ocsVersion } = props;\n    let href: string = resourcePathFromModel(metricModel, datum.link, datum.ns);\n    const customLegend = (\n      <Tooltip content={datum.link} enableFlip>\n        <ChartLabel\n          {...props}\n          lineHeight={1.2}\n          style={[\n            { ...datum.labels, fontSize: 9 },\n            { fill: 'black', fontSize: 8 },\n          ]}\n        />\n      </Tooltip>\n    );\n    if (datum.labelId === OTHER || datum.labelId === CLUSTERWIDE) {\n      return customLegend;\n    }\n    if (metricModel.kind === BUCKETCLASSKIND) {\n      if (ocsVersion) {\n        href = `/k8s/ns/${CEPH_STORAGE_NAMESPACE}/clusterserviceversions/${ocsVersion}/${referenceForModel(\n          metricModel,\n        )}/${datum.link}`;\n      } else {\n        return customLegend;\n      }\n    }\n    return (\n      <Link to={href} className=\"capacity-breakdown-card__legend-link\">\n        {customLegend}\n      </Link>\n    );\n  },\n);\n\nexport const BreakdownChart: React.FC<BreakdownChartProps> = ({\n  data,\n  legends,\n  metricModel,\n  ocsVersion,\n}) => (\n  <>\n    <Chart\n      legendPosition=\"bottom-left\"\n      legendComponent={\n        <ChartLegend\n          themeColor={ChartThemeColor.multiOrdered}\n          data={legends}\n          y={40}\n          labelComponent={<LinkableLegend metricModel={metricModel} ocsVersion={ocsVersion} />}\n          orientation=\"horizontal\"\n          symbolSpacer={7}\n          gutter={10}\n          height={50}\n          style={{ labels: { fontSize: 8 } }}\n        />\n      }\n      height={60}\n      padding={{\n        bottom: 35,\n        top: 0,\n        right: 0,\n        left: 0,\n      }}\n    >\n      <ChartAxis\n        style={{ axis: { stroke: 'none' }, ticks: { stroke: 'none' } }}\n        tickFormat={() => ''}\n      />\n      <ChartStack horizontal>\n        {data.map((d: StackDataPoint, index) => (\n          <ChartBar\n            key={d.id}\n            style={{ data: { stroke: 'white', strokeWidth: 0.7, fill: d.fill } }}\n            cornerRadius={getBarRadius(index, data.length)}\n            barWidth={12}\n            padding={0}\n            data={[d]}\n            labelComponent={<ChartTooltip dx={0} style={{ fontSize: 8, padding: 5 }} />}\n          />\n        ))}\n      </ChartStack>\n    </Chart>\n  </>\n);\n\nexport type BreakdownChartProps = {\n  data: StackDataPoint[];\n  legends: any[];\n  metricModel: K8sKind;\n  ocsVersion?: string;\n};\n\nexport type LinkableLegendProps = {\n  metricModel: K8sKind;\n  datum?: {\n    [key: string]: any;\n  };\n  ocsVersion?: string;\n};\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\n\nexport const HeaderPrometheusViewLink: React.FC<HeaderPrometheusViewLinkProps> = ({ link }) => {\n  const params = new URLSearchParams();\n  params.set('query0', link);\n  return (\n    <div className=\"capacity-breakdown-card__header-link\">\n      <Link to={`/monitoring/query-browser?${params}`}>View more</Link>\n    </div>\n  );\n};\n\ntype HeaderPrometheusViewLinkProps = { link: string };\n","import * as React from 'react';\nimport { Grid, GridItem } from '@patternfly/react-core';\nimport './breakdown-card.scss';\n\nexport const BreakdownChartLoading: React.FC = () => (\n  <Grid className=\"skeleton-box\">\n    <GridItem span={4} className=\"skeleton-activity\" />\n    <GridItem span={4} className=\"skeleton-activity skeleton-stack-no-show\" />\n    <GridItem span={4} className=\"skeleton-activity\" />\n    <GridItem span={12} className=\"skeleton-activity skeleton-stack-bar\" />\n    <GridItem span={2} className=\"skeleton-activity skeleton-stack-legend\" />\n    <GridItem span={2} className=\"skeleton-activity skeleton-stack-legend\" />\n    <GridItem span={2} className=\"skeleton-activity skeleton-stack-legend\" />\n    <GridItem span={2} className=\"skeleton-activity skeleton-stack-legend\" />\n    <GridItem span={2} className=\"skeleton-activity skeleton-stack-legend\" />\n    <GridItem span={2} className=\"skeleton-activity skeleton-stack-legend\" />\n  </Grid>\n);\n","export enum Colors {\n  AVAILABLE = '#b8bbbe',\n  OTHER = '#000',\n  LINK = '#0066cc',\n}\n\nexport const COLORMAP = [\n  'rgb(236, 122, 8)',\n  'rgb(139, 193, 247)',\n  'rgb(76, 177, 64)',\n  'rgb(160, 158, 220)',\n  'rgb(0, 149, 150)',\n];\n\nexport const OTHER = 'Other';\nexport const CLUSTERWIDE = 'Cluster-wide';\nexport const BUCKETCLASSKIND = 'BucketClass';\n\nexport const OTHER_TOOLTIP = 'All other capacity usage that are not a part of the top 5 consumers.';\nexport const CLUSTERWIDE_TOOLTIP =\n  'Any NON Object bucket claims that were created via an S3 client or via the NooBaa UI system.';\n","import * as _ from 'lodash';\nimport { DataPoint } from '@console/internal/components/graphs';\nimport { Humanize } from '@console/internal/components/utils';\nimport { Colors, COLORMAP, OTHER_TOOLTIP } from './consts';\n\nconst getTotal = (stats: StackDataPoint[]) =>\n  stats.reduce((total, dataPoint) => total + dataPoint.y, 0);\n\nconst addOthers = (\n  stats: StackDataPoint[],\n  metricTotal: string,\n  humanize: Humanize,\n): StackDataPoint => {\n  const top5Total = getTotal(stats);\n  const others = Number(metricTotal) - top5Total;\n  const othersData = {\n    x: '0',\n    y: others,\n    name: 'Other',\n    color: Colors.OTHER,\n    label: humanize(others).string,\n    fill: 'rgb(96, 98, 103)',\n    link: OTHER_TOOLTIP,\n    id: 6,\n    ns: '',\n  };\n  return othersData;\n};\n\nexport const addAvailable = (\n  stats: StackDataPoint[],\n  capacityAvailable: string,\n  metricTotal: string,\n  humanize: Humanize,\n) => {\n  let othersData: StackDataPoint;\n  let availableData: StackDataPoint;\n  let newChartData: StackDataPoint[] = [...stats];\n  if (stats.length === 5) {\n    othersData = addOthers(stats, metricTotal, humanize);\n    newChartData = [...stats, othersData] as StackDataPoint[];\n  }\n  if (capacityAvailable) {\n    const availableInBytes = Number(capacityAvailable);\n    availableData = {\n      x: '0',\n      y: availableInBytes,\n      name: 'Available',\n      link: '',\n      color: '',\n      label: humanize(availableInBytes).string,\n      fill: '#b8bbbe',\n      id: 7,\n      ns: '',\n    };\n    newChartData = [...newChartData, availableData] as StackDataPoint[];\n  }\n  return newChartData;\n};\n\nexport const getLegends = (data: StackDataPoint[]) =>\n  data.map((d: StackDataPoint) => ({\n    name: `${d.name}\\n${d.label}`,\n    labels: { fill: d.color },\n    symbol: { fill: d.fill },\n    link: d.link,\n    labelId: d.name,\n    ns: d.ns,\n  }));\n\nexport const getBarRadius = (index: number, length: number) => {\n  if (index === length - 1) {\n    return {\n      bottom: 3,\n      top: 3,\n    };\n  }\n  if (index === 0) {\n    return { bottom: 3 };\n  }\n  return {};\n};\n\nexport const sortInstantVectorStats = (stats: DataPoint[]): DataPoint[] => {\n  stats.sort((a, b) => {\n    const y1 = a.y;\n    const y2 = b.y;\n    if (y1 === y2) {\n      const x1 = a.x;\n      const x2 = b.x;\n      return x1 < x2 ? -1 : x1 > x2 ? 1 : 0;\n    }\n    return y2 - y1;\n  });\n  return stats.length === 6 ? stats.splice(0, 5) : stats;\n};\n\nexport const getStackChartStats: GetStackStats = (response, humanize) =>\n  response.map((r, i) => {\n    const capacity = humanize(r.y).string;\n    return {\n      // x value needs to be same for single bar stack chart\n      x: '0',\n      y: r.y,\n      name: _.truncate(`${r.x}`, { length: 12 }),\n      link: `${r.x}`,\n      color: Colors.LINK,\n      fill: COLORMAP[i],\n      label: capacity,\n      id: i,\n      ns: r.metric.namespace,\n    };\n  });\n\ntype GetStackStats = (response: DataPoint[], humanize: Humanize) => StackDataPoint[];\n\nexport type StackDataPoint = DataPoint<string> & {\n  name: string;\n  link: string;\n  color: string;\n  fill: string;\n  id: number;\n  ns: string;\n};\n\nexport const getCapacityValue = (cephUsed: string, cephTotal: string, humanize: Humanize) => {\n  const totalFormatted = humanize(cephTotal || 0);\n  const usedFormatted = humanize(cephUsed || 0, null, totalFormatted.unit);\n  const available = humanize(\n    totalFormatted.value - usedFormatted.value,\n    totalFormatted.unit,\n    totalFormatted.unit,\n  );\n  return available;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAQA;AACA;AASA;;;;;;;;;;;;;AClEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;ACNA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AACA;AACA;AACA;AAKA;AAGA;AAOA;AAiBA;AACA;AACA;AACA;AACA;AAEA;AAIA;;;;;;;;;;;;;AC1FA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACfA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;ACnaA;AACA;AACA;AACA;AAKA;AACA;;;;;A","sourceRoot":""}