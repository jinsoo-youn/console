{"version":3,"file":"cluster-settings-7cd53d7e48b87bb0e624.js","sources":["webpack:///./public/components/cluster-settings/cluster-operator.tsx","webpack:///./public/components/cluster-settings/cluster-settings.tsx","webpack:///./public/components/cluster-settings/global-config.tsx","webpack:///./public/components/cluster-settings/oauth.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { Alert } from '@patternfly/react-core';\nimport { SyncAltIcon, UnknownIcon } from '@patternfly/react-icons';\n\nimport { ClusterOperatorModel } from '../../models';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from '../factory';\nimport { Conditions } from '../conditions';\nimport {\n  getClusterOperatorStatus,\n  getClusterOperatorVersion,\n  getClusterVersionCondition,\n  getStatusAndMessage,\n  ClusterOperator,\n  ClusterVersionConditionType,\n  ClusterVersionKind,\n  K8sResourceConditionStatus,\n  K8sResourceKindReference,\n  OperandVersion,\n  OperatorStatus,\n  referenceForModel,\n} from '../../module/k8s';\nimport {\n  navFactory,\n  EmptyBox,\n  Kebab,\n  ResourceLink,\n  ResourceSummary,\n  SectionHeading,\n} from '../utils';\nimport { GreenCheckCircleIcon, YellowExclamationTriangleIcon } from '@console/shared';\n\nexport const clusterOperatorReference: K8sResourceKindReference = referenceForModel(\n  ClusterOperatorModel,\n);\n\nconst getIcon = (status: OperatorStatus) => {\n  return {\n    [OperatorStatus.Available]: <GreenCheckCircleIcon />,\n    [OperatorStatus.Updating]: <SyncAltIcon />,\n    [OperatorStatus.Degraded]: <YellowExclamationTriangleIcon />,\n    [OperatorStatus.Unknown]: <UnknownIcon />,\n  }[status];\n};\n\nconst OperatorStatusIconAndLabel: React.SFC<OperatorStatusIconAndLabelProps> = ({ status }) => {\n  const icon = getIcon(status);\n  return (\n    <>\n      {icon} {status}\n    </>\n  );\n};\n\nconst tableColumnClasses = [\n  classNames('col-md-3', 'col-sm-3', 'col-xs-6'),\n  classNames('col-md-2', 'col-sm-3', 'col-xs-6'),\n  classNames('col-md-3', 'col-sm-3', 'hidden-xs'),\n  classNames('col-md-4', 'col-sm-3', 'hidden-xs'),\n  Kebab.columnClass,\n];\n\nconst ClusterOperatorTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Status',\n      sortFunc: 'getClusterOperatorStatus',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Version',\n      sortFunc: 'getClusterOperatorVersion',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Message',\n      props: { className: tableColumnClasses[3] },\n    },\n  ];\n};\nClusterOperatorTableHeader.displayName = 'ClusterOperatorTableHeader';\n\nconst ClusterOperatorTableRow: RowFunction<ClusterOperator> = ({ obj, index, key, style }) => {\n  const { status, message } = getStatusAndMessage(obj);\n  const operatorVersion = getClusterOperatorVersion(obj);\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={clusterOperatorReference}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n          title={obj.metadata.name}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[1]}>\n        <OperatorStatusIconAndLabel status={status} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>{operatorVersion || '-'}</TableData>\n      <TableData className={classNames(tableColumnClasses[3], 'co-break-word', 'co-pre-line')}>\n        {message ? _.truncate(message, { length: 256, separator: ' ' }) : '-'}\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport const ClusterOperatorList: React.SFC = (props) => (\n  <Table\n    {...props}\n    aria-label=\"Cluster Operators\"\n    Header={ClusterOperatorTableHeader}\n    Row={ClusterOperatorTableRow}\n    virtualize\n  />\n);\n\nconst allStatuses = [\n  OperatorStatus.Available,\n  OperatorStatus.Updating,\n  OperatorStatus.Degraded,\n  OperatorStatus.Unknown,\n];\n\nconst filters = [\n  {\n    filterGroupName: 'Status',\n    type: 'cluster-operator-status',\n    reducer: getClusterOperatorStatus,\n    items: _.map(allStatuses, (phase) => ({\n      id: phase,\n      title: phase,\n    })),\n  },\n];\n\nconst UpdateInProgressAlert: React.SFC<UpdateInProgressAlertProps> = ({ cv }) => {\n  const updateCondition = getClusterVersionCondition(\n    cv,\n    ClusterVersionConditionType.Progressing,\n    K8sResourceConditionStatus.True,\n  );\n  return (\n    <>\n      {updateCondition && (\n        <div className=\"co-m-pane__body co-m-pane__body--section-heading\">\n          <Alert isInline className=\"co-alert\" variant=\"info\" title=\"Cluster update in progress.\">\n            {updateCondition.message}\n          </Alert>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport const ClusterOperatorPage: React.SFC<ClusterOperatorPageProps> = (props) => (\n  <>\n    <UpdateInProgressAlert cv={props.cv} />\n    <ListPage\n      {...props}\n      title=\"Cluster Operators\"\n      kind={clusterOperatorReference}\n      ListComponent={ClusterOperatorList}\n      canCreate={false}\n      rowFilters={filters}\n    />\n  </>\n);\n\nconst OperandVersions: React.SFC<OperandVersionsProps> = ({ versions }) => {\n  return _.isEmpty(versions) ? (\n    <EmptyBox label=\"Versions\" />\n  ) : (\n    <div className=\"co-table-container\">\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Version</th>\n          </tr>\n        </thead>\n        <tbody>\n          {_.map(versions, ({ name, version }, i) => (\n            <tr key={i}>\n              <td>{name}</td>\n              <td>{version}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nconst ClusterOperatorDetails: React.SFC<ClusterOperatorDetailsProps> = ({ obj }) => {\n  const { status, message } = getStatusAndMessage(obj);\n  const versions: OperandVersion[] = _.get(obj, 'status.versions', []);\n  const conditions = _.get(obj, 'status.conditions', []);\n  // Show the operator version in the details if it's the only version.\n  const operatorVersion =\n    versions.length === 1 && versions[0].name === 'operator' ? versions[0].version : null;\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Cluster Operator Details\" />\n        <div className=\"row\">\n          <div className=\"col-sm-6\">\n            <ResourceSummary resource={obj} />\n          </div>\n          <div className=\"col-sm-6\">\n            <dl>\n              {operatorVersion && (\n                <>\n                  <dt>Version</dt>\n                  <dd>{operatorVersion}</dd>\n                </>\n              )}\n              <dt>Status</dt>\n              <dd>\n                <OperatorStatusIconAndLabel status={status} />\n              </dd>\n              <dt>Message</dt>\n              <dd className=\"co-pre-line\">{message || '-'}</dd>\n            </dl>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Conditions\" />\n        <Conditions conditions={conditions} />\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Operand Versions\" />\n        <OperandVersions versions={versions} />\n      </div>\n    </>\n  );\n};\n\nexport const ClusterOperatorDetailsPage: React.SFC<ClusterOperatorDetailsPageProps> = (props) => (\n  <DetailsPage\n    {...props}\n    kind={clusterOperatorReference}\n    pages={[navFactory.details(ClusterOperatorDetails), navFactory.editYaml()]}\n    breadcrumbsFor={() => [\n      { name: 'Cluster Operators', path: '/settings/cluster/clusteroperators' },\n      { name: 'Cluster Operator Details', path: props.match.url },\n    ]}\n  />\n);\n\ntype OperatorStatusIconAndLabelProps = {\n  status: OperatorStatus;\n};\n\ntype ClusterOperatorPageProps = {\n  cv: ClusterVersionKind;\n  autoFocus?: boolean;\n  showTitle?: boolean;\n};\n\ntype OperandVersionsProps = {\n  versions: OperandVersion[];\n};\n\ntype ClusterOperatorDetailsProps = {\n  obj: ClusterOperator;\n};\n\ntype ClusterOperatorDetailsPageProps = {\n  match: any;\n};\n\ntype UpdateInProgressAlertProps = {\n  cv: ClusterVersionKind;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Helmet } from 'react-helmet';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport { Link } from 'react-router-dom';\n\nimport {\n  AddCircleOIcon,\n  ArrowCircleUpIcon,\n  SyncAltIcon,\n  PencilAltIcon,\n} from '@patternfly/react-icons';\n\nimport { ClusterOperatorPage } from './cluster-operator';\nimport { clusterChannelModal, clusterUpdateModal, errorModal } from '../modals';\nimport { GlobalConfigPage } from './global-config';\nimport { ClusterAutoscalerModel, ClusterVersionModel } from '../../models';\nimport {\n  ClusterUpdateStatus,\n  ClusterVersionConditionType,\n  ClusterVersionKind,\n  clusterVersionReference,\n  getAvailableClusterUpdates,\n  getClusterID,\n  getClusterUpdateStatus,\n  getClusterVersionCondition,\n  getDesiredClusterVersion,\n  getErrataLink,\n  getLastCompletedUpdate,\n  getOCMLink,\n  k8sPatch,\n  K8sResourceConditionStatus,\n  K8sResourceKind,\n  referenceForModel,\n} from '../../module/k8s';\nimport {\n  EmptyBox,\n  ExternalLink,\n  Firehose,\n  HorizontalNav,\n  ResourceLink,\n  resourcePathFromModel,\n  SectionHeading,\n  Timestamp,\n  truncateMiddle,\n} from '../utils';\nimport {\n  GreenCheckCircleIcon,\n  RedExclamationCircleIcon,\n  YellowExclamationTriangleIcon,\n} from '@console/shared';\n\nconst cancelUpdate = (cv: ClusterVersionKind) => {\n  k8sPatch(ClusterVersionModel, cv, [{ path: '/spec/desiredUpdate', op: 'remove' }]).catch(\n    (err) => {\n      const error = err.message;\n      errorModal({ error });\n    },\n  );\n};\n\nexport const clusterAutoscalerReference = referenceForModel(ClusterAutoscalerModel);\n\nexport const CurrentChannel: React.SFC<CurrentChannelProps> = ({ cv }) => (\n  <Button\n    type=\"button\"\n    isInline\n    data-test-id=\"current-channel-update-link\"\n    onClick={() => clusterChannelModal({ cv })}\n    variant=\"link\"\n  >\n    {cv.spec.channel || '-'}\n    <PencilAltIcon className=\"co-icon-space-l pf-c-button-icon--plain\" />\n  </Button>\n);\n\nconst InvalidMessage: React.SFC<CVStatusMessageProps> = ({ cv }) => (\n  <>\n    <div>\n      <RedExclamationCircleIcon /> Invalid cluster version\n    </div>\n    <Button onClick={() => cancelUpdate(cv)} variant=\"primary\">\n      Cancel update\n    </Button>\n  </>\n);\n\nconst UpdatesAvailableMessage: React.SFC<CVStatusMessageProps> = ({ cv }) => (\n  <>\n    <div className=\"co-update-status\">\n      <ArrowCircleUpIcon className=\"update-pending\" /> Update available\n    </div>\n    <div>\n      <Button onClick={() => clusterUpdateModal({ cv })} variant=\"primary\">\n        Update now\n      </Button>\n    </div>\n  </>\n);\n\nconst UpdatingMessage: React.SFC<CVStatusMessageProps> = ({ cv }) => {\n  const updatingCondition = getClusterVersionCondition(\n    cv,\n    ClusterVersionConditionType.Progressing,\n    K8sResourceConditionStatus.True,\n  );\n  return (\n    <>\n      {updatingCondition.message && (\n        <div>\n          <SyncAltIcon className=\"fa-spin\" /> {updatingCondition.message}\n        </div>\n      )}\n      <Link to=\"/settings/cluster/clusteroperators\">View details</Link>\n    </>\n  );\n};\n\nconst ErrorRetrievingMessage: React.SFC<CVStatusMessageProps> = ({ cv }) => {\n  const retrievedUpdatesCondition = getClusterVersionCondition(\n    cv,\n    ClusterVersionConditionType.RetrievedUpdates,\n    K8sResourceConditionStatus.False,\n  );\n  return retrievedUpdatesCondition.reason === 'NoChannel' ? (\n    <span className=\"text-muted\">No update channel selected</span>\n  ) : (\n    <Tooltip content={truncateMiddle(retrievedUpdatesCondition.message, { length: 256 })}>\n      <span>\n        <RedExclamationCircleIcon />{' '}\n        {retrievedUpdatesCondition.reason === 'VersionNotFound'\n          ? 'Version not found'\n          : 'Error retrieving'}\n      </span>\n    </Tooltip>\n  );\n};\n\nconst FailingMessage: React.SFC<CVStatusMessageProps> = ({ cv }) => {\n  const failingCondition = getClusterVersionCondition(\n    cv,\n    ClusterVersionConditionType.Failing,\n    K8sResourceConditionStatus.True,\n  );\n  return (\n    <>\n      <div>\n        <Tooltip content={truncateMiddle(failingCondition.message, { length: 256 })}>\n          <span>\n            <RedExclamationCircleIcon /> Failing\n          </span>\n        </Tooltip>\n      </div>\n      <Link to=\"/settings/cluster/clusteroperators\">View details</Link>\n    </>\n  );\n};\n\nconst UpToDateMessage: React.SFC<{}> = () => (\n  <span>\n    <GreenCheckCircleIcon /> Up to date\n  </span>\n);\n\nexport const UpdateStatus: React.SFC<UpdateStatusProps> = ({ cv }) => {\n  const status = getClusterUpdateStatus(cv);\n  switch (status) {\n    case ClusterUpdateStatus.Invalid:\n      return <InvalidMessage cv={cv} />;\n    case ClusterUpdateStatus.UpdatesAvailable:\n      return <UpdatesAvailableMessage cv={cv} />;\n    case ClusterUpdateStatus.Updating:\n      return <UpdatingMessage cv={cv} />;\n    case ClusterUpdateStatus.ErrorRetrieving:\n      return <ErrorRetrievingMessage cv={cv} />;\n    case ClusterUpdateStatus.Failing:\n      return <FailingMessage cv={cv} />;\n    default:\n      return <UpToDateMessage />;\n  }\n};\n\nexport const CurrentVersion: React.SFC<CurrentVersionProps> = ({ cv }) => {\n  const desiredVersion = getDesiredClusterVersion(cv);\n  const lastVersion = getLastCompletedUpdate(cv);\n  const status = getClusterUpdateStatus(cv);\n\n  if (status === ClusterUpdateStatus.UpToDate || status === ClusterUpdateStatus.UpdatesAvailable) {\n    return desiredVersion ? (\n      <span className=\"co-select-to-copy\">{desiredVersion}</span>\n    ) : (\n      <>\n        <YellowExclamationTriangleIcon />\n        &nbsp;Unknown\n      </>\n    );\n  }\n\n  return lastVersion ? <span className=\"co-select-to-copy\">{lastVersion}</span> : <>None</>;\n};\n\nexport const UpdateLink: React.SFC<CurrentVersionProps> = ({ cv }) => {\n  const status = getClusterUpdateStatus(cv);\n  const updatesAvailable = !_.isEmpty(getAvailableClusterUpdates(cv));\n  return (\n    <>\n      {updatesAvailable &&\n      (status === ClusterUpdateStatus.ErrorRetrieving ||\n        status === ClusterUpdateStatus.Failing ||\n        status === ClusterUpdateStatus.Updating) ? (\n        <Button variant=\"link\" type=\"button\" onClick={() => clusterUpdateModal({ cv })}>\n          Update to another version\n        </Button>\n      ) : null}\n    </>\n  );\n};\n\nexport const CurrentVersionHeader: React.SFC<CurrentVersionProps> = ({ cv }) => {\n  const status = getClusterUpdateStatus(cv);\n  return (\n    <>\n      {status === ClusterUpdateStatus.UpToDate || status === ClusterUpdateStatus.UpdatesAvailable\n        ? 'Current Version'\n        : 'Last Completed Version'}\n    </>\n  );\n};\n\nexport const ClusterVersionDetailsTable: React.SFC<ClusterVersionDetailsTableProps> = ({\n  obj: cv,\n  autoscalers,\n}) => {\n  const { history = [] } = cv.status;\n  const clusterID = getClusterID(cv);\n  const errataLink = getErrataLink(cv);\n  const desiredImage: string = _.get(cv, 'status.desired.image') || '';\n  // Split image on `@` to emphasize the digest.\n  const imageParts = desiredImage.split('@');\n\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <div className=\"co-m-pane__body-group\">\n          <div className=\"co-detail-table co-detail-table--lg\">\n            <div className=\"co-detail-table__row row\">\n              <div className=\"co-detail-table__section col-sm-4 col-md-3\">\n                <dl className=\"co-m-pane__details\">\n                  <dt className=\"co-detail-table__section-header\">Channel</dt>\n                  <dd>\n                    <CurrentChannel cv={cv} />\n                  </dd>\n                </dl>\n              </div>\n              <div className=\"co-detail-table__section col-sm-4 col-md-4\">\n                <dl className=\"co-m-pane__details\">\n                  <dt className=\"co-detail-table__section-header\">\n                    <CurrentVersionHeader cv={cv} />\n                  </dt>\n                  <dd>\n                    <div>\n                      <CurrentVersion cv={cv} />\n                    </div>\n                    <UpdateLink cv={cv} />\n                  </dd>\n                </dl>\n              </div>\n              <div className=\"co-detail-table__section col-sm-4 col-md-4\">\n                <dl className=\"co-m-pane__details\">\n                  <dt className=\"co-detail-table__section-header\">Update Status</dt>\n                  <dd>\n                    <UpdateStatus cv={cv} />\n                  </dd>\n                </dl>\n              </div>\n            </div>\n          </div>\n        </div>\n        <div className=\"co-m-pane__body-group\">\n          {window.SERVER_FLAGS.branding !== 'okd' && window.SERVER_FLAGS.branding !== 'azure' && (\n            <p className=\"co-m-pane__explanation\">\n              View this cluster and manage subscription settings in{' '}\n              <ExternalLink text=\"OpenShift Cluster Manager\" href={getOCMLink(clusterID)} />.\n            </p>\n          )}\n          <dl className=\"co-m-pane__details\">\n            <dt>Cluster ID</dt>\n            <dd className=\"co-break-all co-select-to-copy\" data-test-id=\"cv-details-table-cid\">\n              {clusterID}\n            </dd>\n            <dt>Desired Release Image</dt>\n            <dd className=\"co-break-all co-select-to-copy\" data-test-id=\"cv-details-table-image\">\n              {imageParts.length === 2 ? (\n                <>\n                  <span className=\"text-muted\">{imageParts[0]}@</span>\n                  {imageParts[1]}\n                </>\n              ) : (\n                desiredImage || '-'\n              )}\n            </dd>\n            <dt>Cluster Version Configuration</dt>\n            <dd>\n              <ResourceLink kind={referenceForModel(ClusterVersionModel)} name={cv.metadata.name} />\n            </dd>\n            <dt>Cluster Autoscaler</dt>\n            <dd>\n              {_.isEmpty(autoscalers) ? (\n                <Link to={`${resourcePathFromModel(ClusterAutoscalerModel)}/~new`}>\n                  <AddCircleOIcon className=\"co-icon-space-r\" />\n                  Create Autoscaler\n                </Link>\n              ) : (\n                autoscalers.map((autoscaler) => (\n                  <div key={autoscaler.metadata.uid}>\n                    <ResourceLink\n                      kind={clusterAutoscalerReference}\n                      name={autoscaler.metadata.name}\n                    />\n                  </div>\n                ))\n              )}\n            </dd>\n          </dl>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Update History\">\n          {errataLink && (\n            <small>\n              <ExternalLink text=\"View errata\" href={errataLink} />\n            </small>\n          )}\n        </SectionHeading>\n        {_.isEmpty(history) ? (\n          <EmptyBox label=\"History\" />\n        ) : (\n          <div className=\"co-table-container\">\n            <table className=\"table\">\n              <thead>\n                <tr>\n                  <th>Version</th>\n                  <th>State</th>\n                  <th>Started</th>\n                  <th>Completed</th>\n                </tr>\n              </thead>\n              <tbody>\n                {_.map(history, (update, i) => (\n                  <tr key={i}>\n                    <td\n                      className=\"co-break-all co-select-to-copy\"\n                      data-test-id=\"cv-details-table-version\"\n                    >\n                      {update.version || '-'}\n                    </td>\n                    <td data-test-id=\"cv-details-table-state\">{update.state || '-'}</td>\n                    <td>\n                      <Timestamp timestamp={update.startedTime} />\n                    </td>\n                    <td>\n                      {update.completionTime ? (\n                        <Timestamp timestamp={update.completionTime} />\n                      ) : (\n                        '-'\n                      )}\n                    </td>\n                  </tr>\n                ))}\n              </tbody>\n            </table>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nexport const ClusterOperatorTabPage: React.SFC<ClusterOperatorTabPageProps> = ({ obj: cv }) => (\n  <ClusterOperatorPage cv={cv} autoFocus={false} showTitle={false} />\n);\n\nconst pages = [\n  {\n    href: '',\n    name: 'Details',\n    component: ClusterVersionDetailsTable,\n  },\n  {\n    href: 'clusteroperators',\n    name: 'Cluster Operators',\n    component: ClusterOperatorTabPage,\n  },\n  {\n    href: 'globalconfig',\n    name: 'Global Configuration',\n    component: GlobalConfigPage,\n  },\n];\n\nexport const ClusterSettingsPage: React.SFC<ClusterSettingsPageProps> = ({ match }) => {\n  const title = 'Cluster Settings';\n  const resources = [\n    { kind: clusterVersionReference, name: 'version', isList: false, prop: 'obj' },\n    { kind: clusterAutoscalerReference, isList: true, prop: 'autoscalers', optional: true },\n  ];\n  const resourceKeys = _.map(resources, 'prop');\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <div className=\"co-m-nav-title\">\n        <h1 className=\"co-m-pane__heading\" data-test-id=\"cluster-settings-page-heading\">\n          {title}\n        </h1>\n      </div>\n      <Firehose resources={resources}>\n        <HorizontalNav pages={pages} match={match} resourceKeys={resourceKeys} />\n      </Firehose>\n    </>\n  );\n};\n\ntype UpdateStatusProps = {\n  cv: ClusterVersionKind;\n};\n\ntype CVStatusMessageProps = {\n  cv: ClusterVersionKind;\n};\n\ntype CurrentChannelProps = {\n  cv: K8sResourceKind;\n};\n\ntype CurrentVersionProps = {\n  cv: ClusterVersionKind;\n};\n\ntype ClusterVersionDetailsTableProps = {\n  obj: ClusterVersionKind;\n  autoscalers: K8sResourceKind[];\n};\n\ntype ClusterSettingsPageProps = {\n  match: any;\n};\n\ntype ClusterOperatorTabPageProps = {\n  obj: ClusterVersionKind;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport { AlertVariant } from '@patternfly/react-core';\nimport * as plugins from '../../plugins';\n\nimport { RootState } from '../../redux';\nimport { featureReducerName, flagPending, FeatureState } from '../../reducers/features';\nimport { K8sKind, k8sList, referenceForModel, getResourceDescription } from '../../module/k8s';\nimport { EmptyBox, ExpandableAlert, Kebab, LoadingBox, resourcePathFromModel } from '../utils';\nimport { addIDPItems } from './oauth';\nimport { TextFilter } from '../factory';\nimport { fuzzyCaseInsensitive } from '../factory/table-filters';\n\nconst stateToProps = (state: RootState) => ({\n  configResources: state.k8s.getIn(['RESOURCES', 'configResources']),\n  flags: state[featureReducerName],\n});\n\nconst editYAMLMenuItem = (name: string, resourceLink: string) => ({\n  label: `Edit ${name} Resource`,\n  href: `${resourceLink}/yaml`,\n});\n\nconst viewAPIExplorerMenuItem = (name: string, apiExplorerLink: string) => ({\n  label: `Explore ${name} API`,\n  href: apiExplorerLink,\n});\n\nconst oauthMenuItems = _.map(addIDPItems, (label: string, id: string) => ({\n  label,\n  href: `/settings/idp/${id}`,\n}));\n\nconst ItemRow = ({ item }) => {\n  return (\n    <div className=\"row co-resource-list__item\" data-test-action={item.label}>\n      <div className=\"col-xs-10 col-sm-4\">\n        <Link to={item.path} data-test-id={item.id}>\n          {item.label}\n        </Link>\n      </div>\n      <div className=\"hidden-xs col-sm-7\">\n        <div className=\"co-line-clamp\">{item.description || '-'}</div>\n      </div>\n      <div className=\"dropdown-kebab-pf\">\n        <Kebab options={item.menuItems} />\n      </div>\n    </div>\n  );\n};\n\nclass GlobalConfigPage_ extends React.Component<GlobalConfigPageProps, GlobalConfigPageState> {\n  readonly state: GlobalConfigPageState = {\n    errors: [],\n    items: [],\n    loading: true,\n    textFilter: '',\n  };\n\n  getGlobalConfigs(): plugins.GlobalConfig[] {\n    return plugins.registry.getGlobalConfigs();\n  }\n\n  componentDidMount() {\n    Promise.all(\n      this.props.configResources.map((model: K8sKind) => {\n        return k8sList(model)\n          .catch(({ response: { status }, message = `Could not get resource ${model.kind}` }) => {\n            if (status !== 403) {\n              this.setState(({ errors }) => ({ errors: [...errors, message] }));\n            }\n            return [];\n          })\n          .then((items) => items.map((i: K8sKind) => ({ ...i, model })));\n      }),\n    ).then((responses) => {\n      const flattenedResponses = _.flatten(responses);\n      const winnowedResponses = flattenedResponses.map((item) => ({\n        model: item.model,\n        uid: item.metadata.uid,\n        name: item.metadata.name,\n        namespace: item.metadata.namespace,\n        kind: item.kind,\n      }));\n\n      const globalConfigs = this.getGlobalConfigs();\n      const usableConfigs = globalConfigs\n        .filter((item) => this.checkFlags(item))\n        .map((item) => item.properties);\n\n      const allItems = [...winnowedResponses, ...usableConfigs]\n        .map((item) => {\n          const apiExplorerLink = `/api-resource/cluster/${referenceForModel(item.model)}`;\n          const resourceLink = resourcePathFromModel(item.model, item.name, item.namespace);\n          return {\n            label: item.kind,\n            id: item.uid,\n            description: getResourceDescription(item.model),\n            path: resourceLink,\n            menuItems: [\n              editYAMLMenuItem(item.kind, resourceLink),\n              viewAPIExplorerMenuItem(item.kind, apiExplorerLink),\n              ...(item.kind === 'OAuth' ? oauthMenuItems : []),\n            ],\n          };\n        })\n        .concat([\n          {\n            label: 'Alertmanager',\n            id: 'alertmanager',\n            description: 'Configure grouping and routing of alerts',\n            path: '/monitoring/alertmanagerconfig',\n            menuItems: [\n              {\n                label: 'Create Receiver',\n                href: '/monitoring/alertmanagerconfig/receivers/~new',\n              },\n              {\n                label: `Edit Configuration YAML`,\n                href: `/monitoring/alertmanageryaml`,\n              },\n            ],\n          },\n        ]);\n      const sortedItems = _.sortBy(_.flatten(allItems), 'label', 'asc');\n\n      this.setState({\n        items: sortedItems,\n        loading: false,\n      });\n    });\n  }\n\n  checkFlags(c: plugins.GlobalConfig): GlobalConfigObjectProps {\n    const { flags } = this.props;\n    const { required } = c.properties;\n\n    const requiredArray = required ? _.castArray(required) : [];\n    const requirementMissing = _.some(\n      requiredArray,\n      (flag) => flag && (flagPending(flags.get(flag)) || !flags.get(flag)),\n    );\n    return requirementMissing ? null : c.properties;\n  }\n\n  render() {\n    const { errors, items = [], loading, textFilter } = this.state;\n    const visibleItems = items.filter(({ label, description = '' }) => {\n      return (\n        fuzzyCaseInsensitive(textFilter, label) ||\n        description.toLowerCase().indexOf(textFilter.toLowerCase()) !== -1\n      );\n    });\n    return (\n      <>\n        {!loading && (\n          <div className=\"co-m-pane__filter-bar co-m-pane__filter-bar--with-help-text\">\n            <div className=\"co-m-pane__filter-bar-group co-m-pane__filter-bar-group--help-text\">\n              <p className=\"co-help-text\">\n                Edit the following resources to manage the configuration of your cluster.\n              </p>\n            </div>\n            <div className=\"co-m-pane__fiter-bar-group co-m-pane__filter-bar-group--filter\">\n              <TextFilter\n                value={textFilter}\n                label=\"by name or description\"\n                onChange={(val) => this.setState({ textFilter: val })}\n              />\n            </div>\n          </div>\n        )}\n        <div className=\"co-m-pane__body\">\n          {!_.isEmpty(errors) && (\n            <ExpandableAlert\n              variant={AlertVariant.danger}\n              alerts={errors.map((error, i) => (\n                <div key={i}>{error}</div>\n              ))}\n            />\n          )}\n          {loading && <LoadingBox />}\n          {!loading &&\n            (_.isEmpty(visibleItems) ? (\n              <EmptyBox label=\"Configuration Resources\" />\n            ) : (\n              <div className=\"co-m-table-grid co-m-table-grid--bordered\">\n                <div className=\"row co-m-table-grid__head\">\n                  <div className=\"col-xs-10 col-sm-4\">Configuration Resource</div>\n                  <div className=\"hidden-xs col-sm-7\">Description</div>\n                  <div />\n                </div>\n                <div className=\"co-m-table-grid__body\">\n                  {_.map(visibleItems, (item) => (\n                    <ItemRow item={item} key={item.id} />\n                  ))}\n                </div>\n              </div>\n            ))}\n        </div>\n      </>\n    );\n  }\n}\n\nexport const GlobalConfigPage = connect(stateToProps)(GlobalConfigPage_);\n\ntype GlobalConfigPageProps = {\n  configResources: K8sKind[];\n  flags?: FeatureState;\n};\n\ntype GlobalConfigPageState = {\n  errors: string[];\n  items: any;\n  loading: boolean;\n  textFilter: string;\n};\n\ntype GlobalConfigObjectProps = {\n  kind: string;\n  model: K8sKind;\n  name: string;\n  namespace: string;\n  uid: string;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\n\nimport { OAuthModel } from '../../models';\nimport { IdentityProvider, OAuthKind, referenceForModel } from '../../module/k8s';\nimport { DetailsPage } from '../factory';\nimport {\n  Dropdown,\n  EmptyBox,\n  Kebab,\n  ResourceSummary,\n  SectionHeading,\n  history,\n  navFactory,\n} from '../utils';\nimport { formatDuration } from '../utils/datetime';\n\nconst { common } = Kebab.factory;\nconst menuActions = [...Kebab.getExtensionsActionsForKind(OAuthModel), ...common];\n\nconst oAuthReference = referenceForModel(OAuthModel);\n\n// Convert to ms for formatDuration\nconst tokenDuration = (seconds: number) =>\n  _.isNil(seconds) ? '-' : formatDuration(seconds * 1000);\n\nconst IdentityProviders: React.SFC<IdentityProvidersProps> = ({ identityProviders }) => {\n  return _.isEmpty(identityProviders) ? (\n    <EmptyBox label=\"Identity Providers\" />\n  ) : (\n    <div className=\"co-table-container\">\n      <table className=\"table\">\n        <thead>\n          <tr>\n            <th>Name</th>\n            <th>Type</th>\n            <th>Mapping Method</th>\n          </tr>\n        </thead>\n        <tbody>\n          {_.map(identityProviders, (idp) => (\n            <tr key={idp.name}>\n              <td data-test-idp-name={idp.name}>{idp.name}</td>\n              <td data-test-idp-type-for={idp.name}>{idp.type}</td>\n              <td data-test-idp-mapping-for={idp.name}>{idp.mappingMethod || 'claim'}</td>\n            </tr>\n          ))}\n        </tbody>\n      </table>\n    </div>\n  );\n};\n\nexport const addIDPItems = Object.freeze({\n  basicauth: 'Basic Authentication',\n  github: 'GitHub',\n  gitlab: 'GitLab',\n  google: 'Google',\n  htpasswd: 'HTPasswd',\n  keystone: 'Keystone',\n  ldap: 'LDAP',\n  oidconnect: 'OpenID Connect',\n  requestheader: 'Request Header',\n});\n\nconst OAuthDetails: React.SFC<OAuthDetailsProps> = ({ obj }: { obj: OAuthKind }) => {\n  const { identityProviders, tokenConfig } = obj.spec;\n\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"OAuth Details\" />\n        <ResourceSummary resource={obj}>\n          {tokenConfig && (\n            <>\n              <dt>Access Token Max Age</dt>\n              <dd>{tokenDuration(tokenConfig.accessTokenMaxAgeSeconds)}</dd>\n            </>\n          )}\n        </ResourceSummary>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Identity Providers\" />\n        <p className=\"co-m-pane__explanation co-m-pane__explanation--alt\">\n          Identity providers determine how users log into the cluster.\n        </p>\n        <Dropdown\n          className=\"co-m-pane__dropdown\"\n          buttonClassName=\"pf-c-dropdown__toggle\"\n          title=\"Add\"\n          noSelection={true}\n          items={addIDPItems}\n          onChange={(name: string) => history.push(`/settings/idp/${name}`)}\n        />\n        <IdentityProviders identityProviders={identityProviders} />\n      </div>\n    </>\n  );\n};\n\nexport const OAuthDetailsPage: React.SFC<OAuthDetailsPageProps> = (props) => (\n  <DetailsPage\n    {...props}\n    kind={oAuthReference}\n    menuActions={menuActions}\n    pages={[navFactory.details(OAuthDetails), navFactory.editYaml()]}\n  />\n);\n\ntype IdentityProvidersProps = {\n  identityProviders: IdentityProvider[];\n};\n\ntype OAuthDetailsProps = {\n  obj: OAuthKind;\n};\n\ntype OAuthDetailsPageProps = {\n  match: any;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAcA;AAQA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;AAEA;AACA;AAKA;AAEA;AAUA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AAIA;AAOA;AAEA;AAEA;AACA;AAWA;AACA;AAIA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AAMA;AACA;AACA;;;;;;;;;;;;;AChQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AACA;AACA;AAkBA;AAWA;AAMA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAQA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAOA;AACA;AAKA;AAEA;AAEA;;AAAA;AAGA;AAGA;AAEA;AACA;AAKA;AAIA;AACA;AAAA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAOA;AAEA;AACA;AACA;AAGA;AACA;AAGA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAOA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAGA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AAIA;AAWA;AACA;AAGA;AAIA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAMA;AACA;AACA;AAEA;AAgBA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AAIA;;;;;;;;;;;;;ACtaA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AAIA;AAEA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AAiJA;AA/IA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAIA;AACA;AAQA;AACA;AAQA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAUA;AACA;AAEA;;;;;;;;;;;;;AC9MA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AASA;AAEA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AAKA;AACA;AACA;AAGA;AAQA;AAIA;AAEA;;;;;A","sourceRoot":""}