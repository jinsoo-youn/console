{"version":3,"file":"21-b68921b8f42ed76a46c6.js","sources":["webpack:///./public/components/droppable-edit-yaml.tsx"],"sourcesContent":["import withDragDropContext from './utils/drag-drop-context';\nimport * as React from 'react';\n\nimport { EditYAML } from './edit-yaml';\nimport { NativeTypes } from 'react-dnd-html5-backend';\nimport { DropTarget } from 'react-dnd';\nimport { DropTargetMonitor } from 'react-dnd/lib/interfaces';\n\n// Maximal file size, in bytes, that user can upload\nconst maxFileUploadSize = 4000000;\nconst fileSizeErrorMsg = 'Maximum file size exceeded. File limit is 4MB.';\nconst fileTypeErrorMsg = 'Binary file detected. Edit text based YAML files only.';\n\nconst boxTarget = {\n  drop(props, monitor) {\n    if (props.onDrop && monitor.isOver()) {\n      props.onDrop(props, monitor);\n    }\n  },\n};\n\nconst EditYAMLComponent = DropTarget(NativeTypes.FILE, boxTarget, (connectObj, monitor) => ({\n  connectDropTarget: connectObj.dropTarget(),\n  isOver: monitor.isOver(),\n  canDrop: monitor.canDrop(),\n}))(EditYAML as React.FC<EditYAMLProps>);\n\nexport const DroppableEditYAML = withDragDropContext<DroppableEditYAMLProps>(\n  class DroppableEditYAML extends React.Component<DroppableEditYAMLProps, DroppableEditYAMLState> {\n    constructor(props) {\n      super(props);\n      this.state = {\n        fileUpload: '',\n        error: '',\n      };\n      this.handleFileDrop = this.handleFileDrop.bind(this);\n    }\n\n    containsNonPrintableCharacters(value: string) {\n      if (!value) {\n        return false;\n      }\n      // eslint-disable-next-line no-control-regex\n      return /[\\x00-\\x09\\x0E-\\x1F]/.test(value);\n    }\n\n    handleFileDrop(item, monitor) {\n      if (!monitor) {\n        return;\n      }\n      const [file] = monitor.getItem().files;\n\n      // If unsupported file type is dropped into drop zone, file will be undefined\n      if (!file) {\n        return;\n      }\n\n      // limit size size uploading to 1 mb\n      if (file.size <= maxFileUploadSize) {\n        const reader = new FileReader();\n        reader.onload = () => {\n          const input = reader.result as string;\n          if (this.containsNonPrintableCharacters(input)) {\n            this.setState({\n              error: fileTypeErrorMsg,\n            });\n          } else {\n            this.setState({\n              fileUpload: input,\n              error: '',\n            });\n          }\n        };\n        reader.readAsText(file, 'UTF-8');\n      } else {\n        this.setState({\n          error: fileSizeErrorMsg,\n        });\n      }\n    }\n\n    render() {\n      const { obj } = this.props;\n      const { fileUpload, error } = this.state;\n      return (\n        <EditYAMLComponent\n          {...this.props}\n          obj={obj}\n          fileUpload={fileUpload}\n          error={error}\n          onDrop={this.handleFileDrop}\n        />\n      );\n    }\n  },\n);\n\ntype EditYAMLProps = {\n  obj: string;\n  fileUpload: string;\n  error: string;\n  onDrop: (item: any, monitor: DropTargetMonitor) => void;\n};\n\nexport type DroppableEditYAMLProps = {\n  obj: string;\n};\n\nexport type DroppableEditYAMLState = {\n  fileUpload: string;\n  error: string;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AASA;AACA;;;;;A","sourceRoot":""}