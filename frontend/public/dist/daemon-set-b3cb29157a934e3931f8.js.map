{"version":3,"file":"daemon-set-b3cb29157a934e3931f8.js","sources":["webpack:///./public/components/daemon-set.tsx","webpack:///./public/components/overview/daemon-set-overview.tsx","webpack:///./public/components/overview/resource-overview-details.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\nimport { AddHealthChecks, EditHealthChecks } from '@console/app/src/actions/modify-health-checks';\nimport { K8sResourceKind } from '../module/k8s';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from './factory';\nimport { AsyncComponent, DetailsItem, Kebab, KebabAction, ContainerTable, detailsPage, LabelList, navFactory, PodsComponent, ResourceKebab, ResourceLink, ResourceSummary, SectionHeading, Selector, LoadingInline } from './utils';\nimport { ResourceEventStream } from './events';\nimport { VolumesTable } from './volumes-table';\nimport { DaemonSetModel } from '../models';\nimport { PodRingController, PodRing } from '@console/shared';\nimport { ResourceLabel } from '../models/hypercloud/resource-plural';\n\nexport const menuActions: KebabAction[] = [AddHealthChecks, Kebab.factory.AddStorage, ...Kebab.getExtensionsActionsForKind(DaemonSetModel), EditHealthChecks, ...Kebab.factory.common];\n\nconst kind = 'DaemonSet';\n\nconst tableColumnClasses = ['', '', classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), Kebab.columnClass];\n\nconst DaemonSetTableHeader = (t?: TFunction) => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_2'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_3'),\n      sortFunc: 'daemonsetNumScheduled',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_15'),\n      sortField: 'metadata.labels',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_16'),\n      sortField: 'spec.selector',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[5] },\n    },\n  ];\n};\nDaemonSetTableHeader.displayName = 'DaemonSetTableHeader';\n\nconst DaemonSetTableRow: RowFunction<K8sResourceKind> = ({ obj: daemonset, index, key, style }) => {\n  return (\n    <TableRow id={daemonset.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={daemonset.metadata.name} namespace={daemonset.metadata.namespace} title={daemonset.metadata.uid} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={daemonset.metadata.namespace} title={daemonset.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Link to={`/k8s/ns/${daemonset.metadata.namespace}/daemonsets/${daemonset.metadata.name}/pods`} title=\"pods\">\n          {daemonset.status.currentNumberScheduled} of {daemonset.status.desiredNumberScheduled} pods\n        </Link>\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <LabelList kind={kind} labels={daemonset.metadata.labels} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <Selector selector={daemonset.spec.selector} namespace={daemonset.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={daemonset} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport const DaemonSetDetailsList: React.FC<DaemonSetDetailsListProps> = ({ ds }) => {\n  const { t } = useTranslation();\n  return (\n    <dl className=\"co-m-pane__details\">\n      <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_38')} obj={ds} path=\"status.currentNumberScheduled\" />\n      <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_39')} obj={ds} path=\"status.desiredNumberScheduled\" />\n    </dl>\n  );\n};\n\nconst DaemonSetDetails: React.FC<DaemonSetDetailsProps> = ({ obj: daemonset }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', { 0: ResourceLabel(daemonset, t) })} />\n        <PodRingController\n          namespace={daemonset.metadata.namespace}\n          kind={daemonset.kind}\n          render={d => {\n            return d.loaded ? <PodRing key={daemonset.metadata.uid} pods={d.data[daemonset.metadata.uid].pods} obj={daemonset} resourceKind={DaemonSetModel} enableScaling={false} /> : <LoadingInline />;\n          }}\n        />\n        <div className=\"row\">\n          <div className=\"col-lg-6\">\n            <ResourceSummary resource={daemonset} showPodSelector showNodeSelector showTolerations />\n          </div>\n          <div className=\"col-lg-6\">\n            <DaemonSetDetailsList ds={daemonset} />\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_CONTAINERS_TABLEHEADER_1')} />\n        <ContainerTable containers={daemonset.spec.template.spec.containers} />\n      </div>\n      <div className=\"co-m-pane__body\">\n        <VolumesTable resource={daemonset} heading={t('COMMON:MSG_DETAILS_TABDETAILS_VOLUMES_TABLEHEADER_1')} />\n      </div>\n    </>\n  );\n};\n\nconst EnvironmentPage: React.FC<EnvironmentPageProps> = props => <AsyncComponent loader={() => import('./environment.jsx').then(c => c.EnvironmentPage)} {...props} />;\n\nconst envPath = ['spec', 'template', 'spec', 'containers'];\nconst EnvironmentTab: React.FC<EnvironmentTabProps> = props => <EnvironmentPage obj={props.obj} rawEnvData={props.obj.spec.template.spec} envPath={envPath} readOnly={false} />;\nconst { details, pods, editYaml, envEditor, events } = navFactory;\nexport const DaemonSets: React.FC = props => {\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"Daemon Sets\" Header={DaemonSetTableHeader.bind(null, t)} Row={DaemonSetTableRow} virtualize />;\n};\n\nexport const DaemonSetsPage: React.FC<DaemonSetsPageProps> = props => {\n  const { t } = useTranslation();\n  return <ListPage title={t('COMMON:MSG_LNB_MENU_30')} createButtonText={t('COMMON:MSG_MAIN_CREATEBUTTON_1', { 0: t('COMMON:MSG_LNB_MENU_30') })} canCreate={true} ListComponent={DaemonSets} kind={kind} {...props} />;\n};\n\nconst DaemonSetPods: React.FC<DaemonSetPodsProps> = props => <PodsComponent {...props} customData={{ showNodes: true }} />;\n\nexport const DaemonSetsDetailsPage: React.FC<DaemonSetsDetailsPageProps> = props => <DetailsPage {...props} kind={kind} menuActions={menuActions} pages={[details(detailsPage(DaemonSetDetails)), editYaml(), pods(DaemonSetPods), envEditor(EnvironmentTab), events(ResourceEventStream)]} />;\n\ntype DaemonSetDetailsListProps = {\n  ds: K8sResourceKind;\n};\n\ntype EnvironmentPageProps = {\n  obj: K8sResourceKind;\n  rawEnvData: any;\n  envPath: string[];\n  readOnly: boolean;\n};\n\ntype EnvironmentTabProps = {\n  obj: K8sResourceKind;\n};\n\ntype DaemonSetDetailsProps = {\n  obj: K8sResourceKind;\n};\n\ntype DaemonSetsPageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: any;\n};\n\ntype DaemonSetPodsProps = {\n  obj: K8sResourceKind;\n};\n\ntype DaemonSetsDetailsPageProps = {\n  match: any;\n};\n","import * as React from 'react';\nimport { OverviewItem, PodRing } from '@console/shared';\nimport { DaemonSetModel } from '../../models';\nimport { KebabAction, ResourceSummary } from '../utils';\nimport { menuActions, DaemonSetDetailsList } from '../daemon-set';\nimport { OverviewDetailsResourcesTab } from './resource-overview-page';\nimport { ResourceOverviewDetails } from './resource-overview-details';\n\nconst DaemonSetOverviewDetails: React.SFC<DaemonSetOverviewDetailsProps> = ({\n  item: { obj, pods },\n}) => (\n  <div className=\"overview__sidebar-pane-body resource-overview__body\">\n    <div className=\"resource-overview__pod-counts\">\n      <PodRing pods={pods} resourceKind={DaemonSetModel} obj={obj} enableScaling={false} />\n    </div>\n    <div className=\"resource-overview__summary\">\n      <ResourceSummary resource={obj} showPodSelector showNodeSelector showTolerations />\n    </div>\n    <div className=\"resource-overview__details\">\n      <DaemonSetDetailsList ds={obj} />\n    </div>\n  </div>\n);\n\nconst tabs = [\n  {\n    name: 'Details',\n    component: DaemonSetOverviewDetails,\n  },\n  {\n    name: 'Resources',\n    component: OverviewDetailsResourcesTab,\n  },\n];\n\nexport const DaemonSetOverview: React.SFC<DaemonSetOverviewProps> = ({ item, customActions }) => (\n  <ResourceOverviewDetails\n    item={item}\n    kindObj={DaemonSetModel}\n    menuActions={customActions ? [...customActions, ...menuActions] : menuActions}\n    tabs={tabs}\n  />\n);\n\ntype DaemonSetOverviewDetailsProps = {\n  item: OverviewItem;\n};\n\ntype DaemonSetOverviewProps = {\n  item: OverviewItem;\n  customActions?: KebabAction[];\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { connect } from 'react-redux';\n\nimport * as UIActions from '../../actions/ui';\nimport { K8sKind } from '../../module/k8s';\nimport { AsyncComponent, KebabAction, ResourceOverviewHeading, SimpleTabNav } from '../utils';\nimport * as plugins from '../../plugins';\nimport { OverviewItem } from '@console/shared';\n\nconst stateToProps = ({ UI }): PropsFromState => ({\n  selectedDetailsTab: UI.getIn(['overview', 'selectedDetailsTab']),\n});\n\nconst dispatchToProps = (dispatch): PropsFromDispatch => ({\n  onClickTab: (name) => dispatch(UIActions.selectOverviewDetailsTab(name)),\n});\n\nconst getResourceTabComp = (t) => (props) => (\n  <AsyncComponent {...props} loader={t.properties.loader} />\n);\n\nconst getPluginTabResources = (item, tabs): ResourceOverviewDetailsProps['tabs'] => {\n  let tabEntry = plugins.registry\n    .getOverviewResourceTabs()\n    .filter((tab) => item[tab.properties.key]);\n  const overridenTabs = tabs.map((tab) => {\n    const tabEntryConfig = tabEntry.find((t) => tab.name === t.properties.name);\n    if (tabEntryConfig) {\n      tabEntry = tabEntry.filter((entry) => tab.name !== entry.properties.name);\n      return {\n        name: tab.name,\n        component: getResourceTabComp(tabEntryConfig),\n      };\n    }\n    return tab;\n  });\n\n  /** Add new tabs from plugin */\n  const newTabs = tabEntry.map((entry) => {\n    return {\n      name: entry.properties.name,\n      component: getResourceTabComp(entry),\n    };\n  });\n\n  return overridenTabs.concat(newTabs);\n};\n\nexport const ResourceOverviewDetails = connect<PropsFromState, PropsFromDispatch, OwnProps>(\n  stateToProps,\n  dispatchToProps,\n)(\n  ({\n    kindObj,\n    item,\n    menuActions,\n    onClickTab,\n    selectedDetailsTab,\n    tabs,\n  }: ResourceOverviewDetailsProps) => {\n    const keys = Object.keys(item);\n    const keysRef = React.useRef(keys);\n    const tabsRef = React.useRef(tabs);\n    const pluginTabsRef = React.useRef<React.ComponentProps<typeof SimpleTabNav>['tabs']>();\n    if (\n      !pluginTabsRef.current ||\n      !_.isEqual(keys, keysRef.current) ||\n      !_.isEqual(tabs, tabsRef.current)\n    ) {\n      keysRef.current = keys;\n      tabsRef.current = tabs;\n      pluginTabsRef.current = getPluginTabResources(item, tabs);\n    }\n    return (\n      <div className=\"overview__sidebar-pane resource-overview\">\n        <ResourceOverviewHeading actions={menuActions} kindObj={kindObj} resource={item.obj} />\n        <SimpleTabNav\n          onClickTab={onClickTab}\n          selectedTab={selectedDetailsTab}\n          tabProps={{ item }}\n          tabs={pluginTabsRef.current}\n          additionalClassNames=\"co-m-horizontal-nav__menu--within-sidebar co-m-horizontal-nav__menu--within-overview-sidebar\"\n        />\n      </div>\n    );\n  },\n);\n\ntype PropsFromState = {\n  selectedDetailsTab: any;\n};\n\ntype PropsFromDispatch = {\n  onClickTab: (name: string) => void;\n};\n\ntype OwnProps = {\n  item: OverviewItem;\n  kindObj: K8sKind;\n  menuActions: KebabAction[];\n  tabs: {\n    name: string;\n    component: any;\n  }[];\n  isOperatorBacked?: boolean;\n};\n\nexport type ResourceOverviewDetailsProps = PropsFromState & PropsFromDispatch & OwnProps;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;ACrJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACnCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAYA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AASA;;;;;A","sourceRoot":""}