{"version":3,"file":"dev-console-helm-rollback-cedd7b507d15c1a680a5.js","sources":["webpack:///./packages/dev-console/src/components/helm/HelmReleaseRollbackPage.tsx","webpack:///./packages/dev-console/src/components/helm/form/HelmReleaseRollbackForm.tsx","webpack:///./packages/dev-console/src/components/helm/form/rollback/RevisionListHeader.tsx","webpack:///./packages/dev-console/src/components/helm/form/rollback/RevisionListRow.tsx"],"sourcesContent":["import * as React from 'react';\nimport Helmet from 'react-helmet';\nimport { Formik } from 'formik';\nimport { RouteComponentProps } from 'react-router';\nimport { PageBody } from '@console/shared';\nimport { coFetchJSON } from '@console/internal/co-fetch';\nimport { PageHeading, history, getQueryArgument } from '@console/internal/components/utils';\n\nimport { HelmRelease, HelmActionType, HelmActionOrigins } from './helm-types';\nimport { getHelmActionConfig } from './helm-utils';\nimport NamespacedPage, { NamespacedPageVariants } from '../NamespacedPage';\nimport HelmReleaseRollbackForm from './form/HelmReleaseRollbackForm';\n\ntype HelmReleaseRollbackPageProps = RouteComponentProps<{\n  ns?: string;\n  releaseName?: string;\n}>;\n\ntype HelmRollbackFormData = {\n  revision: number;\n};\n\nconst HelmReleaseRollbackPage: React.FC<HelmReleaseRollbackPageProps> = ({ match }) => {\n  const { releaseName, ns: namespace } = match.params;\n  const actionOrigin = getQueryArgument('actionOrigin') as HelmActionOrigins;\n  const [releaseHistory, setReleaseHistory] = React.useState<HelmRelease[]>(null);\n\n  const config = React.useMemo(\n    () => getHelmActionConfig(HelmActionType.Rollback, releaseName, namespace, actionOrigin),\n    [actionOrigin, namespace, releaseName],\n  );\n\n  React.useEffect(() => {\n    let ignore = false;\n\n    const fetchReleaseHistory = async () => {\n      let res: HelmRelease[];\n      try {\n        res = await coFetchJSON(config.helmReleaseApi);\n      } catch {} // eslint-disable-line no-empty\n      if (ignore) return;\n\n      res?.length > 0 && setReleaseHistory(res);\n    };\n\n    fetchReleaseHistory();\n\n    return () => {\n      ignore = true;\n    };\n  }, [config.helmReleaseApi]);\n\n  const initialValues: HelmRollbackFormData = {\n    revision: -1,\n  };\n\n  const handleSubmit = (values, actions) => {\n    actions.setStatus({ isSubmitting: true });\n    const payload = {\n      namespace,\n      name: releaseName,\n      version: values.revision,\n    };\n\n    config\n      .fetch('/api/helm/release', payload, null, -1)\n      .then(() => {\n        actions.setStatus({ isSubmitting: false });\n        history.push(config.redirectURL);\n      })\n      .catch((err) => {\n        actions.setSubmitting(false);\n        actions.setStatus({ submitError: err.message });\n      });\n  };\n\n  return (\n    <NamespacedPage variant={NamespacedPageVariants.light} disabled hideApplications>\n      <Helmet>\n        <title>{config.title}</title>\n      </Helmet>\n      <PageHeading title={config.title}>\n        Select the version to rollback <strong>{releaseName}</strong> to, from the table below:\n      </PageHeading>\n      <PageBody>\n        <Formik initialValues={initialValues} onSubmit={handleSubmit} onReset={history.goBack}>\n          {(props) => <HelmReleaseRollbackForm {...props} releaseHistory={releaseHistory} />}\n        </Formik>\n      </PageBody>\n    </NamespacedPage>\n  );\n};\n\nexport default HelmReleaseRollbackPage;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { FormikProps, FormikValues } from 'formik';\nimport { Form, FormGroup } from '@patternfly/react-core';\nimport { FormFooter } from '@console/shared';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { Table } from '@console/internal/components/factory';\nimport { HelmRelease } from '../helm-types';\n\nimport RevisionListHeader from './rollback/RevisionListHeader';\nimport RevisionListRow from './rollback/RevisionListRow';\n\ninterface HelmReleaseRollbackFormProps {\n  releaseHistory: HelmRelease[];\n}\n\ntype Props = FormikProps<FormikValues> & HelmReleaseRollbackFormProps;\n\nconst HelmReleaseRollbackForm: React.FC<Props> = ({\n  errors,\n  handleSubmit,\n  handleReset,\n  status,\n  isSubmitting,\n  dirty,\n  releaseHistory,\n}) => {\n  return (\n    <Form onSubmit={handleSubmit}>\n      <FormGroup fieldId=\"revision-list-field\" label=\"Revision History\" isRequired>\n        <Table\n          data={releaseHistory}\n          defaultSortField=\"version\"\n          defaultSortOrder={SortByDirection.desc}\n          aria-label=\"CustomResources\"\n          Header={RevisionListHeader}\n          Row={RevisionListRow}\n          loaded={!!releaseHistory}\n          virtualize\n        />\n      </FormGroup>\n      <FormFooter\n        handleReset={handleReset}\n        errorMessage={status?.submitError}\n        isSubmitting={status?.isSubmitting || isSubmitting}\n        submitLabel=\"Rollback\"\n        disableSubmit={status?.isSubmitting || !dirty || !_.isEmpty(errors)}\n        resetLabel=\"Cancel\"\n        sticky\n      />\n    </Form>\n  );\n};\n\nexport default HelmReleaseRollbackForm;\n","import { sortable } from '@patternfly/react-table';\nimport { Kebab } from '@console/internal/components/utils';\n\nexport const tableColumnClasses = {\n  input: Kebab.columnClass,\n  revision: 'col-lg-1 col-md-3 col-sm-3 col-xs-3',\n  updated: 'col-lg-2 col-md-3 col-sm-5 col-xs-5',\n  status: 'col-lg-1 col-md-2 hidden-sm hidden-xs',\n  chartName: 'col-lg-2 hidden-md hidden-sm hidden-xs',\n  chartVersion: 'col-lg-2 hidden-md hidden-sm hidden-xs',\n  appVersion: 'col-lg-2 hidden-md hidden-sm hidden-xs',\n  description: 'col-lg-2 hidden-md hidden-sm hidden-xs',\n};\n\nconst RevisionListHeader = () => {\n  return [\n    {\n      title: '',\n      props: { className: tableColumnClasses.input },\n    },\n    {\n      title: 'Revision',\n      sortField: 'version',\n      transforms: [sortable],\n      props: { className: tableColumnClasses.revision },\n    },\n    {\n      title: 'Updated',\n      sortField: 'info.last_deployed',\n      transforms: [sortable],\n      props: { className: tableColumnClasses.updated },\n    },\n    {\n      title: 'Status',\n      sortField: 'info.status',\n      transforms: [sortable],\n      props: { className: tableColumnClasses.status },\n    },\n    {\n      title: 'Chart Name',\n      sortField: 'chart.metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses.chartName },\n    },\n    {\n      title: 'Chart Version',\n      sortField: 'chart.metadata.version',\n      transforms: [sortable],\n      props: { className: tableColumnClasses.chartVersion },\n    },\n    {\n      title: 'App Version',\n      sortField: 'chart.metadata.appVersion',\n      transforms: [sortable],\n      props: { className: tableColumnClasses.appVersion },\n    },\n    {\n      title: 'Description',\n      props: { className: tableColumnClasses.description },\n    },\n  ];\n};\n\nexport default RevisionListHeader;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Status, RadioButtonField } from '@console/shared';\nimport { TableRow, TableData, RowFunction } from '@console/internal/components/factory';\nimport { Timestamp } from '@console/internal/components/utils';\nimport { tableColumnClasses } from './RevisionListHeader';\n\nconst RevisionListRow: RowFunction = ({ obj, index, key, style }) => {\n  return (\n    <TableRow id={obj.revision} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses.input}>\n        <RadioButtonField value={obj.version} name=\"revision\" />\n      </TableData>\n      <TableData className={tableColumnClasses.revision}>{obj.version}</TableData>\n      <TableData className={tableColumnClasses.updated}>\n        <Timestamp timestamp={obj.info.last_deployed} />\n      </TableData>\n      <TableData className={tableColumnClasses.status}>\n        <Status status={_.capitalize(obj.info.status)} />\n      </TableData>\n      <TableData className={tableColumnClasses.chartName}>{obj.chart.metadata.name}</TableData>\n      <TableData className={tableColumnClasses.chartVersion}>\n        {obj.chart.metadata.version}\n      </TableData>\n      <TableData className={tableColumnClasses.appVersion}>\n        {obj.chart.metadata.appVersion}\n      </TableData>\n      <TableData className={tableColumnClasses.description}>{obj.info.description}</TableData>\n    </TableRow>\n  );\n};\n\nexport default RevisionListRow;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;;AACA;AACA;AACA;AACA;AAMA;AAEA;;;;;;;;;;;;;AC7FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAQA;AASA;AAEA;AACA;AAWA;AAWA;AAEA;;;;;;;;;;;;;ACtDA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AC/DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AAGA;AAGA;AAEA;;;;;A","sourceRoot":""}