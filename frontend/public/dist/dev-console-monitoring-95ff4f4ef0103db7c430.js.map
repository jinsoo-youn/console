{"version":3,"file":"dev-console-monitoring-95ff4f4ef0103db7c430.js","sources":["webpack:///./packages/dev-console/src/components/NamespacedPage.scss?186e","webpack:///./packages/dev-console/src/components/NamespacedPage.tsx","webpack:///./packages/dev-console/src/components/dropdown/ApplicationDropdown.tsx","webpack:///./packages/dev-console/src/components/dropdown/ApplicationSelector.tsx","webpack:///./packages/dev-console/src/components/monitoring/MonitoringPage.tsx","webpack:///./packages/dev-console/src/components/monitoring/dashboard/MonitoringDashboard.scss?f4fd","webpack:///./packages/dev-console/src/components/monitoring/dashboard/MonitoringDashboard.tsx","webpack:///./packages/dev-console/src/components/monitoring/events/MonitoringEvents.tsx","webpack:///./packages/dev-console/src/components/monitoring/metrics/EmptyStateQuery.tsx","webpack:///./packages/dev-console/src/components/monitoring/metrics/MetricsChart.scss?6535","webpack:///./packages/dev-console/src/components/monitoring/metrics/MetricsChart.tsx","webpack:///./packages/dev-console/src/components/monitoring/metrics/MetricsQueryInput.scss?5d68","webpack:///./packages/dev-console/src/components/monitoring/metrics/MetricsQueryInput.tsx","webpack:///./packages/dev-console/src/components/monitoring/metrics/MonitoringMetrics.tsx","webpack:///./packages/dev-console/src/components/projects/ProjectListPage.scss?762c","webpack:///./packages/dev-console/src/components/projects/ProjectListPage.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as cx from 'classnames';\nimport { NamespaceBar } from '@console/internal/components/namespace';\nimport ApplicationSelector from './dropdown/ApplicationSelector';\n\nimport './NamespacedPage.scss';\n\nexport enum NamespacedPageVariants {\n  light = 'light',\n  default = 'default',\n}\n\nexport interface NamespacedPageProps {\n  disabled?: boolean;\n  hideApplications?: boolean;\n  onNamespaceChange?: (newNamespace: string) => void;\n  variant?: NamespacedPageVariants;\n  toolbar?: React.ReactNode;\n}\n\nconst NamespacedPage: React.FC<NamespacedPageProps> = ({\n  children,\n  disabled,\n  onNamespaceChange,\n  hideApplications = true,\n  variant = NamespacedPageVariants.default,\n  toolbar,\n}) => (\n  <div className=\"odc-namespaced-page\">\n    <NamespaceBar disabled={disabled} onNamespaceChange={onNamespaceChange}>\n      {!hideApplications && <ApplicationSelector disabled={disabled} />}\n      {toolbar && <div className=\"odc-namespaced-page__toolbar\">{toolbar}</div>}\n    </NamespaceBar>\n    <div\n      className={cx('odc-namespaced-page__content', {\n        [`is-${variant}`]: variant !== NamespacedPageVariants.default,\n      })}\n    >\n      {children}\n    </div>\n  </div>\n);\n\nexport default NamespacedPage;\n","import * as React from 'react';\nimport { Firehose } from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { ServiceModel } from '@console/knative-plugin';\nimport { VirtualMachineModel } from '@console/kubevirt-plugin/src/models';\nimport { ResourceDropdown } from '@console/shared';\n\ninterface ApplicationDropdownProps {\n  id?: string;\n  className?: string;\n  dropDownClassName?: string;\n  menuClassName?: string;\n  buttonClassName?: string;\n  title?: React.ReactNode;\n  titlePrefix?: string;\n  allApplicationsKey?: string;\n  storageKey?: string;\n  disabled?: boolean;\n  allSelectorItem?: {\n    allSelectorKey?: string;\n    allSelectorTitle?: string;\n  };\n  namespace?: string;\n  actionItems?: {\n    actionTitle: string;\n    actionKey: string;\n  }[];\n  selectedKey: string;\n  autoSelect?: boolean;\n  onChange?: (key: string, name?: string) => void;\n  onLoad?: (items: { [key: string]: string }) => void;\n}\n\nconst ApplicationDropdown: React.FC<ApplicationDropdownProps> = ({ namespace, ...props }) => {\n  const resources = [\n    {\n      isList: true,\n      namespace,\n      kind: 'DeploymentConfig',\n      prop: 'deploymentConfigs',\n    },\n    {\n      isList: true,\n      namespace,\n      kind: 'Deployment',\n      prop: 'deployments',\n    },\n    {\n      isList: true,\n      kind: 'StatefulSet',\n      namespace,\n      prop: 'statefulSets',\n    },\n    {\n      isList: true,\n      kind: 'DaemonSet',\n      namespace,\n      prop: 'daemonSets',\n    },\n    {\n      isList: true,\n      kind: referenceForModel(ServiceModel),\n      namespace,\n      prop: 'knativeService',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: 'Secret',\n      namespace,\n      prop: 'secrets',\n    },\n    {\n      isList: true,\n      kind: VirtualMachineModel.kind,\n      namespace,\n      prop: 'virtualMachines',\n      optional: true,\n    },\n  ];\n  return (\n    <Firehose resources={resources}>\n      <ResourceDropdown\n        {...props}\n        placeholder=\"Select an Application\"\n        dataSelector={['metadata', 'labels', 'app.kubernetes.io/part-of']}\n      />\n    </Firehose>\n  );\n};\n\nexport default ApplicationDropdown;\n","import * as React from 'react';\nimport { connect, Dispatch } from 'react-redux';\nimport {\n  ALL_NAMESPACES_KEY,\n  ALL_APPLICATIONS_KEY,\n  APPLICATION_LOCAL_STORAGE_KEY,\n} from '@console/shared';\nimport { setActiveApplication } from '@console/internal/actions/ui';\nimport { RootState } from '@console/internal/redux';\nimport { getActiveNamespace, getActiveApplication } from '@console/internal/reducers/ui';\nimport ApplicationDropdown from './ApplicationDropdown';\n\nexport interface ApplicationSelectorProps {\n  disabled?: boolean;\n}\n\ninterface StateProps {\n  namespace: string;\n  application: string;\n}\n\ninterface DispatchProps {\n  onChange: (name: string) => void;\n}\n\ntype Props = ApplicationSelectorProps & StateProps & DispatchProps;\n\nconst ApplicationSelector: React.FC<Props> = ({ namespace, application, onChange, disabled }) => {\n  if (namespace === ALL_NAMESPACES_KEY) return null;\n\n  const allApplicationsTitle = 'all applications';\n  const title: string = application === ALL_APPLICATIONS_KEY ? allApplicationsTitle : application;\n\n  const onApplicationChange = (newApplication: string, key: string) => {\n    key === ALL_APPLICATIONS_KEY ? onChange(key) : onChange(newApplication);\n  };\n\n  return (\n    <ApplicationDropdown\n      className=\"co-namespace-selector\"\n      menuClassName=\"co-namespace-selector__menu\"\n      buttonClassName=\"pf-m-plain\"\n      namespace={namespace}\n      title={title && <span className=\"btn-link__title\">{title}</span>}\n      titlePrefix=\"Application\"\n      allSelectorItem={{\n        allSelectorKey: ALL_APPLICATIONS_KEY,\n        allSelectorTitle: allApplicationsTitle,\n      }}\n      selectedKey={application || ALL_APPLICATIONS_KEY}\n      onChange={onApplicationChange}\n      storageKey={APPLICATION_LOCAL_STORAGE_KEY}\n      disabled={disabled}\n    />\n  );\n};\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  namespace: getActiveNamespace(state),\n  application: getActiveApplication(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => ({\n  onChange: (app: string) => {\n    dispatch(setActiveApplication(app));\n  },\n});\n\nexport default connect<StateProps, DispatchProps, ApplicationSelectorProps>(\n  mapStateToProps,\n  mapDispatchToProps,\n)(ApplicationSelector);\n","import * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { match as RMatch } from 'react-router';\nimport { HorizontalNav, PageHeading, history } from '@console/internal/components/utils';\nimport { TechPreviewBadge, ALL_NAMESPACES_KEY } from '@console/shared';\nimport { withStartGuide } from '@console/internal/components/start-guide';\nimport NamespacedPage, { NamespacedPageVariants } from '../NamespacedPage';\nimport ProjectListPage from '../projects/ProjectListPage';\nimport ConnectedMonitoringDashboard from './dashboard/MonitoringDashboard';\nimport ConnectedMonitoringMetrics from './metrics/MonitoringMetrics';\nimport MonitoringEvents from './events/MonitoringEvents';\n\nexport const MONITORING_ALL_NS_PAGE_URI = '/dev-monitoring/all-namespaces';\n\ntype MonitoringPageProps = {\n  match: RMatch<{\n    ns?: string;\n  }>;\n};\n\nconst handleNamespaceChange = (newNamespace: string): void => {\n  if (newNamespace === ALL_NAMESPACES_KEY) {\n    history.push(MONITORING_ALL_NS_PAGE_URI);\n  }\n};\n\nexport const PageContents: React.FC<MonitoringPageProps> = ({ match }) => {\n  const activeNamespace = match.params.ns;\n  const pages = [\n    {\n      href: '',\n      name: 'Dashboard',\n      component: ConnectedMonitoringDashboard,\n    },\n    {\n      href: 'metrics',\n      name: 'Metrics',\n      component: ConnectedMonitoringMetrics,\n    },\n    {\n      href: 'events',\n      name: 'Events',\n      component: MonitoringEvents,\n    },\n  ];\n  return activeNamespace ? (\n    <>\n      <PageHeading badge={<TechPreviewBadge />} title=\"Monitoring\" />\n      <HorizontalNav pages={pages} match={match} noStatusBox />\n    </>\n  ) : (\n    <ProjectListPage badge={<TechPreviewBadge />} title=\"Monitoring\">\n      Select a project to view monitoring metrics\n    </ProjectListPage>\n  );\n};\n\nconst PageContentsWithStartGuide = withStartGuide(PageContents);\n\nexport const MonitoringPage: React.FC<MonitoringPageProps> = (props) => (\n  <>\n    <Helmet>\n      <title>Monitoring</title>\n    </Helmet>\n    <NamespacedPage\n      hideApplications\n      variant={NamespacedPageVariants.light}\n      onNamespaceChange={handleNamespaceChange}\n    >\n      <PageContentsWithStartGuide {...props} />\n    </NamespacedPage>\n  </>\n);\n\nexport default MonitoringPage;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { match as RMatch } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Helmet } from 'react-helmet';\nimport Dashboard from '@console/shared/src/components/dashboard/Dashboard';\nimport { RootState } from '@console/internal/redux';\nimport { getURLSearchParams, ResourceLink } from '@console/internal/components/utils';\nimport {\n  TimespanDropdown,\n  PollIntervalDropdown,\n} from '@console/internal/components/monitoring/dashboards';\nimport ConnectedMonitoringDashboardGraph from './MonitoringDashboardGraph';\nimport {\n  monitoringDashboardQueries,\n  workloadMetricsQueries,\n  MonitoringQuery,\n  topWorkloadMetricsQueries,\n} from '../queries';\nimport './MonitoringDashboard.scss';\n\ntype MonitoringDashboardProps = {\n  match: RMatch<{\n    ns?: string;\n  }>;\n};\n\ntype StateProps = {\n  timespan: number;\n  pollInterval: number;\n};\n\ntype Props = MonitoringDashboardProps & StateProps;\n\nexport const MonitoringDashboard: React.FC<Props> = ({ match, timespan, pollInterval }) => {\n  const namespace = match.params.ns;\n  const params = getURLSearchParams();\n  const { workloadName, workloadType } = params;\n  const workLoadPresent = workloadName && workloadType;\n  const queries: MonitoringQuery[] = workLoadPresent\n    ? [...topWorkloadMetricsQueries, ...workloadMetricsQueries]\n    : monitoringDashboardQueries;\n\n  return (\n    <>\n      <Helmet>\n        <title>Dashboard</title>\n      </Helmet>\n      <div className=\"odc-monitoring-dashboard\">\n        <div className=\"odc-monitoring-dashboard__dropdown-options\">\n          <TimespanDropdown />\n          <PollIntervalDropdown />\n        </div>\n        {workLoadPresent && (\n          <div className=\"odc-monitoring-dashboard__resource-link\">\n            Showing metrics for &nbsp;\n            <ResourceLink\n              kind={workloadType}\n              name={workloadName}\n              namespace={namespace}\n              title={workloadName}\n              inline\n            />\n          </div>\n        )}\n        <Dashboard>\n          {_.map(queries, (q) => (\n            <ConnectedMonitoringDashboardGraph\n              title={q.title}\n              namespace={namespace}\n              graphType={q.chartType}\n              query={q.query({ namespace, workloadName, workloadType: _.toLower(workloadType) })}\n              humanize={q.humanize}\n              byteDataType={q.byteDataType}\n              key={q.title}\n              timespan={timespan}\n              pollInterval={pollInterval}\n            />\n          ))}\n        </Dashboard>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  timespan: state.UI.getIn(['monitoringDashboards', 'timespan']),\n  pollInterval: state.UI.getIn(['monitoringDashboards', 'pollInterval']),\n});\n\nexport default connect<StateProps, MonitoringDashboardProps>(mapStateToProps)(MonitoringDashboard);\n","import * as React from 'react';\nimport { match as RMatch } from 'react-router-dom';\nimport { EventsList } from '@console/internal/components/events';\n\ninterface MonitoringEventsProps {\n  match: RMatch<{\n    ns?: string;\n  }>;\n}\n\nconst MonitoringEvents: React.FC<MonitoringEventsProps> = (props) => {\n  return <EventsList {...props} namespace={props.match.params.ns} />;\n};\n\nexport default MonitoringEvents;\n","import * as React from 'react';\nimport {\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n} from '@patternfly/react-core';\nimport { ChartLineIcon } from '@patternfly/react-icons';\n\nconst EmptyStateQuery: React.FC = () => (\n  <EmptyState variant={EmptyStateVariant.full}>\n    <EmptyStateIcon size=\"sm\" icon={ChartLineIcon} />\n    <EmptyStateBody>\n      Select a query or enter your own to view metrics for this project\n    </EmptyStateBody>\n  </EmptyState>\n);\n\nexport default EmptyStateQuery;\n","// extracted by mini-css-extract-plugin","import * as _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { RootState } from '@console/internal/redux';\nimport { queryBrowserDeleteAllQueries } from '@console/internal/actions/ui';\nimport { getActiveNamespace } from '@console/internal/reducers/ui';\nimport {\n  QueryBrowser,\n  QueryObj,\n  QueryBrowserProps,\n} from '@console/internal/components/monitoring/query-browser';\nimport { QueryTable } from '@console/internal/components/monitoring/metrics';\nimport EmptyStateQuery from './EmptyStateQuery';\nimport './MetricsChart.scss';\n\ntype StateProps = {\n  queries: QueryObj[];\n  namespace: string;\n};\ntype MetricsChartProps = {\n  deleteAll?: () => never;\n  queries: QueryObj[];\n  namespace: string;\n};\nconst DEFAULT_TIME_SPAN = 30 * 60 * 1000;\n\nexport const MetricsChart: React.FC<MetricsChartProps> = ({ deleteAll, queries, namespace }) => {\n  const [queryStrings, setQueryStrings] = React.useState<QueryBrowserProps['queries']>([]);\n  const [disabledSeries, setDisabledSeries] = React.useState<QueryBrowserProps['disabledSeries']>(\n    [],\n  );\n  // TO delete all queries patched on componenet unmount\n  React.useEffect(() => deleteAll, [deleteAll]);\n  React.useEffect(() => {\n    setQueryStrings((prev) => {\n      const next = _.compact(_.map(queries, 'query'));\n      return _.isEqual(prev, next) ? prev : next;\n    });\n    setDisabledSeries((prev) => {\n      const next = _.compact(_.map(queries, 'disabledSeries'));\n      return _.isEqual(prev, next) ? prev : next;\n    });\n  }, [queries]);\n  return queryStrings.length === 0 ? (\n    <EmptyStateQuery />\n  ) : (\n    <div className=\"odc-metrics-chart\">\n      <QueryBrowser\n        defaultTimespan={DEFAULT_TIME_SPAN}\n        disabledSeries={disabledSeries}\n        namespace={namespace}\n        queries={queryStrings}\n      />\n      <QueryTable index={0} namespace={namespace} />\n    </div>\n  );\n};\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  queries: state.UI.getIn(['queryBrowser', 'queries']).toJS(),\n  namespace: getActiveNamespace(state),\n});\n\nexport default connect(mapStateToProps, { deleteAll: queryBrowserDeleteAllQueries })(MetricsChart);\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as _ from 'lodash';\n// FIXME upgrading redux types is causing many errors at this time\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\nimport { useSelector, useDispatch } from 'react-redux';\nimport * as fuzzy from 'fuzzysearch';\nimport { RootState } from '@console/internal/redux';\nimport { Button } from '@patternfly/react-core';\nimport { Dropdown, removeQueryArgument, useSafeFetch } from '@console/internal/components/utils';\nimport {\n  queryBrowserRunQueries,\n  queryBrowserPatchQuery,\n  queryBrowserSetMetrics,\n} from '@console/internal/actions/ui';\nimport { getActiveNamespace } from '@console/internal/reducers/ui';\nimport { QueryInput } from '@console/internal/components/monitoring/metrics';\nimport { QueryObj } from '@console/internal/components/monitoring/query-browser';\nimport { getPrometheusURL, PrometheusEndpoint } from '@console/internal/components/graphs/helpers';\nimport { PROMETHEUS_BASE_PATH } from '@console/internal/components/graphs';\nimport { metricsQuery, getTopMetricsQueries } from '../queries';\nimport './MetricsQueryInput.scss';\n\nconst ADD_NEW_QUERY = '#ADD_NEW_QUERY#';\nconst CUSTOM_QUERY = 'Custom Query';\n\ntype MetricsQueryInputProps = {\n  query?: string;\n};\n\nconst MetricsQueryInput: React.FC<MetricsQueryInputProps> = ({ query }) => {\n  const items = metricsQuery;\n  const autocompleteFilter = (strText, item) => fuzzy(strText, item);\n  const defaultActionItem = [\n    {\n      actionTitle: CUSTOM_QUERY,\n      actionKey: ADD_NEW_QUERY,\n    },\n  ];\n\n  const namespace = useSelector((state: RootState) => getActiveNamespace(state));\n  const queries = useSelector((state: RootState) =>\n    state.UI.getIn(['queryBrowser', 'queries', 0]).toJS(),\n  );\n  const dispatch = useDispatch();\n  const [title, setTitle] = React.useState('Select Query');\n  const [selectedKey, setSelectedKey] = React.useState('');\n  const [metric, setMetric] = React.useState('');\n  const [showPromQl, setShowPromQl] = React.useState(false);\n  const [isPromQlDisabled, setIsPromQlDisabled] = React.useState(false);\n  const safeFetch = React.useCallback(useSafeFetch(), []);\n  React.useEffect(() => {\n    const runQueries = () => dispatch(queryBrowserRunQueries());\n    const patchQuery = (v: QueryObj) => dispatch(queryBrowserPatchQuery(0, v));\n    if (metric) {\n      const queryMetrics = getTopMetricsQueries(namespace)[metric];\n      patchQuery({ text: queryMetrics || '' });\n      runQueries();\n    }\n  }, [dispatch, metric, namespace]);\n\n  React.useEffect(() => {\n    const q = queries?.query;\n    const text = queries?.text;\n    if (text && text.localeCompare(q) !== 0) {\n      setTitle(CUSTOM_QUERY);\n      setIsPromQlDisabled(true);\n      if (query) {\n        removeQueryArgument('query0');\n      }\n    }\n  }, [query, queries]);\n\n  React.useEffect(() => {\n    if (query) {\n      const topMetricsQueries = getTopMetricsQueries(namespace);\n      const selectedQuery = _.findKey(topMetricsQueries, (topQuery) => topQuery === query);\n      const sKey = _.findKey(items, (item) => item === selectedQuery);\n      setMetric(selectedQuery);\n      selectedQuery ? setSelectedKey(sKey) : setTitle(CUSTOM_QUERY);\n    }\n  }, [query, namespace, items]);\n\n  React.useEffect(() => {\n    const setMetrics = (metrics: string[]) => dispatch(queryBrowserSetMetrics(metrics));\n    const url = namespace\n      ? getPrometheusURL({\n          endpoint: PrometheusEndpoint.QUERY,\n          namespace,\n          query: `count({namespace=\"${namespace}\"}) by (__name__)`,\n        })\n      : `${PROMETHEUS_BASE_PATH}/${PrometheusEndpoint.LABEL}/__name__/values`;\n    safeFetch(url)\n      .then((response) => {\n        const metrics = namespace\n          ? _.map(_.get(response, 'data.result'), 'metric.__name__').sort()\n          : _.get(response, 'data');\n        setMetrics(metrics);\n      })\n      .catch(() => {});\n  }, [namespace, safeFetch, dispatch]);\n\n  const onChange = (selectedValue: string) => {\n    setMetric(metricsQuery[selectedValue]);\n    if (selectedValue && selectedValue === ADD_NEW_QUERY) {\n      setTitle(CUSTOM_QUERY);\n      setIsPromQlDisabled(true);\n      setShowPromQl(true);\n    } else {\n      setTitle(metricsQuery[selectedValue]);\n      setIsPromQlDisabled(false);\n    }\n    if (query) {\n      removeQueryArgument('query0');\n    }\n  };\n\n  return (\n    <>\n      <div className=\"row\">\n        <div className=\"col-xs-8 col-md-6\">\n          <Dropdown\n            autocompleteFilter={autocompleteFilter}\n            items={items || {}}\n            selectedKey={selectedKey}\n            actionItems={defaultActionItem}\n            dropDownClassName=\"odc-metrics-query-input dropdown--full-width\"\n            menuClassName=\"odc-metrics-query-input__menu dropdown-menu--text-wrap\"\n            onChange={onChange}\n            title={title}\n          />\n        </div>\n        <div className=\"col-xs-4 col-md-6\">\n          <Button\n            variant=\"link\"\n            type=\"button\"\n            isDisabled={isPromQlDisabled}\n            onClick={() => setShowPromQl(!showPromQl)}\n          >\n            {showPromQl ? 'Hide PromQL' : 'Show PromQL'}\n          </Button>\n        </div>\n      </div>\n      {showPromQl && (\n        <div className=\"row\">\n          <div className=\"col-xs-12\">\n            <QueryInput index={0} namespace={namespace} />\n          </div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default MetricsQueryInput;\n","import * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport MetricsQueryInput from './MetricsQueryInput';\nimport { connect } from 'react-redux';\nimport { getURLSearchParams } from '@console/internal/components/utils';\nimport { queryBrowserRunQueries, queryBrowserPatchQuery } from '@console/internal/actions/ui';\nimport { QueryObj } from '@console/internal/components/monitoring/query-browser';\nimport ConnectedMetricsChart from './MetricsChart';\n\ntype MonitoringMetricsProps = {\n  patchQuery?: (patch: QueryObj) => void;\n  runQueries?: () => never;\n};\n\nexport const MonitoringMetrics: React.FC<MonitoringMetricsProps> = ({ patchQuery, runQueries }) => {\n  const params = getURLSearchParams();\n  const query = params.query0;\n  React.useEffect(() => {\n    if (query) {\n      patchQuery({ text: query });\n      runQueries();\n    }\n  }, [query, patchQuery, runQueries]);\n\n  return (\n    <>\n      <Helmet>\n        <title>Metrics</title>\n      </Helmet>\n      <div className=\"co-m-pane__body\">\n        <MetricsQueryInput query={query} />\n        <div className=\"row\">\n          <div className=\"col-xs-12\">\n            <ConnectedMetricsChart />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  runQueries: () => dispatch(queryBrowserRunQueries()),\n  patchQuery: (v: QueryObj) => dispatch(queryBrowserPatchQuery(0, v)),\n});\n\nexport default connect(null, mapDispatchToProps)(MonitoringMetrics);\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { ListPage } from '@console/internal/components/factory';\nimport { ProjectsTable } from '@console/internal/components/namespace';\nimport { PageHeading } from '@console/internal/components/utils';\nimport './ProjectListPage.scss';\n\nexport interface ProjectListPageProps {\n  title: string;\n  listComponent?: React.ComponentType<any>;\n  children?: React.ReactNode;\n  badge?: React.ReactNode;\n}\nconst ProjectListPage: React.FC<ProjectListPageProps> = ({ badge, title, children, listComponent, ...listPageProps }) => (\n  <div className=\"odc-project-list-page\">\n    <PageHeading title={title} badge={badge}>\n      {children}\n    </PageHeading>\n    <hr className=\"odc-project-list-page__section-border\" />\n    <ListPage {...listPageProps} showTitle={false} kind=\"Project\" ListComponent={listComponent || ProjectsTable} canCreate={false} filterLabel=\"by name or display name\" textFilter=\"project-name\" />\n  </div>\n);\n\nexport default ProjectListPage;\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AAUA;AASA;AACA;AACA;AAEA;AAEA;AACA;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AA4BA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AAEA;;;;;;;;;;;;;AC3FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAKA;AAEA;AACA;AAiBA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AASA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACpEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AAEA;AAEA;AAEA;AACA;AAEA;AAKA;AAKA;;;;;;;;;;;;AC1EA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAMA;AAeA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AAGA;AASA;AAkBA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AC1FA;AAAA;AAAA;AAAA;AAAA;AAEA;AAQA;AACA;AACA;AAEA;;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AAEA;AAEA;AACA;AAMA;;;;;;;;;;;;AClBA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AAWA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAMA;AAGA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;AC/DA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAWA;AACA;AAUA;AAEA;AACA;AAMA;AAEA;;;;;;;;;;;;;AC1JA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;AC9CA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAAA;AAEA;AAGA;AACA;AAEA;AAEA;;;;;A","sourceRoot":""}