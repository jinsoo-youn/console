{"version":3,"file":"19-5fa719773f4cfd7e215b.js","sources":["webpack:///./public/components/hypercloud/crd/create-custom-resource-definition.tsx","webpack:///./public/components/hypercloud/crd/index.tsx"],"sourcesContent":["import * as _ from 'lodash';\nimport * as React from 'react';\nimport { JSONSchema6 } from 'json-schema';\nimport { K8sKind, K8sResourceKind, K8sResourceKindReference, kindForReference, nameForModel, CustomResourceDefinitionKind, definitionFor } from '@console/internal/module/k8s';\nimport { CustomResourceDefinitionModel } from '@console/internal/models';\nimport { Firehose } from '@console/internal/components/utils/firehose';\nimport { StatusBox, FirehoseResult, BreadCrumbs, resourcePathFromModel } from '@console/internal/components/utils';\nimport { RootState } from '@console/internal/redux';\nimport { SyncedEditor } from '@console/shared/src/components/synced-editor';\nimport { getActivePerspective } from '@console/internal/reducers/ui';\nimport { EditorType } from '@console/shared/src/components/synced-editor/editor-toggle';\nimport { connect } from 'react-redux';\nimport { exampleForModel } from './';\nimport { Helmet } from 'react-helmet';\nimport { match as RouterMatch } from 'react-router';\nimport { OperandForm } from '@console/operator-lifecycle-manager/src/components/operand/operand-form';\nimport { OperandYAML } from '@console/operator-lifecycle-manager/src/components/operand/operand-yaml';\nimport { FORM_HELP_TEXT, YAML_HELP_TEXT, DEFAULT_K8S_SCHEMA } from '@console/operator-lifecycle-manager/src/components/operand/const';\n\nimport { prune } from '@console/shared/src/components/dynamic-form/utils';\n// eslint-disable-next-line @typescript-eslint/camelcase\n\nexport const CreateCRD: React.FC<CreateCRDProps> = ({ customResourceDefinition, initialEditorType, loaded, loadError, match, model, activePerspective }) => {\n  const { data: crd } = customResourceDefinition;\n  const [helpText, setHelpText] = React.useState(FORM_HELP_TEXT);\n  const next = `${resourcePathFromModel(CustomResourceDefinitionModel, match.params.appName, match.params.ns)}/${model.plural}.${model.apiGroup}`;\n\n  const [schema, FormComponent] = React.useMemo(() => {\n    const baseSchema = crd?.spec?.validation?.openAPIV3Schema ?? (definitionFor(model) as JSONSchema6);\n    return [_.defaultsDeep({}, DEFAULT_K8S_SCHEMA, _.omit(baseSchema, 'properties.status')), OperandForm];\n  }, [crd, model]);\n\n  const sample = React.useMemo<K8sResourceKind>(() => exampleForModel(crd, model), [crd, model]);\n\n  const pruneFunc = React.useCallback(data => prune(data, sample), [sample]);\n\n  const onChangeEditorType = React.useCallback(newMethod => {\n    setHelpText(newMethod === EditorType.Form ? FORM_HELP_TEXT : YAML_HELP_TEXT);\n  }, []);\n\n  return (\n    <StatusBox loaded={loaded} loadError={loadError} data={customResourceDefinition}>\n      {loaded ? (\n        <>\n          <div className=\"co-create-operand__header\">\n            <div className=\"co-create-operand__header-buttons\">\n              <BreadCrumbs breadcrumbs={[{ name: `Create ${model.label}`, path: window.location.pathname }]} />\n            </div>\n            <h1 className=\"co-create-operand__header-text\">{`Create ${model.label}`}</h1>\n            <p className=\"help-block\">{helpText}</p>\n          </div>\n          <SyncedEditor\n            context={{\n              formContext: { match, model, next, schema },\n              yamlContext: { next, match },\n            }}\n            FormEditor={FormComponent}\n            initialData={sample}\n            initialType={initialEditorType}\n            onChangeEditorType={onChangeEditorType}\n            prune={pruneFunc}\n            YAMLEditor={OperandYAML}\n          />\n        </>\n      ) : null}\n    </StatusBox>\n  );\n};\n\nconst stateToProps = (state: RootState, props: Omit<CreateCRDPageProps, 'model'>) => ({\n  model: state.k8s.getIn(['RESOURCES', 'models', props.match.params.plural]) as K8sKind,\n  activePerspective: getActivePerspective(state),\n});\n\nexport const CreateCRDPage = connect(stateToProps)((props: CreateCRDPageProps) => (\n  <>\n    <Helmet>\n      <title>{`Create ${kindForReference(props.match.params.plural)}`}</title>\n    </Helmet>\n    {props.model && (\n      <Firehose\n        resources={[\n          {\n            kind: CustomResourceDefinitionModel.kind,\n            isList: false,\n            name: nameForModel(props.model),\n            prop: 'customResourceDefinition',\n            optional: true,\n          },\n        ]}\n      >\n        {/* FIXME(alecmerdler): Hack because `Firehose` injects props without TypeScript knowing about it */}\n        <CreateCRD {...(props as any)} model={props.model} match={props.match} initialEditorType={EditorType.Form} />\n      </Firehose>\n    )}\n  </>\n));\n\nexport type CreateCRDProps = {\n  activePerspective: string;\n  customResourceDefinition?: FirehoseResult<CustomResourceDefinitionKind>;\n  initialEditorType: EditorType;\n  loaded: boolean;\n  loadError?: any;\n  match: RouterMatch<{ appName: string; ns: string; plural: K8sResourceKindReference }>;\n  model: K8sKind;\n};\n\nexport type CreateCRDPageProps = {\n  match: RouterMatch<{ appName: string; ns: string; plural: K8sResourceKindReference }>;\n  model: K8sKind;\n};\n","// import * as React from 'react';\nimport * as _ from 'lodash';\nimport { K8sKind, CustomResourceDefinitionKind, referenceFor, referenceForModel } from '@console/internal/module/k8s';\n\nexport const parseALMExamples = (crd: CustomResourceDefinitionKind) => {\n  try {\n    return JSON.parse(crd?.metadata?.annotations?.['alm-examples'] ?? '[]');\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.warn('Unable to parse ALM expamples\\n', e);\n    return [];\n  }\n};\n\nexport const exampleForModel = (crd: CustomResourceDefinitionKind, model: K8sKind) => {\n  const almObj = parseALMExamples(crd);\n  return _.defaultsDeep(\n    {},\n    {\n      kind: model.kind,\n      apiVersion: model?.apiGroup ? `${model.apiGroup}/${model.apiVersion}` : `${model.apiVersion}`,\n    },\n    _.find(almObj, (s: CustomResourceDefinitionKind) => referenceFor(s) === referenceForModel(model)),\n  );\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAYA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;AC5FA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAGA;;;;;A","sourceRoot":""}