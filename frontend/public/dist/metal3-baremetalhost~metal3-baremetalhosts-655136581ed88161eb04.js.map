{"version":3,"file":"metal3-baremetalhost~metal3-baremetalhosts-655136581ed88161eb04.js","sources":["webpack:///./packages/console-shared/src/k8s/index.ts","webpack:///./packages/console-shared/src/k8s/patch.ts","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/BareMetalHostRole.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/BareMetalHostSecondaryStatus.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/BareMetalHostStatus.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/NodeLink.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/host-menu-actions.tsx","webpack:///./packages/metal3-plugin/src/components/modals/PowerOffHostModal.tsx","webpack:///./packages/metal3-plugin/src/components/modals/PowerOffStatusValidations.scss?a09e","webpack:///./packages/metal3-plugin/src/components/modals/PowerOffStatusValidations.tsx","webpack:///./packages/metal3-plugin/src/components/modals/RestartHostModal.tsx","webpack:///./packages/metal3-plugin/src/constants/machine.ts","webpack:///./packages/metal3-plugin/src/k8s/objects/bare-metal-host.ts","webpack:///./packages/metal3-plugin/src/k8s/requests/bare-metal-host.ts","webpack:///./packages/metal3-plugin/src/selectors/machine-set.ts","webpack:///./packages/metal3-plugin/src/selectors/machine.ts"],"sourcesContent":["export * from './patch';\n","import * as _ from 'lodash';\nimport { Patch } from '@console/internal/module/k8s';\nimport { assureEndsWith } from '../utils';\n\nexport const patchSafeValue = (value: string): string =>\n  value.replace('~', '~0').replace('/', '~1');\n\nexport enum PatchOperation {\n  ADD = 'add',\n  REMOVE = 'remove',\n  REPLACE = 'replace',\n}\n\nexport class PatchBuilder {\n  private readonly path: string;\n\n  private value: any;\n\n  private valueIndex: number = -1;\n\n  private valueKey: string = '';\n\n  private operation: PatchOperation;\n\n  private valid = true;\n\n  constructor(path: string) {\n    this.path = path;\n  }\n\n  setValue = (value) => {\n    this.value = value;\n    return this;\n  };\n\n  setOperation = (operation: PatchOperation) => {\n    this.operation = operation;\n    return this;\n  };\n\n  setListIndex = (index: number) => {\n    this.valueIndex = index;\n    return this;\n  };\n\n  add = (value) => {\n    this.value = value;\n    return this.setOperation(PatchOperation.ADD);\n  };\n\n  replace = (value) => {\n    this.value = value;\n    return this.setOperation(PatchOperation.REPLACE);\n  };\n\n  remove = () => this.setOperation(PatchOperation.REMOVE);\n\n  setListRemove = <T>(items: T[], removedItemEquals: (item: T) => boolean) => {\n    this.value = undefined;\n    this.operation = PatchOperation.REMOVE;\n    if (items) {\n      const foundIndex = items.findIndex(removedItemEquals);\n      if (foundIndex < 0) {\n        this.valid = false; // do not do anything\n      } else {\n        this.valueIndex = items.length === 1 ? -1 : foundIndex; // delete the whole list if last value there\n      }\n    } else {\n      this.valueIndex = -1; // remove the empty list\n    }\n    return this;\n  };\n\n  setListUpdate = <T>(\n    item: T,\n    items?: T[],\n    updatedItemEquals: (other: T, updatedItem: T) => boolean = (other, updatedValue) =>\n      other === updatedValue,\n  ) => {\n    if (items) {\n      const foundIndex = items.findIndex((other) => updatedItemEquals(other, item));\n      if (foundIndex < 0) {\n        this.value = item;\n        this.valueIndex = items.length;\n        this.operation = PatchOperation.ADD;\n      } else if (_.isEqual(items[foundIndex], item)) {\n        this.valid = false; // no change\n      } else {\n        this.value = item;\n        this.valueIndex = foundIndex;\n        this.operation = PatchOperation.REPLACE;\n      }\n    } else {\n      // list is missing - add the whole list\n      this.value = [item];\n      this.valueIndex = -1;\n      this.operation = PatchOperation.ADD;\n    }\n    return this;\n  };\n\n  setObjectRemove = (key: string, object: { [k: string]: any }) => {\n    if (_.has(object, [key])) {\n      this.value = undefined;\n      this.valueKey = key;\n      this.operation = PatchOperation.REMOVE;\n    } else {\n      this.valid = false;\n    }\n    return this;\n  };\n\n  setObjectUpdate = (key: string, value: any, object: { [k: string]: any }) => {\n    if (object == null) {\n      this.value = { [key]: value };\n    } else if (object[key] === value) {\n      this.valid = false;\n    } else {\n      this.value = value;\n      this.valueKey = key;\n    }\n    this.operation = _.has(object, [key]) ? PatchOperation.REPLACE : PatchOperation.ADD;\n    return this;\n  };\n\n  isPatchValid = () => this.valid && !!(this.path && this.operation);\n\n  build = (): Patch => {\n    if (!this.isPatchValid()) {\n      return null;\n    }\n\n    let resultPath;\n\n    if (this.valueIndex < 0) {\n      resultPath = this.valueKey\n        ? assureEndsWith(this.path, `/${patchSafeValue(this.valueKey)}`)\n        : this.path;\n    } else {\n      resultPath = `${assureEndsWith(this.path, '/')}${this.valueIndex}`;\n    }\n\n    const result: Patch = {\n      op: this.operation,\n      path: resultPath,\n    };\n\n    if (this.operation !== PatchOperation.REMOVE) {\n      result.value = this.value;\n    }\n\n    return result;\n  };\n\n  buildAddObjectKeysPatches = (\n    newObject: { [k: string]: any },\n    oldObject: { [k: string]: any },\n  ): Patch[] => {\n    if (!newObject) {\n      return [];\n    }\n    let builders;\n    if (!oldObject) {\n      builders = [new PatchBuilder(this.path).add(newObject)];\n    } else {\n      builders = Object.keys(newObject).map((key) =>\n        new PatchBuilder(this.path).setObjectUpdate(key, newObject[key], oldObject),\n      );\n    }\n\n    return _.compact(builders.map((u) => u.build()));\n  };\n}\n","import * as React from 'react';\nimport { DASH, getNodeRoles, getMachineRole } from '@console/shared';\nimport { MachineKind, NodeKind } from '@console/internal/module/k8s';\n\ntype BareMetalHostRoleProps = {\n  machine?: MachineKind;\n  node?: NodeKind;\n};\n\nconst BareMetalHostRole: React.FC<BareMetalHostRoleProps> = ({ machine, node }) => (\n  <>\n    {getNodeRoles(node)\n      .sort()\n      .join(', ') ||\n      getMachineRole(machine) ||\n      DASH}\n  </>\n);\n\nexport default BareMetalHostRole;\n","import * as React from 'react';\nimport { SecondaryStatus } from '@console/shared';\nimport { BareMetalHostKind } from '../../types';\nimport {\n  getHostPowerStatus,\n  getHostProvisioningState,\n  isHostScheduledForRestart,\n} from '../../selectors';\nimport { HOST_POWER_STATUS_POWERED_ON, HOST_REGISTERING_STATES } from '../../constants';\n\ntype BareMetalHostSecondaryStatusProps = {\n  host: BareMetalHostKind;\n};\n\nexport const HOST_SCHEDULED_FOR_RESTART = 'Restart pending';\n\nconst BareMetalHostSecondaryStatus: React.FC<BareMetalHostSecondaryStatusProps> = ({ host }) => {\n  const powerStatus = getHostPowerStatus(host);\n  const provisioningState = getHostProvisioningState(host);\n  const status = [];\n\n  // don't show power status when host registration/inspection hasn't finished\n  if (!HOST_REGISTERING_STATES.includes(provisioningState)) {\n    if (isHostScheduledForRestart(host)) {\n      status.push(HOST_SCHEDULED_FOR_RESTART);\n    }\n\n    // don't show power status when host is powered on\n    if (powerStatus !== HOST_POWER_STATUS_POWERED_ON) {\n      status.push(powerStatus);\n    }\n  }\n\n  return <SecondaryStatus status={status} />;\n};\n\nexport default BareMetalHostSecondaryStatus;\n","import * as React from 'react';\nimport { Button } from 'patternfly-react';\nimport { AddCircleOIcon } from '@patternfly/react-icons';\nimport {\n  ProgressStatus,\n  SuccessStatus,\n  ErrorStatus,\n  Status,\n  StatusIconAndText,\n  getNamespace,\n} from '@console/shared';\nimport { RequireCreatePermission } from '@console/internal/components/utils';\nimport {\n  HOST_STATUS_DISCOVERED,\n  HOST_PROGRESS_STATES,\n  HOST_ERROR_STATES,\n  HOST_SUCCESS_STATES,\n  NODE_STATUS_UNDER_MAINTENANCE,\n  NODE_STATUS_STARTING_MAINTENANCE,\n  NODE_STATUS_STOPPING_MAINTENANCE,\n} from '../../constants';\nimport { BareMetalHostModel } from '../../models';\nimport { getHostErrorMessage } from '../../selectors';\nimport { StatusProps } from '../types';\nimport MaintenancePopover from '../maintenance/MaintenancePopover';\nimport { BareMetalHostKind } from '../../types';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\n\n// TODO(jtomasek): Update this with onClick handler once add discovered host functionality\n// is available\nexport const AddDiscoveredHostButton: React.FC<{ host: BareMetalHostKind }> = (\n  { host }, // eslint-disable-line @typescript-eslint/no-unused-vars\n) => {\n  const namespace = getNamespace(host);\n\n  return (\n    <RequireCreatePermission model={BareMetalHostModel} namespace={namespace}>\n      <Button bsStyle=\"link\">\n        <StatusIconAndText icon={<AddCircleOIcon />} title=\"Add host\" />\n      </Button>\n    </RequireCreatePermission>\n  );\n};\n\nconst BareMetalHostStatus: React.FC<BareMetalHostStatusProps> = ({\n  status,\n  title,\n  description,\n  host,\n  nodeMaintenance,\n}) => {\n  const statusTitle = title || status;\n  switch (true) {\n    case status === HOST_STATUS_DISCOVERED:\n      return <AddDiscoveredHostButton host={host} />;\n    case [NODE_STATUS_STARTING_MAINTENANCE, NODE_STATUS_UNDER_MAINTENANCE].includes(status):\n      return <MaintenancePopover title={statusTitle} nodeMaintenance={nodeMaintenance} />;\n    case [NODE_STATUS_STOPPING_MAINTENANCE, ...HOST_PROGRESS_STATES].includes(status):\n      return <ProgressStatus title={statusTitle}>{description}</ProgressStatus>;\n    case HOST_ERROR_STATES.includes(status):\n      return (\n        <ErrorStatus title={statusTitle}>\n          <p>{description}</p>\n          <p>{getHostErrorMessage(host)}</p>\n        </ErrorStatus>\n      );\n    case HOST_SUCCESS_STATES.includes(status):\n      return <SuccessStatus title={statusTitle}>{description}</SuccessStatus>;\n    default:\n      return <Status status={status} title={statusTitle} />;\n  }\n};\n\ntype BareMetalHostStatusProps = StatusProps & {\n  host?: BareMetalHostKind;\n  nodeMaintenance?: K8sResourceKind;\n};\n\nexport default BareMetalHostStatus;\n","import * as React from 'react';\nimport { DASH } from '@console/shared';\nimport { ResourceLink } from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { NodeModel } from '@console/internal/models';\n\ntype NodeLinkProps = {\n  nodeName?: string;\n};\n\nconst NodeLink: React.FC<NodeLinkProps> = ({ nodeName }) => {\n  if (nodeName) {\n    return <ResourceLink kind={referenceForModel(NodeModel)} name={nodeName} />;\n  }\n  return <>{DASH}</>;\n};\n\nexport default NodeLink;\n","import { asAccessReview, Kebab, KebabOption } from '@console/internal/components/utils';\nimport {\n  K8sKind,\n  k8sPatch,\n  K8sResourceKind,\n  MachineKind,\n  MachineSetKind,\n  NodeKind,\n  referenceForModel,\n} from '@console/internal/module/k8s';\nimport {\n  getMachineNode,\n  getMachineNodeName,\n  getName,\n  getNamespace,\n  getAnnotations,\n} from '@console/shared';\nimport { confirmModal, deleteModal } from '@console/internal/components/modals';\nimport { MachineModel, MachineSetModel } from '@console/internal/models';\nimport {\n  findNodeMaintenance,\n  getHostMachine,\n  getHostPowerStatus,\n  isHostScheduledForRestart,\n} from '../../selectors';\nimport { BareMetalHostModel, NodeMaintenanceModel } from '../../models';\nimport { getHostStatus } from '../../status/host-status';\nimport {\n  HOST_POWER_STATUS_POWERED_OFF,\n  HOST_POWER_STATUS_POWERED_ON,\n  HOST_POWER_STATUS_POWERING_OFF,\n  HOST_POWER_STATUS_POWERING_ON,\n  HOST_STATUS_AVAILABLE,\n  HOST_STATUS_DISCOVERED,\n  HOST_STATUS_READY,\n  HOST_ERROR_STATES,\n  HOST_STATUS_UNKNOWN,\n} from '../../constants';\nimport { startNodeMaintenanceModal } from '../modals/StartNodeMaintenanceModal';\nimport { powerOffHostModal } from '../modals/PowerOffHostModal';\nimport stopNodeMaintenanceModal from '../modals/StopNodeMaintenanceModal';\nimport { BareMetalHostKind } from '../../types';\nimport { DELETE_MACHINE_ANNOTATION } from '../../constants/machine';\nimport { deprovision } from '../../k8s/requests/bare-metal-host';\nimport { getMachineMachineSetOwner } from '../../selectors/machine';\nimport { findMachineSet } from '../../selectors/machine-set';\nimport { restartHostModal } from '../modals/RestartHostModal';\nimport { StatusProps } from '../types';\n\ntype ActionArgs = {\n  machine?: MachineKind;\n  machineSet?: MachineSetKind;\n  nodeName?: string;\n  nodeMaintenance?: K8sResourceKind;\n  hasNodeMaintenanceCapability?: boolean;\n  status: StatusProps;\n};\n\nexport const Edit = (kindObj: K8sKind, host: BareMetalHostKind): KebabOption => ({\n  label: `Edit ${kindObj.label}`,\n  href: `/k8s/ns/${getNamespace(host)}/${referenceForModel(kindObj)}/${getName(host)}/edit`,\n});\n\nexport const SetNodeMaintenance = (\n  kindObj: K8sKind,\n  host: BareMetalHostKind,\n  { hasNodeMaintenanceCapability, nodeMaintenance, nodeName }: ActionArgs,\n): KebabOption => ({\n  hidden: !nodeName || !hasNodeMaintenanceCapability || !!nodeMaintenance,\n  label: 'Start Maintenance',\n  callback: () => startNodeMaintenanceModal({ nodeName }),\n});\n\nexport const RemoveNodeMaintenance = (\n  kindObj: K8sKind,\n  host: BareMetalHostKind,\n  { hasNodeMaintenanceCapability, nodeMaintenance, nodeName }: ActionArgs,\n): KebabOption => ({\n  hidden: !nodeName || !hasNodeMaintenanceCapability || !nodeMaintenance,\n  label: 'Stop Maintenance',\n  callback: () => stopNodeMaintenanceModal(nodeMaintenance),\n  accessReview: nodeMaintenance && asAccessReview(NodeMaintenanceModel, nodeMaintenance, 'delete'),\n});\n\nexport const PowerOn = (kindObj: K8sKind, host: BareMetalHostKind): KebabOption => {\n  const title = 'Power On';\n  return {\n    hidden: [HOST_POWER_STATUS_POWERED_ON, HOST_POWER_STATUS_POWERING_ON].includes(\n      getHostPowerStatus(host),\n    ),\n    label: title,\n    callback: () => {\n      k8sPatch(BareMetalHostModel, host, [{ op: 'replace', path: '/spec/online', value: true }]);\n    },\n    accessReview: host && asAccessReview(BareMetalHostModel, host, 'update'),\n  };\n};\n\nexport const Deprovision = (\n  kindObj: K8sKind,\n  host: BareMetalHostKind,\n  { machine, machineSet }: ActionArgs,\n): KebabOption => {\n  const title = 'Deprovision';\n  return {\n    hidden:\n      [HOST_POWER_STATUS_POWERED_OFF, HOST_POWER_STATUS_POWERING_OFF].includes(\n        getHostPowerStatus(host),\n      ) ||\n      isHostScheduledForRestart(host) ||\n      !machine ||\n      !!getAnnotations(machine, {})[DELETE_MACHINE_ANNOTATION] ||\n      (getMachineMachineSetOwner(machine) && !machineSet),\n    label: title,\n    callback: () =>\n      confirmModal({\n        title: `${title} ${getName(host)}`,\n        message: `Are you sure you want to delete ${getName(machine)} machine${\n          machineSet ? ' and scale down its machine set?' : '?'\n        }`,\n        btnText: title,\n        executeFn: () => deprovision(machine, machineSet),\n      }),\n    accessReview: machineSet\n      ? asAccessReview(MachineSetModel, machineSet, 'update')\n      : asAccessReview(MachineModel, machine, 'delete'),\n  };\n};\n\nexport const PowerOff = (\n  kindObj: K8sKind,\n  host: BareMetalHostKind,\n  { nodeName, status }: ActionArgs,\n) => ({\n  hidden: [HOST_POWER_STATUS_POWERED_OFF, HOST_POWER_STATUS_POWERING_OFF].includes(\n    getHostPowerStatus(host),\n  ),\n  label: 'Power Off',\n  callback: () => powerOffHostModal({ host, nodeName, status }),\n  accessReview: host && asAccessReview(BareMetalHostModel, host, 'update'),\n});\n\nexport const Restart = (kindObj: K8sKind, host: BareMetalHostKind, { nodeName }: ActionArgs) => ({\n  hidden:\n    [HOST_POWER_STATUS_POWERED_OFF, HOST_POWER_STATUS_POWERING_OFF].includes(\n      getHostPowerStatus(host),\n    ) || isHostScheduledForRestart(host),\n  label: 'Restart',\n  callback: () => restartHostModal({ host, nodeName }),\n  accessReview: host && asAccessReview(BareMetalHostModel, host, 'update'),\n});\n\nexport const Delete = (\n  kindObj: K8sKind,\n  host: BareMetalHostKind,\n  { status }: ActionArgs,\n): KebabOption => {\n  const title = 'Delete Bare Metal Host';\n  return {\n    hidden: ![\n      HOST_STATUS_UNKNOWN,\n      HOST_STATUS_READY,\n      HOST_STATUS_AVAILABLE,\n      HOST_STATUS_DISCOVERED,\n      ...HOST_ERROR_STATES,\n    ].includes(status.status),\n    label: title,\n    callback: () =>\n      deleteModal({\n        kind: kindObj,\n        resource: host,\n      }),\n    accessReview: asAccessReview(BareMetalHostModel, host, 'delete'),\n  };\n};\n\nexport const menuActions = [\n  SetNodeMaintenance,\n  RemoveNodeMaintenance,\n  PowerOn,\n  Deprovision,\n  PowerOff,\n  Restart,\n  Kebab.factory.ModifyLabels,\n  Kebab.factory.ModifyAnnotations,\n  Edit,\n  Delete,\n];\n\ntype ExtraResources = {\n  machines: MachineKind[];\n  machineSets: MachineSetKind[];\n  nodes: NodeKind[];\n  nodeMaintenances: K8sResourceKind[];\n};\n\nexport const menuActionsCreator = (\n  kindObj: K8sKind,\n  host: BareMetalHostKind,\n  { machines, machineSets, nodes, nodeMaintenances }: ExtraResources,\n  { hasNodeMaintenanceCapability },\n) => {\n  const machine = getHostMachine(host, machines);\n  const node = getMachineNode(machine, nodes);\n  const nodeName = getMachineNodeName(machine);\n  const nodeMaintenance = findNodeMaintenance(nodeMaintenances, nodeName);\n  const status = getHostStatus({ host, machine, node, nodeMaintenance });\n\n  const machineOwner = getMachineMachineSetOwner(machine);\n  const machineSet = findMachineSet(machineSets, machineOwner && machineOwner.uid);\n\n  return menuActions.map((action) => {\n    return action(kindObj, host, {\n      hasNodeMaintenanceCapability,\n      nodeMaintenance,\n      nodeName,\n      machine,\n      machineSet,\n      status,\n    });\n  });\n};\n","import * as React from 'react';\nimport { FormGroup, Checkbox, HelpBlock } from 'patternfly-react';\nimport { Alert, Button } from '@patternfly/react-core';\nimport {\n  withHandlePromise,\n  Firehose,\n  FirehoseResult,\n  HandlePromiseProps,\n} from '@console/internal/components/utils';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory';\nimport { PodModel } from '@console/internal/models';\nimport { useFlag } from '@console/shared/src/hooks/flag';\nimport { PodKind } from '@console/internal/module/k8s';\nimport { powerOffHost } from '../../k8s/requests/bare-metal-host';\nimport {\n  NODE_STATUS_UNDER_MAINTENANCE,\n  HOST_STATUS_READY,\n  HOST_STATUS_AVAILABLE,\n} from '../../constants';\nimport { BareMetalHostKind } from '../../types';\nimport { startNodeMaintenanceModal } from './StartNodeMaintenanceModal';\nimport { StatusProps } from '../types';\nimport { StatusValidations, getStaticPods } from './PowerOffStatusValidations';\nimport { NODE_MAINTENANCE_FLAG } from '../../features';\n\ntype SafePowerOffDialogProps = { isUnderMaintenance: boolean };\n\nconst SafePowerOffDialog: React.FC<SafePowerOffDialogProps> = ({ isUnderMaintenance }) => (\n  <p>\n    Host is ready to be gracefully powered off.{' '}\n    {isUnderMaintenance && (\n      <>The host is currently under maintenance and all workloads have already been moved.</>\n    )}\n  </p>\n);\n\ntype ForcePowerOffDialogProps = {\n  canStartMaintenance: boolean;\n  forceOff: boolean;\n  nodeName: string;\n  setForceOff: React.Dispatch<React.SetStateAction<boolean>>;\n  status: StatusProps;\n  nodePods?: FirehoseResult<PodKind[]>;\n  loadError?: any;\n  cancel?: () => void;\n};\n\nconst ForcePowerOffDialog: React.FC<ForcePowerOffDialogProps> = ({\n  canStartMaintenance,\n  forceOff,\n  nodeName,\n  setForceOff,\n  status,\n  nodePods,\n  loadError,\n  cancel,\n}) => {\n  const mainText = nodeName ? (\n    <p>\n      To power off gracefully,{' '}\n      <Button\n        variant=\"link\"\n        onClick={() => startNodeMaintenanceModal({ nodeName })}\n        isDisabled={!canStartMaintenance}\n        isInline\n      >\n        start maintenance\n      </Button>{' '}\n      on this host to move all managed workloads to other nodes in the cluster.\n    </p>\n  ) : (\n    <p>The host will be powered off gracefully.</p>\n  );\n\n  const helpText = nodeName\n    ? 'Workloads will not be moved before the host powers off.'\n    : 'The host will power off immediately as if it were unplugged.';\n\n  return (\n    <>\n      {mainText}\n      <StatusValidations\n        status={status.status}\n        nodePods={nodePods}\n        loadError={loadError}\n        onLinkClicked={cancel}\n      />\n      <div className=\"form-group\">\n        <FormGroup controlId=\"host-force-off\">\n          <Checkbox onChange={() => setForceOff(!forceOff)} checked={forceOff} inline>\n            Power off immediately\n          </Checkbox>\n          <HelpBlock id=\"host-force-off-help\">{helpText}</HelpBlock>\n        </FormGroup>\n        {forceOff && (\n          <Alert variant=\"warning\" title=\"Applications may be temporarily disrupted.\" isInline>\n            Workloads currently running on this host will not be moved before powering off. This may\n            cause service disruptions.\n          </Alert>\n        )}\n      </div>\n    </>\n  );\n};\n\nconst isPowerOffSafe = (status: string, nodePods?: PodKind[]) => {\n  const safeStates = [NODE_STATUS_UNDER_MAINTENANCE, HOST_STATUS_READY, HOST_STATUS_AVAILABLE];\n  return safeStates.includes(status) && !getStaticPods(nodePods).length;\n};\n\nexport type PowerOffHostModalProps = {\n  host: BareMetalHostKind;\n  nodeName: string;\n  status: StatusProps;\n  cancel?: () => void;\n  close?: () => void;\n  nodePods?: FirehoseResult<PodKind[]>;\n  loadError?: any;\n  loaded?: boolean;\n};\n\nconst PowerOffHostModal = withHandlePromise(\n  ({\n    host,\n    nodeName,\n    status,\n    inProgress,\n    errorMessage,\n    handlePromise,\n    close = undefined,\n    cancel = undefined,\n    nodePods,\n    loadError,\n  }: PowerOffHostModalProps & HandlePromiseProps) => {\n    const hasNodeMaintenanceCapability = useFlag(NODE_MAINTENANCE_FLAG);\n    const [canPowerOffSafely, setCanPowerOffSafely] = React.useState(false);\n    const [forceOff, setForceOff] = React.useState(false);\n\n    React.useEffect(() => {\n      isPowerOffSafe(status.status, nodePods?.data) && setCanPowerOffSafely(true);\n    }, [status, nodePods]);\n\n    React.useEffect(() => {\n      !canPowerOffSafely && setForceOff(false);\n    }, [canPowerOffSafely]);\n\n    const submit = (event) => {\n      event.preventDefault();\n      const promise = powerOffHost(host);\n      return handlePromise(promise).then(close);\n    };\n\n    const isUnderMaintenance = status.status === NODE_STATUS_UNDER_MAINTENANCE;\n    return (\n      <form onSubmit={submit} name=\"form\" className=\"modal-content\">\n        <ModalTitle>Power Off Host</ModalTitle>\n        <ModalBody>\n          {canPowerOffSafely ? (\n            <SafePowerOffDialog isUnderMaintenance={isUnderMaintenance} />\n          ) : (\n            <ForcePowerOffDialog\n              forceOff={forceOff}\n              setForceOff={setForceOff}\n              canStartMaintenance={!isUnderMaintenance && nodeName && hasNodeMaintenanceCapability}\n              nodeName={nodeName}\n              status={status}\n              nodePods={nodePods}\n              loadError={loadError}\n              cancel={cancel}\n            />\n          )}\n        </ModalBody>\n        <ModalSubmitFooter\n          cancel={cancel}\n          errorMessage={errorMessage}\n          inProgress={inProgress}\n          submitDisabled={!canPowerOffSafely && !forceOff}\n          submitText=\"Power Off\"\n        />\n      </form>\n    );\n  },\n);\n\nconst PowerOffHostModalFirehose = (props: PowerOffHostModalProps) => {\n  const { nodeName } = props;\n\n  const resources = [];\n  resources.push({\n    kind: PodModel.kind,\n    namespaced: false,\n    isList: true,\n    prop: 'nodePods',\n    fieldSelector: `spec.nodeName=${nodeName}`,\n  });\n\n  return (\n    <Firehose resources={resources}>\n      <PowerOffHostModal {...props} />\n    </Firehose>\n  );\n};\n\nexport const powerOffHostModal = createModalLauncher(PowerOffHostModalFirehose);\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Alert, Expandable } from '@patternfly/react-core';\nimport { DaemonSetModel, PodModel } from '@console/internal/models';\nimport { FirehoseResult, ResourceLink } from '@console/internal/components/utils';\nimport { PodKind } from '@console/internal/module/k8s';\nimport { getName, getNamespace } from '@console/shared';\nimport {\n  NODE_STATUS_STARTING_MAINTENANCE,\n  HOST_STATUS_UNKNOWN,\n  HOST_HEALTH_ERROR,\n  NODE_STATUS_STOPPING_MAINTENANCE,\n} from '../../constants';\n\nimport './PowerOffStatusValidations.scss';\n\ntype StatusValidationProps = {\n  status: string;\n  nodePods: FirehoseResult<PodKind[]>;\n  loadError?: any;\n  onLinkClicked?: () => void;\n};\n\ntype ExpandableResourcesProps = {\n  resources: {\n    name: string;\n    namespace: string;\n    kind: string;\n  }[];\n  onLinkClicked?: () => void;\n  subject: string;\n};\n\nexport const getStaticPods = (pods?: PodKind[]) =>\n  (\n    pods?.filter((pod) => {\n      const annotations = pod.metadata?.annotations || {};\n      return !!annotations['kubernetes.io/config.mirror'];\n    }) || []\n  ).map((pod) => ({\n    name: getName(pod),\n    namespace: getNamespace(pod),\n    kind: PodModel.kind,\n  }));\n\nexport const getDaemonSetsOfPods = (pods?: PodKind[]) => {\n  if (!pods) {\n    return [];\n  }\n\n  const namespaces: { [key: string]: string[] } = {};\n  pods.forEach((pod) => {\n    const ownerReferences =\n      pod.metadata?.ownerReferences?.filter((or) => or.kind === DaemonSetModel.kind) || [];\n    ownerReferences.forEach((or) => {\n      namespaces[getNamespace(pod)] = namespaces[getNamespace(pod)] || [];\n      namespaces[getNamespace(pod)].push(or.name);\n    });\n  });\n\n  const result = _.flatten(\n    Object.getOwnPropertyNames(namespaces).map((ns) =>\n      namespaces[ns].map((name) => ({\n        name,\n        namespace: ns,\n        kind: DaemonSetModel.kind,\n      })),\n    ),\n  );\n  return result;\n};\n\nconst ExpandableResources: React.FC<ExpandableResourcesProps> = ({\n  resources,\n  onLinkClicked,\n  subject,\n}) => {\n  const [isExpanded, setExpanded] = React.useState(false);\n  const onToggle = React.useCallback(() => setExpanded(!isExpanded), [isExpanded, setExpanded]);\n  const onLinkClick = React.useCallback(\n    (event) => {\n      onLinkClicked && (!event.key || event.key === 'Enter') && onLinkClicked();\n    },\n    [onLinkClicked],\n  );\n\n  if (!resources || resources.length === 0) {\n    return null;\n  }\n\n  const toggleText = `${isExpanded ? 'Hide' : 'Show'} ${subject} (${resources.length})`;\n\n  return (\n    <Expandable onToggle={onToggle} isExpanded={isExpanded} toggleText={toggleText}>\n      {resources\n        .sort((a, b) => a.name.localeCompare(b.name))\n        .map((resource) => (\n          <div\n            onClick={onLinkClick}\n            onKeyPress={onLinkClick}\n            key={`${resource.name}-${resource.namespace}`}\n            role=\"link\"\n            tabIndex={0}\n          >\n            <ResourceLink\n              kind={resource.kind}\n              name={resource.name}\n              namespace={resource.namespace}\n            />\n          </div>\n        ))}\n    </Expandable>\n  );\n};\n\nexport const StatusValidations: React.FC<StatusValidationProps> = ({\n  status,\n  nodePods,\n  loadError,\n  onLinkClicked,\n}) => {\n  const validations = [];\n  const daemonSets = React.useMemo(() => getDaemonSetsOfPods(nodePods?.data), [nodePods]);\n  const staticPods = React.useMemo(() => getStaticPods(nodePods?.data), [nodePods]);\n\n  if (loadError) {\n    validations.push({\n      title: 'Failed to load data.',\n      description: 'Failed to load subresources.',\n      level: 'danger',\n    });\n  }\n\n  if ([HOST_STATUS_UNKNOWN, ...HOST_HEALTH_ERROR].includes(status)) {\n    validations.push({\n      title: 'The bare metal host is not healthy.',\n      description: 'The host cannot be powered off gracefully untils its health is restored.',\n      level: 'warning',\n    });\n  }\n\n  if (status === NODE_STATUS_STARTING_MAINTENANCE) {\n    validations.push({\n      title: 'The node is starting maintenance.',\n      description:\n        'The node cannot be powered off gracefully until it finishes entering maintenance.',\n      level: 'info',\n    });\n  }\n\n  if (status === NODE_STATUS_STOPPING_MAINTENANCE) {\n    validations.push({\n      title: 'The node is stopping maintenance.',\n      description: 'The node cannot be powered off gracefully while it is exiting maintenance.',\n      level: 'info',\n    });\n  }\n\n  if (daemonSets.length > 0) {\n    validations.push({\n      title: 'This node contains DaemonSet pods.',\n      description:\n        'These DaemonSets will prevent some pods from being moved. This should not prevent the host from powering off gracefully.',\n      level: 'info',\n      detail: (\n        <ExpandableResources\n          subject=\"daemon sets\"\n          resources={daemonSets}\n          onLinkClicked={onLinkClicked}\n        />\n      ),\n    });\n  }\n\n  if (staticPods.length > 0) {\n    validations.push({\n      title: 'This host contains unmanaged static pods.',\n      description:\n        'These pods must be moved manually to continue running after the host powers off.',\n      level: 'warning',\n      detail: (\n        <ExpandableResources\n          subject=\"unmanaged pods\"\n          resources={staticPods}\n          onLinkClicked={onLinkClicked}\n        />\n      ),\n    });\n  }\n\n  return (\n    <div className=\"metal3-poweroff-validations\">\n      {validations.map((validation) => (\n        <Alert variant={validation.level} isInline title={validation.title} key={validation.title}>\n          {validation.description}\n          {validation.detail}\n        </Alert>\n      ))}\n    </div>\n  );\n};\n","import * as React from 'react';\nimport { getName } from '@console/shared';\nimport { withHandlePromise } from '@console/internal/components/utils';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory';\nimport { BareMetalHostKind } from '../../types';\nimport { restartHost } from '../../k8s/requests/bare-metal-host';\n\nexport type RestartHostModalProps = {\n  host: BareMetalHostKind;\n  nodeName: string;\n  handlePromise: <T>(promise: Promise<T>) => Promise<T>;\n  inProgress: boolean;\n  errorMessage: string;\n  cancel?: () => void;\n  close?: () => void;\n};\n\nconst RestartHostModal = ({\n  host,\n  nodeName,\n  inProgress,\n  errorMessage,\n  handlePromise,\n  close = undefined,\n  cancel = undefined,\n}: RestartHostModalProps) => {\n  const onSubmit = React.useCallback(\n    async (event) => {\n      event.preventDefault();\n      const promise = restartHost(host);\n      await handlePromise(promise);\n      return close();\n    },\n    [host, close, handlePromise],\n  );\n\n  const text = nodeName\n    ? `The bare metal host ${getName(\n        host,\n      )} will be restarted gracefully after all managed workloads are moved.`\n    : `The bare metal host ${getName(host)} will be restarted gracefully.`;\n\n  return (\n    <form onSubmit={onSubmit} name=\"form\" className=\"modal-content\">\n      <ModalTitle>Restart Bare Metal Host</ModalTitle>\n      <ModalBody>{text}</ModalBody>\n      <ModalSubmitFooter\n        cancel={cancel}\n        errorMessage={errorMessage}\n        inProgress={inProgress}\n        submitDisabled={false}\n        submitText=\"Restart\"\n      />\n    </form>\n  );\n};\n\nexport const restartHostModal = createModalLauncher(withHandlePromise(RestartHostModal));\n","export const DELETE_MACHINE_ANNOTATION = 'machine.openshift.io/cluster-api-delete-machine';\n","import { SecretModel } from '@console/internal/models';\nimport { BareMetalHostModel } from '../../models';\nimport { BareMetalHostKind } from '../../types';\n\nexport const getSecretName = (name: string): string => `${name}-bmc-secret`;\n\nexport const buildBareMetalHostSecret = (name, namespace, username, password) => ({\n  apiVersion: SecretModel.apiVersion,\n  kind: SecretModel.kind,\n  metadata: {\n    namespace,\n    name: getSecretName(name),\n  },\n  data: {\n    username: btoa(username),\n    password: btoa(password),\n  },\n  type: 'Opaque',\n});\n\nexport const buildBareMetalHostObject = (\n  name,\n  namespace,\n  BMCAddress,\n  bootMACAddress,\n  disableCertificateVerification = false,\n  online = true,\n  description = '',\n): BareMetalHostKind => ({\n  apiVersion: `${BareMetalHostModel.apiGroup}/${BareMetalHostModel.apiVersion}`,\n  kind: BareMetalHostModel.kind,\n  metadata: {\n    name,\n    namespace,\n  },\n  spec: {\n    bmc: {\n      address: BMCAddress,\n      credentialsName: getSecretName(name),\n      disableCertificateVerification,\n    },\n    bootMACAddress,\n    description,\n    online,\n  },\n});\n","import {\n  k8sPatch,\n  k8sCreate,\n  K8sResourceKind,\n  MachineKind,\n  MachineSetKind,\n  k8sKill,\n} from '@console/internal/module/k8s';\nimport { MachineModel, MachineSetModel, SecretModel } from '@console/internal/models';\nimport { PatchBuilder } from '@console/shared/src/k8s';\nimport { getAnnotations } from '@console/shared/src';\nimport { BareMetalHostModel } from '../../models';\nimport { BareMetalHostKind } from '../../types';\nimport { DELETE_MACHINE_ANNOTATION } from '../../constants/machine';\nimport { getReplicas } from '../../selectors/machine-set';\nimport {\n  buildBareMetalHostObject,\n  buildBareMetalHostSecret,\n  getSecretName,\n} from '../objects/bare-metal-host';\n\nexport const powerOffHost = (host: BareMetalHostKind) =>\n  k8sPatch(BareMetalHostModel, host, [{ op: 'replace', path: '/spec/online', value: false }]);\n\nexport const powerOnHost = (host: BareMetalHostKind) =>\n  k8sPatch(BareMetalHostModel, host, [{ op: 'replace', path: '/spec/online', value: true }]);\n\nexport const restartHost = (host: BareMetalHostKind) =>\n  k8sPatch(BareMetalHostModel, host, [\n    {\n      op: 'replace',\n      path: '/metadata/annotations',\n      value: {\n        ...host.metadata.annotations,\n        'reboot.metal3.io': 'UI', // value is irrelevant\n      },\n    },\n  ]);\n\nexport const deprovision = async (machine: MachineKind, machineSet?: MachineSetKind) => {\n  await k8sPatch(MachineModel, machine, [\n    new PatchBuilder('/metadata/annotations')\n      .setObjectUpdate(DELETE_MACHINE_ANNOTATION, 'true', getAnnotations(machine))\n      .build(),\n  ]);\n\n  if (machineSet) {\n    const replicas = getReplicas(machineSet);\n\n    if (replicas > 0) {\n      try {\n        await k8sPatch(MachineSetModel, machineSet, [\n          new PatchBuilder('/spec/replicas').replace(replicas - 1).build(),\n        ]);\n      } catch (ignored) {\n        await k8sPatch(MachineModel, machine, [\n          new PatchBuilder('/metadata/annotations')\n            .setObjectUpdate(DELETE_MACHINE_ANNOTATION, 'false', getAnnotations(machine))\n            .build(),\n        ]);\n      }\n    }\n  } else {\n    await k8sKill(MachineModel, machine);\n  }\n};\n\nexport type BareMetalHostOpts = {\n  name: string;\n  BMCAddress: string;\n  disableCertificateVerification: boolean;\n  username: string;\n  password: string;\n  bootMACAddress: string;\n  description: string;\n  namespace: string;\n};\n\nexport const createBareMetalHost = async ({\n  name,\n  BMCAddress,\n  bootMACAddress,\n  disableCertificateVerification,\n  description,\n  namespace,\n  password,\n  username,\n  online,\n}: BareMetalHostOpts & { online: boolean }) => {\n  const secret = buildBareMetalHostSecret(name, namespace, username, password);\n  const bareMetalHost = buildBareMetalHostObject(\n    name,\n    namespace,\n    BMCAddress,\n    bootMACAddress,\n    disableCertificateVerification,\n    online,\n    description,\n  );\n  await k8sCreate(SecretModel, secret);\n  await k8sCreate(BareMetalHostModel, bareMetalHost);\n};\n\nexport const updateBareMetalHost = async (\n  host: BareMetalHostKind,\n  secret: K8sResourceKind,\n  {\n    name,\n    BMCAddress,\n    bootMACAddress,\n    disableCertificateVerification,\n    description,\n    namespace,\n    password,\n    username,\n  }: BareMetalHostOpts,\n) => {\n  if (secret) {\n    const patches = new PatchBuilder('/data').buildAddObjectKeysPatches(\n      { username: btoa(username), password: btoa(password) },\n      secret.data,\n    );\n\n    if (patches.length > 0) {\n      await k8sPatch(SecretModel, secret, patches);\n    }\n  } else {\n    await k8sCreate(SecretModel, buildBareMetalHostSecret(name, namespace, username, password));\n  }\n  const patches = [\n    ...new PatchBuilder('/spec').buildAddObjectKeysPatches(\n      { description, bootMACAddress },\n      host.spec,\n    ),\n    ...new PatchBuilder('/spec/bmc').buildAddObjectKeysPatches(\n      { address: BMCAddress, credentialsName: getSecretName(name), disableCertificateVerification },\n      host.spec.bmc,\n    ),\n  ];\n\n  if (patches.length > 0) {\n    await k8sPatch(BareMetalHostModel, host, patches);\n  }\n};\n","import * as _ from 'lodash';\nimport { MachineSetKind } from '@console/internal/module/k8s';\nimport { getUID } from '@console/shared/src';\n\nexport const findMachineSet = (machineSets: MachineSetKind[], uid: string) =>\n  uid && machineSets ? machineSets.find((machineSet) => getUID(machineSet) === uid) : null;\n\nexport const getReplicas = (machineSet: MachineSetKind, defaultValue: number = 0) =>\n  _.has(machineSet, 'spec') ? machineSet.spec.replicas : defaultValue;\n","import { apiVersionForModel, MachineKind } from '@console/internal/module/k8s';\nimport { MachineSetModel } from '@console/internal/models';\nimport { getOwnerReferences } from '@console/shared/src';\nimport { compareOwnerReference } from '@console/shared/src/utils/owner-references';\n\nexport const getMachineMachineSetOwner = (machine: MachineKind) => {\n  const desiredReference = {\n    apiVersion: apiVersionForModel(MachineSetModel),\n    kind: MachineSetModel.kind,\n  } as any;\n  return (getOwnerReferences(machine) || []).find((reference) =>\n    compareOwnerReference(desiredReference, reference, true),\n  );\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAGA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAahJA;AACA;AAgJA;;;;;;;;;;;;;AC5KA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AAGA;AACA;AACA;AACA;AAIA;;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAKA;AAMA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;ACpCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAQA;AACA;AASA;AACA;AAEA;AAIA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AAIA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAOA;;;;;;;;;;;;;AC9EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AAOA;AACA;AACA;AAMA;AACA;AACA;AAWA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7NA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAMA;AAMA;AACA;AAEA;AACA;AAMA;AAEA;AACA;AAIA;;AAEA;AACA;AAiBA;AAUA;;AAEA;AACA;AAOA;AAEA;AAKA;AACA;AACA;AAEA;AAEA;AACA;AAMA;AACA;AACA;AAGA;AAEA;AASA;AAEA;AACA;AACA;AACA;AAaA;AAaA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAgBA;AASA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AAEA;;;;;;;;;;;;AChNA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AAmBA;;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AAQA;AASA;AAEA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;AAEA;AAIA;AACA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxMA;AACA;AACA;AACA;AAOA;AAYA;AASA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AASA;AAEA;;;;;;;;;;;;;AC9DA;AAAA;AAAA;;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7CA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AAGA;AAGA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAaA;AAWA;AACA;AASA;AACA;AACA;AAEA;AAcA;AACA;AAKA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAIA;AAIA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;AC/IA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAGA;;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;A","sourceRoot":""}