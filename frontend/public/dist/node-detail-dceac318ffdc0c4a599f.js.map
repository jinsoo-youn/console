{"version":3,"file":"node-detail-dceac318ffdc0c4a599f.js","sources":["webpack:///./packages/console-app/src/components/nodes/NodeDetails.tsx","webpack:///./packages/console-app/src/components/nodes/NodeDetailsOverview.tsx","webpack:///./packages/console-app/src/components/nodes/NodeDetailsPage.tsx","webpack:///./packages/console-app/src/components/nodes/NodeTerminal.tsx"],"sourcesContent":["import * as React from 'react';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport NodeDetailsOverview from './NodeDetailsOverview';\nimport NodeDetailsConditions from './NodeDetailsConditions';\nimport NodeDetailsImages from './NodeDetailsImages';\n\ntype NodeDetailsProps = {\n  obj: NodeKind;\n};\n\nconst NodeDetails: React.FC<NodeDetailsProps> = ({ obj: node }) => (\n  <>\n    <NodeDetailsOverview node={node} />\n    <NodeDetailsConditions node={node} />\n    <NodeDetailsImages node={node} />\n  </>\n);\n\nexport default NodeDetails;\n","import * as _ from 'lodash';\nimport * as React from 'react';\nimport { NodeKind, referenceForModel } from '@console/internal/module/k8s';\nimport {\n  useAccessReview,\n  SectionHeading,\n  LabelList,\n  Kebab,\n  ResourceLink,\n  cloudProviderNames,\n  cloudProviderID,\n  Timestamp,\n} from '@console/internal/components/utils';\nimport { NodeModel, MachineModel } from '@console/internal/models';\nimport { Button, pluralize } from '@patternfly/react-core';\nimport { PencilAltIcon } from '@patternfly/react-icons';\nimport { getNodeMachineNameAndNamespace, getNodeAddresses } from '@console/shared';\nimport NodeIPList from './NodeIPList';\nimport NodeStatus from './NodeStatus';\n\ntype NodeDetailsOverviewProps = {\n  node: NodeKind;\n};\n\nconst NodeDetailsOverview: React.FC<NodeDetailsOverviewProps> = ({ node }) => {\n  const machine = getNodeMachineNameAndNamespace(node);\n  const canUpdate = useAccessReview({\n    group: NodeModel.apiGroup,\n    resource: NodeModel.plural,\n    verb: 'patch',\n    name: node.metadata.name,\n    namespace: node.metadata.namespace,\n  });\n  return (\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text=\"Node Details\" />\n      <div className=\"row\">\n        <div className=\"col-md-6 col-xs-12\">\n          <dl className=\"co-m-pane__details\">\n            <dt>Node Name</dt>\n            <dd>{node.metadata.name || '-'}</dd>\n            <dt>Status</dt>\n            <dd>\n              <NodeStatus node={node} />\n            </dd>\n            <dt>External ID</dt>\n            <dd>{_.get(node, 'spec.externalID', '-')}</dd>\n            <dt>Node Addresses</dt>\n            <dd>\n              <NodeIPList ips={getNodeAddresses(node)} expand />\n            </dd>\n            <dt>Node Labels</dt>\n            <dd>\n              <LabelList kind=\"Node\" labels={node.metadata.labels} />\n            </dd>\n            <dt>Taints</dt>\n            <dd>\n              {canUpdate ? (\n                <Button\n                  variant=\"link\"\n                  type=\"button\"\n                  isInline\n                  onClick={Kebab.factory.ModifyTaints(NodeModel, node).callback}\n                >\n                  {pluralize(_.size(node.spec.taints), 'Taint')}\n                  <PencilAltIcon className=\"co-icon-space-l pf-c-button-icon--plain\" />\n                </Button>\n              ) : (\n                pluralize(_.size(node.spec.taints), 'Taint')\n              )}\n            </dd>\n            <dt>Annotations</dt>\n            <dd>\n              {canUpdate ? (\n                <Button\n                  variant=\"link\"\n                  type=\"button\"\n                  isInline\n                  onClick={Kebab.factory.ModifyAnnotations(NodeModel, node).callback}\n                >\n                  {pluralize(_.size(node.metadata.annotations), 'Annotation')}\n                  <PencilAltIcon className=\"co-icon-space-l pf-c-button-icon--plain\" />\n                </Button>\n              ) : (\n                pluralize(_.size(node.metadata.annotations), 'Annotation')\n              )}\n            </dd>\n            {machine.name && (\n              <>\n                <dt>Machine</dt>\n                <dd>\n                  <ResourceLink\n                    kind={referenceForModel(MachineModel)}\n                    name={machine.name}\n                    namespace={machine.namespace}\n                  />\n                </dd>\n              </>\n            )}\n            <dt>Provider ID</dt>\n            <dd>{cloudProviderNames([cloudProviderID(node)])}</dd>\n            {_.has(node, 'spec.unschedulable') && <dt>Unschedulable</dt>}\n            {_.has(node, 'spec.unschedulable') && (\n              <dd className=\"text-capitalize\">\n                {_.get(node, 'spec.unschedulable', '-').toString()}\n              </dd>\n            )}\n            <dt>Created</dt>\n            <dd>\n              <Timestamp timestamp={node.metadata.creationTimestamp} />\n            </dd>\n          </dl>\n        </div>\n        <div className=\"col-md-6 col-xs-12\">\n          <dl className=\"co-m-pane__details\">\n            <dt>Operating System</dt>\n            <dd className=\"text-capitalize\">\n              {_.get(node, 'status.nodeInfo.operatingSystem', '-')}\n            </dd>\n            <dt>OS Image</dt>\n            <dd>{_.get(node, 'status.nodeInfo.osImage', '-')}</dd>\n            <dt>Architecture</dt>\n            <dd className=\"text-uppercase\">{_.get(node, 'status.nodeInfo.architecture', '-')}</dd>\n            <dt>Kernel Version</dt>\n            <dd>{_.get(node, 'status.nodeInfo.kernelVersion', '-')}</dd>\n            <dt>Boot ID</dt>\n            <dd>{_.get(node, 'status.nodeInfo.bootID', '-')}</dd>\n            <dt>Container Runtime</dt>\n            <dd>{_.get(node, 'status.nodeInfo.containerRuntimeVersion', '-')}</dd>\n            <dt>Kubelet Version</dt>\n            <dd>{_.get(node, 'status.nodeInfo.kubeletVersion', '-')}</dd>\n            <dt>Kube-Proxy Version</dt>\n            <dd>{_.get(node, 'status.nodeInfo.kubeProxyVersion', '-')}</dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default NodeDetailsOverview;\n","import * as React from 'react';\nimport { navFactory } from '@console/internal/components/utils';\nimport { PodsPage } from '@console/internal/components/pod';\nimport { ResourceEventStream } from '@console/internal/components/events';\nimport { DetailsPage } from '@console/internal/components/factory';\nimport { nodeStatus } from '../../status/node';\nimport NodeDetails from './NodeDetails';\nimport NodeTerminal from './NodeTerminal';\nimport { menuActions } from './menu-actions';\nimport NodeDashboard from './node-dashboard/NodeDashboard';\n\nconst { editYaml, events, pods } = navFactory;\n\nconst pages = [\n  {\n    href: '',\n    name: 'Overview',\n    component: NodeDashboard,\n  },\n  {\n    href: 'details',\n    name: 'Details',\n    component: NodeDetails,\n  },\n  editYaml(),\n  pods(({ obj }) => (\n    <PodsPage showTitle={false} fieldSelector={`spec.nodeName=${obj.metadata.name}`} />\n  )),\n  events(ResourceEventStream),\n  {\n    href: 'terminal',\n    name: 'Terminal',\n    component: NodeTerminal,\n  },\n];\nconst NodeDetailsPage: React.FC<React.ComponentProps<typeof DetailsPage>> = (props) => (\n  <DetailsPage {...props} getResourceStatus={nodeStatus} menuActions={menuActions} pages={pages} />\n);\n\nexport default NodeDetailsPage;\n","import * as React from 'react';\nimport { Alert } from '@patternfly/react-core';\nimport {\n  Firehose,\n  FirehoseResource,\n  FirehoseResult,\n  LoadingBox,\n} from '@console/internal/components/utils';\nimport { NodeKind, PodKind } from '@console/internal/module/k8s';\nimport { getRandomChars } from '@console/shared/src/utils';\nimport { PodExecLoader } from '../../../../../public/components/pod';\nimport { ImageStreamTagModel, PodModel } from '../../../../../public/models';\nimport { k8sCreate, k8sGet, k8sKillByName } from '../../../../../public/module/k8s';\n\ntype NodeTerminalErrorProps = {\n  error: React.ReactNode;\n};\n\ntype NodeTerminalInnerProps = {\n  obj?: FirehoseResult<PodKind>;\n};\n\ntype NodeTerminalProps = {\n  obj: NodeKind;\n};\n\nconst getDebugImage = async (): Promise<string> => {\n  try {\n    const istag = await k8sGet(ImageStreamTagModel, 'tools:latest', 'openshift');\n    return istag.image.dockerImageReference;\n  } catch (e) {\n    return 'registry.redhat.io/rhel7/support-tools';\n  }\n};\n\nconst getDebugPod = async (name: string, namespace: string, nodeName: string): Promise<PodKind> => {\n  const image = await getDebugImage();\n  return {\n    kind: 'Pod',\n    apiVersion: 'v1',\n    metadata: {\n      name,\n      namespace,\n      annotations: {\n        'debug.openshift.io/source-container': 'container-00',\n        'debug.openshift.io/source-resource': `/v1, Resource=nodes/${nodeName}`,\n      },\n    },\n    spec: {\n      activeDeadlineSeconds: 21600,\n      volumes: [\n        {\n          name: 'host',\n          hostPath: {\n            path: '/',\n            type: 'Directory',\n          },\n        },\n      ],\n      containers: [\n        {\n          name: 'container-00',\n          image,\n          command: ['/bin/sh'],\n          resources: {},\n          volumeMounts: [\n            {\n              name: 'host',\n              mountPath: '/host',\n            },\n          ],\n          securityContext: {\n            privileged: true,\n            runAsUser: 0,\n          },\n          stdin: true,\n          stdinOnce: true,\n          tty: true,\n        },\n      ],\n      restartPolicy: 'Never',\n      nodeName,\n      hostNetwork: true,\n      hostPID: true,\n    },\n  };\n};\n\nconst NodeTerminalError: React.FC<NodeTerminalErrorProps> = ({ error }) => {\n  return (\n    <div className=\"co-m-pane__body\">\n      <Alert variant=\"danger\" isInline title={error} />\n    </div>\n  );\n};\n\nconst NodeTerminalInner: React.FC<NodeTerminalInnerProps> = ({ obj }) => {\n  const message = (\n    <p>\n      To use host binaries, run <code>chroot /host</code>\n    </p>\n  );\n  switch (obj?.data?.status?.phase) {\n    case 'Failed':\n      return (\n        <NodeTerminalError\n          error={\n            <>\n              The debug pod failed.{' '}\n              {obj?.data?.status?.containerStatuses?.[0]?.state?.terminated?.message ||\n                obj?.data?.status?.message}\n            </>\n          }\n        />\n      );\n    case 'Running':\n      return <PodExecLoader obj={obj.data} message={message} />;\n    default:\n      return <LoadingBox />;\n  }\n};\n\nconst NodeTerminal: React.FC<NodeTerminalProps> = ({ obj: node }) => {\n  const [resources, setResources] = React.useState<FirehoseResource[]>([]);\n  const [errorMessage, setErrorMessage] = React.useState('');\n  const nodeName = node.metadata.name;\n  React.useEffect(() => {\n    const name = `${nodeName}-debug-${getRandomChars()}`;\n    const namespace = 'default';\n    getDebugPod(name, namespace, nodeName)\n      .then((debugPod: PodKind) => k8sCreate(PodModel, debugPod))\n      .then(() => {\n        setResources([\n          {\n            isList: false,\n            kind: 'Pod',\n            name,\n            namespace,\n            prop: 'obj',\n          },\n        ]);\n      })\n      .catch((e) => setErrorMessage(e.message));\n    const deletePod = async () => {\n      try {\n        await k8sKillByName(PodModel, name, namespace);\n      } catch (e) {\n        // eslint-disable-next-line no-console\n        console.warn('Could not delete node terminal debug pod.', e);\n      }\n    };\n    window.addEventListener('beforeunload', deletePod);\n    return () => {\n      deletePod();\n      window.removeEventListener('beforeunload', deletePod);\n    };\n    //  eslint-disable-next-line\n  }, [nodeName]);\n\n  return errorMessage ? (\n    <NodeTerminalError error={errorMessage} />\n  ) : (\n    <Firehose resources={resources}>\n      <NodeTerminalInner />\n    </Firehose>\n  );\n};\n\nexport default NodeTerminal;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAMA;AAEA;AACA;AACA;AAIA;;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAQA;AACA;AAMA;AACA;AAQA;AACA;AAMA;AAEA;AACA;AACA;AAQA;AACA;AACA;AACA;AAKA;AACA;AACA;AAIA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;;;;;;;;;;;;;AC5IA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvCA;AACA;AACA;AAOA;AACA;AACA;AACA;AAcA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAEA;;AACA;;AAEA;AAGA;AACA;AACA;;AAIA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAGA;AAEA;;;;;A","sourceRoot":""}