{"version":3,"file":"create-bc~create-bs-10d45c05ffb4b57cc90e.js","sources":["webpack:///./packages/noobaa-storage-plugin/src/components/create-backingstore-page/create-bs.scss?589b","webpack:///./packages/noobaa-storage-plugin/src/components/create-backingstore-page/create-bs.tsx","webpack:///./packages/noobaa-storage-plugin/src/constants/index.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin","import * as classNames from 'classnames';\nimport * as React from 'react';\nimport * as _ from 'lodash';\nimport {\n  ActionGroup,\n  Button,\n  FormGroup,\n  Form,\n  InputGroupText,\n  TextInput,\n  InputGroup,\n  TextArea,\n} from '@patternfly/react-core';\nimport { HelpIcon, MinusIcon, PlusIcon } from '@patternfly/react-icons';\nimport {\n  ButtonBar,\n  Dropdown,\n  ExternalLink,\n  Firehose,\n  HandlePromiseProps,\n  RequestSizeInput,\n  withHandlePromise,\n} from '@console/internal/components/utils';\nimport {\n  apiVersionForModel,\n  k8sCreate,\n  referenceForModel,\n  K8sResourceKind,\n} from '@console/internal/module/k8s';\nimport { ModalComponentProps } from '@console/internal/components/factory';\nimport { ResourceDropdown, getAPIVersion, getName } from '@console/shared';\nimport { SecretModel } from '@console/internal/models';\nimport { DashboardCardPopupLink } from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardLink';\nimport { SecretType } from '@console/internal/components/secrets/create-secret';\nimport { history } from '@console/internal/components/utils/router';\nimport { StorageClassDropdown } from '@console/internal/components/utils/storage-class-dropdown';\nimport { NooBaaBackingStoreModel } from '../../models';\nimport './create-bs.scss';\nimport {\n  BC_PROVIDERS,\n  AWS_REGIONS,\n  NOOBAA_TYPE_MAP,\n  PROVIDERS_NOOBAA_MAP,\n  BUCKET_LABEL_NOOBAA_MAP,\n} from '../../constants';\n\nconst PROVIDERS = (() => {\n  const values = _.values(BC_PROVIDERS);\n  return _.zipObject(values, values);\n})();\n\nconst awsRegionItems = _.zipObject(AWS_REGIONS, AWS_REGIONS);\nconst externalProviders = [\n  BC_PROVIDERS.AWS,\n  BC_PROVIDERS.AZURE,\n  BC_PROVIDERS.S3,\n  BC_PROVIDERS.GCP,\n  BC_PROVIDERS.IBM,\n];\nconst endpointSupported = [BC_PROVIDERS.S3, BC_PROVIDERS.IBM];\n\n/**\n * aws-s3, s3 compatible, IBM COS share the same form\n */\nconst S3EndPointType: React.FC<S3EndpointTypeProps> = (props) => {\n  const [showSecret, setShowSecret] = React.useState(true);\n  const { provider, namespace, state, dispatch } = props;\n\n  const targetLabel = provider === BC_PROVIDERS.AZURE ? 'Target Blob Container' : 'Target Bucket';\n  const credentialField1Label = provider === BC_PROVIDERS.AZURE ? 'Account Name' : 'Access Key';\n  const credentialField2Label = provider === BC_PROVIDERS.AZURE ? 'Account Key' : 'Secret Key';\n  const resources = [\n    {\n      isList: true,\n      namespace,\n      kind: SecretModel.kind,\n      prop: 'secrets',\n    },\n  ];\n\n  const switchToSecret = () => {\n    setShowSecret(true);\n    dispatch({ type: 'setAccessKey', value: '' });\n    dispatch({ type: 'setSecretKey', value: '' });\n  };\n\n  const switchToCredentials = () => {\n    setShowSecret(false);\n    dispatch({ type: 'setSecretName', value: '' });\n  };\n\n  return (\n    <>\n      {provider === BC_PROVIDERS.AWS && (\n        <FormGroup label=\"Region\" fieldId=\"region\" className=\"nb-bs-form-entry\" isRequired>\n          <Dropdown\n            className=\"nb-bs-form-entry__dropdown\"\n            menuClassName=\"nb-bs-form-entry__dropdown--short\"\n            buttonClassName=\"nb-bs-form-entry__dropdown\"\n            onChange={(e) => {\n              dispatch({ type: 'setRegion', value: e });\n            }}\n            items={awsRegionItems}\n            selectedKey={AWS_REGIONS[0]}\n            aria-label=\"Region Dropdown\"\n          />\n        </FormGroup>\n      )}\n\n      {endpointSupported.includes(provider) && (\n        <FormGroup label=\"Endpoint\" fieldId=\"endpoint\" className=\"nb-bs-form-entry\" isRequired>\n          <TextInput\n            onChange={(e) => {\n              dispatch({ type: 'setEndpoint', value: e });\n            }}\n            value={state.endpoint}\n            aria-label=\"Endpoint Address\"\n          />\n        </FormGroup>\n      )}\n\n      {showSecret ? (\n        <FormGroup\n          label=\"Secret\"\n          fieldId=\"secret-dropdown\"\n          className=\"nb-bs-form-entry nb-bs-form-entry--full-width\"\n          isRequired\n        >\n          <InputGroup>\n            <Firehose resources={resources}>\n              <ResourceDropdown\n                selectedKey={state.secretName}\n                placeholder=\"Select Secret\"\n                className=\"nb-bs-form-entry__dropdown nb-bs-form-entry__dropdown--full-width\"\n                buttonClassName=\"nb-bs-form-entry__dropdown\"\n                dataSelector={['metadata', 'name']}\n                onChange={(e) => dispatch({ type: 'setSecretName', value: e })}\n              />\n            </Firehose>\n            <Button variant=\"plain\" onClick={switchToCredentials}>\n              Switch to Credentials\n            </Button>\n          </InputGroup>\n        </FormGroup>\n      ) : (\n        <>\n          <FormGroup label={credentialField1Label} fieldId=\"acess-key\">\n            <InputGroup>\n              <TextInput\n                value={state.accessKey}\n                onChange={(e) => {\n                  dispatch({ type: 'setAccessKey', value: e });\n                }}\n                aria-label=\"Access Key Field\"\n              />\n              <Button variant=\"plain\" onClick={switchToSecret}>\n                Switch to Secret\n              </Button>\n            </InputGroup>\n          </FormGroup>\n          <FormGroup\n            className=\"nb-bs-form-entry\"\n            label={credentialField2Label}\n            fieldId=\"secret-key\"\n          >\n            <TextInput\n              value={state.secretKey}\n              onChange={(e) => {\n                dispatch({ type: 'setSecretKey', value: e });\n              }}\n              aria-label=\"Secret Key Field\"\n              type=\"password\"\n            />\n          </FormGroup>\n        </>\n      )}\n      <FormGroup\n        label={targetLabel}\n        fieldId=\"target-bucket\"\n        className=\"nb-bs-form-entry\"\n        isRequired\n      >\n        <TextInput\n          value={state.target}\n          onChange={(e) => dispatch({ type: 'setTarget', value: e })}\n          aria-label={targetLabel}\n        />\n      </FormGroup>\n    </>\n  );\n};\n\nconst PVCType: React.FC<PVCTypeProps> = ({ state, dispatch }) => {\n  const [size, setSize] = React.useState('50');\n  const [, updateState] = React.useState();\n  const units = {\n    GiB: 'GiB',\n    TiB: 'TiB',\n  };\n\n  // Noobaa expected Ti console standrad is to show TiB\n  const unitConverter = {\n    GiB: 'Gi',\n    TiB: 'Ti',\n  };\n\n  // Fix for updating the storage class by force rerender\n  const forceUpdate = React.useCallback(() => updateState({}), []);\n\n  React.useEffect(() => {\n    forceUpdate();\n  }, [forceUpdate, state.storageClass]);\n\n  const onChange = (event) => {\n    const { value, unit } = event;\n    const input = `${value}${unitConverter[unit]}`;\n    setSize(value);\n    dispatch({ type: 'setVolumeSize', value: input });\n  };\n\n  const substract = () => {\n    if (state.numVolumes > 1) {\n      dispatch({ type: 'setVolumes', value: state.numVolumes - 1 });\n    }\n  };\n\n  return (\n    <>\n      <FormGroup\n        label=\"Number of Volumes\"\n        fieldId=\"set-volumes\"\n        className=\"nb-bs-form-entry nb-bs-form-entry--short\"\n        isRequired\n      >\n        <InputGroup>\n          <InputGroupText>\n            <MinusIcon onClick={substract} />{' '}\n          </InputGroupText>\n          <TextInput value={state.numVolumes} aria-label=\"Number of Volumes\" />\n          <InputGroupText>\n            <PlusIcon\n              onClick={() => dispatch({ type: 'setVolumes', value: state.numVolumes + 1 })}\n            />{' '}\n          </InputGroupText>\n        </InputGroup>\n      </FormGroup>\n      <FormGroup\n        label=\"Volume Size\"\n        fieldId=\"volume-size\"\n        className=\"nb-bs-form-entry nb-bs-form-entry--short\"\n        isRequired\n      >\n        <RequestSizeInput\n          name=\"Volume Size\"\n          onChange={onChange}\n          dropdownUnits={units}\n          defaultRequestSizeUnit=\"GiB\"\n          defaultRequestSizeValue={size}\n        />\n      </FormGroup>\n      <FormGroup fieldId=\"storage-class\" className=\"nb-bs-form-entry\" isRequired>\n        <StorageClassDropdown\n          onChange={(sc) => dispatch({ type: 'setStorageClass', value: getName(sc) })}\n          defaultClass=\"ocs-storagecluster-ceph-rbd\"\n          id=\"sc-dropdown\"\n          required\n        />\n      </FormGroup>\n    </>\n  );\n};\n\nconst gcpHelpText = (\n  <DashboardCardPopupLink\n    linkTitle={\n      <>\n        <HelpIcon /> Where can I find google cloud credentials?\n      </>\n    }\n    popupTitle=\" \"\n  >\n    <div>\n      Service account keys are needed for Google Cloud Storage authentication. The keys can be found\n      in the service accounts page in the GCP console.\n      <ExternalLink\n        href=\"https://cloud.google.com/iam/docs/service-accounts#service_account_keys\"\n        text=\"Learn more\"\n      />\n    </div>\n  </DashboardCardPopupLink>\n);\n\nconst GCPEndpointType: React.FC<GCPEndPointTypeProps> = (props) => {\n  const [fileData, setFileData] = React.useState('');\n  const [inputData, setInputData] = React.useState('');\n  const { state, dispatch } = props;\n\n  const onUpload = (event) => {\n    event.preventDefault();\n    const file = event.target.files[0];\n    const reader = new FileReader();\n    reader.onload = (ev) => {\n      const data = _.get(ev, 'target.result');\n      setFileData(data);\n      setInputData(file.name);\n      dispatch({ type: 'setGcpJSON', value: data });\n    };\n    reader.readAsText(file);\n  };\n\n  return (\n    <>\n      <FormGroup\n        className=\"nb-bs-form-entry\"\n        helperText=\"Upload a .json file with the service account keys provided by google cloud storage.\"\n        label=\"Secret Key\"\n        fieldId=\"secret-key\"\n        isRequired\n      >\n        <InputGroup>\n          <TextInput\n            isReadOnly\n            value={inputData}\n            className=\"nb-bs-form-entry__file-name\"\n            placeholder=\"Upload JSON\"\n            aria-label=\"Uploaded File Name\"\n          />\n          <div className=\"inputbtn nb-bs-form-entry-upload-btn\">\n            <Button\n              href=\"#\"\n              variant=\"secondary\"\n              className=\"custom-input-btn nb-bs-form-entry-upload-btn__button\"\n            >\n              Browse\n            </Button>\n            <input\n              type=\"file\"\n              id=\"inputButton\"\n              className=\"nb-bs-form-entry-upload-btn__input\"\n              onChange={onUpload}\n              aria-label=\"Upload File\"\n            />\n          </div>\n        </InputGroup>\n      </FormGroup>\n      <FormGroup className=\"nb-bs-form-entry\" helperText={gcpHelpText} fieldId=\"gcp-data\">\n        <TextArea\n          aria-label=\"cluster-metadata\"\n          className=\"nb-bs-form-entry__data-dump\"\n          value={fileData}\n        />\n      </FormGroup>\n      <FormGroup\n        className=\"nb-bs-form-entry\"\n        label=\"Target Bucket\"\n        fieldId=\"target-bucket\"\n        isRequired\n      >\n        <TextInput\n          value={state.target}\n          onChange={(e) => {\n            dispatch({ type: 'setTarget', value: e });\n          }}\n          aria-label=\"Target Bucket\"\n        />\n      </FormGroup>\n    </>\n  );\n};\n\ntype ProviderDataState = {\n  secretName: string;\n  secretKey: string;\n  accessKey: string;\n  region: string;\n  gcpJSON: string;\n  target: string;\n  endpoint: string;\n  numVolumes: number;\n  volumeSize: string;\n  storageClass: string;\n};\n\ntype Action =\n  | { type: 'setSecretName'; value: string }\n  | { type: 'setSecretKey'; value: string }\n  | { type: 'setAccessKey'; value: string }\n  | { type: 'setRegion'; value: string }\n  | { type: 'setGcpJSON'; value: string }\n  | { type: 'setTarget'; value: string }\n  | { type: 'setEndpoint'; value: string }\n  | { type: 'setVolumes'; value: number }\n  | { type: 'setVolumeSize'; value: string }\n  | { type: 'setStorageClass'; value: string };\n\ntype BSPayload = {\n  apiVersion: string;\n  kind: string;\n  metadata: {\n    namespace: string;\n    name: string;\n  };\n  spec: {\n    type: string;\n    ssl: boolean;\n    [key: string]: any;\n  };\n};\n\nconst initialState: ProviderDataState = {\n  secretName: '',\n  secretKey: '',\n  accessKey: '',\n  region: AWS_REGIONS[0],\n  gcpJSON: '',\n  target: '',\n  endpoint: '',\n  numVolumes: 1,\n  volumeSize: '50Gi',\n  storageClass: '',\n};\n\nconst providerDataReducer = (state: ProviderDataState, action: Action) => {\n  const { value } = action;\n  switch (action.type) {\n    case 'setSecretName':\n      return Object.assign({}, state, { secretName: value });\n    case 'setSecretKey':\n      return Object.assign({}, state, { secretKey: value });\n    case 'setAccessKey':\n      return Object.assign({}, state, { accessKey: value });\n    case 'setRegion':\n      return Object.assign({}, state, { region: value });\n    case 'setGcpJSON':\n      return Object.assign({}, state, { gcpJSON: value });\n    case 'setTarget':\n      return Object.assign({}, state, { target: value });\n    case 'setEndpoint':\n      return Object.assign({}, state, { endpoint: value });\n    case 'setVolumes':\n      return Object.assign({}, state, { numVolumes: value });\n    case 'setVolumeSize':\n      return Object.assign({}, state, { volumeSize: value });\n    case 'setStorageClass':\n      return Object.assign({}, state, { storageClass: value });\n    default:\n      return initialState;\n  }\n};\n\nconst secretPayloadCreator = (\n  provider: string,\n  namespace: string,\n  secretName: string,\n  field1: string,\n  field2 = '',\n) => {\n  const payload = {\n    apiVersion: getAPIVersion(SecretModel),\n    kind: SecretModel.kind,\n    stringData: {},\n    metadata: {\n      name: secretName,\n      namespace,\n    },\n    type: SecretType.opaque,\n  };\n\n  switch (provider) {\n    case BC_PROVIDERS.AZURE:\n      payload.stringData = {\n        AccountName: field1,\n        AccountKey: field2,\n      };\n      break;\n    case BC_PROVIDERS.GCP:\n      payload.stringData = {\n        GoogleServiceAccountPrivateKeyJson: field1,\n      };\n      break;\n    case BC_PROVIDERS.IBM:\n      payload.stringData = {\n        IBM_COS_ACCESS_KEY_ID: field1,\n        IBM_COS_SECRET_ACCESS_KEY: field2,\n      };\n      break;\n    default:\n      payload.stringData = {\n        AWS_ACCESS_KEY_ID: field1,\n        AWS_SECRET_ACCESS_KEY: field2,\n      };\n      break;\n  }\n  return payload;\n};\n\nconst CreateBackingStoreForm: React.FC<CreateBackingStoreFormProps> = withHandlePromise<\n  CreateBackingStoreFormProps & HandlePromiseProps\n>((props) => {\n  const [bsName, setBsName] = React.useState('');\n  const [provider, setProvider] = React.useState(BC_PROVIDERS.AWS);\n  const [providerDataState, providerDataDispatch] = React.useReducer(\n    providerDataReducer,\n    initialState,\n  );\n\n  const {\n    cancel,\n    className,\n    close,\n    inProgress,\n    errorMessage,\n    handlePromise,\n    isPage,\n    csv,\n    namespace,\n  } = props;\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n    /** Create a secret if secret ==='' */\n    let { secretName } = providerDataState;\n    const promises = [];\n    if (!secretName && provider !== BC_PROVIDERS.PVC) {\n      secretName = bsName.concat('-secret');\n      const { secretKey, accessKey, gcpJSON } = providerDataState;\n      const secretPayload = secretPayloadCreator(\n        provider,\n        namespace,\n        secretName,\n        accessKey || gcpJSON,\n        secretKey,\n      );\n      providerDataDispatch({ type: 'setSecretName', value: secretName });\n      promises.push(k8sCreate(SecretModel, secretPayload));\n    }\n    /** Payload for bs */\n    const bsPayload: BSPayload = {\n      apiVersion: apiVersionForModel(NooBaaBackingStoreModel),\n      kind: NooBaaBackingStoreModel.kind,\n      metadata: {\n        namespace,\n        name: bsName,\n      },\n      spec: {\n        type: NOOBAA_TYPE_MAP[provider],\n        ssl: false,\n      },\n    };\n    if (provider === BC_PROVIDERS.PVC) {\n      // eslint-disable-next-line\n      bsPayload.spec['pvPool'] = {\n        numVolumes: providerDataState.numVolumes,\n        storageClass: providerDataState.storageClass,\n        resources: {\n          requests: {\n            storage: providerDataState.volumeSize,\n          },\n        },\n      };\n    } else if (externalProviders.includes(provider)) {\n      bsPayload.spec = {\n        ...bsPayload.spec,\n        [PROVIDERS_NOOBAA_MAP[provider]]: {\n          [BUCKET_LABEL_NOOBAA_MAP[provider]]: providerDataState.target,\n          secret: {\n            name: secretName,\n            namespace,\n          },\n        },\n      };\n    }\n    if (provider === BC_PROVIDERS.S3) {\n      // eslint-disable-next-line\n      bsPayload.spec['s3Compatible'] = {\n        // eslint-disable-next-line\n        ...bsPayload.spec['s3Compatible'],\n        endpoint: providerDataState.endpoint,\n      };\n    } else if (provider === BC_PROVIDERS.IBM) {\n      bsPayload.spec.ibmCos = { ...bsPayload.spec.ibmCos, endpoint: providerDataState.endpoint };\n    }\n    // Add region in the end\n    if (provider === BC_PROVIDERS.AWS) {\n      bsPayload.spec.awsS3 = { ...bsPayload.spec.awsS3, region: providerDataState.region };\n    }\n\n    promises.push(k8sCreate(NooBaaBackingStoreModel, bsPayload));\n    return handlePromise(Promise.all(promises)).then((resource) => {\n      const lastIndex = resource.length - 1;\n      if (isPage)\n        history.push(\n          `/k8s/ns/${namespace}/clusterserviceversions/${getName(csv)}/${referenceForModel(\n            NooBaaBackingStoreModel,\n          )}/${getName(resource[lastIndex])}`,\n        );\n      else close();\n    });\n  };\n\n  return (\n    <Form className={classNames('nb-bs-form', className)} onSubmit={onSubmit}>\n      <FormGroup\n        label=\"Backing Store Name\"\n        fieldId=\"backingstore-name\"\n        className=\"nb-bs-form-entry\"\n        helperText=\"A unique name for the Backing Store within the project\"\n        isRequired\n      >\n        <TextInput\n          onChange={setBsName}\n          value={bsName}\n          placeholder=\"my-backingstore\"\n          aria-label=\"Backing Store Name\"\n        />\n      </FormGroup>\n\n      <FormGroup label=\"Provider\" fieldId=\"provider-name\" className=\"nb-bs-form-entry\" isRequired>\n        <Dropdown\n          className=\"nb-bs-form-entry__dropdown\"\n          buttonClassName=\"nb-bs-form-entry__dropdown\"\n          onChange={setProvider}\n          items={PROVIDERS}\n          selectedKey={provider}\n        />\n      </FormGroup>\n      {provider === BC_PROVIDERS.GCP && (\n        <GCPEndpointType state={providerDataState} dispatch={providerDataDispatch} />\n      )}\n      {(provider === BC_PROVIDERS.AWS ||\n        provider === BC_PROVIDERS.S3 ||\n        provider === BC_PROVIDERS.IBM ||\n        provider === BC_PROVIDERS.AZURE) && (\n        <S3EndPointType\n          provider={provider}\n          namespace=\"openshift-storage\"\n          state={providerDataState}\n          dispatch={providerDataDispatch}\n        />\n      )}\n      {provider === BC_PROVIDERS.PVC && (\n        <PVCType state={providerDataState} dispatch={providerDataDispatch} />\n      )}\n      <ButtonBar errorMessage={errorMessage} inProgress={inProgress}>\n        <ActionGroup>\n          <Button type=\"submit\" variant=\"primary\">\n            Create Backing Store\n          </Button>\n          <Button onClick={cancel} variant=\"secondary\">\n            Cancel\n          </Button>\n        </ActionGroup>\n      </ButtonBar>\n    </Form>\n  );\n});\n\nexport default CreateBackingStoreForm;\n\ntype CreateBackingStoreFormProps = ModalComponentProps & {\n  isPage?: boolean;\n  namespace?: string;\n  className?: string;\n  csv?: K8sResourceKind;\n};\n\ntype S3EndpointTypeProps = {\n  state: ProviderDataState;\n  dispatch: React.Dispatch<Action>;\n  provider: BC_PROVIDERS;\n  namespace: string;\n};\n\ntype PVCTypeProps = {\n  state: ProviderDataState;\n  dispatch: React.Dispatch<Action>;\n};\n\ntype GCPEndPointTypeProps = {\n  state: ProviderDataState;\n  dispatch: React.Dispatch<Action>;\n};\n","export const ACCOUNTS = 'Accounts';\nexport const PROVIDERS = 'Providers';\nexport const BY_IOPS = 'I/O Operations';\nexport const BY_LOGICAL_USAGE = 'Logical Used Capacity';\nexport const BY_PHYSICAL_VS_LOGICAL_USAGE = 'Physical Vs Logical Usage';\nexport const BY_EGRESS = 'Egress';\nexport const PROJECTS = 'Projects';\nexport const BUCKET_CLASS = 'Bucket Class';\nexport const OCS_NS = 'openshift-storage';\nexport const NB_PROVISIONER = 'noobaa.io/obc';\n\nexport const CHART_LABELS = {\n  [BY_LOGICAL_USAGE]: 'Logical used capacity per account',\n  [BY_PHYSICAL_VS_LOGICAL_USAGE]: 'Physical vs. Logical used capacity',\n  [BY_EGRESS]: 'Egress Per Provider',\n  [BY_IOPS]: 'I/O Operations count',\n};\n\nexport enum BC_PROVIDERS {\n  AWS = 'AWS S3',\n  S3 = 'S3 Compatible',\n  PVC = 'PVC',\n  GCP = 'Google cloud storage',\n  AZURE = 'Azure Blob',\n  IBM = 'IBM COS',\n}\n\nexport const PROVIDERS_NOOBAA_MAP = {\n  [BC_PROVIDERS.AWS]: 'awsS3',\n  [BC_PROVIDERS.S3]: 's3Compatible',\n  [BC_PROVIDERS.AZURE]: 'azureBlob',\n  [BC_PROVIDERS.GCP]: 'googleCloudStorage',\n  [BC_PROVIDERS.PVC]: 'pvPool',\n  [BC_PROVIDERS.IBM]: 'ibmCos',\n};\n\nexport const BUCKET_LABEL_NOOBAA_MAP = {\n  [BC_PROVIDERS.AWS]: 'targetBucket',\n  [BC_PROVIDERS.S3]: 'targetBucket',\n  [BC_PROVIDERS.AZURE]: 'targetBlobContainer',\n  [BC_PROVIDERS.GCP]: 'targetBucket',\n  [BC_PROVIDERS.IBM]: 'targetBucket',\n};\n\nexport const NOOBAA_TYPE_MAP = {\n  [BC_PROVIDERS.AWS]: 'aws-s3',\n  [BC_PROVIDERS.S3]: 's3-compatible',\n  [BC_PROVIDERS.AZURE]: 'azure-blob',\n  [BC_PROVIDERS.GCP]: 'google-cloud-storage',\n  [BC_PROVIDERS.PVC]: 'pv-pool',\n  [BC_PROVIDERS.IBM]: 'ibm-cos',\n};\n\nexport const AWS_REGIONS = [\n  'us-east-1',\n  'us-east-2',\n  'us-west-1',\n  'us-west-2',\n  'ca-central-1',\n  'eu-central-1',\n  'eu-west-1',\n  'eu-west-2',\n  'eu-west-3',\n  'eu-north-1',\n  'ap-east-1',\n  'ap-northeast-1',\n  'ap-northeast-2',\n  'ap-northeast-3',\n  'ap-southeast-1',\n  'ap-southeast-2',\n  'ap-south-1',\n  'me-south-1',\n  'sa-east-1',\n];\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAUA;AACA;AASA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAKA;AACA;AAQA;AAEA;AAEA;AACA;AAOA;AAOA;AACA;AACA;AASA;AAOA;AACA;AACA;AAGA;AACA;AAGA;AAKA;AAKA;AAGA;AACA;AAOA;AAMA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAMA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AAIA;AAMA;AAQA;AACA;AASA;AAEA;AAIA;AACA;AAIA;;AAGA;AAQA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAOA;AACA;AAOA;AACA;AAOA;AAUA;AACA;AAMA;AAMA;AAGA;AACA;AAMA;AAyCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAKA;AAYA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAKA;AACA;AACA;AAEA;AAEA;AAOA;AAQA;AACA;AAQA;AAGA;AACA;AACA;AACA;AAQA;AAGA;AACA;AACA;AAGA;AAOA;AAEA;;;;;;;;;;;;;ACjpBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}