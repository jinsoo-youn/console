{"version":3,"file":"training-job-5e7c0363ed586b05092d.js","sources":["webpack:///./public/components/hypercloud/training-job.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\n\nimport { K8sResourceKind } from '../../module/k8s';\nimport { DetailsPage, MultiListPage, Table, TableRow, TableData, RowFunction } from '../factory';\nimport { Kebab, KebabAction, detailsPage, navFactory, ResourceKebab, ResourceLink, ResourceSummary, SectionHeading } from '../utils';\nimport { TrainingJobModel } from '../../models';\nimport { ResourceLabel } from '../../models/hypercloud/resource-plural';\nimport * as _ from 'lodash';\n\nexport const menuActions: KebabAction[] = [...Kebab.getExtensionsActionsForKind(TrainingJobModel), ...Kebab.factory.common];\n\nexport const tjKind = tj => {\n  return tj.kind === 'PyTorchJob' ? 'pytorchjob' : 'tfjob';\n};\n\nconst tableColumnClasses = ['', '', classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), Kebab.columnClass];\n\nconst tjPhase = tj => {\n  let len = tj.status.conditions.length;\n  for (let i = len - 1; i >= 0; i--) {\n    if (tj.status.conditions[i].status) {\n      return tj.status.conditions[i].type;\n    }\n  }\n};\n\nconst TJStatus = ({ tj }) => {\n  const phase = tjPhase(tj);\n  if (!phase) {\n    return '-';\n  }\n\n  switch (phase) {\n    case 'Running':\n      return (\n        <span className=\"text-muted\">\n          <i className=\"fa fa-hourglass-half\" aria-hidden=\"true\"></i> Running\n        </span>\n      );\n    case 'Restarting':\n      return (\n        <span className=\"text-muted\">\n          <i className=\"fa fa-hourglass-half\" aria-hidden=\"true\"></i> Restarting\n        </span>\n      );\n    case 'Created':\n      return (\n        <span className=\"pvc-bound\">\n          <i className=\"fa fa-check\" aria-hidden=\"true\"></i> Created\n        </span>\n      );\n    case 'Succeeded':\n      return (\n        <span className=\"pvc-bound\">\n          <i className=\"fa fa-check\" aria-hidden=\"true\"></i> Succeeded\n        </span>\n      );\n    case 'Failed':\n      return (\n        <span className=\"pvc-lost\">\n          <i className=\"fa fa-minus-circle\" aria-hidden=\"true\"></i> Failed\n        </span>\n      );\n    default:\n      return phase;\n  }\n};\n\nconst TJComposition = ({ tj }) => {\n  const specs = Object.entries(tj.spec);\n  const keys = Object.keys(specs[0][1]);\n  let str = '';\n  for (let i = 0; i < keys.length; i++) {\n    str += `${keys[i]} ${specs[0][1][keys[i]].replicas}`;\n    if (i !== keys.length - 1) {\n      str += ', ';\n    }\n  }\n\n  return <span className=\"pvc-lost\">{str}</span>;\n};\n\nconst TrainingJobTableHeader = (t?: TFunction) => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_2'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_3'),\n      sortFunc: 'tjPhase',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_15'),\n      sortFunc: 'tjComposition',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[4] },\n    },\n  ];\n};\nTrainingJobTableHeader.displayName = 'TrainingJobTableHeader';\n\nconst TrainingJobTableRow: RowFunction<K8sResourceKind> = ({ obj: tj, index, key, style }) => {\n  return (\n    <TableRow id={tj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={tjKind(tj)} name={tj.metadata.name} namespace={tj.metadata.namespace} title={tj.metadata.uid} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={tj.metadata.namespace} title={tj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <TJStatus tj={tj} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <TJComposition tj={tj} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <ResourceKebab actions={menuActions} kind={tjKind(tj)} resource={tj} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst TrainingJobDetails: React.FC<TrainingJobDetailsProps> = ({ obj: tj }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', { 0: ResourceLabel(tj, t) })} />\n        <div className=\"row\">\n          <div className=\"col-lg-6\">\n            <ResourceSummary resource={tj} />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst { details, editYaml } = navFactory;\nexport const TrainingJobs: React.FC = props => {\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"TrainingJobs\" Header={TrainingJobTableHeader.bind(null, t)} Row={TrainingJobTableRow} virtualize />;\n}\n\nexport const TrainingJobsPage: React.FC<TrainingJobsPageProps> = props => {\n  const { t } = useTranslation();\n\n  const createItems = {\n    tfjob: t('TF Job'),\n    pytorchjob: t('PyTorch Job'),\n  };\n\n  const createProps = {\n    items: createItems,\n    createLink: type => `/k8s/ns/${props.namespace || 'default'}/${type}s/~new`,\n  };\n\n  return (<MultiListPage\n    showTitle\n    title='Training Jobs'\n    canCreate={true}\n    ListComponent={TrainingJobs}\n    namespace={props.namespace}\n    createButtonText={t('COMMON:MSG_MAIN_CREATEBUTTON_1', { 0: ResourceLabel(TrainingJobModel, t) })}\n    createProps={createProps}\n    flatten={resources => _.flatMap(resources, 'data').filter(r => !!r)}\n    resources={[\n      { kind: 'TFJob', namespaced: true, optional: true },\n      { kind: 'PyTorchJob', namespaced: true, optional: true },\n    ]}\n    rowFilters={[\n      {\n        filterGroupName: 'Training Job',\n        type: 'trainingjob-kind',\n        reducer: tjKind,\n        items: [\n          { id: 'tfjob', title: 'TF Job' },\n          { id: 'pytorchjob', title: 'Pytorch Job' },\n        ],\n      },\n    ]} {...props} />\n  );\n}\n\nexport const TrainingJobsDetailsPage: React.FC<TrainingJobsDetailsPageProps> = props => <DetailsPage {...props} menuActions={menuActions} pages={[details(detailsPage(TrainingJobDetails)), editYaml()]} />;\n\ntype TrainingJobDetailsProps = {\n  obj: K8sResourceKind;\n};\n\ntype TrainingJobsPageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: any;\n};\n\ntype TrainingJobsDetailsPageProps = {\n  match: any;\n  kind: string;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAUA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;A","sourceRoot":""}