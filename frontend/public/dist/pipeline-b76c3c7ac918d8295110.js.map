{"version":3,"file":"pipeline-b76c3c7ac918d8295110.js","sources":["webpack:///./packages/dev-console/src/components/pipelines/list-page/PipelineRowKebabActions.tsx","webpack:///./public/components/hypercloud/pipeline-run.tsx","webpack:///./public/components/hypercloud/pipeline.tsx"],"sourcesContent":["import * as React from 'react';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { ResourceKebab } from '@console/internal/components/utils';\nimport { getPipelineKebabActions } from '../../../utils/pipeline-actions';\nimport { Pipeline, PipelineRun } from '../../../utils/pipeline-augment';\nimport { PipelineModel } from '../../../models';\nimport { usePipelineTriggerTemplateNames } from '../utils/triggers';\n\ntype PipelineRowKebabActionsProps = {\n  pipeline: Pipeline;\n  pipelineRun?: PipelineRun;\n};\n\nconst pipelineReference = referenceForModel(PipelineModel);\n\nconst PipelineRowKebabActions: React.FC<PipelineRowKebabActionsProps> = ({ pipeline, pipelineRun }) => {\n  const {\n    metadata: { name, namespace },\n  } = pipeline;\n  const templateNames = usePipelineTriggerTemplateNames(name, namespace) || [];\n\n  return (\n    <ResourceKebab\n      actions={getPipelineKebabActions(pipeline.latestRun ?? pipelineRun, templateNames.length > 0)}\n      kind={pipelineReference}\n      resource={pipeline}\n    />\n  );\n};\n\nexport default PipelineRowKebabActions;\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\n\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from '../factory';\nimport { Kebab, detailsPage, Timestamp, navFactory, ResourceKebab, ResourceLink, ResourceSummary, SectionHeading } from '../utils';\nimport { PipelineRunModel, PipelineModel, PipelineResourceModel } from '../../models';\nimport { pipelineRunDuration } from '../../../packages/dev-console/src/utils/pipeline-utils';\nimport { PipelineRun, pipelineRefExists, PipelineRunReferenceResource } from '../../../packages/dev-console/src/utils/pipeline-augment';\nimport { pipelineRunFilterReducer } from '../../../packages/dev-console/src/utils/pipeline-filter-reducer';\nimport LinkedPipelineRunTaskStatus from '../../../packages/dev-console/src/components/pipelineruns/status/LinkedPipelineRunTaskStatus';\nimport { getPipelineRunKebabActions } from '../../../packages/dev-console/src/utils/pipeline-actions';\nimport { PipelineRunLogsWithActiveTask } from '../../../packages/dev-console/src/components/pipelineruns/detail-page-tabs/PipelineRunLogs';\nimport PipelineRunVisualization from '../../../packages/dev-console/src/components/pipelineruns/detail-page-tabs/PipelineRunVisualization';\nimport ResourceLinkList from '../../../packages/dev-console/src/components/pipelines/resource-overview/ResourceLinkList';\nimport TriggeredBySection from '../../../packages/dev-console/src/components/pipelineruns/detail-page-tabs/TriggeredBySection';\nimport { Status } from '@console/shared';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\nimport { ResourceLabel } from '../../models/hypercloud/resource-plural';\n\nconst kind = PipelineRunModel.kind;\n\nconst tableColumnClasses = [\n  '', // name\n  '', // namespace\n  'pf-m-hidden pf-m-visible-on-sm', // status\n  'pf-m-hidden pf-m-visible-on-lg', // task status\n  'pf-m-hidden pf-m-visible-on-lg', // started\n  'pf-m-hidden pf-m-visible-on-xl', // duration\n  Kebab.columnClass,\n];\n\n\nconst PipelineRunTableHeader = (t?: TFunction) => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_2'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_3'),\n      sortField: 'status.conditions[0].reason',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_78'),\n      sortField: 'status.conditions[0].reason',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: t('COMMON:MSG_DETAILS_TABDETAILS_CONTAINERS_TABLEHEADER_6'),\n      sortField: 'status.startTime',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_81'),\n      sortField: 'status.completionTime',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[5] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[6] },\n    },\n  ];\n};\n\nPipelineRunTableHeader.displayName = 'PipelineRunTableHeader';\n\n\nconst PipelineRunTableRow: RowFunction<PipelineRun> = ({ obj: pipelineRun, index, key, style }) => {\n  return (\n    <TableRow id={pipelineRun.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={pipelineRun.metadata.name} namespace={pipelineRun.metadata.namespace} title={pipelineRun.metadata.uid} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={pipelineRun.metadata.namespace} title={pipelineRun.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Status status={pipelineRunFilterReducer(pipelineRun)} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <LinkedPipelineRunTaskStatus pipelineRun={pipelineRun} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <Timestamp timestamp={pipelineRun.status && pipelineRun.status.startTime} />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>{pipelineRunDuration(pipelineRun)}</TableData>\n      <TableData className={tableColumnClasses[6]}>\n        <ResourceKebab actions={getPipelineRunKebabActions()} kind={kind} resource={pipelineRun} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport const PipelineRunDetailsList: React.FC<PipelineRunDetailsListProps> = ({ pipelineRun }) => {\n  const unfilteredResources = pipelineRun.spec.resources as PipelineRunReferenceResource[];\n  const renderResources =\n    unfilteredResources\n      ?.filter(({ resourceRef }) => !!resourceRef)\n      .map((resource) => resource.resourceRef.name) || [];\n\n  return (\n    <div className=\"col-sm-6 odc-pipeline-run-details__customDetails\">\n      {pipelineRefExists(pipelineRun) && (\n        <dl>\n          <dt>Pipeline</dt>\n          <dd>\n            <ResourceLink\n              kind={referenceForModel(PipelineModel)}\n              name={pipelineRun.spec.pipelineRef.name}\n              namespace={pipelineRun.metadata.namespace}\n            />\n          </dd>\n        </dl>\n      )}\n      <TriggeredBySection pipelineRun={pipelineRun} />\n      <br />\n      <ResourceLinkList\n        model={PipelineResourceModel}\n        links={renderResources}\n        namespace={pipelineRun.metadata.namespace}\n      />\n    </div>\n  );\n}\n\nconst PipelineRunDetails: React.FC<PipelineRunDetailsProps> = ({ obj: pipelineRun }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', { 0: ResourceLabel(pipelineRun, t) })} />\n        <PipelineRunVisualization pipelineRun={pipelineRun} />\n        <div className=\"row\">\n          <div className=\"col-lg-6\">\n            <ResourceSummary resource={pipelineRun} />\n          </div>\n          <div className=\"col-lg-6\">\n            <PipelineRunDetailsList pipelineRun={pipelineRun} />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\n\nconst { details, editYaml } = navFactory;\n\nconst filters = [\n  {\n    filterGroupName: 'Status',\n    type: 'pipeline-run-status',\n    reducer: pipelineRunFilterReducer,\n    items: [\n      { id: 'Succeeded', title: 'Succeeded' },\n      { id: 'Running', title: 'Running' },\n      { id: 'Failed', title: 'Failed' },\n      { id: 'Cancelled', title: 'Cancelled' },\n    ],\n  },\n];\n\nexport const PipelineRuns: React.FC = props => {\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"Pipeline Runs\" Header={PipelineRunTableHeader.bind(null, t)} Row={PipelineRunTableRow} virtualize />;\n}\n\nexport const PipelineRunsPage: React.FC<PipelineRunsPageProps> = props => {\n  const { t } = useTranslation();\n\n  return <ListPage\n    title={t('COMMON:MSG_LNB_MENU_60')}\n    createButtonText={t('COMMON:MSG_MAIN_CREATEBUTTON_1', { 0: t('COMMON:MSG_LNB_MENU_60') })}\n    canCreate={true}\n    ListComponent={PipelineRuns}\n    kind={kind}\n    rowFilters={filters}\n    {...props}\n  />;\n}\n\nexport const PipelineRunsDetailsPage: React.FC<PipelineRunsDetailsPageProps> = props => <DetailsPage {...props} kind={kind} menuActions={getPipelineRunKebabActions()} pages={[details(detailsPage(PipelineRunDetails)), editYaml(), {\n  href: 'logs',\n  path: 'logs/:name?',\n  name: 'Logs',\n  component: PipelineRunLogsWithActiveTask,\n},]} />;\n\n\ntype PipelineRunDetailsListProps = {\n  pipelineRun: PipelineRun;\n};\n\ntype PipelineRunsPageProps = {\n  canCreate?: boolean;\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: any;\n};\n\ntype PipelineRunDetailsProps = {\n  obj: PipelineRun;\n};\n\ntype PipelineRunsDetailsPageProps = {\n  match: any;\n};","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\n\nimport { K8sKind } from '../../module/k8s';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from '../factory';\nimport { Kebab, KebabAction, detailsPage, Timestamp, navFactory, ResourceLink, ResourceSummary, SectionHeading } from '../utils';\nimport { PipelineModel, TaskModel, ClusterTaskModel } from '../../models';\nimport PipelineVisualization from '../../../packages/dev-console/src/components/pipelines/detail-page-tabs/pipeline-details/PipelineVisualization';\nimport DynamicResourceLinkList from '../../../packages/dev-console/src/components/pipelines/resource-overview/DynamicResourceLinkList';\nimport { Pipeline } from '../../../packages/dev-console/src/utils/pipeline-augment';\nimport { PipelineForm, PipelineParametersForm, PipelineResourcesForm, parametersValidationSchema, resourcesValidationSchema } from '../../../packages/dev-console/src/components/pipelines/detail-page-tabs';\nimport { addTrigger } from '../../../packages/dev-console/src/utils/pipeline-actions';\nimport { PipelineRunsPage } from './pipeline-run';\nimport PipelineRowKebabActions from '../../../packages/dev-console/src/components/pipelines/list-page/PipelineRowKebabActions';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\nimport { ResourceLabel } from '../../models/hypercloud/resource-plural';\n\nexport const menuActions: KebabAction[] = [addTrigger, ...Kebab.getExtensionsActionsForKind(PipelineModel), ...Kebab.factory.common];\n\nconst kind = PipelineModel.kind;\n\nconst tableColumnClasses = [\n  'col-xs-6 col-sm-4', // name\n  'col-xs-6 col-sm-4', // namespace\n  'col-sm-4 hidden-xs', // created\n  Kebab.columnClass,\n];\n\nconst PipelineTableHeader = (t?: TFunction) => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_2'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_12'),\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[3] },\n    },\n  ];\n};\n\nPipelineTableHeader.displayName = 'PipelineTableHeader';\n\nconst PipelineTableRow: RowFunction<Pipeline> = ({ obj: pipeline, index, key, style }) => {\n  return (\n    <TableRow id={pipeline.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={pipeline.metadata?.name} namespace={pipeline.metadata?.namespace} title={pipeline.metadata?.uid} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={pipeline.metadata?.namespace} title={pipeline.metadata?.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Timestamp timestamp={pipeline.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <PipelineRowKebabActions pipeline={pipeline} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport const getResourceModelFromTaskKind = (kind: string): K8sKind => (kind === ClusterTaskModel.kind ? ClusterTaskModel : TaskModel);\n\nexport const PipelineDetailsList: React.FC<PipelineDetailsListProps> = ({ ds: pipeline }) => {\n  const taskLinks = pipeline.spec.tasks\n    .filter((pipelineTask: PipelineTask) => !!pipelineTask.taskRef)\n    .map(task => ({\n      model: getResourceModelFromTaskKind(task.taskRef.kind),\n      name: task.taskRef.name,\n      displayName: task.name,\n    }));\n\n  return (\n    <dl className=\"co-m-pane__details\">\n      <DynamicResourceLinkList namespace={pipeline.metadata.namespace} links={taskLinks} title=\"Tasks\" />\n    </dl>\n  );\n};\n\n\nconst PipelineDetails: React.FC<PipelineDetailsProps> = ({ obj: pipeline }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', { 0: ResourceLabel(pipeline, t) })} />\n        <PipelineVisualization pipeline={pipeline} />\n        <div className=\"row\">\n          <div className=\"col-lg-6\">\n            <ResourceSummary resource={pipeline} />\n          </div>\n          <div className=\"col-lg-6\">\n            <PipelineDetailsList ds={pipeline} />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst { details, editYaml } = navFactory;\n\nexport const Pipelines: React.FC = props => {\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"Pipelines\" Header={PipelineTableHeader.bind(null, t)} Row={PipelineTableRow} virtualize />\n};\n\nexport const PipelinesPage: React.FC<PipelinesPageProps> = props => {\n  const { t } = useTranslation();\n\n  return <ListPage\n    title={t('COMMON:MSG_LNB_MENU_59')}\n    createButtonText={t('COMMON:MSG_MAIN_CREATEBUTTON_1', { 0: t('COMMON:MSG_LNB_MENU_59') })}\n    canCreate={true}\n    ListComponent={Pipelines}\n    kind={kind}\n    {...props}\n  />;\n}\n\nexport const PipelinesDetailsPage: React.FC<PipelinesDetailsPageProps> = props => (\n  <DetailsPage\n    {...props}\n    kind={kind}\n    menuActions={menuActions}\n    pages={[\n      details(detailsPage(PipelineDetails)),\n      editYaml(),\n      {\n        href: 'runs',\n        name: 'Pipeline Runs',\n        component: pageProps => <PipelineRunsPage showTitle={false} canCreate={false} namespace={pageProps.obj.metadata.namespace} selector={{ 'tekton.dev/pipeline': pageProps.obj.metadata.name, }} />,\n      },\n      {\n        href: 'parameters',\n        name: 'Parameters',\n        component: pageProps => <PipelineForm PipelineFormComponent={PipelineParametersForm} formName=\"parameters\" validationSchema={parametersValidationSchema} obj={pageProps.obj} {...pageProps} />,\n      },\n      {\n        href: 'resources',\n        name: 'Resources',\n        component: pageProps => <PipelineForm PipelineFormComponent={PipelineResourcesForm} formName=\"resources\" validationSchema={resourcesValidationSchema} obj={pageProps.obj} {...pageProps} />,\n      },\n    ]}\n  />\n);\n\ntype PipelineDetailsListProps = {\n  ds: Pipeline;\n};\n\ntype PipelinesPageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: any;\n};\n\ntype PipelineDetailsProps = {\n  obj: Pipeline;\n};\n\ntype PipelinesDetailsPageProps = {\n  match: any;\n};\nexport interface PipelineTaskRef {\n  kind?: string;\n  name: string;\n}\n\nexport interface PipelineTaskParam {\n  name: string;\n  value: any;\n}\nexport interface PipelineTaskResources {\n  inputs?: PipelineTaskResource[];\n  outputs?: PipelineTaskResource[];\n}\nexport interface PipelineTaskResource {\n  name: string;\n  resource?: string;\n  from?: string[];\n}\nexport interface PipelineTask {\n  name: string;\n  runAfter?: string[];\n  taskRef: PipelineTaskRef;\n  params?: PipelineTaskParam[];\n  resources?: PipelineTaskResources;\n}\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAOA;AAEA;;AACA;AAGA;AAEA;AAOA;AAEA;;;;;;;;;;;;;AC7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAKA;AAEA;AAEA;AACA;AACA;AAQA;AACA;AACA;AAOA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC1MA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAQA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}