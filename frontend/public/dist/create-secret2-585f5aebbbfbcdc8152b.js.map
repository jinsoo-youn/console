{"version":3,"file":"create-secret2-585f5aebbbfbcdc8152b.js","sources":["webpack:///./public/components/hypercloud/form/pipelineruns/create-pipelinerun.tsx","webpack:///./public/components/hypercloud/utils/section.tsx"],"sourcesContent":["/* eslint-disable no-undef */\nimport * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { k8sCreate, k8sList, k8sGet, k8sUpdate, K8sResourceKind } from '../../../../module/k8s';\nimport { Section } from '../../utils/section';\nimport { ButtonBar, history, kindObj, SelectorInput } from '../../../utils';\nimport { useTranslation } from 'react-i18next';\nimport { ResourceLabelPlural } from '../../../../models/hypercloud/resource-plural';\nimport { formatNamespacedRouteForResource } from '@console/shared/src/utils/namespace';\nimport store from '../../../../redux';\nimport { getActiveNamespace } from '@console/internal/reducers/ui';\n\nenum CreateType {\n  generic = 'generic',\n  form = 'form',\n}\nconst pageExplanation = {\n  [CreateType.form]: 'Create Pipeline Run using Form Editor',\n};\n\nconst RefList = ({ list, type }) => {\n  const resources = list\n    .filter(cur => {\n      return cur.type === type;\n    })\n    .map(cur => {\n      return <option value={cur.name}>{cur.name}</option>;\n    });\n  return resources;\n};\n\n// const Requestform = () =>\nclass PipelineRunFormComponent extends React.Component<PipelineRunProps_, PipelineRunState_> {\n  constructor(props) {\n    super(props);\n    const existingPipelineRun = _.pick(props.obj, ['metadata', 'type']);\n    const pipelineRun = _.defaultsDeep({}, props.fixed, existingPipelineRun, {\n      apiVersion: 'tekton.dev/v1beta1',\n      kind: 'PipelineRun',\n      metadata: {\n        name: '',\n        namespace: '',\n        labels: {},\n      },\n      spec: {\n        serviceAccountName: '',\n        params: [],\n        pipelineRef: {\n          name: '',\n        },\n        resources: [],\n      },\n    });\n\n    this.state = {\n      pipelineRunTypeAbstraction: this.props.pipelineRunTypeAbstraction,\n      pipelineRun: pipelineRun,\n      inProgress: false, // 뭔지 잘 모르겠음\n      stringData: _.mapValues(_.get(props.obj, 'data'), window.atob),\n      type: 'form',\n      pipelineList: [],\n      paramList: [],\n      selectedPipeLine: '',\n      selectedPipeLineNs: '',\n      selectedParam: '',\n      resourceList: [],\n      resourceRefList: [],\n      selectedResourceRef: '',\n      namespace: getActiveNamespace(store.getState()),\n    };\n    this.getPipelineList = this.getPipelineList.bind(this);\n    this.getPipelineDetails = this.getPipelineDetails.bind(this);\n    this.onNameChanged = this.onNameChanged.bind(this);\n    this.onParamChanged = this.onParamChanged.bind(this);\n    this.onResourceChanged = this.onResourceChanged.bind(this);\n    this.onPipelineChange = this.onPipelineChange.bind(this);\n    this.getPipelineResourceList = this.getPipelineResourceList.bind(this);\n    this.onLabelChanged = this.onLabelChanged.bind(this);\n    this.onAccountChanged = this.onAccountChanged.bind(this);\n    this.save = this.save.bind(this);\n  }\n\n  componentDidMount() {\n    this.getPipelineList();\n  }\n\n  // refreshPipelineRun() {\n  //     let pipelineRun = { ...this.state.pipelineRun };\n  //     pipelineRun.spec.params = [];\n  //     pipelineRun.spec.resources = [];\n  //     this.setState({ pipelineRun });\n  // }\n\n  onNameChanged(event) {\n    let pipelineRun = { ...this.state.pipelineRun };\n    pipelineRun.metadata.name = String(event.target.value);\n    this.setState({ pipelineRun });\n  }\n\n  onPipelineChange(event) {\n    // this.refreshPipelineRun();\n\n    this.setState(\n      {\n        selectedPipeLine: event.target.value,\n      },\n      () => {\n        this.getPipelineDetails();\n      },\n    );\n    let pipelineRun = { ...this.state.pipelineRun };\n    pipelineRun.spec.pipelineRef.name = event.target.value;\n\n    this.setState({ pipelineRun });\n  }\n\n  onParamChanged(event) {\n    let pipelineRun = { ...this.state.pipelineRun };\n    pipelineRun.spec.params.some((cur, idx) => {\n      if (cur.name === event.target.id) {\n        pipelineRun.spec.params.splice(idx, 1);\n      }\n      return cur.name === event.target.id;\n    });\n\n    pipelineRun.spec.params.push({\n      name: event.target.id,\n      value: String(event.target.value),\n    });\n    this.setState({ pipelineRun });\n  }\n\n  onResourceChanged(event) {\n    let pipelineRun = { ...this.state.pipelineRun };\n\n    pipelineRun.spec.resources.some((cur, idx) => {\n      if (cur.name === event.target.id) {\n        pipelineRun.spec.resources.splice(idx, 1);\n      }\n      return cur.name === event.target.id;\n    });\n\n    pipelineRun.spec.resources.push({\n      name: event.target.id,\n      resourceRef: {\n        name: event.target.value,\n      },\n    });\n    this.setState({ pipelineRun });\n    console.log(this.state.pipelineRun);\n  }\n\n  onLabelChanged(event) {\n    let pipelineRun = { ...this.state.pipelineRun };\n    //console.log(event);\n    pipelineRun.metadata.labels = {};\n    if (event.length !== 0) {\n      event.forEach(item => {\n        if (item.split('=')[1] === undefined) {\n          document.getElementById('labelErrMsg').style.display = 'block';\n          event.pop(item);\n          return;\n        }\n        document.getElementById('labelErrMsg').style.display = 'none';\n        pipelineRun.metadata.labels[item.split('=')[0]] = item.split('=')[1];\n      });\n    }\n    this.setState({ pipelineRun });\n  }\n\n  onAccountChanged(event) {\n    let pipelineRun = { ...this.state.pipelineRun };\n    pipelineRun.spec.serviceAccountName = String(event.target.value);\n    this.setState({ pipelineRun });\n  }\n\n  getPipelineList() {\n    const ko = kindObj('Pipeline');\n\n    k8sList(ko)\n      .then(reponse => reponse)\n      .then(\n        data => {\n          let pipelineList = data\n            .filter(cur => {\n              return document.location.href.indexOf('/all-namespaces/') === -1 && cur.metadata.namespace === document.location.href.split('ns/')[1].split('/')[0];\n            })\n            .map(cur => {\n              return {\n                name: cur.metadata.name,\n                ns: cur.metadata.namespace,\n              };\n            });\n          let pipelineRun = { ...this.state.pipelineRun };\n          if (pipelineList.length === 0) {\n            return;\n          }\n          pipelineRun.spec.pipelineRef.name = pipelineList[0].name;\n          this.setState({ pipelineRun });\n\n          this.setState(\n            {\n              pipelineList: pipelineList,\n              selectedPipeLine: pipelineList[0].name,\n              selectedPipeLineNs: pipelineList[0].ns,\n            },\n            this.getPipelineDetails,\n          );\n        },\n        err => {\n          this.setState({ error: err.message, inProgress: false });\n          this.setState({ pipelineList: [] });\n        },\n      );\n  }\n\n  getPipelineDetails() {\n    const ko = kindObj('Pipeline');\n\n    k8sGet(ko, this.state.selectedPipeLine, this.state.selectedPipeLineNs)\n      .then(reponse => reponse)\n      .then(\n        details => {\n          //params, resource가 없는경우\n          let paramList = details.spec.params\n            ? details.spec.params.map(cur => {\n              return {\n                name: cur.name,\n                type: cur.type,\n                value: '',\n              };\n            })\n            : [];\n          let resourceList = details.spec.resources\n            ? details.spec.resources.map(cur => {\n              return {\n                name: cur.name,\n                type: cur.type,\n              };\n            })\n            : [];\n\n          let pipelineRun = { ...this.state.pipelineRun };\n          // let initParamList = details.spec.params.map(cur => {\n          //     return {\n          //         name: cur.name,\n          //         value: ''\n          //     }\n          // });\n          !pipelineRun.spec.params.length && pipelineRun.spec.params.push(...paramList);\n          this.setState(\n            {\n              pipelineRun: pipelineRun,\n              resourceList: resourceList,\n              paramList: paramList,\n            },\n            resourceList.forEach(cur => {\n              !pipelineRun.spec.resources.length && this.getPipelineResourceList(cur.name, cur.type);\n            }),\n          );\n          paramList.length ? this.setState({ selectedParam: paramList[0].name }) : null;\n        },\n        err => {\n          this.setState({ error: err.message, inProgress: false });\n          this.setState({ paramList: [] });\n        },\n      );\n  }\n\n  getPipelineResourceList(resourceName, resourceType) {\n    const ko = kindObj('PipelineResource');\n\n    k8sList(ko)\n      .then(reponse => reponse)\n      .then(\n        data => {\n          if (data.length === 0) {\n            return;\n          }\n          let resourceRefList = data\n            .filter(cur => {\n              return document.location.href.indexOf('/all-namespaces/') === -1 && cur.metadata.namespace === document.location.href.split('ns/')[1].split('/')[0];\n            })\n            .map(cur => {\n              return {\n                name: cur.metadata.name,\n                type: cur.spec.type,\n              };\n            });\n          let pipelineRun = { ...this.state.pipelineRun };\n          let initResourceList = {\n            name: resourceName,\n            resourceRef: {\n              name: resourceRefList.filter(cur => {\n                return cur.type === resourceType;\n              })[0].name,\n            },\n          };\n\n          pipelineRun.spec.resources.length < resourceRefList.length && pipelineRun.spec.resources.push(initResourceList);\n          this.setState({ pipelineRun });\n\n          this.setState({\n            resourceRefList: resourceRefList,\n          });\n        },\n        err => {\n          this.setState({ error: err.message, inProgress: false });\n          this.setState({ resourceRefList: [] });\n        },\n      );\n  }\n\n  save(e) {\n    e.preventDefault();\n    const { kind, metadata } = this.state.pipelineRun;\n    this.setState({ inProgress: true });\n    const newPipelineRun = _.assign({}, this.state.pipelineRun);\n    const ko = kindObj(kind);\n    (this.props.isCreate ? k8sCreate(ko, newPipelineRun) : k8sUpdate(ko, newPipelineRun, metadata.namespace, newPipelineRun.metadata.name)).then(\n      () => {\n        this.setState({ inProgress: false });\n        console.log(this.state);\n        history.push(formatNamespacedRouteForResource('pipelineruns', this.state.namespace));\n      },\n      err => this.setState({ error: err.message, inProgress: false }),\n    );\n  }\n\n  render() {\n    const { pipelineList, paramList, resourceList, resourceRefList } = this.state;\n    const { t } = this.props;\n    let options = pipelineList.map(cur => {\n      return <option value={cur.name}>{cur.name}</option>;\n    });\n\n    let paramDivs = paramList.length\n      ? paramList.map(cur => {\n        return (\n          <ul>\n            <Section label={cur.name} id={cur.name} description={cur.description}>\n              <input className=\"form-control\" type=\"text\" placeholder={t('CONTENT:VALUE')} id={cur.name} onChange={this.onParamChanged} required />\n            </Section>\n          </ul>\n        );\n      })\n      : false;\n\n    let resourceDivs = resourceList.length\n      ? resourceList.map(cur => {\n        return (\n          <ul>\n            <Section label={cur.name} id={cur.name}>\n              <select className=\"form-control\" id={cur.name} onChange={this.onResourceChanged}>\n                <RefList list={resourceRefList} type={cur.type} />\n              </select>\n            </Section>\n          </ul>\n        );\n      })\n      : false;\n\n    return (\n      <div className=\"co-m-pane__body\">\n        <Helmet>\n          <title>Create Pipeline Run</title>\n        </Helmet>\n        <form className=\"co-m-pane__body-group co-create-secret-form\" onSubmit={this.save}>\n          <h1 className=\"co-m-pane__heading\">{t('COMMON:MSG_MAIN_CREATEBUTTON_1', { 0: ResourceLabelPlural(this.state.pipelineRun, t) })}</h1>\n          <p className=\"co-m-pane__explanation\">{t('Description')}</p>\n\n          <fieldset disabled={!this.props.isCreate}>\n            <Section label={t('이름')} id=\"pipelinerun-name\" isRequired>\n              <div>\n                <input className=\"form-control\" type=\"text\" onChange={this.onNameChanged} value={this.state.pipelineRun.metadata.name} aria-describedby=\"secret-name-help\" id=\"pipelinerun-name\" required />\n              </div>\n            </Section>\n\n            <Section label={t('레이블')} id=\"label\" description=\"Enter를 입력하여 레이블을 추가할 수 있습니다.\">\n              <div className=\"form-group\">\n                <div>\n                  <SelectorInput labelClassName=\"co-text-namespace\" onChange={this.onLabelChanged} tags={[]} />\n                </div>\n              </div>\n            </Section>\n            <div id=\"labelErrMsg\" style={{ display: 'none', color: 'red' }}>\n              <p>{t(\"레이블은 '키=값' 형식이어야 합니다.\")}</p>\n            </div>\n\n            <div className=\"co-form-section__separator\" />\n\n            <Section label={t('COMMON:MSG_LNB_MENU_146')} id=\"pipeline\" isRequired>\n              <select onChange={this.onPipelineChange} className=\"form-control\" id=\"pipeline\">\n                {options}\n              </select>\n            </Section>\n\n            {paramDivs &&\n              <Section label={t('파이프라인 파라미터')} id=\"param\">\n                {paramDivs}\n              </Section>}\n            {resourceDivs &&\n              <Section label={t('파이프라인 리소스')} id=\"resource\">\n                {resourceDivs}\n              </Section>}\n\n            <div className=\"co-form-section__separator\" />\n\n            <Section label={t('서비스 어카운트 지정')} id=\"account\" isRequired>\n              <div className=\"form-group\">\n                <div>\n                  <input className=\"form-control\" type=\"text\" onChange={this.onAccountChanged} value={this.state.pipelineRun.spec.serviceAccountName} id=\"pipelinerun-account\" required />\n                </div>\n              </div>\n            </Section>\n\n            <ButtonBar errorMessage={this.state.error} inProgress={this.state.inProgress}>\n              <ActionGroup className=\"pf-c-form\">\n                <Button type=\"submit\" id=\"save-changes\" variant=\"primary\">\n                  {t('COMMON:MSG_COMMON_BUTTON_COMMIT_1')}\n                </Button>\n                <Button onClick={history.goBack} id=\"cancel\" variant=\"secondary\">\n                  {t('COMMON:MSG_COMMON_BUTTON_COMMIT_2')}\n                </Button>\n              </ActionGroup>\n            </ButtonBar>\n          </fieldset>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport const CreatePipelineRun = ({ match: { params } }) => {\n  // const PipelineRunFormComponent = PipelineRunFormFactory(params.type);\n  const { t } = useTranslation();\n  return <PipelineRunFormComponent t={t} fixed={{ metadata: { namespace: params.ns } }} pipelineRunTypeAbstraction={params.type} explanation={pageExplanation[params.type]} titleVerb=\"Create\" isCreate={true} />;\n};\n\nexport type PipelineRunState_ = {\n  pipelineRunTypeAbstraction?: CreateType;\n  pipelineRun: K8sResourceKind;\n  inProgress: boolean; // 뭔지 잘 모르겠음\n  stringData: { [key: string]: string };\n  error?: any;\n  type: string;\n  pipelineList: Array<any>;\n  selectedPipeLine: string;\n  selectedPipeLineNs: string;\n  paramList: Array<any>;\n  selectedParam: string;\n  resourceList: Array<any>;\n  resourceRefList: Array<any>;\n  selectedResourceRef: string;\n  namespace: string;\n};\n\nexport type PipelineRunProps_ = {\n  obj?: K8sResourceKind;\n  fixed: any;\n  kind?: string;\n  isCreate: boolean;\n  titleVerb: string;\n  pipelineRunTypeAbstraction?: CreateType;\n  saveButtonText?: string;\n  explanation: string;\n  t: any;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\n\nconst Node = ({ className, children, description }) => (\n  <div className={className}>\n    <div>{children}</div>\n    <p className=\"help-block\">{description}</p>\n  </div>\n);\n\nconst CombineNodes = (id, label, description, children, isRequired) => {\n  // children node 개수에 따라 가로 분할 class 적용\n  let isArray = Array.isArray(children);\n  let className = isArray ? `col-md-${12 / children.length}` : 'col-md-12';\n  return isArray ? children.map(cur => <Node className={className} children={cur} description={description} />) : <Node className={className} children={children} description={description} />;\n};\n\nexport const Section: React.FC<SectionProps> = ({ id, label, description, children, isRequired = false }) => {\n  let result = CombineNodes(id, label, description, children, isRequired);\n  return (\n    <div className=\"form-group\">\n      {label && (\n        <label className={'control-label ' + (isRequired ? 'co-required' : '')} htmlFor={id}>\n          {label}\n        </label>\n      )}\n      <div className=\"row\">{result}</div>\n    </div>\n  );\n};\n\ntype SectionProps = {\n  id: string;\n  children: Array<React.ReactNode> | React.ReactNode;\n  label?: string;\n  description?: string;\n  isRequired?: boolean;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAIA;AACA;AAGA;AAEA;AACA;AAKA;AACA;AAGA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AAGA;AASA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACtbA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AAGA;;;;;A","sourceRoot":""}