{"version":3,"file":"scanning-modal-98171cb331264520acd8.js","sources":["webpack:///./public/components/hypercloud/modals/scanning-modal.jsx","webpack:///./public/components/hypercloud/utils/resource-list-dropdown.tsx","webpack:///./public/components/hypercloud/utils/section.tsx"],"sourcesContent":["import * as _ from 'lodash-es';\nimport { ValidTabGuard } from 'packages/kubevirt-plugin/src/components/create-vm-wizard/tabs/valid-tab-guard';\nimport * as React from 'react';\nimport { history } from '@console/internal/components/utils';\nimport { k8sCreateUrl, k8sList, referenceForModel, kindForReference } from '../../../module/k8s';\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter } from '../../factory/modal';\nimport { PromiseComponent, ResourceIcon, SelectorInput } from '../../utils';\nimport { Section } from '../utils/section';\nimport { ResourceListDropdownWithDataToolbar } from '../utils/resource-list-dropdown';\nimport { ResourceListDropdown, RegistryListDropdown } from '../../resource-dropdown';\nimport { Button, Chip, ChipGroup, ChipGroupToolbarItem } from '@patternfly/react-core';\nimport { CloseIcon } from '@patternfly/react-icons';\nimport { ResourceIcon } from '../utils';\nimport { modelFor } from '../../../module/k8s/k8s-models';\nimport { NamespaceModel } from '@console/internal/models';\nimport { withRouter } from 'react-router-dom';\nimport { oidcClientIDInput } from 'integration-tests/views/oauth.view';\n\nclass BaseScanningModal extends PromiseComponent {\n    constructor(props) {\n        super(props);\n        this._submit = this._submit.bind(this);\n        this._cancel = props.cancel.bind(this);\n\n        this.state = Object.assign(this.state, {\n            name: '',\n            dataList: [],\n            namespaces: [],\n            namespace: '',\n            resources: [],\n            resource: [],\n        });\n    }\n\n    componentDidMount() {\n        const { showNs } = this.props;\n        showNs && this.getNamespaceList();\n        const { ns } = this.props;\n        this.setState({ namespace: ns });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (!prevProps.resource && prevState.namespace !== this.state.namespace) {\n            return this.getResourceList();\n        }\n    }\n\n    async getNamespaceList() {\n        const { ns } = this.props;\n        const list = await k8sList(NamespaceModel);\n        const namespaces = list.map(item => item.metadata.name);\n        const namespace = ns || namespaces[0];\n        this.setState({ namespaces, namespace });\n    }\n\n    async getResourceList() {\n        const { kind, ns, labelSelector } = this.props;\n        const resources = await k8sList(modelFor(kind), { ns: this.state.namespace, labelSelector });\n        return this.setState({ resources });\n    }\n\n    _submit(e) {\n        e.preventDefault();\n\n        let { kind, ns, modelKind, resource, labelSelector, isExtRegistry } = this.props;\n\n        let registries;\n\n        kind = kind || resource?.kind;\n\n        let modelPlural = 'scans';\n        if (kind === 'ExternalRegistry' || modelKind?.kind === 'ExternalRegistry') {\n            isExtRegistry = true;\n        }\n\n        if (isExtRegistry) {\n            modelPlural = 'ext-scans';\n        }\n\n        if (kind === 'Registry' || modelKind?.kind === 'Registry') {\n            if (resource) {\n                registries = [{\n                    'name': resource.metadata.name,\n                    'repositories': [\n                        {\n                            'name': '*'\n                        }\n                    ]\n                }];\n            }\n            else {\n                registries = this.state.resource.map(selectedItem => ({\n                    'name': selectedItem,\n                    'repositories': [\n                        {\n                            'name': '*'\n                        }\n                    ]\n                }))\n            }\n        } else if (kind === 'ExternalRegistry' || modelKind?.kind === 'ExternalRegistry') {\n            if (resource) {\n                registries = [{\n                    'name': resource.metadata.name,\n                    'repositories': [\n                        {\n                            'name': '*'\n                        }\n                    ]\n                }];\n            }\n            else {\n                registries = this.state.resource.map(selectedItem => ({\n                    'name': selectedItem,\n                    'repositories': [\n                        {\n                            'name': '*'\n                        }\n                    ]\n                }))\n            }\n        }\n        else if (kind === 'Repository' || modelKind?.kind === 'Repository') {\n            if (resource) {\n                registries = [{\n                    'name': resource.spec.registry,\n                    'repositories': [\n                        {\n                            'name': resource.metadata.name,\n                            'versions': [\n                                '*'\n                            ]\n                        }\n                    ]\n                }];\n            }\n            else {\n                const reg = isExtRegistry ? labelSelector['ext-registry'] : labelSelector.registry;\n                registries = [{\n                    'name': reg,\n                    'repositories': this.state.resource.map(selectedItem => (\n                        {\n                            'name': selectedItem,\n                            'versions': [\n                                '*'\n                            ]\n                        }\n                    ))\n                }];\n            }\n        } else if (kind === 'Tag') {\n            registries = [{\n                'name': resource.registry,\n                'repositories': [\n                    {\n                        'name': resource.repository,\n                        'versions': [\n                            resource.version\n                        ]\n                    }\n                ]\n            }];\n        }\n\n        const data = { registries };\n\n\n        const opts = {\n            ns: (this.state.namespace !== '' && this.state.namespace) || resource.metadata?.namespace || resource.namespace,\n            plural: 'scans',\n            name: this.state.name,\n        };\n        let model = kind ? modelFor(kind) : modelKind;\n\n        model = model || { apiVersion: 'v1' };\n\n        model.apiGroup = 'registry.tmax.io';\n\n        model.plural = modelPlural;\n\n        const promise = k8sCreateUrl(model, data, opts);\n        this.handlePromise(promise)\n            .then(this.successSubmit);\n    }\n\n    successSubmit = ({ imageScanRequestName }) => {\n        const { resource } = this.props;\n\n        const namespace = resource?.metadata?.namespace || this.state.namespace || resource?.namespace;\n\n        this.props.close();\n        history.push(`/k8s/ns/${namespace}/imagescanrequests/${imageScanRequestName}`);\n    }\n\n    onChangeName = (e) => {\n        this.setState({ name: e.target.value });\n    }\n\n    onChangeNamespace = (e) => {\n        this.setState({ namespace: e.target.value });\n    }\n\n    onSelectedItemChange = (items) => {\n        const resource = [...items][0] === 'All' ? this.state.resources.map(res => res.metadata.name)\n            : [...items].map(item => this.state.resources.find(res => res.metadata.uid === item)?.metadata.name);\n        this.setState({ resource });\n    };\n\n    render() {\n        const { kind, showNs, resource, message, modelKind } = this.props;\n        const { selected, resources } = this.state;\n\n        const label = kind || modelKind?.kind || resource?.kind;\n\n        const name = resource?.metadata?.name || resource?.version;\n\n        return (\n            <form onSubmit={this._submit} name=\"form\" className=\"modal-content\">\n                <ModalTitle>Image Scan Request Creation</ModalTitle>\n                <ModalBody unsetOverflow={true}>\n                    <div className=\"row co-m-form-row\">\n                        <div className=\"col-sm-12\">\n                            {message || ''}\n                        </div>\n                    </div>\n                    <div className=\"row co-m=-form-row\">\n                        <div className=\"col-sm-12\" style={{ marginBottom: '15px' }}>\n                            <Section label=\"Name\" id=\"name\" isRequired={true}>\n                                <input className=\"pf-c-form-control\" id=\"name\" name=\"metadata.name\" onChange={this.onChangeName} value={this.state.name} />\n                            </Section>\n                        </div>\n                        {showNs && <div className=\"col-sm-12\" style={{ marginBottom: '15px' }}>\n                            <Section label=\"Namespace\" id=\"namespace\" isRequired={true}>\n                                <select className=\"col-sm-12\" value={this.state.namespace} onChange={this.onChangeNamespace}>\n                                    {this.state.namespaces.map(namespace => <option key={namespace} value={namespace}>{namespace}</option>)}\n                                </select>\n                            </Section>\n                        </div>}\n                        <div className=\"col-sm-12\">\n                            <label className={'control-label co-required'} htmlFor={label}>\n                                {label}\n                            </label>\n                            <div className=\"co-search-group\">\n                                {resource ?\n                                    <div>{name}</div> :\n                                    <ResourceListDropdownWithDataToolbar\n                                        resourceList={resources} // 필수\n                                        showAll={true} // 드롭다운에 all resource 라는 항목이 생긴다.\n                                        resourceType={label} // title, placeholder, all resources, chip group 에 적용되는 문구 (title, placeholder는 직접 지정하는 것의 우선순위가 더 높음)\n                                        autocompletePlaceholder=\"search by name\" // 검색란 placeholder\n                                        onSelectedItemChange={this.onSelectedItemChange} // 선택된 아이템 리스트 변동될 때마다 호출되는 함수\n                                    />\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </ModalBody>\n                <ModalSubmitFooter\n                    errorMessage={this.state.errorMessage}\n                    inProgress={this.state.inProgress}\n                    submitText=\"Confirm\"\n                    cancel={this._cancel}\n                />\n            </form>\n        )\n    }\n};\n\nexport const scanningModal = createModalLauncher((props) => (\n    <BaseScanningModal {...props} />\n));\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { OrderedMap } from 'immutable';\nimport * as classNames from 'classnames';\nimport * as fuzzy from 'fuzzysearch';\nimport { useFormContext } from 'react-hook-form';\n\nimport { Dropdown, ResourceIcon } from '../../utils';\nimport {\n  K8sResourceKind,\n  K8sResourceKindReference,\n} from '../../../module/k8s';\nimport { Badge, Checkbox, DataToolbar, DataToolbarContent, DataToolbarFilter, DataToolbarItem, DataToolbarChip } from '@patternfly/react-core';\n\nexport type HCK8sResourceKind = K8sResourceKind & {\n  fakeMetadata?: any;\n};\n\nconst DropdownItem: React.SFC<DropdownItemProps> = ({ resource, checked }) => (\n  <>\n    <span className={'co-resource-item'}>\n      <Checkbox\n        tabIndex={-1}\n        id={`${resource.metadata.uid}:checkbox`}\n        checked={checked}\n      />\n      <span className=\"co-resource-icon--fixed-width\">\n        <ResourceIcon kind={resource.kind} />\n      </span>\n      <span className=\"co-resource-item__resource-name\">\n        <span>\n          {resource.fakeMetadata?.fakename ?? resource.metadata.name}\n        </span>\n      </span>\n    </span>\n  </>\n);\n\ntype DropdownItemProps = {\n  resource: HCK8sResourceKind;\n  checked?: boolean;\n};\n\nexport const ResourceListDropdown: React.SFC<ResourceListDropdownProps> = (props) => {\n  const { name, required, resourceList, onChange, showAll, className, type, useHookForm } = props;\n\n  const selected = name ? props.selected : props.selected;\n\n  if (useHookForm && name) {\n    const { register, unregister, setValue } = useFormContext();\n\n    React.useEffect(() => {\n      setValue(name, selected);\n      \n    }, [selected]);\n\n    React.useEffect(() => {\n      register({ name }, { required });\n  \n      return () => {\n        unregister(name);\n      }\n    }, [name, register, unregister]);\n  }\n\n  const isSelected = (uid: string) => {\n    return _.includes(selected, 'All') || _.includes(selected, uid);\n  };\n  // Create dropdown items for each resource.\n  const items = OrderedMap(\n    _.map(resourceList, (resource) => [\n      resource.metadata.uid,\n      <DropdownItem\n        resource={resource}\n        checked={isSelected(resource.metadata.uid)} />\n    ]\n    ));\n  // Add an \"All\" item to the top if `showAll`.\n  const allItems = (showAll\n    ? OrderedMap({\n      All: (\n        <>\n          <span className=\"co-resource-item\">\n            <Checkbox id=\"all-resources\" checked={isSelected('All')} />\n            <span className=\"co-resource-icon--fixed-width\">\n              <ResourceIcon kind=\"All\" />\n            </span>\n            <span className=\"co-resource-item__resource-name\">{`All ${props.resourceType}`}</span>\n          </span>\n        </>\n      ),\n    }).concat(items)\n    : items\n  ).toJS() as { [s: string]: JSX.Element };\n\n  const autocompleteFilter = (text, item) => {\n    const { resource } = item.props;\n    if (!resource) {\n      return false;\n    }\n\n    return fuzzy(_.toLower(text), _.toLower(resource.fakeMetadata?.fakename ?? resource.metadata.name));\n  };\n\n  const autocompletePlaceholder = props.autocompletePlaceholder ?? \"Select Resource\";\n\n  return (\n    <Dropdown\n      menuClassName=\"dropdown-menu--text-wrap\"\n      className={classNames('co-type-selector', className)}\n      items={allItems}\n      title={\n        props.title ??\n        <div key=\"title-resource\">\n          {`${props.resourceType} `}\n          <Badge isRead>\n            {selected.length === 1 && selected[0] === 'All' ? 'All' : selected.length}\n          </Badge>\n        </div>\n      }\n      onChange={onChange}\n      autocompleteFilter={autocompleteFilter}\n      autocompletePlaceholder={props.autocompleteFilter ?? autocompletePlaceholder}\n      type={type}\n    />\n  );\n};\n\nexport type ResourceListDropdownProps = {\n  name?: string;\n  required?: boolean;\n  resourceList: HCK8sResourceKind[];\n  selected: K8sResourceKindReference[];\n  onChange: (value: string) => void;\n  className?: string;\n  showAll?: boolean;\n  type?: string;\n  title?: string | JSX.Element;\n  resourceType?: string;\n  autocompletePlaceholder?: string;\n  autocompleteFilter?: (text: any, item: any) => any;\n  useHookForm?: boolean;\n};\n\nResourceListDropdown.defaultProps = {\n  resourceType: \"Resources\",\n  useHookForm: false,\n};\n\nconst ResourceListDropdownWithDataToolbar_: React.SFC<ResourceListDropdownWithDataToolbarProps> = (props, ref) => {\n  const { resourceList } = props;\n  const [selectedItems, setSelectedItems] = React.useState(new Set<string>([]));\n\n  const allItems = new Set<string>(resourceList.map(resource => resource.metadata.uid));\n\n  React.useEffect(()=>{\n    props.onSelectedItemChange?.(selectedItems);\n  }, [selectedItems]);\n\n  const updateSelectedItems = (selection: string) => {\n    if (selection === 'All') {\n      selectedItems.has(selection) ? clearSelectedItems() : selectAllItems();\n    } else {\n      if (selectedItems.has('All')) {\n        const updateItems = new Set(allItems);\n        updateItems.delete(selection);\n        setSelectedItems(updateItems);\n      } else {\n        const updateItems = new Set(selectedItems);\n        updateItems.has(selection) ? updateItems.delete(selection) : updateItems.add(selection);\n        updateItems.size === resourceList.length ? selectAllItems() : setSelectedItems(updateItems);\n      }\n    }\n  };\n\n  const updateNewItems = (filter: string, { key }: DataToolbarChip) => {\n    updateSelectedItems(key);\n  };\n\n  const selectAllItems = () => {\n    setSelectedItems(new Set(['All']));\n  }\n\n  const clearSelectedItems = () => {\n    setSelectedItems(new Set([]));\n  };\n\n  const clearAll = () => {\n    clearSelectedItems();\n  };\n\n  return (\n    <DataToolbar id=\"search-toolbar\" clearAllFilters={clearAll} clearFiltersButtonText={`Clear all ${props.resourceType}`}>\n      <DataToolbarContent>\n        <DataToolbarItem>\n          <DataToolbarFilter\n            deleteChipGroup={clearSelectedItems}\n            chips={[...selectedItems].map(uid => {\n              const item = resourceList.find(i => i.metadata.uid === uid);\n              return {\n                key: uid,\n                node: (\n                  <>\n                    <ResourceIcon kind={item?.kind ?? uid} />\n                    {item?.fakeMetadata?.fakename ?? item?.metadata.name ?? uid}\n                  </>\n                ),\n              }\n            })}\n            deleteChip={updateNewItems}\n            categoryName={props.resourceType}\n          >\n            <ResourceListDropdown\n              resourceList={resourceList}\n              selected={[...selectedItems]}\n              onChange={updateSelectedItems}\n              type=\"multiple\"\n              {...props}\n            />\n          </DataToolbarFilter>\n        </DataToolbarItem>\n      </DataToolbarContent>\n    </DataToolbar>)\n};\n\nexport const ResourceListDropdownWithDataToolbar = React.forwardRef(ResourceListDropdownWithDataToolbar_);\n\nexport type ResourceListDropdownWithDataToolbarProps = {\n  name?: string;\n  required?: boolean;\n  resourceList: HCK8sResourceKind[];\n  className?: string;\n  showAll?: boolean;\n  title?: string | JSX.Element;\n  resourceType?: string;\n  autocompletePlaceholder?: string;\n  autocompleteFilter?: (text: any, item: any) => any;\n  onSelectedItemChange?: (items: Set<string>) => any;\n  useHookForm?: boolean;\n};\n\nResourceListDropdownWithDataToolbar.defaultProps = {\n  resourceType: \"Resources\",\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\n\nconst Node = ({ className, children, description }) => (\n  <div className={className}>\n    <div>{children}</div>\n    <p className=\"help-block\">{description}</p>\n  </div>\n);\n\nconst CombineNodes = (id, label, description, children, isRequired) => {\n  // children node 개수에 따라 가로 분할 class 적용\n  let isArray = Array.isArray(children);\n  let className = isArray ? `col-md-${12 / children.length}` : 'col-md-12';\n  return isArray ? children.map(cur => <Node className={className} children={cur} description={description} />) : <Node className={className} children={children} description={description} />;\n};\n\nexport const Section: React.FC<SectionProps> = ({ id, label, description, children, isRequired = false }) => {\n  let result = CombineNodes(id, label, description, children, isRequired);\n  return (\n    <div className=\"form-group\">\n      <label className={'control-label ' + (isRequired ? 'co-required' : '')} htmlFor={id}>\n        {label}\n      </label>\n      <div className=\"row\">{result}</div>\n    </div>\n  );\n};\n\ntype SectionProps = {\n  id: string;\n  children: Array<React.ReactNode> | React.ReactNode;\n  label?: string;\n  description?: string;\n  isRequired?: boolean;\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAIA;AACA;AACA;AAqKA;;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAzyBA;;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAGA;AACA;AACA;AAKA;AACA;AAGA;AAEA;AACA;AAKA;AAOA;AAQA;AACA;AAAA;AAEA;;;;;;;;;;;;;AC5QA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAMA;;AAAA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AAMA;AAOA;;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAGA;;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAQA;AACA;AAWA;AAkBA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAIA;AAWA;AAEA;AAgBA;AACA;AACA;;;;;;;;;;;;;AClPA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAGA;;;;;A","sourceRoot":""}