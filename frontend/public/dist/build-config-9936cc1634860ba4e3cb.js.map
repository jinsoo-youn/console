{"version":3,"file":"build-config-9936cc1634860ba4e3cb.js","sources":["webpack:///./public/components/build-config.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { K8sResourceKind, K8sResourceKindReference, referenceFor } from '../module/k8s';\nimport { startBuild } from '../module/k8s/builds';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from './factory';\nimport { errorModal } from './modals';\nimport {\n  BuildHooks,\n  BuildStrategy,\n  history,\n  Kebab,\n  KebabAction,\n  LabelList,\n  navFactory,\n  ResourceKebab,\n  ResourceLink,\n  resourceObjPath,\n  ResourceSummary,\n  SectionHeading,\n  Timestamp,\n  WebhookTriggers,\n} from './utils';\nimport {\n  BuildsPage,\n  BuildEnvironmentComponent,\n  BuildStrategyType,\n  PipelineBuildStrategyAlert,\n} from './build';\nimport { ResourceEventStream } from './events';\nimport { BuildConfigModel } from '../models';\n\nconst BuildConfigsReference: K8sResourceKindReference = 'BuildConfig';\n\nconst startBuildAction: KebabAction = (kind, buildConfig) => ({\n  label: 'Start Build',\n  callback: () =>\n    startBuild(buildConfig)\n      .then((build) => {\n        history.push(resourceObjPath(build, referenceFor(build)));\n      })\n      .catch((err) => {\n        const error = err.message;\n        errorModal({ error });\n      }),\n  accessReview: {\n    group: kind.apiGroup,\n    resource: kind.plural,\n    subresource: 'instantiate',\n    name: buildConfig.metadata.name,\n    namespace: buildConfig.metadata.namespace,\n    verb: 'create',\n  },\n});\n\nconst menuActions = [\n  startBuildAction,\n  ...Kebab.getExtensionsActionsForKind(BuildConfigModel),\n  ...Kebab.factory.common,\n];\n\nexport const BuildConfigsDetails: React.SFC<BuildConfigsDetailsProps> = ({ obj: buildConfig }) => {\n  const hasPipeline = buildConfig.spec.strategy.type === BuildStrategyType.JenkinsPipeline;\n\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        {hasPipeline && <PipelineBuildStrategyAlert obj={buildConfig} />}\n        <SectionHeading text=\"Build Config Details\" />\n        <div className=\"row\">\n          <div className=\"col-sm-6\">\n            <ResourceSummary resource={buildConfig} />\n          </div>\n          <div className=\"col-sm-6\">\n            <BuildStrategy resource={buildConfig} />\n          </div>\n        </div>\n      </div>\n      <WebhookTriggers resource={buildConfig} />\n      <BuildHooks resource={buildConfig} />\n    </>\n  );\n};\n\nconst BuildsTabPage = ({ obj: buildConfig }) => (\n  <BuildsPage\n    namespace={buildConfig.metadata.namespace}\n    showTitle={false}\n    selector={{ 'openshift.io/build-config.name': buildConfig.metadata.name }}\n  />\n);\n\nconst pages = [\n  navFactory.details(BuildConfigsDetails),\n  navFactory.editYaml(),\n  navFactory.builds(BuildsTabPage),\n  navFactory.envEditor(BuildEnvironmentComponent),\n  navFactory.events(ResourceEventStream),\n];\n\nexport const BuildConfigsDetailsPage: React.SFC<BuildConfigsDetailsPageProps> = (props) => (\n  <DetailsPage {...props} kind={BuildConfigsReference} menuActions={menuActions} pages={pages} />\n);\nBuildConfigsDetailsPage.displayName = 'BuildConfigsDetailsPage';\n\nconst tableColumnClasses = [\n  classNames('col-sm-3', 'col-xs-6'),\n  classNames('col-sm-3', 'col-xs-6'),\n  classNames('col-sm-3', 'hidden-xs'),\n  classNames('col-sm-3', 'hidden-xs'),\n  Kebab.columnClass,\n];\n\nconst BuildConfigsTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Labels',\n      sortField: 'metadata.labels',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Created',\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[4] },\n    },\n  ];\n};\nBuildConfigsTableHeader.displayName = 'BuildConfigsTableHeader';\n\nconst BuildConfigsTableRow: RowFunction<K8sResourceKind> = ({ obj, index, key, style }) => {\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={BuildConfigsReference}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n          title={obj.metadata.name}\n        />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <LabelList kind={BuildConfigsReference} labels={obj.metadata.labels} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <Timestamp timestamp={obj.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <ResourceKebab actions={menuActions} kind={BuildConfigsReference} resource={obj} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst buildStrategy = (buildConfig: K8sResourceKind): BuildStrategyType =>\n  buildConfig.spec.strategy.type;\n\nconst allStrategies = [\n  BuildStrategyType.Docker,\n  BuildStrategyType.JenkinsPipeline,\n  BuildStrategyType.Source,\n  BuildStrategyType.Custom,\n];\nconst filters = [\n  {\n    filterGroupName: 'Build Strategy',\n    type: 'build-strategy',\n    reducer: buildStrategy,\n    items: _.map(allStrategies, (strategy) => ({\n      id: strategy,\n      title: strategy,\n    })),\n  },\n];\n\nexport const BuildConfigsList: React.SFC = (props) => (\n  <Table\n    {...props}\n    aria-label=\"Build Configs\"\n    Header={BuildConfigsTableHeader}\n    Row={BuildConfigsTableRow}\n    virtualize\n  />\n);\n\nBuildConfigsList.displayName = 'BuildConfigsList';\n\nexport const BuildConfigsPage: React.SFC<BuildConfigsPageProps> = (props) => (\n  <ListPage\n    {...props}\n    title=\"Build Configs\"\n    kind={BuildConfigsReference}\n    ListComponent={BuildConfigsList}\n    canCreate={true}\n    filterLabel={props.filterLabel}\n    rowFilters={filters}\n  />\n);\nBuildConfigsPage.displayName = 'BuildConfigsListPage';\n\nexport type BuildConfigsDetailsProps = {\n  obj: K8sResourceKind;\n};\n\nexport type BuildConfigsPageProps = {\n  filterLabel?: string;\n  mock?: boolean;\n};\n\nexport type BuildConfigsDetailsPageProps = {\n  match: any;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgBA;AAMA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAGA;AAEA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAOA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;AAEA;AAWA;;;;;A","sourceRoot":""}