{"version":3,"file":"alert-manager-c6a16575c308f2d18a18.js","sources":["webpack:///./public/components/alert-manager.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { Button } from '@patternfly/react-core';\nimport { PencilAltIcon } from '@patternfly/react-icons';\n\nimport { referenceForModel, K8sResourceKind } from '../module/k8s';\nimport { ListPage, DetailsPage, Table, TableRow, TableData, RowFunction } from './factory';\nimport { SectionHeading, LabelList, navFactory, ResourceLink, Selector, pluralize } from './utils';\nimport { configureReplicaCountModal } from './modals';\nimport { AlertmanagerModel } from '../models';\n\nconst Details: React.SFC<DetailsProps> = (props) => {\n  const alertManager = props.obj;\n  const { metadata, spec } = alertManager;\n\n  const openReplicaCountModal = (event) => {\n    event.preventDefault();\n    event.target.blur();\n    configureReplicaCountModal({ resourceKind: AlertmanagerModel, resource: alertManager });\n  };\n\n  return (\n    <div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Alert Manager Details\" />\n        <div className=\"row\">\n          <div className=\"col-sm-6 col-xs-12\">\n            <dl className=\"co-m-pane__details\">\n              <dt>Name</dt>\n              <dd>{metadata.name}</dd>\n              <dt>Labels</dt>\n              <dd>\n                <LabelList kind=\"Alertmanager\" labels={metadata.labels} />\n              </dd>\n              {spec.nodeSelector && <dt>Alert Manager Node Selector</dt>}\n              {spec.nodeSelector && (\n                <dd>\n                  <Selector selector={spec.nodeSelector} kind=\"Node\" />\n                </dd>\n              )}\n            </dl>\n          </div>\n          <div className=\"col-sm-6 col-xs-12\">\n            <dl className=\"co-m-pane__details\">\n              <dt>Version</dt>\n              <dd>{spec.version}</dd>\n              <dt>Replicas</dt>\n              <dd>\n                <Button variant=\"link\" type=\"button\" isInline onClick={openReplicaCountModal}>\n                  {pluralize(spec.replicas, 'pod')}\n                  <PencilAltIcon className=\"co-icon-space-l pf-c-button-icon--plain\" />\n                </Button>\n              </dd>\n            </dl>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nconst { details, editYaml } = navFactory;\n\nexport const AlertManagersDetailsPage = (props) => (\n  <DetailsPage {...props} pages={[details(Details), editYaml()]} />\n);\n\nconst tableColumnClasses = [\n  classNames('col-md-2', 'col-sm-3', 'col-xs-6'),\n  classNames('col-md-2', 'col-sm-3', 'col-xs-6'),\n  classNames('col-md-3', 'col-sm-3', 'hidden-xs'),\n  classNames('col-md-2', 'hidden-sm', 'hidden-xs'),\n  classNames('col-md-3', 'col-sm-3', 'hidden-xs'),\n];\n\nconst AlertManagerTableRow: RowFunction<K8sResourceKind> = ({\n  obj: alertManager,\n  index,\n  key,\n  style,\n}) => {\n  const { metadata, spec } = alertManager;\n  return (\n    <TableRow id={alertManager.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={referenceForModel(AlertmanagerModel)}\n          name={metadata.name}\n          namespace={metadata.namespace}\n          title={metadata.uid}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[1]}>\n        <ResourceLink kind=\"Namespace\" name={metadata.namespace} title={metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <LabelList kind={AlertmanagerModel.kind} labels={metadata.labels} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>{spec.version}</TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <Selector selector={spec.nodeSelector} kind=\"Node\" />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst AlertManagerTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Labels',\n      sortField: 'metadata.labels',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Version',\n      sortField: 'spec.version',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: 'Node Selector',\n      sortField: 'spec.nodeSelector',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n  ];\n};\nAlertManagerTableHeader.displayName = 'AlertManagerTableHeader';\n\nconst AlertManagersList = (props) => (\n  <Table\n    {...props}\n    aria-label=\"Alert Managers\"\n    Header={AlertManagerTableHeader}\n    Row={AlertManagerTableRow}\n    virtualize\n  />\n);\n\nexport const AlertManagersPage = (props) => (\n  <ListPage\n    {...props}\n    ListComponent={AlertManagersList}\n    canCreate={false}\n    kind={referenceForModel(AlertmanagerModel)}\n  />\n);\n\ntype DetailsProps = {\n  obj: K8sResourceKind;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AAEA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AAEA;AACA;AAOA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;;;;;A","sourceRoot":""}