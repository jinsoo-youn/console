{"version":3,"file":"persistent-volume-claim-163f2b2e21bbc4fc44bd.js","sources":["webpack:///./public/components/persistent-volume-claim.jsx"],"sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\n\nimport { Status, FLAGS } from '@console/shared';\nimport { connectToFlags } from '../reducers/features';\nimport { Conditions } from './conditions';\nimport { DetailsPage, ListPage, Table, TableRow, TableData } from './factory';\nimport {\n  Kebab,\n  navFactory,\n  ResourceKebab,\n  SectionHeading,\n  ResourceLink,\n  ResourceSummary,\n  Selector,\n} from './utils';\nimport { ResourceEventStream } from './events';\nimport { PersistentVolumeClaimModel } from '../models';\nimport { ResourceLabel } from '../models/hypercloud/resource-plural';\n\nconst { common, ExpandPVC } = Kebab.factory;\nconst menuActions = [\n  ...Kebab.getExtensionsActionsForKind(PersistentVolumeClaimModel),\n  ExpandPVC,\n  ...common,\n];\n\nconst PVCStatus = ({ pvc }) => (\n  <Status status={pvc.metadata.deletionTimestamp ? 'Terminating' : pvc.status.phase} />\n);\n\nconst tableColumnClasses = [\n  '', // name\n  '', // namespace\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'), // status\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'), // persistence volume\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'), // capacity\n  classNames('pf-m-hidden', 'pf-m-visible-on-2xl'), // storage class\n  Kebab.columnClass,\n];\n\nconst PVCTableHeader = (t) => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_2'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_3'),\n      sortField: 'status.phase',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_29'),\n      sortField: 'spec.volumeName',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_14'),\n      sortFunc: 'pvcStorage',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_63'), // 이거 쓰는거 맞나..\n      sortField: 'spec.storageClassName',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[5] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[6] },\n    },\n  ];\n};\nPVCTableHeader.displayName = 'PVCTableHeader';\n\nconst kind = 'PersistentVolumeClaim';\n\nconst PVCTableRow = ({ obj, index, key, style }) => {\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={kind}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n          title={obj.metadata.name}\n        />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink\n          kind=\"Namespace\"\n          name={obj.metadata.namespace}\n          title={obj.metadata.namespace}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <PVCStatus pvc={obj} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        {_.get(obj, 'spec.volumeName') ? (\n          <ResourceLink\n            kind=\"PersistentVolume\"\n            name={obj.spec.volumeName}\n            title={obj.spec.volumeName}\n          />\n        ) : (\n            <div className=\"text-muted\">No Persistent Volume</div>\n          )}\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        {_.get(obj, 'status.capacity.storage', '-')}\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[5])}>\n        {obj?.spec?.storageClassName ? (\n          <ResourceLink\n            kind=\"StorageClass\"\n            name={obj.spec.storageClassName}\n            title={obj.spec.storageClassName}\n          />\n        ) : (\n            '-'\n          )}\n      </TableData>\n      <TableData className={tableColumnClasses[6]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={obj} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst Details_ = ({ flags, obj: pvc }) => {\n  const { t } = useTranslation();\n  \n  const canListPV = flags[FLAGS.CAN_LIST_PV];\n  const labelSelector = _.get(pvc, 'spec.selector');\n  const storageClassName = _.get(pvc, 'spec.storageClassName');\n  const volumeName = _.get(pvc, 'spec.volumeName');\n  const storage = _.get(pvc, 'status.capacity.storage');\n  const accessModes = _.get(pvc, 'status.accessModes');\n  const volumeMode = _.get(pvc, 'spec.volumeMode');\n  const conditions = _.get(pvc, 'status.conditions');\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n      <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', {0: ResourceLabel(pvc, t)})} />\n        <div className=\"row\">\n          <div className=\"col-sm-6\">\n            <ResourceSummary resource={pvc}>\n              <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_38')}</dt>\n              <dd data-test-id=\"pvc-name\">\n                <Selector selector={labelSelector} kind=\"PersistentVolume\" />\n              </dd>\n            </ResourceSummary>\n          </div>\n          <div className=\"col-sm-6\">\n            <dl>\n              <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_45')}</dt>\n              <dd data-test-id=\"pvc-status\">\n                <PVCStatus pvc={pvc} />\n              </dd>\n              {storage && (\n                <>\n                  <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_60')}</dt>\n                  <dd data-test-id=\"pvc-capacity\">{storage}</dd>\n                </>\n              )}\n              {!_.isEmpty(accessModes) && (\n                <>\n                  <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_61')}</dt>\n                  <dd data-test-id=\"pvc-access-mode\">{accessModes.join(', ')}</dd>\n                </>\n              )}\n              <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_62')}</dt>\n              <dd data-test-id=\"pvc-volume-mode\">{volumeMode || 'Filesystem'}</dd>\n              <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_63')}</dt>\n              <dd data-test-id=\"pvc-storageclass\">\n                {storageClassName ? (\n                  <ResourceLink kind=\"StorageClass\" name={storageClassName} />\n                ) : (\n                    '-'\n                  )}\n              </dd>\n              {volumeName && canListPV && (\n                <>\n                  <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_64')}</dt>\n                  <dd data-test-id=\"persistent-volume\">\n                    <ResourceLink kind=\"PersistentVolume\" name={volumeName} />\n                  </dd>\n                </>\n              )}\n            </dl>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst Details = connectToFlags(FLAGS.CAN_LIST_PV)(Details_);\n\nconst allPhases = ['Pending', 'Bound', 'Lost'];\nconst filters = (t) => [\n  {\n    filterGroupName: t('COMMON:MSG_COMMON_FILTER_10'),\n    type: 'pvc-status',\n    reducer: (pvc) => pvc.status.phase,\n    items: _.map(allPhases, (phase) => ({\n      id: phase,\n      title: phase,\n    })),\n  },\n];\n\nexport const PersistentVolumeClaimsList = (props) => {\n  const { t } = useTranslation();\n  return <Table\n      {...props}\n      aria-label=\"Persistent Volume Claims\"\n      Header={PVCTableHeader.bind(null, t)}\n      Row={PVCTableRow}\n      virtualize\n    />;\n};\n\nexport const PersistentVolumeClaimsPage = (props) => {\n  const { t } = useTranslation();\n  return (\n    <ListPage\n      {...props}\n      ListComponent={PersistentVolumeClaimsList}\n      kind={kind}\n      title={t('COMMON:MSG_LNB_MENU_52')}\n      createButtonText={t('COMMON:MSG_MAIN_CREATEBUTTON_1', { 0: t('COMMON:MSG_LNB_MENU_52') })} \n      canCreate={true}\n      rowFilters={filters.bind(null, t)()}\n    />\n  );\n};\nexport const PersistentVolumeClaimsDetailsPage = (props) => (\n  <DetailsPage\n    {...props}\n    menuActions={menuActions}\n    pages={[\n      navFactory.details(Details),\n      navFactory.editYaml(),\n      navFactory.events(ResourceEventStream),\n    ]}\n  />\n);\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AACA;AAEA;AACA;AAOA;AACA;AAMA;AACA;AAEA;AAWA;AAGA;AAWA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AAUA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAOA;AAEA;AACA;AACA;AAWA;AACA;AAKA;AACA;AACA;AACA;;;;;A","sourceRoot":""}