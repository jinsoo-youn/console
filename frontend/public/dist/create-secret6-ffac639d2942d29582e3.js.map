{"version":3,"file":"create-secret6-ffac639d2942d29582e3.js","sources":["webpack:///./public/components/hypercloud/form/tasks/create-task.tsx","webpack:///./public/components/hypercloud/form/tasks/input-resource-modal.tsx","webpack:///./public/components/hypercloud/form/tasks/output-resource-modal.tsx","webpack:///./public/components/hypercloud/form/tasks/step-modal.tsx","webpack:///./public/components/hypercloud/form/tasks/task-parameter-modal.tsx","webpack:///./public/components/hypercloud/form/tasks/volume-modal.tsx","webpack:///./public/components/hypercloud/form/tasks/work-space-modal.tsx","webpack:///./public/components/hypercloud/form/utils/index.tsx","webpack:///./public/components/hypercloud/form/utils/modal-launcher.tsx","webpack:///./public/components/hypercloud/form/utils/modal-list.tsx","webpack:///./public/components/hypercloud/utils/section.tsx","webpack:///./public/components/hypercloud/utils/text-input.tsx"],"sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { match as RMatch } from 'react-router';\nimport { useFormContext, Controller } from 'react-hook-form';\nimport { WithCommonForm } from '../create-form';\nimport { Section } from '../../utils/section';\n// import { TextInput } from '../../utils/text-input';\nimport { SelectorInput } from '../../../utils';\nimport { ModalLauncher, ModalList } from '../utils';\nimport { InputResourceModal } from './input-resource-modal';\nimport { OutputResourceModal } from './output-resource-modal';\nimport { TaskParameterModal } from './task-parameter-modal';\nimport { WorkSpaceModal } from './work-space-modal';\nimport { VolumeModal } from './volume-modal';\nimport { StepModal } from './step-modal';\nconst defaultValues = {\n  metadata: {\n    name: 'example-name',\n  },\n};\n\nconst taskFormFactory = params => {\n  return WithCommonForm(CreateTaskComponent, params, defaultValues);\n};\n\nconst CreateTaskComponent: React.FC<TaskFormProps> = props => {\n  const methods = useFormContext();\n  const { control, register, setValue } = methods;\n  const [inputResource, setInputResource] = React.useState([]);\n  const [outputResource, setOutputResource] = React.useState([]);\n  const [taskParameter, setTaskParameter] = React.useState([]);\n  const [workSpace, setWorkSpace] = React.useState([]);\n  const [volume, setVolume] = React.useState([]);\n  const [step, setStep] = React.useState([]);\n\n  React.useEffect(() => {\n    register('input_resource');\n    register('output_resource');\n    register('task_parameter');\n    register('work_space');\n    register('volume');\n    register('step');\n  }, [register]);\n\n  React.useMemo(() => {\n    setValue('input_resource', inputResource);\n  }, [inputResource]);\n\n  React.useMemo(() => {\n    setValue('output_resource', outputResource);\n  }, [outputResource]);\n\n  React.useMemo(() => {\n    setValue('task_parameter', taskParameter);\n  }, [taskParameter]);\n\n  React.useMemo(() => {\n    setValue('work_space', workSpace);\n  }, [workSpace]);\n\n  React.useMemo(() => {\n    setValue('volume', volume);\n  }, [volume]);\n\n  React.useMemo(() => {\n    setValue('step', step);\n  }, [step]);\n\n  // INPUT RESOURCE\n  const onAddInputResource = (cancel, index, e: React.SyntheticEvent) => {\n    e.preventDefault();\n    let data = methods.getValues(); // modal에서 입력받은 data\n    let currInputResource = { name: data.name, path: data.path, type: data.type, option: data.option };\n    setInputResource(() => {\n      return [...inputResource, currInputResource];\n    }); // state 최신화\n    cancel();\n    return false;\n  };\n  const onRemoveInputResource = e => {\n    let currInputResource = inputResource.filter((cur, idx) => {\n      let targetIndex = Number(e.target.id.split('item-remove')[1]);\n      return targetIndex !== idx;\n    });\n    setInputResource([...currInputResource]);\n  };\n  const onModifyInputResource = (cancel, index, e: React.SyntheticEvent) => {\n    e.preventDefault();\n    let list = document.getElementById('input-resource-list').childNodes;\n    list.forEach(cur => {\n      if (cur['dataset']['modify'] === 'true') {\n        cur['dataset']['modify'] = false;\n      }\n    });\n\n    let data = methods.getValues(); // modal에서 입력받은 data\n    let currInputResource = inputResource.map((cur, idx) => {\n      if (idx === index) {\n        return { name: data.name, path: data.path, type: data.type, option: data.option };\n      }\n      return cur;\n    });\n    setInputResource([...currInputResource]);\n    cancel();\n  };\n\n  // OUTPUT RESOURCE\n  const onAddOutputResource = (cancel, index, e: React.SyntheticEvent) => {\n    e.preventDefault();\n    let data = methods.getValues(); // modal에서 입력받은 data\n    let currOutputResource = { name: data.name, path: data.path, type: data.type, option: data.option };\n    setOutputResource(() => {\n      return [...outputResource, currOutputResource];\n    }); // state 최신화\n    cancel();\n    return false;\n  };\n  const onRemoveOutputResource = e => {\n    let currOutputResource = outputResource.filter((cur, idx) => {\n      let targetIndex = Number(e.target.id.split('item-remove')[1]);\n      return targetIndex !== idx;\n    });\n    setOutputResource([...currOutputResource]);\n  };\n  const onModifyOutputResource = (cancel, index, e: React.SyntheticEvent) => {\n    e.preventDefault();\n\n    let list = document.getElementById('output-resource-list').childNodes;\n    list.forEach(cur => {\n      if (cur['dataset']['modify'] === 'true') {\n        cur['dataset']['modify'] = false;\n      }\n    });\n\n    let data = methods.getValues(); // modal에서 입력받은 data\n    let currOutputResource = outputResource.map((cur, idx) => {\n      if (idx === index) {\n        return { name: data.name, path: data.path, type: data.type, option: data.option };\n      }\n      return cur;\n    });\n    setOutputResource([...currOutputResource]);\n    cancel();\n  };\n\n  // TASK PARAMETER\n  const onAddTaskParameter = (cancel, index, e: React.SyntheticEvent) => {\n    e.preventDefault();\n    let data = methods.getValues(); // modal에서 입력받은 data\n    let currTaskParameter = { name: data.name, description: data.description, type: data.type, default: data.default };\n    setTaskParameter(() => {\n      return [...taskParameter, currTaskParameter];\n    }); // state 최신화\n    cancel();\n    return false;\n  };\n  const onRemoveTaskParameter = e => {\n    let currTaskParameter = taskParameter.filter((cur, idx) => {\n      let targetIndex = Number(e.target.id.split('item-remove')[1]);\n      return targetIndex !== idx;\n    });\n    setTaskParameter([...currTaskParameter]);\n  };\n  const onModifyTaskParameter = (cancel, index, e: React.SyntheticEvent) => {\n    e.preventDefault();\n\n    let list = document.getElementById('task-parameter-list').childNodes;\n    list.forEach(cur => {\n      if (cur['dataset']['modify'] === 'true') {\n        cur['dataset']['modify'] = false;\n      }\n    });\n\n    let data = methods.getValues(); // modal에서 입력받은 data\n    let currTaskParameter = taskParameter.map((cur, idx) => {\n      if (idx === index) {\n        return { name: data.name, description: data.description, type: data.type, default: data.default };\n      }\n      return cur;\n    });\n    setTaskParameter([...currTaskParameter]);\n    cancel();\n  };\n\n  // WORKSPACE\n  const onAddWorkSpace = (cancel, index, e: React.SyntheticEvent) => {\n    e.preventDefault();\n    let data = methods.getValues(); // modal에서 입력받은 data\n    let currWorkSpace = { name: data.name, description: data.description, path: data.path, accessMode: data.accessMode, option: data.option };\n    setWorkSpace(() => {\n      return [...workSpace, currWorkSpace];\n    }); // state 최신화\n    cancel();\n    return false;\n  };\n  const onRemoveWorkSpace = e => {\n    let currWorkSpace = workSpace.filter((cur, idx) => {\n      let targetIndex = Number(e.target.id.split('item-remove')[1]);\n      return targetIndex !== idx;\n    });\n    setWorkSpace([...currWorkSpace]);\n  };\n  const onModifyWorkSpace = (cancel, index, e: React.SyntheticEvent) => {\n    e.preventDefault();\n\n    let list = document.getElementById('work-space-list').childNodes;\n    list.forEach(cur => {\n      if (cur['dataset']['modify'] === 'true') {\n        cur['dataset']['modify'] = false;\n      }\n    });\n\n    let data = methods.getValues(); // modal에서 입력받은 data\n    let currWorkSpace = workSpace.map((cur, idx) => {\n      if (idx === index) {\n        return { name: data.name, path: data.path, type: data.type, option: data.option };\n      }\n      return cur;\n    });\n    setWorkSpace([...currWorkSpace]);\n    cancel();\n  };\n\n  // VOLUME\n  const onAddVolume = (cancel, index, e: React.SyntheticEvent) => {\n    e.preventDefault();\n    let data = methods.getValues(); // modal에서 입력받은 data\n    let currVolume = { name: data.name, type: data.type };\n    if (currVolume.type === 'secret') {\n      currVolume['secret'] = data['secret'];\n      delete currVolume['configMap'];\n    } else if (currVolume.type === 'configMap') {\n      currVolume['configMap'] = data['config_map'];\n      delete currVolume['secret'];\n    }\n    setVolume(() => {\n      return [...volume, currVolume];\n    }); // state 최신화\n    cancel();\n    return false;\n  };\n  const onRemoveVolume = e => {\n    let currVolume = volume.filter((cur, idx) => {\n      let targetIndex = Number(e.target.id.split('item-remove')[1]);\n      return targetIndex !== idx;\n    });\n    setVolume([...currVolume]);\n  };\n  const onModifyVolume = (cancel, index, e: React.SyntheticEvent) => {\n    e.preventDefault();\n\n    let list = document.getElementById('volume-list').childNodes;\n    list.forEach(cur => {\n      if (cur['dataset']['modify'] === 'true') {\n        cur['dataset']['modify'] = false;\n      }\n    });\n\n    let data = methods.getValues(); // modal에서 입력받은 data\n    let currVolume = volume.map((cur, idx) => {\n      if (idx === index) {\n        let volume = { name: data.name, type: data.type };\n        if (volume.type === 'secret') {\n          volume['secret'] = data.secret;\n          delete volume['configMap'];\n        } else if (volume.type === 'configMap') {\n          volume['configMap'] = data['config_map'];\n          delete volume['secret'];\n        }\n        return volume;\n      }\n      return cur;\n    });\n    setVolume([...currVolume]);\n    cancel();\n  };\n\n  // STEP\n  const onAddStep = (cancel, index, e: React.SyntheticEvent) => {\n    e.preventDefault();\n    let data = methods.getValues(); // modal에서 입력받은 data\n    let currStep = { name: data.name, manualImage: data.manualImage, manualCommand: data.manualCommand };\n    setStep(() => {\n      return [...step, currStep];\n    }); // state 최신화\n    cancel();\n    return false;\n  };\n  const onRemoveStep = e => {\n    let currStep = step.filter((cur, idx) => {\n      let targetIndex = Number(e.target.id.split('item-remove')[1]);\n      return targetIndex !== idx;\n    });\n    setStep([...currStep]);\n  };\n  const onModifyStep = (cancel, index, e: React.SyntheticEvent) => {\n    e.preventDefault();\n    let data = methods.getValues(); // modal에서 입력받은 data\n    let currStep = step.map((cur, idx) => {\n      if (idx === index) {\n        return { name: data.name, path: data.path, type: data.type, option: data.option };\n      }\n      return cur;\n    });\n    setStep([...currStep]);\n    cancel();\n  };\n\n  return (\n    <>\n      <Section label=\"Labels\" id=\"label\" description=\"이것은 Label입니다.\">\n        <Controller name=\"metadata.labels\" id=\"label\" labelClassName=\"co-text-sample\" as={SelectorInput} control={control} tags={[]} />\n      </Section>\n      <Section label=\"Input Resource\" id=\"inputResource\">\n        <>\n          <ModalList list={inputResource} id=\"input-resource\" title=\"Input Resource\" children={<InputResourceModal methods={methods} inputResource={inputResource} />} onRemove={onRemoveInputResource} onModify={onModifyInputResource} methods={methods} description=\"이 태스크와 연결된 인풋 리소스가 없습니다.\"></ModalList>\n          <span className=\"open-modal_text\" onClick={() => ModalLauncher({ inProgress: false, title: 'Input Resource', id: 'input-resource', handleMethod: onAddInputResource, children: <InputResourceModal methods={methods} inputResource={inputResource} />, submitText: '추가' })}>\n            + 인풋 리소스 추가\n          </span>\n        </>\n      </Section>\n      <Section label=\"Output Resource\" id=\"outputResource\">\n        <>\n          <ModalList list={outputResource} id=\"output-resource\" title=\"Output Resource\" children={<OutputResourceModal methods={methods} outputResource={outputResource} />} onRemove={onRemoveOutputResource} onModify={onModifyOutputResource} methods={methods} description=\"이 태스크와 연결된 아웃풋 리소스가 없습니다.\"></ModalList>\n          <span className=\"open-modal_text\" onClick={() => ModalLauncher({ inProgress: false, title: 'Out Resource', id: 'output-resource', handleMethod: onAddOutputResource, children: <OutputResourceModal methods={methods} outputResource={outputResource} />, submitText: '추가' })}>\n            + 아웃풋 리소스 추가\n          </span>\n        </>\n      </Section>\n      <Section label=\"태스크 파라미터 구성\" id=\"taskParamter\">\n        <>\n          <ModalList list={taskParameter} id=\"task-parameter\" title=\"태스크 파라미터 구성\" children={<TaskParameterModal methods={methods} taskParameter={taskParameter} />} onRemove={onRemoveTaskParameter} onModify={onModifyTaskParameter} methods={methods} description=\"이 태스크와 연결된 태스크 파라미터 구성이 없습니다.\"></ModalList>\n          <span className=\"open-modal_text\" onClick={() => ModalLauncher({ inProgress: false, title: '태스크 파라미터', id: 'task-parameter', handleMethod: onAddTaskParameter, children: <TaskParameterModal methods={methods} taskParameter={taskParameter} />, submitText: '추가' })}>\n            + 태스크 파라미터 추가\n          </span>\n        </>\n      </Section>\n      <Section label=\"워크스페이스 구성\" id=\"workSpace\">\n        <>\n          <ModalList list={workSpace} id=\"work-space\" title=\"워크스페이스 구성\" children={<WorkSpaceModal methods={methods} workSpace={workSpace} />} onRemove={onRemoveWorkSpace} onModify={onModifyWorkSpace} methods={methods} description=\"이 태스크와 연결된 워크스페이스 구성이 없습니다.\"></ModalList>\n          <span className=\"open-modal_text\" onClick={() => ModalLauncher({ inProgress: false, title: '워크스페이스', id: 'work-space', handleMethod: onAddWorkSpace, children: <WorkSpaceModal methods={methods} workSpace={workSpace} />, submitText: '추가' })}>\n            + 워크스페이스 추가\n          </span>\n        </>\n      </Section>\n      <Section label=\"볼륨\" id=\"volume\">\n        <>\n          <ModalList list={volume} id=\"volume\" title=\"볼륨 구성\" children={<VolumeModal methods={methods} volume={volume} />} onRemove={onRemoveVolume} onModify={onModifyVolume} methods={methods} description=\"이 태스크와 연결된 볼륨이 없습니다.\"></ModalList>\n          <span className=\"open-modal_text\" onClick={() => ModalLauncher({ inProgress: false, title: '볼륨', id: 'volume', handleMethod: onAddVolume, children: <VolumeModal methods={methods} volume={volume} />, submitText: '추가' })}>\n            + 볼륨 추가\n          </span>\n        </>\n      </Section>\n      <Section label=\"스텝\" id=\"step\">\n        <>\n          <ModalList list={step} id=\"step\" title=\"스텝 구성\" children={<StepModal methods={methods} step={step} />} onRemove={onRemoveStep} onModify={onModifyStep} methods={methods} description=\"이 태스크와 연결된 스텝이 없습니다.\"></ModalList>\n          <span className=\"open-modal_text\" onClick={() => ModalLauncher({ inProgress: false, title: '스텝', id: 'step', handleMethod: onAddStep, children: <StepModal methods={methods} step={step} />, submitText: '추가' })}>\n            + 스텝 추가\n          </span>\n        </>\n      </Section>\n      {/* <button type=\"button\" onClick={() => console.log(methods.getValues())}>\n        {' '}\n        data 보기\n      </button>\n      {JSON.stringify(methods.formState.dirtyFields)} */}\n    </>\n  );\n};\n\nexport const CreateTask: React.FC<CreateTaskProps> = props => {\n  const formComponent = taskFormFactory(props.match.params);\n  const TaskFormComponent = formComponent;\n  return <TaskFormComponent fixed={{}} explanation={''} titleVerb=\"Create\" onSubmitCallback={onSubmitCallback} isCreate={true} />;\n};\n\nexport const onSubmitCallback = data => {\n  let labels = SelectorInput.objectify(data.metadata.labels);\n  delete data.metadata.labels;\n  data = _.defaultsDeep(data, { metadata: { labels: labels } });\n  return data;\n};\n\ntype CreateTaskProps = {\n  match: RMatch<{\n    type?: string;\n  }>;\n  fixed: object;\n  explanation: string;\n  titleVerb: string;\n  saveButtonText?: string;\n  isCreate: boolean;\n};\n\ntype TaskFormProps = {\n  onChange: Function;\n  stringData: {\n    [key: string]: string;\n  };\n  isCreate: boolean;\n};\n","import * as React from 'react';\nimport { Section } from '../../utils/section';\nimport { Dropdown } from '../../utils/dropdown';\nimport { TextInput } from '../../utils/text-input';\n\nexport const InputResourceModal: React.FC<InputResourceModalProps> = ({ methods, inputResource }) => {\n  const typeItems = {\n    Git: 'Git',\n    Image: 'Image',\n  };\n  let target = document.getElementById('input-resource-list');\n  let modalType = target && [...target.childNodes].some(cur => cur['dataset']['modify'] === 'true') ? 'modify' : 'add';\n  let template;\n  if (modalType === 'modify') {\n    let list = target.childNodes;\n    list.forEach((cur, idx) => {\n      if (cur['dataset']['modify'] === 'true') {\n        template = inputResource[idx];\n      }\n    });\n  }\n  const [option, setOption] = React.useState(template?.option);\n\n  console.log(inputResource);\n\n  return (\n    <>\n      <Section label=\"Name\" id=\"inputresource_name\" isRequired={true}>\n        <TextInput id=\"name\" inputClassName=\"col-md-12\" methods={methods} defaultValue={modalType === 'modify' ? template.name : ''} />\n      </Section>\n      <Section label=\"Type\" id=\"inputresource-type\" isRequired={true}>\n        <Dropdown\n          name=\"type\"\n          className=\"btn-group\"\n          title=\"타입 선택\" // 드롭다운 title 지정\n          methods={methods}\n          items={typeItems} // (필수)\n          style={{ display: 'block' }}\n          buttonClassName=\"dropdown-btn col-md-12\" // 선택된 아이템 보여주는 button (title) 부분 className\n          itemClassName=\"dropdown-item\" // 드롭다운 아이템 리스트 전체의 className - 각 row를 의미하는 것은 아님\n        />\n      </Section>\n      <Section label=\"Resource Path\" id=\"inputresource_path\">\n        <TextInput id=\"path\" inputClassName=\"col-md-12\" methods={methods} defaultValue={modalType === 'modify' ? template.path : ''} />\n      </Section>\n      <label>\n        <input\n          name=\"option\"\n          type=\"checkbox\"\n          ref={methods.register()}\n          checked={option}\n          onClick={() => {\n            setOption(!option);\n          }}\n        />\n        이 리소스를 선택 항목으로 제공합니다.\n      </label>\n      <p>선택 항목으로 제공할 경우, 태스크 런 또는 파이프라인 메뉴에서 파이프라인 리소스를 필요에 따라 할당할 수 있습니다.</p>\n    </>\n  );\n};\n\ntype InputResourceModalProps = {\n  methods: any;\n  inputResource: any;\n};\n","import * as React from 'react';\nimport { Section } from '../../utils/section';\nimport { Dropdown } from '../../utils/dropdown';\nimport { TextInput } from '../../utils/text-input';\n\nexport const OutputResourceModal: React.FC<OutputResourceModalProps> = ({ methods, outputResource }) => {\n  const typeItems = {\n    Git: 'Git',\n    Image: 'Image',\n  };\n  let target = document.getElementById('output-resource-list');\n  let modalType = target && [...target.childNodes].some(cur => cur['dataset']['modify'] === 'true') ? 'modify' : 'add';\n  let template;\n  if (modalType === 'modify') {\n    let list = target.childNodes;\n    list.forEach((cur, idx) => {\n      if (cur['dataset']['modify'] === 'true') {\n        template = outputResource[idx];\n      }\n    });\n  }\n  const [option, setOption] = React.useState(template?.option);\n\n  return (\n    <>\n      <Section label=\"Name\" id=\"outputresource_name\" isRequired={true}>\n        <TextInput id=\"name\" inputClassName=\"col-md-12\" methods={methods} defaultValue={modalType === 'modify' ? template.name : ''} />\n      </Section>\n      <Section label=\"Type\" id=\"outputresource-type\" isRequired={true}>\n        <Dropdown\n          name=\"type\"\n          className=\"btn-group\"\n          title=\"타입 선택\" // 드롭다운 title 지정\n          methods={methods}\n          items={typeItems} // (필수)\n          style={{ display: 'block' }}\n          buttonClassName=\"dropdown-btn col-md-12\" // 선택된 아이템 보여주는 button (title) 부분 className\n          itemClassName=\"dropdown-item\" // 드롭다운 아이템 리스트 전체의 className - 각 row를 의미하는 것은 아님\n          defaultValue={modalType === 'modify' ? template.type : ''}\n        />\n      </Section>\n      <Section label=\"Resource Path\" id=\"outputresource_path\">\n        <TextInput id=\"path\" inputClassName=\"col-md-12\" methods={methods} defaultValue={modalType === 'modify' ? template.path : ''} />\n      </Section>\n      <label>\n        <input\n          name=\"option\"\n          type=\"checkbox\"\n          ref={methods.register()}\n          checked={option}\n          onClick={() => {\n            setOption(!option);\n          }}\n        />\n        이 리소스를 선택 항목으로 제공합니다.\n      </label>\n      <p>선택 항목으로 제공할 경우, 태스크 런 또는 파이프라인 메뉴에서 파이프라인 리소스를 필요에 따라 할당할 수 있습니다.</p>\n    </>\n  );\n};\n\ntype OutputResourceModalProps = {\n  methods: any;\n  outputResource: any;\n};\n","import * as React from 'react';\nimport { Section } from '../../utils/section';\nimport { RadioGroup } from '../../utils/radio';\n// import { ResourceListDropdown } from './utils/resource-list-dropdown';\nimport { Dropdown } from '../../utils/dropdown';\nimport { TextInput } from '../../utils/text-input';\nimport { ListView } from '../../utils/list-view';\nimport { useWatch } from 'react-hook-form';\nimport { Button } from '@patternfly/react-core';\n\nexport const StepModal: React.FC<StepModalProps> = ({ methods, step }) => {\n  const ImageRadioList = [\n    // RadioGroup 컴포넌트에 넣어줄 items\n    {\n      title: 'Image Registry',\n      value: 'registry',\n    },\n    {\n      title: '직접 입력',\n      value: 'manual',\n    },\n  ];\n\n  let volumeItems = {};\n  // volume 있는지 여부\n  let isVolumeExist = () => {\n    let volumeList = methods.getValues('volume');\n    if (volumeList?.length > 0) {\n      volumeList.forEach(cur => {\n        volumeItems[cur.name] = cur.name;\n      });\n      return true;\n    }\n    return false;\n  };\n\n  const parameterListHeaderFragment = <></>;\n  const parameterListItemRenderer = (register, name, item, index, ListActions, ListDefaultIcons) => (\n    <div className=\"row\" key={item.id}>\n      <div className=\"col-xs-11 pairs-list__value-field\">\n        <TextInput id={`parameterList${index}.parameter`} inputClassName=\"col-md-12\" methods={methods} placeholder={'-c'} />\n      </div>\n      <div className=\"col-xs-1 pairs-list__action\">\n        <Button\n          type=\"button\"\n          data-test-id=\"pairs-list__delete-btn\"\n          className=\"pairs-list__span-btns\"\n          onClick={() => {\n            ListActions.remove(index);\n          }}\n          variant=\"plain\"\n        >\n          {ListDefaultIcons.deleteIcon}\n        </Button>\n      </div>\n    </div>\n  );\n  const envListHeaderFragment = <></>;\n  const envListItemRenderer = (register, name, item, index, ListActions, ListDefaultIcons) => (\n    <div className=\"row\" key={item.id}>\n      <div className=\"col-xs-11 pairs-list__value-field\" style={{ display: 'flex' }}>\n        <TextInput id={`envList${index}.envKey`} inputClassName=\"col-md-6\" methods={methods} placeholder={'키'} />\n        <span style={{ margin: '0 5px' }}>=</span>\n        <TextInput id={`envList${index}.envValue`} inputClassName=\"col-md-6\" methods={methods} placeholder={'값'} />\n      </div>\n      <div className=\"col-xs-1 pairs-list__action\">\n        <Button\n          type=\"button\"\n          data-test-id=\"pairs-list__delete-btn\"\n          className=\"pairs-list__span-btns\"\n          onClick={() => {\n            ListActions.remove(index);\n          }}\n          variant=\"plain\"\n        >\n          {ListDefaultIcons.deleteIcon}\n        </Button>\n      </div>\n    </div>\n  );\n\n  let template;\n\n  // modify 기능 용\n  let target = document.getElementById('step-list');\n  let modalType = target && [...target.childNodes].some(cur => cur['dataset']['modify'] === 'true') ? 'modify' : 'add';\n  if (modalType === 'modify') {\n    let list = target.childNodes;\n    list.forEach((cur, idx) => {\n      if (cur['dataset']['modify'] === 'true') {\n        template = step[idx];\n      }\n    });\n  }\n\n  // radio toggle용\n  const imageToggle = useWatch({\n    control: methods.control,\n    name: 'image-toggle',\n    defaultValue: template ? template.type : 'registry',\n  });\n\n  return (\n    <>\n      <Section label=\"Name\" id=\"step-name\" isRequired={true}>\n        <TextInput id=\"name\" inputClassName=\"col-md-12\" methods={methods} defaultValue={modalType === 'modify' ? template.name : ''} />\n      </Section>\n      <Section label=\"이미지\" id=\"step-image-toggle\">\n        <RadioGroup\n          methods={methods}\n          name=\"image-toggle\" // 서버에 보낼 데이터에서의 path (필수)\n          items={ImageRadioList} // [{title: '', value: ''}] (필수)\n          inline={true} // inline속성 먹일거면 true, 아니면 빼면 됨 (선택)\n        />\n      </Section>\n      {imageToggle === 'registry' && <p>레지스트리</p>}\n      {imageToggle === 'manual' && (\n        <>\n          <Section label=\"\" id=\"step-manual-image\">\n            <TextInput id=\"manualImage\" inputClassName=\"col-md-12\" methods={methods} defaultValue={modalType === 'modify' ? template.manualImage : ''} />\n          </Section>\n          <Section label=\"커맨드\" id=\"step-manual-command\">\n            <TextInput id=\"manualCommand\" inputClassName=\"col-md-12\" methods={methods} defaultValue={modalType === 'modify' ? template.manualCommand : ''} />\n          </Section>\n        </>\n      )}\n      <Section label=\"인수\" id=\"step-parameter\">\n        <ListView name=\"parameterList\" methods={methods} addButtonText=\"추가\" headerFragment={parameterListHeaderFragment} itemRenderer={parameterListItemRenderer} defaultItem={{ parameter: '' }} />\n      </Section>\n      <Section label=\"환경 변수\" id=\"step-parameter\">\n        <ListView name=\"envList\" methods={methods} addButtonText=\"추가\" headerFragment={envListHeaderFragment} itemRenderer={envListItemRenderer} defaultItem={{ envKey: '', envValue: '' }} />\n      </Section>\n      <Section label=\"마운트 경로\" id=\"step-mountPath\">\n        {!isVolumeExist() ? (\n          '마운트할 볼륨을 먼저 추가해 주세요.'\n        ) : (\n          <>\n            <Dropdown\n              name=\"selectedVolume\"\n              className=\"btn-group\"\n              title=\"볼륨 선택\" // 드롭다운 title 지정\n              methods={methods}\n              items={volumeItems} // (필수)\n              style={{ display: 'block' }}\n              buttonClassName=\"dropdown-btn col-md-12\" // 선택된 아이템 보여주는 button (title) 부분 className\n              itemClassName=\"dropdown-item\" // 드롭다운 아이템 리스트 전체의 className - 각 row를 의미하는 것은 아님\n            />\n            <TextInput id=\"mountPath\" inputClassName=\"col-md-12\" methods={methods} placeholder=\"마운트 경로를 입력해 주세요.\" defaultValue={modalType === 'modify' ? template.mountPath : ''} />\n          </>\n        )}\n      </Section>\n      {/* <Section id=\"resourcelistdropdown\" label=\"Resource List Dropdown\">\n        <ResourceListDropdown\n          resourceList={ClusterResourceList} // 필수\n          selected={[...selectedClusterItems]} // 필수\n          onChange={updateSelectedClusterItems} // 필수\n          showAll={false}\n          title=\"select Resources\" // 드롭다운 title 지정\n          autocompletePlaceholder=\"search by name\"\n          type=\"single\" // type: single / multiple\n        />\n      </Section> */}\n      {/* <Section label=\"Type\" id=\"step-type\" isRequired={true}>\n        <Dropdown\n          name=\"type\"\n          className=\"btn-group\"\n          title=\"타입 선택\" // 드롭다운 title 지정\n          methods={methods}\n          items={typeItems} // (필수)\n          style={{ display: 'block' }}\n          buttonClassName=\"dropdown-btn col-md-12\" // 선택된 아이템 보여주는 button (title) 부분 className\n          itemClassName=\"dropdown-item\" // 드롭다운 아이템 리스트 전체의 className - 각 row를 의미하는 것은 아님\n        />\n      </Section> */}\n    </>\n  );\n};\n\ntype StepModalProps = {\n  methods: any;\n  step: any;\n};\n","import * as React from 'react';\nimport { Section } from '../../utils/section';\nimport { Dropdown } from '../../utils/dropdown';\nimport { TextInput } from '../../utils/text-input';\n\nexport const TaskParameterModal: React.FC<TaskParameterModalProps> = ({ methods, taskParameter }) => {\n  const typeItems = {\n    String: 'String',\n    Array: 'Array',\n  };\n  let target = document.getElementById('task-parameter-list');\n  let modalType = target && [...target.childNodes].some(cur => cur['dataset']['modify'] === 'true') ? 'modify' : 'add';\n  let template;\n  if (modalType === 'modify') {\n    let list = target.childNodes;\n    list.forEach((cur, idx) => {\n      if (cur['dataset']['modify'] === 'true') {\n        template = taskParameter[idx];\n      }\n    });\n  }\n\n  return (\n    <>\n      <Section label=\"Name\" id=\"taskparameter_name\" isRequired={true}>\n        <TextInput id=\"name\" inputClassName=\"col-md-12\" methods={methods} defaultValue={modalType === 'modify' ? template.name : ''} />\n      </Section>\n      <Section label=\"Description\" id=\"taskparameter_desc\">\n        <TextInput id=\"description\" inputClassName=\"col-md-12\" methods={methods} defaultValue={modalType === 'modify' ? template.description : ''} />\n      </Section>\n      <Section label=\"Type\" id=\"taskparameter-type\" isRequired={true}>\n        <Dropdown\n          name=\"type\"\n          className=\"btn-group\"\n          title=\"타입 선택\" // 드롭다운 title 지정\n          methods={methods}\n          items={typeItems} // (필수)\n          style={{ display: 'block' }}\n          buttonClassName=\"dropdown-btn col-md-12\" // 선택된 아이템 보여주는 button (title) 부분 className\n          itemClassName=\"dropdown-item\" // 드롭다운 아이템 리스트 전체의 className - 각 row를 의미하는 것은 아님\n        />\n      </Section>\n      <Section label=\"기본 값\" id=\"taskparameter_default\" description=\"태스크 런 또는 파이프라인 생성 시 파라미터를 입력하지 않을 경우 기본 값으로 설정됩니다.\">\n        <TextInput id=\"default\" inputClassName=\"col-md-12\" methods={methods} defaultValue={modalType === 'modify' ? template.default : ''} />\n      </Section>\n    </>\n  );\n};\n\ntype TaskParameterModalProps = {\n  methods: any;\n  taskParameter: any;\n};\n","import * as React from 'react';\nimport { Section } from '../../utils/section';\nimport { Dropdown } from '../../utils/dropdown';\nimport { TextInput } from '../../utils/text-input';\nimport { useWatch } from 'react-hook-form';\n\nexport const VolumeModal: React.FC<VolumeModalProps> = ({ methods, volume }) => {\n  const typeItems = {\n    emptyDir: '빈 디렉토리',\n    configMap: '컨피그 맵',\n    secret: '시크릿',\n  };\n  let target = document.getElementById('volume-list');\n  let modalType = target && [...target.childNodes].some(cur => cur['dataset']['modify'] === 'true') ? 'modify' : 'add';\n  let template;\n  if (modalType === 'modify') {\n    let list = target.childNodes;\n    list.forEach((cur, idx) => {\n      if (cur['dataset']['modify'] === 'true') {\n        template = volume[idx];\n      }\n    });\n  }\n  const type = useWatch({\n    control: methods.control,\n    name: 'type',\n    defaultValue: template ? template.type : 'emptyDir',\n  });\n\n  return (\n    <>\n      <Section label=\"Name\" id=\"volume-name\" isRequired={true}>\n        <TextInput id=\"name\" inputClassName=\"col-md-12\" methods={methods} defaultValue={modalType === 'modify' ? template.name : ''} />\n      </Section>\n      <Section label=\"Type\" id=\"volume-type\" isRequired={true}>\n        <Dropdown\n          name=\"type\"\n          className=\"btn-group\"\n          title=\"빈 디렉토리\" // 드롭다운 title 지정\n          methods={methods}\n          items={typeItems} // (필수)\n          style={{ display: 'block' }}\n          buttonClassName=\"dropdown-btn col-md-12\" // 선택된 아이템 보여주는 button (title) 부분 className\n          itemClassName=\"dropdown-item\" // 드롭다운 아이템 리스트 전체의 className - 각 row를 의미하는 것은 아님\n        />\n      </Section>\n      {type === 'configMap' && (\n        <Section label=\"컨피그 맵\" id=\"volume-config-map\" isRequired={true}>\n          <TextInput id=\"config_map\" inputClassName=\"col-md-12\" methods={methods} defaultValue={modalType === 'modify' ? template.configMap : ''} />\n        </Section>\n      )}\n      {type === 'secret' && (\n        <Section label=\"시크릿\" id=\"volume-secret\" isRequired={true}>\n          <TextInput id=\"secret\" inputClassName=\"col-md-12\" methods={methods} defaultValue={modalType === 'modify' ? template.secret : ''} />\n        </Section>\n      )}\n    </>\n  );\n};\n\ntype VolumeModalProps = {\n  methods: any;\n  volume: any;\n};\n","import * as React from 'react';\nimport { Section } from '../../utils/section';\nimport { RadioGroup } from '../../utils/radio';\nimport { TextInput } from '../../utils/text-input';\n\nexport const WorkSpaceModal: React.FC<WorkSpaceModalProps> = ({ methods, workSpace }) => {\n  const accessModeItem = [\n    // RadioGroup 컴포넌트에 넣어줄 items\n    {\n      title: 'ReadWrite',\n      value: 'readWrite',\n    },\n    {\n      title: 'ReadOnly',\n      value: 'readOnly',\n    },\n  ];\n  let template;\n\n  //modify 기능 용\n  let target = document.getElementById('work-space-list');\n  let modalType = target && [...target.childNodes].some(cur => cur['dataset']['modify'] === 'true') ? 'modify' : 'add';\n  if (modalType === 'modify') {\n    let list = target.childNodes;\n    list.forEach((cur, idx) => {\n      if (cur['dataset']['modify'] === 'true') {\n        template = workSpace[idx];\n        // index = idx;\n      }\n    });\n  }\n  const [option, setOption] = React.useState(template?.option);\n\n  return (\n    <>\n      <Section label=\"Name\" id=\"workspace_name\" isRequired={true}>\n        <TextInput id=\"name\" inputClassName=\"col-md-12\" methods={methods} defaultValue={modalType === 'modify' ? template.name : ''} />\n      </Section>\n      <Section label=\"Description\" id=\"workspace_desc\">\n        <TextInput id=\"description\" inputClassName=\"col-md-12\" methods={methods} defaultValue={modalType === 'modify' ? template.description : ''} />\n      </Section>\n      <Section label=\"마운트 경로\" id=\"workspace_path\">\n        <TextInput id=\"path\" inputClassName=\"col-md-12\" methods={methods} defaultValue={modalType === 'modify' ? template.path : ''} />\n      </Section>\n      <Section label=\"접근 모드\" id=\"workspace_access\">\n        <RadioGroup\n          methods={methods}\n          name=\"accessMode\" // 서버에 보낼 데이터에서의 path (필수)\n          items={accessModeItem} // [{title: '', value: ''}] (필수)\n          inline={true} // inline속성 먹일거면 true, 아니면 빼면 됨 (선택)\n        />\n      </Section>\n      <label>\n        <input\n          name=\"option\"\n          type=\"checkbox\"\n          ref={methods.register()}\n          checked={option}\n          onClick={() => {\n            setOption(!option);\n          }}\n        />\n        이 워크스페이스를 선택 항목으로 제공합니다.\n      </label>\n      <p>선택 항목으로 제공할 경우, 태스크 런 또는 파이프라인 메뉴에서 파이프라인 워크스페이스를 필요에 따라 할당할 수 있습니다.</p>\n    </>\n  );\n};\n\ntype WorkSpaceModalProps = {\n  methods: any;\n  workSpace: any;\n};\n","export * from './modal-launcher';\nexport * from './modal-list';\n","import * as React from 'react';\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter } from '@console/internal/components/factory';\n// import { useFormContext } from 'react-hook-form';\n\nexport const _ModalLauncher = props => {\n  const { inProgress, errorMessage, title, children, cancel, handleMethod, index, submitText, id } = props;\n  const onCancel = () => {\n    // 수정일 경우에만 타는 로직\n    let isModify = document.getElementById(`${id}-list`) ? true : false;\n    if (isModify) {\n      let list = document.getElementById(`${id}-list`).childNodes;\n      list.forEach(cur => {\n        if (cur['dataset']['modify'] === 'true') {\n          cur['dataset']['modify'] = false;\n        }\n      });\n    }\n  };\n  return (\n    <form onSubmit={handleMethod.bind(null, cancel, index)}>\n      <ModalTitle>{title}</ModalTitle>\n      <ModalBody>{children}</ModalBody>\n      <ModalSubmitFooter errorMessage={errorMessage} id=\"uId\" inProgress={inProgress} onCancel={onCancel} submitText={submitText} cancel={cancel} />\n    </form>\n  );\n};\n\nexport const ModalLauncher = createModalLauncher(_ModalLauncher);\n","import * as React from 'react';\nimport { ModalLauncher } from './';\n\nexport const ModalList = props => {\n  const { onModify, onRemove, list, description, title, children, id } = props;\n  let uId = id + '-list';\n  return (\n    <>\n      {list.length ? (\n        <ul id={uId}>\n          {list.map((item, index) => {\n            return (\n              <li style={{ listStyle: 'none' }} key={index} data-modify={false}>\n                <input className=\"col-xs-4 text-secondary\" value={`${item.name}`} disabled />\n                <button\n                  type=\"button\"\n                  id={`item-modify-${index}`}\n                  onClick={e => {\n                    e.target['parentNode']['dataset'].modify = true;\n                    return ModalLauncher({ inProgress: false, index: index, title: title, id: id, handleMethod: onModify, children: children, submitText: '수정' });\n                  }}\n                >\n                  Modify\n                </button>\n                <button type=\"button\" id={`item-remove-${index}`} onClick={onRemove}>\n                  Delete\n                </button>\n              </li>\n            );\n          })}\n        </ul>\n      ) : (\n        <p className=\"help-block\">{description}</p>\n      )}\n    </>\n  );\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\n\nconst Node = ({ className, children, description }) => (\n  <div className={className}>\n    <div>{children}</div>\n    <p className=\"help-block\">{description}</p>\n  </div>\n);\n\nconst CombineNodes = (id, label, description, children, isRequired) => {\n  // children node 개수에 따라 가로 분할 class 적용\n  let isArray = Array.isArray(children);\n  let className = isArray ? `col-md-${12 / children.length}` : 'col-md-12';\n  return isArray ? children.map(cur => <Node className={className} children={cur} description={description} />) : <Node className={className} children={children} description={description} />;\n};\n\nexport const Section: React.FC<SectionProps> = ({ id, label, description, children, isRequired = false }) => {\n  let result = CombineNodes(id, label, description, children, isRequired);\n  return (\n    <div className=\"form-group\">\n      {label && (\n        <label className={'control-label ' + (isRequired ? 'co-required' : '')} htmlFor={id}>\n          {label}\n        </label>\n      )}\n      <div className=\"row\">{result}</div>\n    </div>\n  );\n};\n\ntype SectionProps = {\n  id: string;\n  children: Array<React.ReactNode> | React.ReactNode;\n  label?: string;\n  description?: string;\n  isRequired?: boolean;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { useFormContext } from 'react-hook-form';\n\nexport const TextInput: React.FC<TextInputProps> = ({ id, methods, inputClassName, defaultValue, placeholder }) => {\n  const { register } = methods ? methods : useFormContext();\n  return <input className={inputClassName} placeholder={placeholder} defaultValue={defaultValue} name={id} ref={register}></input>;\n};\n\ntype TextInputProps = {\n  id: string;\n  methods?: any;\n  inputClassName?: string;\n  defaultValue?: string;\n  placeholder?: string;\n} & React.HTMLProps<HTMLInputElement>;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAYA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7XA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAIA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AAMA;AACA;AAGA;AACA;AAGA;;;;;;;;;;;;;AC5DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAIA;AAIA;AACA;AAGA;AACA;AAEA;AACA;AAMA;AACA;AAGA;AACA;AAGA;;;;;;;;;;;;;AC3DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AAQA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAGA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AAKA;AAIA;AAIA;AACA;AACA;AA6BA;;;;;;;;;;;;;AChLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAIA;AACA;AAEA;AACA;AAIA;;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAIA;AAIA;AACA;AAEA;AAEA;AAGA;AAEA;AAKA;;;;;;;;;;;;;AC1DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AAIA;AACA;AAMA;AACA;AAGA;AACA;AAGA;;;;;;;;;;;;;ACnEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAKA;AAEA;AACA;AAIA;AACA;AACA;AAIA;AAKA;AAOA;;;;;;;;;;;;;ACnCA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AAGA;;;;;;;;;;;;;AC5BA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;;;;;A","sourceRoot":""}