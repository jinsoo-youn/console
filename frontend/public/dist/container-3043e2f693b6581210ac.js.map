{"version":3,"file":"container-3043e2f693b6581210ac.js","sources":["webpack:///./public/components/container.tsx","webpack:///./public/module/k8s/probe.ts"],"sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\n\nimport { Status } from '@console/shared';\nimport {\n  ContainerLifecycle,\n  ContainerLifecycleStage,\n  ContainerPort,\n  ContainerProbe,\n  ContainerSpec,\n  ContainerStatus,\n  EnvVar,\n  PodKind,\n  ResourceList,\n  VolumeMount,\n} from '../module/k8s';\nimport * as k8sProbe from '../module/k8s/probe';\nimport { getContainerState, getContainerStatus, getPullPolicyLabel } from '../module/k8s/container';\nimport {\n  Firehose,\n  HorizontalNav,\n  MsgBox,\n  NodeLink,\n  PageHeading,\n  ResourceLink,\n  ScrollToTopOnMount,\n  SectionHeading,\n  Timestamp,\n} from './utils';\nimport { resourcePath } from './utils/resource-link';\n\nconst formatComputeResources = (resources: ResourceList) =>\n  _.map(resources, (v, k) => `${k}: ${v}`).join(', ');\n\nconst getResourceRequestsValue = (container: ContainerSpec) => {\n  const requests: ResourceList = _.get(container, 'resources.requests');\n  return formatComputeResources(requests);\n};\n\nconst getResourceLimitsValue = (container: ContainerSpec) => {\n  const limits: ResourceList = _.get(container, 'resources.limits');\n  return formatComputeResources(limits);\n};\n\nconst Lifecycle: React.FC<LifecycleProps> = ({ lifecycle }) => {\n  const fields = lifecycle && k8sProbe.mapLifecycleConfigToFields(lifecycle);\n  const postStart = _.get(fields, 'postStart.cmd');\n  const preStop = _.get(fields, 'preStop.cmd');\n\n  const label = (stage: ContainerLifecycleStage) =>\n    lifecycle && k8sProbe.getLifecycleHookLabel(lifecycle, stage);\n  return (\n    <div>\n      {postStart && (\n        <div>\n          <span>PostStart: {label('postStart')}</span> <code>{postStart}</code>\n        </div>\n      )}\n      {preStop && (\n        <div>\n          <span>PreStop: {label('preStop')}</span> <code>{preStop}</code>\n        </div>\n      )}\n      {!postStart && !preStop && '-'}\n    </div>\n  );\n};\nLifecycle.displayName = 'Lifecycle';\n\nconst Probe: React.FC<ProbeProps> = ({ probe, podIP }) => {\n  const label = probe && k8sProbe.getActionLabelFromObject(probe);\n  const value = probe && _.get(k8sProbe.mapProbeToFields(probe, podIP), 'cmd');\n  if (!value) {\n    return <>-</>;\n  }\n  const isMultiline = value.indexOf('\\n') !== -1;\n  const formattedValue = isMultiline ? <pre>{value}</pre> : <code>{value}</code>;\n  return (\n    <>\n      {label} {formattedValue}\n    </>\n  );\n};\nProbe.displayName = 'Probe';\n\nconst Ports: React.FC<PortsProps> = ({ ports }) => {\n  if (!ports || !ports.length) {\n    return (\n      <MsgBox\n        className=\"co-sysevent-stream__status-box-empty\"\n        title=\"No ports have been exposed\"\n        detail=\"Ports allow for traffic to enter this container\"\n      />\n    );\n  }\n\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Container</th>\n        </tr>\n      </thead>\n      <tbody>\n        {ports.map((p: ContainerPort, i: number) => (\n          <tr key={i}>\n            <td>{p.name || '-'}</td>\n            <td>{p.containerPort}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nconst VolumeMounts: React.FC<VolumeMountProps> = ({ volumeMounts }) => {\n  if (!volumeMounts || !volumeMounts.length) {\n    return (\n      <MsgBox\n        className=\"co-sysevent-stream__status-box-empty\"\n        title=\"No volumes have been mounted\"\n        detail=\"Volumes allow data to be shared as files with the pod\"\n      />\n    );\n  }\n\n  return (\n    <table className=\"table table--layout-fixed\">\n      <thead>\n        <tr>\n          <th>Access</th>\n          <th>Location</th>\n          <th>Mount Path</th>\n        </tr>\n      </thead>\n      <tbody>\n        {volumeMounts.map((v: VolumeMount) => (\n          <tr key={v.name}>\n            <td>{v.readOnly === true ? 'Read Only' : 'Read / Write'}</td>\n            <td className=\"co-break-all co-select-to-copy\">{v.name}</td>\n            <td>\n              {v.mountPath ? (\n                <div className=\"co-break-all co-select-to-copy\">{v.mountPath}</div>\n              ) : (\n                '-'\n              )}\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\nVolumeMounts.displayName = 'VolumeMounts';\n\nconst Env: React.FC<EnvProps> = ({ env }) => {\n  if (!env || !env.length) {\n    return (\n      <MsgBox\n        className=\"co-sysevent-stream__status-box-empty\"\n        title=\"No variables have been set\"\n        detail=\"An easy way to pass configuration values\"\n      />\n    );\n  }\n\n  const value = (e: EnvVar) => {\n    const v = e.valueFrom;\n    if (_.has(v, 'fieldRef')) {\n      return `field: ${v.fieldRef.fieldPath}`;\n    } else if (_.has(v, 'resourceFieldRef')) {\n      return `resource: ${v.resourceFieldRef.resource}`;\n    } else if (_.has(v, 'configMapKeyRef')) {\n      return `config-map: ${v.configMapKeyRef.name}/${v.configMapKeyRef.key}`;\n    } else if (_.has(v, 'secretKeyRef')) {\n      return `secret: ${v.secretKeyRef.name}/${v.secretKeyRef.key}`;\n    }\n    return e.value;\n  };\n\n  return (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Value</th>\n        </tr>\n      </thead>\n      <tbody>\n        {env.map((e: EnvVar, i: number) => (\n          <tr key={i}>\n            <td>{e.name}</td>\n            <td>{value(e)}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\nEnv.displayName = 'Env';\n\n// Split image string into the image name and tag.\nconst getImageNameAndTag = (image: string) => {\n  if (!image) {\n    return { imageName: null, imageTag: null };\n  }\n  const index = image.lastIndexOf(':');\n  if (index === -1 || _.includes(image, '@sha256:')) {\n    return { imageName: image, imageTag: null };\n  }\n  const imageName = image.substr(0, index);\n  const imageTag = image.substr(index + 1);\n  return { imageName, imageTag };\n};\n\nconst ContainerDetails: React.FC<ContainerDetailsProps> = (props) => {\n  const pod = props.obj;\n  const container =\n    (_.find(pod.spec.containers, { name: props.match.params.name }) as ContainerSpec) ||\n    (_.find(pod.spec.initContainers, { name: props.match.params.name }) as ContainerSpec);\n  if (!container) {\n    return null;\n  }\n\n  const status: ContainerStatus =\n    getContainerStatus(pod, container.name) || ({} as ContainerStatus);\n  const state = getContainerState(status);\n  const stateValue =\n    state.value === 'terminated' && _.isFinite(state.exitCode)\n      ? `${state.label} with exit code ${state.exitCode}`\n      : state.label;\n  const { imageName, imageTag } = getImageNameAndTag(container.image);\n\n  return (\n    <div className=\"co-m-pane__body\">\n      <ScrollToTopOnMount />\n\n      <div className=\"row\">\n        <div className=\"col-lg-4\">\n          <SectionHeading text=\"Container Details\" />\n          <dl className=\"co-m-pane__details\">\n            <dt>State</dt>\n            <dd>\n              <Status status={stateValue} />\n            </dd>\n            <dt>ID</dt>\n            <dd>\n              {status.containerID ? (\n                <div className=\"co-break-all co-select-to-copy\">{status.containerID}</div>\n              ) : (\n                '-'\n              )}\n            </dd>\n            <dt>Restarts</dt>\n            <dd>{status.restartCount}</dd>\n            <dt>Resource Requests</dt>\n            <dd>{getResourceRequestsValue(container) || '-'}</dd>\n            <dt>Resource Limits</dt>\n            <dd>{getResourceLimitsValue(container) || '-'}</dd>\n            <dt>Lifecycle Hooks</dt>\n            <dd>\n              <Lifecycle lifecycle={container.lifecycle} />\n            </dd>\n            <dt>Readiness Probe</dt>\n            <dd>\n              <Probe probe={container.readinessProbe} podIP={pod.status.podIP || '-'} />\n            </dd>\n            <dt>Liveness Probe</dt>\n            <dd>\n              <Probe probe={container.livenessProbe} podIP={pod.status.podIP || '-'} />\n            </dd>\n            <dt>Started</dt>\n            <dd>\n              <Timestamp timestamp={state.startedAt} />\n            </dd>\n            <dt>Finished</dt>\n            <dd>\n              <Timestamp timestamp={state.finishedAt} />\n            </dd>\n            <dt>Pod</dt>\n            <dd>\n              <ResourceLink\n                kind=\"Pod\"\n                name={props.match.params.podName}\n                namespace={props.match.params.ns}\n              />\n            </dd>\n          </dl>\n        </div>\n\n        <div className=\"col-lg-4\">\n          <SectionHeading text=\"Image Details\" />\n          <dl className=\"co-m-pane__details\">\n            <dt>Image</dt>\n            <dd>\n              {imageName ? <div className=\"co-break-all co-select-to-copy\">{imageName}</div> : '-'}\n            </dd>\n            <dt>Image Version/Tag</dt>\n            <dd>{imageTag || '-'}</dd>\n            <dt>Command</dt>\n            <dd>\n              {container.command ? (\n                <pre>\n                  <code>{container.command.join(' ')}</code>\n                </pre>\n              ) : (\n                <span>-</span>\n              )}\n            </dd>\n            <dt>Args</dt>\n            <dd>\n              {container.args ? (\n                <pre>\n                  <code>{container.args.join(' ')}</code>\n                </pre>\n              ) : (\n                <span>-</span>\n              )}\n            </dd>\n            <dt>Pull Policy</dt>\n            <dd>{getPullPolicyLabel(container)}</dd>\n          </dl>\n        </div>\n\n        <div className=\"col-lg-4\">\n          <SectionHeading text=\"Network\" />\n          <dl className=\"co-m-pane__details\">\n            <dt>Node</dt>\n            <dd>\n              <NodeLink name={pod.spec.nodeName} />\n            </dd>\n            <dt>Pod IP</dt>\n            <dd>{pod.status.podIP || '-'}</dd>\n          </dl>\n        </div>\n      </div>\n\n      <hr />\n\n      <div className=\"row\">\n        <div className=\"col-lg-4\">\n          <SectionHeading text=\"Ports\" />\n          <div className=\"co-table-container\">\n            <Ports ports={container.ports} />\n          </div>\n        </div>\n\n        <div className=\"col-lg-4\">\n          <SectionHeading text=\"Mounted Volumes\" />\n          <div className=\"co-table-container\">\n            <VolumeMounts volumeMounts={container.volumeMounts} />\n          </div>\n        </div>\n\n        <div className=\"col-lg-4\">\n          <SectionHeading text=\"Environment Variables\" />\n          <div className=\"co-table-container\">\n            <Env env={container.env} />\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\nContainerDetails.displayName = 'ContainerDetails';\n\nexport const ContainersDetailsPage: React.FC<ContainerDetailsPageProps> = (props) => (\n  <div>\n    <Firehose\n      resources={[\n        {\n          name: props.match.params.podName,\n          namespace: props.match.params.ns,\n          kind: 'Pod',\n          isList: false,\n          prop: 'obj',\n        },\n      ]}\n    >\n      <PageHeading\n        detail={true}\n        title={props.match.params.name}\n        kind=\"Container\"\n        breadcrumbsFor={() => [\n          { name: 'Pods', path: `/k8s/ns/${props.match.params.ns}/pods` },\n          {\n            name: props.match.params.podName,\n            path: resourcePath('Pod', props.match.params.podName, props.match.params.ns),\n          },\n          { name: 'Container Details', path: props.match.url },\n        ]}\n      />\n      <HorizontalNav\n        hideNav={true}\n        pages={[{ name: 'container', href: '', component: ContainerDetails }]}\n        match={props.match}\n      />\n    </Firehose>\n  </div>\n);\nContainersDetailsPage.displayName = 'ContainersDetailsPage';\n\ntype LifecycleProps = {\n  lifecycle: ContainerLifecycle;\n};\n\ntype ProbeProps = {\n  probe: ContainerProbe;\n  podIP: string;\n};\n\ntype PortsProps = {\n  ports: ContainerPort[];\n};\n\ntype VolumeMountProps = {\n  volumeMounts: VolumeMount[];\n};\n\ntype EnvProps = {\n  env: EnvVar[];\n};\n\ntype ContainerDetailsProps = {\n  match: any;\n  obj: PodKind;\n};\n\ntype ContainerDetailsPageProps = {\n  match: any;\n};\n","import * as _ from 'lodash-es';\n\nimport {\n  ContainerLifecycle,\n  ContainerLifecycleStage,\n  ContainerProbe,\n  ExecProbe,\n  Handler,\n  HTTPGetProbe,\n  TCPSocketProbe,\n} from './';\n\nconst HookAction = Object.freeze({\n  exec: {\n    id: 'exec',\n    label: 'Exec Command',\n  },\n  httpGet: {\n    id: 'httpGet',\n    label: 'HTTP Get',\n  },\n  tcpSocket: {\n    id: 'tcpSocket',\n    label: 'TCP Socket (Port)',\n  },\n});\n\nconst parsers = {\n  exec: function(str: string) {\n    return {\n      command: str.split(' '),\n    };\n  },\n\n  httpGet: function(str: string) {\n    if (!str) {\n      return null;\n    }\n    // XXX: Kubernetes allows for named ports, but the URL spec says ports must be digits.\n    let scheme: string, port: string, host: string, hostname: string, rest: string[];\n    [scheme, ...rest] = str.split('://');\n    if (!scheme) {\n      return null;\n    }\n    str = rest.join();\n    [host, ...rest] = str.split('/');\n    const path = `/${rest.join()}`;\n    [hostname, port] = host.split(':');\n    if (_.isUndefined(port)) {\n      if (scheme === 'http') {\n        port = '80';\n      } else if (scheme === 'https') {\n        port = '443';\n      }\n    }\n    if (_.isUndefined(port)) {\n      return null;\n    }\n    return {\n      host: [scheme, '://', hostname].join(''),\n      path,\n      port: parseInt(port, 10) || port,\n    };\n  },\n\n  tcpSocket: function(str: string) {\n    if (str == null || str === '') {\n      return null;\n    }\n\n    return {\n      // as per http://kubernetes.io/docs/api-reference/v1/definitions/#_v1_tcpsocketaction\n      // port can be either number or IANA name\n      port: /^\\d+$/.test(str) ? +str : str,\n    };\n  },\n};\n\nconst flatteners = {\n  exec: function(cmd: ExecProbe): string {\n    if (_.isEmpty(cmd) || _.isEmpty(cmd.command)) {\n      return '';\n    }\n    return cmd.command.join(' ');\n  },\n\n  httpGet: function(cmd: HTTPGetProbe, podIP: string): string {\n    let c = '';\n    if (_.isEmpty(cmd)) {\n      return c;\n    }\n\n    c += cmd.host || podIP;\n    if (cmd.port) {\n      c += `:${cmd.port}`;\n    }\n\n    if (cmd.path) {\n      if (cmd.path.startsWith('/')) {\n        c += cmd.path;\n      } else {\n        c += `/${cmd.path}`;\n      }\n    }\n    return c;\n  },\n\n  tcpSocket: function(cmd: TCPSocketProbe): string {\n    if (!cmd || !cmd.port) {\n      return '';\n    }\n    return `${cmd.port}`;\n  },\n};\n\nfunction inferAction(obj: Handler) {\n  if (_.isEmpty(obj)) {\n    return;\n  }\n  const keys = _.keys(obj);\n  if (_.isEmpty(keys)) {\n    return;\n  }\n  return HookAction[keys[0]];\n}\n\nexport function flattenCmd(type: string, cmd: any, podIP?: string) {\n  return flatteners[type](cmd, podIP);\n}\n\nexport function parseCmd(type: string, cmd: any) {\n  return parsers[type](cmd);\n}\n\nfunction getActionLabel(action): string {\n  if (action) {\n    return action.label;\n  }\n  return '';\n}\n\nexport function getActionLabelFromObject(obj: Handler): string {\n  const a = inferAction(obj);\n  return getActionLabel(a);\n}\n\nexport const getLifecycleHookLabel = function(\n  lifecycle: ContainerLifecycle,\n  stage: ContainerLifecycleStage,\n) {\n  if (!lifecycle || !stage || !lifecycle[stage]) {\n    return '';\n  }\n  return getActionLabelFromObject(lifecycle[stage]);\n};\n\n// Maps an api config object to a simple flattened type and command field.\nexport const mapLifecycleConfigToFields = function(lifecycle: ContainerLifecycle) {\n  const f = {\n    postStart: {\n      type: 'exec',\n      cmd: '',\n    },\n    preStop: {\n      type: 'exec',\n      cmd: '',\n    },\n  };\n\n  if (!lifecycle) {\n    return f;\n  }\n\n  if (!_.isEmpty(lifecycle.postStart)) {\n    const k = _.keys(lifecycle.postStart);\n    f.postStart.type = k[0];\n    f.postStart.cmd = flattenCmd(k[0], lifecycle.postStart[k[0]]);\n  }\n\n  if (!_.isEmpty(lifecycle.preStop)) {\n    const k = _.keys(lifecycle.preStop);\n    f.preStop.type = k[0];\n    f.preStop.cmd = flattenCmd(k[0], lifecycle.preStop[k[0]]);\n  }\n\n  return f;\n};\n\nexport const mapProbeToFields = function(probe: ContainerProbe, podIP: string) {\n  const f = {\n    type: 'exec',\n    cmd: '',\n  };\n\n  if (_.isEmpty(probe)) {\n    return f;\n  }\n\n  const k = _.keys(probe);\n  if (!_.isEmpty(k)) {\n    f.type = k[0];\n    f.cmd = flattenCmd(k[0], probe[k[0]], podIP);\n  }\n\n  return f;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAaA;AACA;AACA;AAWA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;;AAAA;;AAAA;AAGA;AAEA;;AAAA;;AAAA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAAA;AAGA;AACA;AAEA;AACA;AACA;AAOA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAMA;AAEA;AACA;AACA;AAOA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAYA;AACA;AAEA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AAMA;AACA;AAGA;AAMA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAMA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAQA;;;;;;;;;;;;;ACjsourceRoot":""}