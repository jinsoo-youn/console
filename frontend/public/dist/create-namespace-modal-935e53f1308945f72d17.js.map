{"version":3,"file":"create-namespace-modal-935e53f1308945f72d17.js","sources":["webpack:///./public/components/modals/create-namespace-modal.jsx"],"sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\n\nimport { FLAGS } from '@console/shared';\nimport { k8sCreate, referenceFor } from '../../module/k8s';\nimport { NamespaceModel, ProjectRequestModel, NetworkPolicyModel } from '../../models';\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter } from '../factory/modal';\nimport { Dropdown, history, PromiseComponent, resourceObjPath, SelectorInput } from '../utils';\nimport { setFlag } from '../../actions/features';\n\nconst allow = 'allow';\nconst deny = 'deny';\n\nconst defaultDeny = {\n  apiVersion: 'networking.k8s.io/v1',\n  kind: 'NetworkPolicy',\n  spec: {\n    podSelector: null,\n  },\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  hideStartGuide: () => setFlag(dispatch, FLAGS.SHOW_OPENSHIFT_START_GUIDE, false),\n});\n\nconst CreateNamespaceModal = connect(\n  null,\n  mapDispatchToProps,\n)(\n  class CreateNamespaceModal extends PromiseComponent {\n    constructor(props) {\n      super(props);\n      this.state.np = allow;\n      this.handleChange = this.handleChange.bind(this);\n      this.onLabels = this.onLabels.bind(this);\n    }\n\n    handleChange(e) {\n      const name = e.target.name;\n      const value = e.target.value;\n      this.setState({\n        [name]: value,\n      });\n    }\n\n    createNamespace() {\n      const { name, labels } = this.state;\n      const namespace = {\n        metadata: {\n          name,\n          labels: SelectorInput.objectify(labels),\n        },\n      };\n      return k8sCreate(NamespaceModel, namespace);\n    }\n\n    createProject() {\n      const { hideStartGuide } = this.props;\n      const { name, displayName, description } = this.state;\n      const project = {\n        metadata: {\n          name,\n        },\n        displayName,\n        description,\n      };\n      return k8sCreate(ProjectRequestModel, project).then((obj) => {\n        // Immediately update the start guide flag to avoid the empty state\n        // message from displaying when projects watch is slow.\n        hideStartGuide();\n        return obj;\n      });\n    }\n\n    _submit(event) {\n      event.preventDefault();\n      const { createProject, close, onSubmit } = this.props;\n\n      let promise = createProject ? this.createProject() : this.createNamespace();\n      if (this.state.np === deny) {\n        promise = promise.then((ns) => {\n          const policy = Object.assign({}, defaultDeny, {\n            metadata: { namespace: ns.metadata.name, name: 'default-deny' },\n          });\n          // Resolve the promise with the namespace object, not the network policy object, since we want to redirect to the namespace.\n          return k8sCreate(NetworkPolicyModel, policy).then(() => ns);\n        });\n      }\n\n      this.handlePromise(promise).then((obj) => {\n        close();\n        if (onSubmit) {\n          onSubmit(obj);\n        } else {\n          history.push(resourceObjPath(obj, referenceFor(obj)));\n        }\n      });\n    }\n\n    onLabels(labels) {\n      this.setState({ labels });\n    }\n\n    render() {\n      const label = this.props.createProject ? 'Project' : 'Namespace';\n      const defaultNetworkPolicies = {\n        [allow]: 'No restrictions',\n        [deny]: 'Deny all inbound traffic',\n      };\n      return (\n        <form\n          onSubmit={this._submit.bind(this)}\n          name=\"form\"\n          className=\"modal-content modal-content--no-inner-scroll\"\n        >\n          <ModalTitle>Create {label}</ModalTitle>\n          <ModalBody>\n            <div className=\"form-group\">\n              <label htmlFor=\"input-name\" className=\"control-label co-required\">\n                Name\n              </label>\n              <div className=\"modal-body__field\">\n                <input\n                  id=\"input-name\"\n                  name=\"name\"\n                  type=\"text\"\n                  className=\"pf-c-form-control\"\n                  onChange={this.handleChange}\n                  value={this.state.name || ''}\n                  autoFocus\n                  required\n                />\n              </div>\n            </div>\n            {this.props.createProject && (\n              <div className=\"form-group\">\n                <label htmlFor=\"input-display-name\" className=\"control-label\">\n                  Display Name\n                </label>\n                <div className=\"modal-body__field\">\n                  <input\n                    id=\"input-display-name\"\n                    name=\"displayName\"\n                    type=\"text\"\n                    className=\"pf-c-form-control\"\n                    onChange={this.handleChange}\n                    value={this.state.displayName || ''}\n                  />\n                </div>\n              </div>\n            )}\n            {this.props.createProject && (\n              <div className=\"form-group\">\n                <label htmlFor=\"input-description\" className=\"control-label\">\n                  Description\n                </label>\n                <div className=\"modal-body__field\">\n                  <textarea\n                    id=\"input-description\"\n                    name=\"description\"\n                    className=\"pf-c-form-control\"\n                    onChange={this.handleChange}\n                    value={this.state.description || ''}\n                  />\n                </div>\n              </div>\n            )}\n            {!this.props.createProject && (\n              <div className=\"form-group\">\n                <label htmlFor=\"tags-input\" className=\"control-label\">\n                  Labels\n                </label>\n                <div className=\"modal-body__field\">\n                  <SelectorInput\n                    labelClassName=\"co-text-namespace\"\n                    onChange={this.onLabels}\n                    tags={[]}\n                  />\n                </div>\n              </div>\n            )}\n            {!this.props.createProject && (\n              <div className=\"form-group\">\n                <label htmlFor=\"network-policy\" className=\"control-label\">\n                  Default Network Policy\n                </label>\n                <div className=\"modal-body__field \">\n                  <Dropdown\n                    selectedKey={this.state.np}\n                    items={defaultNetworkPolicies}\n                    dropDownClassName=\"dropdown--full-width\"\n                    id=\"dropdown-selectbox\"\n                    onChange={(np) => this.setState({ np })}\n                  />\n                </div>\n              </div>\n            )}\n          </ModalBody>\n          <ModalSubmitFooter\n            errorMessage={this.state.errorMessage}\n            inProgress={this.state.inProgress}\n            submitText=\"Create\"\n            cancel={this.props.cancel.bind(this)}\n          />\n        </form>\n      );\n    }\n  },\n);\n\nexport const createNamespaceModal = createModalLauncher(CreateNamespaceModal);\nexport const createProjectModal = createModalLauncher((props) => (\n  <CreateNamespaceModal {...props} createProject={true} />\n));\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;;AAAA;AACA;AACA;AACA;AAGA;AACA;AAYA;AAEA;AAGA;AACA;AAWA;AAEA;AAGA;AACA;AAUA;AAEA;AAGA;AACA;AAQA;AAEA;AAGA;AACA;AAWA;AAQA;AACA;AAGA;AACA;;;;;A","sourceRoot":""}