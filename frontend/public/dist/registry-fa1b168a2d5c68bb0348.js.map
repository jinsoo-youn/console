{"version":3,"file":"registry-fa1b168a2d5c68bb0348.js","sources":["webpack:///./public/components/hypercloud/registry.tsx","webpack:///./public/components/hypercloud/resources.tsx"],"sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { Status } from '@console/shared';\nimport { K8sResourceKind } from '../../module/k8s';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from '../factory';\nimport { AsyncComponent, DetailsItem, Kebab, KebabAction, detailsPage, Timestamp, navFactory, ResourceKebab, ResourceLink, ResourceSummary, SectionHeading } from '../utils';\nimport { RegistryModel, NotaryModel } from '../../models/hypercloud';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\nimport { RepositoriesPage } from './repository';\nimport { Resources } from './resources';\nimport { scanningModal } from './modals';\nimport { withRouter, match } from 'react-router-dom';\nimport { ResourceLabel } from '../../models/hypercloud/resource-plural';\n\nexport const menuActions: KebabAction[] = [...Kebab.getExtensionsActionsForKind(RegistryModel), ...Kebab.factory.common, Kebab.factory.ModifyScanning];\n\nconst kind = RegistryModel.kind;\n\nconst tableColumnClasses = ['', '', classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-xl'), Kebab.columnClass];\n\nconst RegistryTableHeader = (t?: TFunction) => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_2'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('SINGLE:MSG_VIRTUALMACHINES_CREATEFORM_STEP1_DIV2_5'),\n      sortField: 'status.serverURL',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_3'),\n      sortField: 'status.phase',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: t('SINGLE:MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_29'),\n      sortField: 'status.capacity',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_12'),\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[5] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[6] },\n    },\n  ];\n};\n\nRegistryTableHeader.displayName = 'RegistryTableHeader';\n\nconst RegistryTableRow: RowFunction<K8sResourceKind> = ({ obj: registry, index, key, style }) => {\n  return (\n    <TableRow id={registry.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={registry.metadata.name} namespace={registry.metadata.namespace} title={registry.metadata.uid} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={registry.metadata.namespace} title={registry.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>{registry?.status?.serverURL}</TableData>\n      <TableData className={classNames(tableColumnClasses[3], 'co-break-word')}>\n        <Status status={registry?.status?.phase} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>{registry?.status?.capacity}</TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <Timestamp timestamp={registry.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[6]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={registry} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport const RegistryDetailsList: React.FC<RegistryDetailsListProps> = ({ ds }) => {\n  const { t } = useTranslation();\n\n  return (\n    <dl className=\"co-m-pane__details\">\n      <DetailsItem label={t('COMMON:MSG_MAIN_TABLEHEADER_3')} obj={ds} path=\"status.phase\">\n        <Status status={ds?.status?.phase} />\n      </DetailsItem>\n      <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_CONTAINERS_TABLEHEADER_3')} obj={ds} path=\"spec.image\">\n        {ds.spec.image}\n      </DetailsItem>\n      <DetailsItem label={t('SINGLE:MSG_IMAGEREGISTRIES_CREATEFORM_DIV2_29')} obj={ds} path=\"status.capacity\">\n        {ds.status.capacity}\n      </DetailsItem>\n    </dl>\n  );\n};\n\nconst RegistryDetails: React.FC<RegistryDetailsProps> = ({ obj: registry }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', { 0: ResourceLabel(registry, t) })} />\n        {/* <SectionHeading text=\"aaaa\" /> */}\n        <div className=\"row\">\n          <div className=\"col-lg-6\">\n            <ResourceSummary resource={registry} />\n          </div>\n          <div className=\"col-lg-6\">\n            <RegistryDetailsList ds={registry} />\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={`${t('COMMON:MSG_DETAILS_TABDETAILS_RESOURCES_1')}`} />\n        <Resources conditions={registry.status.conditions} registry={registry.metadata.name} namespace={registry.metadata.namespace} />\n      </div>\n    </>\n  );\n}\n\nconst { details, editYaml } = navFactory;\n\nexport const Registries: React.FC = props => {\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"Registries\" Header={RegistryTableHeader.bind(null, t)} Row={RegistryTableRow} virtualize />;\n};\n\nconst registryStatusReducer = (registry: any): string => {\n  return registry?.status?.phase;\n};\n\nconst filters = [\n  {\n    filterGroupName: 'Status',\n    type: 'registry-status',\n    reducer: registryStatusReducer,\n    items: [\n      { id: 'Running', title: 'Running' },\n      { id: 'Not Ready', title: 'Not Ready' },\n      { id: 'Creating', title: 'Creating' },\n    ],\n  },\n];\n\nconst registryCreateAction = (history, item) => {\n  const pathname = window.location.pathname;\n  const pathNameSplit = pathname.split('/');\n  const allNS = pathNameSplit[2];\n  let ns;\n  if (allNS !== 'all-namespaces') {\n    ns = pathNameSplit[3];\n  }\n\n  switch (item) {\n    case 'scan':\n      scanningModal({ kind: 'Registry', ns, showNs: true });\n      break;\n    case 'generic':\n      history.push('/');\n      if (allNS === 'all-namespaces') {\n        history.push('/k8s/ns/default/registries/~new');\n      } else {\n        history.push(`/k8s/ns/${ns}/registries/~new`);\n      }\n      break;\n  }\n};\n\nexport const RegistriesPage = withRouter(props => {\n  const { t } = useTranslation();\n\n  const createItems = {\n    generic: 'Create Registry',\n    scan: 'Image Scan Request',\n  };\n\n  const createProps = {\n    items: createItems,\n    action: registryCreateAction.bind(null, props.history),\n  };\n\n  return <ListPage\n    title={t('COMMON:MSG_LNB_MENU_71')}\n    createButtonText={t('COMMON:MSG_MAIN_CREATEBUTTON_1', { 0: t('COMMON:MSG_LNB_MENU_71') })}\n    canCreate={true}\n    createProps={createProps}\n    ListComponent={Registries}\n    rowFilters={filters}\n    kind={kind}\n    {...props}\n  />;\n});\n\nconst RepositoriesTab: React.FC<RepositoriesTabProps> = ({ obj }) => {\n  const {\n    metadata: { namespace },\n  } = obj;\n\n  const selector = {\n    matchLabels: {\n      registry: obj.metadata.name,\n    },\n  };\n  return <RepositoriesPage showTitle={false} namespace={namespace} selector={selector} canCreate={false} />;\n};\n\nexport const NotaryLoader: React.FC<NotaryLoaderProps> = props => {\n  return <AsyncComponent loader={() => import('./notary').then(c => c.NotariesDetailsPage)} kind={'Notary'} kindObj={NotaryModel} name={decodeURIComponent(props.obj.metadata.name)} namespace={props.obj.metadata.namespace} match={props.match} />;\n};\n\nexport const RegistriesDetailsPage: React.FC<RegistriesDetailsPageProps> = props => (\n  <DetailsPage\n    {...props}\n    kind={kind}\n    menuActions={menuActions}\n    pages={[\n      details(detailsPage(RegistryDetails)),\n      editYaml(),\n      {\n        href: 'repository',\n        name: 'Repository',\n        component: RepositoriesTab,\n      },\n      {\n        href: 'notary',\n        name: 'Notary',\n        component: detailsPage(NotaryLoader),\n      },\n    ]}\n  />\n);\n\ntype RegistryDetailsListProps = {\n  ds: K8sResourceKind;\n};\n\ntype RegistryDetailsProps = {\n  obj: K8sResourceKind;\n};\n\ntype RegistriesDetailsPageProps = {\n  match: any;\n};\n\ntype RepositoriesTabProps = {\n  obj: K8sResourceKind;\n};\n\ntype NotaryLoaderProps = {\n  obj: K8sResourceKind;\n  match: match<any>;\n};\n","import * as React from 'react';\nimport { K8sResourceCondition /* , modelFor */ } from '../../module/k8s';\nimport { ResourceLink } from '@console/internal/components/utils';\nimport { referenceFor } from '@console/internal/module/k8s';\nimport { useTranslation } from 'react-i18next';\n\nexport const Resources: React.SFC<ResourcesProps> = ({ conditions, registry, namespace }) => {\n  const { t } = useTranslation();\n\n  const rows = conditions?.map?.((condition: K8sResourceCondition, i: number) => {\n\n    if (condition.type.includes('Exist')) {\n      let kind = condition.type.replace('Exist', '');\n      kind = kind.replace('Realm', 'Resources');\n      let name;\n      if (kind === 'SecretTls') {\n        name = `hpcd-tls-${registry}`;\n        kind = 'Secret';\n      } else if (kind === 'SecretOpaque') {\n        name = `hpcd-tls-${registry}`;\n        kind = 'Secret';\n      } else if (kind === 'SecretDockerConfigJson') {\n        name = `hpcd-registry-${registry}`;\n        kind = 'Secret';\n      } else if (kind === 'Pvc') {\n        name = `hpcd-${registry}`;\n        kind = 'PersistentVolumeClaim';\n      } else if (kind === 'Notary') {\n        name = registry;\n      } else {\n        name = `hpcd-${registry}`;\n      }\n\n      return (\n        <div className=\"row\" data-test-id={condition.type} key={i}>\n          <div className=\"col-xs-6 col-sm-4 col-md-4\">\n            {kind}\n          </div>\n          <div className=\"col-xs-6 col-sm-4 col-md-4\">\n            {\n              !condition.type.includes('Keycloak') ? <ResourceLink kind={referenceFor({ kind, apiVersion: 'tmax.io/v1' })} namespace={namespace} name={name}\n              /> : ''\n            }\n          </div>\n          <div className=\"col-xs-6 col-sm-4 col-md-4\" data-test-id=\"status\">\n            {condition.status}\n          </div>\n        </div>\n      );\n    }\n  });\n\n  return (\n    <>\n      {conditions?.length ? (\n        <div className=\"co-m-table-grid co-m-table-grid--bordered\">\n          <div className=\"row co-m-table-grid__head\">\n            <div className=\"col-xs-6 col-sm-4 col-md-4\">{t('COMMON:MSG_DETAILS_TABDETAILS_RESOURCES_TABLEHEADER_1')}</div>\n            <div className=\"col-xs-6 col-sm-4 col-md-4\">{t('COMMON:MSG_DETAILS_TABDETAILS_RESOURCES_TABLEHEADER_2')}</div>\n            <div className=\"col-xs-6 col-sm-4 col-md-4\">{t('COMMON:MSG_DETAILS_TABDETAILS_RESOURCES_TABLEHEADER_3')}</div>\n          </div>\n          <div className=\"co-m-table-grid__body\">{rows}</div>\n        </div>\n      ) : (\n        <div className=\"cos-status-box\">\n          <div className=\"text-center\">No Conditions Found</div>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport type ResourcesProps = {\n  conditions: K8sResourceCondition[];\n  registry: string;\n  namespace: string;\n};\n"],"mappings":";;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AAEA;;AACA;AAEA;AAEA;AACA;AAEA;AAGA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AAEA;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAUA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAGA;AAMA;AAKA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AAIA;AAKA;;;;;A","sourceRoot":""}