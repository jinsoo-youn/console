{"version":3,"file":"configure-cluster-nodes-modal-eccb6482558a02778d19.js","sources":["webpack:///./public/components/hypercloud/modals/configure-count-modal.tsx","webpack:///./public/components/hypercloud/utils/section.tsx"],"sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\n\nimport { k8sPatch, K8sResourceKind, K8sKind } from '../../../module/k8s';\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter } from '../../factory/modal';\nimport { NumberSpinner, withHandlePromise } from '../../utils';\nimport { Section } from '../utils/section';\n\nexport const ConfigureCountModal = withHandlePromise((props: ConfigureCountModalProps) => {\n    console.log('configure count modal');\n    console.log({ props });\n\n    const getPath1 = props.path1.substring(1).replace('/', '.');\n    const [value1, setValue1] = React.useState<number>(\n        _.get(props.resource, getPath1) || props.defaultValue,\n    );\n\n    const getPath2 = props.path2.substring(1).replace('/', '.');\n    const [value2, setValue2] = React.useState<number>(\n        _.get(props.resource, getPath2) || props.defaultValue,\n    );\n\n    const submit = (e) => {\n        e.preventDefault();\n\n        const patch1 = [{ op: 'replace', path: props.path1, value: _.toInteger(value1) }];\n\n        const patch2 = [{ op: 'replace', path: props.path2, value: _.toInteger(value2) }];\n\n        const invalidateState = props.invalidateState || _.noop;\n\n        invalidateState(true, _.toInteger(value1));\n\n        invalidateState(true, _.toInteger(value2));\n\n        props\n            .handlePromise(k8sPatch(props.resourceKind, props.resource, patch1))\n            .then(props.close)\n            .catch((error) => {\n                invalidateState(false);\n                throw error;\n            });\n\n        props\n            .handlePromise(k8sPatch(props.resourceKind, props.resource, patch2))\n            .then(props.close)\n            .catch((error) => {\n                invalidateState(false);\n                throw error;\n            });\n    };\n\n    return (\n        <form onSubmit={submit} name=\"form\" className=\"modal-content \">\n            <ModalTitle>{props.title}</ModalTitle>\n            <ModalBody>\n                <p>{props.message}</p>\n                <Section label=\"Master Node\" id=\"master-node\">\n                    <NumberSpinner\n                        className=\"pf-c-form-control\"\n                        value={value1}\n                        onChange={(e: any) => setValue1(e.target.value)}\n                        changeValueBy={(operation) => setValue1(_.toInteger(value1) + operation * 2)}\n                        autoFocus\n                        required\n                        min={1}\n                    />\n                </Section>\n                <Section label=\"Worker Node\" id=\"worker-node\">\n                    <NumberSpinner\n                        className=\"pf-c-form-control\"\n                        value={value2}\n                        onChange={(e: any) => setValue2(e.target.value)}\n                        changeValueBy={(operation) => setValue2(_.toInteger(value2) + operation)}\n                        autoFocus\n                        required\n                        min={1}\n                    />\n                </Section>\n            </ModalBody>\n            <ModalSubmitFooter\n                errorMessage={props.errorMessage}\n                inProgress={props.inProgress}\n                submitText={props.buttonText}\n                cancel={props.cancel}\n            />\n        </form>\n    );\n});\n\nexport const configureCountModal = createModalLauncher(ConfigureCountModal);\n\nexport const configureClusterNodesModal = (props) => {\n    console.log('configure cluster nodes modal');\n    console.log({ props });\n    return configureCountModal(\n        _.defaults(\n            {},\n            {\n                defaultValue: 1,\n                title: 'Edit Nodes',\n                message: `Master node and worker node can be scaled.`,\n                // path: '/spec/masterNum',\n                path1: '/spec/masterNum',\n                path2: '/spec/workerNum',\n                buttonText: 'Save',\n            },\n            props,\n        )\n    )\n}\n\nexport type ConfigureCountModalProps = {\n    message: string;\n    buttonText: string;\n    defaultValue: number;\n    // path: string;\n    path1: string;\n    path2: string;\n    resource: K8sResourceKind;\n    resourceKind: K8sKind;\n    title: string;\n    invalidateState?: (isInvalid: boolean, count?: number) => void;\n    handlePromise: <T>(promise: Promise<T>) => Promise<T>;\n    inProgress: boolean;\n    errorMessage: string;\n    cancel?: () => void;\n    close?: () => void;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\n\nconst Node = ({ className, children, description }) => (\n  <div className={className}>\n    <div>{children}</div>\n    <p className=\"help-block\">{description}</p>\n  </div>\n);\n\nconst CombineNodes = (id, label, description, children, isRequired) => {\n  // children node 개수에 따라 가로 분할 class 적용\n  let isArray = Array.isArray(children);\n  let className = isArray ? `col-md-${12 / children.length}` : 'col-md-12';\n  return isArray ? children.map(cur => <Node className={className} children={cur} description={description} />) : <Node className={className} children={children} description={description} />;\n};\n\nexport const Section: React.FC<SectionProps> = ({ id, label, description, children, isRequired = false }) => {\n  let result = CombineNodes(id, label, description, children, isRequired);\n  return (\n    <div className=\"form-group\">\n      {label && (\n        <label className={'control-label ' + (isRequired ? 'co-required' : '')} htmlFor={id}>\n          {label}\n        </label>\n      )}\n      <div className=\"row\">{result}</div>\n    </div>\n  );\n};\n\ntype SectionProps = {\n  id: string;\n  children: Array<React.ReactNode> | React.ReactNode;\n  label?: string;\n  description?: string;\n  isRequired?: boolean;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAIA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAUA;AACA;AAWA;AAQA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;;;;;;;;;;;;AC7GA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AAGA;;;;;A","sourceRoot":""}