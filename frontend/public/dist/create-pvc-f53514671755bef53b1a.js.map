{"version":3,"file":"create-pvc-f53514671755bef53b1a.js","sources":["webpack:///./public/components/checkbox.tsx","webpack:///./public/components/storage/create-pvc.tsx"],"sourcesContent":["import * as React from 'react';\n\nexport const Checkbox: React.SFC<CheckboxProps> = ({ name, label, checked, onChange }) => (\n  <div className=\"form-group\">\n    <div className=\"checkbox\">\n      <label className=\"control-label\">\n        <input\n          className=\"form-checkbox\"\n          name={name}\n          onChange={onChange}\n          checked={checked}\n          type=\"checkbox\"\n        />\n        {label}\n      </label>\n    </div>\n  </div>\n);\n\nexport type CheckboxProps = {\n  name: string;\n  label: string;\n  onChange: React.ReactEventHandler<HTMLInputElement>;\n  checked: boolean;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Link } from 'react-router-dom';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { isCephProvisioner, isObjectSC } from '@console/shared/src/utils';\nimport { k8sCreate, K8sResourceKind, referenceFor } from '../../module/k8s';\nimport { AsyncComponent, ButtonBar, RequestSizeInput, history, resourceObjPath } from '../utils';\nimport { StorageClassDropdown } from '../utils/storage-class-dropdown';\nimport { RadioInput } from '../radio';\nimport { Checkbox } from '../checkbox';\nimport { PersistentVolumeClaimModel } from '../../models';\nimport { StorageClass } from '../storage-class-form';\n\nconst NameValueEditorComponent = (props) => (\n  <AsyncComponent\n    loader={() => import('../utils/name-value-editor').then((c) => c.NameValueEditor)}\n    {...props}\n  />\n);\n\nconst cephRBDProvisionerSuffix = 'rbd.csi.ceph.com';\n\n//See https://kubernetes.io/docs/concepts/storage/persistent-volumes/#types-of-persistent-volumes for more details\nconst provisionerAccessModeMapping = {\n  'kubernetes.io/no-provisioner': ['ReadWriteOnce'],\n  'kubernetes.io/aws-ebs': ['ReadWriteOnce'],\n  'kubernetes.io/gce-pd': ['ReadWriteOnce', 'ReadOnlyMany'],\n  'kubernetes.io/glusterfs': ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'],\n  'kubernetes.io/cinder': ['ReadWriteOnce'],\n  'kubernetes.io/azure-file': ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'],\n  'kubernetes.io/azure-disk': ['ReadWriteOnce'],\n  'kubernetes.io/quobyte': ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'],\n  'kubernetes.io/rbd': ['ReadWriteOnce', 'ReadOnlyMany'],\n  'kubernetes.io/vsphere-volume': ['ReadWriteOnce', 'ReadWriteMany'],\n  'kubernetes.io/portworx-volume': ['ReadWriteOnce', 'ReadWriteMany'],\n  'kubernetes.io/scaleio': ['ReadWriteOnce', 'ReadOnlyMany'],\n  'kubernetes.io/storageos': ['ReadWriteOnce'],\n};\n\n// This form is done a little odd since it is used in both its own page and as\n// a sub form inside the attach storage page.\nexport const CreatePVCForm: React.FC<CreatePVCFormProps> = (props) => {\n  const [accessModeHelp, setAccessModeHelp] = React.useState('Permissions to the mounted drive.');\n  const [allowedAccessModes, setAllowedAccessModes] = React.useState([\n    'ReadWriteOnce',\n    'ReadWriteMany',\n    'ReadOnlyMany',\n  ]);\n  const [storageClass, setStorageClass] = React.useState('');\n  const [pvcName, setPvcName] = React.useState('');\n  const [accessMode, setAccessMode] = React.useState('ReadWriteOnce');\n  const [requestSizeValue, setRequestSizeValue] = React.useState('');\n  const [requestSizeUnit, setRequestSizeUnit] = React.useState('Gi');\n  const [useSelector, setUseSelector] = React.useState(false);\n  const [nameValuePairs, setNameValuePairs] = React.useState([['', '']]);\n  const [storageProvisioner, setStorageProvisioner] = React.useState('');\n  const accessModeRadios = [\n    {\n      value: 'ReadWriteOnce',\n      title: 'Single User (RWO)',\n    },\n    {\n      value: 'ReadWriteMany',\n      title: 'Shared Access (RWX)',\n    },\n    {\n      value: 'ReadOnlyMany',\n      title: 'Read Only (ROX)',\n    },\n  ];\n  const dropdownUnits = {\n    Mi: 'MiB',\n    Gi: 'GiB',\n    Ti: 'TiB',\n  };\n  const { namespace, onChange } = props;\n\n  React.useEffect(() => {\n    const getSelector = () => {\n      if (!useSelector) {\n        return null;\n      }\n\n      const matchLabels = _.reduce(\n        nameValuePairs,\n        (acc, [key, value]) => {\n          return key ? { ...acc, [key]: value } : acc;\n        },\n        {},\n      );\n\n      return _.isEmpty(matchLabels) ? null : { matchLabels };\n    };\n    const updatePVC = (): K8sResourceKind => {\n      const obj: K8sResourceKind = {\n        apiVersion: 'v1',\n        kind: 'PersistentVolumeClaim',\n        metadata: {\n          name: pvcName,\n          namespace,\n        },\n        spec: {\n          accessModes: [accessMode],\n          resources: {\n            requests: {\n              storage: `${requestSizeValue}${requestSizeUnit}`,\n            },\n          },\n        },\n      };\n\n      // Add the selector only if specified.\n      const selector = getSelector();\n      if (selector) {\n        obj.spec.selector = selector;\n      }\n\n      if (storageClass) {\n        obj.spec.storageClassName = storageClass;\n\n        // should set block only for RBD + RWX\n        if (\n          _.endsWith(storageProvisioner, cephRBDProvisionerSuffix) &&\n          accessMode === 'ReadWriteMany'\n        ) {\n          obj.spec.volumeMode = 'Block';\n        }\n      }\n\n      return obj;\n    };\n    onChange(updatePVC);\n  }, [\n    accessMode,\n    namespace,\n    nameValuePairs,\n    pvcName,\n    onChange,\n    storageClass,\n    requestSizeValue,\n    requestSizeUnit,\n    useSelector,\n    storageProvisioner,\n  ]);\n\n  const handleNameValuePairs = ({ nameValuePairs: updatedNameValuePairs }) => {\n    setNameValuePairs(updatedNameValuePairs);\n  };\n\n  const getAccessModeForProvisioner = (provisioner: string) => {\n    return provisioner && isCephProvisioner(provisioner)\n      ? ['ReadWriteOnce', 'ReadWriteMany']\n      : ['ReadWriteOnce', 'ReadWriteMany', 'ReadOnlyMany'];\n  };\n\n  const handleStorageClass = (updatedStorageClass) => {\n    const provisioner: string = updatedStorageClass?.provisioner || '';\n    //if the provisioner is unknown or no storage class selected, user should be able to set any access mode\n    const modes = provisionerAccessModeMapping[provisioner]\n      ? provisionerAccessModeMapping[provisioner]\n      : getAccessModeForProvisioner(provisioner);\n    //setting message to display for various modes when a storage class of a know provisioner is selected\n    const displayMessage =\n      provisionerAccessModeMapping[provisioner] || isCephProvisioner(provisioner)\n        ? 'Access mode is set by storage class and cannot be changed.'\n        : 'Permissions to the mounted drive.';\n    setAccessMode('ReadWriteOnce');\n    setAccessModeHelp(displayMessage);\n    //setting accessMode to default with the change to Storage Class selection\n    setAllowedAccessModes(modes);\n    setStorageClass(updatedStorageClass?.metadata?.name);\n    setStorageProvisioner(provisioner);\n  };\n\n  const handleRequestSizeInputChange = (obj) => {\n    setRequestSizeValue(obj.value);\n    setRequestSizeUnit(obj.unit);\n  };\n\n  const handleUseSelector: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    setUseSelector(event.currentTarget.checked);\n  };\n\n  const handlePvcName: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    setPvcName(event.currentTarget.value);\n  };\n\n  const handleAccessMode: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    setAccessMode(event.currentTarget.value);\n  };\n\n  const onlyPvcSCs = React.useCallback((sc: StorageClass) => !isObjectSC(sc), []);\n\n  return (\n    <div>\n      <div className=\"form-group\">\n        <StorageClassDropdown\n          onChange={handleStorageClass}\n          id=\"storageclass-dropdown\"\n          describedBy=\"storageclass-dropdown-help\"\n          required={false}\n          name=\"storageClass\"\n          filter={onlyPvcSCs}\n        />\n      </div>\n      <label className=\"control-label co-required\" htmlFor=\"pvc-name\">\n        Persistent Volume Claim Name\n      </label>\n      <div className=\"form-group\">\n        <input\n          className=\"pf-c-form-control\"\n          type=\"text\"\n          onChange={handlePvcName}\n          placeholder=\"my-storage-claim\"\n          aria-describedby=\"pvc-name-help\"\n          id=\"pvc-name\"\n          name=\"pvcName\"\n          required\n        />\n        <p className=\"help-block\" id=\"pvc-name-help\">\n          A unique name for the storage claim within the project.\n        </p>\n      </div>\n      <label className=\"control-label co-required\" htmlFor=\"access-mode\">\n        Access Mode\n      </label>\n      <div className=\"form-group\">\n        {accessModeRadios.map((radio) => {\n          let radioObj = null;\n          const disabled = !allowedAccessModes.includes(radio.value);\n\n          allowedAccessModes.forEach((mode) => {\n            const checked = !disabled ? radio.value === accessMode : radio.value === mode;\n            radioObj = (\n              <RadioInput\n                {...radio}\n                key={radio.value}\n                onChange={handleAccessMode}\n                inline={true}\n                disabled={disabled}\n                checked={checked}\n                aria-describedby=\"access-mode-help\"\n                name=\"accessMode\"\n              />\n            );\n          });\n\n          return radioObj;\n        })}\n        <p className=\"help-block\" id=\"access-mode-help\">\n          {accessModeHelp}\n        </p>\n      </div>\n      <label className=\"control-label co-required\" htmlFor=\"request-size-input\">\n        Size\n      </label>\n      <RequestSizeInput\n        name=\"requestSize\"\n        required\n        onChange={handleRequestSizeInputChange}\n        defaultRequestSizeUnit={requestSizeUnit}\n        defaultRequestSizeValue={requestSizeValue}\n        dropdownUnits={dropdownUnits}\n        describedBy=\"request-size-help\"\n        inputID=\"request-size-input\"\n      />\n      <p className=\"help-block\" id=\"request-size-help\">\n        Desired storage capacity.\n      </p>\n      <Checkbox\n        label=\"Use label selectors to request storage\"\n        onChange={handleUseSelector}\n        checked={useSelector}\n        name=\"showLabelSelector\"\n      />\n      <div className=\"form-group\">\n        {useSelector && (\n          <NameValueEditorComponent\n            nameValuePairs={nameValuePairs}\n            valueString=\"Selector\"\n            nameString=\"Label\"\n            addString=\"Add Value\"\n            readOnly={false}\n            allowSorting={false}\n            updateParentData={handleNameValuePairs}\n          />\n        )}\n        <p className=\"help-block\" id=\"label-selector-help\">\n          Use label selectors to define how storage is created.\n        </p>\n      </div>\n    </div>\n  );\n};\n\nexport const CreatePVCPage: React.FC<CreatePVCPageProps> = (props) => {\n  const [error, setError] = React.useState('');\n  const [inProgress, setInProgress] = React.useState(false);\n  const [pvcObj, setPvcObj] = React.useState(null);\n  const title = 'Create Persistent Volume Claim';\n  const { namespace } = props;\n\n  const save = (e: React.FormEvent<EventTarget>) => {\n    e.preventDefault();\n    setInProgress(true);\n    k8sCreate(PersistentVolumeClaimModel, pvcObj).then(\n      (resource) => {\n        setInProgress(false);\n        history.push(resourceObjPath(resource, referenceFor(resource)));\n      },\n      ({ message }: { message: string }) => {\n        setError(message || 'Could not create persistent volume claim.');\n        setInProgress(false);\n      },\n    );\n  };\n\n  return (\n    <div className=\"co-m-pane__body co-m-pane__form\">\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <h1 className=\"co-m-pane__heading co-m-pane__heading--baseline\">\n        <div className=\"co-m-pane__name\">{title}</div>\n        <div className=\"co-m-pane__heading-link\">\n          <Link to={`/k8s/ns/${namespace}/persistentvolumeclaims/~new`} id=\"yaml-link\" replace>\n            Edit YAML\n          </Link>\n        </div>\n      </h1>\n      <form className=\"co-m-pane__body-group\" onSubmit={save}>\n        <CreatePVCForm onChange={setPvcObj} namespace={namespace} />\n        <ButtonBar errorMessage={error} inProgress={inProgress}>\n          <ActionGroup className=\"pf-c-form\">\n            <Button id=\"save-changes\" type=\"submit\" variant=\"primary\">\n              Create\n            </Button>\n            <Button onClick={history.goBack} type=\"button\" variant=\"secondary\">\n              Cancel\n            </Button>\n          </ActionGroup>\n        </ButtonBar>\n      </form>\n    </div>\n  );\n};\n\nexport const CreatePVC = ({ match: { params } }) => {\n  return <CreatePVCPage namespace={params.ns} />;\n};\n\nexport type CreatePVCFormProps = {\n  namespace: string;\n  onChange: (K8sResourceKind) => void;\n};\n\nexport type CreatePVCPageProps = {\n  namespace: string;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAOA;;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AASA;AAGA;AACA;AAUA;AAIA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAYA;AAEA;AACA;AACA;AAIA;AAGA;AAUA;AAGA;AAMA;AACA;AAWA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAGA;AAQA;AAEA;AACA;AACA;;;;;A","sourceRoot":""}