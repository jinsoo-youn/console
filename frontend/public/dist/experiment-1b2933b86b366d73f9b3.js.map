{"version":3,"file":"experiment-1b2933b86b366d73f9b3.js","sources":["webpack:///./public/components/hypercloud/experiment.tsx"],"sourcesContent":["import * as _ from 'lodash';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\n\nimport { K8sResourceKind } from '../../module/k8s';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from '../factory';\nimport { DetailsItem, Kebab, KebabAction, detailsPage, navFactory, ResourceKebab, ResourceLink, ResourceSummary, SectionHeading } from '../utils';\nimport { ExperimentModel } from '../../models';\nimport { ResourceLabel } from '../../models/hypercloud/resource-plural';\n\nexport const menuActions: KebabAction[] = [...Kebab.getExtensionsActionsForKind(ExperimentModel), ...Kebab.factory.common];\n\nconst kind = ExperimentModel.kind;\n\nconst tableColumnClasses = ['', '', classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), Kebab.columnClass];\n\nconst ExperimentTableHeader = (t?: TFunction) => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_2'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: '알고리즘 이름',\n      sortField: 'pec.algorithm.algorithmName',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: '트라이얼 개수',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: '최적화 상태',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_3'),\n      transforms: [sortable],\n      props: { className: tableColumnClasses[5] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[6] },\n    },\n  ];\n};\nExperimentTableHeader.displayName = 'ExperimentTableHeader';\n\nconst ExperimentTableRow: RowFunction<K8sResourceKind> = ({ obj: experiment, index, key, style }) => {\n  let experimentectiveMetricName = experiment.spec.experimentective?.experimentectiveMetricName;\n  let currentOptimal = experimentectiveMetricName && experiment.status.currentOptimalTrial.observation.metrics ? experiment.status.currentOptimalTrial.observation.metrics.find(metric => metric.name === experimentectiveMetricName) : { value: 0 };\n  let optimal = currentOptimal.value + '/' + experiment.spec.experimentective?.goal;\n  return (\n    <TableRow id={experiment.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={experiment.metadata.name} namespace={experiment.metadata.namespace} title={experiment.metadata.uid} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={experiment.metadata.namespace} title={experiment.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        {experiment.spec.algorithm.algorithmName}\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        {experiment.status.trials + '/' + experiment.spec.maxTrialCount}\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        {optimal}\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        {experiment.status.conditions.length ? experiment.status.conditions[experiment.status.conditions.length - 1].type : ''}\n      </TableData>\n      <TableData className={tableColumnClasses[6]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={experiment} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport const ExperimentDetailsList: React.FC<ExperimentDetailsListProps> = ({ experiment }) => {\n  let objectiveMetricName = experiment.spec.objective.objectiveMetricName;\n  const metrics = _.get(experiment, 'status.currentOptimalTrial.observation.metrics');\n  let currentOptimal = objectiveMetricName && Array.isArray(metrics) ? metrics.find(metric => metric.name === objectiveMetricName) : { value: 0 };\n  let optimal = currentOptimal.value + '/' + experiment.spec.objective?.goal;\n\n  const { t } = useTranslation();\n  return (\n    <dl className=\"co-m-pane__details\">\n      <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_45')} obj={experiment} path=\"status.conditions\">\n        {experiment.status.conditions.length ? experiment.status.conditions[experiment.status.conditions.length - 1].type : ''}\n      </DetailsItem>\n      <DetailsItem label={t('알고리즘 이름')} obj={experiment} path=\"spec.algorithm.algorithmName\">\n        {experiment.spec.algorithm.algorithmName}\n      </DetailsItem>\n      <DetailsItem label={t('트라이얼 개수')} obj={experiment} path=\"status.currentNumberScheduled\">\n        {experiment.status.trials + '/' + experiment.spec.maxTrialCount}\n      </DetailsItem>\n      <DetailsItem label={t('최적화 상태')} obj={experiment} path=\"status.desiredNumberScheduled\">\n        {optimal}\n      </DetailsItem>\n    </dl>\n  );\n}\n\nconst ExperimentDetails: React.FC<ExperimentDetailsProps> = ({ obj: experiment }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n      <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', { 0: ResourceLabel(experiment, t) })}/>\n        <div className=\"row\">\n          <div className=\"col-lg-6\">\n            <ResourceSummary resource={experiment} />\n          </div>\n          <div className=\"col-lg-6\">\n            <ExperimentDetailsList experiment={experiment} />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst { details, editYaml } = navFactory;\nexport const Experiments: React.FC = props => {\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"Experiments\" Header={ExperimentTableHeader.bind(null, t)} Row={ExperimentTableRow} virtualize />;\n}\n\nexport const ExperimentsPage: React.FC<ExperimentsPageProps> = props => <ListPage canCreate={true} ListComponent={Experiments} kind={kind} {...props} />;\n\nexport const ExperimentsDetailsPage: React.FC<ExperimentsDetailsPageProps> = props => <DetailsPage {...props} kind={kind} menuActions={menuActions} pages={[details(detailsPage(ExperimentDetails)), editYaml()]} />;\n\ntype ExperimentDetailsListProps = {\n  experiment: K8sResourceKind;\n};\n\ntype ExperimentDetailsProps = {\n  obj: K8sResourceKind;\n};\n\ntype ExperimentsPageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: any;\n};\n\ntype ExperimentsDetailsPageProps = {\n  match: any;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AAGA;AAGA;AAGA;AACA;AAIA;AAEA;;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAGA;AAGA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;A","sourceRoot":""}