{"version":3,"file":"template-instance-622681f7c836a02e958e.js","sources":["webpack:///./public/components/template-instance.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\n\nimport { Status } from '@console/shared';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from './factory';\nimport { Conditions } from './conditions';\nimport { getTemplateInstanceStatus, referenceFor, TemplateInstanceKind } from '../module/k8s';\nimport {\n  EmptyBox,\n  Kebab,\n  navFactory,\n  ResourceKebab,\n  ResourceLink,\n  ResourceSummary,\n  SectionHeading,\n} from './utils';\n\nconst menuActions = Kebab.factory.common;\n\nconst tableColumnClasses = [\n  classNames('col-sm-5', 'col-xs-6'),\n  classNames('col-sm-5', 'col-xs-6'),\n  classNames('col-sm-2', 'hidden-xs'),\n  Kebab.columnClass,\n];\n\nconst TemplateInstanceTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Status',\n      sortFunc: 'getTemplateInstanceStatus',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[3] },\n    },\n  ];\n};\nTemplateInstanceTableHeader.displayName = 'TemplateInstanceTableHeader';\n\nconst TemplateInstanceTableRow: RowFunction<TemplateInstanceKind> = ({\n  obj,\n  index,\n  key,\n  style,\n}) => {\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={classNames(tableColumnClasses[0], 'co-break-word')}>\n        <ResourceLink\n          kind=\"TemplateInstance\"\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n        />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Status status={getTemplateInstanceStatus(obj)} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <ResourceKebab actions={menuActions} kind=\"TemplateInstance\" resource={obj} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport const TemplateInstanceList: React.SFC = (props) => (\n  <Table\n    {...props}\n    aria-label=\"Template Instances\"\n    Header={TemplateInstanceTableHeader}\n    Row={TemplateInstanceTableRow}\n    virtualize\n  />\n);\n\nconst allStatuses = ['Ready', 'Not Ready', 'Failed'];\n\nconst filters = [\n  {\n    filterGroupName: 'Status',\n    type: 'template-instance-status',\n    reducer: getTemplateInstanceStatus,\n    items: _.map(allStatuses, (status) => ({\n      id: status,\n      title: status,\n    })),\n  },\n];\n\nexport const TemplateInstancePage: React.SFC<TemplateInstancePageProps> = (props) => (\n  <ListPage\n    {...props}\n    title=\"Template Instances\"\n    kind=\"TemplateInstance\"\n    ListComponent={TemplateInstanceList}\n    canCreate={false}\n    rowFilters={filters}\n  />\n);\n\nconst TemplateInstanceDetails: React.SFC<TemplateInstanceDetailsProps> = ({ obj }) => {\n  const status = getTemplateInstanceStatus(obj);\n  const secretName = _.get(obj, 'spec.secret.name');\n  const requester = _.get(obj, 'spec.requester.username');\n  const objects = _.get(obj, 'status.objects', []);\n  const conditions = _.get(obj, 'status.conditions', []);\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Template Instance Details\" />\n        <div className=\"co-m-pane__body-group\">\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <ResourceSummary resource={obj} />\n            </div>\n            <div className=\"col-sm-6\">\n              <dl className=\"co-m-pane__details\">\n                <dt>Status</dt>\n                <dd>\n                  <Status status={status} />\n                </dd>\n                {secretName && (\n                  <>\n                    <dt>Parameters</dt>\n                    <dd>\n                      <ResourceLink\n                        kind=\"Secret\"\n                        name={secretName}\n                        namespace={obj.metadata.namespace}\n                      />\n                    </dd>\n                  </>\n                )}\n                <dt>Requester</dt>\n                <dd>{requester || '-'}</dd>\n              </dl>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Objects\" />\n        <div className=\"co-m-table-grid co-m-table-grid--bordered\">\n          <div className=\"row co-m-table-grid__head\">\n            <div className=\"col-sm-6\">Name</div>\n            <div className=\"col-sm-6\">Namespace</div>\n          </div>\n          <div className=\"co-m-table-grid__body\">\n            {_.isEmpty(objects) ? (\n              <EmptyBox label=\"Objects\" />\n            ) : (\n              _.map(objects, ({ ref }, i) => (\n                <div className=\"row co-resource-list__item\" key={i}>\n                  <div className=\"col-sm-6\">\n                    <ResourceLink\n                      kind={referenceFor(ref)}\n                      name={ref.name}\n                      namespace={ref.namespace}\n                    />\n                  </div>\n                  <div className=\"col-sm-6\">\n                    {ref.namespace ? <ResourceLink kind=\"Namespace\" name={ref.namespace} /> : '-'}\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Conditions\" />\n        <Conditions conditions={conditions} />\n      </div>\n    </>\n  );\n};\n\nexport const TemplateInstanceDetailsPage: React.SFC<TemplateInstanceDetailsPageProps> = (props) => (\n  <DetailsPage\n    {...props}\n    kind=\"TemplateInstance\"\n    menuActions={menuActions}\n    pages={[navFactory.details(TemplateInstanceDetails), navFactory.editYaml()]}\n  />\n);\n\ntype TemplateInstancePageProps = {\n  autoFocus?: boolean;\n  showTitle?: boolean;\n};\n\ntype TemplateInstanceDetailsProps = {\n  obj: TemplateInstanceKind;\n};\n\ntype TemplateInstanceDetailsPageProps = {\n  match: any;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAEA;AACA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAEA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAQA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AAMA;AASA;AACA;AACA;AAIA;AAEA;;;;;A","sourceRoot":""}