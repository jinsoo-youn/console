{"version":3,"file":"25-8f249ec9e7925344e9a6.js","sources":["webpack:///./public/components/hypercloud/create-sample.tsx","webpack:///./public/components/hypercloud/form/create-form.tsx","webpack:///./public/components/hypercloud/utils/dropdown.jsx","webpack:///./public/components/hypercloud/utils/inputSelectBox.tsx","webpack:///./public/components/hypercloud/utils/key-value-list-editor.tsx","webpack:///./public/components/hypercloud/utils/list-view.tsx","webpack:///./public/components/hypercloud/utils/number-spinner.tsx","webpack:///./public/components/hypercloud/utils/radio.tsx","webpack:///./public/components/hypercloud/utils/resource-list-dropdown.tsx","webpack:///./public/components/hypercloud/utils/section.tsx","webpack:///./public/components/hypercloud/utils/tags-label.jsx"],"sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { match as RMatch } from 'react-router';\nimport { useFormContext, Controller } from 'react-hook-form';\nimport { WithCommonForm } from './form/create-form';\nimport { SelectorInput } from '../utils';\nimport { RadioGroup } from './utils/radio';\nimport { Section } from './utils/section';\nimport { InputSelectBox } from './utils/inputSelectBox';\nimport { Dropdown, ContainerDropdown } from './utils/dropdown';\nimport { ResourceListDropdown, ResourceListDropdownWithDataToolbar } from './utils/resource-list-dropdown';\nimport { KeyValueListEditor } from './utils/key-value-list-editor';\nimport { TagsLabel } from './utils/tags-label';\nimport { NumberSpinner } from './utils/number-spinner';\nimport { ListView } from './utils/list-view';\nimport { Button } from '@patternfly/react-core';\n\nconst defaultValues = {\n  // requestDo에 넣어줄 형식으로 defaultValues 작성\n  metadata: {\n    name: 'test-name',\n    keyvaluelist: [\n      { key: 'A', value: 'aaa' },\n      { key: 'B', value: 'bbb' },\n      { key: 'C', value: 'ccc' },\n      { key: 'D', value: 'ddd' },\n      { key: 'E', value: 'eee' },\n    ],\n    tags: ['AAA', 'BBB'],\n  },\n  spec: {\n    resources: 'cpu',\n  },\n  keyValueList: [\n    {\n      key: 'AAA',\n      value: 'aaa',\n    },\n    {\n      key: 'BBB',\n      value: 'bbb',\n    },\n    {\n      key: 'CCC',\n      value: 'ccc',\n    },\n    {\n      key: 'DDD',\n      value: 'ddd',\n    },\n  ],\n  numList: [\n    {\n      name: 'Item1',\n      number: 3,\n    },\n    {\n      name: 'Item2',\n      number: 5,\n    },\n  ],\n  dropdown1: 'Ti',\n};\n\nconst ClusterResourceList = [\n  {\n    \"kind\": \"ClusterManager\",\n    \"apiVersion\": \"cluster.tmax.io/v1alpha1\",\n    \"metadata\": {\n      \"name\": \"jmc-zgw2v\",\n      \"uid\": \"1a482d7d-ac35-46d3-8496-a94688fc6d0e\",\n    },\n    \"fakeMetadata\": {\n      \"fakename\": \"jmc\"\n    },\n  },\n  {\n    \"kind\": \"ClusterClaim\",\n    \"apiVersion\": \"cluster.tmax.io/v1alpha1\",\n    \"metadata\": {\n      \"name\": \"example\",\n      \"uid\": \"436b6e22-748e-4e04-aea5-156f2ed35fa0\",\n    },\n  }\n];\n\nconst sampleFormFactory = params => {\n  return WithCommonForm(CreateSampleComponent, params, defaultValues);\n};\n\nconst CreateSampleComponent: React.FC<SampleFormProps> = props => {\n  const { control } = useFormContext();\n  const [selectedClusterItems, setSelectedClusterItems] = React.useState(new Set<string>([]));\n\n  const updateSelectedClusterItems = (selection: string) => { // selection: {resource}.metadata.uid | 'All'\n    const updateItems = _.cloneDeep(selectedClusterItems);\n    updateItems.has(selection) ? updateItems.delete(selection) : updateItems.add(selection);\n    setSelectedClusterItems(updateItems);\n  };\n\n  const onSelectedItemChange = (items: Set<string>) => {\n    //DO Something\n    console.log(\"hi\")\n  };\n\n  const resources = [\n    // RadioGroup 컴포넌트에 넣어줄 items\n    {\n      title: 'Cpu',\n      value: 'cpu',\n    },\n    {\n      title: 'Gpu',\n      value: 'gpu',\n    },\n    {\n      title: 'Memory',\n      value: 'memory',\n    },\n  ];\n  const dropdownUnits = {\n    Mi: 'MiB',\n    Gi: 'GiB',\n    Ti: 'TiB',\n  };\n  const containers = { test: { name: 'test', order: 0 }, sidecar: { name: 'sidecar' }, sidecar2: { name: 'sidecar2' } };\n  const initContainers = { initupload: { name: 'initupload', order: 0 }, ['place-entrypoint']: { name: 'place-entrypoint' }, ['place-entrypoint2']: { name: 'place-entrypoint2' } };\n\n  const listHeaderFragment = (\n    <div className=\"row pairs-list__heading\">\n      <div className=\"col-xs-4 text-secondary text-uppercase\">NAME</div>\n      <div className=\"col-xs-4 text-secondary text-uppercase\">NUM</div>\n      <div className=\"col-xs-1 co-empty__header\" />\n    </div>\n  );\n\n  const listItemRenderer = (register, item, index, ListActions, ListDefaultIcons) => (\n    <div className=\"row\" key={item.id}>\n      <div className=\"col-xs-4 pairs-list__name-field\">\n        <input ref={register()} className=\"pf-c-form-control\" name={`metadata.numList[${index}].name`} defaultValue={item.name}></input>\n      </div>\n      <div className=\"col-xs-4 pairs-list__value-field\">\n        <NumberSpinner initialValue={item.number} min={-15} max={15} name={`metadata.numList[${index}].number`} />\n      </div>\n      <div className=\"col-xs-1 pairs-list__action\">\n        <Button\n          type=\"button\"\n          data-test-id=\"pairs-list__delete-btn\"\n          className=\"pairs-list__span-btns\"\n          onClick={() => {\n            ListActions.remove(index);\n          }}\n          variant=\"plain\"\n        >\n          {ListDefaultIcons.deleteIcon}\n        </Button>\n      </div>\n    </div>\n  );\n\n  return (\n    <div>\n      <Section label=\"Labels\" id=\"label\" description=\"이것은 Label입니다.\">\n        <Controller name=\"metadata.labels\" id=\"label\" labelClassName=\"co-text-sample\" as={SelectorInput} control={control} tags={[]} />\n      </Section>\n      <Section id=\"resources\" label=\"Radio Group\">\n        <RadioGroup\n          name=\"spec.resources\" // 서버에 보낼 데이터에서의 path (필수)\n          items={resources} // [{title: '', value: ''}] (필수)\n          inline={false} // inline속성 먹일거면 true, 아니면 빼면 됨 (선택)\n        />\n      </Section>\n      <Section id=\"cpu\" label=\"Input Selectbox\">\n        <InputSelectBox textName=\"spec.cpu\" id=\"cpu\" dropdownName=\"spec.cpuRange\" selectedKey=\"Mi\" items={dropdownUnits} />\n      </Section>\n      <Section id=\"section\" label=\"Grid Section\" isRequired={true}>\n        {/* sample로 각각다른 3개 node 넣어봄. 1,2,3,4 개 일 경우 다 정상동작 하는 것 확인.*/}\n        <Section id=\"label\" label=\"Label (for Section)\">\n          <Controller name=\"metadata.section.label\" id=\"label\" labelClassName=\"co-text-sample\" as={SelectorInput} control={control} tags={[]} />\n        </Section>\n        <Section id=\"cpu\" label=\"Input Selectbox (for Section)\">\n          <InputSelectBox textName=\"spec.section.cpu\" id=\"cpu\" dropdownName=\"spec.section.cpuRange\" selectedKey=\"Mi\" items={dropdownUnits} />\n        </Section>\n        <Section id=\"resources\" label=\"Radio Group (for Section)\">\n          <RadioGroup\n            name=\"spec.section.resources\" // 서버에 보낼 데이터에서의 path (필수)\n            items={resources} // [{title: '', value: ''}] (필수)\n            inline={false} // inline속성 먹일거면 true, 아니면 빼면 됨 (선택)\n          />\n        </Section>\n      </Section>\n      <Section id=\"dropdown\" label=\"Dropdown\">\n        <Dropdown\n          name=\"dropdown1\"\n          className=\"btn-group\"\n          items={dropdownUnits} // (필수)\n          required={true}\n          buttonClassName=\"dropdown-btn\" // 선택된 아이템 보여주는 button (title) 부분 className\n          itemClassName=\"dropdown-item\" // 드롭다운 아이템 리스트 전체의 className - 각 row를 의미하는 것은 아님\n        />\n        <ContainerDropdown\n          name=\"containerDropdown1\"\n          containers={containers} // (필수)\n          initContainers={initContainers}\n        />\n      </Section>\n      <Section id=\"resourcelistdropdown\" label=\"Resource List Dropdown\">\n        <ResourceListDropdown\n          resourceList={ClusterResourceList} // 필수\n          selected={[...selectedClusterItems]} // 필수\n          onChange={updateSelectedClusterItems} // 필수\n          showAll={false}\n          title=\"select Resources\" // 드롭다운 title 지정\n          autocompletePlaceholder=\"search by name\"\n          type=\"multiple\" // type: single / multiple\n        />\n        <ResourceListDropdownWithDataToolbar\n          resourceList={ClusterResourceList} // 필수\n          showAll={true} // 드롭다운에 all resource 라는 항목이 생긴다.\n          resourceType=\"Cluster and Cluster Claim\" // title, placeholder, all resources, chip group 에 적용되는 문구 (title, placeholder는 직접 지정하는 것의 우선순위가 더 높음)\n          autocompletePlaceholder=\"search by name\" // 검색란 placeholder\n          onSelectedItemChange={onSelectedItemChange} // 선택된 아이템 리스트 변동될 때마다 호출되는 함수\n        />\n        <ResourceListDropdownWithDataToolbar\n          name=\"ResourceListDropdownWithDataToolbar1\"\n          resourceList={ClusterResourceList} // 필수\n          showAll={false}\n          title=\"select Resources\" // 드롭다운 title 지정\n          resourceType=\"Cluster and Cluster Claim\"\n        />\n      </Section>\n      <Section id=\"numberspinner\" label=\"Number Spinner\">\n        <NumberSpinner\n          initialValue={0}\n          min={-5}\n          max={5}\n          name=\"spinner1\" // 한 페이지에 spinner 여러 개 만들 경우 name에 unique한 값을 넣어줘야 됨 (한개만 만들 땐 name이 필수 아님)\n        />\n      </Section>\n      <Section id=\"tagslabel\" label=\"Tags Label\">\n        <TagsLabel\n          name=\"metadata.tags\" // 서버에 보낼 데이터에서의 path (필수)\n          placeholder=\"Enter tag\" // tag가 없을 때 보여줄 placeholder (선택)\n        />\n      </Section>\n      <Section id=\"list\" label=\"Key Value List\">\n        <KeyValueListEditor\n          name=\"metadata.keyvaluelist\" // 서버에 보낼 데이터에서의 path (필수)\n          disableReorder={false} // 순서바꾸기 제공여부 설정. 기본값은 false (선택)\n        />\n      </Section>\n      <Section id=\"listviewsection1\" label=\"Default Key/Value List View\">\n        <ListView name=\"metadata.keyValueList\" addButtonText=\"Add Key/Value\" />\n      </Section>\n      <Section id=\"listviewsection2\" label=\"Customized List View\">\n        <ListView name=\"metadata.numList\" addButtonText=\"Add Name/Num\" headerFragment={listHeaderFragment} itemRenderer={listItemRenderer} defaultItem={{ name: '', number: 0 }} />\n      </Section>\n    </div>\n  );\n};\n\nexport const CreateSample: React.FC<CreateSampleProps> = props => {\n  const formComponent = sampleFormFactory(props.match.params);\n  const SampleFormComponent = formComponent;\n  return <SampleFormComponent fixed={{}} explanation=\"\" titleVerb=\"Create\" onSubmitCallback={onSubmitCallback} isCreate={true} />;\n};\n\nexport const onSubmitCallback = data => {\n  // submit하기 전에 data를 가공해야 할 경우\n  let labels = SelectorInput.objectify(data.metadata.labels);\n  delete data.metadata.labels;\n  data = _.defaultsDeep(data, { metadata: { labels: labels } });\n  return data;\n};\n\ntype CreateSampleProps = {\n  match: RMatch<{\n    type?: string;\n  }>;\n  fixed: object;\n  explanation: string;\n  titleVerb: string;\n  saveButtonText?: string;\n  isCreate: boolean;\n};\n\ntype SampleFormProps = {\n  onChange: Function;\n  stringData: {\n    [key: string]: string;\n  };\n  isCreate: boolean;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Link } from 'react-router-dom';\nimport { useForm, FormProvider } from 'react-hook-form';\nimport { DevTool } from '@hookform/devtools';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { k8sCreate, referenceFor, K8sResourceKind, modelFor } from '../../../module/k8s';\nimport { pluralToKind } from './';\nimport { ButtonBar, history, resourceObjPath } from '../../utils';\nimport { Section } from '../utils/section';\n\nexport const WithCommonForm = (SubForm, params, defaultValues, modal?: boolean) => {\n  const FormComponent: React.FC<CommonFormProps_> = props => {\n    const methods = useForm({ defaultValues: defaultValues });\n\n    const kind = pluralToKind.get(params.plural)?.['kind'];\n    const title = `${props.titleVerb} ${params?.type === 'form' ? '' : params.type || 'Sample'} ${kind || ''}`;\n\n    const [inProgress] = React.useState(false); // onSubmit이나 나중에 Error관련 메서드에서 inProgress를 false로 변경해줘야함.\n    const model = kind && modelFor(kind);\n    const namespaced = model?.namespaced;\n    const plural = model?.plural;\n\n    const onClick = methods.handleSubmit(data => {\n      let inDo = _.defaultsDeep(props.fixed, data);\n      inDo = props.onSubmitCallback(inDo);\n      k8sCreate(model, inDo);\n      history.push(resourceObjPath(inDo, referenceFor(model)));\n    });\n    return (\n      <FormProvider {...methods}>\n        <div className=\"co-m-pane__body\">\n          <Helmet>\n            <title>{title}</title>\n          </Helmet>\n          <form className=\"co-m-pane__body-group co-m-pane__form\">\n            <h1 className=\"co-m-pane__heading co-m-pane__heading--baseline\">\n              <div className=\"co-m-pane__name\">{title}</div>\n              <div className=\"co-m-pane__heading-link\">\n                <Link to={namespaced ? `/k8s/ns/${params.ns}/${plural}/~new` : `/k8s/cluster/${plural}/~new`} id=\"yaml-link\" replace>\n                  Edit YAML\n                </Link>\n              </div>\n            </h1>\n            <p className=\"co-m-pane__explanation\">{props.explanation}</p>\n            <fieldset>\n              <Section label=\"Name\" id=\"name\" isRequired={true}>\n                <input className=\"pf-c-form-control\" id=\"name\" name=\"metadata.name\" ref={methods.register} />\n              </Section>\n            </fieldset>\n            <SubForm isCreate={props.isCreate} />\n            <ButtonBar inProgress={inProgress}>\n              <ActionGroup className=\"pf-c-form\">\n                <Button type=\"button\" variant=\"primary\" id=\"save-changes\" onClick={onClick}>\n                  {props.saveButtonText || 'Create'}\n                </Button>\n                <Button type=\"button\" variant=\"secondary\" id=\"cancel\" onClick={history.goBack}>\n                  Cancel\n                </Button>\n              </ActionGroup>\n            </ButtonBar>\n          </form>\n          <DevTool control={methods.control} />\n        </div>\n      </FormProvider>\n    );\n  };\n  return FormComponent;\n};\n\ntype CommonFormProps_ = {\n  obj?: K8sResourceKind;\n  fixed: object;\n  isCreate: boolean;\n  titleVerb: string;\n  onSubmitCallback: Function;\n  saveButtonText?: string;\n  explanation?: string;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport * as PropTypes from 'prop-types';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport { ResourceName } from '../../utils/resource-icon';\nimport { useFormContext } from 'react-hook-form';\n\nconst DropDownRow = React.memo((props) => {\n  const {\n    itemKey,\n    content,\n    onClick,\n    hover,\n    selected\n  } = props;\n\n  return (\n    <li key={itemKey}>\n      <button\n        className={classNames(\"pf-c-dropdown__menu-item\", {hover, focus: selected})}\n        id={`${itemKey}-link`}\n        data-test-id=\"dropdown-menu\"\n        data-test-dropdown-menu={itemKey}\n        onClick={(e) => onClick(itemKey, e)}\n      >\n        {content}\n      </button>\n    </li>\n  );\n});\n\nconst Dropdown_ = (props) => {\n  const { register, unregister, setValue, watch } = useFormContext();\n\n  const {\n    name,\n    ariaLabel,\n    className,\n    buttonClassName,\n    menuClassName,\n    dropDownClassName,\n    titlePrefix,\n    describedBy,\n    disabled,\n    required\n  } = props;\n\n  const selectedKey = watch(name);\n\n  const [title, setTitle] = React.useState(_.get(props.items, selectedKey, props.title));\n  const [active, setActive] = React.useState(!!props.active);\n  const [items, setItems] = React.useState(Object.assign({}, props.items));\n  const [keyboardHoverKey, setKeyboardHoverKey] = React.useState(selectedKey);\n\n\n  const dropdownElement = React.useRef();\n  const dropdownList = React.useRef();\n\n  const onWindowClick = (event) => {\n    if (active) {\n      return;\n    }\n\n    const { current } = dropdownElement;\n    if (!current) {\n      return;\n    }\n\n    if (event.target === current || (current && current.contains(event.target))) {\n      return;\n    }\n\n    hide(event);\n  };\n\n  const onClick = (selected, e) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    setValue(name, selected);\n\n    const newTitle = items[selected];\n    setTitle(newTitle);\n\n    hide();\n  };\n\n  const toggle = (e) => {\n    e.preventDefault();\n\n    if (disabled) {\n      return;\n    }\n\n    if (active) {\n      hide(e);\n    } else {\n      show();\n    }\n  };\n\n  const show = () => {\n    window.removeEventListener('click', onWindowClick);\n    window.addEventListener('click', onWindowClick);\n    setActive(true);\n  };\n\n  const hide = (e) => {\n    e && e.stopPropagation();\n    window.removeEventListener('click', onWindowClick);\n    setActive(false);\n  };\n\n  const onKeyDown = (e) => {\n    const { key } = e;\n    if (key === 'Escape') {\n      hide(e);\n      return;\n    }\n\n    if (key !== 'ArrowDown' && key !== 'ArrowUp' && key !== 'Enter') {\n      return;\n    }\n\n    if (key === 'Enter') {\n      if (active && items[keyboardHoverKey]) {\n        onClick(keyboardHoverKey, e);\n      }\n      return;\n    }\n\n    const keys = _.keys(items);\n\n    let index = _.indexOf(keys, keyboardHoverKey);\n\n    if (key === 'ArrowDown') {\n      index += 1;\n    } else {\n      index -= 1;\n    }\n\n    // periodic boundaries\n    if (index >= keys.length) {\n      index = 0;\n    }\n    if (index < 0) {\n      index = keys.length - 1;\n    }\n\n    const newKey = keys[index];\n    setKeyboardHoverKey(newKey);\n    e.stopPropagation();\n  }\n\n  React.useEffect(() => {\n    register({ name }, { required });\n\n    return () => {\n      unregister(name);\n      window.removeEventListener('click', onWindowClick);\n    }\n  }, [name, register, unregister]);\n\n  const spacerBefore = props.spacerBefore || new Set();\n  const headerBefore = props.headerBefore || {};\n  const rows = [];\n\n  const addItem = (key, content) => {\n    const selected = key === selectedKey;\n    const hover = key === keyboardHoverKey;\n    const klass = classNames({ active: selected });\n    if (spacerBefore.has(key)) {\n      rows.push(\n        <li key={`${key}-spacer`}>\n          <div className=\"dropdown-menu__divider\" />\n        </li>,\n      );\n    }\n\n    if (_.has(headerBefore, key)) {\n      rows.push(\n        <li key={`${key}-header`}>\n          <div className=\"dropdown-menu__header\">{headerBefore[key]}</div>\n        </li>,\n      );\n    }\n    rows.push(\n      <DropDownRow\n        className={klass}\n        key={key}\n        itemKey={key}\n        content={content}\n        onClick={onClick}\n        selected={selected}\n        hover={hover}\n      />,\n    );\n  };\n\n  _.each(items, (v, k) => addItem(k, v));\n\n  return (\n    <div className={className} ref={dropdownElement} style={props.style}>\n      <div\n        className={classNames(\n          { 'dropdown pf-c-dropdown': true, 'pf-m-expanded': active },\n          dropDownClassName,\n        )}\n      >\n        <button\n          aria-label={ariaLabel}\n          aria-haspopup=\"true\"\n          aria-expanded={active}\n          aria-describedby={describedBy}\n          className={classNames('pf-c-dropdown__toggle', buttonClassName)}\n          data-test-id=\"dropdown-button\"\n          onClick={toggle}\n          onKeyDown={onKeyDown}\n          type=\"button\"\n          id={props.id}\n          disabled={disabled}\n        >\n          <span className=\"pf-c-dropdown__toggle-text\">\n            {titlePrefix && `${titlePrefix}: `}\n            {title}\n          </span>\n          <CaretDownIcon className=\"pf-c-dropdown__toggle-icon\" />\n        </button>\n        {active && (\n          <ul\n            ref={dropdownList}\n            className={classNames('pf-c-dropdown__menu', menuClassName)}\n          >\n            {rows}\n          </ul>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport const Dropdown = React.memo(Dropdown_);\n\nDropdown.propTypes = {\n  actionItems: PropTypes.arrayOf(\n    PropTypes.shape({\n      actionKey: PropTypes.string,\n      actionTitle: PropTypes.string,\n    }),\n  ),\n  className: PropTypes.string,\n  dropDownClassName: PropTypes.string,\n  headerBefore: PropTypes.objectOf(PropTypes.string),\n  items: PropTypes.object.isRequired,\n  menuClassName: PropTypes.string,\n  buttonClassName: PropTypes.string,\n  spacerBefore: PropTypes.instanceOf(Set),\n  textFilter: PropTypes.string,\n  title: PropTypes.node,\n  disabled: PropTypes.bool,\n};\n\nconst containerLabel = (container) => (\n  <ResourceName name={container ? container.name : ''} kind=\"Container\" />\n);\n\nconst getSpacer = (container) => {\n  const spacerBefore = new Set();\n  return container ? spacerBefore.add(container.name) : spacerBefore;\n};\n\nconst getHeaders = (container, initContainer) => {\n  return initContainer\n    ? {\n      [container.name]: 'Containers',\n      [initContainer.name]: 'Init Containers',\n    }\n    : {};\n};\n\nconst ContainerDropdown_ = (props) => {\n  const { name, containers, initContainers } = props;\n  if (_.isEmpty(containers) && _.isEmpty(initContainers)) {\n    return null;\n  }\n  const firstInitContainer = _.find(initContainers, { order: 0 });\n  const firstContainer = _.find(containers, { order: 0 });\n  const spacerBefore = getSpacer(firstInitContainer);\n  const headerBefore = getHeaders(firstContainer, firstInitContainer);\n  const dropdownItems = _.mapValues(_.merge(containers, initContainers), containerLabel);\n  const title = props.title || containerLabel(firstContainer);\n  return (\n    <Dropdown\n      name={name}\n      className=\"btn-group\"\n      menuClassName=\"dropdown-menu--text-wrap\"\n      headerBefore={headerBefore}\n      items={dropdownItems}\n      spacerBefore={spacerBefore}\n      title={title}\n    />\n  );\n};\n\nexport const ContainerDropdown = React.memo(ContainerDropdown_);\n\nContainerDropdown.propTypes = {\n  containers: PropTypes.oneOfType([PropTypes.object, PropTypes.array]).isRequired,\n  initContainers: PropTypes.object,\n};\n\nContainerDropdown.defaultProps = {\n  initContainers: {},\n};","import * as React from 'react';\nimport { Dropdown } from '../../utils/dropdown';\nimport * as classNames from 'classnames';\nimport { useFormContext, Controller } from 'react-hook-form';\n\nexport const InputSelectBox: React.FC<InputSelectProps> = props => {\n  const { register, control } = useFormContext();\n  const { items, textName, dropdownName, selectedKey, placeholder, required, minValue, inputClassName, id } = props;\n  return (\n    <div className=\"pf-c-input-group\">\n      <input className={classNames('pf-c-form-control', inputClassName)} ref={register} id={id} type=\"number\" placeholder={placeholder} name={textName} required={required} min={minValue} />\n      <Controller as={Dropdown} control={control} selectedKey={selectedKey} name={dropdownName} className=\"btn-group\" items={items} required={required} />\n    </div>\n  );\n};\n\nexport type InputSelectProps = {\n  items: {};\n  textName: string;\n  dropdownName: string;\n  id?: string;\n  selectedKey?: string;\n  placeholder?: string;\n  required?: boolean;\n  minValue?: number;\n  inputClassName?: string;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { useFormContext, useFieldArray } from 'react-hook-form';\nimport { Button } from '@patternfly/react-core';\nimport { PficonDragdropIcon, MinusCircleIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { DragDropContext, Droppable, Draggable } from 'react-beautiful-dnd';\n\nexport const KeyValueListEditor: React.FC<KeyValueListEditorProps> = ({ name, disableReorder = false }) => {\n  const { control, register, getValues } = useFormContext();\n  const { fields, append, remove, move } = useFieldArray<{ key: string; value: string }>({ control, name: name });\n\n  const deleteIcon = (\n    <>\n      <MinusCircleIcon className=\"pairs-list__side-btn pairs-list__delete-icon\" />\n      <span className=\"sr-only\">Delete</span>\n    </>\n  );\n\n  // 중복되는 key 유무에 대한 validation\n  const validateKey = keyInput => {\n    let count = 0;\n    const itemArray = _.get(getValues(), name);\n    for (let item of itemArray) {\n      if (keyInput === item['key'] && ++count > 1) {\n        return false;\n      }\n    }\n    return true;\n  };\n\n  const validateValue = valueInput => {\n    // value에 대한 validation은 아직 없음\n    return true;\n  };\n\n  const onDragEnd = result => {\n    if (!result.destination) {\n      return;\n    }\n\n    if (result.destination.index === result.source.index) {\n      return;\n    }\n\n    move(result.source.index, result.destination.index);\n  };\n\n  const renderList = () => {\n    return fields.map((item, index) => (\n      <Draggable draggableId={item.id} index={index} key={item.id}>\n        {provided => (\n          <div ref={provided.innerRef} {...provided.draggableProps}>\n            <div className={'col-xs-1 pairs-list__action ' + (disableReorder ? 'hide' : '')} {...provided.dragHandleProps}>\n              <PficonDragdropIcon className=\"vertical-center\" />\n            </div>\n            <div className=\"col-xs-5 pairs-list__name-field\">\n              <input type=\"text\" className=\"pf-c-form-control\" ref={register({ validate: validateKey })} name={`${name}[${index}].key`} defaultValue={item.key} />\n            </div>\n            <div className=\"col-xs-5 pairs-list__value-field\">\n              <input type=\"text\" className=\"pf-c-form-control\" ref={register({ validate: validateValue })} name={`${name}[${index}].value`} defaultValue={item.value} />\n            </div>\n            <Button\n              type=\"button\"\n              data-test-id=\"pairs-list__delete-btn\"\n              className=\"pairs-list__span-btns\"\n              onClick={() => {\n                remove(index);\n              }}\n              variant=\"plain\"\n            >\n              {deleteIcon}\n            </Button>\n          </div>\n        )}\n      </Draggable>\n    ));\n  };\n\n  return (\n    <div>\n      <div className=\"row pairs-list__heading\">\n        {!disableReorder && <div className=\"col-xs-1 co-empty__header\" />}\n        <div className=\"col-xs-5 text-secondary text-uppercase\">KEY</div>\n        <div className=\"col-xs-5 text-secondary text-uppercase\">VALUE</div>\n        <div className=\"col-xs-1 co-empty__header\" />\n      </div>\n      <div className=\"row\">\n        <DragDropContext onDragEnd={onDragEnd}>\n          <Droppable droppableId=\"list\">\n            {provided => (\n              <div ref={provided.innerRef} {...provided.droppableProps}>\n                {renderList()}\n                {provided.placeholder}\n              </div>\n            )}\n          </Droppable>\n          <Button\n            className=\"pf-m-link--align-left\"\n            data-test-id=\"pairs-list__add-btn\"\n            onClick={() => {\n              append({ key: '', value: '' });\n            }}\n            type=\"button\"\n            variant=\"link\"\n          >\n            <PlusCircleIcon data-test-id=\"pairs-list__add-icon\" className=\"co-icon-space-r\" />\n            Add\n          </Button>\n        </DragDropContext>\n      </div>\n    </div>\n  );\n};\n\ntype KeyValueListEditorProps = {\n  name: string;\n  disableReorder?: boolean;\n};\n","import { useFormContext, useFieldArray } from 'react-hook-form';\nimport * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Button } from '@patternfly/react-core';\nimport { MinusCircleIcon, PlusCircleIcon } from '@patternfly/react-icons';\nexport const ListView: React.FC<ListViewProps> = ({ name, defaultItem = { key: '', value: '' }, itemRenderer, headerFragment, addButtonText }) => {\n  const { control, register, getValues } = useFormContext();\n  const { fields, append, remove } = useFieldArray({ control, name: name });\n\n  const DefaultListHeaderFragment = (\n    <div className=\"row pairs-list__heading\">\n      <div className=\"col-xs-4 text-secondary text-uppercase\">KEY</div>\n      <div className=\"col-xs-4 text-secondary text-uppercase\">VALUE</div>\n      <div className=\"col-xs-1 co-empty__header\" />\n    </div>\n  );\n\n  const DefaultListItemRenderer = (register, item, index, ListActions, ListDefaultIcons) => {\n    return (\n      <div className=\"row\" key={item.id}>\n        <div className=\"col-xs-4 pairs-list__name-field\">\n          <input ref={register()} className=\"pf-c-form-control\" name={`${name}[${index}].key`} defaultValue={item.key}></input>\n        </div>\n        <div className=\"col-xs-4 pairs-list__value-field\">\n          <input ref={register()} className=\"pf-c-form-control\" name={`${name}[${index}].value`} defaultValue={item.value}></input>\n        </div>\n        <div className=\"col-xs-1 pairs-list__action\">\n          <Button\n            type=\"button\"\n            data-test-id=\"pairs-list__delete-btn\"\n            className=\"pairs-list__span-btns\"\n            onClick={() => {\n              ListActions.remove(index);\n            }}\n            variant=\"plain\"\n          >\n            {ListDefaultIcons.deleteIcon}\n          </Button>\n        </div>\n      </div>\n    );\n  };\n\n  const deleteIcon = (\n    <>\n      <MinusCircleIcon className=\"pairs-list__side-btn pairs-list__delete-icon\" />\n      <span className=\"sr-only\">Delete</span>\n    </>\n  );\n\n  const ListActions = {\n    append: append,\n    remove: remove,\n    getValues: getValues,\n  };\n\n  const ListDefaultIcons = {\n    deleteIcon: deleteIcon,\n  };\n\n  const itemList = itemRenderer ? fields.map((item, index) => itemRenderer(register, item, index, ListActions, ListDefaultIcons)) : fields.map((item, index) => DefaultListItemRenderer(register, item, index, ListActions, ListDefaultIcons));\n\n  return (\n    <div>\n      {headerFragment ? headerFragment : DefaultListHeaderFragment}\n      {itemList}\n      <div className=\"row col-xs-12\">\n        <Button\n          className=\"pf-m-link--align-left\"\n          data-test-id=\"pairs-list__add-btn\"\n          onClick={() => {\n            append(defaultItem);\n          }}\n          type=\"button\"\n          variant=\"link\"\n        >\n          <PlusCircleIcon data-test-id=\"pairs-list__add-icon\" className=\"co-icon-space-r\" />\n          {!!addButtonText ? addButtonText : 'Add'}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\ntype ListViewProps = {\n  name: string;\n  defaultItem?: object;\n  itemRenderer?: Function;\n  headerFragment?: JSX.Element;\n  addButtonText?: string;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { Button } from '@patternfly/react-core';\nimport { MinusSquareIcon, PlusSquareIcon } from '@patternfly/react-icons';\nimport { useFormContext } from 'react-hook-form';\n\nexport const NumberSpinner: React.FC<NumberSpinnerProps> = ({ className, initialValue, min, max, name, ...inputProps }) => {\n  const { register } = useFormContext();\n  const [value, setValue] = React.useState(initialValue);\n  const changeValueBy = operation => {\n    setValue(_.toInteger(value) + operation);\n  };\n  return (\n    <div>\n      <Button onClick={() => changeValueBy(-1)} type=\"button\" variant=\"plain\" isDisabled={!_.isNil(min) && value <= min} aria-label=\"Decrement\" className=\"co-m-number-spinner__button\">\n        <MinusSquareIcon className=\"co-m-number-spinner__down-icon\" />\n      </Button>\n      <input name={name} type=\"number\" ref={register({ min: min, max: max })} value={value} onChange={(e: any) => setValue(e.target.value)} className={classNames(className, 'co-m-number-spinner__input', 'hc-number-spinner__input')} {...inputProps}></input>\n      <Button onClick={() => changeValueBy(1)} type=\"button\" variant=\"plain\" isDisabled={!_.isNil(max) && value >= max} aria-label=\"Increment\" className=\"co-m-number-spinner__button\">\n        <PlusSquareIcon className=\"co-m-number-spinner__up-icon\" />\n      </Button>\n    </div>\n  );\n};\n\ntype NumberSpinnerProps = {\n  className?: string;\n  initialValue?: number;\n  min?: number;\n  max?: number;\n  name?: string;\n} & React.HTMLProps<HTMLInputElement>;\n\nNumberSpinner.defaultProps = {\n  name: 'numberSpinner',\n  initialValue: 0,\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { useFormContext } from 'react-hook-form';\n\nexport const RadioInput: React.SFC<RadioInputProps> = props => {\n  const { register } = useFormContext();\n  const inputProps: React.InputHTMLAttributes<any> = _.omit(props, ['title', 'subTitle', 'desc', 'children', 'inline']);\n  const inputElement = (\n    <>\n      <label className={classNames({ 'radio-inline': props.inline, 'co-disabled': props.disabled })}>\n        <input type=\"radio\" ref={register} value={props.item} {...inputProps} />\n        {props.title} {props.subTitle && <span className=\"co-no-bold\">{props.subTitle}</span>}\n      </label>\n      {props.desc && <p className=\"co-m-radio-desc text-muted\">{props.desc}</p>}\n      {props.children}\n    </>\n  );\n\n  return props.inline ? inputElement : <div className=\"radio\">{inputElement}</div>;\n};\n\nexport const RadioGroup: React.SFC<RadioGroupProps> = ({ inline = false, items, id = JSON.stringify(items), name }) => {\n  const radios = items.map(({ desc, title, subTitle, value, disabled }) => <RadioInput name={name} key={value} desc={desc} title={title} subTitle={subTitle} item={value} disabled={disabled} inline={inline} />);\n  return <div className={classNames('co-radio-group', { 'co-radio-group--inline': inline })}>{radios}</div>;\n};\n\nexport type RadioInputProps = {\n  item: string;\n  desc?: string | JSX.Element;\n  subTitle?: string | JSX.Element;\n  disabled?: boolean;\n  inline?: boolean;\n} & React.InputHTMLAttributes<any>;\n\nexport type RadioGroupProps = {\n  name: string;\n  items: ({\n    desc?: string | JSX.Element;\n    title: string | JSX.Element;\n    subTitle?: string | JSX.Element;\n    value: string;\n    disabled?: boolean;\n  } & React.InputHTMLAttributes<any>)[];\n  id?: string;\n  inline?: boolean;\n};\n\nRadioInput.displayName = 'RadioInput';\nRadioGroup.displayName = 'RadioGroup';\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { OrderedMap } from 'immutable';\nimport * as classNames from 'classnames';\nimport * as fuzzy from 'fuzzysearch';\nimport { useFormContext } from 'react-hook-form';\n\nimport { Dropdown, ResourceIcon } from '../../utils';\nimport {\n  K8sResourceKind,\n  K8sResourceKindReference,\n} from '../../../module/k8s';\nimport { Badge, Checkbox, DataToolbar, DataToolbarContent, DataToolbarFilter, DataToolbarItem, DataToolbarChip } from '@patternfly/react-core';\n\nexport type HCK8sResourceKind = K8sResourceKind & {\n  fakeMetadata?: any;\n};\n\nconst DropdownItem: React.SFC<DropdownItemProps> = ({ resource, checked }) => (\n  <>\n    <span className={'co-resource-item'}>\n      <Checkbox\n        tabIndex={-1}\n        id={`${resource.metadata.uid}:checkbox`}\n        checked={checked}\n      />\n      <span className=\"co-resource-icon--fixed-width\">\n        <ResourceIcon kind={resource.kind} />\n      </span>\n      <span className=\"co-resource-item__resource-name\">\n        <span>\n          {resource.fakeMetadata?.fakename ?? resource.metadata.name}\n        </span>\n      </span>\n    </span>\n  </>\n);\n\ntype DropdownItemProps = {\n  resource: HCK8sResourceKind;\n  checked?: boolean;\n};\n\nexport const ResourceListDropdown: React.SFC<ResourceListDropdownProps> = (props) => {\n  const { name, required, resourceList, onChange, showAll, className, type, useHookForm } = props;\n\n  const selected = name ? props.selected : props.selected;\n\n  if (useHookForm && name) {\n    const { register, unregister, setValue } = useFormContext();\n\n    React.useEffect(() => {\n      setValue(name, selected);\n      \n    }, [selected]);\n\n    React.useEffect(() => {\n      register({ name }, { required });\n  \n      return () => {\n        unregister(name);\n      }\n    }, [name, register, unregister]);\n  }\n\n  const isSelected = (uid: string) => {\n    return _.includes(selected, 'All') || _.includes(selected, uid);\n  };\n  // Create dropdown items for each resource.\n  const items = OrderedMap(\n    _.map(resourceList, (resource) => [\n      resource.metadata.uid,\n      <DropdownItem\n        resource={resource}\n        checked={isSelected(resource.metadata.uid)} />\n    ]\n    ));\n  // Add an \"All\" item to the top if `showAll`.\n  const allItems = (showAll\n    ? OrderedMap({\n      All: (\n        <>\n          <span className=\"co-resource-item\">\n            <Checkbox id=\"all-resources\" checked={isSelected('All')} />\n            <span className=\"co-resource-icon--fixed-width\">\n              <ResourceIcon kind=\"All\" />\n            </span>\n            <span className=\"co-resource-item__resource-name\">{`All ${props.resourceType}`}</span>\n          </span>\n        </>\n      ),\n    }).concat(items)\n    : items\n  ).toJS() as { [s: string]: JSX.Element };\n\n  const autocompleteFilter = (text, item) => {\n    const { resource } = item.props;\n    if (!resource) {\n      return false;\n    }\n\n    return fuzzy(_.toLower(text), _.toLower(resource.fakeMetadata?.fakename ?? resource.metadata.name));\n  };\n\n  const autocompletePlaceholder = props.autocompletePlaceholder ?? \"Select Resource\";\n\n  return (\n    <Dropdown\n      menuClassName=\"dropdown-menu--text-wrap\"\n      className={classNames('co-type-selector', className)}\n      items={allItems}\n      title={\n        props.title ??\n        <div key=\"title-resource\">\n          {`${props.resourceType} `}\n          <Badge isRead>\n            {selected.length === 1 && selected[0] === 'All' ? 'All' : selected.length}\n          </Badge>\n        </div>\n      }\n      onChange={onChange}\n      autocompleteFilter={autocompleteFilter}\n      autocompletePlaceholder={props.autocompleteFilter ?? autocompletePlaceholder}\n      type={type}\n    />\n  );\n};\n\nexport type ResourceListDropdownProps = {\n  name?: string;\n  required?: boolean;\n  resourceList: HCK8sResourceKind[];\n  selected: K8sResourceKindReference[];\n  onChange: (value: string) => void;\n  className?: string;\n  showAll?: boolean;\n  type?: string;\n  title?: string | JSX.Element;\n  resourceType?: string;\n  autocompletePlaceholder?: string;\n  autocompleteFilter?: (text: any, item: any) => any;\n  useHookForm?: boolean;\n};\n\nResourceListDropdown.defaultProps = {\n  resourceType: \"Resources\",\n  useHookForm: false,\n};\n\nconst ResourceListDropdownWithDataToolbar_: React.SFC<ResourceListDropdownWithDataToolbarProps> = (props, ref) => {\n  const { resourceList } = props;\n  const [selectedItems, setSelectedItems] = React.useState(new Set<string>([]));\n\n  const allItems = new Set<string>(resourceList.map(resource => resource.metadata.uid));\n\n  React.useEffect(()=>{\n    props.onSelectedItemChange?.(selectedItems);\n  }, [selectedItems]);\n\n  const updateSelectedItems = (selection: string) => {\n    if (selection === 'All') {\n      selectedItems.has(selection) ? clearSelectedItems() : selectAllItems();\n    } else {\n      if (selectedItems.has('All')) {\n        const updateItems = new Set(allItems);\n        updateItems.delete(selection);\n        setSelectedItems(updateItems);\n      } else {\n        const updateItems = new Set(selectedItems);\n        updateItems.has(selection) ? updateItems.delete(selection) : updateItems.add(selection);\n        updateItems.size === resourceList.length ? selectAllItems() : setSelectedItems(updateItems);\n      }\n    }\n  };\n\n  const updateNewItems = (filter: string, { key }: DataToolbarChip) => {\n    updateSelectedItems(key);\n  };\n\n  const selectAllItems = () => {\n    setSelectedItems(new Set(['All']));\n  }\n\n  const clearSelectedItems = () => {\n    setSelectedItems(new Set([]));\n  };\n\n  const clearAll = () => {\n    clearSelectedItems();\n  };\n\n  return (\n    <DataToolbar id=\"search-toolbar\" clearAllFilters={clearAll} clearFiltersButtonText={`Clear all ${props.resourceType}`}>\n      <DataToolbarContent>\n        <DataToolbarItem>\n          <DataToolbarFilter\n            deleteChipGroup={clearSelectedItems}\n            chips={[...selectedItems].map(uid => {\n              const item = resourceList.find(i => i.metadata.uid === uid);\n              return {\n                key: uid,\n                node: (\n                  <>\n                    <ResourceIcon kind={item?.kind ?? uid} />\n                    {item?.fakeMetadata?.fakename ?? item?.metadata.name ?? uid}\n                  </>\n                ),\n              }\n            })}\n            deleteChip={updateNewItems}\n            categoryName={props.resourceType}\n          >\n            <ResourceListDropdown\n              resourceList={resourceList}\n              selected={[...selectedItems]}\n              onChange={updateSelectedItems}\n              type=\"multiple\"\n              {...props}\n            />\n          </DataToolbarFilter>\n        </DataToolbarItem>\n      </DataToolbarContent>\n    </DataToolbar>)\n};\n\nexport const ResourceListDropdownWithDataToolbar = React.forwardRef(ResourceListDropdownWithDataToolbar_);\n\nexport type ResourceListDropdownWithDataToolbarProps = {\n  name?: string;\n  required?: boolean;\n  resourceList: HCK8sResourceKind[];\n  className?: string;\n  showAll?: boolean;\n  title?: string | JSX.Element;\n  resourceType?: string;\n  autocompletePlaceholder?: string;\n  autocompleteFilter?: (text: any, item: any) => any;\n  onSelectedItemChange?: (items: Set<string>) => any;\n  useHookForm?: boolean;\n};\n\nResourceListDropdownWithDataToolbar.defaultProps = {\n  resourceType: \"Resources\",\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\n\nconst Node = ({ className, children, description }) => (\n  <div className={className}>\n    <div>{children}</div>\n    <p className=\"help-block\">{description}</p>\n  </div>\n);\n\nconst CombineNodes = (id, label, description, children, isRequired) => {\n  // children node 개수에 따라 가로 분할 class 적용\n  let isArray = Array.isArray(children);\n  let className = isArray ? `col-md-${12 / children.length}` : 'col-md-12';\n  return isArray ? children.map(cur => <Node className={className} children={cur} description={description} />) : <Node className={className} children={children} description={description} />;\n};\n\nexport const Section: React.FC<SectionProps> = ({ id, label, description, children, isRequired = false }) => {\n  let result = CombineNodes(id, label, description, children, isRequired);\n  return (\n    <div className=\"form-group\">\n      <label className={'control-label ' + (isRequired ? 'co-required' : '')} htmlFor={id}>\n        {label}\n      </label>\n      <div className=\"row\">{result}</div>\n    </div>\n  );\n};\n\ntype SectionProps = {\n  id: string;\n  children: Array<React.ReactNode> | React.ReactNode;\n  label?: string;\n  description?: string;\n  isRequired?: boolean;\n};\n","import * as _ from 'lodash';\nimport * as React from 'react';\nimport { useState } from 'react';\nimport * as PropTypes from 'prop-types';\nimport * as classNames from 'classnames';\nimport TagsInput from 'react-tagsinput';\nimport { useFormContext, Controller } from 'react-hook-form';\n\nexport const TagsLabel = ({ name, placeholder = '' }) => {\n  const { control, setValue, getValues, watch } = useFormContext();\n  const [inputValue, setInputValue] = useState('');\n  const [isInputValid, setIsInputValid] = useState(true);\n  const [isEmpty, setIsEmpty] = useState(watch(name) === undefined);\n\n  // An array of key codes that add a tag, default is [9, 13] (Tab and Enter).\n  const addKeys = [13];\n  // An array of key codes that remove a tag, default is [8] (Backspace).\n  const removeKeys = inputValue.length ? [] : [8];\n\n  const isTagValid = inputValue => {\n    // 지금은 한글이 있는지만 validation\n    const hasKorean = /[ㄱ-ㅎ|ㅏ-ㅣ|가-힣]/.test(inputValue);\n    return !hasKorean;\n  };\n\n  const handleInputChange = e => {\n    const inputValue = e.target.value;\n\n    // If the user deletes an existing inputValue, set isInputValid back to true\n    if (inputValue === '') {\n      setInputValue(inputValue);\n      setIsInputValid(true);\n      return;\n    }\n    setInputValue(inputValue);\n    setIsInputValid(isTagValid(inputValue));\n  };\n\n  const handleChange = (tags, changed) => {\n    const newTag = changed[0];\n\n    if (!isTagValid(newTag)) {\n      setIsInputValid(false);\n      return;\n    }\n    setValue(name, tags);\n    setIsEmpty(_.isEmpty(tags));\n    setInputValue('');\n    setIsInputValid(true);\n  };\n\n  const renderTag = ({ tag, key, onRemove, getTagDisplayValue }) => {\n    return (\n      <span className={classNames('tag-item', 'co-m-label', 'co-text-pod')} key={key}>\n        <span className=\"tag-item__content\">{getTagDisplayValue(tag)}</span>\n        &nbsp;\n        <a className=\"remove-button\" onClick={() => onRemove(key)}>\n          ×\n        </a>\n      </span>\n    );\n  };\n\n  const inputProps = {\n    className: classNames('input', { 'invalid-tag': !isInputValid }),\n    spellCheck: 'false',\n    value: inputValue,\n    placeholder: isEmpty ? placeholder : '',\n    id: 'tags-input',\n    onChange: handleInputChange,\n  };\n\n  return (\n    <Controller\n      control={control}\n      name={name}\n      render={({ value }) => (\n        <div className=\"co-search-input pf-c-form-control\">\n          <tags-input>\n            <TagsInput onChange={handleChange} value={value ? value : []} className=\"tags\" renderTag={renderTag} inputProps={inputProps} addKeys={addKeys} removeKeys={removeKeys} addOnBlur></TagsInput>\n          </tags-input>\n        </div>\n      )}\n    ></Controller>\n  );\n};\n\nTagsLabel.propTypes = {\n  name: PropTypes.string.isRequired,\n  placeholder: PropTypes.string,\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AASA;AAEA;AACA;AAEA;AACA;AAEA;AAIA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAKA;AACA;AAMA;AACA;AACA;AAMA;AACA;AAMA;AAEA;AACA;AAIA;AACA;AAEA;AAKA;AAGA;AACA;AAKA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AAMA;AAIA;AACA;AACA;;;;;;;;;;;;;ACrEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAQA;AAEA;AAWA;AAEA;AACA;AAEA;AAaaA;AACA;AACA;AAEA;AAEA;AAWA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;AC1TA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAKA;AACA;AASA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAIA;AAIA;AACA;AAIA;AAEA;AAKA;;;;;;;;;;;;;AChHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AAQA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAIA;AACA;AAKA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClFA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AAUA;AACA;AACA;AACA;;;;;;;;;;;;;ACrCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAAA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAuBA;AACA;;;;;;;;;;;;;ACjDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAMA;;AAAA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AAMA;AAOA;;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAGA;;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAQA;AACA;AAWA;AAkBA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAIA;AAWA;AAEA;AAgBA;AACA;AACA;;;;;;;;;;;;;AClPA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAGA;;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AAEA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AAMA;AAEA;AACA;AACA;AACA;;;;;A","sourceRoot":""}