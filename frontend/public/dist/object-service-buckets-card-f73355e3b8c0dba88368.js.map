{"version":3,"file":"object-service-buckets-card-f73355e3b8c0dba88368.js","sources":["webpack:///./packages/noobaa-storage-plugin/src/components/buckets-card/buckets-card-item.tsx","webpack:///./packages/noobaa-storage-plugin/src/components/buckets-card/buckets-card.scss?751d","webpack:///./packages/noobaa-storage-plugin/src/components/buckets-card/buckets-card.tsx","webpack:///./packages/noobaa-storage-plugin/src/components/buckets-card/utils.ts","webpack:///./packages/noobaa-storage-plugin/src/utils.ts"],"sourcesContent":["import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { InProgressIcon } from '@patternfly/react-icons';\nimport { RedExclamationCircleIcon } from '@console/shared';\nimport { humanizeNumber, pluralize } from '@console/internal/components/utils';\nimport { PrometheusResponse } from '@console/internal/components/graphs';\nimport { getGaugeValue } from '../../utils';\n\nconst formatCount = (count: number) => {\n  const hCount = humanizeNumber(count);\n  return `${hCount.string} Object${count === 1 ? '' : 's'}`;\n};\n\n// Displays count of erroneous buckets due to issues not externalized as phase\nconst OtherFailure: React.FC<BucketFailureItemProps> = React.memo(({ link, status }) => (\n  <div className=\"nb-buckets-card__buckets-failure-status-item\">\n    <a\n      className=\"nb-buckets-card__buckets-failure-status-item--link\"\n      href={link}\n      target=\"_blank\"\n      rel=\"noopener noreferrer\"\n    >\n      <RedExclamationCircleIcon />\n      <span className=\"nb-buckets-card__buckets-failure-status-count\">{status}</span>\n    </a>\n  </div>\n));\n\n// Displays count of erroneous buckets due to failure in provision\nconst ProvisioningFailure: React.FC<BucketFailureItemProps> = React.memo(({ link, status }) => (\n  <div className=\"nb-buckets-card__buckets-failure-status-item\">\n    <Link to={link} className=\"nb-buckets-card__buckets-failure-status-item--link\">\n      <InProgressIcon className=\"co-inventory-card__status-icon--progress\" />\n      <span className=\"nb-buckets-card__buckets-failure-status-count\">{status}</span>\n    </Link>\n  </div>\n));\n\n// Displays count of erroneous buckets\nconst BucketFailureStatus: React.FC<BucketFailureStatusProps> = React.memo(\n  ({ failureCounts, failureLinks }) => (\n    <div className=\"nb-buckets-card__buckets-failure-status\">\n      {failureCounts[0] > 0 && <OtherFailure link={failureLinks[0]} status={failureCounts[0]} />}\n      {failureCounts[1] > 0 && (\n        <ProvisioningFailure link={failureLinks[1]} status={failureCounts[1]} />\n      )}\n    </div>\n  ),\n);\n\n// Displays count of buckets and objects present in buckets\nconst BucketsStatus: React.FC<BucketsStatusProps> = React.memo(\n  ({ isLoading, hasLoadError, title, bucketsCount, objectsCount }) => {\n    let body: JSX.Element;\n    if (isLoading && !hasLoadError) {\n      body = (\n        <>\n          <div className=\"co-inventory-card__item-title\">\n            <div className=\"skeleton-inventory\" />\n            <div>{title}</div>\n          </div>\n          <div className=\"skeleton-text\" />\n        </>\n      );\n    } else {\n      body = (\n        <>\n          <div>{hasLoadError ? title : pluralize(bucketsCount, title)}</div>\n          <div className=\"co-dashboard-text--small text-secondary\">\n            {hasLoadError || !objectsCount ? 'Not available' : formatCount(Number(objectsCount))}\n          </div>\n        </>\n      );\n    }\n    return <div className=\"nb-buckets-card__buckets-status-title\">{body}</div>;\n  },\n);\n\n// Displays Buckets and Bucket Claims information as rows\nexport const BucketsItem: React.FC<BucketsItemProps> = React.memo(\n  ({ isLoading, hasLoadError, title, bucketsCount, objectsCount, unhealthyCounts, links }) => (\n    <div className=\"co-inventory-card__item\">\n      <BucketsStatus\n        title={title}\n        bucketsCount={bucketsCount}\n        objectsCount={objectsCount}\n        hasLoadError={hasLoadError}\n        isLoading={isLoading}\n      />\n      {!(isLoading || hasLoadError) && (\n        <BucketFailureStatus failureCounts={unhealthyCounts} failureLinks={links} />\n      )}\n    </div>\n  ),\n);\n\nexport const BucketsTitle: React.FC<BucketsTitleProps> = ({ objects, link, error, children }) => {\n  let objectsBody: JSX.Element;\n  if (!objects && !error) {\n    objectsBody = <div className=\"skeleton-text\" />;\n  } else {\n    const objectsCount = getGaugeValue(objects);\n    objectsBody = (\n      <div className=\"co-dashboard-text--small text-secondary\">\n        {!error && objectsCount ? formatCount(Number(objectsCount)) : 'Not available'}\n      </div>\n    );\n  }\n  return (\n    <div className=\"nb-buckets-card__buckets-status-title\">\n      {link ? <Link to={link}>{children}</Link> : children}\n      {objectsBody}\n    </div>\n  );\n};\n\nexport type BucketsTitleProps = {\n  objects: PrometheusResponse;\n  link: string;\n  error: boolean;\n};\n\nexport type BucketsItemProps = {\n  bucketsCount: number;\n  hasLoadError: boolean;\n  isLoading: boolean;\n  links: string[];\n  objectsCount: string;\n  title: string;\n  unhealthyCounts: number[];\n};\n\ntype BucketsStatusProps = {\n  bucketsCount: number;\n  isLoading: boolean;\n  hasLoadError: boolean;\n  objectsCount: string;\n  title: string;\n};\n\ntype BucketFailureItemProps = {\n  link: string;\n  status: number;\n};\n\ntype BucketFailureStatusProps = {\n  failureCounts: number[];\n  failureLinks: string[];\n};\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport { RedExclamationCircleIcon } from '@console/shared';\nimport {\n  DashboardItemProps,\n  withDashboardResources,\n} from '@console/internal/components/dashboard/with-dashboard-resources';\nimport { FirehoseResource, resourcePathFromModel } from '@console/internal/components/utils';\nimport { referenceForModel, K8sResourceKind } from '@console/internal/module/k8s';\nimport { PrometheusResponse } from '@console/internal/components/graphs';\nimport InventoryItem, {\n  ResourceInventoryItem,\n} from '@console/shared/src/components/dashboard/inventory-card/InventoryItem';\nimport { NooBaaObjectBucketClaimModel, NooBaaObjectBucketModel } from '../../models';\nimport { getGaugeValue } from '../../utils';\nimport { BucketsTitle } from './buckets-card-item';\nimport { getObcStatusGroups, getObStatusGroups } from './utils';\nimport './buckets-card.scss';\n\nenum BucketsCardQueries {\n  BUCKETS_COUNT = 'NooBaa_num_buckets',\n  BUCKET_OBJECTS_COUNT = 'NooBaa_num_objects',\n  BUCKET_CLAIMS_OBJECTS_COUNT = 'NooBaa_num_objects_buckets_claims',\n  UNHEALTHY_BUCKETS = 'NooBaa_num_unhealthy_buckets',\n}\n\nconst objectBucketClaimsResource: FirehoseResource = {\n  kind: referenceForModel(NooBaaObjectBucketClaimModel),\n  namespaced: false,\n  isList: true,\n  prop: 'obc',\n};\n\nconst objectBucketResource: FirehoseResource = {\n  kind: referenceForModel(NooBaaObjectBucketModel),\n  namespaced: false,\n  isList: true,\n  prop: 'ob',\n};\n\nconst ObjectDashboardBucketsCard: React.FC<DashboardItemProps> = ({\n  watchK8sResource,\n  watchPrometheus,\n  stopWatchPrometheusQuery,\n  stopWatchK8sResource,\n  prometheusResults,\n  resources,\n}) => {\n  React.useEffect(() => {\n    watchK8sResource(objectBucketClaimsResource);\n    watchK8sResource(objectBucketResource);\n    Object.keys(BucketsCardQueries).forEach((key) => watchPrometheus(BucketsCardQueries[key]));\n    return () => {\n      stopWatchK8sResource(objectBucketClaimsResource);\n      stopWatchK8sResource(objectBucketResource);\n      Object.keys(BucketsCardQueries).forEach((key) =>\n        stopWatchPrometheusQuery(BucketsCardQueries[key]),\n      );\n    };\n  }, [watchK8sResource, watchPrometheus, stopWatchK8sResource, stopWatchPrometheusQuery]);\n\n  const noobaaCount = prometheusResults.getIn([\n    BucketsCardQueries.BUCKETS_COUNT,\n    'data',\n  ]) as PrometheusResponse;\n  const noobaaCountError = prometheusResults.getIn([BucketsCardQueries.BUCKETS_COUNT, 'loadError']);\n  const noobaaObjectsCount = prometheusResults.getIn([\n    BucketsCardQueries.BUCKET_OBJECTS_COUNT,\n    'data',\n  ]) as PrometheusResponse;\n  const noobaaObjectsCountError = prometheusResults.getIn([\n    BucketsCardQueries.BUCKET_OBJECTS_COUNT,\n    'loadError',\n  ]);\n  const obcObjectsCount = prometheusResults.getIn([\n    BucketsCardQueries.BUCKET_CLAIMS_OBJECTS_COUNT,\n    'data',\n  ]) as PrometheusResponse;\n  const obcObjectsCountError = prometheusResults.getIn([\n    BucketsCardQueries.BUCKET_CLAIMS_OBJECTS_COUNT,\n    'loadError',\n  ]);\n  const unhealthyNoobaaBuckets = prometheusResults.getIn([\n    BucketsCardQueries.UNHEALTHY_BUCKETS,\n    'data',\n  ]) as PrometheusResponse;\n  const unhealthyNoobaaBucketsError = prometheusResults.getIn([\n    BucketsCardQueries.UNHEALTHY_BUCKETS,\n    'loadError',\n  ]);\n\n  const obcData = (resources?.obc?.data as K8sResourceKind[]) ?? [];\n  const obcLoaded = resources?.obc?.loaded;\n  const obcLoadError = resources?.obc?.loadError;\n\n  const obData = (resources?.ob?.data as K8sResourceKind[]) ?? [];\n  const obLoaded = resources?.ob?.loaded;\n  const obLoadError = resources?.ob?.loadError;\n\n  const unhealthyNoobaaBucketsCount = Number(getGaugeValue(unhealthyNoobaaBuckets));\n\n  const obcLink = resourcePathFromModel(NooBaaObjectBucketClaimModel);\n  const obLink = resourcePathFromModel(NooBaaObjectBucketModel);\n\n  return (\n    <DashboardCard>\n      <DashboardCardHeader>\n        <DashboardCardTitle>Buckets</DashboardCardTitle>\n      </DashboardCardHeader>\n      <DashboardCardBody>\n        <InventoryItem\n          isLoading={!(noobaaCount && unhealthyNoobaaBuckets)}\n          error={!!(noobaaCountError || unhealthyNoobaaBucketsError)}\n          title=\"NooBaa Bucket\"\n          count={Number(getGaugeValue(noobaaCount))}\n          TitleComponent={React.useCallback(\n            (props) => (\n              <BucketsTitle\n                objects={noobaaObjectsCount}\n                error={!!noobaaObjectsCountError}\n                {...props}\n              />\n            ),\n            [noobaaObjectsCount, noobaaObjectsCountError],\n          )}\n        >\n          {unhealthyNoobaaBucketsCount > 0 && (\n            <>\n              <RedExclamationCircleIcon />\n              <span className=\"nb-buckets-card__buckets-failure-status-count\">\n                {unhealthyNoobaaBucketsCount}\n              </span>\n            </>\n          )}\n        </InventoryItem>\n        <ResourceInventoryItem\n          isLoading={!obLoaded}\n          error={!!obLoadError}\n          kind={NooBaaObjectBucketModel}\n          resources={obData}\n          TitleComponent={React.useCallback(\n            (props) => (\n              <BucketsTitle\n                objects={obcObjectsCount}\n                link={obLink}\n                error={!!obcObjectsCountError}\n                {...props}\n              />\n            ),\n            [obLink, obcObjectsCount, obcObjectsCountError],\n          )}\n          mapper={getObStatusGroups}\n        />\n        <ResourceInventoryItem\n          isLoading={!obcLoaded}\n          error={!!obcLoadError}\n          kind={NooBaaObjectBucketClaimModel}\n          resources={obcData}\n          TitleComponent={React.useCallback(\n            (props) => (\n              <BucketsTitle\n                objects={obcObjectsCount}\n                link={obcLink}\n                error={!!obcObjectsCountError}\n                {...props}\n              />\n            ),\n            [obcLink, obcObjectsCount, obcObjectsCountError],\n          )}\n          mapper={getObcStatusGroups}\n        />\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n};\n\nexport const BucketsCard = withDashboardResources(ObjectDashboardBucketsCard);\n","import { InventoryStatusGroup } from '@console/shared/src/components/dashboard/inventory-card/status-group';\nimport { getStatusGroups } from '@console/shared/src/components/dashboard/inventory-card/utils';\nimport { StatusGroupMapper } from '@console/shared/src/components/dashboard/inventory-card/InventoryItem';\n\nconst OB_STATUS_GROUP_MAPPING = {\n  [InventoryStatusGroup.NOT_MAPPED]: ['Bound'],\n  [InventoryStatusGroup.PROGRESS]: ['Released'],\n  [InventoryStatusGroup.ERROR]: ['Failed'],\n};\n\nconst OBC_STATUS_GROUP_MAPPING = {\n  [InventoryStatusGroup.NOT_MAPPED]: ['Bound'],\n  [InventoryStatusGroup.PROGRESS]: ['Pending', 'Released'],\n  [InventoryStatusGroup.ERROR]: ['Failed'],\n};\n\nexport const getObStatusGroups: StatusGroupMapper = (resources) =>\n  getStatusGroups(resources, OB_STATUS_GROUP_MAPPING, (ob) => ob?.status?.phase, 'ob-status');\nexport const getObcStatusGroups: StatusGroupMapper = (resources) =>\n  getStatusGroups(resources, OBC_STATUS_GROUP_MAPPING, (obc) => obc?.status?.phase, 'obc-status');\n","import * as _ from 'lodash';\nimport { Alert } from '@console/internal/components/monitoring';\nimport { PrometheusResponse } from '@console/internal/components/graphs';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { StorageClass } from '@console/internal/components/storage-class-form';\n\nexport const filterNooBaaAlerts = (alerts: Alert[]): Alert[] =>\n  alerts.filter((alert) => _.get(alert, 'annotations.storage_type') === 'NooBaa');\n\nexport const getGaugeValue = (data) => _.get(data, 'data.result[0].value[1]');\n\nexport const getMetric = (result: PrometheusResponse, metric: string): string =>\n  _.get(result, ['data', 'result', '0', 'metric', metric], null);\n\nexport type PrometheusMetricResult = {\n  metric: { [key: string]: any };\n  value?: [number, string | number];\n};\n\nexport const getPhase = (obj: K8sResourceKind): string => {\n  return _.get(obj, 'status.phase', 'Lost');\n};\n\nexport const isBound = (obj: K8sResourceKind): boolean => getPhase(obj) === 'Bound';\n\nexport const getSCProvisioner = (obj: StorageClass) => obj.provisioner;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAMA;AACA;AAKA;AACA;AAEA;AACA;AACA;AAKA;AACA;AAGA;AACA;AAOA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAAA;AACA;AAEA;AACA;AAKA;AACA;AACA;AAGA;AACA;AAGA;AAOA;AAOA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAKA;AACA;AAEA;AACA;AAGA;;;;;;;;;;;;AClHA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAkBA;AACA;AAMA;AAkBA;AAqBA;AAEA;;;;;;;;;;;;;ACnLA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAGA;AAEA;AAQA;AACA;AACA;AAEA;AAEA;;;;;A","sourceRoot":""}