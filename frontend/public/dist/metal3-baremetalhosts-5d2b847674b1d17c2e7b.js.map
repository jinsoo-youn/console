{"version":3,"file":"metal3-baremetalhosts-5d2b847674b1d17c2e7b.js","sources":["webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/BareMetalHostsPage.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/BareMetalHostsTable.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { getName, createLookup, getNodeMachineName } from '@console/shared';\nimport { MachineModel, MachineSetModel, NodeModel } from '@console/internal/models';\nimport { MultiListPage } from '@console/internal/components/factory';\nimport { FirehoseResource, FirehoseResult } from '@console/internal/components/utils';\nimport {\n  MachineKind,\n  MachineSetKind,\n  NodeKind,\n  referenceForModel,\n} from '@console/internal/module/k8s';\nimport { useFlag } from '@console/shared/src/hooks/flag';\nimport { BareMetalHostModel, NodeMaintenanceModel } from '../../models';\nimport { getHostMachine, getNodeMaintenanceNodeName } from '../../selectors';\nimport { getHostStatus } from '../../status/host-status';\nimport { BareMetalHostBundle } from '../types';\nimport { BareMetalHostKind } from '../../types';\nimport { getMachineMachineSetOwner } from '../../selectors/machine';\nimport { hostStatusFilter } from './table-filters';\nimport BareMetalHostsTable from './BareMetalHostsTable';\nimport { NODE_MAINTENANCE_FLAG } from '../../features';\n\ntype Resources = {\n  hosts: FirehoseResult<BareMetalHostKind[]>;\n  machines: FirehoseResult<MachineKind[]>;\n  machineSets: FirehoseResult<MachineSetKind[]>;\n  nodes: FirehoseResult<NodeKind[]>;\n  nodeMaintenances: FirehoseResult;\n};\n\nconst flattenResources = (resources: Resources) => {\n  // TODO(jtomasek): Remove loaded check once ListPageWrapper_ is updated to call flatten only\n  // when resources are loaded\n  const loaded = _.every(resources, (resource) =>\n    resource.optional ? resource.loaded || !_.isEmpty(resource.loadError) : resource.loaded,\n  );\n  const {\n    hosts: { data: hostsData },\n    machines: { data: machinesData },\n    machineSets,\n    nodes,\n    nodeMaintenances,\n  } = resources;\n\n  if (loaded) {\n    const maintenancesByNodeName = createLookup(nodeMaintenances, getNodeMaintenanceNodeName);\n    const nodesByMachineName = createLookup(nodes, getNodeMachineName);\n    const machineSetByUID = createLookup(machineSets);\n\n    return hostsData.map(\n      (host): BareMetalHostBundle => {\n        // TODO(jtomasek): replace this with createLookup once there is metal3.io/BareMetalHost annotation\n        // on machines\n        const machine = getHostMachine(host, machinesData);\n        const node = nodesByMachineName[getName(machine)];\n        const nodeMaintenance = maintenancesByNodeName[getName(node)];\n        const machineOwner = getMachineMachineSetOwner(machine);\n        const machineSet = machineOwner && machineSetByUID[machineOwner.uid];\n\n        const status = getHostStatus({ host, machine, node, nodeMaintenance });\n        // TODO(jtomasek): metadata.name is needed to make 'name' textFilter work.\n        // Remove it when it is possible to pass custom textFilter as a function\n        return {\n          metadata: { name: getName(host) },\n          host,\n          machine,\n          node,\n          nodeMaintenance,\n          machineSet,\n          status,\n        };\n      },\n    );\n  }\n  return [];\n};\n\ntype BareMetalHostsPageProps = {\n  namespace: string;\n};\n\nconst getCreateProps = ({ namespace }: { namespace: string }) => {\n  const items: any = {\n    dialog: 'New with Dialog',\n    yaml: 'New from YAML',\n  };\n\n  return {\n    items,\n    createLink: (itemName) => {\n      const base = `/k8s/ns/${namespace || 'default'}/${referenceForModel(BareMetalHostModel)}`;\n\n      switch (itemName) {\n        case 'dialog':\n          return `${base}/~new/form`;\n        case 'yaml':\n        default:\n          return `${base}/~new`;\n      }\n    },\n  };\n};\n\nconst BareMetalHostsPage: React.FC<BareMetalHostsPageProps> = (props) => {\n  const hasNodeMaintenanceCapability = useFlag(NODE_MAINTENANCE_FLAG);\n  const { namespace } = props;\n  const resources: FirehoseResource[] = [\n    {\n      kind: referenceForModel(BareMetalHostModel),\n      namespaced: true,\n      prop: 'hosts',\n    },\n    {\n      kind: referenceForModel(MachineModel),\n      namespaced: true,\n      prop: 'machines',\n    },\n    {\n      kind: referenceForModel(MachineSetModel),\n      namespaced: true,\n      isList: true,\n      prop: 'machineSets',\n    },\n    {\n      kind: NodeModel.kind,\n      namespaced: false,\n      prop: 'nodes',\n    },\n  ];\n\n  if (hasNodeMaintenanceCapability) {\n    resources.push({\n      kind: referenceForModel(NodeMaintenanceModel),\n      namespaced: false,\n      isList: true,\n      prop: 'nodeMaintenances',\n      optional: true,\n    });\n  }\n\n  return (\n    <MultiListPage\n      {...props}\n      canCreate\n      rowFilters={[hostStatusFilter]}\n      createProps={getCreateProps({ namespace })}\n      createButtonText=\"Add Host\"\n      namespace={namespace}\n      resources={resources}\n      flatten={flattenResources}\n      ListComponent={BareMetalHostsTable}\n      title=\"Bare Metal Hosts\"\n    />\n  );\n};\n\nexport default BareMetalHostsPage;\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { Kebab, ResourceLink } from '@console/internal/components/utils';\nimport { sortable } from '@patternfly/react-table';\nimport { getName, getUID, getNamespace, DASH } from '@console/shared';\nimport {\n  TableRow,\n  TableData,\n  Table,\n  RowFunction,\n  RowFunctionArgs,\n} from '@console/internal/components/factory';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { useFlag } from '@console/shared/src/hooks/flag';\nimport { BareMetalHostBundle } from '../types';\nimport { getHostBMCAddress, getHostVendorInfo } from '../../selectors';\nimport { BareMetalHostModel } from '../../models';\nimport NodeLink from './NodeLink';\nimport BareMetalHostStatus from './BareMetalHostStatus';\nimport BareMetalHostRole from './BareMetalHostRole';\nimport { menuActions } from './host-menu-actions';\nimport BareMetalHostSecondaryStatus from './BareMetalHostSecondaryStatus';\nimport { NODE_MAINTENANCE_FLAG } from '../../features';\n\nconst tableColumnClasses = {\n  name: classNames('col-lg-2', 'col-md-4', 'col-sm-12', 'col-xs-12'),\n  status: classNames('col-lg-2', 'col-md-4', 'col-sm-6', 'hidden-xs'),\n  node: classNames('col-lg-2', 'col-md-4', 'hidden-sm', 'hidden-xs'),\n  role: classNames('col-lg-2', 'hidden-md', 'hidden-sm', 'hidden-xs'),\n  address: classNames('col-lg-2', 'hidden-md', 'hidden-sm', 'hidden-xs'),\n  serialNumber: classNames('col-lg-2', 'hidden-md', 'hidden-sm', 'hidden-xs'),\n  kebab: Kebab.columnClass,\n};\n\nconst HostsTableHeader = () => [\n  {\n    title: 'Name',\n    sortField: 'host.metadata.name',\n    transforms: [sortable],\n    props: { className: tableColumnClasses.name },\n  },\n  {\n    title: 'Status',\n    sortField: 'status.status',\n    transforms: [sortable],\n    props: { className: tableColumnClasses.status },\n  },\n  {\n    title: 'Node',\n    sortField: 'node.metadata.name',\n    transforms: [sortable],\n    props: { className: tableColumnClasses.node },\n  },\n  {\n    title: 'Role',\n    sortField: 'machine.metadata.labels[\"machine.openshift.io/cluster-api-machine-role\"]',\n    transforms: [sortable],\n    props: { className: tableColumnClasses.role },\n  },\n  {\n    title: 'Management Address',\n    sortField: 'host.spec.bmc.address',\n    transforms: [sortable],\n    props: { className: tableColumnClasses.address },\n  },\n  {\n    title: 'Serial Number',\n    sortField: 'host.status.hardware.systemVendor.serialNumber',\n    transforms: [sortable],\n    props: { className: tableColumnClasses.serialNumber },\n  },\n  {\n    title: '',\n    props: { className: tableColumnClasses.kebab },\n  },\n];\n\nconst HostsTableRow: React.FC<RowFunctionArgs<BareMetalHostBundle>> = ({\n  obj: { host, node, nodeMaintenance, machine, machineSet, status },\n  index,\n  key,\n  style,\n}) => {\n  const hasNodeMaintenanceCapability = useFlag(NODE_MAINTENANCE_FLAG);\n  const name = getName(host);\n  const namespace = getNamespace(host);\n  const address = getHostBMCAddress(host);\n  const uid = getUID(host);\n  const nodeName = getName(node);\n  const { serialNumber } = getHostVendorInfo(host);\n\n  return (\n    <TableRow id={uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses.name}>\n        <ResourceLink\n          kind={referenceForModel(BareMetalHostModel)}\n          name={name}\n          namespace={namespace}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses.status}>\n        <BareMetalHostStatus {...status} nodeMaintenance={nodeMaintenance} host={host} />\n        <BareMetalHostSecondaryStatus host={host} />\n      </TableData>\n      <TableData className={tableColumnClasses.node}>\n        <NodeLink nodeName={nodeName} />\n      </TableData>\n      <TableData className={tableColumnClasses.role}>\n        <BareMetalHostRole machine={machine} node={node} />\n      </TableData>\n      <TableData className={tableColumnClasses.address}>{address || DASH}</TableData>\n      <TableData className={tableColumnClasses.serialNumber}>{serialNumber || DASH}</TableData>\n      <TableData className={tableColumnClasses.kebab}>\n        <Kebab\n          options={menuActions.map((action) =>\n            action(BareMetalHostModel, host, {\n              nodeMaintenance,\n              nodeName,\n              hasNodeMaintenanceCapability,\n              machine,\n              machineSet,\n              status,\n            }),\n          )}\n          key={`kebab-for-${uid}`}\n          id={`kebab-for-${uid}`}\n        />\n      </TableData>\n    </TableRow>\n  );\n};\n\ntype BareMetalHostsTableProps = React.ComponentProps<typeof Table> & {\n  data: BareMetalHostBundle[];\n};\n\nconst BareMetalHostsTable: React.FC<BareMetalHostsTableProps> = (props) => {\n  const row = React.useCallback<RowFunction<BareMetalHostBundle>>(\n    (rowProps) => <HostsTableRow {...rowProps} />,\n    [],\n  );\n  return (\n    <Table\n      {...props}\n      defaultSortField=\"host.metadata.name\"\n      aria-label=\"Bare Metal Hosts\"\n      Header={HostsTableHeader}\n      Row={row}\n      virtualize\n    />\n  );\n};\n\nexport default BareMetalHostsTable;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AAGA;AAQA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAcA;AAEA;;;;;;;;;;;;;AC7JA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAMA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAMA;AACA;AAIA;AAUA;AAEA;;;;;A","sourceRoot":""}