{"version":3,"file":"create-obc-c3370b6f12f1bb6ac3a6.js","sources":["webpack:///./packages/noobaa-storage-plugin/src/components/object-bucket-claim-page/create-obc.scss?33f3","webpack:///./packages/noobaa-storage-plugin/src/components/object-bucket-claim-page/create-obc.tsx","webpack:///./packages/noobaa-storage-plugin/src/components/object-bucket-page/state.ts","webpack:///./packages/noobaa-storage-plugin/src/constants/index.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { match } from 'react-router';\nimport { Link } from 'react-router-dom';\nimport {\n  ButtonBar,\n  history,\n  resourceObjPath,\n  resourcePathFromModel,\n  Firehose,\n} from '@console/internal/components/utils';\nimport { StorageClassDropdown } from '@console/internal/components/utils/storage-class-dropdown';\nimport {\n  apiVersionForModel,\n  k8sCreate,\n  K8sResourceKind,\n  referenceFor,\n  referenceForModel,\n} from '@console/internal/module/k8s';\nimport {\n  NooBaaObjectBucketClaimModel,\n  NooBaaBucketClassModel,\n} from '@console/noobaa-storage-plugin/src/models';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { getName, ResourceDropdown, isObjectSC } from '@console/shared';\nimport { commonReducer, defaultState } from '../object-bucket-page/state';\nimport { OCS_NS, NB_PROVISIONER } from '../../constants';\nimport './create-obc.scss';\n\nexport const CreateOBCPage: React.FC<CreateOBCPageProps> = (props) => {\n  const [state, dispatch] = React.useReducer(commonReducer, defaultState);\n\n  const namespace = props?.match?.params?.ns;\n  const isNoobaa = state.scProvisioner?.includes(NB_PROVISIONER);\n\n  React.useEffect(() => {\n    const obj: K8sResourceKind = {\n      apiVersion: apiVersionForModel(NooBaaObjectBucketClaimModel),\n      kind: NooBaaObjectBucketClaimModel.kind,\n      metadata: {\n        namespace,\n      },\n      spec: {\n        ssl: false,\n      },\n    };\n    if (state.scName) {\n      obj.spec.storageClassName = state.scName;\n    }\n    if (state.name) {\n      obj.metadata.name = state.name;\n      obj.spec.generateBucketName = state.name;\n    } else {\n      obj.metadata.generateName = 'bucketclaim-';\n      obj.spec.generateBucketName = 'bucket-';\n    }\n    if (state.bucketClass && isNoobaa) {\n      obj.spec.additionalConfig = { bucketclass: state.bucketClass };\n    }\n    dispatch({ type: 'setPayload', payload: obj });\n  }, [namespace, state.name, state.scName, state.bucketClass, isNoobaa]);\n\n  const save = (e: React.FormEvent<EventTarget>) => {\n    e.preventDefault();\n    dispatch({ type: 'setProgress' });\n    k8sCreate(NooBaaObjectBucketClaimModel, state.payload)\n      .then((resource) => {\n        dispatch({ type: 'unsetProgress' });\n        history.push(resourceObjPath(resource, referenceFor(resource)));\n      })\n      .catch((err) => {\n        dispatch({ type: 'setError', message: err.message });\n        dispatch({ type: 'unsetProgress' });\n      });\n  };\n\n  const onScChange = (sc) => {\n    dispatch({ type: 'setStorage', name: getName(sc) });\n    dispatch({ type: 'setProvisioner', name: sc?.provisioner });\n  };\n\n  return (\n    <div className=\"co-m-pane__body co-m-pane__form\">\n      <Helmet>\n        <title>Create Object Bucket Claim</title>\n      </Helmet>\n      <h1 className=\"co-m-pane__heading co-m-pane__heading--baseline\">\n        <div className=\"co-m-pane__name\">Create Object Bucket Claim</div>\n        <div className=\"co-m-pane__heading-link\">\n          <Link\n            to={`${resourcePathFromModel(NooBaaObjectBucketClaimModel, null, namespace)}/~new`}\n            replace\n          >\n            Edit YAML\n          </Link>\n        </div>\n      </h1>\n      <form className=\"co-m-pane__body-group\" onSubmit={save}>\n        <div>\n          <div className=\"form-group\">\n            <label className=\"control-label\" htmlFor=\"obc-name\">\n              Object Bucket Claim Name\n            </label>\n            <div className=\"form-group\">\n              <input\n                className=\"pf-c-form-control\"\n                type=\"text\"\n                onChange={(e) => dispatch({ type: 'setName', name: e.currentTarget.value })}\n                placeholder=\"my-object-bucket\"\n                aria-describedby=\"obc-name-help\"\n                id=\"obc-name\"\n                name=\"obcName\"\n                pattern=\"[a-z0-9](?:[-a-z0-9]*[a-z0-9])?\"\n              />\n              <p className=\"help-block\" id=\"obc-name-help\">\n                If not provided, a generic name will be generated.\n              </p>\n            </div>\n            <div className=\"form-group\">\n              <StorageClassDropdown\n                onChange={onScChange}\n                required\n                name=\"storageClass\"\n                hideClassName=\"co-required\"\n                filter={isObjectSC}\n                id=\"sc-dropdown\"\n              />\n              <p className=\"help-block\">\n                Defines the object-store service and the bucket provisioner.\n              </p>\n            </div>\n            {isNoobaa && (\n              <div className=\"form-group\">\n                <label className=\"control-label co-required\" htmlFor=\"obc-name\">\n                  Bucket Class\n                </label>\n                <Firehose\n                  resources={[\n                    {\n                      isList: true,\n                      kind: referenceForModel(NooBaaBucketClassModel),\n                      namespace: OCS_NS,\n                      prop: 'bucketClass',\n                    },\n                  ]}\n                >\n                  <ResourceDropdown\n                    onChange={(sc) => dispatch({ type: 'setBucketClass', name: sc })}\n                    dataSelector={['metadata', 'name']}\n                    selectedKey={state.bucketClass}\n                    placeholder=\"Select Bucket Class\"\n                    dropDownClassName=\"dropdown--full-width\"\n                    className=\"nb-create-obc__bc-dropdown\"\n                    id=\"bc-dropdown\"\n                  />\n                </Firehose>\n              </div>\n            )}\n          </div>\n        </div>\n        <ButtonBar errorMessage={state.error} inProgress={state.progress}>\n          <ActionGroup className=\"pf-c-form\">\n            <Button type=\"submit\" variant=\"primary\">\n              Create\n            </Button>\n            <Button onClick={history.goBack} type=\"button\" variant=\"secondary\">\n              Cancel\n            </Button>\n          </ActionGroup>\n        </ButtonBar>\n      </form>\n    </div>\n  );\n};\n\ntype CreateOBCPageProps = {\n  match: match<{ ns?: string }>;\n};\n","import { K8sResourceKind } from '@console/internal/module/k8s';\n\ntype State = {\n  name: string;\n  scName: string;\n  scProvisioner: string;\n  sizeValue: string;\n  sizeUnit: string;\n  progress: boolean;\n  error: string;\n  payload: K8sResourceKind;\n  bucketClass: string;\n};\n\nexport const defaultState = {\n  name: '',\n  scName: '',\n  scProvisioner: '',\n  progress: false,\n  error: '',\n  payload: {},\n  sizeUnit: 'GiB',\n  sizeValue: '',\n  bucketClass: 'noobaa-default-bucket-class',\n};\n\ntype Action =\n  | { type: 'setName'; name: string }\n  | { type: 'setStorage'; name: string }\n  | { type: 'setProvisioner'; name: string }\n  | { type: 'setProgress' }\n  | { type: 'unsetProgress' }\n  | { type: 'setError'; message: string }\n  | { type: 'setPayload'; payload: {} }\n  | { type: 'setSize'; unit: string; value: string }\n  | { type: 'setBucketClass'; name: string };\n\nexport const commonReducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'setName':\n      return Object.assign({}, state, { name: action.name });\n    case 'setStorage':\n      return Object.assign({}, state, { scName: action.name });\n    case 'setProvisioner':\n      return Object.assign({}, state, { scProvisioner: action.name });\n    case 'setProgress':\n      return Object.assign({}, state, { progress: true });\n    case 'unsetProgress':\n      return Object.assign({}, state, { progress: false });\n    case 'setError':\n      return Object.assign({}, state, { error: action.message });\n    case 'setSize':\n      return Object.assign({}, state, { sizeUnit: action.unit, sizeValue: action.value });\n    case 'setPayload':\n      return Object.assign({}, state, { payload: action.payload });\n    case 'setBucketClass':\n      return Object.assign({}, state, { bucketClass: action.name });\n    default:\n      return defaultState;\n  }\n};\n","export const ACCOUNTS = 'Accounts';\nexport const PROVIDERS = 'Providers';\nexport const BY_IOPS = 'I/O Operations';\nexport const BY_LOGICAL_USAGE = 'Logical Used Capacity';\nexport const BY_PHYSICAL_VS_LOGICAL_USAGE = 'Physical Vs Logical Usage';\nexport const BY_EGRESS = 'Egress';\nexport const PROJECTS = 'Projects';\nexport const BUCKET_CLASS = 'Bucket Class';\nexport const OCS_NS = 'openshift-storage';\nexport const NB_PROVISIONER = 'noobaa.io/obc';\n\nexport const CHART_LABELS = {\n  [BY_LOGICAL_USAGE]: 'Logical used capacity per account',\n  [BY_PHYSICAL_VS_LOGICAL_USAGE]: 'Physical vs. Logical used capacity',\n  [BY_EGRESS]: 'Egress Per Provider',\n  [BY_IOPS]: 'I/O Operations count',\n};\n\nexport enum BC_PROVIDERS {\n  AWS = 'AWS S3',\n  S3 = 'S3 Compatible',\n  PVC = 'PVC',\n  GCP = 'Google cloud storage',\n  AZURE = 'Azure Blob',\n  IBM = 'IBM COS',\n}\n\nexport const PROVIDERS_NOOBAA_MAP = {\n  [BC_PROVIDERS.AWS]: 'awsS3',\n  [BC_PROVIDERS.S3]: 's3Compatible',\n  [BC_PROVIDERS.AZURE]: 'azureBlob',\n  [BC_PROVIDERS.GCP]: 'googleCloudStorage',\n  [BC_PROVIDERS.PVC]: 'pvPool',\n  [BC_PROVIDERS.IBM]: 'ibmCos',\n};\n\nexport const BUCKET_LABEL_NOOBAA_MAP = {\n  [BC_PROVIDERS.AWS]: 'targetBucket',\n  [BC_PROVIDERS.S3]: 'targetBucket',\n  [BC_PROVIDERS.AZURE]: 'targetBlobContainer',\n  [BC_PROVIDERS.GCP]: 'targetBucket',\n  [BC_PROVIDERS.IBM]: 'targetBucket',\n};\n\nexport const NOOBAA_TYPE_MAP = {\n  [BC_PROVIDERS.AWS]: 'aws-s3',\n  [BC_PROVIDERS.S3]: 's3-compatible',\n  [BC_PROVIDERS.AZURE]: 'azure-blob',\n  [BC_PROVIDERS.GCP]: 'google-cloud-storage',\n  [BC_PROVIDERS.PVC]: 'pv-pool',\n  [BC_PROVIDERS.IBM]: 'ibm-cos',\n};\n\nexport const AWS_REGIONS = [\n  'us-east-1',\n  'us-east-2',\n  'us-west-1',\n  'us-west-2',\n  'ca-central-1',\n  'eu-central-1',\n  'eu-west-1',\n  'eu-west-2',\n  'eu-west-3',\n  'eu-north-1',\n  'ap-east-1',\n  'ap-northeast-1',\n  'ap-northeast-2',\n  'ap-northeast-3',\n  'ap-southeast-1',\n  'ap-southeast-2',\n  'ap-south-1',\n  'me-south-1',\n  'sa-east-1',\n];\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAOA;AACA;AAOA;AAIA;AACA;AACA;AACA;AACA;AAEA;;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AAGA;AACA;AAUA;AAIA;AACA;AAQA;AAIA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAcA;AACA;AACA;AAGA;AAQA;;;;;;;;;;;;;AC/JA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}