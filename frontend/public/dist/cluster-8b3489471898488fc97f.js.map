{"version":3,"file":"cluster-8b3489471898488fc97f.js","sources":["webpack:///./public/components/hypercloud/cluster.tsx","webpack:///./public/components/hypercloud/members.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\n\nimport { Status } from '@console/shared';\nimport { K8sResourceKind, K8sKind } from '../../module/k8s';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from '../factory';\nimport { DetailsItem, Kebab, KebabAction, detailsPage, navFactory, ResourceKebab, ResourceLink, ResourceSummary, SectionHeading, Timestamp } from '../utils';\nimport { ClusterManagerModel } from '../../models';\nimport { configureClusterNodesModal } from './modals';\nimport { MembersPage } from './members';\nimport { ResourceLabel } from '../../models/hypercloud/resource-plural';\n\nconst ModifyClusterNodes: KebabAction = (kind: K8sKind, obj: any) => ({\n  label: 'Edit Nodes',\n  callback: () =>\n    configureClusterNodesModal({\n      resourceKind: kind,\n      resource: obj,\n    }),\n  accessReview: {\n    group: kind.apiGroup,\n    resource: kind.plural,\n    name: obj.metadata.name,\n    verb: 'patch',\n  },\n});\n\nexport const menuActions: KebabAction[] = [ModifyClusterNodes, ...Kebab.getExtensionsActionsForKind(ClusterManagerModel), ...Kebab.factory.common];\n\nconst kind = ClusterManagerModel.kind;\n\nconst tableColumnClasses = ['', '', classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), Kebab.columnClass];\n\nconst ClusterTableHeader = (t?: TFunction) => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_58'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_59'),\n      sortField: 'spec.provider',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_60'),\n      sortField: 'spec.provider',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_61'),\n      sortField: 'status.ready',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_62'),\n      sortField: 'spec.version',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: 'Master Node',\n      sortField: 'spec.masterNum',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[5] },\n    },\n    {\n      title: 'Worker Node',\n      sortField: 'spec.workerNum',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[6] },\n    },\n    {\n      title: 'Owner',\n      // sortField: 'status.owner',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[7] },\n    },\n    {\n      title: 'Created',\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[8] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[9] },\n    },\n  ];\n};\nClusterTableHeader.displayName = 'ClusterTableHeader';\n\nconst ClusterTableRow: RowFunction<IClusterTableRow> = ({ obj: cluster, index, key, style }) => {\n  const owner = Object.keys(cluster.status?.owner)[0];\n  return (\n    <TableRow id={cluster.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={cluster.metadata.name} displayName={cluster.fakeMetadata.fakename} title={cluster.metadata.uid} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1])}>{cluster.spec.provider}</TableData>\n      <TableData className={classNames(tableColumnClasses[2])}>{cluster.spec.provider ? \"생성\" : \"등록\"}</TableData>\n      <TableData className={tableColumnClasses[3]}>{cluster.status?.ready ? \"준비\" : \"생성 중\"}</TableData>\n      <TableData className={tableColumnClasses[4]}>{cluster.spec.version}</TableData>\n      <TableData className={tableColumnClasses[5]}>{`${cluster.status?.masterRun ?? 0} / ${cluster.spec?.masterNum ?? 0}`}</TableData>\n      <TableData className={tableColumnClasses[6]}>{`${cluster.status?.workerRun ?? 0} / ${cluster.spec?.workerNum ?? 0}`}</TableData>\n      <TableData className={tableColumnClasses[7]}>{owner}</TableData>\n      <TableData className={tableColumnClasses[8]}>\n        <Timestamp timestamp={cluster.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[9]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={cluster} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport const ClusterDetailsList: React.FC<ClusterDetailsListProps> = ({ cl }) => {\n  const { t } = useTranslation();\n  return (\n    <dl className=\"co-m-pane__details\">\n      <DetailsItem label={t(\"MSG_DETAILS_TABDETAILS_1\")} obj={cl} path=\"spec.provider\" />\n      <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_2')} obj={cl} path=\"spec.provider\">\n        {cl.spec.provider ? t('MULTI:MSG_MULTI_CLUSTERS_TABLECONTENTS_TYPE_1') : t('MULTI:MSG_MULTI_CLUSTERS_TABLECONTENTS_TYPE_2')}\n      </DetailsItem>\n      <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_13')} obj={cl} path=\"status.ready\">\n        <Status status={cl.status.ready ? t('MULTI:MSG_MULTI_CLUSTERS_TABLECONTENTS_STATUS_1') : t('MULTI:MSG_MULTI_CLUSTERS_TABLECONTENTS_STATUS_2')} />\n      </DetailsItem>\n      <DetailsItem label=\"Provider\" obj={cl} path=\"spec.provider\" />\n      <DetailsItem label=\"Version\" obj={cl} path=\"spec.version\" />\n      <DetailsItem label=\"Region\" obj={cl} path=\"spec.region\" />\n      <DetailsItem label=\"Master Node\" obj={cl} path=\"spec.masterNum\">\n        {`${cl.status?.masterRun ?? 0} / ${cl.spec.masterNum ?? 0}`}\n      </DetailsItem>\n      <DetailsItem label=\"Master Node Type\" obj={cl} path=\"spec.masterType\" />\n      <DetailsItem label=\"Worker Node\" obj={cl} path=\"spec.workerNum\">\n        {`${cl.status?.workerRun ?? 0} / ${cl.spec.workerNum ?? 0}`}\n      </DetailsItem>\n      <DetailsItem label=\"Worker Node Type\" obj={cl} path=\"spec.workerType\" />\n      <DetailsItem label=\"SSH Key\" obj={cl} path=\"spec.sshKey\" />\n    </dl>\n  );\n};\n\ninterface KeyValuePrintProps {\n  obj: any;\n  key: string;\n}\n\nconst KeyValuePrint: React.FC<KeyValuePrintProps> = ({ obj, key }) => {\n  return <div>{`${key} / ${obj[key]}`}</div>;\n};\n\nconst ClusterDetails: React.FC<ClusterDetailsProps> = ({ obj: cluster }) => {\n  const owner = cluster.status.owner && Object.keys(cluster.status.owner)[0];\n  const members = cluster.status.members && Object.keys(cluster.status.members);\n  const groups = cluster.status.groups && Object.keys(cluster.status.groups);\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', {0: ResourceLabel(cluster, t)})} />\n        <div className=\"row\">\n          <div className=\"col-lg-6\">\n            <ResourceSummary resource={cluster} customPathName={'fakeMetadata.fakename'} showOwner={false} />\n            {cluster.status.owner && <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_44')} obj={cluster} children={KeyValuePrint({ obj: cluster.status.owner, key: owner })} />}\n            {cluster.status.members && <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_39')} obj={cluster} children={members.map(member => KeyValuePrint({ obj: cluster.status.members, key: member }))} />}\n            {cluster.status.groups && <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_40')} obj={cluster} children={groups.map(group => KeyValuePrint({ obj: cluster.status.groups, key: group }))} />}\n          </div>\n          <div className=\"col-lg-6\">\n            <ClusterDetailsList cl={cluster} />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst { details, /* nodes, */ editYaml /*, events */ } = navFactory;\nexport const Clusters: React.FC = props => {\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"Clusters\" Header={ClusterTableHeader.bind(null, t)} Row={ClusterTableRow} virtualize />;\n}\n\nexport const ClustersPage: React.FC<ClustersPageProps> = props => {\n  const { t } = useTranslation();\n  return <ListPage title={t('COMMON:MSG_LNB_MENU_84')} createButtonText={t('COMMON:MSG_MAIN_CREATEBUTTON_1', { 0: t('COMMON:MSG_LNB_MENU_84') })} ListComponent={Clusters} kind={kind} {...props} />;\n};\n\nexport const ClustersDetailsPage: React.FC<ClustersDetailsPageProps> = props => {\n  return (\n    <DetailsPage\n      {...props}\n      titleFunc={(obj: any) => obj.fakeMetadata.fakename}\n      kind={kind}\n      menuActions={menuActions}\n      pages={[\n        details(detailsPage(ClusterDetails)),\n        editYaml() /* nodes(ClusterNodes),  events(ResourceEventStream) */,\n        {\n          href: 'members',\n          name: 'Members',\n          component: pageProps => <MembersPage resource={pageProps.obj} title=\"Members\" userHeading=\"Users\" userGroupHeading=\"User Groups\" />,\n        },\n      ]}\n    />\n  );\n};\n\ninterface IClusterTableRow extends K8sResourceKind {\n  fakeMetadata: any;\n}\n\ntype ClusterDetailsListProps = {\n  cl: K8sResourceKind;\n};\n\ntype ClusterDetailsProps = {\n  obj: K8sResourceKind;\n};\n\ntype ClustersPageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: any;\n};\n\ntype ClustersDetailsPageProps = {\n  match: any;\n};\n","import * as _ from \"lodash\";\nimport * as React from \"react\";\nimport * as classNames from 'classnames';\nimport { Button } from '@patternfly/react-core';\nimport { EmptyBox, PageHeading, SectionHeading, } from '../utils';\nimport { Table, TableHeader, TableBody, sortable, SortByDirection } from '@patternfly/react-table';\nimport { getId } from '../../hypercloud/auth';\n\nconst getRowUserData = (users): RowUserData[] => {\n  const data: RowUserData[] = [];\n\n  _.forEach(users, (role, name) => {\n    data.push([name, role]);\n  });\n  return data;\n};\n\nconst UsersTableHeader = [\n  {\n    title: 'Name',\n    transforms: [sortable],\n  },\n  {\n    title: 'Role',\n    transforms: [sortable],\n  },\n];\n\nconst getRowUserGroupData = (userGroups): RowUserGroupData[] => {\n  const data: RowUserGroupData[] = [];\n\n  _.forEach(userGroups, (role, name) => {\n    data.push([name, role]);\n  });\n  return data;\n};\n\nconst UserGroupsTableHeader = [\n  {\n    title: 'Name',\n    transforms: [sortable],\n  },\n  {\n    title: 'Role',\n    transforms: [sortable],\n  },\n];\n\nexport const UsersTable = (props) => {\n  const { clusterName, isOwner, users, heading } = props;\n\n  const [rows, setRows] = React.useState(getRowUserData(users));\n  const [sortBy, setSortBy] = React.useState({ index: 0, direction: SortByDirection.asc });\n\n  React.useEffect(() => {\n    setRows(getRowUserData(users));\n  }, [users]);\n\n  const onSort = (_event, index, direction) => {\n    const sortedRows = rows.sort((a, b) => {\n      const compA = typeof a[index] === 'string' ? (a[index] as string).toLowerCase() : a[index],\n        compB = typeof b[index] === 'string' ? (b[index] as string).toLowerCase() : b[index];\n      return compA < compB ? -1 : compA > compB ? 1 : 0;\n    });\n\n    setSortBy({\n      index,\n      direction\n    });\n    setRows(direction === SortByDirection.asc ? sortedRows : sortedRows.reverse());\n\n  };\n\n  const userActions = [\n    {\n      title: 'Update User',\n      onClick: (event, rowId, rowData, extra) => {\n        inviteMemberModal({ clusterName, modalClassName: 'modal-lg', type: 'User', member: rowData[0], role: rowData[1], requestType: 'update' })\n      }\n    },\n    {\n      title: 'Delete User',\n      onClick: (event, rowId, rowData, extra) => {\n        console.log('clicked on Some action, on row: ', rowId)\n        removeMemberModal({ clusterName, modalClassName: 'modal-lg', type: 'User', member: rowData[0] })\n      }\n    }\n  ]\n\n  return (\n    <div className=\"hc-members__users\">\n      {heading && <SectionHeading text={heading} />}\n      {_.isEmpty(rows) ? (\n        <EmptyBox label=\"Users\" />\n      ) : (\n          <Table aria-label=\"Users\" sortBy={sortBy} onSort={onSort} cells={UsersTableHeader} rows={rows} actions={isOwner && userActions}>\n            <TableHeader />\n            <TableBody />\n          </Table>\n        )}\n    </div>\n  );\n};\n\nexport const UserGroupsTable = (props) => {\n  const { clusterName, isOwner, groups, heading } = props;\n  const data: RowUserGroupData[] = getRowUserGroupData(groups);\n\n  const [rows, setRows] = React.useState(data);\n  const [sortBy, setSortBy] = React.useState({ index: 0, direction: SortByDirection.asc });\n\n  React.useEffect(() => {\n    setRows(getRowUserGroupData(groups));\n  }, [groups]);\n\n  const onSort = (_event, index, direction) => {\n    const sortedRows = rows.sort((a, b) => {\n      const compA = typeof a[index] === 'string' ? (a[index] as string).toLowerCase() : a[index],\n        compB = typeof b[index] === 'string' ? (b[index] as string).toLowerCase() : b[index];\n      return compA < compB ? -1 : compA > compB ? 1 : 0;\n    });\n\n    setSortBy({\n      index,\n      direction\n    });\n    setRows(direction === SortByDirection.asc ? sortedRows : sortedRows.reverse());\n\n  };\n\n  const userGroupActions = [\n    {\n      title: 'Update User Group',\n      onClick: (event, rowId, rowData, extra) => {\n        inviteMemberModal({ clusterName, modalClassName: 'modal-lg', type: 'Group', member: rowData[0], role: rowData[1], requestType: 'update' })\n      }\n    },\n    {\n      title: 'Delete User Group',\n      onClick: (event, rowId, rowData, extra) => {\n        removeMemberModal({ clusterName, modalClassName: 'modal-lg', type: 'Group', member: rowData[0] })\n      }\n    }\n  ]\n\n  return (\n    <div className=\"hc-members__user-groups\">\n      {heading && <SectionHeading text={heading} />}\n      {_.isEmpty(data) ? (\n        <EmptyBox label=\"UserGroups\" />\n      ) : (\n          <Table aria-label=\"UserGroups\" sortBy={sortBy} onSort={onSort} cells={UserGroupsTableHeader} rows={rows} actions={isOwner && userGroupActions}>\n            <TableHeader />\n            <TableBody />\n          </Table>\n        )}\n    </div>\n  );\n};\n\nexport const inviteMemberModal = (props) =>\n  import('./modals/invite-member-modal' /* webpackChunkName: \"members-modal\" */).then((m) => m.inviteMemberModal(props));\n\nexport const removeMemberModal = (props) =>\n  import('./modals/remove-member-modal' /* webpackChunkName: \"remove-member-modal\" */).then((m) => m.removeMemberModal(props));\n\nexport const MembersPage = (props) => {\n  const isOwner = Object.keys(props.resource.status.owner)[0] === getId();\n  return (\n    <>\n      <PageHeading title={props.title} className={classNames('co-m-nav-title--row')}>\n        {isOwner &&\n          <div className=\"co-m-primary-action\">\n            <Button variant=\"primary\" id=\"yaml-create\" onClick={() => inviteMemberModal({ clusterName: props.resource.metadata.name, modalClassName: 'modal-lg' })}>\n              Invite Member\n          </Button>\n          </div>}\n      </PageHeading>\n      <div className=\"hc-members__body\">\n        <UsersTable clusterName={props.resource.metadata.name} isOwner={isOwner} users={props.resource.status.members} heading={props.userHeading} />\n        <UserGroupsTable clusterName={props.resource.metadata.name} isOwner={isOwner} groups={props.resource.status.groups} heading={props.userGroupHeading} />\n      </div>\n    </>\n  );\n}\n\nexport type RowUserData = [string, string];\n\nexport type RowUserGroupData = [string, string];\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;ACtNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAIA;AACA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAIA;AACA;AAKA;AAEA;AAGA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AACA;AACA;AAIA;;;;;A","sourceRoot":""}