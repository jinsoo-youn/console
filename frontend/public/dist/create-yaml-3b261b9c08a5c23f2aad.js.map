{"version":3,"file":"create-yaml-3b261b9c08a5c23f2aad.js","sources":["webpack:///./packages/console-shared/src/utils/yaml.ts","webpack:///./public/components/create-yaml.tsx"],"sourcesContent":["import { safeDump, safeLoad } from 'js-yaml';\n\n// Safely parse js obj to yaml. Returns fallback (emtpy string by default) on exception.\nexport const safeJSToYAML = (js: any, fallback: string = '', options: any = {}): string => {\n  try {\n    return safeDump(js, options);\n  } catch {\n    return fallback;\n  }\n};\n\n// Safely parse yaml to js object. Returns fallback (empty object by default) on exception.\nexport const safeYAMLToJS = (yaml: string, fallback: any = {}, options: any = {}): any => {\n  try {\n    return safeLoad(yaml, options);\n  } catch {\n    return fallback;\n  }\n};\n\nexport const asyncJSToYAML = (js: any, options: any = {}): Promise<string> => {\n  return new Promise((resolve, reject) => {\n    try {\n      const yaml = safeDump(js, options);\n      resolve(yaml);\n    } catch (e) {\n      reject(e);\n    }\n  });\n};\n\nexport const asyncYAMLToJS = (yaml: string, options: any = {}): Promise<any> => {\n  return new Promise((resolve, reject) => {\n    try {\n      const js = safeLoad(yaml, options);\n      resolve(js);\n    } catch (e) {\n      reject(e);\n    }\n  });\n};\n","import * as React from 'react';\nimport { match as RouterMatch } from 'react-router-dom';\nimport { yamlTemplates } from '../models/yaml-templates';\nimport { connectToPlural } from '../kinds';\nimport { AsyncComponent } from './utils/async';\nimport { Firehose, LoadingBox } from './utils';\nimport {\n  K8sKind,\n  apiVersionForModel,\n  referenceForModel,\n  K8sResourceKindReference,\n  K8sResourceKind,\n} from '../module/k8s';\nimport { ErrorPage404 } from './error';\nimport { safeYAMLToJS } from '@console/shared/src/utils/yaml';\n\nexport const CreateYAML = connectToPlural((props: CreateYAMLProps) => {\n  const {\n    match,\n    kindsInFlight,\n    kindObj,\n    hideHeader = false,\n    onChange = () => null,\n    resourceObjPath,\n  } = props;\n  const { params } = match;\n\n  if (!kindObj) {\n    if (kindsInFlight) {\n      return <LoadingBox />;\n    }\n    return <ErrorPage404 />;\n  }\n\n  const namespace = params.ns || 'default';\n  const template =\n    props.template ||\n    yamlTemplates.getIn([referenceForModel(kindObj), 'default']) ||\n    yamlTemplates.getIn(['DEFAULT', 'default']);\n\n  const obj = safeYAMLToJS(template);\n  obj.kind = kindObj.kind;\n  obj.metadata = obj.metadata || {};\n  if (kindObj.namespaced) {\n    obj.metadata.namespace = namespace;\n  }\n  if (kindObj.crd && template === yamlTemplates.getIn(['DEFAULT', 'default'])) {\n    obj.apiVersion = apiVersionForModel(kindObj);\n    obj.spec = obj.spec || {};\n  }\n  const header = `Create ${kindObj.label}`;\n\n  // TODO: if someone edits namespace, we'll redirect to old namespace\n\n  return (\n    <AsyncComponent\n      loader={() => import('./droppable-edit-yaml').then((c) => c.DroppableEditYAML)}\n      obj={obj}\n      create={true}\n      kind={kindObj.kind}\n      header={header}\n      hideHeader={hideHeader}\n      resourceObjPath={resourceObjPath}\n      onChange={onChange}\n    />\n  );\n});\n\nexport const EditYAMLPage: React.SFC<EditYAMLPageProps> = (props) => {\n  const Wrapper = (wrapperProps) => (\n    <AsyncComponent\n      {...wrapperProps}\n      obj={wrapperProps.obj.data}\n      loader={() => import('./edit-yaml').then((c) => c.EditYAML)}\n      create={false}\n    />\n  );\n  return (\n    <Firehose\n      resources={[\n        {\n          kind: props.kind,\n          name: props.match.params.name,\n          namespace: props.match.params.ns,\n          isList: false,\n          prop: 'obj',\n        },\n      ]}\n    >\n      <Wrapper />\n    </Firehose>\n  );\n};\n\nexport type CreateYAMLProps = {\n  match: RouterMatch<{ ns: string; plural: string; appName?: string }>;\n  kindsInFlight: boolean;\n  kindObj: K8sKind;\n  template?: string;\n  download?: boolean;\n  header?: string;\n  hideHeader?: boolean;\n  resourceObjPath?: (obj: K8sResourceKind, kind: K8sResourceKindReference) => string;\n  onChange?: (yaml: string) => any;\n};\n\nexport type EditYAMLPageProps = {\n  match: RouterMatch<{ ns: string; name: string }>;\n  kind: string;\n};\n\nEditYAMLPage.displayName = 'EditYAMLPage';\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAOA;AACA;AAEA;AACA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAYA;AAEA;AACA;AAQA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAmBA;;;;;A","sourceRoot":""}