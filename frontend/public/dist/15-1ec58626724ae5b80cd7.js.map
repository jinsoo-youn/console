{"version":3,"file":"15-1ec58626724ae5b80cd7.js","sources":["webpack:///./public/components/hypercloud/utils/resource-list-dropdown.tsx","webpack:///./public/components/hypercloud/utils/section.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { OrderedMap } from 'immutable';\nimport * as classNames from 'classnames';\nimport * as fuzzy from 'fuzzysearch';\nimport { useFormContext } from 'react-hook-form';\n\nimport { Dropdown, ResourceIcon } from '../../utils';\nimport {\n  K8sResourceKind,\n} from '../../../module/k8s';\nimport { Badge, Checkbox, DataToolbar, DataToolbarContent, DataToolbarFilter, DataToolbarItem, DataToolbarChip } from '@patternfly/react-core';\n\nconst autocompleteFilter = (text, item) => {\n  const { resource } = item.props;\n  if (!resource) {\n    return false;\n  }\n\n  return fuzzy(_.toLower(text), _.toLower(resource.fakeMetadata?.fakename ?? resource.metadata.name));\n};\n\nexport type HCK8sResourceKind = K8sResourceKind & {\n  fakeMetadata?: any;\n};\n\nconst DropdownItem: React.SFC<DropdownItemProps> = ({ resource }) => (\n  <>\n    <span className={'co-resource-item'}>\n      <span className=\"co-resource-icon--fixed-width\">\n        <ResourceIcon kind={resource.kind} />\n      </span>\n      <span className=\"co-resource-item__resource-name\">\n        <span>\n          {resource.fakeMetadata?.fakename ?? resource.metadata.name}\n        </span>\n      </span>\n    </span>\n  </>\n);\n\nconst DropdownItemWithCheckbox: React.SFC<DropdownItemWithCheckboxProps> = ({ resource, checked }) => (\n  <>\n    <span className={'co-resource-item'}>\n      <Checkbox\n        tabIndex={-1}\n        id={`${resource.metadata.name}:checkbox`}\n        checked={checked}\n      />\n      <span className=\"co-resource-icon--fixed-width\">\n        <ResourceIcon kind={resource.kind} />\n      </span>\n      <span className=\"co-resource-item__resource-name\">\n        <span>\n          {resource.fakeMetadata?.fakename ?? resource.metadata.name}\n        </span>\n      </span>\n    </span>\n  </>\n);\n\ntype DropdownItemProps = {\n  resource: HCK8sResourceKind;\n};\n\ntype DropdownItemWithCheckboxProps = DropdownItemProps & {\n  checked: boolean;\n}\n\nexport const SingleResourceListDropdown: React.SFC<BaseResourceListDropdown & SingleResourceDropdownProps & { selected: string; onChange: (value: string) => void; }> = (props) => {\n  const { resourceList, onChange, className, selected } = props;\n  const isSelected = !!selected;\n\n  // Create dropdown items for each resource.\n  const items = OrderedMap(\n    _.map(resourceList, (resource) => [\n      resource.metadata.name,\n      <DropdownItem resource={resource} />\n    ]\n    )).toJS() as { [s: string]: JSX.Element };\n\n  const autocompletePlaceholder = props.autocompletePlaceholder ?? \"Select Resource\";\n  const placeholder = props.placeholder ?? props.resourceType;\n\n  return (\n    <Dropdown\n      menuClassName=\"dropdown-menu--text-wrap\"\n      className={classNames('co-type-selector', className)}\n      items={items}\n      title={\n        props.title ??\n        (isSelected ? items[selected] : placeholder)\n      }\n      onChange={onChange}\n      autocompleteFilter={props.autocompleteFilter ?? autocompleteFilter}\n      autocompletePlaceholder={autocompletePlaceholder}\n      type='single'\n    />\n  );\n};\n\nexport const MultipleResourceListDropdown: React.SFC<BaseResourceListDropdown & MultipleResourceDropdownProps & { selected: Set<string>; onChange: (value: string) => void; }> = (props) => {\n  const { resourceList, onChange, className, selected, showAll, resourceType } = props;\n  const selectedSize = selected.size;\n\n  const isSelected = (name: string) => {\n    return selected.has('All') || selected.has(name);\n  };\n  // Create dropdown items for each resource.\n  const items = OrderedMap(\n    _.map(resourceList, (resource) => [\n      resource.metadata.name,\n      <DropdownItemWithCheckbox resource={resource} checked={isSelected(resource.metadata.name)} />\n    ]\n    ));\n  // Add an \"All\" item to the top if `showAll`.\n  const allItems = (showAll\n    ? OrderedMap({\n      All: (\n        <>\n          <span className=\"co-resource-item\">\n            <Checkbox id=\"all-resources\" checked={isSelected('All')} />\n            <span className=\"co-resource-icon--fixed-width\">\n              <ResourceIcon kind=\"All\" />\n            </span>\n            <span className=\"co-resource-item__resource-name\">{`All ${resourceType}`}</span>\n          </span>\n        </>\n      ),\n    }).concat(items)\n    : items\n  ).toJS() as { [s: string]: JSX.Element };\n\n  const autocompletePlaceholder = props.autocompletePlaceholder ?? \"Select Resources\";\n\n  return (\n    <Dropdown\n      menuClassName=\"dropdown-menu--text-wrap\"\n      className={classNames('co-type-selector', className)}\n      items={allItems}\n      title={\n        props.title ??\n        <div key=\"title-resource\">\n          {`${props.resourceType} `}\n          <Badge isRead>\n            {selected?.has('All') ? 'All' : selectedSize}\n          </Badge>\n        </div>\n      }\n      onChange={onChange}\n      autocompleteFilter={props.autocompleteFilter ?? autocompleteFilter}\n      autocompletePlaceholder={autocompletePlaceholder}\n      type='multiple'\n    />\n  );\n};\n\nexport interface ResourceDropdownCommon {\n  name?: string;\n  required?: boolean;\n  onChange?: (value: string) => void;\n  title?: string | JSX.Element;\n  resourceType?: string;\n  autocompletePlaceholder?: string;\n  autocompleteFilter?: (text: any, item: any) => any;\n  useHookForm?: boolean;\n  className?: string;\n  dropDownClassName?: string;\n  menuClassName?: string;\n  buttonClassName?: string;\n  type: 'single' | 'multiple';\n  methods?: any;\n}\n\nexport interface BaseResourceListDropdown extends ResourceDropdownCommon {\n  resourceList: HCK8sResourceKind[];\n}\n\nexport interface SingleResourceDropdownProps extends ResourceDropdownCommon {\n  type: 'single';\n  placeholder?: string | JSX.Element;\n  defaultValue?: string;\n}\n\nexport interface MultipleResourceDropdownProps extends ResourceDropdownCommon {\n  type: 'multiple';\n  showAll?: boolean;\n  defaultValue?: string[];\n}\n\nexport const ResourceListDropdown: React.SFC<ResourceListDropdownProps> = (props) => {\n  const { name, required, methods, useHookForm } = props;\n  const { register, unregister, setValue, watch } = methods ? methods : useHookForm ? useFormContext() : { register: null, unregister: null, setValue: null, watch: null };\n\n  if (useHookForm || methods) {\n    React.useEffect(() => {\n      register({ name }, { required });\n\n      return () => {\n        unregister(name);\n      }\n    }, [name, register, unregister]);\n  }\n\n  const defaultValue = watch?.(name, props.defaultValue);\n  React.useEffect(() => {\n    props.defaultValue && setValue?.(name, defaultValue);\n  }, [props.defaultValue]);\n\n  if (props.type === 'multiple') {\n    const { resourceList } = props;\n    const [selectedItems, setSelectedItems] = React.useState(new Set<string>(defaultValue ?? []));\n    const [selectedItemSize, setSelectedItemSize] = React.useState(selectedItems.size);\n    const resourceListLength = resourceList.length;\n    const allItems = new Set<string>(resourceList.map(resource => resource.metadata.name));\n\n    const selectAllItems = () => {\n      setSelectedItems(new Set(['All']));\n      setValue?.(name, [...allItems]);\n      setSelectedItemSize(resourceListLength);\n    }\n\n    const clearAll = () => {\n      setSelectedItems(new Set([]));\n      setValue?.(name, []);\n      setSelectedItemSize(0);\n    };\n\n    const updateSelectedItems = (selection: string) => {\n      if (selection === 'All') {\n        selectedItems.has(selection) ? clearAll() : selectAllItems();\n      } else {\n        if (selectedItems.has('All')) {\n          const updateItems = new Set(allItems);\n          updateItems.delete(selection);\n          setSelectedItems(updateItems);\n          setValue?.(name, [...updateItems]);\n          setSelectedItemSize(resourceListLength - 1);\n        } else {\n          const updateItems = new Set(selectedItems);\n          let updateItemSize = selectedItemSize;\n          if (updateItems.has(selection)) {\n            updateItems.delete(selection)\n            updateItemSize--;\n          } else {\n            updateItems.add(selection);\n            updateItemSize++;\n          }\n          updateItemSize === resourceListLength ? selectAllItems() : setSelectedItems(updateItems);\n          setSelectedItemSize(updateItemSize);\n          setValue?.(name, [...updateItems]);\n        }\n      }\n      props.onChange?.(selection);\n    };\n\n    return (\n      <MultipleResourceListDropdown\n        {...props}\n        selected={selectedItems}\n        onChange={updateSelectedItems}\n      />);\n  } else {\n    const [selectedItem, setSelectedItem] = React.useState(defaultValue ?? '');\n\n    const updateSelectedItem = (selection: string) => {\n      setSelectedItem(selection);\n      setValue?.(name, selection);\n      props.onChange?.(selection);\n    };\n\n    return (\n      <SingleResourceListDropdown\n        {...props}\n        selected={selectedItem}\n        onChange={updateSelectedItem}\n      />);\n  }\n};\n\nexport type ResourceListDropdownProps = BaseResourceListDropdown & (SingleResourceDropdownProps | MultipleResourceDropdownProps);\n\nResourceListDropdown.defaultProps = {\n  resourceType: 'Resources',\n  type: 'single',\n  useHookForm: false,\n};\n\nexport const ResourceListDropdownWithDataToolbar: React.SFC<ResourceListDropdownWithDataToolbarProps> = (props) => {\n  const { resourceList } = props;\n  const [selectedItems, setSelectedItems] = React.useState(new Set<string>([]));\n\n  const allItems = new Set<string>(resourceList.map(resource => resource.metadata.name));\n\n  React.useEffect(() => {\n    props.onSelectedItemChange?.(selectedItems);\n  }, [selectedItems]);\n\n  const updateSelectedItems = (selection: string) => {\n    if (selection === 'All') {\n      selectedItems.has(selection) ? clearAll() : selectAllItems();\n    } else {\n      if (selectedItems.has('All')) {\n        const updateItems = new Set(allItems);\n        updateItems.delete(selection);\n        setSelectedItems(updateItems);\n      } else {\n        const updateItems = new Set(selectedItems);\n        updateItems.has(selection) ? updateItems.delete(selection) : updateItems.add(selection);\n        updateItems.size === resourceList.length ? selectAllItems() : setSelectedItems(updateItems);\n      }\n    }\n    props.onChange?.(selection);\n  };\n\n  const updateNewItems = (filter: string, { key }: DataToolbarChip) => {\n    updateSelectedItems(key);\n  };\n\n  const selectAllItems = () => {\n    setSelectedItems(new Set(['All']));\n  }\n\n  const clearAll = () => {\n    setSelectedItems(new Set([]));\n  };\n\n  return (\n    <DataToolbar id=\"search-toolbar\" clearAllFilters={clearAll} clearFiltersButtonText={props.clearFiltersButtonText ?? `Clear all ${props.resourceType}`}>\n      <DataToolbarContent>\n        <DataToolbarItem>\n          <DataToolbarFilter\n            deleteChipGroup={clearAll}\n            chips={[...selectedItems].map(name => {\n              const item = resourceList.find(i => i.metadata.name === name);\n              return {\n                key: name,\n                node: (\n                  <>\n                    <ResourceIcon kind={item?.kind ?? name} />\n                    {item?.fakeMetadata?.fakename ?? item?.metadata.name ?? name}\n                  </>\n                ),\n              }\n            })}\n            deleteChip={updateNewItems}\n            categoryName={props.resourceType}\n          >\n            <MultipleResourceListDropdown\n              {...props}\n              resourceList={resourceList}\n              selected={selectedItems}\n              onChange={updateSelectedItems}\n              type=\"multiple\"\n            />\n          </DataToolbarFilter>\n        </DataToolbarItem>\n      </DataToolbarContent>\n    </DataToolbar>)\n};\n\nexport type ResourceListDropdownWithDataToolbarProps = {\n  name?: string;\n  required?: boolean;\n  resourceList: HCK8sResourceKind[];\n  className?: string;\n  showAll?: boolean;\n  title?: string | JSX.Element;\n  resourceType?: string;\n  autocompletePlaceholder?: string;\n  autocompleteFilter?: (text: any, item: any) => any;\n  onChange?: (item: string) => any;\n  onSelectedItemChange?: (items: Set<string>) => any;\n  useHookForm?: boolean;\n  clearFiltersButtonText?: string;\n};\n\nResourceListDropdownWithDataToolbar.defaultProps = {\n  resourceType: \"Resources\",\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\n\nconst Node = ({ className, children, description }) => (\n  <div className={className}>\n    <div>{children}</div>\n    <p className=\"help-block\">{description}</p>\n  </div>\n);\n\nconst CombineNodes = (id, label, description, children, isRequired) => {\n  // children node 개수에 따라 가로 분할 class 적용\n  let isArray = Array.isArray(children);\n  let className = isArray ? `col-md-${12 / children.length}` : 'col-md-12';\n  return isArray ? children.map(cur => <Node className={className} children={cur} description={description} />) : <Node className={className} children={children} description={description} />;\n};\n\nexport const Section: React.FC<SectionProps> = ({ id, label, description, children, isRequired = false }) => {\n  let result = CombineNodes(id, label, description, children, isRequired);\n  return (\n    <div className=\"form-group\">\n      {label && (\n        <label className={'control-label ' + (isRequired ? 'co-required' : '')} htmlFor={id}>\n          {label}\n        </label>\n      )}\n      <div className=\"row\">{result}</div>\n    </div>\n  );\n};\n\ntype SectionProps = {\n  id: string;\n  children: Array<React.ReactNode> | React.ReactNode;\n  label?: string;\n  description?: string;\n  isRequired?: boolean;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAEA;;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAMA;AAEA;;AAAA;AAEA;AACA;AAKA;AACA;AAEA;AACA;AAMA;AAUA;;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AAeA;AAEA;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAGA;AAEA;AAQA;AACA;AAWA;AAmCA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAAA;AACA;AAEA;;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AAEA;AAEA;;AACA;AACA;AAEA;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;;AAGA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAIA;AAWA;AAkBA;AACA;AACA;;;;;;;;;;;;;AC1XA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AAGA;;;;;A","sourceRoot":""}