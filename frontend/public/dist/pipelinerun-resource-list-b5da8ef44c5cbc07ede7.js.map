{"version":3,"file":"pipelinerun-resource-list-b5da8ef44c5cbc07ede7.js","sources":["webpack:///./packages/dev-console/src/components/charts/HorizontalStackedBars.scss?1886","webpack:///./packages/dev-console/src/components/charts/HorizontalStackedBars.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/PipelineRunsResourceList.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport classNames from 'classnames';\nimport './HorizontalStackedBars.scss';\n\nexport type StackedValue = {\n  color: string;\n  name: string;\n  size: number;\n};\n\nexport type HorizontalStackedBarsProps = {\n  barGap?: number;\n  height?: number | string;\n  inline?: boolean;\n  values: StackedValue[];\n  width?: number | string;\n};\n\nconst HorizontalStackedBars: React.FC<HorizontalStackedBarsProps> = ({\n  barGap,\n  height,\n  inline,\n  values,\n  width,\n}) => {\n  return (\n    <div\n      className={classNames('odc-horizontal-stacked-bars', { 'is-inline': inline })}\n      style={{ height, width, ['--bar-gap' as any]: barGap && `${barGap}px` }}\n    >\n      <div className=\"odc-horizontal-stacked-bars__bars\">\n        {values.map(({ color, name, size }) => (\n          <div\n            key={name}\n            className=\"odc-horizontal-stacked-bars__data-bar\"\n            style={{\n              background: color,\n              flexGrow: size,\n            }}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default HorizontalStackedBars;\n","import * as React from 'react';\nimport { getBadgeFromType } from '@console/shared';\nimport { ListPage } from '@console/internal/components/factory';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { PipelineRunModel } from '../../models';\nimport { runFilters } from '../pipelines/detail-page-tabs/PipelineRuns';\nimport PipelineRunsList from './list-page/PipelineRunList';\n\nconst PipelineRunsResourceList: React.FC<Omit<\n  React.ComponentProps<typeof ListPage>,\n  'canCreate' | 'kind' | 'ListComponent' | 'rowFilters'\n>> = (props) => {\n  return (\n    <ListPage\n      {...props}\n      canCreate={false}\n      kind={referenceForModel(PipelineRunModel)}\n      ListComponent={PipelineRunsList}\n      rowFilters={runFilters}\n      badge={getBadgeFromType(PipelineRunModel.badge)}\n    />\n  );\n};\n\nexport default PipelineRunsResourceList;\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAgBA;AAOA;AAKA;AAMA;AACA;AACA;AAMA;AAEA;;;;;;;;;;;;;AC9CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAUA;AAEA;;;;;A","sourceRoot":""}