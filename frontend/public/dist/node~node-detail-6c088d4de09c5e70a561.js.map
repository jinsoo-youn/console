{"version":3,"file":"node~node-detail-6c088d4de09c5e70a561.js","sources":["webpack:///./packages/console-app/src/components/nodes/NodeDetailsConditions.tsx","webpack:///./packages/console-app/src/components/nodes/NodeDetailsImages.tsx","webpack:///./packages/console-app/src/components/nodes/NodeIPList.tsx","webpack:///./packages/console-app/src/components/nodes/node-dashboard/ActivityCard.tsx","webpack:///./packages/console-app/src/components/nodes/node-dashboard/DetailsCard.tsx","webpack:///./packages/console-app/src/components/nodes/node-dashboard/InventoryCard.tsx","webpack:///./packages/console-app/src/components/nodes/node-dashboard/NodeAlerts.tsx","webpack:///./packages/console-app/src/components/nodes/node-dashboard/NodeDashboard.tsx","webpack:///./packages/console-app/src/components/nodes/node-dashboard/NodeDashboardContext.tsx","webpack:///./packages/console-app/src/components/nodes/node-dashboard/NodeHealth.tsx","webpack:///./packages/console-app/src/components/nodes/node-dashboard/StatusCard.tsx","webpack:///./packages/console-app/src/components/nodes/node-dashboard/UtilizationCard.tsx","webpack:///./packages/console-app/src/components/nodes/node-dashboard/messages.ts","webpack:///./packages/console-app/src/components/nodes/node-dashboard/node-health.scss?62e3","webpack:///./packages/console-app/src/components/nodes/node-dashboard/queries.ts","webpack:///./packages/console-shared/src/components/dashboard/status-card/AlertItem.tsx","webpack:///./packages/console-shared/src/components/dashboard/status-card/AlertsBody.tsx","webpack:///./packages/console-shared/src/components/dashboard/status-card/HealthItem.tsx","webpack:///./packages/console-shared/src/components/dashboard/utilization-card/prometheus-hook.ts"],"sourcesContent":["import * as _ from 'lodash';\nimport * as React from 'react';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport { SectionHeading, Timestamp, CamelCaseWrap } from '@console/internal/components/utils';\n\nimport { useTranslation } from 'react-i18next';\ntype NodeDetailsConditionsProps = {\n  node: NodeKind;\n};\n\nconst NodeDetailsConditions: React.FC<NodeDetailsConditionsProps> = ({ node }) => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_NODECONDITIONS_1')} />\n      <div className=\"co-table-container\">\n        <table className=\"table\">\n          <thead>\n            <tr>\n              <th>{t('COMMON:MSG_DETAILS_TABDETAILS_NODECONDITIONS_TABLEHEADER_1')}</th>\n              <th>{t('COMMON:MSG_DETAILS_TABDETAILS_NODECONDITIONS_TABLEHEADER_2')}</th>\n              <th>{t('COMMON:MSG_DETAILS_TABDETAILS_NODECONDITIONS_TABLEHEADER_3')}</th>\n              <th>{t('COMMON:MSG_DETAILS_TABDETAILS_NODECONDITIONS_TABLEHEADER_4')}</th>\n              <th>{t('COMMON:MSG_DETAILS_TABDETAILS_NODECONDITIONS_TABLEHEADER_5')}</th>\n            </tr>\n          </thead>\n          <tbody>\n            {_.map(node.status.conditions, (c, i) => (\n              <tr key={i}>\n                <td>\n                  <CamelCaseWrap value={c.type} />\n                </td>\n                <td>{c.status || '-'}</td>\n                <td>\n                  <CamelCaseWrap value={c.reason} />\n                </td>\n                <td>\n                  <Timestamp timestamp={c.lastHeartbeatTime} />\n                </td>\n                <td>\n                  <Timestamp timestamp={c.lastTransitionTime} />\n                </td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default NodeDetailsConditions;\n","import * as _ from 'lodash';\nimport * as React from 'react';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport { SectionHeading, units } from '@console/internal/components/utils';\nimport { useTranslation } from 'react-i18next';\n\ntype NodeDetailsImagesProps = {\n  node: NodeKind;\n};\n\nconst NodeDetailsImages: React.FC<NodeDetailsImagesProps> = ({ node }) => {\n  const images = _.filter(node.status.images, 'names');\n  const { t } = useTranslation();\n  return (\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_IMAGES_1')} />\n      <div className=\"co-table-container\">\n        <table className=\"table table--layout-fixed\">\n          <colgroup>\n            <col className=\"col-sm-10 col-xs-9\" />\n            <col className=\"col-sm-2 col-xs-3\" />\n          </colgroup>\n          <thead>\n            <tr>\n              <th>{t('COMMON:MSG_DETAILS_TABDETAILS_IMAGES_2')}</th>\n              <th>{t('COMMON:MSG_DETAILS_TABDETAILS_IMAGES_3')}</th>\n            </tr>\n          </thead>\n          <tbody>\n            {_.map(images, (image, i) => (\n              <tr key={i}>\n                <td className=\"co-break-all co-select-to-copy\">{image.names.find((name: string) => !name.includes('@') && !name.includes('<none>')) || image.names[0]}</td>\n                <td>{units.humanize(image.sizeBytes, 'binaryBytes', true).string || '-'}</td>\n              </tr>\n            ))}\n          </tbody>\n        </table>\n      </div>\n    </div>\n  );\n};\n\nexport default NodeDetailsImages;\n","import * as _ from 'lodash';\nimport * as React from 'react';\nimport { NodeAddress, DetailPropertyList, DetailPropertyListItem } from '@console/shared';\n\ntype NodeIPListProps = {\n  ips: NodeAddress[];\n  expand?: boolean;\n};\n\nconst NodeIPList: React.FC<NodeIPListProps> = ({ ips, expand = false }) => (\n  <DetailPropertyList>\n    {_.sortBy(ips, ['type']).map(\n      ({ type, address }) =>\n        address &&\n        (expand || type === 'InternalIP') && (\n          <DetailPropertyListItem\n            key={`{${type}/${address}`}\n            title={type.replace(/([a-z])([A-Z])/g, '$1 $2')}\n          >\n            {address}\n          </DetailPropertyListItem>\n        ),\n    )}\n  </DetailPropertyList>\n);\n\nexport default NodeIPList;\n","import * as React from 'react';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport DashboardCardLink from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardLink';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport ActivityBody, { RecentEventsBody, OngoingActivityBody } from '@console/shared/src/components/dashboard/activity-card/ActivityBody';\nimport { EventModel, NodeModel } from '@console/internal/models';\nimport { EventKind, NodeKind } from '@console/internal/module/k8s';\nimport { resourcePathFromModel } from '@console/internal/components/utils';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\n\nimport { NodeDashboardContext } from './NodeDashboardContext';\nimport { useTranslation } from 'react-i18next';\n\nconst eventsResource = {\n  isList: true,\n  kind: EventModel.kind,\n};\n\nconst nodeEventsFilter = (event: EventKind, uid: string, kind: string, name: string): boolean => {\n  const { uid: objectUID, kind: objectKind, name: objectName } = event?.involvedObject || {};\n  return objectUID === uid && objectKind === kind && objectName === name;\n};\n\nconst RecentEvent: React.FC<RecentEventProps> = ({ node }) => {\n  const [data, loaded, loadError] = useK8sWatchResource<EventKind[]>(eventsResource);\n  const { uid, name } = node.metadata;\n  const eventsFilter = React.useCallback(event => nodeEventsFilter(event, uid, NodeModel.kind, name), [uid, name]);\n  return <RecentEventsBody events={{ data, loaded, loadError }} filter={eventsFilter} />;\n};\n\nconst ActivityCard: React.FC = () => {\n  const { obj } = React.useContext(NodeDashboardContext);\n  const eventsLink = `${resourcePathFromModel(NodeModel, obj.metadata.name)}/events`;\n  const { t } = useTranslation();\n  return (\n    <DashboardCard gradient data-test-id=\"activity-card\">\n      <DashboardCardHeader>\n        <DashboardCardTitle>{t('SINGLE:MSG_OVERVIEW_MAIN_CARDACTIVITY_TITLE_1')}</DashboardCardTitle>\n        <DashboardCardLink to={eventsLink}>{t('SINGLE:MSG_OVERVIEW_MAIN_CARDACTIVITY_ALL_1')}</DashboardCardLink>\n      </DashboardCardHeader>\n      <DashboardCardBody>\n        <ActivityBody className=\"co-project-dashboard__activity-body\">\n          <OngoingActivityBody loaded />\n          <RecentEvent node={obj} />\n        </ActivityBody>\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n};\n\ntype RecentEventProps = {\n  node: NodeKind;\n};\n\nexport default ActivityCard;\n","import * as React from 'react';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DetailsBody from '@console/shared/src/components/dashboard/details-card/DetailsBody';\nimport DetailItem from '@console/shared/src/components/dashboard/details-card/DetailItem';\nimport DashboardCardLink from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardLink';\nimport { getNodeAddresses } from '@console/shared/src/selectors/node';\nimport { resourcePathFromModel } from '@console/internal/components/utils';\nimport { NodeModel } from '@console/internal/models';\n\nimport NodeIPList from '../NodeIPList';\nimport NodeRoles from '../NodeRoles';\nimport { NodeDashboardContext } from './NodeDashboardContext';\n\nconst DetailsCard: React.FC = () => {\n  const { obj } = React.useContext(NodeDashboardContext);\n  const detailsLink = `${resourcePathFromModel(NodeModel, obj.metadata.name)}/details`;\n  const instanceType = obj.metadata.labels?.['beta.kubernetes.io/instance-type'];\n  const zone = obj.metadata.labels?.['topology.kubernetes.io/zone'];\n  return (\n    <DashboardCard data-test-id=\"details-card\">\n      <DashboardCardHeader>\n        <DashboardCardTitle>Details</DashboardCardTitle>\n        <DashboardCardLink to={detailsLink}>View all</DashboardCardLink>\n      </DashboardCardHeader>\n      <DashboardCardBody>\n        <DetailsBody>\n          <DetailItem isLoading={!obj} title=\"Node Name\">\n            {obj.metadata.name}\n          </DetailItem>\n          <DetailItem isLoading={!obj} title=\"Role\">\n            <NodeRoles node={obj} />\n          </DetailItem>\n          <DetailItem isLoading={!obj} title=\"Instance Type\" error={!instanceType}>\n            {instanceType}\n          </DetailItem>\n          <DetailItem isLoading={!obj} title=\"Zone\" error={!zone}>\n            {zone}\n          </DetailItem>\n          <DetailItem isLoading={!obj} title=\"Node Addresses\">\n            <NodeIPList ips={getNodeAddresses(obj)} expand />\n          </DetailItem>\n        </DetailsBody>\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n};\n\nexport default DetailsCard;\n","import * as React from 'react';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport InventoryItem, {\n  ResourceInventoryItem,\n  StatusGroupMapper,\n} from '@console/shared/src/components/dashboard/inventory-card/InventoryItem';\nimport { getPodStatusGroups } from '@console/shared/src/components/dashboard/inventory-card/utils';\nimport { referenceForModel, K8sResourceCommon, K8sKind } from '@console/internal/module/k8s';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { PodModel, NodeModel } from '@console/internal/models';\nimport { resourcePathFromModel } from '@console/internal/components/utils';\n\nimport { NodeDashboardContext } from './NodeDashboardContext';\n\nexport const NodeInventoryItem: React.FC<NodeInventoryItemProps> = ({\n  nodeName,\n  model,\n  mapper,\n}) => {\n  const resource = React.useMemo(\n    () => ({\n      kind: model.crd ? referenceForModel(model) : model.kind,\n      fieldSelector: `spec.nodeName=${nodeName}`,\n      isList: true,\n    }),\n    [nodeName, model],\n  );\n  const [data, loaded, loadError] = useK8sWatchResource<K8sResourceCommon[]>(resource);\n  const basePath = `${resourcePathFromModel(NodeModel, nodeName)}/pods`;\n\n  return (\n    <ResourceInventoryItem\n      kind={model}\n      isLoading={!loaded}\n      error={!!loadError}\n      resources={data}\n      mapper={mapper}\n      basePath={basePath}\n    />\n  );\n};\n\nconst InventoryCard: React.FC = () => {\n  const { obj } = React.useContext(NodeDashboardContext);\n\n  return (\n    <DashboardCard data-test-id=\"inventory-card\">\n      <DashboardCardHeader>\n        <DashboardCardTitle>Inventory</DashboardCardTitle>\n      </DashboardCardHeader>\n      <DashboardCardBody>\n        <NodeInventoryItem\n          nodeName={obj.metadata.name}\n          model={PodModel}\n          mapper={getPodStatusGroups}\n        />\n        <InventoryItem\n          isLoading={!obj}\n          title=\"Image\"\n          titlePlural=\"Images\"\n          count={obj.status?.images?.length}\n          error={!obj.status?.images}\n        />\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n};\n\ntype NodeInventoryItemProps = {\n  nodeName: string;\n  model: K8sKind;\n  mapper?: StatusGroupMapper;\n};\n\nexport default InventoryCard;\n","import * as React from 'react';\nimport { PopoverPosition } from '@patternfly/react-core';\nimport AlertsBody from '@console/shared/src/components/dashboard/status-card/AlertsBody';\nimport { NodeDashboardContext } from '@console/app/src/components/nodes/node-dashboard/NodeDashboardContext';\nimport { StatusItem } from '@console/shared/src/components/dashboard/status-card/AlertItem';\nimport {\n  LIMIT_STATE,\n  LimitRequested,\n} from '@console/shared/src/components/dashboard/utilization-card/UtilizationItem';\nimport {\n  getUtilizationQueries,\n  getResourceQutoaQueries,\n  NodeQueries,\n} from '@console/app/src/components/nodes/node-dashboard/queries';\nimport {\n  getNodeAddresses,\n  getNodeMachineNameAndNamespace,\n} from '@console/shared/src/selectors/node';\nimport { usePrometheusQuery } from '@console/shared/src/components/dashboard/utilization-card/prometheus-hook';\nimport {\n  humanizeCpuCores,\n  humanizeBinaryBytes,\n  Humanize,\n} from '@console/internal/components/utils';\nimport {\n  CPUPopover,\n  PopoverProps,\n  MemoryPopover,\n} from '@console/app/src/components/nodes/node-dashboard/UtilizationCard';\nimport {\n  YellowResourcesAlmostFullIcon,\n  RedResourcesFullIcon,\n  YellowExclamationTriangleIcon,\n} from '@console/shared/src/components/status/icons';\nimport { DashboardCardPopupLink } from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardLink';\nimport {\n  referenceForModel,\n  MachineKind,\n  MachineHealthCheckKind,\n} from '@console/internal/module/k8s';\nimport { MachineModel } from '@console/internal/models';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\n\nimport * as msg from './messages';\nimport { getMachineHealth, HealthChecksPopup, machineHealthChecksResource } from './NodeHealth';\n\nconst LimitLink: React.FC<LimitLinkProps> = ({\n  humanize,\n  currentKey,\n  totalKey,\n  limitKey,\n  requestedKey,\n  limitState,\n  requestedState,\n  Popover,\n}) => {\n  const { obj } = React.useContext(NodeDashboardContext);\n  const nodeName = obj.metadata.name;\n  const nodeIp = getNodeAddresses(obj).find((addr) => addr.type === 'InternalIP')?.address;\n  const [queries, resourceQuotaQueries] = React.useMemo(\n    () => [getUtilizationQueries(nodeName, nodeIp), getResourceQutoaQueries(nodeName)],\n    [nodeIp, nodeName],\n  );\n  const [current, currentError, currentValue] = usePrometheusQuery(queries[currentKey], humanize);\n  const [total, totalError, totalValue] = usePrometheusQuery(queries[totalKey], humanize);\n  const [limit, limitError] = usePrometheusQuery(resourceQuotaQueries[limitKey], humanize);\n  const [requested, requestedError] = usePrometheusQuery(\n    resourceQuotaQueries[requestedKey],\n    humanize,\n  );\n\n  const available =\n    currentValue && totalValue ? humanize(totalValue - currentValue).string : 'Not available';\n\n  return (\n    <Popover\n      title=\"See breakdown\"\n      nodeName={nodeName}\n      nodeIp={nodeIp}\n      current={currentError ? 'Not available' : current.string}\n      total={totalError ? 'Not available' : total.string}\n      limit={limitError ? 'Not available' : limit.string}\n      requested={requestedError ? 'Not available' : requested.string}\n      available={available}\n      limitState={limitState}\n      requestedState={requestedState}\n      position={PopoverPosition.right}\n    />\n  );\n};\n\nconst getMessage: GetMessage = (\n  limitState,\n  { limReqErr, limReqWarn, limErr, limWarn, reqWarn },\n) => {\n  const { limit, requested } = limitState || {};\n  if (!limitState || (limit === LIMIT_STATE.OK && requested === LIMIT_STATE.OK)) {\n    return null;\n  }\n  if (limit === LIMIT_STATE.ERROR) {\n    return {\n      Icon: RedResourcesFullIcon,\n      message: requested === LIMIT_STATE.OK ? limErr : limReqErr,\n    };\n  }\n  if (limit === LIMIT_STATE.WARN) {\n    return {\n      Icon: YellowResourcesAlmostFullIcon,\n      message: requested === LIMIT_STATE.OK ? limWarn : limReqWarn,\n    };\n  }\n  return {\n    Icon: YellowResourcesAlmostFullIcon,\n    message: reqWarn,\n  };\n};\n\nconst HealthChecksLink: React.FC = () => {\n  const { obj } = React.useContext(NodeDashboardContext);\n  const { name, namespace } = getNodeMachineNameAndNamespace(obj);\n  const machineResource = React.useMemo(\n    () => ({\n      kind: referenceForModel(MachineModel),\n      name,\n      namespace,\n    }),\n    [name, namespace],\n  );\n  const machine = useK8sWatchResource<MachineKind>(machineResource);\n  const healthChecks = useK8sWatchResource<MachineHealthCheckKind[]>(machineHealthChecksResource);\n  const healthState = getMachineHealth(obj, machine, healthChecks);\n  return (\n    <DashboardCardPopupLink\n      linkTitle=\"See details\"\n      popupTitle=\"Health Checks\"\n      className=\"co-status-card__popup\"\n    >\n      <HealthChecksPopup\n        conditions={healthState.conditions}\n        machineHealthChecks={healthState.matchingHC}\n      />\n    </DashboardCardPopupLink>\n  );\n};\n\nconst NodeAlerts: React.FC = () => {\n  const { cpuLimit, memoryLimit, healthCheck } = React.useContext(NodeDashboardContext);\n\n  const cpuMessage = getMessage(cpuLimit, {\n    limReqErr: msg.CPU_LIMIT_REQ_ERROR,\n    limErr: msg.CPU_LIMIT_ERROR,\n    limReqWarn: msg.CPU_LIMIT_REQ_WARN,\n    limWarn: msg.CPU_LIMIT_WARN,\n    reqWarn: msg.CPU_REQ_WARN,\n  });\n  const memoryMessage = getMessage(memoryLimit, {\n    limReqErr: msg.MEM_LIMIT_REQ_ERROR,\n    limErr: msg.MEM_LIMIT_ERROR,\n    limReqWarn: msg.MEM_LIMIT_REQ_WARN,\n    limWarn: msg.MEM_LIMIT_WARN,\n    reqWarn: msg.MEM_REQ_WARN,\n  });\n\n  return (\n    <AlertsBody>\n      {!!healthCheck?.failingHealthCheck && (\n        <StatusItem\n          Icon={YellowExclamationTriangleIcon}\n          message={msg.CONDITIONS_WARNING(healthCheck.reboot)}\n        >\n          <HealthChecksLink />\n        </StatusItem>\n      )}\n      {!!cpuMessage && (\n        <StatusItem Icon={cpuMessage.Icon} message={cpuMessage.message}>\n          <LimitLink\n            humanize={humanizeCpuCores}\n            currentKey={NodeQueries.CPU_USAGE}\n            totalKey={NodeQueries.CPU_TOTAL}\n            limitKey={NodeQueries.POD_RESOURCE_LIMIT_CPU}\n            requestedKey={NodeQueries.POD_RESOURCE_REQUEST_CPU}\n            limitState={cpuLimit?.limit}\n            requestedState={cpuLimit?.requested}\n            Popover={CPUPopover}\n          />\n        </StatusItem>\n      )}\n      {!!memoryMessage && (\n        <StatusItem Icon={memoryMessage.Icon} message={memoryMessage.message}>\n          <LimitLink\n            humanize={humanizeBinaryBytes}\n            currentKey={NodeQueries.MEMORY_USAGE}\n            totalKey={NodeQueries.MEMORY_TOTAL}\n            limitKey={NodeQueries.POD_RESOURCE_LIMIT_MEMORY}\n            requestedKey={NodeQueries.POD_RESOURCE_REQUEST_MEMORY}\n            limitState={memoryLimit?.limit}\n            requestedState={memoryLimit?.requested}\n            Popover={MemoryPopover}\n          />\n        </StatusItem>\n      )}\n    </AlertsBody>\n  );\n};\n\nexport default NodeAlerts;\n\ntype GetMessage = (\n  state: LimitRequested,\n  messages: {\n    limReqErr: string;\n    limErr: string;\n    limReqWarn: string;\n    limWarn: string;\n    reqWarn: string;\n  },\n) => {\n  Icon: React.ComponentType;\n  message: string;\n};\n\ntype LimitLinkProps = {\n  humanize: Humanize;\n  currentKey: string;\n  totalKey: string;\n  limitKey: string;\n  requestedKey: string;\n  limitState: LIMIT_STATE;\n  requestedState: LIMIT_STATE;\n  Popover: React.ComponentType<PopoverProps>;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport Dashboard from '@console/shared/src/components/dashboard/Dashboard';\nimport DashboardGrid from '@console/shared/src/components/dashboard/DashboardGrid';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport { LimitRequested } from '@console/shared/src/components/dashboard/utilization-card/UtilizationItem';\n\nimport { NodeDashboardContext, HealthCheck } from './NodeDashboardContext';\nimport InventoryCard from './InventoryCard';\nimport DetailsCard from './DetailsCard';\nimport StatusCard from './StatusCard';\nimport ActivityCard from './ActivityCard';\nimport UtilizationCard from './UtilizationCard';\n\nconst leftCards = [{ Card: DetailsCard }, { Card: InventoryCard }];\nconst mainCards = [{ Card: StatusCard }, { Card: UtilizationCard }];\nconst rightCards = [{ Card: ActivityCard }];\n\nexport enum ActionType {\n  CPU_LIMIT = 'CPU_LIMIT',\n  MEMORY_LIMIT = 'MEMORY_LIMIT',\n  HEALTH_CHECK = 'HEALTH_CHECK',\n  OBJ = 'OBJ',\n}\n\nexport const initialState = (obj: NodeKind): NodeDashboardState => ({\n  obj,\n  cpuLimit: undefined,\n  memoryLimit: undefined,\n  healthCheck: undefined,\n});\n\nexport const reducer = (state: NodeDashboardState, action: NodeDashboardAction) => {\n  switch (action.type) {\n    case ActionType.CPU_LIMIT: {\n      if (_.isEqual(action.payload, state.cpuLimit)) {\n        return state;\n      }\n      return {\n        ...state,\n        cpuLimit: action.payload,\n      };\n    }\n    case ActionType.MEMORY_LIMIT: {\n      if (_.isEqual(action.payload, state.memoryLimit)) {\n        return state;\n      }\n      return {\n        ...state,\n        memoryLimit: action.payload,\n      };\n    }\n    case ActionType.HEALTH_CHECK: {\n      if (_.isEqual(action.payload, state.healthCheck)) {\n        return state;\n      }\n      return {\n        ...state,\n        healthCheck: action.payload,\n      };\n    }\n    case ActionType.OBJ: {\n      if (action.payload === state.obj) {\n        return state;\n      }\n      return {\n        ...state,\n        obj: action.payload,\n      };\n    }\n    default:\n      return state;\n  }\n};\n\nconst NodeDashboard: React.FC<NodeDashboardProps> = ({ obj }) => {\n  const [state, dispatch] = React.useReducer(reducer, initialState(obj));\n\n  if (obj !== state.obj) {\n    dispatch({ type: ActionType.OBJ, payload: obj });\n  }\n\n  const setCPULimit = React.useCallback(\n    (payload: LimitRequested) => dispatch({ type: ActionType.CPU_LIMIT, payload }),\n    [],\n  );\n  const setMemoryLimit = React.useCallback(\n    (payload: LimitRequested) => dispatch({ type: ActionType.MEMORY_LIMIT, payload }),\n    [],\n  );\n  const setHealthCheck = React.useCallback(\n    (payload: HealthCheck) => dispatch({ type: ActionType.HEALTH_CHECK, payload }),\n    [],\n  );\n\n  const context = {\n    obj,\n    cpuLimit: state.cpuLimit,\n    memoryLimit: state.memoryLimit,\n    healthCheck: state.healthCheck,\n    setCPULimit,\n    setMemoryLimit,\n    setHealthCheck,\n  };\n\n  return (\n    <NodeDashboardContext.Provider value={context}>\n      <Dashboard>\n        <DashboardGrid mainCards={mainCards} leftCards={leftCards} rightCards={rightCards} />\n      </Dashboard>\n    </NodeDashboardContext.Provider>\n  );\n};\n\nexport default NodeDashboard;\n\ntype NodeDashboardProps = {\n  obj: NodeKind;\n};\n\ntype NodeDashboardState = {\n  obj: NodeKind;\n  cpuLimit: LimitRequested;\n  memoryLimit: LimitRequested;\n  healthCheck: HealthCheck;\n};\n\ntype NodeDashboardAction =\n  | { type: ActionType.CPU_LIMIT; payload: LimitRequested }\n  | { type: ActionType.MEMORY_LIMIT; payload: LimitRequested }\n  | { type: ActionType.HEALTH_CHECK; payload: HealthCheck }\n  | { type: ActionType.OBJ; payload: NodeKind };\n","import * as React from 'react';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport { LimitRequested } from '@console/shared/src/components/dashboard/utilization-card/UtilizationItem';\n\nexport const NodeDashboardContext = React.createContext<NodeDashboardContext>({\n  setCPULimit: () => {},\n  setMemoryLimit: () => {},\n  setHealthCheck: () => {},\n});\n\nexport type HealthCheck = {\n  failingHealthCheck: boolean;\n  reboot: boolean;\n};\n\ntype NodeDashboardContext = {\n  obj?: NodeKind;\n  cpuLimit?: LimitRequested;\n  setCPULimit: (state: LimitRequested) => void;\n  memoryLimit?: LimitRequested;\n  setMemoryLimit: (state: LimitRequested) => void;\n  healthCheck?: HealthCheck;\n  setHealthCheck: (state: HealthCheck) => void;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Gallery, GalleryItem, Alert } from '@patternfly/react-core';\nimport HealthBody from '@console/shared/src/components/dashboard/status-card/HealthBody';\nimport HealthItem from '@console/shared/src/components/dashboard/status-card/HealthItem';\nimport {\n  HealthState,\n  healthStateMapping,\n} from '@console/shared/src/components/dashboard/status-card/states';\nimport { getNodeMachineNameAndNamespace } from '@console/shared';\nimport { MachineModel, MachineHealthCheckModel } from '@console/internal/models';\nimport {\n  referenceForModel,\n  MachineKind,\n  NodeKind,\n  MachineHealthCheckKind,\n  MachineHealthCondition,\n} from '@console/internal/module/k8s';\nimport {\n  useK8sWatchResource,\n  WatchK8sResult,\n  WatchK8sResource,\n} from '@console/internal/components/utils/k8s-watch-hook';\nimport { pluralize } from '@console/internal/components/utils/details-page';\nimport { LabelSelector } from '@console/internal/module/k8s/label-selector';\nimport Status, {\n  StatusPopupSection,\n} from '@console/shared/src/components/dashboard/status-card/StatusPopup';\nimport { ResourceLink } from '@console/internal/components/utils';\n\nimport { NodeDashboardContext } from './NodeDashboardContext';\nimport NodeStatus from '../NodeStatus';\nimport { CONDITIONS_WARNING } from './messages';\n\nimport './node-health.scss';\n\nexport const HealthChecksPopup: React.FC<HealthChecksPopupProps> = ({\n  conditions = [],\n  machineHealthChecks,\n}) => {\n  let conditionFailing: boolean = false;\n  let reboot: boolean = false;\n  const grouppedConditions = Object.values(\n    _.groupBy(\n      conditions.sort((a, b) => a.type.localeCompare(b.type)),\n      (c) => c.type,\n    ),\n  ).map((cds) => {\n    const failing = cds.some((c) => c.failing);\n    if (failing) {\n      conditionFailing = true;\n      reboot =\n        machineHealthChecks?.[0]?.metadata?.annotations?.[\n          'machine.openshift.io/remediation-strategy'\n        ] === 'external-baremetal';\n    }\n    return {\n      title: cds[0].type,\n      value: failing ? 'Failing' : 'Okay',\n      icon: failing\n        ? healthStateMapping[HealthState.WARNING].icon\n        : healthStateMapping[HealthState.OK].icon,\n    };\n  });\n  return (\n    <>\n      {`${MachineHealthCheckModel.labelPlural} automatically remediate node health issues.`}\n      {!!machineHealthChecks?.length && (\n        <StatusPopupSection\n          firstColumn={pluralize(\n            machineHealthChecks.length,\n            MachineHealthCheckModel.label,\n            MachineHealthCheckModel.labelPlural,\n            false,\n          )}\n        >\n          {machineHealthChecks.map(({ metadata }) => (\n            <Status key={metadata.uid}>\n              <ResourceLink\n                kind={referenceForModel(MachineHealthCheckModel)}\n                name={metadata.name}\n                namespace={metadata.namespace}\n                className=\"co-status-popup__title\"\n              />\n            </Status>\n          ))}\n        </StatusPopupSection>\n      )}\n      {!!conditions.length && (\n        <StatusPopupSection firstColumn=\"Conditions\" secondColumn=\"Status\">\n          {grouppedConditions.map((c) => (\n            <Status {...c} key={c.title}>\n              {c.title}\n            </Status>\n          ))}\n        </StatusPopupSection>\n      )}\n      {conditionFailing && (\n        <Alert\n          variant=\"warning\"\n          isInline\n          title={`${reboot ? 'Reboot' : 'Reprovision'} pending`}\n          className=\"co-node-health__popup-alert\"\n        >\n          {CONDITIONS_WARNING(reboot)}\n        </Alert>\n      )}\n      {machineHealthChecks?.length > 1 && (\n        <Alert\n          variant=\"warning\"\n          isInline\n          title=\"Multiple resources\"\n          className=\"co-node-health__popup-alert\"\n        >\n          {`Only one ${MachineHealthCheckModel.label} resource should match this node.`}\n        </Alert>\n      )}\n    </>\n  );\n};\n\nexport const machineHealthChecksResource: WatchK8sResource = {\n  isList: true,\n  kind: referenceForModel(MachineHealthCheckModel),\n};\n\nconst isConditionFailing = (\n  node: NodeKind,\n  { type, status, timeout }: MachineHealthCondition,\n): boolean => {\n  const nodeCondition = node.status.conditions.find((c) => c.type === type && c.status === status);\n  if (!nodeCondition) {\n    return false;\n  }\n  const transitionTime = new Date(nodeCondition.lastTransitionTime).getTime();\n  const currentTime = new Date().getTime();\n  const withTO = transitionTime + 1000 * parseInt(timeout, 10);\n  return withTO < currentTime;\n};\n\nexport const getMachineHealth = (\n  node: NodeKind,\n  machine: WatchK8sResult<MachineKind>,\n  healthChecks: WatchK8sResult<MachineHealthCheckKind[]>,\n): MachineHealth => {\n  const [mData, mLoaded, mLoadError] = machine;\n  const [hcData, hcLoaded, hcLoadError] = healthChecks;\n  if (mLoadError || hcLoadError) {\n    return {\n      state: HealthState.NOT_AVAILABLE,\n    };\n  }\n  if (!mLoaded || !hcLoaded) {\n    return {\n      state: HealthState.LOADING,\n    };\n  }\n  const matchingHC = hcData.filter((hc) => {\n    const selector = new LabelSelector(hc.spec?.selector || {});\n    return selector.matches(mData);\n  });\n  if (!matchingHC.length) {\n    return {\n      state: HealthState.NOT_AVAILABLE,\n      noIcon: true,\n      details: 'Not configured',\n    };\n  }\n  let failingConditions: number = 0;\n  const conditions = _.flatten(\n    matchingHC.map((hc) =>\n      hc.spec.unhealthyConditions.map((c) => {\n        const failing = isConditionFailing(node, c);\n        if (failing) {\n          failingConditions++;\n        }\n        return {\n          ...c,\n          failing,\n        };\n      }),\n    ),\n  );\n  return {\n    state: failingConditions || matchingHC.length > 1 ? HealthState.WARNING : HealthState.OK,\n    details:\n      matchingHC.length > 1\n        ? 'Multiple resources'\n        : failingConditions\n        ? `${pluralize(failingConditions, 'condition')} failing`\n        : `${pluralize(conditions.length, 'condition')} passing`,\n    conditions,\n    matchingHC,\n  };\n};\n\nexport const HealthChecksItem: React.FC = () => {\n  const { obj, setHealthCheck } = React.useContext(NodeDashboardContext);\n  const { name, namespace } = getNodeMachineNameAndNamespace(obj);\n  const machineResource = React.useMemo(\n    () => ({\n      kind: referenceForModel(MachineModel),\n      name,\n      namespace,\n    }),\n    [name, namespace],\n  );\n  const machine = useK8sWatchResource<MachineKind>(machineResource);\n  const healthChecks = useK8sWatchResource<MachineHealthCheckKind[]>(machineHealthChecksResource);\n  const healthState = getMachineHealth(obj, machine, healthChecks);\n\n  let failingHealthCheck = false;\n  let reboot = false;\n  _.forEach(healthState.conditions, (c) => {\n    if (c.failing) {\n      failingHealthCheck = true;\n      reboot =\n        healthState.matchingHC?.[0]?.metadata?.annotations?.[\n          'machine.openshift.io/remediation-strategy'\n        ] === 'external-baremetal';\n      return false;\n    }\n    return true;\n  });\n\n  setHealthCheck({\n    failingHealthCheck,\n    reboot,\n  });\n\n  return (\n    <HealthItem title=\"Health Checks\" popupTitle=\"Health Checks\" {...healthState}>\n      <HealthChecksPopup\n        conditions={healthState.conditions}\n        machineHealthChecks={healthState.matchingHC}\n      />\n    </HealthItem>\n  );\n};\n\nconst NodeHealth: React.FC = () => {\n  const { obj } = React.useContext(NodeDashboardContext);\n  return (\n    <HealthBody>\n      <Gallery className=\"co-overview-status__health\" gutter=\"md\">\n        <GalleryItem>\n          <NodeStatus node={obj} className=\"co-node-health__status\" />\n        </GalleryItem>\n        <GalleryItem>\n          <HealthChecksItem />\n        </GalleryItem>\n      </Gallery>\n    </HealthBody>\n  );\n};\n\nexport default NodeHealth;\n\ntype MachineHealthConditionWithStatus = MachineHealthCondition & {\n  failing: boolean;\n};\n\ntype MachineHealth = {\n  state: HealthState;\n  details?: string;\n  noIcon?: boolean;\n  conditions?: MachineHealthConditionWithStatus[];\n  matchingHC?: MachineHealthCheckKind[];\n};\n\ntype HealthChecksPopupProps = {\n  conditions: MachineHealthConditionWithStatus[];\n  machineHealthChecks: MachineHealthCheckKind[];\n};\n","import * as React from 'react';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\n\nimport { NodeDashboardContext } from './NodeDashboardContext';\nimport NodeHealth from './NodeHealth';\nimport NodeAlerts from './NodeAlerts';\n\nconst StatusCard: React.FC = () => {\n  const { obj } = React.useContext(NodeDashboardContext);\n  return (\n    <DashboardCard gradient data-test-id=\"status-card\">\n      <DashboardCardHeader>\n        <DashboardCardTitle>Status</DashboardCardTitle>\n      </DashboardCardHeader>\n      <DashboardCardBody isLoading={!obj}>\n        <NodeHealth />\n        <NodeAlerts />\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n};\n\nexport default StatusCard;\n","import * as React from 'react';\nimport { PopoverPosition } from '@patternfly/react-core';\nimport { useMetricDuration } from '@console/shared/src/components/dashboard/duration-hook';\nimport { TopConsumerPopoverProp } from '@console/shared/src/components/dashboard/utilization-card/UtilizationItem';\nimport ConsumerPopover, { LimitsBody } from '@console/shared/src/components/dashboard/utilization-card/TopConsumerPopover';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport UtilizationBody from '@console/shared/src/components/dashboard/utilization-card/UtilizationBody';\nimport { ByteDataTypes } from '@console/shared/src/graph-helper/data-utils';\nimport { getNodeAddresses } from '@console/shared/src/selectors/node';\nimport { PodModel, ProjectModel } from '@console/internal/models';\nimport { humanizeCpuCores, humanizeBinaryBytes, humanizeDecimalBytesPerSec, humanizeNumber, Dropdown } from '@console/internal/components/utils';\nimport { PrometheusUtilizationItem, PrometheusMultilineUtilizationItem } from '@console/internal/components/dashboard/dashboards-page/cluster-dashboard/utilization-card';\n\nimport { NodeQueries, getUtilizationQueries, getMultilineQueries, getTopConsumerQueries, getResourceQutoaQueries } from './queries';\nimport { NodeDashboardContext } from './NodeDashboardContext';\nimport { useTranslation } from 'react-i18next';\nconst getPodConsumers = (query: string, nodeName: string) => ({\n  query,\n  model: PodModel,\n  fieldSelector: `spec.nodeName=${nodeName}`,\n  metric: 'pod',\n});\n\nconst getProjectConsumers = (query: string) => ({\n  query,\n  model: ProjectModel,\n  metric: 'namespace',\n});\n\nexport const CPUPopover: React.FC<PopoverProps> = ({ nodeName, nodeIp, current, title, position = PopoverPosition.top, ...rest }) => {\n  const consumers = React.useMemo(() => {\n    const queries = getTopConsumerQueries(nodeIp);\n    return [getProjectConsumers(queries[NodeQueries.PROJECTS_BY_CPU]), getPodConsumers(queries[NodeQueries.PODS_BY_CPU], nodeName)];\n  }, [nodeIp, nodeName]);\n  return (\n    <ConsumerPopover current={title} title=\"CPU\" consumers={consumers} humanize={humanizeCpuCores} position={position}>\n      <LimitsBody {...rest} current={current} />\n    </ConsumerPopover>\n  );\n};\n\nexport const MemoryPopover: React.FC<PopoverProps> = ({ nodeName, nodeIp, current, title, position = PopoverPosition.top, ...rest }) => {\n  const consumers = React.useMemo(() => {\n    const queries = getTopConsumerQueries(nodeIp);\n    return [getProjectConsumers(queries[NodeQueries.PROJECTS_BY_MEMORY]), getPodConsumers(queries[NodeQueries.PODS_BY_MEMORY], nodeName)];\n  }, [nodeIp, nodeName]);\n  return (\n    <ConsumerPopover current={title} title=\"Memory\" consumers={consumers} humanize={humanizeBinaryBytes} position={position}>\n      <LimitsBody {...rest} current={current} />\n    </ConsumerPopover>\n  );\n};\n\nconst UtilizationCard: React.FC = () => {\n  const [timestamps, setTimestamps] = React.useState<Date[]>();\n  const [duration, setDuration] = useMetricDuration();\n\n  const { obj, setCPULimit, setMemoryLimit } = React.useContext(NodeDashboardContext);\n  const { t } = useTranslation();\n  const nodeName = obj.metadata.name;\n  const nodeIp = getNodeAddresses(obj).find(addr => addr.type === 'InternalIP')?.address;\n  const [queries, multilineQueries, resourceQuotaQueries, consumers] = React.useMemo(() => {\n    const topConsumerQueries = getTopConsumerQueries(nodeIp);\n    return [\n      getUtilizationQueries(nodeName, nodeIp),\n      getMultilineQueries(nodeName, nodeIp),\n      getResourceQutoaQueries(nodeName),\n      [\n        [getProjectConsumers(topConsumerQueries[NodeQueries.PROJECTS_BY_FILESYSTEM]), getPodConsumers(topConsumerQueries[NodeQueries.PODS_BY_FILESYSTEM], nodeName)],\n        [getProjectConsumers(topConsumerQueries[NodeQueries.PROJECTS_BY_NETWORK_IN]), getPodConsumers(topConsumerQueries[NodeQueries.PODS_BY_NETWORK_IN], nodeName)],\n        [getProjectConsumers(topConsumerQueries[NodeQueries.PROJECTS_BY_NETWORK_OUT]), getPodConsumers(topConsumerQueries[NodeQueries.PODS_BY_NETWORK_OUT], nodeName)],\n      ],\n    ];\n  }, [nodeIp, nodeName]);\n\n  const cpuPopover = React.useCallback((props: TopConsumerPopoverProp) => <CPUPopover {...props} title={props.current} nodeIp={nodeIp} nodeName={nodeName} />, [nodeIp, nodeName]);\n\n  const memPopover = React.useCallback((props: TopConsumerPopoverProp) => <MemoryPopover {...props} title={props.current} nodeIp={nodeIp} nodeName={nodeName} />, [nodeIp, nodeName]);\n\n  const filesystemPopover = React.useCallback(({ current }: TopConsumerPopoverProp) => <ConsumerPopover title=\"Filesystem\" current={current} consumers={consumers[0]} humanize={humanizeBinaryBytes} position={PopoverPosition.top} />, [consumers]);\n\n  const networkPopoverIn = React.useCallback(({ current }: TopConsumerPopoverProp) => <ConsumerPopover title=\"Network In\" current={current} consumers={consumers[1]} humanize={humanizeDecimalBytesPerSec} position={PopoverPosition.top} />, [consumers]);\n\n  const networkPopoverOut = React.useCallback(({ current }: TopConsumerPopoverProp) => <ConsumerPopover title=\"Network Out\" current={current} consumers={consumers[2]} humanize={humanizeDecimalBytesPerSec} position={PopoverPosition.top} />, [consumers]);\n\n  const networkPopovers = React.useMemo(() => [networkPopoverIn, networkPopoverOut], [networkPopoverIn, networkPopoverOut]);\n\n  let durationItems = {\n    ['ONE_HR']: t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_1_1'),\n    ['SIX_HR']: t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_6_1'),\n    ['TWENTY_FOUR_HR']: t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_24_1'),\n  };\n\n  let durationValues = {\n    [t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_1_1')]: '1 Hour',\n    [t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_6_1')]: '6 Hours',\n    [t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_24_1')]: '24 Hours',\n  };\n\n  React.useEffect(() => {\n    durationItems = {\n      ['ONE_HR']: t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_1_1'),\n      ['SIX_HR']: t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_6_1'),\n      ['TWENTY_FOUR_HR']: t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_24_1'),\n    };\n    durationValues = {\n      [t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_1_1')]: '1 Hour',\n      [t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_6_1')]: '6 Hours',\n      [t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_24_1')]: '24 Hours',\n    };\n  }, [duration]);\n\n  return (\n    <DashboardCard data-test-id=\"utilization-card\">\n      <DashboardCardHeader>\n        <DashboardCardTitle>Utilization</DashboardCardTitle>\n        <Dropdown items={durationItems} onChange={setDuration} selectedKey={durationValues[duration]} title={duration} />\n      </DashboardCardHeader>\n      <UtilizationBody timestamps={timestamps}>\n        <PrometheusUtilizationItem title={t('COMMON:MSG_DETAILS_TABNODE_TABLEHEADER_3')} humanizeValue={humanizeCpuCores} utilizationQuery={queries[NodeQueries.CPU_USAGE]} totalQuery={queries[NodeQueries.CPU_TOTAL]} limitQuery={resourceQuotaQueries[NodeQueries.POD_RESOURCE_LIMIT_CPU]} requestQuery={resourceQuotaQueries[NodeQueries.POD_RESOURCE_REQUEST_CPU]} TopConsumerPopover={cpuPopover} duration={duration} setTimestamps={setTimestamps} setLimitReqState={setCPULimit} />\n        <PrometheusUtilizationItem title={t('COMMON:MSG_DETAILS_TABNODE_TABLEHEADER_4')} humanizeValue={humanizeBinaryBytes} utilizationQuery={queries[NodeQueries.MEMORY_USAGE]} totalQuery={queries[NodeQueries.MEMORY_TOTAL]} limitQuery={resourceQuotaQueries[NodeQueries.POD_RESOURCE_LIMIT_MEMORY]} requestQuery={resourceQuotaQueries[NodeQueries.POD_RESOURCE_REQUEST_MEMORY]} byteDataType={ByteDataTypes.BinaryBytes} TopConsumerPopover={memPopover} duration={duration} setLimitReqState={setMemoryLimit} />\n        <PrometheusUtilizationItem title={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_81')} humanizeValue={humanizeBinaryBytes} utilizationQuery={queries[NodeQueries.FILESYSTEM_USAGE]} totalQuery={queries[NodeQueries.FILESYSTEM_TOTAL]} byteDataType={ByteDataTypes.BinaryBytes} TopConsumerPopover={filesystemPopover} duration={duration} />\n        <PrometheusMultilineUtilizationItem title={t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERUTILIZATION_NETWORK_1')} humanizeValue={humanizeDecimalBytesPerSec} queries={multilineQueries[NodeQueries.NETWORK_UTILIZATION]} TopConsumerPopovers={networkPopovers} duration={duration} />\n        <PrometheusUtilizationItem title={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_78')} humanizeValue={humanizeNumber} utilizationQuery={queries[NodeQueries.POD_COUNT]} duration={duration} />\n      </UtilizationBody>\n    </DashboardCard>\n  );\n};\n\nexport default UtilizationCard;\n\nexport type PopoverProps = TopConsumerPopoverProp & {\n  nodeIp: string;\n  nodeName: string;\n  title: string;\n  position?: PopoverPosition;\n};\n","export const CONDITIONS_WARNING = (reboot = false) =>\n  `One or more health check remediation conditions have been met. The node will ${\n    reboot ? 'reboot' : 'reprovision'\n  } automatically.`;\n\nexport const CPU_LIMIT_REQ_ERROR =\n  'This node’s CPU resources are overcommitted. The total CPU resource limit of all pods exceeds the node’s total capacity. The total CPU requested is also approaching the node’s capacity. Pod performance will be throttled under high load, and new pods may not be schedulable on this node.';\nexport const CPU_LIMIT_ERROR =\n  'This node’s CPU resources are overcommitted. The total CPU resource limit of all pods exceeds the node’s total capacity. Pod performance will be throttled under high load.';\nexport const CPU_LIMIT_WARN =\n  'The total CPU resource limit of all pods on this node is approaching the node’s capacity. Pod performance may be throttled under high load.';\nexport const CPU_LIMIT_REQ_WARN =\n  'The total CPU resource limit and amount requested by all pods on this node is approaching the node’s capacity. Pod performance may be throttled under high load, and new pods may not be schedulable.';\nexport const CPU_REQ_WARN =\n  'The total CPU requested by all pods on this node is approaching the node’s capacity. New pods may not be schedulable on this node.';\n\nexport const MEM_LIMIT_REQ_ERROR =\n  'This node’s memory resources are overcommitted. The total memory resource limit of all pods exceeds the node’s total capacity. The total memory requested is also approaching the node’s capacity. Pods will be terminated under high load, and new pods may not be schedulable on this node.';\nexport const MEM_LIMIT_ERROR =\n  'This node’s memory resources are overcommitted. The total memory resource limit of all pods exceeds the node’s total capacity. Pods will be terminated under high load.';\nexport const MEM_LIMIT_WARN =\n  'The total memory resource limit of all pods on this node is approaching the node’s capacity. Pods may be terminated if the limit is reached under high load.';\nexport const MEM_LIMIT_REQ_WARN =\n  'The total memory resource limit and amount requested by all pods on this node is approaching the node’s capacity. Pods may be terminated if the limit is reached under high load, and new pods may not be schedulable on this node.';\nexport const MEM_REQ_WARN =\n  'The total memory requested by all pods on this node is approaching the node’s capacity. New pods may not be schedulable on this node.';\n","// extracted by mini-css-extract-plugin","import * as _ from 'lodash';\nimport { QueryWithDescription } from '@console/shared/src/components/dashboard/utilization-card/UtilizationItem';\n\nexport enum NodeQueries {\n  CPU_USAGE = 'CPU_USAGE',\n  CPU_TOTAL = 'CPU_TOTAL',\n  MEMORY_USAGE = 'MEMORY_USAGE',\n  MEMORY_TOTAL = 'MEMORY_TOTAL',\n  POD_COUNT = 'POD_COUNT',\n  PODS_BY_CPU = 'PODS_BY_CPU',\n  PODS_BY_MEMORY = 'PODS_BY_MEMORY',\n  PODS_BY_FILESYSTEM = 'PODS_BY_FILESYSTEM',\n  PODS_BY_NETWORK_IN = 'PODS_BY_NETWORK_IN',\n  PODS_BY_NETWORK_OUT = 'PODS_BY_NETWORK_OUT',\n  PROJECTS_BY_CPU = 'PROJECTS_BY_CPU',\n  PROJECTS_BY_MEMORY = 'PROJECTS_BY_MEMORY',\n  PROJECTS_BY_FILESYSTEM = 'PROJECTS_BY_FILESYSTEM',\n  PROJECTS_BY_NETWORK_IN = 'PROJECTS_BY_NETWORK_IN',\n  PROJECTS_BY_NETWORK_OUT = 'PROJECTS_BY_NETWORK_OUT',\n  FILESYSTEM_USAGE = 'FILESYSTEM_USAGE',\n  FILESYSTEM_TOTAL = 'FILESYSTEM_TOTAL',\n  NETWORK_IN_UTILIZATION = 'NETWORK_IN_UTILIZATION',\n  NETWORK_OUT_UTILIZATION = 'NETWORK_OUT_UTILIZATION',\n  NETWORK_UTILIZATION = 'NETWORK_UTILIZATION',\n  POD_RESOURCE_LIMIT_CPU = 'POD_RESOURCE_LIMIT_CPU',\n  POD_RESOURCE_LIMIT_MEMORY = 'POD_RESOURCE_LIMIT_MEMORY',\n  POD_RESOURCE_REQUEST_CPU = 'POD_RESOURCE_REQUEST_CPU',\n  POD_RESOURCE_REQUEST_MEMORY = 'POD_RESOURCE_REQUEST_MEMORY',\n}\n\n// const queries = {\n//   [NodeQueries.CPU_USAGE]: _.template(`instance:node_cpu:rate:sum{instance='<%= node %>'}`),\n//   [NodeQueries.CPU_TOTAL]: _.template(`instance:node_num_cpu:sum{instance='<%= node %>'}`),\n//   [NodeQueries.MEMORY_USAGE]: _.template(`node_memory_MemTotal_bytes{instance='<%= node %>'} - node_memory_MemAvailable_bytes{instance='<%= node %>'}`),\n//   [NodeQueries.MEMORY_TOTAL]: _.template(`node_memory_MemTotal_bytes{instance='<%= node %>'}`),\n//   [NodeQueries.POD_COUNT]: _.template(`kubelet_running_pod_count{instance=~'<%= ipAddress %>:.*'}`),\n//   [NodeQueries.FILESYSTEM_USAGE]: _.template(`instance:node_filesystem_usage:sum{instance='<%= node %>'}`),\n//   [NodeQueries.FILESYSTEM_TOTAL]: _.template(`node_filesystem_size_bytes{instance='<%= node %>'}`),\n//   [NodeQueries.NETWORK_IN_UTILIZATION]: _.template(`instance:node_network_receive_bytes:rate:sum{instance='<%= node %>'}`),\n//   [NodeQueries.NETWORK_OUT_UTILIZATION]: _.template(`instance:node_network_transmit_bytes:rate:sum{instance='<%= node %>'}`),\n// };\n\nconst queries = {\n  [NodeQueries.CPU_USAGE]: _.template(`instance:node_cpu:rate:sum{instance='<%= ipAddress %>'}`),\n  [NodeQueries.CPU_TOTAL]: _.template(`instance:node_num_cpu:sum{instance='<%= ipAddress %>'}`),\n  [NodeQueries.MEMORY_USAGE]: _.template(`node_memory_MemTotal_bytes{instance='<%= ipAddress %>'} - node_memory_MemAvailable_bytes{instance='<%= ipAddress %>'}`),\n  [NodeQueries.MEMORY_TOTAL]: _.template(`node_memory_MemTotal_bytes{instance='<%= ipAddress %>'}`),\n  [NodeQueries.POD_COUNT]: _.template(`kubelet_running_pods{instance=~'<%= podCountIp %>'}`),\n  [NodeQueries.FILESYSTEM_USAGE]: _.template(`instance:node_filesystem_usage:sum{instance='<%= ipAddress %>'}`),\n  [NodeQueries.FILESYSTEM_TOTAL]: _.template(`node_filesystem_size_bytes{instance='<%= ipAddress %>'}`),\n  [NodeQueries.NETWORK_IN_UTILIZATION]: _.template(`instance:node_network_receive_bytes:rate:sum{instance='<%= ipAddress %>'}`),\n  [NodeQueries.NETWORK_OUT_UTILIZATION]: _.template(`instance:node_network_transmit_bytes:rate:sum{instance='<%= ipAddress %>'}`),\n};\n\nconst top25Queries = {\n  [NodeQueries.PODS_BY_CPU]: _.template(`topk(25, sort_desc(sum(rate(container_cpu_usage_seconds_total{container=\"\",pod!=\"\", instance=~'<%= ipAddress %>:.*'}[5m])) by (pod, namespace)))`),\n  [NodeQueries.PODS_BY_MEMORY]: _.template(`topk(25, sort_desc(sum(avg_over_time(container_memory_working_set_bytes{container=\"\",pod!=\"\",instance=~'<%= ipAddress %>:.*'}[5m])) BY (pod, namespace)))`),\n  [NodeQueries.PODS_BY_FILESYSTEM]: _.template(`topk(25, sort_desc(sum(container_fs_usage_bytes{instance=~'<%= ipAddress %>:.*'}) BY (pod, namespace)))`),\n  [NodeQueries.PODS_BY_NETWORK_IN]: _.template(`topk(25, sort_desc(sum(rate(container_network_receive_bytes_total{ container=\"POD\", pod!= \"\", instance=~'<%= ipAddress %>:.*'}[5m])) BY (pod, namespace)))`),\n  [NodeQueries.PODS_BY_NETWORK_OUT]: _.template(`topk(25, sort_desc(sum(rate(container_network_transmit_bytes_total{ container=\"POD\", pod!= \"\", instance=~'<%= ipAddress %>:.*'}[5m])) BY (pod, namespace)))`),\n  [NodeQueries.PROJECTS_BY_CPU]: _.template(`topk(25, sort_desc(sum(rate(container_cpu_usage_seconds_total{container=\"\",pod!=\"\", instance=~'<%= ipAddress %>:.*'}[5m])) by (namespace)))`),\n  [NodeQueries.PROJECTS_BY_MEMORY]: _.template(`topk(25, sort_desc(sum(avg_over_time(container_memory_working_set_bytes{container=\"\",pod!=\"\",instance=~'<%= ipAddress %>:.*'}[5m])) BY (namespace)))`),\n  [NodeQueries.PROJECTS_BY_FILESYSTEM]: _.template(`topk(25, sort_desc(sum(container_fs_usage_bytes{instance=~'<%= ipAddress %>:.*'}) BY (namespace)))`),\n  [NodeQueries.PROJECTS_BY_NETWORK_IN]: _.template(`topk(25, sort_desc(sum(rate(container_network_receive_bytes_total{ container=\"POD\", pod!= \"\", instance=~'<%= ipAddress %>:.*'}[5m])) BY (namespace)))`),\n  [NodeQueries.PROJECTS_BY_NETWORK_OUT]: _.template(`topk(25, sort_desc(sum(rate(container_network_transmit_bytes_total{ container=\"POD\", pod!= \"\", instance=~'<%= ipAddress %>:.*'}[5m])) BY (namespace)))`),\n};\n\nconst resourceQuotaQueries = {\n  [NodeQueries.POD_RESOURCE_LIMIT_CPU]: _.template(\n    `sum(\n      max by (namespace, pod, container) (\n          kube_pod_container_resource_limits_cpu_cores{node='<%= node %>', job=\"kube-state-metrics\"}\n      ) * on(namespace, pod) group_left() max by (namespace, pod) (\n          kube_pod_status_phase{phase=~\"Pending|Running\"} == 1\n      )\n    )`,\n  ),\n  [NodeQueries.POD_RESOURCE_LIMIT_MEMORY]: _.template(\n    `sum(\n      max by (namespace, pod, container) (\n          kube_pod_container_resource_limits_memory_bytes{node='<%= node %>', job=\"kube-state-metrics\"}\n      ) * on(namespace, pod) group_left() max by (namespace, pod) (\n          kube_pod_status_phase{phase=~\"Pending|Running\"} == 1\n      )\n    )`,\n  ),\n  [NodeQueries.POD_RESOURCE_REQUEST_CPU]: _.template(\n    `sum(\n      max by (namespace, pod, container) (\n          kube_pod_container_resource_requests_cpu_cores{node='<%= node %>', job=\"kube-state-metrics\"}\n      ) * on(namespace, pod) group_left() max by (namespace, pod) (\n          kube_pod_status_phase{phase=~\"Pending|Running\"} == 1\n      )\n    )`,\n  ),\n  [NodeQueries.POD_RESOURCE_REQUEST_MEMORY]: _.template(\n    `sum(\n      max by (namespace, pod, container) (\n          kube_pod_container_resource_requests_memory_bytes{node='<%= node %>', job=\"kube-state-metrics\"}\n      ) * on(namespace, pod) group_left() max by (namespace, pod) (\n          kube_pod_status_phase{phase=~\"Pending|Running\"} == 1\n      )\n    )`,\n  ),\n};\n\n// export const getMultilineQueries = (node: string): { [key: string]: QueryWithDescription[] } => ({\n//   [NodeQueries.NETWORK_UTILIZATION]: [\n//     {\n//       query: queries[NodeQueries.NETWORK_IN_UTILIZATION]({ node }),\n//       desc: 'In',\n//     },\n//     {\n//       query: queries[NodeQueries.NETWORK_OUT_UTILIZATION]({ node }),\n//       desc: 'Out',\n//     },\n//   ],\n// });\nexport const getMultilineQueries = (node: string, ipAddress: string): { [key: string]: QueryWithDescription[] } => {\n  ipAddress = ipAddress + ':9100';\n  return {\n    [NodeQueries.NETWORK_UTILIZATION]: [\n      {\n        query: queries[NodeQueries.NETWORK_IN_UTILIZATION]({ ipAddress }),\n        desc: 'In',\n      },\n      {\n        query: queries[NodeQueries.NETWORK_OUT_UTILIZATION]({ ipAddress }),\n        desc: 'Out',\n      },\n    ],\n  };\n};\n\nexport const getResourceQutoaQueries = (node: string) => ({\n  [NodeQueries.POD_RESOURCE_LIMIT_CPU]: resourceQuotaQueries[NodeQueries.POD_RESOURCE_LIMIT_CPU]({\n    node,\n  }),\n  [NodeQueries.POD_RESOURCE_LIMIT_MEMORY]: resourceQuotaQueries[NodeQueries.POD_RESOURCE_LIMIT_MEMORY]({ node }),\n  [NodeQueries.POD_RESOURCE_REQUEST_CPU]: resourceQuotaQueries[NodeQueries.POD_RESOURCE_REQUEST_CPU]({\n    node,\n  }),\n  [NodeQueries.POD_RESOURCE_REQUEST_MEMORY]: resourceQuotaQueries[NodeQueries.POD_RESOURCE_REQUEST_MEMORY]({ node }),\n});\n\n// export const getUtilizationQueries = (node: string, ipAddress: string) => ({\n//   [NodeQueries.CPU_USAGE]: queries[NodeQueries.CPU_USAGE]({ node }),\n//   [NodeQueries.CPU_TOTAL]: queries[NodeQueries.CPU_TOTAL]({ node }),\n//   [NodeQueries.MEMORY_USAGE]: queries[NodeQueries.MEMORY_USAGE]({ node }),\n//   [NodeQueries.MEMORY_TOTAL]: queries[NodeQueries.MEMORY_TOTAL]({ node }),\n//   [NodeQueries.POD_COUNT]: queries[NodeQueries.POD_COUNT]({ ipAddress }),\n//   [NodeQueries.FILESYSTEM_USAGE]: queries[NodeQueries.FILESYSTEM_USAGE]({\n//     node,\n//   }),\n//   [NodeQueries.FILESYSTEM_TOTAL]: queries[NodeQueries.FILESYSTEM_TOTAL]({\n//     node,\n//   }),\n// });\nexport const getUtilizationQueries = (node: string, ipAddress: string) => {\n  let podCountIp = ipAddress + ':10250';\n  ipAddress = ipAddress + ':9100';\n  return {\n    [NodeQueries.CPU_USAGE]: queries[NodeQueries.CPU_USAGE]({ ipAddress }),\n    [NodeQueries.CPU_TOTAL]: queries[NodeQueries.CPU_TOTAL]({ ipAddress }),\n    [NodeQueries.MEMORY_USAGE]: queries[NodeQueries.MEMORY_USAGE]({ ipAddress }),\n    [NodeQueries.MEMORY_TOTAL]: queries[NodeQueries.MEMORY_TOTAL]({ ipAddress }),\n    [NodeQueries.POD_COUNT]: queries[NodeQueries.POD_COUNT]({ podCountIp }),\n    [NodeQueries.FILESYSTEM_USAGE]: queries[NodeQueries.FILESYSTEM_USAGE]({\n      ipAddress,\n    }),\n    [NodeQueries.FILESYSTEM_TOTAL]: queries[NodeQueries.FILESYSTEM_TOTAL]({\n      ipAddress,\n    }),\n  };\n};\n\nexport const getTopConsumerQueries = (ipAddress: string) => ({\n  [NodeQueries.PODS_BY_CPU]: top25Queries[NodeQueries.PODS_BY_CPU]({ ipAddress }),\n  [NodeQueries.PODS_BY_MEMORY]: top25Queries[NodeQueries.PODS_BY_MEMORY]({ ipAddress }),\n  [NodeQueries.PODS_BY_FILESYSTEM]: top25Queries[NodeQueries.PODS_BY_FILESYSTEM]({ ipAddress }),\n  [NodeQueries.PODS_BY_NETWORK_IN]: top25Queries[NodeQueries.PODS_BY_NETWORK_IN]({ ipAddress }),\n  [NodeQueries.PODS_BY_NETWORK_OUT]: top25Queries[NodeQueries.PODS_BY_NETWORK_OUT]({\n    ipAddress,\n  }),\n  [NodeQueries.PROJECTS_BY_CPU]: top25Queries[NodeQueries.PROJECTS_BY_CPU]({ ipAddress }),\n  [NodeQueries.PROJECTS_BY_MEMORY]: top25Queries[NodeQueries.PROJECTS_BY_MEMORY]({ ipAddress }),\n  [NodeQueries.PROJECTS_BY_FILESYSTEM]: top25Queries[NodeQueries.PROJECTS_BY_FILESYSTEM]({\n    ipAddress,\n  }),\n  [NodeQueries.PROJECTS_BY_NETWORK_IN]: top25Queries[NodeQueries.PROJECTS_BY_NETWORK_IN]({\n    ipAddress,\n  }),\n  [NodeQueries.PROJECTS_BY_NETWORK_OUT]: top25Queries[NodeQueries.PROJECTS_BY_NETWORK_OUT]({\n    ipAddress,\n  }),\n});\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { alertActions } from '@console/internal/components/notification-drawer';\nimport { Timestamp } from '@console/internal/components/utils/timestamp';\nimport { alertURL, Alert } from '@console/internal/components/monitoring';\nimport { RedExclamationCircleIcon, YellowExclamationTriangleIcon } from '../../status/icons';\nimport {\n  getAlertSeverity,\n  getAlertMessage,\n  getAlertDescription,\n  getAlertTime,\n} from './alert-utils';\n\nconst getSeverityIcon = (severity: string) => {\n  switch (severity) {\n    case 'critical':\n      return RedExclamationCircleIcon;\n    case 'warning':\n    default:\n      return YellowExclamationTriangleIcon;\n  }\n};\n\nexport const StatusItem: React.FC<StatusItemProps> = ({ Icon, timestamp, message, children }) => {\n  return (\n    <div className=\"co-status-card__alert-item\">\n      <div className=\"co-status-card__alert-item-icon co-dashboard-icon\">\n        <Icon />\n      </div>\n      <div className=\"co-status-card__alert-item-text\">\n        <div className=\"co-status-card__alert-item-message\">\n          <div className=\"co-health-card__alert-item-timestamp co-status-card__health-item-text text-secondary\">\n            {timestamp && <Timestamp simple timestamp={timestamp} />}\n          </div>\n          <span className=\"co-status-card__health-item-text co-break-word\">{message}</span>\n        </div>\n        {children && <div className=\"co-status-card__alert-item-more\">{children}</div>}\n      </div>\n    </div>\n  );\n};\n\nconst AlertItem: React.FC<AlertItemProps> = ({ alert }) => {\n  const action = alertActions.get(alert.rule.name);\n  return (\n    <StatusItem\n      Icon={getSeverityIcon(getAlertSeverity(alert))}\n      timestamp={getAlertTime(alert)}\n      message={getAlertDescription(alert) || getAlertMessage(alert)}\n    >\n      {action ? (\n        <Link to={action.path}>{action.text}</Link>\n      ) : (\n        <Link to={alertURL(alert, alert.rule.id)}>View details</Link>\n      )}\n    </StatusItem>\n  );\n};\n\nexport default AlertItem;\n\ntype StatusItemProps = {\n  Icon: React.ComponentType<any>;\n  timestamp?: string;\n  message: string;\n};\n\ntype AlertItemProps = {\n  alert: Alert;\n};\n","import * as React from 'react';\nimport {\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { UnknownIcon } from '@patternfly/react-icons';\n\nconst AlertsBody: React.FC<AlertsBodyProps> = ({ error = false, children }) =>\n  (error || !!React.Children.toArray(children).length) && (\n    <div className=\"co-dashboard-card__body--no-padding co-status-card__alerts-body co-dashboard-card__body--top-margin\">\n      {error ? (\n        <EmptyState variant={EmptyStateVariant.full} className=\"co-status-card__alerts-msg\">\n          <EmptyStateIcon className=\"co-status-card__alerts-icon\" icon={UnknownIcon} />\n          <EmptyStateBody>Alerts could not be loaded.</EmptyStateBody>\n        </EmptyState>\n      ) : (\n        children\n      )}\n    </div>\n  );\n\nexport default AlertsBody;\n\ntype AlertsBodyProps = {\n  error?: boolean;\n  children?: React.ReactNode;\n};\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { DashboardCardPopupLink } from '../dashboard-card/DashboardCardLink';\nimport { HealthState, healthStateMapping } from './states';\n\nconst HealthItemIcon: React.FC<HealthItemIconProps> = ({ state }) => (\n  <div className=\"co-dashboard-icon\">\n    {(healthStateMapping[state] || healthStateMapping[HealthState.UNKNOWN]).icon}\n  </div>\n);\n\nconst HealthItem: React.FC<HealthItemProps> = React.memo(\n  ({ className, state, title, details, popupTitle, noIcon = false, children }) => {\n    const detailMessage =\n      details || (healthStateMapping[state] || healthStateMapping[HealthState.UNKNOWN]).message;\n    return (\n      <div className={classNames('co-status-card__health-item', className)}>\n        {state === HealthState.LOADING ? (\n          <div className=\"skeleton-health\" />\n        ) : (\n          !noIcon && <HealthItemIcon state={state} />\n        )}\n        <div>\n          <span className=\"co-dashboard-text--small co-status-card__health-item-text\">\n            {React.Children.toArray(children).length && state !== HealthState.LOADING ? (\n              <DashboardCardPopupLink\n                linkTitle={title}\n                popupTitle={popupTitle}\n                className=\"co-status-card__popup\"\n              >\n                {children}\n              </DashboardCardPopupLink>\n            ) : (\n              title\n            )}\n          </span>\n          {state !== HealthState.LOADING && detailMessage && (\n            <div className=\"co-dashboard-text--small co-status-card__health-item-text co-status-card__health-item-subtitle\">\n              {detailMessage}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  },\n);\n\nexport default HealthItem;\n\ntype HealthItemProps = {\n  title: string;\n  className?: string;\n  details?: string;\n  state?: HealthState;\n  popupTitle?: string;\n  noIcon?: boolean;\n};\n\ntype HealthItemIconProps = {\n  state?: HealthState;\n};\n","import * as React from 'react';\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore: FIXME missing exports due to out-of-sync @types/react-redux version\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Map as ImmutableMap } from 'immutable';\nimport {\n  watchPrometheusQuery,\n  stopWatchPrometheusQuery,\n} from '@console/internal/actions/dashboards';\nimport { RootState } from '@console/internal/redux';\nimport { RESULTS_TYPE } from '@console/internal/reducers/dashboards';\nimport { getInstantVectorStats } from '@console/internal/components/graphs/utils';\nimport { Humanize, HumanizeResult } from '@console/internal/components/utils/types';\n\nexport const usePrometheusQuery: UsePrometheusQuery = (query, humanize) => {\n  const dispatch = useDispatch();\n  React.useEffect(() => {\n    dispatch(watchPrometheusQuery(query));\n    return () => {\n      dispatch(stopWatchPrometheusQuery(query));\n    };\n  }, [dispatch, query]);\n\n  const queryResult = useSelector<RootState, ImmutableMap<string, any>>(({ dashboards }) =>\n    dashboards.getIn([RESULTS_TYPE.PROMETHEUS, query]),\n  );\n  const results = React.useMemo<[HumanizeResult, any, number]>(() => {\n    if (!queryResult || !queryResult.get('data')) {\n      return [{}, null, null] as [HumanizeResult, any, number];\n    }\n    const value = getInstantVectorStats(queryResult.get('data'))[0]?.y;\n    return [humanize(value), queryResult.get('loadError'), value];\n  }, [queryResult, humanize]);\n\n  return results;\n};\n\ntype UsePrometheusQuery = (query: string, humanize: Humanize) => [HumanizeResult, any, number];\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AASA;AAEA;;;;;;;;;;;;;ACnDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAQA;AAEA;;;;;;;;;;;;;AC1CA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAOA;AAKA;AAYA;;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AAMA;;;;;;;;;;;;;ACxDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AAGA;AAGA;AACA;AAMA;AAEA;;;;;;;;;;;;;AClDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAKA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAUA;AAEA;;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAKA;AAUA;AAQA;;;;;;;;;;;;;AC7EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AAKA;AAIA;AACA;AAKA;AAKA;AAKA;AACA;AAKA;AACA;AAEA;AACA;AAEA;;AAUA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAKA;AAGA;AAeA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAMA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAKA;AAGA;AAEA;AAYA;AAEA;AAcA;AAEA;;;;;;;;;;;;;AC7MA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AAIA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAIA;AAEA;;;;;;;;;;;;;AClHA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACRA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAOA;AAKA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AAEA;AAIA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAWA;AAUA;AASA;AAUA;AAYA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAIA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAKA;AAEA;;;;;;;;;;;;;AChQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;;;;;;;;;;;;;ACnIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAEA;AAEA;AAEA;AAEA;AAGA;AAEA;AAEA;AAEA;AAEA;;;;;;;;;;;;ACxBA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;AAOA;AAEA;;;;;;AAOA;AAEA;;;;;;AAOA;AAEA;;;;;;AAOA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AAIA;AAEA;AACA;AACA;AAaA;AAEA;;;;;;;;;;;;;AC3DA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AAEA;AAKA;AACA;AAQA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAMA;AAEA;AAEA;AAEA;AAKA;AACA;AAaA;AAQA;AAGA;;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;A","sourceRoot":""}