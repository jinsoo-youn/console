{"version":3,"file":"modify-member-modal-850ecf9204c41ced5598.js","sources":["webpack:///./public/components/hypercloud/modals/modify-member-modal.tsx","webpack:///./public/components/hypercloud/utils/section.tsx"],"sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\n\nimport {\n  ModalBody,\n  ModalComponentProps,\n  ModalSubmitFooter,\n  ModalTitle,\n  createModalLauncher,\n} from '../../factory/modal';\nimport { HandlePromiseProps, withHandlePromise } from '../../utils';\nimport { Section } from '../utils/section';\nimport { RadioGroup } from '@console/internal/components/radio';\nimport { coFetchJSON } from '../../../co-fetch';\nimport { getId, getUserGroup } from '../../../hypercloud/auth';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\n\nconst roleItems = (t?: TFunction) => [\n  {\n    title: t('COMMON:MSG_DETAILS_TABACCESSPERMISSIONS_RADIOBUTTON_1'),\n    value: 'admin',\n  },\n  {\n    title: t('COMMON:MSG_DETAILS_TABACCESSPERMISSIONS_RADIOBUTTON_2'),\n    value: 'developer',\n  },\n  {\n    title: t('COMMON:MSG_DETAILS_TABACCESSPERMISSIONS_RADIOBUTTON_3'),\n    value: 'guest'\n  },\n];\n\n\nexport const ModifyMemberModal = withHandlePromise((props: ModifyMemberModalProps) => {\n  const [role, setRole] = React.useState(props.member.Role);\n  const [errorMsg, setError] = React.useState('')\n\n  const submit: React.FormEventHandler<HTMLFormElement> = (e) => {\n    e.preventDefault();\n    coFetchJSON(`/api/multi-hypercloud/namespaces/${props.member.Namespace}/clustermanagers/${props.member.Cluster}/update_role/${props.member.Attribute}/${props.member.MemberId}?userId=${getId()}${getUserGroup()}&remoteRole=${role}`, 'PUT')\n      .then((res) => {\n        props.close();\n      })\n      .catch((err) => {\n        setError(err);\n      })\n  };\n\n  const { t } = useTranslation();\n  return (\n    <form onSubmit={submit} name=\"form\" className=\"modal-content \">\n      <ModalTitle>\n        {t('MULTI:MSG_MULTI_CLUSTERS_CHANGEPERMISSIONSPOPUP_TITLE_1')}\n      </ModalTitle>\n      <ModalBody className=\"modal-body\">\n        <Section id='role'>\n          <RadioGroup\n            id='role'\n            currentValue={role}\n            items={roleItems.bind(null, t)()}\n            onChange={({ currentTarget }) => setRole(currentTarget.value)}\n          />\n        </Section>\n      </ModalBody>\n      <ModalSubmitFooter errorMessage={errorMsg} inProgress={props.inProgress} submitText={t('COMMON:MSG_COMMON_BUTTON_COMMIT_3')} cancelText={t('COMMON:MSG_COMMON_BUTTON_COMMIT_2')} cancel={props.cancel} />\n    </form>\n  );\n});\n\nexport const modifyMemberModal = createModalLauncher(ModifyMemberModal);\n\nexport type ModifyMemberModalProps = {\n  member: {\n    Id?: number,\n    Namespace?: string,\n    Cluster?: string,\n    MemberId: string,\n    MemberName: string,\n    Attribute: \"group\" | \"user\",\n    Role: \"guest\" | \"developer\" | \"admin\",\n    Status?: \"invited\" | \"owner\",\n    CreatedTime?: string,\n    UpdatedTime?: string\n  };\n} & ModalComponentProps &\n  HandlePromiseProps;\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\n\nconst Node = ({ className, children, description }) => (\n  <div className={className}>\n    <div>{children}</div>\n    <p className=\"help-block\">{description}</p>\n  </div>\n);\n\nconst CombineNodes = (id, label, description, children, isRequired) => {\n  // children node 개수에 따라 가로 분할 class 적용\n  let isArray = Array.isArray(children);\n  let className = isArray ? `col-md-${12 / children.length}` : 'col-md-12';\n  return isArray ? children.map(cur => <Node className={className} children={cur} description={description} />) : <Node className={className} children={children} description={description} />;\n};\n\nexport const Section: React.FC<SectionProps> = ({ id, label, description, children, isRequired = false }) => {\n  let result = CombineNodes(id, label, description, children, isRequired);\n  return (\n    <div className=\"form-group\">\n      {label && (\n        <label className={'control-label ' + (isRequired ? 'co-required' : '')} htmlFor={id}>\n          {label}\n        </label>\n      )}\n      <div className=\"row\">{result}</div>\n    </div>\n  );\n};\n\ntype SectionProps = {\n  id: string;\n  children: Array<React.ReactNode> | React.ReactNode;\n  label?: string;\n  description?: string;\n  isRequired?: boolean;\n};\n"],"mappings":";;;;;;;;;;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AAQA;AAGA;AAEA;;;;;;;;;;;;;ACrEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AAGA;;;;;A","sourceRoot":""}