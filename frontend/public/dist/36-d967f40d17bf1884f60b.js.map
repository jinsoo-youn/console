{"version":3,"file":"36-d967f40d17bf1884f60b.js","sources":["webpack:///./public/components/hypercloud/crd/create-pinned-resource.tsx","webpack:///./public/components/hypercloud/crd/index.tsx"],"sourcesContent":["import * as _ from 'lodash';\nimport * as React from 'react';\nimport { JSONSchema6 } from 'json-schema';\nimport { K8sKind, modelFor, K8sResourceKind, K8sResourceKindReference, kindForReference, CustomResourceDefinitionKind, definitionFor, referenceForModel } from '@console/internal/module/k8s';\nimport { CustomResourceDefinitionModel, SecretModel, TemplateModel, ClusterTemplateModel } from '@console/internal/models';\n// import { Firehose } from '@console/internal/components/utils/firehose';\nimport { StatusBox, FirehoseResult, BreadCrumbs, resourcePathFromModel } from '@console/internal/components/utils';\nimport { RootState } from '@console/internal/redux';\nimport { SyncedEditor } from '@console/shared/src/components/synced-editor';\nimport { getActivePerspective } from '@console/internal/reducers/ui';\nimport { EditorType } from '@console/shared/src/components/synced-editor/editor-toggle';\nimport { connect } from 'react-redux';\nimport { exampleForModel } from '.';\nimport { Helmet } from 'react-helmet';\nimport { match as RouterMatch } from 'react-router';\nimport { OperandForm } from '@console/operator-lifecycle-manager/src/components/operand/operand-form';\nimport { OperandYAML } from '@console/operator-lifecycle-manager/src/components/operand/operand-yaml';\nimport { FORM_HELP_TEXT, YAML_HELP_TEXT, DEFAULT_K8S_SCHEMA } from '@console/operator-lifecycle-manager/src/components/operand/const';\nimport { prune } from '@console/shared/src/components/dynamic-form/utils';\nimport { pluralToKind } from '../form';\nimport { kindToSchemaPath } from '@console/internal/module/hypercloud/k8s/kind-to-schema-path';\nimport { getAccessToken } from '../../../hypercloud/auth';\nimport { getK8sAPIPath } from '@console/internal/module/k8s/resource.js';\n// import { safeDump } from 'js-yaml';\n// eslint-disable-next-line @typescript-eslint/camelcase\n\n// MEMO : YAML Editor만 제공돼야 되는 리소스 kind\nconst OnlyYamlEditorKinds = [SecretModel.kind, TemplateModel.kind, ClusterTemplateModel.kind];\n\nexport const CreateDefault: React.FC<CreateDefaultProps> = ({ customResourceDefinition, initialEditorType, loadError, match, model, activePerspective }) => {\n  if (!model) {\n    return null;\n  }\n\n  if (OnlyYamlEditorKinds.includes(model.kind)) {\n    const next = `${resourcePathFromModel(model, match.params.appName, match.params.ns)}`;\n    let definition;\n\n    if (customResourceDefinition) {\n      definition = customResourceDefinition.data;\n    }\n\n    const sample = React.useMemo<K8sResourceKind>(() => exampleForModel(definition, model), [definition, model]);\n\n    return (\n      <>\n        <div className=\"co-create-operand__header\">\n          <div className=\"co-create-operand__header-buttons\">\n            <BreadCrumbs breadcrumbs={[{ name: `Create ${model.label}`, path: window.location.pathname }]} />\n          </div>\n          <h1 className=\"co-create-operand__header-text\">{`Create ${model.label}`}</h1>\n        </div>\n        <SyncedEditor\n          context={{\n            formContext: {},\n            yamlContext: { next, match },\n          }}\n          initialData={sample}\n          initialType={EditorType.YAML}\n          FormEditor={null}\n          YAMLEditor={OperandYAML}\n          supplyEditorToggle={false}\n        />\n      </>\n    );\n  } else {\n    const [loaded, setLoaded] = React.useState(false);\n    const [template, setTemplate] = React.useState({} as any);\n    // const [yaml, setYaml] = React.useState('');\n    // React.useEffect(() => {\n    //   (async function getSchema() {\n    //     await k8sCreateSchema(model.kind).then(data => setTemplate(data));\n    //   })();\n    // }, []);\n\n    React.useEffect(() => {\n      console.log('model: ', model);\n      let type = pluralToKind.get(model.plural)['type'];\n      let url;\n      if (type === 'CustomResourceDefinition') {\n        url = getK8sAPIPath({ apiGroup: CustomResourceDefinitionModel.apiGroup, apiVersion: CustomResourceDefinitionModel.apiVersion });\n        url = `${document.location.origin}${url}/customresourcedefinitions/${model.plural}.${model.apiGroup}`;\n      } else {\n        const directory = kindToSchemaPath.get(model.kind)?.['directory'];\n        const file = kindToSchemaPath.get(model.kind)?.['file'];\n        url = `${document.location.origin}/api/resource/${directory}/${file}`;\n      }\n      const xhrTest = new XMLHttpRequest();\n      xhrTest.open('GET', url);\n      xhrTest.setRequestHeader('Authorization', `Bearer ${getAccessToken()}`);\n      xhrTest.onreadystatechange = function() {\n        if (xhrTest.readyState == XMLHttpRequest.DONE && xhrTest.status == 200) {\n          let template = xhrTest.response;\n          template = JSON.parse(template);\n          setTemplate(template);\n          setLoaded(true);\n        }\n      };\n      xhrTest.send();\n    }, []);\n\n    const [helpText, setHelpText] = React.useState(FORM_HELP_TEXT);\n    const next = `${resourcePathFromModel(model, match.params.appName, match.params.ns)}`;\n    let definition;\n\n    if (customResourceDefinition) {\n      definition = customResourceDefinition.data;\n    }\n\n    const [schema, FormComponent] = React.useMemo(() => {\n      const baseSchema = customResourceDefinition ? definition?.spec?.validation?.openAPIV3Schema ?? (definitionFor(model) as JSONSchema6) : template?.spec?.validation?.openAPIV3Schema ?? template;\n      return [_.defaultsDeep({}, DEFAULT_K8S_SCHEMA, _.omit(baseSchema, 'properties.status')), OperandForm];\n    }, [template, definition, model]);\n\n    const sample = React.useMemo<K8sResourceKind>(() => exampleForModel(definition, model), [definition, model]);\n\n    const pruneFunc = React.useCallback(data => prune(data, sample), [sample]);\n\n    const onChangeEditorType = React.useCallback(newMethod => {\n      setHelpText(newMethod === EditorType.Form ? FORM_HELP_TEXT : YAML_HELP_TEXT);\n    }, []);\n\n    return (\n      <StatusBox loaded={loaded} loadError={loadError} data={customResourceDefinition || template}>\n        {loaded || !customResourceDefinition ? (\n          <>\n            <div className=\"co-create-operand__header\">\n              <div className=\"co-create-operand__header-buttons\">\n                <BreadCrumbs breadcrumbs={[{ name: `Create ${model.label}`, path: window.location.pathname }]} />\n              </div>\n              <h1 className=\"co-create-operand__header-text\">{`Create ${model.label}`}</h1>\n              <p className=\"help-block\">{helpText}</p>\n            </div>\n            <SyncedEditor\n              context={{\n                formContext: { match, model, next, schema },\n                yamlContext: { next, match },\n              }}\n              FormEditor={FormComponent}\n              initialData={sample}\n              initialType={initialEditorType}\n              onChangeEditorType={onChangeEditorType}\n              prune={pruneFunc}\n              YAMLEditor={OperandYAML}\n            />\n          </>\n        ) : null}\n      </StatusBox>\n    );\n  }\n};\n\nconst stateToProps = (state: RootState, props: Omit<CreateDefaultPageProps, 'model'>) => {\n  let plural;\n  let model;\n  if (modelFor(pluralToKind.get(props.match.params.plural)['kind'])) {\n    model = modelFor(pluralToKind.get(props.match.params.plural)['kind']);\n    plural = referenceForModel(model);\n  }\n  return { model: state.k8s.getIn(['RESOURCES', 'models', plural]) || (state.k8s.getIn(['RESOURCES', 'models', model.kind]) as K8sKind), activePerspective: getActivePerspective(state) };\n};\n\nexport const CreateDefaultPage = connect(stateToProps)((props: CreateDefaultPageProps) => {\n  // const type = pluralToKind.get(props.match.params.plural)['type'];\n  // const resources =\n  //   type === 'CustomResourceDefinition' && props.model\n  //     ? [\n  //         {\n  //           kind: CustomResourceDefinitionModel.kind,\n  //           isList: false,\n  //           name: nameForModel(props.model),\n  //           prop: 'customResourceDefinition',\n  //           optional: true,\n  //         },\n  //       ]\n  //     : [];\n  return (\n    <>\n      <Helmet>\n        <title>{`Create ${kindForReference(props.match.params.plural)}`}</title>\n      </Helmet>\n      {/* <Firehose resources={resources}> */}\n      {/* FIXME(alecmerdler): Hack because `Firehose` injects props without TypeScript knowing about it */}\n      <CreateDefault {...(props as any)} model={props.model} match={props.match} initialEditorType={EditorType.Form} />\n      {/* </Firehose> */}\n    </>\n  );\n});\n\nexport type CreateDefaultProps = {\n  activePerspective: string;\n  customResourceDefinition?: FirehoseResult<CustomResourceDefinitionKind>;\n  initialEditorType: EditorType;\n  loaded: boolean;\n  loadError?: any;\n  match: RouterMatch<{ appName: string; ns: string; plural: K8sResourceKindReference }>;\n  model: K8sKind;\n};\n\nexport type CreateDefaultPageProps = {\n  match: RouterMatch<{ appName: string; ns: string; plural: K8sResourceKindReference }>;\n  model: K8sKind;\n};\n","// import * as React from 'react';\nimport * as _ from 'lodash';\nimport { K8sKind, CustomResourceDefinitionKind, referenceFor, referenceForModel } from '@console/internal/module/k8s';\n\nexport const parseALMExamples = (crd: CustomResourceDefinitionKind) => {\n  try {\n    return JSON.parse(crd?.metadata?.annotations?.['alm-examples'] ?? '[]');\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.warn('Unable to parse ALM expamples\\n', e);\n    return [];\n  }\n};\n\nexport const exampleForModel = (crd: CustomResourceDefinitionKind, model: K8sKind) => {\n  const almObj = parseALMExamples(crd);\n  return _.defaultsDeep(\n    {},\n    {\n      kind: model.kind,\n      apiVersion: model?.apiGroup ? `${model.apiGroup}/${model.apiVersion}` : `${model.apiVersion}`,\n    },\n    _.find(almObj, (s: CustomResourceDefinitionKind) => referenceFor(s) === referenceForModel(model)),\n  );\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AASA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAYA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAIA;;;;;;;;;;;;;AC3LA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAGA;;;;;A","sourceRoot":""}