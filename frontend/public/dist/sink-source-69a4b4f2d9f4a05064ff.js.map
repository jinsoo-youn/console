{"version":3,"file":"sink-source-69a4b4f2d9f4a05064ff.js","sources":["webpack:///./packages/dev-console/src/components/import/section/FormSection.scss?8752","webpack:///./packages/dev-console/src/components/import/section/FormSection.tsx","webpack:///./packages/knative-plugin/src/components/sink-source/SinkSource.tsx","webpack:///./packages/knative-plugin/src/components/sink-source/SinkSourceController.tsx","webpack:///./packages/knative-plugin/src/components/sink-source/SinkSourceModal.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport cx from 'classnames';\nimport { FormHelperText } from '@patternfly/react-core';\nimport './FormSection.scss';\n\nexport interface FormSectionProps {\n  title?: React.ReactNode;\n  subTitle?: React.ReactNode;\n  fullWidth?: boolean;\n  children: React.ReactNode;\n  flexLayout?: boolean;\n  extraMargin?: boolean;\n}\n\nconst flexStyle: React.CSSProperties = {\n  display: 'flex',\n  flex: 1,\n  flexDirection: 'column',\n  margin: 'var(--pf-global--spacer--md) 0',\n};\n\nconst FormSection: React.FC<FormSectionProps> = ({\n  title,\n  subTitle,\n  fullWidth,\n  children,\n  flexLayout,\n  extraMargin,\n}) => (\n  <div\n    className={cx('pf-c-form', {\n      'co-m-pane__form': !fullWidth,\n      'odc-form-section--extra-margin': extraMargin,\n    })}\n    style={flexLayout ? flexStyle : {}}\n  >\n    {title && <h2 className=\"odc-form-section__heading\">{title}</h2>}\n    {subTitle && <FormHelperText isHidden={false}>{subTitle}</FormHelperText>}\n    {children}\n  </div>\n);\n\nexport default FormSection;\n","import * as React from 'react';\nimport { Formik, FormikValues, FormikHelpers } from 'formik';\nimport { K8sResourceKind, k8sUpdate, referenceFor, modelFor } from '@console/internal/module/k8s';\nimport SinkSourceModal from './SinkSourceModal';\n\nexport interface SinkSourceProps {\n  source: K8sResourceKind;\n  cancel?: () => void;\n  close?: () => void;\n}\n\nconst SinkSource: React.FC<SinkSourceProps> = ({ source, cancel, close }) => {\n  const {\n    metadata: { namespace, name },\n    spec: {\n      sink: {\n        ref: { name: sinkName, apiVersion, kind },\n      },\n    },\n  } = source;\n\n  const initialValues = {\n    sink: {\n      ref: {\n        apiVersion: apiVersion || '',\n        kind: kind || '',\n        name: sinkName || '',\n      },\n    },\n  };\n  const handleSubmit = (values: FormikValues, action: FormikHelpers<FormikValues>) => {\n    const updatePayload = {\n      ...source,\n      ...(sinkName !== values?.sink?.ref?.name && { spec: { ...source.spec, ...values } }),\n    };\n    k8sUpdate(modelFor(referenceFor(source)), updatePayload)\n      .then(() => {\n        action.setSubmitting(false);\n        action.setStatus({ error: '' });\n        close();\n      })\n      .catch((err) => {\n        action.setStatus({ error: err.message || 'An error occurred. Please try again' });\n      });\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      onReset={cancel}\n      initialStatus={{ error: '' }}\n    >\n      {(props) => (\n        <SinkSourceModal {...props} namespace={namespace} resourceName={name} cancel={cancel} />\n      )}\n    </Formik>\n  );\n};\n\nexport default SinkSource;\n","import * as React from 'react';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { createModalLauncher, ModalComponentProps } from '@console/internal/components/factory';\nimport SinkSource from './SinkSource';\n\ntype SinkSourceControllerProps = {\n  source: K8sResourceKind;\n};\n\nconst SinkSourceController: React.FC<SinkSourceControllerProps> = ({ source, ...props }) => (\n  <SinkSource {...props} source={source} />\n);\n\ntype Props = SinkSourceControllerProps & ModalComponentProps;\n\nexport const sinkModalLauncher = createModalLauncher<Props>(SinkSourceController);\n\nexport default SinkSourceController;\n","import * as React from 'react';\nimport * as fuzzy from 'fuzzysearch';\nimport { FormikProps, FormikValues } from 'formik';\nimport {\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory/modal';\nimport { ResourceDropdownField } from '@console/shared';\nimport FormSection from '@console/dev-console/src/components/import/section/FormSection';\nimport { knativeServingResourcesServices } from '../../utils/get-knative-resources';\n\nexport interface SinkSourceModalProps {\n  namespace: string;\n  resourceName: string;\n  cancel?: () => void;\n}\n\ntype Props = FormikProps<FormikValues> & SinkSourceModalProps;\n\nconst SinkSourceModal: React.FC<Props> = ({\n  namespace,\n  resourceName,\n  handleSubmit,\n  cancel,\n  isSubmitting,\n  status,\n  setFieldValue,\n  setFieldTouched,\n  validateForm,\n  values,\n  initialValues,\n}) => {\n  const autocompleteFilter = (strText, item): boolean => fuzzy(strText, item?.props?.name);\n  const onSinkChange = React.useCallback(\n    (selectedValue, target) => {\n      const modelResource = target?.props?.model;\n      if (selectedValue) {\n        setFieldTouched('sink.ref.name', true);\n        setFieldValue('sink.ref.name', selectedValue);\n        if (modelResource) {\n          const { apiGroup, apiVersion, kind } = modelResource;\n          const sinkApiversion = `${apiGroup}/${apiVersion}`;\n          setFieldValue('sink.ref.apiVersion', sinkApiversion);\n          setFieldTouched('sink.ref.apiVersion', true);\n          setFieldValue('sink.ref.kind', kind);\n          setFieldTouched('sink.ref.kind', true);\n        }\n        validateForm();\n      }\n    },\n    [setFieldValue, setFieldTouched, validateForm],\n  );\n  const dirty = values?.sink?.ref?.name !== initialValues.sink.ref.name;\n  return (\n    <form className=\"modal-content modal-content--no-inner-scroll\" onSubmit={handleSubmit}>\n      <ModalTitle>Move Sink</ModalTitle>\n      <ModalBody>\n        <p>\n          Select a sink to move the event source <strong>{resourceName}</strong> to\n        </p>\n        <FormSection fullWidth>\n          <ResourceDropdownField\n            name=\"sink.ref.name\"\n            resources={knativeServingResourcesServices(namespace)}\n            dataSelector={['metadata', 'name']}\n            fullWidth\n            required\n            placeholder=\"Select a sink\"\n            showBadge\n            autocompleteFilter={autocompleteFilter}\n            onChange={onSinkChange}\n            autoSelect\n            selectedKey={values?.sink?.ref?.name}\n          />\n        </FormSection>\n      </ModalBody>\n      <ModalSubmitFooter\n        inProgress={isSubmitting}\n        submitText=\"Save\"\n        submitDisabled={!dirty}\n        cancel={cancel}\n        errorMessage={status.error}\n      />\n    </form>\n  );\n};\n\nexport default SinkSourceModal;\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;AACA;AACA;AAGA;AACA;AACA;AAIA;;;;;;;;;;;;;AC1CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAQA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAYA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5DA;AAEA;AACA;AAMA;AAAA;AAAA;AAEA;AAIA;AAEA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAKA;AACA;AACA;AAUA;;AAaA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;;AACA;AACA;AACA;AACA;AAeA;AASA;AAEA;;;;;A","sourceRoot":""}