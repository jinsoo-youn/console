{"version":3,"file":"node-7e913c3dd47dc2969473.js","sources":["webpack:///./packages/metal3-plugin/src/components/baremetal-nodes/BareMetalNodeDetails.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-nodes/BareMetalNodeDetailsOverview.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-nodes/BareMetalNodeDetailsPage.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-nodes/BareMetalNodeStatus.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-nodes/BareMetalNodesPage.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-nodes/BareMetalNodesTable.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-nodes/dashboard/BareMetalNodeDashboard.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-nodes/dashboard/BareMetalNodeDashboardContext.ts","webpack:///./packages/metal3-plugin/src/components/baremetal-nodes/dashboard/DetailsCard.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-nodes/dashboard/InventoryCard.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-nodes/dashboard/StatusCard.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-nodes/menu-actions.ts","webpack:///./packages/metal3-plugin/src/components/baremetal-nodes/table-filters.ts"],"sourcesContent":["import * as React from 'react';\nimport { NodeKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport NodeDetailsConditions from '@console/app/src/components/nodes/NodeDetailsConditions';\nimport NodeDetailsImages from '@console/app/src/components/nodes/NodeDetailsImages';\nimport { getNodeMachineName, getName, createBasicLookup } from '@console/shared';\nimport { BareMetalHostKind } from '../../types';\nimport { getNodeMaintenanceNodeName, getHostMachineName } from '../../selectors';\nimport BareMetalNodeDetailsOverview from './BareMetalNodeDetailsOverview';\n\ntype BareMetalNodeDetailsProps = {\n  obj: NodeKind;\n  hosts: BareMetalHostKind[];\n  nodeMaintenances: K8sResourceKind[];\n};\n\nconst BareMetalNodeDetails: React.FC<BareMetalNodeDetailsProps> = ({\n  obj: node,\n  hosts,\n  nodeMaintenances,\n}) => {\n  const maintenancesByNodeName = createBasicLookup(nodeMaintenances, getNodeMaintenanceNodeName);\n  const hostsByMachineName = createBasicLookup(hosts, getHostMachineName);\n  const host = hostsByMachineName[getNodeMachineName(node)];\n  const nodeMaintenance = maintenancesByNodeName[getName(node)];\n  return (\n    <>\n      <BareMetalNodeDetailsOverview node={node} host={host} nodeMaintenance={nodeMaintenance} />\n      <NodeDetailsConditions node={node} />\n      <NodeDetailsImages node={node} />\n    </>\n  );\n};\n\nexport default BareMetalNodeDetails;\n","import * as _ from 'lodash';\nimport * as React from 'react';\nimport { NodeKind, referenceForModel, K8sResourceKind } from '@console/internal/module/k8s';\nimport { useAccessReview, SectionHeading, LabelList, Kebab, ResourceLink, cloudProviderNames, cloudProviderID, Timestamp } from '@console/internal/components/utils';\nimport { NodeModel, MachineModel } from '@console/internal/models';\nimport { Button, pluralize } from '@patternfly/react-core';\nimport { PencilAltIcon } from '@patternfly/react-icons';\nimport { getNodeMachineNameAndNamespace, getNodeAddresses, getName, getNamespace } from '@console/shared';\nimport NodeIPList from '@console/app/src/components/nodes/NodeIPList';\nimport { BareMetalHostModel } from '../../models';\nimport { BareMetalHostKind } from '../../types';\nimport BareMetalNodeStatus from './BareMetalNodeStatus';\nimport { bareMetalNodeStatus } from '../../status/baremetal-node-status';\nimport { useTranslation } from 'react-i18next';\n\ntype BareMetalNodeDetailsOverviewProps = {\n  node: NodeKind;\n  host: BareMetalHostKind;\n  nodeMaintenance: K8sResourceKind;\n};\n\nconst BareMetalNodeDetailsOverview: React.FC<BareMetalNodeDetailsOverviewProps> = ({ node, host, nodeMaintenance }) => {\n  const status = bareMetalNodeStatus({ node, nodeMaintenance });\n  const machine = getNodeMachineNameAndNamespace(node);\n  const canUpdate = useAccessReview({\n    group: NodeModel.apiGroup,\n    resource: NodeModel.plural,\n    verb: 'patch',\n    name: node.metadata.name,\n    namespace: node.metadata.namespace,\n  });\n  const { t } = useTranslation();\n  return (\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', { 0: t('COMMON:MSG_LNB_MENU_100') })} />\n      <div className=\"row\">\n        <div className=\"col-md-6 col-xs-12\">\n          <dl className=\"co-m-pane__details\">\n            <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_112')}</dt>\n            <dd>{node.metadata.name || '-'}</dd>\n            <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_13')}</dt>\n            <dd>\n              <BareMetalNodeStatus {...status} nodeMaintenance={nodeMaintenance} />\n            </dd>\n            <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_65')}</dt>\n            <dd>{_.get(node, 'spec.externalID', '-')}</dd>\n            <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_119')}</dt>\n            <dd>\n              <NodeIPList ips={getNodeAddresses(node)} expand />\n            </dd>\n            <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_120')}</dt>\n            <dd>\n              <LabelList kind=\"Node\" labels={node.metadata.labels} />\n            </dd>\n            <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_113')}</dt>\n            <dd>\n              {canUpdate ? (\n                <Button variant=\"link\" type=\"button\" isInline onClick={Kebab.factory.ModifyTaints(NodeModel, node).callback}>\n                  {pluralize(_.size(node.spec.taints), 'Taint')}\n                  <PencilAltIcon className=\"co-icon-space-l pf-c-button-icon--plain\" />\n                </Button>\n              ) : (\n                pluralize(_.size(node.spec.taints), 'Taint')\n              )}\n            </dd>\n            <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_12')}</dt>\n            <dd>\n              {canUpdate ? (\n                <Button variant=\"link\" type=\"button\" isInline onClick={Kebab.factory.ModifyAnnotations(NodeModel, node).callback}>\n                  {pluralize(_.size(node.metadata.annotations), 'Annotation')}\n                  <PencilAltIcon className=\"co-icon-space-l pf-c-button-icon--plain\" />\n                </Button>\n              ) : (\n                pluralize(_.size(node.metadata.annotations), 'Annotation')\n              )}\n            </dd>\n            {machine.name && (\n              <>\n                <dt>Machine</dt>\n                <dd>\n                  <ResourceLink kind={referenceForModel(MachineModel)} name={machine.name} namespace={machine.namespace} />\n                </dd>\n              </>\n            )}\n            {host && (\n              <>\n                <dt>Bare Metal Host</dt>\n                <dd>\n                  <ResourceLink kind={referenceForModel(BareMetalHostModel)} name={getName(host)} namespace={getNamespace(host)} />\n                </dd>\n              </>\n            )}\n            <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_68')}</dt>\n            <dd>{cloudProviderNames([cloudProviderID(node)])}</dd>\n            {_.has(node, 'spec.unschedulable') && <dt>Unschedulable</dt>}\n            {_.has(node, 'spec.unschedulable') && <dd className=\"text-capitalize\">{_.get(node, 'spec.unschedulable', '-').toString()}</dd>}\n            <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_106')}</dt>\n            <dd>\n              <Timestamp timestamp={node.metadata.creationTimestamp} />\n            </dd>\n          </dl>\n        </div>\n        <div className=\"col-md-6 col-xs-12\">\n          <dl className=\"co-m-pane__details\">\n            <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_69')}</dt>\n            <dd className=\"text-capitalize\">{_.get(node, 'status.nodeInfo.operatingSystem', '-')}</dd>\n            <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_114')}</dt>\n            <dd>{_.get(node, 'status.nodeInfo.osImage', '-')}</dd>\n            <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_70')}</dt>\n            <dd className=\"text-uppercase\">{_.get(node, 'status.nodeInfo.architecture', '-')}</dd>\n            <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_71')}</dt>\n            <dd>{_.get(node, 'status.nodeInfo.kernelVersion', '-')}</dd>\n            <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_72')}</dt>\n            <dd>{_.get(node, 'status.nodeInfo.bootID', '-')}</dd>\n            <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_73')}</dt>\n            <dd>{_.get(node, 'status.nodeInfo.containerRuntimeVersion', '-')}</dd>\n            <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_74')}</dt>\n            <dd>{_.get(node, 'status.nodeInfo.kubeletVersion', '-')}</dd>\n            <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_75')}</dt>\n            <dd>{_.get(node, 'status.nodeInfo.kubeProxyVersion', '-')}</dd>\n          </dl>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BareMetalNodeDetailsOverview;\n","import * as React from 'react';\nimport Helmet from 'react-helmet';\nimport { navFactory, FirehoseResource } from '@console/internal/components/utils';\nimport { PodsPage } from '@console/internal/components/pod';\nimport { ResourceEventStream } from '@console/internal/components/events';\nimport { DetailsPage } from '@console/internal/components/factory';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { MachineModel, NodeModel } from '@console/internal/models';\nimport { connectToPlural } from '@console/internal/kinds';\nimport { ResourceDetailsPageProps } from '@console/internal/components/resource-list';\nimport { useFlag } from '@console/shared/src/hooks/flag';\nimport { NodeMaintenanceModel, BareMetalHostModel } from '../../models';\nimport { menuActionsCreator } from './menu-actions';\nimport BareMetalNodeDetails from './BareMetalNodeDetails';\nimport { NODE_MAINTENANCE_FLAG } from '../../features';\nimport BareMetalNodeDashboard from './dashboard/BareMetalNodeDashboard';\n\nconst { editYaml, events, pods } = navFactory;\n\nconst pages = [\n  {\n    href: '',\n    name: 'Overview',\n    component: BareMetalNodeDashboard,\n  },\n  {\n    href: 'details',\n    name: 'Details',\n    component: BareMetalNodeDetails,\n  },\n  editYaml(),\n  pods(({ obj }) => (\n    <PodsPage showTitle={false} fieldSelector={`spec.nodeName=${obj.metadata.name}`} />\n  )),\n  events(ResourceEventStream),\n];\n\ntype BareMetalNodeDetailsPageProps = ResourceDetailsPageProps & {\n  plural: string;\n};\n\nconst BareMetalNodeDetailsPage = connectToPlural((props: BareMetalNodeDetailsPageProps) => {\n  const hasNodeMaintenanceCapability = useFlag(NODE_MAINTENANCE_FLAG);\n  const resources: FirehoseResource[] = [\n    {\n      kind: referenceForModel(MachineModel),\n      namespaced: true,\n      isList: true,\n      prop: 'machines',\n    },\n    {\n      kind: referenceForModel(BareMetalHostModel),\n      namespaced: true,\n      isList: true,\n      prop: 'hosts',\n    },\n  ];\n\n  if (hasNodeMaintenanceCapability) {\n    resources.push({\n      kind: referenceForModel(NodeMaintenanceModel),\n      namespaced: false,\n      isList: true,\n      prop: 'nodeMaintenances',\n      optional: true,\n    });\n  }\n\n  const { modelRef, plural, kindObj, match } = props;\n  const { name } = match.params;\n  return (\n    <>\n      <Helmet>\n        <title>{`${name} · Details`}</title>\n      </Helmet>\n      <DetailsPage\n        {...props}\n        name={name}\n        menuActions={menuActionsCreator}\n        pages={pages}\n        resources={resources}\n        kind={modelRef}\n        customData={{ hasNodeMaintenanceCapability }}\n        breadcrumbsFor={() => [\n          {\n            name: `${kindObj.labelPlural}`,\n            path: `/k8s/cluster/${plural}`,\n          },\n          { name: `${kindObj.label} Details`, path: `${match.url}` },\n        ]}\n      />\n    </>\n  );\n});\n\nexport default (props) => <BareMetalNodeDetailsPage plural={NodeModel.plural} {...props} />;\n","import * as React from 'react';\nimport { Status, ProgressStatus } from '@console/shared';\nimport {\n  NODE_STATUS_UNDER_MAINTENANCE,\n  NODE_STATUS_STARTING_MAINTENANCE,\n  NODE_STATUS_STOPPING_MAINTENANCE,\n} from '../../constants';\nimport { BareMetalHostStatusProps } from '../types';\nimport MaintenancePopover from '../maintenance/MaintenancePopover';\n\nconst BareMetalNodeStatus: React.FC<BareMetalHostStatusProps> = ({\n  status,\n  title,\n  nodeMaintenance,\n  className,\n}) => {\n  const statusTitle = title || status;\n  switch (true) {\n    case [NODE_STATUS_STARTING_MAINTENANCE, NODE_STATUS_UNDER_MAINTENANCE].includes(status):\n      return (\n        <MaintenancePopover\n          title={statusTitle}\n          nodeMaintenance={nodeMaintenance}\n          className={className}\n        />\n      );\n    case status === NODE_STATUS_STOPPING_MAINTENANCE:\n      return <ProgressStatus title={statusTitle} className={className} />;\n    default:\n      return <Status status={status} title={statusTitle} className={className} />;\n  }\n};\n\nexport default BareMetalNodeStatus;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport Helmet from 'react-helmet';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { FirehoseResource } from '@console/internal/components/utils';\nimport { MachineModel, NodeModel } from '@console/internal/models';\nimport { createLookup, getName, getMachineNodeName } from '@console/shared';\nimport { MultiListPage } from '@console/internal/components/factory';\nimport { useFlag } from '@console/shared/src/hooks/flag';\nimport { getNodeMaintenanceNodeName, getHostMachineName } from '../../selectors';\nimport { BareMetalNodeBundle } from '../types';\nimport { NodeMaintenanceModel, BareMetalHostModel } from '../../models';\nimport { bareMetalNodeStatus } from '../../status/baremetal-node-status';\nimport BareMetalNodesTable from './BareMetalNodesTable';\nimport { bareMetalNodeStatusFilter } from './table-filters';\nimport { NODE_MAINTENANCE_FLAG } from '../../features';\nimport { ResourceLabelPlural } from '@console/internal/models/hypercloud/resource-plural';\nimport { useTranslation } from 'react-i18next';\n\nconst flattenResources = resources => {\n  // TODO(jtomasek): Remove loaded check once ListPageWrapper_ is updated to call flatten only\n  // when resources are loaded\n  const loaded = _.every(resources, resource => resource.loaded || (resource.optional && !_.isEmpty(resource.loadError)));\n  const {\n    hosts,\n    machines,\n    nodes: { data: nodesData },\n    nodeMaintenances,\n  } = resources;\n\n  if (!loaded) return [];\n\n  const maintenancesByNodeName = createLookup(nodeMaintenances, getNodeMaintenanceNodeName);\n  const hostsByMachineName = createLookup(hosts, getHostMachineName);\n  const machinesByNodeName = createLookup(machines, getMachineNodeName);\n\n  return nodesData.map(\n    (node): BareMetalNodeBundle => {\n      const nodeName = getName(node);\n      const machine = machinesByNodeName[nodeName];\n      const host = hostsByMachineName[getName(machine)];\n      const nodeMaintenance = maintenancesByNodeName[nodeName];\n      const status = bareMetalNodeStatus({ node, nodeMaintenance });\n      // TODO(jtomasek): metadata.name is needed to make 'name' textFilter work.\n      // Remove it when it is possible to pass custom textFilter as a function\n      return { metadata: { name: nodeName }, host, machine, node, nodeMaintenance, status };\n    },\n  );\n};\n\nconst BareMetalNodesPage: React.FC = props => {\n  const hasNodeMaintenanceCapability = useFlag(NODE_MAINTENANCE_FLAG);\n  const resources: FirehoseResource[] = [\n    {\n      kind: referenceForModel(BareMetalHostModel),\n      namespaced: true,\n      prop: 'hosts',\n    },\n    {\n      kind: referenceForModel(MachineModel),\n      namespaced: true,\n      prop: 'machines',\n    },\n    {\n      kind: NodeModel.kind,\n      namespaced: false,\n      prop: 'nodes',\n    },\n  ];\n\n  if (hasNodeMaintenanceCapability) {\n    resources.push({\n      kind: referenceForModel(NodeMaintenanceModel),\n      namespaced: false,\n      prop: 'nodeMaintenances',\n      optional: true,\n    });\n  }\n  const { t } = useTranslation();\n\n  return (\n    <div className=\"co-m-list\">\n      <Helmet>\n        <title>{ResourceLabelPlural(NodeModel, t)}</title>\n      </Helmet>\n      <MultiListPage {...props} rowFilters={[bareMetalNodeStatusFilter]} createButtonText=\"Add Host\" resources={resources} flatten={flattenResources} ListComponent={BareMetalNodesTable} title={ResourceLabelPlural(NodeModel, t)} />\n    </div>\n  );\n};\n\nexport default BareMetalNodesPage;\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { Kebab, ResourceLink } from '@console/internal/components/utils';\nimport { sortable } from '@patternfly/react-table';\nimport { DASH, getName, getUID, getNamespace, SecondaryStatus } from '@console/shared';\nimport { TableRow, TableData, Table, RowFunction, RowFunctionArgs } from '@console/internal/components/factory';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport NodeRoles from '@console/app/src/components/nodes/NodeRoles';\nimport { useFlag } from '@console/shared/src/hooks/flag';\nimport { MachineModel, NodeModel } from '@console/internal/models';\nimport { BareMetalNodeBundle } from '../types';\nimport { getHostBMCAddress } from '../../selectors';\nimport { BareMetalHostModel } from '../../models';\nimport { baremetalNodeSecondaryStatus } from '../../status/baremetal-node-status';\nimport { menuActions } from './menu-actions';\nimport BareMetalNodeStatus from './BareMetalNodeStatus';\nimport { NODE_MAINTENANCE_FLAG } from '../../features';\nimport { useTranslation } from 'react-i18next';\n\nconst tableColumnClasses = {\n  name: classNames('col-lg-3', 'col-md-4', 'col-sm-12', 'col-xs-12'),\n  status: classNames('col-lg-3', 'col-md-4', 'col-sm-6', 'hidden-xs'),\n  role: classNames('col-lg-2', 'col-md-4', 'hidden-sm', 'hidden-xs'),\n  machine: classNames('col-lg-2', 'hidden-md', 'hidden-sm', 'hidden-xs'),\n  address: classNames('col-lg-2', 'hidden-md', 'hidden-sm', 'hidden-xs'),\n  kebab: Kebab.columnClass,\n};\n\nconst BareMetalNodesTableHeader = t => [\n  {\n    title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n    sortField: 'node.metadata.name',\n    transforms: [sortable],\n    props: { className: tableColumnClasses.name },\n  },\n  {\n    title: t('COMMON:MSG_MAIN_TABLEHEADER_3'),\n    sortField: 'status.status',\n    transforms: [sortable],\n    props: { className: tableColumnClasses.status },\n  },\n  {\n    title: 'Role',\n    sortField: 'machine.metadata.labels[\"machine.openshift.io/cluster-api-machine-role\"]',\n    transforms: [sortable],\n    props: { className: tableColumnClasses.role },\n  },\n  {\n    title: t('COMMON:MSG_MAIN_TABLEHEADER_92'),\n    sortField: \"metadata.annotations['machine.openshift.io/machine']\",\n    transforms: [sortable],\n    props: { className: tableColumnClasses.machine },\n  },\n  {\n    title: t('COMMON:MSG_MAIN_TABLEHEADER_93'),\n    sortField: 'host.spec.bmc.address',\n    transforms: [sortable],\n    props: { className: tableColumnClasses.address },\n  },\n  {\n    title: '',\n    props: { className: tableColumnClasses.kebab },\n  },\n];\n\nconst BareMetalNodesTableRow: React.FC<RowFunctionArgs<BareMetalNodeBundle>> = ({ obj: { host, node, nodeMaintenance, machine, status }, index, key, style }) => {\n  const hasNodeMaintenanceCapability = useFlag(NODE_MAINTENANCE_FLAG);\n  const nodeName = getName(node);\n  const hostName = getName(host);\n  const namespace = getNamespace(host);\n  const address = getHostBMCAddress(host);\n  const uid = getUID(node);\n\n  return (\n    <TableRow id={uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses.name}>{node ? <ResourceLink kind=\"Node\" name={nodeName} /> : <ResourceLink kind={referenceForModel(BareMetalHostModel)} name={hostName} namespace={namespace} />}</TableData>\n      <TableData className={tableColumnClasses.status}>\n        <BareMetalNodeStatus {...status} nodeMaintenance={nodeMaintenance} />\n        <SecondaryStatus status={baremetalNodeSecondaryStatus({ node, nodeMaintenance, host })} />\n      </TableData>\n      <TableData className={tableColumnClasses.role}>\n        <NodeRoles node={node} />\n      </TableData>\n      <TableData className={tableColumnClasses.machine}>{machine ? <ResourceLink kind={referenceForModel(MachineModel)} name={getName(machine)} namespace={getNamespace(machine)} /> : DASH}</TableData>\n      <TableData className={tableColumnClasses.address}>{address}</TableData>\n      <TableData className={tableColumnClasses.kebab}>\n        <Kebab options={menuActions.map(action => action(NodeModel, node, null, { nodeMaintenance, hasNodeMaintenanceCapability }))} key={`kebab-for-${uid}`} id={`kebab-for-${uid}`} />\n      </TableData>\n    </TableRow>\n  );\n};\n\ntype BareMetalNodesTableProps = React.ComponentProps<typeof Table> & {\n  data: BareMetalNodeBundle[];\n};\n\nconst BareMetalNodesTable: React.FC<BareMetalNodesTableProps> = props => {\n  const { t } = useTranslation();\n  const row = React.useCallback<RowFunction<BareMetalNodeBundle>>(rowProps => <BareMetalNodesTableRow {...rowProps} />, []);\n  return <Table {...props} defaultSortField=\"node.metadata.name\" aria-label=\"Nodes\" Header={BareMetalNodesTableHeader.bind(null, t)} Row={row} virtualize />;\n};\n\nexport default BareMetalNodesTable;\n","import * as React from 'react';\nimport Dashboard from '@console/shared/src/components/dashboard/Dashboard';\nimport DashboardGrid from '@console/shared/src/components/dashboard/DashboardGrid';\nimport { NodeKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport UtilizationCard from '@console/app/src/components/nodes/node-dashboard/UtilizationCard';\nimport ActivityCard from '@console/app/src/components/nodes/node-dashboard/ActivityCard';\nimport {\n  NodeDashboardContext,\n  HealthCheck,\n} from '@console/app/src/components/nodes/node-dashboard/NodeDashboardContext';\nimport {\n  reducer,\n  initialState,\n  ActionType,\n} from '@console/app/src/components/nodes/node-dashboard/NodeDashboard';\nimport { createBasicLookup, getNodeMachineName, getName } from '@console/shared';\nimport { LimitRequested } from '@console/shared/src/components/dashboard/utilization-card/UtilizationItem';\n\nimport InventoryCard from './InventoryCard';\nimport DetailsCard from './DetailsCard';\nimport StatusCard from './StatusCard';\nimport { BareMetalHostKind } from '../../../types';\nimport { getHostMachineName, getNodeMaintenanceNodeName } from '../../../selectors';\nimport { BareMetalNodeDashboardContext } from './BareMetalNodeDashboardContext';\n\nconst leftCards = [{ Card: DetailsCard }, { Card: InventoryCard }];\nconst mainCards = [{ Card: StatusCard }, { Card: UtilizationCard }];\nconst rightCards = [{ Card: ActivityCard }];\n\nconst BareMetalNodeDashboard: React.FC<BareMetalNodeDashboardProps> = ({\n  obj,\n  hosts,\n  nodeMaintenances,\n}) => {\n  const [state, dispatch] = React.useReducer(reducer, initialState(obj));\n\n  if (obj !== state.obj) {\n    dispatch({ type: ActionType.OBJ, payload: obj });\n  }\n\n  const hostsByMachineName = createBasicLookup(hosts, getHostMachineName);\n  const host = hostsByMachineName[getNodeMachineName(obj)];\n  const maintenancesByNodeName = createBasicLookup(nodeMaintenances, getNodeMaintenanceNodeName);\n  const nodeMaintenance = maintenancesByNodeName[getName(obj)];\n\n  const setCPULimit = React.useCallback(\n    (payload: LimitRequested) => dispatch({ type: ActionType.CPU_LIMIT, payload }),\n    [],\n  );\n  const setMemoryLimit = React.useCallback(\n    (payload: LimitRequested) => dispatch({ type: ActionType.MEMORY_LIMIT, payload }),\n    [],\n  );\n  const setHealthCheck = React.useCallback(\n    (payload: HealthCheck) => dispatch({ type: ActionType.HEALTH_CHECK, payload }),\n    [],\n  );\n\n  const context = {\n    obj,\n    cpuLimit: state.cpuLimit,\n    memoryLimit: state.memoryLimit,\n    setCPULimit,\n    setMemoryLimit,\n    setHealthCheck,\n  };\n\n  const bmnContext = {\n    host,\n    nodeMaintenance,\n  };\n\n  return (\n    <NodeDashboardContext.Provider value={context}>\n      <BareMetalNodeDashboardContext.Provider value={bmnContext}>\n        <Dashboard>\n          <DashboardGrid mainCards={mainCards} leftCards={leftCards} rightCards={rightCards} />\n        </Dashboard>\n      </BareMetalNodeDashboardContext.Provider>\n    </NodeDashboardContext.Provider>\n  );\n};\n\nexport default BareMetalNodeDashboard;\n\ntype BareMetalNodeDashboardProps = {\n  obj: NodeKind;\n  hosts: BareMetalHostKind[];\n  nodeMaintenances: K8sResourceKind[];\n};\n","import * as React from 'react';\nimport { BareMetalHostKind } from '../../../types';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\n\nexport const BareMetalNodeDashboardContext = React.createContext<BareMetalNodeDashboardContext>({});\n\ntype BareMetalNodeDashboardContext = {\n  host?: BareMetalHostKind;\n  nodeMaintenance?: K8sResourceKind;\n};\n","import * as React from 'react';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DetailsBody from '@console/shared/src/components/dashboard/details-card/DetailsBody';\nimport DetailItem from '@console/shared/src/components/dashboard/details-card/DetailItem';\nimport DashboardCardLink from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardLink';\nimport { getNodeAddresses } from '@console/shared/src/selectors/node';\nimport { resourcePathFromModel, ResourceLink } from '@console/internal/components/utils';\nimport { NodeModel } from '@console/internal/models';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport NodeIPList from '@console/app/src/components/nodes/NodeIPList';\nimport { NodeDashboardContext } from '@console/app/src/components/nodes/node-dashboard/NodeDashboardContext';\nimport NodeRoles from '@console/app/src/components/nodes/NodeRoles';\nimport { useTranslation } from 'react-i18next';\n\nimport { BareMetalNodeDashboardContext } from './BareMetalNodeDashboardContext';\nimport { BareMetalHostModel } from '../../../models';\n\nconst DetailsCard: React.FC = () => {\n  const { obj } = React.useContext(NodeDashboardContext);\n  const { host } = React.useContext(BareMetalNodeDashboardContext);\n  const detailsLink = `${resourcePathFromModel(NodeModel, obj.metadata.name)}/details`;\n  const { t } = useTranslation();\n  return (\n    <DashboardCard data-test-id=\"details-card\">\n      <DashboardCardHeader>\n        <DashboardCardTitle>{t('COMMON:MSG_DETAILS_TAB_1')}</DashboardCardTitle>\n        <DashboardCardLink to={detailsLink}>{t('SINGLE:MSG_OVERVIEW_MAIN_POPOVEROPERATOR_ALL_1')}</DashboardCardLink>\n      </DashboardCardHeader>\n      <DashboardCardBody>\n        <DetailsBody>\n          <DetailItem isLoading={!obj} title={t('SINGLE:MSG_OVERVIEW_MAIN_CARDDETAILS_3')}>\n            {obj.metadata.name}\n          </DetailItem>\n          <DetailItem isLoading={!obj} title={t('SINGLE:MSG_OVERVIEW_MAIN_CARDDETAILS_4')}>\n            <NodeRoles node={obj} />\n          </DetailItem>\n          <DetailItem isLoading={!host} title={t('SINGLE:MSG_OVERVIEW_MAIN_CARDDETAILS_5')}>\n            <ResourceLink kind={referenceForModel(BareMetalHostModel)} name={host?.metadata?.name} namespace={host?.metadata?.namespace} />\n          </DetailItem>\n          <DetailItem isLoading={!obj} title={t('SINGLE:MSG_OVERVIEW_MAIN_CARDDETAILS_2')}>\n            <NodeIPList ips={getNodeAddresses(obj)} expand />\n          </DetailItem>\n        </DetailsBody>\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n};\n\nexport default DetailsCard;\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport InventoryItem from '@console/shared/src/components/dashboard/inventory-card/InventoryItem';\nimport { getPodStatusGroups } from '@console/shared/src/components/dashboard/inventory-card/utils';\nimport { PodModel, NodeModel } from '@console/internal/models';\nimport { NodeDashboardContext } from '@console/app/src/components/nodes/node-dashboard/NodeDashboardContext';\nimport { NodeInventoryItem } from '@console/app/src/components/nodes/node-dashboard/InventoryCard';\nimport { resourcePathFromModel } from '@console/internal/components/utils';\n\nimport { BareMetalNodeDashboardContext } from './BareMetalNodeDashboardContext';\nimport { getHostStorage, getHostNICs, getHostCPU } from '../../../selectors';\n\nimport { useTranslation } from 'react-i18next';\n\nconst InventoryCard: React.FC = () => {\n  const { obj } = React.useContext(NodeDashboardContext);\n  const { host } = React.useContext(BareMetalNodeDashboardContext);\n\n  const NICTitleComponent = React.useCallback(({ children }) => <Link to={`${resourcePathFromModel(NodeModel, obj.metadata.name)}/nics`}>{children}</Link>, [obj.metadata.name]);\n\n  const DiskTitleComponent = React.useCallback(({ children }) => <Link to={`${resourcePathFromModel(NodeModel, obj.metadata.name)}/disks`}>{children}</Link>, [obj.metadata.name]);\n  const { t } = useTranslation();\n  return (\n    <DashboardCard data-test-id=\"inventory-card\">\n      <DashboardCardHeader>\n        <DashboardCardTitle>{t('SINGLE:MSG_OVERVIEW_MAIN_CARDINVENTORY_1')}</DashboardCardTitle>\n      </DashboardCardHeader>\n      <DashboardCardBody>\n        <NodeInventoryItem nodeName={obj.metadata.name} model={PodModel} mapper={getPodStatusGroups} />\n        <InventoryItem isLoading={!obj} title={t('SINGLE:MSG_OVERVIEW_MAIN_CARDINVENTORY_3')} titlePlural=\"Images\" count={obj.status?.images?.length} error={!obj.status?.images} />\n        <InventoryItem title={t('SINGLE:MSG_OVERVIEW_MAIN_CARDINVENTORY_4')} isLoading={!obj} count={getHostStorage(host).length} TitleComponent={DiskTitleComponent} />\n        <InventoryItem title={t('SINGLE:MSG_OVERVIEW_MAIN_CARDINVENTORY_5')} isLoading={!obj} count={getHostNICs(host).length} TitleComponent={NICTitleComponent} />\n        <InventoryItem title={t('SINGLE:MSG_OVERVIEW_MAIN_CARDINVENTORY_6')} isLoading={!obj} count={getHostCPU(host).count} />\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n};\n\nexport default InventoryCard;\n","import * as React from 'react';\nimport { Gallery, GalleryItem } from '@patternfly/react-core';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport HealthBody from '@console/shared/src/components/dashboard/status-card/HealthBody';\nimport { NodeDashboardContext } from '@console/app/src/components/nodes/node-dashboard/NodeDashboardContext';\nimport { HealthChecksItem } from '@console/app/src/components/nodes/node-dashboard/NodeHealth';\n\nimport { useTranslation } from 'react-i18next';\nimport { BareMetalNodeDashboardContext } from './BareMetalNodeDashboardContext';\nimport { bareMetalNodeStatus } from '../../../status/baremetal-node-status';\nimport BareMetalNodeStatus from '../BareMetalNodeStatus';\nimport NodeAlerts from '@console/app/src/components/nodes/node-dashboard/NodeAlerts';\n\nconst StatusCard: React.FC = () => {\n  const { obj } = React.useContext(NodeDashboardContext);\n  const { nodeMaintenance } = React.useContext(BareMetalNodeDashboardContext);\n  const status = bareMetalNodeStatus({ node: obj, nodeMaintenance });\n  const { t } = useTranslation();\n  return (\n    <DashboardCard gradient data-test-id=\"status-card\">\n      <DashboardCardHeader>\n        <DashboardCardTitle>{t('COMMON:MSG_MAIN_TABLEHEADER_3')}</DashboardCardTitle>\n      </DashboardCardHeader>\n      <DashboardCardBody isLoading={!obj}>\n        <HealthBody>\n          <Gallery className=\"co-overview-status__health\" gutter=\"md\">\n            <GalleryItem>\n              <BareMetalNodeStatus\n                {...status}\n                nodeMaintenance={nodeMaintenance}\n                className=\"co-node-health__status\"\n              />\n            </GalleryItem>\n            <GalleryItem>\n              <HealthChecksItem />\n            </GalleryItem>\n          </Gallery>\n        </HealthBody>\n        <NodeAlerts />\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n};\n\nexport default StatusCard;\n","import { Kebab, KebabOption, asAccessReview } from '@console/internal/components/utils';\nimport {\n  MarkAsSchedulable,\n  MarkAsUnschedulable,\n  Delete,\n} from '@console/app/src/components/nodes/menu-actions';\nimport { K8sKind, NodeKind, K8sResourceKind, MachineKind } from '@console/internal/module/k8s';\nimport { getName } from '@console/shared';\nimport { startNodeMaintenanceModal } from '../modals/StartNodeMaintenanceModal';\nimport stopNodeMaintenanceModal from '../modals/StopNodeMaintenanceModal';\nimport { NodeMaintenanceModel } from '../../models';\nimport { findNodeMaintenance } from '../../selectors';\n\ntype ActionArgs = {\n  nodeMaintenance?: K8sResourceKind;\n  hasNodeMaintenanceCapability?: boolean;\n};\n\nexport const SetNodeMaintenance = (\n  kindObj: K8sKind,\n  node: NodeKind,\n  resources: {},\n  { hasNodeMaintenanceCapability, nodeMaintenance }: ActionArgs,\n): KebabOption => {\n  const nodeName = getName(node);\n  return {\n    hidden: !nodeName || !hasNodeMaintenanceCapability || !!nodeMaintenance,\n    label: 'Start Maintenance',\n    callback: () => startNodeMaintenanceModal({ nodeName }),\n  };\n};\n\nexport const RemoveNodeMaintenance = (\n  kindObj: K8sKind,\n  node: NodeKind,\n  resources: {},\n  { hasNodeMaintenanceCapability, nodeMaintenance }: ActionArgs,\n): KebabOption => {\n  const nodeName = getName(node);\n  return {\n    hidden: !nodeName || !hasNodeMaintenanceCapability || !nodeMaintenance,\n    label: 'Stop Maintenance',\n    callback: () => stopNodeMaintenanceModal(nodeMaintenance),\n    accessReview:\n      nodeMaintenance && asAccessReview(NodeMaintenanceModel, nodeMaintenance, 'delete'),\n  };\n};\n\nconst { ModifyLabels, ModifyAnnotations, Edit } = Kebab.factory;\nexport const menuActions = [\n  SetNodeMaintenance,\n  RemoveNodeMaintenance,\n  MarkAsSchedulable,\n  MarkAsUnschedulable,\n  ModifyLabels,\n  ModifyAnnotations,\n  Edit,\n  Delete,\n];\n\ntype ExtraResources = {\n  machines: MachineKind[];\n  hosts: NodeKind[];\n  nodeMaintenances: K8sResourceKind[];\n};\n\nexport const menuActionsCreator = (\n  kindObj: K8sKind,\n  node: NodeKind,\n  { nodeMaintenances }: ExtraResources,\n  { hasNodeMaintenanceCapability },\n) => {\n  const nodeMaintenance = findNodeMaintenance(nodeMaintenances, getName(node));\n  return menuActions.map((action) => {\n    return action(kindObj, node, null, {\n      hasNodeMaintenanceCapability,\n      nodeMaintenance,\n    });\n  });\n};\n","import * as _ from 'lodash';\nimport { RowFilter } from '@console/internal/components/filter-toolbar';\nimport { NODE_STATUS_TITLES } from '../../constants';\nimport { BareMetalNodeBundle } from '../types';\n\nconst statesToFilterMap = Object.freeze({\n  ready: {\n    title: 'Ready',\n    states: ['Ready'],\n  },\n  notReady: {\n    title: 'Not Ready',\n    states: ['Not Ready'],\n  },\n  maintenance: {\n    title: 'Maintenance',\n    states: Object.keys(NODE_STATUS_TITLES),\n  },\n});\n\nexport const getBareMetalNodeFilterStatus = (bundle: BareMetalNodeBundle): string => {\n  return _.findKey(statesToFilterMap, ({ states }) => states.includes(bundle.status.status));\n};\n\nexport const bareMetalNodeStatusFilter: RowFilter = {\n  filterGroupName: 'Status',\n  type: 'bare-metal-node-status',\n  reducer: getBareMetalNodeFilterStatus,\n  items: _.map(statesToFilterMap, ({ title }, id) => ({ id, title })),\n  filter: (groups, bundle: BareMetalNodeBundle) => {\n    const status = getBareMetalNodeFilterStatus(bundle);\n    return (\n      groups.selected.has(status) || !_.includes(groups.all, status) || _.isEmpty(groups.selected)\n    );\n  },\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAQA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAMA;AACA;AAGA;AACA;AAMA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;;;;;;;;;;;;;AC/HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AASA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;;;;;;;;;;;;;AC/FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAMA;AAEA;AAMA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAGA;AAEA;;;;;;;;;;;;;AC1FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAIA;AAMA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACtGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAKA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AAIA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAKA;AAEA;;;;;;;;;;;;;ACnFA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AAMA;AAEA;;;;;;;;;;;;;ACnDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;;;;;;;;;;;;;AC1CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AACA;AAIA;AAIA;AAEA;;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AACA;AACA;AACA;AAOA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC/EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;;;;A","sourceRoot":""}