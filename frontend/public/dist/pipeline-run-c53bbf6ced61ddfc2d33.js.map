{"version":3,"file":"pipeline-run-c53bbf6ced61ddfc2d33.js","sources":["webpack:///./packages/dev-console/src/components/pipelineruns/status/LinkedPipelineRunTaskStatus.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/status/PipelineBars.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/status/PipelineTaskStatus.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/status/TaskStatusTooltip.scss?a429","webpack:///./packages/dev-console/src/components/pipelineruns/status/TaskStatusTooltip.tsx","webpack:///./packages/dev-console/src/components/pipelines/detail-page-tabs/pipeline-details/PipelineVisualization.tsx","webpack:///./packages/dev-console/src/components/pipelines/resource-overview/DynamicResourceLinkList.scss?7299","webpack:///./packages/dev-console/src/components/pipelines/resource-overview/DynamicResourceLinkList.tsx","webpack:///./public/components/hypercloud/pipeline-run.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { resourcePathFromModel } from '@console/internal/components/utils';\nimport { Pipeline, PipelineRun } from '../../../utils/pipeline-augment';\nimport { PipelineRunModel } from '../../../models';\nimport { PipelineTaskStatus } from './PipelineTaskStatus';\n\nexport interface LinkedPipelineRunTaskStatusProps {\n  pipeline?: Pipeline;\n  pipelineRun: PipelineRun;\n}\n\n/**\n * Will attempt to render a link to the log file associated with the pipelineRun if it has the data.\n * If it does not, it'll just render the pipeline status.\n */\nconst LinkedPipelineRunTaskStatus: React.FC<LinkedPipelineRunTaskStatusProps> = ({\n  pipeline,\n  pipelineRun,\n}) => {\n  const pipelineStatus = (\n    <PipelineTaskStatus\n      key={pipelineRun.metadata?.name}\n      pipeline={pipeline}\n      pipelinerun={pipelineRun}\n    />\n  );\n\n  if (pipelineRun.metadata?.name && pipelineRun.metadata?.namespace) {\n    return (\n      <Link\n        to={`${resourcePathFromModel(\n          PipelineRunModel,\n          pipelineRun.metadata.name,\n          pipelineRun.metadata.namespace,\n        )}/logs`}\n      >\n        {pipelineStatus}\n      </Link>\n    );\n  }\n\n  return pipelineStatus;\n};\n\nexport default LinkedPipelineRunTaskStatus;\n","import * as React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport HorizontalStackedBars from '../../charts/HorizontalStackedBars';\nimport {\n  getTaskStatus,\n  runStatus,\n  getRunStatusColor,\n  Pipeline,\n  PipelineRun,\n} from '../../../utils/pipeline-augment';\nimport TaskStatusToolTip from './TaskStatusTooltip';\n\nexport interface PipelineBarProps {\n  pipelinerun: PipelineRun;\n  pipeline?: { data: Pipeline };\n}\n\nexport const PipelineBars: React.FC<PipelineBarProps> = ({ pipelinerun, pipeline }) => {\n  const taskStatus = getTaskStatus(pipelinerun, pipeline?.data);\n\n  return (\n    <Tooltip content={<TaskStatusToolTip taskStatus={taskStatus} />}>\n      <HorizontalStackedBars\n        height=\"1em\"\n        inline\n        values={Object.keys(runStatus).map((status) => ({\n          color: getRunStatusColor(runStatus[status]).pftoken.value,\n          name: status,\n          size: taskStatus[runStatus[status]],\n        }))}\n      />\n    </Tooltip>\n  );\n};\n","import * as React from 'react';\nimport { Firehose } from '@console/internal/components/utils';\nimport { PipelineRun, Pipeline } from '../../../utils/pipeline-augment';\nimport { PipelineModel } from '../../../models';\nimport { PipelineBars } from './PipelineBars';\n\nexport interface PipelineTaskStatusProps {\n  pipelinerun: PipelineRun;\n  pipeline?: Pipeline;\n}\n\nexport const PipelineTaskStatus: React.FC<PipelineTaskStatusProps> = ({\n  pipelinerun,\n  pipeline,\n}) => {\n  return !pipeline && pipelinerun.spec?.pipelineRef?.name && pipelinerun.metadata?.namespace ? (\n    <Firehose\n      resources={[\n        {\n          name: pipelinerun.spec.pipelineRef.name,\n          namespace: pipelinerun.metadata.namespace,\n          kind: PipelineModel.kind,\n          isList: false,\n          prop: 'pipeline',\n        },\n      ]}\n    >\n      <PipelineBars pipelinerun={pipelinerun} />\n    </Firehose>\n  ) : (\n    <PipelineBars pipelinerun={pipelinerun} pipeline={{ data: pipeline }} />\n  );\n};\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { TaskStatus, runStatus, getRunStatusColor } from '../../../utils/pipeline-augment';\nimport './TaskStatusTooltip.scss';\n\ninterface TaskStatusToolTipProps {\n  taskStatus: TaskStatus;\n}\n\nconst TaskStatusToolTip: React.FC<TaskStatusToolTipProps> = ({ taskStatus }) => {\n  return (\n    <div className=\"odc-task-status-tooltip\">\n      {Object.keys(runStatus).map((status) => {\n        const { message, pftoken } = getRunStatusColor(status);\n        return taskStatus[status] ? (\n          <React.Fragment key={status}>\n            <div\n              className=\"odc-task-status-tooltip__legend\"\n              style={{ background: pftoken.value }}\n            />\n            <div>\n              {status === runStatus.PipelineNotStarted || status === runStatus.FailedToStart\n                ? message\n                : `${taskStatus[status]} ${message}`}\n            </div>\n          </React.Fragment>\n        ) : null;\n      })}\n    </div>\n  );\n};\n\nexport default TaskStatusToolTip;\n","import * as React from 'react';\nimport { Alert } from '@patternfly/react-core';\nimport { Pipeline, PipelineRun } from '../../../../utils/pipeline-augment';\nimport PipelineTopologyGraph from '../../pipeline-topology/PipelineTopologyGraph';\nimport { getTopologyNodesEdges } from '../../pipeline-topology/utils';\nimport { PipelineLayout } from '../../pipeline-topology/const';\n\nimport './PipelineVisualization.scss';\n\ninterface PipelineTopologyVisualizationProps {\n  pipeline: Pipeline;\n  pipelineRun?: PipelineRun;\n}\n\nconst PipelineVisualization: React.FC<PipelineTopologyVisualizationProps> = ({\n  pipeline,\n  pipelineRun,\n}) => {\n  const { nodes, edges } = getTopologyNodesEdges(pipeline, pipelineRun);\n\n  if (nodes.length === 0 && edges.length === 0) {\n    // Nothing to render\n    // TODO: Confirm wording with UX; ODC-1860\n    return <Alert variant=\"info\" isInline title=\"This Pipeline has no tasks to visualize.\" />;\n  }\n\n  return (\n    <div className=\"odc-pipeline-visualization\">\n      <PipelineTopologyGraph\n        id={pipelineRun?.metadata?.name || pipeline.metadata.name}\n        nodes={nodes}\n        edges={edges}\n        layout={PipelineLayout.DAGRE_VIEWER}\n      />\n    </div>\n  );\n};\n\nexport default PipelineVisualization;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { ResourceLink } from '@console/internal/components/utils';\nimport { K8sKind, referenceForModel } from '@console/internal/module/k8s';\n\nimport './DynamicResourceLinkList.scss';\n\nexport type ResourceModelLink = {\n  model: K8sKind;\n  name: string;\n  displayName?: string;\n};\n\ntype DynamicResourceLinkListProps = {\n  links: ResourceModelLink[];\n  namespace: string;\n  title: string;\n};\n\nconst DynamicResourceLinkList: React.FC<DynamicResourceLinkListProps> = ({\n  links = [],\n  namespace,\n  title,\n}) => {\n  if (links.length === 0) {\n    return null;\n  }\n  return (\n    <div className=\"odc-dynamic-resource-link-list\">\n      <dl>\n        <dt>{title}</dt>\n        <dd>\n          {links.map(({ name, model, displayName = '' }) => {\n            const kind = referenceForModel(model);\n            let linkName = name;\n            if (displayName.length > 0 && name !== displayName) {\n              linkName += ` (${displayName})`;\n            }\n            return (\n              <div key={`${kind}/${name}`}>\n                <ResourceLink\n                  kind={kind}\n                  name={name}\n                  displayName={linkName}\n                  namespace={namespace}\n                  title={name}\n                  inline\n                />\n              </div>\n            );\n          })}\n        </dd>\n      </dl>\n    </div>\n  );\n};\n\nexport default DynamicResourceLinkList;\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\n\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from '../factory';\nimport { Kebab, detailsPage, Timestamp, navFactory, ResourceKebab, ResourceLink, ResourceSummary, SectionHeading } from '../utils';\nimport { PipelineRunModel, PipelineModel, PipelineResourceModel } from '../../models';\nimport { pipelineRunDuration } from '../../../packages/dev-console/src/utils/pipeline-utils';\nimport { PipelineRun, pipelineRefExists, PipelineRunReferenceResource } from '../../../packages/dev-console/src/utils/pipeline-augment';\nimport { pipelineRunFilterReducer } from '../../../packages/dev-console/src/utils/pipeline-filter-reducer';\nimport LinkedPipelineRunTaskStatus from '../../../packages/dev-console/src/components/pipelineruns/status/LinkedPipelineRunTaskStatus';\nimport { getPipelineRunKebabActions } from '../../../packages/dev-console/src/utils/pipeline-actions';\nimport { PipelineRunLogsWithActiveTask } from '../../../packages/dev-console/src/components/pipelineruns/detail-page-tabs/PipelineRunLogs';\nimport PipelineRunVisualization from '../../../packages/dev-console/src/components/pipelineruns/detail-page-tabs/PipelineRunVisualization';\nimport ResourceLinkList from '../../../packages/dev-console/src/components/pipelines/resource-overview/ResourceLinkList';\nimport TriggeredBySection from '../../../packages/dev-console/src/components/pipelineruns/detail-page-tabs/TriggeredBySection';\nimport { Status } from '@console/shared';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\nimport { ResourceLabel } from '../../models/hypercloud/resource-plural';\n\nconst kind = PipelineRunModel.kind;\n\nconst tableColumnClasses = [\n  '', // name\n  '', // namespace\n  'pf-m-hidden pf-m-visible-on-sm', // status\n  'pf-m-hidden pf-m-visible-on-lg', // task status\n  'pf-m-hidden pf-m-visible-on-lg', // started\n  'pf-m-hidden pf-m-visible-on-xl', // duration\n  Kebab.columnClass,\n];\n\n\nconst PipelineRunTableHeader = (t?: TFunction) => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_2'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_3'),\n      sortField: 'status.conditions[0].reason',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_78'),\n      sortField: 'status.conditions[0].reason',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: t('COMMON:MSG_DETAILS_TABDETAILS_CONTAINERS_TABLEHEADER_6'),\n      sortField: 'status.startTime',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_81'),\n      sortField: 'status.completionTime',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[5] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[6] },\n    },\n  ];\n};\n\nPipelineRunTableHeader.displayName = 'PipelineRunTableHeader';\n\n\nconst PipelineRunTableRow: RowFunction<PipelineRun> = ({ obj: pipelineRun, index, key, style }) => {\n  return (\n    <TableRow id={pipelineRun.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={pipelineRun.metadata.name} namespace={pipelineRun.metadata.namespace} title={pipelineRun.metadata.uid} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={pipelineRun.metadata.namespace} title={pipelineRun.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Status status={pipelineRunFilterReducer(pipelineRun)} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <LinkedPipelineRunTaskStatus pipelineRun={pipelineRun} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <Timestamp timestamp={pipelineRun.status && pipelineRun.status.startTime} />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>{pipelineRunDuration(pipelineRun)}</TableData>\n      <TableData className={tableColumnClasses[6]}>\n        <ResourceKebab actions={getPipelineRunKebabActions()} kind={kind} resource={pipelineRun} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport const PipelineRunDetailsList: React.FC<PipelineRunDetailsListProps> = ({ pipelineRun }) => {\n  const unfilteredResources = pipelineRun.spec.resources as PipelineRunReferenceResource[];\n  const renderResources =\n    unfilteredResources\n      ?.filter(({ resourceRef }) => !!resourceRef)\n      .map((resource) => resource.resourceRef.name) || [];\n\n  return (\n    <div className=\"col-sm-6 odc-pipeline-run-details__customDetails\">\n      {pipelineRefExists(pipelineRun) && (\n        <dl>\n          <dt>Pipeline</dt>\n          <dd>\n            <ResourceLink\n              kind={referenceForModel(PipelineModel)}\n              name={pipelineRun.spec.pipelineRef.name}\n              namespace={pipelineRun.metadata.namespace}\n            />\n          </dd>\n        </dl>\n      )}\n      <TriggeredBySection pipelineRun={pipelineRun} />\n      <br />\n      <ResourceLinkList\n        model={PipelineResourceModel}\n        links={renderResources}\n        namespace={pipelineRun.metadata.namespace}\n      />\n    </div>\n  );\n}\n\nconst PipelineRunDetails: React.FC<PipelineRunDetailsProps> = ({ obj: pipelineRun }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', { 0: ResourceLabel(pipelineRun, t) })} />\n        <PipelineRunVisualization pipelineRun={pipelineRun} />\n        <div className=\"row\">\n          <div className=\"col-lg-6\">\n            <ResourceSummary resource={pipelineRun} />\n          </div>\n          <div className=\"col-lg-6\">\n            <PipelineRunDetailsList pipelineRun={pipelineRun} />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\n\nconst { details, editYaml } = navFactory;\n\nconst filters = [\n  {\n    filterGroupName: 'Status',\n    type: 'pipeline-run-status',\n    reducer: pipelineRunFilterReducer,\n    items: [\n      { id: 'Succeeded', title: 'Succeeded' },\n      { id: 'Running', title: 'Running' },\n      { id: 'Failed', title: 'Failed' },\n      { id: 'Cancelled', title: 'Cancelled' },\n    ],\n  },\n];\n\nexport const PipelineRuns: React.FC = props => {\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"Pipeline Runs\" Header={PipelineRunTableHeader.bind(null, t)} Row={PipelineRunTableRow} virtualize />;\n}\n\nexport const PipelineRunsPage: React.FC<PipelineRunsPageProps> = props => {\n  const { t } = useTranslation();\n\n  return <ListPage\n    title={t('COMMON:MSG_LNB_MENU_60')}\n    createButtonText={t('COMMON:MSG_MAIN_CREATEBUTTON_1', { 0: t('COMMON:MSG_LNB_MENU_60') })}\n    canCreate={true}\n    ListComponent={PipelineRuns}\n    kind={kind}\n    rowFilters={filters}\n    {...props}\n  />;\n}\n\nexport const PipelineRunsDetailsPage: React.FC<PipelineRunsDetailsPageProps> = props => <DetailsPage {...props} kind={kind} menuActions={getPipelineRunKebabActions()} pages={[details(detailsPage(PipelineRunDetails)), editYaml(), {\n  href: 'logs',\n  path: 'logs/:name?',\n  name: 'Logs',\n  component: PipelineRunLogsWithActiveTask,\n},]} />;\n\n\ntype PipelineRunDetailsListProps = {\n  pipelineRun: PipelineRun;\n};\n\ntype PipelineRunsPageProps = {\n  canCreate?: boolean;\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: any;\n};\n\ntype PipelineRunDetailsProps = {\n  obj: PipelineRun;\n};\n\ntype PipelineRunsDetailsPageProps = {\n  match: any;\n};"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAOA;;;AAGA;AACA;;AAIA;AAQA;AACA;AAWA;AAEA;AACA;AAEA;;;;;;;;;;;;;AC7CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAOA;AAOA;AACA;AAEA;AAEA;AAIA;AACA;AACA;AACA;AAIA;;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAOA;;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;;;;;;;;;;;;AChCA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAMA;AACA;AAGA;AACA;AAEA;AAIA;AAEA;AACA;AAIA;AAGA;AAEA;;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAOA;;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAQA;AAEA;;;;;;;;;;;;ACtCA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAcA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;AAKA;AAEA;;;;;;;;;;;;;ACvsourceRoot":""}