{"version":3,"file":"pipelinerun-resource-list-a920abee3de5ea0b4156.js","sources":["webpack:///./packages/dev-console/src/components/charts/HorizontalStackedBars.scss?1886","webpack:///./packages/dev-console/src/components/charts/HorizontalStackedBars.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/PipelineRunsResourceList.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/list-page/PipelineRunHeader.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/list-page/PipelineRunList.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/list-page/PipelineRunRow.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/list-page/pipelinerun-table.ts","webpack:///./packages/dev-console/src/components/pipelines/detail-page-tabs/PipelineRuns.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport classNames from 'classnames';\nimport './HorizontalStackedBars.scss';\n\nexport type StackedValue = {\n  color: string;\n  name: string;\n  size: number;\n};\n\nexport type HorizontalStackedBarsProps = {\n  barGap?: number;\n  height?: number | string;\n  inline?: boolean;\n  values: StackedValue[];\n  width?: number | string;\n};\n\nconst HorizontalStackedBars: React.FC<HorizontalStackedBarsProps> = ({\n  barGap,\n  height,\n  inline,\n  values,\n  width,\n}) => {\n  return (\n    <div\n      className={classNames('odc-horizontal-stacked-bars', { 'is-inline': inline })}\n      style={{ height, width, ['--bar-gap' as any]: barGap && `${barGap}px` }}\n    >\n      <div className=\"odc-horizontal-stacked-bars__bars\">\n        {values.map(({ color, name, size }) => (\n          <div\n            key={name}\n            className=\"odc-horizontal-stacked-bars__data-bar\"\n            style={{\n              background: color,\n              flexGrow: size,\n            }}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default HorizontalStackedBars;\n","import * as React from 'react';\nimport { getBadgeFromType } from '@console/shared';\nimport { ListPage } from '@console/internal/components/factory';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { PipelineRunModel } from '../../models';\nimport { runFilters } from '../pipelines/detail-page-tabs/PipelineRuns';\nimport PipelineRunsList from './list-page/PipelineRunList';\n\nconst PipelineRunsResourceList: React.FC<Omit<\n  React.ComponentProps<typeof ListPage>,\n  'canCreate' | 'kind' | 'ListComponent' | 'rowFilters'\n>> = (props) => {\n  return (\n    <ListPage\n      {...props}\n      canCreate={false}\n      kind={referenceForModel(PipelineRunModel)}\n      ListComponent={PipelineRunsList}\n      rowFilters={runFilters}\n      badge={getBadgeFromType(PipelineRunModel.badge)}\n    />\n  );\n};\n\nexport default PipelineRunsResourceList;\n","import { sortable } from '@patternfly/react-table';\nimport { tableColumnClasses } from './pipelinerun-table';\n\nconst PipelineRunHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Status',\n      sortField: 'status.conditions[0].reason',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Task Status',\n      sortField: 'status.conditions[0].reason',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: 'Started',\n      sortField: 'status.startTime',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: 'Duration',\n      sortField: 'status.completionTime',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[5] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[6] },\n    },\n  ];\n};\n\nexport default PipelineRunHeader;\n","import * as React from 'react';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { Table } from '@console/internal/components/factory';\nimport { PipelineRunModel } from '../../../models';\nimport PipelineRunHeader from './PipelineRunHeader';\nimport PipelineRunRow from './PipelineRunRow';\n\nexport const PipelineRunList: React.FC = (props) => (\n  <Table\n    {...props}\n    aria-label={PipelineRunModel.labelPlural}\n    defaultSortField=\"status.startTime\"\n    defaultSortOrder={SortByDirection.desc}\n    Header={PipelineRunHeader}\n    Row={PipelineRunRow}\n    virtualize\n  />\n);\n\nexport default PipelineRunList;\n","import * as React from 'react';\nimport { Status } from '@console/shared';\nimport { TableRow, TableData, RowFunction } from '@console/internal/components/factory';\nimport { ResourceLink, Timestamp } from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { pipelineRunFilterReducer } from '../../../utils/pipeline-filter-reducer';\nimport { getPipelineRunKebabActions } from '../../../utils/pipeline-actions';\nimport { pipelineRunDuration } from '../../../utils/pipeline-utils';\nimport { PipelineRun } from '../../../utils/pipeline-augment';\nimport { PipelineRunModel } from '../../../models';\nimport LinkedPipelineRunTaskStatus from '../status/LinkedPipelineRunTaskStatus';\nimport { ResourceKebabWithUserLabel } from '../triggered-by';\nimport { tableColumnClasses } from './pipelinerun-table';\n\nconst pipelinerunReference = referenceForModel(PipelineRunModel);\n\nconst PipelineRunRow: RowFunction<PipelineRun> = ({ obj, index, key, style }) => {\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={pipelinerunReference}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n          title={obj.metadata.name}\n          data-test-id={obj.metadata.name}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[1]}>\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Status status={pipelineRunFilterReducer(obj)} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <LinkedPipelineRunTaskStatus pipelineRun={obj} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <Timestamp timestamp={obj.status && obj.status.startTime} />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>{pipelineRunDuration(obj)}</TableData>\n      <TableData className={tableColumnClasses[6]}>\n        <ResourceKebabWithUserLabel\n          actions={getPipelineRunKebabActions()}\n          kind={pipelinerunReference}\n          resource={obj}\n        />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport default PipelineRunRow;\n","import { Kebab } from '@console/internal/components/utils';\n\nexport const tableColumnClasses = [\n  '', // name\n  '', // namespace\n  'pf-m-hidden pf-m-visible-on-sm', // status\n  'pf-m-hidden pf-m-visible-on-lg', // task status\n  'pf-m-hidden pf-m-visible-on-lg', // started\n  'pf-m-hidden pf-m-visible-on-xl', // duration\n  Kebab.columnClass,\n];\n","import * as React from 'react';\nimport { ListPage } from '@console/internal/components/factory';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport PipelineRunsList from '../../pipelineruns/list-page/PipelineRunList';\nimport {\n  pipelineRunFilterReducer,\n  pipelineRunStatusFilter,\n} from '../../../utils/pipeline-filter-reducer';\nimport { ListFilterId, ListFilterLabels } from '../../../utils/pipeline-utils';\nimport { PipelineRunModel } from '../../../models';\n\nexport const runFilters = [\n  {\n    type: 'pipelinerun-status',\n    selected: [\n      ListFilterId.Succeeded,\n      ListFilterId.Running,\n      ListFilterId.Failed,\n      ListFilterId.Cancelled,\n    ],\n    reducer: pipelineRunFilterReducer,\n    items: [\n      { id: ListFilterId.Succeeded, title: ListFilterLabels[ListFilterId.Succeeded] },\n      { id: ListFilterId.Running, title: ListFilterLabels[ListFilterId.Running] },\n      { id: ListFilterId.Failed, title: ListFilterLabels[ListFilterId.Failed] },\n      { id: ListFilterId.Cancelled, title: ListFilterLabels[ListFilterId.Cancelled] },\n    ],\n    filter: pipelineRunStatusFilter,\n  },\n];\n\ninterface PipelineRunsProps {\n  obj: any;\n}\n\nconst PipelineRuns: React.FC<PipelineRunsProps> = ({ obj }) => (\n  <ListPage\n    showTitle={false}\n    canCreate={false}\n    kind={referenceForModel(PipelineRunModel)}\n    namespace={obj.metadata.namespace}\n    selector={{\n      'tekton.dev/pipeline': obj.metadata.name,\n    }}\n    ListComponent={PipelineRunsList}\n    rowFilters={runFilters}\n  />\n);\n\nexport default PipelineRuns;\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAgBA;AAOA;AAKA;AAMA;AACA;AACA;AAMA;AAEA;;;;;;;;;;;;;AC9CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAUA;AAEA;;;;;;;;;;;;;ACxBA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AChDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAYA;;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAQA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAQA;AAEA;;;;;;;;;;;;;ACpDA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAOA;AACA;AAMA;;;;;A","sourceRoot":""}