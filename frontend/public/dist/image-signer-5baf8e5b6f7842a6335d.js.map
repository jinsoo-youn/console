{"version":3,"file":"image-signer-5baf8e5b6f7842a6335d.js","sources":["webpack:///./public/components/hypercloud/factory/table.tsx","webpack:///./public/components/hypercloud/image-signer-key.tsx","webpack:///./public/components/hypercloud/image-signer.tsx","webpack:///./public/components/hypercloud/targets-table.tsx","webpack:///./public/components/hypercloud/utils/copy-to-clipboard.tsx"],"sourcesContent":["import * as _ from 'lodash-es';\nimport * as PropTypes from 'prop-types';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport { getNodeRoles, getMachinePhase, nodeMemory, nodeCPU, nodeFS, nodePods } from '@console/shared';\nimport * as UIActions from '../../../actions/ui';\nimport { alertStateOrder, silenceFiringAlertsOrder, silenceStateOrder } from '../../../reducers/monitoring';\nimport { ingressValidHosts } from '../../ingress';\nimport { convertToBaseValue, EmptyBox, StatusBox, WithScrollContainer } from '../../utils';\nimport { getClusterOperatorStatus, getClusterOperatorVersion, getJobTypeAndCompletions, getTemplateInstanceStatus, K8sResourceKind, K8sResourceKindReference, NodeKind, planExternalName, PodKind, podPhase, podReadiness, podRestarts, serviceCatalogStatus, serviceClassDisplayName, MachineKind } from '../../../module/k8s';\n\nimport {\n  IRowData, // eslint-disable-line no-unused-vars\n  IExtraData, // eslint-disable-line no-unused-vars\n  Table as PfTable,\n  TableHeader,\n  TableBody,\n  TableGridBreakpoint,\n  SortByDirection,\n  OnSelect,\n} from '@patternfly/react-table';\n\nimport { CellMeasurerCache, CellMeasurer } from 'react-virtualized';\n\nimport { AutoSizer, VirtualTableBody, WindowScroller } from '@patternfly/react-virtualized-extension';\n\nimport { tableFilters } from '../../factory/table-filters';\n\nconst rowFiltersToFilterFuncs = rowFilters => {\n  return (rowFilters || []).filter(f => f.type && _.isFunction(f.filter)).reduce((acc, f) => ({ ...acc, [f.type]: f.filter }), {});\n};\n\nconst getAllTableFilters = rowFilters => ({\n  ...tableFilters,\n  ...rowFiltersToFilterFuncs(rowFilters),\n});\n\nconst getFilteredRows = (_filters, rowFilters, objects) => {\n  if (_.isEmpty(_filters)) {\n    return objects;\n  }\n\n  const allTableFilters = getAllTableFilters(rowFilters);\n  let filteredObjects = objects;\n  _.each(_filters, (value, name) => {\n    const filter = allTableFilters[name];\n    if (_.isFunction(filter)) {\n      filteredObjects = _.filter(filteredObjects, o => filter(value, o));\n    }\n  });\n\n  return filteredObjects;\n};\n\nconst filterPropType = (props, propName, componentName) => {\n  if (!props) {\n    return;\n  }\n\n  const allTableFilters = getAllTableFilters(props.rowFilters);\n  for (const key of _.keys(props[propName])) {\n    if (key in allTableFilters || key === 'loadTest') {\n      continue;\n    }\n    return new Error(`Invalid prop '${propName}' in '${componentName}'. '${key}' is not a valid filter type!`);\n  }\n};\n\nconst sorts = {\n  alertStateOrder,\n  daemonsetNumScheduled: daemonset => _.toInteger(_.get(daemonset, 'status.currentNumberScheduled')),\n  dataSize: resource => _.size(_.get(resource, 'data')) + _.size(_.get(resource, 'binaryData')),\n  ingressValidHosts,\n  serviceCatalogStatus,\n  jobCompletions: job => getJobTypeAndCompletions(job).completions,\n  jobType: job => getJobTypeAndCompletions(job).type,\n  nodeReadiness: (node: NodeKind) => {\n    let readiness = _.get(node, 'status.conditions');\n    readiness = _.find(readiness, { type: 'Ready' });\n    return _.get(readiness, 'status');\n  },\n  numReplicas: resource => _.toInteger(_.get(resource, 'status.replicas')),\n  planExternalName,\n  namespaceCPU: (ns: K8sResourceKind): number => UIActions.getNamespaceMetric(ns, 'cpu'),\n  namespaceMemory: (ns: K8sResourceKind): number => UIActions.getNamespaceMetric(ns, 'memory'),\n  podCPU: (pod: PodKind): number => UIActions.getPodMetric(pod, 'cpu'),\n  podMemory: (pod: PodKind): number => UIActions.getPodMetric(pod, 'memory'),\n  podPhase,\n  podReadiness: (pod: PodKind): number => podReadiness(pod).readyCount,\n  podRestarts,\n  pvStorage: pv => _.toInteger(convertToBaseValue(pv?.spec?.capacity?.storage)),\n  pvcStorage: pvc => _.toInteger(convertToBaseValue(pvc?.status?.capacity?.storage)),\n  serviceClassDisplayName,\n  silenceFiringAlertsOrder,\n  silenceStateOrder,\n  string: val => JSON.stringify(val),\n  number: val => _.toNumber(val),\n  getClusterOperatorStatus,\n  getClusterOperatorVersion,\n  getTemplateInstanceStatus,\n  nodeRoles: (node: NodeKind): string => {\n    const roles = getNodeRoles(node);\n    return roles.sort().join(', ');\n  },\n  nodeMemory: (node: NodeKind): number => nodeMemory(node),\n  nodeCPU: (node: NodeKind): number => nodeCPU(node),\n  nodeFS: (node: NodeKind): number => nodeFS(node),\n  machinePhase: (machine: MachineKind): string => getMachinePhase(machine),\n  nodePods: (node: NodeKind): number => nodePods(node),\n};\n\nconst stateToProps = ({ UI }, { customSorts = {}, data = [], defaultSortField = 'metadata.name', defaultSortFunc = undefined, defaultSortOrder = SortByDirection.asc, filters = {}, loaded = false, reduxID = null, reduxIDs = null, staticFilters = [{}], rowFilters = [] }) => {\n  const allFilters = staticFilters ? Object.assign({}, filters, ...staticFilters) : filters;\n  const newData = getFilteredRows(allFilters, rowFilters, data);\n\n  const listId = reduxIDs ? reduxIDs.join(',') : reduxID;\n  // Only default to 'metadata.name' if no `defaultSortFunc`\n  const currentSortField = UI.getIn(['listSorts', listId, 'field'], defaultSortFunc ? undefined : defaultSortField);\n  const currentSortFunc = UI.getIn(['listSorts', listId, 'func'], defaultSortFunc);\n  const currentSortOrder = UI.getIn(['listSorts', listId, 'orderBy'], defaultSortOrder);\n\n  if (loaded) {\n    let sortBy: string | Function = 'metadata.name';\n    if (currentSortField) {\n      sortBy = resource => sorts.string(_.get(resource, currentSortField, ''));\n    } else if (currentSortFunc && customSorts[currentSortFunc]) {\n      // Sort resources by a function in the 'customSorts' prop\n      sortBy = customSorts[currentSortFunc];\n    } else if (currentSortFunc && sorts[currentSortFunc]) {\n      // Sort resources by a function in the 'sorts' object\n      sortBy = sorts[currentSortFunc];\n    }\n\n    const getSortValue = resource => {\n      const val = _.isFunction(sortBy) ? sortBy(resource) : _.get(resource, sortBy as string);\n      return val ?? '';\n    };\n    newData?.sort((a, b) => {\n      const lang = navigator.languages[0] || navigator.language;\n      // Use `localCompare` with `numeric: true` for a natural sort order (e.g., pv-1, pv-9, pv-10)\n      const compareOpts = { numeric: true, ignorePunctuation: true };\n      const aValue = getSortValue(a);\n      const bValue = getSortValue(b);\n      const result: number = Number.isFinite(aValue) && Number.isFinite(bValue) ? aValue - bValue : `${aValue}`.localeCompare(`${bValue}`, lang, compareOpts);\n      if (result !== 0) {\n        return currentSortOrder === SortByDirection.asc ? result : result * -1;\n      }\n\n      // Use name as a secondary sort for a stable sort.\n      const aName = a?.metadata?.name || '';\n      const bName = b?.metadata?.name || '';\n      return aName.localeCompare(bName, lang, compareOpts);\n    });\n  }\n\n  return {\n    currentSortField,\n    currentSortFunc,\n    currentSortOrder,\n    data: newData,\n    unfilteredData: data,\n    listId,\n  };\n};\n\n// Common table row/columns helper SFCs for implementing accessible data grid\nexport const TableRow: React.SFC<TableRowProps> = ({ id, index, trKey, style, className, ...props }) => {\n  return <tr {...props} data-id={id} data-index={index} data-test-rows=\"resource-row\" data-key={trKey} style={style} className={className} role=\"row\" />;\n};\nTableRow.displayName = 'TableRow';\nexport type TableRowProps = {\n  id: any;\n  index: number;\n  trKey: string;\n  style: object;\n  className?: string;\n};\n\nexport const TableData: React.SFC<TableDataProps> = ({ className, ...props }) => {\n  return <td {...props} className={className} role=\"gridcell\" />;\n};\nTableData.displayName = 'TableData';\nexport type TableDataProps = {\n  id?: string;\n  className?: string;\n};\n\nconst TableWrapper: React.SFC<TableWrapperProps> = ({ virtualize, ariaLabel, ariaRowCount, ...props }) => {\n  return virtualize ? <div {...props} role=\"grid\" aria-label={ariaLabel} aria-rowcount={ariaRowCount} /> : <React.Fragment {...props} />;\n};\nexport type TableWrapperProps = {\n  virtualize: boolean;\n  ariaLabel: string;\n  ariaRowCount: number | undefined;\n};\n\nconst VirtualBody: React.SFC<VirtualBodyProps> = props => {\n  const { customData, Row, height, isScrolling, onChildScroll, data, columns, scrollTop, reveal, width } = props;\n\n  const cellMeasurementCache = new CellMeasurerCache({\n    fixedWidth: true,\n    minHeight: 44,\n    keyMapper: rowIndex => _.get(props.data[rowIndex], 'metadata.uid', rowIndex),\n  });\n\n  const rowRenderer = ({ index, isScrolling: scrolling, isVisible, key, style, parent }) => {\n    const rowArgs = {\n      obj: data[index],\n      index,\n      columns,\n      isScrolling: scrolling,\n      key,\n      style,\n      customData,\n      reveal,\n    };\n\n    const row = Row(rowArgs);\n\n    // do not render non visible elements (this excludes overscan)\n    if (!isVisible) {\n      return null;\n    }\n    return (\n      <CellMeasurer cache={cellMeasurementCache} columnIndex={0} key={key} parent={parent} rowIndex={index}>\n        {row}\n      </CellMeasurer>\n    );\n  };\n\n  return <VirtualTableBody autoHeight className=\"pf-c-table pf-m-compact pf-m-border-rows pf-c-virtualized pf-c-window-scroller\" deferredMeasurementCache={cellMeasurementCache} rowHeight={cellMeasurementCache.rowHeight} height={height || 0} isScrolling={isScrolling} onScroll={onChildScroll} overscanRowCount={10} columns={columns} rows={data} rowCount={data.length} rowRenderer={rowRenderer} scrollTop={scrollTop} width={width} />;\n};\n\nexport type RowFunctionArgs<T = any, C = any> = {\n  obj: T;\n  index: number;\n  columns: any[];\n  isScrolling: boolean;\n  key: string;\n  style: object;\n  customData?: C;\n  reveal?: boolean;\n};\n\nexport type RowFunction<T = any, C = any> = (args: RowFunctionArgs<T, C>) => React.ReactElement;\n\nexport type VirtualBodyProps = {\n  customData?: any;\n  Row: RowFunction;\n  height: number;\n  isScrolling: boolean;\n  onChildScroll: (...args) => any;\n  data: any[];\n  columns: any[];\n  scrollTop: number;\n  width: number;\n  expand: boolean;\n  reveal?: boolean;\n};\n\nexport type TableProps = {\n  customData?: any;\n  customSorts?: { [key: string]: any };\n  data?: any[];\n  defaultSortFunc?: string;\n  defaultSortField?: string;\n  defaultSortOrder?: SortByDirection;\n  filters?: { [key: string]: any };\n  Header: (...args) => any[];\n  loadError?: string | Object;\n  Row?: RowFunction;\n  Rows?: (...args) => any[];\n  'aria-label': string;\n  onSelect?: OnSelect;\n  virtualize?: boolean;\n  NoDataEmptyMsg?: React.ComponentType<{}>;\n  EmptyMsg?: React.ComponentType<{}>;\n  loaded?: boolean;\n  reduxID?: string;\n  reduxIDs?: string[];\n  label?: string;\n};\n\ntype TablePropsFromState = {};\n\ntype TablePropsFromDispatch = {};\n\ntype TableOptionProps = {\n  UI: any;\n};\n\ntype ComponentProps = {\n  data?: any[];\n  filters?: Object;\n  selected?: any;\n  match?: any;\n  kindObj?: K8sResourceKindReference;\n};\n\nexport const Table = connect<TablePropsFromState, TablePropsFromDispatch, TableProps, TableOptionProps>(stateToProps, { sortList: UIActions.sortList }, null, {\n  areStatesEqual: ({ UI: next }, { UI: prev }) => next.get('listSorts') === prev.get('listSorts'),\n})(\n  class TableInner extends React.Component<TableInnerProps, TableInnerState> {\n    static propTypes = {\n      customData: PropTypes.any,\n      data: PropTypes.array,\n      unfilteredData: PropTypes.array,\n      NoDataEmptyMsg: PropTypes.func,\n      EmptyMsg: PropTypes.func,\n      expand: PropTypes.bool,\n      fieldSelector: PropTypes.string,\n      filters: filterPropType,\n      Header: PropTypes.func.isRequired,\n      Row: PropTypes.func,\n      Rows: PropTypes.func,\n      loaded: PropTypes.bool,\n      loadError: PropTypes.oneOfType([PropTypes.object, PropTypes.string]),\n      mock: PropTypes.bool,\n      namespace: PropTypes.string,\n      reduxID: PropTypes.string,\n      reduxIDs: PropTypes.array,\n      selector: PropTypes.object,\n      staticFilters: PropTypes.array,\n      virtualize: PropTypes.bool,\n      currentSortField: PropTypes.string,\n      currentSortFunc: PropTypes.string,\n      currentSortOrder: PropTypes.any,\n      defaultSortField: PropTypes.string,\n      defaultSortFunc: PropTypes.string,\n      label: PropTypes.string,\n      listId: PropTypes.string,\n      sortList: PropTypes.func,\n      onSelect: PropTypes.func,\n      scrollElement: PropTypes.oneOf([PropTypes.object, PropTypes.func]),\n    };\n    _columnShift: number;\n\n    constructor(props) {\n      super(props);\n      const componentProps: ComponentProps = _.pick(props, ['data', 'filters', 'selected', 'match', 'kindObj']);\n      const columns = props.Header(componentProps);\n      const { currentSortField, currentSortFunc, currentSortOrder } = props;\n\n      this._columnShift = props.onSelect ? 1 : 0; //shift indexes by 1 if select provided\n      this._applySort = this._applySort.bind(this);\n      this._onSort = this._onSort.bind(this);\n      this._handleResize = _.debounce(this._handleResize.bind(this), 100);\n\n      let sortBy = {};\n      if (currentSortField && currentSortOrder) {\n        const columnIndex = _.findIndex(columns, { sortField: currentSortField });\n        if (columnIndex > -1) {\n          sortBy = { index: columnIndex + this._columnShift, direction: currentSortOrder };\n        }\n      } else if (currentSortFunc && currentSortOrder) {\n        const columnIndex = _.findIndex(columns, { sortFunc: currentSortFunc });\n        if (columnIndex > -1) {\n          sortBy = { index: columnIndex + this._columnShift, direction: currentSortOrder };\n        }\n      }\n      this.state = { sortBy };\n    }\n\n    componentDidMount() {\n      const componentProps: ComponentProps = _.pick(this.props, ['data', 'filters', 'selected', 'match', 'kindObj']);\n      const columns = this.props.Header(componentProps);\n      const sp = new URLSearchParams(window.location.search);\n      const columnIndex = _.findIndex(columns, { title: sp.get('sortBy') });\n\n      if (columnIndex > -1) {\n        const sortOrder = sp.get('orderBy') || SortByDirection.asc;\n        const column = columns[columnIndex];\n        this._applySort(column.sortField, column.sortFunc, sortOrder, column.title);\n        this.setState({\n          sortBy: {\n            index: columnIndex + this._columnShift,\n            direction: sortOrder,\n          },\n        });\n      }\n\n      // re-render after resize\n      window.addEventListener('resize', this._handleResize);\n    }\n\n    componentWillUnmount() {\n      window.removeEventListener('resize', this._handleResize);\n    }\n\n    _handleResize() {\n      this.forceUpdate();\n    }\n\n    _applySort(sortField, sortFunc, direction, columnTitle) {\n      const { sortList, listId, currentSortFunc } = this.props;\n      const applySort = _.partial(sortList, listId);\n      applySort(sortField, sortFunc || currentSortFunc, direction, columnTitle);\n    }\n\n    _onSort(event, index, direction) {\n      event.preventDefault();\n      const componentProps: ComponentProps = _.pick(this.props, ['data', 'filters', 'selected', 'match', 'kindObj']);\n      const columns = this.props.Header(componentProps);\n      const sortColumn = columns[index - this._columnShift];\n      this._applySort(sortColumn.sortField, sortColumn.sortFunc, direction, sortColumn.title);\n      this.setState({\n        sortBy: {\n          index,\n          direction,\n        },\n      });\n    }\n\n    render() {\n      const { scrollElement, Rows, Row, expand, label, mock, onSelect, selectedResourcesForKind, 'aria-label': ariaLabel, reveal, virtualize = true, customData, gridBreakPoint = TableGridBreakpoint.none, Header } = this.props;\n      const { sortBy } = this.state;\n      const componentProps: any = _.pick(this.props, ['data', 'filters', 'selected', 'match', 'kindObj']);\n      const columns = Header(componentProps);\n      const ariaRowCount = componentProps.data && componentProps.data.length;\n      const scrollNode = typeof scrollElement === 'function' ? scrollElement() : scrollElement;\n      const renderVirtualizedTable = scrollContainer => (\n        <WindowScroller scrollElement={scrollContainer}>\n          {({ height, isScrolling, registerChild, onChildScroll, scrollTop }) => (\n            <AutoSizer disableHeight>\n              {({ width }) => (\n                <div ref={registerChild}>\n                  <VirtualBody Row={Row} reveal={reveal} customData={customData} height={height} isScrolling={isScrolling} onChildScroll={onChildScroll} data={componentProps.data} columns={columns} scrollTop={scrollTop} width={width} expand={expand} />\n                </div>\n              )}\n            </AutoSizer>\n          )}\n        </WindowScroller>\n      );\n      const children = mock ? (\n        <EmptyBox label={label} />\n      ) : (\n        <TableWrapper virtualize={virtualize} ariaLabel={ariaLabel} ariaRowCount={ariaRowCount}>\n          <PfTable cells={columns} rows={virtualize ? [] : Rows({ componentProps, selectedResourcesForKind, customData })} gridBreakPoint={gridBreakPoint} onSort={this._onSort} onSelect={onSelect} sortBy={sortBy} className=\"pf-m-compact pf-m-border-rows\" role={virtualize ? 'presentation' : 'grid'} aria-label={virtualize ? null : ariaLabel}>\n            <TableHeader />\n            {!virtualize && <TableBody />}\n          </PfTable>\n          {virtualize && (scrollNode ? renderVirtualizedTable(scrollNode) : <WithScrollContainer>{renderVirtualizedTable}</WithScrollContainer>)}\n        </TableWrapper>\n      );\n      return (\n        <div className=\"co-m-table-grid co-m-table-grid--bordered\">\n          {mock ? (\n            children\n          ) : (\n            <StatusBox skeleton={<div className=\"loading-skeleton--table\" />} {...this.props}>\n              {children}\n            </StatusBox>\n          )}\n        </div>\n      );\n    }\n  },\n);\n\nexport type TableInnerProps = {\n  'aria-label': string;\n  customData?: any;\n  currentSortField?: string;\n  currentSortFunc?: string;\n  currentSortOrder?: any;\n  data?: any[];\n  defaultSortField?: string;\n  defaultSortFunc?: string;\n  unfilteredData?: any[];\n  NoDataEmptyMsg?: React.ComponentType<{}>;\n  EmptyMsg?: React.ComponentType<{}>;\n  expand?: boolean;\n  fieldSelector?: string;\n  filters?: { [name: string]: any };\n  Header: (...args) => any[];\n  label?: string;\n  listId?: string;\n  loaded?: boolean;\n  loadError?: string | Object;\n  mock?: boolean;\n  namespace?: string;\n  reveal?: boolean;\n  reduxID?: string;\n  reduxIDs?: string[];\n  Row?: RowFunction;\n  Rows?: (...args) => any[];\n  selector?: Object;\n  sortList?: (listId: string, field: string, func: any, orderBy: string, column: string) => any;\n  selectedResourcesForKind?: string[];\n  onSelect?: (event: React.MouseEvent, isSelected: boolean, rowIndex: number, rowData: IRowData, extraData: IExtraData) => void;\n  staticFilters?: any[];\n  rowFilters?: any[];\n  virtualize?: boolean;\n  gridBreakPoint?: 'grid' | 'grid-md' | 'grid-lg' | 'grid-xl' | 'grid-2xl';\n  scrollElement?: HTMLElement | (() => HTMLElement);\n};\n\nexport type TableInnerState = {\n  sortBy: object;\n};\n","import * as React from 'react';\nimport { Base64 } from 'js-base64';\nimport { saveAs } from 'file-saver';\nimport { EyeIcon, EyeSlashIcon } from '@patternfly/react-icons';\nimport { Button } from '@patternfly/react-core';\n\nimport { CopyToClipboard } from './utils/copy-to-clipboard';\nimport { EmptyBox, SectionHeading } from '../utils';\nimport { useTranslation } from 'react-i18next';\n\nexport const MaskedData: React.FC<{}> = () => (\n  <>\n    <span className=\"sr-only\">Value hidden</span>\n    <span aria-hidden=\"true\">&bull;&bull;&bull;&bull;&bull;</span>\n  </>\n);\n\nconst downloadBinary = (key, value) => {\n  const rawBinary = window.atob(value);\n  const rawBinaryLength = rawBinary.length;\n  const array = new Uint8Array(new ArrayBuffer(rawBinaryLength));\n  for (let i = 0; i < rawBinaryLength; i++) {\n    array[i] = rawBinary.charCodeAt(i);\n  }\n  const blob = new Blob([array], { type: 'data:application/octet-stream;' });\n  saveAs(blob, key);\n};\n\nexport const ConfigMapBinaryData: React.FC<DownloadValueProps> = ({ data }) => {\n  const dl = [];\n  Object.keys(data || {})\n    .sort()\n    .forEach(k => {\n      const value = data[k];\n      dl.push(<dt key={`${k}-k`}>{k}</dt>);\n      dl.push(\n        <dd key={`${k}-v`}>\n          <Button className=\"pf-m-link--align-left\" type=\"button\" onClick={() => downloadBinary(k, value)} variant=\"link\">\n            Save File\n          </Button>\n        </dd>,\n      );\n    });\n  return dl.length ? <dl>{dl}</dl> : <EmptyBox label=\"Binary Data\" />;\n};\nConfigMapBinaryData.displayName = 'ConfigMapBinaryData';\n\nexport const ConfigMapData: React.FC<ConfigMapDataProps> = ({ data, label }) => {\n  const dl = [];\n  Object.keys(data || {})\n    .sort()\n    .forEach(k => {\n      const value = data[k];\n      dl.push(<dt key={`${k}-k`}>{k}</dt>);\n      dl.push(\n        <dd key={`${k}-v`}>\n          <CopyToClipboard value={value} />\n        </dd>,\n      );\n    });\n  return dl.length ? <dl>{dl}</dl> : <EmptyBox label={label} />;\n};\nConfigMapData.displayName = 'ConfigMapData';\n\nexport const SecretValue: React.FC<SecretValueProps> = ({ isTable, value, reveal, encoded = true }) => {\n  if (!value) {\n    return <span className=\"text-muted\">No value</span>;\n  }\n\n  const decodedValue = encoded ? Base64.decode(value) : value;\n  // const decodedValue = value;\n  const visibleValue = reveal ? decodedValue : <MaskedData />;\n  return <CopyToClipboard value={decodedValue} visibleValue={visibleValue} isTable={isTable} />;\n};\nSecretValue.displayName = 'SecretValue';\n\nexport const SecretData: React.FC<SecretDataProps> = ({ data, title, isTable }) => {\n  const [reveal, setReveal] = React.useState(false);\n  const { t } = useTranslation();\n\n  const dl = [];\n  Object.keys(data || {})\n    .sort()\n    .forEach(k => {\n      dl.push(<dt key={`${k}-k`}>{`Root ${k.toUpperCase()}`}</dt>);\n      dl.push(<dd key={`${k}-v`}>{k === 'id' ? <SecretValue encoded={false} value={data[k]} reveal={true} isTable={isTable} /> : <SecretValue value={data[k]} reveal={reveal} isTable={isTable} />}</dd>);\n    });\n\n  return (\n    <>\n      <SectionHeading text={title}>\n        {dl.length ? (\n          <Button type=\"button\" onClick={() => setReveal(!reveal)} variant=\"link\" className=\"pf-m-link--align-right\">\n            {reveal ? (\n              <>\n                <EyeSlashIcon className=\"co-icon-space-r\" />\n                {`${t('COMMON:MSG_DETAILS_TABSIGNERKEY_3')}`}\n              </>\n            ) : (\n              <>\n                <EyeIcon className=\"co-icon-space-r\" />\n                {`${t('COMMON:MSG_DETAILS_TABSIGNERKEY_2')}`}\n              </>\n            )}\n          </Button>\n        ) : null}\n      </SectionHeading>\n      {dl.length ? <dl className=\"secret-data\">{dl}</dl> : <EmptyBox label=\"Data\" />}\n    </>\n  );\n};\nSecretData.displayName = 'SecretData';\n\ntype KeyValueData = {\n  [key: string]: string;\n};\n\ntype ConfigMapDataProps = {\n  data: KeyValueData;\n  label: string;\n};\n\ntype DownloadValueProps = {\n  data: KeyValueData;\n};\n\ntype SecretValueProps = {\n  value: string;\n  encoded?: boolean;\n  reveal: boolean;\n  isTable?: boolean;\n};\n\ntype SecretDataProps = {\n  data: KeyValueData;\n  title?: string;\n  isTable?: boolean;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\n\nimport { K8sResourceKind } from '../../module/k8s';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from '../factory';\nimport { DetailsItem, Kebab, KebabAction, detailsPage, Timestamp, navFactory, ResourceKebab, ResourceLink, ResourceSummary, SectionHeading } from '../utils';\nimport { ImageSignerModel } from '../../models';\nimport { coFetchJSON } from '../../co-fetch';\nimport { SecretData } from './image-signer-key';\nimport { TargetsTable } from './targets-table';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\nimport { ResourceLabel } from '../../models/hypercloud/resource-plural';\n\nexport const menuActions: KebabAction[] = [...Kebab.getExtensionsActionsForKind(ImageSignerModel), ...Kebab.factory.common];\n\nconst kind = ImageSignerModel.kind;\n\nconst tableColumnClasses = ['', '', classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), Kebab.columnClass];\n\nconst ImageSignerTableHeader = (t?: TFunction) => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_71'),\n      sortField: 'spec.team',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_72'),\n      sortField: 'spec.email',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_73'),\n      sortField: 'spec.phone',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_12'),\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[5] },\n    },\n  ];\n};\n\nImageSignerTableHeader.displayName = 'ImageSignerTableHeader';\n\nconst ImageSignerTableRow: RowFunction<K8sResourceKind> = ({ obj: imagesigner, index, key, style }) => {\n  return (\n    <TableRow id={imagesigner.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={imagesigner.metadata.name} namespace={imagesigner.metadata.namespace} title={imagesigner.metadata.uid} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1])}>{imagesigner?.spec?.team}</TableData>\n      <TableData className={classNames(tableColumnClasses[2])}>{imagesigner?.spec?.email}</TableData>\n      <TableData className={classNames(tableColumnClasses[3])}>{imagesigner?.spec?.phone}</TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <Timestamp timestamp={imagesigner.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={imagesigner} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport const ImageSignerDetailsList: React.FC<ImageSignerDetailsListProps> = ({ ds: imagesigner }) => {\n  const { t } = useTranslation();\n  return (\n    <dl className=\"co-m-pane__details\">\n      <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_7')} obj={imagesigner} path=\"spec.team\" />\n      <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_8')} obj={imagesigner} path=\"spec.email\" />\n      <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_9')} obj={imagesigner} path=\"spec.phone\" />\n      <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_10')} obj={imagesigner} path=\"spec.description\" />\n    </dl>\n  );\n}\n\n// const TargetsTable: React.FC = props => <Table {...props} aria-label=\"ImageSigners\" Header={ImageSignerKeyTargetTableHeader} Row={ImageSignerKeyTargetTableRow} virtualize />;\n\nconst ImageSignerDetails: React.FC<ImageSignerDetailsProps> = ({ obj: imagesigner }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', { 0: ResourceLabel(imagesigner, t) })} />\n        <div className=\"row\">\n          <div className=\"col-lg-6\">\n            <ResourceSummary resource={imagesigner} showOwner={false} />\n            <DetailsItem label={t('COMMON:MSG_DETAILS_TABREPLICASETS_5')} obj={imagesigner} path=\"spec.owner\" />\n          </div>\n          <div className=\"col-lg-6\">\n            <ImageSignerDetailsList ds={imagesigner} />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst fetchSignerKey = singerkey => {\n  const url = `/api/kubernetes/apis/tmax.io/v1/signerkeys/${singerkey}`;\n  return coFetchJSON(url).then(response => {\n    console.log(response);\n    return response;\n  });\n};\n\nconst SignerKeyDetails: React.FC<SignerKeyDetailsProps> = ({ obj: imagesigner }) => {\n  const { t } = useTranslation();\n\n  const [data, setData] = React.useState([]);\n  const [root, setRoot] = React.useState({\n    id: '',\n    key: '',\n    passPhrase: '',\n  });\n  // const [targets, setTargets] = React.useState({\n  //   id: '',\n  //   key: '',\n  //   passPhrase: '',\n  // });\n  React.useEffect(() => {\n    fetchSignerKey(imagesigner?.metadata?.name).then(data => {\n      const preData = [];\n      setRoot(data.spec.root);\n      _.forEach(data.spec.targets, (value, key) => {\n        preData.push(value);\n      });\n      console.log('확인해봐라:', preData);\n      setData(preData);\n    });\n  }, []);\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <div className=\"row\">\n          <div className=\"col-lg-12\">\n            <SecretData data={root} title={`${t('COMMON:MSG_DETAILS_TABSIGNERKEY_1')} ${t('COMMON:MSG_DETAILS_TABOVERVIEW_1')}`} isTable={false} />\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <TargetsTable resource={data} heading={`${t('COMMON:MSG_DETAILS_TABDETAILS_METRICS_TABLEHEADER_5')}`} />\n      </div>\n    </>\n  );\n};\n\nconst { details, editYaml, signerKey } = navFactory;\n\nexport const ImageSigners: React.FC = props => {\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"ImageSigners\" Header={ImageSignerTableHeader.bind(null, t)} Row={ImageSignerTableRow} virtualize />;\n};\n\nexport const ImageSignersPage: React.FC<ImageSignersPageProps> = props => {\n  const { t } = useTranslation();\n\n  return <ListPage\n    title={t('COMMON:MSG_LNB_MENU_91')}\n    createButtonText={t('COMMON:MSG_MAIN_CREATEBUTTON_1', { 0: t('COMMON:MSG_LNB_MENU_91') })}\n    canCreate={props.isDetailPage ? false : true}\n    ListComponent={ImageSigners}\n    kind={kind}\n    {...props}\n  />;\n};\n\nexport const ImageSignersDetailsPage: React.FC<ImageSignersDetailsPageProps> = props => <DetailsPage {...props} kind={kind} menuActions={menuActions} pages={[details(detailsPage(ImageSignerDetails)), editYaml(), signerKey(SignerKeyDetails)]} />;\n\ntype ImageSignerDetailsListProps = {\n  ds: K8sResourceKind;\n};\n\ntype ImageSignersPageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: any;\n  isDetailPage?: boolean;\n};\n\ntype SignerKeyDetailsProps = {\n  obj: K8sResourceKind;\n};\n\ntype ImageSignerDetailsProps = {\n  obj: K8sResourceKind;\n};\n\ntype ImageSignersDetailsPageProps = {\n  match: any;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\n\nimport { EmptyBox, SectionHeading } from '../utils';\nimport { Table, TableRow, TableData } from '../hypercloud/factory/table';\nimport { EyeIcon, EyeSlashIcon } from '@patternfly/react-icons';\nimport { Button } from '@patternfly/react-core';\nimport { sortable } from '@patternfly/react-table';\nimport { SecretValue } from './image-signer-key';\nimport { useTranslation } from 'react-i18next';\n\nconst targetRowColumnClasses = [classNames('col-lg-2', 'col-md-3', 'col-sm-4', 'col-xs-5'), classNames('col-lg-2', 'col-md-3', 'col-sm-4', 'col-xs-7'), classNames('col-lg-2', 'col-md-2', 'col-sm-4', 'hidden-xs')];\n\nconst TargetsTableHeader = () => {\n  return [\n    {\n      title: 'ID',\n      sortField: 'id',\n      transforms: [sortable],\n      props: { className: targetRowColumnClasses[0] },\n    },\n    {\n      title: 'Key',\n      sortField: 'key',\n      transforms: [sortable],\n      props: { className: targetRowColumnClasses[1] },\n    },\n    {\n      title: 'PassPhrase',\n      sortField: 'passPhrase',\n      transforms: [sortable],\n      props: { className: targetRowColumnClasses[2] },\n    },\n  ];\n};\nTargetsTableHeader.displayName = 'TargetsTableHeader';\n\nconst TargetsTableRows = props => {\n  const { obj, index, key, style, reveal } = props;\n  console.log(obj);\n  return (\n    <TableRow id={'target-table'} index={index} trKey={key} style={style}>\n      <TableData className={targetRowColumnClasses[0]}>{<SecretValue encoded={false} value={obj.id} reveal={true} isTable={true}></SecretValue>}</TableData>\n      <TableData className={classNames(targetRowColumnClasses[1])}>\n        <SecretValue value={obj.key} reveal={reveal} isTable={true}></SecretValue>\n      </TableData>\n      <TableData className={classNames(targetRowColumnClasses[2])}>\n        <SecretValue value={obj.passPhrase} reveal={reveal} isTable={true}></SecretValue>\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport const TargetsTable = props => {\n  const { t } = useTranslation();\n  const { resource, ...tableProps } = props;\n  const [reveal, setReveal] = React.useState(false);\n  const data: RowTargetData[] = resource;\n  return (\n    <>\n      {props.heading && (\n        <SectionHeading text={props.heading}>\n          {resource.length ? (\n            <Button type=\"button\" onClick={() => setReveal(!reveal)} variant=\"link\" className=\"pf-m-link--align-right\">\n              {reveal ? (\n                <>\n                  <EyeSlashIcon className=\"co-icon-space-r\" />\n                  {`${t('COMMON:MSG_DETAILS_TABSIGNERKEY_3')}`}\n                </>\n              ) : (\n                <>\n                  <EyeIcon className=\"co-icon-space-r\" />\n                  {`${t('COMMON:MSG_DETAILS_TABSIGNERKEY_2')}`}\n                </>\n              )}\n            </Button>\n          ) : null}\n        </SectionHeading>\n      )}\n      {resource.length <= 0 ? <EmptyBox label=\"Targets\" /> : <Table {...tableProps} aria-label=\"Targets\" loaded={true} reveal={reveal} label={props.heading} data={data} Header={TargetsTableHeader} Row={TargetsTableRows} virtualize={true} />}\n    </>\n  );\n};\n\nTargetsTable.displayName = 'TargetsTable';\n\nexport type RowTargetData = {\n  [index: string]: string;\n};\n\n// type SecretValueProps = {\n//   value: string;\n//   encoded?: boolean;\n//   reveal: boolean;\n// };\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { CopyToClipboard as CTC } from 'react-copy-to-clipboard';\nimport { Button, Tooltip } from '@patternfly/react-core';\nimport { CopyIcon } from '@patternfly/react-icons';\n\nexport const CopyToClipboard: React.FC<CopyToClipboardProps> = React.memo(props => {\n  const [copied, setCopied] = React.useState(false);\n\n  const tooltipText = copied ? 'Copied' : 'Copy to Clipboard';\n  const tooltipContent = [\n    <span className=\"co-nowrap\" key=\"nowrap\">\n      {tooltipText}\n    </span>,\n  ];\n\n  // Default to value if no visible value was specified.\n  const visibleValue = _.isNil(props.visibleValue) ? props.value : props.visibleValue;\n  const border = props.isTable ? '0px' : '1px solid #ccc';\n\n  return (\n    <div className=\"co-copy-to-clipboard\">\n      <pre className=\"co-pre-wrap co-copy-to-clipboard__text\" style={{ border: border }}>\n        {visibleValue}\n      </pre>\n      <Tooltip content={tooltipContent} trigger=\"click mouseenter focus\" exitDelay={1250}>\n        <CTC text={props.value} onCopy={() => setCopied(true)}>\n          <Button variant=\"plain\" onMouseEnter={() => setCopied(false)} className=\"co-copy-to-clipboard__btn pf-c-clipboard-copy__group-copy\" type=\"button\">\n            <CopyIcon />\n            <span className=\"sr-only\">Copy to Clipboard</span>\n          </Button>\n        </CTC>\n      </Tooltip>\n    </div>\n  );\n});\n\nexport type CopyToClipboardProps = {\n  value: string;\n  visibleValue?: React.ReactNode;\n  isTable?: boolean;\n};\n\nCopyToClipboard.displayName = 'CopyToClipboard';\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAQA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AASA;AAAA;AACA;AACA;AACA;AAMA;AAAA;AACA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAKA;AAEA;AACA;AAoEA;AACA;AACA;AAoCA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAOA;AAIA;AACA;AACA;AAEA;AAGA;AAWA;AACA;AAzJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA2HA;;;;;;;;;;;;;ACzcA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAKA;AACA;AAIA;AACA;AAMA;AAGA;AACA;;;;;;;;;;;;;AC/GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAQA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzLA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AAIA;AACA;AAOA;AAGA;AAEA;AAMA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC/FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAMA;AAQA;;;;;A","sourceRoot":""}