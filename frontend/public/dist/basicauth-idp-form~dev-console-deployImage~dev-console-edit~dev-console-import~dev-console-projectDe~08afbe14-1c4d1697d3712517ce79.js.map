{"version":3,"file":"basicauth-idp-form~dev-console-deployImage~dev-console-edit~dev-console-import~dev-console-projectDe~08afbe14-1c4d1697d3712517ce79.js","sources":["webpack:///./packages/dev-console/src/utils/imagestream-utils.ts","webpack:///./packages/dev-console/src/utils/resource-label-utils.ts","webpack:///./packages/dev-console/src/utils/shared-submit-utils.ts"],"sourcesContent":["import * as _ from 'lodash';\nimport * as semver from 'semver';\nimport { ContainerPort, K8sResourceKind } from '@console/internal/module/k8s';\nimport {\n  isBuilder,\n  getMostRecentBuilderTag,\n  getBuilderTagsSortedByVersion,\n} from '@console/internal/components/image-stream';\nimport {\n  getImageStreamIcon,\n  getImageForIconClass,\n} from '@console/internal/components/catalog/catalog-item-icon';\nimport { ProjectModel, ImageStreamModel } from '@console/internal/models';\nimport { FirehoseResource } from '@console/internal/components/utils';\n\nexport interface ImageTag {\n  name: string;\n  annotations: {\n    [key: string]: string;\n  };\n  generation: number;\n  [key: string]: any;\n}\nexport interface BuilderImage {\n  obj: K8sResourceKind;\n  name: string;\n  displayName: string;\n  title: string;\n  iconUrl: string;\n  tags: ImageTag[];\n  recentTag: ImageTag;\n  imageStreamNamespace: string;\n}\n\nexport interface NormalizedBuilderImages {\n  [builderImageName: string]: BuilderImage;\n}\n\nexport const imageStreamLabels = ['app.kubernetes.io/name', 'app.openshift.io/runtime'];\n\nexport const getRuntime = (labels: { [key: string]: string }) =>\n  labels?.['app.openshift.io/runtime'] || labels?.['app.kubernetes.io/name'];\n\nexport const getSampleRepo = (tag) => _.get(tag, 'annotations.sampleRepo', '');\nexport const getSampleRef = (tag) => _.get(tag, 'annotations.sampleRef', '');\nexport const getSampleContextDir = (tag) => _.get(tag, 'annotations.sampleContextDir', '');\n\n// Transform image ports to k8s structure.\n// `{ '3306/tcp': {} }` -> `{ containerPort: 3306, protocol: 'TCP' }`\nconst portsFromSpec = (portSpec: object): ContainerPort[] => {\n  return _.reduce(\n    portSpec,\n    (result: ContainerPort[], value, key) => {\n      const parts = key.split('/');\n      if (parts.length === 1) {\n        parts.push('tcp');\n      }\n\n      const containerPort = parseInt(parts[0], 10);\n      if (_.isFinite(containerPort)) {\n        result.push({\n          containerPort,\n          protocol: parts[1].toUpperCase(),\n        });\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn('Unrecognized image port format', key);\n      }\n\n      return result;\n    },\n    [],\n  );\n};\n\nexport const getPorts = (imageStreamImage: object): ContainerPort[] => {\n  const portSpec =\n    _.get(imageStreamImage, 'image.dockerImageMetadata.Config.ExposedPorts') ||\n    _.get(imageStreamImage, 'image.dockerImageMetadata.ContainerConfig.ExposedPorts');\n  return portsFromSpec(portSpec);\n};\n\n// Use the same naming convention as the CLI.\nexport const makePortName = (port: ContainerPort): string =>\n  `${port.containerPort}-${port.protocol}`.toLowerCase();\n\nexport const prettifyName = (name: string) => {\n  return name.replace(/(-|^)([^-]?)/g, (first, prep, letter) => {\n    return (prep && ' ') + letter.toUpperCase();\n  });\n};\n\nexport const normalizeBuilderImages = (\n  imageStreams: K8sResourceKind[],\n): NormalizedBuilderImages => {\n  const data = Array.isArray(imageStreams) ? imageStreams : [imageStreams];\n  const builderImageStreams = data.filter((imageStream) => isBuilder(imageStream));\n\n  return builderImageStreams.reduce((builderImages: NormalizedBuilderImages, imageStream) => {\n    const tags = getBuilderTagsSortedByVersion(imageStream);\n    const recentTag = getMostRecentBuilderTag(imageStream);\n    const { name } = imageStream.metadata;\n    const displayName = _.get(imageStream, [\n      'metadata',\n      'annotations',\n      'openshift.io/display-name',\n    ]);\n    const imageStreamNamespace = imageStream.metadata.namespace;\n    const title = displayName && displayName.length < 14 ? displayName : prettifyName(name);\n    const iconClass = getImageStreamIcon(recentTag);\n    const iconUrl = getImageForIconClass(iconClass);\n\n    builderImages[name] = {\n      obj: imageStream,\n      name,\n      displayName,\n      title,\n      iconUrl,\n      tags,\n      recentTag,\n      imageStreamNamespace,\n    };\n    return builderImages;\n  }, {});\n};\n\nexport const getTagDataWithDisplayName = (\n  imageTags: ImageTag[],\n  selectedTag: string,\n  defaultName: string,\n): [ImageTag, string] => {\n  const imageTag = _.find(imageTags, { name: selectedTag });\n  const displayName = _.get(imageTag, ['annotations', 'openshift.io/display-name'], defaultName);\n\n  return [imageTag, displayName];\n};\n\nexport const getSuggestedName = (name: string): string | undefined => {\n  if (!name) {\n    return undefined;\n  }\n  const imageName: string = _.last(name.split('/'));\n  return _.first(imageName.split(/[^a-z0-9-]/));\n};\n\nexport enum RegistryType {\n  External = 'external',\n  Internal = 'internal',\n}\nexport enum BuilderImagesNamespace {\n  Openshift = 'openshift',\n}\nexport const imageRegistryType = {\n  External: {\n    value: RegistryType.External,\n    label: 'Image name from external registry',\n  },\n  Internal: {\n    value: RegistryType.Internal,\n    label: 'Image stream tag from internal registry',\n  },\n};\n\nexport const getSortedTags = (imageStream: K8sResourceKind) => {\n  return _.isArray(imageStream.status.tags) && imageStream.status.tags.length\n    ? imageStream.status.tags.sort(({ tag: a }, { tag: b }) => {\n        const v1 = semver.coerce(a);\n        const v2 = semver.coerce(b);\n        if (!v1 && !v2) {\n          return a.localeCompare(b);\n        }\n        if (!v1) {\n          return 1;\n        }\n        if (!v2) {\n          return -1;\n        }\n        return semver.rcompare(v1, v2);\n      })\n    : [];\n};\nexport const getImageStreamTags = (imageStream: K8sResourceKind) => {\n  const sortedTags = imageStream && !_.isEmpty(imageStream) ? getSortedTags(imageStream) : [];\n  return sortedTags.reduce((tags, { tag }) => {\n    tags[tag] = tag;\n    return tags;\n  }, {});\n};\n\nexport const getProjectResource = (): FirehoseResource[] => {\n  return [\n    {\n      isList: true,\n      kind: ProjectModel.kind,\n      prop: ProjectModel.id,\n    },\n  ];\n};\n\nexport const getImageStreamResource = (namespace: string): FirehoseResource[] => {\n  const resource = [];\n  if (namespace) {\n    resource.push({\n      isList: true,\n      kind: ImageStreamModel.kind,\n      prop: ImageStreamModel.id,\n      namespace,\n    });\n  }\n  return resource;\n};\n","import * as _ from 'lodash';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { TRIGGERS_ANNOTATION } from '@console/shared';\n\nexport const getAppLabels = (\n  name: string,\n  application?: string,\n  imageStreamName?: string,\n  selectedTag?: string,\n  namespace?: string,\n) => {\n  const labels = {\n    app: name,\n    'app.kubernetes.io/instance': name,\n    'app.kubernetes.io/component': name,\n    ...(imageStreamName && {\n      'app.kubernetes.io/name': imageStreamName,\n      'app.openshift.io/runtime': imageStreamName,\n    }),\n  };\n\n  if (application && application.trim().length > 0) {\n    labels['app.kubernetes.io/part-of'] = application;\n  }\n  if (selectedTag) {\n    labels['app.openshift.io/runtime-version'] = selectedTag;\n  }\n  if (namespace) {\n    labels['app.openshift.io/runtime-namespace'] = namespace;\n  }\n\n  return labels;\n};\n\nexport const getGitAnnotations = (gitURL: string, gitRef?: string) => {\n  const ref = gitRef || 'master';\n  return {\n    'app.openshift.io/vcs-uri': gitURL,\n    'app.openshift.io/vcs-ref': ref,\n  };\n};\n\nexport const getCommonAnnotations = () => {\n  return {\n    'openshift.io/generated-by': 'OpenShiftWebConsole',\n  };\n};\n\nexport const getTriggerAnnotation = (\n  name: string,\n  namespace: string,\n  imageTrigger: boolean,\n  tag: string = 'latest',\n) => ({\n  [TRIGGERS_ANNOTATION]: JSON.stringify([\n    {\n      from: { kind: 'ImageStreamTag', name: `${name}:${tag}`, namespace },\n      fieldPath: `spec.template.spec.containers[?(@.name==\"${name}\")].image`,\n      pause: `${!imageTrigger}`,\n    },\n  ]),\n});\n\nexport const getPodLabels = (name: string) => {\n  return {\n    app: name,\n    deploymentconfig: name,\n  };\n};\n\nexport const mergeData = (originalResource: K8sResourceKind, newResource: K8sResourceKind) => {\n  const mergedData = _.merge({}, originalResource || {}, newResource);\n  mergedData.metadata.labels = newResource.metadata.labels;\n  if (mergedData.metadata.annotations) {\n    mergedData.metadata.annotations = newResource.metadata.annotations;\n  }\n  if (mergedData.spec?.template?.metadata?.labels) {\n    mergedData.spec.template.metadata.labels = newResource.spec?.template?.metadata?.labels;\n  }\n  if (mergedData.spec?.template?.spec?.containers) {\n    mergedData.spec.template.spec.containers = newResource.spec.template.spec.containers;\n  }\n  if (mergedData?.spec?.strategy) {\n    mergedData.spec.strategy = newResource.spec.strategy;\n  }\n  if (mergedData.spec?.triggers) {\n    mergedData.spec.triggers = newResource.spec.triggers;\n  }\n  return mergedData;\n};\n","import * as _ from 'lodash';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { GitImportFormData, DeployImageFormData } from '../components/import/import-types';\nimport {\n  getAppLabels,\n  getPodLabels,\n  getGitAnnotations,\n  getCommonAnnotations,\n  mergeData,\n} from './resource-label-utils';\nimport { makePortName } from './imagestream-utils';\n\nexport const dryRunOpt = { queryParams: { dryRun: 'All' } };\n\nconst isDeployImageFormData = (\n  formData: DeployImageFormData | GitImportFormData,\n): formData is DeployImageFormData => {\n  return 'isi' in (formData as DeployImageFormData);\n};\n\nexport const createService = (\n  formData: DeployImageFormData | GitImportFormData,\n  imageStreamData?: K8sResourceKind,\n  originalService?: K8sResourceKind,\n): K8sResourceKind => {\n  const {\n    project: { name: namespace },\n    application: { name: application },\n    name,\n    labels: userLabels,\n    image: { ports: imagePorts, tag: imageTag },\n  } = formData;\n\n  const imageStreamName = _.get(imageStreamData, 'metadata.name') || _.get(formData, 'image.name');\n  const git = _.get(formData, 'git');\n\n  const defaultLabels = getAppLabels(name, application, imageStreamName, imageTag);\n  const podLabels = getPodLabels(name);\n  const defaultAnnotations = git\n    ? { ...getGitAnnotations(git.url, git.ref), ...getCommonAnnotations() }\n    : getCommonAnnotations();\n\n  let ports = imagePorts;\n  if (_.get(formData, 'build.strategy') === 'Docker') {\n    const port = { containerPort: _.get(formData, 'docker.containerPort'), protocol: 'TCP' };\n    ports = [port];\n  } else if (isDeployImageFormData(formData)) {\n    const {\n      isi: { ports: isiPorts },\n    } = formData;\n    ports = isiPorts;\n  }\n\n  const newService: any = {\n    kind: 'Service',\n    apiVersion: 'v1',\n    metadata: {\n      name,\n      namespace,\n      labels: { ...defaultLabels, ...userLabels },\n      annotations: { ...defaultAnnotations },\n    },\n    spec: {\n      selector: podLabels,\n      ports: _.map(ports, (port) => ({\n        port: port.containerPort,\n        targetPort: port.containerPort,\n        protocol: port.protocol,\n        // Use the same naming convention as CLI new-app.\n        name: makePortName(port),\n      })),\n    },\n  };\n\n  const service = mergeData(originalService, newService);\n\n  return service;\n};\n\nexport const createRoute = (\n  formData: GitImportFormData | DeployImageFormData,\n  imageStreamData?: K8sResourceKind,\n  originalRoute?: K8sResourceKind,\n): K8sResourceKind => {\n  const {\n    project: { name: namespace },\n    application: { name: application },\n    name,\n    labels: userLabels,\n    route: { hostname, secure, path, tls, targetPort: routeTargetPort },\n    image: { ports: imagePorts, tag: imageTag },\n  } = formData;\n\n  const imageStreamName = _.get(imageStreamData, 'metadata.name') || _.get(formData, 'image.name');\n  const git = _.get(formData, 'git');\n\n  const defaultLabels = getAppLabels(name, application, imageStreamName, imageTag);\n  const defaultAnnotations = git\n    ? { ...getGitAnnotations(git.url, git.ref), ...getCommonAnnotations() }\n    : getCommonAnnotations();\n\n  let ports = imagePorts;\n  if (isDeployImageFormData(formData)) {\n    const {\n      isi: { ports: isiPorts },\n    } = formData;\n    ports = isiPorts;\n  }\n\n  let targetPort;\n  if (_.get(formData, 'build.strategy') === 'Docker') {\n    const port = _.get(formData, 'docker.containerPort');\n    targetPort = makePortName({\n      containerPort: _.toInteger(port),\n      protocol: 'TCP',\n    });\n  } else {\n    targetPort = routeTargetPort || makePortName(_.head(ports));\n  }\n\n  const newRoute: any = {\n    kind: 'Route',\n    apiVersion: 'route.openshift.io/v1',\n    metadata: {\n      name,\n      namespace,\n      labels: { ...defaultLabels, ...userLabels },\n      defaultAnnotations,\n    },\n    spec: {\n      to: {\n        kind: 'Service',\n        name,\n      },\n      ...(secure ? { tls } : {}),\n      host: hostname,\n      path,\n      // The service created by `createService` uses the same port as the container port.\n      port: {\n        // Use the port name, not the number for targetPort. The router looks\n        // at endpoints, not services, when resolving ports, so port numbers\n        // will not resolve correctly if the service port and container port\n        // numbers don't match.\n        targetPort,\n      },\n      wildcardPolicy: 'None',\n    },\n  };\n\n  const route = mergeData(originalRoute, newRoute);\n\n  return route;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAKA;AAIA;AA0BA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAOA;AAKA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAOA;AAEA;AAEA;AAGA;AACA;AAEA;AAKA;AAQA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAKA;AASA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;;;;;A","sourceRoot":""}