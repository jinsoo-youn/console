{"version":3,"file":"operator-hub-7cc21f1ea09aa7741695.js","sources":["webpack:///./packages/operator-lifecycle-manager/src/components/operator-hub/index.ts","webpack:///./packages/operator-lifecycle-manager/src/components/operator-hub/operator-hub-community-provider-modal.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/operator-hub/operator-hub-item-details.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/operator-hub/operator-hub-items.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/operator-hub/operator-hub-page.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/operator-hub/operator-hub-utils.ts"],"sourcesContent":["import { K8sResourceKind, ObjectMetadata } from '@console/internal/module/k8s';\nimport { PackageManifestKind, SubscriptionKind } from '../../types';\n\nexport enum ProviderType {\n  RedHat = 'Red Hat',\n  Certified = 'Certified',\n  Community = 'Community',\n  Custom = 'Custom',\n  Marketplace = 'Marketplace',\n}\n\nexport enum InstalledState {\n  Installed = 'Installed',\n  NotInstalled = 'Not Installed',\n}\n\nexport enum CapabilityLevel {\n  BasicInstall = 'Basic Install',\n  SeamlessUpgrades = 'Seamless Upgrades',\n  FullLifecycle = 'Full Lifecycle',\n  DeepInsights = 'Deep Insights',\n}\n\nexport enum InfraFeatures {\n  Disconnected = 'Disconnected',\n  Proxy = 'Proxy',\n  FipsMode = 'FIPS Mode',\n}\n\nexport type OperatorHubItem = {\n  obj: PackageManifestKind;\n  name: string;\n  kind: string;\n  uid: string;\n  installed: boolean;\n  installState?: InstalledState;\n  subscription?: SubscriptionKind;\n  provider: ProviderType;\n  longDescription: string;\n  description: string;\n  createdAt?: string;\n  tags: string[];\n  categories: string[];\n  catalogSource: string;\n  catalogSourceNamespace: string;\n  [key: string]: any;\n  validSubscription: string[];\n  infraFeatures: InfraFeatures[];\n};\n\nexport enum OperatorHubCSVAnnotationKey {\n  certifiedLevel = 'certifiedLevel',\n  healthIndex = 'healthIndex',\n  repository = 'repository',\n  containerImage = 'containerImage',\n  createdAt = 'createdAt',\n  support = 'support',\n  description = 'description',\n  categories = 'categories',\n  capabilities = 'capabilities',\n  actionText = 'marketplace.openshift.io/action-text',\n  remoteWorkflow = 'marketplace.openshift.io/remote-workflow',\n  supportWorkflow = 'marketplace.openshift.io/support-workflow',\n  infrastructureFeatures = 'operators.openshift.io/infrastructure-features',\n  validSubscription = 'operators.openshift.io/valid-subscription',\n  tags = 'tags',\n}\n\nexport type OperatorHubCSVAnnotations = {\n  [OperatorHubCSVAnnotationKey.certifiedLevel]?: string;\n  [OperatorHubCSVAnnotationKey.healthIndex]?: string;\n  [OperatorHubCSVAnnotationKey.repository]?: string;\n  [OperatorHubCSVAnnotationKey.containerImage]?: string;\n  [OperatorHubCSVAnnotationKey.createdAt]?: string;\n  [OperatorHubCSVAnnotationKey.support]?: string;\n  [OperatorHubCSVAnnotationKey.description]?: string;\n  [OperatorHubCSVAnnotationKey.categories]?: string;\n  [OperatorHubCSVAnnotationKey.capabilities]?: CapabilityLevel;\n  [OperatorHubCSVAnnotationKey.actionText]?: string;\n  [OperatorHubCSVAnnotationKey.remoteWorkflow]?: string;\n  [OperatorHubCSVAnnotationKey.supportWorkflow]?: string;\n  [OperatorHubCSVAnnotationKey.infrastructureFeatures]?: string;\n  [OperatorHubCSVAnnotationKey.validSubscription]?: string;\n  [OperatorHubCSVAnnotationKey.tags]?: string[];\n} & ObjectMetadata['annotations'];\n\ntype OperatorHubSpec = {\n  sources?: {\n    name: string;\n    disabled: boolean;\n  }[];\n  disableAllDefaultSources?: boolean;\n};\n\ntype OperatorHubStatus = {\n  sources: {\n    disabled: boolean;\n    name: string;\n    status: string;\n  }[];\n};\n\nexport type OperatorHubKind = K8sResourceKind & {\n  spec: OperatorHubSpec;\n  status: OperatorHubStatus;\n};\n","import * as React from 'react';\nimport { Checkbox } from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\nimport { RH_OPERATOR_SUPPORT_POLICY_LINK } from '@console/shared';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory/modal';\nimport { ExternalLink } from '@console/internal/components/utils';\n\nexport class OperatorHubCommunityProviderModal extends React.Component<\n  OperatorHubCommunityProviderModalProps,\n  OperatorHubCommunityProviderModalState\n> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      ignoreWarnings: false,\n    };\n  }\n\n  onIgnoreChange = (checked) => {\n    this.setState({ ignoreWarnings: checked });\n  };\n\n  submit = (event) => {\n    event.preventDefault();\n    this.props.showCommunityOperators(this.state.ignoreWarnings);\n    this.props.close();\n  };\n\n  render() {\n    const { ignoreWarnings } = this.state;\n    const submitButtonContent = <>Continue</>;\n    return (\n      <form onSubmit={this.submit} className=\"modal-content co-modal-ignore-warning\">\n        <ModalTitle>Show Community Operator</ModalTitle>\n        <ModalBody>\n          <div className=\"co-modal-ignore-warning__content\">\n            <div className=\"co-modal-ignore-warning__icon\">\n              <InfoCircleIcon />\n            </div>\n            <div>\n              <p>\n                Community Operators are operators which have not been vetted or verified by Red Hat.\n                Community Operators should be used with caution because their stability is unknown.\n                Red Hat provides no support for Community Operators.\n                {RH_OPERATOR_SUPPORT_POLICY_LINK && (\n                  <span className=\"co-modal-ignore-warning__link\">\n                    <ExternalLink\n                      href={RH_OPERATOR_SUPPORT_POLICY_LINK}\n                      text=\"Learn more about Red Hatâ€™s third party software support policy\"\n                    />\n                  </span>\n                )}\n              </p>\n              <Checkbox\n                className=\"co-modal-ignore-warning__checkbox\"\n                onChange={this.onIgnoreChange}\n                isChecked={ignoreWarnings}\n                id=\"do-not-show-warning\"\n                label=\"Do not show this warning again\"\n              />\n            </div>\n          </div>\n        </ModalBody>\n        <ModalSubmitFooter\n          submitText={submitButtonContent}\n          inProgress={false}\n          errorMessage=\"\"\n          cancel={this.props.close}\n        />\n      </form>\n    );\n  }\n}\n\nexport type OperatorHubCommunityProviderModalProps = {\n  showCommunityOperators: (ignoreWarnings: boolean) => void;\n  close: () => void;\n};\n\nexport type OperatorHubCommunityProviderModalState = {\n  ignoreWarnings: boolean;\n};\n\nexport const communityOperatorWarningModal = createModalLauncher(OperatorHubCommunityProviderModal);\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport * as classNames from 'classnames';\nimport { PropertiesSidePanel, PropertyItem } from '@patternfly/react-catalog-view-extension';\nimport { CheckCircleIcon } from '@patternfly/react-icons';\nimport { Link } from 'react-router-dom';\nimport { ExternalLink, HintBlock } from '@console/internal/components/utils';\nimport { RH_OPERATOR_SUPPORT_POLICY_LINK } from '@console/shared';\nimport { MarkdownView } from '../clusterserviceversion';\nimport { OperatorHubItem } from './index';\n\nconst CapabilityLevel: React.FC<CapabilityLevelProps> = ({ capabilityLevel }) => {\n  const levels = [\n    'Basic Install',\n    'Seamless Upgrades',\n    'Full Lifecycle',\n    'Deep Insights',\n    'Auto Pilot',\n  ];\n  const capabilityLevelIndex = _.indexOf(levels, capabilityLevel);\n\n  return (\n    <ul className=\"properties-side-panel-pf-property-value__capability-levels\">\n      {levels.map((level, i) => {\n        const active = capabilityLevelIndex >= i;\n        return (\n          <li\n            className={classNames('properties-side-panel-pf-property-value__capability-level', {\n              'properties-side-panel-pf-property-value__capability-level--active': active,\n            })}\n            key={level}\n          >\n            {active && (\n              <CheckCircleIcon\n                color=\"var(--pf-global--primary-color--100)\"\n                className=\"properties-side-panel-pf-property-value__capability-level-icon\"\n                title=\"Checked\"\n              />\n            )}\n            {level}\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\ntype CapabilityLevelProps = {\n  capabilityLevel: string;\n};\n\nexport const OperatorHubItemDetails: React.SFC<OperatorHubItemDetailsProps> = ({\n  item,\n  namespace,\n}) => {\n  if (!item) {\n    return null;\n  }\n  const {\n    installed,\n    provider,\n    providerType,\n    longDescription,\n    description,\n    version,\n    repository,\n    containerImage,\n    createdAt,\n    support,\n    capabilityLevel,\n    marketplaceSupportWorkflow,\n    infraFeatures,\n    validSubscription,\n  } = item;\n  const notAvailable = <span className=\"properties-side-panel-pf-property-label\">N/A</span>;\n\n  const getHintBlock = () => {\n    if (installed) {\n      return (\n        <HintBlock className=\"co-catalog-page__hint\" title=\"Installed Operator\">\n          <p>\n            This Operator has been installed on the cluster.{' '}\n            <Link\n              to={`/k8s/${namespace ? `ns/${namespace}` : 'all-namespaces'}/clusterserviceversions`}\n            >\n              View it here.\n            </Link>\n          </p>\n        </HintBlock>\n      );\n    }\n\n    if (providerType === 'Community') {\n      return (\n        <HintBlock className=\"co-catalog-page__hint\" title=\"Community Operator\">\n          <p>\n            This is a community provided operator. These are operators which have not been vetted or\n            verified by Red Hat. Community Operators should be used with caution because their\n            stability is unknown. Red Hat provides no support for Community Operators.\n          </p>\n          {RH_OPERATOR_SUPPORT_POLICY_LINK && (\n            <span className=\"co-modal-ignore-warning__link\">\n              <ExternalLink\n                href={RH_OPERATOR_SUPPORT_POLICY_LINK}\n                text=\"Learn more about Red Hatâ€™s third party software support policy\"\n              />\n            </span>\n          )}\n        </HintBlock>\n      );\n    }\n\n    if (providerType === 'Marketplace') {\n      return (\n        <HintBlock title=\"Marketplace Operator\">\n          <p>\n            This Operator is purchased through Red Hat Marketplace. After completing the purchase\n            process, you can install the Operator on this or other OpenShift clusters. Visit Red Hat\n            Marketplace for more details and to track your usage of this application.\n          </p>\n          <p>\n            <ExternalLink\n              href=\"https://marketplace.redhat.com/en-us?utm_source=openshift_console\"\n              text=\"Learn more about the Red Hat Marketplace\"\n            />\n          </p>\n        </HintBlock>\n      );\n    }\n\n    return null;\n  };\n\n  const mappedData = (data) =>\n    Array.isArray(data) ? data.map((d) => <div key={d}>{d}</div>) : notAvailable;\n\n  const mappedInfraFeatures = mappedData(infraFeatures);\n  const mappedValidSubscription = mappedData(validSubscription);\n\n  return (\n    <div className=\"modal-body modal-body-border\">\n      <div className=\"modal-body-content\">\n        <div className=\"modal-body-inner-shadow-covers\">\n          <div className=\"co-catalog-page__overlay-body\">\n            <PropertiesSidePanel>\n              <PropertyItem label=\"Operator Version\" value={version || notAvailable} />\n              <PropertyItem\n                label=\"Capability Level\"\n                value={\n                  capabilityLevel ? (\n                    <CapabilityLevel capabilityLevel={capabilityLevel} />\n                  ) : (\n                    notAvailable\n                  )\n                }\n              />\n              <PropertyItem label=\"Provider Type\" value={providerType || notAvailable} />\n              <PropertyItem label=\"Provider\" value={provider || notAvailable} />\n              {infraFeatures && (\n                <PropertyItem label=\"Infrastructure Features\" value={mappedInfraFeatures} />\n              )}\n              {validSubscription && (\n                <PropertyItem label=\"Valid Subscriptions\" value={mappedValidSubscription} />\n              )}\n              <PropertyItem label=\"Repository\" value={repository || notAvailable} />\n              <PropertyItem label=\"Container Image\" value={containerImage || notAvailable} />\n              <PropertyItem label=\"Created At\" value={createdAt || notAvailable} />\n              <PropertyItem\n                label=\"Support\"\n                value={\n                  marketplaceSupportWorkflow ? (\n                    <ExternalLink href={marketplaceSupportWorkflow} text=\"Get support\" />\n                  ) : (\n                    support || notAvailable\n                  )\n                }\n              />\n            </PropertiesSidePanel>\n            <div className=\"co-catalog-page__overlay-description\">\n              {getHintBlock()}\n              {longDescription ? <MarkdownView content={longDescription} /> : description}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nOperatorHubItemDetails.defaultProps = {\n  item: null,\n};\n\nexport type OperatorHubItemDetailsProps = {\n  namespace?: string;\n  item: OperatorHubItem;\n};\n\nOperatorHubItemDetails.displayName = 'OperatorHubItemDetails';\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport * as _ from 'lodash';\nimport { CatalogItemHeader, CatalogTile } from '@patternfly/react-catalog-view-extension';\nimport * as classNames from 'classnames';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport { ExternalLink } from '@console/internal/components/utils';\nimport {\n  Button,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateVariant,\n  Modal,\n  Title,\n} from '@patternfly/react-core';\nimport {\n  COMMUNITY_PROVIDERS_WARNING_LOCAL_STORAGE_KEY,\n  GreenCheckCircleIcon,\n} from '@console/shared';\nimport { history } from '@console/internal/components/utils/router';\nimport { TileViewPage } from '@console/internal/components/utils/tile-view-page';\nimport { SubscriptionModel } from '../../models';\nimport { OperatorHubItemDetails } from './operator-hub-item-details';\nimport { communityOperatorWarningModal } from './operator-hub-community-provider-modal';\nimport {\n  OperatorHubItem,\n  InstalledState,\n  ProviderType,\n  CapabilityLevel,\n  InfraFeatures,\n} from './index';\n\nconst osBaseLabel = 'operatorframework.io/os.';\nconst targetGOOSLabel = window.SERVER_FLAGS.GOOS ? `${osBaseLabel}${window.SERVER_FLAGS.GOOS}` : '';\nconst archBaseLabel = 'operatorframework.io/arch.';\nconst targetGOARCHLabel = window.SERVER_FLAGS.GOARCH\n  ? `${archBaseLabel}${window.SERVER_FLAGS.GOARCH}`\n  : '';\n// if no label present, these are the assumed defaults\nconst archDefaultAMD64Label = 'operatorframework.io/arch.amd64';\nconst osDefaultLinuxLabel = 'operatorframework.io/os.linux';\nconst filterByArchAndOS = (items: OperatorHubItem[]): OperatorHubItem[] => {\n  if (!window.SERVER_FLAGS.GOARCH || !window.SERVER_FLAGS.GOOS) {\n    return items;\n  }\n  return items.filter((item: OperatorHubItem) => {\n    // - if the operator has no flags, treat it with the defaults\n    // - if it has any flags, it must list all flags (no defaults applied)\n    const relevantLabels = _.reduce(\n      item?.obj?.metadata?.labels,\n      (result, value: string, label: string): { arch: string[]; os: string[] } => {\n        if (label.includes(archBaseLabel) && value === 'supported') {\n          result.arch.push(label);\n        }\n        if (label.includes(osBaseLabel) && value === 'supported') {\n          result.os.push(label);\n        }\n        return result;\n      },\n      {\n        arch: [],\n        os: [],\n      },\n    );\n\n    if (_.isEmpty(relevantLabels.os)) {\n      relevantLabels.os.push(osDefaultLinuxLabel);\n    }\n\n    if (_.isEmpty(relevantLabels.os)) {\n      relevantLabels.arch.push(archDefaultAMD64Label);\n    }\n\n    return (\n      _.includes(relevantLabels.os, targetGOOSLabel) &&\n      _.includes(relevantLabels.arch, targetGOARCHLabel)\n    );\n  });\n};\n\nconst badge = (text: string) => (\n  <span key=\"1\" className=\"pf-c-badge pf-m-read\">\n    {text}\n  </span>\n);\n\n/**\n * Filter property white list\n */\nconst operatorHubFilterGroups = [\n  'providerType',\n  'provider',\n  'installState',\n  'capabilityLevel',\n  'infraFeatures',\n];\n\nconst operatorHubFilterMap = {\n  providerType: 'Provider Type',\n  provider: 'Provider',\n  installState: 'Install State',\n  capabilityLevel: 'Capability Level',\n  infraFeatures: 'Infrastructure Features',\n};\n\nconst COMMUNITY_PROVIDER_TYPE = 'Community';\nconst MARKETPLACE_PROVIDER_TYPE = 'Marketplace';\n\nconst ignoredProviderTails = [', Inc.', ', Inc', ' Inc.', ' Inc', ', LLC', ' LLC'];\n\nconst determineCategories = (items) => {\n  const newCategories = {};\n  _.each(items, (item) => {\n    _.each(item.categories, (category) => {\n      if (!newCategories[category]) {\n        newCategories[category] = {\n          id: category,\n          label: category,\n          field: 'categories',\n          values: [category],\n        };\n      }\n    });\n  });\n\n  const sortedKeys = _.keys(newCategories).sort((key1, key2) =>\n    key1.toLowerCase().localeCompare(key2.toLowerCase()),\n  );\n\n  return _.reduce(\n    sortedKeys,\n    (categories, key) => {\n      categories[key] = newCategories[key];\n      return categories;\n    },\n    {},\n  );\n};\n\nexport const getProviderValue = (value) => {\n  if (!value) {\n    return value;\n  }\n\n  const providerTail = _.find(ignoredProviderTails, (tail) => value.endsWith(tail));\n  if (providerTail) {\n    return value.substring(0, value.indexOf(providerTail));\n  }\n\n  return value;\n};\n\nconst providerSort = (provider) => {\n  if (provider.value.toLowerCase() === 'red hat') {\n    return '';\n  }\n  return provider.value;\n};\n\nconst providerTypeSort = (provider) => {\n  switch (provider.value) {\n    case ProviderType.RedHat:\n      return 0;\n    case ProviderType.Certified:\n      return 1;\n    case ProviderType.Community:\n      return 2;\n    case ProviderType.Marketplace:\n      return 3;\n    default:\n      return 4;\n  }\n};\n\nconst installedStateSort = (provider) => {\n  switch (provider.value) {\n    case InstalledState.Installed:\n      return 0;\n    case InstalledState.NotInstalled:\n      return 1;\n    default:\n      return 3;\n  }\n};\n\nconst capabilityLevelSort = (provider) => {\n  switch (provider.value) {\n    case CapabilityLevel.BasicInstall:\n      return 0;\n    case CapabilityLevel.SeamlessUpgrades:\n      return 1;\n    case CapabilityLevel.FullLifecycle:\n      return 2;\n    case CapabilityLevel.DeepInsights:\n      return 3;\n    default:\n      return 5;\n  }\n};\n\nconst infraFeaturesSort = (infrastructure) => {\n  switch (infrastructure.value) {\n    case InfraFeatures.Disconnected:\n      return 0;\n    case InfraFeatures.Proxy:\n      return 1;\n    case InfraFeatures.FipsMode:\n      return 2;\n    default:\n      return 3;\n  }\n};\n\nconst sortFilterValues = (values, field) => {\n  let sorter: any = ['value'];\n\n  if (field === 'provider') {\n    sorter = providerSort;\n  }\n\n  if (field === 'providerType') {\n    return _.sortBy(values, [providerTypeSort, 'value']);\n  }\n\n  if (field === 'installState') {\n    sorter = installedStateSort;\n  }\n\n  if (field === 'capabilityLevel') {\n    sorter = capabilityLevelSort;\n  }\n\n  if (field === 'infraFeatures') {\n    sorter = infraFeaturesSort;\n  }\n\n  return _.sortBy(values, sorter);\n};\n\nconst determineAvailableFilters = (initialFilters, items, filterGroups) => {\n  const filters = _.cloneDeep(initialFilters);\n\n  // Always show both install state filters\n  filters.installState = {\n    Installed: {\n      label: 'Installed',\n      value: 'Installed',\n      active: false,\n    },\n    'Not Installed': {\n      label: 'Not Installed',\n      value: 'Not Installed',\n      active: false,\n    },\n  };\n\n  _.each(filterGroups, (field) => {\n    const values = [];\n    _.each(items, (item) => {\n      let value = item[field];\n      let synonyms;\n      if (field === 'provider') {\n        value = getProviderValue(value);\n        synonyms = _.map(ignoredProviderTails, (tail) => `${value}${tail}`);\n      }\n      if (value !== undefined && !Array.isArray(value)) {\n        if (!_.some(values, { value })) {\n          values.push({\n            label: value,\n            synonyms,\n            value,\n            active: false,\n          });\n        }\n      }\n\n      if (Array.isArray(value)) {\n        _.each(value, (v) => {\n          if (!_.some(values, { v })) {\n            values.push({\n              label: v,\n              synonyms,\n              value: v,\n              active: false,\n            });\n          }\n        });\n      }\n    });\n\n    _.forEach(sortFilterValues(values, field), (nextValue: any) =>\n      _.set(filters, [field, nextValue.value], nextValue),\n    );\n  });\n\n  return filters;\n};\n\nexport const keywordCompare = (filterString, item) => {\n  if (!filterString) {\n    return true;\n  }\n  if (!item) {\n    return false;\n  }\n\n  return (\n    item.name.toLowerCase().includes(filterString) ||\n    _.get(item, 'obj.metadata.name', '')\n      .toLowerCase()\n      .includes(filterString) ||\n    (item.description && item.description.toLowerCase().includes(filterString)) ||\n    (item.tags && item.tags.includes(filterString))\n  );\n};\n\nconst setURLParams = (params) => {\n  const url = new URL(window.location.href);\n  const searchParams = `?${params.toString()}${url.hash}`;\n\n  history.replace(`${url.pathname}${searchParams}`);\n};\n\nexport const OperatorHubTileView: React.FC<OperatorHubTileViewProps> = (props) => {\n  const [detailsItem, setDetailsItem] = React.useState(null);\n  const [showDetails, setShowDetails] = React.useState(false);\n\n  const filteredItems = filterByArchAndOS(props.items);\n\n  React.useEffect(() => {\n    const detailsItemID = new URLSearchParams(window.location.search).get('details-item');\n    const currentItem = _.find(filteredItems, { uid: detailsItemID });\n    setDetailsItem(currentItem);\n    setShowDetails(!_.isNil(currentItem));\n  }, [filteredItems]);\n\n  const showCommunityOperator = (item: OperatorHubItem) => (ignoreWarning = false) => {\n    const params = new URLSearchParams(window.location.search);\n    params.set('details-item', item.uid);\n    setURLParams(params);\n    setDetailsItem(item);\n    setShowDetails(true);\n\n    if (ignoreWarning) {\n      localStorage.setItem(COMMUNITY_PROVIDERS_WARNING_LOCAL_STORAGE_KEY, 'true');\n    }\n  };\n\n  const openOverlay = (item: OperatorHubItem) => {\n    const ignoreWarning =\n      localStorage.getItem(COMMUNITY_PROVIDERS_WARNING_LOCAL_STORAGE_KEY) === 'true';\n\n    if (!ignoreWarning && item.providerType === COMMUNITY_PROVIDER_TYPE) {\n      communityOperatorWarningModal({\n        showCommunityOperators: (ignore) => showCommunityOperator(item)(ignore),\n      });\n    } else {\n      const params = new URLSearchParams(window.location.search);\n      params.set('details-item', item.uid);\n      setURLParams(params);\n      setDetailsItem(item);\n      setShowDetails(true);\n    }\n  };\n\n  const closeOverlay = () => {\n    const params = new URLSearchParams(window.location.search);\n    params.delete('details-item');\n    setURLParams(params);\n    setDetailsItem(null);\n    setShowDetails(false);\n  };\n\n  const renderTile = (item: OperatorHubItem) => {\n    if (!item) {\n      return null;\n    }\n\n    const { uid, name, imgUrl, provider, description, installed } = item;\n    const vendor = provider ? `provided by ${provider}` : null;\n    const badges = [COMMUNITY_PROVIDER_TYPE, MARKETPLACE_PROVIDER_TYPE].includes(item.providerType)\n      ? [badge(item.providerType)]\n      : [];\n    const icon = <img className=\"catalog-tile-pf-icon\" loading=\"lazy\" src={imgUrl} alt=\"\" />;\n    return (\n      <CatalogTile\n        className=\"co-catalog-tile\"\n        key={uid}\n        title={name}\n        badges={badges}\n        icon={icon}\n        vendor={vendor}\n        description={description}\n        onClick={() => openOverlay(item)}\n        footer={\n          installed ? (\n            <span>\n              <GreenCheckCircleIcon /> Installed\n            </span>\n          ) : null\n        }\n        data-test={uid}\n      />\n    );\n  };\n\n  const createLink =\n    detailsItem &&\n    `/operatorhub/subscribe?pkg=${detailsItem.obj.metadata.name}&catalog=${detailsItem.catalogSource}&catalogNamespace=${detailsItem.catalogSourceNamespace}&targetNamespace=${props.namespace}`;\n\n  const uninstallLink = () =>\n    detailsItem &&\n    `/k8s/ns/${detailsItem.subscription.metadata.namespace}/${SubscriptionModel.plural}/${detailsItem.subscription.metadata.name}?showDelete=true`;\n\n  if (_.isEmpty(filteredItems)) {\n    return (\n      <>\n        <EmptyState variant={EmptyStateVariant.full} className=\"co-status-card__alerts-msg\">\n          <Title headingLevel=\"h5\" size=\"lg\">\n            No operators available\n          </Title>\n          {window.SERVER_FLAGS.GOOS && window.SERVER_FLAGS.GOARCH && (\n            <EmptyStateBody>\n              There are no operators that match operating system {window.SERVER_FLAGS.GOOS} and\n              architecture {window.SERVER_FLAGS.GOARCH}.\n            </EmptyStateBody>\n          )}\n        </EmptyState>\n      </>\n    );\n  }\n\n  return (\n    <>\n      <TileViewPage\n        items={filteredItems}\n        itemsSorter={(itemsToSort) => _.sortBy(itemsToSort, ({ name }) => name.toLowerCase())}\n        getAvailableCategories={determineCategories}\n        getAvailableFilters={determineAvailableFilters}\n        filterGroups={operatorHubFilterGroups}\n        filterGroupNameMap={operatorHubFilterMap}\n        keywordCompare={keywordCompare}\n        renderTile={renderTile}\n        emptyStateInfo=\"No OperatorHub items are being shown due to the filters being applied.\"\n      />\n      {detailsItem && (\n        <Modal\n          className=\"co-catalog-page__overlay co-catalog-page__overlay--right\"\n          data-test-id=\"operator-modal-box\"\n          header={\n            <>\n              <CatalogItemHeader\n                iconClass={detailsItem.iconClass}\n                iconImg={detailsItem.imgUrl}\n                title={detailsItem.name}\n                vendor={`${detailsItem.version} provided by ${detailsItem.provider}`}\n                data-test-id=\"operator-modal-header\"\n              />\n              <div className=\"co-catalog-page__overlay-actions\">\n                {detailsItem.marketplaceRemoteWorkflow && (\n                  <ExternalLink\n                    additionalClassName=\"pf-c-button pf-m-primary co-catalog-page__overlay-action\"\n                    href={detailsItem.marketplaceRemoteWorkflow}\n                    text={\n                      <>\n                        <div className=\"co-catalog-page__overlay-action-label\">\n                          {detailsItem.marketplaceActionText || 'Purchase'}\n                        </div>\n                        <ExternalLinkAltIcon className=\"co-catalog-page__overlay-action-icon\" />\n                      </>\n                    }\n                  />\n                )}\n                {!detailsItem.installed ? (\n                  <Link\n                    className={classNames(\n                      'pf-c-button',\n                      { 'pf-m-secondary': detailsItem.marketplaceRemoteWorkflow },\n                      { 'pf-m-primary': !detailsItem.marketplaceRemoteWorkflow },\n                      'co-catalog-page__overlay-action',\n                    )}\n                    data-test-id=\"operator-install-btn\"\n                    to={createLink}\n                  >\n                    Install\n                  </Link>\n                ) : (\n                  <Button\n                    className=\"co-catalog-page__overlay-action\"\n                    data-test-id=\"operator-uninstall-btn\"\n                    isDisabled={!detailsItem.installed}\n                    onClick={() => history.push(uninstallLink())}\n                    variant=\"secondary\"\n                  >\n                    Uninstall\n                  </Button>\n                )}\n              </div>\n            </>\n          }\n          isOpen={!!detailsItem && showDetails}\n          onClose={closeOverlay}\n          title={detailsItem.name}\n        >\n          <OperatorHubItemDetails namespace={props.namespace} item={detailsItem} />\n        </Modal>\n      )}\n    </>\n  );\n};\n\nexport type OperatorHubTileViewProps = {\n  namespace?: string;\n  items: OperatorHubItem[];\n};\n\nOperatorHubTileView.displayName = 'OperatorHubTileView';\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Helmet } from 'react-helmet';\nimport { Link } from 'react-router-dom';\nimport { match } from 'react-router';\nimport {\n  Firehose,\n  PageHeading,\n  StatusBox,\n  MsgBox,\n  ExternalLink,\n  skeletonCatalog,\n} from '@console/internal/components/utils';\nimport { withFallback } from '@console/shared/src/components/error/error-boundary';\nimport { ErrorBoundaryFallback } from '@console/internal/components/error';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { fromRequirements } from '@console/internal/module/k8s/selector';\nimport { PackageManifestModel, OperatorGroupModel, SubscriptionModel } from '../../models';\nimport { PackageManifestKind, OperatorGroupKind, SubscriptionKind } from '../../types';\nimport { iconFor } from '..';\nimport { installedFor, subscriptionFor } from '../operator-group';\nimport { getOperatorProviderType } from './operator-hub-utils';\nimport { OperatorHubTileView } from './operator-hub-items';\nimport {\n  OperatorHubItem,\n  OperatorHubCSVAnnotations,\n  InstalledState,\n  OperatorHubCSVAnnotationKey,\n} from './index';\nimport { parseJSONAnnotation } from '@console/shared';\n\nconst ANNOTATIONS_WITH_JSON = [\n  OperatorHubCSVAnnotationKey.infrastructureFeatures,\n  OperatorHubCSVAnnotationKey.validSubscription,\n];\n\nexport const OperatorHubList: React.SFC<OperatorHubListProps> = (props) => {\n  const { operatorGroup, subscription, loaded, loadError, namespace = '' } = props;\n  // FIXME optional chaining\n  const marketplaceItems = _.get(\n    props.marketplacePackageManifest,\n    'data',\n    [] as PackageManifestKind[],\n  );\n\n  const localItems = _.get(props, 'packageManifest.data', [] as PackageManifestKind[]); // FIXME optional chaining\n  const getPackageStatus = (pkg) => _.get(pkg, 'status'); // FIXME optional chaining and/or is this needed?\n\n  const items: OperatorHubItem[] = React.useMemo(() => {\n    return marketplaceItems\n      .concat(localItems)\n      .filter((pkg) => {\n        // if a package does not have status.defaultChannel, exclude it so the app doesn't fail\n        const { defaultChannel } = getPackageStatus(pkg);\n        if (!defaultChannel) {\n          // eslint-disable-next-line no-console\n          console.warn(\n            `PackageManifest ${pkg.metadata.name} has no status.defaultChannel and has been excluded`,\n          );\n          return false;\n        }\n        return true;\n      })\n      .map(\n        (pkg): OperatorHubItem => {\n          const { channels, defaultChannel } = getPackageStatus(pkg);\n          const { currentCSVDesc } = _.find(channels || [], { name: defaultChannel } as any);\n          // FIXME optional chaining\n          const currentCSVAnnotations: OperatorHubCSVAnnotations = _.get(\n            currentCSVDesc,\n            'annotations',\n            {},\n          );\n\n          const [infraFeatures, validSubscription] = ANNOTATIONS_WITH_JSON.map((annotationKey) => {\n            return parseJSONAnnotation(currentCSVAnnotations, annotationKey, () =>\n              // eslint-disable-next-line no-console\n              console.warn(`Error parsing annotation in PackageManifest ${pkg.metadata.name}`),\n            );\n          });\n\n          const {\n            certifiedLevel,\n            healthIndex,\n            repository,\n            containerImage,\n            createdAt,\n            support,\n            capabilities: capabilityLevel,\n            [OperatorHubCSVAnnotationKey.actionText]: marketplaceActionText,\n            [OperatorHubCSVAnnotationKey.remoteWorkflow]: marketplaceRemoteWorkflow,\n            [OperatorHubCSVAnnotationKey.supportWorkflow]: marketplaceSupportWorkflow,\n          } = currentCSVAnnotations;\n\n          return {\n            obj: pkg,\n            kind: PackageManifestModel.kind,\n            name: _.get(currentCSVDesc, 'displayName', pkg.metadata.name), // FIXME optional chaining\n            uid: `${pkg.metadata.name}-${pkg.status.catalogSource}-${pkg.status.catalogSourceNamespace}`,\n            installed: installedFor(subscription.data)(operatorGroup.data)(pkg.status.packageName)(\n              namespace,\n            ),\n            subscription: subscriptionFor(subscription.data)(operatorGroup.data)(\n              pkg.status.packageName,\n            )(namespace),\n            // FIXME: Just use `installed`\n            installState: installedFor(subscription.data)(operatorGroup.data)(\n              pkg.status.packageName,\n            )(namespace)\n              ? InstalledState.Installed\n              : InstalledState.NotInstalled,\n            imgUrl: iconFor(pkg),\n            description: currentCSVAnnotations.description || currentCSVDesc.description,\n            longDescription: currentCSVDesc.description || currentCSVAnnotations.description,\n            provider: _.get(pkg, 'status.provider.name', _.get(pkg, 'metadata.labels.provider')), // FIXME optional chaining\n            providerType: getOperatorProviderType(pkg),\n            tags: [],\n            version: _.get(currentCSVDesc, 'version'), // FIXME optional chaining\n            categories: _.get(currentCSVAnnotations, 'categories', '') // FIXME optional chaining\n              .split(',')\n              .map((category) => category.trim()),\n            catalogSource: _.get(pkg, 'status.catalogSource'), // FIXME optional chaining\n            catalogSourceNamespace: _.get(pkg, 'status.catalogSourceNamespace'), // FIXME optional chaining\n            certifiedLevel,\n            healthIndex,\n            repository,\n            containerImage,\n            createdAt,\n            support,\n            capabilityLevel,\n            marketplaceActionText,\n            marketplaceRemoteWorkflow,\n            marketplaceSupportWorkflow,\n            validSubscription,\n            infraFeatures,\n          };\n        },\n      );\n  }, [localItems, marketplaceItems, namespace, operatorGroup.data, subscription.data]);\n\n  const uniqueItems = _.uniqBy(items, 'uid');\n  if (uniqueItems.length !== items.length) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      `${items.length - uniqueItems.length} duplicate packagemanifests returned from olm query.`,\n    );\n  }\n\n  return (\n    <StatusBox\n      skeleton={skeletonCatalog}\n      data={items}\n      loaded={loaded}\n      loadError={loadError}\n      label=\"Resources\"\n      EmptyMsg={() => (\n        <MsgBox\n          title=\"No OperatorHub Items Found\"\n          detail={\n            <span>\n              Please check that the OperatorHub is running and that you have created a valid\n              OperatorSource. For more information about OperatorHub, please click{' '}\n              <ExternalLink\n                href=\"https://github.com/operator-framework/operator-marketplace\"\n                text=\"here\"\n              />\n              .\n            </span>\n          }\n        />\n      )}\n    >\n      <OperatorHubTileView items={uniqueItems} namespace={namespace} />\n    </StatusBox>\n  );\n};\n\nexport const OperatorHubPage = withFallback(\n  (props: OperatorHubPageProps) => (\n    <>\n      <Helmet>\n        <title>OperatorHub</title>\n      </Helmet>\n      <div className=\"co-m-page__body\">\n        <div className=\"co-catalog\">\n          <PageHeading title=\"OperatorHub\" />\n          <p className=\"co-catalog-page__description\">\n            Discover Operators from the Kubernetes community and Red Hat partners, curated by Red\n            Hat. You can purchase commercial software through{' '}\n            <ExternalLink\n              href=\"https://marketplace.redhat.com/en-us?utm_source=openshift_console\"\n              text=\"Red Hat Marketplace\"\n            />\n            . You can install Operators on your clusters to provide optional add-ons and shared\n            services to your developers. After installation, the Operator capabilities will appear\n            in the <Link to=\"/catalog\">Developer Catalog</Link> providing a self-service experience.\n          </p>\n          <div className=\"co-catalog__body\">\n            <Firehose\n              resources={[\n                {\n                  isList: true,\n                  kind: referenceForModel(OperatorGroupModel),\n                  prop: 'operatorGroup',\n                },\n                {\n                  isList: true,\n                  kind: referenceForModel(PackageManifestModel),\n                  namespace: props.match.params.ns,\n                  selector: { 'openshift-marketplace': 'true' },\n                  prop: 'marketplacePackageManifest',\n                },\n                {\n                  isList: true,\n                  kind: referenceForModel(PackageManifestModel),\n                  namespace: props.match.params.ns,\n                  selector: fromRequirements([\n                    { key: 'opsrc-owner-name', operator: 'DoesNotExist' },\n                    { key: 'csc-owner-name', operator: 'DoesNotExist' },\n                  ]),\n                  prop: 'packageManifest',\n                },\n                {\n                  isList: true,\n                  kind: referenceForModel(SubscriptionModel),\n                  prop: 'subscription',\n                },\n              ]}\n            >\n              {/* FIXME(alecmerdler): Hack because `Firehose` injects props without TypeScript knowing about it */}\n              <OperatorHubList {...(props as any)} namespace={props.match.params.ns} />\n            </Firehose>\n          </div>\n        </div>\n      </div>\n    </>\n  ),\n  ErrorBoundaryFallback,\n);\n\nexport type OperatorHubPageProps = {\n  match: match<{ ns?: string }>;\n};\n\nexport type OperatorHubListProps = {\n  namespace?: string;\n  operatorGroup: { loaded: boolean; data?: OperatorGroupKind[] };\n  packageManifest: { loaded: boolean; data?: PackageManifestKind[] };\n  marketplacePackageManifest: { loaded: boolean; data?: PackageManifestKind[] };\n  subscription: { loaded: boolean; data?: SubscriptionKind[] };\n  loaded: boolean;\n  loadError?: string;\n};\n\nOperatorHubList.displayName = 'OperatorHubList';\nOperatorHubPage.displayName = 'OperatorHubPage';\n","import * as _ from 'lodash';\n\nexport const operatorProviderTypeMap = {\n  redhat: 'Red Hat',\n  marketplace: 'Marketplace',\n  certified: 'Certified',\n  community: 'Community',\n};\n\nconst getCustomOperatorProviderType = (packageManifest) =>\n  packageManifest.status.catalogSourceDisplayName || packageManifest.status.catalogSource;\nexport const getOperatorProviderType = (packageManifest) => {\n  const srcProvider = _.get(packageManifest, 'metadata.labels.opsrc-provider');\n  return _.get(\n    operatorProviderTypeMap,\n    srcProvider,\n    getCustomOperatorProviderType(packageManifest),\n  );\n};\n"],"mappings":";;;;;;;;;;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAuBA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAMA;AAEA;AAIA;AACA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAbA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAIA;AAEA;AAOA;AAUA;AAQA;AACA;AAWA;;;;;;;;;;;;;ACxFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAGA;AACA;AAGA;AAOA;AAGA;AAGA;AAMA;AAIA;AACA;AACA;AACA;AAgBA;AAEA;AACA;AACA;AAEA;;AACA;AACA;AAQA;AAEA;AACA;AAEA;AAKA;AAEA;AAQA;AAEA;AACA;AAEA;AAKA;AACA;AAOA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AAWA;AACA;AACA;AAOA;AAEA;AACA;AACA;AAOA;;;;;;;;;;;;;ACtMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAIA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AAMA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAGA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAaA;AACA;AAMA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAGA;;AAEA;;AACA;AACA;AAKA;AAEA;AAEA;AAWA;AAMA;AAOA;AACA;AAMA;AAGA;AAKA;AA+BA;AAKA;AAOA;;;;;;;;;;;;;ACpgBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AAEA;AAaA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAGA;AAEA;;AAaA;AACA;AAKA;AAKA;AAGA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAwBA;AACA;;;;;;;;;;;;;AC/PA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAKA;;;;;A","sourceRoot":""}