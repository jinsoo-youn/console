{"version":3,"file":"object-bucket-claim-page-9de5ec30c558694a24f6.js","sources":["webpack:///./packages/noobaa-storage-plugin/src/components/object-bucket-claim-page/menu-actions.ts","webpack:///./packages/noobaa-storage-plugin/src/components/object-bucket-claim-page/modals/attach-deployment-obc-modal.tsx","webpack:///./packages/noobaa-storage-plugin/src/components/object-bucket-claim-page/object-bucket-claim.tsx","webpack:///./packages/noobaa-storage-plugin/src/components/object-bucket-claim-page/secret.tsx","webpack:///./packages/noobaa-storage-plugin/src/table-filters.ts","webpack:///./packages/noobaa-storage-plugin/src/utils.ts"],"sourcesContent":["import { asAccessReview, Kebab } from '@console/internal/components/utils';\nimport { K8sKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport { attachDeploymentToOBCModal } from './modals/attach-deployment-obc-modal';\n\nconst attachDeployment = (kind: K8sKind, resource: K8sResourceKind) => ({\n  label: 'Attach to Deployment',\n  callback: () =>\n    attachDeploymentToOBCModal({\n      kind,\n      resource,\n    }),\n  accessReview: asAccessReview(kind, resource, 'patch'),\n});\n\nexport const menuActions = [attachDeployment, ...Kebab.factory.common];\n\nexport const menuActionCreator = (kindObj: K8sKind, resource: K8sResourceKind) =>\n  menuActions.map((action) => action(kindObj, resource));\n","import * as _ from 'lodash';\nimport * as React from 'react';\nimport { connect } from 'react-redux';\nimport {\n  createModalLauncher,\n  ModalBody,\n  ModalComponentProps,\n  ModalTitle,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory/modal';\nimport {\n  Dropdown,\n  FirehoseResult,\n  Firehose,\n  HandlePromiseProps,\n  history,\n  resourceObjPath,\n  withHandlePromise,\n} from '@console/internal/components/utils';\nimport { DeploymentModel } from '@console/internal/models';\nimport {\n  ContainerSpec,\n  K8sKind,\n  k8sPatch,\n  K8sResourceKind,\n  referenceFor,\n} from '@console/internal/module/k8s/';\nimport { getName } from '@console/shared';\n\nconst AttachDeploymentToOBCModal = withHandlePromise((props: AttachDeploymentToOBCModalProps) => {\n  const [requestDeployment, setRequestedDeployment] = React.useState({});\n  const [deploymentObjects, setDeployments] = React.useState({});\n  const [deploymentNames, setDeploymentNames] = React.useState({});\n  const { handlePromise, close, cancel, resource, deployments } = props;\n\n  const obcName = getName(resource);\n  const deploymentData = _.get(deployments, 'data');\n  const inProgress = _.get(props, 'loaded');\n  const errorMessage = _.get(props, 'loadError');\n\n  React.useEffect(() => {\n    const deploymentObjectList = {};\n    const deploymentNameList = {};\n\n    _.map(deploymentData, (data) => {\n      const name = getName(data);\n      deploymentObjectList[name] = data;\n      deploymentNameList[name] = name;\n    });\n\n    setDeployments(deploymentObjectList);\n    setDeploymentNames(deploymentNameList);\n  }, [deploymentData, deployments]);\n\n  const getPatches = () => {\n    const configMapRef = {\n      configMapRef: {\n        name: obcName,\n      },\n    };\n    const secretMapRef = {\n      secretRef: {\n        name: obcName,\n      },\n    };\n\n    const containers: ContainerSpec[] = _.get(\n      requestDeployment,\n      'spec.template.spec.containers',\n      [],\n    );\n    const patches = containers.reduce((patch, container, i) => {\n      if (_.isEmpty(container.envFrom)) {\n        patch.push({\n          op: 'add',\n          path: `/spec/template/spec/containers/${i}/envFrom`,\n          value: [configMapRef],\n        });\n        patch.push({\n          op: 'add',\n          path: `/spec/template/spec/containers/${i}/envFrom/-`,\n          value: secretMapRef,\n        });\n      } else {\n        patch.push({\n          op: 'add',\n          path: `/spec/template/spec/containers/${i}/envFrom/-`,\n          value: configMapRef,\n        });\n        patch.push({\n          op: 'add',\n          path: `/spec/template/spec/containers/${i}/envFrom/-`,\n          value: secretMapRef,\n        });\n      }\n      return patch;\n    }, []);\n    return patches;\n  };\n\n  const submit: React.FormEventHandler<HTMLFormElement> = (e) => {\n    e.preventDefault();\n    handlePromise(k8sPatch(DeploymentModel, requestDeployment, getPatches()))\n      .then((res) => {\n        history.push(`${resourceObjPath(res, referenceFor(res))}/environment`);\n        close();\n      })\n      .catch(() => {\n        close();\n      });\n  };\n\n  return (\n    <form onSubmit={submit} name=\"form\" className=\"modal-content modal-content--no-inner-scroll\">\n      <ModalTitle>Attach OBC to a Deployment</ModalTitle>\n      <ModalBody>\n        <label htmlFor=\"dropdown-selectbox\" className=\"control-label co-required\">\n          Deployment Name\n        </label>\n        <Dropdown\n          items={deploymentNames}\n          dropDownClassName=\"dropdown--full-width\"\n          id=\"dropdown-selectbox\"\n          onChange={(deploymentName) => setRequestedDeployment(deploymentObjects[deploymentName])}\n        />\n      </ModalBody>\n      <ModalSubmitFooter\n        errorMessage={errorMessage}\n        inProgress={!inProgress}\n        submitText=\"Attach\"\n        cancel={cancel}\n      />\n    </form>\n  );\n});\n\nconst AttachDeploymentToOBCFirehose: React.FC<AttachDeploymentToOBCFirehoseProps> = (props) => {\n  const { namespace } = props;\n  const resource = [{ kind: DeploymentModel.kind, namespace, prop: 'deployments', isList: true }];\n  return (\n    <Firehose resources={resource}>\n      <AttachDeploymentToOBCModal {...props} />\n    </Firehose>\n  );\n};\n\nconst attachDeploymentToOBCModalStateToProps = ({ UI }) => {\n  const namespace = UI.getIn(['activeNamespace']);\n  return {\n    namespace,\n  };\n};\n\nconst AttachDeploymentToOBCModalConnected = connect(attachDeploymentToOBCModalStateToProps)(\n  AttachDeploymentToOBCFirehose,\n);\n\nexport const attachDeploymentToOBCModal = createModalLauncher(AttachDeploymentToOBCModalConnected);\n\ntype AttachDeploymentToOBCModalProps = HandlePromiseProps &\n  ModalComponentProps & {\n    kind: K8sKind;\n    resource: K8sResourceKind;\n    deployments?: FirehoseResult<K8sResourceKind[]>;\n  };\n\ntype AttachDeploymentToOBCFirehoseProps = ModalComponentProps & {\n  kind: K8sKind;\n  resource: K8sResourceKind;\n  namespace: string;\n};\n","import * as classNames from 'classnames';\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport { ResourceEventStream } from '@console/internal/components/events';\nimport {\n  DetailsPage,\n  ListPage,\n  Table,\n  TableRow,\n  TableData,\n  RowFunction,\n} from '@console/internal/components/factory';\nimport {\n  Kebab,\n  navFactory,\n  ResourceKebab,\n  ResourceLink,\n  resourcePathFromModel,\n  ResourceSummary,\n  SectionHeading,\n} from '@console/internal/components/utils';\nimport { K8sResourceKind, referenceForModel } from '@console/internal/module/k8s';\nimport {\n  NooBaaObjectBucketClaimModel,\n  NooBaaObjectBucketModel,\n} from '@console/noobaa-storage-plugin/src/models';\nimport { Status } from '@console/shared';\nimport { sortable } from '@patternfly/react-table';\nimport { obcStatusFilter } from '../../table-filters';\nimport { isBound, getPhase } from '../../utils';\nimport { menuActionCreator, menuActions } from './menu-actions';\nimport { GetSecret } from './secret';\n\nconst kind = referenceForModel(NooBaaObjectBucketClaimModel);\n\nexport const OBCStatus: React.FC<OBCStatusProps> = ({ obc }) => <Status status={getPhase(obc)} />;\n\nconst tableColumnClasses = [\n  classNames('col-lg-3', 'col-md-2', 'col-sm-4', 'col-xs-6'),\n  classNames('col-lg-2', 'col-md-2', 'col-sm-4', 'col-xs-6'),\n  classNames('col-lg-2', 'col-md-2', 'col-sm-4', 'hidden-xs'),\n  classNames('col-lg-2', 'col-md-3', 'hidden-sm', 'hidden-xs'),\n  classNames('col-lg-3', 'col-md-3', 'hidden-sm', 'hidden-xs'),\n  Kebab.columnClass,\n];\n\nconst OBCTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Status',\n      sortField: 'status.phase',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Secret',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: 'Storage Class',\n      sortField: 'spec.storageClassName',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[5] },\n    },\n  ];\n};\nOBCTableHeader.displayName = 'OBCTableHeader';\n\nconst OBCTableRow: RowFunction<K8sResourceKind> = ({ obj, index, key, style }) => {\n  const storageClassName = _.get(obj, 'spec.storageClassName');\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={kind}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n          title={obj.metadata.name}\n        />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink\n          kind=\"Namespace\"\n          name={obj.metadata.namespace}\n          title={obj.metadata.namespace}\n        />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[2])}>\n        <OBCStatus obc={obj} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[3])}>\n        {isBound(obj) ? (\n          <ResourceLink\n            kind=\"Secret\"\n            name={obj.metadata.name}\n            title={obj.metadata.name}\n            namespace={obj.metadata.namespace}\n          />\n        ) : (\n          '-'\n        )}\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        {storageClassName ? <ResourceLink kind=\"StorageClass\" name={storageClassName} /> : '-'}\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={obj} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst Details: React.FC<DetailsProps> = ({ obj }) => {\n  const storageClassName = _.get(obj, 'spec.storageClassName');\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Object Bucket Claim Details\" />\n        <div className=\"row\">\n          <div className=\"col-sm-6\">\n            <ResourceSummary resource={obj} />\n            {isBound(obj) && (\n              <>\n                <dt>Secret</dt>\n                <dd>\n                  <ResourceLink\n                    kind=\"Secret\"\n                    name={obj.metadata.name}\n                    title={obj.metadata.name}\n                    namespace={obj.metadata.namespace}\n                  />\n                </dd>\n              </>\n            )}\n          </div>\n          <div className=\"col-sm-6\">\n            <dt>Status</dt>\n            <dd>\n              <OBCStatus obc={obj} />\n            </dd>\n            <dt>Storage Class</dt>\n            <dd>\n              {storageClassName ? (\n                <ResourceLink kind=\"StorageClass\" name={storageClassName} />\n              ) : (\n                '-'\n              )}\n            </dd>\n            {isBound(obj) && (\n              <>\n                <dt>Object Bucket</dt>\n                <dd>\n                  <ResourceLink\n                    kind={referenceForModel(NooBaaObjectBucketModel)}\n                    name={obj.spec.ObjectBucketName}\n                  />\n                </dd>\n              </>\n            )}\n          </div>\n        </div>\n      </div>\n      <GetSecret obj={obj} />\n    </>\n  );\n};\n\nconst ObjectBucketClaimsList: React.FC = (props) => (\n  <Table\n    {...props}\n    aria-label=\"Object Bucket Claims\"\n    Header={OBCTableHeader}\n    Row={OBCTableRow}\n    virtualize\n  />\n);\n\nexport const ObjectBucketClaimsPage: React.FC = (props) => {\n  const createProps = {\n    to: `${resourcePathFromModel(\n      NooBaaObjectBucketClaimModel,\n      null,\n      _.get(props, 'namespace', 'default'),\n    )}/~new/form`,\n  };\n  return (\n    <ListPage\n      {...props}\n      ListComponent={ObjectBucketClaimsList}\n      kind={referenceForModel(NooBaaObjectBucketClaimModel)}\n      canCreate\n      createProps={createProps}\n      rowFilters={[obcStatusFilter]}\n    />\n  );\n};\n\nexport const ObjectBucketClaimsDetailsPage = (props) => (\n  <DetailsPage\n    {...props}\n    menuActions={menuActionCreator}\n    pages={[\n      navFactory.details(Details),\n      navFactory.editYaml(),\n      navFactory.events(ResourceEventStream),\n    ]}\n  />\n);\n\ntype OBCStatusProps = {\n  obc: K8sResourceKind;\n};\n\ntype DetailsProps = {\n  obj: K8sResourceKind;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Base64 } from 'js-base64';\nimport { SecretValue } from '@console/internal/components/configmap-and-secret-data';\nimport { ConfigMapModel, SecretModel } from '@console/internal/models';\nimport { k8sGet, K8sResourceKind } from '@console/internal/module/k8s';\nimport { getName, getNamespace } from '@console/shared';\nimport { SectionHeading, EmptyBox } from '@console/internal/components/utils';\nimport { Button } from '@patternfly/react-core';\nimport { EyeSlashIcon, EyeIcon } from '@patternfly/react-icons';\n\nexport const GetSecret: React.FC<GetSecretProps> = ({ obj }) => {\n  const [reveal, setReveal] = React.useState(false);\n  const [secretData, setSecretData] = React.useState([]);\n\n  const name = getName(obj);\n  const namespace = getNamespace(obj);\n\n  React.useEffect(() => {\n    const secret = k8sGet(SecretModel, name, namespace);\n    const configMap = k8sGet(ConfigMapModel, name, namespace);\n    Promise.all([secret, configMap])\n      .then((data) => {\n        const bucketName = _.get(data[1], 'data.BUCKET_NAME');\n        const endpoint = `${_.get(data[1], 'data.BUCKET_HOST')}:${_.get(\n          data[1],\n          'data.BUCKET_PORT',\n        )}`;\n        const accessKey = Base64.decode(_.get(data[0], 'data.AWS_ACCESS_KEY_ID'));\n        const secretKey = Base64.decode(_.get(data[0], 'data.AWS_SECRET_ACCESS_KEY'));\n        const secretValues = [\n          { field: 'Endpoint', value: endpoint },\n          { field: 'Bucket Name', value: bucketName },\n          { field: 'Access Key', value: accessKey },\n          { field: 'Secret Key', value: secretKey },\n        ];\n        setSecretData(secretValues);\n      })\n      .catch(() => undefined);\n  }, [name, namespace]);\n\n  const dl = secretData.length\n    ? secretData.reduce((acc, datum) => {\n        const { field, value } = datum;\n        acc.push(<dt key={`${field}-k`}>{field}</dt>);\n        acc.push(\n          <dd key={`${field}-v`}>\n            <SecretValue value={value} reveal={reveal} encoded={false} />\n          </dd>,\n        );\n        return acc;\n      }, [])\n    : [];\n\n  return dl.length ? (\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text=\"Object Bucket Claim Data\">\n        {secretData.length ? (\n          <Button\n            type=\"button\"\n            onClick={() => setReveal(!reveal)}\n            variant=\"link\"\n            className=\"pf-m-link--align-right\"\n          >\n            {reveal ? (\n              <>\n                <EyeSlashIcon className=\"co-icon-space-r\" />\n                Hide Values\n              </>\n            ) : (\n              <>\n                <EyeIcon className=\"co-icon-space-r\" />\n                Reveal Values\n              </>\n            )}\n          </Button>\n        ) : null}\n      </SectionHeading>\n      {dl.length ? <dl className=\"secret-data\">{dl}</dl> : <EmptyBox label=\"Data\" />}\n    </div>\n  ) : null;\n};\n\ntype GetSecretProps = {\n  obj: K8sResourceKind;\n};\n","import * as _ from 'lodash';\nimport { RowFilter } from '@console/internal/components/filter-toolbar';\nimport { getPhase } from './utils';\n\nconst allPhases = ['Pending', 'Bound', 'Lost'];\n\nexport const obcStatusFilter: RowFilter = {\n  type: 'obc-status',\n  filterGroupName: 'Status',\n  reducer: getPhase,\n  items: _.map(allPhases, (phase) => ({\n    id: phase,\n    title: phase,\n  })),\n  filter: (phases, obc) => {\n    if (!phases || !phases.selected) {\n      return true;\n    }\n    const phase = getPhase(obc);\n    return (\n      phases.selected.has(phase) || !_.includes(phases.all, phase) || _.isEmpty(phases.selected)\n    );\n  },\n};\n\nexport const obStatusFilter: RowFilter = {\n  type: 'ob-status',\n  filterGroupName: 'Status',\n  reducer: getPhase,\n  items: _.map(allPhases, (phase) => ({\n    id: phase,\n    title: phase,\n  })),\n  filter: (phases, ob) => {\n    if (!phases || !phases.selected) {\n      return true;\n    }\n    const phase = getPhase(ob);\n    return (\n      phases.selected.has(phase) || !_.includes(phases.all, phase) || _.isEmpty(phases.selected)\n    );\n  },\n};\n","import * as _ from 'lodash';\nimport { Alert } from '@console/internal/components/monitoring';\nimport { PrometheusResponse } from '@console/internal/components/graphs';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { StorageClass } from '@console/internal/components/storage-class-form';\n\nexport const filterNooBaaAlerts = (alerts: Alert[]): Alert[] =>\n  alerts.filter((alert) => _.get(alert, 'annotations.storage_type') === 'NooBaa');\n\nexport const getGaugeValue = (data) => _.get(data, 'data.result[0].value[1]');\n\nexport const getMetric = (result: PrometheusResponse, metric: string): string =>\n  _.get(result, ['data', 'result', '0', 'metric', metric], null);\n\nexport type PrometheusMetricResult = {\n  metric: { [key: string]: any };\n  value?: [number, string | number];\n};\n\nexport const getPhase = (obj: K8sResourceKind): string => {\n  return _.get(obj, 'status.phase', 'Lost');\n};\n\nexport const isBound = (obj: K8sResourceKind): boolean => getPhase(obj) === 'Bound';\n\nexport const getSCProvisioner = (obj: StorageClass) => obj.provisioner;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAOA;AASA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AAOA;AAQA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;;;;;;;;;;;;;AC7JA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAQA;AASA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAOA;AACA;AAMA;AACA;AAEA;AAYA;AAGA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAUA;AACA;AACA;AACA;AAEA;AACA;AAOA;AAEA;AACA;AACA;AAUA;AAGA;AAEA;AAUA;AACA;AACA;AAKA;AACA;AAUA;AAEA;AAKA;AACA;AACA;AACA;;;;;;;;;;;;;AC/NA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AAEA;AAUA;AAEA;AAGA;AAEA;AAKA;AAGA;;;;;;;;;;;;;ACjFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;;;;;;;;;;;;AC1CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAGA;AAEA;AAQA;AACA;AACA;AAEA;AAEA;;;;;A","sourceRoot":""}