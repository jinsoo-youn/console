{"version":3,"file":"20-dbddd5602676edf03965.js","sources":["webpack:///./packages/operator-lifecycle-manager/src/components/create-catalog-source.tsx"],"sourcesContent":["import * as React from 'react';\nimport Helmet from 'react-helmet';\nimport { match } from 'react-router-dom';\nimport { ActionGroup, Button, Form, FormGroup, TextInput } from '@patternfly/react-core';\nimport {\n  ButtonBar,\n  history,\n  NsDropdown,\n  withHandlePromise,\n  HandlePromiseProps,\n} from '@console/internal/components/utils';\nimport { RadioGroup } from '@console/internal/components/radio';\nimport { k8sCreate } from '@console/internal/module/k8s';\nimport { CatalogSourceModel } from '../models';\n\nenum AvailabilityValue {\n  ALL_NAMESPACES = '0',\n  SINGLE_NAMESPACE = '1',\n}\n\nconst availabilityKinds = [\n  {\n    value: AvailabilityValue.ALL_NAMESPACES,\n    title: 'Cluster-wide catalog source',\n    desc: 'Catalog will be available in all namespaces',\n  },\n  {\n    value: AvailabilityValue.SINGLE_NAMESPACE,\n    title: 'Namespace catalog source',\n    desc: 'Catalog will only be available in a single namespace',\n  },\n];\n\nexport const CreateCatalogSource: React.FC<CreateCatalogSourceProps> = withHandlePromise(\n  ({ handlePromise, inProgress, errorMessage }) => {\n    const [availability, setAvailability] = React.useState(AvailabilityValue.ALL_NAMESPACES);\n    const [image, setImage] = React.useState('');\n    const [displayName, setDisplayName] = React.useState('');\n    const [name, setName] = React.useState('');\n    const [namespace, setNamespace] = React.useState('');\n    const [publisher, setPublisher] = React.useState('');\n    const onSave = React.useCallback(\n      (e: React.FormEvent<EventTarget>) => {\n        e.preventDefault();\n        return handlePromise(\n          k8sCreate(CatalogSourceModel, {\n            apiVersion: `${CatalogSourceModel.apiGroup}/${CatalogSourceModel.apiVersion}`,\n            kind: CatalogSourceModel.kind,\n            metadata: {\n              name,\n              namespace:\n                availability === AvailabilityValue.ALL_NAMESPACES\n                  ? 'openshift-marketplace'\n                  : namespace,\n            },\n            spec: {\n              displayName,\n              image,\n              publisher,\n              sourceType: 'grpc',\n            },\n          }),\n        ).then(() => history.goBack());\n      },\n      [availability, displayName, handlePromise, image, name, namespace, publisher],\n    );\n\n    const onNamespaceChange = React.useCallback((value: string) => {\n      setNamespace(value);\n    }, []);\n\n    const onAvailabiltiyChange = ({ target: { value } }: React.ChangeEvent<HTMLInputElement>) => {\n      setAvailability(value as AvailabilityValue);\n    };\n\n    return (\n      <div className=\"co-m-pane__body\">\n        <Helmet>\n          <title>Create Catalog Source</title>\n        </Helmet>\n        <h1 className=\"co-m-pane__heading\">Create Catalog Source</h1>\n        <p className=\"co-m-pane__explanation\">\n          Create a catalog source in order to make operators available in OperatorHub.\n        </p>\n        <Form onSubmit={onSave}>\n          <FormGroup fieldId=\"catalog-source-name\" isRequired label=\"Catalog source name\">\n            <TextInput\n              id=\"catalog-source-name\"\n              isRequired\n              name=\"catalog-source-name\"\n              onChange={setName}\n              placeholder=\"e.g. custom-catalog-source\"\n              type=\"text\"\n              value={name}\n            />\n          </FormGroup>\n          <FormGroup fieldId=\"catalog-source-display-name\" label=\"Display name\">\n            <TextInput\n              id=\"catalog-source-display-name\"\n              name=\"caltalog-source-display-name\"\n              onChange={setDisplayName}\n              placeholder=\"e.g. Custom Catalog Source\"\n              type=\"text\"\n              value={displayName}\n            />\n          </FormGroup>\n          <FormGroup fieldId=\"catalog-source-publisher\" label=\"Publisher name\">\n            <TextInput\n              id=\"catalog-source-publisher\"\n              isRequired\n              name=\"catalog-source-publisher\"\n              onChange={setPublisher}\n              placeholder=\"e.g. John Doe\"\n              type=\"text\"\n              value={publisher}\n            />\n          </FormGroup>\n          <FormGroup\n            label=\"Image (URL of container image)\"\n            isRequired\n            fieldId=\"catalog-source-image\"\n            helperText=\"URL of container image hosted on a registry\"\n          >\n            <TextInput\n              aria-describedby=\"catalog-source-image-helper\"\n              isRequired\n              type=\"text\"\n              id=\"catalog-source-image\"\n              name=\"catalog-source-image\"\n              onChange={setImage}\n              placeholder=\"e.g. quay.io/johndoe/catalog-registry:latest\"\n              value={image}\n            />\n          </FormGroup>\n          <FormGroup fieldId=\"catalog-source-availability\" label=\"Availability\">\n            <RadioGroup\n              currentValue={availability}\n              items={availabilityKinds}\n              onChange={onAvailabiltiyChange}\n            />\n          </FormGroup>\n          {availability === AvailabilityValue.SINGLE_NAMESPACE && (\n            <FormGroup fieldId=\"catalog-source-namespace\" label=\"Namespace\" isRequired>\n              <NsDropdown\n                selectedKey={namespace}\n                onChange={onNamespaceChange}\n                id=\"catalog-source-namespace\"\n              />\n            </FormGroup>\n          )}\n          <ButtonBar errorMessage={errorMessage} inProgress={inProgress}>\n            <ActionGroup className=\"pf-c-form__group--no-top-margin\">\n              <Button type=\"submit\" variant=\"primary\" id=\"save-changes\">\n                Create\n              </Button>\n              <Button type=\"button\" variant=\"secondary\" id=\"cancel\" onClick={history.goBack}>\n                Cancel\n              </Button>\n            </ActionGroup>\n          </ButtonBar>\n        </Form>\n      </div>\n    );\n  },\n);\n\ntype CreateCatalogSourceProps = HandlePromiseProps & {\n  match: match;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAOA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAUA;AACA;AASA;AACA;AAUA;AAMA;AAWA;AACA;AAMA;AAEA;AAOA;AACA;AACA;AAGA;AAQA;;;;;A","sourceRoot":""}