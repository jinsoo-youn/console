{"version":3,"file":"deployment-config-f8875bcae1e7dcb12d9b.js","sources":["webpack:///./public/components/overview/deployment-config-overview.tsx","webpack:///./public/components/overview/resource-overview-details.tsx"],"sourcesContent":["import * as React from 'react';\n\nimport { DeploymentConfigModel } from '../../models';\nimport { DeploymentConfigDetailsList, menuActions } from '../deployment-config';\nimport { KebabAction, LoadingInline, ResourceSummary, WorkloadPausedAlert } from '../utils';\n\nimport { OverviewDetailsResourcesTab } from './resource-overview-page';\nimport { ResourceOverviewDetails } from './resource-overview-details';\nimport PodRingSet from '@console/shared/src/components/pod/PodRingSet';\nimport { OverviewItem } from '@console/shared';\n\nconst DeploymentConfigOverviewDetails: React.SFC<DeploymentConfigOverviewDetailsProps> = ({\n  item: { obj: dc, pods: pods, current, previous, isRollingOut },\n}) => {\n  return (\n    <div className=\"overview__sidebar-pane-body resource-overview__body\">\n      {dc.spec.paused && <WorkloadPausedAlert obj={dc} model={DeploymentConfigModel} />}\n      <div className=\"resource-overview__pod-counts\">\n        <PodRingSet\n          key={dc.metadata.uid}\n          podData={{\n            pods,\n            current,\n            previous,\n            isRollingOut,\n          }}\n          obj={dc}\n          resourceKind={DeploymentConfigModel}\n          path=\"/spec/replicas\"\n        />\n      </div>\n      <div className=\"resource-overview__summary\">\n        <ResourceSummary resource={dc} showPodSelector showNodeSelector showTolerations>\n          <dt>Status</dt>\n          <dd>\n            {dc.status.availableReplicas === dc.status.updatedReplicas ? (\n              'Active'\n            ) : (\n              <div>\n                <span className=\"co-icon-space-r\">\n                  <LoadingInline />\n                </span>{' '}\n                Updating\n              </div>\n            )}\n          </dd>\n        </ResourceSummary>\n      </div>\n      <div className=\"resource-overview__details\">\n        <DeploymentConfigDetailsList dc={dc} />\n      </div>\n    </div>\n  );\n};\n\nconst tabs = [\n  {\n    name: 'Details',\n    component: DeploymentConfigOverviewDetails,\n  },\n  {\n    name: 'Resources',\n    component: OverviewDetailsResourcesTab,\n  },\n];\n\nexport const DeploymentConfigOverviewPage: React.SFC<DeploymentConfigOverviewProps> = ({\n  item,\n  customActions,\n}) => (\n  <ResourceOverviewDetails\n    item={item}\n    kindObj={DeploymentConfigModel}\n    menuActions={customActions ? [...customActions, ...menuActions] : menuActions}\n    tabs={tabs}\n  />\n);\n\ntype DeploymentConfigOverviewDetailsProps = {\n  item: OverviewItem;\n};\n\ntype DeploymentConfigOverviewProps = {\n  item: OverviewItem;\n  customActions?: KebabAction[];\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { connect } from 'react-redux';\n\nimport * as UIActions from '../../actions/ui';\nimport { K8sKind } from '../../module/k8s';\nimport { AsyncComponent, KebabAction, ResourceOverviewHeading, SimpleTabNav } from '../utils';\nimport * as plugins from '../../plugins';\nimport { OverviewItem } from '@console/shared';\n\nconst stateToProps = ({ UI }): PropsFromState => ({\n  selectedDetailsTab: UI.getIn(['overview', 'selectedDetailsTab']),\n});\n\nconst dispatchToProps = (dispatch): PropsFromDispatch => ({\n  onClickTab: (name) => dispatch(UIActions.selectOverviewDetailsTab(name)),\n});\n\nconst getResourceTabComp = (t) => (props) => (\n  <AsyncComponent {...props} loader={t.properties.loader} />\n);\n\nconst getPluginTabResources = (item, tabs): ResourceOverviewDetailsProps['tabs'] => {\n  let tabEntry = plugins.registry\n    .getOverviewResourceTabs()\n    .filter((tab) => item[tab.properties.key]);\n  const overridenTabs = tabs.map((tab) => {\n    const tabEntryConfig = tabEntry.find((t) => tab.name === t.properties.name);\n    if (tabEntryConfig) {\n      tabEntry = tabEntry.filter((entry) => tab.name !== entry.properties.name);\n      return {\n        name: tab.name,\n        component: getResourceTabComp(tabEntryConfig),\n      };\n    }\n    return tab;\n  });\n\n  /** Add new tabs from plugin */\n  const newTabs = tabEntry.map((entry) => {\n    return {\n      name: entry.properties.name,\n      component: getResourceTabComp(entry),\n    };\n  });\n\n  return overridenTabs.concat(newTabs);\n};\n\nexport const ResourceOverviewDetails = connect<PropsFromState, PropsFromDispatch, OwnProps>(\n  stateToProps,\n  dispatchToProps,\n)(\n  ({\n    kindObj,\n    item,\n    menuActions,\n    onClickTab,\n    selectedDetailsTab,\n    tabs,\n  }: ResourceOverviewDetailsProps) => {\n    const keys = Object.keys(item);\n    const keysRef = React.useRef(keys);\n    const tabsRef = React.useRef(tabs);\n    const pluginTabsRef = React.useRef<React.ComponentProps<typeof SimpleTabNav>['tabs']>();\n    if (\n      !pluginTabsRef.current ||\n      !_.isEqual(keys, keysRef.current) ||\n      !_.isEqual(tabs, tabsRef.current)\n    ) {\n      keysRef.current = keys;\n      tabsRef.current = tabs;\n      pluginTabsRef.current = getPluginTabResources(item, tabs);\n    }\n    return (\n      <div className=\"overview__sidebar-pane resource-overview\">\n        <ResourceOverviewHeading actions={menuActions} kindObj={kindObj} resource={item.obj} />\n        <SimpleTabNav\n          onClickTab={onClickTab}\n          selectedTab={selectedDetailsTab}\n          tabProps={{ item }}\n          tabs={pluginTabsRef.current}\n          additionalClassNames=\"co-m-horizontal-nav__menu--within-sidebar co-m-horizontal-nav__menu--within-overview-sidebar\"\n        />\n      </div>\n    );\n  },\n);\n\ntype PropsFromState = {\n  selectedDetailsTab: any;\n};\n\ntype PropsFromDispatch = {\n  onClickTab: (name: string) => void;\n};\n\ntype OwnProps = {\n  item: OverviewItem;\n  kindObj: K8sKind;\n  menuActions: KebabAction[];\n  tabs: {\n    name: string;\n    component: any;\n  }[];\n  isOperatorBacked?: boolean;\n};\n\nexport type ResourceOverviewDetailsProps = PropsFromState & PropsFromDispatch & OwnProps;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAGA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AAKA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AClEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAYA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AASA;;;;;A","sourceRoot":""}