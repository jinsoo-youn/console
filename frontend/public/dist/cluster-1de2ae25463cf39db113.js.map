{"version":3,"file":"cluster-1de2ae25463cf39db113.js","sources":["webpack:///./public/components/hypercloud/cluster.tsx","webpack:///./public/components/hypercloud/members.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\n\nimport { Status } from '@console/shared';\nimport { K8sResourceKind, K8sKind } from '../../module/k8s';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from '../factory';\nimport { DetailsItem, Kebab, KebabAction, detailsPage, navFactory, ResourceKebab, ResourceLink, ResourceSummary, SectionHeading, Timestamp } from '../utils';\nimport { ClusterManagerModel } from '../../models';\nimport { configureClusterNodesModal } from './modals';\nimport { MembersPage } from './members';\nimport { ResourceLabel } from '../../models/hypercloud/resource-plural';\nimport { ResourceEventStream } from '../events';\n\nconst ModifyClusterNodes: KebabAction = (kind: K8sKind, obj: any) => ({\n  label: 'Edit Nodes',\n  callback: () =>\n    configureClusterNodesModal({\n      resourceKind: kind,\n      resource: obj,\n    }),\n  accessReview: {\n    group: kind.apiGroup,\n    resource: kind.plural,\n    name: obj.metadata.name,\n    verb: 'patch',\n  },\n});\n\nexport const menuActions: KebabAction[] = [ModifyClusterNodes, ...Kebab.getExtensionsActionsForKind(ClusterManagerModel), ...Kebab.factory.common];\n\nconst kind = ClusterManagerModel.kind;\n\nconst tableColumnClasses = ['', '', classNames('pf-m-hidden', 'pf-m-visible-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), Kebab.columnClass];\n\nconst ClusterTableHeader = (t?: TFunction) => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_58'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_59'),\n      sortField: 'spec.provider',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_60'),\n      sortField: 'spec.provider',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_61'),\n      sortField: 'status.ready',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_62'),\n      sortField: 'spec.version',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: 'Master Node',\n      sortField: 'spec.masterNum',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[5] },\n    },\n    {\n      title: 'Worker Node',\n      sortField: 'spec.workerNum',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[6] },\n    },\n    {\n      title: 'Owner',\n      // sortField: 'status.owner',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[7] },\n    },\n    {\n      title: 'Created',\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[8] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[9] },\n    },\n  ];\n};\nClusterTableHeader.displayName = 'ClusterTableHeader';\n\nconst ClusterTableRow: RowFunction<IClusterTableRow> = ({ obj: cluster, index, key, style }) => {\n  const owner = cluster.metadata?.annotations?.owner;\n  return (\n    <TableRow id={cluster.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={cluster.metadata.name} displayName={cluster.fakeMetadata.fakename} title={cluster.metadata.uid} namespace={cluster.metadata.namespace} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1])}>{cluster.spec.provider}</TableData>\n      <TableData className={classNames(tableColumnClasses[2])}>{cluster.spec.provider ? '생성' : '등록'}</TableData>\n      <TableData className={tableColumnClasses[3]}>{cluster.status?.ready ? '준비' : '생성 중'}</TableData>\n      <TableData className={tableColumnClasses[4]}>{cluster.spec.version}</TableData>\n      <TableData className={tableColumnClasses[5]}>{`${cluster.status?.masterRun ?? 0} / ${cluster.spec?.masterNum ?? 0}`}</TableData>\n      <TableData className={tableColumnClasses[6]}>{`${cluster.status?.workerRun ?? 0} / ${cluster.spec?.workerNum ?? 0}`}</TableData>\n      <TableData className={tableColumnClasses[7]}>{owner}</TableData>\n      <TableData className={tableColumnClasses[8]}>\n        <Timestamp timestamp={cluster.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[9]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={cluster} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport const ClusterDetailsList: React.FC<ClusterDetailsListProps> = ({ cl }) => {\n  const { t } = useTranslation();\n  return (\n    <dl className=\"co-m-pane__details\">\n      <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_1')} obj={cl} path=\"spec.provider\" />\n      <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_2')} obj={cl} path=\"spec.provider\">\n        {cl.spec.provider ? t('MULTI:MSG_MULTI_CLUSTERS_TABLECONTENTS_TYPE_1') : t('MULTI:MSG_MULTI_CLUSTERS_TABLECONTENTS_TYPE_2')}\n      </DetailsItem>\n      <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_13')} obj={cl} path=\"status.ready\">\n        <Status status={cl.status.ready ? t('MULTI:MSG_MULTI_CLUSTERS_TABLECONTENTS_STATUS_1') : t('MULTI:MSG_MULTI_CLUSTERS_TABLECONTENTS_STATUS_2')} />\n      </DetailsItem>\n      <DetailsItem label=\"Version\" obj={cl} path=\"spec.version\" />\n      <DetailsItem label=\"Region\" obj={cl} path=\"spec.region\" />\n      <DetailsItem label=\"Master Node\" obj={cl} path=\"spec.masterNum\">\n        {`${cl.status?.masterRun ?? 0} / ${cl.spec.masterNum ?? 0}`}\n      </DetailsItem>\n      <DetailsItem label=\"Master Node Type\" obj={cl} path=\"spec.masterType\" />\n      <DetailsItem label=\"Worker Node\" obj={cl} path=\"spec.workerNum\">\n        {`${cl.status?.workerRun ?? 0} / ${cl.spec.workerNum ?? 0}`}\n      </DetailsItem>\n      <DetailsItem label=\"Worker Node Type\" obj={cl} path=\"spec.workerType\" />\n      <DetailsItem label=\"SSH Key\" obj={cl} path=\"spec.sshKey\" />\n    </dl>\n  );\n};\n\ninterface KeyValuePrintProps {\n  obj: any;\n  key: string;\n}\n\nconst KeyValuePrint: React.FC<KeyValuePrintProps> = ({ obj, key }) => {\n  return <div>{`${key} / ${obj[key]}`}</div>;\n};\n\nconst ClusterDetails: React.FC<ClusterDetailsProps> = ({ obj: cluster }) => {\n  const owner = cluster.status.owner && Object.keys(cluster.status.owner)[0];\n  const members = cluster.status.members && Object.keys(cluster.status.members);\n  const groups = cluster.status.groups && Object.keys(cluster.status.groups);\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', { 0: ResourceLabel(cluster, t) })} />\n        <div className=\"row\">\n          <div className=\"col-lg-6\">\n            <ResourceSummary resource={cluster} customPathName={'fakeMetadata.fakename'} showOwner={false} />\n            {cluster.status.owner && <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_44')} obj={cluster} children={KeyValuePrint({ obj: cluster.status.owner, key: owner })} />}\n            {cluster.status.members && <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_39')} obj={cluster} children={members.map(member => KeyValuePrint({ obj: cluster.status.members, key: member }))} />}\n            {cluster.status.groups && <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_40')} obj={cluster} children={groups.map(group => KeyValuePrint({ obj: cluster.status.groups, key: group }))} />}\n          </div>\n          <div className=\"col-lg-6\">\n            <ClusterDetailsList cl={cluster} />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst { details, /* nodes, */ editYaml, events } = navFactory;\nexport const Clusters: React.FC = props => {\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"Clusters\" Header={ClusterTableHeader.bind(null, t)} Row={ClusterTableRow} virtualize />;\n};\n\nexport const ClustersPage: React.FC<ClustersPageProps> = props => {\n  const { t } = useTranslation();\n  return <ListPage title={t('COMMON:MSG_LNB_MENU_84')} createButtonText={t('COMMON:MSG_MAIN_CREATEBUTTON_1', { 0: t('COMMON:MSG_LNB_MENU_84') })} ListComponent={Clusters} kind={kind} {...props} />;\n};\n\nexport const ClustersDetailsPage: React.FC<ClustersDetailsPageProps> = props => {\n  const { t } = useTranslation();\n  return (\n    <DetailsPage\n      {...props}\n      titleFunc={(obj: any) => obj.fakeMetadata.fakename}\n      kind={kind}\n      menuActions={menuActions}\n      pages={[\n        details(detailsPage(ClusterDetails)),\n        editYaml() /* nodes(ClusterNodes),  events(ResourceEventStream) */,\n        /*{\n          href: 'node',\n          name: 'Node',\n          component: pageProps => <MembersPage resource={pageProps.obj} title=\"Members\" userHeading=\"Users\" userGroupHeading=\"User Groups\" />,\n        },\n        {\n          href: 'namespace',\n          name: 'Namespace',\n          component: pageProps => <MembersPage resource={pageProps.obj} title=\"Members\" userHeading=\"Users\" userGroupHeading=\"User Groups\" />,\n        },\n        {\n          href: 'federation',\n          name: 'Federation',\n          component: pageProps => <MembersPage resource={pageProps.obj} title=\"Members\" userHeading=\"Users\" userGroupHeading=\"User Groups\" />,\n        },*/\n        events(ResourceEventStream),\n        {\n          href: 'access',\n          name: t('COMMON:MSG_DETAILS_TABACCESSPERMISSIONS_1'),\n          component: pageProps => <MembersPage clusterName={pageProps.obj.metadata.name} namespace={pageProps.obj.metadata.namespace} owner={pageProps.obj.metadata.annotations.owner} title=\"Members\" />,\n        },\n      ]}\n    />\n  );\n};\n\ninterface IClusterTableRow extends K8sResourceKind {\n  fakeMetadata: any;\n}\n\ntype ClusterDetailsListProps = {\n  cl: K8sResourceKind;\n};\n\ntype ClusterDetailsProps = {\n  obj: K8sResourceKind;\n};\n\ntype ClustersPageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: any;\n};\n\ntype ClustersDetailsPageProps = {\n  match: any;\n};\n","import * as _ from \"lodash\";\nimport * as React from \"react\";\nimport * as classNames from 'classnames';\nimport * as fuzzy from 'fuzzysearch';\nimport { Button, Dropdown, DropdownToggle, DropdownItem, TextInput } from '@patternfly/react-core';\nimport { EmptyBox, SectionHeading, /*Kebab,*/ } from '../utils';\nimport { Table, TableHeader, TableBody, sortable, SortByDirection, IRow } from '@patternfly/react-table';\nimport { CaretDownIcon, UsersIcon } from '@patternfly/react-icons';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from \"i18next\";\nimport { getId, getUserGroup } from '../../hypercloud/auth';\nimport { coFetchJSON } from \"../../co-fetch\";\n\nconst ownerData = (owner, t?: TFunction) => [\n  {\n    cells: [`${owner.MemberName} (${t('MULTI:MSG_MULTI_CLUSTERS_MAILFORM_7')})`, owner.MemberId, 'admin'],\n    obj: owner\n  }\n];\n\nconst tableColumnClasses = ['', '', classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'), /*Kebab.columnClass*/];\n\nconst MemberTableRows = (members): ITableRow[] => {\n  const data = [];\n  _.forEach(members, (member) => {\n    data.push({\n      cells: [member.Attribute === 'user' ? member.MemberName : <><UsersIcon className='hc-member__group-icon' />{member.MemberName}</>, member.MemberId, member.Role],\n      obj: member\n    });\n  });\n  return data;\n}\n\nconst MemberTableHeader = (t?: TFunction) => {\n  return [\n    {\n      title: t('COMMON:MSG_DETAILS_TABACCESSPERMISSIONS_TABLEHEADER_2'),\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n      data: 'MemberName'\n    },\n    {\n      title: t('COMMON:MSG_DETAILS_TABACCESSPERMISSIONS_TABLEHEADER_1'),\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n      data: 'MemberId'\n    },\n    {\n      title: t('COMMON:MSG_DETAILS_TABACCESSPERMISSIONS_TABLEHEADER_3'),\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n      data: 'Role'\n    },\n    /* {\n      title: '',\n      props: { className: tableColumnClasses[3] },\n    }, */\n  ];\n};\nMemberTableHeader.displayName = 'UserTableHeader';\n\nexport const UsersTable = (props) => {\n  const { isOwner, owner, members, heading, searchType, searchKey } = props;\n\n  const { t } = useTranslation();\n  const ownerRow = owner ? ownerData.bind(null, owner, t)() : [];\n\n  const [rows, setRows] = React.useState([]);\n  const [sortBy, setSortBy] = React.useState({ index: 0, sortField: 'MemberName', direction: SortByDirection.asc });\n  const [filteredRows, setFilteredRows] = React.useState([]);\n\n  const sortRows = ({ sortField, direction }, rows) => {\n    const sortedRows = rows.sort((a, b) => {\n      const compA = typeof a.obj[sortField] === 'string' ? (a.obj[sortField] as string).toLowerCase() : a.obj[sortField],\n        compB = typeof b.obj[sortField] === 'string' ? (b.obj[sortField] as string).toLowerCase() : b.obj[sortField];\n      return compA < compB ? -1 : compA > compB ? 1 : 0;\n    });\n\n    setRows(direction === SortByDirection.asc ? _.concat(ownerRow, sortedRows) : _.concat(ownerRow, sortedRows.reverse()));\n  }\n\n  React.useEffect(() => {\n    sortRows(sortBy, MemberTableRows(members));\n  }, [members]);\n\n  React.useEffect(() => {\n    const filteredResult = rows.filter(row => fuzzy(_.toLower(searchKey), _.toLower(row.obj[searchType])));\n    setFilteredRows(filteredResult);\n  }, [rows, searchType, searchKey]);\n\n  const onSort = (_event, index, direction, extraData) => {\n    const sortField = extraData.column.data\n    sortRows({ sortField, direction }, rows.slice(1));\n    setSortBy({\n      index,\n      sortField,\n      direction\n    });\n  };\n\n  const actionResolver = (t: TFunction, rowData, { rowIndex }) => {\n    if (rowData.obj.Status === 'owner') {\n      return null;\n    }\n\n    return [\n      {\n        title: t('COMMON:MSG_DETAILS_TABACCESSPERMISSIONS_ACTIONBUTTON_1'),\n        onClick: (event, rowId, rowData, extra) => {\n          modifyMemberModal({ modalClassName: 'modal-lg', member: rowData.obj })\n        }\n      },\n      {\n        title: t('COMMON:MSG_DETAILS_TABACCESSPERMISSIONS_ACTIONBUTTON_2'),\n        onClick: (event, rowId, rowData, extra) => {\n          removeMemberModal({ modalClassName: 'modal-lg', member: rowData.obj })\n        }\n      }\n    ];\n  }\n\n  return (\n    <div className=\"hc-members__users\">\n      {heading && <SectionHeading text={heading} />}\n      {_.isEmpty(filteredRows) ? (\n        <EmptyBox label=\"Users\" />\n      ) : (\n        <Table aria-label=\"Users\" sortBy={sortBy} onSort={onSort} cells={MemberTableHeader.bind(null, t)()} rows={filteredRows} actionResolver={isOwner && actionResolver.bind(null, t)}>\n          <TableHeader />\n          <TableBody />\n        </Table>\n      )}\n    </div>\n  );\n};\n\nexport const inviteMemberModal = (props) =>\n  import('./modals/invite-member-modal' /* webpackChunkName: \"members-modal\" */).then((m) => m.inviteMemberModal(props));\n\nexport const modifyMemberModal = (props) =>\n  import('./modals/modify-member-modal' /* webpackChunkName: \"modify-member-modal\" */).then((m) => m.modifyMemberModal(props));\n\nexport const removeMemberModal = (props) =>\n  import('./modals/remove-member-modal' /* webpackChunkName: \"remove-member-modal\" */).then((m) => m.removeMemberModal(props));\n\nexport const MembersPage = (props) => {\n  const defaultOwnerData =\n  {\n    Cluster: props.clusterName,\n    MemberId: props.owner,\n    MemberName: \"\",\n    Attribute: \"user\",\n    Role: \"admin\",\n    Status: \"owner\"\n  };\n\n  const [owner, setOwner] = React.useState(defaultOwnerData);\n  const [members, setMembers] = React.useState([]);\n  const [searchType, setSearchType] = React.useState('MemberName');\n  const [searchKey, setSearchKey] = React.useState('');\n  const [isOpen, setOpen] = React.useState(false);\n\n  const onToggle = (open: boolean) => setOpen(open);\n  const onSelect = event => {\n    const selectedName = event.currentTarget.id;\n    setSearchType(selectedName);\n    setSearchKey('');\n    setOpen(!isOpen);\n  };\n  const handleTextInputChange = value => {\n    setSearchKey(value);\n  };\n\n  const dropdownItems = (t?: TFunction) => [\n    <DropdownItem key=\"name\" id=\"MemberName\" component=\"button\">\n      {t('Name')}\n    </DropdownItem>,\n    <DropdownItem key=\"email\" id=\"MemberId\" component=\"button\">\n      {t('Email')}\n    </DropdownItem>,\n  ];\n\n  React.useEffect(() => {\n    coFetchJSON(`/api/multi-hypercloud/namespaces/${props.namespace}/clustermanagers/${props.clusterName}/member?userId=${getId()}${getUserGroup()}`, 'GET')\n      .then((res) => {\n        let idx = _.findIndex(res, (mem: RowMemberData) => mem.Status === \"owner\");\n        idx >= 0 && setOwner(res[idx]);\n        res.splice(idx, 1)\n        setMembers(res);\n      })\n      .catch((err) => {\n        console.log(\"Fail to get member list. \" + err)\n      });\n  }, []);\n\n  const isOwner = props.owner === getId();\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className='hc-members__header'>\n        <Dropdown\n          onSelect={onSelect}\n          toggle={\n            <DropdownToggle id=\"toggle-id\" onToggle={onToggle} iconComponent={CaretDownIcon}>\n              {searchType === 'MemberId' ? t('Email') : t('Name')}\n            </DropdownToggle>}\n          isOpen={isOpen}\n          dropdownItems={dropdownItems.bind(null, t)()}\n        />\n        <TextInput className='hc-members__search' value={searchKey} onChange={handleTextInputChange} placeholder={searchType === 'MemberId' ? t('search by email') : t('search by name')}></TextInput>\n        {isOwner &&\n          <div className=\"co-m-primary-action\">\n            <Button variant=\"primary\" id=\"yaml-create\" onClick={() => inviteMemberModal({ clusterName: props.clusterName, modalClassName: 'modal-lg', existMembers: members })}>\n              {t('MULTI:MSG_MULTI_CLUSTERS_INVITEPEOPLEPOPUP_BUTTON_1')}\n            </Button>\n          </div>}\n      </div>\n      <div className=\"hc-members__body\">\n        <UsersTable\n          clusterName={props.clusterName}\n          isOwner={isOwner}\n          owner={owner}\n          members={members}\n          searchType={searchType}\n          searchKey={searchKey} />\n      </div>\n    </>\n  );\n}\n\nexport type RowMemberData = {\n  Id?: number,\n  Namespace?: string,\n  Cluster?: string,\n  MemberId: string,\n  MemberName: string,\n  Attribute: \"group\" | \"user\",\n  Role: \"guest\" | \"developer\" | \"admin\",\n  Status?: \"invited\" | \"owner\",\n  CreatedTime?: string,\n  UpdatedTime?: string\n};\n\nexport interface ITableRow extends IRow {\n  obj: RowMemberData\n}\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAGA;AACA;AAGA;AACA;AAGA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAOA;AACA;AACA;;;;;;;;;;;;;;AAcA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;ACvsourceRoot":""}