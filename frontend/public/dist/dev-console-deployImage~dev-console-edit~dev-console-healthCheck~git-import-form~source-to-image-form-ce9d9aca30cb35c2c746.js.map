{"version":3,"file":"dev-console-deployImage~dev-console-edit~dev-console-healthCheck~git-import-form~source-to-image-form-ce9d9aca30cb35c2c746.js","sources":["webpack:///./packages/dev-console/src/components/health-checks/HealthChecks.tsx","webpack:///./packages/dev-console/src/components/health-checks/HealthChecksProbe.scss?1dba","webpack:///./packages/dev-console/src/components/health-checks/HealthChecksProbe.tsx","webpack:///./packages/dev-console/src/components/health-checks/ProbeForm.scss?9c35","webpack:///./packages/dev-console/src/components/health-checks/ProbeForm.tsx","webpack:///./packages/dev-console/src/components/health-checks/RequestTypeForms.tsx","webpack:///./packages/dev-console/src/components/import/section/FormSection.scss?8752","webpack:///./packages/dev-console/src/components/import/section/FormSection.tsx"],"sourcesContent":["import * as React from 'react';\nimport FormSection from '../import/section/FormSection';\nimport HealthCheckProbe from './HealthChecksProbe';\nimport { HealthChecksProbeType } from './health-checks-types';\nimport { Resources } from '../import/import-types';\n\ninterface HealthChecksProps {\n  title?: string;\n  resourceType: Resources;\n}\n\nconst HealthChecks: React.FC<HealthChecksProps> = ({ title, resourceType }) => (\n  <FormSection title={title}>\n    <HealthCheckProbe probeType={HealthChecksProbeType.ReadinessProbe} />\n\n    <HealthCheckProbe probeType={HealthChecksProbeType.LivenessProbe} />\n\n    {resourceType !== Resources.KnativeService && (\n      <HealthCheckProbe probeType={HealthChecksProbeType.StartupProbe} />\n    )}\n  </FormSection>\n);\n\nexport default HealthChecks;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { PlusCircleIcon, MinusCircleIcon } from '@patternfly/react-icons';\nimport { GreenCheckCircleIcon } from '@console/shared';\nimport { Button, ButtonVariant } from '@patternfly/react-core';\nimport ProbeForm from './ProbeForm';\nimport { getHealthChecksProbeConfig, healthChecksDefaultValues } from './health-checks-probe-utils';\nimport { HealthCheckProbeData } from './health-checks-types';\nimport './HealthChecksProbe.scss';\n\ninterface HealthCheckProbeProps {\n  probeType: string;\n}\n\nconst HealthCheckProbe: React.FC<HealthCheckProbeProps> = ({ probeType }) => {\n  const {\n    values: { healthChecks },\n    setFieldValue,\n  } = useFormikContext<FormikValues>();\n  const [temporaryProbeData, setTemporaryProbeData] = React.useState<HealthCheckProbeData>();\n  const onEditProbe = () => {\n    setFieldValue(`healthChecks.${probeType}.showForm`, true);\n    setTemporaryProbeData(healthChecks?.[probeType].data);\n  };\n\n  const handleDeleteProbe = () => {\n    setFieldValue(`healthChecks.${probeType}`, healthChecksDefaultValues);\n    if (healthChecks?.[probeType]?.modified) {\n      setFieldValue(`healthChecks.${probeType}.modified`, false);\n    } else {\n      setFieldValue(`healthChecks.${probeType}.modified`, true);\n    }\n  };\n\n  const handleReset = () => {\n    if (!healthChecks?.[probeType]?.enabled) {\n      setFieldValue(`healthChecks.${probeType}`, healthChecksDefaultValues);\n    } else {\n      setFieldValue(`healthChecks.${probeType}.showForm`, false);\n      setFieldValue(`healthChecks.${probeType}.data`, temporaryProbeData);\n    }\n    setFieldValue(`healthChecks.${probeType}.modified`, false);\n  };\n\n  const handleSubmit = () => {\n    setFieldValue(`healthChecks.${probeType}.showForm`, false);\n    setFieldValue(`healthChecks.${probeType}.enabled`, true);\n    setFieldValue(`healthChecks.${probeType}.modified`, true);\n  };\n\n  const handleAddProbe = () => {\n    setFieldValue(`healthChecks.${probeType}.showForm`, true);\n  };\n\n  const renderProbe = () => {\n    if (healthChecks?.[probeType]?.showForm) {\n      return <ProbeForm onSubmit={handleSubmit} onClose={handleReset} probeType={probeType} />;\n    }\n    if (healthChecks?.[probeType]?.enabled) {\n      return (\n        <>\n          <span className=\"odc-heath-check-probe__successText\">\n            <GreenCheckCircleIcon /> {`${getHealthChecksProbeConfig(probeType).formTitle} Added`}\n          </span>\n          <Button\n            className=\"pf-m-plain--align-left\"\n            variant={ButtonVariant.plain}\n            onClick={handleDeleteProbe}\n          >\n            <MinusCircleIcon />\n          </Button>\n        </>\n      );\n    }\n    return (\n      <Button\n        className=\"pf-m-link--align-left\"\n        variant={ButtonVariant.link}\n        onClick={handleAddProbe}\n        icon={<PlusCircleIcon />}\n      >\n        {`Add ${getHealthChecksProbeConfig(probeType).formTitle}`}\n      </Button>\n    );\n  };\n\n  return (\n    <>\n      <div className=\"co-section-heading-tertiary odc-heath-check-probe__formTitle\">\n        {getHealthChecksProbeConfig(probeType).formTitle}\n        {healthChecks?.[probeType]?.enabled && (\n          <Button\n            className=\"pf-m-link--align-left\"\n            variant={ButtonVariant.link}\n            onClick={onEditProbe}\n          >\n            &nbsp;&nbsp;\n            {'Edit Probe'}\n          </Button>\n        )}\n      </div>\n      <div className=\"pf-c-form__helper-text\">\n        {getHealthChecksProbeConfig(probeType).formSubtitle}\n      </div>\n      <div className=\"co-toolbar__group co-toolbar__group--left\">{renderProbe()}</div>\n    </>\n  );\n};\n\nexport default HealthCheckProbe;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { FormikValues, useFormikContext } from 'formik';\nimport { TextInputTypes, InputGroupText } from '@patternfly/react-core';\nimport { InputGroupField, InputField, DropdownField, ActionGroupWithIcons } from '@console/shared';\nimport {\n  HTTPRequestTypeForm,\n  TCPRequestTypeForm,\n  CommandRequestTypeForm,\n} from './RequestTypeForms';\nimport { RequestType } from './health-checks-types';\nimport FormSection from '../import/section/FormSection';\nimport './ProbeForm.scss';\n\nconst getRequestTypeForm = (value: string, probeType: string) => {\n  switch (value) {\n    case RequestType.HTTPGET:\n      return <HTTPRequestTypeForm probeType={probeType} />;\n    case RequestType.ContainerCommand:\n      return <CommandRequestTypeForm probeType={probeType} />;\n    case RequestType.TCPSocket:\n      return <TCPRequestTypeForm probeType={probeType} />;\n    default:\n      return null;\n  }\n};\n\ninterface ProbeFormProps {\n  onSubmit: () => void;\n  onClose: () => void;\n  probeType: string;\n}\n\nenum RequestTypeOptions {\n  httpGet = 'HTTP GET',\n  command = 'Container Command',\n  tcpSocket = 'TCP Socket',\n}\n\nconst ProbeForm: React.FC<ProbeFormProps> = ({ onSubmit, onClose, probeType }) => {\n  const {\n    values: { healthChecks },\n    errors,\n  } = useFormikContext<FormikValues>();\n\n  return (\n    <div className=\"odc-heath-check-probe-form\">\n      <FormSection>\n        <DropdownField\n          name={`healthChecks.${probeType}.data.requestType`}\n          label=\"Type\"\n          items={RequestTypeOptions}\n          title={RequestType.HTTPGET}\n          fullWidth\n        />\n        {getRequestTypeForm(healthChecks?.[probeType]?.data?.requestType, probeType)}\n        <InputField\n          type={TextInputTypes.number}\n          name={`healthChecks.${probeType}.data.failureThreshold`}\n          label=\"Failure Threshold\"\n          style={{ maxWidth: '100%' }}\n          helpText=\"How many times the probe will try starting or restarting before giving up.\"\n        />\n        <InputField\n          type={TextInputTypes.number}\n          name={`healthChecks.${probeType}.data.successThreshold`}\n          label=\"Success Threshold\"\n          style={{ maxWidth: '100%' }}\n          helpText=\"How many consecutive successes for the probe to be considered successful after having failed.\"\n        />\n        <InputGroupField\n          type={TextInputTypes.number}\n          name={`healthChecks.${probeType}.data.initialDelaySeconds`}\n          label=\"Initial Delay\"\n          helpText=\"How long to wait after the container starts before checking it's health.\"\n          afterInput={<InputGroupText>{'seconds'}</InputGroupText>}\n          style={{ maxWidth: '100%' }}\n        />\n        <InputGroupField\n          type={TextInputTypes.number}\n          name={`healthChecks.${probeType}.data.periodSeconds`}\n          label=\"Period\"\n          helpText=\"How often to perform the probe.\"\n          afterInput={<InputGroupText>{'seconds'}</InputGroupText>}\n          style={{ maxWidth: '100%' }}\n        />\n        <InputGroupField\n          type={TextInputTypes.number}\n          name={`healthChecks.${probeType}.data.timeoutSeconds`}\n          label=\"Timeout\"\n          helpText=\"How long to wait for the probe to finish, if the time is exceeded, the probe is considered failed.\"\n          afterInput={<InputGroupText>{'seconds'}</InputGroupText>}\n          style={{ maxWidth: '100%' }}\n        />\n      </FormSection>\n      <ActionGroupWithIcons\n        onSubmit={onSubmit}\n        onClose={onClose}\n        isDisabled={!_.isEmpty(errors?.healthChecks?.[probeType])}\n      />\n    </div>\n  );\n};\n\nexport default ProbeForm;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { FormikValues, useFormikContext } from 'formik';\nimport { TextInputTypes, FormGroup } from '@patternfly/react-core';\nimport { InputField, CheckboxField, getFieldId, TextColumnField } from '@console/shared';\nimport { NameValueEditor } from '@console/internal/components/utils/name-value-editor';\nimport { Resources } from '../import/import-types';\n\ninterface RequestTypeFormProps {\n  probeType?: string;\n}\n\nexport const renderPortField = (fieldName: string, resourceType: Resources) => {\n  if (resourceType === Resources.KnativeService) {\n    return (\n      <InputField\n        type={TextInputTypes.text}\n        name=\"knative-port\"\n        label=\"Port\"\n        placeholder=\"0\"\n        isDisabled\n      />\n    );\n  }\n  return <InputField type={TextInputTypes.text} name={fieldName} label=\"Port\" required />;\n};\n\nexport const HTTPRequestTypeForm: React.FC<RequestTypeFormProps> = ({ probeType }) => {\n  const {\n    values: { healthChecks, resources },\n    setFieldValue,\n  } = useFormikContext<FormikValues>();\n  const httpHeaders = healthChecks?.[probeType]?.data?.httpGet?.httpHeaders;\n  const initialNameValuePairs = !_.isEmpty(httpHeaders)\n    ? httpHeaders.map((val) => _.values(val))\n    : [['', '']];\n  const [nameValue, setNameValue] = React.useState(initialNameValuePairs);\n  const portFieldName = `healthChecks.${probeType}.data.httpGet.port`;\n\n  const handleNameValuePairs = React.useCallback(\n    ({ nameValuePairs }) => {\n      const updatedNameValuePairs = _.compact(\n        nameValuePairs.map(([name, value]) => {\n          if (_.isObject(value)) {\n            return { name, valueFrom: value };\n          }\n          if (value.length) {\n            return { name, value };\n          }\n          return null;\n        }),\n      );\n      setNameValue(nameValuePairs);\n      setFieldValue(`healthChecks.${probeType}.data.httpGet.httpHeaders`, updatedNameValuePairs);\n    },\n    [setFieldValue, probeType],\n  );\n  return (\n    <>\n      <CheckboxField\n        name={`healthChecks.${probeType}.data.httpGet.scheme`}\n        label=\"Use HTTPS\"\n        value=\"HTTPS\"\n      />\n      <FormGroup\n        fieldId={getFieldId(`healthChecks.${probeType}.data.httpGet.httpHeaders`, 'name-value')}\n        name={`healthChecks.${probeType}.data.httpGet.httpHeaders`}\n        label=\"HTTP Headers\"\n      >\n        <NameValueEditor\n          nameValuePairs={nameValue}\n          valueString=\"Value\"\n          nameString=\"Header Name\"\n          addString=\"Add Header\"\n          readOnly={false}\n          allowSorting={false}\n          updateParentData={handleNameValuePairs}\n        />\n      </FormGroup>\n      <InputField\n        type={TextInputTypes.text}\n        name={`healthChecks.${probeType}.data.httpGet.path`}\n        label=\"Path\"\n        placeholder=\"/\"\n      />\n      {renderPortField(portFieldName, resources)}\n    </>\n  );\n};\n\nexport const TCPRequestTypeForm: React.FC<RequestTypeFormProps> = ({ probeType }) => {\n  const {\n    values: { resources },\n  } = useFormikContext<FormikValues>();\n  const portFieldName = `healthChecks.${probeType}.data.tcpSocket.port`;\n  return renderPortField(portFieldName, resources);\n};\n\nexport const CommandRequestTypeForm: React.FC<RequestTypeFormProps> = ({ probeType }) => {\n  const {\n    values: { healthChecks },\n  } = useFormikContext<FormikValues>();\n  const commands = healthChecks?.[probeType]?.data?.exec?.command || [''];\n  return (\n    <TextColumnField\n      name={`healthChecks.${probeType}.data.exec.command`}\n      label=\"Command\"\n      addLabel=\"Add command\"\n      placeholder=\"argument\"\n      helpText=\"The command to run inside the container.\"\n      required\n      disableDeleteRow={commands.length === 1}\n    />\n  );\n};\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport cx from 'classnames';\nimport { FormHelperText } from '@patternfly/react-core';\nimport './FormSection.scss';\n\nexport interface FormSectionProps {\n  title?: React.ReactNode;\n  subTitle?: React.ReactNode;\n  fullWidth?: boolean;\n  children: React.ReactNode;\n  flexLayout?: boolean;\n  extraMargin?: boolean;\n}\n\nconst flexStyle: React.CSSProperties = {\n  display: 'flex',\n  flex: 1,\n  flexDirection: 'column',\n  margin: 'var(--pf-global--spacer--md) 0',\n};\n\nconst FormSection: React.FC<FormSectionProps> = ({\n  title,\n  subTitle,\n  fullWidth,\n  children,\n  flexLayout,\n  extraMargin,\n}) => (\n  <div\n    className={cx('pf-c-form', {\n      'co-m-pane__form': !fullWidth,\n      'odc-form-section--extra-margin': extraMargin,\n    })}\n    style={flexLayout ? flexStyle : {}}\n  >\n    {title && <h2 className=\"odc-form-section__heading\">{title}</h2>}\n    {subTitle && <FormHelperText isHidden={false}>{subTitle}</FormHelperText>}\n    {children}\n  </div>\n);\n\nexport default FormSection;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAOA;AAEA;AAEA;AAEA;AAMA;;;;;;;;;;;;ACvBA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AAAA;AAEA;AAKA;AAIA;AACA;AAUA;AAEA;AAEA;AACA;AACA;;AAOA;AAIA;AAGA;AAGA;AAEA;;;;;;;;;;;;AC7GA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AACA;AACA;AACA;AACA;AAEA;;AACA;AAKA;AAEA;AACA;AAOA;AACA;AAOA;AAOA;AAQA;AAQA;AASA;AAOA;AAEA;;;;;;;;;;;;;ACxGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AASA;AACA;AACA;AAEA;;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AAKA;AAKA;AAUA;AAMA;AAGA;AAEA;AACA;AAGA;AACA;AACA;AAEA;;AACA;AAGA;AACA;AAWA;;;;;;;;;;;;AClHA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;AACA;AACA;AAGA;AACA;AACA;AAIA;;;;;A","sourceRoot":""}