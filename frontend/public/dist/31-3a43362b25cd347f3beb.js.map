{"version":3,"file":"31-3a43362b25cd347f3beb.js","sources":["webpack:///./node_modules/xterm/lib/addons/fullscreen/fullscreen.js","webpack:///./public/components/pod-exec.jsx","webpack:///./public/components/terminal.jsx"],"sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction toggleFullScreen(term, fullscreen) {\n    var fn;\n    if (typeof fullscreen === 'undefined') {\n        fn = (term.element.classList.contains('fullscreen')) ?\n            term.element.classList.remove : term.element.classList.add;\n    }\n    else if (!fullscreen) {\n        fn = term.element.classList.remove;\n    }\n    else {\n        fn = term.element.classList.add;\n    }\n    fn = fn.bind(term.element.classList);\n    fn('fullscreen');\n}\nexports.toggleFullScreen = toggleFullScreen;\nfunction apply(terminalConstructor) {\n    terminalConstructor.prototype.toggleFullScreen = function (fullscreen) {\n        toggleFullScreen(this, fullscreen);\n    };\n}\nexports.apply = apply;\n//# sourceMappingURL=fullscreen.js.map","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Base64 } from 'js-base64';\nimport { ExpandIcon } from '@patternfly/react-icons';\nimport { Button } from '@patternfly/react-core';\n\nimport store from '../redux';\nimport { LoadingBox, LoadingInline, Dropdown, ResourceIcon } from './utils';\nimport { connectToFlags } from '../reducers/features';\nimport { FLAGS } from '@console/shared';\nimport { Terminal } from './terminal';\nimport { WSFactory } from '../module/ws-factory';\nimport { resourceURL } from '../module/k8s';\nimport { PodModel } from '../models';\n\nconst nameWithIcon = (name) => (\n  <span>\n    <span className=\"co-icon-space-r\">\n      <ResourceIcon kind=\"Container\" />\n    </span>\n    {name}\n  </span>\n);\n\n// pod exec WS protocol is FD prefixed, base64 encoded data (sometimes json stringified)\n\n// Channel 0 is STDIN, 1 is STDOUT, 2 is STDERR (if TTY is not requested), and 3 is a special error channel - 4 is C&C\n// The server only reads from STDIN, writes to the other three.\n// see also: https://github.com/kubernetes/kubernetes/pull/13885\n\nconst NO_SH =\n  'starting container process caused \"exec: \\\\\"sh\\\\\": executable file not found in $PATH\"';\n\nexport const PodExec = connectToFlags(FLAGS.OPENSHIFT)(\n  class PodExec extends React.PureComponent {\n    constructor(props) {\n      super(props);\n      this.state = {\n        open: false,\n        containers: [],\n        activeContainer: _.get(props, 'obj.spec.containers[0].name'),\n      };\n      this.terminal = React.createRef();\n      this.onResize = (rows, cols) => this.onResize_(rows, cols);\n      this.onData = (d) => this.onData_(d);\n      this.onChangeContainer = (index) => this.onChangeContainer_(index);\n    }\n\n    connect_() {\n      const { metadata } = this.props.obj;\n      const { activeContainer } = this.state;\n      const usedClient = this.props.flags[FLAGS.OPENSHIFT] ? 'oc' : 'kubectl';\n\n      const params = {\n        ns: metadata.namespace,\n        name: metadata.name,\n        path: 'exec',\n        queryParams: {\n          stdout: 1,\n          stdin: 1,\n          stderr: 1,\n          tty: 1,\n          container: activeContainer,\n          command: ['sh', '-i', '-c', 'TERM=xterm sh']\n            .map((c) => encodeURIComponent(c))\n            .join('&command='),\n        },\n      };\n\n      if (this.ws) {\n        this.ws.destroy();\n        const { current } = this.terminal;\n        current && current.onConnectionClosed(`connecting to ${activeContainer}`);\n      }\n\n      const impersonate = store.getState().UI.get('impersonate', {});\n      const subprotocols = (impersonate.subprotocols || []).concat('base64.channel.k8s.io');\n\n      let previous;\n      this.ws = new WSFactory(`${metadata.name}-terminal`, {\n        host: 'auto',\n        reconnect: true,\n        path: resourceURL(PodModel, params),\n        jsonParse: false,\n        subprotocols,\n      })\n        .onmessage((raw) => {\n          const { current } = this.terminal;\n          // error channel\n          if (raw[0] === '3') {\n            if (previous.includes(NO_SH)) {\n              current.reset();\n              current.onConnectionClosed(\n                `This container doesn't have a /bin/sh shell. Try specifying your command in a terminal with:\\r\\n\\r\\n ${usedClient} -n ${metadata.namespace} exec ${metadata.name} -ti <command>`,\n              );\n              this.ws.destroy();\n              previous = '';\n              return;\n            }\n          }\n          const data = Base64.decode(raw.slice(1));\n          current && current.onDataReceived(data);\n          previous = data;\n        })\n        .onopen(() => {\n          const { current } = this.terminal;\n          current && current.reset();\n          previous = '';\n          this.setState({ open: true, error: null });\n        })\n        .onclose((evt) => {\n          if (!evt || evt.wasClean === true) {\n            return;\n          }\n          const error = evt.reason || 'The terminal connection has closed.';\n          this.setState({ error });\n          this.terminal.current && this.terminal.current.onConnectionClosed(error);\n          this.ws.destroy();\n        }) // eslint-disable-next-line no-console\n        .onerror((evt) => console.error(`WS error?! ${evt}`));\n    }\n\n    componentDidMount() {\n      this.connect_();\n    }\n\n    componentWillUnmount() {\n      this.ws && this.ws.destroy();\n      delete this.ws;\n    }\n\n    static getDerivedStateFromProps(nextProps, prevState) {\n      const containers = _.get(nextProps.obj, 'spec.containers', []).map((n) => n.name);\n      if (_.isEqual(containers, prevState.containers)) {\n        return null;\n      }\n      return { containers };\n    }\n\n    onChangeContainer_(index) {\n      const name = this.state.containers[index];\n\n      if (!name) {\n        // eslint-disable-next-line no-console\n        console.warn(`no name, how did that happen? ${index}`);\n        return;\n      }\n      if (name === this.state.activeContainer) {\n        return;\n      }\n      this.setState({ activeContainer: name }, () => {\n        this.connect_();\n        this.terminal.current && this.terminal.current.focus();\n      });\n    }\n\n    onResize_(rows, cols) {\n      const data = Base64.encode(JSON.stringify({ Height: rows, Width: cols }));\n      this.ws && this.ws.send(`4${data}`);\n    }\n\n    setFullscreen(fullscreen) {\n      this.terminal.current.setFullscreen(fullscreen);\n    }\n\n    onData_(data) {\n      this.ws && this.ws.send(`0${Base64.encode(data)}`);\n    }\n\n    render() {\n      const { containers, activeContainer, open, error } = this.state;\n      const { message } = this.props;\n\n      let contents = <LoadingBox />;\n      if (error) {\n        contents = <div className=\"text-center cos-error-title\">{error}</div>;\n      } else if (open) {\n        contents = <Terminal onResize={this.onResize} onData={this.onData} ref={this.terminal} />;\n      }\n\n      return (\n        <div>\n          <div className=\"co-toolbar\">\n            <div className=\"co-toolbar__group co-toolbar__group--left\">\n              <div className=\"co-toolbar__item\">Connecting to</div>\n              <div className=\"co-toolbar__item\">\n                <Dropdown\n                  className=\"btn-group\"\n                  items={_.mapValues(containers, nameWithIcon)}\n                  title={nameWithIcon(activeContainer || <LoadingInline />)}\n                  onChange={this.onChangeContainer}\n                />\n              </div>\n            </div>\n            {!error && (\n              <div className=\"co-toolbar__group co-toolbar__group--right\">\n                <div className=\"co-toolbar__item\">\n                  <Button\n                    variant=\"link\"\n                    className=\"pf-m-link--align-right\"\n                    onClick={() => this.setFullscreen(true)}\n                  >\n                    <ExpandIcon className=\"co-icon-space-r\" />\n                    Expand\n                  </Button>\n                </div>\n              </div>\n            )}\n          </div>\n          {message}\n          {contents}\n        </div>\n      );\n    }\n  },\n);\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Terminal as XTerminal } from 'xterm';\nimport * as fit from 'xterm/lib/addons/fit/fit';\nimport * as full from 'xterm/lib/addons/fullscreen/fullscreen';\nimport { CompressIcon } from '@patternfly/react-icons';\nimport { Button } from '@patternfly/react-core';\n\nXTerminal.applyAddon(fit);\nXTerminal.applyAddon(full);\n\nexport class Terminal extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { height: 0, width: 0 };\n    this.innerRef = React.createRef();\n    this.outerRef = React.createRef();\n    this.isFullscreen = false;\n    this.onResize = () => this.onResize_();\n    this.onDataReceived = (data) => this.terminal && this.terminal.write(data);\n\n    this.terminal = new XTerminal(Object.assign({}, this.props.options));\n    this.terminal.on('data', this.props.onData);\n  }\n\n  reset() {\n    const terminal = this.terminal;\n    if (!terminal) {\n      return;\n    }\n    terminal.reset();\n    terminal.clear();\n    terminal.setOption('disableStdin', false);\n  }\n\n  focus() {\n    this.terminal && this.terminal.focus();\n  }\n\n  enableiOSFix() {\n    document.getElementsByClassName('pf-c-page__main')[0].classList.add('default-overflow');\n    document.getElementById('content-scrollable').classList.add('default-overflow');\n  }\n\n  disableiOSFix() {\n    document.getElementsByClassName('pf-c-page__main')[0].classList.remove('default-overflow');\n    document.getElementById('content-scrollable').classList.remove('default-overflow');\n  }\n\n  setFullscreen(fullscreen) {\n    this.terminal.toggleFullScreen(fullscreen);\n    this.isFullscreen = fullscreen;\n    this.focus();\n    this.onResize();\n    // fix iOS bug where masthead overlays fullscreen terminal\n    // see https://bugs.webkit.org/show_bug.cgi?id=160953\n    fullscreen ? this.enableiOSFix() : this.disableiOSFix();\n  }\n\n  onConnectionClosed(reason) {\n    const terminal = this.terminal;\n    if (!terminal) {\n      return;\n    }\n    this.setFullscreen(false);\n    terminal.write(`\\x1b[31m${reason || 'disconnected'}\\x1b[m\\r\\n`);\n    terminal.cursorHidden = true;\n    terminal.setOption('disableStdin', true);\n    terminal.refresh(terminal.y, terminal.y);\n  }\n\n  componentDidMount() {\n    this.terminal.open(this.innerRef.current);\n    this.focus();\n    this.onResize();\n    window.addEventListener('resize', this.onResize);\n  }\n\n  componentWillUnmount() {\n    this.terminal && this.terminal.destroy();\n    window.removeEventListener('resize', this.onResize);\n  }\n\n  onResize_() {\n    const node = this.outerRef.current;\n\n    if (!node) {\n      return;\n    }\n\n    const pageRect = document.getElementsByClassName('pf-c-page')[0].getBoundingClientRect();\n    const bodyRect = document.body.getBoundingClientRect();\n    const nodeRect = node.getBoundingClientRect();\n\n    const { padding } = this.props;\n\n    // This assumes we want to fill everything below and to the right.  In full-screen, fill entire viewport\n    const height = Math.floor(pageRect.bottom - (this.isFullscreen ? 0 : nodeRect.top) - padding);\n    const width = Math.floor(\n      bodyRect.width - (this.isFullscreen ? 0 : nodeRect.left) - (this.isFullscreen ? 10 : padding),\n    );\n\n    if (height === this.state.height && width === this.state.width) {\n      return;\n    }\n\n    // rerender with correct dimensions\n    this.setState({ height, width }, () => {\n      const terminal = this.terminal;\n      if (!terminal) {\n        return;\n      }\n      // tell the terminal to resize itself\n      terminal.fit();\n      // update the pty\n      this.props.onResize(terminal.rows, terminal.cols);\n    });\n  }\n\n  render() {\n    return (\n      <div ref={this.outerRef} style={this.state} className={this.props.className}>\n        <div ref={this.innerRef} className=\"console\">\n          {this.isFullscreen && (\n            <Button\n              className=\"console-collapse-link\"\n              onClick={() => this.setFullscreen(false)}\n              variant=\"link\"\n            >\n              <CompressIcon className=\"co-icon-space-r\" />\n              Collapse\n            </Button>\n          )}\n        </div>\n      </div>\n    );\n  }\n}\n\nTerminal.propTypes = {\n  onData: PropTypes.func.isRequired,\n  onResize: PropTypes.func.isRequired,\n  padding: PropTypes.number,\n  options: PropTypes.object,\n};\n\nTerminal.defaultProps = {\n  padding: 30,\n  options: {\n    fontFamily: 'monospace',\n    fontSize: 16,\n    cursorBlink: false,\n    cols: 80,\n    rows: 25,\n  },\n};\n"],"mappings":";;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;ACxBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAIA;AAEA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAQA;AAEA;AACA;AAKA;AAEA;AAKA;AACA;AAGA;AACA;;;;;;;;;;;;;ACtNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAOA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}