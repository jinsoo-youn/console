{"version":3,"file":"16-718a1127dc5e0610b840.js","sources":["webpack:///./public/components/hypercloud/form/create-form.tsx","webpack:///./public/components/hypercloud/utils/dropdown.jsx","webpack:///./public/components/hypercloud/utils/list-view.tsx","webpack:///./public/components/hypercloud/utils/radio.tsx"],"sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { Link } from 'react-router-dom';\nimport { useForm, FormProvider } from 'react-hook-form';\nimport { DevTool } from '@hookform/devtools';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { k8sCreate, referenceFor, K8sResourceKind, modelFor } from '../../../module/k8s';\nimport { pluralToKind } from './';\nimport { ButtonBar, history, resourceObjPath } from '../../utils';\nimport { Section } from '../utils/section';\n\nexport const WithCommonForm = (SubForm, params, defaultValues, modal?: boolean) => {\n  const FormComponent: React.FC<CommonFormProps_> = props => {\n    const methods = useForm({ defaultValues: defaultValues });\n\n    const kind = pluralToKind.get(params.plural)?.['kind'];\n    const title = `${props.titleVerb} ${params?.type === 'form' ? '' : params.type || 'Sample'} ${kind || ''}`;\n\n    const [inProgress] = React.useState(false); // onSubmit이나 나중에 Error관련 메서드에서 inProgress를 false로 변경해줘야함.\n    const model = kind && modelFor(kind);\n    const namespaced = model?.namespaced;\n    const plural = model?.plural;\n\n    const onClick = methods.handleSubmit(data => {\n      let inDo = _.defaultsDeep(props.fixed, data);\n      inDo = props.onSubmitCallback(inDo);\n      k8sCreate(model, inDo)\n        .then(() => {\n          history.push(resourceObjPath(inDo, referenceFor(model)));\n        })\n        .catch(e => {\n          console.error(e.message);\n        });\n    });\n    return (\n      <FormProvider {...methods}>\n        <div className=\"co-m-pane__body\">\n          <Helmet>\n            <title>{title}</title>\n          </Helmet>\n          <form className=\"co-m-pane__body-group co-m-pane__form\">\n            <h1 className=\"co-m-pane__heading co-m-pane__heading--baseline\">\n              <div className=\"co-m-pane__name\">{title}</div>\n              <div className=\"co-m-pane__heading-link\">\n                <Link to={namespaced ? `/k8s/ns/${params.ns}/${plural}/~new` : `/k8s/cluster/${plural}/~new`} id=\"yaml-link\" replace>\n                  Edit YAML\n                </Link>\n              </div>\n            </h1>\n            <p className=\"co-m-pane__explanation\">{props.explanation}</p>\n            <fieldset>\n              <Section label=\"Name\" id=\"name\" isRequired={true}>\n                <input className=\"pf-c-form-control\" id=\"name\" name=\"metadata.name\" ref={methods.register} />\n              </Section>\n            </fieldset>\n            <SubForm isCreate={props.isCreate} />\n            <ButtonBar inProgress={inProgress}>\n              <ActionGroup className=\"pf-c-form\">\n                <Button type=\"button\" variant=\"primary\" id=\"save-changes\" onClick={onClick}>\n                  {props.saveButtonText || 'Create'}\n                </Button>\n                <Button type=\"button\" variant=\"secondary\" id=\"cancel\" onClick={history.goBack}>\n                  Cancel\n                </Button>\n              </ActionGroup>\n            </ButtonBar>\n          </form>\n          <DevTool control={methods.control} />\n        </div>\n      </FormProvider>\n    );\n  };\n  return FormComponent;\n};\n\ntype CommonFormProps_ = {\n  obj?: K8sResourceKind;\n  fixed: object;\n  isCreate: boolean;\n  titleVerb: string;\n  onSubmitCallback: Function;\n  saveButtonText?: string;\n  explanation?: string;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport * as PropTypes from 'prop-types';\nimport { CaretDownIcon } from '@patternfly/react-icons';\nimport { ResourceName } from '../../utils/resource-icon';\nimport { useFormContext } from 'react-hook-form';\n\nconst DropDownRow = React.memo((props) => {\n  const {\n    itemKey,\n    content,\n    onClick,\n    hover,\n    selected\n  } = props;\n\n  return (\n    <li key={itemKey}>\n      <button\n        className={classNames(\"pf-c-dropdown__menu-item\", {hover, focus: selected})}\n        id={`${itemKey}-link`}\n        data-test-id=\"dropdown-menu\"\n        data-test-dropdown-menu={itemKey}\n        onClick={(e) => onClick(itemKey, e)}\n      >\n        {content}\n      </button>\n    </li>\n  );\n});\n\nconst Dropdown_ = (props) => {\n\n  const {\n    name,\n    ariaLabel,\n    className,\n    buttonClassName,\n    menuClassName,\n    dropDownClassName,\n    titlePrefix,\n    describedBy,\n    disabled,\n    required,\n    methods,\n    defaultValue\n  } = props;\n  const { register, unregister, setValue, watch } = methods ? methods : useFormContext();\n\n  const selectedKey = watch(name, defaultValue);\n  /* defaultValue를 쓰는 경우(ex.모달)에 getVaule를 해보면 form이 비어있는 경우가 있음. 초기값 세팅을 해줌. */\n  defaultValue && setValue(name, selectedKey);\n\n  const [title, setTitle] = React.useState(_.get(props.items, selectedKey, props.title));\n  const [active, setActive] = React.useState(!!props.active);\n  const [items, setItems] = React.useState(Object.assign({}, props.items));\n  const [keyboardHoverKey, setKeyboardHoverKey] = React.useState(selectedKey);\n\n\n  const dropdownElement = React.useRef();\n  const dropdownList = React.useRef();\n\n  const onWindowClick = (event) => {\n    if (active) {\n      return;\n    }\n\n    const { current } = dropdownElement;\n    if (!current) {\n      return;\n    }\n\n    if (event.target === current || (current && current.contains(event.target))) {\n      return;\n    }\n\n    hide(event);\n  };\n\n  const onClick = (selected, e) => {\n    e.preventDefault();\n    e.stopPropagation();\n\n    setValue(name, selected);\n    setKeyboardHoverKey(selected);\n\n    const newTitle = items[selected];\n    setTitle(newTitle);\n\n    hide();\n  };\n\n  const toggle = (e) => {\n    e.preventDefault();\n\n    if (disabled) {\n      return;\n    }\n\n    if (active) {\n      hide(e);\n    } else {\n      show();\n    }\n  };\n\n  const show = () => {\n    window.removeEventListener('click', onWindowClick);\n    window.addEventListener('click', onWindowClick);\n    setActive(true);\n  };\n\n  const hide = (e) => {\n    e && e.stopPropagation();\n    window.removeEventListener('click', onWindowClick);\n    setActive(false);\n  };\n\n  const onKeyDown = (e) => {\n    const { key } = e;\n    if (key === 'Escape') {\n      hide(e);\n      return;\n    }\n\n    if (key !== 'ArrowDown' && key !== 'ArrowUp' && key !== 'Enter') {\n      return;\n    }\n\n    if (key === 'Enter') {\n      if (active && items[keyboardHoverKey]) {\n        onClick(keyboardHoverKey, e);\n      }\n      return;\n    }\n\n    const keys = _.keys(items);\n\n    let index = _.indexOf(keys, keyboardHoverKey);\n\n    if (key === 'ArrowDown') {\n      index += 1;\n    } else {\n      index -= 1;\n    }\n\n    // periodic boundaries\n    if (index >= keys.length) {\n      index = 0;\n    }\n    if (index < 0) {\n      index = keys.length - 1;\n    }\n\n    const newKey = keys[index];\n    setKeyboardHoverKey(newKey);\n    e.stopPropagation();\n    e.preventDefault(); // 키보드 사용시 화면 스크롤되지 않도록 처리\n  }\n\n  React.useEffect(() => {\n    register({ name }, { required });\n\n    return () => {\n      unregister(name);\n      window.removeEventListener('click', onWindowClick);\n    }\n  }, [name, register, unregister]);\n\n  React.useEffect(() => {\n    !selectedKey && props.title && setTitle(props.title);\n  }, [props.title]);\n\n  React.useEffect(() => {\n    setItems(props.items);\n  }, [props.items]);\n\n  const spacerBefore = props.spacerBefore || new Set();\n  const headerBefore = props.headerBefore || {};\n  const rows = [];\n\n  const addItem = (key, content) => {\n    const selected = key === selectedKey;\n    const hover = key === keyboardHoverKey;\n    const klass = classNames({ active: selected });\n    if (spacerBefore.has(key)) {\n      rows.push(\n        <li key={`${key}-spacer`}>\n          <div className=\"dropdown-menu__divider\" />\n        </li>,\n      );\n    }\n\n    if (_.has(headerBefore, key)) {\n      rows.push(\n        <li key={`${key}-header`}>\n          <div className=\"dropdown-menu__header\">{headerBefore[key]}</div>\n        </li>,\n      );\n    }\n    rows.push(\n      <DropDownRow\n        className={klass}\n        key={key}\n        itemKey={key}\n        content={content}\n        onClick={onClick}\n        selected={selected}\n        hover={hover}\n      />,\n    );\n  };\n\n  _.each(items, (v, k) => addItem(k, v));\n\n  return (\n    <div className={className} ref={dropdownElement} style={...props.style}>\n      <div\n        className={classNames(\n          { 'dropdown pf-c-dropdown': true, 'pf-m-expanded': active, 'col-md-12': true },\n          dropDownClassName,\n        )}\n      >\n        <button\n          aria-label={ariaLabel}\n          aria-haspopup=\"true\"\n          aria-expanded={active}\n          aria-describedby={describedBy}\n          className={classNames('pf-c-dropdown__toggle', buttonClassName)}\n          data-test-id=\"dropdown-button\"\n          onClick={toggle}\n          onKeyDown={onKeyDown}\n          type=\"button\"\n          id={props.id}\n          disabled={disabled}\n        >\n          <span className=\"pf-c-dropdown__toggle-text\">\n            {titlePrefix && `${titlePrefix}: `}\n            {title}\n          </span>\n          <CaretDownIcon className=\"pf-c-dropdown__toggle-icon\" />\n        </button>\n        {active && (\n          <ul\n            ref={dropdownList}\n            className={classNames('pf-c-dropdown__menu', menuClassName)}\n          >\n            {rows}\n          </ul>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport const Dropdown = React.memo(Dropdown_);\n\nDropdown.propTypes = {\n  actionItems: PropTypes.arrayOf(\n    PropTypes.shape({\n      actionKey: PropTypes.string,\n      actionTitle: PropTypes.string,\n    }),\n  ),\n  className: PropTypes.string,\n  dropDownClassName: PropTypes.string,\n  headerBefore: PropTypes.objectOf(PropTypes.string),\n  items: PropTypes.object.isRequired,\n  menuClassName: PropTypes.string,\n  buttonClassName: PropTypes.string,\n  spacerBefore: PropTypes.instanceOf(Set),\n  textFilter: PropTypes.string,\n  title: PropTypes.node,\n  defaultValue?: PropTypes.string,\n  disabled: PropTypes.bool,\n  methods?: PropTypes.any\n};\n\nconst containerLabel = (container) => (\n  <ResourceName name={container ? container.name : ''} kind=\"Container\" />\n);\n\nconst getSpacer = (container) => {\n  const spacerBefore = new Set();\n  return container ? spacerBefore.add(container.name) : spacerBefore;\n};\n\nconst getHeaders = (container, initContainer) => {\n  return initContainer\n    ? {\n      [container.name]: 'Containers',\n      [initContainer.name]: 'Init Containers',\n    }\n    : {};\n};\n\nconst ContainerDropdown_ = (props) => {\n  const { name, containers, initContainers } = props;\n  if (_.isEmpty(containers) && _.isEmpty(initContainers)) {\n    return null;\n  }\n  const firstInitContainer = _.find(initContainers, { order: 0 });\n  const firstContainer = _.find(containers, { order: 0 });\n  const spacerBefore = getSpacer(firstInitContainer);\n  const headerBefore = getHeaders(firstContainer, firstInitContainer);\n  const dropdownItems = _.mapValues(_.merge(containers, initContainers), containerLabel);\n  const title = props.title || containerLabel(firstContainer);\n  return (\n    <Dropdown\n      name={name}\n      className=\"btn-group\"\n      menuClassName=\"dropdown-menu--text-wrap\"\n      headerBefore={headerBefore}\n      items={dropdownItems}\n      spacerBefore={spacerBefore}\n      title={title}\n    />\n  );\n};\n\nexport const ContainerDropdown = React.memo(ContainerDropdown_);\n\nContainerDropdown.propTypes = {\n  containers: PropTypes.oneOfType([PropTypes.object, PropTypes.array]).isRequired,\n  initContainers: PropTypes.object,\n};\n\nContainerDropdown.defaultProps = {\n  initContainers: {},\n};","import { useFormContext, useFieldArray } from 'react-hook-form';\nimport * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Button } from '@patternfly/react-core';\nimport { MinusCircleIcon, PlusCircleIcon } from '@patternfly/react-icons';\nexport const ListView: React.FC<ListViewProps> = ({ name, methods, defaultItem = { key: '', value: '' }, itemRenderer, headerFragment, addButtonText }) => {\n  const { control, register, getValues } = methods ? methods : useFormContext();\n  const { fields, append, remove } = useFieldArray({ control, name: name });\n\n  const DefaultListHeaderFragment = (\n    <div className=\"row pairs-list__heading\">\n      <div className=\"col-xs-4 text-secondary text-uppercase\">KEY</div>\n      <div className=\"col-xs-4 text-secondary text-uppercase\">VALUE</div>\n      <div className=\"col-xs-1 co-empty__header\" />\n    </div>\n  );\n\n  const DefaultListItemRenderer = (register, name, item, index, ListActions, ListDefaultIcons) => {\n    return (\n      <div className=\"row\" key={item.id}>\n        <div className=\"col-xs-4 pairs-list__name-field\">\n          <input ref={register()} className=\"pf-c-form-control\" name={`${name}[${index}].key`} defaultValue={item.key}></input>\n        </div>\n        <div className=\"col-xs-4 pairs-list__value-field\">\n          <input ref={register()} className=\"pf-c-form-control\" name={`${name}[${index}].value`} defaultValue={item.value}></input>\n        </div>\n        <div className=\"col-xs-1 pairs-list__action\">\n          <Button\n            type=\"button\"\n            data-test-id=\"pairs-list__delete-btn\"\n            className=\"pairs-list__span-btns\"\n            onClick={() => {\n              ListActions.remove(index);\n            }}\n            variant=\"plain\"\n          >\n            {ListDefaultIcons.deleteIcon}\n          </Button>\n        </div>\n      </div>\n    );\n  };\n\n  const deleteIcon = (\n    <>\n      <MinusCircleIcon className=\"pairs-list__side-btn pairs-list__delete-icon\" />\n      <span className=\"sr-only\">Delete</span>\n    </>\n  );\n\n  const ListActions = {\n    append: append,\n    remove: remove,\n    getValues: getValues,\n  };\n\n  const ListDefaultIcons = {\n    deleteIcon: deleteIcon,\n  };\n\n  const itemList = itemRenderer ? fields.map((item, index) => itemRenderer(register, name, item, index, ListActions, ListDefaultIcons)) : fields.map((item, index) => DefaultListItemRenderer(register, name, item, index, ListActions, ListDefaultIcons));\n\n  return (\n    <div>\n      {headerFragment ? headerFragment : DefaultListHeaderFragment}\n      {itemList}\n      <div className=\"row col-xs-12\">\n        <Button\n          className=\"pf-m-link--align-left\"\n          data-test-id=\"pairs-list__add-btn\"\n          onClick={() => {\n            append(defaultItem);\n          }}\n          type=\"button\"\n          variant=\"link\"\n        >\n          <PlusCircleIcon data-test-id=\"pairs-list__add-icon\" className=\"co-icon-space-r\" />\n          {!!addButtonText ? addButtonText : 'Add'}\n        </Button>\n      </div>\n    </div>\n  );\n};\n\ntype ListViewProps = {\n  name: string;\n  defaultItem?: object;\n  itemRenderer?: Function;\n  headerFragment?: JSX.Element;\n  addButtonText?: string;\n  methods?: any;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { useFormContext } from 'react-hook-form';\n\nexport const RadioInput: React.SFC<RadioInputProps> = props => {\n  const { register } = props.methods ? props.methods : useFormContext();\n  const inputProps: React.InputHTMLAttributes<any> = _.omit(props, ['title', 'subTitle', 'desc', 'children', 'inline']);\n  const inputElement = (\n    <>\n      <label className={classNames({ 'radio-inline': props.inline, 'co-disabled': props.disabled })}>\n        <input type=\"radio\" ref={register} value={props.item} {...inputProps} />\n        {props.title} {props.subTitle && <span className=\"co-no-bold\">{props.subTitle}</span>}\n      </label>\n      {props.desc && <p className=\"co-m-radio-desc text-muted\">{props.desc}</p>}\n      {props.children}\n    </>\n  );\n\n  return props.inline ? inputElement : <div className=\"radio\">{inputElement}</div>;\n};\n\nexport const RadioGroup: React.SFC<RadioGroupProps> = ({ inline = false, items, id = JSON.stringify(items), name, methods }) => {\n  const radios = items.map(({ desc, title, subTitle, value, disabled }) => <RadioInput name={name} key={value} desc={desc} title={title} subTitle={subTitle} item={value} disabled={disabled} inline={inline} methods={methods} />);\n  return <div className={classNames('co-radio-group', { 'co-radio-group--inline': inline })}>{radios}</div>;\n};\n\nexport type RadioInputProps = {\n  item: string;\n  desc?: string | JSX.Element;\n  subTitle?: string | JSX.Element;\n  disabled?: boolean;\n  methods?: any;\n  inline?: boolean;\n} & React.InputHTMLAttributes<any>;\n\nexport type RadioGroupProps = {\n  name: string;\n  items: ({\n    desc?: string | JSX.Element;\n    title: string | JSX.Element;\n    subTitle?: string | JSX.Element;\n    value: string;\n    disabled?: boolean;\n  } & React.InputHTMLAttributes<any>)[];\n  id?: string;\n  methods?: any;\n  inline?: boolean;\n};\n\nRadioInput.displayName = 'RadioInput';\nRadioGroup.displayName = 'RadioGroup';\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AAMA;AAIA;AACA;AACA;;;;;;;;;;;;;AC1EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAQA;AAEA;AAWA;AAEA;AAEA;AAcaA;AACA;AACA;AAEA;AAEA;AAWA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;AC1UA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AAQA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAIA;AACA;AAKA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAAA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAyBA;AACA;;;;;A","sourceRoot":""}