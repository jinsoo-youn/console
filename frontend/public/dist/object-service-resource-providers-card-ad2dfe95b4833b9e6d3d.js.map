{"version":3,"file":"object-service-resource-providers-card-ad2dfe95b4833b9e6d3d.js","sources":["webpack:///./packages/noobaa-storage-plugin/src/components/resource-providers-card/resource-providers-card-body.tsx","webpack:///./packages/noobaa-storage-plugin/src/components/resource-providers-card/resource-providers-card-item.tsx","webpack:///./packages/noobaa-storage-plugin/src/components/resource-providers-card/resource-providers-card.scss?87a4","webpack:///./packages/noobaa-storage-plugin/src/components/resource-providers-card/resource-providers-card.tsx","webpack:///./packages/noobaa-storage-plugin/src/utils.ts"],"sourcesContent":["import * as React from 'react';\nimport { LoadingInline } from '@console/internal/components/utils';\n\nexport const ResourceProvidersBody: React.FC<ResourceProvidersBodyProps> = ({\n  isLoading,\n  hasProviders,\n  children,\n  error,\n}) => {\n  let body: React.ReactNode;\n  if (isLoading) {\n    body = <LoadingInline />;\n  }\n  if (error || !hasProviders) {\n    body = (\n      <div className=\"nb-resource-providers-card__not-available text-secondary\">Not available</div>\n    );\n  }\n  return <>{body || children}</>;\n};\n\ntype ResourceProvidersBodyProps = {\n  children: React.ReactNode;\n  hasProviders: boolean;\n  isLoading: boolean;\n  error: boolean;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { RedExclamationCircleIcon } from '@console/shared';\n\nconst ResourceProvidersItemStatus: React.FC<ResourceProvidersRowStatusProps> = React.memo(\n  ({ status, link }) => (\n    <div className=\"nb-resource-providers-card__row-status\">\n      <div className=\"nb-resource-providers-card__row-status-item\">\n        <a href={link} style={{ textDecoration: 'none' }} target=\"_blank\" rel=\"noopener noreferrer\">\n          <RedExclamationCircleIcon className=\"co-dashboard-icon nb-resource-providers-card__status-icon\" />\n          <span className=\"nb-resource-providers-card__row-status-item-text\">{status}</span>\n        </a>\n      </div>\n    </div>\n  ),\n);\n\nexport const ResourceProvidersItem: React.FC<ResourceProvidersRowProps> = React.memo(\n  ({ title, count, unhealthyProviders, link }) => (\n    <div className=\"co-inventory-card__item\">\n      <div className=\"nb-resource-providers-card__row-title\">{`${count} ${title}`}</div>\n      {!_.isNil(unhealthyProviders[title]) && unhealthyProviders[title] > 0 ? (\n        <ResourceProvidersItemStatus status={unhealthyProviders[title]} link={link} />\n      ) : null}\n    </div>\n  ),\n);\n\nexport type ProviderType = {\n  [key: string]: number;\n};\n\ntype ResourceProvidersRowProps = {\n  count: number;\n  link: string;\n  title: string;\n  unhealthyProviders: ProviderType;\n};\n\ntype ResourceProvidersRowStatusProps = {\n  link: string;\n  status: number;\n};\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as _ from 'lodash';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport { FieldLevelHelp } from '@console/internal/components/utils/index';\nimport {\n  DashboardItemProps,\n  withDashboardResources,\n} from '@console/internal/components/dashboard/with-dashboard-resources';\nimport { PrometheusResponse } from '@console/internal/components/graphs';\nimport { getMetric } from '../../utils';\nimport { ResourceProvidersBody } from './resource-providers-card-body';\nimport { ResourceProvidersItem, ProviderType } from './resource-providers-card-item';\nimport './resource-providers-card.scss';\n\nconst RESOURCE_PROVIDERS_QUERY = {\n  PROVIDERS_TYPES: ' NooBaa_cloud_types',\n  UNHEALTHY_PROVIDERS_TYPES: 'NooBaa_unhealthy_cloud_types',\n  RESOURCES_LINK_QUERY: 'NooBaa_system_links',\n};\n\nconst getProviderType = (provider: ProviderPrometheusData): string =>\n  _.get(provider, 'metric.type', null);\nconst getProviderCount = (provider: ProviderPrometheusData): number =>\n  Number(_.get(provider, 'value[1]', null));\n\nconst filterProviders = (allProviders: ProviderType): string[] => {\n  return _.keys(allProviders).filter((provider) => allProviders[provider] > 0);\n};\n\nconst createProvidersList = (data: PrometheusResponse): ProviderType => {\n  const providers = _.get(data, 'data.result', null);\n  const providersList: ProviderType = {};\n  if (_.isNil(providers)) return {};\n  providers.forEach((provider) => {\n    providersList[getProviderType(provider)] = getProviderCount(provider);\n  });\n  return providersList;\n};\n\nconst ResourceProviders: React.FC<DashboardItemProps> = ({\n  watchPrometheus,\n  stopWatchPrometheusQuery,\n  prometheusResults,\n}) => {\n  React.useEffect(() => {\n    watchPrometheus(RESOURCE_PROVIDERS_QUERY.PROVIDERS_TYPES);\n    watchPrometheus(RESOURCE_PROVIDERS_QUERY.UNHEALTHY_PROVIDERS_TYPES);\n    return () => {\n      stopWatchPrometheusQuery(RESOURCE_PROVIDERS_QUERY.PROVIDERS_TYPES);\n      stopWatchPrometheusQuery(RESOURCE_PROVIDERS_QUERY.UNHEALTHY_PROVIDERS_TYPES);\n    };\n  }, [watchPrometheus, stopWatchPrometheusQuery]);\n\n  const providersTypesQueryResult = prometheusResults.getIn([\n    RESOURCE_PROVIDERS_QUERY.PROVIDERS_TYPES,\n    'data',\n  ]) as PrometheusResponse;\n  const providersTypesQueryResultError = prometheusResults.getIn([\n    RESOURCE_PROVIDERS_QUERY.PROVIDERS_TYPES,\n    'loadError',\n  ]);\n\n  const unhealthyProvidersTypesQueryResult = prometheusResults.getIn([\n    RESOURCE_PROVIDERS_QUERY.UNHEALTHY_PROVIDERS_TYPES,\n    'data',\n  ]) as PrometheusResponse;\n  const unhealthyProvidersTypesQueryResultError = prometheusResults.getIn([\n    RESOURCE_PROVIDERS_QUERY.UNHEALTHY_PROVIDERS_TYPES,\n    'loadError',\n  ]);\n\n  const resourcesLinksResponse = prometheusResults.getIn([\n    RESOURCE_PROVIDERS_QUERY.RESOURCES_LINK_QUERY,\n    'data',\n  ]) as PrometheusResponse;\n  const resourcesLinksResponseError = prometheusResults.getIn([\n    RESOURCE_PROVIDERS_QUERY.RESOURCES_LINK_QUERY,\n    'loadError',\n  ]);\n\n  const error =\n    !!providersTypesQueryResultError ||\n    !!unhealthyProvidersTypesQueryResultError ||\n    !!resourcesLinksResponseError;\n\n  const noobaaResourcesLink = getMetric(resourcesLinksResponse, 'resources');\n\n  const allProviders = createProvidersList(providersTypesQueryResult);\n  const unhealthyProviders = createProvidersList(unhealthyProvidersTypesQueryResult);\n\n  const providerTypes = filterProviders(allProviders);\n\n  return (\n    <DashboardCard>\n      <DashboardCardHeader>\n        <DashboardCardTitle>Resource Providers</DashboardCardTitle>\n        <FieldLevelHelp>\n          A list of all MCG (Multi-cloud gateway) resources that are currently in use. Those\n          resources are used to store data according to the buckets policies and can be a\n          cloud-based resource or a bare metal resource.\n        </FieldLevelHelp>\n      </DashboardCardHeader>\n      <DashboardCardBody>\n        <ResourceProvidersBody\n          isLoading={!error && !(providersTypesQueryResult && unhealthyProvidersTypesQueryResult)}\n          hasProviders={!_.isEmpty(allProviders)}\n          error={error}\n        >\n          {providerTypes.map((provider) => (\n            <ResourceProvidersItem\n              count={allProviders[provider]}\n              key={provider}\n              link={noobaaResourcesLink}\n              title={provider}\n              unhealthyProviders={unhealthyProviders}\n            />\n          ))}\n        </ResourceProvidersBody>\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n};\n\ntype ProviderPrometheusData = {\n  metric: { [key: string]: any };\n  value?: [number, string | number];\n};\n\nexport const ResourceProvidersCard = withDashboardResources(ResourceProviders);\n","import * as _ from 'lodash';\nimport { Alert } from '@console/internal/components/monitoring';\nimport { PrometheusResponse } from '@console/internal/components/graphs';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { StorageClass } from '@console/internal/components/storage-class-form';\n\nexport const filterNooBaaAlerts = (alerts: Alert[]): Alert[] =>\n  alerts.filter((alert) => _.get(alert, 'annotations.storage_type') === 'NooBaa');\n\nexport const getGaugeValue = (data) => _.get(data, 'data.result[0].value[1]');\n\nexport const getMetric = (result: PrometheusResponse, metric: string): string =>\n  _.get(result, ['data', 'result', '0', 'metric', metric], null);\n\nexport type PrometheusMetricResult = {\n  metric: { [key: string]: any };\n  value?: [number, string | number];\n};\n\nexport const getPhase = (obj: K8sResourceKind): string => {\n  return _.get(obj, 'status.phase', 'Lost');\n};\n\nexport const isBound = (obj: K8sResourceKind): boolean => getPhase(obj) === 'Bound';\n\nexport const getSCProvisioner = (obj: StorageClass) => obj.provisioner;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAOA;AAGA;AACA;;;;;;;;;;;;ACrBA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAMA;AACA;AAkBA;AAOA;;;;;;;;;;;;;ACnIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAGA;AAEA;AAQA;AACA;AACA;AAEA;AAEA;;;;;A","sourceRoot":""}