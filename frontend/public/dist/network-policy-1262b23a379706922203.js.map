{"version":3,"file":"network-policy-1262b23a379706922203.js","sources":["webpack:///./public/components/network-policy.jsx"],"sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport { connectToFlags } from '../reducers/features';\nimport { FLAGS } from '@console/shared';\nimport { DetailsPage, ListPage, Table, TableRow, TableData } from './factory';\nimport { Kebab, navFactory, ResourceKebab, SectionHeading, ResourceLink, ResourceSummary, Selector, ExternalLink } from './utils';\nimport { NetworkPolicyModel } from '../models';\nimport { getNetworkPolicyDocLink } from './utils/documentation';\nimport { useTranslation } from 'react-i18next';\nconst { common } = Kebab.factory;\nconst menuActions = [...Kebab.getExtensionsActionsForKind(NetworkPolicyModel), ...common];\n\nconst tableColumnClasses = [classNames('col-sm-4', 'col-xs-6'), classNames('col-sm-4', 'col-xs-6'), classNames('col-sm-4', 'hidden-xs'), Kebab.columnClass];\n\nconst NetworkPolicyTableHeader = t => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_2'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_16'),\n      sortField: 'spec.podSelector',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[3] },\n    },\n  ];\n};\nNetworkPolicyTableHeader.displayName = 'NetworkPolicyTableHeader';\n\nconst kind = 'NetworkPolicy';\n\nconst NetworkPolicyTableRow = ({ obj: np, index, key, style }) => {\n  return (\n    <TableRow id={np.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={np.metadata.name} namespace={np.metadata.namespace} title={np.metadata.name} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind={'Namespace'} name={np.metadata.namespace} title={np.metadata.namespace} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[2], 'co-break-word')}>{_.isEmpty(np.spec.podSelector) ? <Link to={`/search/ns/${np.metadata.namespace}?kind=Pod`}>{`All pods within ${np.metadata.namespace}`}</Link> : <Selector selector={np.spec.podSelector} namespace={np.metadata.namespace} />}</TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={np} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst NetworkPoliciesList = props => {\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"Network Policies\" Header={NetworkPolicyTableHeader.bind(null, t)} Row={NetworkPolicyTableRow} virtualize />;\n};\n\nexport const NetworkPoliciesPage = props => {\n  const { t } = useTranslation();\n  return <ListPage {...props} title={t('COMMON:MSG_LNB_MENU_49')} ListComponent={NetworkPoliciesList} kind={kind} canCreate={true} />;\n};\n\nconst IngressHeader = () => {\n  const { t } = useTranslation();\n  return (\n    <div className=\"row co-m-table-grid__head\">\n      <div className=\"col-xs-4\">Target Pods</div>\n      <div className=\"col-xs-5\">From</div>\n      <div className=\"col-xs-3\">To Ports</div>\n    </div>\n  );\n};\n\nconst IngressRow = ({ ingress, namespace, podSelector }) => {\n  const podSelectors = [];\n  const nsSelectors = [];\n  let i = 0;\n\n  const style = { margin: '5px 0' };\n  _.each(ingress.from, ({ namespaceSelector, podSelector: ps }) => {\n    if (namespaceSelector) {\n      nsSelectors.push(\n        <div key={i++} style={style}>\n          <Selector selector={namespaceSelector} kind=\"Namespace\" />\n        </div>,\n      );\n    } else {\n      podSelectors.push(\n        <div key={i++} style={style}>\n          <Selector selector={ps} namespace={namespace} />\n        </div>,\n      );\n    }\n  });\n  return (\n    <div className=\"row co-resource-list__item\">\n      <div className=\"col-xs-4\">\n        <div>\n          <span className=\"text-muted\">Pod Selector:</span>\n        </div>\n        <div style={style}>\n          <Selector selector={podSelector} namespace={namespace} />\n        </div>\n      </div>\n      <div className=\"col-xs-5\">\n        <div>\n          {!podSelectors.length ? null : (\n            <div>\n              <span className=\"text-muted\">Pod Selector:</span>\n              {podSelectors}\n            </div>\n          )}\n          {!nsSelectors.length ? null : (\n            <div style={{ paddingTop: podSelectors.length ? 10 : 0 }}>\n              <span className=\"text-muted\">NS Selector:</span>\n              {nsSelectors}\n            </div>\n          )}\n        </div>\n      </div>\n      <div className=\"col-xs-3\">\n        {_.map(ingress.ports, (port, k) => (\n          <p key={k}>\n            {port.protocol}/{port.port}\n          </p>\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst Details_ = ({ obj: np, flags }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', { 0: t('COMMON:MSG_LNB_MENU_49') })} />\n        <ResourceSummary resource={np} podSelector={'spec.podSelector'} showPodSelector />\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_INGRESSRULES_1')} />\n        <p className=\"co-m-pane__explanation\">\n          Pods accept all traffic by default. They can be isolated via Network Policies which specify a whitelist of ingress rules. When a Pod is selected by a Network Policy, it will reject all traffic not explicitly allowed via a Network Policy. See more details in <ExternalLink href={getNetworkPolicyDocLink(flags[FLAGS.OPENSHIFT])} text=\"Network Policies Documentation\" />.\n        </p>\n        {_.isEmpty(_.get(np, 'spec.ingress[0]', [])) ? (\n          `All traffic is allowed to Pods in ${np.metadata.namespace}.`\n        ) : (\n          <div className=\"co-m-table-grid co-m-table-grid--bordered\">\n            <IngressHeader />\n            <div className=\"co-m-table-grid__body\">\n              {_.map(np.spec.ingress, (ingress, i) => (\n                <IngressRow key={i} ingress={ingress} podSelector={np.spec.podSelector} namespace={np.metadata.namespace} />\n              ))}\n            </div>\n          </div>\n        )}\n      </div>\n    </>\n  );\n};\n\nconst Details = connectToFlags(FLAGS.OPENSHIFT)(Details_);\n\nexport const NetworkPoliciesDetailsPage = props => <DetailsPage {...props} menuActions={menuActions} pages={[navFactory.details(Details), navFactory.editYaml()]} />;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AAAA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AAKA;AAGA;;AAAA;AAMA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;AACA;AACA;AACA;AAIA;AACA;AAUA;AAEA;AAEA;;;;;A","sourceRoot":""}