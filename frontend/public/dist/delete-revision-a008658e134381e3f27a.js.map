{"version":3,"file":"delete-revision-a008658e134381e3f27a.js","sources":["webpack:///./packages/knative-plugin/src/components/revisions/DeleteRevisionModal.tsx","webpack:///./packages/knative-plugin/src/components/revisions/DeleteRevisionModalController.tsx","webpack:///./packages/knative-plugin/src/components/traffic-splitting/TrafficSplittingFields.tsx","webpack:///./packages/knative-plugin/src/utils/traffic-splitting-utils.ts"],"sourcesContent":["import * as React from 'react';\nimport { FormikProps, FormikValues } from 'formik';\nimport { Alert } from '@patternfly/react-core';\nimport { YellowExclamationTriangleIcon } from '@console/shared';\nimport {\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory/modal';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { RevisionModel } from '../../models';\nimport TrafficSplittingFields from '../traffic-splitting/TrafficSplittingFields';\nimport { RevisionItems } from '../../utils/traffic-splitting-utils';\nimport { KNATIVE_SERVING_LABEL } from '../../const';\n\ninterface TrafficSplittingDeleteModalProps {\n  revisionItems: RevisionItems;\n  deleteRevision: K8sResourceKind;\n  showTraffic: boolean;\n}\n\ntype Props = FormikProps<FormikValues> & TrafficSplittingDeleteModalProps;\n\nconst DeleteRevisionModal: React.FC<Props> = (props) => {\n  const { deleteRevision, handleSubmit, handleReset, isSubmitting, status, showTraffic } = props;\n  const serviceName = deleteRevision.metadata.labels[KNATIVE_SERVING_LABEL];\n\n  return (\n    <form className=\"modal-content\" onSubmit={handleSubmit}>\n      <ModalTitle>\n        <YellowExclamationTriangleIcon className=\"co-icon-space-r\" /> Delete {RevisionModel.label}?\n      </ModalTitle>\n      <ModalBody>\n        <p>\n          Are you sure you want to delete{' '}\n          <strong className=\"co-break-word\">{deleteRevision.metadata.name}</strong> from{' '}\n          <strong className=\"co-break-word\">{serviceName}</strong> in namespace{' '}\n          <strong>{deleteRevision.metadata.namespace}</strong>?\n        </p>\n        {showTraffic && (\n          <>\n            <Alert\n              isInline\n              className=\"co-alert\"\n              variant=\"default\"\n              title=\"Update the traffic distribution among the remaining Revisions\"\n            />\n            <TrafficSplittingFields {...props} />\n          </>\n        )}\n      </ModalBody>\n      <ModalSubmitFooter\n        inProgress={isSubmitting}\n        submitText=\"Delete\"\n        cancel={handleReset}\n        errorMessage={status.error}\n        submitDanger\n      />\n    </form>\n  );\n};\n\nexport default DeleteRevisionModal;\n","import * as React from 'react';\nimport { Formik, FormikHelpers, FormikValues } from 'formik';\nimport { ActionGroup, Button } from '@patternfly/react-core';\nimport { RedExclamationCircleIcon } from '@console/shared';\nimport {\n  k8sKill,\n  K8sResourceKind,\n  k8sUpdate,\n  referenceForModel,\n} from '@console/internal/module/k8s';\nimport {\n  Firehose,\n  FirehoseResult,\n  history,\n  resourceListPathFromModel,\n} from '@console/internal/components/utils';\nimport {\n  createModalLauncher,\n  ModalBody,\n  ModalComponentProps,\n  ModalFooter,\n  ModalTitle,\n} from '@console/internal/components/factory';\nimport { KNATIVE_SERVING_LABEL } from '../../const';\nimport { RevisionModel, ServiceModel } from '../../models';\nimport {\n  transformTrafficSplittingData,\n  knativeServingResourcesTrafficSplitting,\n  getRevisionItems,\n  constructObjForUpdate,\n} from '../../utils/traffic-splitting-utils';\nimport { TrafficSplittingType } from '../traffic-splitting/TrafficSplitting';\nimport DeleteRevisionModal from './DeleteRevisionModal';\n\ntype ControllerProps = {\n  loaded?: boolean;\n  revision?: K8sResourceKind;\n  resources?: {\n    configurations: FirehoseResult;\n    revisions: FirehoseResult;\n    services: FirehoseResult;\n  };\n  cancel?: () => void;\n  close?: () => void;\n};\n\nconst Controller: React.FC<ControllerProps> = ({ loaded, resources, revision, cancel, close }) => {\n  if (!loaded) {\n    return null;\n  }\n  const service = resources.services.data.find((s: K8sResourceKind) => {\n    return revision.metadata.labels[KNATIVE_SERVING_LABEL] === s.metadata.name;\n  });\n\n  const revisions = transformTrafficSplittingData(service, resources).filter(\n    (r) => revision.metadata.uid !== r.metadata.uid,\n  );\n\n  if (revisions.length === 0) {\n    return (\n      <form className=\"modal-content\" onSubmit={close}>\n        <ModalTitle>\n          <RedExclamationCircleIcon className=\"co-icon-space-r\" />\n          Unable to delete {RevisionModel.label}\n        </ModalTitle>\n        <ModalBody>\n          <p>\n            You cannot delete the last {RevisionModel.label} for the {ServiceModel.label}.\n          </p>\n        </ModalBody>\n        <ModalFooter inProgress={false}>\n          <ActionGroup className=\"pf-c-form pf-c-form__actions--right pf-c-form__group--no-top-margin\">\n            <Button\n              type=\"button\"\n              variant=\"secondary\"\n              data-test-id=\"modal-cancel-action\"\n              onClick={close}\n            >\n              OK\n            </Button>\n          </ActionGroup>\n        </ModalFooter>\n      </form>\n    );\n  }\n\n  const revisionItems = getRevisionItems(revisions);\n\n  const traffic = service?.status?.traffic ?? [{ percent: 0, tag: '', revisionName: '' }];\n  const deleteTraffic = traffic.find((t) => t.revisionName === revision.metadata.name);\n\n  const initialValues: TrafficSplittingType = {\n    trafficSplitting: traffic.reduce((acc, t) => {\n      if (!t.revisionName || revisions.find((r) => r.metadata.name === t.revisionName)) {\n        acc.push({\n          percent: t.percent,\n          tag: t.tag || '',\n          revisionName: t.revisionName || '',\n        });\n      }\n      return acc;\n    }, []),\n  };\n\n  if (initialValues.trafficSplitting.length === 0 && revisions.length > 0) {\n    initialValues.trafficSplitting.push({\n      percent: 0,\n      tag: '',\n      revisionName: revisions[0].metadata.name,\n    });\n  }\n\n  const deleteRevision = (action: FormikHelpers<FormikValues>) => {\n    k8sKill(RevisionModel, revision)\n      .then(() => {\n        close();\n        // If we are currently on the deleted revision's page, redirect to the list page\n        const re = new RegExp(`/${revision.metadata.name}(/|$)`);\n        if (re.test(window.location.pathname)) {\n          history.push(resourceListPathFromModel(RevisionModel, revision.metadata.namespace));\n        }\n      })\n      .catch((err) => {\n        action.setStatus({ error: err.message || 'An error occurred. Please try again' });\n      });\n  };\n\n  const handleSubmit = (values: FormikValues, action: FormikHelpers<FormikValues>) => {\n    const obj = constructObjForUpdate(values.trafficSplitting, service);\n    if (!deleteTraffic || deleteTraffic.percent === 0) {\n      deleteRevision(action);\n      return;\n    }\n\n    k8sUpdate(ServiceModel, obj)\n      .then(() => {\n        deleteRevision(action);\n      })\n      .catch((err) => {\n        action.setStatus({ error: err.message || 'An error occurred. Please try again' });\n      });\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      onReset={cancel}\n      initialStatus={{ error: '' }}\n    >\n      {(modalProps) => (\n        <DeleteRevisionModal\n          {...modalProps}\n          revisionItems={revisionItems}\n          deleteRevision={revision}\n          showTraffic={deleteTraffic?.percent > 0}\n        />\n      )}\n    </Formik>\n  );\n};\n\ntype DeleteRevisionModalControllerProps = {\n  revision: K8sResourceKind;\n};\n\nconst DeleteRevisionModalController: React.FC<DeleteRevisionModalControllerProps> = (props) => {\n  const {\n    metadata: { namespace },\n  } = props.revision;\n  const resources = knativeServingResourcesTrafficSplitting(namespace);\n  resources.push({\n    isList: true,\n    kind: referenceForModel(ServiceModel),\n    namespace,\n    prop: 'services',\n  });\n\n  return (\n    <Firehose resources={resources}>\n      <Controller {...props} />\n    </Firehose>\n  );\n};\n\ntype Props = DeleteRevisionModalControllerProps & ModalComponentProps;\n\nexport const deleteRevisionModalLauncher = createModalLauncher<Props>(\n  DeleteRevisionModalController,\n);\n","import * as React from 'react';\nimport { FormikProps, FormikValues } from 'formik';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { MultiColumnField, InputField, DropdownField } from '@console/shared';\nimport { RevisionItems } from '../../utils/traffic-splitting-utils';\n\ninterface TrafficSplittingFieldProps {\n  revisionItems: RevisionItems;\n}\n\ntype Props = FormikProps<FormikValues> & TrafficSplittingFieldProps;\n\nconst TrafficSplittingFields: React.FC<Props> = ({ revisionItems, values }) => {\n  return (\n    <MultiColumnField\n      name=\"trafficSplitting\"\n      addLabel=\"Add Revision\"\n      headers={[{ name: 'Split', required: true }, 'Tag', { name: 'Revision', required: true }]}\n      emptyValues={{ percent: '', tag: '', revisionName: '' }}\n      disableDeleteRow={values.trafficSplitting.length === 1}\n      spans={[2, 3, 7]}\n    >\n      <InputField\n        name=\"percent\"\n        type={TextInputTypes.number}\n        style={{ maxWidth: '100%' }}\n        required\n      />\n      <InputField name=\"tag\" type={TextInputTypes.text} />\n      <DropdownField\n        name=\"revisionName\"\n        items={revisionItems}\n        title=\"Select a revision\"\n        fullWidth\n        required\n      />\n    </MultiColumnField>\n  );\n};\n\nexport default TrafficSplittingFields;\n","import * as _ from 'lodash';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { FirehoseResource } from '@console/internal/components/utils';\nimport { getKnativeServiceData } from '../topology/knative-topology-utils';\nimport {\n  knativeServingResourcesRevision,\n  knativeServingResourcesConfigurations,\n} from './get-knative-resources';\n\nexport type RevisionItems = { [name: string]: string };\n\nexport const getRevisionItems = (revisions: K8sResourceKind[]): RevisionItems => {\n  return revisions.reduce((acc, currValue) => {\n    acc[currValue.metadata.name] = currValue.metadata.name;\n    return acc;\n  }, {} as RevisionItems);\n};\n\nexport const constructObjForUpdate = (traffic, service) => {\n  const obj = _.omit(service, 'status');\n  return {\n    ...obj,\n    spec: { ...obj.spec, traffic },\n  };\n};\n\nexport const transformTrafficSplittingData = (\n  obj: K8sResourceKind,\n  resources,\n): K8sResourceKind[] => {\n  const { revisions } = getKnativeServiceData(obj, resources);\n  return revisions;\n};\n\nexport const knativeServingResourcesTrafficSplitting = (namespace: string): FirehoseResource[] => [\n  ...knativeServingResourcesRevision(namespace),\n  ...knativeServingResourcesConfigurations(namespace),\n];\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAMA;AACA;AAEA;AAUA;AACA;AACA;AAEA;AAEA;AACA;;AAAA;AACA;AACA;AACA;;AACA;AACA;;AAAA;AACA;;AAAA;AACA;AACA;AACA;AAEA;AAMA;AAIA;AASA;AAEA;;;;;;;;;;;;;AC9DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAMA;AAMA;AAOA;AACA;AACA;AAOA;AAcA;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAEA;AACA;;AACA;AAEA;AACA;;AACA;;AAAA;AACA;AAEA;AACA;AACA;AAYA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAiBA;AAMA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AAIA;;;;;;;;;;;;;AC3LA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AASA;AACA;AASA;AAMA;AACA;AASA;AAEA;;;;;;;;;;;;;ACxCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;A","sourceRoot":""}