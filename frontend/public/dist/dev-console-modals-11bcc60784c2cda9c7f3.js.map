{"version":3,"file":"dev-console-modals-11bcc60784c2cda9c7f3.js","sources":["webpack:///./packages/dev-console/src/components/dropdown/ApplicationDropdown.tsx","webpack:///./packages/dev-console/src/components/import/app/ApplicationSelector.tsx","webpack:///./packages/dev-console/src/components/import/section/FormSection.scss?8752","webpack:///./packages/dev-console/src/components/import/section/FormSection.tsx","webpack:///./packages/dev-console/src/components/modals/DeleteResourceModal.tsx","webpack:///./packages/dev-console/src/components/modals/EditApplicationModal.tsx","webpack:///./packages/dev-console/src/components/topology/components/const.ts","webpack:///./packages/dev-console/src/components/topology/operators/components/const.ts","webpack:///./packages/dev-console/src/components/topology/topology-utils.ts"],"sourcesContent":["import * as React from 'react';\nimport { Firehose } from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { ServiceModel } from '@console/knative-plugin';\nimport { VirtualMachineModel } from '@console/kubevirt-plugin/src/models';\nimport { ResourceDropdown } from '@console/shared';\n\ninterface ApplicationDropdownProps {\n  id?: string;\n  className?: string;\n  dropDownClassName?: string;\n  menuClassName?: string;\n  buttonClassName?: string;\n  title?: React.ReactNode;\n  titlePrefix?: string;\n  allApplicationsKey?: string;\n  storageKey?: string;\n  disabled?: boolean;\n  allSelectorItem?: {\n    allSelectorKey?: string;\n    allSelectorTitle?: string;\n  };\n  namespace?: string;\n  actionItems?: {\n    actionTitle: string;\n    actionKey: string;\n  }[];\n  selectedKey: string;\n  autoSelect?: boolean;\n  onChange?: (key: string, name?: string) => void;\n  onLoad?: (items: { [key: string]: string }) => void;\n}\n\nconst ApplicationDropdown: React.FC<ApplicationDropdownProps> = ({ namespace, ...props }) => {\n  const resources = [\n    {\n      isList: true,\n      namespace,\n      kind: 'DeploymentConfig',\n      prop: 'deploymentConfigs',\n    },\n    {\n      isList: true,\n      namespace,\n      kind: 'Deployment',\n      prop: 'deployments',\n    },\n    {\n      isList: true,\n      kind: 'StatefulSet',\n      namespace,\n      prop: 'statefulSets',\n    },\n    {\n      isList: true,\n      kind: 'DaemonSet',\n      namespace,\n      prop: 'daemonSets',\n    },\n    {\n      isList: true,\n      kind: referenceForModel(ServiceModel),\n      namespace,\n      prop: 'knativeService',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: 'Secret',\n      namespace,\n      prop: 'secrets',\n    },\n    {\n      isList: true,\n      kind: VirtualMachineModel.kind,\n      namespace,\n      prop: 'virtualMachines',\n      optional: true,\n    },\n  ];\n  return (\n    <Firehose resources={resources}>\n      <ResourceDropdown\n        {...props}\n        placeholder=\"Select an Application\"\n        dataSelector={['metadata', 'labels', 'app.kubernetes.io/part-of']}\n      />\n    </Firehose>\n  );\n};\n\nexport default ApplicationDropdown;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useFormikContext, FormikValues, useField } from 'formik';\nimport { FormGroup, TextInputTypes } from '@patternfly/react-core';\nimport { InputField, getFieldId, useFormikValidationFix } from '@console/shared';\nimport { CREATE_APPLICATION_KEY, UNASSIGNED_KEY } from '../../../const';\nimport { sanitizeApplicationValue } from '../../../utils/application-utils';\nimport ApplicationDropdown from '../../dropdown/ApplicationDropdown';\n\nexport interface ApplicationSelectorProps {\n  namespace?: string;\n  noProjectsAvailable?: boolean;\n}\n\nconst ApplicationSelector: React.FC<ApplicationSelectorProps> = ({\n  namespace,\n  noProjectsAvailable,\n}) => {\n  const [applicationsAvailable, setApplicationsAvailable] = React.useState(true);\n  const projectsAvailable = !noProjectsAvailable;\n\n  const [selectedKey, { touched, error }] = useField('application.selectedKey');\n  const { setFieldValue, setFieldTouched } = useFormikContext<FormikValues>();\n  const fieldId = getFieldId('application-name', 'dropdown');\n  const isValid = !(touched && error);\n  const errorMessage = !isValid ? error : '';\n\n  useFormikValidationFix(selectedKey.value);\n\n  const onDropdownChange = (key: string, application: string) => {\n    setFieldValue('application.selectedKey', key);\n    setFieldTouched('application.selectedKey', true);\n    setFieldValue('application.name', sanitizeApplicationValue(application, key));\n    setFieldTouched('application.name', true);\n  };\n\n  const handleOnLoad = (applicationList: { [key: string]: string }) => {\n    const noApplicationsAvailable = _.isEmpty(applicationList);\n    setApplicationsAvailable(!noApplicationsAvailable);\n    if (noApplicationsAvailable) {\n      setFieldValue('application.selectedKey', '');\n      setFieldValue('application.name', '');\n    }\n  };\n\n  const actionItems = [\n    {\n      actionTitle: 'Create Application',\n      actionKey: CREATE_APPLICATION_KEY,\n    },\n    {\n      actionTitle: 'Unassigned',\n      actionKey: UNASSIGNED_KEY,\n    },\n  ];\n\n  return (\n    <>\n      {projectsAvailable && applicationsAvailable && (\n        <FormGroup\n          fieldId={fieldId}\n          label=\"Application\"\n          helperTextInvalid={errorMessage}\n          isValid={isValid}\n          helperText=\"Select an application for your grouping or Unassigned to not use an application grouping.\"\n        >\n          <ApplicationDropdown\n            dropDownClassName=\"dropdown--full-width\"\n            menuClassName=\"dropdown-menu--text-wrap\"\n            id={fieldId}\n            namespace={namespace}\n            actionItems={actionItems}\n            autoSelect\n            selectedKey={selectedKey.value}\n            onChange={onDropdownChange}\n            onLoad={handleOnLoad}\n          />\n        </FormGroup>\n      )}\n      {(!applicationsAvailable || selectedKey.value === CREATE_APPLICATION_KEY) && (\n        <InputField\n          type={TextInputTypes.text}\n          required={selectedKey.value === CREATE_APPLICATION_KEY}\n          name=\"application.name\"\n          label=\"Application Name\"\n          data-test-id=\"application-form-app-input\"\n          helpText=\"A unique name given to the application grouping to label your resources.\"\n        />\n      )}\n    </>\n  );\n};\n\nexport default ApplicationSelector;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport cx from 'classnames';\nimport { FormHelperText } from '@patternfly/react-core';\nimport './FormSection.scss';\n\nexport interface FormSectionProps {\n  title?: React.ReactNode;\n  subTitle?: React.ReactNode;\n  fullWidth?: boolean;\n  children: React.ReactNode;\n  flexLayout?: boolean;\n  extraMargin?: boolean;\n}\n\nconst flexStyle: React.CSSProperties = {\n  display: 'flex',\n  flex: 1,\n  flexDirection: 'column',\n  margin: 'var(--pf-global--spacer--md) 0',\n};\n\nconst FormSection: React.FC<FormSectionProps> = ({\n  title,\n  subTitle,\n  fullWidth,\n  children,\n  flexLayout,\n  extraMargin,\n}) => (\n  <div\n    className={cx('pf-c-form', {\n      'co-m-pane__form': !fullWidth,\n      'odc-form-section--extra-margin': extraMargin,\n    })}\n    style={flexLayout ? flexStyle : {}}\n  >\n    {title && <h2 className=\"odc-form-section__heading\">{title}</h2>}\n    {subTitle && <FormHelperText isHidden={false}>{subTitle}</FormHelperText>}\n    {children}\n  </div>\n);\n\nexport default FormSection;\n","import * as React from 'react';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { PromiseComponent, history } from '@console/internal/components/utils';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory/modal';\nimport { Formik, FormikProps, FormikValues } from 'formik';\nimport { YellowExclamationTriangleIcon, InputField } from '@console/shared';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\n\ntype DeleteResourceModalProps = {\n  resourceName: string;\n  resourceType: string;\n  actionLabel?: string;\n  redirect?: string;\n  onSubmit: (values: FormikValues) => Promise<K8sResourceKind[]>;\n  cancel?: () => void;\n  close?: () => void;\n};\n\ntype DeleteResourceModalState = {\n  inProgress: boolean;\n  errorMessage: string;\n};\n\nconst DeleteResourceForm: React.FC<FormikProps<FormikValues> & DeleteResourceModalProps> = ({\n  handleSubmit,\n  resourceName,\n  resourceType,\n  actionLabel = 'Delete',\n  isSubmitting,\n  cancel,\n  values,\n  status,\n}) => {\n  const isValid = values.resourceName === resourceName;\n  return (\n    <form onSubmit={handleSubmit} className=\"modal-content modal-content--no-inner-scroll\">\n      <ModalTitle>\n        <YellowExclamationTriangleIcon className=\"co-icon-space-r\" /> {actionLabel} {resourceType}?\n      </ModalTitle>\n      <ModalBody>\n        <p>\n          This action cannot be undone. All associated Deployments, Routes, Builds, Pipelines,\n          Storage/PVC&#39;s, secrets, and configmaps will be deleted.\n        </p>\n        <p>\n          Confirm deletion by typing <strong className=\"co-break-word\">{resourceName}</strong>{' '}\n          below:\n        </p>\n        <InputField type={TextInputTypes.text} name=\"resourceName\" />\n      </ModalBody>\n      <ModalSubmitFooter\n        submitText={actionLabel}\n        submitDisabled={(status && !!status.submitError) || !isValid}\n        cancel={cancel}\n        inProgress={isSubmitting}\n        submitDanger\n        errorMessage={status && status.submitError}\n      />\n    </form>\n  );\n};\n\nclass DeleteResourceModal extends PromiseComponent<\n  DeleteResourceModalProps,\n  DeleteResourceModalState\n> {\n  private handleSubmit = (values, actions) => {\n    actions.setSubmitting(true);\n    const { onSubmit, close, redirect } = this.props;\n    onSubmit &&\n      this.handlePromise(onSubmit(values))\n        .then(() => {\n          actions.setSubmitting(false);\n          close();\n          redirect && history.push(redirect);\n        })\n        .catch((errorMessage) => {\n          actions.setSubmitting(false);\n          actions.setStatus({ submitError: errorMessage });\n        });\n  };\n\n  render() {\n    const initialValues = {\n      resourceName: '',\n    };\n    return (\n      <Formik initialValues={initialValues} onSubmit={this.handleSubmit}>\n        {(formProps) => <DeleteResourceForm {...formProps} {...this.props} />}\n      </Formik>\n    );\n  }\n}\n\nexport const deleteResourceModal = createModalLauncher((props: DeleteResourceModalProps) => (\n  <DeleteResourceModal {...props} />\n));\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Title } from '@patternfly/react-core';\nimport { K8sKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport { PromiseComponent } from '@console/internal/components/utils';\nimport { Node } from '@console/topology';\nimport {\n  createModalLauncher,\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n} from '@console/internal/components/factory/modal';\nimport { Formik, FormikProps, FormikValues } from 'formik';\nimport FormSection from '../import/section/FormSection';\nimport ApplicationSelector from '../import/app/ApplicationSelector';\nimport { updateResourceApplication } from '../../utils/application-utils';\nimport { updateTopologyResourceApplication } from '../topology/topology-utils';\nimport { UNASSIGNED_KEY } from '../../const';\n\ntype EditApplicationFormProps = {\n  resource: K8sResourceKind;\n  initialApplication: string;\n  cancel?: () => void;\n};\n\ntype EditApplicationModalState = {\n  inProgress: boolean;\n  errorMessage: string;\n};\n\ntype EditApplicationModalProps = EditApplicationFormProps & {\n  resourceKind: K8sKind;\n  close?: () => void;\n};\n\nconst EditApplicationForm: React.FC<FormikProps<FormikValues> & EditApplicationFormProps> = ({\n  resource,\n  handleSubmit,\n  isSubmitting,\n  cancel,\n  values,\n  initialApplication,\n  status,\n}) => {\n  const dirty = _.get(values, 'application.selectedKey') !== initialApplication;\n  return (\n    <form onSubmit={handleSubmit} className=\"modal-content modal-content--no-inner-scroll\">\n      <ModalTitle>Edit Application Grouping</ModalTitle>\n      <ModalBody>\n        <Title size=\"sm\" className=\"co-m-form-row\">\n          Select an application group to add the component\n          <strong>{` ${resource.metadata.name} `}</strong>\n          to\n        </Title>\n        <FormSection fullWidth>\n          <ApplicationSelector namespace={resource.metadata.namespace} />\n        </FormSection>\n      </ModalBody>\n      <ModalSubmitFooter\n        submitText=\"Save\"\n        submitDisabled={!dirty}\n        cancel={cancel}\n        inProgress={isSubmitting}\n        errorMessage={status && status.submitError}\n      />\n    </form>\n  );\n};\n\nclass EditApplicationModal extends PromiseComponent<\n  EditApplicationModalProps,\n  EditApplicationModalState\n> {\n  private handleSubmit = (values, actions) => {\n    const { resourceKind, resource } = this.props;\n    const application = _.get(values, 'application.name');\n\n    this.handlePromise(updateResourceApplication(resourceKind, resource, application))\n      .then(() => {\n        actions.setSubmitting(false);\n        this.props.close();\n      })\n      .catch((errorMessage) => {\n        actions.setSubmitting(false);\n        actions.setStatus({ submitError: errorMessage });\n      });\n  };\n\n  render() {\n    const { resource } = this.props;\n    const application = _.get(resource, ['metadata', 'labels', 'app.kubernetes.io/part-of']);\n\n    const initialValues = {\n      application: {\n        name: application,\n        selectedKey: application || UNASSIGNED_KEY,\n      },\n    };\n    return (\n      <Formik\n        initialValues={initialValues}\n        onSubmit={this.handleSubmit}\n        render={(formProps) => (\n          <EditApplicationForm {...formProps} {...this.props} initialApplication={application} />\n        )}\n      />\n    );\n  }\n}\n\ntype GroupEditApplicationModalProps = {\n  group: Node;\n  cancel?: () => void;\n  close?: () => void;\n};\n\nclass GroupEditApplicationModal extends PromiseComponent<\n  GroupEditApplicationModalProps,\n  EditApplicationModalState\n> {\n  private handleSubmit = (values, actions) => {\n    const application = _.get(values, 'application.name');\n\n    this.handlePromise(updateTopologyResourceApplication(this.props.group.getData(), application))\n      .then(() => {\n        actions.setSubmitting(false);\n        this.props.close();\n      })\n      .catch((errorMessage) => {\n        actions.setSubmitting(false);\n        actions.setStatus({ submitError: errorMessage });\n      });\n  };\n\n  render() {\n    const { group } = this.props;\n    const resource = group.getData().resources.obj;\n    const application = _.get(resource, ['metadata', 'labels', 'app.kubernetes.io/part-of']);\n\n    const initialValues = {\n      application: {\n        name: application,\n        selectedKey: application,\n      },\n    };\n    return (\n      <Formik\n        initialValues={initialValues}\n        onSubmit={this.handleSubmit}\n        render={(formProps) => (\n          <EditApplicationForm\n            {...formProps}\n            {...this.props}\n            resource={resource}\n            initialApplication={application}\n          />\n        )}\n      />\n    );\n  }\n}\n\nexport const editApplicationModal = createModalLauncher((props: EditApplicationModalProps) => (\n  <EditApplicationModal {...props} />\n));\n\nexport const groupEditApplicationModal = createModalLauncher(\n  (props: GroupEditApplicationModalProps) => <GroupEditApplicationModal {...props} />,\n);\n","import { STORAGE_PREFIX } from '@console/shared';\n\nexport const TYPE_WORKLOAD = 'workload';\nexport const TYPE_CONNECTS_TO = 'connects-to';\nexport const TYPE_AGGREGATE_EDGE = 'aggregate-edge';\nexport const TYPE_SERVICE_BINDING = 'service-binding';\nexport const TYPE_APPLICATION_GROUP = 'part-of';\nexport const TYPE_TRAFFIC_CONNECTOR = 'traffic-connector';\nexport const LAST_TOPOLOGY_VIEW_LOCAL_STORAGE_KEY = `${STORAGE_PREFIX}/last-topology-view`;\n\nexport const DEFAULT_NODE_PAD = 20;\nexport const DEFAULT_GROUP_PAD = 40;\n\nexport const NODE_WIDTH = 104;\nexport const NODE_HEIGHT = 104;\nexport const NODE_PADDING = [0, DEFAULT_NODE_PAD];\n\nexport const GROUP_WIDTH = 300;\nexport const GROUP_HEIGHT = 180;\nexport const GROUP_PADDING = [DEFAULT_GROUP_PAD];\n","import { GROUP_HEIGHT, GROUP_PADDING, GROUP_WIDTH } from '../../components/const';\n\nexport const TYPE_OPERATOR_BACKED_SERVICE = 'operator-backed-service';\nexport const TYPE_OPERATOR_WORKLOAD = 'operator-workload';\n\nexport const OPERATOR_GROUP_WIDTH = GROUP_WIDTH;\nexport const OPERATOR_GROUP_HEIGHT = GROUP_HEIGHT;\nexport const OPERATOR_GROUP_PADDING = GROUP_PADDING;\n","import * as _ from 'lodash';\nimport { K8sResourceKind, modelFor, referenceFor } from '@console/internal/module/k8s';\nimport { RootState } from '@console/internal/redux';\nimport { getRouteWebURL } from '@console/internal/components/routes';\nimport { OverviewItem } from '@console/shared';\nimport {\n  createResourceConnection,\n  updateResourceApplication,\n  removeResourceConnection,\n  createServiceBinding,\n  removeServiceBinding,\n} from '../../utils/application-utils';\nimport { TopologyDataObject } from './topology-types';\nimport { TYPE_OPERATOR_BACKED_SERVICE } from './operators/components/const';\nimport { HelmReleaseResourcesMap } from '../helm/helm-types';\nimport { ALLOW_SERVICE_BINDING } from '../../const';\n\nexport const allowedResources = ['deployments', 'deploymentConfigs', 'daemonSets', 'statefulSets'];\n\nexport const getServiceBindingStatus = ({ FLAGS }: RootState): boolean =>\n  FLAGS.get(ALLOW_SERVICE_BINDING);\n\nexport const getCheURL = (consoleLinks: K8sResourceKind[]) =>\n  _.get(_.find(consoleLinks, ['metadata.name', 'che']), 'spec.href', '');\n\nexport const getEditURL = (gitURL: string, cheURL: string) => {\n  return gitURL && cheURL ? `${cheURL}/f?url=${gitURL}&policies.create=peruser` : gitURL;\n};\n\nexport const getHelmReleaseKey = (resource) => `${resource.kind}---${resource.metadata.name}`;\n\nexport const isHelmReleaseNode = (\n  obj: K8sResourceKind,\n  helmResourcesMap: HelmReleaseResourcesMap,\n): boolean => {\n  if (helmResourcesMap) {\n    return helmResourcesMap.hasOwnProperty(getHelmReleaseKey(obj));\n  }\n  return false;\n};\n\nexport const getKialiLink = (consoleLinks: K8sResourceKind[], namespace: string): string => {\n  const kialiLink = _.find(consoleLinks, ['metadata.name', `kiali-namespace-${namespace}`])?.spec\n    ?.href;\n  return kialiLink || '';\n};\n\n/**\n * filter data based on the active application\n */\nexport const filterBasedOnActiveApplication = (\n  data: K8sResourceKind[],\n  application: string,\n): K8sResourceKind[] => {\n  const PART_OF = 'app.kubernetes.io/part-of';\n  if (!application) {\n    return data;\n  }\n  return data.filter((dc) => {\n    return _.get(dc, ['metadata', 'labels', PART_OF]) === application;\n  });\n};\n\n/**\n * get the route data\n */\nconst getRouteData = (ksroutes: K8sResourceKind[], resource: OverviewItem): string => {\n  if (ksroutes && ksroutes.length > 0 && !_.isEmpty(ksroutes[0].status)) {\n    const trafficData = _.find(ksroutes[0].status.traffic, {\n      revisionName: resource.obj.metadata.name,\n    });\n    return _.get(trafficData, 'url', ksroutes[0].status.url);\n  }\n  return null;\n};\n\n/**\n * get routes url\n */\nexport const getRoutesURL = (resource: OverviewItem): string => {\n  const { routes, ksroutes } = resource;\n  if (routes.length > 0 && !_.isEmpty(routes[0].spec)) {\n    return getRouteWebURL(routes[0]);\n  }\n  return getRouteData(ksroutes, resource);\n};\n\nexport const getTopologyResourceObject = (topologyObject: TopologyDataObject): K8sResourceKind => {\n  if (!topologyObject) {\n    return null;\n  }\n  return _.get(topologyObject, ['resources', 'obj']);\n};\n\nexport const updateTopologyResourceApplication = (\n  item: TopologyDataObject,\n  application: string,\n): Promise<any> => {\n  if (!item || !_.size(item.resources)) {\n    return Promise.reject();\n  }\n\n  const resources: K8sResourceKind[] = [];\n  const updates: Promise<any>[] = [];\n\n  resources.push(getTopologyResourceObject(item));\n\n  if (item.type === TYPE_OPERATOR_BACKED_SERVICE) {\n    _.forEach(item.groupResources, (groupResource) => {\n      resources.push(getTopologyResourceObject(groupResource));\n    });\n  }\n\n  for (const resource of resources) {\n    const resourceKind = modelFor(referenceFor(resource));\n    if (!resourceKind) {\n      return Promise.reject(\n        new Error(`Unable to update application, invalid resource type: ${resource.kind}`),\n      );\n    }\n    updates.push(updateResourceApplication(resourceKind, resource, application));\n  }\n\n  return Promise.all(updates);\n};\n\nexport const createTopologyResourceConnection = (\n  source: TopologyDataObject,\n  target: TopologyDataObject,\n  replaceTarget: TopologyDataObject = null,\n  serviceBindingFlag: boolean,\n): Promise<K8sResourceKind[] | K8sResourceKind> => {\n  if (!source || !target || source === target) {\n    return Promise.reject(new Error('Can not create a connection from a node to itself.'));\n  }\n\n  const sourceObj = getTopologyResourceObject(source);\n  const targetObj = getTopologyResourceObject(target);\n  const replaceTargetObj = replaceTarget && getTopologyResourceObject(replaceTarget);\n\n  if (serviceBindingFlag && target.operatorBackedService) {\n    if (replaceTarget) {\n      return new Promise<K8sResourceKind[] | K8sResourceKind>((resolve, reject) => {\n        createServiceBinding(sourceObj, targetObj)\n          .then(() => {\n            // eslint-disable-next-line promise/no-nesting\n            removeResourceConnection(sourceObj, replaceTargetObj)\n              .then(resolve)\n              .catch(reject);\n          })\n          .catch(reject);\n      });\n    }\n\n    return createServiceBinding(sourceObj, targetObj);\n  }\n\n  return createResourceConnection(sourceObj, targetObj, replaceTargetObj);\n};\n\nexport const removeTopologyResourceConnection = (\n  source: TopologyDataObject,\n  target: TopologyDataObject,\n  sbr: K8sResourceKind,\n  edgeType: string,\n): Promise<any> => {\n  if (!source || !target) {\n    return Promise.reject();\n  }\n\n  const sourceObj = getTopologyResourceObject(source);\n  const targetObj = getTopologyResourceObject(target);\n\n  if (edgeType === 'service-binding') {\n    return removeServiceBinding(sbr);\n  }\n\n  return removeResourceConnection(sourceObj, targetObj);\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AA4BA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AAEA;;;;;;;;;;;;;AC3FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAQA;AAaA;AAYA;AAEA;;;;;;;;;;;;AC7FA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;AACA;AACA;AAGA;AACA;AACA;AAIA;;;;;;;;;;;;;AC1CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAMA;AACA;AAkBA;AAUA;AACA;AAEA;AACA;;AAAA;;AAAA;AACA;AACA;AACA;AAIA;;AACA;AAAA;AAEA;AACA;AAEA;AAUA;AAEA;AAAA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AAVA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;;;;;;;;;;;;;ACnGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AAkBA;AASA;AACA;AAEA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AAGA;AASA;AAEA;AAAA;;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAsBA;AApBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AAQA;AAAA;;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA4BA;AA1BA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAcA;AACA;AAEA;AAIA;;;;;;;;;;;;;ACtKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;;;;;;;;;;;;;ACPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AAQA;AAEA;AAEA;AAEA;AAGA;AAGA;AACA;AACA;AAEA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAEA;;AACA;AAEA;AACA;AAEA;;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AAEA;AAMA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAMA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;;;;;A","sourceRoot":""}