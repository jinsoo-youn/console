{"version":3,"file":"workflow-template-ff1671d2ec8c8f3bcc7c.js","sources":["webpack:///./packages/dev-console/src/components/pipelines/detail-page-tabs/pipeline-details/WorkflowTemplateVisualization.tsx","webpack:///./public/components/hypercloud/workflow-template.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Alert } from '@patternfly/react-core';\nimport PipelineTopologyGraph from '../../pipeline-topology/PipelineTopologyGraph';\nimport { getTopologyNodesEdges } from '../../pipeline-topology/utils';\nimport { PipelineLayout, NodeType } from '../../pipeline-topology/const';\n\nimport './PipelineVisualization.scss';\nimport * as _ from 'lodash-es';\n\ninterface WorkflowTemplateTopologyVisualizationProps {\n  workflowTemplate: any;\n  workflow?: any;\n}\n\nexport const WorkflowTemplateVisualization: React.FC<WorkflowTemplateTopologyVisualizationProps> = ({\n  workflowTemplate,\n  workflow = undefined\n}) => {\n  const obj = workflow || workflowTemplate;\n  const templates = _.get(obj, ['spec', 'templates']) || [];\n  let template = null;\n  let tasks = [];\n  for (let tmp of templates) {\n    if (tmp.hasOwnProperty('dag')) {\n      template = { ...tmp, type: 'dag' };\n    }\n    else if (tmp.hasOwnProperty('steps')) {\n      template = { ...tmp, type: 'step' };\n    }\n  }\n  if (template?.type === 'dag') {\n    tasks = _.get(template, ['dag', 'tasks']).map(item => {\n      return {\n        name: item.name,\n        runAfter: item.dependencies || [],\n        taskRef: {\n          kind: 'Task',\n          name: item.name,\n        },\n        ...item,\n      };\n    });\n  } else if (template?.type === 'step') {\n    tasks = template.steps[0] ? template.steps\n      .map(item => item[0])\n      .map((item, idx, arr) => {\n        return {\n          name: item.name,\n          runAfter: idx ? [arr[idx - 1].name] : [],\n          taskRef: {\n            kind: 'Task',\n            name: item.name,\n          },\n          ...item,\n        };\n      }) : [];\n  }\n  else {\n    // 그래프로 표현할 항목이 없을 경우 템플릿을 노드 하나로 표현\n    tasks = templates.map((item) => {\n      return {\n        name: item.name,\n        isTemplate: true,\n        runAfter: [],\n        taskRef: {\n          kind: 'Task',\n          name: item.name,\n        },\n        ...item,\n      };\n    });\n  }\n  obj.spec.tasks = tasks;\n  const { nodes, edges } = getTopologyNodesEdges(workflowTemplate, workflow);\n  nodes.forEach(node => node.type = NodeType.WORKFLOW_NODE);\n\n  if (nodes.length === 0 && edges.length === 0) {\n    // Nothing to render\n    // TODO: Confirm wording with UX; ODC-1860\n    return (\n      <Alert\n        variant=\"info\"\n        isInline\n        title={`This ${workflow ? 'Workflow' : 'Workflow Template'\n          } has no step to visualize.`}\n      />\n    );\n  }\n\n  return (\n    <div className=\"odc-pipeline-visualization\">\n      <PipelineTopologyGraph\n        id={workflow?.metadata?.name || workflowTemplate.metadata.name}\n        nodes={nodes}\n        edges={edges}\n        layout={PipelineLayout.DAGRE_VIEWER}\n      />\n    </div>\n  );\n};\n\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\n\nimport { K8sResourceKind } from '../../module/k8s';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from '../factory';\nimport { Kebab, KebabAction, detailsPage, navFactory, ResourceKebab, ResourceLink, ResourceSummary, SectionHeading } from '../utils';\nimport { WorkflowTemplateVisualization } from '../../../packages/dev-console/src/components/pipelines/detail-page-tabs/pipeline-details/WorkflowTemplateVisualization';\nimport { WorkflowTemplateModel } from '../../models';\nimport { ResourceLabel } from '../../models/hypercloud/resource-plural';\nimport { fromNow } from '../utils/datetime';\n\nexport const menuActions: KebabAction[] = [...Kebab.getExtensionsActionsForKind(WorkflowTemplateModel), ...Kebab.factory.common];\n\nconst kind = WorkflowTemplateModel.kind;\n\nconst tableColumnClasses = ['', '', classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'), Kebab.columnClass];\n\nconst WorkflowTemplateTableHeader = (t?: TFunction) => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_2'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_12'),\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[3] },\n    },\n  ];\n};\nWorkflowTemplateTableHeader.displayName = 'WorkflowTemplateTableHeader';\n\nconst WorkflowTemplateTableRow: RowFunction<K8sResourceKind> = ({ obj: wft, index, key, style }) => {\n  return (\n    <TableRow id={wft.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={wft.metadata.name} namespace={wft.metadata.namespace} title={wft.metadata.uid} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={wft.metadata.namespace} title={wft.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        {fromNow(wft.metadata.creationTimestamp)}\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={wft} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst WorkflowTemplateGraph = ({ obj }) => {\n  return (\n    <div className=\"co-m-pane__body\">\n      <WorkflowTemplateVisualization workflowTemplate={obj} />\n    </div>\n  );\n};\n\nconst WorkflowTemplateDetails: React.FC<WorkflowTemplateDetailsProps> = ({ obj: wft }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', { 0: ResourceLabel(wft, t) })} />\n        <div className=\"row\">\n          <div className=\"col-lg-6\">\n            <ResourceSummary resource={wft} />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst { details, editYaml } = navFactory;\nexport const WorkflowTemplates: React.FC = props => {\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"WorkflowTemplates\" Header={WorkflowTemplateTableHeader.bind(null, t)} Row={WorkflowTemplateTableRow} virtualize />;\n}\n\nexport const WorkflowTemplatesPage: React.FC<WorkflowTemplatesPageProps> = props => <ListPage canCreate={true} ListComponent={WorkflowTemplates} kind={kind} {...props} />;\n\nexport const WorkflowTemplatesDetailsPage: React.FC<WorkflowTemplatesDetailsPageProps> = props => {\n  const { t } = useTranslation();\n  return (\n    <DetailsPage\n      {...props}\n      kind={kind}\n      menuActions={menuActions}\n      pages={[\n        details(detailsPage(WorkflowTemplateDetails)),\n        {\n          href: 'template',\n          name: t('RESOURCE:TEMPLATE'),\n          component: WorkflowTemplateGraph,\n        },\n        editYaml()\n      ]}\n    />\n  );\n}\n\ntype WorkflowTemplateDetailsProps = {\n  obj: K8sResourceKind;\n};\n\ntype WorkflowTemplatesPageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: any;\n};\n\ntype WorkflowTemplatesDetailsPageProps = {\n  match: any;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAGA;AACA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAQA;AAEA;AAEA;AAQA;;;;;;;;;;;;;ACnGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAIA;AAEA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;;;;;A","sourceRoot":""}