{"version":3,"file":"machine-set-68c8a4cd1335dce4408c.js","sources":["webpack:///./packages/console-app/src/components/nodes/NodeIPList.tsx","webpack:///./public/components/machine-set.tsx","webpack:///./public/components/machine.tsx"],"sourcesContent":["import * as _ from 'lodash';\nimport * as React from 'react';\nimport { NodeAddress, DetailPropertyList, DetailPropertyListItem } from '@console/shared';\n\ntype NodeIPListProps = {\n  ips: NodeAddress[];\n  expand?: boolean;\n};\n\nconst NodeIPList: React.FC<NodeIPListProps> = ({ ips, expand = false }) => (\n  <DetailPropertyList>\n    {_.sortBy(ips, ['type']).map(\n      ({ type, address }) =>\n        address &&\n        (expand || type === 'InternalIP') && (\n          <DetailPropertyListItem\n            key={`{${type}/${address}`}\n            title={type.replace(/([a-z])([A-Z])/g, '$1 $2')}\n          >\n            {address}\n          </DetailPropertyListItem>\n        ),\n    )}\n  </DetailPropertyList>\n);\n\nexport default NodeIPList;\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Link } from 'react-router-dom';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport { getMachineAWSPlacement, getMachineRole } from '@console/shared';\nimport { Tooltip, Button } from '@patternfly/react-core';\n\nimport { PencilAltIcon } from '@patternfly/react-icons';\n\nimport { MachineAutoscalerModel, MachineModel, MachineSetModel } from '../models';\nimport { K8sKind, MachineDeploymentKind, MachineSetKind, referenceForModel } from '../module/k8s';\nimport { MachinePage } from './machine';\nimport { configureMachineAutoscalerModal, configureReplicaCountModal } from './modals';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from './factory';\nimport {\n  Kebab,\n  KebabAction,\n  ResourceKebab,\n  ResourceLink,\n  ResourceSummary,\n  SectionHeading,\n  Selector,\n  navFactory,\n  pluralize,\n  resourcePath,\n  useAccessReview,\n} from './utils';\nimport { ResourceEventStream } from './events';\n\nconst machineReplicasModal = (\n  resourceKind: K8sKind,\n  resource: MachineSetKind | MachineDeploymentKind,\n) =>\n  configureReplicaCountModal({\n    resourceKind,\n    resource,\n    title: 'Edit Machine Count',\n    message: `${resourceKind.labelPlural} maintain the proper number of healthy machines.`,\n  });\n\nexport const editCountAction: KebabAction = (\n  kind: K8sKind,\n  resource: MachineSetKind | MachineDeploymentKind,\n) => ({\n  label: 'Edit Machine Count',\n  callback: () => machineReplicasModal(kind, resource),\n  accessReview: {\n    group: kind.apiGroup,\n    resource: kind.plural,\n    name: resource.metadata.name,\n    namespace: resource.metadata.namespace,\n    verb: 'patch',\n  },\n});\n\nconst configureMachineAutoscaler: KebabAction = (kind: K8sKind, machineSet: MachineSetKind) => ({\n  label: 'Create Autoscaler',\n  callback: () => configureMachineAutoscalerModal({ machineSet, cancel: _.noop, close: _.noop }),\n  accessReview: {\n    group: MachineAutoscalerModel.apiGroup,\n    resource: MachineAutoscalerModel.plural,\n    namespace: machineSet.metadata.namespace,\n    verb: 'create',\n  },\n});\n\nconst { common } = Kebab.factory;\nconst menuActions = [\n  editCountAction,\n  configureMachineAutoscaler,\n  ...Kebab.getExtensionsActionsForKind(MachineSetModel),\n  ...common,\n];\nconst machineReference = referenceForModel(MachineModel);\nconst machineSetReference = referenceForModel(MachineSetModel);\n\n// `spec.replicas` defaults to 1 if not specified. Make sure to differentiate between undefined and 0.\nexport const getDesiredReplicas = (machineSet: MachineSetKind | MachineDeploymentKind) => {\n  return machineSet?.spec?.replicas ?? 1;\n};\n\nconst getReplicas = (machineSet: MachineSetKind | MachineDeploymentKind) =>\n  machineSet?.status?.replicas || 0;\nexport const getReadyReplicas = (machineSet: MachineSetKind | MachineDeploymentKind) =>\n  machineSet?.status?.readyReplicas || 0;\nexport const getAvailableReplicas = (machineSet: MachineSetKind | MachineDeploymentKind) =>\n  machineSet?.status?.availableReplicas || 0;\n\nconst tableColumnClasses = [\n  classNames('col-sm-4', 'col-xs-6'),\n  classNames('col-sm-4', 'col-xs-6'),\n  classNames('col-sm-4', 'hidden-xs'),\n  Kebab.columnClass,\n];\n\nconst MachineSetTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Machines',\n      sortField: 'status.replicas',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[3] },\n    },\n  ];\n};\nMachineSetTableHeader.displayName = 'MachineSetTableHeader';\n\nconst MachineSetTableRow: RowFunction<MachineSetKind> = ({ obj, index, key, style }) => {\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={machineSetReference}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n        />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Link\n          to={`${resourcePath(\n            machineSetReference,\n            obj.metadata.name,\n            obj.metadata.namespace,\n          )}/machines`}\n        >\n          {getReadyReplicas(obj)} of {getDesiredReplicas(obj)} machines\n        </Link>\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <ResourceKebab actions={menuActions} kind={machineSetReference} resource={obj} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport const MachineCounts: React.SFC<MachineCountsProps> = ({\n  resourceKind,\n  resource,\n}: {\n  resourceKind: K8sKind;\n  resource: MachineSetKind | MachineDeploymentKind;\n}) => {\n  const editReplicas = (event) => {\n    event.preventDefault();\n    machineReplicasModal(resourceKind, resource);\n  };\n\n  const desiredReplicas = getDesiredReplicas(resource);\n  const replicas = getReplicas(resource);\n  const readyReplicas = getReadyReplicas(resource);\n  const availableReplicas = getAvailableReplicas(resource);\n\n  const canUpdate = useAccessReview({\n    group: resourceKind.apiGroup,\n    resource: resourceKind.plural,\n    verb: 'patch',\n    name: resource.metadata.name,\n    namespace: resource.metadata.namespace,\n  });\n\n  const desiredReplicasText = pluralize(desiredReplicas, 'machine');\n  return (\n    <div className=\"co-m-pane__body-group\">\n      <div className=\"co-detail-table\">\n        <div className=\"co-detail-table__row row\">\n          <div className=\"co-detail-table__section\">\n            <dl className=\"co-m-pane__details\">\n              <dt className=\"co-detail-table__section-header\">Desired Count</dt>\n              <dd>\n                {canUpdate ? (\n                  <Button variant=\"link\" type=\"button\" isInline onClick={editReplicas}>\n                    {desiredReplicasText}\n                    <PencilAltIcon className=\"co-icon-space-l pf-c-button-icon--plain\" />\n                  </Button>\n                ) : (\n                  desiredReplicasText\n                )}\n              </dd>\n            </dl>\n          </div>\n          <div className=\"co-detail-table__section\">\n            <dl className=\"co-m-pane__details\">\n              <dt className=\"co-detail-table__section-header\">Current Count</dt>\n              <dd>\n                <Tooltip content=\"The most recently observed number of replicas.\">\n                  <span>{pluralize(replicas, 'machine')}</span>\n                </Tooltip>\n              </dd>\n            </dl>\n          </div>\n          <div className=\"co-detail-table__section\">\n            <dl className=\"co-m-pane__details\">\n              <dt className=\"co-detail-table__section-header\">Ready Count</dt>\n              <dd>\n                <Tooltip content=\"The number of ready replicas for this MachineSet. A machine is considered ready when the node has been created and is ready.\">\n                  <span>{pluralize(readyReplicas, 'machine')}</span>\n                </Tooltip>\n              </dd>\n            </dl>\n          </div>\n          <div className=\"co-detail-table__section co-detail-table__section--last\">\n            <dl className=\"co-m-pane__details\">\n              <dt className=\"co-detail-table__section-header\">Available Count</dt>\n              <dd>\n                <Tooltip content=\"The number of available replicas (ready for at least minReadySeconds) for this MachineSet.\">\n                  <span>{pluralize(availableReplicas, 'machine')}</span>\n                </Tooltip>\n              </dd>\n            </dl>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const MachineTabPage: React.SFC<MachineTabPageProps> = ({\n  obj,\n}: {\n  obj: MachineSetKind;\n}) => (\n  <MachinePage namespace={obj.metadata.namespace} showTitle={false} selector={obj.spec.selector} />\n);\n\nconst MachineSetDetails: React.SFC<MachineSetDetailsProps> = ({ obj }) => {\n  const machineRole = getMachineRole(obj);\n  const { availabilityZone, region } = getMachineAWSPlacement(obj);\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Machine Set Details\" />\n        <MachineCounts resourceKind={MachineSetModel} resource={obj} />\n        <ResourceSummary resource={obj}>\n          <dt>Selector</dt>\n          <dd>\n            <Selector\n              kind={machineReference}\n              selector={obj.spec?.selector}\n              namespace={obj.metadata.namespace}\n            />\n          </dd>\n          {machineRole && (\n            <>\n              <dt>Machine Role</dt>\n              <dd>{machineRole}</dd>\n            </>\n          )}\n          {region && (\n            <>\n              <dt>Region</dt>\n              <dd>{region}</dd>\n            </>\n          )}\n          {availabilityZone && (\n            <>\n              <dt>Availability Zone</dt>\n              <dd>{availabilityZone}</dd>\n            </>\n          )}\n        </ResourceSummary>\n      </div>\n    </>\n  );\n};\n\nexport const MachineSetList: React.SFC = (props) => (\n  <Table\n    {...props}\n    aria-label=\"Machine Sets\"\n    Header={MachineSetTableHeader}\n    Row={MachineSetTableRow}\n    virtualize\n  />\n);\n\nexport const MachineSetPage: React.SFC<MachineSetPageProps> = (props) => (\n  <ListPage {...props} ListComponent={MachineSetList} kind={machineSetReference} canCreate />\n);\n\nexport const MachineSetDetailsPage: React.SFC<MachineSetDetailsPageProps> = (props) => (\n  <DetailsPage\n    {...props}\n    menuActions={menuActions}\n    kind={machineSetReference}\n    pages={[\n      navFactory.details(MachineSetDetails),\n      navFactory.editYaml(),\n      navFactory.machines(MachineTabPage),\n      navFactory.events(ResourceEventStream),\n    ]}\n  />\n);\n\nexport type MachineCountsProps = {\n  resourceKind: K8sKind;\n  resource: MachineSetKind | MachineDeploymentKind;\n};\n\nexport type MachineTabPageProps = {\n  obj: MachineSetKind;\n};\n\nexport type MachineSetDetailsProps = {\n  obj: MachineSetKind;\n};\n\nexport type MachineSetPageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: any;\n};\n\nexport type MachineSetDetailsPageProps = {\n  match: any;\n};\n","import * as React from 'react';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport {\n  getMachineAddresses,\n  getMachineInstanceType,\n  getMachineNodeName,\n  getMachineRegion,\n  getMachineRole,\n  getMachineZone,\n  Status,\n  getMachinePhase,\n} from '@console/shared';\nimport { MachineModel } from '../models';\nimport { MachineKind, referenceForModel } from '../module/k8s';\nimport { Conditions } from './conditions';\nimport NodeIPList from '@console/app/src/components/nodes/NodeIPList';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from './factory';\nimport {\n  DetailsItem,\n  Kebab,\n  NodeLink,\n  ResourceKebab,\n  ResourceLink,\n  ResourceSummary,\n  SectionHeading,\n  navFactory,\n} from './utils';\nimport { ResourceEventStream } from './events';\n\nconst { common } = Kebab.factory;\nconst menuActions = [...Kebab.getExtensionsActionsForKind(MachineModel), ...common];\nexport const machineReference = referenceForModel(MachineModel);\n\nconst tableColumnClasses = [\n  '',\n  '',\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-md'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'),\n  Kebab.columnClass,\n];\n\nconst MachineTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Node',\n      sortField: 'status.nodeRef.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Phase',\n      sortFunc: 'machinePhase',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: 'Provider State',\n      sortField: 'status.providerStatus.instanceState',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: 'Region',\n      sortField: \"metadata.labels['machine.openshift.io/region']\",\n      transforms: [sortable],\n      props: { className: tableColumnClasses[5] },\n    },\n    {\n      title: 'Availability Zone',\n      sortField: \"metadata.labels['machine.openshift.io/zone']\",\n      transforms: [sortable],\n      props: { className: tableColumnClasses[6] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[7] },\n    },\n  ];\n};\nMachineTableHeader.displayName = 'MachineTableHeader';\n\nconst getMachineProviderState = (obj: MachineKind): string =>\n  obj?.status?.providerStatus?.instanceState;\n\nconst MachineTableRow: RowFunction<MachineKind> = ({ obj, index, key, style }) => {\n  const nodeName = getMachineNodeName(obj);\n  const region = getMachineRegion(obj);\n  const zone = getMachineZone(obj);\n  const providerState = getMachineProviderState(obj);\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={classNames(tableColumnClasses[0], 'co-break-word')}>\n        <ResourceLink\n          kind={machineReference}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n          title={obj.metadata.name}\n        />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        {nodeName ? <NodeLink name={nodeName} /> : '-'}\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <Status status={getMachinePhase(obj)} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>{providerState ?? '-'}</TableData>\n      <TableData className={tableColumnClasses[5]}>{region || '-'}</TableData>\n      <TableData className={tableColumnClasses[6]}>{zone || '-'}</TableData>\n      <TableData className={tableColumnClasses[7]}>\n        <ResourceKebab actions={menuActions} kind={machineReference} resource={obj} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst MachineDetails: React.SFC<MachineDetailsProps> = ({ obj }: { obj: MachineKind }) => {\n  const nodeName = getMachineNodeName(obj);\n  const machineRole = getMachineRole(obj);\n  const instanceType = getMachineInstanceType(obj);\n  const region = getMachineRegion(obj);\n  const zone = getMachineZone(obj);\n  const providerState = getMachineProviderState(obj);\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Machine Details\" />\n        <div className=\"co-m-pane__body-group\">\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <ResourceSummary resource={obj} />\n            </div>\n            <div className=\"col-sm-6\">\n              <dl className=\"co-m-pane__details\">\n                <DetailsItem label=\"Phase\" obj={obj} path=\"status.phase\">\n                  <Status status={getMachinePhase(obj)} />\n                </DetailsItem>\n                <DetailsItem\n                  label=\"Provider State\"\n                  obj={obj}\n                  path=\"status.providerStatus.instanceState\"\n                >\n                  {providerState}\n                </DetailsItem>\n                {nodeName && (\n                  <>\n                    <dt>Node</dt>\n                    <dd>\n                      <NodeLink name={nodeName} />\n                    </dd>\n                  </>\n                )}\n                {machineRole && (\n                  <>\n                    <dt>Machine Role</dt>\n                    <dd>{machineRole}</dd>\n                  </>\n                )}\n                {instanceType && (\n                  <>\n                    <dt>Instance Type</dt>\n                    <dd>{instanceType}</dd>\n                  </>\n                )}\n                {region && (\n                  <>\n                    <dt>Region</dt>\n                    <dd>{region}</dd>\n                  </>\n                )}\n                {zone && (\n                  <>\n                    <dt>Availability Zone</dt>\n                    <dd>{zone}</dd>\n                  </>\n                )}\n                <dt>Machine Addresses</dt>\n                <dd>\n                  <NodeIPList ips={getMachineAddresses(obj)} expand />\n                </dd>\n              </dl>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Conditions\" />\n        <Conditions conditions={obj.status?.providerStatus?.conditions} />\n      </div>\n    </>\n  );\n};\n\nexport const MachineList: React.SFC = (props) => (\n  <Table\n    {...props}\n    aria-label=\"Machines\"\n    Header={MachineTableHeader}\n    Row={MachineTableRow}\n    virtualize\n  />\n);\n\nexport const MachinePage: React.SFC<MachinePageProps> = (props) => (\n  <ListPage\n    {...props}\n    ListComponent={MachineList}\n    kind={machineReference}\n    textFilter=\"machine\"\n    filterLabel=\"by machine or node name\"\n    canCreate\n  />\n);\n\nexport const MachineDetailsPage: React.SFC<MachineDetailsPageProps> = (props) => (\n  <DetailsPage\n    {...props}\n    kind={machineReference}\n    menuActions={menuActions}\n    pages={[\n      navFactory.details(MachineDetails),\n      navFactory.editYaml(),\n      navFactory.events(ResourceEventStream),\n    ]}\n    getResourceStatus={getMachinePhase}\n  />\n);\n\nexport type MachineDetailsProps = {\n  obj: MachineKind;\n};\n\nexport type MachinePageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: any;\n};\n\nexport type MachineDetailsPageProps = {\n  match: any;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAOA;AAKA;AAYA;;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAaA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;AACA;AACA;AAEA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAMA;AACA;AAEA;AACA;AAOA;;AAAA;AACA;AAEA;AACA;AAIA;AAEA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AASA;AAEA;AAQA;;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AAGA;AAEA;AACA;AAGA;AAEA;AACA;AAOA;AAEA;AAUA;AAIA;AAMA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrsourceRoot":""}