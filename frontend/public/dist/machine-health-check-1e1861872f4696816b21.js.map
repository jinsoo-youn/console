{"version":3,"file":"machine-health-check-1e1861872f4696816b21.js","sources":["webpack:///./public/components/machine-health-check.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\n\nimport { MachineHealthCheckModel, MachineModel } from '../models';\nimport { K8sResourceKind, MachineHealthCheckKind } from '../module/k8s/types';\nimport { referenceForModel } from '../module/k8s/k8s';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from './factory';\nimport {\n  DetailsItem,\n  EmptyBox,\n  Kebab,\n  ResourceKebab,\n  ResourceLink,\n  ResourceSummary,\n  SectionHeading,\n  Selector,\n  Timestamp,\n  navFactory,\n} from './utils';\n\nconst { common } = Kebab.factory;\nconst menuActions = [...Kebab.getExtensionsActionsForKind(MachineHealthCheckModel), ...common];\nconst machineHealthCheckReference = referenceForModel(MachineHealthCheckModel);\n\nconst tableColumnClasses = [\n  classNames('col-xs-6', 'col-sm-4'),\n  classNames('col-xs-6', 'col-sm-4'),\n  classNames('col-sm-4', 'hidden-xs'),\n  Kebab.columnClass,\n];\n\nconst MachineHealthCheckTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Created',\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[3] },\n    },\n  ];\n};\nMachineHealthCheckTableHeader.displayName = 'MachineHealthCheckTableHeader';\n\nconst MachineHealthCheckTableRow: RowFunction<K8sResourceKind> = ({ obj, index, key, style }) => {\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={machineHealthCheckReference}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n        />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Timestamp timestamp={obj.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <ResourceKebab actions={menuActions} kind={machineHealthCheckReference} resource={obj} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst MachineHealthCheckList: React.FC = (props) => (\n  <Table\n    {...props}\n    aria-label=\"Machine HealthChecks\"\n    Header={MachineHealthCheckTableHeader}\n    Row={MachineHealthCheckTableRow}\n    virtualize\n  />\n);\n\nconst UnhealthyConditionsTable: React.FC<{ obj: K8sResourceKind }> = ({ obj }) => {\n  return _.isEmpty(obj.spec.unhealthyConditions) ? (\n    <EmptyBox label=\"Unhealthy Conditions\" />\n  ) : (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th>Status</th>\n          <th>Timeout</th>\n          <th>Type</th>\n        </tr>\n      </thead>\n      <tbody>\n        {obj.spec.unhealthyConditions.map(({ status, timeout, type }, i: number) => (\n          <tr key={i}>\n            <td>{status}</td>\n            <td>{timeout}</td>\n            <td>{type}</td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nconst MachineHealthCheckDetails: React.FC<MachineHealthCheckDetailsProps> = ({ obj }) => {\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Machine HealthCheck Details\" />\n        <div className=\"co-m-pane__body-group\">\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <ResourceSummary resource={obj}>\n                <DetailsItem label=\"Selector\" obj={obj} path=\"spec.selector\">\n                  <Selector\n                    kind={referenceForModel(MachineModel)}\n                    selector={_.get(obj, 'spec.selector')}\n                    namespace={obj.metadata.namespace}\n                  />\n                </DetailsItem>\n              </ResourceSummary>\n            </div>\n            <div className=\"col-sm-6\">\n              <dl className=\"co-m-pane__details\">\n                <DetailsItem label=\"Max Unhealthy\" obj={obj} path=\"spec.maxUnhealthy\" />\n                <DetailsItem label=\"Expected Machines\" obj={obj} path=\"status.expectedMachines\" />\n                <DetailsItem label=\"Current Healthy\" obj={obj} path=\"status.currentHealthy\" />\n              </dl>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Unhealthy Conditions\" />\n        <UnhealthyConditionsTable obj={obj} />\n      </div>\n    </>\n  );\n};\n\nexport const MachineHealthCheckPage: React.FC<MachineHealthCheckPageProps> = (props) => (\n  <ListPage\n    {...props}\n    ListComponent={MachineHealthCheckList}\n    kind={machineHealthCheckReference}\n    canCreate={true}\n  />\n);\n\nexport const MachineHealthCheckDetailsPage: React.FC<MachineHealthCheckDetailsPageProps> = (\n  props,\n) => (\n  <DetailsPage\n    {...props}\n    menuActions={menuActions}\n    kind={machineHealthCheckReference}\n    pages={[navFactory.details(MachineHealthCheckDetails), navFactory.editYaml()]}\n  />\n);\n\ntype MachineHealthCheckPageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: any;\n};\n\nexport type MachineHealthCheckDetailsProps = {\n  obj: MachineHealthCheckKind;\n};\n\nexport type MachineHealthCheckDetailsPageProps = {\n  match: any;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAaA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAEA;AAUA;AACA;AAIA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AAMA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAIA;AAEA;AASA;;;;;A","sourceRoot":""}