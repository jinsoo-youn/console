{"version":3,"file":"ingress-89923b1dcfed6bb7ef7c.js","sources":["webpack:///./public/components/hypercloud/federated-ingress.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\n\nimport { AddHealthChecks, EditHealthChecks } from '@console/app/src/actions/modify-health-checks';\nimport { K8sResourceKind } from '../../module/k8s';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from '../factory';\nimport { DetailsItem, Kebab, KebabAction, detailsPage, LabelList, navFactory, ResourceKebab, ResourceLink, ResourceSummary, SectionHeading, Selector } from '../utils';\nimport { ResourceEventStream } from '../events';\nimport { FederatedIngressModel } from '../../models';\n\nexport const menuActions: KebabAction[] = [AddHealthChecks, Kebab.factory.AddStorage, ...Kebab.getExtensionsActionsForKind(FederatedIngressModel), EditHealthChecks, ...Kebab.factory.common];\n\nconst kind = FederatedIngressModel.kind;\n\nconst tableColumnClasses = ['', '', classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), Kebab.columnClass];\n\nconst FederatedIngressTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Status',\n      sortFunc: 'ingressNumScheduled',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Labels',\n      sortField: 'metadata.labels',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: 'Pod Selector',\n      sortField: 'spec.selector',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[5] },\n    },\n  ];\n};\nFederatedIngressTableHeader.displayName = 'FederatedIngressTableHeader';\n\nconst FederatedIngressTableRow: RowFunction<K8sResourceKind> = ({ obj: ingress, index, key, style }) => {\n  return (\n    <TableRow id={ingress.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={ingress.metadata.name} namespace={ingress.metadata.namespace} title={ingress.metadata.uid} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={ingress.metadata.namespace} title={ingress.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Link to={`/k8s/ns/${ingress.metadata.namespace}/ingresss/${ingress.metadata.name}/pods`} title=\"pods\">\n          {ingress.status.currentNumberScheduled} of {ingress.status.desiredNumberScheduled} pods\n        </Link>\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <LabelList kind={kind} labels={ingress.metadata.labels} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <Selector selector={ingress.spec.selector} namespace={ingress.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={ingress} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport const FederatedIngressDetailsList: React.FC<FederatedIngressDetailsListProps> = ({ ds }) => (\n  <dl className=\"co-m-pane__details\">\n    <DetailsItem label=\"Current Count\" obj={ds} path=\"status.currentNumberScheduled\" />\n    <DetailsItem label=\"Desired Count\" obj={ds} path=\"status.desiredNumberScheduled\" />\n  </dl>\n);\n\nconst FederatedIngressDetails: React.FC<FederatedIngressDetailsProps> = ({ obj: ingress }) => (\n  <>\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text=\"Federated Ingress Details\" />\n      <div className=\"row\">\n        <div className=\"col-lg-6\">\n          <ResourceSummary resource={ingress} showPodSelector showNodeSelector showTolerations />\n        </div>\n        <div className=\"col-lg-6\">\n          <FederatedIngressDetailsList ds={ingress} />\n        </div>\n      </div>\n    </div>\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text=\"Containers\" />\n    </div>\n  </>\n);\n\nconst { details, editYaml, events } = navFactory;\nexport const FederatedIngresses: React.FC = props => <Table {...props} aria-label=\"Federated Ingresses\" Header={FederatedIngressTableHeader} Row={FederatedIngressTableRow} virtualize />;\n\nexport const FederatedIngressesPage: React.FC<FederatedIngressesPageProps> = props => <ListPage canCreate={true} ListComponent={FederatedIngresses} kind={kind} {...props} />;\n\nexport const FederatedIngressesDetailsPage: React.FC<FederatedIngressesDetailsPageProps> = props => <DetailsPage {...props} kind={kind} menuActions={menuActions} pages={[details(detailsPage(FederatedIngressDetails)), editYaml(), events(ResourceEventStream)]} />;\n\ntype FederatedIngressDetailsListProps = {\n  ds: K8sResourceKind;\n};\n\ntype FederatedIngressDetailsProps = {\n  obj: K8sResourceKind;\n};\n\ntype FederatedIngressesPageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: any;\n};\n\ntype FederatedIngressesDetailsPageProps = {\n  match: any;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAEA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAKA;AACA;AAEA;AAEA;;;;;A","sourceRoot":""}