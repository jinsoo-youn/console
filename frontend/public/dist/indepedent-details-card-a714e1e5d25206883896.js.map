{"version":3,"file":"indepedent-details-card-a714e1e5d25206883896.js","sources":["webpack:///./packages/ceph-storage-plugin/src/components/independent-dashboard-page/details-card/card.tsx","webpack:///./packages/ceph-storage-plugin/src/selectors/index.ts","webpack:///./public/components/utils/k8s-get-hook.ts"],"sourcesContent":["import * as React from 'react';\nimport { referenceForModel, K8sResourceKind } from '@console/internal/module/k8s';\nimport { SubscriptionModel } from '@console/operator-lifecycle-manager';\nimport { withDashboardResources } from '@console/internal/components/dashboard/with-dashboard-resources';\nimport { FirehoseResource, FirehoseResult } from '@console/internal/components/utils';\nimport { getName, getInfrastructurePlatform } from '@console/shared';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport DetailItem from '@console/shared/src/components/dashboard/details-card/DetailItem';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport { useK8sGet } from '@console/internal/components/utils/k8s-get-hook';\nimport { InfrastructureModel } from '@console/internal/models';\nimport { getOCSVersion } from '../../../selectors';\nimport { OCSServiceModel } from '../../../models';\n\nconst k8sResources: FirehoseResource[] = [\n  {\n    kind: referenceForModel(OCSServiceModel),\n    namespaced: true,\n    isList: true,\n    namespace: 'openshift-storage',\n    prop: 'ocs',\n  },\n  {\n    kind: referenceForModel(SubscriptionModel),\n    namespaced: false,\n    isList: true,\n    prop: 'subscription',\n  },\n];\n\nconst DetailsCard = React.memo(\n  withDashboardResources((props) => {\n    const { watchK8sResource, stopWatchK8sResource, resources } = props;\n\n    React.useEffect(() => {\n      k8sResources.forEach((r) => watchK8sResource(r));\n      return () => {\n        k8sResources.forEach((r) => stopWatchK8sResource(r));\n      };\n    }, [watchK8sResource, stopWatchK8sResource]);\n\n    const { ocs, subscription } = resources;\n    const ocsLoaded = ocs?.loaded || false;\n    const ocsError = ocs?.loadError;\n    const ocsData = ocs?.data;\n    const ocsName = getName(ocsData?.[0]);\n\n    const subscriptionLoaded = subscription?.loaded;\n    const subscriptionError = subscription?.loadError;\n    const subscriptionVersion = getOCSVersion(subscription as FirehoseResult);\n\n    const [infrastructure, infrastructureLoaded, infrastructureError] = useK8sGet<K8sResourceKind>(\n      InfrastructureModel,\n      'cluster',\n    );\n    const infrastructurePlatform = getInfrastructurePlatform(infrastructure);\n    return (\n      <DashboardCard>\n        <DashboardCardHeader>\n          <DashboardCardTitle>Details</DashboardCardTitle>\n        </DashboardCardHeader>\n        <DashboardCardBody>\n          <DetailItem title=\"Service Name\">OpenShift Container Storage (OCS)</DetailItem>\n          <DetailItem title=\"Cluster Name\" error={!!ocsError} isLoading={!ocsLoaded}>\n            {ocsName}\n          </DetailItem>\n          <DetailItem\n            title=\"Provider\"\n            error={!!infrastructureError || (infrastructure && !infrastructurePlatform)}\n            isLoading={!infrastructureLoaded}\n          >\n            {infrastructurePlatform}\n          </DetailItem>\n          <DetailItem title=\"Mode\">External</DetailItem>\n          <DetailItem title=\"Version\" isLoading={!subscriptionLoaded} error={!!subscriptionError}>\n            {subscriptionVersion}\n          </DetailItem>\n        </DashboardCardBody>\n      </DashboardCard>\n    );\n  }),\n);\n\nexport default DetailsCard;\n","import * as _ from 'lodash';\nimport { Alert } from '@console/internal/components/monitoring';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { FirehoseResult, convertToBaseValue } from '@console/internal/components/utils';\nimport { cephStorageProvisioners } from '@console/shared/src/utils';\nimport { OCS_OPERATOR } from '../constants';\n\nexport const cephStorageLabel = 'cluster.ocs.openshift.io/openshift-storage';\n\nconst enum status {\n  BOUND = 'Bound',\n  AVAILABLE = 'Available',\n}\nexport const filterCephAlerts = (alerts: Alert[]): Alert[] =>\n  alerts.filter((alert) => _.get(alert, 'annotations.storage_type') === 'ceph');\n\nexport const getCephPVs = (pvsData: K8sResourceKind[] = []): K8sResourceKind[] =>\n  pvsData.filter((pv) => {\n    return cephStorageProvisioners.some((provisioner: string) =>\n      _.get(pv, 'metadata.annotations[\"pv.kubernetes.io/provisioned-by\"]', '').includes(\n        provisioner,\n      ),\n    );\n  });\n\nconst getPVStorageClass = (pv: K8sResourceKind) => _.get(pv, 'spec.storageClassName');\nconst getStorageClassName = (pvc: K8sResourceKind) =>\n  _.get(pvc, ['metadata', 'annotations', 'volume.beta.kubernetes.io/storage-class']) ||\n  _.get(pvc, 'spec.storageClassName');\nconst isBound = (pvc: K8sResourceKind) => pvc.status.phase === status.BOUND;\n\nexport const getCephPVCs = (\n  cephSCNames: string[] = [],\n  pvcsData: K8sResourceKind[] = [],\n  pvsData: K8sResourceKind[] = [],\n): K8sResourceKind[] => {\n  const cephPVs = getCephPVs(pvsData);\n  const cephSCNameSet = new Set<string>([...cephSCNames, ...cephPVs.map(getPVStorageClass)]);\n  const cephBoundPVCUIDSet = new Set<string>(_.map(cephPVs, 'spec.claimRef.uid'));\n  // If the PVC is bound use claim uid(links PVC to PV) else storage class to verify it's provisioned by ceph.\n  return pvcsData.filter((pvc: K8sResourceKind) =>\n    isBound(pvc)\n      ? cephBoundPVCUIDSet.has(pvc.metadata.uid)\n      : cephSCNameSet.has(getStorageClassName(pvc)),\n  );\n};\n\nexport const getCephNodes = (nodesData: K8sResourceKind[] = []): K8sResourceKind[] =>\n  nodesData.filter((node) => _.keys(_.get(node, 'metadata.labels')).includes(cephStorageLabel));\n\nexport const getCephSC = (scData: K8sResourceKind[]): K8sResourceKind[] =>\n  scData.filter((sc) => {\n    return cephStorageProvisioners.some((provisioner: string) =>\n      _.get(sc, 'provisioner', '').includes(provisioner),\n    );\n  });\n\nexport const getOCSVersion = (items: FirehoseResult): string => {\n  const itemsData: K8sResourceKind[] = _.get(items, 'data');\n  const operator: K8sResourceKind = _.find(\n    itemsData,\n    (item) => _.get(item, 'spec.name') === OCS_OPERATOR,\n  );\n  return _.get(operator, 'status.installedCSV');\n};\n\nexport const calcPVsCapacity = (pvs: K8sResourceKind[]): number =>\n  pvs.reduce((sum, pv) => {\n    const storage = Number(convertToBaseValue(pv.spec.capacity.storage));\n    return sum + storage;\n  }, 0);\n\nexport const getSCAvailablePVs = (pvsData: K8sResourceKind[], sc: string): K8sResourceKind[] =>\n  pvsData.filter((pv) => getPVStorageClass(pv) === sc && pv.status.phase === status.AVAILABLE);\n","import * as React from 'react';\nimport { k8sGet, K8sKind, K8sResourceCommon } from '../../module/k8s';\n\nexport const useK8sGet = <R extends K8sResourceCommon = K8sResourceCommon>(\n  kind: K8sKind,\n  name?: string,\n  namespace?: string,\n  opts?: { [k: string]: string },\n): [R, boolean, any] => {\n  const [data, setData] = React.useState<R>();\n  const [loaded, setLoaded] = React.useState(false);\n  const [loadError, setLoadError] = React.useState();\n\n  React.useEffect(() => {\n    const fetch = async () => {\n      try {\n        setLoadError(null);\n        setLoaded(false);\n        setData(null);\n        const resource = await k8sGet(kind, name, namespace, opts);\n        setData(resource);\n      } catch (error) {\n        setLoadError(error);\n      } finally {\n        setLoaded(true);\n      }\n    };\n    fetch();\n  }, [kind, name, namespace, opts]);\n\n  return [data, loaded, loadError];\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AAOA;AACA;AAMA;AAGA;;;;;;;;;;;;;ACrFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAKA;AAEA;AACA;AAEA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AAEA;AAGA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;ACxEA;AACA;AAEA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;A","sourceRoot":""}