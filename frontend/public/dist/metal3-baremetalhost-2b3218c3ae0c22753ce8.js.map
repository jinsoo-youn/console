{"version":3,"file":"metal3-baremetalhost-2b3218c3ae0c22753ce8.js","sources":["webpack:///./packages/console-shared/src/components/dashboard/status-card/AlertItem.tsx","webpack:///./packages/console-shared/src/components/dashboard/status-card/AlertsBody.tsx","webpack:///./packages/console-shared/src/components/dashboard/status-card/HealthItem.tsx","webpack:///./packages/dev-console/src/components/import/validation-schema.ts","webpack:///./packages/dev-console/src/utils/yup-validation-util.ts","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/BareMetalHostDetails.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/BareMetalHostDetailsPage.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/BareMetalHostDisks.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/BareMetalHostNICs.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/BareMetalHostPowerStatusIcon.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/MachineLink.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/add-baremetal-host/AddBareMetalHost.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/add-baremetal-host/AddBareMetalHostForm.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/add-baremetal-host/AddBareMetalHostPage.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/add-baremetal-host/utils.ts","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/dashboard/BareMetalHostDashboard.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/dashboard/BareMetalHostDashboardContext.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/dashboard/DetailsCard.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/dashboard/EventsCard.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/dashboard/InventoryCard.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/dashboard/StatusCard.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/dashboard/UtilizationCard.tsx","webpack:///./packages/metal3-plugin/src/components/baremetal-hosts/dashboard/queries.ts","webpack:///./packages/metal3-plugin/src/selectors/secret.ts","webpack:///./packages/metal3-plugin/src/utils/index.ts"],"sourcesContent":["import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { alertActions } from '@console/internal/components/notification-drawer';\nimport { Timestamp } from '@console/internal/components/utils/timestamp';\nimport { alertURL, Alert } from '@console/internal/components/monitoring';\nimport { RedExclamationCircleIcon, YellowExclamationTriangleIcon } from '../../status/icons';\nimport {\n  getAlertSeverity,\n  getAlertMessage,\n  getAlertDescription,\n  getAlertTime,\n} from './alert-utils';\n\nconst getSeverityIcon = (severity: string) => {\n  switch (severity) {\n    case 'critical':\n      return RedExclamationCircleIcon;\n    case 'warning':\n    default:\n      return YellowExclamationTriangleIcon;\n  }\n};\n\nexport const StatusItem: React.FC<StatusItemProps> = ({ Icon, timestamp, message, children }) => {\n  return (\n    <div className=\"co-status-card__alert-item\">\n      <div className=\"co-status-card__alert-item-icon co-dashboard-icon\">\n        <Icon />\n      </div>\n      <div className=\"co-status-card__alert-item-text\">\n        <div className=\"co-status-card__alert-item-message\">\n          <div className=\"co-health-card__alert-item-timestamp co-status-card__health-item-text text-secondary\">\n            {timestamp && <Timestamp simple timestamp={timestamp} />}\n          </div>\n          <span className=\"co-status-card__health-item-text co-break-word\">{message}</span>\n        </div>\n        {children && <div className=\"co-status-card__alert-item-more\">{children}</div>}\n      </div>\n    </div>\n  );\n};\n\nconst AlertItem: React.FC<AlertItemProps> = ({ alert }) => {\n  const action = alertActions.get(alert.rule.name);\n  return (\n    <StatusItem\n      Icon={getSeverityIcon(getAlertSeverity(alert))}\n      timestamp={getAlertTime(alert)}\n      message={getAlertDescription(alert) || getAlertMessage(alert)}\n    >\n      {action ? (\n        <Link to={action.path}>{action.text}</Link>\n      ) : (\n        <Link to={alertURL(alert, alert.rule.id)}>View details</Link>\n      )}\n    </StatusItem>\n  );\n};\n\nexport default AlertItem;\n\ntype StatusItemProps = {\n  Icon: React.ComponentType<any>;\n  timestamp?: string;\n  message: string;\n};\n\ntype AlertItemProps = {\n  alert: Alert;\n};\n","import * as React from 'react';\nimport {\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { UnknownIcon } from '@patternfly/react-icons';\n\nconst AlertsBody: React.FC<AlertsBodyProps> = ({ error = false, children }) =>\n  (error || !!React.Children.toArray(children).length) && (\n    <div className=\"co-dashboard-card__body--no-padding co-status-card__alerts-body co-dashboard-card__body--top-margin\">\n      {error ? (\n        <EmptyState variant={EmptyStateVariant.full} className=\"co-status-card__alerts-msg\">\n          <EmptyStateIcon className=\"co-status-card__alerts-icon\" icon={UnknownIcon} />\n          <EmptyStateBody>Alerts could not be loaded.</EmptyStateBody>\n        </EmptyState>\n      ) : (\n        children\n      )}\n    </div>\n  );\n\nexport default AlertsBody;\n\ntype AlertsBodyProps = {\n  error?: boolean;\n  children?: React.ReactNode;\n};\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { DashboardCardPopupLink } from '../dashboard-card/DashboardCardLink';\nimport { HealthState, healthStateMapping } from './states';\n\nconst HealthItemIcon: React.FC<HealthItemIconProps> = ({ state }) => (\n  <div className=\"co-dashboard-icon\">\n    {(healthStateMapping[state] || healthStateMapping[HealthState.UNKNOWN]).icon}\n  </div>\n);\n\nconst HealthItem: React.FC<HealthItemProps> = React.memo(\n  ({ className, state, title, details, popupTitle, noIcon = false, children }) => {\n    const detailMessage =\n      details || (healthStateMapping[state] || healthStateMapping[HealthState.UNKNOWN]).message;\n    return (\n      <div className={classNames('co-status-card__health-item', className)}>\n        {state === HealthState.LOADING ? (\n          <div className=\"skeleton-health\" />\n        ) : (\n          !noIcon && <HealthItemIcon state={state} />\n        )}\n        <div>\n          <span className=\"co-dashboard-text--small co-status-card__health-item-text\">\n            {React.Children.toArray(children).length && state !== HealthState.LOADING ? (\n              <DashboardCardPopupLink\n                linkTitle={title}\n                popupTitle={popupTitle}\n                className=\"co-status-card__popup\"\n              >\n                {children}\n              </DashboardCardPopupLink>\n            ) : (\n              title\n            )}\n          </span>\n          {state !== HealthState.LOADING && detailMessage && (\n            <div className=\"co-dashboard-text--small co-status-card__health-item-text co-status-card__health-item-subtitle\">\n              {detailMessage}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  },\n);\n\nexport default HealthItem;\n\ntype HealthItemProps = {\n  title: string;\n  className?: string;\n  details?: string;\n  state?: HealthState;\n  popupTitle?: string;\n  noIcon?: boolean;\n};\n\ntype HealthItemIconProps = {\n  state?: HealthState;\n};\n","import * as yup from 'yup';\nimport * as _ from 'lodash';\nimport { convertToBaseValue } from '@console/internal/components/utils';\nimport { isInteger } from '../../utils/yup-validation-util';\nimport { CREATE_APPLICATION_KEY } from '../../const';\nimport { Resources } from './import-types';\n\nconst hostnameRegex = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$/;\nconst pathRegex = /^\\/.*$/;\nconst nameRegex = /^([a-z]([-a-z0-9]*[a-z0-9])?)*$/;\nconst projectNameRegex = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?$/;\n\nexport const gitUrlRegex = /^((((ssh|git|https?:?):\\/\\/:?)(([^\\s@]+@|[^@]:?)[-\\w.]+(:\\d\\d+:?)?(\\/[-\\w.~/?[\\]!$&'()*+,;=:@%]*:?)?:?))|([^\\s@]+@[-\\w.]+:[-\\w.~/?[\\]!$&'()*+,;=:@%]*?:?))$/;\n\nexport const nameValidationSchema = yup\n  .string()\n  .matches(nameRegex, {\n    message:\n      'Name must consist of lower-case letters, numbers and hyphens. It must start with a letter and end with a letter or number.',\n    excludeEmptyString: true,\n  })\n  .max(253, 'Cannot be longer than 253 characters.')\n  .required('Required');\n\nexport const projectNameValidationSchema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      projectNameRegex,\n      \"Name must consist of lower case alphanumeric characters or '-' and must start and end with an alphanumeric character.\",\n    )\n    .required('Required'),\n});\n\nexport const applicationNameValidationSchema = yup.object().shape({\n  selectedKey: yup.string(),\n  name: yup\n    .string()\n    .max(63, 'Cannot be longer than 63 characters.')\n    .when('selectedKey', {\n      is: CREATE_APPLICATION_KEY,\n      then: yup.string().required('Required'),\n    }),\n});\n\nexport const deploymentValidationSchema = yup.object().shape({\n  replicas: yup\n    .number()\n    .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n    .test(isInteger('Replicas must be an Integer.'))\n    .min(0, 'Replicas must be greater than or equal to 0.')\n    .max(\n      Number.MAX_SAFE_INTEGER,\n      `Replicas must be lesser than or equal to ${Number.MAX_SAFE_INTEGER}.`,\n    )\n    .test({\n      name: 'isEmpty',\n      test: (value) => value !== undefined,\n      message: 'This field cannot be empty.',\n    }),\n});\n\nexport const resourcesValidationSchema = yup\n  .string()\n  .oneOf([Resources.OpenShift, Resources.Kubernetes, Resources.KnativeService])\n  .required();\n\nexport const serverlessValidationSchema = yup.object().when('resources', {\n  is: Resources.KnativeService,\n  then: yup.object().shape({\n    scaling: yup.object({\n      minpods: yup\n        .number()\n        .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n        .test(isInteger('Min Pods must be an Integer.'))\n        .min(0, 'Min Pods must be greater than or equal to 0.')\n        .max(\n          Number.MAX_SAFE_INTEGER,\n          `Min Pods must be lesser than or equal to ${Number.MAX_SAFE_INTEGER}.`,\n        ),\n      maxpods: yup\n        .number()\n        .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n        .test(isInteger('Max Pods must be an Integer.'))\n        .min(1, 'Max Pods must be greater than or equal to 1.')\n        .max(\n          Number.MAX_SAFE_INTEGER,\n          `Max Pods must be lesser than or equal to ${Number.MAX_SAFE_INTEGER}.`,\n        )\n        .test({\n          test(limit) {\n            const { minpods } = this.parent;\n            return limit ? limit >= minpods : true;\n          },\n          message: 'Max Pods must be greater than or equal to Min Pods.',\n        }),\n      concurrencytarget: yup\n        .number()\n        .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n        .test(isInteger('Concurrency Target must be an Integer.'))\n        .min(0, 'Concurrency Target must be greater than or equal to 0.')\n        .max(\n          Number.MAX_SAFE_INTEGER,\n          `Concurrency Target must be lesser than or equal to ${Number.MAX_SAFE_INTEGER}.`,\n        ),\n      concurrencylimit: yup\n        .number()\n        .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n        .test(isInteger('Concurrency Limit must be an Integer.'))\n        .min(0, 'Concurrency Limit must be greater than or equal to 0.')\n        .max(\n          Number.MAX_SAFE_INTEGER,\n          `Concurrency Limit must be lesser than or equal to ${Number.MAX_SAFE_INTEGER}.`,\n        ),\n    }),\n  }),\n});\n\nexport const routeValidationSchema = yup.object().shape({\n  secure: yup.boolean(),\n  tls: yup.object().when('secure', {\n    is: true,\n    then: yup.object({\n      termination: yup.string().required('Please select a termination type.'),\n    }),\n  }),\n  hostname: yup\n    .string()\n    .matches(hostnameRegex, {\n      message:\n        'Hostname must consist of lower-case letters, numbers, periods, and hyphens. It must start and end with a letter or number.',\n      excludeEmptyString: true,\n    })\n    .max(253, 'Cannot be longer than 253 characters.'),\n  path: yup\n    .string()\n    .matches(pathRegex, { message: 'Path must start with /.', excludeEmptyString: true }),\n  unknownTargetPort: yup\n    .string()\n    .matches(/^\\d+$/, { message: 'Port must be an Integer.', excludeEmptyString: true }),\n});\n\nexport const limitsValidationSchema = yup.object().shape({\n  cpu: yup.object().shape({\n    request: yup\n      .number()\n      .transform((request) => (_.isNaN(request) ? undefined : request))\n      .min(0, 'Request must be greater than or equal to 0.')\n      .test({\n        test(request) {\n          const { requestUnit, limit, limitUnit } = this.parent;\n          if (limit !== undefined) {\n            return (\n              convertToBaseValue(`${request}${requestUnit}`) <=\n              convertToBaseValue(`${limit}${limitUnit}`)\n            );\n          }\n          return true;\n        },\n        message: 'CPU request must be less than or equal to limit.',\n      }),\n    requestUnit: yup.string('Unit must be millicores or cores.').ensure(),\n    limitUnit: yup.string('Unit must be millicores or cores.').ensure(),\n    limit: yup\n      .number()\n      .transform((limit) => (_.isNaN(limit) ? undefined : limit))\n      .min(0, 'Limit must be greater than or equal to 0.')\n      .test({\n        test(limit) {\n          const { request, requestUnit, limitUnit } = this.parent;\n          if (limit !== undefined) {\n            return (\n              convertToBaseValue(`${limit}${limitUnit}`) >=\n              convertToBaseValue(`${request}${requestUnit}`)\n            );\n          }\n          return true;\n        },\n        message: 'CPU limit must be greater than or equal to request.',\n      }),\n  }),\n  memory: yup.object().shape({\n    request: yup\n      .number()\n      .transform((request) => (_.isNaN(request) ? undefined : request))\n      .min(0, 'Request must be greater than or equal to 0.')\n      .test({\n        test(request) {\n          const { requestUnit, limit, limitUnit } = this.parent;\n          if (limit !== undefined) {\n            return (\n              convertToBaseValue(`${request}${requestUnit}`) <=\n              convertToBaseValue(`${limit}${limitUnit}`)\n            );\n          }\n          return true;\n        },\n        message: 'Memory request must be less than or equal to limit.',\n      }),\n    requestUnit: yup.string('Unit must be Mi or Gi.'),\n    limit: yup\n      .number()\n      .transform((limit) => (_.isNaN(limit) ? undefined : limit))\n      .min(0, 'Limit must be greater than or equal to 0.')\n      .test({\n        test(limit) {\n          const { request, requestUnit, limitUnit } = this.parent;\n          if (limit !== undefined) {\n            return (\n              convertToBaseValue(`${request}${requestUnit}`) <=\n              convertToBaseValue(`${limit}${limitUnit}`)\n            );\n          }\n          return true;\n        },\n        message: 'Memory limit must be greater than or equal to request.',\n      }),\n    limitUnit: yup.string('Unit must be Mi or Gi.'),\n  }),\n});\n\nexport const imageValidationSchema = yup.object().when('build', {\n  is: (build) => build.strategy !== 'Docker',\n  then: yup.object().shape({\n    selected: yup.string().required('Required'),\n    tag: yup.string().required('Required'),\n  }),\n});\n\nexport const gitValidationSchema = yup.object().shape({\n  url: yup\n    .string()\n    .max(2000, 'Please enter a URL that is less then 2000 characters.')\n    .matches(gitUrlRegex, 'Invalid Git URL.')\n    .required('Required'),\n  type: yup.string().when('showGitType', {\n    is: true,\n    then: yup.string().required('We failed to detect the git type. Please choose a git type.'),\n  }),\n  showGitType: yup.boolean(),\n});\n\nexport const dockerValidationSchema = yup.object().when('build', {\n  is: (build) => build.strategy === 'Docker',\n  then: yup.object().shape({\n    containerPort: yup.number().test(isInteger('Container port should be an Integer')),\n  }),\n});\n\nexport const buildValidationSchema = yup.object().shape({\n  strategy: yup.string(),\n});\n\nexport const searchTermValidationSchema = yup.string().required('Required');\n\nexport const isiValidationSchema = yup.object().shape({\n  name: yup.string().required('Required'),\n  image: yup.object().required('Required'),\n  tag: yup.string(),\n  status: yup.string().required('Required'),\n});\n","export const isInteger = (message) => ({\n  test(value) {\n    return value == null || Number.isInteger(value);\n  },\n  message,\n});\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { RebootingIcon } from '@patternfly/react-icons';\nimport {\n  referenceForModel,\n  K8sResourceKind,\n  MachineKind,\n  NodeKind,\n} from '@console/internal/module/k8s';\nimport {\n  SectionHeading,\n  Timestamp,\n  humanizeDecimalBytes,\n  ResourceLink,\n} from '@console/internal/components/utils';\nimport { NodeModel } from '@console/internal/models';\nimport {\n  getName,\n  getMachineNode,\n  getMachineNodeName,\n  getNamespace,\n  getMachineRole,\n  StatusIconAndText,\n  DetailPropertyList,\n  DetailPropertyListItem,\n} from '@console/shared';\nimport { getHostStatus } from '../../status/host-status';\nimport {\n  getHostNICs,\n  getHostDescription,\n  getHostBMCAddress,\n  getHostCPU,\n  getHostRAMMiB,\n  getHostTotalStorageCapacity,\n  getHostMachineName,\n  getHostPowerStatus,\n  getHostVendorInfo,\n  getHostMachine,\n  findNodeMaintenance,\n  getHostBios,\n  getHostProvisioningState,\n  getHostBootMACAddress,\n  isHostScheduledForRestart,\n} from '../../selectors';\nimport { BareMetalHostKind } from '../../types';\nimport { HOST_REGISTERING_STATES } from '../../constants/bare-metal-host';\nimport MachineLink from './MachineLink';\nimport BareMetalHostPowerStatusIcon from './BareMetalHostPowerStatusIcon';\nimport BareMetalHostStatus from './BareMetalHostStatus';\nimport { HOST_SCHEDULED_FOR_RESTART } from './BareMetalHostSecondaryStatus';\n\ntype BareMetalHostDetailsProps = {\n  obj: BareMetalHostKind;\n  machines: MachineKind[];\n  nodes: NodeKind[];\n  nodeMaintenances: K8sResourceKind[];\n};\n\nconst BareMetalHostDetails: React.FC<BareMetalHostDetailsProps> = ({\n  obj: host,\n  machines,\n  nodes,\n  nodeMaintenances,\n}) => {\n  const { creationTimestamp } = host.metadata;\n  const namespace = getNamespace(host);\n  const nics = getHostNICs(host);\n  const ips = nics.map((nic) => nic.ip).join(', ');\n  const machineName = getHostMachineName(host);\n  const machine = getHostMachine(host, machines);\n  const nodeName = getMachineNodeName(machine);\n  const node = getMachineNode(machine, nodes);\n  const role = getMachineRole(machine);\n  const RAMGB = humanizeDecimalBytes(getHostRAMMiB(host) * 2 ** 20).string;\n  const totalStorageCapacity = humanizeDecimalBytes(getHostTotalStorageCapacity(host)).string;\n  const description = getHostDescription(host);\n  const powerStatus = getHostPowerStatus(host);\n  const provisioningState = getHostProvisioningState(host);\n  const { count: CPUCount, model: CPUModel } = getHostCPU(host);\n  const { manufacturer, productName, serialNumber } = getHostVendorInfo(host);\n  const bios = getHostBios(host);\n\n  const nodeMaintenance = findNodeMaintenance(nodeMaintenances, nodeName);\n  const status = getHostStatus({ host, machine, node, nodeMaintenance });\n\n  return (\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text=\"Bare Metal Host Details\" />\n      <div className=\"row\">\n        <div className=\"col-xs-12 col-sm-6\" id=\"name-description-column\">\n          <dl>\n            <dt>Name</dt>\n            <dd>{getName(host)}</dd>\n            {description && (\n              <>\n                <dt>Description</dt>\n                <dd>{description}</dd>\n              </>\n            )}\n            <dt>Host Addresses</dt>\n            <dd>\n              <DetailPropertyList>\n                <DetailPropertyListItem title=\"Management\">\n                  {getHostBMCAddress(host)}\n                </DetailPropertyListItem>\n                <DetailPropertyListItem title=\"NICs\">{ips}</DetailPropertyListItem>\n                <DetailPropertyListItem title=\"Boot Interface MAC\">\n                  {getHostBootMACAddress(host)}\n                </DetailPropertyListItem>\n              </DetailPropertyList>\n            </dd>\n            {machineName && (\n              <>\n                <dt>Machine</dt>\n                <dd>\n                  <MachineLink host={host} />\n                </dd>\n              </>\n            )}\n            {nodeName && (\n              <>\n                <dt>Node</dt>\n                <dd>\n                  <ResourceLink\n                    kind={referenceForModel(NodeModel)}\n                    name={nodeName}\n                    namespace={namespace}\n                    title={nodeName}\n                  />\n                </dd>\n              </>\n            )}\n            <dt>Created at</dt>\n            <dd>\n              <Timestamp timestamp={creationTimestamp} />\n            </dd>\n          </dl>\n        </div>\n        <div className=\"col-xs-12 col-sm-6\">\n          <dl>\n            <dt>Status</dt>\n            <dd>\n              <BareMetalHostStatus {...status} nodeMaintenance={nodeMaintenance} host={host} />\n            </dd>\n            {/* power status is not available until host registration/inspection is finished */}\n            {!HOST_REGISTERING_STATES.includes(provisioningState) && (\n              <>\n                <dt>Power Status</dt>\n                <dd>\n                  <StatusIconAndText\n                    title={powerStatus}\n                    icon={<BareMetalHostPowerStatusIcon powerStatus={powerStatus} />}\n                  />\n                  {isHostScheduledForRestart(host) && (\n                    <StatusIconAndText\n                      title={HOST_SCHEDULED_FOR_RESTART}\n                      icon={<RebootingIcon />}\n                    />\n                  )}\n                </dd>\n              </>\n            )}\n            {role && (\n              <>\n                <dt>Role</dt>\n                <dd>{role}</dd>\n              </>\n            )}\n            {(manufacturer || productName) && (\n              <>\n                <dt>Model</dt>\n                <dd>{_.filter([manufacturer, productName]).join(', ')}</dd>\n              </>\n            )}\n            {bios && (\n              <>\n                <dt>Bios</dt>\n                <dd>\n                  <DetailPropertyList>\n                    <DetailPropertyListItem title=\"Version\">{bios.version}</DetailPropertyListItem>\n                    <DetailPropertyListItem title=\"Vendor\">{bios.vendor}</DetailPropertyListItem>\n                    <DetailPropertyListItem title=\"Date\">{bios.date}</DetailPropertyListItem>\n                  </DetailPropertyList>\n                </dd>\n              </>\n            )}\n            {serialNumber && (\n              <>\n                <dt>Serial Number</dt>\n                <dd>{serialNumber}</dd>\n              </>\n            )}\n            {_.get(host, 'status.hardware') && (\n              <>\n                <dt>Hardware</dt>\n                <dd>\n                  <DetailPropertyList>\n                    <DetailPropertyListItem title=\"CPU\">\n                      {CPUCount}x {CPUModel}\n                    </DetailPropertyListItem>\n                    <DetailPropertyListItem title=\"RAM\">{RAMGB}</DetailPropertyListItem>\n                    <DetailPropertyListItem title=\"Storage\">\n                      {totalStorageCapacity}\n                    </DetailPropertyListItem>\n                  </DetailPropertyList>\n                </dd>\n              </>\n            )}\n          </dl>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default BareMetalHostDetails;\n","import * as React from 'react';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { DetailsPage } from '@console/internal/components/factory';\nimport { navFactory, FirehoseResource } from '@console/internal/components/utils';\nimport { MachineModel, MachineSetModel, NodeModel } from '@console/internal/models';\nimport { ResourceEventStream } from '@console/internal/components/events';\nimport { useFlag } from '@console/shared/src/hooks/flag';\nimport { BareMetalHostModel, NodeMaintenanceModel } from '../../models';\nimport BareMetalHostDashboard from './dashboard/BareMetalHostDashboard';\nimport BareMetalHostNICs from './BareMetalHostNICs';\nimport { menuActionsCreator } from './host-menu-actions';\nimport BareMetalHostDisks from './BareMetalHostDisks';\nimport BareMetalHostDetails from './BareMetalHostDetails';\nimport { NODE_MAINTENANCE_FLAG } from '../../features';\n\ntype BareMetalHostDetailsPageProps = {\n  namespace: string;\n  name: string;\n  match: any;\n};\n\nconst BareMetalHostDetailsPage: React.FC<BareMetalHostDetailsPageProps> = (props) => {\n  const hasNodeMaintenanceCapability = useFlag(NODE_MAINTENANCE_FLAG);\n  const resources: FirehoseResource[] = [\n    {\n      kind: referenceForModel(MachineModel),\n      namespaced: true,\n      isList: true,\n      prop: 'machines',\n    },\n    {\n      kind: referenceForModel(MachineSetModel),\n      namespaced: true,\n      isList: true,\n      prop: 'machineSets',\n    },\n    {\n      kind: NodeModel.kind,\n      namespaced: false,\n      isList: true,\n      prop: 'nodes',\n    },\n  ];\n\n  if (hasNodeMaintenanceCapability) {\n    resources.push({\n      kind: referenceForModel(NodeMaintenanceModel),\n      namespaced: false,\n      isList: true,\n      prop: 'nodeMaintenances',\n      optional: true,\n    });\n  }\n\n  const nicsPage = {\n    href: 'nics',\n    name: 'Network Interfaces',\n    component: BareMetalHostNICs,\n  };\n  const disksPage = {\n    href: 'disks',\n    name: 'Disks',\n    component: BareMetalHostDisks,\n  };\n  const dashboardPage = {\n    href: '',\n    name: 'Overview',\n    component: BareMetalHostDashboard,\n  };\n  const detailsPage = {\n    href: 'details',\n    name: 'Details',\n    component: BareMetalHostDetails,\n  };\n  return (\n    <DetailsPage\n      {...props}\n      pagesFor={() => [\n        dashboardPage,\n        detailsPage,\n        navFactory.editYaml(),\n        nicsPage,\n        disksPage,\n        navFactory.events(ResourceEventStream),\n      ]}\n      kind={referenceForModel(BareMetalHostModel)}\n      resources={resources}\n      menuActions={menuActionsCreator}\n      customData={{ hasNodeMaintenanceCapability }}\n    />\n  );\n};\nexport default BareMetalHostDetailsPage;\n","import * as React from 'react';\nimport { sortable } from '@patternfly/react-table';\nimport { Table, TableRow, TableData, RowFunction } from '@console/internal/components/factory';\nimport { humanizeDecimalBytes } from '@console/internal/components/utils';\nimport { getHostStorage } from '../../selectors';\nimport { BareMetalHostDisk, BareMetalHostKind } from '../../types';\n\nconst DisksTableHeader = () => [\n  { title: 'Name', sortField: 'name', transforms: [sortable] },\n  { title: 'Size', sortField: 'sizeBytes', transforms: [sortable] },\n  { title: 'Type', sortField: 'rotational', transforms: [sortable] },\n  { title: 'Model', sortField: 'model', transforms: [sortable] },\n  { title: 'Serial Number', sortField: 'serialNumber', transforms: [sortable] },\n  { title: 'Vendor', sortField: 'vendor', transforms: [sortable] },\n  { title: 'HCTL', sortField: 'hctl', transforms: [sortable] },\n];\n\nconst DisksTableRow: RowFunction<BareMetalHostDisk> = ({ obj, index, key, style }) => {\n  const { hctl, model, name, rotational, serialNumber, sizeBytes, vendor } = obj;\n  const { string: size } = humanizeDecimalBytes(sizeBytes);\n  return (\n    <TableRow id={name} index={index} trKey={key} style={style}>\n      <TableData>{name}</TableData>\n      <TableData>{size}</TableData>\n      <TableData>{rotational ? 'Rotational' : 'SSD'}</TableData>\n      <TableData>{model}</TableData>\n      <TableData>{serialNumber}</TableData>\n      <TableData>{vendor}</TableData>\n      <TableData>{hctl}</TableData>\n    </TableRow>\n  );\n};\n\ntype BareMetalHostDisksProps = {\n  obj: BareMetalHostKind;\n  loadError?: any;\n};\n\nconst BareMetalHostDisks: React.FC<BareMetalHostDisksProps> = ({ obj: host, loadError }) => {\n  const disks = getHostStorage(host);\n  return (\n    <div className=\"co-m-list\">\n      <div className=\"co-m-pane__body\">\n        <Table\n          data={disks}\n          aria-label=\"Bare Metal Host Disks\"\n          Header={DisksTableHeader}\n          Row={DisksTableRow}\n          loaded={!!host}\n          loadError={loadError}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default BareMetalHostDisks;\n","import * as React from 'react';\nimport { OutlinedCheckSquareIcon, OutlinedSquareIcon } from '@patternfly/react-icons';\nimport { sortable } from '@patternfly/react-table';\nimport { Table, TableRow, TableData, RowFunction } from '@console/internal/components/factory';\nimport { getHostNICs } from '../../selectors';\nimport { BareMetalHostNIC, BareMetalHostKind } from '../../types';\n\nconst NICsTableHeader = () => [\n  { title: 'Name', sortField: 'name', transforms: [sortable] },\n  { title: 'Model', sortField: 'model', transforms: [sortable] },\n  { title: 'PXE', sortField: 'pxe', transforms: [sortable] },\n  { title: 'IP', sortField: 'ip', transforms: [sortable] },\n  { title: 'Speed', sortField: 'speedGbps', transforms: [sortable] },\n  { title: 'MAC Address', sortField: 'mac', transforms: [sortable] },\n  { title: 'VLAN ID', sortField: 'vlanId', transforms: [sortable] },\n];\n\nconst NICsTableRow: RowFunction<BareMetalHostNIC> = ({ obj: nic, index, key, style }) => {\n  const { ip, mac, model, name, pxe, speedGbps, vlanId } = nic;\n  return (\n    <TableRow id={ip} index={index} trKey={key} style={style}>\n      <TableData>{name}</TableData>\n      <TableData>{model}</TableData>\n      <TableData>{pxe ? <OutlinedCheckSquareIcon /> : <OutlinedSquareIcon />}</TableData>\n      <TableData>{ip}</TableData>\n      <TableData>{speedGbps} Gbps</TableData>\n      <TableData>{mac}</TableData>\n      <TableData>{vlanId}</TableData>\n    </TableRow>\n  );\n};\n\ntype BareMetalHostNICsProps = {\n  obj: BareMetalHostKind;\n  loadError?: any;\n};\n\nconst BareMetalHostNICs: React.FC<BareMetalHostNICsProps> = ({ obj: host, loadError }) => {\n  const nics = getHostNICs(host);\n  return (\n    <div className=\"co-m-list\">\n      <div className=\"co-m-pane__body\">\n        <Table\n          data={nics}\n          aria-label=\"Bare Metal Host NICs\"\n          Header={NICsTableHeader}\n          Row={NICsTableRow}\n          loaded={!!host}\n          loadError={loadError}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default BareMetalHostNICs;\n","import * as React from 'react';\nimport { OnRunningIcon, OffIcon, InProgressIcon } from '@patternfly/react-icons';\nimport { HOST_POWER_STATUS_POWERED_OFF, HOST_POWER_STATUS_POWERED_ON } from '../../constants';\n\ntype BareMetalHostPowerStatusIconProps = {\n  powerStatus: string;\n};\n\nconst BareMetalHostPowerStatusIcon: React.FC<BareMetalHostPowerStatusIconProps> = ({\n  powerStatus,\n  ...iconProps\n}) => {\n  if (powerStatus === HOST_POWER_STATUS_POWERED_ON) return <OnRunningIcon {...iconProps} />;\n  if (powerStatus === HOST_POWER_STATUS_POWERED_OFF) return <OffIcon {...iconProps} />;\n  return <InProgressIcon {...iconProps} />;\n};\n\nexport default BareMetalHostPowerStatusIcon;\n","import * as React from 'react';\nimport { DASH, getNamespace } from '@console/shared';\nimport { MachineModel } from '@console/internal/models';\nimport { ResourceLink } from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { getHostMachineName } from '../../selectors';\nimport { BareMetalHostKind } from '../../types';\n\ninterface MachineLinkProps {\n  host: BareMetalHostKind;\n}\n\nconst MachineLink: React.FC<MachineLinkProps> = ({ host }) => {\n  const machineName = getHostMachineName(host);\n  const namespace = getNamespace(host);\n\n  if (machineName) {\n    return (\n      <ResourceLink\n        kind={referenceForModel(MachineModel)}\n        name={machineName}\n        namespace={namespace}\n        title={machineName}\n      />\n    );\n  }\n  return <>{DASH}</>;\n};\n\nexport default MachineLink;\n","import * as React from 'react';\nimport * as Yup from 'yup';\nimport * as _ from 'lodash';\nimport { Formik } from 'formik';\nimport { history, resourcePathFromModel, FirehoseResult } from '@console/internal/components/utils';\nimport { nameValidationSchema } from '@console/dev-console/src/components/import/validation-schema';\nimport { getName } from '@console/shared/src';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { createBareMetalHost, updateBareMetalHost } from '../../../k8s/requests/bare-metal-host';\nimport { BareMetalHostModel } from '../../../models';\nimport { BareMetalHostKind } from '../../../types';\nimport {\n  getHostBMCAddress,\n  getHostBootMACAddress,\n  getHostDisableCertificateVerification,\n  getHostDescription,\n  isHostOnline,\n} from '../../../selectors';\nimport { getSecretPassword, getSecretUsername } from '../../../selectors/secret';\nimport { getLoadedData } from '../../../utils';\nimport { usePrevious } from '../../../hooks';\nimport AddBareMetalHostForm from './AddBareMetalHostForm';\nimport { AddBareMetalHostFormValues } from './types';\nimport { MAC_REGEX, BMC_ADDRESS_REGEX } from './utils';\n\nconst getInitialValues = (\n  host: BareMetalHostKind,\n  secret: K8sResourceKind,\n): AddBareMetalHostFormValues => ({\n  name: getName(host) || '',\n  BMCAddress: getHostBMCAddress(host) || '',\n  username: getSecretUsername(secret) || '',\n  password: getSecretPassword(secret) || '',\n  disableCertificateVerification: getHostDisableCertificateVerification(host) || false,\n  bootMACAddress: getHostBootMACAddress(host) || '',\n  online: isHostOnline(host) || true,\n  description: getHostDescription(host) || '',\n});\n\ntype AddBareMetalHostProps = {\n  namespace: string;\n  isEditing: boolean;\n  loaded?: boolean;\n  hosts?: FirehoseResult<BareMetalHostKind[]>;\n  host?: FirehoseResult<BareMetalHostKind>;\n  secret?: FirehoseResult<K8sResourceKind>;\n};\n\nconst AddBareMetalHost: React.FC<AddBareMetalHostProps> = ({\n  namespace,\n  isEditing,\n  hosts,\n  host: resultHost,\n  secret: resultSecret,\n}) => {\n  const [reload, setReload] = React.useState<boolean>(false);\n  const hostNames = _.flatMap(getLoadedData(hosts, []), (host) => getName(host));\n  const initialHost = getLoadedData(resultHost);\n  const initialSecret = getLoadedData(resultSecret);\n  const prevInitialHost = usePrevious(initialHost);\n  const prevInitialSecret = usePrevious(initialSecret);\n\n  const initialValues = getInitialValues(initialHost, initialSecret);\n  const prevInitialValues = getInitialValues(prevInitialHost, prevInitialSecret);\n\n  React.useEffect(() => {\n    if (reload) {\n      setReload(false);\n    }\n  }, [reload, setReload]);\n\n  const showUpdated =\n    isEditing &&\n    prevInitialHost &&\n    prevInitialSecret &&\n    !_.isEqual(prevInitialValues, initialValues);\n\n  const addHostValidationSchema = Yup.object().shape({\n    name: Yup.mixed()\n      .test(\n        'unique-name',\n        'Name \"${value}\" is already taken.', // eslint-disable-line no-template-curly-in-string\n        (value) => !hostNames.includes(value),\n      )\n      .concat(nameValidationSchema),\n    BMCAddress: Yup.string()\n      .matches(BMC_ADDRESS_REGEX, 'Value provided is not a valid BMC address')\n      .required('Required.'),\n    username: Yup.string().required('Required.'),\n    password: Yup.string().required('Required.'),\n    bootMACAddress: Yup.string()\n      .matches(MAC_REGEX, 'Value provided is not a valid MAC Address.')\n      .required('Required.'),\n  });\n\n  const handleSubmit = (values, actions) => {\n    const opts = { ...values, namespace };\n    const promise = isEditing\n      ? updateBareMetalHost(initialHost, initialSecret, opts)\n      : createBareMetalHost(opts);\n\n    promise\n      .then(() => {\n        actions.setSubmitting(false);\n        history.push(resourcePathFromModel(BareMetalHostModel, values.name, namespace));\n      })\n      .catch((error) => {\n        actions.setSubmitting(false);\n        actions.setStatus({ submitError: error.message });\n      });\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      enableReinitialize={isEditing && (reload || !prevInitialHost || !prevInitialSecret)}\n      onSubmit={handleSubmit}\n      onReset={() => setReload(true)}\n      validationSchema={addHostValidationSchema}\n    >\n      {(props) => (\n        <AddBareMetalHostForm {...props} isEditing={isEditing} showUpdated={showUpdated} />\n      )}\n    </Formik>\n  );\n};\n\nexport default AddBareMetalHost;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { history } from '@console/internal/components/utils';\nimport { FormikProps } from 'formik';\nimport { Form, TextInputTypes } from '@patternfly/react-core';\nimport {\n  InputField,\n  TextAreaField,\n  SwitchField,\n  FormFooter,\n  CheckboxField,\n} from '@console/shared/src';\nimport { AddBareMetalHostFormValues } from './types';\n\ntype AddBareMetalHostFormProps = FormikProps<AddBareMetalHostFormValues> & {\n  isEditing: boolean;\n  showUpdated: boolean;\n};\n\nconst AddBareMetalHostForm: React.FC<AddBareMetalHostFormProps> = ({\n  errors,\n  handleSubmit,\n  handleReset,\n  status,\n  isSubmitting,\n  dirty,\n  isEditing,\n  showUpdated,\n}) => (\n  <Form onSubmit={handleSubmit}>\n    <InputField\n      type={TextInputTypes.text}\n      data-test-id=\"add-baremetal-host-form-name-input\"\n      name=\"name\"\n      label=\"Name\"\n      placeholder=\"openshift-worker\"\n      helpText=\"Provide unique name for the new Bare Metal Host.\"\n      required\n      isDisabled={isEditing}\n    />\n    <TextAreaField\n      data-test-id=\"add-baremetal-host-form-description-input\"\n      name=\"description\"\n      label=\"Description\"\n    />\n    <InputField\n      type={TextInputTypes.text}\n      data-test-id=\"add-baremetal-host-form-bmc-address-input\"\n      name=\"BMCAddress\"\n      label=\"BMC Address\"\n      helpText=\"The URL for communicating with the BMC (Baseboard Management Controller) on the host, based on the provider being used.\"\n      required\n    />\n    <CheckboxField\n      data-test-id=\"add-baremetal-host-form-disable-certificate-verification-input\"\n      name=\"disableCertificateVerification\"\n      label=\"Disable Certificate Verification\"\n      helpText=\"Disable verification of server certificates when using HTTPS to connect to the BMC. This is required when the server certificate is self-signed, but is insecure because it allows a man-in-the-middle to intercept the connection.\"\n    />\n    <InputField\n      type={TextInputTypes.text}\n      data-test-id=\"add-baremetal-host-form-username-input\"\n      name=\"username\"\n      label=\"BMC Username\"\n      required\n    />\n    <InputField\n      type={TextInputTypes.password}\n      data-test-id=\"add-baremetal-host-form-password-input\"\n      name=\"password\"\n      label=\"BMC Password\"\n      required\n    />\n    <InputField\n      type={TextInputTypes.text}\n      data-test-id=\"add-baremetal-host-form-boot-mac-address-input\"\n      name=\"bootMACAddress\"\n      label=\"Boot MAC Address\"\n      helpText=\"The MAC address of the NIC connected to the network that will be used to provision the host.\"\n      required\n    />\n    {!isEditing && (\n      <SwitchField\n        name=\"online\"\n        data-test-id=\"add-baremetal-host-form-online-switch\"\n        label=\"Power host on after creation\"\n      />\n    )}\n    <FormFooter\n      isSubmitting={isSubmitting}\n      handleReset={showUpdated && handleReset}\n      handleCancel={history.goBack}\n      submitLabel={isEditing ? 'Save' : 'Create'}\n      errorMessage={status && status.submitError}\n      disableSubmit={isSubmitting || !dirty || !_.isEmpty(errors)}\n      infoTitle={'Bare Metal Host has been updated'}\n      infoMessage={'Click reload to see the recent changes'}\n      showAlert={showUpdated}\n    />\n  </Form>\n);\n\nexport default AddBareMetalHostForm;\n","import * as React from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { Firehose, FirehoseResource } from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { SecretModel } from '@console/internal/models';\nimport { BareMetalHostModel } from '../../../models';\nimport { getSecretName } from '../../../k8s/objects/bare-metal-host';\nimport AddBareMetalHost from './AddBareMetalHost';\n\nexport type AddBareMetalHostPageProps = RouteComponentProps<{ ns?: string; name?: string }>;\n\nconst AddBareMetalHostPage: React.FunctionComponent<AddBareMetalHostPageProps> = ({ match }) => {\n  const { name, ns: namespace } = match.params;\n  const resources: FirehoseResource[] = [];\n\n  const isEditing = !!name;\n  if (isEditing) {\n    resources.push(\n      {\n        kind: referenceForModel(BareMetalHostModel),\n        namespaced: true,\n        namespace,\n        name,\n        isList: false,\n        prop: 'host',\n      },\n      {\n        kind: SecretModel.kind,\n        namespaced: true,\n        namespace,\n        name: getSecretName(name),\n        isList: false,\n        prop: 'secret',\n      },\n    );\n  } else {\n    resources.push({\n      kind: referenceForModel(BareMetalHostModel),\n      namespaced: true,\n      namespace,\n      isList: true,\n      prop: 'hosts',\n    });\n  }\n  const title = `${isEditing ? 'Edit' : 'Add'} Bare Metal Host`;\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <div className=\"co-m-pane__body co-m-pane__form\">\n        {/* TODO(jtomasek): Turn this to PageHeading alternative for create forms (e.g.\n        CreateResourceFormPageHeading) */}\n        <h1 className=\"co-m-pane__heading co-m-pane__heading--baseline\">\n          <div className=\"co-m-pane__name\">{title}</div>\n        </h1>\n        {!isEditing && (\n          <p className=\"co-m-pane__explanation\">\n            Expand the hardware inventory by registering new Bare Metal Host.\n          </p>\n        )}\n        <Firehose resources={resources}>\n          <AddBareMetalHost namespace={namespace} isEditing={isEditing} />\n        </Firehose>\n      </div>\n    </>\n  );\n};\n\nexport default AddBareMetalHostPage;\n","const HEXCH_REGEX = '[0-9A-Fa-f]';\nexport const MAC_REGEX_COLON_DELIMITER = new RegExp(\n  `^((${HEXCH_REGEX}{2}[:]){19}${HEXCH_REGEX}{2})$|` + // 01:23:45:67:89:ab:cd:ef:00:00:01:23:45:67:89:ab:cd:ef:00:00\n  `^((${HEXCH_REGEX}{2}[:]){7}${HEXCH_REGEX}{2})$|` + // 01:23:45:67:89:ab:cd:ef\n    `^((${HEXCH_REGEX}{2}[:]){5}${HEXCH_REGEX}{2})$`, // 01:23:45:67:89:ab\n);\n\nexport const MAC_REGEX_DASH_DELIMITER = new RegExp(\n  `^((${HEXCH_REGEX}{2}[-]){19}${HEXCH_REGEX}{2})$|` + // 01-23-45-67-89-ab-cd-ef-00-00-01-23-45-67-89-ab-cd-ef-00-00\n  `^((${HEXCH_REGEX}{2}[-]){7}${HEXCH_REGEX}{2})$|` + // 01-23-45-67-89-ab-cd-ef\n    `^((${HEXCH_REGEX}{2}[-]){5}${HEXCH_REGEX}{2})$`, // 01-23-45-67-89-ab\n);\n\nexport const MAC_REGEX_PERIOD_DELIMITER = new RegExp(\n  `^((${HEXCH_REGEX}{4}.){9}${HEXCH_REGEX}{4})$|` + // 0123.4567.89ab.cdef.0000.0123.4567.89ab.cdef.0000\n  `^((${HEXCH_REGEX}{4}.){3}${HEXCH_REGEX}{4})$|` + // 0123.4567.89ab.cdef\n    `^((${HEXCH_REGEX}{4}.){2}${HEXCH_REGEX}{4})$`, // 0123.4567.89ab\n);\n\n// Validates that the provided MAC address meets one of following formats supported by the golang ParseMAC function:\n// IEEE 802 MAC-48, EUI-48, EUI-64, or a 20-octet IP over InfiniBand link-layer address\n// https://golang.org/pkg/net/#ParseMAC\nexport const MAC_REGEX = new RegExp(\n  `^(${MAC_REGEX_COLON_DELIMITER.source}|${MAC_REGEX_DASH_DELIMITER.source}|${MAC_REGEX_PERIOD_DELIMITER.source})$`,\n);\n\nexport const IPV6_ADDRESS = new RegExp(\n  /^\\s*((([0-9A-Fa-f]{1,4}:){7}([0-9A-Fa-f]{1,4}|:))|(([0-9A-Fa-f]{1,4}:){6}(:[0-9A-Fa-f]{1,4}|((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){5}(((:[0-9A-Fa-f]{1,4}){1,2})|:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3})|:))|(([0-9A-Fa-f]{1,4}:){4}(((:[0-9A-Fa-f]{1,4}){1,3})|((:[0-9A-Fa-f]{1,4})?:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){3}(((:[0-9A-Fa-f]{1,4}){1,4})|((:[0-9A-Fa-f]{1,4}){0,2}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){2}(((:[0-9A-Fa-f]{1,4}){1,5})|((:[0-9A-Fa-f]{1,4}){0,3}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(([0-9A-Fa-f]{1,4}:){1}(((:[0-9A-Fa-f]{1,4}){1,6})|((:[0-9A-Fa-f]{1,4}){0,4}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:))|(:(((:[0-9A-Fa-f]{1,4}){1,7})|((:[0-9A-Fa-f]{1,4}){0,5}:((25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)(\\.(25[0-5]|2[0-4]\\d|1\\d\\d|[1-9]?\\d)){3}))|:)))(%.+)?\\s*$/,\n);\n\nexport const URL_REGEX = new RegExp(\n  /^([a-z][a-z0-9+\\-.]*:(\\/\\/([a-z0-9\\-._~%!$&'()*+,;=]+@)?([a-z0-9\\-._~%]+|\\[[a-f0-9:.]+\\]|\\[v[a-f0-9][a-z0-9\\-._~%!$&'()*+,;=:]+\\])(:[0-9]+)?(\\/[a-z0-9\\-._~%!$&'()*+,;=:@]+)*\\/?|(\\/?[a-z0-9\\-._~%!$&'()*+,;=:@]+(\\/[a-z0-9\\-._~%!$&'()*+,;=:@]+)*\\/?)?)|([a-z0-9\\-._~%!$&'()*+,;=@]+(\\/[a-z0-9\\-._~%!$&'()*+,;=:@]+)*\\/?|(\\/[a-z0-9\\-._~%!$&'()*+,;=:@]+)+\\/?))(\\?[a-z0-9\\-._~%!$&'()*+,;=:@/?]*)?(#[a-z0-9\\-._~%!$&'()*+,;=:@/?]*)?$/i,\n);\n\nexport const BMC_ADDRESS_REGEX = new RegExp(\n  /^((ipmi|idrac|idrac\\+http|idrac-virtualmedia|irmc|redfish|redfish\\+http|redfish-virtualmedia|ilo5-virtualmedia|https?|ftp):(\\/\\/([a-z0-9\\-._~%!$&'()*+,;=]+@)?([a-z0-9\\-._~%]+|\\[[a-f0-9:.]+\\]|\\[v[a-f0-9][a-z0-9\\-._~%!$&'()*+,;=:]+\\])(:[0-9]+)?(\\/[a-z0-9\\-._~%!$&'()*+,;=:@]+)*\\/?|(\\/?[a-z0-9\\-._~%!$&'()*+,;=:@]+(\\/[a-z0-9\\-._~%!$&'()*+,;=:@]+)*\\/?)?)|([a-z0-9\\-._~%!$&'()*+,;=@]+(\\/[a-z0-9\\-._~%!$&'()*+,;=:@]+)*\\/?|(\\/[a-z0-9\\-._~%!$&'()*+,;=:@]+)+\\/?))(\\?[a-z0-9\\-._~%!$&'()*+,;=:@/?]*)?(#[a-z0-9\\-._~%!$&'()*+,;=:@/?]*)?$/i,\n);\n","import * as React from 'react';\nimport Dashboard from '@console/shared/src/components/dashboard/Dashboard';\nimport DashboardGrid from '@console/shared/src/components/dashboard/DashboardGrid';\nimport { getMachineNode } from '@console/shared/src/selectors/machine';\nimport { MachineKind, NodeKind } from '@console/internal/module/k8s';\nimport { BareMetalHostKind } from '../../../types';\nimport { getHostMachine } from '../../../selectors';\nimport { BareMetalHostDashboardContext } from './BareMetalHostDashboardContext';\nimport StatusCard from './StatusCard';\nimport UtilizationCard from './UtilizationCard';\nimport EventsCard from './EventsCard';\nimport InventoryCard from './InventoryCard';\nimport DetailsCard from './DetailsCard';\n\nconst BareMetalHostDashboard: React.FC<BareMetalHostDashboardProps> = ({\n  obj,\n  machines,\n  nodes,\n  loaded,\n}) => {\n  const machine = getHostMachine(obj, machines);\n  const node = getMachineNode(machine, nodes);\n  const context = {\n    obj,\n    machine,\n    node,\n    loaded,\n  };\n\n  const mainCards = [{ Card: StatusCard }, { Card: UtilizationCard }];\n  const leftCards = [{ Card: DetailsCard }, { Card: InventoryCard }];\n  const rightCards = [{ Card: EventsCard }];\n\n  return (\n    <BareMetalHostDashboardContext.Provider value={context}>\n      <Dashboard>\n        <DashboardGrid mainCards={mainCards} leftCards={leftCards} rightCards={rightCards} />\n      </Dashboard>\n    </BareMetalHostDashboardContext.Provider>\n  );\n};\n\ntype BareMetalHostDashboardProps = {\n  obj: BareMetalHostKind;\n  machines: MachineKind[];\n  nodes: NodeKind[];\n  loaded: boolean;\n};\n\nexport default BareMetalHostDashboard;\n","import * as React from 'react';\nimport { MachineKind, NodeKind } from '@console/internal/module/k8s';\nimport { BareMetalHostKind } from '../../../types';\n\nexport const BareMetalHostDashboardContext = React.createContext<BareMetalDashboardContext>({});\n\ntype BareMetalDashboardContext = {\n  obj?: BareMetalHostKind;\n  machine?: MachineKind;\n  node?: NodeKind;\n  loaded?: boolean;\n};\n","import * as React from 'react';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport DetailsBody from '@console/shared/src/components/dashboard/details-card/DetailsBody';\nimport DetailItem from '@console/shared/src/components/dashboard/details-card/DetailItem';\nimport DashboardCardLink from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardLink';\nimport {\n  DashboardItemProps,\n  withDashboardResources,\n} from '@console/internal/components/dashboard/with-dashboard-resources';\nimport { getName, getNamespace } from '@console/shared';\nimport { MachineKind, NodeKind } from '@console/internal/module/k8s';\nimport { resourcePathFromModel } from '@console/internal/components/utils';\nimport NodeLink from '../NodeLink';\nimport BareMetalHostRole from '../BareMetalHostRole';\nimport { BareMetalHostKind } from '../../../types';\nimport { BareMetalHostModel } from '../../../models';\nimport { BareMetalHostDashboardContext } from './BareMetalHostDashboardContext';\n\nconst DetailsCard: React.FC<DetailsCardProps> = () => {\n  const { obj, machine, node } = React.useContext(BareMetalHostDashboardContext);\n  const hostName = getName(obj);\n  const nodeCell = <NodeLink nodeName={getName(node)} />;\n  const hostRole = <BareMetalHostRole machine={machine} node={node} />;\n\n  return (\n    <DashboardCard>\n      <DashboardCardHeader>\n        <DashboardCardTitle>Details</DashboardCardTitle>\n        <DashboardCardLink\n          to={`${resourcePathFromModel(\n            BareMetalHostModel,\n            getName(obj),\n            getNamespace(obj),\n          )}/details`}\n        >\n          View all\n        </DashboardCardLink>\n      </DashboardCardHeader>\n      <DashboardCardBody>\n        <DetailsBody>\n          <DetailItem title=\"Host name\" isLoading={false} error={null}>\n            {hostName}\n          </DetailItem>\n          <DetailItem title=\"Role\" isLoading={false} error={null}>\n            {hostRole}\n          </DetailItem>\n          <DetailItem title=\"Node\" isLoading={false} error={null}>\n            {nodeCell}\n          </DetailItem>\n        </DetailsBody>\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n};\n\nexport default withDashboardResources(DetailsCard);\n\ntype DetailsCardProps = DashboardItemProps & {\n  obj: BareMetalHostKind;\n  machines: MachineKind[];\n  nodes: NodeKind[];\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport {\n  FirehoseResource,\n  FirehoseResult,\n  ResourceLink,\n  resourcePathFromModel,\n} from '@console/internal/components/utils';\nimport { EventModel, MachineModel, NodeModel } from '@console/internal/models';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport DashboardCardLink from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardLink';\nimport ActivityBody, {\n  RecentEventsBody,\n  Activity,\n} from '@console/shared/src/components/dashboard/activity-card/ActivityBody';\nimport ActivityItem from '@console/shared/src/components/dashboard/activity-card/ActivityItem';\nimport { EventKind, K8sResourceKind, MachineKind } from '@console/internal/module/k8s';\nimport {\n  DashboardItemProps,\n  withDashboardResources,\n} from '@console/internal/components/dashboard/with-dashboard-resources';\nimport { getName, getNamespace, getMachineNodeName } from '@console/shared';\nimport { BareMetalHostModel } from '../../../models';\nimport { BareMetalHostKind } from '../../../types';\nimport { isHostInProgressState, getBareMetalHostStatus } from '../../../status/host-status';\nimport { BareMetalHostDashboardContext } from './BareMetalHostDashboardContext';\n\nconst eventsResource: FirehoseResource = { isList: true, kind: EventModel.kind, prop: 'events' };\n\nconst matchesInvolvedObject = (\n  kind: string,\n  name: string,\n  namespace: string,\n  event: EventKind,\n): boolean =>\n  name &&\n  _.isMatch(event.involvedObject, {\n    kind,\n    name,\n    namespace,\n  });\n\nconst hostEventsFilter = (\n  host: BareMetalHostKind,\n  machine: MachineKind,\n  event: EventKind,\n): boolean =>\n  matchesInvolvedObject(BareMetalHostModel.kind, getName(host), getNamespace(host), event) ||\n  matchesInvolvedObject(MachineModel.kind, getName(machine), getNamespace(machine), event) ||\n  matchesInvolvedObject(NodeModel.kind, getMachineNodeName(machine), null, event);\n\nconst getHostEventsFilter = (\n  host: K8sResourceKind,\n  machine: MachineKind,\n): ((event: EventKind) => boolean) => _.partial(hostEventsFilter, host, machine);\n\nconst EventsCard: React.FC<EventsCardProps> = ({\n  watchK8sResource,\n  stopWatchK8sResource,\n  resources,\n}) => {\n  const { obj, machine } = React.useContext(BareMetalHostDashboardContext);\n  React.useEffect(() => {\n    watchK8sResource(eventsResource);\n    return () => {\n      stopWatchK8sResource(eventsResource);\n    };\n  }, [watchK8sResource, stopWatchK8sResource]);\n\n  const filter = getHostEventsFilter(obj, machine);\n\n  const inProgress = isHostInProgressState(obj);\n  const hostStatus = getBareMetalHostStatus(obj);\n\n  return (\n    <DashboardCard gradient>\n      <DashboardCardHeader>\n        <DashboardCardTitle>Activity</DashboardCardTitle>\n        <DashboardCardLink\n          to={`${resourcePathFromModel(\n            BareMetalHostModel,\n            getName(obj),\n            getNamespace(obj),\n          )}/events`}\n        >\n          View events\n        </DashboardCardLink>\n      </DashboardCardHeader>\n      <DashboardCardBody>\n        <ActivityBody>\n          <div className=\"co-activity-card__ongoing-title\">Ongoing</div>\n          <div className=\"co-activity-card__ongoing-body\">\n            {inProgress ? (\n              <Activity timestamp={null}>\n                <ActivityItem>\n                  {hostStatus.title}\n                  <ResourceLink\n                    kind={BareMetalHostModel.kind}\n                    name={getName(obj)}\n                    namespace={getNamespace(obj)}\n                  />\n                </ActivityItem>\n              </Activity>\n            ) : (\n              <Activity>\n                <div className=\"text-secondary\">There are no ongoing activities.</div>\n              </Activity>\n            )}\n          </div>\n          <RecentEventsBody\n            events={resources.events as FirehoseResult<EventKind[]>}\n            filter={filter}\n          />\n        </ActivityBody>\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n};\n\nexport default withDashboardResources(EventsCard);\n\ntype EventsCardProps = DashboardItemProps & {\n  obj: BareMetalHostKind;\n};\n","import * as React from 'react';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport InventoryItem, { ResourceInventoryItem } from '@console/shared/src/components/dashboard/inventory-card/InventoryItem';\nimport { PodModel, NodeModel } from '@console/internal/models';\nimport { getNamespace, getName } from '@console/shared/src/selectors/common';\nimport { getPodStatusGroups } from '@console/shared/src/components/dashboard/inventory-card/utils';\nimport { resourcePathFromModel } from '@console/internal/components/utils/resource-link';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { PodKind } from '@console/internal/module/k8s/types';\nimport { Link } from 'react-router-dom';\nimport { getHostStorage, getHostNICs, getHostCPU } from '../../../selectors';\nimport { BareMetalHostModel } from '../../../models';\nimport { BareMetalHostDashboardContext } from './BareMetalHostDashboardContext';\n\nconst PodInventoryItem: React.FC = () => {\n  const { node, loaded } = React.useContext(BareMetalHostDashboardContext);\n  const nodeName = getName(node);\n\n  const podResource = React.useMemo(\n    () =>\n      loaded && nodeName\n        ? {\n            isList: true,\n            kind: PodModel.kind,\n            fieldSelector: `spec.nodeName=${nodeName}`,\n          }\n        : null,\n    [nodeName, loaded],\n  );\n\n  const [pods, podsLoaded, podsError] = useK8sWatchResource<PodKind[]>(podResource);\n\n  if (!nodeName || !loaded) {\n    return <InventoryItem title={PodModel.label} count={0} isLoading={!loaded} />;\n  }\n\n  const basePath = `${resourcePathFromModel(NodeModel, nodeName)}/pods`;\n\n  return <ResourceInventoryItem resources={pods} basePath={basePath} mapper={getPodStatusGroups} kind={PodModel} isLoading={!podsLoaded} error={!!podsError} />;\n};\n\nconst InventoryCard: React.FC = () => {\n  const { obj } = React.useContext(BareMetalHostDashboardContext);\n\n  const namespace = getNamespace(obj);\n  const hostName = getName(obj);\n\n  const NICTitleComponent = React.useCallback(({ children }) => <Link to={`${resourcePathFromModel(BareMetalHostModel, hostName, namespace)}/nics`}>{children}</Link>, [hostName, namespace]);\n\n  const DiskTitleComponent = React.useCallback(({ children }) => <Link to={`${resourcePathFromModel(BareMetalHostModel, hostName, namespace)}/disks`}>{children}</Link>, [hostName, namespace]);\n\n  return (\n    <DashboardCard>\n      <DashboardCardHeader>\n        <DashboardCardTitle>Inventory</DashboardCardTitle>\n      </DashboardCardHeader>\n      <DashboardCardBody>\n        <PodInventoryItem />\n        <InventoryItem title=\"Disk\" isLoading={!obj} count={getHostStorage(obj).length} TitleComponent={DiskTitleComponent} />\n        <InventoryItem title=\"NIC\" isLoading={!obj} count={getHostNICs(obj).length} TitleComponent={NICTitleComponent} />\n        <InventoryItem title=\"CPU\" isLoading={!obj} count={getHostCPU(obj).count} />\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n};\n\nexport default InventoryCard;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Gallery, GalleryItem } from '@patternfly/react-core';\nimport {\n  DashboardItemProps,\n  withDashboardResources,\n} from '@console/internal/components/dashboard/with-dashboard-resources';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport HealthBody from '@console/shared/src/components/dashboard/status-card/HealthBody';\nimport HealthItem from '@console/shared/src/components/dashboard/status-card/HealthItem';\nimport { HealthState } from '@console/shared/src/components/dashboard/status-card/states';\nimport AlertsBody from '@console/shared/src/components/dashboard/status-card/AlertsBody';\nimport AlertItem from '@console/shared/src/components/dashboard/status-card/AlertItem';\nimport { Alert, alertURL } from '@console/internal/components/monitoring';\nimport { getBareMetalHostStatus } from '../../../status/host-status';\nimport {\n  HOST_SUCCESS_STATES,\n  HOST_ERROR_STATES,\n  HOST_PROGRESS_STATES,\n  HOST_HARDWARE_ERROR_STATES,\n} from '../../../constants';\nimport { BareMetalHostKind } from '../../../types';\nimport { BareMetalHostDashboardContext } from './BareMetalHostDashboardContext';\n\nconst getHostHealthState = (obj: BareMetalHostKind): HostHealthState => {\n  const { status, title } = getBareMetalHostStatus(obj);\n  let state: HealthState = HealthState.UNKNOWN;\n\n  if (HOST_SUCCESS_STATES.includes(status)) {\n    state = HealthState.OK;\n  }\n\n  if (HOST_ERROR_STATES.includes(status)) {\n    state = HealthState.ERROR;\n  }\n\n  if (HOST_PROGRESS_STATES.includes(status)) {\n    state = HealthState.PROGRESS;\n  }\n\n  return {\n    title,\n    state,\n  };\n};\n\nconst getHostHardwareHealthState = (obj): HostHealthState => {\n  const { status, title } = getBareMetalHostStatus(obj);\n\n  return HOST_HARDWARE_ERROR_STATES.includes(status)\n    ? {\n        state: HealthState.ERROR,\n        title,\n      }\n    : {\n        title: '',\n        state: HealthState.OK,\n      };\n};\n\nconst filterAlerts = (alerts: Alert[]): Alert[] =>\n  alerts.filter((alert) => _.get(alert, 'labels.hwalert'));\n\nconst HealthCard: React.FC<HealthCardProps> = ({\n  watchAlerts,\n  stopWatchAlerts,\n  notificationAlerts,\n}) => {\n  const { obj } = React.useContext(BareMetalHostDashboardContext);\n\n  React.useEffect(() => {\n    watchAlerts();\n    return () => stopWatchAlerts();\n  }, [watchAlerts, stopWatchAlerts]);\n\n  const health = getHostHealthState(obj);\n  const hwHealth = getHostHardwareHealthState(obj);\n\n  const { data, loaded, loadError } = notificationAlerts || {};\n  const alerts = React.useMemo(() => filterAlerts(data), [data]);\n\n  return (\n    <DashboardCard gradient>\n      <DashboardCardHeader>\n        <DashboardCardTitle>Status</DashboardCardTitle>\n      </DashboardCardHeader>\n      <DashboardCardBody>\n        <HealthBody>\n          <Gallery className=\"co-overview-status__health\" gutter=\"md\">\n            <GalleryItem>\n              <HealthItem title=\"Status\" state={health.state} details={health.title} />\n            </GalleryItem>\n            <GalleryItem>\n              <HealthItem title=\"Hardware\" state={hwHealth.state} details={hwHealth.title} />\n            </GalleryItem>\n          </Gallery>\n        </HealthBody>\n        <AlertsBody error={!_.isEmpty(loadError)}>\n          {loaded && alerts.length !== 0\n            ? alerts.map((alert) => (\n                <AlertItem key={alertURL(alert, alert.rule.id)} alert={alert} />\n              ))\n            : null}\n        </AlertsBody>\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n};\n\nexport default withDashboardResources(HealthCard);\n\ntype HostHealthState = {\n  state: HealthState;\n  title: string;\n};\n\ntype HealthCardProps = DashboardItemProps & {\n  obj: BareMetalHostKind;\n};\n","import * as React from 'react';\nimport { Dropdown } from '@console/internal/components/utils/dropdown';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport UtilizationBody from '@console/shared/src/components/dashboard/utilization-card/UtilizationBody';\nimport { PodModel, ProjectModel } from '@console/internal/models';\nimport ConsumerPopover from '@console/shared/src/components/dashboard/utilization-card/TopConsumerPopover';\nimport {\n  humanizeBinaryBytes,\n  humanizeCpuCores,\n  humanizeDecimalBytesPerSec,\n} from '@console/internal/components/utils';\nimport { getMachineNodeName } from '@console/shared';\nimport { ByteDataTypes } from '@console/shared/src/graph-helper/data-utils';\nimport {\n  PrometheusUtilizationItem,\n  PrometheusMultilineUtilizationItem,\n} from '@console/internal/components/dashboard/dashboards-page/cluster-dashboard/utilization-card';\nimport {\n  useMetricDuration,\n  Duration,\n} from '@console/shared/src/components/dashboard/duration-hook';\nimport { BareMetalHostDashboardContext } from './BareMetalHostDashboardContext';\nimport {\n  getUtilizationQueries,\n  HostQuery,\n  getTopConsumerQueries,\n  getMultilineUtilizationQueries,\n} from './queries';\n\nconst UtilizationCard: React.FC = () => {\n  const [timestamps, setTimestamps] = React.useState<Date[]>();\n  const [duration, setDuration] = useMetricDuration();\n\n  const { machine } = React.useContext(BareMetalHostDashboardContext);\n  const nodeName = getMachineNodeName(machine);\n\n  const queries = React.useMemo(() => getUtilizationQueries(nodeName), [nodeName]);\n  const multilineQueries = React.useMemo(() => getMultilineUtilizationQueries(nodeName), [\n    nodeName,\n  ]);\n\n  const humanizePods = React.useCallback(\n    (v) => ({\n      string: `${v}`,\n      value: v as number,\n      unit: '',\n    }),\n    [],\n  );\n\n  const cpuPopover = React.useCallback(\n    ({ current }) => {\n      const topConsumerQueries = getTopConsumerQueries(nodeName);\n      return (\n        <ConsumerPopover\n          title=\"CPU\"\n          current={current}\n          humanize={humanizeCpuCores}\n          consumers={[\n            {\n              query: topConsumerQueries[HostQuery.PROJECTS_BY_CPU],\n              model: ProjectModel,\n              metric: 'namespace',\n            },\n            {\n              query: topConsumerQueries[HostQuery.PODS_BY_CPU],\n              model: PodModel,\n              metric: 'pod',\n            },\n          ]}\n        />\n      );\n    },\n    [nodeName],\n  );\n\n  const memPopover = React.useCallback(\n    ({ current }) => {\n      const topConsumerQueries = getTopConsumerQueries(nodeName);\n      return (\n        <ConsumerPopover\n          title=\"Memory\"\n          current={current}\n          humanize={humanizeBinaryBytes}\n          consumers={[\n            {\n              query: topConsumerQueries[HostQuery.PROJECTS_BY_MEMORY],\n              model: ProjectModel,\n              metric: 'namespace',\n            },\n            {\n              query: topConsumerQueries[HostQuery.PODS_BY_MEMORY],\n              model: PodModel,\n              metric: 'pod',\n            },\n          ]}\n        />\n      );\n    },\n    [nodeName],\n  );\n\n  const storagePopover = React.useCallback(\n    ({ current }) => {\n      const topConsumerQueries = getTopConsumerQueries(nodeName);\n      return (\n        <ConsumerPopover\n          title=\"Disk Usage\"\n          current={current}\n          humanize={humanizeBinaryBytes}\n          consumers={[\n            {\n              query: topConsumerQueries[HostQuery.PROJECTS_BY_STORAGE],\n              model: ProjectModel,\n              metric: 'namespace',\n            },\n            {\n              query: topConsumerQueries[HostQuery.PODS_BY_STORAGE],\n              model: PodModel,\n              metric: 'pod',\n            },\n          ]}\n        />\n      );\n    },\n    [nodeName],\n  );\n\n  return (\n    <DashboardCard>\n      <DashboardCardHeader>\n        <DashboardCardTitle>Utilization</DashboardCardTitle>\n        <Dropdown items={Duration} onChange={setDuration} selectedKey={duration} title={duration} />\n      </DashboardCardHeader>\n      <UtilizationBody timestamps={timestamps}>\n        <PrometheusUtilizationItem\n          title=\"CPU\"\n          utilizationQuery={queries[HostQuery.CPU_UTILIZATION].utilization}\n          humanizeValue={humanizeCpuCores}\n          TopConsumerPopover={cpuPopover}\n          duration={duration}\n          setTimestamps={setTimestamps}\n        />\n        <PrometheusUtilizationItem\n          title=\"Memory\"\n          utilizationQuery={queries[HostQuery.MEMORY_UTILIZATION].utilization}\n          totalQuery={queries[HostQuery.MEMORY_UTILIZATION].total}\n          humanizeValue={humanizeBinaryBytes}\n          byteDataType={ByteDataTypes.BinaryBytes}\n          TopConsumerPopover={memPopover}\n          duration={duration}\n        />\n        <PrometheusUtilizationItem\n          title=\"Filesystem\"\n          utilizationQuery={queries[HostQuery.STORAGE_UTILIZATION].utilization}\n          totalQuery={queries[HostQuery.STORAGE_UTILIZATION].total}\n          humanizeValue={humanizeBinaryBytes}\n          byteDataType={ByteDataTypes.BinaryBytes}\n          TopConsumerPopover={storagePopover}\n          duration={duration}\n        />\n        <PrometheusMultilineUtilizationItem\n          title=\"Network Transfer\"\n          queries={multilineQueries[HostQuery.NETWORK_UTILIZATION]}\n          humanizeValue={humanizeDecimalBytesPerSec}\n          duration={duration}\n        />\n        <PrometheusUtilizationItem\n          title=\"Pod count\"\n          utilizationQuery={queries[HostQuery.NUMBER_OF_PODS].utilization}\n          humanizeValue={humanizePods}\n          duration={duration}\n        />\n      </UtilizationBody>\n    </DashboardCard>\n  );\n};\n\nexport default UtilizationCard;\n","import * as _ from 'lodash';\nimport { PrometheusResponse } from '@console/internal/components/graphs';\n\nexport enum HostQuery {\n  CPU_UTILIZATION = 'CPU_UTILIZATION',\n  MEMORY_UTILIZATION = 'MEMORY_UTILIZATION',\n  MEMORY_TOTAL = 'MEMORY_TOTAL',\n  STORAGE_UTILIZATION = 'STORAGE_UTILIZATION',\n  STORAGE_TOTAL = 'STORAGE_TOTAL',\n  NETWORK_IN_UTILIZATION = 'NETWORK_IN_UTILIZATION',\n  NETWORK_OUT_UTILIZATION = 'NETWORK_OUT_UTILIZATION',\n  NETWORK_UTILIZATION = 'NETWORK_UTILIZATION',\n  NUMBER_OF_PODS = 'NUMBER_OF_PODS',\n  NUMBER_OF_FANS = 'NUMBER_OF_FANS',\n  NUMBER_OF_PSUS = 'NUMBER_OF_PSUS',\n\n  // popover queries\n  PODS_BY_CPU = 'PODS_BY_CPU',\n  PODS_BY_MEMORY = 'PODS_BY_MEMORY',\n  PODS_BY_STORAGE = 'PODS_BY_STORAGE',\n  PROJECTS_BY_CPU = 'PROJECTS_BY_CPU',\n  PROJECTS_BY_MEMORY = 'PROJECTS_BY_MEMORY',\n  PROJECTS_BY_STORAGE = 'PROJECTS_BY_STORAGE',\n}\n\nconst nodeQueriesByNodeName = {\n  [HostQuery.CPU_UTILIZATION]: _.template(`instance:node_cpu:rate:sum{instance=~'<%= node %>'}`),\n  [HostQuery.MEMORY_UTILIZATION]: _.template(`node_memory_Active_bytes{instance=~'<%= node %>'}`),\n  [HostQuery.MEMORY_TOTAL]: _.template(`node_memory_MemTotal_bytes{instance=~'<%= node %>'}`),\n  [HostQuery.STORAGE_UTILIZATION]: _.template(\n    `instance:node_filesystem_usage:sum{instance=~'<%= node %>'}`,\n  ),\n  [HostQuery.STORAGE_TOTAL]: _.template(`sum(node_filesystem_size_bytes{instance=~'<%= node %>'})`),\n  [HostQuery.NETWORK_IN_UTILIZATION]: _.template(\n    `instance:node_network_receive_bytes:rate:sum{instance=~'<%= node %>'}`,\n  ),\n  [HostQuery.NETWORK_OUT_UTILIZATION]: _.template(\n    `instance:node_network_transmit_bytes:rate:sum{instance=~'<%= node %>'}`,\n  ),\n  [HostQuery.NUMBER_OF_PODS]: _.template(`kubelet_running_pod_count{node='<%= node %>'}`),\n  [HostQuery.PODS_BY_CPU]: _.template(\n    `topk(25, sort_desc(sum(rate(container_cpu_usage_seconds_total{node=\"<%= node %>\",container_name=\"\",pod!=\"\"}[5m])) BY (pod, namespace)))`,\n  ),\n  [HostQuery.PROJECTS_BY_CPU]: _.template(\n    `topk(25, sort_desc(sum(rate(container_cpu_usage_seconds_total{node=\"<%= node %>\",container_name=\"\",pod!=\"\"}[5m])) BY (namespace)))`,\n  ),\n  [HostQuery.PODS_BY_MEMORY]: _.template(\n    `topk(25, sort_desc(sum(container_memory_working_set_bytes{node=\"<%= node %>\",container=\"\",pod!=\"\"}) BY (pod, namespace)))`,\n  ),\n  [HostQuery.PROJECTS_BY_MEMORY]: _.template(\n    `topk(25, sort_desc(sum(container_memory_working_set_bytes{node=\"<%= node %>\",container=\"\",pod!=\"\"}) BY (namespace)))`,\n  ),\n  [HostQuery.PODS_BY_STORAGE]: _.template(\n    `topk(25, sort_desc(avg by (pod, namespace)(irate(container_fs_io_time_seconds_total{node=\"<%= node %>\",container=\"POD\", pod!=\"\"}[1m]))))`,\n  ),\n  [HostQuery.PROJECTS_BY_STORAGE]: _.template(\n    `topk(25, sort_desc(avg by (namespace)(irate(container_fs_io_time_seconds_total{node=\"<%= node %>\",container=\"POD\", pod!=\"\"}[1m]))))`,\n  ),\n};\n\n// TODO(jtomasek): enable and use these once ironic-exporter is available\n// const nodeQueriesByHostName = {\n//   [HostQuery.NUMBER_OF_FANS]: _.template(`baremetal_fan_rpm`),\n//   [HostQuery.NUMBER_OF_PSUS]: _.template(`baremetal_current`),\n// };\n\nconst getQuery = (node: string, query: _.TemplateExecutor): string => query({ node });\n\nexport const getUtilizationQueries = (nodeName: string): HostUtilizationQueryType => ({\n  [HostQuery.CPU_UTILIZATION]: {\n    utilization: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.CPU_UTILIZATION]),\n  },\n  [HostQuery.MEMORY_UTILIZATION]: {\n    utilization: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.MEMORY_UTILIZATION]),\n    total: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.MEMORY_TOTAL]),\n  },\n  [HostQuery.STORAGE_UTILIZATION]: {\n    utilization: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.STORAGE_UTILIZATION]),\n    total: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.STORAGE_TOTAL]),\n  },\n  [HostQuery.NUMBER_OF_PODS]: {\n    utilization: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.NUMBER_OF_PODS]),\n  },\n});\n\nexport const getMultilineUtilizationQueries = (nodeName: string) => ({\n  [HostQuery.NETWORK_UTILIZATION]: [\n    {\n      query: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.NETWORK_IN_UTILIZATION]),\n      desc: 'In',\n    },\n    {\n      query: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.NETWORK_OUT_UTILIZATION]),\n      desc: 'Out',\n    },\n  ],\n});\n\ntype HostQueryType = {\n  [key: string]: string;\n};\n\ntype HostUtilizationQueryType = {\n  [key: string]: { utilization: string; total?: string };\n};\n\nexport const getHostQueryResultError = (result: PrometheusResponse): boolean =>\n  _.get(result, 'status', '') !== 'success';\n\nexport const getTopConsumerQueries = (nodeName: string): HostQueryType => ({\n  [HostQuery.PODS_BY_CPU]: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.PODS_BY_CPU]),\n  [HostQuery.PROJECTS_BY_CPU]: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.PROJECTS_BY_CPU]),\n  [HostQuery.PODS_BY_MEMORY]: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.PODS_BY_MEMORY]),\n  [HostQuery.PROJECTS_BY_MEMORY]: getQuery(\n    nodeName,\n    nodeQueriesByNodeName[HostQuery.PROJECTS_BY_MEMORY],\n  ),\n  [HostQuery.PODS_BY_STORAGE]: getQuery(nodeName, nodeQueriesByNodeName[HostQuery.PODS_BY_STORAGE]),\n  [HostQuery.PROJECTS_BY_STORAGE]: getQuery(\n    nodeName,\n    nodeQueriesByNodeName[HostQuery.PROJECTS_BY_STORAGE],\n  ),\n});\n","import { K8sResourceKind } from '@console/internal/module/k8s';\n\nexport const getSecretUsername = (secret: K8sResourceKind): string =>\n  secret && secret.data && atob(secret.data.username);\nexport const getSecretPassword = (secret: K8sResourceKind): string =>\n  secret && secret.data && atob(secret.data.password);\n","import { FirehoseResult } from '@console/internal/components/utils';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\n\nexport const getLoadedData = (\n  result: FirehoseResult<K8sResourceKind | K8sResourceKind[]>,\n  defaultValue = null,\n) => (result && result.loaded && !result.loadError ? result.data : defaultValue);\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AAIA;AAEA;AACA;AACA;AAaA;AAEA;;;;;;;;;;;;;AC3DA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AAEA;AAKA;AACA;AAQA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAMA;AAEA;AAEA;AAEA;AAKA;AACA;AAaA;AAQA;AAGA;;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA,uEACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA,oDACA;AACA;AAIA;AACA;AAEA;AACA;AACA,oDACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,wDACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA,4EACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA,+DACA;AACA;AACA;AACA;AACA;AAIA,+DACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEACA;AACA;AACA;AACA;AACA;AAIA,wEACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDACA;AACA;AACA;AAEA;AACA;AACA;AACA,oDACA;AACA;AACA,iEACA;AACA;AACA;AAEA;AACA;AACA,2DACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yDACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,mDACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpQA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAMA;AAMA;AACA;AAUA;AACA;AAkBA;AACA;AACA;AACA;AACA;AASA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAGA;AACA;AAKA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AASA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAIA;AASA;AAEA;AACA;AAGA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAKA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;;AAAA;AAEA;AACA;AAYA;AAEA;;;;;;;;;;;;;ACvNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;;;;;;;;;;;;;AC5FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAOA;AACA;AACA;AAEA;AACA;AAWA;AAEA;;;;;;;;;;;;;ACxDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAGA;AAOA;AACA;AACA;AAEA;AACA;AAWA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvDA;AACA;AACA;AAMA;AAAA;AAIA;AAAA;AACA;AAAA;AACA;AACA;AAEA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AAEA;AACA;AAQA;AACA;AACA;AAEA;;;;;;;;;;;;;AC7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAOA;AACA;AACA;AACA;AAEA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAaA;AAEA;;;;;;;;;;;;;AC/HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAcA;AAWA;AAUA;AAKA;AAQA;AAMA;AAOA;AAOA;AAQA;AAOA;AAcA;;;;;;;;;;;;;ACtGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AAKA;AACA;AAKA;AAEA;;;;;;;;;;;;;ACtEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AAGA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAIA;AAIA;AAIA;;;;;;;;;;;;;AClCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAIA;AASA;;;;;;;;;;;;;ACjDA;AAAA;AAAA;AAAA;AAAA;AAIA;;;;;;;;;;;;;ACJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAUA;AACA;AACA;AAGA;AAGA;AAOA;AAEA;;;;;;;;;;;;;AC1DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AAIA;AACA;AAEA;AACA;AAEA;AAEA;AAOA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AAEA;AAKA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAUA;AACA;AACA;AACA;AAGA;AACA;AACA;AASA;AAIA;AAQA;AAEA;;;;;;;;;;;;;AC1HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAEA;;;;;;;;;;;;;ACrEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAKA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AAGA;AAKA;AAEA;;;;;;;;;;;;;AChHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAIA;AAIA;AACA;AAOA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AAQA;AASA;AASA;AAMA;AASA;AAEA;;;;;;;;;;;;;ACpLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AAGA;AACA;AAGA;AAGA;AAGA;AAGA;AAGA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAUA;AAGA;AACA;AACA;AACA;AACA;AAIA;AACA;AAIA;;;;;;;;;;;;;ACxHA;AAAA;AAAA;AAAA;AAEA;;;;;;;;;;;;;ACDA;AAAA;AAAA;;;;;A","sourceRoot":""}