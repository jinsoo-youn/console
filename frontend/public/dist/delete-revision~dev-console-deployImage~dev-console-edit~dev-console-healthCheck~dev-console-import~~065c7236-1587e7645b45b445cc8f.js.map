{"version":3,"file":"delete-revision~dev-console-deployImage~dev-console-edit~dev-console-healthCheck~dev-console-import~~065c7236-1587e7645b45b445cc8f.js","sources":["webpack:///./packages/dev-console/src/components/health-checks/health-checks-probe-validation-utils.ts","webpack:///./packages/dev-console/src/components/import/import-validation-utils.ts","webpack:///./packages/dev-console/src/components/import/validation-schema.ts","webpack:///./packages/dev-console/src/utils/yup-validation-util.ts"],"sourcesContent":["import * as yup from 'yup';\n\nconst pathRegex = /^\\/.*$/;\n\nexport const MAX_INT32 = 2147483647;\n\nexport const healthChecksValidationSchema = yup.object().shape({\n  containerName: yup.string(),\n  showForm: yup.boolean(),\n  enabled: yup.boolean(),\n  modified: yup.boolean(),\n  data: yup.object().when('showForm', {\n    is: true,\n    then: yup.object().shape({\n      periodSeconds: yup\n        .number()\n        .integer('Value must be an integer.')\n        .min(1, 'Period must be greater than or equal to 1.')\n        .max(MAX_INT32, 'Value is larger than maximum value allowed.'),\n      initialDelaySeconds: yup\n        .number()\n        .integer('Value must be an integer.')\n        .min(0, 'Initial Delay must be greater than or equal to 0.')\n        .max(MAX_INT32, 'Value is larger than maximum value allowed.'),\n      failureThreshold: yup\n        .number()\n        .integer('Value must be an integer.')\n        .min(1, 'Failure Threshold must be greater than or equal to 1.'),\n      timeoutSeconds: yup\n        .number()\n        .integer('Value must be an integer.')\n        .min(1, 'Timeout must be greater than or equal to 1.')\n        .max(MAX_INT32, 'Value is larger than maximum value allowed.'),\n      successThreshold: yup\n        .number()\n        .integer('Value must be an integer.')\n        .min(1, 'Success Threshold must be greater than or equal to 1.')\n        .max(MAX_INT32, 'Value is larger than maximum value allowed.'),\n      requestType: yup.string(),\n      httpGet: yup.object().when('requestType', {\n        is: 'httpGet',\n        then: yup.object({\n          path: yup\n            .string()\n            .matches(pathRegex, { message: 'Path must start with /.', excludeEmptyString: true }),\n          port: yup.number().required('Required'),\n        }),\n      }),\n      tcpSocket: yup.object().when('requestType', {\n        is: 'tcpSocket',\n        then: yup.object({\n          port: yup.number().required('Required'),\n        }),\n      }),\n      exec: yup.object().when('requestType', {\n        is: 'command',\n        then: yup.object({\n          command: yup.array().of(yup.string().required('Required')),\n        }),\n      }),\n    }),\n  }),\n});\n\nexport const healthChecksProbesValidationSchema = yup.object().shape({\n  readinessProbe: healthChecksValidationSchema,\n  livenessProbe: healthChecksValidationSchema,\n  startupProbe: healthChecksValidationSchema,\n});\n","import * as yup from 'yup';\nimport * as _ from 'lodash';\nimport { GitTypes } from './import-types';\nimport {\n  nameValidationSchema,\n  projectNameValidationSchema,\n  applicationNameValidationSchema,\n  deploymentValidationSchema,\n  serverlessValidationSchema,\n  limitsValidationSchema,\n  routeValidationSchema,\n  imageValidationSchema,\n  gitValidationSchema,\n  dockerValidationSchema,\n  buildValidationSchema,\n  gitUrlRegex,\n  resourcesValidationSchema,\n} from './validation-schema';\nimport { healthChecksProbesValidationSchema } from '../health-checks/health-checks-probe-validation-utils';\n\nexport const validationSchema = yup.object().shape({\n  name: nameValidationSchema,\n  project: projectNameValidationSchema,\n  application: applicationNameValidationSchema,\n  image: imageValidationSchema,\n  git: gitValidationSchema,\n  docker: dockerValidationSchema,\n  deployment: deploymentValidationSchema,\n  serverless: serverlessValidationSchema,\n  route: routeValidationSchema,\n  limits: limitsValidationSchema,\n  build: buildValidationSchema,\n  resources: resourcesValidationSchema,\n  healthChecks: healthChecksProbesValidationSchema,\n});\n\nconst hasDomain = (url: string, domain: string): boolean => {\n  return url.includes(`https://${domain}/`) || url.includes(`@${domain}:`);\n};\n\nexport const detectGitType = (url: string): string => {\n  if (!gitUrlRegex.test(url)) {\n    // Not a URL\n    return GitTypes.invalid;\n  }\n  if (hasDomain(url, 'github.com')) {\n    return GitTypes.github;\n  }\n  if (hasDomain(url, 'bitbucket.org')) {\n    return GitTypes.bitbucket;\n  }\n  if (hasDomain(url, 'gitlab.com')) {\n    return GitTypes.gitlab;\n  }\n  // Not a known URL\n  return GitTypes.unsure;\n};\n\nexport const detectGitRepoName = (url: string): string | undefined => {\n  if (!gitUrlRegex.test(url)) {\n    return undefined;\n  }\n\n  return _.kebabCase(url.split('/').pop());\n};\n","import * as yup from 'yup';\nimport * as _ from 'lodash';\nimport { convertToBaseValue } from '@console/internal/components/utils';\nimport { isInteger } from '../../utils/yup-validation-util';\nimport { CREATE_APPLICATION_KEY } from '../../const';\nimport { Resources } from './import-types';\n\nconst hostnameRegex = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?(\\.[a-z0-9]([-a-z0-9]*[a-z0-9])?)*$/;\nconst pathRegex = /^\\/.*$/;\nconst nameRegex = /^([a-z]([-a-z0-9]*[a-z0-9])?)*$/;\nconst projectNameRegex = /^[a-z0-9]([-a-z0-9]*[a-z0-9])?$/;\n\nexport const gitUrlRegex = /^((((ssh|git|https?:?):\\/\\/:?)(([^\\s@]+@|[^@]:?)[-\\w.]+(:\\d\\d+:?)?(\\/[-\\w.~/?[\\]!$&'()*+,;=:@%]*:?)?:?))|([^\\s@]+@[-\\w.]+:[-\\w.~/?[\\]!$&'()*+,;=:@%]*?:?))$/;\n\nexport const nameValidationSchema = yup\n  .string()\n  .matches(nameRegex, {\n    message:\n      'Name must consist of lower-case letters, numbers and hyphens. It must start with a letter and end with a letter or number.',\n    excludeEmptyString: true,\n  })\n  .max(253, 'Cannot be longer than 253 characters.')\n  .required('Required');\n\nexport const projectNameValidationSchema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      projectNameRegex,\n      \"Name must consist of lower case alphanumeric characters or '-' and must start and end with an alphanumeric character.\",\n    )\n    .required('Required'),\n});\n\nexport const applicationNameValidationSchema = yup.object().shape({\n  selectedKey: yup.string(),\n  name: yup\n    .string()\n    .max(63, 'Cannot be longer than 63 characters.')\n    .when('selectedKey', {\n      is: CREATE_APPLICATION_KEY,\n      then: yup.string().required('Required'),\n    }),\n});\n\nexport const deploymentValidationSchema = yup.object().shape({\n  replicas: yup\n    .number()\n    .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n    .test(isInteger('Replicas must be an Integer.'))\n    .min(0, 'Replicas must be greater than or equal to 0.')\n    .max(\n      Number.MAX_SAFE_INTEGER,\n      `Replicas must be lesser than or equal to ${Number.MAX_SAFE_INTEGER}.`,\n    )\n    .test({\n      name: 'isEmpty',\n      test: (value) => value !== undefined,\n      message: 'This field cannot be empty.',\n    }),\n});\n\nexport const resourcesValidationSchema = yup\n  .string()\n  .oneOf([Resources.OpenShift, Resources.Kubernetes, Resources.KnativeService])\n  .required();\n\nexport const serverlessValidationSchema = yup.object().when('resources', {\n  is: Resources.KnativeService,\n  then: yup.object().shape({\n    scaling: yup.object({\n      minpods: yup\n        .number()\n        .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n        .test(isInteger('Min Pods must be an Integer.'))\n        .min(0, 'Min Pods must be greater than or equal to 0.')\n        .max(\n          Number.MAX_SAFE_INTEGER,\n          `Min Pods must be lesser than or equal to ${Number.MAX_SAFE_INTEGER}.`,\n        ),\n      maxpods: yup\n        .number()\n        .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n        .test(isInteger('Max Pods must be an Integer.'))\n        .min(1, 'Max Pods must be greater than or equal to 1.')\n        .max(\n          Number.MAX_SAFE_INTEGER,\n          `Max Pods must be lesser than or equal to ${Number.MAX_SAFE_INTEGER}.`,\n        )\n        .test({\n          test(limit) {\n            const { minpods } = this.parent;\n            return limit ? limit >= minpods : true;\n          },\n          message: 'Max Pods must be greater than or equal to Min Pods.',\n        }),\n      concurrencytarget: yup\n        .number()\n        .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n        .test(isInteger('Concurrency Target must be an Integer.'))\n        .min(0, 'Concurrency Target must be greater than or equal to 0.')\n        .max(\n          Number.MAX_SAFE_INTEGER,\n          `Concurrency Target must be lesser than or equal to ${Number.MAX_SAFE_INTEGER}.`,\n        ),\n      concurrencylimit: yup\n        .number()\n        .transform((cv) => (_.isNaN(cv) ? undefined : cv))\n        .test(isInteger('Concurrency Limit must be an Integer.'))\n        .min(0, 'Concurrency Limit must be greater than or equal to 0.')\n        .max(\n          Number.MAX_SAFE_INTEGER,\n          `Concurrency Limit must be lesser than or equal to ${Number.MAX_SAFE_INTEGER}.`,\n        ),\n    }),\n  }),\n});\n\nexport const routeValidationSchema = yup.object().shape({\n  secure: yup.boolean(),\n  tls: yup.object().when('secure', {\n    is: true,\n    then: yup.object({\n      termination: yup.string().required('Please select a termination type.'),\n    }),\n  }),\n  hostname: yup\n    .string()\n    .matches(hostnameRegex, {\n      message:\n        'Hostname must consist of lower-case letters, numbers, periods, and hyphens. It must start and end with a letter or number.',\n      excludeEmptyString: true,\n    })\n    .max(253, 'Cannot be longer than 253 characters.'),\n  path: yup\n    .string()\n    .matches(pathRegex, { message: 'Path must start with /.', excludeEmptyString: true }),\n  unknownTargetPort: yup\n    .string()\n    .matches(/^\\d+$/, { message: 'Port must be an Integer.', excludeEmptyString: true }),\n});\n\nexport const limitsValidationSchema = yup.object().shape({\n  cpu: yup.object().shape({\n    request: yup\n      .number()\n      .transform((request) => (_.isNaN(request) ? undefined : request))\n      .min(0, 'Request must be greater than or equal to 0.')\n      .test({\n        test(request) {\n          const { requestUnit, limit, limitUnit } = this.parent;\n          if (limit !== undefined) {\n            return (\n              convertToBaseValue(`${request}${requestUnit}`) <=\n              convertToBaseValue(`${limit}${limitUnit}`)\n            );\n          }\n          return true;\n        },\n        message: 'CPU request must be less than or equal to limit.',\n      }),\n    requestUnit: yup.string('Unit must be millicores or cores.').ensure(),\n    limitUnit: yup.string('Unit must be millicores or cores.').ensure(),\n    limit: yup\n      .number()\n      .transform((limit) => (_.isNaN(limit) ? undefined : limit))\n      .min(0, 'Limit must be greater than or equal to 0.')\n      .test({\n        test(limit) {\n          const { request, requestUnit, limitUnit } = this.parent;\n          if (limit !== undefined) {\n            return (\n              convertToBaseValue(`${limit}${limitUnit}`) >=\n              convertToBaseValue(`${request}${requestUnit}`)\n            );\n          }\n          return true;\n        },\n        message: 'CPU limit must be greater than or equal to request.',\n      }),\n  }),\n  memory: yup.object().shape({\n    request: yup\n      .number()\n      .transform((request) => (_.isNaN(request) ? undefined : request))\n      .min(0, 'Request must be greater than or equal to 0.')\n      .test({\n        test(request) {\n          const { requestUnit, limit, limitUnit } = this.parent;\n          if (limit !== undefined) {\n            return (\n              convertToBaseValue(`${request}${requestUnit}`) <=\n              convertToBaseValue(`${limit}${limitUnit}`)\n            );\n          }\n          return true;\n        },\n        message: 'Memory request must be less than or equal to limit.',\n      }),\n    requestUnit: yup.string('Unit must be Mi or Gi.'),\n    limit: yup\n      .number()\n      .transform((limit) => (_.isNaN(limit) ? undefined : limit))\n      .min(0, 'Limit must be greater than or equal to 0.')\n      .test({\n        test(limit) {\n          const { request, requestUnit, limitUnit } = this.parent;\n          if (limit !== undefined) {\n            return (\n              convertToBaseValue(`${request}${requestUnit}`) <=\n              convertToBaseValue(`${limit}${limitUnit}`)\n            );\n          }\n          return true;\n        },\n        message: 'Memory limit must be greater than or equal to request.',\n      }),\n    limitUnit: yup.string('Unit must be Mi or Gi.'),\n  }),\n});\n\nexport const imageValidationSchema = yup.object().when('build', {\n  is: (build) => build.strategy !== 'Docker',\n  then: yup.object().shape({\n    selected: yup.string().required('Required'),\n    tag: yup.string().required('Required'),\n  }),\n});\n\nexport const gitValidationSchema = yup.object().shape({\n  url: yup\n    .string()\n    .max(2000, 'Please enter a URL that is less then 2000 characters.')\n    .matches(gitUrlRegex, 'Invalid Git URL.')\n    .required('Required'),\n  type: yup.string().when('showGitType', {\n    is: true,\n    then: yup.string().required('We failed to detect the git type. Please choose a git type.'),\n  }),\n  showGitType: yup.boolean(),\n});\n\nexport const dockerValidationSchema = yup.object().when('build', {\n  is: (build) => build.strategy === 'Docker',\n  then: yup.object().shape({\n    containerPort: yup.number().test(isInteger('Container port should be an Integer')),\n  }),\n});\n\nexport const buildValidationSchema = yup.object().shape({\n  strategy: yup.string(),\n});\n\nexport const searchTermValidationSchema = yup.string().required('Required');\n\nexport const isiValidationSchema = yup.object().shape({\n  name: yup.string().required('Required'),\n  image: yup.object().required('Required'),\n  tag: yup.string(),\n  status: yup.string().required('Required'),\n});\n","export const isInteger = (message) => ({\n  test(value) {\n    return value == null || Number.isInteger(value);\n  },\n  message,\n});\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,qEACA;AACA;AACA;AACA;AACA,2EACA;AACA;AACA;AACA;AACA,wEACA;AACA;AACA;AACA,sEACA;AACA;AACA;AACA;AACA,wEACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oEACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAeA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;AChEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA,uEACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA,oDACA;AACA;AAIA;AACA;AAEA;AACA;AACA,oDACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,wDACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA,4EACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA,+DACA;AACA;AACA;AACA;AACA;AAIA,+DACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yEACA;AACA;AACA;AACA;AACA;AAIA,wEACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wDACA;AACA;AACA;AAEA;AACA;AACA;AACA,oDACA;AACA;AACA,iEACA;AACA;AACA;AAEA;AACA;AACA,2DACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,yDACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2DACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,yDACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA,mDACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpQA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}