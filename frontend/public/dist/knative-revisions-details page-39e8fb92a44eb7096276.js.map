{"version":3,"file":"knative-revisions-details page-39e8fb92a44eb7096276.js","sources":["webpack:///./packages/knative-plugin/src/actions/delete-revision.ts","webpack:///./packages/knative-plugin/src/actions/getRevisionActions.ts","webpack:///./packages/knative-plugin/src/components/revisions/RevisionDetailsPage.tsx"],"sourcesContent":["import { KebabOption } from '@console/internal/components/utils';\nimport { K8sKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport { deleteRevisionModal } from '../components/modals';\n\nexport const deleteRevision = (model: K8sKind, revision: K8sResourceKind): KebabOption => {\n  return {\n    label: `Delete ${model.label}`,\n    callback: () =>\n      deleteRevisionModal({\n        revision,\n      }),\n    accessReview: {\n      group: model.apiGroup,\n      resource: model.plural,\n      name: revision.metadata.name,\n      namespace: revision.metadata.namespace,\n      verb: 'delete',\n    },\n  };\n};\n","import { Kebab } from '@console/internal/components/utils';\nimport { RevisionModel } from '../models';\nimport { deleteRevision } from './delete-revision';\n\nexport const getRevisionActions = () => {\n  let deleteFound = false;\n  const commonActions = Kebab.factory.common.map((action) => {\n    if (action.name === 'Delete') {\n      deleteFound = true;\n      return deleteRevision;\n    }\n    return action;\n  });\n  if (!deleteFound) {\n    commonActions.push(deleteRevision);\n  }\n  return [...Kebab.getExtensionsActionsForKind(RevisionModel), ...commonActions];\n};\n","import * as React from 'react';\nimport { DetailsPage } from '@console/internal/components/factory';\nimport { navFactory } from '@console/internal/components/utils';\nimport { DetailsForKind } from '@console/internal/components/default-resource';\nimport { K8sKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport { getRevisionActions } from '../../actions/getRevisionActions';\n\nconst RevisionsPage: React.FC<React.ComponentProps<typeof DetailsPage>> = (props) => {\n  const pages = [navFactory.details(DetailsForKind(props.kind)), navFactory.editYaml()];\n  const menuActionsCreator = (kindObj: K8sKind, obj: K8sResourceKind) =>\n    getRevisionActions().map((action) => action(kindObj, obj));\n\n  return <DetailsPage {...props} pages={pages} menuActions={menuActionsCreator} />;\n};\n\nexport default RevisionsPage;\n"],"mappings":";;;;;;;;;;AAEA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AACA;AAEA;;;;;A","sourceRoot":""}