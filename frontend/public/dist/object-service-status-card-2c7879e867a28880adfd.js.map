{"version":3,"file":"object-service-status-card-2c7879e867a28880adfd.js","sources":["webpack:///./packages/console-shared/src/components/dashboard/status-card/AlertItem.tsx","webpack:///./packages/console-shared/src/components/dashboard/status-card/AlertsBody.tsx","webpack:///./packages/console-shared/src/components/dashboard/status-card/HealthItem.tsx","webpack:///./packages/noobaa-storage-plugin/src/components/status-card/status-card.scss?77ba","webpack:///./packages/noobaa-storage-plugin/src/components/status-card/status-card.tsx","webpack:///./packages/noobaa-storage-plugin/src/components/status-card/statuses.tsx","webpack:///./packages/noobaa-storage-plugin/src/constants/index.ts","webpack:///./packages/noobaa-storage-plugin/src/queries.ts","webpack:///./packages/noobaa-storage-plugin/src/utils.ts"],"sourcesContent":["import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { alertActions } from '@console/internal/components/notification-drawer';\nimport { Timestamp } from '@console/internal/components/utils/timestamp';\nimport { alertURL, Alert } from '@console/internal/components/monitoring';\nimport { RedExclamationCircleIcon, YellowExclamationTriangleIcon } from '../../status/icons';\nimport {\n  getAlertSeverity,\n  getAlertMessage,\n  getAlertDescription,\n  getAlertTime,\n} from './alert-utils';\n\nconst getSeverityIcon = (severity: string) => {\n  switch (severity) {\n    case 'critical':\n      return RedExclamationCircleIcon;\n    case 'warning':\n    default:\n      return YellowExclamationTriangleIcon;\n  }\n};\n\nexport const StatusItem: React.FC<StatusItemProps> = ({ Icon, timestamp, message, children }) => {\n  return (\n    <div className=\"co-status-card__alert-item\">\n      <div className=\"co-status-card__alert-item-icon co-dashboard-icon\">\n        <Icon />\n      </div>\n      <div className=\"co-status-card__alert-item-text\">\n        <div className=\"co-status-card__alert-item-message\">\n          <div className=\"co-health-card__alert-item-timestamp co-status-card__health-item-text text-secondary\">\n            {timestamp && <Timestamp simple timestamp={timestamp} />}\n          </div>\n          <span className=\"co-status-card__health-item-text co-break-word\">{message}</span>\n        </div>\n        {children && <div className=\"co-status-card__alert-item-more\">{children}</div>}\n      </div>\n    </div>\n  );\n};\n\nconst AlertItem: React.FC<AlertItemProps> = ({ alert }) => {\n  const action = alertActions.get(alert.rule.name);\n  return (\n    <StatusItem\n      Icon={getSeverityIcon(getAlertSeverity(alert))}\n      timestamp={getAlertTime(alert)}\n      message={getAlertDescription(alert) || getAlertMessage(alert)}\n    >\n      {action ? (\n        <Link to={action.path}>{action.text}</Link>\n      ) : (\n        <Link to={alertURL(alert, alert.rule.id)}>View details</Link>\n      )}\n    </StatusItem>\n  );\n};\n\nexport default AlertItem;\n\ntype StatusItemProps = {\n  Icon: React.ComponentType<any>;\n  timestamp?: string;\n  message: string;\n};\n\ntype AlertItemProps = {\n  alert: Alert;\n};\n","import * as React from 'react';\nimport {\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { UnknownIcon } from '@patternfly/react-icons';\n\nconst AlertsBody: React.FC<AlertsBodyProps> = ({ error = false, children }) =>\n  (error || !!React.Children.toArray(children).length) && (\n    <div className=\"co-dashboard-card__body--no-padding co-status-card__alerts-body co-dashboard-card__body--top-margin\">\n      {error ? (\n        <EmptyState variant={EmptyStateVariant.full} className=\"co-status-card__alerts-msg\">\n          <EmptyStateIcon className=\"co-status-card__alerts-icon\" icon={UnknownIcon} />\n          <EmptyStateBody>Alerts could not be loaded.</EmptyStateBody>\n        </EmptyState>\n      ) : (\n        children\n      )}\n    </div>\n  );\n\nexport default AlertsBody;\n\ntype AlertsBodyProps = {\n  error?: boolean;\n  children?: React.ReactNode;\n};\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { DashboardCardPopupLink } from '../dashboard-card/DashboardCardLink';\nimport { HealthState, healthStateMapping } from './states';\n\nconst HealthItemIcon: React.FC<HealthItemIconProps> = ({ state }) => (\n  <div className=\"co-dashboard-icon\">\n    {(healthStateMapping[state] || healthStateMapping[HealthState.UNKNOWN]).icon}\n  </div>\n);\n\nconst HealthItem: React.FC<HealthItemProps> = React.memo(\n  ({ className, state, title, details, popupTitle, noIcon = false, children }) => {\n    const detailMessage =\n      details || (healthStateMapping[state] || healthStateMapping[HealthState.UNKNOWN]).message;\n    return (\n      <div className={classNames('co-status-card__health-item', className)}>\n        {state === HealthState.LOADING ? (\n          <div className=\"skeleton-health\" />\n        ) : (\n          !noIcon && <HealthItemIcon state={state} />\n        )}\n        <div>\n          <span className=\"co-dashboard-text--small co-status-card__health-item-text\">\n            {React.Children.toArray(children).length && state !== HealthState.LOADING ? (\n              <DashboardCardPopupLink\n                linkTitle={title}\n                popupTitle={popupTitle}\n                className=\"co-status-card__popup\"\n              >\n                {children}\n              </DashboardCardPopupLink>\n            ) : (\n              title\n            )}\n          </span>\n          {state !== HealthState.LOADING && detailMessage && (\n            <div className=\"co-dashboard-text--small co-status-card__health-item-text co-status-card__health-item-subtitle\">\n              {detailMessage}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  },\n);\n\nexport default HealthItem;\n\ntype HealthItemProps = {\n  title: string;\n  className?: string;\n  details?: string;\n  state?: HealthState;\n  popupTitle?: string;\n  noIcon?: boolean;\n};\n\ntype HealthItemIconProps = {\n  state?: HealthState;\n};\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Gallery, GalleryItem } from '@patternfly/react-core';\nimport AlertsBody from '@console/shared/src/components/dashboard/status-card/AlertsBody';\nimport AlertItem from '@console/shared/src/components/dashboard/status-card/AlertItem';\nimport { alertURL } from '@console/internal/components/monitoring';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport HealthBody from '@console/shared/src/components/dashboard/status-card/HealthBody';\nimport HealthItem from '@console/shared/src/components/dashboard/status-card/HealthItem';\nimport { PrometheusResponse } from '@console/internal/components/graphs';\nimport {\n  withDashboardResources,\n  DashboardItemProps,\n} from '@console/internal/components/dashboard/with-dashboard-resources';\nimport { FirehoseResource, FirehoseResult } from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { getDataResiliencyState } from '@console/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/status-card/utils';\nimport { filterNooBaaAlerts } from '../../utils';\nimport { DATA_RESILIENCE_QUERIES, StatusCardQueries } from '../../queries';\nimport { NooBaaSystemModel } from '../../models';\nimport { getNooBaaState, ObjectServiceState } from './statuses';\nimport './status-card.scss';\n\nconst statusCardQueries = Object.keys(StatusCardQueries);\n\nconst noobaaResource: FirehoseResource = {\n  kind: referenceForModel(NooBaaSystemModel),\n  isList: true,\n  prop: 'noobaa',\n};\n\nconst NooBaaAlerts = withDashboardResources(\n  ({ watchAlerts, stopWatchAlerts, notificationAlerts }) => {\n    React.useEffect(() => {\n      watchAlerts();\n      return () => {\n        stopWatchAlerts();\n      };\n    }, [watchAlerts, stopWatchAlerts]);\n\n    const { data, loaded, loadError } = notificationAlerts || {};\n    const alerts = filterNooBaaAlerts(data);\n\n    return (\n      <AlertsBody error={!_.isEmpty(loadError)}>\n        {loaded &&\n          alerts.length > 0 &&\n          alerts.map((alert) => <AlertItem key={alertURL(alert, alert.rule.id)} alert={alert} />)}\n      </AlertsBody>\n    );\n  },\n);\n\nconst StatusCard: React.FC<DashboardItemProps> = ({\n  watchK8sResource,\n  stopWatchK8sResource,\n  watchPrometheus,\n  resources,\n  stopWatchPrometheusQuery,\n  prometheusResults,\n}) => {\n  React.useEffect(() => {\n    watchK8sResource(noobaaResource);\n    statusCardQueries.forEach((key) => watchPrometheus(StatusCardQueries[key]));\n    watchPrometheus(DATA_RESILIENCE_QUERIES.REBUILD_PROGRESS_QUERY);\n    return () => {\n      stopWatchK8sResource(noobaaResource);\n      statusCardQueries.forEach((key) => stopWatchPrometheusQuery(StatusCardQueries[key]));\n      stopWatchPrometheusQuery(DATA_RESILIENCE_QUERIES.REBUILD_PROGRESS_QUERY);\n    };\n  }, [watchK8sResource, stopWatchK8sResource, watchPrometheus, stopWatchPrometheusQuery]);\n\n  const buckets = prometheusResults.getIn([\n    StatusCardQueries.BUCKETS_COUNT,\n    'data',\n  ]) as PrometheusResponse;\n\n  const unhealthyBuckets = prometheusResults.getIn([\n    StatusCardQueries.UNHEALTHY_BUCKETS,\n    'data',\n  ]) as PrometheusResponse;\n\n  const pools = prometheusResults.getIn([\n    StatusCardQueries.POOLS_COUNT,\n    'data',\n  ]) as PrometheusResponse;\n\n  const unhealthyPools = prometheusResults.getIn([\n    StatusCardQueries.UNHEALTHY_POOLS,\n    'data',\n  ]) as PrometheusResponse;\n\n  const progressResult = prometheusResults.getIn([\n    DATA_RESILIENCE_QUERIES.REBUILD_PROGRESS_QUERY,\n    'data',\n  ]) as PrometheusResponse;\n  const progressError = prometheusResults.getIn([\n    DATA_RESILIENCE_QUERIES.REBUILD_PROGRESS_QUERY,\n    'loadError',\n  ]);\n\n  const noobaa = _.get(resources, 'noobaa') as FirehoseResult;\n\n  const queriesLoadError = statusCardQueries.some((q) => {\n    return prometheusResults.getIn([StatusCardQueries[q], 'loadError']);\n  });\n\n  const hasStatusLoadError = _.get(noobaa, 'loadError') || queriesLoadError;\n  const allStatusLoaded =\n    _.get(noobaa, 'loaded') && buckets && unhealthyBuckets && pools && unhealthyPools;\n\n  const objectServiceState: ObjectServiceState = getNooBaaState(\n    [buckets, unhealthyBuckets, pools, unhealthyPools],\n    !!hasStatusLoadError,\n    !allStatusLoaded,\n    noobaa,\n  );\n\n  const dataResiliencyState: ObjectServiceState = getDataResiliencyState([\n    { response: progressResult, error: progressError },\n  ]);\n\n  return (\n    <DashboardCard gradient>\n      <DashboardCardHeader>\n        <DashboardCardTitle>Status</DashboardCardTitle>\n      </DashboardCardHeader>\n      <DashboardCardBody>\n        <HealthBody>\n          <Gallery className=\"nb-status-card__health\" gutter=\"md\">\n            <GalleryItem>\n              <HealthItem\n                title=\"Multi Cloud Object Gateway\"\n                state={objectServiceState.state}\n                details={objectServiceState.message}\n              />\n            </GalleryItem>\n            <GalleryItem>\n              <HealthItem\n                title=\"Data Resiliency\"\n                state={dataResiliencyState.state}\n                details={dataResiliencyState.message}\n              />\n            </GalleryItem>\n          </Gallery>\n        </HealthBody>\n        <NooBaaAlerts />\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n};\n\nexport default withDashboardResources(StatusCard);\n","import * as _ from 'lodash';\nimport { HealthState } from '@console/shared/src/components/dashboard/status-card/states';\nimport { PrometheusResponse } from '@console/internal/components/graphs';\nimport { FirehoseResult } from '@console/internal/components/utils';\nimport { getGaugeValue } from '../../utils';\n\nconst NooBaaStatus = [\n  {\n    state: HealthState.ERROR,\n    message: 'MCG is not running',\n  },\n  {\n    state: HealthState.ERROR,\n    message: 'All resources are unhealthy',\n  },\n  {\n    state: HealthState.WARNING,\n    message: 'Object Bucket has an issue',\n  },\n  {\n    state: HealthState.ERROR,\n    message: 'Many buckets have issues',\n  },\n  {\n    state: HealthState.WARNING,\n    message: 'Some buckets have issues',\n  },\n];\n\nexport const getNooBaaState: GetObjectServiceStatus = (\n  prometheusResponses = [],\n  hasLoadError,\n  isLoading,\n  k8sResponse,\n) => {\n  const [buckets, unhealthyBuckets, pools, unhealthyPools] = prometheusResponses.map((r) =>\n    getGaugeValue(r),\n  );\n  const noobaaPhase = _.get(k8sResponse, 'data[0].status.phase');\n  const unhealthyBucketsRatio = unhealthyBuckets / buckets;\n  const noData = !(buckets && unhealthyBuckets && pools && unhealthyPools && noobaaPhase);\n\n  if (hasLoadError) {\n    return { state: HealthState.UNKNOWN };\n  }\n  if (noData) {\n    return { state: HealthState.NOT_AVAILABLE };\n  }\n  if (isLoading) {\n    return { state: HealthState.LOADING };\n  }\n  if (noobaaPhase !== 'Ready') {\n    return NooBaaStatus[0];\n  }\n  if (Number(pools) === Number(unhealthyPools)) {\n    return NooBaaStatus[1];\n  }\n  if (Number(unhealthyBuckets) === 1) {\n    return NooBaaStatus[2];\n  }\n  if (unhealthyBucketsRatio >= 0.5) {\n    return NooBaaStatus[3];\n  }\n  if (unhealthyBucketsRatio >= 0.3) {\n    return NooBaaStatus[4];\n  }\n  return { state: HealthState.OK };\n};\n\nexport type ObjectServiceState = { state: HealthState; message?: string };\n\ntype GetObjectServiceStatus = (\n  prometheusResponses: PrometheusResponse[],\n  hasLoadError: boolean,\n  isLoading: boolean,\n  k8sResponse?: FirehoseResult,\n) => ObjectServiceState;\n","export const ACCOUNTS = 'Accounts';\nexport const PROVIDERS = 'Providers';\nexport const BY_IOPS = 'I/O Operations';\nexport const BY_LOGICAL_USAGE = 'Logical Used Capacity';\nexport const BY_PHYSICAL_VS_LOGICAL_USAGE = 'Physical Vs Logical Usage';\nexport const BY_EGRESS = 'Egress';\nexport const PROJECTS = 'Projects';\nexport const BUCKET_CLASS = 'Bucket Class';\nexport const OCS_NS = 'openshift-storage';\nexport const NB_PROVISIONER = 'noobaa.io/obc';\n\nexport const CHART_LABELS = {\n  [BY_LOGICAL_USAGE]: 'Logical used capacity per account',\n  [BY_PHYSICAL_VS_LOGICAL_USAGE]: 'Physical vs. Logical used capacity',\n  [BY_EGRESS]: 'Egress Per Provider',\n  [BY_IOPS]: 'I/O Operations count',\n};\n\nexport enum BC_PROVIDERS {\n  AWS = 'AWS S3',\n  S3 = 'S3 Compatible',\n  PVC = 'PVC',\n  GCP = 'Google cloud storage',\n  AZURE = 'Azure Blob',\n  IBM = 'IBM COS',\n}\n\nexport const PROVIDERS_NOOBAA_MAP = {\n  [BC_PROVIDERS.AWS]: 'awsS3',\n  [BC_PROVIDERS.S3]: 's3Compatible',\n  [BC_PROVIDERS.AZURE]: 'azureBlob',\n  [BC_PROVIDERS.GCP]: 'googleCloudStorage',\n  [BC_PROVIDERS.PVC]: 'pvPool',\n  [BC_PROVIDERS.IBM]: 'ibmCos',\n};\n\nexport const BUCKET_LABEL_NOOBAA_MAP = {\n  [BC_PROVIDERS.AWS]: 'targetBucket',\n  [BC_PROVIDERS.S3]: 'targetBucket',\n  [BC_PROVIDERS.AZURE]: 'targetBlobContainer',\n  [BC_PROVIDERS.GCP]: 'targetBucket',\n  [BC_PROVIDERS.IBM]: 'targetBucket',\n};\n\nexport const NOOBAA_TYPE_MAP = {\n  [BC_PROVIDERS.AWS]: 'aws-s3',\n  [BC_PROVIDERS.S3]: 's3-compatible',\n  [BC_PROVIDERS.AZURE]: 'azure-blob',\n  [BC_PROVIDERS.GCP]: 'google-cloud-storage',\n  [BC_PROVIDERS.PVC]: 'pv-pool',\n  [BC_PROVIDERS.IBM]: 'ibm-cos',\n};\n\nexport const AWS_REGIONS = [\n  'us-east-1',\n  'us-east-2',\n  'us-west-1',\n  'us-west-2',\n  'ca-central-1',\n  'eu-central-1',\n  'eu-west-1',\n  'eu-west-2',\n  'eu-west-3',\n  'eu-north-1',\n  'ap-east-1',\n  'ap-northeast-1',\n  'ap-northeast-2',\n  'ap-northeast-3',\n  'ap-southeast-1',\n  'ap-southeast-2',\n  'ap-south-1',\n  'me-south-1',\n  'sa-east-1',\n];\n","import { ProjectModel } from '@console/internal/models';\nimport { PROJECTS, BUCKET_CLASS } from './constants';\nimport { NooBaaBucketClassModel } from './models';\n\nexport enum ObjectDashboardQuery {\n  CAPACITY_USAGE_PROJECT_QUERY = 'CAPACITY_USAGE_PROJECT_QUERY',\n  CAPACITY_USAGE_BUCKET_CLASS_QUERY = 'CAPACITY_USAGE_BUCKET_CLASS_QUERY',\n  PROJECTS_TOTAL_USED = 'PROJECTS_TOTAL_USED',\n  PROJECTS_BY_USED = 'PROJECTS_BY_USED',\n  BUCKETS_TOTAL_USED = 'BUCKETS_TOTAL_USED',\n  BUCKETS_BY_USED = 'BUCKETS_BY_USED',\n  NOOBAA_USED = 'NOOBAA_USED',\n  NOOBAA_TOTAL = 'NOOBAA_TOTAL',\n  PROJECTS_OTHERS = 'PROJECTS_OTHERS',\n  BUCKETS_BY_OTHERS = 'BUCKETS_BY_OTHERS',\n  PROJECT_CAPACITY_USAGE_QUERY = 'PROJECT_CAPACITY_USAGE_QUERY',\n  BUCKET_CLASS_CAPACITY_USAGE_QUERY = 'BUCKET_CLASS_CAPACITY_USAGE_QUERY',\n  PROJECTS_QUERY = 'PROJECTS_QUERY',\n  BUCKETS_QUERY = 'BUCKETS_QUERY',\n}\n\nexport enum DATA_RESILIENCE_QUERIES {\n  REBUILD_PROGRESS_QUERY = 'NooBaa_rebuild_progress/100',\n  REBUILD_TIME_QUERY = 'NooBaa_rebuild_time',\n}\n\nexport enum ObjectDataReductionQueries {\n  EFFICIENCY_QUERY = 'NooBaa_reduction_ratio',\n  SAVINGS_QUERY = '(NooBaa_object_savings_logical_size - NooBaa_object_savings_physical_size)',\n  LOGICAL_SAVINGS_QUERY = 'NooBaa_object_savings_logical_size',\n}\n\nexport enum StatusCardQueries {\n  BUCKETS_COUNT = 'NooBaa_num_buckets',\n  UNHEALTHY_BUCKETS = 'NooBaa_num_unhealthy_buckets',\n  POOLS_COUNT = 'NooBaa_num_pools',\n  UNHEALTHY_POOLS = 'NooBaa_num_unhealthy_pools',\n}\n\nexport const CAPACITY_BREAKDOWN_QUERIES = {\n  [ObjectDashboardQuery.PROJECTS_BY_USED]: 'NooBaa_projects_capacity_usage',\n  [ObjectDashboardQuery.BUCKETS_BY_USED]: 'NooBaa_bucket_class_capacity_usage',\n};\n\nexport const breakdownQueryMap = {\n  [PROJECTS]: {\n    model: ProjectModel,\n    metric: 'project',\n    queries: {\n      [ObjectDashboardQuery.PROJECTS_BY_USED]: `sort_desc(topk(5, ${\n        CAPACITY_BREAKDOWN_QUERIES[ObjectDashboardQuery.PROJECTS_BY_USED]\n      }))`,\n      [ObjectDashboardQuery.PROJECTS_TOTAL_USED]: `sum(${\n        CAPACITY_BREAKDOWN_QUERIES[ObjectDashboardQuery.PROJECTS_BY_USED]\n      })`,\n    },\n  },\n  [BUCKET_CLASS]: {\n    model: NooBaaBucketClassModel,\n    metric: 'bucket_class',\n    queries: {\n      [ObjectDashboardQuery.BUCKETS_BY_USED]: `sort_desc(topk(5, ${\n        CAPACITY_BREAKDOWN_QUERIES[ObjectDashboardQuery.BUCKETS_BY_USED]\n      }))`,\n      [ObjectDashboardQuery.BUCKETS_TOTAL_USED]: `sum(${\n        CAPACITY_BREAKDOWN_QUERIES[ObjectDashboardQuery.BUCKETS_BY_USED]\n      })`,\n    },\n  },\n};\n","import * as _ from 'lodash';\nimport { Alert } from '@console/internal/components/monitoring';\nimport { PrometheusResponse } from '@console/internal/components/graphs';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { StorageClass } from '@console/internal/components/storage-class-form';\n\nexport const filterNooBaaAlerts = (alerts: Alert[]): Alert[] =>\n  alerts.filter((alert) => _.get(alert, 'annotations.storage_type') === 'NooBaa');\n\nexport const getGaugeValue = (data) => _.get(data, 'data.result[0].value[1]');\n\nexport const getMetric = (result: PrometheusResponse, metric: string): string =>\n  _.get(result, ['data', 'result', '0', 'metric', metric], null);\n\nexport type PrometheusMetricResult = {\n  metric: { [key: string]: any };\n  value?: [number, string | number];\n};\n\nexport const getPhase = (obj: K8sResourceKind): string => {\n  return _.get(obj, 'status.phase', 'Lost');\n};\n\nexport const isBound = (obj: K8sResourceKind): boolean => getPhase(obj) === 'Bound';\n\nexport const getSCProvisioner = (obj: StorageClass) => obj.provisioner;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AAIA;AAEA;AACA;AACA;AAaA;AAEA;;;;;;;;;;;;;AC3DA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AAEA;AAKA;AACA;AAQA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAMA;AAEA;AAEA;AAEA;AAKA;AACA;AAaA;AAQA;AAGA;;;;;;;;;;;;AC/CA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAGA;AAGA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AAOA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AACA;AAQA;AAIA;AAEA;;;;;;;;;;;;;AC3JA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACnEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;;;;;;;;;;;;;ACrEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAGA;AAEA;AAQA;AACA;AACA;AAEA;AAEA;;;;;A","sourceRoot":""}