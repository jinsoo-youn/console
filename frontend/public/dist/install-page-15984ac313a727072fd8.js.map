{"version":3,"file":"install-page-15984ac313a727072fd8.js","sources":["webpack:///./packages/ceph-storage-plugin/src/components/independent-mode/fileUpload.scss?4a10","webpack:///./packages/ceph-storage-plugin/src/components/independent-mode/fileUpload.tsx","webpack:///./packages/ceph-storage-plugin/src/components/independent-mode/install.scss?19cd","webpack:///./packages/ceph-storage-plugin/src/components/independent-mode/install.tsx","webpack:///./packages/ceph-storage-plugin/src/components/independent-mode/utils.ts","webpack:///./packages/ceph-storage-plugin/src/components/ocs-install/create-form.tsx","webpack:///./packages/ceph-storage-plugin/src/components/ocs-install/install-page.scss?b427","webpack:///./packages/ceph-storage-plugin/src/components/ocs-install/install-page.tsx","webpack:///./packages/ceph-storage-plugin/src/components/ocs-install/node-list.tsx","webpack:///./packages/ceph-storage-plugin/src/components/ocs-install/ocs-install.scss?29c8","webpack:///./packages/ceph-storage-plugin/src/utils/install.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport './fileUpload.scss';\n\nconst FileUpload: React.FC<FileUploadProps> = (props) => {\n  const { onUpload } = props;\n\n  return (\n    <div className=\"upload-component\">\n      <div className=\"input-btn\">\n        <Button href=\"#\" variant=\"secondary\" className=\"custom-input-btn\">\n          Browse\n        </Button>\n        <input\n          type=\"file\"\n          id=\"inputButton\"\n          className=\"upload-btn__input\"\n          onChange={onUpload}\n          aria-label=\"Upload File\"\n        />\n      </div>\n    </div>\n  );\n};\n\ntype FileUploadProps = {\n  onUpload: (param: React.ChangeEvent<HTMLInputElement>) => void;\n};\n\nexport default FileUpload;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { match } from 'react-router';\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\nimport { useDispatch } from 'react-redux';\nimport {\n  ButtonBar,\n  withHandlePromise,\n  HandlePromiseProps,\n} from '@console/internal/components/utils';\nimport {\n  k8sGet,\n  k8sCreate,\n  referenceForModel,\n  apiVersionForModel,\n} from '@console/internal/module/k8s';\nimport { ClusterServiceVersionModel } from '@console/operator-lifecycle-manager';\nimport {\n  Title,\n  FormGroup,\n  Form,\n  ActionGroup,\n  Button,\n  TextInput,\n  InputGroup,\n  Alert,\n  TextArea,\n} from '@patternfly/react-core';\nimport { history } from '@console/internal/components/utils/router';\nimport { SecretModel } from '@console/internal/models';\nimport { setFlag } from '@console/internal/actions/features';\nimport { getName } from '@console/shared';\nimport { OCSServiceModel } from '../../models';\nimport FileUpload from './fileUpload';\nimport { isValidJSON, checkError, prettifyJSON } from './utils';\nimport { OCS_INDEPENDENT_FLAG, OCS_FLAG } from '../../features';\nimport { OCS_INDEPENDENT_CR_NAME } from '../../constants';\nimport './install.scss';\n\nconst InstallExternalCluster = withHandlePromise((props: InstallExternalClusterProps) => {\n  const {\n    inProgress,\n    errorMessage,\n    handlePromise,\n    match: {\n      params: { ns, appName },\n    },\n    minRequiredKeys: { configMaps, secrets: encodedKeys, storageClasses },\n    downloadFile,\n  } = props;\n  const [clusterServiceVersion, setClusterServiceVersion] = React.useState(null);\n  const [fileData, setFileData] = React.useState('');\n  const [dataError, setDataError] = React.useState('');\n  const dispatch = useDispatch();\n\n  const plainKeys = _.concat(configMaps, storageClasses);\n\n  // File Upload handler\n  const onUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n    event.preventDefault();\n    const reader = new FileReader();\n    const file = event.target.files[0];\n    reader.onload = (ev) => {\n      const data = ev.target?.result as string;\n      if (isValidJSON(data)) {\n        setDataError(checkError(data, plainKeys, encodedKeys));\n        setFileData(data);\n      } else {\n        setDataError('The uploaded file is not a valid JSON file');\n      }\n    };\n    reader.readAsText(file);\n  };\n\n  const onSubmit = (event) => {\n    event.preventDefault();\n\n    const secret = {\n      apiVersion: SecretModel.apiVersion,\n      kind: SecretModel.kind,\n      metadata: {\n        name: 'rook-ceph-external-cluster-details',\n        namespace: ns,\n      },\n      stringData: {\n        // eslint-disable-next-line @typescript-eslint/camelcase\n        external_cluster_details: fileData,\n      },\n      type: 'Opaque',\n    };\n\n    const ocsObj = {\n      apiVersion: apiVersionForModel(OCSServiceModel),\n      kind: OCSServiceModel.kind,\n      metadata: {\n        name: OCS_INDEPENDENT_CR_NAME,\n        namespace: ns,\n      },\n      spec: {\n        externalStorage: {\n          enable: true,\n        },\n        labelSelector: {\n          matchExpressions: [],\n        },\n      },\n    };\n\n    handlePromise(Promise.all([k8sCreate(SecretModel, secret), k8sCreate(OCSServiceModel, ocsObj)]))\n      .then((data) => {\n        dispatch(setFlag(OCS_INDEPENDENT_FLAG, true));\n        dispatch(setFlag(OCS_FLAG, true));\n        history.push(\n          `/k8s/ns/${ns}/clusterserviceversions/${getName(\n            clusterServiceVersion,\n          )}/${referenceForModel(OCSServiceModel)}/${getName(data[data.length - 1])}`,\n        );\n      })\n      .catch((e) => {\n        // eslint-disable-next-line no-console\n        console.error(e);\n      });\n  };\n\n  const onCancel = () => {\n    history.goBack();\n  };\n\n  React.useEffect(() => {\n    k8sGet(ClusterServiceVersionModel, appName, ns)\n      .then((clusterServiceVersionObj) => {\n        setClusterServiceVersion(clusterServiceVersionObj);\n      })\n      .catch(() => setClusterServiceVersion(null));\n  }, [appName, ns]);\n\n  return (\n    <>\n      <div className=\"im-install-page\">\n        <div className=\"im-install-page__sub-header\">\n          <Title size=\"lg\" headingLevel=\"h5\" className=\"nb-bs-page-title__main\">\n            <div className=\"im-install-page-sub-header__title\">Connect to external cluster</div>\n          </Title>\n          <p className=\"im--light im-install-page--margin-top\">\n            Download <code>ceph-external-cluster-details-exporter.py</code> script and run on the\n            RHCS cluster, then upload the results(JSON) in the External cluster metadata field.{' '}\n            {downloadFile && (\n              <a\n                id=\"downloadAnchorElem\"\n                href={downloadFile}\n                download=\"ceph-external-cluster-details-exporter.py\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"\"\n              >\n                Download Script\n              </a>\n            )}\n          </p>\n          <Alert\n            className=\"co-alert\"\n            variant=\"info\"\n            title=\"A bucket will be created to provide the OCS Service.\"\n            aria-label=\"Bucket created for OCS Service\"\n            isInline\n          />\n        </div>\n        <Form\n          className=\"im-install-page__form\"\n          onSubmit={onSubmit}\n          aria-label=\"Create External Storage Cluster\"\n        >\n          <FormGroup label=\"External cluster metadata\" isRequired fieldId=\"cluster-metadata\">\n            <InputGroup>\n              <TextInput\n                aria-label=\"Upload JSON File\"\n                value=\"Upload Credentials file\"\n                className=\"im-install-page__input-box\"\n                isDisabled\n              />\n              <FileUpload onUpload={onUpload} />\n            </InputGroup>\n          </FormGroup>\n          <FormGroup fieldId=\"preview-box\">\n            <TextArea\n              value={prettifyJSON(fileData)}\n              className=\"im-install-page__text-box\"\n              isValid={!dataError}\n              aria-label=\"JSON data\"\n              disabled\n            />\n          </FormGroup>\n          <ButtonBar errorMessage={dataError || errorMessage} inProgress={inProgress}>\n            <ActionGroup>\n              <Button\n                type=\"submit\"\n                variant=\"primary\"\n                isDisabled={_.isEmpty(fileData) || !_.isEmpty(dataError)}\n                aria-label=\"Create Button\"\n              >\n                Create\n              </Button>\n              <Button onClick={onCancel} variant=\"secondary\" aria-label=\"Cancel\">\n                Cancel\n              </Button>\n            </ActionGroup>\n          </ButtonBar>\n        </Form>\n      </div>\n    </>\n  );\n});\n\ntype InstallExternalClusterProps = HandlePromiseProps & {\n  match: match<{ ns?: string; appName?: string }>;\n  minRequiredKeys?: { [key: string]: string[] };\n  downloadFile: string;\n};\n\nexport default InstallExternalCluster;\n","import * as _ from 'lodash';\nimport { Base64 } from 'js-base64';\nimport { HealthState } from '@console/shared/src/components/dashboard/status-card/states';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { ClusterServiceVersionKind } from '@console/operator-lifecycle-manager';\nimport { getAnnotations } from '@console/shared';\n\nconst pluralize = (count: number, singular: string, plural: string = `${singular}s`): string =>\n  count > 1 ? plural : singular;\n\nexport const isValidJSON = (fData: string): boolean => {\n  try {\n    JSON.parse(fData);\n    return true;\n  } catch (e) {\n    return false;\n  }\n};\n\nexport const createDownloadFile = (data: string): string =>\n  `data:application/octet-stream;charset=utf-8,${encodeURIComponent(Base64.decode(data))}`;\n\nexport const checkError = (\n  data: string = '{}',\n  requiredKeys = [],\n  requiresEncodingKeys = [],\n): string => {\n  const parsedData = JSON.parse(data);\n  const providedKeys = _.map(parsedData, (item) => item.name);\n  const emptyKeys = [];\n  const base64ErrorKeys = [];\n  _.map(parsedData, (item) => {\n    if (_.isEmpty(item.data)) emptyKeys.push(item.name ?? 'Unrecongnized key');\n    if (requiresEncodingKeys.includes(item.name)) {\n      _.isEmpty(item.data?.userKey) &&\n        _.isEmpty(item.data?.adminKey) &&\n        base64ErrorKeys.push(item.name ?? 'Unrecognized key');\n      try {\n        atob(item.data?.userKey ?? item.data?.adminKey);\n      } catch (e) {\n        base64ErrorKeys.push(item.name ?? 'Unrecognized key');\n      }\n    }\n  });\n\n  // Check for missing keys\n  const missingKeys = _.difference(_.concat(requiredKeys, requiresEncodingKeys), providedKeys);\n  if (missingKeys.length > 0 && providedKeys.length > 0) {\n    return `${_.uniq(missingKeys).join(', ')} ${pluralize(\n      _.uniq(missingKeys).length,\n      'is',\n      'are',\n    )} missing.`;\n  }\n\n  if (emptyKeys.length > 0) {\n    return `${_.uniq(emptyKeys).join(', ')} ${pluralize(\n      emptyKeys.length,\n      'has',\n      'have',\n    )} empty ${pluralize(emptyKeys.length, 'value')}.`;\n  }\n\n  if (base64ErrorKeys.length > 0) {\n    return `${_.uniq(base64ErrorKeys).join(', ')} ${pluralize(\n      base64ErrorKeys.length,\n      'key',\n    )} ${pluralize(base64ErrorKeys.length, 'has', 'have')} malformed Base64 encoding ${pluralize(\n      base64ErrorKeys.length,\n      'value',\n    )}.`;\n  }\n  return '';\n};\n\nexport const getRequiredKeys = (csv: ClusterServiceVersionKind): { [key: string]: string[] } => {\n  // external.ocs.openshift.io/validation: '{\"configMaps\":[\"x\", \"y\"], \"secrets\": [\"x\", \"y\", \"z\"], \"storageClasses\": [\"x\"]}'\n  const keys = getAnnotations(csv)?.['external.features.ocs.openshift.io/validation'] ?? '{}';\n  return JSON.parse(keys);\n};\n\nenum ClusterPhase {\n  CONNECTED = 'Connected',\n  READY = 'Ready',\n  CONNECTING = 'Connecting',\n  PROGRESSING = 'Progressing',\n  ERROR = 'Error',\n}\n\nconst PhaseToState = Object.freeze({\n  [ClusterPhase.CONNECTED]: HealthState.OK,\n  [ClusterPhase.READY]: HealthState.OK,\n  [ClusterPhase.CONNECTING]: HealthState.UPDATING,\n  [ClusterPhase.PROGRESSING]: HealthState.UPDATING,\n  [ClusterPhase.ERROR]: HealthState.ERROR,\n});\n\nexport const getClusterHealth = (cluster: K8sResourceKind, loaded: boolean, error): HealthState => {\n  const phase = cluster?.status?.phase;\n  if (!_.isEmpty(error)) {\n    if (error?.response?.status === 404) return HealthState.NOT_AVAILABLE;\n    return HealthState.ERROR;\n  }\n  if (!loaded) return HealthState.LOADING;\n  if (!_.isEmpty(cluster)) return PhaseToState[phase];\n  return HealthState.NOT_AVAILABLE;\n};\n\nexport const prettifyJSON = (data: string) =>\n  _.isEmpty(data)\n    ? ''\n    : (() => {\n        const jsonData = JSON.parse(data);\n        let container = ``;\n        _.map(\n          jsonData,\n          (item) =>\n            (container += `${_.upperCase(item.name ?? 'Unrecognized key')} = ${\n              item.data ? JSON.stringify(item.data) : 'Unrecognized value'\n            }\\n`),\n        );\n        return container;\n      })();\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { match } from 'react-router';\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\nimport { useDispatch } from 'react-redux';\nimport { Alert, ActionGroup, Button, Form, FormGroup } from '@patternfly/react-core';\nimport {\n  NodeKind,\n  k8sPatch,\n  k8sCreate,\n  referenceForModel,\n  StorageClassResourceKind,\n} from '@console/internal/module/k8s';\nimport { ListPage } from '@console/internal/components/factory';\nimport { NodeModel } from '@console/internal/models';\nimport { hasLabel, getName } from '@console/shared';\nimport {\n  withHandlePromise,\n  HandlePromiseProps,\n  history,\n  FieldLevelHelp,\n  ButtonBar,\n} from '@console/internal/components/utils';\nimport { setFlag } from '@console/internal/actions/features';\nimport {\n  ocsRequestData,\n  labelTooltip,\n  minSelectedNode,\n  storageClassTooltip,\n  defaultRequestSize,\n} from '../../constants/ocs-install';\nimport { NO_PROVISIONER } from '../../constants';\nimport { OCSServiceModel } from '../../models';\nimport { OCSStorageClassDropdown } from '../modals/storage-class-dropdown';\nimport { OSDSizeDropdown } from '../../utils/osd-size-dropdown';\nimport { cephStorageLabel } from '../../selectors';\nimport NodeTable from './node-list';\nimport { PVsAvailableCapacity } from './pvs-available-capacity';\nimport { OCS_FLAG, OCS_CONVERGED_FLAG } from '../../features';\nimport './ocs-install.scss';\n\nconst makeLabelNodesRequest = (selectedNodes: NodeKind[]): Promise<NodeKind>[] => {\n  const patch = [\n    {\n      op: 'add',\n      path: '/metadata/labels/cluster.ocs.openshift.io~1openshift-storage',\n      value: '',\n    },\n  ];\n  return _.reduce(\n    selectedNodes,\n    (accumulator, node) => {\n      return hasLabel(node, cephStorageLabel)\n        ? accumulator\n        : [...accumulator, k8sPatch(NodeModel, node, patch)];\n    },\n    [],\n  );\n};\n\nconst makeOCSRequest = (\n  selectedData: NodeKind[],\n  storageClass: StorageClassResourceKind,\n  osdSize: string,\n): Promise<any> => {\n  const promises = makeLabelNodesRequest(selectedData);\n  const ocsObj = _.cloneDeep(ocsRequestData);\n\n  // for baremetal infra\n  if (storageClass?.provisioner === NO_PROVISIONER) {\n    ocsObj.spec.monDataDirHostPath = '/var/lib/rook';\n    ocsObj.spec.storageDeviceSets[0].portable = false;\n  }\n\n  const scName = getName(storageClass);\n  ocsObj.spec.storageDeviceSets[0].dataPVCTemplate.spec.storageClassName = scName;\n  ocsObj.spec.storageDeviceSets[0].dataPVCTemplate.spec.resources.requests.storage = osdSize;\n\n  return Promise.all(promises).then(() => {\n    if (!scName) {\n      throw new Error('No StorageClass selected');\n    }\n    return k8sCreate(OCSServiceModel, ocsObj);\n  });\n};\n\nexport const CreateOCSServiceForm = withHandlePromise<\n  CreateOCSServiceFormProps & HandlePromiseProps\n>((props) => {\n  const {\n    handlePromise,\n    errorMessage,\n    inProgress,\n    match: {\n      params: { appName, ns },\n    },\n  } = props;\n  const [selectedNodes, setSelectedNodes] = React.useState<NodeKind[]>(null);\n  const [visibleRows, setVisibleRows] = React.useState<NodeKind[]>(null);\n  const [osdSize, setOSDSize] = React.useState(defaultRequestSize.NON_BAREMETAL);\n  const [storageClass, setStorageClass] = React.useState<StorageClassResourceKind>(null);\n  const dispatch = useDispatch();\n\n  const submit = (event: React.MouseEvent<HTMLButtonElement>) => {\n    event.preventDefault();\n    // eslint-disable-next-line promise/catch-or-return\n    handlePromise(makeOCSRequest(selectedNodes, storageClass, osdSize)).then(() => {\n      dispatch(setFlag(OCS_CONVERGED_FLAG, true));\n      dispatch(setFlag(OCS_FLAG, true));\n      history.push(\n        `/k8s/ns/${ns}/clusterserviceversions/${appName}/${referenceForModel(\n          OCSServiceModel,\n        )}/${getName(ocsRequestData)}`,\n      );\n    });\n  };\n\n  const handleStorageClass = (sc: StorageClassResourceKind) => {\n    setStorageClass(sc);\n    const provisioner: string = sc?.provisioner; // required if user selects 'No Default Storage Class' option\n\n    if (provisioner === NO_PROVISIONER) {\n      setOSDSize(defaultRequestSize.BAREMETAL); // for baremetal environment, set requested capacity as 1 Byte\n    } else {\n      setOSDSize(defaultRequestSize.NON_BAREMETAL);\n    }\n  };\n\n  return (\n    <Form className=\"co-m-pane__body-group\">\n      <FormGroup fieldId=\"select-nodes\" label=\"Nodes\">\n        <p>\n          Selected nodes will be labeled with{' '}\n          <code>cluster.ocs.openshift.io/openshift-storage=&quot;&quot;</code> to create the OCS\n          Service unless they are already labeled.\n        </p>\n        <Alert\n          className=\"co-alert\"\n          variant=\"info\"\n          title=\"A bucket will be created to provide the OCS Service.\"\n          isInline\n        />\n        <p className=\"co-legend\" data-test-id=\"warning\">\n          Select at least 3 nodes in different failure domains with minimum requirements of 16 CPUs\n          and 64 GiB of RAM per node.\n        </p>\n        <p>\n          3 selected nodes are used for initial deployment. The remaining selected nodes will be\n          used by OpenShift as scheduling targets for OCS scaling.\n        </p>\n        <ListPage\n          kind={NodeModel.kind}\n          showTitle={false}\n          ListComponent={NodeTable}\n          customData={{ selectedNodes, setSelectedNodes, visibleRows, setVisibleRows }}\n        />\n      </FormGroup>\n      <FormGroup\n        fieldId=\"select-sc\"\n        label={\n          <>\n            Storage Class\n            <FieldLevelHelp>{storageClassTooltip}</FieldLevelHelp>\n          </>\n        }\n      >\n        <div className=\"ceph-ocs-install__ocs-service-capacity--dropdown\">\n          <OCSStorageClassDropdown onChange={handleStorageClass} data-test-id=\"ocs-dropdown\" />\n        </div>\n        {storageClass?.provisioner === NO_PROVISIONER && (\n          <PVsAvailableCapacity\n            replica={ocsRequestData.spec.storageDeviceSets[0].replica}\n            data-test-id=\"ceph-ocs-install-pvs-available-capacity\"\n            sc={storageClass}\n          />\n        )}\n      </FormGroup>\n      {storageClass?.provisioner !== NO_PROVISIONER && (\n        <FormGroup\n          fieldId=\"select-osd-size\"\n          label={\n            <>\n              OCS Service Capacity\n              <FieldLevelHelp>{labelTooltip}</FieldLevelHelp>\n            </>\n          }\n        >\n          <OSDSizeDropdown\n            className=\"ceph-ocs-install__ocs-service-capacity--dropdown\"\n            selectedKey={osdSize}\n            onChange={setOSDSize}\n            data-test-id=\"osd-dropdown\"\n          />\n        </FormGroup>\n      )}\n      <ButtonBar errorMessage={errorMessage} inProgress={inProgress}>\n        <ActionGroup className=\"pf-c-form\">\n          <Button\n            type=\"button\"\n            variant=\"primary\"\n            onClick={submit}\n            isDisabled={(selectedNodes?.length ?? 0) < minSelectedNode}\n          >\n            Create\n          </Button>\n          <Button type=\"button\" variant=\"secondary\" onClick={history.goBack}>\n            Cancel\n          </Button>\n        </ActionGroup>\n      </ButtonBar>\n    </Form>\n  );\n});\n\ntype CreateOCSServiceFormProps = {\n  match: match<{ appName: string; ns: string }>;\n};\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { match } from 'react-router';\nimport { k8sGet } from '@console/internal/module/k8s';\nimport { ClusterServiceVersionModel } from '@console/operator-lifecycle-manager';\nimport { BreadCrumbs } from '@console/internal/components/utils';\nimport { getAnnotations } from '@console/shared/src/selectors/common';\nimport { Radio, Title } from '@patternfly/react-core';\nimport { getRequiredKeys, createDownloadFile } from '../independent-mode/utils';\nimport { OCSServiceModel } from '../../models';\nimport InstallExternalCluster from '../independent-mode/install';\nimport { CreateOCSServiceForm } from './create-form';\nimport { OCS_SUPPORT_ANNOTATION } from '../../constants';\nimport './install-page.scss';\n\nenum MODES {\n  CONVERGED = 'Converged',\n  INDEPENDENT = 'Independent',\n}\n\n// eslint-disable-next-line no-shadow\nconst InstallCluster: React.FC<InstallClusterProps> = ({ match }) => {\n  const {\n    params: { ns, appName },\n    url,\n  } = match;\n\n  const [isIndependent, setIsIndependent] = React.useState(false);\n  const [independentReqdKeys, setIndependentReqdKeys] = React.useState<{ [key: string]: string[] }>(\n    null,\n  );\n  const [downloadFile, setDownloadFile] = React.useState(null);\n  const [mode, setMode] = React.useState(MODES.CONVERGED);\n  const [clusterServiceVersion, setClusterServiceVersion] = React.useState(null);\n\n  const handleModeChange = (_checked: boolean, event: React.FormEvent<HTMLInputElement>) => {\n    const { value } = event.currentTarget;\n    setMode(value as MODES);\n  };\n\n  React.useEffect(() => {\n    k8sGet(ClusterServiceVersionModel, appName, ns)\n      .then((clusterServiceVersionObj) => {\n        const isIndependentSupported = getAnnotations(clusterServiceVersionObj)[\n          OCS_SUPPORT_ANNOTATION\n        ].includes('external');\n        if (isIndependentSupported) {\n          setIsIndependent(true);\n          const { configMaps = [], secrets = [], storageClasses = [] } = getRequiredKeys(\n            clusterServiceVersionObj,\n          );\n          setIndependentReqdKeys({ configMaps, secrets, storageClasses });\n          setDownloadFile(\n            createDownloadFile(\n              getAnnotations(clusterServiceVersionObj)?.[\n                'external.features.ocs.openshift.io/export-script'\n              ],\n            ),\n          );\n        }\n\n        try {\n          setClusterServiceVersion(clusterServiceVersionObj);\n        } catch (e) {\n          setClusterServiceVersion(null);\n        }\n      })\n      .catch(() => setClusterServiceVersion(null));\n  }, [appName, ns]);\n\n  return (\n    <>\n      <div className=\"co-create-operand__header\">\n        <div className=\"co-create-operand__header-buttons\">\n          {clusterServiceVersion !== null && (\n            <BreadCrumbs\n              breadcrumbs={[\n                {\n                  name: clusterServiceVersion.spec.displayName,\n                  path: url.replace('/~new', ''),\n                },\n                { name: `Create ${OCSServiceModel.label}`, path: url },\n              ]}\n            />\n          )}\n        </div>\n        <h1 className=\"co-create-operand__header-text\">Create Storage Cluster</h1>\n        <p className=\"help-block\">\n          OCS runs as a cloud-native service for optimal integration with applications in need of\n          storage, and handles the scenes such as provisioning and management.\n        </p>\n      </div>\n\n      <div className=\"co-m-pane__body co-m-pane__form\">\n        {isIndependent && (\n          <div className=\"ceph-install__select-mode\">\n            <Title headingLevel=\"h5\" size=\"lg\" className=\"ceph-install-select-mode__title\">\n              Select Mode\n            </Title>\n            <div className=\"ceph-install-select-mode\">\n              <Radio\n                value={MODES.CONVERGED}\n                isChecked={mode === MODES.CONVERGED}\n                onChange={handleModeChange}\n                id=\"radio-1\"\n                className=\"ceph-install--no-margin\"\n                label=\"Internal\"\n                name=\"converged-mode\"\n              />\n            </div>\n            <div className=\"ceph-install-select-mode\">\n              <Radio\n                value={MODES.INDEPENDENT}\n                isChecked={mode === MODES.INDEPENDENT}\n                onChange={handleModeChange}\n                id=\"radio-2\"\n                label=\"External\"\n                name=\"independent-mode\"\n                className=\"ceph-install--no-margin\"\n              />\n            </div>\n          </div>\n        )}\n        {(isIndependent === false || mode === MODES.CONVERGED) && (\n          <CreateOCSServiceForm match={match} />\n        )}\n        {mode === MODES.INDEPENDENT && (\n          <InstallExternalCluster\n            match={match}\n            minRequiredKeys={independentReqdKeys}\n            downloadFile={downloadFile}\n          />\n        )}\n      </div>\n    </>\n  );\n};\n\nexport default InstallCluster;\n\ntype InstallClusterProps = {\n  match: match<{ ns: string; appName: string }>;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport * as classNames from 'classnames';\nimport {\n  getName,\n  getNodeRoles,\n  getNodeCPUCapacity,\n  getNodeAllocatableMemory,\n  hasLabel,\n} from '@console/shared';\nimport { humanizeCpuCores, ResourceLink, pluralize } from '@console/internal/components/utils/';\nimport { NodeKind } from '@console/internal/module/k8s';\nimport { Table } from '@console/internal/components/factory';\nimport { IRow, OnSelect } from '@patternfly/react-table';\nimport { hasOCSTaint, hasTaints, getConvertedUnits } from '../../utils/install';\nimport { cephStorageLabel } from '../../selectors';\nimport './ocs-install.scss';\n\nconst tableColumnClasses = [\n  classNames('col-md-1', 'col-sm-1', 'col-xs-1'),\n  classNames('col-md-4', 'col-sm-8', 'col-xs-11'),\n  classNames('col-md-2', 'col-sm-3', 'hidden-xs'),\n  classNames('col-md-2', 'hidden-sm', 'hidden-xs'),\n  classNames('col-md-1', 'hidden-sm', 'hidden-xs'),\n  classNames('col-md-2', 'hidden-sm', 'hidden-xs'),\n];\n\nconst getColumns = () => {\n  return [\n    {\n      title: 'Name',\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Role',\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Location',\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: 'CPU',\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: 'Memory',\n      props: { className: tableColumnClasses[5] },\n    },\n  ];\n};\n\nconst getSelected = (selected: NodeKind[], nodeUID: string) =>\n  selected.map((node) => node.metadata.uid).includes(nodeUID);\n\ntype GetRows = ({\n  componentProps,\n  customData,\n}: {\n  componentProps: { data: NodeKind[] };\n  customData: {\n    selectedNodes: NodeKind[];\n    setSelectedNodes: React.Dispatch<React.SetStateAction<NodeKind[]>>;\n    visibleRows: NodeKind[];\n    setVisibleRows: React.Dispatch<React.SetStateAction<NodeKind[]>>;\n  };\n}) => NodeTableRow[];\n\nconst getRows: GetRows = ({ componentProps, customData }) => {\n  const { data } = componentProps;\n  const { selectedNodes, setSelectedNodes, setVisibleRows, visibleRows } = customData;\n\n  const filteredData = data.filter((node: NodeKind) => hasOCSTaint(node) || !hasTaints(node));\n\n  const rows = filteredData.map((node: NodeKind) => {\n    const roles = getNodeRoles(node).sort();\n    const cpuSpec: string = getNodeCPUCapacity(node);\n    const memSpec: string = getNodeAllocatableMemory(node);\n    const cells: IRow['cells'] = [\n      {\n        title: <ResourceLink kind=\"Node\" name={getName(node)} title={node.metadata.uid} />,\n      },\n      {\n        title: roles.join(', ') || '-',\n      },\n      {\n        title: node.metadata.labels?.['failure-domain.beta.kubernetes.io/zone'] || '-',\n      },\n      {\n        title: `${humanizeCpuCores(cpuSpec).string || '-'}`,\n      },\n      {\n        title: `${getConvertedUnits(memSpec)}`,\n      },\n    ];\n    return {\n      cells,\n      selected: _.isArray(selectedNodes)\n        ? getSelected(selectedNodes, node.metadata.uid)\n        : hasLabel(node, cephStorageLabel),\n      props: {\n        id: node.metadata.uid,\n      },\n    };\n  });\n\n  if (!_.isEqual(filteredData, visibleRows)) {\n    setVisibleRows(filteredData);\n    if (!selectedNodes && filteredData.length) {\n      const preSelected = filteredData.filter((row) => hasLabel(row, cephStorageLabel));\n      setSelectedNodes(preSelected);\n    }\n  }\n  return rows;\n};\n\nconst NodeTable: React.FC<NodeTableProps> = (props) => {\n  const { selectedNodes, setSelectedNodes, visibleRows } = props.customData;\n\n  const onSelect: OnSelect = (_event, isSelected, rowIndex, rowData) => {\n    const selectedUIDs = selectedNodes?.map((node) => node.metadata.uid) ?? [];\n    const visibleUIDs = visibleRows?.map((row) => row.metadata.uid);\n    if (rowIndex === -1) {\n      if (isSelected) {\n        const uniqueUIDs = _.uniq([...visibleUIDs, ...selectedUIDs]);\n        setSelectedNodes(\n          _.uniqBy(\n            [...visibleRows, ...selectedNodes].filter((node) =>\n              uniqueUIDs.includes(node.metadata.uid),\n            ),\n            (n) => n.metadata.uid,\n          ),\n        );\n      } else {\n        setSelectedNodes(\n          _.uniqBy(\n            selectedNodes.filter((node) => !visibleUIDs.includes(node.metadata.uid)),\n            (n) => n.metadata.uid,\n          ),\n        );\n      }\n    } else {\n      const uniqueUIDs = _.xor(selectedUIDs, [rowData.props.id]);\n      const data = _.uniqBy(\n        [...visibleRows, ...selectedNodes].filter((node) => uniqueUIDs.includes(node.metadata.uid)),\n        (n) => n.metadata.uid,\n      );\n      setSelectedNodes(data);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"ceph-node-list__max-height\">\n        <Table\n          aria-label=\"Node Table\"\n          data-test-id=\"select-nodes-table\"\n          {...props}\n          Rows={getRows}\n          Header={getColumns}\n          virtualize={false}\n          onSelect={onSelect}\n        />\n      </div>\n      <p className=\"control-label help-block\" data-test-id=\"nodes-selected\">\n        {`${pluralize(selectedNodes?.length || 0, 'node')} selected`}\n      </p>\n    </>\n  );\n};\n\nexport default NodeTable;\n\ntype NodeTableProps = {\n  data: NodeKind[];\n  customData: {\n    selectedNodes: NodeKind[];\n    setSelectedNodes: React.Dispatch<React.SetStateAction<NodeKind[]>>;\n    visibleRows: NodeKind[];\n    setVisibleRows: React.Dispatch<React.SetStateAction<NodeKind[]>>;\n  };\n  filters: { name: string; label: { all: string[] } };\n};\n\ntype NodeTableRow = {\n  cells: IRow['cells'];\n  props: {\n    id: string;\n  };\n  selected: boolean;\n};\n","// extracted by mini-css-extract-plugin","import * as _ from 'lodash';\nimport { NodeKind, Taint } from '@console/internal/module/k8s';\nimport { ocsTaint } from '../constants/ocs-install';\nimport { humanizeBinaryBytes, convertToBaseValue } from '@console/internal/components/utils';\n\nexport const hasTaints = (node: NodeKind) => {\n  return !_.isEmpty(node.spec?.taints);\n};\n\nexport const hasOCSTaint = (node: NodeKind) => {\n  const taints: Taint[] = node.spec?.taints || [];\n  return taints.some((taint: Taint) => _.isEqual(taint, ocsTaint));\n};\n\nexport const getConvertedUnits = (value: string) => {\n  return humanizeBinaryBytes(convertToBaseValue(value)).string ?? '-';\n};\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAGA;AAUA;AAMA;;;;;;;;;;;;AC7BA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAKA;AAMA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAUA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;;AACA;;AACA;AACA;AAaA;AAQA;AAKA;AACA;AACA;AAMA;AAGA;AACA;AAQA;AACA;AACA;AAQA;AASA;AAQA;;;;;;;;;;;;;AC5NA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAGA;AAKA;AACA;AACA;AACA;AACA;;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AAEA;AACA;AAKA;AAEA;AACA;AAOA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;AAGA;AAEA;AAEA;AACA;;;;;;;;;;;;;AC1HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAOA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAGA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAGA;AAQA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;;AACA;AACA;AAEA;AACA;AAMA;AAIA;AAIA;AAOA;;AAKA;AAIA;AACA;AAEA;AAQA;;AAMA;AAIA;AAQA;AACA;AACA;AAQA;AAOA;;;;;;;;;;;;ACrNA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;;AACA;AAGA;AACA;AACA;AAGA;AACA;AAOA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAMA;AACA;AAEA;AAGA;AACA;AAUA;AACA;AAYA;AAGA;AAUA;AAEA;;;;;;;;;;;;;ACzIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAOA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAgBA;AACA;AACA;AAEA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAAA;AACA;AAMA;AACA;AAAA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AAUA;AAKA;AAEA;;;;;;;;;;;;AC3KA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;;AACA;AACA;AAEA;;AACA;AACA;AACA;AAEA;;AACA;AACA;;;;;A","sourceRoot":""}