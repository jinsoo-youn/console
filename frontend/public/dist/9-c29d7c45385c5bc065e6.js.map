{"version":3,"file":"9-c29d7c45385c5bc065e6.js","sources":["webpack:///./public/components/edit-yaml.jsx"],"sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { safeLoad, safeDump } from 'js-yaml';\nimport { saveAs } from 'file-saver';\nimport { connect } from 'react-redux';\nimport { ActionGroup, Alert, Button, Split, SplitItem } from '@patternfly/react-core';\nimport { DownloadIcon, InfoCircleIcon } from '@patternfly/react-icons';\n\nimport { FLAGS, ALL_NAMESPACES_KEY, getBadgeFromType } from '@console/shared';\n\nimport { connectToFlags } from '../reducers/features';\nimport { errorModal } from './modals';\nimport { Firehose, checkAccess, history, Loading, resourceObjPath } from './utils';\nimport {\n  referenceForModel,\n  k8sCreate,\n  k8sUpdate,\n  referenceFor,\n  groupVersionFor,\n} from '../module/k8s';\nimport { ConsoleYAMLSampleModel } from '../models';\nimport { getResourceSidebarSamples } from './sidebars/resource-sidebar-samples';\nimport { ResourceSidebar } from './sidebars/resource-sidebar';\nimport { yamlTemplates } from '../models/yaml-templates';\n\nimport { definitionFor } from '../module/k8s/swagger';\nimport YAMLEditor from '@console/shared/src/components/editor/YAMLEditor';\nimport { withTranslation } from 'react-i18next';\n\nconst generateObjToLoad = (kind, id, yaml, namespace = 'default') => {\n  const sampleObj = safeLoad(yaml ? yaml : yamlTemplates.getIn([kind, id]));\n  if (_.has(sampleObj.metadata, 'namespace')) {\n    sampleObj.metadata.namespace = namespace;\n  }\n  return sampleObj;\n};\n\nconst stateToProps = ({ k8s, UI }) => ({\n  activeNamespace: UI.get('activeNamespace'),\n  impersonate: UI.get('impersonate'),\n  models: k8s.getIn(['RESOURCES', 'models']),\n});\n\n/**\n * This component loads the entire Monaco editor library with it.\n * Consider using `AsyncComponent` to dynamically load this component when needed.\n */\n/** @augments {React.Component<{obj?: any, create: boolean, kind: string, redirectURL?: string, resourceObjPath?: (obj: K8sResourceKind, objRef: string) => string}, onChange?: (yaml: string) => void>} */\nexport const EditYAML_ = connect(stateToProps)(\n  class EditYAML extends React.Component {\n    constructor(props) {\n      super(props);\n      this.state = {\n        error: null,\n        success: null,\n        height: 500,\n        initialized: false,\n        stale: false,\n        sampleObj: props.sampleObj,\n        fileUpload: props.fileUpload,\n        showSidebar: !!props.create,\n      };\n      this.monacoRef = React.createRef();\n      // k8s uses strings for resource versions\n      this.displayedVersion = '0';\n      // Default cancel action is browser back navigation\n      this.onCancel = 'onCancel' in props ? props.onCancel : history.goBack;\n      this.downloadSampleYaml_ = this.downloadSampleYaml_.bind(this);\n\n      if (this.props.error) {\n        this.handleError(this.props.error);\n      }\n    }\n\n    getModel(obj) {\n      if (_.isEmpty(obj)) {\n        return null;\n      }\n      const { models } = this.props;\n      return models.get(referenceFor(obj)) || models.get(obj.kind);\n    }\n\n    handleError(error) {\n      this.setState({ error, success: null });\n    }\n\n    componentDidMount() {\n      this.loadYaml();\n    }\n\n    UNSAFE_componentWillReceiveProps(nextProps) {\n      if (nextProps.isOver) {\n        return;\n      }\n      const newVersion = _.get(nextProps.obj, 'metadata.resourceVersion');\n      const stale = this.displayedVersion !== newVersion;\n      this.setState({ stale });\n      if (nextProps.error) {\n        this.handleError(nextProps.error);\n      } else if (this.state.error) {\n        //clear stale error state\n        this.setState({ error: '' });\n      }\n      if (nextProps.sampleObj) {\n        this.loadYaml(!_.isEqual(this.state.sampleObj, nextProps.sampleObj), nextProps.sampleObj);\n      } else if (nextProps.fileUpload) {\n        this.loadYaml(\n          !_.isEqual(this.state.fileUpload, nextProps.fileUpload),\n          nextProps.fileUpload,\n        );\n      } else {\n        this.loadYaml();\n      }\n    }\n\n    reload() {\n      this.loadYaml(true);\n      this.setState({\n        sampleObj: null,\n        error: null,\n        success: null,\n      });\n    }\n\n    checkEditAccess(obj) {\n      const { readOnly, impersonate } = this.props;\n      if (readOnly) {\n        // We're already read-only. No need for the access review.\n        return;\n      }\n\n      const model = this.getModel(obj);\n      if (!model) {\n        return;\n      }\n\n      const { name, namespace } = obj.metadata;\n      const resourceAttributes = {\n        group: model.apiGroup,\n        resource: model.plural,\n        verb: 'update',\n        name,\n        namespace,\n      };\n      checkAccess(resourceAttributes, impersonate).then((resp) => {\n        const notAllowed = !resp.status.allowed;\n        this.setState({ notAllowed });\n        if (this.monacoRef.current) {\n          this.monacoRef.current.editor.updateOptions({ readOnly: notAllowed });\n        }\n      });\n    }\n\n    convertObjToYAMLString(obj) {\n      let yaml = '';\n      if (obj) {\n        if (_.isString(obj)) {\n          yaml = obj;\n        } else {\n          try {\n            yaml = safeDump(obj);\n            this.checkEditAccess(obj);\n          } catch (e) {\n            yaml = `Error getting YAML: ${e}`;\n          }\n        }\n      }\n\n      return yaml;\n    }\n\n    loadYaml(reload = false, obj = this.props.obj) {\n      if (this.state.initialized && !reload) {\n        return;\n      }\n\n      const yaml = this.convertObjToYAMLString(obj);\n\n      this.displayedVersion = _.get(obj, 'metadata.resourceVersion');\n      this.setState({ yaml, initialized: true, stale: false });\n    }\n\n    addToYAML(id, obj) {\n      const yaml = this.convertObjToYAMLString(obj);\n\n      const selection = this.monacoRef.current.editor.getSelection();\n      const range = new window.monaco.Range(\n        selection.startLineNumber,\n        selection.startColumn,\n        selection.endLineNumber,\n        selection.endColumn,\n      );\n\n      // Grab the current position and indent every row to left-align the text at the same indentation\n      const indentSize = new Array(selection.startColumn).join(' ');\n      const lines = yaml.split('\\n');\n      const lineCount = lines.length;\n      const indentedText = lines\n        .map((line, i) => {\n          if (i === 0) {\n            // Already indented, leave it alone\n            return line;\n          }\n          return `${indentSize}${line}`;\n        })\n        .join('\\n');\n\n      // Grab the selection size of what we are about to add\n      const newContentSelection = new window.monaco.Selection(\n        selection.startLineNumber,\n        0,\n        selection.startLineNumber + lineCount - 1,\n        lines[lines.length - 1].length,\n      );\n\n      const op = { range, text: indentedText, forceMoveMarkers: true };\n      this.monacoRef.current.editor.executeEdits(id, [op], [newContentSelection]);\n      this.monacoRef.current.editor.focus();\n\n      this.displayedVersion = _.get(obj, 'metadata.resourceVersion');\n      this.setState({ yaml: this.monacoRef.current.editor.getValue() });\n    }\n\n    getEditor() {\n      return this.monacoRef.current.editor;\n    }\n\n    save() {\n      const { onSave } = this.props;\n      let obj;\n\n      if (onSave) {\n        onSave(this.getEditor().getValue());\n        return;\n      }\n\n      try {\n        obj = safeLoad(this.getEditor().getValue());\n      } catch (e) {\n        this.handleError(`Error parsing YAML: ${e}`);\n        return;\n      }\n\n      if (!obj.apiVersion) {\n        this.handleError('No \"apiVersion\" field found in YAML.');\n        return;\n      }\n\n      if (!obj.kind) {\n        this.handleError('No \"kind\" field found in YAML.');\n        return;\n      }\n\n      const model = this.getModel(obj);\n      if (!model) {\n        this.handleError(\n          `The server doesn't have a resource type \"kind: ${obj.kind}, apiVersion: ${obj.apiVersion}\".`,\n        );\n        return;\n      }\n\n      if (!obj.metadata) {\n        this.handleError('No \"metadata\" field found in YAML.');\n        return;\n      }\n\n      // If this is a namespaced resource, default to the active namespace when none is specified in the YAML.\n      if (!obj.metadata.namespace && model.namespaced) {\n        if (this.props.activeNamespace === ALL_NAMESPACES_KEY) {\n          this.handleError('No \"metadata.namespace\" field found in YAML.');\n          return;\n        }\n        obj.metadata.namespace = this.props.activeNamespace;\n      }\n\n      const { namespace: newNamespace, name: newName } = obj.metadata;\n\n      if (!this.props.create && this.props.obj) {\n        const { namespace, name } = this.props.obj.metadata;\n\n        if (name !== newName) {\n          this.handleError(\n            `Cannot change resource name (original: \"${name}\", updated: \"${newName}\").`,\n          );\n          return;\n        }\n        if (namespace !== newNamespace) {\n          this.handleError(\n            `Cannot change resource namespace (original: \"${namespace}\", updated: \"${newNamespace}\").`,\n          );\n          return;\n        }\n        if (this.props.obj.kind !== obj.kind) {\n          this.handleError(\n            `Cannot change resource kind (original: \"${this.props.obj.kind}\", updated: \"${obj.kind}\").`,\n          );\n          return;\n        }\n\n        const apiGroup = groupVersionFor(this.props.obj.apiVersion).group;\n        const newAPIGroup = groupVersionFor(obj.apiVersion).group;\n        if (apiGroup !== newAPIGroup) {\n          this.handleError(\n            `Cannot change API group (original: \"${apiGroup}\", updated: \"${newAPIGroup}\").`,\n          );\n          return;\n        }\n      }\n\n      this.setState({ success: null, error: null }, () => {\n        let action = k8sUpdate;\n        let redirect = false;\n        if (this.props.create) {\n          action = k8sCreate;\n          delete obj.metadata.resourceVersion;\n          redirect = true;\n        }\n        action(model, obj, newNamespace, newName)\n          .then((o) => {\n            if (redirect) {\n              let url = this.props.redirectURL;\n              if (!url) {\n                const path = _.isFunction(this.props.resourceObjPath)\n                  ? this.props.resourceObjPath\n                  : resourceObjPath;\n                url = path(o, referenceFor(o));\n              }\n              history.push(url);\n              // TODO: (ggreer). show message on new page. maybe delete old obj?\n              return;\n            }\n            const success = `${newName} has been updated to version ${o.metadata.resourceVersion}`;\n            this.setState({ success, error: null });\n            this.loadYaml(true, o);\n          })\n          .catch((e) => this.handleError(e.message));\n      });\n    }\n\n    download(data = this.getEditor().getValue()) {\n      const blob = new Blob([data], { type: 'text/yaml;charset=utf-8' });\n      let filename = 'k8s-object.yaml';\n      try {\n        const obj = safeLoad(data);\n        if (obj.kind) {\n          filename = `${obj.kind.toLowerCase()}-${obj.metadata.name}.yaml`;\n        }\n      } catch (unused) {\n        // unused\n      }\n      saveAs(blob, filename);\n    }\n\n    getYamlContent_(id = 'default', yaml = '', kind = referenceForModel(this.props.model)) {\n      try {\n        const sampleObj = generateObjToLoad(kind, id, yaml, this.props.obj.metadata.namespace);\n        this.setState({ sampleObj });\n        return sampleObj;\n      } catch (error) {\n        errorModal({\n          title: 'Failed to Parse YAML Sample',\n          error: (\n            <div className=\"co-pre-line\">{error.message || error.name || 'An error occurred.'}</div>\n          ),\n        });\n      }\n    }\n\n    insertYamlContent_ = (id, yaml, kind) => {\n      const content = this.getYamlContent_(id, yaml, kind);\n      this.addToYAML(id, content);\n    };\n\n    replaceYamlContent_ = (id, yaml, kind) => {\n      const content = this.getYamlContent_(id, yaml, kind);\n      this.loadYaml(true, content);\n    };\n\n    downloadSampleYaml_(id = 'default', yaml = '', kind = referenceForModel(this.props.model)) {\n      try {\n        const sampleObj = generateObjToLoad(kind, id, yaml, this.props.obj.metadata.namespace);\n        const data = safeDump(sampleObj);\n        this.download(data);\n      } catch (e) {\n        this.download(yaml);\n      }\n    }\n\n    toggleSidebar = () => {\n      this.setState((state) => {\n        return { showSidebar: !state.showSidebar };\n      });\n      window.dispatchEvent(new Event('sidebar_toggle'));\n    };\n\n    render() {\n      if (!this.props.create && !this.props.obj) {\n        return <Loading />;\n      }\n\n      const {\n        connectDropTarget,\n        isOver,\n        canDrop,\n        create,\n        yamlSamplesList,\n        customClass,\n        onChange = () => null,\n        t,\n      } = this.props;\n      const klass = classNames('co-file-dropzone-container', {\n        'co-file-dropzone--drop-over': isOver,\n      });\n\n      const { error, success, stale, yaml, showSidebar } = this.state;\n      const {\n        obj,\n        download = true,\n        header,\n        genericYAML = false,\n        children: customAlerts,\n      } = this.props;\n      const readOnly = this.props.readOnly || this.state.notAllowed;\n      const options = { readOnly, scrollBeyondLastLine: false };\n      const model = this.getModel(obj);\n      const { samples, snippets } = model\n        ? getResourceSidebarSamples(model, yamlSamplesList)\n        : { samples: [], snippets: [] };\n      const definition = model ? definitionFor(model) : { properties: [] };\n      const showSchema = definition && !_.isEmpty(definition.properties);\n      const hasSidebarContent = showSchema || !_.isEmpty(samples) || !_.isEmpty(snippets);\n      const sidebarLink =\n        !showSidebar && hasSidebarContent ? (\n          <Button type=\"button\" variant=\"link\" isInline onClick={this.toggleSidebar}>\n            <InfoCircleIcon className=\"co-icon-space-r co-p-has-sidebar__sidebar-link-icon\" />\n            {t('COMMON:MSG_COMMON_BUTTON_ETC_11')}\n          </Button>\n        ) : null;\n\n      const editYamlComponent = (\n        <div className=\"co-file-dropzone co-file-dropzone__flex\">\n          {canDrop && (\n            <div className={klass}>\n              <p className=\"co-file-dropzone__drop-text\">Drop file here</p>\n            </div>\n          )}\n\n          {create && !this.props.hideHeader && (\n            <div className=\"yaml-editor__header\">\n              <Split>\n                <SplitItem isFilled>\n                  <h1 className=\"yaml-editor__header-text\">{header}</h1>\n                </SplitItem>\n                <SplitItem>{getBadgeFromType(model && model.badge)}</SplitItem>\n              </Split>\n              <p className=\"help-block\">\n                {t('COMMON:MSG_CREATEYAML_DIV1_DESCRIPTION_1')}\n              </p>\n            </div>\n          )}\n\n          <div className=\"pf-c-form co-m-page__body\">\n            <div className=\"co-p-has-sidebar\">\n              <div className=\"co-p-has-sidebar__body\">\n                <div\n                  className={classNames('yaml-editor', customClass)}\n                  ref={(r) => (this.editor = r)}\n                >\n                  <YAMLEditor\n                    ref={this.monacoRef}\n                    value={yaml}\n                    options={options}\n                    showShortcuts={!genericYAML}\n                    minHeight=\"100px\"\n                    toolbarLinks={sidebarLink ? [sidebarLink] : []}\n                    onChange={(newValue) =>\n                      this.setState({ yaml: newValue }, () => onChange(newValue))\n                    }\n                    onSave={() => this.save()}\n                  />\n                  <div className=\"yaml-editor__buttons\" ref={(r) => (this.buttons = r)}>\n                    {customAlerts}\n                    {error && (\n                      <Alert\n                        isInline\n                        className=\"co-alert co-alert--scrollable\"\n                        variant=\"danger\"\n                        title=\"An error occurred\"\n                      >\n                        <div className=\"co-pre-line\">{error}</div>\n                      </Alert>\n                    )}\n                    {success && (\n                      <Alert isInline className=\"co-alert\" variant=\"success\" title={success} />\n                    )}\n                    {stale && (\n                      <Alert\n                        isInline\n                        className=\"co-alert\"\n                        variant=\"info\"\n                        title=\"This object has been updated.\"\n                      >\n                        Click reload to see the new version.\n                      </Alert>\n                    )}\n                    <ActionGroup className=\"pf-c-form__group--no-top-margin\">\n                      {create && (\n                        <Button\n                          type=\"submit\"\n                          variant=\"primary\"\n                          id=\"save-changes\"\n                          onClick={() => this.save()}\n                        >\n                          {t('COMMON:MSG_COMMON_BUTTON_ETC_9')}\n                        </Button>\n                      )}\n                      {!create && !readOnly && (\n                        <Button\n                          type=\"submit\"\n                          variant=\"primary\"\n                          id=\"save-changes\"\n                          onClick={() => this.save()}\n                        >\n                        {t('COMMON:MSG_COMMON_BUTTON_COMMIT_3')}\n                        </Button>\n                      )}\n                      {!create && !genericYAML && (\n                        <Button\n                          type=\"submit\"\n                          variant=\"secondary\"\n                          id=\"reload-object\"\n                          onClick={() => this.reload()}\n                        >\n                        {t('COMMON:MSG_COMMON_BUTTON_ETC_13')}\n                        </Button>\n                      )}\n                      <Button variant=\"secondary\" id=\"cancel\" onClick={() => this.onCancel()}>\n                        {t('COMMON:MSG_COMMON_BUTTON_COMMIT_2')}\n                      </Button>\n                      {download && (\n                        <Button\n                          type=\"submit\"\n                          variant=\"secondary\"\n                          className=\"pf-c-button--align-right hidden-sm hidden-xs\"\n                          onClick={() => this.download()}\n                        >\n                          <DownloadIcon /> {t('COMMON:MSG_COMMON_BUTTON_ETC_12')}\n                        </Button>\n                      )}\n                    </ActionGroup>\n                  </div>\n                </div>\n              </div>\n              {hasSidebarContent && (\n                <ResourceSidebar\n                  isCreateMode={create}\n                  kindObj={model}\n                  loadSampleYaml={this.replaceYamlContent_}\n                  insertSnippetYaml={this.insertYamlContent_}\n                  downloadSampleYaml={this.downloadSampleYaml_}\n                  showSidebar={showSidebar}\n                  toggleSidebar={this.toggleSidebar}\n                  samples={samples}\n                  snippets={snippets}\n                  showSchema={showSchema}\n                />\n              )}\n            </div>\n          </div>\n        </div>\n      );\n\n      return _.isFunction(connectDropTarget)\n        ? connectDropTarget(editYamlComponent)\n        : editYamlComponent;\n    }\n  },\n);\n\nexport const EditYAML = connectToFlags(FLAGS.CONSOLE_YAML_SAMPLE)(withTranslation()(({ flags, ...props }) => {\n  const resources = flags[FLAGS.CONSOLE_YAML_SAMPLE]\n    ? [\n        {\n          kind: referenceForModel(ConsoleYAMLSampleModel),\n          isList: true,\n          prop: 'yamlSamplesList',\n        },\n      ]\n    : [];\n\n  return (\n    <Firehose resources={resources}>\n      <EditYAML_ {...props} />\n    </Firehose>\n  );\n}));\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AAEA;AACA;AA6TA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AArmBA;AACA;AACA;AACA;AACA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;;;;;A","sourceRoot":""}