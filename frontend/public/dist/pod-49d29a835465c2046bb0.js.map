{"version":3,"file":"pod-49d29a835465c2046bb0.js","sources":["webpack:///./public/components/hypercloud/federated-pod.tsx","webpack:///./public/components/overview/pod-overview.tsx","webpack:///./public/components/overview/resource-overview-details.tsx"],"sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\n\nimport { K8sResourceKind } from '../../module/k8s';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from '../factory';\nimport { Kebab, KebabAction, detailsPage, LabelList, Timestamp, navFactory, ResourceKebab, ResourceLink, ResourceIcon, ResourceSummary, SectionHeading } from '../utils';\nimport { Status } from '@console/shared';\nimport { FederatedPodModel } from '../../models';\n\nexport const menuActions: KebabAction[] = [...Kebab.getExtensionsActionsForKind(FederatedPodModel), ...Kebab.factory.common];\n\nconst kind = FederatedPodModel.kind;\n\nconst tableColumnClasses = ['', '', classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), Kebab.columnClass];\n\nconst FederatedPodTableHeader = (t?: TFunction) => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_3'),\n      sortFunc: 'podPhase',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_15'),\n      sortField: 'metadata.labels',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Annotations',\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_12'),\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[5] },\n    },\n  ];\n};\nFederatedPodTableHeader.displayName = 'FederatedPodTableHeader';\n\nconst FederatedPodTableRow: RowFunction<K8sResourceKind> = ({ obj: pod, index, key, style }) => {\n  const { t } = useTranslation();\n  return (\n    <TableRow id={pod.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={pod.metadata.name} namespace={pod.metadata.namespace} title={pod.metadata.uid} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Status status={pod.status.phase} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <LabelList kind={kind} labels={pod.metadata.labels} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        {t('MSG_DETAILS_TABDETAILS_DETAILS_100', { 0: _.size(pod.metadata.annotations) })}\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <Timestamp timestamp={pod.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={pod} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport const ClusterRow: React.FC<ClusterRowProps> = ({ pod }) => {\n  return (\n    <div className=\"row\">\n      <div className=\"col-lg-2 col-md-3 col-sm-4 col-xs-5\">\n        <ResourceIcon kind={kind} />\n        {pod.metadata.name}\n      </div>\n      <div className=\"col-lg-2 col-md-3 col-sm-5 col-xs-7\">\n        <ResourceLink kind=\"Cluster\" name={pod.spec.placement.clusters[0].name} />\n      </div>\n      <div className=\"col-lg-2 col-md-2 col-sm-3 hidden-xs\">\n        <Status status={pod.status.phase} />\n      </div>\n      <div className=\"col-lg-2 hidden-md hidden-sm hidden-xs\">\n        <Timestamp timestamp={pod.metadata.creationTimestamp} />\n      </div>\n    </div>\n  );\n};\n\nexport const PodDistributionTable: React.FC<PodDistributionTableProps> = ({\n  heading,\n  pod\n}) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <SectionHeading text={heading} />\n      <div className=\"co-m-table-grid co-m-table-grid--bordered\">\n        <div className=\"row co-m-table-grid__head\">\n          <div className=\"col-lg-2 col-md-3 col-sm-4 col-xs-5\">{t('COMMON:MSG_DETAILS_TABOVERVIEW_TABLEHEADER_1')}</div>\n          <div className=\"col-lg-2 col-md-3 col-sm-5 col-xs-7\">{t('COMMON:MSG_DETAILS_TABOVERVIEW_TABLEHEADER_2')}</div>\n          <div className=\"col-lg-2 col-md-2 col-sm-3 hidden-xs\">Result</div>\n          <div className=\"col-lg-1 col-md-2 hidden-sm hidden-xs\">{t('COMMON:MSG_DETAILS_TABOVERVIEW_TABLEHEADER_3')}</div>\n        </div>\n        <div className=\"co-m-table-grid__body\">\n          {/*containers.map((c: any, i: number) => (\n          <ClusterRow key={i} pod={pod} container={c} />\n        ))*/}\n          <ClusterRow pod={pod} />\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst FederatedPodDetails: React.FC<FederatedPodDetailsProps> = ({ obj: pod }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={`${t('COMMON:MSG_MAIN_DIV1_3', { 0: t('COMMON:MSG_LNB_MENU_23') })} ${t('COMMON:MSG_DETAILS_TABOVERVIEW_1')}`} />\n        <div className=\"row\">\n          <div className=\"col-lg-6\">\n            <ResourceSummary resource={pod} />\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <PodDistributionTable\n          key=\"distributionTable\"\n          heading=\"Distribution\"\n          pod={pod} />\n      </div>\n    </>\n  );\n}\n\nconst { details, editYaml } = navFactory;\nexport const FederatedPods: React.FC = props => {\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"Federated Pods\" Header={FederatedPodTableHeader.bind(null, t)} Row={FederatedPodTableRow} virtualize />;\n}\n\nexport const FederatedPodsPage: React.FC<FederatedPodsPageProps> = props => <ListPage canCreate={true} ListComponent={FederatedPods} kind={kind} {...props} />;\n\nexport const FederatedPodsDetailsPage: React.FC<FederatedPodsDetailsPageProps> = props => <DetailsPage {...props} kind={kind} menuActions={menuActions} pages={[details(detailsPage(FederatedPodDetails)), editYaml()]} />;\n\ntype ClusterRowProps = {\n  pod: K8sResourceKind;\n}\n\ntype PodDistributionTableProps = {\n  pod: K8sResourceKind;\n  heading: string;\n};\n\ntype FederatedPodDetailsProps = {\n  obj: K8sResourceKind;\n};\n\ntype FederatedPodsPageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: any;\n};\n\ntype FederatedPodsDetailsPageProps = {\n  match: any;\n};\n","import * as React from 'react';\nimport { PodOverviewItem } from '.';\nimport { PodResourceSummary, PodDetailsList, menuActions } from '../pod';\nimport { PodModel } from '../../models';\nimport { ResourceOverviewDetails } from './resource-overview-details';\nimport { NetworkingOverview } from './networking-overview';\nimport { KebabAction } from '../utils';\n\nconst PodOverviewDetails: React.SFC<PodOverviewDetailsProps> = ({ item: { obj: pod } }) => {\n  return (\n    <div className=\"overview__sidebar-pane-body resource-overview__body\">\n      <div className=\"resource-overview__summary\">\n        <PodResourceSummary pod={pod} />\n      </div>\n      <div className=\"resource-overview__details\">\n        <PodDetailsList pod={pod} />\n      </div>\n    </div>\n  );\n};\n\nconst PodResourcesTab: React.SFC<PodResourcesTabProps> = ({ item: { routes, services } }) => (\n  <div className=\"overview__sidebar-pane-body\">\n    <NetworkingOverview services={services} routes={routes} />\n  </div>\n);\n\nconst tabs = [\n  {\n    name: 'Details',\n    component: PodOverviewDetails,\n  },\n  {\n    name: 'Resources',\n    component: PodResourcesTab,\n  },\n];\n\nexport const PodOverviewPage: React.SFC<PodOverviewPageProps> = ({ item, customActions }) => (\n  <ResourceOverviewDetails\n    item={item}\n    kindObj={PodModel}\n    menuActions={customActions ? [...customActions, ...menuActions] : menuActions}\n    tabs={tabs}\n  />\n);\n\ntype PodOverviewDetailsProps = {\n  item: PodOverviewItem;\n};\n\ntype PodResourcesTabProps = {\n  item: PodOverviewItem;\n};\n\ntype PodOverviewPageProps = {\n  item: PodOverviewItem;\n  customActions?: KebabAction[];\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { connect } from 'react-redux';\n\nimport * as UIActions from '../../actions/ui';\nimport { K8sKind } from '../../module/k8s';\nimport { AsyncComponent, KebabAction, ResourceOverviewHeading, SimpleTabNav } from '../utils';\nimport * as plugins from '../../plugins';\nimport { OverviewItem } from '@console/shared';\n\nconst stateToProps = ({ UI }): PropsFromState => ({\n  selectedDetailsTab: UI.getIn(['overview', 'selectedDetailsTab']),\n});\n\nconst dispatchToProps = (dispatch): PropsFromDispatch => ({\n  onClickTab: (name) => dispatch(UIActions.selectOverviewDetailsTab(name)),\n});\n\nconst getResourceTabComp = (t) => (props) => (\n  <AsyncComponent {...props} loader={t.properties.loader} />\n);\n\nconst getPluginTabResources = (item, tabs): ResourceOverviewDetailsProps['tabs'] => {\n  let tabEntry = plugins.registry\n    .getOverviewResourceTabs()\n    .filter((tab) => item[tab.properties.key]);\n  const overridenTabs = tabs.map((tab) => {\n    const tabEntryConfig = tabEntry.find((t) => tab.name === t.properties.name);\n    if (tabEntryConfig) {\n      tabEntry = tabEntry.filter((entry) => tab.name !== entry.properties.name);\n      return {\n        name: tab.name,\n        component: getResourceTabComp(tabEntryConfig),\n      };\n    }\n    return tab;\n  });\n\n  /** Add new tabs from plugin */\n  const newTabs = tabEntry.map((entry) => {\n    return {\n      name: entry.properties.name,\n      component: getResourceTabComp(entry),\n    };\n  });\n\n  return overridenTabs.concat(newTabs);\n};\n\nexport const ResourceOverviewDetails = connect<PropsFromState, PropsFromDispatch, OwnProps>(\n  stateToProps,\n  dispatchToProps,\n)(\n  ({\n    kindObj,\n    item,\n    menuActions,\n    onClickTab,\n    selectedDetailsTab,\n    tabs,\n  }: ResourceOverviewDetailsProps) => {\n    const keys = Object.keys(item);\n    const keysRef = React.useRef(keys);\n    const tabsRef = React.useRef(tabs);\n    const pluginTabsRef = React.useRef<React.ComponentProps<typeof SimpleTabNav>['tabs']>();\n    if (\n      !pluginTabsRef.current ||\n      !_.isEqual(keys, keysRef.current) ||\n      !_.isEqual(tabs, tabsRef.current)\n    ) {\n      keysRef.current = keys;\n      tabsRef.current = tabs;\n      pluginTabsRef.current = getPluginTabResources(item, tabs);\n    }\n    return (\n      <div className=\"overview__sidebar-pane resource-overview\">\n        <ResourceOverviewHeading actions={menuActions} kindObj={kindObj} resource={item.obj} />\n        <SimpleTabNav\n          onClickTab={onClickTab}\n          selectedTab={selectedDetailsTab}\n          tabProps={{ item }}\n          tabs={pluginTabsRef.current}\n          additionalClassNames=\"co-m-horizontal-nav__menu--within-sidebar co-m-horizontal-nav__menu--within-overview-sidebar\"\n        />\n      </div>\n    );\n  },\n);\n\ntype PropsFromState = {\n  selectedDetailsTab: any;\n};\n\ntype PropsFromDispatch = {\n  onClickTab: (name: string) => void;\n};\n\ntype OwnProps = {\n  item: OverviewItem;\n  kindObj: K8sKind;\n  menuActions: KebabAction[];\n  tabs: {\n    name: string;\n    component: any;\n  }[];\n  isOperatorBacked?: boolean;\n};\n\nexport type ResourceOverviewDetailsProps = PropsFromState & PropsFromDispatch & OwnProps;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AAOA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;;;;;;;;;AC/JA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAEA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAYA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AASA;;;;;A","sourceRoot":""}