{"version":3,"file":"dev-console-helm-releases-list-3c1d6d0cf51e9dca469c.js","sources":["webpack:///./packages/dev-console/src/actions/modify-helm-release.ts","webpack:///./packages/dev-console/src/components/custom-resource-list/CustomResourceList.tsx","webpack:///./packages/dev-console/src/components/helm/HelmReleaseListPage.tsx","webpack:///./packages/dev-console/src/components/helm/list/HelmReleaseList.scss?da8d","webpack:///./packages/dev-console/src/components/helm/list/HelmReleaseList.tsx","webpack:///./packages/dev-console/src/components/helm/list/HelmReleaseListHeader.tsx","webpack:///./packages/dev-console/src/components/helm/list/HelmReleaseListRow.tsx","webpack:///./packages/dev-console/src/components/projects/ProjectListPage.scss?762c","webpack:///./packages/dev-console/src/components/projects/ProjectListPage.tsx"],"sourcesContent":["import { coFetchJSON } from '@console/internal/co-fetch';\nimport { history } from '@console/internal/components/utils';\nimport { deleteResourceModal } from '../components/modals';\n\nexport const deleteHelmRelease = (releaseName: string, namespace: string, redirect?: string) => {\n  return {\n    label: 'Uninstall Helm Release',\n    callback: () => {\n      deleteResourceModal({\n        blocking: true,\n        resourceName: releaseName,\n        resourceType: 'Helm Release',\n        actionLabel: 'Uninstall',\n        redirect,\n        onSubmit: () => {\n          return coFetchJSON.delete(\n            `/api/helm/release?name=${releaseName}&ns=${namespace}`,\n            null,\n            null,\n            -1,\n          );\n        },\n      });\n    },\n  };\n};\n\nexport const upgradeHelmRelease = (\n  releaseName: string,\n  namespace: string,\n  actionOrigin: string,\n) => ({\n  label: 'Upgrade',\n  callback: () => {\n    history.push(\n      `/helm-releases/ns/${namespace}/${releaseName}/upgrade?actionOrigin=${actionOrigin}`,\n    );\n  },\n});\n\nexport const rollbackHelmRelease = (\n  releaseName: string,\n  namespace: string,\n  actionOrigin: string,\n) => ({\n  label: 'Rollback',\n  callback: () => {\n    history.push(\n      `/helm-releases/ns/${namespace}/${releaseName}/rollback?actionOrigin=${actionOrigin}`,\n    );\n  },\n});\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { EmptyState, EmptyStateVariant } from '@patternfly/react-core';\nimport { Table } from '@console/internal/components/factory';\nimport { getQueryArgument, LoadingBox } from '@console/internal/components/utils';\nimport { CustomResourceListProps } from './custom-resource-list-types';\nimport { FilterToolbar } from '@console/internal/components/filter-toolbar';\n\nconst CustomResourceList: React.FC<CustomResourceListProps> = ({\n  resources,\n  loaded = true,\n  EmptyMsg,\n  queryArg,\n  rowFilters,\n  rowFilterReducer,\n  textFilter,\n  textFilterReducer,\n  resourceHeader,\n  resourceRow,\n  sortBy,\n  sortOrder,\n}) => {\n  const applyFilters = React.useCallback(() => {\n    const queryArgument = queryArg ? getQueryArgument(queryArg) : undefined;\n    const activeFilters = queryArgument?.split(',');\n    const params = new URLSearchParams(window.location.search);\n    const filteredText = params.get(textFilter);\n\n    let filteredItems = resources;\n    if (activeFilters) {\n      filteredItems = rowFilterReducer(filteredItems, activeFilters);\n    }\n    if (filteredText) {\n      filteredItems = textFilterReducer(filteredItems, filteredText);\n    }\n    return filteredItems;\n  }, [resources, queryArg, rowFilterReducer, textFilter, textFilterReducer]);\n\n  const filteredListItems = applyFilters();\n\n  if (!loaded) {\n    return <LoadingBox />;\n  }\n\n  if (_.isEmpty(resources)) {\n    return EmptyMsg ? (\n      <EmptyMsg />\n    ) : (\n      <EmptyState variant={EmptyStateVariant.full}>\n        <p>No resources found</p>\n      </EmptyState>\n    );\n  }\n\n  return (\n    <div className=\"co-m-pane__body\">\n      {(rowFilters || textFilter) && (\n        <FilterToolbar\n          rowFilters={rowFilters}\n          data={resources}\n          textFilter={textFilter}\n          hideLabelFilter\n          reduxIDs={[]}\n        />\n      )}\n      <Table\n        data={filteredListItems}\n        defaultSortField={sortBy}\n        defaultSortOrder={sortOrder}\n        aria-label=\"CustomResources\"\n        Header={resourceHeader}\n        Row={resourceRow}\n        loaded={loaded}\n        virtualize\n      />\n    </div>\n  );\n};\n\nexport default React.memo(CustomResourceList);\n","import * as React from 'react';\nimport { RouteComponentProps } from 'react-router';\nimport Helmet from 'react-helmet';\nimport { PageHeading } from '@console/internal/components/utils';\nimport { withStartGuide } from '@console/internal/components/start-guide';\nimport ProjectListPage from '../projects/ProjectListPage';\nimport NamespacedPage, { NamespacedPageVariants } from '../NamespacedPage';\nimport HelmReleaseList from './list/HelmReleaseList';\n\ntype HelmReleaseListPageProps = RouteComponentProps<{ ns: string }>;\n\nconst PageContents: React.FC<HelmReleaseListPageProps> = (props) => {\n  const {\n    match: {\n      params: { ns: namespace },\n    },\n  } = props;\n  return namespace ? (\n    <div>\n      <PageHeading title=\"Helm Releases\" />\n      <HelmReleaseList namespace={namespace} />\n    </div>\n  ) : (\n    <ProjectListPage title=\"Helm Releases\">\n      Select a project to view the list of Helm Releases\n    </ProjectListPage>\n  );\n};\n\nconst PageContentsWithStartGuide = withStartGuide(PageContents);\n\nexport const HelmReleaseListPage: React.FC<HelmReleaseListPageProps> = (props) => (\n  <NamespacedPage variant={NamespacedPageVariants.light} hideApplications>\n    <Helmet>\n      <title>Helm Releases</title>\n    </Helmet>\n    <PageContentsWithStartGuide {...props} />\n  </NamespacedPage>\n);\n\nexport default HelmReleaseListPage;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { EmptyState, EmptyStateIcon, EmptyStateVariant } from '@patternfly/react-core';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { SecretModel } from '@console/internal/models';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { StatusBox } from '@console/internal/components/utils';\nimport { getImageForIconClass } from '@console/internal/components/catalog/catalog-item-icon';\nimport CustomResourceList from '../../custom-resource-list/CustomResourceList';\nimport {\n  helmReleasesRowFilters,\n  filterHelmReleasesByName,\n  filterHelmReleasesByStatus,\n  fetchHelmReleases,\n} from '../helm-utils';\nimport HelmReleaseListRow from './HelmReleaseListRow';\nimport HelmReleaseListHeader from './HelmReleaseListHeader';\n\nimport './HelmReleaseList.scss';\n\ninterface HelmReleaseListProps {\n  namespace: string;\n}\n\nconst HelmReleaseList: React.FC<HelmReleaseListProps> = ({ namespace }) => {\n  const secretsCountRef = React.useRef<number>(0);\n  const [releasesLoaded, setReleasesLoaded] = React.useState<boolean>(false);\n  const [loadError, setLoadError] = React.useState<string>();\n  const [releases, setReleases] = React.useState([]);\n  const secretResource = React.useMemo(\n    () => ({\n      isList: true,\n      namespace,\n      kind: SecretModel.kind,\n      namespaced: true,\n      optional: true,\n      selector: { matchLabels: { owner: 'helm' } },\n    }),\n    [namespace],\n  );\n  const [secretsData, secretsLoaded, secretsLoadError] = useK8sWatchResource<K8sResourceKind[]>(\n    secretResource,\n  );\n  const newCount = secretsData?.length ?? 0;\n\n  React.useEffect(() => {\n    setReleasesLoaded(false);\n    secretsCountRef.current = 0;\n  }, [namespace]);\n\n  React.useEffect(() => {\n    let destroyed = false;\n    if (secretsLoaded && !secretsLoadError) {\n      if (newCount === 0) {\n        setLoadError(null);\n        setReleasesLoaded(true);\n        setReleases([]);\n      } else if (newCount !== secretsCountRef.current) {\n        setReleasesLoaded(false);\n        fetchHelmReleases(namespace)\n          .then((helmReleases) => {\n            if (!destroyed) {\n              setReleases(helmReleases);\n              setReleasesLoaded(true);\n              setLoadError(null);\n            }\n          })\n          .catch((err) => {\n            if (!destroyed) {\n              setReleasesLoaded(true);\n              setLoadError(err.message || 'Unable to load Helm Releases');\n            }\n          });\n      }\n      secretsCountRef.current = newCount;\n    }\n    return () => {\n      destroyed = true;\n    };\n  }, [namespace, newCount, secretsLoadError, secretsLoaded]);\n\n  if (secretsLoadError || loadError) {\n    return <StatusBox loaded loadError={secretsLoadError || loadError} label=\"Helm Releases\" />;\n  }\n\n  const emptyState = () => {\n    const helmImage = () => (\n      <img\n        className=\"odc-helm-release__empty-list__image\"\n        src={getImageForIconClass('icon-helm')}\n        alt=\"\"\n      />\n    );\n    const installURL = { pathname: `/catalog/ns/${namespace}`, search: '?kind=%5B\"HelmChart\"%5D' };\n    return (\n      <EmptyState variant={EmptyStateVariant.full}>\n        <p className=\"odc-helm-release__empty-list__title\">No Helm Releases found</p>\n        <EmptyStateIcon variant=\"container\" component={helmImage} />\n        <Link to={installURL}>Install a Helm Chart from the developer catalog</Link>\n      </EmptyState>\n    );\n  };\n\n  return (\n    <CustomResourceList\n      resources={releases}\n      loaded={secretsLoaded && releasesLoaded && newCount === secretsCountRef.current}\n      EmptyMsg={emptyState}\n      queryArg=\"rowFilter-helm-release-status\"\n      textFilter=\"name\"\n      rowFilters={helmReleasesRowFilters}\n      sortBy=\"name\"\n      sortOrder={SortByDirection.asc}\n      rowFilterReducer={filterHelmReleasesByStatus}\n      textFilterReducer={filterHelmReleasesByName}\n      resourceRow={HelmReleaseListRow}\n      resourceHeader={HelmReleaseListHeader}\n    />\n  );\n};\n\nexport default HelmReleaseList;\n","import { sortable } from '@patternfly/react-table';\nimport { Kebab } from '@console/internal/components/utils';\n\nexport const tableColumnClasses = {\n  name: 'col-lg-2 col-md-4 col-sm-4 col-xs-4',\n  revision: 'col-lg-2 col-md-3 col-sm-3 col-xs-3',\n  updated: 'col-lg-2 col-md-3 col-sm-5 col-xs-5',\n  status: 'col-lg-1 col-md-2 hidden-sm hidden-xs',\n  chartName: 'col-lg-2 hidden-md hidden-sm hidden-xs',\n  chartVersion: 'col-lg-2 hidden-md hidden-sm hidden-xs',\n  appVersion: 'col-lg-1 hidden-md hidden-sm hidden-xs',\n  kebab: Kebab.columnClass,\n};\n\nconst HelmReleaseListHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses.name },\n    },\n    {\n      title: 'Revision',\n      sortField: 'version',\n      transforms: [sortable],\n      props: { className: tableColumnClasses.revision },\n    },\n    {\n      title: 'Updated',\n      sortField: 'info.last_deployed',\n      transforms: [sortable],\n      props: { className: tableColumnClasses.updated },\n    },\n    {\n      title: 'Status',\n      sortField: 'info.status',\n      transforms: [sortable],\n      props: { className: tableColumnClasses.status },\n    },\n    {\n      title: 'Chart Name',\n      sortField: 'chart.metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses.chartName },\n    },\n    {\n      title: 'Chart Version',\n      sortField: 'chart.metadata.version',\n      transforms: [sortable],\n      props: { className: tableColumnClasses.chartVersion },\n    },\n    {\n      title: 'App Version',\n      sortField: 'chart.metadata.appVersion',\n      transforms: [sortable],\n      props: { className: tableColumnClasses.appVersion },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses.kebab },\n    },\n  ];\n};\n\nexport default HelmReleaseListHeader;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Status } from '@console/shared';\nimport { TableRow, TableData, RowFunction } from '@console/internal/components/factory';\nimport { Timestamp, Kebab, ResourceIcon } from '@console/internal/components/utils';\nimport { Link } from 'react-router-dom';\nimport { HelmRelease, HelmActionOrigins } from '../helm-types';\nimport { tableColumnClasses } from './HelmReleaseListHeader';\nimport {\n  deleteHelmRelease,\n  upgradeHelmRelease,\n  rollbackHelmRelease,\n} from '../../../actions/modify-helm-release';\n\nconst HelmReleaseListRow: RowFunction<HelmRelease> = ({ obj, index, key, style }) => {\n  const menuActions = [\n    upgradeHelmRelease(obj.name, obj.namespace, HelmActionOrigins.list),\n    rollbackHelmRelease(obj.name, obj.namespace, HelmActionOrigins.list),\n    deleteHelmRelease(obj.name, obj.namespace),\n  ];\n  return (\n    <TableRow id={obj.name} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses.name}>\n        <ResourceIcon kind={'Helm Release'} />\n        <Link\n          to={`/helm-releases/ns/${obj.namespace}/release/${obj.name}`}\n          title={obj.name}\n          className=\"co-resource-item__resource-name\"\n        >\n          {obj.name}\n        </Link>\n      </TableData>\n      <TableData className={tableColumnClasses.revision}>{obj.version}</TableData>\n      <TableData className={tableColumnClasses.updated}>\n        <Timestamp timestamp={obj.info.last_deployed} />\n      </TableData>\n      <TableData className={tableColumnClasses.status}>\n        <Status status={_.capitalize(obj.info.status)} />\n      </TableData>\n      <TableData className={tableColumnClasses.chartName}>{obj.chart.metadata.name}</TableData>\n      <TableData className={tableColumnClasses.chartVersion}>\n        {obj.chart.metadata.version}\n      </TableData>\n      <TableData className={tableColumnClasses.appVersion}>\n        {obj.chart.metadata.appVersion}\n      </TableData>\n      <TableData className={tableColumnClasses.kebab}>\n        <Kebab options={menuActions} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport default HelmReleaseListRow;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { ListPage } from '@console/internal/components/factory';\nimport { ProjectsTable } from '@console/internal/components/namespace';\nimport { PageHeading } from '@console/internal/components/utils';\nimport './ProjectListPage.scss';\n\nexport interface ProjectListPageProps {\n  title: string;\n  listComponent?: React.ComponentType<any>;\n  children?: React.ReactNode;\n  badge?: React.ReactNode;\n}\nconst ProjectListPage: React.FC<ProjectListPageProps> = ({\n  badge,\n  title,\n  children,\n  listComponent,\n  ...listPageProps\n}) => (\n  <div className=\"odc-project-list-page\">\n    <PageHeading title={title} badge={badge}>\n      {children}\n    </PageHeading>\n    <hr className=\"odc-project-list-page__section-border\" />\n    <ListPage\n      {...listPageProps}\n      showTitle={false}\n      kind=\"Project\"\n      ListComponent={listComponent || ProjectsTable}\n      canCreate={false}\n      filterLabel=\"by name or display name\"\n      textFilter=\"project-name\"\n    />\n  </div>\n);\n\nexport default ProjectListPage;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAGA;AACA;AAEA;AAKA;AACA;AACA;AAGA;AACA;;;;;;;;;;;;;ACnDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAcA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AAGA;AAEA;AAEA;AASA;AAYA;AAEA;;;;;;;;;;;;;AC/EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAKA;AAEA;AACA;AAOA;AAEA;AAEA;AAEA;AACA;AAEA;AAIA;;;;;;;;;;;;ACxCA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AAMA;;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAOA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AAgBA;AAEA;;;;;;;;;;;;;AC1HA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACjEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAQA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AAGA;AACA;AAIA;AAEA;;;;;;;;;;;;ACrDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAMA;AAEA;AAGA;AACA;AAUA;AAEA;;;;;A","sourceRoot":""}