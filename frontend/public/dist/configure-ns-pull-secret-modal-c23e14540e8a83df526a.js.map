{"version":3,"file":"configure-ns-pull-secret-modal-c23e14540e8a83df526a.js","sources":["webpack:///./public/components/modals/configure-ns-pull-secret-modal.jsx"],"sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as PropTypes from 'prop-types';\nimport { Base64 } from 'js-base64';\nimport { Alert } from '@patternfly/react-core';\n\nimport { CONST } from '@console/shared';\nimport { k8sPatch, k8sPatchByName, k8sCreate } from '../../module/k8s';\nimport { SecretModel, ServiceAccountModel } from '../../models';\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter } from '../factory/modal';\nimport { PromiseComponent, ResourceIcon } from '../utils';\n\nconst parseExisitingPullSecret = (pullSecret) => {\n  let invalidData = false;\n  const invalidJson = false;\n  let username, email, password, address;\n\n  try {\n    const existingData = pullSecret && Base64.decode(pullSecret.data[CONST.PULL_SECRET_DATA]);\n\n    if (existingData) {\n      const data = JSON.parse(existingData);\n\n      if (!data || !data.auths) {\n        throw 'Invalid data';\n      }\n\n      const keys = Object.keys(data.auths);\n\n      if (keys.length > 1) {\n        // multiple auths are stored in this one secret.\n        // we'll display the first secret, but upon saving, the\n        // others will get erased\n        invalidData = true;\n      } else if (keys.length < 1) {\n        throw 'Invalid data';\n      }\n      address = keys[0];\n      email = data.auths[address].email;\n      const auth = Base64.decode(data.auths[address].auth);\n      const authParts = auth.split(':');\n\n      if (authParts.length === 1) {\n        username = '';\n        password = authParts[0];\n      } else if (authParts.length === 2) {\n        username = authParts[0];\n        password = authParts[1];\n      } else {\n        throw 'Invalid data';\n      }\n    }\n  } catch (error) {\n    invalidData = true;\n  }\n\n  return { username, password, email, address, invalidData, invalidJson };\n};\n\nconst generateSecretData = (formData) => {\n  const config = {\n    auths: {},\n  };\n\n  const authParts = [];\n\n  if (_.trim(formData.username).length >= 1) {\n    authParts.push(formData.username);\n  }\n  authParts.push(formData.password);\n\n  config.auths[formData.address] = {\n    auth: Base64.encode(authParts.join(':')),\n    email: formData.email,\n  };\n\n  return Base64.encode(JSON.stringify(config));\n};\n\nclass ConfigureNamespacePullSecret extends PromiseComponent {\n  constructor(props) {\n    super(props);\n\n    this._submit = this._submit.bind(this);\n    this._cancel = this.props.cancel.bind(this);\n\n    this._onMethodChange = this._onMethodChange.bind(this);\n    this._onFileChange = this._onFileChange.bind(this);\n\n    this.state = Object.assign(this.state, {\n      method: 'form',\n      fileData: null,\n      invalidJson: false,\n    });\n  }\n\n  _onMethodChange(event) {\n    this.setState({ method: event.target.value });\n  }\n\n  _onFileChange(event) {\n    this.setState({ invalidJson: false, fileData: null });\n\n    const file = event.target.files[0];\n    if (!file || file.type !== 'application/json') {\n      this.setState({ invalidJson: true });\n      return;\n    }\n\n    const reader = new FileReader();\n    reader.onload = (e) => {\n      const input = e.target.result;\n      try {\n        JSON.parse(input);\n      } catch (error) {\n        this.setState({ invalidJson: true });\n        return;\n      }\n      this.setState({ fileData: input });\n    };\n    reader.readAsText(file, 'UTF-8');\n  }\n\n  _submit(event) {\n    event.preventDefault();\n    const { namespace, pullSecret } = this.props;\n\n    let promise;\n    let secretData;\n\n    if (this.state.method === 'upload') {\n      secretData = Base64.encode(this.state.fileData);\n    } else {\n      const elements = event.target.elements;\n      const formData = {\n        username: elements['namespace-pull-secret-username'].value,\n        password: elements['namespace-pull-secret-password'].value,\n        email: elements['namespace-pull-secret-email'].value || '',\n        address: elements['namespace-pull-secret-address'].value,\n      };\n      secretData = generateSecretData(formData);\n    }\n\n    if (pullSecret) {\n      const patch = [\n        {\n          op: 'replace',\n          path: `/data/${CONST.PULL_SECRET_DATA}`,\n          value: secretData,\n        },\n      ];\n      promise = k8sPatch(SecretModel, pullSecret, patch);\n    } else {\n      const data = {};\n      const pullSecretName = event.target.elements['namespace-pull-secret-name'].value;\n      data[CONST.PULL_SECRET_DATA] = secretData;\n\n      const secret = {\n        metadata: {\n          name: pullSecretName,\n          namespace: namespace.metadata.name,\n        },\n        data,\n        type: CONST.PULL_SECRET_TYPE,\n      };\n      const defaultServiceAccountPatch = [\n        {\n          op: 'add',\n          path: '/imagePullSecrets/-',\n          value: { name: pullSecretName },\n        },\n      ];\n      promise = k8sCreate(SecretModel, secret).then(() =>\n        k8sPatchByName(\n          ServiceAccountModel,\n          'default',\n          namespace.metadata.name,\n          defaultServiceAccountPatch,\n        ),\n      );\n    }\n\n    this.handlePromise(promise).then(this.props.close);\n  }\n\n  render() {\n    const { namespace, pullSecret } = this.props;\n\n    const existingData = parseExisitingPullSecret(pullSecret);\n\n    return (\n      <form onSubmit={this._submit} name=\"form\" className=\"modal-content\">\n        <ModalTitle>Default Pull Secret</ModalTitle>\n        <ModalBody>\n          <p>\n            Specify default credentials to be used to authenticate and download containers within\n            this namespace. These credentials will be the default unless a pod references a specific\n            pull secret.\n          </p>\n\n          {existingData.invalidData && (\n            <Alert\n              isInline\n              className=\"co-alert\"\n              variant=\"danger\"\n              title=\"Overwriting default pull secret\"\n            >\n              A default pull secret exists, but can't be parsed. Saving this will overwrite it.\n            </Alert>\n          )}\n\n          <div className=\"row co-m-form-row\">\n            <div className=\"col-xs-3\">\n              <label>Namespace</label>\n            </div>\n            <div className=\"col-xs-9\">\n              <ResourceIcon kind=\"Namespace\" /> &nbsp;{namespace.metadata.name}\n            </div>\n          </div>\n\n          <div className=\"row co-m-form-row\">\n            <div className=\"col-xs-3\">\n              <label htmlFor=\"namespace-pull-secret-name\">Secret Name</label>\n            </div>\n            {pullSecret ? (\n              <div className=\"col-xs-9\">\n                <ResourceIcon kind=\"Secret\" />\n                &nbsp;{_.get(pullSecret, 'metadata.name')}\n              </div>\n            ) : (\n              <div className=\"col-xs-9\">\n                <input\n                  type=\"text\"\n                  className=\"pf-c-form-control\"\n                  id=\"namespace-pull-secret-name\"\n                  aria-describedby=\"namespace-pull-secret-name-help\"\n                  required\n                />\n                <p className=\"help-block text-muted\" id=\"namespace-pull-secret-name-help\">\n                  Friendly name to help you manage this in the future\n                </p>\n              </div>\n            )}\n          </div>\n\n          <div className=\"row co-m-form-row form-group\">\n            <div className=\"col-xs-3\">\n              <label>Method</label>\n            </div>\n            <div className=\"col-xs-9\">\n              <div className=\"radio\">\n                <label className=\"control-label\">\n                  <input\n                    type=\"radio\"\n                    id=\"namespace-pull-secret-method--form\"\n                    checked={this.state.method === 'form'}\n                    onChange={this._onMethodChange}\n                    value=\"form\"\n                  />\n                  Enter Username/Password\n                </label>\n              </div>\n              <div className=\"radio\">\n                <label className=\"control-label\">\n                  <input\n                    type=\"radio\"\n                    checked={this.state.method === 'upload'}\n                    onChange={this._onMethodChange}\n                    id=\"namespace-pull-secret-method--upload\"\n                    value=\"upload\"\n                  />\n                  Upload Docker config.json\n                </label>\n              </div>\n            </div>\n          </div>\n\n          {this.state.method === 'form' && (\n            <div>\n              <div className=\"row co-m-form-row\">\n                <div className=\"col-xs-3\">\n                  <label htmlFor=\"namespace-pull-secret-address\">Registry Address</label>\n                </div>\n                <div className=\"col-xs-9\">\n                  <input\n                    type=\"text\"\n                    className=\"pf-c-form-control\"\n                    id=\"namespace-pull-secret-address\"\n                    defaultValue={existingData.address}\n                    placeholder=\"quay.io\"\n                    required\n                  />\n                </div>\n              </div>\n              <div className=\"row co-m-form-row\">\n                <div className=\"col-xs-3\">\n                  <label htmlFor=\"namespace-pull-secret-email\">Email Address</label>\n                </div>\n                <div className=\"col-xs-9\">\n                  <input\n                    type=\"email\"\n                    className=\"pf-c-form-control\"\n                    defaultValue={existingData.email}\n                    id=\"namespace-pull-secret-email\"\n                    aria-describedby=\"namespace-pull-secret-email-help\"\n                  />\n                  <p className=\"help-block text-muted\" id=\"namespace-pull-secret-email-help\">\n                    Optional, depending on registry provider\n                  </p>\n                </div>\n              </div>\n              <div className=\"row co-m-form-row\">\n                <div className=\"col-xs-3\">\n                  <label htmlFor=\"namespace-pull-secret-username\">Username</label>\n                </div>\n                <div className=\"col-xs-9\">\n                  <input\n                    type=\"text\"\n                    defaultValue={existingData.username}\n                    className=\"pf-c-form-control\"\n                    id=\"namespace-pull-secret-username\"\n                    required\n                  />\n                </div>\n              </div>\n              <div className=\"row co-m-form-row\">\n                <div className=\"col-xs-3\">\n                  <label htmlFor=\"namespace-pull-secret-password\">Password</label>\n                </div>\n                <div className=\"col-xs-9\">\n                  <input\n                    type=\"password\"\n                    defaultValue={existingData.password}\n                    className=\"pf-c-form-control\"\n                    id=\"namespace-pull-secret-password\"\n                    required\n                  />\n                </div>\n              </div>\n            </div>\n          )}\n\n          {this.state.method === 'upload' && (\n            <div>\n              <div className=\"row co-m-form-row\">\n                <div className=\"col-xs-3\">\n                  <label htmlFor=\"namespace-pull-secret-file\">File Upload</label>\n                </div>\n                <div className=\"col-xs-9\">\n                  <input\n                    type=\"file\"\n                    id=\"namespace-pull-secret-file\"\n                    onChange={this._onFileChange}\n                    aria-describedby=\"namespace-pull-secret-file-help\"\n                  />\n                  <p className=\"help-block etext-muted\" id=\"namespace-pull-secret-file-help\">\n                    Properly configured Docker config file in JSON format. Will be base64 encoded\n                    after upload.\n                  </p>\n                </div>\n              </div>\n              {this.state.invalidJson ||\n                (existingData.invalidJson && (\n                  <div className=\"row co-m-form-row\">\n                    <div className=\"col-xs-9 col-sm-offset-3\">\n                      <Alert isInline className=\"co-alert\" variant=\"danger\" title=\"Invalid JSON\">\n                        The uploaded file is not properly-formatted JSON.\n                      </Alert>\n                    </div>\n                  </div>\n                ))}\n              {this.state.fileData && (\n                <div className=\"row co-m-form-row\">\n                  <div className=\"col-xs-9 col-sm-offset-3\">\n                    <pre className=\"co-pre-wrap\">{this.state.fileData}</pre>\n                  </div>\n                </div>\n              )}\n            </div>\n          )}\n        </ModalBody>\n        <ModalSubmitFooter\n          errorMessage={this.state.errorMessage}\n          inProgress={this.state.inProgress}\n          submitText=\"Save\"\n          cancel={this._cancel}\n        />\n      </form>\n    );\n  }\n}\n\nConfigureNamespacePullSecret.propTypes = {\n  namespace: PropTypes.object.isRequired,\n  pullSecret: PropTypes.object,\n};\n\nexport const configureNamespacePullSecretModal = createModalLauncher(ConfigureNamespacePullSecret);\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAMA;AAWA;AACA;AACA;AAEA;AACA;;AAAA;AAIA;AACA;AACA;AAEA;AAEA;;AACA;AAIA;AAOA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AAQA;AAEA;AACA;AACA;AAQA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AAUA;AACA;AACA;AAEA;AACA;AAOA;AAKA;AACA;AACA;AAEA;AACA;AASA;AACA;AACA;AAEA;AACA;AAYA;AAEA;AACA;AACA;AAEA;AACA;AAMA;AAMA;AACA;AAEA;AACA;AAMA;AAEA;AACA;AAOA;AAQA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;A","sourceRoot":""}