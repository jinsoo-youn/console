{"version":3,"file":"templateinstance-cbd4f04441ea09ecc501.js","sources":["webpack:///./public/components/hypercloud/template-instance.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\nimport { Status } from '@console/shared';\nimport { sortable } from '@patternfly/react-table';\nimport { TemplateInstanceModel } from '../../models';\nimport { K8sResourceKind } from '../../module/k8s';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\nimport { DetailsPage, ListPage, Table, TableData, TableRow } from '../factory';\nimport { DetailsItem, Kebab, navFactory, SectionHeading, ResourceSummary, ResourceLink, ResourceKebab, Timestamp } from '../utils';\nimport { ResourceLabel } from '../../models/hypercloud/resource-plural';\n\nconst { common } = Kebab.factory;\n\nconst kind = TemplateInstanceModel.kind;\n\nexport const templateInstanceMenuActions = [...Kebab.getExtensionsActionsForKind(TemplateInstanceModel), ...common];\n\nconst templateInstancePhase = instance => {\n  let phase = '';\n  if (instance.status) {\n    instance.status.conditions.forEach(cur => {\n      if (cur.type === '') {\n        phase = cur.status;\n      }\n    });\n    return phase;\n  }\n};\n\nconst templateObjectsSummary = templateinstance => {\n  // NOTE: template instance가 cluster/namespace 스코프에 따라 objects 정보의 위치가 달라서 분기처리함\n  const objects = !!templateinstance.spec?.clustertemplate?.objects ? templateinstance.spec.clustertemplate.objects : !!templateinstance.spec?.template?.objects ? templateinstance.spec.template.objects : [];\n  let objMap = new Map();\n  for (const i in objects) {\n    const kind = !!objects[i].kind ? objects[i].kind : 'unknown kind';\n    if (!!objMap.get(kind)) {\n      const num = objMap.get(kind) as number;\n      objMap.set(kind, num + 1);\n    } else {\n      objMap.set(kind, 1);\n    }\n  }\n  const objectList = [];\n  objMap.forEach((value, key) => {\n    objectList.push(\n      <div>\n        {key} {value}\n      </div>,\n    );\n  });\n\n  return <div>{objectList}</div>;\n};\n\nconst TemplateInstanceDetails: React.FC<TemplateInstanceDetailsProps> = ({ obj: templateInstance }) => {\n  const { t } = useTranslation();\n  let phase = templateInstancePhase(templateInstance);\n  const objectSummary = templateObjectsSummary(templateInstance);\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', {0: ResourceLabel(templateInstance, t)})} />\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <ResourceSummary resource={templateInstance} showPodSelector showNodeSelector showOwner={false}></ResourceSummary>\n          </div>\n          <div className=\"col-md-6\">\n            <dl className=\"co-m-pane__details\">\n              <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_13')} obj={templateInstance} path=\"status.phase\">\n                <Status status={phase} />\n              </DetailsItem>\n              <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_104')}</dt>\n              <dd>{objectSummary}</dd>\n              <DetailsItem label={t('COMMON:MSG_LNB_MENU_17')} obj={templateInstance} path=\"metadata.labels.serviceInstanceRef\">\n                {!!templateInstance.metadata.labels?.serviceInstanceRef ? <ResourceLink kind=\"ServiceInstance\" name={templateInstance.metadata.labels?.serviceInstanceRef} title={templateInstance.metadata.labels?.serviceInstanceRef} /> : 'None'}\n              </DetailsItem>\n            </dl>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\ntype TemplateInstanceDetailsProps = {\n  obj: K8sResourceKind;\n};\n\nconst { details, editYaml } = navFactory;\nconst TemplateInstancesDetailsPage: React.FC<TemplateInstancesDetailsPageProps> = props => <DetailsPage {...props} kind={kind} menuActions={templateInstanceMenuActions} pages={[details(TemplateInstanceDetails), editYaml()]} />;\nTemplateInstancesDetailsPage.displayName = 'TemplateInstancesDetailsPage';\n\nconst tableColumnClasses = [\n  '', // NAME\n  '', // NAMESPACE\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'), // STATUS\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'), // RESOURCE SUMMARY\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'), // SERVICE INSTANCE\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'), // CREATED\n  Kebab.columnClass, // MENU ACTIONS\n];\n\nconst TemplateInstanceTableRow = ({ obj, index, key, style }) => {\n  let phase = templateInstancePhase(obj);\n  const objectSummary = templateObjectsSummary(obj);\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={obj.metadata.name} namespace={obj.metadata.namespace} title={obj.metadata.name} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1])}>\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} title={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Status status={phase} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>{objectSummary}</TableData>\n      <TableData className={tableColumnClasses[4]}>{!!obj.metadata.labels?.serviceInstanceRef ? <ResourceLink kind=\"ServiceInstance\" name={obj.metadata.labels?.serviceInstanceRef} namespace={obj.metadata.namespace} title={obj.metadata.labels?.serviceInstanceRef} /> : 'None'}</TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <Timestamp timestamp={obj.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[6]}>\n        <ResourceKebab actions={templateInstanceMenuActions} kind={kind} resource={obj} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst TemplateInstanceTableHeader = (t?: TFunction) => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_2'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_3'),\n      sortFunc: 'templateInstancePhase',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_104'),\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: t('COMMON:MSG_LNB_MENU_17'),\n      sortField: 'metadata.labels.serviceInstanceRef',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_12'),\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[5] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[6] },\n    },\n  ];\n};\n\nTemplateInstanceTableHeader.displayName = 'TemplateInstanceTableHeader';\n\nconst TemplateInstancesList: React.FC = props => {\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"Template Instance\" Header={TemplateInstanceTableHeader.bind(null, t)} Row={TemplateInstanceTableRow} />;\n};\nTemplateInstancesList.displayName = 'TemplateInstancesList';\n\nconst TemplateInstancesPage: React.FC<TemplateInstancesPageProps> = props => {\n  const { t } = useTranslation();\n  return (\n    <ListPage\n      title={t('COMMON:MSG_LNB_MENU_21')}\n      createButtonText={t('COMMON:MSG_MAIN_CREATEBUTTON_1', { 0: t('COMMON:MSG_LNB_MENU_21') })}\n      canCreate={true}\n      kind={kind}\n      ListComponent={TemplateInstancesList}\n      rowFilters={[\n        {\n          filterGroupName: 'Status',\n          type: 'template-instance-status',\n          reducer: templateInstancePhase,\n          items: [\n            { id: 'Success', title: t('COMMON:MSG_COMMON_FILTER_5') },\n            { id: 'Failed', title: t('COMMON:MSG_COMMON_FILTER_6') },\n          ],\n        },\n      ]}\n      {...props}\n    />\n  );\n};\nTemplateInstancesPage.displayName = 'TemplateInstancesPage';\n\nexport { TemplateInstancesList, TemplateInstancesPage, TemplateInstancesDetailsPage };\n\ntype TemplateInstancesPageProps = {};\n\ntype TemplateInstancesDetailsPageProps = {\n  match: any;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAAA;AAGA;AAEA;AACA;AAEA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AASA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;;;;;A","sourceRoot":""}