{"version":3,"file":"repository-f9176c1e46877726d683.js","sources":["webpack:///./public/components/hypercloud/repository.tsx","webpack:///./public/components/hypercloud/tags.tsx","webpack:///./public/components/hypercloud/utils/expandable-inner-table.tsx","webpack:///./public/components/hypercloud/utils/expandable-table.tsx"],"sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { useEffect, useState } from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { K8sResourceKind } from '../../module/k8s';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from '../factory';\nimport { Kebab, Timestamp, navFactory, ResourceKebab, ResourceLink, ResourceSummary, SectionHeading } from '../utils';\nimport { RepositoryModel } from '../../models/hypercloud';\nimport { Tags } from './tags';\nimport { scanningModal } from './modals';\nimport { k8sGet } from '../../module/k8s';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\n\nexport const menuActions = [...Kebab.factory.common, Kebab.factory.ModifyScanning];\n\nconst kind = RepositoryModel.kind;\n\nconst tableColumnClasses = [\n  '',\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'),\n  Kebab.columnClass,\n];\n\nconst RepositoryTableRow: RowFunction<K8sResourceKind> = ({ obj, index, key, style }) => {\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={kind}\n          name={obj.metadata.name}\n          displayName={obj.spec.name}\n          namespace={obj.metadata.namespace}\n          title={obj.metadata.uid}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[1]}>\n        <Timestamp timestamp={obj.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={obj} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst RepositoryTableHeader = (t?: TFunction) => {\n  return [\n    {\n      title: t('COMMON:MSG_DETAILS_TABREPLICASETS_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_DETAILS_TABREPLICASETS_6'),\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[2] },\n    },\n  ];\n};\n\nRepositoryTableHeader.displayName = 'RepositoryTableHeader';\n\n\nconst RepositoriesList = (props) => {\n  const { t } = useTranslation();\n\n  return (<Table\n    {...props}\n    aria-label=\"Repositories\"\n    Header={RepositoryTableHeader.bind(null, t)}\n    Row={RepositoryTableRow}\n    virtualize\n  />\n  );\n}\nconst RepositoriesPage = (props) => {\n  const { t } = useTranslation();\n\n  const { canCreate = true, namespace, isExtRegistry } = props;\n  let registry;\n  if (isExtRegistry) {\n    registry = props.selector.matchLabels['ext-registry'];\n  } else {\n    registry = props.selector.matchLabels.registry;\n  }\n\n  return (\n    <>\n      <div className=\"pf-m-expanded\" style={{ padding: '30px 0 0 30px' }}>\n        {isExtRegistry ? <button className=\"pf-c-dropdown__toggle pf-m-primary\" style={{ backgroundColor: '#0066cc', color: 'white', fontSize: '14px', width: '150px', height: '25px', display: 'flex', justifyContent: 'center' }} onClick={scanningModal.bind(null, { kind: 'Repository', ns: namespace, showNs: false, labelSelector: { 'ext-registry': registry }, isExtRegistry })}>\n          {t('COMMON:MSG_DETAILS_TABREPOSITORIES_2')}\n        </button> : <button className=\"pf-c-dropdown__toggle pf-m-primary\" style={{ backgroundColor: '#0066cc', color: 'white', fontSize: '14px', width: '150px', height: '25px', display: 'flex', justifyContent: 'center' }} onClick={scanningModal.bind(null, { kind: 'Repository', ns: namespace, showNs: false, labelSelector: { registry }, isExtRegistry })}>\n          {t('COMMON:MSG_DETAILS_TABREPOSITORIES_2')}\n        </button>}\n      </div>\n      <ListPage canCreate={canCreate} kind=\"Repository\" ListComponent={RepositoriesList} {...props} />\n    </>\n  );\n};\n\nconst RepositoryDetails: React.FC<RepositoryDetailsProps> = ({ obj: repository }) => {\n\n  const [addedTags, setAddedTags] = useState(repository.spec.versions);\n\n  useEffect(() => {\n    getScans();\n  }, []);\n\n\n  const isExtRegistry = repository.metadata.labels.app === 'ext-registry' ? true : false;\n\n  const getWorstScan = (scans, tag) => {\n    const res = scans[tag];\n    if (res) {\n      if (res.hasOwnProperty('Critical')) {\n        return 'Critical';\n      } else if (res.hasOwnProperty('High')) {\n        return 'High';\n      } else if (res.hasOwnProperty('Medium')) {\n        return 'Medium';\n      } else if (res.hasOwnProperty('Low')) {\n        return 'Low';\n      } else if (res.hasOwnProperty('Negligible')) {\n        return 'Negligible';\n      } else if (res.hasOwnProperty('Unknown')) {\n        return 'Unknown';\n      }\n    }\n    return '';\n  }\n\n  const getScans = async () => {\n    const model = Object.assign({}, RepositoryModel);\n    model.apiGroup = 'registry.' + model.apiGroup;\n    if (isExtRegistry) {\n      model.plural = 'ext-repositories';\n    }\n\n    const scans = await k8sGet(model, repository.metadata.name, repository.metadata.namespace, { path: 'imagescanresults' });\n\n    setAddedTags(addedTags.map((addedTag) => {\n      addedTag.severity = getWorstScan(scans, addedTag.version);\n      return addedTag;\n    }));\n  }\n\n  // const showSigner = repository.metadata.labels?.app === 'registry' ? true : false;\n\n\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Registry Details\" />\n        <div className=\"row\">\n          <div className=\"col-lg-6\">\n            <ResourceSummary resource={repository} showPodSelector={false} showNodeSelector={false} showAnnotations={false} showTolerations={false} />\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Tags\" />\n        <Tags repository={repository.metadata.name} tags={addedTags} namespace={repository.metadata.namespace} registry={repository.spec.registry} isExtRegistry={isExtRegistry} /* showSigner={showSigner} */ />\n      </div>\n    </>\n  );\n}\n\nconst { details, editYaml } = navFactory;\n\nconst RepositoriesDetailsPage: React.FC<RepositoriesDetailsPageProps> = props => <DetailsPage\n  {...props}\n  kind={kind}\n  menuActions={menuActions}\n  pages={[\n    details(RepositoryDetails),\n    editYaml(),\n  ]}\n/>;\n\n\ntype RepositoryDetailsProps = {\n  obj: K8sResourceKind;\n};\n\ntype RepositoriesDetailsPageProps = {\n  match: any;\n};\n\nexport { RepositoriesPage, RepositoriesDetailsPage };","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { k8sGet } from '../../module/k8s';\nimport { RepositoryModel } from '../../models/hypercloud';\nimport { compoundExpand, sortable } from '@patternfly/react-table';\nimport { Kebab, ResourceKebab } from '../utils';\nimport { SingleExpandableTable } from './utils/expandable-table';\nimport { ExpandableInnerTable } from './utils/expandable-inner-table';\n\nexport const menuActions = [Kebab.factory.ModifyScanning];\n\nconst tableColumnClasses = [\n  Kebab.columnClass,\n];\n\nexport const Tags: React.SFC<TagsProps> = ({ tags, namespace, repository, registry, isExtRegistry }) => {\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <TagsListTable tags={tags} namespace={namespace} repository={repository} registry={registry} isExtRegistry={isExtRegistry} />\n      </div>\n    </>\n  );\n}\n\nconst TagsListTable = ({ tags, namespace, repository, registry, isExtRegistry }) => {\n\n  const TagsListHeaderColumns = [\n    'Name',\n    'Signer',\n    {\n      title: 'Scan Result',\n      cellTransforms: [compoundExpand],\n    },\n    'Created Time',\n    {\n      title: '',\n      props: { className: tableColumnClasses[0] }\n    }\n  ];\n\n  const rowRenderer = (index, obj) => {\n    obj.registry = registry;\n    obj.repository = repository;\n    obj.kind = 'Tag';\n    obj.namespace = namespace;\n    obj.isExtRegistry = isExtRegistry;\n    return [\n      {\n        title: obj?.version,\n      },\n      {\n        title: obj?.signer,\n      },\n      {\n        title: obj?.severity,\n        props: {\n          isOpen: false,\n        },\n      },\n      {\n        title: obj?.createdAt\n      },\n      {\n        title: <ResourceKebab actions={menuActions} kind='Tag' resource={obj} />,\n        props: { className: tableColumnClasses[0] }\n      }\n    ];\n  };\n\n  const innerRenderer = parentItem => {\n\n    const ScanResultTableRow = obj => {\n      return [\n        {\n          title: <a href={obj.link} target=\"_blank\">{obj.name}</a>,\n          textValue: obj.name,\n        },\n        {\n          title: obj.severity,\n          textValue: obj.severity,\n        },\n        {\n          title: obj.version,\n          textValue: obj.version,\n        },\n      ];\n    };\n\n    const ScanResultTableHeader = [\n      {\n        title: 'Vulnerability',\n        sortFunc: 'string',\n        transforms: [sortable],\n      },\n      {\n        title: 'Status',\n        transforms: [sortable],\n      },\n      {\n        title: 'Fixable Version',\n        transforms: [sortable],\n      },\n    ];\n\n    const model = Object.assign({}, RepositoryModel);\n    model.apiGroup = 'registry.' + model.apiGroup;\n    if (isExtRegistry) {\n      model.plural = 'ext-repositories';\n    }\n\n    return k8sGet(model, repository, namespace, { path: `imagescanresults/${parentItem.version}` })\n      .then(res => {\n        const innerItemsData = [];\n        const resObj = _.get(res, parentItem.version);\n\n        for (const proerty in resObj) {\n          for (let i = 0; i < resObj[proerty].length; ++i) {\n            innerItemsData.push({\n              severity: resObj[proerty][i].Severity,\n              name: resObj[proerty][i].Name,\n              version: resObj[proerty][i].NamespaceName,\n              link: resObj[proerty][i].Link\n            });\n          }\n        }\n        return <ExpandableInnerTable aria-label=\"Scan Result\" header={ScanResultTableHeader} Row={ScanResultTableRow} data={innerItemsData} />;\n      })\n      .catch(err => {\n        return <div>{err}</div>;\n      });\n  }\n\n  return <SingleExpandableTable header={TagsListHeaderColumns} itemList={tags} rowRenderer={rowRenderer} innerRenderer={innerRenderer} compoundParent={2}></SingleExpandableTable>;\n}\n\nexport type TagsProps = {\n  tags: any;\n  namespace: string;\n  repository?: string;\n  registry?: string;\n  isExtRegistry?: boolean;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport { Table as PfTable, TableHeader, TableBody, SortByDirection, ICell } from '@patternfly/react-table';\nexport const ExpandableInnerTable: React.FC<ExpandableInnerTableProps> = ({ data, header, Row }) => {\n  const [sortBy, setSortBy] = useState({\n    index: 0,\n    direction: SortByDirection.asc,\n  });\n\n  const [rows, setRows] = useState([]);\n\n  useEffect(() => {\n    const preData = [];\n    _.forEach(data, (value, index) => {\n      preData.push({ cells: Row(value) });\n    });\n    setRows(preData);\n  }, []);\n\n  const onSort = (_event, index, direction) => {\n    if (direction === SortByDirection.asc) {\n      // MEMO: 오름차순 정렬\n      const sortedRows = _.cloneDeep(rows).sort((a, b) => {\n        if (a.cells[index].textValue < b.cells[index].textValue) {\n          return -1;\n        }\n        return a.cells[index].textValue > b.cells[index].textValue ? 1 : 0;\n      });\n\n      setSortBy({\n        index,\n        direction,\n      });\n\n      setRows(sortedRows);\n    } else {\n      // MEMO: 내림차순 정렬\n      const sortedRows = _.cloneDeep(rows).sort((a, b) => {\n        if (a.cells[index].textValue < b.cells[index].textValue) {\n          return 1;\n        }\n        return a.cells[index].textValue > b.cells[index].textValue ? -1 : 0;\n      });\n\n      setSortBy({\n        index,\n        direction,\n      });\n\n      setRows(sortedRows);\n    }\n  };\n\n  return (\n    <div className=\"co-m-table-grid co-m-table-grid--bordered\">\n      <PfTable cells={header} rows={rows} className=\"pf-m-compact pf-m-border-rows\" aria-label=\"inner-table-label\" sortBy={sortBy} onSort={onSort}>\n        <TableHeader />\n        <TableBody />\n      </PfTable>\n    </div>\n  );\n};\n\nexport type RowFunctionArgs = {\n  obj: any;\n  index: number;\n  key: string;\n  style?: object;\n};\n\nexport type Cell = {\n  textValue: string;\n} & ICell;\n\nexport type ExpandableInnerTableProps = {\n  data?: any[];\n  header: any[];\n  Row?: (obj) => Cell[];\n};\n","import * as React from 'react';\nimport { useState, useEffect } from 'react';\nimport * as _ from 'lodash-es';\nimport { Table as PfTable, TableHeader as PfTableHeader, TableBody as PfTableBody, ICell } from '@patternfly/react-table';\n\nexport const SingleExpandableTable: React.FC<SingleExpandableTableProps> = ({ header, itemList, rowRenderer, innerRenderer, compoundParent }) => {\n  const [tableRows, setTableRows] = useState([]);\n  useEffect(() => {\n    const preData = [];\n    itemList\n      .reduce((result, item, index: number) => {\n        return result.then(async () => {\n          const innerTable = await innerRenderer(item);\n          if (!!innerTable) {\n            preData.push({\n              isOpen: false,\n              cells: rowRenderer(index, item, innerTable.props?.data?.length),\n            });\n\n            if (innerTable.props?.data?.length > 0) {\n              let parentValue = index * 2;\n              preData.push({\n                parent: parentValue,\n                compoundParent: compoundParent,\n                cells: [\n                  {\n                    title: innerTable,\n                    props: { colSpan: header.length, className: 'pf-m-no-padding' },\n                  },\n                ],\n              });\n            } else {\n              let parentValue = index * 2;\n              preData.push({\n                parent: parentValue,\n                compoundParent: compoundParent,\n                cells: [\n                  {\n                    title: <div>...No Data...</div>,\n                    props: { colSpan: header.length, className: 'pf-m-no-padding' },\n                  },\n                ],\n              });\n            }\n          }\n        });\n      }, Promise.resolve())\n      .then(() => {\n        setTableRows(_.cloneDeep(preData));\n      });\n  }, [itemList]);\n\n  // function delay() {\n  //   return new Promise(resolve => setTimeout(resolve, 300));\n  // }\n\n  const onExpand = (event, rowIndex, colIndex, isOpen, rowData, extraData) => {\n    let rows = _.cloneDeep(tableRows);\n    if (!isOpen) {\n      rows[rowIndex].cells.forEach((cell: ICell) => {\n        if (cell.props) cell.props.isOpen = false;\n      });\n      (rows[rowIndex].cells[colIndex] as ICell).props.isOpen = true;\n      rows[rowIndex].isOpen = true;\n    } else {\n      (rows[rowIndex].cells[colIndex] as ICell).props.isOpen = false;\n      rows[rowIndex].isOpen = rows[rowIndex].cells.some((cell: ICell) => cell.props && cell.props.isOpen);\n    }\n    setTableRows(rows);\n  };\n\n  return (\n    <PfTable aria-label=\"Compound expandable table\" onExpand={onExpand} rows={tableRows} cells={header}>\n      <PfTableHeader />\n      <PfTableBody />\n    </PfTable>\n  );\n};\n\ntype SingleExpandableTableProps = {\n  itemList: any[]; // outer table의 itemList\n  rowRenderer: (index, obj, itemCount: number) => any[]; // outer table의 row 한줄에 들어갈 요소들을 배열 형태로 return하는 renderer 함수\n  innerRenderer: (parentItem) => any; // inner table을 render하는 함수(ExpandableInnerTable 컴포넌트 사용해야됨)\n  header: (ICell | string)[]; // header column들의 배열. 펼침 기능을 사용할 column object에는 cellTransforms: [compoundExpand] 속성 넣어줘야 함.\n  compoundParent: number; // table 펼칠 수 있는 column의 index\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAQA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AAQA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAOA;AAGA;AAEA;AAEA;AAEA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAIA;AAEA;AAEA;AAKA;AACA;AACA;AAYA;;;;;;;;;;;;;ACpMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;ACtIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9DA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;;;;;A","sourceRoot":""}