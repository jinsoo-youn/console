{"version":3,"file":"dev-console-helm-install-upgrade~dev-console-helm-release-details~dev-console-helm-releases-list~dev~5a7857d2-0dca6b06a69c51565cd7.js","sources":["webpack:///./packages/dev-console/src/components/NamespacedPage.scss?186e","webpack:///./packages/dev-console/src/components/NamespacedPage.tsx","webpack:///./packages/dev-console/src/components/dropdown/ApplicationDropdown.tsx","webpack:///./packages/dev-console/src/components/dropdown/ApplicationSelector.tsx","webpack:///./packages/dev-console/src/components/helm/helm-types.ts","webpack:///./packages/dev-console/src/components/helm/helm-utils.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as cx from 'classnames';\nimport { NamespaceBar } from '@console/internal/components/namespace';\nimport ApplicationSelector from './dropdown/ApplicationSelector';\n\nimport './NamespacedPage.scss';\n\nexport enum NamespacedPageVariants {\n  light = 'light',\n  default = 'default',\n}\n\nexport interface NamespacedPageProps {\n  disabled?: boolean;\n  hideApplications?: boolean;\n  onNamespaceChange?: (newNamespace: string) => void;\n  variant?: NamespacedPageVariants;\n  toolbar?: React.ReactNode;\n}\n\nconst NamespacedPage: React.FC<NamespacedPageProps> = ({\n  children,\n  disabled,\n  onNamespaceChange,\n  hideApplications = true,\n  variant = NamespacedPageVariants.default,\n  toolbar,\n}) => (\n  <div className=\"odc-namespaced-page\">\n    <NamespaceBar disabled={disabled} onNamespaceChange={onNamespaceChange}>\n      {!hideApplications && <ApplicationSelector disabled={disabled} />}\n      {toolbar && <div className=\"odc-namespaced-page__toolbar\">{toolbar}</div>}\n    </NamespaceBar>\n    <div\n      className={cx('odc-namespaced-page__content', {\n        [`is-${variant}`]: variant !== NamespacedPageVariants.default,\n      })}\n    >\n      {children}\n    </div>\n  </div>\n);\n\nexport default NamespacedPage;\n","import * as React from 'react';\nimport { Firehose } from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { ServiceModel } from '@console/knative-plugin';\nimport { VirtualMachineModel } from '@console/kubevirt-plugin/src/models';\nimport { ResourceDropdown } from '@console/shared';\n\ninterface ApplicationDropdownProps {\n  id?: string;\n  className?: string;\n  dropDownClassName?: string;\n  menuClassName?: string;\n  buttonClassName?: string;\n  title?: React.ReactNode;\n  titlePrefix?: string;\n  allApplicationsKey?: string;\n  storageKey?: string;\n  disabled?: boolean;\n  allSelectorItem?: {\n    allSelectorKey?: string;\n    allSelectorTitle?: string;\n  };\n  namespace?: string;\n  actionItems?: {\n    actionTitle: string;\n    actionKey: string;\n  }[];\n  selectedKey: string;\n  autoSelect?: boolean;\n  onChange?: (key: string, name?: string) => void;\n  onLoad?: (items: { [key: string]: string }) => void;\n}\n\nconst ApplicationDropdown: React.FC<ApplicationDropdownProps> = ({ namespace, ...props }) => {\n  const resources = [\n    {\n      isList: true,\n      namespace,\n      kind: 'DeploymentConfig',\n      prop: 'deploymentConfigs',\n    },\n    {\n      isList: true,\n      namespace,\n      kind: 'Deployment',\n      prop: 'deployments',\n    },\n    {\n      isList: true,\n      kind: 'StatefulSet',\n      namespace,\n      prop: 'statefulSets',\n    },\n    {\n      isList: true,\n      kind: 'DaemonSet',\n      namespace,\n      prop: 'daemonSets',\n    },\n    {\n      isList: true,\n      kind: referenceForModel(ServiceModel),\n      namespace,\n      prop: 'knativeService',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: 'Secret',\n      namespace,\n      prop: 'secrets',\n    },\n    {\n      isList: true,\n      kind: VirtualMachineModel.kind,\n      namespace,\n      prop: 'virtualMachines',\n      optional: true,\n    },\n  ];\n  return (\n    <Firehose resources={resources}>\n      <ResourceDropdown\n        {...props}\n        placeholder=\"Select an Application\"\n        dataSelector={['metadata', 'labels', 'app.kubernetes.io/part-of']}\n      />\n    </Firehose>\n  );\n};\n\nexport default ApplicationDropdown;\n","import * as React from 'react';\nimport { connect, Dispatch } from 'react-redux';\nimport {\n  ALL_NAMESPACES_KEY,\n  ALL_APPLICATIONS_KEY,\n  APPLICATION_LOCAL_STORAGE_KEY,\n} from '@console/shared';\nimport { setActiveApplication } from '@console/internal/actions/ui';\nimport { RootState } from '@console/internal/redux';\nimport { getActiveNamespace, getActiveApplication } from '@console/internal/reducers/ui';\nimport ApplicationDropdown from './ApplicationDropdown';\n\nexport interface ApplicationSelectorProps {\n  disabled?: boolean;\n}\n\ninterface StateProps {\n  namespace: string;\n  application: string;\n}\n\ninterface DispatchProps {\n  onChange: (name: string) => void;\n}\n\ntype Props = ApplicationSelectorProps & StateProps & DispatchProps;\n\nconst ApplicationSelector: React.FC<Props> = ({ namespace, application, onChange, disabled }) => {\n  if (namespace === ALL_NAMESPACES_KEY) return null;\n\n  const allApplicationsTitle = 'all applications';\n  const title: string = application === ALL_APPLICATIONS_KEY ? allApplicationsTitle : application;\n\n  const onApplicationChange = (newApplication: string, key: string) => {\n    key === ALL_APPLICATIONS_KEY ? onChange(key) : onChange(newApplication);\n  };\n\n  return (\n    <ApplicationDropdown\n      className=\"co-namespace-selector\"\n      menuClassName=\"co-namespace-selector__menu\"\n      buttonClassName=\"pf-m-plain\"\n      namespace={namespace}\n      title={title && <span className=\"btn-link__title\">{title}</span>}\n      titlePrefix=\"Application\"\n      allSelectorItem={{\n        allSelectorKey: ALL_APPLICATIONS_KEY,\n        allSelectorTitle: allApplicationsTitle,\n      }}\n      selectedKey={application || ALL_APPLICATIONS_KEY}\n      onChange={onApplicationChange}\n      storageKey={APPLICATION_LOCAL_STORAGE_KEY}\n      disabled={disabled}\n    />\n  );\n};\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  namespace: getActiveNamespace(state),\n  application: getActiveApplication(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => ({\n  onChange: (app: string) => {\n    dispatch(setActiveApplication(app));\n  },\n});\n\nexport default connect<StateProps, DispatchProps, ApplicationSelectorProps>(\n  mapStateToProps,\n  mapDispatchToProps,\n)(ApplicationSelector);\n","import { K8sResourceKind } from '@console/internal/module/k8s';\n\nexport interface HelmRelease {\n  name: string;\n  namespace: string;\n  chart: HelmChart;\n  info: {\n    description: string;\n    deleted: string;\n    first_deployed: string;\n    last_deployed: string;\n    status: string;\n    notes: string;\n  };\n  version: number | string;\n  hooks?: object[];\n  manifest?: string;\n}\n\nexport interface HelmChart {\n  files: { name: string; data: string }[];\n  metadata: HelmChartMetaData;\n  templates: object[];\n  values: object;\n  lock?: object;\n  schema?: string;\n}\n\nexport interface HelmChartMetaData {\n  name: string;\n  version: string;\n  description: string;\n  apiVersion: string;\n  appVersion: string;\n  keywords?: string[];\n  home?: string;\n  icon?: string;\n  sources?: string[];\n  maintainers?: object[];\n  dependencies?: object[];\n  type?: string;\n  urls: string[];\n}\n\nexport interface HelmReleaseResourcesData {\n  releaseName: string;\n  releaseVersion: number | string;\n  chartIcon: string;\n  manifestResources: K8sResourceKind[];\n  releaseNotes: string;\n}\n\nexport interface HelmReleaseResourcesMap {\n  [name: string]: HelmReleaseResourcesData;\n}\n\nexport enum HelmReleaseStatus {\n  Deployed = 'deployed',\n  Failed = 'failed',\n  Other = 'other',\n}\n\nexport enum HelmActionType {\n  Install = 'Install',\n  Upgrade = 'Upgrade',\n  Rollback = 'Rollback',\n}\n\nexport interface HelmActionConfigType {\n  title: string;\n  subTitle: string;\n  helmReleaseApi: string;\n  fetch: (url: string, json: any, options?: {}, timeout?: number) => Promise<any>;\n  redirectURL: string;\n}\n\nexport enum HelmActionOrigins {\n  details = 'details',\n  list = 'list',\n  topology = 'topology',\n}\n","import * as fuzzy from 'fuzzysearch';\nimport * as _ from 'lodash';\nimport { safeDump } from 'js-yaml';\nimport { coFetchJSON } from '@console/internal/co-fetch';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport {\n  HelmRelease,\n  HelmChart,\n  HelmReleaseStatus,\n  HelmChartMetaData,\n  HelmActionType,\n  HelmActionConfigType,\n  HelmActionOrigins,\n} from './helm-types';\nimport { RowFilter } from '@console/internal/components/filter-toolbar';\n\nexport const HelmReleaseStatusLabels = {\n  [HelmReleaseStatus.Deployed]: 'Deployed',\n  [HelmReleaseStatus.Failed]: 'Failed',\n  [HelmReleaseStatus.Other]: 'Other',\n};\n\nexport const SelectedReleaseStatuses = [\n  HelmReleaseStatus.Deployed,\n  HelmReleaseStatus.Failed,\n  HelmReleaseStatus.Other,\n];\n\nexport const OtherReleaseStatuses = [\n  'unknown',\n  'uninstalled',\n  'superseded',\n  'uninstalling',\n  'pending-install',\n  'pending-upgrade',\n  'pending-rollback',\n];\n\nexport const releaseStatusReducer = (release: HelmRelease) => {\n  if (OtherReleaseStatuses.includes(release.info.status)) {\n    return HelmReleaseStatus.Other;\n  }\n  return release.info.status;\n};\n\nexport const helmReleasesRowFilters: RowFilter[] = [\n  {\n    filterGroupName: 'Status',\n    type: 'helm-release-status',\n    reducer: releaseStatusReducer,\n    items: SelectedReleaseStatuses.map((status) => ({\n      id: status,\n      title: HelmReleaseStatusLabels[status],\n    })),\n  },\n];\n\nexport const filterHelmReleasesByStatus = (releases: HelmRelease[], filter: string | string[]) => {\n  return releases.filter((release: HelmRelease) => {\n    return OtherReleaseStatuses.includes(release.info.status)\n      ? filter.includes(HelmReleaseStatus.Other)\n      : filter.includes(release.info.status);\n  });\n};\n\nexport const filterHelmReleasesByName = (releases: HelmRelease[], filter: string) => {\n  return releases.filter((release: HelmRelease) => fuzzy(filter, release.name));\n};\n\nexport const fetchHelmReleases = (\n  namespace: string,\n  helmReleaseName?: string,\n): Promise<HelmRelease[]> => {\n  const fetchString = `/api/helm/releases?ns=${namespace}${\n    helmReleaseName ? `&name=${helmReleaseName}` : ''\n  }`;\n  return coFetchJSON(fetchString);\n};\n\nexport const getChartURL = (helmChartData: HelmChartMetaData[], chartVersion: string): string => {\n  const chartData: HelmChartMetaData = _.find(helmChartData, (obj) => obj.version === chartVersion);\n  return chartData?.urls[0];\n};\n\nexport const getChartVersions = (chartEntries: HelmChartMetaData[]) => {\n  const chartVersions = _.reduce(\n    chartEntries,\n    (obj, chart) => {\n      obj[chart.version] = chart.version;\n      return obj;\n    },\n    {},\n  );\n  return chartVersions;\n};\n\nexport const getOriginRedirectURL = (\n  actionOrigin: string,\n  namespace: string,\n  releaseName?: string,\n) => {\n  switch (actionOrigin) {\n    case HelmActionOrigins.topology:\n      return `/topology/ns/${namespace}/graph`;\n    case HelmActionOrigins.list:\n      return `/helm-releases/ns/${namespace}`;\n    case HelmActionOrigins.details:\n      return `/helm-releases/ns/${namespace}/release/${releaseName}`;\n    default:\n      return `/helm-releases/ns/${namespace}`;\n  }\n};\n\nexport const getHelmActionConfig = (\n  helmAction: HelmActionType,\n  releaseName: string,\n  namespace: string,\n  actionOrigin?: HelmActionOrigins,\n  chartURL?: string,\n): HelmActionConfigType | undefined => {\n  switch (helmAction) {\n    case HelmActionType.Install:\n      return {\n        title: 'Install Helm Chart',\n        subTitle: 'The helm chart will be installed using the YAML shown in the editor below.',\n        helmReleaseApi: `/api/helm/chart?url=${chartURL}`,\n        fetch: coFetchJSON.post,\n        redirectURL: getOriginRedirectURL(HelmActionOrigins.topology, namespace, releaseName),\n      };\n    case HelmActionType.Upgrade:\n      return {\n        title: 'Upgrade Helm Release',\n        subTitle:\n          'Upgrade by selecting a new chart version or manually changing the YAML shown in the editor below.',\n        helmReleaseApi: `/api/helm/release?ns=${namespace}&name=${releaseName}`,\n        fetch: coFetchJSON.put,\n        redirectURL: getOriginRedirectURL(actionOrigin, namespace, releaseName),\n      };\n\n    case HelmActionType.Rollback:\n      return {\n        title: 'Rollback Helm Release',\n        subTitle: ``,\n        helmReleaseApi: `/api/helm/release/history?ns=${namespace}&name=${releaseName}`,\n        fetch: coFetchJSON.patch,\n        redirectURL: getOriginRedirectURL(actionOrigin, namespace, releaseName),\n      };\n    default:\n      return undefined;\n  }\n};\n\nexport const flattenReleaseResources = (resources: { [kind: string]: { data: K8sResourceKind } }) =>\n  Object.keys(resources).reduce((acc, kind) => {\n    if (!_.isEmpty(resources[kind].data)) {\n      acc.push(resources[kind].data);\n    }\n    return acc;\n  }, []);\n\nexport const getChartValuesYAML = (chart: HelmChart): string => {\n  const orderedValuesFile = chart?.files?.find((file) => file.name === 'ordered-values.yaml');\n  const orderedValues = orderedValuesFile ? atob(orderedValuesFile.data) : '';\n\n  if (orderedValues) return orderedValues;\n\n  return !_.isEmpty(chart?.values) ? safeDump(chart?.values) : '';\n};\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AAUA;AASA;AACA;AACA;AAEA;AAEA;AACA;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AA4BA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AAEA;;;;;;;;;;;;;AC3FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAKA;AAEA;AACA;AAiBA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AASA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACZA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAUA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAWA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAGA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AAEA;AAAA;AAEA;AACA;;;;;A","sourceRoot":""}