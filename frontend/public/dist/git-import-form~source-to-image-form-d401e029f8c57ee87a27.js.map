{"version":3,"file":"git-import-form~source-to-image-form-d401e029f8c57ee87a27.js","sources":["webpack:///./packages/dev-console/src/components/import/pipeline/PipelineSection.tsx","webpack:///./packages/dev-console/src/components/import/pipeline/PipelineTemplate.tsx","webpack:///./packages/dev-console/src/components/import/section/ResourceSection.scss?a197","webpack:///./packages/dev-console/src/components/import/section/ResourceSection.tsx","webpack:///./packages/dev-console/src/components/pipelines/detail-page-tabs/pipeline-details/PipelineVisualization.tsx"],"sourcesContent":["import * as React from 'react';\nimport { connectToFlags, FlagsObject } from '@console/internal/reducers/features';\nimport { Alert, Split, SplitItem } from '@patternfly/react-core';\nimport { getActiveNamespace } from '@console/internal/actions/ui';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport { TechPreviewBadge } from '@console/shared';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { PipelineModel, PipelineResourceModel } from '../../../models';\nimport { FLAG_OPENSHIFT_PIPELINE, CLUSTER_PIPELINE_NS } from '../../../const';\nimport { NormalizedBuilderImages } from '../../../utils/imagestream-utils';\nimport FormSection from '../section/FormSection';\nimport PipelineTemplate from './PipelineTemplate';\n\ntype PipelineSectionProps = {\n  flags: FlagsObject;\n  builderImages: NormalizedBuilderImages;\n};\n\nconst usePipelineAccessReview = (): boolean => {\n  const canListPipelines = useAccessReview({\n    group: PipelineModel.apiGroup,\n    resource: PipelineModel.plural,\n    namespace: CLUSTER_PIPELINE_NS,\n    verb: 'list',\n  });\n\n  const canCreatePipelines = useAccessReview({\n    group: PipelineModel.apiGroup,\n    resource: PipelineModel.plural,\n    namespace: getActiveNamespace(),\n    verb: 'create',\n  });\n\n  const canCreatePipelineResource = useAccessReview({\n    group: PipelineResourceModel.apiGroup,\n    resource: PipelineResourceModel.plural,\n    namespace: getActiveNamespace(),\n    verb: 'create',\n  });\n\n  return canListPipelines && canCreatePipelines && canCreatePipelineResource;\n};\n\nconst PipelineSection: React.FC<PipelineSectionProps> = ({ flags, builderImages }) => {\n  const { values } = useFormikContext<FormikValues>();\n\n  const hasCreatePipelineAccess = usePipelineAccessReview();\n\n  if (flags[FLAG_OPENSHIFT_PIPELINE] && hasCreatePipelineAccess) {\n    const title = (\n      <Split gutter=\"md\">\n        <SplitItem className=\"odc-form-section__heading\">Pipelines</SplitItem>\n        <SplitItem>\n          <TechPreviewBadge />\n        </SplitItem>\n      </Split>\n    );\n    return (\n      <FormSection title={title}>\n        {values.image.selected || values.build.strategy === 'Docker' ? (\n          <PipelineTemplate builderImages={builderImages} />\n        ) : (\n          <Alert\n            isInline\n            variant=\"info\"\n            title=\"Select a builder image and resource to see if there is a pipeline template available for this runtime.\"\n          />\n        )}\n      </FormSection>\n    );\n  }\n\n  return null;\n};\n\nexport default connectToFlags<PipelineSectionProps>(FLAG_OPENSHIFT_PIPELINE)(PipelineSection);\n","import * as React from 'react';\nimport { LoadingInline } from '@console/internal/components/utils';\nimport { k8sList } from '@console/internal/module/k8s';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { Alert, Expandable } from '@patternfly/react-core';\nimport { CheckboxField } from '@console/shared';\nimport { CLUSTER_PIPELINE_NS } from '../../../const';\nimport { PipelineModel } from '../../../models';\nimport PipelineVisualization from '../../pipelines/detail-page-tabs/pipeline-details/PipelineVisualization';\nimport { Pipeline } from '../../../utils/pipeline-augment';\nimport { NormalizedBuilderImages } from '../../../utils/imagestream-utils';\nimport { ReadableResourcesNames } from '../import-types';\n\nconst MISSING_DOCKERFILE_LABEL_TEXT =\n  'The pipeline template for Dockerfiles is not available at this time.';\n\nconst labelType = 'pipeline.openshift.io/type';\nconst labelRuntime = 'pipeline.openshift.io/runtime';\nconst labelDocker = 'pipeline.openshift.io/strategy';\n\nconst getAlertText = (\n  isDockerStrategy: boolean,\n  builderImage: string,\n  resourceType: string,\n): string => {\n  if (isDockerStrategy) return MISSING_DOCKERFILE_LABEL_TEXT;\n\n  return `There are no pipeline templates available for ${builderImage} and ${resourceType} combination.`;\n};\n\ntype PipelineTemplateProps = {\n  builderImages: NormalizedBuilderImages;\n};\n\nconst PipelineTemplate: React.FC<PipelineTemplateProps> = ({ builderImages }) => {\n  const [noTemplateForRuntime, setNoTemplateForRuntime] = React.useState(false);\n  const [isExpanded, setIsExpanded] = React.useState(false);\n  const pipelineStorageRef = React.useRef<{ [image: string]: Pipeline[] }>({});\n\n  const {\n    values: { pipeline, image, build, resources },\n    setFieldValue,\n  } = useFormikContext<FormikValues>();\n\n  const isDockerStrategy = build.strategy === 'Docker';\n\n  React.useEffect(() => {\n    let ignore = false;\n\n    const builderPipelineLabel = { [labelRuntime]: image.selected };\n    const dockerPipelineLabel = { [labelDocker]: 'docker' };\n\n    const labelSelector = isDockerStrategy ? dockerPipelineLabel : builderPipelineLabel;\n\n    const fetchPipelineTemplate = async () => {\n      let fetchedPipelines: Pipeline[] = null;\n      if (!pipelineStorageRef.current[image.selected]) {\n        fetchedPipelines = (await k8sList(PipelineModel, {\n          ns: CLUSTER_PIPELINE_NS,\n          labelSelector,\n        })) as Pipeline[];\n      }\n\n      if (ignore) return;\n\n      if (fetchedPipelines) {\n        pipelineStorageRef.current[image.selected] = fetchedPipelines;\n      }\n\n      const imagePipelines: Pipeline[] = pipelineStorageRef.current[image.selected] || [];\n      const resourceSpecificPipeline = imagePipelines.find(\n        (pl) => pl.metadata?.labels?.[labelType] === resources,\n      );\n      const pipelineTemplate =\n        resourceSpecificPipeline || imagePipelines.find((pl) => !pl.metadata?.labels?.[labelType]);\n\n      if (pipelineTemplate) {\n        setFieldValue('pipeline.template', pipelineTemplate);\n        setNoTemplateForRuntime(false);\n      } else {\n        setFieldValue('pipeline.template', null);\n        setNoTemplateForRuntime(true);\n      }\n    };\n\n    fetchPipelineTemplate();\n\n    return () => {\n      ignore = true;\n    };\n  }, [resources, image.selected, isDockerStrategy, setFieldValue]);\n\n  if (noTemplateForRuntime) {\n    const builderImageTitle = builderImages?.[image.selected]?.title || 'this builder image';\n    const resourceName = ReadableResourcesNames[resources];\n    return (\n      <Alert\n        isInline\n        variant=\"info\"\n        title={getAlertText(isDockerStrategy, builderImageTitle, resourceName)}\n      />\n    );\n  }\n\n  return pipeline.template ? (\n    <>\n      <CheckboxField label=\"Add pipeline\" name=\"pipeline.enabled\" />\n      <Expandable\n        toggleText={`${isExpanded ? 'Hide' : 'Show'} pipeline visualization`}\n        isExpanded={isExpanded}\n        onToggle={() => setIsExpanded(!isExpanded)}\n      >\n        {isExpanded && <PipelineVisualization pipeline={pipeline.template} />}\n      </Expandable>\n    </>\n  ) : (\n    <LoadingInline />\n  );\n};\n\nexport default PipelineTemplate;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { useField } from 'formik';\nimport { connectToFlags, FlagsObject } from '@console/internal/reducers/features';\nimport { K8sKind } from '@console/internal/module/k8s';\nimport { DeploymentModel, DeploymentConfigModel } from '@console/internal/models';\nimport { FLAG_KNATIVE_SERVING_SERVICE, ServiceModel } from '@console/knative-plugin';\nimport { RadioGroupField, RadioGroupOption } from '@console/shared';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport { getActiveNamespace } from '@console/internal/actions/ui';\nimport { Resources, ReadableResourcesNames } from '../import-types';\nimport FormSection from './FormSection';\nimport './ResourceSection.scss';\n\ntype ResourceSectionProps = {\n  flags: FlagsObject;\n};\n\nconst createHelpText = (k8sModel: K8sKind, helpText: string) => {\n  return (\n    <>\n      <div className=\"odc-resource-section__help-text\">\n        {k8sModel.apiGroup}/{k8sModel.kind}\n      </div>\n      <div>{helpText}</div>\n    </>\n  );\n};\n\nconst ResourceSection: React.FC<ResourceSectionProps> = ({ flags }) => {\n  const [field] = useField<Resources[]>('resourceTypesNotValid');\n  const invalidTypes = field.value || [];\n\n  const radioOptions: RadioGroupOption[] = [];\n  if (!invalidTypes.includes(Resources.Kubernetes)) {\n    radioOptions.push({\n      label: ReadableResourcesNames[Resources.Kubernetes],\n      value: Resources.Kubernetes,\n      children: createHelpText(\n        DeploymentModel,\n        `A ${DeploymentModel.label} enables declarative updates for Pods and ReplicaSets.`,\n      ),\n    });\n  }\n  if (!invalidTypes.includes(Resources.OpenShift)) {\n    radioOptions.push({\n      label: ReadableResourcesNames[Resources.OpenShift],\n      value: Resources.OpenShift,\n      children: createHelpText(\n        DeploymentConfigModel,\n        `A ${DeploymentConfigModel.label} defines the template for a pod \\\n        and manages deploying new images or configuration changes`,\n      ),\n    });\n  }\n\n  const knativeServiceAccess = useAccessReview({\n    group: ServiceModel.apiGroup,\n    resource: ServiceModel.plural,\n    namespace: getActiveNamespace(),\n    verb: 'create',\n  });\n  const canIncludeKnative =\n    !invalidTypes.includes(Resources.KnativeService) &&\n    flags[FLAG_KNATIVE_SERVING_SERVICE] &&\n    knativeServiceAccess;\n  if (canIncludeKnative) {\n    radioOptions.push({\n      label: ReadableResourcesNames[Resources.KnativeService],\n      value: Resources.KnativeService,\n      children: createHelpText(ServiceModel, `A Knative Service enables scaling to zero when idle`),\n    });\n  }\n  return (\n    <FormSection title=\"Resources\" fullWidth>\n      <div>Select the resource type to generate</div>\n      <RadioGroupField name=\"resources\" options={radioOptions} />\n    </FormSection>\n  );\n};\n\nexport default connectToFlags(FLAG_KNATIVE_SERVING_SERVICE)(ResourceSection);\n","import * as React from 'react';\nimport { Alert } from '@patternfly/react-core';\nimport { Pipeline, PipelineRun } from '../../../../utils/pipeline-augment';\nimport PipelineTopologyGraph from '../../pipeline-topology/PipelineTopologyGraph';\nimport { getTopologyNodesEdges } from '../../pipeline-topology/utils';\nimport { PipelineLayout } from '../../pipeline-topology/const';\n\nimport './PipelineVisualization.scss';\n\ninterface PipelineTopologyVisualizationProps {\n  pipeline: Pipeline;\n  pipelineRun?: PipelineRun;\n}\n\nconst PipelineVisualization: React.FC<PipelineTopologyVisualizationProps> = ({\n  pipeline,\n  pipelineRun,\n}) => {\n  const { nodes, edges } = getTopologyNodesEdges(pipeline, pipelineRun);\n\n  if (nodes.length === 0 && edges.length === 0) {\n    // Nothing to render\n    // TODO: Confirm wording with UX; ODC-1860\n    return <Alert variant=\"info\" isInline title=\"This Pipeline has no tasks to visualize.\" />;\n  }\n\n  return (\n    <div className=\"odc-pipeline-visualization\">\n      <PipelineTopologyGraph\n        id={pipelineRun?.metadata?.name || pipeline.metadata.name}\n        nodes={nodes}\n        edges={edges}\n        layout={PipelineLayout.DAGRE_VIEWER}\n      />\n    </div>\n  );\n};\n\nexport default PipelineVisualization;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AAaA;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAGA;AACA;AACA;AAEA;AAKA;AAAA;AAEA;AACA;AAMA;;AACA;AACA;AACA;AAEA;AAKA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AAGA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AAEA;AAEA;AACA;AAWA;AAEA;;;;;;;;;;;;ACxHA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AACA;;AAAA;AAEA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;;;;;;;;;;;;;AChFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAOA;;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAQA;AAEA;;;;;A","sourceRoot":""}