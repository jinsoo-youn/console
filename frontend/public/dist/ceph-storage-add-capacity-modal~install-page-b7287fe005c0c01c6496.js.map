{"version":3,"file":"ceph-storage-add-capacity-modal~install-page-b7287fe005c0c01c6496.js","sources":["webpack:///./packages/ceph-storage-plugin/src/components/modals/add-capacity-modal/_add-capacity-modal.scss?6e52","webpack:///./packages/ceph-storage-plugin/src/components/modals/storage-class-dropdown.scss?62ba","webpack:///./packages/ceph-storage-plugin/src/components/modals/storage-class-dropdown.tsx","webpack:///./packages/ceph-storage-plugin/src/components/ocs-install/pvs-available-capacity.scss?2575","webpack:///./packages/ceph-storage-plugin/src/components/ocs-install/pvs-available-capacity.tsx","webpack:///./packages/ceph-storage-plugin/src/constants/ocs-install.ts","webpack:///./packages/ceph-storage-plugin/src/constants/resources.ts","webpack:///./packages/ceph-storage-plugin/src/selectors/index.ts","webpack:///./packages/ceph-storage-plugin/src/utils/osd-size-dropdown.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Firehose } from '@console/internal/components/utils';\nimport { StorageClassResourceKind } from '@console/internal/module/k8s';\nimport { StorageClassDropdownInner } from '@console/internal/components/utils/storage-class-dropdown';\nimport './storage-class-dropdown.scss';\n\nconst ocsProvisioners = [\n  'ceph.rook.io/block',\n  'cephfs.csi.ceph.com',\n  'rbd.csi.ceph.com',\n  'noobaa.io/obc',\n];\n\nconst StorageClassDropdown = (props: any) => {\n  const scConfig = _.cloneDeep(props);\n  /* 'S' of Storage should be Capital as its defined key in resources object */\n  const scLoaded = _.get(scConfig.resources.StorageClass, 'loaded');\n  const scData = _.get(scConfig.resources.StorageClass, 'data', []) as StorageClassResourceKind[];\n\n  const filteredSCData = scData.filter((sc: StorageClassResourceKind) =>\n    ocsProvisioners.every((provisioner: string) => !sc?.provisioner?.includes(provisioner)),\n  );\n\n  if (scLoaded) {\n    scConfig.resources.StorageClass.data = filteredSCData;\n  }\n\n  return <StorageClassDropdownInner {...scConfig} id=\"ceph-sc-dropdown\" />;\n};\n\nexport const OCSStorageClassDropdown: React.FC<OCSStorageClassDropdownProps> = (props) => {\n  const { onChange, defaultClass } = props;\n\n  return (\n    <>\n      <Firehose resources={[{ kind: 'StorageClass', prop: 'StorageClass', isList: true }]}>\n        <StorageClassDropdown\n          onChange={onChange}\n          name=\"storageClass\"\n          defaultClass={defaultClass}\n          hideClassName=\"ceph-sc-dropdown__hide-default\"\n          required\n        />\n      </Firehose>\n    </>\n  );\n};\n\ntype OCSStorageClassDropdownProps = {\n  onChange: (sc: StorageClassResourceKind) => void;\n  defaultClass?: string;\n};\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { StorageClassResourceKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport { humanizeBinaryBytes } from '@console/internal/components/utils/';\nimport { getName } from '@console/shared';\nimport { pvResource } from '../../constants/resources';\nimport { calcPVsCapacity, getSCAvailablePVs } from '../../selectors';\nimport '../modals/add-capacity-modal/_add-capacity-modal.scss';\nimport './pvs-available-capacity.scss';\n\nexport const PVsAvailableCapacity: React.FC<PVAvaialbleCapacityProps> = ({ replica, sc }) => {\n  const [data, loaded, loadError] = useK8sWatchResource<K8sResourceKind[]>(pvResource);\n  let availableCapacity: string = '';\n\n  let availableStatusEl = (\n    <div className=\"skeleton-text ceph-pvs-available-capacity__current-capacity--loading\" />\n  );\n\n  if ((loadError || data.length === 0) && loaded) {\n    availableStatusEl = <div className=\"text-muted\">Not Available</div>;\n  } else if (loaded) {\n    const pvs = getSCAvailablePVs(data, getName(sc));\n    availableCapacity = humanizeBinaryBytes(calcPVsCapacity(pvs)).string;\n    availableStatusEl = <div>{`${availableCapacity} / ${replica} replicas`}</div>;\n  }\n\n  return (\n    <div className=\"ceph-add-capacity__current-capacity\">\n      <div className=\"text-secondary ceph-add-capacity__current-capacity--text\">\n        <strong>Available capacity:</strong>\n      </div>\n      {availableStatusEl}\n    </div>\n  );\n};\n\ntype PVAvaialbleCapacityProps = {\n  replica: string;\n  sc: StorageClassResourceKind;\n};\n","import { K8sResourceKind, Taint } from '@console/internal/module/k8s';\n\nexport const minSelectedNode = 3;\nexport const ocsTaint: Taint = {\n  key: 'node.ocs.openshift.io/storage',\n  value: 'true',\n  effect: 'NoSchedule',\n};\nObject.freeze(ocsTaint);\n\nexport const storageClassTooltip =\n  'The Storage Class will be used to request storage from the underlying infrastructure to create the backing persistent volumes that will be used to provide the OpenShift Container Storage (OCS) service.';\nexport const labelTooltip =\n  'The backing storage requested will be higher as it will factor in the requested capacity, replica factor, and fault tolerant costs associated with the requested capacity.';\n\nexport const ocsRequestData: K8sResourceKind = {\n  apiVersion: 'ocs.openshift.io/v1',\n  kind: 'StorageCluster',\n  metadata: {\n    name: 'ocs-storagecluster',\n    namespace: 'openshift-storage',\n  },\n  spec: {\n    manageNodes: false,\n    storageDeviceSets: [\n      {\n        name: 'ocs-deviceset',\n        count: 1,\n        replica: 3,\n        resources: {},\n        placement: {},\n        portable: true,\n        dataPVCTemplate: {\n          spec: {\n            storageClassName: '',\n            accessModes: ['ReadWriteOnce'],\n            volumeMode: 'Block',\n            resources: {\n              requests: {\n                storage: '',\n              },\n            },\n          },\n        },\n      },\n    ],\n  },\n};\n\nexport const infraProvisionerMap = {\n  aws: 'kubernetes.io/aws-ebs',\n  vsphere: 'kubernetes.io/vsphere-volume',\n};\n\nexport enum defaultRequestSize {\n  BAREMETAL = '1',\n  NON_BAREMETAL = '2Ti',\n}\n","import { FirehoseResource } from '@console/internal/components/utils/index';\nimport { referenceForModel } from '@console/internal/module/k8s/k8s';\nimport { PersistentVolumeModel } from '@console/internal/models';\nimport { WatchK8sResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { CephClusterModel } from '../models';\n\nexport const cephClusterResource: FirehoseResource = {\n  kind: referenceForModel(CephClusterModel),\n  namespaced: false,\n  isList: true,\n  prop: 'ceph',\n};\n\nexport const pvResource: WatchK8sResource = {\n  kind: PersistentVolumeModel.kind,\n  namespaced: false,\n  isList: true,\n};\n","import * as _ from 'lodash';\nimport { Alert } from '@console/internal/components/monitoring';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { FirehoseResult, convertToBaseValue } from '@console/internal/components/utils';\nimport { cephStorageProvisioners } from '@console/shared/src/utils';\nimport { OCS_OPERATOR } from '../constants';\n\nexport const cephStorageLabel = 'cluster.ocs.openshift.io/openshift-storage';\n\nconst enum status {\n  BOUND = 'Bound',\n  AVAILABLE = 'Available',\n}\nexport const filterCephAlerts = (alerts: Alert[]): Alert[] =>\n  alerts.filter((alert) => _.get(alert, 'annotations.storage_type') === 'ceph');\n\nexport const getCephPVs = (pvsData: K8sResourceKind[] = []): K8sResourceKind[] =>\n  pvsData.filter((pv) => {\n    return cephStorageProvisioners.some((provisioner: string) =>\n      _.get(pv, 'metadata.annotations[\"pv.kubernetes.io/provisioned-by\"]', '').includes(\n        provisioner,\n      ),\n    );\n  });\n\nconst getPVStorageClass = (pv: K8sResourceKind) => _.get(pv, 'spec.storageClassName');\nconst getStorageClassName = (pvc: K8sResourceKind) =>\n  _.get(pvc, ['metadata', 'annotations', 'volume.beta.kubernetes.io/storage-class']) ||\n  _.get(pvc, 'spec.storageClassName');\nconst isBound = (pvc: K8sResourceKind) => pvc.status.phase === status.BOUND;\n\nexport const getCephPVCs = (\n  cephSCNames: string[] = [],\n  pvcsData: K8sResourceKind[] = [],\n  pvsData: K8sResourceKind[] = [],\n): K8sResourceKind[] => {\n  const cephPVs = getCephPVs(pvsData);\n  const cephSCNameSet = new Set<string>([...cephSCNames, ...cephPVs.map(getPVStorageClass)]);\n  const cephBoundPVCUIDSet = new Set<string>(_.map(cephPVs, 'spec.claimRef.uid'));\n  // If the PVC is bound use claim uid(links PVC to PV) else storage class to verify it's provisioned by ceph.\n  return pvcsData.filter((pvc: K8sResourceKind) =>\n    isBound(pvc)\n      ? cephBoundPVCUIDSet.has(pvc.metadata.uid)\n      : cephSCNameSet.has(getStorageClassName(pvc)),\n  );\n};\n\nexport const getCephNodes = (nodesData: K8sResourceKind[] = []): K8sResourceKind[] =>\n  nodesData.filter((node) => _.keys(_.get(node, 'metadata.labels')).includes(cephStorageLabel));\n\nexport const getCephSC = (scData: K8sResourceKind[]): K8sResourceKind[] =>\n  scData.filter((sc) => {\n    return cephStorageProvisioners.some((provisioner: string) =>\n      _.get(sc, 'provisioner', '').includes(provisioner),\n    );\n  });\n\nexport const getOCSVersion = (items: FirehoseResult): string => {\n  const itemsData: K8sResourceKind[] = _.get(items, 'data');\n  const operator: K8sResourceKind = _.find(\n    itemsData,\n    (item) => _.get(item, 'spec.name') === OCS_OPERATOR,\n  );\n  return _.get(operator, 'status.installedCSV');\n};\n\nexport const calcPVsCapacity = (pvs: K8sResourceKind[]): number =>\n  pvs.reduce((sum, pv) => {\n    const storage = Number(convertToBaseValue(pv.spec.capacity.storage));\n    return sum + storage;\n  }, 0);\n\nexport const getSCAvailablePVs = (pvsData: K8sResourceKind[], sc: string): K8sResourceKind[] =>\n  pvsData.filter((pv) => getPVStorageClass(pv) === sc && pv.status.phase === status.AVAILABLE);\n","import * as React from 'react';\nimport { Dropdown } from '@console/internal/components/utils';\n\nexport const OSD_CAPACITY_SIZES = {\n  '512Gi': {\n    scale: 'SmallScale',\n    size: 0.5,\n    title: '0.5 TiB',\n  },\n  '2Ti': {\n    scale: 'Standard',\n    size: 2,\n    title: '2 TiB',\n  },\n  '4Ti': {\n    scale: 'LargeScale',\n    size: 4,\n    title: '4 TiB',\n  },\n};\n\nconst DropdownOptionsItem: React.FC<DropdownOptionsItemProps> = ({ title, scale }) => (\n  <span className=\"co-resource-item\">\n    <span className=\"co-resource-item__resource-name\">\n      {title}\n      <>\n        &nbsp;\n        <div className=\"co-resource-item__resource-api text-muted co-truncate show co-nowrap small\">\n          {scale}\n        </div>\n      </>\n    </span>\n  </span>\n);\n\ntype DropdownOptionsItemProps = { title: string; scale: string };\n\nexport const OSDSizeDropdown: React.FC<OSDSizeDropdownProps> = ({\n  selectedKey,\n  onChange,\n  className,\n}) => {\n  const dropdownOptionsKeys: string[] = Object.keys(OSD_CAPACITY_SIZES);\n  const dropdownOptions: DropdownOptions = dropdownOptionsKeys.reduce((dropdownObject, key) => {\n    dropdownObject[key] = (\n      <DropdownOptionsItem\n        title={OSD_CAPACITY_SIZES[key].title}\n        scale={OSD_CAPACITY_SIZES[key].scale}\n      />\n    );\n    return dropdownObject;\n  }, {});\n  return (\n    <Dropdown\n      id=\"ocs-service-capacity-dropdown\"\n      items={dropdownOptions}\n      title={OSD_CAPACITY_SIZES[selectedKey].title}\n      onChange={onChange}\n      selectedKey={selectedKey}\n      noSelection\n      buttonClassName={className}\n    />\n  );\n};\n\ntype DropdownOptions = { [key: string]: React.ReactNode };\n\ntype OSDSizeDropdownProps = {\n  className: string;\n  selectedKey: string;\n  onChange: React.Dispatch<React.SetStateAction<string>>;\n};\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAUA;;;;;;;;;;;;AC/CA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAGA;;;;;;;;;;;;;AChCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;;;;;;;;;;;;;ACxDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAKA;AAEA;AACA;AAEA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAGA;AAEA;AAGA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;ACxEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;;AAEA;AAUA;AAKA;AACA;AACA;AAMA;AACA;AACA;AAWA;;;;;A","sourceRoot":""}