{"version":3,"file":"operand-fb994497177a99d94b01.js","sources":["webpack:///./packages/operator-lifecycle-manager/src/components/descriptors/spec/configure-size.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/descriptors/spec/configure-update-strategy.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/descriptors/spec/endpoint.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/descriptors/spec/index.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/descriptors/status/index.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/descriptors/status/phase.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/descriptors/status/pods.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/k8s-resource.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/modals/update-strategy-modal.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/operand/index.tsx","webpack:///./packages/operator-lifecycle-manager/src/components/operand/operand-link.tsx","webpack:///./packages/operator-lifecycle-manager/src/utils.ts"],"sourcesContent":["import { configureCountModal } from '@console/internal/components/modals';\nimport { K8sResourceKind, K8sKind } from '@console/internal/module/k8s';\nimport { Descriptor } from '../types';\n\nexport const configureSizeModal = ({\n  kindObj,\n  resource,\n  specDescriptor,\n  specValue,\n}: ConfigureSizeModalProps) => {\n  return configureCountModal({\n    resourceKind: kindObj,\n    resource,\n    defaultValue: specValue || 0,\n    title: `Modify ${specDescriptor.displayName}`,\n    message: specDescriptor.description,\n    path: `/spec/${specDescriptor.path}`,\n    buttonText: `Update ${specDescriptor.displayName}`,\n  });\n};\n\ntype ConfigureSizeModalProps = {\n  kindObj: K8sKind;\n  resource: K8sResourceKind;\n  specDescriptor: Descriptor;\n  specValue: any;\n};\n","import { K8sKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport { updateStrategyModal } from '../../modals/update-strategy-modal';\nimport { Descriptor } from '../types';\n\nexport const configureUpdateStrategyModal = ({\n  kindObj,\n  resource,\n  specDescriptor,\n  specValue,\n}: ConfigureUpdateStrategyModalProps) => {\n  return updateStrategyModal({\n    resourceKind: kindObj,\n    resource,\n    defaultValue: specValue,\n    title: `Edit ${specDescriptor.displayName}`,\n    path: `/spec/${specDescriptor.path}`,\n  });\n};\n\ntype ConfigureUpdateStrategyModalProps = {\n  kindObj: K8sKind;\n  resource: K8sResourceKind;\n  specDescriptor: Descriptor;\n  specValue: any;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { ResourceIcon } from '@console/internal/components/utils';\n\nexport const EndpointRow: React.SFC<EndpointRowProps> = ({ endpoint }) => {\n  const detail = ['scheme', 'honorLabels', 'targetPort'].reduce(\n    (element, field) =>\n      _.get(endpoint, field) ? (\n        <span>\n          <span className=\"text-muted\">{field}:</span>\n          {_.get(endpoint, field)}\n        </span>\n      ) : (\n        element\n      ),\n    <span className=\"text-muted\">--</span>,\n  );\n\n  return (\n    <div className=\"co-ip-row\">\n      <div className=\"row\">\n        <div className=\"col-xs-6\">\n          <p>\n            <ResourceIcon kind=\"Service\" />\n            {endpoint.port || '--'}\n          </p>\n        </div>\n        <div className=\"col-xs-2\">\n          <p>{endpoint.interval || '--'}</p>\n        </div>\n        <div className=\"col-xs-4\">{detail}</div>\n      </div>\n    </div>\n  );\n};\n\nexport const EndpointList: React.SFC<EndpointListProps> = (props) => (\n  <div className=\"service-ips\">\n    <div className=\"row co-ip-header\">\n      <div className=\"col-xs-6\">Port</div>\n      <div className=\"col-xs-2\">Interval</div>\n      <div className=\"col-xs-4\" />\n    </div>\n    <div className=\"rows\">\n      {props.endpoints ? (\n        props.endpoints.map((e) => <EndpointRow endpoint={e} key={e.port} />)\n      ) : (\n        <span className=\"text-muted\">No endpoints</span>\n      )}\n    </div>\n  </div>\n);\n\n/**\n * Taken from https://github.com/coreos/prometheus-operator/blob/master/Documentation/api.md#endpoint\n */\nexport type Endpoint = {\n  port?: string;\n  targetPort?: number | string;\n  scheme?: string;\n  honorLabels?: boolean;\n  interval?: string;\n};\n\nexport type EndpointRowProps = {\n  endpoint: Endpoint;\n};\n\nexport type EndpointListProps = {\n  endpoints: Endpoint[];\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Map as ImmutableMap } from 'immutable';\nimport { Button, Switch, Tooltip, Checkbox } from '@patternfly/react-core';\nimport { EyeIcon, EyeSlashIcon, PencilAltIcon } from '@patternfly/react-icons';\nimport { LoadingInline, ResourceLink, Selector } from '@console/internal/components/utils';\nimport { withFallback } from '@console/shared/src/components/error/error-boundary';\nimport { k8sPatch, k8sUpdate } from '@console/internal/module/k8s';\nimport { YellowExclamationTriangleIcon } from '@console/shared';\nimport { SecretValue } from '@console/internal/components/configmap-and-secret-data';\nimport { CapabilityProps, DescriptorProps, SpecCapability, Error } from '../types';\nimport { ResourceRequirementsModalLink } from './resource-requirements';\nimport { EndpointList } from './endpoint';\nimport { configureSizeModal } from './configure-size';\nimport { configureUpdateStrategyModal } from './configure-update-strategy';\n\nconst Default: React.SFC<SpecCapabilityProps> = ({ value }) => {\n  if (_.isEmpty(value) && !_.isNumber(value) && !_.isBoolean(value)) {\n    return <span className=\"text-muted\">None</span>;\n  }\n  if (_.isObject(value)) {\n    return <span className=\"text-muted\">Unsupported</span>;\n  }\n  return <span>{_.toString(value)}</span>;\n};\n\nconst PodCount: React.SFC<SpecCapabilityProps> = ({ model, obj, descriptor, value }) => (\n  <Button\n    isInline\n    type=\"button\"\n    onClick={() =>\n      configureSizeModal({\n        kindObj: model,\n        resource: obj,\n        specDescriptor: descriptor,\n        specValue: value,\n      })\n    }\n    variant=\"link\"\n  >\n    {value} pods\n    <PencilAltIcon className=\"co-icon-space-l pf-c-button-icon--plain\" />\n  </Button>\n);\n\nconst Endpoints: React.SFC<SpecCapabilityProps> = ({ value }) => <EndpointList endpoints={value} />;\n\nconst Label: React.SFC<SpecCapabilityProps> = ({ value }) => <span>{value || '--'}</span>;\n\nconst NamespaceSelector: React.SFC<SpecCapabilityProps> = ({ value }) =>\n  _.get(value, 'matchNames[0]') ? (\n    <ResourceLink kind=\"Namespace\" name={value.matchNames[0]} title={value.matchNames[0]} />\n  ) : (\n    <span className=\"text-muted\">None</span>\n  );\n\nconst ResourceRequirements: React.SFC<SpecCapabilityProps> = ({ obj, descriptor }) => (\n  <dl className=\"co-spec-descriptor--resource-requirements\">\n    <dt>Resource Limits</dt>\n    <dd>\n      <ResourceRequirementsModalLink type=\"limits\" obj={obj} path={descriptor.path} />\n    </dd>\n    <dt>Resource Requests</dt>\n    <dd>\n      <ResourceRequirementsModalLink type=\"requests\" obj={obj} path={descriptor.path} />\n    </dd>\n  </dl>\n);\n\nconst K8sResourceLink: React.SFC<SpecCapabilityProps> = (props) => {\n  if (!props.value) {\n    return <span className=\"text-muted\">None</span>;\n  }\n\n  const kind = props.capability.split(SpecCapability.k8sResourcePrefix)[1];\n  if (!_.isString(props.value)) {\n    return (\n      <>\n        <YellowExclamationTriangleIcon /> Invalid spec descriptor: value at path &apos;\n        {props.descriptor.path}&apos; must be a {kind} resource name.\n      </>\n    );\n  }\n\n  return <ResourceLink kind={kind} name={props.value} namespace={props.namespace} />;\n};\n\nconst BasicSelector: React.SFC<SpecCapabilityProps> = ({ value, capability }) => (\n  <Selector selector={value} kind={capability.split(SpecCapability.selector)[1]} />\n);\n\nconst BooleanSwitch: React.FC<SpecCapabilityProps> = (props) => {\n  const { model, obj, descriptor, onHandleError } = props;\n  const convertedValue = !_.isNil(props.value) ? props.value : false;\n  const [value, setValue] = React.useState(convertedValue);\n  const [confirmed, setConfirmed] = React.useState(false);\n  const [errorMessage, setErrorMessage] = React.useState(null);\n\n  const errorCb = (err: Error): void => {\n    setConfirmed(false);\n    setValue(convertedValue);\n    setErrorMessage(err.message);\n    onHandleError(err.message);\n  };\n\n  const update = () => {\n    setConfirmed(true);\n    setErrorMessage(null);\n\n    if (_.has(obj, `spec.${descriptor.path}`)) {\n      const patchFor = (val: boolean) => [\n        { op: 'add', path: `/spec/${descriptor.path.replace(/\\./g, '/')}`, value: val },\n      ];\n      return k8sPatch(model, obj, patchFor(value)).catch((err) => errorCb(err));\n    }\n\n    const newObj = _.cloneDeep(obj);\n    _.set(newObj, `spec.${descriptor.path}`, value);\n    return k8sUpdate(model, newObj).catch((err) => errorCb(err));\n  };\n\n  return (\n    <>\n      <div className=\"co-spec-descriptor--switch\">\n        <Switch\n          id={descriptor.path}\n          isChecked={value}\n          onChange={(val) => {\n            setValue(val);\n            setConfirmed(false);\n            setErrorMessage(null);\n            onHandleError(null);\n          }}\n          label=\"True\"\n          labelOff=\"False\"\n        />\n        &nbsp;&nbsp;\n        {value !== convertedValue && confirmed && <LoadingInline />}\n        {value !== convertedValue && !confirmed && (\n          <>\n            &nbsp;&nbsp;\n            <Button className=\"pf-m-link--align-left\" type=\"button\" variant=\"link\" onClick={update}>\n              <YellowExclamationTriangleIcon className=\"co-icon-space-r pf-c-button-icon--plain\" />\n              Confirm change\n            </Button>\n          </>\n        )}\n      </div>\n      {errorMessage && (\n        <div className=\"cos-error-title co-break-word\">{errorMessage || 'An error occurred'}</div>\n      )}\n    </>\n  );\n};\n\nconst CheckboxUIComponent: React.FC<SpecCapabilityProps> = (props) => {\n  const convertedValue = !_.isNil(props.value) ? props.value : false;\n  const [value, setValue] = React.useState(convertedValue);\n  const [confirmed, setConfirmed] = React.useState(false);\n\n  const patchFor = (val: boolean) => [\n    { op: 'add', path: `/spec/${props.descriptor.path.replace('.', '/')}`, value: val },\n  ];\n  const update = () => {\n    setConfirmed(true);\n    return k8sPatch(props.model, props.obj, patchFor(value));\n  };\n\n  return (\n    <div className=\"co-spec-descriptor--switch\">\n      <Checkbox\n        id={props.descriptor.path}\n        style={{ marginLeft: '10px' }}\n        isChecked={value}\n        label={props.descriptor.displayName}\n        onChange={(val) => {\n          setValue(val);\n          setConfirmed(false);\n        }}\n      />\n      &nbsp;&nbsp;\n      {value !== convertedValue && confirmed && <LoadingInline />}\n      {value !== convertedValue && !confirmed && (\n        <>\n          &nbsp;&nbsp;\n          <Button className=\"pf-m-link--align-left\" type=\"button\" variant=\"link\" onClick={update}>\n            <YellowExclamationTriangleIcon className=\"co-icon-space-r pf-c-button-icon--plain\" />\n            Confirm change\n          </Button>\n        </>\n      )}\n    </div>\n  );\n};\n\nconst Secret: React.FC<SpecCapabilityProps> = (props) => {\n  const [reveal, setReveal] = React.useState(false);\n\n  return (\n    <>\n      <div className=\"co-toggle-reveal-value\">\n        <Button\n          type=\"button\"\n          variant=\"link\"\n          isInline\n          className=\"pf-m-link--align-right co-toggle-reveal-value__btn\"\n          onClick={() => setReveal(!reveal)}\n        >\n          {reveal ? (\n            <>\n              <EyeSlashIcon className=\"co-icon-space-r\" />\n              Hide Values\n            </>\n          ) : (\n            <>\n              <EyeIcon className=\"co-icon-space-r\" />\n              Reveal Values\n            </>\n          )}\n        </Button>\n        <SecretValue value={props.value} encoded={false} reveal={reveal} />\n      </div>\n    </>\n  );\n};\n\nconst UpdateStrategy: React.FC<SpecCapabilityProps> = ({ model, obj, descriptor, value }) => (\n  <Button\n    type=\"button\"\n    variant=\"link\"\n    isInline\n    onClick={() =>\n      configureUpdateStrategyModal({\n        kindObj: model,\n        resource: obj,\n        specDescriptor: descriptor,\n        specValue: value,\n      })\n    }\n  >\n    {_.get(value, 'type', 'None')}\n    <PencilAltIcon className=\"co-icon-space-l pf-c-button-icon--plain\" />\n  </Button>\n);\n\nconst capabilityComponents = ImmutableMap<\n  SpecCapability,\n  React.ComponentType<SpecCapabilityProps>\n>()\n  .set(SpecCapability.podCount, PodCount)\n  .set(SpecCapability.endpointList, Endpoints)\n  .set(SpecCapability.label, Label)\n  .set(SpecCapability.namespaceSelector, NamespaceSelector)\n  .set(SpecCapability.resourceRequirements, ResourceRequirements)\n  .set(SpecCapability.k8sResourcePrefix, K8sResourceLink)\n  .set(SpecCapability.selector, BasicSelector)\n  .set(SpecCapability.booleanSwitch, BooleanSwitch)\n  .set(SpecCapability.password, Secret)\n  .set(SpecCapability.updateStrategy, UpdateStrategy)\n  .set(SpecCapability.checkbox, CheckboxUIComponent)\n  .set(SpecCapability.hidden, null);\n\nconst capabilityFor = (specCapability: SpecCapability) => {\n  if (_.isEmpty(specCapability)) {\n    return Default;\n  }\n  if (specCapability.startsWith(SpecCapability.k8sResourcePrefix)) {\n    return capabilityComponents.get(SpecCapability.k8sResourcePrefix);\n  }\n  if (specCapability.startsWith(SpecCapability.selector)) {\n    return capabilityComponents.get(SpecCapability.selector);\n  }\n  return capabilityComponents.get(specCapability, Default);\n};\n\n/**\n * Main entrypoint component for rendering custom UI for a given spec descriptor. This should be used instead of importing\n * individual components from this module.\n */\nexport const SpecDescriptor = withFallback((props: DescriptorProps) => {\n  const { model, obj, descriptor, value, namespace, onHandleError } = props;\n  const capability = _.get(descriptor, ['x-descriptors'], []).find(\n    (c) =>\n      !c.startsWith(SpecCapability.fieldGroup) &&\n      !c.startsWith(SpecCapability.arrayFieldGroup) &&\n      !c.startsWith(SpecCapability.advanced) &&\n      !c.startsWith(SpecCapability.fieldDependency),\n  ) as SpecCapability;\n  const Capability = capabilityFor(capability);\n\n  return Capability ? (\n    <dl className=\"olm-descriptor\">\n      <Tooltip content={descriptor.description}>\n        <dt className=\"olm-descriptor__title\" data-test-descriptor-label={descriptor.displayName}>\n          {descriptor.displayName}\n        </dt>\n      </Tooltip>\n      <dd className=\"olm-descriptor__value\">\n        <Capability\n          descriptor={descriptor}\n          capability={capability}\n          value={value}\n          namespace={namespace}\n          model={model}\n          obj={obj}\n          onHandleError={onHandleError}\n        />\n      </dd>\n    </dl>\n  ) : null;\n});\n\ntype SpecCapabilityProps = CapabilityProps<SpecCapability>;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Map as ImmutableMap } from 'immutable';\nimport { Tooltip } from '@patternfly/react-core';\nimport { Status, SuccessStatus, YellowExclamationTriangleIcon } from '@console/shared';\nimport { ResourceLink } from '@console/internal/components/utils';\nimport { withFallback } from '@console/shared/src/components/error/error-boundary';\nimport { Conditions } from '@console/internal/components/conditions';\nimport { StatusCapability, CapabilityProps, DescriptorProps } from '../types';\nimport { Phase } from './phase';\nimport { PodStatusChart } from './pods';\n\nconst Invalid: React.SFC<StatusCapabilityProps> = (props) => (\n  <span className=\"text-muted\">\n    <YellowExclamationTriangleIcon />\n    &nbsp;&nbsp;The field <code>status.{props.descriptor.path}</code> is invalid\n  </span>\n);\n\nconst Default: React.SFC<StatusCapabilityProps> = ({ value }) => {\n  if (_.isEmpty(value) && !_.isNumber(value) && !_.isBoolean(value)) {\n    return <span className=\"text-muted\">None</span>;\n  }\n  if (_.isObject(value)) {\n    return (\n      <div className=\"row\">\n        {_.map(value, (v, k) => (\n          <span key={k}>\n            {k}: {v}\n          </span>\n        ))}\n      </div>\n    );\n  }\n  return <span>{_.toString(value)}</span>;\n};\n\nconst PodStatuses: React.SFC<StatusCapabilityProps> = (props) => {\n  return (\n    ((!_.isObject(props.value) || _.some(props.value, (v) => !_.isArray(v))) && (\n      <Invalid {...props} />\n    )) ||\n    (_.every(props.value, (v) => _.isArray(v) && v.length === 0) && (\n      <span className=\"text-muted\">No members</span>\n    )) || <PodStatusChart statuses={props.value} statusDescriptor={props.descriptor} />\n  );\n};\n\nconst StatusConditions: React.SFC<StatusCapabilityProps> = (props) => {\n  return (\n    (!_.isArray(props.value) && <Invalid {...props} />) ||\n    (props.value.length === 0 && <span className=\"text-muted\">No conditions present</span>) || (\n      <Conditions conditions={props.value} />\n    )\n  );\n};\n\nconst Link: React.SFC<StatusCapabilityProps> = ({ value }) =>\n  !_.isNil(value) ? (\n    <a href={value}>{value.replace(/https?:\\/\\//, '')}</a>\n  ) : (\n    <span className=\"text-muted\">None</span>\n  );\n\nconst K8sPhase: React.SFC<StatusCapabilityProps> = ({ value }) => <Phase status={value} />;\n\nconst K8sPhaseReason: React.SFC<StatusCapabilityProps> = ({ value }) =>\n  _.isEmpty(value) ? (\n    <span className=\"text-muted\">None</span>\n  ) : (\n    <pre style={{ width: 'max-content' }}>{value}</pre>\n  );\n\nconst K8sResourceLink: React.SFC<StatusCapabilityProps> = ({ capability, namespace, value }) =>\n  _.isEmpty(value) ? (\n    <span className=\"text-muted\">None</span>\n  ) : (\n    <ResourceLink\n      kind={capability.substr(StatusCapability.k8sResourcePrefix.length)}\n      name={value}\n      namespace={namespace}\n      title={value}\n    />\n  );\n\nconst capabilityComponents = ImmutableMap<\n  StatusCapability,\n  React.ComponentType<StatusCapabilityProps>\n>()\n  .set(StatusCapability.podStatuses, PodStatuses)\n  .set(StatusCapability.conditions, StatusConditions)\n  .set(StatusCapability.w3Link, Link)\n  .set(StatusCapability.k8sPhase, K8sPhase)\n  .set(StatusCapability.k8sPhaseReason, K8sPhaseReason)\n  .set(StatusCapability.k8sResourcePrefix, K8sResourceLink)\n  .set(StatusCapability.hidden, null);\n\nconst capabilityFor = (statusCapability: StatusCapability) => {\n  if (_.isEmpty(statusCapability)) {\n    return Default;\n  }\n  if (statusCapability.startsWith(StatusCapability.k8sResourcePrefix)) {\n    return capabilityComponents.get(StatusCapability.k8sResourcePrefix);\n  }\n  return capabilityComponents.get(statusCapability, Default);\n};\n\n/**\n * Main entrypoint component for rendering custom UI for a given status descriptor. This should be used instead of importing\n * individual components from this module.\n */\nexport const StatusDescriptor = withFallback((props: DescriptorProps) => {\n  const { descriptor, value, namespace } = props;\n  // Only using first capability instead of dealing with combimations/permutations\n  const capability = _.get(descriptor, ['x-descriptors', 0], null) as StatusCapability;\n  const Capability = capabilityFor(capability);\n\n  return Capability ? (\n    <dl className=\"olm-descriptor\">\n      <Tooltip content={descriptor.description}>\n        <dt className=\"olm-descriptor__title\" data-test-descriptor-label={descriptor.displayName}>\n          {descriptor.displayName}\n        </dt>\n      </Tooltip>\n      <dd className=\"olm-descriptor__value\">\n        {descriptor.displayName === 'Status' ? (\n          value === 'Running' ? (\n            <SuccessStatus title={value} />\n          ) : (\n            <Status status={value} />\n          )\n        ) : (\n          <Capability\n            descriptor={descriptor}\n            capability={capability}\n            value={value}\n            namespace={namespace}\n          />\n        )}\n      </dd>\n    </dl>\n  ) : null;\n});\n\ntype StatusCapabilityProps = CapabilityProps<StatusCapability>;\n\nStatusDescriptor.displayName = 'StatusDescriptor';\nPhase.displayName = 'Phase';\n","import * as React from 'react';\nimport { BanIcon } from '@patternfly/react-icons';\n\nexport const Phase: React.SFC<PhaseProps> = ({ status }) => (\n  <span className={status === 'Failed' ? 'co-error' : ''}>\n    {status === 'Failed' && <BanIcon data-test-id=\"ban-icon\" />} {status}\n  </span>\n);\n\nexport type PhaseProps = {\n  status: string;\n};\n\nPhase.displayName = 'Phase';\n","import * as _ from 'lodash';\nimport * as React from 'react';\nimport { ChartDonut } from '@patternfly/react-charts';\nimport {\n  /* eslint-disable camelcase */\n  chart_color_blue_100 as blue100,\n  chart_color_blue_200 as blue200,\n  chart_color_blue_300 as blue300,\n  /* eslint-enable camelcase */\n} from '@patternfly/react-tokens';\nimport { useRefWidth } from '@console/internal/components/utils';\nimport { Descriptor } from '../types';\nimport { calculateRadius } from '@console/shared/';\n\nconst colorScale = [blue300.value, blue200.value, blue100.value];\n\nexport const PodStatusChart: React.SFC<PodStatusChartProps> = ({ statuses, statusDescriptor }) => {\n  const [ref, width] = useRefWidth();\n  const data = _.map(statuses, (podList, status) => {\n    const x = status;\n    const y = podList.length;\n    return {\n      label: `${y} ${x}`,\n      x,\n      y,\n    };\n  });\n  const total = data.reduce((sum, dataPoint) => sum + dataPoint.y, 0);\n  const { podStatusInnerRadius, podStatusOuterRadius } = calculateRadius(130); // default value of size is 130\n\n  return (\n    <div ref={ref} className=\"graph-wrapper--gauge\">\n      <ChartDonut\n        colorScale={colorScale}\n        data={data}\n        height={width}\n        title={total.toString()}\n        width={width}\n        innerRadius={podStatusInnerRadius}\n        radius={podStatusOuterRadius}\n      />\n      {/* Use instead of `subTitle` on <ChartDonut> so long paths do not clip  */}\n      <div className=\"graph-donut-subtitle\" data-test-id=\"chart-donut-subtitle\">\n        {statusDescriptor.path}\n      </div>\n    </div>\n  );\n};\n\nexport type PodStatusChartProps = {\n  statusDescriptor: Descriptor;\n  statuses: { [key: string]: string[] };\n};\n\nPodStatusChart.displayName = 'PodStatusChart';\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { match } from 'react-router';\nimport { Status } from '@console/shared';\nimport {\n  ResourceLink,\n  Timestamp,\n  MsgBox,\n  FirehoseResource,\n} from '@console/internal/components/utils';\nimport {\n  MultiListPage,\n  Table,\n  TableRow,\n  TableData,\n  RowFunction,\n} from '@console/internal/components/factory';\nimport {\n  K8sResourceKind,\n  GroupVersionKind,\n  kindForReference,\n  modelFor,\n  referenceForGroupVersionKind,\n} from '@console/internal/module/k8s';\nimport { CRDDescription, ClusterServiceVersionKind } from '../types';\nimport { referenceForProvidedAPI, providedAPIsFor } from './index';\nimport { OperandLink } from './operand/operand-link';\n\nconst tableColumnClasses = [\n  classNames('col-lg-4', 'col-md-4', 'col-sm-4', 'col-xs-6'),\n  classNames('col-lg-2', 'col-md-2', 'col-sm-4', 'col-xs-6'),\n  classNames('col-lg-2', 'hidden-md', 'hidden-sm', 'hidden-xs'),\n  classNames('col-lg-4', 'col-md-4', 'col-sm-4', 'hidden-xs'),\n];\n\nexport const ResourceTableHeader = () => [\n  {\n    title: 'Name',\n    sortField: 'metadata.name',\n    transforms: [sortable],\n    props: { className: tableColumnClasses[0] },\n  },\n  {\n    title: 'Kind',\n    sortField: 'kind',\n    transforms: [sortable],\n    props: { className: tableColumnClasses[1] },\n  },\n  {\n    title: 'Status',\n    sortField: 'status.phase',\n    transforms: [sortable],\n    props: { className: tableColumnClasses[2] },\n  },\n  {\n    title: 'Created',\n    sortField: 'metadata.creationTimestamp',\n    transforms: [sortable],\n    props: { className: tableColumnClasses[3] },\n  },\n];\n\nexport const ResourceTableRow: RowFunction<\n  K8sResourceKind,\n  {\n    linkFor: (obj: K8sResourceKind) => JSX.Element;\n  }\n> = ({ obj, index, style, customData: { linkFor } }) => (\n  <TableRow id={obj.metadata.uid} index={index} trKey={obj.metadata.uid} style={style}>\n    <TableData className={tableColumnClasses[0]}>{linkFor(obj)}</TableData>\n    <TableData className={tableColumnClasses[1]}>{obj.kind}</TableData>\n    <TableData className={tableColumnClasses[2]}>\n      <Status status={_.get(obj.status, 'phase', 'Created')} />\n    </TableData>\n    <TableData className={tableColumnClasses[3]}>\n      <Timestamp timestamp={obj.metadata.creationTimestamp} />\n    </TableData>\n  </TableRow>\n);\n\nexport const ResourceTable: React.FC<ResourceTableProps> = (props) => (\n  <Table\n    {...props}\n    aria-label=\"Operand Resources\"\n    Header={ResourceTableHeader}\n    Row={ResourceTableRow}\n    EmptyMsg={() => (\n      <MsgBox\n        title=\"No Resources Found\"\n        detail=\"There are no Kubernetes resources used by this operand.\"\n      />\n    )}\n    virtualize\n  />\n);\n\nexport const Resources: React.FC<ResourcesProps> = (props) => {\n  const providedAPI = providedAPIsFor(props.clusterServiceVersion).find(\n    (desc) => referenceForProvidedAPI(desc) === props.match.params.plural,\n  );\n\n  const defaultResources = ['Deployment', 'Service', 'ReplicaSet', 'Pod', 'Secret', 'ConfigMap'];\n  const firehoseResources = _.get(\n    providedAPI,\n    'resources',\n    defaultResources.map((kind) => ({\n      kind,\n    })) as CRDDescription['resources'],\n  ).map(\n    ({ name, kind, version }): FirehoseResource => {\n      const group = name ? name.substring(name.indexOf('.') + 1) : '';\n      const reference = group ? referenceForGroupVersionKind(group)(version)(kind) : kind;\n      const model = modelFor(reference);\n      return {\n        kind: model && !model.crd ? kind : reference,\n        namespaced: model ? model.namespaced : true,\n        prop: kind,\n      };\n    },\n  );\n\n  // NOTE: This is us building the `ownerReferences` graph client-side\n  const flattenFor = (parentObj: K8sResourceKind) => (resources: {\n    [kind: string]: { data: K8sResourceKind[] };\n  }) => {\n    return _.flatMap(resources, (resource, kind: string) =>\n      _.map(resource.data, (item) => ({ ...item, kind })),\n    ).reduce((owned, resource) => {\n      return (resource.metadata.ownerReferences || []).some(\n        (ref) =>\n          ref.uid === parentObj.metadata.uid ||\n          owned.some(({ metadata }) => metadata.uid === ref.uid),\n      )\n        ? owned.concat([resource])\n        : owned;\n    }, [] as K8sResourceKind[]);\n  };\n\n  // FIXME: Comparing `kind` is not enough to determine if an object is a custom resource\n  const linkFor = (obj: K8sResourceKind) =>\n    obj.metadata.namespace &&\n    _.get(providedAPI, 'resources', []).some(({ kind, name }) => name && kind === obj.kind) ? (\n      <OperandLink obj={obj} />\n    ) : (\n      <ResourceLink\n        kind={obj.kind}\n        name={obj.metadata.name}\n        namespace={obj.metadata.namespace}\n        title={obj.metadata.name}\n      />\n    );\n\n  return (\n    <MultiListPage\n      filterLabel=\"Resources by name\"\n      resources={firehoseResources}\n      rowFilters={[\n        {\n          type: 'clusterserviceversion-resource-kind',\n          filterGroupName: 'Kind',\n          reducer: ({ kind }) => kindForReference(kind),\n          items: firehoseResources.map(({ kind }) => ({\n            id: kindForReference(kind),\n            title: kindForReference(kind),\n          })),\n        },\n      ]}\n      flatten={flattenFor(props.obj)}\n      namespace={props.obj.metadata.namespace}\n      ListComponent={ResourceTable}\n      customData={{ linkFor }}\n    />\n  );\n};\n\nexport type ResourcesProps = {\n  obj: K8sResourceKind;\n  clusterServiceVersion: ClusterServiceVersionKind;\n  match: match<{ plural: GroupVersionKind; ns: string; appName: string; name: string }>;\n};\n\nexport type ResourceListProps = {};\n\nexport type ResourceTableProps = {\n  loaded: boolean;\n  loadError?: string;\n  data: K8sResourceKind[];\n  linkFor: (obj: K8sResourceKind) => JSX.Element;\n};\n\nResourceTableHeader.displayName = 'ResourceTableHeader';\nResourceTable.displayName = 'ResourceTable';\nResources.displayName = 'Resources';\n","import * as _ from 'lodash';\nimport * as React from 'react';\nimport { K8sKind, k8sPatch, K8sResourceKind, Patch } from '@console/internal/module/k8s';\nimport {\n  createModalLauncher,\n  ModalBody,\n  ModalSubmitFooter,\n  ModalTitle,\n} from '@console/internal/components/factory/modal';\nimport { withHandlePromise } from '@console/internal/components/utils';\nimport {\n  ConfigureUpdateStrategy,\n  getNumberOrPercent,\n} from '@console/internal/components/modals/configure-update-strategy-modal';\n\nexport const UpdateStrategyModal = withHandlePromise((props: UpdateStrategyModalProps) => {\n  const {\n    path,\n    resource,\n    resourceKind,\n    title,\n    handlePromise,\n    errorMessage,\n    inProgress,\n    defaultValue,\n    cancel,\n    close,\n  } = props;\n  const getPath = path.substring(1).replace('/', '.');\n  const [strategyType, setStrategyType] = React.useState(\n    _.get(resource, `${getPath}.type`) || defaultValue,\n  );\n  const [maxUnavailable, setMaxUnavailable] = React.useState(\n    _.get(resource, `${getPath}.rollingUpdate.maxUnavailable`, '25%'),\n  );\n  const [maxSurge, setMaxSurge] = React.useState(\n    _.get(resource, `${getPath}.rollingUpdate.maxSurge`, '25%'),\n  );\n\n  const submit = (event) => {\n    event.preventDefault();\n\n    const patch: Patch = { path: `${path}/rollingUpdate`, op: 'remove' };\n    if (strategyType === 'RollingUpdate') {\n      patch.value = {\n        maxUnavailable: getNumberOrPercent(maxUnavailable || '25%'),\n        maxSurge: getNumberOrPercent(maxSurge || '25%'),\n      };\n      patch.op = 'add';\n    }\n\n    return handlePromise(\n      k8sPatch(resourceKind, resource, [\n        patch,\n        { path: `${path}/type`, value: strategyType, op: 'replace' },\n      ]),\n    ).then(close, () => {});\n  };\n\n  return (\n    <form onSubmit={submit} name=\"form\" className=\"modal-content\">\n      <ModalTitle>{title}</ModalTitle>\n      <ModalBody>\n        <ConfigureUpdateStrategy\n          strategyType={strategyType}\n          maxUnavailable={maxUnavailable}\n          maxSurge={maxSurge}\n          onChangeStrategyType={setStrategyType}\n          onChangeMaxUnavailable={setMaxUnavailable}\n          onChangeMaxSurge={setMaxSurge}\n        />\n      </ModalBody>\n      <ModalSubmitFooter\n        errorMessage={errorMessage}\n        inProgress={inProgress}\n        submitText=\"Save\"\n        cancel={cancel}\n      />\n    </form>\n  );\n});\n\nexport const updateStrategyModal = createModalLauncher(UpdateStrategyModal);\n\nUpdateStrategyModal.displayName = 'UpdateStrategyModal';\n\nexport type UpdateStrategyModalProps = {\n  defaultValue: any;\n  path: string;\n  resource: K8sResourceKind;\n  resourceKind: K8sKind;\n  title: string;\n  handlePromise: <T>(promise: Promise<T>) => Promise<T>;\n  inProgress: boolean;\n  errorMessage: string;\n  cancel?: () => void;\n  close?: () => void;\n};\n","import * as React from 'react';\nimport { match } from 'react-router-dom';\nimport * as _ from 'lodash';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { Status, SuccessStatus } from '@console/shared';\nimport { Conditions } from '@console/internal/components/conditions';\nimport { ErrorPage404 } from '@console/internal/components/error';\nimport {\n  MultiListPage,\n  ListPage,\n  DetailsPage,\n  Table,\n  TableRow,\n  TableData,\n  RowFunctionArgs,\n} from '@console/internal/components/factory';\nimport {\n  Kebab,\n  KebabAction,\n  LabelList,\n  LoadingBox,\n  MsgBox,\n  ResourceKebab,\n  ResourceSummary,\n  SectionHeading,\n  StatusBox,\n  Timestamp,\n  navFactory,\n} from '@console/internal/components/utils';\nimport { connectToModel, connectToPlural } from '@console/internal/kinds';\nimport {\n  GroupVersionKind,\n  K8sKind,\n  K8sResourceCondition,\n  K8sResourceKind,\n  K8sResourceKindReference,\n  OwnerReference,\n  apiGroupForReference,\n  apiVersionForReference,\n  kindForReference,\n  modelFor,\n  referenceFor,\n  referenceForModel,\n} from '@console/internal/module/k8s';\nimport { deleteModal } from '@console/internal/components/modals';\nimport { RootState } from '@console/internal/redux';\nimport * as plugins from '@console/internal/plugins';\nimport { ClusterServiceVersionModel } from '../../models';\nimport { ClusterServiceVersionKind } from '../../types';\nimport { isInternalObject, getInternalAPIReferences, getInternalObjects } from '../../utils';\nimport { StatusDescriptor } from '../descriptors/status';\nimport { SpecDescriptor } from '../descriptors/spec';\nimport { StatusCapability, Descriptor } from '../descriptors/types';\nimport { Resources } from '../k8s-resource';\nimport { referenceForProvidedAPI } from '../index';\nimport { OperandLink } from './operand-link';\nimport { FlagsObject, connectToFlags, WithFlagsProps } from '@console/internal/reducers/features';\nimport ErrorAlert from '@console/shared/src/components/alerts/error';\n\nconst csvName = () =>\n  window.location.pathname\n    .split('/')\n    .find(\n      (part, i, allParts) =>\n        allParts[i - 1] === referenceForModel(ClusterServiceVersionModel) ||\n        allParts[i - 1] === ClusterServiceVersionModel.plural,\n    );\n\nconst getActions = (ref: K8sResourceKindReference, flags: FlagsObject) => {\n  const actions = plugins.registry\n    .getClusterServiceVersionActions()\n    .filter(\n      (action) =>\n        plugins.registry.isExtensionInUse(action, flags) &&\n        action.properties.kind === kindForReference(ref) &&\n        apiGroupForReference(ref) === action.properties.apiGroup,\n    );\n  const pluginActions = actions.map((action) => (kind, ocsObj) => ({\n    label: action.properties.label,\n    callback: action.properties.callback(kind, ocsObj),\n  }));\n  return [\n    ...pluginActions,\n    (kind, obj) => {\n      const reference = referenceFor(obj);\n      const href = kind.namespaced\n        ? `/k8s/ns/${obj.metadata.namespace}/${\n            ClusterServiceVersionModel.plural\n          }/${csvName()}/${reference}/${obj.metadata.name}/yaml`\n        : `/k8s/cluster/${reference}/${obj.metadata.name}/yaml`;\n      return {\n        label: `Edit ${kind.label}`,\n        href,\n        accessReview: {\n          group: kind.apiGroup,\n          resource: kind.plural,\n          name: obj.metadata.name,\n          namespace: obj.metadata.namespace,\n          verb: 'update',\n        },\n      };\n    },\n\n    (kind, obj) => ({\n      label: `Delete ${kind.label}`,\n      callback: () =>\n        deleteModal({\n          kind,\n          resource: obj,\n          namespace: obj.metadata.namespace,\n          redirectTo: `/k8s/ns/${obj.metadata.namespace}/${\n            ClusterServiceVersionModel.plural\n          }/${csvName()}/${referenceFor(obj)}`,\n        }),\n      accessReview: {\n        group: kind.apiGroup,\n        resource: kind.plural,\n        name: obj.metadata.name,\n        namespace: obj.metadata.namespace,\n        verb: 'delete',\n      },\n    }),\n  ] as KebabAction[];\n};\n\nconst tableColumnClasses = [\n  '',\n  '',\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-2xl'),\n  Kebab.columnClass,\n];\n\nexport const OperandTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Kind',\n      sortField: 'kind',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Status',\n      sortFunc: 'operandStatus',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Labels',\n      sortField: 'metadata.labels',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: 'Last Updated',\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[5] },\n    },\n  ];\n};\n\ntype OperandStatusType = {\n  type: string;\n  value: string;\n};\n\nconst getOperandStatus = (obj: K8sResourceKind): OperandStatusType => {\n  const { phase, status, state, conditions } = obj?.status || {};\n\n  if (phase && _.isString(phase)) {\n    return {\n      type: 'Phase',\n      value: phase,\n    };\n  }\n\n  if (status && _.isString(status)) {\n    return {\n      type: 'Status',\n      value: status,\n    };\n  }\n\n  if (state && _.isString(state)) {\n    return {\n      type: 'State',\n      value: state,\n    };\n  }\n\n  const trueConditions = conditions?.filter((c: K8sResourceCondition) => c.status === 'True');\n  if (trueConditions?.length) {\n    const types = trueConditions.map((c: K8sResourceCondition) => c.type);\n    return {\n      type: types.length === 1 ? 'Condition' : 'Conditions',\n      value: types.join(', '),\n    };\n  }\n\n  return null;\n};\n\nexport const OperandStatus: React.FunctionComponent<OperandStatusProps> = ({ operand }) => {\n  const status: OperandStatusType = getOperandStatus(operand);\n  if (!status) {\n    return <>-</>;\n  }\n\n  const { type, value } = status;\n  return (\n    <span className=\"co-icon-and-text\">\n      {type}:&nbsp;\n      {value === 'Running' ? <SuccessStatus title={value} /> : <Status status={value} />}\n    </span>\n  );\n};\n\nconst getOperandStatusText = (operand: K8sResourceKind) => {\n  const status = getOperandStatus(operand);\n  return status ? `${status.type}: ${status.value}` : '';\n};\n\nexport const OperandTableRow: React.FC<OperandTableRowProps> = ({\n  obj,\n  index,\n  rowKey,\n  style,\n  flags,\n}) => {\n  const actions = getActions(referenceFor(obj), flags);\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={rowKey} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <OperandLink obj={obj} />\n      </TableData>\n      <TableData\n        className={classNames(tableColumnClasses[1], 'co-break-word')}\n        data-test-operand-kind={obj.kind}\n      >\n        {obj.kind}\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <OperandStatus operand={obj} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <LabelList kind={obj.kind} labels={obj.metadata.labels} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <Timestamp timestamp={obj.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <ResourceKebab actions={actions} kind={referenceFor(obj)} resource={obj} />\n      </TableData>\n    </TableRow>\n  );\n};\n\n// eslint-disable-next-line no-underscore-dangle\nexport const OperandList_: React.FC<OperandListProps & WithFlagsProps> = (props) => {\n  const { flags } = props;\n  const Row = React.useCallback(\n    (rowArgs: RowFunctionArgs<K8sResourceKind>) => (\n      <OperandTableRow\n        obj={rowArgs.obj}\n        index={rowArgs.index}\n        rowKey={rowArgs.key}\n        style={rowArgs.style}\n        flags={flags ?? null}\n      />\n    ),\n    [flags],\n  );\n  const ensureKind = (data: K8sResourceKind[]) =>\n    data.map((obj) => {\n      if (obj.apiVersion && obj.kind) {\n        return obj;\n      }\n      const reference = props.kinds[0];\n      return {\n        apiVersion: apiVersionForReference(reference),\n        kind: kindForReference(reference),\n        ...obj,\n      };\n    });\n  const EmptyMsg = () => (\n    <MsgBox\n      title=\"No Operands Found\"\n      detail=\"Operands are declarative components used to define the behavior of the application.\"\n    />\n  );\n\n  return (\n    <Table\n      {...props}\n      customSorts={{\n        operandStatus: getOperandStatusText,\n      }}\n      data={ensureKind(props.data)}\n      EmptyMsg={EmptyMsg}\n      aria-label=\"Operands\"\n      Header={OperandTableHeader}\n      Row={Row}\n      virtualize\n    />\n  );\n};\n\nexport const OperandList = connectToFlags(\n  ...plugins.registry.getGatingFlagNames([plugins.isClusterServiceVersionAction]),\n)(OperandList_);\n\nconst inFlightStateToProps = ({ k8s }: RootState) => ({\n  inFlight: k8s.getIn(['RESOURCES', 'inFlight']),\n});\n\nexport const ProvidedAPIsPage = connect(inFlightStateToProps)((props: ProvidedAPIsPageProps) => {\n  const { obj } = props;\n  const { owned = [] } = obj.spec.customresourcedefinitions;\n  const internalObjects = getInternalObjects(obj);\n  const internalAPIs = getInternalAPIReferences(obj);\n  const firehoseResources = owned.reduce((resources, desc) => {\n    const reference = referenceForProvidedAPI(desc);\n    const model = modelFor(reference);\n    return model && !internalAPIs.some((api) => api === reference)\n      ? [\n          ...resources,\n          {\n            kind: referenceForProvidedAPI(desc),\n            namespaced: model.namespaced,\n            prop: desc.kind,\n          },\n        ]\n      : resources;\n  }, []);\n\n  const EmptyMsg = () => (\n    <MsgBox\n      title=\"No Provided APIs Defined\"\n      detail=\"This application was not properly installed or configured.\"\n    />\n  );\n  const createLink = (name: string) =>\n    `/k8s/ns/${obj.metadata.namespace}/${ClusterServiceVersionModel.plural}/${\n      obj.metadata.name\n    }/${referenceForProvidedAPI(_.find(owned, { name }))}/~new`;\n  const createProps =\n    owned.length > 1\n      ? {\n          items: owned.reduce(\n            (acc, crd) =>\n              !isInternalObject(internalObjects, crd.name)\n                ? { ...acc, [crd.name]: crd.displayName }\n                : acc,\n            {},\n          ),\n          createLink,\n        }\n      : { to: owned.length === 1 ? createLink(owned[0].name) : null };\n\n  const owners = (ownerRefs: OwnerReference[], items: K8sResourceKind[]) =>\n    ownerRefs.filter(({ uid }) => items.filter(({ metadata }) => metadata.uid === uid).length > 0);\n  const flatten = (resources: { [kind: string]: { data: K8sResourceKind[] } }) =>\n    _.flatMap(resources, (resource) => _.map(resource.data, (item) => item)).filter(\n      ({ kind, metadata }, i, allResources) =>\n        owned.filter((item) => item.kind === kind).length > 0 ||\n        owners(metadata.ownerReferences || [], allResources).length > 0,\n    );\n\n  const rowFilters = [\n    {\n      filterGroupName: 'Resource Kind',\n      type: 'clusterserviceversion-resource-kind',\n      reducer: ({ kind }) => kind,\n      items: firehoseResources.map(({ kind }) => ({\n        id: kindForReference(kind),\n        title: kindForReference(kind),\n      })),\n    },\n  ];\n\n  if (props.inFlight) {\n    return null;\n  }\n\n  return firehoseResources.length > 0 ? (\n    <MultiListPage\n      {...props}\n      ListComponent={OperandList}\n      filterLabel=\"Resources by name\"\n      resources={firehoseResources}\n      namespace={obj.metadata.namespace}\n      canCreate={owned.length > 0}\n      createProps={createProps}\n      createButtonText={owned.length > 1 ? 'Create New' : `Create ${owned[0].displayName}`}\n      flatten={flatten}\n      rowFilters={firehoseResources.length > 1 ? rowFilters : null}\n    />\n  ) : (\n    <StatusBox loaded EmptyMsg={EmptyMsg} />\n  );\n});\n\nexport const ProvidedAPIPage = connectToModel((props: ProvidedAPIPageProps) => {\n  const { namespace, kind, kindsInFlight, kindObj, csv } = props;\n\n  if (!kindObj) {\n    return kindsInFlight ? (\n      <LoadingBox />\n    ) : (\n      <ErrorPage404\n        message={`The server doesn't have a resource type ${kindForReference(\n          kind,\n        )}. Try refreshing the page if it was recently added.`}\n      />\n    );\n  }\n\n  const to = `/k8s/ns/${csv.metadata.namespace}/${ClusterServiceVersionModel.plural}/${csv.metadata.name}/${kind}/~new`;\n  return (\n    <ListPage\n      kind={kind}\n      ListComponent={OperandList}\n      canCreate={_.get(kindObj, 'verbs', [] as string[]).some((v) => v === 'create')}\n      createProps={{ to }}\n      namespace={kindObj.namespaced ? namespace : null}\n    />\n  );\n});\n\nexport const OperandDetails = connectToModel((props: OperandDetailsProps) => {\n  // TODO(alecmerdler): Use additional `x-descriptor` to specify if should be considered main?\n  const isMainDescriptor = (descriptor: Descriptor) => {\n    return ((descriptor['x-descriptors'] as StatusCapability[]) || []).some((type) => {\n      switch (type) {\n        case StatusCapability.podStatuses:\n          return true;\n        default:\n          return false;\n      }\n    });\n  };\n\n  const blockValue = (descriptor: Descriptor, block: { [key: string]: any }) =>\n    !_.isEmpty(descriptor) ? _.get(block, descriptor.path, descriptor.value) : undefined;\n\n  const { kind, metadata, spec, status } = props.obj;\n\n  // Find the matching CRD spec for the kind of this resource in the CSV.\n  const ownedDefinitions = _.get(\n    props.clusterServiceVersion,\n    'spec.customresourcedefinitions.owned',\n    [],\n  );\n  const reqDefinitions = _.get(\n    props.clusterServiceVersion,\n    'spec.customresourcedefinitions.required',\n    [],\n  );\n  const thisDefinition = _.find(\n    ownedDefinitions.concat(reqDefinitions),\n    (def) => def.name.split('.')[0] === props.kindObj.plural,\n  );\n  const statusDescriptors = _.get<Descriptor[]>(thisDefinition, 'statusDescriptors', []).filter(\n    // exclude Conditions since they are included in their own section\n    (descriptor) => descriptor.path !== 'conditions',\n  );\n  const specDescriptors = _.get<Descriptor[]>(thisDefinition, 'specDescriptors', []);\n  const currentStatus = _.find(statusDescriptors, { displayName: 'Status' });\n  const primaryDescriptors = statusDescriptors.filter((descriptor) => isMainDescriptor(descriptor));\n\n  const header = (\n    <h2 className=\"co-section-heading\">{thisDefinition?.displayName || kind} Overview</h2>\n  );\n\n  const primaryDescriptor = primaryDescriptors.map((statusDescriptor: Descriptor) => {\n    return (\n      <div key={statusDescriptor.displayName} className=\"col-sm-6\">\n        <StatusDescriptor\n          descriptor={statusDescriptor}\n          value={blockValue(statusDescriptor, status)}\n          obj={props.obj}\n          model={props.kindObj}\n        />\n      </div>\n    );\n  });\n\n  const [errorMessage, setErrorMessage] = React.useState(null);\n  const handleError = (errorMsg: string) => setErrorMessage(errorMsg);\n\n  const details = (\n    <div className=\"co-operand-details__section co-operand-details__section--info\">\n      <div className=\"row\">\n        <div className=\"col-sm-6\">\n          <ResourceSummary resource={props.obj} />\n        </div>\n        {currentStatus && (\n          <div className=\"col-sm-6\" key={currentStatus.path}>\n            <StatusDescriptor\n              namespace={metadata.namespace}\n              obj={props.obj}\n              model={props.kindObj}\n              descriptor={currentStatus}\n              value={blockValue(currentStatus, status)}\n            />\n          </div>\n        )}\n\n        {specDescriptors.map((specDescriptor: Descriptor) => (\n          <div key={specDescriptor.path} className=\"col-sm-6\">\n            <SpecDescriptor\n              namespace={metadata.namespace}\n              obj={props.obj}\n              model={props.kindObj}\n              value={blockValue(specDescriptor, spec)}\n              descriptor={specDescriptor}\n              onHandleError={handleError}\n            />\n          </div>\n        ))}\n\n        {statusDescriptors\n          .filter(function(descriptor) {\n            return !isMainDescriptor(descriptor) && descriptor.displayName !== 'Status';\n          })\n          .map((statusDescriptor: Descriptor) => {\n            const statusValue = blockValue(statusDescriptor, status);\n            return (\n              <div className=\"col-sm-6\" key={statusDescriptor.path}>\n                <StatusDescriptor\n                  namespace={metadata.namespace}\n                  obj={props.obj}\n                  model={props.kindObj}\n                  descriptor={statusDescriptor}\n                  value={statusValue}\n                />\n              </div>\n            );\n          })}\n      </div>\n    </div>\n  );\n\n  return (\n    <div className=\"co-operand-details co-m-pane\">\n      {_.isEmpty(primaryDescriptors) ? (\n        <div className=\"co-m-pane__body\">\n          {errorMessage && <ErrorAlert message={errorMessage} />}\n          {header}\n          {details}\n        </div>\n      ) : (\n        <>\n          <div className=\"co-m-pane__body\">\n            {header}\n            <div className=\"row\">{primaryDescriptor}</div>\n          </div>\n          <div className=\"co-m-pane__body\">{details}</div>\n        </>\n      )}\n      {_.isArray(status?.conditions) && (\n        <div className=\"co-m-pane__body\">\n          <SectionHeading text=\"Conditions\" />\n          <Conditions conditions={status.conditions} />\n        </div>\n      )}\n    </div>\n  );\n});\n\nconst ResourcesTab = (resourceProps) => (\n  <Resources {...resourceProps} clusterServiceVersion={resourceProps.csv} />\n);\n\nexport const OperandDetailsPage = compose(\n  connectToFlags<OperandDetailsPageProps & WithFlagsProps>(\n    ...plugins.registry.getGatingFlagNames([plugins.isClusterServiceVersionAction]),\n  ),\n  connectToPlural,\n)((props: OperandDetailsPageProps & WithFlagsProps) => (\n  <DetailsPage\n    match={props.match}\n    name={props.match.params.name}\n    kind={props.modelRef}\n    namespace={props.match.params.ns}\n    resources={[\n      {\n        kind: referenceForModel(ClusterServiceVersionModel),\n        name: props.match.params.appName,\n        namespace: props.match.params.ns,\n        isList: false,\n        prop: 'csv',\n      },\n    ]}\n    menuActions={getActions(props.modelRef, props.flags)}\n    breadcrumbsFor={() => [\n      {\n        name: 'Installed Operators',\n        path: `/k8s/ns/${props.match.params.ns}/${ClusterServiceVersionModel.plural}`,\n      },\n      {\n        name: props.match.params.appName,\n        path: props.match.url.slice(0, props.match.url.lastIndexOf('/')),\n      },\n      { name: `${kindForReference(props.modelRef)} Details`, path: `${props.match.url}` },\n    ]}\n    pages={[\n      navFactory.details((detailsProps) => (\n        <OperandDetails\n          {...detailsProps}\n          clusterServiceVersion={detailsProps.csv}\n          appName={props.match.params.appName}\n        />\n      )),\n      navFactory.editYaml(),\n      {\n        name: 'Resources',\n        href: 'resources',\n        component: ResourcesTab,\n      },\n    ]}\n  />\n));\n\nexport type OperandListProps = {\n  loaded: boolean;\n  kinds?: GroupVersionKind[];\n  data: K8sResourceKind[];\n  filters: { [key: string]: any };\n  reduxID?: string;\n  reduxIDs?: string[];\n  rowSplitter?: any;\n  staticFilters?: any;\n  flags?: FlagsObject;\n};\n\nexport type OperandStatusProps = {\n  operand: K8sResourceKind;\n};\n\nexport type OperandHeaderProps = {\n  data: K8sResourceKind[];\n};\n\nexport type OperandRowProps = {\n  obj: K8sResourceKind;\n};\n\nexport type ProvidedAPIsPageProps = {\n  obj: ClusterServiceVersionKind;\n  inFlight?: boolean;\n};\n\nexport type ProvidedAPIPageProps = {\n  csv: ClusterServiceVersionKind;\n  kindsInFlight?: boolean;\n  kind: GroupVersionKind;\n  kindObj: K8sKind;\n  namespace: string;\n};\n\nexport type OperandDetailsProps = {\n  obj: K8sResourceKind;\n  appName: string;\n  kindObj: K8sKind;\n  clusterServiceVersion: ClusterServiceVersionKind;\n};\n\nexport type OperandDetailsPageProps = {\n  modelRef: GroupVersionKind;\n  match: match<{\n    name: string;\n    ns: string;\n    appName: string;\n  }>;\n};\n\nexport type OperandesourceDetailsProps = {\n  csv?: { data: ClusterServiceVersionKind };\n  kind: GroupVersionKind;\n  name: string;\n  namespace: string;\n  match: match<{ appName: string }>;\n};\n\nexport type OperandTableRowProps = {\n  obj: K8sResourceKind;\n  index: number;\n  rowKey: string;\n  style: object;\n  flags?: FlagsObject;\n};\n\n// TODO(alecmerdler): Find Webpack loader/plugin to add `displayName` to React components automagically\nOperandList.displayName = 'OperandList';\nOperandList_.displayName = 'OperandList';\nOperandDetails.displayName = 'OperandDetails';\nOperandList.displayName = 'OperandList';\nProvidedAPIsPage.displayName = 'ProvidedAPIsPage';\nOperandDetailsPage.displayName = 'OperandDetailsPage';\nOperandTableRow.displayName = 'OperandTableRow';\nOperandTableHeader.displayName = 'OperandTableHeader';\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { referenceForModel, K8sResourceKind, referenceFor } from '@console/internal/module/k8s';\nimport { ResourceIcon } from '@console/internal/components/utils';\nimport { ClusterServiceVersionModel } from '../../models';\n\nexport const OperandLink: React.SFC<OperandLinkProps> = (props) => {\n  const { namespace, name } = props.obj.metadata;\n  const csvName = () =>\n    window.location.pathname\n      .split('/')\n      .find(\n        (part, i, allParts) =>\n          allParts[i - 1] === referenceForModel(ClusterServiceVersionModel) ||\n          allParts[i - 1] === ClusterServiceVersionModel.plural,\n      );\n\n  const reference = referenceFor(props.obj);\n  const to = namespace\n    ? `/k8s/ns/${namespace}/${ClusterServiceVersionModel.plural}/${csvName()}/${reference}/${name}`\n    : `/k8s/cluster/${reference}/${name}`;\n  return (\n    <span className=\"co-resource-item\">\n      <ResourceIcon kind={referenceFor(props.obj)} />\n      <Link to={to} className=\"co-resource-item__resource-name\" data-test-operand-link={name}>\n        {name}\n      </Link>\n    </span>\n  );\n};\n\nexport type OperandLinkProps = {\n  obj: K8sResourceKind;\n};\n\nOperandLink.displayName = 'OperandLink';\n","import * as _ from 'lodash';\nimport { ClusterServiceVersionKind, CRDDescription } from './types';\nimport { referenceForProvidedAPI } from './components';\n\nexport const getInternalObjects = (csv: any, path: string = 'metadata.annotations') => {\n  const internals: string = _.get(csv, [\n    ..._.toPath(path),\n    'operators.operatorframework.io/internal-objects',\n  ]);\n  if (!internals) {\n    return [];\n  }\n  try {\n    return JSON.parse(internals);\n  } catch (e) {\n    // eslint-disable-next-line no-console\n    console.error('Error parsing internal object annotation.', e);\n    return [];\n  }\n};\n\nexport const isInternalObject = (internalObjects: string[], objectName: string): boolean =>\n  internalObjects.some((obj) => obj === objectName);\n\nexport const getInternalAPIReferences = (csv: ClusterServiceVersionKind): string[] => {\n  const owned: CRDDescription[] = csv?.spec?.customresourcedefinitions?.owned || [];\n  const internalObjects = getInternalObjects(csv);\n  return owned.reduce(\n    (acc, obj) =>\n      isInternalObject(internalObjects, obj.name) ? [referenceForProvidedAPI(obj), ...acc] : acc,\n    [],\n  );\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAIA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAA;AAGA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAIA;AAAA;AAAA;AACA;AAQA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAIA;AAEA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AC3CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AAIA;;AACA;AAIA;AAEA;AAEA;AAOA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AACA;;AAAA;AACA;AAEA;AAEA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;;AAKA;AACA;;AAGA;AACA;AAEA;AAIA;AAKA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAMA;AACA;AACA;;AAGA;AACA;;AAGA;AACA;AAEA;AAKA;AAEA;AACA;AAEA;AAEA;AACA;AASA;AAEA;AAGA;AAEA;AAGA;AAIA;AAEA;AAOA;AACA;AACA;AACA;AACA;AAGA;AACA;AAIA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAIA;AACA;AAYA;;;;;;;;;;;;;ACtTA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AACA;;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAIA;;AAAA;AAKA;AACA;AACA;AAEA;AACA;AAIA;AAIA;AAEA;AACA;AAEA;AAIA;AAEA;AAOA;AAEA;AAOA;AAYA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAIA;AAkBA;AAIA;AACA;;;;;;;;;;;;;ACnJA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;;AAAA;AAQA;;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AAKA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAUA;AAKA;AAOA;;;;;;;;;;;;;ACtDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAMA;AAOA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AACA;AAEA;AACA;AAKA;AAgBA;AACA;AAIA;AACA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AAGA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAWA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAiBA;AACA;AACA;;;;;;;;;;;;;AClMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAMA;AACA;AAKA;AACA;AAYA;AACA;AAGA;AAGA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AASA;AAQA;AAEA;AAEA;;;;;;;;;;;;;ACpFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AAaA;AACA;AAcgyEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC5sBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AAMA;;;;;;;;;;;;;ACnCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;;AACA;AACA;AACA;AAKA;;;;;A","sourceRoot":""}