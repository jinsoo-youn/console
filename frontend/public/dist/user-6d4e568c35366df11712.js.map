{"version":3,"file":"user-6d4e568c35366df11712.js","sources":["webpack:///./public/components/user.tsx"],"sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Link, match } from 'react-router-dom';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\nimport { Button } from '@patternfly/react-core';\nimport { sortable } from '@patternfly/react-table';\n\nimport * as UIActions from '../actions/ui';\nimport { OAuthModel, UserModel } from '../models';\nimport { K8sKind, referenceForModel, UserKind } from '../module/k8s';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from './factory';\nimport { RoleBindingsPage } from './RBAC';\nimport {\n  Kebab,\n  KebabAction,\n  MsgBox,\n  navFactory,\n  ResourceKebab,\n  ResourceLink,\n  ResourceSummary,\n  SectionHeading,\n  resourcePathFromModel,\n} from './utils';\n\nconst tableColumnClasses = [\n  classNames('col-sm-4', 'col-xs-6'),\n  classNames('col-sm-4', 'col-xs-6'),\n  classNames('col-sm-4', 'hidden-xs'),\n  Kebab.columnClass,\n];\n\nconst UserTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Full Name',\n      sortField: 'fullName',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Identities',\n      sortField: 'identities[0]',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[3] },\n    },\n  ];\n};\nUserTableHeader.displayName = 'UserTableHeader';\n\nconst UserKebab_: React.FC<UserKebabProps & UserKebabDispatchProps> = ({\n  user,\n  startImpersonate,\n}) => {\n  const impersonateAction: KebabAction = (kind: K8sKind, obj: UserKind) => ({\n    label: `Impersonate User \"${obj.metadata.name}\"`,\n    callback: () => startImpersonate('User', obj.metadata.name),\n  });\n  return (\n    <ResourceKebab\n      actions={[impersonateAction, ...Kebab.factory.common]}\n      kind={referenceForModel(UserModel)}\n      resource={user}\n    />\n  );\n};\n\nconst UserKebab = connect<{}, UserKebabDispatchProps, UserKebabProps>(null, {\n  startImpersonate: UIActions.startImpersonate,\n})(UserKebab_);\n\nconst UserTableRow: RowFunction<UserKind> = ({ obj, index, key, style }) => {\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={referenceForModel(UserModel)} name={obj.metadata.name} />\n      </TableData>\n      <TableData className={tableColumnClasses[1]}>{obj.fullName || '-'}</TableData>\n      <TableData className={tableColumnClasses[2]}>\n        {_.map(obj.identities, (identity: string) => (\n          <div key={identity}>{identity}</div>\n        ))}\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <UserKebab user={obj} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst EmptyMsg = () => <MsgBox title=\"No Users Found\" />;\nconst oAuthResourcePath = resourcePathFromModel(OAuthModel, 'cluster');\nconst noDataDetail = (\n  <>\n    <p>Add identity providers (IDPs) to the OAuth configuration to allow others to log&nbsp;in.</p>\n    <p>\n      <Link to={oAuthResourcePath}>\n        <Button variant=\"primary\">Add IDP</Button>\n      </Link>\n    </p>\n  </>\n);\nconst NoDataEmptyMsg = () => <MsgBox title=\"No Users Found\" detail={noDataDetail} />;\n\nexport const UserList: React.FC = (props) => (\n  <Table\n    {...props}\n    aria-label=\"Users\"\n    Header={UserTableHeader}\n    Row={UserTableRow}\n    EmptyMsg={EmptyMsg}\n    NoDataEmptyMsg={NoDataEmptyMsg}\n    virtualize\n  />\n);\n\nexport const UserPage: React.FC<UserPageProps> = (props) => (\n  <ListPage\n    {...props}\n    title=\"Users\"\n    helpText={\n      <p className=\"co-help-text\">Users are automatically added the first time they log&nbsp;in.</p>\n    }\n    kind={referenceForModel(UserModel)}\n    ListComponent={UserList}\n    canCreate={false}\n  />\n);\n\nconst RoleBindingsTab: React.FC<RoleBindingsTabProps> = ({ obj }) => (\n  <RoleBindingsPage\n    showTitle={false}\n    staticFilters={[{ 'role-binding-user': obj.metadata.name }]}\n  />\n);\n\nconst UserDetails: React.FC<UserDetailsProps> = ({ obj }) => {\n  return (\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text=\"User Details\" />\n      <ResourceSummary resource={obj}>\n        <dt>Full Name</dt>\n        <dd>{obj.fullName || '-'}</dd>\n        <dt>Identities</dt>\n        <dd>\n          {_.map(obj.identities, (identity: string) => (\n            <div key={identity}>{identity}</div>\n          ))}\n        </dd>\n      </ResourceSummary>\n    </div>\n  );\n};\n\ntype UserKebabDispatchProps = {\n  startImpersonate: (kind: string, name: string) => (dispatch, store) => Promise<void>;\n};\n\ntype UserKebabProps = {\n  user: UserKind;\n};\n\nconst UserDetailsPage_: React.FC<UserDetailsPageProps & UserKebabDispatchProps> = ({\n  startImpersonate,\n  ...props\n}) => {\n  const impersonateAction: KebabAction = (kind: K8sKind, obj: UserKind) => ({\n    label: `Impersonate User \"${obj.metadata.name}\"`,\n    callback: () => startImpersonate('User', obj.metadata.name),\n  });\n  return (\n    <DetailsPage\n      {...props}\n      kind={referenceForModel(UserModel)}\n      menuActions={[impersonateAction, ...Kebab.factory.common]}\n      pages={[\n        navFactory.details(UserDetails),\n        navFactory.editYaml(),\n        navFactory.roles(RoleBindingsTab),\n      ]}\n    />\n  );\n};\n\nexport const UserDetailsPage = connect<{}, UserKebabDispatchProps, UserDetailsPageProps>(null, {\n  startImpersonate: UIActions.startImpersonate,\n})(UserDetailsPage_);\n\ntype UserPageProps = {\n  autoFocus?: boolean;\n  showTitle?: boolean;\n};\n\ntype RoleBindingsTabProps = {\n  obj: UserKind;\n};\n\ntype UserDetailsProps = {\n  obj: UserKind;\n};\n\ntype UserDetailsPageProps = {\n  match: match<any>;\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAYA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAKA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AAEA;AAYA;AAaA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAQA;AAUA;AAAA;AAIA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;;;;;A","sourceRoot":""}