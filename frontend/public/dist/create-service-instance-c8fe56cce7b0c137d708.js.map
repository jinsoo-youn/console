{"version":3,"file":"create-service-instance-c8fe56cce7b0c137d708.js","sources":["webpack:///./public/components/cluster-service-class-info.tsx","webpack:///./public/components/service-catalog/create-instance.tsx","webpack:///./public/components/service-catalog/schema-form.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\n\nimport { K8sResourceKind, serviceClassDisplayName } from '../module/k8s';\nimport { ClusterServiceClassIcon } from './catalog/catalog-item-icon';\nimport { ExternalLink } from './utils';\n\nexport const ClusterServiceClassInfo: React.FC<ClusterServiceClassInfoProps> = ({\n  obj: serviceClass,\n}) => {\n  const displayName = serviceClassDisplayName(serviceClass);\n  const description = _.get(serviceClass, 'spec.description');\n  const longDescription = _.get(serviceClass, 'spec.externalMetadata.longDescription');\n  const documentationURL = _.get(serviceClass, 'spec.externalMetadata.documentationUrl');\n  const supportURL = _.get(serviceClass, 'spec.externalMetadata.supportUrl');\n  const provider = _.get(serviceClass, 'spec.externalMetadata.providerDisplayName');\n  const tags = _.get(serviceClass, 'spec.tags');\n\n  return (\n    <div className=\"co-catalog-item-info\">\n      <div className=\"co-catalog-item-details\">\n        <ClusterServiceClassIcon serviceClass={serviceClass} iconSize=\"large\" />\n        <div>\n          <h2 className=\"co-section-heading co-catalog-item-details__name\">{displayName}</h2>\n          {provider && <p className=\"co-catalog-item-details__provider\">Provided by {provider}</p>}\n          {tags && (\n            <p className=\"co-catalog-item-details__tags\">\n              {_.map(tags, (tag, i) => (\n                <span className=\"co-catalog-item-details__tag\" key={i}>\n                  {tag}\n                </span>\n              ))}\n            </p>\n          )}\n          {(documentationURL || supportURL) && (\n            <ul className=\"list-inline\">\n              {documentationURL && (\n                <li className=\"co-break-word\">\n                  <ExternalLink href={documentationURL} text=\"View documentation\" />\n                </li>\n              )}\n              {supportURL && (\n                <li className=\"co-break-word\">\n                  <ExternalLink href={supportURL} text=\"Get support\" />\n                </li>\n              )}\n            </ul>\n          )}\n        </div>\n      </div>\n      {description && <p className=\"co-catalog-item-details__description\">{description}</p>}\n      {longDescription && <p className=\"co-catalog-item-details__description\">{longDescription}</p>}\n    </div>\n  );\n};\n\nexport type ClusterServiceClassInfoProps = {\n  obj: K8sResourceKind;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Helmet } from 'react-helmet';\nimport { IChangeEvent, ISubmitEvent } from 'react-jsonschema-form';\nimport { ActionGroup, Button } from '@patternfly/react-core';\n\nimport {\n  ServiceInstanceModel,\n  ClusterServiceClassModel,\n  ClusterServicePlanModel,\n} from '../../models';\nimport { ClusterServiceClassInfo } from '../cluster-service-class-info';\nimport { ButtonBar } from '../utils/button-bar';\nimport { k8sCreate, K8sResourceKind, referenceForModel } from '../../module/k8s';\nimport {\n  createParametersSecret,\n  getInstanceCreateParametersForm,\n  getInstanceCreateSchema,\n  getUISchema,\n  ServiceCatalogParametersForm,\n} from './schema-form';\nimport {\n  Firehose,\n  history,\n  NsDropdown,\n  PageHeading,\n  resourcePathFromModel,\n  StatusBox,\n} from '../utils';\n\nconst PARAMETERS_SECRET_KEY = 'parameters';\n\nconst getAvailablePlans = (plans: any): any[] =>\n  _.reject(plans.data, 'status.removedFromBrokerCatalog');\n\nclass CreateInstance extends React.Component<CreateInstanceProps, CreateInstanceState> {\n  constructor(props) {\n    super(props);\n\n    const { preselectedNamespace: namespace = '' } = this.props;\n    this.state = {\n      name: '',\n      namespace,\n      plan: '',\n      formData: {},\n      inProgress: false,\n    };\n  }\n\n  static getDerivedStateFromProps(props: CreateInstanceProps, state: CreateInstanceState) {\n    const { name, plan } = state;\n    const { obj, plans } = props;\n    const newState: any = {};\n\n    const defaultName = _.get(obj, 'data.spec.externalName');\n    if (!name && defaultName) {\n      newState.name = defaultName;\n    }\n\n    const defaultPlan = _.get(getAvailablePlans(plans), '[0].spec.externalName');\n    if (!plan && defaultPlan) {\n      newState.plan = defaultPlan;\n    }\n\n    return newState;\n  }\n\n  onNamespaceChange = (namespace: string) => {\n    this.setState({ namespace });\n  };\n\n  onNameChange: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    this.setState({ name: event.currentTarget.value });\n  };\n\n  onPlanChange: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    this.setState({ plan: event.currentTarget.value });\n  };\n\n  createInstance = (secretName: string): Promise<K8sResourceKind> => {\n    const parametersFrom = secretName\n      ? [{ secretKeyRef: { name: secretName, key: PARAMETERS_SECRET_KEY } }]\n      : [];\n    const serviceInstance: K8sResourceKind = {\n      apiVersion: 'servicecatalog.k8s.io/v1beta1',\n      kind: 'ServiceInstance',\n      metadata: {\n        name: this.state.name,\n        namespace: this.state.namespace,\n      },\n      spec: {\n        clusterServiceClassExternalName: _.get(this.props.obj, 'data.spec.externalName'),\n        clusterServicePlanExternalName: this.state.plan,\n        parametersFrom,\n      },\n    };\n\n    return k8sCreate(ServiceInstanceModel, serviceInstance);\n  };\n\n  onFormChange = ({ formData }: IChangeEvent) => this.setState({ formData });\n\n  save = ({ formData }: ISubmitEvent<any>) => {\n    const { name, namespace, plan } = this.state;\n    if (!name || !namespace || !plan) {\n      this.setState({ error: 'Please complete all fields.' });\n      return;\n    }\n\n    this.setState({ inProgress: true });\n    const secretName = _.isEmpty(formData) ? null : `${this.state.name}-parameters`;\n\n    // Create the instance first so we can set an ownerRef from the parameters secret to the instance.\n    this.createInstance(secretName)\n      .then((instance) =>\n        secretName\n          ? createParametersSecret(secretName, PARAMETERS_SECRET_KEY, formData, instance)\n          : null,\n      )\n      .then(\n        () => {\n          this.setState({ inProgress: false });\n          history.push(resourcePathFromModel(ServiceInstanceModel, name, namespace));\n        },\n        (err) => this.setState({ error: err.message, inProgress: false }),\n      );\n  };\n\n  render() {\n    const { obj, plans, loaded, loadError } = this.props;\n\n    const serviceClass = _.get(obj, 'data');\n    const title = 'Create Service Instance';\n\n    const { plan: selectedPlanName } = this.state;\n    const availablePlans = getAvailablePlans(plans);\n    const selectedPlan = _.find(availablePlans, { spec: { externalName: selectedPlanName } });\n    const schema = getInstanceCreateSchema(selectedPlan);\n    const parametersForm = getInstanceCreateParametersForm(selectedPlan);\n    const uiSchema = getUISchema(parametersForm);\n\n    const planOptions = _.map(availablePlans, (plan) => {\n      return (\n        <div className=\"radio co-create-service-instance__plan\" key={plan.spec.externalName}>\n          <label>\n            <input\n              type=\"radio\"\n              name=\"plan\"\n              id=\"plan\"\n              value={plan.spec.externalName}\n              checked={selectedPlanName === plan.spec.externalName}\n              onChange={this.onPlanChange}\n            />\n            {_.get(plan.spec, ['externalMetadata', 'displayName']) || plan.spec.externalName}\n            {plan.spec.description && <div className=\"text-muted\">{plan.spec.description}</div>}\n          </label>\n        </div>\n      );\n    });\n\n    return (\n      <>\n        <Helmet>\n          <title>{title}</title>\n        </Helmet>\n        <StatusBox data={serviceClass} loaded={loaded} loadError={loadError} label=\"Service Class\">\n          <PageHeading title={title} />\n          <div className=\"co-m-pane__body co-create-service-instance\">\n            <div className=\"row\">\n              <div className=\"col-md-7 col-md-push-5 co-catalog-item-info\">\n                <ClusterServiceClassInfo obj={serviceClass} />\n              </div>\n              <div className=\"col-md-5 col-md-pull-7\">\n                <form className=\"co-create-service-instance\">\n                  <div className=\"form-group co-create-service-instance__namespace\">\n                    <label className=\"control-label co-required\" htmlFor=\"dropdown-selectbox\">\n                      Namespace\n                    </label>\n                    <NsDropdown\n                      selectedKey={this.state.namespace}\n                      onChange={this.onNamespaceChange}\n                      id=\"dropdown-selectbox\"\n                    />\n                  </div>\n                  <div className=\"form-group co-create-service-instance__name\">\n                    <label className=\"control-label co-required\" htmlFor=\"name\">\n                      Service Instance Name\n                    </label>\n                    <input\n                      className=\"pf-c-form-control\"\n                      type=\"text\"\n                      onChange={this.onNameChange}\n                      value={this.state.name}\n                      id=\"name\"\n                      required\n                    />\n                  </div>\n                  <div className=\"form-group co-create-service-instance__plans\">\n                    <label className=\"control-label\">Plans</label>\n                    {_.isEmpty(availablePlans) ? (\n                      <p>There are no plans currently available for this service.</p>\n                    ) : (\n                      planOptions\n                    )}\n                  </div>\n                </form>\n                <ServiceCatalogParametersForm\n                  schema={schema}\n                  uiSchema={uiSchema}\n                  onSubmit={this.save}\n                  formData={this.state.formData}\n                  onChange={this.onFormChange}\n                >\n                  <ButtonBar errorMessage={this.state.error} inProgress={this.state.inProgress}>\n                    <ActionGroup className=\"pf-c-form\">\n                      <Button type=\"submit\" variant=\"primary\">\n                        Create\n                      </Button>\n                      <Button type=\"button\" variant=\"secondary\" onClick={history.goBack}>\n                        Cancel\n                      </Button>\n                    </ActionGroup>\n                  </ButtonBar>\n                </ServiceCatalogParametersForm>\n              </div>\n            </div>\n          </div>\n        </StatusBox>\n      </>\n    );\n  }\n}\n\nexport const CreateInstancePage = (props) => {\n  const searchParams = new URLSearchParams(location.search);\n  const name = searchParams.get('cluster-service-class');\n  const preselectedNamespace = searchParams.get('preselected-ns');\n  const resources = [\n    { kind: referenceForModel(ClusterServiceClassModel), name, isList: false, prop: 'obj' },\n    {\n      kind: referenceForModel(ClusterServicePlanModel),\n      isList: true,\n      prop: 'plans',\n      fieldSelector: `spec.clusterServiceClassRef.name=${name}`,\n    },\n  ];\n  return (\n    <Firehose resources={resources}>\n      <CreateInstance preselectedNamespace={preselectedNamespace} {...(props as any)} />\n    </Firehose>\n  );\n};\n\nexport type CreateInstanceProps = {\n  obj: any;\n  plans: any;\n  loaded: any;\n  loadError: boolean;\n  match: any;\n  preselectedNamespace: string;\n};\n\nexport type CreateInstanceState = {\n  name: string;\n  namespace: string;\n  plan: string;\n  formData: any;\n  inProgress: boolean;\n  error?: any;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\nimport { JSONSchema6 } from 'json-schema';\nimport Form, { FieldTemplateProps, FormProps, UiSchema } from 'react-jsonschema-form';\n\nimport { SecretModel } from '../../models';\nimport { k8sCreate, K8sResourceKind } from '../../module/k8s';\n\nconst getSchema = (plan: K8sResourceKind, path: string): JSONSchema6 => {\n  const schema = _.get(plan, path);\n  // Make sure there is `properties` in the schema, even if empty, or `Form` displays an error.\n  return _.assign({ type: 'object', properties: {} }, schema);\n};\n\nexport const getInstanceCreateSchema = (plan: K8sResourceKind) =>\n  getSchema(plan, 'spec.instanceCreateParameterSchema');\nexport const getInstanceCreateParametersForm = (plan: K8sResourceKind) =>\n  _.get(plan, 'spec.externalMetadata.schemas.service_instance.create.openshift_form_definition');\n\nexport const getBindingCreateSchema = (plan: K8sResourceKind) =>\n  getSchema(plan, 'spec.serviceBindingCreateParameterSchema');\nexport const getBindingParametersForm = (plan: K8sResourceKind) =>\n  _.get(plan, 'spec.externalMetadata.schemas.service_binding.create.openshift_form_definition');\n\n// Flatten items from fieldsets into a single list of parameters. Fieldsets aren't supported.\nconst flattenParameters = (parametersForm: ParameterFormItem[]): ParameterFormItem[] => {\n  return parametersForm.reduce((result: ParameterFormItem[], param: ParameterFormItem) => {\n    // If param has an `items` array, it's a fieldset. Add the fieldset parameters to the top-level array (preserving order).\n    const fieldsetItems = _.get(param, 'items');\n    const values = _.isEmpty(fieldsetItems) ? param : fieldsetItems;\n    return result.concat(values);\n  }, []);\n};\n\nconst UI_ORDER = 'ui:order';\nconst UI_WIDGET = 'ui:widget';\n\n// The whitelist of types for openshift_form_defintion items are textarea, password, checkbox, select.\n// Map these to the `ui:widget` value expected by react-jsonschema-form.\nconst widgetForType = Object.freeze({\n  checkbox: 'checkboxes',\n  password: 'password',\n  select: 'select',\n  textarea: 'textarea',\n});\n\n// Convert from the broker parameters form definition to the UI schema expected by react-jsonschema-form:\n// https://github.com/mozilla-services/react-jsonschema-form#form-customization\n//\n// The parameters form definition is a small subset of what was supported by angular-schema-form in the previous AngularJS catalog implementation:\n// https://github.com/json-schema-form/angular-schema-form\nexport const getUISchema = (parametersForm: ParameterFormItem[]): UiSchema => {\n  if (_.isEmpty(parametersForm)) {\n    return {};\n  }\n\n  const flatParams = flattenParameters(parametersForm);\n  return flatParams.reduce(\n    (result: UiSchema, param: ParameterFormItem) => {\n      if (_.isString(param)) {\n        result[UI_ORDER].push(param);\n      } else if (param.key) {\n        result[UI_ORDER].push(param.key);\n        const widget = widgetForType[param.type];\n        if (widget) {\n          _.set(result, [param.key, UI_WIDGET], widget);\n        }\n      }\n      return result;\n    },\n    { [UI_ORDER]: [] },\n  );\n};\n\nexport const createParametersSecret = (\n  secretName: string,\n  key: string,\n  parameters: any,\n  owner: K8sResourceKind,\n): Promise<K8sResourceKind> => {\n  const secret = {\n    apiVersion: 'v1',\n    kind: 'Secret',\n    metadata: {\n      name: secretName,\n      namespace: owner.metadata.namespace,\n      ownerReferences: [\n        {\n          apiVersion: owner.apiVersion,\n          kind: owner.kind,\n          name: owner.metadata.name,\n          uid: owner.metadata.uid,\n          controller: false,\n          blockOwnerDeletion: false,\n        },\n      ],\n    },\n    stringData: {\n      [key]: JSON.stringify(parameters),\n    },\n  };\n\n  return k8sCreate(SecretModel, secret);\n};\n\n// Override react-jsonschema-form rendering of fields so we can use different required and description styles.\n// https://github.com/mozilla-services/react-jsonschema-form#field-template\nconst CustomFieldTemplate: React.SFC<FieldTemplateProps> = ({\n  id,\n  classNames: klass,\n  displayLabel,\n  label,\n  help,\n  required,\n  description,\n  errors,\n  children,\n}) => (\n  <div className={klass}>\n    {displayLabel && (\n      <label htmlFor={id} className={classNames('control-label', { 'co-required': required })}>\n        {label}\n      </label>\n    )}\n    {children}\n    <div className=\"help-block\">{description}</div>\n    {help}\n    {errors}\n  </div>\n);\n\n// Override the base input `onChange` handler to return an empty string instead of undefined when a user clears a string input.\n// https://github.com/mozilla-services/react-jsonschema-form#customizing-widgets-text-input\n// https://github.com/mozilla-services/react-jsonschema-form/blob/master/src/components/widgets/BaseInput.js\nconst CustomBaseInput = (props) => {\n  // Note: since React 15.2.0 we can't forward unknown element attributes, so we\n  // exclude the \"options\" and \"schema\" ones here.\n  if (!props.id) {\n    // eslint-disable-next-line no-console\n    console.log('No id for', props);\n    throw new Error(`no id for props ${JSON.stringify(props)}`);\n  }\n  const {\n    value,\n    readonly,\n    disabled,\n    autofocus,\n    onChange,\n    onBlur,\n    onFocus,\n    options,\n    ...inputProps\n  } = props;\n  inputProps.type = options.inputType || inputProps.type || 'text';\n\n  return (\n    <input\n      className=\"pf-c-form-control\"\n      readOnly={readonly}\n      disabled={disabled}\n      autoFocus={autofocus}\n      value={value == null ? '' : value}\n      {...inputProps}\n      onChange={(event) => onChange(event.target.value)}\n      onBlur={onBlur && ((event) => onBlur(inputProps.id, event.target.value))}\n      onFocus={onFocus && ((event) => onFocus(inputProps.id, event.target.value))}\n    />\n  );\n};\n\n// Create a custom checkbox widget to prevent any checkbox from receiving a `required` attribute.\n// With HTML5 form validation, a required checkbox has to be checked to submit the form.\nconst CustomCheckbox = ({ onChange, label, value }) => (\n  <div className=\"checkbox\">\n    <label className=\"control-label\">\n      <input type=\"checkbox\" onClick={() => onChange(!value)} checked={value} />\n      {label}\n    </label>\n  </div>\n);\n\nconst widgets: any = {\n  BaseInput: CustomBaseInput,\n  CheckboxWidget: CustomCheckbox,\n};\n\nexport const ServiceCatalogParametersForm: React.SFC<FormProps<any>> = (props) => (\n  <Form\n    className=\"co-service-catalog-parameters\"\n    FieldTemplate={CustomFieldTemplate}\n    widgets={widgets}\n    {...props}\n  />\n);\n\nexport type ParameterFormItem =\n  | {\n      key: string;\n      type?: string;\n      items?: any[];\n    }\n  | string;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;AAAA;AACA;AASA;AAEA;AAEA;AAGA;AAEA;AAOA;AACA;AAGA;;;;;;;;;;;;;ACtDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAEA;AAKA;AACA;AACA;AACA;AAOA;AASA;AAEA;AAGA;AACA;AACA;AA8BA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AAGA;AAvFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AA+DA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAQA;AACA;AAIA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAMA;AACA;AAGA;AASA;AACA;AACA;AAOA;AAOA;AACA;AACA;AAGA;AAYA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3PA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAYA;AAKA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAWA;AAEA;AAaA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;;;;;A","sourceRoot":""}