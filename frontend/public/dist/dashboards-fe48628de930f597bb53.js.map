{"version":3,"file":"dashboards-fe48628de930f597bb53.js","sources":["webpack:///./packages/console-shared/src/components/dashboard/status-card/AlertItem.tsx","webpack:///./packages/console-shared/src/components/dashboard/status-card/AlertsBody.tsx","webpack:///./packages/console-shared/src/components/dashboard/status-card/HealthItem.tsx","webpack:///./packages/console-shared/src/components/dashboard/status-card/OperatorStatusBody.tsx","webpack:///./packages/console-shared/src/components/dashboard/status-card/operator-body.scss?9c9d","webpack:///./packages/console-shared/src/hooks/flag.ts","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/activity-card.tsx","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/cluster-dashboard.tsx","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/context.ts","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/details-card.tsx","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/health-item.tsx","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/inventory-card.tsx","webpack:///./public/components/dashboard/dashboards-page/cluster-dashboard/status-card.tsx","webpack:///./public/components/dashboard/dashboards-page/dashboards.tsx","webpack:///./public/components/utils/k8s-get-hook.ts"],"sourcesContent":["import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { alertActions } from '@console/internal/components/notification-drawer';\nimport { Timestamp } from '@console/internal/components/utils/timestamp';\nimport { alertURL, Alert } from '@console/internal/components/monitoring';\nimport { RedExclamationCircleIcon, YellowExclamationTriangleIcon } from '../../status/icons';\nimport {\n  getAlertSeverity,\n  getAlertMessage,\n  getAlertDescription,\n  getAlertTime,\n} from './alert-utils';\n\nconst getSeverityIcon = (severity: string) => {\n  switch (severity) {\n    case 'critical':\n      return RedExclamationCircleIcon;\n    case 'warning':\n    default:\n      return YellowExclamationTriangleIcon;\n  }\n};\n\nexport const StatusItem: React.FC<StatusItemProps> = ({ Icon, timestamp, message, children }) => {\n  return (\n    <div className=\"co-status-card__alert-item\">\n      <div className=\"co-status-card__alert-item-icon co-dashboard-icon\">\n        <Icon />\n      </div>\n      <div className=\"co-status-card__alert-item-text\">\n        <div className=\"co-status-card__alert-item-message\">\n          <div className=\"co-health-card__alert-item-timestamp co-status-card__health-item-text text-secondary\">\n            {timestamp && <Timestamp simple timestamp={timestamp} />}\n          </div>\n          <span className=\"co-status-card__health-item-text co-break-word\">{message}</span>\n        </div>\n        {children && <div className=\"co-status-card__alert-item-more\">{children}</div>}\n      </div>\n    </div>\n  );\n};\n\nconst AlertItem: React.FC<AlertItemProps> = ({ alert }) => {\n  const action = alertActions.get(alert.rule.name);\n  return (\n    <StatusItem\n      Icon={getSeverityIcon(getAlertSeverity(alert))}\n      timestamp={getAlertTime(alert)}\n      message={getAlertDescription(alert) || getAlertMessage(alert)}\n    >\n      {action ? (\n        <Link to={action.path}>{action.text}</Link>\n      ) : (\n        <Link to={alertURL(alert, alert.rule.id)}>View details</Link>\n      )}\n    </StatusItem>\n  );\n};\n\nexport default AlertItem;\n\ntype StatusItemProps = {\n  Icon: React.ComponentType<any>;\n  timestamp?: string;\n  message: string;\n};\n\ntype AlertItemProps = {\n  alert: Alert;\n};\n","import * as React from 'react';\nimport {\n  EmptyState,\n  EmptyStateVariant,\n  EmptyStateIcon,\n  EmptyStateBody,\n} from '@patternfly/react-core';\nimport { UnknownIcon } from '@patternfly/react-icons';\n\nconst AlertsBody: React.FC<AlertsBodyProps> = ({ error = false, children }) =>\n  (error || !!React.Children.toArray(children).length) && (\n    <div className=\"co-dashboard-card__body--no-padding co-status-card__alerts-body co-dashboard-card__body--top-margin\">\n      {error ? (\n        <EmptyState variant={EmptyStateVariant.full} className=\"co-status-card__alerts-msg\">\n          <EmptyStateIcon className=\"co-status-card__alerts-icon\" icon={UnknownIcon} />\n          <EmptyStateBody>Alerts could not be loaded.</EmptyStateBody>\n        </EmptyState>\n      ) : (\n        children\n      )}\n    </div>\n  );\n\nexport default AlertsBody;\n\ntype AlertsBodyProps = {\n  error?: boolean;\n  children?: React.ReactNode;\n};\n","import * as React from 'react';\nimport classNames from 'classnames';\nimport { DashboardCardPopupLink } from '../dashboard-card/DashboardCardLink';\nimport { HealthState, healthStateMapping } from './states';\n\nconst HealthItemIcon: React.FC<HealthItemIconProps> = ({ state }) => (\n  <div className=\"co-dashboard-icon\">\n    {(healthStateMapping[state] || healthStateMapping[HealthState.UNKNOWN]).icon}\n  </div>\n);\n\nconst HealthItem: React.FC<HealthItemProps> = React.memo(\n  ({ className, state, title, details, popupTitle, noIcon = false, children }) => {\n    const detailMessage =\n      details || (healthStateMapping[state] || healthStateMapping[HealthState.UNKNOWN]).message;\n    return (\n      <div className={classNames('co-status-card__health-item', className)}>\n        {state === HealthState.LOADING ? (\n          <div className=\"skeleton-health\" />\n        ) : (\n          !noIcon && <HealthItemIcon state={state} />\n        )}\n        <div>\n          <span className=\"co-dashboard-text--small co-status-card__health-item-text\">\n            {React.Children.toArray(children).length && state !== HealthState.LOADING ? (\n              <DashboardCardPopupLink\n                linkTitle={title}\n                popupTitle={popupTitle}\n                className=\"co-status-card__popup\"\n              >\n                {children}\n              </DashboardCardPopupLink>\n            ) : (\n              title\n            )}\n          </span>\n          {state !== HealthState.LOADING && detailMessage && (\n            <div className=\"co-dashboard-text--small co-status-card__health-item-text co-status-card__health-item-subtitle\">\n              {detailMessage}\n            </div>\n          )}\n        </div>\n      </div>\n    );\n  },\n);\n\nexport default HealthItem;\n\ntype HealthItemProps = {\n  title: string;\n  className?: string;\n  details?: string;\n  state?: HealthState;\n  popupTitle?: string;\n  noIcon?: boolean;\n};\n\ntype HealthItemIconProps = {\n  state?: HealthState;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport { GetOperatorsWithStatuses, LazyLoader } from '@console/plugin-sdk';\nimport { AsyncComponent, FirehoseResourcesResult } from '@console/internal/components/utils';\nimport { HealthState } from './states';\nimport { getMostImportantStatuses } from './state-utils';\nimport { useTranslation } from 'react-i18next';\n\nimport './operator-body.scss';\n\nexport const OperatorsSection: React.FC<OperatorsSectionProps> = ({ resources, getOperatorsWithStatuses, title, linkTo, rowLoader }) => {\n  const { t } = useTranslation();\n  const error = _.values(resources).some(r => r.loadError);\n  const operatorStatuses = getOperatorsWithStatuses(resources);\n  const sortedOperatorStatuses = getMostImportantStatuses(operatorStatuses).sort((a, b) => a.operators[0].metadata.name.localeCompare(b.operators[0].metadata.name));\n  const operatorsHealthy = sortedOperatorStatuses.every(o => o.status.health === HealthState.OK);\n  const RowLoading = React.useCallback(() => <div className=\"co-status__operator-skeleton\" />, []);\n  return (\n    <div className=\"co-status-popup__section\">\n      <div className=\"co-status-popup__row\">\n        <div>\n          <span className=\"co-status-popup__text--bold\">{t('SINGLE:MSG_OVERVIEW_MAIN_CARDSTATUS_OPERATORS_1')}</span>\n          <span className=\"text-secondary\">{` (${operatorStatuses.length} installed)`}</span>\n        </div>\n        <div className=\"text-secondary\">{t('SINGLE:MSG_OVERVIEW_MAIN_POPOVEROPERATOR_STATUS_1')}</div>\n      </div>\n      {error ? <div className=\"text-secondary\">{t('SINGLE:MSG_OVERVIEW_MAIN_CARDSTATUS_1')}</div> : !operatorsHealthy && sortedOperatorStatuses.map(operatorStatus => <AsyncComponent key={operatorStatus.operators[0].metadata.uid} operatorStatus={operatorStatus} loader={rowLoader} LoadingComponent={RowLoading} />)}\n      <div className=\"co-status-popup__row\">\n        <Link to={linkTo}>{t('SINGLE:MSG_OVERVIEW_MAIN_POPOVEROPERATOR_ALL_1')}</Link>\n        {!error && operatorsHealthy && operatorStatuses.length && (\n          <div className=\"co-status-popup__status\">\n            <div className=\"text-secondary\">All {operatorStatuses[0].status.title.toLowerCase()}</div>\n            <div className=\"co-status-popup__icon\">{operatorStatuses[0].status.icon}</div>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\ntype OperatorsSectionProps = {\n  resources: FirehoseResourcesResult;\n  getOperatorsWithStatuses: GetOperatorsWithStatuses;\n  title: string;\n  linkTo: string;\n  rowLoader: LazyLoader;\n};\n","// extracted by mini-css-extract-plugin","// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore: FIXME missing exports due to out-of-sync @types/react-redux version\nimport { useSelector } from 'react-redux';\nimport { RootState } from '@console/internal/redux';\n\nexport const useFlag: UseFlag = (flag) =>\n  useSelector<RootState, boolean>(({ FLAGS }) => FLAGS.get(flag));\n\ntype UseFlag = (flag: string) => boolean;\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Map as ImmutableMap } from 'immutable';\nimport { connect } from 'react-redux';\n\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardLink from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardLink';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport { DashboardItemProps, withDashboardResources } from '../../with-dashboard-resources';\nimport { EventModel } from '../../../../models';\nimport { FirehoseResource, FirehoseResult } from '../../../utils';\nimport { EventKind, K8sKind } from '../../../../module/k8s';\nimport ActivityBody, { RecentEventsBody, OngoingActivityBody } from '@console/shared/src/components/dashboard/activity-card/ActivityBody';\nimport { useExtensions, DashboardsOverviewResourceActivity, DashboardsOverviewPrometheusActivity, isDashboardsOverviewResourceActivity, isDashboardsOverviewPrometheusActivity } from '@console/plugin-sdk';\nimport { uniqueResource } from './utils';\nimport { PrometheusResponse } from '../../../graphs';\nimport { useTranslation } from 'react-i18next';\n\nconst eventsResource: FirehoseResource = { isList: true, kind: EventModel.kind, prop: 'events' };\nconst viewEvents = '/k8s/all-namespaces/events';\n\nconst RecentEvent = withDashboardResources(({ watchK8sResource, stopWatchK8sResource, resources }) => {\n  React.useEffect(() => {\n    watchK8sResource(eventsResource);\n    return () => {\n      stopWatchK8sResource(eventsResource);\n    };\n  }, [watchK8sResource, stopWatchK8sResource]);\n  return <RecentEventsBody events={resources.events as FirehoseResult<EventKind[]>} moreLink={viewEvents} />;\n});\n\nconst mapStateToProps = ({ k8s }) => ({\n  models: k8s.getIn(['RESOURCES', 'models']),\n});\n\nconst OngoingActivity = connect(mapStateToProps)(\n  withDashboardResources(({ watchK8sResource, stopWatchK8sResource, resources, watchPrometheus, stopWatchPrometheusQuery, prometheusResults, models }: DashboardItemProps & OngoingActivityProps) => {\n    const resourceActivityExtensions = useExtensions<DashboardsOverviewResourceActivity>(isDashboardsOverviewResourceActivity);\n\n    const resourceActivities = React.useMemo(() => resourceActivityExtensions.filter(e => !!models.get(e.properties.k8sResource.kind)), [resourceActivityExtensions, models]);\n\n    const prometheusActivities = useExtensions<DashboardsOverviewPrometheusActivity>(isDashboardsOverviewPrometheusActivity);\n\n    React.useEffect(() => {\n      resourceActivities.forEach((a, index) => {\n        watchK8sResource(uniqueResource(a.properties.k8sResource, index));\n      });\n      prometheusActivities.forEach(a => a.properties.queries.forEach(q => watchPrometheus(q)));\n      return () => {\n        resourceActivities.forEach((a, index) => {\n          stopWatchK8sResource(uniqueResource(a.properties.k8sResource, index));\n        });\n        prometheusActivities.forEach(a => a.properties.queries.forEach(stopWatchPrometheusQuery));\n      };\n    }, [watchK8sResource, stopWatchK8sResource, watchPrometheus, stopWatchPrometheusQuery, resourceActivities, prometheusActivities]);\n\n    const allResourceActivities = React.useMemo(\n      () =>\n        _.flatten(\n          resourceActivities.map((a, index) => {\n            const k8sResources = _.get(resources, [uniqueResource(a.properties.k8sResource, index).prop, 'data'], []) as FirehoseResult['data'];\n            return k8sResources\n              .filter(r => (a.properties.isActivity ? a.properties.isActivity(r) : true))\n              .map(r => ({\n                resource: r,\n                timestamp: a.properties.getTimestamp ? a.properties.getTimestamp(r) : null,\n                loader: a.properties.loader,\n              }));\n          }),\n        ),\n      [resourceActivities, resources],\n    );\n\n    const allPrometheusActivities = React.useMemo(\n      () =>\n        prometheusActivities\n          .filter(a => {\n            const queryResults = a.properties.queries.map(q => prometheusResults.getIn([q, 'data']) as PrometheusResponse);\n            return a.properties.isActivity(queryResults);\n          })\n          .map(a => {\n            const queryResults = a.properties.queries.map(q => prometheusResults.getIn([q, 'data']) as PrometheusResponse);\n            return {\n              loader: a.properties.loader,\n              results: queryResults,\n            };\n          }),\n      [prometheusActivities, prometheusResults],\n    );\n\n    const resourcesLoaded = React.useMemo(\n      () =>\n        resourceActivities.every((a, index) => {\n          const uniqueProp = uniqueResource(a.properties.k8sResource, index).prop;\n          return resources[uniqueProp]?.loaded || resources[uniqueProp]?.loadError;\n        }),\n      [resourceActivities, resources],\n    );\n\n    const queriesLoaded = React.useMemo(() => prometheusActivities.every(a => a.properties.queries.every(q => prometheusResults.getIn([q, 'data']) || prometheusResults.getIn([q, 'loadError']))), [prometheusActivities, prometheusResults]);\n\n    return <OngoingActivityBody loaded={resourcesLoaded && queriesLoaded} resourceActivities={allResourceActivities} prometheusActivities={allPrometheusActivities} />;\n  }),\n);\n\nexport const ActivityCard: React.FC<{}> = React.memo(() => {\n  const { t } = useTranslation();\n  return (\n    <DashboardCard gradient data-test-id=\"activity-card\">\n      <DashboardCardHeader>\n        <DashboardCardTitle>{t('SINGLE:MSG_OVERVIEW_MAIN_CARDACTIVITY_TITLE_1')}</DashboardCardTitle>\n        <DashboardCardLink to={viewEvents}>{t('SINGLE:MSG_OVERVIEW_MAIN_CARDACTIVITY_ALL_1')}</DashboardCardLink>\n      </DashboardCardHeader>\n      <DashboardCardBody>\n        <ActivityBody className=\"co-overview-dashboard__activity-body\">\n          <OngoingActivity />\n          <RecentEvent />\n        </ActivityBody>\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n});\n\ntype OngoingActivityProps = {\n  models: ImmutableMap<string, K8sKind>;\n};\n","import * as React from 'react';\n\nimport Dashboard from '@console/shared/src/components/dashboard/Dashboard';\nimport DashboardGrid from '@console/shared/src/components/dashboard/DashboardGrid';\nimport { StatusCard } from './status-card';\nimport { DetailsCard } from './details-card';\nimport { InventoryCard } from './inventory-card';\nimport { UtilizationCard } from './utilization-card';\nimport { ActivityCard } from './activity-card';\nimport { useK8sGet } from '../../../utils/k8s-get-hook';\nimport { InfrastructureModel } from '../../../../models';\nimport { K8sResourceKind } from '../../../../module/k8s';\nimport { ClusterDashboardContext } from './context';\n\nconst mainCards = [{ Card: StatusCard }, { Card: UtilizationCard }];\nconst leftCards = [{ Card: DetailsCard }, { Card: InventoryCard }];\nconst rightCards = [{ Card: ActivityCard }];\n\nexport const ClusterDashboard: React.FC<{}> = () => {\n  const [infrastructure, infrastructureLoaded, infrastructureError] = useK8sGet<K8sResourceKind>(\n    InfrastructureModel,\n    'cluster',\n  );\n\n  const context = {\n    infrastructure,\n    infrastructureLoaded,\n    infrastructureError,\n  };\n\n  return (\n    <ClusterDashboardContext.Provider value={context}>\n      <Dashboard>\n        <DashboardGrid mainCards={mainCards} leftCards={leftCards} rightCards={rightCards} />\n      </Dashboard>\n    </ClusterDashboardContext.Provider>\n  );\n};\n","import * as React from 'react';\nimport { K8sResourceKind } from '../../../../module/k8s';\n\nexport const ClusterDashboardContext = React.createContext<ClusterDashboardContext>({\n  infrastructureLoaded: true,\n  infrastructureError: null,\n});\n\ntype ClusterDashboardContext = {\n  infrastructure?: K8sResourceKind;\n  infrastructureLoaded: boolean;\n  infrastructureError: any;\n};\n","import * as React from 'react';\nimport { connect } from 'react-redux';\nimport { Button } from '@patternfly/react-core';\nimport { ArrowCircleUpIcon, InProgressIcon } from '@patternfly/react-icons';\nimport { FLAGS, getInfrastructureAPIURL, getInfrastructurePlatform } from '@console/shared';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport DetailsBody from '@console/shared/src/components/dashboard/details-card/DetailsBody';\nimport DetailItem from '@console/shared/src/components/dashboard/details-card/DetailItem';\nimport { DashboardItemProps, withDashboardResources } from '../../with-dashboard-resources';\nimport { ClusterVersionModel } from '../../../../models';\nimport { referenceForModel, getOpenShiftVersion, getK8sGitVersion, ClusterVersionKind, getClusterID, getDesiredClusterVersion, getLastCompletedUpdate, getClusterUpdateStatus, getClusterVersionChannel, ClusterUpdateStatus, getOCMLink } from '../../../../module/k8s';\nimport { flagPending, featureReducerName } from '../../../../reducers/features';\nimport { ExternalLink } from '../../../utils';\nimport { RootState } from '../../../../redux';\nimport { clusterUpdateModal } from '../../../modals';\nimport { Link } from 'react-router-dom';\nimport { useK8sWatchResource, WatchK8sResource } from '../../../utils/k8s-watch-hook';\nimport { ClusterDashboardContext } from './context';\nimport { getAccessToken } from '../../../../hypercloud/auth';\nimport { getActivePerspective, getActiveCluster } from '../../../../actions/ui';\nimport { useTranslation } from 'react-i18next';\n\nconst ClusterVersion: React.FC<ClusterVersionProps> = ({ cv }) => {\n  const desiredVersion = getDesiredClusterVersion(cv);\n  const lastVersion = getLastCompletedUpdate(cv);\n  const status = getClusterUpdateStatus(cv);\n\n  switch (status) {\n    case ClusterUpdateStatus.Updating:\n      return (\n        <>\n          <span className=\"co-select-to-copy\">{desiredVersion}</span>\n          <div>\n            <Link to=\"/settings/cluster/\">\n              <InProgressIcon className=\"co-icon-and-text__icon\" />\n              Updating\n            </Link>\n          </div>\n        </>\n      );\n    case ClusterUpdateStatus.UpdatesAvailable:\n      return (\n        <>\n          <span className=\"co-select-to-copy\">{desiredVersion}</span>\n          <div>\n            <Button variant=\"link\" className=\"btn-link--no-btn-default-values\" onClick={() => clusterUpdateModal({ cv })} icon={<ArrowCircleUpIcon />} isInline>\n              Update\n            </Button>\n          </div>\n        </>\n      );\n    default:\n      return lastVersion ? <span className=\"co-select-to-copy\">{lastVersion}</span> : <span className=\"text-secondary\">Not available</span>;\n  }\n};\n\nconst clusterVersionResource: WatchK8sResource = {\n  kind: referenceForModel(ClusterVersionModel),\n  namespaced: false,\n  name: 'version',\n  isList: false,\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  openshiftFlag: state[featureReducerName].get(FLAGS.OPENSHIFT),\n});\n\nexport const DetailsCard_ = connect(mapStateToProps)(({ watchK8sResource, stopWatchK8sResource, openshiftFlag }: DetailsCardProps) => {\n  const { infrastructure, infrastructureLoaded, infrastructureError } = React.useContext(ClusterDashboardContext);\n  const [k8sVersion, setK8sVersion] = React.useState<Response>();\n  const [k8sVersionError, setK8sVersionError] = React.useState();\n  const { t } = useTranslation();\n  const [clusterVersionData, clusterVersionLoaded, clusterVersionError] = useK8sWatchResource<ClusterVersionKind>(clusterVersionResource);\n  React.useEffect(() => {\n    if (flagPending(openshiftFlag)) {\n      return;\n    }\n    const fetchK8sVersion = async () => {\n      let url;\n      let headers;\n      if (getActivePerspective() === 'master') {\n        url = 'api/kubernetes/version';\n      } else {\n        url = `api/${getActiveCluster()}/version`;\n        headers = new Headers();\n        headers.append('Authorization', `Bearer ${getAccessToken()}`);\n      }\n      try {\n        let version = await (await fetch(url)).json();\n        setK8sVersion(version);\n      } catch (error) {\n        setK8sVersionError(error);\n      }\n    };\n    fetchK8sVersion();\n  }, [openshiftFlag, watchK8sResource, stopWatchK8sResource]);\n\n  const clusterId = getClusterID(clusterVersionData);\n  const openShiftVersion = getOpenShiftVersion(clusterVersionData);\n  const cvChannel = getClusterVersionChannel(clusterVersionData);\n\n  const infrastructurePlatform = getInfrastructurePlatform(infrastructure);\n  const infrastuctureApiUrl = getInfrastructureAPIURL(infrastructure);\n\n  const k8sGitVersion = getK8sGitVersion(k8sVersion);\n\n  return (\n    <DashboardCard data-test-id=\"details-card\">\n      <DashboardCardHeader>\n        <DashboardCardTitle>{t('COMMON:MSG_DETAILS_TAB_1')}</DashboardCardTitle>\n        {/* <DashboardCardLink to=\"/settings/cluster/\">View settings</DashboardCardLink> */}\n      </DashboardCardHeader>\n      <DashboardCardBody isLoading={flagPending(openshiftFlag)}>\n        <DetailsBody>\n          {openshiftFlag ? (\n            <>\n              <DetailItem title=\"Cluster API address\" isLoading={!infrastructureLoaded} error={!!infrastructureError || (infrastructure && !infrastuctureApiUrl)} valueClassName=\"co-select-to-copy\">\n                {infrastuctureApiUrl}\n              </DetailItem>\n              <DetailItem title=\"Cluster ID\" error={!!clusterVersionError || (clusterVersionLoaded && !clusterId)} isLoading={!clusterVersionLoaded}>\n                <div className=\"co-select-to-copy\">{clusterId}</div>\n                {window.SERVER_FLAGS.branding !== 'okd' && window.SERVER_FLAGS.branding !== 'azure' && <ExternalLink text=\"OpenShift Cluster Manager\" href={getOCMLink(clusterId)} />}\n              </DetailItem>\n              <DetailItem title=\"Provider\" error={!!infrastructureError || (infrastructure && !infrastructurePlatform)} isLoading={!infrastructureLoaded} valueClassName=\"co-select-to-copy\">\n                {infrastructurePlatform}\n              </DetailItem>\n              <DetailItem title=\"OpenShift version\" error={!!clusterVersionError || (clusterVersionLoaded && !openShiftVersion)} isLoading={!clusterVersionLoaded}>\n                <ClusterVersion cv={clusterVersionData} />\n              </DetailItem>\n              <DetailItem title=\"Update channel\" isLoading={!clusterVersionLoaded && !clusterVersionError} error={!!clusterVersionError || (clusterVersionLoaded && !cvChannel)} valueClassName=\"co-select-to-copy\">\n                {cvChannel}\n              </DetailItem>\n            </>\n          ) : (\n            <DetailItem key=\"kubernetes\" title={t('SINGLE:MSG_OVERVIEW_MAIN_CARDDETAILS_1')} error={!!k8sVersionError || (k8sVersion && !k8sGitVersion)} isLoading={!k8sVersion} valueClassName=\"co-select-to-copy\">\n              {k8sGitVersion}\n            </DetailItem>\n          )}\n        </DetailsBody>\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n});\n\nexport const DetailsCard = withDashboardResources(DetailsCard_);\n\ntype DetailsCardProps = DashboardItemProps & {\n  openshiftFlag: boolean;\n};\n\ntype ClusterVersionProps = {\n  cv: ClusterVersionKind;\n};\n","import * as React from 'react';\nimport { Map as ImmutableMap } from 'immutable';\nimport { DashboardsOverviewHealthOperator, DashboardsOverviewHealthURLSubsystem, DashboardsOverviewHealthPrometheusSubsystem, DashboardsOverviewHealthResourceSubsystem } from '@console/plugin-sdk';\nimport HealthItem from '@console/shared/src/components/dashboard/status-card/HealthItem';\nimport { OperatorsSection } from '@console/shared/src/components/dashboard/status-card/OperatorStatusBody';\nimport { getOperatorsHealthState, getMostImportantStatuses } from '@console/shared/src/components/dashboard/status-card/state-utils';\nimport { HealthState } from '@console/shared/src/components/dashboard/status-card/states';\nimport { K8sKind } from '../../../../module/k8s';\nimport { FirehoseResourcesResult, AsyncComponent, resourcePath } from '../../../utils';\nimport { useK8sWatchResources } from '../../../utils/k8s-watch-hook';\nimport { withDashboardResources, DashboardItemProps } from '../../with-dashboard-resources';\nimport { uniqueResource } from './utils';\nimport { getPrometheusQueryResponse } from '../../../../actions/dashboards';\nimport { useTranslation } from 'react-i18next';\n\nexport const OperatorsPopup: React.FC<OperatorsPopupProps> = ({ resources, operatorExtensions }) => {\n  const { t } = useTranslation();\n  const sections = operatorExtensions\n    .map((o, index) => {\n      const operatorResources = o.properties.resources.reduce((acc, r) => {\n        acc[r.prop] = resources[uniqueResource(r, index).prop];\n        return acc;\n      }, {});\n      return <OperatorsSection key={o.properties.title} resources={operatorResources} getOperatorsWithStatuses={o.properties.getOperatorsWithStatuses} title={o.properties.title} linkTo={o.properties.viewAllLink || resourcePath(o.properties.resources[0].kind)} rowLoader={o.properties.operatorRowLoader} />;\n    })\n    .reverse();\n  return (\n    <>\n      {t('SINGLE:MSG_OVERVIEW_MAIN_POPOVEROPERATOR_DESCRIPTION_1')}\n      {sections}\n    </>\n  );\n};\n\nexport const OperatorHealthItem = withDashboardResources<OperatorHealthItemProps>(({ resources, watchK8sResource, stopWatchK8sResource, operatorExtensions }) => {\n  React.useEffect(() => {\n    operatorExtensions.forEach((o, index) => o.properties.resources.forEach(r => watchK8sResource(uniqueResource(r, index))));\n    return () => {\n      operatorExtensions.forEach((o, index) => o.properties.resources.forEach(r => stopWatchK8sResource(uniqueResource(r, index))));\n    };\n  }, [watchK8sResource, stopWatchK8sResource, operatorExtensions]);\n  const { t } = useTranslation();\n  const healthStatuses = operatorExtensions.map((o, index) => {\n    const operatorResources = o.properties.resources.reduce((acc, r) => {\n      acc[r.prop] = resources[uniqueResource(r, index).prop] || {};\n      return acc;\n    }, {});\n    if (Object.keys(operatorResources).some(resource => operatorResources[resource].loadError)) {\n      return { health: HealthState.NOT_AVAILABLE };\n    }\n    if (Object.keys(operatorResources).some(resource => !operatorResources[resource].loaded)) {\n      return { health: HealthState.LOADING };\n    }\n    const operatorStatuses = o.properties.getOperatorsWithStatuses(operatorResources);\n    const importantStatuses = getMostImportantStatuses(operatorStatuses);\n    return {\n      health: importantStatuses[0].status.health,\n      count: importantStatuses.length,\n    };\n  });\n\n  const operatorsHealth = getOperatorsHealthState(healthStatuses);\n\n  return (\n    <HealthItem title={t('SINGLE:MSG_OVERVIEW_MAIN_CARDSTATUS_OPERATORS_1')} state={operatorsHealth.health} details={operatorsHealth.detailMessage} popupTitle={t('SINGLE:MSG_OVERVIEW_MAIN_POPOVEROPERATOR_TITLE_1')}>\n      <OperatorsPopup resources={resources} operatorExtensions={operatorExtensions} />\n    </HealthItem>\n  );\n});\n\nexport const URLHealthItem = withDashboardResources<URLHealthItemProps>(({ watchURL, stopWatchURL, urlResults, resources, watchK8sResource, stopWatchK8sResource, subsystem, models }) => {\n  const { t } = useTranslation();\n  const modelExists = subsystem.additionalResource && !!models.get(subsystem.additionalResource.kind);\n  React.useEffect(() => {\n    watchURL(subsystem.url, subsystem.fetch);\n    if (modelExists) {\n      watchK8sResource(subsystem.additionalResource);\n    }\n    return () => {\n      stopWatchURL(subsystem.url);\n      if (modelExists) {\n        stopWatchK8sResource(subsystem.additionalResource);\n      }\n    };\n  }, [watchURL, stopWatchURL, watchK8sResource, stopWatchK8sResource, subsystem, modelExists]);\n\n  const healthResult = urlResults.getIn([subsystem.url, 'data']);\n  const healthResultError = urlResults.getIn([subsystem.url, 'loadError']);\n\n  const k8sResult = subsystem.additionalResource ? resources[subsystem.additionalResource.prop] : null;\n  const healthState = subsystem.healthHandler(healthResult, healthResultError, k8sResult);\n\n  if (subsystem.title === 'Cluster') {\n    subsystem.title = t('SINGLE:MSG_OVERVIEW_MAIN_TABCLUSTER_1');\n  }\n\n  return (\n    <HealthItem title={subsystem.title} state={healthState.state} details={healthState.message} popupTitle={subsystem.popupTitle}>\n      {subsystem.popupComponent && <AsyncComponent loader={subsystem.popupComponent} healthResult={healthResult} healthResultError={healthResultError} k8sResult={k8sResult} />}\n    </HealthItem>\n  );\n});\n\nexport const PrometheusHealthItem = withDashboardResources<PrometheusHealthItemProps>(({ watchK8sResource, stopWatchK8sResource, resources, watchPrometheus, stopWatchPrometheusQuery, prometheusResults, subsystem, models }) => {\n  const modelExists = subsystem.additionalResource && !!models.get(subsystem.additionalResource.kind);\n  React.useEffect(() => {\n    subsystem.queries.forEach(q => watchPrometheus(q));\n    if (modelExists) {\n      watchK8sResource(subsystem.additionalResource);\n    }\n    return () => {\n      subsystem.queries.forEach(q => stopWatchPrometheusQuery(q));\n      if (modelExists) {\n        stopWatchK8sResource(subsystem.additionalResource);\n      }\n    };\n  }, [watchK8sResource, stopWatchK8sResource, watchPrometheus, stopWatchPrometheusQuery, subsystem, modelExists]);\n\n  const queryResults = React.useMemo(\n    () =>\n      subsystem.queries.map(q => {\n        const [response, error] = getPrometheusQueryResponse(prometheusResults, q);\n        return {\n          response,\n          error,\n        };\n      }),\n    [prometheusResults, subsystem.queries],\n  );\n  const k8sResult = subsystem.additionalResource ? resources[subsystem.additionalResource.prop] : null;\n  const healthState = subsystem.healthHandler(queryResults, k8sResult);\n\n  return (\n    <HealthItem title={subsystem.title} state={healthState.state} details={healthState.message} popupTitle={subsystem.popupTitle}>\n      {subsystem.popupComponent && <AsyncComponent loader={subsystem.popupComponent} responses={queryResults} k8sResult={k8sResult} />}\n    </HealthItem>\n  );\n});\n\nexport const ResourceHealthItem: React.FC<ResourceHealthItemProps> = ({ subsystem }) => {\n  const { title, resources, healthHandler, popupComponent, popupTitle } = subsystem;\n  const resourcesResult = useK8sWatchResources(resources);\n\n  const healthState = healthHandler(resourcesResult);\n\n  return (\n    <HealthItem title={title} state={healthState.state} details={healthState.message} popupTitle={popupTitle}>\n      {popupComponent && <AsyncComponent loader={popupComponent} {...resourcesResult} />}\n    </HealthItem>\n  );\n};\n\ntype OperatorHealthItemProps = DashboardItemProps & {\n  operatorExtensions: DashboardsOverviewHealthOperator[];\n};\n\ntype URLHealthItemProps = DashboardItemProps & {\n  subsystem: DashboardsOverviewHealthURLSubsystem<any>['properties'];\n  models: ImmutableMap<string, K8sKind>;\n};\n\ntype PrometheusHealthItemProps = DashboardItemProps & {\n  subsystem: DashboardsOverviewHealthPrometheusSubsystem['properties'];\n  models: ImmutableMap<string, K8sKind>;\n};\n\ntype ResourceHealthItemProps = {\n  subsystem: DashboardsOverviewHealthResourceSubsystem['properties'];\n};\n\ntype OperatorsPopupProps = {\n  resources: FirehoseResourcesResult;\n  operatorExtensions: DashboardsOverviewHealthOperator[];\n};\n","import * as React from 'react';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport { ResourceInventoryItem, StatusGroupMapper } from '@console/shared/src/components/dashboard/inventory-card/InventoryItem';\nimport { DashboardItemProps, withDashboardResources } from '../../with-dashboard-resources';\nimport { K8sKind, referenceForModel, K8sResourceCommon } from '../../../../module/k8s';\nimport { AsyncComponent } from '../../../utils';\nimport { useExtensions, DashboardsOverviewInventoryItem, DashboardsOverviewInventoryItemReplacement, isDashboardsOverviewInventoryItem, isDashboardsOverviewInventoryItemReplacement, LazyLoader } from '@console/plugin-sdk';\nimport { useK8sWatchResource, useK8sWatchResources, WatchK8sResources } from '../../../utils/k8s-watch-hook';\nimport { useTranslation } from 'react-i18next';\n\nconst mergeItems = (items: DashboardsOverviewInventoryItem[], replacements: DashboardsOverviewInventoryItemReplacement[]) => items.map(item => replacements.find(r => r.properties.model === item.properties.model) || item);\n\nconst getFirehoseResource = (model: K8sKind) => ({\n  isList: true,\n  kind: model.crd ? referenceForModel(model) : model.kind,\n  prop: 'resource',\n});\n\nconst ClusterInventoryItem = withDashboardResources<ClusterInventoryItemProps>(\n  React.memo(({ model, mapper, useAbbr, additionalResources, expandedComponent }: ClusterInventoryItemProps) => {\n    const mainResource = React.useMemo(() => getFirehoseResource(model), [model]);\n    const otherResources = React.useMemo(() => additionalResources || {}, [additionalResources]);\n    const [resourceData, resourceLoaded, resourceLoadError] = useK8sWatchResource<K8sResourceCommon[]>(mainResource);\n    const resources = useK8sWatchResources(otherResources);\n\n    const additionalResourcesData = {};\n    let additionalResourcesLoaded = true;\n    let additionalResourcesLoadError = false;\n    if (additionalResources) {\n      additionalResourcesLoaded = Object.keys(additionalResources)\n        .filter(key => !additionalResources[key].optional)\n        .every(key => resources[key].loaded);\n      Object.keys(additionalResources).forEach(key => {\n        additionalResourcesData[key] = resources[key].data;\n      });\n      additionalResourcesLoadError = Object.keys(additionalResources)\n        .filter(key => !additionalResources[key].optional)\n        .some(key => !!resources[key].loadError);\n    }\n\n    const ExpandedComponent = React.useCallback(() => <AsyncComponent loader={expandedComponent} resource={resourceData} additionalResources={additionalResourcesData} />, [resourceData, additionalResourcesData, expandedComponent]);\n\n    return <ResourceInventoryItem isLoading={!resourceLoaded || !additionalResourcesLoaded} error={!!resourceLoadError || additionalResourcesLoadError} kind={model} resources={resourceData} mapper={mapper} useAbbr={useAbbr} additionalResources={additionalResourcesData} ExpandedComponent={expandedComponent ? ExpandedComponent : null} />;\n  }),\n);\n\nexport const InventoryCard = () => {\n  const itemExtensions = useExtensions<DashboardsOverviewInventoryItem>(isDashboardsOverviewInventoryItem);\n\n  const replacementExtensions = useExtensions<DashboardsOverviewInventoryItemReplacement>(isDashboardsOverviewInventoryItemReplacement);\n\n  const mergedItems = React.useMemo(() => mergeItems(itemExtensions, replacementExtensions), [itemExtensions, replacementExtensions]);\n  const { t } = useTranslation();\n  return (\n    <DashboardCard data-test-id=\"inventory-card\">\n      <DashboardCardHeader>\n        <DashboardCardTitle>{t('SINGLE:MSG_OVERVIEW_MAIN_CARDCLUSTERINVENTORY_1')}</DashboardCardTitle>\n      </DashboardCardHeader>\n      <DashboardCardBody>\n        {mergedItems.map(item => (\n          <ClusterInventoryItem key={item.properties.model.kind} model={item.properties.model} mapper={item.properties.mapper} additionalResources={item.properties.additionalResources} useAbbr={item.properties.useAbbr} expandedComponent={item.properties.expandedComponent} />\n        ))}\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n};\n\ntype ClusterInventoryItemProps = DashboardItemProps & {\n  model: K8sKind;\n  mapper?: StatusGroupMapper;\n  useAbbr?: boolean;\n  additionalResources?: WatchK8sResources<any>;\n  expandedComponent?: LazyLoader;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { connect } from 'react-redux';\nimport { Map as ImmutableMap } from 'immutable';\nimport { useExtensions, DashboardsOverviewHealthSubsystem, DashboardsOverviewHealthPrometheusSubsystem, isDashboardsOverviewHealthSubsystem, isDashboardsOverviewHealthURLSubsystem, DashboardsOverviewHealthURLSubsystem, isDashboardsOverviewHealthPrometheusSubsystem, isDashboardsOverviewHealthResourceSubsystem, isDashboardsOverviewHealthOperator } from '@console/plugin-sdk';\nimport { ArrowCircleUpIcon } from '@patternfly/react-icons';\nimport { Gallery, GalleryItem, Button } from '@patternfly/react-core';\nimport { FLAGS, getInfrastructurePlatform } from '@console/shared';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardLink from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardLink';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport AlertsBody from '@console/shared/src/components/dashboard/status-card/AlertsBody';\nimport HealthBody from '@console/shared/src/components/dashboard/status-card/HealthBody';\nimport { withDashboardResources } from '../../with-dashboard-resources';\nimport AlertItem, { StatusItem } from '@console/shared/src/components/dashboard/status-card/AlertItem';\nimport { alertURL } from '../../../monitoring';\nimport { ClusterVersionKind, referenceForModel, hasAvailableUpdates, K8sKind } from '../../../../module/k8s';\nimport { ClusterVersionModel } from '../../../../models';\nimport { clusterUpdateModal } from '../../../modals/cluster-update-modal';\nimport { RootState } from '../../../../redux';\nimport { OperatorHealthItem, PrometheusHealthItem, URLHealthItem, ResourceHealthItem } from './health-item';\nimport { WatchK8sResource, useK8sWatchResource } from '../../../utils/k8s-watch-hook';\nimport { useFlag } from '@console/shared/src/hooks/flag';\nimport { ClusterDashboardContext } from './context';\nimport { useTranslation } from 'react-i18next';\n\nconst filterSubsystems = (subsystems: DashboardsOverviewHealthSubsystem[], k8sModels: ImmutableMap<string, K8sKind>) =>\n  subsystems.filter(s => {\n    if (isDashboardsOverviewHealthURLSubsystem(s) || isDashboardsOverviewHealthPrometheusSubsystem(s)) {\n      const subsystem = s as DashboardsOverviewHealthPrometheusSubsystem | DashboardsOverviewHealthURLSubsystem;\n      return subsystem.properties.additionalResource && !subsystem.properties.additionalResource.optional ? !!k8sModels.get(subsystem.properties.additionalResource.kind) : true;\n    }\n    return true;\n  });\n\nconst cvResource: WatchK8sResource = {\n  kind: referenceForModel(ClusterVersionModel),\n  namespaced: false,\n  name: 'version',\n  isList: false,\n};\n\nconst ClusterAlerts = withDashboardResources(({ watchAlerts, stopWatchAlerts, notificationAlerts }) => {\n  const hasCVResource = useFlag(FLAGS.CLUSTER_VERSION);\n  const [cv, cvLoaded] = useK8sWatchResource<ClusterVersionKind>(hasCVResource ? cvResource : ({} as WatchK8sResource));\n  React.useEffect(() => {\n    watchAlerts();\n    return stopWatchAlerts;\n  }, [watchAlerts, stopWatchAlerts]);\n\n  const { data: alerts, loaded: alertsLoaded, loadError: alertsResponseError } = notificationAlerts || {};\n\n  const UpdateIcon = React.useCallback(() => <ArrowCircleUpIcon className=\"update-pending\" />, []);\n\n  const items: React.ReactNode[] = [];\n\n  if (hasCVResource && cvLoaded && hasAvailableUpdates(cv)) {\n    items.push(\n      <StatusItem Icon={UpdateIcon} message=\"A cluster version update is available\">\n        <Button variant=\"link\" onClick={() => clusterUpdateModal({ cv })} isInline>\n          View details\n        </Button>\n      </StatusItem>,\n    );\n  }\n\n  if (alertsLoaded && !_.isEmpty(alerts)) {\n    items.push(...alerts.map(alert => <AlertItem key={alertURL(alert, alert.rule.id)} alert={alert} />));\n  }\n\n  return <AlertsBody error={!_.isEmpty(alertsResponseError)}>{items}</AlertsBody>;\n});\n\nconst mapStateToProps = (state: RootState) => ({\n  k8sModels: state.k8s.getIn(['RESOURCES', 'models']),\n});\n\nexport const StatusCard = connect<StatusCardProps>(mapStateToProps)(({ k8sModels }) => {\n  const { t } = useTranslation();\n  const subsystemExtensions = useExtensions<DashboardsOverviewHealthSubsystem>(isDashboardsOverviewHealthSubsystem);\n\n  const subsystems = React.useMemo(() => filterSubsystems(subsystemExtensions, k8sModels), [subsystemExtensions, k8sModels]);\n\n  const operatorSubsystemIndex = React.useMemo(() => subsystems.findIndex(isDashboardsOverviewHealthOperator), [subsystems]);\n  const { infrastructure, infrastructureLoaded } = React.useContext(ClusterDashboardContext);\n\n  const healthItems: { title: string; Component: React.ReactNode }[] = [];\n  subsystems.forEach(subsystem => {\n    if (isDashboardsOverviewHealthURLSubsystem(subsystem)) {\n      healthItems.push({\n        title: subsystem.properties.title,\n        Component: <URLHealthItem subsystem={subsystem.properties} models={k8sModels} />,\n      });\n    } else if (isDashboardsOverviewHealthPrometheusSubsystem(subsystem)) {\n      const { disallowedProviders } = subsystem.properties;\n      if (disallowedProviders?.length && (!infrastructureLoaded || disallowedProviders.includes(getInfrastructurePlatform(infrastructure)))) {\n        return;\n      }\n      healthItems.push({\n        title: subsystem.properties.title,\n        Component: <PrometheusHealthItem subsystem={subsystem.properties} models={k8sModels} />,\n      });\n    } else if (isDashboardsOverviewHealthResourceSubsystem(subsystem)) {\n      healthItems.push({\n        title: subsystem.properties.title,\n        Component: <ResourceHealthItem subsystem={subsystem.properties} />,\n      });\n    }\n  });\n  if (operatorSubsystemIndex !== -1) {\n    const operatorSubsystems = subsystems.filter(isDashboardsOverviewHealthOperator);\n    healthItems.splice(operatorSubsystemIndex, 0, {\n      title: t('SINGLE:MSG_OVERVIEW_MAIN_CARDSTATUS_OPERATORS_1'),\n      Component: <OperatorHealthItem operatorExtensions={operatorSubsystems} />,\n    });\n  }\n\n  return (\n    <DashboardCard gradient data-test-id=\"status-card\">\n      <DashboardCardHeader>\n        <DashboardCardTitle>{t('SINGLE:MSG_OVERVIEW_MAIN_CARDSTATUS_TITLE_1')}</DashboardCardTitle>\n        <DashboardCardLink to=\"/monitoring/alerts\">View alerts</DashboardCardLink>\n      </DashboardCardHeader>\n      <DashboardCardBody>\n        <HealthBody>\n          <Gallery className=\"co-overview-status__health\" gutter=\"md\">\n            {healthItems.map(item => {\n              return <GalleryItem key={item.title}>{item.Component}</GalleryItem>;\n            })}\n          </Gallery>\n        </HealthBody>\n        <ClusterAlerts />\n      </DashboardCardBody>\n    </DashboardCard>\n  );\n});\n\ntype StatusCardProps = {\n  k8sModels: ImmutableMap<string, K8sKind>;\n};\n","import * as React from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { Map as ImmutableMap } from 'immutable';\nimport { Helmet } from 'react-helmet';\n\nimport { ClusterDashboard } from './cluster-dashboard/cluster-dashboard';\nimport { HorizontalNav, PageHeading, LoadingBox, Page, AsyncComponent } from '../../utils';\nimport Dashboard from '@console/shared/src/components/dashboard/Dashboard';\nimport DashboardGrid, { GridPosition, GridDashboardCard } from '@console/shared/src/components/dashboard/DashboardGrid';\nimport { useExtensions, DashboardsCard, DashboardsTab, isDashboardsCard, isDashboardsTab } from '@console/plugin-sdk';\nimport { RootState } from '../../../redux';\nimport { useTranslation } from 'react-i18next';\n\nconst getCardsOnPosition = (cards: DashboardsCard[], position: GridPosition): GridDashboardCard[] =>\n  cards\n    .filter(c => c.properties.position === position)\n    .map(c => ({\n      Card: () => <AsyncComponent loader={c.properties.loader} />,\n      span: c.properties.span,\n    }));\n\nconst getPluginTabPages = (tabs: DashboardsTab[], cards: DashboardsCard[]): Page[] =>\n  tabs.map(tab => {\n    const tabCards = cards.filter(c => c.properties.tab === tab.properties.id);\n    return {\n      href: tab.properties.id,\n      name: tab.properties.title,\n      component: () => (\n        <Dashboard>\n          <DashboardGrid mainCards={getCardsOnPosition(tabCards, GridPosition.MAIN)} leftCards={getCardsOnPosition(tabCards, GridPosition.LEFT)} rightCards={getCardsOnPosition(tabCards, GridPosition.RIGHT)} />\n        </Dashboard>\n      ),\n    };\n  });\n\nconst DashboardsPage_: React.FC<DashboardsPageProps> = ({ match, kindsInFlight, k8sModels }) => {\n  const { t } = useTranslation();\n  const title = t('COMMON:MSG_LNB_MENU_90');\n  const tabExtensions = useExtensions<DashboardsTab>(isDashboardsTab);\n  const cardExtensions = useExtensions<DashboardsCard>(isDashboardsCard);\n\n  const pluginPages = React.useMemo(() => getPluginTabPages(tabExtensions, cardExtensions), [tabExtensions, cardExtensions]);\n\n  const allPages = React.useMemo(\n    () => [\n      {\n        href: '',\n        name: t('SINGLE:MSG_OVERVIEW_MAIN_TABCLUSTER_1'),\n        component: ClusterDashboard,\n      },\n      ...pluginPages,\n    ],\n    [pluginPages],\n  );\n\n  return kindsInFlight && k8sModels.size === 0 ? (\n    <LoadingBox />\n  ) : (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <PageHeading title={title} detail={true} />\n      <HorizontalNav match={match} pages={allPages} noStatusBox />\n    </>\n  );\n};\n\nconst mapStateToProps = (state: RootState) => ({\n  kindsInFlight: state.k8s.getIn(['RESOURCES', 'inFlight']),\n  k8sModels: state.k8s.getIn(['RESOURCES', 'models']),\n});\n\nexport const DashboardsPage = connect(mapStateToProps)(DashboardsPage_);\n\ntype DashboardsPageProps = RouteComponentProps & {\n  kindsInFlight: boolean;\n  k8sModels: ImmutableMap<string, any>;\n};\n","import * as React from 'react';\nimport { k8sGet, K8sKind, K8sResourceCommon } from '../../module/k8s';\n\nexport const useK8sGet = <R extends K8sResourceCommon = K8sResourceCommon>(\n  kind: K8sKind,\n  name?: string,\n  namespace?: string,\n  opts?: { [k: string]: string },\n): [R, boolean, any] => {\n  const [data, setData] = React.useState<R>();\n  const [loaded, setLoaded] = React.useState(false);\n  const [loadError, setLoadError] = React.useState();\n\n  React.useEffect(() => {\n    const fetch = async () => {\n      try {\n        setLoadError(null);\n        setLoaded(false);\n        setData(null);\n        const resource = await k8sGet(kind, name, namespace, opts);\n        setData(resource);\n      } catch (error) {\n        setLoadError(error);\n      } finally {\n        setLoaded(true);\n      }\n    };\n    fetch();\n  }, [kind, name, namespace, opts]);\n\n  return [data, loaded, loadError];\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AAEA;AAIA;AAEA;AACA;AACA;AAaA;AAEA;;;;;;;;;;;;;AC3DA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AAEA;AAKA;AACA;AAQA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAMA;AAEA;AAEA;AAEA;AAKA;AACA;AAaA;AAQA;AAGA;;;;;;;;;;;;;AC/CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;;AAAA;AACA;AAMA;;;;;;;;;;;;ACvCA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;;AAGA;AACA;AACA;AAIA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;;;;;;;;;;;;;AC3HA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAIA;;;;;;;;;;;;;ACrCA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AAGA;AACA;AAGA;AAGA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AAaA;AAEA;;;;;;;;;;;;;ACnJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAKA;AAEA;AACA;AACA;AAEA;AAEA;AAKA;;;;;;;;;;;;;ACtJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAOA;;;;;;;;;;;;;ACpEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AAKA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AAIA;;;;;;;;;;;;;ACzIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAIA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1EA;AACA;AAEA;AAMA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;A","sourceRoot":""}