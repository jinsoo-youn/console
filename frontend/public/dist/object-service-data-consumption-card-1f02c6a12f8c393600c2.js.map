{"version":3,"file":"object-service-data-consumption-card-1f02c6a12f8c393600c2.js","sources":["webpack:///./packages/noobaa-storage-plugin/src/components/data-consumption-card/data-consumption-card-dropdown.tsx","webpack:///./packages/noobaa-storage-plugin/src/components/data-consumption-card/data-consumption-card-utils.ts","webpack:///./packages/noobaa-storage-plugin/src/components/data-consumption-card/data-consumption-card.scss?8a20","webpack:///./packages/noobaa-storage-plugin/src/components/data-consumption-card/data-consumption-card.tsx","webpack:///./packages/noobaa-storage-plugin/src/constants/index.ts","webpack:///./packages/noobaa-storage-plugin/src/constants/queries.ts","webpack:///./packages/noobaa-storage-plugin/src/utils.ts"],"sourcesContent":["import * as React from 'react';\nimport { Dropdown, DropdownToggle, DropdownItem, DropdownPosition } from '@patternfly/react-core';\nimport {\n  ACCOUNTS,\n  PROVIDERS,\n  BY_IOPS,\n  BY_LOGICAL_USAGE,\n  BY_PHYSICAL_VS_LOGICAL_USAGE,\n  BY_EGRESS,\n} from '../../constants';\n\nexport const DataConsumptionDropdown: React.FC<DataConsumptionDropdownProps> = ({\n  type,\n  kpi,\n  setType,\n  setKpi,\n}) => {\n  const [isOpenTypeDropdown, setIsOpenTypeDropdown] = React.useState(false);\n  const [isOpenKpiDropdown, setIsOpenKpiDropdown] = React.useState(false);\n  const typesDropdown = {\n    providers: PROVIDERS,\n    accounts: ACCOUNTS,\n  };\n\n  const kpiDropdown = {\n    iops: BY_IOPS,\n    usage: type === typesDropdown.accounts ? BY_LOGICAL_USAGE : BY_PHYSICAL_VS_LOGICAL_USAGE,\n    egress: BY_EGRESS,\n  };\n\n  const typeDropdownItems = [\n    <DropdownItem id=\"providers\" key=\"Providers\" component=\"button\">\n      Providers\n    </DropdownItem>,\n    <DropdownItem id=\"accounts\" key=\"Accounts\" component=\"button\">\n      Accounts\n    </DropdownItem>,\n  ];\n\n  const providersKpiDropdownItems = [\n    <DropdownItem id=\"iops\" key=\"iops\" component=\"button\">\n      I/O Operations\n    </DropdownItem>,\n    <DropdownItem id=\"usage\" key=\"phyVslog\" component=\"button\">\n      Physical vs. Logical Usage\n    </DropdownItem>,\n    <DropdownItem id=\"egress\" key=\"egress\" component=\"button\">\n      Egress\n    </DropdownItem>,\n  ];\n\n  const accountKpiDropdownItems = [\n    <DropdownItem id=\"iops\" key=\"iops\" component=\"button\">\n      I/O Operations\n    </DropdownItem>,\n    <DropdownItem id=\"usage\" key=\"phyVslog\" component=\"button\">\n      Logical Used Capacity\n    </DropdownItem>,\n  ];\n\n  const onToggleTypeDropdown = React.useCallback((props) => {\n    setIsOpenTypeDropdown(props);\n  }, []);\n\n  const onSelectTypeDropdown = React.useCallback(\n    (e) => {\n      setIsOpenTypeDropdown(!isOpenTypeDropdown);\n      setType(typesDropdown[e.currentTarget.id]);\n      if (kpi === BY_LOGICAL_USAGE || kpi === BY_PHYSICAL_VS_LOGICAL_USAGE) {\n        const val =\n          e.currentTarget.id === 'accounts' ? BY_LOGICAL_USAGE : BY_PHYSICAL_VS_LOGICAL_USAGE;\n        setKpi(val);\n      }\n      if (kpi === 'Egress' && e.currentTarget.id === 'accounts') {\n        setKpi(kpiDropdown.iops);\n      }\n    },\n    [isOpenTypeDropdown, typesDropdown, kpiDropdown, kpi, setKpi, setType],\n  );\n\n  const onToggleKpiDropdown = React.useCallback((props) => {\n    setIsOpenKpiDropdown(props);\n  }, []);\n\n  const onSelectKpiDropdown = React.useCallback(\n    (e) => {\n      setIsOpenKpiDropdown(!isOpenKpiDropdown);\n      setKpi(kpiDropdown[e.currentTarget.id]);\n    },\n    [isOpenKpiDropdown, kpiDropdown, setKpi],\n  );\n\n  return (\n    <div className=\"nb-data-consumption-card__dropdown\">\n      <Dropdown\n        className=\"nb-data-consumption-card__dropdown-item\"\n        autoFocus={false}\n        onSelect={onSelectTypeDropdown}\n        toggle={<DropdownToggle onToggle={onToggleTypeDropdown}>{type}</DropdownToggle>}\n        position={DropdownPosition.right}\n        isOpen={isOpenTypeDropdown}\n        dropdownItems={typeDropdownItems}\n      />\n      <Dropdown\n        className=\"nb-data-consumption-card__dropdown-item\"\n        autoFocus={false}\n        onSelect={onSelectKpiDropdown}\n        toggle={<DropdownToggle onToggle={onToggleKpiDropdown}>{kpi}</DropdownToggle>}\n        position={DropdownPosition.right}\n        isOpen={isOpenKpiDropdown}\n        dropdownItems={\n          type === typesDropdown.accounts ? accountKpiDropdownItems : providersKpiDropdownItems\n        }\n      />\n    </div>\n  );\n};\n\ntype DataConsumptionDropdownProps = {\n  type: string;\n  kpi: string;\n  setKpi: (value: string | ((prevVar: string) => string)) => void;\n  setType: (value: string | ((prevVar: string) => string)) => void;\n};\n","import * as _ from 'lodash';\nimport {\n  Humanize,\n  humanizeBinaryBytes,\n  humanizeNumber,\n  HumanizeResult,\n} from '@console/internal/components/utils';\nimport { PrometheusResponse } from '@console/internal/components/graphs';\nimport {\n  ACCOUNTS,\n  BY_IOPS,\n  BY_LOGICAL_USAGE,\n  BY_PHYSICAL_VS_LOGICAL_USAGE,\n  BY_EGRESS,\n  PROVIDERS,\n} from '../../constants';\nimport { DATA_CONSUMPTION_QUERIES, ObjectServiceDashboardQuery } from '../../constants/queries';\nimport { getGaugeValue } from '../../utils';\n\nexport const DataConsumersValue = {\n  [PROVIDERS]: 'PROVIDERS_',\n  [ACCOUNTS]: 'ACCOUNTS_',\n};\nexport const DataConsumersSortByValue = {\n  [BY_IOPS]: 'BY_IOPS',\n  [BY_LOGICAL_USAGE]: 'BY_LOGICAL_USAGE',\n  [BY_PHYSICAL_VS_LOGICAL_USAGE]: 'BY_PHYSICAL_VS_LOGICAL_USAGE',\n  [BY_EGRESS]: 'BY_EGRESS',\n};\n\n/* utility mapper to convert number in words */\nexport const numberInWords: { [k: string]: string } = {\n  '': '',\n  k: 'thousands',\n  m: 'millions',\n  b: 'billions',\n};\n\nexport const getQueries: GetQueries = (metric, kpi) => {\n  const queries =\n    DATA_CONSUMPTION_QUERIES[\n      ObjectServiceDashboardQuery[DataConsumersValue[metric] + DataConsumersSortByValue[kpi]]\n    ];\n  const keys = Object.keys(queries);\n  return { queries, keys };\n};\n\nconst getMaxVal: GetMaxVal = (response, humanize) => {\n  const result: PrometheusResponse['data']['result'] = _.get(response, 'data.result', []);\n  let maxVal = { unit: '', value: 0, string: '' };\n  if (result.length) {\n    maxVal = humanize(_.maxBy(result, (r) => Number(r.value[1])).value[1]);\n  }\n  return maxVal;\n};\n\nexport const getChartData: GetChartData = (response, metric, humanize, unit, name) => {\n  const result = _.get(response, 'data.result', []);\n  return result.map((r) => {\n    const x = _.get(r, ['metric', metric], '');\n    const y = parseFloat(_.get(r, 'value[1]'));\n    let val = name;\n    if (!name) val = x; // For Egress, which have the legend name(name) as providers name(x)\n    return {\n      name: val,\n      x: _.truncate(x, { length: 18 }),\n      y: Number(humanize(y, null, unit).value),\n    };\n  });\n};\n\nexport const getLegendData: GetLegendData = (response, humanize) => {\n  const value = getGaugeValue(response);\n  return value ? humanize(value).string : '';\n};\n\nexport const getDataConsumptionChartData: GetDataConsumptionChartData = (\n  result,\n  metric,\n  dropdownValue,\n) => {\n  let chartData: ChartData;\n  let legendData: LegendData;\n  let max: HumanizeResult;\n  let firstBarMax: HumanizeResult;\n  let secondBarMax: HumanizeResult;\n  let nonFormattedData: ChartDataPoint[];\n  switch (dropdownValue) {\n    case 'PROVIDERS_BY_IOPS':\n    case 'ACCOUNTS_BY_IOPS':\n      firstBarMax = getMaxVal(result.read, humanizeNumber);\n      secondBarMax = getMaxVal(result.write, humanizeNumber);\n      max = firstBarMax.value > secondBarMax.value ? firstBarMax : secondBarMax;\n      chartData = [\n        getChartData(result.read, metric, humanizeNumber, max.unit, 'Total Reads'),\n        getChartData(result.write, metric, humanizeNumber, max.unit, 'Total Writes'),\n      ];\n      legendData = [\n        { name: `Total Reads ${getLegendData(result.totalRead, humanizeNumber)}` },\n        { name: `Total Writes ${getLegendData(result.totalWrite, humanizeNumber)}` },\n      ];\n      break;\n    case 'ACCOUNTS_BY_LOGICAL_USAGE':\n      max = getMaxVal(result.logicalUsage, humanizeBinaryBytes);\n      chartData = [\n        getChartData(\n          result.logicalUsage,\n          metric,\n          humanizeBinaryBytes,\n          max.unit,\n          'Total Logical Used Capacity',\n        ),\n      ];\n      legendData = [\n        {\n          name: `Total Logical Used Capacity ${getLegendData(\n            result.totalLogicalUsage,\n            humanizeBinaryBytes,\n          )}`,\n        },\n      ];\n      break;\n    case 'PROVIDERS_BY_PHYSICAL_VS_LOGICAL_USAGE':\n      firstBarMax = getMaxVal(result.physicalUsage, humanizeBinaryBytes);\n      secondBarMax = getMaxVal(result.logicalUsage, humanizeBinaryBytes);\n      max = firstBarMax.value > secondBarMax.value ? firstBarMax : secondBarMax;\n      chartData = [\n        getChartData(\n          result.logicalUsage,\n          metric,\n          humanizeBinaryBytes,\n          max.unit,\n          'Total Logical Used Capacity',\n        ),\n        getChartData(\n          result.physicalUsage,\n          metric,\n          humanizeBinaryBytes,\n          max.unit,\n          'Total Physical Used Capacity',\n        ),\n      ];\n      legendData = [\n        {\n          name: `Total Logical Used Capacity ${getLegendData(\n            result.totalLogicalUsage,\n            humanizeBinaryBytes,\n          )}`,\n        },\n        {\n          name: `Total Physical Used Capacity ${getLegendData(\n            result.totalPhysicalUsage,\n            humanizeBinaryBytes,\n          )}`,\n        },\n      ];\n      break;\n    case 'PROVIDERS_BY_EGRESS':\n      max = getMaxVal(result.egress, humanizeBinaryBytes);\n      nonFormattedData = getChartData(result.egress, metric, humanizeBinaryBytes, max.unit);\n      chartData = nonFormattedData.length ? nonFormattedData.map((dataPoint) => [dataPoint]) : [[]];\n      legendData = nonFormattedData.map((dataPoint) => ({\n        name: `${dataPoint.x.replace(\n          /(^[A-Z]|_[A-Z])([A-Z]+)/g,\n          (_g, g1, g2) => g1 + g2.toLowerCase(),\n        )} ${dataPoint.y} ${max.unit}`,\n      }));\n      break;\n    default:\n      chartData = [[{ x: '', y: 0, name: '' }]];\n      legendData = [{ name: '' }];\n  }\n  return { chartData, legendData, max };\n};\n\nexport type ChartDataPoint = {\n  x: string;\n  y: number;\n  name: string;\n};\n\ntype ChartData = ChartDataPoint[][];\n\ntype LegendData = { name: string }[];\n\ntype QueryObject = {\n  [key: string]: string;\n};\n\ntype GetChartData = (\n  response: PrometheusResponse,\n  metric: string,\n  humanize: Humanize,\n  maxUnit: string,\n  name?: string,\n) => ChartDataPoint[];\n\ntype GetDataConsumptionChartData = (\n  result: { [key: string]: PrometheusResponse },\n  metric: string,\n  dropdownValue: string,\n) => {\n  chartData: ChartData;\n  legendData: LegendData;\n  max: HumanizeResult;\n};\n\ntype GetQueries = (metric: string, kpi: string) => { queries: QueryObject; keys: string[] };\n\ntype GetMaxVal = (response: PrometheusResponse, humanize: Humanize) => HumanizeResult;\n\ntype GetLegendData = (response: PrometheusResponse, humanize: Humanize) => string;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as _ from 'lodash';\nimport {\n  Chart,\n  ChartAxis,\n  ChartBar,\n  ChartGroup,\n  ChartLegend,\n  ChartThemeColor,\n  ChartTooltip,\n  ChartVoronoiContainer,\n} from '@patternfly/react-charts';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport {\n  DashboardItemProps,\n  withDashboardResources,\n} from '@console/internal/components/dashboard/with-dashboard-resources';\nimport { GraphEmpty } from '@console/internal/components/graphs/graph-empty';\nimport { PrometheusResponse } from '@console/internal/components/graphs';\nimport { BY_IOPS, CHART_LABELS, PROVIDERS, BY_EGRESS } from '../../constants';\nimport {\n  DataConsumersValue,\n  DataConsumersSortByValue,\n  getDataConsumptionChartData,\n  getQueries,\n  numberInWords,\n} from './data-consumption-card-utils';\nimport { DataConsumptionDropdown } from './data-consumption-card-dropdown';\nimport './data-consumption-card.scss';\n\nconst DataConsumptionCard: React.FC<DashboardItemProps> = ({\n  watchPrometheus,\n  stopWatchPrometheusQuery,\n  prometheusResults,\n}) => {\n  const [metricType, setMetricType] = React.useState(PROVIDERS);\n  const [sortByKpi, setsortByKpi] = React.useState(BY_IOPS);\n\n  React.useEffect(() => {\n    const { queries, keys } = getQueries(metricType, sortByKpi);\n    keys.forEach((key) => watchPrometheus(queries[key]));\n    return () => keys.forEach((key) => stopWatchPrometheusQuery(queries[key]));\n  }, [watchPrometheus, stopWatchPrometheusQuery, metricType, sortByKpi]);\n\n  const { queries, keys } = getQueries(metricType, sortByKpi);\n  const result: { [key: string]: PrometheusResponse } = {};\n  const error = keys.some((key) => prometheusResults.getIn([queries[key], 'loadError']));\n  keys.forEach((key) => {\n    result[key] = prometheusResults.getIn([queries[key], 'data']); // building an object having 'key'from the queries object and 'value' as the Prometheus response\n  });\n\n  let padding: number;\n  let suffixLabel = '';\n  let maxVal: number;\n  let maxUnit: string;\n  let body: React.ReactNode;\n\n  const isLoading = _.values(result).includes(undefined);\n\n  const metric = metricType === PROVIDERS ? 'type' : 'account';\n  const curentDropdown = DataConsumersValue[metricType] + DataConsumersSortByValue[sortByKpi];\n  const { chartData, legendData, max } = getDataConsumptionChartData(\n    result,\n    metric,\n    curentDropdown,\n  );\n\n  // chartData = [[],[],[],[],[],[]] or []\n  if (!chartData.some(_.isEmpty)) {\n    padding =\n      chartData[0].length === 2 || (sortByKpi === BY_EGRESS && chartData.length === 2) ? 125 : 25; // Adjusts spacing between each BarGroup\n    maxVal = max.value;\n    maxUnit = max.unit;\n    suffixLabel = maxUnit;\n    if (sortByKpi === BY_IOPS) {\n      suffixLabel = numberInWords[maxUnit];\n    }\n    // if suffixLabel is a non-empty string, show it in expected form\n    if (suffixLabel) suffixLabel = `(in ${suffixLabel})`;\n  }\n\n  if (isLoading) {\n    body = (\n      <>\n        <div className=\"skeleton-text nb-data-consumption-card__chart-skeleton\" />\n        <GraphEmpty height={200} loading />\n        <div className=\"skeleton-text nb-data-consumption-card__chart-legend-skeleton\" />\n      </>\n    );\n  } else if (!error && !chartData.some(_.isEmpty)) {\n    body = (\n      <>\n        <div className=\"nb-data-consumption-card__chart-label text-secondary\">\n          {CHART_LABELS[sortByKpi]} {suffixLabel}\n        </div>\n        <Chart\n          containerComponent={\n            <ChartVoronoiContainer\n              labelComponent={<ChartTooltip style={{ fontSize: 8, paddingBottom: 0 }} />}\n              labels={({ datum }) => `${datum.y} ${maxUnit}`}\n              voronoiDimension=\"x\"\n            />\n          }\n          minDomain={{ y: 0 }}\n          maxDomain={{ y: maxVal + Math.round(maxVal * 0.25) }}\n          domainPadding={{ x: [padding, padding] }}\n          legendComponent={\n            <ChartLegend\n              themeColor={ChartThemeColor.purple}\n              data={legendData}\n              orientation=\"horizontal\"\n              symbolSpacer={5}\n              gutter={2}\n              height={30}\n              padding={{ top: 50, bottom: 0 }}\n              style={{ labels: { fontSize: 8 } }}\n            />\n          }\n          legendPosition=\"bottom-left\"\n          padding={{\n            bottom: 50,\n            left: 30,\n            right: 20,\n            top: 30,\n          }}\n          themeColor={ChartThemeColor.purple}\n        >\n          <ChartAxis style={{ tickLabels: { fontSize: 8, padding: 2 } }} />\n          <ChartAxis\n            dependentAxis\n            showGrid\n            tickCount={10}\n            style={{\n              tickLabels: { fontSize: 8, padding: 0 },\n            }}\n          />\n          <ChartGroup offset={sortByKpi === BY_EGRESS ? 0 : 11}>\n            {chartData.map((data, i) => (\n              <ChartBar key={`chartbar-${i}`} data={data} /> // eslint-disable-line react/no-array-index-key\n            ))}\n          </ChartGroup>\n        </Chart>\n      </>\n    );\n  } else {\n    body = <GraphEmpty />;\n  }\n\n  return (\n    <DashboardCard>\n      <DashboardCardHeader>\n        <DashboardCardTitle>Data Consumption</DashboardCardTitle>\n        <DataConsumptionDropdown\n          type={metricType}\n          setType={setMetricType}\n          kpi={sortByKpi}\n          setKpi={setsortByKpi}\n        />\n      </DashboardCardHeader>\n      <DashboardCardBody className=\"co-dashboard-card__body--top-margin\">{body}</DashboardCardBody>\n    </DashboardCard>\n  );\n};\n\nexport default withDashboardResources(DataConsumptionCard);\n","export const ACCOUNTS = 'Accounts';\nexport const PROVIDERS = 'Providers';\nexport const BY_IOPS = 'I/O Operations';\nexport const BY_LOGICAL_USAGE = 'Logical Used Capacity';\nexport const BY_PHYSICAL_VS_LOGICAL_USAGE = 'Physical Vs Logical Usage';\nexport const BY_EGRESS = 'Egress';\nexport const PROJECTS = 'Projects';\nexport const BUCKET_CLASS = 'Bucket Class';\nexport const OCS_NS = 'openshift-storage';\nexport const NB_PROVISIONER = 'noobaa.io/obc';\n\nexport const CHART_LABELS = {\n  [BY_LOGICAL_USAGE]: 'Logical used capacity per account',\n  [BY_PHYSICAL_VS_LOGICAL_USAGE]: 'Physical vs. Logical used capacity',\n  [BY_EGRESS]: 'Egress Per Provider',\n  [BY_IOPS]: 'I/O Operations count',\n};\n\nexport enum BC_PROVIDERS {\n  AWS = 'AWS S3',\n  S3 = 'S3 Compatible',\n  PVC = 'PVC',\n  GCP = 'Google cloud storage',\n  AZURE = 'Azure Blob',\n  IBM = 'IBM COS',\n}\n\nexport const PROVIDERS_NOOBAA_MAP = {\n  [BC_PROVIDERS.AWS]: 'awsS3',\n  [BC_PROVIDERS.S3]: 's3Compatible',\n  [BC_PROVIDERS.AZURE]: 'azureBlob',\n  [BC_PROVIDERS.GCP]: 'googleCloudStorage',\n  [BC_PROVIDERS.PVC]: 'pvPool',\n  [BC_PROVIDERS.IBM]: 'ibmCos',\n};\n\nexport const BUCKET_LABEL_NOOBAA_MAP = {\n  [BC_PROVIDERS.AWS]: 'targetBucket',\n  [BC_PROVIDERS.S3]: 'targetBucket',\n  [BC_PROVIDERS.AZURE]: 'targetBlobContainer',\n  [BC_PROVIDERS.GCP]: 'targetBucket',\n  [BC_PROVIDERS.IBM]: 'targetBucket',\n};\n\nexport const NOOBAA_TYPE_MAP = {\n  [BC_PROVIDERS.AWS]: 'aws-s3',\n  [BC_PROVIDERS.S3]: 's3-compatible',\n  [BC_PROVIDERS.AZURE]: 'azure-blob',\n  [BC_PROVIDERS.GCP]: 'google-cloud-storage',\n  [BC_PROVIDERS.PVC]: 'pv-pool',\n  [BC_PROVIDERS.IBM]: 'ibm-cos',\n};\n\nexport const AWS_REGIONS = [\n  'us-east-1',\n  'us-east-2',\n  'us-west-1',\n  'us-west-2',\n  'ca-central-1',\n  'eu-central-1',\n  'eu-west-1',\n  'eu-west-2',\n  'eu-west-3',\n  'eu-north-1',\n  'ap-east-1',\n  'ap-northeast-1',\n  'ap-northeast-2',\n  'ap-northeast-3',\n  'ap-southeast-1',\n  'ap-southeast-2',\n  'ap-south-1',\n  'me-south-1',\n  'sa-east-1',\n];\n","export enum ObjectServiceDashboardQuery {\n  ACCOUNTS_BY_IOPS = 'ACCOUNTS_BY_IOPS',\n  ACCOUNTS_BY_LOGICAL_USAGE = 'ACCOUNTS_BY_LOGICAL_USAGE',\n  PROVIDERS_BY_IOPS = 'PROVIDERS_BY_IOPS',\n  PROVIDERS_BY_PHYSICAL_VS_LOGICAL_USAGE = 'PROVIDERS_BY_PHYSICAL_VS_LOGICAL_USAGE',\n  PROVIDERS_BY_EGRESS = 'PROVIDERS_BY_EGRESS',\n}\n\nexport const DATA_CONSUMPTION_QUERIES: DataConsumptionQueriesType = {\n  [ObjectServiceDashboardQuery.ACCOUNTS_BY_IOPS]: {\n    read: 'topk(5,NooBaa_accounts_usage_read_count)',\n    write: 'topk(5,NooBaa_accounts_usage_write_count)',\n    totalRead: 'sum(topk(5,NooBaa_accounts_usage_read_count))',\n    totalWrite: 'sum(topk(5,NooBaa_accounts_usage_write_count))',\n  },\n  [ObjectServiceDashboardQuery.ACCOUNTS_BY_LOGICAL_USAGE]: {\n    logicalUsage: 'topk(5,NooBaa_accounts_usage_logical)',\n    totalLogicalUsage: 'sum(topk(5,NooBaa_accounts_usage_logical))',\n  },\n  [ObjectServiceDashboardQuery.PROVIDERS_BY_IOPS]: {\n    read: 'topk(5,NooBaa_providers_ops_read_num)',\n    write: 'topk(5,NooBaa_providers_ops_write_num)',\n    totalRead: 'sum(topk(5,NooBaa_providers_ops_read_num))',\n    totalWrite: 'sum(topk(5,NooBaa_providers_ops_write_num))',\n  },\n  [ObjectServiceDashboardQuery.PROVIDERS_BY_PHYSICAL_VS_LOGICAL_USAGE]: {\n    physicalUsage: 'topk(5,NooBaa_providers_physical_size)',\n    logicalUsage: 'topk(5,NooBaa_providers_logical_size)',\n    totalPhysicalUsage: 'sum(topk(5,NooBaa_providers_physical_size))',\n    totalLogicalUsage: 'sum(topk(5,NooBaa_providers_logical_size))',\n  },\n  [ObjectServiceDashboardQuery.PROVIDERS_BY_EGRESS]: {\n    egress: 'topk(5,NooBaa_providers_bandwidth_read_size + NooBaa_providers_bandwidth_write_size)',\n  },\n};\n\nexport type DataConsumptionQueriesType = {\n  [key: string]: {\n    [key: string]: string;\n  };\n};\n","import * as _ from 'lodash';\nimport { Alert } from '@console/internal/components/monitoring';\nimport { PrometheusResponse } from '@console/internal/components/graphs';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { StorageClass } from '@console/internal/components/storage-class-form';\n\nexport const filterNooBaaAlerts = (alerts: Alert[]): Alert[] =>\n  alerts.filter((alert) => _.get(alert, 'annotations.storage_type') === 'NooBaa');\n\nexport const getGaugeValue = (data) => _.get(data, 'data.result[0].value[1]');\n\nexport const getMetric = (result: PrometheusResponse, metric: string): string =>\n  _.get(result, ['data', 'result', '0', 'metric', metric], null);\n\nexport type PrometheusMetricResult = {\n  metric: { [key: string]: any };\n  value?: [number, string | number];\n};\n\nexport const getPhase = (obj: K8sResourceKind): string => {\n  return _.get(obj, 'status.phase', 'Lost');\n};\n\nexport const isBound = (obj: K8sResourceKind): boolean => getPhase(obj) === 'Bound';\n\nexport const getSCProvisioner = (obj: StorageClass) => obj.provisioner;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AASA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAGA;AAEA;AACA;AAGA;AAGA;AAGA;AAEA;AACA;AAGA;AAGA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAIA;AAEA;AASA;AAaA;;;;;;;;;;;;;ACpHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AAQA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAOA;AACA;AACA;AACA;AAIA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;AC7KA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAOA;AACA;AAEA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AAAA;AACA;AAEA;AACA;;AAAA;AAEA;AAyBA;AACA;AACA;AACA;AACA;AAGA;AACA;AAKA;AACA;AAEA;AAGA;AAKA;AAAA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAOA;AAGA;AAEA;;;;;;;;;;;;;ACvKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAGA;AAEA;AAQA;AACA;AACA;AAEA;AAEA;;;;;A","sourceRoot":""}