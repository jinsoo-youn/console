{"version":3,"file":"kubevirt-activity-276cb114a7f522f603fe.js","sources":["webpack:///./packages/kubevirt-plugin/src/components/dashboards-page/overview-dashboard/activity.tsx","webpack:///./packages/kubevirt-plugin/src/components/vm-templates/vm-template-link.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport ActivityItem, {\n  ActivityProgress,\n} from '@console/shared/src/components/dashboard/activity-card/ActivityItem';\nimport { ResourceLink } from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { K8sActivityProps } from '@console/plugin-sdk';\nimport { TemplateModel } from '@console/internal/models';\nimport { VirtualMachineModel } from '../../../models';\nimport { diskImportKindMapping } from './utils';\nimport { VMTemplateLink } from '../../vm-templates/vm-template-link';\n\nexport const DiskImportActivity: React.FC<K8sActivityProps> = ({ resource }) => {\n  const progress = parseInt(resource?.status?.progress, 10);\n  const { kind, name, uid } = resource.metadata.ownerReferences[0];\n  const model = diskImportKindMapping[kind];\n  const ownerLink =\n    model === TemplateModel ? (\n      <VMTemplateLink name={name} namespace={resource.metadata.namespace} uid={uid} />\n    ) : (\n      <ResourceLink\n        kind={referenceForModel(model)}\n        name={name}\n        namespace={resource.metadata.namespace}\n      />\n    );\n  const title = `Importing ${\n    model === TemplateModel ? `${VirtualMachineModel.label} ${model.label}` : model.label\n  } disk`;\n  return Number.isNaN(progress) ? (\n    <>\n      <ActivityItem>{title}</ActivityItem>\n      {ownerLink}\n    </>\n  ) : (\n    <ActivityProgress title={title} progress={progress}>\n      {ownerLink}\n    </ActivityProgress>\n  );\n};\n\nexport const V2VImportActivity: React.FC<K8sActivityProps> = ({ resource }) => {\n  const vmName = _.get(resource.metadata.ownerReferences, '[0].name');\n  return (\n    <ActivityProgress\n      title=\"Importing VM (v2v)\"\n      progress={parseInt(_.get(resource.metadata.annotations, 'v2vConversionProgress', '0'), 10)}\n    >\n      {vmName && (\n        <ResourceLink\n          kind={referenceForModel(VirtualMachineModel)}\n          name={vmName}\n          namespace={resource.metadata.namespace}\n        />\n      )}\n    </ActivityProgress>\n  );\n};\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { ResourceIcon } from '@console/internal/components/utils';\nimport { TemplateModel } from '@console/internal/models';\n\nexport const VMTemplateLink: React.FC<VMTemplateLinkProps> = ({ name, namespace, uid }) => (\n  <>\n    <ResourceIcon kind={TemplateModel.kind} />\n    <Link\n      to={`/k8s/ns/${namespace}/vmtemplates/${name}`}\n      title={uid}\n      data-test-id={name}\n      className=\"co-resource-item__resource-name\"\n    >\n      {name}\n    </Link>\n  </>\n);\n\ntype VMTemplateLinkProps = {\n  name: string;\n  namespace: string;\n  uid?: string;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AAUA;AAGA;AAEA;AACA;AAOA;AAEA;AACA;AACA;AAcA;;;;;;;;;;;;;AC1DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;;;;;A","sourceRoot":""}