{"version":3,"file":"serviceinstance-c722cf41b5789949c2fe.js","sources":["webpack:///./public/components/hypercloud/service-instance.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\nimport { useState } from 'react';\nimport { Button } from '@patternfly/react-core';\nimport { sortable } from '@patternfly/react-table';\nimport { Status } from '@console/shared';\nimport { ServiceInstanceModel } from '../../models';\nimport { K8sResourceKind, modelFor, k8sGet } from '../../module/k8s';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\nimport { DetailsPage, ListPage, Table, TableData, TableRow } from '../factory';\nimport { Kebab, ResourceKebab, navFactory, SectionHeading, ResourceSummary, ResourceLink, Timestamp } from '../utils';\nimport { ResourceSidebar } from '../sidebars/resource-sidebar';\nimport { ResourceLabel } from '../../models/hypercloud/resource-plural';\n\nconst { common } = Kebab.factory;\n\nconst kind = ServiceInstanceModel.kind;\n\nexport const serviceInstanceMenuActions = [...Kebab.getExtensionsActionsForKind(ServiceInstanceModel), ...common];\n\nconst ServiceInstanceDetails: React.FC<ServiceInstanceDetailsProps> = props => {\n  const { t } = useTranslation();\n  const { obj: serviceInstance, match } = props;\n  const [showSidebar, setShowSidebar] = useState(false);\n  const [sidebarDetails, setSidebarDetails] = useState({});\n  const [sidebarKind, setSidebarKind] = useState('');\n  const [sidebarTitle, setSidebarTitle] = useState('');\n  // const [planDetails, setPlanDetails] = useState({});\n  const getDetails = async (kind, e) => {\n    const model = modelFor(kind);\n    const details = await k8sGet(model, e.target.innerText, kind.indexOf('Cluster') < 0 ? match.params.ns : null);\n    setSidebarDetails(details);\n    setShowSidebar(true);\n    setSidebarKind(kind);\n    setSidebarTitle(details.metadata.name);\n    console.log(sidebarDetails);\n  };\n  const SidebarLink = ({ name, kind }) => {\n    return (\n      <Button type=\"button\" variant=\"link\" isInline onClick={getDetails.bind(null, kind)}>\n        {name}\n      </Button>\n    );\n  };\n  return (\n    <>\n      <div className=\"co-p-has-sidebar\">\n        <div className=\"co-m-pane__body\">\n          <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', {0: ResourceLabel(serviceInstance, t)})} />\n          <div className=\"row\">\n            <div className=\"col-md-6\">\n              <ResourceSummary resource={serviceInstance} showPodSelector showNodeSelector></ResourceSummary>\n            </div>\n            <div className=\"col-md-6\">\n              <dl className=\"co-m-pane__details\">\n                <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_13')}</dt>\n                <dd>\n                  <Status status={serviceInstance.status.lastConditionState} />\n                </dd>\n                <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_19')}</dt>\n                <SidebarLink name={serviceInstance.spec.clusterServiceClassRef?.name ? serviceInstance.spec.clusterServiceClassRef?.name : serviceInstance.spec?.serviceClassExternalName} kind={serviceInstance.spec.clusterServiceClassRef?.name ? 'ClusterServiceClass' : 'ServiceClass'}></SidebarLink>\n                <dt>{t('COMMON:MSG_DETAILS_TABSERVICEPLANS_1')}</dt>\n                <dd>\n                  <SidebarLink name={serviceInstance.spec.clusterServicePlanRef?.name ? serviceInstance.spec.clusterServicePlanRef?.name : serviceInstance.spec?.servicePlanRef?.name} kind={serviceInstance.spec.clusterServiceClassRef?.name ? 'ClusterServicePlan' : 'ServicePlan'}></SidebarLink>\n                </dd>\n              </dl>\n            </div>\n          </div>\n        </div>\n        <ResourceSidebar\n          toggleSidebar={() => {\n            setShowSidebar(!showSidebar);\n            window.dispatchEvent(new Event('sidebar_toggle'));\n          }}\n          resource={sidebarDetails}\n          kindObj={modelFor(sidebarKind)}\n          title={sidebarTitle}\n          isFloat={true}\n          showName={false}\n          showID={true}\n          showPodSelector={true}\n          showNodeSelector={true}\n          showOwner={false}\n          showSidebar={showSidebar}\n          samples={[]}\n          isCreateMode={true}\n          showDetails={true}\n        />\n      </div>\n    </>\n  );\n};\n\ntype ServiceInstanceDetailsProps = {\n  obj: K8sResourceKind;\n  match?: any;\n};\n\nconst { details, editYaml } = navFactory;\nconst ServiceInstancesDetailsPage: React.FC<ServiceInstancesDetailsPageProps> = props => <DetailsPage {...props} kind={kind} menuActions={serviceInstanceMenuActions} pages={[details(ServiceInstanceDetails), editYaml()]} />;\nServiceInstancesDetailsPage.displayName = 'ServiceInstancesDetailsPage';\n\nconst tableColumnClasses = [\n  '', // NAME\n  '', // NAMESPACE\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'), // SERVICE CLASS\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'), // SERVICE PLAN\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'), // CREATED\n  Kebab.columnClass, // MENU ACTIONS\n];\n\nconst ServiceInstanceTableRow = ({ obj, index, key, style }) => {\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={obj.metadata.name} namespace={obj.metadata.namespace} title={obj.metadata.name} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1])}>\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} title={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Status status={obj.status.lastConditionState} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>{obj.spec.clusterServicePlanExternalName ? <ResourceLink kind=\"ClusterServicePlan\" title={obj.spec.clusterServicePlanRef?.name} name={obj.spec.clusterServicePlanRef?.name} displayName={obj.spec.clusterServicePlanExternalName} /> : <ResourceLink kind=\"ServicePlan\" title={obj.spec.servicePlanRef?.name} name={obj.spec.servicePlanRef?.name} displayName={obj.spec.servicePlanExternalName} />}</TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <Timestamp timestamp={obj.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <ResourceKebab actions={serviceInstanceMenuActions} kind={kind} resource={obj} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst ServiceInstanceTableHeader = (t?: TFunction) => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_2'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_3'),\n      sortField: 'status.lastConditionState',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('COMMON:MSG_DETAILS_TABSERVICEPLANS_1'),\n      sortField: 'spec.servicePlanName',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_12'),\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[5] },\n    },\n  ];\n};\n\nServiceInstanceTableHeader.displayName = 'ServiceInstanceTableHeader';\n\nconst ServiceInstancesList: React.FC = props => {\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"Service Instance\" Header={ServiceInstanceTableHeader.bind(null, t)} Row={ServiceInstanceTableRow} />;\n};\nServiceInstancesList.displayName = 'ServiceInstancesList';\n\nconst serviceInstanceStatusReducer = (serviceInstance: any): string => {\n  return serviceInstance.status.lastConditionState;\n};\n\nconst ServiceInstancesPage: React.FC<ServiceInstancesPageProps> = props => {\n  const { t } = useTranslation();\n  return (\n    <ListPage\n      title={t('COMMON:MSG_LNB_MENU_17')}\n      createButtonText={t('COMMON:MSG_MAIN_CREATEBUTTON_1', { 0: t('COMMON:MSG_LNB_MENU_17') })}\n      canCreate={true}\n      kind={kind}\n      ListComponent={ServiceInstancesList}\n      rowFilters={[\n        {\n          filterGroupName: 'Status',\n          type: 'service-instance-status',\n          reducer: serviceInstanceStatusReducer,\n          items: [\n            { id: 'Ready', title: t('COMMON:MSG_MAIN_FILTER_2') },\n            { id: 'Error', title: t('COMMON:MSG_MAIN_FILTER_3') },\n          ],\n        },\n      ]}\n      {...props}\n    />\n  );\n};\nServiceInstancesPage.displayName = 'ServiceInstancesPage';\n\nexport { ServiceInstancesList, ServiceInstancesPage, ServiceInstancesDetailsPage };\n\ntype ServiceInstancesPageProps = {};\n\ntype ServiceInstancesDetailsPageProps = {\n  match: any;\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AAkBA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;;;;;A","sourceRoot":""}