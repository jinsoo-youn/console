{"version":3,"file":"service-account-ed6775efc8a7d7febd97.js","sources":["webpack:///./public/components/service-account.jsx"],"sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { safeDump } from 'js-yaml';\nimport { Base64 } from 'js-base64';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { DetailsPage, ListPage, Table, TableRow, TableData } from './factory';\nimport { Kebab, SectionHeading, navFactory, ResourceKebab, ResourceLink, ResourceSummary, Timestamp } from './utils';\nimport { k8sList } from '../module/k8s';\nimport { SecretModel, ServiceAccountModel } from '../models';\nimport { SecretsPage } from './secret';\nimport { saveAs } from 'file-saver';\nimport { errorModal } from './modals';\nimport { useTranslation } from 'react-i18next';\n\nconst KubeConfigify = (t, kind, sa) => {\n  return {\n    label: 'Download kubeconfig file',\n    weight: 200,\n    callback: () => {\n      const name = sa.metadata.name;\n      const namespace = sa.metadata.namespace;\n\n      k8sList(SecretModel, { ns: namespace })\n        .then(secrets => {\n          const server = window.SERVER_FLAGS.kubeAPIServerURL;\n          const url = new URL(server);\n          const clusterName = url.host.replace(/\\./g, '-');\n\n          // Find the secret that is the service account token.\n          const saSecretsByName = _.keyBy(sa.secrets, 'name');\n          const secret = _.find(secrets, s => saSecretsByName[s.metadata.name] && s.type === 'kubernetes.io/service-account-token');\n          if (!secret) {\n            errorModal({ error: 'Unable to get service account token.' });\n            return;\n          }\n          const token = Base64.decode(secret.data.token);\n          const cert = secret.data['ca.crt'];\n\n          const config = {\n            apiVersion: 'v1',\n            clusters: [\n              {\n                cluster: {\n                  'certificate-authority-data': cert,\n                  server,\n                },\n                name: clusterName,\n              },\n            ],\n            contexts: [\n              {\n                context: {\n                  cluster: clusterName,\n                  namespace,\n                  user: name,\n                },\n                name,\n              },\n            ],\n            'current-context': name,\n            kind: 'Config',\n            preferences: {},\n            users: [\n              {\n                name,\n                user: {\n                  token,\n                },\n              },\n            ],\n          };\n          const dump = safeDump(config);\n          const blob = new Blob([dump], { type: 'text/yaml;charset=utf-8' });\n          saveAs(blob, `kube-config-sa-${name}-${clusterName}`);\n        })\n        .catch(err => {\n          const error = err.message;\n          errorModal({ error });\n        });\n    },\n    accessReview: {\n      group: SecretModel.apiGroup,\n      resource: SecretModel.plural,\n      namespace: sa.metadata.namespace,\n      verb: 'list',\n    },\n  };\n};\nconst { common } = Kebab.factory;\n\nconst kind = 'ServiceAccount';\n\nconst tableColumnClasses = [classNames('col-sm-4', 'col-xs-6'), classNames('col-sm-4', 'col-xs-6'), classNames('col-md-2', 'hidden-sm', 'hidden-xs'), classNames('col-sm-2', 'hidden-xs'), Kebab.columnClass];\n\nconst ServiceAccountTableHeader = t => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_2'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_34'),\n      sortField: 'secrets',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_12'),\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[4] },\n    },\n  ];\n};\nServiceAccountTableHeader.displayName = 'ServiceAccountTableHeader';\n\nconst ServiceAccountTableRow = (t, { obj: serviceaccount, index, key, style }) => {\n  const {\n    metadata: { name, namespace, uid, creationTimestamp },\n    secrets,\n  } = serviceaccount;\n  const menuActions = [KubeConfigify.bind(null, t), ...Kebab.getExtensionsActionsForKind(ServiceAccountModel), ...common];\n  return (\n    <TableRow id={serviceaccount.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={name} namespace={namespace} title={uid} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={namespace} title={namespace} /> {}\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>{secrets ? secrets.length : 0}</TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <Timestamp timestamp={creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={serviceaccount} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst Details = ({ obj: serviceaccount }) => {\n  const { t } = useTranslation();\n  const {\n    metadata: { namespace },\n    secrets,\n  } = serviceaccount;\n  const filters = { selector: { field: 'metadata.name', values: new Set(_.map(secrets, 'name')) } };\n\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', { 0: t('COMMON:MSG_LNB_MENU_74') })} />\n        <ResourceSummary resource={serviceaccount} />\n      </div>\n      <div className=\"co-m-pane__body co-m-pane__body--section-heading\">\n        <SectionHeading text={t('COMMON:MSG_LNB_MENU_26')} />\n      </div>\n      <SecretsPage kind=\"Secret\" canCreate={false} namespace={namespace} filters={filters} autoFocus={false} showTitle={false} />\n    </>\n  );\n};\n\nconst ServiceAccountsDetailsPage = props => {\n  const { t } = useTranslation();\n  const menuActions = [KubeConfigify.bind(null, t), ...Kebab.getExtensionsActionsForKind(ServiceAccountModel), ...common];\n  return <DetailsPage {...props} menuActions={menuActions} pages={[navFactory.details(Details), navFactory.editYaml()]} />;\n};\nconst ServiceAccountsList = props => {\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"Service Accounts\" Header={ServiceAccountTableHeader.bind(null, t)} Row={ServiceAccountTableRow.bind(null, t)} virtualize />;\n};\nconst ServiceAccountsPage = props => {\n  const { t } = useTranslation();\n  return <ListPage title={t('COMMON:MSG_LNB_MENU_74')} ListComponent={ServiceAccountsList} {...props} canCreate={true} />;\n};\nexport { ServiceAccountsList, ServiceAccountsPage, ServiceAccountsDetailsPage };\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AAIA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}