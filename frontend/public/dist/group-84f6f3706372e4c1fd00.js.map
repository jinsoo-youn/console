{"version":3,"file":"group-84f6f3706372e4c1fd00.js","sources":["webpack:///./public/components/group.tsx"],"sourcesContent":["import * as React from 'react';\nimport { match } from 'react-router-dom';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\n\nimport { GroupModel, UserModel } from '../models';\nimport { referenceForModel, GroupKind, K8sKind } from '../module/k8s';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from './factory';\nimport { addUsersModal, removeUserModal } from './modals';\nimport { RoleBindingsPage } from './RBAC';\nimport {\n  asAccessReview,\n  EmptyBox,\n  Kebab,\n  KebabAction,\n  KebabOption,\n  navFactory,\n  ResourceKebab,\n  ResourceLink,\n  ResourceSummary,\n  SectionHeading,\n  Timestamp,\n} from './utils';\n\nconst addUsers: KebabAction = (kind: K8sKind, group: GroupKind) => ({\n  label: 'Add Users',\n  callback: () =>\n    addUsersModal({\n      group,\n    }),\n  accessReview: asAccessReview(kind, group, 'patch'),\n});\n\nconst removeUser = (group: GroupKind, user: string): KebabOption => {\n  return {\n    label: 'Remove User',\n    callback: () =>\n      removeUserModal({\n        group,\n        user,\n      }),\n    accessReview: asAccessReview(GroupModel, group, 'patch'),\n  };\n};\n\nconst menuActions = [addUsers, ...Kebab.factory.common];\n\nconst tableColumnClasses = [\n  classNames('col-sm-4', 'col-xs-6'),\n  classNames('col-sm-4', 'col-xs-6'),\n  classNames('col-sm-4', 'hidden-xs'),\n  Kebab.columnClass,\n];\n\nconst GroupTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Users',\n      sortField: 'users.length',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Created',\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[3] },\n    },\n  ];\n};\nGroupTableHeader.displayName = 'GroupTableHeader';\n\nconst GroupTableRow: RowFunction<GroupKind> = ({ obj, index, key, style }) => {\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={referenceForModel(GroupModel)} name={obj.metadata.name} />\n      </TableData>\n      <TableData className={tableColumnClasses[1]}>{_.size(obj.users)}</TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Timestamp timestamp={obj.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <ResourceKebab actions={menuActions} kind={referenceForModel(GroupModel)} resource={obj} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport const GroupList: React.FC = (props) => (\n  <Table {...props} aria-label=\"Groups\" Header={GroupTableHeader} Row={GroupTableRow} virtualize />\n);\n\nexport const GroupPage: React.FC<GroupPageProps> = (props) => (\n  <ListPage\n    {...props}\n    title=\"Groups\"\n    kind={referenceForModel(GroupModel)}\n    ListComponent={GroupList}\n    canCreate\n  />\n);\n\nconst UserKebab: React.FC<UserKebabProps> = ({ group, user }) => {\n  const options: KebabOption[] = [removeUser(group, user)];\n  return <Kebab options={options} />;\n};\n\nconst UsersTable: React.FC<UsersTableProps> = ({ group, users }) => {\n  return _.isEmpty(users) ? (\n    <EmptyBox label=\"Users\" />\n  ) : (\n    <table className=\"table\">\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th />\n        </tr>\n      </thead>\n      <tbody>\n        {users.map((user: string) => (\n          <tr key={user}>\n            <td>\n              <ResourceLink kind={referenceForModel(UserModel)} name={user} />\n            </td>\n            <td className=\"dropdown-kebab-pf pf-c-table__action\">\n              <UserKebab group={group} user={user} />\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nconst GroupDetails: React.FC<GroupDetailsProps> = ({ obj }) => {\n  const users: string[] = obj.users ? [...obj.users].sort() : [];\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Group Details\" />\n        <ResourceSummary resource={obj} />\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Users\" />\n        <UsersTable group={obj} users={users} />\n      </div>\n    </>\n  );\n};\n\nconst RoleBindingsTab: React.FC<RoleBindingsTabProps> = ({ obj }) => (\n  <RoleBindingsPage\n    showTitle={false}\n    staticFilters={[{ 'role-binding-group': obj.metadata.name }]}\n  />\n);\n\nexport const GroupDetailsPage: React.FC<GroupDetailsPageProps> = (props) => (\n  <DetailsPage\n    {...props}\n    kind={referenceForModel(GroupModel)}\n    menuActions={menuActions}\n    pages={[\n      navFactory.details(GroupDetails),\n      navFactory.editYaml(),\n      navFactory.roles(RoleBindingsTab),\n    ]}\n  />\n);\n\ntype UserKebabProps = {\n  group: GroupKind;\n  user: string;\n};\n\ntype UsersTableProps = {\n  group: GroupKind;\n  users: string[];\n};\n\ntype GroupPageProps = {\n  autoFocus?: boolean;\n  showTitle?: boolean;\n};\n\ntype GroupDetailsProps = {\n  obj: GroupKind;\n};\n\ntype RoleBindingsTabProps = {\n  obj: GroupKind;\n};\n\ntype GroupDetailsPageProps = {\n  match: match<any>;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAcA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AAIA;AAUA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AACA;AAOA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AAOA;AAMA;AACA;AACA;AACA;;;;;A","sourceRoot":""}