{"version":3,"file":"metal3-baremetalhost~metal3-baremetalhosts~node-364f6754882ac7a3cdda.js","sources":["webpack:///./packages/console-shared/src/hooks/flag.ts","webpack:///./packages/metal3-plugin/src/components/maintenance/MaintenancePopover.tsx","webpack:///./packages/metal3-plugin/src/components/maintenance/MaintenancePopoverPodList.scss?842c","webpack:///./packages/metal3-plugin/src/components/maintenance/MaintenancePopoverPodList.tsx","webpack:///./packages/metal3-plugin/src/components/maintenance/StartingMaintenancePopoverContent.tsx","webpack:///./packages/metal3-plugin/src/components/maintenance/UnderMaintenancePopoverContent.tsx","webpack:///./packages/metal3-plugin/src/components/modals/StartNodeMaintenanceModal.tsx","webpack:///./packages/metal3-plugin/src/components/modals/StopNodeMaintenanceModal.tsx","webpack:///./packages/metal3-plugin/src/k8s/objects/node-maintenance/index.ts","webpack:///./packages/metal3-plugin/src/k8s/requests/node-maintenance/index.ts"],"sourcesContent":["// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore: FIXME missing exports due to out-of-sync @types/react-redux version\nimport { useSelector } from 'react-redux';\nimport { RootState } from '@console/internal/redux';\n\nexport const useFlag: UseFlag = (flag) =>\n  useSelector<RootState, boolean>(({ FLAGS }) => FLAGS.get(flag));\n\ntype UseFlag = (flag: string) => boolean;\n","import * as React from 'react';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { PopoverStatus } from '@console/shared';\nimport { InProgressIcon, MaintenanceIcon } from '@patternfly/react-icons';\nimport { getNodeMaintenancePhase } from '../../selectors';\nimport UnderMaintenancePopoverContent from './UnderMaintenancePopoverContent';\nimport StartingMaintenancePopoverContent from './StartingMaintenancePopoverContent';\n\ntype MaintenancePopoverProps = {\n  title: string;\n  nodeMaintenance: K8sResourceKind;\n  className?: string;\n};\n\nconst MaintenancePopover: React.FC<MaintenancePopoverProps> = ({\n  title,\n  nodeMaintenance,\n  className,\n}) => {\n  const phase = getNodeMaintenancePhase(nodeMaintenance);\n\n  return (\n    <PopoverStatus\n      icon={phase === 'Succeeded' ? <MaintenanceIcon /> : <InProgressIcon />}\n      title={title}\n      className={className}\n    >\n      {phase === 'Succeeded' ? (\n        <UnderMaintenancePopoverContent nodeMaintenance={nodeMaintenance} />\n      ) : (\n        <StartingMaintenancePopoverContent nodeMaintenance={nodeMaintenance} />\n      )}\n    </PopoverStatus>\n  );\n};\n\nexport default MaintenancePopover;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { List, AutoSizer } from 'react-virtualized';\nimport { ResourceLink } from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { PodModel } from '@console/internal/models';\nimport './MaintenancePopoverPodList.scss';\n\nconst podRowRenderer = (pods) => ({ key, index, style }) => {\n  const pod = pods[index];\n  return (\n    <div key={key} style={style} className=\"maintenance-popover-pod-list__list-item\">\n      <ResourceLink kind={referenceForModel(PodModel)} name={pod} title={pod} />\n    </div>\n  );\n};\n\ntype MaintenancePopoverPodListProps = {\n  pods: string[];\n};\nconst MaintenancePopoverPodList: React.FC<MaintenancePopoverPodListProps> = ({ pods }) => (\n  <AutoSizer disableHeight>\n    {({ width }) => (\n      <List\n        width={width}\n        height={pods.length < 6 ? pods.length * 30 : 150}\n        rowCount={pods.length}\n        rowHeight={30}\n        rowRenderer={podRowRenderer(pods)}\n      />\n    )}\n  </AutoSizer>\n);\n\nexport default MaintenancePopoverPodList;\n","import * as React from 'react';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { Timestamp } from '@console/internal/components/utils';\nimport { Progress, ProgressSize, Alert, Expandable, Button } from '@patternfly/react-core';\nimport {\n  getNodeMaintenanceReason,\n  getNodeMaintenanceCreationTimestamp,\n  getNodeMaintenanceProgressPercent,\n  getNodeMaintenanceLastError,\n  getNodeMaintenancePendingPods,\n} from '../../selectors';\nimport stopNodeMaintenanceModal from '../modals/StopNodeMaintenanceModal';\nimport MaintenancePopoverPodList from './MaintenancePopoverPodList';\n\ntype StartingMaintenancePopoverContentProps = {\n  nodeMaintenance: K8sResourceKind;\n};\n\nconst StartingMaintenancePopoverContent: React.FC<StartingMaintenancePopoverContentProps> = ({\n  nodeMaintenance,\n}) => {\n  const reason = getNodeMaintenanceReason(nodeMaintenance);\n  const creationTimestamp = getNodeMaintenanceCreationTimestamp(nodeMaintenance);\n  const lastError = getNodeMaintenanceLastError(nodeMaintenance);\n  const pendingPods = getNodeMaintenancePendingPods(nodeMaintenance);\n\n  return (\n    <>\n      <p>\n        Node is entering maintenance. The cluster will automatically rebuild node&apos;s data 30\n        minutes after entering maintenance.\n      </p>\n      <dl>\n        <dt>Maintenance reason:</dt>\n        <dd>{reason}</dd>\n        <dt>Requested:</dt>\n        <dd>\n          <Timestamp timestamp={creationTimestamp} />\n        </dd>\n      </dl>\n      <br />\n      {lastError && (\n        <>\n          <Alert variant=\"warning\" title=\"Workloads failing to move\" isInline>\n            {lastError}\n          </Alert>\n          <br />\n        </>\n      )}\n      <Progress\n        value={getNodeMaintenanceProgressPercent(nodeMaintenance)}\n        title=\"Moving workloads\"\n        size={ProgressSize.sm}\n      />\n      <br />\n      <Expandable toggleText={`Show remaining workloads (${pendingPods.length})`}>\n        <MaintenancePopoverPodList pods={pendingPods} />\n      </Expandable>\n      <br />\n      <Button variant=\"link\" onClick={() => stopNodeMaintenanceModal(nodeMaintenance)} isInline>\n        Stop\n      </Button>\n    </>\n  );\n};\n\nexport default StartingMaintenancePopoverContent;\n","import * as React from 'react';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { Timestamp } from '@console/internal/components/utils';\nimport { Button } from '@patternfly/react-core';\nimport { getNodeMaintenanceReason, getNodeMaintenanceCreationTimestamp } from '../../selectors';\nimport stopNodeMaintenanceModal from '../modals/StopNodeMaintenanceModal';\n\ntype UnderMaintenancePopoverContentProps = {\n  nodeMaintenance: K8sResourceKind;\n};\n\nconst UnderMaintenancePopoverContent: React.FC<UnderMaintenancePopoverContentProps> = ({\n  nodeMaintenance,\n}) => {\n  const reason = getNodeMaintenanceReason(nodeMaintenance);\n  const creationTimestamp = getNodeMaintenanceCreationTimestamp(nodeMaintenance);\n\n  return (\n    <>\n      <p>\n        Node is under maintenance. The cluster will automatically rebuild node&apos;s data 30\n        minutes after entering maintenance.\n      </p>\n      <dl>\n        <dt>Maintenance reason:</dt>\n        <dd>{reason}</dd>\n        <dt>Requested:</dt>\n        <dd>\n          <Timestamp timestamp={creationTimestamp} />\n        </dd>\n      </dl>\n      <br />\n      <Button variant=\"link\" onClick={() => stopNodeMaintenanceModal(nodeMaintenance)} isInline>\n        Stop maintenance\n      </Button>\n    </>\n  );\n};\n\nexport default UnderMaintenancePopoverContent;\n","import * as React from 'react';\nimport { FormControl } from 'patternfly-react';\nimport { Alert } from '@patternfly/react-core';\nimport { withHandlePromise, HandlePromiseProps } from '@console/internal/components/utils';\nimport {\n  ModalTitle,\n  ModalBody,\n  ModalSubmitFooter,\n  createModalLauncher,\n  ModalComponentProps,\n} from '@console/internal/components/factory';\nimport { referenceForModel, K8sResourceKind } from '@console/internal/module/k8s';\nimport { CephClusterModel } from '@console/ceph-storage-plugin/src/models';\nimport { startNodeMaintenance } from '../../k8s/requests/node-maintenance';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\n\nconst cephClusterResource = {\n  kind: referenceForModel(CephClusterModel),\n  namespaced: false,\n  isList: true,\n};\n\nexport type StartNodeMaintenanceModalProps = HandlePromiseProps &\n  ModalComponentProps & {\n    nodeName: string;\n  };\n\nconst StartNodeMaintenanceModal = withHandlePromise<StartNodeMaintenanceModalProps>((props) => {\n  const { nodeName, inProgress, errorMessage, handlePromise, close, cancel } = props;\n\n  const [reason, setReason] = React.useState('');\n\n  const submit = (event) => {\n    event.preventDefault();\n    const promise = startNodeMaintenance(nodeName, reason);\n    return handlePromise(promise).then(close);\n  };\n\n  const [cephClusters, loaded] = useK8sWatchResource<K8sResourceKind[]>(cephClusterResource);\n  const cephCluster = cephClusters?.[0];\n  const cephClusterHealthy = !cephCluster || cephCluster?.status?.health === 'OK';\n\n  const action = 'Start Maintenance';\n  return (\n    <form onSubmit={submit} name=\"form\" className=\"modal-content\">\n      <ModalTitle>{action}</ModalTitle>\n      <ModalBody>\n        <p>\n          All managed workloads will be moved off of this node. New workloads and data will not be\n          added to this node until maintenance is stopped.\n        </p>\n        <p>\n          If the node does not exit maintenance within <strong>30 minutes</strong>, the cluster will\n          automatically rebuild the node&apos;s data using replicated copies\n        </p>\n        <div className=\"form-group\">\n          <label htmlFor=\"node-maintenance-reason\">Reason</label>\n          <FormControl\n            type=\"text\"\n            id=\"node-maintenance-reason\"\n            value={reason}\n            onChange={(event) => setReason(event.target.value)}\n          />\n        </div>\n        {!cephClusterHealthy && (\n          <Alert\n            variant=\"warning\"\n            title=\"The Ceph storage cluster is not in a healthy state.\"\n            isInline\n          >\n            Maintenance should not be started until the health of the storage cluster is restored.\n          </Alert>\n        )}\n      </ModalBody>\n      <ModalSubmitFooter\n        submitDisabled={!loaded}\n        errorMessage={errorMessage}\n        inProgress={inProgress}\n        submitText={action}\n        cancel={cancel}\n      />\n    </form>\n  );\n});\n\nexport const startNodeMaintenanceModal = createModalLauncher(StartNodeMaintenanceModal);\n","import * as React from 'react';\nimport { confirmModal } from '@console/internal/components/modals/confirm-modal';\nimport { k8sKill, K8sResourceKind } from '@console/internal/module/k8s';\nimport { NodeMaintenanceModel } from '../../models';\nimport { getNodeMaintenanceReason, getNodeMaintenanceNodeName } from '../../selectors';\n\nconst stopNodeMaintenanceModal = (nodeMaintenance: K8sResourceKind) => {\n  const title = 'Stop maintenance';\n  const reason = getNodeMaintenanceReason(nodeMaintenance);\n  const nodeName = getNodeMaintenanceNodeName(nodeMaintenance);\n  return confirmModal({\n    title,\n    message: (\n      <>\n        Are you sure you want to stop maintenance <strong>{reason ? ` (${reason}) ` : ''}</strong>on\n        node <strong>{nodeName}</strong>?\n      </>\n    ),\n    btnText: title,\n    executeFn: () => k8sKill(NodeMaintenanceModel, nodeMaintenance),\n  });\n};\n\nexport default stopNodeMaintenanceModal;\n","import { apiVersionForModel } from '@console/internal/module/k8s';\nimport { NodeMaintenanceModel } from '../../../models';\n\nexport const buildNodeMaintenance = ({\n  generateName,\n  nodeName,\n  reason,\n}: {\n  nodeName: string;\n  generateName?: string;\n  reason?: string;\n}) => ({\n  apiVersion: apiVersionForModel(NodeMaintenanceModel),\n  kind: NodeMaintenanceModel.kind,\n  metadata: {\n    generateName: `${generateName || 'nm'}-`,\n  },\n  spec: {\n    nodeName,\n    reason,\n  },\n});\n","import { k8sCreate } from '@console/internal/module/k8s';\nimport { buildNodeMaintenance } from '../../objects/node-maintenance';\nimport { NodeMaintenanceModel } from '../../../models';\n\nexport const startNodeMaintenance = (nodeName: string, reason: string) => {\n  return k8sCreate(NodeMaintenanceModel, buildNodeMaintenance({ nodeName, reason }));\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;;;;;;;;;;;;;ACLA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AAQA;AAKA;AAEA;AAaA;AAEA;;;;;;;;;;;;ACpCA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AAKA;AAcA;;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAOA;AACA;AAMA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAGA;AAGA;AAKA;AACA;AACA;AAEA;AACA;AAKA;AAEA;;;;;;;;;;;;;AClEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAMA;AAGA;AACA;AAEA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAKA;AAEA;;;;;;;;;;;;;ACvCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAOA;;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;;AACA;AAEA;AACA;AACA;AACA;AAOA;AAUA;AASA;AAEA;;;;;;;;;;;;;ACrFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;;;;;A","sourceRoot":""}