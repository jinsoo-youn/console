{"version":3,"file":"custom-resource-definition-8b61435fc3802c5ed11a.js","sources":["webpack:///./public/components/custom-resource-definition.tsx"],"sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable, SortByDirection, Table as PFTable, TableBody, TableHeader, TableVariant } from '@patternfly/react-table';\n\nimport { BanIcon } from '@patternfly/react-icons';\n\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from './factory';\nimport { AsyncComponent, DetailsItem, EmptyBox, Kebab, KebabAction, navFactory, ResourceKebab, ResourceLink, ResourceSummary, SectionHeading } from './utils';\nimport { apiVersionCompare, CRDVersion, CustomResourceDefinitionKind, getLatestVersionForCRD, K8sKind, referenceForCRD } from '../module/k8s';\nimport { CustomResourceDefinitionModel } from '../models';\nimport { Conditions } from './conditions';\nimport { resourceListPages } from './resource-pages';\nimport { DefaultPage } from './default-resource';\nimport { GreenCheckCircleIcon } from '@console/shared';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\n\nconst { common } = Kebab.factory;\n\nconst crdInstancesPath = (crd: CustomResourceDefinitionKind) => (_.get(crd, 'spec.scope') === 'Namespaced' ? `/k8s/all-namespaces/${referenceForCRD(crd)}` : `/k8s/cluster/${referenceForCRD(crd)}`);\n\nconst instances = (kind: K8sKind, obj: CustomResourceDefinitionKind) => {\n  const { t } = useTranslation();\n  return {\n    label: t('COMMON:MSG_MAIN_ACTIONBUTTON_38'),\n    href: crdInstancesPath(obj),\n  };\n};\n\nconst menuActions: KebabAction[] = [instances, ...Kebab.getExtensionsActionsForKind(CustomResourceDefinitionModel), ...common];\n\nconst tableColumnClasses = [classNames('col-lg-3', 'col-md-4', 'col-sm-4', 'col-xs-6'), classNames('col-lg-3', 'col-md-4', 'col-sm-4', 'col-xs-6'), classNames('col-lg-2', 'col-md-2', 'col-sm-4', 'hidden-xs'), classNames('col-lg-2', 'col-md-2', 'hidden-sm', 'hidden-xs'), classNames('col-lg-2', 'hidden-md', 'hidden-sm', 'hidden-xs'), Kebab.columnClass];\n\nconst CRDTableHeader = (t?: TFunction) => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'spec.names.kind',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_52'),\n      sortField: 'spec.group',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_53'),\n      sortField: 'spec.version',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_54'),\n      sortField: 'spec.scope',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_55'),\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[5] },\n    },\n  ];\n};\nCRDTableHeader.displayName = 'CRDTableHeader';\n\nconst isEstablished = (conditions: any[]) => {\n  const condition = _.find(conditions, c => c.type === 'Established');\n  return condition && condition.status === 'True';\n};\n\nconst namespaced = (crd: CustomResourceDefinitionKind) => crd.spec.scope === 'Namespaced';\n\nconst Established: React.FC<{ crd: CustomResourceDefinitionKind }> = ({ crd }) => {\n  return crd.status && isEstablished(crd.status.conditions) ? (\n    <span>\n      <GreenCheckCircleIcon alt=\"true\" />\n    </span>\n  ) : (\n    <span>\n      <BanIcon alt=\"false\" />\n    </span>\n  );\n};\n\nconst EmptyVersionsMsg: React.FC<{}> = () => <EmptyBox label=\"CRD Versions\" />;\n\nconst CRDVersionTable: React.FC<CRDVersionProps> = ({ versions }) => {\n  const [sortBy, setSortBy] = React.useState<PFSortState>({});\n  const { t } = useTranslation();\n\n  const compare = (a, b) => {\n    const aVal = a?.[sortBy.index] ?? '';\n    const bVal = b?.[sortBy.index] ?? '';\n    return sortBy.index === 0 ? apiVersionCompare(aVal, bVal) : aVal.localeCompare(bVal);\n  };\n  const crdVersionTableHeaders = [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      transforms: [sortable],\n    },\n    {\n      title: t('COMMON:MSG_DETAILS_TABDETAILS_VERSIONS_TABLEHEADER_1'),\n      transforms: [sortable],\n    },\n    {\n      title: t('COMMON:MSG_DETAILS_TABDETAILS_VERSIONS_TABLEHEADER_2'),\n      transforms: [sortable],\n    },\n  ];\n\n  const versionRows = _.map(versions, (version: CRDVersion) => [version.name, version.served.toString(), version.storage.toString()]);\n\n  sortBy.direction === SortByDirection.asc ? versionRows.sort(compare) : versionRows.sort(compare).reverse();\n\n  const onSort = (_event, index, direction) => {\n    setSortBy({ index, direction });\n  };\n\n  return versionRows.length > 0 ? (\n    <PFTable variant={TableVariant.compact} aria-label=\"CRD Versions\" cells={crdVersionTableHeaders} rows={versionRows} onSort={onSort} sortBy={sortBy}>\n      <TableHeader />\n      <TableBody />\n    </PFTable>\n  ) : (\n    <EmptyVersionsMsg />\n  );\n};\n\nconst CRDTableRow: RowFunction<CustomResourceDefinitionKind> = ({ obj: crd, index, key, style }) => {\n  return (\n    <TableRow id={crd.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <span className=\"co-resource-item\">\n          <ResourceLink kind=\"CustomResourceDefinition\" name={crd.metadata.name} namespace={crd.metadata.namespace} displayName={_.get(crd, 'spec.names.kind')} />\n        </span>\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>{crd.spec.group}</TableData>\n      <TableData className={tableColumnClasses[2]}>{getLatestVersionForCRD(crd)}</TableData>\n      <TableData className={tableColumnClasses[3]}>{namespaced(crd) ? 'Yes' : 'No'}</TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <Established crd={crd} />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <ResourceKebab actions={menuActions} kind=\"CustomResourceDefinition\" resource={crd} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst Details: React.FC<{ obj: CustomResourceDefinitionKind }> = ({ obj: crd }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Custom Resource Definition Details\" />\n        <div className=\"co-m-pane__body-group\">\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <ResourceSummary showPodSelector={false} showNodeSelector={false} resource={crd} />\n            </div>\n            <div className=\"col-sm-6\">\n              <dl className=\"co-m-pane__details\">\n                <dt>{t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_91')}</dt>\n                <dd>\n                  <Established crd={crd} />\n                </dd>\n                <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_92')} obj={crd} path=\"spec.group\" />\n                <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_93')} obj={crd} path=\"spec.version\" />\n                <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_94')} obj={crd} path=\"spec.scope\" />\n              </dl>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_CONDITIONS_1')} />\n        <Conditions conditions={crd.status.conditions} />\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_93')} />\n        <CRDVersionTable versions={crd.spec.versions} />\n      </div>\n    </>\n  );\n};\n\nconst Instances: React.FC<InstancesProps> = ({ obj, namespace }) => {\n  const crdKind = referenceForCRD(obj);\n  const componentLoader = resourceListPages.get(crdKind, () => Promise.resolve(DefaultPage));\n  return <AsyncComponent loader={componentLoader} namespace={namespace ? namespace : undefined} kind={crdKind} showTitle={false} autoFocus={false} />;\n};\n\nexport const CustomResourceDefinitionsList: React.FC<CustomResourceDefinitionsListProps> = props => {\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"Custom Resource Definitions\" Header={CRDTableHeader.bind(null, t)} Row={CRDTableRow} defaultSortField=\"spec.names.kind\" virtualize />;\n};\n\nexport const CustomResourceDefinitionsPage: React.FC<CustomResourceDefinitionsPageProps> = props => <ListPage {...props} ListComponent={CustomResourceDefinitionsList} kind=\"CustomResourceDefinition\" canCreate={true} />;\nexport const CustomResourceDefinitionsDetailsPage: React.FC<CustomResourceDefinitionsDetailsPageProps> = props => <DetailsPage {...props} kind=\"CustomResourceDefinition\" menuActions={menuActions} pages={[navFactory.details(Details), navFactory.editYaml(), { name: 'Instances', href: 'instances', component: Instances }]} />;\n\nexport type CustomResourceDefinitionsListProps = {};\n\nexport type CustomResourceDefinitionsPageProps = {};\n\ntype InstancesProps = {\n  obj: CustomResourceDefinitionKind;\n  namespace: string;\n};\n\nCustomResourceDefinitionsList.displayName = 'CustomResourceDefinitionsList';\nCustomResourceDefinitionsPage.displayName = 'CustomResourceDefinitionsPage';\n\ntype CustomResourceDefinitionsDetailsPageProps = {\n  match: any;\n};\n\nexport type CRDVersionProps = {\n  versions: CRDVersion[];\n};\n\ntype PFSortState = {\n  index?: number;\n  direction?: SortByDirection;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAIA;AAGA;AAEA;AAEA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAKA;AAEA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAWA;AACA;;;;;A","sourceRoot":""}