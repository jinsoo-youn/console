{"version":3,"file":"instantiate-template-b95e2e897bd2365bcd4e.js","sources":["webpack:///./public/components/instantiate-template.tsx"],"sourcesContent":["import * as React from 'react';\nimport { connect } from 'react-redux';\nimport * as _ from 'lodash-es';\nimport { Helmet } from 'react-helmet';\nimport * as classNames from 'classnames';\nimport { ActionGroup, Button } from '@patternfly/react-core';\n\nimport { ANNOTATIONS } from '@console/shared';\nimport {\n  getImageForIconClass,\n  getTemplateIcon,\n  normalizeIconClass,\n} from './catalog/catalog-item-icon';\nimport {\n  ButtonBar,\n  ExternalLink,\n  Firehose,\n  history,\n  LoadingBox,\n  LoadError,\n  NsDropdown,\n  resourcePathFromModel,\n} from './utils';\nimport { SecretModel, TemplateInstanceModel } from '../models';\nimport {\n  k8sCreate,\n  K8sResourceKind,\n  TemplateKind,\n  TemplateInstanceKind,\n  TemplateParameter,\n} from '../module/k8s';\nimport { getActivePerspective } from '../reducers/ui';\nimport { RootState } from '../redux';\n\nconst TemplateResourceDetails: React.FC<TemplateResourceDetailsProps> = ({ template }) => {\n  const resources = _.uniq(_.compact(_.map(template.objects, 'kind'))).sort();\n  if (_.isEmpty(resources)) {\n    return null;\n  }\n\n  return (\n    <>\n      <hr />\n      <p>The following resources will be created:</p>\n      <ul>\n        {resources.map((kind: string) => (\n          <li key={kind}>{kind}</li>\n        ))}\n      </ul>\n    </>\n  );\n};\nTemplateResourceDetails.displayName = 'TemplateResourceDetails';\n\nconst TemplateInfo: React.FC<TemplateInfoProps> = ({ template }) => {\n  const annotations = template.metadata.annotations || {};\n  const { description } = annotations;\n  const displayName = annotations[ANNOTATIONS.displayName] || template.metadata.name;\n  const iconClass = getTemplateIcon(template);\n  const imgURL = getImageForIconClass(iconClass);\n  const tags = (annotations.tags || '').split(/\\s*,\\s*/);\n  const documentationURL = annotations[ANNOTATIONS.documentationURL];\n  const supportURL = annotations[ANNOTATIONS.supportURL];\n\n  return (\n    <div className=\"co-catalog-item-info\">\n      <div className=\"co-catalog-item-details\">\n        <span className=\"co-catalog-item-icon\">\n          {imgURL ? (\n            <img\n              className=\"co-catalog-item-icon__img co-catalog-item-icon__img--large\"\n              src={imgURL}\n            />\n          ) : (\n            <span\n              className={classNames(\n                'co-catalog-item-icon__icon co-catalog-item-icon__icon--large',\n                normalizeIconClass(iconClass),\n              )}\n            />\n          )}\n        </span>\n        <div>\n          <h2 className=\"co-section-heading co-catalog-item-details__name\">{displayName}</h2>\n          {!_.isEmpty(tags) && (\n            <p className=\"co-catalog-item-details__tags\">\n              {_.map(tags, (tag, i) => (\n                <span className=\"co-catalog-item-details__tag\" key={i}>\n                  {tag}\n                </span>\n              ))}\n            </p>\n          )}\n          {(documentationURL || supportURL) && (\n            <ul className=\"list-inline\">\n              {documentationURL && (\n                <li className=\"co-break-word\">\n                  <ExternalLink href={documentationURL} text=\"View documentation\" />\n                </li>\n              )}\n              {supportURL && (\n                <li className=\"co-break-word\">\n                  <ExternalLink href={supportURL} text=\"Get support\" />\n                </li>\n              )}\n            </ul>\n          )}\n        </div>\n      </div>\n      {description && <p className=\"co-catalog-item-details__description\">{description}</p>}\n      <TemplateResourceDetails template={template} />\n    </div>\n  );\n};\nTemplateInfo.displayName = 'TemplateInfo';\n\nconst stateToProps = (state: RootState) => ({\n  models: state.k8s.getIn(['RESOURCES', 'models']),\n  activePerspective: getActivePerspective(state),\n});\n\nclass TemplateForm_ extends React.Component<TemplateFormProps, TemplateFormState> {\n  constructor(props: TemplateFormProps) {\n    super(props);\n\n    const { preselectedNamespace: namespace = '' } = this.props;\n    const parameters = this.getParameterValues(props);\n    this.state = {\n      namespace,\n      parameters,\n      inProgress: false,\n      error: '',\n    };\n  }\n\n  componentDidUpdate(prevProps: TemplateFormProps) {\n    if (this.props.obj !== prevProps.obj) {\n      const parameters = this.getParameterValues(this.props);\n      this.setState({ parameters });\n    }\n  }\n\n  getParameterValues = (props: TemplateFormProps) => {\n    const templateParameters: TemplateParameter[] = props.obj.data.parameters || [];\n    return templateParameters.reduce((acc, { name, value }: TemplateParameter) => {\n      acc[name] = value;\n      return acc;\n    }, {});\n  };\n\n  onNamespaceChange = (namespace: string) => {\n    this.setState({ namespace });\n  };\n\n  onParameterChanged: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    const { name, value } = event.currentTarget;\n    this.setState(({ parameters }) => ({\n      parameters: {\n        ...parameters,\n        [name]: value,\n      },\n    }));\n  };\n\n  createTemplateSecret(): Promise<K8sResourceKind> {\n    const { obj } = this.props;\n    const { namespace, parameters } = this.state;\n    const secret = {\n      apiVersion: 'v1',\n      kind: 'Secret',\n      metadata: {\n        generateName: `${obj.data.metadata.name}-parameters-`,\n        namespace,\n      },\n      // Remove empty values.\n      stringData: parameters,\n    };\n    return k8sCreate(SecretModel, secret);\n  }\n\n  createTemplateInstance(secret: K8sResourceKind): Promise<K8sResourceKind> {\n    const { obj } = this.props;\n    const { namespace } = this.state;\n    const instance: TemplateInstanceKind = {\n      apiVersion: 'template.openshift.io/v1',\n      kind: 'TemplateInstance',\n      metadata: {\n        generateName: `${obj.data.metadata.name}-`,\n        namespace,\n      },\n      spec: {\n        template: obj.data as TemplateKind,\n        secret: {\n          name: secret.metadata.name,\n        },\n      },\n    };\n    return k8sCreate(TemplateInstanceModel, instance);\n  }\n\n  save = (event: React.FormEvent<EventTarget>) => {\n    event.preventDefault();\n    const { namespace } = this.state;\n    if (!namespace) {\n      this.setState({ error: 'Please complete all fields.' });\n      return;\n    }\n\n    this.setState({ error: '', inProgress: true });\n    this.createTemplateSecret()\n      .then((secret: K8sResourceKind) => {\n        return this.createTemplateInstance(secret).then((instance: TemplateInstanceKind) => {\n          this.setState({ inProgress: false });\n          history.push(\n            this.props.activePerspective === 'dev'\n              ? `/topology`\n              : resourcePathFromModel(\n                  TemplateInstanceModel,\n                  instance.metadata.name,\n                  instance.metadata.namespace,\n                ),\n          );\n        });\n      })\n      .catch((err) => this.setState({ inProgress: false, error: err.message }));\n  };\n\n  render() {\n    const { obj } = this.props;\n    if (obj.loadError) {\n      return (\n        <LoadError\n          message={obj.loadError.message}\n          label=\"Template\"\n          className=\"loading-box loading-box__errored\"\n        />\n      );\n    }\n\n    if (!obj.loaded) {\n      return <LoadingBox />;\n    }\n\n    const template: TemplateKind = obj.data;\n    const parameters = template.parameters || [];\n\n    return (\n      <div className=\"row\">\n        <div className=\"col-md-7 col-md-push-5 co-catalog-item-info\">\n          <TemplateInfo template={template} />\n        </div>\n        <div className=\"col-md-5 col-md-pull-7\">\n          <form className=\"co-instantiate-template-form\" onSubmit={this.save}>\n            <div className=\"form-group\">\n              <label className=\"control-label co-required\" htmlFor=\"namespace\">\n                Namespace\n              </label>\n              <NsDropdown\n                selectedKey={this.state.namespace}\n                onChange={this.onNamespaceChange}\n                id=\"namespace\"\n              />\n            </div>\n            {parameters.map(\n              ({\n                name,\n                displayName,\n                description,\n                required: requiredParam,\n                generate,\n              }: TemplateParameter) => {\n                const value = this.state.parameters[name] || '';\n                const helpID = description ? `${name}-help` : '';\n                const placeholder = generate ? '(generated if empty)' : '';\n                // Only set required for parameters not generated.\n                const requiredInput = requiredParam && !generate;\n                return (\n                  <div className=\"form-group\" key={name}>\n                    <label\n                      className={classNames('control-label', { 'co-required': requiredInput })}\n                      htmlFor={name}\n                    >\n                      {displayName || name}\n                    </label>\n                    <input\n                      type=\"text\"\n                      className=\"pf-c-form-control\"\n                      id={name}\n                      name={name}\n                      value={value}\n                      onChange={this.onParameterChanged}\n                      required={requiredInput}\n                      placeholder={placeholder}\n                      aria-describedby={helpID}\n                    />\n                    {description && (\n                      <div className=\"help-block\" id={helpID}>\n                        {description}\n                      </div>\n                    )}\n                  </div>\n                );\n              },\n            )}\n            <ButtonBar\n              className=\"co-instantiate-template-form__button-bar\"\n              errorMessage={this.state.error}\n              inProgress={this.state.inProgress}\n            >\n              <ActionGroup className=\"pf-c-form\">\n                <Button type=\"submit\" variant=\"primary\">\n                  Create\n                </Button>\n                <Button type=\"button\" variant=\"secondary\" onClick={history.goBack}>\n                  Cancel\n                </Button>\n              </ActionGroup>\n            </ButtonBar>\n          </form>\n        </div>\n      </div>\n    );\n  }\n}\nconst TemplateForm = connect(stateToProps)(TemplateForm_);\n\nexport const InstantiateTemplatePage: React.FC<{}> = (props) => {\n  const title = 'Instantiate Template';\n  const searchParams = new URLSearchParams(location.search);\n  const templateName = searchParams.get('template');\n  const templateNamespace = searchParams.get('template-ns');\n  const preselectedNamespace = searchParams.get('preselected-ns');\n  const resources = [\n    {\n      kind: 'Template',\n      name: templateName,\n      namespace: templateNamespace,\n      isList: false,\n      prop: 'obj',\n    },\n  ];\n\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <div className=\"co-m-pane__body\">\n        <h1 className=\"co-m-pane__heading\">{title}</h1>\n        <Firehose resources={resources}>\n          <TemplateForm preselectedNamespace={preselectedNamespace} {...(props as any)} />\n        </Firehose>\n      </div>\n    </>\n  );\n};\n\ntype TemplateResourceDetailsProps = {\n  template: TemplateKind;\n};\n\ntype TemplateInfoProps = {\n  template: TemplateKind;\n};\n\ntype TemplateFormProps = {\n  obj: any;\n  preselectedNamespace: string;\n  models: any;\n  activePerspective: string;\n};\n\ntype TemplateFormState = {\n  namespace: string;\n  parameters: {\n    [name: string]: string;\n  };\n  inProgress: boolean;\n  error: string;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AAUA;AACA;AAOA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAOA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAeA;AACA;AACA;AASA;AAEA;AAEA;AAGA;AAEA;AAOA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAmBA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAIA;AACA;AAsCA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AApGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAwBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA6BA;AACA;AACA;AACA;AAOA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAMA;AAQA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAWA;AAOA;AAEA;AAKA;AACA;AAGA;AASA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAKA;;;;;A","sourceRoot":""}