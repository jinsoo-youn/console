{"version":3,"file":"command-line-tools-8dd31dda9bb11ca0852c.js","sources":["webpack:///./public/components/command-line-tools.tsx","webpack:///./public/components/markdown-view.tsx","webpack:///util (ignored)","webpack:///util (ignored)?c0e5","webpack:///readable-stream (ignored)","webpack:///supports-color (ignored)","webpack:///chalk (ignored)","webpack:///fs (ignored)"],"sourcesContent":["import * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport * as _ from 'lodash-es';\n\nimport { FLAGS } from '@console/shared';\nimport { ExternalLink, Firehose, FirehoseResult } from './utils';\nimport { connectToFlags } from '../reducers/features';\nimport { ConsoleCLIDownloadModel } from '../models';\nimport { referenceForModel } from '../module/k8s';\nimport { SyncMarkdownView } from './markdown-view';\n\nexport const CommandLineTools: React.FC<CommandLineToolsProps> = ({ obj }) => {\n  const title = 'Command Line Tools';\n  const data = _.sortBy(_.get(obj, 'data'), 'spec.displayName');\n  const cliData = _.remove(data, (item) => item.metadata.name === 'oc-cli-downloads');\n  const additionalCommandLineTools = _.map(cliData.concat(data), (tool) => {\n    const displayName = tool.spec.displayName;\n    const defaultLinkText = `Download ${displayName}`;\n    return (\n      <React.Fragment key={tool.metadata.uid}>\n        <hr />\n        <h2 className=\"co-section-heading\" data-test-id={displayName}>\n          {displayName}\n        </h2>\n        <SyncMarkdownView content={tool.spec.description} exactHeight />\n        {tool.spec.links.length === 1 && (\n          <p>\n            <ExternalLink\n              href={tool.spec.links[0].href}\n              text={tool.spec.links[0].text || defaultLinkText}\n            />\n          </p>\n        )}\n        {tool.spec.links.length > 1 && (\n          <ul>\n            {_.map(tool.spec.links, (link, i) => (\n              <li key={i}>\n                <ExternalLink href={link.href} text={link.text || defaultLinkText} />\n              </li>\n            ))}\n          </ul>\n        )}\n      </React.Fragment>\n    );\n  });\n\n  return (\n    <>\n      <Helmet>\n        <title>{title}</title>\n      </Helmet>\n      <div className=\"co-m-pane__body\">\n        <h1 className=\"co-m-pane__heading\">\n          <div className=\"co-m-pane__name\">{title}</div>\n        </h1>\n        {window.SERVER_FLAGS.requestTokenURL && (\n          <>\n            <hr />\n            <ExternalLink href={window.SERVER_FLAGS.requestTokenURL} text=\"Copy Login Command\" />\n          </>\n        )}\n        {additionalCommandLineTools}\n      </div>\n    </>\n  );\n};\n\nexport const CommandLineToolsPage = connectToFlags(FLAGS.CONSOLE_CLI_DOWNLOAD)(\n  ({ flags, ...props }) => {\n    const resources = flags[FLAGS.CONSOLE_CLI_DOWNLOAD]\n      ? [\n          {\n            kind: referenceForModel(ConsoleCLIDownloadModel),\n            isList: true,\n            prop: 'obj',\n          },\n        ]\n      : [];\n\n    return (\n      <Firehose resources={resources}>\n        <CommandLineTools {...(props as any)} />\n      </Firehose>\n    );\n  },\n);\n\ntype CommandLineToolsProps = {\n  obj: FirehoseResult;\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Converter } from 'showdown';\nimport * as sanitizeHtml from 'sanitize-html';\n\nconst tableTags = ['table', 'thead', 'tbody', 'tr', 'th', 'td'];\n\nconst markdownConvert = (markdown) => {\n  const unsafeHtml = new Converter({\n    tables: true,\n    openLinksInNewWindow: true,\n    strikethrough: true,\n    emoji: true,\n  }).makeHtml(markdown);\n\n  return sanitizeHtml(unsafeHtml, {\n    allowedTags: [\n      'b',\n      'i',\n      'strike',\n      's',\n      'del',\n      'em',\n      'strong',\n      'a',\n      'p',\n      'h1',\n      'h2',\n      'h3',\n      'h4',\n      'ul',\n      'ol',\n      'li',\n      'code',\n      'pre',\n      ...tableTags,\n    ],\n    allowedAttributes: {\n      a: ['href', 'target', 'rel'],\n    },\n    allowedSchemes: ['http', 'https', 'mailto'],\n    transformTags: {\n      a: sanitizeHtml.simpleTransform('a', { rel: 'noopener noreferrer' }, true),\n    },\n  });\n};\n\nexport class SyncMarkdownView extends React.Component<\n  { content: string; styles?: string; exactHeight?: boolean },\n  {}\n> {\n  private frame: any;\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.updateDimensions();\n  }\n\n  updateDimensions() {\n    if (!this.frame?.contentWindow?.document.body.firstChild) {\n      return;\n    }\n    this.frame.style.height = `${this.frame.contentWindow.document.body.firstChild.scrollHeight}px`;\n\n    // Let the new height take effect, then reset again once we recompute\n    setTimeout(() => {\n      if (this.props.exactHeight) {\n        this.frame.style.height = `${this.frame.contentWindow.document.body.firstChild.scrollHeight}px`;\n      } else {\n        // Increase by 15px for the case where a horizontal scrollbar might appear\n        this.frame.style.height = `${this.frame.contentWindow.document.body.firstChild\n          .scrollHeight + 15}px`;\n      }\n    });\n  }\n\n  render() {\n    // Find the app's stylesheets and inject them into the frame to ensure consistent styling.\n    const filteredLinks = Array.from(document.getElementsByTagName('link')).filter((l) =>\n      _.includes(l.href, 'app-bundle'),\n    );\n\n    const linkRefs = _.reduce(\n      filteredLinks,\n      (refs, link) => `${refs}\n        <link rel=\"stylesheet\" href=\"${link.href}\">`,\n      '',\n    );\n\n    const contents = `\n      ${linkRefs}\n      <style type=\"text/css\">\n      body {\n        background-color: transparent !important;\n        color: ${this.props.content ? '#333' : '#999'};\n        font-family: var(--pf-global--FontFamily--sans-serif);\n        min-width: auto !important;\n      }\n      table {\n        display: block;\n        margin-bottom: 11.5px;\n        overflow-x: auto;\n      }\n      td,\n      th {\n        border-bottom: 1px solid #ededed;\n        padding: 10px;\n        vertical-align: top;\n      }\n      th {\n        padding-top: 0;\n      }\n      ${this.props.styles ? this.props.styles : ''}\n      </style>\n      <body class=\"pf-m-redhat-font\"><div style=\"overflow-y: auto;\">${markdownConvert(\n        this.props.content || 'Not available',\n      )}</div></body>`;\n    return (\n      <iframe\n        sandbox=\"allow-popups allow-same-origin\"\n        srcDoc={contents}\n        style={{ border: '0px', display: 'block', width: '100%', height: '0' }}\n        ref={(r) => (this.frame = r)}\n        onLoad={() => this.updateDimensions()}\n      />\n    );\n  }\n}\n","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AAEA;AAMA;AAIA;AAOA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;;;;;;;;;;;;;ACpFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAGA;AAIA;AACA;;;;AAIA;;;;;;;;;;;;;;;;;;AAkBA;;AAEA;AAGA;AASA;AACA;;;;;;;;;;;;AClIA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}