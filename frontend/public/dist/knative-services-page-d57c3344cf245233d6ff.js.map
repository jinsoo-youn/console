{"version":3,"file":"knative-services-page-d57c3344cf245233d6ff.js","sources":["webpack:///./packages/knative-plugin/src/components/services/ServiceHeader.tsx","webpack:///./packages/knative-plugin/src/components/services/ServiceList.tsx","webpack:///./packages/knative-plugin/src/components/services/ServiceRow.tsx","webpack:///./packages/knative-plugin/src/components/services/ServicesPage.tsx","webpack:///./packages/knative-plugin/src/components/services/service-table.ts","webpack:///./packages/knative-plugin/src/utils/condition-utils.ts"],"sourcesContent":["import { sortable } from '@patternfly/react-table';\nimport { tableColumnClasses } from './service-table';\n\nconst ServiceHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'URL',\n      sortField: 'status.url',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Generation',\n      sortField: 'metadata.generation',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: 'Created',\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: 'Conditions',\n      props: { className: tableColumnClasses[5] },\n    },\n    {\n      title: 'Ready',\n      props: { className: tableColumnClasses[6] },\n    },\n    {\n      title: 'Reason',\n      props: { className: tableColumnClasses[7] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[8] },\n    },\n  ];\n};\n\nexport default ServiceHeader;\n","import * as React from 'react';\nimport { Table, TableProps } from '@console/internal/components/factory';\nimport { ServiceModel } from '../../models';\nimport ServiceHeader from './ServiceHeader';\nimport ServiceRow from './ServiceRow';\n\nconst ServiceList: React.FC<TableProps> = (props) => (\n  <Table\n    {...props}\n    aria-label={ServiceModel.labelPlural}\n    Header={ServiceHeader}\n    Row={ServiceRow}\n    virtualize\n  />\n);\n\nexport default ServiceList;\n","import * as React from 'react';\nimport * as cx from 'classnames';\nimport { TableRow, TableData, RowFunction } from '@console/internal/components/factory';\nimport {\n  Kebab,\n  ResourceLink,\n  ResourceKebab,\n  Timestamp,\n  ExternalLink,\n  kindObj,\n} from '@console/internal/components/utils';\nimport { referenceForModel, referenceFor, K8sKind } from '@console/internal/module/k8s';\nimport { ServiceModel } from '../../models';\nimport { getConditionString, getCondition } from '../../utils/condition-utils';\nimport { ServiceKind, ConditionTypes } from '../../types';\nimport { tableColumnClasses } from './service-table';\n\nconst serviceReference = referenceForModel(ServiceModel);\n\nconst ServiceRow: RowFunction<ServiceKind> = ({ obj, index, key, style }) => {\n  const readyCondition = obj.status\n    ? getCondition(obj.status.conditions, ConditionTypes.Ready)\n    : null;\n  const kind = kindObj(referenceFor(obj)) as K8sKind;\n  const menuActions = [...Kebab.getExtensionsActionsForKind(kind), ...Kebab.factory.common];\n\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={serviceReference}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n          title={obj.metadata.uid}\n        />\n      </TableData>\n      <TableData className={cx(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={cx(tableColumnClasses[2], 'co-break-word')}>\n        {(obj.status && obj.status.url && (\n          <ExternalLink href={obj.status.url} text={obj.status.url} />\n        )) ||\n          '-'}\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>{obj.metadata.generation || '-'}</TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <Timestamp timestamp={obj.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        {obj.status ? getConditionString(obj.status.conditions) : '-'}\n      </TableData>\n      <TableData className={tableColumnClasses[6]}>\n        {(readyCondition && readyCondition.status) || '-'}\n      </TableData>\n      <TableData className={tableColumnClasses[7]}>\n        {(readyCondition && readyCondition.message) || '-'}\n      </TableData>\n      <TableData className={tableColumnClasses[8]}>\n        <ResourceKebab actions={menuActions} kind={serviceReference} resource={obj} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport default ServiceRow;\n","import * as React from 'react';\nimport { ListPage } from '@console/internal/components/factory';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { ServiceModel } from '../../models';\nimport ServiceList from './ServiceList';\n\nexport interface ServicesPageProps {\n  namespace: string;\n}\n\nconst ServicesPage: React.FC<React.ComponentProps<typeof ListPage>> = (props) => (\n  <ListPage\n    {...props}\n    canCreate\n    kind={referenceForModel(ServiceModel)}\n    ListComponent={ServiceList}\n  />\n);\n\nexport default ServicesPage;\n","import * as classNames from 'classnames';\n\nimport { Kebab } from '@console/internal/components/utils';\n\nexport const tableColumnClasses = [\n  '', // name\n  '', // namespace\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm'), // url\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'), // generation\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'), // created\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'), // conditions\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'), // ready\n  classNames('pf-m-hidden', 'pf-m-visible-on-2xl'), // created\n  Kebab.columnClass,\n];\n","import * as _ from 'lodash';\nimport { K8sResourceCondition, K8sResourceConditionStatus } from '@console/internal/module/k8s';\n\nexport const getConditionOKCount = (conditions: K8sResourceCondition[]): number =>\n  _.sumBy<any>(conditions, (c) => Number(c.status === K8sResourceConditionStatus.True));\n\nexport const getConditionString = (conditions: K8sResourceCondition[]): string =>\n  `${getConditionOKCount(conditions)} OK / ${_.size(conditions)}`;\n\nexport const getCondition = (\n  conditions: K8sResourceCondition[],\n  type: K8sResourceCondition['type'],\n): K8sResourceCondition | undefined => _.find(conditions, (c) => c.type === type);\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACtDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAUA;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAOA;AACA;AAEA;AAIA;AAEA;AACA;AACA;AAEA;AAGA;AAGA;AAGA;AACA;AAIA;AAEA;;;;;;;;;;;;;ACjEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAMA;AASA;;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAGA;AAGA;;;;;A","sourceRoot":""}