{"version":3,"file":"brokermanagment-409eed5a32fb42526204.js","sources":["webpack:///./public/components/broker-management.tsx","webpack:///./public/components/cluster-service-broker.tsx"],"sourcesContent":["import * as React from 'react';\nimport { HorizontalNav, PageHeading } from './utils';\nimport { ClusterServiceBrokerPage } from './cluster-service-broker';\nimport { ClusterServiceClassPage } from './cluster-service-class';\n\nconst pages = [\n  {\n    href: '',\n    name: 'Service Brokers',\n    component: ClusterServiceBrokerPage,\n  },\n  {\n    href: 'serviceclasses',\n    name: 'Service Classes',\n    component: ClusterServiceClassPage,\n  },\n];\n\nexport const BrokerManagementPage: React.SFC<BrokerManagementPageProps> = ({ match }) => (\n  <>\n    <PageHeading detail={true} title=\"Broker Management\" />\n    <HorizontalNav pages={pages} match={match} noStatusBox={true} />\n  </>\n);\n\nexport type BrokerManagementPageProps = {\n  match: any;\n};\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from './factory';\nimport { Kebab, SectionHeading, detailsPage, navFactory, ResourceLink, ResourceKebab, ResourceSummary, StatusWithIcon, Timestamp, ExternalLink } from './utils';\nimport { K8sResourceKind, referenceForModel } from '../module/k8s';\nimport { ClusterServiceBrokerModel } from '../models';\nimport { Conditions } from './conditions';\nimport { ClusterServiceClassPage } from './cluster-service-class';\n\nconst menuActions = [...Kebab.getExtensionsActionsForKind(ClusterServiceBrokerModel), ...Kebab.factory.common];\n\nconst tableColumnClasses = [classNames('col-sm-3', 'col-xs-6'), classNames('col-sm-3', 'col-xs-6'), classNames('col-sm-3', 'hidden-xs'), classNames('col-sm-3', 'hidden-xs'), Kebab.columnClass];\n\nconst ClusterServiceBrokerTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Status',\n      sortFunc: 'serviceCatalogStatus',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Provider',\n      sortFunc: 'spec',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Created',\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    // {\n    //   title: 'Relist Behavior',\n    //   sortField: 'spec.relistBehavior',\n    //   transforms: [sortable],\n    //   props: { className: tableColumnClasses[2] },\n    // },\n    // {\n    //   title: 'Last Retrieved',\n    //   sortField: 'status.lastCatalogRetrievalTime',\n    //   transforms: [sortable],\n    //   props: { className: tableColumnClasses[3] },\n    // },\n    {\n      title: '',\n      props: { className: tableColumnClasses[4] },\n    },\n  ];\n};\nClusterServiceBrokerTableHeader.displayName = 'ClusterServiceBrokerTableHeader';\n\nconst ClusterServiceBrokerTableRow: RowFunction<K8sResourceKind> = ({ obj: serviceBroker, index, key, style }) => {\n  return (\n    <TableRow id={serviceBroker.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={referenceForModel(ClusterServiceBrokerModel)} name={serviceBroker.metadata.name} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <StatusWithIcon obj={serviceBroker} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>{serviceBroker.spec.relistBehavior}</TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <Timestamp timestamp={serviceBroker.status.lastCatalogRetrievalTime} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <ResourceKebab actions={menuActions} kind={referenceForModel(ClusterServiceBrokerModel)} resource={serviceBroker} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst ClusterServiceBrokerDetails: React.SFC<ClusterServiceBrokerDetailsProps> = ({ obj: serviceBroker }) => {\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Service Broker Details\" />\n        <div className=\"row\">\n          <div className=\"col-md-6\">\n            <ResourceSummary resource={serviceBroker} />\n            <dt>Last Catalog Retrieval Time</dt>\n            <dd>\n              <Timestamp timestamp={serviceBroker.status.lastCatalogRetrievalTime} />\n            </dd>\n            {serviceBroker.spec.insecureSkipTLSVerify && <dt>Insecure Skip TLS Verify</dt>}\n            {serviceBroker.spec.insecureSkipTLSVerify && <dd>{serviceBroker.spec.insecureSkipTLSVerify}</dd>}\n          </div>\n          <div className=\"col-md-6\">\n            <dl className=\"co-m-pane__details\">\n              <dt>Status</dt>\n              <dd>\n                <StatusWithIcon obj={serviceBroker} />\n              </dd>\n              <dt>Broker URL</dt>\n              <dd>\n                <ExternalLink href={serviceBroker.spec.url} text={serviceBroker.spec.url} />\n              </dd>\n              <dt>Relist Behavior</dt>\n              <dd>{serviceBroker.spec.relistBehavior}</dd>\n              {serviceBroker.spec.relistBehavior === 'Duration' && (\n                <>\n                  <dt>Relist Duration</dt>\n                  <dd>{serviceBroker.spec.relistDuration || '-'}</dd>\n                </>\n              )}\n            </dl>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Conditions\" />\n        <Conditions conditions={serviceBroker.status.conditions} />\n      </div>\n    </>\n  );\n};\n\nconst ServiceClassTabPage = ({ obj }) => <ClusterServiceClassPage showTitle={false} fieldSelector={`spec.clusterServiceBrokerName=${obj.metadata.name}`} />;\nexport const ClusterServiceBrokerDetailsPage: React.SFC<ClusterServiceBrokerDetailsPageProps> = props => <DetailsPage {...props} kind={referenceForModel(ClusterServiceBrokerModel)} menuActions={menuActions} pages={[navFactory.details(detailsPage(ClusterServiceBrokerDetails)), navFactory.editYaml(), navFactory.clusterServiceClasses(ServiceClassTabPage)]} />;\nexport const ClusterServiceBrokerList: React.SFC = props => <Table {...props} aria-label=\"Cluster Service Brokers\" Header={ClusterServiceBrokerTableHeader} Row={ClusterServiceBrokerTableRow} virtualize />;\n\nexport const ClusterServiceBrokerPage: React.SFC<ClusterServiceBrokerPageProps> = props => <ListPage {...props} ListComponent={ClusterServiceBrokerList} kind={referenceForModel(ClusterServiceBrokerModel)} canCreate={true} showTitle={false} />;\n\nexport type ClusterServiceBrokerPageProps = {\n  obj: K8sResourceKind;\n};\n\nexport type ClusterServiceBrokerDetailsProps = {\n  obj: K8sResourceKind;\n};\n\nexport type ClusterServiceBrokerDetailsPageProps = {\n  match: any;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAOA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAEA;;;;;A","sourceRoot":""}