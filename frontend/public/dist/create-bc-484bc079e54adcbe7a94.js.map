{"version":3,"file":"create-bc-484bc079e54adcbe7a94.js","sources":["webpack:///./packages/noobaa-storage-plugin/src/components/bucket-class/create-bc.scss?fe97","webpack:///./packages/noobaa-storage-plugin/src/components/bucket-class/create-bc.tsx","webpack:///./packages/noobaa-storage-plugin/src/components/bucket-class/state.ts","webpack:///./packages/noobaa-storage-plugin/src/components/bucket-class/wizard-pages/backingstore-page.tsx","webpack:///./packages/noobaa-storage-plugin/src/components/bucket-class/wizard-pages/general-page.tsx","webpack:///./packages/noobaa-storage-plugin/src/components/bucket-class/wizard-pages/placement-policy-page.tsx","webpack:///./packages/noobaa-storage-plugin/src/components/bucket-class/wizard-pages/review-page.tsx","webpack:///./packages/noobaa-storage-plugin/src/components/create-backingstore-page/create-bs-modal.tsx","webpack:///./packages/noobaa-storage-plugin/src/components/noobaa-operator/infoPage.scss?364e","webpack:///./packages/noobaa-storage-plugin/src/components/noobaa-operator/infoPage.tsx","webpack:///./packages/noobaa-storage-plugin/src/components/noobaa-operator/noobaa-page.tsx","webpack:///./packages/noobaa-storage-plugin/src/components/noobaa-operator/resourceTable.tsx","webpack:///./packages/noobaa-storage-plugin/src/utils.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { RouteComponentProps } from 'react-router';\nimport { Title, Wizard } from '@patternfly/react-core';\nimport {\n  apiVersionForModel,\n  k8sCreate,\n  k8sGet,\n  referenceForModel,\n} from '@console/internal/module/k8s';\nimport { history } from '@console/internal/components/utils/router';\nimport { BreadCrumbs, resourcePathFromModel } from '@console/internal/components/utils';\nimport { ClusterServiceVersionModel } from '@console/operator-lifecycle-manager';\nimport { getName } from '@console/shared';\nimport { NooBaaBucketClassModel } from '../../models';\nimport GeneralPage from './wizard-pages/general-page';\nimport PlacementPolicyPage from './wizard-pages/placement-policy-page';\nimport BackingStorePageWithFirehose from './wizard-pages/backingstore-page';\nimport ReviewPage from './wizard-pages/review-page';\nimport { initialState, reducer } from './state';\nimport './create-bc.scss';\n\nenum CreateStepsBC {\n  GENERAL = 'GENERAL',\n  PLACEMENT = 'PLACEMENT',\n  BACKINGSTORE = 'BACKINGSTORE',\n  REVIEW = 'REVIEW',\n}\n\nconst CreateBucketClass: React.FC<CreateBCProps> = ({ match }) => {\n  const [state, dispatch] = React.useReducer(reducer, initialState);\n  const { ns, appName } = match.params;\n  const [clusterServiceVersion, setClusterServiceVersion] = React.useState(null);\n\n  React.useEffect(() => {\n    k8sGet(ClusterServiceVersionModel, appName, ns)\n      .then((clusterServiceVersionObj) => {\n        setClusterServiceVersion(clusterServiceVersionObj);\n      })\n      .catch(() => setClusterServiceVersion(null));\n  }, [appName, ns]);\n\n  const finalStep = () => {\n    dispatch({ type: 'setIsLoading', value: true });\n    const payload = {\n      apiVersion: apiVersionForModel(NooBaaBucketClassModel),\n      kind: NooBaaBucketClassModel.kind,\n      metadata: {\n        name: state.bucketClassName,\n        namespace: ns,\n      },\n      spec: {\n        placementPolicy: {\n          tiers: [\n            {\n              placement: state.tier1Policy,\n              backingStores: [...state.tier1BackingStore],\n            },\n          ],\n        },\n      },\n    };\n    if (state.tier2Policy) {\n      payload.spec.placementPolicy.tiers.push({\n        placement: state.tier2Policy,\n        backingStores: [...state.tier2BackingStore],\n      });\n    }\n    const promiseObj = k8sCreate(NooBaaBucketClassModel, payload);\n    promiseObj\n      .then((obj) => {\n        dispatch({ type: 'setIsLoading', value: false });\n        history.push(\n          `/k8s/ns/${ns}/clusterserviceversions/${getName(\n            clusterServiceVersion,\n          )}/${referenceForModel(NooBaaBucketClassModel)}/${getName(obj)}`,\n        );\n      })\n      .catch((err) => {\n        dispatch({ type: 'setIsLoading', value: false });\n        dispatch({ type: 'setError', value: err.message });\n      });\n  };\n\n  const backingStoreNextConditions = () => {\n    if (state.tier1BackingStore.length === 0) return false;\n    if (state.tier1Policy === 'Mirror' && state.tier1BackingStore.length < 2) return false;\n    if (state.tier2Policy === 'Mirror' && state.tier2BackingStore.length < 2) return false;\n    if (!!state.tier2Policy && state.tier2BackingStore.length === 0) return false;\n    return true;\n  };\n\n  const creationConditionsSatisfied = () => {\n    if (!backingStoreNextConditions()) return false;\n    if (!state.bucketClassName) return false;\n    return true;\n  };\n\n  const steps = [\n    {\n      id: CreateStepsBC.GENERAL,\n      name: 'General',\n      component: <GeneralPage dispatch={dispatch} state={state} />,\n      enableNext: !!state.bucketClassName.trim().length,\n    },\n    {\n      id: CreateStepsBC.PLACEMENT,\n      name: 'Placement Policy',\n      component: <PlacementPolicyPage state={state} dispatch={dispatch} />,\n      enableNext: !!state.tier1Policy,\n    },\n    {\n      id: CreateStepsBC.BACKINGSTORE,\n      name: 'Backing Store',\n      component: <BackingStorePageWithFirehose state={state} dispatcher={dispatch} />,\n      enableNext: backingStoreNextConditions(),\n    },\n    {\n      id: CreateStepsBC.REVIEW,\n      name: 'Review',\n      component: <ReviewPage state={state} />,\n      nextButtonText: 'Create Bucket Class',\n      enableNext: creationConditionsSatisfied(),\n    },\n  ];\n\n  return (\n    <>\n      <div className=\"co-create-operand__header\">\n        <div className=\"co-create-operand__header-buttons\">\n          <BreadCrumbs\n            breadcrumbs={[\n              {\n                name: _.get(\n                  clusterServiceVersion,\n                  'spec.displayName',\n                  'Openshift Container Storage Operator',\n                ),\n                path: resourcePathFromModel(ClusterServiceVersionModel, appName, ns),\n              },\n              { name: `Create ${NooBaaBucketClassModel.label}`, path: match.url },\n            ]}\n          />\n        </div>\n        <div className=\"nb-create-bc-header-title\">\n          <Title size=\"2xl\" headingLevel=\"h1\" className=\"nb-create-bc-header-title__main\">\n            Create new Bucket Class\n          </Title>\n          <p className=\"nb-create-bc-header-title__info\">\n            Bucket Class is a CRD representing a class for buckets that defines tiering policies and\n            data placements for an OBC.\n          </p>\n        </div>\n      </div>\n      <div className=\"nb-create-bc-wizard\">\n        <Wizard\n          isCompactNav\n          isInPage\n          isOpen\n          title=\"Create new Bucket Class\"\n          description=\"NooBaa Bucket Class is a CRD representing a class for buckets that defines policies for data placement and more\"\n          steps={steps}\n          onSave={finalStep}\n          onClose={() => history.goBack()}\n        />\n      </div>\n    </>\n  );\n};\n\ntype CreateBCProps = RouteComponentProps<{ ns?: string; appName?: string }>;\n\nexport default CreateBucketClass;\n","import { K8sResourceKind } from '@console/internal/module/k8s';\n\nexport const initialState = {\n  namespace: 'openshift-storage',\n  bucketClassName: '',\n  description: '',\n  tier1Policy: 'Spread',\n  tier2Policy: '',\n  tier1BackingStore: [],\n  tier2BackingStore: [],\n  backingStores: [],\n  isLoading: false,\n  error: '',\n};\n\nexport type BackingStoreStateType = K8sResourceKind & {\n  id: string;\n  selected: boolean;\n  selectedBy: React.ReactText;\n};\n\nexport type State = {\n  namespace: string;\n  bucketClassName: string;\n  description: string;\n  tier1Policy: string;\n  tier2Policy: string;\n  tier1BackingStore: string[];\n  tier2BackingStore: string[];\n  backingStores: BackingStoreStateType[];\n  isLoading: boolean;\n  error: string;\n};\n\nexport type Action =\n  | { type: 'setNamespace'; name: string }\n  | { type: 'setBucketClassName'; name: string }\n  | { type: 'setDescription'; value: string }\n  | { type: 'setPlacementPolicyTier1'; value: string }\n  | { type: 'setPlacementPolicyTier2'; value: string }\n  | { type: 'setBackingStoreTier1'; value: string[] }\n  | { type: 'setBackingStoreTier2'; value: string[] }\n  | { type: 'setBackingStores'; value: BackingStoreStateType[] }\n  | { type: 'setIsLoading'; value: boolean }\n  | { type: 'setError'; value: string };\n\nexport const reducer = (state: State, action: Action) => {\n  switch (action.type) {\n    case 'setNamespace':\n      return Object.assign({}, state, { namespace: action.name });\n    case 'setBucketClassName':\n      return Object.assign({}, state, { bucketClassName: action.name });\n    case 'setDescription':\n      return Object.assign({}, state, { description: action.value });\n    case 'setPlacementPolicyTier1':\n      return Object.assign({}, state, { tier1Policy: action.value });\n    case 'setPlacementPolicyTier2':\n      return Object.assign({}, state, { tier2Policy: action.value });\n    case 'setBackingStoreTier1':\n      return Object.assign({}, state, { tier1BackingStore: action.value });\n    case 'setBackingStoreTier2':\n      return Object.assign({}, state, { tier2BackingStore: action.value });\n    case 'setBackingStores':\n      return Object.assign({}, state, { backingStores: action.value });\n    case 'setIsLoading':\n      return Object.assign({}, state, { isLoading: action.value });\n    case 'setError':\n      return Object.assign({}, state, { error: action.value });\n    default:\n      return initialState;\n  }\n};\n","import * as classNames from 'classnames';\nimport * as fuzzy from 'fuzzysearch';\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport {\n  Alert,\n  AlertActionCloseButton,\n  Button,\n  Flex,\n  FlexItem,\n  Form,\n  FormGroup,\n  TextInput,\n  Title,\n} from '@patternfly/react-core';\nimport {\n  IRowData,\n  Table,\n  TableBody,\n  TableGridBreakpoint,\n  TableHeader,\n  TableVariant,\n} from '@patternfly/react-table';\nimport {\n  Firehose,\n  FirehoseResult,\n  ResourceLink,\n  ExternalLink,\n} from '@console/internal/components/utils';\nimport { K8sResourceKind, referenceForModel } from '@console/internal/module/k8s';\nimport { NooBaaBackingStoreModel } from '@console/noobaa-storage-plugin/src/models';\nimport { PlusCircleIcon } from '@patternfly/react-icons';\nimport { Action, BackingStoreStateType, State } from '../state';\nimport CreateBackingStoreFormModal from '../../create-backingstore-page/create-bs-modal';\n\nconst tableColumnClasses = [\n  classNames('col-md-4', 'col-sm-4', 'col-xs-6', 'nb-bc-bs-table__data'),\n  classNames('col-md-3', 'col-sm-4', 'col-xs-5', 'nb-bc-bs-table__data'),\n  classNames('col-md-2', 'col-sm-3', 'hidden-xs'),\n  classNames('col-md-2', 'hidden-sm', 'hidden-xs'),\n];\n\nconst nameMap = {\n  'aws-s3': 'awsS3',\n  'azure-blob': 'azureBlob',\n  'google-cloud-storage': 'googleCloudStorage',\n  's3-compatible': 's3Compatible',\n};\n\nconst columns = [\n  {\n    title: 'Name',\n    props: { className: tableColumnClasses[0] },\n  },\n  {\n    title: 'BucketName',\n    props: { className: tableColumnClasses[1] },\n  },\n  {\n    title: 'Type',\n    props: { className: tableColumnClasses[2] },\n  },\n  {\n    title: 'Region',\n    props: { className: tableColumnClasses[3] },\n  },\n];\n\nconst filterSelected = (list: BackingStoreStateType[], tableId: number) => {\n  const sort = (x, y) => x.id.localeCompare(y.id);\n  return list.filter((e) => e.selectedBy === tableId || e.selectedBy === '').sort(sort);\n};\n\nconst getTableRows = (list: K8sResourceKind[]) => {\n  return list.reduce((acc, bs) => {\n    const type: string = nameMap[_.get(bs, 'spec.type')];\n    const obj = {\n      selected: false,\n      id: bs.metadata.name,\n      selectedBy: '',\n      cells: [\n        {\n          title: (\n            <ResourceLink\n              kind={referenceForModel(NooBaaBackingStoreModel)}\n              namespace={bs.metadata.namespace}\n              name={bs.metadata.name}\n              title={bs.metadata.uid}\n            />\n          ),\n        },\n        {\n          title: _.get(bs, ['spec', type, 'targetBucket'], '-'),\n        },\n        {\n          title: type,\n        },\n        {\n          title: _.get(bs, ['spec', type, 'region'], '-'),\n        },\n      ],\n    };\n    return [...acc, obj];\n  }, []);\n};\n\nconst filterSelectedItems = (items: BackingStoreStateType[], tableId: number): string[] =>\n  items.filter((e) => e.selectedBy === tableId).map((e) => e.id);\n\nconst getBsLabel = (policy: string) =>\n  policy === 'Mirror'\n    ? 'Select at least 2 Backing Store resources'\n    : 'Select at least 1 Backing Store resource';\n\nconst BackingStorePage: React.FC<BackingStorePageProps> = React.memo(\n  ({ backingStores, dispatcher, state }) => {\n    // CR data\n    const { data: backingStoreData } = backingStores;\n    // CR data clones to maintain order and selection state for table rows\n    const { backingStores: storeMain, namespace } = state;\n    const { tier2Policy } = state;\n    const showTier2Table = !!tier2Policy;\n    const [searchInput, setSearchInput] = React.useState('');\n    const [searchInput2, setSearchInput2] = React.useState('');\n    const [showHelp, setShowHelp] = React.useState(true);\n\n    const openModal = () => {\n      CreateBackingStoreFormModal({ namespace });\n    };\n\n    const filterSearch = (search: string, list: BackingStoreStateType[]) => {\n      if (!search) return list;\n      return list.filter((elem) => fuzzy(search, elem.id));\n    };\n\n    React.useEffect(() => {\n      const stores = getTableRows(backingStoreData);\n      dispatcher({ type: 'setBackingStores', value: stores });\n      // eslint-disable-next-line\n    }, [JSON.stringify(backingStoreData), dispatcher]);\n\n    const onSelect = (isSelected: boolean, tableId: number, rowData: IRowData) => {\n      const selectedItem = storeMain.find((elem) => elem.id === rowData.id);\n      const store = new Set(storeMain);\n      store.delete(selectedItem);\n      selectedItem.selected = !selectedItem.selected;\n      isSelected ? (selectedItem.selectedBy = tableId) : (selectedItem.selectedBy = '');\n      store.add(selectedItem);\n      dispatcher({ type: 'setBackingStores', value: [...store] });\n      // 0 tier-1 table, 1 tier-2 table\n      const itemsTable1 = filterSelectedItems(storeMain, 0);\n      dispatcher({ type: 'setBackingStoreTier1', value: itemsTable1 });\n      const itemsTable2 = filterSelectedItems(storeMain, 1);\n      dispatcher({ type: 'setBackingStoreTier2', value: itemsTable2 });\n    };\n\n    return (\n      <div className=\"nb-create-bc-step-page\">\n        {showHelp && (\n          <Alert\n            className=\"nb-create-bc-step-page__info\"\n            isInline\n            variant=\"info\"\n            title=\"What is a Backing Store?\"\n            action={<AlertActionCloseButton onClose={() => setShowHelp(false)} />}\n          >\n            <p>\n              Backing Store represents a storage target to be used as the underlying storage for the\n              data in MCG buckets.\n            </p>\n            <p>\n              Multiple types of backing-stores are supported: asws-s3, s3-compatible,\n              google-cloud-storage, azure-blob, obc, PVC.\n            </p>\n            <ExternalLink\n              href=\"https://github.com/noobaa/noobaa-operator/blob/master/doc/backing-store-crd.md\"\n              text=\"Learn More\"\n            />\n          </Alert>\n        )}\n        <Form className=\"nb-bc-step-page-form\">\n          <Title headingLevel=\"h3\" size=\"xl\" className=\"nb-bc-step-page-form__title\">\n            <Flex breakpointMods={[{ modifier: 'justify-content-space-between' }] as any}>\n              <FlexItem>Tier 1 - Backing Store ({state.tier1Policy})</FlexItem>\n              <FlexItem>\n                <Button\n                  variant=\"link\"\n                  onClick={openModal}\n                  className=\"nb-bc-step-page-form__modal-launcher\"\n                >\n                  <PlusCircleIcon /> Create Backing Store\n                </Button>\n              </FlexItem>\n            </Flex>\n          </Title>\n\n          <FormGroup\n            className=\"nb-bc-step-page-form__element\"\n            fieldId=\"bs-1\"\n            label={getBsLabel(state.tier1Policy)}\n            isRequired\n          >\n            <TextInput\n              className=\"nb-bc-step-page-form__element--short\"\n              placeholder=\"Search Backing Store\"\n              onChange={setSearchInput}\n              value={searchInput}\n              type=\"text\"\n              aria-label=\"Search Backing Store\"\n            />\n          </FormGroup>\n          <Table\n            onSelect={(event, isSelected, index, rowData) => onSelect(isSelected, 0, rowData)}\n            cells={columns}\n            rows={filterSearch(searchInput, filterSelected(storeMain, 0))}\n            variant={TableVariant.compact}\n            gridBreakPoint={TableGridBreakpoint.none}\n            aria-label=\"Select Backing Store for Tier 1\"\n            className=\"nb-bc-bs-page__table--short\"\n            canSelectAll={false}\n          >\n            <TableHeader />\n            <TableBody />\n          </Table>\n          <p className=\"nb-create-bc-step-page-form__element--light-text\">\n            {state.tier1BackingStore.length} resources selected\n          </p>\n        </Form>\n        {showTier2Table && (\n          <Form className=\"nb-bc-step-page-form\">\n            <Title headingLevel=\"h3\" size=\"xl\">\n              Tier 2 - Backing Store ({state.tier2Policy}){' '}\n            </Title>\n            <FormGroup\n              className=\"nb-bc-step-page-form__element\"\n              fieldId=\"bs-1\"\n              label={getBsLabel(state.tier2Policy)}\n              isRequired\n            >\n              <TextInput\n                className=\"nb-bc-step-page-form__element--short\"\n                placeholder=\"Search Backing Store\"\n                onChange={(v) => setSearchInput2(v)}\n                value={searchInput2}\n                type=\"text\"\n                aria-label=\"Search Backing Store\"\n              />\n            </FormGroup>\n            <Table\n              aria-label=\"Select Backing Store for Tier 2\"\n              onSelect={(event, isSelected, index, rowData) => onSelect(isSelected, 1, rowData)}\n              cells={columns}\n              rows={filterSearch(searchInput2, filterSelected(storeMain, 1))}\n              variant={TableVariant.compact}\n              gridBreakPoint={TableGridBreakpoint.none}\n              className=\"nb-bc-bs-page__table--short\"\n              canSelectAll={false}\n            >\n              <TableHeader />\n              <TableBody />\n            </Table>\n            <p className=\"nb-create-bc-step-page-form__element--light-text\">\n              {state.tier2BackingStore.length} resources selected\n            </p>\n          </Form>\n        )}\n      </div>\n    );\n  },\n);\nconst BackingStorePageWithFirehose: React.FC<BackingStorePageWithFirehoseProps> = (props) => {\n  const resource = [\n    {\n      kind: referenceForModel(NooBaaBackingStoreModel),\n      namespace: props.state.namespace,\n      prop: 'backingStores',\n      isList: true,\n    },\n  ];\n  return (\n    <Firehose resources={resource}>\n      <BackingStorePage {...props} />\n    </Firehose>\n  );\n};\n\nexport default BackingStorePageWithFirehose;\n\ntype BackingStorePageProps = {\n  backingStores?: FirehoseResult<K8sResourceKind[]>;\n  dispatcher: React.Dispatch<Action>;\n  state: State;\n};\n\ntype BackingStorePageWithFirehoseProps = {\n  dispatcher: React.Dispatch<Action>;\n  state: State;\n};\n","import * as React from 'react';\nimport {\n  Alert,\n  AlertActionCloseButton,\n  Form,\n  FormGroup,\n  TextArea,\n  TextInput,\n} from '@patternfly/react-core';\nimport { ExternalLink } from '@console/internal/components/utils';\nimport { Action, State } from '../state';\n\nconst GeneralPage: React.FC<GeneralPageProps> = ({ dispatch, state }) => {\n  const [showHelp, setShowHelp] = React.useState(true);\n\n  const onChange = (value: string) => {\n    dispatch({ type: 'setBucketClassName', name: value });\n  };\n\n  return (\n    <div className=\"nb-create-bc-step-page\">\n      {showHelp && (\n        <Alert\n          isInline\n          variant=\"info\"\n          title=\"What is a Bucket Class?\"\n          className=\"nb-create-bc-step-page__info\"\n          action={<AlertActionCloseButton onClose={() => setShowHelp(false)} />}\n        >\n          <p>An MCG Bucket&apos;s data location is determined by a policy called a Bucket Class</p>\n          <ExternalLink\n            href=\"https://github.com/noobaa/noobaa-operator/blob/master/doc/bucket-class-crd.md\"\n            text=\"Learn More\"\n          />\n        </Alert>\n      )}\n      <Form className=\"nb-create-bc-step-page-form\">\n        <FormGroup\n          isRequired\n          className=\"nb-create-bc-step-page-form__element\"\n          fieldId=\"bucketclassname-input\"\n          label=\"Bucket Class Name\"\n          helperText=\"A unique name for the Bucket Class within the project.\"\n        >\n          <TextInput\n            placeholder=\"my-multi-cloud-mirror\"\n            type=\"text\"\n            value={state.bucketClassName}\n            onChange={onChange}\n            aria-label=\"Bucket Class Name\"\n          />\n        </FormGroup>\n        <FormGroup\n          className=\"nb-create-bc-step-page-form__element\"\n          fieldId=\"bc-description\"\n          label=\"Description(Optional)\"\n        >\n          <TextArea\n            value={state.description}\n            onChange={(data) => dispatch({ type: 'setDescription', value: data })}\n            aria-label=\"Description of bucket class\"\n          />\n        </FormGroup>\n      </Form>\n    </div>\n  );\n};\n\nexport default GeneralPage;\n\ntype GeneralPageProps = {\n  dispatch: React.Dispatch<Action>;\n  state: State;\n};\n","import * as React from 'react';\nimport { Alert, AlertActionCloseButton, Button, Radio, Title, Form } from '@patternfly/react-core';\nimport { MinusCircleIcon, PlusCircleIcon } from '@patternfly/react-icons';\nimport { Action, State } from '../state';\n\nconst PlacementPolicyPage: React.FC<PlacementPolicyPageProps> = ({ dispatch, state }) => {\n  const { tier1Policy, tier2Policy } = state;\n  const [showHelp, setShowHelp] = React.useState(true);\n  const showTier2 = !!tier2Policy;\n\n  const onChange = (checked: boolean, event) => {\n    const { name, value } = event.target;\n    if (name === 'placement-policy-1') {\n      dispatch({ type: 'setPlacementPolicyTier1', value });\n    } else if (name === 'placement-policy-2') {\n      dispatch({ type: 'setPlacementPolicyTier2', value });\n    }\n  };\n  return (\n    <div className=\"nb-create-bc-step-page\">\n      {showHelp && (\n        <Alert\n          isInline\n          variant=\"info\"\n          title=\"What is a Placement Policy?\"\n          className=\"nb-create-bc-step-page__info\"\n          action={<AlertActionCloseButton onClose={() => setShowHelp(false)} />}\n        >\n          <p>\n            Data placement capabilities are built as a multi-layer structure, here are the layers\n            bottom-up:\n          </p>\n          <ul>\n            <li>\n              Spread Tier - list of backing-stores, aggregates the storage of multiple stores.\n            </li>\n            <li>\n              Mirroring Tier - list of spread-layers, async-mirroring to all mirrors, with locality\n              optimization (will allocate on the closest region to the source endpoint), mirroring\n              requires at least two backing-stores.\n            </li>\n          </ul>\n          The number of replicas can be configured via the NooBaa management console.\n        </Alert>\n      )}\n      <Form className=\"nb-create-bc-step-page-form\">\n        <Title size=\"xl\" headingLevel=\"h2\" className=\"nb-bc-step-page-form__title\">\n          Tier 1 - Policy Type\n        </Title>\n        <Radio\n          value=\"Spread\"\n          isChecked={tier1Policy === 'Spread'}\n          onChange={onChange}\n          id=\"radio-1\"\n          label=\"Spread\"\n          name=\"placement-policy-1\"\n        />\n        <p className=\"nb-create-bc-step-page-form__element--light-text\">\n          Spreading the data across the chosen resources. By default, a replica of one copy is used\n          and does not include failure tolerance in case of resource failure.\n        </p>\n        <Radio\n          value=\"Mirror\"\n          isChecked={tier1Policy === 'Mirror'}\n          onChange={onChange}\n          id=\"radio-2\"\n          label=\"Mirror\"\n          name=\"placement-policy-1\"\n        />\n        <p className=\"nb-create-bc-step-page-form__element--light-text\">\n          {' '}\n          Full duplication of the data in each chosen resource, By default, a replica of one copy\n          per location is used. includes failure tolerance in case of resource failure.\n        </p>\n      </Form>\n      {!showTier2 && (\n        <Button\n          variant=\"link\"\n          icon={<PlusCircleIcon />}\n          onClick={() => dispatch({ type: 'setPlacementPolicyTier2', value: 'Spread' })}\n          isInline\n          data-testid=\"add-tier-btn\"\n        >\n          Add Tier\n        </Button>\n      )}\n      {showTier2 && (\n        <Form className=\"nb-create-bc-step-page-form\">\n          <Title headingLevel=\"h2\" size=\"xl\" className=\"nb-bc-step-page-form__title\">\n            Tier 2 - Policy type{' '}\n            <Button\n              variant=\"link\"\n              icon={<MinusCircleIcon />}\n              onClick={() => dispatch({ type: 'setPlacementPolicyTier2', value: '' })}\n              isInline\n            >\n              Remove Tier\n            </Button>\n          </Title>\n          <Radio\n            value=\"Spread\"\n            isChecked={tier2Policy === 'Spread'}\n            onChange={onChange}\n            id=\"radio-3\"\n            label=\"Spread\"\n            name=\"placement-policy-2\"\n          />\n          <p className=\"nb-create-bc-step-page-form__element--light-text\">\n            Spreading the data across the chosen resources does not includes failure tolerance in\n            case of resource failure.\n          </p>\n          <Radio\n            value=\"Mirror\"\n            isChecked={tier2Policy === 'Mirror'}\n            onChange={onChange}\n            id=\"radio-4\"\n            label=\"Mirror\"\n            name=\"placement-policy-2\"\n          />\n          <p className=\"nb-create-bc-step-page-form__element--light-text\">\n            {' '}\n            Full duplication of the data in each chosen resource, includes failure tolerance in\n            cause of resource failure.\n          </p>\n        </Form>\n      )}\n    </div>\n  );\n};\n\nexport default PlacementPolicyPage;\n\ntype PlacementPolicyPageProps = {\n  dispatch: React.Dispatch<Action>;\n  state: State;\n};\n","import * as React from 'react';\nimport { Alert, Title } from '@patternfly/react-core';\nimport { LoadingInline } from '@console/internal/components/utils';\nimport { State } from '../state';\n\nconst ReviewPage: React.FC<ReviewPageProps> = ({ state }) => {\n  const {\n    bucketClassName,\n    description,\n    tier1BackingStore,\n    tier2BackingStore,\n    tier1Policy,\n    tier2Policy,\n  } = state;\n  const { error, isLoading } = state;\n  return (\n    <div className=\"nb-create-bc-step-page\">\n      <Title size=\"xl\" headingLevel=\"h2\">\n        Review and confirm Bucket Class settings\n      </Title>\n      <div className=\"nb-create-bc-step-page-review__item\">\n        <Title size=\"lg\" headingLevel=\"h4\" className=\"nb-create-bc-step-page-review__item-header\">\n          Bucket Class name\n        </Title>\n        <p data-testid=\"bc-name\">{bucketClassName}</p>\n      </div>\n      {description && (\n        <div className=\"nb-create-bc-step-page-review__item\">\n          <Title size=\"lg\" headingLevel=\"h4\" className=\"nb-create-bc-step-page-review__item-header\">\n            Description\n          </Title>\n          <p data-testid=\"bc-desc\">{description}</p>\n        </div>\n      )}\n      <div className=\"nb-create-bc-step-page-review__item\">\n        <Title size=\"lg\" headingLevel=\"h4\" className=\"nb-create-bc-step-page-review__item-header\">\n          Placement Policy Details\n        </Title>\n        <div className=\"co-nobaa-create-bc-step-page-review__item-tier1\">\n          <Title size=\"md\" headingLevel=\"h5\" data-testid=\"tier1-policy\">\n            Tier 1: {tier1Policy}\n          </Title>\n          <p data-testid=\"tier1-stores\">Selected Backing Store: {tier1BackingStore.join(', ')}</p>\n        </div>\n        {tier2Policy && (\n          <>\n            <Title size=\"md\" headingLevel=\"h5\" data-testid=\"tier2-policy\">\n              Tier 2: {tier2Policy}\n            </Title>\n            <p data-testid=\"tier2-stores\">Selected Backing Store: {tier2BackingStore.join(', ')}</p>\n          </>\n        )}\n      </div>\n      {isLoading && <LoadingInline />}\n      {!!error && (\n        <Alert variant=\"danger\" title=\"Error\" isInline>\n          {error}\n        </Alert>\n      )}\n    </div>\n  );\n};\n\nexport default ReviewPage;\n\ntype ReviewPageProps = {\n  state: State;\n};\n","import * as React from 'react';\nimport {\n  createModalLauncher,\n  ModalComponentProps,\n  ModalBody,\n  ModalTitle,\n} from '@console/internal/components/factory';\nimport CreateBackingStoreForm from './create-bs';\nimport './create-bs.scss';\n\nconst CreateBackingStoreFormModal: React.FC<CreateBackingStoreFormModal> = (props) => {\n  return (\n    <div className=\"nb-create-bs__modal\">\n      <ModalTitle>Create new Backing Store</ModalTitle>\n      <ModalBody>\n        <p>\n          Backing Store represents a storage target to be used as the underlying storage for the\n          data in MCG buckets.\n        </p>\n        <CreateBackingStoreForm {...props} />\n      </ModalBody>\n    </div>\n  );\n};\n\ntype CreateBackingStoreFormModal = ModalComponentProps & {\n  namespace?: string;\n};\n\nexport default createModalLauncher(CreateBackingStoreFormModal);\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { Title } from '@patternfly/react-core';\nimport { ExternalLink, LabelList } from '@console/internal/components/utils';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { usePrometheusPoll } from '@console/internal/components/graphs/prometheus-poll-hook';\nimport { PrometheusEndpoint } from '@console/internal/components/graphs/helpers';\nimport { NooBaaSystemModel } from '../../models';\nimport './infoPage.scss';\nimport { getMetric } from '../../utils';\n\nconst FAQ_TEXT_1 = 'How can I access the object service?';\nconst FAQ_LINK_1 =\n  'https://access.redhat.com/documentation/en-us/red_hat_openshift_container_storage/4.2/html-single/managing_openshift_container_storage/index#accessing-the-multi-cloud-object-gateway-with-your-applications_rhocs';\nconst FAQ_TEXT_2 = 'How can I provide the object service to a developer?';\nconst FAQ_LINK_2 =\n  'https://access.redhat.com/documentation/en-us/red_hat_openshift_container_storage/4.2/html-single/managing_openshift_container_storage/index#adding-storage-resources-for-hybrid-or-multi-cloud';\nconst FAQ_TEXT_3 = 'How can I provide the object service to DevOps?';\nconst FAQ_LINK_3 =\n  'https://access.redhat.com/documentation/en-us/red_hat_openshift_container_storage/4.2/html-single/managing_openshift_container_storage/index#creating-an-object-bucket-claim-using-the-command-line-interface_rhocs';\nconst FAQ_TEXT_4 = 'How can I mirror data for hybrid and multi-cloud buckets?';\nconst FAQ_LINK_4 =\n  'https://access.redhat.com/documentation/en-us/red_hat_openshift_container_storage/4.2/html-single/managing_openshift_container_storage/index#mirroring-data-for-hybrid-and-multi-cloud-buckets';\n\nconst getVersion = (obj: K8sResourceKind): string => {\n  const { image } = obj.spec;\n  const version = image.split(':')[1];\n  return version;\n};\n\nconst NOOBAA_DASHBOARD_LINK_QUERY = 'NooBaa_system_links';\n\nconst InfoPage: React.FC<InfoPageProps> = ({ obj }) => {\n  const [response] = usePrometheusPoll({\n    query: NOOBAA_DASHBOARD_LINK_QUERY,\n    endpoint: PrometheusEndpoint.QUERY,\n  });\n\n  const systemLink = getMetric(response, 'dashboard');\n  const analyticsLink = `${systemLink}/analytics`;\n  const bucketsLink = `${systemLink}/buckets`;\n\n  return (\n    <div className=\"nb-data-section\">\n      <div className=\"nb-data-section__left\">\n        <dl>\n          <dt>Name</dt>\n          <dd>{obj.metadata.name}</dd>\n          <dt>Labels</dt>\n          <dd>\n            <LabelList kind={NooBaaSystemModel.kind} labels={obj.metadata.labels} />\n          </dd>\n          <dt>Version</dt>\n          <dd>{getVersion(obj)}</dd>\n          <dt>Links</dt>\n          <dd>\n            <Link className=\"nb-data-section__left--block\" to=\"/dashboards/object-service\">\n              Service Status\n            </Link>\n            <ExternalLink\n              additionalClassName=\"nb-data-section__left--block\"\n              href={bucketsLink}\n              text=\"Buckets List\"\n            />\n            <ExternalLink\n              additionalClassName=\"nb-data-section__left--block\"\n              href={analyticsLink}\n              text=\"Analytics\"\n            />\n          </dd>\n          <dt>Maintainers</dt>\n          <dd>Red Hat. Inc.</dd>\n        </dl>\n      </div>\n      <div className=\"nb-data-section__right\">\n        <div className=\"nb-data-section__right-entry\">\n          <Title size=\"xl\">Description</Title>\n          <p className=\"nb-data-section__right-entry--faded\">\n            Multi Cloud Gateway is a data platform for object data federation across private and\n            public clouds.\n          </p>\n        </div>\n        <div className=\"nb-data-section__right-entry\">\n          <Title size=\"xl\">FAQ</Title>\n          <ul className=\"nb-data-section__right-faq\">\n            <li>\n              <ExternalLink href={FAQ_LINK_1} text={FAQ_TEXT_1} />\n            </li>\n            <li>\n              <ExternalLink href={FAQ_LINK_2} text={FAQ_TEXT_2} />\n            </li>\n            <li>\n              <ExternalLink href={FAQ_LINK_3} text={FAQ_TEXT_3} />\n            </li>\n            <li>\n              <ExternalLink href={FAQ_LINK_4} text={FAQ_TEXT_4} />\n            </li>\n          </ul>\n        </div>\n      </div>\n    </div>\n  );\n};\n\ntype InfoPageProps = {\n  obj: K8sResourceKind;\n};\n\nexport default InfoPage;\n","import * as React from 'react';\nimport { match } from 'react-router';\nimport * as _ from 'lodash';\nimport {\n  Firehose,\n  FirehoseResult,\n  HorizontalNav,\n  PageHeading,\n  FirehoseResource,\n  resourcePathFromModel,\n  BreadCrumbs,\n} from '@console/internal/components/utils';\nimport { referenceForModel, k8sGet } from '@console/internal/module/k8s';\nimport { EditYAML } from '@console/internal/components/edit-yaml';\nimport { ClusterServiceVersionModel } from '@console/operator-lifecycle-manager';\nimport { NooBaaSystemModel } from '../../models';\nimport InfoPage from './infoPage';\nimport MCGResourceList from './resourceTable';\n\nconst getFireHoseResources = (namespace: string): FirehoseResource[] => {\n  const system = {\n    kind: referenceForModel(NooBaaSystemModel),\n    namespace,\n    prop: 'obj',\n    isList: false,\n    name: 'noobaa',\n  };\n  return [system];\n};\n\nconst pages = [\n  {\n    href: '',\n    name: 'Details Page',\n    component: InfoPage,\n  },\n  {\n    href: 'yaml',\n    name: 'YAML',\n    component: EditYAML,\n  },\n  {\n    href: 'resources',\n    path: 'resources',\n    name: 'Resources',\n    component: MCGResourceList,\n  },\n];\n\nconst NooBaaPage: React.FC<NooBaaPageProps> = (props) => {\n  const { ns: namespace, appName } = props.match.params;\n  const resources = getFireHoseResources(namespace);\n  const [clusterServiceVersion, setClusterServiceVersion] = React.useState(null);\n\n  React.useEffect(() => {\n    k8sGet(ClusterServiceVersionModel, appName, namespace)\n      .then((clusterServiceVersionObj) => {\n        setClusterServiceVersion(clusterServiceVersionObj);\n      })\n      .catch(() => setClusterServiceVersion(null));\n  }, [appName, namespace]);\n\n  return (\n    <>\n      <div className=\"co-create-operand__header\">\n        <div className=\"co-create-operand__header-buttons\">\n          <BreadCrumbs\n            breadcrumbs={[\n              {\n                name: _.get(\n                  clusterServiceVersion,\n                  'spec.displayName',\n                  'Openshift Container Storage Operator',\n                ),\n                path: resourcePathFromModel(ClusterServiceVersionModel, appName, namespace),\n              },\n              { name: 'Multi Cloud Gateway', path: props.match.url },\n            ]}\n          />\n        </div>\n        <Firehose resources={resources}>\n          <PageHeading title=\"Multi Cloud Gateway\" kind={referenceForModel(NooBaaSystemModel)} />\n        </Firehose>\n      </div>\n      <Firehose resources={resources}>\n        <HorizontalNav pages={pages} match={props.match} customData={{ namespace }} />\n      </Firehose>\n    </>\n  );\n};\n\ntype NooBaaPageProps = {\n  match: match<{ ns: string; appName: string }>;\n  obj?: FirehoseResult;\n};\n\nexport default NooBaaPage;\n","import * as classNames from 'classnames';\nimport * as _ from 'lodash';\nimport * as React from 'react';\nimport { match } from 'react-router';\nimport {\n  Kebab,\n  ResourceKebab,\n  ResourceLink,\n  FirehoseResult,\n} from '@console/internal/components/utils';\nimport { K8sResourceKind, referenceForModel } from '@console/internal/module/k8s';\nimport {\n  MultiListPage,\n  Table,\n  TableData,\n  TableRow,\n  TableProps,\n  RowFunction,\n} from '@console/internal/components/factory';\nimport { sortable } from '@patternfly/react-table';\nimport { RowFilter } from '@console/internal/components/filter-toolbar';\nimport { NooBaaBackingStoreModel, NooBaaBucketClassModel } from '../../models';\n\nconst kindsFilterMap = Object.freeze({\n  BackingStore: {\n    title: NooBaaBackingStoreModel.label,\n    kind: [NooBaaBackingStoreModel.kind],\n  },\n  BucketClass: {\n    title: NooBaaBucketClassModel.label,\n    kind: [NooBaaBucketClassModel.kind],\n  },\n});\n\nconst resourceTableFilter: RowFilter = {\n  filterGroupName: 'Type',\n  type: 'noobaa-resources-type',\n  reducer: (r) => r.kind,\n  items: _.map(kindsFilterMap, ({ title }, id) => ({ id, title })),\n  filter: (groups, resource) => {\n    const { kind } = resource;\n    return groups.selected.has(kind) || !_.includes(groups.all, kind) || _.isEmpty(groups.selected);\n  },\n};\n\nconst tableColumnClasses = [\n  classNames('col-lg-3', 'col-md-2', 'col-sm-4', 'col-xs-6'),\n  classNames('col-lg-2', 'col-md-2', 'col-sm-4', 'col-xs-6'),\n  classNames('col-lg-2', 'col-md-2', 'col-sm-4', 'hidden-xs'),\n  classNames('col-lg-2', 'col-md-3', 'hidden-sm', 'hidden-xs'),\n  classNames('col-lg-3', 'col-md-3', 'hidden-sm', 'hidden-xs'),\n  Kebab.columnClass,\n];\n\nconst ResourceTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Type',\n      sortField: 'kind',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Status',\n      sortField: 'status.phase',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: 'Created',\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[5] },\n    },\n  ];\n};\nResourceTableHeader.displayName = 'ResourceTableHeader';\n\nconst getModelFromKind = (name: string) =>\n  name === 'BucketClass' ? NooBaaBucketClassModel : NooBaaBackingStoreModel;\n\nconst ResourceTableRow: RowFunction<K8sResourceKind> = ({ obj, index, key, style }) => {\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={referenceForModel(getModelFromKind(obj.kind))}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n          title={obj.metadata.uid}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[1]}>\n        <ResourceLink kind={referenceForModel(getModelFromKind(obj.kind))} name={obj.kind} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>{obj.status.phase}</TableData>\n      <TableData className={classNames(tableColumnClasses[3], 'co-break-word')}>\n        <ResourceLink\n          kind=\"Namespace\"\n          name={obj.metadata.namespace}\n          title={obj.metadata.namespace}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>{obj.metadata.creationTimestamp}</TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <ResourceKebab\n          actions={Kebab.factory.common}\n          kind={referenceForModel(getModelFromKind(obj.kind))}\n          resource={obj}\n        />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst getFireHoseResources = (namespace: string) => {\n  const backingStore = {\n    kind: referenceForModel(NooBaaBackingStoreModel),\n    namespace,\n    namespaced: true,\n    prop: 'bs',\n    isList: true,\n  };\n  const bucketClass = {\n    kind: referenceForModel(NooBaaBucketClassModel),\n    namespaced: true,\n    namespace,\n    prop: 'bc',\n    isList: true,\n  };\n  return [backingStore, bucketClass];\n};\n\nconst ListComponent: React.FC<TableProps> = (props) => (\n  <Table\n    {...props}\n    aria-label=\"NooBaa Resources\"\n    Header={ResourceTableHeader}\n    Row={ResourceTableRow}\n    virtualize\n  />\n);\n\nconst flattenResources = (resources: Resource) => {\n  const { bc, bs } = resources;\n  const loaded = _.every(resources, (resource) => resource.loaded && _.isEmpty(resource.loadError));\n  if (!loaded) return [];\n  const bcData = !_.isEmpty(bc) ? bc.data : [];\n  const bsData = !_.isEmpty(bs) ? bs.data : [];\n  const data = bcData.concat(bsData);\n  return data;\n};\n\nconst getOperatorPathFromMatch = (matchObj: match) => {\n  const { url } = matchObj;\n  const parts = url.split('/');\n  return parts.slice(0, -2).join('/');\n};\n\nconst MCGResourceList: React.FC<MCGResourceListProps> = (props) => {\n  const {\n    customData: { namespace },\n    match: matchObj,\n  } = props;\n\n  const operatorPath = getOperatorPathFromMatch(matchObj);\n\n  const createItems = {\n    [NooBaaBackingStoreModel.label]: NooBaaBackingStoreModel.label,\n    [NooBaaBucketClassModel.label]: NooBaaBucketClassModel.label,\n  };\n\n  const createItemsMap = {\n    [createItems[NooBaaBackingStoreModel.label]]: referenceForModel(NooBaaBackingStoreModel),\n    [createItems[NooBaaBucketClassModel.label]]: referenceForModel(NooBaaBucketClassModel),\n  };\n\n  const createProps = {\n    items: createItems,\n    createLink: (type: string) => `${operatorPath}/${createItemsMap[type]}/~new`,\n  };\n\n  return (\n    <MultiListPage\n      {...props}\n      rowFilters={[resourceTableFilter]}\n      ListComponent={ListComponent}\n      resources={getFireHoseResources(namespace)}\n      flatten={flattenResources}\n      createButtonText=\"Create New\"\n      canCreate\n      createProps={createProps}\n    />\n  );\n};\n\ntype MCGResourceListProps = {\n  match: match;\n  customData: {\n    namespace: string;\n  };\n};\n\ntype Resource = {\n  [key: string]: FirehoseResult<K8sResourceKind[]>;\n};\n\nexport default MCGResourceList;\n","import * as _ from 'lodash';\nimport { Alert } from '@console/internal/components/monitoring';\nimport { PrometheusResponse } from '@console/internal/components/graphs';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { StorageClass } from '@console/internal/components/storage-class-form';\n\nexport const filterNooBaaAlerts = (alerts: Alert[]): Alert[] =>\n  alerts.filter((alert) => _.get(alert, 'annotations.storage_type') === 'NooBaa');\n\nexport const getGaugeValue = (data) => _.get(data, 'data.result[0].value[1]');\n\nexport const getMetric = (result: PrometheusResponse, metric: string): string =>\n  _.get(result, ['data', 'result', '0', 'metric', metric], null);\n\nexport type PrometheusMetricResult = {\n  metric: { [key: string]: any };\n  value?: [number, string | number];\n};\n\nexport const getPhase = (obj: K8sResourceKind): string => {\n  return _.get(obj, 'status.phase', 'Lost');\n};\n\nexport const isBound = (obj: K8sResourceKind): boolean => getPhase(obj) === 'Bound';\n\nexport const getSCProvisioner = (obj: StorageClass) => obj.provisioner;\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AAGA;AACA;AAGA;AAMA;AACA;AAaA;AAIA;;;;;;;;;;;;;AC1KA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAiCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACvEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAWA;AAQA;AAMA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAQA;AAIA;AAIA;AAMA;AACA;AACA;AACA;;AAAA;AAAA;AACA;AACA;AAKA;AACA;AAKA;AAMA;AASA;AAUA;AACA;AAEA;AACA;AACA;AAEA;AAEA;;AACA;;AAAA;AAEA;AAMA;AASA;AAUA;AACA;AAEA;AACA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;;;;;;;;;;;;;AC9RA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AAGA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAQA;AACA;AAMA;AACA;AAOA;AAQA;AAKA;AASA;AAEA;;;;;;;;;;;;;ACpEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAQA;AAIA;AACA;AAGA;AAOA;AAEA;AACA;AAGA;AAQA;AAIA;AAQA;AACA;AAGA;AAEA;AAWA;AAEA;;AACA;AACA;AASA;AAQA;AAIA;AAQA;AACA;AAGA;AAKA;AAEA;;;;;;;;;;;;;AClIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAGA;AACA;AAQA;AACA;AAEA;AAGA;AACA;AAGA;AAEA;AAEA;AAGA;AAGA;AACA;AAGA;AACA;;AACA;AAEA;;AAAA;AAEA;AAEA;;AACA;AAEA;;AAAA;AAIA;AACA;AAOA;AAEA;;;;;;;;;;;;;AC/DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAMA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AAIA;AAMA;;;;;;;;;;;;AC7BA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAKA;AAMA;AACA;AAGA;AACA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAOA;AAMA;;;;;;;;;;;;;AC5GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AAIA;AAOA;;;;;;;;;;;;;AChGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAMA;AACA;AAQA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AAOA;AACA;AAEA;AACA;AACA;AAMA;AACA;AACA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAYA;AAaA;;;;;;;;;;;;;AC/NA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAGA;AAEA;AAQA;AACA;AACA;AAEA;AAEA;;;;;A","sourceRoot":""}