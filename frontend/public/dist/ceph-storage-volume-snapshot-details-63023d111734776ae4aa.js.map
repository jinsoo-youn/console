{"version":3,"file":"ceph-storage-volume-snapshot-details-63023d111734776ae4aa.js","sources":["webpack:///./packages/ceph-storage-plugin/src/components/modals/volume-snapshot-modal/_volume-snapshot-modal.scss?6f90","webpack:///./packages/ceph-storage-plugin/src/components/modals/volume-snapshot-modal/volume-snapshot-modal.tsx","webpack:///./packages/ceph-storage-plugin/src/components/volume-snapshot/_volume-snapshot.scss?63d0","webpack:///./packages/ceph-storage-plugin/src/components/volume-snapshot/volume-snapshot.tsx","webpack:///./packages/ceph-storage-plugin/src/utils/clone-workflow.ts","webpack:///./packages/ceph-storage-plugin/src/utils/delete-snapshot-workflow.ts","webpack:///./packages/ceph-storage-plugin/src/utils/kebab-actions.ts","webpack:///./packages/ceph-storage-plugin/src/utils/restore-pvc-workflow.ts","webpack:///./packages/ceph-storage-plugin/src/utils/snapshot-workflow.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin","import * as React from 'react';\n\nimport {\n  Dropdown,\n  Firehose,\n  FirehoseResourcesResult,\n  HandlePromiseProps,\n  withHandlePromise,\n} from '@console/internal/components/utils';\nimport { Form, FormGroup, TextInput } from '@patternfly/react-core';\nimport { getName, getNamespace } from '@console/shared';\nimport { K8sResourceKind, k8sCreate } from '@console/internal/module/k8s';\nimport {\n  ModalBody,\n  ModalComponentProps,\n  ModalSubmitFooter,\n  ModalTitle,\n  createModalLauncher,\n} from '@console/internal/components/factory';\nimport { PersistentVolumeClaimModel } from '@console/internal/models';\nimport { VolumeSnapshotModel } from '../../../models';\n\nimport './_volume-snapshot-modal.scss';\n\nexport type VolumeSnapshotModalProps = {\n  pvcData?: FirehoseResourcesResult;\n} & HandlePromiseProps &\n  ModalComponentProps;\n\nexport const snapshotTypes = {\n  Single: 'Single',\n};\n\nexport const VolumeSnapshotModal = withHandlePromise((props: VolumeSnapshotModalProps) => {\n  const { close, cancel, pvcData, errorMessage, inProgress, handlePromise } = props;\n  const resource = pvcData.data as K8sResourceKind;\n  const [snapshotName, setSnapshotName] = React.useState<string>(\n    `${getName(resource) || 'pvc'}-snapshot`,\n  );\n  const [scheduleType, setScheduleType] = React.useState(snapshotTypes.Single);\n\n  const submit = (event: React.FormEvent<EventTarget>) => {\n    event.preventDefault();\n    const ns = getNamespace(resource);\n    const pvcName = getName(resource);\n    const snapshotTemplate: K8sResourceKind = {\n      apiVersion: VolumeSnapshotModel.apiVersion,\n      kind: VolumeSnapshotModel.kind,\n      metadata: {\n        name: snapshotName,\n        namespace: ns,\n      },\n      spec: {\n        source: {\n          persistentVolumeClaimName: pvcName,\n        },\n      },\n    };\n    handlePromise(k8sCreate(VolumeSnapshotModel, snapshotTemplate)).then(close); // eslint-disable-line promise/catch-or-return\n  };\n\n  return (\n    <Form onSubmit={submit} name=\"form\">\n      <div className=\"modal-content modal-content--no-inner-scroll\">\n        <ModalTitle>Create Snapshot</ModalTitle>\n        <ModalBody>\n          <p>Creating snapshot for {getName(resource)}</p>\n          <FormGroup\n            className=\"ceph-volume-snapshot-modal__input\"\n            label=\"Name\"\n            isRequired\n            fieldId=\"snapshot-name\"\n          >\n            <TextInput\n              type=\"text\"\n              name=\"snapshot-name\"\n              value={snapshotName}\n              onChange={setSnapshotName}\n              aria-labelledby=\"snapshot-name\"\n            />\n          </FormGroup>\n          <FormGroup\n            className=\"ceph-volume-snapshot-modal__input\"\n            label=\"Schedule\"\n            fieldId=\"snapshot-type\"\n          >\n            <Dropdown\n              dropDownClassName=\"dropdown--full-width\"\n              items={snapshotTypes}\n              selectedKey={scheduleType}\n              onChange={(value) => setScheduleType(snapshotTypes[value])}\n            />\n          </FormGroup>\n        </ModalBody>\n        <ModalSubmitFooter\n          inProgress={inProgress}\n          errorMessage={errorMessage}\n          submitText=\"Create\"\n          cancel={cancel}\n        />\n      </div>\n    </Form>\n  );\n});\n\ntype VolumeSnapshotModalWithFireHoseProps = {\n  resource: K8sResourceKind;\n} & ModalComponentProps;\n\nexport const VolumeSnapshotModalWithFireHose: React.FC<VolumeSnapshotModalWithFireHoseProps> = ({\n  resource,\n  ...rest\n}) => (\n  <Firehose\n    resources={[\n      {\n        kind: resource?.kind || PersistentVolumeClaimModel.kind,\n        prop: 'pvcData',\n        namespace: resource?.metadata?.namespace,\n        isList: false,\n        name: resource?.metadata?.name,\n      },\n    ]}\n  >\n    <VolumeSnapshotModal {...rest} />\n  </Firehose>\n);\n\nexport const volumeSnapshotModal = createModalLauncher(VolumeSnapshotModalWithFireHose);\n","// extracted by mini-css-extract-plugin","import './_volume-snapshot.scss';\n\nimport * as React from 'react';\nimport * as classNames from 'classnames';\n\nimport {\n  DetailsPage,\n  ListPage,\n  Table,\n  TableData,\n  TableProps,\n  TableRow,\n  RowFunction,\n} from '@console/internal/components/factory';\nimport { K8sResourceKind, referenceFor } from '@console/internal/module/k8s';\nimport {\n  Kebab,\n  ResourceKebab,\n  ResourceLink,\n  ResourceSummary,\n  SectionHeading,\n  navFactory,\n  PageComponentProps,\n  Timestamp,\n} from '@console/internal/components/utils';\nimport { getName, getNamespace, Status } from '@console/shared';\n\nimport { PersistentVolumeClaimModel } from '@console/internal/models';\nimport { VolumeSnapshotModel } from '../../models';\nimport { getKebabActionsForKind } from '../../utils/kebab-actions';\nimport { sortable } from '@patternfly/react-table';\nimport { volumeSnapshotModal } from '../modals/volume-snapshot-modal/volume-snapshot-modal';\n\nexport const snapshotMenuActions = [...getKebabActionsForKind(VolumeSnapshotModel)];\n\nconst snapshotTableColumnClasses = [\n  classNames('col-lg-4', 'col-md-4', 'col-sm-6', 'col-xs-6'),\n  classNames('col-lg-3', 'col-md-3', 'col-sm-6', 'col-xs-6'),\n  classNames('col-lg-3', 'col-md-3', 'hidden-sm', 'hidden-xs'),\n  classNames('col-lg-2', 'col-md-2', 'hidden-sm', 'hidden-xs'),\n  Kebab.columnClass,\n];\n\nexport const VolumeSnapshotTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: snapshotTableColumnClasses[0] },\n    },\n    {\n      title: 'Date',\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: snapshotTableColumnClasses[1] },\n    },\n    {\n      title: 'Status',\n      sortField: 'status.readyToUse',\n      transforms: [sortable],\n      props: { className: snapshotTableColumnClasses[2] },\n    },\n    {\n      title: 'Size',\n      sortField: 'status.restoreSize',\n      transforms: [sortable],\n      props: { className: snapshotTableColumnClasses[3] },\n    },\n    {\n      title: '',\n      props: { className: snapshotTableColumnClasses[4] },\n    },\n  ];\n};\nVolumeSnapshotTableHeader.displayName = 'SnapshotTableHeader';\n\nconst volumeSnapshotKind = referenceFor(VolumeSnapshotModel);\n\nconst breadcrumbsForSnapshotDetailsPage = (match: any) => () => [\n  {\n    name: PersistentVolumeClaimModel.labelPlural,\n    path: `/k8s/ns/${match.params.ns}/persistentvolumeclaims`,\n  },\n  {\n    name: 'Snapshot Details',\n    path: `${match.url}`,\n  },\n];\n\nexport const DetailsComponent = ({ obj: volumeSnapshot }) => (\n  <>\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text=\"Volume Snapshot Details\" />\n      <div className=\"row\">\n        <div className=\"col-md-6\">\n          <ResourceSummary resource={volumeSnapshot}>\n            <dt>Status</dt>\n            <dd>{volumeSnapshot.status.readyToUse ? 'Ready' : 'Not Ready'}</dd>\n            <dt>Size</dt>\n            <dd>{volumeSnapshot.status.restoreSize || 'No Data'}</dd>\n          </ResourceSummary>\n        </div>\n        <div className=\"col-md-6\">\n          <dt>Persistent Volume Claim</dt>\n          <dd>\n            <ResourceLink\n              kind={PersistentVolumeClaimModel.kind}\n              name={volumeSnapshot.spec.source.persistentVolumeClaimName}\n              namespace={getNamespace(volumeSnapshot)}\n            />\n          </dd>\n        </div>\n      </div>\n    </div>\n  </>\n);\n\nexport const VolumeSnapshotDetails = (props) => (\n  <DetailsPage\n    {...props}\n    menuActions={snapshotMenuActions}\n    kind={referenceFor(VolumeSnapshotModel)}\n    name={props.match.params.name}\n    kindObj={VolumeSnapshotModel}\n    namespace={props.match.params.ns}\n    pages={[navFactory.details(DetailsComponent)]}\n    breadcrumbsFor={breadcrumbsForSnapshotDetailsPage(props.match)}\n  />\n);\n\nexport const VolumeSnapshotTableRow: RowFunction<K8sResourceKind> = ({\n  obj,\n  index,\n  key,\n  style,\n}) => (\n  <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n    <TableData className={snapshotTableColumnClasses[0]}>\n      <ResourceLink\n        kind={referenceFor(VolumeSnapshotModel)}\n        name={getName(obj)}\n        namespace={getNamespace(obj)}\n        title={getName(obj)}\n      />\n    </TableData>\n    <TableData className={snapshotTableColumnClasses[1]}>\n      <Timestamp timestamp={obj.metadata.creationTimestamp} />\n    </TableData>\n    <TableData className={snapshotTableColumnClasses[2]}>\n      <Status status={obj.status.readyToUse ? 'Ready' : 'Not Ready'} />\n    </TableData>\n    <TableData className={snapshotTableColumnClasses[3]}>{obj.status.restoreSize || '-'}</TableData>\n    <TableData className={snapshotTableColumnClasses[4]}>\n      <ResourceKebab actions={snapshotMenuActions} kind={volumeSnapshotKind} resource={obj} />\n    </TableData>\n  </TableRow>\n);\n\nexport const VolumeSnapshotList: React.FC<TableProps> = (props) => (\n  <Table\n    {...props}\n    aria-label=\"Volume Snapshot List\"\n    Header={VolumeSnapshotTableHeader}\n    Row={VolumeSnapshotTableRow}\n    virtualize\n  />\n);\n\nexport const VolumeSnapshotPage: React.FC<PageComponentProps> = ({ obj }) => (\n  <ListPage\n    canCreate\n    kind={volumeSnapshotKind}\n    ListComponent={VolumeSnapshotList}\n    showTitle={false}\n    namespace={obj.metadata.namespace}\n    createHandler={() => volumeSnapshotModal({ resource: obj })}\n  />\n);\n","import { K8sKind, K8sResourceKind } from '@console/internal/module/k8s';\n\nimport { KebabOption } from '@console/internal/components/utils';\n\nexport const ClonePVC = (kind: K8sKind, resource: K8sResourceKind): KebabOption => {\n  return {\n    label: 'Clone',\n    callback: () => {\n      return import(\n        '../components/modals/clone-pvc-modal/clone-pvc-modal' /* webpackChunkName: \"ceph-storage-clone-pvc-modal\" */\n      ).then((m) => m.default({ resource }));\n    },\n    accessReview: {\n      group: kind.apiGroup,\n      resource: kind.plural,\n      namespace: resource.metadata.namespace,\n      verb: 'create',\n    },\n  };\n};\n","import { K8sKind, K8sResourceKind } from '@console/internal/module/k8s';\n\nimport { KebabOption } from '@console/internal/components/utils';\n\nexport const DeleteSnapshot = (kind: K8sKind, resource: K8sResourceKind): KebabOption => {\n  return {\n    label: 'Delete Snapshot',\n    callback: () => {\n      const clusterObject = { resource };\n      import(\n        '@console/internal/components/modals/delete-modal' /* webpackChunkName: \"ceph-storage-delete-snapshot-modal\" */\n      )\n        .then((m) =>\n          m.deleteModal({\n            kind,\n            resource: clusterObject.resource,\n          }),\n        )\n        // eslint-disable-next-line no-console\n        .catch((e) => console.error(e));\n    },\n    accessReview: {\n      group: kind.apiGroup,\n      resource: kind.plural,\n      namespace: resource.metadata.namespace,\n      name: resource.metadata.name,\n      verb: 'delete',\n    },\n  };\n};\n","import { ClonePVC } from './clone-workflow';\nimport { DeleteSnapshot } from './delete-snapshot-workflow';\nimport { K8sKind } from '@console/internal/module/k8s';\nimport { KebabAction } from '@console/internal/components/utils';\nimport { PersistentVolumeClaimModel } from '@console/internal/models/index';\nimport { RestorePVC } from './restore-pvc-workflow';\nimport { SnapshotPVC } from './snapshot-workflow';\nimport { VolumeSnapshotModel } from '../models';\n\nexport const getKebabActionsForKind = (resourceKind: K8sKind): KebabAction[] => {\n  if (resourceKind?.kind === PersistentVolumeClaimModel.kind) {\n    return [SnapshotPVC, ClonePVC];\n  }\n  if (resourceKind?.kind === VolumeSnapshotModel.kind) {\n    return [RestorePVC, DeleteSnapshot];\n  }\n  return [];\n};\n","import { K8sKind, K8sResourceKind } from '@console/internal/module/k8s';\n\nimport { KebabOption } from '@console/internal/components/utils';\n\nexport const RestorePVC = (kind: K8sKind, resource: K8sResourceKind): KebabOption => {\n  return {\n    label: 'Restore',\n    callback: () => {\n      const clusterObject = { resource };\n      import(\n        '../components/modals/restore-pvc-modal/restore-pvc-modal' /* webpackChunkName: \"ceph-storage-restore-pvc-modal\" */\n      )\n        .then((m) => m.default(clusterObject))\n        // eslint-disable-next-line no-console\n        .catch((e) => console.error(e));\n    },\n    accessReview: {\n      group: kind.apiGroup,\n      resource: kind.plural,\n      namespace: resource.metadata.namespace,\n      name: resource.metadata.name,\n      verb: 'create',\n    },\n  };\n};\n","import { K8sKind, K8sResourceKind } from '@console/internal/module/k8s';\n\nimport { KebabOption } from '@console/internal/components/utils';\n\nexport const SnapshotPVC = (kind: K8sKind, resource: K8sResourceKind): KebabOption => {\n  return {\n    label: 'Create Snapshot',\n    callback: () => {\n      import(\n        '../components/modals/volume-snapshot-modal/volume-snapshot-modal' /* webpackChunkName: \"ceph-storage-volume-snapshot-modal\" */\n      )\n        .then((m) => m.volumeSnapshotModal({ resource }))\n        // eslint-disable-next-line no-console\n        .catch((e) => console.error(e));\n    },\n    accessReview: {\n      group: kind.apiGroup,\n      resource: kind.plural,\n      namespace: resource.metadata.namespace,\n      name: resource.metadata.name,\n      verb: 'create',\n    },\n  };\n};\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AAEA;AAOA;AACA;AACA;AACA;AAOA;AACA;AAEA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;AAAA;AACA;AAMA;AAQA;AAKA;AAQA;AASA;AAMA;;AAAA;AAGA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;;;;;;;;;;;;AChIA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AASA;AACA;AAUA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAYA;AAaA;AAOA;AACA;AAOA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAKA;AAUA;;;;;;;;;;;;;ACrKA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACfA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AC7BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACbA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}