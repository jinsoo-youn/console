{"version":3,"file":"cluster-service-class-95833692f2dc4701bbb1.js","sources":["webpack:///./public/components/cluster-service-class-info.tsx","webpack:///./public/components/cluster-service-class.tsx","webpack:///./public/components/cluster-service-plan.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\n\nimport { K8sResourceKind, serviceClassDisplayName } from '../module/k8s';\nimport { ClusterServiceClassIcon } from './catalog/catalog-item-icon';\nimport { ExternalLink } from './utils';\n\nexport const ClusterServiceClassInfo: React.FC<ClusterServiceClassInfoProps> = ({\n  obj: serviceClass,\n}) => {\n  const displayName = serviceClassDisplayName(serviceClass);\n  const description = _.get(serviceClass, 'spec.description');\n  const longDescription = _.get(serviceClass, 'spec.externalMetadata.longDescription');\n  const documentationURL = _.get(serviceClass, 'spec.externalMetadata.documentationUrl');\n  const supportURL = _.get(serviceClass, 'spec.externalMetadata.supportUrl');\n  const provider = _.get(serviceClass, 'spec.externalMetadata.providerDisplayName');\n  const tags = _.get(serviceClass, 'spec.tags');\n\n  return (\n    <div className=\"co-catalog-item-info\">\n      <div className=\"co-catalog-item-details\">\n        <ClusterServiceClassIcon serviceClass={serviceClass} iconSize=\"large\" />\n        <div>\n          <h2 className=\"co-section-heading co-catalog-item-details__name\">{displayName}</h2>\n          {provider && <p className=\"co-catalog-item-details__provider\">Provided by {provider}</p>}\n          {tags && (\n            <p className=\"co-catalog-item-details__tags\">\n              {_.map(tags, (tag, i) => (\n                <span className=\"co-catalog-item-details__tag\" key={i}>\n                  {tag}\n                </span>\n              ))}\n            </p>\n          )}\n          {(documentationURL || supportURL) && (\n            <ul className=\"list-inline\">\n              {documentationURL && (\n                <li className=\"co-break-word\">\n                  <ExternalLink href={documentationURL} text=\"View documentation\" />\n                </li>\n              )}\n              {supportURL && (\n                <li className=\"co-break-word\">\n                  <ExternalLink href={supportURL} text=\"Get support\" />\n                </li>\n              )}\n            </ul>\n          )}\n        </div>\n      </div>\n      {description && <p className=\"co-catalog-item-details__description\">{description}</p>}\n      {longDescription && <p className=\"co-catalog-item-details__description\">{longDescription}</p>}\n    </div>\n  );\n};\n\nexport type ClusterServiceClassInfoProps = {\n  obj: K8sResourceKind;\n};\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport * as _ from 'lodash-es';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from './factory';\nimport {\n  history,\n  SectionHeading,\n  detailsPage,\n  navFactory,\n  ResourceSummary,\n  resourcePathFromModel,\n  ResourceLink,\n} from './utils';\nimport { viewYamlComponent } from './utils/horizontal-nav';\nimport { ClusterServiceClassModel, ClusterServiceBrokerModel } from '../models';\nimport { K8sResourceKind, referenceForModel, serviceClassDisplayName } from '../module/k8s';\nimport { ClusterServiceClassIcon } from './catalog/catalog-item-icon';\nimport { ClusterServicePlanPage } from './cluster-service-plan';\nimport { ClusterServiceClassInfo } from './cluster-service-class-info';\n\nconst createInstance = (kindObj, serviceClass) => {\n  if (!_.get(serviceClass, 'status.removedFromBrokerCatalog')) {\n    return {\n      btnClass: 'pf-c-button pf-m-primary',\n      callback: () => {\n        history.push(\n          `/catalog/create-service-instance?cluster-service-class=${serviceClass.metadata.name}`,\n        );\n      },\n      label: 'Create Instance',\n    };\n  }\n};\n\nconst actionButtons = [createInstance];\n\nconst tableColumnClasses = [\n  classNames('col-sm-6', 'col-xs-12'),\n  classNames('col-sm-3', 'hidden-xs'),\n  classNames('col-sm-3', 'hidden-xs'),\n];\n\nconst ClusterServiceClassTableHeader = () => {\n  return [\n    {\n      title: 'Display Name',\n      sortFunc: 'serviceClassDisplayName',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'External Name',\n      sortField: 'spec.externalName',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Broker',\n      sortField: 'spec.clusterServiceBrokerName',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n  ];\n};\nClusterServiceClassTableHeader.displayName = 'ClusterServiceClassTableHeader';\n\nconst ClusterServiceClassTableRow: RowFunction<K8sResourceKind> = ({\n  obj: serviceClass,\n  index,\n  key,\n  style,\n}) => {\n  const path = resourcePathFromModel(ClusterServiceClassModel, serviceClass.metadata.name);\n  return (\n    <TableRow id={serviceClass.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ClusterServiceClassIcon serviceClass={serviceClass} />\n        <Link className=\"co-cluster-service-class-link\" to={path}>\n          {serviceClassDisplayName(serviceClass)}\n        </Link>\n      </TableData>\n      <TableData className={tableColumnClasses[1]}>{serviceClass.spec.externalName}</TableData>\n      <TableData className={classNames(tableColumnClasses[2], 'co-break-word')}>\n        <ResourceLink\n          kind={referenceForModel(ClusterServiceBrokerModel)}\n          name={serviceClass.spec.clusterServiceBrokerName}\n        />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst ClusterServiceClassDetails: React.FC<ClusterServiceClassDetailsProps> = ({\n  obj: serviceClass,\n}) => (\n  <div className=\"co-m-pane__body\">\n    <div className=\"row\">\n      <div className=\"col-md-7 col-md-push-5\" style={{ marginBottom: '20px' }}>\n        <ClusterServiceClassInfo obj={serviceClass} />\n      </div>\n      <div className=\"col-md-5 col-md-pull-7\">\n        <SectionHeading text=\"Service Class Details\" />\n        <ResourceSummary resource={serviceClass}>\n          <dt>External Name</dt>\n          <dd>{serviceClass.spec.externalName || '-'}</dd>\n        </ResourceSummary>\n        {serviceClass.status.removedFromBrokerCatalog && (\n          <>\n            <dt>Removed From Catalog</dt>\n            <dd>{serviceClass.status.removedFromBrokerCatalog}</dd>\n          </>\n        )}\n      </div>\n    </div>\n  </div>\n);\n\nconst ClusterServicePlanTab: React.FC<{ obj: K8sResourceKind }> = ({ obj }) => {\n  return (\n    <ClusterServicePlanPage\n      showTitle={false}\n      fieldSelector={`spec.clusterServiceClassRef.name=${obj.metadata.name}`}\n    />\n  );\n};\n\nexport const ClusterServiceClassDetailsPage: React.FC<ClusterServiceClassDetailsPageProps> = (\n  props,\n) => (\n  <DetailsPage\n    {...props}\n    buttonActions={actionButtons}\n    titleFunc={serviceClassDisplayName}\n    kind={referenceForModel(ClusterServiceClassModel)}\n    pages={[\n      navFactory.details(detailsPage(ClusterServiceClassDetails)),\n      navFactory.editYaml(viewYamlComponent),\n      navFactory.clusterServicePlans(ClusterServicePlanTab),\n    ]}\n  />\n);\n\nexport const ClusterServiceClassList: React.FC = (props) => (\n  <Table\n    {...props}\n    aria-label=\"Cluster Service Classes\"\n    Header={ClusterServiceClassTableHeader}\n    Row={ClusterServiceClassTableRow}\n    defaultSortFunc=\"serviceClassDisplayName\"\n    virtualize\n  />\n);\n\nexport const ClusterServiceClassPage: React.FC<ClusterServiceClassPageProps> = (props) => (\n  <ListPage\n    {...props}\n    showTitle={false}\n    ListComponent={ClusterServiceClassList}\n    kind={referenceForModel(ClusterServiceClassModel)}\n    textFilter=\"service-class\"\n    canCreate={false}\n  />\n);\n\nexport type ClusterServiceClassPageProps = {\n  showTitle?: boolean;\n  fieldSelector?: string;\n};\n\nexport type ClusterServiceClassDetailsProps = {\n  obj: K8sResourceKind;\n};\n\nexport type ClusterServiceClassDetailsPageProps = {\n  match: any;\n  name: string;\n};\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from './factory';\nimport { SectionHeading, detailsPage, navFactory, ResourceLink, ResourceSummary } from './utils';\nimport { K8sResourceKind, referenceForModel, servicePlanDisplayName } from '../module/k8s';\nimport {\n  ClusterServicePlanModel,\n  ClusterServiceBrokerModel,\n  ClusterServiceClassModel,\n} from '../models';\nimport { viewYamlComponent } from './utils/horizontal-nav';\n\nconst tableColumnClasses = [\n  classNames('col-sm-4', 'col-xs-6'),\n  classNames('col-sm-4', 'col-xs-6'),\n  classNames('col-sm-4', 'hidden-xs'),\n];\n\nconst ClusterServicePlanTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'External Name',\n      sortField: 'spec.externalName',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Broker',\n      sortField: 'spec.clusterServiceBrokerName',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n  ];\n};\nClusterServicePlanTableHeader.displayName = 'ClusterServicePlanTableHeader';\n\nconst ClusterServicePlanTableRow: RowFunction<K8sResourceKind> = ({\n  obj: servicePlan,\n  index,\n  key,\n  style,\n}) => {\n  return (\n    <TableRow id={servicePlan.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={referenceForModel(ClusterServicePlanModel)}\n          name={servicePlan.metadata.name}\n          displayName={servicePlan.spec.externalName}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[1]}>{servicePlan.spec.externalName}</TableData>\n      <TableData className={classNames(tableColumnClasses[2], 'co-break-word')}>\n        <ResourceLink\n          kind={referenceForModel(ClusterServiceBrokerModel)}\n          name={servicePlan.spec.clusterServiceBrokerName}\n          title={servicePlan.spec.clusterServiceBrokerName}\n        />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst ClusterServicePlanDetails: React.SFC<ClusterServicePlanDetailsProps> = ({\n  obj: servicePlan,\n}) => {\n  return (\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text=\"Service Plan Details\" />\n      <div className=\"row\">\n        <div className=\"col-md-6\">\n          <ResourceSummary resource={servicePlan} />\n        </div>\n        <div className=\"col-md-6\">\n          <dl className=\"co-m-pane__details\">\n            <dt>Description</dt>\n            <dd>{servicePlan.spec.description}</dd>\n            <dt>Broker</dt>\n            <dd>\n              <ResourceLink\n                kind={referenceForModel(ClusterServiceBrokerModel)}\n                name={servicePlan.spec.clusterServiceBrokerName}\n              />\n            </dd>\n            <dt>Service Class</dt>\n            <dd>\n              <ResourceLink\n                kind={referenceForModel(ClusterServiceClassModel)}\n                name={servicePlan.spec.clusterServiceClassRef.name}\n              />\n            </dd>\n            {servicePlan.status.removedFromBrokerCatalog && (\n              <>\n                <dt>Removed From Catalog</dt>\n                <dd>{servicePlan.status.removedFromBrokerCatalog}</dd>\n              </>\n            )}\n          </dl>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport const ClusterServicePlanDetailsPage: React.SFC<ClusterServicePlanDetailsPageProps> = (\n  props,\n) => (\n  <DetailsPage\n    {...props}\n    titleFunc={servicePlanDisplayName}\n    kind={referenceForModel(ClusterServicePlanModel)}\n    pages={[\n      navFactory.details(detailsPage(ClusterServicePlanDetails)),\n      navFactory.editYaml(viewYamlComponent),\n    ]}\n  />\n);\n\nexport const ClusterServicePlanList: React.SFC = (props) => (\n  <Table\n    {...props}\n    aria-label=\"Cluster Service Plans\"\n    Header={ClusterServicePlanTableHeader}\n    Row={ClusterServicePlanTableRow}\n    virtualize\n  />\n);\n\nexport const ClusterServicePlanPage: React.SFC<ClusterServicePlanPageProps> = (props) => (\n  <ListPage\n    {...props}\n    ListComponent={ClusterServicePlanList}\n    kind={referenceForModel(ClusterServicePlanModel)}\n    textFilter=\"service-plan\"\n    canCreate={false}\n  />\n);\n\nexport type ClusterServicePlanPageProps = {\n  showTitle?: boolean;\n  fieldSelector?: string;\n};\n\nexport type ClusterServicePlanDetailsProps = {\n  obj: K8sResourceKind;\n};\n\nexport type ClusterServicePlanDetailsPageProps = {\n  match: any;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;;AAAA;AACA;AASA;AAEA;AAEA;AAGA;AAEA;AAOA;AACA;AAGA;;;;;;;;;;;;;ACtDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAOA;AAEA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAQA;AACA;AAMA;AAEA;AASA;AACA;AACA;AACA;AAIA;AAWA;;;;;;;;;;;;;AC3JA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAEA;AACA;AAMA;AACA;AACA;AAQA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAKA;AAEA;AACA;AAQA;AAEA;AAQA;AACA;AACA;AAIA;AAUA;;;;;A","sourceRoot":""}