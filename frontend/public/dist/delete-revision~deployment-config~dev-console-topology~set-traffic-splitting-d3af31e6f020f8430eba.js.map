{"version":3,"file":"delete-revision~deployment-config~dev-console-topology~set-traffic-splitting-d3af31e6f020f8430eba.js","sources":["webpack:///./packages/console-shared/src/components/pod/PodRingSet.tsx","webpack:///./public/components/deployment-config.tsx","webpack:///./public/components/workload-table.tsx"],"sourcesContent":["import * as React from 'react';\nimport { K8sResourceKind, K8sKind } from '@console/internal/module/k8s';\nimport { Split, SplitItem, Bullseye } from '@patternfly/react-core';\nimport { LongArrowAltRightIcon } from '@patternfly/react-icons';\nimport { global_Color_200 as color200 } from '@patternfly/react-tokens';\nimport { PodRCData } from '../../types';\nimport { getPodData } from '../../utils';\nimport PodRing from './PodRing';\n\ninterface PodRingSetProps {\n  podData: PodRCData;\n  obj: K8sResourceKind;\n  resourceKind: K8sKind;\n  path: string;\n  impersonate?: string;\n}\n\nconst PodRingSet: React.FC<PodRingSetProps> = ({ podData, resourceKind, obj, path }) => {\n  const { inProgressDeploymentData, completedDeploymentData } = getPodData(\n    obj,\n    podData.pods,\n    podData.current,\n    podData.previous,\n    podData.isRollingOut,\n  );\n  const current = podData.current && podData.current.obj;\n  const previous = podData.previous && podData.previous.obj;\n  const progressRC = inProgressDeploymentData && current;\n  const completedRC = !!inProgressDeploymentData && completedDeploymentData ? previous : current;\n  return (\n    <Split gutter=\"lg\">\n      <SplitItem>\n        <PodRing\n          key={inProgressDeploymentData ? 'deploy' : 'notDeploy'}\n          pods={completedDeploymentData}\n          rc={completedRC}\n          resourceKind={resourceKind}\n          obj={obj}\n          path={path}\n          enableScaling={!podData.isRollingOut}\n        />\n      </SplitItem>\n      {inProgressDeploymentData && (\n        <>\n          <SplitItem>\n            <Bullseye>\n              <LongArrowAltRightIcon size=\"xl\" color={color200.value} />\n            </Bullseye>\n          </SplitItem>\n          <SplitItem>\n            <PodRing\n              pods={inProgressDeploymentData}\n              rc={progressRC}\n              resourceKind={resourceKind}\n              obj={obj}\n              path={path}\n              enableScaling={false}\n            />\n          </SplitItem>\n        </>\n      )}\n    </Split>\n  );\n};\n\nexport default PodRingSet;\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\n\nimport { Status, PodRingController } from '@console/shared';\nimport PodRingSet from '@console/shared/src/components/pod/PodRingSet';\nimport { AddHealthChecks, EditHealthChecks } from '@console/app/src/actions/modify-health-checks';\nimport { k8sCreate, K8sKind, K8sResourceKind, K8sResourceKindReference } from '../module/k8s';\nimport { errorModal } from './modals';\nimport { DeploymentConfigModel } from '../models';\nimport { Conditions } from './conditions';\nimport { ResourceEventStream } from './events';\nimport { VolumesTable } from './volumes-table';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\nimport { DetailsPage, ListPage, Table, RowFunction } from './factory';\nimport {\n  AsyncComponent,\n  ContainerTable,\n  DetailsItem,\n  Kebab,\n  KebabAction,\n  LoadingInline,\n  ResourceSummary,\n  SectionHeading,\n  WorkloadPausedAlert,\n  getExtensionsKebabActionsForKind,\n  navFactory,\n  pluralize,\n  togglePaused,\n} from './utils';\nimport { ReplicationControllersPage } from './replication-controller';\n\nimport { WorkloadTableRow, WorkloadTableHeader } from './workload-table';\n\nconst DeploymentConfigsReference: K8sResourceKindReference = 'DeploymentConfig';\n\nconst rollout = (dc: K8sResourceKind): Promise<K8sResourceKind> => {\n  const req = {\n    kind: 'DeploymentRequest',\n    apiVersion: 'apps.openshift.io/v1',\n    name: dc.metadata.name,\n    latest: true,\n    force: true,\n  };\n  const opts = {\n    name: dc.metadata.name,\n    ns: dc.metadata.namespace,\n    path: 'instantiate',\n  };\n  return k8sCreate(DeploymentConfigModel, req, opts);\n};\n\nconst RolloutAction: KebabAction = (kind: K8sKind, obj: K8sResourceKind) => ({\n  label: 'Start Rollout',\n  callback: () =>\n    rollout(obj).catch((err) => {\n      const error = err.message;\n      errorModal({ error });\n    }),\n  accessReview: {\n    group: kind.apiGroup,\n    resource: kind.plural,\n    subresource: 'instantiate',\n    name: obj.metadata.name,\n    namespace: obj.metadata.namespace,\n    verb: 'create',\n  },\n});\n\nconst PauseAction: KebabAction = (kind: K8sKind, obj: K8sResourceKind) => ({\n  label: obj.spec.paused ? 'Resume Rollouts' : 'Pause Rollouts',\n  callback: () => togglePaused(kind, obj).catch((err) => errorModal({ error: err.message })),\n  accessReview: {\n    group: kind.apiGroup,\n    resource: kind.plural,\n    name: obj.metadata.name,\n    namespace: obj.metadata.namespace,\n    verb: 'patch',\n  },\n});\n\nconst { ModifyCount, AddStorage, common } = Kebab.factory;\n\nexport const menuActions: KebabAction[] = [\n  RolloutAction,\n  PauseAction,\n  ModifyCount,\n  AddHealthChecks,\n  AddStorage,\n  ...getExtensionsKebabActionsForKind(DeploymentConfigModel),\n  EditHealthChecks,\n  ...common,\n];\n\nexport const DeploymentConfigDetailsList = ({ dc }) => {\n  const timeout = _.get(dc, 'spec.strategy.rollingParams.timeoutSeconds');\n  const updatePeriod = _.get(dc, 'spec.strategy.rollingParams.updatePeriodSeconds');\n  const interval = _.get(dc, 'spec.strategy.rollingParams.intervalSeconds');\n  const triggers = _.map(dc.spec.triggers, 'type').join(', ');\n  return (\n    <dl className=\"co-m-pane__details\">\n      <DetailsItem label=\"Latest Version\" obj={dc} path=\"status.latestVersion\" />\n      <DetailsItem label=\"Message\" obj={dc} path=\"status.details.message\" hideEmpty />\n      <DetailsItem label=\"Update Strategy\" obj={dc} path=\"spec.strategy.type\" />\n      {dc.spec.strategy.type === 'RollingUpdate' && (\n        <>\n          <DetailsItem\n            label=\"Timeout\"\n            obj={dc}\n            path=\"spec.strategy.rollingParams.timeoutSeconds\"\n            hideEmpty\n          >\n            {pluralize(timeout, 'second')}\n          </DetailsItem>\n          <DetailsItem\n            label=\"Update Period\"\n            obj={dc}\n            path=\"spec.strategy.rollingParams.updatePeriodSeconds\"\n            hideEmpty\n          >\n            {pluralize(updatePeriod, 'second')}\n          </DetailsItem>\n          <DetailsItem\n            label=\"Interval\"\n            obj={dc}\n            path=\"spec.strategy.rollingParams.intervalSeconds\"\n            hideEmpty\n          >\n            {pluralize(interval, 'second')}\n          </DetailsItem>\n          <DetailsItem\n            label=\"Max Unavailable\"\n            obj={dc}\n            path=\"spec.strategy.rollingParams.maxUnavailable\"\n          >\n            {dc.spec.strategy.rollingUpdate.maxUnavailable || 1} of{' '}\n            {pluralize(dc.spec.replicas, 'pod')}\n          </DetailsItem>\n          <DetailsItem label=\"Max Surge\" obj={dc} path=\"spec.strategy.rollingParams.maxSurge\">\n            {dc.spec.strategy.rollingUpdate.maxSurge || 1} greater than{' '}\n            {pluralize(dc.spec.replicas, 'pod')}\n          </DetailsItem>\n        </>\n      )}\n      <DetailsItem label=\"Min Ready Seconds\" obj={dc} path=\"spec.minReadySeconds\">\n        {dc.spec.minReadySeconds ? pluralize(dc.spec.minReadySeconds, 'second') : 'Not Configured'}\n      </DetailsItem>\n      <DetailsItem label=\"Triggers\" obj={dc} path=\"spec.triggers\" hideEmpty>\n        {triggers}\n      </DetailsItem>\n    </dl>\n  );\n};\n\nexport const DeploymentConfigsDetails: React.FC<{ obj: K8sResourceKind }> = ({ obj: dc }) => {\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Deployment Config Details\" />\n        {dc.spec.paused && <WorkloadPausedAlert obj={dc} model={DeploymentConfigModel} />}\n        <PodRingController\n          namespace={dc.metadata.namespace}\n          kind={dc.kind}\n          render={(d) => {\n            return d.loaded ? (\n              <PodRingSet\n                key={dc.metadata.uid}\n                podData={d.data[dc.metadata.uid]}\n                obj={dc}\n                resourceKind={DeploymentConfigModel}\n                path=\"/spec/replicas\"\n              />\n            ) : (\n              <LoadingInline />\n            );\n          }}\n        />\n        <div className=\"co-m-pane__body-group\">\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <ResourceSummary resource={dc} showPodSelector showNodeSelector showTolerations>\n                <dt>Status</dt>\n                <dd>\n                  {dc.status.availableReplicas === dc.status.updatedReplicas &&\n                  dc.spec.replicas === dc.status.availableReplicas ? (\n                    <Status status=\"Up to date\" />\n                  ) : (\n                    <Status status=\"Updating\" />\n                  )}\n                </dd>\n              </ResourceSummary>\n            </div>\n            <div className=\"col-sm-6\">\n              <DeploymentConfigDetailsList dc={dc} />\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Containers\" />\n        <ContainerTable containers={dc.spec.template.spec.containers} />\n      </div>\n      <div className=\"co-m-pane__body\">\n        <VolumesTable resource={dc} heading=\"Volumes\" />\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Conditions\" />\n        <Conditions conditions={dc.status.conditions} />\n      </div>\n    </>\n  );\n};\n\nconst EnvironmentPage = (props) => (\n  <AsyncComponent\n    loader={() => import('./environment.jsx').then((c) => c.EnvironmentPage)}\n    {...props}\n  />\n);\n\nconst envPath = ['spec', 'template', 'spec', 'containers'];\nconst environmentComponent = (props) => (\n  <EnvironmentPage\n    obj={props.obj}\n    rawEnvData={props.obj.spec.template.spec}\n    envPath={envPath}\n    readOnly={false}\n  />\n);\n\nconst ReplicationControllersTab: React.FC<ReplicationControllersTabProps> = ({ obj }) => {\n  const {\n    metadata: { namespace, name },\n  } = obj;\n\n  // Hide the create button to avoid confusion when showing replication controllers for an object.\n  return (\n    <ReplicationControllersPage\n      showTitle={false}\n      namespace={namespace}\n      selector={{\n        'openshift.io/deployment-config.name': name,\n      }}\n      canCreate={false}\n    />\n  );\n};\n\nconst pages = [\n  navFactory.details(DeploymentConfigsDetails),\n  navFactory.editYaml(),\n  {\n    href: 'replicationcontrollers',\n    name: 'Replication Controllers',\n    component: ReplicationControllersTab,\n  },\n  navFactory.pods(),\n  navFactory.envEditor(environmentComponent),\n  navFactory.events(ResourceEventStream),\n];\n\nexport const DeploymentConfigsDetailsPage: React.FC<DeploymentConfigsDetailsPageProps> = (\n  props,\n) => {\n  return (\n    <DetailsPage\n      {...props}\n      kind={DeploymentConfigsReference}\n      menuActions={menuActions}\n      pages={pages}\n    />\n  );\n};\nDeploymentConfigsDetailsPage.displayName = 'DeploymentConfigsDetailsPage';\n\nconst kind = 'DeploymentConfig';\n\nconst DeploymentConfigTableRow: RowFunction<K8sResourceKind> = ({ obj, index, key, style }) => {\n  return (\n    <WorkloadTableRow\n      obj={obj}\n      index={index}\n      rowKey={key}\n      style={style}\n      menuActions={menuActions}\n      kind={kind}\n    />\n  );\n};\n\nconst DeploymentConfigTableHeader = (t?: TFunction) => {\n  return WorkloadTableHeader(t);\n};\nDeploymentConfigTableHeader.displayName = 'DeploymentConfigTableHeader';\n\nexport const DeploymentConfigsList: React.FC = (props) => {\n  const { t } = useTranslation();\n  return (\n  <Table\n    {...props}\n    aria-label=\"Deployment Configs\"\n    Header={DeploymentConfigTableHeader.bind(null, t)}\n    Row={DeploymentConfigTableRow}\n    virtualize\n  />\n)};\nDeploymentConfigsList.displayName = 'DeploymentConfigsList';\n\nexport const DeploymentConfigsPage: React.FC<DeploymentConfigsPageProps> = (props) => (\n  <ListPage\n    kind={DeploymentConfigsReference}\n    ListComponent={DeploymentConfigsList}\n    canCreate={true}\n    {...props}\n  />\n);\nDeploymentConfigsPage.displayName = 'DeploymentConfigsListPage';\n\ntype ReplicationControllersTabProps = {\n  obj: K8sResourceKind;\n};\n\ntype DeploymentConfigsPageProps = {\n  filterLabel: string;\n  namespace: string;\n};\n\ntype DeploymentConfigsDetailsPageProps = {\n  match: any;\n};\n","import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { Link } from 'react-router-dom';\nimport { K8sResourceKind } from '../module/k8s';\nimport { TableRow, TableData } from './factory';\nimport { TFunction } from 'i18next';\nimport { Kebab, KebabAction, LabelList, ResourceKebab, ResourceLink, resourcePath, Selector } from './utils';\n\nconst tableColumnClasses = ['', '', classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), Kebab.columnClass];\n\nexport const WorkloadTableRow: React.FC<WorkloadTableRowProps> = ({ obj, index, rowKey, style, kind, menuActions }) => {\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={rowKey} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={obj.metadata.name} namespace={obj.metadata.namespace} title={obj.metadata.uid} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} title={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Link to={`${resourcePath(kind, obj.metadata.name, obj.metadata.namespace)}/pods`} title=\"pods\">\n          {obj.status.replicas || 0} of {obj.spec.replicas} pods\n        </Link>\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <LabelList kind={kind} labels={obj.metadata.labels} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <Selector selector={obj.spec.selector} namespace={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={obj} />\n      </TableData>\n    </TableRow>\n  );\n};\nWorkloadTableRow.displayName = 'WorkloadTableRow';\ntype WorkloadTableRowProps = {\n  obj: K8sResourceKind;\n  index: number;\n  rowKey: string;\n  style: object;\n  kind: string;\n  menuActions: KebabAction[];\n};\n\nexport const WorkloadTableHeader = (t?: TFunction) => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_2'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_3'),\n      sortFunc: 'numReplicas',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_15'),\n      sortField: 'metadata.labels',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_16'),\n      sortField: 'spec.selector',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[5] },\n    },\n  ];\n};\nWorkloadTableHeader.displayName = 'WorkloadTableHeader';\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAUA;AACA;AAOA;AACA;AACA;AACA;AACA;AAEA;AACA;AAUA;AAEA;AACA;AACA;AAGA;AACA;AAaA;AAEA;;;;;;;;;;;;;ACjEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAeA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAQA;AAQA;AAQA;AAKA;;AAAA;AACA;AAEA;AACA;;AAAA;AACA;AAIA;AAGA;AAKA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAIA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAQA;AACA;AAKA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AAOA;AACA;AASA;AACA;AAIA;AACA;AAKA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAQA;AACA;AAEA;AAEA;AACA;AAUA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAQA;AACA;AAEA;AAQA;;;;;;;;;;;;;AC5TA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}