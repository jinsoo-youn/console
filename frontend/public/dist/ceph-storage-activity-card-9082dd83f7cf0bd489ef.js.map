{"version":3,"file":"ceph-storage-activity-card-9082dd83f7cf0bd489ef.js","sources":["webpack:///./packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/activity-card/activity-card.scss?2f6c","webpack:///./packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/activity-card/activity-card.tsx","webpack:///./packages/ceph-storage-plugin/src/components/dashboard-page/storage-dashboard/activity-card/ocs-upgrade-activity.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as _ from 'lodash';\nimport DashboardCard from '@console/shared/src/components/dashboard/dashboard-card/DashboardCard';\nimport DashboardCardBody from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardBody';\nimport DashboardCardHeader from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardHeader';\nimport DashboardCardTitle from '@console/shared/src/components/dashboard/dashboard-card/DashboardCardTitle';\nimport { EventKind, K8sResourceKind } from '@console/internal/module/k8s';\nimport { FirehoseResource, FirehoseResult } from '@console/internal/components/utils';\nimport { EventModel, PersistentVolumeClaimModel } from '@console/internal/models';\nimport ActivityBody, {\n  RecentEventsBody,\n  OngoingActivityBody,\n} from '@console/shared/src/components/dashboard/activity-card/ActivityBody';\nimport { PrometheusResponse } from '@console/internal/components/graphs';\nimport { getNamespace } from '@console/shared';\nimport {\n  DashboardItemProps,\n  withDashboardResources,\n} from '@console/internal/components/dashboard/with-dashboard-resources';\nimport { referenceForModel } from '@console/internal/module/k8s/k8s';\nimport { SubscriptionModel, SubscriptionKind } from '@console/operator-lifecycle-manager';\nimport { CEPH_STORAGE_NAMESPACE, OCS_OPERATOR } from '../../../../constants/index';\nimport { DATA_RESILIENCY_QUERY, StorageDashboardQuery } from '../../../../constants/queries';\nimport { getResiliencyProgress } from '../../../../utils';\nimport { OCSServiceModel } from '../../../../models';\nimport { isClusterExpandActivity, ClusterExpandActivity } from './cluster-expand-activity';\nimport { isOCSUpgradeActivity, OCSUpgradeActivity } from './ocs-upgrade-activity';\nimport './activity-card.scss';\n\nconst eventsResource: FirehoseResource = { isList: true, kind: EventModel.kind, prop: 'events' };\nconst subscriptionResource: FirehoseResource = {\n  isList: true,\n  kind: referenceForModel(SubscriptionModel),\n  namespaced: false,\n  prop: 'subs',\n};\n\nconst storageClusterResource: FirehoseResource = {\n  isList: true,\n  kind: referenceForModel(OCSServiceModel),\n  namespaced: false,\n  prop: 'storage-cluster',\n};\n\nexport const getOCSSubscription = (subscriptions: FirehoseResult): SubscriptionKind => {\n  const itemsData: K8sResourceKind[] = subscriptions?.data;\n  return _.find(itemsData, (item) => item?.spec?.name === OCS_OPERATOR) as SubscriptionKind;\n};\n\nconst ocsEventNamespaceKindFilter = (event: EventKind): boolean => {\n  const eventKind = event?.involvedObject?.kind;\n  const eventNamespace = getNamespace(event);\n  return eventNamespace === CEPH_STORAGE_NAMESPACE || eventKind === PersistentVolumeClaimModel.kind;\n};\n\nconst RecentEvent = withDashboardResources(\n  ({ watchK8sResource, stopWatchK8sResource, resources }: DashboardItemProps) => {\n    React.useEffect(() => {\n      watchK8sResource(eventsResource);\n      return () => {\n        stopWatchK8sResource(eventsResource);\n      };\n    }, [watchK8sResource, stopWatchK8sResource]);\n    return (\n      <RecentEventsBody\n        events={resources.events as FirehoseResult<EventKind[]>}\n        filter={ocsEventNamespaceKindFilter}\n      />\n    );\n  },\n);\n\nconst OngoingActivity = withDashboardResources(\n  ({\n    watchPrometheus,\n    stopWatchPrometheusQuery,\n    watchK8sResource,\n    stopWatchK8sResource,\n    resources,\n    prometheusResults,\n  }) => {\n    React.useEffect(() => {\n      watchK8sResource(subscriptionResource);\n      watchK8sResource(storageClusterResource);\n      watchPrometheus(DATA_RESILIENCY_QUERY[StorageDashboardQuery.RESILIENCY_PROGRESS]);\n      return () => {\n        stopWatchK8sResource(subscriptionResource);\n        stopWatchK8sResource(storageClusterResource);\n        stopWatchPrometheusQuery(DATA_RESILIENCY_QUERY[StorageDashboardQuery.RESILIENCY_PROGRESS]);\n      };\n    }, [watchPrometheus, stopWatchPrometheusQuery, watchK8sResource, stopWatchK8sResource]);\n\n    const progressResponse = prometheusResults.getIn([\n      DATA_RESILIENCY_QUERY[StorageDashboardQuery.RESILIENCY_PROGRESS],\n      'data',\n    ]) as PrometheusResponse;\n    const progressError = prometheusResults.getIn([\n      DATA_RESILIENCY_QUERY[StorageDashboardQuery.RESILIENCY_PROGRESS],\n      'loadError',\n    ]);\n\n    const subscriptions = resources?.subs as FirehoseResult;\n    const subscriptionsLoaded = subscriptions?.loaded;\n    const ocsSubscription: SubscriptionKind = getOCSSubscription(subscriptions);\n\n    const storageClusters = resources?.['storage-cluster'] as FirehoseResult;\n    const storageClustersLoaded = storageClusters?.loaded;\n    const ocsCluster: K8sResourceKind = storageClusters?.data?.[0];\n\n    const prometheusActivities = [];\n    const resourceActivities = [];\n\n    if (getResiliencyProgress(progressResponse) < 1) {\n      prometheusActivities.push({\n        results: progressResponse,\n        loader: () => import('./data-resiliency-activity').then((m) => m.DataResiliency),\n      });\n    }\n\n    if (isOCSUpgradeActivity(ocsSubscription)) {\n      resourceActivities.push({\n        resource: ocsSubscription,\n        timestamp: ocsSubscription?.status?.lastUpdated,\n        loader: () => Promise.resolve(OCSUpgradeActivity),\n      });\n    }\n\n    if (isClusterExpandActivity(ocsCluster)) {\n      resourceActivities.push({\n        resource: ocsCluster,\n        timestamp: null,\n        loader: () => Promise.resolve(ClusterExpandActivity),\n      });\n    }\n\n    return (\n      <OngoingActivityBody\n        loaded={(progressResponse || progressError) && subscriptionsLoaded && storageClustersLoaded}\n        resourceActivities={resourceActivities}\n        prometheusActivities={prometheusActivities}\n      />\n    );\n  },\n);\n\nexport const ActivityCard: React.FC = React.memo(() => (\n  <DashboardCard gradient>\n    <DashboardCardHeader>\n      <DashboardCardTitle>Activity</DashboardCardTitle>\n    </DashboardCardHeader>\n    <DashboardCardBody>\n      <ActivityBody className=\"ceph-activity-card__body\">\n        <OngoingActivity />\n        <RecentEvent />\n      </ActivityBody>\n    </DashboardCardBody>\n  </DashboardCard>\n));\n","import * as React from 'react';\nimport ActivityItem from '@console/shared/src/components/dashboard/activity-card/ActivityItem';\nimport { SubscriptionState, SubscriptionKind } from '@console/operator-lifecycle-manager';\nimport { getSubscriptionStatus } from '@console/operator-lifecycle-manager/src/status/csv-status';\n\nexport const isOCSUpgradeActivity = (subscription: SubscriptionKind): boolean =>\n  getSubscriptionStatus(subscription).status === SubscriptionState.SubscriptionStateUpgradePending;\n\nexport const OCSUpgradeActivity: React.FC = () => (\n  <ActivityItem>Upgrading OCS Operator</ActivityItem>\n);\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAKA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAGA;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACzJA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAGA;;;;;A","sourceRoot":""}