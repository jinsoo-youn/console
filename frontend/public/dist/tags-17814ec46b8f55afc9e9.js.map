{"version":3,"file":"tags-17814ec46b8f55afc9e9.js","sources":["webpack:///./public/components/modals/tags.tsx"],"sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\n\nimport { k8sPatch, K8sResourceKind, K8sKind } from '../../module/k8s';\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter } from '../factory/modal';\nimport { NameValueEditorPair, withHandlePromise } from '../utils';\nimport { AsyncComponent } from '../utils/async';\n\n/**\n * Set up an AsyncComponent to wrap the name-value-editor to allow on demand loading to reduce the\n * vendor footprint size.\n */\nconst NameValueEditorComponent = (props) => (\n  <AsyncComponent\n    loader={() => import('../utils/name-value-editor').then((c) => c.NameValueEditor)}\n    {...props}\n  />\n);\n\nexport const TagsModal = withHandlePromise((props: TagsModalProps) => {\n  // Track tags as an array instead of an object / Map so we can preserve the order during editing and so we can have\n  // duplicate keys during editing. However, the ordering and any duplicate keys are lost when the form is submitted.\n  const [tags, setTags] = React.useState(\n    _.isEmpty(props.tags) ? [['', '']] : _.toPairs(props.tags),\n  );\n  const [errorMessage, setErrorMessage] = React.useState(props.errorMessage);\n\n  const submit = (e) => {\n    e.preventDefault();\n\n    // We just throw away any rows where the key is blank\n    const usedTags = _.reject(tags, (t) => _.isEmpty(t[NameValueEditorPair.Name]));\n\n    const keys = usedTags.map((t) => t[NameValueEditorPair.Name]);\n    if (_.uniq(keys).length !== keys.length) {\n      setErrorMessage('Duplicate keys found.');\n      return;\n    }\n    // Make sure to 'add' if the path does not already exist, otherwise the patch request will fail\n    const op = props.tags ? 'replace' : 'add';\n    const patch = [{ path: props.path, op, value: _.fromPairs(usedTags) }];\n    const promise = k8sPatch(props.kind, props.resource, patch);\n    props.handlePromise(promise).then(props.close);\n  };\n\n  return (\n    <form onSubmit={submit} className=\"modal-content\">\n      <ModalTitle>{props.title}</ModalTitle>\n      <ModalBody>\n        <NameValueEditorComponent\n          nameValuePairs={tags}\n          submit={submit}\n          updateParentData={({ nameValuePairs }) => setTags(nameValuePairs)}\n        />\n      </ModalBody>\n      <ModalSubmitFooter\n        submitText=\"Save\"\n        cancel={props.cancel}\n        errorMessage={props.errorMessage || errorMessage}\n        inProgress={props.inProgress}\n      />\n    </form>\n  );\n});\n\nexport const annotationsModal = createModalLauncher((props: AnnotationsModalProps) => (\n  <TagsModal\n    path=\"/metadata/annotations\"\n    tags={props.resource.metadata.annotations}\n    title=\"Edit Annotations\"\n    {...props}\n  />\n));\n\ntype TagsModalProps = {\n  tags?: { [key: string]: string };\n  path: string;\n  title: string;\n  kind: K8sKind;\n  resource: K8sResourceKind;\n  handlePromise: <T>(promise: Promise<T>) => Promise<T>;\n  inProgress: boolean;\n  errorMessage: string;\n  cancel?: () => void;\n  close?: () => void;\n};\n\ntype AnnotationsModalProps = Omit<TagsModalProps, 'path' | 'tags' | 'title'>;\n\nTagsModal.displayName = 'TagsModal';\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;;;AAGA;AACA;AAOA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAMA;AAQA;AAEA;AAwBA;;;;;A","sourceRoot":""}