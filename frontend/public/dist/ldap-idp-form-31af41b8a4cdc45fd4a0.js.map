{"version":3,"file":"ldap-idp-form-31af41b8a4cdc45fd4a0.js","sources":["webpack:///./public/components/cluster-settings/idp-cafile-input.tsx","webpack:///./public/components/cluster-settings/idp-name-input.tsx","webpack:///./public/components/cluster-settings/index.ts","webpack:///./public/components/cluster-settings/ldap-idp-form.tsx"],"sourcesContent":["import * as React from 'react';\nimport { AsyncComponent } from '../utils';\n\nconst DroppableFileInput = (props: any) => (\n  <AsyncComponent\n    loader={() => import('../utils/file-input').then((c) => c.DroppableFileInput)}\n    {...props}\n  />\n);\n\nexport const IDPCAFileInput: React.FC<IDPCAFileInputProps> = ({\n  value,\n  onChange,\n  isRequired = false,\n}) => (\n  <div className=\"form-group\">\n    <DroppableFileInput\n      onChange={onChange}\n      inputFileData={value}\n      id=\"idp-file-input\"\n      label=\"CA File\"\n      isRequired={isRequired}\n      hideContents\n    />\n  </div>\n);\n\ntype IDPCAFileInputProps = {\n  value: string;\n  onChange: (value: string) => void;\n  isRequired?: boolean;\n};\n","import * as React from 'react';\n\nexport const IDPNameInput: React.FC<IDPNameInputProps> = ({ value, onChange }) => (\n  <div className=\"form-group\">\n    <label className=\"control-label co-required\" htmlFor=\"idp-name\">\n      Name\n    </label>\n    <input\n      className=\"pf-c-form-control\"\n      type=\"text\"\n      onChange={onChange}\n      value={value}\n      aria-describedby=\"idp-name-help\"\n      id=\"idp-name\"\n      required\n    />\n    <p className=\"help-block\" id=\"idp-name-help\">\n      Unique name of the new identity provider. This cannot be changed later.\n    </p>\n  </div>\n);\n\ntype IDPNameInputProps = {\n  value: string;\n  onChange: React.ReactEventHandler<HTMLInputElement>;\n};\n","import * as _ from 'lodash-es';\n\nimport { OAuthModel } from '../../models';\nimport { IdentityProvider, k8sGet, k8sPatch, OAuthKind } from '../../module/k8s';\nimport { history, resourcePathFromModel } from '../utils';\nimport { dryRunOpt } from '@console/dev-console/src/utils/shared-submit-utils';\n\n// The name of the cluster-scoped OAuth configuration resource.\nconst OAUTH_RESOURCE_NAME = 'cluster';\n\nexport const getOAuthResource = (): Promise<OAuthKind> => k8sGet(OAuthModel, OAUTH_RESOURCE_NAME);\n\nexport const addIDP = (\n  oauth: OAuthKind,\n  idp: IdentityProvider,\n  dryRun?: boolean,\n): Promise<OAuthKind> => {\n  const patch = _.isEmpty(oauth.spec.identityProviders)\n    ? { op: 'add', path: '/spec/identityProviders', value: [idp] }\n    : { op: 'add', path: '/spec/identityProviders/-', value: idp };\n  return k8sPatch(OAuthModel, oauth, [patch], dryRun ? dryRunOpt : {});\n};\n\nexport const redirectToOAuthPage = () => {\n  const path = resourcePathFromModel(OAuthModel, OAUTH_RESOURCE_NAME);\n  history.push(path);\n};\n\nexport const mockNames = {\n  secret: 'secret-name',\n  ca: 'ca-name',\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Helmet } from 'react-helmet';\nimport { ActionGroup, Button } from '@patternfly/react-core';\n\nimport { ConfigMapModel, SecretModel } from '../../models';\nimport { IdentityProvider, k8sCreate, K8sResourceKind, OAuthKind } from '../../module/k8s';\nimport { ButtonBar, ListInput, PromiseComponent, history } from '../utils';\nimport { addIDP, getOAuthResource, redirectToOAuthPage, mockNames } from './';\nimport { IDPNameInput } from './idp-name-input';\nimport { IDPCAFileInput } from './idp-cafile-input';\n\nexport class AddLDAPPage extends PromiseComponent<{}, AddLDAPPageState> {\n  readonly state: AddLDAPPageState = {\n    name: 'ldap',\n    url: '',\n    bindDN: '',\n    bindPassword: '',\n    attributesID: ['dn'],\n    attributesPreferredUsername: ['uid'],\n    attributesName: ['cn'],\n    attributesEmail: [],\n    caFileContent: '',\n    inProgress: false,\n    errorMessage: '',\n  };\n\n  getOAuthResource(): Promise<OAuthKind> {\n    return this.handlePromise(getOAuthResource());\n  }\n\n  createCAConfigMap(): Promise<K8sResourceKind> {\n    const { caFileContent } = this.state;\n    if (!caFileContent) {\n      return Promise.resolve(null);\n    }\n\n    const ca = {\n      apiVersion: 'v1',\n      kind: 'ConfigMap',\n      metadata: {\n        generateName: 'ldap-ca-',\n        namespace: 'openshift-config',\n      },\n      data: {\n        'ca.crt': caFileContent,\n      },\n    };\n\n    return this.handlePromise(k8sCreate(ConfigMapModel, ca));\n  }\n\n  createBindPasswordSecret(): Promise<K8sResourceKind> {\n    const { bindPassword } = this.state;\n    if (!bindPassword) {\n      return Promise.resolve(null);\n    }\n\n    const secret = {\n      apiVersion: 'v1',\n      kind: 'Secret',\n      metadata: {\n        generateName: 'ldap-bind-password-',\n        namespace: 'openshift-config',\n      },\n      stringData: {\n        bindPassword,\n      },\n    };\n\n    return this.handlePromise(k8sCreate(SecretModel, secret));\n  }\n\n  addLDAPIDP(\n    oauth: OAuthKind,\n    bindPasswordSecretName: string,\n    caConfigMapName: string,\n    dryRun?: boolean,\n  ): Promise<K8sResourceKind> {\n    const {\n      name,\n      url,\n      bindDN,\n      attributesID,\n      attributesPreferredUsername,\n      attributesName,\n      attributesEmail,\n    } = this.state;\n    const idp: IdentityProvider = {\n      name,\n      mappingMethod: 'claim',\n      type: 'LDAP',\n      ldap: {\n        url,\n        insecure: false,\n        attributes: {\n          id: attributesID,\n          preferredUsername: attributesPreferredUsername,\n          name: attributesName,\n          email: attributesEmail,\n        },\n      },\n    };\n\n    if (bindDN) {\n      idp.ldap.bindDN = bindDN;\n    }\n\n    if (bindPasswordSecretName) {\n      idp.ldap.bindPassword = {\n        name: bindPasswordSecretName,\n      };\n    }\n\n    if (caConfigMapName) {\n      idp.ldap.ca = {\n        name: caConfigMapName,\n      };\n    }\n\n    return this.handlePromise(addIDP(oauth, idp, dryRun));\n  }\n\n  submit: React.FormEventHandler<HTMLFormElement> = (e) => {\n    e.preventDefault();\n    // Clear any previous errors.\n    this.setState({ errorMessage: '' });\n    this.getOAuthResource().then((oauth: OAuthKind) => {\n      const mockSecret = this.state.bindPassword ? mockNames.secret : '';\n      const mockCA = this.state.caFileContent ? mockNames.ca : '';\n      this.addLDAPIDP(oauth, mockSecret, mockCA, true)\n        .then(() => {\n          const promises = [this.createBindPasswordSecret(), this.createCAConfigMap()];\n\n          Promise.all(promises)\n            .then(([bindPasswordSecret, caConfigMap]) => {\n              const bindPasswordSecretName = _.get(bindPasswordSecret, 'metadata.name');\n              const caConfigMapName = _.get(caConfigMap, 'metadata.name');\n              return this.addLDAPIDP(oauth, bindPasswordSecretName, caConfigMapName);\n            })\n            .then(redirectToOAuthPage);\n        })\n        .catch((err) => {\n          this.setState({ errorMessage: err });\n        });\n    });\n  };\n\n  nameChanged: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    this.setState({ name: event.currentTarget.value });\n  };\n\n  urlChanged: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    this.setState({ url: event.currentTarget.value });\n  };\n\n  bindDNChanged: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    this.setState({ bindDN: event.currentTarget.value });\n  };\n\n  bindPasswordChanged: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    this.setState({ bindPassword: event.currentTarget.value });\n  };\n\n  attributesIDChanged = (attributesID: string[]) => {\n    this.setState({ attributesID });\n  };\n\n  attributesPreferredUsernameChanged = (attributesPreferredUsername: string[]) => {\n    this.setState({ attributesPreferredUsername });\n  };\n\n  attributesNameChanged = (attributesName: string[]) => {\n    this.setState({ attributesName });\n  };\n\n  attributesEmailChanged = (attributesEmail: string[]) => {\n    this.setState({ attributesEmail });\n  };\n\n  caFileChanged = (caFileContent: string) => {\n    this.setState({ caFileContent });\n  };\n\n  render() {\n    const {\n      name,\n      url,\n      bindDN,\n      bindPassword,\n      attributesID,\n      attributesPreferredUsername,\n      attributesName,\n      caFileContent,\n    } = this.state;\n    const title = 'Add Identity Provider: LDAP';\n    return (\n      <div className=\"co-m-pane__body\">\n        <Helmet>\n          <title>{title}</title>\n        </Helmet>\n        <form onSubmit={this.submit} name=\"form\" className=\"co-m-pane__body-group co-m-pane__form\">\n          <h1 className=\"co-m-pane__heading\">{title}</h1>\n          <p className=\"co-m-pane__explanation\">Integrate with an LDAP identity provider.</p>\n          <IDPNameInput value={name} onChange={this.nameChanged} />\n          <div className=\"form-group\">\n            <label className=\"control-label co-required\" htmlFor=\"url\">\n              URL\n            </label>\n            <input\n              className=\"pf-c-form-control\"\n              type=\"url\"\n              onChange={this.urlChanged}\n              value={url}\n              id=\"url\"\n              required\n              aria-describedby=\"url-help\"\n            />\n            <div className=\"help-block\" id=\"url-help\">\n              An RFC 2255 URL which specifies the LDAP search parameters to use.\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label className=\"control-label\" htmlFor=\"bind-dn\">\n              Bind DN\n            </label>\n            <input\n              className=\"pf-c-form-control\"\n              type=\"text\"\n              onChange={this.bindDNChanged}\n              value={bindDN}\n              id=\"bind-dn\"\n              aria-describedby=\"bind-dn-help\"\n            />\n            <div className=\"help-block\" id=\"bind-dn-help\">\n              DN to bind with during the search phase.\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label className=\"control-label\" htmlFor=\"bind-password\">\n              Bind Password\n            </label>\n            <input\n              className=\"pf-c-form-control\"\n              type=\"password\"\n              onChange={this.bindPasswordChanged}\n              value={bindPassword}\n              id=\"bind-password\"\n              aria-describedby=\"bind-password-help\"\n            />\n            <div className=\"help-block\" id=\"bind-password-help\">\n              Password to bind with during the search phase.\n            </div>\n          </div>\n          <div className=\"co-form-section__separator\" />\n          <h3>Attributes</h3>\n          <p className=\"co-help-text\">Attributes map LDAP attributes to identities.</p>\n          <ListInput\n            label=\"ID\"\n            required\n            initialValues={attributesID}\n            onChange={this.attributesIDChanged}\n            helpText=\"The list of attributes whose values should be used as the user ID.\"\n          />\n          <ListInput\n            label=\"Preferred Username\"\n            initialValues={attributesPreferredUsername}\n            onChange={this.attributesPreferredUsernameChanged}\n            helpText=\"The list of attributes whose values should be used as the preferred username.\"\n          />\n          <ListInput\n            label=\"Name\"\n            initialValues={attributesName}\n            onChange={this.attributesNameChanged}\n            helpText=\"The list of attributes whose values should be used as the display name.\"\n          />\n          <ListInput\n            label=\"Email\"\n            onChange={this.attributesEmailChanged}\n            helpText=\"The list of attributes whose values should be used as the email address.\"\n          />\n          <div className=\"co-form-section__separator\" />\n          <h3>More Options</h3>\n          <IDPCAFileInput value={caFileContent} onChange={this.caFileChanged} />\n          <ButtonBar errorMessage={this.state.errorMessage} inProgress={this.state.inProgress}>\n            <ActionGroup className=\"pf-c-form\">\n              <Button type=\"submit\" variant=\"primary\" data-test-id=\"add-idp\">\n                Add\n              </Button>\n              <Button type=\"button\" variant=\"secondary\" onClick={history.goBack}>\n                Cancel\n              </Button>\n            </ActionGroup>\n          </ButtonBar>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport type AddLDAPPageState = {\n  name: string;\n  url: string;\n  bindDN: string;\n  bindPassword: string;\n  attributesID: string[];\n  attributesPreferredUsername: string[];\n  attributesName: string[];\n  attributesEmail: string[];\n  caFileContent: string;\n  inProgress: boolean;\n  errorMessage: string;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAOA;AAMA;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAGA;AASA;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAkGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAoHA;AA/QA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAMA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AA+DA;AACA;AAUA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AASA;AAIA;AACA;AAGA;AAQA;AAIA;AACA;AAGA;AAQA;AAIA;AACA;AACA;AACA;AAOA;AAMA;AAMA;AAKA;AACA;AACA;AACA;AACA;AACA;AAGA;AAQA;AACA;;;;;A","sourceRoot":""}