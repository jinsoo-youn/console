{"version":3,"file":"pipeline-details-b87f5837dbdcec2c3f53.js","sources":["webpack:///./packages/dev-console/src/components/pipelines/PipelineDetailsPage.tsx"],"sourcesContent":["import * as React from 'react';\nimport { DetailsPage, DetailsPageProps } from '@console/internal/components/factory';\nimport { KebabAction, navFactory } from '@console/internal/components/utils';\nimport { k8sGet, k8sList } from '@console/internal/module/k8s';\nimport { ErrorPage404 } from '@console/internal/components/error';\nimport { getPipelineKebabActions } from '../../utils/pipeline-actions';\nimport { getLatestRun, PipelineRun } from '../../utils/pipeline-augment';\nimport { PipelineRunModel, PipelineModel } from '../../models';\nimport { useMenuActionsWithUserLabel } from '../pipelineruns/triggered-by';\nimport {\n  PipelineDetails,\n  PipelineForm,\n  PipelineParametersForm,\n  PipelineResourcesForm,\n  PipelineRuns,\n  parametersValidationSchema,\n  resourcesValidationSchema,\n} from './detail-page-tabs';\nimport { usePipelineTriggerTemplateNames } from './utils/triggers';\n\nconst PipelineDetailsPage: React.FC<DetailsPageProps> = (props) => {\n  const [errorCode, setErrorCode] = React.useState(null);\n  const [latestPipelineRun, setLatestPipelineRun] = React.useState<PipelineRun>({});\n  const { name, namespace } = props;\n  const templateNames = usePipelineTriggerTemplateNames(name, namespace) || [];\n\n  React.useEffect(() => {\n    k8sGet(PipelineModel, name, namespace)\n      .then((res) => {\n        // eslint-disable-next-line promise/no-nesting\n        k8sList(PipelineRunModel, {\n          ns: namespace,\n          labelSelector: { 'tekton.dev/pipeline': res.metadata.name },\n        })\n          .then((listres) => {\n            const latestRun = getLatestRun({ data: listres }, 'creationTimestamp');\n            setLatestPipelineRun(latestRun);\n          })\n          .catch((error) => {\n            setErrorCode(error.response.status);\n          });\n      })\n      .catch((error) => setErrorCode(error.response.status));\n  }, [name, namespace]);\n\n  const augmentedMenuActions: KebabAction[] = useMenuActionsWithUserLabel(\n    getPipelineKebabActions(latestPipelineRun, templateNames.length > 0),\n  );\n\n  if (errorCode === 404) {\n    return <ErrorPage404 />;\n  }\n  return (\n    <DetailsPage\n      {...props}\n      menuActions={augmentedMenuActions}\n      customData={templateNames}\n      pages={[\n        navFactory.details(PipelineDetails),\n        navFactory.editYaml(),\n        {\n          href: 'Runs',\n          name: 'Pipeline Runs',\n          component: PipelineRuns,\n        },\n        {\n          href: 'parameters',\n          name: 'Parameters',\n          component: (pageProps) => (\n            <PipelineForm\n              PipelineFormComponent={PipelineParametersForm}\n              formName=\"parameters\"\n              validationSchema={parametersValidationSchema}\n              obj={pageProps.obj}\n              {...pageProps}\n            />\n          ),\n        },\n        {\n          href: 'resources',\n          name: 'Resources',\n          component: (pageProps) => (\n            <PipelineForm\n              PipelineFormComponent={PipelineResourcesForm}\n              formName=\"resources\"\n              validationSchema={resourcesValidationSchema}\n              obj={pageProps.obj}\n              {...pageProps}\n            />\n          ),\n        },\n      ]}\n    />\n  );\n};\n\nexport default PipelineDetailsPage;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AASA;AACA;AAGA;AAEA;;;;;A","sourceRoot":""}