{"version":3,"file":"api-explorer-9e205e4129cccd49ac19.js","sources":["webpack:///./public/components/api-explorer.tsx","webpack:///./public/components/sidebars/explore-type-sidebar.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Link, withRouter } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { compose } from 'redux';\nimport * as _ from 'lodash-es';\nimport { Helmet } from 'react-helmet';\nimport { Map as ImmutableMap } from 'immutable';\nimport * as fuzzy from 'fuzzysearch';\nimport { Tooltip } from '@patternfly/react-core';\nimport { sortable } from '@patternfly/react-table';\n\nimport { ALL_NAMESPACES_KEY, FLAGS, APIError } from '@console/shared';\nimport { useAccessReview } from '@console/internal/components/utils';\nimport { connectToModel } from '../kinds';\nimport { LocalResourceAccessReviewsModel, ResourceAccessReviewsModel } from '../models';\nimport {\n  apiVersionForModel,\n  k8sCreate,\n  K8sKind,\n  K8sResourceKindReference,\n  K8sVerb,\n  getResourceDescription,\n  referenceForModel,\n  ResourceAccessReviewRequest,\n  ResourceAccessReviewResponse,\n} from '../module/k8s';\nimport { connectToFlags, FlagsObject } from '../reducers/features';\nimport { RootState } from '../redux';\nimport { CheckBox, CheckBoxControls } from './row-filter';\nimport { DefaultPage } from './default-resource';\nimport { Table, TextFilter } from './factory';\nimport { fuzzyCaseInsensitive } from './factory/table-filters';\nimport { resourceListPages } from './resource-pages';\nimport { ExploreType } from './sidebars/explore-type-sidebar';\nimport {\n  AsyncComponent,\n  BreadCrumbs,\n  Dropdown,\n  EmptyBox,\n  HorizontalNav,\n  LinkifyExternal,\n  LoadError,\n  LoadingBox,\n  removeQueryArgument,\n  ResourceIcon,\n  ScrollToTopOnMount,\n  setQueryArgument,\n} from './utils';\n\nconst mapStateToProps = (state: RootState): APIResourceLinkStateProps => {\n  return {\n    activeNamespace: state.UI.get('activeNamespace'),\n  };\n};\n\nconst getAPIResourceLink = (activeNamespace: string, model: K8sKind) => {\n  const ref = referenceForModel(model);\n  if (!model.namespaced) {\n    return `/api-resource/cluster/${ref}`;\n  }\n\n  if (activeNamespace === ALL_NAMESPACES_KEY) {\n    return `/api-resource/all-namespaces/${ref}`;\n  }\n\n  return `/api-resource/ns/${activeNamespace}/${ref}`;\n};\n\nconst APIResourceLink_: React.FC<APIResourceLinkStateProps & APIResourceLinkOwnProps> = ({\n  activeNamespace,\n  model,\n}) => {\n  const to = getAPIResourceLink(activeNamespace, model);\n  return (\n    <span className=\"co-resource-item\">\n      <span className=\"co-resource-icon--fixed-width hidden-xs\">\n        <ResourceIcon kind={referenceForModel(model)} />\n      </span>\n      <Link to={to} className=\"co-resource-item__resource-name\">\n        {model.kind}\n      </Link>\n    </span>\n  );\n};\nconst APIResourceLink = connect<APIResourceLinkStateProps, {}, APIResourceLinkOwnProps>(\n  mapStateToProps,\n)(APIResourceLink_);\n\nconst EmptyAPIResourcesMsg: React.FC<{}> = () => <EmptyBox label=\"API Resources\" />;\n\nconst Group: React.FC<{ value: string }> = ({ value }) => {\n  if (!value) {\n    return <>-</>;\n  }\n\n  const [first, ...rest] = value.split('.');\n  return _.isEmpty(rest) ? (\n    <>{value}</>\n  ) : (\n    <>\n      {first}\n      <span className=\"text-muted\">.{rest.join('.')}</span>\n    </>\n  );\n};\n\nconst tableClasses = [\n  'col-lg-3 col-md-3 col-sm-5 col-xs-4',\n  'col-lg-2 col-md-2 col-sm-4 col-xs-4',\n  'col-lg-2 col-md-2 col-sm-3 col-xs-4',\n  'col-lg-2 hidden-md hidden-sm hidden-xs',\n  'col-lg-3 col-md-5 hidden-sm hidden-xs',\n];\n\nconst APIResourceHeader = () => [\n  {\n    title: 'Kind',\n    sortField: 'kind',\n    transforms: [sortable],\n    props: { className: tableClasses[0] },\n  },\n  {\n    title: 'Group',\n    sortField: 'apiGroup',\n    transforms: [sortable],\n    props: { className: tableClasses[1] },\n  },\n  {\n    title: 'Version',\n    sortField: 'apiVersion',\n    transforms: [sortable],\n    props: { className: tableClasses[2] },\n  },\n  {\n    title: 'Namespaced',\n    sortField: 'namespaced',\n    transforms: [sortable],\n    props: { className: tableClasses[3] },\n  },\n  {\n    title: 'Description',\n    props: { className: tableClasses[4] },\n  },\n];\n\nconst APIResourceRows = ({ componentProps: { data } }) =>\n  _.map(data, (model: K8sKind) => [\n    {\n      title: <APIResourceLink model={model} />,\n      props: { className: tableClasses[0] },\n    },\n    {\n      title: (\n        <span className=\"co-select-to-copy\">\n          <Group value={model.apiGroup} />\n        </span>\n      ),\n      props: { className: tableClasses[1] },\n    },\n    {\n      title: model.apiVersion,\n      props: { className: tableClasses[2] },\n    },\n    {\n      title: model.namespaced ? 'true' : 'false',\n      props: { className: tableClasses[3] },\n    },\n    {\n      title: <div className=\"co-line-clamp\">{getResourceDescription(model)}</div>,\n      props: { className: tableClasses[4] },\n    },\n  ]);\n\nconst stateToProps = ({ k8s }) => ({\n  models: k8s.getIn(['RESOURCES', 'models']),\n});\n\nconst APIResourcesList = compose(\n  withRouter,\n  connect<APIResourcesListPropsFromState>(stateToProps),\n)(({ models, location }) => {\n  const ALL = '#all#';\n  const GROUP_PARAM = 'g';\n  const VERSION_PARAM = 'v';\n  const TEXT_FILTER_PARAM = 'q';\n  const SCOPE_PARAM = 's';\n  const search = new URLSearchParams(location.search);\n  // Differentiate between an empty group and an unspecified param.\n  const groupFilter = search.has(GROUP_PARAM) ? search.get(GROUP_PARAM) : ALL;\n  const versionFilter = search.get(VERSION_PARAM) || ALL;\n  const textFilter = search.get(TEXT_FILTER_PARAM) || '';\n  const scopeFilter = search.get(SCOPE_PARAM) || ALL;\n\n  // group options\n  const groups: Set<string> = models.reduce((result: Set<string>, { apiGroup }) => {\n    return apiGroup ? result.add(apiGroup) : result;\n  }, new Set<string>());\n  const sortedGroups: string[] = [...groups].sort();\n  const groupOptions = sortedGroups.reduce(\n    (result, group: string) => {\n      result[group] = <Group value={group} />;\n      return result;\n    },\n    { [ALL]: 'All Groups', '': 'No Group' },\n  );\n\n  const groupSpacer = new Set<string>();\n  if (sortedGroups.length) {\n    groupSpacer.add(sortedGroups[0]);\n  }\n\n  const autocompleteGroups = (text: string, item: string, key: string): boolean => {\n    return key !== ALL && fuzzy(text, key);\n  };\n\n  // version options\n  const versions: Set<string> = models.reduce((result: Set<string>, { apiVersion }) => {\n    return result.add(apiVersion);\n  }, new Set<string>());\n  const sortedVersions: string[] = [...versions].sort();\n  const versionOptions = sortedVersions.reduce(\n    (result, version: string) => {\n      result[version] = version;\n      return result;\n    },\n    { [ALL]: 'All Versions' },\n  );\n\n  const versionSpacer = new Set<string>();\n  if (sortedVersions.length) {\n    versionSpacer.add(sortedVersions[0]);\n  }\n\n  const scopeOptions = {\n    [ALL]: 'All Scopes',\n    cluster: 'Cluster',\n    namespace: 'Namespace',\n  };\n  const scopeSpacer = new Set<string>(['cluster']);\n\n  // filter by group, version, or text\n  const filteredResources = models.filter(({ kind, apiGroup, apiVersion, namespaced }) => {\n    if (groupFilter !== ALL && (apiGroup || '') !== groupFilter) {\n      return false;\n    }\n\n    if (versionFilter !== ALL && apiVersion !== versionFilter) {\n      return false;\n    }\n\n    if (scopeFilter === 'cluster' && namespaced) {\n      return false;\n    }\n\n    if (scopeFilter === 'namespace' && !namespaced) {\n      return false;\n    }\n\n    if (textFilter) {\n      return fuzzyCaseInsensitive(textFilter, kind);\n    }\n\n    return true;\n  });\n\n  // Put models with no API group (core k8s resources) at the top.\n  const sortedResources = _.sortBy(filteredResources.toArray(), [\n    ({ apiGroup }) => apiGroup || '1',\n    'apiVersion',\n    'kind',\n  ]);\n\n  const updateURL = (k: string, v: string) => {\n    if (v === ALL) {\n      removeQueryArgument(k);\n    } else {\n      setQueryArgument(k, v);\n    }\n  };\n  const onGroupSelected = (group: string) => updateURL(GROUP_PARAM, group);\n  const onVersionSelected = (version: string) => updateURL(VERSION_PARAM, version);\n  const onScopeSelected = (scope: string) => updateURL(SCOPE_PARAM, scope);\n  const setTextFilter = (text: string) => {\n    if (!text) {\n      removeQueryArgument(TEXT_FILTER_PARAM);\n    } else {\n      setQueryArgument(TEXT_FILTER_PARAM, text);\n    }\n  };\n\n  return (\n    <>\n      <div className=\"co-m-pane__filter-bar\">\n        <div className=\"co-m-pane__filter-bar-group\">\n          <Dropdown\n            autocompleteFilter={autocompleteGroups}\n            items={groupOptions}\n            onChange={onGroupSelected}\n            selectedKey={groupFilter}\n            spacerBefore={groupSpacer}\n            title={groupOptions[groupFilter]}\n            className=\"btn-group\"\n          />\n          <Dropdown\n            items={versionOptions}\n            onChange={onVersionSelected}\n            selectedKey={versionFilter}\n            spacerBefore={versionSpacer}\n            title={versionOptions[versionFilter]}\n            className=\"btn-group\"\n          />\n          <Dropdown\n            items={scopeOptions}\n            onChange={onScopeSelected}\n            selectedKey={scopeFilter}\n            spacerBefore={scopeSpacer}\n            title={scopeOptions[scopeFilter]}\n            className=\"btn-group\"\n          />\n        </div>\n        <div className=\"co-m-pane__filter-bar-group co-m-pane__filter-bar-group--filter\">\n          <TextFilter value={textFilter} label=\"by kind\" onChange={setTextFilter} />\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <Table\n          EmptyMsg={EmptyAPIResourcesMsg}\n          Header={APIResourceHeader}\n          Rows={APIResourceRows}\n          aria-label=\"API Resources\"\n          data={sortedResources}\n          loaded={!!models.size}\n          virtualize={false}\n        />\n      </div>\n    </>\n  );\n});\nAPIResourcesList.displayName = 'APIResourcesList';\n\nexport const APIExplorerPage: React.FC<{}> = () => (\n  <>\n    <Helmet>\n      <title>Explore API Resources</title>\n    </Helmet>\n    <div className=\"co-m-nav-title\">\n      <h1 className=\"co-m-pane__heading\">Explore API Resources</h1>\n    </div>\n    <APIResourcesList />\n  </>\n);\nAPIExplorerPage.displayName = 'APIExplorerPage';\n\nconst APIResourceDetails: React.FC<APIResourceTabProps> = ({ customData: { kindObj } }) => {\n  const { kind, apiGroup, apiVersion, namespaced, verbs, shortNames } = kindObj;\n  const description = getResourceDescription(kindObj);\n  return (\n    <div className=\"co-m-pane__body\">\n      <dl className=\"co-m-pane__details\">\n        <dt>Kind</dt>\n        <dd>{kind}</dd>\n        <dt>API Group</dt>\n        <dd className=\"co-select-to-copy\">{apiGroup || '-'}</dd>\n        <dt>API Version</dt>\n        <dd>{apiVersion}</dd>\n        <dt>Namespaced</dt>\n        <dd>{namespaced ? 'true' : 'false'}</dd>\n        <dt>Verbs</dt>\n        <dd>{verbs.join(', ')}</dd>\n        {shortNames && (\n          <>\n            <dt>\n              <Tooltip content=\"Short names can be used to match this resource on the CLI.\">\n                <span>Short Names</span>\n              </Tooltip>\n            </dt>\n            <dd>{shortNames.join(', ')}</dd>\n          </>\n        )}\n        {description && (\n          <>\n            <dt>Description</dt>\n            <dd className=\"co-break-word co-pre-wrap\">\n              <LinkifyExternal>{description}</LinkifyExternal>\n            </dd>\n          </>\n        )}\n      </dl>\n    </div>\n  );\n};\n\nconst scrollTop = () => (document.getElementById('content-scrollable').scrollTop = 0);\nconst APIResourceSchema: React.FC<APIResourceTabProps> = ({ customData: { kindObj } }) => {\n  return (\n    <div className=\"co-m-pane__body\">\n      <ExploreType kindObj={kindObj} scrollTop={scrollTop} />\n    </div>\n  );\n};\n\nconst APIResourceInstances: React.FC<APIResourceTabProps> = ({\n  customData: { kindObj, namespace },\n}) => {\n  const componentLoader = resourceListPages.get(referenceForModel(kindObj), () =>\n    Promise.resolve(DefaultPage),\n  );\n  const ns = kindObj.namespaced ? namespace : undefined;\n\n  return (\n    <AsyncComponent\n      loader={componentLoader}\n      namespace={ns}\n      kind={kindObj.crd ? referenceForModel(kindObj) : kindObj.kind}\n      showTitle={false}\n      autoFocus={false}\n    />\n  );\n};\n\nconst Subject: React.FC<{ value: string }> = ({ value }) => {\n  const [first, ...rest] = value.split(':');\n  return first === 'system' && !_.isEmpty(rest) ? (\n    <>\n      <span className=\"text-muted\">{first}:</span>\n      {rest.join(':')}\n    </>\n  ) : (\n    <>{value}</>\n  );\n};\n\nconst AccessTableHeader = () => [\n  {\n    title: 'Subject',\n    sortField: 'name',\n    transforms: [sortable],\n  },\n  {\n    title: 'Type',\n    sortField: 'type',\n    transforms: [sortable],\n  },\n];\n\nconst AccessTableRows = ({ componentProps: { data } }) =>\n  _.map(data, (subject) => [\n    {\n      title: (\n        <span className=\"co-break-word co-select-to-copy\">\n          <Subject value={subject.name} />\n        </span>\n      ),\n    },\n    {\n      title: subject.type,\n    },\n  ]);\n\nconst EmptyAccessReviewMsg: React.FC<{}> = () => <EmptyBox label=\"Subjects\" />;\n\nconst APIResourceAccessReview: React.FC<APIResourceTabProps> = ({\n  customData: { kindObj, namespace },\n}) => {\n  const { apiGroup, apiVersion, namespaced, plural, verbs } = kindObj;\n\n  // state\n  const [verb, setVerb] = React.useState(_.first(verbs));\n  const [filter, setFilter] = React.useState('');\n  const [showUsers, setShowUsers] = React.useState(true);\n  const [showGroups, setShowGroups] = React.useState(true);\n  const [showServiceAccounts, setShowServiceAccounts] = React.useState(false);\n  const [accessResponse, setAccessResponse] = React.useState<ResourceAccessReviewResponse>();\n  const [error, setError] = React.useState<APIError>();\n\n  // perform the access review\n  React.useEffect(() => {\n    setError(null);\n    const accessReviewModel = namespace\n      ? LocalResourceAccessReviewsModel\n      : ResourceAccessReviewsModel;\n    const req: ResourceAccessReviewRequest = {\n      apiVersion: apiVersionForModel(accessReviewModel),\n      kind: accessReviewModel.kind,\n      namespace,\n      resourceAPIVersion: apiVersion,\n      resourceAPIGroup: apiGroup,\n      resource: plural,\n      verb,\n    };\n    k8sCreate(accessReviewModel, req, { ns: namespace })\n      .then(setAccessResponse)\n      .catch(setError);\n  }, [apiGroup, apiVersion, plural, namespace, verb]);\n\n  if (error) {\n    return (\n      <LoadError\n        message={error.message}\n        label=\"Access Review\"\n        className=\"loading-box loading-box__errored\"\n      />\n    );\n  }\n\n  if (!accessResponse) {\n    return <LoadingBox />;\n  }\n\n  // break into users, groups, and service accounts\n  const users = [];\n  const serviceAccounts = [];\n  _.each(accessResponse.users, (name: string) => {\n    if (name.startsWith('system:serviceaccount:')) {\n      serviceAccounts.push({ name, type: 'ServiceAccount' });\n    } else {\n      users.push({ name, type: 'User' });\n    }\n  });\n  const groups = _.map(accessResponse.groups, (name: string) => ({ name, type: 'Group' }));\n\n  // filter and sort\n  const verbOptions = _.zipObject(verbs, verbs);\n  const data = [\n    ...(showUsers ? users : []),\n    ...(showGroups ? groups : []),\n    ...(showServiceAccounts ? serviceAccounts : []),\n  ];\n  const allSelected = showUsers && showGroups && showServiceAccounts;\n  const itemCount = accessResponse.users.length + accessResponse.groups.length;\n  const selectedCount = data.length;\n  const filteredData = data.filter(({ name }: { name: string }) => fuzzy(filter, name));\n  const sortedData = _.orderBy(filteredData, ['type', 'name'], ['asc', 'asc']);\n\n  // event handlers\n  const toggleShowUsers = (e: React.MouseEvent<HTMLAnchorElement>) => {\n    e.preventDefault();\n    setShowUsers(!showUsers);\n  };\n  const toggleShowGroups = (e: React.MouseEvent<HTMLAnchorElement>) => {\n    e.preventDefault();\n    setShowGroups(!showGroups);\n  };\n  const toggleShowServiceAccounts = (e: React.MouseEvent<HTMLAnchorElement>) => {\n    e.preventDefault();\n    setShowServiceAccounts(!showServiceAccounts);\n  };\n  const onSelectAll = (e: React.MouseEvent<HTMLButtonElement>) => {\n    e.preventDefault();\n    setShowUsers(true);\n    setShowGroups(true);\n    setShowServiceAccounts(true);\n  };\n\n  return (\n    <>\n      <div className=\"co-m-pane__filter-bar\">\n        <div className=\"co-m-pane__filter-bar-group\">\n          <Dropdown\n            items={verbOptions}\n            onChange={(v: K8sVerb) => setVerb(v)}\n            selectedKey={verb}\n            titlePrefix=\"Verb\"\n          />\n        </div>\n        <div className=\"co-m-pane__filter-bar-group co-m-pane__filter-bar-group--filter\">\n          <TextFilter defaultValue={filter} label=\"by subject\" onChange={(val) => setFilter(val)} />\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <CheckBoxControls\n          allSelected={allSelected}\n          itemCount={itemCount}\n          selectedCount={selectedCount}\n          onSelectAll={onSelectAll}\n        >\n          <CheckBox\n            title=\"User\"\n            active={showUsers}\n            number={users.length}\n            toggle={toggleShowUsers}\n          />\n          <CheckBox\n            title=\"Group\"\n            active={showGroups}\n            number={groups.length}\n            toggle={toggleShowGroups}\n          />\n          <CheckBox\n            title=\"ServiceAccount\"\n            active={showServiceAccounts}\n            number={serviceAccounts.length}\n            toggle={toggleShowServiceAccounts}\n          />\n        </CheckBoxControls>\n        <p className=\"co-m-pane__explanation\">\n          The following subjects can {verb} {plural}\n          {namespaced && namespace && <> in namespace {namespace}</>}\n          {namespaced && !namespace && <> in all namespaces</>}\n          {!namespaced && <> at the cluster scope</>}.\n        </p>\n        <Table\n          EmptyMsg={EmptyAccessReviewMsg}\n          Header={AccessTableHeader}\n          Rows={AccessTableRows}\n          aria-label=\"API Resources\"\n          data={sortedData}\n          loaded\n          virtualize={false}\n        />\n      </div>\n    </>\n  );\n};\n\nconst APIResourcePage_ = ({\n  match,\n  kindObj,\n  kindsInFlight,\n  flags,\n}: {\n  match: any;\n  kindObj: K8sKind;\n  kindsInFlight: boolean;\n  flags: FlagsObject;\n}) => {\n  const namespace = kindObj?.namespaced ? match.params.ns : undefined;\n\n  const canCreateResourceAccessReview = useAccessReview({\n    group: namespace\n      ? LocalResourceAccessReviewsModel.apiGroup\n      : ResourceAccessReviewsModel.apiGroup,\n    resource: namespace\n      ? LocalResourceAccessReviewsModel.plural\n      : ResourceAccessReviewsModel.plural,\n    namespace,\n    verb: 'create',\n  });\n\n  if (!kindObj) {\n    return kindsInFlight ? (\n      <LoadingBox />\n    ) : (\n      <div className=\"co-m-pane__body\">\n        <h1 className=\"co-m-pane__heading co-m-pane__heading--center\">404: Not Found</h1>\n      </div>\n    );\n  }\n\n  const breadcrumbs = [\n    {\n      name: 'Explore',\n      path: '/api-explorer',\n    },\n    {\n      name: 'Resource Details',\n      path: match.url,\n    },\n  ];\n\n  const pages = [\n    {\n      href: '',\n      name: 'Details',\n      component: APIResourceDetails,\n    },\n    {\n      href: 'schema',\n      name: 'Schema',\n      component: APIResourceSchema,\n    },\n  ];\n\n  if (_.isEmpty(kindObj.verbs) || kindObj.verbs.includes('list')) {\n    pages.push({\n      href: 'instances',\n      name: 'Instances',\n      component: APIResourceInstances,\n    });\n  }\n\n  if (flags[FLAGS.OPENSHIFT] && canCreateResourceAccessReview) {\n    pages.push({\n      href: 'access',\n      name: 'Access Review',\n      component: APIResourceAccessReview,\n    });\n  }\n\n  return (\n    <>\n      <ScrollToTopOnMount />\n      <Helmet>\n        <title>{kindObj.label}</title>\n      </Helmet>\n      <div className=\"co-m-nav-title co-m-nav-title--detail co-m-nav-title--breadcrumbs\">\n        <BreadCrumbs breadcrumbs={breadcrumbs} />\n        <h1 className=\"co-m-pane__heading\" data-test-id=\"api-explorer-resource-title\">\n          {kindObj.label}\n        </h1>\n      </div>\n      <HorizontalNav pages={pages} match={match} customData={{ kindObj, namespace }} noStatusBox />\n    </>\n  );\n};\nexport const APIResourcePage = connectToModel(connectToFlags(FLAGS.OPENSHIFT)(APIResourcePage_));\n\ntype APIResourceLinkStateProps = {\n  activeNamespace: string;\n};\n\ntype APIResourcesListPropsFromState = {\n  models: ImmutableMap<K8sResourceKindReference, K8sKind>;\n};\n\ntype APIResourceLinkOwnProps = {\n  model: K8sKind;\n};\n\ntype APIResourceTabProps = {\n  customData: {\n    kindObj: K8sKind;\n    namespace?: string;\n  };\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Breadcrumb, BreadcrumbItem, Button } from '@patternfly/react-core';\n\nimport {\n  getDefinitionKey,\n  getStoredSwagger,\n  getSwaggerPath,\n  K8sKind,\n  SwaggerDefinition,\n  SwaggerDefinitions,\n} from '../../module/k8s';\nimport { CamelCaseWrap, EmptyBox, LinkifyExternal } from '../utils';\n\nconst getRef = (definition: SwaggerDefinition): string => {\n  const ref = definition.$ref || _.get(definition, 'items.$ref');\n  const re = /^#\\/definitions\\//;\n  // Only follow JSON pointers, not external URI references.\n  return ref && re.test(ref) ? ref.replace(re, '') : null;\n};\n\nexport const ExploreType: React.FC<ExploreTypeProps> = (props) => {\n  // Track the previously selected items to build breadcrumbs. Each history\n  // entry contains the name, description, and path to the definition in the\n  // OpenAPI document.\n  const [drilldownHistory, setDrilldownHistory] = React.useState([]);\n  const { kindObj } = props;\n  if (!kindObj) {\n    return null;\n  }\n\n  const allDefinitions: SwaggerDefinitions = getStoredSwagger();\n  if (!allDefinitions) {\n    return null;\n  }\n  const currentSelection = _.last(drilldownHistory);\n  // Show the current selected property or the top-level definition for the kind.\n  const currentPath = currentSelection\n    ? currentSelection.path\n    : [getDefinitionKey(kindObj, allDefinitions)];\n  const currentDefinition: SwaggerDefinition = _.get(allDefinitions, currentPath) || {};\n  const currentProperties =\n    _.get(currentDefinition, 'properties') || _.get(currentDefinition, 'items.properties');\n\n  // Prefer the description saved in `currentSelection`. It won't always be defined in the definition itself.\n  const description = currentSelection\n    ? currentSelection.description\n    : currentDefinition.description;\n  const required = new Set(currentDefinition.required || []);\n  const breadcrumbs = drilldownHistory.length\n    ? [kindObj.kind, ..._.map(drilldownHistory, 'name')]\n    : [];\n\n  const drilldown = (\n    e: React.MouseEvent<HTMLButtonElement>,\n    name: string,\n    desc: string,\n    path: string[],\n  ) => {\n    e.preventDefault();\n    setDrilldownHistory([...drilldownHistory, { name, description: desc, path }]);\n    if (props.scrollTop) {\n      props.scrollTop();\n    }\n  };\n\n  const breadcrumbClicked = (e: React.MouseEvent<HTMLButtonElement>, i: number) => {\n    e.preventDefault();\n    setDrilldownHistory(_.take(drilldownHistory, i));\n  };\n\n  // Get the path in the swagger document to additional property details for drilldown.\n  // This can be\n  // - A reference to another top-level definition\n  // - Inline property declartions\n  // - Inline property declartions for array items\n  const getDrilldownPath = (name: string): string[] => {\n    const path = getSwaggerPath(allDefinitions, currentPath, name, true);\n    // Only allow drilldown if the reference has additional properties to explore.\n    const child = _.get(allDefinitions, path) as SwaggerDefinition;\n    return _.has(child, 'properties') || _.has(child, 'items.properties') ? path : null;\n  };\n\n  // Get the type to display for a property reference.\n  const getTypeForRef = (ref: string): string =>\n    _.get(allDefinitions, [ref, 'format']) || _.get(allDefinitions, [ref, 'type']);\n\n  return (\n    <>\n      {!_.isEmpty(breadcrumbs) && (\n        <Breadcrumb className=\"pf-c-breadcrumb--no-padding-top co-break-word\">\n          {breadcrumbs.map((crumb, i) => {\n            const isLast = i === breadcrumbs.length - 1;\n            return (\n              <BreadcrumbItem key={i} isActive={isLast}>\n                {isLast ? (\n                  crumb\n                ) : (\n                  <Button\n                    type=\"button\"\n                    onClick={(e) => breadcrumbClicked(e, i)}\n                    isInline\n                    variant=\"link\"\n                  >\n                    {crumb}\n                  </Button>\n                )}\n              </BreadcrumbItem>\n            );\n          })}\n        </Breadcrumb>\n      )}\n      {description && (\n        <p className=\"co-break-word co-pre-wrap\">\n          <LinkifyExternal>{description}</LinkifyExternal>\n        </p>\n      )}\n      {_.isEmpty(currentProperties) ? (\n        <EmptyBox label=\"Properties\" />\n      ) : (\n        <ul className=\"co-resource-sidebar-list\">\n          {_.map(currentProperties, (definition: SwaggerDefinition, name: string) => {\n            const path = getDrilldownPath(name);\n            const definitionType = definition.type || getTypeForRef(getRef(definition));\n            return (\n              <li key={name} className=\"co-resource-sidebar-item\">\n                <h5 className=\"co-resource-sidebar-item__header co-break-word\">\n                  <CamelCaseWrap value={name} />\n                  &nbsp;\n                  <small>\n                    <span className=\"co-break-word\">{definitionType}</span>\n                    {required.has(name) && <> &ndash; required</>}\n                  </small>\n                </h5>\n                {definition.description && (\n                  <p className=\"co-break-word co-pre-wrap\">\n                    <LinkifyExternal>{definition.description}</LinkifyExternal>\n                  </p>\n                )}\n                {path && (\n                  <Button\n                    type=\"button\"\n                    onClick={(e) => drilldown(e, name, definition.description, path)}\n                    isInline\n                    variant=\"link\"\n                  >\n                    View details\n                  </Button>\n                )}\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n};\n\ntype ExploreTypeProps = {\n  kindObj: K8sKind;\n  scrollTop?: () => void;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAeA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAIA;AACA;AAEA;AACA;AAEA;AAKA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;;AAAA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AASA;AAQA;AASA;AACA;AAGA;AACA;AAYA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AAGA;AAEA;AACA;AACA;AAOA;AAEA;AACA;AACA;AAEA;AAGA;AAEA;AAGA;AAGA;AAEA;AASA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAKA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAOA;AACA;AAGA;AACA;AAMA;AAMA;AAMA;AAOA;;AACA;;AAAA;AACA;;AAAA;AACA;AACA;AACA;AACA;AAYA;AAEA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAGA;AACA;;;;;;;;;;;;;ACjsBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AAGA;AACA;AAgBA;AAGA;AAEA;AAGA;AAKA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AAGA;AAEA;AAGA;AAYA;AAKA;;;;;A","sourceRoot":""}