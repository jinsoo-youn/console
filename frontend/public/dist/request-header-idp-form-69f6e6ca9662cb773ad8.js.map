{"version":3,"file":"request-header-idp-form-69f6e6ca9662cb773ad8.js","sources":["webpack:///./public/components/cluster-settings/idp-cafile-input.tsx","webpack:///./public/components/cluster-settings/idp-name-input.tsx","webpack:///./public/components/cluster-settings/index.ts","webpack:///./public/components/cluster-settings/request-header-idp-form.tsx"],"sourcesContent":["import * as React from 'react';\nimport { AsyncComponent } from '../utils';\n\nconst DroppableFileInput = (props: any) => (\n  <AsyncComponent\n    loader={() => import('../utils/file-input').then((c) => c.DroppableFileInput)}\n    {...props}\n  />\n);\n\nexport const IDPCAFileInput: React.FC<IDPCAFileInputProps> = ({\n  value,\n  onChange,\n  isRequired = false,\n}) => (\n  <div className=\"form-group\">\n    <DroppableFileInput\n      onChange={onChange}\n      inputFileData={value}\n      id=\"idp-file-input\"\n      label=\"CA File\"\n      isRequired={isRequired}\n      hideContents\n    />\n  </div>\n);\n\ntype IDPCAFileInputProps = {\n  value: string;\n  onChange: (value: string) => void;\n  isRequired?: boolean;\n};\n","import * as React from 'react';\n\nexport const IDPNameInput: React.FC<IDPNameInputProps> = ({ value, onChange }) => (\n  <div className=\"form-group\">\n    <label className=\"control-label co-required\" htmlFor=\"idp-name\">\n      Name\n    </label>\n    <input\n      className=\"pf-c-form-control\"\n      type=\"text\"\n      onChange={onChange}\n      value={value}\n      aria-describedby=\"idp-name-help\"\n      id=\"idp-name\"\n      required\n    />\n    <p className=\"help-block\" id=\"idp-name-help\">\n      Unique name of the new identity provider. This cannot be changed later.\n    </p>\n  </div>\n);\n\ntype IDPNameInputProps = {\n  value: string;\n  onChange: React.ReactEventHandler<HTMLInputElement>;\n};\n","import * as _ from 'lodash-es';\n\nimport { OAuthModel } from '../../models';\nimport { IdentityProvider, k8sGet, k8sPatch, OAuthKind } from '../../module/k8s';\nimport { history, resourcePathFromModel } from '../utils';\nimport { dryRunOpt } from '@console/dev-console/src/utils/shared-submit-utils';\n\n// The name of the cluster-scoped OAuth configuration resource.\nconst OAUTH_RESOURCE_NAME = 'cluster';\n\nexport const getOAuthResource = (): Promise<OAuthKind> => k8sGet(OAuthModel, OAUTH_RESOURCE_NAME);\n\nexport const addIDP = (\n  oauth: OAuthKind,\n  idp: IdentityProvider,\n  dryRun?: boolean,\n): Promise<OAuthKind> => {\n  const patch = _.isEmpty(oauth.spec.identityProviders)\n    ? { op: 'add', path: '/spec/identityProviders', value: [idp] }\n    : { op: 'add', path: '/spec/identityProviders/-', value: idp };\n  return k8sPatch(OAuthModel, oauth, [patch], dryRun ? dryRunOpt : {});\n};\n\nexport const redirectToOAuthPage = () => {\n  const path = resourcePathFromModel(OAuthModel, OAUTH_RESOURCE_NAME);\n  history.push(path);\n};\n\nexport const mockNames = {\n  secret: 'secret-name',\n  ca: 'ca-name',\n};\n","import * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { ActionGroup, Button } from '@patternfly/react-core';\n\nimport { ConfigMapModel } from '../../models';\nimport { IdentityProvider, k8sCreate, K8sResourceKind, OAuthKind } from '../../module/k8s';\nimport { ButtonBar, ListInput, PromiseComponent, history } from '../utils';\nimport { addIDP, getOAuthResource, redirectToOAuthPage, mockNames } from './';\nimport { IDPNameInput } from './idp-name-input';\nimport { IDPCAFileInput } from './idp-cafile-input';\n\nexport class AddRequestHeaderPage extends PromiseComponent<{}, AddRequestHeaderPageState> {\n  readonly state: AddRequestHeaderPageState = {\n    name: 'request-header',\n    challengeURL: '',\n    loginURL: '',\n    clientCommonNames: [],\n    headers: [],\n    preferredUsernameHeaders: [],\n    nameHeaders: [],\n    emailHeaders: [],\n    caFileContent: '',\n    inProgress: false,\n    errorMessage: '',\n  };\n\n  getOAuthResource(): Promise<OAuthKind> {\n    return this.handlePromise(getOAuthResource());\n  }\n\n  createCAConfigMap(): Promise<K8sResourceKind> {\n    const { caFileContent } = this.state;\n    if (!caFileContent) {\n      return Promise.resolve(null);\n    }\n\n    const ca = {\n      apiVersion: 'v1',\n      kind: 'ConfigMap',\n      metadata: {\n        generateName: 'request-header-ca-',\n        namespace: 'openshift-config',\n      },\n      data: {\n        'ca.crt': caFileContent,\n      },\n    };\n\n    return this.handlePromise(k8sCreate(ConfigMapModel, ca));\n  }\n\n  addRequestHeaderIDP(\n    oauth: OAuthKind,\n    caName: string,\n    dryRun?: boolean,\n  ): Promise<K8sResourceKind> {\n    const {\n      name,\n      loginURL,\n      challengeURL,\n      clientCommonNames,\n      headers,\n      preferredUsernameHeaders,\n      nameHeaders,\n      emailHeaders,\n    } = this.state;\n    const idp: IdentityProvider = {\n      name,\n      type: 'RequestHeader',\n      mappingMethod: 'claim',\n      requestHeader: {\n        loginURL,\n        challengeURL,\n        clientCommonNames,\n        headers,\n        preferredUsernameHeaders,\n        nameHeaders,\n        emailHeaders,\n        ca: {\n          name: caName,\n        },\n      },\n    };\n\n    return this.handlePromise(addIDP(oauth, idp, dryRun));\n  }\n\n  submit: React.FormEventHandler<HTMLFormElement> = (e) => {\n    e.preventDefault();\n    if (!this.state.caFileContent) {\n      this.setState({ errorMessage: 'You must specify a CA File.' });\n      return;\n    }\n\n    // Clear any previous errors.\n    this.setState({ errorMessage: '' });\n    this.getOAuthResource().then((oauth: OAuthKind) => {\n      this.addRequestHeaderIDP(oauth, mockNames.ca, true)\n        .then(() => {\n          return this.createCAConfigMap()\n            .then((configMap: K8sResourceKind) =>\n              this.addRequestHeaderIDP(oauth, configMap.metadata.name),\n            )\n            .then(redirectToOAuthPage);\n        })\n        .catch((err) => {\n          this.setState({ errorMessage: err });\n        });\n    });\n  };\n\n  nameChanged: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    this.setState({ name: event.currentTarget.value });\n  };\n\n  challengeURLChanged: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    this.setState({ challengeURL: event.currentTarget.value });\n  };\n\n  loginURLChanged: React.ReactEventHandler<HTMLInputElement> = (event) => {\n    this.setState({ loginURL: event.currentTarget.value });\n  };\n\n  clientCommonNamesChanged = (clientCommonNames: string[]) => {\n    this.setState({ clientCommonNames });\n  };\n\n  headersChanged = (headers: string[]) => {\n    this.setState({ headers });\n  };\n\n  preferredUsernameHeadersChanged = (preferredUsernameHeaders: string[]) => {\n    this.setState({ preferredUsernameHeaders });\n  };\n\n  nameHeadersChanged = (nameHeaders: string[]) => {\n    this.setState({ nameHeaders });\n  };\n\n  emailHeadersChanged = (emailHeaders: string[]) => {\n    this.setState({ emailHeaders });\n  };\n\n  caFileChanged = (caFileContent: string) => {\n    this.setState({ caFileContent });\n  };\n\n  render() {\n    const { name, challengeURL, loginURL, caFileContent } = this.state;\n    const title = 'Add Identity Provider: Request Header';\n    return (\n      <div className=\"co-m-pane__body\">\n        <Helmet>\n          <title>{title}</title>\n        </Helmet>\n        <form onSubmit={this.submit} name=\"form\" className=\"co-m-pane__body-group co-m-pane__form\">\n          <h1 className=\"co-m-pane__heading\">{title}</h1>\n          <p className=\"co-m-pane__explanation\">\n            Use request header to identify users from request header values. It is typically used in\n            combination with an authenticating proxy, which sets the request header value.\n          </p>\n          <IDPNameInput value={name} onChange={this.nameChanged} />\n          <div className=\"co-form-section__separator\" />\n          <h3 className=\"co-required\">URLs</h3>\n          <p className=\"co-m-pane__explanation\">At least one URL must be provided.</p>\n          <div className=\"form-group\">\n            <label className=\"control-label\" htmlFor=\"challenge-url\">\n              Challenge URL\n            </label>\n            <input\n              className=\"pf-c-form-control\"\n              type=\"url\"\n              onChange={this.challengeURLChanged}\n              value={challengeURL}\n              id=\"challenge-url\"\n              aria-describedby=\"challenge-url-help\"\n            />\n            <div className=\"help-block\" id=\"challenge-url-help\">\n              The URL to redirect unauthenticated requests from OAuth clients which expect\n              interactive logins.\n            </div>\n          </div>\n          <div className=\"form-group\">\n            <label className=\"control-label\" htmlFor=\"login-url\">\n              Login URL\n            </label>\n            <input\n              className=\"pf-c-form-control\"\n              type=\"url\"\n              onChange={this.loginURLChanged}\n              value={loginURL}\n              id=\"login-url\"\n              aria-describedby=\"login-url-help\"\n            />\n            <div className=\"help-block\" id=\"login-url-help\">\n              The URL to redirect unauthenticated requests from OAuth clients which expect\n              WWW-Authenticate challenges.\n            </div>\n          </div>\n          <div className=\"co-form-section__separator\" />\n          <h3>More Options</h3>\n          <IDPCAFileInput value={caFileContent} onChange={this.caFileChanged} isRequired />\n          <ListInput\n            label=\"Client Common Names\"\n            onChange={this.clientCommonNamesChanged}\n            helpText=\"The set of common names to require a match from.\"\n          />\n          <ListInput\n            label=\"Headers\"\n            onChange={this.headersChanged}\n            helpText=\"The set of headers to check for identity information.\"\n            required\n          />\n          <ListInput\n            label=\"Preferred Username Headers\"\n            onChange={this.preferredUsernameHeadersChanged}\n            helpText=\"The set of headers to check for the preferred username.\"\n          />\n          <ListInput\n            label=\"Name Headers\"\n            onChange={this.nameHeadersChanged}\n            helpText=\"The set of headers to check for the display name.\"\n          />\n          <ListInput\n            label=\"Email Headers\"\n            onChange={this.emailHeadersChanged}\n            helpText=\"The set of headers to check for the email address.\"\n          />\n          <ButtonBar errorMessage={this.state.errorMessage} inProgress={this.state.inProgress}>\n            <ActionGroup className=\"pf-c-form\">\n              <Button type=\"submit\" variant=\"primary\">\n                Add\n              </Button>\n              <Button type=\"button\" variant=\"secondary\" onClick={history.goBack}>\n                Cancel\n              </Button>\n            </ActionGroup>\n          </ButtonBar>\n        </form>\n      </div>\n    );\n  }\n}\n\nexport type AddRequestHeaderPageState = {\n  name: string;\n  loginURL: string;\n  challengeURL: string;\n  clientCommonNames: string[];\n  headers: string[];\n  preferredUsernameHeaders: string[];\n  nameHeaders: string[];\n  emailHeaders: string[];\n  caFileContent: string;\n  inProgress: boolean;\n  errorMessage: string;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAOA;AAMA;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAGA;AASA;;;;;;;;;;;;;AChBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA+DA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAiGA;AAxNA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAKA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AA8DA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAGA;AAQA;AAKA;AACA;AAGA;AAQA;AAKA;AACA;AACA;AACA;AAKA;AAMA;AAKA;AAKA;AAKA;AACA;AACA;AAGA;AAQA;AACA;;;;;A","sourceRoot":""}