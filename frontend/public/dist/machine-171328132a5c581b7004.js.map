{"version":3,"file":"machine-171328132a5c581b7004.js","sources":["webpack:///./packages/console-app/src/components/nodes/NodeIPList.tsx","webpack:///./public/components/machine.tsx"],"sourcesContent":["import * as _ from 'lodash';\nimport * as React from 'react';\nimport { NodeAddress, DetailPropertyList, DetailPropertyListItem } from '@console/shared';\n\ntype NodeIPListProps = {\n  ips: NodeAddress[];\n  expand?: boolean;\n};\n\nconst NodeIPList: React.FC<NodeIPListProps> = ({ ips, expand = false }) => (\n  <DetailPropertyList>\n    {_.sortBy(ips, ['type']).map(\n      ({ type, address }) =>\n        address &&\n        (expand || type === 'InternalIP') && (\n          <DetailPropertyListItem\n            key={`{${type}/${address}`}\n            title={type.replace(/([a-z])([A-Z])/g, '$1 $2')}\n          >\n            {address}\n          </DetailPropertyListItem>\n        ),\n    )}\n  </DetailPropertyList>\n);\n\nexport default NodeIPList;\n","import * as React from 'react';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport {\n  getMachineAddresses,\n  getMachineInstanceType,\n  getMachineNodeName,\n  getMachineRegion,\n  getMachineRole,\n  getMachineZone,\n  Status,\n  getMachinePhase,\n} from '@console/shared';\nimport { MachineModel } from '../models';\nimport { MachineKind, referenceForModel } from '../module/k8s';\nimport { Conditions } from './conditions';\nimport NodeIPList from '@console/app/src/components/nodes/NodeIPList';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from './factory';\nimport {\n  DetailsItem,\n  Kebab,\n  NodeLink,\n  ResourceKebab,\n  ResourceLink,\n  ResourceSummary,\n  SectionHeading,\n  navFactory,\n} from './utils';\nimport { ResourceEventStream } from './events';\n\nconst { common } = Kebab.factory;\nconst menuActions = [...Kebab.getExtensionsActionsForKind(MachineModel), ...common];\nexport const machineReference = referenceForModel(MachineModel);\n\nconst tableColumnClasses = [\n  '',\n  '',\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-md'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'),\n  Kebab.columnClass,\n];\n\nconst MachineTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Node',\n      sortField: 'status.nodeRef.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Phase',\n      sortFunc: 'machinePhase',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: 'Provider State',\n      sortField: 'status.providerStatus.instanceState',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: 'Region',\n      sortField: \"metadata.labels['machine.openshift.io/region']\",\n      transforms: [sortable],\n      props: { className: tableColumnClasses[5] },\n    },\n    {\n      title: 'Availability Zone',\n      sortField: \"metadata.labels['machine.openshift.io/zone']\",\n      transforms: [sortable],\n      props: { className: tableColumnClasses[6] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[7] },\n    },\n  ];\n};\nMachineTableHeader.displayName = 'MachineTableHeader';\n\nconst getMachineProviderState = (obj: MachineKind): string =>\n  obj?.status?.providerStatus?.instanceState;\n\nconst MachineTableRow: RowFunction<MachineKind> = ({ obj, index, key, style }) => {\n  const nodeName = getMachineNodeName(obj);\n  const region = getMachineRegion(obj);\n  const zone = getMachineZone(obj);\n  const providerState = getMachineProviderState(obj);\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={classNames(tableColumnClasses[0], 'co-break-word')}>\n        <ResourceLink\n          kind={machineReference}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n          title={obj.metadata.name}\n        />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        {nodeName ? <NodeLink name={nodeName} /> : '-'}\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <Status status={getMachinePhase(obj)} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>{providerState ?? '-'}</TableData>\n      <TableData className={tableColumnClasses[5]}>{region || '-'}</TableData>\n      <TableData className={tableColumnClasses[6]}>{zone || '-'}</TableData>\n      <TableData className={tableColumnClasses[7]}>\n        <ResourceKebab actions={menuActions} kind={machineReference} resource={obj} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst MachineDetails: React.SFC<MachineDetailsProps> = ({ obj }: { obj: MachineKind }) => {\n  const nodeName = getMachineNodeName(obj);\n  const machineRole = getMachineRole(obj);\n  const instanceType = getMachineInstanceType(obj);\n  const region = getMachineRegion(obj);\n  const zone = getMachineZone(obj);\n  const providerState = getMachineProviderState(obj);\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Machine Details\" />\n        <div className=\"co-m-pane__body-group\">\n          <div className=\"row\">\n            <div className=\"col-sm-6\">\n              <ResourceSummary resource={obj} />\n            </div>\n            <div className=\"col-sm-6\">\n              <dl className=\"co-m-pane__details\">\n                <DetailsItem label=\"Phase\" obj={obj} path=\"status.phase\">\n                  <Status status={getMachinePhase(obj)} />\n                </DetailsItem>\n                <DetailsItem\n                  label=\"Provider State\"\n                  obj={obj}\n                  path=\"status.providerStatus.instanceState\"\n                >\n                  {providerState}\n                </DetailsItem>\n                {nodeName && (\n                  <>\n                    <dt>Node</dt>\n                    <dd>\n                      <NodeLink name={nodeName} />\n                    </dd>\n                  </>\n                )}\n                {machineRole && (\n                  <>\n                    <dt>Machine Role</dt>\n                    <dd>{machineRole}</dd>\n                  </>\n                )}\n                {instanceType && (\n                  <>\n                    <dt>Instance Type</dt>\n                    <dd>{instanceType}</dd>\n                  </>\n                )}\n                {region && (\n                  <>\n                    <dt>Region</dt>\n                    <dd>{region}</dd>\n                  </>\n                )}\n                {zone && (\n                  <>\n                    <dt>Availability Zone</dt>\n                    <dd>{zone}</dd>\n                  </>\n                )}\n                <dt>Machine Addresses</dt>\n                <dd>\n                  <NodeIPList ips={getMachineAddresses(obj)} expand />\n                </dd>\n              </dl>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Conditions\" />\n        <Conditions conditions={obj.status?.providerStatus?.conditions} />\n      </div>\n    </>\n  );\n};\n\nexport const MachineList: React.SFC = (props) => (\n  <Table\n    {...props}\n    aria-label=\"Machines\"\n    Header={MachineTableHeader}\n    Row={MachineTableRow}\n    virtualize\n  />\n);\n\nexport const MachinePage: React.SFC<MachinePageProps> = (props) => (\n  <ListPage\n    {...props}\n    ListComponent={MachineList}\n    kind={machineReference}\n    textFilter=\"machine\"\n    filterLabel=\"by machine or node name\"\n    canCreate\n  />\n);\n\nexport const MachineDetailsPage: React.SFC<MachineDetailsPageProps> = (props) => (\n  <DetailsPage\n    {...props}\n    kind={machineReference}\n    menuActions={menuActions}\n    pages={[\n      navFactory.details(MachineDetails),\n      navFactory.editYaml(),\n      navFactory.events(ResourceEventStream),\n    ]}\n    getResourceStatus={getMachinePhase}\n  />\n);\n\nexport type MachineDetailsProps = {\n  obj: MachineKind;\n};\n\nexport type MachinePageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: any;\n};\n\nexport type MachineDetailsPageProps = {\n  match: any;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAOA;AAKA;AAYA;;;;;;;;;;;;;AC1BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAUA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AAIA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAOA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AAGA;AAEA;AACA;AAGA;AAEA;AACA;AAGA;AAEA;AACA;AAGA;AACA;AACA;AAOA;AACA;AACA;AAIA;AAEA;AAUA;AAWA;AAMA;AACA;AACA;AACA;;;;;A","sourceRoot":""}