{"version":3,"file":"object-bucket-page-402d88bcf329765b2612.js","sources":["webpack:///./packages/noobaa-storage-plugin/src/components/object-bucket-page/object-bucket.tsx","webpack:///./packages/noobaa-storage-plugin/src/table-filters.ts","webpack:///./packages/noobaa-storage-plugin/src/utils.ts"],"sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport * as classNames from 'classnames';\nimport { Status } from '@console/shared';\nimport {\n  DetailsPage,\n  ListPage,\n  Table,\n  TableData,\n  TableRow,\n  RowFunction,\n} from '@console/internal/components/factory';\nimport {\n  Kebab,\n  navFactory,\n  ResourceKebab,\n  ResourceLink,\n  ResourceSummary,\n  SectionHeading,\n} from '@console/internal/components/utils';\nimport { ResourceEventStream } from '@console/internal/components/events';\nimport {\n  NooBaaObjectBucketClaimModel,\n  NooBaaObjectBucketModel,\n} from '@console/noobaa-storage-plugin/src/models';\nimport { K8sResourceKind, referenceForModel } from '@console/internal/module/k8s';\nimport { sortable } from '@patternfly/react-table';\nimport { getPhase } from '../../utils';\nimport { obStatusFilter } from '../../table-filters';\n\nconst kind = referenceForModel(NooBaaObjectBucketModel);\nconst menuActions = [...Kebab.factory.common];\n\nconst OBStatus: React.FC<OBStatusProps> = ({ ob }) => <Status status={getPhase(ob)} />;\n\nconst tableColumnClasses = [\n  classNames('col-lg-4', 'col-md-4', 'col-sm-6', 'col-xs-6'),\n  classNames('col-lg-3', 'col-md-3', 'col-sm-6', 'hidden-xs'),\n  classNames('col-lg-4', 'col-md-4', 'hidden-sm', 'hidden-xs'),\n  Kebab.columnClass,\n];\n\nconst OBTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Status',\n      sortField: 'status.phase',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Storage Class',\n      sortField: 'spec.storageClassName',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[3] },\n    },\n  ];\n};\nOBTableHeader.displayName = 'OBTableHeader';\n\nconst OBTableRow: RowFunction<K8sResourceKind> = ({ obj, index, key, style }) => {\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={kind}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n          title={obj.metadata.name}\n        />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1])}>\n        <OBStatus ob={obj} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        {_.get(obj, 'spec.storageClassName', '-')}\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={obj} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst Details: React.FC<DetailsProps> = ({ obj }) => {\n  const storageClassName = _.get(obj, 'spec.storageClassName');\n  const [OBCName, OBCNamespace] = [\n    _.get(obj, 'spec.claimRef.name'),\n    _.get(obj, 'spec.claimRef.namespace'),\n  ];\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Object Bucket Details\" />\n        <div className=\"row\">\n          <div className=\"col-sm-6\">\n            <ResourceSummary resource={obj} />\n          </div>\n          <div className=\"col-sm-6\">\n            <dl>\n              <dt>Status</dt>\n              <dd>\n                <OBStatus ob={obj} />\n              </dd>\n              <dt>Storage Class</dt>\n              <dd>\n                {storageClassName ? (\n                  <ResourceLink kind=\"StorageClass\" name={storageClassName} />\n                ) : (\n                  '-'\n                )}\n              </dd>\n              <dt>Object Bucket Claim</dt>\n              <dd>\n                <ResourceLink\n                  kind={referenceForModel(NooBaaObjectBucketClaimModel)}\n                  name={OBCName}\n                  namespace={OBCNamespace}\n                />\n              </dd>\n            </dl>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n\nconst ObjectBucketsList: React.FC = (props) => (\n  <Table\n    {...props}\n    aria-label=\"Object Buckets\"\n    Header={OBTableHeader}\n    Row={OBTableRow}\n    virtualize\n  />\n);\n\nexport const ObjectBucketsPage: React.FC = (props) => (\n  <ListPage\n    {...props}\n    ListComponent={ObjectBucketsList}\n    kind={kind}\n    rowFilters={[obStatusFilter]}\n  />\n);\n\nexport const ObjectBucketDetailsPage = (props) => (\n  <DetailsPage\n    {...props}\n    menuActions={menuActions}\n    pages={[\n      navFactory.details(Details),\n      navFactory.editYaml(),\n      navFactory.events(ResourceEventStream),\n    ]}\n  />\n);\n\ntype OBStatusProps = {\n  ob: K8sResourceKind;\n};\n\ntype DetailsProps = {\n  obj: K8sResourceKind;\n};\n","import * as _ from 'lodash';\nimport { RowFilter } from '@console/internal/components/filter-toolbar';\nimport { getPhase } from './utils';\n\nconst allPhases = ['Pending', 'Bound', 'Lost'];\n\nexport const obcStatusFilter: RowFilter = {\n  type: 'obc-status',\n  filterGroupName: 'Status',\n  reducer: getPhase,\n  items: _.map(allPhases, (phase) => ({\n    id: phase,\n    title: phase,\n  })),\n  filter: (phases, obc) => {\n    if (!phases || !phases.selected) {\n      return true;\n    }\n    const phase = getPhase(obc);\n    return (\n      phases.selected.has(phase) || !_.includes(phases.all, phase) || _.isEmpty(phases.selected)\n    );\n  },\n};\n\nexport const obStatusFilter: RowFilter = {\n  type: 'ob-status',\n  filterGroupName: 'Status',\n  reducer: getPhase,\n  items: _.map(allPhases, (phase) => ({\n    id: phase,\n    title: phase,\n  })),\n  filter: (phases, ob) => {\n    if (!phases || !phases.selected) {\n      return true;\n    }\n    const phase = getPhase(ob);\n    return (\n      phases.selected.has(phase) || !_.includes(phases.all, phase) || _.isEmpty(phases.selected)\n    );\n  },\n};\n","import * as _ from 'lodash';\nimport { Alert } from '@console/internal/components/monitoring';\nimport { PrometheusResponse } from '@console/internal/components/graphs';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { StorageClass } from '@console/internal/components/storage-class-form';\n\nexport const filterNooBaaAlerts = (alerts: Alert[]): Alert[] =>\n  alerts.filter((alert) => _.get(alert, 'annotations.storage_type') === 'NooBaa');\n\nexport const getGaugeValue = (data) => _.get(data, 'data.result[0].value[1]');\n\nexport const getMetric = (result: PrometheusResponse, metric: string): string =>\n  _.get(result, ['data', 'result', '0', 'metric', metric], null);\n\nexport type PrometheusMetricResult = {\n  metric: { [key: string]: any };\n  value?: [number, string | number];\n};\n\nexport const getPhase = (obj: K8sResourceKind): string => {\n  return _.get(obj, 'status.phase', 'Lost');\n};\n\nexport const isBound = (obj: K8sResourceKind): boolean => getPhase(obj) === 'Bound';\n\nexport const getSCProvisioner = (obj: StorageClass) => obj.provisioner;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAQA;AAQA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAOA;AACA;AAEA;AAGA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAOA;AACA;AACA;AAYA;AAEA;AAUA;AASA;AAKA;AACA;AACA;AACA;;;;;;;;;;;;;ACrKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;;;;;;;;;;;;;AC1CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAGA;AAEA;AAQA;AACA;AACA;AAEA;AAEA;;;;;A","sourceRoot":""}