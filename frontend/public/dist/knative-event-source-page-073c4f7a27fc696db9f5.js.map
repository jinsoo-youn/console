{"version":3,"file":"knative-event-source-page-073c4f7a27fc696db9f5.js","sources":["webpack:///./packages/dev-console/src/components/NamespacedPage.scss?186e","webpack:///./packages/dev-console/src/components/NamespacedPage.tsx","webpack:///./packages/dev-console/src/components/dropdown/ApplicationDropdown.tsx","webpack:///./packages/dev-console/src/components/dropdown/ApplicationSelector.tsx","webpack:///./packages/dev-console/src/components/import/advanced/ResourceLimitSection.tsx","webpack:///./packages/dev-console/src/components/import/app/AppSection.tsx","webpack:///./packages/dev-console/src/components/import/app/ApplicationSelector.tsx","webpack:///./packages/dev-console/src/components/import/section/FormSection.scss?8752","webpack:///./packages/dev-console/src/components/import/section/FormSection.tsx","webpack:///./packages/dev-console/src/components/progressive-list/ProgressiveList.tsx","webpack:///./packages/dev-console/src/components/progressive-list/ProgressiveListFooter.tsx","webpack:///./packages/dev-console/src/components/progressive-list/ProgressiveListItem.tsx","webpack:///./packages/dev-console/src/utils/imagestream-utils.ts","webpack:///./packages/dev-console/src/utils/resource-label-utils.ts","webpack:///./packages/knative-plugin/src/components/add/AdvancedSection.tsx","webpack:///./packages/knative-plugin/src/components/add/EventSource.tsx","webpack:///./packages/knative-plugin/src/components/add/EventSourceAlert.tsx","webpack:///./packages/knative-plugin/src/components/add/EventSourceForm.tsx","webpack:///./packages/knative-plugin/src/components/add/EventSourcePage.tsx","webpack:///./packages/knative-plugin/src/components/add/SecretKeySelector.tsx","webpack:///./packages/knative-plugin/src/components/add/event-sources/ApiServerSection.tsx","webpack:///./packages/knative-plugin/src/components/add/event-sources/ContainerSourceSection.tsx","webpack:///./packages/knative-plugin/src/components/add/event-sources/CronJobSection.tsx","webpack:///./packages/knative-plugin/src/components/add/event-sources/EventSourceSection.tsx","webpack:///./packages/knative-plugin/src/components/add/event-sources/EventSourcesSelector.tsx","webpack:///./packages/knative-plugin/src/components/add/event-sources/KafkaSourceNetSection.tsx","webpack:///./packages/knative-plugin/src/components/add/event-sources/KafkaSourceSection.tsx","webpack:///./packages/knative-plugin/src/components/add/event-sources/PingSourceSection.tsx","webpack:///./packages/knative-plugin/src/components/add/event-sources/SinkBindingSection.tsx","webpack:///./packages/knative-plugin/src/components/add/event-sources/SinkSection.tsx","webpack:///./packages/knative-plugin/src/components/add/event-sources/YAMLEditorSection.tsx","webpack:///./packages/knative-plugin/src/components/add/eventSource-validation-utils.ts","webpack:///./packages/knative-plugin/src/components/add/import-types.ts","webpack:///./packages/knative-plugin/src/components/dropdowns/ServiceAccountDropdown.tsx","webpack:///./packages/knative-plugin/src/imgs/logos/apiserversource.png","webpack:///./packages/knative-plugin/src/imgs/logos/camelsource.svg","webpack:///./packages/knative-plugin/src/imgs/logos/containersource.png","webpack:///./packages/knative-plugin/src/imgs/logos/cronjobsource.svg","webpack:///./packages/knative-plugin/src/imgs/logos/kafkasource.svg","webpack:///./packages/knative-plugin/src/utils/create-eventsources-utils.ts","webpack:///./packages/knative-plugin/src/utils/get-knative-icon.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as cx from 'classnames';\nimport { NamespaceBar } from '@console/internal/components/namespace';\nimport ApplicationSelector from './dropdown/ApplicationSelector';\n\nimport './NamespacedPage.scss';\n\nexport enum NamespacedPageVariants {\n  light = 'light',\n  default = 'default',\n}\n\nexport interface NamespacedPageProps {\n  disabled?: boolean;\n  hideApplications?: boolean;\n  onNamespaceChange?: (newNamespace: string) => void;\n  variant?: NamespacedPageVariants;\n  toolbar?: React.ReactNode;\n}\n\nconst NamespacedPage: React.FC<NamespacedPageProps> = ({\n  children,\n  disabled,\n  onNamespaceChange,\n  hideApplications = true,\n  variant = NamespacedPageVariants.default,\n  toolbar,\n}) => (\n  <div className=\"odc-namespaced-page\">\n    <NamespaceBar disabled={disabled} onNamespaceChange={onNamespaceChange}>\n      {!hideApplications && <ApplicationSelector disabled={disabled} />}\n      {toolbar && <div className=\"odc-namespaced-page__toolbar\">{toolbar}</div>}\n    </NamespaceBar>\n    <div\n      className={cx('odc-namespaced-page__content', {\n        [`is-${variant}`]: variant !== NamespacedPageVariants.default,\n      })}\n    >\n      {children}\n    </div>\n  </div>\n);\n\nexport default NamespacedPage;\n","import * as React from 'react';\nimport { Firehose } from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { ServiceModel } from '@console/knative-plugin';\nimport { VirtualMachineModel } from '@console/kubevirt-plugin/src/models';\nimport { ResourceDropdown } from '@console/shared';\n\ninterface ApplicationDropdownProps {\n  id?: string;\n  className?: string;\n  dropDownClassName?: string;\n  menuClassName?: string;\n  buttonClassName?: string;\n  title?: React.ReactNode;\n  titlePrefix?: string;\n  allApplicationsKey?: string;\n  storageKey?: string;\n  disabled?: boolean;\n  allSelectorItem?: {\n    allSelectorKey?: string;\n    allSelectorTitle?: string;\n  };\n  namespace?: string;\n  actionItems?: {\n    actionTitle: string;\n    actionKey: string;\n  }[];\n  selectedKey: string;\n  autoSelect?: boolean;\n  onChange?: (key: string, name?: string) => void;\n  onLoad?: (items: { [key: string]: string }) => void;\n}\n\nconst ApplicationDropdown: React.FC<ApplicationDropdownProps> = ({ namespace, ...props }) => {\n  const resources = [\n    {\n      isList: true,\n      namespace,\n      kind: 'DeploymentConfig',\n      prop: 'deploymentConfigs',\n    },\n    {\n      isList: true,\n      namespace,\n      kind: 'Deployment',\n      prop: 'deployments',\n    },\n    {\n      isList: true,\n      kind: 'StatefulSet',\n      namespace,\n      prop: 'statefulSets',\n    },\n    {\n      isList: true,\n      kind: 'DaemonSet',\n      namespace,\n      prop: 'daemonSets',\n    },\n    {\n      isList: true,\n      kind: referenceForModel(ServiceModel),\n      namespace,\n      prop: 'knativeService',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: 'Secret',\n      namespace,\n      prop: 'secrets',\n    },\n    {\n      isList: true,\n      kind: VirtualMachineModel.kind,\n      namespace,\n      prop: 'virtualMachines',\n      optional: true,\n    },\n  ];\n  return (\n    <Firehose resources={resources}>\n      <ResourceDropdown\n        {...props}\n        placeholder=\"Select an Application\"\n        dataSelector={['metadata', 'labels', 'app.kubernetes.io/part-of']}\n      />\n    </Firehose>\n  );\n};\n\nexport default ApplicationDropdown;\n","import * as React from 'react';\nimport { connect, Dispatch } from 'react-redux';\nimport {\n  ALL_NAMESPACES_KEY,\n  ALL_APPLICATIONS_KEY,\n  APPLICATION_LOCAL_STORAGE_KEY,\n} from '@console/shared';\nimport { setActiveApplication } from '@console/internal/actions/ui';\nimport { RootState } from '@console/internal/redux';\nimport { getActiveNamespace, getActiveApplication } from '@console/internal/reducers/ui';\nimport ApplicationDropdown from './ApplicationDropdown';\n\nexport interface ApplicationSelectorProps {\n  disabled?: boolean;\n}\n\ninterface StateProps {\n  namespace: string;\n  application: string;\n}\n\ninterface DispatchProps {\n  onChange: (name: string) => void;\n}\n\ntype Props = ApplicationSelectorProps & StateProps & DispatchProps;\n\nconst ApplicationSelector: React.FC<Props> = ({ namespace, application, onChange, disabled }) => {\n  if (namespace === ALL_NAMESPACES_KEY) return null;\n\n  const allApplicationsTitle = 'all applications';\n  const title: string = application === ALL_APPLICATIONS_KEY ? allApplicationsTitle : application;\n\n  const onApplicationChange = (newApplication: string, key: string) => {\n    key === ALL_APPLICATIONS_KEY ? onChange(key) : onChange(newApplication);\n  };\n\n  return (\n    <ApplicationDropdown\n      className=\"co-namespace-selector\"\n      menuClassName=\"co-namespace-selector__menu\"\n      buttonClassName=\"pf-m-plain\"\n      namespace={namespace}\n      title={title && <span className=\"btn-link__title\">{title}</span>}\n      titlePrefix=\"Application\"\n      allSelectorItem={{\n        allSelectorKey: ALL_APPLICATIONS_KEY,\n        allSelectorTitle: allApplicationsTitle,\n      }}\n      selectedKey={application || ALL_APPLICATIONS_KEY}\n      onChange={onApplicationChange}\n      storageKey={APPLICATION_LOCAL_STORAGE_KEY}\n      disabled={disabled}\n    />\n  );\n};\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  namespace: getActiveNamespace(state),\n  application: getActiveApplication(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => ({\n  onChange: (app: string) => {\n    dispatch(setActiveApplication(app));\n  },\n});\n\nexport default connect<StateProps, DispatchProps, ApplicationSelectorProps>(\n  mapStateToProps,\n  mapDispatchToProps,\n)(ApplicationSelector);\n","import * as React from 'react';\nimport { ResourceLimitField } from '@console/shared';\nimport { useFormikContext, FormikValues } from 'formik';\nimport FormSection from '../section/FormSection';\nimport { MemoryUnits, CPUUnits } from '../import-types';\n\nconst ResourceLimitSection: React.FC = () => {\n  const {\n    values: {\n      limits: { cpu, memory },\n    },\n  } = useFormikContext<FormikValues>();\n  return (\n    <FormSection title=\"Resource Limit\">\n      <div className=\"co-section-heading-tertiary\">CPU</div>\n      <ResourceLimitField\n        name=\"limits.cpu.request\"\n        label=\"Request\"\n        unitName=\"limits.cpu.requestUnit\"\n        unitOptions={CPUUnits}\n        defaultUnitSize={`${cpu.defaultRequestUnit}`}\n        helpText=\"The minimum amount of CPU the container is guaranteed.\"\n      />\n\n      <ResourceLimitField\n        name=\"limits.cpu.limit\"\n        label=\"Limit\"\n        unitName=\"limits.cpu.limitUnit\"\n        unitOptions={CPUUnits}\n        defaultUnitSize={`${cpu.defaultLimitUnit}`}\n        helpText=\"The maximum amount of CPU the container is allowed to use when running.\"\n      />\n\n      <div className=\"co-section-heading-tertiary\">Memory</div>\n      <ResourceLimitField\n        name=\"limits.memory.request\"\n        label=\"Request\"\n        unitName=\"limits.memory.requestUnit\"\n        unitOptions={MemoryUnits}\n        defaultUnitSize={`${memory.defaultRequestUnit}`}\n        helpText=\"The minimum amount of Memory the container is guaranteed.\"\n      />\n\n      <ResourceLimitField\n        name=\"limits.memory.limit\"\n        label=\"Limit\"\n        unitName=\"limits.memory.limitUnit\"\n        unitOptions={MemoryUnits}\n        defaultUnitSize={`${memory.defaultLimitUnit}`}\n        helpText=\"The maximum amount of Memory the container is allowed to use when running.\"\n      />\n    </FormSection>\n  );\n};\n\nexport default ResourceLimitSection;\n","import * as React from 'react';\nimport { useField } from 'formik';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { InputField, TextAreaField } from '@console/shared';\nimport { ProjectData } from '../import-types';\nimport FormSection from '../section/FormSection';\nimport ApplicationSelector from './ApplicationSelector';\n\nexport interface AppSectionProps {\n  project: ProjectData;\n  noProjectsAvailable?: boolean;\n  extraMargin?: boolean;\n}\n\nconst AppSection: React.FC<AppSectionProps> = ({ project, noProjectsAvailable, extraMargin }) => {\n  const [initialApplication] = useField('application.initial');\n  const [formType] = useField('formType');\n  return (\n    <FormSection title=\"General\" extraMargin={extraMargin}>\n      {noProjectsAvailable && (\n        <>\n          <InputField\n            type={TextInputTypes.text}\n            data-test-id=\"application-form-project-name\"\n            name=\"project.name\"\n            label=\"Project Name\"\n            helpText=\"A unique name for the project.\"\n            required\n          />\n          <InputField\n            type={TextInputTypes.text}\n            data-test-id=\"application-form-project-display-name\"\n            name=\"project.displayName\"\n            label=\"Project Display Name\"\n          />\n          <TextAreaField\n            data-test-id=\"application-form-project-description\"\n            name=\"project.description\"\n            label=\"Project Description\"\n          />\n        </>\n      )}\n      {!initialApplication.value && (\n        <ApplicationSelector namespace={project.name} noProjectsAvailable={noProjectsAvailable} />\n      )}\n      <InputField\n        type={TextInputTypes.text}\n        data-test-id=\"application-form-app-name\"\n        name=\"name\"\n        label=\"Name\"\n        helpText=\"A unique name given to the component that will be used to name associated resources.\"\n        isDisabled={formType.value && formType.value === 'edit'}\n        required={!(formType.value && formType.value === 'edit')}\n      />\n    </FormSection>\n  );\n};\n\nexport default AppSection;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useFormikContext, FormikValues, useField } from 'formik';\nimport { FormGroup, TextInputTypes } from '@patternfly/react-core';\nimport { InputField, getFieldId, useFormikValidationFix } from '@console/shared';\nimport { CREATE_APPLICATION_KEY, UNASSIGNED_KEY } from '../../../const';\nimport { sanitizeApplicationValue } from '../../../utils/application-utils';\nimport ApplicationDropdown from '../../dropdown/ApplicationDropdown';\n\nexport interface ApplicationSelectorProps {\n  namespace?: string;\n  noProjectsAvailable?: boolean;\n}\n\nconst ApplicationSelector: React.FC<ApplicationSelectorProps> = ({\n  namespace,\n  noProjectsAvailable,\n}) => {\n  const [applicationsAvailable, setApplicationsAvailable] = React.useState(true);\n  const projectsAvailable = !noProjectsAvailable;\n\n  const [selectedKey, { touched, error }] = useField('application.selectedKey');\n  const { setFieldValue, setFieldTouched } = useFormikContext<FormikValues>();\n  const fieldId = getFieldId('application-name', 'dropdown');\n  const isValid = !(touched && error);\n  const errorMessage = !isValid ? error : '';\n\n  useFormikValidationFix(selectedKey.value);\n\n  const onDropdownChange = (key: string, application: string) => {\n    setFieldValue('application.selectedKey', key);\n    setFieldTouched('application.selectedKey', true);\n    setFieldValue('application.name', sanitizeApplicationValue(application, key));\n    setFieldTouched('application.name', true);\n  };\n\n  const handleOnLoad = (applicationList: { [key: string]: string }) => {\n    const noApplicationsAvailable = _.isEmpty(applicationList);\n    setApplicationsAvailable(!noApplicationsAvailable);\n    if (noApplicationsAvailable) {\n      setFieldValue('application.selectedKey', '');\n      setFieldValue('application.name', '');\n    }\n  };\n\n  const actionItems = [\n    {\n      actionTitle: 'Create Application',\n      actionKey: CREATE_APPLICATION_KEY,\n    },\n    {\n      actionTitle: 'Unassigned',\n      actionKey: UNASSIGNED_KEY,\n    },\n  ];\n\n  return (\n    <>\n      {projectsAvailable && applicationsAvailable && (\n        <FormGroup\n          fieldId={fieldId}\n          label=\"Application\"\n          helperTextInvalid={errorMessage}\n          isValid={isValid}\n          helperText=\"Select an application for your grouping or Unassigned to not use an application grouping.\"\n        >\n          <ApplicationDropdown\n            dropDownClassName=\"dropdown--full-width\"\n            menuClassName=\"dropdown-menu--text-wrap\"\n            id={fieldId}\n            namespace={namespace}\n            actionItems={actionItems}\n            autoSelect\n            selectedKey={selectedKey.value}\n            onChange={onDropdownChange}\n            onLoad={handleOnLoad}\n          />\n        </FormGroup>\n      )}\n      {(!applicationsAvailable || selectedKey.value === CREATE_APPLICATION_KEY) && (\n        <InputField\n          type={TextInputTypes.text}\n          required={selectedKey.value === CREATE_APPLICATION_KEY}\n          name=\"application.name\"\n          label=\"Application Name\"\n          data-test-id=\"application-form-app-input\"\n          helpText=\"A unique name given to the application grouping to label your resources.\"\n        />\n      )}\n    </>\n  );\n};\n\nexport default ApplicationSelector;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport cx from 'classnames';\nimport { FormHelperText } from '@patternfly/react-core';\nimport './FormSection.scss';\n\nexport interface FormSectionProps {\n  title?: React.ReactNode;\n  subTitle?: React.ReactNode;\n  fullWidth?: boolean;\n  children: React.ReactNode;\n  flexLayout?: boolean;\n  extraMargin?: boolean;\n}\n\nconst flexStyle: React.CSSProperties = {\n  display: 'flex',\n  flex: 1,\n  flexDirection: 'column',\n  margin: 'var(--pf-global--spacer--md) 0',\n};\n\nconst FormSection: React.FC<FormSectionProps> = ({\n  title,\n  subTitle,\n  fullWidth,\n  children,\n  flexLayout,\n  extraMargin,\n}) => (\n  <div\n    className={cx('pf-c-form', {\n      'co-m-pane__form': !fullWidth,\n      'odc-form-section--extra-margin': extraMargin,\n    })}\n    style={flexLayout ? flexStyle : {}}\n  >\n    {title && <h2 className=\"odc-form-section__heading\">{title}</h2>}\n    {subTitle && <FormHelperText isHidden={false}>{subTitle}</FormHelperText>}\n    {children}\n  </div>\n);\n\nexport default FormSection;\n","import * as React from 'react';\nimport ProgressiveListFooter from './ProgressiveListFooter';\nimport ProgressiveListItem from './ProgressiveListItem';\n\nexport interface ProgressiveListProps {\n  visibleItems: string[];\n  onVisibleItemChange: (item: string) => void;\n  text: string;\n}\n\nconst ProgressiveList: React.FC<ProgressiveListProps> = ({\n  visibleItems,\n  children,\n  onVisibleItemChange,\n  text,\n}) => {\n  const items: string[] = [];\n  const validChildren: React.ReactNode[] = React.Children.toArray(children).filter(\n    (child: React.ReactElement) => {\n      const { name } = child.props;\n      const validChild = child.type === ProgressiveListItem;\n      const isNameInVisibleItems = visibleItems.includes(name);\n      if (validChild && !isNameInVisibleItems) items.push(name);\n      return validChild;\n    },\n  );\n  return (\n    <>\n      {visibleItems.map((item: string) => (\n        <React.Fragment key={item}>\n          {validChildren.find(({ props }: React.ReactElement) => item === props.name)}\n        </React.Fragment>\n      ))}\n      <ProgressiveListFooter text={text} items={items} onShowItem={onVisibleItemChange} />\n    </>\n  );\n};\n\nexport default ProgressiveList;\n","import * as React from 'react';\nimport { Button } from '@patternfly/react-core';\n\nexport interface ProgressiveListFooterProps {\n  items: string[];\n  text: string;\n  onShowItem: (item: string) => void;\n}\n\nconst ProgressiveListFooter: React.FC<ProgressiveListFooterProps> = ({\n  text,\n  items,\n  onShowItem,\n}) => {\n  if (!items || items.length === 0) {\n    return null;\n  }\n  return (\n    <div>\n      {text}\n      {items.map((opt, index) => {\n        let preText = ' ';\n        let postText = '';\n        if (items.length - 1 === index) {\n          preText = items.length !== 1 ? ' and ' : ' ';\n          postText = '.';\n        } else {\n          postText = items.length - 2 !== index ? ',' : '';\n        }\n        return (\n          <React.Fragment key={opt}>\n            {preText}\n            <Button variant=\"link\" isInline onClick={() => onShowItem(opt)}>\n              {opt}\n            </Button>\n            {postText}\n          </React.Fragment>\n        );\n      })}\n    </div>\n  );\n};\n\nexport default ProgressiveListFooter;\n","import * as React from 'react';\n\nexport interface ProgressiveListItemProps {\n  name: string;\n}\n\nconst ProgressiveListItem: React.FC<ProgressiveListItemProps> = ({ children }) => {\n  const element = React.useRef<HTMLDivElement>();\n  React.useEffect(() => {\n    element.current.scrollIntoView({ behavior: 'smooth' });\n  }, []);\n  return <div ref={element}>{children}</div>;\n};\n\nexport default ProgressiveListItem;\n","import * as _ from 'lodash';\nimport * as semver from 'semver';\nimport { ContainerPort, K8sResourceKind } from '@console/internal/module/k8s';\nimport {\n  isBuilder,\n  getMostRecentBuilderTag,\n  getBuilderTagsSortedByVersion,\n} from '@console/internal/components/image-stream';\nimport {\n  getImageStreamIcon,\n  getImageForIconClass,\n} from '@console/internal/components/catalog/catalog-item-icon';\nimport { ProjectModel, ImageStreamModel } from '@console/internal/models';\nimport { FirehoseResource } from '@console/internal/components/utils';\n\nexport interface ImageTag {\n  name: string;\n  annotations: {\n    [key: string]: string;\n  };\n  generation: number;\n  [key: string]: any;\n}\nexport interface BuilderImage {\n  obj: K8sResourceKind;\n  name: string;\n  displayName: string;\n  title: string;\n  iconUrl: string;\n  tags: ImageTag[];\n  recentTag: ImageTag;\n  imageStreamNamespace: string;\n}\n\nexport interface NormalizedBuilderImages {\n  [builderImageName: string]: BuilderImage;\n}\n\nexport const imageStreamLabels = ['app.kubernetes.io/name', 'app.openshift.io/runtime'];\n\nexport const getRuntime = (labels: { [key: string]: string }) =>\n  labels?.['app.openshift.io/runtime'] || labels?.['app.kubernetes.io/name'];\n\nexport const getSampleRepo = (tag) => _.get(tag, 'annotations.sampleRepo', '');\nexport const getSampleRef = (tag) => _.get(tag, 'annotations.sampleRef', '');\nexport const getSampleContextDir = (tag) => _.get(tag, 'annotations.sampleContextDir', '');\n\n// Transform image ports to k8s structure.\n// `{ '3306/tcp': {} }` -> `{ containerPort: 3306, protocol: 'TCP' }`\nconst portsFromSpec = (portSpec: object): ContainerPort[] => {\n  return _.reduce(\n    portSpec,\n    (result: ContainerPort[], value, key) => {\n      const parts = key.split('/');\n      if (parts.length === 1) {\n        parts.push('tcp');\n      }\n\n      const containerPort = parseInt(parts[0], 10);\n      if (_.isFinite(containerPort)) {\n        result.push({\n          containerPort,\n          protocol: parts[1].toUpperCase(),\n        });\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn('Unrecognized image port format', key);\n      }\n\n      return result;\n    },\n    [],\n  );\n};\n\nexport const getPorts = (imageStreamImage: object): ContainerPort[] => {\n  const portSpec =\n    _.get(imageStreamImage, 'image.dockerImageMetadata.Config.ExposedPorts') ||\n    _.get(imageStreamImage, 'image.dockerImageMetadata.ContainerConfig.ExposedPorts');\n  return portsFromSpec(portSpec);\n};\n\n// Use the same naming convention as the CLI.\nexport const makePortName = (port: ContainerPort): string =>\n  `${port.containerPort}-${port.protocol}`.toLowerCase();\n\nexport const prettifyName = (name: string) => {\n  return name.replace(/(-|^)([^-]?)/g, (first, prep, letter) => {\n    return (prep && ' ') + letter.toUpperCase();\n  });\n};\n\nexport const normalizeBuilderImages = (\n  imageStreams: K8sResourceKind[],\n): NormalizedBuilderImages => {\n  const data = Array.isArray(imageStreams) ? imageStreams : [imageStreams];\n  const builderImageStreams = data.filter((imageStream) => isBuilder(imageStream));\n\n  return builderImageStreams.reduce((builderImages: NormalizedBuilderImages, imageStream) => {\n    const tags = getBuilderTagsSortedByVersion(imageStream);\n    const recentTag = getMostRecentBuilderTag(imageStream);\n    const { name } = imageStream.metadata;\n    const displayName = _.get(imageStream, [\n      'metadata',\n      'annotations',\n      'openshift.io/display-name',\n    ]);\n    const imageStreamNamespace = imageStream.metadata.namespace;\n    const title = displayName && displayName.length < 14 ? displayName : prettifyName(name);\n    const iconClass = getImageStreamIcon(recentTag);\n    const iconUrl = getImageForIconClass(iconClass);\n\n    builderImages[name] = {\n      obj: imageStream,\n      name,\n      displayName,\n      title,\n      iconUrl,\n      tags,\n      recentTag,\n      imageStreamNamespace,\n    };\n    return builderImages;\n  }, {});\n};\n\nexport const getTagDataWithDisplayName = (\n  imageTags: ImageTag[],\n  selectedTag: string,\n  defaultName: string,\n): [ImageTag, string] => {\n  const imageTag = _.find(imageTags, { name: selectedTag });\n  const displayName = _.get(imageTag, ['annotations', 'openshift.io/display-name'], defaultName);\n\n  return [imageTag, displayName];\n};\n\nexport const getSuggestedName = (name: string): string | undefined => {\n  if (!name) {\n    return undefined;\n  }\n  const imageName: string = _.last(name.split('/'));\n  return _.first(imageName.split(/[^a-z0-9-]/));\n};\n\nexport enum RegistryType {\n  External = 'external',\n  Internal = 'internal',\n}\nexport enum BuilderImagesNamespace {\n  Openshift = 'openshift',\n}\nexport const imageRegistryType = {\n  External: {\n    value: RegistryType.External,\n    label: 'Image name from external registry',\n  },\n  Internal: {\n    value: RegistryType.Internal,\n    label: 'Image stream tag from internal registry',\n  },\n};\n\nexport const getSortedTags = (imageStream: K8sResourceKind) => {\n  return _.isArray(imageStream.status.tags) && imageStream.status.tags.length\n    ? imageStream.status.tags.sort(({ tag: a }, { tag: b }) => {\n        const v1 = semver.coerce(a);\n        const v2 = semver.coerce(b);\n        if (!v1 && !v2) {\n          return a.localeCompare(b);\n        }\n        if (!v1) {\n          return 1;\n        }\n        if (!v2) {\n          return -1;\n        }\n        return semver.rcompare(v1, v2);\n      })\n    : [];\n};\nexport const getImageStreamTags = (imageStream: K8sResourceKind) => {\n  const sortedTags = imageStream && !_.isEmpty(imageStream) ? getSortedTags(imageStream) : [];\n  return sortedTags.reduce((tags, { tag }) => {\n    tags[tag] = tag;\n    return tags;\n  }, {});\n};\n\nexport const getProjectResource = (): FirehoseResource[] => {\n  return [\n    {\n      isList: true,\n      kind: ProjectModel.kind,\n      prop: ProjectModel.id,\n    },\n  ];\n};\n\nexport const getImageStreamResource = (namespace: string): FirehoseResource[] => {\n  const resource = [];\n  if (namespace) {\n    resource.push({\n      isList: true,\n      kind: ImageStreamModel.kind,\n      prop: ImageStreamModel.id,\n      namespace,\n    });\n  }\n  return resource;\n};\n","import * as _ from 'lodash';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { TRIGGERS_ANNOTATION } from '@console/shared';\n\nexport const getAppLabels = (\n  name: string,\n  application?: string,\n  imageStreamName?: string,\n  selectedTag?: string,\n  namespace?: string,\n) => {\n  const labels = {\n    app: name,\n    'app.kubernetes.io/instance': name,\n    'app.kubernetes.io/component': name,\n    ...(imageStreamName && {\n      'app.kubernetes.io/name': imageStreamName,\n      'app.openshift.io/runtime': imageStreamName,\n    }),\n  };\n\n  if (application && application.trim().length > 0) {\n    labels['app.kubernetes.io/part-of'] = application;\n  }\n  if (selectedTag) {\n    labels['app.openshift.io/runtime-version'] = selectedTag;\n  }\n  if (namespace) {\n    labels['app.openshift.io/runtime-namespace'] = namespace;\n  }\n\n  return labels;\n};\n\nexport const getGitAnnotations = (gitURL: string, gitRef?: string) => {\n  const ref = gitRef || 'master';\n  return {\n    'app.openshift.io/vcs-uri': gitURL,\n    'app.openshift.io/vcs-ref': ref,\n  };\n};\n\nexport const getCommonAnnotations = () => {\n  return {\n    'openshift.io/generated-by': 'OpenShiftWebConsole',\n  };\n};\n\nexport const getTriggerAnnotation = (\n  name: string,\n  namespace: string,\n  imageTrigger: boolean,\n  tag: string = 'latest',\n) => ({\n  [TRIGGERS_ANNOTATION]: JSON.stringify([\n    {\n      from: { kind: 'ImageStreamTag', name: `${name}:${tag}`, namespace },\n      fieldPath: `spec.template.spec.containers[?(@.name==\"${name}\")].image`,\n      pause: `${!imageTrigger}`,\n    },\n  ]),\n});\n\nexport const getPodLabels = (name: string) => {\n  return {\n    app: name,\n    deploymentconfig: name,\n  };\n};\n\nexport const mergeData = (originalResource: K8sResourceKind, newResource: K8sResourceKind) => {\n  const mergedData = _.merge({}, originalResource || {}, newResource);\n  mergedData.metadata.labels = newResource.metadata.labels;\n  if (mergedData.metadata.annotations) {\n    mergedData.metadata.annotations = newResource.metadata.annotations;\n  }\n  if (mergedData.spec?.template?.metadata?.labels) {\n    mergedData.spec.template.metadata.labels = newResource.spec?.template?.metadata?.labels;\n  }\n  if (mergedData.spec?.template?.spec?.containers) {\n    mergedData.spec.template.spec.containers = newResource.spec.template.spec.containers;\n  }\n  if (mergedData?.spec?.strategy) {\n    mergedData.spec.strategy = newResource.spec.strategy;\n  }\n  if (mergedData.spec?.triggers) {\n    mergedData.spec.triggers = newResource.spec.triggers;\n  }\n  return mergedData;\n};\n","import * as React from 'react';\nimport ResourceLimitSection from '@console/dev-console/src/components/import/advanced/ResourceLimitSection';\nimport FormSection from '@console/dev-console/src/components/import/section/FormSection';\nimport ProgressiveList from '@console/dev-console/src/components/progressive-list/ProgressiveList';\nimport ProgressiveListItem from '@console/dev-console/src/components/progressive-list/ProgressiveListItem';\n\nconst AdvancedSection: React.FC = () => {\n  const [visibleItems, setVisibleItems] = React.useState([]);\n  const handleVisibleItemChange = (item: string) => {\n    setVisibleItems([...visibleItems, item]);\n  };\n\n  return (\n    <FormSection title=\"Advanced Options\" fullWidth extraMargin>\n      <ProgressiveList\n        text=\"Click on the names to access advanced options for\"\n        visibleItems={visibleItems}\n        onVisibleItemChange={handleVisibleItemChange}\n      >\n        <ProgressiveListItem name=\"Resource Limits\">\n          <ResourceLimitSection />\n        </ProgressiveListItem>\n      </ProgressiveList>\n    </FormSection>\n  );\n};\n\nexport default AdvancedSection;\n","import * as React from 'react';\nimport { Formik } from 'formik';\nimport { connect } from 'react-redux';\nimport { history } from '@console/internal/components/utils';\nimport { getActiveApplication } from '@console/internal/reducers/ui';\nimport { RootState } from '@console/internal/redux';\nimport { ALL_APPLICATIONS_KEY } from '@console/shared';\nimport { K8sResourceKind, modelFor, referenceFor, k8sCreate } from '@console/internal/module/k8s';\nimport { sanitizeApplicationValue } from '@console/dev-console/src/utils/application-utils';\nimport { eventSourceValidationSchema } from './eventSource-validation-utils';\nimport EventSourceForm from './EventSourceForm';\nimport { getEventSourceResource } from '../../utils/create-eventsources-utils';\nimport { EventSourceFormData, EventSourceListData } from './import-types';\n\ninterface EventSourceProps {\n  namespace: string;\n  eventSourceStatus: EventSourceListData | null;\n  contextSource?: string;\n  selectedApplication?: string;\n}\n\ninterface StateProps {\n  activeApplication: string;\n}\n\ntype Props = EventSourceProps & StateProps;\n\nconst EventSource: React.FC<Props> = ({\n  namespace,\n  eventSourceStatus,\n  activeApplication,\n  contextSource,\n}) => {\n  const serviceName = contextSource?.split('/').pop() || '';\n  const initialValues: EventSourceFormData = {\n    project: {\n      name: namespace || '',\n      displayName: '',\n      description: '',\n    },\n    application: {\n      initial: sanitizeApplicationValue(activeApplication),\n      name: sanitizeApplicationValue(activeApplication),\n      selectedKey: activeApplication,\n    },\n    name: '',\n    apiVersion: '',\n    sink: {\n      knativeService: serviceName,\n    },\n    limits: {\n      cpu: {\n        request: '',\n        requestUnit: 'm',\n        defaultRequestUnit: 'm',\n        limit: '',\n        limitUnit: 'm',\n        defaultLimitUnit: 'm',\n      },\n      memory: {\n        request: '',\n        requestUnit: 'Mi',\n        defaultRequestUnit: 'Mi',\n        limit: '',\n        limitUnit: 'Mi',\n        defaultLimitUnit: 'Mi',\n      },\n    },\n    type: '',\n    data: {},\n    yamlData: '',\n  };\n\n  const createResources = (rawFormData: any): Promise<K8sResourceKind> => {\n    const knEventSourceResource = getEventSourceResource(rawFormData);\n    return k8sCreate(modelFor(referenceFor(knEventSourceResource)), knEventSourceResource);\n  };\n\n  const handleSubmit = (values, actions) => {\n    const {\n      project: { name: projectName },\n    } = values;\n    const eventSrcRequest: Promise<K8sResourceKind> = createResources(values);\n    eventSrcRequest\n      .then(() => {\n        actions.setSubmitting(false);\n        history.push(`/topology/ns/${projectName}`);\n      })\n      .catch((err) => {\n        actions.setSubmitting(false);\n        actions.setStatus({ submitError: err.message });\n      });\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      onReset={history.goBack}\n      validateOnBlur={false}\n      validateOnChange={false}\n      validationSchema={eventSourceValidationSchema}\n    >\n      {(props) => (\n        <EventSourceForm {...props} namespace={namespace} eventSourceStatus={eventSourceStatus} />\n      )}\n    </Formik>\n  );\n};\n\nconst mapStateToProps = (state: RootState, ownProps: EventSourceProps): StateProps => {\n  const activeApplication = ownProps.selectedApplication || getActiveApplication(state);\n  return {\n    activeApplication: activeApplication !== ALL_APPLICATIONS_KEY ? activeApplication : '',\n  };\n};\n\nexport default connect(mapStateToProps)(EventSource);\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Alert } from '@patternfly/react-core';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { knativeServingResourcesServices } from '../../utils/get-knative-resources';\nimport { EventSourceListData } from './import-types';\n\ninterface EventSourceAlertProps {\n  namespace: string;\n  eventSourceStatus: EventSourceListData | null;\n}\n\nconst EventSourceAlert: React.FC<EventSourceAlertProps> = ({ namespace, eventSourceStatus }) => {\n  const knServiceResource = React.useMemo(\n    () => ({ ...knativeServingResourcesServices(namespace)[0], limit: 1 }),\n    [namespace],\n  );\n  const [data, loaded, loadError] = useK8sWatchResource<K8sResourceKind[]>(knServiceResource);\n\n  const noEventSources = eventSourceStatus === null;\n  const noEventSourceAccess =\n    !noEventSources && eventSourceStatus.loaded && _.isEmpty(eventSourceStatus.eventSourceList);\n  const noKnativeService = loaded && !loadError && !data?.length;\n  const showAlert = noKnativeService || noEventSources || noEventSourceAccess;\n\n  return showAlert ? (\n    <Alert variant=\"default\" title=\"Event Source cannot be created\" isInline>\n      {noEventSourceAccess && 'You do not have write access in this project.'}\n      {noEventSources && 'Creation of event sources are not currently supported on this cluster.'}\n      {noKnativeService &&\n        !noEventSourceAccess &&\n        !noEventSources &&\n        'Event Sources can only sink to Knative Services. No Knative Services exist in this project.'}\n    </Alert>\n  ) : null;\n};\n\nexport default EventSourceAlert;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { FormikProps, FormikValues } from 'formik';\nimport { FormFooter, FlexForm } from '@console/shared';\nimport { LoadingInline } from '@console/internal/components/utils';\nimport EventSourcesSelector from './event-sources/EventSourcesSelector';\nimport EventSourceSection from './event-sources/EventSourceSection';\nimport { EventSourceListData } from './import-types';\n\ninterface OwnProps {\n  namespace: string;\n  eventSourceStatus: EventSourceListData | null;\n}\n\nconst EventSourceForm: React.FC<FormikProps<FormikValues> & OwnProps> = ({\n  errors,\n  handleSubmit,\n  handleReset,\n  status,\n  isSubmitting,\n  dirty,\n  namespace,\n  eventSourceStatus,\n}) => (\n  <FlexForm onSubmit={handleSubmit}>\n    {eventSourceStatus && !_.isEmpty(eventSourceStatus.eventSourceList) && (\n      <>\n        <EventSourcesSelector eventSourceList={eventSourceStatus.eventSourceList} />\n        <EventSourceSection namespace={namespace} />{' '}\n      </>\n    )}\n    {eventSourceStatus && !eventSourceStatus.loaded && <LoadingInline />}\n    <FormFooter\n      handleReset={handleReset}\n      errorMessage={status && status.submitError}\n      isSubmitting={isSubmitting}\n      submitLabel=\"Create\"\n      disableSubmit={!dirty || !_.isEmpty(errors)}\n      resetLabel=\"Cancel\"\n      sticky\n    />\n  </FlexForm>\n);\n\nexport default EventSourceForm;\n","import * as React from 'react';\nimport { Helmet } from 'react-helmet';\nimport { RouteComponentProps } from 'react-router';\nimport { PageBody, getBadgeFromType } from '@console/shared';\nimport { PageHeading } from '@console/internal/components/utils';\nimport NamespacedPage, {\n  NamespacedPageVariants,\n} from '@console/dev-console/src/components/NamespacedPage';\nimport { QUERY_PROPERTIES } from '@console/dev-console/src/const';\nimport EventSource from './EventSource';\nimport { KnativeEventingModel } from '../../models';\nimport EventSourceAlert from './EventSourceAlert';\nimport { useEventSourceList } from '../../utils/create-eventsources-utils';\n\ntype EventSourcePageProps = RouteComponentProps<{ ns?: string }>;\n\nconst EventSourcePage: React.FC<EventSourcePageProps> = ({ match, location }) => {\n  const namespace = match.params.ns;\n  const eventSourceStatus = useEventSourceList(namespace);\n  const searchParams = new URLSearchParams(location.search);\n  return (\n    <NamespacedPage disabled variant={NamespacedPageVariants.light}>\n      <Helmet>\n        <title>Event Sources</title>\n      </Helmet>\n      <PageHeading badge={getBadgeFromType(KnativeEventingModel.badge)} title=\"Event Sources\">\n        Create an event source to register interest in a class of events from a particular system\n      </PageHeading>\n      <PageBody flexLayout>\n        <EventSourceAlert namespace={namespace} eventSourceStatus={eventSourceStatus} />\n        <EventSource\n          namespace={namespace}\n          eventSourceStatus={eventSourceStatus}\n          selectedApplication={searchParams.get(QUERY_PROPERTIES.APPLICATION)}\n          contextSource={searchParams.get(QUERY_PROPERTIES.CONTEXT_SOURCE)}\n        />\n      </PageBody>\n    </NamespacedPage>\n  );\n};\n\nexport default EventSourcePage;\n","import * as React from 'react';\nimport { useFormikContext, FormikValues, useField } from 'formik';\nimport { connect } from 'react-redux';\nimport { k8sGet } from '@console/internal/module/k8s';\nimport { SecretModel } from '@console/internal/models';\nimport { errorModal } from '@console/internal/components/modals/error-modal';\nimport { FormGroup } from '@patternfly/react-core';\nimport { ValueFromPair } from '@console/internal/components/utils/value-from-pair';\nimport { getFieldId, useFormikValidationFix } from '@console/shared';\nimport { getActiveNamespace } from '@console/internal/reducers/ui';\nimport { RootState } from '@console/internal/redux';\n\ninterface SecretKeySelectorProps {\n  name: string;\n  label: string;\n}\n\ninterface StateProps {\n  namespace: string;\n}\n\nconst SecretKeySelector: React.FC<SecretKeySelectorProps & StateProps> = ({\n  name,\n  label,\n  namespace,\n}) => {\n  const { setFieldValue, setFieldTouched } = useFormikContext<FormikValues>();\n  const [field, { touched, error }] = useField(name);\n  const [secrets, setSecrets] = React.useState({});\n  const fieldId = getFieldId(name, 'secret-key-input');\n  const isValid = !(touched && error);\n\n  const getErrorMessage = (err: string | { name?: string; key?: string }): string => {\n    let errMsg = '';\n    if (typeof err === 'string') {\n      errMsg = err;\n    } else {\n      errMsg = err?.name || err?.key;\n    }\n    return errMsg;\n  };\n  const errorMessage = !isValid ? getErrorMessage(error) : '';\n\n  useFormikValidationFix(field.value);\n\n  React.useEffect(() => {\n    k8sGet(SecretModel, null, namespace)\n      .then((nsSecrets) => {\n        setSecrets(nsSecrets);\n      })\n      .catch((err) => {\n        if (err?.response?.status !== 403) {\n          errorModal({ error: err?.message });\n        }\n      });\n  }, [namespace]);\n\n  return (\n    <FormGroup\n      fieldId={fieldId}\n      label={label}\n      helperTextInvalid={errorMessage}\n      isValid={isValid}\n      isRequired\n    >\n      <ValueFromPair\n        pair={{ secretKeyRef: field.value }}\n        secrets={secrets}\n        configMaps={{}}\n        onChange={(val) => {\n          setFieldValue(name, val.target.value.secretKeyRef);\n          setFieldTouched(name, true);\n        }}\n      />\n    </FormGroup>\n  );\n};\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  namespace: getActiveNamespace(state),\n});\n\nexport default connect<StateProps, null, SecretKeySelectorProps>(mapStateToProps)(\n  SecretKeySelector,\n);\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { FormGroup } from '@patternfly/react-core';\nimport { AsyncComponent } from '@console/internal/components/utils/async';\nimport { DropdownField, getFieldId } from '@console/shared';\nimport FormSection from '@console/dev-console/src/components/import/section/FormSection';\nimport ServiceAccountDropdown from '../../dropdowns/ServiceAccountDropdown';\n\nconst ApiServerSection: React.FC = () => {\n  const { values, setFieldValue } = useFormikContext<FormikValues>();\n  const initVal = values?.data?.apiserversource?.resources || [];\n  const initialValueResources = !_.isEmpty(initVal)\n    ? initVal.map((val) => _.values(val))\n    : [['', '']];\n  const [nameValue, setNameValue] = React.useState(initialValueResources);\n  const handleNameValuePairs = React.useCallback(\n    ({ nameValuePairs }) => {\n      const updatedNameValuePairs = _.compact(\n        nameValuePairs.map(([name, value]) => {\n          if (value.length) {\n            return { apiVersion: name, kind: value };\n          }\n          return null;\n        }),\n      );\n      setNameValue(nameValuePairs);\n      setFieldValue('data.apiserversource.resources', updatedNameValuePairs);\n    },\n    [setFieldValue],\n  );\n  const modeItems = {\n    Ref: 'Ref',\n    Resource: 'Resource',\n  };\n  const fieldId = getFieldId(values.type, 'res-input');\n  return (\n    <FormSection title=\"ApiServerSource\" extraMargin>\n      <FormGroup\n        fieldId={fieldId}\n        label=\"Resource\"\n        helperText=\"The list of resources to watch\"\n        isRequired\n      >\n        <AsyncComponent\n          loader={() =>\n            import('@console/internal/components/utils/name-value-editor').then(\n              (c) => c.NameValueEditor,\n            )\n          }\n          nameValuePairs={nameValue}\n          valueString=\"kind\"\n          nameString=\"apiVersion\"\n          addString=\"Add Resource\"\n          readOnly={false}\n          allowSorting={false}\n          updateParentData={handleNameValuePairs}\n        />\n      </FormGroup>\n      <DropdownField\n        name=\"data.apiserversource.mode\"\n        label=\"Mode\"\n        items={modeItems}\n        title={modeItems.Ref}\n        helpText=\"The mode the receive adapter controller runs under\"\n        fullWidth\n      />\n      <ServiceAccountDropdown name=\"data.apiserversource.serviceAccountName\" />\n    </FormSection>\n  );\n};\n\nexport default ApiServerSection;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { TextInputTypes, FormGroup } from '@patternfly/react-core';\nimport { InputField, TextColumnField } from '@console/shared';\nimport { AsyncComponent } from '@console/internal/components/utils';\nimport FormSection from '@console/dev-console/src/components/import/section/FormSection';\nimport { getSuggestedName } from '@console/dev-console/src/utils/imagestream-utils';\n\nconst containerPaths = {\n  Image: 'data.containersource.template.spec.containers[0].image',\n  Name: 'data.containersource.template.spec.containers[0].name',\n  Env: 'data.containersource.template.spec.containers[0].env',\n  Args: 'data.containersource.template.spec.containers[0].args',\n};\n\nconst ContainerSourceSection: React.FC = () => {\n  const { values, setFieldValue } = useFormikContext<FormikValues>();\n  const {\n    data: {\n      containersource: {\n        template: {\n          spec: {\n            containers: [{ env: envs, args }],\n          },\n        },\n      },\n    },\n  } = values;\n  const initialEnvValues = !_.isEmpty(envs) ? _.map(envs, (env) => _.values(env)) : [['', '']];\n  const [nameValue, setNameValue] = React.useState(initialEnvValues);\n  const handleNameValuePairs = React.useCallback(\n    ({ nameValuePairs }) => {\n      const updatedNameValuePairs = _.compact(\n        nameValuePairs.map(([name, value]) => (value.length ? { name, value } : null)),\n      );\n      setNameValue(nameValuePairs);\n      setFieldValue(containerPaths.Env, updatedNameValuePairs);\n    },\n    [setFieldValue],\n  );\n  return (\n    <FormSection title=\"ContainerSource\" extraMargin>\n      <h3 className=\"co-section-heading-tertiary\">Container</h3>\n      <InputField\n        data-test-id=\"container-image-field\"\n        type={TextInputTypes.text}\n        name={containerPaths.Image}\n        label=\"Image\"\n        helpText=\"The image to run inside of the container\"\n        required\n        onChange={(e) => {\n          setFieldValue(containerPaths.Name, getSuggestedName(e.target.value));\n        }}\n      />\n      <InputField\n        data-test-id=\"container-name-field\"\n        type={TextInputTypes.text}\n        name={containerPaths.Name}\n        label=\"Name\"\n        helpText=\"The name of the image\"\n      />\n      <TextColumnField\n        data-test-id=\"container-arg-field\"\n        name={containerPaths.Args}\n        label=\"Arguments\"\n        addLabel=\"Add args\"\n        placeholder=\"argument\"\n        helpText=\"Arguments passed to the container\"\n        disableDeleteRow={args?.length === 1}\n      />\n      <FormGroup\n        fieldId=\"containersource-env\"\n        label=\"Environment variables\"\n        helperText=\"The list of variables to set in the container\"\n      >\n        <AsyncComponent\n          loader={() =>\n            import('@console/internal/components/utils/name-value-editor').then(\n              (c) => c.NameValueEditor,\n            )\n          }\n          data-test-id=\"container-env-field\"\n          nameValuePairs={nameValue}\n          valueString=\"Value\"\n          nameString=\"Name\"\n          readOnly={false}\n          allowSorting={false}\n          updateParentData={handleNameValuePairs}\n        />\n      </FormGroup>\n    </FormSection>\n  );\n};\n\nexport default ContainerSourceSection;\n","import * as React from 'react';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { InputField } from '@console/shared';\nimport FormSection from '@console/dev-console/src/components/import/section/FormSection';\n\nconst CronJobSection: React.FC = () => (\n  <FormSection title=\"CronJobSource\" extraMargin>\n    <InputField\n      type={TextInputTypes.text}\n      name=\"data.cronjobsource.data\"\n      label=\"Data\"\n      helpText=\"The data posted to the target function\"\n    />\n    <InputField\n      type={TextInputTypes.text}\n      name=\"data.cronjobsource.schedule\"\n      label=\"Schedule\"\n      helpText=\"Schedule is described using the unix-cron string format (* * * * *)\"\n      required\n    />\n  </FormSection>\n);\n\nexport default CronJobSection;\n","import * as React from 'react';\nimport { useFormikContext, FormikValues } from 'formik';\nimport * as _ from 'lodash';\nimport { useFormikValidationFix } from '@console/shared';\nimport { useK8sWatchResource } from '@console/internal/components/utils/k8s-watch-hook';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport AppSection from '@console/dev-console/src/components/import/app/AppSection';\nimport { ProjectModel } from '@console/internal/models';\nimport CronJobSection from './CronJobSection';\nimport SinkBindingSection from './SinkBindingSection';\nimport ApiServerSection from './ApiServerSection';\nimport ContainerSourceSection from './ContainerSourceSection';\nimport PingSourceSection from './PingSourceSection';\nimport KafkaSourceSection from './KafkaSourceSection';\nimport YAMLEditorSection from './YAMLEditorSection';\nimport { EventSources } from '../import-types';\nimport SinkSection from './SinkSection';\nimport AdvancedSection from '../AdvancedSection';\nimport { isKnownEventSource } from '../../../utils/create-eventsources-utils';\n\ninterface EventSourceSectionProps {\n  namespace: string;\n}\n\nconst EventSourceSection: React.FC<EventSourceSectionProps> = ({ namespace }) => {\n  const { values } = useFormikContext<FormikValues>();\n  const projectResource = { kind: ProjectModel.kind, prop: ProjectModel.id, isList: true };\n  const [data, loaded] = useK8sWatchResource<K8sResourceKind[]>(projectResource);\n  useFormikValidationFix(values);\n  if (!values.type) {\n    return null;\n  }\n  let EventSource: React.ReactElement;\n  switch (values.type) {\n    case EventSources.CronJobSource:\n      EventSource = <CronJobSection />;\n      break;\n    case EventSources.SinkBinding:\n      EventSource = <SinkBindingSection />;\n      break;\n    case EventSources.ApiServerSource:\n      EventSource = <ApiServerSection />;\n      break;\n    case EventSources.KafkaSource:\n      EventSource = <KafkaSourceSection />;\n      break;\n    case EventSources.ContainerSource:\n      EventSource = <ContainerSourceSection />;\n      break;\n    case EventSources.PingSource:\n      EventSource = <PingSourceSection />;\n      break;\n    default:\n      EventSource = <YAMLEditorSection />;\n  }\n  return (\n    <>\n      {EventSource}\n      {isKnownEventSource(values.type) && (\n        <>\n          <SinkSection namespace={namespace} />\n          <AppSection\n            project={values.project}\n            noProjectsAvailable={loaded && _.isEmpty(data)}\n            extraMargin\n          />\n        </>\n      )}\n      {values.type === EventSources.KafkaSource && <AdvancedSection />}\n    </>\n  );\n};\n\nexport default EventSourceSection;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { ItemSelectorField } from '@console/shared';\nimport FormSection from '@console/dev-console/src/components/import/section/FormSection';\nimport { NormalizedEventSources } from '../import-types';\nimport { KNATIVE_EVENT_SOURCE_APIGROUP } from '../../../const';\nimport { getEventSourceModels } from '../../../utils/fetch-dynamic-eventsources-utils';\nimport { isKnownEventSource, getEventSourceData } from '../../../utils/create-eventsources-utils';\nimport { CREATE_APPLICATION_KEY } from '@console/dev-console/src/const';\n\ninterface EventSourcesSelectorProps {\n  eventSourceList: NormalizedEventSources;\n}\n\nconst EventSourcesSelector: React.FC<EventSourcesSelectorProps> = ({ eventSourceList }) => {\n  const eventSourceItems = Object.keys(eventSourceList).length;\n  const {\n    values: {\n      application: { selectedKey },\n    },\n    setFieldValue,\n    setFieldTouched,\n    validateForm,\n    setErrors,\n    setStatus,\n  } = useFormikContext<FormikValues>();\n  const handleItemChange = React.useCallback(\n    (item: string) => {\n      setErrors({});\n      setStatus({});\n      if (isKnownEventSource(item)) {\n        const nameData = `data.${item.toLowerCase()}`;\n        const sourceData = getEventSourceData(item.toLowerCase());\n        setFieldValue(nameData, sourceData);\n        setFieldTouched(nameData, true);\n      }\n      const selDataModel = _.find(getEventSourceModels(), { kind: item });\n      const selApiVersion = selDataModel\n        ? `${selDataModel?.apiGroup}/${selDataModel?.apiVersion}`\n        : `${KNATIVE_EVENT_SOURCE_APIGROUP}/v1alpha1`;\n      const name = _.kebabCase(item);\n      setFieldValue('name', name);\n      setFieldTouched('name', true);\n      if (!selectedKey || selectedKey === CREATE_APPLICATION_KEY) {\n        setFieldValue('application.name', `${name}-app`);\n        setFieldTouched('application.name', true);\n      }\n      setFieldValue('apiVersion', selApiVersion);\n      setFieldTouched('apiVersion', true);\n      validateForm();\n    },\n    [setErrors, setStatus, setFieldValue, setFieldTouched, selectedKey, validateForm],\n  );\n\n  const itemSelectorField = (\n    <ItemSelectorField\n      itemList={eventSourceList}\n      loadingItems={!eventSourceItems}\n      name=\"type\"\n      onSelect={handleItemChange}\n      autoSelect\n    />\n  );\n\n  return eventSourceItems > 1 ? (\n    <FormSection title=\"Type\" fullWidth extraMargin>\n      {itemSelectorField}\n    </FormSection>\n  ) : (\n    itemSelectorField\n  );\n};\n\nexport default EventSourcesSelector;\n","import * as React from 'react';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { CheckboxField } from '@console/shared';\nimport SecretKeySelector from '../SecretKeySelector';\n\nconst KafkaSourceNetSection: React.FC = () => {\n  const {\n    values: { data },\n  } = useFormikContext<FormikValues>();\n\n  const saslEnable = data?.kafkasource?.net?.sasl?.enable;\n  const tlsEnable = data?.kafkasource?.net?.tls?.enable;\n\n  return (\n    <>\n      <h3 className=\"co-section-heading-tertiary\">Net</h3>\n      <CheckboxField\n        data-test-id=\"kafkasource-sasl-field\"\n        name=\"data.kafkasource.net.sasl.enable\"\n        formLabel=\"SASL\"\n        label=\"Enable\"\n      />\n      {saslEnable && (\n        <>\n          <SecretKeySelector name=\"data.kafkasource.net.sasl.user.secretKeyRef\" label=\"User\" />\n          <SecretKeySelector\n            name=\"data.kafkasource.net.sasl.password.secretKeyRef\"\n            label=\"Password\"\n          />\n        </>\n      )}\n      <CheckboxField\n        data-test-id=\"kafkasource-tls-field\"\n        name=\"data.kafkasource.net.tls.enable\"\n        formLabel=\"TLS\"\n        label=\"Enable\"\n      />\n      {tlsEnable && (\n        <>\n          <SecretKeySelector\n            name=\"data.kafkasource.net.tls.caCert.secretKeyRef\"\n            label=\"CA Certificate\"\n          />\n          <SecretKeySelector\n            name=\"data.kafkasource.net.tls.cert.secretKeyRef\"\n            label=\"Certificate\"\n          />\n          <SecretKeySelector name=\"data.kafkasource.net.tls.key.secretKeyRef\" label=\"Key\" />\n        </>\n      )}\n    </>\n  );\n};\n\nexport default KafkaSourceNetSection;\n","import * as React from 'react';\nimport { useFormikContext, FormikValues } from 'formik';\nimport FormSection from '@console/dev-console/src/components/import/section/FormSection';\nimport { InputField, TextColumnField } from '@console/shared';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport KafkaSourceNetSection from './KafkaSourceNetSection';\nimport ServiceAccountDropdown from '../../dropdowns/ServiceAccountDropdown';\n\nconst KafkaSourceSection: React.FC = () => {\n  const { values } = useFormikContext<FormikValues>();\n  const {\n    data: {\n      kafkasource: { bootstrapServers, topics },\n    },\n  } = values;\n  return (\n    <FormSection title=\"KafkaSource\" extraMargin>\n      <TextColumnField\n        data-test-id=\"kafkasource-bootstrapservers-field\"\n        name=\"data.kafkasource.bootstrapServers\"\n        label=\"BootstrapServers\"\n        addLabel=\"Add Bootstrapservers\"\n        helpText=\"The address of the Kafka broker\"\n        required\n        disableDeleteRow={bootstrapServers?.length === 1}\n      />\n      <TextColumnField\n        data-test-id=\"kafkasource-topics-field\"\n        name=\"data.kafkasource.topics\"\n        label=\"Topics\"\n        addLabel=\"Add Topics\"\n        helpText=\"Virtual groups across Kafka brokers\"\n        required\n        disableDeleteRow={topics?.length === 1}\n      />\n      <InputField\n        data-test-id=\"kafkasource-consumergroup-field\"\n        type={TextInputTypes.text}\n        name=\"data.kafkasource.consumerGroup\"\n        label=\"ConsumerGroup\"\n        helpText=\"A group that tracks maximum offset consumed\"\n        required\n      />\n      <KafkaSourceNetSection />\n      <ServiceAccountDropdown name=\"data.kafkasource.serviceAccountName\" />\n    </FormSection>\n  );\n};\n\nexport default KafkaSourceSection;\n","import * as React from 'react';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { InputField } from '@console/shared';\nimport FormSection from '@console/dev-console/src/components/import/section/FormSection';\n\nconst PingSourceSection: React.FC = () => (\n  <FormSection title=\"PingSource\" extraMargin>\n    <InputField\n      type={TextInputTypes.text}\n      name=\"data.pingsource.data\"\n      label=\"Data\"\n      helpText=\"The data posted to the target function\"\n    />\n    <InputField\n      type={TextInputTypes.text}\n      name=\"data.pingsource.schedule\"\n      label=\"Schedule\"\n      helpText=\"Schedule is described using the unix-cron string format (* * * * *)\"\n      required\n    />\n  </FormSection>\n);\n\nexport default PingSourceSection;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { TextInputTypes, FormGroup } from '@patternfly/react-core';\nimport { InputField, getFieldId } from '@console/shared';\nimport { AsyncComponent } from '@console/internal/components/utils/async';\nimport FormSection from '@console/dev-console/src/components/import/section/FormSection';\n\nconst SinkBindingSection: React.FC = () => {\n  const { values, setFieldValue } = useFormikContext<FormikValues>();\n  const initVal = values?.data?.sinkbinding?.subject?.selector?.matchLabels || {};\n  const initialValueResources = !_.isEmpty(initVal)\n    ? _.map(initVal, (key, val) => [val, key])\n    : [['', '']];\n  const [nameValue, setNameValue] = React.useState(initialValueResources);\n  const handleNameValuePairs = React.useCallback(\n    ({ nameValuePairs }) => {\n      let updatedNameValuePairs = {};\n      _.forEach(nameValuePairs, ([name, value]) => {\n        if (value.length) {\n          updatedNameValuePairs = { ...updatedNameValuePairs, [name]: value };\n          return updatedNameValuePairs;\n        }\n        return updatedNameValuePairs;\n      });\n      setNameValue(nameValuePairs);\n      setFieldValue('data.sinkbinding.subject.selector.matchLabels', updatedNameValuePairs);\n    },\n    [setFieldValue],\n  );\n  const fieldId = getFieldId(values.type, 'subject-matchLabels');\n  return (\n    <FormSection title=\"SinkBinding\" extraMargin>\n      <h3 className=\"co-section-heading-tertiary\">Subject</h3>\n      <InputField\n        data-test-id=\"sinkbinding-apiversion-field\"\n        type={TextInputTypes.text}\n        name=\"data.sinkbinding.subject.apiVersion\"\n        label=\"apiVersion\"\n        required\n      />\n      <InputField\n        data-test-id=\"sinkbinding-kind-field\"\n        type={TextInputTypes.text}\n        name=\"data.sinkbinding.subject.kind\"\n        label=\"Kind\"\n        required\n      />\n      <FormGroup fieldId={fieldId} label=\"Match Labels\">\n        <AsyncComponent\n          loader={() =>\n            import('@console/internal/components/utils/name-value-editor').then(\n              (c) => c.NameValueEditor,\n            )\n          }\n          nameValuePairs={nameValue}\n          valueString=\"Value\"\n          nameString=\"Name\"\n          addString=\"Add Values\"\n          readOnly={false}\n          allowSorting={false}\n          updateParentData={handleNameValuePairs}\n        />\n      </FormGroup>\n    </FormSection>\n  );\n};\n\nexport default SinkBindingSection;\n","import * as React from 'react';\nimport * as fuzzy from 'fuzzysearch';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { FormGroup } from '@patternfly/react-core';\nimport { getFieldId, ResourceDropdownField } from '@console/shared';\nimport FormSection from '@console/dev-console/src/components/import/section/FormSection';\nimport { knativeServingResourcesServices } from '../../../utils/get-knative-resources';\n\ninterface SinkSectionProps {\n  namespace: string;\n}\n\nconst SinkSection: React.FC<SinkSectionProps> = ({ namespace }) => {\n  const { setFieldValue, setFieldTouched, validateForm, initialValues } = useFormikContext<\n    FormikValues\n  >();\n  const autocompleteFilter = (strText, item): boolean => fuzzy(strText, item?.props?.name);\n  const fieldId = getFieldId('sink-name', 'dropdown');\n  const onChange = React.useCallback(\n    (selectedValue) => {\n      if (selectedValue) {\n        setFieldTouched('sink.knativeService', true);\n        setFieldValue('sink.knativeService', selectedValue);\n        validateForm();\n      }\n    },\n    [setFieldValue, setFieldTouched, validateForm],\n  );\n  const contextAvailable = !!initialValues.sink.knativeService;\n  return (\n    <FormSection title=\"Sink\" extraMargin>\n      <FormGroup\n        fieldId={fieldId}\n        helperText={!contextAvailable ? 'Select a Service to sink to.' : ''}\n        isRequired\n      >\n        <ResourceDropdownField\n          name=\"sink.knativeService\"\n          label=\"Knative Service\"\n          resources={knativeServingResourcesServices(namespace)}\n          dataSelector={['metadata', 'name']}\n          fullWidth\n          required\n          placeholder=\"Select Knative Service\"\n          showBadge\n          disabled={contextAvailable}\n          onChange={onChange}\n          autocompleteFilter={autocompleteFilter}\n          autoSelect\n        />\n      </FormGroup>\n    </FormSection>\n  );\n};\n\nexport default SinkSection;\n","import * as React from 'react';\nimport { safeDump } from 'js-yaml';\nimport { useFormikContext, FormikValues } from 'formik';\nimport { YAMLEditorField } from '@console/shared';\nimport FormSection from '@console/dev-console/src/components/import/section/FormSection';\nimport {\n  getEventSourcesDepResource,\n  isKnownEventSource,\n} from '../../../utils/create-eventsources-utils';\nimport { EventSourceFormData } from '../import-types';\n\nconst YAMLEditorSection: React.FC = () => {\n  const { setFieldValue, setFieldTouched, values } = useFormikContext<FormikValues>();\n  const formData = React.useRef(values);\n  if (formData.current.type !== values.type) {\n    formData.current = values;\n  }\n\n  React.useEffect(() => {\n    if (!isKnownEventSource(values.type)) {\n      setFieldValue(\n        'yamlData',\n        safeDump(getEventSourcesDepResource(formData.current as EventSourceFormData)),\n      );\n      setFieldTouched('yamlData', true);\n    }\n  }, [values.type, setFieldTouched, setFieldValue]);\n\n  return (\n    <FormSection title={values.type} flexLayout fullWidth>\n      <YAMLEditorField name=\"yamlData\" />\n    </FormSection>\n  );\n};\n\nexport default YAMLEditorSection;\n","import * as yup from 'yup';\nimport {\n  nameValidationSchema,\n  projectNameValidationSchema,\n  applicationNameValidationSchema,\n} from '@console/dev-console/src/components/import/validation-schema';\nimport { EventSources } from './import-types';\nimport { isKnownEventSource } from '../../utils/create-eventsources-utils';\n\nconst sinkServiceSchema = yup.object().shape({\n  knativeService: yup.string().required('Required'),\n});\n\nexport const sourceDataSpecSchema = yup\n  .object()\n  .when('type', {\n    is: EventSources.CronJobSource,\n    then: yup.object().shape({\n      cronjobsource: yup.object().shape({\n        data: yup.string().max(253, 'Cannot be longer than 253 characters.'),\n        schedule: yup\n          .string()\n          .max(253, 'Cannot be longer than 253 characters.')\n          .required('Required'),\n      }),\n    }),\n  })\n  .when('type', {\n    is: EventSources.PingSource,\n    then: yup.object().shape({\n      pingsource: yup.object().shape({\n        data: yup.string().max(253, 'Cannot be longer than 253 characters.'),\n        schedule: yup\n          .string()\n          .max(253, 'Cannot be longer than 253 characters.')\n          .required('Required'),\n      }),\n    }),\n  })\n  .when('type', {\n    is: EventSources.SinkBinding,\n    then: yup.object().shape({\n      sinkbinding: yup.object().shape({\n        subject: yup.object().shape({\n          selector: yup.object().shape({\n            matchLabels: yup.object(),\n          }),\n          apiVersion: yup\n            .string()\n            .max(253, 'Cannot be longer than 253 characters.')\n            .required('Required'),\n          kind: yup\n            .string()\n            .max(253, 'Cannot be longer than 253 characters.')\n            .required('Required'),\n        }),\n      }),\n    }),\n  })\n  .when('type', {\n    is: EventSources.ApiServerSource,\n    then: yup.object().shape({\n      apiserversource: yup.object().shape({\n        resources: yup\n          .array()\n          .of(\n            yup.object({\n              apiVersion: yup.string().required('Required'),\n              kind: yup.string().required('Required'),\n            }),\n          )\n          .required('Required'),\n      }),\n    }),\n  })\n  .when('type', {\n    is: EventSources.KafkaSource,\n    then: yup.object().shape({\n      kafkasource: yup.object().shape({\n        bootstrapServers: yup.array().of(yup.string().required('Required')),\n        consumerGroup: yup.string().required('Required'),\n        topics: yup.array().of(yup.string().required('Required')),\n        net: yup.object().shape({\n          sasl: yup.object().shape({\n            enable: yup.boolean(),\n            user: yup.object().when('enable', {\n              is: true,\n              then: yup.object().shape({\n                secretKeyRef: yup.object().shape({\n                  name: yup.string().required('Required'),\n                  key: yup.string().required('Required'),\n                }),\n              }),\n            }),\n            password: yup.object().when('enable', {\n              is: true,\n              then: yup.object().shape({\n                secretKeyRef: yup.object().shape({\n                  name: yup.string().required('Required'),\n                  key: yup.string().required('Required'),\n                }),\n              }),\n            }),\n          }),\n          tls: yup.object().shape({\n            enable: yup.boolean(),\n            caCert: yup.object().when('enable', {\n              is: true,\n              then: yup.object().shape({\n                secretKeyRef: yup.object().shape({\n                  name: yup.string().required('Required'),\n                  key: yup.string().required('Required'),\n                }),\n              }),\n            }),\n            cert: yup.object().when('enable', {\n              is: true,\n              then: yup.object().shape({\n                secretKeyRef: yup.object().shape({\n                  name: yup.string().required('Required'),\n                  key: yup.string().required('Required'),\n                }),\n              }),\n            }),\n            key: yup.object().when('enable', {\n              is: true,\n              then: yup.object().shape({\n                secretKeyRef: yup.object().shape({\n                  name: yup.string().required('Required'),\n                  key: yup.string().required('Required'),\n                }),\n              }),\n            }),\n          }),\n        }),\n      }),\n    }),\n  })\n  .when('type', {\n    is: EventSources.ContainerSource,\n    then: yup.object().shape({\n      containersource: yup.object().shape({\n        template: yup.object({\n          spec: yup.object({\n            containers: yup.array().of(\n              yup.object({\n                image: yup.string().required('Required'),\n              }),\n            ),\n          }),\n        }),\n      }),\n    }),\n  });\n\nexport const eventSourceValidationSchema = yup.lazy((formData) => {\n  if (isKnownEventSource(formData.type)) {\n    return yup.object().shape({\n      project: projectNameValidationSchema,\n      application: applicationNameValidationSchema,\n      name: nameValidationSchema,\n      sink: sinkServiceSchema,\n      data: sourceDataSpecSchema,\n    });\n  }\n  return yup.object().shape({\n    yamlData: yup.string(),\n  });\n});\n","import { LimitsData } from '@console/dev-console/src/components/import/import-types';\nimport {\n  EventSourceApiServerModel,\n  EventSourceContainerModel,\n  EventSourceCronJobModel,\n  EventSourceKafkaModel,\n  EventSourcePingModel,\n  EventSourceSinkBindingModel,\n} from '../../models';\n\nexport const EventSources = {\n  ApiServerSource: EventSourceApiServerModel.kind,\n  ContainerSource: EventSourceContainerModel.kind,\n  CronJobSource: EventSourceCronJobModel.kind,\n  KafkaSource: EventSourceKafkaModel.kind,\n  PingSource: EventSourcePingModel.kind,\n  SinkBinding: EventSourceSinkBindingModel.kind,\n};\n\nexport interface ProjectData {\n  name: string;\n  displayName: string;\n  description: string;\n}\n\nexport interface ApplicationData {\n  initial: string;\n  name: string;\n  selectedKey: string;\n}\n\nexport interface EventSourceData {\n  [x: string]: any;\n}\n\nexport interface KnativeServiceName {\n  knativeService: string;\n}\n\nexport interface EventSourceFormData {\n  project: ProjectData;\n  application: ApplicationData;\n  name: string;\n  apiVersion: string;\n  type: string;\n  sink: KnativeServiceName;\n  limits: LimitsData;\n  data?: EventSourceData;\n  yamlData?: string;\n}\n\nexport interface EventSourceList {\n  title: string;\n  iconUrl: string;\n  name: string;\n  displayName: string;\n  [x: string]: any;\n}\n\nexport interface NormalizedEventSources {\n  [eventSourceName: string]: EventSourceList;\n}\n\nexport interface EventSourceListData {\n  loaded: boolean;\n  eventSourceList: NormalizedEventSources;\n}\n","import * as React from 'react';\nimport * as fuzzy from 'fuzzysearch';\nimport { connect } from 'react-redux';\nimport { ResourceDropdownField } from '@console/shared';\nimport { ServiceAccountModel } from '@console/internal/models';\nimport { RootState } from '@console/internal/redux';\nimport { getActiveNamespace } from '@console/internal/reducers/ui';\n\ninterface ServiceAccountDropdownProps {\n  name: string;\n}\n\ninterface StateProps {\n  namespace: string;\n}\n\nconst ServiceAccountDropdown: React.FC<ServiceAccountDropdownProps & StateProps> = ({\n  name,\n  namespace,\n}) => {\n  const autocompleteFilter = (strText, item): boolean => fuzzy(strText, item?.props?.name);\n  const resources = [\n    {\n      isList: true,\n      kind: ServiceAccountModel.kind,\n      namespace,\n      prop: ServiceAccountModel.id,\n      optional: true,\n    },\n  ];\n  return (\n    <ResourceDropdownField\n      name={name}\n      label=\"Service Account Name\"\n      resources={resources}\n      dataSelector={['metadata', 'name']}\n      placeholder=\"Select a Service Account Name\"\n      autocompleteFilter={autocompleteFilter}\n      helpText=\"The name of Service Account use to run this\"\n      fullWidth\n      showBadge\n    />\n  );\n};\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  namespace: getActiveNamespace(state),\n});\n\nexport default connect<StateProps, null, ServiceAccountDropdownProps>(mapStateToProps)(\n  ServiceAccountDropdown,\n);\n","module.exports = __webpack_public_path__ + \"assets/apiserversource.png\";","module.exports = __webpack_public_path__ + \"assets/camelsource.svg\";","module.exports = __webpack_public_path__ + \"assets/containersource.png\";","module.exports = __webpack_public_path__ + \"assets/cronjobsource.svg\";","module.exports = __webpack_public_path__ + \"assets/kafkasource.svg\";","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { safeLoad } from 'js-yaml';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { checkAccess } from '@console/internal/components/utils';\nimport {\n  getAppLabels,\n  getCommonAnnotations,\n} from '@console/dev-console/src/utils/resource-label-utils';\nimport { useSafetyFirst } from '@console/internal/components/safety-first';\nimport {\n  EventSources,\n  EventSourceFormData,\n  EventSourceListData,\n} from '../components/add/import-types';\nimport { ServiceModel } from '../models';\nimport { getKnativeEventSourceIcon } from './get-knative-icon';\nimport { useEventSourceModels } from './fetch-dynamic-eventsources-utils';\n\nexport const isKnownEventSource = (eventSource: string): boolean =>\n  Object.keys(EventSources).includes(eventSource);\n\nexport const getEventSourcesDepResource = (formData: EventSourceFormData): K8sResourceKind => {\n  const {\n    type,\n    name,\n    apiVersion,\n    application: { name: applicationName },\n    project: { name: namespace },\n    data,\n    sink: { knativeService },\n  } = formData;\n\n  const defaultLabel = getAppLabels(name, applicationName);\n  const eventSrcData = data[type.toLowerCase()];\n  const eventSourceResource: K8sResourceKind = {\n    kind: type,\n    apiVersion,\n    metadata: {\n      name,\n      namespace,\n      labels: {\n        ...defaultLabel,\n      },\n      annotations: getCommonAnnotations(),\n    },\n    spec: {\n      sink: {\n        ref: {\n          apiVersion: `${ServiceModel.apiGroup}/${ServiceModel.apiVersion}`,\n          kind: ServiceModel.kind,\n          name: knativeService,\n        },\n      },\n      ...(eventSrcData && eventSrcData),\n    },\n  };\n\n  return eventSourceResource;\n};\n\nexport const getKafkaSourceResource = (formData: EventSourceFormData): K8sResourceKind => {\n  const {\n    limits: { cpu, memory },\n  } = formData;\n  const baseResource = getEventSourcesDepResource(formData);\n  const { net } = baseResource.spec;\n  baseResource.spec.net = {\n    ...net,\n    ...(!net.sasl?.enable && { sasl: { user: {}, password: {} } }),\n    ...(!net.tls?.enable && { tls: { caCert: {}, cert: {}, key: {} } }),\n  };\n  const kafkaSource = {\n    spec: {\n      resources: {\n        ...((cpu.limit || memory.limit) && {\n          limits: {\n            ...(cpu.limit && { cpu: `${cpu.limit}${cpu.limitUnit}` }),\n            ...(memory.limit && { memory: `${memory.limit}${memory.limitUnit}` }),\n          },\n        }),\n        ...((cpu.request || memory.request) && {\n          requests: {\n            ...(cpu.request && { cpu: `${cpu.request}${cpu.requestUnit}` }),\n            ...(memory.request && { memory: `${memory.request}${memory.requestUnit}` }),\n          },\n        }),\n      },\n    },\n  };\n  return _.merge({}, baseResource, kafkaSource);\n};\n\nexport const getEventSourceResource = (formData: EventSourceFormData): K8sResourceKind => {\n  switch (formData.type) {\n    case EventSources.KafkaSource:\n      return getKafkaSourceResource(formData);\n    case EventSources.ContainerSource:\n    case EventSources.CronJobSource:\n    case EventSources.ApiServerSource:\n    case EventSources.SinkBinding:\n    case EventSources.PingSource:\n      return getEventSourcesDepResource(formData);\n    default:\n      return safeLoad(formData.yamlData);\n  }\n};\n\nexport const getEventSourceData = (source: string) => {\n  const eventSourceData = {\n    cronjobsource: {\n      data: '',\n      schedule: '',\n    },\n    pingsource: {\n      data: '',\n      schedule: '',\n    },\n    sinkbinding: {\n      subject: {\n        apiVersion: '',\n        kind: '',\n        selector: {\n          matchLabels: {},\n        },\n      },\n    },\n    apiserversource: {\n      mode: 'Ref',\n      serviceAccountName: '',\n      resources: [\n        {\n          apiVersion: '',\n          kind: '',\n        },\n      ],\n    },\n    kafkasource: {\n      bootstrapServers: [''],\n      topics: [''],\n      consumerGroup: '',\n      net: {\n        sasl: {\n          enable: false,\n          user: { secretKeyRef: { name: '', key: '' } },\n          password: { secretKeyRef: { name: '', key: '' } },\n        },\n        tls: {\n          enable: false,\n          caCert: { secretKeyRef: { name: '', key: '' } },\n          cert: { secretKeyRef: { name: '', key: '' } },\n          key: { secretKeyRef: { name: '', key: '' } },\n        },\n      },\n      serviceAccountName: '',\n    },\n    containersource: {\n      template: {\n        spec: {\n          containers: [\n            {\n              image: '',\n              name: '',\n              args: [''],\n              env: [],\n            },\n          ],\n        },\n      },\n    },\n  };\n  return eventSourceData[source];\n};\n\nexport const useEventSourceList = (namespace: string): EventSourceListData | null => {\n  const [accessData, setAccessData] = useSafetyFirst({ loaded: false, eventSourceList: {} });\n  const { eventSourceModels, loaded: modelLoaded } = useEventSourceModels();\n  React.useEffect(() => {\n    const accessList = [];\n    if (modelLoaded) {\n      eventSourceModels.map((model) => {\n        const { apiGroup, plural, kind } = model;\n        const modelData = {\n          [model.kind]: {\n            name: kind,\n            iconUrl: getKnativeEventSourceIcon(kind),\n            displayName: kind,\n            title: kind,\n          },\n        };\n        return accessList.push(\n          checkAccess({\n            group: apiGroup,\n            resource: plural,\n            namespace,\n            verb: 'create',\n          }).then((result) => (result.status.allowed ? modelData : {})),\n        );\n      });\n      Promise.all(accessList)\n        .then((results) => {\n          const eventSourceList = results.reduce((acc, result) => {\n            return { ...acc, ...result };\n          }, {});\n          setAccessData({ loaded: true, eventSourceList });\n        })\n        // eslint-disable-next-line no-console\n        .catch((err) => console.warn(err.message));\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [modelLoaded]);\n  return eventSourceModels.length === 0 && modelLoaded ? null : accessData;\n};\n","import { kindForReference } from '@console/internal/module/k8s';\nimport * as apiServerSourceImg from '../imgs/logos/apiserversource.png';\nimport * as camelSourceImg from '../imgs/logos/camelsource.svg';\nimport * as containerSourceImg from '../imgs/logos/containersource.png';\nimport * as cronJobSourceImg from '../imgs/logos/cronjobsource.svg';\nimport * as kafkaSourceImg from '../imgs/logos/kafkasource.svg';\nimport * as eventSourceImg from '../imgs/event-source.svg';\nimport {\n  EventSourceCronJobModel,\n  EventSourceContainerModel,\n  EventSourceApiServerModel,\n  EventSourceCamelModel,\n  EventSourceKafkaModel,\n  EventSourcePingModel,\n} from '../models';\n\nexport const getKnativeEventSourceIcon = (kind: string): string => {\n  switch (kindForReference(kind)) {\n    case EventSourceApiServerModel.kind:\n      return apiServerSourceImg;\n    case EventSourceCamelModel.kind:\n      return camelSourceImg;\n    case EventSourceContainerModel.kind:\n      return containerSourceImg;\n    case EventSourceCronJobModel.kind:\n    case EventSourcePingModel.kind:\n      return cronJobSourceImg;\n    case EventSourceKafkaModel.kind:\n      return kafkaSourceImg;\n    default:\n      return eventSourceImg;\n  }\n};\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AAUA;AASA;AACA;AACA;AAEA;AAEA;AACA;AAOA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3CA;AACA;AACA;AACA;AACA;AACA;AA4BA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AAEA;;;;;;;;;;;;;AC3FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAKA;AAEA;AACA;AAiBA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AASA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACpEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AAEA;AACA;AASA;AASA;AACA;AASA;AAUA;AAEA;;;;;;;;;;;;;ACvDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAQA;AACA;AACA;AACA;AAEA;AAEA;AAQA;AAMA;AAOA;AAGA;AAWA;AAEA;;;;;;;;;;;;;AC1DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAQA;AAaA;AAYA;AAEA;;;;;;;;;;;;AC7FA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;AACA;AACA;AAGA;AACA;AACA;AAIA;;;;;;;;;;;;;AC1CA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAQA;AAMA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAKA;AAGA;AAEA;;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AACA;AAQA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAGA;AAGA;AAEA;;;;;;;;;;;;;AC3CA;AAAA;AAAA;AAAA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACdA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAKA;AAIA;AA0BA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AClNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AAOA;AAKA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACzFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAKA;AACA;AAKA;AAEA;;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAgBA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAcA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACrHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAQA;AACA;AAIA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAQA;AAWA;AAEA;AACA;AAAA;AAGA;AACA;AAYA;;;;;;;;;;;;;AC5CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AASA;AAEA;;;;;;;;;;;;;ACzCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAYA;AAKA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AAEA;AAQA;AAKA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAeA;AAQA;AAGA;AAEA;;;;;;;;;;;;;ACxEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAWA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAGA;AAEA;AACA;AAQA;AACA;AAEA;AAOA;AASA;AAKA;AAiBA;AAEA;;;;;;;;;;;;;AC/FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAMA;AAUA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAOA;AAGA;AAEA;;;;;;;;;;;;;ACzEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AACA;AACA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAUA;AAOA;AAEA;;;;;;;;;;;;;AC1EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;;AACA;AAIA;AACA;AAEA;AAEA;AACA;AAMA;AAEA;AACA;AAMA;AAMA;AAEA;AAIA;AAIA;AAKA;AAEA;;;;;;;;;;;;;ACtDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAKA;AAEA;AASA;AASA;AAQA;AACA;AAGA;AAEA;;;;;;;;;;;;;ACjDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAMA;AAUA;;;;;;;;;;;;;ACvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AAOA;AAOA;AACA;AAiBA;AAEA;;;;;;;;;;;;;ACpEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AAKA;AAiBA;AAEA;;;;;;;;;;;;;ACvDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAEA;AAGA;AAEA;;;;;;;;;;;;;ACnCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAKA;AACA;AAEA;AACA;AACA;AAEA,uEACA;AACA;AACA;AACA;AACA;AACA;AACA,gEACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gEACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sEACA;AACA;AACA;AACA,gEACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gvKA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACjBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAUA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAaA;AAEA;AACA;AACA;AAEA;;;;;;;;;;;;ACjDA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAKA;AACA;AACA;AAEA;AAGA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;;AACA;AAGA;AACA;AACA;AAKA;AACA;AACA;AAEA;AAIA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACpNA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}