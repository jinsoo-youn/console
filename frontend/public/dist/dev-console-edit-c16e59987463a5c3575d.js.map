{"version":3,"file":"dev-console-edit-c16e59987463a5c3575d.js","sources":["webpack:///./packages/dev-console/src/components/edit-application/EditApplication.tsx","webpack:///./packages/dev-console/src/components/edit-application/EditApplicationForm.tsx","webpack:///./packages/dev-console/src/components/edit-application/EditApplicationPage.tsx","webpack:///./packages/dev-console/src/components/import/git/DockerSection.tsx"],"sourcesContent":["import * as React from 'react';\nimport { Formik } from 'formik';\nimport * as _ from 'lodash';\nimport { connect } from 'react-redux';\nimport { getActivePerspective } from '@console/internal/reducers/ui';\nimport { RootState } from '@console/internal/redux';\nimport { history } from '@console/internal/components/utils';\nimport { NormalizedBuilderImages, normalizeBuilderImages } from '../../utils/imagestream-utils';\nimport {\n  createOrUpdateResources as createOrUpdateGitResources,\n  handleRedirect,\n} from '../import/import-submit-utils';\nimport { validationSchema as gitValidationSchema } from '../import/import-validation-utils';\nimport { createOrUpdateDeployImageResources } from '../import/deployImage-submit-utils';\nimport { deployValidationSchema } from '../import/deployImage-validation-utils';\nimport EditApplicationForm from './EditApplicationForm';\nimport { EditApplicationProps } from './edit-application-types';\nimport { getPageHeading, getInitialValues } from './edit-application-utils';\n\nexport interface StateProps {\n  perspective: string;\n}\n\nconst EditApplication: React.FC<EditApplicationProps & StateProps> = ({\n  perspective,\n  namespace,\n  appName,\n  resources: appResources,\n}) => {\n  const imageStreamsData =\n    appResources.imageStreams && appResources.imageStreams.loaded\n      ? appResources.imageStreams.data\n      : [];\n  const builderImages: NormalizedBuilderImages = !_.isEmpty(imageStreamsData)\n    ? normalizeBuilderImages(imageStreamsData)\n    : null;\n\n  const initialValues = getInitialValues(appResources, appName, namespace);\n  const pageHeading = getPageHeading(_.get(initialValues, 'build.strategy', ''));\n\n  const updateResources = (values) => {\n    if (values.build.strategy) {\n      const imageStream =\n        values.image.selected && builderImages ? builderImages[values.image.selected].obj : null;\n      return createOrUpdateGitResources(values, imageStream, false, false, 'update', appResources);\n    }\n    return createOrUpdateDeployImageResources(values, false, 'update', appResources);\n  };\n\n  const handleSubmit = (values, actions) => {\n    updateResources(values)\n      .then(() => {\n        actions.setSubmitting(false);\n        actions.setStatus({ submitError: '' });\n        handleRedirect(namespace, perspective);\n      })\n      .catch((err) => {\n        actions.setSubmitting(false);\n        actions.setStatus({ submitError: err.message });\n      });\n  };\n\n  const renderForm = (props) => {\n    return (\n      <EditApplicationForm\n        {...props}\n        appResources={appResources}\n        enableReinitialize=\"true\"\n        createFlowType={pageHeading}\n        builderImages={builderImages}\n      />\n    );\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      onSubmit={handleSubmit}\n      onReset={history.goBack}\n      validationSchema={\n        _.get(initialValues, 'build.strategy') ? gitValidationSchema : deployValidationSchema\n      }\n      render={renderForm}\n    />\n  );\n};\n\nconst mapStateToProps = (state: RootState) => {\n  const perspective = getActivePerspective(state);\n  return {\n    perspective,\n  };\n};\n\nexport default connect(mapStateToProps)(EditApplication);\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { FormikProps, FormikValues } from 'formik';\nimport { Form } from '@patternfly/react-core';\nimport { PageHeading } from '@console/internal/components/utils';\nimport { FormFooter } from '@console/shared';\nimport GitSection from '../import/git/GitSection';\nimport BuilderSection from '../import/builder/BuilderSection';\nimport DockerSection from '../import/git/DockerSection';\nimport AdvancedSection from '../import/advanced/AdvancedSection';\nimport AppSection from '../import/app/AppSection';\nimport { NormalizedBuilderImages } from '../../utils/imagestream-utils';\nimport ImageSearchSection from '../import/image-search/ImageSearchSection';\nimport { CreateApplicationFlow } from './edit-application-utils';\nimport { AppResources } from './edit-application-types';\n\nexport interface EditApplicationFormProps {\n  createFlowType: string;\n  builderImages?: NormalizedBuilderImages;\n  appResources: AppResources;\n}\n\nconst EditApplicationForm: React.FC<FormikProps<FormikValues> & EditApplicationFormProps> = ({\n  handleSubmit,\n  handleReset,\n  values,\n  createFlowType,\n  builderImages,\n  dirty,\n  errors,\n  status,\n  isSubmitting,\n  appResources,\n}) => (\n  <>\n    <PageHeading title={createFlowType} style={{ padding: '0px' }} />\n    <Form onSubmit={handleSubmit}>\n      {createFlowType !== CreateApplicationFlow.Container && <GitSection />}\n      {createFlowType === CreateApplicationFlow.Git && (\n        <BuilderSection image={values.image} builderImages={builderImages} />\n      )}\n      {createFlowType === CreateApplicationFlow.Dockerfile && (\n        <DockerSection buildStrategy={values.build.strategy} />\n      )}\n      {createFlowType === CreateApplicationFlow.Container && <ImageSearchSection />}\n      <AppSection project={values.project} />\n      <AdvancedSection values={values} appResources={appResources} />\n      <FormFooter\n        handleReset={handleReset}\n        errorMessage={status && status.submitError}\n        isSubmitting={isSubmitting}\n        submitLabel=\"Save\"\n        disableSubmit={!dirty || !_.isEmpty(errors)}\n        resetLabel=\"Cancel\"\n        sticky\n      />\n    </Form>\n  </>\n);\n\nexport default EditApplicationForm;\n","import * as React from 'react';\nimport { Firehose, FirehoseResource, LoadingBox } from '@console/internal/components/utils';\nimport { ImageStreamModel } from '@console/internal/models';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { Helmet } from 'react-helmet';\nimport { ServiceModel } from '@console/knative-plugin';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport NamespacedPage, { NamespacedPageVariants } from '../NamespacedPage';\nimport EditApplication from './EditApplication';\nimport { EditApplicationProps } from './edit-application-types';\n\nconst INSTANCE_LABEL = 'app.kubernetes.io/instance';\nconst EditApplicationComponentLoader: React.FunctionComponent<EditApplicationProps> = (\n  props: EditApplicationProps,\n) => {\n  const { loaded } = props;\n  return loaded ? <EditApplication {...props} /> : <LoadingBox />;\n};\n\nexport type ImportPageProps = RouteComponentProps<{ ns?: string }>;\n\nconst EditApplicationPage: React.FunctionComponent<ImportPageProps> = ({ match, location }) => {\n  const namespace = match.params.ns;\n  const queryParams = new URLSearchParams(location.search);\n  const editAppResourceKind = queryParams.get('kind');\n  const appName = queryParams.get('name');\n  const appResources: FirehoseResource[] = [\n    {\n      kind: 'Service',\n      prop: 'service',\n      name: appName,\n      namespace,\n      optional: true,\n    },\n    {\n      kind: 'BuildConfig',\n      prop: 'buildConfig',\n      name: appName,\n      namespace,\n      optional: true,\n    },\n    {\n      kind: 'Route',\n      prop: 'route',\n      name: appName,\n      namespace,\n      optional: true,\n    },\n    {\n      kind: 'ImageStream',\n      prop: 'imageStream',\n      isList: true,\n      namespace,\n      selector: {\n        matchLabels: { [INSTANCE_LABEL]: appName },\n      },\n      optional: true,\n    },\n    {\n      kind: ImageStreamModel.kind,\n      prop: 'imageStreams',\n      isList: true,\n      namespace: 'openshift',\n      optional: true,\n    },\n  ];\n  let kind = editAppResourceKind;\n  if (kind === ServiceModel.kind) {\n    kind = referenceForModel(ServiceModel);\n  }\n  appResources.push({\n    kind,\n    prop: 'editAppResource',\n    name: appName,\n    namespace,\n    optional: true,\n  });\n\n  return (\n    <NamespacedPage disabled variant={NamespacedPageVariants.light}>\n      <Helmet>\n        <title>Edit</title>\n      </Helmet>\n      <div className=\"co-m-pane__body\">\n        <Firehose resources={appResources}>\n          <EditApplicationComponentLoader namespace={namespace} appName={appName} />\n        </Firehose>\n      </div>\n    </NamespacedPage>\n  );\n};\n\nexport default EditApplicationPage;\n","import * as React from 'react';\nimport { TextInputTypes } from '@patternfly/react-core';\nimport { InputField } from '@console/shared';\nimport FormSection from '../section/FormSection';\n\nexport interface DockerSectionProps {\n  buildStrategy: string;\n}\n\nconst DockerSection: React.FC<DockerSectionProps> = ({ buildStrategy }) =>\n  buildStrategy === 'Docker' && (\n    <FormSection title=\"Dockerfile\">\n      <InputField\n        type={TextInputTypes.text}\n        name=\"docker.dockerfilePath\"\n        label=\"Dockerfile Path\"\n        helpText=\"Allows the builds to use a different path to locate your Dockerfile, relative to the Context Dir field.\"\n      />\n      <InputField\n        type={TextInputTypes.number}\n        name=\"docker.containerPort\"\n        label=\"Container Port\"\n        helpText=\"Port number the container exposes.\"\n        style={{ maxWidth: '100%' }}\n      />\n    </FormSection>\n  );\n\nexport default DockerSection;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AASA;AAEA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AC9FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AASA;AAaA;AACA;AACA;AACA;AAGA;AAGA;AACA;AACA;AACA;AAaA;;;;;;;;;;;;;AC5DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAGA;AACA;AAGA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAKA;AAEA;;;;;;;;;;;;;AC5FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAMA;AAGA;AAMA;AAUA;;;;;A","sourceRoot":""}