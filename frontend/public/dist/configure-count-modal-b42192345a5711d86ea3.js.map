{"version":3,"file":"configure-count-modal-b42192345a5711d86ea3.js","sources":["webpack:///./public/components/modals/configure-count-modal.tsx"],"sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\n\nimport { k8sPatch, K8sResourceKind, K8sKind } from '../../module/k8s';\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter } from '../factory/modal';\nimport { NumberSpinner, withHandlePromise } from '../utils';\n\nexport const ConfigureCountModal = withHandlePromise((props: ConfigureCountModalProps) => {\n  const getPath = props.path.substring(1).replace('/', '.');\n  const [value, setValue] = React.useState<number>(\n    _.get(props.resource, getPath) || props.defaultValue,\n  );\n\n  const submit = (e) => {\n    e.preventDefault();\n\n    const patch = [{ op: 'replace', path: props.path, value: _.toInteger(value) }];\n\n    const invalidateState = props.invalidateState || _.noop;\n\n    invalidateState(true, _.toInteger(value));\n    props\n      .handlePromise(k8sPatch(props.resourceKind, props.resource, patch))\n      .then(props.close)\n      .catch((error) => {\n        invalidateState(false);\n        throw error;\n      });\n  };\n\n  return (\n    <form onSubmit={submit} name=\"form\" className=\"modal-content \">\n      <ModalTitle>{props.title}</ModalTitle>\n      <ModalBody>\n        <p>{props.message}</p>\n        <NumberSpinner\n          className=\"pf-c-form-control\"\n          value={value}\n          onChange={(e: any) => setValue(e.target.value)}\n          changeValueBy={(operation) => setValue(_.toInteger(value) + operation)}\n          autoFocus\n          required\n          min={0}\n        />\n      </ModalBody>\n      <ModalSubmitFooter\n        errorMessage={props.errorMessage}\n        inProgress={props.inProgress}\n        submitText={props.buttonText}\n        cancel={props.cancel}\n      />\n    </form>\n  );\n});\n\nexport const configureCountModal = createModalLauncher(ConfigureCountModal);\n\nexport const configureReplicaCountModal = (props) => {\n  return configureCountModal(\n    _.assign(\n      {},\n      {\n        defaultValue: 0,\n        title: 'Edit Pod Count',\n        message: `${props.resourceKind.labelPlural} maintain the desired number of healthy pods.`,\n        path: '/spec/replicas',\n        buttonText: 'Save',\n      },\n      props,\n    ),\n  );\n};\n\nexport const configureJobParallelismModal = (props) => {\n  return configureCountModal(\n    _.defaults(\n      {},\n      {\n        defaultValue: 1,\n        title: 'Edit Parallelism',\n        message: `${props.resourceKind.labelPlural} create one or more pods and ensure that a specified number of them successfully terminate. When the specified number of completions is successfully reached, the job is complete.`,\n        path: '/spec/parallelism',\n        buttonText: 'Save',\n      },\n      props,\n    ),\n  );\n};\n\nexport type ConfigureCountModalProps = {\n  message: string;\n  buttonText: string;\n  defaultValue: number;\n  path: string;\n  resource: K8sResourceKind;\n  resourceKind: K8sKind;\n  title: string;\n  invalidateState?: (isInvalid: boolean, count?: number) => void;\n  handlePromise: <T>(promise: Promise<T>) => Promise<T>;\n  inProgress: boolean;\n  errorMessage: string;\n  cancel?: () => void;\n  close?: () => void;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAUA;AAQA;AAEA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAIA;;;;;A","sourceRoot":""}