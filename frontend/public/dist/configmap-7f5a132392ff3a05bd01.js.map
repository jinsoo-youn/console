{"version":3,"file":"configmap-7f5a132392ff3a05bd01.js","sources":["webpack:///./public/components/configmap.jsx","webpack:///./public/components/hypercloud/federated-config-map.tsx"],"sourcesContent":["import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { DetailsPage, ListPage, Table, TableRow, TableData } from './factory';\nimport { ConfigMapData, ConfigMapBinaryData } from './configmap-and-secret-data';\nimport { Kebab, SectionHeading, navFactory, ResourceKebab, ResourceLink, ResourceSummary, Timestamp } from './utils';\nimport { ConfigMapModel } from '../models';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\nimport { ResourceLabel } from '../models/hypercloud/resource-plural';\n\nconst menuActions = [...Kebab.getExtensionsActionsForKind(ConfigMapModel), ...Kebab.factory.common];\n\nconst kind = 'ConfigMap';\n\nconst tableColumnClasses = ['', '', 'hidden-xs', 'hidden-xs', Kebab.columnClass];\n\nconst ConfigMapTableHeader = t => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_2'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_18'),\n      sortFunc: 'dataSize',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_12'),\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[4] },\n    },\n  ];\n};\nConfigMapTableHeader.displayName = 'ConfigMapTableHeader';\n\nconst ConfigMapTableRow = ({ obj: configMap, index, key, style }) => {\n  return (\n    <TableRow id={configMap.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind=\"ConfigMap\" name={configMap.metadata.name} namespace={configMap.metadata.namespace} title={configMap.metadata.uid} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={configMap.metadata.namespace} title={configMap.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>{_.size(configMap.data) + _.size(configMap.binaryData)}</TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <Timestamp timestamp={configMap.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={configMap} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst ConfigMapDetails = ({ obj: configMap }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', { 0: ResourceLabel(configMap, t) })} />\n        <ResourceSummary resource={configMap} />\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DATA_1')} />\n        <ConfigMapData data={configMap.data} label={t('COMMON:MSG_DETAILS_TABDETAILS_DATA_1')} />\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('SINGLE:MSG_CONFIGMAPS_CONFIGMAPDETAILS_TABDETAILS_BINARYDATA_1')} />\n        <ConfigMapBinaryData data={configMap.binaryData} />\n      </div>\n    </>\n  );\n};\n\nconst ConfigMaps = props => {\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"Config Maps\" Header={ConfigMapTableHeader.bind(null, t)} Row={ConfigMapTableRow} virtualize />;\n};\n\nconst ConfigMapsPage = props => {\n  const { t } = useTranslation();\n  return <ListPage title={t('COMMON:MSG_LNB_MENU_27')} createButtonText={t('COMMON:MSG_MAIN_CREATEBUTTON_1', { 0: t('COMMON:MSG_LNB_MENU_27') })} ListComponent={ConfigMaps} canCreate={true} {...props} />;\n};\nconst ConfigMapsDetailsPage = props => <DetailsPage {...props} menuActions={menuActions} pages={[navFactory.details(ConfigMapDetails), navFactory.editYaml()]} />;\n\nexport { ConfigMaps, ConfigMapsPage, ConfigMapsDetailsPage };\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\n\nimport { AddHealthChecks, EditHealthChecks } from '@console/app/src/actions/modify-health-checks';\nimport { K8sResourceKind } from '../../module/k8s';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from '../factory';\nimport { DetailsItem, Kebab, KebabAction, detailsPage, LabelList, navFactory, ResourceKebab, ResourceLink, ResourceSummary, SectionHeading, Selector } from '../utils';\nimport { ResourceEventStream } from '../events';\nimport { FederatedConfigMapModel } from '../../models';\n\nexport const menuActions: KebabAction[] = [AddHealthChecks, Kebab.factory.AddStorage, ...Kebab.getExtensionsActionsForKind(FederatedConfigMapModel), EditHealthChecks, ...Kebab.factory.common];\n\nconst kind = FederatedConfigMapModel.kind;\n\nconst tableColumnClasses = ['', '', classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), Kebab.columnClass];\n\nconst FederatedConfigMapTableHeader = (t?: TFunction) => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_2'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_3'),\n      sortFunc: 'configmapNumScheduled',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_15'),\n      sortField: 'metadata.labels',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_16'),\n      sortField: 'spec.selector',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[5] },\n    },\n  ];\n};\nFederatedConfigMapTableHeader.displayName = 'FederatedConfigMapTableHeader';\n\nconst FederatedConfigMapTableRow: RowFunction<K8sResourceKind> = ({ obj: configmap, index, key, style }) => {\n  return (\n    <TableRow id={configmap.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={configmap.metadata.name} namespace={configmap.metadata.namespace} title={configmap.metadata.uid} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={configmap.metadata.namespace} title={configmap.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Link to={`/k8s/ns/${configmap.metadata.namespace}/configmaps/${configmap.metadata.name}/pods`} title=\"pods\">\n          {configmap.status.currentNumberScheduled} of {configmap.status.desiredNumberScheduled} pods\n        </Link>\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <LabelList kind={kind} labels={configmap.metadata.labels} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <Selector selector={configmap.spec.selector} namespace={configmap.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={configmap} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport const FederatedConfigMapDetailsList: React.FC<FederatedConfigMapDetailsListProps> = ({ ds }) => {\n  const { t } = useTranslation();\n  return (\n  <dl className=\"co-m-pane__details\">\n    <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_38')} obj={ds} path=\"status.currentNumberScheduled\" />\n    <DetailsItem label={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_39')} obj={ds} path=\"status.desiredNumberScheduled\" />\n  </dl>\n);\n  }\n\nconst FederatedConfigMapDetails: React.FC<FederatedConfigMapDetailsProps> = ({ obj: configmap }) => {\n  const { t } = useTranslation();\n  return (\n  <>\n    <div className=\"co-m-pane__body\">\n    <SectionHeading text={`${t('COMMON:MSG_MAIN_DIV1_3', { 0: t('COMMON:MSG_LNB_MENU_27') })} ${t('COMMON:MSG_DETAILS_TABOVERVIEW_1')}`} />\n      <div className=\"row\">\n        <div className=\"col-lg-6\">\n          <ResourceSummary resource={configmap} showPodSelector showNodeSelector showTolerations />\n        </div>\n        <div className=\"col-lg-6\">\n          <FederatedConfigMapDetailsList ds={configmap} />\n        </div>\n      </div>\n    </div>\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_CONTAINERS_TABLEHEADER_1')} />\n    </div>\n  </>\n);}\n\nconst { details, editYaml, events } = navFactory;\nexport const FederatedConfigMaps: React.FC = props => {\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"Federated Config Maps\" Header={FederatedConfigMapTableHeader.bind(null, t)} Row={FederatedConfigMapTableRow} virtualize />;\n}\n\nexport const FederatedConfigMapsPage: React.FC<FederatedConfigMapsPageProps> = props => <ListPage canCreate={true} ListComponent={FederatedConfigMaps} kind={kind} {...props} />;\n\nexport const FederatedConfigMapsDetailsPage: React.FC<FederatedConfigMapsDetailsPageProps> = props => <DetailsPage {...props} kind={kind} menuActions={menuActions} pages={[details(detailsPage(FederatedConfigMapDetails)), editYaml(), events(ResourceEventStream)]} />;\n\ntype FederatedConfigMapDetailsListProps = {\n  ds: K8sResourceKind;\n};\n\ntype FederatedConfigMapDetailsProps = {\n  obj: K8sResourceKind;\n};\n\ntype FederatedConfigMapsPageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: any;\n};\n\ntype FederatedConfigMapsDetailsPageProps = {\n  match: any;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACvGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;;AAAA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;A","sourceRoot":""}