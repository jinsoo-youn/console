{"version":3,"file":"scanning-modal-b8af83f0732794130626.js","sources":["webpack:///./public/components/hypercloud/modals/scanning-modal.jsx"],"sourcesContent":["import * as _ from 'lodash-es';\nimport { ValidTabGuard } from 'packages/kubevirt-plugin/src/components/create-vm-wizard/tabs/valid-tab-guard';\nimport * as React from 'react';\nimport { history } from '@console/internal/components/utils';\nimport { k8sCreateUrl, k8sList, referenceForModel, kindForReference } from '../../../module/k8s';\nimport { createModalLauncher, ModalTitle, ModalBody, ModalSubmitFooter } from '../../factory/modal';\nimport { PromiseComponent, ResourceIcon, SelectorInput } from '../../utils';\nimport { Section } from '../utils/section';\nimport { ResourceListDropdownWithDataToolbar } from '../utils/resource-list-dropdown';\nimport { ResourceListDropdown, RegistryListDropdown } from '../../resource-dropdown';\nimport { Button, Chip, ChipGroup, ChipGroupToolbarItem } from '@patternfly/react-core';\nimport { CloseIcon } from '@patternfly/react-icons';\nimport { ResourceIcon } from '../utils';\nimport { modelFor } from '../../../module/k8s/k8s-models';\nimport { NamespaceModel } from '@console/internal/models';\nimport { withRouter } from 'react-router-dom';\nimport { oidcClientIDInput } from 'integration-tests/views/oauth.view';\nimport { ResourceLabelPlural } from '../../../models/hypercloud/resource-plural';\nimport { withTranslation } from 'react-i18next';\n\nclass BaseScanningModal extends PromiseComponent {\n    constructor(props) {\n        super(props);\n        this._submit = this._submit.bind(this);\n        this._cancel = props.cancel.bind(this);\n\n        this.state = Object.assign(this.state, {\n            name: '',\n            dataList: [],\n            namespaces: [],\n            namespace: '',\n            resources: [],\n            resource: [],\n        });\n    }\n\n    componentDidMount() {\n        const { showNs } = this.props;\n        showNs && this.getNamespaceList();\n        const { ns } = this.props;\n        this.setState({ namespace: ns });\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        if (!prevProps.resource && prevState.namespace !== this.state.namespace) {\n            return this.getResourceList();\n        }\n    }\n\n    async getNamespaceList() {\n        const { ns } = this.props;\n        const list = await k8sList(NamespaceModel);\n        const namespaces = list.map(item => item.metadata.name);\n        const namespace = ns || namespaces[0];\n        this.setState({ namespaces, namespace });\n    }\n\n    async getResourceList() {\n        const { kind, ns, labelSelector } = this.props;\n        const resources = await k8sList(modelFor(kind), { ns: this.state.namespace, labelSelector });\n        return this.setState({ resources });\n    }\n\n    _submit(e) {\n        e.preventDefault();\n\n        let { kind, ns, modelKind, resource, labelSelector, isExtRegistry } = this.props;\n\n        let registries;\n\n        kind = kind || resource?.kind;\n\n        let modelPlural = 'scans';\n        if (kind === 'ExternalRegistry' || modelKind?.kind === 'ExternalRegistry') {\n            isExtRegistry = true;\n        }\n\n        if (isExtRegistry) {\n            modelPlural = 'ext-scans';\n        }\n\n        if (kind === 'Registry' || modelKind?.kind === 'Registry') {\n            if (resource) {\n                registries = [{\n                    'name': resource.metadata.name,\n                    'repositories': [\n                        {\n                            'name': '*'\n                        }\n                    ]\n                }];\n            }\n            else {\n                registries = this.state.resource.map(selectedItem => ({\n                    'name': selectedItem,\n                    'repositories': [\n                        {\n                            'name': '*'\n                        }\n                    ]\n                }))\n            }\n        } else if (kind === 'ExternalRegistry' || modelKind?.kind === 'ExternalRegistry') {\n            if (resource) {\n                registries = [{\n                    'name': resource.metadata.name,\n                    'repositories': [\n                        {\n                            'name': '*'\n                        }\n                    ]\n                }];\n            }\n            else {\n                registries = this.state.resource.map(selectedItem => ({\n                    'name': selectedItem,\n                    'repositories': [\n                        {\n                            'name': '*'\n                        }\n                    ]\n                }))\n            }\n        }\n        else if (kind === 'Repository' || modelKind?.kind === 'Repository') {\n            if (resource) {\n                registries = [{\n                    'name': resource.spec.registry,\n                    'repositories': [\n                        {\n                            'name': resource.metadata.name,\n                            'versions': [\n                                '*'\n                            ]\n                        }\n                    ]\n                }];\n            }\n            else {\n                const reg = isExtRegistry ? labelSelector['ext-registry'] : labelSelector.registry;\n                registries = [{\n                    'name': reg,\n                    'repositories': this.state.resource.map(selectedItem => (\n                        {\n                            'name': selectedItem,\n                            'versions': [\n                                '*'\n                            ]\n                        }\n                    ))\n                }];\n            }\n        } else if (kind === 'Tag') {\n            registries = [{\n                'name': resource.registry,\n                'repositories': [\n                    {\n                        'name': resource.repository,\n                        'versions': [\n                            resource.version\n                        ]\n                    }\n                ]\n            }];\n        }\n\n        const data = { registries };\n\n\n        const opts = {\n            ns: (this.state.namespace !== '' && this.state.namespace) || resource.metadata?.namespace || resource.namespace,\n            plural: 'scans',\n            name: this.state.name,\n        };\n        let model = kind ? modelFor(kind) : modelKind;\n\n        model = model || { apiVersion: 'v1' };\n\n        model.apiGroup = 'registry.tmax.io';\n\n        model.plural = modelPlural;\n\n        const promise = k8sCreateUrl(model, data, opts);\n        this.handlePromise(promise)\n            .then(this.successSubmit);\n    }\n\n    successSubmit = ({ imageScanRequestName }) => {\n        const { resource } = this.props;\n\n        const namespace = resource?.metadata?.namespace || this.state.namespace || resource?.namespace;\n\n        this.props.close();\n        history.push(`/k8s/ns/${namespace}/imagescanrequests/${imageScanRequestName}`);\n    }\n\n    onChangeName = (e) => {\n        this.setState({ name: e.target.value });\n    }\n\n    onChangeNamespace = (e) => {\n        this.setState({ namespace: e.target.value });\n    }\n\n    onSelectedItemChange = (items) => {\n        const resource = [...items][0] === 'All' ? this.state.resources.map(res => res.metadata.name)\n            : [...items].map(item => this.state.resources.find(res => res.metadata.uid === item)?.metadata.name);\n        this.setState({ resource });\n    };\n\n    render() {\n        const { kind, showNs, resource, message, modelKind, t } = this.props;\n        const { selected, resources } = this.state;\n\n        const label = ResourceLabelPlural({ kind: kind || modelKind?.kind || resource?.kind }, t);\n\n        const name = resource?.metadata?.name || resource?.version;\n\n        return (\n            <form onSubmit={this._submit} name=\"form\" className=\"modal-content\">\n                <ModalTitle>{t('COMMON:MSG_COMMON_ACTIONBUTTON_20')}</ModalTitle>\n                <ModalBody unsetOverflow={true}>\n                    <div className=\"row co-m-form-row\">\n                        <div className=\"col-sm-12\">\n                            {message || ''}\n                        </div>\n                    </div>\n                    <div className=\"row co-m=-form-row\">\n                        <div className=\"col-sm-12\" style={{ marginBottom: '15px' }}>\n                            <Section label=\"Name\" id=\"name\" isRequired={true}>\n                                <input className=\"pf-c-form-control\" id=\"name\" name=\"metadata.name\" onChange={this.onChangeName} value={this.state.name} />\n                            </Section>\n                        </div>\n                        {showNs && <div className=\"col-sm-12\" style={{ marginBottom: '15px' }}>\n                            <Section label=\"Namespace\" id=\"namespace\" isRequired={true}>\n                                <select className=\"col-sm-12\" value={this.state.namespace} onChange={this.onChangeNamespace}>\n                                    {this.state.namespaces.map(namespace => <option key={namespace} value={namespace}>{namespace}</option>)}\n                                </select>\n                            </Section>\n                        </div>}\n                        <div className=\"col-sm-12\">\n                            <label className={'control-label co-required'} htmlFor={label}>\n                                {label}\n                            </label>\n                            <div className=\"co-search-group\">\n                                {resource ?\n                                    <div>{name}</div> :\n                                    <ResourceListDropdownWithDataToolbar\n                                        resourceList={resources} // 필수\n                                        showAll={true} // 드롭다운에 all resource 라는 항목이 생긴다.\n                                        resourceType={label} // title, placeholder, all resources, chip group 에 적용되는 문구 (title, placeholder는 직접 지정하는 것의 우선순위가 더 높음)\n                                        autocompletePlaceholder=\"search by name\" // 검색란 placeholder\n                                        onSelectedItemChange={this.onSelectedItemChange} // 선택된 아이템 리스트 변동될 때마다 호출되는 함수\n                                    />\n                                }\n                            </div>\n                        </div>\n                    </div>\n                </ModalBody>\n                <ModalSubmitFooter\n                    errorMessage={this.state.errorMessage}\n                    inProgress={this.state.inProgress}\n                    submitText=\"Confirm\"\n                    cancel={this._cancel}\n                />\n            </form>\n        )\n    }\n};\n\nexport const scanningModal = createModalLauncher(withTranslation()(BaseScanningModal));\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAGA;AACA;AAEA;AACA;AACA;AAqKA;;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAzyBA;;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAGA;AACA;AACA;AAKA;AACA;AAGA;AAEA;AACA;AAKA;AAOA;AAQA;AACA;AAAA;AAEA;;;;;A","sourceRoot":""}