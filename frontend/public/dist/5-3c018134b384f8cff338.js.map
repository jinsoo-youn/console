{"version":3,"file":"5-3c018134b384f8cff338.js","sources":["webpack:///./public/components/hypercloud/sidebars/resource-sidebar-samples.tsx","webpack:///./public/components/sidebars/explore-type-sidebar.tsx","webpack:///./public/components/sidebars/resource-sidebar-samples.tsx","webpack:///./public/components/sidebars/resource-sidebar.jsx","webpack:///./public/imgs/network-policy-samples/1-deny-other-namespaces.svg","webpack:///./public/imgs/network-policy-samples/2-limit-certain-apps.svg","webpack:///./public/imgs/network-policy-samples/3-allow-ingress.svg","webpack:///./public/imgs/network-policy-samples/4-default-deny-all.svg","webpack:///./public/imgs/network-policy-samples/5-web-allow-external.svg","webpack:///./public/imgs/network-policy-samples/6-web-db-allow-all-ns.svg","webpack:///./public/imgs/network-policy-samples/7-web-allow-production.svg"],"sourcesContent":["import { Map as ImmutableMap } from 'immutable';\n// import {\n//     LimitRangeModel\n// } from '../../../models';\n\nimport {\n    GroupVersionKind,\n} from '../../../module/k8s';\n\n// import {\n// apiVersionForModel,\n//     K8sKind,\n//     referenceForModel\n// } from '../../../module/k8s';\n\n// const getTargetResource = (model: K8sKind) => ({\n//     apiVersion: apiVersionForModel(model),\n//     kind: model.kind,\n// });\n\n\nexport const hyperCloudSamples = ImmutableMap<GroupVersionKind, Sample[]>()\n// hyperCloud Samples description example\n// .setIn(\n//     [referenceForModel(LimitRangeModel)],\n//     [\n//         {\n//             highlightText: 'Limit Range Uppercase',\n//             title: 'Limit Range Model Sample Yaml',\n//             img: 'Image File',\n//             description: 'Limit Range Model Sample Yaml Description',\n//             id: 'sample',\n//             targetResource: getTargetResource(LimitRangeModel),\n//         },\n//     ],\n// );\n\ntype Sample = {\n    highlightText?: string;\n    title: string;\n    img?: string;\n    description: string;\n    id: string;\n    yaml?: string;\n    snippet?: boolean;\n    targetResource: {\n        apiVersion: string;\n        kind: string;\n    };\n};","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Breadcrumb, BreadcrumbItem, Button } from '@patternfly/react-core';\n\nimport {\n  getDefinitionKey,\n  getStoredSwagger,\n  getSwaggerPath,\n  K8sKind,\n  SwaggerDefinition,\n  SwaggerDefinitions,\n} from '../../module/k8s';\nimport { CamelCaseWrap, EmptyBox, LinkifyExternal } from '../utils';\n\nconst getRef = (definition: SwaggerDefinition): string => {\n  const ref = definition.$ref || _.get(definition, 'items.$ref');\n  const re = /^#\\/definitions\\//;\n  // Only follow JSON pointers, not external URI references.\n  return ref && re.test(ref) ? ref.replace(re, '') : null;\n};\n\nexport const ExploreType: React.FC<ExploreTypeProps> = (props) => {\n  // Track the previously selected items to build breadcrumbs. Each history\n  // entry contains the name, description, and path to the definition in the\n  // OpenAPI document.\n  const [drilldownHistory, setDrilldownHistory] = React.useState([]);\n  const { kindObj } = props;\n  if (!kindObj) {\n    return null;\n  }\n\n  const allDefinitions: SwaggerDefinitions = getStoredSwagger();\n  if (!allDefinitions) {\n    return null;\n  }\n  const currentSelection = _.last(drilldownHistory);\n  // Show the current selected property or the top-level definition for the kind.\n  const currentPath = currentSelection\n    ? currentSelection.path\n    : [getDefinitionKey(kindObj, allDefinitions)];\n  const currentDefinition: SwaggerDefinition = _.get(allDefinitions, currentPath) || {};\n  const currentProperties =\n    _.get(currentDefinition, 'properties') || _.get(currentDefinition, 'items.properties');\n\n  // Prefer the description saved in `currentSelection`. It won't always be defined in the definition itself.\n  const description = currentSelection\n    ? currentSelection.description\n    : currentDefinition.description;\n  const required = new Set(currentDefinition.required || []);\n  const breadcrumbs = drilldownHistory.length\n    ? [kindObj.kind, ..._.map(drilldownHistory, 'name')]\n    : [];\n\n  const drilldown = (\n    e: React.MouseEvent<HTMLButtonElement>,\n    name: string,\n    desc: string,\n    path: string[],\n  ) => {\n    e.preventDefault();\n    setDrilldownHistory([...drilldownHistory, { name, description: desc, path }]);\n    if (props.scrollTop) {\n      props.scrollTop();\n    }\n  };\n\n  const breadcrumbClicked = (e: React.MouseEvent<HTMLButtonElement>, i: number) => {\n    e.preventDefault();\n    setDrilldownHistory(_.take(drilldownHistory, i));\n  };\n\n  // Get the path in the swagger document to additional property details for drilldown.\n  // This can be\n  // - A reference to another top-level definition\n  // - Inline property declartions\n  // - Inline property declartions for array items\n  const getDrilldownPath = (name: string): string[] => {\n    const path = getSwaggerPath(allDefinitions, currentPath, name, true);\n    // Only allow drilldown if the reference has additional properties to explore.\n    const child = _.get(allDefinitions, path) as SwaggerDefinition;\n    return _.has(child, 'properties') || _.has(child, 'items.properties') ? path : null;\n  };\n\n  // Get the type to display for a property reference.\n  const getTypeForRef = (ref: string): string =>\n    _.get(allDefinitions, [ref, 'format']) || _.get(allDefinitions, [ref, 'type']);\n\n  return (\n    <>\n      {!_.isEmpty(breadcrumbs) && (\n        <Breadcrumb className=\"pf-c-breadcrumb--no-padding-top co-break-word\">\n          {breadcrumbs.map((crumb, i) => {\n            const isLast = i === breadcrumbs.length - 1;\n            return (\n              <BreadcrumbItem key={i} isActive={isLast}>\n                {isLast ? (\n                  crumb\n                ) : (\n                  <Button\n                    type=\"button\"\n                    onClick={(e) => breadcrumbClicked(e, i)}\n                    isInline\n                    variant=\"link\"\n                  >\n                    {crumb}\n                  </Button>\n                )}\n              </BreadcrumbItem>\n            );\n          })}\n        </Breadcrumb>\n      )}\n      {description && (\n        <p className=\"co-break-word co-pre-wrap\">\n          <LinkifyExternal>{description}</LinkifyExternal>\n        </p>\n      )}\n      {_.isEmpty(currentProperties) ? (\n        <EmptyBox label=\"Properties\" />\n      ) : (\n        <ul className=\"co-resource-sidebar-list\">\n          {_.map(currentProperties, (definition: SwaggerDefinition, name: string) => {\n            const path = getDrilldownPath(name);\n            const definitionType = definition.type || getTypeForRef(getRef(definition));\n            return (\n              <li key={name} className=\"co-resource-sidebar-item\">\n                <h5 className=\"co-resource-sidebar-item__header co-break-word\">\n                  <CamelCaseWrap value={name} />\n                  &nbsp;\n                  <small>\n                    <span className=\"co-break-word\">{definitionType}</span>\n                    {required.has(name) && <> &ndash; required</>}\n                  </small>\n                </h5>\n                {definition.description && (\n                  <p className=\"co-break-word co-pre-wrap\">\n                    <LinkifyExternal>{definition.description}</LinkifyExternal>\n                  </p>\n                )}\n                {path && (\n                  <Button\n                    type=\"button\"\n                    onClick={(e) => drilldown(e, name, definition.description, path)}\n                    isInline\n                    variant=\"link\"\n                  >\n                    View details\n                  </Button>\n                )}\n              </li>\n            );\n          })}\n        </ul>\n      )}\n    </>\n  );\n};\n\ntype ExploreTypeProps = {\n  kindObj: K8sKind;\n  scrollTop?: () => void;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Map as ImmutableMap } from 'immutable';\nimport { Button } from '@patternfly/react-core';\nimport MonacoEditor from 'react-monaco-editor';\nimport {\n  ChevronDownIcon,\n  ChevronRightIcon,\n  DownloadIcon,\n  PasteIcon,\n} from '@patternfly/react-icons';\n\nimport {\n  BuildConfigModel,\n  ClusterRoleModel,\n  ConsoleLinkModel,\n  NetworkPolicyModel,\n  ResourceQuotaModel,\n  RoleModel,\n} from '../../models';\nimport {\n  apiVersionForModel,\n  GroupVersionKind,\n  K8sKind,\n  K8sResourceKind,\n  referenceFor,\n  referenceForModel,\n} from '../../module/k8s';\nimport { FirehoseResult } from '../utils';\nimport * as denyOtherNamespacesImg from '../../imgs/network-policy-samples/1-deny-other-namespaces.svg';\nimport * as limitCertainAppImg from '../../imgs/network-policy-samples/2-limit-certain-apps.svg';\nimport * as allowIngressImg from '../../imgs/network-policy-samples/3-allow-ingress.svg';\nimport * as defaultDenyAllImg from '../../imgs/network-policy-samples/4-default-deny-all.svg';\nimport * as webAllowExternalImg from '../../imgs/network-policy-samples/5-web-allow-external.svg';\nimport * as webDbAllowAllNsImg from '../../imgs/network-policy-samples/6-web-db-allow-all-ns.svg';\nimport * as webAllowProductionImg from '../../imgs/network-policy-samples/7-web-allow-production.svg';\nimport { hyperCloudSamples } from '../hypercloud/sidebars/resource-sidebar-samples';\n\nconst getTargetResource = (model: K8sKind) => ({\n  apiVersion: apiVersionForModel(model),\n  kind: model.kind,\n});\n\nconst clusterRoleBindingSamples: Sample[] = [\n  {\n    title: 'Allow reading Nodes in the core API groups (for ClusterRoleBinding)',\n    description:\n      'This \"ClusterRole\" is allowed to read the resource \"nodes\" in the core group (because a Node is cluster-scoped, this must be bound with a \"ClusterRoleBinding\" to be effective).',\n    id: 'read-nodes',\n    targetResource: getTargetResource(ClusterRoleModel),\n  },\n  {\n    title: '\"GET/POST\" requests to non-resource endpoint and all subpaths (for ClusterRoleBinding)',\n    description:\n      'This \"ClusterRole\" is allowed to \"GET\" and \"POST\" requests to the non-resource endpoint \"/healthz\" and all subpaths (must be in the \"ClusterRole\" bound with a \"ClusterRoleBinding\" to be effective).',\n    id: 'get-and-post-to-non-resource-endpoints',\n    targetResource: getTargetResource(ClusterRoleModel),\n  },\n];\n\nconst defaultSamples = ImmutableMap<GroupVersionKind, Sample[]>()\n  .setIn(\n    [referenceForModel(BuildConfigModel)],\n    [\n      {\n        title: 'Build from Dockerfile',\n        description:\n          'A Dockerfile build performs an image build using a Dockerfile in the source repository or specified in build configuration.',\n        id: 'docker-build',\n        targetResource: getTargetResource(BuildConfigModel),\n      },\n      {\n        title: 'Source-to-Image (S2I) build',\n        description:\n          'S2I is a tool for building reproducible container images. It produces ready-to-run images by injecting the application source into a container image and assembling a new image.',\n        id: 's2i-build',\n        targetResource: getTargetResource(BuildConfigModel),\n      },\n    ],\n  )\n  .setIn(\n    [referenceForModel(NetworkPolicyModel)],\n    [\n      {\n        highlightText: 'Limit',\n        title: 'access to the current namespace',\n        img: denyOtherNamespacesImg,\n        description:\n          'Deny traffic from other namespaces while allowing all traffic from the namespaces the Pod is living in.',\n        id: 'deny-other-namespaces',\n        targetResource: getTargetResource(NetworkPolicyModel),\n      },\n      {\n        highlightText: 'Limit',\n        title: 'traffic to an application within the same namespace',\n        img: limitCertainAppImg,\n        description:\n          'Allow inbound traffic from only certain Pods. One typical use case is to restrict the connections to a database only to the specific applications.',\n        id: 'db-or-api-allow-app',\n        targetResource: getTargetResource(NetworkPolicyModel),\n      },\n      {\n        highlightText: 'Allow',\n        title: 'http and https ingress within the same namespace',\n        img: allowIngressImg,\n        description:\n          'Define ingress rules for specific port numbers of an application. The rule applies to all port numbers if not specified.',\n        id: 'api-allow-http-and-https',\n        targetResource: getTargetResource(NetworkPolicyModel),\n      },\n      {\n        highlightText: 'Deny',\n        title: 'all non-whitelisted traffic in the current namespace',\n        img: defaultDenyAllImg,\n        description:\n          'A fundamental policy by blocking all cross-pod traffics expect whitelisted ones through the other Network Policies being deployed.',\n        id: 'default-deny-all',\n        targetResource: getTargetResource(NetworkPolicyModel),\n      },\n      {\n        highlightText: 'Allow',\n        title: 'traffic from external clients',\n        img: webAllowExternalImg,\n        description:\n          'Allow external service from public Internet directly or through a Load Balancer to access the pod.',\n        id: 'web-allow-external',\n        targetResource: getTargetResource(NetworkPolicyModel),\n      },\n      {\n        highlightText: 'Allow',\n        title: 'traffic to an application from all namespaces',\n        img: webDbAllowAllNsImg,\n        description:\n          'One typical use case is for a common database which is used by deployments in different namespaces.',\n        id: 'web-db-allow-all-ns',\n        targetResource: getTargetResource(NetworkPolicyModel),\n      },\n      {\n        highlightText: 'Allow',\n        title: 'traffic from all pods in a particular namespace',\n        img: webAllowProductionImg,\n        description:\n          'Typical use case should be \"only allow deployments in production namespaces to access the database\" or \"allow monitoring tools (in another namespace) to scrape metrics from current namespace.\"',\n        id: 'web-allow-production',\n        targetResource: getTargetResource(NetworkPolicyModel),\n      },\n    ],\n  )\n  .setIn(\n    [referenceForModel(ResourceQuotaModel)],\n    [\n      {\n        title: 'Set compute resource quota',\n        description: 'Limit the total amount of memory and CPU that can be used in a namespace.',\n        id: 'rq-compute',\n        targetResource: getTargetResource(ResourceQuotaModel),\n      },\n      {\n        title: 'Set maximum count for any resource',\n        description:\n          'Restrict maximum count of each resource so users cannot create more than the allotted amount.',\n        id: 'rq-counts',\n        targetResource: getTargetResource(ResourceQuotaModel),\n      },\n      {\n        title: 'Specify resource quotas for a given storage class',\n        description:\n          'Limit the size and number of persistent volume claims that can be created with a storage class.',\n        id: 'rq-storageclass',\n        targetResource: getTargetResource(ResourceQuotaModel),\n      },\n    ],\n  )\n  .setIn(\n    [referenceForModel(RoleModel)],\n    [\n      {\n        title: 'Allow reading the resource in API group',\n        description: 'This \"Role\" is allowed to read the resource \"Pods\" in the core API group.',\n        id: 'read-pods-within-ns',\n        targetResource: getTargetResource(RoleModel),\n      },\n      {\n        title: 'Allow reading/writing the resource in API group',\n        description:\n          'This \"Role\" is allowed to read and write the \"Deployments\" in both the \"extensions\" and \"apps\" API groups.',\n        id: 'read-write-deployment-in-ext-and-apps-apis',\n        targetResource: getTargetResource(RoleModel),\n      },\n      {\n        title: 'Allow different access rights to different types of resource and API groups',\n        description:\n          'This \"Role\" is allowed to read \"Pods\" and read/write \"Jobs\" resources in API groups.',\n        id: 'read-pods-and-read-write-jobs',\n        targetResource: getTargetResource(RoleModel),\n      },\n      {\n        title: 'Allow reading a ConfigMap in a specific namespace (for RoleBinding)',\n        description:\n          'This \"Role\" is allowed to read a \"ConfigMap\" named \"my-config\" (must be bound with a \"RoleBinding\" to limit to a single \"ConfigMap\" in a single namespace).',\n        id: 'read-configmap-within-ns',\n        targetResource: getTargetResource(RoleModel),\n      },\n      ...clusterRoleBindingSamples,\n    ],\n  )\n  .setIn([referenceForModel(ClusterRoleModel)], clusterRoleBindingSamples)\n  .setIn(\n    [referenceForModel(ConsoleLinkModel)],\n    [\n      {\n        title: 'Add a link to the user menu',\n        description: 'The user menu appears in the right side of the masthead below the username.',\n        id: 'cl-user-menu',\n        targetResource: getTargetResource(ConsoleLinkModel),\n      },\n      {\n        title: 'Add a link to the application menu',\n        description:\n          'The application menu appears in the masthead below the 9x9 grid icon.  Application menu links can include an optional image and section heading.',\n        id: 'cl-application-menu',\n        targetResource: getTargetResource(ConsoleLinkModel),\n      },\n      {\n        title: 'Add a link to the namespace dashboard',\n        description:\n          'Namespace dashboard links appear on the project dashboard and namespace details pages in a section called \"Launcher\".  Namespace dashboard links can optionally be restricted to a specific namespace or namespaces.',\n        id: 'cl-namespace-dashboard',\n        targetResource: getTargetResource(ConsoleLinkModel),\n      },\n    ],\n  );\n\nexport const getResourceSidebarSamples = (kindObj: K8sKind, yamlSamplesList: FirehoseResult) => {\n  const yamlSamplesData = !_.isEmpty(yamlSamplesList)\n    ? _.filter(\n      yamlSamplesList.data,\n      (sample: K8sResourceKind) =>\n        sample.spec.targetResource.apiVersion === apiVersionForModel(kindObj) &&\n        sample.spec.targetResource.kind === kindObj.kind,\n    )\n    : [];\n  const existingSamples = hyperCloudSamples.get(referenceForModel(kindObj)) || defaultSamples.get(referenceForModel(kindObj)) || [];\n  const extensionSamples = !_.isEmpty(yamlSamplesData)\n    ? yamlSamplesData.map((sample: K8sResourceKind) => {\n      return {\n        id: sample.metadata.uid,\n        ...sample.spec,\n      };\n    })\n    : [];\n\n  const allSamples = [...existingSamples, ...extensionSamples];\n\n  // For the time being, `snippets` are a superset of `samples`\n  const snippets = allSamples.filter((sample: Sample) => sample.snippet);\n  const samples = allSamples.filter((sample: Sample) => !sample.snippet);\n\n  return { snippets, samples };\n};\n\nconst ResourceSidebarSample: React.FC<ResourceSidebarSampleProps> = ({\n  sample,\n  loadSampleYaml,\n  downloadSampleYaml,\n}) => {\n  const { highlightText, title, img, description, id, yaml, targetResource } = sample;\n  const reference = referenceFor(targetResource);\n  return (\n    <li className=\"co-resource-sidebar-item\">\n      <h3 className=\"h4\">\n        <span className=\"text-uppercase\">{highlightText}</span> {title}\n      </h3>\n      {img && <img src={img} className=\"co-resource-sidebar-item__img img-responsive\" />}\n      <p>{description}</p>\n      <Button\n        type=\"button\"\n        variant=\"link\"\n        isInline\n        onClick={() => loadSampleYaml(id, yaml, reference)}\n      >\n        <PasteIcon className=\"co-icon-space-r\" />\n        Try it\n      </Button>\n      <Button\n        type=\"button\"\n        variant=\"link\"\n        isInline\n        className=\"pull-right\"\n        onClick={() => downloadSampleYaml(id, yaml, reference)}\n      >\n        <DownloadIcon className=\"co-icon-space-r\" />\n        Download YAML\n      </Button>\n    </li>\n  );\n};\n\nconst lineHeight = 18;\nconst PreviewYAML = ({ maxPreviewLines = 20, yaml }) => {\n  return (\n    <div style={{ paddingTop: 10 }}>\n      <MonacoEditor\n        height={Math.min(yaml.split('\\n').length, maxPreviewLines) * lineHeight}\n        language=\"yaml\"\n        value={yaml}\n        options={{\n          lineHeight,\n          readOnly: true,\n          folding: false,\n          minimap: { enabled: false },\n          scrollBeyondLastLine: false,\n        }}\n      />\n    </div>\n  );\n};\n\nconst ResourceSidebarSnippet: React.FC<any> = ({ snippet, insertSnippetYaml }) => {\n  const [yamlPreviewOpen, setYamlPreviewOpen] = React.useState(false);\n  const toggleYamlPreview = () => setYamlPreviewOpen(!yamlPreviewOpen);\n\n  const { highlightText, title, id, yaml, targetResource, description } = snippet;\n  const reference = referenceFor(targetResource);\n  return (\n    <li className=\"co-resource-sidebar-item\">\n      <h3 className=\"h4\">\n        <span className=\"text-uppercase\">{highlightText}</span> {title}\n      </h3>\n      <p>{description}</p>\n      <Button\n        type=\"button\"\n        variant=\"link\"\n        isInline\n        onClick={() => insertSnippetYaml(id, yaml, reference)}\n      >\n        <PasteIcon className=\"co-icon-space-r\" />\n        Insert Snippet\n      </Button>\n      <Button\n        type=\"button\"\n        className=\"pull-right\"\n        variant=\"link\"\n        isInline\n        onClick={() => toggleYamlPreview()}\n      >\n        {yamlPreviewOpen ? (\n          <>\n            Hide YAML\n            <ChevronDownIcon className=\"co-icon-space-l\" />\n          </>\n        ) : (\n            <>\n              Show YAML\n            <ChevronRightIcon className=\"co-icon-space-l\" />\n            </>\n          )}\n      </Button>\n      {yamlPreviewOpen && <PreviewYAML yaml={yaml} />}\n    </li>\n  );\n};\n\nexport const ResourceSidebarSnippets = ({ snippets, insertSnippetYaml }) => {\n  return (\n    <ul className=\"co-resource-sidebar-list\" style={{ listStyle: 'none', paddingLeft: 0 }}>\n      {_.map(snippets, (snippet) => (\n        <ResourceSidebarSnippet\n          key={snippet.id}\n          snippet={snippet}\n          insertSnippetYaml={insertSnippetYaml}\n        />\n      ))}\n    </ul>\n  );\n};\n\nexport const ResourceSidebarSamples: React.FC<ResourceSidebarSamplesProps> = ({\n  samples,\n  loadSampleYaml,\n  downloadSampleYaml,\n}) => {\n  return (\n    <ol className=\"co-resource-sidebar-list\">\n      {_.map(samples, (sample) => (\n        <ResourceSidebarSample\n          key={sample.id}\n          sample={sample}\n          loadSampleYaml={loadSampleYaml}\n          downloadSampleYaml={downloadSampleYaml}\n        />\n      ))}\n    </ol>\n  );\n};\n\ntype Sample = {\n  highlightText?: string;\n  title: string;\n  img?: string;\n  description: string;\n  id: string;\n  yaml?: string;\n  snippet?: boolean;\n  targetResource: {\n    apiVersion: string;\n    kind: string;\n  };\n};\n\ntype LoadSampleYaml = (id: string, yaml: string, kind: string) => void;\n\ntype DownloadSampleYaml = (id: string, yaml: string, kind: string) => void;\n\ntype ResourceSidebarSampleProps = {\n  sample: Sample;\n  loadSampleYaml: LoadSampleYaml;\n  downloadSampleYaml: DownloadSampleYaml;\n};\n\ntype ResourceSidebarSamplesProps = {\n  samples: Sample[];\n  loadSampleYaml: LoadSampleYaml;\n  downloadSampleYaml: DownloadSampleYaml;\n  yamlSamplesList: FirehoseResult;\n  kindObj: K8sKind;\n};\n","import * as _ from 'lodash-es';\nimport * as React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport * as classNames from 'classnames';\nimport { CloseIcon } from '@patternfly/react-icons';\n\nimport { ResourceSidebarSnippets, ResourceSidebarSamples } from './resource-sidebar-samples';\nimport { ExploreType } from './explore-type-sidebar';\nimport { SimpleTabNav, ResourceSummary } from '../utils';\n\nconst sidebarScrollTop = () => {\n  document.getElementsByClassName('co-p-has-sidebar__sidebar')[0].scrollTop = 0;\n};\n\nclass ResourceSidebarWrapper extends React.Component {\n  render() {\n    const { label, children, showSidebar, toggleSidebar, isFloat = false } = this.props;\n\n    if (!showSidebar) {\n      return null;\n    }\n\n    return (\n      <div className={classNames('co-p-has-sidebar__sidebar', 'co-p-has-sidebar__sidebar--bordered', 'hidden-sm hidden-xs', { sidebar__details: isFloat })}>\n        {/* tabIndex is necessary to restore keyboard scrolling as a result of PatternFly's <Page> having a hard-coded tabIndex.  See https://github.com/patternfly/patternfly-react/issues/4180 */}\n        <div className=\"co-m-pane__body co-p-has-sidebar__sidebar-body\" tabIndex={-1}>\n          <Button type=\"button\" className=\"co-p-has-sidebar__sidebar-close\" variant=\"plain\" aria-label=\"Close\" onClick={toggleSidebar}>\n            <CloseIcon />\n          </Button>\n          <h2 className=\"co-p-has-sidebar__sidebar-heading text-capitalize\">{label}</h2>\n          {children}\n        </div>\n      </div>\n    );\n  }\n}\n\nconst ResourceDetails = props => {\n  const { showName, showID, showPodSelector, showNodeSelector, showTolerations, showAnnotations, showOwner, resource } = props;\n  return <ResourceSummary resource={resource} showName={showName} showID={showID} showPodSelector={showPodSelector} showNodeSelector={showNodeSelector} showTolerations={showTolerations} showAnnotations={showAnnotations} showOwner={showOwner} />;\n};\n\nconst ResourceSchema = ({ kindObj }) => <ExploreType kindObj={kindObj} scrollTop={sidebarScrollTop} />;\n\nconst ResourceSamples = ({ samples, kindObj, downloadSampleYaml, loadSampleYaml }) => <ResourceSidebarSamples samples={samples} kindObj={kindObj} downloadSampleYaml={downloadSampleYaml} loadSampleYaml={loadSampleYaml} />;\n\nconst ResourceSnippets = ({ snippets, kindObj, insertSnippetYaml }) => <ResourceSidebarSnippets snippets={snippets} kindObj={kindObj} insertSnippetYaml={insertSnippetYaml} />;\n\nexport const ResourceSidebar = props => {\n  const { showName, showID, showPodSelector, title, isFloat, showNodeSelector, showTolerations, showAnnotations, showOwner, downloadSampleYaml, kindObj, loadSampleYaml, insertSnippetYaml, isCreateMode, showDetails, toggleSidebar, showSidebar, samples, snippets, resource, showSchema } = props;\n  if (!kindObj || !showSidebar) {\n    return null;\n  }\n\n  const { label } = kindObj;\n\n  const showSamples = !_.isEmpty(samples) && isCreateMode;\n  const showSnippets = !_.isEmpty(snippets);\n\n  let tabs = [];\n  if (showSamples) {\n    tabs.push({\n      name: 'Samples',\n      component: ResourceSamples,\n    });\n  }\n  if (showSnippets) {\n    tabs.push({\n      name: 'Snippets',\n      component: ResourceSnippets,\n    });\n  }\n  if (showSchema) {\n    tabs = [\n      {\n        name: 'Schema',\n        component: ResourceSchema,\n      },\n      ...tabs,\n    ];\n  }\n  if (showDetails) {\n    tabs = [{ name: 'Details', component: ResourceDetails }];\n  }\n\n  return (\n    <ResourceSidebarWrapper label={title || label} showSidebar={showSidebar} isFloat={isFloat} toggleSidebar={toggleSidebar}>\n      {tabs.length > 0 ? <SimpleTabNav tabs={tabs} tabProps={{ showName, showID, showPodSelector, showNodeSelector, showTolerations, showAnnotations, showOwner, downloadSampleYaml, kindObj, loadSampleYaml, insertSnippetYaml, samples, snippets, resource }} additionalClassNames=\"co-m-horizontal-nav__menu--within-sidebar\" /> : <ResourceSchema kindObj={kindObj} />}\n    </ResourceSidebarWrapper>\n  );\n};\n","module.exports = __webpack_public_path__ + \"assets/1-deny-other-namespaces.svg\";","module.exports = __webpack_public_path__ + \"assets/2-limit-certain-apps.svg\";","module.exports = __webpack_public_path__ + \"assets/3-allow-ingress.svg\";","module.exports = __webpack_public_path__ + \"assets/4-default-deny-all.svg\";","module.exports = __webpack_public_path__ + \"assets/5-web-allow-external.svg\";","module.exports = __webpack_public_path__ + \"assets/6-web-db-allow-all-ns.svg\";","module.exports = __webpack_public_path__ + \"assets/7-web-allow-production.svg\";"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AASA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;;;;;;;;;;;;;ACrBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AAGA;AACA;AAgBA;AAGA;AAEA;AAGA;AAKA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AAGA;AAEA;AAGA;AAYA;AAKA;;;;;;;;;;;;;AC5JA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAOA;AAQA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AACA;;AAAA;AAEA;AACA;AACA;AAMA;AAEA;AACA;AAOA;AAEA;AAGA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AAAA;AAEA;AACA;AAMA;AAEA;AACA;;AAUA;;AAKA;AAIA;AAGA;AAEA;AACA;AAWA;AAEA;AAKA;AAYA;;;;;;;;;;;;;AC1YA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;;;;;;;;;;;;AC1FA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}