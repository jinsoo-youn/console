{"version":3,"file":"dev-console-healthCheck-b111ae72aa6ced293f15.js","sources":["webpack:///./packages/dev-console/src/components/health-checks/AddHealthChecks.scss?6b36","webpack:///./packages/dev-console/src/components/health-checks/AddHealthChecks.tsx","webpack:///./packages/dev-console/src/components/health-checks/AddHealthChecksForm.tsx","webpack:///./packages/dev-console/src/components/health-checks/HealthChecksPage.tsx","webpack:///./packages/dev-console/src/components/health-checks/create-health-checks-probe-utils.ts","webpack:///./packages/dev-console/src/components/health-checks/health-checks-probe-utils.ts","webpack:///./packages/dev-console/src/components/health-checks/health-checks-types.ts","webpack:///./packages/dev-console/src/components/health-checks/health-checks-utils.ts","webpack:///./packages/dev-console/src/utils/imagestream-utils.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as _ from 'lodash';\nimport Helmet from 'react-helmet';\nimport { FormikProps, FormikValues } from 'formik';\nimport { Form, Button } from '@patternfly/react-core';\nimport { ExternalLinkAltIcon } from '@patternfly/react-icons';\nimport {\n  ContainerDropdown,\n  history,\n  PageHeading,\n  ResourceLink,\n  ResourceIcon,\n  openshiftHelpBase,\n} from '@console/internal/components/utils';\nimport { ContainerModel } from '@console/internal/models';\nimport { K8sResourceKind, referenceFor, modelFor } from '@console/internal/module/k8s';\nimport { FormFooter } from '@console/shared';\nimport { getResourcesType } from '../edit-application/edit-application-utils';\nimport HealthChecks from './HealthChecks';\nimport { getHealthChecksData } from './create-health-checks-probe-utils';\nimport './AddHealthChecks.scss';\n\ntype AddHealthChecksProps = {\n  resource?: K8sResourceKind;\n  currentContainer: string;\n};\n\nconst AddHealthChecks: React.FC<FormikProps<FormikValues> & AddHealthChecksProps> = ({\n  resource,\n  currentContainer,\n  handleSubmit,\n  handleReset,\n  errors,\n  status,\n  isSubmitting,\n  setFieldValue,\n  values,\n  dirty,\n}) => {\n  const [currentKey, setCurrentKey] = React.useState(currentContainer);\n  const containers = resource?.spec?.template?.spec?.containers;\n  const healthCheckAdded = _.every(\n    containers,\n    (container) => container.readinessProbe || container.livenessProbe || container.startupProbe,\n  );\n  const containersByKey = _.keyBy(containers, 'name');\n  const pageTitle = healthCheckAdded ? 'Edit Health Checks' : 'Add Health Checks';\n  const {\n    kind,\n    metadata: { name, namespace },\n  } = resource;\n  const kindForCRDResource = referenceFor(resource);\n  const resourceKind = modelFor(kindForCRDResource).crd ? kindForCRDResource : kind;\n  const isFormClean = _.every(values.healthChecks, { modified: false });\n\n  const handleSelectContainer = (containerName: string) => {\n    const containerIndex = _.findIndex(resource.spec.template.spec.containers, [\n      'name',\n      containerName,\n    ]);\n    setCurrentKey(containerName);\n    setFieldValue('containerName', containerName);\n    setFieldValue('healthChecks', getHealthChecksData(resource, containerIndex));\n    history.replace(\n      `/k8s/ns/${namespace}/${resourceKind}/${name}/containers/${containerName}/health-checks`,\n    );\n  };\n\n  return (\n    <>\n      <Helmet>\n        <title>{pageTitle}</title>\n      </Helmet>\n      <PageHeading\n        title={\n          <>\n            {pageTitle}\n            <Button\n              variant=\"link\"\n              component=\"a\"\n              href={`${openshiftHelpBase}applications/application-health.html`}\n              target=\"_blank\"\n            >\n              Learn More <ExternalLinkAltIcon />\n            </Button>\n          </>\n        }\n      />\n      <div className=\"odc-add-health-checks__body\">\n        <p>\n          Health checks for &nbsp;\n          <ResourceLink\n            kind={referenceFor(resource)}\n            name={name}\n            namespace={namespace}\n            title={name}\n            inline\n          />\n        </p>\n        <Form onSubmit={handleSubmit}>\n          <div>\n            Container &nbsp;\n            {_.size(containers) > 1 ? (\n              <ContainerDropdown\n                currentKey={currentKey}\n                containers={containersByKey}\n                onChange={handleSelectContainer}\n              />\n            ) : (\n              <>\n                <ResourceIcon kind={ContainerModel.kind} />\n                {containers[0].name}\n              </>\n            )}\n          </div>\n          <HealthChecks resourceType={getResourcesType(resource)} />\n          <FormFooter\n            handleReset={handleReset}\n            errorMessage={status && status?.errors?.json?.message}\n            isSubmitting={isSubmitting}\n            submitLabel={healthCheckAdded ? 'Save' : 'Add'}\n            disableSubmit={isFormClean || !dirty || !_.isEmpty(errors)}\n            resetLabel=\"Cancel\"\n          />\n        </Form>\n      </div>\n    </>\n  );\n};\n\nexport default AddHealthChecks;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport * as yup from 'yup';\nimport { Formik } from 'formik';\nimport { FirehoseResult, LoadingBox, StatusBox, history } from '@console/internal/components/utils';\nimport { K8sResourceKind, k8sUpdate, modelFor, referenceFor } from '@console/internal/module/k8s';\nimport { getResourcesType } from '../edit-application/edit-application-utils';\nimport { healthChecksProbesValidationSchema } from './health-checks-probe-validation-utils';\nimport { getHealthChecksData } from './create-health-checks-probe-utils';\nimport AddHealthChecks from './AddHealthChecks';\nimport { updateHealthChecksProbe } from './health-checks-utils';\n\ntype AddHealthChecksFormProps = {\n  resource?: FirehoseResult<K8sResourceKind>;\n  currentContainer: string;\n};\n\nconst AddHealthChecksForm: React.FC<AddHealthChecksFormProps> = ({\n  resource,\n  currentContainer,\n}) => {\n  if (!resource.loaded && _.isEmpty(resource.loadError)) {\n    return <LoadingBox />;\n  }\n\n  if (resource.loadError) {\n    return <StatusBox loaded={resource.loaded} loadError={resource.loadError} />;\n  }\n\n  const container = _.find(\n    resource.data.spec.template.spec.containers,\n    (data) => data.name === currentContainer,\n  );\n\n  if (_.isEmpty(container)) {\n    return <div className=\"text-center\">Container not found</div>;\n  }\n\n  const handleSubmit = (values, actions) => {\n    const updatedResource = updateHealthChecksProbe(values, resource.data, container);\n\n    k8sUpdate(modelFor(referenceFor(resource.data)), updatedResource)\n      .then(() => {\n        actions.setSubmitting(false);\n        actions.setStatus({ error: '' });\n        history.goBack();\n      })\n      .catch((err) => {\n        actions.setSubmitting(false);\n        actions.setStatus({ errors: err });\n      });\n  };\n  const containerIndex = _.findIndex(resource.data.spec.template.spec.containers, [\n    'name',\n    currentContainer,\n  ]);\n  const initialValues = {\n    healthChecks: getHealthChecksData(resource.data, containerIndex),\n    containerName: container.name,\n    resources: getResourcesType(resource.data),\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={yup.object().shape({\n        healthChecks: healthChecksProbesValidationSchema,\n      })}\n      onSubmit={handleSubmit}\n      onReset={history.goBack}\n    >\n      {(props) => (\n        <AddHealthChecks resource={resource.data} currentContainer={currentContainer} {...props} />\n      )}\n    </Formik>\n  );\n};\n\nexport default AddHealthChecksForm;\n","import * as React from 'react';\nimport { RouteComponentProps } from 'react-router-dom';\nimport { FirehoseResource, Firehose } from '@console/internal/components/utils';\nimport AddHealthChecksForm from './AddHealthChecksForm';\n\ntype HealthChecksProps = RouteComponentProps<{\n  ns: string;\n  kind: string;\n  name: string;\n  containerName: string;\n}>;\n\nconst HealthChecksPage: React.FC<HealthChecksProps> = ({ match }) => {\n  const { ns, kind, name, containerName } = match.params;\n  const resource: FirehoseResource[] = [\n    {\n      kind,\n      namespace: ns,\n      isList: false,\n      name,\n      prop: 'resource',\n    },\n  ];\n\n  return (\n    <Firehose resources={resource}>\n      <AddHealthChecksForm currentContainer={containerName} />\n    </Firehose>\n  );\n};\n\nexport default HealthChecksPage;\n","import * as _ from 'lodash';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { HealthCheckProbeData, RequestType, HealthChecksProbeType } from './health-checks-types';\nimport { Resources, HealthChecksData } from '../import/import-types';\nimport { healthChecksDefaultValues } from './health-checks-probe-utils';\n\nexport const constructProbeData = (data: HealthCheckProbeData, resourceType?: Resources) => {\n  const probeData = {\n    ...(data.failureThreshold && { failureThreshold: data.failureThreshold }),\n    ...(data.successThreshold && { successThreshold: data.successThreshold }),\n    ...(data.requestType === RequestType.ContainerCommand && {\n      exec: data.exec,\n    }),\n    ...(data.requestType === RequestType.HTTPGET && {\n      httpGet: {\n        ...data[data.requestType],\n        ...(data[data.requestType]?.scheme?.[0] === 'HTTPS' && {\n          scheme: data[data.requestType].scheme[0],\n        }),\n        port: resourceType === Resources.KnativeService ? 0 : _.toInteger(data.httpGet.port),\n      },\n    }),\n    ...(data.requestType === RequestType.TCPSocket && {\n      tcpSocket: {\n        port: resourceType === Resources.KnativeService ? 0 : _.toInteger(data.tcpSocket.port),\n      },\n    }),\n    ...(data.initialDelaySeconds && {\n      initialDelaySeconds: data.initialDelaySeconds,\n    }),\n    ...(data.periodSeconds && { periodSeconds: data.periodSeconds }),\n    ...(data.timeoutSeconds && { timeoutSeconds: data.timeoutSeconds }),\n  };\n  return probeData;\n};\n\nexport const getRequestType = (data: HealthCheckProbeData) => {\n  if (_.has(data, RequestType.HTTPGET)) return RequestType.HTTPGET;\n  if (_.has(data, RequestType.TCPSocket)) return RequestType.TCPSocket;\n  if (_.has(data, 'exec.command')) return RequestType.ContainerCommand;\n  return '';\n};\n\nexport const getHealthChecksData = (\n  resource: K8sResourceKind,\n  containerIndex: number = 0,\n): HealthChecksData => {\n  const containers = resource?.spec?.template?.spec?.containers ?? [];\n  const readinessProbe = containers?.[containerIndex]?.[HealthChecksProbeType.ReadinessProbe] ?? {};\n  const livenessProbe = containers?.[containerIndex]?.[HealthChecksProbeType.LivenessProbe] ?? {};\n  const startupProbe = containers?.[containerIndex]?.[HealthChecksProbeType.StartupProbe] ?? {};\n  const healthChecks = {\n    readinessProbe: {\n      showForm: false,\n      modified: false,\n      enabled: !_.isEmpty(readinessProbe),\n      data: !_.isEmpty(readinessProbe)\n        ? {\n            ...readinessProbe,\n            requestType: getRequestType(readinessProbe),\n            ...(readinessProbe.httpGet?.scheme === 'HTTPS' && {\n              httpGet: { ...readinessProbe.httpGet, scheme: ['HTTPS'] },\n            }),\n          }\n        : healthChecksDefaultValues.data,\n    },\n    livenessProbe: {\n      showForm: false,\n      modified: false,\n      enabled: !_.isEmpty(livenessProbe),\n      data: !_.isEmpty(livenessProbe)\n        ? {\n            ...livenessProbe,\n            requestType: getRequestType(livenessProbe),\n            ...(livenessProbe.httpGet?.scheme === 'HTTPS' && {\n              httpGet: { ...livenessProbe.httpGet, scheme: ['HTTPS'] },\n            }),\n          }\n        : healthChecksDefaultValues.data,\n    },\n    startupProbe: {\n      showForm: false,\n      modified: false,\n      enabled: !_.isEmpty(startupProbe),\n      data: !_.isEmpty(startupProbe)\n        ? {\n            ...startupProbe,\n            requestType: getRequestType(startupProbe),\n            ...(startupProbe.httpGet?.scheme === 'HTTPS' && {\n              httpGet: { ...startupProbe.httpGet, scheme: ['HTTPS'] },\n            }),\n          }\n        : healthChecksDefaultValues.data,\n    },\n  };\n  return healthChecks;\n};\n\nexport const getProbesData = (healthChecks: HealthChecksData, resourceType?: Resources) => {\n  const { readinessProbe, livenessProbe, startupProbe } = healthChecks;\n  return {\n    ...(readinessProbe.enabled\n      ? { readinessProbe: constructProbeData(readinessProbe.data, resourceType) }\n      : {}),\n    ...(livenessProbe.enabled\n      ? { livenessProbe: constructProbeData(livenessProbe.data, resourceType) }\n      : {}),\n    ...(resourceType !== Resources.KnativeService && startupProbe?.enabled\n      ? { startupProbe: constructProbeData(startupProbe.data) }\n      : {}),\n  };\n};\n","import { HealthChecksProbeType, RequestType, HealthCheckProbe } from './health-checks-types';\n\nexport const getHealthChecksProbeConfig = (probe: string) => {\n  switch (probe) {\n    case HealthChecksProbeType.ReadinessProbe: {\n      return {\n        formTitle: 'Readiness Probe',\n        formSubtitle:\n          \"A Readiness probe checks if the container is ready to handle requests. A failed readiness probe means that a container should not receive any traffic from a proxy, even if it's running.\",\n      };\n    }\n    case HealthChecksProbeType.LivenessProbe: {\n      return {\n        formTitle: 'Liveness Probe',\n        formSubtitle:\n          'A Liveness probe checks if the container is still running. If the liveness probe fails the container is killed.',\n      };\n    }\n    case HealthChecksProbeType.StartupProbe: {\n      return {\n        formTitle: 'Startup Probe',\n        formSubtitle:\n          'A Startup probe checks if the application within the container is started. If the startup probe fails the container is killed.',\n      };\n    }\n    default:\n      return undefined;\n  }\n};\n\nexport const healthChecksDefaultValues: HealthCheckProbe = {\n  showForm: false,\n  enabled: false,\n  modified: false,\n  data: {\n    failureThreshold: 3,\n    requestType: RequestType.HTTPGET,\n    httpGet: {\n      scheme: 'HTTP',\n      path: '/',\n      port: 8080,\n      httpHeaders: [],\n    },\n    tcpSocket: {\n      port: 8080,\n    },\n    exec: { command: [''] },\n    initialDelaySeconds: 0,\n    periodSeconds: 10,\n    timeoutSeconds: 1,\n    successThreshold: 1,\n  },\n};\n\nexport const healthChecksProbeInitialData = {\n  readinessProbe: healthChecksDefaultValues,\n  livenessProbe: healthChecksDefaultValues,\n  startupProbe: healthChecksDefaultValues,\n};\n","import { NameValuePair } from '@console/shared';\n\nexport enum HealthChecksProbeType {\n  ReadinessProbe = 'readinessProbe',\n  LivenessProbe = 'livenessProbe',\n  StartupProbe = 'startupProbe',\n}\n\nexport enum RequestType {\n  HTTPGET = 'httpGet',\n  ContainerCommand = 'command',\n  TCPSocket = 'tcpSocket',\n}\n\nexport interface HealthCheckProbeData {\n  failureThreshold: number;\n  requestType?: string;\n  httpGet?: {\n    scheme: string;\n    path: string;\n    port: number;\n    httpHeaders: NameValuePair[];\n  };\n  tcpSocket?: {\n    port: number;\n  };\n  exec?: { command?: string[] };\n  initialDelaySeconds: number;\n  periodSeconds: number;\n  timeoutSeconds: number;\n  successThreshold: number;\n}\n\nexport interface HealthCheckProbe {\n  showForm?: boolean;\n  enabled?: boolean;\n  modified?: boolean;\n  data: HealthCheckProbeData;\n}\n","import { K8sResourceKind, ContainerSpec } from '@console/internal/module/k8s';\nimport * as _ from 'lodash';\nimport { getProbesData } from './create-health-checks-probe-utils';\nimport { getResourcesType } from '../edit-application/edit-application-utils';\nimport { HealthChecksProbeType } from './health-checks-types';\n\nexport const updateHealthChecksProbe = (\n  values,\n  resource: K8sResourceKind,\n  container: ContainerSpec,\n): K8sResourceKind => {\n  const {\n    healthChecks: { readinessProbe, livenessProbe, startupProbe },\n    containerName,\n    healthChecks,\n  } = values;\n  const updatedResource = _.cloneDeep(resource);\n  const containerIndex = _.findIndex(updatedResource.spec.template.spec.containers, [\n    'name',\n    containerName,\n  ]);\n  updatedResource.spec.template.spec.containers[containerIndex] = {\n    ...container,\n    ...getProbesData(healthChecks, getResourcesType(resource)),\n  };\n\n  if (!readinessProbe.enabled) {\n    updatedResource.spec.template.spec.containers[containerIndex] = _.omit(\n      updatedResource.spec.template.spec.containers[containerIndex],\n      `${HealthChecksProbeType.ReadinessProbe}`,\n    );\n  }\n\n  if (!livenessProbe.enabled) {\n    updatedResource.spec.template.spec.containers[containerIndex] = _.omit(\n      updatedResource.spec.template.spec.containers[containerIndex],\n      `${HealthChecksProbeType.LivenessProbe}`,\n    );\n  }\n\n  if (!startupProbe.enabled) {\n    updatedResource.spec.template.spec.containers[containerIndex] = _.omit(\n      updatedResource.spec.template.spec.containers[containerIndex],\n      `${HealthChecksProbeType.StartupProbe}`,\n    );\n  }\n\n  return updatedResource;\n};\n","import * as _ from 'lodash';\nimport * as semver from 'semver';\nimport { ContainerPort, K8sResourceKind } from '@console/internal/module/k8s';\nimport {\n  isBuilder,\n  getMostRecentBuilderTag,\n  getBuilderTagsSortedByVersion,\n} from '@console/internal/components/image-stream';\nimport {\n  getImageStreamIcon,\n  getImageForIconClass,\n} from '@console/internal/components/catalog/catalog-item-icon';\nimport { ProjectModel, ImageStreamModel } from '@console/internal/models';\nimport { FirehoseResource } from '@console/internal/components/utils';\n\nexport interface ImageTag {\n  name: string;\n  annotations: {\n    [key: string]: string;\n  };\n  generation: number;\n  [key: string]: any;\n}\nexport interface BuilderImage {\n  obj: K8sResourceKind;\n  name: string;\n  displayName: string;\n  title: string;\n  iconUrl: string;\n  tags: ImageTag[];\n  recentTag: ImageTag;\n  imageStreamNamespace: string;\n}\n\nexport interface NormalizedBuilderImages {\n  [builderImageName: string]: BuilderImage;\n}\n\nexport const imageStreamLabels = ['app.kubernetes.io/name', 'app.openshift.io/runtime'];\n\nexport const getRuntime = (labels: { [key: string]: string }) =>\n  labels?.['app.openshift.io/runtime'] || labels?.['app.kubernetes.io/name'];\n\nexport const getSampleRepo = (tag) => _.get(tag, 'annotations.sampleRepo', '');\nexport const getSampleRef = (tag) => _.get(tag, 'annotations.sampleRef', '');\nexport const getSampleContextDir = (tag) => _.get(tag, 'annotations.sampleContextDir', '');\n\n// Transform image ports to k8s structure.\n// `{ '3306/tcp': {} }` -> `{ containerPort: 3306, protocol: 'TCP' }`\nconst portsFromSpec = (portSpec: object): ContainerPort[] => {\n  return _.reduce(\n    portSpec,\n    (result: ContainerPort[], value, key) => {\n      const parts = key.split('/');\n      if (parts.length === 1) {\n        parts.push('tcp');\n      }\n\n      const containerPort = parseInt(parts[0], 10);\n      if (_.isFinite(containerPort)) {\n        result.push({\n          containerPort,\n          protocol: parts[1].toUpperCase(),\n        });\n      } else {\n        // eslint-disable-next-line no-console\n        console.warn('Unrecognized image port format', key);\n      }\n\n      return result;\n    },\n    [],\n  );\n};\n\nexport const getPorts = (imageStreamImage: object): ContainerPort[] => {\n  const portSpec =\n    _.get(imageStreamImage, 'image.dockerImageMetadata.Config.ExposedPorts') ||\n    _.get(imageStreamImage, 'image.dockerImageMetadata.ContainerConfig.ExposedPorts');\n  return portsFromSpec(portSpec);\n};\n\n// Use the same naming convention as the CLI.\nexport const makePortName = (port: ContainerPort): string =>\n  `${port.containerPort}-${port.protocol}`.toLowerCase();\n\nexport const prettifyName = (name: string) => {\n  return name.replace(/(-|^)([^-]?)/g, (first, prep, letter) => {\n    return (prep && ' ') + letter.toUpperCase();\n  });\n};\n\nexport const normalizeBuilderImages = (\n  imageStreams: K8sResourceKind[],\n): NormalizedBuilderImages => {\n  const data = Array.isArray(imageStreams) ? imageStreams : [imageStreams];\n  const builderImageStreams = data.filter((imageStream) => isBuilder(imageStream));\n\n  return builderImageStreams.reduce((builderImages: NormalizedBuilderImages, imageStream) => {\n    const tags = getBuilderTagsSortedByVersion(imageStream);\n    const recentTag = getMostRecentBuilderTag(imageStream);\n    const { name } = imageStream.metadata;\n    const displayName = _.get(imageStream, [\n      'metadata',\n      'annotations',\n      'openshift.io/display-name',\n    ]);\n    const imageStreamNamespace = imageStream.metadata.namespace;\n    const title = displayName && displayName.length < 14 ? displayName : prettifyName(name);\n    const iconClass = getImageStreamIcon(recentTag);\n    const iconUrl = getImageForIconClass(iconClass);\n\n    builderImages[name] = {\n      obj: imageStream,\n      name,\n      displayName,\n      title,\n      iconUrl,\n      tags,\n      recentTag,\n      imageStreamNamespace,\n    };\n    return builderImages;\n  }, {});\n};\n\nexport const getTagDataWithDisplayName = (\n  imageTags: ImageTag[],\n  selectedTag: string,\n  defaultName: string,\n): [ImageTag, string] => {\n  const imageTag = _.find(imageTags, { name: selectedTag });\n  const displayName = _.get(imageTag, ['annotations', 'openshift.io/display-name'], defaultName);\n\n  return [imageTag, displayName];\n};\n\nexport const getSuggestedName = (name: string): string | undefined => {\n  if (!name) {\n    return undefined;\n  }\n  const imageName: string = _.last(name.split('/'));\n  return _.first(imageName.split(/[^a-z0-9-]/));\n};\n\nexport enum RegistryType {\n  External = 'external',\n  Internal = 'internal',\n}\nexport enum BuilderImagesNamespace {\n  Openshift = 'openshift',\n}\nexport const imageRegistryType = {\n  External: {\n    value: RegistryType.External,\n    label: 'Image name from external registry',\n  },\n  Internal: {\n    value: RegistryType.Internal,\n    label: 'Image stream tag from internal registry',\n  },\n};\n\nexport const getSortedTags = (imageStream: K8sResourceKind) => {\n  return _.isArray(imageStream.status.tags) && imageStream.status.tags.length\n    ? imageStream.status.tags.sort(({ tag: a }, { tag: b }) => {\n        const v1 = semver.coerce(a);\n        const v2 = semver.coerce(b);\n        if (!v1 && !v2) {\n          return a.localeCompare(b);\n        }\n        if (!v1) {\n          return 1;\n        }\n        if (!v2) {\n          return -1;\n        }\n        return semver.rcompare(v1, v2);\n      })\n    : [];\n};\nexport const getImageStreamTags = (imageStream: K8sResourceKind) => {\n  const sortedTags = imageStream && !_.isEmpty(imageStream) ? getSortedTags(imageStream) : [];\n  return sortedTags.reduce((tags, { tag }) => {\n    tags[tag] = tag;\n    return tags;\n  }, {});\n};\n\nexport const getProjectResource = (): FirehoseResource[] => {\n  return [\n    {\n      isList: true,\n      kind: ProjectModel.kind,\n      prop: ProjectModel.id,\n    },\n  ];\n};\n\nexport const getImageStreamResource = (namespace: string): FirehoseResource[] => {\n  const resource = [];\n  if (namespace) {\n    resource.push({\n      isList: true,\n      kind: ImageStreamModel.kind,\n      prop: ImageStreamModel.id,\n      namespace,\n    });\n  }\n  return resource;\n};\n"],"mappings":";;;;;;;;;AAAA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;;AAYA;AACA;AACA;AAIA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAEA;AAEA;AACA;AAEA;AAGA;AACA;;AAMA;AAKA;AACA;;AAEA;AAQA;AACA;;AAEA;AAQA;AACA;AAIA;AACA;AAYA;AAEA;;;;;;;;;;;;;AClIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AACA;AASA;AAEA;;;;;;;;;;;;;AC9EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAGA;AAEA;;;;;;;;;;;;;AC/BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;;AACA;AAIA;AACA;AAEA;AAGA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AACA;AAEA;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;;;;;;;;;;;;;AC/GA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACxDA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACXA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAKA;AAKA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AAIA;AAEA;AACA;AAIA;AAEA;AACA;AAIA;AAEA;AACA;;;;;;;;;;;;;AChDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAKA;AAIA;AA0BA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;A","sourceRoot":""}