{"version":3,"file":"PipelineBuilderPage~pipeline~pipeline-builder-edit-page~pipeline-builder-page~pipeline-details~pipel~ba3549d0-709492bd94e3b0fc01cf.js","sources":["webpack:///./packages/dev-console/src/components/pipelineruns/list-page/PipelineRunHeader.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/list-page/PipelineRunList.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/list-page/PipelineRunRow.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/list-page/pipelinerun-table.ts","webpack:///./packages/dev-console/src/components/pipelineruns/status/LinkedPipelineRunTaskStatus.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/status/PipelineBars.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/status/PipelineTaskStatus.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/status/TaskStatusTooltip.scss?a429","webpack:///./packages/dev-console/src/components/pipelineruns/status/TaskStatusTooltip.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/triggered-by/ResourceKebabWithUserLabel.tsx","webpack:///./packages/dev-console/src/components/pipelineruns/triggered-by/hooks.ts","webpack:///./packages/dev-console/src/components/pipelineruns/triggered-by/index.ts","webpack:///./packages/dev-console/src/components/pipelines/detail-page-tabs/PipelineRuns.tsx"],"sourcesContent":["import { sortable } from '@patternfly/react-table';\nimport { tableColumnClasses } from './pipelinerun-table';\n\nconst PipelineRunHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Status',\n      sortField: 'status.conditions[0].reason',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Task Status',\n      sortField: 'status.conditions[0].reason',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: 'Started',\n      sortField: 'status.startTime',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: 'Duration',\n      sortField: 'status.completionTime',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[5] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[6] },\n    },\n  ];\n};\n\nexport default PipelineRunHeader;\n","import * as React from 'react';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { Table } from '@console/internal/components/factory';\nimport { PipelineRunModel } from '../../../models';\nimport PipelineRunHeader from './PipelineRunHeader';\nimport PipelineRunRow from './PipelineRunRow';\n\nexport const PipelineRunList: React.FC = (props) => (\n  <Table\n    {...props}\n    aria-label={PipelineRunModel.labelPlural}\n    defaultSortField=\"status.startTime\"\n    defaultSortOrder={SortByDirection.desc}\n    Header={PipelineRunHeader}\n    Row={PipelineRunRow}\n    virtualize\n  />\n);\n\nexport default PipelineRunList;\n","import * as React from 'react';\nimport { Status } from '@console/shared';\nimport { TableRow, TableData, RowFunction } from '@console/internal/components/factory';\nimport { ResourceLink, Timestamp } from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { pipelineRunFilterReducer } from '../../../utils/pipeline-filter-reducer';\nimport { getPipelineRunKebabActions } from '../../../utils/pipeline-actions';\nimport { pipelineRunDuration } from '../../../utils/pipeline-utils';\nimport { PipelineRun } from '../../../utils/pipeline-augment';\nimport { PipelineRunModel } from '../../../models';\nimport LinkedPipelineRunTaskStatus from '../status/LinkedPipelineRunTaskStatus';\nimport { ResourceKebabWithUserLabel } from '../triggered-by';\nimport { tableColumnClasses } from './pipelinerun-table';\n\nconst pipelinerunReference = referenceForModel(PipelineRunModel);\n\nconst PipelineRunRow: RowFunction<PipelineRun> = ({ obj, index, key, style }) => {\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={pipelinerunReference}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n          title={obj.metadata.name}\n          data-test-id={obj.metadata.name}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[1]}>\n        <ResourceLink kind=\"Namespace\" name={obj.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <Status status={pipelineRunFilterReducer(obj)} />\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        <LinkedPipelineRunTaskStatus pipelineRun={obj} />\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        <Timestamp timestamp={obj.status && obj.status.startTime} />\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>{pipelineRunDuration(obj)}</TableData>\n      <TableData className={tableColumnClasses[6]}>\n        <ResourceKebabWithUserLabel\n          actions={getPipelineRunKebabActions()}\n          kind={pipelinerunReference}\n          resource={obj}\n        />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport default PipelineRunRow;\n","import { Kebab } from '@console/internal/components/utils';\n\nexport const tableColumnClasses = [\n  '', // name\n  '', // namespace\n  'pf-m-hidden pf-m-visible-on-sm', // status\n  'pf-m-hidden pf-m-visible-on-lg', // task status\n  'pf-m-hidden pf-m-visible-on-lg', // started\n  'pf-m-hidden pf-m-visible-on-xl', // duration\n  Kebab.columnClass,\n];\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport { resourcePathFromModel } from '@console/internal/components/utils';\nimport { Pipeline, PipelineRun } from '../../../utils/pipeline-augment';\nimport { PipelineRunModel } from '../../../models';\nimport { PipelineTaskStatus } from './PipelineTaskStatus';\n\nexport interface LinkedPipelineRunTaskStatusProps {\n  pipeline?: Pipeline;\n  pipelineRun: PipelineRun;\n}\n\n/**\n * Will attempt to render a link to the log file associated with the pipelineRun if it has the data.\n * If it does not, it'll just render the pipeline status.\n */\nconst LinkedPipelineRunTaskStatus: React.FC<LinkedPipelineRunTaskStatusProps> = ({\n  pipeline,\n  pipelineRun,\n}) => {\n  const pipelineStatus = (\n    <PipelineTaskStatus\n      key={pipelineRun.metadata?.name}\n      pipeline={pipeline}\n      pipelinerun={pipelineRun}\n    />\n  );\n\n  if (pipelineRun.metadata?.name && pipelineRun.metadata?.namespace) {\n    return (\n      <Link\n        to={`${resourcePathFromModel(\n          PipelineRunModel,\n          pipelineRun.metadata.name,\n          pipelineRun.metadata.namespace,\n        )}/logs`}\n      >\n        {pipelineStatus}\n      </Link>\n    );\n  }\n\n  return pipelineStatus;\n};\n\nexport default LinkedPipelineRunTaskStatus;\n","import * as React from 'react';\nimport { Tooltip } from '@patternfly/react-core';\nimport HorizontalStackedBars from '../../charts/HorizontalStackedBars';\nimport {\n  getTaskStatus,\n  runStatus,\n  getRunStatusColor,\n  Pipeline,\n  PipelineRun,\n} from '../../../utils/pipeline-augment';\nimport TaskStatusToolTip from './TaskStatusTooltip';\n\nexport interface PipelineBarProps {\n  pipelinerun: PipelineRun;\n  pipeline?: { data: Pipeline };\n}\n\nexport const PipelineBars: React.FC<PipelineBarProps> = ({ pipelinerun, pipeline }) => {\n  const taskStatus = getTaskStatus(pipelinerun, pipeline?.data);\n\n  return (\n    <Tooltip content={<TaskStatusToolTip taskStatus={taskStatus} />}>\n      <HorizontalStackedBars\n        height=\"1em\"\n        inline\n        values={Object.keys(runStatus).map((status) => ({\n          color: getRunStatusColor(runStatus[status]).pftoken.value,\n          name: status,\n          size: taskStatus[runStatus[status]],\n        }))}\n      />\n    </Tooltip>\n  );\n};\n","import * as React from 'react';\nimport { Firehose } from '@console/internal/components/utils';\nimport { PipelineRun, Pipeline } from '../../../utils/pipeline-augment';\nimport { PipelineModel } from '../../../models';\nimport { PipelineBars } from './PipelineBars';\n\nexport interface PipelineTaskStatusProps {\n  pipelinerun: PipelineRun;\n  pipeline?: Pipeline;\n}\n\nexport const PipelineTaskStatus: React.FC<PipelineTaskStatusProps> = ({\n  pipelinerun,\n  pipeline,\n}) => {\n  return !pipeline && pipelinerun.spec?.pipelineRef?.name && pipelinerun.metadata?.namespace ? (\n    <Firehose\n      resources={[\n        {\n          name: pipelinerun.spec.pipelineRef.name,\n          namespace: pipelinerun.metadata.namespace,\n          kind: PipelineModel.kind,\n          isList: false,\n          prop: 'pipeline',\n        },\n      ]}\n    >\n      <PipelineBars pipelinerun={pipelinerun} />\n    </Firehose>\n  ) : (\n    <PipelineBars pipelinerun={pipelinerun} pipeline={{ data: pipeline }} />\n  );\n};\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { TaskStatus, runStatus, getRunStatusColor } from '../../../utils/pipeline-augment';\nimport './TaskStatusTooltip.scss';\n\ninterface TaskStatusToolTipProps {\n  taskStatus: TaskStatus;\n}\n\nconst TaskStatusToolTip: React.FC<TaskStatusToolTipProps> = ({ taskStatus }) => {\n  return (\n    <div className=\"odc-task-status-tooltip\">\n      {Object.keys(runStatus).map((status) => {\n        const { message, pftoken } = getRunStatusColor(status);\n        return taskStatus[status] ? (\n          <React.Fragment key={status}>\n            <div\n              className=\"odc-task-status-tooltip__legend\"\n              style={{ background: pftoken.value }}\n            />\n            <div>\n              {status === runStatus.PipelineNotStarted || status === runStatus.FailedToStart\n                ? message\n                : `${taskStatus[status]} ${message}`}\n            </div>\n          </React.Fragment>\n        ) : null;\n      })}\n    </div>\n  );\n};\n\nexport default TaskStatusToolTip;\n","import * as React from 'react';\nimport { KebabAction, ResourceKebab } from '@console/internal/components/utils';\nimport { useMenuActionsWithUserLabel } from './hooks';\n\nconst ResourceKebabWithUserLabel: React.FC<React.ComponentProps<typeof ResourceKebab>> = ({\n  actions,\n  ...otherProps\n}) => {\n  const augmentedMenuActions: KebabAction[] = useMenuActionsWithUserLabel(actions);\n\n  return <ResourceKebab {...otherProps} actions={augmentedMenuActions} />;\n};\n\nexport default ResourceKebabWithUserLabel;\n","import { merge } from 'lodash';\n// FIXME react-redux types are 6.x while react-redux is 7.x\n// eslint-disable-next-line @typescript-eslint/ban-ts-ignore\n// @ts-ignore\nimport { useSelector } from 'react-redux';\nimport { KebabAction } from '@console/internal/components/utils';\nimport { K8sResourceCommon } from '@console/internal/module/k8s';\nimport { PipelineRun } from '../../../utils/pipeline-augment';\nimport { StartedByLabel } from '../../pipelines/const';\n\ntype LabelMap = { [labelKey: string]: string };\n\nconst mergeLabelsWithResource = (labels: LabelMap, resource: K8sResourceCommon) => {\n  return merge({}, resource, { metadata: { labels } });\n};\n\nexport const useUserLabelForManualStart = (): LabelMap => {\n  const user = useSelector((state) => state.UI.get('user'));\n\n  return {\n    // kube:admin is an invalid k8s label value\n    [StartedByLabel.user]: user.metadata.name.replace(/:/, ''),\n  };\n};\n\nexport const usePipelineRunWithUserLabel = (plr: PipelineRun): PipelineRun => {\n  const labels = useUserLabelForManualStart();\n\n  return plr && mergeLabelsWithResource(labels, plr);\n};\n\nexport const useMenuActionsWithUserLabel = (menuActions: KebabAction[]): KebabAction[] => {\n  const labels = useUserLabelForManualStart();\n\n  return menuActions.map((kebabAction) => {\n    return (kind, resource, ...rest) =>\n      kebabAction(kind, mergeLabelsWithResource(labels, resource), ...rest);\n  });\n};\n","export * from './hooks';\nexport { default as ResourceKebabWithUserLabel } from './ResourceKebabWithUserLabel';\n","import * as React from 'react';\nimport { ListPage } from '@console/internal/components/factory';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport PipelineRunsList from '../../pipelineruns/list-page/PipelineRunList';\nimport {\n  pipelineRunFilterReducer,\n  pipelineRunStatusFilter,\n} from '../../../utils/pipeline-filter-reducer';\nimport { ListFilterId, ListFilterLabels } from '../../../utils/pipeline-utils';\nimport { PipelineRunModel } from '../../../models';\n\nexport const runFilters = [\n  {\n    type: 'pipelinerun-status',\n    selected: [\n      ListFilterId.Succeeded,\n      ListFilterId.Running,\n      ListFilterId.Failed,\n      ListFilterId.Cancelled,\n    ],\n    reducer: pipelineRunFilterReducer,\n    items: [\n      { id: ListFilterId.Succeeded, title: ListFilterLabels[ListFilterId.Succeeded] },\n      { id: ListFilterId.Running, title: ListFilterLabels[ListFilterId.Running] },\n      { id: ListFilterId.Failed, title: ListFilterLabels[ListFilterId.Failed] },\n      { id: ListFilterId.Cancelled, title: ListFilterLabels[ListFilterId.Cancelled] },\n    ],\n    filter: pipelineRunStatusFilter,\n  },\n];\n\ninterface PipelineRunsProps {\n  obj: any;\n}\n\nconst PipelineRuns: React.FC<PipelineRunsProps> = ({ obj }) => (\n  <ListPage\n    showTitle={false}\n    canCreate={false}\n    kind={referenceForModel(PipelineRunModel)}\n    namespace={obj.metadata.namespace}\n    selector={{\n      'tekton.dev/pipeline': obj.metadata.name,\n    }}\n    ListComponent={PipelineRunsList}\n    rowFilters={runFilters}\n  />\n);\n\nexport default PipelineRuns;\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AChDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAYA;;;;;;;;;;;;;ACnBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAQA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAQA;AAEA;;;;;;;;;;;;;ACpDA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACVA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAOA;;;AAGA;AACA;;AAIA;AAQA;AACA;AAWA;AAEA;AACA;AAEA;;;;;;;;;;;;;AC7CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAOA;AAOA;AACA;AAEA;AAEA;AAIA;AACA;AACA;AACA;AAIA;;;;;;;;;;;;;ACjCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAOA;;AAIA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;;;;;;;;;;;;AChCA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAMA;AACA;AAGA;AACA;AAEA;AAIA;AAEA;AACA;AAIA;AAGA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/BA;AACA;AACA;AAEA;AAAA;AAIA;AAEA;AACA;AAEA;;;;;;;;;;;;;ACbA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAIA;AAIA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;;;;;;;;;;ACDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AAOA;AACA;AAMA;;;;;A","sourceRoot":""}