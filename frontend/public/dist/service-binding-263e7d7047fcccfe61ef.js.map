{"version":3,"file":"service-binding-263e7d7047fcccfe61ef.js","sources":["webpack:///./public/components/service-binding.tsx","webpack:///./public/components/service-catalog-parameters.tsx","webpack:///./public/components/service-instance.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { match } from 'react-router-dom';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport { Alert } from '@patternfly/react-core';\n\nimport { serviceCatalogStatus, referenceForModel, K8sResourceKind } from '../module/k8s';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from './factory';\nimport { Kebab, ResourceKebab } from './utils/kebab';\nimport { SectionHeading } from './utils/headings';\nimport { navFactory } from './utils/horizontal-nav';\nimport { ResourceLink } from './utils/resource-link';\nimport { ResourceSummary } from './utils/details-page';\nimport { StatusWithIcon } from './utils/service-catalog-status';\nimport { ResourceEventStream } from './events';\nimport { Conditions } from './conditions';\nimport {\n  ServiceCatalogParameters,\n  ServiceCatalogParametersSecrets,\n} from './service-catalog-parameters';\nimport { ServiceBindingDescription } from './service-instance';\nimport { addSecretToWorkload } from './secret';\nimport { ServiceBindingModel, ServiceInstanceModel } from '../models';\n\nconst actionButtons = [addSecretToWorkload];\n\nconst { common } = Kebab.factory;\nconst menuActions = [...Kebab.getExtensionsActionsForKind(ServiceBindingModel), ...common];\n\nconst secretLink = (obj) =>\n  serviceCatalogStatus(obj) === 'Ready' ? (\n    <ResourceLink\n      kind=\"Secret\"\n      name={obj.spec.secretName}\n      title={obj.spec.secretName}\n      namespace={obj.metadata.namespace}\n    />\n  ) : (\n    '-'\n  );\n\nconst ServiceBindingDetails: React.SFC<ServiceBindingDetailsProps> = ({ obj: sb }) => {\n  const sbParameters = _.get(sb, 'status.externalProperties.parameters', {});\n  const notReady = serviceCatalogStatus(sb) === 'Not Ready' ? true : false;\n\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        {notReady && (\n          <Alert\n            isInline\n            className=\"co-alert\"\n            variant=\"warning\"\n            title=\"This binding is not ready yet\"\n          >\n            Once it is ready, bind its secret to a workload.\n          </Alert>\n        )}\n        <ServiceBindingDescription\n          instanceName={sb.spec.instanceRef.name}\n          className=\"co-m-pane__explanation\"\n        />\n        <SectionHeading text=\"Service Binding Details\" />\n        <div className=\"row\">\n          <div className=\"col-sm-6\">\n            <ResourceSummary resource={sb} />\n          </div>\n          <div className=\"col-sm-6\">\n            <dl className=\"co-m-pane__details\">\n              <dt>Service Instance</dt>\n              <dd>\n                <ResourceLink\n                  kind={referenceForModel(ServiceInstanceModel)}\n                  name={sb.spec.instanceRef.name}\n                  namespace={sb.metadata.namespace}\n                />\n              </dd>\n              <dt>Secret</dt>\n              <dd>{secretLink(sb)}</dd>\n              <dt>Status</dt>\n              <dd>\n                <StatusWithIcon obj={sb} />\n              </dd>\n            </dl>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Conditions\" />\n        <Conditions conditions={sb.status.conditions} />\n      </div>\n      {!_.isEmpty(sb.spec.parametersFrom) && <ServiceCatalogParametersSecrets obj={sb} />}\n      {!_.isEmpty(sbParameters) && <ServiceCatalogParameters parameters={sbParameters} />}\n    </>\n  );\n};\n\nconst pages = [\n  navFactory.details(ServiceBindingDetails),\n  navFactory.editYaml(),\n  navFactory.events(ResourceEventStream),\n];\nexport const ServiceBindingDetailsPage: React.SFC<ServiceBindingDetailsPageProps> = (props) => (\n  <DetailsPage\n    {...props}\n    kind={referenceForModel(ServiceBindingModel)}\n    buttonActions={actionButtons}\n    menuActions={menuActions}\n    pages={pages}\n  />\n);\nServiceBindingDetailsPage.displayName = 'ServiceBindingDetailsPage';\n\nconst tableColumnClasses = [\n  '',\n  '',\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'),\n  Kebab.columnClass,\n];\n\nconst ServiceBindingsTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Status',\n      sortFunc: 'serviceCatalogStatus',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Service Instance',\n      sortField: 'spec.instanceRef.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: 'Secret',\n      sortField: 'spec.secretName',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[5] },\n    },\n  ];\n};\nServiceBindingsTableHeader.displayName = 'ServiceBindingsTableHeader';\n\nconst ServiceBindingsTableRow: RowFunction<K8sResourceKind> = ({ obj, index, key, style }) => {\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={referenceForModel(ServiceBindingModel)}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n          title={obj.metadata.name}\n        />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink\n          kind=\"Namespace\"\n          name={obj.metadata.namespace}\n          title={obj.metadata.namespace}\n        />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[2], 'co-break-word')}>\n        <StatusWithIcon obj={obj} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[3], 'co-break-word')}>\n        <ResourceLink\n          kind={referenceForModel(ServiceInstanceModel)}\n          name={obj.spec.instanceRef.name}\n          title={obj.spec.instanceRef.name}\n          namespace={obj.metadata.namespace}\n        />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[4], 'co-break-word')}>\n        {secretLink(obj)}\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        <ResourceKebab\n          actions={menuActions}\n          kind={referenceForModel(ServiceBindingModel)}\n          resource={obj}\n        />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst ServiceBindingsList: React.SFC = (props) => (\n  <Table\n    {...props}\n    aria-label=\"Service Bindings\"\n    Header={ServiceBindingsTableHeader}\n    Row={ServiceBindingsTableRow}\n    virtualize\n  />\n);\nServiceBindingsList.displayName = 'ServiceBindingsList';\n\nexport const ServiceBindingsPage: React.SFC<ServiceBindingsPageProps> = (props) => (\n  <ListPage\n    {...props}\n    namespace={props.namespace || _.get(props.match, 'params.ns')}\n    showTitle={false}\n    kind={referenceForModel(ServiceBindingModel)}\n    ListComponent={ServiceBindingsList}\n  />\n);\n\nexport type ServiceBindingDetailsProps = {\n  obj: K8sResourceKind;\n};\n\nexport type ServiceBindingsPageProps = {\n  autoFocus?: boolean;\n  canCreate?: boolean;\n  createHandler?: any;\n  filters?: any;\n  namespace?: string;\n  match?: match<{ ns?: string }>;\n  selector?: any;\n  showTitle?: boolean;\n};\n\nexport type ServiceBindingDetailsPageProps = {\n  match: any;\n};\n\nServiceBindingsPage.displayName = 'ServiceBindingsListPage';\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\n\nimport { K8sResourceKind } from '../module/k8s';\nimport { SectionHeading, ResourceLink } from './utils';\nimport { MaskedData } from './configmap-and-secret-data';\n\nexport const ServiceCatalogParametersSecrets: React.SFC<ServiceCatalogParametersSecretsProps> = ({\n  obj: obj,\n}) => {\n  const rows = _.map(obj.spec.parametersFrom, ({ secretKeyRef }) => (\n    <div className=\"row\" key={secretKeyRef.name}>\n      <div className=\"col-xs-6\">\n        <ResourceLink kind=\"Secret\" name={secretKeyRef.name} namespace={obj.metadata.namespace} />\n      </div>\n      <div className=\"col-xs-6\">{secretKeyRef.key}</div>\n    </div>\n  ));\n\n  return (\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text=\"Parameters Secrets\" />\n      <div className=\"co-m-table-grid co-m-table-grid--bordered\">\n        <div className=\"row co-m-table-grid__head\">\n          <div className=\"col-xs-6\">Secret</div>\n          <div className=\"col-xs-6\">Key</div>\n        </div>\n        <div className=\"co-m-table-grid__body\">{rows}</div>\n      </div>\n    </div>\n  );\n};\n\nexport const ServiceCatalogParameters: React.SFC<ServiceCatalogParametersProps> = ({\n  parameters,\n}) => (\n  <div className=\"co-m-pane__body\">\n    <SectionHeading text=\"Parameters\" />\n    <dl className=\"co-m-resource__details\">\n      {_.map(parameters, (v, k) => (\n        <React.Fragment key={k}>\n          <dt>{k}</dt>\n          <dd>{v === '<redacted>' ? <MaskedData /> : v}</dd>\n        </React.Fragment>\n      ))}\n    </dl>\n  </div>\n);\n\nexport type ServiceCatalogParametersSecretsProps = {\n  obj: K8sResourceKind;\n};\n\nexport type ServiceCatalogParametersProps = {\n  parameters: {\n    [key: string]: string;\n  };\n};\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Link, withRouter, RouteComponentProps, match } from 'react-router-dom';\nimport { sortable } from '@patternfly/react-table';\nimport * as classNames from 'classnames';\nimport { Alert, Button } from '@patternfly/react-core';\n\nimport {\n  k8sList,\n  K8sResourceKind,\n  planExternalName,\n  serviceCatalogStatus,\n  referenceForModel,\n} from '../module/k8s';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from './factory';\nimport { ExternalLink } from './utils/link';\nimport { Kebab, ResourceKebab } from './utils/kebab';\nimport { ResourceIcon } from './utils/resource-icon';\nimport { ResourceLink } from './utils/resource-link';\nimport { ResourceSummary } from './utils/details-page';\nimport { SectionHeading } from './utils/headings';\nimport { StatusWithIcon } from './utils/service-catalog-status';\nimport { Timestamp } from './utils/timestamp';\nimport { history } from './utils/router';\nimport { navFactory } from './utils/horizontal-nav';\nimport { HintBlock } from './utils/hint-block';\nimport { ResourceEventStream } from './events';\nimport { Conditions } from './conditions';\nimport {\n  ServiceCatalogParameters,\n  ServiceCatalogParametersSecrets,\n} from './service-catalog-parameters';\nimport { ServiceBindingsPage } from './service-binding';\nimport { ServiceBindingModel, ServiceInstanceModel, ClusterServiceClassModel } from '../models';\n\nconst goToCreateBindingPage = (serviceInstance: K8sResourceKind) => {\n  history.push(\n    `/k8s/ns/${serviceInstance.metadata.namespace}/serviceinstances/${serviceInstance.metadata.name}/create-binding`,\n  );\n};\n\nconst createBinding = (kindObj, serviceInstance) => {\n  return {\n    callback: () => goToCreateBindingPage(serviceInstance),\n    label: 'Create Service Binding',\n    accessReview: {\n      group: ServiceBindingModel.apiGroup,\n      resource: ServiceBindingModel.plural,\n      namespace: serviceInstance.metadata.namespace,\n      verb: 'create',\n    },\n  };\n};\n\nconst { common } = Kebab.factory;\n\nconst menuActions = [\n  createBinding,\n  ...Kebab.getExtensionsActionsForKind(ServiceInstanceModel),\n  ...common,\n];\n\nexport const ServiceBindingDescription: React.SFC<ServiceBindingDescriptionProps> = ({\n  instanceName,\n  className,\n}) => (\n  <p className={className}>\n    Service bindings create a secret containing the necessary information for a workload to use{' '}\n    <ResourceIcon kind={referenceForModel(ServiceInstanceModel)} />\n    {instanceName}. Once the binding is ready, add the secret to your workload&apos;s environment\n    variables or volumes.\n  </p>\n);\n\nclass ServiceInstanceMessage_ extends React.Component<\n  ServiceInstanceMessageProps & RouteComponentProps<{}>,\n  ServiceInstanceMessageState\n> {\n  state = {\n    hasBindings: false,\n    loaded: false,\n  };\n\n  componentDidMount() {\n    const { obj } = this.props;\n\n    // Get the bindings for this service instance to know what messages to display.\n    k8sList(ServiceBindingModel, { ns: obj.metadata.namespace }).then((serviceBindings) => {\n      const hasBindings = _.some(serviceBindings, {\n        spec: { instanceRef: { name: obj.metadata.name } },\n      });\n      this.setState({ loaded: true, hasBindings });\n    });\n  }\n\n  createBinding = () => {\n    const { obj } = this.props;\n    goToCreateBindingPage(obj);\n  };\n\n  render() {\n    const {\n      obj,\n      match: { url },\n    } = this.props;\n    const { deletionTimestamp } = obj.metadata;\n    const { loaded, hasBindings } = this.state;\n\n    if (!loaded) {\n      return null;\n    }\n\n    // Warn when the instance is deleted, but is still has bindings.\n    if (deletionTimestamp && hasBindings) {\n      const basePath = url.replace(/\\/$/, '');\n      return (\n        <Alert\n          isInline\n          className=\"co-alert co-service-instance-delete-bindings-warning\"\n          variant=\"warning\"\n          title=\"Service instance still has bindings\"\n        >\n          This service instance is marked for deletion, but still has bindings. You must delete the\n          bindings before the instance will be deleted.{' '}\n          <Link to={`${basePath}/servicebindings`}>View service bindings</Link>\n        </Alert>\n      );\n    }\n\n    // Show help for creating a binding when there are none for this instance.\n    // TODO: Check if the plan is actually bindable.\n    if (!deletionTimestamp && !hasBindings) {\n      return (\n        <div className=\"co-m-pane__body\">\n          <HintBlock title=\"Create Service Binding\">\n            <ServiceBindingDescription instanceName={obj.metadata.name} />\n            <Button variant=\"primary\" onClick={this.createBinding}>\n              Create Service Binding\n            </Button>\n          </HintBlock>\n        </div>\n      );\n    }\n\n    return null;\n  }\n}\nconst ServiceInstanceMessage = withRouter(ServiceInstanceMessage_);\n\nconst ServiceInstanceDetails: React.SFC<ServiceInstanceDetailsProps> = ({ obj: si }) => {\n  const plan = planExternalName(si);\n  const parameters = _.get(si, 'status.externalProperties.parameters', {});\n  const classDisplayName =\n    si.spec.clusterServiceClassExternalName || si.spec.serviceClassExternalName;\n  const clusterServiceClassName = _.get(si, 'spec.clusterServiceClassRef.name');\n  const dashboardURL = _.get(si, 'status.dashboardURL');\n\n  return (\n    <>\n      <ServiceInstanceMessage obj={si} />\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Service Instance Details\" />\n        <div className=\"row\">\n          <div className=\"col-sm-6\">\n            <ResourceSummary resource={si} />\n          </div>\n          <div className=\"col-sm-6\">\n            <dl className=\"co-m-pane__details\">\n              <dt>Service Class</dt>\n              <dd>\n                {clusterServiceClassName ? (\n                  <ResourceLink\n                    kind={referenceForModel(ClusterServiceClassModel)}\n                    displayName={classDisplayName}\n                    title={classDisplayName}\n                    name={clusterServiceClassName}\n                  />\n                ) : (\n                  classDisplayName\n                )}\n              </dd>\n              <dt>Status</dt>\n              <dd>\n                <StatusWithIcon obj={si} />\n              </dd>\n              <dt>Plan</dt>\n              <dd>{plan || '-'}</dd>\n              {dashboardURL && (\n                <>\n                  <dt>Dashboard</dt>\n                  <dd>\n                    <ExternalLink href={dashboardURL} text=\"View dashboard\" />\n                  </dd>\n                </>\n              )}\n            </dl>\n          </div>\n        </div>\n      </div>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text=\"Conditions\" />\n        <Conditions conditions={si.status.conditions} />\n      </div>\n      {!_.isEmpty(si.spec.parametersFrom) && <ServiceCatalogParametersSecrets obj={si} />}\n      {!_.isEmpty(parameters) && <ServiceCatalogParameters parameters={parameters} />}\n    </>\n  );\n};\n\nconst ServiceBindingsDetails: React.SFC<ServiceBindingsDetailsProps> = ({ obj: si }) => {\n  const bindingFilters = {\n    selector: { field: 'spec.instanceRef.name', values: new Set(_.map(si, 'name')) },\n  };\n\n  return (\n    <ServiceBindingsPage\n      canCreate={true}\n      createHandler={() => goToCreateBindingPage(si)}\n      namespace={si.metadata.namespace}\n      filters={bindingFilters}\n      autoFocus={false}\n      showTitle={false}\n    />\n  );\n};\n\nconst pages = [\n  navFactory.details(ServiceInstanceDetails),\n  navFactory.editYaml(),\n  navFactory.events(ResourceEventStream),\n  navFactory.serviceBindings(ServiceBindingsDetails),\n];\n\nexport const ServiceInstanceDetailsPage: React.SFC<ServiceInstanceDetailsPageProps> = (props) => (\n  <DetailsPage\n    {...props}\n    kind={referenceForModel(ServiceInstanceModel)}\n    menuActions={menuActions}\n    pages={pages}\n  />\n);\nServiceInstanceDetailsPage.displayName = 'ServiceInstanceDetailsPage';\n\nconst tableColumnClasses = [\n  '',\n  '',\n  classNames('pf-m-hidden', 'pf-m-visible-on-sm'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-lg'),\n  classNames('pf-m-hidden', 'pf-m-visible-on-xl'),\n  Kebab.columnClass,\n];\n\nconst ServiceInstancesTableHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: 'Namespace',\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: 'Status',\n      sortFunc: 'serviceCatalogStatus',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: 'Service Class',\n      sortField: 'spec.clusterServiceClassExternalName',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: 'Plan',\n      sortFunc: 'planExternalName',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: 'Created',\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[5] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[6] },\n    },\n  ];\n};\nServiceInstancesTableHeader.displayName = 'ServiceInstancesTableHeader';\n\nconst ServiceInstancesTableRow: RowFunction<K8sResourceKind> = ({ obj, index, key, style }) => {\n  const clusterServiceClassRefName = _.get(obj, 'spec.clusterServiceClassRef.name');\n  return (\n    <TableRow id={obj.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink\n          kind={referenceForModel(ServiceInstanceModel)}\n          name={obj.metadata.name}\n          namespace={obj.metadata.namespace}\n          title={obj.metadata.name}\n        />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink\n          kind=\"Namespace\"\n          name={obj.metadata.namespace}\n          title={obj.metadata.namespace}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        <StatusWithIcon obj={obj} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[3], 'co-break-word')}>\n        {clusterServiceClassRefName ? (\n          <ResourceLink\n            kind={referenceForModel(ClusterServiceClassModel)}\n            displayName={obj.spec.clusterServiceClassExternalName}\n            title={obj.spec.clusterServiceClassExternalName}\n            name={obj.spec.clusterServiceClassRef.name}\n          />\n        ) : (\n          obj.spec.clusterServiceClassExternalName\n        )}\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[4], 'co-break-word')}>\n        {planExternalName(obj) || '-'}\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[5], 'co-truncate')}>\n        <Timestamp timestamp={obj.metadata.creationTimestamp} />\n      </TableData>\n      <TableData className={tableColumnClasses[6]}>\n        <ResourceKebab\n          actions={menuActions}\n          kind={referenceForModel(ServiceInstanceModel)}\n          resource={obj}\n        />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst ServiceInstancesList: React.SFC = (props) => (\n  <Table\n    {...props}\n    aria-label=\"Service Instances\"\n    Header={ServiceInstancesTableHeader}\n    Row={ServiceInstancesTableRow}\n    virtualize\n  />\n);\nServiceInstancesList.displayName = 'ServiceInstancesList';\n\nconst filters = [\n  {\n    filterGroupName: 'Status',\n    type: 'catalog-status',\n    reducer: serviceCatalogStatus,\n    items: [\n      { id: 'Ready', title: 'Ready' },\n      { id: 'Not Ready', title: 'Not Ready' },\n      { id: 'Failed', title: 'Failed' },\n    ],\n  },\n];\n\nexport const ServiceInstancesPage: React.SFC<ServiceInstancesPageProps> = (props) => (\n  <ListPage\n    {...props}\n    namespace={_.get(props.match, 'params.ns')}\n    kind={referenceForModel(ServiceInstanceModel)}\n    ListComponent={ServiceInstancesList}\n    rowFilters={filters}\n    showTitle={false}\n  />\n);\nServiceInstancesPage.displayName = 'ServiceInstancesListPage';\n\nexport type ServiceInstanceStatusProps = {\n  obj: K8sResourceKind;\n};\n\nexport type ServiceInstanceDetailsProps = {\n  obj: K8sResourceKind;\n};\n\nexport type ServiceBindingDescriptionProps = {\n  instanceName: string;\n  className?: string;\n};\n\nexport type ServiceInstanceMessageProps = {\n  obj: K8sResourceKind;\n};\n\nexport type ServiceInstanceMessageState = {\n  hasBindings: boolean;\n  loaded: boolean;\n};\n\nexport type ServiceBindingsDetailsProps = {\n  obj: any;\n};\n\nexport type ServiceInstancesPageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  match?: match<{ ns?: string }>;\n  selector?: any;\n};\n\nexport type ServiceInstanceDetailsPageProps = {\n  match: any;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AAYA;AACA;AACA;AAEA;AAEA;AACA;AAUA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAOA;AACA;AAMA;AACA;AAEA;AACA;AAOA;AAGA;AACA;AAQA;AAEA;AASA;AAEA;AA6BA;;;;;;;;;;;;;ACtPA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAEA;AAGA;AAEA;AACA;AAEA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAEA;AAIA;AACA;AAGA;AACA;;;;;;;;;;;;;AC1CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;;AAKA;AACA;AACA;AAEA;AAGA;AAAA;;AAIA;AACA;AACA;AACA;AAcA;AACA;AACA;AACA;AAgDA;AA/DA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AAIA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAQA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAMA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAYA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAQA;AACA;AACA;AAEA;AACA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAQA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAOA;AACA;AAMA;AACA;AAEA;AAYA;AAGA;AACA;AAEA;AACA;AAQA;AAEA;AASA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAUA;;;;;A","sourceRoot":""}