{"version":3,"file":"dev-console-helm-release-details-148e1231ffaf9cfe8313.js","sources":["webpack:///./packages/dev-console/src/actions/modify-helm-release.ts","webpack:///./packages/dev-console/src/components/custom-resource-list/CustomResourceList.tsx","webpack:///./packages/dev-console/src/components/helm/HelmReleaseDetailsPage.tsx","webpack:///./packages/dev-console/src/components/helm/details/HelmReleaseDetails.tsx","webpack:///./packages/dev-console/src/components/helm/details/history/HelmReleaseHistory.tsx","webpack:///./packages/dev-console/src/components/helm/details/history/HelmReleaseHistoryHeader.tsx","webpack:///./packages/dev-console/src/components/helm/details/history/HelmReleaseHistoryRow.tsx","webpack:///./packages/dev-console/src/components/helm/details/notes/HelmReleaseNotes.tsx","webpack:///./packages/dev-console/src/components/helm/details/notes/HelmReleaseNotesEmptyState.tsx","webpack:///./packages/dev-console/src/components/helm/details/overview/HelmChartSummary.tsx","webpack:///./packages/dev-console/src/components/helm/details/overview/HelmReleaseOverview.tsx","webpack:///./packages/dev-console/src/components/helm/details/resources/HelmReleaseResources.tsx","webpack:///./packages/dev-console/src/components/helm/details/resources/HelmReleaseResourcesHeader.tsx","webpack:///./packages/dev-console/src/components/helm/details/resources/HelmReleaseResourcesList.tsx","webpack:///./packages/dev-console/src/components/helm/details/resources/HelmReleaseResourcesRow.tsx","webpack:///./public/components/markdown-view.tsx","webpack:///util (ignored)","webpack:///util (ignored)?6194","webpack:///readable-stream (ignored)","webpack:///supports-color (ignored)","webpack:///chalk (ignored)","webpack:///fs (ignored)"],"sourcesContent":["import { coFetchJSON } from '@console/internal/co-fetch';\nimport { history } from '@console/internal/components/utils';\nimport { deleteResourceModal } from '../components/modals';\n\nexport const deleteHelmRelease = (releaseName: string, namespace: string, redirect?: string) => {\n  return {\n    label: 'Uninstall Helm Release',\n    callback: () => {\n      deleteResourceModal({\n        blocking: true,\n        resourceName: releaseName,\n        resourceType: 'Helm Release',\n        actionLabel: 'Uninstall',\n        redirect,\n        onSubmit: () => {\n          return coFetchJSON.delete(\n            `/api/helm/release?name=${releaseName}&ns=${namespace}`,\n            null,\n            null,\n            -1,\n          );\n        },\n      });\n    },\n  };\n};\n\nexport const upgradeHelmRelease = (\n  releaseName: string,\n  namespace: string,\n  actionOrigin: string,\n) => ({\n  label: 'Upgrade',\n  callback: () => {\n    history.push(\n      `/helm-releases/ns/${namespace}/${releaseName}/upgrade?actionOrigin=${actionOrigin}`,\n    );\n  },\n});\n\nexport const rollbackHelmRelease = (\n  releaseName: string,\n  namespace: string,\n  actionOrigin: string,\n) => ({\n  label: 'Rollback',\n  callback: () => {\n    history.push(\n      `/helm-releases/ns/${namespace}/${releaseName}/rollback?actionOrigin=${actionOrigin}`,\n    );\n  },\n});\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { EmptyState, EmptyStateVariant } from '@patternfly/react-core';\nimport { Table } from '@console/internal/components/factory';\nimport { getQueryArgument, LoadingBox } from '@console/internal/components/utils';\nimport { CustomResourceListProps } from './custom-resource-list-types';\nimport { FilterToolbar } from '@console/internal/components/filter-toolbar';\n\nconst CustomResourceList: React.FC<CustomResourceListProps> = ({\n  resources,\n  loaded = true,\n  EmptyMsg,\n  queryArg,\n  rowFilters,\n  rowFilterReducer,\n  textFilter,\n  textFilterReducer,\n  resourceHeader,\n  resourceRow,\n  sortBy,\n  sortOrder,\n}) => {\n  const applyFilters = React.useCallback(() => {\n    const queryArgument = queryArg ? getQueryArgument(queryArg) : undefined;\n    const activeFilters = queryArgument?.split(',');\n    const params = new URLSearchParams(window.location.search);\n    const filteredText = params.get(textFilter);\n\n    let filteredItems = resources;\n    if (activeFilters) {\n      filteredItems = rowFilterReducer(filteredItems, activeFilters);\n    }\n    if (filteredText) {\n      filteredItems = textFilterReducer(filteredItems, filteredText);\n    }\n    return filteredItems;\n  }, [resources, queryArg, rowFilterReducer, textFilter, textFilterReducer]);\n\n  const filteredListItems = applyFilters();\n\n  if (!loaded) {\n    return <LoadingBox />;\n  }\n\n  if (_.isEmpty(resources)) {\n    return EmptyMsg ? (\n      <EmptyMsg />\n    ) : (\n      <EmptyState variant={EmptyStateVariant.full}>\n        <p>No resources found</p>\n      </EmptyState>\n    );\n  }\n\n  return (\n    <div className=\"co-m-pane__body\">\n      {(rowFilters || textFilter) && (\n        <FilterToolbar\n          rowFilters={rowFilters}\n          data={resources}\n          textFilter={textFilter}\n          hideLabelFilter\n          reduxIDs={[]}\n        />\n      )}\n      <Table\n        data={filteredListItems}\n        defaultSortField={sortBy}\n        defaultSortOrder={sortOrder}\n        aria-label=\"CustomResources\"\n        Header={resourceHeader}\n        Row={resourceRow}\n        loaded={loaded}\n        virtualize\n      />\n    </div>\n  );\n};\n\nexport default React.memo(CustomResourceList);\n","import * as React from 'react';\nimport { match as RMatch } from 'react-router';\nimport { Firehose, history } from '@console/internal/components/utils';\nimport { ALL_NAMESPACES_KEY } from '@console/shared';\nimport { SecretModel } from '@console/internal/models';\nimport NamespacedPage, { NamespacedPageVariants } from '../NamespacedPage';\nimport HelmReleaseDetails from './details/HelmReleaseDetails';\n\ninterface HelmReleaseDetailsPageProps {\n  match: RMatch<{\n    ns?: string;\n    name?: string;\n  }>;\n}\n\nconst handleNamespaceChange = (newNamespace: string): void => {\n  if (newNamespace === ALL_NAMESPACES_KEY) {\n    history.push('/helm-releases/all-namespaces');\n  } else {\n    history.push('/helm-releases/ns/:ns');\n  }\n};\n\nconst HelmReleaseDetailsPage: React.FC<HelmReleaseDetailsPageProps> = ({ match }) => {\n  const namespace = match.params.ns;\n  const helmReleaseName = match.params.name;\n  return (\n    <NamespacedPage\n      variant={NamespacedPageVariants.light}\n      hideApplications\n      onNamespaceChange={handleNamespaceChange}\n    >\n      <Firehose\n        resources={[\n          {\n            namespace,\n            kind: SecretModel.kind,\n            prop: SecretModel.id,\n            isList: true,\n            selector: { name: `${helmReleaseName}` },\n          },\n        ]}\n      >\n        <HelmReleaseDetails match={match} />\n      </Firehose>\n    </NamespacedPage>\n  );\n};\n\nexport default HelmReleaseDetailsPage;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { match as RMatch } from 'react-router';\nimport {\n  navFactory,\n  LoadingBox,\n  StatusBox,\n  FirehoseResult,\n} from '@console/internal/components/utils';\nimport { SecretModel } from '@console/internal/models';\nimport { ErrorPage404 } from '@console/internal/components/error';\nimport { DetailsPage } from '@console/internal/components/factory';\nimport { K8sResourceKindReference } from '@console/internal/module/k8s';\nimport { Status } from '@console/shared';\nimport { Badge } from '@patternfly/react-core';\nimport {\n  deleteHelmRelease,\n  upgradeHelmRelease,\n  rollbackHelmRelease,\n} from '../../../actions/modify-helm-release';\nimport { HelmRelease, HelmActionOrigins } from '../helm-types';\nimport { fetchHelmReleases } from '../helm-utils';\nimport HelmReleaseResources from './resources/HelmReleaseResources';\nimport HelmReleaseOverview from './overview/HelmReleaseOverview';\nimport HelmReleaseHistory from './history/HelmReleaseHistory';\nimport HelmReleaseNotes from './notes/HelmReleaseNotes';\n\nconst SecretReference: K8sResourceKindReference = 'Secret';\nconst HelmReleaseReference = 'HelmRelease';\ninterface HelmReleaseDetailsProps {\n  match: RMatch<{\n    ns?: string;\n    name?: string;\n  }>;\n  secret?: FirehoseResult;\n}\n\ninterface LoadedHelmReleaseDetailsProps extends HelmReleaseDetailsProps {\n  helmReleaseData: HelmRelease;\n}\n\nexport const LoadedHelmReleaseDetails: React.FC<LoadedHelmReleaseDetailsProps> = ({\n  match,\n  secret,\n  helmReleaseData,\n}) => {\n  const namespace = match.params.ns;\n  if (!helmReleaseData || !secret || (!secret.loaded && _.isEmpty(secret.loadError))) {\n    return <LoadingBox />;\n  }\n\n  if (secret.loadError) {\n    return <StatusBox loaded={secret.loaded} loadError={secret.loadError} />;\n  }\n\n  const secretResources = secret.data;\n\n  if (_.isEmpty(secretResources)) return <ErrorPage404 />;\n\n  const sortedSecretResources = _.orderBy(\n    secretResources,\n    (o) => Number(o.metadata.labels.version),\n    'desc',\n  );\n\n  const latestReleaseSecret = sortedSecretResources[0];\n  const secretName = latestReleaseSecret?.metadata.name;\n  const releaseName = helmReleaseData?.name;\n\n  const title = (\n    <>\n      {releaseName}\n      <Badge isRead style={{ verticalAlign: 'middle', marginLeft: 'var(--pf-global--spacer--md)' }}>\n        <Status status={_.capitalize(latestReleaseSecret?.metadata.labels.status)} />\n      </Badge>\n    </>\n  );\n\n  const menuActions = [\n    () => upgradeHelmRelease(releaseName, namespace, HelmActionOrigins.details),\n    () => rollbackHelmRelease(releaseName, namespace, HelmActionOrigins.details),\n    () => deleteHelmRelease(releaseName, namespace, `/helm-releases/ns/${namespace}`),\n  ];\n\n  return (\n    <DetailsPage\n      kindObj={SecretModel}\n      match={match}\n      menuActions={menuActions}\n      name={secretName}\n      namespace={namespace}\n      customData={helmReleaseData}\n      breadcrumbsFor={() => [\n        {\n          name: `Helm Releases`,\n          path: `/helm-releases/ns/${namespace}`,\n        },\n        { name: `Helm Release Details`, path: `${match.url}` },\n      ]}\n      title={title}\n      kind={SecretReference}\n      pages={[\n        navFactory.details(HelmReleaseOverview),\n        {\n          href: 'resources',\n          name: 'Resources',\n          component: HelmReleaseResources,\n        },\n        {\n          href: 'history',\n          name: 'Revision History',\n          component: HelmReleaseHistory,\n        },\n        {\n          href: 'releasenotes',\n          name: 'Release Notes',\n          component: HelmReleaseNotes,\n        },\n      ]}\n      customKind={HelmReleaseReference}\n    />\n  );\n};\n\nconst HelmReleaseDetails: React.FC<HelmReleaseDetailsProps> = ({ secret, match }) => {\n  const namespace = match.params.ns;\n  const helmReleaseName = match.params.name;\n\n  const [helmReleaseData, setHelmReleaseData] = React.useState<HelmRelease>();\n\n  React.useEffect(() => {\n    let ignore = false;\n\n    const getHelmReleases = async () => {\n      try {\n        const helmReleases = await fetchHelmReleases(namespace);\n        if (!ignore) {\n          const releaseData = helmReleases.find((release) => release.name === helmReleaseName);\n          setHelmReleaseData(releaseData);\n        }\n        // eslint-disable-next-line no-empty\n      } catch {}\n    };\n\n    getHelmReleases();\n\n    return () => {\n      ignore = true;\n    };\n  }, [helmReleaseName, namespace]);\n\n  return (\n    <LoadedHelmReleaseDetails match={match} secret={secret} helmReleaseData={helmReleaseData} />\n  );\n};\n\nexport default HelmReleaseDetails;\n","import * as React from 'react';\nimport { match as RMatch } from 'react-router';\nimport { SortByDirection } from '@patternfly/react-table';\nimport { useDeepCompareMemoize } from '@console/shared';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { coFetchJSON } from '@console/internal/co-fetch';\nimport { StatusBox } from '@console/internal/components/utils';\nimport CustomResourceList from '../../../custom-resource-list/CustomResourceList';\nimport HelmReleaseHistoryRow from './HelmReleaseHistoryRow';\nimport HelmReleaseHistoryHeader from './HelmReleaseHistoryHeader';\n\ninterface HelmReleaseHistoryProps {\n  match: RMatch<{\n    ns?: string;\n    name?: string;\n  }>;\n  obj: K8sResourceKind;\n}\n\nconst HelmReleaseHistory: React.FC<HelmReleaseHistoryProps> = ({ match, obj }) => {\n  const namespace = match.params.ns;\n  const helmReleaseName = match.params.name;\n  const [revisionsLoaded, setRevisionsLoaded] = React.useState<boolean>(false);\n  const [loadError, setLoadError] = React.useState<string>();\n  const [revisions, setRevisions] = React.useState([]);\n  const memoizedObj = useDeepCompareMemoize(obj);\n\n  React.useEffect(() => {\n    let destroyed = false;\n    coFetchJSON(`/api/helm/release/history?ns=${namespace}&name=${helmReleaseName}`)\n      .then((items) => {\n        if (!destroyed) {\n          setLoadError(null);\n          setRevisionsLoaded(true);\n          setRevisions(items);\n        }\n      })\n      .catch((err) => {\n        if (!destroyed) {\n          setRevisionsLoaded(true);\n          setLoadError(err.message || 'Unable to load Helm Release history');\n        }\n      });\n    return () => {\n      destroyed = true;\n    };\n  }, [helmReleaseName, namespace, memoizedObj]);\n\n  if (loadError) {\n    return <StatusBox loaded loadError={loadError} label=\"Helm Release history\" />;\n  }\n\n  return (\n    <CustomResourceList\n      resources={revisions}\n      loaded={revisionsLoaded}\n      sortBy=\"version\"\n      sortOrder={SortByDirection.desc}\n      resourceRow={HelmReleaseHistoryRow}\n      resourceHeader={HelmReleaseHistoryHeader}\n    />\n  );\n};\n\nexport default HelmReleaseHistory;\n","import { sortable } from '@patternfly/react-table';\nimport { Kebab } from '@console/internal/components/utils';\n\nexport const tableColumnClasses = {\n  revision: 'col-lg-1 col-md-3 col-sm-3 col-xs-3',\n  updated: 'col-lg-2 col-md-3 col-sm-5 col-xs-5',\n  status: 'col-lg-1 col-md-2 hidden-sm hidden-xs',\n  chartName: 'col-lg-2 hidden-md hidden-sm hidden-xs',\n  chartVersion: 'col-lg-2 hidden-md hidden-sm hidden-xs',\n  appVersion: 'col-lg-2 hidden-md hidden-sm hidden-xs',\n  description: 'col-lg-2 hidden-md hidden-sm hidden-xs',\n  kebab: Kebab.columnClass,\n};\n\nconst HelmReleaseHistoryHeader = () => {\n  return [\n    {\n      title: 'Revision',\n      sortField: 'version',\n      transforms: [sortable],\n      props: { className: tableColumnClasses.revision },\n    },\n    {\n      title: 'Updated',\n      sortField: 'info.last_deployed',\n      transforms: [sortable],\n      props: { className: tableColumnClasses.updated },\n    },\n    {\n      title: 'Status',\n      sortField: 'info.status',\n      transforms: [sortable],\n      props: { className: tableColumnClasses.status },\n    },\n    {\n      title: 'Chart Name',\n      sortField: 'chart.metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses.chartName },\n    },\n    {\n      title: 'Chart Version',\n      sortField: 'chart.metadata.version',\n      transforms: [sortable],\n      props: { className: tableColumnClasses.chartVersion },\n    },\n    {\n      title: 'App Version',\n      sortField: 'chart.metadata.appVersion',\n      transforms: [sortable],\n      props: { className: tableColumnClasses.appVersion },\n    },\n    {\n      title: 'Description',\n      props: { className: tableColumnClasses.description },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses.kebab },\n    },\n  ];\n};\n\nexport default HelmReleaseHistoryHeader;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Status } from '@console/shared';\nimport { TableRow, TableData, RowFunction } from '@console/internal/components/factory';\nimport { Timestamp, Kebab } from '@console/internal/components/utils';\nimport { confirmModal } from '@console/internal/components/modals';\nimport { coFetchJSON } from '@console/internal/co-fetch';\nimport { tableColumnClasses } from './HelmReleaseHistoryHeader';\n\nconst confirmModalRollbackHelmRelease = (\n  releaseName: string,\n  namespace: string,\n  revision: number,\n) => {\n  const message = (\n    <>\n      Are you sure you want to rollback <strong>{releaseName}</strong> to{' '}\n      <strong>Revision {revision}</strong>?\n    </>\n  );\n\n  const payload = {\n    namespace,\n    name: releaseName,\n    version: revision,\n  };\n\n  const executeFn = () => coFetchJSON.patch('/api/helm/release', payload);\n\n  return {\n    label: `Rollback to Revision ${revision}`,\n    callback: () => {\n      confirmModal({\n        title: 'Rollback',\n        btnText: 'Rollback',\n        message,\n        executeFn,\n      });\n    },\n  };\n};\n\nconst HelmReleaseHistoryRow: RowFunction = ({ obj, index, key, style }) => {\n  const menuActions = [confirmModalRollbackHelmRelease(obj.name, obj.namespace, obj.version)];\n  return (\n    <TableRow id={obj.revision} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses.revision}>{obj.version}</TableData>\n      <TableData className={tableColumnClasses.updated}>\n        <Timestamp timestamp={obj.info.last_deployed} />\n      </TableData>\n      <TableData className={tableColumnClasses.status}>\n        <Status status={_.capitalize(obj.info.status)} />\n      </TableData>\n      <TableData className={tableColumnClasses.chartName}>{obj.chart.metadata.name}</TableData>\n      <TableData className={tableColumnClasses.chartVersion}>\n        {obj.chart.metadata.version}\n      </TableData>\n      <TableData className={tableColumnClasses.appVersion}>\n        {obj.chart.metadata.appVersion}\n      </TableData>\n      <TableData className={tableColumnClasses.description}>{obj.info.description}</TableData>\n      <TableData className={tableColumnClasses.kebab}>\n        <Kebab options={menuActions} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport default HelmReleaseHistoryRow;\n","import * as React from 'react';\nimport { SyncMarkdownView } from '@console/internal/components/markdown-view';\nimport { HelmRelease } from '../../helm-types';\nimport HelmReleaseNotesEmptyState from './HelmReleaseNotesEmptyState';\n\nexport interface HelmReleaseNotesProps {\n  customData: HelmRelease;\n}\n\nconst HelmReleaseNotes: React.FC<HelmReleaseNotesProps> = ({ customData }) => {\n  const helmReleaseNotes = customData?.info?.notes ?? '';\n  return helmReleaseNotes ? (\n    <div className=\"co-m-pane__body\">\n      <SyncMarkdownView content={helmReleaseNotes} />\n    </div>\n  ) : (\n    <HelmReleaseNotesEmptyState />\n  );\n};\n\nexport default HelmReleaseNotes;\n","import * as React from 'react';\nimport {\n  Title,\n  EmptyState,\n  EmptyStateBody,\n  EmptyStateIcon,\n  EmptyStateVariant,\n} from '@patternfly/react-core';\nimport { InfoCircleIcon } from '@patternfly/react-icons';\n\nconst HelmReleaseNotesEmptyState: React.FC = () => (\n  <EmptyState variant={EmptyStateVariant.full}>\n    <EmptyStateIcon icon={InfoCircleIcon} />\n    <Title size=\"md\">No Release Notes Available</Title>\n    <EmptyStateBody>Release Notes are not available for this Helm Chart.</EmptyStateBody>\n  </EmptyState>\n);\n\nexport default HelmReleaseNotesEmptyState;\n","import * as React from 'react';\nimport { HelmRelease } from '../../helm-types';\nimport { Timestamp } from '@console/internal/components/utils';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\n\ninterface HelmChartSummaryProps {\n  obj: K8sResourceKind;\n  helmRelease: HelmRelease;\n}\n\nconst HelmChartSummary: React.FC<HelmChartSummaryProps> = ({ obj, helmRelease }) => {\n  if (!helmRelease) return null;\n\n  const {\n    chart: {\n      metadata: { name: chartName, version: chartVersion, appVersion },\n    },\n    info: { last_deployed: updated },\n  } = helmRelease;\n\n  const {\n    metadata: {\n      labels: { version: revision },\n    },\n  } = obj;\n\n  return (\n    <dl className=\"co-m-pane__details\">\n      <dt>Chart Name</dt>\n      <dd>{chartName}</dd>\n      <dt>Chart Version</dt>\n      <dd>{chartVersion}</dd>\n      <dt>App Version</dt>\n      <dd>{appVersion}</dd>\n      <dt>Revision</dt>\n      <dd>{revision}</dd>\n      <dt>Updated</dt>\n      <dd>\n        <Timestamp timestamp={updated} />\n      </dd>\n    </dl>\n  );\n};\n\nexport default HelmChartSummary;\n","import * as React from 'react';\nimport { ResourceSummary, SectionHeading } from '@console/internal/components/utils';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport { HelmRelease } from '../../helm-types';\nimport HelmChartSummary from './HelmChartSummary';\n\nexport interface HelmReleaseOverviewProps {\n  obj: K8sResourceKind;\n  customData: HelmRelease;\n}\n\nconst HelmReleaseOverview: React.FC<HelmReleaseOverviewProps> = ({ obj, customData }) => {\n  return (\n    <div className=\"co-m-pane__body\">\n      <SectionHeading text=\"Helm Release Details\" />\n      <div className=\"row\">\n        <div className=\"col-sm-6\">\n          <ResourceSummary resource={obj} customPathName={'metadata.labels.name'} />\n        </div>\n        <div className=\"col-sm-6\">\n          <HelmChartSummary helmRelease={customData} obj={obj} />\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default HelmReleaseOverview;\n","import * as React from 'react';\nimport { match as RMatch } from 'react-router';\nimport { safeLoadAll } from 'js-yaml';\nimport { MultiListPage } from '@console/internal/components/factory';\nimport { FirehoseResource } from '@console/internal/components/utils';\nimport {\n  K8sResourceKind,\n  referenceFor,\n  modelFor,\n  referenceForModel,\n} from '@console/internal/module/k8s';\nimport { flattenReleaseResources } from '../../helm-utils';\nimport { HelmRelease } from '../../helm-types';\nimport HelmReleaseResourcesList from './HelmReleaseResourcesList';\n\nexport interface HelmReleaseResourcesProps {\n  match: RMatch<{\n    ns?: string;\n    name?: string;\n  }>;\n  customData: HelmRelease;\n}\n\nconst HelmReleaseResources: React.FC<HelmReleaseResourcesProps> = ({ match, customData }) => {\n  const namespace = match.params.ns;\n  const helmManifest = customData ? safeLoadAll(customData.manifest) : [];\n  const helmManifestResources: FirehoseResource[] = helmManifest.map(\n    (resource: K8sResourceKind) => {\n      const resourceKind = referenceFor(resource);\n      const model = modelFor(resourceKind);\n      return {\n        ...(model.namespaced ? { namespace } : {}),\n        kind: model.crd ? referenceForModel(model) : model.kind,\n        name: resource.metadata.name,\n        prop: `${resource.metadata.name}-${resource.kind.toLowerCase()}`,\n        isList: false,\n        optional: true,\n      };\n    },\n  );\n  return (\n    <MultiListPage\n      filterLabel=\"Resources by name\"\n      resources={helmManifestResources}\n      flatten={flattenReleaseResources}\n      label=\"Resources\"\n      ListComponent={HelmReleaseResourcesList}\n    />\n  );\n};\n\nexport default HelmReleaseResources;\n","import { sortable } from '@patternfly/react-table';\n\nexport const tableColumnClasses = {\n  name: 'col-lg-4 col-md-4 col-sm-4 col-xs-6',\n  type: 'col-lg-2 col-md-2 col-sm-4 col-xs-6',\n  status: 'col-lg-2 col-md-3 col-sm-4 hidden-xs',\n  created: 'col-lg-4 col-md-3 hidden-sm hidden-xs',\n};\n\nconst HelmReleaseResourcesHeader = () => {\n  return [\n    {\n      title: 'Name',\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses.name },\n    },\n    {\n      title: 'Type',\n      sortField: 'kind',\n      transforms: [sortable],\n      props: { className: tableColumnClasses.type },\n    },\n    {\n      title: 'Status',\n      sortField: 'status.phase',\n      transforms: [sortable],\n      props: { className: tableColumnClasses.status },\n    },\n    {\n      title: 'Created',\n      sortField: 'metadata.creationTimestamp',\n      transforms: [sortable],\n      props: { className: tableColumnClasses.created },\n    },\n  ];\n};\n\nexport default HelmReleaseResourcesHeader;\n","import * as React from 'react';\nimport { TableProps, Table } from '@console/internal/components/factory';\nimport { MsgBox } from '@console/internal/components/utils';\nimport HelmReleaseResourcesHeader from './HelmReleaseResourcesHeader';\nimport HelmReleaseResourcesRow from './HelmReleaseResourcesRow';\n\nconst HelmReleaseResourcesList: React.FC<TableProps> = (props) => (\n  <Table\n    {...props}\n    aria-label=\"Resources\"\n    defaultSortField=\"kind\"\n    Header={HelmReleaseResourcesHeader}\n    Row={HelmReleaseResourcesRow}\n    EmptyMsg={() => <MsgBox title=\"No Resources Found\" />}\n    virtualize\n  />\n);\n\nexport default HelmReleaseResourcesList;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Link } from 'react-router-dom';\nimport { K8sResourceKind, referenceFor } from '@console/internal/module/k8s';\nimport { Status } from '@console/shared';\nimport { ResourceLink, Timestamp, resourcePath } from '@console/internal/components/utils';\nimport { TableData, TableRow, RowFunction } from '@console/internal/components/factory';\nimport { tableColumnClasses } from './HelmReleaseResourcesHeader';\n\nconst HelmReleaseResourcesRow: RowFunction<K8sResourceKind> = ({\n  obj: resource,\n  index,\n  key,\n  style,\n}) => {\n  const kind = referenceFor(resource);\n  const status = resource.status?.replicas ? (\n    <Link\n      to={`${resourcePath(kind, resource.metadata.name, resource.metadata.namespace)}/pods`}\n      title=\"pods\"\n    >\n      {resource.status.replicas || 0} of {resource.spec.replicas} pods\n    </Link>\n  ) : (\n    <Status status={_.get(resource.status, 'phase', 'Created')} />\n  );\n  return (\n    <TableRow id={resource.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses.name}>\n        <ResourceLink\n          kind={kind}\n          name={resource.metadata.name}\n          namespace={resource.metadata.namespace}\n        />\n      </TableData>\n      <TableData className={tableColumnClasses.type}>{resource.kind}</TableData>\n      <TableData className={tableColumnClasses.status}>{status}</TableData>\n      <TableData className={tableColumnClasses.created}>\n        <Timestamp timestamp={resource.metadata.creationTimestamp} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nexport default HelmReleaseResourcesRow;\n","import * as React from 'react';\nimport * as _ from 'lodash-es';\nimport { Converter } from 'showdown';\nimport * as sanitizeHtml from 'sanitize-html';\n\nconst tableTags = ['table', 'thead', 'tbody', 'tr', 'th', 'td'];\n\nconst markdownConvert = (markdown) => {\n  const unsafeHtml = new Converter({\n    tables: true,\n    openLinksInNewWindow: true,\n    strikethrough: true,\n    emoji: true,\n  }).makeHtml(markdown);\n\n  return sanitizeHtml(unsafeHtml, {\n    allowedTags: [\n      'b',\n      'i',\n      'strike',\n      's',\n      'del',\n      'em',\n      'strong',\n      'a',\n      'p',\n      'h1',\n      'h2',\n      'h3',\n      'h4',\n      'ul',\n      'ol',\n      'li',\n      'code',\n      'pre',\n      ...tableTags,\n    ],\n    allowedAttributes: {\n      a: ['href', 'target', 'rel'],\n    },\n    allowedSchemes: ['http', 'https', 'mailto'],\n    transformTags: {\n      a: sanitizeHtml.simpleTransform('a', { rel: 'noopener noreferrer' }, true),\n    },\n  });\n};\n\nexport class SyncMarkdownView extends React.Component<\n  { content: string; styles?: string; exactHeight?: boolean },\n  {}\n> {\n  private frame: any;\n\n  constructor(props) {\n    super(props);\n  }\n\n  componentDidMount() {\n    this.updateDimensions();\n  }\n\n  updateDimensions() {\n    if (!this.frame?.contentWindow?.document.body.firstChild) {\n      return;\n    }\n    this.frame.style.height = `${this.frame.contentWindow.document.body.firstChild.scrollHeight}px`;\n\n    // Let the new height take effect, then reset again once we recompute\n    setTimeout(() => {\n      if (this.props.exactHeight) {\n        this.frame.style.height = `${this.frame.contentWindow.document.body.firstChild.scrollHeight}px`;\n      } else {\n        // Increase by 15px for the case where a horizontal scrollbar might appear\n        this.frame.style.height = `${this.frame.contentWindow.document.body.firstChild\n          .scrollHeight + 15}px`;\n      }\n    });\n  }\n\n  render() {\n    // Find the app's stylesheets and inject them into the frame to ensure consistent styling.\n    const filteredLinks = Array.from(document.getElementsByTagName('link')).filter((l) =>\n      _.includes(l.href, 'app-bundle'),\n    );\n\n    const linkRefs = _.reduce(\n      filteredLinks,\n      (refs, link) => `${refs}\n        <link rel=\"stylesheet\" href=\"${link.href}\">`,\n      '',\n    );\n\n    const contents = `\n      ${linkRefs}\n      <style type=\"text/css\">\n      body {\n        background-color: transparent !important;\n        color: ${this.props.content ? '#333' : '#999'};\n        font-family: var(--pf-global--FontFamily--sans-serif);\n        min-width: auto !important;\n      }\n      table {\n        display: block;\n        margin-bottom: 11.5px;\n        overflow-x: auto;\n      }\n      td,\n      th {\n        border-bottom: 1px solid #ededed;\n        padding: 10px;\n        vertical-align: top;\n      }\n      th {\n        padding-top: 0;\n      }\n      ${this.props.styles ? this.props.styles : ''}\n      </style>\n      <body class=\"pf-m-redhat-font\"><div style=\"overflow-y: auto;\">${markdownConvert(\n        this.props.content || 'Not available',\n      )}</div></body>`;\n    return (\n      <iframe\n        sandbox=\"allow-popups allow-same-origin\"\n        srcDoc={contents}\n        style={{ border: '0px', display: 'block', width: '100%', height: '0' }}\n        ref={(r) => (this.frame = r)}\n        onLoad={() => this.updateDimensions()}\n      />\n    );\n  }\n}\n","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */","/* (ignored) */"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AACA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAGA;AACA;AAEA;AAKA;AACA;AACA;AAGA;AACA;;;;;;;;;;;;;ACnDA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAcA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AAGA;AAEA;AAEA;AASA;AAYA;AAEA;;;;;;;;;;;;;AC/EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AASA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAIA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjDA;AACA;AAEA;AAMA;AACA;AACA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAaA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AAAA;AAEA;AAMA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAKA;AACA;AACA;AACA;AACA;AAEA;AASA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAGA;AAEA;;;;;;;;;;;;;AC5JA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAUA;AAEA;;;;;;;;;;;;;AChEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;AC/DA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;;AAEA;;AAAA;AACA;;AAAA;AACA;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AAGA;AACA;AACA;AAIA;AAEA;;;;;;;;;;;;;ACpEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAMA;;AACA;AACA;AAEA;AAKA;AAEA;;;;;;;;;;;;;ACpBA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AAEA;AAEA;AACA;AACA;AAIA;;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAA;AAAA;AAEA;AAQA;AACA;AAAA;AAEA;AAOA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;;;;;;;;;;;;;AC5CA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAGA;AAOA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAKA;AAEA;;;;;;;;;;;;;AC3BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAMA;AAEA;AAUA;AACA;AACA;AACA;AAEA;AACA;AACA;AAQA;AAEA;AASA;AAEA;;;;;;;;;;;;;ACnDA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;ACtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAYA;;;;;;;;;;;;;AClBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAMA;AACA;AAKA;;AAAA;AACA;AAIA;AAEA;AACA;AAMA;AACA;AACA;AACA;AAIA;AAEA;;;;;;;;;;;;;AC5CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AACA;AACA;AAEA;AACA;AACA;AAEA;;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAGA;AAIA;AACA;;;;AAIA;;;;;;;;;;;;;;;;;;AAkBA;;AAEA;AAGA;AASA;AACA;;;;;;;;;;;;AClIA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;;;;;;;;ACAA;;;;A","sourceRoot":""}