{"version":3,"file":"dev-console-add-b5c31146d46693fad0a8.js","sources":["webpack:///./packages/dev-console/src/components/AddPage.tsx","webpack:///./packages/dev-console/src/components/EmptyState.scss?6f58","webpack:///./packages/dev-console/src/components/EmptyState.tsx","webpack:///./packages/dev-console/src/components/NamespacedPage.scss?186e","webpack:///./packages/dev-console/src/components/NamespacedPage.tsx","webpack:///./packages/dev-console/src/components/ProjectsExistWrapper.tsx","webpack:///./packages/dev-console/src/components/dropdown/ApplicationDropdown.tsx","webpack:///./packages/dev-console/src/components/dropdown/ApplicationSelector.tsx","webpack:///./packages/dev-console/src/components/projects/CreateProjectListPage.tsx","webpack:///./packages/dev-console/src/components/projects/ProjectListPage.scss?762c","webpack:///./packages/dev-console/src/components/projects/ProjectListPage.tsx","webpack:///./packages/dev-console/src/extensions/add-actions.ts"],"sourcesContent":["import * as React from 'react';\nimport * as _ from 'lodash';\nimport { Helmet } from 'react-helmet';\nimport { match as RMatch } from 'react-router';\nimport { history, Firehose, FirehoseResource, HintBlock } from '@console/internal/components/utils';\nimport { K8sResourceKind, referenceForModel } from '@console/internal/module/k8s';\nimport { ServiceModel } from '@console/knative-plugin';\nimport ODCEmptyState from './EmptyState';\nimport NamespacedPage from './NamespacedPage';\nimport ProjectsExistWrapper from './ProjectsExistWrapper';\nimport CreateProjectListPage from './projects/CreateProjectListPage';\n\nexport interface AddPageProps {\n  match: RMatch<{\n    ns?: string;\n  }>;\n}\n\ninterface ResourcesType {\n  deploymentConfigs?: K8sResourceKind;\n  deployments?: K8sResourceKind;\n  daemonSets?: K8sResourceKind;\n  statefulSets?: K8sResourceKind;\n  knativeService?: K8sResourceKind;\n}\ninterface EmptyStateLoaderProps {\n  resources?: ResourcesType;\n  loaded?: boolean;\n  loadError?: string;\n}\n\nconst handleProjectCreate = (project: K8sResourceKind) =>\n  history.push(`/add/ns/${project.metadata.name}`);\n\nconst EmptyStateLoader: React.FC<EmptyStateLoaderProps> = ({ resources, loaded, loadError }) => {\n  const [noWorkloads, setNoWorkloads] = React.useState(false);\n  const daemonSets = resources?.daemonSets?.data;\n  const deploymentConfigs = resources?.deploymentConfigs?.data;\n  const deployments = resources?.deployments?.data;\n  const statefulSets = resources?.statefulSets?.data;\n  const knativeService = resources?.knativeService?.data;\n\n  React.useEffect(() => {\n    if (loaded) {\n      setNoWorkloads(\n        _.isEmpty(daemonSets) &&\n          _.isEmpty(deploymentConfigs) &&\n          _.isEmpty(deployments) &&\n          _.isEmpty(statefulSets) &&\n          _.isEmpty(knativeService),\n      );\n    } else if (loadError) {\n      setNoWorkloads(false);\n    }\n  }, [loaded, loadError, daemonSets, deploymentConfigs, deployments, statefulSets, knativeService]);\n  return noWorkloads ? (\n    <ODCEmptyState\n      title=\"Add\"\n      hintBlock={\n        <HintBlock title=\"No workloads found\">\n          <p>\n            To add content to your project, create an application, component or service using one of\n            these options.\n          </p>\n        </HintBlock>\n      }\n    />\n  ) : (\n    <ODCEmptyState title=\"Add\" />\n  );\n};\n\nconst RenderEmptyState = ({ namespace }) => {\n  const resources: FirehoseResource[] = [\n    {\n      isList: true,\n      kind: 'DeploymentConfig',\n      namespace,\n      prop: 'deploymentConfigs',\n      limit: 1,\n    },\n    {\n      isList: true,\n      kind: 'Deployment',\n      namespace,\n      prop: 'deployments',\n      limit: 1,\n    },\n    {\n      isList: true,\n      kind: 'DaemonSet',\n      namespace,\n      prop: 'daemonSets',\n      limit: 1,\n    },\n    {\n      isList: true,\n      kind: 'StatefulSet',\n      namespace,\n      prop: 'statefulSets',\n      limit: 1,\n    },\n    {\n      isList: true,\n      kind: referenceForModel(ServiceModel),\n      namespace,\n      prop: 'knativeService',\n      optional: true,\n      limit: 1,\n    },\n  ];\n  return (\n    <Firehose resources={resources}>\n      <EmptyStateLoader />\n    </Firehose>\n  );\n};\n\nconst AddPage: React.FC<AddPageProps> = ({ match }) => {\n  const namespace = match.params.ns;\n\n  return (\n    <>\n      <Helmet>\n        <title>+Add</title>\n      </Helmet>\n      <NamespacedPage>\n        <Firehose resources={[{ kind: 'Project', prop: 'projects', isList: true }]}>\n          <ProjectsExistWrapper title=\"Add\">\n            {namespace ? (\n              <RenderEmptyState namespace={namespace} />\n            ) : (\n              <CreateProjectListPage onCreate={handleProjectCreate} title=\"Add\" />\n            )}\n          </ProjectsExistWrapper>\n        </Firehose>\n      </NamespacedPage>\n    </>\n  );\n};\n\nexport default AddPage;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { Gallery, GalleryItem } from '@patternfly/react-core';\nimport { CatalogTile } from '@patternfly/react-catalog-view-extension';\nimport { connect } from 'react-redux';\nimport { history, PageHeading, useAccessReview } from '@console/internal/components/utils';\nimport { useExtensions } from '@console/plugin-sdk';\nimport { RootState } from '@console/internal/redux';\nimport { isAddAction, AddAction } from '../extensions/add-actions';\nimport './EmptyState.scss';\nimport { ALL_NAMESPACES_KEY } from '@console/shared';\n\nconst navigateTo = (e: React.SyntheticEvent, url: string) => {\n  history.push(url);\n  e.preventDefault();\n};\n\ninterface ItemProps {\n  action: AddAction;\n  namespace: string;\n}\n\nconst Item: React.FC<ItemProps> = ({\n  action: {\n    properties: { id, label, description, icon, iconClass, url, accessReview },\n  },\n  namespace,\n}) => {\n  const access =\n    !accessReview ||\n    // Defined extensions are immutable. This check will be consistent.\n    // eslint-disable-next-line react-hooks/rules-of-hooks\n    accessReview.map((descriptor) => useAccessReview({ namespace, ...descriptor })).every((x) => x);\n  if (namespace === ALL_NAMESPACES_KEY && url.match(/:namespace\\b/)) {\n    // URL expects namespace scope\n    return null;\n  }\n  const resolvedUrl = url.replace(/:namespace\\b/g, namespace);\n  return access ? (\n    <GalleryItem>\n      <CatalogTile\n        data-test-id={id}\n        className=\"odc-empty-state__tile\"\n        onClick={(e: React.SyntheticEvent) => navigateTo(e, resolvedUrl)}\n        href={resolvedUrl}\n        title={label}\n        iconImg={typeof icon === 'string' ? icon : undefined}\n        iconClass={iconClass}\n        icon={React.isValidElement(icon) ? icon : undefined}\n        description={description}\n      />\n    </GalleryItem>\n  ) : null;\n};\n\ninterface StateProps {\n  activeNamespace: string;\n}\n\ninterface EmptySProps {\n  title: string;\n  hintBlock?: React.ReactNode;\n}\n\ntype Props = EmptySProps & StateProps;\n\nconst ODCEmptyState: React.FC<Props> = ({\n  title,\n  activeNamespace,\n  hintBlock = 'Select a way to create an application, component or service from one of the options.',\n}) => {\n  const addActionExtensions = useExtensions<AddAction>(\n    isAddAction,\n  ).filter(({ properties: { hide } }) => (hide ? hide() : true));\n  return (\n    <>\n      <div className=\"odc-empty-state__title\">\n        <PageHeading title={title} />\n        {hintBlock && (\n          <div className=\"co-catalog-page__description odc-empty-state__hint-block\">\n            {hintBlock}\n          </div>\n        )}\n      </div>\n      <div className=\"odc-empty-state__content\">\n        <Gallery className=\"co-catalog-tile-view\" gutter=\"sm\">\n          {addActionExtensions.map((action) => (\n            <Item key={action.properties.id} namespace={activeNamespace} action={action} />\n          ))}\n        </Gallery>\n      </div>\n    </>\n  );\n};\n\nconst mapStateToProps = (state: RootState): StateProps => {\n  return {\n    activeNamespace: state.UI.get('activeNamespace'),\n  };\n};\n\nexport default connect<StateProps>(mapStateToProps)(ODCEmptyState);\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport * as cx from 'classnames';\nimport { NamespaceBar } from '@console/internal/components/namespace';\nimport ApplicationSelector from './dropdown/ApplicationSelector';\n\nimport './NamespacedPage.scss';\n\nexport enum NamespacedPageVariants {\n  light = 'light',\n  default = 'default',\n}\n\nexport interface NamespacedPageProps {\n  disabled?: boolean;\n  hideApplications?: boolean;\n  onNamespaceChange?: (newNamespace: string) => void;\n  variant?: NamespacedPageVariants;\n  toolbar?: React.ReactNode;\n}\n\nconst NamespacedPage: React.FC<NamespacedPageProps> = ({\n  children,\n  disabled,\n  onNamespaceChange,\n  hideApplications = false,\n  variant = NamespacedPageVariants.default,\n  toolbar,\n}) => (\n  <div className=\"odc-namespaced-page\">\n    <NamespaceBar disabled={disabled} onNamespaceChange={onNamespaceChange}>\n      {!hideApplications && <ApplicationSelector disabled={disabled} />}\n      {toolbar && <div className=\"odc-namespaced-page__toolbar\">{toolbar}</div>}\n    </NamespaceBar>\n    <div\n      className={cx('odc-namespaced-page__content', {\n        [`is-${variant}`]: variant !== NamespacedPageVariants.default,\n      })}\n    >\n      {children}\n    </div>\n  </div>\n);\n\nexport default NamespacedPage;\n","import * as React from 'react';\nimport * as _ from 'lodash';\nimport { HintBlock, LoadingBox, FirehoseResult } from '@console/internal/components/utils';\nimport ODCEmptyState from './EmptyState';\n\nexport interface ProjectsExistWrapperProps {\n  title: string;\n  projects?: FirehoseResult;\n  children: React.ReactElement;\n}\n\nconst ProjectsExistWrapper: React.FC<ProjectsExistWrapperProps> = ({\n  title,\n  projects,\n  children,\n}) => {\n  if (!projects.loaded) {\n    return <LoadingBox />;\n  }\n\n  if (_.isEmpty(projects.data)) {\n    return (\n      <ODCEmptyState\n        title={title}\n        hintBlock={\n          <HintBlock title=\"No projects exist\">\n            <p>\n              Select one of the following options to create an application, component or service. As\n              part of the creation process a project and application will be created.\n            </p>\n          </HintBlock>\n        }\n      />\n    );\n  }\n\n  return children;\n};\n\nexport default ProjectsExistWrapper;\n","import * as React from 'react';\nimport { Firehose } from '@console/internal/components/utils';\nimport { referenceForModel } from '@console/internal/module/k8s';\nimport { ServiceModel } from '@console/knative-plugin';\nimport { VirtualMachineModel } from '@console/kubevirt-plugin/src/models';\nimport { ResourceDropdown } from '@console/shared';\n\ninterface ApplicationDropdownProps {\n  id?: string;\n  className?: string;\n  dropDownClassName?: string;\n  menuClassName?: string;\n  buttonClassName?: string;\n  title?: React.ReactNode;\n  titlePrefix?: string;\n  allApplicationsKey?: string;\n  storageKey?: string;\n  disabled?: boolean;\n  allSelectorItem?: {\n    allSelectorKey?: string;\n    allSelectorTitle?: string;\n  };\n  namespace?: string;\n  actionItems?: {\n    actionTitle: string;\n    actionKey: string;\n  }[];\n  selectedKey: string;\n  autoSelect?: boolean;\n  onChange?: (key: string, name?: string) => void;\n  onLoad?: (items: { [key: string]: string }) => void;\n}\n\nconst ApplicationDropdown: React.FC<ApplicationDropdownProps> = ({ namespace, ...props }) => {\n  const resources = [\n    {\n      isList: true,\n      namespace,\n      kind: 'DeploymentConfig',\n      prop: 'deploymentConfigs',\n    },\n    {\n      isList: true,\n      namespace,\n      kind: 'Deployment',\n      prop: 'deployments',\n    },\n    {\n      isList: true,\n      kind: 'StatefulSet',\n      namespace,\n      prop: 'statefulSets',\n    },\n    {\n      isList: true,\n      kind: 'DaemonSet',\n      namespace,\n      prop: 'daemonSets',\n    },\n    {\n      isList: true,\n      kind: referenceForModel(ServiceModel),\n      namespace,\n      prop: 'knativeService',\n      optional: true,\n    },\n    {\n      isList: true,\n      kind: 'Secret',\n      namespace,\n      prop: 'secrets',\n    },\n    {\n      isList: true,\n      kind: VirtualMachineModel.kind,\n      namespace,\n      prop: 'virtualMachines',\n      optional: true,\n    },\n  ];\n  return (\n    <Firehose resources={resources}>\n      <ResourceDropdown\n        {...props}\n        placeholder=\"Select an Application\"\n        dataSelector={['metadata', 'labels', 'app.kubernetes.io/part-of']}\n      />\n    </Firehose>\n  );\n};\n\nexport default ApplicationDropdown;\n","import * as React from 'react';\nimport { connect, Dispatch } from 'react-redux';\nimport {\n  ALL_NAMESPACES_KEY,\n  ALL_APPLICATIONS_KEY,\n  APPLICATION_LOCAL_STORAGE_KEY,\n} from '@console/shared';\nimport { setActiveApplication } from '@console/internal/actions/ui';\nimport { RootState } from '@console/internal/redux';\nimport { getActiveNamespace, getActiveApplication } from '@console/internal/reducers/ui';\nimport ApplicationDropdown from './ApplicationDropdown';\n\nexport interface ApplicationSelectorProps {\n  disabled?: boolean;\n}\n\ninterface StateProps {\n  namespace: string;\n  application: string;\n}\n\ninterface DispatchProps {\n  onChange: (name: string) => void;\n}\n\ntype Props = ApplicationSelectorProps & StateProps & DispatchProps;\n\nconst ApplicationSelector: React.FC<Props> = ({ namespace, application, onChange, disabled }) => {\n  if (namespace === ALL_NAMESPACES_KEY) return null;\n\n  const allApplicationsTitle = 'all applications';\n  const title: string = application === ALL_APPLICATIONS_KEY ? allApplicationsTitle : application;\n\n  const onApplicationChange = (newApplication: string, key: string) => {\n    key === ALL_APPLICATIONS_KEY ? onChange(key) : onChange(newApplication);\n  };\n\n  return (\n    <ApplicationDropdown\n      className=\"co-namespace-selector\"\n      menuClassName=\"co-namespace-selector__menu\"\n      buttonClassName=\"pf-m-plain\"\n      namespace={namespace}\n      title={title && <span className=\"btn-link__title\">{title}</span>}\n      titlePrefix=\"Application\"\n      allSelectorItem={{\n        allSelectorKey: ALL_APPLICATIONS_KEY,\n        allSelectorTitle: allApplicationsTitle,\n      }}\n      selectedKey={application || ALL_APPLICATIONS_KEY}\n      onChange={onApplicationChange}\n      storageKey={APPLICATION_LOCAL_STORAGE_KEY}\n      disabled={disabled}\n    />\n  );\n};\n\nconst mapStateToProps = (state: RootState): StateProps => ({\n  namespace: getActiveNamespace(state),\n  application: getActiveApplication(state),\n});\n\nconst mapDispatchToProps = (dispatch: Dispatch): DispatchProps => ({\n  onChange: (app: string) => {\n    dispatch(setActiveApplication(app));\n  },\n});\n\nexport default connect<StateProps, DispatchProps, ApplicationSelectorProps>(\n  mapStateToProps,\n  mapDispatchToProps,\n)(ApplicationSelector);\n","import * as React from 'react';\nimport { Button } from '@patternfly/react-core';\nimport { createProjectModal } from '@console/internal/components/modals';\nimport { K8sResourceKind } from '@console/internal/module/k8s';\nimport ProjectListPage, { ProjectListPageProps } from './ProjectListPage';\n\nexport interface CreateProjectListPageProps extends ProjectListPageProps {\n  onCreate: (project: K8sResourceKind) => void;\n  title: string;\n}\n\nconst CreateProjectListPage: React.FC<CreateProjectListPageProps> = ({\n  onCreate,\n  title,\n  ...props\n}) => {\n  const openProjectModal = () => createProjectModal({ blocking: true, onSubmit: onCreate });\n\n  return (\n    <ProjectListPage {...props} title={title}>\n      Select a project to start adding to it or{' '}\n      <Button isInline variant=\"link\" onClick={openProjectModal}>\n        create a project\n      </Button>\n    </ProjectListPage>\n  );\n};\n\nexport default CreateProjectListPage;\n","// extracted by mini-css-extract-plugin","import * as React from 'react';\nimport { ListPage } from '@console/internal/components/factory';\nimport { ProjectsTable } from '@console/internal/components/namespace';\nimport { PageHeading } from '@console/internal/components/utils';\nimport './ProjectListPage.scss';\n\nexport interface ProjectListPageProps {\n  title: string;\n  listComponent?: React.ComponentType<any>;\n  children?: React.ReactNode;\n  badge?: React.ReactNode;\n}\nconst ProjectListPage: React.FC<ProjectListPageProps> = ({\n  badge,\n  title,\n  children,\n  listComponent,\n  ...listPageProps\n}) => (\n  <div className=\"odc-project-list-page\">\n    <PageHeading title={title} badge={badge}>\n      {children}\n    </PageHeading>\n    <hr className=\"odc-project-list-page__section-border\" />\n    <ListPage\n      {...listPageProps}\n      showTitle={false}\n      kind=\"Project\"\n      ListComponent={listComponent || ProjectsTable}\n      canCreate={false}\n      filterLabel=\"by name or display name\"\n      textFilter=\"project-name\"\n    />\n  </div>\n);\n\nexport default ProjectListPage;\n","import * as React from 'react';\nimport { Extension } from '@console/plugin-sdk/src/typings/base';\nimport { AccessReviewResourceAttributes } from '@console/internal/module/k8s';\n\nnamespace ExtensionProperties {\n  export type AddAction = {\n    /** ID used to identify the action. */\n    id: string;\n    /** The label of the action */\n    label: string;\n    /** The description of the action. */\n    description: string;\n    /** The perspective display icon. */\n    icon?: string | React.ReactElement;\n    /** The perspective display icon css class. */\n    iconClass?: string;\n    /** The URL to navigate to. */\n    url: string;\n    /** Optional access review to control visibility / enablement of the action. */\n    accessReview?: AccessReviewResourceAttributes[];\n    /** Optional funtion used to show/hide the add action */\n    hide?: () => boolean;\n  };\n}\n\nexport interface AddAction extends Extension<ExtensionProperties.AddAction> {\n  type: 'AddAction';\n}\n\nexport const isAddAction = (e: Extension): e is AddAction => {\n  return e.type === 'AddAction';\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAqBA;AAGA;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAKA;AAUA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAWA;AAEA;;;;;;;;;;;;AC7IA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAOA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAaA;AAaA;AAKA;AAGA;AAEA;AACA;AACA;AAMA;AACA;AAQA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;ACpGA;;;;;;;;;;;;ACAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AAUA;AASA;AACA;AACA;AAEA;AAEA;AACA;AAOA;;;;;;;;;;;;;AC3CA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAQA;AAKA;AACA;AACA;AAEA;AACA;AAKA;AAQA;AAEA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvCA;AACA;AACA;AACA;AACA;AACA;AA4BA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAOA;AAEA;;;;;;;;;;;;;AC3FA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAKA;AAEA;AACA;AAiBA;AACA;AAAA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AASA;AACA;AACA;AAOA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACpEA;AACA;AACA;AAEA;AAOA;AAAA;AAKA;AAEA;;AAEA;AACA;AAKA;AAEA;;;;;;;;;;;;AC5BA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA;AAQA;AAAA;AAMA;AAEA;AAGA;AACA;AAUA;AAEA;;;;;;;;;;;;;ACPA;AAAA;AAAA;AACA;AACA;;;;;A","sourceRoot":""}