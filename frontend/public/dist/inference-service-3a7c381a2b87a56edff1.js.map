{"version":3,"file":"inference-service-3a7c381a2b87a56edff1.js","sources":["webpack:///./public/components/hypercloud/inference-service.tsx"],"sourcesContent":["import * as React from 'react';\nimport * as classNames from 'classnames';\nimport { sortable } from '@patternfly/react-table';\nimport { useTranslation } from 'react-i18next';\nimport { TFunction } from 'i18next';\n\nimport { K8sResourceKind } from '../../module/k8s';\nimport { DetailsPage, ListPage, Table, TableRow, TableData, RowFunction } from '../factory';\nimport { Kebab, KebabAction, detailsPage, navFactory, ResourceKebab, ResourceLink, ResourceSummary, SectionHeading } from '../utils';\nimport { InferenceServiceModel } from '../../models';\nimport { ResourceLabel } from '../../models/hypercloud/resource-plural';\n\nexport const menuActions: KebabAction[] = [...Kebab.getExtensionsActionsForKind(InferenceServiceModel), ...Kebab.factory.common];\n\nconst kind = InferenceServiceModel.kind;\n\nconst tableColumnClasses = ['', '', classNames('pf-m-hidden', 'pf-m-visible-on-sm', 'pf-u-w-16-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), classNames('pf-m-hidden', 'pf-m-visible-on-lg'), Kebab.columnClass];\n\nconst InferenceServiceTableHeader = (t?: TFunction) => {\n  return [\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_1'),\n      sortField: 'metadata.name',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[0] },\n    },\n    {\n      title: t('COMMON:MSG_MAIN_TABLEHEADER_2'),\n      sortField: 'metadata.namespace',\n      transforms: [sortable],\n      props: { className: tableColumnClasses[1] },\n    },\n    {\n      title: t('COMMON:FRAMEWORK'),\n      transforms: [sortable],\n      props: { className: tableColumnClasses[2] },\n    },\n    {\n      title: t('COMMON:STORAGEURI'),\n      transforms: [sortable],\n      props: { className: tableColumnClasses[3] },\n    },\n    {\n      title: t('COMMON:URL'),\n      transforms: [sortable],\n      props: { className: tableColumnClasses[4] },\n    },\n    {\n      title: t('COMMON:CANARY'),\n      transforms: [sortable],\n      props: { className: tableColumnClasses[5] },\n    },\n    {\n      title: t('COMMON:STATUS'),\n      transforms: [sortable],\n      props: { className: tableColumnClasses[6] },\n    },\n    {\n      title: '',\n      props: { className: tableColumnClasses[7] },\n    },\n  ];\n};\nInferenceServiceTableHeader.displayName = 'InferenceServiceTableHeader';\n\nconst InferenceServiceTableRow: RowFunction<K8sResourceKind> = ({ obj: isvc, index, key, style }) => {\n  const frameworkList = ['tensorflow', 'onnx', 'sklearn', 'xgboost', 'pytorch', 'tensorrt'];\n  let framework = frameworkList.includes(Object.keys(isvc.spec.default.predictor)[0]) ? Object.keys(isvc.spec.default.predictor)[0] : Object.keys(isvc.spec.default.predictor)[1];\n  return (\n    <TableRow id={isvc.metadata.uid} index={index} trKey={key} style={style}>\n      <TableData className={tableColumnClasses[0]}>\n        <ResourceLink kind={kind} name={isvc.metadata.name} namespace={isvc.metadata.namespace} title={isvc.metadata.uid} />\n      </TableData>\n      <TableData className={classNames(tableColumnClasses[1], 'co-break-word')}>\n        <ResourceLink kind=\"Namespace\" name={isvc.metadata.namespace} title={isvc.metadata.namespace} />\n      </TableData>\n      <TableData className={tableColumnClasses[2]}>\n        {framework}\n      </TableData>\n      <TableData className={tableColumnClasses[3]}>\n        {isvc.spec.default.predictor[framework]?.storageUri}\n      </TableData>\n      <TableData className={tableColumnClasses[4]}>\n        {isvc.status.url}\n      </TableData>\n      <TableData className={tableColumnClasses[5]}>\n        {isvc.status.canary && Object.keys(isvc.status.canary).length === 0 ? 'N' : 'Y'}\n      </TableData>\n      <TableData className={tableColumnClasses[6]}>\n        {isvc.status.conditions.length ? isvc.status.conditions[isvc.status.conditions.length - 1].status : ''}\n      </TableData>\n      <TableData className={tableColumnClasses[7]}>\n        <ResourceKebab actions={menuActions} kind={kind} resource={isvc} />\n      </TableData>\n    </TableRow>\n  );\n};\n\nconst InferenceServiceDetails: React.FC<InferenceServiceDetailsProps> = ({ obj: isvc }) => {\n  const { t } = useTranslation();\n  return (\n    <>\n      <div className=\"co-m-pane__body\">\n        <SectionHeading text={t('COMMON:MSG_DETAILS_TABDETAILS_DETAILS_1', { 0: ResourceLabel(isvc, t) })}/>\n        <div className=\"row\">\n          <div className=\"col-lg-6\">\n            <ResourceSummary resource={isvc} />\n          </div>\n        </div>\n      </div>\n    </>\n  );\n}\n\nconst { details, editYaml } = navFactory;\nexport const InferenceServices: React.FC = props => {\n  const { t } = useTranslation();\n  return <Table {...props} aria-label=\"InferenceServices\" Header={InferenceServiceTableHeader.bind(null, t)} Row={InferenceServiceTableRow} virtualize />;\n}\n\nexport const InferenceServicesPage: React.FC<InferenceServicesPageProps> = props => <ListPage canCreate={true} ListComponent={InferenceServices} kind={kind} {...props} />;\n\nexport const InferenceServicesDetailsPage: React.FC<InferenceServicesDetailsPageProps> = props => <DetailsPage {...props} kind={kind} menuActions={menuActions} pages={[details(detailsPage(InferenceServiceDetails)), editYaml()]} />;\n\ntype InferenceServiceDetailsProps = {\n  obj: K8sResourceKind;\n};\n\ntype InferenceServicesPageProps = {\n  showTitle?: boolean;\n  namespace?: string;\n  selector?: any;\n};\n\ntype InferenceServicesDetailsPageProps = {\n  match: any;\n};\n"],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAGA;AAGA;AAGA;AAGA;AAGA;AACA;AAIA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;;;;;A","sourceRoot":""}